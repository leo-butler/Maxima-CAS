
@menu
* Introduction to Trigonometric::  
* Definitions for Trigonometric::  
@end menu

@node Introduction to Trigonometric, Definitions for Trigonometric, Trigonometric, Trigonometric
@section Introduction to Trigonometric

Maxima has many trigonometric functions defined.  Not all trigonometric
identities are programmed, but it is possible for the user to add many
of them using the pattern matching capabilities of the system.  The
trigonometric functions defined in Maxima are: @code{acos},
@code{acosh}, @code{acot}, @code{acoth}, @code{acsc},
@code{acsch}, @code{asec}, @code{asech}, @code{asin}, 
@code{asinh}, @code{atan}, @code{atanh}, @code{cos}, 
@code{cosh}, @code{cot}, @code{coth}, @code{csc}, @code{csch}, 
@code{sec}, @code{sech}, @code{sin}, @code{sinh}, @code{tan}, 
and @code{tanh}.  There are a number of commands especially for 
handling trigonometric functions, see @code{trigexpand},
@code{trigreduce}, and the switch @code{trigsign}.  Two share 
packages extend the simplification rules built into Maxima, 
@code{ntrig} and @code{atrig1}.  Do @code{describe(@var{command})}
for details.

@node Definitions for Trigonometric,  , Introduction to Trigonometric, Trigonometric
@section Definitions for Trigonometric

@deffn {function} acos (x)
 - Arc Cosine.

@end deffn

@deffn {function} acosh (x)
 - Hyperbolic Arc Cosine.

@end deffn

@deffn {function} acot (x)
 - Arc Cotangent.

@end deffn

@deffn {function} acoth (x)
 - Hyperbolic Arc Cotangent.

@end deffn

@deffn {function} acsc (x)
 - Arc Cosecant.

@end deffn

@deffn {function} acsch (x)
 - Hyperbolic Arc Cosecant.

@end deffn

@deffn {function} asec (x)
 - Arc Secant.

@end deffn

@deffn {function} asech (x)
 - Hyperbolic Arc Secant.

@end deffn

@deffn {function} asin (x)
 - Arc Sine.

@end deffn

@deffn {function} asinh (x)
 - Hyperbolic Arc Sine.

@end deffn

@deffn {function} atan (x)
 - Arc Tangent.

@end deffn

@deffn {function} atan2 (y, x)
- yields the value of @code{atan(@var{y}/@var{x})} in the interval @code{-%pi} to
@code{%pi}.

@end deffn

@deffn {function} atanh (x)
 - Hyperbolic Arc Tangent.

@end deffn

@defvr {package} atrig1
The @code{atrig1} package contains several additional simplification rules 
for inverse trigonometric functions.  Together with rules
already known to Maxima, the following angles are fully implemented:
@code{0}, @code{%pi/6}, @code{%pi/4}, @code{%pi/3}, and @code{%pi/2}.  
Corresponding angles in the other three quadrants are also available.  
Do @code{load(atrig1);} to use them.

@end defvr

@deffn {function} cos (x)
 - Cosine.

@end deffn

@deffn {function} cosh (x)
 - Hyperbolic Cosine.

@end deffn

@deffn {function} cot (x)
 - Cotangent.

@end deffn

@deffn {function} coth (x)
 - Hyperbolic Cotangent.

@end deffn

@deffn {function} csc (x)
 - Cosecant.

@end deffn

@deffn {function} csch (x)
 - Hyperbolic Cosecant.

@end deffn

@defvr {option variable} halfangles
default value: @code{false} - if @code{true} causes half-angles to be
simplified away.

@end defvr

@defvr {package} ntrig
The @code{ntrig} package contains a set of simplification rules that are
used to simplify trigonometric function whose arguments are of the form
@code{@var{fun}(@var{n}*%pi/10)} where @var{fun} is any of the functions 
@code{sin}, @code{cos}, @code{tan}, @code{csc}, @code{sec} and @code{cot}.

@end defvr

@deffn {function} sec (x)
 - Secant.

@end deffn

@deffn {function} sech (x)
 - Hyperbolic Secant.

@end deffn

@deffn {function} sin (x)
 - Sine.

@end deffn

@deffn {function} sinh (x)
 - Hyperbolic Sine.

@end deffn

@deffn {function} tan (x)
 - Tangent.

@end deffn

@deffn {function} tanh (x)
 - Hyperbolic Tangent.

@end deffn

@deffn {function} trigexpand (exp)
expands trigonometric and hyperbolic functions of
sums of angles and of multiple angles occurring in @var{exp}.  For best
results, @var{exp} should be expanded.  To enhance user control of
simplification, this function expands only one level at a time,
expanding sums of angles or multiple angles.  To obtain full expansion
into sines and cosines immediately, set the switch @code{trigexpand:true}.

@code{trigexpand} - if @code{true} causes expansion of all
expressions containing sin's and cos's occurring subsequently.

@code{halfangles} - if @code{true} causes half-angles to be simplified
away.

@code{trigexpandplus} - controls the "sum" rule for @code{trigexpand},
expansion of sums (e.g. @code{sin(x+y)}) will take place only if
@code{trigexpandplus} is @code{true}.

@code{trigexpandtimes} - controls the "product" rule for @code{trigexpand},
expansion of products (e.g. @code{sin(2*x)}) will take place only if
@code{trigexpandtimes} is @code{true}.

@example
(%i1) X+SIN(3*X)/SIN(X),TRIGEXPAND=TRUE,EXPAND;
                              2           2
(%o1)                     - SIN (X) + 3 COS (X) + X
(%i2) TRIGEXPAND(SIN(10*X+Y));
(%o2)               COS(10 X) SIN(Y) + SIN(10 X) COS(Y)

@end example

@end deffn

@defvr {option variable} trigexpandplus
default value: @code{true} - controls the "sum" rule for
@code{trigexpand}.  Thus, when the @code{trigexpand} command is used or the
@code{trigexpand} switch set to @code{true}, expansion of sums 
(e.g. @code{sin(x+y))} will take place only if @code{trigexpandplus} is 
@code{true}.

@end defvr

@defvr {option variable} trigexpandtimes
default value: @code{true} - controls the "product" rule for
@code{trigexpand}.  Thus, when the @code{trigexpand} command is used or the
@code{trigexpand} switch set to @code{true}, expansion of products (e.g. @code{sin(2*x)})
will take place only if @code{trigexpandtimes} is @code{true}.

@end defvr

@defvr {option variable} triginverses
default value: @code{all} - controls the simplification of the
composition of trigonometric and hyperbolic functions with their inverse
functions: If @code{all}, both e.g. @code{atan(tan(@var{x}))} 
and @code{tan(atan(@var{x}))} simplify to @var{x}.  
If @code{true}, the @code{@var{arcfun}(@var{fun}(@var{x}))} 
simplification is turned off.  If @code{false}, both the 
@code{@var{arcfun}(@var{fun}(@var{x}))} and 
@code{@var{fun}(@var{arcfun}(@var{x}))}
simplifications are turned off.

@end defvr

@deffn {function} trigreduce (exp, var)
@deffnx {function} trigreduce (exp)
combines products and powers of trigonometric
and hyperbolic sin's and cos's of @var{var} into those of multiples of @var{var}.
It also tries to eliminate these functions when they occur in
denominators.  If @var{var} is omitted then all variables in @var{exp} are used.
Also see @code{poissimp}.

@example
(%i4) TRIGREDUCE(-SIN(X)^2+3*COS(X)^2+X);
(%o4)                        2 COS(2 X) + X + 1

@end example

The trigonometric simplification routines will use declared
information in some simple cases.  Declarations about variables are
used as follows, e.g.

@example
(%i5) DECLARE(J, INTEGER, E, EVEN, O, ODD)$
(%i6) SIN(X + (E + 1/2)*%PI)$
(%o6)                      COS(X)
(%i7) SIN(X + (O + 1/2) %PI);
(%o7)                     - COS(X)

@end example

@end deffn

@defvr {option variable} trigsign
default value: @code{true} - if @code{true} permits simplification of negative
arguments to trigonometric functions. E.g., @code{sin(-x)} will become
@code{-sin(x)} only if @code{trigsign} is @code{true}.

@end defvr

@deffn {function} trigsimp (expr)
employs the identities @code{sin(x)^2 + cos(x)^2 = 1} and
@code{cosh(x)^2 - sinh(x)^2 = 1} to simplify expressions containing @code{tan}, @code{sec},
etc. to @code{sin}, @code{cos}, @code{sinh}, @code{cosh} so that further simplification may be
obtained by using @code{trigreduce} on the result.  Some examples may be seen
by doing @code{demo("trgsmp.dem");}.  See also the @code{trigsum} function.

@end deffn

@deffn {function} trigrat (trigexp)
gives a canonical simplifyed quasilinear form of a
trigonometrical expression; @var{trigexp} is a rational fraction of several @code{sin},
@code{cos} or @code{tan}, the arguments of them are linear forms in some variables (or
kernels) and @code{%pi/@var{n}} (@var{n} integer) with integer coefficients. The result is a
simplifyed fraction with numerator and denominator linear in @code{sin} and @code{cos}.
Thus @code{trigrat} linearize always when it is possible.  (written by D. Lazard).

@example
(%i1) trigrat(sin(3*a)/sin(a+%pi/3));
(%o1)              sqrt(3) sin(2 a) + cos(2 a) - 1

@end example

Here is another example (for which the function was intended); see
[Davenport, Siret, Tournier, Calcul Formel, Masson (or in english,
Addison-Wesley), section 1.5.5, Morley theorem)].

@example
(%i2) c: %pi/3 - a - b;
                                      %pi
(%o2)                       - b - a + ---
                                       3
(%i3) bc: sin(a)*sin(3*c)/sin(a+b);
                        sin(a) sin(3 b + 3 a)
(%o3)                   ---------------------
                             sin(b + a)
(%i4) ba: bc, c=a, a=c$
(%i5) ac2: ba^2 + bc^2 - 2*bc*ba*cos(b);
         2       2
      sin (a) sin (3 b + 3 a)
(%o5) -----------------------
               2
            sin (b + a)

                                        %pi
   2 sin(a) sin(3 a) cos(b) sin(b + a - ---) sin(3 b + 3 a)
                                         3
 - --------------------------------------------------------
                           %pi
                   sin(a - ---) sin(b + a)
                            3

      2         2         %pi
   sin (3 a) sin (b + a - ---)
                           3
 + ---------------------------
             2     %pi
          sin (a - ---)
                    3
(%i6) trigrat (ac2);
(%o6) - (sqrt(3) sin(4 b + 4 a) - cos(4 b + 4 a)

 - 2 sqrt(3) sin(4 b + 2 a) + 2 cos(4 b + 2 a)

 - 2 sqrt(3) sin(2 b + 4 a) + 2 cos(2 b + 4 a)

 + 4 sqrt(3) sin(2 b + 2 a) - 8 cos(2 b + 2 a) - 4 cos(2 b - 2 a)

 + sqrt(3) sin(4 b) - cos(4 b) - 2 sqrt(3) sin(2 b) + 10 cos(2 b)

 + sqrt(3) sin(4 a) - cos(4 a) - 2 sqrt(3) sin(2 a) + 10 cos(2 a)

 - 9)/4

@end example

@end deffn

