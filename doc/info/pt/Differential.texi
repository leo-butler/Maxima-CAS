@c Language: Brazilian Portuguese, Encoding: iso-8859-1
@c /Differential.texi/1.8/Thu Apr 21 04:26:33 2005/-ko/
@menu
* Defini@value{cedilha}@~oes para Equa@value{cedilha}@~oes Diferenciais::  
@end menu

@node Defini@value{cedilha}@~oes para Equa@value{cedilha}@~oes Diferenciais,  , Equa@value{cedilha}@~oes Diferenciais, Equa@value{cedilha}@~oes Diferenciais
@section Defini@value{cedilha}@~oes para Equa@value{cedilha}@~oes Diferenciais


@deffn {Fun@,{c}@~ao} bc2 (@var{solu@value{cedilha}@~ao}, @var{xval1}, @var{yval1}, @var{xval2}, @var{yval2})
Resolve problema do valor limite para equa@value{cedilha}@~oes diferenciais de segunda ordem. 
Aqui: @var{solu@value{cedilha}@~ao} @'e uma solu@value{cedilha}@~ao geral para a equa@value{cedilha}@~ao, como
encontrado por @code{ode2}, @var{xval1} @'e uma equa@value{cedilha}@~ao para a vari@'avel
independente na forma @code{@var{x} = @var{x0}}, e @var{yval1} @'e
uma equa@value{cedilha}@~ao para a vari@'avel dependente na forma 
@code{@var{y} = @var{y0}}.  A @var{xval2} e a @var{yval2} s@~ao
equa@value{cedilha}@~oes para essas vari@'aveis em outro ponto.
Veja @code{ode2} para exemplo de utiliza@value{cedilha}@~ao.

@end deffn


@deffn {Fun@,{c}@~ao} desolve (@var{eqn}, @var{x})
@deffnx {Fun@,{c}@~ao} desolve ([@var{eqn_1}, ..., @var{eqn_n}], [@var{x_1}, ..., @var{x_n}])
A fun@value{cedilha}@~ao @code{dsolve} resolve sistemas de equa@value{cedilha}@~oes
diferenciais ordin@'arias lineares usando transformada de Laplace.  
Aqui as @var{eqn}'s s@~ao equa@value{cedilha}@~oes diferenciais nas
vari@'aveis dependentes @var{x_1}, ..., @var{x_n}. 
A rela@value{cedilha}@~ao funcional deve ser explicitamente 
indicada em ambas as equa@value{cedilha}@~oes e as vari@'aveis.  Por Exemplo

@example
'diff(f,x,2)=sin(x)+'diff(g,x);
'diff(f,x)+x^2-f=2*'diff(g,x,2);
@end example

n@~ao @'e o formato apropriado.  O caminho correto @'e:

@example
'diff(f(x),x,2)=sin(x)+'diff(g(x),x);
'diff(f(x),x)+x^2-f=2*'diff(g(x),x,2);
@end example

A chamada @'e ent@~ao @code{desolve([%o3,%o4],[f(x),g(x)]);} .

Se as condi@value{cedilha}@~oes iniciais em 0 s@~ao conhecidas, elas podem ser fornecidas antes
chamando @code{desolve} atrav@'es de @code{atvalue}.

@c ===beg===
@c 'diff(f(x),x)='diff(g(x),x)+sin(x);
@c 'diff(g(x),x,2)='diff(f(x),x)-cos(x);
@c atvalue('diff(g(x),x),x=0,a);
@c atvalue(f(x),x=0,1);
@c desolve([%o1,%o2],[f(x),g(x)]);
@c [%o1,%o2],%o5,diff;
@c ===end===
@example
(%i1) @b{@t{'diff(f(x),x)='diff(g(x),x)+sin(x);}}
                 d           d
(%o1)            -- (f(x)) = -- (g(x)) + sin(x)
                 dx          dx
(%i2) @b{@t{'diff(g(x),x,2)='diff(f(x),x)-cos(x);}}
                  2
                 d            d
(%o2)            --- (g(x)) = -- (f(x)) - cos(x)
                   2          dx
                 dx
(%i3) @b{@t{atvalue('diff(g(x),x),x=0,a);}}
(%o3)                           a
(%i4) @b{@t{atvalue(f(x),x=0,1);}}
(%o4)                           1
(%i5) @b{@t{desolve([%o1,%o2],[f(x),g(x)]);}}
                  x
(%o5) [f(x) = a %e  - a + 1, g(x) = 

                                                x
                                   cos(x) + a %e  - a + g(0) - 1]
(%i6) @b{@t{[%o1,%o2],%o5,diff;}}
             x       x      x                x
(%o6)   [a %e  = a %e , a %e  - cos(x) = a %e  - cos(x)]

@end example

Se @code{desolve} n@~ao pode obter uma solu@value{cedilha}@~ao, retorna @code{false}.

@end deffn


@deffn {Fun@,{c}@~ao} ic1 (@var{solu@value{cedilha}@~ao}, @var{xval}, @var{yval})
Resolve o problema do valor inicial para equa@value{cedilha}@~ao diferencial de primeira ordem. 
Aqui: @var{solu@value{cedilha}@~ao} @'e uma solu@value{cedilha}@~ao geral para a equa@value{cedilha}@~ao, como
encontrado por @code{ode2}, @var{xval} @'e uma equa@value{cedilha}@~ao para a vari@'avel
independente na forma @code{@var{x} = @var{x0}}, e @var{yval} @'e
uma equa@value{cedilha}@~ao para a vari@'avel dependente na forma 
@code{@var{y} = @var{y0}}. Veja @code{ode2} para exemplo de utiliza@value{cedilha}@~ao.

@end deffn


@deffn {Fun@,{c}@~ao} ic2 (@var{solu@value{cedilha}@~ao}, @var{xval}, @var{yval}, @var{dval})
Resolve o problema do valor inicial para equa@value{cedilha}@~ao diferencial de segunda ordem. 
Aqui: @var{solu@value{cedilha}@~ao} @'e uma solu@value{cedilha}@~ao geral para a equa@value{cedilha}@~ao, como
encontrado por @code{ode2}, @var{xval} @'e uma equa@value{cedilha}@~ao para a vari@'avel
independente na forma @code{@var{x} = @var{x0}}, @var{yval} @'e
uma equa@value{cedilha}@~ao para a vari@'avel dependente na forma 
@code{@var{y} = @var{y0}}, e @var{dval} @'e uma equa@value{cedilha}@~ao para
a derivada da vari@'avel dependente com rela@value{cedilha}@~ao @`a
vari@'avel independente avaliada no ponto @var{xval}. 
Veja @code{ode2} para exemplo de utiliza@value{cedilha}@~ao.

@end deffn


@deffn {Fun@,{c}@~ao} ode2 (@var{eqn}, @var{dvar}, @var{ivar})
A fun@value{cedilha}@~ao @code{ode2} resolve equa@value{cedilha}@~oes diferenciais ordin@'aria ou de primeira ou de segunda ordem.
Recebe tr@^es argumentos: uma EDO @var{eqn}, a vari@'avel dependente
@var{dvar}, e a vari@'avel independente@var{ivar}.  
Quando obt@'em sucesso, retorna ou uma solu@value{cedilha}@~ao (expl@'icita ou impl@'icita) para a
vari@'avel dependente.  @code{%c} @'e usado para representar a constante no caso
de equa@value{cedilha}@~oes de primeira ordem, e @code{%k1} e @code{%k2} as constantes para equa@value{cedilha}@~oes
de segunda ordem.  Se @code{ode2} n@~ao pode obter a solu@value{cedilha}@~ao por alguma
raz@~ao, retorna @code{false}, ap@'os talvez mostra uma mensagem de erro.
O m@'etodo implementado para equa@value{cedilha}@~oes diferenciais de primeira ordem na seq@"u@^encia na
qual eles s@~ao testados s@~ao: linear, separ@'avel, exato - talvez
requerendo um fator de integra@value{cedilha}@~ao, homog@^eneos, equa@value{cedilha}@~ao de Bernoulli,
e um m@'etodo homog@^eneo geral.
Para segunda ordem: coeficiente constante, exato, linear homog@^eneo com
coeficientes n@~ao-constantes os quais podem ser transformados para coeficientes
constates, o Euler ou equa@value{cedilha}@~ao equidimensional, o m@'etodo de
varia@value{cedilha}@~ao de par@^ametros, e equa@value{cedilha}@~oes as quais s@~ao livres ou da
vari@'avel independente ou da dependente de modo que elas possam ser reduzidas
duas equa@value{cedilha}@~oes lineares de primeria ordem para serem resolvidas seq@"u@^encialmente.
No curso de resolver EDOs, muitas vari@'aveis s@~ao escolhidas puramente para
prop@'ositos informativos: @code{m@'etodo} denota o m@'etodo de solu@value{cedilha}@~ao usado
e.g. @code{linear}, @code{intfactor} denota qualquer fator de integra@value{cedilha}@~ao usado, @code{odeindex} denota o @'indice para o m@'etodo de Bernoulli ou para o m@'etodo homog@^eneo
generalizado, e @code{yp} denota a solu@value{cedilha}@~ao particular para a
t@'ecnica de varia@value{cedilha}@~ao de par@^ametros.

Com o objetivo de resolver os problemas dos valores iniciais (PVIs) e
problemas dos valores limite (PVLs), a rotina @code{ic1} est@'a dispon@'ivel 
para equa@value{cedilha}@~oes de primeira ordem, e @code{ic2} e @code{bc2} para segunda
ordem PVIs e PVLs, respectively.  

Example:

@c ===beg===
@c x^2*'diff(y,x) + 3*y*x = sin(x)/x;
@c ode2(%,y,x);
@c ic1(%o2,x=%pi,y=0);
@c 'diff(y,x,2) + y*'diff(y,x)^3 = 0;
@c ode2(%,y,x);
@c ratsimp(ic2(%o5,x=0,y=0,'diff(y,x)=2));
@c bc2(%o5,x=0,y=1,x=1,y=3);
@c ===end===
@example
(%i1) @b{@t{x^2*'diff(y,x) + 3*y*x = sin(x)/x;}}
                      2 dy           sin(x)
(%o1)                x  -- + 3 x y = ------
                        dx             x
(%i2) @b{@t{ode2(%,y,x);}}
                             %c - cos(x)
(%o2)                    y = -----------
                                  3
                                 x
(%i3) @b{@t{ic1(%o2,x=%pi,y=0);}}
                              cos(x) + 1
(%o3)                   y = - ----------
                                   3
                                  x
(%i4) @b{@t{'diff(y,x,2) + y*'diff(y,x)^3 = 0;}}
                         2
                        d y      dy 3
(%o4)                   --- + y (--)  = 0
                          2      dx
                        dx
(%i5) @b{@t{ode2(%,y,x);}}
                      3
                     y  + 6 %k1 y
(%o5)                ------------ = x + %k2
                          6
(%i6) @b{@t{ratsimp(ic2(%o5,x=0,y=0,'diff(y,x)=2));}}
                             3
                          2 y  - 3 y
(%o6)                   - ---------- = x
                              6
(%i7) @b{@t{bc2(%o5,x=0,y=1,x=1,y=3);}}
                         3
                        y  - 10 y       3
(%o7)                   --------- = x - -
                            6           2

@end example

@end deffn
