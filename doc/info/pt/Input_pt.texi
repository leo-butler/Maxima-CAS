@c /Input.texi/1.35/Fri Jun 17 00:57:33 2005/-ko/
@menu
* Introdu@value{cedilha}@~ao a Entrada e Sa@'ida::  
* Arquivos::                       
* Defini@value{cedilha}@~oes para Entrada e Sa@'ida::  
@end menu

@node Introdu@value{cedilha}@~ao a Entrada e Sa@'ida, Arquivos, Entrada e Sa@'ida, Entrada e Sa@'ida
@section Introdu@value{cedilha}@~ao a Entrada e Sa@'ida

@node Arquivos, Defini@value{cedilha}@~oes para Entrada e Sa@'ida, Introdu@value{cedilha}@~ao a Entrada e Sa@'ida, Entrada e Sa@'ida
@section Arquivos
Um arquivo @'e simplesmente uma @'area sobre um dispositivo particular de armazenagem que cont@'em dados ou texto.
Arquivos em disco s@~ao figurativamente agrupados dentro de "diret@'orios".
Um diret@'orio @'e apenas uma lista de arquivos.
Comandos que lidam com arquivos s@~ao:
@code{save},
@code{load},
@code{loadfile},
@code{stringout},
@code{batch},
@code{demo},
@code{writefile},
@code{closefile},
and
@code{appendfile}.

@node Defini@value{cedilha}@~oes para Entrada e Sa@'ida,  , Arquivos, Entrada e Sa@'ida
@section Defini@value{cedilha}@~oes para Entrada e Sa@'ida de Dados

@defvr {Vari@'avel de sistema} _

@code{_} @'e a mais recente express@~ao de  entrada (e.g., @code{%i1}, @code{%i2}, @code{%i3}, ...).

A @code{_} @'e atribu@'ida a entrada antes dela ser simplificada ou avaliada.
Todavia, o valor de @code{_} @'e simplificado (mas n@~ao avaliado) quando for mostrado.

@code{_} @'e reconhecido por @code{batch}, mas n@~ao por @code{load}.

Veja tamb@'em @code{%} e @code{%%}.

Exemplos:

@c ===beg===
@c 13 + 29;
@c :lisp $_
@c _;
@c sin (%pi/2);
@c :lisp $_
@c _;
@c a: 13$
@c b: 29$
@c a + b;
@c :lisp $_
@c _;
@c a + b;
@c ev (_);
@c ===end===
@example
(%i1) 13 + 29;
(%o1)                          42
(%i2) :lisp $_
((MPLUS) 13 29)
(%i2) _;
(%o2)                          42
(%i3) sin (%pi/2);
(%o3)                           1
(%i4) :lisp $_
((%SIN) ((MQUOTIENT) $%PI 2))
(%i4) _;
(%o4)                           1
(%i5) a: 13$
(%i6) b: 29$
(%i7) a + b;
(%o7)                          42
(%i8) :lisp $_
((MPLUS) $A $B)
(%i8) _;
(%o8)                         b + a
(%i9) a + b;
(%o9)                          42
(%i10) ev (_);
(%o10)                         42
@end example

@end defvr

@defvr {System variable} %

@code{%} @'e a express@~ao de sa@'ida (e.g., @code{%o1}, @code{%o2}, @code{%o3}, ...)
mais recentemente calculada pelo Maxima,
pode ou n@~ao ser mostrada.
Veja tamb@'em @code{%%} e @code{%th}.

@end defvr

@defvr {Vari@'avel de sistema} %%
Uma declara@,{c}@~ao composta compreende duas ou mais declara@,{c}@~oes,
@code{%%} @'e os valor da declara@,{c}@~ao anterior.
Por exemplo,

@example
block (integrate (x^5, x), ev (%%, x=2) - ev (%%, x=1));
block ([prev], prev: integrate (x^5, x), ev (prev, x=2) - ev (prev, x=1));
@end example

retornam o mesmo resultado, a saber @code{21/2}.

Uma declara@,{c}@~ao composta pode compreender outras declara@,{c}@~oes compostas.
Pode uma declara@,{c}@~ao ser simples ou composta, 
@code{%%} @'e o valor da declara@,{c}@~ao anterior.
Por exemplo,

@example
block (block (a^n, %%*42), %%/6)
@end example

retorna @code{7*a^n}.

Dentro da declara@,{c}@~ao composta, o valor de @code{%%} pode ser inspecionado em uma parada de linha de comando,
que @'e aberta pela execu@,{c}@~ao da fun@,{c}@~ao @code{break}.
Por exemplo, na parada de linha de comando aberta por

@example
block (a: 42, break ())$
@end example

digitando @code{%%;} retorna @code{42}.

Na primeira declara@,{c}@~ao em uma declara@,{c}@~ao composta,
ou fora de uma declara@,{c}@~ao composta,
@code{%%} @'e indefinido.

@end defvr

@defvr {Vari@'avel de op@,{c}@~ao} %edispflag
Valor padr@~ao: @code{false}

Quando @code{%edispflag} @'e @code{true},
Maxima mostra @code{%e} para um expoente negativo como um quociente.
Por exemplo, @code{%e^-x} @'e mostrado como @code{1/%e^x}.

@end defvr

@deffn {Fun@,{c}@~ao} %th (@var{i})
O valor da @var{i}'@'esima express@~ao pr@'evia de sa@'ida.
Isto @'e, se a pr@'oxima express@~ao a ser calculada for a @var{n}'@'esima sa@'ida,
@code{%th (@var{m})} ser@'a a (@var{n} - @var{m})'@'esima sa@'ida.

@code{%th} @'e @'util em arquivos @code{batch} ou para referir-se a um grupo de express@~oes de sa@'ida.
Por exemplo,

@example
block (s: 0, for i:1 thru 10 do s: s + %th (i))$
@end example

escolhe @code{s} para a soma das @'ultimas dez express@~oes de sa@'ida.

@end deffn

@deffn {S@'imbolo especial} "?"
Como prefixo para uma fun@,{c}@~ao ou nome de vari@'avel, @code{?} significa que
o nome @'e um nome Lisp, n@~ao um nome Maxima.
Por exemplo, @code{?round} significa a fun@,{c}@~ao Lisp @code{ROUND}.
Veja @ref{Lisp e Maxima} para mais sobre esse ponto.

A nota@,{c}@~ao @code{? word} (um ponto de interroga@,{c}@~ao seguido de uma palavra e separado desta por um espa@,{c}o em branco)
@'e equivalente a @code{describe ("word")}.

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} absboxchar
Valor padr@~ao: @code{!}

@code{absboxchar} @'e o caracter usado para para desenhar o sinal de valor
absoluto em torno de express@~oes que s@~ao maiores que uma linha de altura.

@end defvr


@deffn {Fun@,{c}@~ao} appendfile (@var{filename})
Adiciona ao final de @var{filename} uma transcri@,{c}@~ao do console.
@code{appendfile} @'e o mesmo que @code{writefile}, 
exceto que o arquivo transcrito, se j@'a existe, ter@'a sempre alguma coisa adicionada ao seu final.

@code{closefile} fecha o arquivo transcrito que foi aberto anteriormente por @code{appendfile} ou por @code{writefile}.

@end deffn

@c batch CAN TAKE 'test AS AN OPTIONAL ARGUMENT IN WHICH CASE IT CALLS test-batch
@c (SAME AS run_testsuite) -- SHOULD DOCUMENT batch (file, 'test)
@c FIX BUG WHICH CAUSES batch (<file>, 'test) TO FAIL, THEN DOCUMENT IT HERE
@deffn {Fun@,{c}@~ao} batch (@var{filename})
L@^e express@~oes Maxima do arquivo @var{filename} e as avalia.
@code{batch} procura pelo arquivo @var{filename} na lista @code{file_search_maxima}.
Veja @code{file_search}.

@var{filename} compreende uma seq@"u@^encia de express@~oes Maxima,
cada uma terminada com @code{;} ou @code{$}.
A var@'avel especial @code{%} e a fun@,{c}@~ao @code{%th}
referem-se a resultados pr@'evios dentro do arquivo.
O arquivo pode incluir constru@,{c}@~oes @code{:lisp}.
Espa@,{c}os, tabula@,{c}@~oes, e o caracter de nova linha no arquivo ser@~ao ignorados.
um arquivo de entrada conveniente pode ser criado por um editor de texto ou pela fun@,{c}@~ao @code{stringout}.

@code{batch} l@^e cada express@~ao de entrada de @var{filename},
mostra a entrada para o console, 
calcula a correspondente express@~ao de sa@'ida,
e mostra a express@~ao de sa@'ida.
R@'otulos de entrada s@~ao atribu@'idos para express@~oes de entrada
e r@'otulos de sa@'ida s@~ao atribu@'idos para express@~oes de sa@'ida.
@code{batch} avalia toda express@~ao de entrada no arquivo
a menos que exista um erro.
Se uma entrada de usu@'ario for requisitada (by @code{asksign} ou @code{askinteger}, por exemplo)
@code{batch} interrompe para coletar a entrada requisitada e ent@~ao continua.

@c CTRL-C BREAKS batch IN CMUCL, BUT CLISP (ALTHO IT SHOWS "User break") KEEPS GOING !!!
@c DON'T KNOW ABOUT GCL !!!
Isso possibilita interromper @code{batch} pela digita@,{c}@~ao de @code{control-C} no console.
O efeito de @code{control-C} depende da subjacente implementa@,{c}@~ao do Lisp.

@code{batch} tem muitos usos,
tais como fornecer um reservat@'orio para trabalhar linhas de comando,
para fornecer demonstra@,{c}@~oes livres de erros,
ou para ajudar a organizar alguma coisa na solu@,{c}@~ao de problemas complexos.

@code{batch} avalia seu argumento.
@c LACK OF A RETURN VALUE IS A BUG; THE INTENT IS TO RETURN THE FILE PATH, TO JUDGE BY THE SOURCE CODE
@code{batch} n@~ao possue valor de retorno.

Veja tamb@'em @code{load}, @code{batchload}, e @code{demo}.

@end deffn

@c RECOMMEND CUTTING THIS ITEM, AS THE load SUBSUMES FUNCTIONALITY OF batchload
@deffn {Fun@,{c}@~ao} batchload (@var{filename})
L@^e express@~oes Maxima de @var{filename} e as avalia,
sem mostrar a entrada ou express@~oes de sa@'ida
e sem atribuir r@'otulos para express@~oes de sa@'ida.
Sa@'idas impressas (tais como produzidas por @code{print} ou @code{describe})
s@~ao mostradas, todavia.

A vari@'avel especial @code{%} e a fun@,{c}@~ao @code{%th}
referem-se a resultados anteriores do interpretador interativo,
n@~ao a resultados dentro do arquivo.
O arquivo n@~ao pode incluir constru@,{c}@~oes @code{:lisp}.

@code{batchload} retorna o caminho de @var{filename}, como uma seq@"u@^encia de caracteres.
@code{batchload} avalia seu argumento.

Veja tamb@'em @code{batch} e @code{load}.
@c batchload APPEARS TO HAVE THE SAME EFFECT AS load.  WHY NOT GET RID OF batchload ???

@end deffn

@deffn {Fun@,{c}@~ao} closefile ()
Fecha o arquivo transcrito aberto por @code{writefile} ou @code{appendfile}.

@end deffn

@c NEEDS CLARIFICATION !!!
@deffn {Fun@,{c}@~ao} collapse (@var{expr})
Reduz @var{expr} fazendo com que todas as suas
subexpress@~oes comuns (i.e., iguais)  serem compartilhadas (i.e., usam a mesma c@'elulas),
dessa forma exonomizando espa@,{c}o.  (@code{collapse} @'e uma subrotina usada pelo comando
@code{optimize}.)  Dessa forma, chamar @code{collapse} pode ser @'util
ap@'os um @code{save} arquivo.  Voc@^e pode diminuir muitas express@~oes
juntas pelo uso de @code{collapse ([@var{expr_1}, ..., @var{expr_n}])}.  Similarmente, voc@^e pode
diminuir os elementos de um array @code{A} fazendo
@code{collapse (listarray ('A))}.

@end deffn

@deffn {Fun@,{c}@~ao} concat (@var{arg_1}, @var{arg_2}, ...)
Concatena seus argumentos.
Os argumentos devem obrigat@'oriamente serem avaliados para atomos.
O valor de retorno @'e um s@'imbolo se o primeiro argumento for um s@'imbolo
e uma seq@"u@^encia de caracteres no formato do Maxima em caso contr@'ario.

@code{concat} avalia seus argumentos.
O ap@'ostrofo @code{'} evita avalia@,{c}@~ao.

@example
(%i1) y: 7$
(%i2) z: 88$
(%i3) concat (y, z/2);
(%o3)                          744
(%i4) concat ('y, z/2);
(%o4)                          y44
@end example

Um s@'imbolo constru@'ido por @code{concat} pode
ser atribu@'ido a um valor e aparecer em express@~oes.
O operador de atribui@,{c}@~ao @code{::} (duplo dois pontos) avalia seu lado esquerdo.

@example
(%i5) a: concat ('y, z/2);
(%o5)                          y44
(%i6) a:: 123;
(%o6)                          123
(%i7) y44;
(%o7)                          123
(%i8) b^a;
                               y44
(%o8)                         b
(%i9) %, numer;
                               123
(%o9)                         b
@end example

Note que embora @code{concat (1, 2)} seja visto como um n@'umeros, isso @'e uma seq@"u@^encia de caracteres no formato do Maxima.

@example
(%i10) concat (1, 2) + 3;
(%o10)                       12 + 3
@end example

@end deffn

@deffn {Fun@,{c}@~ao} sconcat (@var{arg_1}, @var{arg_2}, ...)

Concatena seus argumentos em uma seq@"u@^encia de caracteres.
Ao contr@'ario de @code{concat}, os argumentos arrumados @i{n@~ao} precisam ser at@^omicos.

O resultado @'e uma seq@"u@^encia de caracteres no format do Lisp.
@c THAT'S ODD; WHY NOT A MAXIMA STRING ??

@example
(%i1) sconcat ("xx[", 3, "]:", expand ((x+y)^3));
(%o1)               xx[3]:y^3+3*x*y^2+3*x^2*y+x^3
@end example

@end deffn

@c AFTER REVIEWING src/displa.lisp, IT LOOKS LIKE THIS VARIABLE HAS NO EFFECT
@c CUT IT ON THE NEXT PASS
@c @defvar cursordisp
@c Default value: @code{true}
@c 
@c When @code{cursordisp} is @code{true}, express@~oes are drawn by
@c the displayer in logical sequence.  This only works with a console
@c which can do cursor movement.  If @code{false}, express@~oes are
@c printed line by line.
@c 
@c @code{cursordisp} is always @code{false} when a @code{writefile} is in
@c effect.
@c 
@c @end defvar

@c REPHRASE, NEEDS EXAMPLES
@deffn {Fun@,{c}@~ao} disp (@var{expr_1}, @var{expr_2}, ...)
@'e como @code{display} mas somente os valores dos
argumentos s@~ao mostrados em lugar de equa@,{c}@~oes.  Isso @'e @'util para
argumentos complicados que n@~ao possuem nomes ou onde somente o valor
do argumento @'e de interesse e n@~ao o nome.

@end deffn

@c HMM, THIS NEXT ITEM IS DEFINED IN A SHARE FILE (itensor.lisp); 
@c DOES ITS DESCRIPTION WANT TO BE ELSEWHERE ???
@deffn {Fun@,{c}@~ao} dispcon (@var{tensor_1}, @var{tensor_2}, ...)
@deffnx {Fun@,{c}@~ao} dispcon (all)
Mostram as propriedades de contra@,{c}@~ao de
seus argumentos como foram dados para @code{defcon}.  @code{dispcon (all)} mostra todas as
propriedades de contra@,{c}@~ao que foram definidas.

@end deffn

@c REPHRASE, MORE EXAMPLES
@deffn {Fun@,{c}@~ao} display (@var{expr_1}, @var{expr_2}, ...)
Mostra equa@,{c}@~oes cujo lado esquerdo @'e
@var{expr_i} n@~ao avaliado, e cujo lado direito @'e o valor da express@~ao
centrada na linha.  Essa fun@,{c}@~ao @'e @'util em blocos e em @code{for}
declara@,{c}@~oes com o objetivo de ter resultados intermedi@'arios mostrados.  The
Os argumentos para @code{display} s@~ao usualmente @'atomos, vari@'aveis subscritas, ou
chamadas de fun@,{c}@~ao.  Veja tamb@'em @code{disp}.

@example
(%i1) display(B[1,2]);
                                      2
                         B     = X - X
                          1, 2
(%o1)                            done
@end example

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} display2d
Valor padr@~ao: @code{true}

Quando @code{display2d} @'e @code{false},
O console visualizador @'e unidimensional ao inv@'es de bidimensional.

@end defvr

@defvr {Vari@'avel de op@,{c}@~ao} display_format_internal
Valor padr@~ao: @code{false}

Quando @code{display_format_internal} @'e @code{true},
express@~oes s@~ao mostradas sem ser por caminhos que
escondam a representa@,{c}@~ao matem@'atica interna.  O visualizador ent@~ao
corresponde ao que @code{inpart} retorna em lugar de @code{part}.

Exemplos:

@example
User     part       inpart
a-b;      A - B     A + (- 1) B

           A            - 1
a/b;       -         A B
           B
                       1/2
sqrt(x);   sqrt(X)    X

          4 X        4
X*4/3;    ---        - X
           3         3
@end example

@end defvr

@c IS THIS FUNCTION STILL USEFUL ???
@c REPHRASE, NEEDS EXAMPLES
@deffn {Fun@,{c}@~ao} dispterms (@var{expr})
Mostra @var{expr} em partes uma abaixo da outra.
Isto @'e, primeiro o operador de @var{expr} @'e mostrado, ent@~ao cada parcela em
uma adi@,{c}@~ao, ou fatores em um produto, ou parte de uma express@~ao mais geral @'e
mostrado separadamente.  Isso @'e @'util se @var{expr} @'e muito larga para ser
mostrada de outra forma.  Por exemplo se @code{P1}, @code{P2}, ...  s@~ao express@~oes
muito largas ent@~ao o programa visualizador pode sair fora do espa@,{c}o de armazenamento na
tentativa de mostrar @code{P1 + P2 + ...}  tudo de uma vez.  Todavia,
@code{dispterms (P1 + P2 + ...)} mostra @code{P1}, ent@~ao abaixo disso @code{P2}, etc.  Quando n@~ao
usando @code{dispterms}, se uma express@~ao exponencial @'e muito alta para ser
mostrada como @code{A^B} isso aparece como @code{expt (A, B)} (ou como @code{ncexpt (A, B)} no
caso de @code{A^^B}).

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} error_size
Valor padr@~ao: 10

@code{error_size} modifica mensagens de erro conforme o tamanho das express@~oes que aparecem nelas.
Se o tamanho de uma express@~ao (como determinado pela fun@,{c}@~ao Lisp @code{ERROR-SIZE})
@'e maior que @code{error_size},
a express@~ao @'e substitu@'ida na mensagem por um s@'imbolo,
e o o s@'imbolo @'e atribu@'ido @`a express@~ao.
Os s@'imbolos s@~ao obtidos da lista @code{error_syms}.

De outra forma, a express@~ao @'e menor que @code{error_size},
e a express@~ao @'e mostrada na mensagem.

Veja tamb@'em @code{error} e @code{error_syms}.

Exemplo:
@c OUTPUT GENERATED BY THE FOLLOWING
@c U: (C^D^E + B + A)/(cos(X-1) + 1)$
@c error_size: 20$
@c error ("Express@~ao exemplo @'e", U);
@c errexp1;
@c error_size: 30$
@c error ("Express@~ao exemplo @'e", U);

O tamanho de @code{U}, como determinado por @code{ERROR-SIZE}, @'e 24.

@example
(%i1) U: (C^D^E + B + A)/(cos(X-1) + 1)$

(%i2) error_size: 20$

(%i3) error ("Express@~ao exemplo @'e", U);

Express@~ao exemplo @'e errexp1
 -- an error.  Quitting.  To debug this try debugmode(true);
(%i4) errexp1;
                            E
                           D
                          C   + B + A
(%o4)                    --------------
                         cos(X - 1) + 1
(%i5) error_size: 30$

(%i6) error ("Express@~ao exemplo @'e", U);

                           E
                          D
                         C   + B + A
Express@~ao exemplo @'e --------------
                        cos(X - 1) + 1
 -- an error.  Quitting.  To debug this try debugmode(true);
@end example

@end defvr

@defvr {Vari@'avel de op@,{c}@~ao} error_syms
Valor padr@~ao: @code{[errexp1, errexp2, errexp3]}

Em mensagens de erro,
express@~oes mais largas que @code{error_size} s@~ao substitu@'idas por s@'imbolos, e os
s@'imbolos s@~ao escolhidos para as express@~oes.  Os s@'imbolos s@~ao obtidos da
lista @code{error_syms}.
A primeira express@~ao muito larga @'e substitu@'ida por @code{error_syms[1]},
a segunda por @code{error_syms[2]}, e assim por diante.

Se houverem mais express@~oes muito largas que h@'a elementos em @code{error_syms},
s@'imbolos s@~ao constru@'idos automaticamente,
com o @var{n}-@'esimo s@'imbolo equivalente a @code{concat ('errexp, @var{n})}.

Veja tamb@'em @code{error} e @code{error_size}.

@end defvr

@deffn {Fun@,{c}@~ao} expt (@var{a}, @var{b})
Se uma express@~ao exponencial @'e muito alta para ser mostrada
cmo @code{@var{a}^@var{b}} isso aparece como @code{expt (@var{a}, @var{b})} (ou como @code{ncexpt (@var{a}, @var{b})} no caso de
@code{@var{a}^^@var{b}}).

@c THIS SEEMS LIKE A BUG TO ME.  expt, ncexpt SHOULD BE RECOGNIZED SINCE MAXIMA
@c ITSELF PRINTS THEM SOMETIMES.  THESE SHOULD JUST SIMPLIFY TO ^ AND ^^, RESPECTIVELY.
@code{expt} e @code{ncexpt} n@~ao s@~ao reconhecidas em entradas.

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} exptdispflag
Valor padr@~ao: @code{true}

Quando @code{exptdispflag} @'e @code{true}, Maxima mostra express@~oes
com expoente negativo usando quocientes, e.g., @code{X^(-1)} como @code{1/X}.

@end defvr

@c NEEDS EXAMPLES
@deffn {Fun@,{c}@~ao} filename_merge (@var{path}, @var{filename})
Constroem um caminho modificado de @var{path} e @var{filename}.
Se o componente final de @var{path} @'e da forma @code{###.@var{algumacoisa}},
o componente @'e substitu@'ido com @code{@var{filename}.@var{algumacoisa}}.
De outra forma, o componente final @'e simplesmente substitu@'ido por @var{filename}.

@c SAY SOMETHING ABOUT ARG TYPE -- LISP STRINGS WORK BETTER THAN MAXIMA STRINGS
@c SAY SOMETHING ABOUT RETURN TYPE
@end deffn

@deffn {Fun@,{c}@~ao} file_search (@var{filename})
@deffnx {Fun@,{c}@~ao} file_search (@var{filename}, @var{pathlist})

@code{file_search} procura pelo arquivo @var{filename} e retorna o caminho para o arquivo
(como uma seq@"u@^encia de caracteres) se ele for achado; de outra forma @code{file_search} retorna @code{false}.
@code{file_search (@var{filename})} procura nos diret@'orios padr@~oes de busca,
que s@~ao especificados pelas vari@'aveis @code{file_search_maxima}, @code{file_search_lisp}, e @code{file_search_demo}.

@code{file_search} primeiro verifica se o nome atual passado existe,
antes de tentar coincidir esse nome atual com o modelo ``coringa'' de busca do arquivo.
Veja @code{file_search_maxima} concernente a modelos de busca de arquivos.

O argumento @var{filename} pode ser um caminho e nome de arquivo,
ou apenas um nome de arquivo, ou, se um diret@'orio de busca de arquivo inclue um modelo de busca de arquivo,
apenas a base do nome de arquivo (sem uma extens@~ao).
Por exemplo,

@example
file_search ("/home/wfs/special/zeta.mac");
file_search ("zeta.mac");
file_search ("zeta");
@end example

todos acham o mesmo arquivo, assumindo que o arquivo exista e @code{/home/wfs/special/###.mac}
est@'a em @code{file_search_maxima}.

@code{file_search (@var{filename}, @var{pathlist})} procura somente nesses diret@'orios
especificados por @var{pathlist},
que @'e uma lista de seq@"u@^encias de caracteres.
O argumento @var{pathlist} substitui os diret@'orios de busca padr@~ao,
ent@~ao se a lista do caminho @'e dada, @code{file_search} procura somente nesses especificados,
e n@~ao qualquer dos diret@'orios padr@~ao de busca.
Mesmo se existe somente um diret@'orio em @var{pathlist}, esse deve ainda ser dado como uma lista de um @'unico elemento.

O usu@'ario pode modificar o diret@'orio de busca padr@~ao.  Veja @code{file_search_maxima}.

@code{file_search} @'e invocado por @code{load} com @code{file_search_maxima} e @code{file_search_lisp}
como diret@'orios de busca.

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} file_search_maxima
@defvrx {Vari@'avel de op@,{c}@~ao} file_search_lisp
@defvrx {Vari@'avel de op@,{c}@~ao} file_search_demo
Essas vari@'aveis especificam listas de diret@'orios a serem procurados
por @code{load}, @code{demo}, e algumas outras fun@,{c}@~oes do Maxima.
O valor padr@~ao dessas vari@'aveis
nomeia v@'arios diret@'orios na instala@,{c}@~a padr@~ao do Maxima.

O usu@'aro pode modificar essas vari@'aveis,
quer substituindo os valores padr@~ao ou colocando no final diret@'orios adicionais.
Por exemplo,

@example
file_search_maxima: ["/usr/local/foo/###.mac",
    "/usr/local/bar/###.mac"]$
@end example

substitui o valor padr@~ao de @code{file_search_maxima},
enquanto

@example
file_search_maxima: append (file_search_maxima,
    ["/usr/local/foo/###.mac", "/usr/local/bar/###.mac"])$
@end example

adiciona no final da lista dois diret@'orios adicionais.
Isso pode ser conveniente para colocar assim uma express@~ao no arquivo @code{maxima-init.mac}
de forma que o caminho de busca de arquivo @'e atribu@'ido automaticamente quando o Maxima inicia.

Multiplas extens@~oes de arquivo e e multiplos caminhos podem ser especificados por
constru@,{c}@~oes ``coringa'' especiais.
A seq@"u@^encia de caracteres @code{###} expande a busca para al@'em do nome b@'asico,
enquanto uma lista separada por v@'irgulas e entre chaves @code{@{foo,bar,baz@}} expande
em multiplas seq@"u@^encias de caracteres.
Por exemplo, supondo que o nome b@'asico a ser procurado seja @code{neumann},

@example
"/home/@{wfs,gcj@}/###.@{lisp,mac@}"
@end example

expande em @code{/home/wfs/neumann.lisp}, @code{/home/gcj/neumann.lisp}, @code{/home/wfs/neumann.mac}, e @code{/home/gcj/neumann.mac}.

@end defvr

@deffn {Fun@,{c}@~ao} file_type (@var{filename})
Retorna uma suposta informa@,{c}@~ao sobre o conte@'udo de @var{filename},
baseada na extens@~ao do arquivo.
@var{filename} n@~ao precisa referir-se a um arquivo atual;
nenhuma tentativa @'e feita para abrir o arquivo e inspecionar seu conte@'udo.

O valor de retorno @'e um s@'imbolo, qualquer um entre @code{object}, @code{lisp}, ou @code{maxima}.
Se a extens@~ao come@,{c}a com @code{m} ou @code{d}, @code{file_type} retorna @code{maxima}.
Se a extens@~ao come@,{c}a om @code{l}, @code{file_type} retorna @code{lisp}.
Se nenhum dos acima, @code{file_type} retorna @code{object}.

@end deffn

@deffn {Fun@,{c}@~ao} grind (@var{expr})
@deffnx {Vari@'avel de op@value{cedilha}@~ao} grind
A fun@,{c}@~ao @code{grind} imprime @var{expr}
para o console em uma forma adequada de entrada para Maxima.
@code{grind} sempre retorna @code{done}.

Veja tamb@'em @code{string}, que retorna uma seq@"u@^encia de caracteres em lugar de imprimir sua sa@'ida.
@code{grind} tenta imprimir a express@~ao de uma maneira que a faz
levemente mais f@'acil para ler que a sa@'ida de @code{string}.

Quando a vari@'avel @code{grind} @'e @code{true},
a sa@'ida de @code{string} e @code{stringout} tem o mesmo formato que @code{grind};
de outra forma nenhuma tentativa @'e feita para formatar especialmente a sa@'ida dessas fun@,{c}@~oes.
O valor padr@~ao da vari@'avel @code{grind} @'e @code{false}.

@code{grind} pode tamb@'em ser especificado como um argumento de @code{playback}.
Quando @code{grind} est@'a presente,
@code{playback} imprime express@~oes de entrada no mesmo formato que a fun@,{c}@~ao @code{grind}.
De outra forma, nenhuma tentativa @'e feita para formatar especialmente as express@~oes de entrada.

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} ibase
Valor padr@~ao: 10

Inteiros fornecidos dentro do Maxima s@~ao interpretados
com respeito @`a base @code{ibase}.

A @code{ibase} pode ser atribu@'ido qualquer inteiro entre 2 e 35 (decimal), inclusive.
@c WHY NOT 36, BY THE WAY ??
Quando @code{ibase} @'e maior que 10, os numerais compreendem aos numerais decimais de 0 at@'e 9
@c UPPERCASE/LOWERCASE DISTINCTION HERE ??
mais as letras mai@'usculas do alfabeto A, B, C, ..., como necess@'ario.
Os numerais para a base 35, a maior base aceit@'avel,
compreendem de 0 at@'e 9 e de A at@'e Y.
@c HOW, EXACTLY, DOES ONE TYPE IN THE LETTERS ??
@c ibase: 11$ 1A; YIELDS AN ERROR
@c \1A; #1A; \#1A; DON'T WORK EITHER

Veja tamb@'em @code{obase}.

@c NEED EXAMPLES HERE
@end defvr

@defvr {Vari@'avel de op@,{c}@~ao} inchar
Valor padr@~ao: @code{%i}

@code{inchar} @'e o prefixo dos r@'otulos de express@~oes fornecidas pelo usu@'ario.
Maxima automaticamente constr@'oi um r@'otulo para cada express@~ao de entrada
por concatena@,{c}@~ao de @code{inchar} e @code{linenum}.
A @code{inchar} pode ser atribu@'ido qualquer seq@"u@^encia de caracteres ou s@'imbolo, n@~ao necessariamente um caracter simples.

@example
(%i1) inchar: "input";
(%o1)                                input
(input1) expand ((a+b)^3);
                            3        2      2      3
(%o1)                      b  + 3 a b  + 3 a  b + a
(input2)
@end example

Veja tamb@'em @code{labels}.

@end defvr

@deffn {Fun@,{c}@~ao} ldisp (@var{expr_1}, ..., @var{expr_n})
Mostra express@~oes @var{expr_1}, ..., @var{expr_n} para o console
como sa@'ida impressa na tela.
@code{ldisp} atribue um r@'otulo de express@~ao intermedi@'aria a cada argumento
e retorna a lista de r@'otulos.

Veja tamb@'em @code{disp}.

@example
(%i1) e: (a+b)^3;
                                   3
(%o1)                       (b + a)
(%i2) f: expand (e);
                     3        2      2      3
(%o2)               b  + 3 a b  + 3 a  b + a
(%i3) ldisp (e, f);
                                   3
(%t3)                       (b + a)

                     3        2      2      3
(%t4)               b  + 3 a b  + 3 a  b + a

(%o4)                      [%t3, %t4]
(%i4) %t3;
                                   3
(%o4)                       (b + a)
(%i5) %t4;
                     3        2      2      3
(%o5)               b  + 3 a b  + 3 a  b + a
@end example

@end deffn

@deffn {Fun@,{c}@~ao} ldisplay (@var{expr_1}, ..., @var{expr_n})
Mostra express@~oes @var{expr_1}, ..., @var{expr_n} para o console
como sa@'ida impressa na tela.
Cada express@~ao @'e impressa como uma equa@,{c}@~ao da forma @code{lhs = rhs}
na qual @code{lhs} @'e um dos argumentos de @code{ldisplay}
e @code{rhs} @'e seu valor.
Tipicamente cada argumento @'e uma vari@'avel.
@code{ldisp} atribui um r@'otulo de express@~ao intermedi@'aia a cada equa@,{c}@~ao
e retorna a lista de r@'otulos.

Veja tamb@'em @code{display}.

@example
(%i1) e: (a+b)^3;
                                   3
(%o1)                       (b + a)
(%i2) f: expand (e);
                     3        2      2      3
(%o2)               b  + 3 a b  + 3 a  b + a
(%i3) ldisplay (e, f);
                                     3
(%t3)                     e = (b + a)

                       3        2      2      3
(%t4)             f = b  + 3 a b  + 3 a  b + a

(%o4)                      [%t3, %t4]
(%i4) %t3;
                                     3
(%o4)                     e = (b + a)
(%i5) %t4;
                       3        2      2      3
(%o5)             f = b  + 3 a b  + 3 a  b + a
@end example

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} linechar
Valor padr@~ao: @code{%t}

@code{linechar} @'e o refixo de r@'otulos de express@~oes intermedi@'arias gerados pelo Maxima.
Maxima constr@'oi um r@'otulo para cada express@~ao intermedi@'aria (se for mostrada)
pela concatena@,{c}@~ao de @code{linechar} e @code{linenum}.
A @code{linechar} pode ser atribu@'ido qualquer seq@"u@^encia de caracteres ou s@'imbolo, n@~ao necess@'ariamente um caractere simples.

Express@~oes intermedi@'arias podem ou n@~ao serem mostradas.
See @code{programmode} e @code{labels}.

@end defvr

@defvr {Vari@'avel de op@,{c}@~ao} linel
Valor padr@~ao: 79

@code{linel} @'e a largura assumida (em caracteres) do console
para o prop@'osito de mostrar express@~oes.
A @code{linel} pode ser atribu@'ido qualquer valor pelo usu@'ario,
embora valores muio pequenos ou muito grandes possam ser impratic@'aveis.
Textos impressos por fun@,{c}@~oes internas do Maxima, tais como mensagens de erro e a sa@'ida de @code{describe},
n@~ao s@~ao afetadas por @code{linel}.

@end defvr

@defvr {Option variable} lispdisp
Valor padr@~ao: @code{false}

Quando @code{lispdisp} for @code{true},
s@'imbolos Lisp s@~ao mostrados com um ponto de interroga@,{c}@~ao @code{?} na frente.
De outra forma,
s@'imbolos Lisp ser@~ao mostrados sem o ponto de interroga@,{c}@~o na frente.

Exemplos:

@c ===beg===
@c lispdisp: false$
@c ?foo + ?bar;
@c lispdisp: true$
@c ?foo + ?bar;
@c ===end===
@example
(%i1) lispdisp: false$
(%i2) ?foo + ?bar;
(%o2)                       foo + bar
(%i3) lispdisp: true$
(%i4) ?foo + ?bar;
(%o4)                      ?foo + ?bar
@end example

@end defvr

@deffn {Fun@,{c}@~ao} load (@var{filename})
Avalia express@~oes em @var{filename}, 
dessa forma conduzindo vari@'aveis, fun@,{c}@~oes, e outros objetos dentro do Maxima.
A associa@,{c}@~ao de qualquer objeto existente @'e substitu@'ida pela associa@,{c}@~ao recuperada de @var{filename}.  
Para achar o arquivo,
@code{load} chama @code{file_search} com @code{file_search_maxima} e @code{file_search_lisp}
como diret@'orios de busca.
Se @code{load} obt@'em sucesso, isso retorna o nome do arquivo.
De outra forma @code{load} imprime uma mensagem e erro.

@code{load} trabalha igualmente bem para c@'odigos Lisp e c@'odigos Maxima.
Arquivos criados por @code{save}, @code{translate_file}, e @code{compile_file}, que criam c@'odigos Lisp,
e @code{stringout}, que criam c@'odigos Maxima,
podem ser processadas por @code{load}.
@code{load} chama @code{loadfile} para carregar arquivos Lisp e @code{batchload} para carregar arquivos Maxima.

Veja tamb@'em @code{loadfile}, @code{batch}, @code{batchload}, e @code{demo}.
@code{loadfile} processa arquivos Lisp;
@code{batch}, @code{batchload}, e @code{demo} processam arquivos Maxima.

Veja @code{file_search} para mais detalhes sobre o mecanismo de busca de arquivos.

@code{load} avalia seu argumento.

@end deffn

@c RECOMMEND CUTTING THIS ITEM, AS THE load SUBSUMES FUNCTIONALITY OF loadfile
@deffn {Fun@,{c}@~ao} loadfile (@var{filename})
Avalia express@~oes Lisp em @var{filename}.
@code{loadfile} n@~ao invoca @code{file_search}, ent@~ao @code{filename} deve obrigat@'oriamente incluir
a extens@~ao do arquivo e tanto quanto o caminho como necess@'ario para achar o arquivo.

@code{loadfile} pode processar arquivos criados por @code{save}, @code{translate_file}, e @code{compile_file}.
O usu@'ario pode achar isso mais conveniente para usar @code{load} em lugar de @code{loadfile}.

@code{loadfile} avalia seu argumento, ent@~ao @code{filename} deve obrigat@'oriamente ser uma seq@"u@^encia de caracteres literal,
n@~ao uma vari@'avel do tipo seq@"u@^encia de caracteres.
O operador aspas simples n@~ao aceita avalia@,{c}@~ao.

@end deffn

@c loadprint DOESN'T EXACTLY WORK LIKE THIS, BUT IT HARDLY SEEMS WORTH FIXING
@c I GUESS THIS COULD BE UPDATED TO DESCRIBE THE WAY IT ACTUALLY WORKS
@defvr {Vari@'avel de op@,{c}@~ao} loadprint
Valor padr@~ao: @code{true}

@code{loadprint} diz se deve imprimir uma mensagem quando um arquivo @'e chamado.

@itemize @bullet
@item
Quando @code{loadprint} @'e @code{true}, sempre imprime uma mensagem.
@item
Quando @code{loadprint} @'e @code{'loadfile}, imprime uma mensagem somente se
um arquivo @'e chamado pela fun@,{c}@~ao @code{loadfile}.
@item
Quando @code{loadprint} @'e @code{'autoload},
imprime uma mensagem somente se um arquivo @'e automaticamente carregado.
Veja @code{setup_autoload}.
@item
Quando @code{loadprint} @'e @code{false}, nunca imprime uma mensagem.
@end itemize

@end defvr

@defvr {Vari@'avel de op@,{c}@~ao} obase
Valor padr@~ao: 10

@code{obase} @'e a base para inteiros mostrados pelo Maxima.

A @code{obase} poode ser atribu@'ido qualquer inteiro entre 2 e 35 (decimal), inclusive.
@c WHY NOT 36, BY THE WAY ??
Quando @code{obase} @'e maior que 10, os numerais compreendem os numerais decimais de 0 at@'e 9
e letras mai@'usulas do alfabeto A, B, C, ..., quando necess@'ario.
Os numerais para a base 35, a maior base aceit@'avel,
compreendem de 0 at@'e 9, e de A at@'e Y.

Veja tamb@'em @code{ibase}.

@c NEED EXAMPLES HERE
@end defvr

@defvr {Vari@'avel de op@,{c}@~ao} outchar
Valor padr@~ao: @code{%o}

@code{outchar} @'e o prefixo dos r@'otulos de express@~oes calculadas pelo Maxima.
Maxima automaticamente constr@'oi um r@'otulo para cada express@~ao calculada
pela concatena@,{c}@~ao de @code{outchar} e @code{linenum}.
A @code{outchar} pode ser atribu@'ido qualquer seq@"u@^encia de caracteres ou s@'imbolo, n@~ao necess@'ariamente um caractere simples.

@example
(%i1) outchar: "output";
(output1)                           output
(%i2) expand ((a+b)^3);
                            3        2      2      3
(output2)                  b  + 3 a b  + 3 a  b + a
(%i3)
@end example

Veja tamb@'em @code{labels}.

@end defvr

@c STILL EXISTS, NEEDS CLARIFICATION !!!
@defvr {Vari@'avel de op@,{c}@~ao} packagefile
Valor padr@~ao: @code{false}

Projetistas de pacotes que usam @code{save}
ou @code{translate} para criar pacotes (arquivos) para outros
usarem podem querer escolher @code{packagefile: true} para prevenir qu informa@,{c}@~oes
sejam acrescentadas @`a lista de informa@,{c}@~oes do Maxima (e.g. @code{values},
@code{fun@,{c}@~oes}) exceto onde necess@'ario quando o arquivo @'e carregado.
Nesse caminho, o conte@'udo do pacote n@~ao pegar@'a no
caminho do usu@'ario quando ele adicionar seus pr@'oprios dados.  Note que isso n@~ao
resolve o problema de poss@'iveis conflitos de nome.  Tamb@'em note que
o sinalizador simplesmente afeta o que @'e sa@'ida para o arquivo pacote.
Escolhendo o sinalizador para @code{true} @'e tamb@'em @'util para criar arquivos de
init do Maxima.

@end defvr

@defvr {Vari@'avel de op@,{c}@~ao} pfeformat
Valor padr@~ao: @code{false}

Quando @code{pfeformat} @'e @code{true}, uma raz@~ao de inteiros @'e
mostrada com o caractere s@'olido (barra normal),
e um denominador inteiro @code{n}
@'e mostrado como um termo multiplicativo em primeiro lugar @code{1/n}.

@example
(%i1) pfeformat: false$
(%i2) 2^16/7^3;
                              65536
(%o2)                         -----
                               343
(%i3) (a+b)/8;
                              b + a
(%o3)                         -----
                                8
(%i4) pfeformat: true$ 
(%i5) 2^16/7^3;
(%o5)                       65536/343
(%i6) (a+b)/8;
(%o6)                      1/8 (b + a)
@end example

@end defvr

@deffn {Fun@,{c}@~ao} print (@var{expr_1}, ..., @var{expr_n})
Avalia e mostra @var{expr_1}, ..., @var{expr_n}
uma ap@'os a outra, da esquerda para a direita,
iniciando no lado esquerdo do console.

O valor retornado por @code{print} @'e o valor de seu @'ultimo argumento.
@code{print} n@~ao gera r@'otulos de express@~ao intermedi@'aria.

Veja tamb@'em @code{display}, @code{disp}, @code{ldisplay}, e @code{ldisp}.
Essas fun@,{c}@~oes mostram uma express@~ao por linha, enquanto @code{print} tenta
mostrar duas ou mais express@~oes por linha.

Para mostrar o conte@'udo de um arquivo, veja @code{printfile}.

@example
(%i1) r: print ("(a+b)^3 is", expand ((a+b)^3), "log (a^10/b) is", radcan (log (a^10/b)))$
            3        2      2      3
(a+b)^3 is b  + 3 a b  + 3 a  b + a  log (a^10/b) is 

                                              10 log(a) - log(b) 
(%i2) r;
(%o2)                  10 log(a) - log(b)
(%i3) disp ("(a+b)^3 is", expand ((a+b)^3), "log (a^10/b) is", radcan (log (a^10/b)))$
                           (a+b)^3 is

                     3        2      2      3
                    b  + 3 a b  + 3 a  b + a

                         log (a^10/b) is

                       10 log(a) - log(b)
@end example

@end deffn

@c RECOMMEND CUTTING THIS ITEM AND CUTTING $tcl_output IN src/plot.lisp
@c THIS REALLY, REALLY SEEMS LIKE CRUFT:
@c $tcl_output IS NEVER CALLED WITHIN MAXIMA SOURCE,
@c AND THIS EXTREMELY NARROW, LIMITED FUNCTIONALITY ISN'T USEFUL TO USERS
@c AND IT'S BROKEN: INCORRECT OUTPUT FOR CLISP, DIES ON GCL
@deffn {Fun@,{c}@~ao} tcl_output (@var{list}, @var{i0}, @var{skip})
@deffnx {Fun@,{c}@~ao} tcl_output (@var{list}, @var{i0})
@deffnx {Fun@,{c}@~ao} tcl_output ([@var{list_1}, ..., @var{list_n}], @var{i})

Imprime os elementos de uma lista entre chaves @code{@{ @}},
conveniente como parte de um programa na linguagem Tcl/Tk.

@code{tcl_output (@var{list}, @var{i0}, @var{skip})}
imprime @var{list}, come@,{c}ando com o elemento @var{i0} e imprimindo elementos
@code{@var{i0} + @var{skip}}, @code{@var{i0} + 2 @var{skip}}, etc.

@code{tcl_output (@var{list}, @var{i0})}
@'e equivalente a @code{tcl_output (@var{list}, @var{i0}, 2)}.

@code{tcl_output ([@var{list_1}, ..., @var{list_n}], @var{i})}
imprime os @var{i}'@'esimos elementos de @var{list_1}, ..., @var{list_n}.

Exemplos:
@c EXAMPLE INPUT
@c tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$
@c tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$
@c tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$
@c tcl_output ([x1, y1, x2, y2, x3, y3], 2)$
@c tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

@c EXAMPLE OUTPUT: CLISP
@c OUTPUT IS OK FOR FIRST TWO, BROKEN FOR OTHERS
@c GCL OUTPUT: SAME FOR FIRST TWO
@c GCL FAILS ON OTHERS (IN EACH CASE COMPLAINING ELEMENTS ARE "not of type (OR RATIONAL LISP:FLOAT)"
@example
(%i1) tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$

 @{1.000000000     4.000000000     
 @}
(%i2) tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$

 @{2.000000000     5.000000000     
 @}
(%i3) tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$

 @{((RAT SIMP) 3 7) ((RAT SIMP) 11 13) 
 @}
(%i4) tcl_output ([x1, y1, x2, y2, x3, y3], 2)$

 @{$Y1 $Y2 $Y3 
 @}
(%i5) tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

 @{SIMP 1.000000000     11.00000000     
 @}
@end example

@end deffn

@deffn {Fun@,{c}@~ao} read (@var{expr_1}, ..., @var{expr_n})
Imprime @var{expr_1}, ..., @var{expr_n}, ent@~ao l@^e uma express@~ao do console
e retorna a express@~ao avaliada.
A express@~ao @'e terminada com um ponto e v@'irgula @code{;} ou o sinal de d@'olar @code{$}.

Veja tamb@'em @code{readonly}.

@example
(%i1) foo: 42$ 
(%i2) foo: read ("foo is", foo, " -- enter new value.")$
foo is 42  -- enter new value.  
(a+b)^3;
(%i3) foo;
                                     3
(%o3)                         (b + a)
@end example

@end deffn

@deffn {Fun@,{c}@~ao} readonly (@var{expr_1}, ..., @var{expr_n})
Imprime @var{expr_1}, ..., @var{expr_n}, ent@~ao l@^e uma express@~ao do console
e retorna a express@~ao (sem avalia@,{c}@~ao).
A express@~ao @'e terminada com um @code{;} (ponto e v@'irgula) ou @code{$} (sinal de d@'olar).

@example
(%i1) aa: 7$
(%i2) foo: readonly ("Forne@,{c}a uma express@~ao:");
Enter an express@~ao: 
2^aa;
                                  aa
(%o2)                            2
(%i3) foo: read ("Forne@,{c}a uma express@~ao:");
Enter an express@~ao: 
2^aa;
(%o3)                            128
@end example

Veja tamb@'em @code{read}.

@end deffn

@deffn {Fun@,{c}@~ao} reveal (@var{expr}, @var{depth})
Substitue partes de @var{expr} no inteiro especificado @var{depth}
com sum@'ario descritivo.

@itemize @bullet
@item
Somas e diferen@,{c}as s@~ao substitu@'idas por @code{sum(@var{n})}
onde @var{n} @'e o n@'umero de operandos da adi@,{c}@~ao.
@item
Produtos s@~ao substitu@'idos por @code{product(@var{n})}
onde @var{n} @'e o n@'umero de operandos da multiplica@,{c}@~ao.
@item
Exponenciais s@~ao substitu@'idos por @code{expt}.  
@item
Quocientes s@~ao substitu@'idos por @code{quotient}.
@item
Nega@,{c}@~ao un@'aria @'e substitu@'ida por @code{negterm}.
@end itemize

Quando @var{depth} @'e maior que ou igual @`a m@'axima intensidade de @var{expr},
@code{reveal (@var{expr}, @var{depth})} retornam @var{expr} sem modifica@,{c}@~oes.

@code{reveal} avalia seus argumentos.
@code{reveal} retorna express@~ao sumarizada.

Exemplo:

@example
(%i1) e: expand ((a - b)^2)/expand ((exp(a) + exp(b))^2);
                          2            2
                         b  - 2 a b + a
(%o1)               -------------------------
                        b + a     2 b     2 a
                    2 %e      + %e    + %e
(%i2) reveal (e, 1);
(%o2)                       quotient
(%i3) reveal (e, 2);
                             sum(3)
(%o3)                        ------
                             sum(3)
(%i4) reveal (e, 3);
                     expt + negterm + expt
(%o4)               ------------------------
                    product(2) + expt + expt
(%i5) reveal (e, 4);
                       2                 2
                      b  - product(3) + a
(%o5)         ------------------------------------
                         product(2)     product(2)
              2 expt + %e           + %e
(%i6) reveal (e, 5);
                         2            2
                        b  - 2 a b + a
(%o6)              --------------------------
                       sum(2)     2 b     2 a
                   2 %e       + %e    + %e
(%i7) reveal (e, 6);
                          2            2
                         b  - 2 a b + a
(%o7)               -------------------------
                        b + a     2 b     2 a
                    2 %e      + %e    + %e
@end example

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} rmxchar
Valor padr@~ao: @code{]}

@code{rmxchar} @'e the caractere desenhado lado direito de uma matriz.

Veja tamb@'em @code{lmxchar}.

@end defvr

@c NEEDS EXAMPLES
@deffn {Fun@,{c}@~ao} save (@var{filename}, @var{name_1}, @var{name_2}, @var{name_3}, ...)
@deffnx {Fun@,{c}@~ao} save (@var{filename}, values, functions, labels, ...)
@deffnx {Fun@,{c}@~ao} save (@var{filename}, [@var{m}, @var{n}])
@c @defunx save (@var{filename}, @var{name_1}=@var{expr_1}, @var{name_2}=@var{expr_2}, ...)
@c PRECEDING @defunx IS LONGER THAN 1 LINE, CAUSES cl-info.lisp TO STUMBLE; WORKAROUND:
@deffnx {Fun@,{c}@~ao} save (@var{filename}, @var{name_1}=@var{expr_1}, ...)
@deffnx {Fun@,{c}@~ao} save (@var{filename}, all)
Armazena o valor corrente de @var{name_1}, @var{name_2}, @var{name_3}, ..., em @var{filename}.
Os argumentos devem ser obrigat@'oriamente nomes de vari@'aveis, fun@,{c}@~oes, ou outros objetos.
@code{save} retorna @var{filename}.

@code{save} armazena dados na forma de express@~oes Lisp.
Os dados armazenados por @code{save} podem ser recuperados por @code{load (@var{filename})}.
O efeito da execu@,{c}@~ao de @code{save} quando @var{filename} j@'a existe
depende da implementa@,{c}@~ao Lisp subjacente;
o arquivo pode ser substitu@'ido, ou @code{save} reclamar com uma mensagem de erro.

A forma especial @code{save (@var{filename}, values, functions, labels, ...)}
armazena os @'itens nomeados por @code{values}, @code{fun@,{c}@~oes}, @code{labels}, etc.
Os nomes podem ser quaisquer especificados pela vari@'avel @code{infolists}.
@code{values} compreende todas as vari@'aveis definidas pelo usu@'ario.

A forma especial @code{save (@var{filename}, [@var{m}, @var{n}])} armazena os valores de
r@'otulos de entrada e sa@'ida de @var{m} at@'e @var{n}.
Note que @var{m} e @var{n} devem obrigat@'oriamente ser inteiros literais ou s@'imbolos envolvidos por aspas duplas.
R@'otulos de entrada e sa@'ida podem tamb@'em ser armazenados um a um, e.g., @code{save ("foo.1", %i42, %o42)}.
@code{save (@var{filename}, labels)} armazena todos os r@'otulos de entrada e sa@'ida.
Quando r@'otulos armazenados s@~ao recuperados, eles substituem r@'otulos existentes.

A forma especial @code{save (@var{filename}, @var{name_1}=@var{expr_1}, @var{name_2}=@var{expr_2}, ...)}
armazena os valores de @var{expr_1}, @var{expr_2}, ...,
com nomes @var{name_1}, @var{name_2}, ....
Isso @'e @'util para aplicar essa forma para r@'otulos de entrada e sa@'ida, e.g., @code{save ("foo.1", aa=%o88)}.
O lado direito dessa igualdade nessa forma pode ser qualquer express@~ao, que @'e avaliada.
Essa forma n@~ao introduz os novos nomes no ambiente corrente do Maxima,
mas somente armazena-os em @var{filename}.

Essa forma especial e a forma geral de @code{save} podem ser misturados.
Por exemplo, @code{save (@var{filename}, aa, bb, cc=42, fun@,{c}@~oes, [11, 17])}.

A forma especial @code{save (@var{filename}, all)} armazena o estado corrente do Maxima.
Isso inclue todas as vari@'aveis definidas pelo usu@'ario, fun@,{c}@~oes, arrays, etc., bem como
alguns @'itens definidos automaticamente.
Os @'ites salvos incluem vari@'aveis de sistema,
tais como @code{file_search_maxima} ou @code{showtime}, se a elas tiverem sido atribu@'idos novos valores pelo usu@'ario;
veja @code{myoptions}.

@code{save} avalia seus argumentos.  
@var{filename} deve obrigat@'oriamente ser uma seq@"u@^encia de caracteres, n@~ao uma vari@'avel tipo seq@"u@^encia de caracteres.
O primeiro e o @'ultimo r@'otulos a salvar, se especificado, devem obrigat@'oriamente serem inteiros.
O operador aspas duplas avalia uma vari@'avel tipo seq@"u@^encia de caracteres para seu valor seq@"u@^encia de caracteres,
e.g., @code{s: "foo.1"$ save (''s, all)$},
e vari@'aveis inteiras para seus valores inteiros, e.g., @code{m: 5$ n: 12$ save ("foo.1", [''m, ''n])$}.

@c ANY USE FOR THE FOLLOWING ???
@c The following device constructs a list of variables to save e saves them.
@c 
@c @example
@c s: "foo.1"$
@c l: ['aa, 'bb, 'cc, 'dd]$
@c apply (save, append ([s], l))$
@c @end example
@end deffn

@c NEEDS MORE WORK !!!
@defvr {Vari@'avel de op@,{c}@~ao} savedef
Valor padr@~ao: @code{true}

Quando @code{savedef} @'e @code{true}, a ves@~ao Maxima de uma
fun@,{c}@~ao de usu@'ario @'e preservada quando a fun@,{c}@~ao @'e traduzida.
Isso permite que a defini@,{c}@~ao seja mostrada por @code{dispfun} e autoriza a fun@,{c}@~ao a
ser editada.

Quando @code{savedef} @'e @code{false}, os nomes de fun@,{c}@~oes traduzidas s@~ao
removidos da lista de @code{fun@,{c}@~oes}.

@end defvr

@c THIS FUNCTION IS IN THE SHARE PACKAGE itensor.lisp
@c MOVE THIS DESCRIPTION TO Itensor.texi
@deffn {Fun@,{c}@~ao} show (@var{expr})
Mostra @code{expr} com os objetos indexados
tendo @'indices covariantes como subscritos, @'indices contravariantes como
sobrescritos.  Os @'indices derivativos s@~ao mostrados como subscritos,
separados dos @'indices covariantes por uma v@'irgula.

@end deffn

@deffn {Fun@,{c}@~ao} showratvars (@var{expr})
Retorna uma lista de vari@'aveis express@~ao racional can@^onica (CRE) na express@~ao @code{expr}.

Veja tamb@'em @code{ratvars}.

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} stardisp
Valor padr@~ao: @code{false}

Quando @code{stardisp} @'e @code{true}, multiplica@,{c}@~ao @'e
mostrada com um asterisco @code{*} entre os operandos.

@end defvr

@c NEEDS CLARIFICATION AND EXAMPLES
@deffn {Fun@,{c}@~ao} string (@var{expr})
Converte @code{expr} para a nota@,{c}@~ao linear do Maxima
apenas como se tivesse sido digitada.

O valor de retorno de @code{string} @'e uma seq@"u@^encia de caracteres,
e dessa forma n@~ao pode ser usada em um c@'alculo.

@end deffn

@c SHOULD BE WRITTEN WITH LEADING ? BUT THAT CONFUSES CL-INFO SO WORK AROUND
@c @defvr {Lisp variable} ?stringdisp
@defvr {Vari@'avel Lisp} stringdisp
Valor padr@~ao: @code{false}

Quando @code{?stringdisp} for @code{true},
seq@"u@^encias de caracteres ser@~ao mostradas contidas em aspas duplas.
De outra forma,
aspas n@~ao s@~ao mostradas.

@code{?stringdisp} @'e sempre @code{true} quando mostrando uma defini@,{c}@~ao de fun@,{c}@~ao.

@code{?stringdisp} @'e uma vari@'avel Lisp,
ent@~ao deve ser escrita com um ponto de interroga@,{c}@~ao @code{?} na frente.

Exemplos:

@c ===beg===
@c ?stringdisp: false$
@c "This is an example string.";
@c foo () := print ("This is a string in a function definition.");
@c ?stringdisp: true$
@c "This is an example string.";
@c ===end===
@example
(%i1) ?stringdisp: false$
(%i2) "This is an example string.";
(%o2)              This is an example string.
(%i3) foo () := print ("This is a string in a function definition.");
(%o3) foo() := 
              print("This is a string in a function definition.")
(%i4) ?stringdisp: true$
(%i5) "This is an example string.";
(%o5)             "This is an example string."
@end example

@end defvr

@deffn {Fun@,{c}@~ao} stringout (@var{filename}, @var{expr_1}, @var{expr_2}, @var{expr_3}, ...)
@deffnx {Fun@,{c}@~ao} stringout (@var{filename}, [@var{m}, @var{n}])
@deffnx {Fun@,{c}@~ao} stringout (@var{filename}, input)
@deffnx {Fun@,{c}@~ao} stringout (@var{filename}, functions)
@deffnx {Fun@,{c}@~ao} stringout (@var{filename}, values)

@code{stringout} escreve express@~oes para um arquivo na mesma forma de
express@~oes que foram digitadas para entrada.  O arquivo pode ent@~ao ser usado
como entrada para comandos @code{batch} ou @code{demo}, e isso pode ser editado para
qualquer prop@'osito.  @code{stringout} pode ser executado enquanto @code{writefile} est@'a em progresso.

A forma geral de @code{stringout} escreve os valores de um ou mais 
express@~oes para o arquivo de sa@'ida.  Note que se uma express@~ao @'e uma
vari@'avel, somente o valor da vari@'avel @'e escrito e n@~ao o nome
da vari@'avel.  Como um @'util caso especial, as express@~oes podem ser
r@'otulos de entrada (@code{%i1}, @code{%i2}, @code{%i3}, ...) ou r@'otulos de sa@'ida (@code{%o1}, @code{%o2}, @code{%o3}, ...).

Se @code{grind} @'e @code{true}, @code{stringout} formata a sa@'ida usando o formato 
@code{grind}.  De outra forma o formato @code{string} @'e usado.  Veja @code{grind} e @code{string}.

A forma especial @code{stringout (@var{filename}, [@var{m}, @var{n}])} escreve os
valores dos r@'otulos de entrada de m at@'e n, inclusive.  

A forma especial @code{stringout (@var{filename}, input)} escreve todos
os r@'otulos de entrada para o arquivo.

A forma especial @code{stringout (@var{filename}, functions)} escreve todas
as fun@,{c}@~oes definidas pelo usu@'ario (nomeadas pela lista global @code{functions}) para o arquivo.

A forma especial @code{stringout (@var{filename}, values)} escreve todas as
vari@'aveis atribu@'idas pelo usu@'ario (nomeadas pela lista global @code{values})
para o arquivo.  Cada vari@'avel @'e impressa como uma
declara@,{c}@~ao de atribui@,{c}@~ao, com o nome da vari@'avel seguida de dois pontos, e seu
valor.  Note que a forma geral de @code{stringout} n@~ao imprime 
vari@'aveis como declara@,{c}@~oes de atribui@,{c}@~ao.

@end deffn

@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@deffn {Fun@,{c}@~ao} tex (@var{expr})
@deffnx {Fun@,{c}@~ao} tex (@var{expr}, @var{filename})
@deffnx {Fun@,{c}@~ao} tex (@var{label}, @var{filename})

No caso de um r@'otulo,
um n@'umero-equa@,{c}@~ao-esquerdo @'e produzido.
No caso de um nome-arquivo ser fornecido, a sa@'ida @'e anexada ao
arquivo.

@example
(%i1) integrate (1/(1+x^3), x);
                                    2 x - 1
                  2            atan(-------)
             log(x  - x + 1)        sqrt(3)    log(x + 1)
(%o1)      - --------------- + ------------- + ----------
                    6             sqrt(3)          3
(%i2) tex (%o1);
$$-@{@{\log \left(x^2-x+1\right)@}\over@{6@}@}+@{@{\arctan \left(@{@{2\,x-1
 @}\over@{\sqrt@{3@}@}@}\right)@}\over@{\sqrt@{3@}@}@}+@{@{\log \left(x+1\right)
 @}\over@{3@}@}\leqno@{\tt (\%o1)@}$$
(%o2)                          (\%o1)
(%i3) tex (integrate (sin(x), x));
$$-\cos x$$
(%o3)                           false
(%i4) tex (%o1, "foo.tex");
(%o4)                          (\%o1)
@end example

@end deffn

@c NEEDS CLARIFICATION
@deffn {Fun@,{c}@~ao} system (@var{command})
Executa @var{command} como um processo separado.
O comando @'e passado ao shell padra@~o para execu@,{c}@~ao.
@code{system} n@~ao @'e suportado por todos os sistemas
operacionais, mas geralmente existe em ambientes Unix e Unix-like.

Supondo que @code{_hist.out}
@'e uma lista de freq@"u@^encia que voc@^e deseja imprimir como um gr@'afico em barras
usando @code{xgraph}.  

@example
(%i1) (with_stdout("_hist.out",
           for i:1 thru length(hist) do (
             print(i,hist[i]))),
       system("xgraph -bar -brw .7 -nl < _hist.out"));
@end example

Com o objetivo de fazer com que a impress@~ao do gr@'afico seja conclu@'ida em segundo plano (retornando o controle para o Maxima)
e remover o arquivo tempor@'ario ap@'os isso ter sido conclu@'ido fa@,{c}a:

@example
system("(xgraph -bar -brw .7 -nl < _hist.out;  rm -f _hist.out)&")
@end example

@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} ttyoff
Valor padr@~ao: @code{false}

Quando @code{ttyoff} @'e @code{true}, express@~oes de sa@'ida n@~ao s@~ao mostradas.
Express@~oes de sa@'ida s@~ao ainda calculadas e atribu@'idas r@'otulos.  Veja @code{labels}.

Textos impresso por fun@,{c}@~oes internas do Maxima, tais como mensagens de erro e a sa@'ida de @code{describe},
n@~ao s@~ao afetadas por @code{ttyoff}.

@end defvr

@deffn {Macro} with_stdout (@var{filename}, @var{expr_1}, @var{expr_2}, @var{expr_3}, ...)
Abre @var{filename} e ent@~ao avalia @var{expr_1}, @var{expr_2}, @var{expr_3}, ....
Os valores dos argumentos n@~ao s@~ao armazenados em @var{filename},
mas qualquer sa@'ida impressa gerada pela avalia@,{c}@~ao dos argumentos
(de @code{print}, @code{display}, @code{disp}, ou @code{grind}, por exemplo)
vai para @var{filename} em lugar do console.

@code{with_stdout} retorna o valor do seu argumento final.

Veja tamb@'em @code{writefile}.

@c THIS DOESN'T SEEM VERY IMPORTANT TO MENTION ...
@c Note the binding of display2d to be
@c false, otherwise the printing will have things like "- 3" instead
@c of "-3".
@c
@example
@c THIS EXAMPLE USES SOME UNIX-ISH CONSTRUCTS -- WILL IT WORK IN WINDOWS ???
@c ALSO IT'S SORT OF COMPLICATED AND THE SIMPLER SECOND EXAMPLE ILLUSTRATES with_stdout BETTER !!!
@c mygnuplot (f, var, range, number_ticks) :=
@c  block ([numer:true, display2d:false],
@c  with_stdout("tmp.out",
@c    dx: (range[2]-range[1])/number_ticks,
@c    for x: range[1] thru range[2] step dx
@c       do print (x, at (f, var=x))),
@c  system ("echo \"set data style lines; set title '", f,"' ;plot '/tmp/gnu'
@c ;pause 10 \" | gnuplot"))$
(%i1) with_stdout ("tmp.out", for i:5 thru 10 do print (i, "! yields", i!))$
(%i2) printfile ("tmp.out")$
5 ! yields 120 
6 ! yields 720 
7 ! yields 5040 
8 ! yields 40320 
9 ! yields 362880 
10 ! yields 3628800
@end example

@end deffn

@deffn {Fun@,{c}@~ao} writefile (@var{filename})
Come@,{c}a escrevendo uma transcri@,{c}@~ao da sess@~ao Maxima para @var{filename}.
Toda intera@,{c}@~ao entre o usu@'ario e Maxima @'e ent@~ao gravada nesse arquivo,
@c FOLLOWING CLAIM PROBABLY NEEDS TO BE QUALIFIED
da mesma forma que aparece no console.

Como a transcri@,{c}@~ao @'e impressa no formato de sa@'ida do console,
isso n@~ao pode ser reaproveitado pelo Maxima.
Para fazer um arquivo contendo express@~oes que podem ser reaproveitadas,
veja @code{save} e @code{stringout}.
@code{save} armazena express@~oes no formato Lisp, enquanto @code{stringout} armazena express@~oes no formato Maxima.

O efeito de executar @code{writefile} quando @var{filename} ainda existe
depende da implementa@,{c}@~ao Lisp subjacente;
o arquivo transcrito pode ser substitu@'ido, ou o arquivo pode receber um anexo.
@code{appendfile} sempre anexa para o arquivo transcrito.

Isso pode ser conveniente para executar @code{playback} ap@'os
@code{writefile} para salvar a visualiza@,{c}@~ao de intera@,{c}@~oes pr@'evias.
Como @code{playback} mostra somente as vari@'aveis de entrada e sa@'ida (@code{%i1}, @code{%o1}, etc.),
qualquer sa@'ida gerada por uma declara@,{c}@~ao de impress@~ao em uma fun@,{c}@~ao
(como oposi@,{c}@~ao a um valor de retorno) n@~ao @'e mostrada por @code{playback}.

@code{closefile} fecha o arquivo transcrito aberto por @code{writefile} ou @code{appendfile}.

@end deffn
