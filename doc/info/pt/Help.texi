@c Language: Brazilian Portuguese, Encoding: iso-8859-1
@c /Help.texi/1.20/Sun Dec  3 09:51:33 2006/-ko/
@iftex
@hyphenation{cor-res-pon-de}
@end iftex
@menu
* Introdu@value{cedilha}@~ao a Ajuda::        
* Lisp e Maxima::            
* Descartando::          
* Documenta@value{cedilha}@~ao::               
* Defini@value{cedilha}@~oes para Ajuda::        
@end menu

@node Introdu@value{cedilha}@~ao a Ajuda, Lisp e Maxima, Ajuda, Ajuda
@section Introdu@value{cedilha}@~ao a Ajuda

@c AS IT STANDS THIS IS JUST A REPEAT OF THE STUFF FOUND UNDER @defun describe.

A fun@,{c}@~ao prim@'aria de ajuda on-line @'e @code{describe},
que @'e tipicamente invocada atrav@'es do ponto de interroga@,{c}@~ao @code{?} na linha de comando interativa.  
@code{? foo} (com um espa@,{c}o entre @code{?} e @code{foo})
@'e equivalente a @code{describe ("foo")}, onde @code{foo}
@'e o nome ou parte do nome de uma fun@value{cedilha}@~ao ou t@'opico;
@code{describe} ent@~ao acha todos os @'itens documentados que possuem a seq@"u@^encia de caracteres
@code{foo} em seus t@'itulos.
Se existe mais que um tal item, Maxima solicita ao usu@'ario selecionar
um item ou @'itens para mostrar.

@example
(%i1) ? integ
 0: (maxima.info)Introduction to Elliptic Functions and Integrals.
 1: Definitions for Elliptic Integrals.
 2: Integration.
 3: Introduction to Integration.
 4: Definitions for Integration.
 5: askinteger :Definitions for Simplification.
 6: integerp :Definitions for Miscellaneous Options.
 7: integrate :Definitions for Integration.
 8: integrate_use_rootsof :Definitions for Integration.
 9: integration_constant_counter :Definitions for Integration.
Enter space-separated numbers, `all' or `none': 7 8

Info from file /use/local/maxima/doc/info/maxima.info:
 - Function: integrate (expr, var)
 - Function: integrate (expr, var, a, b)
     Attempts to symbolically compute the integral of `expr' with
     respect to `var'.  `integrate (expr, var)' is an indefinite
     integral, while `integrate (expr, var, a, b)' is a definite
     integral, [...]
@end example

Nesse exemplo, @'itens 7 e 8 foram selecionados.
Todos ou nenhum dos @'itens poderia ter sido selecionados atrav@'es da inser@,{c}@~ao de @code{all} ou @code{none},
que podem ser abreviados para @code{a} ou @code{n}, respectivamente.

@node Lisp e Maxima, Descartando, Introdu@value{cedilha}@~ao a Ajuda, Ajuda
@section Lisp e Maxima
Maxima @'e escrito na liguagem de programa@,{c}@~ao Lisp, e @'e f@'acil acessar fun@,{c}@~oes Lisp e vari@'aveis
a partir do Maxima e vice-versa.
S@'imbolos Lisp e Maxima s@~ao disting@"uidos atrav@'es de uma conven@,{c}@~ao de nome.
Um s@'imbolo Lisp que come@,{c}a com um sinal de d@'olar @code{$} corresponde a
um s@'imbolo Maxima sem o sinal de d@'olar.
@c NEED TO MENTION THIS OR IS IT JUST CLUTTERING ??
@c This includes special Maxima variables such as @code{%} and input and output labels,
@c which appear as @code{$%}, @code{$%i1}, @code{$%o1}, etc., in Lisp.
Um s@'imbolo Maxima que come@,{c}a com um ponto de interroga@,{c}@~ao @code{?} corresponde a
um s@'imbolo Lisp sem o ponto de interroga@,{c}@~ao.
Por exemplo, o s@'imbolo Maxima @code{foo} corresponde ao s@'imbolo Lisp @code{$foo},
enquanto o s@'imbolo Maxima @code{?foo} corresponde ao s@'imbolo Lisp @code{foo},
Note que @code{?foo} @'e escrito sem um espa@,{c}o entre @code{?} e @code{foo};
de outra forma pode ser uma chamada err@^onea para @code{describe ("foo")}.

H@'ifen @code{-}, asterisco @code{*}, ou outro caractere especial em s@'imbolos Lisp
deve ser precedido por uma barra invertida @code{\} onde ele aparecer no c@'odigo Maxima.
Por exemplo, o identificador Lisp @code{*foo-bar*} @'e escrito @code{?\*foo\-bar\*} no Maxima.

C@'odigo Lisp pode ser executado dentro de uma sess@~ao Maxima.
Uma linha simples de Lisp (contendo uma ou mais formas) pode ser executada
atrav@'es do comando especial @code{:lisp}. Por exemplo,

@example
(%i1) :lisp (foo $x $y)
@end example

@noindent
chama a fun@,{c}@~ao Lisp @code{foo} com vari@'aveis Maxima @code{x} e @code{y} como argumentos.
A constu@,{c}@~ao @code{:lisp} pode aparecer na linha de comando interativa
ou em um arquivo processado por @code{batch} ou @code{demo}, mas n@~ao em um arquivo processado por
@code{load}, @code{batchload}, @code{translate_file}, ou @code{compile_file}.

A fun@,{c}@~ao @code{to_lisp()} abre uma sess@~ao interativa Lisp.
Digitando @code{(to-maxima)} fecha a sess@~ao Lisp e retorna para o Maxima.
@c I DON'T EVEN WANT TO MENTION USING CTRL-C TO OPEN A LISP SESSION.
@c (1) IT TAKES EXTRA SET UP TO GET STARTED NAMELY :lisp (setq *debugger-hook* nil)
@c (2) IT GETS SCREWED UP EASILY -- TYPE SOMETHING WRONG AND YOU CAN'T GET BACK TO MAXIMA
@c (3) IT DOESN'T OFFER FUNCTIONALITY NOT PRESENT IN THE to_lisp() SESSION

Fun@,{c}@~oes Lisp e vari@'aveis que s@~ao para serem vis@'iveis no Maxima como
fun@,{c}@~oes e vari@'aveis com nomes comuns (sem pontua@,{c}@~ao especial)
devem ter nomes Lisp come@,{c}ando com o sinal de d@'olar @code{$}.

Maxima @'e sens@'ivel @`a caixa, distingue entre letras em caixa alta (mai@'usculas) e letras em caixa baixa (min@'usculas)
em identificadores, enquanto Lisp n@~ao @'e sens@'ivel @`a caixa.
Existem algumas regras governando a tradu@,{c}@~ao de nomes entre o Lisp e o Maxima.

@enumerate
@item
Um identificador Lisp n@~ao contido entre barras verticais corresponde a um identificador Maxima
em caixa baixa.
Se o identificador Lisp estiver em caixa alta, caixa baixa, ou caixa mista, @'e ignorado.
E.g., Lisp @code{$foo}, @code{$FOO}, e @code{$Foo} todos correspondem a Maxima @code{foo}.
@item
Um identificador Lisp que est@'a todo em caixa alta ou todo em caixa baixa
e contido em barras verticais corresponde a um identificador Maxima com caixa invertida.
Isto @'e, caixa alta @'e alterada para caixa baixa e caixa baixa para caixa alta.
E.g., Lisp @code{|$FOO|} e @code{|$foo|}
corresponde a Maxima @code{foo} e @code{FOO}, respectivamente.
@item
Um identificador Lisp que @'e misto de caixa alta e caixa baixa
e contido entre barras verticais corresponde a um identificador Maxima com o mesma caixa.
E.g., Lisp @code{|$Foo|} corresponde a Maxima @code{Foo}.
@end enumerate

A macro Lisp @code{#$} permite o uso de express@~oes Maxima em c@'odigo Lisp.
@code{#$@var{expr}$} expande para uma express@~ao Lisp equivalente @`a express@~ao Maxima @var{expr}.

@example
(msetq $foo #$[x, y]$)
@end example

@noindent
Isso tem o mesmo efeito que digitar

@example
(%i1) foo: [x, y];
@end example

@noindent
A fun@,{c}@~ao Lisp @code{displa} imprime uma express@~ao em formato Maxima.

@example
(%i1) :lisp #$[x, y, z]$ 
((MLIST SIMP) $X $Y $Z)
(%i1) :lisp (displa '((MLIST SIMP) $X $Y $Z))
[x, y, z]
NIL
@end example

Fun@,{c}@~oes definidas em Maxima n@~ao s@~ao fun@,{c}@~oes comuns em Lisp.
A fun@,{c}@~ao Lisp @code{mfuncall} chama uma fun@,{c}@~ao Maxima.
Por exemplo:

@example
(%i1) foo(x,y) := x*y$
(%i2) :lisp (mfuncall '$foo 'a 'b)
((MTIMES SIMP) A B)
@end example

Algumas fun@,{c}@~oes Lisp possuem o mesmo nome que no pacote Maxima, a saber as seguintes.

@code{complement},
@code{continue},
@code{//},
@code{float},
@code{functionp},
@code{array},
@code{exp},
@code{listen},
@code{signum},
@code{atan},
@code{asin},
@code{acos},
@code{asinh},
@code{acosh},
@code{atanh},
@code{tanh},
@code{cosh},
@code{sinh},
@code{tan},
@code{break},
e @code{gcd}.


@node Descartando, Documenta@value{cedilha}@~ao, Lisp e Maxima, Ajuda
@section Descartando
Computa@,{c}@~ao simb@'olica tende a criar um bom volume
de arquivos tempor@'arios, e o efetivo manuseio disso pode ser crucial para sucesso
completo de alguns programas.

@c HOW MUCH OF THE FOLLOWING STILL HOLDS ??
@c WHAT ABOUT GC IN GCL ON MS WINDOWS ??
@c SHOULD WE SAY SOMETHING ABOUT GC FOR OTHER LISPS ??
Sob GCL, nos sistemas UNIX onde a chamada de sistema mprotect ( controle de acessso autorizado a uma regi@~ao de mem@'oria) est@'a dispon@'ivel
(incluindo SUN OS 4.0 e algumas variantes de BSD) uma organiza@,{c}@~ao de arquivos tempor@'arios estratificada
est@'a dispon@'ivel.   Isso limita a organiza@,{c}@~ao para p@'aginas que tenham sido recentemente
escritas.    Veja a documenta@,{c}@~ao da GCL sob ALLOCATE e GBC.   No
ambiente Lisp fazendo (setq si::*notify-gbc* t) ir@'a ajudar voc@^e a determinar quais
@'areas podem precisar de mais espa@value{cedilha}o.

@node Documenta@value{cedilha}@~ao, Defini@value{cedilha}@~oes para Ajuda, Descartando, Ajuda
@section Documenta@value{cedilha}@~ao

@c SHOULD TALK ABOUT OTHER FORMS OF DOCUMENTATION ASIDE FROM ON-LINE MANUAL.

O manual on-line de usu@'ario do Maxima pode ser visto em diferentes formas.
A partir da linha de comando interativa do Maxima, o manual de usu@'ario
@'e visto em texto plano atrav@'es do comando @code{?} (i.e., a fun@value{cedilha}@~ao @code{describe} ).
O manual de usu@'ario @'e visto como hipertexto @code{info} atrav@'es do programa visualizador @code{info}
e como uma web page atrav@'es de qualquer navegador web comum.

@code{example} mostra exemplos de muitas fun@,{c}@~oes do Maxima.
Por exemplo,

@example
(%i1) example (integrate);
@end example

retorna

@example
(%i2) test(f):=block([u],u:integrate(f,x),ratsimp(f-diff(u,x)))
(%o2) test(f) := block([u], u : integrate(f, x), 

                                         ratsimp(f - diff(u, x)))
(%i3) test(sin(x))
(%o3)                           0
(%i4) test(1/(x+1))
(%o4)                           0
(%i5) test(1/(x^2+1))
(%o5)                           0
@end example

e sa@'ida adicional.

@node Defini@value{cedilha}@~oes para Ajuda,  , Documenta@value{cedilha}@~ao, Ajuda
@section Defini@value{cedilha}@~oes para Ajuda

@deffn {Fun@,{c}@~ao} demo (@var{nomearquivo})
Avalia express@~oes Maxima em @var{nomearquivo} e mostra os resultados.
@code{demo} faz uma pausa ap@'os avaliar cada express@~ao
e continua ap@'os a conclus@~ao com um enter das entradas de usu@'ario.
(Se executando em Xmaxima, @code{demo} pode precisar ver um ponto e v@'irgula @code{;}
seguido por um enter.)

@code{demo} procura na lista de diret@'orios
@code{file_search_demo} para achar @code{nomearquivo}.
Se o arquivo tiver o sufixo @code{dem},
o sufixo pode ser omitido.
Veja tamb@'em @code{file_search}.

@code{demo} avalia seus argumento.
@code{demo} retorna o nome do arquivo de demonstra@,{c}@~ao.

Exemplo:

@example
(%i1) demo ("disol");

batching /home/wfs/maxima/share/simplification/disol.dem
 At the _ prompt, type ';' followed by enter to get next demo
(%i2)                      load(disol)

_
(%i3)           exp1 : a (e (g + f) + b (d + c))
(%o3)               a (e (g + f) + b (d + c))

_
(%i4)                disolate(exp1, a, b, e)
(%t4)                         d + c

(%t5)                         g + f

(%o5)                   a (%t5 e + %t4 b)

_
(%i5) demo ("rncomb");

batching /home/wfs/maxima/share/simplification/rncomb.dem
 At the _ prompt, type ';' followed by enter to get next demo
(%i6)                     load(rncomb)

_
                             z         x
(%i7)               exp1 : ----- + ---------
                           y + x   2 (y + x)
                          z         x
(%o7)                   ----- + ---------
                        y + x   2 (y + x)

_
(%i8)                     combine(exp1)
                          z         x
(%o8)                   ----- + ---------
                        y + x   2 (y + x)

_
(%i9)                     rncombine(%)
                             2 z + x
(%o9)                       ---------
                            2 (y + x)

_
                             d   c   b   a
(%i10)                exp2 : - + - + - + -
                             3   3   2   2
                          d   c   b   a
(%o10)                    - + - + - + -
                          3   3   2   2

_
(%i11)                    combine(exp2)
                      2 d + 2 c + 3 (b + a)
(%o11)                ---------------------
                                6

_
(%i12)                   rncombine(exp2)
                      2 d + 2 c + 3 b + 3 a
(%o12)                ---------------------
                                6

_
(%i13) 
@end example

@end deffn

@deffn {Fun@,{c}@~ao} describe (@var{string})
@deffnx {Fun@,{c}@~ao} describe (@var{string}, exact)
@code{describe(@var{string})} encontra todos os itens documentados que contiverem @var{string} em seus t@'itulos.
Se existe mais de um de tal item, Maxima solicita ao usu@'ario selecionar
um item ou @'itens para mostrar.

@code{describe(@var{string}, exact)} encontra um item com t@'itulo igual
(case-insensitive)
a @var{string}, se existir tal item.

Na linha de comando interativa,
@code{? foo} (com um espa@,{c}o entre @code{?} e @code{foo})
@'e equivalente a @code{describe("foo")}.
e @code{?! foo} @'e equivalente a @code{describe("foo", exact)}.

@code{describe("")} retorna uma lista de todos os t@'opicos documentados no manual on-line.

@code{describe} n@~ao avalia seu argumento.
@code{describe} retorna @code{true} se alguma documenta@,{c}@~ao for encontrada, de outra forma retorna @code{false}.

Exemplo:

@example
(%i1) ? integ
 0: (maxima.info)Introduction to Elliptic Functions and Integrals.
 1: Definitions for Elliptic Integrals.
 2: Integration.
 3: Introduction to Integration.
 4: Definitions for Integration.
 5: askinteger :Definitions for Simplification.
 6: integerp :Definitions for Miscellaneous Options.
 7: integrate :Definitions for Integration.
 8: integrate_use_rootsof :Definitions for Integration.
 9: integration_constant_counter :Definitions for Integration.
Enter space-separated numbers, `all' or `none': 7 8

Info from file /use/local/maxima/doc/info/maxima.info:
 - Function: integrate (expr, var)
 - Function: integrate (expr, var, a, b)
     Attempts to symbolically compute the integral of `expr' with
     respect to `var'.  `integrate (expr, var)' is an indefinite
     integral, while `integrate (expr, var, a, b)' is a definite
     integral, [...]
@end example

Nesse , @'itens 7 e 8 foram selecionados.
Todos ou nenhum dos @'itens poderia ter sido selecionado atrav@'es da inser@,{c}@~ao de @code{all} ou @code{none},
que podem ser abreviado para @code{a} ou para @code{n}, respectivamente.

@pxref{Introdu@value{cedilha}@~ao a Ajuda}

@end deffn

@deffn {Fun@,{c}@~ao} example (@var{t@'opico})
@deffnx {Fun@,{c}@~ao} example ()
@code{example (@var{topic})} mostra alguns exemplos de @var{t@'opico},
que @'e um s@'imbolo (n@~ao uma seq@"u@^encia de caracteres).
A maioria dos t@'opicos s@~ao nomes de fun@,{c}@~ao.
@code{example ()} retorna a lista de todos os t@'opicos reconhecidos.

O nome do arquivo contendo os exemplos @'e dado pela
vari@'avel global @code{manual_demo}, cujo valor padr@~ao @'e @code{"manual.demo"}.

@code{example} n@~ao avalia seu argumento.
@code{example} retorna @code{done}
a menos que ocorra um erro ou n@~ao exista o argumento fornecido pelo usu@'ario, nesse caso @code{example}
retorna uma lista de todos os t@'opicos reconhecidos.

Exemplos:

@example
(%i1) example (append);
(%i2) append([x+y,0,-3.2],[2.5E+20,x])
(%o2)             [y + x, 0, - 3.2, 2.5E+20, x]
(%o2)                         done
(%i3) example (coeff);
(%i4) coeff(b+tan(x)+2*a*tan(x) = 3+5*tan(x),tan(x))
(%o4)                      2 a + 1 = 5
(%i5) coeff(1+x*%e^x+y,x,0)
(%o5)                         y + 1
(%o5)                         done
@end example

@end deffn

