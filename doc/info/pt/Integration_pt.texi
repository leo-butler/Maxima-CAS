@c /Integration.texi/1.22/Thu Apr 21 04:58:28 2005/-ko/
@menu
* Introduction to Integration::  
* Definitions for Integration::  
@end menu

@node Introduction to Integration, Definitions for Integration, Integration, Integration
@section Introduction to Integration

Maxima tem muitas rotinas para manusear integra@,{c}@~ao.
A fun@,{c}@~ao @code{integrate} faz uso de muitas dessas.  Exite tamb@'em o
pacote @code{antid}, que manuseia uma fun@,{c}@~ao n@~ao especificada (e suas
derivadas, certamente).  Para usos num@'ericos, existe a fun@,{c}@~ao 
@code{romberg}; um
integrador adaptativo que usa a regra da quadratura dos currais de Newton,
chamada @code{quanc8}; e uma escolha de integradores adaptativos de Quadpack,
a saber @code{quad_qag}, @code{quad_qags}, etc.
Fun@,{c}@~oes hipergeom@'etricas est@~ao sendo trabalhadas,
veja @code{specint} for details.
Geralmente falando, Maxima somente manuseia integrais que s@~ao
integr@'aveis em termos de "fun@,{c}@~oes elementares" (fun@,{c}@~oes racionais,
trigonometricas, logar@'itmicas, exponenciais, radicais, etc.) e umas poucas
extens@~oes (fun@,{c}@~ao de erro, dilogarithm).  Isso n@~ao manuseia
integrais em termos de fun@,{c}@~oes desconhecidas tais como @code{g(x)} e @code{h(x)}.

@c end concepts Integration
@node Definitions for Integration,  , Introduction to Integration, Integration
@section Definitions for Integration

@c NEEDS WORK
@deffn {Fun@,{c}@~ao} changevar (@var{expr}, @var{f(x,y)}, @var{y}, @var{x})
Faz a mudan@,{c}a de vari@'avel dada por
@code{@var{f(x,y)} = 0} em todas as integrais que ocorrem em @var{expr} com integra@,{c}@~ao em
rela@,{c}@~ao a @var{x}.
A nova vari@'avel @'e @var{y}.

@c HMM, THIS EXAMPLE YIELDS A CORRECT BUT SLIGHTLY STRANGE RESULT...
@example
(%i1) assume(a > 0)$
(%i2) 'integrate (%e**sqrt(a*y), y, 0, 4);
                      4
                     /
                     [    sqrt(a) sqrt(y)
(%o2)                I  %e                dy
                     ]
                     /
                      0
(%i3) changevar (%, y-z^2/a, z, y);
                      0
                     /
                     [                abs(z)
                   2 I            z %e       dz
                     ]
                     /
                      - 2 sqrt(a)
(%o3)            - ----------------------------
                                a
@end example

Uma express@~ao contendo uma forma substantiva, tais como as inst@^ancias de @code{'integrate} acima,
pode ser avaliada por @code{ev} com o sinalizador @code{nouns}.
Por exemplo, a express@~ao retornada por @code{changevar} acima pode ser avaliada
por @code{ev (%o3, nouns)}.

@code{changevar} pode tamb@'em ser usada para altera@,{c}@~oes nos @'indices de uma soma ou de um
produto.  Todavia, isso deve obrigat@'oriamente ser realizado de forma que quando uma altera@,{c}@~ao @'e feita em uma
soma ou produto, essa mudan@,{c}a deve ser um artif@'icio, i.e., @code{i = j+ ...}, n@~ao uma
fun@,{c}@~ao de grau mais alto.  E.g.,

@example
(%i4) sum (a[i]*x^(i-2), i, 0, inf);
                         inf
                         ====
                         \         i - 2
(%o4)                     >    a  x
                         /      i
                         ====
                         i = 0
(%i5) changevar (%, i-2-n, n, i);
                        inf
                        ====
                        \               n
(%o5)                    >      a      x
                        /        n + 2
                        ====
                        n = - 2
@end example

@end deffn

@c THIS ITEM IS A MESS, BUT DON'T BOTHER TO CLEAN IT UP:
@c THE GAUSS-KRONROD FUNCTIONS (QUADPACK) MAKE THIS OBSOLETE
@deffn {Fun@,{c}@~ao} dblint (@var{f}, @var{r}, @var{s}, @var{a}, @var{b})
Uma rotina de integral dupla que foi escrita no 
alto-n@'ivel do Maxima e ent@~ao traduzida e compilada para linguagem de m@'aquina.
Use @code{load (dblint)} para acessar esse pacote.  Isso usa o m@'etodo da regra de 
Simpson em ambas as dire@,{c}@~oes x e y para calcular

@example
/b /s(x)
|  |
|  |    f(x,y) dy dx
|  |
/a /r(x)
@end example

A fun@,{c}@~ao @var{f} deve ser uma fun@,{c}@~ao traduzida ou compilada de duas
vari@'aveis, e @var{r} e @var{s} devem cada uma ser uma fun@,{c}@~ao traduzida ou
compilada de uma vari@'avel, enquanto @var{a} e @var{b} devem ser n@'umeros em ponto
flutuante. A rotina tem duas vari@'aveis globais que determinam o
n@'umero de divis@~oes dos intervalos x e y: @code{dblint_x} e @code{dblint_y},
ambas as quais s@~ao inicialmente 10, e podem ser alteradas independentemente para
outros valores inteiros (existem @code{2*dblint_x+1} pontos calculados na
dire@,{c}@~ao x , e @code{2*dblint_y+1} na dire@,{c}@~ao y).
A rotina subdivide o eixo X e ent@~ao para cada valor de X isso
primeiro calcula @code{@var{r}(x)} e @code{@var{s}(x)}; ent@~ao o eixo Y entre @code{@var{r}(x)} e @code{@var{s}(x)} @'e
subdividido e a integral ao longo do eixo Y @'e executada usando
a regra de Simpson; ent@~ao a integral ao longo do eixo X @'e conclu@'ida usando
a regra de Simpson com os valores da fun@,{c}@~ao sendo as integrais-Y. Esse
procedimento pode ser numericamente inst@'avel por uma grande variedade raz@~oes,
mas razo@'avelmente r@'apido: evite usar isso sobre fun@,{c}@~oes altamente oscilat@'orias
e fun@,{c}@~oes com singularidades (postes ou pontos de ramifica@,{c}@~ao na
regi@~ao).  As integrais Y dependem de quanto fragmentados @code{@var{r}(x)} e @code{@var{s}(x)} s@~ao,
ent@~ao se a dit@^ancia @code{@var{s}(x) - @var{r}(x)} varia rapidamente com X, nesse ponto pode ter
erros substanciais provenientes de trunca@,{c}@~ao com diferentes saltos-tamanhos
nas v@'arias integrais Y. Um pode incrementar @code{dblint_x} e @code{dblint_y} em
uma tentativa para melhorar a converg@^encia da rei@~ao, com sacrif@'icio do
tempo de computa@,{c}@~ao. Os valores da fun@,{c}@~ao n@~ao s@~ao salvos, ent@~ao se a
fun@,{c}@~ao @'e muito desperdi@,{c}adora de tempo,voc@^e ter@'a de esperar por
re-computa@,{c}@~ao se voc@^e mudar qualquer coisa (desculpe).
Isso @'e requerido que as fun@,{c}@~oes @var{f}, @var{r}, e @var{s} sejam ainda traduzidas
ou compiladas previamente chamando @code{dblint}. Isso resultar@'a em ordens de
magnitude de melhoramentos de velocidade sobre o c@'odigo interpretado em muitos casos!

@code{demo (dblint)} executa uma demonstra@,{c}@~ao de @code{dblint} aplicado a um problema exemplo.
@c demo (dblint_1) FAILS WITH Could not find `fltdfnk.mc' -- DON'T BOTHER TO MENTION IT. !!!
@c @code{demo (dblint_1)} executa outra demonstra@,{c}@~ao.

@end deffn

@deffn {Fun@,{c}@~ao} defint (@var{expr}, @var{x}, @var{a}, @var{b})
Tenta calcular uma integral definida.
@code{defint} @'e chamada por @code{integrate} quando limites de integra@,{c}@~ao s@~ao especificados,
i.e., quando @code{integrate} @'e chamado como @code{integrate (@var{expr}, @var{x}, @var{a}, @var{b})}.
Dessa forma do ponto de vista do usu@'ario, isso @'e suficiente para chamar @code{integrate}.
@c SHOULD WE BOTHER TO DOCUMENT defint ??? NO FUNCTIONALITY HERE THAT IS NOT ALREADY PRESENT IN integrate !!!

@code{defint} retorna uma express@~ao simb@'olica,
e executa um dos dois: ou calcula a integral ou a forma substantiva da integral.
Veja @code{quad_qag} e fun@,{c}@~oes rellacionadas para aproxima@,{c}@~ao num@'erica de integrais definidas.

@end deffn

@c NEEDS EXPANSION AND EXAMPLES
@deffn {Fun@,{c}@~ao} erf (@var{x})
Representa a fun@,{c}@~ao de erro, cuja derivada @'e:
@code{2*exp(-x^2)/sqrt(%pi)}.

@end deffn

@defvr {Vari@'avel} erfflag
Valor padr@~ao: @code{true}

Quando @code{erfflag} @'e @code{false}, previne @code{risch} da introdu@,{c}@~ao da
fun@,{c}@~ao @code{erf} na resposta se n@~ao houver nenhum no integrando para
come@,{c}ar.

@end defvr

@c NEEDS WORK
@deffn {Fun@,{c}@~ao} ilt (@var{expr}, @var{t}, @var{s})
Calcula a transforma@,{c}@~ao inversa de Laplace de @var{expr} em
rela@,{c}@~ao a @var{t} e par@^ametro @var{s}.  @var{expr} deve ser uma raz@~ao de
polin@^omios cujo denominador tem somente fatores lineares e quadr@'aticos.
Usando a fun@,{c}@~oes @code{laplace} e @code{ilt} juntas com as fun@,{c}@~oes @code{solve} ou
@code{linsolve} o usu@'ario pode resolver uma diferencial simples ou
uma equa@,{c}@~ao integral de convolu@,{c}@~ao ou um conjunto delas.

@example
(%i1) 'integrate (sinh(a*x)*f(t-x), x, 0, t) + b*f(t) = t**2;
              t
             /
             [                                    2
(%o1)        I  f(t - x) sinh(a x) dx + b f(t) = t
             ]
             /
              0
(%i2) laplace (%, t, s);
                               a laplace(f(t), t, s)   2
(%o2)  b laplace(f(t), t, s) + --------------------- = --
                                       2    2           3
                                      s  - a           s
(%i3) linsolve ([%], ['laplace(f(t), t, s)]);
                                        2      2
                                     2 s  - 2 a
(%o3)     [laplace(f(t), t, s) = --------------------]
                                    5         2     3
                                 b s  + (a - a  b) s
(%i4) ilt (rhs (first (%)), s, t);
Is  a b (a b - 1)  positive, negative, or zero?

pos;
               sqrt(a b (a b - 1)) t
        2 cosh(---------------------)       2
                         b               a t
(%o4) - ----------------------------- + -------
              3  2      2               a b - 1
             a  b  - 2 a  b + a

                                                       2
                                             + ------------------
                                                3  2      2
                                               a  b  - 2 a  b + a
@end example

@end deffn

@deffn {Fun@,{c}@~ao} integrate (@var{expr}, @var{x})
@deffnx {Fun@,{c}@~ao} integrate (@var{expr}, @var{x}, @var{a}, @var{b})
Tenta s@'imbolicamente calcular a integral de @var{expr} em rela@,{c}@~ao a @var{x}.
@code{integrate (@var{expr}, @var{x})} @'e uma integral indefinida,
enquanto @code{integrate (@var{expr}, @var{x}, @var{a}, @var{b})} @'e uma integral definida,
com limites de integra@,{c}@~ao @var{a} e @var{b}.
Os limites n@~ao poderam conter @var{x}, embora @code{integrate} n@~ao imponha essa restri@,{c}@~ao.
@var{a} n@~ao precisa ser menor que @var{b}.
Se @var{b} @'e igual a @var{a}, @code{integrate} retorna zero.

Veja @code{quad_qag} e fun@,{c}@~oes relacionadas para aproxima@,{c}@~ao num@'erica de integrais definidas.
Veja @code{residue} para computa@,{c}@~ao de res@'iduos (integra@,{c}@~ao complexa).
Veja @code{antid} para uma forma alternativa de calcular integrais indefinidas.

A integral (uma express@~ao livre de @code{integrate}) @'e retornada se @code{integrate} obt@'em sucesso.
De outra forma o valor de retorno @'e
a forma substantiva da integral (o operador com ap@'ostrofo @code{'integrate})
ou uma express@~ao contendo uma ou mais formas substantivas.
A forma substantiva de @code{integrate} @'e mostrada com um sinal de integral.

Em algumas circunst@^ancias isso @'e @'util para construir uma forma substantiva manualmente,
colocando em @code{integrate} um ap@'ostrofo, e.g., @code{'integrate (@var{expr}, @var{x})}.
Por exemplo, a integral pode depender de alguns par@^ametos que n@~ao est@~ao ainda calculados.
A forma substantiva pode ser aplicada a seus argumentos por @code{ev (@var{i}, nouns)}
onde @var{i} @'e a forma substantiva de interesse.

@c BEGIN EXPOSITION ON HEURISTICS
@code{integrate} manuseia integrais definidas separadamente das indefinidas,
e utiliza uma gama de heur@'isticas para manusear cada caso.
Casos especiais de integrais definidas incluem limites de integra@,{c}@~ao iguais a
zero ou infinito (@code{inf} ou @code{minf}),
fun@,{c}@~oes trigonom@'etricas com limites de integra@,{c}@~ao iguais a zero e @code{%pi} ou @code{2 %pi},
fun@,{c}@~oes racionais,
integrais relacionadas para as defini@,{c}@~oes de fun@,{c}@~oes @code{beta} e @code{psi},
e algumas integrais logar@'itmicas e trigonom@'etricas.
Processando fun@,{c}@~oes racionais pode incluir computa@,{c}@~ao de res@'iduo.
Se um caso especial aplic@'avel n@~ao @'e encontrado,
tentativa ser@'a feita para calcular a integra indefinida e avaliar isso nos limites de integra@,{c}@~ao.
Isso pode incluir pegar um limite como um limite de integra@,{c}@~ao tendendo ao infinito ou a menos infinito;
veja tamb@'em @code{ldefint}.

Casos especiais de integrais indefinidas incluem fun@,{c}@~oes trigonom@'etricas,
exponenciais e fun@,{c}@~oes logar@'itmicas,
e fun@,{c}@~oes racionais.
@code{integrate} pode tamb@'em fazer uso de uma curta tabela de integais elementares.

@code{integrate} pode realizar uma mudan@,{c}a de vari@'avel
se o integrando tem a forma @code{f(g(x)) * diff(g(x), x)}.
@code{integrate} tenta achar uma subexpress@~ao @code{g(x)} de forma que
a derivada de @code{g(x)} divida o integrando.
Essa busca pode fazer uso de derivadas definidas pela fun@,{c}@~ao @code{gradef}.
Veja tamb@'em @code{changevar} e @code{antid}.

Se nenhum dos procedimentos heur@'isticos acha uma integral indefinida,
o algor@'itmo de Risch @'e executado.
O sinalizador @code{risch} pode ser escolhido como um @code{evflag},
na chamada para @code{ev} ou na linha de comando,
e.g., @code{ev (integrate (@var{expr}, @var{x}), risch)} ou @code{integrate (@var{expr}, @var{x}), risch}.
Se @code{risch} est@'a presente, @code{integrate} chama a fun@,{c}@~ao @code{risch}
sem tentar heur@'isticas primeiro. Veja tamb@'em @code{risch}.
@c END EXPOSITION ON HEURISTICS

@code{integrate} trabalha somente com rela@,{c}@~oes funcionais representadas explicitamente com a nota@,{c}@~ao @code{f(x)}.
@code{integrate} n@~ao respeita depend@^encias implicitas estabelecidas pela fun@,{c}@~ao @code{depends}.
@code{integrate} pode necessitar conhecer alguma propriedade de um par@^ametro no integrando.
@code{integrate} ir@'a primeiro consultar a base de dados do @code{assume},
e , se a vari@'avel de interesse n@~ao est@'a l@'a,
@code{integrate} perguntar@'a ao usu@'ario.
Dependendo da pergunta,
respostas adequadas s@~ao @code{yes;} ou @code{no;},
ou @code{pos;}, @code{zero;}, ou @code{neg;}.

@code{integrate} n@~ao @'e, por padr@~ao, declarada ser linear. Veja @code{declare} e @code{linear}.

@code{integrate} tenta integra@,{c}@~ao por partes somente em uns poucos casos especiais.

Exemplos:

@itemize @bullet
@item
Integrais definidas e indefinidas elementares.

@example
(%i1) integrate (sin(x)^3, x);
                           3
                        cos (x)
(%o1)                   ------- - cos(x)
                           3
(%i2) integrate (x/ sqrt (b^2 - x^2), x);
                                 2    2
(%o2)                    - sqrt(b  - x )
(%i3) integrate (cos(x)^2 * exp(x), x, 0, %pi);
                               %pi
                           3 %e      3
(%o3)                      ------- - -
                              5      5
(%i4) integrate (x^2 * exp(-x^2), x, minf, inf);
                            sqrt(%pi)
(%o4)                       ---------
                                2
@end example

@item
Uso de @code{assume} e d@'uvida interativa.

@example
(%i1) assume (a > 1)$
(%i2) integrate (x**a/(x+1)**(5/2), x, 0, inf);
    2 a + 2
Is  -------  an integer?
       5

no;
Is  2 a - 3  positive, negative, or zero?

neg;
                                   3
(%o2)                  beta(a + 1, - - a)
                                   2
@end example

@item
Mudan@,{c}a de vari@'avel. Existem duas mudan@,{c}as de vari@'avel nesse exemplo:
uma usando a derivada estabelecida por @code{gradef},
e uma usando a deriva@,{c}@~ao @code{diff(r(x))} de uma fun@,{c}@~ao n@~ao especificada @code{r(x)}.

@example
(%i3) gradef (q(x), sin(x**2));
(%o3)                         q(x)
(%i4) diff (log (q (r (x))), x);
                      d               2
                     (-- (r(x))) sin(r (x))
                      dx
(%o4)                ----------------------
                            q(r(x))
(%i5) integrate (%, x);
(%o5)                     log(q(r(x)))
@end example

@item
O valor de retorno cont@'em a forma substantiva @code{'integrate}.
Nesse exemplo, Maxima pode extrair um fator do denominador
de uma fun@,{c}@~ao racional, mas n@~ao pode fatorar o restante ou de outra forma achar sua integral.
@code{grind} mostra a forma substantiva @code{'integrate} no resultado.
Veja tamb@'em @code{integrate_use_rootsof} para mais sobre integrais de fun@,{c}@~oes racionais.

@example
(%i1) expand ((x-4) * (x^3+2*x+1));
                    4      3      2
(%o1)              x  - 4 x  + 2 x  - 7 x - 4
(%i2) integrate (1/%, x);
                              /  2
                              [ x  + 4 x + 18
                              I ------------- dx
                              ]  3
                 log(x - 4)   / x  + 2 x + 1
(%o2)            ---------- - ------------------
                     73               73
(%i3) grind (%);
log(x-4)/73-('integrate((x^2+4*x+18)/(x^3+2*x+1),x))/73$
@end example

@item
Definindo uma fun@,{c}@~ao em termos de uma integral.
O corpo de uma fun@,{c}@~ao n@~ao @'e avaliado quando a fun@,{c}@~ao @'e definida.
Dessa forma o corpo de @code{f_1} nesse exemplo cont@'em a forma substantiva de @code{integrate}.
O operador aspas simples @code{'@w{}'} faz com que a integral seja avaliada,
e o resultado transforme-se no corpo de @code{f_2}.

@example
(%i1) f_1 (a) := integrate (x^3, x, 1, a);
                                     3
(%o1)           f_1(a) := integrate(x , x, 1, a)
(%i2) ev (f_1 (7), nouns);
(%o2)                          600
(%i3) /* Note parentheses around integrate(...) here */
      f_2 (a) := ''(integrate (x^3, x, 1, a));
                                   4
                                  a    1
(%o3)                   f_2(a) := -- - -
                                  4    4
(%i4) f_2 (7);
(%o4)                          600
@end example
@end itemize

@end deffn

@defvr {Vari@'avel} integration_constant_counter
Valor padr@~ao: 0

@c WHEN DOES integra@,{c}@~aoconstant1 SHOW UP IN THE OUTPUT OF integrate ???
@c integrate (a, x) YIELDS "a x", NOT "a x + integra@,{c}@~aoconstant1" !!!
@code{integra@,{c}@~ao_constant_counter} @'e um contador que @'e atualizado a cada vez que uma
constante de integra@,{c}@~ao (nomeada pelo Maxima, e.g., @code{integrationconstant1})
@'e introduzida em uma express@~ao pela integra@,{c}@~ao indefinida de uma equa@,{c}@~ao.

@end defvr

@defvr {Vari@'avel} integrate_use_rootsof
Valor padr@~ao: @code{false}

Quando @code{integrate_use_rootsof} @'e @code{true} e o denominador de
uma fun@,{c}@~ao racional n@~ao pode ser fatorado, @code{integrate} retorna a integral
em uma forma que @'e uma soma sobre as ra@'izes (n@~ao conhecidas ainda) do denominador.

Por exemplo, com @code{integrate_use_rootsof} escolhido para @code{false},
@code{integrate} retorna uma integral n@~ao resolvida de uma fun@,{c}@~ao racional na forma substantiva:

@example
(%i1) integrate_use_rootsof: false$
(%i2) integrate (1/(1+x+x^5), x);
        /  2
        [ x  - 4 x + 5
        I ------------ dx                            2 x + 1
        ]  3    2                2            5 atan(-------)
        / x  - x  + 1       log(x  + x + 1)          sqrt(3)
(%o2)   ----------------- - --------------- + ---------------
                7                 14             7 sqrt(3)
@end example

Agora vamos escolher o sinalizador para ser true e a parte n@~ao resolvida da
integral ser@'a expressa como um somat@'orio sobre as ra@'izes do denominador da fun@,{c}@~ao racional:

@example
(%i3) integrate_use_rootsof: true$
(%i4) integrate (1/(1+x+x^5), x);
      ====        2
      \       (%r4  - 4 %r4 + 5) log(x - %r4)
       >      -------------------------------
      /                    2
      ====            3 %r4  - 2 %r4
                      3    2
      %r4 in rootsof(x  - x  + 1)
(%o4) ----------------------------------------------------------
               7

                                                             2 x + 1
                                         2            5 atan(-------)
                                    log(x  + x + 1)          sqrt(3)
                                  - --------------- + ---------------
                                          14             7 sqrt(3)
@end example

Alternativamente o usu@'ario pode calcular as ra@'izes do denominador separadamente,
e ent@~ao expressar o integrando em termos dessas ra@'izes,
e.g., @code{1/((x - a)*(x - b)*(x - c))} ou @code{1/((x^2 - (a+b)*x + a*b)*(x - c))}
se o denominador for um polin@^omio c@'ubico.
Algumas vezes isso ajudar@'a Maxima a obter resultados mais @'uteis.

@end defvr

@c NEEDS EXAMPLES
@deffn {Fun@,{c}@~ao} ldefint (@var{expr}, @var{x}, @var{a}, @var{b})
Tenta calcular a integral definida de @var{expr} pelo uso de 
@code{limit} para avaliar a integral indefinida @var{expr} em rela@,{c}@~ao a @var{x}
no limite superior @var{b} e no limite inferior @var{a}.
Se isso falha para calcular a integral definida,
@code{ldefint} retorna uma express@~ao contendo limites como formas substantivas.

@code{ldefint} n@~ao @'e chamada por @code{integrate},
ent@~ao executando @code{ldefint (@var{expr}, @var{x}, @var{a}, @var{b})} pode retornar um resultado diferente de
@code{integrate (@var{expr}, @var{x}, @var{a}, @var{b})}.
@code{ldefint} sempre usa o mesmo m@'etodo para avaliar a integral definida,
enquanto @code{integrate} pode utilizar v@'arias heur@'isticas e pode reconhecer alguns casos especiais.

@end deffn

@c UMM, IS THERE SOME TEXT MISSING HERE ???
@c WHAT IS THIS ABOUT EXACTLY ??
@deffn {Fun@,{c}@~ao} potential (@var{givengradient})
O c@'alculo faz uso da vari@'avel global @code{potentialzeroloc[0]}
que deve ser @code{nonlist} ou da forma

@example
[indeterminatej=express@~aoj, indeterminatek=express@~aok, ...]
@end example

O
formador sendo equivalente para a express@~ao nonlist para todos os lados
direitos-manuseados mais tarde.  Os lados direitos indicados s@~ao usados como o
limite inferior de integra@,{c}@~ao.  O sucesso das integra@,{c}@~oes pode
depender de seus valores e de sua ordem. @code{potentialzeroloc} @'e inicialmente escolhido
para 0.

@end deffn

@c THIS ITEM IS A MESS BUT DON'T BOTHER TO FIX IT:
@c THE GAUSS-KRONROD FUNCTIONS (QUADPACK) MAKE THIS OBSOLETE
@deffn {Fun@,{c}@~ao} qq
O pacote @code{qq} (que pode ser carregado com @code{load ("qq")})
cont@'em uma fun@,{c}@~ao @code{quanc8} que pode pegar ou 3 ou 4 arguments. A
vers@~ao de 3 argumentos calcula a integral da fun@,{c}@~ao especificada como
primeiro argumento sobre o intervalo de lo a hi como em
@code{quanc8 ('fun@,{c}@~ao, lo, hi)}.
o nome da fun@,{c}@~ao pode receber ap@'ostrofo.  A vers@~ao de 4 argumentos calcular@'a
a integral da fun@,{c}@~ao ou express@~ao (primeiro argumento) em rela@,{c}@~ao
@`a vari@'avel (segundo argumento) no intervalo de @code{lo} a @code{hi} como em
@code{quanc8(<f(x) or express@~ao in x>, x, lo, hi)}.
O m@'etodo usado @'e o da quadratura dos currais de Newton,
e a rotina @'e adaptativa. Isso ir@'a dessa forma gastar tempo dividindo o
intervalo somente quando necess@'ario para completar as condi@,{c}@~oes de erro especificadas
pelas vari@'aveis @code{quanc8_relerr} (valor padr@~ao=1.0e-4) e
@code{quanc8_abserr} (valor padr@~ao=1.0e-8) que d@~ao o teste de erro
relativo:

@example
|integral(fun@,{c}@~ao) - valor calculado| < quanc8_relerr*|integral(fun@,{c}@~ao)|
@end example

e o teste de erro absoluto:

@example
|integral(fun@,{c}@~ao) - valor calculado| < quanc8_abserr
@end example

@code{printfile ("qq.usg")} yields additional informa@,{c}@~ao.

@end deffn

@deffn {Fun@,{c}@~ao} quanc8 (@var{expr}, @var{a}, @var{b})
Um integrador adaptativo.
Demonstra@,{c}@~ao e arquivos de utiliza@,{c}@~ao s@~ao fornecidos.  O m@'etodo @'e para
usar a regra da quadratura dos currais de Newton, da@'i o nome da fun@,{c}@~ao
@code{quanc8}, dispon@'ivel em vers@~oes de 3 ou 4 argumentos.  Verifica@,{c}@~ao de erro absoluto e 
erro relativo s@~ao usadas.  Para usar isso fa@,{c}a @code{load ("qq")}.  Veja tamb@'em @code{qq}.

@end deffn

@deffn {Fun@,{c}@~ao} residue (@var{expr}, @var{z}, @var{z_0})
Calcula o res@'iduo no plano complexo da
express@~ao @var{expr} quando a vari@'avel @var{z} assumes o valor @var{z_0}.  O
res@'iduo @'e o coeficiente de @code{(@var{z} - @var{z_0})^(-1)} nas s@'eries de Laurent
para @var{expr}.

@example
(%i1) residue (s/(s**2+a**2), s, a*%i);
                                1
(%o1)                           -
                                2
(%i2) residue (sin(a*x)/x**4, x, 0);
                                 3
                                a
(%o2)                         - --
                                6
@end example

@end deffn

@deffn {Fun@,{c}@~ao} risch (@var{expr}, @var{x})
Integra @var{expr} em rela@,{c}@~ao a @var{x} usando um
caso transcendental do algor@'itmo de Risch.  (O caso alg@'ebrico do
algor@'itmo de Risch foi implementado.)  Isso atualmente
manuseia os casos de exponenciais aninhadas e logar@'itmos que a parte
principal de @code{integrate} n@~ao pode fazer.  @code{integrate} ir@'a aplicar automaticamente @code{risch}
se dados esses casos.

@code{erfflag}, se @code{false}, previne @code{risch} da introdu@,{c}@~ao da fun@,{c}@~ao
@code{erf} na resposta se n@~ao for achado nenhum no integrando para 
come@,{c}ar.

@example
(%i1) risch (x^2*erf(x), x);
                                                        2
             3                      2                - x
        %pi x  erf(x) + (sqrt(%pi) x  + sqrt(%pi)) %e
(%o1)   -------------------------------------------------
                              3 %pi
(%i2) diff(%, x), ratsimp;
                             2
(%o2)                       x  erf(x)
@end example

@end deffn

@c NEEDS WORK BUT DON'T BOTHER TO CLEAN IT UP:
@c THE GAUSS-KRONROD FUNCTIONS (QUADPACK) MAKE THIS OBSOLETE
@deffn {Fun@,{c}@~ao} romberg (@var{expr}, @var{x}, @var{a}, @var{b})
@deffnx {Fun@,{c}@~ao} romberg (@var{expr}, @var{a}, @var{b})
Integra@,{c}@~ao de Romberg.
Existem dois caminhos para usar essa fun@,{c}@~ao.  O primeiro @'e um caminho
ineficiente como a vers@~ao de integral definida de @code{integrate}:
@code{romberg (<integrando>, <vari@'avel of integra@,{c}@~ao>, <lower limit>, <upper limit>)}.

Exemplos:

@example
(%i1) showtime: true$
(%i2) romberg (sin(y), y, 0, %pi);
Evalua@,{c}@~ao took 0.00 seconds (0.01 elapsed) using 25.293 KB.
(%o2)                   2.000000016288042
(%i3) 1/((x-1)^2+1/100) + 1/((x-2)^2+1/1000) + 1/((x-3)^2+1/200)$
(%i4) f(x) := ''%$
(%i5) rombergtol: 1e-6$
(%i6) rombergit: 15$
(%i7) romberg (f(x), x, -5, 5);
Evalua@,{c}@~ao took 11.97 seconds (12.21 elapsed) using 12.423 MB.
(%o7)                   173.6730736617464
@c INCLUDE THIS COMPARISON TO EXACT RESULT ??? YIELDS A LOT OF "RAT replaced" MESSAGES !!!
@c integrate (f(x), x, -5, 5) - %, numer;
@end example

O segundo @'e um caminho eficiente que @'e usado como segue:

@example
romberg (<fun@,{c}@~ao name>, <lower limit>, <upper limit>);
@end example

Continuando o exemplo acima, temos:
@example
(%i8) f(x) := (mode_declare ([fun@,{c}@~ao(f), x], float), ''(%th(5)))$
(%i9) translate(f);
(%o9)                          [f]
(%i10) romberg (f, -5, 5);
Evalua@,{c}@~ao took 3.51 seconds (3.86 elapsed) using 6.641 MB.
(%o10)                  173.6730736617464
@end example

O primeiro argumento deve ser uma fun@,{c}@~ao trauzida ou compilada.  (Se for
compilada isso deve ser declarado para retorno a @code{flonum}.)  Se o primeiro
argumento n@~ao for j@'a traduzido, @code{romberg} n@~ao tentar@'a
traduz@'i-lo mas resultar@'a um erro.

A precis@~ao da integra@,{c}@~ao @'e governada pelas vari@'aveis globais
@code{rombergtol} (valor padr@~ao 1.E-4) e @code{rombergit} (valor padr@~ao 11).
@code{romberg} retornar@'a um resultado se a diferen@,{c}a relativa em sucessivas
aproxima@,{c}@~oes for menor que @code{rombergtol}.  Isso tentar@'a dividir ao meio o
tamanho do passo @code{rombergit} vezes antes que isso seja abandonado.  O n@'umero de itera@,{c}@~oes
e avalia@,{c}@~oes da fun@,{c}@~ao que @code{romberg} far@'a @'e governado por
@code{rombergabs} e @code{rombergmin}.

@code{romberg} pode ser chamada recursivamente e dessa forma pode fazer integrais duplas e
triplas.

Exemplo:
@example
(%i1) assume (x > 0)$
(%i2) integrate (integrate (x*y/(x+y), y, 0, x/2), x, 1, 3)$
(%i3) radcan (%);
                    26 log(3) - 26 log(2) - 13
(%o3)             - --------------------------
                                3
(%i4) %,numer;
(%o4)                   .8193023963959073
(%i5) define_variable (x, 0.0, float, "Global vari@'avel in fun@,{c}@~ao F")$
(%i6) f(y) := (mode_declare (y, float), x*y/(x+y))$
(%i7) g(x) := romberg ('f, 0, x/2)$  
(%i8) romberg (g, 1, 3);
(%o8)                   .8193022864324522
@end example

A vantagem com esse caminho @'e que a fun@,{c}@~ao @code{f} pode ser usada para outros
prop@'ositos, como imprimir gr@'aficos. A desvantagem @'e que voc@^e tem que inventar
um nome para ambas a fun@,{c}@~ao @code{f} e sua vari@'avel independente @code{x}.
Ou, sem a vari@'avel global:

@example
(%i1) g_1(x) := (mode_declare (x, float), romberg (x*y/(x+y), y, 0, x/2))$
(%i2) romberg (g_1, 1, 3);
(%o2)                   .8193022864324522
@end example

A vantagem aqui @'e que o c@'odigo @'e menor.

@example
(%i3) q (a, b) := romberg (romberg (x*y/(x+y), y, 0, x/2), x, a, b)$
(%i4) q (1, 3);
(%o4)                   .8193022864324522
@end example

Isso @'e sempre o caminho mais curto, e as vari@'aveis n@~ao precisam ser declaradas
porque elas est@~ao no contexto de @code{romberg}.
O uso de @code{romberg} para integrais multiplas pode ter grandes desvantagens,
apesar disso.  O amontoado de c@'alculos extras necess@'arios por causa da
informa@,{c}@~ao geom@'etrica descartada durante o processo pela express@~ao de integrais multiplas por
esse caminho pode ser incr@'ivel.  O usu@'ario dever@'a ter certeza de entender e
usar os comutadores @code{rombergtol} e @code{rombergit}.

@end deffn

@defvr {Vari@'avel} rombergabs
Valor padr@~ao: 0.0

Assumindo que estimativas sucessivas
produzidas por @code{romberg} s@~ao @code{y[0]}, @code{y[1]}, @code{y[2]}, etc., ent@~ao @code{romberg}
retornar@'a ap@'os @code{n} itera@,{c}@~oes se (grasseiramente falando)

@example
 (abs(y[n]-y[n-1]) <= rombergabs ou
 abs(y[n]-y[n-1])/(if y[n]=0.0 then 1.0 else y[n]) <= rombergtol)
@end example

for @code{true}.  (A condi@,{c}@~ao sobre o n@'mero de itera@,{c}@~oes dadas por
@code{rombergmin} deve tamb@'em ser satisfeita.)
Dessa forma se @code{rombergabs} @'e 0.0 (o padr@~ao) voc@^e apenas pega o teste
de erro relativo.  A utilidade de uma vari@'avel adicional vem quando voc@^e
executar uma integral, quando a contribui@,{c}@~ao dominante vem
de uma pequena regi@~ao.  Ent@~ao voc@^e pode fazer a integral sobre uma pequena
regi@~ao dominante primeiro, usando a verifica@,{c}@~ao relativa de precis@~ao, seguida pela
integral sobre o restante da regi@~ao usando a verifica@,{c}@~ao absoluta
de erro.

Exemplo:  Suponha que voc@^e quer calcular

@example
'integrate (exp(-x), x, 0, 50)
@end example

(numericamente) com uma precis@~ao relativa de 1 parte em 10000000.
Defina a fun@,{c}@~ao.  @code{n} @'e o contador, ent@~ao n@'os podemos ver quantas
avalia@,{c}@~oes de fun@,{c}@~ao foram necess@'arias.
Primeiro de tudo tente fazer a integral completa de uma s@'o vez.

@example
(%i1) f(x) := (mode_declare (n, integer, x, float), n:n+1, exp(-x))$
(%i2) translate(f)$
Warning-> n @'e an undefined global variable.
(%i3) block ([rombergtol: 1.e-6, romberabs: 0.0], n:0, romberg (f, 0, 50));
(%o3)                   1.000000000488271
(%i4) n;
(%o4)                          257
@end example

Que aproximadamente precisou de 257 avalia@,{c}@~oes de fun@,{c}@~ao .
 Agora fa@,{c}a a integral inteligentemente, primeiro fazendo
     @code{'integrate (exp(-x), x, 0, 10)} e ent@~ao escolhendo @code{rombergabs} para 1.E-6 vezes (nessa
     integral parcial).
Isso aproximdamente pega somente 130 avalia@,{c}@~oes de fun@,{c}@~ao.

@example
(%i5) block ([rombergtol: 1.e-6, rombergabs:0.0, sum:0.0],
  n: 0, sum: romberg (f, 0, 10), rombergabs: sum*rombergtol, rombergtol:0.0,
      sum + romberg (f, 10, 50));
(%o5)                   1.000000001234793
(%i6) n;
(%o6)                          130
@end example

Ent@~ao se @code{f(x)} onde a fun@,{c}@~ao pegou um longo tempo de computa@,{c}@~ao, o
segundo m@'etodo fez a mesma tarefa 2 vezes mais r@'apido.

@end defvr

@defvr {Vari@'avel} rombergit
Valor padr@~ao: 11

A precis@~ao do comando @code{romberg} de
integra@,{c}@~ao @'e governada pelas vari@'aveis globais @code{rombergtol} e
@code{rombergit}.  @code{romberg} retornar@'a um resultado se a diferen@,{c}a
relativa em sucessivas approxima@,{c}@~oes @'e menor que @code{rombergtol}.  Isso
tentar@'a dividir ao meio o tamanho do passoe @code{rombergit} vezes antes disso ser abandonado.

@end defvr

@defvr {Vari@'avel} rombergmin
Valor padr@~ao: 0

@code{rombergmin} governa o n@'umero m@'inimo de avalia@,{c}@~oes de
fun@,{c}@~ao que @code{romberg} far@'a.  @code{romberg} avaliar@'a seu primeiro
argumento pelo menos @code{2^(rombergmin+2)+1} vezes.  Isso @'e @'util para
integrar fun@,{c}@~oes oscilat@'orias, onde o teste normal de converg@^encia pode
lgumas vezes inadequadamente passar.

@end defvr

@defvr {Vari@'avel} rombergtol
Valor padr@~ao: 1e-4

A precis@~ao do comando de integra@,{c}@~ao de @code{romberg} 
@'e governada pelas vari@'aveis globais @code{rombergtol} e
@code{rombergit}.  @code{romberg} retornar@'a um resultado se a difere@,{c}a
relativa em sucessivas aproxima@,{c}@~oes @'e menor que @code{rombergtol}.  Isso
tentar@'a dividir ao meio o tamanho do passo @code{rombergit} vezes antes disso ser abandonado.

@end defvr

@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@deffn {Fun@,{c}@~ao} tldefint (@var{expr}, @var{x}, @var{a}, @var{b})
Equivalente a @code{ldefint} com @code{tlimswitch} escolhido para @code{true}.

@end deffn

@c THERE ARE OPTIONAL ARGUMENTS WHICH MAKES LISTING THE VARIANTS A LITTLE TEDIOUS
@c NEED A MORE CONVENIENT (AND NONAMBIGUOUS) NOTATION FOR OPTIONAL ARGUMENTS
@deffn {Fun@,{c}@~ao} quad_qag (@var{f(x)}, @var{x}, @var{a}, @var{b}, @var{key}, @var{epsrel}, @var{limit})
Numericamente avalia a integral

@ifinfo
@math{integrate (f(x), x, a, b)}
@end ifinfo
@tex
$$\int_a^b {f(x) dx}$$
@end tex

usando um integrador adaptativo simples.

A fun@,{c}@~ao a ser integrada @'e @var{f(x)}, com vari@'avel
dependente @var{x}, e a fun@,{c}@~ao @'e para ser integrada entre os
limites @var{a} e @var{b}.  @var{key} @'e o integrador a ser usado
e pode ser um inteiro entre 1 e 6, inclusive.  O valor de
@var{key} seleciona a ordem da regra de integra@,{c}@~ao de Gauss-Kronrod.

A integra@,{c}@~ao num@'erica @'e conclu@'ida adaptativamente pela subdivis@~ao a
regi@~ao de integra@,{c}@~ao at@'e que a precis@~ao desejada for
completada.

Os argumentos opcionais @var{epsrel} e @var{limit} s@~ao o erro relativo
desejado e o n@'umero m@'aximo de subintervalos respectivamente.
@var{epsrel} padr@~ao em 1e-8 e @var{limit} @'e 200.

@code{quad_qag} retorna uma lista de quatro elementos:

@itemize
@item
uma aproxima@,{c}@~ao para a integral,
@item
o erro absoluto estimado da aproxima@,{c}@~ao, 
@item
o n@'umero de avalia@,{c}@~oes do integrando,
@item
um c@'odigo de erro.
@end itemize

O c@'odigo de erro (quarto elemento do valor de retorno) pode ter os valores:

@table @code
@item 0
se nenhum problema for encontrado; 
@item 1
se muitos subintervalos foram conclu@'idos;
@item 2
se erro excessivo @'e detectado;
@item 3
se ocorre comportamento extremamente ruim do integrando;
@item 6
se a entrada @'e inv@'alida.

@end table

@c NEED CROSS REFS HERE -- EITHER CROSS REF A QUADPACK OVERVIEW, OR CROSS REF EACH OF THE quad_* FUNCTIONS

Exemplos:

@example
(%i1) quad_qag (x^(1/2)*log(1/x), x, 0, 1, 3);
(%o1)    [.4444444444492108, 3.1700968502883E-9, 961, 0]
(%i2) integrate (x^(1/2)*log(1/x), x, 0, 1);
                                4
(%o2)                           -
                                9
@end example
@end deffn

@c THERE ARE OPTIONAL ARGUMENTS WHICH MAKES LISTING THE VARIANTS A LITTLE TEDIOUS
@c NEED A MORE CONVENIENT (AND NONAMBIGUOUS) NOTATION FOR OPTIONAL ARGUMENTS
@deffn {Fun@,{c}@~ao} quad_qags (@var{f(x)}, @var{x}, @var{a}, @var{b}, @var{epsrel}, @var{limit})

Integra numericamente a fun@,{c}@~ao dada usando quadratura adaptativa com
extrapola@,{c}@~ao.  A fun@,{c}@~ao a ser integrated @'e @var{f(x)}, com
vari@'avel dependente @var{x}, e a fun@,{c}@~ao @'e para ser integrada
entre os limites @var{a} e @var{b}.

Os argumentos opcionais @var{epsrel} e @var{limit} s@~ao o erro relativo
desejado e o n@'umero m@'aximo de subintervalos, respectivamente.
@var{epsrel} padr@~ao em 1e-8 e @var{limit} @'e 200.

@code{quad_qags} retorna uma lista de quatro elementos:

@itemize
@item
uma aproxima@,{c}@~ao para a integral,
@item
o erro absoluto estimado da aproxima@,{c}@~ao, 
@item
o n@'umero de avalia@,{c}@~oes do integrando,
@item
um c@'odigo de erro.
@end itemize

O c@'odigo de erro (quarto elemento do valor de retorno) pode ter os valores:

@table @code
@item 0
nenhum problema foi encontrado; 
@item 1
muitos subintervalos foram conclu@'idos;
@item 2
erro excessivo @'e detectado;
@item 3
ocorreu comportamento excessivamente ruim do integrando;
@item 4
falhou para converg@^encia
@item 5
integral @'e provavelmente divergente ou lentamente convergente
@item 6
se a entrada @'e inv@'alida.
@end table

@c NEED CROSS REFS HERE -- EITHER CROSS REF A QUADPACK OVERVIEW, OR CROSS REF EACH OF THE quad_* FUNCTIONS

Exemplos:

@example
(%i1) quad_qags (x^(1/2)*log(1/x), x, 0 ,1);
(%o1)   [.4444444444444448, 1.11022302462516E-15, 315, 0]
@end example

Note que @code{quad_qags} @'e mais preciso e eficiente que @code{quad_qag} para esse integrando.

@end deffn

@c THERE ARE OPTIONAL ARGUMENTS WHICH MAKES LISTING THE VARIANTS A LITTLE TEDIOUS
@c NEED A MORE CONVENIENT (AND NONAMBIGUOUS) NOTATION FOR OPTIONAL ARGUMENTS
@deffn {Fun@,{c}@~ao} quad_qagi (@var{f(x)}, @var{x}, @var{a}, @var{inftype}, @var{epsrel}, @var{limit})

Avalia numericamente uma das seguintes integrais

@ifinfo
@math{integrate (f(x), x, a, inf)}
@end ifinfo
@tex
$$\int_a^\infty {f(x) dx}$$
@end tex

@ifinfo
@math{integrate (f(x), x, minf, a)}
@end ifinfo
@tex
$$\int_\infty^a {f(x) dx}$$
@end tex

@ifinfo
@math{integrate (f(x), x, a, minf, inf)}
@end ifinfo
@tex
$$\int_\infty^\infty {f(x) dx}$$
@end tex

usando a rotina Quadpack QAGI.  A fun@,{c}@~ao a ser integrada @'e
@var{f(x)}, com vari@'avel dependente @var{x}, e a fun@,{c}@~ao @'e para
ser integrada sobre um intervalo infinito.

O par@^ametro @var{inftype} determina o intervalo de integra@,{c}@~ao como segue:

@table @code
@item inf
O intervalo vai de @var{a} ao infinito positivo.
@item minf
O intervalo vai do infinito negativo at@'e @var{a}.
@item both
O intervalo corresponde a toda reta real.
@end table

Os argumentos opcionais @var{epsrel} e @var{limit} s@~ao o erro relativo
desejado e o n@'umero maximo de subintervalos, respectivamente.
@var{epsrel} padr@~ao para 1e-8 e @var{limit} @'e 200.

@code{quad_qagi} retorna uma lista de quatro elementos:

@itemize
@item
uma aproxima@,{c}@~ao para a integral,
@item
o erro absoluto estimado da aproxima@,{c}@~ao, 
@item
o n@'umero de avalia@,{c}@~oes do integrando,
@item
um c@'odigo de erro.
@end itemize

O c@'odigo de erro (quarto elemento do valor de retorno) pode ter os valores:

@table @code
@item 0
nenhum problema foi encontrado; 
@item 1
muitos subintervalos foram conclu@'idos;
@item 2
erro excessivo @'e detectado;
@item 3
ocorreu comportamento excessivamente ruim do integrando;
@item 4
falhou para converg@^encia;
@item 5
integral @'e provavelmente divergente ou lentamente convergente;
@item 6
se a entrada for inv@'alida.

@end table

@c NEED CROSS REFS HERE -- EITHER CROSS REF A QUADPACK OVERVIEW, OR CROSS REF EACH OF THE quad_* FUNCTIONS

Exemplos:

@example
(%i1) quad_qagi (x^2*exp(-4*x), x, 0, inf);
(%o1)        [0.03125, 2.95916102995002E-11, 105, 0]
(%i2) integrate (x^2*exp(-4*x), x, 0, inf);
                               1
(%o2)                          --
                               32
@end example

@end deffn

@c THERE ARE OPTIONAL ARGUMENTS WHICH MAKES LISTING THE VARIANTS A LITTLE TEDIOUS
@c NEED A MORE CONVENIENT (AND NONAMBIGUOUS) NOTATION FOR OPTIONAL ARGUMENTS
@deffn {Fun@,{c}@~ao} quad_qawc (@var{f(x)}, @var{x}, @var{c}, @var{a}, @var{b}, @var{epsrel}, @var{limit})

Calcula numericamente o valor principal de Cauchy de

@ifinfo
@math{integrate (f(x)/(x - c), x, a, b)}
@end ifinfo
@tex
$$\int_{a}^{b}{{{f\left(x\right)}\over{x-c}}\>dx}$$
@end tex

usando a rotina Quadpack QAWC.  A fun@,{c}@~ao a ser integrada @'e
@code{@var{f(x)}/(@var{x} - @var{c})}, com vari@'avel dependente @var{x}, e a fun@,{c}@~ao
@'e para ser integrada sobre o intervalo que vai de @var{a} at@'e @var{b}.

Os argumentos opcionais @var{epsrel} e @var{limit} s@~ao o erro relativo
desejado e o m@'aximo n@'umero de subintervalos, respectivamente.
@var{epsrel} padr@~ao para 1e-8 e @var{limit} @'e 200.

@code{quad_qawc} retorna uma lista de quatro elementos:

@itemize
@item
uma aproxima@,{c}@~ao para a integral,
@item
o erro absoluto estimado da aproxima@,{c}@~ao, 
@item
o n@'umero de avalia@,{c}@~oes do integrando,
@item
um c@'odigo de erro.
@end itemize

O c@'odigo de erro (quarto elemento do valoor de retorno) pode ter os valores:

@table @code
@item 0
nenhum problema foi encontrado; 
@item 1
muitos subintervalos foram conclu@'idos;
@item 2
erro excessivo @'e detectado;
@item 3
ocorreu comportamento excessivamente ruim do integrando;
@item 6
se a entrada @'e inv@'alida.

@end table

Exemplos:

@example
(%i1) quad_qawc (2^(-5)*((x-1)^2+4^(-5))^(-1), x, 2, 0, 5);
(%o1)    [- 3.130120337415925, 1.306830140249558E-8, 495, 0]
(%i2) integrate (2^(-alpha)*(((x-1)^2 + 4^(-alpha))*(x-2))^(-1), x, 0, 5);
Principal Value
                       alpha
        alpha       9 4                 9
       4      log(------------- + -------------)
                      alpha           alpha
                  64 4      + 4   64 4      + 4
(%o2) (-----------------------------------------
                        alpha
                     2 4      + 2

         3 alpha                       3 alpha
         -------                       -------
            2            alpha/2          2          alpha/2
      2 4        atan(4 4       )   2 4        atan(4       )   alpha
    - --------------------------- - -------------------------)/2
                alpha                        alpha
             2 4      + 2                 2 4      + 2
(%i3) ev (%, alpha=5, numer);
(%o3)                    - 3.130120337415917
@end example

@end deffn

@c THERE ARE OPTIONAL ARGUMENTS WHICH MAKES LISTING THE VARIANTS A LITTLE TEDIOUS
@c NEED A MORE CONVENIENT (AND NONAMBIGUOUS) NOTATION FOR OPTIONAL ARGUMENTS
@deffn {Fun@,{c}@~ao} quad_qawf (@var{f(x)}, @var{x}, @var{a}, @var{omega}, @var{trig}, @var{epsabs}, @var{limit}, @var{maxp1}, @var{limlst})

Calcula numericamente a integral tipo Fourier usando a rotina
Quadpack QAWF.  A integral @'e

@ifinfo
@math{integrate (f(x)*w(x), x, a, inf)}
@end ifinfo
@tex
$$\int_a^\infty f(x) w(x) dx$$
@end tex

A fun@,{c}@~ao peso @math{w} @'e selecionada por @var{trig}:

@table @code
@item cos
@math{w(x) = cos (omega x)}
@item cos
@math{w(x) = sin (omega x)}
@end table

Os argumentos opcionais s@~ao:

@table @var
@item epsabs
Erro absoluto de aproxima@,{c}@~ao desejado.  Padr@~ao @'e 1d-10.
@item limit
Tamanho de array interno de trabalho.  (@var{limit} - @var{limlst})/2 @'e o
maximo n@'umero de subintervalos para usar.  O Padr@~ao @'e 200.
@item maxp1
O n@'umero m@'aximo dos momentos de Chebyshev.  Deve ser maior que 0.  O padr@~ao
@'e 100.
@item limlst
Limite superior sobre n@'umero de ciclos.  Deve ser maior ou igual a
3. O padr@~ao @'e 10.
@end table

@c MERGE THESE LINES INTO PRECEDING TABLE
@var{epsabs} e @var{limit} s@~ao o erro relativo
desejado e o n@'umero maximo de subintervalos, respectivamente.
@var{epsrel} padr@~ao para 1e-8 e @var{limit} @'e 200.

@code{quad_qawf} retorna uma lista de quatro elementos:

@itemize
@item
uma aproxima@,{c}@~ao para a integral,
@item
o erro absoluto estimado da aproxima@,{c}@~ao, 
@item
o n@'umero de avalia@,{c}@~oes do integrando,
@item
um c@'odigo de erro.
@end itemize

O c@'odigo de erro (quarto elemento do valor de retorno) pode ter os valores:

@table @code
@item 0
nenhum problema foi encontrado; 
@item 1
muitos subintervalos foram conclu@'idos;
@item 2
erro excessivo @'e detectado;
@item 3
ocorreu um comportamento excessivamente ruim do integrando;
@item 6
se a entrada @'e invalida.

@end table

Exemplos:

@example
(%i1) quad_qawf (exp(-x^2), x, 0, 1, 'cos);
(%o1)   [.6901942235215714, 2.84846300257552E-11, 215, 0]
(%i2) integrate (exp(-x^2)*cos(x), x, 0, inf);
                          - 1/4
                        %e      sqrt(%pi)
(%o2)                   -----------------
                                2
(%i3) ev (%, numer);
(%o3)                   .6901942235215714
@end example

@end deffn

@c THERE ARE OPTIONAL ARGUMENTS WHICH MAKES LISTING THE VARIANTS A LITTLE TEDIOUS
@c NEED A MORE CONVENIENT (AND NONAMBIGUOUS) NOTATION FOR OPTIONAL ARGUMENTS
@deffn {Fun@,{c}@~ao} quad_qawo (@var{f(x)}, @var{x}, @var{a}, @var{b}, @var{omega}, @var{trig}, @var{epsabs}, @var{limit}, @var{maxp1}, @var{limlst})

Calcula numericamente a integral usando a rotina
Quadpack QAWO:

@ifinfo
@math{integrate (f(x)*w(x), x, a, b)}
@end ifinfo
@tex
$$\int_a^b f(x) w(x) dx$$
@end tex

A fun@,{c}@~ao peso @math{w} @'e selecionada por @var{trig}:

@table @code
@item cos
@math{w(x) = cos (omega x)}
@item sin
@math{w(x) = sin (omega x)}
@end table

Os argumentos opcionais s@~ao:

@table @var
@item epsabs
Erro absoluto desejado de aproxima@,{c}@~ao.  O Padr@~ao @'e 1d-10.
@item limit
Tamanho do array interno de trabalho.  (@var{limit} - @var{limlst})/2 @'e o
n@'umero m@'aximo de subintervalos a serem usados.  Default @'e 200.
@item maxp1
N@'umero m@'aximo dos momentos de Chebyshev.  Deve ser maior que 0.  O padr@~ao
@'e 100.
@item limlst
Limite superior sobre o n@'umero de ciclos.  Deve ser maior que ou igual a
3.  O padr@~ao @'e 10.
@end table

@c MERGE THESE LINES INTO PRECEDING TABLE
@var{epsabs} e @var{limit} s@~ao o erro relativo
desejado e o n@'umero m@'aximo de subintervalos, respectivamente.
@var{epsrel} o padr@~ao @'e 1e-8 e @var{limit} @'e 200.

@code{quad_qawo} retorna uma lista de quatro elementos:

@itemize
@item
uma aproxima@,{c}@~ao para a integral,
@item
o erro absoluto estimado da aproxima@,{c}@~ao, 
@item
o n@'umero de avalia@,{c}@~oes do integrando,
@item
um c@'odigo de erro.
@end itemize

O c@'odigo de erro (quarto elemento do valor de retorno) pode ter os valores:

@table @code
@item 0
nenhum problema foi encontrado; 
@item 1
muitos subintervalos foram conclu@'idos;
@item 2
erro excessivo @'e detectado;
@item 3
comportamento extremamente ruim do integrando;
@item 6
se a entrada @'e inv@'alida.

@end table

Exemplos:

@example
(%i1) quad_qawo (x^(-1/2)*exp(-2^(-2)*x), x, 1d-8, 20*2^2, 1, cos);
(%o1)     [1.376043389877692, 4.72710759424899E-11, 765, 0]
(%i2) rectform (integrate (x^(-1/2)*exp(-2^(-alpha)*x) * cos(x), x, 0, inf));
                   alpha/2 - 1/2            2 alpha
        sqrt(%pi) 2              sqrt(sqrt(2        + 1) + 1)
(%o2)   -----------------------------------------------------
                               2 alpha
                         sqrt(2        + 1)
(%i3) ev (%, alpha=2, numer);
(%o3)                     1.376043390090716
@end example

@end deffn

@c THERE ARE OPTIONAL ARGUMENTS WHICH MAKES LISTING THE VARIANTS A LITTLE TEDIOUS
@c NEED A MORE CONVENIENT (AND NONAMBIGUOUS) NOTATION FOR OPTIONAL ARGUMENTS
@deffn {Fun@,{c}@~ao} quad_qaws (@var{f(x)}, @var{x}, @var{a}, @var{b}, @var{alfa}, @var{beta}, @var{wfun}, @var{epsabs}, @var{limit})

Num@'ericamente calcula a integral usando a rotina 
Quadpack QAWS:

@ifinfo
@math{integrate (f(x)*w(x), x, a, b)}
@end ifinfo
@tex
$$\int_a^b f(x) w(x) dx$$
@end tex

A fun@,{c}@~ao peso @math{w} @'e selecionada por @var{wfun}:

@table @code
@item 1
@math{w(x) = (x - a)^alfa (b - x)^beta}
@item 2
@math{w(x) = (x - a)^alfa (b - x)^beta log(x - a)}
@item 3
@math{w(x) = (x - a)^alfa (b - x)^beta log(b - x)}
@item 2
@math{w(x) = (x - a)^alfa (b - x)^beta log(x - a) log(b - x)}
@end table

O argumentos opcionais s@~ao:

@table @var
@item epsabs
Erro absoluto desejado de aproxima@{c}@~ao.  O padr@~ao @'e 1d-10.
@item limit
Tamanho do array interno de trabalho.  (@var{limit} - @var{limlst})/2 @'e o
n@'umero m@'aximo de subintervalos para usar.  o padr@~ao @'e 200.
@end table

@c MERGE THESE LINES INTO PRECEDING TABLE
@var{epsabs} e @var{limit} s@~ao o erro relativo
desejado e o n@'umero m@'aximo de subintervalos, respectivamente.
@var{epsrel} o padr@~ao @'e 1e-8 e @var{limit} @'e 200.

@code{quad_qaws} retorna uma lista de quatro elementos:

@itemize
@item
uma aproxima@,{c}@~ao para a integral,
@item
o erro absoluto estimado da aproxima@,{c}@~ao, 
@item
o n@'umero de avalia@,{c}@~oes do integrando,
@item
um c@'odigo de erro.
@end itemize

O c@'odigo de erro (quarto elemento do valor de retorno) pode ter os valores:

@table @code
@item 0
nenhum problema foi encontrado; 
@item 1
muitos subintervalos foram conclu@'idos;
@item 2
erro excessivo @'e detectado;
@item 3
ocorreu um comportamento excessivamente ruim do integrando;
@item 6
se a entrada @'e invalida.

@end table

Exemplos:

@example
(%i1) quad_qaws (1/(x+1+2^(-4)), x, -1, 1, -0.5, -0.5, 1);
(%o1)     [8.750097361672832, 1.24321522715422E-10, 170, 0]
(%i2) integrate ((1-x*x)^(-1/2)/(x+1+2^(-alpha)), x, -1, 1);
       alpha
Is  4 2      - 1  positive, negative, or zero?

pos;
                          alpha         alpha
                   2 %pi 2      sqrt(2 2      + 1)
(%o2)              -------------------------------
                               alpha
                            4 2      + 2
(%i3) ev (%, alpha=4, numer);
(%o3)                     8.750097361672829
@end example

@end deffn

