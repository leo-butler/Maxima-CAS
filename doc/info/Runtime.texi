@menu
* Introduction for Runtime Environment::  
* INTERRUPTS::                  
* Definitions for Runtime Environment::  
@end menu


@node Introduction for Runtime Environment, INTERRUPTS, Runtime Environment, Runtime Environment
@section Introduction for Runtime Environment
 - A file which is loaded automatically for you when you start up
a MACSYMA, to customize MACSYMA for you.  It is possible to have an
init file written as a BATCH file of macsyma commands.  We hope this
makes it easier for users to customize their macsyma environment.
Here is an example init file
@example
        /*-*-macsyma-*-*/ 
        setup_autoload("share\;bessel",j0,j1,jn);
        showtime:all; comgrind:true;
@end example
The strange looking comment at the top of the file "/*-*-macsyma-*-*/"
tells that it is a macsyma-language file. 
Also: "SETUP_AUTOLOAD" can be used to make functions in BATCH files
autoloading, meaning that you can then use (for instance, here) the
functions J0, J1 and Jn from the BESSEL package directly because when
you use the function the BESSEL package will be loaded in for you
automatically.  If the second file name in the argument to
SETUP_AUTOLOAD is not specified (the preferred usage) then the
standard search for second file names of "FASL", "TRLISP", and ">" is
done.

@node INTERRUPTS, Definitions for Runtime Environment, Introduction for Runtime Environment, Runtime Environment
@section INTERRUPTS

 - There are several ways the user can interrupt a MACSYMA computation,
usually with a control character.  Do DESCRIBE(CHARACTERS); for details.
MACSYMA will also be interrupted if ^Z (control-Z) is typed, as this
will exit back to Unix shell level Usually Control-C interrupts the
computation putting you in a break loop.  Typing :t should give you top
level maxima back again.


@c end concepts Runtime Environment
@node Definitions for Runtime Environment,  , INTERRUPTS, Runtime Environment
@section Definitions for Runtime Environment
@c @node CLEARSCREEN
@c @unnumberedsec phony
@defun CLEARSCREEN ()
Clears the screen.  The same as typing control-L.

@end defun
@c @node declaration
@c @unnumberedsec phony
@defvr declaration FEATURE
Maxima understands two distinct types of features,
system features and features which apply to mathematical expressions.
See STATUS for information about system features.
See FEATURES and FEATUREP for information about mathematical features.

FEATURE itself is not the name of a function or variable.

@end defvr
@c @node FEATUREP
@c @unnumberedsec phony
@defun FEATUREP (a,f)
attempts to determine whether the object a has the
feature f on the basis of the facts in the current data base.  If so,
it returns TRUE, else FALSE.  See DESCRIBE(FEATURES); .
@example
(%i1) DECLARE(J,EVEN)$
(%i2) FEATUREP(J,INTEGER);
(%o2)                                TRUE


@end example
@end defun
@c @node ROOM
@c @unnumberedsec phony
@defun ROOM ()
@defunx ROOM (TRUE)
@defunx ROOM (FALSE)
Prints out a description of the state of storage and
stack management in Maxima. ROOM calls the Lisp function of 
the same name.

@itemize @bullet
@item
ROOM () prints out a moderate description.
@item
ROOM (TRUE) prints out a verbose description.
@item
ROOM (FALSE) prints out a terse description.
@end itemize

@end defun
@c @node STATUS
@c @unnumberedsec phony
@defun STATUS (FEATURE)
@defunx STATUS (FEATURE, putative_feature)
@defunx STATUS (STATUS)
Returns information about the presence or absence of certain
system-dependent features.
@itemize @bullet
@item
STATUS (FEATURE) returns a list of system features.
These include Lisp version, operating system type, etc.
The list may vary from one Lisp type to another.
@item STATUS (FEATURE, putative_feature) returns TRUE if putative_feature
is on the list of items returned by STATUS (FEATURE) and FALSE otherwise.
A feature whose name contains a special character, such as a hyphen,
must be given as a string argument. For example,
@example
STATUS (FEATURE, "ANSI-CL");
@end example
@item
STATUS (STATUS) returns a two-element list [FEATURE, STATUS].
FEATURE and STATUS are the two arguments accepted by the STATUS function;
it is unclear if this list has additional significance.
@end itemize

The variable FEATURES contains a list of features which apply to 
mathematical expressions. See FEATURES and FEATUREP for more information.

@end defun
@c @node TIME
@c @unnumberedsec phony
@defun TIME (%o1, %o2, %o3, ...)
Returns a list of the times, in seconds, taken to compute the output
lines %o1, %o2, %o3, .... The time returned is Maxima's estimate of
the internal computation time, not the elapsed time. TIME can only
be applied to output line variables; for any other variables, TIME
returns UNKNOWN.

Set SHOWTIME:TRUE$ to make Maxima print out the computation time 
and elapsed time with each output line.

@end defun
