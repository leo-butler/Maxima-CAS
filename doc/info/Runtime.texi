@menu
* Introduction for Runtime Environment::  
* INTERRUPTS::                  
* Definitions for Runtime Environment::  
@end menu


@node Introduction for Runtime Environment, INTERRUPTS, Runtime Environment, Runtime Environment
@section Introduction for Runtime Environment
 - A file which is loaded automatically for you when you start up
a MACSYMA, to customize MACSYMA for you.  It is possible to have an
init file written as a BATCH file of macsyma commands.  We hope this
makes it easier for users to customize their macsyma environment.
Here is an example init file
@example
        /*-*-macsyma-*-*/ 
        setup_autoload("share\;bessel",j0,j1,jn);
        showtime:all; comgrind:true;
@end example
The strange looking comment at the top of the file "/*-*-macsyma-*-*/"
tells that it is a macsyma-language file. 
Also: "SETUP_AUTOLOAD" can be used to make functions in BATCH files
autoloading, meaning that you can then use (for instance, here) the
functions J0, J1 and Jn from the BESSEL package directly because when
you use the function the BESSEL package will be loaded in for you
automatically.  If the second file name in the argument to
SETUP_AUTOLOAD is not specified (the preferred usage) then the
standard search for second file names of "FASL", "TRLISP", and ">" is
done.

@node INTERRUPTS, Definitions for Runtime Environment, Introduction for Runtime Environment, Runtime Environment
@section INTERRUPTS

 - There are several ways the user can interrupt a MACSYMA computation,
usually with a control character.  Do DESCRIBE(CHARACTERS); for details.
MACSYMA will also be interrupted if ^Z (control-Z) is typed, as this
will exit back to Unix shell level Usually Control-C interrupts the
computation putting you in a break loop.  Typing :t should give you top
level maxima back again.


@c end concepts Runtime Environment
@node Definitions for Runtime Environment,  , INTERRUPTS, Runtime Environment
@section Definitions for Runtime Environment
@c @node CLEARSCREEN
@c @unnumberedsec phony
@defun CLEARSCREEN ()
Clears the screen.  The same as typing control-L.

@end defun
@c @node CONTINUE
@c @unnumberedsec phony
@defun CONTINUE
 - Control-^ typed while in MACSYMA causes LISP to be
entered.  The user can now type any LISP S-expression and have it
evaluated.  Typing (CONTINUE) or ^G (control-G) causes MACSYMA to be
re-entered.

@end defun
@c @node declaration
@c @unnumberedsec phony
@defvr declaration FEATURE
 - A nice adjunct to the system.  STATUS(FEATURE) gives you a
list of system features. At present the list for MC is: MACSYMA,
NOLDMSG, MACLISP, PDP10, BIGNUM, FASLOAD, HUNK, FUNARG, ROMAN, NEWIO,
SFA, PAGING, MC, and ITS.  Any of these "features" may be given as a
second argument to STATUS(FEATURE,...); If the specified feature
exists, TRUE will be returned, else FALSE.  Note: these are system
features, and not really "user related".  See also DESCRIBE(features);
for more user-oriented features.

@end defvr
@c @node FEATUREP
@c @unnumberedsec phony
@defun FEATUREP (a,f)
attempts to determine whether the object a has the
feature f on the basis of the facts in the current data base.  If so,
it returns TRUE, else FALSE.  See DESCRIBE(FEATURES); .
@example
(%i1) DECLARE(J,EVEN)$
(%i2) FEATUREP(J,INTEGER);
(%o2)                                TRUE


@end example
@end defun
@c @node ROOM
@c @unnumberedsec phony
@defun ROOM ()
types out a verbose description of the state of storage and
stack management in the Macsyma.  This simply utilizes the Lisp
ROOM function.
ROOM(FALSE) - types out a very terse description, containing most of
the same information.

@end defun
@c @node STATUS
@c @unnumberedsec phony
@defun STATUS (arg)
will return miscellaneous status information about the
user's MACSYMA depending upon the arg given.  Permissible arguments
and results are as follows:
@itemize @bullet
@item
TIME - the time used so far in the computation.
@item
DAY - the day of the week.
@item
DATE - a list of the year, month, and day.
@item
DAYTIME - a list of the hour, minute, and second.
@item
RUNTIME - accumulated cpu time times the atom "MILLISECONDS" in the current
   MACSYMA.  
@item
REALTIME - the real time (in sec) elapsed since the user started up
   his MACSYMA.
@item
GCTIME - the garbage collection time used so far in the current
   computation.
@item
TOTALGCTIME - gives the total garbage collection time used in MACSYMA
   so far.
@item
FREECORE - the number of blocks of core your MACSYMA can expand
   before it runs out of address space.  (A block is 1024 words.)
   Subtracting that value from 250*BLOCKS (the maximum you can get on MC)
   tells you how many blocks of core your MACSYMA is using up.  (A
   MACSYMA with no "fix" file starts at approx. 191 blocks.)
@item
FEATURE - gives you a list of system features. At present the list for
   MC is: MACSYMA, NOLDMSG, MACLISP, PDP10, BIGNUM, FASLOAD, HUNK,
   FUNARG, ROMAN, NEWIO, SFA, PAGING, MC, and ITS.  Any of these
   "features" may be given as a second argument to STATUS(FEATURE,...);
   If the specified feature exists, TRUE will be returned, else FALSE.
   Note: these are system features, and not really "user related".
@end itemize
For information about your files, see the FILEDEFAULTS(); command.

@end defun
@c @node TIME
@c @unnumberedsec phony
@defun TIME (%o1, %o2, %o3, ...)
Returns a list of the times, in seconds, taken to compute the output
lines %o1, %o2, %o3, .... The time returned is Maxima's estimate of
the internal computation time, not the elapsed time. TIME can only
be applied to output line variables; for any other variables, TIME
returns UNKNOWN.

Set SHOWTIME:TRUE$ to make Maxima print out the computation time 
and elapsed time with each output line.

@end defun
