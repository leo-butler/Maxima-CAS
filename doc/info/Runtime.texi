@menu
* Introduction for Runtime Environment::  
* INTERRUPTS::                  
* Definitions for Runtime Environment::  
@end menu


@node Introduction for Runtime Environment, INTERRUPTS, Runtime Environment, Runtime Environment
@section Introduction for Runtime Environment
@c THIS DISCUSSION OF maxima-init.mac REPLACES AN EARLIER WRITE-UP. !!!
@c HOWEVER IT SEEMS THAT THIS TEXT REALLY WANTS TO BE UNDER A DIFFERENT HEADING. !!!
@code{maxima-init.mac} is a file which is loaded automatically when Maxima starts.
You can use @code{maxima-init.mac} to customize your Maxima environment.
@code{maxima-init.mac}, if it exists, is typically placed in the
directory named by @code{:lisp (default-userdir)},
although it can be in any directory searched by the function FILE_SEARCH.

Here is an example @code{maxima-init.mac} file:

@example
setup_autoload ("specfun.mac", ultraspherical, assoc_legendre_p);
showtime:all;
@end example
In this example, SETUP_AUTOLOAD tells Maxima to load the
specified file
(@code{specfun.mac}) if any of the functions (@code{ultraspherical},
@code{assoc_legendre_p}) are called but not yet defined.
Thus you needn't remember to load the file before calling the functions.

The statement SHOWTIME:ALL tells Maxima to set the SHOWTIME variable.
The @code{maxima-init.mac} file can contain any other assignments or
other Maxima statements.

@node INTERRUPTS, Definitions for Runtime Environment, Introduction for Runtime Environment, Runtime Environment
@section INTERRUPTS

The user can stop a time-consuming computation with the
^C (control-C) character.
The default action is to stop the computation
and print another user prompt.
In this case, it is not possible to restart a stopped computation.

If the variable @code{*debugger-hook*} is set to NIL, by executing

@example
:lisp (setq *debugger-hook* nil)
@end example

@noindent
then upon receiving ^C, Maxima will enter the Lisp debugger,
and the user may use the debugger to inspect the Lisp environment.
The stopped computation can be restarted by entering
@code{continue} in the Lisp debugger.
The means of returning to Maxima from the Lisp debugger
(other than running the computation to completion)
is different for each version of Lisp.

On Unix systems, the character ^Z (control-Z) causes Maxima
to stop altogether, and control is returned to the shell prompt.
The @code{fg} command causes Maxima
to resume from the point at which it was stopped.

@c end concepts Runtime Environment
@node Definitions for Runtime Environment,  , INTERRUPTS, Runtime Environment
@section Definitions for Runtime Environment
@c @node CLEARSCREEN
@c @unnumberedsec phony
@defun CLEARSCREEN ()
This function has no effect aside from printing a diagnostic message.
On some systems, typing ^L (control-L) will clear the screen.

@end defun
@c @node declaration
@c @unnumberedsec phony
@defvr declaration FEATURE
Maxima understands two distinct types of features,
system features and features which apply to mathematical expressions.
See STATUS for information about system features.
See FEATURES and FEATUREP for information about mathematical features.

FEATURE itself is not the name of a function or variable.

@end defvr
@c @node FEATUREP
@c @unnumberedsec phony
@defun FEATUREP (a,f)
attempts to determine whether the object a has the
feature f on the basis of the facts in the current data base.  If so,
it returns TRUE, else FALSE.  See DESCRIBE(FEATURES); .
@example
(%i1) DECLARE(J,EVEN)$
(%i2) FEATUREP(J,INTEGER);
(%o2)                                TRUE


@end example
@end defun
@c @node ROOM
@c @unnumberedsec phony
@defun ROOM ()
@defunx ROOM (TRUE)
@defunx ROOM (FALSE)
Prints out a description of the state of storage and
stack management in Maxima. ROOM calls the Lisp function of 
the same name.

@itemize @bullet
@item
ROOM () prints out a moderate description.
@item
ROOM (TRUE) prints out a verbose description.
@item
ROOM (FALSE) prints out a terse description.
@end itemize

@end defun
@c @node STATUS
@c @unnumberedsec phony
@defun STATUS (FEATURE)
@defunx STATUS (FEATURE, putative_feature)
@defunx STATUS (STATUS)
Returns information about the presence or absence of certain
system-dependent features.
@itemize @bullet
@item
STATUS (FEATURE) returns a list of system features.
These include Lisp version, operating system type, etc.
The list may vary from one Lisp type to another.
@item STATUS (FEATURE, putative_feature) returns TRUE if putative_feature
is on the list of items returned by STATUS (FEATURE) and FALSE otherwise.
A feature whose name contains a special character, such as a hyphen,
must be given as a string argument. For example,
@example
STATUS (FEATURE, "ANSI-CL");
@end example
@item
STATUS (STATUS) returns a two-element list [FEATURE, STATUS].
FEATURE and STATUS are the two arguments accepted by the STATUS function;
it is unclear if this list has additional significance.
@end itemize

The variable FEATURES contains a list of features which apply to 
mathematical expressions. See FEATURES and FEATUREP for more information.

@end defun
@c @node TIME
@c @unnumberedsec phony
@defun TIME (%o1, %o2, %o3, ...)
Returns a list of the times, in seconds, taken to compute the output
lines %o1, %o2, %o3, .... The time returned is Maxima's estimate of
the internal computation time, not the elapsed time. TIME can only
be applied to output line variables; for any other variables, TIME
returns UNKNOWN.

Set SHOWTIME:TRUE$ to make Maxima print out the computation time 
and elapsed time with each output line.

@end defun
