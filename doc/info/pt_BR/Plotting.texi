@c Language: Brazilian Portuguese, Encoding: iso-8859-1
@c /Plotting.texi/1.31/Sun Jan  7 05:49:41 2007/-ko/
@menu
* Defini@value{cedilha}@~oes para Montagem de Gr@'aficos::    
@end menu

@node Defini@value{cedilha}@~oes para Montagem de Gr@'aficos,  , Montando Gr@'aficos, Montando Gr@'aficos
@section Defini@value{cedilha}@~oes para Montagem de Gr@'aficos

@c INSPECTING src/plot.lisp AND TRYING SOME EXAMPLES,
@c IT APPEARS THAT in_netmath HAS NO EFFECT ON plot2d
@c AND ONLY EFFECT ON plot3d IS TO CAUSE OPENMATH OUTPUT TO BE WRITTEN TO CONSOLE
@c WHEN [plot_format, openmath] IS SET.
@c NOT CONVINCED WE REALLY WANT TO DOCUMENT THIS VARIABLE
@defvr {Vari@'avel} in_netmath
Valor padr@~ao: @code{false}

Quando @code{in_netmath} @'e @code{true},
@code{plot3d} imprime uma sa@'ida OpenMath para o console se @code{plot_format} @'e @code{openmath};
caso contr@'ario @code{in_netmath} (mesmo se @code{true}) n@~ao tem efeito.
@code{in_netmath} n@~ao tem efeito sobre @code{plot2d}.

@end defvr

@c THIS DESCRIPTION IS IN NEED OF HEAVY REVISION (BUT ONLY IF OPENPLOT IS STILL SUPPORTED)
@deffn {Fun@,{c}@~ao} openplot_curves (@var{list}, @var{rest_options})
Aceita uma lista de curvas tais como
@example
[[x1, y1, x2, y2, ...], [u1, v1, u2, v2, ...], ..]
@end example
ou 
@example
[[[x1, y1], [x2, y2], ...], ...]
@end example
e desenha os seus gr@'aficos. S@'o funciona se Xmaxima estiver instalado.
@'E similar a xgraph_curves, mas n@~ao usando as rotinas do
@emph{openmath}.

Argumentos adicionais de s@'imbolos podem ser dados tais como
@code{"@{xrange -3 4@}"}.
O exemplo adiante monta o gr@'afico de duas curvas, usando pontos grandes, rotulando-se o primeiro
@code{jim} e o segundo rotulando-se @code{jane}.   
@example
(%i1) openplot_curves ([["@{plotpoints 1@} @{pointsize 6@}
      @{label jim@} @{xaxislabel @{joe is nice@}@}"],
      [1, 2, 3, 4, 5, 6, 7, 8], ["@{label jane@} @{color pink @}"],
      [3, -1, 4, 2, 5, 7]]);
@end example

@ifnotinfo
@image{../figures/plotting1,8cm}
@end ifnotinfo

Algumas outras palavras chave especiais s@~ao @code{xfun}, @code{color}, @code{plotpoints}, @code{linecolors},
@code{pointsize}, @code{nolines}, @code{bargraph}, @code{labelposition}, @code{xaxislabel}, e
@code{yaxislabel}.

@end deffn

@deffn {Fun@,{c}@~ao} plot2d (@var{expr}, @var{range}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot2d (@var{parametric_expr})
@deffnx {Fun@,{c}@~ao} plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range}, @var{y_range})
@deffnx {Fun@,{c}@~ao} plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range})
@deffnx {Fun@,{c}@~ao} plot2d (@var{expr}, @var{x_range}, @var{y_range})
@deffnx {Fun@,{c}@~ao} plot2d (@var{expr}, @var{x_range})
@deffnx {Fun@,{c}@~ao} plot2d (@var{expr}, @var{x_range})
@deffnx {Fun@,{c}@~ao} plot2d ([@var{nome_1}, ..., @var{nome_n}], @var{x_range}, @var{y_range})
@deffnx {Fun@,{c}@~ao} plot2d ([@var{nome_1}, ..., @var{nome_n}], @var{x_range})
@deffnx {Fun@,{c}@~ao} plot2d (@var{name}, @var{x_range}, @var{y_range})
@deffnx {Fun@,{c}@~ao} plot2d (@var{name}, @var{x_range})
@deffnx {Fun@,{c}@~ao} plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot2d ([..., @var{expr}, ..., @var{parametric_expr}, ...], @var{x_range}, ..., @var{op@,{c}@~oes})
Mostra a montagem de uma ou mais express@~oes
como uma fun@,{c}@~ao de uma vari@'avel.

Em todos os casos, @var{expr}
@'e uma express@~ao a ser montado o gr@'afico no eixo vertical como
uma fun@,{c}@~ao de uma vari@'avel.
@var{x_range}, a amplitude do eixo horizontal,
@'e uma lista da forma @code{[@var{vari@'avel}, @var{min}, @var{max}]},
onde @var{vari@'avel} @'e uma vari@'avel que aparece em @var{expr}.
@var{y_range}, e a amplitude do eixo vertical,
@'e uma lista da forma @code{[y, @var{min}, @var{max}]}.

@code{plot2d (@var{expr}, @var{x_range})}
monta o gr@'afico @var{expr} como uma fun@,{c}@~ao da vari@'avel nomeada em @var{x_range},
sobre a amplitude especificada em @var{x_range}.
Se a amplitude vertical n@~ao for alternativamente especificada por @code{set_plot_option},
essa @'e escolhida automaticamente.
Todas as op@,{c}@~oes s@~ao assumidas terem valores padr@~ao a menos que sejam alternativamente especificadas por @code{set_plot_option}.

@code{plot2d (@var{expr}, @var{x_range}, @var{y_range})}
monta o gr@'afico de @var{expr} como uma fun@,{c}@~ao de uma vari@'avel nomeada em @var{x_range},
sobre a amplitude especificada em @var{x_range}.
O alcance vertical @'e escolhido para @var{y_range}.
Todas as op@,{c}@~oes s@~ao assumidas terem valores padr@~ao a menos que sejam alternativamente especificadas por @code{set_plot_option}.

@code{plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range})}
monta o gr@'afico @var{expr_1}, ..., @var{expr_n} como uma fun@,{c}@~ao da vari@'avel nomeada em @var{x_range},
sobre a amplitude especificada em @var{x_range}.
Se a amplitude vertical n@~ao for alternativamente especificada por @code{set_plot_option},
essa @'e escolhida automaticamente.
Todas as op@,{c}@~oes s@~ao assumidas terem valores padr@~ao a menos que sejam alternativamente especificadas por @code{set_plot_option}.

@code{plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range}, @var{y_range})}
monta o gr@'afico @var{expr_1}, ..., @var{expr_n} como uma fun@,{c}@~ao de uma vari@'avel nomedada em @var{x_range},
sobre a amplitude especificada em @var{x_range}.
O alcance vertical @'e escolhido para @var{y_range}.
Todas as op@,{c}@~oes s@~ao assumidas terem valores padr@~ao a menos que sejam alternativamente especificadas por @code{set_plot_option}.

Uma fun@,{c}@~ao a ter seu gr@'afico montado
pode ser especificada como o nome de uma fun@,{c}@~ao Maxima ou como o nome de uma fun@,{c}@~ao Lisp ou como um operador,
como uma express@~ao lambda do Maxima, ou como uma express@~ao geral do Maxima.
Se especificada como um nome ou como express@~ao lambda,
a fun@,{c}@~ao deve ser uma fun@,{c}@~ao de um argumento.

@c PUT EXAMPLES FOR PRECEDING SIMPLE FORMS OF plot2d HERE
@b{Exemplos:}

Montando um gr@'afico de uma express@~ao, e escolhendo alguns par@^ametros comumente usados.

@example
(%i1) plot2d (sin(x), [x, -5, 5])$
(%i2) plot2d (sec(x), [x, -2, 2], [y, -20, 20], [nticks, 200])$
@end example

@ifnotinfo
@image{../figures/plotting2,8cm}
@image{../figures/plotting3,8cm}
@end ifnotinfo

@b{Montando gr@'afico de fun@,{c}@~oes pelo nome.}

@c ===beg===
@c F(x) := x^2 $
@c :lisp (defun |$g| (x) (m* x x x))
@c H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $
@c plot2d (F, [u, -1, 1])$
@c plot2d ([F, G, H], [u, -1, 1])$
@c ===end===
@example
(%i1) F(x) := x^2 $

(%i2) :lisp (defun |$g| (x) (m* x x x))

$g
(%i2) H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $

(%i3) plot2d (F, [u, -1, 1])$

(%i4) plot2d ([F, G, H], [u, -1, 1])$
@end example

@ifnotinfo
@image{../figures/plotting4,8cm}
@image{../figures/plotting5,8cm}
@end ifnotinfo

Em qualquer lugar onde pode existir uma express@~ao comum, pode existir uma express@~ao param@'etrica: 
@var{parametric_expr} @'e uma lista da forma
@code{[parametric, @var{x_expr}, @var{y_expr}, @var{t_range}, @var{op@,{c}@~oes}]}.
Aqui @var{x_expr} e @var{y_expr} s@~ao express@~oes de 1 vari@'avel @var{var} que @'e
o primeiro elemento da amplitude @var{trange}.  
A montagem do gr@'afico mostra o caminho descrito pelo par
@code{[@var{x_expr}, @var{y_expr}]} como @var{var} varia em @var{trange}.

No exemplo seguinte, montaremos o gr@'afico de um c@'irculo, ent@~ao faremos
a montagem do gr@'afico com somente poucos pontos usados, desse modo vamos pegar uma estrela,
e inicialmente montaremos o gr@'afico juntamente com uma fun@,{c}@~ao comum de X.

@b{Exemplos de gr@'aficos param@'etricos:}
@c PUT PARAMETRIC EXAMPLES HERE

@itemize @bullet
@item
Montar o gr@'afico de um c@'irculo de forma param@'etrica.
@example
(%i1) plot2d ([parametric, cos(t), sin(t), [t, -%pi*2, %pi*2],
        [nticks, 80]])$
@end example

@ifnotinfo
@image{../figures/plotting6,8cm}
@end ifnotinfo

@item
Monta o gr@'afico de uma estrela: liga oito pontos sobre a circunfer@^encia de um c@'irculo.
@example
(%i2) plot2d ([parametric, cos(t), sin(t), [t, -%pi*2, %pi*2],
        [nticks, 8]])$
@end example

@ifnotinfo
@image{../figures/plotting7,8cm}
@end ifnotinfo

@item
Monta o gr@'afico de um polin@^omio c@'ubico da forma comum e de um c@'irculo da forma param@'etrica.
@example
(%i3) plot2d ([x^3 + 2, [parametric, cos(t), sin(t), [t, -5, 5],
        [nticks, 80]]], [x, -3, 3])$
@end example

@ifnotinfo
@image{../figures/plotting8,8cm}
@end ifnotinfo

@end itemize

Express@~oes discretas podem tamb@'em serem usadas ou em lugar de express@~oes comuns ou
em lugar de express@~oes param@'etricas:
@var{discrete_expr} @'e uma lista da forma
@code{[discrete, @var{x_list}, @var{y_list}]}
ou da forma
@code{[discrete, @var{xy_list}]},
onde @var{xy_list} @'e uma lista de pares @code{[@var{x},@var{y}]}.

@b{Exemplos de gr@'aficos discretos:}
@c PUT DISCRETE EXAMPLES HERE

@itemize @bullet
@item
Cria algumas listas.
@example
(%i1) xx:makelist(x,x,0,10)$
(%i2) yy:makelist(exp(-x*1.0),x,0,10)$
(%i3) xy:makelist([x,x*x],x,0,5)$
@end example

@item
Monta um gr@'afico com segmentos de reta.
@example
(%i4) plot2d([discrete,xx,yy])$
@end example

@ifnotinfo
@image{../figures/plotting9,8cm}
@end ifnotinfo

@item
Monta um gr@'afico com segmentos de reta, usando uma lista de pares.
@example
(%i5) plot2d([discrete,xy])$
@end example

@ifnotinfo
@image{../figures/plotting10,8cm}
@end ifnotinfo

@item
Monta um gr@'afico com pontos.
@example
(%i6) plot2d([discrete,xx,yy],[gnuplot_curve_styles,
       ["with points"]])$
@end example

@ifnotinfo
@image{../figures/plotting11,8cm}
@end ifnotinfo

@item
Monta o gr@'afico da curva @code{cos(@var{x})} usando linhas e (@var{xx},@var{yy})
usando pontos.
@example
(%i7) plot2d([cos(x),[discrete,xx,yy]],[x,0,10],
     [gnuplot_curve_styles,
     ["with lines","with points pointsize 3"]])$
@end example

@ifnotinfo
@image{../figures/plotting12,8cm}
@end ifnotinfo

@end itemize

Veja tamb@'em @code{plot_options}, que descreve op@,{c}@~oes de montagem de gr@'afico e tem mais exemplos.

@end deffn

@deffn {Fun@,{c}@~ao}  xgraph_curves (@var{list})
transforma em gr@'afico a lista de `grupos de pontos' dados em lista usando xgraph.  Se o programa
xgraph n@~ao estiver instalado, esse comando ir@'a falhar.

Uma lista de grupos de pontos pode ser da forma

@example
[x0, y0, x1, y1, x2, y2, ...]
@end example
ou
@example
[[x0, y0], [x1, y1], ...]
@end example
Um grupo de pontos pode tamb@'em conter s@'imbolos que fornecem r@'otulos ou outra
informa@,{c}@~ao.

@example
xgraph_curves ([pt_set1, pt_set2, pt_set3]);
@end example

transforma em gr@'afico os tr@^es grupos de pontos com tr@^es curvas.

@example
pt_set: append (["NoLines: True", "LargePixels: true"],
                          [x0, y0, x1, y1, ...]);
@end example

@noindent
fizemos com que os grupos de pontos [e os pr@'oprios subseq@"u@^entes], n@~ao  
possuam linhas entre os pontos, e para usar pixels largos.
Veja a p@'agina de manual sobre o xgraph para especificar mais op@,{c}@~oes.

@example
pt_set: append ([concat ("\"", "x^2+y")], [x0, y0, x1, y1, ...]);
@end example

@noindent
fizemos a@'i aparecer um "r@'otulo" de "x^2+y" para esse grupo de pontos
em particular.  As aspas, @code{"}, no in@'icio @'e que dizem
ao xgraph isso @'e um r@'otulo.

@example
pt_set: append ([concat ("TitleText: Dados da Amostra")], [x0, ...])$
@end example

@noindent
fizemos o t@'itulo principal do gr@'afico ser "Dados da Amostra" ao inv@'es
de "Maxima Plot".

Para fazer um gr@'afico em barras com largura de 0.2 unidades, e
para montar o gr@'afico com duas possibilidades diferentes dos tais gr@'aficos em barras:
@example
(%i1) xgraph_curves ([append (["BarGraph: true", "NoLines: true",
      "BarWidth: .2"], create_list ([i - .2, i^2], i, 1, 3)),
      append (["BarGraph: true", "NoLines: true", "BarWidth: .2"],
      create_list ([i + .2, .7*i^2], i, 1, 3))]);
@end example

@ifnotinfo
@image{../figures/plotting13,8cm}
@end ifnotinfo

@noindent

Um arquivo tempor@'ario @file{xgraph-out} @'e usado.

@end deffn



@defvr {Vari@'avel de sistema} plot_options
Elementos dessa lista estabelecem as op@,{c}@~oes padr@~ao para a montagem do gr@'afico.
Se uma op@,{c}@~ao est@'a presente em uma chamada a @code{plot2d} ou @code{plot3d},
esse valor tem preced@^encia sobre a op@,{c}@~ao padr@~ao.
De outra forma, o valor em @code{plot_options} @'e usado.
Op@,{c}@~oes padr@~ao s@~ao atribu@'idas por @code{set_plot_option}.

Cada elemento de @code{plot_options} @'e uma lista de dois ou mais @'itens.
O primeiro item @'e o nome de uma op@,{c}@~ao, e os restantes compreendem o valor ou valores
atribu@'idos @`a op@,{c}@~ao.
Em alguns casos, o valor atribu@'ido @'e uma lista, que pode compreender muitos @'itens.

As op@,{c}@~oes de montagem de gr@'afico que s@~ao reconhecidas por @code{plot2d} e @code{plot3d} s@~ao as seguintes:

@itemize @bullet
@item
Op@,{c}@~ao: @code{plot_format} determina qual pacote de montagem de gr@'afico @'e usado por @code{plot2d} e @code{plot3d}.

@itemize @bullet
@item
Valor padr@~ao: @code{gnuplot}
Gnuplot @'e o padr@~ao, e mais avan@,{c}ado, pacote de montagem de gr@'afico.  Esse
requer uma instala@,{c}@~ao externa do gnuplot.
@item
Valor: @code{mgnuplot}
Mgnuplot @'e um inv@'olucro em torno do gnuplot baseado no Tk.  Isso est@'a inclu@'ido na
distribu@'i@,{c}@~ao do Maxima.  Mgnuplot oferece uma GUI rudimentar para o gnuplot,
mas tem menos recursos em geral que a interface 
texto.  Mgnuplot requer uma instala@,{c}@~ao externa do gnuplot e
Tcl/Tk.
@item
Valor: @code{openmath}
Openmath @'e um programa gr@'afico escrito em Tcl/Tk. Este formato @'e
fornecido pelo pacote Xmaxima, que @'e distribuido com Maxima. Se quiser
usar este formato, dever@'a instalar Xmaxima.
@end itemize

@item
Op@,{c}@~ao: @code{run_viewer} controla se o visualizador apropriado para o formato da montagem do gr@'afico pode ou n@~ao
poder@'a ser executado.

@itemize @bullet
@item
@c DOES FALSE IMPLY THE OUTPUT FILE IS GENERATED AND NOT SHOWN ?? OR IS NOTHING GENERATED ??
Valor padr@~ao: @code{true} Executa o programa visualizador.
@item
Valor: @code{false} N@~ao executa o programa visualizador.
@end itemize

@item
@code{gnuplot_term} Prepara a sa@'ida tipo terminal para gnuplot.
@itemize @bullet
@item
Valor padr@~ao: @code{default}
A sa@'ida do Gnuplot @'e mostrada em uma janela gr@'afica separada.

@item
Valor: @code{dumb}
A sa@'ida do Gnuplot @'e mostrada no console do Maxima como uma aproxima@,{c}@~ao "arte ASCII" para gr@'aficos.

@item
Valor: @code{ps}
Gnuplot gera comandos na linguagem PostScript de descri@,{c}@~ao de p@'aginas.
Se a op@,{c}@~ao
@code{gnuplot_out_file} est@'a escolhida para @var{nomearquivo}, gnuplot escreve os comandos PostScript para @var{nomearquivo}.
De outra forma, os comandos PostScript ser@~ao gravados no arquivo @code{maxplot.ps}.

@item
Valor: qualquer outro especifica@,{c}@~ao v@'alida para o gnuplot term
Gnuplot pode gerar em muitos outros formatos gr@'aficos tais como
png, jpeg, svg etc.  Para criar gr@'aficos em todos esses formatos o
@code{gnuplot_term} pode ser escolhido para quaisquer nome (s@'imbolo) de term suportado pelo gnuplot  
ou mesmo especifica@,{c}@~ao de term do gnuplot com quaisquer op@,{c}@~oes v@'alidas (seq@"u@^encia de caracteres).
Por exemplo @code{[gnuplot_term,png]} cria sa@'idas no formato PNG (Portable
Network Graphics) enquanto @code{[gnuplot_term,"png size 1000,1000"]}
cria arquivos no formato PNG com tamanho de 1000x1000 pixels. 
Se a op@,{c}@~ao @code{gnuplot_out_file} for escolhida para @var{nomearquivo}, gnuplot 
escreve a sa@'ida para @var{nomearquivo}. De outra forma, a saida @'e gravada no
no arquivo @code{maxplot.@var{term}}, onde @var{term} @'e um nome de
terminal do gnuplot.

@end itemize

@item
Op@,{c}@~ao: @code{gnuplot_out_file} Escreve a sa@'ida gnuplot para um arquivo.

@itemize @bullet
@item
Valor padr@~ao: @code{false} Nenhum arquivo de sa@'ida especificado.
@item
Valor: @var{filename}
Exemplo: @code{[gnuplot_out_file, "myplot.ps"]}
Esse exemplo envia uma sa@'ida PostScript para o arquivo @code{myplot.ps} quando
usada em conjunto com o terminal PostScript do gnuplot.
@c DOES OUTPUT FILE != FALSE IMPLY DON'T RUN THE VIEWER ??
@c WHAT HAPPENS IF OUTPUT FILE IS SPEFICIED BUT TERMINAL IS NOT PS ??
@end itemize

@item
Op@,{c}@~ao: @code{x}
A amplitude horizontal padr@~ao.
@example
[x, - 3, 3]
@end example
Especifica a amplitude horizontal para [-3, 3].

@item
Op@,{c}@~ao: @code{y}
A amplitude vertical padr@~ao.
@example
[y, - 3, 3]
@end example
Especifica a amplitude vertical para [-3, 3].

@item
Op@,{c}@~ao: @code{t}
A amplitude padr@~ao para o par@^ametro em montagem de gr@'aficos param@'etricos.
@example
[t, 0, 10]
@end example
Especifica a amplitude da vari@'avel param@'etrica para [0, 10].

@item
Op@,{c}@~ao: @code{plot_realpart}
Quando @code{plot_realpart} for @code{true},
a parte real de um valor complexo @var{x} @'e mostrada;
isso @'e equivalente a mostrar @code{realpart(@var{x})} em lugar de @var{x}.
De outra forma,
somente valores com a parte imagin@'aria igual a 0 s@~ao mostrados na tela,
e valores complexos s@~ao ignorados.
@example
plot2d (log(x), [x, -5, 5], [plot_realpart, false]);
plot2d (log(x), [x, -5, 5], [plot_realpart, true]);
@end example
O valor padr@~ao @'e @code{false}.

@item
Op@,{c}@~ao: @code{nticks}
N@'umero de pontos iniciais 
usado pela rotina adaptativa de montagem do gr@'afico.
@example
[nticks, 20]
@end example
O padr@~ao para @code{nticks} @'e 10.

@item
Op@,{c}@~ao: @code{adapt_depth}
O n@'umero maximo de quebras usada pela rotina adaptativa de montagem do gr@'afico.
@example
[adapt_depth, 5]
@end example
O padr@~ao para @code{adapt_depth} @'e 10.

@item
Op@,{c}@~ao: @code{grid}
Escolhe o n@'umero de pontos da grade para usar nas dire@,{c}@~oes x e y
para montagem de gr@'aficos tridimensionais.
@example
[grid, 50, 50]
@end example
Escolhe a grade para 50 por 50 pontos.  A grade padr@~ao @'e 30 por 30.

@item
Op@,{c}@~ao: @code{transform_xy}
Permite que transforma@,{c}@~oes sejam aplicadas @`a montagem de gr@'aficos tridimensionais.
@example
[transform_xy, false]
@end example
O padr@~ao @code{transform_xy} @'e @code{false}.  Se isso n@~ao @'e @code{false}, pode ser
a sa@'ida de
@example
make_transform ([x, y, z], f1(x, y, z), f2(x, y, z), f3(x, y, z))$
@end example
A transforma@,{c}@~ao @code{polar_xy} @'e previamente definida no Maxima.  Isso fornece a mesma
transforma@,{c}@~ao que
@example
make_transform ([r, th, z], r*cos(th), r*sin(th), z)$
@end example

@item
Op@,{c}@~ao: @code{colour_z} @'e espec@'ifica para o formato @code{ps} de montagem de gr@'afico.
@example
[colour_z, true]
@end example
O valor padr@~ao para @code{colour_z} @'e @code{false}.

@item
Op@,{c}@~ao: @code{view_direction}
@c REPHRASE
Espec@'ifico para o formato @code{ps} de montagem de gr@'afico.
@example
[view_direction, 1, 1, 1]
@end example
O padr@~ao @code{view_direction} @'e [1, 1, 1].
@end itemize

Existem muitas op@,{c}@~oes de montagem de gr@'aficos espec@'ificas para gnuplot.
Todas essas op@,{c}@~oes (exceto @code{gnuplot_pm3d}) s@~ao comandos gnuplot
em estado natural, especificados como seq@"u@^encias de caracteres.  Consulte a documenta@,{c}@~ao do gnuplot para maiores detalhes.

@itemize @bullet
@item
Op@,{c}@~ao: @code{gnuplot_pm3d} Controla o uso do modo PM3D, que possui recursos
avan@,{c}ados em 3D.  PM3D est@'a somente dispon@'ivel no gnuplot em vers@~oes ap@'os a 3.7.  O
valor padr@~ao para @code{gnuplot_pm3d} @'e @code{false}.

Exemplo:

@example
[gnuplot_pm3d, true]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_preamble} Insere comandos antes que o gr@'afico seja
desenhado.  Quaisquer comandos v@'alidos para o gnuplot podem ser usados.  Multiplos comandos
podem ser separados com um ponto e v@'irgula.  O exemplo mostrado produz uma
escala num@'erica na montagem do gr@'afico.  O valor padr@~ao para @code{gnuplot_preamble} @'e uma seq@"u@^encia de caracteres vazia @code{""}.

Exemplo:

@example
[gnuplot_preamble, "set log y"]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_curve_titles} Controla os t@'itulos dados na chave da montagem do gr@'afico.  O
valor padr@~ao @'e @code{[default]}, que automaticamente escolhe o t@'itulo de cada
curva para a fun@,{c}@~ao cujo gr@'afico est@'a sendo constru@'ido. Se n@~ao contiver @code{[default]}, @code{gnuplot_curve_titles}
pode conter uma lista de seq@"u@^encias de caracteres,
cada uma das quais @'e @code{"title '@var{title_string}'"}.
(Para disabilitar a chave de impress@~ao de gr@'afico, adicione @code{"set nokey"} a @code{gnuplot_preamble}.)

Exemplo:

@example
[gnuplot_curve_titles,
["title 'Minha primeira fun@,{c}@~ao'", "title 'Minha segunda fun@,{c}@~ao'"]]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_curve_styles} Uma lista de seq@"u@^encias de caracteres controlando a apar@^encia
das curvas, i.e., cor, largura, brilho, etc., para serem enviadas para o
comando de montagem do gr@'afico do gnuplot.  O valor padr@~ao @'e
@code{["with lines 3", "with lines 1", "with lines 2", "with lines 5", "with lines 4", "with lines 6", "with lines 7"]}, que circula atrav@'es de diferentes cores.  Veja a
documenta@,{c}@~ao do gnuplot de @code{plot} para maiores informa@,{c}@~oes.

Exemplo:

@example
[gnuplot_curve_styles, ["with lines 7", "with lines 2"]]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_default_term_command} O comando gnuplot para escolher o
tipo de terminal para o terminal padr@~ao.  O valor padr@~ao @'e a seq@"u@^encia de caracteres vazia @code{""},
i.e., usa os padr@~oes do gnuplot.

Exemplo:

@example
[gnuplot_default_term_command, "set term x11"]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_dumb_term_command} O comando gnuplot para escolher o
tipo de terminal para o terminal dumb.  O valor padr@~ao @'e @code{"set term dumb 79 22"},
que faz a sa@'ida texto com 79 caracteres por 22
caracteres.

Exemplo:

@example
[gnuplot_dumb_term_command, "set term dumb 132 50"]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_ps_term_command} O comando gnuplot para escolher o tipo
de terminal para o terminal PostScript.  O valor padr@~ao @'e 
@code{"set size 1.5, 1.5;set term postscript eps enhanced color solid 24"},
que escolhe o
tamanho para 1.5 vezes o padr@~ao do gnuplot, e o tamanho da fonte para 24, al@'em de
outras coisas.  Veja a documenta@,{c}@~ao do gnuplot de @code{set term postscript} para mais informa@,{c}@~ao.

Exemplo:

@example
[gnuplot_ps_term_command,
"set term postscript eps enhanced color solid 18"]
@end example

@end itemize

@b{Exemplos:}

@itemize @bullet
@item
Grava um gr@'afico de @code{sin(x)} para o arquivo @code{sin.eps}.
@end itemize
@example
(%i1) plot2d (sin(x), [x, 0, 2*%pi], [gnuplot_term, ps],
                        [gnuplot_out_file, "sin.eps"])$
@end example

@itemize @bullet
@item
Usa a op@,{c}@~ao do y para arrancar singularidades e a op@,{c}@~ao 
gnuplot_preamble para colocar a chave na parte inferior do gr@'afico em lugar de no topo.
@end itemize
@example
(%i2) plot2d ([gamma(x), 1/gamma(x)], [x, -4.5, 5], [y, -10, 10],
                     [gnuplot_preamble, "set key bottom"])$
@end example

@ifnotinfo
@image{../figures/plotting14,8cm}
@end ifnotinfo

@itemize @bullet
@item
Usa um muito complicado @code{gnuplot_preamble} para produzir elegantes r@'otulos para o eixo x.
(Note que a seq@"u@^encia de caracteres @code{gnuplot_preamble} deve ser fornecida inteiramente sem qualquer quebra de linha.)
@end itemize
@example
(%i3) my_preamble: "set xzeroaxis; set xtics ('-2pi' -6.283, \
'-3pi/2' -4.712, '-pi' -3.1415, '-pi/2' -1.5708, '0' 0, \
'pi/2' 1.5708, 'pi' 3.1415,'3pi/2' 4.712, '2pi' 6.283)"$

(%i4) plot2d([cos(x), sin(x), tan(x), cot(x)],
       [x, -2*%pi, 2.1*%pi], [y, -2, 2],
       [gnuplot_preamble, my_preamble]);
@end example

@ifnotinfo
@image{../figures/plotting15,8cm}
@end ifnotinfo

@itemize @bullet
@item
Usa uma muito complicada @code{gnuplot_preamble} para produzir elegantes r@'otulos para o eixo x,
e produzir sa@'idas
PostScript que pegam vantagens do formato de texto avan@,{c}ado dispon@'ivel
no gnuplot.
(Note que a seq@"u@^encia de caracteres @code{gnuplot_preamble} deve ser fornecida inteiramente sem qualquer quebra de linha.)
@end itemize
@example
(%i5) my_preamble: "set xzeroaxis; set xtics ('-2@{/Symbol p@}' \
-6.283, '-3@{/Symbol p@}/2' -4.712, '-@{/Symbol p@}' -3.1415, \
'-@{/Symbol p@}/2' -1.5708, '0' 0,'@{/Symbol p@}/2' 1.5708, \
'@{/Symbol p@}' 3.1415,'3@{/Symbol p@}/2' 4.712, '2@{/Symbol p@}' \
6.283)"$

(%i6) plot2d ([cos(x), sin(x), tan(x)], [x, -2*%pi, 2*%pi],
    [y, -2, 2], [gnuplot_preamble, my_preamble],
    [gnuplot_term, ps], [gnuplot_out_file, "trig.eps"]);
@end example

@itemize @bullet
@item
Uma montagem de gr@'afico tridimensional usando o terminal gnuplot pm3d.
@end itemize
@example
(%i7) plot3d (atan (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
        [grid, 50, 50], [gnuplot_pm3d, true])$
@end example

@ifnotinfo
@image{../figures/plotting16,8cm}
@end ifnotinfo

@itemize @bullet
@item
Uma montagem de gr@'afico tridimensional sem a malha e com contornos
projetados no plano inferior.
@end itemize
@example
(%i8) my_preamble: "set pm3d at s;unset surface;set contour;\
set cntrparam levels 20;unset key"$
(%i9) plot3d(atan(-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
    [grid, 50, 50], [gnuplot_pm3d, true],
    [gnuplot_preamble, my_preamble])$
@end example

@ifnotinfo
@image{../figures/plotting17,8cm}
@end ifnotinfo

@itemize @bullet
@item
Uma montagem de gr@'afico onde o eixo z @'e representado apenas por cores.
(Note que a seq@"u@^encia de caracteres @code{gnuplot_preamble} deve ser fornecida inteiramente sem qualquer quebra de linha.)
@end itemize
@example
(%i10) plot3d (cos (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
    [gnuplot_preamble, "set view map; unset surface"],
    [gnuplot_pm3d, true], [grid, 150, 150])$
@end example

@ifnotinfo
@image{../figures/plotting18,8cm}
@end ifnotinfo

@end defvr

@deffn {Fun@,{c}@~ao} plot3d ([@var{expr_1}, @var{expr_2}, @var{expr_3}], @var{x_range}, @var{y_range}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot3d (@var{expr}, @var{x_range}, @var{y_range}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot3d (@var{name}, @var{x_range}, @var{y_range}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot3d ([@var{expr_1}, @var{expr_2}, @var{expr_3}], @var{x_rge}, @var{y_rge})
@deffnx {Fun@,{c}@~ao} plot3d ([@var{nome_1}, @var{nome_2}, @var{nome_3}], @var{x_range}, @var{y_range}, ..., @var{op@,{c}@~oes}, ...)

Mostra um gr@'afico de uma ou tr@^es express@~oes como fun@,{c}@~oes de duas vari@'aveis.

@example
(%i1) plot3d (2^(-u^2 + v^2), [u, -3, 3], [v, -7, 7]);
@end example

@ifnotinfo
@image{../figures/plotting19,8cm}
@end ifnotinfo

monta o gr@'afico de @code{z = 2^(-u^2+v^2)} com @code{u} e @code{v} variando no intervalo fechado [-3,3] e
no intervalo fechado de [-2,2] respectivamente, e com @var{u} sobre o eixo x, e @code{v} sobre o eixo
y.

O mesmo gr@'afico pode ser visualizado usando openmath (se Xmaxima
estiver instalado):

@example
(%i2)  plot3d (2^(-u^2 + v^2), [u, -3, 3], [v, -2, 2],
               [plot_format, openmath]);
@end example

@ifnotinfo
@image{../figures/plotting25,8cm}
@end ifnotinfo

@noindent
nesse caso o mouse pode ser usado para rotacionar a visualiza@,{c}@~ao para olhar na superf@'icie
de diferentes @^angulos.

Um exemplo do terceiro modelo de argumento @'e

@example
(%i3) plot3d ([cos(x)*(3 + y*cos(x/2)), sin(x)*(3 + y*cos(x/2)),
   y*sin(x/2)], [x, -%pi, %pi], [y, -1, 1], ['grid, 50, 15]);
@end example

@ifnotinfo
@image{../figures/plotting20,8cm}
@end ifnotinfo

que monta o gr@'afico da banda de Moebius, parametrizada por tr@^es express@~oes fornecidas
como o primeiro argumento para @code{plot3d}.  Um adicional e opcional argumento
@code{['grid, 50, 15]} fornece o n@'umero de ret@^agulos da grade na dire@,{c}@~ao x e
na dire@,{c}@~ao y.

Uma fun@,{c}@~ao a ter seu gr@'afico montado
pode ser especificada como o nome de uma fun@,{c}@~ao Maxima ou como o nome de uma fun@,{c}@~ao Lisp ou como um operador,
como uma express@~ao lambda do Maxima, ou como uma express@~ao geral do Maxima.
Se especificada como um nome ou como express@~ao lambda,
a fun@,{c}@~ao deve ser uma fun@,{c}@~ao de um argumento.

Esse exemplo mostra uma montagem de gr@'afico da parte real de @code{z^1/3}.

@example
(%i4) plot3d (r^.33*cos(th/3), [r, 0, 1], [th, 0, 6*%pi],
      ['grid, 12, 80], ['transform_xy, polar_to_xy],
      ['view_direction, 1, 1, 1.4], ['colour_z, true]);
@end example

@ifnotinfo
@image{../figures/plotting21,8cm}
@end ifnotinfo

@noindent
Aqui a op@,{c}@~ao @code{view_direction} indica a dire@,{c}@~ao da qual n@'os
pegamos a proje@,{c}@~ao.  N@'os atualmente fazemos isso de infinitamente distante,
mas paralelo @`a linha de @code{view_direction} para a or@'igem.  Isso @'e
correntemente usado somente em plot_format @code{ps}, uma vez que outros visualizadores
permitem rota@,{c}@~ao interativa do objeto.

Outro exemplo @'e uma superf@'icie de Klein:

@example
(%i5) expr_1: 5*cos(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y)
      + 3.0) - 10.0$
(%i6) expr_2: -5*sin(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y)
      + 3.0)$
(%i7) expr_3: 5*(-sin(x/2)*cos(y) + cos(x/2)*sin(2*y))$

(%i8) plot3d ([expr_1, expr_2, expr_3], [x, -%pi, %pi],
      [y, -%pi, %pi], ['grid, 40, 40]);
@end example

@ifnotinfo
@image{../figures/plotting22,8cm}
@end ifnotinfo

e um toro

@example
+(%i9) expr_1: cos(y)*(10.0+6*cos(x))$
+(%i10) expr_2: sin(y)*(10.0+6*cos(x))$
+(%i11) expr_3: -6*sin(x)$
+(%i12) plot3d ([expr_1, expr_2, expr_3], [x, 0, 2*%pi],       [y, 0, 2*%pi], ['grid, 40, 40]);
@end example

@ifnotinfo
@image{../figures/plotting23,8cm}
@end ifnotinfo

Algumas vezes isso @'e necess@'ario para definir uma fun@,{c}@~ao para montar o graico da express@~ao. Todos
os argumentos para plot3d s@~ao avaliados antes de serem passados para plot3d, e
ent@~ao tentando fazer um express@~ao que faz apenas o que @'e preciso pode ser 
dif@'icil, e @'e apenas mais f@'acil fazer uma fun@,{c}@~ao.   

@example
(%i13) M: matrix([1, 2, 3, 4], [1, 2, 3, 2], [1, 2, 3, 4],
       [1, 2, 3, 3])$
(%i14) f(x, y) := float (M [?round(x), ?round(y)])$
(%i15) plot3d (f, [x, 1, 4], [y, 1, 4], ['grid, 4, 4])$
@end example

@ifnotinfo
@image{../figures/plotting24,8cm}
@end ifnotinfo

Veja @code{plot_options} para mais exemplos.

@end deffn


@deffn {Fun@,{c}@~ao}  make_transform (@var{vars}, @var{fx}, @var{fy}, @var{fz})
Retornam uma fun@,{c}@~ao adequada para a fun@,{c}@~ao transforma@,{c}@~ao em plot3d.  Use
com a op@,{c}@~ao de montagem de gr@'afico @code{transform_xy}.
@example
make_transform ([r, th, z], r*cos(th), r*sin(th), z)$
@end example
@'e uma transforma@value{cedilha}@~ao para coordenadas polares.
@end deffn

@deffn {Fun@,{c}@~ao}  set_plot_option (@var{op@,{c}@~ao})
Atribui uma das var@'aveis globais para impress@~ao.
@var{op@,{c}@~ao} @'e especificada como uma lista de dois ou mais elementos,
na qual o primeiro elemeto @'e uma das palavras chave
dentro da lista @code{plot_options}.

@code{set_plot_option} avalia seu argumento.
@code{set_plot_option} retorna @code{plot_options} 
(ap@'os modificar um desses elementos).

Veja tamb@'em @code{plot_options}, @code{plot2d}, e @code{plot3d}.

Exemplos:

Modifica a malha (@code{grid}) e valores de @code{x}.
Quando uma palavra chave em @code{plot_options} tem um valor atribu@'ido,
colocar um ap@'ostrofo evita avalia@,{c}@~ao.

@c ===beg===
@c set_plot_option ([grid, 30, 40]);
@c x: 42;
@c set_plot_option (['x, -100, 100]);
@c ===end===

@example
(%i1) set_plot_option ([grid, 30, 40]);
(%o1) [[x, - 1.755559702014E+305, 1.755559702014E+305], 
[y, - 1.755559702014E+305, 1.755559702014E+305], [t, - 3, 3], 
[grid, 30, 40], [view_direction, 1, 1, 1], [colour_z, false], 
[transform_xy, false], [run_viewer, true], 
[plot_format, gnuplot], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 10], [adapt_depth, 10], 
[gnuplot_pm3d, false], [gnuplot_preamble, ], 
[gnuplot_curve_titles, [default]], 
[gnuplot_curve_styles, [with lines 3, with lines 1, 
with lines 2, with lines 5, with lines 4, with lines 6, 
with lines 7]], [gnuplot_default_term_command, ], 
[gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript #
eps enhanced color solid 24]]
(%i2) x: 42;
(%o2)                          42
(%i3) set_plot_option (['x, -100, 100]);
(%o3) [[x, - 100.0, 100.0], [y, - 1.755559702014E+305, 
1.755559702014E+305], [t, - 3, 3], [grid, 30, 40], 
[view_direction, 1, 1, 1], [colour_z, false], 
[transform_xy, false], [run_viewer, true], 
[plot_format, gnuplot], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 10], [adapt_depth, 10], 
[gnuplot_pm3d, false], [gnuplot_preamble, ], 
[gnuplot_curve_titles, [default]], 
[gnuplot_curve_styles, [with lines 3, with lines 1, 
with lines 2, with lines 5, with lines 4, with lines 6, 
with lines 7]], [gnuplot_default_term_command, ], 
[gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript #
eps enhanced color solid 24]]
@end example

@end deffn
