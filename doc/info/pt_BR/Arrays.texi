@c Language: Brazilian Portuguese, Encoding: iso-8859-1
@c /Arrays.texi/1.13/Sat Jul  8 08:14:09 2006/-ko/
@menu
* Defini@value{cedilha}@~oes para Arrays::  
@end menu

@node Defini@value{cedilha}@~oes para Arrays,  , Arrays, Arrays
@section Defini@value{cedilha}@~oes para Arrays

@deffn {Fun@,{c}@~ao} array (@var{name}, @var{dim_1}, ..., @var{dim_n})
@deffnx {Fun@,{c}@~ao} array (@var{name}, @var{type}, @var{dim_1}, ..., @var{dim_n})
@deffnx {Fun@,{c}@~ao} array ([@var{name_1}, ..., @var{name_m}], @var{dim_1}, ..., @var{dim_n})

Cria um array @math{n}-dimensional.  
@math{n} pode ser menor ou igual a 5.
Os subscritos para
a @math{i}'@'esima dimens@~ao s@~ao inteiros no intervalo de 0 a @var{dim_i}.  

@code{array (@var{name}, @var{dim_1}, ..., @var{dim_n})} cria um array gen@'erico.

@code{array (@var{name}, @var{type}, @var{dim_1}, ..., @var{dim_n})} cria
um array, com elementos de um tipo especificado.
@var{type} pode ser @code{fixnum} para
inteiros de tamanho limitado ou @code{flonum} para n@'umeros em ponto flutuante.

@code{array ([@var{name_1}, ..., @var{name_m}], @var{dim_1}, ..., @var{dim_n})}
cria @math{m} arrays, todos da mesma dimens@~ao.
@c SAME TYPE AS WELL ??

@c THIS DISCUSSION OF UNDECLARED ARRAYS REALLY WANTS TO BE SOMEWHERE ELSE
Se o usu@'ario atribui a uma vari@'avel subscrita antes de declarar o
array correspondente, um array n@~ao declarado @'e criado.
Arrays n@~ao declarados, tamb@'em conhecidos como array desordenado (porque
o codigo desordenado termina nos subscritos), s@~ao mais gerais que arrays
declarados.  O usu@'ario n@~ao declara seu tamanho m@'aximo, e ele cresce
dinamicamente e desordenadamente @`a medida que s@~ao atribu@'idos valores a mais elementos.  Os
subscritos de um array n@~ao declarado n@~ao precisam sempre ser n@'umeros.  Todavia,
exceto para um array um tanto quanto esparso, @'e provavelmente mais eficiente
declarar isso quando poss@'ivel que deixar n@~ao declarado.  A fun@,{c}@~ao @code{array}
pode ser usada para transformar um array n@~ao declarado em um array
declarado.
@c HOW DOES ONE CHANGE AN UNDECLARED ARRAY INTO A DECLARED ARRAY EXACTLY ??

@end deffn

@deffn {Fun@,{c}@~ao} arrayapply (@var{A}, [@var{i_1}, ..., @var{i_n}])
Avalia @code{@var{A} [@var{i_1}, ..., @var{i_n}]},
quando @var{A} for um array e @var{i_1}, ..., @var{i_n} s@~ao inteiros.

Ela @'e remanescente de @code{apply}, exceto o primeiro argumento que @'e um array ao inv@'es de uma fun@,{c}@~ao.

@end deffn

@deffn {Fun@,{c}@~ao} arrayinfo (@var{A})
Retorna informa@,{c}@~oes sobre o array @var{A}.
O argumento @var{A} pode ser um array declarado, uma array n@~ao declarado ( que sofreu um hash),
uma fun@,{c}@~ao de array, ou uma fun@,{c}@~ao que possui subscrito.

Para arrays declarados, @code{arrayinfo} retorna uma lista
compreendendo o @'atomo @code{declared}, o n;umero de dimens@~oes, e o tamanho de cada dimens@~ao.
Os elementos do array, ambos associados e n@~ao associados, s@~ao retornados por @code{listarray}.

Para arrays n@~ao declarados (arrays que sofreram um hash),
@code{arrayinfo} retorna uma lista compreendendo o @'atomo @code{hashed}, o n@'umero de subscritos,
e os subscritos de de todo elemento que tiver um valor.
Os valores s@~ao retornados por meio de @code{listarray}.

Para fun@,{c}@~oes de array,
@code{arrayinfo} retretorna uma lista compreendendo o @'atomo @code{hashed}, o n@'umero de subscritos,
e quaisquer valores de subscritos para os quais exista valores funcionais armazenados.
Os valores funcionais armazenados s@~ao retornados atrav@'es de @code{listarray}.

Para fun@,{c}@~oes que possuem subscritos,
@code{arrayinfo} retorna uma lista compreendendo o @'atomo @code{hashed}, o n@'umero de subscritos,
e qualquer valores subscritos para os quais existe uma express@~oes lambda.
As express@~oes lambda s@~ao retornadas por @code{listarray}.

Examples:

@code{arrayinfo} e @code{listarray} aplicado a um array declarado.

@c ===beg===
@c array (aa, 2, 3);
@c aa [2, 3] : %pi;
@c aa [1, 2] : %e;
@c arrayinfo (aa);
@c listarray (aa);
@c ===end===
@example
(%i1) array (aa, 2, 3);
(%o1)                          aa
(%i2) aa [2, 3] : %pi;
(%o2)                          %pi
(%i3) aa [1, 2] : %e;
(%o3)                          %e
(%i4) arrayinfo (aa);
(%o4)                 [declared, 2, [2, 3]]
(%i5) listarray (aa);
(%o5) [#####, #####, #####, #####, #####, #####, %e, #####, 
                                        #####, #####, #####, %pi]
@end example

@code{arrayinfo} e @code{listarray} aplicado a um array n@~ao declarado (no qual foi aplicado um hash).

@c ===beg===
@c bb [FOO] : (a + b)^2;
@c bb [BAR] : (c - d)^3;
@c arrayinfo (bb);
@c listarray (bb);
@c ===end===
@example
(%i1) bb [FOO] : (a + b)^2;
                                   2
(%o1)                       (b + a)
(%i2) bb [BAR] : (c - d)^3;
                                   3
(%o2)                       (c - d)
(%i3) arrayinfo (bb);
(%o3)               [hashed, 1, [BAR], [FOO]]
(%i4) listarray (bb);
                              3         2
(%o4)                 [(c - d) , (b + a) ]
@end example

@code{arrayinfo} e @code{listarray} aplicado a uma fun@,{c}@~ao de array.

@c ===beg===
@c cc [x, y] := y / x;
@c cc [u, v];
@c cc [4, z];
@c arrayinfo (cc);
@c listarray (cc);
@c ===end===
@example
(%i1) cc [x, y] := y / x;
                                     y
(%o1)                      cc     := -
                             x, y    x
(%i2) cc [u, v];
                                v
(%o2)                           -
                                u
(%i3) cc [4, z];
                                z
(%o3)                           -
                                4
(%i4) arrayinfo (cc);
(%o4)              [hashed, 2, [4, z], [u, v]]
(%i5) listarray (cc);
                              z  v
(%o5)                        [-, -]
                              4  u
@end example

@code{arrayinfo} e @code{listarray} aplicadas a fun@,{c}@~oes com subscritos.

@c ===beg===
@c dd [x] (y) := y ^ x;
@c dd [a + b];
@c dd [v - u];
@c arrayinfo (dd);
@c listarray (dd);
@c ===end===
@example
(%i1) dd [x] (y) := y ^ x;
                                     x
(%o1)                     dd (y) := y
                            x
(%i2) dd [a + b];
                                    b + a
(%o2)                  lambda([y], y     )
(%i3) dd [v - u];
                                    v - u
(%o3)                  lambda([y], y     )
(%i4) arrayinfo (dd);
(%o4)             [hashed, 1, [b + a], [v - u]]
(%i5) listarray (dd);
                         b + a                v - u
(%o5)      [lambda([y], y     ), lambda([y], y     )]
@end example
@end deffn

@deffn {Fun@,{c}@~ao} arraymake (@var{name}, [@var{i_1}, ..., @var{i_n}])
Retorna a express@~ao @code{@var{name} [@var{i_1}, ..., @var{i_n}]}.

Isso @'e um c@'odigo remanescente de @code{funmake},
exceto o valor retornado @'e um array de refer@^encia n@~ao avaliado
ao inv@'es de uma chamada de fun@,{c}@~ao n@~ao avaliada.

@end deffn

@defvr {Vari@'avel de sistema} arrays
Valor padr@~ao: @code{[]}

@code{arrays} @'e uma lista dos arrays que tiverem sido alocados.
Essa lista compreende arrays declarados atrav@'es de @code{array},
arrays desordenados (hashed) constru@'idos atrav@'es de defini@,{c}@~ao impl@'icita (atribuindo alguma coisa a um elemento de array),
e fun@,{c}@~oes de array definidas por meio de @code{:=} e @code{define}.
Arrays definidos por meio de @code{make_array} n@~ao est@~ao inclu@'idos.

Veja tamb@'em
@code{array}, @code{arrayapply}, @code{arrayinfo}, @code{arraymake}, 
@code{fillarray}, @code{listarray}, e @code{rearray}.
@c IS THIS AN EXHAUSTIVE LIST ??

Exemplos:

@c ===beg===
@c array (aa, 5, 7);
@c bb [FOO] : (a + b)^2;
@c cc [x] := x/100;
@c dd : make_array ('any, 7);
@c arrays;
@c ===end===
@example
(%i1) array (aa, 5, 7);
(%o1)                          aa
(%i2) bb [FOO] : (a + b)^2;
                                   2
(%o2)                       (b + a)
(%i3) cc [x] := x/100;
                                   x
(%o3)                      cc  := ---
                             x    100
(%i4) dd : make_array ('any, 7);
(%o4)       @{Array:  #(NIL NIL NIL NIL NIL NIL NIL)@}
(%i5) arrays;
(%o5)                     [aa, bb, cc]
@end example

@end defvr

@deffn {Fun@,{c}@~ao} bashindices (@var{expr})
Transforma a express@~ao @var{expr} dando a cada
somat@'orio e a cada produto um @'unico @'indice.  Isso d@'a a @code{changevar} grande
precis@~ao quando se est@'a trabalhando com somat@'orios e produtos.  A forma do
@'unico @'indice @'e @code{j@var{number}}.  A quantidade @var{number} @'e determindad por
refer@^encia a @code{gensumnum}, que pode ser alterada pelo usu@'ario.  Por
exemplo, @code{gensumnum:0$} reseta isso.

@end deffn

@deffn {Fun@,{c}@~ao} fillarray (@var{A}, @var{B})
Preenche o array @var{A} com @var{B}, que @'e uma lista ou um array.

Se @var{A} for  
um array de ponto flutuante (inteiro) ent@~ao @var{B} poder@'a ser
ou uma lista de n@'umeros (inteiros) em ponto flutuante ou outro
array em ponto flutuante (inteiro).

Se as dimens@~oes do array forem 
diferentes @var{A} @'e preenchida na ordem da maior linha.  Se n@~ao existem elementos
livres em @var{B} o @'ultimo elemento @'e usado para preencher todo o 
resto de @var{A}.  Se existirem muitos os restantes ser@~ao 
descartados.

@code{fillarray} retorna esse primeiro argumento.

@end deffn

@deffn {Fun@,{c}@~ao} listarray (@var{A})
Retorna uma lista dos elementos do array @var{A}.
O argumento @var{A} pode ser um array declarado, um array n@~ao declarado (desordenado - hashed),
uma fun@,{c}@~ao de array, ou uma fun@,{c}@~ao com subscritos.

Elementos s@~ao listados em ordem de linha maior.
Isto @'e, elementos s@~ao ordenados conforme o primeiro @'indice, en seguida conforme o segundo @'indice, e assim sucessivamente.
A sequ@"u@^encia de ordena@,{c}@~ao por meio dos valores dos @'indices @'e a mesma ordem estabelecida por meio de @code{orderless}.

Para arrays n@~ao declarados , fun@,{c}@~oes de arrays, e fun@,{c}@~oes com subscritos,
os elementos correspondem aos valores de @'indice retornados atrav@'es de @code{arrayinfo}.

Elemetos n@~ao associados de arrays gen@'ericos declarados (isto @'e, n@~ao @code{fixnum} e n@~ao @code{flonum})
s@~ao retornados como @code{#####}.
Elementos n@~ao associados de arrays declarados @code{fixnum} ou @code{flonum}
s@~ao retornados como 0 ou 0.0, respectivamente.
Elementos n@~ao associados de arrays n@~ao declarados, fun@,{c}@~oes de array,
e fun@,{c}@~oes subscritas n@~ao s@~ao retornados.

Exemplos:

@code{listarray} e @code{arrayinfo} aplicados a um array declarado.

@c ===beg===
@c array (aa, 2, 3);
@c aa [2, 3] : %pi;
@c aa [1, 2] : %e;
@c listarray (aa);
@c arrayinfo (aa);
@c ===end===
@example
(%i1) array (aa, 2, 3);
(%o1)                          aa
(%i2) aa [2, 3] : %pi;
(%o2)                          %pi
(%i3) aa [1, 2] : %e;
(%o3)                          %e
(%i4) listarray (aa);
(%o4) [#####, #####, #####, #####, #####, #####, %e, #####, 
                                        #####, #####, #####, %pi]
(%i5) arrayinfo (aa);
(%o5)                 [declared, 2, [2, 3]]
@end example

@code{listarray} e @code{arrayinfo} aplicadas a arrays n@~ao declarados (hashed - desordenados).

@c ===beg===
@c bb [FOO] : (a + b)^2;
@c bb [BAR] : (c - d)^3;
@c listarray (bb);
@c arrayinfo (bb);
@c ===end===
@example
(%i1) bb [FOO] : (a + b)^2;
                                   2
(%o1)                       (b + a)
(%i2) bb [BAR] : (c - d)^3;
                                   3
(%o2)                       (c - d)
(%i3) listarray (bb);
                              3         2
(%o3)                 [(c - d) , (b + a) ]
(%i4) arrayinfo (bb);
(%o4)               [hashed, 1, [BAR], [FOO]]
@end example

@code{listarray} e @code{arrayinfo} aplicada a uma fun@,{c}@~ao de array.

@c ===beg===
@c cc [x, y] := y / x;
@c cc [u, v];
@c cc [4, z];
@c listarray (cc);
@c arrayinfo (cc);
@c ===end===
@example
(%i1) cc [x, y] := y / x;
                                     y
(%o1)                      cc     := -
                             x, y    x
(%i2) cc [u, v];
                                v
(%o2)                           -
                                u
(%i3) cc [4, z];
                                z
(%o3)                           -
                                4
(%i4) listarray (cc);
                              z  v
(%o4)                        [-, -]
                              4  u
(%i5) arrayinfo (cc);
(%o5)              [hashed, 2, [4, z], [u, v]]
@end example

@code{listarray} e @code{arrayinfo} aplicadas a fun@,{c}@~oes com subscritos.

@c ===beg===
@c dd [x] (y) := y ^ x;
@c dd [a + b];
@c dd [v - u];
@c listarray (dd);
@c arrayinfo (dd);
@c ===end===
@example
(%i1) dd [x] (y) := y ^ x;
                                     x
(%o1)                     dd (y) := y
                            x
(%i2) dd [a + b];
                                    b + a
(%o2)                  lambda([y], y     )
(%i3) dd [v - u];
                                    v - u
(%o3)                  lambda([y], y     )
(%i4) listarray (dd);
                         b + a                v - u
(%o4)      [lambda([y], y     ), lambda([y], y     )]
(%i5) arrayinfo (dd);
(%o5)             [hashed, 1, [b + a], [v - u]]
@end example

@end deffn

@c NEEDS CLARIFICATION, EXAMPLES
@deffn {Fun@,{c}@~ao} make_array (@var{type}, @var{dim_1}, ..., @var{dim_n})
Cria e retorna um array de Lisp.  @var{type} pode
ser @code{any}, @code{flonum}, @code{fixnum}, @code{hashed} ou
@code{functional}.
Existem @math{n} indices,
e o @math{i}'en@'esimo indice est@'a no intervalo de 0 a @math{@var{dim_i} - 1}.

A vantagem de @code{make_array} sobre @code{array} @'e que o valor de retorno n@~ao tem 
um nome, e uma vez que um ponteiro a ele vai, ele ir@'a tamb@'em.
Por exemplo, se @code{y: make_array (...)} ent@~ao @code{y} aponta para um objeto 
que ocupa espa@,{c}o, mas depois de @code{y: false}, @code{y} n@~ao mais
aponta para aquele objeto, ent@~ao o objeto pode ser descartado.  

@c NEEDS CLARIFICATION HERE
@c 'FUNCTIONAL ARGUMENT IN MAKE_ARRAY APPEARS TO BE BROKEN
@c EVEN AFTER READING THE CODE (SRC/AR.LISP) I CAN'T TELL HOW THIS IS SUPPOSED TO WORK
@c COMMENTING OUT THIS STUFF TO PREVENT CONFUSION AND HEARTBREAK
@c RESTORE IT WHEN MAKE_ARRAY ('FUNCTIONAL, ...) IS FIXED
@c @code{y: make_array ('functional, 'f, 'hashed, 1)} - the second argument to
@c @code{make_array} in this case is the function to call to calculate array
@c elements, and the rest of the arguments are passed recursively to
@c @code{make_array} to generate the "memory" for the array function object.

@end deffn

@c DOES THIS MODIFY A OR DOES IT CREATE A NEW ARRAY ??
@deffn {Fun@,{c}@~ao} rearray (@var{A}, @var{dim_1}, ..., @var{dim_n})
Altera as dimen@,{c}@~oes de um array.  
O novo array ser@'a preenchido com os elementos do antigo em
ordem da maior linha.  Se o array antigo era muito pequeno, 
os elementos restantes ser@~ao preenchidos com
@code{false}, @code{0.0} ou @code{0},
dependendo do tipo do array.  O tipo do array n@~ao pode ser
alterado.

@end deffn

@deffn {Fun@,{c}@~ao} remarray (@var{A_1}, ..., @var{A_n})
@deffnx {Fun@,{c}@~ao} remarray (all)
Remove arrays e fun@,{c}@~oes associadas
a arrays e libera o espa@,{c}o ocupado.
Os argumentos podem ser arrays declarados, arrays n@~ao declarados (dsordenados - hashed), fun@,{c}@~oes de array functions, e fun@,{c}@~oes com subscritos.

@code{remarray (all)} remove todos os @'itens na lista global @code{arrays}.

@c WHAT DOES THIS MEAN EXACTLY ??
Isso pode ser necess@'ario para usar essa fun@,{c}@~ao se isso @'e
desejado para redefinir os valores em um array desordenado.

@code{remarray} retorna a lista dos arrays removidos.

@end deffn
@deffn {Fun@,{c}@~ao} subvar (@var{x}, @var{i})
Avalia a express@~ao subscrita @code{@var{x}[@var{i}]}.

@code{subvar} avalia seus argumentos.

@code{arraymake (@var{x}, [@var{i}]} constr@'oi a express@~ao @code{@var{x}[@var{i}]},
mas n@~ao a avalia.

Exemplos:

@c ===beg===
@c x : foo $
@c i : 3 $
@c subvar (x, i);
@c foo : [aa, bb, cc, dd, ee]$
@c subvar (x, i);
@c arraymake (x, [i]);
@c ''%;
@c ===end===
@example
(%i1) x : foo $

(%i2) i : 3 $

(%i3) subvar (x, i);
(%o3) foo
 3
(%i4) foo : [aa, bb, cc, dd, ee]$

(%i5) subvar (x, i);
(%o5) +(%i6) arraymake (x, [i]);
(%o6) foo
 3
(%i7) ''%;
(%o7) +@end example

@end deffn

@c THIS IS REALLY CONFUSING
@defvr {Vari@'avel de p@value{cedilha}@~ao} use_fast_arrays
- Se @code{true} somente dois tipos de arrays s@~ao reconhecidos.  

1) O array art-q (t no Lisp Comum) que pode ter muitas dimens@~oes
indexadas por inteiros, e pode aceitar qualquer objeto do Lisp ou do Maxima como uma
entrada.  Para construir assim um array, insira @code{a:make_array(any,3,4);} 
ent@~ao @code{a} ter@'a como valor, um array com doze posi@,{c}@~oes, e o 
@'indice @'e baseado em zero.

2) O array Hash_table que @'e o tipo padr@~ao de array criado se um
faz @code{b[x+1]:y^2} (e @code{b} n@~ao @'e ainda um array, uma lista, ou uma
matriz -- se isso ou um desses ocorrer um erro pode ser causado desde
@code{x+1} n@~ao poder@'a ser um subscrito v@'alido para um array art-q, uma lista ou
uma matriz).  Esses @'indices (tamb@'em conhecidos como chaves) podem ser quaisquer objetos.  
Isso somente pega uma chave por vez a cada vez (@code{b[x+1,u]:y} ignorar@'a o @code{u}).  
A refer@^encia termina em @code{b[x+1] ==> y^2}.  Certamente a chave poe ser uma lista
, e.g.  @code{b[[x+1,u]]:y} poder@'a ser v@'alido.  Isso @'e incompat@'ivel 
com os arrays antigos do Maxima, mas poupa recursos.

Uma vantagem de armazenar os arrays como valores de s@'imbolos @'e que as
conven@,{c}@~oes usuais sobre vari@'aveis locais de uma fun@,{c}@~ao aplicam-se a arrays
tamb@'em.  O tipo Hash_table tamb@'em usa menos recursos e @'e mais eficiente
que o velho tipo hashar do Maxima.  Para obter comportamento consistente em
c@'odigos traduzidos e compilados posicione @code{translate_fast_arrays} para ser
@code{true}.
 
@end defvr
