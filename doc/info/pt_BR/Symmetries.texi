@c Language: Brazilian Portuguese, Encoding: iso-8859-1
@c /Symmetries.texi/1.9/Thu Apr 21 04:58:35 2005/-ko/
@c arquivo gentilmente traduzido por Helciclever Barros da Silva
@c end concepts Symmetries
@menu
* Defini@value{cedilha}@~{o}es para Simetrias::  
@end menu

@node Defini@value{cedilha}@~{o}es para Simetrias,  , Simetrias, Simetrias
@section Defini@value{cedilha}@~{o}es para Simetrias

@deffn {Fun@value{cedilha}@~{a}o} comp2pui (@var{n}, @var{l})
realiza a passagem das fun@value{cedilha}@~{o}es sim@'{e}tricas
completas, dadas na lista @var{l}, @`as fun@value{cedilha}@~{o}es 
sim@'{e}tricas elementares de 0 a @var{n}. Se a lista
@var{l} cont@'{e}m menos de @code{@var{n}+1} elementos os valores formais v@^{e}m
complet@'{a}-los. O primeiro elemento da lista @var{l} fornece o cardinal
do alfabeto se ele existir, se n@~{a}o existir coloca-se igual a @var{n}.

@c GENERATED FROM THE FOLLOWING
@c comp2pui (3, [4, g]);
@example
(%i1) comp2pui (3, [4, g]);
                        2                    2
(%o1)    [4, g, 2 h2 - g , 3 h3 - g h2 + g (g  - 2 h2)]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} cont2part (@var{pc}, @var{lvar})
Torna o polin@^{o}mio particionado associado 
@`a forma contra@'{i}da @var{pc} cujas vari@'{a}veis est@~{a}o em @var{lvar}.

@c GENERATED FROM THE FOLLOWING
@c pc: 2*a^3*b*x^4*y + x^5;
@c cont2part (pc, [x, y]);
@example
(%i1) pc: 2*a^3*b*x^4*y + x^5;
                           3    4      5
(%o1)                   2 a  b x  y + x
(%i2) cont2part (pc, [x, y]);
                                   3
(%o2)              [[1, 5, 0], [2 a  b, 4, 1]]
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}a de representa@value{cedilha}@~{a}o :

@code{contract}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} contract (@var{psym}, @var{lvar})
torna uma forma contra@'{i}da (i.e. um mon@^{o}mio
por @'{o}rbita sobre a a@value{cedilha}@~{a}o do grupo sim@'{e}trico) do polin@^{o}mio @var{psym}
em vari@'{a}veis contidas na lista @var{lvar}. A fun@value{cedilha}@~{a}o @code{explose}
realisa a opera@value{cedilha}@~{a}o inversa. A fun@value{cedilha}@~{a}o @code{tcontract} testa adicionalmente
a simetria do polin@^{o}mio.

@c GENERATED FROM THE FOLLOWING
@c psym: explose (2*a^3*b*x^4*y, [x, y, z]);
@c contract (psym, [x, y, z]);
@example
(%i1) psym: explose (2*a^3*b*x^4*y, [x, y, z]);
         3      4      3      4      3    4        3    4
(%o1) 2 a  b y z  + 2 a  b x z  + 2 a  b y  z + 2 a  b x  z

                                           3      4      3    4
                                      + 2 a  b x y  + 2 a  b x  y
(%i2) contract (psym, [x, y, z]);
                              3    4
(%o2)                      2 a  b x  y
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}a de representa@value{cedilha}@~{a}o :

@code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} direct ([@var{p_1}, ..., @var{p_n}], @var{y}, @var{f}, [@var{lvar_1}, ..., @var{lvar_n}])
calcula a im@'{a}gem
direta (veja M. GIUSTI, D. LAZARD et A. VALIBOUZE, ISSAC 1988, Rome)
associada @`a fun@value{cedilha}@~{a}o @var{f}, nas listas de vari@'{a}veis @var{lvar_1}, ..., @var{lvar_n},
e nos polin@^{o}mios @var{p_1}, ..., @var{p_n} de uma vari@'{a}vel @var{y}. l'arite' da fun@value{cedilha}@~{a}o
@var{f} @'{e} importante para o c@'{a}lculo. Assim, se a express@~{a}o de @var{f} n@~{a}o depende
de uma vari@'{a}vel, n@~{a}o somente @'{e} in@'{u}til fornecer essa
vari@'{a}vel como tamb@'{e}m diminui consideravelmente os c@'{a}lculos se a vari@'{a}vel n@~{a}o for
fornecida.

@c GENERATED FROM THE FOLLOWING
@c direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
@c               z, b*v + a*u, [[u, v], [a, b]]);
@c ratsimp (%);
@c ratsimp (direct ([z^3-e1*z^2+e2*z-e3,z^2  - f1* z + f2],
@c               z, b*v + a*u, [[u, v], [a, b]]));
@example
(%i1) direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
              z, b*v + a*u, [[u, v], [a, b]]);
       2
(%o1) y  - e1 f1 y

                                 2            2             2   2
                  - 4 e2 f2 - (e1  - 2 e2) (f1  - 2 f2) + e1  f1
                + -----------------------------------------------
                                         2
(%i2) ratsimp (%);
              2                2                   2
(%o2)        y  - e1 f1 y + (e1  - 4 e2) f2 + e2 f1
(%i3) ratsimp (direct ([z^3-e1*z^2+e2*z-e3,z^2  - f1* z + f2],
              z, b*v + a*u, [[u, v], [a, b]]));
       6            5         2                        2    2   4
(%o3) y  - 2 e1 f1 y  + ((2 e1  - 6 e2) f2 + (2 e2 + e1 ) f1 ) y

                          3                               3   3
 + ((9 e3 + 5 e1 e2 - 2 e1 ) f1 f2 + (- 2 e3 - 2 e1 e2) f1 ) y

         2       2        4    2
 + ((9 e2  - 6 e1  e2 + e1 ) f2

                    2       2       2                   2    4
 + (- 9 e1 e3 - 6 e2  + 3 e1  e2) f1  f2 + (2 e1 e3 + e2 ) f1 )

  2          2                      2     3          2
 y  + (((9 e1  - 27 e2) e3 + 3 e1 e2  - e1  e2) f1 f2

                 2            2    3                5
 + ((15 e2 - 2 e1 ) e3 - e1 e2 ) f1  f2 - 2 e2 e3 f1 ) y

           2                   3           3     2   2    3
 + (- 27 e3  + (18 e1 e2 - 4 e1 ) e3 - 4 e2  + e1  e2 ) f2

         2      3                   3    2   2
 + (27 e3  + (e1  - 9 e1 e2) e3 + e2 ) f1  f2

                   2    4        2   6
 + (e1 e2 e3 - 9 e3 ) f1  f2 + e3  f1
@end example

Pesquisa de polin@^{o}mios cujas ra@'{i}zes s@~{a}o a soma a+u ou a @'{e}
a ra@'{i}z de z^2  - e1* z + e2 e u @'{e} a ra@'{i}z de z^2  - f1* z + f2

@c GENERATED FROM THE FOLLOWING
@c ratsimp (direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
@c                           z, a + u, [[u], [a]]));
@example
(%i1) ratsimp (direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
                          z, a + u, [[u], [a]]));
       4                    3             2
(%o1) y  + (- 2 f1 - 2 e1) y  + (2 f2 + f1  + 3 e1 f1 + 2 e2

     2   2                              2               2
 + e1 ) y  + ((- 2 f1 - 2 e1) f2 - e1 f1  + (- 2 e2 - e1 ) f1

                  2                     2            2
 - 2 e1 e2) y + f2  + (e1 f1 - 2 e2 + e1 ) f2 + e2 f1  + e1 e2 f1

     2
 + e2
@end example

@code{direct} pode assumir dois sinalizadores: @code{elementaires} (elementares) e
@code{puissances} (exponenciais - valor padr@~{a}o) que permitem a decomposi@value{cedilha}@~{a}o
de polin@^{o}mios sim@'{e}tricos que aparecerem nesses c@'{a}lculos pelas
fun@value{cedilha}@~{o}es sim@'{e}tricas elementares ou pelas fun@value{cedilha}@~{o}es exponenciais
respectivamente.

Fun@value{cedilha}@~{o}es de @code{sym} utilizadas nesta fun@value{cedilha}@~{a}o :

@code{multi_orbit} (portanto @code{orbit}), @code{pui_direct}, @code{multi_elem}
(portanto @code{elem}), @code{multi_pui} (portanto @code{pui}), @code{pui2ele}, @code{ele2pui}
(se o sinalizador @code{direct} for escolhido para @code{puissances}).

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} ele2comp (@var{m}, @var{l})
passa das fun@value{cedilha}@~{o}es sim@'{e}tricas elementares
para fun@value{cedilha}@~{o}es completas. Semelhante a @code{comp2ele} e a @code{comp2pui}.

Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}as de base :

@code{comp2ele}, @code{comp2pui}, @code{ele2pui}, @code{elem}, @code{mon2schur}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} ele2polynome (@var{l}, @var{z})
fornece o polin@^{o}mio em @var{z} cujas fun@value{cedilha}@~{o}es
sim@'{e}tricas elementares das ra@'{i}zes estiverem na lista @var{l}.
@code{@var{l} = [@var{n}, @var{e_1}, ..., @var{e_n}]} onde @var{n} @'{e} o grau do polin@^{o}mio
e @var{e_i} @'{e} a @var{i}-@'{e}sima
fun@value{cedilha}@~{a}o sim@'{e}trica elementar.

@c GENERATED FROM THE FOLLOWING
@c ele2polynome ([2, e1, e2], z);
@c polynome2ele (x^7 - 14*x^5 + 56*x^3  - 56*x + 22, x);
@c ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
@example
(%i1) ele2polynome ([2, e1, e2], z);
                          2
(%o1)                    z  - e1 z + e2
(%i2) polynome2ele (x^7 - 14*x^5 + 56*x^3  - 56*x + 22, x);
(%o2)          [7, 0, - 14, 0, 56, 0, - 56, - 22]
(%i3) ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
                  7       5       3
(%o3)            x  - 14 x  + 56 x  - 56 x + 22
@end example

@noindent
   
A rec@'{i}proca: @code{polynome2ele (@var{P}, @var{z})}

Veja tamb@'{e}m:

@code{polynome2ele}, @code{pui2polynome}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} ele2pui (@var{m}, @var{l})
passa de fun@value{cedilha}@~{o}es sim@'{e}tricas elementares 
para fun@value{cedilha}@~{o}es completas. Similar a @code{comp2ele} e @code{comp2pui}.

Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}as de base :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{elem}, @code{mon2schur}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} elem (@var{ele}, @var{sym}, @var{lvar})
decomp@~{o}e o polin@^{o}mio sim@'{e}trico @var{sym}, nas vari@'{a}veis
cont@'{i}nuas da lista @var{lvar}, em fun@value{cedilha}@~{o}es sim@'{e}tricas elementares 
contidas na lista @var{ele}. Se o primeiro elemento de @var{ele} for fornecido
esse ser@'{a} o cardinal do alfabeto se n@~{a}o for utilizado o grau do polin@^{o}mio
@var{sym}. Se falta valores para a lista @var{ele} valores formais
do tipo "ei" s@~{a}o novamente colocados para completar a lista. O polin@^{o}mio @var{sym} pode ser fornecido
de 3 formas diferentes : contra@'{i}da (@code{elem} deve protanto valer 1 que @'{e} seu valor
padr@~{a}o), particionada (@code{elem} deve valer 3) ou extendida (i.e. o
polin@^{o}mio por completo) (@code{elem} deve valer 2). A utiliza@value{cedilha}@~{a}o
da fun@value{cedilha}@~{a}o @code{pui} se realiza sobre o mesmo modelo.

Sob um alfabeto de cardinal 3 com @var{e1}, a primeira fun@value{cedilha}@~{a}o sim@'{e}trica
elementar, valendo 7, o polin@^{o}mio sim@'{e}trico em 3 vari@'{a}veis cuja
forma contra@'{i}da (aqui, s@'{o} depende de duas de suas vari@'{a}veis)
@'{e} x^4-2*x*y decomp@~{o}e-se em fun@value{cedilha}@~{o}es sim@'{e}tricas 
elementares :

@c GENERATED FROM THE FOLLOWING
@c elem ([3, 7], x^4 - 2*x*y, [x, y]);
@c ratsimp (%);
@example
(%i1) elem ([3, 7], x^4 - 2*x*y, [x, y]);
(%o1) 7 (e3 - 7 e2 + 7 (49 - e2)) + 21 e3

                                         + (- 2 (49 - e2) - 2) e2
(%i2) ratsimp (%);
                              2
(%o2)             28 e3 + 2 e2  - 198 e2 + 2401
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}as de base :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui},
@code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} explose (@var{pc}, @var{lvar})
toma o polin@^{o}mio sim@'{e}trico associado @`a forma 
contra@'{i}da @var{pc}. A lista @var{lvar} cont@'{e}m vari@'{a}veis.

@c GENERATED FROM THE FOLLOWING
@c explose (a*x + 1, [x, y, z]);
@example
(%i1) explose (a*x + 1, [x, y, z]);
(%o1)                  a z + a y + a x + 1
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}a de representa@value{cedilha}@~{a}o :

@code{contract}, @code{cont2part}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} kostka (@var{part_1}, @var{part_2})
escrita por P. ESPERET, calcula o n@'{u}mero de
Kostka associado @`as parti@value{cedilha}@~{o}es @var{part_1} e @var{part_2}.

@c GENERATED FROM THE FOLLOWING
@c kostka ([3, 3, 3], [2, 2, 2, 1, 1, 1]);
@example
(%i1) kostka ([3, 3, 3], [2, 2, 2, 1, 1, 1]);
(%o1)                           6
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} lgtreillis (@var{n}, @var{m})
torna a lista de parti@value{cedilha}@~{o}es de peso @var{n} e de largura @var{m}.

@c GENERATED FROM THE FOLLOWING
@c lgtreillis (4, 2);
@example
(%i1) lgtreillis (4, 2);
(%o1)                   [[3, 1], [2, 2]]
@end example

Veja tamb@'{e}m : @code{ltreillis}, @code{treillis} e @code{treinat}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} ltreillis (@var{n}, @var{m})
torna a lista de parti@value{cedilha}@~{o}es de peso @var{n} e largura 
menor ou igual a @var{m}.

@c GENERATED FROM THE FOLLOWING
@c ltreillis (4, 2);
@example
(%i1) ltreillis (4, 2);
(%o1)               [[4, 0], [3, 1], [2, 2]]
@end example

@noindent
Veja tamb@'{e}m : @code{lgtreillis}, @code{treillis} e @code{treinat}.

@end deffn

@c NOT REALLY HAPPY ABOUT MATH NOTATION HERE
@deffn {Fun@value{cedilha}@~{a}o} mon2schur (@var{l})
A lista @var{l} representa a fun@value{cedilha}@~{a}o de Schur S_@var{l}:
@c On a = sendo
Temos @var{l} = [@var{i_1}, @var{i_2}, ..., @var{i_q}]
com @var{i_1} <= @var{i_2} <= ... <= @var{i_q}.
A fun@value{cedilha}@~{a}o de Schur @'{e} S_[@var{i_1}, @var{i_2}, ..., @var{i_q}]
@'{e} a menor da mariz infinita (h_@{i-j@}) @var{i} >= 1, @var{j} >= 1 composta
das @var{q} primeiras linhas e de colunas @var{i_1} + 1, @var{i_2} + 2, ..., @var{i_q} + @var{q}.

Escreve-se essa fun@value{cedilha}@~{a}o de Schur em fun@value{cedilha}@~{a}o das
formas monomiais utilizando as fun@value{cedilha}@~{o}es @code{treinat} e @code{kostka}. A forma
retornada @'{e} um polin@^{o}mio sim@'{e}trico em uma de suas representa@value{cedilha}@~{o}es
contra@'{i}das com as vari@'{a}veis @var{x_1}, @var{x_2}, ....
 
@c GENERATED FROM THE FOLLOWING
@c mon2schur ([1, 1, 1]);
@c mon2schur ([3]);
@c mon2schur ([1, 2]);
@example
(%i1) mon2schur ([1, 1, 1]);
(%o1)                       x1 x2 x3
(%i2) mon2schur ([3]);
                                  2        3
(%o2)                x1 x2 x3 + x1  x2 + x1
(%i3) mon2schur ([1, 2]);
                                      2
(%o3)                  2 x1 x2 x3 + x1  x2
@end example

@noindent
queremos dizer que para 3 vari@'{a}veis tem-se :

@c UM, FROM WHAT ARGUMENTS WAS THE FOLLOWING GENERATED ??
@example
   2 x1 x2 x3 + x1^2 x2 + x2^2 x1 + x1^2 x3 + x3^2 x1
    + x2^2 x3 + x3^2 x2
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}as de base :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} multi_elem (@var{l_elem}, @var{multi_pc}, @var{l_var})
decomp@~{o}e um polin@^{o}mio 
multi-sim@'{e}trico sob a forma multi-contra@'{i}da @var{multi_pc} nos grupos
de vari@'{a}veis contidas na lista de listas @var{l_var} sobre os
groupos de fun@value{cedilha}@~{o}es sim@'{e}tricas elementares contidas em @var{l_elem}.

@c GENERATED FROM THE FOLLOWING
@c multi_elem ([[2, e1, e2], [2, f1, f2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
@c ratsimp (%);
@example
(%i1) multi_elem ([[2, e1, e2], [2, f1, f2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
                                                  3
(%o1)         - 2 f2 + f1 (f1 + e1) - 3 e1 e2 + e1
(%i2) ratsimp (%);
                         2                       3
(%o2)         - 2 f2 + f1  + e1 f1 - 3 e1 e2 + e1
@end example

Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}as de base :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele},
@code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} multi_orbit (@var{P}, [@var{lvar_1}, @var{lvar_2}, ..., @var{lvar_p}])
@var{P} @'{e} um polin@^{o}mio no conjunto
das vari@'{a}veis contidas nas listas @var{lvar_1}, @var{lvar_2}, ..., @var{lvar_p}. 
Essa fun@value{cedilha}@~{a}o leva novamente na @'{o}rbita do polin@^{o}mio @var{P} sob a a@value{cedilha}@~{a}o do do produto 
dos grupos sim@'{e}tricos dos conjuntos de vari@'{a}veis representados por 
essas @var{p} listas.

@c GENERATED FROM THE FOLLOWING
@c multi_orbit (a*x + b*y, [[x, y], [a, b]]);
@c multi_orbit (x + y + 2*a, [[x, y], [a, b, c]]);
@example
(%i1) multi_orbit (a*x + b*y, [[x, y], [a, b]]);
(%o1)                [b y + a x, a y + b x]
(%i2) multi_orbit (x + y + 2*a, [[x, y], [a, b, c]]);
(%o2)        [y + x + 2 c, y + x + 2 b, y + x + 2 a]
@end example

@noindent
Veja tamb@'{e}m : @code{orbit} pela a@value{cedilha}@~{a}o de um s@'{o} grupo sim@'{e}trico.

@end deffn

@c WHAT ARE THE ARGUMENTS FOR THIS FUNCTION ??
@deffn {Fun@value{cedilha}@~{a}o} multi_pui
est@'{a} para a fun@value{cedilha}@~{a}o @code{pui} da mesma forma que a fun@value{cedilha}@~{a}o @code{multi_elem} est@'{a}
para a fun@value{cedilha}@~{a}o @code{elem}.

@c GENERATED FROM THE FOLLOWING
@c multi_pui ([[2, p1, p2], [2, t1, t2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
@example
(%i1) multi_pui ([[2, p1, p2], [2, t1, t2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
                                            3
                                3 p1 p2   p1
(%o1)              t2 + p1 t1 + ------- - ---
                                   2       2
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} multinomial (@var{r}, @var{part})
onde @var{r} @'{e} o peso da parti@value{cedilha}@~{a}o @var{part}. Essa
fun@value{cedilha}@~{a}o reporta ao coeficiente multinomial associado : se as
partes das parti@value{cedilha}@~{o}es @var{part} forem @var{i_1}, @var{i_2}, ..., @var{i_k}, o resultado de
@code{multinomial} @'{e} @code{@var{r}!/(@var{i_1}! @var{i_2}! ... @var{i_k}!)}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} multsym (@var{ppart_1}, @var{ppart_2}, @var{n})
realiza o produto de dois polin@^{o}mios
sim@'{e}tricos de @var{n} vari@'{a}veis s@'{o} trabalhando o m@'{o}dulo da a@value{cedilha}@~{a}o do
grupo sim@'{e}trico de ordem @var{n}. Os polin@^{o}mios est@~{a}o em sua representa@value{cedilha}@~{a}o
particionada. 

Sejam os 2 polin@^{o}mios sim@'{e}tricos em @code{x}, @code{y}: @code{3*(x + y) + 2*x*y} e @code{5*(x^2 + y^2)}
cujas formas particionada s@~{a}o respectivamente @code{[[3, 1], [2, 1, 1]]} e @code{[[5, 2]]},
ent@~{a}o seu produto ser@'{a} dado por :

@c GENERATED FROM THE FOLLOWING
@c multsym ([[3, 1], [2, 1, 1]], [[5, 2]], 2);
@example
(%i1) multsym ([[3, 1], [2, 1, 1]], [[5, 2]], 2);
(%o1)         [[10, 3, 1], [15, 3, 0], [15, 2, 1]]
@end example

@noindent
seja @code{10*(x^3*y + y^3*x) + 15*(x^2*y + y^2*x) + 15*(x^3 + y^3)}.

Fun@value{cedilha}@~{o}es de mudan@value{cedilha}a de representa@value{cedilha}@~{a}o de um polin@^{o}mio sim@'{e}trico :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont},
@code{partpol}, @code{tcontract}, @code{tpartpol}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} orbit (@var{P}, @var{lvar})
calcula a @'{o}rbita de um polin@^{o}mio @var{P} nas vari@'{a}veis da lista
@var{lvar} soba a a@value{cedilha}@~{a}o do grupo sim@'{e}trico do conjunto das vari@'{a}veis contidas
na lista @var{lvar}.
 
@c GENERATED FROM THE FOLLOWING
@c orbit (a*x + b*y, [x, y]);
@c orbit (2*x + x^2, [x, y]);
@example
(%i1) orbit (a*x + b*y, [x, y]);
(%o1)                [a y + b x, b y + a x]
(%i2) orbit (2*x + x^2, [x, y]);
                        2         2
(%o2)                 [y  + 2 y, x  + 2 x]
@end example

@noindent
Veja tamb@'{e}m : @code{multi_orbit} para a a@value{cedilha}@~{a}o de um produto de grupos 
sim@'{e}tricos sobre um polin@^{o}mio.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} part2cont (@var{ppart}, @var{lvar})
passa da form particionada @`a forma contra@'{i}da
d um polin@^{o}mio sim@'{e}trico. A forma contra@'{i}da @'{e} conseguida com as vari@'{a}veis
contidas em  @var{lvar}.

@c GENERATED FROM THE FOLLOWING
@c part2cont ([[2*a^3*b, 4, 1]], [x, y]);
@example
(%i1) part2cont ([[2*a^3*b, 4, 1]], [x, y]);
                              3    4
(%o1)                      2 a  b x  y
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}a de representa@value{cedilha}@~{a}o :

@code{contract}, @code{cont2part}, @code{explose}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} partpol (@var{psym}, @var{lvar})
@var{psym} @'{e} um polin@^{o}mio sim@'{e}trico nas vari@'{a}veis 
de @var{lvar}. Esta fun@value{cedilha}@~{a}o retoma sua representa@value{cedilha}@~{a}o particionada.

@c GENERATED FROM THE FOLLOWING
@c partpol (-a*(x + y) + 3*x*y, [x, y]);
@example
(%i1) partpol (-a*(x + y) + 3*x*y, [x, y]);
(%o1)               [[3, 1, 1], [- a, 1, 0]]
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}a de representa@value{cedilha}@~{a}o :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{tcontract}, @code{tpartpol}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} permut (@var{l})
retoma a lista de permuta@value{cedilha}@~{o}es da lista @var{l}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} polynome2ele (@var{P}, @var{x})
fornece a lista @code{@var{l} = [@var{n}, @var{e_1}, ..., @var{e_n}]} onde @var{n} @'{e} o grau
do polin@^{o}mio @var{P} na vari@'{a}vel @var{x} e @var{e_i} @'{e} a @var{i}-@'{e}zima fun@value{cedilha}@~{a}o sim@'{e}trica
elementar das ra@'{i}zes de @var{P}.

@c GENERATED FROM THE FOLLOWING
@c polynome2ele (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x);
@c ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
@example
(%i1) polynome2ele (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x);
(%o1)          [7, 0, - 14, 0, 56, 0, - 56, - 22]
(%i2) ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
                  7       5       3
(%o2)            x  - 14 x  + 56 x  - 56 x + 22
@end example

@noindent
A rec@'{i}proca : @code{ele2polynome (@var{l}, @var{x})}

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} prodrac (@var{l}, @var{k})
@var{l} @'{e} uma lista que cont@'{e}m as fun@value{cedilha}@~{o}es sim@'{e}tricas 
elementares sob um conjunto @var{A}. @code{prodrac} produz o polin@^{o}mio cujas
ra@'{i}zes s@~{a}o os produtos @var{k} a @var{k} dos elementos de @var{A}.

@end deffn

@c HMM, pui IS A VARIABLE AS WELL
@deffn {Fun@value{cedilha}@~{a}o} pui (@var{l}, @var{sym}, @var{lvar})
decomp@~{o}e o polin@^{o}mio sim@'{e}trico @var{sym}, nas vari@'{a}veis
contidas a lista @var{lvar}, nas fun@value{cedilha}@~{o}es exponenciais
contidas na lista @var{l}. Se o primeiro elemento de @var{l} for dado
ele ser@'{a} o cardinal do alfabeto se n@~{a}o for dado toma-se o grau do polin@^{o}mio
@var{sym} para ser o cardinal do alfabeto. Se faltarem valores na lista @var{l}, valores formais
do typo "pi" ser@~{a}o colocados na lista. O polin@^{o}mio @code{sym} pode ser dado
sob 3 formas diferentes : contra@'{i}da (@code{pui} deve valer 1 - seu valor
padr@~{a}o), particionada (@code{pui} deve valer 3) ou estendida (i.e. o
polin@^{o}mio por completo) (@code{pui} deve valer 2). A fun@value{cedilha}@~{a}o @code{elem}
se utiliza da mesma maneira.

@c GENERATED FROM THE FOLLOWING
@c pui;
@c pui ([3, a, b], u*x*y*z, [x, y, z]);
@c ratsimp (%);
@example
(%i1) pui;
(%o1)                           1
(%i2) pui ([3, a, b], u*x*y*z, [x, y, z]);
                       2
                   a (a  - b) u   (a b - p3) u
(%o2)              ------------ - ------------
                        6              3
(%i3) ratsimp (%);
                                       3
                      (2 p3 - 3 a b + a ) u
(%o3)                 ---------------------
                                6
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}as de base :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem}, @code{mon2schur},
@code{multi_elem}, @code{multi_pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc},
@code{schur2comp}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} pui2comp (@var{n}, @var{lpui})
produz a lista das @var{n} primeiras fun@value{cedilha}@~{o}es completas
(com o cardinal em primeiro lugar) em fun@value{cedilha}@~{a}o das fun@value{cedilha}@~{o}es exponenciais dadas
na lista @var{lpui}. Se a lista @var{lpui} estiver vazia o cardianl ser@'{a} N, se n@~{a}o estiver vazia,
ser@'{a} o primeiro elemento de forma an@'{a}loga a @code{comp2ele} e a @code{comp2pui}.

@c GENERATED FROM THE FOLLOWING
@c pui2comp (2, []);
@c pui2comp (3, [2, a1]);
@c ratsimp (%);
@example
(%i1) pui2comp (2, []);
                                       2
                                p2 + p1
(%o1)                   [2, p1, --------]
                                   2
(%i2) pui2comp (3, [2, a1]);
                                            2
                                 a1 (p2 + a1 )
                         2  p3 + ------------- + a1 p2
                  p2 + a1              2
(%o2)     [2, a1, --------, --------------------------]
                     2                  3
(%i3) ratsimp (%);
                            2                     3
                     p2 + a1   2 p3 + 3 a1 p2 + a1
(%o3)        [2, a1, --------, --------------------]
                        2               6
@end example

@noindent
Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}as de base :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui}, @code{pui}, @code{pui2ele},
@code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} pui2ele (@var{n}, @var{lpui})
realiza a transforma@value{cedilha}@~{a}o das fun@value{cedilha}@~{o}es exponenciais em
fun@value{cedilha}@~{o}es sim@'{e}tricos elementares.
Se o sinalizador @code{pui2ele} for @code{girard}, recupera-se a lista de fun@value{cedilha}@~{o}es 
sim@'{e}tricos elementares de 1 a @var{n}, e se for igual a @code{close}, 
recupera-se a @var{n}-@'{e}zima fun@value{cedilha}@~{a}o sim@'{e}trica elementar.

Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}as de base :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui}, @code{pui}, @code{pui2comp},
@code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} pui2polynome (@var{x}, @var{lpui})
calcula o polin@^{o}mio em @var{x} cujas fun@value{cedilha}@~{o}es exponenciais
das ra@'{i}zes s@~{a}o dadas na lista @var{lpui}.

@c GENERATED FROM THE FOLLOWING
@c polynome2ele (x^3 - 4*x^2 + 5*x - 1, x);
@c ele2pui (3, %);
@c pui2polynome (x, %);
@example
(%i1) pui;
(%o1)                           1
(%i2) kill(labels);
(%o0)                         done
(%i1) polynome2ele (x^3 - 4*x^2 + 5*x - 1, x);
(%o1)                     [3, 4, 5, 1]
(%i2) ele2pui (3, %);
(%o2)                     [3, 4, 6, 7]
(%i3) pui2polynome (x, %);
                        3      2
(%o3)                  x  - 4 x  + 5 x - 1
@end example

@noindent
Autres fun@value{cedilha}@~{o}es a` voir :
@code{polynome2ele}, @code{ele2polynome}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} pui_direct (@var{orbite}, [@var{lvar_1}, ..., @var{lvar_n}], [@var{d_1}, @var{d_2}, ..., @var{d_n}])

Seja @var{f} um polin@^{o}mio em @var{n} blocos de vari@'{a}veis @var{lvar_1}, ..., @var{lvar_n}.
Seja @var{c_i} o n@'{u}mero de vari@'{a}veis em @var{lvar_i} . E @var{SC} o produto dos @var{n}
grupos sim@'{e}tricos de grau @var{c_1}, ..., @var{c_n}. Esse grupo age
naturalmente sobre @var{f}.
A Lista @var{orbite} @'{e} a @'{o}rbita, anotada de @code{@var{SC}(@var{f})}, da fun@value{cedilha}@~{a}o @var{f} sob 
a a@value{cedilha}@~{a}o de @var{SC}. (Essa lista pode ser obtida com a fun@value{cedilha}@~{a}o : 
@code{multi_orbit}).
Os @code{d_i} s@~{a}o inteiros tais que @var{c_1} <= @var{d_1}, @var{c_2} <= @var{d_2}, ..., @var{c_n} <= @var{d_n}.
Seja @var{SD} o produto dos grupos sim@'{e}tricos @var{S_d1} x @var{S_d2} x ... x @var{S_dn}.

A fun@value{cedilha}@~{a}o @code{pui_direct} retorna as @var{n} premeiras fun@value{cedilha}@~{o}es exponenciais de @code{@var{SD}(@var{f})}
dedzidas das fun@value{cedilha}@~{o}es exponenciais de @code{@var{SC}(@var{f})} onde @var{n} @'{e} o cardinal de @code{@var{SD}(@var{f})}.

O resultado @'{e} produzido sob a forma multi-contra@'{i}da em rela@value{cedilha}@~{a}o a @var{SD}.
i.e. apenas se conserva um elemento por @'{o}rbita sob a a@value{cedilha}@~{a}o de @var{SD}).

@c GENERATED FROM THE FOLLOWING
@c l: [[x, y], [a, b]];
@c pui_direct (multi_orbit (a*x + b*y, l), l, [2, 2]);
@c pui_direct (multi_orbit (a*x + b*y, l), l, [3, 2]);
@c pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a], [[x, y], [a, b, c]], [2, 3]);
@example
(%i1) l: [[x, y], [a, b]];
(%o1)                   [[x, y], [a, b]]
(%i2) pui_direct (multi_orbit (a*x + b*y, l), l, [2, 2]);
                                       2  2
(%o2)               [a x, 4 a b x y + a  x ]
(%i3) pui_direct (multi_orbit (a*x + b*y, l), l, [3, 2]);
                             2  2     2    2        3  3
(%o3) [2 a x, 4 a b x y + 2 a  x , 3 a  b x  y + 2 a  x , 

    2  2  2  2      3    3        4  4
12 a  b  x  y  + 4 a  b x  y + 2 a  x , 

    3  2  3  2      4    4        5  5
10 a  b  x  y  + 5 a  b x  y + 2 a  x , 

    3  3  3  3       4  2  4  2      5    5        6  6
40 a  b  x  y  + 15 a  b  x  y  + 6 a  b x  y + 2 a  x ]
(%i4) pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a], [[x, y], [a, b, c]], [2, 3]);
                             2              2
(%o4) [3 x + 2 a, 6 x y + 3 x  + 4 a x + 4 a , 

                 2                   3        2       2        3
              9 x  y + 12 a x y + 3 x  + 6 a x  + 12 a  x + 8 a ]
@end example
@c THIS NEXT FUNCTION CALL TAKES A VERY LONG TIME (SEVERAL MINUTES)
@c SO LEAVE IT OUT TIL PROCESSORS GET A LITTLE FASTER ...
@c pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a], [[x, y], [a, b, c]], [3, 4]);

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} puireduc (@var{n}, @var{lpui})
@var{lpui} @'{e} uma lista cujo primeiro elemento @'{e} um inteiro
@var{m}. @code{puireduc} fornece as @var{n} primeiras fun@value{cedilha}@~{o}es exponenciais em fun@value{cedilha}@~{a}o 
das @var{m} primeira.

@c GENERATED FROM THE FOLLOWING
@c puireduc (3, [2]);
@example
(%i1) puireduc (3, [2]);
                                         2
                                   p1 (p1  - p2)
(%o1)          [2, p1, p2, p1 p2 - -------------]
                                         2
(%i2) ratsimp (%);
                                           3
                               3 p1 p2 - p1
(%o2)              [2, p1, p2, -------------]
                                     2
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante (@var{P}, @var{x}, @var{f}, [@var{x_1}, ..., @var{x_d}])
calcula a resolvente do polin@^{o}mio @var{P}
em rela@value{cedilha}@~{a}o @`a vari@'{a}vel @var{x} e de grau @var{n} >= @var{d} pela fun@value{cedilha}@~{a}o @var{f} expressa nas
vari@'{a}veis @var{x_1}, ..., @var{x_d}. @'{E} importante para a efic@'{a}cia dos
c@'{a}lculos n@~{a}o colocar na lista @code{[@var{x_1}, ..., @var{x_d}]} as vari@'{a}veis
n@~{a}o interferindo na fun@value{cedilha}@~{a}o de transforma@value{cedilha}@~{a}o @var{f}.

Afim de tornar mais eficazes os c@'{a}lculos pode-se colocar sinalizadores
na vari@'{a}vel @code{resolvante} para que os algor@'{i}tmos adequados sejam
utilizados :

Se a fun@value{cedilha}@~{a}o @var{f} for unit@'{a}ria :
@itemize @bullet
@item
um polin@^{o}mio de uma vari@'{a}vel,
@item
  linear ,
@item
  alternado,
@item
  uma soma de vari@'{a}veis,
@item
  sim@'{e}trico nas vari@'{a}veis que aparecem em sua express@~{a}o,
@item
  um produto de vari@'{a}veis,
@item
a fun@value{cedilha}@~{a}o da resolvente de Cayley (utilis@'{a}vel no grau 5)

@c WHAT IS THIS ILLUSTRATING EXACTLY ??
@example
(x1*x2 + x2*x3 + x3*x4 + x4*x5 + x5*x1 -
     (x1*x3 + x3*x5 + x5*x2 + x2*x4 + x4*x1))^2
@end example

  geral,
@end itemize
o sinalizador da @code{resolvante} poder@'{a} ser respectivamente :
@itemize @bullet
@item
  unitaire,
@item
  lineaire,
@item
  alternee,
@item
  somme,
@item
  produit,
@item
  cayley,
@item
  generale.
@end itemize

@c GENERATED FROM THE FOLLOWING
@c resolvante: unitaire$
@c resolvante (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x, x^3 - 1, [x]);
@c resolvante: lineaire$
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);
@c resolvante: general$
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3, x4]);
@c direct ([x^4 - 1], x, x1 + 2*x2 + 3*x3, [[x1, x2, x3]]);
@c resolvante :lineaire$
@c resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);
@c resolvante: symetrique$
@c resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);
@c resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);
@c resolvante: alternee$
@c resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);
@c resolvante: produit$
@c resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);
@c resolvante: symetrique$
@c resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);
@c resolvante: cayley$
@c resolvante (x^5 - 4*x^2 + x + 1, x, a, []);
@example
(%i1) resolvante: unitaire$
(%i2) resolvante (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x, x^3 - 1, [x]);

" resolvante unitaire " [7, 0, 28, 0, 168, 0, 1120, - 154, 7840, - 2772, 56448, - 33880, 

413952, - 352352, 3076668, - 3363360, 23114112, - 30494464, 

175230832, - 267412992, 1338886528, - 2292126760] 
  3       6      3       9      6      3
[x  - 1, x  - 2 x  + 1, x  - 3 x  + 3 x  - 1, 

 12      9      6      3       15      12       9       6      3
x   - 4 x  + 6 x  - 4 x  + 1, x   - 5 x   + 10 x  - 10 x  + 5 x

       18      15       12       9       6      3
 - 1, x   - 6 x   + 15 x   - 20 x  + 15 x  - 6 x  + 1, 

 21      18       15       12       9       6      3
x   - 7 x   + 21 x   - 35 x   + 35 x  - 21 x  + 7 x  - 1] 
[- 7, 1127, - 6139, 431767, - 5472047, 201692519, - 3603982011] 
       7      6        5         4          3           2
(%o2) y  + 7 y  - 539 y  - 1841 y  + 51443 y  + 315133 y

                                              + 376999 y + 125253
(%i3) resolvante: lineaire$
(%i4) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);

" resolvante lineaire " 
       24       20         16            12             8
(%o4) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
(%i5) resolvante: general$
(%i6) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);

" resolvante generale " 
       24       20         16            12             8
(%o6) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
(%i7) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3, x4]);

" resolvante generale " 
       24       20         16            12             8
(%o7) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
(%i8) direct ([x^4 - 1], x, x1 + 2*x2 + 3*x3, [[x1, x2, x3]]);
       24       20         16            12             8
(%o8) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
(%i9) resolvante :lineaire$
(%i10) resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);

" resolvante lineaire " 
                              4
(%o10)                       y  - 1
(%i11) resolvante: symetrique$
(%i12) resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);

" resolvante symetrique " 
                              4
(%o12)                       y  - 1
(%i13) resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);

" resolvante symetrique " 
                           6      2
(%o13)                    y  - 4 y  - 1
(%i14) resolvante: alternee$
(%i15) resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);

" resolvante alternee " 
            12      8       6        4        2
(%o15)     y   + 8 y  + 26 y  - 112 y  + 216 y  + 229
(%i16) resolvante: produit$
(%i17) resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);

" resolvante produit "
        35      33         29        28         27        26
(%o17) y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y

         24           23          22            21           20
 + 1323 y   + 352947 y   - 46305 y   - 2463339 y   + 324135 y

          19           18             17              15
 - 30618 y   - 453789 y   - 40246444 y   + 282225202 y

             14              12             11            10
 - 44274492 y   + 155098503 y   + 12252303 y   + 2893401 y

              9            8            7             6
 - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

            5             3
 - 3720087 y  + 26040609 y  + 14348907
(%i18) resolvante: symetrique$
(%i19) resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);

" resolvante symetrique " 
        35      33         29        28         27        26
(%o19) y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y

         24           23          22            21           20
 + 1323 y   + 352947 y   - 46305 y   - 2463339 y   + 324135 y

          19           18             17              15
 - 30618 y   - 453789 y   - 40246444 y   + 282225202 y

             14              12             11            10
 - 44274492 y   + 155098503 y   + 12252303 y   + 2893401 y

              9            8            7             6
 - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

            5             3
 - 3720087 y  + 26040609 y  + 14348907
(%i20) resolvante: cayley$
(%i21) resolvante (x^5 - 4*x^2 + x + 1, x, a, []);

" resolvente de Cayley "
        6       5         4          3            2
(%o21) x  - 40 x  + 4080 x  - 92928 x  + 3772160 x  + 37880832 x

                                                       + 93392896
@end example

Pela resolvente de Cayley, os 2 @'{u}ltimos arguments s@~{a}o neutros
e o polin@^{o}mio fornecido na entrada deve ser necess@'{a}riamente de grau 5.

Veja tamb@'{e}m :

@code{resolvante_bipartite}, @code{resolvante_produit_sym},
@code{resolvante_unitaire}, @code{resolvante_alternee1}, @code{resolvante_klein}, 
@code{resolvante_klein3}, @code{resolvante_vierer}, @code{resolvante_diedrale}. 

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante_alternee1 (@var{P}, @var{x})
calcula a transforma@value{cedilha}@~{a}o de 
@c UMM, I THINK THE TEX STUFF SHOULD BE REPLACED BY @code
@code{@var{P}(@var{x})} de grau @var{n} pela fun@value{cedilha}@~{a}o $\prod_@{1\leq i<j\leq n-1@} (x_i-x_j)$.

Veja tamb@'{e}m :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante} , @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}, @code{resolvante_bipartite}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante_bipartite (@var{P}, @var{x})
calcule la transformation de 
@code{@var{P}(@var{x})} de degre @var{n} (@var{n} pair) par la fun@value{cedilha}@~{a}o 
@c UMM, I THINK THE TEX STUFF SHOULD BE REPLACED BY @code
$x_1x_2\ldots x_@{n/2@}+x_@{n/2+1@}\ldotsx_n$

Veja tamb@'{e}m :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante} , @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}, @code{resolvante_alternee1}.

@c GENERATED FROM THE FOLLOWING
@c resolvante_bipartite (x^6 + 108, x);
@example
(%i1) resolvante_bipartite (x^6 + 108, x);
              10        8           6             4
(%o1)        y   - 972 y  + 314928 y  - 34012224 y
@end example

Veja tamb@'{e}m :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale},
@code{resolvante_alternee1}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante_diedrale (@var{P}, @var{x})
calcule la transformation de
@code{@var{P}(@var{x})} par la fun@value{cedilha}@~{a}o @code{@var{x_1} @var{x_2} + @var{x_3} @var{x_4}}.

@c GENERATED FROM THE FOLLOWING
@c resolvante_diedrale (x^5 - 3*x^4 + 1, x);
@example
(%i1) resolvante_diedrale (x^5 - 3*x^4 + 1, x);
       15       12       11       10        9         8         7
(%o1) x   - 21 x   - 81 x   - 21 x   + 207 x  + 1134 x  + 2331 x

        6         5          4          3          2
 - 945 x  - 4970 x  - 18333 x  - 29079 x  - 20745 x  - 25326 x

 - 697
@end example

Veja tamb@'{e}m :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante_klein (@var{P}, @var{x})
calcule la transformation de
@code{@var{P}(@var{x})} par la fun@value{cedilha}@~{a}o @code{@var{x_1} @var{x_2} @var{x_4} + @var{x_4}}.

Veja tamb@'{e}m :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante_klein3 (@var{P}, @var{x})
calcule la transformation de
@code{@var{P}(@var{x})} par la fun@value{cedilha}@~{a}o @code{@var{x_1} @var{x_2} @var{x_4} + @var{x_4}}.

Veja tamb@'{e}m :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante_produit_sym (@var{P}, @var{x})
calcula a lista de todas as 
resolventes produto do polin@^{o}mio @code{@var{P}(@var{x})}.

@c GENERATED FROM THE FOLLOWING
@c resolvante_produit_sym (x^5 + 3*x^4 + 2*x - 1, x);
@c resolvante: produit$
@c resolvante (x^5 + 3*x^4 + 2*x - 1, x, a*b*c, [a, b, c]);
@example
(%i1) resolvante_produit_sym (x^5 + 3*x^4 + 2*x - 1, x);
        5      4             10      8       7       6       5
(%o1) [y  + 3 y  + 2 y - 1, y   - 2 y  - 21 y  - 31 y  - 14 y

    4       3      2       10      8       7    6       5       4
 - y  + 14 y  + 3 y  + 1, y   + 3 y  + 14 y  - y  - 14 y  - 31 y

       3      2       5      4
 - 21 y  - 2 y  + 1, y  - 2 y  - 3 y - 1, y - 1]
(%i2) resolvante: produit$
(%i3) resolvante (x^5 + 3*x^4 + 2*x - 1, x, a*b*c, [a, b, c]);

" resolvente produto "
       10      8       7    6        5       4       3     2
(%o3) y   + 3 y  + 14 y  - y  - 14 y  - 31 y  - 21 y  - 2 y  + 1
@end example
@c INPUT %i3 TICKLES A MINOR BUG IN resolvante: 
@c " resolvante produit " IS PRINTED FROM SOMEWHERE IN THE BOWELS OF resolvante
@c AND IT GOOFS UP THE DISPLAY OF THE EXPONENTS OF %o3 -- I THREW IN A LINE BREAK TO ADJUST

Veja tamb@'{e}m :

@code{resolvante}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante_unitaire (@var{P}, @var{Q}, @var{x})
calcul a resolvente do
polin@^{o}mio @code{@var{P}(@var{x})} pelo polin@^{o}mio @code{@var{Q}(@var{x})}.

Veja tamb@'{e}m :

@code{resolvante_produit_sym}, @code{resolvante},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} resolvante_vierer (@var{P}, @var{x})
calcula a transforma@value{cedilha}@~{a}o de
@code{@var{P}(@var{x})} pela fun@value{cedilha}@~{a}o @code{@var{x_1} @var{x_2} - @var{x_3} @var{x_4}}.

Veja tamb@'{e}m :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante}, @code{resolvante_diedrale}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} schur2comp (@var{P}, @var{l_var})
@var{P} @'{e} um polin@^{o}mio nas vari@'{a}veis contidas na 
lista @var{l_var}. Cada uma das vari@'{a}veis de @var{l_var} representa uma fun@value{cedilha}@~{a}o
sim@'{e}trica completa. Representa-se em @var{l_var} a en@'{e}sia fun@value{cedilha}@~{a}o sim@'{e}trica
completa como a concatena@value{cedilha}@~{a}o da letra @code{h} com o inteiro @var{i} : @code{h@var{i}}.
Essa fun@value{cedilha}@~{a}o fornece a express@~{a}o de @var{P} em fun@value{cedilha}@~{a}o das fun@value{cedilha}@~{o}es
de Schur.

@c GENERATED FROM THE FOLLOWING
@c schur2comp (h1*h2 - h3, [h1, h2, h3]);
@c schur2comp (a*h3, [h3]);
@example
(%i1) schur2comp (h1*h2 - h3, [h1, h2, h3]);
(%o1)                         s
                               1, 2
(%i2) schur2comp (a*h3, [h3]);
(%o2)                         s  a
                               3
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} somrac (@var{l}, @var{k})
a lista @var{l} cont@'{e}m as fun@value{cedilha}@~{o}es sim@'{e}tricas elementares
de um polin@^{o}mio @var{P} . Calcula-se o polin@^{o}mo cujas re@'{i}zes s@~{a}o as somas
@var{K} a @var{K} distintos das ra@'{i}zes de @var{P}. 

Veja tamb@'{e}m @code{prodrac}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} tcontract (@var{pol}, @var{lvar})
teste si le polin@^{o}mio pol est sim@'{e}trico en les
vari@'{a}veis contenues dans la liste @var{lvar}. Si oui il rend une forme contracte'e
comme la fun@value{cedilha}@~{a}o @code{contract}.

Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}a de representa@value{cedilha}@~{a}o :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tpartpol}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} tpartpol (@var{pol}, @var{lvar})
testa se o polin@^{o}mio @var{pol} @'{e} sim@'{e}trico nas
vari@'{a}veis contidas na lista @var{lvar}. Se for sim@'{e}trico @code{tpartpol} produz a forma particionada
como a fun@value{cedilha}@~{a}o @code{partpol}.

Outras fun@value{cedilha}@~{o}es de mudan@value{cedilha}a de representa@value{cedilha}@~{a}o :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}.


@end deffn

@deffn {Fun@value{cedilha}@~{a}o} treillis (@var{n})
retorna todas as parti@value{cedilha}@~{o}es de peso @var{n}.

@c GENERATED FROM THE FOLLOWING
@c treillis (4);
@example
(%i1) treillis (4);
(%o1)    [[4], [3, 1], [2, 2], [2, 1, 1], [1, 1, 1, 1]]
@end example

Veja tamb@'{e}m : @code{lgtreillis}, @code{ltreillis} e @code{treinat}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} treinat (@var{part})
retorna a lista das parti@value{cedilha}@~{o}es inferiores @`a parti@value{cedilha}@~{a}o
@var{part} pela ordem natural.

@c GENERATED FROM THE FOLLOWING
@c treinat ([5]);
@c treinat ([1, 1, 1, 1, 1]);
@c treinat ([3, 2]);
@example
(%i1) treinat ([5]);
(%o1)                         [[5]]
(%i2) treinat ([1, 1, 1, 1, 1]);
(%o2) [[5], [4, 1], [3, 2], [3, 1, 1], [2, 2, 1], [2, 1, 1, 1], 

                                                 [1, 1, 1, 1, 1]]
(%i3) treinat ([3, 2]);
(%o3)                 [[5], [4, 1], [3, 2]]
@end example

Veja tamb@'{e}m : @code{lgtreillis}, @code{ltreillis} e @code{treillis}.

@end deffn

