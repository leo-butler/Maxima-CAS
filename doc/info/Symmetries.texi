@c end concepts Symmetries
@menu
* Definitions for Symmetries::  
@end menu

@node Definitions for Symmetries,  , Symmetries, Symmetries
@section Definitions for Symmetries

@defun comp2pui (n, l)
re'alise le passage des fonctions syme'triques
comple`tes, donnee's dans la liste l, aux fonctions 
syme'triques e'le'mentaires de 0 a` n. Si la liste
l contient moins de n+1 e'le'ments les valeurs formelles viennent
la completer. Le premier e'le'ment de la liste l donne le cardinal
de l'alphabet si il existe, sinon on le met e'gal a n.

@example
comp2pui(3,[4,g]);
                     2          3
           [4, g, - g  + 2 h2, g  - 3 h2 g + 3 h3]
@end example

@end defun

@defun cont2part (pc,lvar)
rend le polyno^me partitionne' associe' 
a` la forme  contracte'e pc dont les variables sont dans lvar.

@example
pc : 2*a^3*b*x^4*y + x^5$
cont2part(pc,[x,y]);
                         3
                    [[2 a  b, 4, 1], [1, 5]]
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{contract}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end defun

@defun contract (psym,lvar)
rend une forme contracte'e (i.e. un mono^me
par orbite sous l'action du groupe syme'trique) du polyno^me psym
en les variables contenues dans la liste lvar. La fonction @code{explose}
re'alise l'ope'ration inverse. La fonction @code{tcontract} teste en plus
la syme'trie du polyno^me.

@example
psym : explose(2*a^3*b*x^4*y,[x,y,z]);

        3      4      3      4      3    4   
     2 a  b y z  + 2 a  b x z  + 2 a  b y  z 
                3    4        3      4      3    4
           + 2 a  b x  z + 2 a  b x y  + 2 a  b x  y

contract(psym,[x,y,z]);

                        3    4
                     2 a  b x  y
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end defun

@defun direct ([p1,...,pn],y,f,[lvar1,...,lvarn])
calcul l'image
directe (voir M. GIUSTI,D. LAZARD et A. VALIBOUZE, ISSAC 1988, Rome)
associe'e a` la fonction f, en les listes de variables lvar1,...,lvarn,
et aux polyno^mes P1,...,Pn d'une variable y. l'arite' de la fonction
f est importante pour le calcul. Ainsi, si l'expression de f ne depend
pas d'une variable, non seulement il est inutile de donner cette
variable mais cela diminue conside'rablement lees calculs si on ne le
fait pas.

@example
direct([z^2  - e1* z + e2, z^2  - f1* z + f2], z, b*v + a*u, 
              [[u, v], [a, b]]);

                    2                         2           2
                   z  - e1 f1 z - 4 e2 f2 + e1  f2 + e2 f1
 
direct([z^3-e1*z^2+e2*z-e3,z^2  - f1* z + f2], z, b*v + a*u,
              [[u, v], [a, b]]);

 6            5            4       2     4          2  4 
y  - 2 e1 f1 y  - 6 e2 f2 y  + 2 e1  f2 y  + 2 e2 f1  y

    2   2  4 
+ e1  f1  y  

              3                  3       3        3          3  3
+ 9 e3 f1 f2 y  + 5 e1 e2 f1 f2 y  - 2 e1  f1 f2 y  - 2 e3 f1  y

	    3  3       2   2  2       2      2  2     4   2  2
- 2 e1 e2 f1  y  + 9 e2  f2  y  - 6 e1  e2 f2  y  + e1  f2  y

	    2     2       2   2     2       2      2     2 
- 9 e1 e3 f1  f2 y  - 6 e2  f1  f2 y  + 3 e1  e2 f1  f2 y

            4  2 
+ 2 e1 e3 f1  y  

    2   4  2                 2         2         2   
+ e2  f1  y  - 27 e2 e3 f1 f2  y + 9 e1  e3 f1 f2  y

         2      2  
+ 3 e1 e2  f1 f2  y

    3         2                3            2      3      
- e1  e2 f1 f2  y + 15 e2 e3 f1  f2 y - 2 e1  e3 f1  f2 y

       2   3     
- e1 e2  f1  f2 y

	    5          2   3                 3       3      3
- 2 e2 e3 f1  y - 27 e3  f2  + 18 e1 e2 e3 f2  - 4 e1  e3 f2

       3   3 
 - 4 e2  f2

    2   2   3        2   2   2                2   2     3      2   2
+ e1  e2  f2  + 27 e3  f1  f2  - 9 e1 e2 e3 f1  f2  + e1  e3 f1  f2

    3   2   2       2   4                 4        2   6
+ e2  f1  f2  - 9 e3  f1  f2 + e1 e2 e3 f1  f2 + e3  f1
@end example

Recherche du polyno^me dont les racines sont les somme a+u ou a est
racine de z^2  - e1* z + e2 et u est racine de z^2  - f1* z + f2

@example
direct([z^2  - e1* z + e2,z^2  - f1* z + f2], z,a+u,[[u],[a]]);

 4         3         3         2     2  2            2         2 
y  - 2 f1 y  - 2 e1 y  + 2 f2 y  + f1  y  + 3 e1 f1 y  + 2 e2 y

    2  2 
+ e1  y  
                               2                   2                 
- 2 f1 f2 y - 2 e1 f2 y - e1 f1  y - 2 e2 f1 y - e1  f1 y

                2 
- 2 e1 e2 y + f2  

                         2           2                2
+ e1 f1 f2 - 2 e2 f2 + e1  f2 + e2 f1  + e1 e2 f1 + e2
@end example

@code{direct} peut prendre deux drapeaux possibles : @code{elementaires} et
@code{puissances} (valeur par de'faut) qui permettent de de'composer
les polyno^mes syme'triques apparaissant dans ce calcul par
les fonctions syme'triques e'le'mentaires ou les fonctions puissances
respectivement.

Fonctions de @code{sym} utilis'ees dans cette fonction :

@code{multi_orbit} (donc @code{orbit}), @code{pui_direct}, @code{multi_elem}
(donc @code{elem}), @code{multi_pui} (donc @code{pui}), @code{pui2ele}, @code{ele2pui}
(si le drapeau @code{direct} est a` @code{puissances}).

@end defun

@defun ele2comp (m , l)
passe des fonctions syme'triques e'le'mentaires
aux fonctions comple`tes. Similaire a` @code{comp2ele} et @code{comp2pui}.

Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2pui}, @code{elem}, @code{mon2schur}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end defun

@defun ele2polynome (l,z)
donne le polyno^me en z dont les fonctions
syme'triques e'le'mentaires des racines sont dans la liste l.
l=[n,e1,...,en] ou` n est le degre' du polyno^me et ei la i-ie`me
fonction syme'trique e'le'mentaire.

@example
 ele2polynome([2,e1,e2],z);

                                  2
                                 z  - e1 z + e2

 polynome2ele(x^7-14*x^5  + 56*x^3  - 56*x + 22,x);
 
              [7, 0, - 14, 0, 56, 0, - 56, - 22] 
 ele2polynome( [7, 0, - 14, 0, 56, 0, - 56, - 22],x);

                          7       5       3
                         x  - 14 x  + 56 x  - 56 x + 22
@end example

@noindent
   
  la re'ciproque : POLYNOME2ELE(p,z)

Autres fonctions a` voir :

@code{polynome2ele}, @code{pui2polynome}.


@end defun

@defun ele2pui (m, l)
passe des fonctions syme'triques e'le'mentaires
aux fonctions comple`tes. Similaire a` @code{comp2ele} et @code{comp2pui}.

Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{elem}, @code{mon2schur}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end defun

@defun elem (ele,sym,lvar)
de'compose le polyno^me syme'trique sym, en les variables
contenues de la liste lvar, par les fonctions syme'triques e'le'mentaires
contenues dans la liste ele. Si le premier e'le'ment de ele est donne'
ce sera le cardinal de l'alphabet sinon on prendra le degre' du polyno^me
sym. Si il manque des valeurs a` la liste ele des valeurs formelles
du type "ei" sont rajoute'es. Le polyno^me sym peut etre donne'
sous 3 formes diffe'rentes : contracte'e (@code{elem} doit alors valoir 1 sa valeur
par de'faut), partitionne'e (@code{elem} doit alors valoir 3) ou e'tendue (i.e. le
polyno^me en entier) (@code{elem} doit alors valoir 2). L'utilsation
de la fonction @code{pui} se re'alise sur le me^me mode`le.

Sur un alphabet de cardinal 3 avec e1, la premie`re fonction syme'trique
e'le'mentaire, valant 7, le polyno^me syme'trique en 3 variables dont
la forme contracte'e (ne de'pendant ici que de deux de ses variables)
est x^4-2*x*y se de'compose ainsi en les fonctions syme'triques 
e'le'mentaires :

@example
elem([3,7],x^4-2*x*y,[x,y]);

                               2
                   28 e3 + 2 e2  - 198 e2 + 2401
@end example

@noindent
Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui},
@code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.


@end defun

@defun explose (pc,lvar)
rend le polyno^me syme'trique associe' a` la forme 
contracte'e pc. La liste lvar contient les variables.

@example
explose(a*x +1,[x,y,z]);

                     (x + y + z) a + 1
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.

@end defun

@defun kostka (part1,part2)
e'crite par P. ESPERET) calcule le nombre de
kostka associe' aux partition part1 et part2

@example
kostka([3,3,3],[2,2,2,1,1,1]);
                                  6
@end example

@end defun

@defun lgtreillis (n,m)
rend la liste des partitions de poids n et de longueur m.

@example
 lgtreillis(4,2);

			       [[3, 1], [2, 2]]
@end example

Voir e'galement : @code{ltreillis}, @code{treillis} et @code{treinat}.


@end defun

@defun ltreillis (n,m)
rend la liste des partitions de poids n et de longueur 
infe'rieure ou e'gale a` m.

@example
 ltreillis(4,2);

                         [[4, 0], [3, 1], [2, 2]]
@end example

@noindent
Voir e'galement : @code{lgtreillis}, @code{treillis} et @code{treinat}.

@end defun

@defun mon2schur (l)
la liste l repre'sente la fonction de Schur S_l :
 On a l=[i1,i2,...,iq]
avec i1 <= i2 <= ... <= iq . La fonction de Schur est S_[i1,i2...,iq]
est le mineur de la matrice infinie (h_@{i-j@}) i>=1, j>=1 compose'
des q premie`res lignes et des colonnes i1+1,i2+2,...,iq+q.

On e'crit cette fonction de Schur en fonction des
formes monomiales en utilisant les fonctions @code{treinat} et @code{kostka}. La forme
rendue est un polyno^me syme'trique dans une de ses repre'sentations
contracte'es avec les variables x1, x2, ...
 
@example
 mon2schur([1,1,1]);

                               x1 x2 x3

 mon2schur([3]);

                                         2        3
                            x1 x2 x3 + x1  x2 + x1
 mon2schur([1,2]);
					     2
 			      2 x1 x2 x3 + x1  x2
@end example

@noindent
ce qui veut dire que pour 3 variables cela donne :

@example
   2 x1 x2 x3 + x1^2 x2 + x2^2 x1 + x1^2 x3 + x3^2 x1
    + x2^2 x3 + x3^2 x2
@end example

@noindent
Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end defun

@defun multi_elem (l_elem,multi_pc,l_var)
de'compose un polyno^me 
multi-syme'trique sous la forme multi-contracte'e multi_pc en les groupes
de variables contenue dans la liste de listes l_var sur les
groupes de fonctions syme'triques e'le'mentaires contenues dans l_elem.

@example
multi_elem([[2,e1,e2],[2,f1,f2]],a*x+a^2+x^3,[[x,y],[a,b]]);

				2		        3
 		     - 2 f2 + f1  + e1 f1 - 3 e1 e2 + e1
@end example

Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele},
@code{puireduc}, @code{schur2comp}.

@end defun

@defun multi_orbit (p,[lvar1, lvar2,...,lvarp])
P est un polyno^me en l'ensemble
des variables contenues dans les listes lvar1, lvar2 ... lvarp. 
Cette fonction rame`ne l'orbite du polyno^me P sous l'action du produit 
des groupes syme'triques des ensembles de variables repre'sente's par 
ces p @code{listes}.

@example
 multi_orbit(a*x+b*y,[[x,y],[a,b]]);

          [b y + a x, a y + b x]

 multi_orbit(x+y+2*a,[[x,y],[a,b,c]]);

              [y + x + 2 c, y + x + 2 b, y + x + 2 a]
@end example

@noindent
Voir e'galement : @code{orbit} pour l'action d'un seul groupe syme'trique

@end defun

@defun multi_pui
 est a` la fonction @code{pui} ce que la fonction @code{multi_elem} est
a` la fonction @code{elem}.

@example
multi_pui([[2,p1,p2],[2,t1,t2]],a*x+a^2+x^3,[[x,y],[a,b]]);
    
                                              3
                                       3 p1 p2   p1
                          t2 + p1 t1 + ------- - ---
                                          2       2
@end example

@end defun

@defun multinomial (r,part)
ou` r est le poids de la partition part. Cette
fonction rame`ne le coefficient multinomial associe' : si les
parts de la partitions part sont i1, i2, ..., ik, le re'sultat de
@code{multinomial} est r!/(i1!i2!...ik!).


@end defun

@defun multsym (ppart1, ppart2,n)
re'alise le produit de deux polyno^mes
syme'triques de N variables en ne travaillant que modulo l'action du
groupe syme'trique d'ordre N. Les polyno^mes sont dans leur repre'sentation
partitionne'e. 

Soient les 2 polyno^mes syme'triques en x, y : 3*(x+y) + 2*x*y et 5*(x^2+y^2)
dont les formes partitionne'es sont respectivement [[3,1],[2,1,1]] et [[5,2]],
alors leur produit sera donne' par :

@example
 multsym([[3,1],[2,1,1]],[[5,2]],2);

            [[10, 3, 1], [15, 2, 1], [15, 3, 0]]
@end example

@noindent
soit 10*(x^3*y+y^3*x)+15*(x^2*y +y^2*x) +15(x^3+y^3)

Fonctions de changements de repre'sentations d'un polyno^me syme'trique :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont},
@code{partpol}, @code{tcontract}, @code{tpartpol}.

@end defun

@defun orbit (p,lvar)
calcul l'orbite du polyno^me P en les variables de la liste
lvar sous l'action du groupe syme'trique de l'ensemble des variables contenues
dans la liste lvar.
 
@example
 orbit(a*x+b*y,[x,y]);

                        [a y + b x, b y + a x]
 orbit(2*x+x^2,[x,y]);
                                2         2
                              [y  + 2 y, x  + 2 x]
@end example

@noindent
Voir e'galement : @code{multi_orbit} pour l'action d'un produit de groupes 
syme'triques sur un polyno^me.


@end defun

@defun part2cont (ppart,lvar)
passe de la forme partitionne'e a` la forme contracte'e
d'un polyno^me syme'trique. La forme contracte'e est rendue avec les variables
contenues dans lvar.

@example
part2cont([[2*a^3*b,4,1]],[x,y]);

                        3    4
                     2 a  b x  y
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{explose}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end defun

@defun partpol (psym, lvar)
psym est un polyno^me syme'trique en les variables 
de lvar. Cette fonction rame`ne sa repre'sentation partitionne'e.

@example
partpol(-a*(x+y)+3*x*y,[x,y]);

                   [[3, 1, 1], [- a, 1, 0]]
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{tcontract}, @code{tpartpol}.

@end defun

@defun permut (l)
rame`ne la liste des permutations de la liste l.


@end defun

@defun polynome2ele (p,x)
donne la liste l=[n,e1,...,en] ou` n est le degre'
du polyno^me p en la variable x et ei la i-ieme fonction syme'trique 
e'le'mentaire des racines de p.

@example
 polynome2ele(x^7-14*x^5  + 56*x^3  - 56*x + 22,x);
 
              [7, 0, - 14, 0, 56, 0, - 56, - 22] 
 
 ele2polynome( [7, 0, - 14, 0, 56, 0, - 56, - 22],x);

                          7       5       3
                         x  - 14 x  + 56 x  - 56 x + 22
@end example

@noindent
La re'ciproque : @code{ele2polynome (l,x)}

@end defun

@defun prodrac (l,k)
L est une liste contenant les fonctions syme'triques 
e'le'mentaires sur un ensemble A. PRODRAC rend le polyno^me dont
les racines sont les produits K a` K des e'le'ments de A.


@end defun

@defun pui (pui,sym,lvar)
de'compose le polyno^me syme'trique sym, en les variables
contenues de la liste lvar, par les fonctions puissances
contenues dans la liste pui. Si le premier e'le'ment de pui est donne'
ce sera le cardinal de l'alphabet sinon on prendra le degre' du polyno^me
sym. Si il manque des valeurs a` la liste pui, des valeurs formelles
du type "pi" sont rajoute'es. Le polyno^me sym peut etre donne'
sous 3 formes diffe'rentes : contracte'e (@code{pui} doit alors valoir 1 sa valeur
par de'faut), partitionne'e (@code{pui} doit alors valoir 3) ou e'tendue (i.e. le
polyno^me en entier) (@code{pui} doit alors valoir 2). La fonction @code{elem}
s'utilise de la me^me manie`re.

@example
pui;

		       1
pui([3,a,b],u*x*y*z,[x,y,z]);

			       3
			     (a  - 3 b a + 2 p3) u
         		     ---------------------
				      6
@end example

@noindent
Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem}, @code{mon2schur},
@code{multi_elem}, @code{multi_pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc},
@code{schur2comp}.

@end defun

@defun pui2comp (n,lpui)
rend la liste des N premie`res fonctions comple`tes
(avec en te^te le cardinal) en fonction des fonctions puissance donne'es dans
la liste @var{lpui}. Si la liste @var{lpui} est vide le cardinal est N sinon 
c'est son premier e'le'ment similaire a` @code{comp2ele} et @code{comp2pui}.

@example
 pui2comp(2,[]);

					 2
				       p1  + p2
        		       [2, p1, --------]
					  2

 pui2comp(3,[2,a1]);

			      2	        3
			    a1  + p2  a1  + 3 p2 a1 + 2 p3
          	    [2, a1, --------, --------------------]
			       2	       6
@end example

@noindent
Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui}, @code{pui}, @code{pui2ele},
@code{puireduc}, @code{schur2comp}.

@end defun

@defun pui2ele (n,lpui)
re'alise le passage des fonctions puissances aux
fonctions syme'triques e'le'mentaires.
Si le drapeau @code{pui2ele} est @code{girard}, on re'cupe`re la liste des fonctions 
syme'triques e'le'mentaires de 1 a` N, et s'il est e'gal a`  @code{close}, 
la Nie`me fonction syme'trique e'le'mentaire.

Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui}, @code{pui}, @code{pui2comp},
@code{puireduc}, @code{schur2comp}.

@end defun

@defun pui2polynome (x,lpui)
calcul le polyno^me en X dont les fonctions puissances
des racines sont donne'es dans la liste @var{lpui}.

@example
(%i6) polynome2ele(x^3-4*x^2+5*x-1,x);
(%o6)                             [3, 4, 5, 1]
(%i7) ele2pui(3,%);
(%o7)                             [3, 4, 6, 7]
(%i8) pui2polynome(x,%);
                               3      2
(%o8)                          x  - 4 x  + 5 x - 1
@end example

@noindent
Autres fonctions a` voir :
@code{polynome2ele}, @code{ele2polynome}.

@end defun

@defun pui_direct (orbite,[lvar1,...,lvarn],[d1,d2,...,dn])

Soit f un polynome en n blocs de variables lvar1,...,lvarn.
Soit ci le nombre de variables dans lvari . Et SC le produit des n
groupes syme'triques de degre' c1,...,cn. Ce groupe agit
naturellement sur f
La liste @var{orbite} est l'orbite, note'e SC(f), de la fonction f sous 
l'action de SC. (Cette liste peut e^tre obtenue avec la fonction : 
@code{multi_orbit}).
Les di sont des entiers tels que c1<=d1, c2<=d2,...,cn<=dn.
Soit SD le produit des groupes syme'triques S_d1 x S_d2 x...x S_dn.

la fonction pui_direct rame`ne les N premie`res fonctions puissances de SD(f)
de'duites des fonctions puissances de SC(f) ou` N est le cardinal de SD(f).

Le re'sultat est rendue sous forme multi-contracte'e par rapport a SD.
i.e. on ne conserve qu'un e'le'ment par orbite sous l'action de SD).

@example
l:[[x,y],[a,b]]$

pui_direct(multi_orbit(a*x+b*y, l), l,[2,2]);

                                    2  2
                 [a x, 4 a b x y + a  x ]

pui_direct(multi_orbit(a*x+b*y, l), l,[3,2]);

                         2  2     2    2        3  3
  [2 a x, 4 a b x y + 2 a  x , 3 a  b x  y + 2 a  x ,

    2  2  2  2      3    3        4  4
12 a  b  x  y  + 4 a  b x  y + 2 a  x ,

    3  2  3  2      4    4        5  5
10 a  b  x  y  + 5 a  b x  y + 2 a  x ,

    3  3  3  3       4  2  4  2      5    5        6  6
40 a  b  x  y  + 15 a  b  x  y  + 6 a  b x  y + 2 a  x ]

 pui_direct([y+x+2*c, y+x+2*b, y+x+2*a],[[x,y],[a,b,c]],[2,3]);

                             2              2
      [3 x + 2 a, 6 x y + 3 x  + 4 a x + 4 a , 

              2                   3        2       2        3
           9 x  y + 12 a x y + 3 x  + 6 a x  + 12 a  x + 8 a ]


pui_direct([y+x+2*c, y+x+2*b, y+x+2*a],[[x,y],[a,b,c]],[3,4]);
@end example

@end defun

@defun puireduc (n,lpui)
@var{lpui} est une liste dont le premier e'le'ment est un entier
M. PUIREDUC donne les N premie`res fonctions puissances en fonction 
des M premie`res.

@example
puireduc(3,[2]);

						  3
				      3 p1 p2 - p1
         		  [2, p1, p2, -------------]

					    2
@end example

@end defun

@defun resolvante (p,x,f,[x1,...,xd])
calcule la re'solvante du polyno^me p
de la variable x et de degre' n >= d par la fonction f exprime'e en
les variables x1,...,xd. Il est important pour l'efficacite' des
calculs de ne pas mettre dans la liste [x1,...,xd] les variables
n'intervenant pas dans la fonction de transformation f.

Afin de rendre plus efficaces les calculs on peut mettre des drapeaux
a` la variable @code{resolvante} afin que des algorithmes ade'quates soient
utilise's :

Si la fonction f est 
   unitaire :
@itemize @bullet
@item
un polyno^me d'une variable,
@item
  line'aire ,
@item
  alterne'e,
@item
  une somme de variables,
@item
  syme'trique en les variables qui apparaissent dans son expression,
@item
  un produit de variables,
@item
la fonction de la re'solvante de Cayley (utilisable qu'en degre' 5)

@example
(x1*x2+x2*x3+x3*x4+x4*x5+x5*x1 -
     (x1*x3+x3*x5+x5*x2+x2*x4+x4*x1))^2
@end example

  generale,
@end itemize
le drapeau de @code{resolvante} pourra e^tre respectivement :
@itemize @bullet
@item
  unitaire,
@item
  lineaire,
@item
  alternee,
@item
  somme,
@item
  produit,
@item
  cayley,
@item
  generale.
@end itemize

@example
 resolvante:unitaire;
resolvante(x^7-14*x^5  + 56*x^3  - 56*x + 22,x,x^3-1,[x]);

  7      6        5         4          3           2
y  + 7 y  - 539 y  - 1841 y  + 51443 y  + 315133 y  + 376999 y

 + 125253

resolvante : lineaire;
resolvante(x^4-1,x,x1+2*x2+3*x3,[x1,x2,x3]);

 24       20         16            12             8              4
y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y  + 344489984 y
							 + 655360000
	       meme solution pour : 
resolvante : general;
resolvante(x^4-1,x,x1+2*x2+3*x3,[x1,x2,x3]);
resolvante(x^4-1,x,x1+2*x2+3*x3,[x1,x2,x3,x4])
direct([x^4-1],x,x1+2*x2+3*x3,[[x1,x2,x3]]);

resolvante:lineaire$
resolvante(x^4-1,x,x1+x2+x3,[x1,x2,x3);

			       4
			      y  - 1

resolvante:symetrique$

resolvante(x^4-1,x,x1+x2+x3,[x1,x2,x3]);

			       4
			      y  - 1
resolvante(x^4+x+1,x,x1-x2,[x1,x2]);
	  12      8       6        4        2
	 y   + 8 y  + 26 y  - 112 y  + 216 y  + 229

resolvante:alternee$
resolvante(x^4+x+1,x,x1-x2,[x1,x2]);

	  12      8       6        4        2
	 y   + 8 y  + 26 y  - 112 y  + 216 y  + 229


resolvante:produit;
resolvante(x^7-7*x+3,x,x1*x2*x3,[x1,x2,x3]);

   35      33         29        28         27        26         24
  y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y   + 1323 y

          23          22            21           20          19
+ 352947 y   - 46305 y   - 2463339 y   + 324135 y   - 30618 y

	  18 
- 453789 y   

	    17              15             14              12 
- 40246444 y   + 282225202 y   - 44274492 y   + 155098503 y

            11 
+ 12252303 y

	   10              9            8            7             6
+ 2893401 y   - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

	   5             3
- 3720087 y  + 26040609 y  + 14348907

   resolvante:symetrique$
  resolvante(x^7-7*x+3,x,x1*x2*x3,[x1,x2,x3]);

  35      33         29        28         27        26         24
 y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y   + 1323 y

          23          22            21           20          19
+ 352947 y   - 46305 y   - 2463339 y   + 324135 y   - 30618 y

           18 
 - 453789 y

            17              15             14              12
- 40246444 y   + 282225202 y   - 44274492 y   + 155098503 y

             11 
 + 12252303 y   

           10              9            8            7             6
+ 2893401 y   - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

           5             3
- 3720087 y  + 26040609 y  + 14348907

resolvante:cayley$
resolvante(x^5-4*x^2+x+1,x,a,[]);

" resolvante de cayley " 

 6       5         4          3            2
x  - 40 x  + 4080 x  - 92928 x  + 3772160 x  + 37880832 x + 93392896
@end example

Pour la re'solvante de Cayley, les 2 derniers arguments sont neutres
et le polyno^me donne' en entre'e doit ne'cessairement e^tre de degre' 5.

Voir e'galement :

@code{resolvante_bipartite}, @code{resolvante_produit_sym},
@code{resolvante_unitaire}, @code{resolvante_alternee1}, @code{resolvante_klein}, 
@code{resolvante_klein3}, @code{resolvante_vierer}, @code{resolvante_diedrale}. 

@end defun

@defun resolvante_alternee1 (p,x)
calcule la transformation de 
p(x) de degre n par la fonction $\prod_@{1\leq i<j\leq n-1@} (x_i-x_j)$.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante} , @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}, @code{resolvante_bipartite}.

@end defun

@defun resolvante_bipartite (p,x)
calcule la transformation de 
p(x) de degre n (n pair) par la fonction 
         $x_1x_2\ldots x_@{n/2@}+x_@{n/2+1@}\ldotsx_n$

Voir e'galement :
@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante} , @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}, @code{resolvante_alternee1}.

@example
 resolvante_bipartite(x^6+108,x);

                 10        8           6             4
                y   - 972 y  + 314928 y  - 34012224 y
@end example

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale},
@code{resolvante_alternee1}.

@end defun

@defun resolvante_diedrale (p,x)
calcule la transformation de
p(x) par la fonction x_1x_2+x_3x_4.

@example
resolvante_diedrale(x^5-3*x^4+1,x);

 15       12       11       10        9         8         7        6
x   - 21 x   - 81 x   - 21 x   + 207 x  + 1134 x  + 2331 x  - 945 x

           5          4          3          2
   - 4970 x  - 18333 x  - 29079 x  - 20745 x  - 25326 x - 697
@end example

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante}.

@end defun

@defun resolvante_klein (p,x)
calcule la transformation de
p(x) par la fonction x_1x_2x_4+x_4.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end defun

@defun resolvante_klein3 (p,x)
calcule la transformation de
p(x) par la fonction x_1x_2x_4+x_4.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end defun

@defun resolvante_produit_sym (p,x)
calcule la liste toutes les 
r\'esolvantes produit du polyn\^ome  p(x).

@example
  resolvante_produit_sym(x^5+3*x^4+2*x-1,x);

  5      4             10      8       7       6       5    4 
[y  + 3 y  + 2 y - 1, y   - 2 y  - 21 y  - 31 y  - 14 y  - y

      3 
+ 14 y

      2       10      8       7    6       5       4       3      2
+ 3 y  + 1, y   + 3 y  + 14 y  - y  - 14 y  - 31 y  - 21 y  - 2 y  

      5      4
+ 1, y  - 2 y  - 3 y - 1, y - 1]


resolvante:produit$
esolvante(x^5+3*x^4+2*x-1,x,a*b*c,[a,b,c]);

 10      8       7    6       5       4       3      2
y   + 3 y  + 14 y  - y  - 14 y  - 31 y  - 21 y  - 2 y  + 1
@end example

Voir e'galement :

@code{resolvante}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end defun

@defun resolvante_unitaire (p,q,x)
calcule la r\'esolvante du 
polyn\^ome p(x) par le polyn\^ome q(x).

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end defun

@defun resolvante_vierer (p,x)
calcule la transformation de
p(x) par la fonction x_1x_2-x_3x_4.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante}, @code{resolvante_diedrale}.

@end defun

@defun schur2comp (p,l_var)
: P est un polyno^mes en les variables contenues dans 
la liste l_var. Chacune des variables de l_var repre'sente une fonction
syme'trique comple`te. On repre'sente dans l_var la ie`me fonction syme'trique
comple`te comme la concate'nation de la lettre h avec l'entier i : hi.
Cette fonction donne l'expression de P en fonction des fonctions
de Schur.

@example
  schur2comp(h1*h2-h3,[h1,h2,h3]);


 				    s	  
				     1, 2

 schur2comp(a*h3,[h3]);

 				      s  a
				       3
@end example

@end defun

@defun somrac (liste,k)
la liste contient les fonctions syme'triques e'le'mentaires
d'un polyno^me P . On calcul le polyno^mes dont les racines sont les sommes 
K a` K distinctes des racines de P. 

Voir e'galement @code{prodrac}.


@end defun

@defun tcontract (pol,lvar)
teste si le polyno^me pol est syme'trique en les
variables contenues dans la liste lvar. Si oui il rend une forme contracte'e
comme la fonction @code{contract}.

Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tpartpol}.


@end defun

@defun tpartpol (pol,lvar)
teste si le polyno^me pol est syme'trique en les
variables contenues dans la liste lvar. Si oui il rend sa forme partionne'e
comme la fonction @code{partpol}.

Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}.


@end defun

@defun treillis (n)
rame`ne toutes les partitions de poids n.

@example
 treillis(4);

            [[4], [3, 1], [2, 2], [2, 1, 1], [1, 1, 1, 1]]
@end example

Voir e'galement : @code{lgtreillis}, @code{ltreillis} et @code{treinat}.

@end defun

@defun treinat (part)
rame`ne la liste des partitions infe'rieures a` la partition
  part pour l'ordre naturel.

@example
   treinat([5]);

                               [[5]]
   treinat([1,1,1,1,1]);
  
    [[5], [4, 1], [3, 2], [3, 1, 1], [2, 2, 1], [2, 1, 1, 1],

     [1, 1, 1, 1, 1]]

   treinat([3,2]);

                        [[5], [4, 1], [3, 2]]
@end example

Voir e'galement : @code{lgtreillis}, @code{ltreillis} et @code{treillis}.

@end defun
