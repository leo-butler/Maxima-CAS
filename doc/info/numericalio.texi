@menu
* Introduction to numericalio::
* Functions and Variables for numericalio::
@end menu

@node Introduction to numericalio, Functions and Variables for numericalio, numericalio, numericalio
@section Introduction to numericalio

@code{numericalio} is a collection of functions to read and write data files and streams.

It is assumed that each item to read or write is an atom:
an integer, float, bigfloat, string, or symbol,
and not a rational or complex number or any other kind of nonatomic expression.
The @code{numericalio} functions may attempt to do something sensible faced with nonatomic expressions,
but the results are not specified here and subject to change.

Atoms in both input and output files have the same format as
in Maxima batch files or the interactive console.
In particular, strings are enclosed in double quotes,
backslash @code{\} prevents any special interpretation of the next character,
and the question mark @code{?} is recognized at the beginning of a symbol
to mean a Lisp symbol (as opposed to a Maxima symbol).
No continuation character (to join broken lines) is recognized.

@var{separator_flag} tells which character separates elements.
It is an optional argument for all read and write functions.

@opencatbox
@category{File input} @category{File output} @category{Share packages} @category{Package numericalio}
@closecatbox

@subsection Separator flag values for input

For input, these values of @var{separator_flag} are recognized:
@code{comma} for comma separated values,
@code{pipe} for values separated by the vertical bar character @code{|},
@code{semicolon} for values separated by semicolon @code{;}, 
and @code{space} for values separated by space or tab characters.
If the file name ends in @code{.csv} and @var{separator_flag} is not specified,
@code{comma} is assumed.
If the file name ends in something other than @code{.csv} and @code{separator_flag} is not specified,
@code{space} is assumed.

In input, multiple successive space and tab characters count as a single separator.
However, multiple comma, pipe, or semicolon characters are significant.
Successive comma, pipe, or semicolon characters (with or without intervening spaces or tabs)
are considered to have @code{false} between the separators.
For example, @code{1234,,Foo} is treated the same as @code{1234,false,Foo}.

@subsection Separator flag values for output

For output, @code{tab}, for values separated by the tab character,
is recognized as a value of @var{separator_flag},
as well as @code{comma}, @code{pipe}, @code{semicolon}, and @code{space}.

In output, @code{false} atoms are written as such;
a list @code{[1234, false, Foo]} is written @code{1234,false,Foo},
and there is no attempt to collapse the output to @code{1234,,Foo}.

@node Functions and Variables for numericalio,  , Introduction to numericalio, numericalio
@section Functions and Variables for numericalio

@deffn {Function} read_matrix (@var{file_name})
@deffnx {Function} read_matrix (@var{file_name}, @var{separator_flag})
@deffnx {Function} read_matrix (@var{S})
@deffnx {Function} read_matrix (@var{S}, @var{separator_flag})

Reads the file @var{file_name} or file stream @var{S} and returns its entire content as a matrix.
If @var{separator_flag} is not specified, the file is assumed space-delimited.

@code{read_matrix} infers the size of the matrix from the input data.
Each line of the file becomes one row of the matrix.
If some lines have different lengths, @code{read_matrix} complains.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_lisp_array (@var{file_name}, @var{A})
@deffnx {Function} read_lisp_array (@var{file_name}, @var{A}, @var{separator_flag})
@deffnx {Function} read_lisp_array (@var{S}, @var{A})
@deffnx {Function} read_lisp_array (@var{S}, @var{A}, @var{separator_flag})

Reads the file @var{file_name} or file stream @var{S} and returns its entire content as a Lisp array.
If @var{separator_flag} is not specified, the file is assumed space-delimited.

@code{read_lisp_array} requires that the array
be declared by @code{make_array} before calling
the read function. (This obviates the need to infer the array 
dimensions, which could be a problem for arrays with multiple dimensions.)

@code{read_lisp_array} does not check to see that the 
input file conforms in some way to the array dimensions; the input
is read as a flat list, then the array is filled using @code{fillarray}.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_maxima_array (@var{file_name}, @var{A})
@deffnx {Function} read_maxima_array (@var{file_name}, @var{A}, @var{separator_flag})
@deffnx {Function} read_maxima_array (@var{S}, @var{A})
@deffnx {Function} read_maxima_array (@var{S}, @var{A}, @var{separator_flag})

Reads the file @var{file_name} or file stream @var{S} and returns its entire content as a Maxima array.
If @var{separator_flag} is not specified, the file is assumed space-delimited.

@code{read_maxima_array} requires that the array
be declared by @code{array} before calling
the read function. (This obviates the need to infer the array 
dimensions, which could be a hassle for arrays with multiple dimensions.)

@code{read_maxima_array} does not check to see that the 
input file conforms in some way to the array dimensions; the input
is read as a flat list, then the array is filled using @code{fillarray}.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_hashed_array (@var{file_name}, @var{A})
@deffnx {Function} read_hashed_array (@var{file_name}, @var{A}, @var{separator_flag})
@deffnx {Function} read_hashed_array (@var{S}, @var{A})
@deffnx {Function} read_hashed_array (@var{S}, @var{A}, @var{separator_flag})

Reads the file @var{file_name} or file stream @var{S} and returns its entire content as a hashed array.
If @var{separator_flag} is not specified, the file is assumed space-delimited.

@code{read_hashed_array} treats the first item on a line as a
hash key, and associates the remainder of the line (as a list) with the key.
For example,
the line @code{567 12 17 32 55} is equivalent to @code{A[567]: [12, 17, 32, 55]$}.
Lines need not have the same numbers of elements.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_nested_list (@var{file_name})
@deffnx {Function} read_nested_list (@var{file_name}, @var{separator_flag})
@deffnx {Function} read_nested_list (@var{S})
@deffnx {Function} read_nested_list (@var{S}, @var{separator_flag})

Reads the file @var{file_name} or file stream @var{S} and returns its entire content as a nested list.
If @var{separator_flag} is not specified, the file is assumed space-delimited.

@code{read_nested_list} returns a list which has a sublist for each
line of input. Lines need not have the same numbers of elements.
Empty lines are @i{not} ignored: an empty line yields an empty sublist.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} read_list (@var{file_name})
@deffnx {Function} read_list (@var{file_name}, @var{separator_flag})
@deffnx {Function} read_list (@var{S})
@deffnx {Function} read_list (@var{S}, @var{separator_flag})

Reads the file @var{file_name} or file stream @var{S} and returns its entire content as a flat list.
If @var{separator_flag} is not specified, the file is assumed space-delimited.

@opencatbox
@category{Package numericalio} @category{File input}
@closecatbox

@end deffn

@deffn {Function} write_data (@var{X}, @var{file_name})
@deffnx {Function} write_data (@var{object}, @var{file_name}, @var{separator_flag})
@deffnx {Function} write_data (@var{X}, @var{S})
@deffnx {Function} write_data (@var{object}, @var{S}, @var{separator_flag})

@code{write_data} writes the object @var{X} to the file @var{file_name} or file stream @var{S}.

@code{write_data} writes matrices in row-major form,
with one line per row.

@code{write_data} writes Lisp and Maxima declared arrays in
row-major form, with a new line at the end of every slab.
Higher-dimensional slabs are separated by additional new lines.

@code{write_data} writes hashed arrays with a key followed by
the associated list on each line.

@code{write_data} writes a nested list with each sublist on one line.

@code{write_data} writes a flat list all on one line.

When @code{write_data} writes to a file,
the global variable @code{file_output_append} governs
whether the output file is appended or truncated.

No special action concerning appending or truncating
is taken when @code{write_data} writes to a file stream.
The file stream is not closed by @code{write_data}.

@opencatbox
@category{Package numericalio} @category{File output}
@closecatbox

@end deffn

