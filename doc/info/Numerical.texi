@menu
* Introduction to Numerical::   
* Fourier::                     
* Definitions for Numerical::   
@end menu

@node Introduction to Numerical, Fourier, Numerical, Numerical
@section Introduction to Numerical

@node Fourier, Definitions for Numerical, Introduction to Numerical, Numerical
@section Fourier
 - There is a Fast Fourier Transform package, do DESCRIBE(FFT)
for details.  There is also a Fourier Series package.  It may be
loaded with LOAD(FOURIE).  It will also calculate Fourier integral
coefficients and has various other functions to do such things as
replace all occurrences of F(ARG) by ARG in expression (like changing
ABS(a*x+b) to a*x+b).  Do PRINTFILE(FOURIE,USAGE,DSK,SHARE1); for
a list of the functions included.

@c end concepts Numerical

@node Definitions for Numerical,  , Fourier, Numerical
@section Definitions for Numerical
@c NOTE: Let's keep POLARTORECT, RECTTOPOLAR, and IFT before FFT
@c in this file. Otherwise DESCRIBE returns the FFT text (because
@c POLARTORECT, etc are list in the heading of FFT with @defunx).

@defun polartorect (magnitude_array, phase_array)

Translates complex values of the form @code{r %e^(%i t)} to the form @code{a + b %i}.
@code{load ("fft")} loads this function into Maxima. See also @code{fft}.

The magnitude and phase, @code{r} and @code{t}, are taken from @var{magnitude_array} and
@var{phase_array}, respectively. The original values of the input arrays are
replaced by the real and imaginary parts, @code{a} and @code{b}, on return. The outputs are
calculated as

@example
a: r cos (t)
b: r sin (t)
@end example

The input arrays must be the same size and 1-dimensional.
The array size need not be a power of 2.

@code{polartorect} is the inverse function of @code{recttopolar}.

@end defun

@defun recttopolar (real_array, imaginary_array)

Translates complex values of the form @code{a + b %i} to the form @code{r %e^(%i t)}.
@code{load ("fft")} loads this function into Maxima. See also @code{fft}.

The real and imaginary parts, @code{a} and @code{b}, are taken from @var{real_array} and
@var{imaginary_array}, respectively. The original values of the input arrays
are replaced by the magnitude and angle, @code{r} and @code{t}, on return. The outputs are
calculated as

@example
r: sqrt (a^2 + b^2)
t: atan2 (b, a)
@end example

The computed angle is in the range @code{-%pi} to @code{%pi}. 

The input arrays must be the same size and 1-dimensional.
The array size need not be a power of 2.

@code{recttopolar} is the inverse function of @code{polartorect}.

@end defun

@defun ift (real_array, imaginary_array)

Fast inverse discrete Fourier transform. @code{load ("fft")} loads this function
into Maxima.

@code{ift} carries out the inverse complex fast Fourier transform on
1-dimensional floating point arrays. The inverse transform is defined as

@example
x[j]: sum (y[j] exp (+2 %i %pi j k / n), k, 0, n-1)
@end example

See @code{fft} for more details.

@end defun

@defun fft (real_array, imaginary_array)
@defunx ift (real_array, imaginary_array)
@defunx recttopolar (real_array, imaginary_array)
@defunx polartorect (magnitude_array, phase_array)

Fast Fourier transform and related functions. @code{load ("fft")}
loads these functions into Maxima.

@code{fft} and @code{ift} carry out the complex fast Fourier transform and
inverse transform, respectively, on 1-dimensional floating
point arrays. The size of @var{imaginary_array} must equal the size of @var{real_array}.

@code{fft} and @code{ift} operate in-place. That is, on return from @code{fft} or @code{ift},
the original content of the input arrays is replaced by the output.
The @code{fillarray} function can make a copy of an array, should it
be necessary.

The discrete Fourier transform and inverse transform are defined
as follows. Let @code{x} be the original data, with

@example
x[i]: real_array[i] + %i imaginary_array[i]
@end example
  
Let @code{y} be the transformed data. The forward and inverse transforms are

@example
y[k]: (1/n) sum (x[j] exp (-2 %i %pi j k / n), j, 0, n-1)

x[j]:       sum (y[j] exp (+2 %i %pi j k / n), k, 0, n-1)
@end example

Suitable arrays can be allocated by the @code{array} function. For example:

@example
array (my_array, float, n-1)$
@end example

declares a 1-dimensional array with n elements, indexed from 0 through
n-1 inclusive. The number of elements n must be equal to 2^m for some m.

@code{fft} can be applied to real data (imaginary array all zeros) to obtain
sine and cosine coefficients. After calling @code{fft}, the sine and cosine
coefficients, say @code{a} and @code{b}, can be calculated as

@example
a[0]: real_array[0]
b[0]: 0
@end example

and

@example
a[j]: real_array[j] + real_array[n-j]
b[j]: imaginary_array[j] - imaginary_array[n-j]
@end example

for j equal to 1 through n/2-1, and

@example
a[n/2]: real_array[n/2]
b[n/2]: 0
@end example

@code{recttopolar} translates complex values of the form @code{a + b %i} to
the form @code{r %e^(%i t)}. See @code{recttopolar}.

@code{polartorect} translates complex values of the form @code{r %e^(%i t)}
to the form @code{a + b %i}. See @code{polartorect}.

@code{demo ("fft")} displays a demonstration of the @code{fft} package.

@end defun

@defvar fortindent
Default value: 0

@code{fortindent} controls the left margin indentation of
expressions printed out by the @code{fortran} command.  0 gives normal
printout (i.e., 6 spaces), and positive values will causes the
expressions to be printed farther to the right.

@end defvar

@defun fortran (expr)
Prints @var{expr} as a Fortran statement.
The output line is indented with spaces.
If the line is too long, @code{fortran} prints continuation lines.
@code{fortran} prints the exponentiation operator @code{^} as @code{**},
and prints a complex number @code{a + b %i} in the form @code{(a,b)}.

@var{expr} may be an equation. If so, @code{fortran} prints an assignment
statement, assigning the right-hand side of the equation to the left-hand side.
In particular, if the right-hand side of @var{expr} is the name of a matrix,
then @code{fortran} prints an assignment statement for each element of the matrix.

If @var{expr} is not something recognized by @code{fortran},
the expression is printed in @code{grind} format without complaint.
@code{fortran} does not know about lists, arrays, or functions.

@code{fortindent} controls the left margin of the printed lines.
0 is the normal margin (i.e., indented 6 spaces). Increasing @code{fortindent}
causes expressions to be printed further to the right.

When @code{fortspaces} is @code{true}, @code{fortran} fills out
each printed line with spaces to 80 columns.

@code{fortran} evaluates its arguments;
quoting an argument defeats evaluation.
@code{fortran} always returns @code{done}.

Examples:

@example
(%i1) expr: (a + b)^12$
(%i2) fortran (expr);
      (b+a)**12                                                                 
(%o2)                         done
(%i3) fortran ('x=expr);
      x = (b+a)**12                                                             
(%o3)                         done
(%i4) fortran ('x=expand (expr));
      x = b**12+12*a*b**11+66*a**2*b**10+220*a**3*b**9+495*a**4*b**8+792        
     1   *a**5*b**7+924*a**6*b**6+792*a**7*b**5+495*a**8*b**4+220*a**9*b        
     2   **3+66*a**10*b**2+12*a**11*b+a**12                                     
(%o4)                         done
(%i5) fortran ('x=7+5*%i);
      x = (7,5)                                                                 
(%o5)                         done
(%i6) fortran ('x=[1,2,3,4]);
      x = [1,2,3,4]                                                             
(%o6)                         done
(%i7) f(x) := x^2$
(%i8) fortran (f);
      f                                                                         
(%o8)                         done
@end example

@end defun

@defvar fortspaces
Default value: @code{false}

When @code{fortspaces} is @code{true}, @code{fortran} fills out
each printed line with spaces to 80 columns.

@end defvar

@defun horner (expr, var)
@defunx horner (expr)
Returns a rearranged representation of @var{expr} as
in Horner's rule, using @var{var} as the main variable if it is specified.
@code{var} may be omitted in which case the main variable of the canonical rational expression
form of @var{expr} is used.

@code{horner} sometimes improves stability if @code{expr} is
to be numerically evaluated.  It is also useful if Maxima is used to
generate programs to be run in Fortran. See also @code{stringout}.

@example
(%i1) expr: 1e-155*x^2 - 5.5*x + 5.2e155;
                           2
(%o1)            1.0E-155 x  - 5.5 x + 5.2E+155
(%i2) expr2: horner (%, x), keepfloat: true;
(%o2)            (1.0E-155 x - 5.5) x + 5.2E+155
(%i3) ev (expr, x=1e155);
Maxima encountered a Lisp error:

 floating point overflow

Automatically continuing.
To reenable the Lisp debugger set *debugger-hook* to nil.
(%i4) ev (expr2, x=1e155);
(%o4)                       7.0E+154
@end example

@end defun

@defun interpolate (func, x, a, b)
finds the zero of func as x varies.  The last
two args give the range to look in.  The function must have a
different sign at each endpoint.  If this condition is not met, the
action of the of the function is governed by INTPOLERROR[TRUE]).  If
INTPOLERROR is TRUE then an error occurs, otherwise the value of
INTPOLERROR is returned (thus for plotting INTPOLERROR might be set to
0.0).  Otherwise (given that Maxima can evaluate the first argument
in the specified range, and that it is continuous) INTERPOLATE is
guaranteed to come up with the zero (or one of them if there is more
than one zero).  The accuracy of INTERPOLATE is governed by
INTPOLABS[0.0] and INTPOLREL[0.0] which must be non-negative floating
point numbers.  INTERPOLATE will stop when the first arg evaluates to
something less than or equal to INTPOLABS or if successive
approximants to the root differ by no more than INTPOLREL * <one of
the approximants>.  The default values of INTPOLABS and INTPOLREL are
0.0 so INTERPOLATE gets as good an answer as is possible with the
single precision arithmetic we have.  The first arg may be an
equation.  The order of the last two args is irrelevant.  Thus

@example
INTERPOLATE(SIN(X)=X/2,X,%PI,.1);
   is equivalent to
INTERPOLATE(SIN(X)=X/2,X,.1,%PI);
@end example
The method used is a binary search in the range specified by the last
two args.  When it thinks the function is close enough to being
linear, it starts using linear interpolation.
An alternative syntax has been added to interpolate, this replaces the
first two arguments by a function name.  The function MUST be
TRANSLATEd or compiled function of one argument.  No checking of the
result is done, so make sure the function returns a floating point
number.


@example
f(x):=(mode_declare(x,float),sin(x)-x/2.0);
interpolate(sin(x)-x/2,x,0.1,%pi)       time= 60 msec
interpolate(f(x),x,0.1,%pi);            time= 68 msec
translate(f);
interpolate(f(x),x,0.1,%pi);            time= 26 msec
interpolate(f,0.1,%pi);                 time=  5 msec
@end example

There is also a Newton method interpolation routine, do DESCRIBE(NEWTON); .

@end defun

@defvar INTPOLABS
 default: [0.0] - The accuracy of the INTERPOLATE command is
governed by INTPOLABS[0.0] and INTPOLREL[0.0] which must be
non-negative floating point numbers.  INTERPOLATE will stop when the
first arg evaluates to something less than or equal to INTPOLABS or if
successive approximants to the root differ by no more than INTPOLREL *
<one of the approximants>.  The default values of INTPOLABS and
INTPOLREL are 0.0 so INTERPOLATE gets as good an answer as is possible
with the single precision arithmetic we have.

@end defvar

@defvar INTPOLERROR
 default: [TRUE] - Governs the behavior of INTERPOLATE.
When INTERPOLATE is called, it determines whether or not the function
to be interpolated satisfies the condition that the values of the
function at the endpoints of the interpolation interval are opposite
in sign.  If they are of opposite sign, the interpolation proceeds.
If they are of like sign, and INTPOLERROR is TRUE, then an error is
signaled.  If they are of like sign and INTPOLERROR is not TRUE, the
value of INTPOLERROR is returned.  Thus for plotting, INTPOLERROR
might be set to 0.0.

@end defvar

@defvar INTPOLREL
 default: [0.0] - The accuracy of the INTERPOLATE command is
governed by INTPOLABS[0.0] and INTPOLREL[0.0] which must be
non-negative floating point numbers.  INTERPOLATE will stop when the
first arg evaluates to something less than or equal to INTPOLABS or if
successive approximants to the root differ by no more than INTPOLREL *
<one of the approximants>.  The default values of INTPOLABS and
INTPOLREL are 0.0 so INTERPOLATE gets as good an answer as is possible
with the single precision arithmetic we have.

@end defvar

@defun NEWTON (exp,var,X0,eps)
The file NEWTON 1 on the SHARE directory
contains a function which will do interpolation using Newton's method.
It may be accessed by LOAD(NEWTON); .  The Newton method can do things
that INTERPOLATE will refuse to handle, since INTERPOLATE requires
that everything evaluate to a flonum. Thus
NEWTON(x^2-a^2,x,a/2,a^2/100);
will say that it can't tell if flonum*a^2<a^2/100. Doing ASSUME(a>0);
and then doing NEWTON again works. You get x=a+<small flonum>*a which
is symbolic all the way.  INTERPOLATE(x^2-a^2,x,a/2,2*a); complains
that .5*a is not flonum...
An adaptive integrator which uses the Newton-Cotes 8 panel quadrature
rule is available.  Do DESCRIBE(QQ) for details.

@end defun
