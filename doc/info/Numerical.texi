@menu
* Introduction to Numerical::   
* Fourier packages::                     
* Definitions for Numerical::   
* Definitions for Fourier Series::
@end menu

@node Introduction to Numerical, Fourier packages, Numerical, Numerical
@section Introduction to Numerical

@node Fourier packages, Definitions for Numerical, Introduction to Numerical, Numerical
@section Fourier packages
The @code{fft} package comprises functions for the numerical (not symbolic) computation
of the fast Fourier transform.
@code{load ("fft")} loads this package.
See @code{fft}.

The @code{fourie} package comprises functions for the symbolic computation
of Fourier series.
@code{load ("fourie")} loads this package.
There are functions in the @code{fourie} package to calculate Fourier integral
coefficients and some functions for manipulation of expressions.
See @code{Definitions for Fourier Series}.

@c end concepts Numerical

@node Definitions for Numerical, Definitions for Fourier Series, Fourier packages, Numerical
@section Definitions for Numerical
@c NOTE: Let's keep POLARTORECT, RECTTOPOLAR, and IFT before FFT
@c in this file. Otherwise DESCRIBE returns the FFT text (because
@c POLARTORECT, etc are list in the heading of FFT with @defunx).

@deffn {Function} polartorect (@var{magnitude_array}, @var{phase_array})

Translates complex values of the form @code{r %e^(%i t)} to the form @code{a + b %i}.
@code{load ("fft")} loads this function into Maxima. See also @code{fft}.

The magnitude and phase, @code{r} and @code{t}, are taken from @var{magnitude_array} and
@var{phase_array}, respectively. The original values of the input arrays are
replaced by the real and imaginary parts, @code{a} and @code{b}, on return. The outputs are
calculated as

@example
a: r cos (t)
b: r sin (t)
@end example

The input arrays must be the same size and 1-dimensional.
The array size need not be a power of 2.

@code{polartorect} is the inverse function of @code{recttopolar}.

@end deffn

@deffn {Function} recttopolar (@var{real_array}, @var{imaginary_array})

Translates complex values of the form @code{a + b %i} to the form @code{r %e^(%i t)}.
@code{load ("fft")} loads this function into Maxima. See also @code{fft}.

The real and imaginary parts, @code{a} and @code{b}, are taken from @var{real_array} and
@var{imaginary_array}, respectively. The original values of the input arrays
are replaced by the magnitude and angle, @code{r} and @code{t}, on return. The outputs are
calculated as

@example
r: sqrt (a^2 + b^2)
t: atan2 (b, a)
@end example

The computed angle is in the range @code{-%pi} to @code{%pi}. 

The input arrays must be the same size and 1-dimensional.
The array size need not be a power of 2.

@code{recttopolar} is the inverse function of @code{polartorect}.

@end deffn

@deffn {Function} ift (@var{real_array}, @var{imaginary_array})

Fast inverse discrete Fourier transform. @code{load ("fft")} loads this function
into Maxima.

@code{ift} carries out the inverse complex fast Fourier transform on
1-dimensional floating point arrays. The inverse transform is defined as

@example
x[j]: sum (y[j] exp (+2 %i %pi j k / n), k, 0, n-1)
@end example

See @code{fft} for more details.

@end deffn

@deffn {Function} fft (@var{real_array}, @var{imaginary_array})
@deffnx {Function} ift (@var{real_array}, @var{imaginary_array})
@deffnx {Function} recttopolar (@var{real_array}, @var{imaginary_array})
@deffnx {Function} polartorect (@var{magnitude_array}, @var{phase_array})

Fast Fourier transform and related functions. @code{load ("fft")}
loads these functions into Maxima.

@code{fft} and @code{ift} carry out the complex fast Fourier transform and
inverse transform, respectively, on 1-dimensional floating
point arrays. The size of @var{imaginary_array} must equal the size of @var{real_array}.

@code{fft} and @code{ift} operate in-place. That is, on return from @code{fft} or @code{ift},
the original content of the input arrays is replaced by the output.
The @code{fillarray} function can make a copy of an array, should it
be necessary.

The discrete Fourier transform and inverse transform are defined
as follows. Let @code{x} be the original data, with

@example
x[i]: real_array[i] + %i imaginary_array[i]
@end example
  
Let @code{y} be the transformed data. The forward and inverse transforms are

@example
y[k]: (1/n) sum (x[j] exp (-2 %i %pi j k / n), j, 0, n-1)

x[j]:       sum (y[j] exp (+2 %i %pi j k / n), k, 0, n-1)
@end example

Suitable arrays can be allocated by the @code{array} function. For example:

@example
array (my_array, float, n-1)$
@end example

declares a 1-dimensional array with n elements, indexed from 0 through
n-1 inclusive. The number of elements n must be equal to 2^m for some m.

@code{fft} can be applied to real data (imaginary array all zeros) to obtain
sine and cosine coefficients. After calling @code{fft}, the sine and cosine
coefficients, say @code{a} and @code{b}, can be calculated as

@example
a[0]: real_array[0]
b[0]: 0
@end example

and

@example
a[j]: real_array[j] + real_array[n-j]
b[j]: imaginary_array[j] - imaginary_array[n-j]
@end example

for j equal to 1 through n/2-1, and

@example
a[n/2]: real_array[n/2]
b[n/2]: 0
@end example

@code{recttopolar} translates complex values of the form @code{a + b %i} to
the form @code{r %e^(%i t)}. See @code{recttopolar}.

@code{polartorect} translates complex values of the form @code{r %e^(%i t)}
to the form @code{a + b %i}. See @code{polartorect}.

@code{demo ("fft")} displays a demonstration of the @code{fft} package.

@end deffn

@defvr {Option variable} fortindent
Default value: 0

@code{fortindent} controls the left margin indentation of
expressions printed out by the @code{fortran} command.  0 gives normal
printout (i.e., 6 spaces), and positive values will causes the
expressions to be printed farther to the right.

@end defvr

@deffn {Function} fortran (@var{expr})
Prints @var{expr} as a Fortran statement.
The output line is indented with spaces.
If the line is too long, @code{fortran} prints continuation lines.
@code{fortran} prints the exponentiation operator @code{^} as @code{**},
and prints a complex number @code{a + b %i} in the form @code{(a,b)}.

@var{expr} may be an equation. If so, @code{fortran} prints an assignment
statement, assigning the right-hand side of the equation to the left-hand side.
In particular, if the right-hand side of @var{expr} is the name of a matrix,
then @code{fortran} prints an assignment statement for each element of the matrix.

If @var{expr} is not something recognized by @code{fortran},
the expression is printed in @code{grind} format without complaint.
@code{fortran} does not know about lists, arrays, or functions.

@code{fortindent} controls the left margin of the printed lines.
0 is the normal margin (i.e., indented 6 spaces). Increasing @code{fortindent}
causes expressions to be printed further to the right.

When @code{fortspaces} is @code{true}, @code{fortran} fills out
each printed line with spaces to 80 columns.

@code{fortran} evaluates its arguments;
quoting an argument defeats evaluation.
@code{fortran} always returns @code{done}.

Examples:

@example
(%i1) expr: (a + b)^12$
(%i2) fortran (expr);
      (b+a)**12                                                                 
(%o2)                         done
(%i3) fortran ('x=expr);
      x = (b+a)**12                                                             
(%o3)                         done
(%i4) fortran ('x=expand (expr));
      x = b**12+12*a*b**11+66*a**2*b**10+220*a**3*b**9+495*a**4*b**8+792        
     1   *a**5*b**7+924*a**6*b**6+792*a**7*b**5+495*a**8*b**4+220*a**9*b        
     2   **3+66*a**10*b**2+12*a**11*b+a**12                                     
(%o4)                         done
(%i5) fortran ('x=7+5*%i);
      x = (7,5)                                                                 
(%o5)                         done
(%i6) fortran ('x=[1,2,3,4]);
      x = [1,2,3,4]                                                             
(%o6)                         done
(%i7) f(x) := x^2$
(%i8) fortran (f);
      f                                                                         
(%o8)                         done
@end example

@end deffn

@defvr {Option variable} fortspaces
Default value: @code{false}

When @code{fortspaces} is @code{true}, @code{fortran} fills out
each printed line with spaces to 80 columns.

@end defvr

@deffn {Function} horner (@var{expr}, @var{x})
@deffnx {Function} horner (@var{expr})
Returns a rearranged representation of @var{expr} as
in Horner's rule, using @var{x} as the main variable if it is specified.
@code{x} may be omitted in which case the main variable of the canonical rational expression
form of @var{expr} is used.

@code{horner} sometimes improves stability if @code{expr} is
to be numerically evaluated.  It is also useful if Maxima is used to
generate programs to be run in Fortran. See also @code{stringout}.

@example
(%i1) expr: 1e-155*x^2 - 5.5*x + 5.2e155;
                           2
(%o1)            1.0E-155 x  - 5.5 x + 5.2E+155
(%i2) expr2: horner (%, x), keepfloat: true;
(%o2)            (1.0E-155 x - 5.5) x + 5.2E+155
(%i3) ev (expr, x=1e155);
Maxima encountered a Lisp error:

 floating point overflow

Automatically continuing.
To reenable the Lisp debugger set *debugger-hook* to nil.
(%i4) ev (expr2, x=1e155);
(%o4)                       7.0E+154
@end example

@end deffn

@c NEEDS WORK
@deffn {Function} find_root (@var{f}(@var{x}), @var{x}, @var{a}, @var{b})
@deffnx {Function} find_root (@var{f}, @var{a}, @var{b})
Finds the zero of function @var{f} as variable @var{x} varies over the range @code{[@var{a}, @var{b}]}.
The function must have a
different sign at each endpoint.  If this condition is not met, the
action of the function is governed by @code{find_root_error}.  If
@code{find_root_error} is @code{true} then an error occurs, otherwise the value of
@code{find_root_error} is returned (thus for plotting @code{find_root_error} might be set to
0.0).  Otherwise (given that Maxima can evaluate the first argument
in the specified range, and that it is continuous) @code{find_root} is
guaranteed to come up with the zero (or one of them if there is more
than one zero).  The accuracy of @code{find_root} is governed by
@code{find_root_abs} and @code{find_root_rel} which must be non-negative floating
point numbers.  @code{find_root} will stop when the first arg evaluates to
something less than or equal to @code{find_root_abs} or if successive
approximants to the root differ by no more than @code{find_root_rel * <one of the approximants>}.
The default values of @code{find_root_abs} and @code{find_root_rel} are
0.0 so @code{find_root} gets as good an answer as is possible with the
single precision arithmetic we have.  The first arg may be an
equation.  The order of the last two args is irrelevant.  Thus

@example
find_root (sin(x) = x/2, x, %pi, 0.1);
@end example

is equivalent to

@example
find_root (sin(x) = x/2, x, 0.1, %pi);
@end example

The method used is a binary search in the range specified by the last
two args.  When it thinks the function is close enough to being
linear, it starts using linear interpolation.

Examples:
@c PREVIOUS EXAMPLE STUFF -- MAY WANT TO BRING TRANSLATE BACK INTO THE EXAMPLE
@c f(x):=(mode_declare(x,float),sin(x)-x/2.0);
@c interpolate(sin(x)-x/2,x,0.1,%pi)       time= 60 msec
@c interpolate(f(x),x,0.1,%pi);            time= 68 msec
@c translate(f);
@c interpolate(f(x),x,0.1,%pi);            time= 26 msec
@c interpolate(f,0.1,%pi);                 time=  5 msec

@c ===beg===
@c f(x) := sin(x) - x/2;
@c find_root (sin(x) - x/2, x, 0.1, %pi);
@c find_root (sin(x) = x/2, x, 0.1, %pi);
@c find_root (f(x), x, 0.1, %pi);
@c find_root (f, 0.1, %pi);
@c ===end===
@example
(%i1) f(x) := sin(x) - x/2;
                                        x
(%o1)                  f(x) := sin(x) - -
                                        2
(%i2) find_root (sin(x) - x/2, x, 0.1, %pi);
(%o2)                   1.895494267033981
(%i3) find_root (sin(x) = x/2, x, 0.1, %pi);
(%o3)                   1.895494267033981
(%i4) find_root (f(x), x, 0.1, %pi);
(%o4)                   1.895494267033981
(%i5) find_root (f, 0.1, %pi);
(%o5)                   1.895494267033981
@end example

@end deffn

@defvr {Option variable} find_root_abs
Default value: 0.0

@code{find_root_abs} is the accuracy of the @code{find_root} command is
governed by @code{find_root_abs} and @code{find_root_rel} which must be
non-negative floating point numbers.  @code{find_root} will stop when the
first arg evaluates to something less than or equal to @code{find_root_abs} or if
successive approximants to the root differ by no more than @code{find_root_rel * <one of the approximants>}.
The default values of @code{find_root_abs} and
@code{find_root_rel} are 0.0 so @code{find_root} gets as good an answer as is possible
with the single precision arithmetic we have.

@end defvr

@defvr {Option variable} find_root_error
Default value: @code{true}

@code{find_root_error} governs the behavior of @code{find_root}.
When @code{find_root} is called, it determines whether or not the function
to be solved satisfies the condition that the values of the
function at the endpoints of the interpolation interval are opposite
in sign.  If they are of opposite sign, the interpolation proceeds.
If they are of like sign, and @code{find_root_error} is @code{true}, then an error is
signaled.  If they are of like sign and @code{find_root_error} is not @code{true}, the
value of @code{find_root_error} is returned.  Thus for plotting, @code{find_root_error}
might be set to 0.0.

@end defvr

@defvr {Option variable} find_root_rel
Default value: 0.0

@code{find_root_rel} is the accuracy of the @code{find_root} command is
governed by @code{find_root_abs} and @code{find_root_rel} which must be
non-negative floating point numbers.  @code{find_root} will stop when the
first arg evaluates to something less than or equal to @code{find_root_abs} or if
successive approximants to the root differ by no more than @code{find_root_rel * <one of the approximants>}.
The default values of @code{find_root_abs} and
@code{find_root_rel} are 0.0 so @code{find_root} gets as good an answer as is possible
with the single precision arithmetic we have.

@end defvr

@deffn {Function} newton (@var{expr}, @var{x}, @var{x_0}, @var{eps})
Returns an approximate solution of @code{@var{expr} = 0} by Newton's method,
considering @var{expr} to be a function of one variable, @var{x}.
The search begins with @code{@var{x} = @var{x_0}}
and proceeds until @code{abs(@var{expr}) < @var{eps}}
(with @var{expr} evaluated at the current value of @var{x}).

@code{newton} allows undefined variables to appear in @var{expr},
so long as the termination test @code{abs(@var{expr}) < @var{eps}} evaluates
to @code{true} or @code{false}.
Thus it is not necessary that @var{expr} evaluate to a number.

@code{load(newton1)} loads this function.

See also @code{realroots}, @code{allroots}, @code{find_root}, and @code{mnewton}.

Examples:

@c ===beg===
@c load (newton1);
@c newton (cos (u), u, 1, 1/100);
@c ev (cos (u), u = %);
@c assume (a > 0);
@c newton (x^2 - a^2, x, a/2, a^2/100);
@c ev (x^2 - a^2, x = %);
@c ===end===
@example
(%i1) load (newton1);
(%o1) /usr/share/maxima/5.10.0cvs/share/numeric/newton1.mac
(%i2) newton (cos (u), u, 1, 1/100);
(%o2)                   1.570675277161251
(%i3) ev (cos (u), u = %);
(%o3)                 1.2104963335033528E-4
(%i4) assume (a > 0);
(%o4)                        [a > 0]
(%i5) newton (x^2 - a^2, x, a/2, a^2/100);
(%o5)                  1.00030487804878 a
(%i6) ev (x^2 - a^2, x = %);
                                           2
(%o6)                6.098490481853958E-4 a
@end example

@end deffn

@node Definitions for Fourier Series, , Definitions for Numerical, Numerical
@section Definitions for Fourier Series

@c REPHRASE
@deffn {Function} equalp (@var{x}, @var{y})
Returns @code{true} if @code{equal (@var{x}, @var{y})} otherwise @code{false} (doesn't give an
error message like @code{equal (x, y)} would do in this case).

@c NEEDS EXAMPLES
@end deffn

@deffn {Function} remfun (@var{f}, @var{expr})
@deffnx {Function} remfun (@var{f}, @var{expr}, @var{x})
@code{remfun (@var{f}, @var{expr})}
replaces all occurrences of @code{@var{f} (@var{arg})} by @var{arg} in @var{expr}.

@code{remfun (@var{f}, @var{expr}, @var{x})}
replaces all occurrences of @code{@var{f} (@var{arg})} by @var{arg} in @var{expr}
only if @var{arg} contains the variable @var{x}.

@c NEEDS EXAMPLES
@end deffn

@deffn {Function} funp (@var{f}, @var{expr})
@deffnx {Function} funp (@var{f}, @var{expr}, @var{x})
@code{funp (@var{f}, @var{expr})}
returns @code{true} if @var{expr} contains the function @var{f}.

@code{funp (@var{f}, @var{expr}, @var{x})}
returns @code{true} if @var{expr} contains the function @var{f} and the variable
@var{x} is somewhere in the argument of one of the instances of @var{f}.

@c NEEDS EXAMPLES
@end deffn

@deffn {Function} absint (@var{f}, @var{x}, @var{halfplane})
@deffnx {Function} absint (@var{f}, @var{x})
@deffnx {Function} absint (@var{f}, @var{x}, @var{a}, @var{b})
@code{absint (@var{f}, @var{x}, @var{halfplane})}
returns the indefinite integral of @var{f} with respect to
@var{x} in the given halfplane (@code{pos}, @code{neg}, or @code{both}).
@var{f} may contain expressions of the form
@code{abs (x)}, @code{abs (sin (x))}, @code{abs (a) * exp (-abs (b) * abs (x))}.

@code{absint (@var{f}, @var{x})} is equivalent to @code{absint (@var{f}, @var{x}, pos)}.

@code{absint (@var{f}, @var{x}, @var{a}, @var{b})}
returns the definite integral of @var{f} with respect to @var{x} from @var{a} to @var{b}.
@c SAME LIST AS ABOVE ??
@var{f} may include absolute values.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourier (@var{f}, @var{x}, @var{p})
Returns a list of the Fourier coefficients of @code{@var{f}(@var{x})} defined
on the interval @code{[-p, p]}.

@c NEEDS EXAMPLES
@end deffn

@c NEES EXPANSION. WHAT IS THE ARGUMENT l ??
@deffn {Function} foursimp (@var{l})
Simplifies @code{sin (n %pi)} to 0 if @code{sinnpiflag} is @code{true} and
@code{cos (n %pi)} to @code{(-1)^n} if @code{cosnpiflag} is @code{true}.

@c NEEDS EXAMPLES
@end deffn

@defvr {Option variable} sinnpiflag
Default value: @code{true}

See @code{foursimp}.

@end defvr

@defvr {Option variable} cosnpiflag
Default value: @code{true}

See @code{foursimp}.

@end defvr

@c NEEDS EXPANSION. EXPLAIN x AND p HERE (DO NOT REFER SOMEWHERE ELSE)
@deffn {Function} fourexpand (@var{l}, @var{x}, @var{p}, @var{limit})
Constructs and returns the Fourier series from the list of
Fourier coefficients @var{l} up through @var{limit} terms (@var{limit}
may be @code{inf}). @var{x} and @var{p} have same meaning as in
@code{fourier}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourcos (@var{f}, @var{x}, @var{p})
Returns the Fourier cosine coefficients for @code{@var{f}(@var{x})} defined on @code{[0, @var{p}]}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Function} foursin (@var{f}, @var{x}, @var{p})
Returns the Fourier sine coefficients for @code{@var{f}(@var{x})} defined on @code{[0, @var{p}]}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Function} totalfourier (@var{f}, @var{x}, @var{p})
Returns @code{fourexpand (foursimp (fourier (@var{f}, @var{x}, @var{p})), @var{x}, @var{p}, 'inf)}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourint (@var{f}, @var{x})
Constructs and returns a list of the Fourier integral coefficients of @code{@var{f}(@var{x})}
defined on @code{[minf, inf]}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourintcos (@var{f}, @var{x})
Returns the Fourier cosine integral coefficients for @code{@var{f}(@var{x})} on @code{[0, inf]}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourintsin (@var{f}, @var{x})
Returns the Fourier sine integral coefficients for @code{@var{f}(@var{x})} on @code{[0, inf]}.

@c NEEDS EXAMPLES
@end deffn
