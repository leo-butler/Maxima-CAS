@c -----------------------------------------------------------------------------
@c File        : DataTypes.de.texi
@c License     : GNU General Public License (GPL)
@c Language    : German
@c Original    : Constants.texi revision 1.24
@c Translation : Dr. Dieter Kaiser
@c Date        : 14.03.2011
@c Revision    : 14.03.2011
@c 
@c This file is part of Maxima -- GPL CAS based on DOE-MACSYMA
@c -----------------------------------------------------------------------------

@page
@c -----------------------------------------------------------------------------
@node Funktionen und Variablen f@"ur Konstante, Listen, Zeichenketten, Datentypen und -strukturen
@section Funktionen und Variablen f@"ur Konstante
@c -----------------------------------------------------------------------------

@c --- 15.10.2010 DK -----------------------------------------------------------
@anchor{%e}
@defvr {Konstante} %e
@ifinfo
@vrindex e
@vrindex Eulersche Zahl
@vrindex Basis des nat@"urlichen Logarithmus
@end ifinfo

@code{%e} ist die Basis des nat@"urlichen Logarithmus, auch Eulersche Zahl 
genannt.  Der numerische Wert der Konstanten als Gleitkommazahl mit doppelter
Genauigkeit ist 2.718281828459045d0.

Die Funktion @mref{bfloat} kann @code{%e} mit einer beliebigen Genauigkeit
berechnen.

Beispiel:

@example
(%i1) fpprec:48$
(%i2) bfloat(%e);
(%o2)  2.7182818284590452353602874713526624977572470937b0
@end example
@end defvr

@c --- 15.10.2010 DK -----------------------------------------------------------
@anchor{%i}
@defvr {Konstante} %i
@ifinfo
@vrindex i
@vrindex Imagin@"are Einheit
@end ifinfo

@code{%i} ist die imagin@"are Einheit.
@end defvr

@c --- 15.10.2010 DK -----------------------------------------------------------
@anchor{false}
@defvr {Konstante} false

Repr@"asentiert den logischen Wert @code{falsch}.  @code{false} wird intern von 
Maxima durch die Lisp-Konstante @code{NIL} dargestellt.
@end defvr

@c --- 15.10.2010 DK -----------------------------------------------------------
@anchor{%gamma}
@defvr {Konstante} %gamma
@ifinfo
@vrindex Euler-Mascheroni-Konstante
@end ifinfo

Die Euler-Mascheroni-Konstante mit dem Wert @code{0.5772156649015329} als
Gleitkommazahl in doppelter Genauigkeit.

Die Funktion @mref{bfloat} kann @code{%gamma} mit einer beliebigen Genauigkeit
berechnen.
@end defvr

@c --- 21.08.2010 DK -----------------------------------------------------------
@anchor{ind}
@defvr {Konstante} ind
@ifinfo
@vrindex Unbestimmt
@end ifinfo

@code{ind} repr@"asentiert ein unbestimmtes Ergebnis.  Siehe auch 
@mrefdot{limit}

Beispiel:

@example
(%i1) limit (sin(1/x), x, 0);
(%o1)                          ind
@end example
@end defvr

@c --- 21.08.2010 DK -----------------------------------------------------------
@anchor{inf}
@defvr {Konstante} inf
@ifinfo
@vrindex positiv unendlich
@end ifinfo

@code{inf} repr@"asentiert einen positiven unendlich gro@ss{}en Wert.
@end defvr

@c --- 21.08.2010 DK -----------------------------------------------------------
@anchor{infinity}
@defvr {Konstante} infinity
@ifinfo
@vrindex komplex unendlich
@end ifinfo

@code{infinity} repr@"asentiert einen komplexen unendlichen Wert.
@end defvr

@c --- 21.08.2010 DK -----------------------------------------------------------
@anchor{minf}
@defvr {Konstante} minf
@ifinfo
@vrindex negativ unendlich
@vrindex minus unendlich
@end ifinfo

@code{minf} repr@"asentiert einen negativen unendlichen Wert.
@end defvr

@c --- 21.08.2010 DK -----------------------------------------------------------
@anchor{%phi}
@defvr {Konstante} %phi
@ifinfo
@vrindex phi
@vrindex Goldene Zahl
@end ifinfo

@code{%phi} repr@"asentiert die @i{Goldene Zahl} @math{(1 + sqrt(5))/2}.  Der
Gleitkommawert in doppelter Genauigkeit ist 1.618033988749895d0.

Die Funktion @mref{fibtophi} dr@"uckt Fibonacci-Zahlen @code{fib(n)} durch die
Goldene Zahl @code{%phi} aus.  Stan@-dard@-m@"a@ss{}ig kennt Maxima keine
algebraischen Eigenschaften der Konstanten @code{%phi}.  Mit den Eingaben
@code{tellrat, tellrat(%phi^2-%phi-1)} und @code{algebraic, algebraic:true} kann
die Funktion @mref{ratsimp} einige Vereinfachungen ausf@"uhren.

Beispiele:

@code{fibtophi} dr@"uckt Fibonacci-Zahlen @code{fib(n)} durch @code{%phi} aus.

@example
(%i1) fibtophi (fib (n));
                           n             n
                       %phi  - (1 - %phi)
(%o1)                  -------------------
                           2 %phi - 1
(%i2) fib (n-1) + fib (n) - fib (n+1);
(%o2)          - fib(n + 1) + fib(n) + fib(n - 1)
(%i3) fibtophi (%);
@group
            n + 1             n + 1       n             n
        %phi      - (1 - %phi)        %phi  - (1 - %phi)
(%o3) - --------------------------- + -------------------
                2 %phi - 1                2 %phi - 1
                                          n - 1             n - 1
                                      %phi      - (1 - %phi)
                                    + ---------------------------
                                              2 %phi - 1
@end group
(%i4) ratsimp (%);
(%o4)                           0
@end example

Mit den Eingaben @code{tellrat(%phi^2-%phi-1)} und @code{algebraic:true} kann 
die Funktion @code{ratsimp} einige Vereinfachungen f@"ur Ausdr@"ucke 
ausf@"uhren, die @code{%phi} enthalten.

@example
(%i1) e : expand ((%phi^2 - %phi - 1) * (A + 1));
                 2                      2
(%o1)        %phi  A - %phi A - A + %phi  - %phi - 1
(%i2) ratsimp (e);
                  2                     2
(%o2)        (%phi  - %phi - 1) A + %phi  - %phi - 1
(%i3) tellrat (%phi^2 - %phi - 1);
                            2
(%o3)                  [%phi  - %phi - 1]
(%i4) algebraic : true;
(%o4)                         true
(%i5) ratsimp (e);
(%o5)                           0
@end example
@end defvr

@c --- 15.10.2010 DK -----------------------------------------------------------
@anchor{%pi}
@defvr {Konstante} %pi
@ifinfo
@vrindex Pi
@end ifinfo

@code{%pi} repr@"asentiert die Kreiszahl.  Der numerische Wert in doppelter
Gleitkommagenauigkeit ist @code{3.141592653589793d0}.

Die Funktion @mref{bfloat} kann @code{%pi} mit einer beliebigen Genauigkeit
berechnen.
@end defvr

@c --- 21.08.2010 DK -----------------------------------------------------------
@anchor{true}
@defvr {Konstante} true

@code{true} repr@"asentiert den logischen Wert @code{wahr}.  Intern ist 
@code{true} als die Lisp-Konstante @code{T} implementiert.
@end defvr

@c --- 21.08.2010 DK -----------------------------------------------------------
@anchor{und}
@defvr {Konstante} und
@ifinfo
@vrindex nicht definiert
@end ifinfo

@code{und} repr@"asentiert ein nicht definiertes Ergebnis.  Siehe auch 
@mrefdot{limit}

Beispiel:

@example
(%i1) limit (x*sin(x), x, inf);
(%o1)                          und
@end example
@end defvr

@c --- 21.08.2010 DK -----------------------------------------------------------
@anchor{zeroa}
@defvr {Konstante} zeroa

@code{zeroa} repr@"asentiert eine positive unendlich kleine Zahl.  @code{zeroa}
kann in Ausdr@"ucken benutzt werden.  Die Funktion @code{limit} vereinfacht
Ausdr@"ucke, die infinitesimale Gr@"o@ss{}en enthalten.

Siehe auch @mref{zerob} und @mrefdot{limit}

Beispiele:

@code{limit} vereinfacht Ausdr@"ucke, die infinitesimale Gr@"o@ss{}en enthalten:

@example
(%i1) limit(zeroa);
(%o1)                           0
(%i2) limit(x+zeroa);
(%o2)                           x
@end example
@end defvr

@c --- 15.10.2010 DK -----------------------------------------------------------
@anchor{zerob}
@defvr {Konstante} zerob

@code{zerob} repr@"asentiert eine negative unendlich kleine Zahl.  @code{zerob}
kann in Ausdr@"ucken benutzt werden.  Die Funktion @code{limit} vereinfacht
Ausdr@"ucke, die infinitesimale Gr@"o@ss{}en enthalten.

Siehe auch @mref{zeroa} und @mrefdot{limit}
@end defvr

@c --- End of file Constants.de.texi -------------------------------------------

