@c -----------------------------------------------------------------------------
@c File        : MathFunctions.de.texi
@c License     : GNU General Public License (GPL)
@c Language    : German
@c Translation : Dr. Dieter Kaiser
@c Date        : 19.10.2010
@c 
@c This file is part of Maxima -- GPL CAS based on DOE-MACSYMA
@c -----------------------------------------------------------------------------

@menu 
* Funktionen f@"ur Zahlen::
* Funktionen f@"ur komplexe Zahlen::
* Funktionen der Kombinatorik::
* Algebraische Funktionen::
* Exponential- und Logarithmusfunktion::
* Winkelfunktionen::
* Hyperbelfunktionen::
* Zufallszahlen::
@end menu

@c -----------------------------------------------------------------------------
@node Funktionen f@"ur Zahlen, Funktionen f@"ur komplexe Zahlen, Mathematische Funktionen
@section Funktionen f@"ur Zahlen
@c -----------------------------------------------------------------------------

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{abs}
@deffn {Funktion} abs (@var{expr})

@c Returns the absolute value @var{expr}.  If @var{expr} is complex, returns 
@c the complex modulus of @var{expr}.

Gibt den Betrag des Argumentes @var{expr} zur@"uck. Ist @var{expr} eine komplexe
Zahl wird das Argument zum komplexen Betrag vereinfacht. Allgemeine komplexe
Ausdr@"ucke oder komplexe Funktionen werden von @code{abs} nicht vereinfacht. 
F@"ur komplexe Ausdr@"ucke kann die Funktion @code{cabs} genutzt werden. Siehe 
@code{cabs}.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{ceiling}
@deffn {Funktion} ceiling (@var{x})

@c When @var{x} is a real number, return the least integer that is greater than 
@c or equal to @var{x}.  

F@"ur eine reelle Zahl @var{x} gibt @code{ceiling} die kleinste ganze Zahl 
zur@"uck, die gr@"o@ss{}er oder gleich @var{x} ist.

@c If @var{x} is a constant expression (@code{10 * %pi}, for example), 
@c @code{ceiling} evaluates @var{x} using big floating point numbers, and 
@c applies @code{ceiling} to the resulting big float. Because @code{ceiling} 
@c uses floating point evaluation, it's possible, although unlikely, that 
@c @code{ceiling} could return an erroneous value for constant inputs. To guard 
@c against errors, the floating point evaluation is done using three values for 
@c @code{fpprec}.

Ist @var{expr} ein konstanter Ausdruck, zum Beispiel @code{10*%pi}, dann wird 
der Ausdruck @var{expr} in eine gro@ss{}e Gleitkommazahl umgewandelt. Auf die 
gro@ss{}e Gleitkommazahl wird dann @code{ceiling} angewendet. Aufgrund der 
Umwandlung in Gleitkommazahlen f@"ur konstante Ausdr@"ucke, ist es m@"oglich, 
dass @code{ceiling} ein fehlerhaftes Ergebnis errechnet. Um solche Fehler zu 
minimieren, wird bei der Umwandlung in Gleitkommazahlen die Genauigkeit 
@code{fpprec} um drei zus@"atzliche Stellen erh@"oht.

@c For non-constant inputs, @code{ceiling} tries to return a simplified value.  
@c Here are examples of the simplifications that @code{ceiling} knows about:

Nicht-konstante Ausdr@"ucke versucht @code{ceiling} zu vereinfachen. Es folgen
Beispiele f@"ur solche Vereinfachungen:

@c ===beg===
@c ceiling (ceiling (x));
@c ceiling (floor (x));
@c declare (n, integer)$
@c [ceiling (n), ceiling (abs (n)), ceiling (max (n, 6))];
@c assume (x > 0, x < 1)$
@c ceiling (x);
@c tex (ceiling (a));
@c ===end===
@example
(%i1) ceiling (ceiling (x));
(%o1)                      ceiling(x)
(%i2) ceiling (floor (x));
(%o2)                       floor(x)
(%i3) declare (n, integer)$
(%i4) [ceiling (n), ceiling (abs (n)), ceiling (max (n, 6))];
(%o4)                [n, abs(n), max(n, 6)]
(%i5) assume (x > 0, x < 1)$
(%i6) ceiling (x);
(%o6)                           1
(%i7) tex (ceiling (a));
$$\left \lceil a \right \rceil$$
(%o7)                         false
@end example

@c The function @code{ceiling} does not automatically map over lists or 
@c matrices. Finally, for all inputs that are manifestly complex, @code{ceiling}
@c returns a noun form.

Ist das Argument der Funktion offenbar ein komplexer Ausdruck,
wird die Substantiv-Form zur@"uck gegeben.

@c If the range of a function is a subset of the integers, it can be declared 
@c to be @code{integervalued}. Both the @code{ceiling} and @code{floor} 
@c functions can use this information; for example:

Sind die Werte einer Funktion eine Teilmenge der ganzen Zahlen, kann diese als
@code{integervalued} deklariert werden. Die Funktionen @code{ceiling} und
@code{floor} k@"onnen diese Information nutzen, um Ausdr@"ucke zu vereinfachen:

@c ===beg===
@c declare (f, integervalued)$
@c floor (f(x));
@c ceiling (f(x) - 1);
@c ===end===
@example
(%i1) declare (f, integervalued)$
(%i2) floor (f(x));
(%o2)                         f(x)
(%i3) ceiling (f(x) - 1);
(%o3)                       f(x) - 1
@end example

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{entier}
@deffn {Funktion} entier (@var{x})

@c Returns the largest integer less than or equal to @var{x} where @var{x} is 
@c numeric.  @code{fix} (as in @code{fixnum}) is a synonym for this, so 
@c @code{fix(@var{x})} is precisely the same.

@code{entier} ist eine andere Bezeichnung f@"ur die Funktion @code{floor}. Siehe
@code{floor}.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{floor}
@deffn {Funktion} floor (@var{x})

@c When @var{x} is a real number, return the largest integer that is less than 
@c or equal to @var{x}.

F@"ur eine reelle Zahl @var{x} gibt @code{floor} die gr@"o@ss{}te ganze Zahl 
zur@"uck, die kleiner oder gleich @var{x} ist.

@c If @var{x} is a constant expression (@code{10 * %pi}, for example), 
@c @code{floor} evaluates @var{x} using big floating point numbers, and applies 
@c @code{floor} to the resulting big float. Because @code{floor} uses
@c floating point evaluation, it's possible, although unlikely, that 
@c @code{floor} could return  an erroneous value for constant inputs. To guard 
@c against errors, the floating point evaluation is done using three values for 
@c @code{fpprec}.

Ist @var{expr} ein konstanter Ausdruck, zum Beispiel @code{10*%pi}, dann wird 
der Ausdruck @var{expr} in eine gro@ss{}e Gleitkommazahl umgewandelt. Auf die 
gro@ss{}e Gleitkommazahl wird dann @code{floor} angewendet. Aufgrund der 
Umwandlung in Gleitkommazahlen f@"ur konstante Ausdr@"ucke, ist es m@"oglich, 
dass @code{floor} ein fehlerhaftes Ergebnis errechnet. Um solche Fehler zu 
minimieren, wird bei der Umwandlung in Gleitkommazahlen die Genauigkeit 
@code{fpprec} um drei zus@"atzliche Stellen erh@"oht.

@c For non-constant inputs, @code{floor} tries to return a simplified value. 
@c Here are examples of the simplifications that @code{floor} knows about:

Nicht-konstante Ausdr@"ucke versucht @code{floor} zu vereinfachen. Es folgen
Beispiele f@"ur solche Vereinfachungen:

@c ===beg===
@c floor (ceiling (x));
@c floor (floor (x));
@c declare (n, integer)$
@c [floor (n), floor (abs (n)), floor (min (n, 6))];
@c assume (x > 0, x < 1)$
@c floor (x);
@c tex (floor (a));
@c ===end===
@example
(%i1) floor (ceiling (x));
(%o1)                      ceiling(x)
(%i2) floor (floor (x));
(%o2)                       floor(x)
(%i3) declare (n, integer)$
(%i4) [floor (n), floor (abs (n)), floor (min (n, 6))];
(%o4)                [n, abs(n), min(n, 6)]
(%i5) assume (x > 0, x < 1)$
(%i6) floor (x);
(%o6)                           0
(%i7) tex (floor (a));
$$\left \lfloor a \right \rfloor$$
(%o7)                         false
@end example

@c The function @code{floor} does not automatically map over lists or matrices.
@c Finally, for all inputs that are manifestly complex, @code{floor} returns 
@c a noun form.

Ist das Argument der Funktion offenbar ein komplexer Ausdruck, wird eine
Substantiv-Form zur@"uck gegeben.

@c If the range of a function is a subset of the integers, it can be declared to
@c be @code{integervalued}. Both the @code{ceiling} and @code{floor} functions
@c can use this information; for example:

Sind die Werte einer Funktion eine Teilmenge der ganzen Zahlen, kann diese als
@code{integervalued} deklariert werden. Die Funktionen @code{ceiling} und
@code{floor} k@"onnen diese Information nutzen, um Ausdr@"ucke zu vereinfachen:

@c ===beg===
@c declare (f, integervalued)$
@c floor (f(x));
@c ceiling (f(x) - 1);
@c ===end===
@example
(%i1) declare (f, integervalued)$
(%i2) floor (f(x));
(%o2)                         f(x)
(%i3) ceiling (f(x) - 1);
(%o3)                       f(x) - 1
@end example

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{fix}
@deffn {Funktion} fix (@var{x})

@c A synonym for @code{entier (@var{x})}.

@code{fix} ist eine andere Bezeichnung f@"ur die Funktion @code{floor}. Siehe
@code{floor}.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{lmax}
@deffn {Funktion} lmax (@var{L})

@c When @var{L} is a list or a set, return @code{apply ('max, args (@var{L}))}. 
@c When @var{L} isn't a list or a set, signal an error.

Ist @var{L} eine Liste oder Menge, wird die Funktion @code{max} auf die Elemente
der Liste oder Menge angewendet und das Ergebnis zur@"uckgegeben. Ist @var{L} 
keine Liste oder Menge, wird ein Maxima-Fehler signalisiert.

@c @opencatbox
@c @category{Mathematische Funktionen} @category{Listen} @category{Mengen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{lmin}
@deffn {Funktion} lmin (@var{L})

@c When @var{L} is a list or a set, return @code{apply ('min, args (@var{L}))}. 
@c When @var{L} isn't a list or a set, signal an error.

Ist @var{L} eine Liste oder Menge, wird die Funktion @code{min} auf die Elemente
der Liste oder Menge angewendet und das Ergebnis zur@"uckgegeben. Ist @var{L} 
keine Liste oder Menge, wird ein Maxima-Fehler signalisiert.

@c @opencatbox
@c @category{Mathematische Funktionen} @category{Listen} @category{Mengen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{max}
@deffn {Funktion} max (@var{x_1}, ..., @var{x_n})

@c Return a simplified value for the maximum of the expressions @var{x_1} 
@c through @var{x_n}. When @code{get (trylevel, maxmin)}, is 2 or greater, 
@c @code{max} uses the simplification @code{max (e, -e) --> |e|}.  When 
@c @code{get (trylevel, maxmin)} is 3 or greater, @var{max} tries
@c to eliminate expressions that are between two other arguments; for example,
@c @code{max (x, 2*x, 3*x) --> max (x, 3*x)}. To set the value of 
@c @code{trylevel} to 2, use @code{put (trylevel, 2, maxmin)}.

Gibt einen vereinfachten Wert f@"ur das Maximum der Ausdr@"ucke @var{x_1} bis 
@var{x_n}. Ist @code{get(trylevel, maxmin)} gleich 2 oder gr@"o@ss{}er, nutzt
@code{max} die Vereinfachung @code{max(e,-e) --> |e|}. Ist 
@code{get(trylevel, maxmin)} gleich 3 oder gr@"o@ss{}er, versucht @code{max} 
Ausdr@"ucke zu eleminieren, die zwischen zwei anderen Argumenten liegen. So wird
zum Beispiel @code{max(x,2*x, 3*x)} zu @code{max(x, 3*x)} vereinfacht. 
@code{put(trylevel, 2, maximin)} setzt den Wert von @code{trylevel} zu 2.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn 

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{min}
@deffn {Funktion} min (@var{x_1}, ..., @var{x_n})

@c Return a simplified value for the minimum of the expressions @code{x_1} 
@c through @code{x_n}. When @code{get (trylevel, maxmin)}, is 2 or greater, 
@c @code{min} uses the simplification @code{min (e, -e) --> -|e|}.  When 
@c @code{get (trylevel, maxmin)} is 3 or greater, @code{min} tries to eliminate 
@c expressions that are between two other arguments; for example,
@c @code{min (x, 2*x, 3*x) --> min (x, 3*x)}. To set the value of 
@c @code{trylevel} to 2, use @code{put (trylevel, 2, maxmin)}.

Gibt einen vereinfachten Wert f@"ur das Minimum der Ausdr@"ucke @var{x_1} bis 
@var{x_n}. Ist @code{get(trylevel, maxmin)} gleich 2 oder gr@"o@ss{}er, nutzt
@code{min} die Vereinfachung @code{min(e,-e) --> |e|}. Ist 
@code{get(trylevel, maxmin)} gleich 3 oder gr@"o@ss{}er, versucht @code{min} 
Ausdr@"ucke zu eleminieren, die zwischen zwei anderen Argumenten liegen. So wird
zum Beispiel @code{min(x,2*x, 3*x)} zu @code{min(x, 3*x)} vereinfacht. 
@code{put(trylevel, 2, maximin)} setzt den Wert von @code{trylevel} zu 2.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{mod}
@deffn {Funktion} mod (@var{x}, @var{y})

@c If @var{x} and @var{y} are real numbers and @var{y} is nonzero, return 
@c @code{@var{x} - @var{y} * floor(@var{x} / @var{y})}. Further for all real 
@c @var{x}, we have @code{mod (@var{x}, 0) = @var{x}}. For a discussion of the 
@c definition @code{mod (@var{x}, 0) = @var{x}}, see Section 3.4, of 
@c "Concrete Mathematics," by Graham, Knuth, and Patashnik. The function 
@c @code{mod (@var{x}, 1)} is a sawtooth function with period 1 with 
@c @code{mod (1, 1) = 0} and @code{mod (0, 1) = 0}.

Sind @var{x} und @var{y} reelle Zahlen und ist @var{y} ungleich Null, gibt 
@code{mod(@var{x}, @var{y})} das Ergebnis von @code{@var{x} - @var{y} * 
floor(@var{x} / @var{y})} zur@"uck. Weiterhin gilt f@"ur alle reellen Zahlen
@code{mod(@var{x}, 0) = @var{x}}. F@"ur eine Diskussion dieser Definition siehe
Kapitel 3.4, "Concrete Mathematics," by Graham, Knuth, and Patashnik. Die 
Funktion @code{mod(@var{x}, 1)} ist eine S@"agezahnfunktion mit der Periode 1 
mit @code{mod(1, 1) = 0} und @code{mod (0, 1) = 0}.

@c To find the principal argument (a number in the interval @code{(-%pi, %pi]}) 
@c of a complex number, use the function @code{@var{x} |-> %pi - mod (%pi - 
@c @var{x}, 2*%pi)}, where @var{x} is an argument.

Um den Hauptwert (eine Zahl im Interval @code{(-%pi, %pi)}) einer komplexen Zahl
zu finden, kann @code{@var{x} |-> %pi - mod(%pi - @var{x}, 2*%pi)} genutzt 
werden, wobei @var{x} das Argument ist.

@c When @var{x} and @var{y} are constant expressions (@code{10 * %pi}, for 
@c example), @code{mod} uses the same big float evaluation scheme that 
@c @code{floor} and @code{ceiling} uses. Again, it's possible, although 
@c unlikely, that @code{mod} could return an erroneous value in such cases.

Sind @var{x} und @var{y} konstante Ausdr@"ucke (zum Beispiel @code{10 * %pi}), 
nutzt @code{mod} denselben Algorithmus f@"ur gro@ss{}e Gleitkommazahlen wie 
@code{floor} und @code{ceiling}. Wieder ist es m@"oglich, das @code{mod} in 
diesen F@"allen ein fehlerhaftes Ergebnis berechnet.

@c For nonnumerical arguments @var{x} or @var{y}, @code{mod} knows several 
@c simplification rules:

F@"ur nicht nummerische Argumente @var{x} oder @var{y} kennt @code{mode} 
verschiedene Vereinfachungen:

@c ===beg===
@c mod (x, 0);
@c mod (a*x, a*y);
@c mod (0, x);
@c ===end===
@example
(%i1) mod (x, 0);
(%o1)                           x
(%i2) mod (a*x, a*y);
(%o2)                      a mod(x, y)
(%i3) mod (0, x);
(%o3)                           0
@end example

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{round}
@deffn {Funktion} round (@var{x})

@c When @var{x} is a real number, returns the closest integer to @var{x}.  
@c Multiples of 1/2 are rounded to the nearest even integer. Evaluation of 
@c @var{x} is similar to  @code{floor} and @code{ceiling}.

Ist @var{x} eine reelle Zahl, gibt @code{round} die am n@"achsten liegende ganze
Zahl zur@"uck. Vielfache von 1/2 werden auf die n@"achste gerade ganze Zahl 
gerundet. Die Methode zur Berechnung von @var{x} ist vergleichbar mit den
Methoden der Funktionen @code{floor} und @code{ceiling}.

Siehe auch @code{floor} und @code{ceiling}.

@c @opencatbox
@c @category{Mathematische Funktionen} @category{Funktionen f@"ur ganze Zahlen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{signum}
@deffn {Funktion} signum (@var{x})

@c For numeric @var{x}, returns 0 if @var{x} is 0, otherwise returns -1 or +1
@c as @var{x} is less than or greater than 0, respectively.

Ist @var{x} eine Zahl, ist das Ergebnis 0, wenn @var{x} gleich 0 ist, oder -1
f@"ur eine Zahl kleiner als 0 und +1 f@"ur eine Zahl, die gr@"o@ss{}er als 0 
ist.

@c If @var{x} is not numeric then a simplified but equivalent form is returned.
@c For example, @code{signum(-x)} gives @code{-signum(x)}.

Ist @var{x} keine Zahl, versucht Maxima den Ausdruck zu vereinfachen. So wird 
zum Beispiel @code{signum(-x)} zu @code{-signum(x)} vereinfacht.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Funktionen f@"ur komplexe Zahlen, Funktionen der Kombinatorik, Funktionen f@"ur Zahlen
@section Funktionen f@"ur komplexe Zahlen
@c -----------------------------------------------------------------------------

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{cabs}
@deffn {Funktion} cabs (@var{expr})

@c Returns the complex absolute value (the complex modulus) of @var{expr}.

Gibt den Betrag eines komplexen Ausdrucks @var{expr} zur@"uck. Im Unterschied
zu der Funktion @code{abs}, die komplexe Ausdr@"ucke und Funktionen nicht
vereinfacht, zerlegt die Funktion @code{cabs} einen komplexen Ausdruck
immer in einen Realteil und einen Imagin@"arteil, um den komplexen Betrag
zu berechnen.

@c @opencatbox
@c @category{Komplexe Zahlen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{carg}
@deffn {Funktion} carg (@var{z})

@c Returns the complex argument of @var{z}. The complex argument is an angle 
@c @code{theta} in @code{(-%pi, %pi]} such that @code{r exp (theta %i) = 
@c @var{z}} where @code{r} is the magnitude of @var{z}.

Gibt das komplexe Argument von @var{z} zur@"uck. Das komplexe Argument ist ein
Winkel @code{theta} im Intervall @code{(-%pi, %pi)} derart, das @var{z} = 
@code{r exp (theta %i)} ist, wobei @code{r} den Betrag des komplexen Ausdrucks 
@var{z} bezeichnet.

@c @code{carg} is a computational function, not a simplifying function.

@c See also @code{abs} (complex magnitude), @code{polarform}, @code{rectform},
@c @code{realpart}, and @code{imagpart}.

Siehe auch @code{cabs}, @code{polarform}, @code{rectform}, @code{realpart} und 
@code{imagpart}.

Beispiele:

@c ===beg===
@c carg (1);
@c carg (1 + %i);
@c carg (exp (%i));
@c carg (exp (%pi * %i));
@c carg (exp (3/2 * %pi * %i));
@c carg (17 * exp (2 * %i));
@c ===end===
@example
(%i1) carg (1);
(%o1)                           0
(%i2) carg (1 + %i);
                               %pi
(%o2)                          ---
                                4
(%i3) carg (exp (%i));
(%o3)                           1
(%i4) carg (exp (%pi * %i));
(%o4)                          %pi
(%i5) carg (exp (3/2 * %pi * %i));
                                %pi
(%o5)                         - ---
                                 2
(%i6) carg (17 * exp (2 * %i));
(%o6)                           2
@end example

@c @opencatbox
@c @category{Komplexe Ausdr@"ucke}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{conjugate}
@deffn {Funktion} conjugate (@var{x})

@c Returns the complex conjugate of @var{x}.

Gibt den konjugiert komplexen Wert des Ausdruckes @var{x} zur@"uck.

Beispiele:

@c ===beg===
@c declare ([aa, bb], real, cc, complex, ii, imaginary);
@c conjugate (aa + bb*%i);
@c conjugate (cc);
@c conjugate (ii);
@c conjugate (xx + yy);
@c ===end===
@example
(%i1) declare ([aa, bb], real, cc, complex, ii, imaginary);

(%o1)                         done
(%i2) conjugate (aa + bb*%i);

(%o2)                      aa - %i bb
(%i3) conjugate (cc);

(%o3)                     conjugate(cc)
(%i4) conjugate (ii);

(%o4)                         - ii
(%i5) conjugate (xx + yy);

(%o5)             conjugate(yy) + conjugate(xx)
@end example

@c @opencatbox
@c @category{Complex variables}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{imagpart}
@deffn {Funktion} imagpart (@var{expr})

@c Returns the imaginary part of the expression @var{expr}.

Gibt den Imagin@"arteil des Ausdrucks @var{expr} zur@"uck.

@c @code{imagpart} is a computational function, not a simplifying function.
   @c PROBABLY NEED TO EXPLAIN IMPLICATIONS OF ABOVE STATEMENT

@c See also @code{abs}, @code{carg}, @code{polarform}, @code{rectform},
@c and @code{realpart}.

Siehe auch @code{abs}, @code{carg}, @code{polarform}, @code{rectform} 
und @code{realpart}.

@c @opencatbox
@c @category{Komplexe Zahlen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{polarform}
@deffn {Funktion} polarform (@var{expr})

@c Returns an expression @code{r %e^(%i theta)} equivalent to @var{expr}, such 
@c that @code{r} and @code{theta} are purely real.

Gibt einen zu @var{expr} @"aquivalenten Ausdruck @code{r %e^(%i theta)} 
zur@"uck. @code{r} ist der Betrag der komplexen Ausdrucks @var{expr} und 
@code{theta} sein das Argument.

@c @opencatbox
@c @category{Komplexe Zahlen} @category{Exponentialfunktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{realpart}
@deffn {Funktion} realpart (@var{expr})

@c Returns the real part of @var{expr}. @code{realpart} and @code{imagpart} will
@c work on expressions involving trigonometic and hyperbolic functions, as well 
@c as square root, logarithm, and exponentiation.

Gibt den Realteil des Ausrucks @var{expr} zur@"uck.

@c @opencatbox
@c @category{Complex variables}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@anchor{rectform}
@deffn {Funktion} rectform (@var{expr})

@c Returns an expression @code{a + b %i} equivalent to @var{expr}, such that 
@c @var{a} and @var{b} are purely real.

Zerlegt einen Ausdruck in den Realteil @code{a} und den Imagin@"arteil @code{b}
und gibt den komplexen Ausdruck @code{a + b %i} zur@"uck.

@c @opencatbox
@c @category{Komplexe Zahlen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Funktionen der Kombinatorik, Algebraische Funktionen, Funktionen f@"ur komplexe Zahlen
@section Funktionen der Kombinatorik
@c -----------------------------------------------------------------------------

@c TODO: DOKUMENTATION FÜR DOUBLE_FACTORIAL FEHLT

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{!!}
@deffn {Operator} !!
@ifinfo
@fnindex Doppelte Fakult@"at
@end ifinfo

@c The double factorial operator.

Ist der Operator der doppelten Fakult@"at. 

@c For an integer, float, or rational number @code{n}, @code{n!!} evaluates to 
@c the product @code{n (n-2) (n-4) (n-6) ... (n - 2 (k-1))} where @code{k} is 
@c equal to @code{entier (n/2)}, that is, the largest integer less than or equal
@c to @code{n/2}. Note that this definition does not coincide with other 
@c published definitions for arguments which are not integers.
@c REPORTED TO BUG TRACKER AS BUG # 1093138 !!!

F@"ur eine ganze Zahl, rationale Zahl oder Gleitkommazahl @code{n},  wird 
@code{n!!} zu dem Produkt @code{n (n-2) (n-4) (n-6) ... (n - 2 (k-1))} 
vereinfacht, wobei @code{k} gleich @code{floor(n/2)} ist und @code{floor} die 
gr@"o@ss{}te ganze Zahl liefert, die kleiner oder gleich @code{n/2} ist. Diese 
Definition entspricht f@"ur nicht ganze Zahlen nicht der @"ublichen Definition.

@c For an even (or odd) integer @code{n}, @code{n!!} evaluates to the product of
@c all the consecutive even (or odd) integers from 2 (or 1) through @code{n} 
@c inclusive.

F@"ur eine gerade (oder ungerade) ganze Zahl wird @code{n!!} zum Produkt aller
aufeinanderfolgenden geraden (oder ungeraden) ganzen Zahlen beginnend mit 2 
(oder 1) einschlie@ss{}lich @code{n} vereinfacht.

@c For an argument @code{n} which is not an integer, float, or rational,
@c @code{n!!} yields a noun form @code{genfact (n, n/2, 2)}.
@c n!! IS NEITHER SIMPLIFIED NOR EVALUATED IN THIS CASE -- MENTION THAT? 
@c OR TOO MUCH DETAIL ???

F@"ur ein Argument @code{n}, das keine ganze, rationale oder Gleitkommazahl ist, 
gibt @code{n!!} die Substantivform @code{genfact(n, n/2,2)} zur@"uck.

Maxima kennt noch die Funktion @code{double_factorial}, die wesentlich 
allgemeiner definiert ist. Siehe @code{double_factorial}.

@c @opencatbox
@c @category{Gamma Funktion und Fakult@"at} @category{Operatoren}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} bern (@var{n})
Returns the @var{n}'th Bernoulli number for integer @var{n}.
@c WELL, ACTUALLY bern SIMPLIFIES, LIKE FACTORIAL -- DO WE WANT TO GET INTO THAT ???
@c OR JUST PRETEND IT'S "RETURNED" ???
Bernoulli numbers equal to zero are suppressed if @code{zerobern} is @code{false}.

See also @code{burn}.

@example
(%i1) zerobern: true$
(%i2) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                  1  1       1      1        1
(%o2)       [1, - -, -, 0, - --, 0, --, 0, - --]
                  2  6       30     42       30
(%i3) zerobern: false$
(%i4) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
            1  1    1   5     691   7    3617  43867
(%o4) [1, - -, -, - --, --, - ----, -, - ----, -----]
            2  6    30  66    2730  6    510    798
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} bernpoly (@var{x}, @var{n})
Returns the @var{n}'th Bernoulli polynomial in the
variable @var{x}.

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} bfzeta (@var{s}, @var{n})
Returns the Riemann zeta function for the argument @var{s}.
The return value is a big float (bfloat);
@var{n} is the number of digits in the return value.

@c @opencatbox
@c @category{Number theory} @category{Numerical evaluation}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} bfhzeta (@var{s}, @var{h}, @var{n})
Returns the Hurwitz zeta function for the arguments @var{s} and @var{h}.
The return value is a big float (bfloat);
@var{n} is the number of digits in the return value.

The Hurwitz zeta function is defined as

@tex
$$\zeta \left(s,h\right) = \sum_{k=0}^\infty {1 \over \left(k+h\right)^{s}}$$
@end tex
@ifnottex
@example
                        inf
                        ====
                        \        1
         zeta (s,h)  =   >    --------
                        /            s
                        ====  (k + h)
                        k = 0
@end example
@end ifnottex

@code{load ("bffac")} loads this function.

@c @opencatbox
@c @category{Number theory} @category{Numerical evaluation}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{binomial}
@deffn {Funktion} binomial (@var{x}, @var{y})

@c The binomial coefficient @code{@var{x}!/(@var{y}! (@var{x} - @var{y})!)}. If 
@c @var{x} and @var{y} are integers, then the numerical value of the binomial
@c coefficient is computed. If @var{y}, or @var{x - y}, is an integer, the 
@c binomial coefficient is expressed as a polynomial.

Der Binomialkoeffizient @code{@var{x}!/(@var{y}! (@var{x} - @var{y})!)}. Sind
die Argumente @var{x} und @var{y} ganze Zahlen, wird der Binomialkoeffizient
numerisch berechnet. Sind @var{y} oder @var{x-y} ganze Zahlen, dann wird der
Binomialkoeffizient zu einem Polynom vereinfacht.

Beispiele:

@c ===beg===
@c binomial (11, 7);
@c 11! / 7! / (11 - 7)!;
@c binomial (x, 7);
@c binomial (x + 7, x);
@c binomial (11, y);
@c ===end===
@example
(%i1) binomial (11, 7);
(%o1)                          330
(%i2) 11! / 7! / (11 - 7)!;
(%o2)                          330
(%i3) binomial (x, 7);
        (x - 6) (x - 5) (x - 4) (x - 3) (x - 2) (x - 1) x
(%o3)   -------------------------------------------------
                              5040
(%i4) binomial (x + 7, x);
      (x + 1) (x + 2) (x + 3) (x + 4) (x + 5) (x + 6) (x + 7)
(%o4) -------------------------------------------------------
                               5040
(%i5) binomial (11, y);
(%o5)                    binomial(11, y)
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} burn (@var{n})
Returns the @var{n}'th Bernoulli number for integer @var{n}.
@code{burn} may be more efficient than @code{bern} for large, isolated @var{n}
(perhaps @var{n} greater than 105 or so), @c CLAIM MADE IN bffac.usg !!!
as @code{bern} computes all the Bernoulli numbers up to index @var{n} before returning.

@c STATEMENTS ABOUT TIMING NEED VERIFICATION !!!
@c CAN'T VERIFY NOW AS burn IS BROKEN IN 5.9.1 AND CVS BUILD AT PRESENT !!!
@c (BERN(402) takes about 645 secs vs 13.5 secs for BURN(402).
@c The time to compute @code{bern} is approximately exponential,
@c while the time to compute @code{burn} is approximately cubic.
@c But if next you do BERN(404), it only takes 12 secs,
@c since BERN remembers all in an array, whereas BURN(404) will take
@c maybe 14 secs or maybe 25, depending on whether Maxima needs to
@c BFLOAT a better value of %PI.)

@code{burn} exploits the observation that (rational) Bernoulli numbers can be
approximated by (transcendental) zetas with tolerable efficiency.

@code{load ("bffac")} loads this function.

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} euler (@var{n})
Returns the @var{n}'th Euler number for nonnegative integer @var{n}.

For the Euler-Mascheroni constant, see @code{%gamma}.

@example
(%i1) map (euler, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
(%o1)    [1, 0, - 1, 0, 5, 0, - 61, 0, 1385, 0, - 50521]
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c --- 12.11.2010 DK -----------------------------------------------------------
@anchor{factcomb}
@deffn {Funktion} factcomb (@var{expr})

@c Tries to combine the coefficients of factorials in @var{expr} with the 
@c factorials themselves by converting, for example, @code{(n + 1)*n!} into 
@c @code{(n + 1)!}.

Versucht Faktoren in Ausdr@"ucken mit Fakult@"aten zusammenzufassen. Zum 
Beispiel wird @code{(n+1)*n!} zu @code{(n+1)!} zusammengefasst.

@c @code{sumsplitfact} if set to @code{false} will cause @code{minfactorial} to
@c be applied after a @code{factcomb}.

Hat die Optionsvariable @code{sumsplitfact} den Wert @code{false}, wird die
Vereinfachung mit der Funktion @code{minfactorial} nach der Funktion
@code{factcomb} angewendet.

@c Example:
@c UH, THESE ARE THE EXPRESSIONS WHICH WERE GIVEN IN 
@c THE PREVIOUS REVISION OF THIS FILE, BUT IN THIS CASE
@c factcomb HAS NO EFFECT -- I GUESS A DIFFERENT EXAMPLE IS CALLED FOR
@c (n + 1)^b*n!^b;
@c factcomb (%);
@c @opencatbox
@c @category{Gamma and factorial functions}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{factorial}
@anchor{!}
@deffn  {Funktion} factorial (@var{x})
@deffnx {Operator} !
@ifinfo
@fnindex Fakult@"at
@end ifinfo

@c The factorial operator. For any complex number @code{x}, except for negative 
@c integers, @code{x!} is defined as @code{gamma(x+1)}.

@code{factorial} ist die Funktion f@"ur die Berechnung der Fakult@"at. Der 
Operator f@"ur die Fakult@"at @code{!}, ist identisch mit der Funktion. F@"ur 
jede komplexe Zahl @code{x}, einschlie@ss{}lich ganze und rationale Zahlen, 
sowie Gleitkommazahlen und mit Ausnahme der negative ganzen Zahlen, ist die 
Fakult@"at definiert als @code{gamma(x+1}.

@c For an integer @code{x}, @code{x!} simplifies to the product of the integers 
@c from 1 to @code{x} inclusive. @code{0!} simplifies to 1. For a real or 
@c complex number in float or bigfloat precision @code{x}, @code{x!} simplifies
@c to the value of @code{gamma (x+1)}. For @code{x} equal to @code{n/2} where 
@c @code{n} is an odd integer, @code{x!} simplifies to a rational factor times 
@c @code{sqrt (%pi)} (since @code{gamma (1/2)} is equal to @code{sqrt (%pi)}).

F@"ur eine ganze Zahl @code{x}, vereinfacht @code{x!} zum Produkt der ganzen 
Zahlen von 1 bis einschlie@ss{}lich @code{x}. @code{0!} vereinfacht zu 1. F@"ur
eine Gleitkommazahl vereinfacht @code{x!} zu @code{gamma(x+1)}. F@"ur eine 
halbzahlige rationale Zahl @code{n/2}, wobei @code{n} eine ungerade ganze Zahl 
ist, vereinfacht @code{(n/2)!} zu einem rationalen Faktor multipliziert mit
@code{sqrt(%pi)}. F@"ur jedes andere Argument wird @code{x!} nicht vereinfacht.

@c The option variables @code{factlim} and @code{gammalim} control the numerical 
@c evaluation of factorials for integer and rational arguments. The functions 
@c @code{minfactorial} and @code{factcomb} simplifies expressions containing 
@c factorials. See @code{factlim}, @code{gammalim}, @code{minfactorial} and 
@c @code{factcomb}.

Die Optionsvariablen @code{factlim} und @code{gammalim} steuern die numerische
Berechnung von Ausdr@"ucken, die Fakult@"aten enthalten. Siehe @code{factlim} 
und @code{gammalim}.

Die Funktionen @code{minfactorial} und @code{factcomb} vereinfachen 
Ausdr@"ucken, die die Fakult@"at enthalten. Siehe @code{minfactorial} und 
@code{factcomb}.

@c The functions @code{gamma}, @code{bffac}, and @code{cbffac} are varieties of 
@c the gamma function. @code{bffac} and @code{cbffac} are called internally by 
@c @code{gamma} to evaluate the gamma function for real and complex numbers in 
@c bigfloat precision.

Die Funktionen @code{gamma}, @code{bbfac} und @code{cbffac} sind Varianten der
Gamma Funktion. @code{bffac} und @code{cbffac} werden intern von Maxima 
aufgerufen, um die Gammafunktion f@"ur reelle und komplexe gro@ss{}e 
Gleitkommazahlen zu berechnen.

@c @code{makegamma} substitutes @code{gamma} for factorials and related 
@c functions.

Die Funktion @code{makegamma} ersetzt die Gamma Funktion @code{gamma} f@"ur die
Fakult@"at und verwandte Funktionen in einem Ausdruck.

@c Maxima knows the derivative of the factorial function and the limits for 
@c specific values like negative integers.

Maxima kennt die Ableitung der Fakult@"at und den Grenzwert f@"ur spezielle Wert
wie negative ganze Zahlen.

@c The option variable @code{factorial_expand} controls the simplification of 
@c expressions like @code{(n+x)!}, where @code{n} is an integer.

Die Optionsvariable @code{factorial_expand} kontrolliert die Vereinfachung von 
Ausdr@"ucken wie @code{(n+1)!}, wobei @code{n} eine ganze Zahl ist.

@c See also @code{binomial}.

Siehe auch @code{binomial}.

Beispiele:

@c The factorial of an integer is simplified to an exact number unless the 
@c operand is greater than @code{factlim}. The factorial for real and complex 
@c numbers is evaluated in float or bigfloat precision.

Die Fakult@"at einer ganzen Zahl wird zu einer exakten Zahl vereinfacht, wenn
das Argument nicht gr@"o@ss{}er als @code{factlim} ist. Die Fakult@"at f@"ur 
reelle und komplexe Zahlen wird in als Gleitkommazahl berechnet.

@c ===beg===
@c factlim : 10;
@c [0!, (7/2)!, 8!, 20!];
@c [4,77!, (1.0+%i)!];
@c [2.86b0!, 1.0b0+%i)!];
@c ===end===
@example
(%i1) factlim:10;
(%o1)                                 10
(%i2) [0!, (7/2)!, 8!, 20!];
                            105 sqrt(%pi)
(%o2)                   [1, -------------, 40320, 20!]
                                 16
(%i3) [4.77!, (1.0+%i)!];
(%o3)    [81.44668037931197, 
          .3430658398165454 %i + .6529654964201665]
(%i4) [2.86b0!, (1.0b0+%i)!];
(%o4) [5.046635586910012b0, 
       3.430658398165454b-1 %i + 6.529654964201667b-1]
@end example

@c The factorial of a known constant, or general expression is not simplified. 
@c Even so it may be possible to simplify the factorial after evaluating the 
@c operand.

Die Fakult@"at einer komplexen Zahl, bekannten Konstanten oder eines allgemeinen
Ausdrucks wird nicht vereinfacht. Der Vereinfachung kann m@"oglich sein, wenn 
der Operand zu einer Zahl ausgewertet werden kann.

@c ===beg===
@c [(%i + 1)!, %pi!, %e!, (cos(1) + sin(1))!];
@c ev (%, numer, %enumer);
@c ===end===
@example
(%i1) [(%i + 1)!, %pi!, %e!, (cos(1) + sin(1))!];
(%o1)      [(%i + 1)!, %pi!, %e!, (sin(1) + cos(1))!]
(%i2) ev (%, numer, %enumer);
(%o2) [.3430658398165454 %i + .6529654964201665, 
       7.188082728976031, 
       4.260820476357003, 1.227580202486819]
@end example

@c REMOVING THIS EXAMPLE. IT IS NOT SPECIFIC FOR THE FACTORIAL FUNCTION:
@c The factorial of an unbound symbol is not simplified.

@c @c ===beg===
@c @c kill (foo);
@c @c foo!;
@c @c ===end===
@c @example
@c (%i1) kill (foo);
@c (%o1)                         done
@c (%i2) foo!;
@c (%o2)                         foo!
@c @end example

@c Factorials are simplified, not evaluated. Thus @code{x!} may be replaced 
@c even in a quoted expression.

Fakult@"aten werden vereinfacht und nicht ausgewertet. Daher kann @code{x!} auch
in Ausdr@"ucken ersetzt werden, deren Auswertung mit dem Quote-Operator 
verhindert wurde.

@c ===beg===
@c '([0!, (7/2)!, 4.77!, 8!, 20!]);
@c ===end===
@example
(%i1) '([0!, (7/2)!, 4.77!, 8!, 20!]);
          105 sqrt(%pi)
(%o1) [1, -------------, 81.44668037931199, 40320, 
               16
                                             2432902008176640000]
@end example

@c Maxima knows the derivative of the factorial function.

Maxima kennt die Ableitung der Fakult@"at.

@c ===beg===
@c diff(x!,x);
@c ===end===
@example
(%i1) diff(x!,x);
(%o1)                           x! psi (x + 1)
                                      0
@end example

@c The option variable @code{factorial_expand} controls expansion and 
@c simplification of expressions with the factorial function.

Die Optionsvariable @code{factorial_expand} steuert die Expansion und
Vereinfachung von Ausdr@"ucken, die die Fakult@"at enthalten.

@c ===beg===
@c (n+1)!/n!,factorial_expand:true;
@c ===end===
@example
(%i1) (n+1)!/n!,factorial_expand:true;
(%o1)                                n + 1
@end example

@c @opencatbox
@c @category{Gamma Funktionen und Fakult@"at} @category{Operatoren}
@c @closecatbox
@end deffn

@c --- 17.10.2010 DK -----------------------------------------------------------
@anchor{factlim}
@defvr {Optionsvariable} factlim
Standardwert: 100000

@c @code{factlim} specifies the highest factorial which is automatically 
@c expanded. If it is -1 then all integers are expanded.

Die Optionsvariable @code{factlim} spezifiziert die gr@"o@ss{}te ganze Zahl, 
f@"ur die die Fakult@"at einer ganzen Zahl berechnet wird. Wenn @code{factlim} 
den Wert -1 hat, wird die Fakult@"at f@"ur jede ganze Zahl berechnet.

@c TODO: IN ABHÄNIGKEIT VON DER LISP IMPLEMENTATION GIBT ES GRENZEN FÜR DIE
@c       GRÖẞTE ZAHL. 

@c @opencatbox
@c @category{Gamma Funktion und Fakult@"at}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{factorial_expand}
@defvr {Optionsvariable} factorial_expand
Standardwert: @code{false}

@c The option variable @code{factorial_expand} controls the simplification of 
@c expressions like @code{(n+1)!}, where @code{n} is an integer. See @code{!} 
@c for an example.

Die Optionsvariable @code{factorial_expand} kontrolliert die Vereinfachung von
Ausdr@"ucken wie @code{(n+1)!}, wobei @code{n} eine ganze Zahl ist. Siehe
@code{factorial} f@"ur ein Beispiel.

@c @opencatbox
@c @category{Gamma and factorial functions}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Function} fib (@var{n})
Returns the @var{n}'th Fibonacci number.
@code{fib(0)} equal to 0 and @code{fib(1)} equal to 1,
and
@code{fib (-@var{n})} equal to @code{(-1)^(@var{n} + 1) * fib(@var{n})}.

After calling @code{fib},
@code{prevfib} is equal to @code{fib (@var{x} - 1)},
the Fibonacci number preceding the last one computed.

@example
(%i1) map (fib, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
(%o1)         [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} fibtophi (@var{expr})
Expresses Fibonacci numbers in @var{expr} in terms of the constant @code{%phi},
which is @code{(1 + sqrt(5))/2}, approximately 1.61803399.

Examples:

@c ===beg===
@c fibtophi (fib (n));
@c fib (n-1) + fib (n) - fib (n+1);
@c fibtophi (%);
@c ratsimp (%);
@c ===end===
@example
(%i1) fibtophi (fib (n));
                           n             n
                       %phi  - (1 - %phi)
(%o1)                  -------------------
                           2 %phi - 1
(%i2) fib (n-1) + fib (n) - fib (n+1);
(%o2)          - fib(n + 1) + fib(n) + fib(n - 1)
(%i3) fibtophi (%);
            n + 1             n + 1       n             n
        %phi      - (1 - %phi)        %phi  - (1 - %phi)
(%o3) - --------------------------- + -------------------
                2 %phi - 1                2 %phi - 1
                                          n - 1             n - 1
                                      %phi      - (1 - %phi)
                                    + ---------------------------
                                              2 %phi - 1
(%i4) ratsimp (%);
(%o4)                           0
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{genfact}
@deffn {Funktion} genfact (@var{x}, @var{y}, @var{z})

@c Returns the generalized factorial, defined as
@c @code{x (x-z) (x - 2 z) ... (x - (y - 1) z)}.  Thus, for integral @var{x},
@c @code{genfact (x, x, 1) = x!} and @code{genfact (x, x/2, 2) = x!!}.

Gibt die verallgemeinerte Fakult@"at zur@"uck, die als @code{x (x-z) (x - 2 z) 
... (x - (y - 1) z)} definiert ist. Damit gilt f@"ur ein ganzzahliges Argument 
@var{x}, @code{genfact (x, x, 1) = x!} und @code{genfact (x, x/2, 2) = x!!}.

@c @opencatbox
@c @category{Gamma Funktion und Fakult@"at}
@c @closecatbox
@end deffn

@c --- 12.11.2010 DK -----------------------------------------------------------
@anchor{minfactorial}
@deffn {Funktion} minfactorial (@var{expr})

@c Examines @var{expr} for occurrences of two factorials which differ by an 
@c integer. @code{minfactorial} then turns one into a polynomial times the 
@c other.

Treten mehrere Fakult@"aten in einem Ausdruck @var{expr} auf, die sich nur um
ganze Zahlen voneinander unterscheiden, werden diese vereinfacht.

@c I CAN'T TELL WHAT THIS IS SUPPOSED TO MEAN. !!!
@c minfactorial DOESN'T SEEM TO DO ANYTHING binomial DOESN'T DO BY ITSELF !!!
@c LOOKING AT THE minfactorial CODE DOESN'T HELP !!!
@c If exp involves binomial coefficients then they will be
@c converted into ratios of factorials.

@example
(%i1) n!/(n+2)!;
                               n!
(%o1)                       --------
                            (n + 2)!
(%i2) minfactorial (%);
                                1
(%o2)                    ---------------
                         (n + 1) (n + 2)
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c --- 12.11.2010 DK -----------------------------------------------------------
@anchor{sumsplitfact}
@defvr {Optionsvariable} sumsplitfact
Standardwert: @code{true}

@c When @code{sumsplitfact} is @code{false},
@c "IS APPLIED" -- UNDER WHAT CIRCUMSTANCES EXACTLY ??
@c @code{minfactorial} is applied after a @code{factcomb}.

Hat die Optionsvariable @code{sumsplitfact} den Wert @code{false}, wird die
Vereinfachung mit der Funktion @code{minfactorial} nach der Funktion
@code{factcomb} angewendet.

@c TODO: EIN BEISPIEL

@c @opencatbox
@c @category{Gamma and factorial functions} @category{Simplification flags and variables}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@deffn {Function} next_prime (@var{n})
Returns the smallest prime bigger than @var{n}.

@example
(%i1) next_prime(27);
(%o1)                       29
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} power_mod (@var{a}, @var{n}, @var{m})
Uses a modular algorithm to compute @code{a^n mod m} 
where @var{a} and @var{n} are integers and @var{m} is a positive integer. 
If @var{n} is negative, @code{inv_mod} is used to find the modular inverse.

@example
(%i1) power_mod(3, 15, 5);
(%o1)                          2
(%i2) mod(3^15,5);
(%o2)                          2
(%i3) power_mod(2, -1, 5);
(%o3)                          3
(%i4) inv_mod(2,5);
(%o4)                          3
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} primep (@var{n})
Primality test. If @code{primep (@var{n})} returns @code{false}, @var{n} is a
composite number and if it returns @code{true}, @var{n} is a prime number
with very high probability.

For @var{n} less than 10^16 a deterministic version of Miller-Rabin's
test is used. If @code{primep (@var{n})} returns @code{true}, then @var{n} is a
prime number.

For @var{n} bigger than 10^16 @code{primep} uses
@code{primep_number_of_tests} Miller-Rabin's pseudo-primality tests
and one Lucas pseudo-primality test. The probability that @var{n} will
pass one Miller-Rabin test is less than 1/4. Using the default value 25 for
@code{primep_number_of_tests}, the probability of @var{n} beeing
composite is much smaller that 10^-15.

@c @opencatbox
@c @category{Predicate functions} @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@defvr {Option variable} primep_number_of_tests
Default value: 25

Number of Miller-Rabin's tests used in @code{primep}.

@c @opencatbox
@c @category{Predicate functions} @category{Number theory}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@deffn {Function} prev_prime (@var{n})
Returns the greatest prime smaller than @var{n}.

@example
(%i1) prev_prime(27);
(%o1)                       23
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} qunit (@var{n})
Returns the principal unit of the real quadratic number field
@code{sqrt (@var{n})} where @var{n} is an integer,
i.e., the element whose norm is unity.
This amounts to solving Pell's equation @code{a^2 - @var{n} b^2 = 1}.

@example
(%i1) qunit (17);
(%o1)                     sqrt(17) + 4
(%i2) expand (% * (sqrt(17) - 4));
(%o2)                           1
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} totient (@var{n})
Returns the number of integers less than or equal to @var{n} which
are relatively prime to @var{n}.

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@defvr {Option variable} zerobern
Default value: @code{true}

When @code{zerobern} is @code{false}, @code{bern} excludes the Bernoulli numbers
and @code{euler} excludes the Euler numbers which are equal to zero. 
See @code{bern} and @code{euler}.

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@deffn {Function} zeta (@var{n})
Returns the Riemann zeta function. If @var{n} is a negative integer, 0, or a 
positive even integer, the Riemann zeta function simplifies to an exact value.
For a positive even integer the option variable @code{zeta%pi} has to be
@code{true} in addition (See @code{zeta%pi}). For a floating point or bigfloat 
number the Riemann zeta function is evaluated numerically. Maxima returns a noun
form @code{zeta (@var{n})} for all other arguments, including rational 
noninteger, and complex arguments, or for even integers, if @code{zeta%pi} has 
the value @code{false}.

@code{zeta(1)} is undefined, but Maxima knows the limit 
@code{limit(zeta(x), x, 1)} from above and below.

The Riemann zeta function distributes over lists, matrices, and equations.

See also @code{bfzeta} and @code{zeta%pi}.

Examples:

@c ===beg===
@c zeta([-2,-1,0,0.5,2,3,1+%i]);
@c limit(zeta(x),x,1,plus);
@c limit(zeta(x),x,1,minus);
@c ===end===
@example
(%i1) zeta([-2,-1,0,0.5,2,3,1+%i]);
                                              2
             1     1                       %pi
(%o1)  [0, - --, - -, - 1.460354508809587, ----, zeta(3), zeta(%i + 1)]
             12    2                        6 

(%i2) limit(zeta(x),x,1,plus);
(%o2)                                 inf
(%i3) limit(zeta(x),x,1,minus);
(%o3)                                minf
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@defvr {Option variable} zeta%pi
Default value: @code{true}

When @code{zeta%pi} is @code{true}, @code{zeta} returns an expression 
proportional to @code{%pi^n} for even integer @code{n}. Otherwise, @code{zeta} 
returns a noun form @code{zeta (n)} for even integer @code{n}.

Examples:

@c ===beg===
@c zeta%pi: true$
@c zeta (4);
@c zeta%pi: false$
@c zeta (4);
@c ===end===
@example
(%i1) zeta%pi: true$
(%i2) zeta (4);
                                 4
                              %pi
(%o2)                         ----
                               90
(%i3) zeta%pi: false$
(%i4) zeta (4);
(%o4)                        zeta(4)
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@deffn {Function} divsum (@var{n}, @var{k})
@deffnx {Function} divsum (@var{n})

@code{divsum (@var{n}, @var{k})} returns the sum of the divisors of @var{n}
raised to the @var{k}'th power.

@code{divsum (@var{n})} returns the sum of the divisors of @var{n}.

@example
(%i1) divsum (12);
(%o1)                          28
(%i2) 1 + 2 + 3 + 4 + 6 + 12;
(%o2)                          28
(%i3) divsum (12, 2);
(%o3)                          210
(%i4) 1^2 + 2^2 + 3^2 + 4^2 + 6^2 + 12^2;
(%o4)                          210
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} ifactors (@var{n})

For a positive integer @var{n} returns the factorization of @var{n}. If
@code{n=p1^e1..pk^nk} is the decomposition of @var{n} into prime
factors, ifactors returns @code{[[p1, e1], ... , [pk, ek]]}.

Factorization methods used are trial divisions by primes up to 9973,
Pollard's rho method and elliptic curve method.

@example
(%i1) ifactors(51575319651600);
(%o1)     [[2, 4], [3, 2], [5, 2], [1583, 1], [9050207, 1]]
(%i2) apply("*", map(lambda([u], u[1]^u[2]), %));
(%o2)                        51575319651600
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} inrt (@var{x}, @var{n})

Returns the integer @var{n}'th root of the absolute value of @var{x}.

@example
(%i1) l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$
(%i2) map (lambda ([a], inrt (10^a, 3)), l);
(%o2) [2, 4, 10, 21, 46, 100, 215, 464, 1000, 2154, 4641, 10000]
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} inv_mod (@var{n}, @var{m})

Computes the inverse of @var{n} modulo @var{m}. 
@code{inv_mod (n,m)} returns @code{false}, 
if @var{n} is a zero divisor modulo @var{m}.

@example
(%i1) inv_mod(3, 41);
(%o1)                           14
(%i2) ratsimp(3^-1), modulus=41;
(%o2)                           14
(%i3) inv_mod(3, 42);
(%o3)                          false
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} jacobi (@var{p}, @var{q})

Returns the Jacobi symbol of @var{p} and @var{q}.

@example
(%i1) l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$
(%i2) map (lambda ([a], jacobi (a, 9)), l);
(%o2)         [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0]
@end example

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} lcm (@var{expr_1}, ..., @var{expr_n})
Returns the least common multiple of its arguments.
The arguments may be general expressions as well as integers.

@code{load ("functs")} loads this function.

@c @opencatbox
@c @category{Number theory}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Algebraische Funktionen, Exponential- und Logarithmusfunktion, Funktionen der Kombinatorik
@section Algebraische Funktionen
@c -----------------------------------------------------------------------------

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{isqrt}
@deffn {Funktion} isqrt (@var{x})

@c Returns the "integer square root" of the absolute value of @var{x}, which is 
@c an integer.

Gibt die ganzzahlige Wurzel des Betrages von @var{x} zur@"uck, wenn @var{x} eine
ganze Zahl ist. Andernfalls wird eine Substantivform zur@"uckgegeben.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{sqrt}
@deffn {Funktion} sqrt (@var{x})

@c The square root of @var{x}. It is represented internally by 
@c @code{@var{x}^(1/2)}.  See also @code{rootscontract}.

Ist die Wurzelfunktion. Intern stellt Maxima die Wurzelfunktion als
@code{sqrt@var{x}^(1/2)} dar. Siehe auch die Funktion @code{rootscontract}.

@c @code{radexpand} if @code{true} will cause nth roots of factors of a product
@c which are powers of n to be pulled outside of the radical, e.g.
@c @code{sqrt(16*x^2)} will become @code{4*x} only if @code{radexpand} is 
@c @code{true}.

Hat die Optionsvariable @code{radexpand} den Wert @code{true}, werden die
n-ten Wurzeln von Faktoren unter einer Wurzel aus der Wurzel herausgezogen.
So wird zum Beispiel @code{sqrt(16*x^2)} nur dann zu @code{4*x} vereinfacht,
wenn @code{radexpand} den Wert @code{true} hat.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Exponential- und Logarithmusfunktion, Winkelfunktionen, Algebraische Funktionen
@section Exponential- und Logarithmusfunktion
@c -----------------------------------------------------------------------------

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{exp}
@deffn {Funktion} exp (@var{x})

@c Represents the exponential function. Instances of @code{exp (@var{x})} in 
@c input are simplified to @code{%e^@var{x}}; @code{exp} does not appear in
@c simplified expressions.

Ist die Exponentialfunktion. Die Exponentialfunkton @var{exp} wird sofort zu
@code{%e^@var{x}} vereinfacht und tritt in vereinfachten Ausdr@"ucken nicht auf.

@c @code{demoivre} if @code{true} causes @code{%e^(a + b %i)} to simplify to
@c @code{%e^(a (cos(b) + %i sin(b)))} if @code{b} is free of @code{%i}. See 
@c @code{demoivre}.

Hat die Optionsvariable @code{demoivre} den Wert @code{true}, werden Ausdr@"ucke
der Form @code{%e^(a + b %i)} zu @code{%e^(a (cos(b) + %i sin(b)))} vereinfacht,
wobei @var{a} und @var{b} reelle Ausdr@"ucke sind.

@c @code{%emode}, when @code{true}, causes @code{%e^(%pi %i x)} to be 
@c simplified. See @code{%emode}.

Hat die Optionsvariable @code{%emode} den Wert @code{true}, dann werden
Ausdr@"ucke der Form  @code{%e^(%pi %i x)} vereinfacht. Siehe @code{%emode}.

@c @code{%enumer}, when @code{true} causes @code{%e} to be replaced by
@c 2.718...  whenever @code{numer} is @code{true}. See @code{%enumer}.

Hat die Optionsvariable @code{%enumer} den Wert @code{true}, wird die Konstante
@code{%e} durch ihren nummerischen Wert 2.718... ersetzt, sobald auch die
Optionsvariable @code{numer} den Wert @code{true} hat. Siehe @code{%enumer}.

@c @opencatbox
@c @category{Exponential und Logarithmus Funktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{%emode}
@defvr {Optionsvariable} %emode
Standardwert: @code{true}

@c When @code{%emode} is @code{true}, @code{%e^(%pi %i x)} is simplified as 
@c follows.

Hat die Optionsvariable @code{%emode} den Wert @code{true}, wird 
@code{%e^(%pi %i x)} wie folgt vereinfacht:

@c @code{%e^(%pi %i x)} simplifies to @code{cos (%pi x) + %i sin (%pi x)} if 
@c @code{x} is a floating point number, an integer, or a multiple of 1/2, 1/3, 
@c 1/4, or 1/6, and then further simplified.

@code{%e^(%pi %i x)} wird zu @code{cos (%pi x) + %i sin (%pi x)} vereinfacht, 
wenn @code{x} eine Gleitkommazahl, eine ganze Zahl oder ein vielfaches von
1/2, 1/3, 1/4 oder 1/6 ist. 

@c For other numerical @code{x}, @code{%e^(%pi %i x)} simplifies to 
@c @code{%e^(%pi %i y)} where @code{y} is @code{x - 2 k} for some integer 
@c @code{k} such that @code{abs(y) < 1}.  

F@"ur andere nummerische Werte @code{x} wird @code{%e^(%pi %i x)} zu 
@code{%e^(%pi %i y)} vereinfacht, wobei @code{y} eine ganze Zahl @code{x - 2 k} 
mit einem @code{k} ist, so dass @code{abs(y) < 1} gilt.

@c When @code{%emode} is @code{false}, no special simplification of 
@c @code{%e^(%pi %i x)} is carried out.

Hat @code{%emode} den Wert @code{false}, werden keine speziellen Vereinfachungen
f@"ur den Ausdruck @code{%e^(%pi %i x)} vorgenommen.

@c NEED EXAMPLES HERE
@c @opencatbox
@c @category{Exponential und Logarithmus Funktionen} @category{Vereinfachungsflags und Variable}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{%enumer}
@defvr {Optionsvariable} %enumer
Standardwert: @code{false}

@c When @code{%enumer} is @code{true}, @code{%e} is replaced by its numeric 
@c value 2.718...  whenever @code{numer} is @code{true}. 

Hat @code{%enumer} den Wert @code{true}, wird die Konstante @code{%e} immer dann
durch ihren nummerischen Wert ersetzt, wenn die Optionsvariable @code{numer} den
Wert @code{true} hat.

@c When @code{%enumer} is @code{false}, this substitution is carried out only 
@c if the exponent in @code{%e^x} evaluates to a number.

Hat @code{%enumer} den Wert @code{false}, wird die Konstante @code{%e} nur dann
durch ihren nummerischen Wert ersetzt, wenn der Exponent von @code{%e^x} zu 
einer Gleitkommazahl ausgewertet wird.

@c See also @code{ev} and @code{numer}.

Siehe auch @code{ev} und @code{numer}.

   @c NEED EXAMPLES HERE
@c @opencatbox
@c @category{Exponential und Logarithmus Funktionen} @category{Auswertungsflags}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{%e_to_numlog}
@defvr {Optionsvariable} %e_to_numlog
Standardwert: @code{false}

@c When @code{true}, @code{r} some rational number, and @code{x} some 
@c expression, @code{%e^(r*log(x))} will be simplified into @code{x^r} . It 
@c should be noted that the @code{radcan} command also does this transformation,
@c and more complicated transformations of this ilk as well. The 
@c @code{logcontract} command "contracts" expressions containing @code{log}.

Hat die Optionsvariable @code{%e_to_numlog} den Wert @code{true}, wird ein 
Ausdruck @code{%e^(r*log(x))} zu @code{x^r} vereinfacht. Dabei sind @code{r}  
eine rationale Zahl und @code{x} ein beliebiger Ausdruck. Die Funktion 
@code{radcan} f@"uhrt diese Vereinfachung ebenfalls aus.

@c @opencatbox
@c @category{Logarithmusfunktionen} @category{Optionsvariable}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{log}
@deffn {Funktion} log (@var{x})

@c Represents the natural (base @math{e}) logarithm of @var{x}.

Ist der nat@"urliche Logaritmus zur Basis @math{e}.

@c Maxima does not have a built-in function for the base 10 logarithm or other 
@c bases. @code{log10(x) := log(x) / log(10)} is a useful definition.

Maxima hat keine vordefinierte Logarithmusfunktion zur Basis 10 oder anderen 
Basen. Eine einfache Definition ist zum Beispiel 
@code{log10(x) := log(x)/log(10)}.

@c Simplification and evaluation of logarithms is governed by several global 
@c flags:

F@"ur die Vereinfachung und Auswertung der Logarithmusfunktion hat Maxima
verschiedene Optionsvariablen:

@c @code{logexpand} - causes @code{log(a^b)} to become @code{b*log(a)}. If it 
@c is set to @code{all}, @code{log(a*b)} will also simplify to 
@c @code{log(a)+log(b)}. If it is set to @code{super}, then @code{log(a/b)} will
@c also simplify to @code{log(a)-log(b)} for rational numbers @code{a/b}, 
@c @code{a#1}.  (@code{log(1/b)}, for @code{b} integer, always simplifies.)  If
@c it is set to @code{false}, all of these simplifications will be turned off.

@itemize
@item @code{logexpand}

@code{log(a^b)} wird zu @code{b*log(a)} vereinfacht. Hat @code{logexpand} den 
Wert @code{all}, wird zus@"atzlich @code{log(a*b)} zu @code{log(a)+log(b)} 
vereinfacht. Mit den Wert @code{super} vereinfacht Maxima weiterhin 
@code{log(a/b)} zu @code{log(a)-log(b)}, wobei @code{a/b} eine rationale Zahl 
ist. @code{log(1/b} wird f@"ur eine ganze Zahl @code{b} immer vereinfacht. Hat
die Optionsvariable @code{logexpand} den Wert @code{false} werden alle obigen
Vereinfachungen ausgeschaltet.

@c @code{logsimp} - if @code{false} then no simplification of @code{%e} to a 
@c power containing @code{log}'s is done.

@item @code{logsimp}

Hat die Optionsvariable @code{logsimp} den Wert @code{false}, werden 
Exponentialfunktionen @code{exp}, die Logarithmusfunktionen im Exponenten
enthalten, nicht vereinfacht.

@c @code{lognumer} - if @code{true} then negative floating point arguments to
@c @code{log} will always be converted to their absolute value before the 
@c @code{log} is taken.  If @code{numer} is also @code{true}, then negative 
@c integer arguments to @code{log} will also be converted to their absolute 
@c value.

@item @code{lognumer}

Hat die Optionsvariable @code{lognumer} den Wert @code{true}, wird von
negativen Gleitkommazahlen der Absolutwert genommen, bevor der Logarithmus
berechnet wird.

@c @code{lognegint} - if @code{true} implements the rule @code{log(-n)} ->
@c @code{log(n)+%i*%pi} for @code{n} a positive integer.

@item @code{lognegint}

Hat die Optionsvariable @code{lognegint} den Wert @code{true}, wird
@code{log(-n)} zu @code{log(n)+%i*%pi} f@"ur postive @code{n} vereinfacht.

@c @code{%e_to_numlog} - when @code{true}, @code{r} some rational number, and
@c @code{x} some expression, @code{%e^(r*log(x))} will be simplified into
@c @code{x^r} .  It should be noted that the @code{radcan} command also
@c does this transformation, and more complicated transformations of this ilk as 
@c well. The @code{logcontract} command "contracts" expressions containing 
@c @code{log}.

@item @code{%e_to_numlog}

Hat die Optionsvariable @code{%e_to_numlog} den Wert @code{true}, wird ein 
Ausdruck @code{%e^(r*log(x))} zu @code{x^r} vereinfacht. Dabei sind @code{r}  
eine rationale Zahl und @code{x} ein beliebiger Ausdruck. Die Funktion 
@code{radcan} f@"uhrt diese Vereinfachung ebenfalls aus.
@end itemize

@c @opencatbox
@c @category{Logarithmusfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{logabs}
@defvr {Optionsvariable} logabs
Standardwert: @code{false}

@c When doing indefinite integration where logs are generated, e.g. 
@c @code{integrate(1/x,x)}, the answer is given in terms of @code{log(abs(...))}
@c if @code{logabs} is @code{true}, but in terms of @code{log(...)} if 
@c @code{logabs} is @code{false}.  For definite integration, the 
@c @code{logabs:true} setting is used, because here "evaluation" of the 
@c indefinite integral at the endpoints is often needed.

Werden unbestimmte Integrale mit Logarithmusfunktionen erzeugt, zum Beispiel
@code{integrate(1/x,x)}, wird der Betrag der Argumente der 
Logarithmusfunktionen gebildet @code{log(abs(...))}, wenn die Optionsvariable
@code{logabs} den Wert @code{true} hat. Ist der Wert @code{false} werden keine
Betr@"age gebildet @code{log(...)}. 

Bei der Berechnung von bestimmten Integralen setzt Maxima die Optionsvariable
@code{logabs} zu den Wert @code{false}.  

@c @opencatbox
@c @category{Logarithmusfunkionen} @category{Integration} @category{Optionsvariablen}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{logarc}
@deffn  {Funktion} logarc (@var{expr})
@deffnx {Optionsvariable} logarc

@c When the global variable @code{logarc} is @code{true}, inverse circular and 
@c hyperbolic functions are replaced by equivalent logarithmic functions.
@c The default value of @code{logarc} is @code{false}.

Hat die Optionsvariable @code{logarc} den Wert @code{true}, werden inverse
Winkel- und Hyperbelfunktionen durch Logarithmusfunktionen ersetzt. Der 
Standwert von @code{logarc} ist @code{false}.

@c The function @code{logarc(@var{expr})} carries out that replacement for an 
@c expression @var{expr} without setting the global variable @code{logarc}.

Die Funktion @code{logarc(@var{expr})} f@"uhrt diese Ersetzung aus, ohne dass 
die Optionsvariable @code{logarc} gesetzt wird.

@c @opencatbox
@c @category{Logarithmusfunktionen} @category{Optionsvariablen} @category{Vereinfachungsfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{logconcoeffp}
@defvr {Optionsvariable} logconcoeffp
Standardwert: @code{false}

@c Controls which coefficients are contracted when using @code{logcontract}.  
@c It may be set to the name of a predicate function of one argument.  E.g. if 
@c you like to generate SQRTs, you can do @code{logconcoeffp:'logconfun$
@c logconfun(m):=featurep(m,integer) or ratnump(m)$} .  Then
@c @code{logcontract(1/2*log(x));} will give @code{log(sqrt(x))}.

Die Optionsvariable @code{logconcoeffp} kontrolliert, welche Koeffizienten von
der Funktion @code{logcontract} zusammengezogen werden. Der Optionsvariable kann
der Name einer Aussagefunktion mit einem Argument zugewiesen werden. Sollen 
z. B. Wurzeln generiert werden, kann folgende Definition verwendet:
@code{logconcoeffp:'logconfun$ logconfun(m):=featurep(m,integer) or 
ratnump(m)$}. Dann ergibt sich f@"ur @code{logcontract(1/2*log(x));} das 
folgende Ergebnis @code{log(sqrt(x))}.

@c @opencatbox
@c @category{Logarithmusfunktionen} @category{Optionsvariablen}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{logcontract}
@deffn {Funktion} logcontract (@var{expr})

@c Recursively scans the expression @var{expr}, transforming subexpressions of 
@c the form @code{a1*log(b1) + a2*log(b2) + c} into 
@c @code{log(ratsimp(b1^a1 * b2^a2)) + c}

Der Ausdruck @var{expr} wird rekursiv nach Ausdr@"ucken der Form 
@code{a1*log(b1) + a2*log(b2) + c} abgesucht. Diese werden zu 
@code{log(ratsimp(b1^a1 * b2^a2)) + c} transformiert.

@c ===beg===
@c 2*(a*log(x) + 2*a*log(y))$
@c logcontract(%);
@c ===end===
@example
(%i1) 2*(a*log(x) + 2*a*log(y))$
(%i2) logcontract(%);
                                 2  4
(%o2)                     a log(x  y )
@end example

@c If you do @code{declare(n,integer);} then @code{logcontract(2*a*n*log(x));} 
@c gives @code{a*log(x^(2*n))}.  The coefficients that "contract" in this manner 
@c are those such as the 2 and the @code{n} here which satisfy
@c @code{featurep(coeff,integer)}.  The user can control which coefficients are
@c contracted by setting the option @code{logconcoeffp} to the name of a 
@c predicate function of one argument.  E.g. if you like to generate SQRTs, you 
@c can do @code{logconcoeffp:'logconfun$ logconfun(m):=featurep(m,integer) or 
@c ratnump(m)$} . Then @code{logcontract(1/2*log(x));} will give 
@c @code{log(sqrt(x))}.

Wird die Variable @var{n} als eine ganze Zahl deklariert, 
@code{declare(n,integer);}, dann wird  @code{logcontract(2*a*n*log(x));} zu
@code{a*log(x^(2*n))} vereinfacht. Die Koeffizienten, die zusammengezogen 
werden, sind in diesem Fall die Zahl 2 und die Variable @var{n}, welche
die folgende Aussage erf@"ullen @code{featurep(coeff,integer)}. Der Nutzer kann
kontrollieren, welche Koeffizienten zusammengezogen werden. Dazu wird der
Optionsvariablen @code{logconcoeffp} eine Aussagefunktion mit einem Argument 
zugewiesen. Sollen z. B. Wurzeln generiert werden, kann folgende Definition 
verwendet: @code{logconcoeffp:'logconfun$ logconfun(m):=featurep(m,integer) or 
ratnump(m)$}. Dann ergibt sich f@"ur @code{logcontract(1/2*log(x));} das 
folgende Ergebnis @code{log(sqrt(x))}.

@c @opencatbox
@c @category{Logarithmusfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{logexpand}
@defvr {Optionsvariable} logexpand
Standardwert: @code{true}

@c Causes @code{log(a^b)} to become @code{b*log(a)}. If it is set to @code{all},
@c @code{log(a*b)} will also simplify to @code{log(a)+log(b)}.  If it is set to 
@c @code{super}, then @code{log(a/b)} will also simplify to @code{log(a)-log(b)}
@c for rational numbers @code{a/b}, @code{a#1}.  (@code{log(1/b)}, for integer 
@c @code{b}, always simplifies.)  If it is set to @code{false}, all of these 
@c simplifications will be turned off.

@code{log(a^b)} wird zu @code{b*log(a)} vereinfacht. Hat @code{logexpand} den 
Wert @code{all}, wird zus@"atzlich @code{log(a*b)} zu @code{log(a)+log(b)} 
vereinfacht. Mit den Wert @code{super} vereinfacht Maxima weiterhin 
@code{log(a/b)} zu @code{log(a)-log(b)}, wobei @code{a/b} eine rationale Zahl 
ist. @code{log(1/b} wird f@"ur eine ganze Zahl @code{b} immer vereinfacht. Hat
die Optionsvariable @code{logexpand} den Wert @code{false} werden alle obigen
Vereinfachungen ausgeschaltet.

@c @opencatbox
@c @category{Logarithmusfunktionen} @category{Optionsvariable}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{lognegint}
@defvr {Optionsvariable} lognegint
Standardwert: @code{false}

@c If @code{true} implements the rule @code{log(-n)} -> @code{log(n)+%i*%pi} for
@c @code{n} a positive integer.

Hat die Optionsvariable @code{lognegint} den Wert @code{true}, wird
@code{log(-n)} zu @code{log(n)+%i*%pi} f@"ur postive @code{n} vereinfacht.

@c @opencatbox
@c @category{Logarithmusfunktionen} @category{Optionsvariable}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{lognummer}
@defvr {Optionsvariable} lognumer
Standardwert: @code{false}

@c If @code{true} then negative floating point arguments to @code{log} will 
@c always be converted to their absolute value before the @code{log} is taken.  
@c If @code{numer} is also @code{true}, then negative integer arguments to 
@c @code{log} will also be converted to their absolute value.

Hat die Optionsvariable @code{lognumer} den Wert @code{true}, wird von
negativen Gleitkommazahlen der Absolutwert genommen, bevor der Logarithmus
berechnet wird.

@c @opencatbox
@c @category{Logarithmusfunktionen} @category{Optionsvariable} @category{Numerische Auswertung}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{logsimp}
@defvr {Optionsvariable} logsimp
Standardwert: @code{true}

@c If @code{false} then no simplification of @code{%e} to a power containing 
@c @code{log}'s is done.

Hat die Optionsvariable @code{logsimp} den Wert @code{false}, werden 
Exponentialfunktionen @code{exp}, die Logarithmusfunktionen im Exponenten
enthalten, nicht vereinfacht.

@c @opencatbox
@c @category{Logarithmusfunktionen} @category{Optionsvariable}
@c @closecatbox
@end defvr

@c --- 20.10.2010 DK -----------------------------------------------------------
@anchor{plog}
@deffn {Funktion} plog (@var{x})

@c Represents the principal branch of the complex-valued natural logarithm with 
@c @code{-%pi} < @code{carg(@var{x})} <= @code{+%pi} .

Gibt den Hauptwert des komplexen nat@"urlichen Logarithmus im Intervall
@code{-%pi} < @code{carg(@var{x})} <= @code{+%pi} zur@"uck.

@c @opencatbox
@c @category{Logarithmusfunktionen} @category{Komplexe Zahlen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Winkelfunktionen, Einf@"uhrung in Winkelfunktionen, Exponential- und Logarithmusfunktion
@section Winkelfunktionen
@c -----------------------------------------------------------------------------

@menu
* Einf@"uhrung in Winkelfunktionen::
* Funktionen und Variablen f@"ur Winkelfunktionen::
@end menu

@c -----------------------------------------------------------------------------
@node Einf@"uhrung in Winkelfunktionen, Funktionen und Variablen f@"ur Winkelfunktionen, Winkelfunktionen
@subsection Einf@"uhrung in Winkelfunktionen
@c -----------------------------------------------------------------------------

@c Maxima has many trigonometric functions defined.  Not all trigonometric
@c identities are programmed, but it is possible for the user to add many of 
@c them using the pattern matching capabilities of the system. The trigonometric
@c functions defined in Maxima are: 
@c @code{acos}, @code{acosh}, @code{acot}, @code{acoth}, @code{acsc},
@c @code{acsch}, @code{asec}, @code{asech}, @code{asin},
@c @code{asinh}, @code{atan}, @code{atanh}, @code{cos},
@c @code{cosh}, @code{cot}, @code{coth}, @code{csc}, @code{csch},
@c @code{sec}, @code{sech}, @code{sin}, @code{sinh}, @code{tan},
@c and @code{tanh}.  
@c There are a number of commands especially for handling trigonometric 
@c functions, see @code{trigexpand}, @code{trigreduce}, and the switch 
@c @code{trigsign}.  Two share packages extend the simplification rules built 
@c into Maxima, @code{ntrig} and @code{atrig1}. 
@c Do @code{describe(@var{command})} for details.

Maxima kennt viele Winkel- und Hyperbelfunktionen. Nicht alle Identitäten für
Winkel- und Hyperbelfunktionen sind programmiert, aber es ist möglich weitere
Identitäten mit der Fähigkeit der Erkennung von Mustern hinzuzufügen.

Maxima kennt die folgenden Winkel- und Hypelfunktionen sowie deren Inverse:

@multitable @columnfractions .15 .15 .15
@item @code{sin}   @tab @code{cos}       @tab @code{tan}
@item @code{sec}   @tab @code{csc}       @tab @code{cot}
@item @code{asin}  @tab @code{acos}      @tab @code{atan}
@item @code{asec}  @tab @code{acsc}      @tab @code{acot}
@item @code{sinh}  @tab @code{cosh}      @tab @code{tanh}
@item @code{sech}  @tab @code{csch}      @tab @code{coth}
@item @code{asinh} @tab @code{acosh}     @tab @code{atanh}
@item @code{asech} @tab @code{acsch}     @tab @code{acoth}
@end multitable

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox

@c -----------------------------------------------------------------------------
@node Funktionen und Variablen f@"ur Winkelfunktionen, , Einf@"uhrung in Winkelfunktionen
@subsection Funktionen und Variablen f@"ur Winkelfunktionen
@c -----------------------------------------------------------------------------

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} acos (@var{x})
-- Arkuskosinus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} acot (@var{x})
-- Arkuskotangens.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} acsc (@var{x})
-- Arkuskosekans.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} asec (@var{x})
-- Arkussekans.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} asin (@var{x})
-- Arkussinus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} atan (@var{x})
-- Arkustangens.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} atan2 (@var{y}, @var{x})

@c -- yields the value of @code{atan(@var{y}/@var{x})} in the interval 
@c @code{-%pi} to @code{%pi}.

-- Gibt den Wert von @code{atan(@var{y}/@var{x})} im Intervall @code{-%pi}
bis @code{%pi} zurück.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} cos (@var{x})
-- Kosinus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} cot (@var{x})
-- Kotangens.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} csc (@var{x})
-- Kosekans.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} sec (@var{x})
-- Sekans.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} sin (@var{x})
-- Sinus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} tan (@var{x})
-- Tangens.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@defvr {Optionsvariable} %piargs
Standardwert: @code{true}

@c When @code{%piargs} is @code{true}, trigonometric functions are simplified to
@c algebraic constants when the argument is an integer multiple of
@c @iftex
@c @math{\pi}, @math{\pi/2}, @math{\pi/3}, @math{\pi/4}, or @math{\pi/6}.
@c @end iftex
@c @ifnottex
@c @math{%pi}, @math{%pi/2}, @math{%pi/3}, @math{%pi/4}, or @math{%pi/6}.
@c @end ifnottex

Hat @code{%piargs} den Wert @code{true}, werden Winkel- und 
Hyperbelfunktionen sowie deren Inverse wenn möglich zu algebraischen Konstanten
vereinfacht. 

Die Winkelfunktionen werden zum Beispiel für ganzahlige Vielfache der folgenden
Konstanten vereinfacht
@iftex
@math{\pi}, @math{\pi/2}, @math{\pi/3}, @math{\pi/4}, or @math{\pi/6}.
@end iftex
@ifnottex
@math{%pi}, @math{%pi/2}, @math{%pi/3}, @math{%pi/4}, or @math{%pi/6}.
@end ifnottex

@c Maxima knows some identities which can be applied when 

Maxima kennt einige Identitäten, wenn
@iftex 
@math{\pi} 
@end iftex 
@ifnottex 
@math{%pi} 
@end ifnottex

@c are multiplied by an integer variable (that is, a symbol declared to be 
@c integer).

u.s.w. mit einer ganzzahligen Variable (ein Symbol, welches als ganze Zahl)
deklariert wurde, multipliziert wird.

Beispiele:

@c ===beg===
@c %piargs : false$
@c [sin (%pi), sin (%pi/2), sin (%pi/3)];
@c [sin (%pi/4), sin (%pi/5), sin (%pi/6)];
@c %piargs : true$
@c [sin (%pi), sin (%pi/2), sin (%pi/3)];
@c [sin (%pi/4), sin (%pi/5), sin (%pi/6)];
@c [cos (%pi/3), cos (10*%pi/3), tan (10*%pi/3),
@c        cos (sqrt(2)*%pi/3)];
@c ===end===
@example
(%i1) %piargs : false$
@group
(%i2) [sin (%pi), sin (%pi/2), sin (%pi/3)];
                                %pi       %pi
(%o2)            [sin(%pi), sin(---), sin(---)]
                                 2         3
@end group
@group
(%i3) [sin (%pi/4), sin (%pi/5), sin (%pi/6)];
                      %pi       %pi       %pi
(%o3)            [sin(---), sin(---), sin(---)]
                       4         5         6
@end group
(%i4) %piargs : true$
@group
(%i5) [sin (%pi), sin (%pi/2), sin (%pi/3)];
                                sqrt(3)
(%o5)                    [0, 1, -------]
                                   2
@end group
@group
(%i6) [sin (%pi/4), sin (%pi/5), sin (%pi/6)];
                         1         %pi   1
(%o6)                [-------, sin(---), -]
                      sqrt(2)       5    2
@end group
@group
(%i7) [cos (%pi/3), cos (10*%pi/3), tan (10*%pi/3),
       cos (sqrt(2)*%pi/3)];
                1    1               sqrt(2) %pi
(%o7)          [-, - -, sqrt(3), cos(-----------)]
                2    2                    3
@end group
@end example

@c @iftex
@c Some identities are applied when @math{\pi} and @math{\pi/2} are multiplied 
@c by an integer variable.
@c @end iftex
@c @ifnottex
@c Some identities are applied when @math{%pi} and @math{%pi/2} are multiplied 
@c by an integer variable.
@c @end ifnottex

Einige Identitäten werden angewendet, wenn
@iftex 
@math{\pi} und @math{\pi/2}
@end iftex 
@ifnottex 
@math{%pi} and @math{%pi/2}
@end ifnottex
mit einer ganzzahligen Variable multipliziert werden.

@c ===beg===
@c declare (n, integer, m, even)$
@c [sin (%pi * n), cos (%pi * m), sin (%pi/2 * m),
@c        cos (%pi/2 * m)];
@c ===end===
@example
(%i1) declare (n, integer, m, even)$
@group
(%i2) [sin (%pi * n), cos (%pi * m), sin (%pi/2 * m),
       cos (%pi/2 * m)];
                                      m/2
(%o2)                  [0, 1, 0, (- 1)   ]
@end group
@end example

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Vereinfachungschalter und -variable}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@defvr {Optionsvariable} %iargs
Standardwert: @code{true}

@c When @code{%iargs} is @code{true}, trigonometric functions are simplified to
@c hyperbolic functions
@c @iftex
@c when the argument is apparently a multiple of the imaginary unit @math{i}.
@c @end iftex
@c @ifnottex
@c when the argument is apparently a multiple of the imaginary unit @math{%i}.
@c @end ifnottex

Hat @code{%iargs} den Wert @code{true}, werden Winkelfunktionen zu 
Hyperlfunktionen vereinfacht, wenn das Argument ein Vielfaches der imaginären
Einheit
@iftex
@math{i}
@end iftex
@ifnottex
@math{%i}
@end ifnottex
ist.

@c Even when the argument is demonstrably real, the simplification is applied;
@c @iftex
@c Maxima considers only whether the argument is a literal multiple of @math{i}.
@c @end iftex
@c @ifnottex
@c Maxima considers only whether the argument is a literal multiple of @math{%i}.
@c @end ifnottex

Die Vereinfachung zu Hyperbelfunktionen wird auch dann ausgeführt, wenn das
Argument offensichtlich Reel ist.

Beispiele:

@c ===beg===
@c %iargs : false$
@c [sin (%i * x), cos (%i * x), tan (%i * x)];
@c %iargs : true$
@c [sin (%i * x), cos (%i * x), tan (%i * x)];
@c ===end===
@example
(%i1) %iargs : false$
@group
(%i2) [sin (%i * x), cos (%i * x), tan (%i * x)];
(%o2)           [sin(%i x), cos(%i x), tan(%i x)]
@end group
(%i3) %iargs : true$
@group
(%i4) [sin (%i * x), cos (%i * x), tan (%i * x)];
(%o4)           [%i sinh(x), cosh(x), %i tanh(x)]
@end group
@end example

@c Even when the argument is demonstrably real, the simplification is applied.

Auch wenn das Argument offensichtlich reel ist, wird zu einer Hyperbelfunktion
vereinfacht.

@c ===beg===
@c declare (x, imaginary)$
@c [featurep (x, imaginary), featurep (x, real)];
@c sin (%i * x);
@c ===end===
@example
(%i1) declare (x, imaginary)$
@group
(%i2) [featurep (x, imaginary), featurep (x, real)];
(%o2)                     [true, false]
@end group
@group
(%i3) sin (%i * x);
(%o3)                      %i sinh(x)
@end group
@end example

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Vereinfachungschalter und -variable}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@defvr {Optionsvariable} halfangles
Standardwert: @code{false}

@c When @code{halfangles} is @code{true}, trigonometric functions of arguments 
@c @code{@var{expr}/2} are simplified to functions of @var{expr}.

Hat @code{halfangles} den Wert @code{true}, werden Winkel- und 
Hyperbelfunktionen mit halbzahligen Argumenten @code{@var{expr}/2} vereinfacht.

@c For a real argument @var{x} in the interval @code{0 < x < 2*%pi} the sine of 
@c the half-angle simplifies to a simple formula:

Für ein reelles Argument @var{x} im Intervall @code{0 < x < 2*%pi} vereinfacht
der Sinus für ein halbzahliges Argument zu eine einfache Formel: 

@example
                         sqrt(1 - cos(x))
                         ----------------
                             sqrt(2)
@end example

@c A complicated factor is needed to make this formula correct for all complex 
@c arguments @var{z}:

Ein komplizierter Faktor wird gebraucht, damit die Formel korrekt ist für ein
komplexes Argument @var{z}:

@example
           realpart(z)
     floor(-----------)
              2 %pi
(- 1)                   (1 - unit_step(- imagpart(z))

                            realpart(z)            realpart(z)
                      floor(-----------) - ceiling(-----------)
                               2 %pi                  2 %pi
                ((- 1)                                          + 1))
@end example

@c Maxima knows this factor and similar factors for the functions @code{sin}, 
@c @code{cos}, @code{sinh}, and @code{cosh}. For special values of the argument 
@c @math{z} these factors simplify accordingly.

Maxima kennt diesen Faktor und ähnliche Faktoren für die Sinus, Cosinus, Sinus
Hyperbolicus und Cosinus Hyperbolicus Funktionen. Für spezielle Argumente 
@math{z} dieser Funktionen vereinfachen diese Funktionen entsprechend.

Beispiele:

@c ===beg===
@c halfangles : false$
@c sin (x / 2);
@c halfangles : true$
@c sin (x / 2);
@c assume(x>0, x<2*%pi)$
@c sin(x / 2);
@c ===end===
@example
(%i1) halfangles:false;
(%o1)                                false
(%i2) sin(x/2);
                                        x
(%o2)                               sin(-)
                                        2
(%i3) halfangles:true;
(%o3)                                true
(%i4) sin(x/2);
                                                    x
                                            floor(-----)
                                                  2 %pi
                      sqrt(1 - cos(x)) (- 1)
(%o4)                 ----------------------------------
                                   sqrt(2)
(%i5) assume(x>0, x<2*%pi)$
(%i6) sin(x/2);
                               sqrt(1 - cos(x))
(%o6)                          ----------------
                                   sqrt(2)
@end example

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Vereinfachungsschalter und -variable}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@defvr {Packet} ntrig

@c The @code{ntrig} package contains a set of simplification rules that are
@c used to simplify trigonometric function whose arguments are of the form
@c @code{@var{f}(@var{n} %pi/10)} where @var{f} is any of the functions
@c @code{sin}, @code{cos}, @code{tan}, @code{csc}, @code{sec} and @code{cot}.

Das Packet @code{ntrig} enthält Regeln, um Winkelfunktionen zu vereinfachen, die
Argumente der Form @code{@var{f}(@var{n} %pi/10)} haben. @var{f} ist eine der
Funktionen @code{sin}, @code{cos}, @code{tan}, @code{csc}, @code{sec} oder 
@code{cot}. 

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Packete}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@deffn {Funktion} trigexpand (@var{expr})

@c Expands trigonometric and hyperbolic functions of sums of angles and of 
@c multiple angles occurring in @var{expr}. For best results, @var{expr} should
@c be expanded. To enhance user control of simplification, this function expands
@c only one level at a time, expanding sums of angles or multiple angles.  To 
@c obtain full expansion into sines and cosines immediately, set the switch 
@c @code{trigexpand: true}.

Die Funktion @code{trigexpand} expandiert Winkel- und Hyperbelfunktionen im 
Ausdruck @var{expr}, die Summen und Vielfache von Winkeln als Argument haben.
Die besten Ergebnisse werden erzielt, wenn der Ausdruck @var{expr} zunächst
expandiert wird.

@code{trigexpand} is governed by the following global flags:

@table @code
@item trigexpand
If @code{true} causes expansion of all
expressions containing sin's and cos's occurring subsequently.
@item halfangles
If @code{true} causes half-angles to be simplified
away.
@item trigexpandplus
Controls the "sum" rule for @code{trigexpand},
expansion of sums (e.g. @code{sin(x + y)}) will take place only if
@code{trigexpandplus} is @code{true}.
@item trigexpandtimes
Controls the "product" rule for @code{trigexpand},
expansion of products (e.g. @code{sin(2 x)}) will take place only if
@code{trigexpandtimes} is @code{true}.
@end table

Examples:

@c ===beg===
@c x+sin(3*x)/sin(x),trigexpand=true,expand;
@c trigexpand(sin(10*x+y));
@c ===end===
@example
@group
(%i1) x+sin(3*x)/sin(x),trigexpand=true,expand;
                         2           2
(%o1)               - sin (x) + 3 cos (x) + x
@end group
@group
(%i2) trigexpand(sin(10*x+y));
(%o2)          cos(10 x) sin(y) + sin(10 x) cos(y)
@end group
@end example

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Funktionen für die Vereinfachung}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@defvr {Optionsvariable} trigexpandplus
Standardwert: @code{true}

@code{trigexpandplus} controls the "sum" rule for
@code{trigexpand}.  Thus, when the @code{trigexpand} command is used or the
@code{trigexpand} switch set to @code{true}, expansion of sums
(e.g. @code{sin(x+y))} will take place only if @code{trigexpandplus} is
@code{true}.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Vereinfachungsschalter und -variable}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@defvr {Optionsvariable} trigexpandtimes
Standardwert: @code{true}

@code{trigexpandtimes} controls the "product" rule for
@code{trigexpand}.  Thus, when the @code{trigexpand} command is used or the
@code{trigexpand} switch set to @code{true}, expansion of products (e.g. @code{sin(2*x)})
will take place only if @code{trigexpandtimes} is @code{true}.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Vereinfachungsschalter und -variable}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@defvr {Optionsvariable} triginverses
Standardwert: @code{true}

@code{triginverses} controls the simplification of the
composition of trigonometric and hyperbolic functions with their inverse
functions.

If @code{all}, both e.g. @code{atan(tan(@var{x}))}
and @code{tan(atan(@var{x}))} simplify to @var{x}.

If @code{true}, the @code{@var{arcfun}(@var{fun}(@var{x}))}
simplification is turned off.

If @code{false}, both the
@code{@var{arcfun}(@var{fun}(@var{x}))} and
@code{@var{fun}(@var{arcfun}(@var{x}))}
simplifications are turned off.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Vereinfachungsschalter und -variable}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@deffn  {Function} trigreduce (@var{expr}, @var{x})
@deffnx {Function} trigreduce (@var{expr})

Combines products and powers of trigonometric
and hyperbolic sin's and cos's of @var{x} into those of multiples of @var{x}.
It also tries to eliminate these functions when they occur in
denominators.  If @var{x} is omitted then all variables in @var{expr} are used.

See also @code{poissimp}.

@c ===beg===
@c trigreduce(-sin(x)^2+3*cos(x)^2+x);
@c ===end===
@example
@group
(%i1) trigreduce(-sin(x)^2+3*cos(x)^2+x);
               cos(2 x)      cos(2 x)   1        1
(%o1)          -------- + 3 (-------- + -) + x - -
                  2             2       2        2
@end group
@end example

@c
@c     OBSOLETE
@c     The behavior was changed in order to avoid calling expand in the core
@c     simplifier (trigi.lisp rev 1.31)
@c     See http://www.math.utexas.edu/pipermail/maxima/2008/010919.html.
@c
@c The trigonometric simplification routines will use declared
@c information in some simple cases.  Declarations about variables are
@c used as follows, e.g.
@c
@c ---beg---
@c declare(j, integer, e, even, o, odd)$
@c sin(x + (e + 1/2)*%pi);
@c sin(x + (o + 1/2)*%pi);
@c ---end---
@c @example
@c (%i1) declare(j, integer, e, even, o, odd)$
@c (%i2) sin(x + (e + 1/2)*%pi);
@c (%o2)                        cos(x)
@c (%i3) sin(x + (o + 1/2)*%pi);
@c (%o3)                       - cos(x)
@c @end example

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Funktion für die Vereinfachung}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@defvr {Optionsvariable} trigsign
Standardwert: @code{true}

When @code{trigsign} is @code{true}, it permits simplification of negative
arguments to trigonometric functions. E.g., @code{sin(-x)} will become
@code{-sin(x)} only if @code{trigsign} is @code{true}.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Vereinfachungsschalter und -variable}
@c @closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@deffn {Funktion} trigsimp (@var{expr})

@iftex
Employs the identities
@tex
$\sin\left(x\right)^2 + \cos\left(x\right)^2 = 1$
@end tex
and
@tex
$\cosh\left(x\right)^2 - \sinh\left(x\right)^2 = 1$
@end tex
to simplify expressions containing @code{tan}, @code{sec},
etc., to @code{sin}, @code{cos}, @code{sinh}, @code{cosh}.
@end iftex
@ifnottex
Employs the identities @math{sin(x)^2 + cos(x)^2 = 1} and
@math{cosh(x)^2 - sinh(x)^2 = 1} to simplify expressions containing @code{tan}, @code{sec},
etc., to @code{sin}, @code{cos}, @code{sinh}, @code{cosh}.
@end ifnottex

@code{trigreduce}, @code{ratsimp}, and @code{radcan} may be
able to further simplify the result.

@code{demo ("trgsmp.dem")} displays some examples of @code{trigsimp}.
@c MERGE EXAMPLES INTO THIS ITEM

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Funktionen für die Vereinfachung}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Funktion} trigrat (@var{expr})

Gives a canonical simplifyed quasilinear form of a
trigonometrical expression; @var{expr} is a rational fraction of several @code{sin},
@code{cos} or @code{tan}, the arguments of them are linear forms in some variables (or
kernels) and @code{%pi/@var{n}} (@var{n} integer) with integer coefficients. The result is a
simplified fraction with numerator and denominator linear in @code{sin} and @code{cos}.
Thus @code{trigrat} linearize always when it is possible.

@c ===beg===
@c trigrat(sin(3*a)/sin(a+%pi/3));
@c ===end===
@example
@group
(%i1) trigrat(sin(3*a)/sin(a+%pi/3));
(%o1)            sqrt(3) sin(2 a) + cos(2 a) - 1
@end group
@end example

The following example is taken from
Davenport, Siret, and Tournier, @i{Calcul Formel}, Masson (or in English,
Addison-Wesley), section 1.5.5, Morley theorem.

@c ===beg===
@c c : %pi/3 - a - b$
@c bc : sin(a)*sin(3*c)/sin(a+b);
@c ba : bc, c=a, a=c;
@c ac2 : ba^2 + bc^2 - 2*bc*ba*cos(b);
@c trigrat (ac2);
@c ===end===
@example
(%i1) c : %pi/3 - a - b$
@group
(%i2) bc : sin(a)*sin(3*c)/sin(a+b);
                                          %pi
                  sin(a) sin(3 (- b - a + ---))
                                           3
(%o2)             -----------------------------
                           sin(b + a)
@end group
@group
(%i3) ba : bc, c=a, a=c;
                                         %pi
                    sin(3 a) sin(b + a - ---)
                                          3
(%o3)               -------------------------
                                  %pi
                          sin(a - ---)
                                   3
@end group
@group
(%i4) ac2 : ba^2 + bc^2 - 2*bc*ba*cos(b);
         2         2         %pi
      sin (3 a) sin (b + a - ---)
                              3
(%o4) ---------------------------
                2     %pi
             sin (a - ---)
                       3
                                       %pi
 - (2 sin(a) sin(3 a) sin(3 (- b - a + ---)) cos(b)
                                        3
             %pi            %pi
 sin(b + a - ---))/(sin(a - ---) sin(b + a))
              3              3
      2       2              %pi
   sin (a) sin (3 (- b - a + ---))
                              3
 + -------------------------------
                2
             sin (b + a)
@end group
@group
(%i5) trigrat (ac2);
(%o5) - (sqrt(3) sin(4 b + 4 a) - cos(4 b + 4 a)
 - 2 sqrt(3) sin(4 b + 2 a) + 2 cos(4 b + 2 a)
 - 2 sqrt(3) sin(2 b + 4 a) + 2 cos(2 b + 4 a)
 + 4 sqrt(3) sin(2 b + 2 a) - 8 cos(2 b + 2 a) - 4 cos(2 b - 2 a)
 + sqrt(3) sin(4 b) - cos(4 b) - 2 sqrt(3) sin(2 b) + 10 cos(2 b)
 + sqrt(3) sin(4 a) - cos(4 a) - 2 sqrt(3) sin(2 a) + 10 cos(2 a)
 - 9)/4
@end group
@end example

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen} @category{Funktionen für die Vereinfachung}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Hyperbelfunktionen, Einf@"uhrung in Hyperbelfunktionen, Winkelfunktionen
@section Hyperbelfunktionen
@c -----------------------------------------------------------------------------

@menu
* Einf@"uhrung in Hyperbelfunktionen::
* Funktionen und Variablen f@"ur Hyperbelfunktionen::
@end menu

@c -----------------------------------------------------------------------------
@node Einf@"uhrung in Hyperbelfunktionen, Funktionen und Variablen f@"ur Hyperbelfunktionen, Hyperbelfunktionen
@subsection Einf@"uhrung in Hyperbelfunktionen
@c -----------------------------------------------------------------------------



@c -----------------------------------------------------------------------------
@node Funktionen und Variablen f@"ur Hyperbelfunktionen, Zufallszahlen, Einf@"uhrung in Hyperbelfunktionen
@subsection Funktionen und Variablen f@"ur Hyperbelfunktionen

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} acosh (@var{x})
-- Areakosinus Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} acoth (@var{x})
-- Areakotangens Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} acsch (@var{x})
-- Areakosekans Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} asech (@var{x})
-- Areasekans Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} asinh (@var{x})
-- Areasinus Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} atanh (@var{x})
-- Areatangens Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} cosh (@var{x})
-- Kosinus Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} coth (@var{x})
-- Kotangens Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} csch (@var{x})
-- Kosekans Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} sech (@var{x})
-- Sekans Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} sinh (@var{x})
-- Sinus Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c --- 20.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} tanh (@var{x})
-- Tangens Hyperbolicus.

@c @opencatbox
@c @category{Winkel- und Hyperbelfunktionen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Zufallszahlen, , Funktionen und Variablen f@"ur Hyperbelfunktionen, Mathematische Funktionen
@section Zufallszahlen

@c -----------------------------------------------------------------------------
@deffn  {Funktion} make_random_state (@var{n})
@deffnx {Funktion} make_random_state (@var{s})
@deffnx {Funktion} make_random_state (true)
@deffnx {Funktion} make_random_state (false)
@c OMIT THIS FOR NOW. SEE COMMENT BELOW.
@c @defunx make_random_state (@var{a})

@c A random state object represents the state of the random number generator.
@c The state comprises 627 32-bit words.

Ein Zufallszustand repräsentiert den Zustand des Zufallszahlengenerators. Der
Zustand enthält 627 32-Bit Worte.

@c @code{make_random_state (@var{n})} returns a new random state object created 
@c from an integer seed value equal to @var{n} modulo 2^32. @var{n} may be 
@c negative.

@code{make_random_state(@var{n})} gibt einen neuen Zufallszustand zurück, der 
aus einer ganzen Zahl @var{n} modulo 2^32 erzeugt wird. @var{n} kann eine 
negative Zahl sein.

  @c OMIT THIS FOR NOW. NOT SURE HOW THIS IS SUPPOSED TO WORK.
  @c @code{make_random_state (@var{a})} returns a new random state object
  @c created from an array @var{a}, which must be a Lisp array of 32 unsigned bytes.

@c @code{make_random_state (@var{s})} returns a copy of the random state 
@c @var{s}.

@code{make_random_state(@var{s})} gibt eine Kopie des Zufallszutandes @var{s}
zurück.

@c @code{make_random_state (true)} returns a new random state object, using the
@c current computer clock time as the seed.

@code{make_random_state(true)} gibt einen neuen Zufallszustand zurück, der aus
der aktuellen Systemzeit des Computers erzeugt wird.

@c @code{make_random_state (false)} returns a copy of the current state of the 
@c random number generator.

@code{make_random_state(false)} gibt eine Kopie des aktuellen Zustands des
Zufallszahlengenerators zurück.

@c @opencatbox
@c @category{Zufallszahlen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Funktion} set_random_state (@var{s})

@c Copies @var{s} to the random number generator state.

Kopiert @var{s} in den Zufallszustand des Zufallszahlengenerators.

@c @code{set_random_state} always returns @code{done}.

@code{set_random_state} gibt immer @code{done} zurück.

@c @opencatbox
@c @category{Zufallszahlen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Funktion} random (@var{x})

@c Returns a pseudorandom number. If @var{x} is an integer, @code{random 
@c (@var{x})} returns an integer from 0 through @code{@var{x} - 1} inclusive. 
@c If @var{x} is a floating point number, @code{random (@var{x})} returns a 
@c nonnegative floating point number less than @var{x}. @code{random} complains 
@c with an error if @var{x} is neither an integer nor a float, or if @var{x} is 
@c not positive.

Erzeugt eine Pseudo-Zufallszahl. Ist @var{x} eine ganze Zahl, gibt 
@code{random(@var{x})} eine ganze Zahl im Intervall 0 bis einschließlich
@code{@var{x}-1} zurück. Ist @var{x} eine Gleitkommazahl, gibt
@code{random(@var{x})} eine positive Gleitkommazahl zurück, die kleiner als
@var{x} ist. @code{random} gibt eine Fehlermeldung, wenn @var{x} weder eine
ganze Zahl noch eine Gleitkommazahl ist oder wenn @var{x} eine negative Zahl 
ist.

@c The functions @code{make_random_state} and @code{set_random_state} maintain 
@c the state of the random number generator.

Die Funktionen @code{make_random_state} und @code{set_random_state} verwalten
den Zustand des Zufallszahlengenerators.

@c The Maxima random number generator is an implementation of the Mersenne 
@c twister MT 19937.

Der Maxima-Zufallszahlengenerator ist eine Implementation des Mersenne twister
MT 19937.

Beispiele:

@c ===beg===
@c s1: make_random_state (654321)$
@c set_random_state (s1);
@c random (1000);
@c random (9573684);
@c random (2^75);
@c s2: make_random_state (false)$
@c random (1.0);
@c random (10.0);
@c random (100.0);
@c set_random_state (s2);
@c random (1.0);
@c random (10.0);
@c random (100.0);
@c ===end===
@example
(%i1) s1: make_random_state (654321)$
(%i2) set_random_state (s1);
(%o2)                         done
(%i3) random (1000);
(%o3)                          768
(%i4) random (9573684);
(%o4)                        7657880
(%i5) random (2^75);
(%o5)                11804491615036831636390
(%i6) s2: make_random_state (false)$
(%i7) random (1.0);
(%o7)                   .2310127244107132
(%i8) random (10.0);
(%o8)                   4.394553645870825
(%i9) random (100.0);
(%o9)                   32.28666704056853
(%i10) set_random_state (s2);
(%o10)                        done
(%i11) random (1.0);
(%o11)                  .2310127244107132
(%i12) random (10.0);
(%o12)                  4.394553645870825
(%i13) random (100.0);
(%o13)                  32.28666704056853
@end example

@c @opencatbox
@c @category{Zufallszahlen} @category{Numerische Methoden}
@c @closecatbox
@end deffn

@c --- End of file MathFunctions.de.texi ---------------------------------------

