@c -----------------------------------------------------------------------------
@c File     : MathFunctions.de.texi
@c License  : GNU General Public License (GPL)
@c Language : German
@c Date     : 19.10.2010
@c 
@c This file is part of Maxima -- GPL CAS based on DOE-MACSYMA
@c -----------------------------------------------------------------------------

@menu 
* Funktionen f@"ur Zahlen::
* Funktionen f@"ur komplexe Zahlen::
* Funktionen der Kombinatorik::
* Algebraische Funktionen::
* Exponential- und Logarithmusfunktion::
* Winkelfunktionen::
* Hyperbelfunktionen::
@end menu

@c -----------------------------------------------------------------------------
@node Funktionen f@"ur Zahlen, Funktionen f@"ur komplexe Zahlen, Mathematische Funktionen
@section Funktionen f@"ur Zahlen
@c -----------------------------------------------------------------------------

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} abs (@var{expr})

@c Returns the absolute value @var{expr}.  If @var{expr} is complex, returns 
@c the complex modulus of @var{expr}.

Gibt den Betrag des Argumentes @var{expr} zur@"uck. Ist @var{expr} eine komplexe
Zahl wird das Argument zum komplexen Betrag vereinfacht. Allgemeine komplexe
Ausdr@"ucke oder komplexe Funktionen werden von @code{abs} nicht vereinfacht. 
F@"ur komplexe Ausdr@"ucke kann die Funktion @code{cabs} genutzt werden. Siehe 
@code{cabs}.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} ceiling (@var{x})

@c When @var{x} is a real number, return the least integer that is greater than 
@c or equal to @var{x}.  

F@"ur eine reelle Zahl @var{x} gibt @code{ceiling} die kleinste ganze Zahl 
zur@"uck, die gr@"o@ss{}er oder gleich @var{x} ist.

@c If @var{x} is a constant expression (@code{10 * %pi}, for example), 
@c @code{ceiling} evaluates @var{x} using big floating point numbers, and 
@c applies @code{ceiling} to the resulting big float. Because @code{ceiling} 
@c uses floating point evaluation, it's possible, although unlikely, that 
@c @code{ceiling} could return an erroneous value for constant inputs. To guard 
@c against errors, the floating point evaluation is done using three values for 
@c @code{fpprec}.

Ist @var{expr} ein konstanter Ausdruck, zum Beispiel @code{10*%pi}, dann wird 
der Ausdruck @var{expr} in eine gro@ss{}e Gleitkommazahl umgewandelt. Auf die 
gro@ss{}e Gleitkommazahl wird dann @code{ceiling} angewendet. Aufgrund der 
Umwandlung in Gleitkommazahlen f@"ur konstante Ausdr@"ucke, ist es m@"oglich, 
dass @code{ceiling} ein fehlerhaftes Ergebnis errechnet. Um solche Fehler zu 
minimieren, wird bei der Umwandlung in Gleitkommazahlen die Genauigkeit 
@code{fpprec} um drei zus@"atzliche Stellen erh@"oht.

@c For non-constant inputs, @code{ceiling} tries to return a simplified value.  
@c Here are examples of the simplifications that @code{ceiling} knows about:

Nicht-konstante Ausdr@"ucke versucht @code{ceiling} zu vereinfachen. Es folgen
Beispiele f@"ur solche Vereinfachungen:

@c ===beg===
@c ceiling (ceiling (x));
@c ceiling (floor (x));
@c declare (n, integer)$
@c [ceiling (n), ceiling (abs (n)), ceiling (max (n, 6))];
@c assume (x > 0, x < 1)$
@c ceiling (x);
@c tex (ceiling (a));
@c ===end===
@example
(%i1) ceiling (ceiling (x));
(%o1)                      ceiling(x)
(%i2) ceiling (floor (x));
(%o2)                       floor(x)
(%i3) declare (n, integer)$
(%i4) [ceiling (n), ceiling (abs (n)), ceiling (max (n, 6))];
(%o4)                [n, abs(n), max(n, 6)]
(%i5) assume (x > 0, x < 1)$
(%i6) ceiling (x);
(%o6)                           1
(%i7) tex (ceiling (a));
$$\left \lceil a \right \rceil$$
(%o7)                         false
@end example

@c The function @code{ceiling} does not automatically map over lists or 
@c matrices. Finally, for all inputs that are manifestly complex, @code{ceiling}
@c returns a noun form.

Ist das Argument der Funktion offenbar ein komplexer Ausdruck,
wird die Substantiv-Form zur@"uck gegeben.

@c If the range of a function is a subset of the integers, it can be declared 
@c to be @code{integervalued}. Both the @code{ceiling} and @code{floor} 
@c functions can use this information; for example:

Sind die Werte einer Funktion eine Teilmenge der ganzen Zahlen, kann diese als
@code{integervalued} deklariert werden. Die Funktionen @code{ceiling} und
@code{floor} k@"onnen diese Information nutzen, um Ausdr@"ucke zu vereinfachen:

@c ===beg===
@c declare (f, integervalued)$
@c floor (f(x));
@c ceiling (f(x) - 1);
@c ===end===
@example
(%i1) declare (f, integervalued)$
(%i2) floor (f(x));
(%o2)                         f(x)
(%i3) ceiling (f(x) - 1);
(%o3)                       f(x) - 1
@end example

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} entier (@var{x})

@c Returns the largest integer less than or equal to @var{x} where @var{x} is 
@c numeric.  @code{fix} (as in @code{fixnum}) is a synonym for this, so 
@c @code{fix(@var{x})} is precisely the same.

@code{entier} ist eine andere Bezeichnung f@"ur die Funktion @code{floor}. Siehe
@code{floor}.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} floor (@var{x})

@c When @var{x} is a real number, return the largest integer that is less than 
@c or equal to @var{x}.

F@"ur eine reelle Zahl @var{x} gibt @code{floor} die gr@"o@ss{}te ganze Zahl 
zur@"uck, die kleiner oder gleich @var{x} ist.

@c If @var{x} is a constant expression (@code{10 * %pi}, for example), 
@c @code{floor} evaluates @var{x} using big floating point numbers, and applies 
@c @code{floor} to the resulting big float. Because @code{floor} uses
@c floating point evaluation, it's possible, although unlikely, that 
@c @code{floor} could return  an erroneous value for constant inputs. To guard 
@c against errors, the floating point evaluation is done using three values for 
@c @code{fpprec}.

Ist @var{expr} ein konstanter Ausdruck, zum Beispiel @code{10*%pi}, dann wird 
der Ausdruck @var{expr} in eine gro@ss{}e Gleitkommazahl umgewandelt. Auf die 
gro@ss{}e Gleitkommazahl wird dann @code{floor} angewendet. Aufgrund der 
Umwandlung in Gleitkommazahlen f@"ur konstante Ausdr@"ucke, ist es m@"oglich, 
dass @code{floor} ein fehlerhaftes Ergebnis errechnet. Um solche Fehler zu 
minimieren, wird bei der Umwandlung in Gleitkommazahlen die Genauigkeit 
@code{fpprec} um drei zus@"atzliche Stellen erh@"oht.

@c For non-constant inputs, @code{floor} tries to return a simplified value. 
@c Here are examples of the simplifications that @code{floor} knows about:

Nicht-konstante Ausdr@"ucke versucht @code{floor} zu vereinfachen. Es folgen
Beispiele f@"ur solche Vereinfachungen:

@c ===beg===
@c floor (ceiling (x));
@c floor (floor (x));
@c declare (n, integer)$
@c [floor (n), floor (abs (n)), floor (min (n, 6))];
@c assume (x > 0, x < 1)$
@c floor (x);
@c tex (floor (a));
@c ===end===
@example
(%i1) floor (ceiling (x));
(%o1)                      ceiling(x)
(%i2) floor (floor (x));
(%o2)                       floor(x)
(%i3) declare (n, integer)$
(%i4) [floor (n), floor (abs (n)), floor (min (n, 6))];
(%o4)                [n, abs(n), min(n, 6)]
(%i5) assume (x > 0, x < 1)$
(%i6) floor (x);
(%o6)                           0
(%i7) tex (floor (a));
$$\left \lfloor a \right \rfloor$$
(%o7)                         false
@end example

@c The function @code{floor} does not automatically map over lists or matrices.
@c Finally, for all inputs that are manifestly complex, @code{floor} returns 
@c a noun form.

Ist das Argument der Funktion offenbar ein komplexer Ausdruck, wird eine
Substantiv-Form zur@"uck gegeben.

@c If the range of a function is a subset of the integers, it can be declared to
@c be @code{integervalued}. Both the @code{ceiling} and @code{floor} functions
@c can use this information; for example:

Sind die Werte einer Funktion eine Teilmenge der ganzen Zahlen, kann diese als
@code{integervalued} deklariert werden. Die Funktionen @code{ceiling} und
@code{floor} k@"onnen diese Information nutzen, um Ausdr@"ucke zu vereinfachen:

@c ===beg===
@c declare (f, integervalued)$
@c floor (f(x));
@c ceiling (f(x) - 1);
@c ===end===
@example
(%i1) declare (f, integervalued)$
(%i2) floor (f(x));
(%o2)                         f(x)
(%i3) ceiling (f(x) - 1);
(%o3)                       f(x) - 1
@end example

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} fix (@var{x})

@c A synonym for @code{entier (@var{x})}.

@code{fix} ist eine andere Bezeichnung f@"ur die Funktion @code{floor}. Siehe
@code{floor}.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} lmax (@var{L})

@c When @var{L} is a list or a set, return @code{apply ('max, args (@var{L}))}. 
@c When @var{L} isn't a list or a set, signal an error.

Ist @var{L} eine Liste oder Menge, wird die Funktion @code{max} auf die Elemente
der Liste oder Menge angewendet und das Ergebnis zur@"uckgegeben. Ist @var{L} 
keine Liste oder Menge, wird ein Maxima-Fehler signalisiert.

@c @opencatbox
@c @category{Mathematische Funktionen} @category{Listen} @category{Mengen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} lmin (@var{L})

@c When @var{L} is a list or a set, return @code{apply ('min, args (@var{L}))}. 
@c When @var{L} isn't a list or a set, signal an error.

Ist @var{L} eine Liste oder Menge, wird die Funktion @code{min} auf die Elemente
der Liste oder Menge angewendet und das Ergebnis zur@"uckgegeben. Ist @var{L} 
keine Liste oder Menge, wird ein Maxima-Fehler signalisiert.

@c @opencatbox
@c @category{Mathematische Funktionen} @category{Listen} @category{Mengen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} max (@var{x_1}, ..., @var{x_n})

@c Return a simplified value for the maximum of the expressions @var{x_1} 
@c through @var{x_n}. When @code{get (trylevel, maxmin)}, is 2 or greater, 
@c @code{max} uses the simplification @code{max (e, -e) --> |e|}.  When 
@c @code{get (trylevel, maxmin)} is 3 or greater, @var{max} tries
@c to eliminate expressions that are between two other arguments; for example,
@c @code{max (x, 2*x, 3*x) --> max (x, 3*x)}. To set the value of 
@c @code{trylevel} to 2, use @code{put (trylevel, 2, maxmin)}.

Gibt einen vereinfachten Wert f@"ur das Maximum der Ausdr@"ucke @var{x_1} bis 
@var{x_n}. Ist @code{get(trylevel, maxmin)} gleich 2 oder gr@"o@ss{}er, nutzt
@code{max} die Vereinfachung @code{max(e,-e) --> |e|}. Ist 
@code{get(trylevel, maxmin)} gleich 3 oder gr@"o@ss{}er, versucht @code{max} 
Ausdr@"ucke zu eleminieren, die zwischen zwei anderen Argumenten liegen. So wird
zum Beispiel @code{max(x,2*x, 3*x)} zu @code{max(x, 3*x)} vereinfacht. 
@code{put(trylevel, 2, maximin)} setzt den Wert von @code{trylevel} zu 2.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn 

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} min (@var{x_1}, ..., @var{x_n})

@c Return a simplified value for the minimum of the expressions @code{x_1} 
@c through @code{x_n}. When @code{get (trylevel, maxmin)}, is 2 or greater, 
@c @code{min} uses the simplification @code{min (e, -e) --> -|e|}.  When 
@c @code{get (trylevel, maxmin)} is 3 or greater, @code{min} tries to eliminate 
@c expressions that are between two other arguments; for example,
@c @code{min (x, 2*x, 3*x) --> min (x, 3*x)}. To set the value of 
@c @code{trylevel} to 2, use @code{put (trylevel, 2, maxmin)}.

Gibt einen vereinfachten Wert f@"ur das Minimum der Ausdr@"ucke @var{x_1} bis 
@var{x_n}. Ist @code{get(trylevel, maxmin)} gleich 2 oder gr@"o@ss{}er, nutzt
@code{min} die Vereinfachung @code{min(e,-e) --> |e|}. Ist 
@code{get(trylevel, maxmin)} gleich 3 oder gr@"o@ss{}er, versucht @code{min} 
Ausdr@"ucke zu eleminieren, die zwischen zwei anderen Argumenten liegen. So wird
zum Beispiel @code{min(x,2*x, 3*x)} zu @code{min(x, 3*x)} vereinfacht. 
@code{put(trylevel, 2, maximin)} setzt den Wert von @code{trylevel} zu 2.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} mod (@var{x}, @var{y})

@c If @var{x} and @var{y} are real numbers and @var{y} is nonzero, return 
@c @code{@var{x} - @var{y} * floor(@var{x} / @var{y})}. Further for all real 
@c @var{x}, we have @code{mod (@var{x}, 0) = @var{x}}. For a discussion of the 
@c definition @code{mod (@var{x}, 0) = @var{x}}, see Section 3.4, of 
@c "Concrete Mathematics," by Graham, Knuth, and Patashnik. The function 
@c @code{mod (@var{x}, 1)} is a sawtooth function with period 1 with 
@c @code{mod (1, 1) = 0} and @code{mod (0, 1) = 0}.

Sind @var{x} und @var{y} reelle Zahlen und ist @var{y} ungleich Null, gibt 
@code{mod(@var{x}, @var{y})} das Ergebnis von @code{@var{x} - @var{y} * 
floor(@var{x} / @var{y})} zur@"uck. Weiterhin gilt f@"ur alle reellen Zahlen
@code{mod(@var{x}, 0) = @var{x}}. F@"ur eine Diskussion dieser Definition siehe
Kapitel 3.4, "Concrete Mathematics," by Graham, Knuth, and Patashnik. Die 
Funktion @code{mod(@var{x}, 1)} ist eine S@"agezahnfunktion mit der Periode 1 
mit @code{mod(1, 1) = 0} und @code{mod (0, 1) = 0}.

@c To find the principal argument (a number in the interval @code{(-%pi, %pi]}) 
@c of a complex number, use the function @code{@var{x} |-> %pi - mod (%pi - 
@c @var{x}, 2*%pi)}, where @var{x} is an argument.

Um den Hauptwert (eine Zahl im Interval @code{(-%pi, %pi)}) einer komplexen Zahl
zu finden, kann @code{@var{x} |-> %pi - mod(%pi - @var{x}, 2*%pi)} genutzt 
werden, wobei @var{x} das Argument ist.

@c When @var{x} and @var{y} are constant expressions (@code{10 * %pi}, for 
@c example), @code{mod} uses the same big float evaluation scheme that 
@c @code{floor} and @code{ceiling} uses. Again, it's possible, although 
@c unlikely, that @code{mod} could return an erroneous value in such cases.

Sind @var{x} und @var{y} konstante Ausdr@"ucke (zum Beispiel @code{10 * %pi}), 
nutzt @code{mod} denselben Algorithmus f@"ur gro@ss{}e Gleitkommazahlen wie 
@code{floor} und @code{ceiling}. Wieder ist es m@"oglich, das @code{mod} in 
diesen F@"allen ein fehlerhaftes Ergebnis berechnet.

@c For nonnumerical arguments @var{x} or @var{y}, @code{mod} knows several 
@c simplification rules:

F@"ur nicht nummerische Argumente @var{x} oder @var{y} kennt @code{mode} 
verschiedene Vereinfachungen:

@c ===beg===
@c mod (x, 0);
@c mod (a*x, a*y);
@c mod (0, x);
@c ===end===
@example
(%i1) mod (x, 0);
(%o1)                           x
(%i2) mod (a*x, a*y);
(%o2)                      a mod(x, y)
(%i3) mod (0, x);
(%o3)                           0
@end example

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} round (@var{x})

@c When @var{x} is a real number, returns the closest integer to @var{x}.  
@c Multiples of 1/2 are rounded to the nearest even integer. Evaluation of 
@c @var{x} is similar to  @code{floor} and @code{ceiling}.

Ist @var{x} eine reelle Zahl, gibt @code{round} die am n@"achsten liegende ganze
Zahl zur@"uck. Vielfache von 1/2 werden auf die n@"achste gerade ganze Zahl 
gerundet. Die Methode zur Berechnung von @var{x} ist vergleichbar mit den
Methoden der Funktionen @code{floor} und @code{ceiling}.

Siehe auch @code{floor} und @code{ceiling}.

@c @opencatbox
@c @category{Mathematische Funktionen} @category{Funktionen f@"ur ganze Zahlen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} signum (@var{x})

@c For numeric @var{x}, returns 0 if @var{x} is 0, otherwise returns -1 or +1
@c as @var{x} is less than or greater than 0, respectively.

Ist @var{x} eine Zahl, ist das Ergebnis 0, wenn @var{x} gleich 0 ist, oder -1
f@"ur eine Zahl kleiner als 0 und +1 f@"ur eine Zahl, die gr@"o@ss{}er als 0 
ist.

@c If @var{x} is not numeric then a simplified but equivalent form is returned.
@c For example, @code{signum(-x)} gives @code{-signum(x)}.

Ist @var{x} keine Zahl, versucht Maxima den Ausdruck zu vereinfachen. So wird 
zum Beispiel @code{signum(-x)} zu @code{-signum(x)} vereinfacht.

@c @opencatbox
@c @category{Mathematische Funktionen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Funktionen f@"ur komplexe Zahlen, Funktionen der Kombinatorik, Funktionen f@"ur Zahlen
@section Funktionen f@"ur komplexe Zahlen
@c -----------------------------------------------------------------------------

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} cabs (@var{expr})

@c Returns the complex absolute value (the complex modulus) of @var{expr}.

Gibt den Betrag eines komplexen Ausdrucks @var{expr} zur@"uck. Im Unterschied
zu der Funktion @code{abs}, die komplexe Ausdr@"ucke und Funktionen nicht
vereinfacht, zerlegt die Funktion @code{cabs} einen komplexen Ausdruck
immer in einen Realteil und einen Imagin@"arteil, um den komplexen Betrag
zu berechnen.

@c @opencatbox
@c @category{Komplexe Zahlen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} carg (@var{z})

@c Returns the complex argument of @var{z}. The complex argument is an angle 
@c @code{theta} in @code{(-%pi, %pi]} such that @code{r exp (theta %i) = 
@c @var{z}} where @code{r} is the magnitude of @var{z}.

Gibt das komplexe Argument von @var{z} zur@"uck. Das komplexe Argument ist ein
Winkel @code{theta} im Intervall @code{(-%pi, %pi)} derart, das @var{z} = 
@code{r exp (theta %i)} ist, wobei @code{r} den Betrag des komplexen Ausdrucks 
@var{z} bezeichnet.

@c @code{carg} is a computational function, not a simplifying function.

@c See also @code{abs} (complex magnitude), @code{polarform}, @code{rectform},
@c @code{realpart}, and @code{imagpart}.

Siehe auch @code{cabs}, @code{polarform}, @code{rectform}, @code{realpart} und 
@code{imagpart}.

Beispiele:

@c ===beg===
@c carg (1);
@c carg (1 + %i);
@c carg (exp (%i));
@c carg (exp (%pi * %i));
@c carg (exp (3/2 * %pi * %i));
@c carg (17 * exp (2 * %i));
@c ===end===
@example
(%i1) carg (1);
(%o1)                           0
(%i2) carg (1 + %i);
                               %pi
(%o2)                          ---
                                4
(%i3) carg (exp (%i));
(%o3)                           1
(%i4) carg (exp (%pi * %i));
(%o4)                          %pi
(%i5) carg (exp (3/2 * %pi * %i));
                                %pi
(%o5)                         - ---
                                 2
(%i6) carg (17 * exp (2 * %i));
(%o6)                           2
@end example

@c @opencatbox
@c @category{Komplexe Ausdr@"ucke}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} conjugate (@var{x})

@c Returns the complex conjugate of @var{x}.

Gibt den konjugiert komplexen Wert des Ausdruckes @var{x} zur@"uck.

Beispiele:

@c ===beg===
@c declare ([aa, bb], real, cc, complex, ii, imaginary);
@c conjugate (aa + bb*%i);
@c conjugate (cc);
@c conjugate (ii);
@c conjugate (xx + yy);
@c ===end===
@example
(%i1) declare ([aa, bb], real, cc, complex, ii, imaginary);

(%o1)                         done
(%i2) conjugate (aa + bb*%i);

(%o2)                      aa - %i bb
(%i3) conjugate (cc);

(%o3)                     conjugate(cc)
(%i4) conjugate (ii);

(%o4)                         - ii
(%i5) conjugate (xx + yy);

(%o5)             conjugate(yy) + conjugate(xx)
@end example

@c @opencatbox
@c @category{Complex variables}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} imagpart (@var{expr})

@c Returns the imaginary part of the expression @var{expr}.

Gibt den Imagin@"arteil des Ausdrucks @var{expr} zur@"uck.

@c @code{imagpart} is a computational function, not a simplifying function.
   @c PROBABLY NEED TO EXPLAIN IMPLICATIONS OF ABOVE STATEMENT

@c See also @code{abs}, @code{carg}, @code{polarform}, @code{rectform},
@c and @code{realpart}.

Siehe auch @code{abs}, @code{carg}, @code{polarform}, @code{rectform} 
und @code{realpart}.

@c @opencatbox
@c @category{Komplexe Zahlen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} polarform (@var{expr})

@c Returns an expression @code{r %e^(%i theta)} equivalent to @var{expr}, such 
@c that @code{r} and @code{theta} are purely real.

Gibt einen zu @var{expr} @"aquivalenten Ausdruck @code{r %e^(%i theta)} 
zur@"uck. @code{r} ist der Betrag der komplexen Ausdrucks @var{expr} und 
@code{theta} sein das Argument.

@c @opencatbox
@c @category{Komplexe Zahlen} @category{Exponentialfunktionen}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} realpart (@var{expr})

@c Returns the real part of @var{expr}. @code{realpart} and @code{imagpart} will
@c work on expressions involving trigonometic and hyperbolic functions, as well 
@c as square root, logarithm, and exponentiation.

Gibt den Realteil des Ausrucks @var{expr} zur@"uck.

@c @opencatbox
@c @category{Complex variables}
@c @closecatbox
@end deffn

@c --- 19.10.2010 DK -----------------------------------------------------------
@deffn {Funktion} rectform (@var{expr})

@c Returns an expression @code{a + b %i} equivalent to @var{expr}, such that 
@c @var{a} and @var{b} are purely real.

Zerlegt einen Ausdruck in den Realteil @code{a} und den Imagin@"arteil @code{b}
und gibt den komplexen Ausdruck @code{a + b %i} zur@"uck.

@c @opencatbox
@c @category{Komplexe Zahlen}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@node Funktionen der Kombinatorik, Algebraische Funktionen, Funktionen f@"ur komplexe Zahlen
@section Funktionen der Kombinatorik
@c -----------------------------------------------------------------------------



@c -----------------------------------------------------------------------------
@node Algebraische Funktionen, Exponential- und Logarithmusfunktion, Funktionen der Kombinatorik
@section Algebraische Funktionen
@c -----------------------------------------------------------------------------



@c -----------------------------------------------------------------------------
@node Exponential- und Logarithmusfunktion, Winkelfunktionen, Algebraische Funktion
@section Exponential- und Logarithmusfunktion
@c -----------------------------------------------------------------------------



@c -----------------------------------------------------------------------------
@node Winkelfunktionen, Einf@"uhrung in Winkelfunktionen und Inverse, Exponential- und Logarithmusfunktion
@section Winkelfunktionen
@c -----------------------------------------------------------------------------

@menu
* Einf@"uhrung in Winkelfunktionen::
* Funktionen und Variablen f@"ur Winkelfunktionen::
@end menu

@c -----------------------------------------------------------------------------
@node Einf@"uhrung in Winkelfunktionen, Funktionen und Variable f@"ur Winkelfunktionen, Winkelfunktionen
@subsection Einf@"uhrung in Winkelfunktionen
@c -----------------------------------------------------------------------------



@c -----------------------------------------------------------------------------
@node Funktionen und Variablen f@"ur Winkelfunktionen, , Einf@"uhrung in Winkelfunktionen
@subsection Funktionen und Variablen f@"ur Winkelfunktionen
@c -----------------------------------------------------------------------------



@c -----------------------------------------------------------------------------
@node Hyperbelfunktionen, Einf@"uhrung in Hyperbelfunktionen, Winkelfunktionen
@section Hyperbelfunktionen
@c -----------------------------------------------------------------------------

@menu
* Einf@"uhrung in Hyperbelfunktionen::
* Funktionen und Variablen f@"ur Hyperbelfunktionen::
@end menu

@c -----------------------------------------------------------------------------
@node Einf@"uhrung in Hyperbelfunktionen, Funktionen und Variable f@"ur Hyperbelfunktionen, Hyperbelfunktionen
@subsection Einf@"uhrung in Hyperbelfunktionen
@c -----------------------------------------------------------------------------



@c -----------------------------------------------------------------------------
@node Funktionen und Variablen f@"ur Hyperbelfunktionen, , Einf@"uhrung in Hyperbelfunktionen
@subsection Funktionen und Variablen f@"ur Hyperbelfunktionen
@c -----------------------------------------------------------------------------



@c --- End of file MathFunctions.de.texi ---------------------------------------

