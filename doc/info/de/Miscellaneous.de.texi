@c -----------------------------------------------------------------------------
@c File        : Miscellaneous.de.texi
@c License     : GNU General Public License (GPL)
@c Language    : German
@c Translation : Dr. Dieter Kaiser
@c Date        : 14.11.2010
@c 
@c This file is part of Maxima -- GPL CAS based on DOE-MACSYMA
@c -----------------------------------------------------------------------------

@menu
* Introduction to Miscellaneous Options::
* Share::
* Functions and Variables for Miscellaneous Options::
@end menu

@c -----------------------------------------------------------------------------
@node Introduction to Miscellaneous Options, Share, Verschiedene Optionen, Verschiedene Optionen
@section Introduction to Miscellaneous Options

In this section various options are discussed which have a global effect
on the operation of Maxima.   Also various lists such as the list of all
user defined functions, are discussed.

@c -----------------------------------------------------------------------------
@node Share, Functions and Variables for Miscellaneous Options, Introduction to Miscellaneous Options, Verschiedene Optionen
@section Share

The Maxima "share" directory contains programs and other files 
of interest to Maxima users, but not part of the core implementation of Maxima.
These programs are typically loaded via @code{load} or @code{setup_autoload}.

@code{:lisp *maxima-sharedir*} displays the location of the share directory
within the user's file system.

@c FIXME FIXME FIXME -- WE REALLY NEED AN UP-TO-DATE LIST OF SHARE PACKAGES !!
@code{printfile ("share.usg")} prints an out-of-date list of share packages.
Users may find it more informative to browse the share directory using a file 
system browser.

@c -----------------------------------------------------------------------------
@node Functions and Variables for Miscellaneous Options,  , Share, Verschiedene Optionen
@section Functions and Variables for Miscellaneous Options

@c THE FUNCTION APRPOS IS MOVED TO THE FILE HELP.TEXI

@c CROSS REF TO WHICH FUNCTION OR FUNCTIONS ESTABLISH PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES

@c -----------------------------------------------------------------------------
@deffn {Function} properties (@var{a})

Returns a list of the names of all the
properties associated with the atom @var{a}.

@c @opencatbox
@c @category{Declarations and inferences}
@c @closecatbox
@end deffn

@c CROSS REF TO WHICH FUNCTION OR FUNCTIONS ESTABLISH PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c WHAT IS HIDDEN IN THE "etc" HERE ??

@c --- 19.11.2010 DK -----------------------------------------------------------
@defvr {Systemvariable} props
Standardwert: @code{[]}

@c @code{props} are atoms which have any property other than those explicitly
@c mentioned in @code{infolists}, such as specified by @code{atvalue}, 
@c @code{matchdeclare}, etc., as well as properties specified in the 
@c @code{declare} function.

@code{props} ist eine Liste der Symbole, die eine Eigenschaft mit den Funktionen
@code{declare}, @code{atvaule} oder @code{matchdeclare} erhalten hat.

@c @opencatbox
@c @category{Declarations and inferences} @category{Global variables}
@c @closecatbox
@end defvr

@c CROSS REF TO WHICH FUNCTION OR FUNCTIONS ESTABLISH PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES

@c -----------------------------------------------------------------------------
@deffn {Function} propvars (@var{prop})

Returns a list of those atoms on the @code{props} list which
have the property indicated by @var{prop}.  Thus @code{propvars (atvalue)}
returns a list of atoms which have atvalues.

@c @opencatbox
@c @category{Declarations and inferences}
@c @closecatbox
@end deffn

@c CROSS REF TO OTHER FUNCTIONS WHICH PUT/GET PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c ARE PROPERTIES ESTABLISHED BY put THE SAME AS PROPERTIES ESTABLISHED BY declare OR OTHER FUNCTIONS ??
@c IS put (foo, true, integer) EQUIVALENT TO declare (foo, integer) FOR EXAMPLE ??

@c -----------------------------------------------------------------------------
@deffn {Function} put (@var{atom}, @var{value}, @var{indicator})

Assigns @var{value} to the property (specified by @var{indicator}) of @var{atom}.
@var{indicator} may be the name of any property, not just a system-defined property.

@code{put} evaluates its arguments. 
@code{put} returns @var{value}.

Examples:

@example
(%i1) put (foo, (a+b)^5, expr);
                                   5
(%o1)                       (b + a)
(%i2) put (foo, "Hello", str);
(%o2)                         Hello
(%i3) properties (foo);
(%o3)            [[user properties, str, expr]]
(%i4) get (foo, expr);
                                   5
(%o4)                       (b + a)
(%i5) get (foo, str);
(%o5)                         Hello
@end example

@c @opencatbox
@c @category{Declarations and inferences}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} qput (@var{atom}, @var{value}, @var{indicator})

Assigns @var{value} to the property (specified by @var{indicator}) of @var{atom}.
This is the same as @code{put},
except that the arguments are quoted.

Example:

@example
(%i1) foo: aa$ 
(%i2) bar: bb$
(%i3) baz: cc$
(%i4) put (foo, bar, baz);
(%o4)                          bb
(%i5) properties (aa);
(%o5)                [[user properties, cc]]
(%i6) get (aa, cc);
(%o6)                          bb
(%i7) qput (foo, bar, baz);
(%o7)                          bar
(%i8) properties (foo);
(%o8)            [value, [user properties, baz]]
(%i9) get ('foo, 'baz);
(%o9)                          bar
@end example

@c @opencatbox
@c @category{Declarations and inferences}
@c @closecatbox
@end deffn

@c CROSS REF TO OTHER FUNCTIONS WHICH PUT/GET PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c HOW DOES THIS INTERACT WITH declare OR OTHER PROPERTY-ESTABLISHING FUNCTIONS ??
@c HOW IS THIS DIFFERENT FROM remove ??

@c -----------------------------------------------------------------------------
@deffn {Function} rem (@var{atom}, @var{indicator})
Removes the property indicated by @var{indicator} from @var{atom}.

@c @opencatbox
@c @category{Declarations and inferences}
@c @closecatbox
@end deffn

@c CROSS REF TO OTHER FUNCTIONS WHICH PUT/GET PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c HOW DOES THIS INTERACT WITH declare OR OTHER PROPERTY-ESTABLISHING FUNCTIONS ??
@c HOW IS THIS DIFFERENT FROM rem ??

@c -----------------------------------------------------------------------------
@deffn  {Function} remove (@var{a_1}, @var{p_1}, ..., @var{a_n}, @var{p_n})
@deffnx {Function} remove ([@var{a_1}, ..., @var{a_m}], [@var{p_1}, ..., @var{p_n}], ...)
@deffnx {Function} remove ("@var{a}", operator)
@deffnx {Function} remove (@var{a}, transfun)
@deffnx {Function} remove (all, @var{p})

Removes properties associated with atoms.

@code{remove (@var{a_1}, @var{p_1}, ..., @var{a_n}, @var{p_n})}
removes property @code{p_k} from atom @code{a_k}.

@code{remove ([@var{a_1}, ..., @var{a_m}], [@var{p_1}, ..., @var{p_n}], ...)}
removes properties @code{@var{p_1}, ..., @var{p_n}}
from atoms @var{a_1}, ..., @var{a_m}.
There may be more than one pair of lists.

@c VERIFY THAT THIS WORKS AS ADVERTISED
@code{remove (all, @var{p})} removes the property @var{p} from all atoms which have it.

@c SHOULD REFER TO A LIST OF ALL SYSTEM-DEFINED PROPERTIES HERE.
The removed properties may be system-defined properties such as
@code{function}, @code{macro}, or @code{mode_declare}, or user-defined properties.

@c VERIFY THAT THIS WORKS AS ADVERTISED
@c IS transfun PECULIAR TO remove ?? IF SO, SHOW SPECIAL CASE AS @defunx
A property may be @code{transfun} to remove
the translated Lisp version of a function.
After executing this, the Maxima version of the function is executed
rather than the translated version.

@code{remove ("@var{a}", operator)} or, equivalently, @code{remove ("@var{a}", op)}
removes from @var{a} the operator properties declared by
@code{prefix}, @code{infix}, @code{nary}, @code{postfix}, @code{matchfix}, or @code{nofix}.
Note that the name of the operator must be written as a quoted string.

@code{remove} always returns @code{done} whether or not an atom has a specified property.
This behavior is unlike the more specific remove functions
@code{remvalue}, @code{remarray}, @code{remfunction}, and @code{remrule}.

@c IN SERIOUS NEED OF EXAMPLES HERE
@c @opencatbox
@c @category{Declarations and inferences}
@c @closecatbox
@end deffn

@c NEEDS EXAMPLES

@c -----------------------------------------------------------------------------
@deffn  {Function} remvalue (@var{name_1}, ..., @var{name_n})
@deffnx {Function} remvalue (all)
Removes the values of user variables @var{name_1}, ..., @var{name_n}
(which can be subscripted) from the system.

@code{remvalue (all)} removes the values of all variables in @code{values},
the list of all variables given names by the user
(as opposed to those which are automatically assigned by Maxima).

See also @code{values}.

@c @opencatbox
@c @category{Evaluation}
@c @closecatbox
@end deffn

@c NEEDS EXAMPLES

@c -----------------------------------------------------------------------------
@deffn {Function} rncombine (@var{expr})
Transforms @var{expr} by combining all terms of @var{expr} that have
identical denominators or denominators that differ from each other by
numerical factors only.  This is slightly different from the behavior
of @code{combine}, which collects terms that have identical denominators.

Setting @code{pfeformat: true} and using @code{combine} yields results similar
to those that can be obtained with @code{rncombine}, but @code{rncombine} takes the
additional step of cross-multiplying numerical denominator factors.
This results in neater forms, and the possibility of recognizing some
cancellations.

@code{load(rncomb)} loads this function.

@c @opencatbox
@c @category{Expressions}
@c @closecatbox
@end deffn

@c NEEDS CLARIFICATION AND EXAMPLES

@c -----------------------------------------------------------------------------
@deffn {Function} scalarp (@var{expr})
Returns @code{true} if @var{expr} is a number, constant, or variable
declared @code{scalar} with @code{declare}, or composed entirely of numbers, constants, and such
variables, but not containing matrices or lists.

@c @opencatbox
@c @category{Predicate functions} @category{Vectors} @category{Matrices}
@c @closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@deffn {Function} setup_autoload (@var{filename}, @var{function_1}, ..., @var{function_n})
Specifies that
if any of @var{function_1}, ..., @var{function_n} are referenced and not yet defined,
@var{filename} is loaded via @code{load}.
@var{filename} usually contains definitions for the functions specified,
although that is not enforced.

@code{setup_autoload} does not work for array functions.

@code{setup_autoload} quotes its arguments.

Example:

@c EXAMPLE GENERATED FROM FOLLOWING INPUT
@c legendre_p (1, %pi);
@c setup_autoload ("specfun.mac", legendre_p, ultraspherical);
@c ultraspherical (2, 1/2, %pi);
@c legendre_p (1, %pi);
@c legendre_q (1, %pi);
@example
(%i1) legendre_p (1, %pi);
(%o1)                  legendre_p(1, %pi)
(%i2) setup_autoload ("specfun.mac", legendre_p, ultraspherical);
(%o2)                         done
(%i3) ultraspherical (2, 1/2, %pi);
Warning - you are redefining the Macsyma function ultraspherical
Warning - you are redefining the Macsyma function legendre_p
                            2
                 3 (%pi - 1)
(%o3)            ------------ + 3 (%pi - 1) + 1
                      2
(%i4) legendre_p (1, %pi);
(%o4)                          %pi
(%i5) legendre_q (1, %pi);
                              %pi + 1
                      %pi log(-------)
                              1 - %pi
(%o5)                 ---------------- - 1
                             2
@end example

@c @opencatbox
@c @category{Function definition} @category{File input}
@c @closecatbox
@end deffn

@c RECOMMEND CUTTING THIS ITEM AND CUTTING $tcl_output IN src/plot.lisp
@c THIS REALLY, REALLY SEEMS LIKE CRUFT:
@c $tcl_output IS NEVER CALLED WITHIN MAXIMA SOURCE,
@c AND THIS EXTREMELY NARROW, LIMITED FUNCTIONALITY ISN'T USEFUL TO USERS
@c AND IT'S BROKEN: INCORRECT OUTPUT FOR CLISP, DIES ON GCL

@c --- 28.08.2010 --------------------------------------------------------------
@deffn  {Function} tcl_output (@var{list}, @var{i0}, @var{skip})
@deffnx {Function} tcl_output (@var{list}, @var{i0})
@deffnx {Function} tcl_output ([@var{list_1}, ..., @var{list_n}], @var{i})

Prints elements of a list enclosed by curly braces @code{@{ @}}, suitable as 
part of a program in the Tcl/Tk language.

@code{tcl_output (@var{list}, @var{i0}, @var{skip})} prints @var{list}, 
beginning with element @var{i0} and printing elements 
@code{@var{i0} + @var{skip}}, @code{@var{i0} + 2 @var{skip}}, etc.

@code{tcl_output (@var{list}, @var{i0})} is equivalent to 
@code{tcl_output (@var{list}, @var{i0}, 2)}.

@code{tcl_output ([@var{list_1}, ..., @var{list_n}], @var{i})} prints the 
@var{i}'th elements of @var{list_1}, ..., @var{list_n}.

Examples:

@c EXAMPLE INPUT
@c tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$
@c tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$
@c tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$
@c tcl_output ([x1, y1, x2, y2, x3, y3], 2)$
@c tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

@c EXAMPLE OUTPUT: CLISP
@c OUTPUT IS OK FOR FIRST TWO, BROKEN FOR OTHERS
@c GCL OUTPUT: SAME FOR FIRST TWO
@c GCL FAILS ON OTHERS (IN EACH CASE COMPLAINING ELEMENTS ARE "not of type 
@c (OR RATIONAL LISP:FLOAT)"

@example
(%i1) tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$

 @{1.000000000     4.000000000     
 @}
(%i2) tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$

 @{2.000000000     5.000000000     
 @}
(%i3) tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$

 @{((RAT SIMP) 3 7) ((RAT SIMP) 11 13) 
 @}
(%i4) tcl_output ([x1, y1, x2, y2, x3, y3], 2)$

 @{$Y1 $Y2 $Y3 
 @}
(%i5) tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

 @{SIMP 1.000000000     11.00000000     
 @}
@end example
@end deffn

@c --- End of Miscellaneous.texi -----------------------------------------------

