@c end concepts Number Theory
@menu
* Definitions for Number Theory::  
@end menu

@node Definitions for Number Theory,  , Number Theory, Number Theory
@section Definitions for Number Theory

@defun bern (n)
Returns the @var{n}'th Bernoulli number for integer @code{n}.
@c WELL, ACTUALLY bern SIMPLIFIES, LIKE FACTORIAL -- DO WE WANT TO GET INTO THAT ???
@c OR JUST PRETEND IT'S "RETURNED" ???
Bernoulli numbers equal to zero are suppressed if @code{zerobern} is @code{false}.

See also @code{burn}.

@example
(%i1) zerobern: true$
(%i2) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                  1  1       1      1        1
(%o2)       [1, - -, -, 0, - --, 0, --, 0, - --]
                  2  6       30     42       30
(%i3) zerobern: false$
(%i4) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
            1  1    1   5     691   7    3617  43867
(%o4) [1, - -, -, - --, --, - ----, -, - ----, -----]
            2  6    30  66    2730  6    510    798
@end example

@end defun

@defun bernpoly (v, n)
Returns the @var{n}'th Bernoulli polynomial in the
variable @var{v}.

@end defun

@defun bfzeta (s, n)
Returns the Riemann zeta function for the argument @var{s}.
The return value is a big float (bfloat);
@var{n} is the number of digits in the return value.

@code{load ("bffac")} loads this function.

@end defun

@defun bfhzeta (s, h, n)
Returns the Hurwitz zeta function for the arguments @var{s} and @var{h}.
The return value is a big float (bfloat);
@var{n} is the number of digits in the return value.

The Hurwitz zeta function is defined as
@example
sum ((k+h)^-s, k, 0, inf)
@end example

@code{load ("bffac")} loads this function.

@end defun

@defun binomial (x, y)
The binomial coefficient @code{(x + y)!/(x! y!)}.
If @code{x} and @code{y} are integers, then the numerical value of the binomial
coefficient is computed.
If @code{y}, or @code{x - y}, is an integer,
the binomial coefficient is expressed as a polynomial.

@end defun

@defun burn (n)
Returns the @var{n}'th Bernoulli number for integer @code{n}.
@code{burn} may be more efficient than @code{bern} for large, isolated @code{n},
as @code{bern} computes all the Bernoulli numbers up to index @code{n} before returning.

@c STATEMENTS ABOUT TIMING NEED VERIFICATION !!!
@c (BERN(402) takes about 645 secs vs 13.5 secs for BURN(402).
@c The time to compute @code{bern} is approximately exponential,
@c while the time to compute @code{burn} is approximately cubic.
@c But if next you do BERN(404), it only takes 12 secs,
@c since BERN remembers all in an array, whereas BURN(404) will take
@c maybe 14 secs or maybe 25, depending on whether Maxima needs to
@c BFLOAT a better value of %PI.)

@code{burn} exploits the observation that (rational) Bernoulli numbers can be
approximated by (transcendental) zetas with tolerable efficiency.

@code{load ("bffac")} loads this function.

@end defun

@defun cf (expr)
Converts @var{expr} into a continued fraction.
@var{expr} is an expression
comprising continued fractions and square roots of integers.
Operands in the expression may be combined with arithmetic operators.
Aside from continued fractions and square roots,
factors in the expression must be integer or rational numbers.
Maxima does not know about operations on continued fractions outside of @code{cf}.

@code{cf} evaluates its arguments after binding @code{listarith} to @code{false}.
@code{cf} returns a continued fraction, represented as a list.

A continued fraction @code{a + 1/(b + 1/(c + ...))}
is represented by the list @code{[a, b, c, ...]}.
The list elements @code{a}, @code{b}, @code{c}, ... must evaluate to integers.
@var{expr} may also contain @code{sqrt (n)} where @code{n} is an integer.
In this case @code{cf} will give as many
terms of the continued fraction as the value of the variable
@code{cflength} times the period.

A continued fraction can be evaluated to a number
by evaluating the arithmetic representation
returned by @code{cfdisrep}.
See also @code{cfexpand} for another way to evaluate a continued fraction.

See also @code{cfdisrep}, @code{cfexpand}, and @code{cflength}.

Examples:

@itemize @bullet
@item
@var{expr} is an expression comprising continued fractions and square roots of integers.

@example
(%i1) cf ([5, 3, 1]*[11, 9, 7] + [3, 7]/[4, 3, 2]);
(%o1)               [59, 17, 2, 1, 1, 1, 27]
(%i2) cf ((3/17)*[1, -2, 5]/sqrt(11) + (8/13));
(%o2)        [0, 1, 1, 1, 3, 2, 1, 4, 1, 9, 1, 9, 2]
@end example

@item
@code{cflength} controls how many periods of the continued fraction
are computed for algebraic, irrational numbers.

@example
(%i1) cflength: 1$
(%i2) cf ((1 + sqrt(5))/2);
(%o2)                    [1, 1, 1, 1, 2]
(%i3) cflength: 2$
(%i4) cf ((1 + sqrt(5))/2);
(%o4)               [1, 1, 1, 1, 1, 1, 1, 2]
(%i5) cflength: 3$
(%i6) cf ((1 + sqrt(5))/2);
(%o6)           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]
@end example

@item
A continued fraction can be evaluated by evaluating the arithmetic representation
returned by @code{cfdisrep}.

@example
(%i1) cflength: 3$
(%i2) cfdisrep (cf (sqrt (3)))$
(%i3) ev (%, numer);
(%o3)                   1.731707317073171
@end example

@item
Maxima does not know about operations on continued fractions outside of @code{cf}.

@example
(%i1) cf ([1,1,1,1,1,2] * 3);
(%o1)                     [4, 1, 5, 2]
(%i2) cf ([1,1,1,1,1,2]) * 3;
(%o2)                  [3, 3, 3, 3, 3, 6]
@end example

@end itemize
@end defun

@defun cfdisrep (list)
Constructs and returns an ordinary arithmetic expression
of the form @code{a + 1/(b + 1/(c + ...))}
from the list representation of a continued fraction @code{[a, b, c, ...]}.

@example
(%i1) cf ([1, 2, -3] + [1, -2, 1]);
(%o1)                     [1, 1, 1, 2]
(%i2) cfdisrep (%);
                                  1
(%o2)                     1 + ---------
                                    1
                              1 + -----
                                      1
                                  1 + -
                                      2
@end example

@end defun

@defun cfexpand (x)
Returns a matrix of the numerators and denominators of the
last (column 1) and next-to-last (column 2) convergents of the continued fraction @code{x}.

@example
(%i1) cf (rat (ev (%pi, numer)));

`rat' replaced 3.141592653589793 by 103993//33102 = 3.141592653011902
(%o1)                  [3, 7, 15, 1, 292]
(%i2) cfexpand (%); 
                         [ 103993  355 ]
(%o2)                    [             ]
                         [ 33102   113 ]
(%i3) %[1,1]/%[2,1], numer;
(%o3)                   3.141592653011902
@end example

@end defun

@defvar cflength
Default value: 1

@code{cflength} controls the number of terms of the continued
fraction the function @code{cf} will give, as the value @code{cflength} times the
period.  Thus the default is to give one period.

@example
(%i1) cflength: 1$
(%i2) cf ((1 + sqrt(5))/2);
(%o2)                    [1, 1, 1, 1, 2]
(%i3) cflength: 2$
(%i4) cf ((1 + sqrt(5))/2);
(%o4)               [1, 1, 1, 1, 1, 1, 1, 2]
(%i5) cflength: 3$
(%i6) cf ((1 + sqrt(5))/2);
(%o6)           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]
@end example

@end defvar

@defun divsum (n, k)
adds up all the factors of n raised to the kth power.  If
only one argument is given then k is assumed to be 1.

@end defun

@defun euler (x)
gives the Xth Euler number for integer X.  For the
Euler-Mascheroni constant, see %GAMMA.

@end defun

@defun factorial (x)
The factorial function. Maxima treats @code{factorial (x)} the same as @code{x!}.
See @code{!}.

@end defun

@defun fib (x)
the Xth Fibonacci number with FIB(0)=0, FIB(1)=1, and
FIB(-N)=(-1)^(N+1) *FIB(N).  PREVFIB is FIB(X-1), the Fibonacci number
preceding the last one computed.

@end defun

@defun fibtophi (expr)
converts FIB(n) to its closed form definition.
This involves the constant %PHI (= (SQRT(5)+1)/2 = 1.618033989).
If you want the Rational Function Package to know 
About %PHI do TELLRAT(%PHI^2-%PHI-1)$  ALGEBRAIC:TRUE$ .

@end defun

@defun inrt (x, n)
takes two integer arguments, X and n, and returns the
integer nth root of the absolute value of X.

@end defun

@defun jacobi (p, q)
is the Jacobi symbol of p and q.

@end defun

@defun lcm (expr_1, expr_2, expr_3, ...)
returns the Least Common Multiple of its arguments.
Do LOAD(FUNCTS); to access this function.

@end defun

@defvar maxprime
 default: [489318] - the largest number which may be given to
the PRIME(n) command, which returns the nth prime.

@end defvar

@defun minfactorial (expr)
examines exp for occurrences of two factorials
which differ by an integer.  It then turns one into a polynomial times
the other.  If exp involves binomial coefficients then they will be
converted into ratios of factorials.
@example
(%i1) N!/(N+1)!;
                                    N!
(%o1)                             --------
                                 (N + 1)!
(%i2) MINFACTORIAL(%);
                                     1
(%o2)                               -----
                                   N + 1


@end example
@end defun

@defun partfrac (expr, var)
expands the expression exp in partial fractions
with respect to the main variable, var.  PARTFRAC does a complete
partial fraction decomposition.  The algorithm employed is based on
the fact that the denominators of the partial fraction expansion (the
factors of the original denominator) are relatively prime.  The
numerators can be written as linear combinations of denominators, and
the expansion falls out.  See EXAMPLE(PARTFRAC); for examples.

@end defun

@defun prime (n)
gives the nth prime. MAXPRIME[489318] is the largest number
accepted as argument.  Note:  The PRIME command does not work in
Maxima, since it required a large file of primes, which most users
do not want.    PRIMEP does work however.

@end defun

@defun primep (n)
returns TRUE if n is a prime, FALSE if not.

@end defun

@defun qunit (n)
gives the principal unit of the real quadratic number field
SQRT(n) where n is an integer, i.e.  the element whose norm is unity.
This amounts to solving Pell's equation A**2- n*B**2=1.
@example
(%i1) QUNIT(17);
(%o1)              SQRT(17)+4
(%i2)  EXPAND(%*(SQRT(17)-4));
(%o2)               1


@end example
@end defun

@defun totient (n)
is the number of integers less than or equal to n which
are relatively prime to n.

@end defun

@defvar zerobern
 default: [TRUE] - if set to FALSE excludes the zero
BERNOULLI numbers.  (See the BERN function.)

@end defvar

@defun zeta (x)
gives the Riemann zeta function for certain integer values
of X.

@end defun

@defvar zeta%pi
 default: [TRUE] - if FALSE, suppresses ZETA(n) giving
coeff*%PI^n for n even.

@end defvar
