@menu
* Introduction to Help::        
* Lisp and Maxima::            
* Garbage Collection::          
* Documentation::               
* Definitions for Help::        
@end menu

@node Introduction to Help, Lisp and Maxima, Help, Help
@section Introduction to Help

The most useful online help command is DESCRIBE which obtains help
on all commands containing a particular string.  Here by command we
mean a built in operator such as INTEGRATE or FACTOR etc.   As a typing
short cut you may type @code{? fact} in lieu of @code{describe("fact")}
@example
(%i3) ? inte;


 0: (maxima.info)Integration.
 1: Introduction to Integration.
 2: Definitions for Integration.
 3: INTERRUPTS.
 4: ASKINTEGER :Definitions for Simplification.
 5: DISPLAY_FORMAT_INTERNAL :Definitions for Input and Output.
 6: INTEGERP :Definitions for Miscellaneous Options.
 7: INTEGRATE :Definitions for Integration.
 8: INTEGRATION_CONSTANT_COUNTER :Definitions for Integration.
 9: INTERPOLATE :Definitions for Numerical.
Enter n, all, none, or multiple choices eg 1 3 : 7 8;

Info from file /d/linux2/local/share/info/maxima.info:
 - Function: INTEGRATE (EXP, VAR)
     integrates exp with respect to var or returns an integral
     expression (the noun form) if it cannot perform the integration
     (see note 1 below).  Roughly speaking three stages are used:
...
@end example
In the above the user said he wanted items 7 and 8.  Note the @code{;}
following the two numbers.  He might have typed @code{all} to
see help on all the items.

@node Lisp and Maxima, Garbage Collection, Introduction to Help, Help
@section Lisp and Maxima
 All of Maxima is of course written in Lisp.  There is
a naming convention for functions and variables:  All symbols which
begin with a "$" sign at Lisp level, are read with the "$" sign stripped
off at Maxima level.  For example, there are two Lisp functions
TRANSLATE and $TRANSLATE.   If at Maxima level you enter
TRANSLATE(FOO); the function which is called is the $translate function.
To access the other function you must prefix with a "?".   Note you
may @i{not} put a space after the @code{?} since that would indicate
you were looking for help!   

@example
(%i1) ?TRANSLATE(FOO); 
@end example

Of course, this may well not do what you wanted it to do since it is a
completely different function.

To enter a Lisp command you may use
@example
(%i1) :lisp (foo 1 2)
@end example
or to get a Lisp prompt use @code{to_lisp();}, or alternately type
@code{Ctrl-c} to enter into a debug break.
This will cause a Lisp break loop to be entered.  You
could now evaluate $%o2
and view the value of the line label %o2, in its internal Lisp
format.   Typing @code{:q} will quit to top level, if you are in
a debug break.  If you had exited Maxima with @code{to_lisp();}
then you should type
@example
MAXIMA>(run)
@end example
at the Lisp prompt, to restart the Maxima session.

If you intend to write Lisp functions to be called at Maxima
level you should name them by names beginning with a "$".   Note
that all symbols typed at Lisp level are automatically read in
upper case, unless you do something like @code{|$odeSolve|} to
force the case to be respected.   Maxima interprets symbols
as mixed case, if the symbol has already been read before
or at the time it was first read there
was not an already existing symbol with the same letters but upper
case only.   Thus if you type
@example
(%i1) Integrate;
(%o1) INTEGRATE
(%i2) Integ;
(%o2) Integ
@end example
The symbol @code{Integrate} already existed in upper case since it
is a Maxima primitive, but INTEG, does not already exist, so the Integ
is permitted.   This may seem a little bizarre, but we wish to keep
old Maxima code working, which assumes that Maxima primitives may
be in upper or lower case.   An advantage of this system is that if
you type in lower case, you will immediately see which are the Maxima
keywords and functions.

To enter Maxima forms at Lisp level, you may use the @code{#$} macro.
@example
                          (setq $foo #$[x,y]$)
@end example

This will have the same effect as entering
@example

(%i1)FOO:[X,Y];
@end example
@noindent

except that foo will not appear in the VALUES list.  In order to view
foo in Maxima printed format you may type

@example
(displa $foo)
@end example

In this documentation when we wish to refer to a Maxima symbol we
shall generally omit the $ just as you would when typing at Maxima level.
This will cause confusion when we also wish to refer to a Lisp symbol.
In this case we shall usually try to use lower case for the Lisp symbol
and upper case for the Maxima symbol.  For example LIST for $list and
list for the Lisp symbol whose printname is "list".

Since functions defined using the Maxima language are not ordinary
Lisp functions, you must use mfuncall to call them.
For example:

@example
(%o2)                        FOO(X, Y) := X + Y + 3
@end example
@noindent

then at Lisp level

@example
CL-MAXIMA>>(mfuncall '$foo 4 5)
12
@end example

A number of Lisp functions are shadowed in the Maxima package.  This is
because their use within Maxima is not compatible with the definition as
a system function.  For example typep behaves differently in Common Lisp
than it did in Maclisp.  If you want to refer to the Zeta Lisp typep
while in the Maxima package you should use global:typep (or cl:typep for
Common Lisp).  Thus

@example

  (macsyma:typep '(1 2)) ==> 'list
  (lisp:typep '(1 2))==> error (lisp:type-of '(1 2))==> 'cons

@end example

To see which symbols are shadowed look in "src/maxima-package.lisp" or
do a describe of the package at Lisp level.


@node Garbage Collection, Documentation, Lisp and Maxima, Help
@section Garbage Collection
 Symbolic computation tends to create a good deal
of garbage, and effective handling of this can be crucial to successful
completion of some programs.

Under GCL, on UNIX systems where the mprotect system call is available
(including SUN OS 4.0 and some variants of BSD) a stratified garbage collection
is available.   This limits the collection to pages which have been recently
written to.    See the GCL documentation under ALLOCATE and GBC.   At the
Lisp level doing (setq si::*notify-gbc* t) will help you determine which
areas might need more space.

@node Documentation, Definitions for Help, Garbage Collection, Help
@section Documentation

The source for the documentation is in @file{.texi} texinfo format.
From this format we can produce the info files used by the online
commands @code{? } and @code{describe}.   Also @code{html} and @code{pdf}
files can be produced.

Additionally there are examples so that you may do
@example
example(integrate);
(%i4) example(integrate);
(%i5) test(f):=BLOCK([u],u:INTEGRATE(f,x),RATSIMP(f-DIFF(u,x)));
(%o5) test(f) := BLOCK([u], u :
         INTEGRATE(f, x), RATSIMP(f - DIFF(u, x)));
(%i6) test(SIN(x));
(%o6) 						       0
(%i7) test(1/(x+1));
(%o7) 						       0
(%i8) test(1/(x^2+1));
(%o8) 						       0
(%i9) INTEGRATE(SIN(X)^3,X);
 
@end example


@node Definitions for Help,  , Documentation, Help
@section Definitions for Help
@c @node DEMO
@c @unnumberedsec phony
@defun DEMO (file)
this is the same as BATCH but pauses after each command
line and continues when a space is typed (you may need to type
@code{;} followed by a newline, if running under xmaxima).   The demo
files have suffix @code{.dem}

@end defun
@c @node DESCRIBE
@c @unnumberedsec phony
@defun DESCRIBE (cmd)

This command prints documentation on all commands which contain
the substring "cmd".   Thus
@example
(%i1) describe("integ");
 0: (maxima.info)Integration.
 1: Introduction to Integration.
 2: Definitions for Integration.
 3: ASKINTEGER :Definitions for Simplification.
..
Enter n, all, none, or multiple choices eg 1 3 : 2 3;
Info from file /d/linux2/local/share/info/maxima.info:
Definitions for Integration
===========================

 - Function: CHANGEVAR (EXP,F(X,Y),Y,X)
...
@end example
@pxref{Introduction to Help}


@end defun
@c @node EXAMPLE
@c @unnumberedsec phony
@defun EXAMPLE (command)
will start up a demonstration of how command works
on some expressions.  After each command line it will pause and wait
for a space to be typed, as in the DEMO command.

The name of the file containing the examples is given by the
variable manual_demo, which defaults to "manual.demo".

@end defun

