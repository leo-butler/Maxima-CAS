@menu
* Definitions for Plotting::    
@end menu

@node Definitions for Plotting,  , Plotting, Plotting
@section Definitions for Plotting

@c INSPECTING src/plot.lisp AND TRYING SOME EXAMPLES,
@c IT APPEARS THAT in_netmath HAS NO EFFECT ON plot2d
@c AND ONLY EFFECT ON plot3d IS TO CAUSE OPENMATH OUTPUT TO BE WRITTEN TO CONSOLE
@c WHEN [plot_format, openmath] IS SET.
@c NOT CONVINCED WE REALLY WANT TO DOCUMENT THIS VARIABLE
@defvr {Option variable} in_netmath
Default value: @code{false}

When @code{in_netmath} is @code{true},
@code{plot3d} prints OpenMath output to the console if @code{plot_format} is @code{openmath};
otherwise @code{in_netmath} (even if @code{true}) has no effect.

@code{in_netmath} has no effect on @code{plot2d}.

@end defvr

@c THIS DESCRIPTION IS IN NEED OF HEAVY REVISION (BUT ONLY IF OPENPLOT IS STILL SUPPORTED)
@deffn {Function} openplot_curves (@var{list}, @var{rest_options})
Takes a list of curves such as
@example
[[x1, y1, x2, y2, ...], [u1, v1, u2, v2, ...], ..]
@end example
or 
@example
[[[x1, y1], [x2, y2], ...], ...]
@end example
and plots them.  This is similar to xgraph_curves, but uses the
open plot routines.
Addtional symbol arguments may be given such as
@code{"@{xrange -3 4@}"}
The following plots two curves, using big points, labeling the first one
@code{jim} and the second one @code{jane}.   
@example
openplot_curves ([["@{plotpoints 1@} @{pointsize 6@} @{label jim@}
      @{xaxislabel @{joe is nice@}@}"], [1, 2, 3, 4, 5, 6, 7, 8],
      ["@{label jane@} @{color pink @}"], [3, 1, 4, 2, 5, 7]]);
@end example

Some other special keywords are @code{xfun}, @code{color}, @code{plotpoints}, @code{linecolors},
@code{pointsize}, @code{nolines}, @code{bargraph}, @code{labelposition}, @code{xaxislabel}, and
@code{yaxislabel}.

@end deffn



@deffn {Function} plot2d (@var{expr}, @var{range}, ..., @var{options}, ...)
@deffnx {Function} plot2d (@var{parametric_expr})
@deffnx {Function} plot2d (@var{discrete_expr})
@deffnx {Function} plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range}, @var{y_range})
@deffnx {Function} plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range})
@deffnx {Function} plot2d (@var{expr}, @var{x_range}, @var{y_range})
@deffnx {Function} plot2d (@var{expr}, @var{x_range})
@deffnx {Function} plot2d ([@var{name_1}, ..., @var{name_n}], @var{x_range}, @var{y_range})
@deffnx {Function} plot2d ([@var{name_1}, ..., @var{name_n}], @var{x_range})
@deffnx {Function} plot2d (@var{name}, @var{x_range}, @var{y_range})
@deffnx {Function} plot2d (@var{name}, @var{x_range})
@c TOO LONG !!! (TICKLES CL-INFO BUG)
@c @defunx plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range}, ..., @var{options}, ...)
@c TOO LONG !!! (TICKLES CL-INFO BUG)
@c @defunx plot2d ([..., @var{expr}, ..., @var{parametric_expr}, ...], @var{x_range}, ..., @var{options})

Displays a plot of one or more expressions
as a function of one variable.

In all cases, @var{expr}
is an expression to be plotted on the vertical axis as
a function of one variable.
@var{x_range}, the range of the horizontal axis,
is a list of the form @code{[@var{variable}, @var{min}, @var{max}]},
where @var{variable} is a variable which appears in @var{expr}.
@var{y_range}, the range of the vertical axis,
is a list of the form @code{[y, @var{min}, @var{max}]}.

@code{plot2d (@var{expr}, @var{x_range})}
plots @var{expr} as a function of the variable named in @var{x_range},
over the range specified in @var{x_range}.
If the vertical range is not otherwise specified by @code{set_plot_option},
it is chosen automatically.
All options are assumed to have default values unless otherwise specified by @code{set_plot_option}.

@code{plot2d (@var{expr}, @var{x_range}, @var{y_range})}
plots @var{expr} as a function of the variable named in @var{x_range},
over the range specified in @var{x_range}.
The vertical range is set to @var{y_range}.
All options are assumed to have default values unless otherwise specified by @code{set_plot_option}.

@code{plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range})}
plots @var{expr_1}, ..., @var{expr_n} as a function of the variable named in @var{x_range},
over the range specified in @var{x_range}.
If the vertical range is not otherwise specified by @code{set_plot_option},
it is chosen automatically.
All options are assumed to have default values unless otherwise specified by @code{set_plot_option}.

@code{plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range}, @var{y_range})}
plots @var{expr_1}, ..., @var{expr_n} as a function of the variable named in @var{x_range},
over the range specified in @var{x_range}.
The vertical range is set to @var{y_range}.
All options are assumed to have default values unless otherwise specified by @code{set_plot_option}.

When the function to be plotted is a function defined in Maxima by @code{:=} or @code{define},
or in Lisp by DEFUN or DEFMFUN,
the function can be specified by name.
Functions defined in Lisp by DEFMSPEC, and simplifying functions,
cannot be specified by name;
that includes many built-in functions.
@c REPORTED AS SF BUG # 1385271

@c PUT EXAMPLES FOR PRECEDING SIMPLE FORMS OF plot2d HERE
Examples:

Plotting an expression, and setting some commonly-used parameters.

@example
(%i1) plot2d (sin(x), [x, -5, 5])$
(%i2) plot2d (sec(x), [x, -2, 2], [y, -20, 20], [nticks, 200])$
@end example

Plotting functions by name.

@c ===beg===
@c F(x) := x^2 $
@c :lisp (defun |$g| (x) (m* x x x))
@c H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $
@c plot2d (F, [u, -1, 1])$
@c plot2d ([F, G, H], [u, -1, 1])$
@c ===end===
@example
(%i1) F(x) := x^2 $

(%i2) :lisp (defun |$g| (x) (m* x x x))

$g
(%i2) H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $

(%i3) plot2d (F, [u, -1, 1])$

(%i4) plot2d ([F, G, H], [u, -1, 1])$
@end example

Anywhere there may be an ordinary expression, there may be a parametric expression: 
@var{parametric_expr} is a list of the form
@code{[parametric, @var{x_expr}, @var{y_expr}, @var{t_range}, @var{options}]}.
Here @var{x_expr} and @var{y_expr} are expressions of 1 variable @var{var} which is
the first element of the range @var{trange}.  
The plot is of the path traced out by the pair
@code{[@var{x_expr}, @var{y_expr}]} as @var{var} varies in @var{trange}.

In the following example, we plot a circle, then we do
the plot with only a few points used, so that we get a star,
and finally we plot this together with an ordinary function of X.

Examples:
@c PUT PARAMETRIC EXAMPLES HERE

@itemize @bullet
@item
Plot a circle with a parametric plot.
@example
(%i1) plot2d ([parametric, cos(t), sin(t), [t, -%pi*2, %pi*2],
        [nticks, 80]])$
@end example
@item 
Plot a star: join eight points on the circumference of a circle.
@example
(%i2) plot2d ([parametric, cos(t), sin(t), [t, -%pi*2, %pi*2],
        [nticks, 8]])$
@end example
@item
Plot a cubic polynomial with an ordinary plot and a circle with a parametric plot.
@example
(%i3) plot2d ([x^3 + 2, [parametric, cos(t), sin(t), [t, -5, 5],
        [nticks, 80]]], [x, -3, 3])$
@end example
@end itemize

Discrete expressions may also be used instead or ordinary or
parametric expressions:
@var{discrete_expr} is a list of the form
@code{[discrete, @var{x_list}, @var{y_list}]}
or
@code{[discrete, @var{xy_list}]},
where @var{xy_list} is a list of @code{[@var{x},@var{y}]} pairs.

Examples:
@c PUT DISCRETE EXAMPLES HERE

@itemize @bullet
@item
Create some lists.
@example
(%i1) xx:makelist(x,x,0,10)$
(%i2) yy:makelist(exp(-x*1.0),x,0,10)$
(%i3) xy:makelist([x,x*x],x,0,5)$
@end example

@item
Plot with line segments.
@example
(%i4) plot2d([discrete,xx,yy])$
@end example

@item
Plot with line segments, using a list of pairs.
@example
(%i5) plot2d([discrete,xy])$
@end example

@item
Plot with points.
@example
(%i6) plot2d([discrete,xx,yy],[gnuplot_curve_styles,["with points"]])$
@end example

@item
Plot the curve @code{cos(@var{x})} using lines and (@var{xx},@var{yy})
using points.
@example
plot2d([cos(x),[discrete,xx,yy]],[x,0,10],[gnuplot_curve_styles,["with lines","with points pointsize 3"]])$
@end example
@end itemize

See also @code{plot_options}, which describes plotting options and has more examples.

@end deffn

@deffn {Function} xgraph_curves (@var{list})
graphs the list of `point sets' given in list by using xgraph.

A point set may be of the form

@example
[x0, y0, x1, y1, x2, y2, ...]
@end example
or
@example
[[x0, y0], [x1, y1], ...]
@end example
A point set may also contain symbols which give labels or other
information.

@example
xgraph_curves ([pt_set1, pt_set2, pt_set3]);
@end example

graph the three point sets as three curves.

@example
pt_set: append (["NoLines: True", "LargePixels: true"], [x0, y0, x1, y1, ...]);
@end example

@noindent
would make the point set [and subsequent ones], have  
no lines between points, and to use large pixels.
See the man page on xgraph for more options to specify.

@example
pt_set: append ([concat ("\"", "x^2+y")], [x0, y0, x1, y1, ...]);
@end example

@noindent
would make there be a "label" of "x^2+y" for this particular
point set.    The @code{"} at the beginning is what tells
xgraph this is a label.

@example
pt_set: append ([concat ("TitleText: Sample Data")], [x0, ...])$
@end example

@noindent
would make the main title of the plot be "Sample Data" instead
of "Maxima Plot".

To make a bar graph with bars which are 0.2 units wide, and
to plot two possibly different such bar graphs:
@example
xgraph_curves ([append (["BarGraph: true", "NoLines: true", "BarWidth: .2"],
    create_list ([i - .2, i^2], i, 1, 3)),
    append (["BarGraph: true", "NoLines: true", "BarWidth: .2"],
    create_list ([i + .2, .7*i^2], i, 1, 3))]);
@end example
@noindent

A temporary file @file{xgraph-out} is used.

@end deffn



@defvr {System variable} plot_options
Elements of this list state the default options for plotting.
If an option is present in a @code{plot2d} or @code{plot3d} call,
that value takes precedence over the default option.
Otherwise, the value in @code{plot_options} is used.
Default options are assigned by @code{set_plot_option}.

Each element of @code{plot_options} is a list of two or more items.
The first item is the name of an option, and the remainder comprises the value or values
assigned to the option.
In some cases the, the assigned value is a list, which may comprise several items.

The plot options which are recognized by @code{plot2d} and @code{plot3d} are the following:

@itemize @bullet
@item
Option: @code{plot_format} determines which plotting package is used by @code{plot2d} and @code{plot3d}.

@itemize @bullet
@item
Default value: @code{gnuplot}
Gnuplot is the default, and most advanced, plotting package. It
requires an external gnuplot installation.
@item
Value: @code{mgnuplot}
Mgnuplot is a Tk-based wrapper around gnuplot. It is included in the
Maxima distribution. Mgnuplot offers a rudimentary GUI for gnuplot,
but has fewer overall features than the plain gnuplot
interface. Mgnuplot requires an external gnuplot installation and
Tcl/Tk.
@item
Value: @code{openmath}
Openmath is a Tcl/Tk GUI plotting program. It is included in the
Maxima distribution.
@item
Value: @code{ps}
Generates simple PostScript files directly from
Maxima. Much more sophisticated PostScript output can be generated from gnuplot,
by leaving the option @code{plot_format} unspecified (to accept the default),
and setting the option @code{gnuplot_term} to @code{ps}.
@end itemize

@item
Option: @code{run_viewer} controls whether or not the appropriate viewer for the plot
format should be run.

@itemize @bullet
@item
@c DOES FALSE IMPLY THE OUTPUT FILE IS GENERATED AND NOT SHOWN ?? OR IS NOTHING GENERATED ??
Default value: @code{true} Execute the viewer program.
@item
Value: @code{false} Do not execute the viewer program.
@end itemize

@item
@code{gnuplot_term} Sets the output terminal type for gnuplot.
@itemize @bullet
@item
Default value: @code{default}
Gnuplot output is displayed in a separate graphical window.

@item
Value: @code{dumb}
Gnuplot output is displayed in the Maxima console by an "ASCII art" approximation to graphics.

@item
Value: @code{ps}
Gnuplot generates commands in the PostScript page description language.
If the option
@code{gnuplot_out_file} is set to @var{filename}, gnuplot writes the PostScript commands to @var{filename}.
Otherwise, the commands are printed to the Maxima console.
@end itemize

@item
Option: @code{gnuplot_out_file} Write gnuplot output to a file.

@itemize @bullet
@item
Default value: @code{false} No output file specified.
@item
Value: @var{filename}
Example: @code{[gnuplot_out_file, "myplot.ps"]}
This example sends PostScript output to the file @code{myplot.ps} when
used in conjunction with the PostScript gnuplot terminal.
@c DOES OUTPUT FILE != FALSE IMPLY DON'T RUN THE VIEWER ??
@c WHAT HAPPENS IF OUTPUT FILE IS SPEFICIED BUT TERMINAL IS NOT PS ??
@end itemize

@item
Option: @code{x}
The default horizontal range.
@example
[x, - 3, 3]
@end example
Sets the horizontal range to [-3, 3].

@item
Option: @code{y}
The default vertical range.
@example
[y, - 3, 3]
@end example
Sets the vertical range to [-3, 3].

@item
Option: @code{t}
The default range for the parameter in parametric plots.
@example
[t, 0, 10]
@end example
Sets the parametric variable range to [0, 10].

@item
Option: @code{nticks}
Initial number of points 
used by the adaptive plotting routine.
@example
[nticks, 20]
@end example
The default for @code{nticks} is 10.

@item
Option: @code{adapt_depth}
The maximum number of splittings used by the adaptive plotting routine.
@example
[adapt_depth, 5]
@end example
The default for @code{adapt_depth} is 10.

@item
Option: @code{grid}
Sets the number of grid points to use in the x- and y-directions
for three-dimensional plotting.
@example
[grid, 50, 50]
@end example
sets the grid to 50 by 50 points. The default grid is 30 by 30.

@item
Option: @code{transform_xy}
Allows transformations to be applied to three-dimensional plots.
@example
[transform_xy, false]
@end example
The default @code{transform_xy} is @code{false}. If it is not @code{false}, it should be
the output of
@example
make_transform ([x, y, z], f1(x, y, z), f2(x, y, z), f3(x, y, z))$
@end example
The @code{polar_xy} transformation is built in. It gives the same
transformation as
@example
make_transform ([r, th, z], r*cos(th), r*sin(th), z)$
@end example

@item
Option: @code{colour_z} is specific to the @code{ps} plot format.
@example
[colour_z, true]
@end example
The default value for @code{colour_z} is @code{false}.

@item
Option: @code{view_direction}
@c REPHRASE
Specific to the @code{ps} plot format.
@example
[view_direction, 1, 1, 1]
@end example
The default @code{view_direction} is [1, 1, 1].
@end itemize

There are several plot options specific to gnuplot.
All of these options (except @code{gnuplot_pm3d}) are raw
gnuplot commands, specified as strings. Refer to the gnuplot documentation for more details.

@itemize @bullet
@item
Option: @code{gnuplot_pm3d} Controls the usage PM3D mode, which has advanced 3D
features. PM3D is only available in gnuplot versions after 3.7. The
default value for @code{gnuplot_pm3d} is @code{false}.

Example:

@example
[gnuplot_pm3d, true]
@end example

@item
Option: @code{gnuplot_preamble} Inserts gnuplot commands before the plot is
drawn. Any valid gnuplot commands may be used. Multiple commands
should be separated with a semi-colon. The example shown produces a
log scale plot. The default value for @code{gnuplot_preamble} is the empty string @code{""}.

Example:

@example
[gnuplot_preamble, "set log y"]
@end example

@item
Option: @code{gnuplot_curve_titles} Controls the titles given in the plot key. The
default value is @code{[default]}, which automatically sets the title of each
curve to the function plotted. If not @code{[default]}, @code{gnuplot_curve_titles}
should contain a list of strings,
each of which is @code{"title '@var{title_string}'"}.
(To disable the plot key, add @code{"set nokey"} to @code{gnuplot_preamble}.)

Example:

@example
[gnuplot_curve_titles, ["title 'My first function'", "title 'My second function'"]]
@end example

@item
Option: @code{gnuplot_curve_styles} A list of strings controlling the appearance
of curves, i.e., color, width, dashing, etc., to be sent to the
gnuplot plot command. The default value is
@code{["with lines 3", "with lines 1", "with lines 2", "with lines 5", "with lines 4", "with lines 6", "with lines 7"]}, which cycles through different colors. See the
gnuplot documentation for @code{plot} for more information.

Example:

@example
[gnuplot_curve_styles, ["with lines 7", "with lines 2"]]
@end example

@item
Option: @code{gnuplot_default_term_command} The gnuplot command to set the
terminal type for the default terminal. The default value is the empty string @code{""},
i.e., use gnuplot's default.

Example:

@example
[gnuplot_default_term_command, "set term x11"]
@end example

@item
Option: @code{gnuplot_dumb_term_command} The gnuplot command to set the
terminal type for the dumb terminal. The default value is @code{"set term dumb 79 22"},
which makes the text output 79 characters by 22
characters.

Example:

@example
[gnuplot_dumb_term_command, "set term dumb 132 50"]
@end example

@item
Option: @code{gnuplot_ps_term_command} The gnuplot command to set the terminal
type for the PostScript terminal. The default value is
@code{"set size 1.5, 1.5;set term postscript eps enhanced color solid 24"},
which sets the
size to 1.5 times gnuplot's default, and the font size to 24, among
other things. See the gnuplot documentation for @code{set term postscript} for more information.

Example:

@example
[gnuplot_ps_term_command, "set term postscript eps enhanced color solid 18"]
@end example

@end itemize

Examples:

@itemize @bullet
@item
Saves a plot of @code{sin(x)} to the file @code{sin.eps}.
@end itemize
@example
plot2d (sin(x), [x, 0, 2*%pi], [gnuplot_term, ps], [gnuplot_out_file, "sin.eps"])$
@end example

@itemize @bullet
@item
Uses the y option to chop off singularities and the gnuplot_preamble
option to put the key at the bottom of the plot instead of the top.
@end itemize
@example
plot2d ([gamma(x), 1/gamma(x)], [x, -4.5, 5], [y, -10, 10], [gnuplot_preamble, "set key bottom"])$
@end example

@itemize @bullet
@item
Uses a very complicated @code{gnuplot_preamble} to produce fancy x-axis labels.
(Note that the @code{gnuplot_preamble} string must be entered without any line breaks.)
@end itemize
@example
my_preamble: "set xzeroaxis; set xtics ('-2pi' -6.283, '-3pi/2' -4.712, '-pi' -3.1415, '-pi/2' -1.5708, '0' 0,'pi/2' 1.5708, 'pi' 3.1415,'3pi/2' 4.712, '2pi' 6.283)"$
plot2d ([cos(x), sin(x), tan(x), cot(x)], [x, -2*%pi, 2*%pi],
    [y, -2, 2], [gnuplot_preamble, my_preamble]);
@end example

@itemize @bullet
@item
Uses a very complicated @code{gnuplot_preamble} to produce fancy x-axis labels,
and produces PostScript
output that takes advantage of the advanced text formatting available
in gnuplot.
(Note that the @code{gnuplot_preamble} string must be entered without any line breaks.)
@end itemize
@example
my_preamble: "set xzeroaxis; set xtics ('-2@{/Symbol p@}' -6.283, '-3@{/Symbol p@}/2' -4.712, '-@{/Symbol p@}' -3.1415, '-@{/Symbol p@}/2' -1.5708, '0' 0,'@{/Symbol p@}/2' 1.5708, '@{/Symbol p@}' 3.1415,'3@{/Symbol p@}/2' 4.712, '2@{/Symbol p@}' 6.283)"$
plot2d ([cos(x), sin(x), tan(x)], [x, -2*%pi, 2*%pi], [y, -2, 2],
    [gnuplot_preamble, my_preamble], [gnuplot_term, ps], [gnuplot_out_file, "trig.eps"]);
@end example

@itemize @bullet
@item
A three-dimensional plot using the gnuplot pm3d terminal.
@end itemize
@example
plot3d (atan (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4], [grid, 50, 50], [gnuplot_pm3d, true])$
@end example

@itemize @bullet
@item
A three-dimensional plot without a mesh and with contours
projected on the bottom plane.
@end itemize
@example
my_preamble: "set pm3d at s;unset surface;set contour;set cntrparam levels 20;unset key"$
plot3d (atan (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4], [grid, 50, 50],
    [gnuplot_pm3d, true], [gnuplot_preamble, my_preamble])$
@end example

@itemize @bullet
@item
A plot where the z-axis is represented by color only.
(Note that the @code{gnuplot_preamble} string must be entered without any line breaks.)
@end itemize
@example
plot3d (cos (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
    [gnuplot_preamble, "set view map; unset surface"], [gnuplot_pm3d, true], [grid, 150, 150])$
@end example

@end defvr

@c LONG LINE TICKLES CL-INFO BUG, COMMENT OUT TIL FIXED
@c @deffnx {Function} plot3d ([@var{expr_1}, @var{expr_2}, @var{expr_3}], @var{x_range}, @var{y_range}, ..., @var{options}, ...)
@deffn {Function} plot3d (@var{expr}, @var{x_range}, @var{y_range}, ..., @var{options}, ...)
@deffnx {Function} plot3d (@var{name}, @var{x_range}, @var{y_range}, ..., @var{options}, ...)
@deffnx {Function} plot3d ([@var{expr_1}, @var{expr_2}, @var{expr_3}], @var{x_rge}, @var{y_rge})
@deffnx {Function} plot3d ([@var{name_1}, @var{name_2}, @var{name_3}], @var{x_range}, @var{y_range}, ..., @var{options}, ...)

Displays a plot of one or three expressions as functions of two variables.

@example
plot3d (2^(-u^2 + v^2), [u, -5, 5], [v, -7, 7]);
@end example

plots @code{z = 2^(-u^2+v^2)} with @code{u} and @code{v} varying in [-5,5] and
[-7,7] respectively, and with @var{u} on the x axis, and @code{v} on the y axis.

An example of the third pattern of arguments is

@example
plot3d ([cos(x)*(3 + y*cos(x/2)), sin(x)*(3 + y*cos(x/2)), y*sin(x/2)],
   [x, -%pi, %pi], [y, -1, 1], ['grid, 50, 15]);
@end example

which plots a Moebius band, parametrized by the three expressions given
as the first argument to @code{plot3d}.  An additional optional argument
@code{['grid, 50, 15]} gives the grid number of rectangles in the x direction and
y direction.

When the function to be plotted is a function defined in Maxima by @code{:=} or @code{define},
or in Lisp by DEFUN or DEFMFUN,
the function can be specified by name.
Functions defined in Lisp by DEFMSPEC, and simplifying functions,
cannot be specified by name;
that includes many built-in functions.
@c REPORTED AS SF BUG # 1385271

This example shows a plot of the real part of @code{z^1/3}.

@example
 plot3d (r^.33*cos(th/3), [r, 0, 1], [th, 0, 6*%pi],
     ['grid, 12, 80], ['plot_format, ps],
     ['transform_xy, polar_to_xy], ['view_direction, 1, 1, 1.4],
     ['colour_z, true]);
@end example

@noindent
Here the @code{view_direction} option indicates the direction from which we
take a projection.  We actually do this from infinitely far away,
but parallel to the line from @code{view_direction} to the origin.  This
is currently only used in @code{ps} plot_format, since the other viewers
allow interactive rotating of the object.

Another example is a Klein bottle:

@example
expr_1: 5*cos(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y) + 3.0) - 10.0;
expr_2: -5*sin(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y) + 3.0);
expr_3: 5*(-sin(x/2)*cos(y) + cos(x/2)*sin(2*y));

plot3d ([expr_1, expr_2, expr_3], [x, -%pi, %pi], [y, -%pi, %pi], ['grid, 40, 40]);
@end example

or a torus

@example
expr_1: cos(y)*(10.0+6*cos(x));
expr_2: sin(y)*(10.0+6*cos(x));
expr_3: -6*sin(x);

plot3d ([expr_1, expr_2, expr_3], [x, 0, 2*%pi], [y, 0, 2*%pi], ['grid, 40, 40]);
@end example

We can output to gnuplot too:

@example
plot3d (2^(x^2 - y^2), [x, -1, 1], [y, -2, 2], [plot_format, gnuplot]);
@end example

Sometimes you may need to define a function to plot the expression.  All
the arguments to plot3d are evaluated before being passed to plot3d, and
so trying to make an expression which does just what you want may be
difficult, and it is just easier to make a function.   

@example
M: matrix([1, 2, 3, 4], [1, 2, 3, 2], [1, 2, 3, 4], [1, 2, 3, 3])$
f(x, y) := float (M [?round(x), ?round(y)])$
plot3d (f, [x, 1, 4], [y, 1, 4], ['grid, 4, 4])$
@end example

See @code{plot_options} for more examples.

@end deffn


@deffn {Function} make_transform (@var{vars}, @var{fx}, @var{fy}, @var{fz})
Returns a function suitable for the transform function in plot3d. Use
with the plot option @code{transform_xy}.
@example
make_transform ([r, th, z], r*cos(th), r*sin(th), z)$
@end example
is a transformation to polar coordinates.
@end deffn

@deffn {Function} plot2d_ps (@var{expr}, @var{range})
Writes to pstream a sequence of PostScript commands which
plot @var{expr} over @var{range}.

@var{expr} is an expression.
@var{range} is a list of the form @code{[@var{x}, @var{min}, @var{max}]}
in which @var{x} is a variable which appears in @var{expr}.

See also @code{closeps}.

@end deffn


@deffn {Function} closeps ()
This should usually becalled at the end of a sequence of plotting
commands.   It closes the current output stream @var{pstream}, and sets
it to nil.   It also may be called at the start of a plot, to ensure
pstream is closed if it was open.    All commands which write to
pstream, open it if necessary.   @code{closeps} is separate from the other
plotting commands, since we may want to plot 2 ranges or superimpose
several plots, and so must keep the stream open.
@end deffn

@deffn {Function} set_plot_option (@var{option})
Assigns one of the global variables for plotting.
@var{option} is specified as a list of two or more elements,
in which the first element is one of the keywords
on the @code{plot_options} list.

@code{set_plot_option} evaluates its argument.
@code{set_plot_option} returns @code{plot_options} 
(after modifying one of its elements).

See also @code{plot_options}, @code{plot2d}, and @code{plot3d}.

Examples:

Modify the @code{grid} and @code{x} values.
When a @code{plot_options} keyword has an assigned value,
quote it to prevent evaluation.

@c ===beg===
@c set_plot_option ([grid, 30, 40]);
@c x: 42;
@c set_plot_option (['x, -100, 100]);
@c ===end===

@example
(%i1) set_plot_option ([grid, 30, 40]);
(%o1) [[x, - 1.755559702014E+305, 1.755559702014E+305], 
[y, - 1.755559702014E+305, 1.755559702014E+305], [t, - 3, 3], 
[grid, 30, 40], [view_direction, 1, 1, 1], [colour_z, false], 
[transform_xy, false], [run_viewer, true], 
[plot_format, gnuplot], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 10], [adapt_depth, 10], 
[gnuplot_pm3d, false], [gnuplot_preamble, ], 
[gnuplot_curve_titles, [default]], 
[gnuplot_curve_styles, [with lines 3, with lines 1, 
with lines 2, with lines 5, with lines 4, with lines 6, 
with lines 7]], [gnuplot_default_term_command, ], 
[gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript #
eps enhanced color solid 24]]
(%i2) x: 42;
(%o2)                          42
(%i3) set_plot_option (['x, -100, 100]);
(%o3) [[x, - 100.0, 100.0], [y, - 1.755559702014E+305, 
1.755559702014E+305], [t, - 3, 3], [grid, 30, 40], 
[view_direction, 1, 1, 1], [colour_z, false], 
[transform_xy, false], [run_viewer, true], 
[plot_format, gnuplot], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 10], [adapt_depth, 10], 
[gnuplot_pm3d, false], [gnuplot_preamble, ], 
[gnuplot_curve_titles, [default]], 
[gnuplot_curve_styles, [with lines 3, with lines 1, 
with lines 2, with lines 5, with lines 4, with lines 6, 
with lines 7]], [gnuplot_default_term_command, ], 
[gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript #
eps enhanced color solid 24]]
@end example

@end deffn

@deffn {Function} psdraw_curve (@var{ptlist})

Draws a curve connecting the points in @var{ptlist}.   The latter
may be of the form @code{[x0, y0, x1, y1, ...]} or @code{[[x0, y0], [x1, y1], ...]}

The function @code{join} is handy for taking a list of x's and a
list of y's and splicing them together.

@var{psdraw_curve} simply invokes the more primitive function
@var{pscurve}.   Here is the definition:

@example
(defun $psdraw_curve (lis)
  (p "newpath")
  ($pscurve lis)
  (p "stroke"))

@end example

@c ?DRAW2D  may also be used to produce a list
@c @example
@c  points1:?draw2d(1/x,[.05,10],.03) 
@c @end example


@end deffn

@deffn {Function} pscom (@var{cmd})

@var{cmd} is inserted in the PostScript file.
Example:
@example
pscom ("4.5 72 mul 5.5 72 mul translate 14 14 scale");
@end example

@end deffn



