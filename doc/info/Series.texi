@menu
* Introduction to Series::      
* Definitions for Series::      
@end menu

@node Introduction to Series, Definitions for Series, Series, Series
@section Introduction to Series
Maxima contains functions @code{taylor} and @code{powerseries} for finding the 
series of differentiable functions.   It also has tools such as @code{nusum}
capable of finding the closed form of some series.   Operations such as addition and multiplication work as usual on series. This section presents the various global various variables which control the expansion.
@c end concepts Series
@node Definitions for Series,  , Introduction to Series, Series
@section Definitions for Series

@defvar cauchysum
Default value: @code{false}

@c REPHRASE
When multiplying together sums with @code{inf} as their upper limit,
if @code{sumexpand} is @code{true} and @code{cauchysum} is @code{true}
then the Cauchy product will be used rather than the usual
product.
In the Cauchy product the index of the inner summation is a
function of the index of the outer one rather than varying
independently.

Example:

@example
(%i1) sumexpand: false$
(%i2) cauchysum: false$
(%i3) s: sum (f(i), i, 0, inf) * sum (g(j), j, 0, inf);
                      inf         inf
                      ====        ====
                      \           \
(%o3)                ( >    f(i))  >    g(j)
                      /           /
                      ====        ====
                      i = 0       j = 0
(%i4) sumexpand: true$
(%i5) cauchysum: true$
(%i6) ''s;
                 inf     i1
                 ====   ====
                 \      \
(%o6)             >      >     g(i1 - i2) f(i2)
                 /      /
                 ====   ====
                 i1 = 0 i2 = 0
@end example

@end defvar

@defun deftaylor (@var{f_1}(@var{x_1}), @var{expr_1}, ..., @var{f_n}(@var{x_n}), @var{expr_n})
For each function @var{f_i} of one variable @var{x_i}, 
@code{deftaylor} defines @var{expr_i} as the Taylor series about zero.
@var{expr_i} is typically a polynomial in @var{x_i} or a summation;
more general expressions are accepted by @code{deftaylor} without complaint.

@code{powerseries (@var{f_i}(@var{x_i}), @var{x_i}, 0)}
returns the series defined by @code{deftaylor}.

@code{deftaylor} returns a list of the functions
@var{f_1}, ..., @var{f_n}.
@code{deftaylor} evaluates its arguments.

Example:

@example
(%i1) deftaylor (f(x), x^2 + sum(x^i/(2^i*i!^2), i, 4, inf));
(%o1)                          [f]
(%i2) powerseries (f(x), x, 0);
                      inf
                      ====      i1
                      \        x         2
(%o2)                  >     -------- + x
                      /       i1    2
                      ====   2   i1!
                      i1 = 4
(%i3) taylor (exp (sqrt (f(x))), x, 0, 4);
                      2         3          4
                     x    3073 x    12817 x
(%o3)/T/     1 + x + -- + ------- + -------- + . . .
                     2     18432     307200
@end example

@end defun

@defvar maxtayorder
Default value: @code{true}

@c REPHRASE
When @code{maxtayorder} is @code{true}, then during algebraic
manipulation of (truncated) Taylor series, @code{taylor} tries to retain
as many terms as are known to be correct.

@end defvar

@defun niceindices (@var{expr})
Renames the indices of sums and products in @var{expr}.
@code{niceindices} attempts to rename each index to the value of @code{niceindicespref[1]},
unless that name appears in the summand or multiplicand,
in which case @code{niceindices} tries
the succeeding elements of @code{niceindicespref} in turn, until an unused variable is found.
If the entire list is exhausted,
additional indices are constructed by appending integers to the value of
@code{niceindicespref[1]}, e.g., @code{i0}, @code{i1}, @code{i2}, ....

@code{niceindices} returns an expression.
@code{niceindices} evaluates its argument.

Example:

@example
(%i1) niceindicespref;
(%o1)                  [i, j, k, l, m, n]
(%i2) product (sum (f (foo + i*j*bar), foo, 1, inf), bar, 1, inf);
                 inf    inf
                /===\   ====
                 ! !    \
(%o2)            ! !     >      f(bar i j + foo)
                 ! !    /
                bar = 1 ====
                        foo = 1
(%i3) niceindices (%);
                     inf  inf
                    /===\ ====
                     ! !  \
(%o3)                ! !   >    f(i j l + k)
                     ! !  /
                    l = 1 ====
                          k = 1
@end example

@end defun

@defvar niceindicespref
Default value: @code{[i, j, k, l, m, n]}

@code{niceindicespref} is the list from which @code{niceindices}
takes the names of indices for sums and products.

The elements of @code{niceindicespref} are typically names of variables,
although that is not enforced by @code{niceindices}.

Example:

@example
(%i1) niceindicespref: [p, q, r, s, t, u]$
(%i2) product (sum (f (foo + i*j*bar), foo, 1, inf), bar, 1, inf);
                 inf    inf
                /===\   ====
                 ! !    \
(%o2)            ! !     >      f(bar i j + foo)
                 ! !    /
                bar = 1 ====
                        foo = 1
(%i3) niceindices (%);
                     inf  inf
                    /===\ ====
                     ! !  \
(%o3)                ! !   >    f(i j q + p)
                     ! !  /
                    q = 1 ====
                          p = 1
@end example

@end defvar

@defun nusum (@var{expr}, @var{x}, @var{i_0}, @var{i_1})
Carries out indefinite hypergeometric summation of @var{expr} with
respect to @var{x} using a decision procedure due to R.W. Gosper.
@var{expr} and the result must be expressible as products of integer powers,
factorials, binomials, and rational functions.

@c UMM, DO WE REALLY NEED TO DEFINE "DEFINITE" AND "INDEFINITE" SUMMATION HERE ??
@c (CAN'T WE MAKE THE POINT WITHOUT DRAGGING IN SOME NONSTANDARD TERMINOLOGY ??)
The terms "definite"
and "indefinite summation" are used analogously to "definite" and
"indefinite integration".
To sum indefinitely means to give a symbolic result
for the sum over intervals of variable length, not just e.g. 0 to
inf.  Thus, since there is no formula for the general partial sum of
the binomial series, @code{nusum} can't do it.

@code{nusum} and @code{unsum} know a little about sums and differences of finite products.
See also @code{unsum}.

Examples:

@example
(%i1) nusum (n*n!, n, 0, n);

Dependent equations eliminated:  (1)
(%o1)                     (n + 1)! - 1
(%i2) nusum (n^4*4^n/binomial(2*n,n), n, 0, n);
                     4        3       2              n
      2 (n + 1) (63 n  + 112 n  + 18 n  - 22 n + 3) 4      2
(%o2) ------------------------------------------------ - ------
                    693 binomial(2 n, n)                 3 11 7
(%i3) unsum (%, n);
                              4  n
                             n  4
(%o3)                   ----------------
                        binomial(2 n, n)
(%i4) unsum (prod (i^2, i, 1, n), n);
                    n - 1
                    /===\
                     ! !   2
(%o4)              ( ! !  i ) (n - 1) (n + 1)
                     ! !
                    i = 1
(%i5) nusum (%, n, 1, n);

Dependent equations eliminated:  (2 3)
                            n
                          /===\
                           ! !   2
(%o5)                      ! !  i  - 1
                           ! !
                          i = 1
@end example

@end defun

@c THIS ITEM NEEDS SERIOUS WORK
@defun pade (@var{taylor_series}, @var{numer_deg_bound}, @var{denom_deg_bound})
Returns a list of
all rational functions which have the given Taylor series expansion
where the sum of the degrees of the numerator and the denominator is
less than or equal to the truncation level of the power series, i.e.
are "best" approximants, and which additionally satisfy the specified
degree bounds.

@var{taylor_series} is a univariate Taylor series.
@var{numer_deg_bound} and @var{denom_deg_bound}
are positive integers specifying degree bounds on
the numerator and denominator.

@var{taylor_series} can also be a Laurent series, and the degree
bounds can be @code{inf} which causes all rational functions whose total
degree is less than or equal to the length of the power series to be
returned.  Total degree is defined as @code{@var{numer_deg_bound} + @var{denom_deg_bound}}.
Length of a power series is defined as
@code{"truncation level" + 1 - min(0, "order of series")}.

@example
(%i1) taylor (1 + x + x^2 + x^3, x, 0, 3);
                              2    3
(%o1)/T/             1 + x + x  + x  + . . .
(%i2) pade (%, 1, 1);
                                 1
(%o2)                       [- -----]
                               x - 1
(%i3) t: taylor(-(83787*x^10 - 45552*x^9 - 187296*x^8
                   + 387072*x^7 + 86016*x^6 - 1507328*x^5
                   + 1966080*x^4 + 4194304*x^3 - 25165824*x^2
                   + 67108864*x - 134217728)
       /134217728, x, 0, 10);
                    2    3       4       5       6        7
             x   3 x    x    15 x    23 x    21 x    189 x
(%o3)/T/ 1 - - + ---- - -- - ----- + ----- - ----- - ------
             2    16    32   1024    2048    32768   65536

                                  8         9          10
                            5853 x    2847 x    83787 x
                          + ------- + ------- - --------- + . . .
                            4194304   8388608   134217728
(%i4) pade (t, 4, 4);
(%o4)                          []
@end example

There is no rational function of degree 4 numerator/denominator, with this
power series expansion.  You must in general have degree of the numerator and
degree of the denominator adding up to at least the degree of the power series,
in order to have enough unknown coefficients to solve.

@example
(%i5) pade (t, 5, 5);
                     5                4                 3
(%o5) [- (520256329 x  - 96719020632 x  - 489651410240 x

                  2
 - 1619100813312 x  - 2176885157888 x - 2386516803584)

               5                 4                  3
/(47041365435 x  + 381702613848 x  + 1360678489152 x

                  2
 + 2856700692480 x  + 3370143559680 x + 2386516803584)]
@end example

@end defun

@defvar powerdisp
Default value: @code{false}

When @code{powerdisp} is @code{true},
a sum is displayed with its terms in order of increasing power.
Thus a polynomial is displayed as a truncated power series,
with the constant term first and the highest power last.

By default, terms of a sum are displayed in order of decreasing power.

@c NEED AN EXAMPLE HERE
@end defvar

@defun powerseries (@var{expr}, @var{x}, @var{x_0})
Returns the general form of the power series expansion for @var{expr}
in the variable @var{x} about the point @var{x_0} (which may be @code{inf} for infinity).

If @code{powerseries} is unable to expand @var{expr},
@code{taylor} may give the first several terms of the series.

When @code{verbose} is @code{true},
@code{powerseries} prints progress messages. 

@example
(%i1) verbose: true$
(%i2) powerseries (log(sin(x)/x), x, 0);
can't expand 
                                 log(sin(x))
so we'll try again after applying the rule:
                                        d
                                      / -- (sin(x))
                                      [ dx
                        log(sin(x)) = i ----------- dx
                                      ]   sin(x)
                                      /
in the first simplification we have returned:
                             /
                             [
                             i cot(x) dx - log(x)
                             ]
                             /
                    inf
                    ====        i1  2 i1             2 i1
                    \      (- 1)   2     bern(2 i1) x
                     >     ------------------------------
                    /                i1 (2 i1)!
                    ====
                    i1 = 1
(%o2)                -------------------------------------
                                      2
@end example

@end defun

@defvar psexpand
Default value: @code{false}

When @code{psexpand} is @code{true},
an extended rational function expression is displayed fully expanded.
The switch @code{ratexpand} has the same effect.

@c WE NEED TO BE EXPLICIT HERE
When @code{psexpand} is @code{false},
a multivariate expression is displayed just as in the rational function package.

@c TERMS OF WHAT ??
When @code{psexpand} is  @code{multi},
then terms with the same total degree in the variables are grouped together.

@end defvar

@defun revert (@var{expr}, @var{x})
@defunx revert2 (@var{expr}, @var{x}, @var{n})
These functions return the reversion of @var{expr}, a Taylor series about zero in the variable @var{x}.
@code{revert} returns a polynomial of degree equal to the highest power in @var{expr}.
@code{revert2} returns a polynomial of degree @var{n},
which may be greater than, equal to, or less than the degree of @var{expr}.

@code{load ("revert")} loads these functions.

Examples:

@example
(%i1) load ("revert")$
(%i2) t: taylor (exp(x) - 1, x, 0, 6);
                   2    3    4    5     6
                  x    x    x    x     x
(%o2)/T/      x + -- + -- + -- + --- + --- + . . .
                  2    6    24   120   720
(%i3) revert (t, x);
               6       5       4       3       2
           10 x  - 12 x  + 15 x  - 20 x  + 30 x  - 60 x
(%o3)/R/ - --------------------------------------------
                                60
(%i4) ratexpand (%);
                     6    5    4    3    2
                    x    x    x    x    x
(%o4)             - -- + -- - -- + -- - -- + x
                    6    5    4    3    2
(%i5) taylor (log(x+1), x, 0, 6);
                    2    3    4    5    6
                   x    x    x    x    x
(%o5)/T/       x - -- + -- - -- + -- - -- + . . .
                   2    3    4    5    6
(%i6) ratsimp (revert (t, x) - taylor (log(x+1), x, 0, 6));
(%o6)                           0
(%i7) revert2 (t, x, 4);
                          4    3    2
                         x    x    x
(%o7)                  - -- + -- - -- + x
                         4    3    2
@end example

@end defun

@c OBSOLETE AS ADVERTISED; NOT CALLED FROM ANY USER-LEVEL FILE (.mac OR .dem)
@c CUT THIS OUT ON NEXT PASS
@c @defun srrat (exp)
@c this command has been renamed to @code{taytorat}.
@c 
@c @end defun

@defun taylor (@var{expr}, @var{x}, @var{x_0}, @var{n})
Expands the expression @var{expr} in a truncated
Taylor series (or Laurent series, if required) in the variable @var{x}
around the point @var{x_0},
containing terms through @code{(@var{x} - @var{x_0})^@var{n}}.

If @var{expr} is of the form f(x)/g(x) and g(var) has no terms up to
degree pow then @code{taylor} will try to expand g(var) up to degree 2*pow.
If there are still no non-zero terms @code{taylor} will keep doubling the
degree of the expansion of g(var) until reaching pow*2**n where n is
the value of the variable @code{taylordepth}.

@code{taylor (@var{expr}, [@var{x_1}, @var{x_@{0,1@}}, @var{n_1}], [@var{x_2}, @var{x_@{0,2@}}, @var{n_2}], ...)}
returns a truncated power series in the variables @var{x_1}, @var{x_2}, ...
about the points @var{x_@{0,1@}}, @var{x_@{0,2@}}, ...,
truncated at @var{n_1}, @var{n_2}, ....

@code{taylor (@var{expr}, [@var{x_1}, @var{x_2}, ...], @var{x_0}, @var{n})}
where each of pt and ord
may be replaced by a list which will correspond to the list of
variables.  That is, the nth items on each of the lists will be
associated together.

@code{taylor (@var{expr}, [x, pt, ord, 'asymp])} will give an expansion of exp in
negative powers of (x-pt).  The highest order term will be (x-pt)^(-ord).
The @code{asymp} is a syntactic device and not to be assigned to.
See also the @code{taylor_logexpand} switch for controlling expansion.

When @code{maxtayorder} is @code{true}, then during algebraic
manipulation of (truncated) Taylor series, @code{taylor} tries to retain
as many terms as are known to be correct.

When @code{psexpand} is @code{true},
an extended rational function expression is displayed fully expanded.
The switch @code{ratexpand} has the same effect.
When @code{psexpand} is @code{false},
a multivariate expression is displayed just as in the rational function package.
When @code{psexpand} is  @code{multi},
then terms with the same total degree in the variables are grouped together.

Do @code{example(taylor)} for examples.

@end defun

@defvar taylordepth
 default: [3] - If there are still no non-zero terms
@code{taylor} will keep doubling the degree of the expansion of g(var) until
reaching pow*2**n where n is the value of the variable @code{taylordepth} [3].

@end defvar

@defun taylorinfo (exp)
returns @code{false} if exp is not a Taylor series.
Otherwise, a list of lists is returned describing the particulars of
the Taylor expansion.  For example,

@example
(%i3) taylor((1-y^2)/(1-x),x,0,3,[y,a,inf]);
             2                        2
(%o3)/r/ 1 - a  - 2 a (y - a) - (y - a)
                    2                        2
            + (1 - a  - 2 a (y - a) - (y - a) ) x
         2                        2   2
 + (1 - a  - 2 a (y - a) - (y - a) ) x
                    2                        2   3
            + (1 - a  - 2 a (y - a) - (y - a) ) x
     + . . .
(%i4) taylorinfo(%o3);
(%o4)                       [[y, a, inf], [x, 0, 3]]
@end example

@end defun

@defun taylorp (exp)
a predicate function which returns @code{true} if and only if
the expression 'exp' is in Taylor series representation.

@end defun

@defvar taylor_logexpand
 default: @code{true} controls expansions of logarithms in
@code{taylor} series.  When @code{true} all log's are expanded fully so that
zero-recognition problems involving logarithmic identities do not
disturb the expansion process.  However, this scheme is not always
mathematically correct since it ignores branch information.  If
@code{taylor_logexpand} is set to @code{false}, then the only expansion of log's
that will occur is that necessary to obtain a formal power series.

@end defvar

@defvar taylor_order_coefficients
 default: @code{true} controls the ordering of
coefficients in the expression.  The default @code{true} is that
coefficients of taylor series will be ordered canonically.

@end defvar

@defun taylor_simplifier
 - A function of one argument which @code{taylor} uses to
simplify coefficients of power series.

@end defun

@defvar taylor_truncate_polynomials
 default: @code{true} When @code{false} polynomials
input to @code{taylor} are considered to have infinite precison; otherwise
(the default) they are truncated based upon the input truncation
levels.

@end defvar

@defun taytorat (exp)
converts exp from @code{taylor} form to CRE form, i.e. it is
like @code{rat(ratdisrep(exp))} although much faster.

@end defun

@defun trunc (exp)
causes exp which is in general representation to be
displayed as if its sums were truncated Taylor series.  E.g. compare
@code{exp1:x^2+x+1} with @code{exp2:trunc(x^2+x+1)} .  Note that @code{is(exp1=exp2)}
gives @code{true}.

@end defun

@defun unsum (fun,n)
is the first backward difference fun(n) - fun(n-1).
Thus @code{unsum} in a sense is the inverse of @code{sum}.
See also @code{nusum}.

@example
(%i1) g(p):=p*4^n/binomial(2*n,n);
                                            n
                                         p 4
(%o1)                       g(p) := ----------------
                                   binomial(2 n, n)
(%i2) g(n^4);
                                     4  n
                                    n  4
(%o2)                           ----------------
                               binomial(2 n, n)
(%i3) nusum(%o2,n,0,n);
                         4        3       2              n
          2 (n + 1) (63 n  + 112 n  + 18 n  - 22 n + 3) 4      2
(%o3)      ------------------------------------------------ - ------
                        693 binomial(2 n, n)                 3 11 7
(%i4) unsum(%,n);
                                     4  n
                                    n  4
(%o4)                           ----------------
                               binomial(2 n, n)
@end example

@end defun

@defvar verbose
 default: @code{false} - if @code{true} will cause comments about the
progress of @code{powerseries} to be printed as the execution of it proceeds.

@end defvar
