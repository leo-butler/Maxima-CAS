
@menu
* Definitions for Differential Equations::  
@end menu

@node Definitions for Differential Equations,  , Differential Equations, Differential Equations
@section Definitions for Differential Equations


@deffn {function} bc2 (solution, xval1, yval1, xval2, yval2)
Solves boundary value problem for second order differential equation. 
Here: @var{solution} is a general solution to the equation, as 
found by @code{ode2}, @var{xval1} is an equation for the independent 
variable in the form @code{@var{x} = @var{x0}}, and @var{yval1} is
an equation for the dependent variable in the form 
@code{@var{y} = @var{y0}}.  The @var{xval2} and @var{yval2} are
equations for these variables at another point.
See @code{ode2} for example of usage.

@end deffn


@deffn {function} desolve (eq1, var)
@deffnx {function} desolve ([eq1, ..., eqn], [var1, ..., varn])
The function @code{dsolve} solves systems of linear 
ordinary differential equations using Laplace transform.  
Here the @var{eq}'s are differential equations in 
the dependent variables @var{var1}, ..., @var{varn}. 
The functional relationships must be explicitly 
indicated in both the equations and the variables. For example
@example
'diff(f,x,2)=sin(x)+'diff(g,x);
'diff(f,x)+x^2-f=2*'diff(g,x,2);
@end example
is not the proper format.  The correct way is:
@example
'diff(f(x),x,2)=sin(x)+'diff(g(x),x);
'diff(f(x),x)+x^2-f=2*'diff(g(x),x,2);
@end example

The call is then @code{desolve([%o3,%o4],[f(x),g(x)]);} .

If initial conditions at 0 are known, they should be supplied before
calling @code{desolve} by using @code{atvalue}.

@c ===beg===
@c 'diff(f(x),x)='diff(g(x),x)+sin(x);
@c 'diff(g(x),x,2)='diff(f(x),x)-cos(x);
@c atvalue('diff(g(x),x),x=0,a);
@c atvalue(f(x),x=0,1);
@c desolve([%o1,%o2],[f(x),g(x)]);
@c [%o1,%o2],%o5,diff;
@c ===end===
@example
(%i1) @b{@t{'diff(f(x),x)='diff(g(x),x)+sin(x);}}
                 d           d
(%o1)            -- (f(x)) = -- (g(x)) + sin(x)
                 dx          dx
(%i2) @b{@t{'diff(g(x),x,2)='diff(f(x),x)-cos(x);}}
                  2
                 d            d
(%o2)            --- (g(x)) = -- (f(x)) - cos(x)
                   2          dx
                 dx
(%i3) @b{@t{atvalue('diff(g(x),x),x=0,a);}}
(%o3)                           a
(%i4) @b{@t{atvalue(f(x),x=0,1);}}
(%o4)                           1
(%i5) @b{@t{desolve([%o1,%o2],[f(x),g(x)]);}}
                  x
(%o5) [f(x) = a %e  - a + 1, g(x) = 

                                                x
                                   cos(x) + a %e  - a + g(0) - 1]
(%i6) @b{@t{[%o1,%o2],%o5,diff;}}
             x       x      x                x
(%o6)   [a %e  = a %e , a %e  - cos(x) = a %e  - cos(x)]

@end example

If @code{desolve} cannot obtain a solution, it returns @code{false}.

@end deffn


@deffn {function} ic1 (solution, xval, yval)
Solves initial value problem for first order differential equation. 
Here: @var{solution} is a general solution to the equation, as 
found by @code{ode2}, @var{xval} is an equation for the independent 
variable in the form @code{@var{x} = @var{x0}}, and @var{yval} is
an equation for the dependent variable in the form 
@code{@var{y} = @var{y0}}. See @code{ode2} for example of usage.

@end deffn


@deffn {function} ic2 (solution, xval, yval, dval)
Solves initial value problem for second order differential equation. 
Here: @var{solution} is a general solution to the equation, as 
found by @code{ode2}, @var{xval} is an equation for the independent 
variable in the form @code{@var{x} = @var{x0}}, @var{yval} is
an equation for the dependent variable in the form 
@code{@var{y} = @var{y0}}, and @var{dval} is an equation for 
the derivative of the dependent variable with respect to 
independent variable evaluated at the point @var{xval}. 
See @code{ode2} for example of usage.

@end deffn


@deffn {function} ode2 (eqn, dvar, ivar)
The function @code{ode2} solves ordinary differential equations of first or second order.
It takes three arguments: an ODE @var{eqn}, the dependent variable
@var{dvar}, and the independent variable @var{ivar}.  
When successful, it returns either an explicit or implicit solution for the
dependent variable.  @code{%c} is used to represent the constant in the case
of first order equations, and @code{%k1} and @code{%k2} the constants for second
order equations.  If @code{ode2} cannot obtain a solution for whatever
reason, it returns @code{false}, after perhaps printing out an error message.
The methods implemented for first order equations in the order in
which they are tested are: linear, separable, exact - perhaps
requiring an integrating factor, homogeneous, Bernoulli's equation,
and a generalized homogeneous method.
For second order: constant coefficient, exact, linear homogeneous with
non-constant coefficients which can be transformed to constant
coefficient, the Euler or equidimensional equation, the method of
variation of parameters, and equations which are free of either the
independent or of the dependent variable so that they can be reduced
to two first order linear equations to be solved sequentially.
In the course of solving ODEs, several variables are set purely for
informational purposes: @code{method} denotes the method of solution used
e.g. @code{linear}, @code{intfactor} denotes any integrating factor
used, @code{odeindex} denotes the index for Bernoulli's method or for the generalized
homogeneous method, and @code{yp} denotes the particular solution for the
variation of parameters technique.

In order to solve initial value problems (IVPs) and
boundary value problems (BVPs), the routine @code{ic1} is available 
for first order equations, and @code{ic2} and @code{bc2} for second
order IVPs and BVPs, respectively.  

Example:

@c ===beg===
@c x^2*'diff(y,x) + 3*y*x = sin(x)/x;
@c ode2(%,y,x);
@c ic1(%o2,x=%pi,y=0);
@c 'diff(y,x,2) + y*'diff(y,x)^3 = 0;
@c ode2(%,y,x);
@c ratsimp(ic2(%o5,x=0,y=0,'diff(y,x)=2));
@c bc2(%o5,x=0,y=1,x=1,y=3);
@c ===end===
@example
(%i1) @b{@t{x^2*'diff(y,x) + 3*y*x = sin(x)/x;}}
                      2 dy           sin(x)
(%o1)                x  -- + 3 x y = ------
                        dx             x
(%i2) @b{@t{ode2(%,y,x);}}
                             %c - cos(x)
(%o2)                    y = -----------
                                  3
                                 x
(%i3) @b{@t{ic1(%o2,x=%pi,y=0);}}
                              cos(x) + 1
(%o3)                   y = - ----------
                                   3
                                  x
(%i4) @b{@t{'diff(y,x,2) + y*'diff(y,x)^3 = 0;}}
                         2
                        d y      dy 3
(%o4)                   --- + y (--)  = 0
                          2      dx
                        dx
(%i5) @b{@t{ode2(%,y,x);}}
                      3
                     y  + 6 %k1 y
(%o5)                ------------ = x + %k2
                          6
(%i6) @b{@t{ratsimp(ic2(%o5,x=0,y=0,'diff(y,x)=2));}}
                             3
                          2 y  - 3 y
(%o6)                   - ---------- = x
                              6
(%i7) @b{@t{bc2(%o5,x=0,y=1,x=1,y=3);}}
                         3
                        y  - 10 y       3
(%o7)                   --------- = x - -
                            6           2

@end example

@end deffn
