@menu
* Definitions for Floating Point::  
@end menu

@node Definitions for Floating Point,  , Floating Point, Floating Point
@section Definitions for Floating Point

@defun bffac (expr, n)
Bigfloat version of the factorial (shifted gamma)
function.  The 2nd argument is how many digits to retain and return,
it's a good idea to request a couple of extra.  This function is
available by doing @code{load ("bffac")}.
@end defun

@defvar algepsilon
Default value: 10^8

@c WHAT IS algepsilon, EXACTLY ??? describe ("algsys") IS NOT VERY INFORMATIVE !!!
@code{algepsilon} is used by @code{algsys}.

@end defvar

@defun bfloat (x)
Converts all numbers and functions of numbers to bigfloat
numbers.  Setting @code{fpprec} to @code{n}, sets the bigfloat precision to @code{n}
digits.  If @code{float2bf} is @code{false} a warning message is printed when
a floating point number is converted into a bigfloat number (since
this may lead to loss of precision).

@end defun

@defun bfloatp (expr)
Returns @code{true} if @code{expr} is a bigfloat number else @code{false}.

@end defun

@defun bfpsi (n, z, fpprec)
gives polygammas of real arg and integer order.
For digamma, @code{bfpsi0 (z, fpprec)} is more direct.  Note @code{-bfpsi0 (1, fpprec)}
provides @code{%gamma} (Euler's constant) as a bigfloat.  To use this do @code{load ("bffac")}.

@end defun

@defvar bftorat
Default value: @code{false}

@code{bftorat} controls the conversion of bfloats to
rational numbers. 
When @code{bftorat} is @code{false},
@code{ratepsilon} will be used to
control the conversion (this results in relatively small rational
numbers).
When @code{bftorat} is @code{true},
the rational number generated will
accurately represent the bfloat.

@end defvar

@defvar bftrunc
Default value: @code{true}

@code{bftrunc} causes trailing zeroes in non-zero bigfloat
numbers not to be displayed.  Thus, if @code{bftrunc} is @code{false}, @code{bfloat (1)}
displays as @code{1.000000000000000B0}. Otherwise, this is displayed as
@code{1.0B0}.

@end defvar

@defun cbffac (z, fpprec)
a factorial for complex bfloats.  It may be used by
doing @code{load ("bffac")}. 
For more details see @code{share/numeric/bffac.usg}.

@end defun

@defun float (expr)
converts integers, rational numbers and bigfloats in @code{expr}
to floating point numbers.  It is also an @code{evflag}, @code{float} causes
non-integral rational numbers and bigfloat numbers to be converted to
floating point.

@end defun

@defvar float2bf
Default value: @code{false}
 
When @code{float2bf} is @code{false}, a warning message is printed when
a floating point number is converted into a bigfloat number (since
this may lead to loss of precision).

@end defvar

@defun floatnump (expr)
Returns @code{true} if @code{expr} is a floating point number else @code{false}.

@end defun

@defvar fpprec
Default value: 16

@code{fpprec} is the Maxima floating point precision.  @code{fpprec} can be set to an
integer representing the desired precision.

@end defvar

@defvar fpprintprec
Default value: 0

@code{fpprintprec} is the number of digits to print when
printing a bigfloat number, making it possible to compute with a large
number of digits of precision, but have the answer printed out with a
smaller number of digits.  If @code{fpprintprec} is 0 (the default), or greater than or equal to
@code{fpprec}, then the value of @code{fpprec} controls the number of digits used
for printing.  However, if @code{fpprintprec} has a value between 2 and
@code{fpprec - 1}, then it controls the number of digits used.  (The minimal
number of digits used is 2, one to the left of the point and one to
the right.  The value 1 for @code{fpprintprec} is illegal.)

@end defvar

@deffn {Lisp function} ?round (x)
@deffnx {Lisp function} ?round (x, divisor)
round the floating point X to the nearest integer.   The argument
must be a regular system float, not a bigfloat.   The ? beginning the name
indicates this is normal Common Lisp function.

@example
(%i1) ?round (-2.8);
(%o1)                            - 3
@end example

@end deffn

@deffn {Lisp function} ?truncate (x)
@deffnx {Lisp function} ?truncate (x, divisor)
truncate the floating point X towards 0, to become an integer.   The argument
must be a regular system float, not a bigfloat.  The ? beginning the name
indicates this is normal Common Lisp function.

@example
(%i1) ?truncate (-2.8);
(%o1)                            - 2
(%i2) ?truncate (2.4);
(%o2)                             2
(%i3) ?truncate (2.8);
(%o3)                             2
@end example

@end deffn


@defvar zunderflow
Default value: @code{true}
 
If @code{zunderflow} is @code{false}, an error will be signaled if
floating point underflow occurs.

@end defvar
