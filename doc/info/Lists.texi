
@menu
* Introduction to Lists::
* Definitions for Lists::
@end menu

@node Introduction to Lists, Definitions for Lists, Lists, Lists
@section Introduction to Lists

Lists are the basic building block for Maxima and Lisp.   All data types
other than arrays, hash tables, numbers are represented as Lisp lists,
These Lisp lists have the form

@example
((MPLUS) $A 2)
@end example

@noindent
to indicate an expression @code{a+2}.   At Maxima level one would see
the infix notation @code{a+2}.   Maxima also has lists which are printed
as

@example
[1, 2, 7, x+y]
@end example

@noindent
for a list with 4 elements.  Internally this corresponds to a Lisp list
of the form

@example
((MLIST) 1  2  7  ((MPLUS)  $X $Y ))
@end example

@noindent
The flag which denotes the type field of the Maxima expression is a list
itself, since after it has been through the simplifier the list would become

@example
((MLIST SIMP) 1 2 7 ((MPLUS SIMP) $X $Y))
@end example

@node Definitions for Lists,  , Introduction to Lists, Lists
@section Definitions for Lists

@deffn {function} append (list1, list2, ...)
returns a single list of the elements of @var{list1} followed
by the elements of @var{list2},...  @code{append} also works on
general expressions, e.g. @code{append(f(a,b), f(c,d,e));} ->
@code{f(a,b,c,d,e)}.

Do @code{example(append);} for an example.

@end deffn

@deffn {function} assoc (key, list, default)
@deffnx {function} assoc (key, list)
This function searches for the @var{key} in the left hand side of the input @var{list}
of the form @code{[x,y,z,...]} where each of the @var{list} elements is an expression of
a binary operand and 2 elements.  For example @code{x=1}, @code{2^3}, @code{[a,b]} etc.
The @var{key} is checked againts the first operand.  @code{assoc} returns the second
operand if the @code{key} is found.  If the @code{key} is not found it
either returns the @var{default} value.  @var{default} is optional
and defaults to @code{false}.

@end deffn

@deffn {function} atom (exp)
is @code{true} if @var{exp} is atomic (i.e. a number, name or string) else
@code{false}.  Thus @code{atom(5)} is @code{true} while @code{atom(a[1])} and @code{atom(sin(x))} are
@code{false} (asuming @code{a[1]} and @code{x} are unbound).

@end deffn

@deffn {function} cons (exp, list)
returns a new list constructed of the element @var{exp} as
its first element, followed by the elements of @var{list}.  @code{cons} also works
on other expressions, e.g. @code{cons(x, f(a,b,c));}  ->  @code{f(x,a,b,c)}.

@end deffn

@deffn {function} copylist (list)
creates a copy of the list @var{list}.

@end deffn

@deffn {function} delete (exp1, exp2)
@deffnx {function} delete (exp1, exp2, n)
removes all occurrences of @var{exp1} from @var{exp2}.  @var{exp1}
may be a term of @var{exp2} (if it is a sum) or a factor of @var{exp2}
(if it is a product).

@example
(%i1)  delete(sin(x),x+sin(x)+y);
(%o1)               y + x

@end example

@code{delete(@var{exp1}, @var{exp2}, @var{n})} removes the first @var{n} occurrences of
@var{exp1} from @var{exp2}.  If there are fewer than @var{n}
occurrences of @var{exp1} in @var{exp2} then all occurrences will be deleted.

@example
(%i1)  delete(a,f(a,b,c,d,a));
(%o1)             f(b, d)
(%i2)  delete(a,f(a,b,c,d,a),2);
(%o2)           f(b, d, a)

@end example

@end deffn

@deffn {function} eigth (exp)
returns the 8'th item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

@deffn {function} endcons (exp, list)
returns a new list consisting of the elements of
@code{list} followed by @var{exp}.  @code{endcons} also works on general expressions, e.g.
@code{endcons(x, f(a,b,c));}  ->  @code{f(a,b,c,x)}.

@end deffn

@deffn {function} every (exp)
This function takes a list, or a positive number of arguments and returns
@code{true} if all its arguments are not @code{false}.

@end deffn

@deffn {function} fifth (exp)
returns the 5'th item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

@deffn {function} first (exp)
yields the first part of @var{exp} which may result in the first
element of a list, the first row of a matrix, the first term of a sum,
etc.  Note that @code{first} and its related functions, @code{rest} and @code{last}, work
on the form of @var{exp} which is displayed not the form which is typed on
input.  If the variable @code{inflag} is set to @code{true} however, these
functions will look at the internal form of @var{exp}.  Note that the
simplifier re-orders expressions.  Thus @code{first(x+y)} will be @code{x} if @code{inflag}
is @code{true} and @code{y} if @code{inflag} is @code{false} (@code{first(y+x)} gives the same
results).  The functions @code{second} .. @code{tenth} yield the second through the
tenth part of their input argument.

@end deffn

@deffn {function} flatten (exp)
Takes a list of the form [[1,2],[3,4]] and returns [1,2,3,4].

@end deffn

@deffn {function} fourth (exp)
returns the 4'th item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

@deffn {function} get (a, i)
retrieves the user property indicated by @var{i} associated with
atom @var{a} or returns @code{false} if a doesn't have property @var{i}.

@example
(%i1) put (%e, 'transcendental, 'type);
(%o1)                      transcendental
(%i2) put (%pi, 'transcendental, 'type)$
(%i3) put (%i, 'algebraic, 'type)$
(%i4) typeof (expr) := block ([q],
        if numberp (expr)
        then return ('algebraic),
        if not atom (expr)
        then return (maplist ('typeof, expr)),
        q: get (expr, 'type),
        if q=false
        then errcatch (error (expr, "is not numeric.")) else q)$
(%i5) typeof (2*%e + x*%pi);
x is not numeric.
(%o5)    [[transcendental, []], [algebraic, transcendental]]
(%i6) typeof (2*%e + %pi);
(%o6)       [transcendental, [algebraic, transcendental]]
@end example

@end deffn

@deffn {function} last (exp)
yields the last part (term, row, element, etc.) of the @var{exp}.

@end deffn

@deffn {function} length (exp)
gives (by default) the number of parts in the external
(displayed) form of @var{exp}.  For lists this is the number of elements,
for matrices it is the number of rows, and for sums it is the number
of terms (see @code{dispform}).  The @code{length} command is affected by the
@code{inflag} switch.  So, e.g. @code{length(a/(b*c));} gives 2 if
@code{inflag} is @code{false} (Assuming @code{exptdispflag} is @code{true}), but 3 if @code{inflag} is
@code{true} (the internal representation is essentially @code{a*b^-1*c^-1}).

@end deffn

@defvr {option variable} listarith
default value: @code{true} - if @code{false} causes any arithmetic operations
with lists to be suppressed; when @code{true}, list-matrix operations are
contagious causing lists to be converted to matrices yielding a result
which is always a matrix.  However, list-list operations should return
lists.

@end defvr

@deffn {function} listp (exp)
is @code{true} if @var{exp} is a list else @code{false}.

@end deffn

@deffn {function} makelist (exp,var,lo,hi)
@deffnx {function} makelist (exp,var,list)
returns a list as value.  @code{makelist} may be called as
@code{makelist(@var{exp},@var{var},@var{lo},@var{hi})} (@var{lo} and @var{hi} must be integers), or as
@code{makelist(@var{exp},@var{var},@var{list})}.  In the first case @code{makelist} is analogous to
@code{sum}, whereas in the second case @code{makelist} is similar to @code{map}.
Examples:

@example
(%i1) makelist(concat(x,i),i,1,6);
(%o1)          [x1, x2, x3, x4, x5, x6]
(%i2) makelist(x=y,y,[a,b,c]);
(%o2)            [x = a, x = b, x = c]
@end example

@end deffn

@deffn {function} member (exp, list)
returns @code{true} if @var{exp} occurs as a member of @var{list} (not
within a member).  Otherwise @code{false} is returned.  @code{member} also works on
non-list expressions, e.g. @code{member(b,f(a,b,c));}  ->  @code{true}.

@end deffn

@deffn {function} ninth (exp)
returns the 9'th item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

@deffn {function} rest (exp, n)
@deffnx {function} rest (exp)
yields @var{exp} with its first @var{n} elements removed if @var{n} is
positive and its last @code{-@var{n}} elements removed if @var{n} is negative.  If @var{n} is 1
it may be omitted.  @var{exp} may be a list, matrix, or other expression.

@end deffn

@deffn {function} reverse (list)
reverses the order of the members of the @var{list} (not
the members themselves).  @code{reverse} also works on general expressions,
e.g.  @code{reverse(a=b);} gives @code{b=a}.

@end deffn

@deffn {function} second (exp)
returns the 2'nd item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

@deffn {function} seventh (exp)
returns the 7'th item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

@deffn {function} sixth (exp)
returns the 6'th item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

@deffn {function} tenth (exp)
returns the 10'th item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

@deffn {function} third (exp)
returns the 3'rd item of expression or list @var{exp}.
See @code{first} for more details.

@end deffn

