@menu
* Introduction to Special Functions::
* Bessel Functions::
* Airy Functions::
* Gamma and factorial Functions::
* Exponential Integrals::
* Error Function::
* Functions and Variables for Special Functions::  
@end menu

@node Introduction to Special Functions, Bessel Functions, Special Functions, Special Functions
@section Introduction to Special Functions

Special function notation follows:

@example
bessel_j (index, expr)         Bessel function, 1st kind
bessel_y (index, expr)         Bessel function, 2nd kind
bessel_i (index, expr)         Modified Bessel function, 1st kind
bessel_k (index, expr)         Modified Bessel function, 2nd kind
%he[n] (z)                     Hermite polynomial (Nota bene: @code{he},
                               not @code{h}. See A&S 22.5.18)
assoc_legendre_p[v,u] (z)      Legendre function of degree v and order u 
assoc_legendre_q[v,u] (z)      Legendre function, 2nd kind
hstruve[n] (z)                 Struve H function
lstruve[n] (z)                 Struve L function
%f[p,q] ([], [], expr)         Generalized Hypergeometric function
gamma()                        Gamma function
gammagreek(a,z)                Incomplete gamma function
gammaincomplete(a,z)           Tail of incomplete gamma function
@c IS slommel THE "LOMMEL" FUNCTION ?? NOT OTHERWISE MENTIONED IN TEXINFO FILES
slommel
%m[u,k] (z)                    Whittaker function, 1st kind
%w[u,k] (z)                    Whittaker function, 2nd kind
erfc (z)                       Complement of the erf function
ei (z)                         Exponential integral (?)
kelliptic (z)                  Complete elliptic integral of the first
                               kind (K)
%d [n] (z)                     Parabolic cylinder function
@end example

@opencatbox
@category{Bessel functions} @category{Airy functions} @category{Special functions}
@closecatbox

@node Bessel Functions, Airy Functions, Introduction to Special Functions, Special Functions

@section Bessel Functions
@deffn {Function} bessel_j (@var{v}, @var{z})
The Bessel function of the first kind of order @math{v} and argument @math{z}.

@code{bessel_j} is defined as
@ifhtml
@example
                inf
                ====       k  - v - 2 k  v + 2 k
                \     (- 1)  2          z
                 >    --------------------------
                /        k! gamma(v + k + 1)
                ====
                k = 0
@end example
@end ifhtml
@ifinfo
@example
                inf
                ====       k  - v - 2 k  v + 2 k
                \     (- 1)  2          z
                 >    --------------------------
                /        k! gamma(v + k + 1)
                ====
                k = 0
@end example
@end ifinfo

@tex
$$\sum_{k=0}^{\infty }{{{\left(-1\right)^{k}\,\left(z\over 2\right)^{v+2\,k}
 }\over{k!\,\Gamma\left(v+k+1\right)}}}$$
@end tex

although the infinite series is not used for computations.

@opencatbox
@category{Bessel functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} bessel_y (@var{v}, @var{z})
The Bessel function of the second kind of order @math{v} and argument @math{z}.

@code{bessel_y} is defined as
@ifhtml
@example
              cos(%pi v) bessel_j(v, z) - bessel_j(-v, z)
              -------------------------------------------
                             sin(%pi v)
@end example
@end ifhtml
@ifinfo
@example
              cos(%pi v) bessel_j(v, z) - bessel_j(-v, z)
              -------------------------------------------
                             sin(%pi v)
@end example
@end ifinfo

@tex
$${{\cos \left(\pi\,v\right)\,J_{v}(z)-J_{-v}(z)}\over{
 \sin \left(\pi\,v\right)}}$$
@end tex

when @math{v} is not an integer.  When @math{v} is an integer @math{n},
the limit as @math{v} approaches @math{n} is taken.

@opencatbox
@category{Bessel functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} bessel_i (@var{v}, @var{z})
The modified Bessel function of the first kind of order @math{v} and argument @math{z}.

@code{bessel_i} is defined as
@ifhtml
@example
                    inf
                    ====   - v - 2 k  v + 2 k
                    \     2          z
                     >    -------------------
                    /     k! gamma(v + k + 1)
                    ====
                    k = 0
@end example
@end ifhtml
@ifinfo
@example
                    inf
                    ====   - v - 2 k  v + 2 k
                    \     2          z
                     >    -------------------
                    /     k! gamma(v + k + 1)
                    ====
                    k = 0
@end example
@end ifinfo

@tex
$$\sum_{k=0}^{\infty } {{1\over{k!\,\Gamma
 \left(v+k+1\right)}} {\left(z\over 2\right)^{v+2\,k}}}$$
@end tex

although the infinite series is not used for computations.

@opencatbox
@category{Bessel functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} bessel_k (@var{v}, @var{z})
The modified Bessel function of the second kind of order @math{v} and argument @math{z}.

@code{bessel_k} is defined as
@ifhtml
@example
           %pi csc(%pi v) (bessel_i(-v, z) - bessel_i(v, z))
           -------------------------------------------------
                                  2
@end example
@end ifhtml
@ifinfo
@example
           %pi csc(%pi v) (bessel_i(-v, z) - bessel_i(v, z))
           -------------------------------------------------
                                  2
@end example
@end ifinfo
@tex
$${{\pi\,\csc \left(\pi\,v\right)\,\left(I_{-v}(z)-I_{v}(z)\right)}\over{2}}$$
@end tex

when @math{v} is not an integer.  If @math{v} is an integer @math{n},
then the limit as @math{v} approaches @math{n} is taken.

@opencatbox
@category{Bessel functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} hankel_1 (@var{v}, @var{z})
The Hankel funtion of the first kind of order @math{v} and argument @math{z}. (A&S 9.1.3)
@opencatbox
@category{Bessel functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} hankel_2 (@var{v}, @var{z})
The Hankel funtion of the second kind of order @math{v} and argument @math{z}. (A&S 9.1.4)
@opencatbox
@category{Bessel functions} @category{Special functions}
@closecatbox
@end deffn

@defvr {Option variable} besselexpand
Default value: @code{false}

@c REPHRASE
Controls expansion of the Bessel functions when the order is half of
an odd integer.  In this case, the Bessel functions can be expanded
in terms of other elementary functions.  When @code{besselexpand} is @code{true},
the Bessel function is expanded.

@example
(%i1) besselexpand: false$
(%i2) bessel_j (3/2, z);
                                    3
(%o2)                      bessel_j(-, z)
                                    2
(%i3) besselexpand: true$
(%i4) bessel_j (3/2, z);
                          2 z   sin(z)   cos(z)
(%o4)                sqrt(---) (------ - ------)
                          %pi      2       z
                                  z
@end example

@opencatbox
@category{Bessel functions} @category{Simplification flags and variables} 
@category{Special functions}
@closecatbox

@end defvr

@deffn {Function} scaled_bessel_i (@var{v}, @var{z}) 

The scaled modified Bessel function of the first kind of order
@math{v} and argument @math{z}.  That is, @math{scaled_bessel_i(v,z) =
exp(-abs(z))*bessel_i(v, z)}.  This function is particularly useful
for calculating @math{bessel_i} for large @math{z}, which is large.
However, maxima does not otherwise know much about this function.  For
symbolic work, it is probably preferable to work with the expression
@code{exp(-abs(z))*bessel_i(v, z)}.

@opencatbox
@category{Bessel functions}
@closecatbox
@end deffn

@deffn {Function} scaled_bessel_i0 (@var{z}) 

Identical to @code{scaled_bessel_i(0,z)}.

@opencatbox
@category{Bessel functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} scaled_bessel_i1 (@var{z}) 

Identical to @code{scaled_bessel_i(1,z)}.

@end deffn

@deffn {Function} bessel (@var{z}, @var{order}) 
The Bessel function of the first kind.

This function has been removed.  Use @code{bessel_j (@var{order}, @var{z})} instead.

@end deffn

@node Airy Functions, Gamma and factorial Functions, Bessel Functions, Special Functions
@section Airy Functions

@deffn {Function} airy_ai (@var{x})
The Airy function Ai, as defined in Abramowitz and Stegun,
@i{Handbook of Mathematical Functions}, Section 10.4. 

The Airy equation @code{diff (y(x), x, 2) - x y(x) = 0} has two 
linearly independent solutions, @code{y = Ai(x)} and @code{y = Bi(x)}.
The derivative @code{diff (airy_ai(x), x)} is @code{airy_dai(x)}.

If the argument @code{x} is a real or complex floating point 
number, the numerical value of @code{airy_ai} is returned 
when possible.

See also @code{airy_bi}, @code{airy_dai}, @code{airy_dbi}.

@opencatbox
@category{Airy functions} @category{Special functions}
@closecatbox
@end deffn


@deffn {Function} airy_dai (@var{x})
The derivative of the Airy function Ai @code{airy_ai(x)}. 

See @code{airy_ai}.

@opencatbox
@category{Airy functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} airy_bi (@var{x})
The Airy function Bi, as defined in Abramowitz and Stegun,
@i{Handbook of Mathematical Functions}, Section 10.4, 
is the second solution of the Airy equation 
@code{diff (y(x), x, 2) - x y(x) = 0}.

If the argument @code{x} is a real or complex floating point number,
the numerical value of @code{airy_bi} is returned when possible.
In other cases the unevaluated expression is returned.

The derivative @code{diff (airy_bi(x), x)} is @code{airy_dbi(x)}.

See @code{airy_ai}, @code{airy_dbi}.

@opencatbox
@category{Airy functions} @category{Special functions}
@closecatbox
@end deffn


@deffn {Function} airy_dbi (@var{x})
The derivative of the Airy Bi function @code{airy_bi(x)}.

See @code{airy_ai} and @code{airy_bi}.

@opencatbox
@category{Airy functions} @category{Special functions}
@closecatbox
@end deffn

@node Gamma and factorial Functions, Exponential Integrals, Airy Functions, Special Functions
@section Gamma and factorial Functions

The gamma function and the related beta, psi and incomplete gamma 
functions are defined in Abramowitz and Stegun,
@i{Handbook of Mathematical Functions}, Chapter 6.

@deffn {Function} beta (@var{x}, @var{y})
The beta function A&S 6.2.1, 
defined as @code{gamma(x) gamma(y)/gamma(x + y)}.
@c SEEMS LIKE THERE SHOULD BE MORE TO SAY HERE
@c ANY SIMPLIFICATION RULES FOR THIS FUNCTION ??

@opencatbox
@category{Gamma and factorial functions}
@closecatbox
@end deffn

@deffn {Function} gamma (@var{x})
The gamma function A&S 6.1.1.

@c SEEMS POINTLESS TO MENTION THE FOLLOWING IDENTITY, 
@c AS MAXIMA DOESN'T SEEM TO CARRY OUT THIS SIMPLIFICATION
@c GAMMA(I)=(I-1)!  for I a positive integer.

See also @code{makegamma}.

The variable @code{gammalim} controls simplification of the gamma function.

The Euler-Mascheroni constant is @code{%gamma}.

@opencatbox
@category{Gamma and factorial functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} log_gamma (@var{z})
The natural logarithm of the gamma function.
@opencatbox
@category{Gamma and factorial functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} gamma_incomplete (@var{a},@var{z})
The incomplete upper gamma function A&S 6.5.2.
@opencatbox
@category{Gamma and factorial functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} gamma_incomplete_regularized (@var{a},@var{z})
The regularized incomplete upper gamma function A&S 6.5.1.  

@code{ gamma_incomplete_regularized(a,z)=gamma_incomplete(a,z)/gamma(a)}

@opencatbox
@category{Gamma and factorial functions} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} gamma_incomplete_generalized (@var{a},@var{z1},@var{z1} )
The generalized incomplete gamma function.  

@code{ gamma_incomplete_generalized(a,z) =
 integrate(t^(a-1)*exp(-t), z, z1,z2) }

@opencatbox
@category{Gamma and factorial functions} @category{Special functions}
@closecatbox
@end deffn

@defvr {Option variable} gammalim
Default value: 1000000

@c REPHRASE
@code{gammalim} controls simplification of the gamma
function for integral and rational number arguments.  If the absolute
value of the argument is not greater than @code{gammalim}, then
simplification will occur.  Note that the @code{factlim} switch controls
simplification of the result of @code{gamma} of an integer argument as well.

@opencatbox
@category{Gamma and factorial functions} @category{Simplification flags and variables}
@closecatbox

@end defvr

@c NEED CROSS REFS HERE
@c NEED EXAMPLES HERE
@deffn {Function} makegamma (@var{expr})
Transforms instances of binomial, factorial, and beta
functions in @var{expr} into gamma functions.

See also @code{makefact}.

@opencatbox
@category{Gamma and factorial functions}
@closecatbox
@end deffn

@c NEED INFO HERE ABOUT THE SUBSCRIPTED FORM psi[n](x)
@c I (rtoy) don't think there is a plain psi(x) function anymore.
@c @deffn {Function} psi (@var{x})
@c @deffnx {Function} psi [@var{n}](@var{x})
@deffn {Function} psi [@var{n}](@var{x})

The derivative of @code{log (gamma (@var{x}))} of order @code{@var{n}+1}.
Thus, @code{psi[0](@var{x})} is the first derivative,
@code{psi[1](@var{x})} is the second derivative, etc.

Maxima does not know how, in general, to compute a numerical value of
@code{psi}, but it can compute some exact values for rational args.
Several variables control what range of rational args @code{psi} will
return an exact value, if possible.  See @code{maxpsiposint},
@code{maxpsinegint}, @code{maxpsifracnum}, and @code{maxpsifracdenom}.
That is, @var{x} must lie between @code{maxpsinegint} and
@code{maxpsiposint}.  If the absolute value of the fractional part of
@var{x} is rational and has a numerator less than @code{maxpsifracnum}
and has a denominator less than @code{maxpsifracdenom}, @code{psi}
will return an exact value.

The function @code{bfpsi} in the @code{bffac} package can compute
numerical values.

@opencatbox
@category{Gamma and factorial functions}
@closecatbox
@end deffn

@defvr {Option variable} maxpsiposint
Default value: 20

@code{maxpsiposint} is the largest positive value for which
@code{psi[n](x)} will try to compute an exact value.

@opencatbox
@category{Gamma and factorial functions}
@closecatbox

@end defvr

@defvr {Option variable} maxpsinegint
Default value: -10

@code{maxpsinegint} is the most negative value for which
@code{psi[n](x)} will try to compute an exact value.  That is if
@var{x} is less than @code{maxnegint}, @code{psi[n](@var{x})} will not
return simplified answer, even if it could.

@opencatbox
@category{Gamma and factorial functions}
@closecatbox

@end defvr

@defvr {Option variable} maxpsifracnum
Default value: 6

Let @var{x} be a rational number less than one of the form @code{p/q}.
If @code{p} is greater than @code{maxpsifracnum}, then
@code{psi[@var{n}](@var{x})} will not try to return a simplified
value.

@opencatbox
@category{Gamma and factorial functions}
@closecatbox

@end defvr

@defvr {Option variable} maxpsifracdenom
Default value: 6

Let @var{x} be a rational number less than one of the form @code{p/q}.
If @code{q} is greater than @code{maxpsifracdenom}, then
@code{psi[@var{n}](@var{x})} will not try to return a simplified
value.

@opencatbox
@category{Gamma and factorial functions}
@closecatbox

@end defvr

@c NEED CROSS REFS HERE
@c NEED EXAMPLES HERE
@deffn {Function} makefact (@var{expr})
Transforms instances of binomial, gamma, and beta
functions in @var{expr} into factorials.

See also @code{makegamma}.

@opencatbox
@category{Gamma and factorial functions}
@closecatbox
@end deffn


@c AREN'T THERE OTHER FUNCTIONS THAT DO ESSENTIALLY THE SAME THING ??
@deffn {Function} numfactor (@var{expr})
Returns the numerical factor multiplying the expression
@var{expr}, which should be a single term.

@c WHY IS content MENTIONED IN THIS CONTEXT ??
@code{content} returns the greatest common divisor (gcd) of all terms in a sum.

@example
(%i1) gamma (7/2);
                          15 sqrt(%pi)
(%o1)                     ------------
                               8
(%i2) numfactor (%);
                               15
(%o2)                          --
                               8
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn


@node Exponential Integrals, Functions and Variables for Special Functions, Gamma and factorial Functions, Special Functions
@section Exponential Integrals

The Exponential Integral and related funtions are defined in 
Abramowitz and Stegun,
@i{Handbook of Mathematical Functions}, Chapter 5

@deffn {Function} expintegral_e1 (@var{z})
The Exponential Integral E1(z) (A&S 5.1.1)
@opencatbox
@category{Exponential Integrals} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} expintegral_ei (@var{z})
The Exponential Integral Ei(z) (A&S 5.1.2)
@opencatbox
@category{Exponential Integrals} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} expintegral_li (@var{n},@var{z})
The Exponential Integral Li(z)  (A&S 5.1.3)
@opencatbox
@category{Exponential Integrals} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} expintegral_e (@var{n},@var{z})
The Exponential Integral En(z)  (A&S 5.1.4)
@opencatbox
@category{Exponential Integrals} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} expintegral_si (@var{z})
The Exponential Integral Si(z) (A&S 5.2.1)
@opencatbox
@category{Exponential Integrals} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} expintegral_ci (@var{z})
The Exponential Integral Ci(z) (A&S 5.2.2)
@opencatbox
@category{Exponential Integrals} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} expintegral_shi (@var{z})
The Exponential Integral Shi(z) (A&S 5.2.3)
@opencatbox
@category{Exponential Integrals} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} expintegral_chi (@var{z})
The Exponential Integral Chi(z) (A&S 5.2.4)
@opencatbox
@category{Exponential Integrals} @category{Special functions}
@closecatbox
@end deffn

@deffn {Function} expint (@var{z})
Depreciated. The Exponential Integral E1(z).  See expintegral_e1().
@end deffn

@defvr {Option variable} expintrep
Default value: false

Change the representation of the Exponential Integral to
  gamma_incomplete, expintegral_e1, expintegral_ei, 
  expintegral_li, expintegral_trig, expintegral_hyp
@opencatbox
@category{Exponential Integrals}
@closecatbox
@end defvr

@defvr {Option variable} expintexpand 
Default value: false

Expand the Exponential Integral E[n](z)
for half integral values in terms of Erfc or Erf and
for positive integers in terms of Ei 
@opencatbox
@category{Exponential Integrals}
@closecatbox
@end defvr

@node Error Function, Functions and Variables for Special Functions, Exponential Integrals, Special Functions
@section Functions and Variables for Special Functions

The Error function and related funtions are defined in 
Abramowitz and Stegun,
@i{Handbook of Mathematical Functions}, Chapter 7

@deffn {Function} erf (@var{z})
The Error Function erf(z) (A&S 7.1.1)

See also flag @code{erfflag}.
@opencatbox
@category{Special functions}
@closecatbox
@end deffn

@deffn {Function} erfc (@var{z})
The Complementary Error Function erfc(z) (A&S 7.1.2)

@code{erfc(z) = 1-erf(z)}
@opencatbox
@category{Special functions}
@closecatbox
@end deffn

@deffn {Function} erfi (@var{z})
The Imaginary Error Function. 

@code{erfi(z) = -%i*erf(%i*z)}
@opencatbox
@category{Special functions}
@closecatbox
@end deffn

@deffn {Function} erf_generalized (@var{z1},@var{z2})
Generalized Error function Erf(z1,z2)
@opencatbox
@category{Special functions}
@closecatbox
@end deffn

@node Functions and Variables for Special Functions,  , Error Function, Special Functions
@section Functions and Variables for Special Functions

@deffn {Function} asympa
@code{asympa} is a package for asymptotic analysis. The package contains
simplification functions for asymptotic analysis, including the ``big O''
and ``little o'' functions that are widely used in complexity analysis and
numerical analysis.

@code{load ("asympa")} loads this package.

@opencatbox
@category{Package asympa}
@closecatbox
@end deffn




@c NEED EXAMPLES HERE
@deffn {Function} intopois (@var{a})
Converts @var{a} into a Poisson encoding.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn




@c NEED EXAMPLES HERE
@deffn {Function} outofpois (@var{a})
Converts @var{a} from Poisson encoding to general
representation.  If @var{a} is not in Poisson form, @code{outofpois} carries out the conversion,
i.e., the return value is @code{outofpois (intopois (@var{a}))}.
This function is thus a canonical simplifier
for sums of powers of sine and cosine terms of a particular type.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@c NEED MORE INFO HERE
@c NEED EXAMPLES HERE
@deffn {Function} poisdiff (@var{a}, @var{b})
Differentiates @var{a} with respect to @var{b}. @var{b} must occur only
in the trig arguments or only in the coefficients.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@c LOOKING AT THE CODE IN src/pois3.lisp, THIS FCN SEEMS TO COMPUTE THE EXPONENT BY MULTIPLYING IN A LOOP
@c DUNNO HOW WE WANT TO EXPLAIN THAT
@c REPHRASE WITHOUT USING THE TERM "FUNCTIONALLY IDENTICAL"
@deffn {Function} poisexpt (@var{a}, @var{b})
Functionally identical to @code{intopois (@var{a}^@var{b})}.
@var{b} must be a positive integer.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@c WHAT IS THIS ABOUT ??
@deffn {Function} poisint (@var{a}, @var{b})
Integrates in a similarly restricted sense (to
@code{poisdiff}).  Non-periodic terms in @var{b} are dropped if @var{b} is in the trig
arguments.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@defvr {Option variable} poislim
Default value: 5

@code{poislim} determines the domain of the coefficients in
the arguments of the trig functions.  The initial value of 5
corresponds to the interval [-2^(5-1)+1,2^(5-1)], or [-15,16], but it
can be set to [-2^(n-1)+1, 2^(n-1)].

@opencatbox
@category{Poisson series}
@closecatbox

@end defvr

@c UMM, WHAT IS THIS ABOUT EXACTLY ?? EXAMPLES NEEDED
@deffn {Function} poismap (@var{series}, @var{sinfn}, @var{cosfn})
will map the functions @var{sinfn} on the
sine terms and @var{cosfn} on the cosine terms of the Poisson series given.
@var{sinfn} and @var{cosfn} are functions of two arguments which are a coefficient
and a trigonometric part of a term in series respectively.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@c REPHRASE WITHOUT USING THE TERM "FUNCTIONALLY IDENTICAL"
@deffn {Function} poisplus (@var{a}, @var{b})
Is functionally identical to @code{intopois (a + b)}.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@deffn {Function} poissimp (@var{a})
Converts @var{a} into a Poisson series for @var{a} in general
representation.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@c MORE INFO NEEDED HERE
@defvr {Special symbol} poisson
The symbol @code{/P/} follows the line label of Poisson series
expressions.

@opencatbox
@category{Poisson series}
@closecatbox
@end defvr

@deffn {Function} poissubst (@var{a}, @var{b}, @var{c})
Substitutes @var{a} for @var{b} in @var{c}.  @var{c} is a Poisson series.

(1) Where @var{B} is a variable @var{u}, @var{v}, @var{w}, @var{x}, @var{y}, or @var{z},
then @var{a} must be an
expression linear in those variables (e.g., @code{6*u + 4*v}).

(2) Where @var{b} is other than those variables, then @var{a} must also be
free of those variables, and furthermore, free of sines or cosines.

@code{poissubst (@var{a}, @var{b}, @var{c}, @var{d}, @var{n})} is a special type of substitution which
operates on @var{a} and @var{b} as in type (1) above, but where @var{d} is a Poisson
series, expands @code{cos(@var{d})} and @code{sin(@var{d})} to order @var{n} so as to provide the
result of substituting @code{@var{a} + @var{d}} for @var{b} in @var{c}.  The idea is that @var{d} is an
expansion in terms of a small parameter.  For example,
@code{poissubst (u, v, cos(v), %e, 3)} yields @code{cos(u)*(1 - %e^2/2) - sin(u)*(%e - %e^3/6)}.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@c REPHRASE WITHOUT USING THE TERM "FUNCTIONALLY IDENTICAL"
@deffn {Function} poistimes (@var{a}, @var{b})
Is functionally identical to @code{intopois (@var{a}*@var{b})}.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@c HOW DOES THIS WORK ?? NEED MORE INFO AND EXAMPLES
@deffn {Function} poistrim ()
is a reserved function name which (if the user has defined
it) gets applied during Poisson multiplication.  It is a predicate
function of 6 arguments which are the coefficients of the @var{u}, @var{v}, ..., @var{z}
in a term.  Terms for which @code{poistrim} is @code{true} (for the coefficients of
that term) are eliminated during multiplication.

@opencatbox
@category{Poisson series}
@closecatbox
@end deffn

@deffn {Function} printpois (@var{a})
Prints a Poisson series in a readable format.  In common
with @code{outofpois}, it will convert @var{a} into a Poisson encoding first, if
necessary.

@opencatbox
@category{Poisson series} @category{Display functions}
@closecatbox
@end deffn


@deffn {Function} specint (exp(- s*@var{t}) * @var{expr}, @var{t})

Compute the Laplace transform of @var{expr} with respect to the variable @var{t}.
The integrand @var{expr} may contain special functions.

If @code{specint} cannot compute the integral, the return value may
contain various Lisp symbols, including
@code{other-defint-to-follow-negtest},
@code{other-lt-exponential-to-follow},
@code{product-of-y-with-nofract-indices}, etc.; this is a bug.  
@c REPORTED AS SOURCEFORGE BUG # 1162505

@code{demo(hypgeo)} displays several examples of Laplace transforms computed by @code{specint}.

Examples:
@c ===beg===
@c assume (p > 0, a > 0);
@c specint (t^(1/2) * exp(-a*t/4) * exp(-p*t), t);
@c specint (t^(1/2) * bessel_j(1, 2 * a^(1/2) * t^(1/2)) 
@c               * exp(-p*t), t);
@c ===end===

@example
(%i1) assume (p > 0, a > 0);
(%o1)                    [p > 0, a > 0]
(%i2) specint (t^(1/2) * exp(-a*t/4) * exp(-p*t), t);
                           sqrt(%pi)
(%o2)                     ------------
                                 a 3/2
                          2 (p + -)
                                 4
(%i3) specint (t^(1/2) * bessel_j(1, 2 * a^(1/2) * t^(1/2))
              * exp(-p*t), t);
                                   - a/p
                         sqrt(a) %e
(%o3)                    ---------------
                                2
                               p
@end example

@opencatbox
@category{Laplace transform}
@closecatbox
@end deffn

@deffn {Function} hgfred (@var{a}, @var{b}, @var{t})

Simplify the generalized hypergeometric function in terms of other,
simpler, forms.  @var{a} is a list of numerator parameters and @var{b}
is a list of the denominator parameters. 

If @code{hgfred} cannot simplify the hypergeometric function, it returns
an expression of the form @code{%f[p,q]([a], [b], x)} where @var{p} is
the number of elements in @var{a}, and @var{q} is the number of elements
in @var{b}.  This is the usual @code{pFq} generalized hypergeometric
function. 

@example
(%i1) assume(not(equal(z,0)));
(%o1)                          [notequal(z, 0)]
(%i2) hgfred([v+1/2],[2*v+1],2*%i*z);

                     v/2                               %i z
                    4    bessel_j(v, z) gamma(v + 1) %e
(%o2)               ---------------------------------------
                                       v
                                      z
(%i3) hgfred([1,1],[2],z);

                                   log(1 - z)
(%o3)                            - ----------
                                       z
(%i4) hgfred([a,a+1/2],[3/2],z^2);

                               1 - 2 a          1 - 2 a
                        (z + 1)        - (1 - z)
(%o4)                   -------------------------------
                                 2 (1 - 2 a) z

@end example

It can be beneficial to load orthopoly too as the following example
shows.  Note that @var{L} is the generalized Laguerre polynomial.

@example
(%i5) load(orthopoly)$
(%i6) hgfred([-2],[a],z);

                                    (a - 1)
                                 2 L       (z)
                                    2
(%o6)                            -------------
                                   a (a + 1)
(%i7) ev(%);

                                  2
                                 z        2 z
(%o7)                         --------- - --- + 1
                              a (a + 1)    a

@end example

@end deffn

@deffn {Function} lambert_w (@var{z})
The principal branch of Lambert's W funtion W(z), the solution of 
@code{z = W(z) * exp(W(z))}.
@opencatbox
@category{Special functions}
@closecatbox
@end deffn
