@menu
* Introduction to Function Definition::  
* Function::                    
* Macros::                      
* Definitions for Function Definition::  
@end menu

@node Introduction to Function Definition, Function, Function Definition, Function Definition
@section Introduction to Function Definition

@node Function, Macros, Introduction to Function Definition, Function Definition
@section Function
 - To define a function in Maxima you use the := operator.
E.g.

@example
f(x) := sin(x)
@end example

@noindent
defines a function @code{f}.
Anonmyous functions may also be created using @code{lambda}.
For example

@example
lambda ([i, j], ...)
@end example

@noindent
can be used instead of @code{f}
where

@example
f(i,j) := block ([], ...);
map (lambda ([i], i+1), l)
@end example

@noindent
would return a list with 1 added to each term.

You may also define a function with a variable number of arguments,
by having a final argument which is assigned to a list of the extra
arguments:

@example
(%i1) f ([u]) := u;
(%o1)                      f([u]) := u
(%i2) f (1, 2, 3, 4);
(%o2)                     [1, 2, 3, 4]
(%i3) f (a, b, [u]) := [a, b, u];
(%o3)               f(a, b, [u]) := [a, b, u]
(%i4) f (1, 2, 3, 4, 5, 6);
(%o4)                 [1, 2, [3, 4, 5, 6]]
@end example

The right hand side of a function is an expression.  Thus
if you want a sequence of expressions, you do

@example
f(x) := (expr1, expr2, ...., exprn);
@end example

and the value of @var{exprn} is what is returned by the function.

If you wish to make a @code{return} from some expression inside the
function then you must use @code{block} and @code{return}.

@example
block ([], expr1, ..., if (a > 10) then return(a), ..., exprn)
@end example

is itelf an expression, and so could take the place of the
right hand side of a function definition.  Here it may happen
that the return happens earlier than the last expression.

@c COPY THIS STUFF TO @defun block AS NEEDED
@c ESPECIALLY STUFF ABOUT LOCAL VARIABLES
The first @code{[]} in the block, may contain a list of variables and
variable assignments, such as @code{[a: 3, b, c: []]}, which would cause the
three variables @code{a},@code{b},and @code{c} to not refer to their
global values, but rather have these special values for as long as the
code executes inside the @code{block}, or inside functions called from
inside the @code{block}.  This is called @i{dynamic} binding, since the
variables last from the start of the block to the time it exits.  Once
you return from the @code{block}, or throw out of it, the old values (if
any) of the variables will be restored.   It is certainly a good idea
to protect your variables in this way.   Note that the assignments
in the block variables, are done in parallel.   This means, that if
you had used @code{c: a} in the above, the value of @code{c} would
have been the value of @code{a} at the time you just entered the block,
but before @code{a} was bound.   Thus doing something like

@example
block ([a: a], expr1, ... a: a+3, ..., exprn)
@end example

will protect the external value of @code{a} from being altered, but
would let you access what that value was.   Thus the right hand
side of the assignments, is evaluated in the entering context, before
any binding occurs.
Using just @code{block ([x], ...} would cause the @code{x} to have itself
as value, just as if it would have if you entered a fresh @b{Maxima}
session.

The actual arguments to a function are treated in exactly same way as
the variables in a block.  Thus in

@example
f(x) := (expr1, ..., exprn);
@end example

and

@example
f(1);
@end example

we would have a similar context for evaluation of the expressions
as if we had done

@example
block ([x: 1], expr1, ..., exprn)
@end example

Inside functions, when the right hand side of a definition,
may be computed at runtime, it is useful to use @code{define} and
possibly @code{buildq}.  


@node Macros, Definitions for Function Definition, Function, Function Definition
@section Macros

@defun buildq (variables, expr);

@var{expr} is any single Maxima expression and
@var{variables} is a list of elements of the form @code{<atom>}
or @code{<atom>:<value>}.
@end defun

@subsection Semantics

The elements of the list @var{variables} are evaluated left to right (the syntax
@var{atom} is equivalent to @code{@var{atom}: @var{atom}}).  then these values are substituted
into <expression> in parallel.  If any @var{atom} appears as a single 
argument to the special form @code{splice} (i.e. @code{splice (@var{atom})}) inside
@var{expr}, then the value associated with that @var{atom} must be a Maxima
list, and it is spliced into @var{expr} instead of substituted.

@subsection Simplification

The arguments to @code{buildq} need to be protected from simplification until
the substitutions have been carried out.  This code should effect that
by using @code{'}.

@code{buildq} can be useful for building functions on the fly.  One
of the powerful things about @b{Maxima} is that you can have your
functions define other functions to help solve the problem.
Further below we discuss building a recursive function, for a
series solution.   This defining of functions inside functions
usually uses @code{define}, which evaluates its arguments.
A number of examples are included under @code{splice}.


@defun splice (atom)
This is used with buildq to construct a list. This is handy
for making argument lists, in conjunction with @code{buildq} 

@example
mprint ([x]) ::= buildq ([u : x],
  if (debuglevel > 3) print (splice (u)));
@end example

Including a call like

@example
mprint ("matrix is", mat, "with length", length(mat))
@end example

is equivalent to putting in the line

@example
if (debuglevel > 3) print ("matrix is", mat, "with length", length(mat));
@end example

A more non trivial example would try to display the variable values
and their names.  
@example
mshow (a, b, c) 
@end example

should become

@example
print ('a, "=", a, ",", 'b, "=", b, ", and", 'c, "=", c)
@end example

so that if it occurs as a line in a program we can print values.

@example
(%i1) foo (x,y,z) := mshow (x, y, z);
(%i2) foo (1, 2, 3);
x = 1 , y = 2 , and z = 3
@end example


The actual definition of mshow is the following.   Note how buildq
lets you build "quoted" structure, so that the  @code{'u} lets
you get the variable name.  Note that in macros, the result is
a piece of code which will then be substituted for the macro and evaluated.

@example
mshow ([l]) ::= block ([ans:[], n:length(l)],
    for i:1 thru n do
        (ans: append (ans, buildq ([u: l[i]], ['u, "=", u])),
        if i < n then
            ans: append (ans, if i < n-1 then [","] else [", and"])),
    buildq ([u:ans], print (splice(u))));
@end example

The splice also works to put arguments into algebraic operations:

@example
(%i1) buildq ([a: '[b, c, d]], +splice(a));
(%o1)                       d + c + b
@end example

Note how the simplification only occurs @i{after} the substitution,
The operation applying to the splice in the first cae is the @code{+}
while in the second it is the @code{*}, yet logically you
might think @code{splice(a)+splice(a)} could be replaced by
@code{2*splice(a)}.   No simplification takes place with the @code{buildq}.
To understand what @code{splice} is doing with the algebra you must understand
that for Maxima, a formula an operation like @code{a+b+c} is really
internally similar to @code{+(a,b,c)}, and similarly for multiplication.
Thus @code{*(2,b,c,d)} is @code{2*b*c*d}.

@example
(%i1) buildq ([a: '[b,c,d]], +splice(a));
(%o1)                       d + c + b
(%i2) buildq ([a: '[b,c,d]], splice(a)+splice(a));
(%o2)                    2 d + 2 c + 2 b
@end example

but

@example
(%i3) buildq ([a: '[b,c,d]], 2*splice(a));
(%o3)                        2 b c d
@end example

Finally @code{buildq} can be invaluable for building recursive functions.
Suppose your program is solving a differential equation using the
series method, and has determined that it needs to build a
recursion relation

@example
f[n] := -((n^2 - 2*n + 1)*f[n-1] + f[n-2] + f[n-3])/(n^2-n)
@end example

and it must do this on the fly inside your function.  Now you
would really like to add @code{expand}.

@example
f[n] := expand (-((n^2 - 2*n + 1)*f[n-1] + f[n-2] + f[n-3])/(n^2-n))
@end example

but how do you build this code.  You want the @code{expand}
to happen each time the function runs, @i{not} before it.

@example
(%i1) val: -((n^2 - 2*n + 1)*f[n-1] + f[n-2] + f[n-3])/(n^2-n)$
(%i2) define (f[n], buildq ([u: val], expand(u)))$
@end example

does the job.   This might be useful, since when you do
(with @code{expand})

@example
(%i3) f[0]: aa0$
(%i4) f[1]: aa1$
(%i5) f[2]: aa2$
(%i6) f[6];
                       3 aa2   aa1   7 aa0
(%o6)                  ----- + --- + -----
                        10     40     90
@end example

where as without it is kept unsimplified, and even after 6 terms
it becomes:

@example
(%i7) define (g[n], buildq ([u: val], u))$
(%i8) g[0]: bb0$
(%i9) g[1]: bb1$
(%i10) g[2]: bb2$
(%i11) g[6];
          aa2         7 aa2   aa1   11 aa0    aa1   aa0
          --- - 25 (- ----- - --- - ------) + --- + ---
           4           20     40     120       8    24
(%o11)    ---------------------------------------------
                               30
(%i12) expand (%);
                       3 aa2   aa1   7 aa0
(%o12)                 ----- + --- + -----
                        10     40     90
@end example

The expression quickly becomes complicated if not simplified at
each stage, so the simplification must be part of the definition.
Hence the @code{buildq} is useful for building the form.
@end defun


@c end concepts Function Definition
@node Definitions for Function Definition,  , Macros, Function Definition
@section Definitions for Function Definition
@defun apply (function, list)
gives the result of applying the function to
the list of its arguments.  This is useful when it is desired to
compute the arguments to a function before applying that function.
For example, if @code{l} is the list @code{[1, 5, -10.2, 4, 3]}, then @code{apply (min, l)}
gives -10.2.  @code{apply} is also useful when calling functions which do not
have their arguments evaluated if it is desired to cause evaluation of
them.  For example, if @code{filespec} is a variable bound to the list @code{[test,
case]} then @code{apply (closefile, filespec)} is equivalent to
@code{closefile (test, case)}.  In general the first argument to @code{apply} should
be preceded by a ' to make it evaluate to itself.  Since some atomic
variables have the same name as certain functions the values of the
variable would be used rather than the function because @code{apply} has its
first argument evaluated as well as its second.

@end defun


@defun block ([v_1, ..., v_m], expr_1, ..., expr_n)
@defunx block (expr_1, ..., expr_n)
@code{block} evaluates @var{expr_1}, ..., @var{expr_n} in sequence
and returns the value of the last expression evaluated.
The sequence can be modified by the @code{go}, @code{throw}, and @code{return} functions.
The last expression is @var{expr_n} unless @code{return} or an expression containing @code{throw}
is evaluated.
Some variables @var{v_1}, ..., @var{v_m} can be declared local to the block;
these are distinguished from global variables of the same names.
If no variables are declared local then the list may be omitted.
Within the block,
any variable other than @var{v_1}, ..., @var{v_m} is a global variable.

@code{block} saves the current values of the variables @var{v_1}, ..., @var{v_m} (if any)
upon entry to the block,
then unbinds the variables so that they evaluate to themselves.
The local variables may be bound to arbitrary values within the block but when the
block is exited the saved values are restored,
and the values assigned within the block are lost.

@code{block} may appear within another @code{block}.
Local variables are established each time a new @code{block} is evaluated.
Local variables appear to be global to any enclosed blocks.
If a variable is non-local in a block,
its value is the value most recently assigned by an enclosing block, if any,
otherwise, it is the value of the variable in the global environment.
This policy may coincide with the usual understanding of "dynamic scope".

If it is desired to save and restore other local properties
besides @code{value}, for example @code{array} (except for complete arrays),
@code{function}, @code{dependencies}, @code{atvalue}, @code{matchdeclare}, @code{atomgrad}, @code{constant}, and
@code{nonscalar} then the function @code{local} should be used inside of the block
with arguments being the names of the variables.

The value of the block is the value of the last statement or the
value of the argument to the function @code{return} which may be used to exit
explicitly from the block. The function @code{go} may be used to transfer
control to the statement of the block that is tagged with the argument
to @code{go}.  To tag a statement, precede it by an atomic argument as
another statement in the block.  For example:
@code{block ([x], x:1, loop, x: x+1, ..., go(loop), ...)}.  The argument to @code{go} must
be the name of a tag appearing within the block.  One cannot use @code{go} to
transfer to a tag in a block other than the one containing the @code{go}.

Blocks typically appear on the right side of a function definition
but can be used in other places as well.

@end defun

@defun break (arg1, ...)
will evaluate and print its arguments and will then
cause a Maxima break at which point the user can examine and change
his environment.  Upon typing @code{exit;} the computation resumes.

@end defun

@c FOR SOME REASON throw IS IN SOME OTHER FILE. MOVE throw INTO THIS FILE.
@defun catch (expr_1, ..., expr_n)
evaluates its arguments one by one; if the
structure of the arguments leads to the evaluation of an expression of the
form @code{throw (arg)}, then the value of the @code{catch} is the value of
@code{throw (arg)}.  This "non-local return" thus goes through any depth of
nesting to the nearest enclosing @code{catch}.
If there is no @code{catch} enclosing a @code{throw}, an error message is printed.
If the evaluation of the arguments does not lead to the evaluation of any @code{throw}
then the value of @code{catch} is the value of @var{expr_n}.

@example
(%i1) lambda ([x], if x < 0 then throw(x) else f(x))$
(%i2) g(l) := catch (map (''%, l))$
(%i3) g ([1, 2, 3, 7]);
(%o3)               [f(1), f(2), f(3), f(7)]
(%i4) g ([1, 2, -3, 7]);
(%o4)                          - 3
@end example

@c REWORD THIS PART.
The function @code{g} returns a list of @code{f} of each element of @code{l} if @code{l}
consists only of non-negative numbers; otherwise, @code{g} "catches" the
first negative element of @code{l} and "throws" it up.

@end defun

@c COME BACK TO THIS POINT. SKIPPING FORWARD.
@defun compfile (filename, f_1, ..., f_n)
Compiles functions @var{f_1}, ..., @var{f_n} into
the file @var{filename}.  For convenience, see the @code{compile} function.

@end defun

@c THIS VARIABLE IS OBSOLETE: ASSIGNING compgrind: true CAUSES compfile
@c TO EVENTUALLY CALL AN OBSOLETE FUNCTION SPRIN1.
@c RECOMMENDATION IS TO CUT THIS ITEM, AND CUT $compgrind FROM src/transs.lisp
@c @defvar compgrind
@c Default value: @code{false}
@c 
@c When @code{compgrind} is @code{true}, function definitions printed by
@c @code{compfile} are pretty-printed.
@c 
@c @end defvar

@defun compile (@var{f_1}, ..., @var{f_n})
@defunx compile (functions)
@defunx compile (all)
Translates Maxima functions into Lisp, executes the Lisp compiler,
and loads the compiler output into Maxima.
@code{compile} returns a list of the names of the compiled functions.

@code{compile (@var{f_1}, ..., @var{f_n})} compiles the functions @var{f_1}, ..., @var{f_n}.
@c REALLY ???
It uses the name of function1 as the first name of the file to put the Lisp output.

@code{compile (all)} or @code{compile (functions)} compiles all user-defined functions.

@code{compile} quotes its arguments; 
the double-single-quotes operator @code{'@w{}'} defeats quotation.

@end defun

@defun compile_lisp_file ("input filename")
which takes an optional second
argument of "output filename," can be used in conjunction with

@example
TRANSLATE_FILE("filename").
@end example
For convenience you might define

@example
Compile_and_load(FILENAME):=
    LOAD(COMPILE_LISP_FILE(TRANSLATE_FILE(FILENAME)[2]))[2]);
@end example

These file-oriented commands are to be preferred over the use of
@code{compile}, @code{compfile}, and the @code{translate} @code{save} combination.

@end defun

@defun define (f(x1, ...), body)
is equivalent to f(x1,...):='@w{}'(body) but when
used inside functions it happens at execution time rather than at the
time of definition of the function which contains it.

@end defun

@defun define_variable (name,default-binding,mode,optional-documentation)

introduces a global variable into the Maxima environment.  This is
for user-written packages, which are often translated or compiled.
Thus
@example
DEFINE_VARIABLE(FOO,TRUE,BOOLEAN);
@end example
does the following:

(1) @code{mode_declare (foo, boolean)} sets it up for the translator.

(2) If the variable is unbound, it sets it: @code{foo: true}.

(3) @code{declare (foo, special)} declares it special.

(4) Sets up an assign property for it to make sure that it never 
    gets set to a value of the wrong mode.
    E.g. @code{foo: 44} would be an error once @code{foo} is defined @code{boolean}.

See @code{mode_declare} for a list of the possible "modes".
The optional 4th argument is a documentation string.  When
@code{translate_file} is used on a package which includes documentation
strings, a second file is output in addition to the Lisp file which
will contain the documentation strings, formatted suitably for use in
manuals, usage files, or (for instance) @code{describe}.
With any variable which has been @code{define_variable}'d with mode other
than @code{any}, you can give a @code{value_check} property, which is a function of
one argument called on the value the user is trying to set the
variable to.

@example
PUT('G5,LAMBDA([U],IF U#'G5 THEN ERROR("Don't set G5")),
       'VALUE_CHECK);
@end example

Use @code{define_variable (g5, 'g5, any_check, "this ain't supposed to be set by anyone but me.")}
@code{any_check} is a mode which means the same as @code{any}, but which keeps
@code{define_variable} from optimizing away the assign property.

@end defun

@defun dispfun (f1, f2, ...)
displays the definition of the user defined
functions f1, f2, ... which may also be the names of array associated
functions, subscripted functions, or functions with constant
subscripts which are the same as those used when the functions were
defined.  @code{dispfun (all)} will display all user defined functions as
given on the @code{functions} and @code{arrays} lists except subscripted functions
with constant subscripts.  E.g. if the user has defined a function
@code{f}, @code{dispfun (f)} will display the definition.

@end defun

@defvar functions
Default value: []

@code{functions} is the list of all user defined functions.
A user-defined function is a function constructed by
@code{define} or @code{:=}.

@end defvar

@defun fundef (functionname)
returns the function definition associated
with @var{functionname}.  @code{fundef (f)} is similar to @code{dispfun (f)}
except that @code{fundef} does not invoke @code{display}.

@end defun

@defun funmake (name, [arg_1, ..., arg_n])
returns @code{@var{name} (@var{arg_1}, ..., @var{arg_n})} without
calling the function @var{name}.

@end defun

@defun local (v_1, v_2, ...)
causes the variables @var{v_1}, @var{v_2}, ... to be local with
respect to all the properties in the statement in which this function
is used.  @code{local} may only be used in @code{block}, in the body of function
definitions or @code{lambda} expressions, or in the @code{ev} function and only one
occurrence is permitted in each.  @code{local} is independent of @code{context}.

@end defun

@defvar macroexpansion
Default value: @code{false}

@code{macroexpansion} controls advanced features which
affect the efficiency of macros. Possible settings:

@itemize @bullet
@item
@code{false} -- Macros expand normally each time they are called.
@item
@code{expand} -- The first time a particular call is evaluated, the
expansion is remembered internally, so that it doesn't have to be
recomputed on subsequent calls making subsequent calls faster.  The
macro call still calls @code{grind} and @code{display} normally. However, extra memory is
required to remember all of the expansions.
@item
@code{displace} -- The first time a particular call is evaluated, the
expansion is substituted for the call.  This requires slightly less
storage than when @code{macroexpansion} is set to @code{expand} and is just as fast,
but has the disadvantage that the original macro call is no longer
remembered and hence the expansion will be seen if @code{display} or @code{grind} is
called.  See documentation for @code{translate} and @code{macros} for more details.
@end itemize

@end defvar

@defvar mode_checkp
Default value: @code{true}

When @code{mode_checkp} is @code{true}, @code{mode_declare} checks the modes
of bound variables.

@end defvar

@defvar mode_check_errorp
Default value: @code{false}

When @code{mode_check_errorp} is @code{true}, @code{mode_declare} calls
error.

@end defvar

@defvar mode_check_warnp
Default value: @code{true}

When @code{mode_check_warnp} is @code{true}, mode errors are
described.

@end defvar

@defun mode_declare (y_1, mode_1, y_2, mode_2, ...)
@code{modedeclare} is a synonym
for this.  @code{mode_declare} is used to declare the modes of variables and
functions for subsequent translation or compilation of functions. Its
arguments are pairs consisting of a variable and a mode which is
one of @code{boolean}, @code{fixnum}, @code{number}, @code{rational}, or @code{float}.
Each variable may also
be a list of variables all of which are declared to have the same mode.
@c WHAT DOES THE FOLLOWING STATEMENT MEAN ???
If a variable is an array, and if every element of the array which is
referenced has a value then @code{array (yi, complete, dim1, dim2, ...)}
rather than
@example
array(yi, dim1, dim2, ...)
@end example
should be used when first
declaring the bounds of the array.  If all the elements of the array
are of mode @code{fixnum} (@code{float}), use @code{fixnum} (@code{float}) instead of @code{complete}.
Also if every element of the array is of the same mode, say @code{m}, then

@example
mode_declare (completearray (yi), m))
@end example

should be used for efficient
translation.  Also numeric code using arrays can be made to run faster
by declaring the expected size of the array, as in:

@example
mode_declare (completearray (a [10, 10]), float)
@end example

for a floating point number array which is 10 x 10.
Additionally one may declare the mode of the result of a function by
using @code{function (f_1, f_2, ...)} as an argument;
here @code{f_1}, @code{f_2}, ... are the names
of functions.  For example the expression,

@example
mode_declare ([function (f_1, f_2, ...), x],
    fixnum, q, completearray(q), float)
@end example

declares that @code{x} and the values returned by @code{f_1}, @code{f_2}, ... are single-word
integers and that @code{q} is an array of floating point numbers.
@code{mode_declare} is used either immediately inside of a function
definition or at top-level for global variables.

@end defun

@defun mode_identity (arg_1, arg_2)
A special form used with @code{mode_declare} and
@code{macros} to declare, e.g., a list of lists of flonums, or other compound
data object.  The first argument to @code{mode_identity} is a primitive value
mode name as given to @code{mode_declare} (i.e., one of @code{float}, @code{fixnum}, @code{number},
@code{list}, or @code{any}), and the second argument is an expression which is
evaluated and returned as the value of @code{mode_identity}.  However, if the
return value is not allowed by the mode declared in the first
argument, an error or warning is signalled.  The important thing is
that the mode of the expression as determined by the Maxima to Lisp
translator, will be that given as the first argument, independent of
anything that goes on in the second argument.
E.g., @code{x: 3.3; mode_identity (fixnum, x);} yields an error. @code{mode_identity (flonum, x)}
returns 3.3 . 
This has a number of uses, e.g., if you knew that @code{first (l)} returned a
number then you might write @code{mode_identity (number, first (l))}.  However,
a more efficient way to do it would be to define a new primitive,

@example
firstnumb (x) ::= buildq ([x], mode_identity (number, x));
@end example

and use @code{firstnumb}
every time you take the first of a list of numbers.

@end defun

@defvar transbind
Default value: @code{false}

When @code{transbind} is @code{true} removes global declarations in
the local context.  This applies to variables which are formal
parameters to functions which one is @code{translate}-ing from Maxima code
to Lisp.

@end defvar

@defvar transcompile
Default value: @code{false}

When @code{transcompile} is @code{true}, @code{translate} will generate the
declarations necessary for possible compilation.  The @code{compfile} command
uses @code{transcompile: true}.

@end defvar

@defun translate (@var{f_1}, ..., @var{f_n})
Translates the user defined functions
@var{f_1}, ..., @var{f_n} from the Maxima language into Lisp.
Typically the translated functions run faster than the originals.

Functions to be translated should include a call to @code{mode_declare} at the
beginning when possible in order to produce more efficient code.  For
example:

@example
f (x_1, x_2, ...) := block ([v_1, v_2, ...],
    mode_declare (v_1, mode_1, v_2, mode_2, ...), ...)
@end example

@noindent

where the @var{x_1}, @var{x_2}, ...  are the parameters to the function and the
@var{v_1}, @var{v_2}, ... are the local variables.

The names of translated functions
are removed from the @code{functions} list if @code{savedef} is @code{false} (see below)
and are added to the @code{props} lists.

Functions should not be translated
unless they are fully debugged.

Expressions are assumed simplified; if they are not, correct but non- optimal code gets
generated.  Thus, the user should not set the @code{simp} switch to @code{false}
which inhibits simplification of the expressions to be translated.

The switch @code{translate}, if @code{true}, causes automatic
translation of a user's function to Lisp.

Note that translated
functions may not run identically to the way they did before
translation as certain incompatabilities may exist between the Lisp
and Maxima versions.  Principally, the @code{rat} function with more than
one argument and the @code{ratvars} function should not be used if any
variables are @code{mode_declare}'d canonical rational expressions (CRE).
Also the @code{prederror: false} setting
will not translate.
@c WHAT ABOUT % AND %% ???

@code{savedef} - if @code{true} will cause the Maxima version of a user
function to remain when the function is @code{translate}'d.  This permits the
definition to be displayed by @code{dispfun} and allows the function to be
edited.

@code{transrun} - if @code{false} will cause the interpreted version of all
functions to be run (provided they are still around) rather than the
translated version.

The result returned by @code{translate} is a list of the names of the
functions translated.

@end defun

@defun translate_file (@var{maxima_filename})
@defunx translate_file (@var{maxima_filename}, @var{lisp_filename})
Translates a file of Maxima code into a file of Lisp code.
@code{translate_file} returns a list of three filenames:
the name of the Maxima file, the name of the Lisp file, and the name of file
containing additional information about the translation.
@code{translate_file} does not quote its arguments.

@code{translate_file ("foo.mac"); load("foo.LISP")} is the same as
@code{batch ("foo.mac")} except for certain restrictions,
the use of @code{'@w{}'} and @code{%}, for example.
@c FIGURE OUT WHAT THE RESTRICTIONS ARE AND STATE THEM

@code{translate_file (@var{maxima_filename})} translates a Maxima file @var{maxima_filename}
into a similarly-named Lisp file.
For example, @code{foo.mac} is translated into @code{foo.LISP}.
The Maxima filename may include a directory name or names,
in which case the Lisp output file is written
to the same directory from which the Maxima input comes.

@code{translate_file (@var{maxima_filename}, @var{lisp_filename})} translates
a Maxima file @var{maxima_filename} into a Lisp file @var{lisp_filename}.
@code{translate_file} ignores the filename extension, if any, of @code{lisp_filename};
the filename extension of the Lisp output file is always @code{LISP}.
The Lisp filename may include a directory name or names,
in which case the Lisp output file is written to the specified directory.

@code{translate_file} also writes a file of translator warning
messages of various degrees of severity.
The filename extension of this file is @code{UNLISP}.
This file may contain valuable information, though possibly obscure,
for tracking down bugs in translated code.
The @code{UNLISP} file is always written
to the same directory from which the Maxima input comes.

@c CHECK ALL THESE AND SEE WHICH ONES ARE OBSOLETE
See also @code{tr_array_as_ref}, @code{tr_bind_mode_hook}, 
@code{tr_bound_function_applyp}, @code{tr_exponent}, @code{tr_file_tty_messagesp}, 
@code{tr_float_can_branch_complex}, @code{tr_function_call_default}, 
@code{tr_gen_tags}, @code{tr_numer}, @code{tr_optimize_max_loop}, 
@code{tr_predicate_brain_damage}, 
@code{tr_semicompile}, @code{tr_state_vars}, 
@code{tr_true_name_of_file_being_translated},
@code{tr_warnings_get}, @code{tr_warn_bad_function_calls}, @code{tr_warn_fexpr}, 
@code{tr_warn_meval}, @code{tr_warn_mode}, @code{tr_warn_undeclared}, 
@code{tr_warn_undefined_variable}, and @code{tr_windy}.

@end defun

@defvar transrun
Default value: @code{true}

When @code{transrun} is @code{false} will cause the interpreted
version of all functions to be run (provided they are still around)
rather than the translated version.

@end defvar

@defvar tr_array_as_ref
Default value: @code{true}

When @code{tr_array_as_ref} is @code{true} runtime code uses the value
of the variable as the array.

@end defvar

@defvar tr_bound_function_applyp
Default value: @code{true}

When @code{tr_bound_function_applyp} is @code{true}, Maxima gives a warning if a bound
variable is found being used as a function.

@end defvar

@defvar tr_file_tty_messagesp
Default value: @code{false}

When @code{tr_file_tty_messagesp} is @code{true},
messages generated by @code{translate_file} during translation of a file are displayed
on the console and inserted into the UNLISP file. 
When @code{false}, messages about translation of the
file are only inserted into the UNLISP file.

@end defvar

@defvar tr_float_can_branch_complex
Default value: @code{true}

- States whether the arc
functions might return complex results.  The arc functions are @code{sqrt},
@code{log}, @code{acos}, etc.  e.g. When it is @code{true} then @code{acos(x)} will be of mode @code{any}
even if X is of mode @code{float}. When @code{false} then @code{acos(x)} will be of mode
@code{float} if and only if X is of mode @code{float}.

@end defvar

@defvar tr_function_call_default
Default value: @code{general}

- @code{false} means give up and
call @code{meval}, @code{expr} means assume Lisp fixed arg function.  @code{general}, the
default gives code good for @code{mexprs} and @code{mlexprs} but not @code{macros}.
@code{general} assures variable bindings are correct in compiled code.  In
@code{general} mode, when translating F(X), if F is a bound variable, then it
assumes that @code{apply (f, [x])} is meant, and translates a such, with
apropriate warning. There is no need to turn this off.  With the
default settings, no warning messages implies full compatibility of
translated and compiled code with the Maxima interpreter.

@end defvar

@defvar tr_gen_tags
Default value: @code{false}

When @code{tr_gen_tags} is @code{true}, @code{translate_file} generates a
@code{tags} file for use by the text editor.

@end defvar

@defvar tr_numer
Default value: @code{false}

When @code{tr_numer} is @code{true} numer properties are used for
atoms which have them, e.g. @code{%pi}.

@end defvar

@defvar tr_optimize_max_loop
Default value: 100

@code{tr_optimize_max_loop} is the maximum number of times the
macro-expansion and optimization pass of the translator will loop in
considering a form.  This is to catch macro expansion errors, and
non-terminating optimization properties.

@end defvar

@c OBSOLETE: USED ONLY IN A MACRO trlisp-outputname-d1 IN src/transs.lisp
@c WHICH IS NEVER USED
@c @defvar tr_output_file_default
@c Default value: @code{trlisp}
@c 
@c @code{tr_output_file_default} is the second file
@c name to be used for translated Lisp output.
@c 
@c @end defvar

@defvar tr_predicate_brain_damage
Default value: @code{false}

When @code{tr_predicate_brain_damage} is @code{true}, output possible
multiple evaluations in an attempt to interface to the @code{compare}
package.

@end defvar

@defvar tr_semicompile
Default value: @code{false}

When @code{tr_semicompile} is @code{true}, @code{translate_file} and @code{compfile}
output forms which will be macroexpanded but not compiled into machine
code by the Lisp compiler.

@end defvar

@defvar tr_state_vars
Default value:
@example
[transcompile, tr_semicompile, tr_warn_undeclared, tr_warn_meval,
tr_warn_fexpr, tr_warn_mode, tr_warn_undefined_variable,
tr_function_call_default, tr_array_as_ref,tr_numer]
@end example

The list of the switches that affect the form of the
translated output.
@c DOES THE GENERAL USER REALLY CARE ABOUT DEBUGGING THE TRANSLATOR ???
This information is useful to system people when
trying to debug the translator.  By comparing the translated product
to what should have been produced for a given state, it is possible to
track down bugs.

@end defvar

@defvar tr_true_name_of_file_being_translated
Default value: @code{false}

@code{tr_true_name_of_file_being_translated} is bound to
the quoted string form of the true name of the file most recently
translated by @code{translate_file}.

@end defvar

@c tr_version IS OBSOLETE: $tr_version APPEARS IN src/transs.lisp BUT 
@c IT IS NEVER ASSIGNED A VALUE. CUT THIS OUT BUT BE SURE TO NOTE IT IN CVS LOG SUMMARY.
@c @defvar tr_version
@c 
@c @code{tr_version} is the version number of the translator.
@c 
@c @end defvar

@defun tr_warnings_get ()
Prints a list of warnings which have been given by
the translator during the current translation.

@end defun

@defvar tr_warn_bad_function_calls
Default value: @code{true}

- Gives a warning when
when function calls are being made which may not be correct due to
improper declarations that were made at translate time.

@end defvar

@defvar tr_warn_fexpr
Default value: @code{compfile}

- Gives a warning if any FEXPRs are
encountered.  FEXPRs should not normally be output in translated code,
all legitimate special program forms are translated.

@end defvar

@defvar tr_warn_meval
Default value: @code{compfile}

- Gives a warning if the function
@code{meval} gets called.  If @code{meval} is called that indicates problems in the
translation.

@end defvar

@defvar tr_warn_mode
Default value: @code{all}

- Gives a warning when variables are
assigned values inappropriate for their mode.

@end defvar

@defvar tr_warn_undeclared
Default value: @code{compile}

- Determines when to send
warnings about undeclared variables to the TTY.

@end defvar

@defvar tr_warn_undefined_variable
Default value: @code{all}

- Gives a warning when
undefined global variables are seen.

@end defvar

@defvar tr_windy
Default value: @code{true}

- Generate "helpfull" comments and
programming hints.

@end defvar

@defvar undeclaredwarn
Default value: @code{compfile}

- A switch in the translator.
There are four relevant settings:

@itemize @bullet
@item
@code{false} -- never print warning messages. 
@item
@code{compfile} --  warn when in @code{compfile}.
@item
@code{translate} -- warn when in @code{translate} and when @code{translate: true}.
@item
@code{all} -- warn in @code{compfile} and @code{translate}.
@end itemize

Do @code{mode_declare (<variable>, any)} to declare a variable to be a general 
Maxima variable (i.e. not limited to being @code{float} or @code{fixnum}).  The extra 
work in declaring all your variables in code  to be compiled should pay 
off.

@end defvar

@defun compile_file (filename)
@defunx compile_file (filename, output_filename)
It takes @var{filename} which
contains Maxima code, and translates this to Lisp and then compiles the
result.  It returns a list of the names of four files: the original file, translation,
notes on translation, and the compiled code.

@end defun

@defun declare_translated (f_1, f_2, ...)
When translating a file of Maxima code
to Lisp, it is important for the translator to know which functions it
sees in the file are to be called as translated or compiled functions,
and which ones are just Maxima functions or undefined.  Putting this
declaration at the top of the file, lets it know that although a symbol
does which does not yet have a Lisp function value, will have one at
call time.  (MFUNCTION-CALL fn arg1 arg2.. ) is generated when
the translator does not know fn is going to be a Lisp function.

@end defun
