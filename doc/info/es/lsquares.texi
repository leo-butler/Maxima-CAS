@c English version 1.2
@menu
* Funciones y variables para lsquares::
@end menu

@node Funciones y variables para lsquares,  , lsquares, lsquares
@section Funciones y variables para lsquares


@defvr {Variable global} DETCOEF

Esta variable es utilizada por las funciones @code{lsquares} y @code{plsquares} para almacenar el @i{coeficiente de determinaci@'on} que mide la bondad del ajuste, el cual var@'{@dotless{i}}a entre 0 (ausencia de correlaci@'on) y 1 (dependencia exacta).

Cuando se llama a @code{plsquares} con una lista de variables dependientes, @var{DETCOEF} almacena una lista de coeficientes de determinaci@'on. V@'ease @code{plsquares} para m@'as detalles.

V@'ease tambi@'en @code{lsquares}.
@end defvr


@deffn {Funci@'on} lsquares (@var{Mat},@var{VarList},@var{equation},@var{ParamList})
@deffnx {Funci@'on} lsquares (@var{Mat},@var{VarList},@var{equation},@var{ParamList},@var{GuessList})
Ajuste de una funci@'on multivariante a una tabla de datos por el m@'etodo de los @i{m@'{@dotless{i}}nimos cuadrados}.  @var{Mat} es la matriz con los datos emp@'{@dotless{i}}ricos, @var{VarList} es la lista con los nombres de las variables (una por cada columna de @var{Mat}), @var{equation} es la funci@'on a ajustar, la cual debe estar expresada en cualquiera de las formas @code{depvar=f(indepvari,..., paramj,...)}, @code{g(depvar)=f(indepvari,..., paramj,...)} o @code{g(depvar, paramk,...)=f(indepvari,..., paramj,...)}), @var{ParamList} es la lista de los par@'ametros a estimar y @var{GuessList} es una lista opcional de aproximaciones iniciales de los par@'ametros; cuando este @'ultimo argumento est@'a presente, se utiliza @code{mnewton} en lugar de @code{solve} a fin de obtener los par@'ametros.

La funci@'on puede ser no lineal con respecto a las variables, tanto independientes como dependiente. Al objeto de utilizar @code{solve()} las funciones deben ser lineales o polin@'omicas respecto de los par@'ametros. Funciones como @code{y=a*b^x+c} pueden ajustarse para @code{[a,b,c]} con @code{solve} si los valores @code{x} son enteros positivos peque@~nos y hay pocos datos (v@'ease el ejemplo en @code{lsquares.dem}). La funci@'on @code{mnewton} permite ajustar una funci@'on no lineal respecto de los par@'ametros, pero deber@'a suministr@'arsele un conjunto de buenas aproximaciones iniciales.

Si es posible se retornar@'a la funci@'on ajustada. En caso de existir m@'as de una soluci@'on, se devolver@'a una lista de funciones. El @i{coeficiente de determinaci@'on} se mostrar@'a tambi@'en a fin de aportar informaci@'on sobre la bondad del ajuste, el cual var@'{@dotless{i}}a entre 0 (ausencia de correlaci@'on) y 1 (ajuste exacto); este valor se almacena tambi@'en en la variable global @var{DETCOEF}.


Ejemplos utilizando @code{solve}:
@example
(%i1) load("lsquares")$

(%i2) lsquares(matrix([1,2,0],[3,5,4],[4,7,9],[5,8,10]),
               [x,y,z], z=a*x*y+b*x+c*y+d, [a,b,c,d]);
      Determination Coefficient = 1.0
                    x y + 23 y - 29 x - 19
(%o2)           z = ----------------------
                              6
(%i3) lsquares(matrix([0,0],[1,0],[2,0],[3,8],[4,44]),
               [n,p], p=a4*n^4+a3*n^3+a2*n^2+a1*n+a0,
         [a0,a1,a2,a3,a4]);
      Determination Coefficient = 1.0
                     4       3      2
                  3 n  - 10 n  + 9 n  - 2 n
(%o3)         p = -------------------------
                              6
(%i4) lsquares(matrix([1,7],[2,13],[3,25]), 
               [x,y], (y+c)^2=a*x+b, [a,b,c]);
      Determination Coefficient = 1.0
(%o4) [y = 28 - sqrt(657 - 216 x),
                                y = sqrt(657 - 216 x) + 28]
(%i5) lsquares(matrix([1,7],[2,13],[3,25],[4,49]),
               [x,y], y=a*b^x+c, [a,b,c]);
      Determination Coefficient = 1.0
                              x
(%o5)                  y = 3 2  + 1
@end example


Ejemplos utilizando @code{mnewton}:
@example
(%i6) load("lsquares")$

(%i7) lsquares(matrix([1.1,7.1],[2.1,13.1],[3.1,25.1],[4.1,49.1]),
               [x,y], y=a*b^x+c, [a,b,c], [5,5,5]);
                                             x
(%o7) y = 2.799098974610482 1.999999999999991
                                        + 1.099999999999874
(%i8) lsquares(matrix([1.1,4.1],[4.1,7.1],[9.1,10.1],[16.1,13.1]),
               [x,y], y=a*x^b+c, [a,b,c], [4,1,2]);
                             .4878659755898127
(%o8) y = 3.177315891123101 x
                                        + .7723843491402264
(%i9) lsquares(matrix([0,2,4],[3,3,5],[8,6,6]),
              [m,n,y], y=(A*m+B*n)^(1/3)+C, [A,B,C], [3,3,3]);
                                                     1/3
(%o9) y = (3.999999999999862 n + 4.999999999999359 m)
                                         + 2.00000000000012
@end example

Antes de hacer uso de esta funci@'on ejec@'utese  @code{load("lsquares")}. V@'eanse tambi@'en @code{DETCOEF} y @code{mnewton}.
@end deffn


@deffn {Funci@'on} plsquares (@var{Mat},@var{VarList},@var{depvars})
@deffnx {Funci@'on} plsquares (@var{Mat},@var{VarList},@var{depvars},@var{maxexpon})
@deffnx {Funci@'on} plsquares (@var{Mat},@var{VarList},@var{depvars},@var{maxexpon},@var{maxdegree})
Ajuste de una funci@'on polin@'omica multivariante a una tabla de datos por el m@'etodo de los @i{m@'{@dotless{i}}nimos cuadrados}. @var{Mat} es la matriz con los datos emp@'{@dotless{i}}ricos, @var{VarList} es la lista con los nombres de las variables (una por cada columna de @var{Mat}, pero @'usese @code{-} en lugar de los nombres de variables para ignorar las columnas de @var{Mat}), @var{depvars} es el nombre de la variable dependiente o una lista con uno o m@'as nombres de variables dependientes (cuyos nombres deben estar tambi@'en en @var{VarList}), @var{maxexpon} es un argumento opcional para indicar el m@'aximo exponente para cada una de las variables independientes (1 por defecto) y  @var{maxdegree} es otro argumento opcional para el grado del polinomio (@var{maxexpon} por defecto); n@'otese que la suma de exponentes de cada t@'ermino debe ser igual o menor que @var{maxdegree}. Si @code{maxdgree = 0} entonces no se aplicar@'a ning@'un l@'{@dotless{i}}mite.

Si @var{depvars} es el nombre de una variable dependiente (no en una lista), @code{plsquares} devuelve el polinomio ajustado. Si @var{depvars} es una lista de una o m@'as variables dependientes, @code{plsquares} devuelve una lista con los polinomios ajustados. Los coeficientes de determinaci@'on se muestran en su orden correspondiente para informar sobre la bondad del ajuste. Estos valores se almacenan tambi@'en en la variable global @var{DETCOEF}; en un formato de lista si @var{depvars} es a su vez una lista.

Un ejemplo sencillo de ajuste lineal multivariante:
@example
(%i1) load("plsquares")$

(%i2) plsquares(matrix([1,2,0],[3,5,4],[4,7,9],[5,8,10]),
                [x,y,z],z);
     Determination Coefficient for z = .9897039897039897
                       11 y - 9 x - 14
(%o2)              z = ---------------
                              3
@end example

El mismo ejemplo sin restricciones en el grado:
@example
(%i3) plsquares(matrix([1,2,0],[3,5,4],[4,7,9],[5,8,10]),
                [x,y,z],z,1,0);
     Determination Coefficient for z = 1.0
                    x y + 23 y - 29 x - 19
(%o3)           z = ----------------------
                              6
@end example

C@'alculo del n@'umero de diagonales de un pol@'{@dotless{i}}gono de @math{N} lados
@example
(%i4) plsquares(matrix([3,0],[4,2],[5,5],[6,9],[7,14],[8,20]),
                [N,diagonals],diagonals,5);
     Determination Coefficient for diagonals = 1.0
                                2
                               N  - 3 N
(%o4)              diagonals = --------
                                  2
(%i5) ev(%, N=9);   /* Testing for a 9 sides polygon */
(%o5)                 diagonals = 27
@end example

C@'alculo del n@'umero de formas de colocar dos reinas en un tablero 
n x n de manera que no se amenacen.
@example
(%i6) plsquares(matrix([0,0],[1,0],[2,0],[3,8],[4,44]),
                [n,positions],[positions],4);
     Determination Coefficient for [positions] = [1.0]
                         4       3      2
                      3 n  - 10 n  + 9 n  - 2 n
(%o6)    [positions = -------------------------]
                                  6
(%i7) ev(%[1], n=8); /* Testing for a (8 x 8) chessboard */
(%o7)                positions = 1288
@end example

Un ejemplo con seis variables dependientes:
@example
(%i8) mtrx:matrix([0,0,0,0,0,1,1,1],[0,1,0,1,1,1,0,0],
                  [1,0,0,1,1,1,0,0],[1,1,1,1,0,0,0,1])$
(%i8) plsquares(mtrx,[a,b,_And,_Or,_Xor,_Nand,_Nor,_Nxor],
                     [_And,_Or,_Xor,_Nand,_Nor,_Nxor],1,0);
      Determination Coefficient for
[_And, _Or, _Xor, _Nand, _Nor, _Nxor] =
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
(%o2) [_And = a b, _Or = - a b + b + a,
_Xor = - 2 a b + b + a, _Nand = 1 - a b,
_Nor = a b - b - a + 1, _Nxor = 2 a b - b - a + 1]
@end example

Antes de hacer uso de esta funci@'on ejec@'utese  @code{load("plsquares")}.
@end deffn
