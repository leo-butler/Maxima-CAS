@c end concepts Floating Point
@menu
* Definiciones para Puntos Flotantes::
@end menu

@node Definiciones para Puntos Flotantes, Puntos Flotantes, Puntos Flotantes
@section Definiciones para puntos flotantes

@defun BFFAC (exp,n)

La versi@'on BFLOAT de la funci@'on factorial (shifted Gamma). El segundo argumento consiste en cu@'antos d@'{@dotless{i}}gitos conservar y retornar, es una buena idea para las solicitudes de la pareja de extras. Esta funci@'on est@'a disponible haciendo LOAD(BFFAC);.
@end defun



@defvar ALGEPSILON
El valor por defecto es 10^-8. El valor de ALGEPSILON es usado por ALGSYS
@end defvar

@defun BFLOAT (X)

Convierte todos los n@'umeros y  funciones num@'ericas a n@'umeros flotantes grandes. Programando FPPREC[16] a un valor N, configurar@'a la  precisi@'on de los n@'umeros flotantes grandes a N d@'gitos. Si FLOAT2BF[False] es FALSO un mensaje de advertencia ser@'a impreso cuando un n@'umero de coma  flotante es convertido en un numero flotante grande (Pues a partir de esto se puede perder precisi@'on). 
@end defun

@c @node BFLOATP
@c @unnumberedsec phony
@defun BFLOATP (exp)

Retorna VERDADERO si exp es un n@'umero flotante grande, sino devuelve  FALSO.
@end defun

@c @node BFPSI
@c @unnumberedsec phony

@defun BFPSI (n,z,fpprec)

Devuelve poligamos de argumentos reales y orden entero. 
Para digamos, BFPSI0(z,fpprec) es m@'as directo.  Note -BFPSI0(1,fpprec)
provee %GAMMA como un n@'umero flotante grande. Para realizar esto, haga LOAD(BFFAC);
@end defun

@c @node BFTORAT
@c @unnumberedsec phony

@defvar BFTORAT

Por defecto: [FALSE] controla la conversi@'on de bfloats(es decir n@'umeros flotantes grandes) a n@'umeros racionales. Si 
@example
BFTORAT:FALSO
@end example
RATEPSILON puede ser usada para
el control de las conversiones (esto resulta relativo con n@'umeros racionales peque@~nos). Si
@example
BFTORAT:VERDADERO
@end example
, los n@'umeros racionales generados pueden  ser representados exactamente por bfloat
@end defvar

@c @node BFTRUNC
@c @unnumberedsec phony

@defvar BFTRUNC

Por defecto: [VERDADERO] causa un arrastre de ceros en n@'umeros flotantes grandes cuyos ceros no son mostrados. As@'{@dotless{i}}, si BFTRUNC:FALSO, BFLOAT(1);
es mostrado como 1.000000000000000B0. si no, este es mostrado como
1.0B
@end defvar

@c @node CBFAC
@c @unnumberedsec phony

@defun CBFAC (z,fpprec)

Un factorial para bfloats complejos. Esto puede ser usado
haciendo LOAD(BFAC); Para m@'as detalles ver share2/bfac.usg.
@end defun

@c @node FLOAT
@c @unnumberedsec phony

@defun FLOAT (exp)

Convierte  n@'umeros enteros, racionales y flotantes grandes (bigfloats) contenidos en exp a n@'umeros de coma flotante. Es tambi@'en un EVFLAG, FLOAT causa n@'umeros racionales y bigfloats no integrables a ser convertidos en n@'umeros de coma flotante.  
@end defun

@c @node FLOAT2BF
@c @unnumberedsec phony

@defvar FLOAT2BF
 
Por defecto: [FALSO] Si es FALSO, un mensaje de advertencia es impreso cuando un  n@'umero de coma flotante es convertido en un n@'umero flotante grande(bigfloat)(A partir de esto puede perder precisi@'on).
@end defvar

@c @node FLOATDEFUNK
@c @unnumberedsec phony

@defun FLOATDEFUNK

Es una utilidad para realizar funciones de puntos flotantes a partir expresiones matem@'aticas. Esto puede tomar la expresi@'on de entrada y el FLOTANTE,
entonces (OPTIMIZE) OPTIMIZARLO, y luego ingresar MODE_DECLAREations para todas las variables.
Esta es la manera para usar ROMBERG, PLOT2, INTERPOLATE, etc. e.g.
EXP:Alguna-expresi@'on-dif@'{@dotless{i}}cil-macsyma;

@example
FLOATDEFUNK('F,['X],EXP);
@end example
Podr@'a definir la funci@'on F(x) para usted.
(Realice PRINTFILE(MCOMPI,DOC,MAXDOC); para m@'as detalles.)

@end defun
@c @node FLOATNUMP
@c @unnumberedsec phony
@defun FLOATNUMP (exp)
es VERDAD si exp es un n@'umero punto flotante sino FALSO.

@end defun
@c @node FPPREC
@c @unnumberedsec phony
@defvar FPPREC
 por defecto: [16] - Presici@'on punto flotante (Floating Point PRECision).  Puede ser programada en un entero representando la precisi@'on requerida..

@end defvar
@c @node FPPRINTPREC
@c @unnumberedsec phony
@defvar FPPRINTPREC
 Por defecto: [0] - El n@'umero de digitoa a imprimir cuando esta imprimiendo a un n@'umero flotante grande (bigfloat), haciendo posible computarlo con un gran n@'umero de precisi@'on de d@'{@dotless{i}}gitos, pero la respuesta es impresa con un peque@-no n@'umewro de @'{@dotless{i}}gitos.  S@'{@dotless{i}} FPPRINTPREC es 0 (por defecto), o >= FPPREC, entonces el valor de FPPREC controla el numero de d@'{@dotless{i}}gitos usado para imprimir.  Sin embargo, si FPPRINTPREC tiene un valor entre 2 y FPPREC-1, entonces controlar@'a el n@'umero de digitos usado.  (El m@'{@dotless{i}}nimo n@'umero de d@'{@dotless{i}}gitos usado es 2, uno a la izquierda del punto y otro a la derecha.  El valor 1 para FPPRINTPREC es ilegal.)
@end defvar

@defun ?ROUND (x,&optional-divisor)
Redondea el punto flotante X al entero m@'as cercano.   El argumento debe ser un flotante regular, no un gran flotante (bigfloat).  El ? comenzando el nombre indica que esto es una funci@'on normal com@'un en lisp.


@example
(C3) ?round(-2.8);
(D3) 				      - 3
@end example
@end defun

@defun ?TRUNCATE (x,&optional-divisor)
lleva el punto flotante X hacia 0, para ser un entero.   The argument
must be a regular system float, not a bigfloat.  El argumento debe ser un flotante regular, no un gran flotante (bigfloat).  El ? comenzando el nombre indica que esto es una funci@'on normal com@'un en lisp.
@end defun 
@example
(C4) ?truncate(-2.8);
(D4) 				      - 2
(C5) ?truncate(2.4);
(D5) 				       2
(C6) ?truncate(2.8);
(D6) 				       2
@end example


@c @node ZUNDERFLOW
@c @unnumberedsec phony
@c @defvar ZUNDERFLOW
@c por defecto: [TRUE] - si es FALSE, un error ser@'a se@-nalado si ocurre ocurre un desborde punto flotante.
@c Actualmente en NIL Macsyma, todos los desbordes punto flotante, floating-point
@c overflow, and division-by-zero errors signal errors, and this switch
@c is ignored.
@c @end defvar

