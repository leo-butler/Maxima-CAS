@menu
* Introducci@'on a Tensores::      
* Definiciones de Tensores::      
@end menu

@node Introducci@'on a Tensores, Definiciones de Tensores, Tensores, Tensores

@section Introducci@'on a Tensor

 - Paquete Indicial de Manipulaci@'on de Tensor.  Puede ser cargado mediante 
LOADFILE("itensr"); Un manual del paquete Tensor est@'a
disponible en share/tensor.descr. Una demostraci@'on est@'a disponible mediante
DEMO("itenso.dem1"); (y demostraciones adicionales estan en
("itenso.dem2"), ("itenso.dem3") y siguiente).

 - Hay dos paquetes tensor en MACSYMA, CTENSR y
ITENSR.  CTENSR es Tensor Componente de Manipulaci@'on y puede ser accedido
con LOAD(CTENSR); . ITENSR es Tensor de Manipulaci@'on Indicial y es
cargado mediante LOAD(ITENSR); Un manual para CTENSR Y ITENSR est@'a
disponible desde la Oficina de Publicaciones LCS. Petici@'on MIT/LCS/TM-167.
En adici@'on, existen demos sobre TENSOR; directorios bajo los nombres de archivos
CTENSO DEMO1, DEMO2, etc. e ITENSO DEMO1, DEMO2, etc. Haga
DEMO("ctenso.dem1"); o DEMO("itenso.dem2"); Envie errores o
comantarios a RP o TENSOR.

@c end concepts Tensor
@node Definiciones de Tensores,  , Introducci@'on a Tensores, Tensores
@section Definiciones de Tensores
@c @node CANFORM
@c @unnumberedsec phony
@defun CANFORM (exp)
[Paquete Tensor] Simplifica exp mediante el renombre de indices dummy
y reordenando todos los indices como son dictaminados por las condiciones de simetr@'{@dotless{i}}a
impuestas en ellos. Si ALLSYM es VERDADERO entonces todos los indices son asumidos
simetricamente, de otra foema la informaci@'on de simetr@'{@dotless{i}}a provistas por las
declaraciones de DECSYM podr@'an ser usadas. Los indices dummy son renombrados de la misma
forma como en la funci@'on RENAME. Cuando CANFORM es aplicada a una expresi@'on
extensa el calculo puede tomar un teimpo considerable.
Esta vez puede ser acortado mediante el llamado de RENAME en las expresiones primero.
Tambi@'en observe el ejemplo bajo DECSYM. Nota: CANFORM puede no ser capaz de
reducir una expresi@'on a su manera simple completamente aunque siempre podr@'a
retornar un resultado matem@'aticamente correcto. 

@end defun
@c @node CANTEN
@c @unnumberedsec phony
@defun CANTEN (exp)
[Paquete Tensor] Simplifica exp mediante el renombre (observe RENAME)
y permutado de indices dummy. CANTEN est@'a restringido para suma de tensores
productos en los que las derivadas no est@@'an presntes. As@'{@dotless{i}} este es limitado
y solo puede ser usado si CANFORM no es capaz de cumplir la simplificaci@'on
requerida.

@end defun
@c @node CARG
@c @unnumberedsec phony
@defun CARG (exp)
retorna el argumento (fase @'angulo) de exp. ----- a las
convenciones y restricciones, el valor principal no puede ser garantizado
a menos que exp sea num@'erico.


@end defun
@c @node COUNTER
@c @unnumberedsec phony
@defvar COUNTER
 por defecto: [1] determina el s@'ufijo num@'erico para ser usado en
la genraci@'on del siguiente indice dummy en el paquete tensor. el pr@'efijo es
determinado mediante la opci@'on DUMMYX[#].

@end defvar
@c @node DEFCON
@c @unnumberedsec phony
@defun DEFCON (tensor1,<tensor2,tensor3>)
da a tensor1 la propiedad que la 
contracci@'on de un producto de tensor 1 y tensor2 resulte en tensor3
con los indices apropiados. Si solo es dado un argumento, tensor1,
entonces la contacci@'on del producto de tensor1 con cualquier objeto indexado
teniendo los indices apropiados (dicho tensor) producir@'a un
objeto indexado con ese nombre, eje.tensor, y con una nueva programaci@'on de
indices reflejando las contracciones desarrolladas.
    Por ejemplo, si METRIC: G, entonces DEFCON(G) implementar@'a el
crecimiento y decrecimiento de indices a trav@'es de contracci@'on con el
tensor m@'etrico.
    M@'as de una vez DEFCON puede ser dado por el mismo objeto indexado; 
puede ser usado el @'ultimo dado el cual aplica en una contacci@'on particular.
CONTRACTIONS es una lista de aquellos objetos indexados que han sido dados
por propiedades de contracci@'on con DEFCON.

@end defun
@c @node FLUSH
@c @unnumberedsec phony
@defun FLUSH (exp,tensor1,tensor2,...)

Paquete Tensor - programara@'a para cero, en
exp, todos los sucesos del tensori que no tiene indices derivativos.

@end defun
@c @node FLUSHD
@c @unnumberedsec phony
@defun FLUSHD (exp,tensor1,tensor2,...)
Paquete Tensor - programara@'a para cero, en
exp, todos los sucesos del tensori que tiene indices derivativos.

@end defun
@c @node FLUSHND
@c @unnumberedsec phony
@defun FLUSHND (exp,tensor,n)
Paquete Tensor - programara@'a para cero, en exp, todos
los sucesos del tensor objeto  diferenciado que tiene n o m@'as
indices derivativos como lo demuestra el suguiente ejemplo.
@example
(C1) SHOW(A([I],[J,R],K,R)+A([I],[J,R,S],K,R,S));
                               J R S      J R
(D1)                          A        + A
                               I,K R S    I,K R
(C2) SHOW(FLUSHND(D1,A,3));
                                     J R
(D2)                                A
                                     I,K R


@end example
@end defun
@c @node KDELTA
@c @unnumberedsec phony
@defun KDELTA (L1,L2)
es la funci@'on delta generalizada de Kronecker definida en
el Paquete Tensor con L1 la lista de indices de covariantes y L2 la
lista de indices de contravariantes. KDELTA([i],[j]) retorna el
delta de Kronecker ordinario. el comando EV(EXP,KDELTA) causa la evaluaci@'on de
un expresi@'on conteniendo KDELTA([],[]) para la dimensi@'on del
manifold.

@end defun
@c @node LC
@c @unnumberedsec phony
@defun LC (L)
es el tensor permutaci@'on (o Levi-Civita) el cual produce 1 si
la lista 1 consiste en una permutaci@'on constante de integrandos, -1 si este
consiste de una permutaci@'on impar, y 0 si algunos indices en L son
repetidos.

@end defun
@c @node LORENTZ
@c @unnumberedsec phony
@defun LORENTZ (exp)
impone la condici@'on Lorentz sustituyendo 0 por todos
los objetos indexados en exp que tienen un indice derivativo identico a un
indice contravariante.

@end defun
@c @node MAKEBOX
@c @unnumberedsec phony
@defun MAKEBOX (exp)
mostrar@'a exp de la misma forma como SHOW; sin embargo,
cualquier tensor d'Alembertian ocurriendo en exp ser@'a indicado usando el
s@'{@dotless{i}}mbolo []. Por ejemplo, []P([M],[N]) representa
G([],[I,J])*P([M],[N],I,J).

@end defun
@c @node METRIC
@c @unnumberedsec phony
@defun METRIC (G)
especifica la m@'etrica asignando la variable METRIC:G; en
adici@'on, las propiedades de contracci@'on de la m@'etrica G son programadas 
ejecutando los comandos DEFCON(G), DEFCON(G,G,KDELTA).
La variable METRIC, por defecto: [], es limitada para la m@'etrica, asignada mediante 
el comando METRIC(g).

@end defun
@c @node NTERMSG
@c @unnumberedsec phony
@defun NTERMSG ()
da al usuario una imagen r@'apida del "tama@~no" del tensor
Einstein. Este retorna una lista de parejas cuyos segundos elementos
dan el n@'umero de t@'erminos en los componentes especificado mediente los
primeros elementos.

@end defun
@c @node NTERMSRCI
@c @unnumberedsec phony
@defun NTERMSRCI ()
retorna una lista de parejas, cuyos segundos elementos dan 
el n@'umero de t@'erminos en el componente RICCI especificado por los primeros
elementos. De este modo, esto es posible para una b@'usqueda r@'apida de las
expresiones no-cero e intentar la simplificaci@'on.

@end defun
@c @node NZETA
@c @unnumberedsec phony
@defun NZETA (Z)
retorna el valor complejo de la Funci@'on Dispersi@'on Plasma
para Z complejos.
@example
NZETAR(Z) ==> REALPART(NZETA(Z))
@end example
NZETAI(Z)
retorna IMAGPART(NZETA(Z)).  Esta funci@'on es relatada para la funci@'on compleja 
error mediante
@example
NZETA(Z) = %I*SQRT(%PI)*EXP(-Z^2)*(1-ERF(-%I*Z)).
@end example

@end defun
@c @node RAISERIEMANN
@c @unnumberedsec phony
@defun RAISERIEMANN (dis)
retorna los componentes contravariantes del tensor de curvatura
Riemman como un arreglo de elementos UR[I,J,K,L]. Esto son mostrados
si dis es VERDADERO.

@end defun
@c @node RATEINSTEIN
@c @unnumberedsec phony
@defvar RATEINSTEIN
 por defecto: [] - si es VERDADERO ser@'a desarrollada la
simplificaci@'on racional sobre los componentes no-cero de los
tensores Einstein; si FACRAT:VERDADERO entonces los componentes 
tambi@'en podr@'an ser factorizados.

@end defvar
@c @node RATRIEMAN
@c @unnumberedsec phony
@defvar RATRIEMAN
 - Esta opci@'on ha sido renombrada RATRIEMANN.

@end defvar
@c @node RATRIEMANN
@c @unnumberedsec phony
@defvar RATRIEMANN
 por defecto: [] - una de las opciones que controlan
la simplificaci@'on de tensores Riemman; si es VERDADERO, entonces
ser@'a realizada la simplificaci@'on racional; si FACRAT:VERDADERO 
entonces cada componente tambi@'en ser@'a factorizado.

@end defvar
@c @node REMCON
@c @unnumberedsec phony
@defun REMCON (tensor1,tensor2,...)
remueve todas la propiedades de contracci@'on
del tensori. REMCON(ALL) remueve todas las propiedades de contracci@'on de
todos los objetos indexados.

@end defun
@c @node RICCICOM
@c @unnumberedsec phony
@defun RICCICOM (dis)
Paquete Tensor) Esta funci@'on primero computa los
componentes covariantes LR[i,j] del tensor Ricci (LR es un nem@'onico para
"Ricci bajo"). Entonces el tensor mixto Ricci es computado usando el
tensor m@'etrico contravariante. Si el valor del argumento de RICCICOM
es VERDADERO, entonces estos componentes mixtos, RICCI[i,j] (el indice x es
covariante y el indice j es contravariante), ser@'a mostrado
directamente. de otra manera, RICCICOM(FALSO) simplemente computar@'a las entradas
del arreglo RICCI[i,j] sin mostrar los resultados.

@end defun
@c @node RINVARIANT
@c @unnumberedsec phony
@defun RINVARIANT ()
Paquete Tensor) formas de invariante obtenidas mediante
contracci@'on de tensores
@example
R[i,j,k,l]*UR[i,j,k,l].
@end example

Este objeto no es

simplificado autom@'aticamente desde que sea dem@'asiado extenso


@end defun
@c @node SCURVATURE
@c @unnumberedsec phony
@defun SCURVATURE ()
retorna la curvatura escalar (obtenida mediante contracci@'on
del tensor Ricci) del manifold Riemmaniano con la m@'etrica dada.

@end defun
@c @node SETUP
@c @unnumberedsec phony
@defun SETUP ()
Este ha sido renombrado para TSETUP(); Programa una m@'etrica para
calculo de Tensores.

@end defun
@c @node WEYL
@c @unnumberedsec phony
@defun WEYL (dis)
computa en tensor conformal Weyl. Si el argumento dis es
VERDADERO, los componentes no-cero W[I,J,K,L] ser@'an mostrados al
usuario. De otro modo, estos componentes simplemente ser@'an computadas y almacenadas.
Si la opci@'on RATWEYL es programada VERDADERA, entonces los componentes ser@'an
simplificados racionalmente; si FACRAT es VERDADERO entonces los resultados ser@'an
factorizados.

@end defun
