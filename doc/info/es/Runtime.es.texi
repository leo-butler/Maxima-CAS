@c version 1.18
@menu
* Introducci@'on al Entorno de Ejecuci@'on::   
* Interrupciones::  
* Definiciones para el Entorno de Ejecuci@'on::
@end menu

@node Introducci@'on al Entorno de Ejecuci@'on, Interrupciones, Entorno de Ejecuci@'on, Entorno de Ejecuci@'on
@section Introducci@'on al Entorno de Ejecuci@'on

El fichero @code{maxima-init.mac} se carga autom@'aticamente cada vez que se empieza a ejecutar Maxima.
Se puede utilizar @code{maxima-init.mac} para personalizar el entorno de Maxima. Si existe, @code{maxima-init.mac} se almacena normalmente en el directorio indicado por @code{maxima_userdir}, aunque puede estar alojado en cualquier otro directorio que est@'e al alcance de la funci@'on  @code{file_search}.

He aqu@'{@dotless{i}} un ejemplo de fichero @code{maxima-init.mac}:

@example
setup_autoload ("specfun.mac", ultraspherical, assoc_legendre_p);
showtime:all;
@end example

En este ejemplo, @code{setup_autoload} le dice a Maxima que cargue en memoria el fichero @code{specfun.mac} si cualquiera de las funciones @code{ultraspherical} o @code{assoc_legendre_p} es invocada pero todav@'{@dotless{i}}a no est@'a definida. De esta manera, no es necesario recordar cargar el fichero antes de llamar a las funciones.

La sentencia  @code{showtime: all} le dice a Maxima que haga una asignaci@'on a la variable @code{showtime}.
El fichero  @code{maxima-init.mac} puede contener cualesquiera otras asignaciones o sentencias de Maxima.

@node Interrupciones, Definiciones para el Entorno de Ejecuci@'on, Introducci@'on al Entorno de Ejecuci@'on, Entorno de Ejecuci@'on
@section Interrupciones

El usuario puede detener un c@'omputo que est@'e consumiendo recursos excesivos con el car@'acter ^C (control-C). La acci@'on que se sigue por defecto es la detenci@'on del c@'omputo y la impresi@'on de otro prompt. En este caso, no ser@'a posible reiniciar la tarea interrumpida.

Si a la variable @code{*debugger-hook*} se le asigna @code{nil} haciendo

@example
:lisp (setq *debugger-hook* nil)
@end example

@noindent
entonces tras recibir ^C, Maxima entra en el depurador de Lisp y el usuario podr@'a utilizar el depurador para inspeccionar el entorno Lisp. La tarea que haya sido interrumpida podr@'a reiniciarse escribiendo @code{continue} en el depurado de Lisp. La forma de volver a Maxima desde el depurador de Lisp, que no sea la de permitir la computaci@'on hasta la terminaci@'on de la tarea, depender@'a de la versi@'on de Lisp.

En sistemas Unix el car@'acter ^Z (control-Z) hace que Maxima deje de ejecutarse devolviendo el control al terminal del sistema. El comando @code{fg} hace que la ejecuci@'on de Maxima se reanude en el punto que lo dej@'o.


@node Definiciones para el Entorno de Ejecuci@'on,  , Interrupciones, Entorno de Ejecuci@'on
@section Definiciones para el Entorno de Ejecuci@'on

@defvr {Declaraci@'on} feature

Maxima trata con dos tipos diferentes de caracter@'{@dotless{i}}sticas, las del sistema y las correspondientes a expresiones matem@'aticas. V@'ease tambi@'en @code{status} para informaci@'on sobre caracter@'{@dotless{i}}sticas del sistema. V@'eanse asimismo @code{features} y @code{featurep} para informaci@'on sobre caracter@'{@dotless{i}}sticas matem@'aticas.

@code{feature} no es el nombre de una funci@'on ni de una variable.

@end defvr

@deffn {Funci@'on} featurep (@var{a}, @var{f})

Intenta determinar si el objeto @var{a} tiene la caracter@'{@dotless{i}}stica @var{f} en base a la informaci@'on en la base de datos actual. De ser as@'{@dotless{i}}, devuelve @code{true}, en caso contrario @code{false}. 

N@'otese que @code{featurep} devuelve @code{false} cuando ni @var{f} ni la negaci@'on @var{f} puedan determinarse.

La funci@'on @code{featurep} eval@'ua sus argumentos.
 
V@'eanse tambi@'en @code{declare} y @code{features}.

@example
(%i1) declare (j, even)$
(%i2) featurep (j, integer);
(%o2)                           true
@end example

@end deffn

@defvr {Variable del sistema} maxima_tempdir

La variable @code{maxima_tempdir} almacena la ruta del directorio
en el que Maxima crea ciertos ficheros temporales.
En particular, los ficheros temporales para la realizaci@'on de
gr@'aficos se guardan en @code{maxima_tempdir}.

El valor que inicialmente toma esta variable es el directorio
de inicio del usuario, si Maxima es capaz de localizarlo; en
caso contrario, Maxima intenta encontrar un directorio que
sea aceptable.

A la variable @code{maxima_tempdir} se le puede asignar una
cadena de caracteres con la ruta del directorio.
@end defvr

@defvr {Variable del sistema} maxima_userdir

La variable @code{maxima_userdir} almacena la ruta del 
directorio en el que Maxima buscar@'a ficheros Lisp y de
Maxima. Maxima tambi@'en busca en otros directorios, guardando las variables
@code{file_search_maxima} y @code{file_search_lisp} la lista
completa de b@'usqueda.

El valor que inicialmente toma esta variable es el de un subdirectorio
del directorio de inicio del usuario, si Maxima es capaz de localizarlo;
en caso contrario, Maxima intenta encontrar un directorio que
sea aceptable.

A la variable @code{maxima_userdir} se le puede asignar una
cadena de caracteres con la ruta del directorio.
Sin embargo, cambiando el valor de la variable @code{maxima_userdir}
no se alteran @code{file_search_maxima} ni @code{file_search_lisp},
cuyos contenidos se modifican mediante otro sistema.
@end defvr

@deffn {Funci@'on} room ()
@deffnx {Funci@'on} room (true)
@deffnx {Funci@'on} room (false)

Presenta una descrpci@'on del estado de almacenamiento y gesti@'on de la pila en Maxima. La llamada @code{room} invoca a la funci@'on Lisp hom@'onima.

@itemize @bullet
@item
@code{room ()} prints out a moderate description.
@item
@code{room (true)} prints out a verbose description.
@item
@code{room (false)} prints out a terse description.
@end itemize

@end deffn

@deffn {Funci@'on} status (feature)
@deffnx {Funci@'on} status (feature, @var{putative_feature})
@deffnx {Funci@'on} status (status)

Devuelve informaci@'on sobre la presencia o ausencia de ciertas caracter@'{@dotless{i}}sticas dependientes del sistema.

@itemize @bullet
@item
@code{status (feature)} devuelve una lista con caracter@'{@dotless{i}}sticas del sistema. @'Estas incluyen la versi@'on de Lisp, tipo de sistema operativo, etc. La lista puede variar de un Lisp a otro.
@item @code{status (feature, @var{putative_feature})} devuelve @code{true} si @var{putative_feature}
est@'a en la lista de elementos retornados por @code{status (feature)} y @code{false} en otro caso.
La funci@'on @code{status} no eval@'ua el argumento @var{putative_feature}. El operador comilla-comilla, @code{'@w{}'}, permite la evaluaci@'on. Una caracter@'{@dotless{i}}stica cuyo nombre contenga un car@'acter especial debe ser suministrada como un argumento del tipo cadena alfanum@'erica. Por ejemplo,
@code{status (feature, "ansi-cl")}.
@item
La llamada @code{status (status)} devuelve una lista con dos elementos @code{[feature, status]}. Los elementos @code{feature} y @code{status} son los dos argumentos que acepta la funci@'on @code{status};
no est@'a claro si esta lista tiene alg@'un inter@'es adicional.
@end itemize

La variable @code{features} contiene una lista de caracter@'{@dotless{i}}sticas que se aplican a expresiones matem@'aticas. V@'eanse @code{features} y @code{featurep} para m@'as informaci@'on.

@end deffn

@deffn {Funci@'on} time (%o1, %o2, %o3, ...)

Devuelve una lista de los tiempos, en segundos, que fueron necesarios para calcular los resultados de las salidas @code{%o1}, @code{%o2}, @code{%o3}, .... Los tiempos devueltos son estimaciones hechas por Maxima del tiempo interno de computaci@'on. La funci@'on @code{time} s@'olo puede utilizarse para variables correspondientes a l@'{@dotless{i}}neas de salida; para cualquier otro tipo de variables, @code{time} devuelve @code{unknown}.

H@'agase @code{showtime: true} para que Maxima devuelva el tiempo de ejecuci@'on de cada l@'{@dotless{i}}nea de salida.

@end deffn

@deffn {Funci@'on} timedate ()
Devuelve una cadena alfanum@'erica con la hora y fecha actuales. La cadena tiene el formato @code{HH:MM:SS Day, mm/dd/yyyy (GMT-n)}, donde los campos son: las horas, minutos, segundos, d@'{@dotless{i}}a de de la semana, mes, d@'{@dotless{i}}a del mes, a@~no y n@'umero de horas de diferencia con respecto a la hora GMT.

El valor que devuelve es una cadena Lisp.

Ejemplo

@c ===beg===
@c d: timedate ();
@c print ("timedate reports current time", d)$
@c ===end===
@example
(%i1) d: timedate ();
(%o1) 08:05:09 Wed, 11/02/2005 (GMT-7)
(%i2) print ("timedate reports current time", d)$
timedate reports current time 08:05:09 Wed, 11/02/2005 (GMT-7)
@end example

@end deffn
