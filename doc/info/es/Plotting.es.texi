@c english version 1.24
@menu
* Definiciones para Gr@'aficos::    
@end menu

@node Definiciones para Gr@'aficos,  , Gr@'aficos, Gr@'aficos
@section Definiciones para Gr@'aficos

@defvr {Variable opcional} in_netmath
Valor por defecto: @code{false}

Si @code{in_netmath} vale @code{true},
@code{plot3d} imprime salida de OpenMath en la consola si @code{plot_format} vale @code{openmath},
en caso contrario, @code{in_netmath} (incluso si vale @code{true}) deja de tener efecto alguno.

La variable @code{in_netmath} no afecta a @code{plot2d}.

@end defvr

@deffn {Funci@'on} openplot_curves (@var{list}, @var{rest_options})
Toma una lista de curvas como
@example
[[x1, y1, x2, y2, ...], [u1, v1, u2, v2, ...], ..]
@end example
o 
@example
[[[x1, y1], [x2, y2], ...], ...]
@end example
y las dibuja. Es similar a xgraph_curves, pero utiliza las rutinas de "open plot".
Se le puede dar argumentos adicionales como 
@code{"@{xrange -3 4@}"}
El siguiente ejemplo dibuja dos curvas con puntos grandes, etiquetando el primero con @code{jim} y el segundo con @code{jane}.   
@example
(%i1) openplot_curves ([["@{plotpoints 1@} @{pointsize 6@}
      @{label jim@} @{xaxislabel @{joe is nice@}@}"],
      [1, 2, 3, 4, 5, 6, 7, 8], ["@{label jane@} @{color pink @}"],
      [3, -1, 4, 2, 5, 7]]);
@end example

@ifnotinfo
@image{../figures/plotting1,8cm}
@end ifnotinfo

Otros s@'{@dotless{i}}mbolos de elementos importantes son @code{xfun},
@code{color}, @code{plotpoints}, @code{linecolors}, @code{pointsize},
@code{nolines}, @code{bargraph}, @code{labelposition}, @code{xaxislabel} y
@code{yaxislabel}.

@end deffn

@deffn {Funci@'on} plot2d (@var{expr}, @var{range}, ..., @var{options}, ...)
@deffnx {Funci@'on} plot2d (@var{parametric_expr})
@deffnx {Funci@'on} plot2d (@var{discrete_expr})
@deffnx {Funci@'on} plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range}, @var{y_range})
@deffnx {Funci@'on} plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range})
@deffnx {Funci@'on} plot2d (@var{expr}, @var{x_range}, @var{y_range})
@deffnx {Funci@'on} plot2d (@var{expr}, @var{x_range})
@deffnx {Funci@'on} plot2d ([@var{name_1}, ..., @var{name_n}], @var{x_range}, @var{y_range})
@deffnx {Funci@'on} plot2d ([@var{name_1}, ..., @var{name_n}], @var{x_range})
@deffnx {Funci@'on} plot2d (@var{name}, @var{x_range}, @var{y_range})
@deffnx {Funci@'on} plot2d (@var{name}, @var{x_range})

Muestra un gr@'afico de una o m@'as expresiones como funci@'on de una variable.

En todos los casos, @var{expr} es una expresi@'on a ser representada en el eje
vertical como funci@'on de una variable.  El argumento @var{x_range}, que es el
rango del eje horizontal, es una lista de la forma @code{[@var{variable},
@var{min}, @var{max}]}, donde @var{variable} es una variable que aparece en
@var{expr}. Tambi@'en @var{y_range}, el rango del eje vertical, es otra lista
de la forma @code{[y, @var{min}, @var{max}]}.

La llamada @code{plot2d (@var{expr}, @var{x_range})} dibuja plots @var{expr}
como funci@'on de la variable nombrada en @var{x_range}, en el rango
especificado por @var{x_range}.  Si el rango vertical no se especifica
expl@'{@dotless{i}}citamente por medio de @code{set_plot_option}, se escoger@'a
autom@'aticamente.  Todas las opciones toman sus valores por defecto a menos
que se especifiquen de otra manera con @code{set_plot_option}.

La llamada @code{plot2d (@var{expr}, @var{x_range}, @var{y_range})} dibuja
@var{expr} como funci@'on de la variable nombrada en @var{x_range}, en el rango
especificado por @var{x_range}.  El rango vertical se ajusta a @var{y_range}.
Todas las opciones toman sus valores por defecto a menos que se especifiquen de
otra manera con @code{set_plot_option}.

La llamada @code{plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range})}
dibuja @var{expr_1}, ..., @var{expr_n} como funci@'on de la variable nombrada
en @var{x_range}, en el rango especificado por @var{x_range}.  Si el rango
vertical no se especifica expl@'{@dotless{i}}citamente por medio de
@code{set_plot_option}, se escoger@'a autom@'aticamente.  Todas las opciones
toman sus valores por defecto a menos que se especifiquen de otra manera con
@code{set_plot_option}.

La llamada @code{plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{x_range},
@var{y_range})} dibuja @var{expr_1}, ..., @var{expr_n} como funci@'on de la
variable nombrada en @var{x_range}, en el rango especificado por @var{x_range}.
El rango vertical se ajusta a @var{y_range}.  Todas las opciones toman sus
valores por defecto a menos que se especifiquen de otra manera con
@code{set_plot_option}.

La funci@'on a representar puede ser identificada por medio del nombre de un
operador o funci@'on de Maxima o Lisp, con una expresi@'on lambda, o con una
expresi√≥n de Maxima. Cuando se use un nombre o expresi@'on lambda, la funci@'on
a la que se refiere debe depender de un @'unico argumento.

@b{Ejemplos:}

Gr@'afico de una expresi@'on y especificaci@'on de algunos par@'ametros de uso
com@'un.

@example
(%i1) plot2d (sin(x), [x, -5, 5])$
(%i2) plot2d (sec(x), [x, -2, 2], [y, -20, 20], [nticks, 200])$
@end example

@ifnotinfo
@image{../figures/plotting2,8cm}@image{../figures/plotting3,8cm}
@end ifnotinfo

@b{Representando funciones por nombre.}

@c ===beg===
@c F(x) := x^2 $
@c :lisp (defun |$g| (x) (m* x x x))
@c H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $
@c plot2d (F, [u, -1, 1])$
@c plot2d ([F, G, H], [u, -1, 1])$
@c ===end===
@example
(%i1) F(x) := x^2 $

(%i2) :lisp (defun |$g| (x) (m* x x x))

$g
(%i2) H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $

(%i3) plot2d (F, [u, -1, 1])$

(%i4) plot2d ([F, G, H], [u, -1, 1])$
@end example

@ifnotinfo
@image{../figures/plotting4,8cm}@image{../figures/plotting5,8cm}
@end ifnotinfo

All@'a donde vaya una expresi@'on ordinaria, tambi@'en puede ir una expresi@'on
param@'etrica en su lugar: @var{parametric_expr} es una lista de la forma
@code{[parametric, @var{x_expr}, @var{y_expr}, @var{t_range}, @var{options}]}.
Aqu@'{@dotless{i}} @var{x_expr} y @var{y_expr} son expresiones de una variable
@var{var} que a su vez es el primer elemento del rango @var{trange}.  El dibujo
que se obtiene es el lugar geom@'etrico de los pares @code{[@var{x_expr},
@var{y_expr}]} cuando @var{var} var@'{@dotless{i}}a seg@'un @var{trange}.

En el siguiente ejemplo se dibuja un c@'{@dotless{i}}rculo, luego se repite lo
mismo con pocos puntos, con lo que se obtiene una estrella, para finalmente
dibujar todo junto con una funci@'on ordinaria en @code{x}.

@b{Ejemplos de gr@'aficos param@'etricos:}

@itemize @bullet
@item
Un c@'{@dotless{i}}rculo como curva param@'etrica.
@example
(%i1) plot2d ([parametric, cos(t), sin(t), [t, -%pi*2, %pi*2],
        [nticks, 80]])$
@end example

@ifnotinfo
@image{../figures/plotting6,8cm}
@end ifnotinfo

@item 
Una estrella: la curva anterior con s@'olo ocho puntos.
@example
(%i2) plot2d ([parametric, cos(t), sin(t), [t, -%pi*2, %pi*2],
        [nticks, 8]])$
@end example

@ifnotinfo
@image{../figures/plotting7,8cm}
@end ifnotinfo

@item
Un polinomio c@'ubico definido como curva ordinaria y un c@'{@dotless{i}}rculo
definido en forma param@'etrica.
@example
(%i3) plot2d ([x^3 + 2, [parametric, cos(t), sin(t), [t, -5, 5],
        [nticks, 80]]], [x, -3, 3])$
@end example

@ifnotinfo
@image{../figures/plotting8,8cm}
@end ifnotinfo

@end itemize

Tambi@'en se pueden utilizar expresiones discretas en lugar de ordinarias o
param@'etricas: @var{discrete_expr} es una lista de la forma @code{[discrete,
@var{x_list}, @var{y_list}]} o @code{[discrete, @var{xy_list}]}, siendo
@var{xy_list} una lista de pares @code{[@var{x},@var{y}]}.

@b{Ejemplos de gr@'aficos discretos:}

@itemize @bullet
@item
Se crean algunas listas para los ejemplos siguientes.
@example
(%i1) xx:makelist(x,x,0,10)$
(%i2) yy:makelist(exp(-x*1.0),x,0,10)$
(%i3) xy:makelist([x,x*x],x,0,5)$
@end example

@item
Dibujo con segmentos lineales.
@example
(%i4) plot2d([discrete,xx,yy])$
@end example

@ifnotinfo
@image{../figures/plotting9,8cm}
@end ifnotinfo

@item
Dibujo con segmentos lineales, utilizando una lista de pares.
@example
(%i5) plot2d([discrete,xy])$
@end example

@ifnotinfo
@image{../figures/plotting10,8cm}
@end ifnotinfo

@item
Dibujo con puntos.
@example
(%i6) plot2d([discrete,xx,yy],[gnuplot_curve_styles,
      ["with points"]])$
@end example

@ifnotinfo
@image{../figures/plotting11,8cm}
@end ifnotinfo

@item
Dibujo de la curva @code{cos(@var{x})} con segmentos y (@var{xx},@var{yy}) con
puntos.
@example
(%i7) plot2d([cos(x),[discrete,xx,yy]],[x,0,10],
     [gnuplot_curve_styles,
     ["with lines","with points pointsize 3"]])$
@end example
@end itemize

@ifnotinfo
@image{../figures/plotting12,8cm}
@end ifnotinfo

V@'ease tambi@'en @code{plot_options}, que describe las opciones gr@'aficas y
tiene m@'as ejemplos.

@end deffn

@deffn {Funci@'on} xgraph_curves (@var{list})
Dibuja el conjunto de puntos de la lista del argumento @var{list} con el
programa xgraph. Si el programa xgraph no est@'a instalado, este comando
producir@'a un error.

El conjunto de puntos puede ser de la forma

@example
[x0, y0, x1, y1, x2, y2, ...]
@end example
o
@example
[[x0, y0], [x1, y1], ...]
@end example

Un conjunto de puntos tambi@'en puede contener s@'{@dotless{i}}mbolos con etiquetas u otra informaci@'on.

@example
xgraph_curves ([pt_set1, pt_set2, pt_set3]);
@end example

dibuja los tres conjuntos de puntos como tres curvas.

@example
pt_set: append (["NoLines: True", "LargePixels: true"],
                          [x0, y0, x1, y1, ...]);
@end example

@noindent
construye el conjunto de puntos, declara que no haya segmentos rectil@'{@dotless{i}}neos entre ellos y que se utilicen p@'{@dotless{i}}xeles grandes. V@'ease el manual de xgraph para m@'as opciones.

@example
pt_set: append ([concat ("\"", "x^2+y")], [x0, y0, x1, y1, ...]);
@end example

@noindent
construye una etiqueta con el contenido "x^2+y" para este conjunto particular de puntos. Las comillas dobles @code{"} al comienzo son las que le indican a xgraph que se trata de una etiqueta.

@example
pt_set: append ([concat ("TitleText: Datos muestrales")], [x0, ...])$
@end example

@noindent
establece el t@'{@dotless{i}}tulo principal del gr@'afico como "Datos muestrales" en lugar de "Maxima Plot".

Para hacer un gr@'afico de barras con columnas de 0.2 unidades de ancho y para dibujar dos diagramas diferentes de este tipo:
@example
(%i1) xgraph_curves ([append (["BarGraph: true", "NoLines: true",
      "BarWidth: .2"], create_list ([i - .2, i^2], i, 1, 3)),
      append (["BarGraph: true", "NoLines: true", "BarWidth: .2"],
      create_list ([i + .2, .7*i^2], i, 1, 3))]);
@end example

@ifnotinfo
@image{../figures/plotting13,8cm}
@end ifnotinfo

@noindent

Se utiliza un fichero temporal @file{xgraph-out}.

@end deffn

@defvr {Variable del sistema} plot_options
Los elementos de esta lista establecen las opciones por defecto para los gr@'aficos.
Si una opci@'on est@'a presente en una llamada a @code{plot2d} o a @code{plot3d},
este valor adquiere prevalencia sobre las opciones por defecto.
En otro caso se utilizar@'a el valor que tenga en @code{plot_options}.
Las opciones por defecto se asignan mediante la funci@'on @code{set_plot_option}.

Cada elemento de @code{plot_options} es una lista de dos o m@'as elementos, el primero de los cuales es el nombre de la opci@'on, siendo los siguientes los valores de aqu@'ella. En algunos casos el valor asignado es a su vez una lista, que puede contener varios elementos.

Las opciones gr@'aficas que reconocen @code{plot2d} y @code{plot3d} son:

@itemize @bullet
@item
Opci@'on: @code{plot_format} determina qu@'e m@'odulo gr@'afico van a utilizar @code{plot2d} y @code{plot3d}.

@itemize @bullet
@item
Valor por defecto: @code{gnuplot}
Gnuplot es el programa por defecto y el m@'as avanzado. Requiere de una instalaci@'on externa de gnuplot.

@item
Valor: @code{mgnuplot}
Mgnuplot es una interface para gnuplot basada en Tk. Se incluye en la distribuci@'on de Maxima. Mgnuplot ofrece una interface gr@'afica de usuario rudimentaria para gnuplot, pero tiene algunas mejoras respecto de la interface propia de gnuplot. Mgnuplot requiere de una instalaci@'on externa de gnuplot y de Tcl/Tk.

@item
Valor: @code{openmath}
Openmath es un programa gr@'afico escrito en Tcl/Tk. Se incluye en la distribuci@'on de Maxima.

@item
Valor: @code{ps}
Genera ficheros PostScript directamente desde Maxima. Se tendr@'an resultados PostScript mejores utilizando gnuplot,
dejando la opci@'on @code{plot_format} sin especificar (aceptando la que tiene por defecto), y d@'andole a @code{gnuplot_term} el valor @code{ps}.
@end itemize

@item
Opci@'on: @code{run_viewer} controla si el visor apropiado para la salida gr@'afica debe ejecutarse o no.

@itemize @bullet
@item
@c DOES FALSE IMPLY THE OUTPUT FILE IS GENERATED AND NOT SHOWN ?? OR IS NOTHING GENERATED ??
Valor por defecto: @code{true}, ejecuta el visor.

@item
Valor: @code{false}, no ejecuta el visor.
@end itemize

@item
@code{gnuplot_term} establece el terminal de gnuplot.
@itemize @bullet
@item
Valor por defecto: @code{default}
La salidad de gnuplot se muestra en una ventana gr@'afica.

@item
Valor: @code{dumb}
GLa salidad de gnuplot se muestra en la consola de Maxima con caracteres ASCII.

@item
Valor: @code{ps}
Gnuplot genera comandos en lenguaje PostScript. Si la opci@'on @code{gnuplot_out_file} vale @var{filename}, gnuplot escribe los comandos PostScript en @var{filename}.
En otro caso, los comandos se imprimen en la consola de Maxima.
@end itemize

@item
Opci@'on: @code{gnuplot_out_file} escribe la salida de gnuplot en un fichero.

@itemize @bullet
@item
Valor por defecto: @code{false} No se especifica ning@'un archivo de salida.
@item
Valor: @var{filename}
Ejemplo: @code{[gnuplot_out_file, "myplot.ps"]}
Este ejemplo env@'{@dotless{i}}a c@'odigo PostScript al fichero @code{myplot.ps} cuando se utiliza conjuntamente con el terminal PostScript de gnuplot.
@c DOES OUTPUT FILE != FALSE IMPLY DON'T RUN THE VIEWER ??
@c WHAT HAPPENS IF OUTPUT FILE IS SPEFICIED BUT TERMINAL IS NOT PS ??
@end itemize

@item
Opci@'on: @code{x}
Rango horizontal por defecto.
@example
[x, - 3, 3]
@end example
Establece el rango horizontal como [-3, 3].

@item
Opci@'on: @code{y}
Rango vertical por defecto.
@example
[y, - 3, 3]
@end example
Establece el rango vertical como [-3, 3].

@item
Opci@'on: @code{t}
El rango por defecto para el par@'ametro de las representaciones param@'etricas.
@example
[t, 0, 10]
@end example
Establece el rango de la variable param@'etrica como [0, 10].

@item
Opci@'on: @code{nticks}
N@'umero inicial de puntos a utilizar por el algoritmo adaptativo de representaci@'on gr@'afica.
@example
[nticks, 20]
@end example
El valor por defecto para @code{nticks} es 10.

@item
Opci@'on: @code{adapt_depth}
N@'umero m@'aximo de particiones utilizado por el algoritmo adaptativo de representaci@'on gr@'afica.
@example
[adapt_depth, 5]
@end example
El valor por defecto para @code{adapt_depth} es 10.

@item
Opci@'on: @code{grid}
Establece el n@'umero de puntos de la ret@'{@dotless{i}}cula a utilizar en las direcciones x e y en los gr@'aficos de tres dimensiones.
@example
[grid, 50, 50]
@end example
establece la ret@'{@dotless{i}}cula en 50 por 50 puntos. El valor por defecto es 30 por 30.

@item
Opci@'on: @code{transform_xy}
Permite que se realicen transformaciones en los gr@'aficos de tres dimensiones.
@example
[transform_xy, false]
@end example
El valor por defecto de @code{transform_xy} es @code{false}. Cuando vale @code{false}, da el resultado de
@example
make_transform ([x, y, z], f1(x, y, z), f2(x, y, z), f3(x, y, z))$
@end example
La transformaci@'on @code{polar_xy} est@'a definida en Maxima. Devuelve la misma transformaci@'on que
@example
make_transform ([r, th, z], r*cos(th), r*sin(th), z)$
@end example

@item
Opci@'on: @code{colour_z} es espec@'{@dotless{i}}fico del formato gr@'afico @code{ps}.
@example
[colour_z, true]
@end example
El valor por defecto de @code{colour_z} es @code{false}.

@item
Opci@'on: @code{view_direction}
@c REPHRASE
Espec@'{@dotless{i}}fico del formato gr@'afico @code{ps}.
@example
[view_direction, 1, 1, 1]
@end example
El valor por defecto de @code{view_direction} es [1, 1, 1].
@end itemize

Hay varias opciones gr@'aficas que son espec@'{@dotless{i}}ficas de gnuplot.
Todas ellas (excepto @code{gnuplot_pm3d}) son comandos propios de gnuplot que se especifican como cadenas alfanum@'ericas. Cons@'ultese la documentaci@'on de gnuplot para m@'as detalles.

@itemize @bullet
@item
Opci@'on: @code{gnuplot_pm3d} Controla la utilizaci@'on del modo PM3D, que tiene capacidades avanzadas para gr@'aficos tridimensionales. PM3D s@'olo est@'a disponible en versiones de gnuplot posteriores a la 3.7. El valor por defecto de @code{gnuplot_pm3d} es @code{false}.

Ejemplo:

@example
[gnuplot_pm3d, true]
@end example

@item
Opci@'on: @code{gnuplot_preamble} Introduce instrucciones de gnuplot antes de que se haga el dibujo. Puede utilizarse cualquier comando v@'alido de gnuplot. Si interesa introducir varios comandos se separar@'an con punto y coma. El ejemplo que se muestra produce un gr@'afico en escala logar@'{@dotless{i}}tmica. El valor por defecto de @code{gnuplot_preamble} es la cadena vac@'{@dotless{i}}a @code{""}.

Ejemplo:

@example
[gnuplot_preamble, "set log y"]
@end example

@item
Opci@'on: @code{gnuplot_curve_titles}

Controla los t@'{@dotless{i}}tulos dados a la clave del gr@'afico. El valor por defecto es  @code{[default]}, el cual establece autom@'aticamente los t@'{@dotless{i}}tulos para cada curva representada. Si no es @code{[default]}, @code{gnuplot_curve_titles} debe contener una lista de cadenas, cada una de las cuales es @code{"title '@var{title_string}'"}. (Para desactivar la clave del gr@'afico, a@~n@'adase @code{"set nokey"} a @code{gnuplot_preamble}.)

Ejemplo:

@example
[gnuplot_curve_titles, ["title 'My first function'", "title 'My second function'"]]
@end example

@item
Opci@'on: @code{gnuplot_curve_styles} Es una lista de cadenas que controlan el aspecto de las curvas, como el color, el ancho, la discontinuidad, etc., y que deben enviarse al comando @code{plot} de gnuplot. El valor por defecto es
@code{["with lines 3", "with lines 1", "with lines 2", "with lines 5", "with lines 4", "with lines 6", "with lines 7"]}, que realiza un ciclo sobre un conjunto de colores diferentes. Cons@'ultese la documentaci@'on de gnuplot sobre @code{plot} para m@'as informaci@'on.

Ejemplo:

@example
[gnuplot_curve_styles, ["with lines 7", "with lines 2"]]
@end example

@item
Opci@'on: @code{gnuplot_default_term_command} Comando de gnuplot para establecer el tipo de terminal para el terminal por defecto. El valor por defecto es la cadena vac@'{@dotless{i}}a @code{""}, esto es, utiliza el valor por defecto de gnuplot.

Ejemplo:

@example
[gnuplot_default_term_command, "set term x11"]
@end example

@item
Opci@'on: @code{gnuplot_dumb_term_command} Comando de gnuplot para establecer el tipo de terminal para el terminal oculto. El valor por defecto es @code{"set term dumb 79 22"}, que da una salida de texto de 79 por 22 caracteres.

Ejemplo:

@example
[gnuplot_dumb_term_command, "set term dumb 132 50"]
@end example

@item
Opci@'on: @code{gnuplot_ps_term_command} Comando de gnuplot para establecer el tipo de terminal para el terminal PostScript. El valor por defecto es @code{"set size 1.5, 1.5;set term postscript eps enhanced color solid 24"},
que establece un tama@~no de 1.5 veces el valor por defecto de gnuplot, junto con un tama@~no de fuente de 24, entre otras cosas. Cons@'ultese la documentaci@'on de gnuplot para m@'as informaci@'on sobre @code{set term postscript}.

Ejemplo:

@example
[gnuplot_ps_term_command,
"set term postscript eps enhanced color solid 18"]
@end example

@end itemize

@{Ejemplos:}

@itemize @bullet
@item
Almacena un gr@'afico de @code{sin(x)} en el fichero @code{sin.eps}.
@end itemize
@example
(%i1) plot2d (sin(x), [x, 0, 2*%pi], [gnuplot_term, ps],
                        [gnuplot_out_file, "sin.eps"])$
@end example

@itemize @bullet
@item
Utiliza la opci@'on y para saltarse las singularidades, as@'{@dotless{i}} como la opci@'on @code{gnuplot_preamble} para colocar la clave en la parte inferior del dibujo.
@end itemize
@example
(%i2) plot2d ([gamma(x), 1/gamma(x)], [x, -4.5, 5], [y, -10, 10],
                     [gnuplot_preamble, "set key bottom"])$
@end example

@ifnotinfo
@image{../figures/plotting14,8cm}
@end ifnotinfo

@itemize @bullet
@item
Utiliza un @code{gnuplot_preamble} bastante complicado a fin de producir etiquetas en el eje x.
(N@'otese que la cadena de @code{gnuplot_preamble} debe introducirse sin saltos de l@'{@dotless{i}}nea.)
@end itemize
@example
(%i3) my_preamble: "set xzeroaxis; set xtics ('-2pi' -6.283, \
'-3pi/2' -4.712, '-pi' -3.1415, '-pi/2' -1.5708, '0' 0, \
'pi/2' 1.5708, 'pi' 3.1415,'3pi/2' 4.712, '2pi' 6.283)"$

(%i4) plot2d([cos(x), sin(x), tan(x), cot(x)],
       [x, -2*%pi, 2.1*%pi], [y, -2, 2],
       [gnuplot_preamble, my_preamble]);
@end example

@ifnotinfo
@image{../figures/plotting15,8cm}
@end ifnotinfo

@itemize @bullet
@item
Utiliza un @code{gnuplot_preamble} bastante complicado a fin de producir etiquetas en el eje x, produciendo una salida PostScript que aprovecha el formateo avanzado de texto disponible en gnuplot.
(N@'otese que la cadena de @code{gnuplot_preamble} debe introducirse sin saltos de l@'{@dotless{i}}nea.)
@end itemize
@example
(%i5) my_preamble: "set xzeroaxis; set xtics ('-2@{/Symbol p@}' \
-6.283, '-3@{/Symbol p@}/2' -4.712, '-@{/Symbol p@}' -3.1415, \
'-@{/Symbol p@}/2' -1.5708, '0' 0,'@{/Symbol p@}/2' 1.5708, \
'@{/Symbol p@}' 3.1415,'3@{/Symbol p@}/2' 4.712, '2@{/Symbol p@}' \
6.283)"$

(%i6) plot2d ([cos(x), sin(x), tan(x)], [x, -2*%pi, 2*%pi],
    [y, -2, 2], [gnuplot_preamble, my_preamble],
    [gnuplot_term, ps], [gnuplot_out_file, "trig.eps"]);
@end example

@itemize @bullet
@item
Un gr@'afico tridimensional utilizando el terminal pm3d de gnuplot.
@end itemize
@example
(%i7) plot3d (atan (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
        [grid, 50, 50], [gnuplot_pm3d, true])$
@end example

@ifnotinfo
@image{../figures/plotting16,8cm}
@end ifnotinfo

@itemize @bullet
@item
Un gr@'afico tridimensional sin malla y con contornos proyectados sobre el plano inferior.
@end itemize
@example
(%i8) my_preamble: "set pm3d at s;unset surface;set contour;\
set cntrparam levels 20;unset key"$
(%i9) plot3d(atan(-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
    [grid, 50, 50], [gnuplot_pm3d, true],
    [gnuplot_preamble, my_preamble])$
@end example

@ifnotinfo
@image{../figures/plotting17,8cm}
@end ifnotinfo

@itemize @bullet
@item
Un gr@'afico en el que el eje z s@'olo se representa por el color.
(N@'otese que la cadena de @code{gnuplot_preamble} debe introducirse sin saltos de l@'{@dotless{i}}nea.)
@end itemize
@example
(%i10) plot3d (cos (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
    [gnuplot_preamble, "set view map; unset surface"],
    [gnuplot_pm3d, true], [grid, 150, 150])$
@end example

@ifnotinfo
@image{../figures/plotting18,8cm}
@end ifnotinfo

@end defvr

@deffn {Funci@'on} plot3d (@var{expr}, @var{x_range}, @var{y_range}, ..., @var{options}, ...)
@deffnx {Funci@'on} plot3d ([@var{expr_1}, @var{expr_2}, @var{expr_3}], @var{x_range}, @var{y_range}, ..., @var{options}, ...)
@deffnx {Function} plot3d ([@var{expr_1}, @var{expr_2}, @var{expr_3}], @var{x_rge}, @var{y_rge})
@deffnx {Function} plot3d ([@var{name_1}, @var{name_2}, @var{name_3}], @var{x_range}, @var{y_range}, ..., @var{options}, ...)

Representa gr@'aficamente una o tres expresiones como funciones de dos variables.

@example
(%i1) plot3d (2^(-u^2 + v^2), [u, -3, 3], [v, -2, 2]);
@end example

@ifnotinfo
@image{../figures/plotting19,8cm}
@end ifnotinfo

dibuja @code{z = 2^(-u^2+v^2)} con @code{u} y @code{v} variando en [-3,3] y
[-2,2] respectivamente, y con @var{u} sobre el eje x, y con @code{v} sobre el
eje y.

El mismo gr@'afico se puede dibujar usando openmath:

@example
(%i2)  plot3d (2^(-u^2 + v^2), [u, -3, 3], [v, -2, 2],
               [plot_format, openmath]);
@end example

@ifnotinfo
@image{../figures/plotting25,8cm}
@end ifnotinfo

@noindent
en este caso el rat@'on se puede usar para rotar el gr@'afico y ver la
superficie desde diferentes lados.

Un ejemplo del tercer patr@'on de argumentos es

@example
(%i3) plot3d ([cos(x)*(3 + y*cos(x/2)), sin(x)*(3 + y*cos(x/2)),
   y*sin(x/2)], [x, -%pi, %pi], [y, -1, 1], ['grid, 50, 15]);
@end example

@ifnotinfo
@image{../figures/plotting20,8cm}
@end ifnotinfo

que dibuja una banda de Moebius, parametrizada por las tres expresiones dadas como primer argumento a @code{plot3d}. Un argumento opcional @code{['grid, 50, 15]} da el n@'umero de intervalos en las direcciones x e y, respectivamente.

Cuando la funci@'on a representar ha sido definida en Maxima mediante  @code{:=} o @code{define}, o en Lisp por DEFUN o DEFMFUN, entonces se podr@'a especificar por su nombre. Las funciones definidas a nivel de LISP por DEFMSPEC, las funciones de simplificaci@'on, junto con muchas otras funciones, no pueden especificarse directamente por su nombre.
@c REPORTED AS SF BUG # 1385271

Este ejemplo muestra un gr@'afico de la parte real de @code{z^1/3}.

@example
(%i4) plot3d (r^.33*cos(th/3), [r, 0, 1], [th, 0, 6*%pi],
      ['grid, 12, 80], ['transform_xy, polar_to_xy],
      ['view_direction, 1, 1, 1.4], ['colour_z, true]);
@end example

@ifnotinfo
@image{../figures/plotting21,8cm}
@end ifnotinfo

@noindent
Aqu@'{@dotless{i}} la opci@'on @code{view_direction} indica la direcci@'on desde la que se hace la proyecci@'on. Se hace esto desde una posici@'on infinita pero paralela a la l@'{@dotless{i}}nea que va desde  @code{view_direction} hasta el origen.  Esto s@'olo se utiliza cuando @code{plot_format} est@'a en @code{ps}, puesto que los otros visores permiten la rotaci@'on interactiva del objeto.

Otros ejemplos son la botella de Klein:

@example
(%i5) expr_1: 5*cos(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y)
      + 3.0) - 10.0$
(%i6) expr_2: -5*sin(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y)
      + 3.0)$
(%i7) expr_3: 5*(-sin(x/2)*cos(y) + cos(x/2)*sin(2*y))$

(%i8) plot3d ([expr_1, expr_2, expr_3], [x, -%pi, %pi],
      [y, -%pi, %pi], ['grid, 40, 40]);
@end example

@ifnotinfo
@image{../figures/plotting22,8cm}
@end ifnotinfo

y un toro:

@example
(%i9) expr_1: cos(y)*(10.0+6*cos(x))$
(%i10) expr_2: sin(y)*(10.0+6*cos(x))$
(%i11) expr_3: -6*sin(x)$
(%i12) plot3d ([expr_1, expr_2, expr_3], [x, 0, 2*%pi],
       [y, 0, 2*%pi], ['grid, 40, 40]);
@end example

@ifnotinfo
@image{figures/plotting23,8cm}
@end ifnotinfo

En ocasiones puede ser necesario definir una funci@'on para representarla. Todos los argumentos de @code{plot3d} se eval@'uan, de manera que puede ser dif@'{@dotless{i}}cil escribir una expresi@'on que haga lo que el usuario realmente quiere; en tales casos facilita las cosas definir previamente la funci@'on.   

@example
(%i13) M: matrix([1, 2, 3, 4], [1, 2, 3, 2], [1, 2, 3, 4],
       [1, 2, 3, 3])$
(%i14) f(x, y) := float (M [?round(x), ?round(y)])$
(%i15) plot3d (f, [x, 1, 4], [y, 1, 4], ['grid, 4, 4])$
@end example

@ifnotinfo
@image{../figures/plotting24,8cm}
@end ifnotinfo

V@'ease  @code{plot_options} para m@'as ejemplos.

@end deffn


@deffn {Funci@'on} make_transform (@var{vars}, @var{fx}, @var{fy}, @var{fz})
Devuelve una funci@'on apropiada para la funci@'on de transformaci@'on de @code{plot3d}. Debe usarse con la opci@'on gr@'afica @code{transform_xy}.
@example
make_transform ([r, th, z], r*cos(th), r*sin(th), z)$
@end example
es una transformaci@'on para pasar a coordenadas polares.
@end deffn

@deffn {Funci@'on} plot2d_ps (@var{expr}, @var{range})
Escribe en el @var{pstream} una secuencia de comandos PostScript que dibujan @var{expr} sobre @var{range}.

El argumento @var{expr} es una expresi@'on y @var{range} es una lista de la forma @code{[@var{x}, @var{min}, @var{max}]}
en la cual @var{x} es una variable que aparece en @var{expr}.

V@'ease tambi@'en @code{closeps}.

@end deffn

@deffn {Funci@'on} closeps ()
Esta funci@'on deber@'{@dotless{i}}a invocarse al final de una secuencia de comandos gr@'aficos.  Cierra el @var{pstream} y le asigna @code{nil}. Tambi@'en puede ser invocado antes de empezar un dibujo, para asegurar que se cierre el @var{pstream}
si estaba abierto.  Todas las instrucciones que se env@'{@dotless{i}}an al @var{pstream} lo abren si es necesario. La funci@'on  @code{closeps} es independiente de otras instrucciones gr@'aficas, ya que si se quiere dibujar dos rangos o sobreponer varios gr@'aficos, @var{pstream} debe permanecer abierto.
@end deffn

@deffn {Funci@'on} set_plot_option (@var{option})
Asigna un valor a una de las variables globales que controlan los gr@'aficos. El argumento
@var{option} se especifica como una lista de dos o m@'as elementos, en la que el primero es el nombre de una de las opciones de la lista @code{plot_options}.

La funci@'on @code{set_plot_option} eval@'ua sus argumentos y devuelve @code{plot_options} tal como queda despu@'es de la actualizaci@'on.

V@'eanse tambi@'en @code{plot_options}, @code{plot2d} y @code{plot3d}.

Ejemplos:

Se modifican los valores de @code{grid} y @code{x}.
Si a un nombre de opci@'on de @code{plot_options} tiene ya un valor asignado, hacerlo preceder de un ap@'ostrofo para evitar su evaluaci@'on.

@c ===beg===
@c set_plot_option ([grid, 30, 40]);
@c x: 42;
@c set_plot_option (['x, -100, 100]);
@c ===end===

@example
(%i1) set_plot_option ([grid, 30, 40]);
(%o1) [[x, - 1.755559702014E+305, 1.755559702014E+305], 
[y, - 1.755559702014E+305, 1.755559702014E+305], [t, - 3, 3], 
[grid, 30, 40], [view_direction, 1, 1, 1], [colour_z, false], 
[transform_xy, false], [run_viewer, true], 
[plot_format, gnuplot], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 10], [adapt_depth, 10], 
[gnuplot_pm3d, false], [gnuplot_preamble, ], 
[gnuplot_curve_titles, [default]], 
[gnuplot_curve_styles, [with lines 3, with lines 1, 
with lines 2, with lines 5, with lines 4, with lines 6, 
with lines 7]], [gnuplot_default_term_command, ], 
[gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript #
eps enhanced color solid 24]]
(%i2) x: 42;
(%o2)                          42
(%i3) set_plot_option (['x, -100, 100]);
(%o3) [[x, - 100.0, 100.0], [y, - 1.755559702014E+305, 
1.755559702014E+305], [t, - 3, 3], [grid, 30, 40], 
[view_direction, 1, 1, 1], [colour_z, false], 
[transform_xy, false], [run_viewer, true], 
[plot_format, gnuplot], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 10], [adapt_depth, 10], 
[gnuplot_pm3d, false], [gnuplot_preamble, ], 
[gnuplot_curve_titles, [default]], 
[gnuplot_curve_styles, [with lines 3, with lines 1, 
with lines 2, with lines 5, with lines 4, with lines 6, 
with lines 7]], [gnuplot_default_term_command, ], 
[gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript #
eps enhanced color solid 24]]
@end example

@end deffn

@deffn {Funci@'on} psdraw_curve (@var{ptlist})

Dibuja una curva uniendo los puntos de @var{ptlist}, que puede ser de la forma @code{[x0, y0, x1, y1, ...]} o @code{[[x0, y0], [x1, y1], ...]}

La funci@'on @code{join} se puede utilizar para tomar una lista con las x y otra con las y para luego formar pares.

La funci@'on @var{psdraw_curve} tan s@'olo llama a la funci@'on @var{pscurve}.  Esta es su definici@'on:

@example
(defun $psdraw_curve (lis)
  (p "newpath")
  ($pscurve lis)
  (p "stroke"))

@end example

@c ?DRAW2D  may also be used to produce a list
@c @example
@c  points1:?draw2d(1/x,[.05,10],.03) 
@c @end example

@end deffn


@deffn {Funci@'on} pscom (@var{cmd})

El argumento @var{cmd} se a@~nade al fichero PostScript.
Ejemplo:
@example
pscom ("4.5 72 mul 5.5 72 mul translate 14 14 scale");
@end example

@end deffn
