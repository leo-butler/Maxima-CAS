@c version 1.19
@menu
* Introducci@'on a la Ayuda::        
* Lisp y Maxima::            
* Recolector de Basura::          
* Documentaci@'on::               
* Definiciones para la Ayuda::        
@end menu

@node Introducci@'on a la Ayuda, Lisp y Maxima, Ayuda, Ayuda
@section Introducci@'on a la Ayuda

El comando de ayuda m@'as @'util es @code{describe}, 
el cual es invocado por el signo de cierre de interrogaci@'on @code{?} a trav@'es del prompt interactivo. 
@code{? foo} (con espacio entre @code{?} y @code{foo})
es equivalente a @code{describe ("foo")}, donde @code{foo}
es el nombre o parte del nombre de alguna funci@'on o tema;
entonces @code{describe} encontrar@'a todos los documentos que contengan
la cadena @code{foo} en sus t@'{@dotless{i}}tulos y los desplegar@'a como opciones. 
Si hay m@'as de una opci@'on, Maxima preguntar@'a al usuario para que
seleccione las opciones que desee consultar. 

@example
(%i1) ? integ
 0: (maxima.info)Introduction to Elliptic Functions and Integrals.
 1: Definitions for Elliptic Integrals.
 2: Integration.
 3: Introduction to Integration.
 4: Definitions for Integration.
 5: askinteger :Definitions for Simplification.
 6: integerp :Definitions for Miscellaneous Options.
 7: integrate :Definitions for Integration.
 8: integrate_use_rootsof :Definitions for Integration.
 9: integration_constant_counter :Definitions for Integration.
Enter space-separated numbers, `all' or `none': 7 8

Info from file /use/local/maxima/doc/info/maxima.info:
 - Function: integrate (expr, var)
 - Function: integrate (expr, var, a, b)
     Attempts to symbolically compute the integral of `expr' with
     respect to `var'.  `integrate (expr, var)' is an indefinite
     integral, while `integrate (expr, var, a, b)' is a definite
     integral, [...]
@end example

En este ejemplo las opciones 7 y 8 fueron seleccionadas. 
Todas o ninguna de las opciones pueden ser seleccionadas escribiendo @code{all} o @code{none}, las cuales pueden ser abrevidas por @code{a} o @code{n}, respectivamente. 

@node Lisp y Maxima, Recolector de Basura, Introducci@'on a la Ayuda, Ayuda
@section Lisp y Maxima

Maxima fue escrito en Lisp, y es muy f@'acil tener acceso a funciones y variables Lisp desde Maxima y viceversa. 
Los s@'{@dotless{i}}mbolos Lisp y los s@'{@dotless{i}}mblos Maxima est@'an claramente diferenciados por medio de una convenci@'on de nombres. 
Un s@'{@dotless{i}}mblo Lisp el cual comienza con un signo pesos @code{$} corresponde a un s@'{@dotless{i}}mbolo Maxima sin el signo pesos. 
Un s@'{@dotless{i}}mbolo Maxima el cual comienza con un signo de cierre de interrogaci@'on @code{?} corresponde a un s@'{@dotless{i}}mbolo Lisp sin dicho signo.
Por ejemplo, el s@'{@dotless{i}}mbolo Maxima @code{foo} corresponde a el s@'{@dotless{i}}mbolo Lisp @code{$foo}, 
mientras que el s@'{@dotless{i}}mbolo Maxima @code{?foo} corresponde a el s@'{@dotless{i}}mbolo Lisp @code{foo}, 
tenga en cuenta que @code{?foo} esta escrito sin espacio entre @code{?} y @code{foo}; 
de otra manera se estar@'{@dotless{i}}a invocando a @code{describe ("foo")}. 

El gui@'on @code{-}, asterisco @code{*}, u otros car@'acteres especiales en s@'imbolos Lisp deben ser escritos mediante un backslash @code{\} si aparecen en c@'odigo Maxima. 
Por ejemplo, el identificador Lisp @code{*foo-bar*} se debe escribir @code{?\*foo\-bar\*} en Maxima. 

Se puede ejecutar c@'odigo Lisp desde una sesi@'on de Maxima. 
Una l@'{@dotless{i}}nea Lisp (que contenga una o m@'as formas) puede ser ejecutada
por medio de un comando especial @code{:lisp}. Por ejemplo, 

@example
(%i1) :lisp (foo $x $y)
@end example

@noindent
se llama a la funci@'on Lisp @code{foo} con variables Maxima @code{x} y
@code{y} como argumentos. 
La instrucci@'on @code{:lisp} puede aparecer en el prompt interactivo
o en un archivo que sea procesado por @code{batch} o @code{demo}, pero no
en un archivo que sea procesado por @code{load}, @code{batchload}, @code{translate_file} o @code{compile_file}. 

La funci@'on @code{to_lisp()} abre una sesi@'on interactiva con el interprete Lisp. 
Escribiendo @code{(to-maxima)} se cierra la sesi@'on con Lisp y se retorna a Maxima. 

@c I DON'T EVEN WANT TO MENTION USING CTRL-C TO OPEN A LISP SESSION.
@c (1) IT TAKES EXTRA SET UP TO GET STARTED NAMELY :lisp (setq *debugger-hook* nil)
@c (2) IT GETS SCREWED UP EASILY -- TYPE SOMETHING WRONG AND YOU CAN'T GET BACK TO MAXIMA
@c (3) IT DOESN'T OFFER FUNCTIONALITY NOT PRESENT IN THE to_lisp() SESSION

Las funciones y variables Lisp las cuales esten para ser visibles en Maxima como funciones y variables con nombres oridinarios (sin una puntuaci@'on especial), deben tener nombres tipo Lisp que comiencen con el signo pesos 
@code{$}. 

Maxima es case-sensitive, distingue entre letras min@'usculas y may@'usculas en identificadores, mientras que Lisp no. 
Existen algunas reglas que gobiernan la traducci@'on de nombres entre Lisp y Maxima. 

@enumerate
@item
Un identificador Lisp que no se encuentra encerrado en barras verticales corresponde a un identificador Maxima in min@'uscula. 
Que el idenficador Lisp este en may@'uscula, min@'uscula o una combinaci@'on de las dos, no afecta en nada. 
E.g., los identificadores Lisp @code{$foo}, @code{$FOO}, y @code{$Foo}, todos corresponden al identificador Maxima @code{foo}. 
@item
Unn identificador Lisp el cual se encuentre todo en may@'uscula o todo en min@'uscula y encerrado entre barras verticales corresponde a un identicador Maxima con el caso contrario. 
Esto es, de may@'usculas cambia a min@'usculas y de min@'usculas cambia a may@'usculas. 
E.g., el identificador Lisp @code{|$FOO|} y @code{|$foo|}
corresponden los identificadores Maxima @code{foo} y @code{FOO}, respectivamente. 
@item
Un identificador Lisp el cual esta escrito mezclando letras may@'usculas y min@'usculas y se encuentra entre barras verticales corresponde a un identificador Maxima con la misma escritura. 
E.g., el identificador Lisp @code{|$Foo|} corresponde a el identificador Maxima @code{Foo}. 
@end enumerate

La macro Lisp @code{#$} permite el uso de expresiones Maxima dentro de c@'odigo Lisp. @code{#$@var{expr}$} extiende a una expresi@'on Lisp equivalente a la expresi@'on Maxima @var{expr}.   

@example
(msetq $foo #$[x, y]$)
@end example

@noindent
Esto tiene el mismo efecto que: 

@example
(%i1) foo: [x, y];
@end example

@noindent
La funci@'on Lisp @code{displa} imprime una expresi@'on en formato Maxima.

@example
(%i1) :lisp #$[x, y, z]$ 
((MLIST SIMP) $X $Y $Z)
(%i1) :lisp (displa '((MLIST SIMP) $X $Y $Z))
[x, y, z]
NIL
@end example

Las funciones definidas en Maxima no son funciones Lisp ordinarias. 
La funci@'on Lisp @code{mfuncall} llama a una funci@'on Maxima. 
Por ejemplo: 

@example
(%i1) foo(x,y) := x*y$
(%i2) :lisp (mfuncall '$foo 'a 'b)
((MTIMES SIMP) A B)
@end example

Algunas funciones Lisp son compartidas en el paquete Maxima, las cuales se listan a continuaci@'on: 

@code{complement},
@code{continue},
@code{//},
@code{float},
@code{functionp},
@code{array},
@code{exp},
@code{listen},
@code{signum},
@code{atan},
@code{asin},
@code{acos},
@code{asinh},
@code{acosh},
@code{atanh},
@code{tanh},
@code{cosh},
@code{sinh},
@code{tan},
@code{break},
y @code{gcd}.

@node Recolector de Basura, Documentaci@'on, Lisp y Maxima, Ayuda
@section Recolector de Basura

La computaci@'on simb@'olica tiende a crear una buena cantidad de basura, y un manejo efectivo de esto puede ser crucial para el t@'ermino exitoso de algunos programas. 

Bajo GCL (GNU Common Lisp), en los sistemas UNIX donde la llamada al  sistema mprotect esta disponible (incluyendo SUN OS 4.0 y algunas variantes de BSD) un recolector de basura estratificado est@'a disponibe. Estos l@'{@dotless{i}}mites de colecci@'on para memoria virtual, han sido escritos recientemente. Mire la documentaci@'on de GCL bajo ALLOCATE y GBC.  En el nivel lisp haga (setq si::*notify-gbc* t) eso le ayudar@'a a determinar cuales @'areas necesitan m@'as espacio.


@node Documentaci@'on, Definiciones para la Ayuda, Recolector de Basura, Ayuda
@section Documentaci@'on

El manual en l@'{@dotless{i}}nea del usuario de Maxima puede ser visto en diferentes formas. 
Desde el prompt interactivo de Maxima, el manual de usuario
es visto como texto plano por medio del comando  @code{?} (i.e., la funci@'on @code{describe}). 
El manual de usuario tambi@'en puede ser visto como hipertexto tipo @code{info} por medio del programa @code{info} y como una p@'agina web a trav@'es de cualquier navegador. 

El comando @code{example} muestra ejemplos para muchas funciones Maxima. 
Por ejemplo: 

@example
(%i1) example (integrate);
@end example

produce: 

@example
(%i2) test(f):=block([u],u:integrate(f,x),ratsimp(f-diff(u,x)))
(%o2) test(f) := block([u], u : integrate(f, x), 

                                         ratsimp(f - diff(u, x)))
(%i3) test(sin(x))
(%o3)                           0
(%i4) test(1/(x+1))
(%o4)                           0
(%i5) test(1/(x^2+1))
(%o5)                           0
@end example

y salidas adicionales. 


@node Definiciones para la Ayuda,  , Documentaci@'on, Ayuda
@section Definiciones para la Ayuda

@deffn {Funci@'on} demo (@var{archivo})
Evalua las expresiones Maxima contenidas en @var{archivo} y muestra los resultados. 
@code{demo} hace pausas despu@'es de evaluar  cada expresi@'on
y continua despu@'es de que el usuario ingrese un retorno de carro. 
(Si se ejecuta en Xmaxima, @code{demo} puede que necesite un punto y coma
@code{;} a continuaci@'on del retorno de carro.)

@code{demo} busca la lista de directorios 
@code{file_search_demo} para encontrar @code{archivo}.
Si el archivo tiene el sufijo @code{dem}, 
el sufijo puede ser omitido. 
Ver tambi@'en @code{file_search}.

@code{demo} evalua su argumento. 
@code{demo} retorna el nombre del archivo demostraci@'on. 

Ejemplo:

@example
(%i1) demo ("disol");

batching /home/wfs/maxima/share/simplification/disol.dem
 At the _ prompt, type ';' followed by enter to get next demo
(%i2)                      load(disol)

_
(%i3)           exp1 : a (e (g + f) + b (d + c))
(%o3)               a (e (g + f) + b (d + c))

_
(%i4)                disolate(exp1, a, b, e)
(%t4)                         d + c

(%t5)                         g + f

(%o5)                   a (%t5 e + %t4 b)

_
(%i5) demo ("rncomb");

batching /home/wfs/maxima/share/simplification/rncomb.dem
 At the _ prompt, type ';' followed by enter to get next demo
(%i6)                     load(rncomb)

_
                             z         x
(%i7)               exp1 : ----- + ---------
                           y + x   2 (y + x)
                          z         x
(%o7)                   ----- + ---------
                        y + x   2 (y + x)

_
(%i8)                     combine(exp1)
                          z         x
(%o8)                   ----- + ---------
                        y + x   2 (y + x)

_
(%i9)                     rncombine(%)
                             2 z + x
(%o9)                       ---------
                            2 (y + x)

_
                             d   c   b   a
(%i10)                exp2 : - + - + - + -
                             3   3   2   2
                          d   c   b   a
(%o10)                    - + - + - + -
                          3   3   2   2

_
(%i11)                    combine(exp2)
                      2 d + 2 c + 3 (b + a)
(%o11)                ---------------------
                                6

_
(%i12)                   rncombine(exp2)
                      2 d + 2 c + 3 b + 3 a
(%o12)                ---------------------
                                6

_
(%i13) 
@end example
@end deffn

@deffn {Funci@'on} describe (@var{cadena})
Encuentra todos los documentos los cuales contengan @var{cadena} es sus t@'{@dotless{i}}tulos y los despliega como opciones. 
Si hay m@'as de una opci@'on, Maxima preguntar@'a al usuario para que
seleccione las opciones que desee consultar.
En el prompt interactivo, 
@code{? foo} (con espacio entre @code{?} y @code{foo})
es equivalente a  @code{describe ("foo")}.

@code{describe ("")} produce una lista de todos los temas documentados en
el manual en l@'{@dotless{i}}nea. 

@code{describe} no evalua su argumento. 
@code{describe} siempre retorna @code{false}.

Ejemplo:

@example
(%i1) ? integ
 0: (maxima.info)Introduction to Elliptic Functions and Integrals.
 1: Definitions for Elliptic Integrals.
 2: Integration.
 3: Introduction to Integration.
 4: Definitions for Integration.
 5: askinteger :Definitions for Simplification.
 6: integerp :Definitions for Miscellaneous Options.
 7: integrate :Definitions for Integration.
 8: integrate_use_rootsof :Definitions for Integration.
 9: integration_constant_counter :Definitions for Integration.
Enter space-separated numbers, `all' or `none': 7 8

Info from file /use/local/maxima/doc/info/maxima.info:
 - Function: integrate (expr, var)
 - Function: integrate (expr, var, a, b)
     Attempts to symbolically compute the integral of `expr' with
     respect to `var'.  `integrate (expr, var)' is an indefinite
     integral, while `integrate (expr, var, a, b)' is a definite
     integral, [...]
@end example

En este ejemplo las opciones 7 y 8 fueron seleccionadas. 
Todas o ninguna de las opciones pueden ser seleccionadas escribiendo @code{all} o @code{none}, las cuales pueden ser abrevidas por @code{a} o @code{n}, respectivamente. 

@c @pxref{Introducci@'on a la Ayuda}

@end deffn


@deffn {Funci@'on} example (@var{tema})
@deffnx {Funci@'on} example ()
@code{example (@var{tema})} mostrar@'a algunos ejemplos de @var{tema}, 
el cual es un s@'{@dotless{i}}mbolo (no una cadena). 
La mayor@'{@dotless{i}}a de los temas son nombres de funciones. 
@code{example ()} retorna la lista de todos los temas conocidos. 

El nombre del archivo que contiene los ejemplos esta dado por la 
variable global @code{manual_demo}, cuyo valor por defecto es
@code{"manual.demo"}. 

@code{example} no evalua su argumento.
@code{example} retorna @code{done}
a menos que haya un error o que no haya argumento, en cuyo caso @code{example} retornar@'a la lista de todos los temas conocidos. 

Ejemplos:

@example
(%i1) example (append);
(%i2) append([x+y,0,-3.2],[2.5E+20,x])
(%o2)             [y + x, 0, - 3.2, 2.5E+20, x]
(%o2)                         done
(%i3) example (coeff);
(%i4) coeff(b+tan(x)+2*a*tan(x) = 3+5*tan(x),tan(x))
(%o4)                      2 a + 1 = 5
(%i5) coeff(1+x*%e^x+y,x,0)
(%o5)                         y + 1
(%o5)                         done
@end example

@end deffn

@c Traducido por: Juan Pablo Romero Bernal y Oscar Diaz 
@c Revisado por : Juan Pablo Romero Bernal
@c correo-e     : jpromerobx@linuxmail.org
@c Grupo Linux Universidad Distrital
@c http://glud.udistrital.edu.co
@c Proyecto GLUD-CLog
@c http://glud.udistrital.edu.co/clog
@c Bogota - Colombia
