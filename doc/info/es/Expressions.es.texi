@c version 1.41
@menu
* Introducci@'on a las Expresiones::  
* Asignaci@'on::
* Expresiones complejas::
* Nombres y verbos::
* Identificadores::
* Desigualdades::
* Sintaxis::
* Definiciones para Expresiones::
@end menu

@node Introducci@'on a las Expresiones, Asignaci@'on, Expresiones, Expresiones
@section Introducci@'on a las Expresiones

Existe un cierto n@'umero de palabras reservadas que no pueden
utilizarse como nombres de variables. Su uso podr@'{@dotless{i}}a causar 
errores cr@'{@dotless{i}}ticos de sintaxis. 

@example
integrate            next           from                 diff            
in                   at             limit                sum             
for                  and            elseif               then            
else                 do             or                   if              
unless               product        while                thru            
step                                                                     
@end example

La mayor@'{@dotless{i}}a de los objetos en Maxima son expresiones. Una secuencia
de expresiones puede constituir una expresi@'on, separ@'andolas por
comas y colocando par@'entesis alrededor de ellas. Esto es similar a 
las @i{expresiones con coma} en @b{C}. 

@example
(%i1) x: 3$
(%i2) (x: x+1, x: x^2);
(%o2)                          16
(%i3) (if (x > 17) then 2 else 4);
(%o3)                           4
(%i4) (if (x > 17) then x: 2 else y: 4, y+x);
(%o4)                          20
@end example

Incluso los bucles en Maxima son expresiones, aunque el valor que
 retornan (@code{done}) no es muy @'util. 

@example
(%i1) y: (x: 1, for i from 1 thru 10 do (x: x*i))$
(%i2) y;
(%o2)                         done
@end example

pero quiz@'as se quiera incluir un tercer t@'ermino en la @i{expresi@'on con coma} para que devuelva el valor de inter@'es. 

@example
(%i3) y: (x: 1, for i from 1 thru 10 do (x: x*i), x)$
(%i4) y;
(%o4)                        3628800
@end example

@node Asignaci@'on, Expresiones complejas, Introducci@'on a las Expresiones, Expresiones
@section Asignaci@'on

Existen dos operadores de asignaci@'on en Maxima, @code{:} y @code{::}. 
Por ejemplo, @code{a: 3} asigna a la variable @code{a} el valor de 3. Por otro lado, @code{::} asigna el valor de la expresi@'on de su derecha al valor de la cantidad de su izquierda, el cual debe evaluarse a una variable de tipo @'atomo o una variable subindicada. 

@node Expresiones complejas, Nombres y verbos, Asignaci@'on, Expresiones
@section Expresiones complejas

Una expresi@'on compleja se especifica en Maxima a@~nadiendo a la parte
real de la expresi@'on el producto de @code{%i} por la parte imaginaria. As@'{@dotless{i}} las ra@'{@dotless{i}}ces de la ecuaci@'on @code{x^2 - 4*x + 13 = 0} son @code{2 + 3*%i} y @code{2 - 3*%i}. N@'otese que la simplificaci@'on de productos de expresiones complejas puede ser efectuado expandiendo el producto. La simplificaci@'on de cocientes, ra@'{@dotless{i}}ces y otras funciones que
contengan expresiones complejas pueden normalmente conseguirse a trav@'es de las funciones @code{realpart}, @code{imagpart}, @code{rectform}, @code{polarform}, @code{abs} o @code{carg}. 

@node Nombres y verbos, Identificadores, Expresiones complejas, Expresiones
@section Nombres y verbos

Maxima distingue entre operadores que son "nombres" y operadores que son "verbos".
Un verbo es un operador que puede ser ejecutado.
Un nombre es un operador que aparece como un s@'{@dotless{i}}mbolo en una expresi@'on pero sin ser ejecutado.
Por defecto, los nombres de funciones son verbos.
Un verbo puede transformarse en nombre utilizando el ap@'ostrofo o aplicando la funci@'on @code{nounify}.
Un nombre puede transformarse en verbo aplicando la funci@'on @code{verbify}.
La variable @code{nouns} hace que @code{ev} eval@'ue los nombres presentes en una expresi@'on.

La forma verbal se distingue mediante la precedencia del car@'acter d@'olar @code{$} al correspondiente s@'{@dotless{i}}mbolo de Lisp.
Por otro lado, la forma nominal se distingue mediante la precedencia del car@'acter porcentaje @code{%} al correspondiente s@'{@dotless{i}}mbolo de Lisp. 
Algunos nombres gozan de propiedades especiales para su representaci@'on, como @code{'integrate} o @code{'derivative}
(devuelto por @code{diff}), pero la mayor@'{@dotless{i}}a no.
Por defecto, las formas nominal y verbal de una funci@'on son id@'enticas cuando se muestran en un terminal.
La variable global @code{noundisp} hace que Maxima muestre los nombres precedidos del ap@'ostrofo @code{'}.

V@'eanse tambi@'en @code{noun}, @code{nouns}, @code{nounify} y @code{verbify}.

Ejemplos:

@c ===beg===
@c foo (x) := x^2;
@c foo (42);
@c 'foo (42);
@c 'foo (42), nouns;
@c declare (bar, noun);
@c bar (x) := x/17;
@c bar (52);
@c bar (52), nouns;
@c integrate (1/x, x, 1, 42);
@c 'integrate (1/x, x, 1, 42);
@c ev (%, nouns);
@c ===end===
@example
(%i1) foo (x) := x^2;
                                     2
(%o1)                     foo(x) := x
(%i2) foo (42);
(%o2)                         1764
(%i3) 'foo (42);
(%o3)                        foo(42)
(%i4) 'foo (42), nouns;
(%o4)                         1764
(%i5) declare (bar, noun);
(%o5)                         done
(%i6) bar (x) := x/17;
                                     x
(%o6)                    ''bar(x) := --
                                     17
(%i7) bar (52);
(%o7)                        bar(52)
(%i8) bar (52), nouns;
                               52
(%o8)                          --
                               17
(%i9) integrate (1/x, x, 1, 42);
(%o9)                        log(42)
(%i10) 'integrate (1/x, x, 1, 42);
                             42
                            /
                            [   1
(%o10)                      I   - dx
                            ]   x
                            /
                             1
(%i11) ev (%, nouns);
(%o11)                       log(42)
@end example

@node Identificadores, Desigualdades, Nombres y verbos, Expresiones
@section Identificadores

En Maxima, los identificadores pueden contener caracteres alfab@'eticos, n@'umeros del 0 al 9 y cualquier otro car@'acter precedido de la barra invertida @code{\}.

Un identificador puede comenzar con un car@'acter num@'erico si @'este va precedido de la barra invertida @code{\}.
Los caracteres num@'ericos que ocupen la segunda posici@'on o posterior no necesitan ir precedidos de la barra invertida.

Un car@'acter especial puede declararse alfab@'etico con la funci@'on @code{declare}.
As@'{@dotless{i}} declarado, no necesita ir precedido de la barra invertida en un identificador.
En principio, los caracteres alfab@'eticos son las letras de @code{A} a @code{Z} y @code{a} a @code{z}, junto con  @code{%} y @code{_}.

Maxima distingue min@'usculas y may@'usculas. Los identificadores @code{foo}, @code{FOO} y @code{Foo} son distintos.
V@'ease @ref{Lisp y Maxima} para m@'as informaci@'on.

Un identificador en Maxima es un s@'{@dotless{i}}mbolo Lisp que comienza con el s@'{@dotless{i}}mbolo d@'olar @code{$}.
Cualquier otro s@'{@dotless{i}}mbolo de Lisp va precedido de la interrogaci@'on @code{?} cuando aparece en Maxima.
V@'ease @ref{Lisp y Maxima} para m@'as informaci@'on.

Ejemplos:

@c ===beg===
@c %an_ordinary_identifier42;
@c embedded\ spaces\ in\ an\ identifier;
@c symbolp (%);
@c [foo+bar, foo\+bar];
@c [1729, \1729];
@c [symbolp (foo\+bar), symbolp (\1729)];
@c [is (foo\+bar = foo+bar), is (\1729 = 1729)];
@c baz\~quux;
@c declare ("~", alphabetic);
@c baz~quux;
@c [is (foo = FOO), is (FOO = Foo), is (Foo = foo)];
@c :lisp (defvar *my-lisp-variable* '$foo)
@c ?\*my\-lisp\-variable\*;
@c ===end===

@example
(%i1) %an_ordinary_identifier42;
(%o1)               %an_ordinary_identifier42
(%i2) embedded\ spaces\ in\ an\ identifier;
(%o2)           embedded spaces in an identifier
(%i3) symbolp (%);
(%o3)                         true
(%i4) [foo+bar, foo\+bar];
(%o4)                 [foo + bar, foo+bar]
(%i5) [1729, \1729];
(%o5)                     [1729, 1729]
(%i6) [symbolp (foo\+bar), symbolp (\1729)];
(%o6)                     [true, true]
(%i7) [is (foo\+bar = foo+bar), is (\1729 = 1729)];
(%o7)                    [false, false]
(%i8) baz\~quux;
(%o8)                       baz~quux
(%i9) declare ("~", alphabetic);
(%o9)                         done
(%i10) baz~quux;
(%o10)                      baz~quux
(%i11) [is (foo = FOO), is (FOO = Foo), is (Foo = foo)];
(%o11)                [false, false, false]
(%i12) :lisp (defvar *my-lisp-variable* '$foo)
*MY-LISP-VARIABLE*
(%i12) ?\*my\-lisp\-variable\*;
(%o12)                         foo
@end example

@node Desigualdades, Sintaxis, Identificadores, Expresiones
@section Desigualdades

Maxima dispone de los operadores de desigualdad @code{<}, @code{<=}, @code{>=}, @code{>}, @code{#} y @code{notequal}.
V@'ease @code{if} para una descripci@'on de las expresiones condicionales.

@node Sintaxis, Definiciones para Expresiones, Desigualdades, Expresiones
@section Sintaxis

Es posible definir nuevos operadores con una precedencia especificada,
o eliminar o redefinir la precedencia de operadores ya existentes.  
Un operador puede ser de tipo prefijo unario o postfijo unario, infijo binario, infijo @code{n}-ario, "bi-fijo" (matchfix) o "no-fijo"; 
"bi-fijo"  se refiere a un par de s@'{@dotless{i}}mbolos que encierran su o sus argumentos, y "no-fijo" es un operador que no necesita argumentos.
A continuaci@'on ejemplos sobre los diferentes tipos de operadores.

@table @asis
@item prefijo unario
negaci@'on @code{- a}
@item postfijo unario
factorial @code{a!}
@item infijo binario
exponenciaci@'on @code{a^b}
@item n-ary infix
suma @code{a + b}
@item "bi-fijo"
construcci@'on de una lista @code{[a, b]}
@end table

(Maxima no incluye operadores "no-fijos", pero se puede ver un ejemplo en @code{nofix}.)

El mecanismo para definir un nuevo operador es sencillo.
Tan solo es necesario declarar una funci@'on como operador;
la funci@'on operador puede estar definida o no.

Un ejemplo de operador definido por el usuario es el siguiente.
N@'otese que la llamada a funci@'on @code{"dd" (a)} equivale a @code{dd a},
de igual manera que  @code{"<-" (a, b)} tambi@'en equivale a @code{a <- b}.
N@'otese tambi@'en que las funciones @code{"dd"} y @code{"<-"} no est@'an definidas en este ejemplo.

@c ===beg===
@c prefix ("dd");
@c dd a;
@c "dd" (a);
@c infix ("<-");
@c a <- dd b;
@c "<-" (a, "dd" (b));
@c ===end===
@example
(%i1) prefix ("dd");
(%o1)                          dd
(%i2) dd a;
(%o2)                         dd a
(%i3) "dd" (a);
(%o3)                         dd a
(%i4) infix ("<-");
(%o4)                          <-
(%i5) a <- dd b;
(%o5)                      a <- dd b
(%i6) "<-" (a, "dd" (b));
(%o6)                      a <- dd b
@end example

Las funciones de Maxima que definen nuevos operadores se resumen en esta tabla, 
en la que se establecen las fuerzas de enlace a izquierda (lbp, de @i{left binding power}) y a derecha (rbp, de @i{right binding power}) por defecto.
@c REWORK FOLLOWING COMMENT. IT'S NOT CLEAR ENOUGH, GIVEN THAT IT'S FAIRLY IMPORTANT
(La fuerza de enlace determina la precedencia del operador. Sin embargo, puesto que las fuerzas de enlace a izquierda y derecha pueden ser diferentes, la fuerza de enlace es algo m@'as que la simple precedencia.)
Algunas de las funciones para definir operadores toman argumentos adicionales;
v@'eanse las descripciones de estas funciones para m@'as detalles.

@table @code
@item prefix
rbp=180
@item postfix
lbp=180
@item infix
lbp=180, rbp=180
@item nary
lbp=180, rbp=180
@item matchfix
(la fuerza de enlace no se aplica aqu@'{@dotless{i}})
@item nofix
(la fuerza de enlace no se aplica aqu@'{@dotless{i}})
@end table

A efectos comparativos, aqu@'{@dotless{i}} se presentan algunos operadores de Maxima junto con sus fuerzas de enlace a izquierda y derecha.

@example
Operator   lbp     rbp

  :        180     20 
  ::       180     20 
  :=       180     20 
  ::=      180     20 
  !        160
  !!       160
  ^        140     139 
  .        130     129 
  *        120
  /        120     120 
  +        100     100 
  -        100     134 
  =        80      80 
  #        80      80 
  >        80      80 
  >=       80      80 
  <        80      80 
  <=       80      80 
  not              70 
  and      65
  or       60
  ,        10
  $        -1
  ;        -1
@end example

Las funciones @code{remove} y @code{kill} eliminan propiedades de operadores de un @'atomo.
La llamada @code{remove ("@var{a}", op)} s@'olo elimina las propiedades de operador de @var{a}.
La llamada @code{kill ("@var{a}")} elimina todas las propiedades de @var{a}, incluidas las propiedades de operador.
N@'otese que el nombre del operador debe ir entre comillas.

@c MAYBE COPY THIS EXAMPLE TO remove AND/OR kill
@c ===beg===
@c infix ("@");
@c "@" (a, b) := a^b;
@c 5 @ 3;
@c remove ("@", op);
@c 5 @ 3;
@c "@" (5, 3);
@c infix ("@");
@c 5 @ 3;
@c kill ("@");
@c 5 @ 3;
@c "@" (5, 3);
@c ===end===
@example
(%i1) infix ("@@");
(%o1)                           @@
(%i2) "@@" (a, b) := a^b;
                                     b
(%o2)                      a @@ b := a
(%i3) 5 @@ 3;
(%o3)                          125
(%i4) remove ("@@", op);
(%o4)                         done
(%i5) 5 @@ 3;
Incorrect syntax: @@ is not an infix operator
5 @@
 ^
(%i5) "@@" (5, 3);
(%o5)                          125
(%i6) infix ("@@");
(%o6)                           @@
(%i7) 5 @@ 3;
(%o7)                          125
(%i8) kill ("@@");
(%o8)                         done
(%i9) 5 @@ 3;
Incorrect syntax: @@ is not an infix operator
5 @@
 ^
(%i9) "@@" (5, 3);
(%o9)                        @@(5, 3)
@end example

@node Definiciones para Expresiones,  , Sintaxis, Expresiones
@section Definiciones para Expresiones

@deffn {Funci@'on} at (@var{expr}, [@var{eqn_1}, ..., @var{eqn_n}])
@deffnx {Funci@'on} at (@var{expr}, @var{eqn})
Eval@'ua la expresi@'on @var{expr} asignando a las variables los valores especificados para ellas en la lista de ecuaciones @code{[@var{eqn_1}, ..., @var{eqn_n}]} o en la ecuaci@'on simple @var{eqn}.

Si una subexpresi@'on depende de cualquiera de las variables para la cual se especifica un valor, pero  no puede ser evaluado, entonces @code{at} devuelve una forma nominal.

La funci@'on @code{at} realiza m@'ultiples sustituciones en serie, no en paralelo.

V@'ease tambi@'en @code{atvalue}.
Para otras funciones que tambi@'en llevan a cabo sustituciones, cons@'ultense @code{subst} y @code{ev}.

Ejemplos:
@c COPIED FROM example(at)

@c ===beg===
@c atvalue (f(x,y), [x = 0, y = 1], a^2);
@c atvalue ('diff (f(x,y), x), x = 0, 1 + y);
@c printprops (all, atvalue);
@c diff (4*f(x, y)^2 - u(x, y)^2, x);
@c at (%, [x = 0, y = 1]);
@c ===end===
@example
(%i1) atvalue (f(x,y), [x = 0, y = 1], a^2);
                                2
(%o1)                          a
(%i2) atvalue ('diff (f(x,y), x), x = 0, 1 + y);
(%o2)                        @@2 + 1
(%i3) printprops (all, atvalue);
                                !
                  d             !
                 --- (f(@@1, @@2))!       = @@2 + 1
                 d@@1            !
                                !@@1 = 0

                                     2
                          f(0, 1) = a

(%o3)                         done
(%i4) diff (4*f(x, y)^2 - u(x, y)^2, x);
                  d                          d
(%o4)  8 f(x, y) (-- (f(x, y))) - 2 u(x, y) (-- (u(x, y)))
                  dx                         dx
(%i5) at (%, [x = 0, y = 1]);
                                         !
              2              d           !
(%o5)     16 a  - 2 u(0, 1) (-- (u(x, y))!            )
                             dx          !
                                         !x = 0, y = 1
@end example

@end deffn

@deffn {Funci@'on} box (@var{expr})
@deffnx {Funci@'on} box (@var{expr}, @var{a})
Devuelve @var{expr} encerrada en una caja.
El valor devuelto es una expresi@'on con @code{box} como operador y @var{expr} como argumento.
Se dibujar@'a una caja cuando @code{display2d} valga @code{true}.

La llamada @code{box (@var{expr}, @var{a})}
encierra @var{expr} en una caja etiquetada con el s@'{@dotless{i}}mbolo @var{a}.
La etiqueta se recorta si es m@'as larga que el ancho de la caja.

La expresi@'on encerrada no se eval@'ua, siendo exclu@'{@dotless{i}}da de los c@'alculos.

La variable @code{boxchar} guarda el car@'acter a utilizar para dibujar la caja en las funciones @code{box}, @code{dpart} y @code{lpart}.

Ejemplos:

@c ===beg===
@c box (a^2 + b^2);
@c box (a^2 + b^2, term_1);
@c 1729 - box (1729);
@c boxchar: "-";
@c box (sin(x) + cos(y));
@c ===end===
@example
(%i1) box (a^2 + b^2);
             """""""""
             " 2   2 "
(%o1)        "b  + a "
             """""""""
(%i2) box (a^2 + b^2, term_1);
             term_1"""
             " 2   2 "
(%o2)        "b  + a "
             """""""""
(%i3) 1729 - box (1729);
                  """"""
(%o3)      1729 - "1729"
                  """"""
(%i4) boxchar: "-";
(%o4)            -
(%i5) box (sin(x) + cos(y));
                -----------------
(%o5)           -COS(y) + SIN(x)-
                -----------------
(%i6) 
@end example

@end deffn


@defvr {Variable opcional} boxchar
Valor por defecto: @code{"}

La variable @code{boxchar} guarda el car@'acter a utilizar para dibujar la caja en las funciones @code{box}, @code{dpart} y @code{lpart}.

Todas las cajas en una expresi@'on se dibujan con el valor actual de @code{boxchar}, car@'acter que no se almacena con las expresi@'on encerrada.

@end defvr

@deffn {Funci@'on} carg (@var{z})
Devuelve el argumento complejo de @var{z}.
El argumento complejo es un @'angulo @code{theta} en @code{(-%pi, %pi]}
tal que @code{r exp (theta %i) = @var{z}} donde @code{r} es la magnitud de @var{z}.
@c ACTUALLY carg DOESN'T ALWAYS RETURN A VALUE IN (-%pi, %pi]; SEE SF BUG REPORT # 816166

La funci@'on @code{carg} es computacional, no simplificativa.
@c PROBABLY NEED TO EXPLAIN IMPLICATIONS OF ABOVE STATEMENT
@c SEE ALSO SF BUG REPORT # 902290

La funci@'on @code{carg} ignora la declaraci@'on @code{declare (@var{x}, complex)},
y trata a @var{x} como una variable real.
Se trata de un fallo conocido en Maximo. @c SEE SF BUG REPORT # 620246

V@'eanse tambi@'en @code{abs} (m@'odulo complejo), @code{polarform}, @code{rectform},
@code{realpart} y @code{imagpart}.

Ejemplos:

@c ===beg===
@c carg (1);
@c carg (1 + %i);
@c carg (exp (%i));
@c carg (exp (%pi * %i));
@c carg (exp (3/2 * %pi * %i));
@c carg (17 * exp (2 * %i));
@c ===end===

@example
(%i1) carg (1);
(%o1)                           0
(%i2) carg (1 + %i);
                               %pi
(%o2)                          ---
                                4
(%i3) carg (exp (%i));
(%o3)                           1
(%i4) carg (exp (%pi * %i));
(%o4)                          %pi
(%i5) carg (exp (3/2 * %pi * %i));
                                %pi
(%o5)                         - ---
                                 2
(%i6) carg (17 * exp (2 * %i));
(%o6)                           2
@end example

@end deffn

@deffn {Operator especial} constant
La llamada @code{declare (@var{a}, constant)} declara @var{a} como constante.
V@'ease @code{declare}.
@c WHAT EXACTLY ARE THE CONSEQUENCES OF DECLARING AN ATOM TO BE CONSTANT ??

@end deffn

@deffn {Funci@'on} constantp (@var{expr})
Devuelve @code{true} si @var{expr} es una expresi@'on constante y @code{false} en caso contrario.
@c WHAT DOES MAXIMA KNOW ABOUT CONSTANT EXPRESSIONS ??

Una expresi@'on se considera constante si sus argumentos son n@'umeros (incluidos los n@'umeros racionales que se muestran con @code{/R/}), constantes simb@'olicas como @code{%pi}, @code{%e} o @code{%i}, variables con valor constante o declarada como constante por @code{declare},
o funciones cuyos argumentos son constantes.

La funci@'on @code{constantp} eval@'ua sus argumentos.

Ejemplos:

@c ===beg===
@c constantp (7 * sin(2));
@c constantp (rat (17/29));
@c constantp (%pi * sin(%e));
@c constantp (exp (x));
@c declare (x, constant);
@c constantp (exp (x));
@c constantp (foo (x) + bar (%e) + baz (2));
@c ===end===

@example
(%i1) constantp (7 * sin(2));
(%o1) 				     TRUE
(%i2) constantp (rat (17/29));
(%o2) 				     TRUE
(%i3) constantp (%pi * sin(%e));
(%o3) 				     TRUE
(%i4) constantp (exp (x));
(%o4) 				     FALSE
(%i5) declare (x, constant);
(%o5) 				     DONE
(%i6) constantp (exp (x));
(%o6) 				     TRUE
(%i7) constantp (foo (x) + bar (%e) + baz (2));
(%o7) 				     FALSE
(%i8) 
@end example
@end deffn

@deffn {Funci@'on} declare (@var{a_1}, @var{f_1}, @var{a_2}, @var{f_2}, ...)
Asigna al @'atomo @var{a_i} la caracter@'{@dotless{i}}stica @var{f_i}.
Las @var{a_i} y las @var{f_i} tambi@'en pueden ser listas de @'atomos y caracter@'{@dotless{i}}sticas, respectivamente, en cuyo caso cada @'atomo toma todas las caracter@'{@dotless{i}}sticas.

La funci@'on @code{declare} no eval@'ua sus argumentos y devuelve siempre @code{done}.

Las posibles caracter@'{@dotless{i}}sticas y sus significados son:

@code{constant} convierte a @var{a_i} en una constante, como @code{%pi}.

@code{mainvar} convierte a @var{a_i} en @code{mainvar}.  Ordenaci@'on de los @'atomos: n@'umeros <
constantes (como @code{%e}, @code{%pi}) < escalares < otras variables < mainvars.

@code{scalar} convierte a @var{a_i} en escalar.

@code{nonscalar} hace que @var{a_i} se comporte como una lista o matriz ante el operador punto.

@code{noun} convierte la funci@'on @var{a_i} en un nombre, de manera que no se eval@'ue autom@'aticamente.

@code{evfun} hace que @var{a_i} sea reconocida por la funci@'on @code{ev} de manera que se aplique cuando se mencione su nombre.  V@'ease @code{evfun}.

@code{evflag} hace que @var{a_i} sea reconocida por la funci@'on @code{ev} de manera que tome el valor @code{true} durante la ejecuci@'on de @code{ev} si es mencionada.  V@'ease @code{evflag}.

@code{bindtest} hace que @var{a_i} env@'{@dotless{i}}e un error si en alg@'un momento es utilizada en un c@'alculo sin hab@'ersele asignado un valor.

Maxima reconoce y utiliza las siguientes propiedades de objetos:

@example
even, odd, integer, rational, irrational, real, imaginary,
and complex
@end example

Propiedades @'utiles para funciones son:

@example
increasing,
decreasing, oddfun (odd function), evenfun (even function),
commutative (or symmetric), antisymmetric, lassociative and
rassociative
@end example

La llamada @code{featurep (@var{object}, @var{feature})}
determina si @var{object} ha sido declarado con la propiedad @var{feature}.

V@'ease tambi@'en @code{features}.

@end deffn

@deffn {Funci@'on} disolate (@var{expr}, @var{x_1}, ..., @var{x_n})
Es similar a @code{isolate (@var{expr}, @var{x})}, excepto que permite al usuario aislar m@'as de una variable simult@'aneamente. Puede ser @'util para hacer un cambio de variables en integrales m@'ultiples en las que tales variables dependan de de dos o m@'as variables de integraci@'on.  Esta funci@'on se carga autom@'aticamente desde 
@file{simplification/disol.mac}.  Se dispone de una demostyraci@'on en @code{demo("disol")$}.

@end deffn

@deffn {Funci@'on} dispform (@var{expr})
Devuelve la representaci@'on externa de @var{expr} con respecto a su operador principal. Es @'util cuando se usa conjuntamente con @code{part}, que tambi@'en trata de la representaci@'on externa.  Sip@'ongase que  @var{expr} es -A .
Entonces la representaci@'on interna de  @var{expr} es "*"(-1,A), mientras que la representaci@'on externa es "-"(A). La llamada @code{dispform (@var{expr}, all)} convierte la expresi@'on entera al formato externo.  Por ejemplo, si @code{expr: sin (sqrt (x))}, entonces @code{freeof (sqrt, expr)} y @code{freeof (sqrt, dispform (expr))} dan @code{true}, mientras que
@code{freeof (sqrt, dispform (expr, all))} da @code{false}.

@end deffn

@deffn {Funci@'on} distrib (@var{expr})
Diistribuye sumas sobre productos.  Difiere de @code{expand}
en que trabaja s@'olo al nivel superior de una expresi@'on, siendo m@'as r@'apida que @code{expand}.  Difiere de  @code{multthru} en que expande todas las sumas del nivel superior.

Ejemplos:

@example
(%i1) distrib ((a+b) * (c+d));
(%o1)                 b d + a d + b c + a c
(%i2) multthru ((a+b) * (c+d));
(%o2)                 (b + a) d + (b + a) c
(%i3) distrib (1/((a+b) * (c+d)));
                                1
(%o3)                    ---------------
                         (b + a) (d + c)
(%i4) expand (1/((a+b) * (c+d)), 1, 0);
                                1
(%o4)                 ---------------------
                      b d + a d + b c + a c
@end example

@end deffn

@deffn {Funci@'on} dpart (@var{expr}, @var{n_1}, ..., @var{n_k})
Selecciona la misma expresi@'on que @code{part}, pero en lugar de devolver esa expresi@'on como su valor, devuelve la expresi@'on completa con la subexpresi@'on seleccionada dentro de una caja. La caja es parte de la expresi@'on.

@example
(%i1) dpart (x+y/z^2, 1, 2, 1);
                             y
(%o1)                       ---- + x
                               2
                            """
                            "z"
                            """
@end example

@end deffn

@deffn {Funci@'on} exp (@var{x})
Representa la funci@'on exponencial.  
La expresi@'on  @code{exp (@var{x})} en la entrada se simplifica en @code{%e^@var{x}};
@code{exp} no aparece en expresiones simplificadas.

Si la variable @code{demoivre} vale @code{true} hace que @code{%e^(a + b %i)} se simplifique a
@code{%e^(a (cos(b) + %i sin(b)))} si @code{b} no contiene a @code{%i}. V@'ease @code{demoivre}.

Si la variable @code{%emode} vale @code{true}, 
hace que  @code{%e^(%pi %i x)} se simplifique. V@'ease @code{%emode}.

Si la variable @code{%enumer} vale @code{true} hace que @code{%e} se reemplace por
2.718...  siempre que @code{numer} valga @code{true}. V@'ease @code{%enumer}.

@end deffn

@defvr {Variable opcional} %emode
Valor por defecto: @code{true}

Si @code{%emode} vale @code{true},
@code{%e^(%pi %i x)} se simplifica como sigue.

@code{%e^(%pi %i x)} se simplifica a @code{cos (%pi x) + %i sin (%pi x)} si @code{x} es un entero o m@'ultiplo de 1/2, 1/3, 1/4 o 1/6, y luego se sigue simplificando.

Para otros valores num@'ericos de @code{x},
@code{%e^(%pi %i x)} se simplifica a @code{%e^(%pi %i y)} donde @code{y} es @code{x - 2 k}
para alg@'un entero @code{k} tal que @code{abs(y) < 1}.  

Si @code{%emode} vale @code{false}, no se realizan simplificaciones especiales a @code{%e^(%pi %i x)}.

@c NEED EXAMPLES HERE
@end defvr

@defvr {Variable opcional} %enumer
Valor por defecto: @code{false}

Si la variable @code{%enumer} vale @code{true} hace que @code{%e} se reemplace por
2.718...  siempre que @code{numer} valga @code{true}. 

Si @code{%enumer} vale @code{false}, esta sustituci@'on se realiza s@'olo si el exponente en @code{%e^x} tiene un valor num@'erico.

V@'eanse tambi@'en @code{ev} y @code{numer}.

@c NEED EXAMPLES HERE
@end defvr


@c FALTA DEFINICION DE exptisolate


@defvr {Variable opcional} exptsubst
Valor por defecto: @code{false}

Si @code{exptsubst} vale @code{true} permite la sustituci@'on @code{y} por @code{%e^x} en @code{%e^(a x)}.

@c NEED EXAMPLES HERE
@end defvr

@deffn {Funci@'on} freeof (@var{x_1}, ..., @var{x_n}, @var{expr})
@code{freeof (@var{x_1}, @var{expr})}
Devuelve @code{true}
si ninguna subexpresi@'on de  @var{expr} es igual a @var{x_1}
o si  @var{x_1} aparece como variable muda en @var{expr},
devolviendo @code{false} en otro caso.

La llamada @code{freeof (@var{x_1}, ..., @var{x_n}, @var{expr})}
equivale a @code{freeof (@var{x_1}, @var{expr}) and ... and freeof (@var{x_n}, @var{expr})}.

Los argumentos @var{x_1}, ..., @var{x_n} 
pueden seer nombres de funciones y variables, nombres subindicados,
operadores (encerrados entre comillas dobles) o expresiones generales.
La funci@'on @code{freeof} eval@'ua sus argumentos.

Una variable es una variable muda en una expresi@'on si no tiene valor asignado fuera de la expresi@'on.
Variable mudas reconocidas por  @code{freeof} son el @'{@dotless{i}}ndice de una suma o producto, la variable l@'{@dotless{i}}mite en @code{limit},
la variable de integraci@'on en la versi@'on de integral definida de @code{integrate},
la variable original en @code{laplace},
variables formales en expresiones @code{at} y
los argumentos de las expresiones  @code{lambda}.
Las variables locales en  @code{block} no son reconocidas por @code{freeof} como variables mudas;
esto es un fallo de Maxima.

La versi@'on indefinida de  @code{integrate} no est@'a libre de su variable de integraci@'on.

@itemize @bullet
@item
Los argumentos son nombres de funciones, variables, nombres subindicados, operaores y expresiones. La llamada 
@code{freeof (a, b, expr)} equivale a
@code{freeof (a, expr) and freeof (b, expr)}.

@example
(%i1) expr: z^3 * cos (a[1]) * b^(c+d);
                                 d + c  3
(%o1)                   cos(a ) b      z
                             1
(%i2) freeof (z, expr);
(%o2)                         false
(%i3) freeof (cos, expr);
(%o3)                         false
(%i4) freeof (a[1], expr);
(%o4)                         false
(%i5) freeof (cos (a[1]), expr);
(%o5)                         false
(%i6) freeof (b^(c+d), expr);
(%o6)                         false
(%i7) freeof ("^", expr);
(%o7)                         false
(%i8) freeof (w, sin, a[2], sin (a[2]), b*(c+d), expr);
(%o8)                         true
@end example

@item
@code{freeof} eval@'ua sus argumentos.

@example
(%i1) expr: (a+b)^5$
(%i2) c: a$
(%i3) freeof (c, expr);
(%o3)                         false
@end example

@item
@code{freeof} no considera funciones equivalentes.
La simplificaci@'on puede dar una expresi@'on equivalente pero diferente.

@example
(%i1) expr: (a+b)^5$
(%i2) expand (expr);
          5        4       2  3       3  2      4      5
(%o2)    b  + 5 a b  + 10 a  b  + 10 a  b  + 5 a  b + a
(%i3) freeof (a+b, %);
(%o3)                         true
(%i4) freeof (a+b, expr);
(%o4)                         false
(%i5) exp (x);
                                 x
(%o5)                          %e
(%i6) freeof (exp, exp (x));
(%o6)                         true
@end example

@item
Un sumatorio o integral definida est@'a libre de su variable muda.
Una integral indefinida de  @code{integrate} no est@'a libre de su variable de integraci@'on

@example
(%i1) freeof (i, 'sum (f(i), i, 0, n));
(%o1)                         true
(%i2) freeof (x, 'integrate (x^2, x, 0, 1));
(%o2)                         true
(%i3) freeof (x, 'integrate (x^2, x));
(%o3)                         false
@end example
@end itemize

@end deffn

@c IS THIS DEFINITION CORRECT ??
@deffn {Funci@'on} genfact (@var{x}, @var{y}, @var{z})
Devuelve el factorial generalizado, definido como
@code{x (x-z) (x - 2 z) ... (x - (y - 1) z)}.  As@'{@dotless{i}}, para el entero @var{x},
@code{genfact (x, x, 1) = x!} y @code{genfact (x, x/2, 2) = x!!}.

@end deffn

@deffn {Funci@'on} imagpart (@var{expr})
Devuelve la parte imaginaria de la expresi@'on @var{expr}.

La funci@'on @code{imagpart} es computacional,
no simplificativa.
@c PROBABLY NEED TO EXPLAIN IMPLICATIONS OF ABOVE STATEMENT
@c SEE ALSO SF BUG REPORT # 902290

V@'eanse tambi@'en @code{abs}, @code{carg}, @code{polarform}, @code{rectform} y @code{realpart}.

@c NEED EXAMPLES HERE
@end deffn

@deffn {Funci@'on} infix (@var{op})
@deffnx {Funci@'on} infix (@var{op}, @var{lbp}, @var{rbp})
@deffnx {Funci@'on} infix (@var{op}, @var{lbp}, @var{rbp}, @var{lpos}, @var{rpos}, @var{pos})
Declara @var{op} como operador infijo.
Un operador infijo es una funci@'on de dos argumentos,
con el nombre de la funci@'on escrito entre sus argumentos.
Por ejemplo, el operador de sustracci@'on @code{-} es un operador infijo.

@code{infix (@var{op})} declara @var{op} como operador infijo
con fuerzas de ligadura por la izquierda y por la derecha iguales a 180, que es el valor por defecto, 
y partes izquierda y derecha iguales a @code{any}.
@c HOW IS pos DIFFERENT FROM lpos AND rpos ??

@code{infix (@var{op}, @var{lbp}, @var{rbp})} declara @var{op} como operador infijo
con fuerzas de ligadura por la izquierda y por la derecha declaradas en los argumentos, siendo las partes izquierda y derecha iguales a @code{any}.

@code{infix (@var{op}, @var{lbp}, @var{rbp}, @var{lpos}, @var{rpos}, @var{pos})}
declara @var{op} como operador infijo
con fuerzas de ligadura por la izquierda y por la derecha y partes declaradas en los argumentos.

La precedencia de @var{op} con respecto a otros operadores deriva de las fuerzas de ligadura de los operadores en cuesti@'on.
Si las fuerzas de ligadura a izquierda y derecha de @var{op} son ambas mayores que las fuerzas de ligadura a izquierda y derecha de otro operador, entonces @var{op} tiene preferencia sobre el otro operador. Si las fuerzas de ligadura no son ambas mayores o menores, se aplican otras relaciones m@'as complejas.

La asociatividad de @var{op} depende de las fuerzas de ligadura.
Una mayor fuerza de ligadura a la izquierda (@var{lbp}) implica que @var{op} sea evaluado antes que otros operadores a su izquierda en la expresi@'on, mientras que mayor fuerza de ligadura a la derecha (@var{rbp}) implica que @var{op} sea evaluado antes que otros operadores a su derecha en la expresi@'on.
As@'{@dotless{i}}, si @var{lbp} es mayor, @var{op} es asociativo por la derecha, mientras que si @var{rbp} es mayor, @var{op} es asociativo por la izquierda.

V@'ease tambi@'en @code{Syntax}.

Ejemplos:

@itemize @bullet
@item
Si las fuerzas de ligadura a izquierda y derecha de @var{op} son ambas mayores que las fuerzas de ligadura a izquierda y derecha de otro operador, entonces @var{op} tiene preferencia sobre el otro operador.
@end itemize
@example
(%i1) "@@"(a, b) := sconcat("(", a, ",", b, ")")$
(%i2) :lisp (get '$+ 'lbp)
100
(%i2) :lisp (get '$+ 'rbp)
100
(%i2) infix ("@@", 101, 101)$
(%i3) 1 + a@@b + 2;
(%o3)                       (a,b) + 3
(%i4) infix ("@@", 99, 99)$
(%i5) 1 + a@@b + 2;
(%o5)                       (a+1,b+2)
@end example

@itemize @bullet
@item
Mayor @var{lbp} hace a @var{op} asociativo por la derecha,
mientras que mayor  @var{rbp} hace a @var{op} asociativo por la izquierda.
@end itemize
@example
(%i1) "@@"(a, b) := sconcat("(", a, ",", b, ")")$
(%i2) infix ("@@", 100, 99)$
(%i3) foo @@ bar @@ baz;
(%o3)                    (foo,(bar,baz))
(%i4) infix ("@@", 100, 101)$
(%i5) foo @@ bar @@ baz;
(%o5)                    ((foo,bar),baz)
@end example

@end deffn

@defvr {Variable opcional} inflag
Valor por defecto: @code{false}

Si @code{inflag} vale @code{true}, las funciones para la extracci@'on de partes inspeccionan la forma interna de @code{expr}.

N@'otese que el simplificador reordena expresiones.
As@'{@dotless{i}},  @code{first (x + y)} devuelve @code{x} si @code{inflag}
vale @code{true} y @code{y} si @code{inflag} vale @code{false}.
(@code{first (y + x)} devuelve el mismo resultado.)

Adem@'as, d@'andole a  @code{inflag} el valor @code{true} y llamando a @code{part} o  a @code{substpart} es lo mismo que llamar a @code{inpart} o a @code{substinpart}.

Las funciones que se ven afectadas por el valor de @code{inflag} son:
@code{part}, @code{substpart}, @code{first}, @code{rest}, @code{last}, @code{length},
la construcci@'on @code{for} ... @code{in},
@code{map}, @code{fullmap}, @code{maplist}, @code{reveal} y @code{pickapart}.

@c NEED EXAMPLES HERE
@end defvr

@c NEEDS WORK
@deffn {Funci@'on} inpart (@var{expr}, @var{n_1}, ..., @var{n_k})
Similar a @code{part}, pero trabaja con la representaci@'on interna de la expresi@'on, siendo m@'as r@'apida. Se debe tener cuidado con el orden de subexpresiones en sumas y productos, pues el orden de las variables en la forma interna es normalmente diferente al que se muestra por el terminal, y cuando se trata con el signo menos unario, resta y divisi@'on, pues estos operadores desaparecen de la expresi@'on. Las llamadas @code{part (x+y, 0)} o @code{inpart (x+y, 0)} devuelven @code{+}, siendo necesario encerrar el operador entre comillas dobles cuando se haga referencia a@'el. Por ejemplo,
@code{... if inpart (%o9,0) = "+" then ...}.

Ejemplos:

@example
(%i1) x + y + w*z;
(%o1)                      w z + y + x
(%i2) inpart (%, 3, 2);
(%o2)                           z
(%i3) part (%th (2), 1, 2);
(%o3)                           z
(%i4) 'limit (f(x)^g(x+1), x, 0, minus);
                                  g(x + 1)
(%o4)                 limit   f(x)
                      x -> 0-
(%i5) inpart (%, 1, 2);
(%o5)                       g(x + 1)
@end example

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} isolate (@var{expr}, @var{x})
Devuelve @var{expr} con subexpresiones que son sumas y que no contienen variables reemplazadas por etiquetas de expresiones intermedias (tales etiquetas son s@'{@dotless{i}}mbolos at@'omicos como @code{%t1}, @code{%t2}, ...).  Esta funci@'on es de utilidad para evitar la expansi@'on innecesaria de subexpresiones que no contienen la variable de inter@'es. Puesto que las etiquetas intermedias toman el valor de subexpresiones pueden ser todas sustituidas evaluando la expresi@'on en la que aparecen.

Si la variable @code{exptisolate}, cuyo valor por defecto es @code{false}, vale @code{true} har@'a que @code{isolate} busque exponentes de @'atomos (como @code{%e}) que contengan la variable.

Si @code{isolate_wrt_times} vale @code{true}, entonces @code{isolate} tambi@'en aislar@'a respecto de productos. V@'ease @code{isolate_wrt_times}.

Para ejemplos, ejec@'utese @code{example (isolate)}.

@end deffn

@c NEEDS WORK
@defvr {Variable opcional} isolate_wrt_times
Valor por defecto: @code{false}

Si @code{isolate_wrt_times} vale @code{true}, entonces @code{isolate} tambi@'en aislar@'a respecto de productos. Comp@'arese el comportamiento de @code{isolate} al cambiar el valor de esta variable global en el siguiente ejemplo,

@example
(%i1) isolate_wrt_times: true$
(%i2) isolate (expand ((a+b+c)^2), c);

(%t2)                          2 a


(%t3)                          2 b


                          2            2
(%t4)                    b  + 2 a b + a

                     2
(%o4)               c  + %t3 c + %t2 c + %t4
(%i4) isolate_wrt_times: false$
(%i5) isolate (expand ((a+b+c)^2), c);
                     2
(%o5)               c  + 2 b c + 2 a c + %t4
@end example

@end defvr

@c NEEDS EXAMPLES
@defvr {Variable opcional} listconstvars
Valor por defecto: @code{false}

Si @code{listconstvars} vale @code{true}, har@'a que @code{listofvars} incluya @code{%e}, @code{%pi}, @code{%i} y cualquier otra variable que sea declarada constante de las que aparezcan en el argumento de @code{listofvars}.
Estas constantes se omiten por defecto.

@end defvr

@defvr {Variable opcional} listdummyvars
Valor por defecto: @code{true}

Si @code{listdummyvars} vale @code{false}, las "variables mudas" de la expresi@'on no ser@'an inclu@'{@dotless{i}}das en la lista devuelta por @code{listofvars}. (La definici@'on de "variables mudas" se encuentra en la descripci@'on de @code{freeof}.
"Variables mudas" son objetos matem@'aticos como el @'{@dotless{i}}ndice de un sumatorio o producto, una variable l@'{@dotless{i}}mite o la variable de una integraci@'on definida.)
Ejemplo:

@example
(%i1) listdummyvars: true$
(%i2) listofvars ('sum(f(i), i, 0, n));
(%o2)                        [i, n]
(%i3) listdummyvars: false$
(%i4) listofvars ('sum(f(i), i, 0, n));
(%o4)                          [n]
@end example

@end defvr

@c NEEDS WORK
@deffn {Funci@'on} listofvars (@var{expr})
Devuelve una lista con las variables presentes en @var{expr}.

Si la variable @code{listconstvars} vale @code{true} entonces  @code{listofvars} incluir@'a @code{%e}, @code{%pi},
@code{%i}y cualquier otra variable declarada constante de las que aparezcan en @var{expr}.  Estas constantes se omiten por defecto.

@example
(%i1) listofvars (f (x[1]+y) / g^(2+a));
(%o1)                     [g, a, x , y]
                                  1
@end example

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} lfreeof (@var{list}, @var{expr})
Para cada miembro  @var{m} de @var{list}, realiza la llamada @code{freeof (@var{m}, @var{expr})}.
Devuelve @code{false} si alguna de estas llamadas a @code{freeof} retorn@'o @code{false}, y @code{true} en caso contrario.
@end deffn

@deffn {Funci@'on} lopow (@var{expr}, @var{x})
Devuelve el m@'{@dotless{i}}nimo exponente de @var{x} que aparece expl@'{@dotless{i}}citamente en @var{expr}.  As@'{@dotless{i}},

@example
(%i1) lopow ((x+y)^2 + (x+y)^a, x+y);
(%o1)                       min(a, 2)
@end example

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} lpart (@var{label}, @var{expr}, @var{n_1}, ..., @var{n_k})
Similar a @code{dpart} pero utiliza una caja etiquetada. Una caja etiquetada es similar a la que produce @code{dpart}, pero con un nombre en la l@'{@dotless{i}}nea superior.

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} multthru (@var{expr})
@deffnx {Funci@'on} multthru (@var{expr_1}, @var{expr_2})
Multiplica un factor (que deber@'{@dotless{i}}a ser una suma) de @var{expr} por los otros factores de @var{expr}.  Esto es, @var{expr} es @code{@var{f_1} @var{f_2} ... @var{f_n}}, donde al menos un factor, por ejemplo @var{f_i}, es una suma de t@'erminos.  Cada t@'ermino en esta suma se multiplica por los otros factores del producto, excepto el propio @var{f_i}. La funci@'on  @code{multthru} no expande sumas elevadas a exponentes, siendo el m@'etodo m@'as r@'apido para distribuir productos (sean o no conmutativos) sobre sumas. Puesto que los cocientes se representan como productos, puede utilizarse@code{multthru} para dividir sumas entre productos.

La llamada @code{multthru (@var{expr_1}, @var{expr_2})} multiplica cada t@'ermino de @var{expr_2} (que deber@'{@dotless{i}}a ser una suma o una ecuaci@'on) por @var{expr_1}.  Si @var{expr_1} no es ella misma una suma, entonces la llamada es equivalente a @code{multthru (@var{expr_1}*@var{expr_2})}.

@example
(%i1) x/(x-y)^2 - 1/(x-y) - f(x)/(x-y)^3;
                      1        x         f(x)
(%o1)             - ----- + -------- - --------
                    x - y          2          3
                            (x - y)    (x - y)
(%i2) multthru ((x-y)^3, %);
                           2
(%o2)             - (x - y)  + x (x - y) - f(x)
(%i3) ratexpand (%);
                           2
(%o3)                   - y  + x y - f(x)
(%i4) ((a+b)^10*s^2 + 2*a*b*s + (a*b)^2)/(a*b*s^2);
                        10  2              2  2
                 (b + a)   s  + 2 a b s + a  b
(%o4)            ------------------------------
                                  2
                             a b s
(%i5) multthru (%);  /* note that this does not expand (b+a)^10 */
                                        10
                       2   a b   (b + a)
(%o5)                  - + --- + ---------
                       s    2       a b
                           s
(%i6) multthru (a.(b+c.(d+e)+f));
(%o6)            a . f + a . c . (e + d) + a . b
(%i7) expand (a.(b+c.(d+e)+f));
(%o7)         a . f + a . c . e + a . c . d + a . b
@end example

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} nounify (@var{f})
Devuelve la forma nominal de la funci@'on cuyo nombre es @var{f}.  Puede ser @'util cuando se quiera hacer referencia al nombre de una funci@'on sin que @'esta se ejecute.  N@'otese que algunas funciones verbales devolver@'an su forma nominal si no pueden ser evaluadas para ciertos argumentos.  Esta es tambi@'en la expresi@'on que se obtiene cuando la llamada a una funci@'on va precedida por del ap@'ostrofo.

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} nterms (@var{expr})
Devuelve el n@'umero de t@'erminos que  @var{expr} llegar@'{@dotless{i}}a a tener si fuese completamente expandida y no hubiesen cancelaciones ni combinaciones de t@'erminos semejantes.
N@'otese que expresiones como @code{sin (@var{expr})}, @code{sqrt (@var{expr})}, @code{exp (@var{expr})}, etc.
cuentan como un s@'olo t@'ermino, independientemente de cu@'antos t@'erminos tenga a su vez @var{expr} en caso de tratarse de una suma.

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} op (@var{expr})
Devuelve el operador principal de la expresi@'on @var{expr}. La llamada
@code{op (@var{expr})} equivale a @code{part (@var{expr}, 0)}. 

La funci@'on @code{op} devuelve una cadena si el operador principal es un operador prefijo, infijo (binario o @code{n}-ario), postfijo, "bi-fijo" o "no-fijo" ("bi-fijo"  se refiere a un par de s@'{@dotless{i}}mbolos que encierran su o sus argumentos, y "no-fijo" es un operador que no necesita argumentos).
En cualquier otro caso @code{op} devuelve un s@'{@dotless{i}}mbolo.

La funci@'on @code{op} observa el valor de la variable global @code{inflag}.

La funci@'on @code{op} eval@'ua sus argumentos.

V@'ease tambi@'en @code{args}.

Ejemplos:

@c ===beg===
@c ?stringdisp: true$
@c op (a * b * c);
@c op (a * b + c);
@c op ('sin (a + b));
@c op (a!);
@c op (-a);
@c op ([a, b, c]);
@c op ('(if a > b then c else d));
@c op ('foo (a));
@c prefix (foo);
@c op (foo a);
@c ===end===

@example
(%i1) ?stringdisp: true$
(%i2) op (a * b * c);
(%o2)                          "*"
(%i3) op (a * b + c);
(%o3)                          "+"
(%i4) op ('sin (a + b));
(%o4)                          sin
(%i5) op (a!);
(%o5)                          "!"
(%i6) op (-a);
(%o6)                          "-"
(%i7) op ([a, b, c]);
(%o7)                          "["
(%i8) op ('(if a > b then c else d));
(%o8)                         "if"
(%i9) op ('foo (a));
(%o9)                          foo
(%i10) prefix (foo);
(%o10)                        "foo"
(%i11) op (foo a);
(%o11)                        "foo"
@end example

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} operatorp (@var{expr}, @var{op})
@deffnx {Funci@'on} operatorp (@var{expr}, [@var{op_1}, ..., @var{op_n}])

La llamada @code{operatorp (@var{expr}, @var{op})} devuelve @code{true}
si @var{op} es igual al operador de @var{expr}.

La llamada @code{operatorp (@var{expr}, [@var{op_1}, ..., @var{op_n}])} devuelve @code{true}
si alg@'un elemento  @var{op_1}, ..., @var{op_n} es igual al operador de @var{expr}.

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} optimize (@var{expr})
Devuelve una expresi@'on que produce el mismo valor y efectos secundarios que @var{expr}, pero de forma m@'as eficiente al evitar recalcular subexpresiones comunes. La funci@'on @code{optimize} tambi@'en tiene el efecto secundario de colapsar su argumento de manera que se compartan todas sus subexpresiones comunes.
H@'agase @code{example (optimize)} para ver ejemplos.

@end deffn

@defvr {Variable opcional} optimprefix
Valor por defecto: @code{%}

La variable @code{optimprefix} es el prefijo utilizado para los s@'{@dotless{i}}mbolos generados por la instrucci@'on @code{optimize}.

@end defvr

@c NEEDS WORK
@c WHAT DOES ">" MEAN IN THIS CONTEXT ??
@deffn {Funci@'on} ordergreat (@var{v_1}, ..., @var{v_n})
Establece una ordenaci@'on para las variables @var{v_1}, ..., @var{v_n}
de manera que @var{v_1} > @var{v_2} > ...  > @var{v_n} y
@var{v_n} > cualquier otra variable no mencionada como argumento.

V@'ease tambi@'en @code{orderless}.

@end deffn

@c NEEDS WORK
@c WHAT DOES "PRECEDES" MEAN IN THIS CONTEXT ??
@deffn {Funci@'on} ordergreatp (@var{expr_1}, @var{expr_2})
Devuelve @code{true} si @var{expr_2} precede a @var{expr_1} seg@'un el orden establecido con la funci@'on @code{ordergreat}.

@end deffn

@c NEEDS WORK
@c WHAT DOES "<" MEAN IN THIS CONTEXT ??
@deffn {Funci@'on} orderless (@var{v_1}, ..., @var{v_n})
Establece una ordenaci@'on para las variables @var{v_1}, ..., @var{v_n}
de manera que @var{v_1} < @var{v_2} < ...  < @var{v_n} y
@var{v_n} < cualquier otra variable no mencionada como argumento.

@c EXPRESS THIS ORDER IN A MORE COMPREHENSIBLE FASHION
As@'{@dotless{i}}, la ordenaci@'on completa de objetos es: constantes num@'ericas <
constantes declaradas < escalares declarados < primer argumento de @code{orderless} <
...  < @'ultimo argumento de @code{orderless} < variables que empiezan por A < ...
< variables que empiezan por Z < @'ultimo argumento de  @code{ordergreat} <
 ... < primer argumento de @code{ordergreat} < objetos declarados como @code{mainvar}.

V@'eanse tambi@'en @code{ordergreat} y @code{mainvar}.

@end deffn

@c NEEDS WORK
@c WHAT DOES "PRECEDES" MEAN IN THIS CONTEXT ??
@deffn {Funci@'on} orderlessp (@var{expr_1}, @var{expr_2})
Devuelve @code{true} si @var{expr_1} precede a @var{expr_2} seg@'un el orden establecido con la funci@'on @code{orderless}.

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} part (@var{expr}, @var{n_1}, ..., @var{n_k})
Devuelve partes de la forma mostrada de @code{expr}. Obtiene la parte de @code{expr} que se especifica por los @'{@dotless{i}}ndices @var{n_1}, ..., @var{n_k}.  Primero se obtiene la parte @var{n_1} de @code{expr}, despu@'es la parte @var{n_2} del resultado anterior, y as@'{@dotless{i}} sucesivamente.  El resultado que se obtiene es la parte @var{n_k} de ... la parte @var{n_2} de la parte @var{n_1} de @code{expr}.

La funci@'on @code{part} se puede utilizar para obtener un elemento de una lista, una fila de una matriz, etc.

@c "If the last argument to a part function" => FOLLOWING APPLIES TO OTHER FUNCTIONS ??
@c ATTEMPT TO VERIFY; IF SO, COPY THIS COMMENTARY TO DESCRIPTIONS OF OTHER FUNCTIONS
Si el @'ultimo argumento de la funci@'on @code{part} es una lista de @'{@dotless{i}}ndices, entonces se toman varias subexpresiones, cada una de las cuales correspondiente a un @'{@dotless{i}}ndice de la lista.  As@'{@dotless{i}}, @code{part (x + y + z, [1, 3])} devuelve @code{z+x}.

La variable @code{piece} guarda la @'ultima expresi@'on seleccionada con la funci@'on @code{part}. Se actualiza durante la ejecuci@'on de la funci@'on, por lo que puede ser referenciada en la misma funci@'on.

Si @code{partswitch} vale @code{true} entonces de devuelve @code{end} cuando no exista la parte seleccionada de una expresi@'on, si vale @code{false} se mostrar@'a un mensaje de error.

@c NEED "SEE ALSO" POINTING TO ALL OTHER PART FUNCTIONS

Ejemplo: @code{part (z+2*y, 2, 1)} devuelve 2.

@c MERGE IN example (part) OUTPUT HERE
La instrucci@'on @code{example (part)} muestra m@'as ejemplos.

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} partition (@var{expr}, @var{x})
Devuelve una lista con dos expresiones, que son: (1) los factores de @var{expr} si es un producto, los t@'erminos de @var{expr} si es una suma, o los elementos de @var{expr}, si es una lista, que no contengan a @var{x}, (2) los factores, t@'erminos o lista que contengan a @var{x}.

@example
(%i1) partition (2*a*x*f(x), x);
(%o1)                     [2 a, x f(x)]
(%i2) partition (a+b, x);
(%o2)                      [b + a, 0]
(%i3) partition ([a, b, f(a), c], a); 
(%o3)                  [[b, c], [a, f(a)]]
@end example

@end deffn

@c NEEDS EXAMPLE
@defvr {Variable opcional} partswitch
Valor por defecto: @code{false}

Si @code{partswitch} vale @code{true} entonces de devuelve @code{end} cuando no exista la parte seleccionada de una expresi@'on, si vale @code{false} se mostrar@'a un mensaje de error.

@end defvr

@deffn {Funci@'on} pickapart (@var{expr}, @var{n})
Asigna etiquetas de expresiones intermedias a subexpresiones de @var{expr} al nivel de profundidad @var{n}, que es un entero. A las subexpresiones a un nivel de profundidad mayor o menor no se les asignan etiquetas. La funci@'on
@code{pickapart} devuelve una expresi@'on en t@'erminos de expresiones intermedias equivalente a la expresi@'on original @var{expr}.

V@'eanse tambi@'en @code{part}, @code{dpart}, @code{lpart}, @code{inpart} y @code{reveal}.

Ejemplos:

@example
(%i1) expr: (a+b)/2 + sin (x^2)/3 - log (1 + sqrt(x+1));
                                          2
                                     sin(x )   b + a
(%o1)       - log(sqrt(x + 1) + 1) + ------- + -----
                                        3        2
(%i2) pickapart (expr, 0);

                                          2
                                     sin(x )   b + a
(%t2)       - log(sqrt(x + 1) + 1) + ------- + -----
                                        3        2

(%o2)                          %t2
(%i3) pickapart (expr, 1);

(%t3)                - log(sqrt(x + 1) + 1)


                                  2
                             sin(x )
(%t4)                        -------
                                3


                              b + a
(%t5)                         -----
                                2

(%o5)                    %t5 + %t4 + %t3
(%i5) pickapart (expr, 2);

(%t6)                 log(sqrt(x + 1) + 1)


                                  2
(%t7)                        sin(x )


(%t8)                         b + a

                         %t8   %t7
(%o8)                    --- + --- - %t6
                          2     3
(%i8) pickapart (expr, 3);

(%t9)                    sqrt(x + 1) + 1


                                2
(%t10)                         x

                  b + a              sin(%t10)
(%o10)            ----- - log(%t9) + ---------
                    2                    3
(%i10) pickapart (expr, 4);

(%t11)                     sqrt(x + 1)

                      2
                 sin(x )   b + a
(%o11)           ------- + ----- - log(%t11 + 1)
                    3        2
(%i11) pickapart (expr, 5);

(%t12)                        x + 1

                   2
              sin(x )   b + a
(%o12)        ------- + ----- - log(sqrt(%t12) + 1)
                 3        2
(%i12) pickapart (expr, 6);
                  2
             sin(x )   b + a
(%o12)       ------- + ----- - log(sqrt(x + 1) + 1)
                3        2
@end example

@end deffn

@c NEEDS WORK
@defvr {System variable} piece
Guarda la @'ultima expresi@'on seleccionada por las funciones @code{part}.

@c NEED "SEE ALSO" TO POINT TO LIST OF ALL RELEVANT FUNCTIONS

@end defvr

@c NEEDS EXAMPLES
@deffn {Funci@'on} polarform (@var{expr})
Devuelve una expresi@'on de la forma @code{r %e^(%i theta)} equivalente a @var{expr},
con @code{r} y @code{theta} son reales.

@end deffn

@c ISN'T THERE AN EQUIVALENT FUNCTION SOMEWHERE ??
@c NEEDS WORK (IF KEPT)
@deffn {Funci@'on} powers (@var{expr}, @var{x})
Devuelve las potencias de @var{x} dentro de @var{expr}.

La instrucci@'on @code{load (powers)} carga esta funci@'on.
@c HMM, THERE'S A BUNCH OF MAXIMA FUNCTIONS IN src/powers.lisp ...
@c FOR SOME REASON src/powers.lisp IS NOT PART OF THE USUAL BUILD -- STRANGE

@c HERE IS THE TEXT FROM archive/share/unknown/powers.usg -- MERGE !!!
@c THIS FUNCTION IS A GENERALISATION OF "HIPOW" AND "LOPOW"
@c IN THAT IT RETURNS A LIST OF ALL THE POWERS OF VAR OCCURING
@c IN EXPR. IT IS STILL NECESSARY TO EXPAND EXPR BEFORE APPLYING
@c POWERS (ON PAIN OF GETTING THE WRONG ANSWER).
@c 
@c THIS FUNCTION HAS MANY USES, E.G. IF YOU WANT TO FIND ALL
@c THE COEFFICIENTS OF X IN A POLYNOMIAL POLY YOU CAN USE
@c MAP(LAMBDA([POW],COEFF(POLY,X,POW)),POWERS(POLY,X));
@c AND MANY OTHER SIMILAR USEFUL HACKS.

@end deffn

@c NEEDS WORK
@deffn {Funci@'on} product (@var{expr}, @var{i}, @var{i_0}, @var{i_1})
Devuelve el producto de los valores de @code{expr} seg@'un el @'{@dotless{i}}ndice @var{i} var@'{@dotless{i}}a de @var{i_0} hasta @var{i_1}.

Si @var{i_1} es uno menos @var{i_0}, el producto queda vac@'{@dotless{i}}o y @code{product} devuelve 1 en lugar de dar error.  V@'ease tambi@'en @code{prodhack}.

Maxima no simplifica productos.
@c WELL, WE SHOULD CHANGE THAT.

Ejemplo:

@example
(%i1) product (x + i*(i+1)/2, i, 1, 4);
(%o1)           (x + 1) (x + 3) (x + 6) (x + 10)
@end example

@end deffn

@c NEEDS EXAMPLES
@deffn {Funci@'on} realpart (@var{expr})
Devuelve la parte real de @var{expr}. La funciones @code{realpart} y @code{imagpart} operan tambi@'en con expresiones que contengan funciones trigonom@'etricas e hiperb@'olicas, ra@'{@dotless{i}}ces cuadradas, logaritmos y exponentes.

@end deffn

@c NEEDS EXAMPLES
@deffn {Funci@'on} rectform (@var{expr})
Devuelve una expresi@'on de la forma @code{a + b %i} equivalente a @var{expr}, con @var{a} y @var{b} reales.

@end deffn

@deffn {Funci@'on} rembox (@var{expr}, unlabelled)
@deffnx {Funci@'on} rembox (@var{expr}, @var{label})
@deffnx {Funci@'on} rembox (@var{expr})
Elimina cajas de @var{expr}.

La llamada @code{rembox (@var{expr}, unlabelled)} elimina todas las cajas no etiquetadas de @var{expr}.

La llamada @code{rembox (@var{expr}, @var{label})} s@'olo elimina las cajas etiquetadas con @var{label}.

La llamada @code{rembox (@var{expr})} elimina todas las caajs, independientemente de que est@'en etiquetadas o no.

Las cajas son dibujadas por las funciones @code{box}, @code{dpart} y @code{lpart}.

Ejemplos:

@c ===beg===
@c expr: (a*d - b*c)/h^2 + sin(%pi*x);
@c dpart (dpart (expr, 1, 1), 2, 2);
@c expr2: lpart (BAR, lpart (FOO, %, 1), 2);
@c rembox (expr2, unlabelled);
@c rembox (expr2, FOO);
@c rembox (expr2, BAR);
@c rembox (expr2);
@c ===end===
@example
(%i1) expr: (a*d - b*c)/h^2 + sin(%pi*x);
                                  a d - b c
(%o1)                sin(%pi x) + ---------
                                      2
                                     h
(%i2) dpart (dpart (expr, 1, 1), 2, 2);
                        """""""    a d - b c
(%o2)               sin("%pi x") + ---------
                        """""""      """"
                                     " 2"
                                     "h "
                                     """"
(%i3) expr2: lpart (BAR, lpart (FOO, %, 1), 2);
                  FOO"""""""""""   BAR""""""""
                  "    """"""" "   "a d - b c"
(%o3)             "sin("%pi x")" + "---------"
                  "    """"""" "   "  """"   "
                  """"""""""""""   "  " 2"   "
                                   "  "h "   "
                                   "  """"   "
                                   """""""""""
(%i4) rembox (expr2, unlabelled);
                                  BAR""""""""
                   FOO"""""""""   "a d - b c"
(%o4)              "sin(%pi x)" + "---------"
                   """"""""""""   "    2    "
                                  "   h     "
                                  """""""""""
(%i5) rembox (expr2, FOO);
                                  BAR""""""""
                       """""""    "a d - b c"
(%o5)              sin("%pi x") + "---------"
                       """""""    "  """"   "
                                  "  " 2"   "
                                  "  "h "   "
                                  "  """"   "
                                  """""""""""
(%i6) rembox (expr2, BAR);
                   FOO"""""""""""
                   "    """"""" "   a d - b c
(%o6)              "sin("%pi x")" + ---------
                   "    """"""" "     """"
                   """"""""""""""     " 2"
                                      "h "
                                      """"
(%i7) rembox (expr2);
                                  a d - b c
(%o7)                sin(%pi x) + ---------
                                      2
                                     h
@end example

@end deffn

@c NEEDS WORK
@c NEEDS EXAMPLES
@c VERY IMPORTANT !!
@deffn {Funci@'on} sum (@var{expr}, @var{i}, @var{i_0}, @var{i_1})
Devuelve la suma de los valores de @code{expr} seg@'un el @'{@dotless{i}}ndice @var{i} var@'{@dotless{i}}a de @var{i_0} hasta @var{i_1}.
Los sumatorios pueden derivarse, sumarse, restarse o multiplicarse durante la simplificaci@'on.
La forma nominal @code{'sum} se muestra en el terminal con la notaci@'on sigma.

Si los l@'{@dotless{i}}mites superior e inferior difieren en un entero, el sumando @var{expr} se eval@'ua para cada valor del @'{@dotless{i}}ndice del sumatorio @var{i}, siendo luego todos sumados.

Si la variable @code{simpsum} vale @code{true} se simplifica el sumatorio, lo que puede dar lugar en ocasiones a formas compactas. Si @code{simpsum} vale @code{false} o la simplificaci@'on falla, el resultado es la forma nominal @code{'sum}.

La funci@'on @code{sum} eval@'ua @var{i_0} e @var{i_1} pero no @var{i}.
@c EVALUATION OF THE SUMMAND IS A MESS !!
En algunos casos el sumando @var{expr} no se eval@'ua, pudi@'endolo hacer en mayor o menor grado en otros.

Si @var{i_1} es uno menos @var{i_0}, la suma se considera vac@'{@dotless{i}}a y @code{sum} devuelve 0 en lugar de mostrar un error.
V@'ease tambi@'en @code{sumhack}.

Cuando la variable @code{cauchysum} vale @code{true}, el producto de de sumatorios se expresa como un producto de Cauchy, en cuyo caso el @'{@dotless{i}}ndice del sumatorio interior es funci@'on del @'{@dotless{i}}ndice del exterior, en lugar de variar independientemente.

La variable global @code{genindex} guarda el prefijo alfab@'etico a utilizar cuando sea necesario generar autom@'aticamente el siguiente @'{@dotless{i}}ndice de sumatorio.

La variable global @code{gensumnum} guarda el sufijo num@'erico a utilizar cuando sea necesario generar autom@'aticamente el siguiente @'{@dotless{i}}ndice de sumatorio. Si @code{gensumnum} vale @code{false}, un @'{@dotless{i}}ndice generado autom@'aticamente constar@'a s@'olo de @code{genindex}, sin sufijo num@'erico.

V@'eanse tambi@'en @code{sumcontract}, @code{intosum},
@code{bashindices}, @code{niceindices},
@code{nouns} y @code{evflag}.

Ejemplos:

@c ===beg===
@c sum (i^2, i, 1, 7);
@c sum (a[i], i, 1, 7);
@c sum (a(i), i, 1, 7);
@c sum (a(i), i, 1, n);
@c ev (sum (2^i + i^2, i, 0, n), simpsum);
@c ev (sum (1/3^i, i, 1, inf), simpsum);
@c ev (sum (i^2, i, 1, 4) * sum (1/i^2, i, 1, inf), simpsum);
@c ===end===

@example
(%i1) sum (i^2, i, 1, 7);
(%o1)                          140
(%i2) sum (a[i], i, 1, 7);
(%o2)           a  + a  + a  + a  + a  + a  + a
                 7    6    5    4    3    2    1
(%i3) sum (a(i), i, 1, 7);
(%o3)    a(7) + a(6) + a(5) + a(4) + a(3) + a(2) + a(1)
(%i4) sum (a(i), i, 1, n);
                            n
                           ====
                           \
(%o4)                       >    a(i)
                           /
                           ====
                           i = 1
(%i5) ev (sum (2^i + i^2, i, 0, n), simpsum);
                              3      2
                   n + 1   2 n  + 3 n  + n
(%o5)             2      + --------------- - 1
                                  6
(%i6) ev (sum (1/3^i, i, 1, inf), simpsum);
                                1
(%o6)                           -
                                2
(%i7) ev (sum (i^2, i, 1, 4) * sum (1/i^2, i, 1, inf), simpsum);
                                  2
(%o7)                        5 %pi
@end example

@end deffn

@deffn {Funci@'on} lsum (@var{expr}, @var{x}, @var{L})
Representa la suma de @var{expr} para cada elemento @var{x} en @var{L}.

Se retornar@'a la forma nominal @code{'lsum} si el argumento @var{L} no es una lista.

Ejemplos:

@c ===beg===
@c lsum (x^i, i, [1, 2, 7]);
@c lsum (i^2, i, rootsof (x^3 - 1));
@c ===end===
@example
(%i1) lsum (x^i, i, [1, 2, 7]);
                            7    2
(%o1)                      x  + x  + x
(%i2) lsum (i^2, i, rootsof (x^3 - 1));
                     ====
                     \      2
(%o2)                 >    i
                     /
                     ====
                                   3
                     i in rootsof(x  - 1)
@end example

@end deffn

@deffn {Funci@'on} verbify (@var{f})
Devuelve la forma verbal del nombre de funci@'on @var{f}.

V@'eanse tambi@'en @code{verb}, @code{noun} y @code{nounify}.

Ejemplos:

@c ===beg===
@c verbify ('foo);
@c :lisp $%
@c nounify (foo);
@c :lisp $%
@c ===end===
@example
(%i1) verbify ('foo);
(%o1)                          foo
(%i2) :lisp $%
$FOO
(%i2) nounify (foo);
(%o2)                          foo
(%i3) :lisp $%
%FOO
@end example

@end deffn
