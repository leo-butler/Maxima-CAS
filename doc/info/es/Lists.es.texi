@c version 1.23
@menu
* Introducci@'on a las listas::       
* Definiciones para listas::       
@end menu

@node Introducci@'on a las listas, Definiciones para listas, Listas, Listas
@section Introducci@'on a las listas

Las listas son bloques de construcci@'on b@'asica para Maxima y Lisp. Todos los tipos de datos
diferentes a los arreglos, tablas mixtas o n@'umeros son representados como listas Lisp,
estas listas Lisp tienen la forma

@example
((MPLUS) $A 2)
@end example

@noindent
para indicar la expresi@'on @code{a+2}. Al nivel de Maxima se observar@'a
la notaci@'on infija @code{a+2}. Maxima tambi@'en tiene listas con el formato

@example
[1, 2, 7, x+y]
@end example

@noindent
para una lista de 4 elementos. Internamente esto se corresponde con una lista Lisp
de la forma

@example
((MLIST) 1  2  7  ((MPLUS)  $X $Y ))
@end example

@noindent
El elemento que denota el tipo de expresi@'on en Maxima es tambi@'en una lista, la cual tras ser analizada y simplificada tomar@'a la forma

@example
((MLIST SIMP) 1 2 7 ((MPLUS SIMP) $X $Y))
@end example


@node Definiciones para listas,  , Introducci@'on a las listas, Listas
@section Definiciones para listas

@deffn {Funci@'on} append (@var{lista_1}, ..., @var{lista_n})

Devuelve una lista cuyos elementos son los de la lista @var{lista_1} seguidos de los de @var{lista_2}, ...  La funci@'on @code{append} tambi@'en opera con expresiones generales, como la llamada @code{append (f(a,b), f(c,d,e));}, de la que se obtiene @code{f(a,b,c,d,e)}.

Tecl@'eese @code{example(append);} para ver un ejemplo.

@end deffn

@deffn {Funci@'on} assoc (@var{clave}, @var{lista}, @var{valor_por_defecto})
@deffnx {Function} assoc (@var{clave}, @var{lista})

Esta funci@'on busca la @var{clave} en el lado derecho de la  @var{lista}, la cual es de la forma @code{[x,y,z,...]}, donde cada elemento  es una expresi@'on formada por un operador binario y dos elementos. Por ejemplo, @code{x=1}, @code{2^3}, @code{[a,b]} etc.  La @var{clave} se compara con el primer operando. La funci@'on @code{assoc} devuelve el segundo operando si se encuentra con que la @code{clave} coincide.  Si la @code{clave} no coincide entonces devuelve el valor @var{valor_por_defecto}. El argumento @var{valor_por_defecto} es opcional; en caso de no estar presente, se devolver@'a @code{false}.

@end deffn

@deffn {Funci@'on} atom (@var{expr})

Devuelve @code{true} si @var{expr} es un @'atomo (n@'umero, nombre o cadena alfanum@'erica) y @code{false} en caso contario. As@'{@dotless{i}}, @code{atom(5)} devolver@'a @code{true}, mientras que @code{atom(a[1])} y @code{atom(sin(x))} dar@'an como resultado @code{false} (dando por hecho que tanto @code{a[1]} como @code{x} no tienen valores asignados).

@end deffn

@deffn {Funci@'on} cons (@var{expr}, @var{lista})

Devuelve una nueva lista en la que el elemento @var{expr} ocupa la primera posici@'on, seguido de los elementos de @var{lista}. La funci@'on  @code{cons} tambi@'en opera con otro tipo de expresiones, como  @code{cons(x, f(a,b,c));}  ->  @code{f(x,a,b,c)}.

@end deffn

@deffn {Funci@'on} copylist (@var{lista})

Devuelve una copia de la @var{lista}.

@end deffn

@deffn {Funci@'on} delete (@var{expr_1}, @var{expr_2})
@deffnx {Funci@'on} delete (@var{expr_1}, @var{expr_2}, @var{n})

Elimina las expresiones @var{expr_1} de @var{expr_2}. La expresi@'on  @var{expr_1} a eliminar puede ser un sumando de @var{expr_2} (en caso de que @'esta sea una suma) o un factor de @var{expr_2} (si se trata de un producto).

@example
(%i1) delete(sin(x), x+sin(x)+y);
(%o1)                         y + x
@end example

La llamada @code{delete(@var{expr_1}, @var{expr_2}, @var{n})} elimina las primeras @var{n} apariciones de @var{expr_1} en  @var{expr_2}.  En caso de que @var{expr_1} aparezca menos de @var{n} veces dentro de la expresi@'on de referencia @var{expr_2} entonces se eliminan todas ellas.

@example
(%i1) delete(a, f(a,b,c,d,a));
(%o1)                      f(b, c, d)
(%i2) delete(a, f(a,b,a,c,d,a), 2);
(%o2)                     f(b, c, d, a)
@end example

@end deffn

@deffn {Funci@'on} eighth (@var{expr})

Devuelve el octavo elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} endcons (@var{expr}, @var{lista})

Devuelve una nueva lista formada por los elementos de @code{lista} seguidos de los de @var{expr}. La funci@'on @code{endcons} tambi@'en opera con expresiones generales, por ejemplo @code{endcons(x, f(a,b,c));}  ->  @code{f(a,b,c,x)}.

@end deffn

@deffn {Funci@'on} fifth (@var{expr})

Devuelve el quinto elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} first (@var{expr})

Devuelve la primera parte de @var{expr}, que puede consistir en el primer elemento de una lista, la primera fila de una matriz, el primer t@'ermino de una suma, etc. N@'otese que tanto @code{first} como sus funciones relacionadas, @code{rest} y @code{last}, operan sobre la forma en la que @var{expr} es mostrada por Maxima, no sobre la forma en la que es introducida la expresi@'on. Sin embargo, cuando la variable @code{inflag} toma el valor @code{true} estas funciones tendr@'an en cuenta el formato interno de @var{expr}. T@'engase en cuenta que el simplificador reordena las expresiones.  As@'{@dotless{i}}, @code{first(x+y)} devolver@'a @code{x} si @code{inflag} vale @code{true} y @code{y} cuando @code{inflag} tome el valor @code{false} (@code{first(y+x)} devuelve el mismo resultado). Las funciones @code{second} ... @code{tenth} devuelven desde el segundo hasta el d@'ecimo elemento del argumento de entrada.

@end deffn

@deffn {Funci@'on} fourth (@var{expr})

Devuelve el cuarto elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} get (@var{a}, @var{i})

Recupera la propiedad de usuario indicada por @var{i} asociada al @'atomo @var{a} o devuelve @code{false} si @var{a} no tiene la propiedad @var{i}.

La funci@'on @code{get} eval@'ua sus argumentos.

@example
(%i1) put (%e, 'transcendental, 'type);
(%o1)                    transcendental
(%i2) put (%pi, 'transcendental, 'type)$
(%i3) put (%i, 'algebraic, 'type)$
(%i4) typeof (expr) := block ([q],
        if numberp (expr)
        then return ('algebraic),
        if not atom (expr)
        then return (maplist ('typeof, expr)),
        q: get (expr, 'type),
        if q=false
        then errcatch (error(expr,"is not numeric.")) else q)$
(%i5) typeof (2*%e + x*%pi);
x is not numeric.
(%o5)  [[transcendental, []], [algebraic, transcendental]]
(%i6) typeof (2*%e + %pi);
(%o6)     [transcendental, [algebraic, transcendental]]

@end example

@end deffn

@deffn {Funci@'on} last (@var{expr})

Devuelve la @'ultima parte (t@'ermino, fila, elemento, etc.) de @var{expr}.

@end deffn

@deffn {Funci@'on} length (@var{expr})

Devuelve (por defecto) el n@'umero de partes de que consta @var{expr} en la versi@'on correspondiente a la que muestra.  En el caso de listas, se devuelve el n@'umero de elementos, si se trata de matrices el n@'umero de filas y se se trata de sumas el n@'umero de t@'erminos o sumandos (v@'ease @code{dispform}).

La funci@'on @code{length} se ve afectada por el valor de la variable @code{inflag}.  As@'{@dotless{i}}, @code{length(a/(b*c));} devuelve 2 si @code{inflag} vale @code{false} (dando por hecho que @code{exptdispflag} vale @code{true}), pero devuelve 3 si @code{inflag} vale @code{true} (ya que la representaci@'on interna es @code{a*b^-1*c^-1}).

@end deffn

@defvr {Variable opcional} listarith
Valor por defecto: @code{true}

Cuando vale @code{false} provoca que no se realicen operaciones aritm@'eticas con listas;  cuando vale @code{true}, las operaciones con listas y matrices son contagiosas, en el sentido de que las listas se transforman en matrices, retornando resultados de este @'ultimo tipo. Sin embargo, operaciones que involucren listas con listas devolver@'an tambi@'en listas.

@end defvr

@deffn {Funci@'on} listp (@var{expr})

Devuelve el valor @code{true} si @var{expr} es una lista, y @code{false} en caso contrario.

@end deffn

@deffn {Funci@'on} makelist (@var{expr}, @var{i}, @var{i_0}, @var{i_1})
@deffnx {Funci@'on} makelist (@var{expr}, @var{x}, @var{list})

Construye y devuelve una lista, siendo cada uno de sus elementos generados por @var{expr}.

La llamada @code{makelist (@var{expr}, @var{i}, @var{i_0}, @var{i_1})} devuelve una lista cuyo @code{j}-@'esimo elemento es igual a @code{ev (@var{expr}, @var{i}=j)}, tomando  @code{j} los valores enteros entre  @var{i_0} y @var{i_1}.

La llamada @code{makelist (@var{expr}, @var{x}, @var{list})} devuelve una lista cuyo @code{j}-@'esimo elemento es igual a
@code{ev (@var{expr}, @var{x}=@var{list}[j])}, tomando  @code{j} los valores enteros entre  1 through @code{length (@var{list})}.

Ejemplos:

@example
(%i1) makelist(concat(x,i),i,1,6);
(%o1)               [x1, x2, x3, x4, x5, x6]
(%i2) makelist(x=y,y,[a,b,c]);
(%o2)                 [x = a, x = b, x = c]

@end example

@end deffn

@deffn {Funci@'on} member (@var{expr}, @var{lista})

Devuelve el valor @code{true} si @var{expr} resulta ser un miembro de la @var{lista} (no que forme parte de uno de sus miembros). En caso contrario se devuelve @code{false}. La funci@'on  @code{member} tambi@'en opera sobre expresiones que no son necesariamente listas, como por ejemplo @code{member(b,f(a,b,c));}  ->  @code{true}.

@end deffn

@deffn {Funci@'on} ninth (@var{expr})

Devuelve el noveno elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} rest (@var{expr}, @var{n})
@deffnx {Funci@'on} rest (@var{expr})

Devuelve @var{expr} sin sus primeros @var{n} elementos si @var{n} es positivo, o sus @'ultimos @code{- @var{n}} elementos si @var{n} es negativo. En caso de que @var{n} tome el valor 1 puede ser omitido. La expresi@'on  @var{expr} puede ser una lista, una matriz o cualquier otra expresi@'on.

@end deffn

@deffn {Funci@'on} reverse (@var{lista})

Invierte el orden de los elementos de la @var{lista} (no los propios elementos). La funci@'on @code{reverse} tambi@'en opera sobre expresiones generales, como en  @code{reverse(a=b);} gives @code{b=a}.

@end deffn

@deffn {Funci@'on} second (@var{expr})

Devuelve el segundo elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} seventh (@var{expr})

Devuelve el s@'eptimo elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} sixth (@var{expr})

Devuelve el sexto elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} tenth (@var{expr})

Devuelve el d@'ecimo elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} third (@var{expr})

Devuelve el tercer elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn
