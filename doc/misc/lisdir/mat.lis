Listing of compilation of file /cygdrive/e/temp/maxima/src/mat.lisp
on 2002-12-17 13:35:09 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/mat.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE MAT)-2|
(CONST 0) = MAT
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAT
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(COMMENT THIS IS ...)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL PIVSIGN* *ECH* ...) (*LEXPR $SOLVE $RAT) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *ROW* *COL* ...))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $GLOBALSOLVE NIL)-6-1|
(CONST 0) = $GLOBALSOLVE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GLOBALSOLVE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $GLOBALSOLVE
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $GLOBALSOLVE NIL)-6-2|
(CONST 0) = (SPECIAL $GLOBALSOLVE)
(CONST 1) = $GLOBALSOLVE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $GLOBALSOLVE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $GLOBALSOLVE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $GLOBALSOLVE
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $GLOBALSOLVE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SPARSE NIL)-7-1|
(CONST 0) = $SPARSE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SPARSE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SPARSE
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SPARSE NIL)-7-2|
(CONST 0) = (SPECIAL $SPARSE)
(CONST 1) = $SPARSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SPARSE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SPARSE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SPARSE
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $SPARSE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BACKSUBST T)-8-1|
(CONST 0) = $BACKSUBST
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BACKSUBST
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $BACKSUBST
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BACKSUBST T)-8-2|
(CONST 0) = (SPECIAL $BACKSUBST)
(CONST 1) = $BACKSUBST
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $BACKSUBST)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $BACKSUBST
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $BACKSUBST
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $BACKSUBST
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *RANK* NIL)-9-1|
(CONST 0) = *RANK*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *RANK*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *RANK*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *RANK* NIL)-9-2|
(CONST 0) = (SPECIAL *RANK*)
(CONST 1) = *RANK*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *RANK*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *RANK*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *RANK*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *RANK*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *INV* NIL)-10-1|
(CONST 0) = *INV*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *INV*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *INV*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *INV* NIL)-10-2|
(CONST 0) = (SPECIAL *INV*)
(CONST 1) = *INV*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *INV*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *INV*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *INV*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *INV*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR SOLVEXP NIL)-11|
(CONST 0) = (SPECIAL SOLVEXP)
(CONST 1) = SOLVEXP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL SOLVEXP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; SOLVEXP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; SOLVEXP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; SOLVEXP
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SOLCOEF (M *C VARL ...) ...)-12|
(CONST 0) = SOLCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SOLCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SOLCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SOLCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SOLCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SOLCOEF
8     (SKIP&RET 1)


Disassembly of function SOLCOEF
(CONST 0) = M
(CONST 1) = FLAG
(CONST 2) = RATREP*
(CONST 3) = (1 1)
(CONST 4) = 1
(CONST 5) = "Unacceptable variable to SOLVE:~%~M"
(CONST 6) = MERROR
(CONST 7) = PRODCOEF
(CONST 8) = RATREDUCE
(CONST 9) = RATMINUS
(CONST 10) = RATTIMES
(CONST 11) = RATPLUS
(CONST 12) = RDIS
(CONST 13) = FREEOF
(CONST 14) = DEPENDSALL
(CONST 15) = "NON-LINEAR"
(CONST 16) = ERRRJF
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG M)
57 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; M
3     (LOAD 4)
4     (BIND 1)                            ; FLAG
6     (PUSH-NIL 3)
8     (LOAD&PUSH 12)
9     (CALL1 2)                           ; RATREP*
11    (CDR)
12    (STORE 2)
13    (CAR)
14    (JMPIFATOM L28)
16    (LOAD 2)
17    (CAR)
18    (CDR&PUSH)
19    (CONST&PUSH 3)                      ; (1 1)
20    (CALLS2&JMPIFNOT 2 L28)             ; EQUAL
23    (LOAD&CDR&PUSH 2)
25    (JMPIFEQTO 4 L32)                   ; 1
28    L28
28    (CONST&PUSH 5)                      ; "Unacceptable variable to SOLVE:~%~M"
29    (LOAD&PUSH 13)
30    (CALL2 6)                           ; MERROR
32    L32
32    (LOAD&CAR&PUSH 2)
34    (GETVALUE 0)                        ; M
36    (CAR&PUSH)
37    (CALL2&PUSH 7)                      ; PRODCOEF
39    (GETVALUE 0)                        ; M
41    (CDR&PUSH)
42    (CALL2 8)                           ; RATREDUCE
44    (STORE 1)
45    (GETVALUE 1)                        ; FLAG
47    (JMPIFNOT L79)
49    (GETVALUE&PUSH 0)                   ; M
51    (LOAD&PUSH 2)
52    (CALL1&PUSH 9)                      ; RATMINUS
54    (LOAD&PUSH 4)
55    (T&PUSH)
56    (CALL&PUSH 3 10)                    ; RATTIMES
59    (CALL2&PUSH 11)                     ; RATPLUS
61    (CALL1 12)                          ; RDIS
63    (STORE 0)
64    (LOAD&PUSH 12)
65    (LOAD&PUSH 1)
66    (CALL2&JMPIFNOT 13 L76)             ; FREEOF
69    (LOAD&PUSH 1)
70    (CALL1&PUSH 12)                     ; RDIS
72    (LOAD&PUSH 12)
73    (CALL2&JMPIFNOT 14 L79)             ; DEPENDSALL
76    L76
76    (CONST&PUSH 15)                     ; "NON-LINEAR"
77    (CALL1 16)                          ; ERRRJF
79    L79
79    (LOAD 1)
80    (SKIP 3)
82    (UNBIND 2)
84    (SKIP&RET 5)


Disassembly of function #:|(DEFUN FORMX (FLAG NAM EQL ...) ...)-13|
(CONST 0) = FORMX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FORMX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FORMX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FORMX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FORMX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FORMX
8     (SKIP&RET 1)


Disassembly of function FORMX
(CONST 0) = FLAG
(CONST 1) = B
(CONST 2) = AX
(CONST 3) = X
(CONST 4) = VARLIST
(CONST 5) = NEWVAR
(CONST 6) = $ALGEBRAIC
(CONST 7) = ALGP
(CONST 8) = ORMAPC
(CONST 9) = XN*
(CONST 10) = XM*
(CONST 11) = *ARRAY
(CONST 12) = SET
(CONST 13) = GET-ARRAY-POINTER
(CONST 14) = 0
(CONST 15) = CONST
(CONST 16) = RATREP*
(CONST 17) = SOLCOEF
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG X B AX XM* VARLIST $ALGEBRAIC)
writes special variables : (X B AX XM* XN* $ALGEBRAIC VARLIST)
95 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FLAG
3     (NIL)
4     (BIND 1)                            ; B
6     (NIL)
7     (BIND 2)                            ; AX
9     (NIL)
10    (BIND 3)                            ; X
12    (PUSH-NIL 2)
14    (LOAD 15)
16    (SETVALUE 4)                        ; VARLIST
18    (CONST&SYMBOL-FUNCTION&PUSH 5)      ; NEWVAR
20    (LOAD&PUSH 17)
21    (CALLSR 0 24)                       ; MAPC
24    (GETVALUE 6)                        ; $ALGEBRAIC
26    (JMPIF L38)
28    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; ALGP
30    (GETVALUE&PUSH 4)                   ; VARLIST
32    (CALL2&JMPIFNOT 8 L38)              ; ORMAPC
35    (T)
36    (SETVALUE 6)                        ; $ALGEBRAIC
38    L38
38    (LOAD&PUSH 17)
39    (NIL&PUSH)
40    (T&PUSH)
41    (LOAD&PUSH 19)
42    (CALLS2 71)                         ; LENGTH
44    (SETVALUE 9)                        ; XN*
46    (PUSH)
47    (CALLS2&PUSH 150)                   ; 1+
49    (LOAD&PUSH 19)
50    (CALLS2&PUSH 71)                    ; LENGTH
52    (CALLS2 150)                        ; 1+
54    (SETVALUE 10)                       ; XM*
56    (PUSH)
57    (CALLS2&PUSH 150)                   ; 1+
59    (CALL&PUSH 4 11)                    ; *ARRAY
62    (CALL2 12)                          ; SET
64    (LOAD&PUSH 17)
65    (CALL1 13)                          ; GET-ARRAY-POINTER
67    (STORE 17)
69    (CONST 14)                          ; 0
70    (STORE 1)
71    (LOAD&JMPIFNOT 16 L152)
75    L75
75    (LOAD 16)
77    (CAR)
78    (SETVALUE 2)                        ; AX
80    (LOAD&CDR&STORE 16)
82    (LOAD&INC&STORE 1)
84    (GETVALUE&PUSH 10)                  ; XM*
86    (GETVALUE&PUSH 2)                   ; AX
88    (LOAD&PUSH 17)
89    (CALL2&PUSH 15)                     ; CONST
91    (LOAD&PUSH 19)
92    (LOAD&PUSH 4)
93    (LOAD&PUSH 3)
94    (LOAD&PUSH 3)
95    (CALLSR 2 2)                        ; SYSTEM::STORE
98    (SKIP 2)
100   (CONST 14)                          ; 0
101   (STORE 0)
102   (LOAD 15)
104   (SETVALUE 1)                        ; B
106   (GETVALUE&PUSH 2)                   ; AX
108   (CALL1 16)                          ; RATREP*
110   (CDR)
111   (SETVALUE 2)                        ; AX
113   L113
113   (GETVALUE 1)                        ; B
115   (CAR)
116   (SETVALUE 3)                        ; X
118   (GETVALUE 1)                        ; B
120   (CDR)
121   (SETVALUE 1)                        ; B
123   (LOAD&INC&STORE 0)
125   (GETVALUE&PUSH 2)                   ; AX
127   (GETVALUE&PUSH 3)                   ; X
129   (LOAD&PUSH 17)
130   (GETVALUE&PUSH 0)                   ; FLAG
132   (CALL&PUSH 4 17)                    ; SOLCOEF
135   (LOAD&PUSH 18)
136   (LOAD&PUSH 3)
137   (LOAD&PUSH 3)
138   (LOAD&PUSH 3)
139   (CALLSR 2 2)                        ; SYSTEM::STORE
142   (SKIP 1)
144   (GETVALUE 1)                        ; B
146   (JMPIF L113)
148   (LOAD&JMPIF 16 L75)
152   L152
152   (GETVALUE 4)                        ; VARLIST
154   (SKIP 2)
156   (UNBIND 4)
158   (SKIP&RET 5)


Disassembly of function #:|(DEFUN DEPENDSALL (EXP L) ...)-14|
(CONST 0) = DEPENDSALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEPENDSALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEPENDSALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEPENDSALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEPENDSALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEPENDSALL
8     (SKIP&RET 1)


Disassembly of function DEPENDSALL
(CONST 0) = EXP
(CONST 1) = L
(CONST 2) = FREEOF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP L)
26 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (GETVALUE 1)                        ; L
8     (JMPIFNOT L32)
10    (GETVALUE 1)                        ; L
12    (CAR&PUSH)
13    (GETVALUE&PUSH 0)                   ; EXP
15    (CALL2&JMPIFNOT 2 L35)              ; FREEOF
18    (GETVALUE&PUSH 0)                   ; EXP
20    (GETVALUE 1)                        ; L
22    (CDR&PUSH)
23    (JSR L0)
25    (JMPIF L35)
27    (NIL)
28    L28
28    (UNBIND 2)
30    (SKIP&RET 3)
32    L32
32    (NIL)
33    (JMP L28)
35    L35
35    (T)
36    (JMP L28)


Disassembly of function #:|(SETQ *DET* NIL ...)-15|
(CONST 0) = *DET*
(CONST 1) = *ECH*
(CONST 2) = *TRI*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (*TRI* *ECH* *DET*)
5 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; *DET*
3     (SETVALUE 1)                        ; *ECH*
5     (SETVALUE 2)                        ; *TRI*
7     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PTORAT (AX M N) ...)-16|
(CONST 0) = PTORAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PTORAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PTORAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PTORAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PTORAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PTORAT
8     (SKIP&RET 1)


Disassembly of function PTORAT
(CONST 0) = AX
(CONST 1) = M
(CONST 2) = N
(CONST 3) = GET-ARRAY-POINTER
(CONST 4) = 1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M AX)
writes special variables : (N AX)
44 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; AX
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; N
9     (PUSH-NIL 2)
11    (GETVALUE&PUSH 0)                   ; AX
13    (CALL1 3)                           ; GET-ARRAY-POINTER
15    (SETVALUE 0)                        ; AX
17    (GETVALUE&PUSH 1)                   ; M
19    (CALLS2&STORE 150 1)                ; 1+
22    (GETVALUE&PUSH 2)                   ; N
24    (CALLS2 150)                        ; 1+
26    (SETVALUE 2)                        ; N
28    L28
28    (LOAD&PUSH 1)
29    (JMPIFNOTEQTO 4 L39)                ; 1
32    (NIL)
33    (SKIP 2)
35    (UNBIND 3)
37    (SKIP&RET 4)
39    L39
39    (LOAD&DEC&STORE 1)
41    (GETVALUE 2)                        ; N
43    (STORE 0)
44    L44
44    (LOAD&PUSH 0)
45    (JMPIFEQTO 4 L28)                   ; 1
48    (LOAD&DEC&STORE 0)
50    (GETVALUE&PUSH 0)                   ; AX
52    (GETVALUE&PUSH 0)                   ; AX
54    (LOAD&PUSH 3)
55    (LOAD&PUSH 3)
56    (CALLSR&PUSH 2 1)                   ; AREF
59    (CONST 4)                           ; 1
60    (CONS&PUSH)
61    (LOAD&PUSH 1)
62    (LOAD&PUSH 4)
63    (LOAD&PUSH 4)
64    (LOAD&PUSH 3)
65    (CALLSR 2 2)                        ; SYSTEM::STORE
68    (SKIP 2)
70    (JMP L44)


Disassembly of function #:|(DEFUN MEQHK (Z) ...)-17|
(CONST 0) = MEQHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEQHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEQHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEQHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEQHK
8     (SKIP&RET 1)


Disassembly of function MEQHK
(CONST 0) = MEQUAL
(CONST 1) = (MPLUS)
(CONST 2) = (MTIMES)
(CONST 3) = -1
(CONST 4) = 1
(CONST 5) = SIMPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
26 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L9)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 0 L12)                   ; MEQUAL
9     L9
9     (LOAD 1)
10    (SKIP&RET 2)
12    L12
12    (CONST&PUSH 1)                      ; (MPLUS)
13    (LOAD 2)
14    (CDR)
15    (CAR&PUSH)
16    (CONST&PUSH 2)                      ; (MTIMES)
17    (CONST&PUSH 3)                      ; -1
18    (LOAD 5)
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LIST&PUSH 3)
24    (LIST&PUSH 3)
26    (CONST&PUSH 4)                      ; 1
27    (NIL&PUSH)
28    (CALL 3 5)                          ; SIMPLUS
31    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CONST (E VARL) ...)-18|
(CONST 0) = CONST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONST
8     (SKIP&RET 1)


Disassembly of function CONST
(CONST 0) = E
(CONST 1) = ZL
(CONST 2) = X
(CONST 3) = RATREP*
(CONST 4) = NZEROS
(CONST 5) = -1
(CONST 6) = PCSUBSTY
(CONST 7) = PCTIMES
(CONST 8) = RATREDUCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ZL E X)
writes special variables : (ZL E)
53 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (NIL)
4     (BIND 1)                            ; ZL
6     (NIL&PUSH)
7     (LOAD&PUSH 8)
8     (JMP L30)
10    L10
10    (LOAD&CAR&PUSH 0)
12    (LOAD 0)
13    (BIND 2)                            ; X
15    (GETVALUE&PUSH 2)                   ; X
17    (CALL1 3)                           ; RATREP*
19    (CDR)
20    (CAR)
21    (CAR)
22    (UNBIND1)
23    (PUSH)
24    (LOAD&CONS&STORE 2)
26    (SKIP 1)
28    (LOAD&CDR&STORE 0)
30    L30
30    (LOAD&PUSH 0)
31    (CALLS1&JMPIFNOT 146 L10)           ; ENDP
34    (SKIP 1)
36    (LOAD&PUSH 0)
37    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
39    (SKIP 1)
41    (STORE 7)
42    (GETVALUE&PUSH 0)                   ; E
44    (CALL1 3)                           ; RATREP*
46    (CDR)
47    (SETVALUE 0)                        ; E
49    (LOAD&PUSH 7)
50    (CALLS2&PUSH 71)                    ; LENGTH
52    (NIL&PUSH)
53    (CALL2 4)                           ; NZEROS
55    (SETVALUE 1)                        ; ZL
57    (CONST&PUSH 5)                      ; -1
58    (GETVALUE&PUSH 1)                   ; ZL
60    (LOAD&PUSH 9)
61    (GETVALUE 0)                        ; E
63    (CAR&PUSH)
64    (CALL&PUSH 3 6)                     ; PCSUBSTY
67    (CALL2&PUSH 7)                      ; PCTIMES
69    (GETVALUE&PUSH 1)                   ; ZL
71    (LOAD&PUSH 9)
72    (GETVALUE 0)                        ; E
74    (CDR&PUSH)
75    (CALL&PUSH 3 6)                     ; PCSUBSTY
78    (CALL2 8)                           ; RATREDUCE
80    (UNBIND 2)
82    (SKIP&RET 3)


Disassembly of function #:|(DEFVAR *MOSESFLAG NIL)-19|
(CONST 0) = (SPECIAL *MOSESFLAG)
(CONST 1) = *MOSESFLAG
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *MOSESFLAG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *MOSESFLAG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *MOSESFLAG
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *MOSESFLAG
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $%RNUM 0)-20-1|
(CONST 0) = $%RNUM
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%RNUM
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $%RNUM
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 0
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $%RNUM 0)-20-2|
(CONST 0) = (SPECIAL $%RNUM)
(CONST 1) = $%RNUM
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $%RNUM)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $%RNUM
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $%RNUM
8     (CONST&PUSH 2)                      ; 0
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $%RNUM
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MAKE-PARAM NIL ...)-21|
(CONST 0) = MAKE-PARAM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-PARAM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-PARAM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-PARAM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-PARAM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-PARAM
8     (SKIP&RET 1)


Disassembly of function MAKE-PARAM
(CONST 0) = $%R
(CONST 1) = $%RNUM
(CONST 2) = CONCAT
(CONST 3) = $%RNUM_LIST
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($%RNUM_LIST $%RNUM)
writes special variables : ($%RNUM_LIST $%RNUM)
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%R
1     (GETVALUE&PUSH 1)                   ; $%RNUM
3     (CALLS2 150)                        ; 1+
5     (SETVALUE 1)                        ; $%RNUM
7     (PUSH)
8     (CALL2&PUSH 2)                      ; CONCAT
10    (GETVALUE&PUSH 3)                   ; $%RNUM_LIST
12    (LOAD&PUSH 1)
13    (NIL)
14    (CONS&PUSH)
15    (CALLSR 2 35)                       ; NCONC
18    (SETVALUE 3)                        ; $%RNUM_LIST
20    (POP)
21    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LINSOLVE_PARAMS T ...)-22-1|
(CONST 0) = $LINSOLVE_PARAMS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINSOLVE_PARAMS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LINSOLVE_PARAMS
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LINSOLVE_PARAMS T ...)-22-2|
(CONST 0) = (SPECIAL $LINSOLVE_PARAMS)
(CONST 1) = $LINSOLVE_PARAMS
(CONST 2) = VARIABLE
(CONST 3) = "LINSOLVE generates %Rnums"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LINSOLVE_PARAMS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LINSOLVE_PARAMS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LINSOLVE_PARAMS
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $LINSOLVE_PARAMS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "LINSOLVE generates %Rnums"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $LINSOLVE_PARAMS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN NCDR (X N) ...)-23|
(CONST 0) = NCDR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NCDR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NCDR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NCDR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NCDR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NCDR
8     (SKIP&RET 1)


Disassembly of function NCDR
(CONST 0) = X
(CONST 1) = N
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 1)                   ; N
8     (CALLS2&PUSH 151)                   ; 1-
10    (GETVALUE&PUSH 0)                   ; X
12    (CALLS1 155)                        ; NTHCDR
14    (UNBIND 2)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ITH (X N) ...)-24|
(CONST 0) = ITH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ITH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ITH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ITH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ITH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ITH
8     (SKIP&RET 1)


Disassembly of function ITH
(CONST 0) = X
(CONST 1) = N
(CONST 2) = NCDR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N X)
16 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE 0)                        ; X
8     (JMPIFATOM L21)
10    (GETVALUE&PUSH 0)                   ; X
12    (GETVALUE&PUSH 1)                   ; N
14    (CALL2 2)                           ; NCDR
16    (CAR)
17    L17
17    (UNBIND 2)
19    (SKIP&RET 3)
21    L21
21    (NIL)
22    (JMP L17)


Disassembly of function #:|(DEFUN POLYIZE (AX R M ...) ...)-25|
(CONST 0) = POLYIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLYIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLYIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLYIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLYIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLYIZE
8     (SKIP&RET 1)


Disassembly of function POLYIZE
(CONST 0) = AX
(CONST 1) = R
(CONST 2) = M
(CONST 3) = 1
(CONST 4) = C
(CONST 5) = D
(CONST 6) = PQUOTIENTCHK
(CONST 7) = PTIMES
(CONST 8) = $SPARSE
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M $SPARSE C R AX D)
writes special variables : (C D)
61 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; AX
3     (LOAD 6)
4     (BIND 1)                            ; R
6     (LOAD 8)
7     (BIND 2)                            ; M
9     (CONST 3)                           ; 1
10    (BIND 4)                            ; C
12    (NIL)
13    (BIND 5)                            ; D
15    (JMP L85)
18    L18
18    (GETVALUE 5)                        ; D
20    (CAR)
21    (JMP L55)
23    L23
23    (GETVALUE&PUSH 5)                   ; D
25    (CONST 3)                           ; 1
26    (CONS)
27    (JMP L69)
29    L29
29    (GETVALUE&PUSH 0)                   ; AX
31    (GETVALUE&PUSH 1)                   ; R
33    (GETVALUE&PUSH 4)                   ; C
35    (CALLSR 2 1)                        ; AREF
38    (SETVALUE 5)                        ; D
40    (LOAD&PUSH 16)
41    (JMPIFEQTO 3 L18)                   ; 1
44    (GETVALUE 5)                        ; D
46    (CAR&PUSH)
47    (LOAD&PUSH 17)
48    (GETVALUE 5)                        ; D
50    (CDR&PUSH)
51    (CALL2&PUSH 6)                      ; PQUOTIENTCHK
53    (CALL2 7)                           ; PTIMES
55    L55
55    (SETVALUE 5)                        ; D
57    (GETVALUE&PUSH 0)                   ; AX
59    (GETVALUE&PUSH 1)                   ; R
61    (GETVALUE&PUSH 4)                   ; C
63    (GETVALUE 8)                        ; $SPARSE
65    (JMPIF L23)
67    (GETVALUE 5)                        ; D
69    L69
69    (PUSH)
70    (LOAD&PUSH 3)
71    (LOAD&PUSH 3)
72    (LOAD&PUSH 3)
73    (LOAD&PUSH 3)
74    (CALLSR 2 2)                        ; SYSTEM::STORE
77    (SKIP 4)
79    (GETVALUE&PUSH 4)                   ; C
81    (CALLS2 150)                        ; 1+
83    (SETVALUE 4)                        ; C
85    L85
85    (GETVALUE&PUSH 4)                   ; C
87    (GETVALUE&PUSH 2)                   ; M
89    (CALLSR&JMPIFNOT 1 48 L29)          ; >
93    (NIL)
94    (UNBIND 5)
96    (SKIP&RET 5)


Disassembly of function #:|(DEFUN TFGELI (AX N M ...) ...)-26|
(CONST 0) = TFGELI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TFGELI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TFGELI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TFGELI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TFGELI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TFGELI
8     (SKIP&RET 1)


Disassembly of function TFGELI
(CONST 0) = AX
(CONST 1) = N
(CONST 2) = M
(CONST 3) = $SPARSE
(CONST 4) = *DET*
(CONST 5) = *INV*
(CONST 6) = GET-ARRAY-POINTER
(CONST 7) = 1
(CONST 8) = MUL*
(CONST 9) = R
(CONST 10) = C
(CONST 11) = D
(CONST 12) = PGCD
(CONST 13) = PQUOTIENT
(CONST 14) = PTIMES
(CONST 15) = POLYIZE
(CONST 16) = SPRDET
(CONST 17) = NEWINV
(CONST 18) = TFGELI1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MUL* D C R M N AX *INV* *DET* $SPARSE)
writes special variables : (R C D MUL* AX)
104 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; AX
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; M
9     (GETVALUE 3)                        ; $SPARSE
11    (JMPIFNOT L19)
13    (GETVALUE 4)                        ; *DET*
15    (JMPIF L19)
17    (GETVALUE 5)                        ; *INV*
19    L19
19    (BIND 3)                            ; $SPARSE
21    (GETVALUE&PUSH 0)                   ; AX
23    (CALL1 6)                           ; GET-ARRAY-POINTER
25    (SETVALUE 0)                        ; AX
27    (CONST 7)                           ; 1
28    (SETVALUE 8)                        ; MUL*
30    (BIND 9)                            ; R
32    (JMP L141)
35    L35
35    (CONST 7)                           ; 1
36    (BIND 10)                           ; C
38    (NIL)
39    (BIND 11)                           ; D
41    (CONST&PUSH 7)                      ; 1
42    (JMP L102)
44    L44
44    (GETVALUE&PUSH 0)                   ; AX
46    (GETVALUE&PUSH 1)                   ; N
48    (CALL2 16)                          ; SPRDET
50    (UNBIND1)
51    (JMP L178)
54    L54
54    (GETVALUE&PUSH 0)                   ; AX
56    (GETVALUE&PUSH 1)                   ; N
58    (GETVALUE&PUSH 2)                   ; M
60    (CALL 3 17)                         ; NEWINV
63    (UNBIND1)
64    (JMP L178)
67    L67
67    (GETVALUE&PUSH 0)                   ; AX
69    (GETVALUE&PUSH 9)                   ; R
71    (GETVALUE&PUSH 10)                  ; C
73    (CALLSR 2 1)                        ; AREF
76    (CDR)
77    (SETVALUE 11)                       ; D
79    (PUSH)
80    (JMPIFEQTO 7 L96)                   ; 1
83    (LOAD&PUSH 0)
84    (GETVALUE&PUSH 11)                  ; D
86    (LOAD&PUSH 2)
87    (GETVALUE&PUSH 11)                  ; D
89    (CALL2&PUSH 12)                     ; PGCD
91    (CALL2&PUSH 13)                     ; PQUOTIENT
93    (CALL2 14)                          ; PTIMES
95    (STORE 0)
96    L96
96    (GETVALUE&PUSH 10)                  ; C
98    (CALLS2 150)                        ; 1+
100   (SETVALUE 10)                       ; C
102   L102
102   (GETVALUE&PUSH 10)                  ; C
104   (GETVALUE&PUSH 2)                   ; M
106   (CALLSR&JMPIFNOT 1 48 L67)          ; >
110   (GETVALUE 4)                        ; *DET*
112   (JMPIFNOT L121)
114   (GETVALUE&PUSH 8)                   ; MUL*
116   (LOAD&PUSH 1)
117   (CALL2 14)                          ; PTIMES
119   (SETVALUE 8)                        ; MUL*
121   L121
121   (GETVALUE&PUSH 0)                   ; AX
123   (GETVALUE&PUSH 9)                   ; R
125   (GETVALUE&PUSH 2)                   ; M
127   (LOAD&PUSH 3)
128   (CALL 4 15)                         ; POLYIZE
131   (SKIP 1)
133   (UNBIND 2)
135   (GETVALUE&PUSH 9)                   ; R
137   (CALLS2 150)                        ; 1+
139   (SETVALUE 9)                        ; R
141   L141
141   (GETVALUE&PUSH 9)                   ; R
143   (GETVALUE&PUSH 1)                   ; N
145   (CALLSR&JMPIFNOT 1 48 L35)          ; >
150   (GETVALUE 3)                        ; $SPARSE
152   (JMPIFNOT L159)
154   (GETVALUE 4)                        ; *DET*
156   (JMPIF L44)
159   L159
159   (GETVALUE 5)                        ; *INV*
161   (JMPIFNOT L168)
163   (GETVALUE 3)                        ; $SPARSE
165   (JMPIF L54)
168   L168
168   (GETVALUE&PUSH 0)                   ; AX
170   (GETVALUE&PUSH 1)                   ; N
172   (GETVALUE&PUSH 2)                   ; M
174   (CALL 3 18)                         ; TFGELI1
177   (UNBIND1)
178   L178
178   (UNBIND 4)
180   (SKIP&RET 4)


Disassembly of function #:|(SETQ LSOLVEFLAG NIL)-27|
(CONST 0) = LSOLVEFLAG
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (LSOLVEFLAG)
3 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; LSOLVEFLAG
3     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL PERMSIGN A ...) (FIXNUM NROW NVAR ...))-28|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TFGELI1 (AX N M) ...)-29|
(CONST 0) = TFGELI1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TFGELI1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TFGELI1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TFGELI1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TFGELI1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TFGELI1
8     (SKIP&RET 1)


Disassembly of function TFGELI1
(CONST 0) = AX
(CONST 1) = N
(CONST 2) = M
(CONST 3) = K
(CONST 4) = L
(CONST 5) = DELTA
(CONST 6) = VARIABLEORDER
(CONST 7) = INCONSISTENTROWS
(CONST 8) = DEPENDENTROWS
(CONST 9) = NROW
(CONST 10) = NVAR
(CONST 11) = RANK
(CONST 12) = PERMSIGN
(CONST 13) = *ROW*
(CONST 14) = FIXNUM
(CONST 15) = CL-*ARRAY
(CONST 16) = *COL*
(CONST 17) = *COLINV*
(CONST 18) = GET-ARRAY-POINTER
(CONST 19) = *RANK*
(CONST 20) = *DET*
(CONST 21) = *INV*
(CONST 22) = *ECH*
(CONST 23) = *TRI*
(CONST 24) = 1
(CONST 25) = FORWARD
(CONST 26) = PMINUS
(CONST 27) = 0
(CONST 28) = BACKWARD
(CONST 29) = RECOVERORDER1
(CONST 30) = RECOVERORDER2
(CONST 31) = $BACKSUBST
(CONST 32) = *REARRAY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(VARIABLEORDER INCONSISTENTROWS DEPENDENTROWS $BACKSUBST NROW PERMSIGN DELTA
 RANK *TRI* *ECH* *INV* *DET* *RANK* *COLINV* *ROW* *COL* AX M N)
writes special variables : (NVAR NROW *COLINV* *ROW* *COL* AX)
187 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; AX
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; M
9     (NIL)
10    (BIND 3)                            ; K
12    (NIL)
13    (BIND 4)                            ; L
15    (NIL)
16    (BIND 5)                            ; DELTA
18    (NIL)
19    (BIND 6)                            ; VARIABLEORDER
21    (NIL)
22    (BIND 7)                            ; INCONSISTENTROWS
24    (NIL)
25    (BIND 8)                            ; DEPENDENTROWS
27    (NIL)
28    (BIND 9)                            ; NROW
30    (NIL)
31    (BIND 10)                           ; NVAR
33    (NIL)
34    (BIND 11)                           ; RANK
36    (NIL)
37    (BIND 12)                           ; PERMSIGN
39    (NIL&PUSH)
40    (CONST&PUSH 13)                     ; *ROW*
41    (CONST&PUSH 14)                     ; FIXNUM
42    (GETVALUE&PUSH 1)                   ; N
44    (CALLS2&PUSH 150)                   ; 1+
46    (CALL 3 15)                         ; CL-*ARRAY
49    (CONST&PUSH 16)                     ; *COL*
50    (CONST&PUSH 14)                     ; FIXNUM
51    (GETVALUE&PUSH 2)                   ; M
53    (CALLS2&PUSH 150)                   ; 1+
55    (CALL 3 15)                         ; CL-*ARRAY
58    (CONST&PUSH 17)                     ; *COLINV*
59    (CONST&PUSH 14)                     ; FIXNUM
60    (GETVALUE&PUSH 2)                   ; M
62    (CALLS2&PUSH 150)                   ; 1+
64    (CALL 3 15)                         ; CL-*ARRAY
67    (GETVALUE&PUSH 0)                   ; AX
69    (CALL1 18)                          ; GET-ARRAY-POINTER
71    (SETVALUE 0)                        ; AX
73    (GETVALUE&PUSH 16)                  ; *COL*
75    (CALL1 18)                          ; GET-ARRAY-POINTER
77    (SETVALUE 16)                       ; *COL*
79    (GETVALUE&PUSH 13)                  ; *ROW*
81    (CALL1 18)                          ; GET-ARRAY-POINTER
83    (SETVALUE 13)                       ; *ROW*
85    (GETVALUE&PUSH 17)                  ; *COLINV*
87    (CALL1 18)                          ; GET-ARRAY-POINTER
89    (SETVALUE 17)                       ; *COLINV*
91    (GETVALUE 1)                        ; N
93    (SETVALUE 9)                        ; NROW
95    (GETVALUE 19)                       ; *RANK*
97    (JMPIF L124)
99    (GETVALUE 20)                       ; *DET*
101   (JMPIF L128)
103   (GETVALUE 21)                       ; *INV*
105   (JMPIF L132)
107   (GETVALUE 22)                       ; *ECH*
109   (JMPIF L136)
111   (GETVALUE 23)                       ; *TRI*
113   (JMPIF L140)
115   (GETVALUE&PUSH 2)                   ; M
117   (CALLS2 151)                        ; 1-
119   L119
119   (SETVALUE 10)                       ; NVAR
121   (CONST&PUSH 24)                     ; 1
122   (JMP L156)
124   L124
124   (GETVALUE 2)                        ; M
126   (JMP L119)
128   L128
128   (GETVALUE 2)                        ; M
130   (JMP L119)
132   L132
132   (GETVALUE 1)                        ; N
134   (JMP L119)
136   L136
136   (GETVALUE 2)                        ; M
138   (JMP L119)
140   L140
140   (GETVALUE 2)                        ; M
142   (JMP L119)
144   L144
144   (GETVALUE&PUSH 13)                  ; *ROW*
146   (LOAD&PUSH 0)
147   (LOAD&PUSH 2)
148   (LOAD&PUSH 3)
149   (CALLSR 1 2)                        ; SYSTEM::STORE
152   (SKIP 1)
154   (LOAD&INC&STORE 0)
156   L156
156   (LOAD&PUSH 0)
157   (GETVALUE&PUSH 1)                   ; N
159   (CALLSR&JMPIFNOT 1 48 L144)         ; >
163   (SKIP 1)
165   (CONST&PUSH 24)                     ; 1
166   (JMP L241)
169   L169
169   (T&PUSH)
170   (CALL1 25)                          ; FORWARD
172   (GETVALUE 11)                       ; RANK
174   (JMP L298)
177   L177
177   (GETVALUE&PUSH 5)                   ; DELTA
179   (CALL1 26)                          ; PMINUS
181   (JMP L298)
184   L184
184   (GETVALUE 12)                       ; PERMSIGN
186   (JMPIF L177)
188   (GETVALUE 5)                        ; DELTA
190   (JMP L298)
193   L193
193   (T&PUSH)
194   (CALL1 25)                          ; FORWARD
196   (GETVALUE&PUSH 9)                   ; NROW
198   (GETVALUE&PUSH 1)                   ; N
200   (CALLSR&JMPIF 1 45 L184)            ; =
204   (CONST 27)                          ; 0
206   (JMP L298)
209   L209
209   (T&PUSH)
210   (CALL1 25)                          ; FORWARD
212   (CALL0 28)                          ; BACKWARD
214   (CALL0 29)                          ; RECOVERORDER1
216   (JMP L298)
219   L219
219   (GETVALUE&PUSH 16)                  ; *COL*
221   (LOAD&PUSH 0)
222   (LOAD&PUSH 2)
223   (LOAD&PUSH 3)
224   (CALLSR 1 2)                        ; SYSTEM::STORE
227   (SKIP 1)
229   (GETVALUE&PUSH 17)                  ; *COLINV*
231   (LOAD&PUSH 0)
232   (LOAD&PUSH 2)
233   (LOAD&PUSH 3)
234   (CALLSR 1 2)                        ; SYSTEM::STORE
237   (SKIP 1)
239   (LOAD&INC&STORE 0)
241   L241
241   (LOAD&PUSH 0)
242   (GETVALUE&PUSH 2)                   ; M
244   (CALLSR&JMPIFNOT 1 48 L219)         ; >
248   (SKIP 1)
250   (GETVALUE 19)                       ; *RANK*
252   (JMPIF L169)
255   (GETVALUE 20)                       ; *DET*
257   (JMPIF L193)
260   (GETVALUE 21)                       ; *INV*
262   (JMPIF L209)
264   (GETVALUE 22)                       ; *ECH*
266   (JMPIF L272)
268   (GETVALUE 23)                       ; *TRI*
270   (JMPIFNOT L279)
272   L272
272   (NIL&PUSH)
273   (CALL1 25)                          ; FORWARD
275   (CALL0 30)                          ; RECOVERORDER2
277   (JMP L298)
279   L279
279   (T&PUSH)
280   (CALL1 25)                          ; FORWARD
282   (GETVALUE 31)                       ; $BACKSUBST
284   (JMPIFNOT L288)
286   (CALL0 28)                          ; BACKWARD
288   L288
288   (CALL0 30)                          ; RECOVERORDER2
290   (GETVALUE&PUSH 8)                   ; DEPENDENTROWS
292   (GETVALUE&PUSH 7)                   ; INCONSISTENTROWS
294   (GETVALUE&PUSH 6)                   ; VARIABLEORDER
296   (LIST 3)
298   L298
298   (STORE 0)
299   (CONST&PUSH 13)                     ; *ROW*
300   (CALL1 32)                          ; *REARRAY
302   (CONST&PUSH 16)                     ; *COL*
303   (CALL1 32)                          ; *REARRAY
305   (CONST&PUSH 17)                     ; *COLINV*
306   (CALL1 32)                          ; *REARRAY
308   (POP)
309   (UNBIND 13)
311   (SKIP&RET 4)


Disassembly of function #:|(DEFUN FORWARD (*CPIVOT) ...)-30|
(CONST 0) = FORWARD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FORWARD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FORWARD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FORWARD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FORWARD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FORWARD
8     (SKIP&RET 1)


Disassembly of function FORWARD
(CONST 0) = 1
(CONST 1) = DELTA
(CONST 2) = K
(CONST 3) = NVAR
(CONST 4) = M
(CONST 5) = NROW
(CONST 6) = AX
(CONST 7) = PIVOT
(CONST 8) = *ROW*
(CONST 9) = *COL*
(CONST 10) = PTIMES
(CONST 11) = PDIFFERENCE
(CONST 12) = PQUOTIENT
(CONST 13) = 0
(CONST 14) = RANK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NROW DELTA *COL* *ROW* AX K M NVAR)
writes special variables : (RANK K DELTA)
150 byte-code instructions:
0     (CONST 0)                           ; 1
1     (SETVALUE 1)                        ; DELTA
3     (BIND 2)                            ; K
5     (GETVALUE 3)                        ; NVAR
7     (BIND 3)                            ; NVAR
9     (GETVALUE 4)                        ; M
11    (BIND 4)                            ; M
13    (JMP L227)
16    L16
16    (GETVALUE&PUSH 2)                   ; K
18    (CALLS2&PUSH 150)                   ; 1+
20    (JMP L149)
23    L23
23    (GETVALUE&PUSH 2)                   ; K
25    (CALLS2&PUSH 150)                   ; 1+
27    (JMP L137)
30    L30
30    (GETVALUE&PUSH 6)                   ; AX
32    (GETVALUE&PUSH 8)                   ; *ROW*
34    (LOAD&PUSH 3)
35    (CALLSR&PUSH 1 1)                   ; AREF
38    (GETVALUE&PUSH 9)                   ; *COL*
40    (LOAD&PUSH 3)
41    (CALLSR&PUSH 1 1)                   ; AREF
44    (GETVALUE&PUSH 6)                   ; AX
46    (GETVALUE&PUSH 8)                   ; *ROW*
48    (GETVALUE&PUSH 2)                   ; K
50    (CALLSR&PUSH 1 1)                   ; AREF
53    (GETVALUE&PUSH 9)                   ; *COL*
55    (GETVALUE&PUSH 2)                   ; K
57    (CALLSR&PUSH 1 1)                   ; AREF
60    (CALLSR&PUSH 2 1)                   ; AREF
63    (GETVALUE&PUSH 6)                   ; AX
65    (GETVALUE&PUSH 8)                   ; *ROW*
67    (LOAD&PUSH 7)
68    (CALLSR&PUSH 1 1)                   ; AREF
71    (GETVALUE&PUSH 9)                   ; *COL*
73    (LOAD&PUSH 7)
74    (CALLSR&PUSH 1 1)                   ; AREF
77    (CALLSR&PUSH 2 1)                   ; AREF
80    (CALL2&PUSH 10)                     ; PTIMES
82    (GETVALUE&PUSH 6)                   ; AX
84    (GETVALUE&PUSH 8)                   ; *ROW*
86    (LOAD&PUSH 7)
87    (CALLSR&PUSH 1 1)                   ; AREF
90    (GETVALUE&PUSH 9)                   ; *COL*
92    (GETVALUE&PUSH 2)                   ; K
94    (CALLSR&PUSH 1 1)                   ; AREF
97    (CALLSR&PUSH 2 1)                   ; AREF
100   (GETVALUE&PUSH 6)                   ; AX
102   (GETVALUE&PUSH 8)                   ; *ROW*
104   (GETVALUE&PUSH 2)                   ; K
106   (CALLSR&PUSH 1 1)                   ; AREF
109   (GETVALUE&PUSH 9)                   ; *COL*
111   (LOAD&PUSH 8)
112   (CALLSR&PUSH 1 1)                   ; AREF
115   (CALLSR&PUSH 2 1)                   ; AREF
118   (CALL2&PUSH 10)                     ; PTIMES
120   (CALL2&PUSH 11)                     ; PDIFFERENCE
122   (GETVALUE&PUSH 1)                   ; DELTA
124   (CALL2&PUSH 12)                     ; PQUOTIENT
126   (LOAD&PUSH 3)
127   (LOAD&PUSH 3)
128   (LOAD&PUSH 3)
129   (LOAD&PUSH 3)
130   (CALLSR 2 2)                        ; SYSTEM::STORE
133   (SKIP 4)
135   (LOAD&INC&STORE 0)
137   L137
137   (LOAD&PUSH 0)
138   (GETVALUE&PUSH 4)                   ; M
140   (CALLSR&JMPIFNOT 1 48 L30)          ; >
145   (SKIP 1)
147   (LOAD&INC&STORE 0)
149   L149
149   (LOAD&PUSH 0)
150   (GETVALUE&PUSH 5)                   ; NROW
152   (CALLSR&JMPIFNOT 1 48 L23)          ; >
157   (SKIP 1)
159   (GETVALUE&PUSH 2)                   ; K
161   (CALLS2&PUSH 150)                   ; 1+
163   (JMP L191)
165   L165
165   (GETVALUE&PUSH 6)                   ; AX
167   (GETVALUE&PUSH 8)                   ; *ROW*
169   (LOAD&PUSH 2)
170   (CALLSR&PUSH 1 1)                   ; AREF
173   (GETVALUE&PUSH 9)                   ; *COL*
175   (GETVALUE&PUSH 2)                   ; K
177   (CALLSR&PUSH 1 1)                   ; AREF
180   (LOAD&PUSH 2)
181   (LOAD&PUSH 2)
182   (LOAD&PUSH 2)
183   (CONST&PUSH 13)                     ; 0
184   (CALLSR 2 2)                        ; SYSTEM::STORE
187   (SKIP 3)
189   (LOAD&INC&STORE 0)
191   L191
191   (LOAD&PUSH 0)
192   (GETVALUE&PUSH 5)                   ; NROW
194   (CALLSR&JMPIFNOT 1 48 L165)         ; >
198   (SKIP 1)
200   (GETVALUE&PUSH 6)                   ; AX
202   (GETVALUE&PUSH 8)                   ; *ROW*
204   (GETVALUE&PUSH 2)                   ; K
206   (CALLSR&PUSH 1 1)                   ; AREF
209   (GETVALUE&PUSH 9)                   ; *COL*
211   (GETVALUE&PUSH 2)                   ; K
213   (CALLSR&PUSH 1 1)                   ; AREF
216   (CALLSR 2 1)                        ; AREF
219   (SETVALUE 1)                        ; DELTA
221   (GETVALUE&PUSH 2)                   ; K
223   (CALLS2 150)                        ; 1+
225   (SETVALUE 2)                        ; K
227   L227
227   (GETVALUE&PUSH 2)                   ; K
229   (GETVALUE&PUSH 5)                   ; NROW
231   (CALLSR&JMPIF 1 48 L254)            ; >
235   (GETVALUE&PUSH 2)                   ; K
237   (GETVALUE&PUSH 3)                   ; NVAR
239   (CALLSR&JMPIF 1 48 L254)            ; >
243   (GETVALUE&PUSH 6)                   ; AX
245   (GETVALUE&PUSH 2)                   ; K
247   (LOAD&PUSH 12)
248   (CALL 3 7)                          ; PIVOT
251   (JMPIFNOT L16)
254   L254
254   (UNBIND 3)
256   (LOAD&JMPIF 1 L283)
259   (CONST&PUSH 0)                      ; 1
260   (JMP L274)
262   L262
262   (GETVALUE&PUSH 9)                   ; *COL*
264   (LOAD&PUSH 0)
265   (LOAD&PUSH 2)
266   (LOAD&PUSH 3)
267   (CALLSR 1 2)                        ; SYSTEM::STORE
270   (SKIP 1)
272   (LOAD&INC&STORE 0)
274   L274
274   (LOAD&PUSH 0)
275   (GETVALUE&PUSH 4)                   ; M
277   (CALLSR&JMPIFNOT 1 48 L262)         ; >
281   (SKIP 1)
283   L283
283   (GETVALUE&PUSH 5)                   ; NROW
285   (GETVALUE&PUSH 3)                   ; NVAR
287   (CALLSR 1 52)                       ; MIN
290   (SETVALUE 14)                       ; RANK
292   (SKIP&RET 2)


Disassembly of function #:|(DEFUN BACKWARD NIL ...)-31|
(CONST 0) = BACKWARD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BACKWARD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BACKWARD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BACKWARD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BACKWARD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BACKWARD
8     (SKIP&RET 1)


Disassembly of function BACKWARD
(CONST 0) = RANK
(CONST 1) = 1
(CONST 2) = L
(CONST 3) = M
(CONST 4) = AX
(CONST 5) = *ROW*
(CONST 6) = *COL*
(CONST 7) = PTIMES
(CONST 8) = 0
(CONST 9) = PPLUS
(CONST 10) = PDIFFERENCE
(CONST 11) = PQUOTIENT
(CONST 12) = DELTA
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DELTA M L *COL* *ROW* AX RANK)
writes special variables : (DELTA L)
152 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; RANK
2     (CALLS2&PUSH 151)                   ; 1-
4     (JMP L221)
7     L7
7     (GETVALUE&PUSH 0)                   ; RANK
9     (CALLS2 150)                        ; 1+
11    (BIND 2)                            ; L
13    (JMP L163)
16    L16
16    (GETVALUE&PUSH 4)                   ; AX
18    (GETVALUE&PUSH 5)                   ; *ROW*
20    (LOAD&PUSH 5)
21    (CALLSR&PUSH 1 1)                   ; AREF
24    (GETVALUE&PUSH 6)                   ; *COL*
26    (GETVALUE&PUSH 2)                   ; L
28    (CALLSR&PUSH 1 1)                   ; AREF
31    (GETVALUE&PUSH 4)                   ; AX
33    (GETVALUE&PUSH 5)                   ; *ROW*
35    (LOAD&PUSH 8)
36    (CALLSR&PUSH 1 1)                   ; AREF
39    (GETVALUE&PUSH 6)                   ; *COL*
41    (GETVALUE&PUSH 2)                   ; L
43    (CALLSR&PUSH 1 1)                   ; AREF
46    (CALLSR&PUSH 2 1)                   ; AREF
49    (GETVALUE&PUSH 4)                   ; AX
51    (GETVALUE&PUSH 5)                   ; *ROW*
53    (GETVALUE&PUSH 0)                   ; RANK
55    (CALLSR&PUSH 1 1)                   ; AREF
58    (GETVALUE&PUSH 6)                   ; *COL*
60    (GETVALUE&PUSH 0)                   ; RANK
62    (CALLSR&PUSH 1 1)                   ; AREF
65    (CALLSR&PUSH 2 1)                   ; AREF
68    (CALL2&PUSH 7)                      ; PTIMES
70    (LOAD&INC&PUSH 7)
72    (CONST&PUSH 8)                      ; 0
73    (JMP L118)
75    L75
75    (LOAD&PUSH 0)
76    (GETVALUE&PUSH 4)                   ; AX
78    (GETVALUE&PUSH 5)                   ; *ROW*
80    (LOAD&PUSH 12)
81    (CALLSR&PUSH 1 1)                   ; AREF
84    (GETVALUE&PUSH 6)                   ; *COL*
86    (LOAD&PUSH 5)
87    (CALLSR&PUSH 1 1)                   ; AREF
90    (CALLSR&PUSH 2 1)                   ; AREF
93    (GETVALUE&PUSH 4)                   ; AX
95    (GETVALUE&PUSH 5)                   ; *ROW*
97    (LOAD&PUSH 5)
98    (CALLSR&PUSH 1 1)                   ; AREF
101   (GETVALUE&PUSH 6)                   ; *COL*
103   (GETVALUE&PUSH 2)                   ; L
105   (CALLSR&PUSH 1 1)                   ; AREF
108   (CALLSR&PUSH 2 1)                   ; AREF
111   (CALL2&PUSH 7)                      ; PTIMES
113   (CALL2 9)                           ; PPLUS
115   (STORE 0)
116   (LOAD&INC&STORE 1)
118   L118
118   (LOAD&PUSH 1)
119   (GETVALUE&PUSH 0)                   ; RANK
121   (CALLSR&JMPIFNOT 1 48 L75)          ; >
125   (POP&STORE 0)
127   (CALL2&PUSH 10)                     ; PDIFFERENCE
129   (GETVALUE&PUSH 4)                   ; AX
131   (GETVALUE&PUSH 5)                   ; *ROW*
133   (LOAD&PUSH 9)
134   (CALLSR&PUSH 1 1)                   ; AREF
137   (GETVALUE&PUSH 6)                   ; *COL*
139   (LOAD&PUSH 10)
140   (CALLSR&PUSH 1 1)                   ; AREF
143   (CALLSR&PUSH 2 1)                   ; AREF
146   (CALL2&PUSH 11)                     ; PQUOTIENT
148   (LOAD&PUSH 3)
149   (LOAD&PUSH 3)
150   (LOAD&PUSH 3)
151   (LOAD&PUSH 3)
152   (CALLSR 2 2)                        ; SYSTEM::STORE
155   (SKIP 4)
157   (GETVALUE&PUSH 2)                   ; L
159   (CALLS2 150)                        ; 1+
161   (SETVALUE 2)                        ; L
163   L163
163   (GETVALUE&PUSH 2)                   ; L
165   (GETVALUE&PUSH 3)                   ; M
167   (CALLSR&JMPIFNOT 1 48 L16)          ; >
172   (UNBIND1)
173   (LOAD&PUSH 0)
174   (CALLS2 150)                        ; 1+
176   (BIND 2)                            ; L
178   (JMP L210)
180   L180
180   (GETVALUE&PUSH 4)                   ; AX
182   (GETVALUE&PUSH 5)                   ; *ROW*
184   (LOAD&PUSH 5)
185   (CALLSR&PUSH 1 1)                   ; AREF
188   (GETVALUE&PUSH 6)                   ; *COL*
190   (GETVALUE&PUSH 2)                   ; L
192   (CALLSR&PUSH 1 1)                   ; AREF
195   (LOAD&PUSH 2)
196   (LOAD&PUSH 2)
197   (LOAD&PUSH 2)
198   (CONST&PUSH 8)                      ; 0
199   (CALLSR 2 2)                        ; SYSTEM::STORE
202   (SKIP 3)
204   (GETVALUE&PUSH 2)                   ; L
206   (CALLS2 150)                        ; 1+
208   (SETVALUE 2)                        ; L
210   L210
210   (GETVALUE&PUSH 2)                   ; L
212   (GETVALUE&PUSH 0)                   ; RANK
214   (CALLSR&JMPIFNOT 1 48 L180)         ; >
218   (UNBIND1)
219   (LOAD&DEC&STORE 0)
221   L221
221   (LOAD&PUSH 0)
222   (CONST&PUSH 1)                      ; 1
223   (CALLSR&JMPIFNOT 1 47 L7)           ; <
228   (SKIP 1)
230   (GETVALUE&PUSH 4)                   ; AX
232   (GETVALUE&PUSH 5)                   ; *ROW*
234   (GETVALUE&PUSH 0)                   ; RANK
236   (CALLSR&PUSH 1 1)                   ; AREF
239   (GETVALUE&PUSH 6)                   ; *COL*
241   (GETVALUE&PUSH 0)                   ; RANK
243   (CALLSR&PUSH 1 1)                   ; AREF
246   (CALLSR 2 1)                        ; AREF
249   (SETVALUE 12)                       ; DELTA
251   (CONST&PUSH 1)                      ; 1
252   (JMP L281)
254   L254
254   (GETVALUE&PUSH 4)                   ; AX
256   (GETVALUE&PUSH 5)                   ; *ROW*
258   (LOAD&PUSH 2)
259   (CALLSR&PUSH 1 1)                   ; AREF
262   (GETVALUE&PUSH 6)                   ; *COL*
264   (LOAD&PUSH 3)
265   (CALLSR&PUSH 1 1)                   ; AREF
268   (GETVALUE&PUSH 12)                  ; DELTA
270   (LOAD&PUSH 3)
271   (LOAD&PUSH 3)
272   (LOAD&PUSH 3)
273   (LOAD&PUSH 3)
274   (CALLSR 2 2)                        ; SYSTEM::STORE
277   (SKIP 4)
279   (LOAD&INC&STORE 0)
281   L281
281   (LOAD&PUSH 0)
282   (GETVALUE&PUSH 0)                   ; RANK
284   (CALLSR&JMPIFNOT 1 48 L254)         ; >
288   (NIL)
289   (SKIP&RET 2)


Disassembly of function #:|(DEFUN RECOVERORDER1 NIL ...)-32|
(CONST 0) = RECOVERORDER1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RECOVERORDER1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RECOVERORDER1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RECOVERORDER1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RECOVERORDER1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RECOVERORDER1
8     (SKIP&RET 1)


Disassembly of function RECOVERORDER1
(CONST 0) = NVAR
(CONST 1) = 0
(CONST 2) = VARIABLEORDER
(CONST 3) = RANK
(CONST 4) = N
(CONST 5) = AX
(CONST 6) = *ROW*
(CONST 7) = *COL*
(CONST 8) = M
(CONST 9) = DEPENDENTROWS
(CONST 10) = INCONSISTENTROWS
(CONST 11) = 1
(CONST 12) = *COLINV*
(CONST 13) = MOVEROW
(CONST 14) = L
(CONST 15) = K
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(L K *COLINV* N INCONSISTENTROWS M *COL* AX DEPENDENTROWS *ROW* RANK
 VARIABLEORDER NVAR)
writes special variables : (K L INCONSISTENTROWS DEPENDENTROWS VARIABLEORDER)
109 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; NVAR
2     (JMP L12)
4     L4
4     (LOAD&PUSH 0)
5     (GETVALUE 2)                        ; VARIABLEORDER
7     (CONS)
8     (SETVALUE 2)                        ; VARIABLEORDER
10    (LOAD&DEC&STORE 0)
12    L12
12    (LOAD&PUSH 0)
13    (CONST&PUSH 1)                      ; 0
14    (CALLSR&JMPIFNOT 1 45 L4)           ; =
18    (SKIP 1)
20    (GETVALUE&PUSH 3)                   ; RANK
22    (CALLS2&PUSH 150)                   ; 1+
24    (JMP L73)
26    L26
26    (GETVALUE&PUSH 6)                   ; *ROW*
28    (LOAD&PUSH 1)
29    (CALLSR&PUSH 1 1)                   ; AREF
32    (GETVALUE 9)                        ; DEPENDENTROWS
34    (CONS)
35    (SETVALUE 9)                        ; DEPENDENTROWS
37    (JMP L71)
39    L39
39    (GETVALUE&PUSH 5)                   ; AX
41    (GETVALUE&PUSH 6)                   ; *ROW*
43    (LOAD&PUSH 2)
44    (CALLSR&PUSH 1 1)                   ; AREF
47    (GETVALUE&PUSH 7)                   ; *COL*
49    (GETVALUE&PUSH 8)                   ; M
51    (CALLSR&PUSH 1 1)                   ; AREF
54    (CALLSR&PUSH 2 1)                   ; AREF
57    (JMPIFEQTO 1 L26)                   ; 0
60    (GETVALUE&PUSH 6)                   ; *ROW*
62    (LOAD&PUSH 1)
63    (CALLSR&PUSH 1 1)                   ; AREF
66    (GETVALUE 10)                       ; INCONSISTENTROWS
68    (CONS)
69    (SETVALUE 10)                       ; INCONSISTENTROWS
71    L71
71    (LOAD&INC&STORE 0)
73    L73
73    (LOAD&PUSH 0)
74    (GETVALUE&PUSH 4)                   ; N
76    (CALLSR&JMPIFNOT 1 48 L39)          ; >
80    (SKIP 1)
82    (CONST&PUSH 11)                     ; 1
83    (JMP L190)
86    L86
86    (GETVALUE&PUSH 6)                   ; *ROW*
88    (GETVALUE&PUSH 12)                  ; *COLINV*
90    (LOAD&PUSH 2)
91    (CALLSR&PUSH 1 1)                   ; AREF
94    (CALLSR&PUSH 1 1)                   ; AREF
97    (LOAD&PUSH 1)
98    (CALLSR&JMPIF 1 45 L188)            ; =
103   (GETVALUE&PUSH 5)                   ; AX
105   (GETVALUE&PUSH 4)                   ; N
107   (GETVALUE&PUSH 8)                   ; M
109   (LOAD&PUSH 3)
110   (CONST&PUSH 1)                      ; 0
111   (CALL 5 13)                         ; MOVEROW
114   (LOAD 0)
115   (SETVALUE 14)                       ; L
117   (JMP L136)
119   L119
119   (GETVALUE&PUSH 5)                   ; AX
121   (GETVALUE&PUSH 4)                   ; N
123   (GETVALUE&PUSH 8)                   ; M
125   (GETVALUE&PUSH 15)                  ; K
127   (GETVALUE&PUSH 14)                  ; L
129   (CALL 5 13)                         ; MOVEROW
132   (GETVALUE 15)                       ; K
134   (SETVALUE 14)                       ; L
136   L136
136   (GETVALUE&PUSH 6)                   ; *ROW*
138   (GETVALUE&PUSH 12)                  ; *COLINV*
140   (GETVALUE&PUSH 14)                  ; L
142   (CALLSR&PUSH 1 1)                   ; AREF
145   (CALLSR 1 1)                        ; AREF
148   (SETVALUE 15)                       ; K
150   (GETVALUE&PUSH 6)                   ; *ROW*
152   (GETVALUE&PUSH 12)                  ; *COLINV*
154   (GETVALUE&PUSH 14)                  ; L
156   (CALLSR&PUSH 1 1)                   ; AREF
159   (GETVALUE&PUSH 14)                  ; L
161   (LOAD&PUSH 2)
162   (LOAD&PUSH 2)
163   (LOAD&PUSH 2)
164   (CALLSR 1 2)                        ; SYSTEM::STORE
167   (SKIP 3)
169   (GETVALUE&PUSH 15)                  ; K
171   (LOAD&PUSH 1)
172   (CALLSR&JMPIFNOT 1 45 L119)         ; =
176   (GETVALUE&PUSH 5)                   ; AX
178   (GETVALUE&PUSH 4)                   ; N
180   (GETVALUE&PUSH 8)                   ; M
182   (CONST&PUSH 1)                      ; 0
183   (GETVALUE&PUSH 14)                  ; L
185   (CALL 5 13)                         ; MOVEROW
188   L188
188   (LOAD&INC&STORE 0)
190   L190
190   (LOAD&PUSH 0)
191   (GETVALUE&PUSH 4)                   ; N
193   (CALLSR&JMPIFNOT 1 48 L86)          ; >
198   (NIL)
199   (SKIP&RET 2)


Disassembly of function #:|(DEFUN RECOVERORDER2 NIL ...)-33|
(CONST 0) = RECOVERORDER2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RECOVERORDER2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RECOVERORDER2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RECOVERORDER2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RECOVERORDER2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RECOVERORDER2
8     (SKIP&RET 1)


Disassembly of function RECOVERORDER2
(CONST 0) = NVAR
(CONST 1) = 0
(CONST 2) = *COL*
(CONST 3) = VARIABLEORDER
(CONST 4) = RANK
(CONST 5) = N
(CONST 6) = AX
(CONST 7) = *ROW*
(CONST 8) = M
(CONST 9) = DEPENDENTROWS
(CONST 10) = INCONSISTENTROWS
(CONST 11) = 1
(CONST 12) = MOVEROW
(CONST 13) = L
(CONST 14) = K
(CONST 15) = MOVECOL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L K N INCONSISTENTROWS M AX DEPENDENTROWS *ROW* RANK VARIABLEORDER *COL* NVAR)
writes special variables : (K L INCONSISTENTROWS DEPENDENTROWS VARIABLEORDER)
160 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; NVAR
2     (JMP L17)
4     L4
4     (GETVALUE&PUSH 2)                   ; *COL*
6     (LOAD&PUSH 1)
7     (CALLSR&PUSH 1 1)                   ; AREF
10    (GETVALUE 3)                        ; VARIABLEORDER
12    (CONS)
13    (SETVALUE 3)                        ; VARIABLEORDER
15    (LOAD&DEC&STORE 0)
17    L17
17    (LOAD&PUSH 0)
18    (CONST&PUSH 1)                      ; 0
19    (CALLSR&JMPIFNOT 1 45 L4)           ; =
23    (SKIP 1)
25    (GETVALUE&PUSH 4)                   ; RANK
27    (CALLS2&PUSH 150)                   ; 1+
29    (JMP L78)
31    L31
31    (GETVALUE&PUSH 7)                   ; *ROW*
33    (LOAD&PUSH 1)
34    (CALLSR&PUSH 1 1)                   ; AREF
37    (GETVALUE 9)                        ; DEPENDENTROWS
39    (CONS)
40    (SETVALUE 9)                        ; DEPENDENTROWS
42    (JMP L76)
44    L44
44    (GETVALUE&PUSH 6)                   ; AX
46    (GETVALUE&PUSH 7)                   ; *ROW*
48    (LOAD&PUSH 2)
49    (CALLSR&PUSH 1 1)                   ; AREF
52    (GETVALUE&PUSH 2)                   ; *COL*
54    (GETVALUE&PUSH 8)                   ; M
56    (CALLSR&PUSH 1 1)                   ; AREF
59    (CALLSR&PUSH 2 1)                   ; AREF
62    (JMPIFEQTO 1 L31)                   ; 0
65    (GETVALUE&PUSH 7)                   ; *ROW*
67    (LOAD&PUSH 1)
68    (CALLSR&PUSH 1 1)                   ; AREF
71    (GETVALUE 10)                       ; INCONSISTENTROWS
73    (CONS)
74    (SETVALUE 10)                       ; INCONSISTENTROWS
76    L76
76    (LOAD&INC&STORE 0)
78    L78
78    (LOAD&PUSH 0)
79    (GETVALUE&PUSH 5)                   ; N
81    (CALLSR&JMPIFNOT 1 48 L44)          ; >
85    (SKIP 1)
87    (CONST&PUSH 11)                     ; 1
88    (JMP L180)
91    L91
91    (GETVALUE&PUSH 7)                   ; *ROW*
93    (LOAD&PUSH 1)
94    (CALLSR&PUSH 1 1)                   ; AREF
97    (LOAD&PUSH 1)
98    (CALLSR&JMPIF 1 45 L178)            ; =
103   (GETVALUE&PUSH 6)                   ; AX
105   (GETVALUE&PUSH 5)                   ; N
107   (GETVALUE&PUSH 8)                   ; M
109   (LOAD&PUSH 3)
110   (CONST&PUSH 1)                      ; 0
111   (CALL 5 12)                         ; MOVEROW
114   (LOAD 0)
115   (SETVALUE 13)                       ; L
117   (JMP L136)
119   L119
119   (GETVALUE&PUSH 6)                   ; AX
121   (GETVALUE&PUSH 5)                   ; N
123   (GETVALUE&PUSH 8)                   ; M
125   (GETVALUE&PUSH 14)                  ; K
127   (GETVALUE&PUSH 13)                  ; L
129   (CALL 5 12)                         ; MOVEROW
132   (GETVALUE 14)                       ; K
134   (SETVALUE 13)                       ; L
136   L136
136   (GETVALUE&PUSH 7)                   ; *ROW*
138   (GETVALUE&PUSH 13)                  ; L
140   (CALLSR 1 1)                        ; AREF
143   (SETVALUE 14)                       ; K
145   (GETVALUE&PUSH 7)                   ; *ROW*
147   (GETVALUE&PUSH 13)                  ; L
149   (GETVALUE&PUSH 13)                  ; L
151   (LOAD&PUSH 2)
152   (LOAD&PUSH 2)
153   (LOAD&PUSH 2)
154   (CALLSR 1 2)                        ; SYSTEM::STORE
157   (SKIP 3)
159   (GETVALUE&PUSH 14)                  ; K
161   (LOAD&PUSH 1)
162   (CALLSR&JMPIFNOT 1 45 L119)         ; =
166   (GETVALUE&PUSH 6)                   ; AX
168   (GETVALUE&PUSH 5)                   ; N
170   (GETVALUE&PUSH 8)                   ; M
172   (CONST&PUSH 1)                      ; 0
173   (GETVALUE&PUSH 13)                  ; L
175   (CALL 5 12)                         ; MOVEROW
178   L178
178   (LOAD&INC&STORE 0)
180   L180
180   (LOAD&PUSH 0)
181   (GETVALUE&PUSH 5)                   ; N
183   (CALLSR&JMPIFNOT 1 48 L91)          ; >
188   (SKIP 1)
190   (CONST&PUSH 11)                     ; 1
191   (JMP L283)
194   L194
194   (GETVALUE&PUSH 2)                   ; *COL*
196   (LOAD&PUSH 1)
197   (CALLSR&PUSH 1 1)                   ; AREF
200   (LOAD&PUSH 1)
201   (CALLSR&JMPIF 1 45 L281)            ; =
206   (GETVALUE&PUSH 6)                   ; AX
208   (GETVALUE&PUSH 5)                   ; N
210   (GETVALUE&PUSH 8)                   ; M
212   (LOAD&PUSH 3)
213   (CONST&PUSH 1)                      ; 0
214   (CALL 5 15)                         ; MOVECOL
217   (LOAD 0)
218   (SETVALUE 13)                       ; L
220   (JMP L239)
222   L222
222   (GETVALUE&PUSH 6)                   ; AX
224   (GETVALUE&PUSH 5)                   ; N
226   (GETVALUE&PUSH 8)                   ; M
228   (GETVALUE&PUSH 14)                  ; K
230   (GETVALUE&PUSH 13)                  ; L
232   (CALL 5 15)                         ; MOVECOL
235   (GETVALUE 14)                       ; K
237   (SETVALUE 13)                       ; L
239   L239
239   (GETVALUE&PUSH 2)                   ; *COL*
241   (GETVALUE&PUSH 13)                  ; L
243   (CALLSR 1 1)                        ; AREF
246   (SETVALUE 14)                       ; K
248   (GETVALUE&PUSH 2)                   ; *COL*
250   (GETVALUE&PUSH 13)                  ; L
252   (GETVALUE&PUSH 13)                  ; L
254   (LOAD&PUSH 2)
255   (LOAD&PUSH 2)
256   (LOAD&PUSH 2)
257   (CALLSR 1 2)                        ; SYSTEM::STORE
260   (SKIP 3)
262   (GETVALUE&PUSH 14)                  ; K
264   (LOAD&PUSH 1)
265   (CALLSR&JMPIFNOT 1 45 L222)         ; =
269   (GETVALUE&PUSH 6)                   ; AX
271   (GETVALUE&PUSH 5)                   ; N
273   (GETVALUE&PUSH 8)                   ; M
275   (CONST&PUSH 1)                      ; 0
276   (GETVALUE&PUSH 13)                  ; L
278   (CALL 5 15)                         ; MOVECOL
281   L281
281   (LOAD&INC&STORE 0)
283   L283
283   (LOAD&PUSH 0)
284   (GETVALUE&PUSH 0)                   ; NVAR
286   (CALLSR&JMPIFNOT 1 48 L194)         ; >
291   (NIL)
292   (SKIP&RET 2)


Disassembly of function #:|(DEFUN MOVEROW (AX N M ...) ...)-34|
(CONST 0) = MOVEROW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MOVEROW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOVEROW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MOVEROW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MOVEROW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MOVEROW
8     (SKIP&RET 1)


Disassembly of function MOVEROW
(CONST 0) = AX
(CONST 1) = N
(CONST 2) = M
(CONST 3) = 1
(CONST 4) = K
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M K AX)
writes special variable : (K)
32 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; AX
3     (LOAD 7)
4     (BIND 1)                            ; N
6     (LOAD 9)
7     (BIND 2)                            ; M
9     (CONST 3)                           ; 1
10    (BIND 4)                            ; K
12    (JMP L41)
14    L14
14    (GETVALUE&PUSH 0)                   ; AX
16    (GETVALUE&PUSH 4)                   ; K
18    (GETVALUE&PUSH 0)                   ; AX
20    (LOAD&PUSH 17)
21    (GETVALUE&PUSH 4)                   ; K
23    (CALLSR&PUSH 2 1)                   ; AREF
26    (LOAD&PUSH 2)
27    (LOAD&PUSH 17)
28    (LOAD&PUSH 3)
29    (LOAD&PUSH 3)
30    (CALLSR 2 2)                        ; SYSTEM::STORE
33    (SKIP 3)
35    (GETVALUE&PUSH 4)                   ; K
37    (CALLS2 150)                        ; 1+
39    (SETVALUE 4)                        ; K
41    L41
41    (GETVALUE&PUSH 4)                   ; K
43    (GETVALUE&PUSH 2)                   ; M
45    (CALLSR&JMPIFNOT 1 48 L14)          ; >
49    (NIL)
50    (UNBIND 4)
52    (SKIP&RET 6)


Disassembly of function #:|(DEFUN MOVECOL (AX N M ...) ...)-35|
(CONST 0) = MOVECOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MOVECOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOVECOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MOVECOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MOVECOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MOVECOL
8     (SKIP&RET 1)


Disassembly of function MOVECOL
(CONST 0) = AX
(CONST 1) = N
(CONST 2) = M
(CONST 3) = 1
(CONST 4) = K
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N K AX)
writes special variable : (K)
32 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; AX
3     (LOAD 7)
4     (BIND 1)                            ; N
6     (LOAD 9)
7     (BIND 2)                            ; M
9     (CONST 3)                           ; 1
10    (BIND 4)                            ; K
12    (JMP L41)
14    L14
14    (GETVALUE&PUSH 0)                   ; AX
16    (GETVALUE&PUSH 4)                   ; K
18    (GETVALUE&PUSH 0)                   ; AX
20    (GETVALUE&PUSH 4)                   ; K
22    (LOAD&PUSH 18)
23    (CALLSR&PUSH 2 1)                   ; AREF
26    (LOAD&PUSH 2)
27    (LOAD&PUSH 2)
28    (LOAD&PUSH 18)
29    (LOAD&PUSH 3)
30    (CALLSR 2 2)                        ; SYSTEM::STORE
33    (SKIP 3)
35    (GETVALUE&PUSH 4)                   ; K
37    (CALLS2 150)                        ; 1+
39    (SETVALUE 4)                        ; K
41    L41
41    (GETVALUE&PUSH 4)                   ; K
43    (GETVALUE&PUSH 1)                   ; N
45    (CALLSR&JMPIFNOT 1 48 L14)          ; >
49    (NIL)
50    (UNBIND 4)
52    (SKIP&RET 6)


Disassembly of function #:|(DEFUN COMPLEXITY (EXP) ...)-36|
(CONST 0) = COMPLEXITY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPLEXITY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLEXITY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPLEXITY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPLEXITY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPLEXITY
8     (SKIP&RET 1)


Disassembly of function COMPLEXITY
(CONST 0) = EXP
(CONST 1) = 0
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
28 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (JMPIFNOT L32)
7     (GETVALUE&PUSH 0)                   ; EXP
9     (JMPIFEQTO 1 L35)                   ; 0
12    (GETVALUE 0)                        ; EXP
14    (JMPIFATOM L38)
16    (GETVALUE 0)                        ; EXP
18    (CAR&PUSH)
19    (JSR&PUSH L0)
21    (GETVALUE 0)                        ; EXP
23    (CDR&PUSH)
24    (JSR&PUSH L0)
26    (CALLSR 2 53)                       ; +
29    L29
29    (UNBIND1)
30    (SKIP&RET 2)
32    L32
32    (CONST 1)                           ; 0
33    (JMP L29)
35    L35
35    (CONST 1)                           ; 0
36    (JMP L29)
38    L38
38    (CONST 2)                           ; 1
39    (JMP L29)


Disassembly of function #:|(DEFUN COMPLEXITY/ROW (AX I J1 ...) ...)-37|
(CONST 0) = COMPLEXITY/ROW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPLEXITY/ROW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLEXITY/ROW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPLEXITY/ROW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPLEXITY/ROW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPLEXITY/ROW
8     (SKIP&RET 1)


Disassembly of function COMPLEXITY/ROW
(CONST 0) = AX
(CONST 1) = 0
(CONST 2) = *ROW*
(CONST 3) = *COL*
(CONST 4) = COMPLEXITY
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*COL* *ROW* AX)
26 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; AX
3     (LOAD&PUSH 5)
4     (CONST&PUSH 1)                      ; 0
5     (JMP L33)
7     L7
7     (LOAD&PUSH 0)
8     (GETVALUE&PUSH 0)                   ; AX
10    (GETVALUE&PUSH 2)                   ; *ROW*
12    (LOAD&PUSH 11)
13    (CALLSR&PUSH 1 1)                   ; AREF
16    (GETVALUE&PUSH 3)                   ; *COL*
18    (LOAD&PUSH 5)
19    (CALLSR&PUSH 1 1)                   ; AREF
22    (CALLSR&PUSH 2 1)                   ; AREF
25    (CALL1&PUSH 4)                      ; COMPLEXITY
27    (CALLSR&STORE 2 53 0)               ; +
31    (LOAD&INC&STORE 1)
33    L33
33    (LOAD&PUSH 1)
34    (LOAD&PUSH 7)
35    (CALLSR&JMPIFNOT 1 48 L7)           ; >
39    (POP)
40    (SKIP 1)
42    (UNBIND1)
43    (SKIP&RET 5)


Disassembly of function #:|(DEFUN COMPLEXITY/COL (AX J I1 ...) ...)-38|
(CONST 0) = COMPLEXITY/COL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPLEXITY/COL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLEXITY/COL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPLEXITY/COL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPLEXITY/COL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPLEXITY/COL
8     (SKIP&RET 1)


Disassembly of function COMPLEXITY/COL
(CONST 0) = AX
(CONST 1) = 0
(CONST 2) = *ROW*
(CONST 3) = *COL*
(CONST 4) = COMPLEXITY
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*COL* *ROW* AX)
26 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; AX
3     (LOAD&PUSH 5)
4     (CONST&PUSH 1)                      ; 0
5     (JMP L33)
7     L7
7     (LOAD&PUSH 0)
8     (GETVALUE&PUSH 0)                   ; AX
10    (GETVALUE&PUSH 2)                   ; *ROW*
12    (LOAD&PUSH 4)
13    (CALLSR&PUSH 1 1)                   ; AREF
16    (GETVALUE&PUSH 3)                   ; *COL*
18    (LOAD&PUSH 12)
19    (CALLSR&PUSH 1 1)                   ; AREF
22    (CALLSR&PUSH 2 1)                   ; AREF
25    (CALL1&PUSH 4)                      ; COMPLEXITY
27    (CALLSR&STORE 2 53 0)               ; +
31    (LOAD&INC&STORE 1)
33    L33
33    (LOAD&PUSH 1)
34    (LOAD&PUSH 7)
35    (CALLSR&JMPIFNOT 1 48 L7)           ; >
39    (POP)
40    (SKIP 1)
42    (UNBIND1)
43    (SKIP&RET 5)


Disassembly of function #:|(DEFUN ZEROP/ROW (AX I J1 ...) ...)-39|
(CONST 0) = ZEROP/ROW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZEROP/ROW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZEROP/ROW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZEROP/ROW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZEROP/ROW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZEROP/ROW
8     (SKIP&RET 1)


Disassembly of function ZEROP/ROW
(CONST 0) = AX
(CONST 1) = *ROW*
(CONST 2) = *COL*
(CONST 3) = 0
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*COL* *ROW* AX)
28 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; AX
3     (LOAD&PUSH 5)
4     (JMP L33)
6     L6
6     (NIL)
7     (SKIP 1)
9     (JMP L42)
11    L11
11    (GETVALUE&PUSH 0)                   ; AX
13    (GETVALUE&PUSH 1)                   ; *ROW*
15    (LOAD&PUSH 9)
16    (CALLSR&PUSH 1 1)                   ; AREF
19    (GETVALUE&PUSH 2)                   ; *COL*
21    (LOAD&PUSH 3)
22    (CALLSR&PUSH 1 1)                   ; AREF
25    (CALLSR&PUSH 2 1)                   ; AREF
28    (JMPIFNOTEQTO 3 L6)                 ; 0
31    (LOAD&INC&STORE 0)
33    L33
33    (LOAD&PUSH 0)
34    (LOAD&PUSH 6)
35    (CALLSR&JMPIFNOT 1 48 L11)          ; >
39    (T)
40    (SKIP 1)
42    L42
42    (UNBIND1)
43    (SKIP&RET 5)


Disassembly of function #:|(DEFUN PIVOT (AX K *CPIVOT) ...)-40|
(CONST 0) = PIVOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PIVOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PIVOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PIVOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PIVOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PIVOT
8     (SKIP&RET 1)


Disassembly of function PIVOT
(CONST 0) = AX
(CONST 1) = K
(CONST 2) = 1000000
(CONST 3) = NROW
(CONST 4) = NVAR
(CONST 5) = ZEROP/ROW
(CONST 6) = *INV*
(CONST 7) = "Singular"
(CONST 8) = MERROR
(CONST 9) = EXCHANGEROW
(CONST 10) = *ROW*
(CONST 11) = *COL*
(CONST 12) = 0
(CONST 13) = M
(CONST 14) = COMPLEXITY/ROW
(CONST 15) = COMPLEXITY
(CONST 16) = N
(CONST 17) = COMPLEXITY/COL
(CONST 18) = EXCHANGECOL
(CONST 19) = *COLINV*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*COLINV* N *ROW* M *COL* NVAR AX NROW *INV* K)
writes special variables : (M NVAR NROW)
229 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; AX
3     (LOAD 5)
4     (BIND 1)                            ; K
6     (PUSH-NIL 9)
8     (GETVALUE 1)                        ; K
10    (STORE 8)
12    (CONST 2)                           ; 1000000
13    (STORE 6)
14    (STORE 5)
15    (GETVALUE&PUSH 1)                   ; K
17    (T&PUSH)
18    (JMP L63)
20    L20
20    (CONST&PUSH 7)                      ; "Singular"
21    (CALL1 8)                           ; MERROR
23    (JMP L40)
25    L25
25    (GETVALUE 6)                        ; *INV*
27    (JMPIF L20)
29    (LOAD&PUSH 1)
30    (GETVALUE&PUSH 3)                   ; NROW
32    (CALL2 9)                           ; EXCHANGEROW
34    (GETVALUE&PUSH 3)                   ; NROW
36    (CALLS2 151)                        ; 1-
38    (SETVALUE 3)                        ; NROW
40    L40
40    (LOAD&PUSH 1)
41    (GETVALUE&PUSH 3)                   ; NROW
43    (CALLSR&JMPIF 1 48 L61)             ; >
47    L47
47    (GETVALUE&PUSH 0)                   ; AX
49    (LOAD&PUSH 2)
50    (GETVALUE&PUSH 1)                   ; K
52    (GETVALUE&PUSH 4)                   ; NVAR
54    (CALL 4 5)                          ; ZEROP/ROW
57    (JMPIF L25)
59    (NIL&STORE 0)
61    L61
61    (LOAD&INC&STORE 1)
63    L63
63    (LOAD&PUSH 1)
64    (GETVALUE&PUSH 3)                   ; NROW
66    (CALLSR&JMPIFNOT 1 48 L47)          ; >
70    (POP)
71    (SKIP 1)
73    (JMPIFNOT L121)
75    (T)
76    (SKIP 9)
78    (JMP L407)
81    L81
81    (GETVALUE&PUSH 11)                  ; *COL*
83    (GETVALUE&PUSH 11)                  ; *COL*
85    (LOAD&INC&PUSH 2)
87    (CALLSR&PUSH 1 1)                   ; AREF
90    (LOAD&PUSH 1)
91    (LOAD&PUSH 3)
92    (LOAD&PUSH 2)
93    (CALLSR 1 2)                        ; SYSTEM::STORE
96    (SKIP 2)
98    (LOAD&INC&STORE 0)
100   L100
100   (LOAD&PUSH 0)
101   (GETVALUE&PUSH 4)                   ; NVAR
103   (CALLSR&JMPIFNOT 1 45 L81)          ; =
107   (SKIP 1)
109   (GETVALUE&PUSH 4)                   ; NVAR
111   (CALLS2 151)                        ; 1-
113   (SETVALUE 4)                        ; NVAR
115   (GETVALUE&PUSH 13)                  ; M
117   (CALLS2 151)                        ; 1-
119   (SETVALUE 13)                       ; M
121   L121
121   (GETVALUE&PUSH 1)                   ; K
123   (JMP L201)
126   L126
126   (GETVALUE&PUSH 0)                   ; AX
128   (GETVALUE&PUSH 10)                  ; *ROW*
130   (GETVALUE&PUSH 1)                   ; K
132   (CALLSR&PUSH 1 1)                   ; AREF
135   (GETVALUE&PUSH 11)                  ; *COL*
137   (GETVALUE&PUSH 1)                   ; K
139   (CALLSR&PUSH 1 1)                   ; AREF
142   (CALLSR&PUSH 2 1)                   ; AREF
145   (JMPIFNOTEQTO 12 L404)              ; 0
149   (GETVALUE&PUSH 1)                   ; K
151   (JMP L100)
153   L153
153   (LOAD&JMPIF 17 L177)
156   (GETVALUE&PUSH 0)                   ; AX
158   (GETVALUE&PUSH 10)                  ; *ROW*
160   (LOAD&PUSH 2)
161   (CALLSR&PUSH 1 1)                   ; AREF
164   (GETVALUE&PUSH 11)                  ; *COL*
166   (GETVALUE&PUSH 1)                   ; K
168   (CALLSR&PUSH 1 1)                   ; AREF
171   (CALLSR&PUSH 2 1)                   ; AREF
174   (JMPIFEQTO 12 L199)                 ; 0
177   L177
177   (LOAD&PUSH 7)
178   (GETVALUE&PUSH 0)                   ; AX
180   (LOAD&PUSH 2)
181   (GETVALUE&PUSH 1)                   ; K
183   (GETVALUE&PUSH 13)                  ; M
185   (CALL 4 14)                         ; COMPLEXITY/ROW
188   (STORE 6)
189   (PUSH)
190   (CALLSR&JMPIFNOT 1 48 L199)         ; >
194   (LOAD 0)
195   (STORE 9)
197   (LOAD 5)
198   (STORE 7)
199   L199
199   (LOAD&INC&STORE 0)
201   L201
201   (LOAD&PUSH 0)
202   (GETVALUE&PUSH 3)                   ; NROW
204   (CALLSR&JMPIFNOT 1 48 L153)         ; >
208   (SKIP 1)
210   (GETVALUE&PUSH 1)                   ; K
212   (LOAD&PUSH 9)
213   (CALL2 9)                           ; EXCHANGEROW
215   (LOAD&JMPIFNOT 16 L126)
219   (CONST 12)                          ; 0
220   (STORE 7)
221   (CONST 2)                           ; 1000000
222   (STORE 1)
223   (STORE 5)
224   (GETVALUE&PUSH 1)                   ; K
226   (JMP L332)
229   L229
229   (LOAD 0)
230   (STORE 8)
232   (LOAD 3)
233   (STORE 2)
234   (GETVALUE&PUSH 0)                   ; AX
236   (LOAD&PUSH 1)
237   (GETVALUE&PUSH 1)                   ; K
239   (CALLS2&PUSH 150)                   ; 1+
241   (GETVALUE&PUSH 16)                  ; N
243   (CALL 4 17)                         ; COMPLEXITY/COL
246   (STORE 6)
247   (JMP L330)
250   L250
250   (GETVALUE&PUSH 0)                   ; AX
252   (GETVALUE&PUSH 10)                  ; *ROW*
254   (GETVALUE&PUSH 1)                   ; K
256   (CALLSR&PUSH 1 1)                   ; AREF
259   (GETVALUE&PUSH 11)                  ; *COL*
261   (LOAD&PUSH 3)
262   (CALLSR&PUSH 1 1)                   ; AREF
265   (CALLSR&PUSH 2 1)                   ; AREF
268   (JMPIFEQTO 12 L330)                 ; 0
271   (LOAD&PUSH 2)
272   (GETVALUE&PUSH 0)                   ; AX
274   (GETVALUE&PUSH 10)                  ; *ROW*
276   (GETVALUE&PUSH 1)                   ; K
278   (CALLSR&PUSH 1 1)                   ; AREF
281   (GETVALUE&PUSH 11)                  ; *COL*
283   (LOAD&PUSH 4)
284   (CALLSR&PUSH 1 1)                   ; AREF
287   (CALLSR&PUSH 2 1)                   ; AREF
290   (CALL1 15)                          ; COMPLEXITY
292   (STORE 4)
293   (PUSH)
294   (CALLSR&JMPIF 1 48 L229)            ; >
299   (LOAD&PUSH 2)
300   (LOAD&PUSH 4)
301   (CALLS2&JMPIFNOT 2 L330)            ; EQUAL
304   (LOAD&PUSH 6)
305   (GETVALUE&PUSH 0)                   ; AX
307   (LOAD&PUSH 2)
308   (GETVALUE&PUSH 1)                   ; K
310   (CALLS2&PUSH 150)                   ; 1+
312   (GETVALUE&PUSH 16)                  ; N
314   (CALL 4 17)                         ; COMPLEXITY/COL
317   (STORE 5)
318   (PUSH)
319   (CALLSR&JMPIFNOT 1 48 L330)         ; >
323   (LOAD 0)
324   (STORE 8)
326   (LOAD 3)
327   (STORE 2)
328   (LOAD 4)
329   (STORE 6)
330   L330
330   (LOAD&INC&STORE 0)
332   L332
332   (LOAD&PUSH 0)
333   (GETVALUE&PUSH 4)                   ; NVAR
335   (CALLSR&JMPIFNOT 1 48 L250)         ; >
340   (SKIP 1)
342   (GETVALUE&PUSH 1)                   ; K
344   (LOAD&PUSH 8)
345   (CALL2 18)                          ; EXCHANGECOL
347   (GETVALUE&PUSH 19)                  ; *COLINV*
349   (GETVALUE&PUSH 11)                  ; *COL*
351   (GETVALUE&PUSH 1)                   ; K
353   (CALLSR&PUSH 1 1)                   ; AREF
356   (CALLSR&STORE 1 1 0)                ; AREF
360   (GETVALUE&PUSH 19)                  ; *COLINV*
362   (GETVALUE&PUSH 11)                  ; *COL*
364   (GETVALUE&PUSH 1)                   ; K
366   (CALLSR&PUSH 1 1)                   ; AREF
369   (GETVALUE&PUSH 19)                  ; *COLINV*
371   (GETVALUE&PUSH 11)                  ; *COL*
373   (LOAD&PUSH 11)
374   (CALLSR&PUSH 1 1)                   ; AREF
377   (CALLSR&PUSH 1 1)                   ; AREF
380   (LOAD&PUSH 2)
381   (LOAD&PUSH 2)
382   (LOAD&PUSH 2)
383   (CALLSR 1 2)                        ; SYSTEM::STORE
386   (SKIP 3)
388   (GETVALUE&PUSH 19)                  ; *COLINV*
390   (GETVALUE&PUSH 11)                  ; *COL*
392   (LOAD&PUSH 9)
393   (CALLSR&PUSH 1 1)                   ; AREF
396   (LOAD&PUSH 1)
397   (LOAD&PUSH 1)
398   (LOAD&PUSH 4)
399   (CALLSR 1 2)                        ; SYSTEM::STORE
402   (SKIP 2)
404   L404
404   (NIL)
405   (SKIP 9)
407   L407
407   (UNBIND 2)
409   (SKIP&RET 4)


Disassembly of function #:|(DEFUN EXCHANGEROW (I J) ...)-41|
(CONST 0) = EXCHANGEROW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXCHANGEROW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXCHANGEROW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXCHANGEROW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXCHANGEROW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXCHANGEROW
8     (SKIP&RET 1)


Disassembly of function EXCHANGEROW
(CONST 0) = *ROW*
(CONST 1) = PERMSIGN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PERMSIGN *ROW*)
writes special variable : (PERMSIGN)
28 byte-code instructions:
0     (NIL&PUSH)
1     (GETVALUE&PUSH 0)                   ; *ROW*
3     (LOAD&PUSH 4)
4     (CALLSR&STORE 1 1 0)                ; AREF
8     (GETVALUE&PUSH 0)                   ; *ROW*
10    (GETVALUE&PUSH 0)                   ; *ROW*
12    (LOAD&PUSH 4)
13    (CALLSR&PUSH 1 1)                   ; AREF
16    (LOAD&PUSH 1)
17    (LOAD&PUSH 6)
18    (LOAD&PUSH 2)
19    (CALLSR 1 2)                        ; SYSTEM::STORE
22    (SKIP 2)
24    (GETVALUE&PUSH 0)                   ; *ROW*
26    (LOAD&PUSH 0)
27    (LOAD&PUSH 4)
28    (LOAD&PUSH 3)
29    (CALLSR 1 2)                        ; SYSTEM::STORE
32    (SKIP 1)
34    (LOAD&PUSH 3)
35    (LOAD&PUSH 3)
36    (CALLSR&JMPIF 1 45 L45)             ; =
40    (GETVALUE 1)                        ; PERMSIGN
42    (NOT)
43    (SETVALUE 1)                        ; PERMSIGN
45    L45
45    (NIL)
46    (SKIP&RET 4)


Disassembly of function #:|(DEFUN EXCHANGECOL (I J) ...)-42|
(CONST 0) = EXCHANGECOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXCHANGECOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXCHANGECOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXCHANGECOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXCHANGECOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXCHANGECOL
8     (SKIP&RET 1)


Disassembly of function EXCHANGECOL
(CONST 0) = *COL*
(CONST 1) = PERMSIGN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PERMSIGN *COL*)
writes special variable : (PERMSIGN)
28 byte-code instructions:
0     (NIL&PUSH)
1     (GETVALUE&PUSH 0)                   ; *COL*
3     (LOAD&PUSH 4)
4     (CALLSR&STORE 1 1 0)                ; AREF
8     (GETVALUE&PUSH 0)                   ; *COL*
10    (GETVALUE&PUSH 0)                   ; *COL*
12    (LOAD&PUSH 4)
13    (CALLSR&PUSH 1 1)                   ; AREF
16    (LOAD&PUSH 1)
17    (LOAD&PUSH 6)
18    (LOAD&PUSH 2)
19    (CALLSR 1 2)                        ; SYSTEM::STORE
22    (SKIP 2)
24    (GETVALUE&PUSH 0)                   ; *COL*
26    (LOAD&PUSH 0)
27    (LOAD&PUSH 4)
28    (LOAD&PUSH 3)
29    (CALLSR 1 2)                        ; SYSTEM::STORE
32    (SKIP 1)
34    (LOAD&PUSH 3)
35    (LOAD&PUSH 3)
36    (CALLSR&JMPIF 1 45 L45)             ; =
40    (GETVALUE 1)                        ; PERMSIGN
42    (NOT)
43    (SETVALUE 1)                        ; PERMSIGN
45    L45
45    (NIL)
46    (SKIP&RET 4)


Disassembly of function #:|(DEFUN SOLVE2 (LLIST) ...)-43|
(CONST 0) = SOLVE2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SOLVE2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SOLVE2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SOLVE2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SOLVE2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SOLVE2
8     (SKIP&RET 1)


Disassembly of function SOLVE2
(CONST 0) = $MULTIPLICITIES
(CONST 1) = #<COMPILED-CLOSURE SOLVE2-1>
(CONST 2) = MAP2C
(CONST 3) = (MLIST SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($MULTIPLICITIES)
writes special variable : ($MULTIPLICITIES)
11 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; $MULTIPLICITIES
3     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE SOLVE2-1>
4     (LOAD&PUSH 2)
5     (CALL2 2)                           ; MAP2C
7     (CONST&PUSH 3)                      ; (MLIST SIMP)
8     (GETVALUE&PUSH 0)                   ; $MULTIPLICITIES
10    (CALLS2 73)                         ; NREVERSE
12    (CONS)
13    (SETVALUE 0)                        ; $MULTIPLICITIES
15    (SKIP&RET 2)


Disassembly of function SOLVE2-1
(CONST 0) = EQUATIONS
(CONST 1) = DISPLINE
(CONST 2) = $MULTIPLICITIES
(CONST 3) = 1
(CONST 4) = $DISPFLAG
(CONST 5) = "Multiplicity ~A~%"
(CONST 6) = MTELL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($DISPFLAG $MULTIPLICITIES EQUATIONS)
writes special variables : ($MULTIPLICITIES EQUATIONS)
22 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; EQUATIONS
2     (LOAD&PUSH 3)
3     (CALL1&PUSH 1)                      ; DISPLINE
5     (LIST&PUSH 1)
7     (CALLSR 2 35)                       ; NCONC
10    (SETVALUE 0)                        ; EQUATIONS
12    (LOAD&PUSH 1)
13    (GETVALUE 2)                        ; $MULTIPLICITIES
15    (CONS)
16    (SETVALUE 2)                        ; $MULTIPLICITIES
18    (LOAD&PUSH 1)
19    (CONST&PUSH 3)                      ; 1
20    (CALLSR 1 48)                       ; >
23    (JMPIFNOT1 L35)
25    (GETVALUE 4)                        ; $DISPFLAG
27    (JMPIFNOT1 L35)
29    (CONST&PUSH 5)                      ; "Multiplicity ~A~%"
30    (LOAD&PUSH 2)
31    (CALL2 6)                           ; MTELL
33    (SKIP&RET 3)
35    L35
35    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN DISPLINE (EXP) ...)-44|
(CONST 0) = DISPLINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISPLINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISPLINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISPLINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISPLINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISPLINE
8     (SKIP&RET 1)


Disassembly of function DISPLINE
(CONST 0) = EXP
(CONST 1) = $NOLABELS
(CONST 2) = 0
(CONST 3) = ELABEL
(CONST 4) = $DISPFLAG
(CONST 5) = LINELABLE
(CONST 6) = NODISP
(CONST 7) = RUNTIME
(CONST 8) = MTERPRI
(CONST 9) = (MLABLE)
(CONST 10) = DISPLA
(CONST 11) = TIMEORG
(CONST 12) = PUTPROP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LINELABLE $DISPFLAG EXP)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (NIL)
4     (BIND 1)                            ; $NOLABELS
6     (CONST&PUSH 2)                      ; 0
7     (GETVALUE&PUSH 0)                   ; EXP
9     (CALL1 3)                           ; ELABEL
11    (GETVALUE 4)                        ; $DISPFLAG
13    (JMPIF L30)
15    (GETVALUE&PUSH 5)                   ; LINELABLE
17    (T&PUSH)
18    (CONST&PUSH 6)                      ; NODISP
19    (CALL 3 12)                         ; PUTPROP
22    L22
22    (GETVALUE 5)                        ; LINELABLE
24    (SKIP 1)
26    (UNBIND 2)
28    (SKIP&RET 2)
30    L30
30    (GETVALUE&PUSH 5)                   ; LINELABLE
32    (CONST&PUSH 6)                      ; NODISP
33    (CALLS2 137)                        ; REMPROP
35    (CALL0 7)                           ; RUNTIME
37    (STORE 0)
38    (CALL0 8)                           ; MTERPRI
40    (CONST&PUSH 9)                      ; (MLABLE)
41    (GETVALUE&PUSH 5)                   ; LINELABLE
43    (GETVALUE&PUSH 0)                   ; EXP
45    (LIST&PUSH 3)
47    (CALL1 10)                          ; DISPLA
49    (LOAD&PUSH 0)
50    (CALL1 11)                          ; TIMEORG
52    (JMP L22)


Wrote file binary-clisp/mat.fas
Wrote file /cygdrive/e/temp/maxima/src/mat.lis