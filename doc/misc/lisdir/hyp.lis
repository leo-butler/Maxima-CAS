Listing of compilation of file /cygdrive/e/temp/maxima/src/hyp.lisp
on 2002-12-17 13:36:19 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/hyp.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE HYP)-2|
(CONST 0) = HYP
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYP
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL) (DECLARE-TOP #))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VAR PAR ...))-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL FLDEG FLGKUM ...))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ FLGKUM T ...)-6|
(CONST 0) = FLGKUM
(CONST 1) = FLDEG
(CONST 2) = FL1F1
(CONST 3) = CHECKCOEFSIGNLIST
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (CHECKCOEFSIGNLIST FL1F1 FLDEG FLGKUM)
7 byte-code instructions:
0     (T)
1     (SETVALUE 0)                        ; FLGKUM
3     (SETVALUE 1)                        ; FLDEG
5     (SETVALUE 2)                        ; FL1F1
7     (NIL)
8     (SETVALUE 3)                        ; CHECKCOEFSIGNLIST
10    (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL $EXPONENTIALIZE $BESTRIGLIM ...))-7|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ FAIL-SYM (GENSYM))-8|
(CONST 0) = FAIL-SYM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (FAIL-SYM)
4 byte-code instructions:
0     (PUSH-UNBOUND 1)
2     (CALLS2 143)                        ; GENSYM
4     (SETVALUE 0)                        ; FAIL-SYM
6     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR \|3//2\| '(# 3 2))-9|
(CONST 0) = (SPECIAL |3//2|)
(CONST 1) = |3//2|
(CONST 2) = ((RAT SIMP) 3 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL |3//2|)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; |3//2|
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; |3//2|
8     (CONST&PUSH 2)                      ; ((RAT SIMP) 3 2)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; |3//2|
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR \|1//2\| '(# 1 2))-10|
(CONST 0) = (SPECIAL |1//2|)
(CONST 1) = |1//2|
(CONST 2) = ((RAT SIMP) 1 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL |1//2|)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; |1//2|
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; |1//2|
8     (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; |1//2|
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR \|-1//2\| '(# -1 2))-11|
(CONST 0) = (SPECIAL |-1//2|)
(CONST 1) = |-1//2|
(CONST 2) = ((RAT SIMP) -1 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL |-1//2|)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; |-1//2|
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; |-1//2|
8     (CONST&PUSH 2)                      ; ((RAT SIMP) -1 2)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; |-1//2|
12    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE) (DEFMACRO FIXP # ...) ...)-12|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN $HGFRED (L1 L2 ARG ...) ...)-13|
(CONST 0) = $HGFRED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $HGFRED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HGFRED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $HGFRED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $HGFRED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $HGFRED
8     (SKIP&RET 1)


Disassembly of function $HGFRED
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = ARG
(CONST 3) = 3
(CONST 4) = $BESTRIGLIM
(CONST 5) = $ALL
(CONST 6) = $RADEXPAND
(CONST 7) = VAR
(CONST 8) = PAR
(CONST 9) = HGFSIMP-EXEC
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1 ARG)
writes special variables : (PAR VAR)
21 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; ARG
9     (CONST 3)                           ; 3
10    (BIND 4)                            ; $BESTRIGLIM
12    (CONST 5)                           ; $ALL
13    (BIND 6)                            ; $RADEXPAND
15    (GETVALUE 2)                        ; ARG
17    (SETVALUE 7)                        ; VAR
19    (SETVALUE 8)                        ; PAR
21    (GETVALUE 0)                        ; L1
23    (CDR&PUSH)
24    (GETVALUE 1)                        ; L2
26    (CDR&PUSH)
27    (GETVALUE&PUSH 2)                   ; ARG
29    (CALL 3 9)                          ; HGFSIMP-EXEC
32    (UNBIND 5)
34    (SKIP&RET 4)


Disassembly of function #:|(DEFUN HGFSIMP-EXEC (L1 L2 ARG) ...)-14|
(CONST 0) = HGFSIMP-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HGFSIMP-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HGFSIMP-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HGFSIMP-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HGFSIMP-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HGFSIMP-EXEC
8     (SKIP&RET 1)


Disassembly of function HGFSIMP-EXEC
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = ARG
(CONST 3) = RES
(CONST 4) = $EXPONENTIALIZE
(CONST 5) = HGFSIMP
(CONST 6) = FPQFORM
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RES ARG L2 L1)
writes special variables : (RES L2 L1)
35 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; ARG
9     (GETVALUE&PUSH 0)                   ; L1
11    (CALLS1 161)                        ; COPY-TREE
13    (SETVALUE 0)                        ; L1
15    (GETVALUE&PUSH 1)                   ; L2
17    (CALLS1 161)                        ; COPY-TREE
19    (SETVALUE 1)                        ; L2
21    (NIL)
22    (BIND 3)                            ; RES
24    (NIL)
25    (BIND 4)                            ; $EXPONENTIALIZE
27    (GETVALUE&PUSH 0)                   ; L1
29    (GETVALUE&PUSH 1)                   ; L2
31    (GETVALUE&PUSH 2)                   ; ARG
33    (CALL 3 5)                          ; HGFSIMP
36    (SETVALUE 3)                        ; RES
38    (PUSH)
39    (CALLS2&JMPIF 8 L59)                ; NUMBERP
42    (GETVALUE 3)                        ; RES
44    (JMPIFCONSP L59)
46    (GETVALUE&PUSH 0)                   ; L1
48    (GETVALUE&PUSH 1)                   ; L2
50    (GETVALUE&PUSH 2)                   ; ARG
52    (CALL 3 6)                          ; FPQFORM
55    L55
55    (UNBIND 5)
57    (SKIP&RET 4)
59    L59
59    (GETVALUE 3)                        ; RES
61    (JMP L55)


Disassembly of function #:|(DEFUN HGFSIMP (L1 L2 VAR) ...)-15|
(CONST 0) = HGFSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HGFSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HGFSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HGFSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HGFSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HGFSIMP
8     (SKIP&RET 1)


Disassembly of function HGFSIMP
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = VAR
(CONST 3) = MACSIMP
(CONST 4) = SIMPG
(CONST 5) = FAIL
(CONST 6) = INTDIFFL1L2
(CONST 7) = LISTCMDIFF
(CONST 8) = SPLITPFQ
(CONST 9) = DISPATCH-SPEC-SIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1)
writes special variables : (LISTCMDIFF L2 L1)
56 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; VAR
9     (NIL&PUSH)
10    (GETVALUE&PUSH 0)                   ; L1
12    (CALL1 3)                           ; MACSIMP
14    (SETVALUE 0)                        ; L1
16    (GETVALUE&PUSH 1)                   ; L2
18    (CALL1 3)                           ; MACSIMP
20    (SETVALUE 1)                        ; L2
22    (GETVALUE&PUSH 0)                   ; L1
24    (GETVALUE&PUSH 1)                   ; L2
26    (CALL2 4)                           ; SIMPG
28    (STORE 0)
29    (CAR&PUSH)
30    (JMPIFNOTEQTO 5 L61)                ; FAIL
33    (LOAD 0)
34    (CDR)
35    (CAR&PUSH)
36    (LOAD 1)
37    (CDR)
38    (CDR)
39    (CAR&PUSH)
40    (CALL2 6)                           ; INTDIFFL1L2
42    (SETVALUE 7)                        ; LISTCMDIFF
44    (JMPIF L64)
46    (LOAD 0)
47    (CDR)
48    (CAR&PUSH)
49    (LOAD 1)
50    (CDR)
51    (CDR)
52    (CAR&PUSH)
53    (CALL2 9)                           ; DISPATCH-SPEC-SIMP
55    (SKIP 1)
57    L57
57    (UNBIND 3)
59    (SKIP&RET 4)
61    L61
61    (POP)
62    (JMP L57)
64    L64
64    (PUSH)
65    (LOAD 1)
66    (CDR)
67    (CAR&PUSH)
68    (LOAD 2)
69    (CDR)
70    (CDR)
71    (CAR&PUSH)
72    (CALL 3 8)                          ; SPLITPFQ
75    (SKIP 1)
77    (JMP L57)


Disassembly of function #:|(DEFUN MACSIMP (L) ...)-16|
(CONST 0) = MACSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MACSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MACSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MACSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MACSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MACSIMP
8     (SKIP&RET 1)


Disassembly of function MACSIMP
(CONST 0) = L
(CONST 1) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L24)
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (NIL&PUSH)
11    (CALL2&PUSH 1)                      ; SIMPLIFYA
13    (LIST&PUSH 1)
15    (GETVALUE 0)                        ; L
17    (CDR&PUSH)
18    (CALLSR 2 34)                       ; APPEND
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)
24    L24
24    (NIL)
25    (JMP L21)


Disassembly of function #:|(DEFUN SIMPG (L1 L2) ...)-17|
(CONST 0) = SIMPG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPG
8     (SKIP&RET 1)


Disassembly of function SIMPG
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = ZL-INTERSECTION
(CONST 3) = SIMPG-EXEC
(CONST 4) = DEL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1)
26 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL&PUSH)
7     (GETVALUE&PUSH 0)                   ; L1
9     (GETVALUE&PUSH 1)                   ; L2
11    (CALL2 2)                           ; ZL-INTERSECTION
13    (STORE 0)
14    (JMPIFNOT L35)
16    (LOAD&PUSH 0)
17    (GETVALUE&PUSH 0)                   ; L1
19    (CALL2&PUSH 4)                      ; DEL
21    (LOAD&PUSH 1)
22    (GETVALUE&PUSH 1)                   ; L2
24    (CALL2 4)                           ; DEL
26    L26
26    (PUSH)
27    (CALL2 3)                           ; SIMPG-EXEC
29    (SKIP 1)
31    (UNBIND 2)
33    (SKIP&RET 3)
35    L35
35    (GETVALUE&PUSH 0)                   ; L1
37    (GETVALUE 1)                        ; L2
39    (JMP L26)


Disassembly of function #:|(DEFUN DEL (A B) ...)-18|
(CONST 0) = DEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEL
8     (SKIP&RET 1)


Disassembly of function DEL
(CONST 0) = A
(CONST 1) = B
(CONST 2) = 1
(CONST 3) = ZL-DELETE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
21 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE 0)                        ; A
8     (JMPIFNOT L28)
10    (GETVALUE 0)                        ; A
12    (CDR&PUSH)
13    (GETVALUE 0)                        ; A
15    (CAR&PUSH)
16    (GETVALUE&PUSH 1)                   ; B
18    (CONST&PUSH 2)                      ; 1
19    (CALL&PUSH 3 3)                     ; ZL-DELETE
22    (JSR L0)
24    L24
24    (UNBIND 2)
26    (SKIP&RET 3)
28    L28
28    (GETVALUE 1)                        ; B
30    (JMP L24)


Disassembly of function #:|(DEFUN SIMPG-EXEC (L1 L2) ...)-19|
(CONST 0) = SIMPG-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPG-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPG-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPG-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPG-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPG-EXEC
8     (SKIP&RET 1)


Disassembly of function SIMPG-EXEC
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = N
(CONST 3) = ZEROP-IN-L
(CONST 4) = 1
(CONST 5) = HYP-NEGP-IN-L
(CONST 6) = CREATE-POLY
(CONST 7) = UNDEF
(CONST 8) = FAIL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N L2 L1)
writes special variable : (N)
42 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL)
7     (BIND 2)                            ; N
9     (GETVALUE&PUSH 0)                   ; L1
11    (CALL1&JMPIF 3 L51)                 ; ZEROP-IN-L
14    (GETVALUE&PUSH 0)                   ; L1
16    (CALL1 5)                           ; HYP-NEGP-IN-L
18    (SETVALUE 2)                        ; N
20    (JMPIF L55)
22    (GETVALUE&PUSH 1)                   ; L2
24    (CALL1&JMPIF 3 L67)                 ; ZEROP-IN-L
27    (GETVALUE&PUSH 1)                   ; L2
29    (CALL1&JMPIF 5 L67)                 ; HYP-NEGP-IN-L
32    (CONST&PUSH 8)                      ; FAIL
33    (LIST&PUSH 1)
35    (GETVALUE&PUSH 0)                   ; L1
37    (LIST&PUSH 1)
39    (GETVALUE&PUSH 1)                   ; L2
41    (LIST&PUSH 1)
43    (CALLSR 3 34)                       ; APPEND
46    (UNBIND1)
47    L47
47    (UNBIND 2)
49    (SKIP&RET 3)
51    L51
51    (CONST 4)                           ; 1
52    (UNBIND1)
53    (JMP L47)
55    L55
55    (GETVALUE&PUSH 0)                   ; L1
57    (GETVALUE&PUSH 1)                   ; L2
59    (GETVALUE&PUSH 2)                   ; N
61    (CALL 3 6)                          ; CREATE-POLY
64    (UNBIND1)
65    (JMP L47)
67    L67
67    (CONST 7)                           ; UNDEF
68    (UNBIND1)
69    (JMP L47)


Disassembly of function #:|(DEFUN INTDIFFL1L2 (L1 L2) ...)-20|
(CONST 0) = INTDIFFL1L2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTDIFFL1L2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTDIFFL1L2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTDIFFL1L2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTDIFFL1L2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTDIFFL1L2
8     (SKIP&RET 1)


Disassembly of function INTDIFFL1L2
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = INTDIFF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1)
15 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (GETVALUE 0)                        ; L1
8     (JMPIFNOT L20)
10    (GETVALUE&PUSH 0)                   ; L1
12    (GETVALUE&PUSH 1)                   ; L2
14    (CALL2 2)                           ; INTDIFF
16    L16
16    (UNBIND 2)
18    (SKIP&RET 3)
20    L20
20    (NIL)
21    (JMP L16)


Disassembly of function #:|(DEFUN INTDIFF (L1 L2) ...)-21|
(CONST 0) = INTDIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTDIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTDIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTDIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTDIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTDIFF
8     (SKIP&RET 1)


Disassembly of function INTDIFF
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = L
(CONST 3) = A
(CONST 4) = INTDIFFL1L2
(CONST 5) = SUB
(CONST 6) = NNI
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A L L1 L2)
writes special variables : (A L)
46 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL)
7     (BIND 2)                            ; L
9     (NIL)
10    (BIND 3)                            ; A
12    (NIL&PUSH)
13    (GETVALUE 1)                        ; L2
15    (SETVALUE 2)                        ; L
17    (GETVALUE 0)                        ; L1
19    (CAR)
20    (SETVALUE 3)                        ; A
22    (GETVALUE 2)                        ; L
24    (JMPIF L48)
26    L26
26    (GETVALUE 0)                        ; L1
28    (CDR&PUSH)
29    (GETVALUE&PUSH 1)                   ; L2
31    (CALL2 4)                           ; INTDIFFL1L2
33    (SKIP 1)
35    (UNBIND 2)
37    (JMP L69)
39    L39
39    (GETVALUE 2)                        ; L
41    (CDR)
42    (SETVALUE 2)                        ; L
44    (GETVALUE 2)                        ; L
46    (JMPIFNOT L26)
48    L48
48    (GETVALUE&PUSH 3)                   ; A
50    (GETVALUE 2)                        ; L
52    (CAR&PUSH)
53    (CALL2 5)                           ; SUB
55    (STORE 0)
56    (PUSH)
57    (CALL1&JMPIFNOT 6 L39)              ; NNI
60    (GETVALUE&PUSH 3)                   ; A
62    (LOAD&PUSH 1)
63    (LIST 2)
65    (SKIP 1)
67    (UNBIND 2)
69    L69
69    (UNBIND 2)
71    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CREATE-POLY (L1 L2 N) ...)-22|
(CONST 0) = CREATE-POLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CREATE-POLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CREATE-POLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CREATE-POLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CREATE-POLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CREATE-POLY
8     (SKIP&RET 1)


Disassembly of function CREATE-POLY
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = N
(CONST 3) = 2
(CONST 4) = 1
(CONST 5) = 2F1POLYS
(CONST 6) = 1F1POLYS
(CONST 7) = 2F0POLYS
(CONST 8) = -1
(CONST 9) = MUL
(CONST 10) = CREATE-ANY-POLY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N L2 L1)
54 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; N
9     (GETVALUE&PUSH 0)                   ; L1
11    (CALLS2&PUSH 71)                    ; LENGTH
13    (GETVALUE&PUSH 1)                   ; L2
15    (CALLS2&PUSH 71)                    ; LENGTH
17    (LOAD&PUSH 1)
18    (JMPIFNOTEQTO 3 L25)                ; 2
21    (LOAD&PUSH 0)
22    (JMPIFEQTO 4 L59)                   ; 1
25    L25
25    (LOAD&PUSH 1)
26    (JMPIFNOTEQTO 4 L33)                ; 1
29    (LOAD&PUSH 0)
30    (JMPIFEQTO 4 L72)                   ; 1
33    L33
33    (LOAD&PUSH 1)
34    (JMPIFNOTEQTO 3 L41)                ; 2
37    (LOAD&PUSH 0)
38    (CALLS2&JMPIF 145 L82)              ; ZEROP
41    L41
41    (GETVALUE&PUSH 0)                   ; L1
43    (GETVALUE&PUSH 1)                   ; L2
45    (CONST&PUSH 8)                      ; -1
46    (GETVALUE&PUSH 2)                   ; N
48    (CALL2&PUSH 9)                      ; MUL
50    (CALL 3 10)                         ; CREATE-ANY-POLY
53    (SKIP 2)
55    L55
55    (UNBIND 3)
57    (SKIP&RET 4)
59    L59
59    (GETVALUE&PUSH 0)                   ; L1
61    (GETVALUE&PUSH 1)                   ; L2
63    (GETVALUE&PUSH 2)                   ; N
65    (CALL 3 5)                          ; 2F1POLYS
68    (SKIP 2)
70    (JMP L55)
72    L72
72    (GETVALUE&PUSH 1)                   ; L2
74    (GETVALUE&PUSH 2)                   ; N
76    (CALL2 6)                           ; 1F1POLYS
78    (SKIP 2)
80    (JMP L55)
82    L82
82    (GETVALUE&PUSH 0)                   ; L1
84    (GETVALUE&PUSH 2)                   ; N
86    (CALL2 7)                           ; 2F0POLYS
88    (SKIP 2)
90    (JMP L55)


Disassembly of function #:|(DEFUN 1F1POLYS (L2 N) ...)-23|
(CONST 0) = 1F1POLYS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 1F1POLYS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1F1POLYS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 1F1POLYS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 1F1POLYS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 1F1POLYS
8     (SKIP&RET 1)


Disassembly of function 1F1POLYS
(CONST 0) = L2
(CONST 1) = N
(CONST 2) = C
(CONST 3) = FACT1
(CONST 4) = FACT2
(CONST 5) = -1
(CONST 6) = MUL
(CONST 7) = 2
(CONST 8) = POWER
(CONST 9) = FACTORIAL
(CONST 10) = VAR
(CONST 11) = 1
(CONST 12) = DIV
(CONST 13) = ADD
(CONST 14) = HERMPOL
(CONST 15) = 3
(CONST 16) = GM
(CONST 17) = SUB
(CONST 18) = LAGPOL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FACT2 FACT1 C VAR N L2)
writes special variables : (FACT2 FACT1 N C)
100 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L2
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (NIL)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; FACT1
12    (NIL)
13    (BIND 4)                            ; FACT2
15    (GETVALUE 0)                        ; L2
17    (CAR)
18    (SETVALUE 2)                        ; C
20    (CONST&PUSH 5)                      ; -1
21    (GETVALUE&PUSH 1)                   ; N
23    (CALL2 6)                           ; MUL
25    (SETVALUE 1)                        ; N
27    (CONST&PUSH 7)                      ; 2
28    (GETVALUE&PUSH 1)                   ; N
30    (CALL2&PUSH 8)                      ; POWER
32    (GETVALUE&PUSH 1)                   ; N
34    (CALL1&PUSH 9)                      ; FACTORIAL
36    (CONST&PUSH 5)                      ; -1
37    (GETVALUE&PUSH 1)                   ; N
39    (CALL2&PUSH 8)                      ; POWER
41    (CONST&PUSH 5)                      ; -1
42    (CALL2&PUSH 8)                      ; POWER
44    (CALL 3 6)                          ; MUL
47    (SETVALUE 3)                        ; FACT1
49    (CONST&PUSH 7)                      ; 2
50    (CONST&PUSH 7)                      ; 2
51    (CONST&PUSH 5)                      ; -1
52    (CALL2&PUSH 8)                      ; POWER
54    (CALL2&PUSH 8)                      ; POWER
56    (GETVALUE&PUSH 10)                  ; VAR
58    (CONST&PUSH 7)                      ; 2
59    (CONST&PUSH 5)                      ; -1
60    (CALL2&PUSH 8)                      ; POWER
62    (CALL2&PUSH 8)                      ; POWER
64    (CALL2 6)                           ; MUL
66    (SETVALUE 4)                        ; FACT2
68    (GETVALUE&PUSH 2)                   ; C
70    (CONST&PUSH 11)                     ; 1
71    (CONST&PUSH 7)                      ; 2
72    (CALL2&PUSH 12)                     ; DIV
74    (CALLS2&JMPIF 2 L119)               ; EQUAL
77    (GETVALUE&PUSH 2)                   ; C
79    (CONST&PUSH 15)                     ; 3
80    (CONST&PUSH 7)                      ; 2
81    (CALL2&PUSH 12)                     ; DIV
83    (CALLS2&JMPIFNOT 2 L140)            ; EQUAL
86    (GETVALUE&PUSH 3)                   ; FACT1
88    (GETVALUE&PUSH 1)                   ; N
90    (GETVALUE&PUSH 1)                   ; N
92    (CONST&PUSH 11)                     ; 1
93    (CALL&PUSH 3 13)                    ; ADD
96    (CALL1&PUSH 9)                      ; FACTORIAL
98    (CONST&PUSH 5)                      ; -1
99    (CALL2&PUSH 8)                      ; POWER
101   (GETVALUE&PUSH 1)                   ; N
103   (GETVALUE&PUSH 1)                   ; N
105   (CONST&PUSH 11)                     ; 1
106   (CALL 3 13)                         ; ADD
109   L109
109   (PUSH)
110   (GETVALUE&PUSH 4)                   ; FACT2
112   (CALL2&PUSH 14)                     ; HERMPOL
114   (CALL 3 6)                          ; MUL
117   (JMP L171)
119   L119
119   (GETVALUE&PUSH 3)                   ; FACT1
121   (GETVALUE&PUSH 1)                   ; N
123   (GETVALUE&PUSH 1)                   ; N
125   (CALL2&PUSH 13)                     ; ADD
127   (CALL1&PUSH 9)                      ; FACTORIAL
129   (CONST&PUSH 5)                      ; -1
130   (CALL2&PUSH 8)                      ; POWER
132   (GETVALUE&PUSH 1)                   ; N
134   (GETVALUE&PUSH 1)                   ; N
136   (CALL2 13)                          ; ADD
138   (JMP L109)
140   L140
140   (GETVALUE&PUSH 1)                   ; N
142   (CALL1&PUSH 9)                      ; FACTORIAL
144   (GETVALUE&PUSH 2)                   ; C
146   (CALL1&PUSH 16)                     ; GM
148   (GETVALUE&PUSH 2)                   ; C
150   (GETVALUE&PUSH 1)                   ; N
152   (CALL2&PUSH 13)                     ; ADD
154   (CALL1&PUSH 16)                     ; GM
156   (GETVALUE&PUSH 1)                   ; N
158   (GETVALUE&PUSH 2)                   ; C
160   (CONST&PUSH 11)                     ; 1
161   (CALL2&PUSH 17)                     ; SUB
163   (GETVALUE&PUSH 10)                  ; VAR
165   (CALL&PUSH 3 18)                    ; LAGPOL
168   (CALL 4 6)                          ; MUL
171   L171
171   (UNBIND 5)
173   (SKIP&RET 3)


Disassembly of function #:|(DEFUN HERMPOL (N ARG) ...)-24|
(CONST 0) = HERMPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HERMPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HERMPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HERMPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HERMPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HERMPOL
8     (SKIP&RET 1)


Disassembly of function HERMPOL
(CONST 0) = N
(CONST 1) = ARG
(CONST 2) = (MQAPPLY)
(CONST 3) = ($%HE ARRAY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARG N)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; ARG
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (CONST&PUSH 3)                      ; ($%HE ARRAY)
8     (GETVALUE&PUSH 0)                   ; N
10    (LIST&PUSH 2)
12    (GETVALUE&PUSH 1)                   ; ARG
14    (LIST 3)
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LAGPOL (N A ARG) ...)-25|
(CONST 0) = LAGPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LAGPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LAGPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LAGPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LAGPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LAGPOL
8     (SKIP&RET 1)


Disassembly of function LAGPOL
(CONST 0) = N
(CONST 1) = A
(CONST 2) = ARG
(CONST 3) = (MQAPPLY)
(CONST 4) = ($%L ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARG A N)
15 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; A
6     (LOAD 7)
7     (BIND 2)                            ; ARG
9     (CONST&PUSH 3)                      ; (MQAPPLY)
10    (CONST&PUSH 4)                      ; ($%L ARRAY)
11    (GETVALUE&PUSH 0)                   ; N
13    (GETVALUE&PUSH 1)                   ; A
15    (LIST&PUSH 3)
17    (GETVALUE&PUSH 2)                   ; ARG
19    (LIST 3)
21    (UNBIND 3)
23    (SKIP&RET 4)


Disassembly of function #:|(DEFUN 2F0POLYS (L1 N) ...)-26|
(CONST 0) = 2F0POLYS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 2F0POLYS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2F0POLYS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 2F0POLYS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 2F0POLYS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 2F0POLYS
8     (SKIP&RET 1)


Disassembly of function 2F0POLYS
(CONST 0) = L1
(CONST 1) = N
(CONST 2) = A
(CONST 3) = B
(CONST 4) = TEMP
(CONST 5) = X
(CONST 6) = SUB
(CONST 7) = -1
(CONST 8) = 2
(CONST 9) = DIV
(CONST 10) = 1
(CONST 11) = VAR
(CONST 12) = MUL
(CONST 13) = POWER
(CONST 14) = INTERHERMPOL
(CONST 15) = FACTORIAL
(CONST 16) = ADD
(CONST 17) = LAGPOL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N VAR TEMP B A L1)
writes special variables : (N X TEMP B A)
89 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (NIL)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; B
12    (NIL)
13    (BIND 4)                            ; TEMP
15    (NIL)
16    (BIND 5)                            ; X
18    (GETVALUE 0)                        ; L1
20    (CAR)
21    (SETVALUE 2)                        ; A
23    (GETVALUE 0)                        ; L1
25    (CDR)
26    (CAR)
27    (SETVALUE 3)                        ; B
29    (PUSH)
30    (GETVALUE&PUSH 2)                   ; A
32    (CALL2&PUSH 6)                      ; SUB
34    (CONST&PUSH 7)                      ; -1
35    (CONST&PUSH 8)                      ; 2
36    (CALL2&PUSH 9)                      ; DIV
38    (CALLS2&JMPIFNOT 2 L53)             ; EQUAL
41    (GETVALUE 2)                        ; A
43    (SETVALUE 4)                        ; TEMP
45    (GETVALUE 3)                        ; B
47    (SETVALUE 2)                        ; A
49    (GETVALUE 4)                        ; TEMP
51    (SETVALUE 3)                        ; B
53    L53
53    (GETVALUE&PUSH 3)                   ; B
55    (GETVALUE&PUSH 2)                   ; A
57    (CALL2&PUSH 6)                      ; SUB
59    (CONST&PUSH 10)                     ; 1
60    (CONST&PUSH 8)                      ; 2
61    (CALL2&PUSH 9)                      ; DIV
63    (CALLS2&JMPIF 2 L123)               ; EQUAL
66    (CONST&PUSH 7)                      ; -1
67    (GETVALUE&PUSH 11)                  ; VAR
69    (CONST&PUSH 7)                      ; -1
70    (CALL2&PUSH 13)                     ; POWER
72    (CALL2 12)                          ; MUL
74    (SETVALUE 5)                        ; X
76    (CONST&PUSH 7)                      ; -1
77    (GETVALUE&PUSH 1)                   ; N
79    (CALL2 12)                          ; MUL
81    (SETVALUE 1)                        ; N
83    (PUSH)
84    (CALL1&PUSH 15)                     ; FACTORIAL
86    (GETVALUE&PUSH 5)                   ; X
88    (GETVALUE&PUSH 1)                   ; N
90    (CALL2&PUSH 13)                     ; POWER
92    (CONST&PUSH 7)                      ; -1
93    (CALL2&PUSH 13)                     ; POWER
95    (CONST&PUSH 7)                      ; -1
96    (GETVALUE&PUSH 1)                   ; N
98    (CALL2&PUSH 13)                     ; POWER
100   (CONST&PUSH 7)                      ; -1
101   (CALL2&PUSH 13)                     ; POWER
103   (GETVALUE&PUSH 1)                   ; N
105   (GETVALUE&PUSH 3)                   ; B
107   (GETVALUE&PUSH 1)                   ; N
109   (CALL2&PUSH 16)                     ; ADD
111   (GETVALUE&PUSH 5)                   ; X
113   (CALL&PUSH 3 17)                    ; LAGPOL
116   (CALL 4 12)                         ; MUL
119   L119
119   (UNBIND 6)
121   (SKIP&RET 3)
123   L123
123   (CONST&PUSH 8)                      ; 2
124   (CONST&PUSH 7)                      ; -1
125   (GETVALUE&PUSH 11)                  ; VAR
127   (CALL2&PUSH 12)                     ; MUL
129   (CALL2&PUSH 9)                      ; DIV
131   (CONST&PUSH 8)                      ; 2
132   (CONST&PUSH 7)                      ; -1
133   (CALL2&PUSH 13)                     ; POWER
135   (CALL2 13)                          ; POWER
137   (SETVALUE 5)                        ; X
139   (GETVALUE&PUSH 1)                   ; N
141   (GETVALUE&PUSH 2)                   ; A
143   (GETVALUE&PUSH 3)                   ; B
145   (GETVALUE&PUSH 5)                   ; X
147   (CALL 4 14)                         ; INTERHERMPOL
150   (JMP L119)


Disassembly of function #:|(DEFUN INTERHERMPOL (N A B ...) ...)-27|
(CONST 0) = INTERHERMPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTERHERMPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTERHERMPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTERHERMPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTERHERMPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTERHERMPOL
8     (SKIP&RET 1)


Disassembly of function INTERHERMPOL
(CONST 0) = N
(CONST 1) = A
(CONST 2) = B
(CONST 3) = X
(CONST 4) = -1
(CONST 5) = MUL
(CONST 6) = POWER
(CONST 7) = -2
(CONST 8) = HERMPOL
(CONST 9) = 1
(CONST 10) = ADD
(CONST 11) = SUB
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A N X)
writes special variable : (N)
46 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; N
3     (LOAD 6)
4     (BIND 1)                            ; A
6     (LOAD 8)
7     (BIND 2)                            ; B
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (NIL&PUSH)
13    (GETVALUE&PUSH 3)                   ; X
15    (CONST&PUSH 4)                      ; -1
16    (GETVALUE&PUSH 0)                   ; N
18    (CALL2&PUSH 5)                      ; MUL
20    (CALL2 6)                           ; POWER
22    (STORE 0)
23    (GETVALUE&PUSH 1)                   ; A
25    (GETVALUE&PUSH 0)                   ; N
27    (CALLS2&JMPIF 2 L61)                ; EQUAL
30    (GETVALUE&PUSH 2)                   ; B
32    (GETVALUE&PUSH 0)                   ; N
34    (CALLS2&JMPIFNOT 2 L68)             ; EQUAL
37    (CONST&PUSH 9)                      ; 1
38    (GETVALUE&PUSH 0)                   ; N
40    (GETVALUE&PUSH 0)                   ; N
42    (CALL2&PUSH 10)                     ; ADD
44    (CALL2 11)                          ; SUB
46    L46
46    (SETVALUE 0)                        ; N
48    (LOAD&PUSH 0)
49    (GETVALUE&PUSH 0)                   ; N
51    (GETVALUE&PUSH 3)                   ; X
53    (CALL2&PUSH 8)                      ; HERMPOL
55    (CALL2 5)                           ; MUL
57    (SKIP 1)
59    (JMP L71)
61    L61
61    (CONST&PUSH 7)                      ; -2
62    (GETVALUE&PUSH 0)                   ; N
64    (CALL2 5)                           ; MUL
66    (JMP L46)
68    L68
68    (NIL)
69    (SKIP 1)
71    L71
71    (UNBIND 4)
73    (SKIP&RET 5)


Disassembly of function #:|(DEFUN 2F1POLYS (L1 L2 N) ...)-28|
(CONST 0) = 2F1POLYS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 2F1POLYS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2F1POLYS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 2F1POLYS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 2F1POLYS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 2F1POLYS
8     (SKIP&RET 1)


Disassembly of function 2F1POLYS
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = N
(CONST 3) = L
(CONST 4) = V
(CONST 5) = ADD
(CONST 6) = 2
(CONST 7) = DIV
(CONST 8) = VFVP
(CONST 9) = ZL-ASSOC
(CONST 10) = LEGPOL
(CONST 11) = SUB
(CONST 12) = ((RAT SIMP) 1 2)
(CONST 13) = ZERP
(CONST 14) = 1
(CONST 15) = FACTORIAL
(CONST 16) = MUL
(CONST 17) = FACTF
(CONST 18) = -1
(CONST 19) = POWER
(CONST 20) = PAR
(CONST 21) = GEGENPOL
(CONST 22) = JACOBPOL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PAR V L2 L N L1)
writes special variables : (V L L1)
116 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; N
9     (NIL)
10    (BIND 3)                            ; L
12    (NIL)
13    (BIND 4)                            ; V
15    (NIL&PUSH)
16    (GETVALUE 0)                        ; L1
18    (CAR&PUSH)
19    (GETVALUE 2)                        ; N
21    (JMPIFEQ L29)
23    (GETVALUE&PUSH 0)                   ; L1
25    (CALLS2 72)                         ; REVERSE
27    (SETVALUE 0)                        ; L1
29    L29
29    (GETVALUE 0)                        ; L1
31    (CDR)
32    (CAR&PUSH)
33    (GETVALUE&PUSH 2)                   ; N
35    (CALL2&PUSH 5)                      ; ADD
37    (CONST&PUSH 6)                      ; 2
38    (CALL2&PUSH 7)                      ; DIV
40    (CALL1 8)                           ; VFVP
42    (SETVALUE 3)                        ; L
44    (CONST&PUSH 4)                      ; V
45    (GETVALUE&PUSH 3)                   ; L
47    (CALL2 9)                           ; ZL-ASSOC
49    (CDR)
50    (SETVALUE 4)                        ; V
52    (GETVALUE 0)                        ; L1
54    (CAR&PUSH)
55    (GETVALUE 0)                        ; L1
57    (CDR)
58    (CAR&PUSH)
59    (GETVALUE 1)                        ; L2
61    (CAR&PUSH)
62    (CALL 3 10)                         ; LEGPOL
65    (STORE 0)
66    (JMPIF L138)
69    (GETVALUE 1)                        ; L2
71    (CAR&PUSH)
72    (GETVALUE&PUSH 4)                   ; V
74    (CALL2&PUSH 11)                     ; SUB
76    (CONST&PUSH 12)                     ; ((RAT SIMP) 1 2)
77    (CALLS2&JMPIF 2 L147)               ; EQUAL
81    (GETVALUE&PUSH 2)                   ; N
83    (CALLSR&PUSH 0 54)                  ; -
86    (CALL1&PUSH 15)                     ; FACTORIAL
88    (CONST&PUSH 14)                     ; 1
89    (GETVALUE&PUSH 4)                   ; V
91    (CALL2&PUSH 5)                      ; ADD
93    (GETVALUE&PUSH 2)                   ; N
95    (CALLSR&PUSH 0 54)                  ; -
98    (CALL2&PUSH 17)                     ; FACTF
100   (CONST&PUSH 18)                     ; -1
101   (CALL2&PUSH 19)                     ; POWER
103   (CONST&PUSH 18)                     ; -1
104   (GETVALUE&PUSH 2)                   ; N
106   (CALL2&PUSH 16)                     ; MUL
108   (GETVALUE 1)                        ; L2
110   (CAR&PUSH)
111   (CONST&PUSH 18)                     ; -1
112   (CALL2&PUSH 5)                      ; ADD
114   (CONST&PUSH 6)                      ; 2
115   (GETVALUE&PUSH 4)                   ; V
117   (CALL2&PUSH 16)                     ; MUL
119   (GETVALUE 1)                        ; L2
121   (CAR&PUSH)
122   (CALL2&PUSH 11)                     ; SUB
124   (CONST&PUSH 14)                     ; 1
125   (CONST&PUSH 6)                      ; 2
126   (GETVALUE&PUSH 20)                  ; PAR
128   (CALL2&PUSH 16)                     ; MUL
130   (CALL2&PUSH 11)                     ; SUB
132   (CALL&PUSH 4 22)                    ; JACOBPOL
135   (CALL 3 16)                         ; MUL
138   L138
138   (SKIP 1)
140   (UNBIND 5)
142   (SKIP&RET 4)
144   L144
144   (CONST 14)                          ; 1
145   (JMP L176)
147   L147
147   (GETVALUE&PUSH 4)                   ; V
149   (CALL1&JMPIF 13 L144)               ; ZERP
152   (GETVALUE&PUSH 2)                   ; N
154   (CALLSR&PUSH 0 54)                  ; -
157   (CALL1&PUSH 15)                     ; FACTORIAL
159   (CONST&PUSH 6)                      ; 2
160   (GETVALUE&PUSH 4)                   ; V
162   (CALL2&PUSH 16)                     ; MUL
164   (GETVALUE&PUSH 2)                   ; N
166   (CALLSR&PUSH 0 54)                  ; -
169   (CALL2&PUSH 17)                     ; FACTF
171   (CONST&PUSH 18)                     ; -1
172   (CALL2&PUSH 19)                     ; POWER
174   (CALL2 16)                          ; MUL
176   L176
176   (PUSH)
177   (CONST&PUSH 18)                     ; -1
178   (GETVALUE&PUSH 2)                   ; N
180   (CALL2&PUSH 16)                     ; MUL
182   (GETVALUE&PUSH 4)                   ; V
184   (CONST&PUSH 14)                     ; 1
185   (CONST&PUSH 6)                      ; 2
186   (GETVALUE&PUSH 20)                  ; PAR
188   (CALL2&PUSH 16)                     ; MUL
190   (CALL2&PUSH 11)                     ; SUB
192   (CALL&PUSH 3 21)                    ; GEGENPOL
195   (CALL2 16)                          ; MUL
197   (JMP L138)


Disassembly of function #:|(DEFUN JACOBPOL (N A B ...) ...)-29|
(CONST 0) = JACOBPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE JACOBPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; JACOBPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; JACOBPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE JACOBPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; JACOBPOL
8     (SKIP&RET 1)


Disassembly of function JACOBPOL
(CONST 0) = N
(CONST 1) = A
(CONST 2) = B
(CONST 3) = X
(CONST 4) = (MQAPPLY)
(CONST 5) = ($%P ARRAY)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X B A N)
18 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; N
3     (LOAD 6)
4     (BIND 1)                            ; A
6     (LOAD 8)
7     (BIND 2)                            ; B
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (CONST&PUSH 4)                      ; (MQAPPLY)
13    (CONST&PUSH 5)                      ; ($%P ARRAY)
14    (GETVALUE&PUSH 0)                   ; N
16    (GETVALUE&PUSH 1)                   ; A
18    (GETVALUE&PUSH 2)                   ; B
20    (LIST&PUSH 4)
22    (GETVALUE&PUSH 3)                   ; X
24    (LIST 3)
26    (UNBIND 4)
28    (SKIP&RET 5)


Disassembly of function #:|(DEFUN GEGENPOL (N V X) ...)-30|
(CONST 0) = GEGENPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GEGENPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GEGENPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GEGENPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GEGENPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GEGENPOL
8     (SKIP&RET 1)


Disassembly of function GEGENPOL
(CONST 0) = N
(CONST 1) = V
(CONST 2) = X
(CONST 3) = 0
(CONST 4) = TCHEBYPOL
(CONST 5) = (MQAPPLY)
(CONST 6) = ($%C ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N V)
23 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (GETVALUE&PUSH 1)                   ; V
11    (JMPIFEQTO 3 L30)                   ; 0
14    (CONST&PUSH 5)                      ; (MQAPPLY)
15    (CONST&PUSH 6)                      ; ($%C ARRAY)
16    (GETVALUE&PUSH 0)                   ; N
18    (GETVALUE&PUSH 1)                   ; V
20    (LIST&PUSH 3)
22    (GETVALUE&PUSH 2)                   ; X
24    (LIST 3)
26    L26
26    (UNBIND 3)
28    (SKIP&RET 4)
30    L30
30    (GETVALUE&PUSH 0)                   ; N
32    (GETVALUE&PUSH 2)                   ; X
34    (CALL2 4)                           ; TCHEBYPOL
36    (JMP L26)


Disassembly of function #:|(DEFUN LEGENPOL (N X) ...)-31|
(CONST 0) = LEGENPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGENPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGENPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGENPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGENPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGENPOL
8     (SKIP&RET 1)


Disassembly of function LEGENPOL
(CONST 0) = N
(CONST 1) = X
(CONST 2) = (MQAPPLY)
(CONST 3) = ($%P ARRAY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (CONST&PUSH 3)                      ; ($%P ARRAY)
8     (GETVALUE&PUSH 0)                   ; N
10    (LIST&PUSH 2)
12    (GETVALUE&PUSH 1)                   ; X
14    (LIST 3)
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TCHEBYPOL (N X) ...)-32|
(CONST 0) = TCHEBYPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TCHEBYPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TCHEBYPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TCHEBYPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TCHEBYPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TCHEBYPOL
8     (SKIP&RET 1)


Disassembly of function TCHEBYPOL
(CONST 0) = N
(CONST 1) = X
(CONST 2) = (MQAPPLY)
(CONST 3) = ($%T ARRAY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (CONST&PUSH 3)                      ; ($%T ARRAY)
8     (GETVALUE&PUSH 0)                   ; N
10    (LIST&PUSH 2)
12    (GETVALUE&PUSH 1)                   ; X
14    (LIST 3)
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CREATE-ANY-POLY (L1 L2 N) ...)-33|
(CONST 0) = CREATE-ANY-POLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CREATE-ANY-POLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CREATE-ANY-POLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CREATE-ANY-POLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CREATE-ANY-POLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CREATE-ANY-POLY
8     (SKIP&RET 1)


Disassembly of function CREATE-ANY-POLY
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = N
(CONST 3) = EXP
(CONST 4) = 1
(CONST 5) = MULL
(CONST 6) = MUL
(CONST 7) = VAR
(CONST 8) = POWER
(CONST 9) = -1
(CONST 10) = FACTORIAL
(CONST 11) = ADD
(CONST 12) = SUB
(CONST 13) = INCR1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N EXP VAR L2 L1)
writes special variables : (L2 L1 N EXP)
65 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; N
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; EXP
13    (PUSH-NIL 2)
15    (CONST 4)                           ; 1
16    (STORE 5)
17    (STORE 1)
18    (STORE 0)
19    (SETVALUE 3)                        ; EXP
21    (JMP L91)
24    L24
24    (LOAD&PUSH 1)
25    (GETVALUE&PUSH 0)                   ; L1
27    (CALL1&PUSH 5)                      ; MULL
29    (CALL2 6)                           ; MUL
31    (STORE 1)
32    (LOAD&PUSH 0)
33    (GETVALUE&PUSH 1)                   ; L2
35    (CALL1&PUSH 5)                      ; MULL
37    (CALL2 6)                           ; MUL
39    (STORE 0)
40    (LOAD&PUSH 5)
41    (LOAD&PUSH 2)
42    (GETVALUE&PUSH 7)                   ; VAR
44    (GETVALUE&PUSH 3)                   ; EXP
46    (CALL2&PUSH 8)                      ; POWER
48    (LOAD&PUSH 3)
49    (CONST&PUSH 9)                      ; -1
50    (CALL2&PUSH 8)                      ; POWER
52    (GETVALUE&PUSH 3)                   ; EXP
54    (CALL1&PUSH 10)                     ; FACTORIAL
56    (CONST&PUSH 9)                      ; -1
57    (CALL2&PUSH 8)                      ; POWER
59    (CALL&PUSH 4 6)                     ; MUL
62    (CALL2 11)                          ; ADD
64    (STORE 5)
65    (GETVALUE&PUSH 2)                   ; N
67    (CONST&PUSH 4)                      ; 1
68    (CALL2 12)                          ; SUB
70    (SETVALUE 2)                        ; N
72    (GETVALUE&PUSH 3)                   ; EXP
74    (CONST&PUSH 4)                      ; 1
75    (CALL2 11)                          ; ADD
77    (SETVALUE 3)                        ; EXP
79    (GETVALUE&PUSH 0)                   ; L1
81    (CALL1 13)                          ; INCR1
83    (SETVALUE 0)                        ; L1
85    (GETVALUE&PUSH 1)                   ; L2
87    (CALL1 13)                          ; INCR1
89    (SETVALUE 1)                        ; L2
91    L91
91    (GETVALUE&PUSH 2)                   ; N
93    (CALLS2&JMPIFNOT 145 L24)           ; ZEROP
97    (LOAD 5)
98    (SKIP 2)
100   (UNBIND1)
101   (SKIP 1)
103   (UNBIND 3)
105   (SKIP&RET 4)


Disassembly of function #:|(DEFUN MULL (L) ...)-34|
(CONST 0) = MULL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULL
8     (SKIP&RET 1)


Disassembly of function MULL
(CONST 0) = L
(CONST 1) = 1
(CONST 2) = MUL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
17 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L20)
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (GETVALUE 0)                        ; L
12    (CDR&PUSH)
13    (JSR&PUSH L0)
15    (CALL2 2)                           ; MUL
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)
20    L20
20    (CONST 1)                           ; 1
21    (JMP L17)


Disassembly of function #:|(DEFUN INCR1 (L) ...)-35|
(CONST 0) = INCR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INCR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INCR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INCR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INCR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INCR1
8     (SKIP&RET 1)


Disassembly of function INCR1
(CONST 0) = L
(CONST 1) = 1
(CONST 2) = ADD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
20 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L26)
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (CONST&PUSH 1)                      ; 1
11    (CALL2&PUSH 2)                      ; ADD
13    (LIST&PUSH 1)
15    (GETVALUE 0)                        ; L
17    (CDR&PUSH)
18    (JSR&PUSH L0)
20    (CALLSR 2 34)                       ; APPEND
23    L23
23    (UNBIND1)
24    (SKIP&RET 2)
26    L26
26    (NIL)
27    (JMP L23)


Disassembly of function #:|(DEFUN DISPATCH-SPEC-SIMP (L1 L2) ...)-36|
(CONST 0) = DISPATCH-SPEC-SIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISPATCH-SPEC-SIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISPATCH-SPEC-SIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISPATCH-SPEC-SIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISPATCH-SPEC-SIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISPATCH-SPEC-SIMP
8     (SKIP&RET 1)


Disassembly of function DISPATCH-SPEC-SIMP
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = 2
(CONST 3) = SIMP2>F<2
(CONST 4) = 1
(CONST 5) = SIMP2F1
(CONST 6) = VAR
(CONST 7) = FPQFORM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR L2 L1)
43 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (PUSH-NIL 2)
8     (GETVALUE&PUSH 0)                   ; L1
10    (CALLS2&STORE 71 1)                 ; LENGTH
13    (GETVALUE&PUSH 1)                   ; L2
15    (CALLS2&STORE 71 0)                 ; LENGTH
18    (LOAD&PUSH 1)
19    (CONST&PUSH 2)                      ; 2
20    (CALLSR&JMPIFNOT 1 47 L30)          ; <
24    (LOAD&PUSH 0)
25    (CONST&PUSH 2)                      ; 2
26    (CALLSR&JMPIF 1 47 L53)             ; <
30    L30
30    (LOAD&PUSH 1)
31    (JMPIFNOTEQTO 2 L38)                ; 2
34    (LOAD&PUSH 0)
35    (JMPIFEQTO 4 L66)                   ; 1
38    L38
38    (GETVALUE&PUSH 0)                   ; L1
40    (GETVALUE&PUSH 1)                   ; L2
42    (GETVALUE&PUSH 6)                   ; VAR
44    (CALL 3 7)                          ; FPQFORM
47    (SKIP 2)
49    L49
49    (UNBIND 2)
51    (SKIP&RET 3)
53    L53
53    (GETVALUE&PUSH 0)                   ; L1
55    (GETVALUE&PUSH 1)                   ; L2
57    (LOAD&PUSH 3)
58    (LOAD&PUSH 3)
59    (CALL 4 3)                          ; SIMP2>F<2
62    (SKIP 2)
64    (JMP L49)
66    L66
66    (GETVALUE&PUSH 0)                   ; L1
68    (GETVALUE&PUSH 1)                   ; L2
70    (CALL2 5)                           ; SIMP2F1
72    (SKIP 2)
74    (JMP L49)


Disassembly of function #:|(DEFUN SIMP2>F<2 (L1 L2 LEN1 ...) ...)-37|
(CONST 0) = SIMP2>F<2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP2>F<2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP2>F<2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP2>F<2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP2>F<2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP2>F<2
8     (SKIP&RET 1)


Disassembly of function SIMP2>F<2
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = $%E
(CONST 3) = VAR
(CONST 4) = POWER
(CONST 5) = 1
(CONST 6) = BESTRIG
(CONST 7) = BINOM
(CONST 8) = CONFL
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR L2 L1)
39 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; L1
3     (LOAD 6)
4     (BIND 1)                            ; L2
6     (LOAD&PUSH 8)
7     (CALLS2&JMPIFNOT 145 L14)           ; ZEROP
10    (LOAD&PUSH 7)
11    (CALLS2&JMPIF 145 L39)              ; ZEROP
14    L14
14    (LOAD&PUSH 8)
15    (CALLS2&JMPIFNOT 145 L22)           ; ZEROP
18    (LOAD&PUSH 7)
19    (JMPIFEQTO 5 L46)                   ; 1
22    L22
22    (LOAD&PUSH 7)
23    (CALLS2&JMPIF 145 L55)              ; ZEROP
26    (GETVALUE&PUSH 0)                   ; L1
28    (GETVALUE&PUSH 1)                   ; L2
30    (GETVALUE&PUSH 3)                   ; VAR
32    (CALL 3 8)                          ; CONFL
35    L35
35    (UNBIND 2)
37    (SKIP&RET 5)
39    L39
39    (CONST&PUSH 2)                      ; $%E
40    (GETVALUE&PUSH 3)                   ; VAR
42    (CALL2 4)                           ; POWER
44    (JMP L35)
46    L46
46    (GETVALUE 1)                        ; L2
48    (CAR&PUSH)
49    (GETVALUE&PUSH 3)                   ; VAR
51    (CALL2 6)                           ; BESTRIG
53    (JMP L35)
55    L55
55    (GETVALUE 0)                        ; L1
57    (CAR&PUSH)
58    (CALL1 7)                           ; BINOM
60    (JMP L35)


Disassembly of function #:|(DEFUN BESTRIG (A X) ...)-38|
(CONST 0) = BESTRIG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESTRIG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESTRIG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESTRIG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESTRIG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESTRIG
8     (SKIP&RET 1)


Disassembly of function BESTRIG
(CONST 0) = A
(CONST 1) = X
(CONST 2) = N
(CONST 3) = RES
(CONST 4) = GM
(CONST 5) = 1
(CONST 6) = SUB
(CONST 7) = 2
(CONST 8) = DIV
(CONST 9) = POWER
(CONST 10) = MUL
(CONST 11) = ADD
(CONST 12) = MAXIMA-INTEGERP
(CONST 13) = -1
(CONST 14) = $BESTRIGLIM
(CONST 15) = $%I
(CONST 16) = BESREDTRIG
(CONST 17) = MEVAL
(CONST 18) = CHECKSIGNTM
(CONST 19) = $NEGATIVE
(CONST 20) = J
(CONST 21) = BES
(CONST 22) = I
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RES $BESTRIGLIM N X A)
writes special variables : (X N RES)
79 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (NIL)
7     (BIND 2)                            ; N
9     (NIL)
10    (BIND 3)                            ; RES
12    (GETVALUE&PUSH 0)                   ; A
14    (CALL1&PUSH 4)                      ; GM
16    (GETVALUE&PUSH 1)                   ; X
18    (CONST&PUSH 5)                      ; 1
19    (GETVALUE&PUSH 0)                   ; A
21    (CALL2&PUSH 6)                      ; SUB
23    (CONST&PUSH 7)                      ; 2
24    (CALL2&PUSH 8)                      ; DIV
26    (CALL2&PUSH 9)                      ; POWER
28    (CALL2 10)                          ; MUL
30    (SETVALUE 3)                        ; RES
32    (GETVALUE&PUSH 0)                   ; A
34    (GETVALUE&PUSH 0)                   ; A
36    (CALL2&PUSH 11)                     ; ADD
38    (CALL1&JMPIFNOT 12 L63)             ; MAXIMA-INTEGERP
41    (GETVALUE&PUSH 0)                   ; A
43    (CONST&PUSH 7)                      ; 2
44    (CONST&PUSH 13)                     ; -1
45    (CALL2&PUSH 9)                      ; POWER
47    (CALL2 6)                           ; SUB
49    (SETVALUE 2)                        ; N
51    (PUSH)
52    (CALLS2&JMPIFNOT 8 L63)             ; NUMBERP
55    (GETVALUE&PUSH 2)                   ; N
57    (GETVALUE&PUSH 14)                  ; $BESTRIGLIM
59    (CALLSR&JMPIF 1 47 L92)             ; <
63    L63
63    (GETVALUE&PUSH 1)                   ; X
65    (CALL1&PUSH 18)                     ; CHECKSIGNTM
67    (JMPIFEQTO 19 L117)                 ; $NEGATIVE
70    (GETVALUE&PUSH 3)                   ; RES
72    (GETVALUE&PUSH 0)                   ; A
74    (CONST&PUSH 5)                      ; 1
75    (CALL2&PUSH 6)                      ; SUB
77    (GETVALUE&PUSH 1)                   ; X
79    (CONST 22)                          ; I
81    L81
81    (PUSH)
82    (CALL 3 21)                         ; BES
85    L85
85    (PUSH)
86    (CALL2 10)                          ; MUL
88    (UNBIND 4)
90    (SKIP&RET 3)
92    L92
92    (GETVALUE&PUSH 3)                   ; RES
94    (GETVALUE&PUSH 2)                   ; N
96    (CALLS2&PUSH 151)                   ; 1-
98    (CONST&PUSH 7)                      ; 2
99    (CONST&PUSH 15)                     ; $%I
100   (GETVALUE&PUSH 1)                   ; X
102   (CONST&PUSH 7)                      ; 2
103   (CONST&PUSH 13)                     ; -1
104   (CALL2&PUSH 9)                      ; POWER
106   (CALL2&PUSH 9)                      ; POWER
108   (CALL&PUSH 3 10)                    ; MUL
111   (CALL2&PUSH 16)                     ; BESREDTRIG
113   (CALL1 17)                          ; MEVAL
115   (JMP L85)
117   L117
117   (GETVALUE&PUSH 3)                   ; RES
119   (GETVALUE&PUSH 0)                   ; A
121   (CONST&PUSH 5)                      ; 1
122   (CALL2&PUSH 6)                      ; SUB
124   (CONST&PUSH 13)                     ; -1
125   (GETVALUE&PUSH 1)                   ; X
127   (CALL2 10)                          ; MUL
129   (SETVALUE 1)                        ; X
131   (PUSH)
132   (CONST 20)                          ; J
133   (JMP L81)


Disassembly of function #:|(DEFUN BES (A X FLG) ...)-39|
(CONST 0) = BES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BES
8     (SKIP&RET 1)


Disassembly of function BES
(CONST 0) = A
(CONST 1) = X
(CONST 2) = (MQAPPLY)
(CONST 3) = J
(CONST 4) = ($%J ARRAY)
(CONST 5) = ($%IBES ARRAY)
(CONST 6) = 2
(CONST 7) = -1
(CONST 8) = POWER
(CONST 9) = MUL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X A)
25 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; X
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (LOAD&PUSH 8)
8     (JMPIFEQTO 3 L34)                   ; J
11    (CONST 5)                           ; ($%IBES ARRAY)
12    L12
12    (PUSH)
13    (GETVALUE&PUSH 0)                   ; A
15    (LIST&PUSH 2)
17    (CONST&PUSH 6)                      ; 2
18    (GETVALUE&PUSH 1)                   ; X
20    (CONST&PUSH 6)                      ; 2
21    (CONST&PUSH 7)                      ; -1
22    (CALL2&PUSH 8)                      ; POWER
24    (CALL2&PUSH 8)                      ; POWER
26    (CALL2&PUSH 9)                      ; MUL
28    (LIST 3)
30    (UNBIND 2)
32    (SKIP&RET 4)
34    L34
34    (CONST 4)                           ; ($%J ARRAY)
35    (JMP L12)


Disassembly of function #:|(DEFUN BESREDTRIG (N Z) ...)-40|
(CONST 0) = BESREDTRIG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESREDTRIG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESREDTRIG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESREDTRIG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESREDTRIG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESREDTRIG
8     (SKIP&RET 1)


Disassembly of function BESREDTRIG
(CONST 0) = N
(CONST 1) = Z
(CONST 2) = -1
(CONST 3) = MUL
(CONST 4) = TRIGREDMINUS
(CONST 5) = TRIGREDPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z N)
20 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (GETVALUE&PUSH 0)                   ; N
8     (CALLS2&JMPIF 147 L21)              ; MINUSP
11    (GETVALUE&PUSH 0)                   ; N
13    (GETVALUE&PUSH 1)                   ; Z
15    (CALL2 5)                           ; TRIGREDPLUS
17    L17
17    (UNBIND 2)
19    (SKIP&RET 3)
21    L21
21    (CONST&PUSH 2)                      ; -1
22    (GETVALUE&PUSH 0)                   ; N
24    (CALLS2&PUSH 150)                   ; 1+
26    (CALL2&PUSH 3)                      ; MUL
28    (GETVALUE&PUSH 1)                   ; Z
30    (CALL2 4)                           ; TRIGREDMINUS
32    (JMP L17)


Disassembly of function #:|(DEFUN TRIGREDPLUS (N Z) ...)-41|
(CONST 0) = TRIGREDPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIGREDPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGREDPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIGREDPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIGREDPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIGREDPLUS
8     (SKIP&RET 1)


Disassembly of function TRIGREDPLUS
(CONST 0) = N
(CONST 1) = Z
(CONST 2) = $%PI
(CONST 3) = 2
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = MUL
(CONST 7) = CTR
(CONST 8) = SUB
(CONST 9) = SIN%
(CONST 10) = FIRSTSUM
(CONST 11) = COS%
(CONST 12) = SECONDSUM
(CONST 13) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z N)
33 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (GETVALUE&PUSH 0)                   ; N
8     (CONST&PUSH 2)                      ; $%PI
9     (CONST&PUSH 3)                      ; 2
10    (CONST&PUSH 4)                      ; -1
11    (CALL2&PUSH 5)                      ; POWER
13    (CALL&PUSH 3 6)                     ; MUL
16    (GETVALUE&PUSH 1)                   ; Z
18    (CALL1&PUSH 7)                      ; CTR
20    (GETVALUE&PUSH 1)                   ; Z
22    (LOAD&PUSH 2)
23    (CALL2&PUSH 8)                      ; SUB
25    (CALL1&PUSH 9)                      ; SIN%
27    (GETVALUE&PUSH 0)                   ; N
29    (GETVALUE&PUSH 1)                   ; Z
31    (CALL2&PUSH 10)                     ; FIRSTSUM
33    (CALL2&PUSH 6)                      ; MUL
35    (GETVALUE&PUSH 1)                   ; Z
37    (LOAD&PUSH 3)
38    (CALL2&PUSH 8)                      ; SUB
40    (CALL1&PUSH 11)                     ; COS%
42    (GETVALUE&PUSH 0)                   ; N
44    (GETVALUE&PUSH 1)                   ; Z
46    (CALL2&PUSH 12)                     ; SECONDSUM
48    (CALL2&PUSH 6)                      ; MUL
50    (CALL2&PUSH 13)                     ; ADD
52    (CALL2 6)                           ; MUL
54    (SKIP 1)
56    (UNBIND 2)
58    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TRIGREDMINUS (N Z) ...)-42|
(CONST 0) = TRIGREDMINUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIGREDMINUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGREDMINUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIGREDMINUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIGREDMINUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIGREDMINUS
8     (SKIP&RET 1)


Disassembly of function TRIGREDMINUS
(CONST 0) = N
(CONST 1) = Z
(CONST 2) = $%PI
(CONST 3) = 2
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = MUL
(CONST 7) = CTR
(CONST 8) = ADD
(CONST 9) = COS%
(CONST 10) = FIRSTSUM
(CONST 11) = SIN%
(CONST 12) = SECONDSUM
(CONST 13) = SUB
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z N)
33 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (GETVALUE&PUSH 0)                   ; N
8     (CONST&PUSH 2)                      ; $%PI
9     (CONST&PUSH 3)                      ; 2
10    (CONST&PUSH 4)                      ; -1
11    (CALL2&PUSH 5)                      ; POWER
13    (CALL&PUSH 3 6)                     ; MUL
16    (GETVALUE&PUSH 1)                   ; Z
18    (CALL1&PUSH 7)                      ; CTR
20    (GETVALUE&PUSH 1)                   ; Z
22    (LOAD&PUSH 2)
23    (CALL2&PUSH 8)                      ; ADD
25    (CALL1&PUSH 9)                      ; COS%
27    (GETVALUE&PUSH 0)                   ; N
29    (GETVALUE&PUSH 1)                   ; Z
31    (CALL2&PUSH 10)                     ; FIRSTSUM
33    (CALL2&PUSH 6)                      ; MUL
35    (GETVALUE&PUSH 1)                   ; Z
37    (LOAD&PUSH 3)
38    (CALL2&PUSH 8)                      ; ADD
40    (CALL1&PUSH 11)                     ; SIN%
42    (GETVALUE&PUSH 0)                   ; N
44    (GETVALUE&PUSH 1)                   ; Z
46    (CALL2&PUSH 12)                     ; SECONDSUM
48    (CALL2&PUSH 6)                      ; MUL
50    (CALL2&PUSH 13)                     ; SUB
52    (CALL2 6)                           ; MUL
54    (SKIP 1)
56    (UNBIND 2)
58    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FIRSTSUM (N Z) ...)-43|
(CONST 0) = FIRSTSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIRSTSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIRSTSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIRSTSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIRSTSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIRSTSUM
8     (SKIP&RET 1)


Disassembly of function FIRSTSUM
(CONST 0) = N
(CONST 1) = Z
(CONST 2) = 2
(CONST 3) = DIV
(CONST 4) = $ENTIER
(CONST 5) = 0
(CONST 6) = 1
(CONST 7) = ADD
(CONST 8) = -1
(CONST 9) = POWER
(CONST 10) = FACTORIAL
(CONST 11) = MUL
(CONST 12) = SUB
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z N)
53 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (PUSH-NIL 4)
8     (GETVALUE&PUSH 0)                   ; N
10    (CONST&PUSH 2)                      ; 2
11    (CALL2&PUSH 3)                      ; DIV
13    (CALL1 4)                           ; $ENTIER
15    (STORE 0)
16    (CONST 5)                           ; 0
17    (STORE 3)
18    (CONST 6)                           ; 1
19    (STORE 2)
20    (JMP L70)
22    L22
22    (LOAD&INC&STORE 3)
24    (PUSH)
25    (LOAD&PUSH 4)
26    (CALL2 7)                           ; ADD
28    (STORE 1)
29    (LOAD&PUSH 2)
30    (CONST&PUSH 8)                      ; -1
31    (LOAD&PUSH 5)
32    (CALL2&PUSH 9)                      ; POWER
34    (GETVALUE&PUSH 0)                   ; N
36    (LOAD&PUSH 4)
37    (CALL2&PUSH 7)                      ; ADD
39    (CALL1&PUSH 10)                     ; FACTORIAL
41    (CALL2&PUSH 11)                     ; MUL
43    (LOAD&PUSH 3)
44    (CALL1&PUSH 10)                     ; FACTORIAL
46    (GETVALUE&PUSH 0)                   ; N
48    (LOAD&PUSH 5)
49    (CALL2&PUSH 12)                     ; SUB
51    (CALL1&PUSH 10)                     ; FACTORIAL
53    (GETVALUE&PUSH 1)                   ; Z
55    (GETVALUE&PUSH 1)                   ; Z
57    (CALL2&PUSH 7)                      ; ADD
59    (LOAD&PUSH 6)
60    (CALL2&PUSH 9)                      ; POWER
62    (CALL&PUSH 3 11)                    ; MUL
65    (CALL2&PUSH 3)                      ; DIV
67    (CALL2 7)                           ; ADD
69    (STORE 2)
70    L70
70    (LOAD&PUSH 3)
71    (LOAD 1)
72    (JMPIFNOTEQ L22)
74    (LOAD 2)
75    (SKIP 4)
77    (UNBIND 2)
79    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SECONDSUM (N Z) ...)-44|
(CONST 0) = SECONDSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SECONDSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SECONDSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SECONDSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SECONDSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SECONDSUM
8     (SKIP&RET 1)


Disassembly of function SECONDSUM
(CONST 0) = N
(CONST 1) = Z
(CONST 2) = 2
(CONST 3) = DIV
(CONST 4) = $ENTIER
(CONST 5) = 0
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = 1
(CONST 9) = ADD
(CONST 10) = FACTORIAL
(CONST 11) = MUL
(CONST 12) = SUB
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z N)
62 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (PUSH-NIL 4)
8     (GETVALUE&PUSH 0)                   ; N
10    (CALLS2&PUSH 151)                   ; 1-
12    (CONST&PUSH 2)                      ; 2
13    (CALL2&PUSH 3)                      ; DIV
15    (CALL1 4)                           ; $ENTIER
17    (STORE 0)
18    (CONST 5)                           ; 0
19    (STORE 3)
20    (GETVALUE&PUSH 1)                   ; Z
22    (CONST&PUSH 6)                      ; -1
23    (CALL2 7)                           ; POWER
25    (STORE 2)
26    (LOAD&PUSH 0)
27    (JMPIFNOTEQTO 6 L85)                ; -1
30    (CONST 5)                           ; 0
31    (SKIP 4)
33    (JMP L92)
35    L35
35    (LOAD&INC&STORE 3)
37    (PUSH)
38    (LOAD&PUSH 4)
39    (CONST&PUSH 8)                      ; 1
40    (CALL 3 9)                          ; ADD
43    (STORE 1)
44    (LOAD&PUSH 2)
45    (CONST&PUSH 6)                      ; -1
46    (LOAD&PUSH 5)
47    (CALL2&PUSH 7)                      ; POWER
49    (GETVALUE&PUSH 0)                   ; N
51    (LOAD&PUSH 4)
52    (CALL2&PUSH 9)                      ; ADD
54    (CALL1&PUSH 10)                     ; FACTORIAL
56    (CALL2&PUSH 11)                     ; MUL
58    (LOAD&PUSH 3)
59    (CALL1&PUSH 10)                     ; FACTORIAL
61    (GETVALUE&PUSH 0)                   ; N
63    (LOAD&PUSH 5)
64    (CALL2&PUSH 12)                     ; SUB
66    (CALL1&PUSH 10)                     ; FACTORIAL
68    (GETVALUE&PUSH 1)                   ; Z
70    (GETVALUE&PUSH 1)                   ; Z
72    (CALL2&PUSH 9)                      ; ADD
74    (LOAD&PUSH 6)
75    (CALL2&PUSH 7)                      ; POWER
77    (CALL&PUSH 3 11)                    ; MUL
80    (CALL2&PUSH 3)                      ; DIV
82    (CALL2 9)                           ; ADD
84    (STORE 2)
85    L85
85    (LOAD&PUSH 3)
86    (LOAD 1)
87    (JMPIFNOTEQ L35)
89    (LOAD 2)
90    (SKIP 4)
92    L92
92    (UNBIND 2)
94    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CTR (Z) ...)-45|
(CONST 0) = CTR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CTR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CTR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CTR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CTR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CTR
8     (SKIP&RET 1)


Disassembly of function CTR
(CONST 0) = Z
(CONST 1) = 2
(CONST 2) = $%PI
(CONST 3) = MUL
(CONST 4) = DIV
(CONST 5) = -1
(CONST 6) = POWER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (Z)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Z
3     (CONST&PUSH 1)                      ; 2
4     (CONST&PUSH 2)                      ; $%PI
5     (GETVALUE&PUSH 0)                   ; Z
7     (CALL2&PUSH 3)                      ; MUL
9     (CALL2&PUSH 4)                      ; DIV
11    (CONST&PUSH 1)                      ; 2
12    (CONST&PUSH 5)                      ; -1
13    (CALL2&PUSH 6)                      ; POWER
15    (CALL2 6)                           ; POWER
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NEGCOEF (X) ...)-46|
(CONST 0) = NEGCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEGCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEGCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEGCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEGCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEGCOEF
8     (SKIP&RET 1)


Disassembly of function NEGCOEF
(CONST 0) = X
(CONST 1) = D
(CONST 2) = D*U
(CONST 3) = ZL-REMPROP
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = ASKSIGN
(CONST 7) = $POSITIVE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D X)
writes special variable : (D)
26 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; D
6     (CONST&PUSH 1)                      ; D
7     (GETVALUE&PUSH 0)                   ; X
9     (CALL1&PUSH 2)                      ; D*U
11    (CALL2 3)                           ; ZL-REMPROP
13    (CDR)
14    (SETVALUE 1)                        ; D
16    (JMPIFNOT L28)
18    (GETVALUE&PUSH 1)                   ; D
20    (CONST&PUSH 4)                      ; -1
21    (CALL2&PUSH 5)                      ; POWER
23    (CALL1&PUSH 6)                      ; ASKSIGN
25    (JMPIFEQTO 7 L33)                   ; $POSITIVE
28    L28
28    (T)
29    (UNBIND1)
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (NIL)
34    (UNBIND1)
35    (JMP L30)


Disassembly of function #:|(DEFUN BINOM (A) ...)-47|
(CONST 0) = BINOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BINOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BINOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BINOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BINOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BINOM
8     (SKIP&RET 1)


Disassembly of function BINOM
(CONST 0) = A
(CONST 1) = 1
(CONST 2) = VAR
(CONST 3) = SUB
(CONST 4) = -1
(CONST 5) = MUL
(CONST 6) = POWER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A VAR)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; 1
4     (GETVALUE&PUSH 2)                   ; VAR
6     (CALL2&PUSH 3)                      ; SUB
8     (CONST&PUSH 4)                      ; -1
9     (GETVALUE&PUSH 0)                   ; A
11    (CALL2&PUSH 5)                      ; MUL
13    (CALL2 6)                           ; POWER
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN KUMMER (L1 L2) ...)-48|
(CONST 0) = KUMMER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KUMMER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KUMMER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KUMMER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KUMMER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KUMMER
8     (SKIP&RET 1)


Disassembly of function KUMMER
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = (MEXPT)
(CONST 3) = $%E
(CONST 4) = VAR
(CONST 5) = SUB
(CONST 6) = -1
(CONST 7) = MUL
(CONST 8) = CONFL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L1 L2 VAR)
22 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (CONST&PUSH 2)                      ; (MEXPT)
7     (CONST&PUSH 3)                      ; $%E
8     (GETVALUE&PUSH 4)                   ; VAR
10    (LIST&PUSH 3)
12    (GETVALUE 1)                        ; L2
14    (CAR&PUSH)
15    (GETVALUE 0)                        ; L1
17    (CAR&PUSH)
18    (CALL2&PUSH 5)                      ; SUB
20    (LIST&PUSH 1)
22    (GETVALUE&PUSH 1)                   ; L2
24    (CONST&PUSH 6)                      ; -1
25    (GETVALUE&PUSH 4)                   ; VAR
27    (CALL2&PUSH 7)                      ; MUL
29    (CALL&PUSH 3 8)                     ; CONFL
32    (CALL2 7)                           ; MUL
34    (UNBIND 2)
36    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ZEROP-IN-L (L) ...)-49|
(CONST 0) = ZEROP-IN-L
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZEROP-IN-L>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZEROP-IN-L
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZEROP-IN-L
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZEROP-IN-L>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZEROP-IN-L
8     (SKIP&RET 1)


Disassembly of function ZEROP-IN-L
(CONST 0) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
24 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L27)
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (CALLS2&JMPIFNOT 8 L19)             ; NUMBERP
13    (GETVALUE 0)                        ; L
15    (CAR&PUSH)
16    (CALLS2&JMPIF 145 L30)              ; ZEROP
19    L19
19    (GETVALUE 0)                        ; L
21    (CDR&PUSH)
22    (JSR L0)
24    L24
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (NIL)
28    (JMP L24)
30    L30
30    (T)
31    (JMP L24)


Disassembly of function #:|(DEFUN HYP-NEGP-IN-L (L) ...)-50|
(CONST 0) = HYP-NEGP-IN-L
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYP-NEGP-IN-L>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYP-NEGP-IN-L
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYP-NEGP-IN-L
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYP-NEGP-IN-L>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYP-NEGP-IN-L
8     (SKIP&RET 1)


Disassembly of function HYP-NEGP-IN-L
(CONST 0) = L
(CONST 1) = MAXIMA-INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
25 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L27)
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (CALL1&JMPIFNOT 1 L19)              ; MAXIMA-INTEGERP
13    (GETVALUE 0)                        ; L
15    (CAR&PUSH)
16    (CALLS2&JMPIF 147 L30)              ; MINUSP
19    L19
19    (GETVALUE 0)                        ; L
21    (CDR&PUSH)
22    (JSR L0)
24    L24
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (NIL)
28    (JMP L24)
30    L30
30    (GETVALUE 0)                        ; L
32    (CAR)
33    (JMP L24)


Disassembly of function #:|(DEFUN ZL-INTERSECTION (L1 L2) ...)-51|
(CONST 0) = ZL-INTERSECTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZL-INTERSECTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZL-INTERSECTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZL-INTERSECTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZL-INTERSECTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZL-INTERSECTION
8     (SKIP&RET 1)


Disassembly of function ZL-INTERSECTION
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = ZL-MEMBER
(CONST 3) = 1
(CONST 4) = ZL-DELETE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1)
34 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (GETVALUE 0)                        ; L1
8     (JMPIFNOT L29)
10    (GETVALUE 0)                        ; L1
12    (CAR&PUSH)
13    (GETVALUE&PUSH 1)                   ; L2
15    (CALL2&JMPIF 2 L32)                 ; ZL-MEMBER
18    (GETVALUE 0)                        ; L1
20    (CDR&PUSH)
21    (GETVALUE&PUSH 1)                   ; L2
23    (JSR L0)
25    L25
25    (UNBIND 2)
27    (SKIP&RET 3)
29    L29
29    (NIL)
30    (JMP L25)
32    L32
32    (GETVALUE 0)                        ; L1
34    (CAR&PUSH)
35    (GETVALUE 0)                        ; L1
37    (CDR&PUSH)
38    (GETVALUE 0)                        ; L1
40    (CAR&PUSH)
41    (GETVALUE&PUSH 1)                   ; L2
43    (CONST&PUSH 3)                      ; 1
44    (CALL&PUSH 3 4)                     ; ZL-DELETE
47    (JSR L0)
49    (CONS)
50    (JMP L25)


Disassembly of function #:|(DEFUN 2INP (L) ...)-52|
(CONST 0) = 2INP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 2INP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2INP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 2INP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 2INP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 2INP
8     (SKIP&RET 1)


Disassembly of function 2INP
(CONST 0) = L
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = MAXIMA-INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (CONST 1)                           ; 0
5     (STORE 0)
6     (GETVALUE 0)                        ; L
8     (JMPIF L38)
10    L10
10    (LOAD&PUSH 0)
11    (CONST&PUSH 2)                      ; 1
12    (CALLSR&JMPIFNOT 1 48 L38)          ; >
16    (T)
17    (SKIP 1)
19    (JMP L45)
21    L21
21    (GETVALUE 0)                        ; L
23    (CAR&PUSH)
24    (CALL1&JMPIFNOT 3 L29)              ; MAXIMA-INTEGERP
27    (LOAD&INC&STORE 0)
29    L29
29    (GETVALUE 0)                        ; L
31    (CDR)
32    (SETVALUE 0)                        ; L
34    (GETVALUE 0)                        ; L
36    (JMPIFNOT L10)
38    L38
38    (GETVALUE 0)                        ; L
40    (JMPIF L21)
42    (NIL)
43    (SKIP 1)
45    L45
45    (UNBIND1)
46    (SKIP&RET 2)


Disassembly of function #:|(DEFUN 2RATP (L) ...)-53|
(CONST 0) = 2RATP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 2RATP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2RATP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 2RATP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 2RATP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 2RATP
8     (SKIP&RET 1)


Disassembly of function 2RATP
(CONST 0) = L
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = RAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (CONST 1)                           ; 0
5     (STORE 0)
6     (GETVALUE 0)                        ; L
8     (JMPIF L40)
10    L10
10    (LOAD&PUSH 0)
11    (CONST&PUSH 2)                      ; 1
12    (CALLSR&JMPIFNOT 1 48 L40)          ; >
16    (T)
17    (SKIP 1)
19    (JMP L47)
21    L21
21    (GETVALUE 0)                        ; L
23    (CAR)
24    (CAR)
25    (CAR&PUSH)
26    (JMPIFNOTEQTO 3 L31)                ; RAT
29    (LOAD&INC&STORE 0)
31    L31
31    (GETVALUE 0)                        ; L
33    (CDR)
34    (SETVALUE 0)                        ; L
36    (GETVALUE 0)                        ; L
38    (JMPIFNOT L10)
40    L40
40    (GETVALUE 0)                        ; L
42    (JMPIF L21)
44    (NIL)
45    (SKIP 1)
47    L47
47    (UNBIND1)
48    (SKIP&RET 2)


Disassembly of function #:|(DEFUN 2NUMP (L) ...)-54|
(CONST 0) = 2NUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 2NUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2NUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 2NUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 2NUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 2NUMP
8     (SKIP&RET 1)


Disassembly of function 2NUMP
(CONST 0) = L
(CONST 1) = 0
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (CONST 1)                           ; 0
5     (STORE 0)
6     (GETVALUE 0)                        ; L
8     (JMPIF L38)
10    L10
10    (LOAD&PUSH 0)
11    (CONST&PUSH 2)                      ; 1
12    (CALLSR&JMPIFNOT 1 48 L38)          ; >
16    (T)
17    (SKIP 1)
19    (JMP L45)
21    L21
21    (GETVALUE 0)                        ; L
23    (CAR&PUSH)
24    (CALLS2&JMPIFNOT 8 L29)             ; NUMBERP
27    (LOAD&INC&STORE 0)
29    L29
29    (GETVALUE 0)                        ; L
31    (CDR)
32    (SETVALUE 0)                        ; L
34    (GETVALUE 0)                        ; L
36    (JMPIFNOT L10)
38    L38
38    (GETVALUE 0)                        ; L
40    (JMPIF L21)
42    (NIL)
43    (SKIP 1)
45    L45
45    (UNBIND1)
46    (SKIP&RET 2)


Disassembly of function #:|(DEFUN WHITFUN (K M VAR) ...)-55|
(CONST 0) = WHITFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WHITFUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WHITFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WHITFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WHITFUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WHITFUN
8     (SKIP&RET 1)


Disassembly of function WHITFUN
(CONST 0) = K
(CONST 1) = M
(CONST 2) = VAR
(CONST 3) = (MQAPPLY)
(CONST 4) = ($%M ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR M K)
15 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; K
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; VAR
9     (CONST&PUSH 3)                      ; (MQAPPLY)
10    (CONST&PUSH 4)                      ; ($%M ARRAY)
11    (GETVALUE&PUSH 0)                   ; K
13    (GETVALUE&PUSH 1)                   ; M
15    (LIST&PUSH 3)
17    (GETVALUE&PUSH 2)                   ; VAR
19    (LIST 3)
21    (UNBIND 3)
23    (SKIP&RET 4)


Disassembly of function #:|(DEFUN SIMP2F1 (L1 L2) ...)-56|
(CONST 0) = SIMP2F1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP2F1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP2F1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP2F1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP2F1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP2F1
8     (SKIP&RET 1)


Disassembly of function SIMP2F1
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = A
(CONST 3) = B
(CONST 4) = C
(CONST 5) = 1
(CONST 6) = 2
(CONST 7) = -1
(CONST 8) = VAR
(CONST 9) = MUL
(CONST 10) = POWER
(CONST 11) = ADD
(CONST 12) = $LOG
(CONST 13) = 3
(CONST 14) = DIV
(CONST 15) = TRIG-LOG
(CONST 16) = SUB
(CONST 17) = HYP-COS
(CONST 18) = MAXIMA-INTEGERP
(CONST 19) = SIMPR2F1
(CONST 20) = STEP4
(CONST 21) = STEP7
(CONST 22) = LEGFUN
(CONST 23) = SIMP2F1-WILL-CONTINUE-IN
(CONST 24) = FPQFORM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR C B A L2 L1)
writes special variables : (C B A)
148 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; B
12    (NIL)
13    (BIND 4)                            ; C
15    (NIL&PUSH)
16    (GETVALUE 0)                        ; L1
18    (CAR)
19    (SETVALUE 2)                        ; A
21    (GETVALUE 0)                        ; L1
23    (CDR)
24    (CAR)
25    (SETVALUE 3)                        ; B
27    (GETVALUE 1)                        ; L2
29    (CAR)
30    (SETVALUE 4)                        ; C
32    (GETVALUE&PUSH 2)                   ; A
34    (JMPIFNOTEQTO 5 L48)                ; 1
37    (GETVALUE&PUSH 3)                   ; B
39    (JMPIFNOTEQTO 5 L48)                ; 1
42    (GETVALUE&PUSH 4)                   ; C
44    (JMPIFEQTO 6 L217)                  ; 2
48    L48
48    (GETVALUE&PUSH 4)                   ; C
50    (CONST&PUSH 13)                     ; 3
51    (CONST&PUSH 6)                      ; 2
52    (CALL2&PUSH 14)                     ; DIV
54    (CALLS2&JMPIF 2 L66)                ; EQUAL
57    (GETVALUE&PUSH 4)                   ; C
59    (CONST&PUSH 5)                      ; 1
60    (CONST&PUSH 6)                      ; 2
61    (CALL2&PUSH 14)                     ; DIV
63    (CALLS2&JMPIFNOT 2 L82)             ; EQUAL
66    L66
66    (GETVALUE&PUSH 2)                   ; A
68    (GETVALUE&PUSH 3)                   ; B
70    (LIST&PUSH 2)
72    (GETVALUE&PUSH 4)                   ; C
74    (LIST&PUSH 1)
76    (CALL2 15)                          ; TRIG-LOG
78    (STORE 0)
79    (JMPIF L211)
82    L82
82    (GETVALUE&PUSH 2)                   ; A
84    (GETVALUE&PUSH 3)                   ; B
86    (CALL2&PUSH 16)                     ; SUB
88    (CONST&PUSH 5)                      ; 1
89    (CONST&PUSH 6)                      ; 2
90    (CALL2&PUSH 14)                     ; DIV
92    (CALLS2&JMPIF 2 L108)               ; EQUAL
95    (GETVALUE&PUSH 3)                   ; B
97    (GETVALUE&PUSH 2)                   ; A
99    (CALL2&PUSH 16)                     ; SUB
101   (CONST&PUSH 5)                      ; 1
102   (CONST&PUSH 6)                      ; 2
103   (CALL2&PUSH 14)                     ; DIV
105   (CALLS2&JMPIFNOT 2 L121)            ; EQUAL
108   L108
108   (GETVALUE&PUSH 2)                   ; A
110   (GETVALUE&PUSH 3)                   ; B
112   (GETVALUE&PUSH 4)                   ; C
114   (CALL 3 17)                         ; HYP-COS
117   (STORE 0)
118   (JMPIF L211)
121   L121
121   (GETVALUE&PUSH 2)                   ; A
123   (CALL1&JMPIFNOT 18 L137)            ; MAXIMA-INTEGERP
126   (GETVALUE&PUSH 3)                   ; B
128   (CALL1&JMPIFNOT 18 L137)            ; MAXIMA-INTEGERP
131   (GETVALUE&PUSH 4)                   ; C
133   (CALL1&JMPIF 18 L239)               ; MAXIMA-INTEGERP
137   L137
137   (GETVALUE&PUSH 4)                   ; C
139   (CONST&PUSH 6)                      ; 2
140   (CONST&PUSH 7)                      ; -1
141   (CALL2&PUSH 10)                     ; POWER
143   (CALL2&PUSH 11)                     ; ADD
145   (CALL1&JMPIFNOT 18 L158)            ; MAXIMA-INTEGERP
148   (GETVALUE&PUSH 2)                   ; A
150   (GETVALUE&PUSH 3)                   ; B
152   (CALL2&PUSH 11)                     ; ADD
154   (CALL1&JMPIF 18 L253)               ; MAXIMA-INTEGERP
158   L158
158   (GETVALUE&PUSH 2)                   ; A
160   (GETVALUE&PUSH 3)                   ; B
162   (CALL2&PUSH 16)                     ; SUB
164   (CONST&PUSH 6)                      ; 2
165   (CONST&PUSH 7)                      ; -1
166   (CALL2&PUSH 10)                     ; POWER
168   (CALL2&PUSH 11)                     ; ADD
170   (CALL1&JMPIFNOT 18 L185)            ; MAXIMA-INTEGERP
173   (GETVALUE&PUSH 2)                   ; A
175   (GETVALUE&PUSH 3)                   ; B
177   (GETVALUE&PUSH 4)                   ; C
179   (CALL 3 21)                         ; STEP7
182   (STORE 0)
183   (JMPIF L211)
185   L185
185   (GETVALUE&PUSH 2)                   ; A
187   (GETVALUE&PUSH 3)                   ; B
189   (GETVALUE&PUSH 4)                   ; C
191   (CALL 3 22)                         ; LEGFUN
194   (STORE 0)
195   (JMPIF L211)
197   (CONST&PUSH 23)                     ; SIMP2F1-WILL-CONTINUE-IN
198   (PUSH-UNBOUND 1)
200   (CALLS1 130)                        ; PRINT
202   (GETVALUE&PUSH 0)                   ; L1
204   (GETVALUE&PUSH 1)                   ; L2
206   (GETVALUE&PUSH 8)                   ; VAR
208   (CALL 3 24)                         ; FPQFORM
211   L211
211   (SKIP 1)
213   (UNBIND 5)
215   (SKIP&RET 3)
217   L217
217   (CONST&PUSH 7)                      ; -1
218   (GETVALUE&PUSH 8)                   ; VAR
220   (CALL2&PUSH 9)                      ; MUL
222   (CONST&PUSH 7)                      ; -1
223   (CALL2&PUSH 10)                     ; POWER
225   (CONST&PUSH 5)                      ; 1
226   (CONST&PUSH 7)                      ; -1
227   (GETVALUE&PUSH 8)                   ; VAR
229   (CALL2&PUSH 9)                      ; MUL
231   (CALL2&PUSH 11)                     ; ADD
233   (CALL1&PUSH 12)                     ; $LOG
235   (CALL2 9)                           ; MUL
237   (JMP L211)
239   L239
239   (GETVALUE&PUSH 2)                   ; A
241   (GETVALUE&PUSH 3)                   ; B
243   (LIST&PUSH 2)
245   (GETVALUE&PUSH 4)                   ; C
247   (LIST&PUSH 1)
249   (CALL2 19)                          ; SIMPR2F1
251   (JMP L211)
253   L253
253   (GETVALUE&PUSH 2)                   ; A
255   (GETVALUE&PUSH 3)                   ; B
257   (GETVALUE&PUSH 4)                   ; C
259   (CALL 3 20)                         ; STEP4
262   (JMP L211)


Disassembly of function #:|(DEFUN STEP7 (A B C) ...)-57|
(CONST 0) = STEP7
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STEP7>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STEP7
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STEP7
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STEP7>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STEP7
8     (SKIP&RET 1)


Disassembly of function STEP7
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = L
(CONST 4) = M
(CONST 5) = N
(CONST 6) = K
(CONST 7) = R
(CONST 8) = S+C
(CONST 9) = F
(CONST 10) = CDRAS
(CONST 11) = 2
(CONST 12) = MUL
(CONST 13) = -1
(CONST 14) = POWER
(CONST 15) = ADD
(CONST 16) = SUB
(CONST 17) = $NUM
(CONST 18) = $DENOM
(CONST 19) = QUOT
(CONST 20) = MAXIMA-INTEGERP
(CONST 21) = HYP-ALGV
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M K N B C L A)
writes special variables : (K N M R L)
133 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; L
12    (NIL)
13    (BIND 4)                            ; M
15    (NIL)
16    (BIND 5)                            ; N
18    (NIL)
19    (BIND 6)                            ; K
21    (PUSH-NIL 4)
23    (NIL)
24    (BIND 7)                            ; R
26    (GETVALUE&PUSH 0)                   ; A
28    (CALL1 8)                           ; S+C
30    (SETVALUE 3)                        ; L
32    (CONST&PUSH 9)                      ; F
33    (GETVALUE&PUSH 3)                   ; L
35    (CALL2 10)                          ; CDRAS
37    (STORE 4)
38    (CONST&PUSH 2)                      ; C
39    (GETVALUE&PUSH 3)                   ; L
41    (CALL2 10)                          ; CDRAS
43    (STORE 6)
44    (GETVALUE&PUSH 2)                   ; C
46    (CALL1 8)                           ; S+C
48    (SETVALUE 3)                        ; L
50    (CONST&PUSH 9)                      ; F
51    (GETVALUE&PUSH 3)                   ; L
53    (CALL2 10)                          ; CDRAS
55    (STORE 3)
56    (LOAD&PUSH 4)
57    (CONST&PUSH 11)                     ; 2
58    (CALL2&PUSH 12)                     ; MUL
60    (LOAD&PUSH 4)
61    (CALLS2&JMPIFNOT 2 L194)            ; EQUAL
65    (CONST&PUSH 2)                      ; C
66    (GETVALUE&PUSH 3)                   ; L
68    (CALL2 10)                          ; CDRAS
70    (STORE 5)
71    (GETVALUE&PUSH 1)                   ; B
73    (CALL1 8)                           ; S+C
75    (SETVALUE 3)                        ; L
77    (CONST&PUSH 11)                     ; 2
78    (CONST&PUSH 13)                     ; -1
79    (CALL2&PUSH 14)                     ; POWER
81    (CONST&PUSH 2)                      ; C
82    (GETVALUE&PUSH 3)                   ; L
84    (CALL2&PUSH 10)                     ; CDRAS
86    (CALL2&PUSH 15)                     ; ADD
88    (LOAD&PUSH 7)
89    (CALL2 16)                          ; SUB
91    (SETVALUE 7)                        ; R
93    (LOAD&PUSH 6)
94    (CALL1 17)                          ; $NUM
96    (SETVALUE 4)                        ; M
98    (LOAD&PUSH 6)
99    (CALL1 18)                          ; $DENOM
101   (SETVALUE 5)                        ; N
103   (LOAD&PUSH 5)
104   (CALL1 17)                          ; $NUM
106   (SETVALUE 6)                        ; K
108   (LOAD&PUSH 5)
109   (CALL1 18)                          ; $DENOM
111   (SETVALUE 3)                        ; L
113   (CONST&PUSH 11)                     ; 2
114   (GETVALUE&PUSH 3)                   ; L
116   (CALLSR&PUSH 2 55)                  ; *
119   (GETVALUE&PUSH 5)                   ; N
121   (CALLS2&JMPIFNOT 2 L139)            ; EQUAL
124   (GETVALUE&PUSH 6)                   ; K
126   (GETVALUE&PUSH 4)                   ; M
128   (CALLSR&PUSH 1 54)                  ; -
131   (GETVALUE&PUSH 5)                   ; N
133   (CALL2&PUSH 19)                     ; QUOT
135   (CALL1&JMPIF 20 L212)               ; MAXIMA-INTEGERP
139   L139
139   (GETVALUE&PUSH 6)                   ; K
141   (CONST&PUSH 11)                     ; 2
142   (GETVALUE&PUSH 3)                   ; L
144   (CALLSR&PUSH 2 55)                  ; *
147   (CALL2&PUSH 19)                     ; QUOT
149   (CALL1&JMPIF 20 L204)               ; MAXIMA-INTEGERP
152   (GETVALUE&PUSH 4)                   ; M
154   (GETVALUE&PUSH 5)                   ; N
156   (CALL2&PUSH 19)                     ; QUOT
158   (CALL1&JMPIF 20 L194)               ; MAXIMA-INTEGERP
161   (GETVALUE&PUSH 6)                   ; K
163   (GETVALUE&PUSH 5)                   ; N
165   (CALLSR&PUSH 2 55)                  ; *
168   (CONST&PUSH 11)                     ; 2
169   (GETVALUE&PUSH 3)                   ; L
171   (GETVALUE&PUSH 4)                   ; M
173   (CALLSR&PUSH 3 55)                  ; *
176   (CALLSR&PUSH 1 54)                  ; -
179   (CONST&PUSH 11)                     ; 2
180   (GETVALUE&PUSH 3)                   ; L
182   (GETVALUE&PUSH 5)                   ; N
184   (CALLSR&PUSH 3 55)                  ; *
187   (CALLSR 1 56)                       ; /
190   L190
190   (PUSH)
191   (CALL1&JMPIF 20 L212)               ; MAXIMA-INTEGERP
194   L194
194   (NIL)
195   (UNBIND1)
196   (SKIP 4)
198   (UNBIND 4)
200   L200
200   (UNBIND 3)
202   (SKIP&RET 4)
204   L204
204   (GETVALUE&PUSH 4)                   ; M
206   (GETVALUE&PUSH 5)                   ; N
208   (CALL2 19)                          ; QUOT
210   (JMP L190)
212   L212
212   (GETVALUE&PUSH 6)                   ; K
214   (GETVALUE&PUSH 3)                   ; L
216   (GETVALUE&PUSH 4)                   ; M
218   (GETVALUE&PUSH 5)                   ; N
220   (GETVALUE&PUSH 0)                   ; A
222   (GETVALUE&PUSH 1)                   ; B
224   (GETVALUE&PUSH 2)                   ; C
226   (CALL 7 21)                         ; HYP-ALGV
229   (UNBIND1)
230   (SKIP 4)
232   (UNBIND 4)
234   (JMP L200)


Disassembly of function #:|(DEFUN GETXY (K L M ...) ...)-58|
(CONST 0) = GETXY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETXY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETXY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETXY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETXY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETXY
8     (SKIP&RET 1)


Disassembly of function GETXY
(CONST 0) = K
(CONST 1) = L
(CONST 2) = M
(CONST 3) = N
(CONST 4) = X
(CONST 5) = Y
(CONST 6) = 0
(CONST 7) = QUOT
(CONST 8) = -2
(CONST 9) = 2
(CONST 10) = MAXIMA-INTEGERP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N M L K Y)
writes special variables : (X Y)
41 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; K
3     (LOAD 6)
4     (BIND 1)                            ; L
6     (LOAD 8)
7     (BIND 2)                            ; M
9     (LOAD 10)
10    (BIND 3)                            ; N
12    (NIL)
13    (BIND 4)                            ; X
15    (NIL)
16    (BIND 5)                            ; Y
18    (CONST 6)                           ; 0
19    (SETVALUE 5)                        ; Y
21    (JMP L31)
23    L23
23    (CONST&PUSH 9)                      ; 2
24    (GETVALUE&PUSH 5)                   ; Y
26    (CALLSR 2 53)                       ; +
29    (SETVALUE 5)                        ; Y
31    L31
31    (GETVALUE&PUSH 5)                   ; Y
33    (GETVALUE&PUSH 0)                   ; K
35    (GETVALUE&PUSH 1)                   ; L
37    (CALL2&PUSH 7)                      ; QUOT
39    (CONST&PUSH 8)                      ; -2
40    (GETVALUE&PUSH 2)                   ; M
42    (GETVALUE&PUSH 3)                   ; N
44    (CALL2&PUSH 7)                      ; QUOT
46    (CALLSR&PUSH 2 55)                  ; *
49    (CALLSR&PUSH 3 53)                  ; +
52    (CONST&PUSH 9)                      ; 2
53    (CALL2 7)                           ; QUOT
55    (SETVALUE 4)                        ; X
57    (PUSH)
58    (CALL1&JMPIFNOT 10 L23)             ; MAXIMA-INTEGERP
61    (GETVALUE&PUSH 4)                   ; X
63    (GETVALUE&PUSH 5)                   ; Y
65    (LIST 2)
67    (UNBIND 6)
69    (SKIP&RET 5)


Disassembly of function #:|(DEFUN HYP-ALGV (K L M ...) ...)-59|
(CONST 0) = HYP-ALGV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYP-ALGV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYP-ALGV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYP-ALGV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYP-ALGV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYP-ALGV
8     (SKIP&RET 1)


Disassembly of function HYP-ALGV
(CONST 0) = K
(CONST 1) = L
(CONST 2) = M
(CONST 3) = N
(CONST 4) = A
(CONST 5) = B
(CONST 6) = C
(CONST 7) = X
(CONST 8) = Y
(CONST 9) = GETXY
(CONST 10) = 0
(CONST 11) = 2
(CONST 12) = -1
(CONST 13) = POWER
(CONST 14) = FUN
(CONST 15) = F88
(CONST 16) = F87
(CONST 17) = F90
(CONST 18) = F89
(CONST 19) = W
(CONST 20) = F92
(CONST 21) = F91
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN C Y W X N M L K B A)
writes special variables : (W Y X)
117 byte-code instructions:
0     (LOAD 7)
1     (BIND 0)                            ; K
3     (LOAD 9)
4     (BIND 1)                            ; L
6     (LOAD 11)
7     (BIND 2)                            ; M
9     (LOAD 13)
10    (BIND 3)                            ; N
12    (LOAD 15)
14    (BIND 4)                            ; A
16    (LOAD 17)
18    (BIND 5)                            ; B
20    (LOAD 19)
22    (BIND 6)                            ; C
24    (NIL)
25    (BIND 7)                            ; X
27    (NIL)
28    (BIND 8)                            ; Y
30    (PUSH-NIL 2)
32    (GETVALUE&PUSH 4)                   ; A
34    (GETVALUE&PUSH 5)                   ; B
36    (CALLSR&STORE 1 54 0)               ; -
40    (GETVALUE&PUSH 0)                   ; K
42    (GETVALUE&PUSH 1)                   ; L
44    (GETVALUE&PUSH 2)                   ; M
46    (GETVALUE&PUSH 3)                   ; N
48    (CALL 4 9)                          ; GETXY
51    (STORE 1)
52    (CAR)
53    (SETVALUE 7)                        ; X
55    (LOAD 1)
56    (CDR)
57    (SETVALUE 8)                        ; Y
59    (GETVALUE&PUSH 7)                   ; X
61    (CONST&PUSH 10)                     ; 0
62    (CALLSR&JMPIFNOT 1 47 L173)         ; <
67    (GETVALUE&PUSH 7)                   ; X
69    (CALLSR 0 54)                       ; -
72    (SETVALUE 19)                       ; W
74    (LOAD&PUSH 0)
75    (CONST&PUSH 11)                     ; 2
76    (CONST&PUSH 12)                     ; -1
77    (CALL2&PUSH 13)                     ; POWER
79    (CALLSR&PUSH 2 53)                  ; +
82    (GETVALUE&PUSH 19)                  ; W
84    (CALLSR&PUSH 1 54)                  ; -
87    (CONST&PUSH 10)                     ; 0
88    (CALLSR&JMPIF 1 47 L212)            ; <
93    (GETVALUE&PUSH 7)                   ; X
95    (GETVALUE&PUSH 8)                   ; Y
97    (GETVALUE&PUSH 4)                   ; A
99    (GETVALUE&PUSH 6)                   ; C
101   (GETVALUE&PUSH 14)                  ; FUN
103   (CALL 5 21)                         ; F91
106   L106
106   (SKIP 2)
108   (UNBIND 9)
110   (SKIP&RET 8)
112   L112
112   (GETVALUE&PUSH 7)                   ; X
114   (GETVALUE&PUSH 8)                   ; Y
116   (GETVALUE&PUSH 4)                   ; A
118   (GETVALUE&PUSH 6)                   ; C
120   (GETVALUE&PUSH 14)                  ; FUN
122   (CALL 5 15)                         ; F88
125   (JMP L106)
127   L127
127   (LOAD&PUSH 0)
128   (GETVALUE&PUSH 7)                   ; X
130   (CONST&PUSH 11)                     ; 2
131   (CONST&PUSH 12)                     ; -1
132   (CALL2&PUSH 13)                     ; POWER
134   (CALLSR&PUSH 3 53)                  ; +
137   (CONST&PUSH 10)                     ; 0
138   (CALLSR&JMPIF 1 47 L112)            ; <
142   (GETVALUE&PUSH 7)                   ; X
144   (GETVALUE&PUSH 8)                   ; Y
146   (GETVALUE&PUSH 4)                   ; A
148   (GETVALUE&PUSH 6)                   ; C
150   (GETVALUE&PUSH 14)                  ; FUN
152   (CALL 5 16)                         ; F87
155   (JMP L106)
157   L157
157   (GETVALUE&PUSH 7)                   ; X
159   (GETVALUE&PUSH 8)                   ; Y
161   (GETVALUE&PUSH 4)                   ; A
163   (GETVALUE&PUSH 6)                   ; C
165   (GETVALUE&PUSH 14)                  ; FUN
167   (CALL 5 17)                         ; F90
170   (JMP L106)
173   L173
173   (GETVALUE&PUSH 7)                   ; X
175   (GETVALUE&PUSH 8)                   ; Y
177   (CALLSR&JMPIF 1 47 L127)            ; <
181   (LOAD&PUSH 0)
182   (GETVALUE&PUSH 7)                   ; X
184   (CONST&PUSH 11)                     ; 2
185   (CONST&PUSH 12)                     ; -1
186   (CALL2&PUSH 13)                     ; POWER
188   (CALLSR&PUSH 3 53)                  ; +
191   (CONST&PUSH 10)                     ; 0
192   (CALLSR&JMPIF 1 47 L157)            ; <
196   (GETVALUE&PUSH 7)                   ; X
198   (GETVALUE&PUSH 8)                   ; Y
200   (GETVALUE&PUSH 4)                   ; A
202   (GETVALUE&PUSH 6)                   ; C
204   (GETVALUE&PUSH 14)                  ; FUN
206   (CALL 5 18)                         ; F89
209   (JMP L106)
212   L212
212   (GETVALUE&PUSH 7)                   ; X
214   (GETVALUE&PUSH 8)                   ; Y
216   (GETVALUE&PUSH 4)                   ; A
218   (GETVALUE&PUSH 6)                   ; C
220   (GETVALUE&PUSH 14)                  ; FUN
222   (CALL 5 20)                         ; F92
225   (JMP L106)


Disassembly of function #:|(DEFUN F87 (X Y A ...) ...)-60|
(CONST 0) = F87
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F87>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F87
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F87
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F87>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F87
8     (SKIP&RET 1)


Disassembly of function F87
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = A
(CONST 3) = C
(CONST 4) = FUN
(CONST 5) = FACTF
(CONST 6) = ADD
(CONST 7) = SUB
(CONST 8) = 2
(CONST 9) = -1
(CONST 10) = POWER
(CONST 11) = MUL
(CONST 12) = ELL
(CONST 13) = 1
(CONST 14) = $DIFF
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN X A Y C)
132 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; X
3     (LOAD 7)
4     (BIND 1)                            ; Y
6     (LOAD 9)
7     (BIND 2)                            ; A
9     (LOAD 11)
10    (BIND 3)                            ; C
12    (LOAD 13)
13    (BIND 4)                            ; FUN
15    (GETVALUE&PUSH 3)                   ; C
17    (GETVALUE&PUSH 1)                   ; Y
19    (CALL2&PUSH 5)                      ; FACTF
21    (GETVALUE&PUSH 3)                   ; C
23    (GETVALUE&PUSH 1)                   ; Y
25    (CALL2&PUSH 6)                      ; ADD
27    (GETVALUE&PUSH 2)                   ; A
29    (GETVALUE&PUSH 0)                   ; X
31    (CALL2&PUSH 6)                      ; ADD
33    (CALL2&PUSH 7)                      ; SUB
35    (GETVALUE&PUSH 0)                   ; X
37    (GETVALUE&PUSH 1)                   ; Y
39    (CALLSR&PUSH 1 54)                  ; -
42    (CALL2&PUSH 5)                      ; FACTF
44    (GETVALUE&PUSH 3)                   ; C
46    (GETVALUE&PUSH 1)                   ; Y
48    (CALL2&PUSH 6)                      ; ADD
50    (GETVALUE&PUSH 2)                   ; A
52    (GETVALUE&PUSH 0)                   ; X
54    (CONST&PUSH 8)                      ; 2
55    (CONST&PUSH 9)                      ; -1
56    (CALL2&PUSH 10)                     ; POWER
58    (CALL&PUSH 3 6)                     ; ADD
61    (CALL2&PUSH 7)                      ; SUB
63    (GETVALUE&PUSH 2)                   ; A
65    (GETVALUE&PUSH 0)                   ; X
67    (CONST&PUSH 8)                      ; 2
68    (CONST&PUSH 9)                      ; -1
69    (CALL2&PUSH 10)                     ; POWER
71    (CALL&PUSH 3 6)                     ; ADD
74    (GETVALUE&PUSH 2)                   ; A
76    (CONST&PUSH 8)                      ; 2
77    (CONST&PUSH 9)                      ; -1
78    (CALL2&PUSH 10)                     ; POWER
80    (CALL2&PUSH 6)                      ; ADD
82    (CALL2&PUSH 7)                      ; SUB
84    (CALL2&PUSH 5)                      ; FACTF
86    (CALL&PUSH 3 11)                    ; MUL
89    (CONST&PUSH 9)                      ; -1
90    (CALL2&PUSH 10)                     ; POWER
92    (CONST&PUSH 12)                     ; ELL
93    (CONST&PUSH 13)                     ; 1
94    (GETVALUE&PUSH 3)                   ; C
96    (CALL2&PUSH 7)                      ; SUB
98    (CALL2&PUSH 10)                     ; POWER
100   (CONST&PUSH 13)                     ; 1
101   (CONST&PUSH 12)                     ; ELL
102   (CALL2&PUSH 7)                      ; SUB
104   (GETVALUE&PUSH 1)                   ; Y
106   (GETVALUE&PUSH 3)                   ; C
108   (CALL2&PUSH 6)                      ; ADD
110   (GETVALUE&PUSH 2)                   ; A
112   (CONST&PUSH 8)                      ; 2
113   (CONST&PUSH 9)                      ; -1
114   (CALL2&PUSH 10)                     ; POWER
116   (CALL2&PUSH 6)                      ; ADD
118   (CALL2&PUSH 7)                      ; SUB
120   (CALL2&PUSH 10)                     ; POWER
122   (CONST&PUSH 12)                     ; ELL
123   (GETVALUE&PUSH 2)                   ; A
125   (GETVALUE&PUSH 0)                   ; X
127   (CALL2&PUSH 6)                      ; ADD
129   (CALL2&PUSH 10)                     ; POWER
131   (CONST&PUSH 13)                     ; 1
132   (CONST&PUSH 12)                     ; ELL
133   (CALL2&PUSH 7)                      ; SUB
135   (CONST&PUSH 9)                      ; -1
136   (GETVALUE&PUSH 2)                   ; A
138   (CALL2&PUSH 11)                     ; MUL
140   (CALL2&PUSH 10)                     ; POWER
142   (CONST&PUSH 12)                     ; ELL
143   (CONST&PUSH 8)                      ; 2
144   (CONST&PUSH 9)                      ; -1
145   (CALL2&PUSH 10)                     ; POWER
147   (GETVALUE&PUSH 0)                   ; X
149   (CALL2&PUSH 6)                      ; ADD
151   (GETVALUE&PUSH 1)                   ; Y
153   (CALL2&PUSH 7)                      ; SUB
155   (CALL2&PUSH 10)                     ; POWER
157   (CONST&PUSH 12)                     ; ELL
158   (GETVALUE&PUSH 3)                   ; C
160   (GETVALUE&PUSH 1)                   ; Y
162   (CALL2&PUSH 6)                      ; ADD
164   (CONST&PUSH 13)                     ; 1
165   (CALL2&PUSH 7)                      ; SUB
167   (CALL2&PUSH 10)                     ; POWER
169   (CONST&PUSH 13)                     ; 1
170   (CONST&PUSH 12)                     ; ELL
171   (CALL2&PUSH 7)                      ; SUB
173   (CONST&PUSH 8)                      ; 2
174   (CONST&PUSH 9)                      ; -1
175   (CALL2&PUSH 10)                     ; POWER
177   (CONST&PUSH 8)                      ; 2
178   (GETVALUE&PUSH 2)                   ; A
180   (CALL2&PUSH 11)                     ; MUL
182   (CONST&PUSH 8)                      ; 2
183   (GETVALUE&PUSH 0)                   ; X
185   (CALLSR&PUSH 2 55)                  ; *
188   (CALL&PUSH 3 6)                     ; ADD
191   (GETVALUE&PUSH 3)                   ; C
193   (GETVALUE&PUSH 1)                   ; Y
195   (CALL2&PUSH 6)                      ; ADD
197   (CALL2&PUSH 7)                      ; SUB
199   (CALL2&PUSH 10)                     ; POWER
201   (GETVALUE&PUSH 4)                   ; FUN
203   (CALL&PUSH 3 11)                    ; MUL
206   (CONST&PUSH 12)                     ; ELL
207   (GETVALUE&PUSH 0)                   ; X
209   (CALL&PUSH 3 14)                    ; $DIFF
212   (CALL2&PUSH 11)                     ; MUL
214   (CONST&PUSH 12)                     ; ELL
215   (GETVALUE&PUSH 0)                   ; X
217   (GETVALUE&PUSH 1)                   ; Y
219   (CALLSR&PUSH 1 54)                  ; -
222   (CALL&PUSH 3 14)                    ; $DIFF
225   (CALL&PUSH 3 11)                    ; MUL
228   (CONST&PUSH 12)                     ; ELL
229   (GETVALUE&PUSH 1)                   ; Y
231   (CALL&PUSH 3 14)                    ; $DIFF
234   (CALL 4 11)                         ; MUL
237   (UNBIND 5)
239   (SKIP&RET 6)

WARNING in F88 in lines 633..650 :
SUB was called with 1 arguments, but it requires 2 arguments.

Disassembly of function #:|(DEFUN F88 (X Y A ...) ...)-61|
(CONST 0) = F88
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F88>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F88
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F88
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F88>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F88
8     (SKIP&RET 1)


Disassembly of function F88
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = A
(CONST 3) = C
(CONST 4) = FUN
(CONST 5) = FACTF
(CONST 6) = ADD
(CONST 7) = SUB
(CONST 8) = 2
(CONST 9) = -1
(CONST 10) = POWER
(CONST 11) = B
(CONST 12) = MUL
(CONST 13) = ELL
(CONST 14) = 1
(CONST 15) = $DIFF
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN B X A Y C)
129 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; X
3     (LOAD 7)
4     (BIND 1)                            ; Y
6     (LOAD 9)
7     (BIND 2)                            ; A
9     (LOAD 11)
10    (BIND 3)                            ; C
12    (LOAD 13)
13    (BIND 4)                            ; FUN
15    (GETVALUE&PUSH 3)                   ; C
17    (GETVALUE&PUSH 1)                   ; Y
19    (CALL2&PUSH 5)                      ; FACTF
21    (GETVALUE&PUSH 3)                   ; C
23    (GETVALUE&PUSH 1)                   ; Y
25    (CALL2&PUSH 6)                      ; ADD
27    (GETVALUE&PUSH 2)                   ; A
29    (GETVALUE&PUSH 0)                   ; X
31    (CALL2&PUSH 6)                      ; ADD
33    (CALL2&PUSH 7)                      ; SUB
35    (GETVALUE&PUSH 0)                   ; X
37    (GETVALUE&PUSH 1)                   ; Y
39    (CALLSR&PUSH 1 54)                  ; -
42    (CALL2&PUSH 5)                      ; FACTF
44    (GETVALUE&PUSH 2)                   ; A
46    (CONST&PUSH 8)                      ; 2
47    (CONST&PUSH 9)                      ; -1
48    (CALL2&PUSH 10)                     ; POWER
50    (GETVALUE&PUSH 0)                   ; X
52    (CALL&PUSH 3 6)                     ; ADD
55    (GETVALUE&PUSH 11)                  ; B
57    (GETVALUE&PUSH 0)                   ; X
59    (GETVALUE&PUSH 2)                   ; A
61    (CONST&PUSH 8)                      ; 2
62    (CONST&PUSH 9)                      ; -1
63    (CALL2&PUSH 10)                     ; POWER
65    (CALL2&PUSH 7)                      ; SUB
67    (CALL2&PUSH 7)                      ; SUB
69    (CALL2&PUSH 7)                      ; SUB
71    (CALL2&PUSH 5)                      ; FACTF
73    (CALL&PUSH 3 12)                    ; MUL
76    (CONST&PUSH 9)                      ; -1
77    (CALL2&PUSH 10)                     ; POWER
79    (CONST&PUSH 13)                     ; ELL
80    (CONST&PUSH 14)                     ; 1
81    (GETVALUE&PUSH 3)                   ; C
83    (CALL2&PUSH 7)                      ; SUB
85    (CALL2&PUSH 10)                     ; POWER
87    (CONST&PUSH 14)                     ; 1
88    (CONST&PUSH 13)                     ; ELL
89    (CALL2&PUSH 7)                      ; SUB
91    (GETVALUE&PUSH 1)                   ; Y
93    (GETVALUE&PUSH 3)                   ; C
95    (CALL2&PUSH 6)                      ; ADD
97    (GETVALUE&PUSH 2)                   ; A
99    (CONST&PUSH 8)                      ; 2
100   (CONST&PUSH 9)                      ; -1
101   (CALL2&PUSH 10)                     ; POWER
103   (CALL2&PUSH 6)                      ; ADD
105   (CALL2&PUSH 7)                      ; SUB
107   (CALL2&PUSH 10)                     ; POWER
109   (CONST&PUSH 13)                     ; ELL
110   (GETVALUE&PUSH 2)                   ; A
112   (GETVALUE&PUSH 0)                   ; X
114   (CALL2&PUSH 6)                      ; ADD
116   (CALL2&PUSH 10)                     ; POWER
118   (CONST&PUSH 14)                     ; 1
119   (CONST&PUSH 13)                     ; ELL
120   (CALL2&PUSH 7)                      ; SUB
122   (CONST&PUSH 9)                      ; -1
123   (GETVALUE&PUSH 2)                   ; A
125   (CALL2&PUSH 12)                     ; MUL
127   (CALL2&PUSH 10)                     ; POWER
129   (CONST&PUSH 13)                     ; ELL
130   (GETVALUE&PUSH 3)                   ; C
132   (GETVALUE&PUSH 0)                   ; X
134   (CONST&PUSH 8)                      ; 2
135   (CONST&PUSH 9)                      ; -1
136   (CALL2&PUSH 10)                     ; POWER
138   (GETVALUE&PUSH 2)                   ; A
140   (CONST&PUSH 8)                      ; 2
141   (CALL2&PUSH 12)                     ; MUL
143   (CALL2&PUSH 7)                      ; SUB
145   (CALL2&PUSH 7)                      ; SUB
147   (CALL2&PUSH 7)                      ; SUB
149   (CALL2&PUSH 10)                     ; POWER
151   (CALL1&PUSH 12)                     ; MUL
153   (CONST&PUSH 14)                     ; 1
154   (CONST&PUSH 13)                     ; ELL
155   (CALL2&PUSH 7)                      ; SUB
157   (GETVALUE&PUSH 2)                   ; A
159   (GETVALUE&PUSH 0)                   ; X
161   (GETVALUE&PUSH 11)                  ; B
163   (CALL&PUSH 3 6)                     ; ADD
166   (GETVALUE&PUSH 3)                   ; C
168   (GETVALUE&PUSH 1)                   ; Y
170   (CALL2&PUSH 7)                      ; SUB
172   (CALL2&PUSH 7)                      ; SUB
174   (CALL2&PUSH 10)                     ; POWER
176   (CONST&PUSH 13)                     ; ELL
177   (GETVALUE&PUSH 11)                  ; B
179   (CONST&PUSH 14)                     ; 1
180   (CALL2&PUSH 7)                      ; SUB
182   (CALL2&PUSH 10)                     ; POWER
184   (GETVALUE&PUSH 4)                   ; FUN
186   (CALL2&PUSH 12)                     ; MUL
188   (CONST&PUSH 13)                     ; ELL
189   (GETVALUE&PUSH 11)                  ; B
191   (GETVALUE&PUSH 2)                   ; A
193   (CONST&PUSH 8)                      ; 2
194   (CONST&PUSH 9)                      ; -1
195   (CALL2&PUSH 10)                     ; POWER
197   (CALL1&PUSH 0)                      ; X
199   (CALL1&PUSH 7)                      ; SUB
201   (CALL2&PUSH 7)                      ; SUB
203   (CALL2&PUSH 7)                      ; SUB
205   (CALL&PUSH 3 15)                    ; $DIFF
208   (CONST&PUSH 13)                     ; ELL
209   (GETVALUE&PUSH 0)                   ; X
211   (GETVALUE&PUSH 1)                   ; Y
213   (CALLSR&PUSH 1 54)                  ; -
216   (CALL&PUSH 5 15)                    ; $DIFF
219   (CALL&PUSH 3 12)                    ; MUL
222   (CONST&PUSH 13)                     ; ELL
223   (GETVALUE&PUSH 1)                   ; Y
225   (CALL&PUSH 3 15)                    ; $DIFF
228   (CALL 4 12)                         ; MUL
231   (UNBIND 5)
233   (SKIP&RET 6)


Disassembly of function #:|(DEFUN SIMPR2F1 (L1 L2) ...)-62|
(CONST 0) = SIMPR2F1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPR2F1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPR2F1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPR2F1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPR2F1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPR2F1
8     (SKIP&RET 1)


Disassembly of function SIMPR2F1
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = MAXIMA-INTEGERP
(CONST 3) = DERIVINT
(CONST 4) = GEREDNO2
(CONST 5) = FAIL1
(CONST 6) = D
(CONST 7) = C
(CONST 8) = RAT
(CONST 9) = FAILG
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1)
91 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (GETVALUE 0)                        ; L1
8     (CAR&PUSH)
9     (CALL1&PUSH 2)                      ; MAXIMA-INTEGERP
11    (GETVALUE 0)                        ; L1
13    (CDR)
14    (CAR&PUSH)
15    (CALL1&PUSH 2)                      ; MAXIMA-INTEGERP
17    (GETVALUE 1)                        ; L2
19    (CAR&PUSH)
20    (CALL1&PUSH 2)                      ; MAXIMA-INTEGERP
22    (LOAD&JMPIFNOT 0 L129)
26    (LOAD&JMPIFNOT 2 L32)
29    (LOAD&JMPIF 1 L56)
32    L32
32    (LOAD&JMPIF 2 L90)
35    (LOAD&JMPIFNOT 1 L98)
38    (GETVALUE 0)                        ; L1
40    (CAR&PUSH)
41    (GETVALUE 0)                        ; L1
43    (CDR)
44    L44
44    (CAR&PUSH)
45    (GETVALUE 1)                        ; L2
47    (CAR&PUSH)
48    (CALL 3 4)                          ; GEREDNO2
51    (SKIP 3)
53    (JMP L143)
56    L56
56    (GETVALUE 0)                        ; L1
58    (CAR&PUSH)
59    (CALLS2&PUSH 151)                   ; 1-
61    (GETVALUE 0)                        ; L1
63    (CDR)
64    (CAR&PUSH)
65    (GETVALUE 0)                        ; L1
67    (CAR&PUSH)
68    (CALLSR&PUSH 1 54)                  ; -
71    (GETVALUE 1)                        ; L2
73    (CAR&PUSH)
74    (GETVALUE 0)                        ; L1
76    (CDR)
77    (CAR&PUSH)
78    (CALLSR&PUSH 1 54)                  ; -
81    (CALLS2&PUSH 151)                   ; 1-
83    (CALL 3 3)                          ; DERIVINT
86    (SKIP 3)
88    (JMP L143)
90    L90
90    (GETVALUE 0)                        ; L1
92    (CDR)
93    (CAR&PUSH)
94    (GETVALUE 0)                        ; L1
96    (JMP L44)
98    L98
98    (CONST 5)                           ; FAIL1
99    (SKIP 3)
101   (JMP L143)
103   L103
103   (CONST 6)                           ; D
104   (SKIP 3)
106   (JMP L143)
108   L108
108   (LOAD&JMPIF 1 L103)
111   (CONST 7)                           ; C
112   (SKIP 3)
114   (JMP L143)
116   L116
116   (CONST 7)                           ; C
117   (SKIP 3)
119   (JMP L143)
121   L121
121   (LOAD&JMPIF 1 L116)
124   (CONST 6)                           ; D
125   (SKIP 3)
127   (JMP L143)
129   L129
129   (LOAD&JMPIF 2 L108)
132   (GETVALUE 0)                        ; L1
134   (CAR)
135   (CAR)
136   (CAR&PUSH)
137   (JMPIFEQTO 8 L121)                  ; RAT
140   (CONST 9)                           ; FAILG
141   (SKIP 3)
143   L143
143   (UNBIND 2)
145   (SKIP&RET 3)


Disassembly of function #:|(DEFUN GEREDNO1 (L1 L2) ...)-63|
(CONST 0) = GEREDNO1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GEREDNO1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GEREDNO1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GEREDNO1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GEREDNO1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GEREDNO1
8     (SKIP&RET 1)


Disassembly of function GEREDNO1
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = GEREDF
(CONST 3) = HGFSIMP
(CONST 4) = GERED1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L1 L2)
33 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (GETVALUE 1)                        ; L2
8     (CAR&PUSH)
9     (GETVALUE 0)                        ; L1
11    (CAR&PUSH)
12    (CALLSR&JMPIFNOT 1 48 L27)          ; >
16    (GETVALUE 1)                        ; L2
18    (CAR&PUSH)
19    (GETVALUE 0)                        ; L1
21    (CDR)
22    (CAR&PUSH)
23    (CALLSR&JMPIF 1 48 L39)             ; >
27    L27
27    (GETVALUE&PUSH 0)                   ; L1
29    (GETVALUE&PUSH 1)                   ; L2
31    (CONST&PUSH 3)                      ; HGFSIMP
32    (CALL 3 4)                          ; GERED1
35    L35
35    (UNBIND 2)
37    (SKIP&RET 3)
39    L39
39    (GETVALUE 0)                        ; L1
41    (CAR&PUSH)
42    (GETVALUE 0)                        ; L1
44    (CDR)
45    (CAR&PUSH)
46    (GETVALUE 1)                        ; L2
48    (CAR&PUSH)
49    (CALL 3 2)                          ; GEREDF
52    (JMP L35)


Disassembly of function #:|(DEFUN GEREDNO2 (A B C) ...)-64|
(CONST 0) = GEREDNO2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GEREDNO2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GEREDNO2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GEREDNO2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GEREDNO2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GEREDNO2
8     (SKIP&RET 1)


Disassembly of function GEREDNO2
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = GEREDF
(CONST 4) = GERED2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A B C)
22 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE&PUSH 2)                   ; C
11    (GETVALUE&PUSH 1)                   ; B
13    (CALLSR&JMPIF 1 48 L30)             ; >
17    (GETVALUE&PUSH 0)                   ; A
19    (GETVALUE&PUSH 1)                   ; B
21    (GETVALUE&PUSH 2)                   ; C
23    (CALL 3 4)                          ; GERED2
26    L26
26    (UNBIND 3)
28    (SKIP&RET 4)
30    L30
30    (GETVALUE&PUSH 1)                   ; B
32    (GETVALUE&PUSH 0)                   ; A
34    (GETVALUE&PUSH 2)                   ; C
36    (CALL 3 3)                          ; GEREDF
39    (JMP L26)


Disassembly of function #:|(DEFUN DERIVINT (N M L) ...)-65|
(CONST 0) = DERIVINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DERIVINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DERIVINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DERIVINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DERIVINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DERIVINT
8     (SKIP&RET 1)


Disassembly of function DERIVINT
(CONST 0) = N
(CONST 1) = M
(CONST 2) = L
(CONST 3) = VAR
(CONST 4) = PSEY
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = 1
(CONST 8) = FACTORIAL
(CONST 9) = SUB
(CONST 10) = $LOG
(CONST 11) = MUL
(CONST 12) = $DIFF
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L N M VAR)
67 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; L
9     (GETVALUE&PUSH 3)                   ; VAR
11    (CONST&PUSH 4)                      ; PSEY
12    (CONST&PUSH 5)                      ; -1
13    (GETVALUE&PUSH 1)                   ; M
15    (CALL2&PUSH 6)                      ; POWER
17    (CONST&PUSH 7)                      ; 1
18    (GETVALUE&PUSH 0)                   ; N
20    (GETVALUE&PUSH 1)                   ; M
22    (GETVALUE&PUSH 2)                   ; L
24    (CALLSR&PUSH 4 53)                  ; +
27    (CALL1&PUSH 8)                      ; FACTORIAL
29    (GETVALUE&PUSH 0)                   ; N
31    (CALL1&PUSH 8)                      ; FACTORIAL
33    (CONST&PUSH 5)                      ; -1
34    (CALL2&PUSH 6)                      ; POWER
36    (GETVALUE&PUSH 2)                   ; L
38    (CALL1&PUSH 8)                      ; FACTORIAL
40    (CONST&PUSH 5)                      ; -1
41    (CALL2&PUSH 6)                      ; POWER
43    (GETVALUE&PUSH 0)                   ; N
45    (GETVALUE&PUSH 1)                   ; M
47    (CALLSR&PUSH 2 53)                  ; +
50    (CALL1&PUSH 8)                      ; FACTORIAL
52    (CONST&PUSH 5)                      ; -1
53    (CALL2&PUSH 6)                      ; POWER
55    (GETVALUE&PUSH 1)                   ; M
57    (GETVALUE&PUSH 2)                   ; L
59    (CALLSR&PUSH 2 53)                  ; +
62    (CALL1&PUSH 8)                      ; FACTORIAL
64    (CONST&PUSH 5)                      ; -1
65    (CALL2&PUSH 6)                      ; POWER
67    (CONST&PUSH 7)                      ; 1
68    (CONST&PUSH 4)                      ; PSEY
69    (CALL2&PUSH 9)                      ; SUB
71    (GETVALUE&PUSH 1)                   ; M
73    (GETVALUE&PUSH 2)                   ; L
75    (CALLSR&PUSH 2 53)                  ; +
78    (CALL2&PUSH 6)                      ; POWER
80    (CONST&PUSH 4)                      ; PSEY
81    (CONST&PUSH 5)                      ; -1
82    (CALL2&PUSH 6)                      ; POWER
84    (CONST&PUSH 5)                      ; -1
85    (CONST&PUSH 7)                      ; 1
86    (CONST&PUSH 4)                      ; PSEY
87    (CALL2&PUSH 9)                      ; SUB
89    (CALL1&PUSH 10)                     ; $LOG
91    (CALL&PUSH 3 11)                    ; MUL
94    (CONST&PUSH 4)                      ; PSEY
95    (GETVALUE&PUSH 2)                   ; L
97    (CALL&PUSH 3 12)                    ; $DIFF
100   (CALL2&PUSH 11)                     ; MUL
102   (CONST&PUSH 4)                      ; PSEY
103   (GETVALUE&PUSH 0)                   ; N
105   (GETVALUE&PUSH 1)                   ; M
107   (CALLSR&PUSH 2 53)                  ; +
110   (CALL&PUSH 3 12)                    ; $DIFF
113   (CALL&PUSH 7 11)                    ; MUL
116   (PUSH-UNBOUND 3)
118   (CALLS1 172)                        ; SUBST
120   (UNBIND 3)
122   (SKIP&RET 4)


Disassembly of function #:|(DEFUN HYP-COS (A B C) ...)-66|
(CONST 0) = HYP-COS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYP-COS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYP-COS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYP-COS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYP-COS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYP-COS
8     (SKIP&RET 1)


Disassembly of function HYP-COS
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = A1
(CONST 4) = ADD
(CONST 5) = 1
(CONST 6) = 2
(CONST 7) = DIV
(CONST 8) = SUB
(CONST 9) = VAR
(CONST 10) = -1
(CONST 11) = POWER
(CONST 12) = MUL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A1 C VAR B A)
writes special variable : (A1)
104 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; A1
12    (NIL&PUSH)
13    (GETVALUE&PUSH 0)                   ; A
15    (GETVALUE&PUSH 1)                   ; B
17    (CALL2&PUSH 4)                      ; ADD
19    (CONST&PUSH 5)                      ; 1
20    (CONST&PUSH 6)                      ; 2
21    (CALL2&PUSH 7)                      ; DIV
23    (CALL2&PUSH 8)                      ; SUB
25    (CONST&PUSH 6)                      ; 2
26    (CALL2 7)                           ; DIV
28    (SETVALUE 3)                        ; A1
30    (CONST&PUSH 5)                      ; 1
31    (GETVALUE&PUSH 9)                   ; VAR
33    (CALL2 8)                           ; SUB
35    (STORE 0)
36    (GETVALUE&PUSH 2)                   ; C
38    (CONST&PUSH 6)                      ; 2
39    (CONST&PUSH 10)                     ; -1
40    (CALL2&PUSH 11)                     ; POWER
42    (CALL2 12)                          ; MUL
44    (GETVALUE&PUSH 0)                   ; A
46    (GETVALUE&PUSH 1)                   ; B
48    (CALL2&PUSH 4)                      ; ADD
50    (CONST&PUSH 5)                      ; 1
51    (CONST&PUSH 6)                      ; 2
52    (CALL2&PUSH 7)                      ; DIV
54    (CALL2&PUSH 8)                      ; SUB
56    (GETVALUE&PUSH 2)                   ; C
58    (CALLS2&JMPIF 2 L110)               ; EQUAL
61    (CONST&PUSH 5)                      ; 1
62    (CONST&PUSH 6)                      ; 2
63    (GETVALUE&PUSH 3)                   ; A1
65    (CALL2&PUSH 12)                     ; MUL
67    (CALL2&PUSH 4)                      ; ADD
69    (GETVALUE&PUSH 2)                   ; C
71    (CALLS2&JMPIFNOT 2 L156)            ; EQUAL
75    (CONST&PUSH 6)                      ; 2
76    (GETVALUE&PUSH 2)                   ; C
78    (CONST&PUSH 5)                      ; 1
79    (CALL2&PUSH 8)                      ; SUB
81    (CALL2&PUSH 11)                     ; POWER
83    (CONST&PUSH 5)                      ; 1
84    (LOAD&PUSH 2)
85    (CONST&PUSH 5)                      ; 1
86    (CONST&PUSH 6)                      ; 2
87    (CALL2&PUSH 7)                      ; DIV
89    (CALL2&PUSH 11)                     ; POWER
91    (CALL2&PUSH 4)                      ; ADD
93    (CONST&PUSH 10)                     ; -1
94    (GETVALUE&PUSH 2)                   ; C
96    (CONST&PUSH 5)                      ; 1
97    (CALL2&PUSH 8)                      ; SUB
99    (CALL2&PUSH 12)                     ; MUL
101   (CALL2&PUSH 11)                     ; POWER
103   (CALL2 12)                          ; MUL
105   L105
105   (SKIP 1)
107   (UNBIND1)
108   (JMP L160)
110   L110
110   (CONST&PUSH 6)                      ; 2
111   (GETVALUE&PUSH 3)                   ; A1
113   (CONST&PUSH 6)                      ; 2
114   (CALL2&PUSH 12)                     ; MUL
116   (CONST&PUSH 5)                      ; 1
117   (CALL2&PUSH 8)                      ; SUB
119   (CALL2&PUSH 11)                     ; POWER
121   (LOAD&PUSH 1)
122   (CONST&PUSH 5)                      ; 1
123   (CONST&PUSH 6)                      ; 2
124   (CALL2&PUSH 7)                      ; DIV
126   (CALL2&PUSH 11)                     ; POWER
128   (CONST&PUSH 10)                     ; -1
129   (CALL2&PUSH 11)                     ; POWER
131   (CONST&PUSH 5)                      ; 1
132   (LOAD&PUSH 3)
133   (CONST&PUSH 5)                      ; 1
134   (CONST&PUSH 6)                      ; 2
135   (CALL2&PUSH 7)                      ; DIV
137   (CALL2&PUSH 11)                     ; POWER
139   (CALL2&PUSH 4)                      ; ADD
141   (CONST&PUSH 5)                      ; 1
142   (CONST&PUSH 6)                      ; 2
143   (GETVALUE&PUSH 3)                   ; A1
145   (CALL2&PUSH 12)                     ; MUL
147   (CALL2&PUSH 8)                      ; SUB
149   (CALL2&PUSH 11)                     ; POWER
151   (CALL 3 12)                         ; MUL
154   (JMP L105)
156   L156
156   (NIL)
157   (SKIP 1)
159   (UNBIND1)
160   L160
160   (UNBIND 3)
162   (SKIP&RET 4)


Disassembly of function #:|(DEFUN DEGEN2F1 (A B C) ...)-67|
(CONST 0) = DEGEN2F1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEGEN2F1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEGEN2F1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEGEN2F1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEGEN2F1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEGEN2F1
8     (SKIP&RET 1)


Disassembly of function DEGEN2F1
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = SUB
(CONST 4) = QUEST
(CONST 5) = $NEGATIVE
(CONST 6) = HGFSIMP
(CONST 7) = GERED1
(CONST 8) = GERED2
(CONST 9) = REST-DEGEN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A B C)
49 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE&PUSH 2)                   ; C
11    (GETVALUE&PUSH 1)                   ; B
13    (CALL2&PUSH 3)                      ; SUB
15    (CALL1&PUSH 4)                      ; QUEST
17    (JMPIFEQTO 5 L59)                   ; $NEGATIVE
20    (GETVALUE&PUSH 2)                   ; C
22    (GETVALUE&PUSH 0)                   ; A
24    (CALL2&PUSH 3)                      ; SUB
26    (CALL1&PUSH 4)                      ; QUEST
28    (JMPIFNOTEQTO 5 L76)                ; $NEGATIVE
31    (GETVALUE&PUSH 1)                   ; B
33    (GETVALUE 0)                        ; A
35    L35
35    (PUSH)
36    (GETVALUE&PUSH 2)                   ; C
38    (CALL 3 8)                          ; GERED2
41    (JMP L85)
43    L43
43    (GETVALUE&PUSH 0)                   ; A
45    (GETVALUE&PUSH 1)                   ; B
47    (LIST&PUSH 2)
49    (GETVALUE&PUSH 2)                   ; C
51    (LIST&PUSH 1)
53    (CONST&PUSH 6)                      ; HGFSIMP
54    (CALL 3 7)                          ; GERED1
57    (JMP L85)
59    L59
59    (GETVALUE&PUSH 2)                   ; C
61    (GETVALUE&PUSH 0)                   ; A
63    (CALL2&PUSH 3)                      ; SUB
65    (CALL1&PUSH 4)                      ; QUEST
67    (JMPIFEQTO 5 L43)                   ; $NEGATIVE
70    (GETVALUE&PUSH 0)                   ; A
72    (GETVALUE 1)                        ; B
74    (JMP L35)
76    L76
76    (GETVALUE&PUSH 0)                   ; A
78    (GETVALUE&PUSH 1)                   ; B
80    (GETVALUE&PUSH 2)                   ; C
82    (CALL 3 9)                          ; REST-DEGEN
85    L85
85    (UNBIND 3)
87    (SKIP&RET 4)


Disassembly of function #:|(DEFUN REST-DEGEN (A B C) ...)-68|
(CONST 0) = REST-DEGEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REST-DEGEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REST-DEGEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REST-DEGEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REST-DEGEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REST-DEGEN
8     (SKIP&RET 1)


Disassembly of function REST-DEGEN
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = M
(CONST 4) = N
(CONST 5) = L
(CONST 6) = 1
(CONST 7) = SUB
(CONST 8) = NNI
(CONST 9) = REST-DEGEN-1
(CONST 10) = NI
(CONST 11) = REST-DEGEN-2
(CONST 12) = -1
(CONST 13) = ADD
(CONST 14) = MUL
(CONST 15) = HGFSIMP
(CONST 16) = GERED1
(CONST 17) = HYP-DEG
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L M N C B A)
writes special variables : (L N M)
84 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; N
15    (NIL)
16    (BIND 5)                            ; L
18    (GETVALUE&PUSH 0)                   ; A
20    (CONST&PUSH 6)                      ; 1
21    (CALL2 7)                           ; SUB
23    (SETVALUE 3)                        ; M
25    (PUSH)
26    (CALL1&JMPIF 8 L114)                ; NNI
30    (GETVALUE&PUSH 1)                   ; B
32    (CALL1&JMPIF 10 L127)               ; NI
36    (GETVALUE&PUSH 2)                   ; C
38    (CONST&PUSH 6)                      ; 1
39    (CALL2 7)                           ; SUB
41    (SETVALUE 4)                        ; N
43    (PUSH)
44    (CALL1&JMPIFNOT 8 L101)             ; NNI
47    (GETVALUE&PUSH 0)                   ; A
49    (GETVALUE&PUSH 4)                   ; N
51    (CALL2&PUSH 7)                      ; SUB
53    (CONST&PUSH 6)                      ; 1
54    (CALL2 7)                           ; SUB
56    (SETVALUE 3)                        ; M
58    (PUSH)
59    (CALL1&JMPIFNOT 8 L101)             ; NNI
62    (GETVALUE&PUSH 1)                   ; B
64    (GETVALUE&PUSH 0)                   ; A
66    (CALL2 7)                           ; SUB
68    (SETVALUE 5)                        ; L
70    (PUSH)
71    (CALL1&JMPIFNOT 8 L101)             ; NNI
74    (GETVALUE&PUSH 2)                   ; C
76    (GETVALUE&PUSH 0)                   ; A
78    (CALL2&PUSH 7)                      ; SUB
80    (GETVALUE&PUSH 1)                   ; B
82    (CALL2&PUSH 7)                      ; SUB
84    (CONST&PUSH 12)                     ; -1
85    (GETVALUE&PUSH 3)                   ; M
87    (GETVALUE&PUSH 3)                   ; M
89    (GETVALUE&PUSH 4)                   ; N
91    (GETVALUE&PUSH 5)                   ; L
93    (CONST&PUSH 6)                      ; 1
94    (CALL&PUSH 5 13)                    ; ADD
97    (CALL2 14)                          ; MUL
99    (JMPIFEQ L138)
101   L101
101   (GETVALUE&PUSH 1)                   ; B
103   (GETVALUE&PUSH 0)                   ; A
105   (GETVALUE&PUSH 2)                   ; C
107   (CALL 3 17)                         ; HYP-DEG
110   L110
110   (UNBIND 6)
112   (SKIP&RET 4)
114   L114
114   (GETVALUE&PUSH 0)                   ; A
116   (GETVALUE&PUSH 1)                   ; B
118   (GETVALUE&PUSH 2)                   ; C
120   (GETVALUE&PUSH 3)                   ; M
122   (CALL 4 9)                          ; REST-DEGEN-1
125   (JMP L110)
127   L127
127   (GETVALUE&PUSH 0)                   ; A
129   (GETVALUE&PUSH 1)                   ; B
131   (GETVALUE&PUSH 2)                   ; C
133   (CALL 3 11)                         ; REST-DEGEN-2
136   (JMP L110)
138   L138
138   (GETVALUE&PUSH 0)                   ; A
140   (GETVALUE&PUSH 1)                   ; B
142   (LIST&PUSH 2)
144   (GETVALUE&PUSH 2)                   ; C
146   (LIST&PUSH 1)
148   (CONST&PUSH 15)                     ; HGFSIMP
149   (CALL 3 16)                         ; GERED1
152   (JMP L110)


Disassembly of function #:|(DEFUN REST-DEGEN-1 (A B C ...) ...)-69|
(CONST 0) = REST-DEGEN-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REST-DEGEN-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REST-DEGEN-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REST-DEGEN-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REST-DEGEN-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REST-DEGEN-1
8     (SKIP&RET 1)


Disassembly of function REST-DEGEN-1
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = M
(CONST 4) = N
(CONST 5) = L
(CONST 6) = NI
(CONST 7) = SUB
(CONST 8) = 1
(CONST 9) = NNI
(CONST 10) = DEG299
(CONST 11) = 2
(CONST 12) = -1
(CONST 13) = ADD
(CONST 14) = MUL
(CONST 15) = HGFSIMP
(CONST 16) = GERED1
(CONST 17) = REST-DEGEN-1A
(CONST 18) = HYP-DEG
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L M A C B)
writes special variables : (L N)
92 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; A
3     (LOAD 6)
4     (BIND 1)                            ; B
6     (LOAD 8)
7     (BIND 2)                            ; C
9     (LOAD 10)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; N
15    (NIL)
16    (BIND 5)                            ; L
18    (GETVALUE&PUSH 1)                   ; B
20    (CALL1&JMPIFNOT 6 L49)              ; NI
23    (GETVALUE&PUSH 2)                   ; C
25    (GETVALUE&PUSH 0)                   ; A
27    (CALL2&PUSH 7)                      ; SUB
29    (GETVALUE&PUSH 1)                   ; B
31    (CALL2&PUSH 7)                      ; SUB
33    (CALL1&JMPIFNOT 6 L49)              ; NI
36    (GETVALUE&PUSH 2)                   ; C
38    (GETVALUE&PUSH 0)                   ; A
40    (CALL2&PUSH 7)                      ; SUB
42    (CONST&PUSH 8)                      ; 1
43    (CALL2&PUSH 7)                      ; SUB
45    (CALL1&JMPIF 9 L128)                ; NNI
49    L49
49    (GETVALUE&PUSH 2)                   ; C
51    (GETVALUE&PUSH 3)                   ; M
53    (CALL2&PUSH 7)                      ; SUB
55    (CONST&PUSH 11)                     ; 2
56    (CALL2 7)                           ; SUB
58    (SETVALUE 4)                        ; N
60    (PUSH)
61    (CALL1&JMPIFNOT 9 L100)             ; NNI
64    (GETVALUE&PUSH 1)                   ; B
66    (GETVALUE&PUSH 2)                   ; C
68    (CALL2 7)                           ; SUB
70    (SETVALUE 5)                        ; L
72    (PUSH)
73    (CALL1&JMPIFNOT 9 L100)             ; NNI
76    (GETVALUE&PUSH 2)                   ; C
78    (GETVALUE&PUSH 0)                   ; A
80    (CALL2&PUSH 7)                      ; SUB
82    (GETVALUE&PUSH 1)                   ; B
84    (CALL2&PUSH 7)                      ; SUB
86    (CONST&PUSH 12)                     ; -1
87    (GETVALUE&PUSH 5)                   ; L
89    (GETVALUE&PUSH 3)                   ; M
91    (CONST&PUSH 8)                      ; 1
92    (CALL&PUSH 3 13)                    ; ADD
95    (CALL2&PUSH 14)                     ; MUL
97    (CALLS2&JMPIF 2 L139)               ; EQUAL
100   L100
100   (GETVALUE&PUSH 1)                   ; B
102   (GETVALUE&PUSH 3)                   ; M
104   (CALL2&PUSH 7)                      ; SUB
106   (CONST&PUSH 8)                      ; 1
107   (CALL2 7)                           ; SUB
109   (SETVALUE 5)                        ; L
111   (PUSH)
112   (CALL1&JMPIF 9 L155)                ; NNI
115   (GETVALUE&PUSH 1)                   ; B
117   (GETVALUE&PUSH 0)                   ; A
119   (GETVALUE&PUSH 2)                   ; C
121   (CALL 3 18)                         ; HYP-DEG
124   L124
124   (UNBIND 6)
126   (SKIP&RET 5)
128   L128
128   (GETVALUE&PUSH 0)                   ; A
130   (GETVALUE&PUSH 1)                   ; B
132   (GETVALUE&PUSH 2)                   ; C
134   (CALL 3 10)                         ; DEG299
137   (JMP L124)
139   L139
139   (GETVALUE&PUSH 0)                   ; A
141   (GETVALUE&PUSH 1)                   ; B
143   (LIST&PUSH 2)
145   (GETVALUE&PUSH 2)                   ; C
147   (LIST&PUSH 1)
149   (CONST&PUSH 15)                     ; HGFSIMP
150   (CALL 3 16)                         ; GERED1
153   (JMP L124)
155   L155
155   (GETVALUE&PUSH 0)                   ; A
157   (GETVALUE&PUSH 1)                   ; B
159   (GETVALUE&PUSH 2)                   ; C
161   (GETVALUE&PUSH 3)                   ; M
163   (GETVALUE&PUSH 5)                   ; L
165   (CALL 5 17)                         ; REST-DEGEN-1A
168   (JMP L124)


Disassembly of function #:|(DEFUN REST-DEGEN-1A (A B C ...) ...)-70|
(CONST 0) = REST-DEGEN-1A
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REST-DEGEN-1A>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REST-DEGEN-1A
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REST-DEGEN-1A
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REST-DEGEN-1A>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REST-DEGEN-1A
8     (SKIP&RET 1)


Disassembly of function REST-DEGEN-1A
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = M
(CONST 4) = L
(CONST 5) = N
(CONST 6) = SUB
(CONST 7) = 2
(CONST 8) = NNI
(CONST 9) = DEG2913
(CONST 10) = -1
(CONST 11) = MUL
(CONST 12) = ADD
(CONST 13) = DEG2918
(CONST 14) = HYP-DEG
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A N L M C)
writes special variable : (N)
74 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; A
3     (LOAD 7)
4     (BIND 1)                            ; B
6     (LOAD 9)
7     (BIND 2)                            ; C
9     (LOAD 11)
10    (BIND 3)                            ; M
12    (LOAD 13)
13    (BIND 4)                            ; L
15    (NIL)
16    (BIND 5)                            ; N
18    (GETVALUE&PUSH 2)                   ; C
20    (GETVALUE&PUSH 3)                   ; M
22    (CALL2&PUSH 6)                      ; SUB
24    (GETVALUE&PUSH 4)                   ; L
26    (CALL2&PUSH 6)                      ; SUB
28    (CONST&PUSH 7)                      ; 2
29    (CALL2 6)                           ; SUB
31    (SETVALUE 5)                        ; N
33    (PUSH)
34    (CALL1&JMPIFNOT 8 L56)              ; NNI
37    (GETVALUE&PUSH 5)                   ; N
39    (GETVALUE&PUSH 3)                   ; M
41    (CALL2&PUSH 6)                      ; SUB
43    (GETVALUE&PUSH 2)                   ; C
45    (GETVALUE&PUSH 0)                   ; A
47    (CALL2&PUSH 6)                      ; SUB
49    (GETVALUE&PUSH 1)                   ; B
51    (CALL2&PUSH 6)                      ; SUB
53    (CALLS2&JMPIF 2 L108)               ; EQUAL
56    L56
56    (GETVALUE&PUSH 2)                   ; C
58    (CONST&PUSH 10)                     ; -1
59    (GETVALUE&PUSH 5)                   ; N
61    (CALL2&PUSH 11)                     ; MUL
63    (CALLS2&JMPIFNOT 2 L94)             ; EQUAL
66    (GETVALUE&PUSH 2)                   ; C
68    (GETVALUE&PUSH 0)                   ; A
70    (CALL2&PUSH 6)                      ; SUB
72    (GETVALUE&PUSH 1)                   ; B
74    (CALL2&PUSH 6)                      ; SUB
76    (CONST&PUSH 10)                     ; -1
77    (GETVALUE&PUSH 3)                   ; M
79    (GETVALUE&PUSH 3)                   ; M
81    (GETVALUE&PUSH 4)                   ; L
83    (GETVALUE&PUSH 5)                   ; N
85    (CONST&PUSH 7)                      ; 2
86    (CALL&PUSH 5 12)                    ; ADD
89    (CALL2&PUSH 11)                     ; MUL
91    (CALLS2&JMPIF 2 L120)               ; EQUAL
94    L94
94    (GETVALUE&PUSH 1)                   ; B
96    (GETVALUE&PUSH 0)                   ; A
98    (GETVALUE&PUSH 2)                   ; C
100   (CALL 3 14)                         ; HYP-DEG
103   (UNBIND1)
104   L104
104   (UNBIND 5)
106   (SKIP&RET 6)
108   L108
108   (GETVALUE&PUSH 0)                   ; A
110   (GETVALUE&PUSH 1)                   ; B
112   (GETVALUE&PUSH 2)                   ; C
114   (CALL 3 9)                          ; DEG2913
117   (UNBIND1)
118   (JMP L104)
120   L120
120   (GETVALUE&PUSH 0)                   ; A
122   (GETVALUE&PUSH 1)                   ; B
124   (GETVALUE&PUSH 2)                   ; C
126   (CALL 3 13)                         ; DEG2918
129   (UNBIND1)
130   (JMP L104)


Disassembly of function #:|(DEFUN REST-DEGEN-2 (A B C) ...)-71|
(CONST 0) = REST-DEGEN-2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REST-DEGEN-2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REST-DEGEN-2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REST-DEGEN-2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REST-DEGEN-2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REST-DEGEN-2
8     (SKIP&RET 1)


Disassembly of function REST-DEGEN-2
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = M
(CONST 4) = L
(CONST 5) = NI
(CONST 6) = SUB
(CONST 7) = REST-DEGEN-2A
(CONST 8) = 1
(CONST 9) = NNI
(CONST 10) = DEG292
(CONST 11) = HYP-DEG
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A C)
writes special variables : (L M)
57 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; L
15    (GETVALUE&PUSH 2)                   ; C
17    (CALL1&JMPIFNOT 5 L33)              ; NI
20    (GETVALUE&PUSH 2)                   ; C
22    (GETVALUE&PUSH 0)                   ; A
24    (CALL2&PUSH 6)                      ; SUB
26    (GETVALUE&PUSH 1)                   ; B
28    (CALL2&PUSH 6)                      ; SUB
30    (CALL1&JMPIF 5 L82)                 ; NI
33    L33
33    (GETVALUE&PUSH 2)                   ; C
35    (CONST&PUSH 8)                      ; 1
36    (CALL2 6)                           ; SUB
38    (SETVALUE 3)                        ; M
40    (PUSH)
41    (CALL1&JMPIFNOT 9 L69)              ; NNI
44    (GETVALUE&PUSH 0)                   ; A
46    (GETVALUE&PUSH 2)                   ; C
48    (CALL2 6)                           ; SUB
50    (SETVALUE 4)                        ; L
52    (PUSH)
53    (CALL1&JMPIFNOT 9 L69)              ; NNI
56    (GETVALUE&PUSH 2)                   ; C
58    (GETVALUE&PUSH 0)                   ; A
60    (CALL2&PUSH 6)                      ; SUB
62    (GETVALUE&PUSH 1)                   ; B
64    (CALL2&PUSH 6)                      ; SUB
66    (CALL1&JMPIF 5 L93)                 ; NI
69    L69
69    (GETVALUE&PUSH 1)                   ; B
71    (GETVALUE&PUSH 0)                   ; A
73    (GETVALUE&PUSH 2)                   ; C
75    (CALL 3 11)                         ; HYP-DEG
78    L78
78    (UNBIND 5)
80    (SKIP&RET 4)
82    L82
82    (GETVALUE&PUSH 0)                   ; A
84    (GETVALUE&PUSH 1)                   ; B
86    (GETVALUE&PUSH 2)                   ; C
88    (CALL 3 7)                          ; REST-DEGEN-2A
91    (JMP L78)
93    L93
93    (GETVALUE&PUSH 0)                   ; A
95    (GETVALUE&PUSH 1)                   ; B
97    (GETVALUE&PUSH 2)                   ; C
99    (CALL 3 10)                         ; DEG292
102   (JMP L78)


Disassembly of function #:|(DEFUN REST-DEGEN-2A (A B C) ...)-72|
(CONST 0) = REST-DEGEN-2A
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REST-DEGEN-2A>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REST-DEGEN-2A
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REST-DEGEN-2A
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REST-DEGEN-2A>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REST-DEGEN-2A
8     (SKIP&RET 1)


Disassembly of function REST-DEGEN-2A
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = SUB
(CONST 4) = NNI
(CONST 5) = HGFSIMP
(CONST 6) = GERED1
(CONST 7) = 1
(CONST 8) = DEG2917
(CONST 9) = HYP-DEG
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B C A)
38 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE&PUSH 0)                   ; A
11    (GETVALUE&PUSH 2)                   ; C
13    (CALL2&PUSH 3)                      ; SUB
15    (CALL1&JMPIF 4 L43)                 ; NNI
18    (GETVALUE&PUSH 2)                   ; C
20    (GETVALUE&PUSH 0)                   ; A
22    (CALL2&PUSH 3)                      ; SUB
24    (CONST&PUSH 7)                      ; 1
25    (CALL2&PUSH 3)                      ; SUB
27    (CALL1&JMPIF 4 L59)                 ; NNI
30    (GETVALUE&PUSH 1)                   ; B
32    (GETVALUE&PUSH 0)                   ; A
34    (GETVALUE&PUSH 2)                   ; C
36    (CALL 3 9)                          ; HYP-DEG
39    L39
39    (UNBIND 3)
41    (SKIP&RET 4)
43    L43
43    (GETVALUE&PUSH 0)                   ; A
45    (GETVALUE&PUSH 1)                   ; B
47    (LIST&PUSH 2)
49    (GETVALUE&PUSH 2)                   ; C
51    (LIST&PUSH 1)
53    (CONST&PUSH 5)                      ; HGFSIMP
54    (CALL 3 6)                          ; GERED1
57    (JMP L39)
59    L59
59    (GETVALUE&PUSH 0)                   ; A
61    (GETVALUE&PUSH 1)                   ; B
63    (GETVALUE&PUSH 2)                   ; C
65    (CALL 3 8)                          ; DEG2917
68    (JMP L39)


Disassembly of function #:|(DEFUN QUEST (A) ...)-73|
(CONST 0) = QUEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE QUEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; QUEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; QUEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE QUEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; QUEST
8     (SKIP&RET 1)


Disassembly of function QUEST
(CONST 0) = A
(CONST 1) = CHECKSIGNTM
(CONST 2) = RAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALLS2&JMPIF 8 L15)                ; NUMBERP
8     (GETVALUE 0)                        ; A
10    (CAR)
11    (CAR&PUSH)
12    (JMPIFNOTEQTO 2 L21)                ; RAT
15    L15
15    (GETVALUE&PUSH 0)                   ; A
17    (CALL1 1)                           ; CHECKSIGNTM
19    (JMP L22)
21    L21
21    (NIL)
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NNI (A) ...)-74|
(CONST 0) = NNI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NNI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NNI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NNI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NNI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NNI
8     (SKIP&RET 1)


Disassembly of function NNI
(CONST 0) = A
(CONST 1) = MAXIMA-INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1&JMPIF 1 L12)                 ; MAXIMA-INTEGERP
8     (NIL)
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (GETVALUE&PUSH 0)                   ; A
14    (CALLS2 147)                        ; MINUSP
16    (NOT)
17    (JMP L9)


Disassembly of function #:|(DEFUN NI (A) ...)-75|
(CONST 0) = NI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NI
8     (SKIP&RET 1)


Disassembly of function NI
(CONST 0) = A
(CONST 1) = MAXIMA-INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1 1)                           ; MAXIMA-INTEGERP
7     (NOT)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN HYP-DEG (A B C) ...)-76|
(CONST 0) = HYP-DEG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYP-DEG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYP-DEG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYP-DEG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYP-DEG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYP-DEG
8     (SKIP&RET 1)


Disassembly of function HYP-DEG
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = FLDEG
(CONST 4) = VAR
(CONST 5) = HGFSIMP
(CONST 6) = FPQFORM
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR C B A FLDEG)
writes special variable : (FLDEG)
31 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE 3)                        ; FLDEG
11    (JMPIF L35)
13    (T)
14    (SETVALUE 3)                        ; FLDEG
16    (GETVALUE&PUSH 0)                   ; A
18    (GETVALUE&PUSH 1)                   ; B
20    (LIST&PUSH 2)
22    (GETVALUE&PUSH 2)                   ; C
24    (LIST&PUSH 1)
26    (GETVALUE&PUSH 4)                   ; VAR
28    (CALL 3 6)                          ; FPQFORM
31    L31
31    (UNBIND 3)
33    (SKIP&RET 4)
35    L35
35    (NIL)
36    (SETVALUE 3)                        ; FLDEG
38    (GETVALUE&PUSH 0)                   ; A
40    (GETVALUE&PUSH 1)                   ; B
42    (LIST&PUSH 2)
44    (GETVALUE&PUSH 2)                   ; C
46    (LIST&PUSH 1)
48    (GETVALUE&PUSH 4)                   ; VAR
50    (CALL 3 5)                          ; HGFSIMP
53    (JMP L31)


Disassembly of function #:|(DEFUN DEG2913 (A B C) ...)-77|
(CONST 0) = DEG2913
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEG2913>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEG2913
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEG2913
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEG2913>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEG2913
8     (SKIP&RET 1)


Disassembly of function DEG2913
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = -1
(CONST 4) = VAR
(CONST 5) = MUL
(CONST 6) = POWER
(CONST 7) = 1
(CONST 8) = ADD
(CONST 9) = HGFSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A C B VAR)
35 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (CONST&PUSH 3)                      ; -1
10    (GETVALUE&PUSH 4)                   ; VAR
12    (CALL2&PUSH 5)                      ; MUL
14    (CONST&PUSH 3)                      ; -1
15    (GETVALUE&PUSH 1)                   ; B
17    (CALL2&PUSH 5)                      ; MUL
19    (CALL2&PUSH 6)                      ; POWER
21    (GETVALUE&PUSH 1)                   ; B
23    (CONST&PUSH 7)                      ; 1
24    (CONST&PUSH 3)                      ; -1
25    (GETVALUE&PUSH 2)                   ; C
27    (CALL2&PUSH 5)                      ; MUL
29    (CALL&PUSH 3 8)                     ; ADD
32    (GETVALUE&PUSH 1)                   ; B
34    (LIST&PUSH 2)
36    (GETVALUE&PUSH 1)                   ; B
38    (CONST&PUSH 7)                      ; 1
39    (CONST&PUSH 3)                      ; -1
40    (GETVALUE&PUSH 0)                   ; A
42    (CALL2&PUSH 5)                      ; MUL
44    (CALL&PUSH 3 8)                     ; ADD
47    (LIST&PUSH 1)
49    (GETVALUE&PUSH 4)                   ; VAR
51    (CONST&PUSH 3)                      ; -1
52    (CALL2&PUSH 6)                      ; POWER
54    (CALL&PUSH 3 9)                     ; HGFSIMP
57    (CALL2 5)                           ; MUL
59    (UNBIND 3)
61    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DEG2918 (A B C) ...)-78|
(CONST 0) = DEG2918
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEG2918>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEG2918
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEG2918
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEG2918>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEG2918
8     (SKIP&RET 1)


Disassembly of function DEG2918
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = VAR
(CONST 4) = 1
(CONST 5) = SUB
(CONST 6) = POWER
(CONST 7) = -1
(CONST 8) = MUL
(CONST 9) = ADD
(CONST 10) = 2
(CONST 11) = HGFSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A C VAR)
39 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE&PUSH 3)                   ; VAR
11    (CONST&PUSH 4)                      ; 1
12    (GETVALUE&PUSH 2)                   ; C
14    (CALL2&PUSH 5)                      ; SUB
16    (CALL2&PUSH 6)                      ; POWER
18    (CONST&PUSH 4)                      ; 1
19    (GETVALUE&PUSH 3)                   ; VAR
21    (CALL2&PUSH 5)                      ; SUB
23    (GETVALUE&PUSH 2)                   ; C
25    (CONST&PUSH 7)                      ; -1
26    (GETVALUE&PUSH 0)                   ; A
28    (CALL2&PUSH 8)                      ; MUL
30    (CONST&PUSH 7)                      ; -1
31    (GETVALUE&PUSH 1)                   ; B
33    (CALL2&PUSH 8)                      ; MUL
35    (CALL&PUSH 3 9)                     ; ADD
38    (CALL2&PUSH 6)                      ; POWER
40    (CONST&PUSH 4)                      ; 1
41    (GETVALUE&PUSH 0)                   ; A
43    (CALL2&PUSH 5)                      ; SUB
45    (CONST&PUSH 4)                      ; 1
46    (GETVALUE&PUSH 1)                   ; B
48    (CALL2&PUSH 5)                      ; SUB
50    (LIST&PUSH 2)
52    (CONST&PUSH 10)                     ; 2
53    (GETVALUE&PUSH 2)                   ; C
55    (CALL2&PUSH 5)                      ; SUB
57    (LIST&PUSH 1)
59    (GETVALUE&PUSH 3)                   ; VAR
61    (CALL&PUSH 3 11)                    ; HGFSIMP
64    (CALL 3 8)                          ; MUL
67    (UNBIND 3)
69    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DEG2917 (A B C) ...)-79|
(CONST 0) = DEG2917
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEG2917>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEG2917
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEG2917
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEG2917>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEG2917
8     (SKIP&RET 1)


Disassembly of function DEG2917
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = VAR
(CONST 4) = 1
(CONST 5) = SUB
(CONST 6) = POWER
(CONST 7) = -1
(CONST 8) = MUL
(CONST 9) = ADD
(CONST 10) = 2
(CONST 11) = HGFSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A C VAR)
33 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE&PUSH 3)                   ; VAR
11    (CONST&PUSH 4)                      ; 1
12    (GETVALUE&PUSH 2)                   ; C
14    (CALL2&PUSH 5)                      ; SUB
16    (CALL2&PUSH 6)                      ; POWER
18    (GETVALUE&PUSH 0)                   ; A
20    (CONST&PUSH 4)                      ; 1
21    (CONST&PUSH 7)                      ; -1
22    (GETVALUE&PUSH 2)                   ; C
24    (CALL2&PUSH 8)                      ; MUL
26    (CALL&PUSH 3 9)                     ; ADD
29    (GETVALUE&PUSH 1)                   ; B
31    (CONST&PUSH 4)                      ; 1
32    (CONST&PUSH 7)                      ; -1
33    (GETVALUE&PUSH 2)                   ; C
35    (CALL2&PUSH 8)                      ; MUL
37    (CALL&PUSH 3 9)                     ; ADD
40    (LIST&PUSH 2)
42    (CONST&PUSH 10)                     ; 2
43    (GETVALUE&PUSH 2)                   ; C
45    (CALL2&PUSH 5)                      ; SUB
47    (LIST&PUSH 1)
49    (GETVALUE&PUSH 3)                   ; VAR
51    (CALL&PUSH 3 11)                    ; HGFSIMP
54    (CALL2 8)                           ; MUL
56    (UNBIND 3)
58    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DEG299 (A B C) ...)-80|
(CONST 0) = DEG299
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEG299>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEG299
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEG299
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEG299>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEG299
8     (SKIP&RET 1)


Disassembly of function DEG299
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = -1
(CONST 4) = VAR
(CONST 5) = MUL
(CONST 6) = POWER
(CONST 7) = 1
(CONST 8) = ADD
(CONST 9) = HGFSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B C A VAR)
35 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (CONST&PUSH 3)                      ; -1
10    (GETVALUE&PUSH 4)                   ; VAR
12    (CALL2&PUSH 5)                      ; MUL
14    (CONST&PUSH 3)                      ; -1
15    (GETVALUE&PUSH 0)                   ; A
17    (CALL2&PUSH 5)                      ; MUL
19    (CALL2&PUSH 6)                      ; POWER
21    (GETVALUE&PUSH 0)                   ; A
23    (GETVALUE&PUSH 0)                   ; A
25    (CONST&PUSH 7)                      ; 1
26    (CONST&PUSH 3)                      ; -1
27    (GETVALUE&PUSH 2)                   ; C
29    (CALL2&PUSH 5)                      ; MUL
31    (CALL&PUSH 3 8)                     ; ADD
34    (LIST&PUSH 2)
36    (GETVALUE&PUSH 0)                   ; A
38    (CONST&PUSH 7)                      ; 1
39    (CONST&PUSH 3)                      ; -1
40    (GETVALUE&PUSH 1)                   ; B
42    (CALL2&PUSH 5)                      ; MUL
44    (CALL&PUSH 3 8)                     ; ADD
47    (LIST&PUSH 1)
49    (GETVALUE&PUSH 4)                   ; VAR
51    (CONST&PUSH 3)                      ; -1
52    (CALL2&PUSH 6)                      ; POWER
54    (CALL&PUSH 3 9)                     ; HGFSIMP
57    (CALL2 5)                           ; MUL
59    (UNBIND 3)
61    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LEGFUN (A B C) ...)-81|
(CONST 0) = LEGFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGFUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGFUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGFUN
8     (SKIP&RET 1)


Disassembly of function LEGFUN
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = 1
(CONST 4) = SUB
(CONST 5) = 2
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = LEGF24
(CONST 9) = GERED1
(CONST 10) = MUL
(CONST 11) = VAR
(CONST 12) = LEGF20
(CONST 13) = LEGF16
(CONST 14) = LEGF14
(CONST 15) = LEGF36
(CONST 16) = LEGPOL
(CONST 17) = LEGENDRE-FUNCT-TO-BE-DISCOVERED
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR B A C)
175 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (PUSH-NIL 4)
11    (CONST&PUSH 3)                      ; 1
12    (GETVALUE&PUSH 2)                   ; C
14    (CALL2 4)                           ; SUB
16    (STORE 3)
17    (GETVALUE&PUSH 0)                   ; A
19    (GETVALUE&PUSH 1)                   ; B
21    (CALL2 4)                           ; SUB
23    (STORE 2)
24    (GETVALUE&PUSH 2)                   ; C
26    (GETVALUE&PUSH 0)                   ; A
28    (CALL2&PUSH 4)                      ; SUB
30    (GETVALUE&PUSH 1)                   ; B
32    (CALL2 4)                           ; SUB
34    (STORE 1)
35    (CONST&PUSH 5)                      ; 2
36    (CONST&PUSH 6)                      ; -1
37    (CALL2 7)                           ; POWER
39    (STORE 0)
40    (LOAD&PUSH 2)
41    (LOAD&PUSH 1)
42    (CALLS2&JMPIF 2 L111)               ; EQUAL
46    (LOAD&PUSH 2)
47    (CONST&PUSH 6)                      ; -1
48    (LOAD&PUSH 2)
49    (CALL2&PUSH 10)                     ; MUL
51    (CALLS2&JMPIF 2 L124)               ; EQUAL
55    (LOAD&PUSH 1)
56    (LOAD&PUSH 1)
57    (CALLS2&JMPIF 2 L144)               ; EQUAL
61    (LOAD&PUSH 1)
62    (CONST&PUSH 6)                      ; -1
63    (LOAD&PUSH 2)
64    (CALL2&PUSH 10)                     ; MUL
66    (CALLS2&JMPIF 2 L164)               ; EQUAL
70    (LOAD&PUSH 3)
71    (LOAD&PUSH 3)
72    (CALLS2&JMPIF 2 L178)               ; EQUAL
76    (LOAD&PUSH 3)
77    (CONST&PUSH 6)                      ; -1
78    (LOAD&PUSH 4)
79    (CALL2&PUSH 10)                     ; MUL
81    (CALLS2&JMPIF 2 L198)               ; EQUAL
85    (LOAD&PUSH 3)
86    (LOAD&PUSH 2)
87    (CALLS2&JMPIFNOT 2 L269)            ; EQUAL
91    (GETVALUE&PUSH 0)                   ; A
93    (GETVALUE&PUSH 1)                   ; B
95    (LIST&PUSH 2)
97    (GETVALUE&PUSH 2)                   ; C
99    (LIST&PUSH 1)
101   (CONST 14)                          ; LEGF14
102   L102
102   (PUSH)
103   (CALL 3 9)                          ; GERED1
106   (SKIP 4)
108   (JMP L307)
111   L111
111   (GETVALUE&PUSH 0)                   ; A
113   (GETVALUE&PUSH 1)                   ; B
115   (LIST&PUSH 2)
117   (GETVALUE&PUSH 2)                   ; C
119   (LIST&PUSH 1)
121   (CONST 8)                           ; LEGF24
122   (JMP L102)
124   L124
124   (GETVALUE&PUSH 0)                   ; A
126   (GETVALUE&PUSH 1)                   ; B
128   (LIST&PUSH 2)
130   (GETVALUE&PUSH 2)                   ; C
132   (LIST&PUSH 1)
134   (GETVALUE&PUSH 11)                  ; VAR
136   (CALL 3 8)                          ; LEGF24
139   (SKIP 4)
141   (JMP L307)
144   L144
144   (GETVALUE&PUSH 0)                   ; A
146   (GETVALUE&PUSH 1)                   ; B
148   (LIST&PUSH 2)
150   (GETVALUE&PUSH 2)                   ; C
152   (LIST&PUSH 1)
154   (GETVALUE&PUSH 11)                  ; VAR
156   (CALL 3 12)                         ; LEGF20
159   (SKIP 4)
161   (JMP L307)
164   L164
164   (GETVALUE&PUSH 0)                   ; A
166   (GETVALUE&PUSH 1)                   ; B
168   (LIST&PUSH 2)
170   (GETVALUE&PUSH 2)                   ; C
172   (LIST&PUSH 1)
174   (CONST 12)                          ; LEGF20
175   (JMP L102)
178   L178
178   (GETVALUE&PUSH 0)                   ; A
180   (GETVALUE&PUSH 1)                   ; B
182   (LIST&PUSH 2)
184   (GETVALUE&PUSH 2)                   ; C
186   (LIST&PUSH 1)
188   (GETVALUE&PUSH 11)                  ; VAR
190   (CALL 3 13)                         ; LEGF16
193   (SKIP 4)
195   (JMP L307)
198   L198
198   (GETVALUE&PUSH 0)                   ; A
200   (GETVALUE&PUSH 1)                   ; B
202   (LIST&PUSH 2)
204   (GETVALUE&PUSH 2)                   ; C
206   (LIST&PUSH 1)
208   (CONST 13)                          ; LEGF16
209   (JMP L102)
212   L212
212   (GETVALUE&PUSH 0)                   ; A
214   (GETVALUE&PUSH 1)                   ; B
216   (LIST&PUSH 2)
218   (GETVALUE&PUSH 2)                   ; C
220   (LIST&PUSH 1)
222   (GETVALUE&PUSH 11)                  ; VAR
224   (CALL 3 14)                         ; LEGF14
227   (SKIP 4)
229   (JMP L307)
232   L232
232   (GETVALUE&PUSH 0)                   ; A
234   (GETVALUE&PUSH 1)                   ; B
236   (LIST&PUSH 2)
238   (GETVALUE&PUSH 2)                   ; C
240   (LIST&PUSH 1)
242   (GETVALUE&PUSH 11)                  ; VAR
244   (CALL 3 15)                         ; LEGF36
247   (SKIP 4)
249   (JMP L307)
251   L251
251   (GETVALUE&PUSH 0)                   ; A
253   (GETVALUE&PUSH 1)                   ; B
255   (GETVALUE&PUSH 2)                   ; C
257   (CALL 3 16)                         ; LEGPOL
260   (SKIP 4)
262   (JMP L307)
264   L264
264   (CONST 17)                          ; LEGENDRE-FUNCT-TO-BE-DISCOVERED
265   (SKIP 4)
267   (JMP L307)
269   L269
269   (LOAD&PUSH 3)
270   (CONST&PUSH 6)                      ; -1
271   (LOAD&PUSH 3)
272   (CALL2&PUSH 10)                     ; MUL
274   (CALLS2&JMPIF 2 L212)               ; EQUAL
278   (LOAD&PUSH 2)
279   (CONST&PUSH 6)                      ; -1
280   (LOAD&PUSH 3)
281   (CALL2&PUSH 10)                     ; MUL
283   (CALLS2&JMPIF 2 L232)               ; EQUAL
286   (LOAD&PUSH 3)
287   (LOAD&PUSH 1)
288   (CALLS2&JMPIF 2 L251)               ; EQUAL
291   (LOAD&PUSH 3)
292   (CONST&PUSH 6)                      ; -1
293   (LOAD&PUSH 2)
294   (CALL2&PUSH 10)                     ; MUL
296   (CALLS2&JMPIF 2 L251)               ; EQUAL
299   (LOAD&PUSH 2)
300   (LOAD&PUSH 2)
301   (CALLS2&JMPIF 2 L264)               ; EQUAL
304   (NIL)
305   (SKIP 4)
307   L307
307   (UNBIND 3)
309   (SKIP&RET 4)


Disassembly of function #:|(DEFUN LEGF20 (L1 L2 VAR) ...)-82|
(CONST 0) = LEGF20
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGF20>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGF20
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGF20
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGF20>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGF20
8     (SKIP&RET 1)


Disassembly of function LEGF20
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = VAR
(CONST 3) = M
(CONST 4) = N
(CONST 5) = B
(CONST 6) = C
(CONST 7) = 1
(CONST 8) = SUB
(CONST 9) = -1
(CONST 10) = ADD
(CONST 11) = MUL
(CONST 12) = LF
(CONST 13) = 2
(CONST 14) = POWER
(CONST 15) = $P
(CONST 16) = LEGEN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR N M B C L2 L1)
writes special variables : (N M C B)
49 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; VAR
9     (NIL)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; N
15    (NIL)
16    (BIND 5)                            ; B
18    (NIL)
19    (BIND 6)                            ; C
21    (GETVALUE 0)                        ; L1
23    (CDR)
24    (CAR)
25    (SETVALUE 5)                        ; B
27    (GETVALUE 1)                        ; L2
29    (CAR)
30    (SETVALUE 6)                        ; C
32    (CONST&PUSH 7)                      ; 1
33    (GETVALUE&PUSH 6)                   ; C
35    (CALL2 8)                           ; SUB
37    (SETVALUE 3)                        ; M
39    (CONST&PUSH 9)                      ; -1
40    (GETVALUE&PUSH 5)                   ; B
42    (GETVALUE&PUSH 5)                   ; B
44    (GETVALUE&PUSH 3)                   ; M
46    (CALL&PUSH 3 10)                    ; ADD
49    (CALL2 11)                          ; MUL
51    (SETVALUE 4)                        ; N
53    (PUSH)
54    (GETVALUE&PUSH 3)                   ; M
56    (CALL2&PUSH 12)                     ; LF
58    (GETVALUE&PUSH 4)                   ; N
60    (GETVALUE&PUSH 3)                   ; M
62    (CONST&PUSH 7)                      ; 1
63    (GETVALUE&PUSH 2)                   ; VAR
65    (CALL2&PUSH 8)                      ; SUB
67    (CONST&PUSH 13)                     ; 2
68    (CONST&PUSH 9)                      ; -1
69    (CALL2&PUSH 14)                     ; POWER
71    (CALL2&PUSH 14)                     ; POWER
73    (CONST&PUSH 15)                     ; $P
74    (CALL&PUSH 4 16)                    ; LEGEN
77    (CALL2 11)                          ; MUL
79    (UNBIND 7)
81    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LEGF24 (L1 L2 VAR) ...)-83|
(CONST 0) = LEGF24
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGF24>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGF24
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGF24
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGF24>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGF24
8     (SKIP&RET 1)


Disassembly of function LEGF24
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = VAR
(CONST 3) = M
(CONST 4) = N
(CONST 5) = A
(CONST 6) = C
(CONST 7) = 1
(CONST 8) = SUB
(CONST 9) = -1
(CONST 10) = ADD
(CONST 11) = MUL
(CONST 12) = LF
(CONST 13) = POWER
(CONST 14) = 2
(CONST 15) = $P
(CONST 16) = LEGEN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N VAR M A C L2 L1)
writes special variables : (N M C A)
55 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; VAR
9     (NIL)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; N
15    (NIL)
16    (BIND 5)                            ; A
18    (NIL)
19    (BIND 6)                            ; C
21    (GETVALUE 0)                        ; L1
23    (CAR)
24    (SETVALUE 5)                        ; A
26    (GETVALUE 1)                        ; L2
28    (CAR)
29    (SETVALUE 6)                        ; C
31    (CONST&PUSH 7)                      ; 1
32    (GETVALUE&PUSH 6)                   ; C
34    (CALL2 8)                           ; SUB
36    (SETVALUE 3)                        ; M
38    (CONST&PUSH 9)                      ; -1
39    (GETVALUE&PUSH 5)                   ; A
41    (GETVALUE&PUSH 5)                   ; A
43    (GETVALUE&PUSH 3)                   ; M
45    (CALL&PUSH 3 10)                    ; ADD
48    (CALL2 11)                          ; MUL
50    (SETVALUE 4)                        ; N
52    (PUSH)
53    (GETVALUE&PUSH 3)                   ; M
55    (CALL2&PUSH 12)                     ; LF
57    (GETVALUE&PUSH 2)                   ; VAR
59    (GETVALUE&PUSH 4)                   ; N
61    (GETVALUE&PUSH 3)                   ; M
63    (CALL2&PUSH 10)                     ; ADD
65    (CALL2&PUSH 13)                     ; POWER
67    (GETVALUE&PUSH 4)                   ; N
69    (GETVALUE&PUSH 3)                   ; M
71    (CONST&PUSH 7)                      ; 1
72    (GETVALUE&PUSH 2)                   ; VAR
74    (CALL2&PUSH 8)                      ; SUB
76    (CONST&PUSH 14)                     ; 2
77    (CONST&PUSH 9)                      ; -1
78    (CALL2&PUSH 13)                     ; POWER
80    (CALL2&PUSH 13)                     ; POWER
82    (CONST&PUSH 9)                      ; -1
83    (CALL2&PUSH 13)                     ; POWER
85    (CONST&PUSH 15)                     ; $P
86    (CALL&PUSH 4 16)                    ; LEGEN
89    (CALL 3 11)                         ; MUL
92    (UNBIND 7)
94    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LEGF16 (L1 L2 VAR) ...)-84|
(CONST 0) = LEGF16
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGF16>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGF16
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGF16
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGF16>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGF16
8     (SKIP&RET 1)


Disassembly of function LEGF16
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = VAR
(CONST 3) = M
(CONST 4) = N
(CONST 5) = A
(CONST 6) = C
(CONST 7) = 1
(CONST 8) = SUB
(CONST 9) = -1
(CONST 10) = MUL
(CONST 11) = 2
(CONST 12) = POWER
(CONST 13) = -2
(CONST 14) = DIV
(CONST 15) = GM
(CONST 16) = ADD
(CONST 17) = $P
(CONST 18) = LEGEN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M VAR N A C L2 L1)
writes special variables : (N M C A)
69 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; VAR
9     (NIL)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; N
15    (NIL)
16    (BIND 5)                            ; A
18    (NIL)
19    (BIND 6)                            ; C
21    (GETVALUE 0)                        ; L1
23    (CAR)
24    (SETVALUE 5)                        ; A
26    (GETVALUE 1)                        ; L2
28    (CAR)
29    (SETVALUE 6)                        ; C
31    (CONST&PUSH 7)                      ; 1
32    (GETVALUE&PUSH 6)                   ; C
34    (CALL2 8)                           ; SUB
36    (SETVALUE 3)                        ; M
38    (CONST&PUSH 9)                      ; -1
39    (GETVALUE&PUSH 5)                   ; A
41    (CALL2 10)                          ; MUL
43    (SETVALUE 4)                        ; N
45    (CONST&PUSH 11)                     ; 2
46    (CONST&PUSH 9)                      ; -1
47    (GETVALUE&PUSH 4)                   ; N
49    (CALL2&PUSH 10)                     ; MUL
51    (CALL2&PUSH 12)                     ; POWER
53    (GETVALUE&PUSH 2)                   ; VAR
55    (CONST&PUSH 7)                      ; 1
56    (CALL2&PUSH 8)                      ; SUB
58    (GETVALUE&PUSH 3)                   ; M
60    (CONST&PUSH 13)                     ; -2
61    (CALL2&PUSH 14)                     ; DIV
63    (CALL2&PUSH 12)                     ; POWER
65    (CONST&PUSH 7)                      ; 1
66    (GETVALUE&PUSH 3)                   ; M
68    (CALL2&PUSH 8)                      ; SUB
70    (CALL1&PUSH 15)                     ; GM
72    (CONST&PUSH 9)                      ; -1
73    (CALL2&PUSH 12)                     ; POWER
75    (GETVALUE&PUSH 2)                   ; VAR
77    (CONST&PUSH 7)                      ; 1
78    (CALL2&PUSH 16)                     ; ADD
80    (GETVALUE&PUSH 3)                   ; M
82    (CONST&PUSH 11)                     ; 2
83    (CALL2&PUSH 14)                     ; DIV
85    (GETVALUE&PUSH 4)                   ; N
87    (CALL2&PUSH 16)                     ; ADD
89    (CALL2&PUSH 12)                     ; POWER
91    (GETVALUE&PUSH 4)                   ; N
93    (GETVALUE&PUSH 3)                   ; M
95    (CONST&PUSH 7)                      ; 1
96    (GETVALUE&PUSH 2)                   ; VAR
98    (CALL2&PUSH 16)                     ; ADD
100   (CONST&PUSH 7)                      ; 1
101   (GETVALUE&PUSH 2)                   ; VAR
103   (CALL2&PUSH 8)                      ; SUB
105   (CALL2&PUSH 14)                     ; DIV
107   (CONST&PUSH 17)                     ; $P
108   (CALL&PUSH 4 18)                    ; LEGEN
111   (CALL 5 10)                         ; MUL
114   (UNBIND 7)
116   (SKIP&RET 4)


Disassembly of function #:|(DEFUN LF (N M) ...)-85|
(CONST 0) = LF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LF
8     (SKIP&RET 1)


Disassembly of function LF
(CONST 0) = N
(CONST 1) = M
(CONST 2) = 2
(CONST 3) = POWER
(CONST 4) = VAR
(CONST 5) = 1
(CONST 6) = SUB
(CONST 7) = DIV
(CONST 8) = -1
(CONST 9) = GM
(CONST 10) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR M)
27 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (CONST&PUSH 2)                      ; 2
7     (GETVALUE&PUSH 1)                   ; M
9     (CALL2&PUSH 3)                      ; POWER
11    (GETVALUE&PUSH 4)                   ; VAR
13    (CONST&PUSH 2)                      ; 2
14    (CALL2&PUSH 3)                      ; POWER
16    (CONST&PUSH 5)                      ; 1
17    (CALL2&PUSH 6)                      ; SUB
19    (GETVALUE&PUSH 1)                   ; M
21    (CONST&PUSH 2)                      ; 2
22    (CALL2&PUSH 7)                      ; DIV
24    (CALL2&PUSH 3)                      ; POWER
26    (CONST&PUSH 8)                      ; -1
27    (CALL2&PUSH 3)                      ; POWER
29    (CONST&PUSH 5)                      ; 1
30    (GETVALUE&PUSH 1)                   ; M
32    (CALL2&PUSH 6)                      ; SUB
34    (CALL1&PUSH 9)                      ; GM
36    (CONST&PUSH 8)                      ; -1
37    (CALL2&PUSH 3)                      ; POWER
39    (CALL 3 10)                         ; MUL
42    (UNBIND 2)
44    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LEGF14 (L1 L2 VAR) ...)-86|
(CONST 0) = LEGF14
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGF14>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGF14
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGF14
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGF14>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGF14
8     (SKIP&RET 1)


Disassembly of function LEGF14
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = VAR
(CONST 3) = M
(CONST 4) = N
(CONST 5) = A
(CONST 6) = C
(CONST 7) = B
(CONST 8) = S+C
(CONST 9) = L
(CONST 10) = CDRAS
(CONST 11) = 0
(CONST 12) = F
(CONST 13) = -1
(CONST 14) = MUL
(CONST 15) = 1
(CONST 16) = SUB
(CONST 17) = ADD
(CONST 18) = 2
(CONST 19) = DIV
(CONST 20) = POWER
(CONST 21) = -2
(CONST 22) = GM
(CONST 23) = $P
(CONST 24) = LEGEN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M VAR A C L2 L L1)
writes special variables : (N M C A L)
79 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; VAR
9     (NIL)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; N
15    (NIL)
16    (BIND 5)                            ; A
18    (NIL)
19    (BIND 6)                            ; C
21    (NIL)
22    (BIND 7)                            ; B
24    (GETVALUE 0)                        ; L1
26    (CAR&PUSH)
27    (CALL1 8)                           ; S+C
29    (SETVALUE 9)                        ; L
31    (CONST&PUSH 6)                      ; C
32    (GETVALUE&PUSH 9)                   ; L
34    (CALL2&PUSH 10)                     ; CDRAS
36    (JMPIFEQTO 11 L126)                 ; 0
40    (CONST&PUSH 13)                     ; -1
41    (CONST&PUSH 12)                     ; F
42    (GETVALUE&PUSH 9)                   ; L
44    (CALL2&PUSH 10)                     ; CDRAS
46    (CALL2 14)                          ; MUL
48    L48
48    (SETVALUE 5)                        ; A
50    (GETVALUE 1)                        ; L2
52    (CAR)
53    (SETVALUE 6)                        ; C
55    (CONST&PUSH 15)                     ; 1
56    (GETVALUE&PUSH 6)                   ; C
58    (CALL2 16)                          ; SUB
60    (SETVALUE 3)                        ; M
62    (CONST&PUSH 13)                     ; -1
63    (GETVALUE&PUSH 5)                   ; A
65    (CALL2 14)                          ; MUL
67    (SETVALUE 4)                        ; N
69    (GETVALUE&PUSH 2)                   ; VAR
71    (CONST&PUSH 15)                     ; 1
72    (CALL2&PUSH 17)                     ; ADD
74    (GETVALUE&PUSH 3)                   ; M
76    (CONST&PUSH 18)                     ; 2
77    (CALL2&PUSH 19)                     ; DIV
79    (CALL2&PUSH 20)                     ; POWER
81    (GETVALUE&PUSH 2)                   ; VAR
83    (CONST&PUSH 15)                     ; 1
84    (CALL2&PUSH 16)                     ; SUB
86    (GETVALUE&PUSH 3)                   ; M
88    (CONST&PUSH 21)                     ; -2
89    (CALL2&PUSH 19)                     ; DIV
91    (CALL2&PUSH 20)                     ; POWER
93    (CONST&PUSH 15)                     ; 1
94    (GETVALUE&PUSH 3)                   ; M
96    (CALL2&PUSH 16)                     ; SUB
98    (CALL1&PUSH 22)                     ; GM
100   (CONST&PUSH 13)                     ; -1
101   (CALL2&PUSH 20)                     ; POWER
103   (GETVALUE&PUSH 4)                   ; N
105   (GETVALUE&PUSH 3)                   ; M
107   (CONST&PUSH 15)                     ; 1
108   (CONST&PUSH 18)                     ; 2
109   (GETVALUE&PUSH 2)                   ; VAR
111   (CALL2&PUSH 14)                     ; MUL
113   (CALL2&PUSH 16)                     ; SUB
115   (CONST&PUSH 23)                     ; $P
116   (CALL&PUSH 4 24)                    ; LEGEN
119   (CALL 4 14)                         ; MUL
122   (UNBIND 8)
124   (SKIP&RET 4)
126   L126
126   (CONST&PUSH 12)                     ; F
127   (GETVALUE&PUSH 9)                   ; L
129   (CALL2 10)                          ; CDRAS
131   (JMP L48)


Disassembly of function #:|(DEFUN LEGF36 (L1 L2 VAR) ...)-87|
(CONST 0) = LEGF36
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGF36>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGF36
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGF36
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGF36>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGF36
8     (SKIP&RET 1)


Disassembly of function LEGF36
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = VAR
(CONST 3) = N
(CONST 4) = M
(CONST 5) = A
(CONST 6) = B
(CONST 7) = 1
(CONST 8) = SUB
(CONST 9) = 2
(CONST 10) = POWER
(CONST 11) = ADD
(CONST 12) = GM
(CONST 13) = DIV
(CONST 14) = -1
(CONST 15) = MUL
(CONST 16) = -2
(CONST 17) = $%E
(CONST 18) = $%I
(CONST 19) = $%PI
(CONST 20) = $Q
(CONST 21) = LEGEN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR M N A B L1)
writes special variables : (M N B A)
86 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; VAR
9     (NIL)
10    (BIND 3)                            ; N
12    (NIL)
13    (BIND 4)                            ; M
15    (NIL)
16    (BIND 5)                            ; A
18    (NIL)
19    (BIND 6)                            ; B
21    (GETVALUE 0)                        ; L1
23    (CAR)
24    (SETVALUE 5)                        ; A
26    (GETVALUE 0)                        ; L1
28    (CDR)
29    (CAR)
30    (SETVALUE 6)                        ; B
32    (PUSH)
33    (CONST&PUSH 7)                      ; 1
34    (CALL2 8)                           ; SUB
36    (SETVALUE 3)                        ; N
38    (GETVALUE&PUSH 6)                   ; B
40    (GETVALUE&PUSH 5)                   ; A
42    (CALL2 8)                           ; SUB
44    (SETVALUE 4)                        ; M
46    (CONST&PUSH 9)                      ; 2
47    (GETVALUE&PUSH 3)                   ; N
49    (CALL2&PUSH 10)                     ; POWER
51    (CONST&PUSH 7)                      ; 1
52    (GETVALUE&PUSH 3)                   ; N
54    (CALL2&PUSH 11)                     ; ADD
56    (CALL1&PUSH 12)                     ; GM
58    (CONST&PUSH 7)                      ; 1
59    (GETVALUE&PUSH 3)                   ; N
61    (GETVALUE&PUSH 4)                   ; M
63    (CALL&PUSH 3 11)                    ; ADD
66    (CALL1&PUSH 12)                     ; GM
68    (GETVALUE&PUSH 2)                   ; VAR
70    (CONST&PUSH 7)                      ; 1
71    (CALL2&PUSH 11)                     ; ADD
73    (GETVALUE&PUSH 4)                   ; M
75    (CONST&PUSH 9)                      ; 2
76    (CALL2&PUSH 13)                     ; DIV
78    (CONST&PUSH 14)                     ; -1
79    (GETVALUE&PUSH 3)                   ; N
81    (CALL2&PUSH 15)                     ; MUL
83    (CONST&PUSH 14)                     ; -1
84    (CALL&PUSH 3 11)                    ; ADD
87    (CALL2&PUSH 10)                     ; POWER
89    (GETVALUE&PUSH 2)                   ; VAR
91    (CONST&PUSH 7)                      ; 1
92    (CALL2&PUSH 8)                      ; SUB
94    (GETVALUE&PUSH 4)                   ; M
96    (CONST&PUSH 16)                     ; -2
97    (CALL2&PUSH 13)                     ; DIV
99    (CALL2&PUSH 10)                     ; POWER
101   (CONST&PUSH 9)                      ; 2
102   (GETVALUE&PUSH 3)                   ; N
104   (GETVALUE&PUSH 3)                   ; N
106   (CALL&PUSH 3 11)                    ; ADD
109   (CALL1&PUSH 12)                     ; GM
111   (CONST&PUSH 14)                     ; -1
112   (CALL2&PUSH 10)                     ; POWER
114   (CONST&PUSH 17)                     ; $%E
115   (CONST&PUSH 14)                     ; -1
116   (CONST&PUSH 18)                     ; $%I
117   (GETVALUE&PUSH 4)                   ; M
119   (CONST&PUSH 19)                     ; $%PI
120   (CALL&PUSH 4 15)                    ; MUL
123   (CALL2&PUSH 10)                     ; POWER
125   (GETVALUE&PUSH 3)                   ; N
127   (GETVALUE&PUSH 4)                   ; M
129   (CONST&PUSH 9)                      ; 2
130   (GETVALUE&PUSH 2)                   ; VAR
132   (CALL2&PUSH 8)                      ; SUB
134   (GETVALUE&PUSH 2)                   ; VAR
136   (CALL2&PUSH 13)                     ; DIV
138   (CONST&PUSH 20)                     ; $Q
139   (CALL&PUSH 4 21)                    ; LEGEN
142   (CALL 8 15)                         ; MUL
145   (UNBIND 7)
147   (SKIP&RET 4)


Disassembly of function #:|(DEFUN LEGEN (N M X ...) ...)-88|
(CONST 0) = LEGEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGEN
8     (SKIP&RET 1)


Disassembly of function LEGEN
(CONST 0) = N
(CONST 1) = M
(CONST 2) = X
(CONST 3) = (MQAPPLY)
(CONST 4) = $Q
(CONST 5) = ($%Q ARRAY)
(CONST 6) = ($%P ARRAY)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X M N)
22 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; N
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; X
9     (CONST&PUSH 3)                      ; (MQAPPLY)
10    (LOAD&PUSH 11)
11    (JMPIFEQTO 4 L30)                   ; $Q
14    (CONST 6)                           ; ($%P ARRAY)
15    L15
15    (PUSH)
16    (GETVALUE&PUSH 0)                   ; N
18    (GETVALUE&PUSH 1)                   ; M
20    (LIST&PUSH 3)
22    (GETVALUE&PUSH 2)                   ; X
24    (LIST 3)
26    (UNBIND 3)
28    (SKIP&RET 5)
30    L30
30    (CONST 5)                           ; ($%Q ARRAY)
31    (JMP L15)


Disassembly of function #:|(DEFUN LEGPOL (A B C) ...)-89|
(CONST 0) = LEGPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEGPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEGPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEGPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEGPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEGPOL
8     (SKIP&RET 1)


Disassembly of function LEGPOL
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = L
(CONST 4) = V
(CONST 5) = HYP-NEGP-IN-L
(CONST 6) = FAIL-1-IN-C-1-CASE
(CONST 7) = ADD
(CONST 8) = 2
(CONST 9) = DIV
(CONST 10) = VFVP
(CONST 11) = ZL-ASSOC
(CONST 12) = ((RAT SIMP) 1 2)
(CONST 13) = 1
(CONST 14) = -1
(CONST 15) = MUL
(CONST 16) = VAR
(CONST 17) = SUB
(CONST 18) = LEGENPOL
(CONST 19) = ((RAT SIMP) 1 2)
(CONST 20) = ((RAT SIMP) 1 2)
(CONST 21) = FACTORIAL
(CONST 22) = POWER
(CONST 23) = MULTAUG
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR C L B A)
writes special variables : (V L)
87 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; L
12    (NIL)
13    (BIND 4)                            ; V
15    (GETVALUE&PUSH 0)                   ; A
17    (LIST&PUSH 1)
19    (CALL1&JMPIFNOT 5 L118)             ; HYP-NEGP-IN-L
23    (GETVALUE&PUSH 1)                   ; B
25    (GETVALUE&PUSH 0)                   ; A
27    (CALL2&PUSH 7)                      ; ADD
29    (CONST&PUSH 8)                      ; 2
30    (CALL2&PUSH 9)                      ; DIV
32    (CALL1 10)                          ; VFVP
34    (SETVALUE 3)                        ; L
36    (CONST&PUSH 4)                      ; V
37    (GETVALUE&PUSH 3)                   ; L
39    (CALL2 11)                          ; ZL-ASSOC
41    (CDR)
42    (SETVALUE 4)                        ; V
44    (PUSH)
45    (CONST&PUSH 12)                     ; ((RAT SIMP) 1 2)
46    (CALLS2&JMPIFNOT 2 L55)             ; EQUAL
49    (GETVALUE&PUSH 2)                   ; C
51    (JMPIFEQTO 13 L123)                 ; 1
55    L55
55    (GETVALUE&PUSH 2)                   ; C
57    (CONST&PUSH 19)                     ; ((RAT SIMP) 1 2)
58    (CALLS2&JMPIFNOT 2 L140)            ; EQUAL
62    (GETVALUE&PUSH 1)                   ; B
64    (GETVALUE&PUSH 0)                   ; A
66    (CALL2&PUSH 17)                     ; SUB
68    (CONST&PUSH 20)                     ; ((RAT SIMP) 1 2)
69    (CALLS2&JMPIFNOT 2 L140)            ; EQUAL
73    (CONST&PUSH 14)                     ; -1
74    (GETVALUE&PUSH 0)                   ; A
76    (CALL2&PUSH 15)                     ; MUL
78    (CALL1&PUSH 21)                     ; FACTORIAL
80    (CONST&PUSH 8)                      ; 2
81    (GETVALUE&PUSH 0)                   ; A
83    (CALL2&PUSH 22)                     ; POWER
85    (CONST&PUSH 8)                      ; 2
86    (CONST&PUSH 14)                     ; -1
87    (CALL2&PUSH 22)                     ; POWER
89    (CONST&PUSH 14)                     ; -1
90    (GETVALUE&PUSH 0)                   ; A
92    (CALL2&PUSH 15)                     ; MUL
94    (CALL2&PUSH 23)                     ; MULTAUG
96    (CONST&PUSH 14)                     ; -1
97    (GETVALUE&PUSH 0)                   ; A
99    (CALL2&PUSH 15)                     ; MUL
101   (GETVALUE&PUSH 16)                  ; VAR
103   (CONST&PUSH 14)                     ; -1
104   (CONST&PUSH 8)                      ; 2
105   (CALL2&PUSH 9)                      ; DIV
107   (CALL2&PUSH 22)                     ; POWER
109   (CALL2&PUSH 18)                     ; LEGENPOL
111   (CALL 4 15)                         ; MUL
114   L114
114   (UNBIND 2)
116   (JMP L143)
118   L118
118   (CONST 6)                           ; FAIL-1-IN-C-1-CASE
119   (UNBIND 2)
121   (JMP L143)
123   L123
123   (CONST&PUSH 14)                     ; -1
124   (GETVALUE&PUSH 0)                   ; A
126   (CALL2&PUSH 15)                     ; MUL
128   (CONST&PUSH 13)                     ; 1
129   (CONST&PUSH 8)                      ; 2
130   (GETVALUE&PUSH 16)                  ; VAR
132   (CALL2&PUSH 15)                     ; MUL
134   (CALL2&PUSH 17)                     ; SUB
136   (CALL2 18)                          ; LEGENPOL
138   (JMP L114)
140   L140
140   (NIL)
141   (UNBIND 2)
143   L143
143   (UNBIND 3)
145   (SKIP&RET 4)


Disassembly of function #:|(DEFUN MULTAUG (A N) ...)-90|
(CONST 0) = MULTAUG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULTAUG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULTAUG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULTAUG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULTAUG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULTAUG
8     (SKIP&RET 1)


Disassembly of function MULTAUG
(CONST 0) = A
(CONST 1) = N
(CONST 2) = 1
(CONST 3) = ADD
(CONST 4) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A N)
21 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 1)                   ; N
8     (CALLS2&JMPIF 145 L30)              ; ZEROP
11    (GETVALUE&PUSH 0)                   ; A
13    (GETVALUE&PUSH 0)                   ; A
15    (CONST&PUSH 2)                      ; 1
16    (CALL2&PUSH 3)                      ; ADD
18    (GETVALUE&PUSH 1)                   ; N
20    (CALLS2&PUSH 151)                   ; 1-
22    (JSR&PUSH L0)
24    (CALL2 4)                           ; MUL
26    L26
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (CONST 2)                           ; 1
31    (JMP L26)


Disassembly of function #:|(DEFUN GERED1 (L1 L2 SIMPFLG) ...)-91|
(CONST 0) = GERED1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GERED1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GERED1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GERED1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GERED1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GERED1
8     (SKIP&RET 1)


Disassembly of function GERED1
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = 1
(CONST 3) = VAR
(CONST 4) = SUB
(CONST 5) = -1
(CONST 6) = MUL
(CONST 7) = ADD
(CONST 8) = POWER
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L1 L2 VAR)
39 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (CONST&PUSH 2)                      ; 1
7     (GETVALUE&PUSH 3)                   ; VAR
9     (CALL2&PUSH 4)                      ; SUB
11    (GETVALUE 1)                        ; L2
13    (CAR&PUSH)
14    (CONST&PUSH 5)                      ; -1
15    (GETVALUE 0)                        ; L1
17    (CAR&PUSH)
18    (CALL2&PUSH 6)                      ; MUL
20    (CONST&PUSH 5)                      ; -1
21    (GETVALUE 0)                        ; L1
23    (CDR)
24    (CAR&PUSH)
25    (CALL2&PUSH 6)                      ; MUL
27    (CALL&PUSH 3 7)                     ; ADD
30    (CALL2&PUSH 8)                      ; POWER
32    (LOAD&PUSH 8)
33    (GETVALUE 1)                        ; L2
35    (CAR&PUSH)
36    (GETVALUE 0)                        ; L1
38    (CAR&PUSH)
39    (CALL2&PUSH 4)                      ; SUB
41    (GETVALUE 1)                        ; L2
43    (CAR&PUSH)
44    (GETVALUE 0)                        ; L1
46    (CDR)
47    (CAR&PUSH)
48    (CALL2&PUSH 4)                      ; SUB
50    (LIST&PUSH 2)
52    (GETVALUE&PUSH 1)                   ; L2
54    (GETVALUE&PUSH 3)                   ; VAR
56    (FUNCALL&PUSH 3)
58    (CALL2 6)                           ; MUL
60    (UNBIND 2)
62    (SKIP&RET 4)


Disassembly of function #:|(DEFUN GERED2 (A B C) ...)-92|
(CONST 0) = GERED2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GERED2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GERED2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GERED2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GERED2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GERED2
8     (SKIP&RET 1)


Disassembly of function GERED2
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = 1
(CONST 4) = VAR
(CONST 5) = SUB
(CONST 6) = -1
(CONST 7) = MUL
(CONST 8) = POWER
(CONST 9) = DIV
(CONST 10) = HGFSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B C A VAR)
29 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (CONST&PUSH 3)                      ; 1
10    (GETVALUE&PUSH 4)                   ; VAR
12    (CALL2&PUSH 5)                      ; SUB
14    (CONST&PUSH 6)                      ; -1
15    (GETVALUE&PUSH 0)                   ; A
17    (CALL2&PUSH 7)                      ; MUL
19    (CALL2&PUSH 8)                      ; POWER
21    (GETVALUE&PUSH 0)                   ; A
23    (GETVALUE&PUSH 2)                   ; C
25    (GETVALUE&PUSH 1)                   ; B
27    (CALL2&PUSH 5)                      ; SUB
29    (LIST&PUSH 2)
31    (GETVALUE&PUSH 2)                   ; C
33    (LIST&PUSH 1)
35    (GETVALUE&PUSH 4)                   ; VAR
37    (GETVALUE&PUSH 4)                   ; VAR
39    (CONST&PUSH 3)                      ; 1
40    (CALL2&PUSH 5)                      ; SUB
42    (CALL2&PUSH 9)                      ; DIV
44    (CALL&PUSH 3 10)                    ; HGFSIMP
47    (CALL2 7)                           ; MUL
49    (UNBIND 3)
51    (SKIP&RET 4)


Disassembly of function #:|(DEFUN GEREDF (A B C) ...)-93|
(CONST 0) = GEREDF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GEREDF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GEREDF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GEREDF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GEREDF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GEREDF
8     (SKIP&RET 1)


Disassembly of function GEREDF
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = GM
(CONST 4) = -1
(CONST 5) = MUL
(CONST 6) = ADD
(CONST 7) = VAR
(CONST 8) = POWER
(CONST 9) = 1
(CONST 10) = DIV
(CONST 11) = SUB
(CONST 12) = HGFSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR B A C)
114 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE&PUSH 2)                   ; C
11    (CALL1&PUSH 3)                      ; GM
13    (GETVALUE&PUSH 2)                   ; C
15    (CONST&PUSH 4)                      ; -1
16    (GETVALUE&PUSH 0)                   ; A
18    (CALL2&PUSH 5)                      ; MUL
20    (CONST&PUSH 4)                      ; -1
21    (GETVALUE&PUSH 1)                   ; B
23    (CALL2&PUSH 5)                      ; MUL
25    (CALL&PUSH 3 6)                     ; ADD
28    (CALL1&PUSH 3)                      ; GM
30    (GETVALUE&PUSH 7)                   ; VAR
32    (CONST&PUSH 4)                      ; -1
33    (GETVALUE&PUSH 0)                   ; A
35    (CALL2&PUSH 5)                      ; MUL
37    (CALL2&PUSH 8)                      ; POWER
39    (GETVALUE&PUSH 0)                   ; A
41    (GETVALUE&PUSH 0)                   ; A
43    (CONST&PUSH 9)                      ; 1
44    (CONST&PUSH 4)                      ; -1
45    (GETVALUE&PUSH 2)                   ; C
47    (CALL2&PUSH 5)                      ; MUL
49    (CALL&PUSH 3 6)                     ; ADD
52    (LIST&PUSH 2)
54    (GETVALUE&PUSH 0)                   ; A
56    (GETVALUE&PUSH 1)                   ; B
58    (CONST&PUSH 4)                      ; -1
59    (GETVALUE&PUSH 2)                   ; C
61    (CALL2&PUSH 5)                      ; MUL
63    (CONST&PUSH 9)                      ; 1
64    (CALL&PUSH 4 6)                     ; ADD
67    (LIST&PUSH 1)
69    (CONST&PUSH 9)                      ; 1
70    (CONST&PUSH 9)                      ; 1
71    (GETVALUE&PUSH 7)                   ; VAR
73    (CALL2&PUSH 10)                     ; DIV
75    (CALL2&PUSH 11)                     ; SUB
77    (CALL&PUSH 3 12)                    ; HGFSIMP
80    (CALL&PUSH 4 5)                     ; MUL
83    (GETVALUE&PUSH 2)                   ; C
85    (GETVALUE&PUSH 0)                   ; A
87    (CALL2&PUSH 11)                     ; SUB
89    (CALL1&PUSH 3)                      ; GM
91    (GETVALUE&PUSH 2)                   ; C
93    (GETVALUE&PUSH 1)                   ; B
95    (CALL2&PUSH 11)                     ; SUB
97    (CALL1&PUSH 3)                      ; GM
99    (CALL2&PUSH 5)                      ; MUL
101   (CALL2&PUSH 10)                     ; DIV
103   (GETVALUE&PUSH 2)                   ; C
105   (CALL1&PUSH 3)                      ; GM
107   (GETVALUE&PUSH 0)                   ; A
109   (GETVALUE&PUSH 1)                   ; B
111   (CONST&PUSH 4)                      ; -1
112   (GETVALUE&PUSH 2)                   ; C
114   (CALL2&PUSH 5)                      ; MUL
116   (CALL&PUSH 3 6)                     ; ADD
119   (CALL1&PUSH 3)                      ; GM
121   (CONST&PUSH 9)                      ; 1
122   (GETVALUE&PUSH 7)                   ; VAR
124   (CALL2&PUSH 11)                     ; SUB
126   (GETVALUE&PUSH 2)                   ; C
128   (CONST&PUSH 4)                      ; -1
129   (GETVALUE&PUSH 0)                   ; A
131   (CALL2&PUSH 5)                      ; MUL
133   (CONST&PUSH 4)                      ; -1
134   (GETVALUE&PUSH 1)                   ; B
136   (CALL2&PUSH 5)                      ; MUL
138   (CALL&PUSH 3 6)                     ; ADD
141   (CALL2&PUSH 8)                      ; POWER
143   (GETVALUE&PUSH 7)                   ; VAR
145   (GETVALUE&PUSH 0)                   ; A
147   (GETVALUE&PUSH 2)                   ; C
149   (CALL2&PUSH 11)                     ; SUB
151   (CALL2&PUSH 8)                      ; POWER
153   (GETVALUE&PUSH 2)                   ; C
155   (GETVALUE&PUSH 0)                   ; A
157   (CALL2&PUSH 11)                     ; SUB
159   (CONST&PUSH 9)                      ; 1
160   (GETVALUE&PUSH 0)                   ; A
162   (CALL2&PUSH 11)                     ; SUB
164   (LIST&PUSH 2)
166   (GETVALUE&PUSH 2)                   ; C
168   (CONST&PUSH 4)                      ; -1
169   (GETVALUE&PUSH 0)                   ; A
171   (CALL2&PUSH 5)                      ; MUL
173   (CONST&PUSH 4)                      ; -1
174   (GETVALUE&PUSH 1)                   ; B
176   (CALL2&PUSH 5)                      ; MUL
178   (CONST&PUSH 9)                      ; 1
179   (CALL&PUSH 4 6)                     ; ADD
182   (LIST&PUSH 1)
184   (CONST&PUSH 9)                      ; 1
185   (CONST&PUSH 9)                      ; 1
186   (GETVALUE&PUSH 7)                   ; VAR
188   (CALL2&PUSH 10)                     ; DIV
190   (CALL2&PUSH 11)                     ; SUB
192   (CALL&PUSH 3 12)                    ; HGFSIMP
195   (CALL&PUSH 5 5)                     ; MUL
198   (GETVALUE&PUSH 0)                   ; A
200   (CALL1&PUSH 3)                      ; GM
202   (GETVALUE&PUSH 1)                   ; B
204   (CALL1&PUSH 3)                      ; GM
206   (CALL2&PUSH 5)                      ; MUL
208   (CALL2&PUSH 10)                     ; DIV
210   (CALL2 6)                           ; ADD
212   (UNBIND 3)
214   (SKIP&RET 4)


Disassembly of function #:|(DEFUN TRIG-LOG (L1 L2) ...)-94|
(CONST 0) = TRIG-LOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG-LOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG-LOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG-LOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG-LOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG-LOG
8     (SKIP&RET 1)


Disassembly of function TRIG-LOG
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = SIMPLIFYA
(CONST 3) = ((RAT SIMP) 3 2)
(CONST 4) = TRIG-LOG-3
(CONST 5) = ((RAT SIMP) 1 2)
(CONST 6) = TRIG-LOG-1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L1 L2)
30 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (GETVALUE 1)                        ; L2
8     (CAR&PUSH)
9     (NIL&PUSH)
10    (CALL2&PUSH 2)                      ; SIMPLIFYA
12    (CONST&PUSH 3)                      ; ((RAT SIMP) 3 2)
13    (CALLS2&JMPIF 2 L31)                ; EQUAL
16    (GETVALUE 1)                        ; L2
18    (CAR&PUSH)
19    (NIL&PUSH)
20    (CALL2&PUSH 2)                      ; SIMPLIFYA
22    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
23    (CALLS2&JMPIF 2 L39)                ; EQUAL
26    (NIL)
27    L27
27    (UNBIND 2)
29    (SKIP&RET 3)
31    L31
31    (GETVALUE&PUSH 0)                   ; L1
33    (GETVALUE&PUSH 1)                   ; L2
35    (CALL2 4)                           ; TRIG-LOG-3
37    (JMP L27)
39    L39
39    (GETVALUE&PUSH 0)                   ; L1
41    (GETVALUE&PUSH 1)                   ; L2
43    (CALL2 6)                           ; TRIG-LOG-1
45    (JMP L27)


Disassembly of function #:|(DEFUN TRIG-LOG-3 (L1 L2) ...)-95|
(CONST 0) = TRIG-LOG-3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG-LOG-3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG-LOG-3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG-LOG-3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG-LOG-3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG-LOG-3
8     (SKIP&RET 1)


Disassembly of function TRIG-LOG-3
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = 1
(CONST 3) = 2
(CONST 4) = DIV
(CONST 5) = TRIG-LOG-3-EXEC
(CONST 6) = TRIG-LOG-3A-EXEC
(CONST 7) = ADD
(CONST 8) = TRIG-SIN
(CONST 9) = SUB
(CONST 10) = TRIG-3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1)
100 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (GETVALUE 0)                        ; L1
8     (CAR&PUSH)
9     (JMPIFEQTO 2 L19)                   ; 1
12    (GETVALUE 0)                        ; L1
14    (CDR)
15    (CAR&PUSH)
16    (JMPIFNOTEQTO 2 L42)                ; 1
19    L19
19    (GETVALUE 0)                        ; L1
21    (CAR&PUSH)
22    (CONST&PUSH 2)                      ; 1
23    (CONST&PUSH 3)                      ; 2
24    (CALL2&PUSH 4)                      ; DIV
26    (CALLS2&JMPIF 2 L132)               ; EQUAL
30    (GETVALUE 0)                        ; L1
32    (CDR)
33    (CAR&PUSH)
34    (CONST&PUSH 2)                      ; 1
35    (CONST&PUSH 3)                      ; 2
36    (CALL2&PUSH 4)                      ; DIV
38    (CALLS2&JMPIF 2 L132)               ; EQUAL
42    L42
42    (GETVALUE 0)                        ; L1
44    (CAR&PUSH)
45    (GETVALUE 0)                        ; L1
47    (CDR)
48    (CAR&PUSH)
49    (CALLS2&JMPIFNOT 2 L70)             ; EQUAL
52    (GETVALUE 0)                        ; L1
54    (CAR&PUSH)
55    (JMPIFEQTO 2 L140)                  ; 1
59    (CONST&PUSH 2)                      ; 1
60    (CONST&PUSH 3)                      ; 2
61    (CALL2&PUSH 4)                      ; DIV
63    (GETVALUE 0)                        ; L1
65    (CAR&PUSH)
66    (CALLS2&JMPIF 2 L140)               ; EQUAL
70    L70
70    (GETVALUE 0)                        ; L1
72    (CAR&PUSH)
73    (GETVALUE 0)                        ; L1
75    (CDR)
76    (CAR&PUSH)
77    (CALL2&PUSH 7)                      ; ADD
79    (JMPIFEQTO 2 L148)                  ; 1
83    (GETVALUE 0)                        ; L1
85    (CAR&PUSH)
86    (GETVALUE 0)                        ; L1
88    (CDR)
89    (CAR&PUSH)
90    (CALL2&PUSH 7)                      ; ADD
92    (JMPIFEQTO 3 L148)                  ; 2
95    (GETVALUE 0)                        ; L1
97    (CAR&PUSH)
98    (GETVALUE 0)                        ; L1
100   (CDR)
101   (CAR&PUSH)
102   (CALL2&PUSH 9)                      ; SUB
104   (CONST&PUSH 2)                      ; 1
105   (CONST&PUSH 3)                      ; 2
106   (CALL2&PUSH 4)                      ; DIV
108   (CALLS2&JMPIF 2 L156)               ; EQUAL
111   (GETVALUE 0)                        ; L1
113   (CDR)
114   (CAR&PUSH)
115   (GETVALUE 0)                        ; L1
117   (CAR&PUSH)
118   (CALL2&PUSH 9)                      ; SUB
120   (CONST&PUSH 2)                      ; 1
121   (CONST&PUSH 3)                      ; 2
122   (CALL2&PUSH 4)                      ; DIV
124   (CALLS2&JMPIF 2 L156)               ; EQUAL
127   (NIL)
128   L128
128   (UNBIND 2)
130   (SKIP&RET 3)
132   L132
132   (GETVALUE&PUSH 0)                   ; L1
134   (GETVALUE&PUSH 1)                   ; L2
136   (CALL2 5)                           ; TRIG-LOG-3-EXEC
138   (JMP L128)
140   L140
140   (GETVALUE&PUSH 0)                   ; L1
142   (GETVALUE&PUSH 1)                   ; L2
144   (CALL2 6)                           ; TRIG-LOG-3A-EXEC
146   (JMP L128)
148   L148
148   (GETVALUE&PUSH 0)                   ; L1
150   (GETVALUE&PUSH 1)                   ; L2
152   (CALL2 8)                           ; TRIG-SIN
154   (JMP L128)
156   L156
156   (GETVALUE&PUSH 0)                   ; L1
158   (GETVALUE&PUSH 1)                   ; L2
160   (CALL2 10)                          ; TRIG-3
162   (JMP L128)


Disassembly of function #:|(DEFUN TRIG-3 (L1 L2) ...)-96|
(CONST 0) = TRIG-3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG-3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG-3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG-3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG-3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG-3
8     (SKIP&RET 1)


Disassembly of function TRIG-3
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = A
(CONST 3) = Z
(CONST 4) = VAR
(CONST 5) = 1
(CONST 6) = 2
(CONST 7) = DIV
(CONST 8) = POWER
(CONST 9) = -1
(CONST 10) = ADD
(CONST 11) = SUB
(CONST 12) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A Z L1 VAR)
writes special variables : (A Z)
50 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; Z
12    (GETVALUE&PUSH 4)                   ; VAR
14    (CONST&PUSH 5)                      ; 1
15    (CONST&PUSH 6)                      ; 2
16    (CALL2&PUSH 7)                      ; DIV
18    (CALL2 8)                           ; POWER
20    (SETVALUE 3)                        ; Z
22    (PUSH)
23    (CONST&PUSH 9)                      ; -1
24    (CALL2&PUSH 8)                      ; POWER
26    (CONST&PUSH 6)                      ; 2
27    (CONST&PUSH 9)                      ; -1
28    (CALL2&PUSH 8)                      ; POWER
30    (CONST&PUSH 5)                      ; 1
31    (GETVALUE 0)                        ; L1
33    (CAR&PUSH)
34    (GETVALUE 0)                        ; L1
36    (CDR)
37    (CAR&PUSH)
38    (CALL2&PUSH 10)                     ; ADD
40    (CONST&PUSH 5)                      ; 1
41    (CONST&PUSH 6)                      ; 2
42    (CALL2&PUSH 7)                      ; DIV
44    (CALL2&PUSH 11)                     ; SUB
46    (CALL2 11)                          ; SUB
48    (SETVALUE 2)                        ; A
50    (PUSH)
51    (CONST&PUSH 9)                      ; -1
52    (CALL2&PUSH 8)                      ; POWER
54    (CONST&PUSH 5)                      ; 1
55    (GETVALUE&PUSH 3)                   ; Z
57    (CALL2&PUSH 10)                     ; ADD
59    (GETVALUE&PUSH 2)                   ; A
61    (CALL2&PUSH 8)                      ; POWER
63    (CONST&PUSH 5)                      ; 1
64    (GETVALUE&PUSH 3)                   ; Z
66    (CALL2&PUSH 11)                     ; SUB
68    (GETVALUE&PUSH 2)                   ; A
70    (CALL2&PUSH 8)                      ; POWER
72    (CALL2&PUSH 11)                     ; SUB
74    (CALL 4 12)                         ; MUL
77    (UNBIND 4)
79    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TRIG-SIN (L1 L2) ...)-97|
(CONST 0) = TRIG-SIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG-SIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG-SIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG-SIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG-SIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG-SIN
8     (SKIP&RET 1)


Disassembly of function TRIG-SIN
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = A1
(CONST 3) = A
(CONST 4) = B
(CONST 5) = C
(CONST 6) = ADD
(CONST 7) = 1
(CONST 8) = -1
(CONST 9) = SUB
(CONST 10) = MUL
(CONST 11) = VAR
(CONST 12) = $SQRT
(CONST 13) = $ASIN
(CONST 14) = $SIN
(CONST 15) = POWER
(CONST 16) = 2
(CONST 17) = $COS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A1 VAR B A L2 L1)
writes special variables : (A1 C B A)
92 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL)
7     (BIND 2)                            ; A1
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; A
13    (NIL)
14    (BIND 4)                            ; B
16    (NIL)
17    (BIND 5)                            ; C
19    (GETVALUE 0)                        ; L1
21    (CAR)
22    (SETVALUE 3)                        ; A
24    (GETVALUE 0)                        ; L1
26    (CDR)
27    (CAR)
28    (SETVALUE 4)                        ; B
30    (GETVALUE 1)                        ; L2
32    (CAR)
33    (SETVALUE 5)                        ; C
35    (GETVALUE&PUSH 3)                   ; A
37    (GETVALUE&PUSH 4)                   ; B
39    (CALL2&PUSH 6)                      ; ADD
41    (JMPIFEQTO 7 L103)                  ; 1
44    (GETVALUE&PUSH 3)                   ; A
46    (GETVALUE&PUSH 4)                   ; B
48    (CALL2&PUSH 6)                      ; ADD
50    (JMPIFNOTEQTO 16 L146)              ; 2
54    (GETVALUE&PUSH 11)                  ; VAR
56    (CALL1&PUSH 12)                     ; $SQRT
58    (CALL1 13)                          ; $ASIN
60    (STORE 9)
62    (PUSH)
63    (CONST&PUSH 8)                      ; -1
64    (GETVALUE&PUSH 3)                   ; A
66    (GETVALUE&PUSH 4)                   ; B
68    (CALL2&PUSH 9)                      ; SUB
70    (CALL2 10)                          ; MUL
72    (SETVALUE 2)                        ; A1
74    (PUSH)
75    (CALL2&PUSH 10)                     ; MUL
77    (CALL1&PUSH 14)                     ; $SIN
79    (GETVALUE&PUSH 2)                   ; A1
81    (LOAD&PUSH 11)
82    (CALL1&PUSH 14)                     ; $SIN
84    (LOAD&PUSH 12)
85    (CALL1&PUSH 17)                     ; $COS
87    (CALL&PUSH 3 10)                    ; MUL
90    (CONST&PUSH 8)                      ; -1
91    (CALL2 15)                          ; POWER
93    L93
93    (PUSH)
94    (CALL2 10)                          ; MUL
96    (UNBIND 3)
98    (SKIP 1)
100   (UNBIND1)
101   (JMP L152)
103   L103
103   (CONST&PUSH 8)                      ; -1
104   (GETVALUE&PUSH 3)                   ; A
106   (GETVALUE&PUSH 4)                   ; B
108   (CALL2&PUSH 9)                      ; SUB
110   (CALL2&PUSH 10)                     ; MUL
112   (GETVALUE&PUSH 11)                  ; VAR
114   (CALL1&PUSH 12)                     ; $SQRT
116   (CALL1&PUSH 13)                     ; $ASIN
118   (CALL1&PUSH 14)                     ; $SIN
120   (CALL2&PUSH 10)                     ; MUL
122   (CONST&PUSH 8)                      ; -1
123   (CALL2&PUSH 15)                     ; POWER
125   (CONST&PUSH 8)                      ; -1
126   (GETVALUE&PUSH 3)                   ; A
128   (GETVALUE&PUSH 4)                   ; B
130   (CALL2&PUSH 9)                      ; SUB
132   (CALL2&PUSH 10)                     ; MUL
134   (GETVALUE&PUSH 11)                  ; VAR
136   (CALL1&PUSH 12)                     ; $SQRT
138   (CALL1&PUSH 13)                     ; $ASIN
140   (CALL2&PUSH 10)                     ; MUL
142   (CALL1 14)                          ; $SIN
144   (JMP L93)
146   L146
146   (NIL)
147   (UNBIND 3)
149   (SKIP 1)
151   (UNBIND1)
152   L152
152   (UNBIND 2)
154   (SKIP&RET 3)


Disassembly of function #:|(DEFUN TRIG-LOG-3-EXEC (L1 L2) ...)-98|
(CONST 0) = TRIG-LOG-3-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG-LOG-3-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG-LOG-3-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG-LOG-3-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG-LOG-3-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG-LOG-3-EXEC
8     (SKIP&RET 1)


Disassembly of function TRIG-LOG-3-EXEC
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = Z
(CONST 3) = VAR
(CONST 4) = CHECKSIGNTM
(CONST 5) = $POSITIVE
(CONST 6) = 1
(CONST 7) = 2
(CONST 8) = DIV
(CONST 9) = POWER
(CONST 10) = -1
(CONST 11) = ADD
(CONST 12) = SUB
(CONST 13) = $LOG
(CONST 14) = MUL
(CONST 15) = $NEGATIVE
(CONST 16) = $ATAN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z VAR)
writes special variable : (Z)
58 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL)
7     (BIND 2)                            ; Z
9     (GETVALUE&PUSH 3)                   ; VAR
11    (CALL1&PUSH 4)                      ; CHECKSIGNTM
13    (JMPIFEQTO 5 L29)                   ; $POSITIVE
16    (GETVALUE&PUSH 3)                   ; VAR
18    (CALL1&PUSH 4)                      ; CHECKSIGNTM
20    (JMPIFEQTO 15 L67)                  ; $NEGATIVE
23    (NIL)
24    (UNBIND1)
25    L25
25    (UNBIND 2)
27    (SKIP&RET 3)
29    L29
29    (GETVALUE&PUSH 3)                   ; VAR
31    (CONST&PUSH 6)                      ; 1
32    (CONST&PUSH 7)                      ; 2
33    (CALL2&PUSH 8)                      ; DIV
35    (CALL2 9)                           ; POWER
37    (SETVALUE 2)                        ; Z
39    (PUSH)
40    (CONST&PUSH 10)                     ; -1
41    (CALL2&PUSH 9)                      ; POWER
43    (CONST&PUSH 7)                      ; 2
44    (CONST&PUSH 10)                     ; -1
45    (CALL2&PUSH 9)                      ; POWER
47    (CONST&PUSH 6)                      ; 1
48    (GETVALUE&PUSH 2)                   ; Z
50    (CALL2&PUSH 11)                     ; ADD
52    (CONST&PUSH 6)                      ; 1
53    (GETVALUE&PUSH 2)                   ; Z
55    (CALL2&PUSH 12)                     ; SUB
57    (CALL2&PUSH 8)                      ; DIV
59    (CALL1&PUSH 13)                     ; $LOG
61    (CALL 3 14)                         ; MUL
64    (UNBIND1)
65    (JMP L25)
67    L67
67    (CONST&PUSH 10)                     ; -1
68    (GETVALUE&PUSH 3)                   ; VAR
70    (CALL2&PUSH 14)                     ; MUL
72    (CONST&PUSH 6)                      ; 1
73    (CONST&PUSH 7)                      ; 2
74    (CALL2&PUSH 8)                      ; DIV
76    (CALL2 9)                           ; POWER
78    (SETVALUE 2)                        ; Z
80    (PUSH)
81    (CONST&PUSH 10)                     ; -1
82    (CALL2&PUSH 9)                      ; POWER
84    (GETVALUE&PUSH 2)                   ; Z
86    (CALL1&PUSH 16)                     ; $ATAN
88    (CALL2 14)                          ; MUL
90    (UNBIND1)
91    (JMP L25)


Disassembly of function #:|(DEFUN TRIG-LOG-1 (L1 L2) ...)-99|
(CONST 0) = TRIG-LOG-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG-LOG-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG-LOG-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG-LOG-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG-LOG-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG-LOG-1
8     (SKIP&RET 1)


Disassembly of function TRIG-LOG-1
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = A
(CONST 3) = B
(CONST 4) = C
(CONST 5) = $EXPONENTIALIZE
(CONST 6) = ADD
(CONST 7) = 0
(CONST 8) = VAR
(CONST 9) = CHECKSIGNTM
(CONST 10) = $POSITIVE
(CONST 11) = 2
(CONST 12) = MUL
(CONST 13) = -1
(CONST 14) = POWER
(CONST 15) = $ASIN
(CONST 16) = $COS
(CONST 17) = 1
(CONST 18) = SUB
(CONST 19) = DIV
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR B A L2 L1)
writes special variables : (C B A)
83 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; B
12    (NIL)
13    (BIND 4)                            ; C
15    (NIL&PUSH)
16    (NIL)
17    (BIND 5)                            ; $EXPONENTIALIZE
19    (GETVALUE 0)                        ; L1
21    (CAR)
22    (SETVALUE 2)                        ; A
24    (GETVALUE 0)                        ; L1
26    (CDR)
27    (CAR)
28    (SETVALUE 3)                        ; B
30    (GETVALUE 1)                        ; L2
32    (CAR)
33    (SETVALUE 4)                        ; C
35    (GETVALUE&PUSH 2)                   ; A
37    (GETVALUE&PUSH 3)                   ; B
39    (CALL2&PUSH 6)                      ; ADD
41    (JMPIFNOTEQTO 7 L124)               ; 0
45    (GETVALUE&PUSH 8)                   ; VAR
47    (CALL1&PUSH 9)                      ; CHECKSIGNTM
49    (JMPIFEQTO 10 L103)                 ; $POSITIVE
52    (GETVALUE&PUSH 8)                   ; VAR
54    (CONST&PUSH 13)                     ; -1
55    (CALL2&PUSH 12)                     ; MUL
57    (CONST&PUSH 17)                     ; 1
58    (CALL2&PUSH 6)                      ; ADD
60    (CONST&PUSH 11)                     ; 2
61    (CONST&PUSH 13)                     ; -1
62    (CALL2&PUSH 14)                     ; POWER
64    (CALL2 14)                          ; POWER
66    (STORE 3)
67    (PUSH)
68    (GETVALUE&PUSH 8)                   ; VAR
70    (CALL2&PUSH 6)                      ; ADD
72    (CONST&PUSH 11)                     ; 2
73    (GETVALUE&PUSH 2)                   ; A
75    (CALL2&PUSH 12)                     ; MUL
77    (CALL2&PUSH 14)                     ; POWER
79    (LOAD&PUSH 4)
80    (GETVALUE&PUSH 8)                   ; VAR
82    (CALL2&PUSH 18)                     ; SUB
84    (CONST&PUSH 11)                     ; 2
85    (GETVALUE&PUSH 2)                   ; A
87    (CALL2&PUSH 12)                     ; MUL
89    (CALL2&PUSH 14)                     ; POWER
91    (CALL2&PUSH 6)                      ; ADD
93    (CONST&PUSH 11)                     ; 2
94    (CALL2 19)                          ; DIV
96    L96
96    (UNBIND1)
97    (SKIP 1)
99    (UNBIND 3)
101   (JMP L130)
103   L103
103   (CONST&PUSH 11)                     ; 2
104   (GETVALUE&PUSH 2)                   ; A
106   (CALL2&PUSH 12)                     ; MUL
108   (GETVALUE&PUSH 8)                   ; VAR
110   (CONST&PUSH 11)                     ; 2
111   (CONST&PUSH 13)                     ; -1
112   (CALL2&PUSH 14)                     ; POWER
114   (CALL2&PUSH 14)                     ; POWER
116   (CALL1&PUSH 15)                     ; $ASIN
118   (CALL2&PUSH 12)                     ; MUL
120   (CALL1 16)                          ; $COS
122   (JMP L96)
124   L124
124   (NIL)
125   (UNBIND1)
126   (SKIP 1)
128   (UNBIND 3)
130   L130
130   (UNBIND 2)
132   (SKIP&RET 3)

WARNING in (DEFUN TRIG-LOG-1 (A B) ...)-100 in lines 1210..1244 :
Function TRIG-LOG-1
 was already defined in lines 1161..1206

Disassembly of function #:|(DEFUN TRIG-LOG-1 (A B) ...)-100|
(CONST 0) = TRIG-LOG-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG-LOG-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG-LOG-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG-LOG-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG-LOG-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG-LOG-1
8     (SKIP&RET 1)


Disassembly of function TRIG-LOG-1
(CONST 0) = A
(CONST 1) = B
(CONST 2) = X
(CONST 3) = Z
(CONST 4) = $EXPONENTIALIZE
(CONST 5) = L1
(CONST 6) = ADD
(CONST 7) = 0
(CONST 8) = VAR
(CONST 9) = CHECKSIGNTM
(CONST 10) = $POSITIVE
(CONST 11) = (%COS)
(CONST 12) = 2
(CONST 13) = (%ASIN)
(CONST 14) = |1//2|
(CONST 15) = POWER
(CONST 16) = SIMPLIFYA
(CONST 17) = MUL
(CONST 18) = $NEGATIVE
(CONST 19) = 1
(CONST 20) = SUB
(CONST 21) = NEG
(CONST 22) = DIV
(CONST 23) = -1
(CONST 24) = (MABS)
(CONST 25) = ALIKE1
(CONST 26) = (%ATAN)
(CONST 27) = |-1//2|
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|-1//2| X Z VAR |1//2| B A L1)
writes special variables : (X Z B A)
222 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (NIL)
7     (BIND 2)                            ; X
9     (NIL)
10    (BIND 3)                            ; Z
12    (NIL)
13    (BIND 4)                            ; $EXPONENTIALIZE
15    (GETVALUE 5)                        ; L1
17    (CAR)
18    (SETVALUE 0)                        ; A
20    (GETVALUE 5)                        ; L1
22    (CDR)
23    (CAR)
24    (SETVALUE 1)                        ; B
26    (GETVALUE&PUSH 0)                   ; A
28    (GETVALUE&PUSH 1)                   ; B
30    (CALL2&PUSH 6)                      ; ADD
32    (JMPIFEQTO 7 L185)                  ; 0
36    (GETVALUE&PUSH 0)                   ; A
38    (GETVALUE&PUSH 1)                   ; B
40    (CALL2&PUSH 6)                      ; ADD
42    (JMPIFEQTO 19 L307)                 ; 1
46    (CONST&PUSH 24)                     ; (MABS)
47    (GETVALUE&PUSH 1)                   ; B
49    (GETVALUE&PUSH 0)                   ; A
51    (CALL2&PUSH 20)                     ; SUB
53    (LIST&PUSH 2)
55    (NIL&PUSH)
56    (CALL2&PUSH 16)                     ; SIMPLIFYA
58    (GETVALUE&PUSH 14)                  ; |1//2|
60    (CALL2&JMPIFNOT 25 L391)            ; ALIKE1
64    (GETVALUE&PUSH 8)                   ; VAR
66    (CALL1&PUSH 9)                      ; CHECKSIGNTM
68    (JMPIFNOTEQTO 10 L327)              ; $POSITIVE
72    (GETVALUE&PUSH 14)                  ; |1//2|
74    (CONST&PUSH 19)                     ; 1
75    (GETVALUE&PUSH 8)                   ; VAR
77    (GETVALUE&PUSH 14)                  ; |1//2|
79    (CALL2 15)                          ; POWER
81    (SETVALUE 3)                        ; Z
83    (PUSH)
84    (CALL2&PUSH 6)                      ; ADD
86    (GETVALUE&PUSH 14)                  ; |1//2|
88    (GETVALUE&PUSH 0)                   ; A
90    (GETVALUE&PUSH 1)                   ; B
92    (CALL2&PUSH 6)                      ; ADD
94    (CALL2 20)                          ; SUB
96    (SETVALUE 1)                        ; B
98    (PUSH)
99    (CALL2&PUSH 15)                     ; POWER
101   (CONST 19)                          ; 1
102   L102
102   (PUSH)
103   (GETVALUE&PUSH 3)                   ; Z
105   (CALL2&PUSH 20)                     ; SUB
107   (GETVALUE&PUSH 1)                   ; B
109   (CALL2&PUSH 15)                     ; POWER
111   (CALL2 6)                           ; ADD
113   (JMP L383)
116   L116
116   (CONST&PUSH 11)                     ; (%COS)
117   (CONST&PUSH 12)                     ; 2
118   (GETVALUE&PUSH 0)                   ; A
120   (CONST&PUSH 13)                     ; (%ASIN)
121   (GETVALUE&PUSH 8)                   ; VAR
123   (GETVALUE&PUSH 14)                  ; |1//2|
125   (CALL2&PUSH 15)                     ; POWER
127   (LIST&PUSH 2)
129   (NIL&PUSH)
130   (CALL2&PUSH 16)                     ; SIMPLIFYA
132   (CALL&PUSH 3 17)                    ; MUL
135   (LIST&PUSH 2)
137   (NIL&PUSH)
138   (CALL2 16)                          ; SIMPLIFYA
140   (JMP L392)
143   L143
143   (GETVALUE&PUSH 14)                  ; |1//2|
145   (CONST&PUSH 19)                     ; 1
146   (GETVALUE&PUSH 8)                   ; VAR
148   (CALL2&PUSH 20)                     ; SUB
150   (GETVALUE&PUSH 14)                  ; |1//2|
152   (CALL2 15)                          ; POWER
154   (SETVALUE 2)                        ; X
156   (PUSH)
157   (GETVALUE&PUSH 8)                   ; VAR
159   (CALL1&PUSH 21)                     ; NEG
161   (GETVALUE&PUSH 14)                  ; |1//2|
163   (CALL2 15)                          ; POWER
165   (SETVALUE 3)                        ; Z
167   (PUSH)
168   (CALL2&PUSH 6)                      ; ADD
170   (CONST&PUSH 12)                     ; 2
171   (GETVALUE&PUSH 1)                   ; B
173   (CALL2 17)                          ; MUL
175   (SETVALUE 1)                        ; B
177   (PUSH)
178   (CALL2&PUSH 15)                     ; POWER
180   (GETVALUE 2)                        ; X
182   (JMP L102)
185   L185
185   (GETVALUE&PUSH 8)                   ; VAR
187   (CALL1&PUSH 9)                      ; CHECKSIGNTM
189   (JMPIFEQTO 10 L116)                 ; $POSITIVE
193   (GETVALUE&PUSH 8)                   ; VAR
195   (CALL1&PUSH 9)                      ; CHECKSIGNTM
197   (JMPIFEQTO 18 L143)                 ; $NEGATIVE
200   (NIL)
201   (JMP L392)
204   L204
204   (CONST&PUSH 11)                     ; (%COS)
205   (GETVALUE&PUSH 0)                   ; A
207   (GETVALUE&PUSH 1)                   ; B
209   (CALL2&PUSH 20)                     ; SUB
211   (CONST&PUSH 13)                     ; (%ASIN)
212   (GETVALUE&PUSH 8)                   ; VAR
214   (GETVALUE&PUSH 14)                  ; |1//2|
216   (CALL2&PUSH 15)                     ; POWER
218   (LIST&PUSH 2)
220   (NIL&PUSH)
221   (CALL2 16)                          ; SIMPLIFYA
223   (SETVALUE 3)                        ; Z
225   (PUSH)
226   (CALL2&PUSH 17)                     ; MUL
228   (LIST&PUSH 2)
230   (NIL&PUSH)
231   (CALL2&PUSH 16)                     ; SIMPLIFYA
233   (CONST&PUSH 11)                     ; (%COS)
234   (GETVALUE&PUSH 3)                   ; Z
236   (LIST&PUSH 2)
238   (NIL&PUSH)
239   (CALL2&PUSH 16)                     ; SIMPLIFYA
241   (CALL2 22)                          ; DIV
243   (JMP L392)
246   L246
246   (GETVALUE&PUSH 14)                  ; |1//2|
248   (CONST&PUSH 19)                     ; 1
249   (GETVALUE&PUSH 8)                   ; VAR
251   (CALL2&PUSH 20)                     ; SUB
253   (GETVALUE&PUSH 14)                  ; |1//2|
255   (CALL2 15)                          ; POWER
257   (SETVALUE 2)                        ; X
259   (PUSH)
260   (CONST&PUSH 23)                     ; -1
261   (CALL2&PUSH 15)                     ; POWER
263   (GETVALUE&PUSH 2)                   ; X
265   (GETVALUE&PUSH 8)                   ; VAR
267   (CALL1&PUSH 21)                     ; NEG
269   (GETVALUE&PUSH 14)                  ; |1//2|
271   (CALL2 15)                          ; POWER
273   (SETVALUE 3)                        ; Z
275   (PUSH)
276   (CALL2&PUSH 6)                      ; ADD
278   (GETVALUE&PUSH 0)                   ; A
280   (GETVALUE&PUSH 1)                   ; B
282   (CALL2 20)                          ; SUB
284   (SETVALUE 1)                        ; B
286   (PUSH)
287   (CALL2&PUSH 15)                     ; POWER
289   (GETVALUE&PUSH 2)                   ; X
291   (GETVALUE&PUSH 3)                   ; Z
293   (CALL2&PUSH 20)                     ; SUB
295   (GETVALUE&PUSH 1)                   ; B
297   (CALL2&PUSH 15)                     ; POWER
299   (CALL2&PUSH 6)                      ; ADD
301   (CALL 3 17)                         ; MUL
304   (JMP L392)
307   L307
307   (GETVALUE&PUSH 8)                   ; VAR
309   (CALL1&PUSH 9)                      ; CHECKSIGNTM
311   (JMPIFEQTO 10 L204)                 ; $POSITIVE
315   (GETVALUE&PUSH 8)                   ; VAR
317   (CALL1&PUSH 9)                      ; CHECKSIGNTM
319   (JMPIFEQTO 18 L246)                 ; $NEGATIVE
323   (NIL)
324   (JMP L392)
327   L327
327   (GETVALUE&PUSH 8)                   ; VAR
329   (CALL1&PUSH 9)                      ; CHECKSIGNTM
331   (JMPIFNOTEQTO 18 L388)              ; $NEGATIVE
334   (CONST&PUSH 11)                     ; (%COS)
335   (CONST&PUSH 26)                     ; (%ATAN)
336   (GETVALUE&PUSH 8)                   ; VAR
338   (CALL1&PUSH 21)                     ; NEG
340   (GETVALUE&PUSH 14)                  ; |1//2|
342   (CALL2&PUSH 15)                     ; POWER
344   (LIST&PUSH 2)
346   (NIL&PUSH)
347   (CALL2 16)                          ; SIMPLIFYA
349   (SETVALUE 3)                        ; Z
351   (PUSH)
352   (LIST&PUSH 2)
354   (NIL&PUSH)
355   (CALL2&PUSH 16)                     ; SIMPLIFYA
357   (GETVALUE&PUSH 0)                   ; A
359   (GETVALUE&PUSH 1)                   ; B
361   (GETVALUE&PUSH 27)                  ; |-1//2|
363   (CALL 3 6)                          ; ADD
366   (SETVALUE 1)                        ; B
368   (PUSH)
369   (CALL2&PUSH 15)                     ; POWER
371   (CONST&PUSH 11)                     ; (%COS)
372   (GETVALUE&PUSH 1)                   ; B
374   (GETVALUE&PUSH 3)                   ; Z
376   (CALL2&PUSH 17)                     ; MUL
378   (LIST&PUSH 2)
380   (NIL&PUSH)
381   (CALL2 16)                          ; SIMPLIFYA
383   L383
383   (PUSH)
384   (CALL2 17)                          ; MUL
386   (JMP L392)
388   L388
388   (NIL)
389   (JMP L392)
391   L391
391   (NIL)
392   L392
392   (UNBIND 5)
394   (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIFFINTPROP-GEN-EXEC (L L1 L2) ...)-101|
(CONST 0) = DIFFINTPROP-GEN-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFFINTPROP-GEN-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFFINTPROP-GEN-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFFINTPROP-GEN-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFFINTPROP-GEN-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFFINTPROP-GEN-EXEC
8     (SKIP&RET 1)


Disassembly of function DIFFINTPROP-GEN-EXEC
(CONST 0) = L
(CONST 1) = L1
(CONST 2) = L2
(CONST 3) = C
(CONST 4) = M
(CONST 5) = 1
(CONST 6) = ZL-DELETE
(CONST 7) = SUB
(CONST 8) = AVGOUSTIS
(CONST 9) = CONSTRPOLY
(CONST 10) = $EXPAND
(CONST 11) = CREATECONSTFACT
(CONST 12) = DIFFINTPROP-EXEC
(CONST 13) = YANMULT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 M L1 C L)
writes special variables : (L2 L1 M C)
51 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; L1
6     (LOAD 7)
7     (BIND 2)                            ; L2
9     (NIL)
10    (BIND 3)                            ; C
12    (NIL)
13    (BIND 4)                            ; M
15    (PUSH-NIL 2)
17    (GETVALUE 0)                        ; L
19    (CAR)
20    (SETVALUE 3)                        ; C
22    (GETVALUE 0)                        ; L
24    (CDR)
25    (CAR)
26    (SETVALUE 4)                        ; M
28    (GETVALUE&PUSH 3)                   ; C
30    (GETVALUE&PUSH 1)                   ; L1
32    (CONST&PUSH 5)                      ; 1
33    (CALL 3 6)                          ; ZL-DELETE
36    (SETVALUE 1)                        ; L1
38    (GETVALUE&PUSH 3)                   ; C
40    (GETVALUE&PUSH 4)                   ; M
42    (CALL2 7)                           ; SUB
44    (SETVALUE 3)                        ; C
46    (PUSH)
47    (GETVALUE&PUSH 2)                   ; L2
49    (CONST&PUSH 5)                      ; 1
50    (CALL 3 6)                          ; ZL-DELETE
53    (SETVALUE 2)                        ; L2
55    (GETVALUE&PUSH 3)                   ; C
57    (GETVALUE&PUSH 4)                   ; M
59    (CONST&PUSH 8)                      ; AVGOUSTIS
60    (CALL&PUSH 3 9)                     ; CONSTRPOLY
63    (CALL1 10)                          ; $EXPAND
65    (STORE 1)
66    (GETVALUE&PUSH 3)                   ; C
68    (GETVALUE&PUSH 4)                   ; M
70    (CALL2 11)                          ; CREATECONSTFACT
72    (STORE 0)
73    (PUSH)
74    (LOAD&PUSH 2)
75    (GETVALUE&PUSH 1)                   ; L1
77    (GETVALUE&PUSH 2)                   ; L2
79    (CALL&PUSH 3 12)                    ; DIFFINTPROP-EXEC
82    (CALL2 13)                          ; YANMULT
84    (SKIP 2)
86    (UNBIND 5)
88    (SKIP&RET 4)


Disassembly of function #:|(DEFUN CONSTRPOLY (C M K) ...)-102|
(CONST 0) = CONSTRPOLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTRPOLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTRPOLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTRPOLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTRPOLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTRPOLY
8     (SKIP&RET 1)


Disassembly of function CONSTRPOLY
(CONST 0) = C
(CONST 1) = M
(CONST 2) = K
(CONST 3) = 1
(CONST 4) = ADD
(CONST 5) = MUL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K C M)
26 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; K
9     (GETVALUE&PUSH 1)                   ; M
11    (CALLS2&JMPIF 145 L41)              ; ZEROP
14    (GETVALUE&PUSH 0)                   ; C
16    (GETVALUE&PUSH 2)                   ; K
18    (GETVALUE&PUSH 1)                   ; M
20    (CALLS2&PUSH 151)                   ; 1-
22    (CALL&PUSH 3 4)                     ; ADD
25    (GETVALUE&PUSH 0)                   ; C
27    (GETVALUE&PUSH 1)                   ; M
29    (CALLS2&PUSH 151)                   ; 1-
31    (GETVALUE&PUSH 2)                   ; K
33    (JSR&PUSH L0)
35    (CALL2 5)                           ; MUL
37    L37
37    (UNBIND 3)
39    (SKIP&RET 4)
41    L41
41    (CONST 3)                           ; 1
42    (JMP L37)


Disassembly of function #:|(DEFUN CREATECONSTFACT (C M) ...)-103|
(CONST 0) = CREATECONSTFACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CREATECONSTFACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CREATECONSTFACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CREATECONSTFACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CREATECONSTFACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CREATECONSTFACT
8     (SKIP&RET 1)


Disassembly of function CREATECONSTFACT
(CONST 0) = C
(CONST 1) = M
(CONST 2) = 1
(CONST 3) = ADD
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C M)
24 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; C
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (GETVALUE&PUSH 1)                   ; M
8     (CALLS2&JMPIF 145 L36)              ; ZEROP
11    (GETVALUE&PUSH 0)                   ; C
13    (GETVALUE&PUSH 1)                   ; M
15    (CALLS2&PUSH 151)                   ; 1-
17    (CALL2&PUSH 3)                      ; ADD
19    (CONST&PUSH 4)                      ; -1
20    (CALL2&PUSH 5)                      ; POWER
22    (GETVALUE&PUSH 0)                   ; C
24    (GETVALUE&PUSH 1)                   ; M
26    (CALLS2&PUSH 151)                   ; 1-
28    (JSR&PUSH L0)
30    (CALL2 6)                           ; MUL
32    L32
32    (UNBIND 2)
34    (SKIP&RET 3)
36    L36
36    (CONST 2)                           ; 1
37    (JMP L32)


Disassembly of function #:|(DEFUN DIFFINTPROP-EXEC (POLY L1 L2) ...)-104|
(CONST 0) = DIFFINTPROP-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFFINTPROP-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFFINTPROP-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFFINTPROP-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFFINTPROP-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFFINTPROP-EXEC
8     (SKIP&RET 1)


Disassembly of function DIFFINTPROP-EXEC
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = CREATECOEFPOWLIST-EXEC
(CONST 3) = DISTRDIFFINTPROP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (LOAD&PUSH 9)
7     (CALL1&PUSH 2)                      ; CREATECOEFPOWLIST-EXEC
9     (GETVALUE&PUSH 0)                   ; L1
11    (GETVALUE&PUSH 1)                   ; L2
13    (CALL 3 3)                          ; DISTRDIFFINTPROP
16    (UNBIND 2)
18    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DISTRDIFFINTPROP (L L1 L2) ...)-105|
(CONST 0) = DISTRDIFFINTPROP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTRDIFFINTPROP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTRDIFFINTPROP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTRDIFFINTPROP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTRDIFFINTPROP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTRDIFFINTPROP
8     (SKIP&RET 1)


Disassembly of function DISTRDIFFINTPROP
(CONST 0) = L
(CONST 1) = L1
(CONST 2) = L2
(CONST 3) = 0
(CONST 4) = $FACTOR
(CONST 5) = DIFFINTPROP
(CONST 6) = YANMULT
(CONST 7) = ADD
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1 L)
33 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; L1
6     (LOAD 7)
7     (BIND 2)                            ; L2
9     (GETVALUE 0)                        ; L
11    (JMPIFNOT L48)
13    (GETVALUE 0)                        ; L
15    (CAR)
16    (CDR)
17    (CAR&PUSH)
18    (CALL1&PUSH 4)                      ; $FACTOR
20    (GETVALUE 0)                        ; L
22    (CAR)
23    (CAR&PUSH)
24    (GETVALUE&PUSH 1)                   ; L1
26    (GETVALUE&PUSH 2)                   ; L2
28    (CALL&PUSH 3 5)                     ; DIFFINTPROP
31    (CALL2&PUSH 6)                      ; YANMULT
33    (GETVALUE 0)                        ; L
35    (CDR&PUSH)
36    (GETVALUE&PUSH 1)                   ; L1
38    (GETVALUE&PUSH 2)                   ; L2
40    (JSR&PUSH L0)
42    (CALL2 7)                           ; ADD
44    L44
44    (UNBIND 3)
46    (SKIP&RET 4)
48    L48
48    (CONST 3)                           ; 0
49    (JMP L44)


Disassembly of function #:|(DEFUN DIFFINTPROP (POW L1 L2) ...)-106|
(CONST 0) = DIFFINTPROP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFFINTPROP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFFINTPROP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFFINTPROP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFFINTPROP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFFINTPROP
8     (SKIP&RET 1)


Disassembly of function DIFFINTPROP
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = VAR
(CONST 3) = HGFSIMP
(CONST 4) = 1
(CONST 5) = MULTPL
(CONST 6) = DIV
(CONST 7) = MUL
(CONST 8) = INCR1
(CONST 9) = YANMULT
(CONST 10) = SEARCHADDSERIESLIST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR L2 L1)
37 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (LOAD&PUSH 9)
7     (CALLS2&JMPIF 145 L26)              ; ZEROP
10    (LOAD&PUSH 9)
11    (JMPIFEQTO 4 L37)                   ; 1
14    (LOAD&PUSH 9)
15    (GETVALUE&PUSH 0)                   ; L1
17    (GETVALUE&PUSH 1)                   ; L2
19    (CALL 3 10)                         ; SEARCHADDSERIESLIST
22    L22
22    (UNBIND 2)
24    (SKIP&RET 4)
26    L26
26    (GETVALUE&PUSH 0)                   ; L1
28    (GETVALUE&PUSH 1)                   ; L2
30    (GETVALUE&PUSH 2)                   ; VAR
32    (CALL 3 3)                          ; HGFSIMP
35    (JMP L22)
37    L37
37    (GETVALUE&PUSH 0)                   ; L1
39    (CALL1&PUSH 5)                      ; MULTPL
41    (GETVALUE&PUSH 1)                   ; L2
43    (CALL1&PUSH 5)                      ; MULTPL
45    (CALL2&PUSH 6)                      ; DIV
47    (GETVALUE&PUSH 2)                   ; VAR
49    (CALL2&PUSH 7)                      ; MUL
51    (GETVALUE&PUSH 0)                   ; L1
53    (CALL1&PUSH 8)                      ; INCR1
55    (GETVALUE&PUSH 1)                   ; L2
57    (CALL1&PUSH 8)                      ; INCR1
59    (GETVALUE&PUSH 2)                   ; VAR
61    (CALL&PUSH 3 3)                     ; HGFSIMP
64    (CALL2 9)                           ; YANMULT
66    (JMP L22)


Disassembly of function #:|(DEFUN SEARCHADDSERIESLIST (POW L1 L2) ...)-107|
(CONST 0) = SEARCHADDSERIESLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SEARCHADDSERIESLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SEARCHADDSERIESLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SEARCHADDSERIESLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SEARCHADDSERIESLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SEARCHADDSERIESLIST
8     (SKIP&RET 1)


Disassembly of function SEARCHADDSERIESLIST
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = RES
(CONST 3) = SERIESLIST
(CONST 4) = SEARCHSERIESLISTP
(CONST 5) = 
(YANMULT (MUL (DIV (MULTPL L1) (MULTPL L2)) VAR)
 (DIFFINTPROPRECURSE (SUB1 POW) (INCR1 L1) (INCR1 L2)))
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RES SERIESLIST)
writes special variables : (SERIESLIST RES)
29 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; RES
10    (GETVALUE&PUSH 3)                   ; SERIESLIST
12    (LOAD&PUSH 14)
13    (CALL2 4)                           ; SEARCHSERIESLISTP
15    (STORE 3)
16    (JMPIF L36)
18    (GETVALUE&PUSH 3)                   ; SERIESLIST
20    (LOAD&PUSH 14)
21    (CONST 5)                           ; (YANMULT (MUL # ...) ...)
22    (SETVALUE 2)                        ; RES
24    (PUSH)
25    (LIST&PUSH 2)
27    (LIST&PUSH 1)
29    (CALLSR 2 34)                       ; APPEND
32    (SETVALUE 3)                        ; SERIESLIST
34    (GETVALUE 2)                        ; RES
36    L36
36    (PUSH)
37    (CALLS1 91)                         ; EVAL
39    (UNBIND1)
40    (SKIP 1)
42    (UNBIND 2)
44    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DIFFINTPROPRECURSE (POW L1 L2) ...)-108|
(CONST 0) = DIFFINTPROPRECURSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFFINTPROPRECURSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFFINTPROPRECURSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFFINTPROPRECURSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFFINTPROPRECURSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFFINTPROPRECURSE
8     (SKIP&RET 1)


Disassembly of function DIFFINTPROPRECURSE
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = AVGOUSTIS
(CONST 3) = 1
(CONST 4) = ADD
(CONST 5) = POWER
(CONST 6) = $EXPAND
(CONST 7) = DIFFINTPROP-EXEC
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L2 L1)
19 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L1
3     (LOAD 4)
4     (BIND 1)                            ; L2
6     (NIL&PUSH)
7     (CONST&PUSH 2)                      ; AVGOUSTIS
8     (CONST&PUSH 3)                      ; 1
9     (CALL2&PUSH 4)                      ; ADD
11    (LOAD&PUSH 11)
12    (CALL2&PUSH 5)                      ; POWER
14    (CALL1 6)                           ; $EXPAND
16    (STORE 0)
17    (PUSH)
18    (GETVALUE&PUSH 0)                   ; L1
20    (GETVALUE&PUSH 1)                   ; L2
22    (CALL 3 7)                          ; DIFFINTPROP-EXEC
25    (SKIP 1)
27    (UNBIND 2)
29    (SKIP&RET 4)


Disassembly of function #:|(DEFUN MULTPL (L) ...)-109|
(CONST 0) = MULTPL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULTPL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULTPL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULTPL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULTPL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULTPL
8     (SKIP&RET 1)


Disassembly of function MULTPL
(CONST 0) = L
(CONST 1) = 1
(CONST 2) = MUL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
17 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L20)
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (GETVALUE 0)                        ; L
12    (CDR&PUSH)
13    (JSR&PUSH L0)
15    (CALL2 2)                           ; MUL
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)
20    L20
20    (CONST 1)                           ; 1
21    (JMP L17)


Disassembly of function #:|(DEFUN CREATECOEFPOWLIST-EXEC (POLY) ...)-110|
(CONST 0) = CREATECOEFPOWLIST-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CREATECOEFPOWLIST-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CREATECOEFPOWLIST-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CREATECOEFPOWLIST-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CREATECOEFPOWLIST-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CREATECOEFPOWLIST-EXEC
8     (SKIP&RET 1)


Disassembly of function CREATECOEFPOWLIST-EXEC
(CONST 0) = AVGOUSTIS
(CONST 1) = CONSTERMINIT
(CONST 2) = $HIPOW
(CONST 3) = 0
(CONST 4) = CREATECOEFPOWLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD&PUSH 3)
3     (CONST&PUSH 0)                      ; AVGOUSTIS
4     (CALL2 1)                           ; CONSTERMINIT
6     (STORE 0)
7     (LOAD&PUSH 3)
8     (CONST&PUSH 0)                      ; AVGOUSTIS
9     (CALL2 2)                           ; $HIPOW
11    (STORE 1)
12    (CONST&PUSH 3)                      ; 0
13    (LOAD&PUSH 1)
14    (LIST&PUSH 2)
16    (LIST&PUSH 1)
18    (LOAD&PUSH 4)
19    (LOAD&PUSH 3)
20    (CALL2&PUSH 4)                      ; CREATECOEFPOWLIST
22    (CALLSR 2 34)                       ; APPEND
25    (SKIP&RET 4)


Disassembly of function #:|(DEFUN CREATECOEFPOWLIST (POLY HP) ...)-111|
(CONST 0) = CREATECOEFPOWLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CREATECOEFPOWLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CREATECOEFPOWLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CREATECOEFPOWLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CREATECOEFPOWLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CREATECOEFPOWLIST
8     (SKIP&RET 1)


Disassembly of function CREATECOEFPOWLIST
(CONST 0) = 1
(CONST 1) = AVGOUSTIS
(CONST 2) = $COEFF
(CONST 3) = POWER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L26)                   ; 1
4     (LOAD&PUSH 2)
5     (LOAD&DEC&PUSH 2)
7     (JSR&PUSH L0)
9     (LOAD&PUSH 2)
10    (LOAD&PUSH 4)
11    (CONST&PUSH 1)                      ; AVGOUSTIS
12    (LOAD&PUSH 5)
13    (CALL2&PUSH 3)                      ; POWER
15    (CALL2&PUSH 2)                      ; $COEFF
17    (LIST&PUSH 2)
19    (LIST&PUSH 1)
21    (CALLSR 2 34)                       ; APPEND
24    (SKIP&RET 3)
26    L26
26    (CONST&PUSH 0)                      ; 1
27    (LOAD&PUSH 3)
28    (CONST&PUSH 1)                      ; AVGOUSTIS
29    (CALL2&PUSH 2)                      ; $COEFF
31    (LIST&PUSH 2)
33    (LIST 1)
35    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CONSTERMINIT (FUN VAR) ...)-112|
(CONST 0) = CONSTERMINIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTERMINIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTERMINIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTERMINIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTERMINIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTERMINIT
8     (SKIP&RET 1)


Disassembly of function CONSTERMINIT
(CONST 0) = FUN
(CONST 1) = VAR
(CONST 2) = MPLUS
(CONST 3) = CONSTERM
(CONST 4) = FREEVAR
(CONST 5) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR FUN)
23 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FUN
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE 0)                        ; FUN
8     (CAR)
9     (CAR&PUSH)
10    (JMPIFEQTO 2 L23)                   ; MPLUS
13    (GETVALUE&PUSH 0)                   ; FUN
15    (CALL1&JMPIF 4 L32)                 ; FREEVAR
18    (CONST 5)                           ; 0
19    L19
19    (UNBIND 2)
21    (SKIP&RET 3)
23    L23
23    (GETVALUE 0)                        ; FUN
25    (CDR&PUSH)
26    (GETVALUE&PUSH 1)                   ; VAR
28    (CALL2 3)                           ; CONSTERM
30    (JMP L19)
32    L32
32    (GETVALUE 0)                        ; FUN
34    (JMP L19)


Disassembly of function #:|(DEFUN SEARCHSERIESLISTP (SERIESLIST POW) ...)-113|
(CONST 0) = SEARCHSERIESLISTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SEARCHSERIESLISTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SEARCHSERIESLISTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SEARCHSERIESLISTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SEARCHSERIESLISTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SEARCHSERIESLISTP
8     (SKIP&RET 1)


Disassembly of function SEARCHSERIESLISTP
(CONST 0) = SERIESLIST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (SERIESLIST)
26 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; SERIESLIST
3     (GETVALUE 0)                        ; SERIESLIST
5     (JMPIFNOT L24)
7     (GETVALUE 0)                        ; SERIESLIST
9     (CAR)
10    (CAR&PUSH)
11    (LOAD&PUSH 5)
12    (CALLS2&JMPIF 2 L27)                ; EQUAL
15    (GETVALUE 0)                        ; SERIESLIST
17    (CDR&PUSH)
18    (LOAD&PUSH 5)
19    (JSR L0)
21    L21
21    (UNBIND1)
22    (SKIP&RET 3)
24    L24
24    (NIL)
25    (JMP L21)
27    L27
27    (GETVALUE 0)                        ; SERIESLIST
29    (CAR)
30    (CDR)
31    (CAR)
32    (JMP L21)


Disassembly of function #:|(DEFUN YANMULT (A B) ...)-114|
(CONST 0) = YANMULT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE YANMULT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; YANMULT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; YANMULT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE YANMULT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; YANMULT
8     (SKIP&RET 1)


Disassembly of function YANMULT
(CONST 0) = A
(CONST 1) = B
(CONST 2) = MPLUS
(CONST 3) = YANMUL
(CONST 4) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A B)
20 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE 1)                        ; B
8     (CAR)
9     (CAR&PUSH)
10    (JMPIFEQTO 2 L23)                   ; MPLUS
13    (GETVALUE&PUSH 0)                   ; A
15    (GETVALUE&PUSH 1)                   ; B
17    (CALL2 4)                           ; MUL
19    L19
19    (UNBIND 2)
21    (SKIP&RET 3)
23    L23
23    (GETVALUE&PUSH 0)                   ; A
25    (GETVALUE 1)                        ; B
27    (CDR&PUSH)
28    (CALL2 3)                           ; YANMUL
30    (JMP L19)


Disassembly of function #:|(DEFUN YANMUL (A B) ...)-115|
(CONST 0) = YANMUL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE YANMUL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; YANMUL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; YANMUL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE YANMUL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; YANMUL
8     (SKIP&RET 1)


Disassembly of function YANMUL
(CONST 0) = A
(CONST 1) = B
(CONST 2) = 0
(CONST 3) = MUL
(CONST 4) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A B)
22 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE 1)                        ; B
8     (JMPIFNOT L30)
10    (GETVALUE&PUSH 0)                   ; A
12    (GETVALUE 1)                        ; B
14    (CAR&PUSH)
15    (CALL2&PUSH 3)                      ; MUL
17    (GETVALUE&PUSH 0)                   ; A
19    (GETVALUE 1)                        ; B
21    (CDR&PUSH)
22    (JSR&PUSH L0)
24    (CALL2 4)                           ; ADD
26    L26
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (CONST 2)                           ; 0
31    (JMP L26)


Disassembly of function #:|(DEFUN FREEVARPAR (EXP) ...)-116|
(CONST 0) = FREEVARPAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEVARPAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEVARPAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEVARPAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEVARPAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEVARPAR
8     (SKIP&RET 1)


Disassembly of function FREEVARPAR
(CONST 0) = EXP
(CONST 1) = FREEVAR
(CONST 2) = FREEPAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1&JMPIF 1 L12)                 ; FREEVAR
8     (NIL)
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (GETVALUE&PUSH 0)                   ; EXP
14    (CALL1 2)                           ; FREEPAR
16    (JMP L9)


Disassembly of function #:|(DECLARE-TOP (SPECIAL SERIESLIST VAR ...))-117|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ PAR '$P)-118|
(CONST 0) = $P
(CONST 1) = PAR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (PAR)
3 byte-code instructions:
0     (CONST 0)                           ; $P
1     (SETVALUE 1)                        ; PAR
3     (SKIP&RET 1)

WARNING in (DEFUN FREEVAR (A) ...)-119 in lines 1354..1362 :
Function FREEVAR
 was already defined in file #P"/cygdrive/e/temp/maxima/src/sin.lisp" in lines 393..400

Disassembly of function #:|(DEFUN FREEVAR (A) ...)-119|
(CONST 0) = FREEVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEVAR
8     (SKIP&RET 1)


Disassembly of function FREEVAR
(CONST 0) = A
(CONST 1) = VAR
(CONST 2) = ALIKE1
(CONST 3) = ARRAY
(CONST 4) = MEMQ
(CONST 5) = VARIABLE-OF-INTEGRATION-APPEARED-IN-SUBSCRIPT
(CONST 6) = ERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR A)
49 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE 0)                        ; A
5     (JMPIFATOM L42)
7     (GETVALUE&PUSH 0)                   ; A
9     (GETVALUE&PUSH 1)                   ; VAR
11    (CALL2&JMPIF 2 L50)                 ; ALIKE1
14    (GETVALUE 0)                        ; A
16    (CAR)
17    (JMPIFATOM L27)
19    (CONST&PUSH 3)                      ; ARRAY
20    (GETVALUE 0)                        ; A
22    (CAR)
23    (CDR&PUSH)
24    (CALL2&JMPIF 4 L56)                 ; MEMQ
27    L27
27    (GETVALUE 0)                        ; A
29    (CAR&PUSH)
30    (JSR L0)
32    (JMPIFNOT1 L39)
34    (GETVALUE 0)                        ; A
36    (CDR&PUSH)
37    (JSR L0)
39    L39
39    (UNBIND1)
40    (SKIP&RET 2)
42    L42
42    (GETVALUE&PUSH 0)                   ; A
44    (GETVALUE 1)                        ; VAR
46    (EQ)
47    (NOT)
48    (JMP L39)
50    L50
50    (NIL)
51    (JMP L39)
53    L53
53    (T)
54    (JMP L39)
56    L56
56    (GETVALUE 0)                        ; A
58    (CDR&PUSH)
59    (JSR L0)
61    (JMPIF L53)
63    (CONST&PUSH 5)                      ; VARIABLE-OF-INTEGRATION-APPEARED-IN-SUBSCRIPT
64    (PUSH-UNBOUND 1)
66    (CALLS1 132)                        ; PRINC
68    (CALL0 6)                           ; ERR
70    (JMP L39)


Disassembly of function #:|(DEFUN FREEPAR (EXP) ...)-120|
(CONST 0) = FREEPAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEPAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEPAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEPAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEPAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEPAR
8     (SKIP&RET 1)


Disassembly of function FREEPAR
(CONST 0) = EXP
(CONST 1) = PAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PAR EXP)
21 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (JMPIFATOM L22)
7     (GETVALUE 0)                        ; EXP
9     (CAR&PUSH)
10    (JSR L0)
12    (JMPIFNOT1 L19)
14    (GETVALUE 0)                        ; EXP
16    (CDR&PUSH)
17    (JSR L0)
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (GETVALUE&PUSH 0)                   ; EXP
24    (GETVALUE 1)                        ; PAR
26    (EQ)
27    (NOT)
28    (JMP L19)


Disassembly of function #:|(DEFUN HASPAR (EXP) ...)-121|
(CONST 0) = HASPAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HASPAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HASPAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HASPAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HASPAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HASPAR
8     (SKIP&RET 1)


Disassembly of function HASPAR
(CONST 0) = EXP
(CONST 1) = FREEPAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1&JMPIF 1 L12)                 ; FREEPAR
8     (T)
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (NIL)
13    (JMP L9)


Disassembly of function #:|(DEFUN CONFL (L1 L2 VAR) ...)-122|
(CONST 0) = CONFL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONFL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONFL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONFL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONFL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONFL
8     (SKIP&RET 1)


Disassembly of function CONFL
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = VAR
(CONST 3) = A
(CONST 4) = C
(CONST 5) = K
(CONST 6) = M
(CONST 7) = Z
(CONST 8) = ADD
(CONST 9) = $%E
(CONST 10) = 2
(CONST 11) = DIV
(CONST 12) = POWER
(CONST 13) = -1
(CONST 14) = MUL
(CONST 15) = 4
(CONST 16) = BESTRIG
(CONST 17) = SUB
(CONST 18) = MAXIMA-INTEGERP
(CONST 19) = ERFGAMMARED
(CONST 20) = KUMMER
(CONST 21) = 1
(CONST 22) = WHITFUN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K M Z VAR C A L2 L1)
writes special variables : (K M Z C A)
110 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; VAR
9     (NIL)
10    (BIND 3)                            ; A
12    (NIL)
13    (BIND 4)                            ; C
15    (NIL&PUSH)
16    (NIL)
17    (BIND 5)                            ; K
19    (NIL)
20    (BIND 6)                            ; M
22    (NIL)
23    (BIND 7)                            ; Z
25    (GETVALUE 0)                        ; L1
27    (CAR)
28    (SETVALUE 3)                        ; A
30    (GETVALUE 1)                        ; L2
32    (CAR)
33    (SETVALUE 4)                        ; C
35    (PUSH)
36    (GETVALUE&PUSH 3)                   ; A
38    (GETVALUE&PUSH 3)                   ; A
40    (CALL2&PUSH 8)                      ; ADD
42    (CALLS2&JMPIF 2 L71)                ; EQUAL
45    (GETVALUE&PUSH 3)                   ; A
47    (GETVALUE&PUSH 4)                   ; C
49    (CALL2 17)                          ; SUB
51    (STORE 9)
53    (PUSH)
54    (CALL1&JMPIF 18 L106)               ; MAXIMA-INTEGERP
57    (GETVALUE&PUSH 3)                   ; A
59    (CALL1&JMPIFNOT 18 L121)            ; MAXIMA-INTEGERP
62    L62
62    (GETVALUE&PUSH 0)                   ; L1
64    (GETVALUE&PUSH 1)                   ; L2
66    (CALL2 20)                          ; KUMMER
68    (JMP L182)
71    L71
71    (CONST&PUSH 9)                      ; $%E
72    (GETVALUE&PUSH 2)                   ; VAR
74    (CONST&PUSH 10)                     ; 2
75    (CALL2 11)                          ; DIV
77    (SETVALUE 7)                        ; Z
79    (PUSH)
80    (CALL2&PUSH 12)                     ; POWER
82    (GETVALUE&PUSH 3)                   ; A
84    (CONST&PUSH 10)                     ; 2
85    (CONST&PUSH 13)                     ; -1
86    (CALL2&PUSH 12)                     ; POWER
88    (CALL2&PUSH 8)                      ; ADD
90    (GETVALUE&PUSH 7)                   ; Z
92    (GETVALUE&PUSH 7)                   ; Z
94    (CALL2&PUSH 14)                     ; MUL
96    (CONST&PUSH 15)                     ; 4
97    (CALL2&PUSH 11)                     ; DIV
99    (CALL2&PUSH 16)                     ; BESTRIG
101   (CALL2 14)                          ; MUL
103   (JMP L182)
106   L106
106   (LOAD&PUSH 9)
107   (CALLS2&JMPIFNOT 147 L62)           ; MINUSP
110   (GETVALUE&PUSH 3)                   ; A
112   (GETVALUE&PUSH 4)                   ; C
114   (GETVALUE&PUSH 2)                   ; VAR
116   (CALL 3 19)                         ; ERFGAMMARED
119   (JMP L182)
121   L121
121   (GETVALUE&PUSH 4)                   ; C
123   (CONST&PUSH 21)                     ; 1
124   (CALL2&PUSH 17)                     ; SUB
126   (CONST&PUSH 10)                     ; 2
127   (CALL2 11)                          ; DIV
129   (SETVALUE 6)                        ; M
131   (CONST&PUSH 10)                     ; 2
132   (CONST&PUSH 13)                     ; -1
133   (CALL2&PUSH 12)                     ; POWER
135   (GETVALUE&PUSH 6)                   ; M
137   (CONST&PUSH 13)                     ; -1
138   (GETVALUE&PUSH 3)                   ; A
140   (CALL2&PUSH 14)                     ; MUL
142   (CALL 3 8)                          ; ADD
145   (SETVALUE 5)                        ; K
147   (GETVALUE&PUSH 2)                   ; VAR
149   (CONST&PUSH 13)                     ; -1
150   (CONST&PUSH 10)                     ; 2
151   (CONST&PUSH 13)                     ; -1
152   (CALL2&PUSH 12)                     ; POWER
154   (GETVALUE&PUSH 6)                   ; M
156   (CALL2&PUSH 8)                      ; ADD
158   (CALL2&PUSH 14)                     ; MUL
160   (CALL2&PUSH 12)                     ; POWER
162   (CONST&PUSH 9)                      ; $%E
163   (GETVALUE&PUSH 2)                   ; VAR
165   (CONST&PUSH 10)                     ; 2
166   (CALL2&PUSH 11)                     ; DIV
168   (CALL2&PUSH 12)                     ; POWER
170   (GETVALUE&PUSH 5)                   ; K
172   (GETVALUE&PUSH 6)                   ; M
174   (GETVALUE&PUSH 2)                   ; VAR
176   (CALL&PUSH 3 22)                    ; WHITFUN
179   (CALL 3 14)                         ; MUL
182   L182
182   (UNBIND 3)
184   (SKIP 1)
186   (UNBIND 5)
188   (SKIP&RET 4)


Disassembly of function #:|(DEFUN HYPREDERF (X) ...)-123|
(CONST 0) = HYPREDERF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYPREDERF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYPREDERF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYPREDERF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYPREDERF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYPREDERF
8     (SKIP&RET 1)


Disassembly of function HYPREDERF
(CONST 0) = X
(CONST 1) = $%I
(CONST 2) = 2
(CONST 3) = -1
(CONST 4) = POWER
(CONST 5) = MUL
(CONST 6) = $%PI
(CONST 7) = (%ERF)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; $%I
4     (GETVALUE&PUSH 0)                   ; X
6     (CONST&PUSH 2)                      ; 2
7     (CONST&PUSH 3)                      ; -1
8     (CALL2&PUSH 4)                      ; POWER
10    (CALL2&PUSH 4)                      ; POWER
12    (CALL2 5)                           ; MUL
14    (SETVALUE 0)                        ; X
16    (CONST&PUSH 6)                      ; $%PI
17    (CONST&PUSH 2)                      ; 2
18    (CONST&PUSH 3)                      ; -1
19    (CALL2&PUSH 4)                      ; POWER
21    (CALL2&PUSH 4)                      ; POWER
23    (CONST&PUSH 2)                      ; 2
24    (CONST&PUSH 3)                      ; -1
25    (CALL2&PUSH 4)                      ; POWER
27    (GETVALUE&PUSH 0)                   ; X
29    (CONST&PUSH 3)                      ; -1
30    (CALL2&PUSH 4)                      ; POWER
32    (CONST&PUSH 7)                      ; (%ERF)
33    (GETVALUE&PUSH 0)                   ; X
35    (LIST&PUSH 2)
37    (CALL 4 5)                          ; MUL
40    (UNBIND1)
41    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ERFGAMMARED (A C Z) ...)-124|
(CONST 0) = ERFGAMMARED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERFGAMMARED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERFGAMMARED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERFGAMMARED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERFGAMMARED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERFGAMMARED
8     (SKIP&RET 1)


Disassembly of function ERFGAMMARED
(CONST 0) = A
(CONST 1) = C
(CONST 2) = Z
(CONST 3) = NUMP
(CONST 4) = ERFGAMNUMRED
(CONST 5) = GAMMAREDS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z C A)
24 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; C
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (GETVALUE&PUSH 0)                   ; A
11    (CALL1&JMPIFNOT 3 L19)              ; NUMP
14    (GETVALUE&PUSH 1)                   ; C
16    (CALL1&JMPIF 3 L32)                 ; NUMP
19    L19
19    (GETVALUE&PUSH 0)                   ; A
21    (GETVALUE&PUSH 1)                   ; C
23    (GETVALUE&PUSH 2)                   ; Z
25    (CALL 3 5)                          ; GAMMAREDS
28    L28
28    (UNBIND 3)
30    (SKIP&RET 4)
32    L32
32    (GETVALUE&PUSH 0)                   ; A
34    (GETVALUE&PUSH 1)                   ; C
36    (GETVALUE&PUSH 2)                   ; Z
38    (CALL 3 4)                          ; ERFGAMNUMRED
41    (JMP L28)


Disassembly of function #:|(DEFUN GAMMAREDS (A C Z) ...)-125|
(CONST 0) = GAMMAREDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GAMMAREDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GAMMAREDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GAMMAREDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GAMMAREDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GAMMAREDS
8     (SKIP&RET 1)


Disassembly of function GAMMAREDS
(CONST 0) = A
(CONST 1) = C
(CONST 2) = Z
(CONST 3) = M
(CONST 4) = SUB
(CONST 5) = 1
(CONST 6) = HYPREDINCGM
(CONST 7) = PROD
(CONST 8) = 2
(CONST 9) = -1
(CONST 10) = POWER
(CONST 11) = MUL
(CONST 12) = ADD
(CONST 13) = FACTORIAL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z M A C)
writes special variable : (M)
88 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; C
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (NIL)
10    (BIND 3)                            ; M
12    (PUSH-NIL 4)
14    (GETVALUE&PUSH 1)                   ; C
16    (GETVALUE&PUSH 0)                   ; A
18    (CALL2 4)                           ; SUB
20    (SETVALUE 3)                        ; M
22    (PUSH)
23    (JMPIFEQTO 5 L76)                   ; 1
26    (GETVALUE&PUSH 0)                   ; A
28    (GETVALUE&PUSH 3)                   ; M
30    (CALL2 7)                           ; PROD
32    (STORE 3)
33    (CONST 8)                           ; 2
34    (STORE 1)
35    (GETVALUE 0)                        ; A
37    (STORE 0)
38    (CONST&PUSH 8)                      ; 2
39    (LOAD&PUSH 4)
40    (LOAD&PUSH 2)
41    (CONST&PUSH 9)                      ; -1
42    (CALL2&PUSH 10)                     ; POWER
44    (LOAD&PUSH 3)
45    (GETVALUE&PUSH 2)                   ; Z
47    (CALL2&PUSH 6)                      ; HYPREDINCGM
49    (CALL&PUSH 4 11)                    ; MUL
52    (CONST&PUSH 8)                      ; 2
53    (LOAD&PUSH 5)
54    (LOAD&PUSH 3)
55    (CONST&PUSH 5)                      ; 1
56    (CALL2 12)                          ; ADD
58    (STORE 3)
59    (PUSH)
60    (CONST&PUSH 9)                      ; -1
61    (CALL2&PUSH 10)                     ; POWER
63    (LOAD&PUSH 4)
64    (GETVALUE&PUSH 2)                   ; Z
66    (CALL2&PUSH 6)                      ; HYPREDINCGM
68    (CALL&PUSH 4 11)                    ; MUL
71    (CALL2 4)                           ; SUB
73    (STORE 2)
74    (JMP L123)
76    L76
76    (GETVALUE&PUSH 0)                   ; A
78    (GETVALUE&PUSH 2)                   ; Z
80    (CALL2 6)                           ; HYPREDINCGM
82    (JMP L129)
84    L84
84    (LOAD&INC&STORE 1)
86    (LOAD&PUSH 0)
87    (CONST&PUSH 5)                      ; 1
88    (CALL2 12)                          ; ADD
90    (STORE 0)
91    (LOAD&PUSH 2)
92    (CONST&PUSH 9)                      ; -1
93    (LOAD&PUSH 3)
94    (CALL2&PUSH 10)                     ; POWER
96    (GETVALUE&PUSH 3)                   ; M
98    (LOAD&DEC&PUSH 4)
100   (CALL2&PUSH 4)                      ; SUB
102   (CALL1&PUSH 13)                     ; FACTORIAL
104   (CONST&PUSH 9)                      ; -1
105   (CALL2&PUSH 10)                     ; POWER
107   (LOAD&PUSH 6)
108   (LOAD&PUSH 4)
109   (CONST&PUSH 9)                      ; -1
110   (CALL2&PUSH 10)                     ; POWER
112   (LOAD&PUSH 5)
113   (GETVALUE&PUSH 2)                   ; Z
115   (CALL2&PUSH 6)                      ; HYPREDINCGM
117   (CALL&PUSH 5 11)                    ; MUL
120   (CALL2 12)                          ; ADD
122   (STORE 2)
123   L123
123   (LOAD&PUSH 1)
124   (GETVALUE 3)                        ; M
126   (JMPIFNOTEQ L84)
128   (LOAD 2)
129   L129
129   (SKIP 4)
131   (UNBIND 4)
133   (SKIP&RET 4)


Disassembly of function #:|(DEFUN HYPREDINCGM (A Z) ...)-126|
(CONST 0) = HYPREDINCGM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYPREDINCGM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYPREDINCGM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYPREDINCGM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYPREDINCGM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYPREDINCGM
8     (SKIP&RET 1)


Disassembly of function HYPREDINCGM
(CONST 0) = A
(CONST 1) = Z
(CONST 2) = -1
(CONST 3) = MUL
(CONST 4) = POWER
(CONST 5) = ($%GAMMAGREEK)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A Z)
writes special variable : (Z)
21 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (CONST&PUSH 2)                      ; -1
7     (GETVALUE&PUSH 1)                   ; Z
9     (CALL2 3)                           ; MUL
11    (SETVALUE 1)                        ; Z
13    (GETVALUE&PUSH 0)                   ; A
15    (GETVALUE&PUSH 1)                   ; Z
17    (CONST&PUSH 2)                      ; -1
18    (GETVALUE&PUSH 0)                   ; A
20    (CALL2&PUSH 3)                      ; MUL
22    (CALL2&PUSH 4)                      ; POWER
24    (CONST&PUSH 5)                      ; ($%GAMMAGREEK)
25    (GETVALUE&PUSH 0)                   ; A
27    (GETVALUE&PUSH 1)                   ; Z
29    (LIST&PUSH 3)
31    (CALL 3 3)                          ; MUL
34    (UNBIND 2)
36    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PROD (A M) ...)-127|
(CONST 0) = PROD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PROD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PROD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PROD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PROD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PROD
8     (SKIP&RET 1)


Disassembly of function PROD
(CONST 0) = A
(CONST 1) = M
(CONST 2) = 2
(CONST 3) = 1
(CONST 4) = ADD
(CONST 5) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A M)
26 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (GETVALUE&PUSH 1)                   ; M
8     (JMPIFEQTO 2 L34)                   ; 2
11    (GETVALUE&PUSH 0)                   ; A
13    (GETVALUE&PUSH 1)                   ; M
15    (CALLS2&PUSH 151)                   ; 1-
17    (CALL2&PUSH 4)                      ; ADD
19    (GETVALUE&PUSH 0)                   ; A
21    (GETVALUE&PUSH 1)                   ; M
23    (CALLS2&PUSH 151)                   ; 1-
25    (JSR L0)
27    L27
27    (PUSH)
28    (CALL2 5)                           ; MUL
30    (UNBIND 2)
32    (SKIP&RET 3)
34    L34
34    (GETVALUE&PUSH 0)                   ; A
36    (GETVALUE&PUSH 0)                   ; A
38    (CONST&PUSH 3)                      ; 1
39    (CALL2 4)                           ; ADD
41    (JMP L27)


Disassembly of function #:|(DEFUN ERFGAMNUMRED (A C Z) ...)-128|
(CONST 0) = ERFGAMNUMRED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERFGAMNUMRED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERFGAMNUMRED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERFGAMNUMRED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERFGAMNUMRED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERFGAMNUMRED
8     (SKIP&RET 1)


Disassembly of function ERFGAMNUMRED
(CONST 0) = A
(CONST 1) = C
(CONST 2) = Z
(CONST 3) = 2
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = SUB
(CONST 7) = MAXIMA-INTEGERP
(CONST 8) = ERFRED
(CONST 9) = GAMMAREDS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z A C)
25 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; C
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (GETVALUE&PUSH 1)                   ; C
11    (CONST&PUSH 3)                      ; 2
12    (CONST&PUSH 4)                      ; -1
13    (CALL2&PUSH 5)                      ; POWER
15    (CALL2&PUSH 6)                      ; SUB
17    (CALL1&JMPIF 7 L33)                 ; MAXIMA-INTEGERP
20    (GETVALUE&PUSH 0)                   ; A
22    (GETVALUE&PUSH 1)                   ; C
24    (GETVALUE&PUSH 2)                   ; Z
26    (CALL 3 9)                          ; GAMMAREDS
29    L29
29    (UNBIND 3)
31    (SKIP&RET 4)
33    L33
33    (GETVALUE&PUSH 0)                   ; A
35    (GETVALUE&PUSH 1)                   ; C
37    (GETVALUE&PUSH 2)                   ; Z
39    (CALL 3 8)                          ; ERFRED
42    (JMP L29)


Disassembly of function #:|(DEFUN ERFRED (A C Z) ...)-129|
(CONST 0) = ERFRED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERFRED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERFRED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERFRED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERFRED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERFRED
8     (SKIP&RET 1)


Disassembly of function ERFRED
(CONST 0) = A
(CONST 1) = C
(CONST 2) = Z
(CONST 3) = N
(CONST 4) = M
(CONST 5) = 2
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = SUB
(CONST 9) = 3
(CONST 10) = DIV
(CONST 11) = THNO33
(CONST 12) = MUL
(CONST 13) = THNO35
(CONST 14) = THNO34
(CONST 15) = ADD
(CONST 16) = GAMMAREDS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z M N C A)
writes special variables : (M N)
77 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; C
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (NIL)
10    (BIND 3)                            ; N
12    (NIL)
13    (BIND 4)                            ; M
15    (GETVALUE&PUSH 0)                   ; A
17    (CONST&PUSH 5)                      ; 2
18    (CONST&PUSH 6)                      ; -1
19    (CALL2&PUSH 7)                      ; POWER
21    (CALL2 8)                           ; SUB
23    (SETVALUE 3)                        ; N
25    (GETVALUE&PUSH 1)                   ; C
27    (CONST&PUSH 9)                      ; 3
28    (CONST&PUSH 5)                      ; 2
29    (CALL2&PUSH 10)                     ; DIV
31    (CALL2 8)                           ; SUB
33    (SETVALUE 4)                        ; M
35    (GETVALUE&PUSH 3)                   ; N
37    (GETVALUE&PUSH 4)                   ; M
39    (CALLSR&JMPIF 1 48 L48)             ; >
43    (GETVALUE&PUSH 3)                   ; N
45    (CALLS2&JMPIFNOT 147 L93)           ; MINUSP
48    L48
48    (GETVALUE&PUSH 3)                   ; N
50    (CALLS2&JMPIFNOT 147 L58)           ; MINUSP
53    (GETVALUE&PUSH 4)                   ; M
55    (CALLS2&JMPIF 147 L104)             ; MINUSP
58    L58
58    (GETVALUE&PUSH 3)                   ; N
60    (CALLS2&JMPIFNOT 147 L68)           ; MINUSP
63    (GETVALUE&PUSH 4)                   ; M
65    (CALLS2&JMPIF 146 L121)             ; PLUSP
68    L68
68    (GETVALUE&PUSH 3)                   ; N
70    (CONST&PUSH 5)                      ; 2
71    (CONST&PUSH 6)                      ; -1
72    (CALL2&PUSH 7)                      ; POWER
74    (CALL2&PUSH 15)                     ; ADD
76    (GETVALUE&PUSH 4)                   ; M
78    (CONST&PUSH 9)                      ; 3
79    (CONST&PUSH 5)                      ; 2
80    (CALL2&PUSH 10)                     ; DIV
82    (CALL2&PUSH 15)                     ; ADD
84    (GETVALUE&PUSH 2)                   ; Z
86    (CALL 3 16)                         ; GAMMAREDS
89    L89
89    (UNBIND 5)
91    (SKIP&RET 4)
93    L93
93    (GETVALUE&PUSH 3)                   ; N
95    (GETVALUE&PUSH 4)                   ; M
97    (GETVALUE&PUSH 2)                   ; Z
99    (CALL 3 11)                         ; THNO33
102   (JMP L89)
104   L104
104   (CONST&PUSH 6)                      ; -1
105   (GETVALUE&PUSH 3)                   ; N
107   (CALL2&PUSH 12)                     ; MUL
109   (CONST&PUSH 6)                      ; -1
110   (GETVALUE&PUSH 4)                   ; M
112   (CALL2&PUSH 12)                     ; MUL
114   (GETVALUE&PUSH 2)                   ; Z
116   (CALL 3 13)                         ; THNO35
119   (JMP L89)
121   L121
121   (CONST&PUSH 6)                      ; -1
122   (GETVALUE&PUSH 3)                   ; N
124   (CALL2&PUSH 12)                     ; MUL
126   (GETVALUE&PUSH 4)                   ; M
128   (GETVALUE&PUSH 2)                   ; Z
130   (CALL 3 14)                         ; THNO34
133   (JMP L89)


Disassembly of function #:|(DEFUN THNO33 (N M X) ...)-130|
(CONST 0) = THNO33
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE THNO33>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; THNO33
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; THNO33
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE THNO33>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; THNO33
8     (SKIP&RET 1)


Disassembly of function THNO33
(CONST 0) = N
(CONST 1) = M
(CONST 2) = X
(CONST 3) = SUB
(CONST 4) = YANNIS
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = 3
(CONST 8) = 2
(CONST 9) = DIV
(CONST 10) = FCTRL
(CONST 11) = ADD
(CONST 12) = MUL
(CONST 13) = 1
(CONST 14) = ($DIFF)
(CONST 15) = $%E
(CONST 16) = ($DIFF)
(CONST 17) = HYPREDERF
(CONST 18) = MEVAL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N M)
65 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (GETVALUE&PUSH 1)                   ; M
11    (GETVALUE&PUSH 0)                   ; N
13    (CALL2&PUSH 3)                      ; SUB
15    (GETVALUE&PUSH 2)                   ; X
17    (CONST&PUSH 4)                      ; YANNIS
18    (CONST&PUSH 5)                      ; -1
19    (LOAD&PUSH 3)
20    (CALL2&PUSH 6)                      ; POWER
22    (CONST&PUSH 7)                      ; 3
23    (CONST&PUSH 8)                      ; 2
24    (CALL2&PUSH 9)                      ; DIV
26    (LOAD&PUSH 4)
27    (CALL2&PUSH 10)                     ; FCTRL
29    (LOAD&PUSH 4)
30    (CONST&PUSH 7)                      ; 3
31    (CONST&PUSH 8)                      ; 2
32    (CALL2&PUSH 9)                      ; DIV
34    (CALL2&PUSH 11)                     ; ADD
36    (GETVALUE&PUSH 0)                   ; N
38    (CALL2&PUSH 10)                     ; FCTRL
40    (CALL&PUSH 3 12)                    ; MUL
43    (CONST&PUSH 13)                     ; 1
44    (LOAD&PUSH 4)
45    (CALL2&PUSH 10)                     ; FCTRL
47    (CONST&PUSH 8)                      ; 2
48    (CONST&PUSH 5)                      ; -1
49    (CALL2&PUSH 6)                      ; POWER
51    (GETVALUE&PUSH 0)                   ; N
53    (CALL2&PUSH 10)                     ; FCTRL
55    (CALL2&PUSH 12)                     ; MUL
57    (CALL2&PUSH 9)                      ; DIV
59    (CONST&PUSH 14)                     ; ($DIFF)
60    (CONST&PUSH 15)                     ; $%E
61    (CONST&PUSH 4)                      ; YANNIS
62    (CALL2&PUSH 6)                      ; POWER
64    (CONST&PUSH 16)                     ; ($DIFF)
65    (CONST&PUSH 15)                     ; $%E
66    (CONST&PUSH 5)                      ; -1
67    (CONST&PUSH 4)                      ; YANNIS
68    (CALL2&PUSH 12)                     ; MUL
70    (CALL2&PUSH 6)                      ; POWER
72    (CONST&PUSH 4)                      ; YANNIS
73    (CALL1&PUSH 17)                     ; HYPREDERF
75    (CALL2&PUSH 12)                     ; MUL
77    (CONST&PUSH 4)                      ; YANNIS
78    (LOAD&PUSH 8)
79    (LIST&PUSH 4)
81    (CALL1&PUSH 18)                     ; MEVAL
83    (CALL2&PUSH 12)                     ; MUL
85    (CONST&PUSH 4)                      ; YANNIS
86    (GETVALUE&PUSH 0)                   ; N
88    (LIST&PUSH 4)
90    (CALL1&PUSH 18)                     ; MEVAL
92    (CALL2&PUSH 12)                     ; MUL
94    (PUSH-UNBOUND 3)
96    (CALLS1 172)                        ; SUBST
98    (SKIP 1)
100   (UNBIND 3)
102   (SKIP&RET 4)


Disassembly of function #:|(DEFUN THNO34 (N M X) ...)-131|
(CONST 0) = THNO34
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE THNO34>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; THNO34
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; THNO34
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE THNO34>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; THNO34
8     (SKIP&RET 1)


Disassembly of function THNO34
(CONST 0) = N
(CONST 1) = M
(CONST 2) = X
(CONST 3) = YANNIS
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = 3
(CONST 7) = 2
(CONST 8) = DIV
(CONST 9) = FCTRL
(CONST 10) = $%E
(CONST 11) = MUL
(CONST 12) = 1
(CONST 13) = ($DIFF)
(CONST 14) = ($DIFF)
(CONST 15) = HYPREDERF
(CONST 16) = MEVAL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M X)
61 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (GETVALUE&PUSH 2)                   ; X
11    (CONST&PUSH 3)                      ; YANNIS
12    (CONST&PUSH 4)                      ; -1
13    (GETVALUE&PUSH 1)                   ; M
15    (CALL2&PUSH 5)                      ; POWER
17    (CONST&PUSH 6)                      ; 3
18    (CONST&PUSH 7)                      ; 2
19    (CALL2&PUSH 8)                      ; DIV
21    (GETVALUE&PUSH 1)                   ; M
23    (CALL2&PUSH 9)                      ; FCTRL
25    (CONST&PUSH 10)                     ; $%E
26    (CONST&PUSH 3)                      ; YANNIS
27    (CALL2&PUSH 5)                      ; POWER
29    (CALL2&PUSH 11)                     ; MUL
31    (CONST&PUSH 12)                     ; 1
32    (GETVALUE&PUSH 1)                   ; M
34    (CALL2&PUSH 9)                      ; FCTRL
36    (GETVALUE&PUSH 1)                   ; M
38    (CALLS2&PUSH 150)                   ; 1+
40    (GETVALUE&PUSH 0)                   ; N
42    (CALL2&PUSH 9)                      ; FCTRL
44    (CONST&PUSH 3)                      ; YANNIS
45    (GETVALUE&PUSH 1)                   ; M
47    (CALL2&PUSH 5)                      ; POWER
49    (CALL&PUSH 3 11)                    ; MUL
52    (CALL2&PUSH 8)                      ; DIV
54    (CONST&PUSH 13)                     ; ($DIFF)
55    (CONST&PUSH 3)                      ; YANNIS
56    (GETVALUE&PUSH 1)                   ; M
58    (GETVALUE&PUSH 0)                   ; N
60    (CALLSR&PUSH 2 53)                  ; +
63    (CALL2&PUSH 5)                      ; POWER
65    (CONST&PUSH 14)                     ; ($DIFF)
66    (CONST&PUSH 10)                     ; $%E
67    (CONST&PUSH 4)                      ; -1
68    (CONST&PUSH 3)                      ; YANNIS
69    (CALL2&PUSH 11)                     ; MUL
71    (CALL2&PUSH 5)                      ; POWER
73    (CONST&PUSH 3)                      ; YANNIS
74    (CALL1&PUSH 15)                     ; HYPREDERF
76    (CALL2&PUSH 11)                     ; MUL
78    (CONST&PUSH 3)                      ; YANNIS
79    (GETVALUE&PUSH 1)                   ; M
81    (LIST&PUSH 4)
83    (CALL1&PUSH 16)                     ; MEVAL
85    (CALL2&PUSH 11)                     ; MUL
87    (CONST&PUSH 3)                      ; YANNIS
88    (GETVALUE&PUSH 0)                   ; N
90    (LIST&PUSH 4)
92    (CALL1&PUSH 16)                     ; MEVAL
94    (CALL&PUSH 3 11)                    ; MUL
97    (PUSH-UNBOUND 3)
99    (CALLS1 172)                        ; SUBST
101   (UNBIND 3)
103   (SKIP&RET 4)


Disassembly of function #:|(DEFUN THNO35 (N M X) ...)-132|
(CONST 0) = THNO35
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE THNO35>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; THNO35
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; THNO35
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE THNO35>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; THNO35
8     (SKIP&RET 1)


Disassembly of function THNO35
(CONST 0) = N
(CONST 1) = M
(CONST 2) = X
(CONST 3) = YANNIS
(CONST 4) = 2
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = SUB
(CONST 8) = 1
(CONST 9) = FCTRL
(CONST 10) = -2
(CONST 11) = MUL
(CONST 12) = DIV
(CONST 13) = ($DIFF)
(CONST 14) = $%E
(CONST 15) = ($DIFF)
(CONST 16) = HYPREDERF
(CONST 17) = MEVAL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M X)
64 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (GETVALUE&PUSH 2)                   ; X
11    (CONST&PUSH 3)                      ; YANNIS
12    (CONST&PUSH 3)                      ; YANNIS
13    (GETVALUE&PUSH 1)                   ; M
15    (CONST&PUSH 4)                      ; 2
16    (CONST&PUSH 5)                      ; -1
17    (CALL2&PUSH 6)                      ; POWER
19    (CALL2&PUSH 7)                      ; SUB
21    (CALL2&PUSH 6)                      ; POWER
23    (CONST&PUSH 5)                      ; -1
24    (GETVALUE&PUSH 1)                   ; M
26    (CALLSR&PUSH 0 54)                  ; -
29    (CALL2&PUSH 6)                      ; POWER
31    (CONST&PUSH 8)                      ; 1
32    (GETVALUE&PUSH 0)                   ; N
34    (CALL2&PUSH 9)                      ; FCTRL
36    (CONST&PUSH 10)                     ; -2
37    (CONST&PUSH 5)                      ; -1
38    (CALL2&PUSH 6)                      ; POWER
40    (GETVALUE&PUSH 1)                   ; M
42    (CALL2&PUSH 9)                      ; FCTRL
44    (CALL&PUSH 3 11)                    ; MUL
47    (CALL2&PUSH 12)                     ; DIV
49    (CONST&PUSH 13)                     ; ($DIFF)
50    (CONST&PUSH 3)                      ; YANNIS
51    (CONST&PUSH 4)                      ; 2
52    (CONST&PUSH 5)                      ; -1
53    (CALL2&PUSH 6)                      ; POWER
55    (CALL2&PUSH 6)                      ; POWER
57    (CONST&PUSH 14)                     ; $%E
58    (CONST&PUSH 3)                      ; YANNIS
59    (CALL2&PUSH 6)                      ; POWER
61    (CONST&PUSH 15)                     ; ($DIFF)
62    (CONST&PUSH 14)                     ; $%E
63    (CONST&PUSH 5)                      ; -1
64    (CONST&PUSH 3)                      ; YANNIS
65    (CALL2&PUSH 11)                     ; MUL
67    (CALL2&PUSH 6)                      ; POWER
69    (CONST&PUSH 3)                      ; YANNIS
70    (GETVALUE&PUSH 0)                   ; N
72    (CALL2&PUSH 6)                      ; POWER
74    (CONST&PUSH 3)                      ; YANNIS
75    (CALL1&PUSH 16)                     ; HYPREDERF
77    (CALL&PUSH 3 11)                    ; MUL
80    (CONST&PUSH 3)                      ; YANNIS
81    (GETVALUE&PUSH 0)                   ; N
83    (LIST&PUSH 4)
85    (CALL1&PUSH 17)                     ; MEVAL
87    (CALL&PUSH 3 11)                    ; MUL
90    (CONST&PUSH 3)                      ; YANNIS
91    (GETVALUE&PUSH 1)                   ; M
93    (LIST&PUSH 4)
95    (CALL1&PUSH 17)                     ; MEVAL
97    (CALL2&PUSH 11)                     ; MUL
99    (PUSH-UNBOUND 3)
101   (CALLS1 172)                        ; SUBST
103   (UNBIND 3)
105   (SKIP&RET 4)


Disassembly of function #:|(DEFUN FCTRL (A N) ...)-133|
(CONST 0) = FCTRL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FCTRL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FCTRL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FCTRL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FCTRL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FCTRL
8     (SKIP&RET 1)


Disassembly of function FCTRL
(CONST 0) = A
(CONST 1) = N
(CONST 2) = 1
(CONST 3) = ONE
(CONST 4) = ADD
(CONST 5) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A N)
27 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 1)                   ; N
8     (CALLS2&JMPIF 145 L38)              ; ZEROP
11    (GETVALUE&PUSH 1)                   ; N
13    (CALL1&JMPIF 3 L41)                 ; ONE
16    (GETVALUE&PUSH 0)                   ; A
18    (GETVALUE&PUSH 1)                   ; N
20    (CALLS2&PUSH 151)                   ; 1-
22    (CALL2&PUSH 4)                      ; ADD
24    (GETVALUE&PUSH 0)                   ; A
26    (GETVALUE&PUSH 1)                   ; N
28    (CALLS2&PUSH 151)                   ; 1-
30    (JSR&PUSH L0)
32    (CALL2 5)                           ; MUL
34    L34
34    (UNBIND 2)
36    (SKIP&RET 3)
38    L38
38    (CONST 2)                           ; 1
39    (JMP L34)
41    L41
41    (GETVALUE 0)                        ; A
43    (JMP L34)


Disassembly of function #:|(DEFUN ONE (X) ...)-134|
(CONST 0) = ONE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONE
8     (SKIP&RET 1)


Disassembly of function ONE
(CONST 0) = X
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST 1)                           ; 1
6     (EQ)
7     (UNBIND1)
8     (SKIP&RET 2)

WARNING in (DEFUN CHECKSIGNTM (EXPR) ...)-135 in lines 1555..1577 :
Function CHECKSIGNTM
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in lines 416..430

Disassembly of function #:|(DEFUN CHECKSIGNTM (EXPR) ...)-135|
(CONST 0) = CHECKSIGNTM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKSIGNTM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKSIGNTM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKSIGNTM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKSIGNTM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKSIGNTM
8     (SKIP&RET 1)


Disassembly of function CHECKSIGNTM
(CONST 0) = ZEROSIGNTEST
(CONST 1) = PRODUCTCASE
(CONST 2) = CHECKCOEFSIGNLIST
(CONST 3) = MTIMES
(CONST 4) = CHECKFLAGANDACT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (CHECKCOEFSIGNLIST)
writes special variables : (CHECKCOEFSIGNLIST PRODUCTCASE)
50 byte-code instructions:
0     (PUSH-NIL 2)
2     (NIL)
3     (BIND 0)                            ; ZEROSIGNTEST
5     (NIL)
6     (BIND 1)                            ; PRODUCTCASE
8     (GETVALUE 2)                        ; CHECKCOEFSIGNLIST
10    (STORE 7)
11    (LOAD 9)
12    (JMPIFATOM L20)
14    (LOAD 9)
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 3 L38)                   ; MTIMES
20    L20
20    (LOAD&JMPIFNOT 7 L44)
23    L23
23    (LOAD 7)
24    (CAR)
25    (CAR&PUSH)
26    (LOAD&PUSH 10)
27    (CALLS2&JMPIFNOT 2 L66)             ; EQUAL
30    (LOAD 7)
31    (CAR)
32    (CDR)
33    (CAR)
34    L34
34    (UNBIND 2)
36    (SKIP&RET 4)
38    L38
38    (T)
39    (SETVALUE 1)                        ; PRODUCTCASE
41    (LOAD&JMPIF 7 L23)
44    L44
44    (GETVALUE&PUSH 2)                   ; CHECKCOEFSIGNLIST
46    (LOAD&PUSH 10)
47    (LOAD&PUSH 11)
48    (CALL1 4)                           ; CHECKFLAGANDACT
50    (STORE 8)
52    (PUSH)
53    (LIST 1)
55    (CONS&PUSH)
56    (LIST&PUSH 1)
58    (CALLSR 2 34)                       ; APPEND
61    (SETVALUE 2)                        ; CHECKCOEFSIGNLIST
63    (LOAD 6)
64    (JMP L34)
66    L66
66    (LOAD&CDR&STORE 7)
68    (LOAD&JMPIFNOT 7 L44)
71    (JMP L23)

WARNING in (DEFUN CHECKFLAGANDACT (EXPR) ...)-136 in lines 1579..1584 :
Function CHECKFLAGANDACT
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in lines 432..436

Disassembly of function #:|(DEFUN CHECKFLAGANDACT (EXPR) ...)-136|
(CONST 0) = CHECKFLAGANDACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKFLAGANDACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKFLAGANDACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKFLAGANDACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKFLAGANDACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKFLAGANDACT
8     (SKIP&RET 1)


Disassembly of function CHECKFLAGANDACT
(CONST 0) = PRODUCTCASE
(CONST 1) = FINDSIGNOFACTORS
(CONST 2) = FINDSIGNOFTHEIRPRODUCT
(CONST 3) = $REALPART
(CONST 4) = ASKSIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (PRODUCTCASE)
writes special variable : (PRODUCTCASE)
13 byte-code instructions:
0     (GETVALUE 0)                        ; PRODUCTCASE
2     (JMPIF L11)
4     (LOAD&PUSH 1)
5     (CALL1&PUSH 3)                      ; $REALPART
7     (CALL1 4)                           ; ASKSIGN
9     (SKIP&RET 2)
11    L11
11    (NIL)
12    (SETVALUE 0)                        ; PRODUCTCASE
14    (LOAD&CDR&PUSH 1)
16    (CALL1&PUSH 1)                      ; FINDSIGNOFACTORS
18    (CALL1 2)                           ; FINDSIGNOFTHEIRPRODUCT
20    (SKIP&RET 2)

WARNING in (DEFUN FINDSIGNOFACTORS (LISTOFACTORS) ...)-137 in lines 1586..1593 :
Function FINDSIGNOFACTORS
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in lines 438..442

Disassembly of function #:|(DEFUN FINDSIGNOFACTORS (LISTOFACTORS) ...)-137|
(CONST 0) = FINDSIGNOFACTORS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDSIGNOFACTORS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDSIGNOFACTORS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDSIGNOFACTORS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDSIGNOFACTORS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDSIGNOFACTORS
8     (SKIP&RET 1)


Disassembly of function FINDSIGNOFACTORS
(CONST 0) = ZEROSIGNTEST
(CONST 1) = $ZERO
(CONST 2) = CHECKSIGNTM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ZEROSIGNTEST)
writes special variable : (ZEROSIGNTEST)
21 byte-code instructions:
0     (LOAD&JMPIF 1 L12)
3     L3
3     (NIL)
4     (SKIP&RET 2)
6     L6
6     (CONST 1)                           ; $ZERO
7     (SKIP&RET 2)
9     L9
9     (LOAD&JMPIFNOT 1 L3)
12    L12
12    (GETVALUE&PUSH 0)                   ; ZEROSIGNTEST
14    (JMPIFEQTO 1 L6)                    ; $ZERO
17    (LOAD&CAR&PUSH 1)
19    (CALL1 2)                           ; CHECKSIGNTM
21    (SETVALUE 0)                        ; ZEROSIGNTEST
23    (PUSH)
24    (LIST&PUSH 1)
26    (LOAD&CDR&PUSH 2)
28    (JSR&PUSH L9)
30    (CALLSR 2 34)                       ; APPEND
33    (SKIP&RET 2)

WARNING in (DEFUN FINDSIGNOFTHEIRPRODUCT (LIST) ...)-138 in lines 1595..1611 :
Function FINDSIGNOFTHEIRPRODUCT
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in lines 444..455

Disassembly of function #:|(DEFUN FINDSIGNOFTHEIRPRODUCT (LIST) ...)-138|
(CONST 0) = FINDSIGNOFTHEIRPRODUCT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDSIGNOFTHEIRPRODUCT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDSIGNOFTHEIRPRODUCT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDSIGNOFTHEIRPRODUCT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDSIGNOFTHEIRPRODUCT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDSIGNOFTHEIRPRODUCT
8     (SKIP&RET 1)


Disassembly of function FINDSIGNOFTHEIRPRODUCT
(CONST 0) = SIGN
(CONST 1) = $ZERO
(CONST 2) = $POSITIVE
(CONST 3) = $NEGATIVE
(CONST 4) = CHANGESIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (SIGN)
writes special variable : (SIGN)
29 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; SIGN
3     (LOAD&PUSH 4)
4     (JMPIFEQTO 1 L17)                   ; $ZERO
7     (CONST 2)                           ; $POSITIVE
8     (SETVALUE 0)                        ; SIGN
10    (LOAD&JMPIF 4 L31)
13    L13
13    (GETVALUE 0)                        ; SIGN
15    (JMP L42)
17    L17
17    (CONST 1)                           ; $ZERO
18    (JMP L42)
20    L20
20    (GETVALUE&PUSH 0)                   ; SIGN
22    (CALL1 4)                           ; CHANGESIGN
24    (SETVALUE 0)                        ; SIGN
26    L26
26    (LOAD&CDR&STORE 4)
28    (LOAD&JMPIFNOT 4 L13)
31    L31
31    (LOAD&CAR&PUSH 4)
33    (JMPIFEQTO 2 L26)                   ; $POSITIVE
36    (LOAD&CAR&PUSH 4)
38    (JMPIFEQTO 3 L20)                   ; $NEGATIVE
41    (CONST 1)                           ; $ZERO
42    L42
42    (UNBIND1)
43    (SKIP&RET 2)

WARNING in (DEFUN CHANGESIGN (SIGN) ...)-139 in lines 1613..1615 :
Function CHANGESIGN
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in lines 457..459

Disassembly of function #:|(DEFUN CHANGESIGN (SIGN) ...)-139|
(CONST 0) = CHANGESIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHANGESIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHANGESIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHANGESIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHANGESIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHANGESIGN
8     (SKIP&RET 1)


Disassembly of function CHANGESIGN
(CONST 0) = SIGN
(CONST 1) = $POSITIVE
(CONST 2) = $NEGATIVE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (SIGN)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; SIGN
3     (GETVALUE&PUSH 0)                   ; SIGN
5     (JMPIFEQTO 1 L12)                   ; $POSITIVE
8     (CONST 1)                           ; $POSITIVE
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (CONST 2)                           ; $NEGATIVE
13    (JMP L9)


Disassembly of function #:|(SETQ PAR '$P)-140|
(CONST 0) = $P
(CONST 1) = PAR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (PAR)
3 byte-code instructions:
0     (CONST 0)                           ; $P
1     (SETVALUE 1)                        ; PAR
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN VFVP (EXP) ...)-141|
(CONST 0) = VFVP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE VFVP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; VFVP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; VFVP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE VFVP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; VFVP
8     (SKIP&RET 1)


Disassembly of function VFVP
(CONST 0) = EXP
(CONST 1) = (V FREEVARPAR)
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; (V FREEVARPAR)
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN D*U (EXP) ...)-142|
(CONST 0) = D*U
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D*U>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D*U
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D*U
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D*U>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D*U
8     (SKIP&RET 1)


Disassembly of function D*U
(CONST 0) = EXP
(CONST 1) = ((MTIMES) ((COEFFTT) (D FREEPAR)) ((COEFFTT) (U HASPAR)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MTIMES) (# #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPQFORM (L1 L2 ARG) ...)-143|
(CONST 0) = FPQFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPQFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPQFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPQFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPQFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPQFORM
8     (SKIP&RET 1)


Disassembly of function FPQFORM
(CONST 0) = L1
(CONST 1) = L2
(CONST 2) = ARG
(CONST 3) = (MQAPPLY)
(CONST 4) = ($%F ARRAY)
(CONST 5) = (MLIST)
(CONST 6) = (MLIST)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARG L2 L1)
25 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L1
3     (LOAD 5)
4     (BIND 1)                            ; L2
6     (LOAD 7)
7     (BIND 2)                            ; ARG
9     (CONST&PUSH 3)                      ; (MQAPPLY)
10    (CONST&PUSH 4)                      ; ($%F ARRAY)
11    (GETVALUE&PUSH 0)                   ; L1
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (GETVALUE&PUSH 1)                   ; L2
17    (CALLS2&PUSH 71)                    ; LENGTH
19    (LIST&PUSH 3)
21    (CONST&PUSH 5)                      ; (MLIST)
22    (LIST&PUSH 1)
24    (GETVALUE&PUSH 0)                   ; L1
26    (CALLSR&PUSH 2 34)                  ; APPEND
29    (CONST&PUSH 6)                      ; (MLIST)
30    (LIST&PUSH 1)
32    (GETVALUE&PUSH 1)                   ; L2
34    (CALLSR&PUSH 2 34)                  ; APPEND
37    (GETVALUE&PUSH 2)                   ; ARG
39    (LIST 5)
41    (UNBIND 3)
43    (SKIP&RET 4)


Disassembly of function #:|(DEFUN SPLITPFQ (L L1 L2) ...)-144|
(CONST 0) = SPLITPFQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPLITPFQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPLITPFQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPLITPFQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPLITPFQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPLITPFQ
8     (SKIP&RET 1)


Disassembly of function SPLITPFQ
(CONST 0) = L
(CONST 1) = L1
(CONST 2) = L2
(CONST 3) = K
(CONST 4) = A1
(CONST 5) = B1
(CONST 6) = 0
(CONST 7) = 1
(CONST 8) = SUB
(CONST 9) = ZL-DELETE
(CONST 10) = VAR
(CONST 11) = HGFSIMP
(CONST 12) = MULL
(CONST 13) = MUL
(CONST 14) = COMBIN
(CONST 15) = DIV
(CONST 16) = POWER
(CONST 17) = INCR1
(CONST 18) = ADD
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR L2 B1 L1 A1 K L)
writes special variables : (L2 L1 B1 A1 K)
91 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; L1
6     (LOAD 7)
7     (BIND 2)                            ; L2
9     (PUSH-NIL 4)
11    (NIL)
12    (BIND 3)                            ; K
14    (NIL)
15    (BIND 4)                            ; A1
17    (NIL)
18    (BIND 5)                            ; B1
20    (CONST 6)                           ; 0
21    (STORE 12)
23    (CONST 7)                           ; 1
24    (STORE 11)
26    (STORE 10)
28    (CONST 6)                           ; 0
29    (STORE 9)
31    (GETVALUE 0)                        ; L
33    (CDR)
34    (CAR)
35    (SETVALUE 3)                        ; K
37    (GETVALUE 0)                        ; L
39    (CAR)
40    (SETVALUE 4)                        ; A1
42    (PUSH)
43    (GETVALUE&PUSH 3)                   ; K
45    (CALL2 8)                           ; SUB
47    (SETVALUE 5)                        ; B1
49    (GETVALUE&PUSH 4)                   ; A1
51    (GETVALUE&PUSH 1)                   ; L1
53    (CONST&PUSH 7)                      ; 1
54    (CALL 3 9)                          ; ZL-DELETE
57    (SETVALUE 1)                        ; L1
59    (GETVALUE&PUSH 5)                   ; B1
61    (GETVALUE&PUSH 2)                   ; L2
63    (CONST&PUSH 7)                      ; 1
64    (CALL 3 9)                          ; ZL-DELETE
67    (SETVALUE 2)                        ; L2
69    (GETVALUE&PUSH 1)                   ; L1
71    (GETVALUE&PUSH 2)                   ; L2
73    (GETVALUE&PUSH 10)                  ; VAR
75    (CALL 3 11)                         ; HGFSIMP
78    (STORE 12)
80    (JMP L143)
82    L82
82    (LOAD&INC&STORE 9)
84    (LOAD&PUSH 11)
85    (GETVALUE&PUSH 1)                   ; L1
87    (CALL1&PUSH 12)                     ; MULL
89    (CALL2 13)                          ; MUL
91    (STORE 11)
93    (LOAD&PUSH 10)
94    (GETVALUE&PUSH 2)                   ; L2
96    (CALL1&PUSH 12)                     ; MULL
98    (CALL2 13)                          ; MUL
100   (STORE 10)
102   (LOAD&PUSH 12)
103   (GETVALUE&PUSH 3)                   ; K
105   (LOAD&PUSH 11)
106   (CALL2&PUSH 14)                     ; COMBIN
108   (LOAD&PUSH 13)
109   (LOAD&PUSH 13)
110   (CALL2&PUSH 15)                     ; DIV
112   (GETVALUE&PUSH 10)                  ; VAR
114   (LOAD&PUSH 13)
115   (CALL2&PUSH 16)                     ; POWER
117   (GETVALUE&PUSH 1)                   ; L1
119   (CALL1 17)                          ; INCR1
121   (SETVALUE 1)                        ; L1
123   (PUSH)
124   (GETVALUE&PUSH 2)                   ; L2
126   (CALL1 17)                          ; INCR1
128   (SETVALUE 2)                        ; L2
130   (PUSH)
131   (GETVALUE&PUSH 10)                  ; VAR
133   (CALL&PUSH 3 11)                    ; HGFSIMP
136   (CALL&PUSH 4 13)                    ; MUL
139   (CALL2 18)                          ; ADD
141   (STORE 12)
143   L143
143   (LOAD&PUSH 9)
144   (GETVALUE 3)                        ; K
146   (JMPIFNOTEQ L82)
149   (LOAD 12)
150   (UNBIND 3)
152   (SKIP 4)
154   (UNBIND 3)
156   (SKIP&RET 4)


Disassembly of function #:|(DEFUN COMBIN (K COUNT) ...)-145|
(CONST 0) = COMBIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMBIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMBIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMBIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMBIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMBIN
8     (SKIP&RET 1)


Disassembly of function COMBIN
(CONST 0) = K
(CONST 1) = FACTORIAL
(CONST 2) = SUB
(CONST 3) = MUL
(CONST 4) = DIV
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (K)
14 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; K
3     (GETVALUE&PUSH 0)                   ; K
5     (CALL1&PUSH 1)                      ; FACTORIAL
7     (LOAD&PUSH 5)
8     (CALL1&PUSH 1)                      ; FACTORIAL
10    (GETVALUE&PUSH 0)                   ; K
12    (LOAD&PUSH 7)
13    (CALL2&PUSH 2)                      ; SUB
15    (CALL1&PUSH 1)                      ; FACTORIAL
17    (CALL2&PUSH 3)                      ; MUL
19    (CALL2 4)                           ; DIV
21    (UNBIND1)
22    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ALGII (A B C) ...)-146|
(CONST 0) = ALGII
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGII>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGII
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGII
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGII>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGII
8     (SKIP&RET 1)


Disassembly of function ALGII
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = M
(CONST 4) = N
(CONST 5) = F
(CONST 6) = S+C
(CONST 7) = CDRAS
(CONST 8) = 0
(CONST 9) = SUB
(CONST 10) = ADD
(CONST 11) = $ENTIER
(CONST 12) = MUL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M B A)
writes special variables : (N M)
70 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; N
15    (PUSH-NIL 4)
17    (CONST&PUSH 5)                      ; F
18    (GETVALUE&PUSH 0)                   ; A
20    (CALL1&PUSH 6)                      ; S+C
22    (CALL2 7)                           ; CDRAS
24    (STORE 1)
25    (JMPIF L29)
27    (CONST 8)                           ; 0
28    (STORE 1)
29    L29
29    (GETVALUE&PUSH 0)                   ; A
31    (LOAD&PUSH 2)
32    (CALL2 9)                           ; SUB
34    (STORE 2)
35    (LOAD 1)
36    (STORE 3)
37    (GETVALUE&PUSH 0)                   ; A
39    (GETVALUE&PUSH 1)                   ; B
41    (CALL2 10)                          ; ADD
43    (STORE 0)
44    (LOAD&PUSH 2)
45    (CALL1 11)                          ; $ENTIER
47    (SETVALUE 3)                        ; M
49    (LOAD&PUSH 2)
50    (GETVALUE&PUSH 3)                   ; M
52    (CALL2&PUSH 9)                      ; SUB
54    (LOAD&PUSH 4)
55    (CALL2 10)                          ; ADD
57    (STORE 3)
58    (GETVALUE&PUSH 1)                   ; B
60    (LOAD&PUSH 4)
61    (CALL2 10)                          ; ADD
63    (SETVALUE 4)                        ; N
65    (PUSH)
66    (GETVALUE&PUSH 3)                   ; M
68    (CALL2&PUSH 12)                     ; MUL
70    (CALLS2&JMPIFNOT 147 L85)           ; MINUSP
73    (GETVALUE&PUSH 3)                   ; M
75    (CALLS2&PUSH 158)                   ; ABS
77    (GETVALUE&PUSH 4)                   ; N
79    (CALLS2&PUSH 158)                   ; ABS
81    (CALLSR&JMPIF 1 48 L101)            ; >
85    L85
85    (LOAD&PUSH 3)
86    (LOAD&PUSH 4)
87    (GETVALUE&PUSH 3)                   ; M
89    (CALL2 10)                          ; ADD
91    L91
91    (PUSH)
92    (LOAD&PUSH 2)
93    (LIST 3)
95    (SKIP 4)
97    (UNBIND 5)
99    (SKIP&RET 4)
101   L101
101   (LOAD&PUSH 3)
102   (LOAD&PUSH 4)
103   (GETVALUE&PUSH 4)                   ; N
105   (CALL2 9)                           ; SUB
107   (JMP L91)


Disassembly of function #:|(DEFUN STEP4 (A B C) ...)-147|
(CONST 0) = STEP4
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STEP4>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STEP4
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STEP4
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STEP4>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STEP4
8     (SKIP&RET 1)


Disassembly of function STEP4
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = M
(CONST 4) = N
(CONST 5) = $RATPRINT
(CONST 6) = ALGII
(CONST 7) = ALGLIST
(CONST 8) = 2
(CONST 9) = -1
(CONST 10) = POWER
(CONST 11) = SUB
(CONST 12) = $FALSE
(CONST 13) = PSA
(CONST 14) = 1
(CONST 15) = VAR
(CONST 16) = MUL
(CONST 17) = ADD
(CONST 18) = $RATSIMP
(CONST 19) = ELL
(CONST 20) = ALGIII
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M VAR $FALSE ALGLIST C B A)
writes special variables : ($RATPRINT N M ALGLIST)
80 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; M
13    (NIL)
14    (BIND 4)                            ; N
16    (NIL)
17    (BIND 5)                            ; $RATPRINT
19    (NIL&PUSH)
20    (GETVALUE&PUSH 0)                   ; A
22    (GETVALUE&PUSH 1)                   ; B
24    (GETVALUE&PUSH 2)                   ; C
26    (CALL 3 6)                          ; ALGII
29    (SETVALUE 7)                        ; ALGLIST
31    (CDR)
32    (CAR)
33    (STORE 10)
35    (GETVALUE 7)                        ; ALGLIST
37    (CDR)
38    (CDR)
39    (CAR)
40    (SETVALUE 3)                        ; M
42    (GETVALUE&PUSH 2)                   ; C
44    (CONST&PUSH 8)                      ; 2
45    (CONST&PUSH 9)                      ; -1
46    (CALL2&PUSH 10)                     ; POWER
48    (CALL2 11)                          ; SUB
50    (SETVALUE 4)                        ; N
52    (GETVALUE 12)                       ; $FALSE
54    (SETVALUE 5)                        ; $RATPRINT
56    (LOAD&PUSH 10)
57    (CONST&PUSH 13)                     ; PSA
58    (CONST&PUSH 8)                      ; 2
59    (CONST&PUSH 9)                      ; -1
60    (CALL2&PUSH 10)                     ; POWER
62    (CONST&PUSH 14)                     ; 1
63    (GETVALUE&PUSH 15)                  ; VAR
65    (CALL2&PUSH 11)                     ; SUB
67    (CONST&PUSH 8)                      ; 2
68    (CONST&PUSH 9)                      ; -1
69    (CALL2&PUSH 10)                     ; POWER
71    (CALL2&PUSH 10)                     ; POWER
73    (CONST&PUSH 8)                      ; 2
74    (CONST&PUSH 9)                      ; -1
75    (CALL2&PUSH 10)                     ; POWER
77    (CALL2&PUSH 16)                     ; MUL
79    (CALL2&PUSH 17)                     ; ADD
81    (CONST&PUSH 14)                     ; 1
82    (CONST&PUSH 8)                      ; 2
83    (CONST&PUSH 13)                     ; PSA
84    (CALL2&PUSH 16)                     ; MUL
86    (CALL2&PUSH 11)                     ; SUB
88    (CALL2&PUSH 10)                     ; POWER
90    (PUSH-UNBOUND 3)
92    (CALLS1&PUSH 172)                   ; SUBST
94    (CALL1 18)                          ; $RATSIMP
96    (STORE 0)
97    (GETVALUE&PUSH 15)                  ; VAR
99    (CONST&PUSH 19)                     ; ELL
100   (CONST&PUSH 19)                     ; ELL
101   (GETVALUE&PUSH 15)                  ; VAR
103   (LOAD&PUSH 4)
104   (PUSH-UNBOUND 3)
106   (CALLS1&PUSH 172)                   ; SUBST
108   (GETVALUE&PUSH 3)                   ; M
110   (GETVALUE&PUSH 4)                   ; N
112   (LOAD&PUSH 15)
113   (CALL&PUSH 4 20)                    ; ALGIII
116   (PUSH-UNBOUND 3)
118   (CALLS1 172)                        ; SUBST
120   (SKIP 1)
122   (UNBIND 3)
124   (SKIP 1)
126   (UNBIND 3)
128   (SKIP&RET 4)


Disassembly of function #:|(DEFUN S+C (EXP) ...)-148|
(CONST 0) = S+C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE S+C>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; S+C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; S+C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE S+C>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; S+C
8     (SKIP&RET 1)


Disassembly of function S+C
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (F NONNUMP)) ((COEFFPP) (C $NUMBERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NONNUMP (Z) ...)-149|
(CONST 0) = NONNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NONNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NONNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NONNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NONNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NONNUMP
8     (SKIP&RET 1)


Disassembly of function NONNUMP
(CONST 0) = Z
(CONST 1) = $NUMBERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (Z)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Z
3     (GETVALUE&PUSH 0)                   ; Z
5     (CALL1&JMPIFNOT 1 L12)              ; $NUMBERP
8     (NIL)
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (T)
13    (JMP L9)


Disassembly of function #:|(DEFUN ALGIII (FUN M N ...) ...)-150|
(CONST 0) = ALGIII
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGIII>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGIII
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGIII
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGIII>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGIII
8     (SKIP&RET 1)


Disassembly of function ALGIII
(CONST 0) = FUN
(CONST 1) = M
(CONST 2) = N
(CONST 3) = NN
(CONST 4) = NNI
(CONST 5) = F81
(CONST 6) = F85
(CONST 7) = HYP-NEGP
(CONST 8) = F86
(CONST 9) = F82
(CONST 10) = F83
(CONST 11) = F84
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NN FUN N M)
writes special variable : (NN)
82 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FUN
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; N
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; NN
13    (GETVALUE&PUSH 1)                   ; M
15    (CALLS2&STORE 158 3)                ; ABS
18    (GETVALUE&PUSH 2)                   ; N
20    (CALLS2 158)                        ; ABS
22    (SETVALUE 3)                        ; NN
24    (GETVALUE&PUSH 1)                   ; M
26    (CALL1&JMPIFNOT 4 L34)              ; NNI
29    (GETVALUE&PUSH 2)                   ; N
31    (CALL1&JMPIF 4 L84)                 ; NNI
34    L34
34    (GETVALUE&PUSH 2)                   ; N
36    (CALL1&JMPIFNOT 7 L45)              ; HYP-NEGP
39    (GETVALUE&PUSH 1)                   ; M
41    (CALL1&JMPIF 7 L114)                ; HYP-NEGP
45    L45
45    (GETVALUE&PUSH 1)                   ; M
47    (CALL1&JMPIFNOT 7 L56)              ; HYP-NEGP
50    (GETVALUE&PUSH 2)                   ; N
52    (CALL1&JMPIF 4 L138)                ; NNI
56    L56
56    (GETVALUE&PUSH 0)                   ; FUN
58    (LOAD&PUSH 4)
59    (GETVALUE&PUSH 3)                   ; NN
61    (LOAD&PUSH 17)
62    (CALL 4 11)                         ; F84
65    L65
65    (UNBIND1)
66    (SKIP 1)
68    (UNBIND 3)
70    (SKIP&RET 5)
72    L72
72    (GETVALUE&PUSH 0)                   ; FUN
74    (GETVALUE&PUSH 1)                   ; M
76    (GETVALUE&PUSH 2)                   ; N
78    (LOAD&PUSH 17)
79    (CALL 4 5)                          ; F81
82    (JMP L65)
84    L84
84    (GETVALUE&PUSH 1)                   ; M
86    (GETVALUE&PUSH 2)                   ; N
88    (CALLSR&JMPIF 1 47 L72)             ; <
92    (GETVALUE&PUSH 0)                   ; FUN
94    (LOAD&PUSH 4)
95    (GETVALUE&PUSH 3)                   ; NN
97    (LOAD&PUSH 17)
98    (CALL 4 6)                          ; F85
101   (JMP L65)
103   L103
103   (GETVALUE&PUSH 0)                   ; FUN
105   (LOAD&PUSH 4)
106   (GETVALUE&PUSH 3)                   ; NN
108   (LOAD&PUSH 17)
109   (CALL 4 8)                          ; F86
112   (JMP L65)
114   L114
114   (GETVALUE&PUSH 2)                   ; N
116   (CALLS2&PUSH 158)                   ; ABS
118   (GETVALUE&PUSH 1)                   ; M
120   (CALLS2&PUSH 158)                   ; ABS
122   (CALLSR&JMPIF 1 48 L103)            ; >
126   (GETVALUE&PUSH 0)                   ; FUN
128   (LOAD&PUSH 4)
129   (GETVALUE&PUSH 3)                   ; NN
131   (LOAD&PUSH 17)
132   (CALL 4 9)                          ; F82
135   (JMP L65)
138   L138
138   (GETVALUE&PUSH 0)                   ; FUN
140   (LOAD&PUSH 4)
141   (GETVALUE&PUSH 3)                   ; NN
143   (LOAD&PUSH 17)
144   (CALL 4 10)                         ; F83
147   (JMP L65)


Disassembly of function #:|(DEFUN FACTF (X N) ...)-151|
(CONST 0) = FACTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTF
8     (SKIP&RET 1)


Disassembly of function FACTF
(CONST 0) = X
(CONST 1) = N
(CONST 2) = 1
(CONST 3) = ADD
(CONST 4) = SUB
(CONST 5) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N)
22 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 1)                   ; N
8     (CALLS2&JMPIF 145 L31)              ; ZEROP
11    (GETVALUE&PUSH 0)                   ; X
13    (GETVALUE&PUSH 0)                   ; X
15    (CONST&PUSH 2)                      ; 1
16    (CALL2&PUSH 3)                      ; ADD
18    (GETVALUE&PUSH 1)                   ; N
20    (CONST&PUSH 2)                      ; 1
21    (CALL2&PUSH 4)                      ; SUB
23    (JSR&PUSH L0)
25    (CALL2 5)                           ; MUL
27    L27
27    (UNBIND 2)
29    (SKIP&RET 3)
31    L31
31    (CONST 2)                           ; 1
32    (JMP L27)


Disassembly of function #:|(DEFUN F85 (FUN M N ...) ...)-152|
(CONST 0) = F85
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F85>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F85
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F85
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F85>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F85
8     (SKIP&RET 1)


Disassembly of function F85
(CONST 0) = FUN
(CONST 1) = M
(CONST 2) = N
(CONST 3) = A
(CONST 4) = 2
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = FACTF
(CONST 8) = ADD
(CONST 9) = SUB
(CONST 10) = MUL
(CONST 11) = 1
(CONST 12) = ELL
(CONST 13) = $DIFF
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN M A N)
92 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FUN
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; A
12    (CONST&PUSH 4)                      ; 2
13    (CONST&PUSH 5)                      ; -1
14    (CALL2&PUSH 6)                      ; POWER
16    (GETVALUE&PUSH 2)                   ; N
18    (CALL2&PUSH 7)                      ; FACTF
20    (CONST&PUSH 5)                      ; -1
21    (GETVALUE&PUSH 2)                   ; N
23    (CALL2&PUSH 6)                      ; POWER
25    (CONST&PUSH 5)                      ; -1
26    (CALL2&PUSH 6)                      ; POWER
28    (GETVALUE&PUSH 3)                   ; A
30    (GETVALUE&PUSH 1)                   ; M
32    (CALL2&PUSH 8)                      ; ADD
34    (GETVALUE&PUSH 2)                   ; N
36    (CALL2&PUSH 9)                      ; SUB
38    (GETVALUE&PUSH 2)                   ; N
40    (CALL2&PUSH 7)                      ; FACTF
42    (CONST&PUSH 5)                      ; -1
43    (CALL2&PUSH 6)                      ; POWER
45    (CONST&PUSH 4)                      ; 2
46    (CONST&PUSH 5)                      ; -1
47    (CALL2&PUSH 6)                      ; POWER
49    (GETVALUE&PUSH 3)                   ; A
51    (CONST&PUSH 5)                      ; -1
52    (CALL2&PUSH 10)                     ; MUL
54    (CALL2&PUSH 9)                      ; SUB
56    (GETVALUE&PUSH 2)                   ; N
58    (CALL2&PUSH 7)                      ; FACTF
60    (CONST&PUSH 5)                      ; -1
61    (CALL2&PUSH 6)                      ; POWER
63    (GETVALUE&PUSH 3)                   ; A
65    (GETVALUE&PUSH 1)                   ; M
67    (GETVALUE&PUSH 2)                   ; N
69    (CALLSR&PUSH 1 54)                  ; -
72    (CALL2&PUSH 7)                      ; FACTF
74    (CONST&PUSH 5)                      ; -1
75    (CALL2&PUSH 6)                      ; POWER
77    (CONST&PUSH 11)                     ; 1
78    (CONST&PUSH 12)                     ; ELL
79    (CALL2&PUSH 9)                      ; SUB
81    (CONST&PUSH 11)                     ; 1
82    (GETVALUE&PUSH 2)                   ; N
84    (CALL2&PUSH 8)                      ; ADD
86    (GETVALUE&PUSH 1)                   ; M
88    (CALL2&PUSH 9)                      ; SUB
90    (GETVALUE&PUSH 3)                   ; A
92    (CALL2&PUSH 9)                      ; SUB
94    (CALL2&PUSH 6)                      ; POWER
96    (CONST&PUSH 11)                     ; 1
97    (CONST&PUSH 12)                     ; ELL
98    (CALL2&PUSH 9)                      ; SUB
100   (GETVALUE&PUSH 3)                   ; A
102   (GETVALUE&PUSH 1)                   ; M
104   (CALL2&PUSH 8)                      ; ADD
106   (CONST&PUSH 11)                     ; 1
107   (CALL2&PUSH 9)                      ; SUB
109   (CALL2&PUSH 6)                      ; POWER
111   (CONST&PUSH 12)                     ; ELL
112   (CONST&PUSH 11)                     ; 1
113   (GETVALUE&PUSH 3)                   ; A
115   (CALL2&PUSH 9)                      ; SUB
117   (CALL2&PUSH 6)                      ; POWER
119   (CONST&PUSH 12)                     ; ELL
120   (GETVALUE&PUSH 3)                   ; A
122   (GETVALUE&PUSH 1)                   ; M
124   (CONST&PUSH 5)                      ; -1
125   (CALL&PUSH 3 8)                     ; ADD
128   (GETVALUE&PUSH 2)                   ; N
130   (CALL2&PUSH 9)                      ; SUB
132   (CALL2&PUSH 6)                      ; POWER
134   (GETVALUE&PUSH 0)                   ; FUN
136   (CALL2&PUSH 10)                     ; MUL
138   (CONST&PUSH 12)                     ; ELL
139   (GETVALUE&PUSH 1)                   ; M
141   (GETVALUE&PUSH 2)                   ; N
143   (CALLSR&PUSH 1 54)                  ; -
146   (CALL&PUSH 3 13)                    ; $DIFF
149   (CALL&PUSH 3 10)                    ; MUL
152   (CONST&PUSH 12)                     ; ELL
153   (GETVALUE&PUSH 2)                   ; N
155   (CALL&PUSH 3 13)                    ; $DIFF
158   (CALL 7 10)                         ; MUL
161   (UNBIND 4)
163   (SKIP&RET 5)


Disassembly of function #:|(DEFUN HYP-NEGP (X) ...)-153|
(CONST 0) = HYP-NEGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYP-NEGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYP-NEGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYP-NEGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYP-NEGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYP-NEGP
8     (SKIP&RET 1)


Disassembly of function HYP-NEGP
(CONST 0) = X
(CONST 1) = ASKSIGN
(CONST 2) = $NEGATIVE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&PUSH 1)                      ; ASKSIGN
7     (JMPIFEQTO 2 L14)                   ; $NEGATIVE
10    (NIL)
11    L11
11    (UNBIND1)
12    (SKIP&RET 2)
14    L14
14    (T)
15    (JMP L11)


Disassembly of function #:|(DEFUN F81 (FUN M N ...) ...)-154|
(CONST 0) = F81
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F81>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F81
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F81
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F81>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F81
8     (SKIP&RET 1)


Disassembly of function F81
(CONST 0) = FUN
(CONST 1) = M
(CONST 2) = N
(CONST 3) = A
(CONST 4) = 2
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = ADD
(CONST 8) = FACTF
(CONST 9) = SUB
(CONST 10) = 1
(CONST 11) = ELL
(CONST 12) = -2
(CONST 13) = MUL
(CONST 14) = $DIFF
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN A M N)
106 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FUN
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; A
12    (CONST&PUSH 4)                      ; 2
13    (CONST&PUSH 5)                      ; -1
14    (CALL2&PUSH 6)                      ; POWER
16    (GETVALUE&PUSH 2)                   ; N
18    (GETVALUE&PUSH 1)                   ; M
20    (CALLSR&PUSH 1 54)                  ; -
23    (CALL2&PUSH 7)                      ; ADD
25    (GETVALUE&PUSH 1)                   ; M
27    (CALL2&PUSH 8)                      ; FACTF
29    (CONST&PUSH 4)                      ; 2
30    (CONST&PUSH 5)                      ; -1
31    (CALL2&PUSH 6)                      ; POWER
33    (GETVALUE&PUSH 2)                   ; N
35    (GETVALUE&PUSH 1)                   ; M
37    (CALLSR&PUSH 1 54)                  ; -
40    (CALL2&PUSH 8)                      ; FACTF
42    (CONST&PUSH 5)                      ; -1
43    (GETVALUE&PUSH 1)                   ; M
45    (CALL2&PUSH 6)                      ; POWER
47    (CONST&PUSH 5)                      ; -1
48    (CALL2&PUSH 6)                      ; POWER
50    (GETVALUE&PUSH 3)                   ; A
52    (GETVALUE&PUSH 1)                   ; M
54    (CALL2&PUSH 8)                      ; FACTF
56    (CONST&PUSH 5)                      ; -1
57    (CALL2&PUSH 6)                      ; POWER
59    (CONST&PUSH 4)                      ; 2
60    (CONST&PUSH 5)                      ; -1
61    (CALL2&PUSH 6)                      ; POWER
63    (GETVALUE&PUSH 2)                   ; N
65    (GETVALUE&PUSH 3)                   ; A
67    (GETVALUE&PUSH 1)                   ; M
69    (CALL2&PUSH 9)                      ; SUB
71    (CALL&PUSH 3 7)                     ; ADD
74    (GETVALUE&PUSH 1)                   ; M
76    (CALL2&PUSH 8)                      ; FACTF
78    (CONST&PUSH 5)                      ; -1
79    (CALL2&PUSH 6)                      ; POWER
81    (CONST&PUSH 4)                      ; 2
82    (CONST&PUSH 5)                      ; -1
83    (CALL2&PUSH 6)                      ; POWER
85    (GETVALUE&PUSH 3)                   ; A
87    (CALL2&PUSH 9)                      ; SUB
89    (GETVALUE&PUSH 2)                   ; N
91    (GETVALUE&PUSH 1)                   ; M
93    (CALLSR&PUSH 1 54)                  ; -
96    (CALL2&PUSH 8)                      ; FACTF
98    (CONST&PUSH 5)                      ; -1
99    (CALL2&PUSH 6)                      ; POWER
101   (CONST&PUSH 4)                      ; 2
102   (CONST&PUSH 5)                      ; -1
103   (CALL2&PUSH 6)                      ; POWER
105   (GETVALUE&PUSH 3)                   ; A
107   (CALL2&PUSH 7)                      ; ADD
109   (GETVALUE&PUSH 2)                   ; N
111   (GETVALUE&PUSH 1)                   ; M
113   (CALLSR&PUSH 1 54)                  ; -
116   (CALL2&PUSH 8)                      ; FACTF
118   (CONST&PUSH 5)                      ; -1
119   (CALL2&PUSH 6)                      ; POWER
121   (CONST&PUSH 10)                     ; 1
122   (CONST&PUSH 11)                     ; ELL
123   (CALL2&PUSH 9)                      ; SUB
125   (CONST&PUSH 10)                     ; 1
126   (GETVALUE&PUSH 3)                   ; A
128   (CALL2&PUSH 9)                      ; SUB
130   (CALL2&PUSH 6)                      ; POWER
132   (CONST&PUSH 10)                     ; 1
133   (CONST&PUSH 11)                     ; ELL
134   (CALL2&PUSH 9)                      ; SUB
136   (GETVALUE&PUSH 3)                   ; A
138   (GETVALUE&PUSH 2)                   ; N
140   (CONST&PUSH 12)                     ; -2
141   (CONST&PUSH 5)                      ; -1
142   (CALL2&PUSH 6)                      ; POWER
144   (CALL&PUSH 3 7)                     ; ADD
147   (CALL2&PUSH 6)                      ; POWER
149   (CONST&PUSH 10)                     ; 1
150   (CONST&PUSH 11)                     ; ELL
151   (CALL2&PUSH 9)                      ; SUB
153   (CONST&PUSH 12)                     ; -2
154   (CONST&PUSH 5)                      ; -1
155   (CALL2&PUSH 6)                      ; POWER
157   (CALL2&PUSH 6)                      ; POWER
159   (GETVALUE&PUSH 0)                   ; FUN
161   (CALL2&PUSH 13)                     ; MUL
163   (CONST&PUSH 11)                     ; ELL
164   (GETVALUE&PUSH 2)                   ; N
166   (GETVALUE&PUSH 1)                   ; M
168   (CALLSR&PUSH 1 54)                  ; -
171   (CALL&PUSH 3 14)                    ; $DIFF
174   (CALL2&PUSH 13)                     ; MUL
176   (CONST&PUSH 11)                     ; ELL
177   (GETVALUE&PUSH 1)                   ; M
179   (CALL&PUSH 3 14)                    ; $DIFF
182   (CALL 9 13)                         ; MUL
185   (UNBIND 4)
187   (SKIP&RET 5)


Disassembly of function #:|(DEFUN F82 (FUN M N ...) ...)-155|
(CONST 0) = F82
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F82>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F82
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F82
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F82>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F82
8     (SKIP&RET 1)


Disassembly of function F82
(CONST 0) = FUN
(CONST 1) = M
(CONST 2) = N
(CONST 3) = A
(CONST 4) = 2
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = SUB
(CONST 8) = FACTF
(CONST 9) = ADD
(CONST 10) = ELL
(CONST 11) = 1
(CONST 12) = -2
(CONST 13) = MUL
(CONST 14) = $DIFF
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN A M N)
79 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FUN
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; A
12    (CONST&PUSH 4)                      ; 2
13    (CONST&PUSH 5)                      ; -1
14    (CALL2&PUSH 6)                      ; POWER
16    (GETVALUE&PUSH 2)                   ; N
18    (CALL2&PUSH 7)                      ; SUB
20    (GETVALUE&PUSH 1)                   ; M
22    (CALL2&PUSH 8)                      ; FACTF
24    (CONST&PUSH 5)                      ; -1
25    (CALL2&PUSH 6)                      ; POWER
27    (CONST&PUSH 4)                      ; 2
28    (CONST&PUSH 5)                      ; -1
29    (CALL2&PUSH 6)                      ; POWER
31    (GETVALUE&PUSH 1)                   ; M
33    (CALL2&PUSH 9)                      ; ADD
35    (GETVALUE&PUSH 2)                   ; N
37    (CALL2&PUSH 7)                      ; SUB
39    (GETVALUE&PUSH 2)                   ; N
41    (GETVALUE&PUSH 1)                   ; M
43    (CALLSR&PUSH 1 54)                  ; -
46    (CALL2&PUSH 8)                      ; FACTF
48    (CONST&PUSH 5)                      ; -1
49    (CALL2&PUSH 6)                      ; POWER
51    (CONST&PUSH 10)                     ; ELL
52    (GETVALUE&PUSH 2)                   ; N
54    (CONST&PUSH 4)                      ; 2
55    (CONST&PUSH 5)                      ; -1
56    (CALL2&PUSH 6)                      ; POWER
58    (CALL2&PUSH 9)                      ; ADD
60    (CALL2&PUSH 6)                      ; POWER
62    (CONST&PUSH 11)                     ; 1
63    (CONST&PUSH 10)                     ; ELL
64    (CALL2&PUSH 7)                      ; SUB
66    (GETVALUE&PUSH 1)                   ; M
68    (CONST&PUSH 4)                      ; 2
69    (CONST&PUSH 5)                      ; -1
70    (CALL2&PUSH 6)                      ; POWER
72    (GETVALUE&PUSH 3)                   ; A
74    (CALL&PUSH 3 9)                     ; ADD
77    (GETVALUE&PUSH 2)                   ; N
79    (CALL2&PUSH 7)                      ; SUB
81    (CALL2&PUSH 6)                      ; POWER
83    (CONST&PUSH 11)                     ; 1
84    (CONST&PUSH 10)                     ; ELL
85    (CALL2&PUSH 7)                      ; SUB
87    (GETVALUE&PUSH 2)                   ; N
89    (GETVALUE&PUSH 3)                   ; A
91    (CALL2&PUSH 7)                      ; SUB
93    (CONST&PUSH 4)                      ; 2
94    (CONST&PUSH 5)                      ; -1
95    (CALL2&PUSH 6)                      ; POWER
97    (CALL2&PUSH 7)                      ; SUB
99    (CALL2&PUSH 6)                      ; POWER
101   (CONST&PUSH 10)                     ; ELL
102   (CONST&PUSH 12)                     ; -2
103   (CONST&PUSH 5)                      ; -1
104   (CALL2&PUSH 6)                      ; POWER
106   (CALL2&PUSH 6)                      ; POWER
108   (GETVALUE&PUSH 0)                   ; FUN
110   (CALL2&PUSH 13)                     ; MUL
112   (CONST&PUSH 10)                     ; ELL
113   (GETVALUE&PUSH 2)                   ; N
115   (GETVALUE&PUSH 1)                   ; M
117   (CALLSR&PUSH 1 54)                  ; -
120   (CALL&PUSH 3 14)                    ; $DIFF
123   (CALL2&PUSH 13)                     ; MUL
125   (CONST&PUSH 10)                     ; ELL
126   (GETVALUE&PUSH 1)                   ; M
128   (CALL&PUSH 3 14)                    ; $DIFF
131   (CALL 5 13)                         ; MUL
134   (UNBIND 4)
136   (SKIP&RET 5)


Disassembly of function #:|(DEFUN F83 (FUN M N ...) ...)-156|
(CONST 0) = F83
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F83>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F83
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F83
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F83>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F83
8     (SKIP&RET 1)


Disassembly of function F83
(CONST 0) = FUN
(CONST 1) = M
(CONST 2) = N
(CONST 3) = A
(CONST 4) = 2
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = FACTF
(CONST 8) = SUB
(CONST 9) = ADD
(CONST 10) = 1
(CONST 11) = ELL
(CONST 12) = -2
(CONST 13) = MUL
(CONST 14) = $DIFF
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN M A N)
91 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FUN
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; A
12    (CONST&PUSH 4)                      ; 2
13    (CONST&PUSH 5)                      ; -1
14    (CALL2&PUSH 6)                      ; POWER
16    (GETVALUE&PUSH 2)                   ; N
18    (CALL2&PUSH 7)                      ; FACTF
20    (CONST&PUSH 4)                      ; 2
21    (CONST&PUSH 5)                      ; -1
22    (CALL2&PUSH 6)                      ; POWER
24    (GETVALUE&PUSH 3)                   ; A
26    (CALL2&PUSH 8)                      ; SUB
28    (GETVALUE&PUSH 2)                   ; N
30    (CALL2&PUSH 7)                      ; FACTF
32    (CONST&PUSH 5)                      ; -1
33    (CALL2&PUSH 6)                      ; POWER
35    (CONST&PUSH 4)                      ; 2
36    (CONST&PUSH 5)                      ; -1
37    (CALL2&PUSH 6)                      ; POWER
39    (GETVALUE&PUSH 3)                   ; A
41    (CALL2&PUSH 8)                      ; SUB
43    (GETVALUE&PUSH 2)                   ; N
45    (CALL2&PUSH 9)                      ; ADD
47    (GETVALUE&PUSH 1)                   ; M
49    (CALL2&PUSH 7)                      ; FACTF
51    (CONST&PUSH 5)                      ; -1
52    (CALL2&PUSH 6)                      ; POWER
54    (CONST&PUSH 4)                      ; 2
55    (CONST&PUSH 5)                      ; -1
56    (CALL2&PUSH 6)                      ; POWER
58    (GETVALUE&PUSH 3)                   ; A
60    (CALL2&PUSH 9)                      ; ADD
62    (GETVALUE&PUSH 2)                   ; N
64    (CALL2&PUSH 7)                      ; FACTF
66    (CONST&PUSH 5)                      ; -1
67    (CALL2&PUSH 6)                      ; POWER
69    (CONST&PUSH 10)                     ; 1
70    (CONST&PUSH 11)                     ; ELL
71    (CALL2&PUSH 8)                      ; SUB
73    (GETVALUE&PUSH 1)                   ; M
75    (GETVALUE&PUSH 2)                   ; N
77    (CONST&PUSH 4)                      ; 2
78    (CONST&PUSH 5)                      ; -1
79    (CALL2&PUSH 6)                      ; POWER
81    (CALL&PUSH 3 9)                     ; ADD
84    (CALL2&PUSH 6)                      ; POWER
86    (CONST&PUSH 11)                     ; ELL
87    (CONST&PUSH 4)                      ; 2
88    (CONST&PUSH 5)                      ; -1
89    (CALL2&PUSH 6)                      ; POWER
91    (GETVALUE&PUSH 3)                   ; A
93    (CALL2&PUSH 9)                      ; ADD
95    (GETVALUE&PUSH 2)                   ; N
97    (CALL2&PUSH 8)                      ; SUB
99    (CALL2&PUSH 6)                      ; POWER
101   (CONST&PUSH 11)                     ; ELL
102   (GETVALUE&PUSH 1)                   ; M
104   (GETVALUE&PUSH 2)                   ; N
106   (CALLSR&PUSH 2 53)                  ; +
109   (GETVALUE&PUSH 3)                   ; A
111   (CALL2&PUSH 8)                      ; SUB
113   (CONST&PUSH 4)                      ; 2
114   (CONST&PUSH 5)                      ; -1
115   (CALL2&PUSH 6)                      ; POWER
117   (CALL2&PUSH 8)                      ; SUB
119   (CALL2&PUSH 6)                      ; POWER
121   (CONST&PUSH 10)                     ; 1
122   (CONST&PUSH 11)                     ; ELL
123   (CALL2&PUSH 8)                      ; SUB
125   (CONST&PUSH 12)                     ; -2
126   (CONST&PUSH 5)                      ; -1
127   (CALL2&PUSH 6)                      ; POWER
129   (CALL2&PUSH 6)                      ; POWER
131   (GETVALUE&PUSH 0)                   ; FUN
133   (CALL2&PUSH 13)                     ; MUL
135   (CONST&PUSH 11)                     ; ELL
136   (GETVALUE&PUSH 2)                   ; N
138   (CALL&PUSH 3 14)                    ; $DIFF
141   (CALL2&PUSH 13)                     ; MUL
143   (CONST&PUSH 11)                     ; ELL
144   (GETVALUE&PUSH 1)                   ; M
146   (CALL&PUSH 3 14)                    ; $DIFF
149   (CALL 7 13)                         ; MUL
152   (UNBIND 4)
154   (SKIP&RET 5)


Disassembly of function #:|(DEFUN F84 (FUN M N ...) ...)-157|
(CONST 0) = F84
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F84>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F84
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F84
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F84>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F84
8     (SKIP&RET 1)


Disassembly of function F84
(CONST 0) = FUN
(CONST 1) = M
(CONST 2) = N
(CONST 3) = A
(CONST 4) = FACTF
(CONST 5) = 2
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = SUB
(CONST 9) = MUL
(CONST 10) = ELL
(CONST 11) = 1
(CONST 12) = ADD
(CONST 13) = -2
(CONST 14) = $DIFF
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN N M A)
53 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FUN
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; A
12    (GETVALUE&PUSH 3)                   ; A
14    (GETVALUE&PUSH 1)                   ; M
16    (CALL2&PUSH 4)                      ; FACTF
18    (CONST&PUSH 5)                      ; 2
19    (CONST&PUSH 6)                      ; -1
20    (CALL2&PUSH 7)                      ; POWER
22    (GETVALUE&PUSH 2)                   ; N
24    (CALL2&PUSH 8)                      ; SUB
26    (GETVALUE&PUSH 2)                   ; N
28    (CALL2&PUSH 4)                      ; FACTF
30    (CALL2&PUSH 9)                      ; MUL
32    (CONST&PUSH 6)                      ; -1
33    (CALL2&PUSH 7)                      ; POWER
35    (CONST&PUSH 10)                     ; ELL
36    (CONST&PUSH 11)                     ; 1
37    (GETVALUE&PUSH 3)                   ; A
39    (CALL2&PUSH 8)                      ; SUB
41    (CALL2&PUSH 7)                      ; POWER
43    (CONST&PUSH 10)                     ; ELL
44    (GETVALUE&PUSH 3)                   ; A
46    (GETVALUE&PUSH 1)                   ; M
48    (GETVALUE&PUSH 2)                   ; N
50    (CALL&PUSH 3 12)                    ; ADD
53    (CONST&PUSH 5)                      ; 2
54    (CONST&PUSH 6)                      ; -1
55    (CALL2&PUSH 7)                      ; POWER
57    (CALL2&PUSH 8)                      ; SUB
59    (CALL2&PUSH 7)                      ; POWER
61    (CONST&PUSH 10)                     ; ELL
62    (CONST&PUSH 13)                     ; -2
63    (CONST&PUSH 6)                      ; -1
64    (CALL2&PUSH 7)                      ; POWER
66    (CALL2&PUSH 7)                      ; POWER
68    (GETVALUE&PUSH 0)                   ; FUN
70    (CALL2&PUSH 9)                      ; MUL
72    (CONST&PUSH 10)                     ; ELL
73    (GETVALUE&PUSH 2)                   ; N
75    (CALL&PUSH 3 14)                    ; $DIFF
78    (CALL2&PUSH 9)                      ; MUL
80    (CONST&PUSH 10)                     ; ELL
81    (GETVALUE&PUSH 1)                   ; M
83    (CALL&PUSH 3 14)                    ; $DIFF
86    (CALL 3 9)                          ; MUL
89    (UNBIND 4)
91    (SKIP&RET 5)


Disassembly of function #:|(DEFUN F86 (FUN M N ...) ...)-158|
(CONST 0) = F86
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F86>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F86
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F86
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F86>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F86
8     (SKIP&RET 1)


Disassembly of function F86
(CONST 0) = FUN
(CONST 1) = M
(CONST 2) = N
(CONST 3) = A
(CONST 4) = 2
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = SUB
(CONST 8) = FACTF
(CONST 9) = MUL
(CONST 10) = ELL
(CONST 11) = ADD
(CONST 12) = 1
(CONST 13) = -2
(CONST 14) = $DIFF
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FUN M A N)
85 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FUN
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; A
12    (CONST&PUSH 4)                      ; 2
13    (CONST&PUSH 5)                      ; -1
14    (CALL2&PUSH 6)                      ; POWER
16    (GETVALUE&PUSH 2)                   ; N
18    (CALL2&PUSH 7)                      ; SUB
20    (GETVALUE&PUSH 2)                   ; N
22    (CALL2&PUSH 8)                      ; FACTF
24    (CONST&PUSH 4)                      ; 2
25    (CONST&PUSH 5)                      ; -1
26    (CALL2&PUSH 6)                      ; POWER
28    (GETVALUE&PUSH 3)                   ; A
30    (CALL2&PUSH 7)                      ; SUB
32    (GETVALUE&PUSH 1)                   ; M
34    (GETVALUE&PUSH 2)                   ; N
36    (CALLSR&PUSH 1 54)                  ; -
39    (CALL2&PUSH 8)                      ; FACTF
41    (CALL2&PUSH 9)                      ; MUL
43    (CONST&PUSH 5)                      ; -1
44    (CALL2&PUSH 6)                      ; POWER
46    (CONST&PUSH 10)                     ; ELL
47    (GETVALUE&PUSH 2)                   ; N
49    (CONST&PUSH 4)                      ; 2
50    (CONST&PUSH 5)                      ; -1
51    (CALL2&PUSH 6)                      ; POWER
53    (CALL2&PUSH 11)                     ; ADD
55    (CALL2&PUSH 6)                      ; POWER
57    (CONST&PUSH 12)                     ; 1
58    (CONST&PUSH 10)                     ; ELL
59    (CALL2&PUSH 7)                      ; SUB
61    (CONST&PUSH 4)                      ; 2
62    (CONST&PUSH 5)                      ; -1
63    (CALL2&PUSH 6)                      ; POWER
65    (GETVALUE&PUSH 3)                   ; A
67    (CALL2&PUSH 11)                     ; ADD
69    (CALL2&PUSH 6)                      ; POWER
71    (CONST&PUSH 10)                     ; ELL
72    (GETVALUE&PUSH 3)                   ; A
74    (CALL2&PUSH 6)                      ; POWER
76    (CONST&PUSH 12)                     ; 1
77    (CONST&PUSH 10)                     ; ELL
78    (CALL2&PUSH 7)                      ; SUB
80    (GETVALUE&PUSH 1)                   ; M
82    (GETVALUE&PUSH 3)                   ; A
84    (CALL2&PUSH 7)                      ; SUB
86    (CALL2&PUSH 6)                      ; POWER
88    (CONST&PUSH 10)                     ; ELL
89    (GETVALUE&PUSH 1)                   ; M
91    (GETVALUE&PUSH 2)                   ; N
93    (CALL2&PUSH 7)                      ; SUB
95    (CONST&PUSH 4)                      ; 2
96    (CONST&PUSH 5)                      ; -1
97    (CALL2&PUSH 6)                      ; POWER
99    (CALL2&PUSH 7)                      ; SUB
101   (GETVALUE&PUSH 3)                   ; A
103   (CALL2&PUSH 7)                      ; SUB
105   (CALL2&PUSH 6)                      ; POWER
107   (CONST&PUSH 12)                     ; 1
108   (CONST&PUSH 10)                     ; ELL
109   (CALL2&PUSH 7)                      ; SUB
111   (CONST&PUSH 13)                     ; -2
112   (CONST&PUSH 5)                      ; -1
113   (CALL2&PUSH 6)                      ; POWER
115   (CALL2&PUSH 6)                      ; POWER
117   (GETVALUE&PUSH 0)                   ; FUN
119   (CALL&PUSH 3 9)                     ; MUL
122   (CONST&PUSH 10)                     ; ELL
123   (GETVALUE&PUSH 1)                   ; M
125   (GETVALUE&PUSH 2)                   ; N
127   (CALLSR&PUSH 1 54)                  ; -
130   (CALL&PUSH 3 14)                    ; $DIFF
133   (CALL&PUSH 3 9)                     ; MUL
136   (CONST&PUSH 10)                     ; ELL
137   (GETVALUE&PUSH 2)                   ; N
139   (CALL&PUSH 3 14)                    ; $DIFF
142   (CALL 4 9)                          ; MUL
145   (UNBIND 4)
147   (SKIP&RET 5)


Disassembly of function #:|(EVAL-WHEN (COMPILE) (DECLARE-TOP #) ...)-159|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/hyp.fas
Wrote file /cygdrive/e/temp/maxima/src/hyp.lis