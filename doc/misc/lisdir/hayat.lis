Listing of compilation of file /cygdrive/e/temp/maxima/src/hayat.lisp
on 2002-12-17 13:34:46 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/hayat.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE HAYAT)-2|
(CONST 0) = HAYAT
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; HAYAT
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TLIST NIL)-3-1|
(CONST 0) = TLIST
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; TLIST
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; TLIST
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TLIST NIL)-3-2|
(CONST 0) = (SPECIAL TLIST)
(CONST 1) = TLIST
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TLIST)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TLIST
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TLIST
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; TLIST
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *WITHIN-SRF?* NIL)-4|
(CONST 0) = (SPECIAL *WITHIN-SRF?*)
(CONST 1) = *WITHIN-SRF?*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *WITHIN-SRF?*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *WITHIN-SRF?*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *WITHIN-SRF?*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *WITHIN-SRF?*
12    (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS MHAYAT RZMAC ...)-5|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VLIST VARLIST ...) (*EXPR LCM) ...)-6|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $PSEXPAND NIL ...)-7-1|
(CONST 0) = $PSEXPAND
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSEXPAND
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $PSEXPAND
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $PSEXPAND NIL ...)-7-2|
(CONST 0) = (SPECIAL $PSEXPAND)
(CONST 1) = $PSEXPAND
(CONST 2) = VARIABLE
(CONST 3) = 
"When TRUE extended rational function expressions will be displayed fully
  expanded. (RATEXPAND will also cause this.) If FALSE, multivariate
  expressions will be displayed just as in the rational function package.
  If PSEXPAND:MULTI, then terms with the same total degree in the variables
  are grouped together."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PSEXPAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PSEXPAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PSEXPAND
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $PSEXPAND
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "When TRUE extended rational function expressions will be displayed fully
  expanded. (RATEXPAND will also cause this.) If FALSE, multivariate
  expressions will be displayed just as in the rational function package.
  If PSEXPAND:MULTI, then terms with the same total degree in the variables
  are grouped together."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $PSEXPAND
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MAXTAYORDER T ...)-8-1|
(CONST 0) = $MAXTAYORDER
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAXTAYORDER
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $MAXTAYORDER
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MAXTAYORDER T ...)-8-2|
(CONST 0) = (SPECIAL $MAXTAYORDER)
(CONST 1) = $MAXTAYORDER
(CONST 2) = VARIABLE
(CONST 3) = 
"When true TAYLOR retains as many terms as are certain to be correct
  during power series arithmetic. Otherwise, truncation is controlled
  by the arguments specified to TAYLOR."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $MAXTAYORDER)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $MAXTAYORDER
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $MAXTAYORDER
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $MAXTAYORDER
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "When true TAYLOR retains as many terms as are certain to be correct
  during power series arithmetic. Otherwise, truncation is controlled
  by the arguments specified to TAYLOR."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $MAXTAYORDER
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TAYLOR_TRUNCATE_POLYNOMIALS T ...)-9-1|
(CONST 0) = $TAYLOR_TRUNCATE_POLYNOMIALS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAYLOR_TRUNCATE_POLYNOMIALS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TAYLOR_TRUNCATE_POLYNOMIALS
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TAYLOR_TRUNCATE_POLYNOMIALS T ...)-9-2|
(CONST 0) = (SPECIAL $TAYLOR_TRUNCATE_POLYNOMIALS)
(CONST 1) = $TAYLOR_TRUNCATE_POLYNOMIALS
(CONST 2) = VARIABLE
(CONST 3) = 
"When FALSE polynomials input to TAYLOR are considered to have infinite
  precison; otherwise (the default) they are truncated based upon the input
  truncation levels."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TAYLOR_TRUNCATE_POLYNOMIALS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TAYLOR_TRUNCATE_POLYNOMIALS
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TAYLOR_TRUNCATE_POLYNOMIALS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "When FALSE polynomials input to TAYLOR are considered to have infinite
  precison; otherwise (the default) they are truncated based upon the input
  truncation levels."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TAYLOR_TRUNCATE_POLYNOMIALS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TAYLOR_LOGEXPAND NIL ...)-10-1|
(CONST 0) = $TAYLOR_LOGEXPAND
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAYLOR_LOGEXPAND
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TAYLOR_LOGEXPAND
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TAYLOR_LOGEXPAND NIL ...)-10-2|
(CONST 0) = (SPECIAL $TAYLOR_LOGEXPAND)
(CONST 1) = $TAYLOR_LOGEXPAND
(CONST 2) = VARIABLE
(CONST 3) = 
"Unless FALSE log's of products will be expanded fully in TAYLOR (the default)
  to avoid identically-zero constant terms which involve log's. When FALSE,
  only expansions necessary to produce a formal series will be executed."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TAYLOR_LOGEXPAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TAYLOR_LOGEXPAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TAYLOR_LOGEXPAND
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TAYLOR_LOGEXPAND
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Unless FALSE log's of products will be expanded fully in TAYLOR (the default)
  to avoid identically-zero constant terms which involve log's. When FALSE,
  only expansions necessary to produce a formal series will be executed."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TAYLOR_LOGEXPAND
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TAYLOR_SIMPLIFIER 'SIMPLIFY ...)-11-1|
(CONST 0) = $TAYLOR_SIMPLIFIER
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = SIMPLIFY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAYLOR_SIMPLIFIER
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TAYLOR_SIMPLIFIER
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; SIMPLIFY
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TAYLOR_SIMPLIFIER 'SIMPLIFY ...)-11-2|
(CONST 0) = (SPECIAL $TAYLOR_SIMPLIFIER)
(CONST 1) = $TAYLOR_SIMPLIFIER
(CONST 2) = SIMPLIFY
(CONST 3) = VARIABLE
(CONST 4) = 
"A function of one argument which TAYLOR uses to simplify coefficients
  of power series."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TAYLOR_SIMPLIFIER)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TAYLOR_SIMPLIFIER
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TAYLOR_SIMPLIFIER
8     (CONST&PUSH 2)                      ; SIMPLIFY
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TAYLOR_SIMPLIFIER
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "A function of one argument which TAYLOR uses to simplify coefficients
  of power series."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TAYLOR_SIMPLIFIER
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN ZFREE (E X) ...)-12|
(CONST 0) = ZFREE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZFREE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZFREE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZFREE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZFREE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZFREE
8     (SKIP&RET 1)


Disassembly of function ZFREE
(CONST 0) = E
(CONST 1) = X
(CONST 2) = MRAT
(CONST 3) = $LISTOFVARS
(CONST 4) = ZL-MEMBER
(CONST 5) = L
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L X E)
writes special variable : (L)
54 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (GETVALUE&PUSH 0)                   ; E
8     (GETVALUE&PUSH 1)                   ; X
10    (CALLS2&JMPIF 2 L57)                ; EQUAL
13    (GETVALUE 0)                        ; E
15    (JMPIFATOM L60)
17    (GETVALUE 0)                        ; E
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFEQTO 2 L63)                   ; MRAT
24    (GETVALUE 0)                        ; E
26    (CDR)
27    (BIND 5)                            ; L
29    (GETVALUE 5)                        ; L
31    (JMPIFNOT L51)
33    L33
33    (GETVALUE 5)                        ; L
35    (CAR&PUSH)
36    (GETVALUE&PUSH 1)                   ; X
38    (JSR L0)
40    (JMPIFNOT L75)
42    (GETVALUE 5)                        ; L
44    (CDR)
45    (SETVALUE 5)                        ; L
47    (GETVALUE 5)                        ; L
49    (JMPIF L33)
51    L51
51    (T)
52    (UNBIND1)
53    L53
53    (UNBIND 2)
55    (SKIP&RET 3)
57    L57
57    (NIL)
58    (JMP L53)
60    L60
60    (T)
61    (JMP L53)
63    L63
63    (GETVALUE&PUSH 1)                   ; X
65    (GETVALUE&PUSH 0)                   ; E
67    (CALL1 3)                           ; $LISTOFVARS
69    (CDR&PUSH)
70    (CALL2 4)                           ; ZL-MEMBER
72    (NOT)
73    (JMP L53)
75    L75
75    (NIL)
76    (UNBIND1)
77    (JMP L53)


Disassembly of function #:|(DEFUN MFREE (EXP VARL) ...)-13|
(CONST 0) = MFREE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFREE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFREE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFREE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFREE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFREE
8     (SKIP&RET 1)


Disassembly of function MFREE
(CONST 0) = EXP
(CONST 1) = MEMQ
(CONST 2) = MRAT
(CONST 3) = L
(CONST 4) = DUMMY-VARIABLE-OPERATORS
(CONST 5) = ARRAY
(CONST 6) = FREEOF
(CONST 7) = MFREEL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L DUMMY-VARIABLE-OPERATORS EXP)
writes special variable : (L)
83 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (JMPIFATOM L51)
7     (GETVALUE 0)                        ; EXP
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 2 L63)                   ; MRAT
14    (GETVALUE 0)                        ; EXP
16    (CAR)
17    (CAR&PUSH)
18    (GETVALUE&PUSH 4)                   ; DUMMY-VARIABLE-OPERATORS
20    (CALL2&JMPIF 1 L102)                ; MEMQ
24    (CONST&PUSH 5)                      ; ARRAY
25    (GETVALUE 0)                        ; EXP
27    (CAR)
28    (CDR&PUSH)
29    (CALL2&JMPIF 1 L102)                ; MEMQ
33    (GETVALUE 0)                        ; EXP
35    (CAR)
36    (CAR&PUSH)
37    (LOAD&PUSH 5)
38    (JSR L0)
40    (JMPIFNOT1 L48)
42    (GETVALUE 0)                        ; EXP
44    (CDR&PUSH)
45    (LOAD&PUSH 5)
46    (CALL2 7)                           ; MFREEL
48    L48
48    (UNBIND1)
49    (SKIP&RET 3)
51    L51
51    (GETVALUE&PUSH 0)                   ; EXP
53    (LOAD&PUSH 5)
54    (CALL2 1)                           ; MEMQ
56    (NOT)
57    (JMP L48)
59    L59
59    (NIL)
60    (UNBIND1)
61    (JMP L48)
63    L63
63    (GETVALUE 0)                        ; EXP
65    (CAR)
66    (CDR)
67    (CDR)
68    (CAR)
69    (BIND 3)                            ; L
71    (GETVALUE 3)                        ; L
73    (JMPIFNOT L93)
75    L75
75    (GETVALUE 3)                        ; L
77    (CAR&PUSH)
78    (LOAD&PUSH 8)
79    (JSR L0)
82    (JMPIFNOT L59)
84    (GETVALUE 3)                        ; L
86    (CDR)
87    (SETVALUE 3)                        ; L
89    (GETVALUE 3)                        ; L
91    (JMPIF L75)
93    L93
93    (T)
94    (UNBIND1)
95    (JMP L48)
97    L97
97    (NIL)
98    (SKIP 1)
100   (JMP L48)
102   L102
102   (LOAD&PUSH 4)
103   (LOAD&JMPIFNOT 0 L118)
106   L106
106   (LOAD&CAR&PUSH 0)
108   (GETVALUE&PUSH 0)                   ; EXP
110   (CALL2&JMPIFNOT 6 L97)              ; FREEOF
113   (LOAD&CDR&STORE 0)
115   (LOAD&JMPIF 0 L106)
118   L118
118   (T)
119   (SKIP 1)
121   (JMP L48)


Disassembly of function #:|(DEFUN MFREEL (L VARL) ...)-14|
(CONST 0) = MFREEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFREEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFREEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFREEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFREEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFREEL
8     (SKIP&RET 1)


Disassembly of function MFREEL
(CONST 0) = L
(CONST 1) = MFREE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
18 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (NOT)
6     (JMPIF1 L22)
8     (GETVALUE 0)                        ; L
10    (CAR&PUSH)
11    (LOAD&PUSH 5)
12    (CALL2 1)                           ; MFREE
14    (JMPIFNOT1 L22)
16    (GETVALUE 0)                        ; L
18    (CDR&PUSH)
19    (LOAD&PUSH 5)
20    (JSR L0)
22    L22
22    (UNBIND1)
23    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RCEXPT (X Y) ...)-15|
(CONST 0) = RCEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RCEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RCEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RCEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RCEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RCEXPT
8     (SKIP&RET 1)


Disassembly of function RCEXPT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = (1 . 1)
(CONST 3) = 1
(CONST 4) = FIXNUMP
(CONST 5) = RATEXPT
(CONST 6) = $RADEXPAND
(CONST 7) = MAXIMA-RATIONALIZE
(CONST 8) = RCEXPT1
(CONST 9) = RATQUOTIENT
(CONST 10) = $KEEPFLOAT
(CONST 11) = CDISREP
(CONST 12) = POWER*
(CONST 13) = PREP1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($RADEXPAND Y X)
writes special variable : (Y)
102 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; (1 . 1)
9     (CALLS2&JMPIF 2 L125)               ; EQUAL
13    (GETVALUE 1)                        ; Y
15    (CAR&PUSH)
16    (LOAD&PUSH 0)
17    (CALLS2&JMPIF 8 L128)               ; NUMBERP
21    (SKIP 1)
23    (JMPIF L136)
26    L26
26    (GETVALUE 1)                        ; Y
28    (CDR&PUSH)
29    (JMPIFNOTEQTO 3 L39)                ; 1
32    (GETVALUE 1)                        ; Y
34    (CAR&PUSH)
35    (CALL1&JMPIF 4 L139)                ; FIXNUMP
39    L39
39    (GETVALUE 6)                        ; $RADEXPAND
41    (JMPIFNOT L151)
44    (GETVALUE 1)                        ; Y
46    (CAR&PUSH)
47    (CALLS2&JMPIFNOT 8 L151)            ; NUMBERP
51    (GETVALUE 1)                        ; Y
53    (CDR&PUSH)
54    (CALLS2&JMPIFNOT 8 L151)            ; NUMBERP
58    (GETVALUE 1)                        ; Y
60    (CAR&PUSH)
61    (CALLS2&JMPIFNOT 15 L99)            ; FLOATP
64    (GETVALUE 1)                        ; Y
66    (CAR&PUSH)
67    (GETVALUE 1)                        ; Y
69    (CDR)
70    (BIND 1)                            ; Y
72    (LOAD 3)
73    (BIND 0)                            ; X
75    (GETVALUE&PUSH 0)                   ; X
77    (CALLS2&JMPIFNOT 12 L85)            ; INTEGERP
80    (GETVALUE&PUSH 1)                   ; Y
82    (CALLS2&JMPIF 12 L143)              ; INTEGERP
85    L85
85    (GETVALUE&PUSH 0)                   ; X
87    (GETVALUE&PUSH 1)                   ; Y
89    (CALLSR 1 56)                       ; /
92    L92
92    (UNBIND 2)
94    (STORE 0)
95    (CALL1 7)                           ; MAXIMA-RATIONALIZE
97    (SETVALUE 1)                        ; Y
99    L99
99    (GETVALUE 0)                        ; X
101   (CAR&PUSH)
102   (GETVALUE 1)                        ; Y
104   (CDR&PUSH)
105   (CALL2&PUSH 8)                      ; RCEXPT1
107   (GETVALUE 0)                        ; X
109   (CDR&PUSH)
110   (GETVALUE 1)                        ; Y
112   (CDR&PUSH)
113   (CALL2&PUSH 8)                      ; RCEXPT1
115   (CALL2 9)                           ; RATQUOTIENT
117   L117
117   (PUSH)
118   (GETVALUE 1)                        ; Y
120   (CAR&PUSH)
121   (CALL2 5)                           ; RATEXPT
123   (JMP L167)
125   L125
125   (CONST 2)                           ; (1 . 1)
126   (JMP L167)
128   L128
128   (LOAD&PUSH 0)
129   (CALLS2 145)                        ; ZEROP
131   (SKIP 1)
133   (JMPIFNOT L26)
136   L136
136   (CONST 2)                           ; (1 . 1)
137   (JMP L167)
139   L139
139   (GETVALUE 0)                        ; X
141   (JMP L117)
143   L143
143   (GETVALUE&PUSH 0)                   ; X
145   (GETVALUE&PUSH 1)                   ; Y
147   (CALLS2 181)                        ; TRUNCATE
149   (JMP L92)
151   L151
151   (NIL)
152   (BIND 10)                           ; $KEEPFLOAT
154   (GETVALUE&PUSH 0)                   ; X
156   (CALL1&PUSH 11)                     ; CDISREP
158   (GETVALUE&PUSH 1)                   ; Y
160   (CALL1&PUSH 11)                     ; CDISREP
162   (CALL2&PUSH 12)                     ; POWER*
164   (CALL1 13)                          ; PREP1
166   (UNBIND1)
167   L167
167   (UNBIND 2)
169   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RCEXPT1 (P N) ...)-16|
(CONST 0) = RCEXPT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RCEXPT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RCEXPT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RCEXPT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RCEXPT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RCEXPT1
8     (SKIP&RET 1)


Disassembly of function RCEXPT1
(CONST 0) = P
(CONST 1) = N
(CONST 2) = 1
(CONST 3) = (1 . 1)
(CONST 4) = PDIS
(CONST 5) = *RED
(CONST 6) = POWER*
(CONST 7) = PREP1
(CONST 8) = PSQFR
(CONST 9) = L
(CONST 10) = ANS
(CONST 11) = 0
(CONST 12) = RATTIMES
(CONST 13) = $SIGN
(CONST 14) = $NEG
(CONST 15) = PMINUS
(CONST 16) = QUOT
(CONST 17) = RATEXPT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS N L P)
writes special variables : (L ANS)
88 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 0)                   ; P
8     (JMPIFEQTO 2 L110)                  ; 1
12    (GETVALUE 0)                        ; P
14    (JMPIFATOM L113)
17    (GETVALUE&PUSH 0)                   ; P
19    (CALL1 8)                           ; PSQFR
21    (BIND 9)                            ; L
23    (CONST 3)                           ; (1 . 1)
24    (BIND 10)                           ; ANS
26    (GETVALUE 9)                        ; L
28    (JMPIFNOT L102)
31    L31
31    (GETVALUE 9)                        ; L
33    (CDR)
34    (CAR&PUSH)
35    (GETVALUE&PUSH 1)                   ; N
37    (CALLS2&PUSH 184)                   ; REM
39    (JMPIFNOTEQTO 11 L128)              ; 0
43    (GETVALUE&PUSH 1)                   ; N
45    (CALLS2&JMPIFNOT 149 L67)           ; EVENP
48    (GETVALUE 9)                        ; L
50    (CAR&PUSH)
51    (CALL1&PUSH 4)                      ; PDIS
53    (CALL1&PUSH 13)                     ; $SIGN
55    (JMPIFNOTEQTO 14 L67)               ; $NEG
58    (GETVALUE&PUSH 9)                   ; L
60    (GETVALUE 9)                        ; L
62    (CAR&PUSH)
63    (CALL1&PUSH 15)                     ; PMINUS
65    (CALLS1 168)                        ; RPLACA
67    L67
67    (GETVALUE&PUSH 10)                  ; ANS
69    (GETVALUE 9)                        ; L
71    (CAR&PUSH)
72    (CONST 2)                           ; 1
73    (CONS&PUSH)
74    (GETVALUE 9)                        ; L
76    (CDR)
77    (CAR&PUSH)
78    (GETVALUE&PUSH 1)                   ; N
80    (CALL2&PUSH 16)                     ; QUOT
82    (CALL2 17)                          ; RATEXPT
84    L84
84    (PUSH)
85    (T&PUSH)
86    (CALL 3 12)                         ; RATTIMES
89    (SETVALUE 10)                       ; ANS
91    (GETVALUE 9)                        ; L
93    (CDR)
94    (CDR)
95    (SETVALUE 9)                        ; L
97    (GETVALUE 9)                        ; L
99    (JMPIF L31)
102   L102
102   (GETVALUE 10)                       ; ANS
104   (UNBIND 2)
106   L106
106   (UNBIND 2)
108   (SKIP&RET 3)
110   L110
110   (CONST 3)                           ; (1 . 1)
111   (JMP L106)
113   L113
113   (GETVALUE&PUSH 0)                   ; P
115   (CALL1&PUSH 4)                      ; PDIS
117   (CONST&PUSH 2)                      ; 1
118   (GETVALUE&PUSH 1)                   ; N
120   (CALL2&PUSH 5)                      ; *RED
122   (CALL2&PUSH 6)                      ; POWER*
124   (CALL1 7)                           ; PREP1
126   (JMP L106)
128   L128
128   (GETVALUE&PUSH 10)                  ; ANS
130   (GETVALUE 9)                        ; L
132   (CAR&PUSH)
133   (CALL1&PUSH 4)                      ; PDIS
135   (GETVALUE 9)                        ; L
137   (CDR)
138   (CAR&PUSH)
139   (GETVALUE&PUSH 1)                   ; N
141   (CALL2&PUSH 5)                      ; *RED
143   (CALL2&PUSH 6)                      ; POWER*
145   (CALL1 7)                           ; PREP1
147   (JMP L84)


Disassembly of function #:|(DEFUN RCCOEFP (E) ...)-17|
(CONST 0) = RCCOEFP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RCCOEFP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RCCOEFP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RCCOEFP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RCCOEFP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RCCOEFP
8     (SKIP&RET 1)


Disassembly of function RCCOEFP
(CONST 0) = E
(CONST 1) = GENVAR
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR E)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L39)
9     (GETVALUE 0)                        ; E
11    (CAR)
12    (JMPIFATOM L24)
14    (GETVALUE 0)                        ; E
16    (CAR)
17    (CAR&PUSH)
18    (GETVALUE&PUSH 1)                   ; GENVAR
20    (CALL2 2)                           ; MEMQ
22    (JMPIFNOT1 L39)
24    L24
24    (GETVALUE 0)                        ; E
26    (CDR&PUSH)
27    (CALLS2 5)                          ; ATOM
29    (JMPIF1 L39)
31    (GETVALUE 0)                        ; E
33    (CDR)
34    (CAR&PUSH)
35    (GETVALUE&PUSH 1)                   ; GENVAR
37    (CALL2 2)                           ; MEMQ
39    L39
39    (UNBIND1)
40    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EZEROP (X) ...)-18|
(CONST 0) = EZEROP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EZEROP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EZEROP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EZEROP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EZEROP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EZEROP
8     (SKIP&RET 1)


Disassembly of function EZEROP
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (NOT)
6     (NOT)
7     (JMPIFNOT1 L26)
9     (GETVALUE 0)                        ; X
11    (CAR&PUSH)
12    (LOAD&PUSH 0)
13    (CALLS2 8)                          ; NUMBERP
15    (JMPIFNOT1 L24)
17    (LOAD&PUSH 0)
18    (CALLS2 145)                        ; ZEROP
20    (SKIP 1)
22    (JMP L26)
24    L24
24    (SKIP 1)
26    L26
26    (UNBIND1)
27    (SKIP&RET 2)


Disassembly of function #:|(DEFUN E+ (X Y) ...)-19|
(CONST 0) = E+
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE E+>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; E+
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; E+
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE E+>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; E+
8     (SKIP&RET 1)


Disassembly of function E+
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 1
(CONST 3) = EREDUCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
47 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFNOT L62)
10    (GETVALUE 1)                        ; Y
12    (JMPIFNOT L62)
14    (GETVALUE 0)                        ; X
16    (CDR&PUSH)
17    (JMPIFNOTEQTO 2 L26)                ; 1
20    (GETVALUE 1)                        ; Y
22    (CDR&PUSH)
23    (JMPIFEQTO 2 L65)                   ; 1
26    L26
26    (GETVALUE 0)                        ; X
28    (CAR&PUSH)
29    (GETVALUE 1)                        ; Y
31    (CDR&PUSH)
32    (CALLSR&PUSH 2 55)                  ; *
35    (GETVALUE 0)                        ; X
37    (CDR&PUSH)
38    (GETVALUE 1)                        ; Y
40    (CAR&PUSH)
41    (CALLSR&PUSH 2 55)                  ; *
44    (CALLSR&PUSH 2 53)                  ; +
47    (GETVALUE 0)                        ; X
49    (CDR&PUSH)
50    (GETVALUE 1)                        ; Y
52    (CDR&PUSH)
53    (CALLSR&PUSH 2 55)                  ; *
56    (CALL2 3)                           ; EREDUCE
58    L58
58    (UNBIND 2)
60    (SKIP&RET 3)
62    L62
62    (NIL)
63    (JMP L58)
65    L65
65    (GETVALUE 0)                        ; X
67    (CAR&PUSH)
68    (GETVALUE 1)                        ; Y
70    (CAR&PUSH)
71    (CALLSR&PUSH 2 53)                  ; +
74    (CONST 2)                           ; 1
75    (CONS)
76    (JMP L58)


Disassembly of function #:|(DEFUN EDIFF (X Y) ...)-20|
(CONST 0) = EDIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EDIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EDIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EDIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EDIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EDIFF
8     (SKIP&RET 1)


Disassembly of function EDIFF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 1
(CONST 3) = EREDUCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
59 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFNOT L70)
10    (GETVALUE 0)                        ; X
12    (CDR&PUSH)
13    (JMPIFNOTEQTO 2 L22)                ; 1
16    (GETVALUE 1)                        ; Y
18    (CDR&PUSH)
19    (JMPIFEQTO 2 L73)                   ; 1
22    L22
22    (GETVALUE 0)                        ; X
24    (CAR&PUSH)
25    (GETVALUE 1)                        ; Y
27    (CDR&PUSH)
28    (CALLSR&PUSH 2 55)                  ; *
31    (GETVALUE 0)                        ; X
33    (CDR&PUSH)
34    (GETVALUE 1)                        ; Y
36    (CAR&PUSH)
37    (CALLSR 2 55)                       ; *
40    (BIND 1)                            ; Y
42    (LOAD 3)
43    (BIND 0)                            ; X
45    (GETVALUE&PUSH 0)                   ; X
47    (GETVALUE&PUSH 1)                   ; Y
49    (CALLSR 1 54)                       ; -
52    (UNBIND 2)
54    (STORE 0)
55    (GETVALUE 0)                        ; X
57    (CDR&PUSH)
58    (GETVALUE 1)                        ; Y
60    (CDR&PUSH)
61    (CALLSR&PUSH 2 55)                  ; *
64    (CALL2 3)                           ; EREDUCE
66    L66
66    (UNBIND 2)
68    (SKIP&RET 3)
70    L70
70    (NIL)
71    (JMP L66)
73    L73
73    (GETVALUE 0)                        ; X
75    (CAR&PUSH)
76    (GETVALUE 1)                        ; Y
78    (CAR)
79    (BIND 1)                            ; Y
81    (LOAD 3)
82    (BIND 0)                            ; X
84    (GETVALUE&PUSH 0)                   ; X
86    (GETVALUE&PUSH 1)                   ; Y
88    (CALLSR 1 54)                       ; -
91    (UNBIND 2)
93    (STORE 0)
94    (CONST 2)                           ; 1
95    (CONS)
96    (JMP L66)


Disassembly of function #:|(DEFUN EMIN (X Y) ...)-21|
(CONST 0) = EMIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EMIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EMIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EMIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EMIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EMIN
8     (SKIP&RET 1)


Disassembly of function EMIN
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
47 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFNOT L51)
10    (GETVALUE 1)                        ; Y
12    (JMPIFNOT L55)
14    (GETVALUE 0)                        ; X
16    (CDR&PUSH)
17    (GETVALUE 1)                        ; Y
19    (CDR&PUSH)
20    (CALLS2&JMPIF 2 L59)                ; EQUAL
23    (GETVALUE 0)                        ; X
25    (CAR&PUSH)
26    (GETVALUE 1)                        ; Y
28    (CDR&PUSH)
29    (CALLSR&PUSH 2 55)                  ; *
32    (GETVALUE 0)                        ; X
34    (CDR&PUSH)
35    (GETVALUE 1)                        ; Y
37    (CAR&PUSH)
38    (CALLSR&PUSH 2 55)                  ; *
41    (CALLSR&JMPIF 1 47 L74)             ; <
45    (GETVALUE 1)                        ; Y
47    L47
47    (UNBIND 2)
49    (SKIP&RET 3)
51    L51
51    (GETVALUE 1)                        ; Y
53    (JMP L47)
55    L55
55    (GETVALUE 0)                        ; X
57    (JMP L47)
59    L59
59    (GETVALUE 0)                        ; X
61    (CAR&PUSH)
62    (GETVALUE 1)                        ; Y
64    (CAR&PUSH)
65    (CALLSR&PUSH 1 52)                  ; MIN
68    (GETVALUE 0)                        ; X
70    (CDR)
71    (CONS)
72    (JMP L47)
74    L74
74    (GETVALUE 0)                        ; X
76    (JMP L47)


Disassembly of function #:|(DEFUN EMAX (X Y) ...)-22|
(CONST 0) = EMAX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EMAX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EMAX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EMAX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EMAX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EMAX
8     (SKIP&RET 1)


Disassembly of function EMAX
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
44 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFNOT L51)
10    (GETVALUE 1)                        ; Y
12    (JMPIFNOT L51)
14    (GETVALUE 0)                        ; X
16    (CDR&PUSH)
17    (GETVALUE 1)                        ; Y
19    (CDR&PUSH)
20    (CALLS2&JMPIF 2 L54)                ; EQUAL
23    (GETVALUE 0)                        ; X
25    (CAR&PUSH)
26    (GETVALUE 1)                        ; Y
28    (CDR&PUSH)
29    (CALLSR&PUSH 2 55)                  ; *
32    (GETVALUE 0)                        ; X
34    (CDR&PUSH)
35    (GETVALUE 1)                        ; Y
37    (CAR&PUSH)
38    (CALLSR&PUSH 2 55)                  ; *
41    (CALLSR&JMPIF 1 48 L69)             ; >
45    (GETVALUE 1)                        ; Y
47    L47
47    (UNBIND 2)
49    (SKIP&RET 3)
51    L51
51    (NIL)
52    (JMP L47)
54    L54
54    (GETVALUE 0)                        ; X
56    (CAR&PUSH)
57    (GETVALUE 1)                        ; Y
59    (CAR&PUSH)
60    (CALLSR&PUSH 1 51)                  ; MAX
63    (GETVALUE 0)                        ; X
65    (CDR)
66    (CONS)
67    (JMP L47)
69    L69
69    (GETVALUE 0)                        ; X
71    (JMP L47)


Disassembly of function #:|(DEFUN E* (X Y) ...)-23|
(CONST 0) = E*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE E*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; E*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; E*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE E*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; E*
8     (SKIP&RET 1)


Disassembly of function E*
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 1
(CONST 3) = EREDUCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
41 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFNOT L50)
10    (GETVALUE 1)                        ; Y
12    (JMPIFNOT L50)
14    (GETVALUE 0)                        ; X
16    (CDR&PUSH)
17    (JMPIFNOTEQTO 2 L26)                ; 1
20    (GETVALUE 1)                        ; Y
22    (CDR&PUSH)
23    (JMPIFEQTO 2 L53)                   ; 1
26    L26
26    (GETVALUE 0)                        ; X
28    (CAR&PUSH)
29    (GETVALUE 1)                        ; Y
31    (CAR&PUSH)
32    (CALLSR&PUSH 2 55)                  ; *
35    (GETVALUE 0)                        ; X
37    (CDR&PUSH)
38    (GETVALUE 1)                        ; Y
40    (CDR&PUSH)
41    (CALLSR&PUSH 2 55)                  ; *
44    (CALL2 3)                           ; EREDUCE
46    L46
46    (UNBIND 2)
48    (SKIP&RET 3)
50    L50
50    (NIL)
51    (JMP L46)
53    L53
53    (GETVALUE 0)                        ; X
55    (CAR&PUSH)
56    (GETVALUE 1)                        ; Y
58    (CAR&PUSH)
59    (CALLSR&PUSH 2 55)                  ; *
62    (CONST 2)                           ; 1
63    (CONS)
64    (JMP L46)


Disassembly of function #:|(DEFUN ERECIP (E) ...)-24|
(CONST 0) = ERECIP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERECIP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERECIP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERECIP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERECIP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERECIP
8     (SKIP&RET 1)


Disassembly of function ERECIP
(CONST 0) = E
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (CAR&PUSH)
6     (CALLS2&JMPIF 147 L19)              ; MINUSP
9     (GETVALUE 0)                        ; E
11    (CDR&PUSH)
12    (GETVALUE 0)                        ; E
14    (CAR)
15    (CONS)
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)
19    L19
19    (GETVALUE 0)                        ; E
21    (CDR&PUSH)
22    (CALLSR&PUSH 0 54)                  ; -
25    (GETVALUE 0)                        ; E
27    (CAR&PUSH)
28    (CALLSR 0 54)                       ; -
31    (CONS)
32    (JMP L16)


Disassembly of function #:|(DEFUN EQUO (X Y) ...)-25|
(CONST 0) = EQUO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EQUO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EQUO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EQUO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EQUO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EQUO
8     (SKIP&RET 1)


Disassembly of function EQUO
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = (0 . 1)
(CONST 3) = EREDUCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
28 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFNOT L38)
10    (GETVALUE 1)                        ; Y
12    (JMPIFNOT L41)
14    (GETVALUE 0)                        ; X
16    (CAR&PUSH)
17    (GETVALUE 1)                        ; Y
19    (CDR&PUSH)
20    (CALLSR&PUSH 2 55)                  ; *
23    (GETVALUE 0)                        ; X
25    (CDR&PUSH)
26    (GETVALUE 1)                        ; Y
28    (CAR&PUSH)
29    (CALLSR&PUSH 2 55)                  ; *
32    (CALL2 3)                           ; EREDUCE
34    L34
34    (UNBIND 2)
36    (SKIP&RET 3)
38    L38
38    (NIL)
39    (JMP L34)
41    L41
41    (CONST 2)                           ; (0 . 1)
42    (JMP L34)


Disassembly of function #:|(DEFUN E1+ (X) ...)-26|
(CONST 0) = E1+
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE E1+>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; E1+
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; E1+
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE E1+>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; E1+
8     (SKIP&RET 1)


Disassembly of function E1+
(CONST 0) = X
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
29 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFNOT L31)
7     (GETVALUE 0)                        ; X
9     (CDR&PUSH)
10    (CONST&PUSH 1)                      ; 1
11    (CALLSR&JMPIF 1 45 L34)             ; =
15    (GETVALUE 0)                        ; X
17    (CDR&PUSH)
18    (GETVALUE 0)                        ; X
20    (CAR&PUSH)
21    (CALLSR&PUSH 2 53)                  ; +
24    (GETVALUE 0)                        ; X
26    (CDR)
27    (CONS)
28    L28
28    (UNBIND1)
29    (SKIP&RET 2)
31    L31
31    (NIL)
32    (JMP L28)
34    L34
34    (GETVALUE 0)                        ; X
36    (CAR&PUSH)
37    (CALLS2&PUSH 150)                   ; 1+
39    (CONST 1)                           ; 1
40    (CONS)
41    (JMP L28)


Disassembly of function #:|(DEFUN E1- (X) ...)-27|
(CONST 0) = E1-
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE E1->
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; E1-
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; E1-
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE E1->
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; E1-
8     (SKIP&RET 1)


Disassembly of function E1-
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = Y
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFNOT L41)
7     (GETVALUE 0)                        ; X
9     (CDR&PUSH)
10    (JMPIFEQTO 1 L44)                   ; 1
13    (GETVALUE 0)                        ; X
15    (CAR&PUSH)
16    (GETVALUE 0)                        ; X
18    (CDR)
19    (BIND 2)                            ; Y
21    (LOAD 3)
22    (BIND 0)                            ; X
24    (GETVALUE&PUSH 0)                   ; X
26    (GETVALUE&PUSH 2)                   ; Y
28    (CALLSR 1 54)                       ; -
31    (UNBIND 2)
33    (STORE 0)
34    (GETVALUE 0)                        ; X
36    (CDR)
37    (CONS)
38    L38
38    (UNBIND1)
39    (SKIP&RET 2)
41    L41
41    (NIL)
42    (JMP L38)
44    L44
44    (GETVALUE 0)                        ; X
46    (CAR&PUSH)
47    (CALLS2&PUSH 151)                   ; 1-
49    (CONST 1)                           ; 1
50    (CONS)
51    (JMP L38)


Disassembly of function #:|(DEFUN E> (X Y) ...)-28|
(CONST 0) = E>
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE E>>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; E>
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; E>
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE E>>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; E>
8     (SKIP&RET 1)


Disassembly of function E>
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
41 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFNOT L49)
10    (GETVALUE 1)                        ; Y
12    (JMPIFNOT L52)
14    (GETVALUE 0)                        ; X
16    (CDR&PUSH)
17    (GETVALUE 1)                        ; Y
19    (CDR&PUSH)
20    (CALLS2&JMPIF 2 L55)                ; EQUAL
23    (GETVALUE 0)                        ; X
25    (CAR&PUSH)
26    (GETVALUE 1)                        ; Y
28    (CDR&PUSH)
29    (CALLSR&PUSH 2 55)                  ; *
32    (GETVALUE 1)                        ; Y
34    (CAR&PUSH)
35    (GETVALUE 0)                        ; X
37    (CDR&PUSH)
38    (CALLSR 2 55)                       ; *
41    L41
41    (PUSH)
42    (CALLSR 1 48)                       ; >
45    L45
45    (UNBIND 2)
47    (SKIP&RET 3)
49    L49
49    (T)
50    (JMP L45)
52    L52
52    (NIL)
53    (JMP L45)
55    L55
55    (GETVALUE 0)                        ; X
57    (CAR&PUSH)
58    (GETVALUE 1)                        ; Y
60    (CAR)
61    (JMP L41)


Disassembly of function #:|(DEFUN E= (E1 E2) ...)-29|
(CONST 0) = E=
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE E=>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; E=
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; E=
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE E=>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; E=
8     (SKIP&RET 1)


Disassembly of function E=
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD 2)
2     (JMPIFEQ L26)
4     (LOAD&JMPIFNOT 2 L29)
7     (LOAD&JMPIFNOT 1 L29)
10    (LOAD&CAR&PUSH 2)
12    (LOAD&CAR&PUSH 2)
14    (CALLS2 2)                          ; EQUAL
16    (JMPIFNOT1 L32)
18    (LOAD&CDR&PUSH 2)
20    (LOAD&CDR&PUSH 2)
22    (CALLS2 2)                          ; EQUAL
24    (SKIP&RET 3)
26    L26
26    (T)
27    (SKIP&RET 3)
29    L29
29    (NIL)
30    (SKIP&RET 3)
32    L32
32    (SKIP&RET 3)


Disassembly of function #:|(DEFUN EREDUCE (N D) ...)-30|
(CONST 0) = EREDUCE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EREDUCE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EREDUCE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EREDUCE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EREDUCE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EREDUCE
8     (SKIP&RET 1)


Disassembly of function EREDUCE
(CONST 0) = N
(CONST 1) = D
(CONST 2) = 0
(CONST 3) = (0 . 1)
(CONST 4) = GCD
(CONST 5) = X
(CONST 6) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X GCD N D)
writes special variables : (N D)
69 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; D
6     (GETVALUE&PUSH 1)                   ; D
8     (CALLS2&JMPIFNOT 8 L32)             ; NUMBERP
11    (GETVALUE&PUSH 1)                   ; D
13    (CONST&PUSH 2)                      ; 0
14    (CALLSR&JMPIFNOT 1 47 L32)          ; <
18    (GETVALUE&PUSH 1)                   ; D
20    (CALLSR 0 54)                       ; -
23    (SETVALUE 1)                        ; D
25    (GETVALUE&PUSH 0)                   ; N
27    (CALLSR 0 54)                       ; -
30    (SETVALUE 0)                        ; N
32    L32
32    (GETVALUE&PUSH 0)                   ; N
34    (CALLS2&JMPIF 145 L108)             ; ZEROP
38    (GETVALUE&PUSH 0)                   ; N
40    (GETVALUE&PUSH 1)                   ; D
42    (CALLSR 2 57)                       ; GCD
45    (BIND 4)                            ; GCD
47    (GETVALUE 0)                        ; N
49    (BIND 5)                            ; X
51    (GETVALUE 4)                        ; GCD
53    (BIND 6)                            ; Y
55    (GETVALUE&PUSH 5)                   ; X
57    (CALLS2&JMPIFNOT 12 L65)            ; INTEGERP
60    (GETVALUE&PUSH 6)                   ; Y
62    (CALLS2&JMPIF 12 L111)              ; INTEGERP
65    L65
65    (GETVALUE&PUSH 5)                   ; X
67    (GETVALUE&PUSH 6)                   ; Y
69    (CALLSR 1 56)                       ; /
72    L72
72    (UNBIND 2)
74    (PUSH)
75    (GETVALUE 1)                        ; D
77    (BIND 5)                            ; X
79    (GETVALUE 4)                        ; GCD
81    (BIND 6)                            ; Y
83    (GETVALUE&PUSH 5)                   ; X
85    (CALLS2&JMPIFNOT 12 L93)            ; INTEGERP
88    (GETVALUE&PUSH 6)                   ; Y
90    (CALLS2&JMPIF 12 L119)              ; INTEGERP
93    L93
93    (GETVALUE&PUSH 5)                   ; X
95    (GETVALUE&PUSH 6)                   ; Y
97    (CALLSR 1 56)                       ; /
100   L100
100   (UNBIND 2)
102   (CONS)
103   (UNBIND1)
104   L104
104   (UNBIND 2)
106   (SKIP&RET 3)
108   L108
108   (CONST 3)                           ; (0 . 1)
109   (JMP L104)
111   L111
111   (GETVALUE&PUSH 5)                   ; X
113   (GETVALUE&PUSH 6)                   ; Y
115   (CALLS2 181)                        ; TRUNCATE
117   (JMP L72)
119   L119
119   (GETVALUE&PUSH 5)                   ; X
121   (GETVALUE&PUSH 6)                   ; Y
123   (CALLS2 181)                        ; TRUNCATE
125   (JMP L100)


Disassembly of function #:|(DEFUN EGCD (X Y) ...)-31|
(CONST 0) = EGCD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EGCD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EGCD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EGCD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EGCD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EGCD
8     (SKIP&RET 1)


Disassembly of function EGCD
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
45 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (CAR&PUSH)
9     (CALLS2&PUSH 158)                   ; ABS
11    (GETVALUE 0)                        ; X
13    (CDR&PUSH)
14    (GETVALUE 1)                        ; Y
16    (CAR&PUSH)
17    (CALLS2&PUSH 158)                   ; ABS
19    (GETVALUE 1)                        ; Y
21    (CDR&PUSH)
22    (LOAD&PUSH 3)
23    (LOAD&PUSH 2)
24    (CALLSR&PUSH 2 57)                  ; GCD
27    (LOAD&PUSH 3)
28    (LOAD 2)
29    (BIND 0)                            ; X
31    (LOAD&PUSH 7)
32    (LOAD&PUSH 6)
33    (CALLSR 2 57)                       ; GCD
36    (BIND 1)                            ; Y
38    (GETVALUE&PUSH 0)                   ; X
40    (CALLS2&JMPIFNOT 12 L48)            ; INTEGERP
43    (GETVALUE&PUSH 1)                   ; Y
45    (CALLS2&JMPIF 12 L68)               ; INTEGERP
48    L48
48    (GETVALUE&PUSH 0)                   ; X
50    (GETVALUE&PUSH 1)                   ; Y
52    (CALLSR 1 56)                       ; /
55    L55
55    (UNBIND 2)
57    (PUSH)
58    (CALLSR 2 55)                       ; *
61    (CONS)
62    (SKIP 4)
64    (UNBIND 2)
66    (SKIP&RET 3)
68    L68
68    (GETVALUE&PUSH 0)                   ; X
70    (GETVALUE&PUSH 1)                   ; Y
72    (CALLS2 181)                        ; TRUNCATE
74    (JMP L55)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VARS))-32|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN ORD-VECTOR (P) ...)-33|
(CONST 0) = ORD-VECTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORD-VECTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORD-VECTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORD-VECTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORD-VECTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORD-VECTOR
8     (SKIP&RET 1)


Disassembly of function ORD-VECTOR
(CONST 0) = P
(CONST 1) = TLIST
(CONST 2) = VARS
(CONST 3) = PS
(CONST 4) = (0 . 1)
(CONST 5) = ORD-VECT1
(CONST 6) = X
(CONST 7) = (0 . 1)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X VARS P TLIST)
77 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (GETVALUE&PUSH 1)                   ; TLIST
6     (JMP L47)
8     L8
8     (GETVALUE 0)                        ; P
10    (CDR)
11    (CDR)
12    (CDR)
13    (CAR)
14    (CAR)
15    (JMP L24)
17    L17
17    (GETVALUE 0)                        ; P
19    (CAR&PUSH)
20    (JMPIFEQTO 3 L8)                    ; PS
23    (CONST 4)                           ; (0 . 1)
24    L24
24    (PUSH)
25    (NIL)
26    (CONS)
27    (UNBIND1)
28    (JMP L105)
31    L31
31    (LOAD&CAR&PUSH 0)
33    (LOAD 0)
34    (CDR)
35    (CDR)
36    (CDR)
37    (CDR)
38    (CAR&PUSH)
39    (LIST&PUSH 1)
41    (LOAD&CONS&STORE 2)
43    (SKIP 1)
45    (LOAD&CDR&STORE 0)
47    L47
47    (LOAD&PUSH 0)
48    (CALLS1&JMPIFNOT 146 L31)           ; ENDP
51    (SKIP 1)
53    (LOAD&PUSH 0)
54    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
56    (SKIP 1)
58    (BIND 2)                            ; VARS
60    (GETVALUE 2)                        ; VARS
62    (CDR)
63    (JMPIFNOT L17)
65    (GETVALUE&PUSH 0)                   ; P
67    (CALL1 5)                           ; ORD-VECT1
69    (NIL&PUSH)
70    (GETVALUE&PUSH 2)                   ; VARS
72    (JMP L93)
74    L74
74    (LOAD&CAR&PUSH 0)
76    (LOAD 0)
77    (BIND 6)                            ; X
79    (GETVALUE 6)                        ; X
81    (CDR)
82    (JMPIF L85)
84    (CONST 7)                           ; (0 . 1)
85    L85
85    (UNBIND1)
86    (PUSH)
87    (LOAD&CONS&STORE 2)
89    (SKIP 1)
91    (LOAD&CDR&STORE 0)
93    L93
93    (LOAD&PUSH 0)
94    (CALLS1&JMPIFNOT 146 L74)           ; ENDP
97    (SKIP 1)
99    (LOAD&PUSH 0)
100   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
102   (SKIP 1)
104   (UNBIND1)
105   L105
105   (UNBIND1)
106   (SKIP&RET 2)


Disassembly of function #:|(DEFUN ORD-VECT1 (P) ...)-34|
(CONST 0) = ORD-VECT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORD-VECT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORD-VECT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORD-VECT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORD-VECT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORD-VECT1
8     (SKIP&RET 1)


Disassembly of function ORD-VECT1
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = VARS
(CONST 3) = ASSQ
(CONST 4) = EMIN
(CONST 5) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L VARS P)
58 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L46)                ; PS
9     (GETVALUE 0)                        ; P
11    (CDR)
12    (CAR)
13    (CAR&PUSH)
14    (GETVALUE&PUSH 2)                   ; VARS
16    (CALL2&PUSH 3)                      ; ASSQ
18    (GETVALUE 0)                        ; P
20    (CDR)
21    (CDR)
22    (CDR)
23    (CAR)
24    (CAR&PUSH)
25    (LOAD&PUSH 1)
26    (LOAD 2)
27    (CDR)
28    (JMPIFNOT L49)
30    (LOAD&CDR&PUSH 2)
32    (LOAD&PUSH 2)
33    (CALL2 4)                           ; EMIN
35    L35
35    (PUSH)
36    (CALLS1 170)                        ; RPLACD
38    (GETVALUE 0)                        ; P
40    (CDR)
41    (CDR)
42    (CDR&PUSH)
43    (LOAD&PUSH 0)
44    (JMP L64)
46    L46
46    (NIL)
47    (JMP L73)
49    L49
49    (LOAD 1)
50    (JMP L35)
52    L52
52    (LOAD 0)
53    (BIND 5)                            ; L
55    (GETVALUE 5)                        ; L
57    (CAR)
58    (CDR&PUSH)
59    (JSR L0)
61    (UNBIND1)
62    (LOAD&CDR&STORE 0)
64    L64
64    (LOAD&PUSH 0)
65    (CALLS1&JMPIFNOT 146 L52)           ; ENDP
68    (SKIP 1)
70    (POP)
71    (SKIP 2)
73    L73
73    (UNBIND1)
74    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TRUNC-VECTOR (P MIN?) ...)-35|
(CONST 0) = TRUNC-VECTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRUNC-VECTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRUNC-VECTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRUNC-VECTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRUNC-VECTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRUNC-VECTOR
8     (SKIP&RET 1)


Disassembly of function TRUNC-VECTOR
(CONST 0) = P
(CONST 1) = TLIST
(CONST 2) = VARS
(CONST 3) = PS
(CONST 4) = TRUNC-VECT1
(CONST 5) = CDR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARS P TLIST)
55 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (GETVALUE&PUSH 1)                   ; TLIST
6     (JMP L43)
8     L8
8     (GETVALUE 0)                        ; P
10    (CAR&PUSH)
11    (CONST 3)                           ; PS
12    (EQ)
13    (JMPIFNOT L21)
15    (GETVALUE 0)                        ; P
17    (CDR)
18    (CDR)
19    (CAR)
20    (CAR)
21    L21
21    (PUSH)
22    (NIL)
23    (CONS)
24    (UNBIND1)
25    (JMP L73)
27    L27
27    (LOAD&CAR&PUSH 0)
29    (LOAD 0)
30    (CDR)
31    (CDR)
32    (CDR)
33    (CDR)
34    (CAR&PUSH)
35    (LIST&PUSH 1)
37    (LOAD&CONS&STORE 2)
39    (SKIP 1)
41    (LOAD&CDR&STORE 0)
43    L43
43    (LOAD&PUSH 0)
44    (CALLS1&JMPIFNOT 146 L27)           ; ENDP
47    (SKIP 1)
49    (LOAD&PUSH 0)
50    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
52    (SKIP 1)
54    (BIND 2)                            ; VARS
56    (GETVALUE 2)                        ; VARS
58    (CDR)
59    (JMPIFNOT L8)
61    (GETVALUE&PUSH 0)                   ; P
63    (LOAD&PUSH 8)
64    (CALL2 4)                           ; TRUNC-VECT1
66    (CONST&PUSH 5)                      ; CDR
67    (GETVALUE&PUSH 2)                   ; VARS
69    (CALLSR 0 22)                       ; MAPCAR
72    (UNBIND1)
73    L73
73    (UNBIND1)
74    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TRUNC-VECT1 (P MIN?) ...)-36|
(CONST 0) = TRUNC-VECT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRUNC-VECT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRUNC-VECT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRUNC-VECT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRUNC-VECT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRUNC-VECT1
8     (SKIP&RET 1)


Disassembly of function TRUNC-VECT1
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = VARS
(CONST 3) = ASSQ
(CONST 4) = EMIN
(CONST 5) = EMAX
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARS P)
62 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L53)                ; PS
9     (GETVALUE 0)                        ; P
11    (CDR)
12    (CAR)
13    (CAR&PUSH)
14    (GETVALUE&PUSH 2)                   ; VARS
16    (CALL2&PUSH 3)                      ; ASSQ
18    (GETVALUE 0)                        ; P
20    (CDR)
21    (CDR)
22    (CAR)
23    (CAR&PUSH)
24    (LOAD&JMPIFNOT 0 L43)
27    (LOAD&PUSH 1)
28    (LOAD 2)
29    (CDR)
30    (JMPIFNOT L56)
32    (LOAD&JMPIF 7 L59)
35    (LOAD&CDR&PUSH 2)
37    (LOAD&PUSH 2)
38    (CALL2 5)                           ; EMAX
40    L40
40    (PUSH)
41    (CALLS1 170)                        ; RPLACD
43    L43
43    (SKIP 2)
45    (GETVALUE 0)                        ; P
47    (CDR)
48    (CDR)
49    (CDR&PUSH)
50    (NIL&PUSH)
51    (JMP L76)
53    L53
53    (NIL)
54    (JMP L83)
56    L56
56    (LOAD 1)
57    (JMP L40)
59    L59
59    (LOAD&CDR&PUSH 2)
61    (LOAD&PUSH 2)
62    (CALL2 4)                           ; EMIN
64    (JMP L40)
66    L66
66    (LOAD&CAR&STORE 1 0)
69    (CDR&PUSH)
70    (LOAD&PUSH 7)
71    (JSR L0)
74    (LOAD&CDR&STORE 1)
76    L76
76    (LOAD&PUSH 1)
77    (CALLS1&JMPIFNOT 146 L66)           ; ENDP
80    (NIL)
81    (SKIP 2)
83    L83
83    (UNBIND1)
84    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL VARS))-37|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PSPLUS (X Y) ...)-38|
(CONST 0) = PSPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSPLUS
8     (SKIP&RET 1)


Disassembly of function PSPLUS
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = PS
(CONST 3) = RATPLUS
(CONST 4) = PSCPLUS
(CONST 5) = PSPLUS1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
85 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 2 L75)                ; PS
12    (GETVALUE 1)                        ; Y
14    (CAR&PUSH)
15    (JMPIFNOTEQTO 2 L115)               ; PS
19    (GETVALUE 0)                        ; X
21    (CDR)
22    (CAR)
23    (CAR&PUSH)
24    (GETVALUE 1)                        ; Y
26    (CDR)
27    (CAR)
28    (CAR)
29    (JMPIFEQ L107)
32    (GETVALUE 0)                        ; X
34    (CDR)
35    (CAR)
36    (CDR&PUSH)
37    (GETVALUE 1)                        ; Y
39    (CDR)
40    (CAR)
41    (CDR&PUSH)
42    (CALLSR&JMPIF 1 48 L126)            ; >
47    L47
47    (GETVALUE&PUSH 0)                   ; X
49    (GETVALUE 1)                        ; Y
51    L51
51    (PUSH)
52    (CALL2 4)                           ; PSCPLUS
54    L54
54    (UNBIND 2)
56    (SKIP&RET 3)
58    L58
58    (GETVALUE&PUSH 0)                   ; X
60    (GETVALUE&PUSH 1)                   ; Y
62    (CALL2 3)                           ; RATPLUS
64    (JMP L54)
66    L66
66    (LOAD&PUSH 0)
67    (CALLS2 145)                        ; ZEROP
69    (SKIP 1)
71    (JMPIFNOT L47)
73    (JMP L92)
75    L75
75    (GETVALUE 1)                        ; Y
77    (CAR&PUSH)
78    (JMPIFNOTEQTO 2 L58)                ; PS
81    (GETVALUE 0)                        ; X
83    (CAR&PUSH)
84    (LOAD&PUSH 0)
85    (CALLS2&JMPIF 8 L66)                ; NUMBERP
88    (SKIP 1)
90    (JMPIFNOT L47)
92    L92
92    (GETVALUE 1)                        ; Y
94    (JMP L54)
96    L96
96    (LOAD&PUSH 0)
97    (CALLS2 145)                        ; ZEROP
99    (SKIP 1)
101   (JMPIFNOT L126)
103   L103
103   (GETVALUE 0)                        ; X
105   (JMP L54)
107   L107
107   (GETVALUE&PUSH 0)                   ; X
109   (GETVALUE&PUSH 1)                   ; Y
111   (CALL2 5)                           ; PSPLUS1
113   (JMP L54)
115   L115
115   (GETVALUE 1)                        ; Y
117   (CAR&PUSH)
118   (LOAD&PUSH 0)
119   (CALLS2&JMPIF 8 L96)                ; NUMBERP
122   (SKIP 1)
124   (JMPIF L103)
126   L126
126   (GETVALUE&PUSH 1)                   ; Y
128   (GETVALUE 0)                        ; X
130   (JMP L51)


Disassembly of function #:|(DEFUN RCPLUS! (X Y) ...)-39|
(CONST 0) = RCPLUS!
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RCPLUS!>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RCPLUS!
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RCPLUS!
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RCPLUS!>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RCPLUS!
8     (SKIP&RET 1)


Disassembly of function RCPLUS!
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = LEAST_TERM?
(CONST 3) = TAYLOR_SIMPLIFIER
(CONST 4) = RATPLUS
(CONST 5) = CDISREP
(CONST 6) = ADD*
(CONST 7) = PREP1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X TAYLOR_SIMPLIFIER LEAST_TERM?)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 2)                        ; LEAST_TERM?
8     (JMPIFNOT L34)
10    (GETVALUE 3)                        ; TAYLOR_SIMPLIFIER
12    (JMPIFNOT L34)
14    (GETVALUE&PUSH 3)                   ; TAYLOR_SIMPLIFIER
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1&PUSH 5)                      ; CDISREP
20    (GETVALUE&PUSH 1)                   ; Y
22    (CALL1&PUSH 5)                      ; CDISREP
24    (CALL2&PUSH 6)                      ; ADD*
26    (FUNCALL&PUSH 1)
28    (CALL1 7)                           ; PREP1
30    L30
30    (UNBIND 2)
32    (SKIP&RET 3)
34    L34
34    (GETVALUE&PUSH 0)                   ; X
36    (GETVALUE&PUSH 1)                   ; Y
38    (CALL2 4)                           ; RATPLUS
40    (JMP L30)


Disassembly of function #:|(DEFUN PSDIFF (X Y) ...)-40|
(CONST 0) = PSDIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDIFF
8     (SKIP&RET 1)


Disassembly of function PSDIFF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = PS
(CONST 3) = RATDIF
(CONST 4) = (-1 . 1)
(CONST 5) = PSTIMES
(CONST 6) = PSCDIFF
(CONST 7) = PSDIFF1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
89 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 2 L78)                ; PS
13    (GETVALUE 1)                        ; Y
15    (CAR&PUSH)
16    (JMPIFNOTEQTO 2 L121)               ; PS
20    (GETVALUE 0)                        ; X
22    (CDR)
23    (CAR)
24    (CAR&PUSH)
25    (GETVALUE 1)                        ; Y
27    (CDR)
28    (CAR)
29    (CAR)
30    (JMPIFEQ L113)
33    (GETVALUE 0)                        ; X
35    (CDR)
36    (CAR)
37    (CDR&PUSH)
38    (GETVALUE 1)                        ; Y
40    (CDR)
41    (CAR)
42    (CDR&PUSH)
43    (CALLSR&JMPIF 1 48 L132)            ; >
48    L48
48    (GETVALUE&PUSH 0)                   ; X
50    (GETVALUE&PUSH 1)                   ; Y
52    (NIL)
53    L53
53    (PUSH)
54    (CALL 3 6)                          ; PSCDIFF
57    L57
57    (UNBIND 2)
59    (SKIP&RET 3)
61    L61
61    (GETVALUE&PUSH 0)                   ; X
63    (GETVALUE&PUSH 1)                   ; Y
65    (CALL2 3)                           ; RATDIF
67    (JMP L57)
69    L69
69    (LOAD&PUSH 0)
70    (CALLS2 145)                        ; ZEROP
72    (SKIP 1)
74    (JMPIFNOT L48)
76    (JMP L95)
78    L78
78    (GETVALUE 1)                        ; Y
80    (CAR&PUSH)
81    (JMPIFNOTEQTO 2 L61)                ; PS
84    (GETVALUE 0)                        ; X
86    (CAR&PUSH)
87    (LOAD&PUSH 0)
88    (CALLS2&JMPIF 8 L69)                ; NUMBERP
91    (SKIP 1)
93    (JMPIFNOT L48)
95    L95
95    (CONST&PUSH 4)                      ; (-1 . 1)
96    (GETVALUE&PUSH 1)                   ; Y
98    (CALL2 5)                           ; PSTIMES
100   (JMP L57)
102   L102
102   (LOAD&PUSH 0)
103   (CALLS2 145)                        ; ZEROP
105   (SKIP 1)
107   (JMPIFNOT L132)
109   L109
109   (GETVALUE 0)                        ; X
111   (JMP L57)
113   L113
113   (GETVALUE&PUSH 0)                   ; X
115   (GETVALUE&PUSH 1)                   ; Y
117   (CALL2 7)                           ; PSDIFF1
119   (JMP L57)
121   L121
121   (GETVALUE 1)                        ; Y
123   (CAR&PUSH)
124   (LOAD&PUSH 0)
125   (CALLS2&JMPIF 8 L102)               ; NUMBERP
128   (SKIP 1)
130   (JMPIF L109)
132   L132
132   (GETVALUE&PUSH 1)                   ; Y
134   (GETVALUE&PUSH 0)                   ; X
136   (T)
137   (JMP L53)


Disassembly of function #:|(DEFUN RCDIFF! (X Y) ...)-41|
(CONST 0) = RCDIFF!
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RCDIFF!>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RCDIFF!
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RCDIFF!
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RCDIFF!>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RCDIFF!
8     (SKIP&RET 1)


Disassembly of function RCDIFF!
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = LEAST_TERM?
(CONST 3) = TAYLOR_SIMPLIFIER
(CONST 4) = RATDIF
(CONST 5) = CDISREP
(CONST 6) = SUB*
(CONST 7) = PREP1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X TAYLOR_SIMPLIFIER LEAST_TERM?)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 2)                        ; LEAST_TERM?
8     (JMPIFNOT L34)
10    (GETVALUE 3)                        ; TAYLOR_SIMPLIFIER
12    (JMPIFNOT L34)
14    (GETVALUE&PUSH 3)                   ; TAYLOR_SIMPLIFIER
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1&PUSH 5)                      ; CDISREP
20    (GETVALUE&PUSH 1)                   ; Y
22    (CALL1&PUSH 5)                      ; CDISREP
24    (CALL2&PUSH 6)                      ; SUB*
26    (FUNCALL&PUSH 1)
28    (CALL1 7)                           ; PREP1
30    L30
30    (UNBIND 2)
32    (SKIP&RET 3)
34    L34
34    (GETVALUE&PUSH 0)                   ; X
36    (GETVALUE&PUSH 1)                   ; Y
38    (CALL2 4)                           ; RATDIF
40    (JMP L30)


Disassembly of function #:|(DEFUN PSPLUS1 (X Y) ...)-42|
(CONST 0) = PSPLUS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSPLUS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSPLUS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSPLUS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSPLUS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSPLUS1
8     (SKIP&RET 1)


Disassembly of function PSPLUS1
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ANS
(CONST 3) = EMIN
(CONST 4) = 0
(CONST 5) = PSPLUS2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS Y X)
39 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL&PUSH)
7     (NIL)
8     (CONS)
9     (BIND 2)                            ; ANS
11    (GETVALUE 0)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CDR)
19    (CAR)
20    (CAR&PUSH)
21    (GETVALUE 1)                        ; Y
23    (CDR)
24    (CDR)
25    (CAR)
26    (CAR&PUSH)
27    (CALL2&PUSH 3)                      ; EMIN
29    (CONST&PUSH 4)                      ; 0
30    (GETVALUE 0)                        ; X
32    (CDR)
33    (CDR)
34    (CDR)
35    (CONS&PUSH)
36    (CONST&PUSH 4)                      ; 0
37    (GETVALUE 1)                        ; Y
39    (CDR)
40    (CDR)
41    (CDR)
42    (CONS&PUSH)
43    (GETVALUE&PUSH 2)                   ; ANS
45    (GETVALUE&PUSH 2)                   ; ANS
47    (CALL 6 5)                          ; PSPLUS2
50    (UNBIND 3)
52    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSCPLUS (C P) ...)-43|
(CONST 0) = PSCPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCPLUS
8     (SKIP&RET 1)


Disassembly of function PSCPLUS
(CONST 0) = C
(CONST 1) = P
(CONST 2) = (0 . 1)
(CONST 3) = E>
(CONST 4) = PSCPLUS1
(CONST 5) = PSCHECK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C P)
31 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; C
3     (LOAD 4)
4     (BIND 1)                            ; P
6     (CONST&PUSH 2)                      ; (0 . 1)
7     (GETVALUE 1)                        ; P
9     (CDR)
10    (CDR)
11    (CAR)
12    (CAR&PUSH)
13    (CALL2&JMPIF 3 L41)                 ; E>
16    (GETVALUE 1)                        ; P
18    (CDR)
19    (CAR&PUSH)
20    (GETVALUE 1)                        ; P
22    (CDR)
23    (CDR)
24    (CAR&PUSH)
25    (GETVALUE&PUSH 0)                   ; C
27    (GETVALUE 1)                        ; P
29    (CDR)
30    (CDR)
31    (CDR&PUSH)
32    (CALL2&PUSH 4)                      ; PSCPLUS1
34    (CALL 3 5)                          ; PSCHECK
37    L37
37    (UNBIND 2)
39    (SKIP&RET 3)
41    L41
41    (GETVALUE 1)                        ; P
43    (JMP L37)


Disassembly of function #:|(DEFUN PSCDIFF (C P FL) ...)-44|
(CONST 0) = PSCDIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCDIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCDIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCDIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCDIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCDIFF
8     (SKIP&RET 1)


Disassembly of function PSCDIFF
(CONST 0) = C
(CONST 1) = P
(CONST 2) = (0 . 1)
(CONST 3) = E>
(CONST 4) = PSMINUS
(CONST 5) = PSMINUS-TERMS
(CONST 6) = PSCPLUS1
(CONST 7) = PSCHECK
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C P)
48 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; P
6     (CONST&PUSH 2)                      ; (0 . 1)
7     (GETVALUE 1)                        ; P
9     (CDR)
10    (CDR)
11    (CAR)
12    (CAR&PUSH)
13    (CALL2&JMPIF 3 L51)                 ; E>
16    (GETVALUE 1)                        ; P
18    (CDR)
19    (CAR&PUSH)
20    (GETVALUE 1)                        ; P
22    (CDR)
23    (CDR)
24    (CAR&PUSH)
25    (LOAD&JMPIFNOT 9 L60)
28    (GETVALUE&PUSH 0)                   ; C
30    (CALL1&PUSH 4)                      ; PSMINUS
32    (GETVALUE 1)                        ; P
34    (CDR)
35    (CDR)
36    (CDR)
37    L37
37    (PUSH)
38    (CALL2&PUSH 6)                      ; PSCPLUS1
40    (CALL 3 7)                          ; PSCHECK
43    L43
43    (UNBIND 2)
45    (SKIP&RET 4)
47    L47
47    (GETVALUE 1)                        ; P
49    (JMP L43)
51    L51
51    (LOAD&JMPIF 7 L47)
54    (GETVALUE&PUSH 1)                   ; P
56    (CALL1 4)                           ; PSMINUS
58    (JMP L43)
60    L60
60    (GETVALUE&PUSH 0)                   ; C
62    (GETVALUE 1)                        ; P
64    (CDR)
65    (CDR)
66    (CDR&PUSH)
67    (CALL1 5)                           ; PSMINUS-TERMS
69    (JMP L37)


Disassembly of function #:|(DEFUN STRIP-ZEROES (TERMS PS?) ...)-45|
(CONST 0) = STRIP-ZEROES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRIP-ZEROES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRIP-ZEROES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRIP-ZEROES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRIP-ZEROES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRIP-ZEROES
8     (SKIP&RET 1)


Disassembly of function STRIP-ZEROES
(CONST 0) = TAYLOR_SIMPLIFIER
(CONST 1) = PS
(CONST 2) = CDISREP
(CONST 3) = EXP
(CONST 4) = TVARS
(CONST 5) = MFREE
(CONST 6) = PREP1
(CONST 7) = PSCHECK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TVARS EXP TAYLOR_SIMPLIFIER)
81 byte-code instructions:
0     (LOAD&JMPIFNOT 2 L69)
4     (JMP L53)
6     L6
6     (LOAD&PUSH 0)
7     (CALLS2 145)                        ; ZEROP
9     (SKIP 1)
11    (JMPIF L42)
13    L13
13    (POP)
14    (SKIP&RET 3)
16    L16
16    (LOAD&PUSH 2)
17    (LOAD&JMPIFNOT 0 L47)
20    L20
20    (LOAD&CAR&PUSH 0)
22    (LOAD 1)
23    (CAR)
24    (CDR&PUSH)
25    (T&PUSH)
26    (JSR&PUSH L50)
28    (CALLS1 170)                        ; RPLACD
30    (LOAD 0)
31    (CAR)
32    (CDR)
33    (CAR&PUSH)
34    (LOAD&PUSH 0)
35    (CALLS2&JMPIF 8 L6)                 ; NUMBERP
38    (SKIP 1)
40    (JMPIFNOT L13)
42    L42
42    (LOAD&CDR&STORE 0)
44    (LOAD&JMPIF 0 L20)
47    L47
47    (NIL)
48    (SKIP&RET 4)
50    L50
50    (LOAD&JMPIFNOT 2 L69)
53    L53
53    (GETVALUE 0)                        ; TAYLOR_SIMPLIFIER
55    (JMPIFNOT L69)
57    (LOAD&JMPIFNOT 1 L16)
60    (LOAD&CAR&PUSH 2)
62    (JMPIFEQTO 1 L98)                   ; PS
65    (GETVALUE 0)                        ; TAYLOR_SIMPLIFIER
67    (JMPIF L75)
69    L69
69    (LOAD 2)
70    (SKIP&RET 3)
72    L72
72    (LOAD 5)
73    (JMP L95)
75    L75
75    (LOAD&PUSH 2)
76    (CALL1 2)                           ; CDISREP
78    (BIND 3)                            ; EXP
80    (GETVALUE&PUSH 3)                   ; EXP
82    (GETVALUE&PUSH 4)                   ; TVARS
84    (CALL2&JMPIFNOT 5 L72)              ; MFREE
87    (GETVALUE&PUSH 0)                   ; TAYLOR_SIMPLIFIER
89    (GETVALUE&PUSH 3)                   ; EXP
91    (FUNCALL&PUSH 1)
93    (CALL1 6)                           ; PREP1
95    L95
95    (UNBIND1)
96    (SKIP&RET 3)
98    L98
98    (LOAD 2)
99    (CDR)
100   (CAR&PUSH)
101   (LOAD 3)
102   (CDR)
103   (CDR)
104   (CAR&PUSH)
105   (LOAD 4)
106   (CDR)
107   (CDR)
108   (CDR&PUSH)
109   (NIL&PUSH)
110   (JSR&PUSH L50)
112   (CALL 3 7)                          ; PSCHECK
115   (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSCPLUS1 (C L) ...)-46|
(CONST 0) = PSCPLUS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCPLUS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCPLUS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCPLUS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCPLUS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCPLUS1
8     (SKIP&RET 1)


Disassembly of function PSCPLUS1
(CONST 0) = C
(CONST 1) = L
(CONST 2) = (0 . 1)
(CONST 3) = PSPLUS
(CONST 4) = STRIP-ZEROES
(CONST 5) = E>
(CONST 6) = LEAST_TERM?
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C L)
writes special variable : (C)
83 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; C
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (GETVALUE 1)                        ; L
8     (JMPIFNOT L51)
10    (GETVALUE 1)                        ; L
12    (CAR)
13    (CAR)
14    (CAR&PUSH)
15    (LOAD&PUSH 0)
16    (CALLS2&JMPIF 8 L74)                ; NUMBERP
19    (SKIP 1)
21    (JMPIF L81)
23    L23
23    (GETVALUE 1)                        ; L
25    (CAR)
26    (CAR&PUSH)
27    (CONST&PUSH 2)                      ; (0 . 1)
28    (CALL2&JMPIF 5 L110)                ; E>
32    (GETVALUE 1)                        ; L
34    (CAR&PUSH)
35    (NIL)
36    (BIND 6)                            ; LEAST_TERM?
38    (GETVALUE&PUSH 0)                   ; C
40    (GETVALUE 1)                        ; L
42    (CDR&PUSH)
43    (JSR L0)
45    (UNBIND1)
46    (CONS)
47    L47
47    (UNBIND 2)
49    (SKIP&RET 3)
51    L51
51    (CONST&PUSH 2)                      ; (0 . 1)
52    (GETVALUE 0)                        ; C
54    (CONS&PUSH)
55    (LIST 1)
57    (JMP L47)
59    L59
59    (LOAD&PUSH 0)
60    (CALLS2 145)                        ; ZEROP
62    (SKIP 1)
64    (JMPIFNOT L100)
66    L66
66    (GETVALUE 1)                        ; L
68    (CDR&PUSH)
69    (NIL&PUSH)
70    (CALL2 4)                           ; STRIP-ZEROES
72    (JMP L47)
74    L74
74    (LOAD&PUSH 0)
75    (CALLS2 145)                        ; ZEROP
77    (SKIP 1)
79    (JMPIFNOT L23)
81    L81
81    (GETVALUE&PUSH 0)                   ; C
83    (GETVALUE 1)                        ; L
85    (CAR)
86    (CDR&PUSH)
87    (CALL2 3)                           ; PSPLUS
89    (SETVALUE 0)                        ; C
91    (CAR&PUSH)
92    (LOAD&PUSH 0)
93    (CALLS2&JMPIF 8 L59)                ; NUMBERP
96    (SKIP 1)
98    (JMPIF L66)
100   L100
100   (CONST&PUSH 2)                      ; (0 . 1)
101   (GETVALUE 0)                        ; C
103   (CONS&PUSH)
104   (GETVALUE 1)                        ; L
106   (CDR)
107   (CONS)
108   (JMP L47)
110   L110
110   (CONST&PUSH 2)                      ; (0 . 1)
111   (GETVALUE 0)                        ; C
113   (CONS&PUSH)
114   (GETVALUE 1)                        ; L
116   (CONS)
117   (JMP L47)


Disassembly of function #:|(DEFUN PSPLUS2 (VARH TRUNC XX ...) ...)-47|
(CONST 0) = PSPLUS2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSPLUS2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSPLUS2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSPLUS2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSPLUS2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSPLUS2
8     (SKIP&RET 1)


Disassembly of function PSPLUS2
(CONST 0) = YY
(CONST 1) = ANS
(CONST 2) = A
(CONST 3) = C
(CONST 4) = LEAST_TERM?
(CONST 5) = PSPLUS
(CONST 6) = E>
(CONST 7) = PSCHECK
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C ANS A YY)
writes special variables : (C YY A)
134 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; YY
3     (LOAD 5)
4     (BIND 1)                            ; ANS
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; C
12    L12
12    (LOAD 16)
14    (CDR)
15    (JMPIFNOT L70)
17    (GETVALUE 0)                        ; YY
19    (CDR)
20    (JMPIFNOT L79)
22    (LOAD 16)
24    (CDR)
25    (CAR)
26    (CAR&PUSH)
27    (GETVALUE 0)                        ; YY
29    (CDR)
30    (CAR)
31    (CAR&PUSH)
32    (CALLS2&JMPIF 2 L96)                ; EQUAL
35    (LOAD 16)
37    (CDR)
38    (CAR)
39    (CAR&PUSH)
40    (GETVALUE 0)                        ; YY
42    (CDR)
43    (CAR)
44    (CAR&PUSH)
45    (CALL2&JMPIF 6 L144)                ; E>
49    (LOAD&CDR&STORE 16)
51    (GETVALUE&PUSH 2)                   ; A
53    (LOAD 17)
55    (CAR)
56    L56
56    (PUSH)
57    (GETVALUE 2)                        ; A
59    (CDR)
60    (CONS&PUSH)
61    (CALLS1 170)                        ; RPLACD
63    (GETVALUE 2)                        ; A
65    (CDR)
66    (SETVALUE 2)                        ; A
68    (JMP L12)
70    L70
70    (GETVALUE 0)                        ; YY
72    (CDR)
73    (JMPIFNOT L192)
76    (JMP L178)
79    L79
79    (LOAD 16)
81    (SETVALUE 0)                        ; YY
83    (JMP L178)
86    L86
86    (LOAD&PUSH 0)
87    (CALLS2 145)                        ; ZEROP
89    (SKIP 1)
91    (JMPIFNOT L132)
93    (JMP L12)
96    L96
96    (LOAD&CDR&STORE 16)
98    (GETVALUE 0)                        ; YY
100   (CDR)
101   (SETVALUE 0)                        ; YY
103   (GETVALUE 1)                        ; ANS
105   (CDR)
106   (NOT)
107   (BIND 4)                            ; LEAST_TERM?
109   (LOAD 19)
111   (CAR)
112   (CDR&PUSH)
113   (GETVALUE 0)                        ; YY
115   (CAR)
116   (CDR&PUSH)
117   (CALL2 5)                           ; PSPLUS
119   (UNBIND1)
120   (SETVALUE 3)                        ; C
122   (CAR&PUSH)
123   (LOAD&PUSH 0)
124   (CALLS2&JMPIF 8 L86)                ; NUMBERP
127   (SKIP 1)
129   (JMPIF L12)
132   L132
132   (GETVALUE&PUSH 2)                   ; A
134   (LOAD 17)
136   (CAR)
137   (CAR&PUSH)
138   (GETVALUE 3)                        ; C
140   (CONS)
141   (JMP L56)
144   L144
144   (GETVALUE 0)                        ; YY
146   (CDR)
147   (SETVALUE 0)                        ; YY
149   (GETVALUE&PUSH 2)                   ; A
151   (GETVALUE 0)                        ; YY
153   (CAR)
154   (JMP L56)
157   L157
157   (GETVALUE 0)                        ; YY
159   (CDR)
160   (SETVALUE 0)                        ; YY
162   (GETVALUE&PUSH 2)                   ; A
164   (GETVALUE 0)                        ; YY
166   (CAR&PUSH)
167   (GETVALUE 2)                        ; A
169   (CDR)
170   (CONS&PUSH)
171   (CALLS1 170)                        ; RPLACD
173   (GETVALUE 2)                        ; A
175   (CDR)
176   (SETVALUE 2)                        ; A
178   L178
178   (GETVALUE 0)                        ; YY
180   (CDR)
181   (JMPIFNOT L192)
183   (GETVALUE 0)                        ; YY
185   (CDR)
186   (CAR)
187   (CAR&PUSH)
188   (LOAD&PUSH 18)
189   (CALL2&JMPIFNOT 6 L157)             ; E>
192   L192
192   (LOAD&PUSH 18)
193   (LOAD&PUSH 18)
194   (LIST&PUSH 1)
196   (GETVALUE 1)                        ; ANS
198   (CDR&PUSH)
199   (CALL 3 7)                          ; PSCHECK
202   (UNBIND 4)
204   (SKIP&RET 7)


Disassembly of function #:|(DEFUN PSDIFF1 (X Y) ...)-48|
(CONST 0) = PSDIFF1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDIFF1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDIFF1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDIFF1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDIFF1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDIFF1
8     (SKIP&RET 1)


Disassembly of function PSDIFF1
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ANS
(CONST 3) = EMIN
(CONST 4) = 0
(CONST 5) = PSDIFF2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS Y X)
39 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL&PUSH)
7     (NIL)
8     (CONS)
9     (BIND 2)                            ; ANS
11    (GETVALUE 0)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CDR)
19    (CAR)
20    (CAR&PUSH)
21    (GETVALUE 1)                        ; Y
23    (CDR)
24    (CDR)
25    (CAR)
26    (CAR&PUSH)
27    (CALL2&PUSH 3)                      ; EMIN
29    (CONST&PUSH 4)                      ; 0
30    (GETVALUE 0)                        ; X
32    (CDR)
33    (CDR)
34    (CDR)
35    (CONS&PUSH)
36    (CONST&PUSH 4)                      ; 0
37    (GETVALUE 1)                        ; Y
39    (CDR)
40    (CDR)
41    (CDR)
42    (CONS&PUSH)
43    (GETVALUE&PUSH 2)                   ; ANS
45    (GETVALUE&PUSH 2)                   ; ANS
47    (CALL 6 5)                          ; PSDIFF2
50    (UNBIND 3)
52    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSDIFF2 (VARH TRUNC XX ...) ...)-49|
(CONST 0) = PSDIFF2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDIFF2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDIFF2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDIFF2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDIFF2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDIFF2
8     (SKIP&RET 1)


Disassembly of function PSDIFF2
(CONST 0) = YY
(CONST 1) = ANS
(CONST 2) = A
(CONST 3) = C
(CONST 4) = 0
(CONST 5) = PSMINUS
(CONST 6) = LEAST_TERM?
(CONST 7) = PSDIFF
(CONST 8) = E>
(CONST 9) = PSCHECK
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C ANS A YY)
writes special variables : (C YY A)
168 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; YY
3     (LOAD 5)
4     (BIND 1)                            ; ANS
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; C
12    L12
12    (LOAD 16)
14    (CDR)
15    (JMPIFNOT L72)
17    (GETVALUE 0)                        ; YY
19    (CDR)
20    (JMPIFNOT L117)
23    (LOAD 16)
25    (CDR)
26    (CAR)
27    (CAR&PUSH)
28    (GETVALUE 0)                        ; YY
30    (CDR)
31    (CAR)
32    (CAR&PUSH)
33    (CALLS2&JMPIF 2 L134)               ; EQUAL
37    (LOAD 16)
39    (CDR)
40    (CAR)
41    (CAR&PUSH)
42    (GETVALUE 0)                        ; YY
44    (CDR)
45    (CAR)
46    (CAR&PUSH)
47    (CALL2&JMPIF 8 L182)                ; E>
51    (LOAD&CDR&STORE 16)
53    (GETVALUE&PUSH 2)                   ; A
55    (LOAD 17)
57    (CAR)
58    L58
58    (PUSH)
59    (GETVALUE 2)                        ; A
61    (CDR)
62    (CONS&PUSH)
63    (CALLS1 170)                        ; RPLACD
65    (GETVALUE 2)                        ; A
67    (CDR)
68    (SETVALUE 2)                        ; A
70    (JMP L12)
72    L72
72    (GETVALUE 0)                        ; YY
74    (CDR)
75    (JMPIFNOT L244)
78    (CONST&PUSH 4)                      ; 0
79    (NIL&PUSH)
80    (GETVALUE 0)                        ; YY
82    (CDR&PUSH)
83    (JMP L100)
85    L85
85    (LOAD&CAR&PUSH 0)
87    (LOAD&CAR&PUSH 0)
89    (LOAD&CDR&PUSH 1)
91    (CALL1 5)                           ; PSMINUS
93    (CONS&PUSH)
94    (LOAD&CONS&STORE 2)
96    (SKIP 1)
98    (LOAD&CDR&STORE 0)
100   L100
100   (LOAD&PUSH 0)
101   (CALLS1&JMPIFNOT 146 L85)           ; ENDP
104   (SKIP 1)
106   (LOAD&PUSH 0)
107   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
109   (SKIP 1)
111   (CONS)
112   (SETVALUE 0)                        ; YY
114   (JMP L230)
117   L117
117   (LOAD 16)
119   (SETVALUE 0)                        ; YY
121   (JMP L230)
124   L124
124   (LOAD&PUSH 0)
125   (CALLS2 145)                        ; ZEROP
127   (SKIP 1)
129   (JMPIFNOT L170)
131   (JMP L12)
134   L134
134   (LOAD&CDR&STORE 16)
136   (GETVALUE 0)                        ; YY
138   (CDR)
139   (SETVALUE 0)                        ; YY
141   (GETVALUE 1)                        ; ANS
143   (CDR)
144   (NOT)
145   (BIND 6)                            ; LEAST_TERM?
147   (LOAD 19)
149   (CAR)
150   (CDR&PUSH)
151   (GETVALUE 0)                        ; YY
153   (CAR)
154   (CDR&PUSH)
155   (CALL2 7)                           ; PSDIFF
157   (UNBIND1)
158   (SETVALUE 3)                        ; C
160   (CAR&PUSH)
161   (LOAD&PUSH 0)
162   (CALLS2&JMPIF 8 L124)               ; NUMBERP
165   (SKIP 1)
167   (JMPIF L12)
170   L170
170   (GETVALUE&PUSH 2)                   ; A
172   (LOAD 17)
174   (CAR)
175   (CAR&PUSH)
176   (GETVALUE 3)                        ; C
178   (CONS)
179   (JMP L58)
182   L182
182   (GETVALUE 0)                        ; YY
184   (CDR)
185   (SETVALUE 0)                        ; YY
187   (GETVALUE&PUSH 2)                   ; A
189   (GETVALUE 0)                        ; YY
191   (CAR)
192   (CAR&PUSH)
193   (GETVALUE 0)                        ; YY
195   (CAR)
196   (CDR&PUSH)
197   (CALL1 5)                           ; PSMINUS
199   (CONS)
200   (JMP L58)
203   L203
203   (GETVALUE 0)                        ; YY
205   (CDR)
206   (SETVALUE 0)                        ; YY
208   (GETVALUE&PUSH 2)                   ; A
210   (GETVALUE 0)                        ; YY
212   (CAR)
213   (CAR&PUSH)
214   (GETVALUE 0)                        ; YY
216   (CAR)
217   (CDR)
218   (CONS&PUSH)
219   (GETVALUE 2)                        ; A
221   (CDR)
222   (CONS&PUSH)
223   (CALLS1 170)                        ; RPLACD
225   (GETVALUE 2)                        ; A
227   (CDR)
228   (SETVALUE 2)                        ; A
230   L230
230   (GETVALUE 0)                        ; YY
232   (CDR)
233   (JMPIFNOT L244)
235   (GETVALUE 0)                        ; YY
237   (CDR)
238   (CAR)
239   (CAR&PUSH)
240   (LOAD&PUSH 18)
241   (CALL2&JMPIFNOT 8 L203)             ; E>
244   L244
244   (LOAD&PUSH 18)
245   (LOAD&PUSH 18)
246   (LIST&PUSH 1)
248   (GETVALUE 1)                        ; ANS
250   (CDR&PUSH)
251   (CALL 3 9)                          ; PSCHECK
254   (UNBIND 4)
256   (SKIP&RET 7)


Disassembly of function #:|(DEFUN PSMINUS (X) ...)-50|
(CONST 0) = PSMINUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSMINUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSMINUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSMINUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSMINUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSMINUS
8     (SKIP&RET 1)


Disassembly of function PSMINUS
(CONST 0) = X
(CONST 1) = PS
(CONST 2) = PSMINUS-TERMS
(CONST 3) = RATMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L16)                   ; PS
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 3)                           ; RATMINUS
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (CONST&PUSH 1)                      ; PS
17    (GETVALUE 0)                        ; X
19    (CDR)
20    (CAR&PUSH)
21    (GETVALUE 0)                        ; X
23    (CDR)
24    (CDR)
25    (CAR&PUSH)
26    (GETVALUE 0)                        ; X
28    (CDR)
29    (CDR)
30    (CDR&PUSH)
31    (CALL1 2)                           ; PSMINUS-TERMS
33    (CONS)
34    (CONS)
35    (CONS)
36    (JMP L13)


Disassembly of function #:|(DEFUN PSMINUS-TERMS (TERMS) ...)-51|
(CONST 0) = PSMINUS-TERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSMINUS-TERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSMINUS-TERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSMINUS-TERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSMINUS-TERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSMINUS-TERMS
8     (SKIP&RET 1)


Disassembly of function PSMINUS-TERMS
(CONST 0) = ANS
(CONST 1) = A
(CONST 2) = PSMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A ANS)
writes special variable : (A)
35 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (CONS)
3     (BIND 0)                            ; ANS
5     (LOAD&PUSH 4)
6     (GETVALUE 0)                        ; ANS
8     (BIND 1)                            ; A
10    (LOAD&JMPIFNOT 3 L42)
13    L13
13    (GETVALUE&PUSH 1)                   ; A
15    (LOAD 4)
16    (CAR)
17    (CAR&PUSH)
18    (LOAD 5)
19    (CAR)
20    (CDR&PUSH)
21    (CALL1 2)                           ; PSMINUS
23    (CONS&PUSH)
24    (GETVALUE 1)                        ; A
26    (CDR)
27    (CONS&PUSH)
28    (CALLS1 170)                        ; RPLACD
30    (LOAD&CDR&PUSH 3)
32    (GETVALUE 1)                        ; A
34    (CDR)
35    (SETVALUE 1)                        ; A
37    (POP&STORE 3)
39    (LOAD&JMPIF 3 L13)
42    L42
42    (GETVALUE 0)                        ; ANS
44    (CDR)
45    (UNBIND1)
46    (SKIP 1)
48    (UNBIND1)
49    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSCHECK (A B TERMS) ...)-52|
(CONST 0) = PSCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCHECK
8     (SKIP&RET 1)


Disassembly of function PSCHECK
(CONST 0) = A
(CONST 1) = B
(CONST 2) = (0 . 1)
(CONST 3) = PS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
40 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD&JMPIFNOT 7 L38)
9     (LOAD 7)
10    (CDR)
11    (JMPIF L25)
13    (LOAD 7)
14    (CAR)
15    (CAR)
16    (CAR&PUSH)
17    (LOAD&PUSH 0)
18    (CALLS2&JMPIF 8 L41)                ; NUMBERP
21    (SKIP 1)
23    (JMPIF L48)
25    L25
25    (CONST&PUSH 3)                      ; PS
26    (GETVALUE&PUSH 0)                   ; A
28    (GETVALUE&PUSH 1)                   ; B
30    (LOAD 10)
31    (CONS)
32    (CONS)
33    (CONS)
34    L34
34    (UNBIND 2)
36    (SKIP&RET 4)
38    L38
38    (CONST 2)                           ; (0 . 1)
39    (JMP L34)
41    L41
41    (LOAD&PUSH 0)
42    (CALLS2 145)                        ; ZEROP
44    (SKIP 1)
46    (JMPIFNOT L25)
48    L48
48    (LOAD 7)
49    (CAR)
50    (CDR)
51    (JMP L34)


Disassembly of function #:|(DEFUN PSTRIM-TERMS (TERMS E) ...)-53|
(CONST 0) = PSTRIM-TERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTRIM-TERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTRIM-TERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTRIM-TERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTRIM-TERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTRIM-TERMS
8     (SKIP&RET 1)


Disassembly of function PSTRIM-TERMS
(CONST 0) = E
(CONST 1) = E>
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (LOAD&JMPIF 5 L14)
6     L6
6     (NIL)
7     (JMP L23)
9     L9
9     (LOAD&CDR&STORE 5)
11    (LOAD&JMPIFNOT 5 L6)
14    L14
14    (GETVALUE&PUSH 0)                   ; E
16    (LOAD 6)
17    (CAR)
18    (CAR&PUSH)
19    (CALL2&JMPIF 1 L9)                  ; E>
22    (LOAD 5)
23    L23
23    (UNBIND1)
24    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSTERM (TERMS E) ...)-54|
(CONST 0) = PSTERM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTERM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTERM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTERM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTERM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTERM
8     (SKIP&RET 1)


Disassembly of function PSTERM
(CONST 0) = E
(CONST 1) = PSTRIM-TERMS
(CONST 2) = PSTERM1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; E
6     (CALL2&PUSH 1)                      ; PSTRIM-TERMS
8     (GETVALUE&PUSH 0)                   ; E
10    (CALL2 2)                           ; PSTERM1
12    (UNBIND1)
13    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSTERM1 (L E) ...)-55|
(CONST 0) = PSTERM1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTERM1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTERM1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTERM1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTERM1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTERM1
8     (SKIP&RET 1)


Disassembly of function PSTERM1
(CONST 0) = L
(CONST 1) = E
(CONST 2) = (0 . 1)
(CONST 3) = E=
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (E L)
23 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; E
6     (GETVALUE 0)                        ; L
8     (JMPIFNOT L24)
10    (GETVALUE 0)                        ; L
12    (CAR)
13    (CAR&PUSH)
14    (GETVALUE&PUSH 1)                   ; E
16    (CALL2&JMPIF 3 L27)                 ; E=
19    (CONST 2)                           ; (0 . 1)
20    L20
20    (UNBIND 2)
22    (SKIP&RET 3)
24    L24
24    (CONST 2)                           ; (0 . 1)
25    (JMP L20)
27    L27
27    (GETVALUE 0)                        ; L
29    (CAR)
30    (CDR)
31    (JMP L20)


Disassembly of function #:|(DEFUN PSCOEFF1 (A B C) ...)-56|
(CONST 0) = PSCOEFF1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCOEFF1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCOEFF1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCOEFF1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCOEFF1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCOEFF1
8     (SKIP&RET 1)


Disassembly of function PSCOEFF1
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = TLIST
(CONST 4) = MRAT
(CONST 5) = SIMP
(CONST 6) = L
(CONST 7) = ANS
(CONST 8) = ALIKE1
(CONST 9) = TRUNC
(CONST 10) = ZL-ASSOC
(CONST 11) = PREP1
(CONST 12) = PSCOEF
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C TLIST ANS B L A)
writes special variables : (L ANS)
85 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE 0)                        ; A
11    (CAR&PUSH)
12    (CALLS1 149)                        ; FIFTH
14    (BIND 3)                            ; TLIST
16    (CONST&PUSH 4)                      ; MRAT
17    (CONST&PUSH 5)                      ; SIMP
18    (GETVALUE 0)                        ; A
20    (CAR)
21    (CDR)
22    (CDR)
23    (CAR&PUSH)
24    (GETVALUE 0)                        ; A
26    (CAR)
27    (CDR)
28    (CDR)
29    (CDR)
30    (CAR&PUSH)
31    (LIST&PUSH 4)
33    (GETVALUE 0)                        ; A
35    (CAR&PUSH)
36    (CALLS1 149)                        ; FIFTH
38    (BIND 6)                            ; L
40    (NIL)
41    (BIND 7)                            ; ANS
43    (GETVALUE 6)                        ; L
45    (JMPIFNOT L74)
47    L47
47    (GETVALUE 6)                        ; L
49    (CAR)
50    (CAR&PUSH)
51    (GETVALUE&PUSH 1)                   ; B
53    (CALL2&JMPIF 8 L108)                ; ALIKE1
56    (GETVALUE 6)                        ; L
58    (CDR&PUSH)
59    (GETVALUE 6)                        ; L
61    (CAR&PUSH)
62    (GETVALUE 7)                        ; ANS
64    (CONS)
65    (SETVALUE 7)                        ; ANS
67    (POP)
68    (SETVALUE 6)                        ; L
70    (GETVALUE 6)                        ; L
72    (JMPIF L47)
74    L74
74    (GETVALUE 7)                        ; ANS
76    L76
76    (UNBIND 2)
78    (PUSH)
79    (CALLSR&PUSH 2 35)                  ; NCONC
82    (GETVALUE 0)                        ; A
84    (CDR&PUSH)
85    (GETVALUE&PUSH 1)                   ; B
87    (GETVALUE&PUSH 3)                   ; TLIST
89    (CALL2 10)                          ; ZL-ASSOC
91    (CDR)
92    (CDR)
93    (CDR)
94    (CDR)
95    (CAR&PUSH)
96    (GETVALUE&PUSH 2)                   ; C
98    (CALL1&PUSH 11)                     ; PREP1
100   (CALL 3 12)                         ; PSCOEF
103   (CONS)
104   (UNBIND 4)
106   (SKIP&RET 4)
108   L108
108   (GETVALUE 7)                        ; ANS
110   (JMPIF L117)
112   (GETVALUE 6)                        ; L
114   (CDR)
115   (JMPIFNOT L76)
117   L117
117   (GETVALUE&PUSH 7)                   ; ANS
119   (GETVALUE 6)                        ; L
121   (CDR&PUSH)
122   (CALLS1&PUSH 163)                   ; NRECONC
124   (CONST&PUSH 9)                      ; TRUNC
125   (LIST 2)
127   (JMP L76)


Disassembly of function #:|(DEFUN PSCOEF (A B C) ...)-57|
(CONST 0) = PSCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCOEF
8     (SKIP&RET 1)


Disassembly of function PSCOEF
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = PS
(CONST 4) = (0 . 1)
(CONST 5) = PSTERM
(CONST 6) = TEMP
(CONST 7) = ANS
(CONST 8) = PSPLUS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEMP ANS C B A)
writes special variables : (ANS TEMP)
105 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE 0)                        ; A
11    (CAR&PUSH)
12    (JMPIFNOTEQTO 3 L117)               ; PS
16    (GETVALUE&PUSH 1)                   ; B
18    (GETVALUE 0)                        ; A
20    (CDR)
21    (CAR)
22    (CAR)
23    (JMPIFEQ L131)
26    (GETVALUE 0)                        ; A
28    (CDR)
29    (CAR&PUSH)
30    (GETVALUE 0)                        ; A
32    (CDR)
33    (CDR)
34    (CAR&PUSH)
35    (CONST&PUSH 4)                      ; (0 . 1)
36    (GETVALUE 0)                        ; A
38    (CDR)
39    (CDR)
40    (CDR&PUSH)
41    (NIL)
42    (BIND 6)                            ; TEMP
44    (LOAD 4)
45    (BIND 7)                            ; ANS
47    (LOAD&JMPIFNOT 6 L96)
50    L50
50    (LOAD 6)
51    (CAR)
52    (CDR&PUSH)
53    (GETVALUE&PUSH 1)                   ; B
55    (GETVALUE&PUSH 2)                   ; C
57    (JSR L0)
59    (SETVALUE 6)                        ; TEMP
61    (CAR&PUSH)
62    (LOAD&PUSH 0)
63    (CALLS2&JMPIF 8 L142)               ; NUMBERP
67    (SKIP 1)
69    (JMPIF L91)
71    L71
71    (GETVALUE&PUSH 7)                   ; ANS
73    (CONST&PUSH 3)                      ; PS
74    (LOAD&PUSH 11)
75    (LOAD&PUSH 11)
76    (LOAD 10)
77    (CAR)
78    (CAR&PUSH)
79    (GETVALUE 6)                        ; TEMP
81    (CONS&PUSH)
82    (NIL)
83    (CONS)
84    (CONS)
85    (CONS)
86    (CONS&PUSH)
87    (CALL2 8)                           ; PSPLUS
89    (SETVALUE 7)                        ; ANS
91    L91
91    (LOAD&CDR&STORE 6)
93    (LOAD&JMPIF 6 L50)
96    L96
96    (GETVALUE 7)                        ; ANS
98    (UNBIND 2)
100   (SKIP 4)
102   L102
102   (UNBIND 3)
104   (SKIP&RET 4)
106   L106
106   (LOAD&PUSH 0)
107   (CALLS2 145)                        ; ZEROP
109   (SKIP 1)
111   (JMPIFNOT L128)
113   L113
113   (GETVALUE 0)                        ; A
115   (JMP L102)
117   L117
117   (GETVALUE 2)                        ; C
119   (CAR&PUSH)
120   (LOAD&PUSH 0)
121   (CALLS2&JMPIF 8 L106)               ; NUMBERP
124   (SKIP 1)
126   (JMPIF L113)
128   L128
128   (CONST 4)                           ; (0 . 1)
129   (JMP L102)
131   L131
131   (GETVALUE 0)                        ; A
133   (CDR)
134   (CDR)
135   (CDR&PUSH)
136   (GETVALUE&PUSH 2)                   ; C
138   (CALL2 5)                           ; PSTERM
140   (JMP L102)
142   L142
142   (LOAD&PUSH 0)
143   (CALLS2 145)                        ; ZEROP
145   (SKIP 1)
147   (JMPIFNOT L71)
150   (JMP L91)


Disassembly of function #:|(DEFUN PSDISEXTEND (P) ...)-58|
(CONST 0) = PSDISEXTEND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISEXTEND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISEXTEND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISEXTEND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISEXTEND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISEXTEND
8     (SKIP&RET 1)


Disassembly of function PSDISEXTEND
(CONST 0) = P
(CONST 1) = PS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
45 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L27)                ; PS
9     (CONST&PUSH 1)                      ; PS
10    (GETVALUE 0)                        ; P
12    (CDR)
13    (CAR&PUSH)
14    (GETVALUE 0)                        ; P
16    (CDR)
17    (CDR)
18    (CAR&PUSH)
19    (NIL&PUSH)
20    (GETVALUE 0)                        ; P
22    (CDR)
23    (CDR)
24    (CDR&PUSH)
25    (JMP L46)
27    L27
27    (GETVALUE 0)                        ; P
29    (JMP L60)
31    L31
31    (LOAD&CAR&PUSH 0)
33    (LOAD&CAR&PUSH 0)
35    (LOAD&CDR&PUSH 1)
37    (JSR L0)
39    (CONS&PUSH)
40    (LOAD&CONS&STORE 2)
42    (SKIP 1)
44    (LOAD&CDR&STORE 0)
46    L46
46    (LOAD&PUSH 0)
47    (CALLS1&JMPIFNOT 146 L31)           ; ENDP
50    (SKIP 1)
52    (LOAD&PUSH 0)
53    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
55    (SKIP 1)
57    (CONS)
58    (CONS)
59    (CONS)
60    L60
60    (UNBIND1)
61    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSFLOAT (P) ...)-59|
(CONST 0) = PSFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSFLOAT
8     (SKIP&RET 1)


Disassembly of function PSFLOAT
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = 0
(CONST 3) = PSFLOAT1
(CONST 4) = (1.0 . 1.0)
(CONST 5) = RATTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L19)                   ; PS
9     (CONST&PUSH 4)                      ; (1.0 . 1.0)
10    (GETVALUE&PUSH 0)                   ; P
12    (T&PUSH)
13    (CALL 3 5)                          ; RATTIMES
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)
19    L19
19    (GETVALUE&PUSH 0)                   ; P
21    (GETVALUE 0)                        ; P
23    (CDR)
24    (CDR)
25    (CAR)
26    (CAR&PUSH)
27    (GETVALUE 0)                        ; P
29    (CDR)
30    (CDR)
31    (CDR&PUSH)
32    (CONST&PUSH 2)                      ; 0
33    (NIL)
34    (CONS&PUSH)
35    (CALL 4 3)                          ; PSFLOAT1
38    (JMP L16)


Disassembly of function #:|(DEFUN PSFLOAT1 (P TRUNC L ...) ...)-60|
(CONST 0) = PSFLOAT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSFLOAT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSFLOAT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSFLOAT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSFLOAT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSFLOAT1
8     (SKIP&RET 1)


Disassembly of function PSFLOAT1
(CONST 0) = P
(CONST 1) = L
(CONST 2) = ANS
(CONST 3) = A
(CONST 4) = $FLOAT
(CONST 5) = E>
(CONST 6) = PSFLOAT
(CONST 7) = PSCHECK
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P A L ANS)
writes special variables : (A L)
57 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; P
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; ANS
9     (T&PUSH)
10    (GETVALUE&PUSH 2)                   ; ANS
12    (PUSH-UNBOUND 1)
14    (CALLS1 156)                        ; LAST
16    (BIND 3)                            ; A
18    (LOAD 3)
19    (BIND 4)                            ; $FLOAT
21    (GETVALUE 1)                        ; L
23    (JMPIFNOT L66)
25    L25
25    (GETVALUE 1)                        ; L
27    (CAR)
28    (CAR&PUSH)
29    (LOAD&PUSH 20)
30    (CALL2&JMPIF 5 L66)                 ; E>
33    (GETVALUE&PUSH 3)                   ; A
35    (GETVALUE 1)                        ; L
37    (CAR)
38    (CAR&PUSH)
39    (GETVALUE 1)                        ; L
41    (CAR)
42    (CDR&PUSH)
43    (CALL1 6)                           ; PSFLOAT
45    (CONS&PUSH)
46    (GETVALUE 3)                        ; A
48    (CDR)
49    (CONS&PUSH)
50    (CALLS1 170)                        ; RPLACD
52    (GETVALUE 1)                        ; L
54    (CDR)
55    (SETVALUE 1)                        ; L
57    (GETVALUE 3)                        ; A
59    (CDR)
60    (SETVALUE 3)                        ; A
62    (GETVALUE 1)                        ; L
64    (JMPIF L25)
66    L66
66    (GETVALUE 0)                        ; P
68    (CDR)
69    (CAR&PUSH)
70    (GETVALUE 0)                        ; P
72    (CDR)
73    (CDR)
74    (CAR&PUSH)
75    (GETVALUE 2)                        ; ANS
77    (CDR&PUSH)
78    (CALL 3 7)                          ; PSCHECK
81    (UNBIND 2)
83    (SKIP 1)
85    (UNBIND 3)
87    (SKIP&RET 5)


Disassembly of function #:|(DEFUN PSTRUNC (P) ...)-61|
(CONST 0) = PSTRUNC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTRUNC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTRUNC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTRUNC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTRUNC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTRUNC
8     (SKIP&RET 1)


Disassembly of function PSTRUNC
(CONST 0) = P
(CONST 1) = TLIST
(CONST 2) = PSTRUNC1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST P)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (NIL&PUSH)
6     (GETVALUE&PUSH 1)                   ; TLIST
8     (JMP L29)
10    L10
10    (LOAD&CAR&PUSH 0)
12    (LOAD 0)
13    (CDR)
14    (CDR)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD 1)
19    (CDR)
20    (CAR)
21    (CAR)
22    (CONS&PUSH)
23    (LOAD&CONS&STORE 2)
25    (SKIP 1)
27    (LOAD&CDR&STORE 0)
29    L29
29    (LOAD&PUSH 0)
30    (CALLS1&JMPIFNOT 146 L10)           ; ENDP
33    (SKIP 1)
35    (LOAD&PUSH 0)
36    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
39    (CALL2 2)                           ; PSTRUNC1
41    (UNBIND1)
42    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSTRUNC1 (P TRLIST) ...)-62|
(CONST 0) = PSTRUNC1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTRUNC1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTRUNC1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTRUNC1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTRUNC1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTRUNC1
8     (SKIP&RET 1)


Disassembly of function PSTRUNC1
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = ASSQ
(CONST 3) = A
(CONST 4) = L
(CONST 5) = E>
(CONST 6) = PSCHECK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A L P)
writes special variables : (L A)
91 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L107)               ; PS
10    (GETVALUE 0)                        ; P
12    (CDR)
13    (CAR)
14    (CAR&PUSH)
15    (LOAD&PUSH 5)
16    (CALL2 2)                           ; ASSQ
18    (CDR&PUSH)
19    (NIL&PUSH)
20    (NIL)
21    (BIND 3)                            ; A
23    (GETVALUE 0)                        ; P
25    (CDR)
26    (CDR)
27    (CDR)
28    (BIND 4)                            ; L
30    (GETVALUE 4)                        ; L
32    (JMPIFNOT L80)
34    L34
34    (GETVALUE 4)                        ; L
36    (CAR)
37    (CAR&PUSH)
38    (LOAD&PUSH 8)
39    (CALL2&JMPIF 5 L111)                ; E>
43    (GETVALUE 4)                        ; L
45    (CAR)
46    (CDR&PUSH)
47    (LOAD&PUSH 13)
48    (JSR L0)
50    (STORE 6)
51    (CAR&PUSH)
52    (LOAD&PUSH 0)
53    (CALLS2&JMPIF 8 L118)               ; NUMBERP
56    (SKIP 1)
58    (JMPIF L71)
60    L60
60    (GETVALUE 4)                        ; L
62    (CAR)
63    (CAR&PUSH)
64    (LOAD 7)
65    (CONS&PUSH)
66    (GETVALUE 3)                        ; A
68    (CONS)
69    (SETVALUE 3)                        ; A
71    L71
71    (GETVALUE 4)                        ; L
73    (CDR)
74    (SETVALUE 4)                        ; L
76    (GETVALUE 4)                        ; L
78    (JMPIF L34)
80    L80
80    (GETVALUE 0)                        ; P
82    (CDR)
83    (CAR&PUSH)
84    (GETVALUE 0)                        ; P
86    (CDR)
87    (CDR)
88    (CAR)
89    (CAR)
90    L90
90    (PUSH)
91    (NIL)
92    (CONS&PUSH)
93    (GETVALUE&PUSH 3)                   ; A
95    (CALLS2&PUSH 73)                    ; NREVERSE
97    (CALL 3 6)                          ; PSCHECK
100   (UNBIND 2)
102   (SKIP 2)
104   L104
104   (UNBIND1)
105   (SKIP&RET 3)
107   L107
107   (GETVALUE 0)                        ; P
109   (JMP L104)
111   L111
111   (GETVALUE 0)                        ; P
113   (CDR)
114   (CAR&PUSH)
115   (LOAD 8)
116   (JMP L90)
118   L118
118   (LOAD&PUSH 0)
119   (CALLS2 145)                        ; ZEROP
121   (SKIP 1)
123   (JMPIFNOT L60)
126   (JMP L71)


Disassembly of function #:|(DEFUN PSTIMES (X Y) ...)-63|
(CONST 0) = PSTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTIMES
8     (SKIP&RET 1)


Disassembly of function PSTIMES
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = (0 . 1)
(CONST 3) = PS
(CONST 4) = RATTIMES
(CONST 5) = (1 . 1)
(CONST 6) = PSCTIMES*
(CONST 7) = PSTIMES*1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
96 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (CAR&PUSH)
9     (LOAD&PUSH 0)
10    (CALLS2&JMPIF 8 L85)                ; NUMBERP
14    (SKIP 1)
16    (JMPIF L103)
19    L19
19    (GETVALUE 1)                        ; Y
21    (CAR&PUSH)
22    (LOAD&PUSH 0)
23    (CALLS2&JMPIF 8 L95)                ; NUMBERP
27    (SKIP 1)
29    (JMPIF L103)
32    L32
32    (GETVALUE 0)                        ; X
34    (CAR&PUSH)
35    (JMPIFNOTEQTO 3 L116)               ; PS
39    (GETVALUE 1)                        ; Y
41    (CAR&PUSH)
42    (JMPIFNOTEQTO 3 L144)               ; PS
46    (GETVALUE 0)                        ; X
48    (CDR)
49    (CAR)
50    (CAR&PUSH)
51    (GETVALUE 1)                        ; Y
53    (CDR)
54    (CAR)
55    (CAR)
56    (JMPIFEQ L136)
59    (GETVALUE 0)                        ; X
61    (CDR)
62    (CAR)
63    (CDR&PUSH)
64    (GETVALUE 1)                        ; Y
66    (CDR)
67    (CAR)
68    (CDR&PUSH)
69    (CALLSR&JMPIF 1 48 L150)            ; >
74    L74
74    (GETVALUE&PUSH 0)                   ; X
76    (GETVALUE 1)                        ; Y
78    L78
78    (PUSH)
79    (CALL2 6)                           ; PSCTIMES*
81    L81
81    (UNBIND 2)
83    (SKIP&RET 3)
85    L85
85    (LOAD&PUSH 0)
86    (CALLS2 145)                        ; ZEROP
88    (SKIP 1)
90    (JMPIFNOT L19)
93    (JMP L103)
95    L95
95    (LOAD&PUSH 0)
96    (CALLS2 145)                        ; ZEROP
98    (SKIP 1)
100   (JMPIFNOT L32)
103   L103
103   (CONST 2)                           ; (0 . 1)
104   (JMP L81)
106   L106
106   (GETVALUE&PUSH 0)                   ; X
108   (GETVALUE&PUSH 1)                   ; Y
110   (T&PUSH)
111   (CALL 3 4)                          ; RATTIMES
114   (JMP L81)
116   L116
116   (GETVALUE 1)                        ; Y
118   (CAR&PUSH)
119   (JMPIFNOTEQTO 3 L106)               ; PS
122   (GETVALUE&PUSH 0)                   ; X
124   (CONST&PUSH 5)                      ; (1 . 1)
125   (CALLS2&JMPIFNOT 2 L74)             ; EQUAL
128   (GETVALUE 1)                        ; Y
130   (JMP L81)
132   L132
132   (GETVALUE 0)                        ; X
134   (JMP L81)
136   L136
136   (GETVALUE&PUSH 0)                   ; X
138   (GETVALUE&PUSH 1)                   ; Y
140   (CALL2 7)                           ; PSTIMES*1
142   (JMP L81)
144   L144
144   (GETVALUE&PUSH 1)                   ; Y
146   (CONST&PUSH 5)                      ; (1 . 1)
147   (CALLS2&JMPIF 2 L132)               ; EQUAL
150   L150
150   (GETVALUE&PUSH 1)                   ; Y
152   (GETVALUE 0)                        ; X
154   (JMP L78)


Disassembly of function #:|(DEFUN PSCTIMES* (C P) ...)-64|
(CONST 0) = PSCTIMES*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCTIMES*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCTIMES*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCTIMES*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCTIMES*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCTIMES*
8     (SKIP&RET 1)


Disassembly of function PSCTIMES*
(CONST 0) = C
(CONST 1) = P
(CONST 2) = PS
(CONST 3) = L
(CONST 4) = PSTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C L P)
46 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; C
3     (LOAD 4)
4     (BIND 1)                            ; P
6     (CONST&PUSH 2)                      ; PS
7     (GETVALUE 1)                        ; P
9     (CDR)
10    (CAR&PUSH)
11    (GETVALUE 1)                        ; P
13    (CDR)
14    (CDR)
15    (CAR&PUSH)
16    (NIL&PUSH)
17    (GETVALUE 1)                        ; P
19    (CDR)
20    (CDR)
21    (CDR&PUSH)
22    (JMP L46)
24    L24
24    (LOAD 0)
25    (BIND 3)                            ; L
27    (GETVALUE 3)                        ; L
29    (CAR)
30    (CAR&PUSH)
31    (GETVALUE&PUSH 0)                   ; C
33    (GETVALUE 3)                        ; L
35    (CAR)
36    (CDR&PUSH)
37    (CALL2 4)                           ; PSTIMES
39    (CONS)
40    (UNBIND1)
41    (PUSH)
42    (LOAD&CONS&STORE 1)
44    (LOAD&CDR&STORE 0)
46    L46
46    (LOAD&PUSH 0)
47    (CALLS1&JMPIFNOT 146 L24)           ; ENDP
50    (SKIP 1)
52    (LOAD&PUSH 0)
53    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
55    (SKIP 1)
57    (CONS)
58    (CONS)
59    (CONS)
60    (UNBIND 2)
62    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSTIMES*1 (XA YA) ...)-65|
(CONST 0) = PSTIMES*1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTIMES*1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTIMES*1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTIMES*1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTIMES*1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTIMES*1
8     (SKIP&RET 1)


Disassembly of function PSTIMES*1
(CONST 0) = EDIFF
(CONST 1) = EMIN
(CONST 2) = E+
(CONST 3) = ANS
(CONST 4) = $MAXTAYORDER
(CONST 5) = KEY-VARS
(CONST 6) = ASSQ
(CONST 7) = TLIST
(CONST 8) = ZL-ASSOC
(CONST 9) = PSTIMES*2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS TLIST KEY-VARS $MAXTAYORDER)
63 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (CONS&PUSH)
3     (LOAD 3)
4     (CDR)
5     (CDR)
6     (CDR)
7     (CAR)
8     (CAR&PUSH)
9     (LOAD 3)
10    (CDR)
11    (CDR)
12    (CDR)
13    (CAR)
14    (CAR&PUSH)
15    (LOAD 5)
16    (CDR)
17    (CDR)
18    (CAR)
19    (CAR&PUSH)
20    (LOAD&PUSH 2)
21    (CALL2&PUSH 0)                      ; EDIFF
23    (LOAD 5)
24    (CDR)
25    (CDR)
26    (CAR)
27    (CAR&PUSH)
28    (LOAD&PUSH 2)
29    (CALL2&PUSH 0)                      ; EDIFF
31    (CALL2&PUSH 1)                      ; EMIN
33    (LOAD&PUSH 2)
34    (LOAD&PUSH 2)
35    (CALL2&PUSH 2)                      ; E+
37    (CALL2 2)                           ; E+
39    (SKIP 1)
41    (STORE 0)
42    (LOAD 1)
43    (BIND 3)                            ; ANS
45    (GETVALUE 4)                        ; $MAXTAYORDER
47    (JMPIF L69)
49    (LOAD&PUSH 3)
50    (LOAD 8)
51    (CDR)
52    (CAR)
53    (CAR&PUSH)
54    (GETVALUE&PUSH 5)                   ; KEY-VARS
56    (CALL2 6)                           ; ASSQ
58    (CDR&PUSH)
59    (GETVALUE&PUSH 7)                   ; TLIST
61    (CALL2 8)                           ; ZL-ASSOC
63    (CDR)
64    (CAR)
65    (CAR&PUSH)
66    (CALL2 1)                           ; EMIN
68    (STORE 3)
69    L69
69    (LOAD&PUSH 7)
70    (LOAD&PUSH 7)
71    (LOAD&PUSH 5)
72    (GETVALUE&PUSH 3)                   ; ANS
74    (CALL 4 9)                          ; PSTIMES*2
77    (UNBIND1)
78    (SKIP&RET 5)


Disassembly of function #:|(DEFUN PSTIMES*2 (XA YA TRUNC ...) ...)-66|
(CONST 0) = PSTIMES*2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTIMES*2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTIMES*2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTIMES*2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTIMES*2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTIMES*2
8     (SKIP&RET 1)


Disassembly of function PSTIMES*2
(CONST 0) = ANS
(CONST 1) = A
(CONST 2) = C
(CONST 3) = E
(CONST 4) = X
(CONST 5) = Y
(CONST 6) = YY
(CONST 7) = E+
(CONST 8) = E>
(CONST 9) = PSTIMES
(CONST 10) = PSCHECK
(CONST 11) = PSPLUS
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (YY C E A X Y ANS)
writes special variables : (C E A Y YY X)
192 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ANS
3     (NIL)
4     (BIND 1)                            ; A
6     (NIL)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; E
12    (NIL)
13    (BIND 4)                            ; X
15    (NIL)
16    (BIND 5)                            ; Y
18    (NIL)
19    (BIND 6)                            ; YY
21    (LOAD 25)
23    (CDR)
24    (CDR)
25    (CDR)
26    (SETVALUE 4)                        ; X
28    (LOAD 24)
30    (CDR)
31    (CDR)
32    (CDR)
33    (SETVALUE 6)                        ; YY
35    (SETVALUE 5)                        ; Y
37    (GETVALUE 0)                        ; ANS
39    (SETVALUE 1)                        ; A
41    (GETVALUE 5)                        ; Y
43    (JMPIFNOT L276)
46    L46
46    (GETVALUE 4)                        ; X
48    (CAR)
49    (CAR&PUSH)
50    (GETVALUE 5)                        ; Y
52    (CAR)
53    (CAR&PUSH)
54    (CALL2 7)                           ; E+
56    (SETVALUE 3)                        ; E
58    (PUSH)
59    (LOAD&PUSH 24)
60    (CALL2&JMPIF 8 L276)                ; E>
64    (GETVALUE 4)                        ; X
66    (CAR)
67    (CDR&PUSH)
68    (GETVALUE 5)                        ; Y
70    (CAR)
71    (CDR&PUSH)
72    (CALL2 9)                           ; PSTIMES
74    (SETVALUE 2)                        ; C
76    (CAR&PUSH)
77    (LOAD&PUSH 0)
78    (CALLS2&JMPIF 8 L116)               ; NUMBERP
81    (SKIP 1)
83    (JMPIF L103)
85    L85
85    (GETVALUE&PUSH 1)                   ; A
87    (GETVALUE&PUSH 3)                   ; E
89    (GETVALUE 2)                        ; C
91    (CONS&PUSH)
92    (GETVALUE 1)                        ; A
94    (CDR)
95    (CONS&PUSH)
96    (CALLS1 170)                        ; RPLACD
98    (GETVALUE 1)                        ; A
100   (CDR)
101   (SETVALUE 1)                        ; A
103   L103
103   (GETVALUE 5)                        ; Y
105   (CDR)
106   (SETVALUE 5)                        ; Y
108   (GETVALUE 5)                        ; Y
110   (JMPIFNOT L276)
113   (JMP L46)
116   L116
116   (LOAD&PUSH 0)
117   (CALLS2 145)                        ; ZEROP
119   (SKIP 1)
121   (JMPIFNOT L85)
123   (JMP L103)
125   L125
125   (GETVALUE 6)                        ; YY
127   (SETVALUE 5)                        ; Y
129   (GETVALUE 0)                        ; ANS
131   (SETVALUE 1)                        ; A
133   (GETVALUE 5)                        ; Y
135   (JMPIFNOT L276)
138   L138
138   (GETVALUE 4)                        ; X
140   (CAR)
141   (CAR&PUSH)
142   (GETVALUE 5)                        ; Y
144   (CAR)
145   (CAR&PUSH)
146   (CALL2 7)                           ; E+
148   (SETVALUE 3)                        ; E
150   (PUSH)
151   (LOAD&PUSH 24)
152   (CALL2&JMPIF 8 L276)                ; E>
156   (GETVALUE 4)                        ; X
158   (CAR)
159   (CDR&PUSH)
160   (GETVALUE 5)                        ; Y
162   (CAR)
163   (CDR&PUSH)
164   (CALL2 9)                           ; PSTIMES
166   (SETVALUE 2)                        ; C
168   (JMP L207)
170   L170
170   (GETVALUE&PUSH 1)                   ; A
172   (GETVALUE&PUSH 3)                   ; E
174   (GETVALUE 2)                        ; C
176   (CONS&PUSH)
177   (GETVALUE 1)                        ; A
179   (CDR)
180   (CONS)
181   (JMP L258)
184   L184
184   (LOAD&PUSH 0)
185   (CALLS2 145)                        ; ZEROP
187   (SKIP 1)
189   (JMPIFNOT L252)
191   L191
191   (GETVALUE&PUSH 1)                   ; A
193   (GETVALUE 1)                        ; A
195   (CDR)
196   (CDR&PUSH)
197   (CALLS1 170)                        ; RPLACD
199   (JMP L266)
202   L202
202   (GETVALUE 1)                        ; A
204   (CDR)
205   (SETVALUE 1)                        ; A
207   L207
207   (GETVALUE 1)                        ; A
209   (CDR)
210   (JMPIFNOT L170)
212   (GETVALUE 1)                        ; A
214   (CDR)
215   (CAR)
216   (CAR&PUSH)
217   (GETVALUE&PUSH 3)                   ; E
219   (CALL2&JMPIF 8 L170)                ; E>
222   (GETVALUE&PUSH 3)                   ; E
224   (GETVALUE 1)                        ; A
226   (CDR)
227   (CAR)
228   (CAR&PUSH)
229   (CALL2&JMPIF 8 L202)                ; E>
232   (GETVALUE&PUSH 2)                   ; C
234   (GETVALUE 1)                        ; A
236   (CDR)
237   (CAR)
238   (CDR&PUSH)
239   (CALL2 11)                          ; PSPLUS
241   (SETVALUE 2)                        ; C
243   (CAR&PUSH)
244   (LOAD&PUSH 0)
245   (CALLS2&JMPIF 8 L184)               ; NUMBERP
248   (SKIP 1)
250   (JMPIF L191)
252   L252
252   (GETVALUE 1)                        ; A
254   (CDR)
255   (CAR&PUSH)
256   (GETVALUE 2)                        ; C
258   L258
258   (PUSH)
259   (CALLS1 170)                        ; RPLACD
261   (GETVALUE 1)                        ; A
263   (CDR)
264   (SETVALUE 1)                        ; A
266   L266
266   (GETVALUE 5)                        ; Y
268   (CDR)
269   (SETVALUE 5)                        ; Y
271   (GETVALUE 5)                        ; Y
273   (JMPIF L138)
276   L276
276   (GETVALUE 4)                        ; X
278   (CDR)
279   (SETVALUE 4)                        ; X
281   (JMPIF L125)
284   (LOAD 25)
286   (CDR)
287   (CAR&PUSH)
288   (LOAD&PUSH 24)
289   (LIST&PUSH 1)
291   (GETVALUE 0)                        ; ANS
293   (CDR&PUSH)
294   (CALL 3 10)                         ; PSCHECK
297   (UNBIND 7)
299   (SKIP&RET 5)


Disassembly of function #:|(DEFUN PSCSUBST (C V P) ...)-67|
(CONST 0) = PSCSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCSUBST
8     (SKIP&RET 1)


Disassembly of function PSCSUBST
(CONST 0) = C
(CONST 1) = V
(CONST 2) = P
(CONST 3) = PS
(CONST 4) = PSCSUBST1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C V P)
75 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; P
9     (GETVALUE 2)                        ; P
11    (CAR&PUSH)
12    (JMPIFNOTEQTO 3 L55)                ; PS
15    (GETVALUE&PUSH 1)                   ; V
17    (GETVALUE 2)                        ; P
19    (CDR)
20    (CAR)
21    (CAR)
22    (JMPIFEQ L59)
24    (GETVALUE 1)                        ; V
26    (CDR&PUSH)
27    (GETVALUE 2)                        ; P
29    (CDR)
30    (CAR)
31    (CAR)
32    (CDR&PUSH)
33    (CALLSR&JMPIF 1 48 L67)             ; >
37    (CONST&PUSH 3)                      ; PS
38    (GETVALUE 2)                        ; P
40    (CDR)
41    (CAR&PUSH)
42    (GETVALUE 2)                        ; P
44    (CDR)
45    (CDR)
46    (CAR&PUSH)
47    (NIL&PUSH)
48    (GETVALUE 2)                        ; P
50    (CDR)
51    (CDR)
52    (CDR&PUSH)
53    (JMP L89)
55    L55
55    (GETVALUE 2)                        ; P
57    (JMP L103)
59    L59
59    (GETVALUE&PUSH 0)                   ; C
61    (GETVALUE&PUSH 2)                   ; P
63    (CALL2 4)                           ; PSCSUBST1
65    (JMP L103)
67    L67
67    (GETVALUE 2)                        ; P
69    (JMP L103)
71    L71
71    (LOAD 0)
72    (CAR)
73    (CAR&PUSH)
74    (GETVALUE&PUSH 0)                   ; C
76    (GETVALUE&PUSH 1)                   ; V
78    (LOAD 3)
79    (CAR)
80    (CDR&PUSH)
81    (JSR L0)
84    (CONS&PUSH)
85    (LOAD&CONS&STORE 1)
87    (LOAD&CDR&STORE 0)
89    L89
89    (LOAD&PUSH 0)
90    (CALLS1&JMPIFNOT 146 L71)           ; ENDP
93    (SKIP 1)
95    (LOAD&PUSH 0)
96    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
98    (SKIP 1)
100   (CONS)
101   (CONS)
102   (CONS)
103   L103
103   (UNBIND 3)
105   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PSCSUBST1 (V U) ...)-68|
(CONST 0) = PSCSUBST1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCSUBST1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCSUBST1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCSUBST1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCSUBST1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCSUBST1
8     (SKIP&RET 1)


Disassembly of function PSCSUBST1
(CONST 0) = V
(CONST 1) = (0 . 1)
(CONST 2) = A
(CONST 3) = PSEXPT
(CONST 4) = PSTIMES
(CONST 5) = PSPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V A)
writes special variable : (A)
31 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; V
3     (CONST&PUSH 1)                      ; (0 . 1)
4     (LOAD 5)
5     (CDR)
6     (CDR)
7     (CDR&PUSH)
8     (LOAD 1)
9     (BIND 2)                            ; A
11    (LOAD&JMPIFNOT 3 L37)
14    L14
14    (GETVALUE&PUSH 2)                   ; A
16    (LOAD 4)
17    (CAR)
18    (CDR&PUSH)
19    (GETVALUE&PUSH 0)                   ; V
21    (LOAD 6)
22    (CAR)
23    (CAR&PUSH)
24    (CALL2&PUSH 3)                      ; PSEXPT
26    (CALL2&PUSH 4)                      ; PSTIMES
28    (CALL2 5)                           ; PSPLUS
30    (SETVALUE 2)                        ; A
32    (LOAD&CDR&STORE 3)
34    (LOAD&JMPIF 3 L14)
37    L37
37    (GETVALUE 2)                        ; A
39    (UNBIND1)
40    (SKIP 2)
42    (UNBIND1)
43    (SKIP&RET 3)


Disassembly of function #:|(DEFUN GET-SERIES (FUNC TRUNC VAR ...) ...)-69|
(CONST 0) = GET-SERIES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GET-SERIES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GET-SERIES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GET-SERIES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GET-SERIES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GET-SERIES
8     (SKIP&RET 1)


Disassembly of function GET-SERIES
(CONST 0) = VAR
(CONST 1) = E
(CONST 2) = C
(CONST 3) = EQUO
(CONST 4) = (1 . 1)
(CONST 5) = GETEXP-FUN
(CONST 6) = PSMONSUBST
(CONST 7) = $FLOAT
(CONST 8) = $KEEPFLOAT
(CONST 9) = PSFLOAT
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($KEEPFLOAT $FLOAT VAR C E)
writes special variable : (E)
47 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; VAR
3     (LOAD 5)
4     (BIND 1)                            ; E
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (LOAD&PUSH 13)
10    (GETVALUE&PUSH 1)                   ; E
12    (CALL2&PUSH 3)                      ; EQUO
14    (GETVALUE&PUSH 1)                   ; E
16    (CONST&PUSH 4)                      ; (1 . 1)
17    (CALLS2&JMPIFNOT 2 L26)             ; EQUAL
20    (GETVALUE&PUSH 2)                   ; C
22    (CONST&PUSH 4)                      ; (1 . 1)
23    (CALLS2&JMPIF 2 L59)                ; EQUAL
26    L26
26    (LOAD&PUSH 15)
27    (GETVALUE&PUSH 0)                   ; VAR
29    (LOAD&PUSH 2)
30    (CALL&PUSH 3 5)                     ; GETEXP-FUN
33    (LOAD&PUSH 15)
34    (GETVALUE&PUSH 1)                   ; E
36    (GETVALUE&PUSH 2)                   ; C
38    (CALL 4 6)                          ; PSMONSUBST
41    L41
41    (SETVALUE 1)                        ; E
43    (GETVALUE 7)                        ; $FLOAT
45    (JMPIFNOT L51)
47    (GETVALUE 8)                        ; $KEEPFLOAT
49    (JMPIF L68)
51    L51
51    (GETVALUE 1)                        ; E
53    (SKIP 1)
55    L55
55    (UNBIND 3)
57    (SKIP&RET 6)
59    L59
59    (LOAD&PUSH 15)
60    (GETVALUE&PUSH 0)                   ; VAR
62    (LOAD&PUSH 2)
63    (CALL 3 5)                          ; GETEXP-FUN
66    (JMP L41)
68    L68
68    (GETVALUE&PUSH 1)                   ; E
70    (CALL1 9)                           ; PSFLOAT
72    (SKIP 1)
74    (JMP L55)


Disassembly of function #:|(DEFUN PSMONSUBST (P TRUNC E ...) ...)-70|
(CONST 0) = PSMONSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSMONSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSMONSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSMONSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSMONSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSMONSUBST
8     (SKIP&RET 1)


Disassembly of function PSMONSUBST
(CONST 0) = P
(CONST 1) = E
(CONST 2) = C
(CONST 3) = PS
(CONST 4) = (1 . 1)
(CONST 5) = (0 . 1)
(CONST 6) = PSMONSUBST1
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C E P)
31 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; P
3     (LOAD 5)
4     (BIND 1)                            ; E
6     (LOAD 7)
7     (BIND 2)                            ; C
9     (GETVALUE 0)                        ; P
11    (CAR&PUSH)
12    (JMPIFEQTO 3 L21)                   ; PS
15    (GETVALUE 0)                        ; P
17    L17
17    (UNBIND 3)
19    (SKIP&RET 5)
21    L21
21    (GETVALUE&PUSH 0)                   ; P
23    (LOAD&PUSH 13)
24    (GETVALUE&PUSH 1)                   ; E
26    (GETVALUE&PUSH 2)                   ; C
28    (NIL&PUSH)
29    (GETVALUE 0)                        ; P
31    (CDR)
32    (CDR)
33    (CDR)
34    (CONS&PUSH)
35    (NIL&PUSH)
36    (NIL)
37    (CONS&PUSH)
38    (CONST&PUSH 4)                      ; (1 . 1)
39    (CONST&PUSH 5)                      ; (0 . 1)
40    (CALL 8 6)                          ; PSMONSUBST1
43    (JMP L17)


Disassembly of function #:|(DEFUN PSMONSUBST1 (P TRUNC E ...) ...)-71|
(CONST 0) = PSMONSUBST1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSMONSUBST1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSMONSUBST1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSMONSUBST1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSMONSUBST1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSMONSUBST1
8     (SKIP&RET 1)


Disassembly of function PSMONSUBST1
(CONST 0) = P
(CONST 1) = E
(CONST 2) = C
(CONST 3) = L
(CONST 4) = ANS
(CONST 5) = A
(CONST 6) = $MAXTAYORDER
(CONST 7) = E*
(CONST 8) = E>
(CONST 9) = EDIFF
(CONST 10) = PSEXPT
(CONST 11) = PSTIMES
(CONST 12) = PSCHECK
8 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (E A L C P ANS)
writes special variables : (L A)
95 byte-code instructions:
0     (LOAD 8)
1     (BIND 0)                            ; P
3     (LOAD 9)
4     (BIND 1)                            ; E
6     (LOAD 11)
7     (BIND 2)                            ; C
9     (LOAD 13)
10    (BIND 3)                            ; L
12    (LOAD 15)
14    (BIND 4)                            ; ANS
16    (NIL)
17    (BIND 5)                            ; A
19    (PUSH-NIL 2)
21    (NIL)
22    (BIND 6)                            ; $MAXTAYORDER
24    (GETVALUE 4)                        ; ANS
26    (SETVALUE 5)                        ; A
28    (GETVALUE 0)                        ; P
30    (CDR)
31    (CAR)
32    (STORE 3)
33    (JMP L109)
36    L36
36    (LOAD&PUSH 0)
37    (CALLS2 145)                        ; ZEROP
39    (SKIP 1)
41    (JMPIFNOT L75)
43    (JMP L98)
45    L45
45    (LOAD&PUSH 25)
47    (GETVALUE&PUSH 2)                   ; C
49    (GETVALUE 3)                        ; L
51    (CDR)
52    (SETVALUE 3)                        ; L
54    (CAR)
55    (CAR&PUSH)
56    (LOAD&PUSH 27)
58    (CALL2&PUSH 9)                      ; EDIFF
60    (CALL2&PUSH 10)                     ; PSEXPT
62    (CALL2 11)                          ; PSTIMES
64    (STORE 25)
66    (CAR&PUSH)
67    (LOAD&PUSH 0)
68    (CALLS2&JMPIF 8 L36)                ; NUMBERP
71    (SKIP 1)
73    (JMPIF L98)
75    L75
75    (GETVALUE 5)                        ; A
77    (CDR)
78    (JMPIF L98)
80    (GETVALUE&PUSH 5)                   ; A
82    (LOAD&PUSH 5)
83    (LOAD&PUSH 27)
85    (GETVALUE 3)                        ; L
87    (CAR)
88    (CDR&PUSH)
89    (CALL2 11)                          ; PSTIMES
91    (CONS&PUSH)
92    (GETVALUE 5)                        ; A
94    (CDR)
95    (CONS&PUSH)
96    (CALLS1 170)                        ; RPLACD
98    L98
98    (GETVALUE 5)                        ; A
100   (CDR)
101   (SETVALUE 5)                        ; A
103   (GETVALUE 3)                        ; L
105   (CAR)
106   (CAR)
107   (STORE 24)
109   L109
109   (GETVALUE 3)                        ; L
111   (CDR)
112   (JMPIFNOT L131)
114   (GETVALUE&PUSH 1)                   ; E
116   (GETVALUE 3)                        ; L
118   (CDR)
119   (CAR)
120   (CAR&PUSH)
121   (CALL2 7)                           ; E*
123   (STORE 4)
124   (PUSH)
125   (LOAD&PUSH 31)
127   (CALL2&JMPIFNOT 8 L45)              ; E>
131   L131
131   (LOAD&PUSH 3)
132   (LOAD&PUSH 31)
134   (LIST&PUSH 1)
136   (GETVALUE 4)                        ; ANS
138   (CDR&PUSH)
139   (CALL 3 12)                         ; PSCHECK
142   (UNBIND1)
143   (SKIP 2)
145   (UNBIND 6)
147   (SKIP&RET 9)


Disassembly of function #:|(DEFUN PSEXPON-GCD (TERMS) ...)-72|
(CONST 0) = PSEXPON-GCD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSEXPON-GCD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSEXPON-GCD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSEXPON-GCD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSEXPON-GCD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSEXPON-GCD
8     (SKIP&RET 1)


Disassembly of function PSEXPON-GCD
(CONST 0) = L
(CONST 1) = GCD
(CONST 2) = EGCD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GCD L)
writes special variables : (GCD L)
27 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (LOAD 2)
4     (CDR)
5     (BIND 0)                            ; L
7     (LOAD 3)
8     (BIND 1)                            ; GCD
10    (GETVALUE 0)                        ; L
12    (JMPIFNOT L34)
14    L14
14    (GETVALUE 0)                        ; L
16    (CAR)
17    (CAR&PUSH)
18    (GETVALUE&PUSH 1)                   ; GCD
20    (CALL2&PUSH 2)                      ; EGCD
22    (GETVALUE 0)                        ; L
24    (CDR)
25    (SETVALUE 0)                        ; L
27    (POP)
28    (SETVALUE 1)                        ; GCD
30    (GETVALUE 0)                        ; L
32    (JMPIF L14)
34    L34
34    (GETVALUE 1)                        ; GCD
36    (UNBIND 2)
38    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSFIND-S (P) ...)-73|
(CONST 0) = PSFIND-S
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSFIND-S>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSFIND-S
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSFIND-S
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSFIND-S>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSFIND-S
8     (SKIP&RET 1)


Disassembly of function PSFIND-S
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = (0 . 1)
(CONST 3) = PSTERM
(CONST 4) = PSFIND-S1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
20 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L16)                   ; PS
9     (GETVALUE&PUSH 0)                   ; P
11    (CALL1 4)                           ; PSFIND-S1
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (GETVALUE 0)                        ; P
18    (CDR)
19    (CDR)
20    (CDR&PUSH)
21    (CONST&PUSH 2)                      ; (0 . 1)
22    (CALL2&PUSH 3)                      ; PSTERM
24    (JSR L0)
26    (JMP L13)


Disassembly of function #:|(DEFUN PSFIND-S1 (R) ...)-74|
(CONST 0) = PSFIND-S1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSFIND-S1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSFIND-S1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSFIND-S1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSFIND-S1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSFIND-S1
8     (SKIP&RET 1)


Disassembly of function PSFIND-S1
(CONST 0) = R
(CONST 1) = (0 . 1)
(CONST 2) = 0
(CONST 3) = PTERM
(CONST 4) = P
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P R)
writes special variable : (P)
38 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; R
3     (GETVALUE 0)                        ; R
5     (CDR)
6     (JMPIFCONSP L24)
8     (GETVALUE 0)                        ; R
10    (CAR)
11    (JMPIFATOM L27)
13    (GETVALUE 0)                        ; R
15    (CAR)
16    (CDR&PUSH)
17    (CONST&PUSH 2)                      ; 0
18    (CALL2 3)                           ; PTERM
20    (BIND 4)                            ; P
22    (JMP L39)
24    L24
24    (CONST 1)                           ; (0 . 1)
25    (JMP L50)
27    L27
27    (GETVALUE 0)                        ; R
29    (JMP L50)
31    L31
31    (GETVALUE 4)                        ; P
33    (CDR&PUSH)
34    (CONST&PUSH 2)                      ; 0
35    (CALL2 3)                           ; PTERM
37    (SETVALUE 4)                        ; P
39    L39
39    (GETVALUE 4)                        ; P
41    (JMPIFCONSP L31)
43    (GETVALUE&PUSH 4)                   ; P
45    (GETVALUE 0)                        ; R
47    (CDR)
48    (CONS)
49    (UNBIND1)
50    L50
50    (UNBIND1)
51    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSEXPT (P N) ...)-75|
(CONST 0) = PSEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSEXPT
8     (SKIP&RET 1)


Disassembly of function PSEXPT
(CONST 0) = P
(CONST 1) = N
(CONST 2) = "~&Indeterminate form 0^0 generated inside PSEXPT~%"
(CONST 3) = MERROR
(CONST 4) = (1 . 1)
(CONST 5) = (1.0 . 1.0)
(CONST 6) = PS
(CONST 7) = RCEXPT
(CONST 8) = PSFIND-S
(CONST 9) = L
(CONST 10) = S
(CONST 11) = X
(CONST 12) = Y
(CONST 13) = MAXIMA-RATIONALIZE
(CONST 14) = PSDIFF
(CONST 15) = E*
(CONST 16) = $MAXTAYORDER
(CONST 17) = KEY-VARS
(CONST 18) = ASSQ
(CONST 19) = TLIST
(CONST 20) = ZL-ASSOC
(CONST 21) = E>
(CONST 22) = (0 . 1)
(CONST 23) = EDIFF
(CONST 24) = E+
(CONST 25) = PSCHECK
(CONST 26) = IVARS
(CONST 27) = CDISREP
(CONST 28) = POWER*
(CONST 29) = PREP1
(CONST 30) = PSTIMES
(CONST 31) = ANS
(CONST 32) = PSEXPON-GCD
(CONST 33) = (-1 . 1)
(CONST 34) = 1
(CONST 35) = INFIN-ORD-ERR
(CONST 36) = E1-
(CONST 37) = 0
(CONST 38) = EMIN
(CONST 39) = PSEXPT1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (IVARS TLIST KEY-VARS $MAXTAYORDER ANS Y X S L P N)
writes special variables : (X ANS S L)
448 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE 1)                        ; N
8     (CAR&PUSH)
9     (LOAD&PUSH 0)
10    (CALLS2&JMPIF 8 L368)               ; NUMBERP
14    (SKIP 1)
16    (JMPIF L376)
19    L19
19    (GETVALUE&PUSH 1)                   ; N
21    (CONST&PUSH 4)                      ; (1 . 1)
22    (CALLS2&JMPIF 2 L390)               ; EQUAL
26    (GETVALUE&PUSH 1)                   ; N
28    (CONST&PUSH 5)                      ; (1.0 . 1.0)
29    (CALLS2&JMPIF 2 L390)               ; EQUAL
33    (GETVALUE 0)                        ; P
35    (CAR&PUSH)
36    (JMPIFNOTEQTO 6 L394)               ; PS
40    (GETVALUE 0)                        ; P
42    (CDR)
43    (CDR)
44    (CDR)
45    (CDR)
46    (JMPIFNOT L439)
49    (NIL)
50    (BIND 9)                            ; L
52    (PUSH-NIL 4)
54    (NIL)
55    (BIND 10)                           ; S
57    (PUSH-NIL 4)
59    (NIL)
60    (BIND 31)                           ; ANS
62    (GETVALUE 0)                        ; P
64    (CDR)
65    (CDR)
66    (CDR)
67    (SETVALUE 9)                        ; L
69    (CAR)
70    (CDR)
71    (STORE 13)
73    (GETVALUE 9)                        ; L
75    (CAR)
76    (CAR)
77    (STORE 12)
79    (GETVALUE 9)                        ; L
81    (CAR)
82    (STORE 6)
83    (GETVALUE 0)                        ; P
85    (CDR)
86    (CDR)
87    (CAR)
88    (CAR)
89    (STORE 10)
91    (GETVALUE&PUSH 9)                   ; L
93    (CALL1 32)                          ; PSEXPON-GCD
95    (STORE 11)
97    (GETVALUE&PUSH 1)                   ; N
99    (CALL1 8)                           ; PSFIND-S
101   (SETVALUE 10)                       ; S
103   (CAR&PUSH)
104   (CALLS2&JMPIFNOT 15 L143)           ; FLOATP
107   (GETVALUE 10)                       ; S
109   (CAR&PUSH)
110   (GETVALUE 10)                       ; S
112   (CDR)
113   (BIND 12)                           ; Y
115   (LOAD 3)
116   (BIND 11)                           ; X
118   (GETVALUE&PUSH 11)                  ; X
120   (CALLS2&JMPIFNOT 12 L129)           ; INTEGERP
123   (GETVALUE&PUSH 12)                  ; Y
125   (CALLS2&JMPIF 12 L649)              ; INTEGERP
129   L129
129   (GETVALUE&PUSH 11)                  ; X
131   (GETVALUE&PUSH 12)                  ; Y
133   (CALLSR 1 56)                       ; /
136   L136
136   (UNBIND 2)
138   (STORE 0)
139   (CALL1 13)                          ; MAXIMA-RATIONALIZE
141   (SETVALUE 10)                       ; S
143   L143
143   (GETVALUE 0)                        ; P
145   (CDR)
146   (CAR&PUSH)
147   (LOAD&PUSH 11)
148   (LIST&PUSH 1)
150   (LOAD&PUSH 8)
151   (LIST&PUSH 1)
153   (CALL 3 25)                         ; PSCHECK
156   (STORE 6)
157   (PUSH)
158   (GETVALUE&PUSH 1)                   ; N
160   (JSR L0)
163   (SETVALUE 31)                       ; ANS
165   (LOAD&PUSH 13)
166   (CONST&PUSH 33)                     ; (-1 . 1)
168   (JSR L0)
171   (STORE 3)
172   (LOAD&PUSH 11)
173   (GETVALUE&PUSH 10)                  ; S
175   (LOAD&PUSH 14)
176   (CALL2&PUSH 15)                     ; E*
178   (CALL2 24)                          ; E+
180   (STORE 5)
181   (LOAD&JMPIF 10 L191)
184   (GETVALUE&PUSH 10)                  ; S
186   (CONST&PUSH 22)                     ; (0 . 1)
187   (CALL2&JMPIFNOT 21 L658)            ; E>
191   L191
191   (LOAD&JMPIF 10 L208)
194   (GETVALUE 10)                       ; S
196   (CAR&PUSH)
197   (CALLS2&JMPIFNOT 12 L683)           ; INTEGERP
201   (GETVALUE 10)                       ; S
203   (CDR&PUSH)
204   (JMPIFNOTEQTO 34 L683)              ; 1
208   L208
208   (LOAD 10)
209   L209
209   (PUSH)
210   (GETVALUE&PUSH 10)                  ; S
212   (CALL1&PUSH 36)                     ; E1-
214   (LOAD&PUSH 14)
215   (CALL2&PUSH 15)                     ; E*
217   (CALL2 24)                          ; E+
219   L219
219   (STORE 4)
220   (GETVALUE 31)                       ; ANS
222   (CAR&PUSH)
223   (JMPIFNOTEQTO 6 L707)               ; PS
227   (GETVALUE 0)                        ; P
229   (CDR)
230   (CAR)
231   (CAR&PUSH)
232   (GETVALUE 31)                       ; ANS
234   (CDR)
235   (CAR)
236   (CAR)
237   (JMPIFNOTEQ L707)
240   (CONST&PUSH 37)                     ; 0
242   (GETVALUE 31)                       ; ANS
244   (CDR)
245   (CDR)
246   (CDR)
247   (CONS)
248   L248
248   (SETVALUE 31)                       ; ANS
250   (GETVALUE 16)                       ; $MAXTAYORDER
252   (JMPIF L323)
255   (LOAD&JMPIF 4 L302)
258   (GETVALUE 10)                       ; S
260   (CAR&PUSH)
261   (CALLS2&JMPIFNOT 12 L302)           ; INTEGERP
264   (GETVALUE 10)                       ; S
266   (CDR&PUSH)
267   (JMPIFNOTEQTO 34 L302)              ; 1
270   (GETVALUE&PUSH 10)                  ; S
272   (GETVALUE&PUSH 9)                   ; L
274   (PUSH-UNBOUND 1)
276   (CALLS1 156)                        ; LAST
278   (CAR)
279   (CAR&PUSH)
280   (CALL2&PUSH 15)                     ; E*
282   (GETVALUE 0)                        ; P
284   (CDR)
285   (CAR)
286   (CAR&PUSH)
287   (GETVALUE&PUSH 17)                  ; KEY-VARS
289   (CALL2 18)                          ; ASSQ
291   (CDR&PUSH)
292   (GETVALUE&PUSH 19)                  ; TLIST
294   (CALL2 20)                          ; ZL-ASSOC
296   (CDR)
297   (CAR)
298   (CAR&PUSH)
299   (CALL2&JMPIFNOT 21 L323)            ; E>
302   L302
302   (LOAD&PUSH 4)
303   (GETVALUE 0)                        ; P
305   (CDR)
306   (CAR)
307   (CAR&PUSH)
308   (GETVALUE&PUSH 17)                  ; KEY-VARS
310   (CALL2 18)                          ; ASSQ
312   (CDR&PUSH)
313   (GETVALUE&PUSH 19)                  ; TLIST
315   (CALL2 20)                          ; ZL-ASSOC
317   (CDR)
318   (CAR)
319   (CAR&PUSH)
320   (CALL2 38)                          ; EMIN
322   (STORE 4)
323   L323
323   (GETVALUE 0)                        ; P
325   (CDR)
326   (CAR&PUSH)
327   (LOAD&PUSH 5)
328   (GETVALUE&PUSH 9)                   ; L
330   (GETVALUE&PUSH 1)                   ; N
332   (GETVALUE&PUSH 10)                  ; S
334   (LOAD&PUSH 16)
335   (CONST&PUSH 34)                     ; 1
337   (LOAD&PUSH 12)
338   (GETVALUE&PUSH 31)                  ; ANS
340   (LOAD&PUSH 21)
341   (LOAD&PUSH 13)
342   (CALL 11 39)                        ; PSEXPT1
345   (UNBIND1)
346   (SKIP 4)
348   (UNBIND1)
349   (SKIP 4)
351   (UNBIND1)
352   L352
352   (UNBIND 2)
354   (SKIP&RET 3)
356   L356
356   (LOAD&PUSH 0)
357   (CALLS2 145)                        ; ZEROP
359   (SKIP 1)
361   (JMPIFNOT L387)
363   L363
363   (CONST&PUSH 2)                      ; "~&Indeterminate form 0^0 generated inside PSEXPT~%"
364   (CALL1 3)                           ; MERROR
366   (JMP L352)
368   L368
368   (LOAD&PUSH 0)
369   (CALLS2 145)                        ; ZEROP
371   (SKIP 1)
373   (JMPIFNOT L19)
376   L376
376   (GETVALUE 0)                        ; P
378   (CAR&PUSH)
379   (LOAD&PUSH 0)
380   (CALLS2&JMPIF 8 L356)               ; NUMBERP
383   (SKIP 1)
385   (JMPIF L363)
387   L387
387   (CONST 4)                           ; (1 . 1)
388   (JMP L352)
390   L390
390   (GETVALUE 0)                        ; P
392   (JMP L352)
394   L394
394   (GETVALUE&PUSH 0)                   ; P
396   (GETVALUE&PUSH 1)                   ; N
398   (CALL2 7)                           ; RCEXPT
400   (JMP L352)
402   L402
402   (GETVALUE&PUSH 11)                  ; X
404   (GETVALUE&PUSH 12)                  ; Y
406   (CALLS2 181)                        ; TRUNCATE
408   (JMP L493)
411   L411
411   (CONST 22)                          ; (0 . 1)
413   (JMP L584)
416   L416
416   (LOAD&PUSH 0)
417   (CALLS2 145)                        ; ZEROP
419   (SKIP 1)
421   (JMPIFNOT L598)
424   (JMP L434)
426   L426
426   (LOAD&PUSH 0)
427   (CALLS2 145)                        ; ZEROP
429   (SKIP 1)
431   (JMPIFNOT L611)
434   L434
434   (GETVALUE 11)                       ; X
436   (JMP L642)
439   L439
439   (GETVALUE&PUSH 1)                   ; N
441   (CALL1&PUSH 8)                      ; PSFIND-S
443   (PUSH-NIL 2)
445   (GETVALUE 0)                        ; P
447   (CDR)
448   (CDR)
449   (CDR)
450   (BIND 9)                            ; L
452   (LOAD 5)
453   (BIND 10)                           ; S
455   (LOAD 6)
456   (BIND 11)                           ; X
458   (GETVALUE 10)                       ; S
460   (CAR&PUSH)
461   (CALLS2&JMPIFNOT 15 L500)           ; FLOATP
464   (GETVALUE 10)                       ; S
466   (CAR&PUSH)
467   (GETVALUE 10)                       ; S
469   (CDR)
470   (BIND 12)                           ; Y
472   (LOAD 3)
473   (BIND 11)                           ; X
475   (GETVALUE&PUSH 11)                  ; X
477   (CALLS2&JMPIFNOT 12 L486)           ; INTEGERP
480   (GETVALUE&PUSH 12)                  ; Y
482   (CALLS2&JMPIF 12 L402)              ; INTEGERP
486   L486
486   (GETVALUE&PUSH 11)                  ; X
488   (GETVALUE&PUSH 12)                  ; Y
490   (CALLSR 1 56)                       ; /
493   L493
493   (UNBIND 2)
495   (STORE 0)
496   (CALL1 13)                          ; MAXIMA-RATIONALIZE
498   (SETVALUE 10)                       ; S
500   L500
500   (GETVALUE&PUSH 1)                   ; N
502   (GETVALUE&PUSH 10)                  ; S
504   (CALL2 14)                          ; PSDIFF
506   (STORE 10)
508   (GETVALUE&PUSH 10)                  ; S
510   (GETVALUE 9)                        ; L
512   (CAR)
513   (CAR&PUSH)
514   (CALL2 15)                          ; E*
516   (SETVALUE 11)                       ; X
518   (GETVALUE 16)                       ; $MAXTAYORDER
520   (JMPIF L545)
522   (GETVALUE&PUSH 11)                  ; X
524   (GETVALUE 0)                        ; P
526   (CDR)
527   (CAR)
528   (CAR&PUSH)
529   (GETVALUE&PUSH 17)                  ; KEY-VARS
531   (CALL2 18)                          ; ASSQ
533   (CDR&PUSH)
534   (GETVALUE&PUSH 19)                  ; TLIST
536   (CALL2 20)                          ; ZL-ASSOC
538   (CDR)
539   (CAR)
540   (CAR&PUSH)
541   (CALL2&JMPIF 21 L411)               ; E>
545   L545
545   (GETVALUE 0)                        ; P
547   (CDR)
548   (CAR&PUSH)
549   (GETVALUE 0)                        ; P
551   (CDR)
552   (CDR)
553   (CAR)
554   (CAR&PUSH)
555   (GETVALUE&PUSH 11)                  ; X
557   (GETVALUE 9)                        ; L
559   (CAR)
560   (CAR&PUSH)
561   (CALL2&PUSH 23)                     ; EDIFF
563   (CALL2&PUSH 24)                     ; E+
565   (NIL)
566   (CONS&PUSH)
567   (GETVALUE&PUSH 11)                  ; X
569   (GETVALUE 9)                        ; L
571   (CAR)
572   (CDR&PUSH)
573   (GETVALUE&PUSH 1)                   ; N
575   (JSR L0)
578   (CONS&PUSH)
579   (NIL)
580   (CONS&PUSH)
581   (CALL 3 25)                         ; PSCHECK
584   L584
584   (SETVALUE 11)                       ; X
586   (LOAD&CAR&PUSH 10)
588   (LOAD&PUSH 0)
589   (CALLS2&JMPIF 8 L416)               ; NUMBERP
593   (SKIP 1)
595   (JMPIF L434)
598   L598
598   (GETVALUE 11)                       ; X
600   (CAR&PUSH)
601   (LOAD&PUSH 0)
602   (CALLS2&JMPIF 8 L426)               ; NUMBERP
606   (SKIP 1)
608   (JMPIF L434)
611   L611
611   (GETVALUE&PUSH 11)                  ; X
613   (GETVALUE 0)                        ; P
615   (CDR)
616   (CAR)
617   (CAR&PUSH)
618   (GETVALUE&PUSH 26)                  ; IVARS
620   (CALL2 18)                          ; ASSQ
622   (CDR&PUSH)
623   (LOAD&PUSH 12)
624   (CALL1&PUSH 27)                     ; CDISREP
626   (CALL2&PUSH 28)                     ; POWER*
628   (CALL1&PUSH 29)                     ; PREP1
630   (GETVALUE 0)                        ; P
632   (CDR)
633   (CDR)
634   (CDR)
635   (CAR)
636   (CAR&PUSH)
637   (JSR&PUSH L0)
640   (CALL2 30)                          ; PSTIMES
642   L642
642   (UNBIND 3)
644   (SKIP 3)
646   (JMP L352)
649   L649
649   (GETVALUE&PUSH 11)                  ; X
651   (GETVALUE&PUSH 12)                  ; Y
653   (CALLS2 181)                        ; TRUNCATE
655   (JMP L136)
658   L658
658   (GETVALUE 0)                        ; P
660   (CDR)
661   (CAR)
662   (CAR&PUSH)
663   (GETVALUE&PUSH 17)                  ; KEY-VARS
665   (CALL2 18)                          ; ASSQ
667   (CDR&PUSH)
668   (GETVALUE&PUSH 19)                  ; TLIST
670   (CALL2 20)                          ; ZL-ASSOC
672   (CDR)
673   (CAR)
674   (CAR)
675   (JMP L219)
678   L678
678   (CALL0 35)                          ; INFIN-ORD-ERR
680   (JMP L209)
683   L683
683   (GETVALUE 0)                        ; P
685   (CDR)
686   (CAR)
687   (CAR&PUSH)
688   (GETVALUE&PUSH 17)                  ; KEY-VARS
690   (CALL2 18)                          ; ASSQ
692   (CDR&PUSH)
693   (GETVALUE&PUSH 19)                  ; TLIST
695   (CALL2 20)                          ; ZL-ASSOC
697   (CDR)
698   (CAR)
699   (CAR)
700   (STORE 4)
701   (JMPIFNOT L678)
703   (LOAD 4)
704   (JMP L209)
707   L707
707   (CONST&PUSH 37)                     ; 0
709   (CONST&PUSH 22)                     ; (0 . 1)
710   (GETVALUE 31)                       ; ANS
712   (CONS&PUSH)
713   (LIST 2)
715   (JMP L248)


Disassembly of function #:|(DEFUN PSEXPT1 (VARH TRUNC L ...) ...)-76|
(CONST 0) = PSEXPT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSEXPT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSEXPT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSEXPT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSEXPT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSEXPT1
8     (SKIP&RET 1)


Disassembly of function PSEXPT1
(CONST 0) = L
(CONST 1) = N
(CONST 2) = S
(CONST 3) = M
(CONST 4) = ANS
(CONST 5) = R
(CONST 6) = A
(CONST 7) = 0
(CONST 8) = K
(CONST 9) = C
(CONST 10) = 1
(CONST 11) = E*
(CONST 12) = "Bad power series arg in PSEXPT"
(CONST 13) = MERROR
(CONST 14) = KEY-VARS
(CONST 15) = ASSQ
(CONST 16) = TLIST
(CONST 17) = ZL-ASSOC
(CONST 18) = E>
(CONST 19) = PSTIMES
(CONST 20) = (0 . 1)
(CONST 21) = EDIFF
(CONST 22) = PSTERM
(CONST 23) = E+
(CONST 24) = PSTRIM-TERMS
(CONST 25) = PSDIFF
(CONST 26) = E=
(CONST 27) = PSPLUS
(CONST 28) = PSCHECK
11 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A C R N K M L S TLIST KEY-VARS ANS)
writes special variables : (M C K A)
188 byte-code instructions:
0     (LOAD 9)
1     (BIND 0)                            ; L
3     (LOAD 11)
4     (BIND 1)                            ; N
6     (LOAD 13)
7     (BIND 2)                            ; S
9     (LOAD 14)
10    (BIND 3)                            ; M
12    (LOAD 15)
14    (BIND 4)                            ; ANS
16    (LOAD 17)
18    (BIND 5)                            ; R
20    (NIL)
21    (BIND 6)                            ; A
23    (CONST 7)                           ; 0
24    (BIND 8)                            ; K
26    (PUSH-NIL 2)
28    (NIL)
29    (BIND 9)                            ; C
31    (PUSH-NIL 4)
33    (GETVALUE&PUSH 4)                   ; ANS
35    (PUSH-UNBOUND 1)
37    (CALLS1 156)                        ; LAST
39    (SETVALUE 6)                        ; A
41    (LOAD 43)
43    (STORE 0)
44    (JMPIFNOT L87)
46    (LOAD&JMPIF 0 L283)
50    L50
50    (LOAD&CAR&PUSH 44)
52    (GETVALUE&PUSH 14)                  ; KEY-VARS
54    (CALL2 15)                          ; ASSQ
56    (CDR&PUSH)
57    (GETVALUE&PUSH 16)                  ; TLIST
59    (CALL2 17)                          ; ZL-ASSOC
61    (CDR)
62    (CAR)
63    (CAR)
64    (STORE 0)
65    (JMP L283)
68    L68
68    (GETVALUE&PUSH 2)                   ; S
70    (GETVALUE&PUSH 0)                   ; L
72    (PUSH-UNBOUND 1)
74    (CALLS1 156)                        ; LAST
76    (CAR)
77    (CAR&PUSH)
78    (CALL2 11)                          ; E*
80    (STORE 0)
81    (LOAD&JMPIFNOT 0 L50)
84    (JMP L283)
87    L87
87    (GETVALUE 2)                        ; S
89    (CAR&PUSH)
90    (CALLS2&JMPIFNOT 12 L99)            ; INTEGERP
93    (GETVALUE 2)                        ; S
95    (CDR&PUSH)
96    (JMPIFEQTO 10 L68)                  ; 1
99    L99
99    (CONST&PUSH 12)                     ; "Bad power series arg in PSEXPT"
100   (CALL1 13)                          ; MERROR
102   (LOAD&JMPIFNOT 0 L50)
105   (JMP L283)
108   L108
108   (LOAD 39)
110   (STORE 1)
111   (GETVALUE 0)                        ; L
113   (STORE 8)
115   (CONST&PUSH 10)                     ; 1
116   (GETVALUE 3)                        ; M
118   (CONS&PUSH)
119   (LOAD&PUSH 35)
121   (CALL2 19)                          ; PSTIMES
123   (STORE 3)
124   (CONST 10)                          ; 1
125   (SETVALUE 8)                        ; K
127   (CONST 20)                          ; (0 . 1)
128   (STORE 2)
129   (JMP L207)
132   L132
132   (LOAD 9)
133   (CAR)
134   (CDR)
135   (JMP L181)
137   L137
137   (LOAD&PUSH 0)
138   (CALLS2 145)                        ; ZEROP
140   (SKIP 1)
142   (JMPIFNOT L249)
145   (JMP L269)
148   L148
148   (STORE 8)
150   (GETVALUE&PUSH 8)                   ; K
152   (CONST 10)                          ; 1
153   (CONS&PUSH)
154   (GETVALUE&PUSH 1)                   ; N
156   (CALL2&PUSH 19)                     ; PSTIMES
158   (GETVALUE&PUSH 3)                   ; M
160   (GETVALUE&PUSH 8)                   ; K
162   (CALLSR&PUSH 1 54)                  ; -
165   (CONST 10)                          ; 1
166   (CONS&PUSH)
167   (CALL2&PUSH 25)                     ; PSDIFF
169   (LOAD&PUSH 2)
170   (GETVALUE&PUSH 5)                   ; R
172   (CALL2&PUSH 23)                     ; E+
174   (LOAD 10)
175   (CAR)
176   (CAR&PUSH)
177   (CALL2&JMPIF 26 L132)               ; E=
180   (CONST 20)                          ; (0 . 1)
181   L181
181   (PUSH)
182   (LOAD&PUSH 9)
183   (CALL2&PUSH 19)                     ; PSTIMES
185   (CALL2 19)                          ; PSTIMES
187   (SETVALUE 9)                        ; C
189   (LOAD&PUSH 2)
190   (GETVALUE&PUSH 9)                   ; C
192   (CALL2 27)                          ; PSPLUS
194   (STORE 2)
195   (GETVALUE&PUSH 8)                   ; K
197   (CALLS2 150)                        ; 1+
199   (SETVALUE 8)                        ; K
201   (LOAD&PUSH 1)
202   (LOAD&PUSH 40)
204   (CALL2 23)                          ; E+
206   (STORE 1)
207   L207
207   (GETVALUE&PUSH 8)                   ; K
209   (GETVALUE&PUSH 3)                   ; M
211   (CALLSR&JMPIF 1 48 L238)            ; >
215   (GETVALUE 4)                        ; ANS
217   (CDR&PUSH)
218   (LOAD&PUSH 38)
220   (LOAD&PUSH 3)
221   (CALL2&PUSH 21)                     ; EDIFF
223   (CALL2 22)                          ; PSTERM
225   (STORE 7)
226   (JMPIFNOT L238)
228   (LOAD&PUSH 8)
229   (LOAD&PUSH 2)
230   (GETVALUE&PUSH 5)                   ; R
232   (CALL2&PUSH 23)                     ; E+
234   (CALL2&JMPIF 24 L148)               ; PSTRIM-TERMS
238   L238
238   (LOAD&CAR&PUSH 2)
240   (LOAD&PUSH 0)
241   (CALLS2&JMPIF 8 L137)               ; NUMBERP
245   (SKIP 1)
247   (JMPIF L269)
249   L249
249   (GETVALUE&PUSH 6)                   ; A
251   (LOAD&PUSH 38)
253   (LOAD&PUSH 5)
254   (LOAD&PUSH 5)
255   (CALL2 19)                          ; PSTIMES
257   (CONS&PUSH)
258   (GETVALUE 6)                        ; A
260   (CDR)
261   (CONS&PUSH)
262   (CALLS1 170)                        ; RPLACD
264   (GETVALUE 6)                        ; A
266   (CDR)
267   (SETVALUE 6)                        ; A
269   L269
269   (GETVALUE&PUSH 3)                   ; M
271   (CALLS2 150)                        ; 1+
273   (SETVALUE 3)                        ; M
275   (LOAD&PUSH 37)
277   (LOAD&PUSH 40)
279   (CALL2 23)                          ; E+
281   (STORE 37)
283   L283
283   (LOAD&PUSH 37)
285   (LOAD&PUSH 1)
286   (CALL2&JMPIFNOT 18 L108)            ; E>
290   (LOAD&PUSH 44)
292   (LOAD&PUSH 44)
294   (LIST&PUSH 1)
296   (GETVALUE 4)                        ; ANS
298   (CDR&PUSH)
299   (CALL 3 28)                         ; PSCHECK
302   (SKIP 4)
304   (UNBIND1)
305   (SKIP 2)
307   (UNBIND 8)
309   (SKIP&RET 12)


Disassembly of function #:|(DEFUN PSDERIVATIVE (P V) ...)-77|
(CONST 0) = PSDERIVATIVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDERIVATIVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDERIVATIVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDERIVATIVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDERIVATIVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDERIVATIVE
8     (SKIP&RET 1)


Disassembly of function PSDERIVATIVE
(CONST 0) = P
(CONST 1) = V
(CONST 2) = PS
(CONST 3) = RATDERIVATIVE
(CONST 4) = 0
(CONST 5) = PSDERIV1
(CONST 6) = STRIP-ZEROES
(CONST 7) = PSDERIV2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V P)
writes special variable : (P)
80 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; V
6     (GETVALUE 0)                        ; P
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 2 L50)                ; PS
12    (GETVALUE&PUSH 1)                   ; V
14    (GETVALUE 0)                        ; P
16    (CDR)
17    (CAR)
18    (CAR)
19    (JMPIFEQ L65)
21    (GETVALUE 0)                        ; P
23    (CDR)
24    (CAR&PUSH)
25    (GETVALUE 0)                        ; P
27    (CDR)
28    (CDR)
29    (CAR)
30    (CAR&PUSH)
31    (GETVALUE&PUSH 1)                   ; V
33    (CONST&PUSH 4)                      ; 0
34    (GETVALUE 0)                        ; P
36    (CDR)
37    (CDR)
38    (CDR)
39    (CONS&PUSH)
40    (CONST&PUSH 4)                      ; 0
41    (LIST&PUSH 1)
43    (CALL 5 7)                          ; PSDERIV2
46    L46
46    (UNBIND 2)
48    (SKIP&RET 3)
50    L50
50    (GETVALUE&PUSH 0)                   ; P
52    (GETVALUE&PUSH 1)                   ; V
54    (CALL2 3)                           ; RATDERIVATIVE
56    (JMP L46)
58    L58
58    (GETVALUE&PUSH 0)                   ; P
60    (T&PUSH)
61    (CALL2 6)                           ; STRIP-ZEROES
63    (JMP L46)
65    L65
65    (GETVALUE 0)                        ; P
67    (CDR)
68    (CDR)
69    (CDR)
70    (CAR)
71    (CAR)
72    (CAR&PUSH)
73    (LOAD&PUSH 0)
74    (CALLS2&JMPIFNOT 8 L80)             ; NUMBERP
77    (LOAD&PUSH 0)
78    (CALLS2 145)                        ; ZEROP
80    L80
80    (STORE 0)
81    (GETVALUE 0)                        ; P
83    (CDR)
84    (CAR&PUSH)
85    (GETVALUE 0)                        ; P
87    (CDR)
88    (CDR)
89    (CAR)
90    (CAR&PUSH)
91    (CONST&PUSH 4)                      ; 0
92    (GETVALUE 0)                        ; P
94    (CDR)
95    (CDR)
96    (CDR)
97    (CONS&PUSH)
98    (CONST&PUSH 4)                      ; 0
99    (LIST&PUSH 1)
101   (CALL 4 5)                          ; PSDERIV1
104   (SETVALUE 0)                        ; P
106   (POP)
107   (JMPIF L58)
109   (GETVALUE 0)                        ; P
111   (JMP L46)


Disassembly of function #:|(DEFUN PSDERIV1 (VARH TRUNC L ...) ...)-78|
(CONST 0) = PSDERIV1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDERIV1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDERIV1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDERIV1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDERIV1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDERIV1
8     (SKIP&RET 1)


Disassembly of function PSDERIV1
(CONST 0) = L
(CONST 1) = ANS
(CONST 2) = A
(CONST 3) = E>
(CONST 4) = E1-
(CONST 5) = PSTIMES
(CONST 6) = PSCHECK
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A L ANS)
writes special variables : (A L)
67 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; ANS
6     (GETVALUE&PUSH 1)                   ; ANS
8     (PUSH-UNBOUND 1)
10    (CALLS1 156)                        ; LAST
12    (BIND 2)                            ; A
14    (JMP L71)
16    L16
16    (LOAD&PUSH 0)
17    (CALLS2 145)                        ; ZEROP
19    (SKIP 1)
21    (JMPIFNOT L41)
23    (JMP L71)
25    L25
25    (GETVALUE 0)                        ; L
27    (CDR)
28    (SETVALUE 0)                        ; L
30    (CAR)
31    (CAR)
32    (CAR&PUSH)
33    (LOAD&PUSH 0)
34    (CALLS2&JMPIF 8 L16)                ; NUMBERP
37    (SKIP 1)
39    (JMPIF L71)
41    L41
41    (GETVALUE&PUSH 2)                   ; A
43    (GETVALUE 0)                        ; L
45    (CAR)
46    (CAR&PUSH)
47    (CALL1&PUSH 4)                      ; E1-
49    (GETVALUE 0)                        ; L
51    (CAR)
52    (CAR&PUSH)
53    (GETVALUE 0)                        ; L
55    (CAR)
56    (CDR&PUSH)
57    (CALL2 5)                           ; PSTIMES
59    (CONS&PUSH)
60    (GETVALUE 2)                        ; A
62    (CDR)
63    (CONS&PUSH)
64    (CALLS1 170)                        ; RPLACD
66    (GETVALUE 2)                        ; A
68    (CDR)
69    (SETVALUE 2)                        ; A
71    L71
71    (GETVALUE 0)                        ; L
73    (CDR)
74    (JMPIFNOT L85)
76    (GETVALUE 0)                        ; L
78    (CDR)
79    (CAR)
80    (CAR&PUSH)
81    (LOAD&PUSH 13)
82    (CALL2&JMPIFNOT 3 L25)              ; E>
85    L85
85    (LOAD&PUSH 13)
86    (LOAD&PUSH 13)
87    (CALL1&PUSH 4)                      ; E1-
89    (LIST&PUSH 1)
91    (GETVALUE 1)                        ; ANS
93    (CDR&PUSH)
94    (CALL 3 6)                          ; PSCHECK
97    (UNBIND 3)
99    (SKIP&RET 5)


Disassembly of function #:|(DEFUN PSDERIV2 (VARH TRUNC V ...) ...)-79|
(CONST 0) = PSDERIV2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDERIV2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDERIV2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDERIV2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDERIV2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDERIV2
8     (SKIP&RET 1)


Disassembly of function PSDERIV2
(CONST 0) = V
(CONST 1) = L
(CONST 2) = ANS
(CONST 3) = A
(CONST 4) = C
(CONST 5) = E>
(CONST 6) = PSDERIVATIVE
(CONST 7) = PSCHECK
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C A V L ANS)
writes special variables : (A C L)
67 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; V
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; ANS
9     (GETVALUE&PUSH 2)                   ; ANS
11    (PUSH-UNBOUND 1)
13    (CALLS1 156)                        ; LAST
15    (BIND 3)                            ; A
17    (NIL)
18    (BIND 4)                            ; C
20    (JMP L73)
22    L22
22    (LOAD&PUSH 0)
23    (CALLS2 145)                        ; ZEROP
25    (SKIP 1)
27    (JMPIFNOT L53)
29    (JMP L68)
31    L31
31    (GETVALUE 1)                        ; L
33    (CDR)
34    (SETVALUE 1)                        ; L
36    (CAR)
37    (CDR&PUSH)
38    (GETVALUE&PUSH 0)                   ; V
40    (CALL2 6)                           ; PSDERIVATIVE
42    (SETVALUE 4)                        ; C
44    (CAR&PUSH)
45    (LOAD&PUSH 0)
46    (CALLS2&JMPIF 8 L22)                ; NUMBERP
49    (SKIP 1)
51    (JMPIF L68)
53    L53
53    (GETVALUE&PUSH 3)                   ; A
55    (GETVALUE 1)                        ; L
57    (CAR)
58    (CAR&PUSH)
59    (GETVALUE 4)                        ; C
61    (CONS&PUSH)
62    (GETVALUE 3)                        ; A
64    (CDR)
65    (CONS&PUSH)
66    (CALLS1 170)                        ; RPLACD
68    L68
68    (GETVALUE 3)                        ; A
70    (CDR)
71    (SETVALUE 3)                        ; A
73    L73
73    (GETVALUE 1)                        ; L
75    (CDR)
76    (JMPIFNOT L87)
78    (GETVALUE 1)                        ; L
80    (CDR)
81    (CAR)
82    (CAR&PUSH)
83    (LOAD&PUSH 20)
84    (CALL2&JMPIFNOT 5 L31)              ; E>
87    L87
87    (LOAD&PUSH 20)
88    (LOAD&PUSH 20)
89    (LIST&PUSH 1)
91    (GETVALUE 2)                        ; ANS
93    (CDR&PUSH)
94    (CALL 3 7)                          ; PSCHECK
97    (UNBIND 5)
99    (SKIP&RET 6)


Disassembly of function #:|(DEFUN PSDP (P) ...)-80|
(CONST 0) = PSDP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDP
8     (SKIP&RET 1)


Disassembly of function PSDP
(CONST 0) = P
(CONST 1) = TEMP
(CONST 2) = PS
(CONST 3) = RATDX1
(CONST 4) = DIFF
(CONST 5) = MULTI
(CONST 6) = 0
(CONST 7) = PSDP2
(CONST 8) = (1 . 1)
(CONST 9) = PSTIMES
(CONST 10) = PSDP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEMP P)
writes special variable : (TEMP)
102 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; TEMP
6     (NIL&PUSH)
7     (GETVALUE 0)                        ; P
9     (CAR&PUSH)
10    (JMPIFNOTEQTO 2 L74)                ; PS
13    (GETVALUE 0)                        ; P
15    (CDR)
16    (CAR)
17    (CAR&PUSH)
18    (CONST&PUSH 4)                      ; DIFF
19    (PUSH-UNBOUND 1)
21    (CALLS2 132)                        ; GET
23    (SETVALUE 1)                        ; TEMP
25    (CAR&PUSH)
26    (LOAD&PUSH 0)
27    (CALLS2&JMPIF 8 L107)               ; NUMBERP
31    (SKIP 1)
33    (JMPIF L115)
36    L36
36    (GETVALUE 1)                        ; TEMP
38    (CAR&PUSH)
39    (JMPIFEQTO 5 L115)                  ; MULTI
43    (GETVALUE 0)                        ; P
45    (CDR)
46    (CAR&PUSH)
47    (GETVALUE 0)                        ; P
49    (CDR)
50    (CDR)
51    (CAR)
52    (CAR&PUSH)
53    (CONST&PUSH 6)                      ; 0
54    (GETVALUE 0)                        ; P
56    (CDR)
57    (CDR)
58    (CDR)
59    (CONS&PUSH)
60    (CONST&PUSH 6)                      ; 0
61    (LIST&PUSH 1)
63    (GETVALUE&PUSH 1)                   ; TEMP
65    (CALL 5 10)                         ; PSDP1
68    L68
68    (SKIP 1)
70    (UNBIND 2)
72    (SKIP&RET 2)
74    L74
74    (GETVALUE 0)                        ; P
76    (CAR&PUSH)
77    (GETVALUE 0)                        ; P
79    (CDR&PUSH)
80    (CALL2 3)                           ; RATDX1
82    (JMP L68)
84    L84
84    (LOAD&PUSH 0)
85    (CONST&PUSH 2)                      ; PS
86    (GETVALUE 0)                        ; P
88    (CDR)
89    (CAR&PUSH)
90    (NIL&PUSH)
91    (NIL)
92    (CONS&PUSH)
93    (GETVALUE 1)                        ; TEMP
95    (CDR&PUSH)
96    (CONST 8)                           ; (1 . 1)
97    (CONS&PUSH)
98    (LIST 1)
100   (CONS)
101   (CONS)
102   (CONS&PUSH)
103   (CALL2 9)                           ; PSTIMES
105   (JMP L68)
107   L107
107   (LOAD&PUSH 0)
108   (CALLS2 145)                        ; ZEROP
110   (SKIP 1)
112   (JMPIFNOT L36)
115   L115
115   (GETVALUE 0)                        ; P
117   (CDR)
118   (CAR&PUSH)
119   (GETVALUE 0)                        ; P
121   (CDR)
122   (CDR)
123   (CAR)
124   (CAR&PUSH)
125   (CONST&PUSH 6)                      ; 0
126   (GETVALUE 0)                        ; P
128   (CDR)
129   (CDR)
130   (CDR)
131   (CONS&PUSH)
132   (CONST&PUSH 6)                      ; 0
133   (LIST&PUSH 1)
135   (CALL 4 7)                          ; PSDP2
138   (STORE 0)
139   (GETVALUE 1)                        ; TEMP
141   (CAR&PUSH)
142   (JMPIFEQTO 5 L84)                   ; MULTI
145   (LOAD 0)
146   (JMP L68)


Disassembly of function #:|(DEFUN PSDP1 (VARH TRUNC L ...) ...)-81|
(CONST 0) = PSDP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDP1
8     (SKIP&RET 1)


Disassembly of function PSDP1
(CONST 0) = L
(CONST 1) = ANS
(CONST 2) = A
(CONST 3) = (0 . 1)
(CONST 4) = C
(CONST 5) = E>
(CONST 6) = PSDP
(CONST 7) = E1-
(CONST 8) = PSTIMES
(CONST 9) = PSCHECK
(CONST 10) = PSPLUS
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C A L ANS)
writes special variables : (A L C)
79 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; ANS
6     (GETVALUE&PUSH 1)                   ; ANS
8     (PUSH-UNBOUND 1)
10    (CALLS1 156)                        ; LAST
12    (BIND 2)                            ; A
14    (CONST 3)                           ; (0 . 1)
15    (BIND 4)                            ; C
17    (JMP L86)
20    L20
20    (LOAD&PUSH 0)
21    (CALLS2 145)                        ; ZEROP
23    (SKIP 1)
25    (JMPIFNOT L53)
27    L27
27    (GETVALUE 0)                        ; L
29    (CAR)
30    (CDR&PUSH)
31    (CALL1 6)                           ; PSDP
33    (SETVALUE 4)                        ; C
35    (JMP L86)
37    L37
37    (GETVALUE 0)                        ; L
39    (CDR)
40    (SETVALUE 0)                        ; L
42    (CAR)
43    (CAR)
44    (CAR&PUSH)
45    (LOAD&PUSH 0)
46    (CALLS2&JMPIF 8 L20)                ; NUMBERP
49    (SKIP 1)
51    (JMPIF L27)
53    L53
53    (GETVALUE&PUSH 2)                   ; A
55    (GETVALUE 0)                        ; L
57    (CAR)
58    (CAR&PUSH)
59    (CALL1&PUSH 7)                      ; E1-
61    (GETVALUE 0)                        ; L
63    (CAR)
64    (CAR&PUSH)
65    (LOAD&PUSH 16)
66    (GETVALUE 0)                        ; L
68    (CAR)
69    (CDR&PUSH)
70    (CALL2&PUSH 8)                      ; PSTIMES
72    (CALL2 8)                           ; PSTIMES
74    (CONS&PUSH)
75    (GETVALUE 2)                        ; A
77    (CDR)
78    (CONS&PUSH)
79    (CALLS1 170)                        ; RPLACD
81    (GETVALUE 2)                        ; A
83    (CDR)
84    (SETVALUE 2)                        ; A
86    L86
86    (GETVALUE 0)                        ; L
88    (CDR)
89    (JMPIFNOT L100)
91    (GETVALUE 0)                        ; L
93    (CDR)
94    (CAR)
95    (CAR&PUSH)
96    (LOAD&PUSH 17)
97    (CALL2&JMPIFNOT 5 L37)              ; E>
100   L100
100   (GETVALUE&PUSH 4)                   ; C
102   (LOAD&PUSH 18)
103   (LOAD&PUSH 18)
104   (CALL1&PUSH 7)                      ; E1-
106   (LIST&PUSH 1)
108   (GETVALUE 1)                        ; ANS
110   (CDR&PUSH)
111   (CALL&PUSH 3 9)                     ; PSCHECK
114   (CALL2 10)                          ; PSPLUS
116   (UNBIND 4)
118   (SKIP&RET 6)


Disassembly of function #:|(DEFUN PSDP2 (VARH TRUNC L ...) ...)-82|
(CONST 0) = PSDP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDP2
8     (SKIP&RET 1)


Disassembly of function PSDP2
(CONST 0) = L
(CONST 1) = ANS
(CONST 2) = A
(CONST 3) = C
(CONST 4) = E>
(CONST 5) = PSDP
(CONST 6) = PSCHECK
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C A L ANS)
writes special variables : (A C L)
63 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; ANS
6     (GETVALUE&PUSH 1)                   ; ANS
8     (PUSH-UNBOUND 1)
10    (CALLS1 156)                        ; LAST
12    (BIND 2)                            ; A
14    (NIL)
15    (BIND 3)                            ; C
17    (JMP L68)
19    L19
19    (LOAD&PUSH 0)
20    (CALLS2 145)                        ; ZEROP
22    (SKIP 1)
24    (JMPIFNOT L48)
26    (JMP L68)
28    L28
28    (GETVALUE 0)                        ; L
30    (CDR)
31    (SETVALUE 0)                        ; L
33    (CAR)
34    (CDR&PUSH)
35    (CALL1 5)                           ; PSDP
37    (SETVALUE 3)                        ; C
39    (CAR&PUSH)
40    (LOAD&PUSH 0)
41    (CALLS2&JMPIF 8 L19)                ; NUMBERP
44    (SKIP 1)
46    (JMPIF L68)
48    L48
48    (GETVALUE&PUSH 2)                   ; A
50    (GETVALUE 0)                        ; L
52    (CAR)
53    (CAR&PUSH)
54    (GETVALUE 3)                        ; C
56    (CONS&PUSH)
57    (GETVALUE 2)                        ; A
59    (CDR)
60    (CONS&PUSH)
61    (CALLS1 170)                        ; RPLACD
63    (GETVALUE 2)                        ; A
65    (CDR)
66    (SETVALUE 2)                        ; A
68    L68
68    (GETVALUE 0)                        ; L
70    (CDR)
71    (JMPIFNOT L82)
73    (GETVALUE 0)                        ; L
75    (CDR)
76    (CAR)
77    (CAR&PUSH)
78    (LOAD&PUSH 16)
79    (CALL2&JMPIFNOT 4 L28)              ; E>
82    L82
82    (LOAD&PUSH 16)
83    (LOAD&PUSH 16)
84    (LIST&PUSH 1)
86    (GETVALUE 1)                        ; ANS
88    (CDR&PUSH)
89    (CALL 3 6)                          ; PSCHECK
92    (UNBIND 4)
94    (SKIP&RET 5)


Disassembly of function #:|(DEFUN PSEXPT-LOG-ORD (P) ...)-83|
(CONST 0) = PSEXPT-LOG-ORD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSEXPT-LOG-ORD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSEXPT-LOG-ORD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSEXPT-LOG-ORD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSEXPT-LOG-ORD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSEXPT-LOG-ORD
8     (SKIP&RET 1)


Disassembly of function PSEXPT-LOG-ORD
(CONST 0) = P
(CONST 1) = $MAXTAYORDER
(CONST 2) = KEY-VARS
(CONST 3) = ASSQ
(CONST 4) = TLIST
(CONST 5) = ZL-ASSOC
(CONST 6) = EMIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST KEY-VARS P $MAXTAYORDER)
50 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 1)                        ; $MAXTAYORDER
5     (JMPIFNOT L24)
7     (GETVALUE 0)                        ; P
9     (CDR)
10    (CDR)
11    (CAR)
12    (CAR)
13    (JMPIFNOT L51)
15    (GETVALUE 0)                        ; P
17    (CDR)
18    L18
18    (CDR)
19    (CAR)
20    (CAR)
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)
24    L24
24    (GETVALUE 0)                        ; P
26    (CDR)
27    (CDR)
28    (CAR)
29    (CAR&PUSH)
30    (GETVALUE 0)                        ; P
32    (CDR)
33    (CAR)
34    (CAR&PUSH)
35    (GETVALUE&PUSH 2)                   ; KEY-VARS
37    (CALL2 3)                           ; ASSQ
39    (CDR&PUSH)
40    (GETVALUE&PUSH 4)                   ; TLIST
42    (CALL2 5)                           ; ZL-ASSOC
44    (CDR)
45    (CAR)
46    (CAR&PUSH)
47    (CALL2 6)                           ; EMIN
49    (JMP L21)
51    L51
51    (GETVALUE 0)                        ; P
53    (CDR)
54    (CAR)
55    (CAR&PUSH)
56    (GETVALUE&PUSH 2)                   ; KEY-VARS
58    (CALL2 3)                           ; ASSQ
60    (CDR&PUSH)
61    (GETVALUE&PUSH 4)                   ; TLIST
63    (CALL2 5)                           ; ZL-ASSOC
65    (JMP L18)


Disassembly of function #:|(DEFUN PS-INFP (P) ...)-84|
(CONST 0) = PS-INFP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PS-INFP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PS-INFP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PS-INFP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PS-INFP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PS-INFP
8     (SKIP&RET 1)


Disassembly of function PS-INFP
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = GET-
(CONST 3) = "..."
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L15)                ; PS
9     (CALL0 2)                           ; GET-
11    (CONST 3)                           ; "..."
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (NIL)
16    (JMP L12)


Disassembly of function #:|(DEFUN PSEXPT-FN (P) ...)-85|
(CONST 0) = PSEXPT-FN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSEXPT-FN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSEXPT-FN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSEXPT-FN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSEXPT-FN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSEXPT-FN
8     (SKIP&RET 1)


Disassembly of function PSEXPT-FN
(CONST 0) = P
(CONST 1) = ANS
(CONST 2) = PS
(CONST 3) = CDISREP
(CONST 4) = PSEXPT-FN2
(CONST 5) = PS-LIM-INFP
(CONST 6) = PSEXPT-FN-SING
(CONST 7) = (0 . 1)
(CONST 8) = E>
(CONST 9) = %EX
(CONST 10) = PSEXPT-LOG-ORD
(CONST 11) = GET-SERIES
(CONST 12) = PS-INVERT-VAR
(CONST 13) = PS-GT
(CONST 14) = E=
(CONST 15) = DELQ
(CONST 16) = PSCHECK
(CONST 17) = SRDIS
(CONST 18) = PSTIMES
(CONST 19) = L
(CONST 20) = INVERT-TERMS
(CONST 21) = PSEXPON-GCD
(CONST 22) = (1 . 1)
(CONST 23) = "Unreachable point in psexpt-fn"
(CONST 24) = MERROR
(CONST 25) = 0
(CONST 26) = $MAXTAYORDER
(CONST 27) = KEY-VARS
(CONST 28) = ASSQ
(CONST 29) = TLIST
(CONST 30) = ZL-ASSOC
(CONST 31) = EMIN
(CONST 32) = 1
(CONST 33) = PSEXPT-FN1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS TLIST KEY-VARS $MAXTAYORDER L P)
writes special variables : (ANS L)
272 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; ANS
6     (NIL&PUSH)
7     (GETVALUE 0)                        ; P
9     (CAR&PUSH)
10    (JMPIFNOTEQTO 2 L232)               ; PS
14    (GETVALUE&PUSH 0)                   ; P
16    (CALL1&JMPIF 5 L240)                ; PS-LIM-INFP
20    (CONST&PUSH 7)                      ; (0 . 1)
21    (GETVALUE 0)                        ; P
23    (CDR)
24    (CDR)
25    (CDR)
26    (CAR)
27    (CAR&PUSH)
28    (CALL2 8)                           ; E>
30    (STORE 0)
31    (GETVALUE 0)                        ; P
33    (CDR)
34    (CDR)
35    (CDR)
36    (CDR)
37    (JMPIFNOT L274)
40    (LOAD&JMPIF 0 L314)
44    (CONST&PUSH 7)                      ; (0 . 1)
45    (GETVALUE 0)                        ; P
47    (CDR)
48    (CDR)
49    (CDR)
50    (CAR)
51    (CAR&PUSH)
52    (CALL2&JMPIFNOT 14 L96)             ; E=
55    (GETVALUE 0)                        ; P
57    (CDR)
58    (CDR)
59    (CDR)
60    (CAR)
61    (CDR&PUSH)
62    (CALL1&PUSH 17)                     ; SRDIS
64    (CALL1&PUSH 4)                      ; PSEXPT-FN2
66    (GETVALUE 0)                        ; P
68    (CDR)
69    (CAR&PUSH)
70    (GETVALUE 0)                        ; P
72    (CDR)
73    (CDR)
74    (CAR)
75    (CAR&PUSH)
76    (LIST&PUSH 1)
78    (GETVALUE 0)                        ; P
80    (CDR)
81    (CDR)
82    (CDR)
83    (CDR&PUSH)
84    (CALL&PUSH 3 16)                    ; PSCHECK
87    (JSR L0)
90    L90
90    (PUSH)
91    (CALL2 18)                          ; PSTIMES
93    (JMPIF1 L226)
96    L96
96    (NIL)
97    (BIND 19)                           ; L
99    (PUSH-NIL 3)
101   (NIL)
102   (BIND 1)                            ; ANS
104   (GETVALUE 0)                        ; P
106   (CDR)
107   (CDR)
108   (CDR)
109   (SETVALUE 19)                       ; L
111   (LOAD&JMPIFNOT 9 L120)
114   (GETVALUE&PUSH 19)                  ; L
116   (CALL1 20)                          ; INVERT-TERMS
118   (SETVALUE 19)                       ; L
120   L120
120   (GETVALUE 0)                        ; P
122   (CDR)
123   (CDR)
124   (CAR)
125   (CAR)
126   (STORE 4)
127   (GETVALUE&PUSH 19)                  ; L
129   (CALL1 21)                          ; PSEXPON-GCD
131   (STORE 5)
132   (CONST 22)                          ; (1 . 1)
134   (STORE 3)
135   (GETVALUE 19)                       ; L
137   (CAR)
138   (CAR&PUSH)
139   (CONST&PUSH 7)                      ; (0 . 1)
140   (CALL2&JMPIF 8 L146)                ; E>
143   (CONST&PUSH 23)                     ; "Unreachable point in psexpt-fn"
144   (CALL1 24)                          ; MERROR
146   L146
146   (LOAD&CAR&PUSH 3)
148   (JMPIFNOTEQTO 2 L363)               ; PS
152   (GETVALUE 0)                        ; P
154   (CDR)
155   (CAR)
156   (CAR&PUSH)
157   (LOAD 4)
158   (CDR)
159   (CAR)
160   (CAR)
161   (JMPIFNOTEQ L363)
164   (CONST&PUSH 25)                     ; 0
165   (LOAD 4)
166   (CDR)
167   (CDR)
168   (CDR)
169   (CONS)
170   L170
170   (SETVALUE 1)                        ; ANS
172   (GETVALUE 26)                       ; $MAXTAYORDER
174   (JMPIFNOT L372)
177   (LOAD&JMPIF 4 L198)
180   L180
180   (GETVALUE 0)                        ; P
182   (CDR)
183   (CAR)
184   (CAR&PUSH)
185   (GETVALUE&PUSH 27)                  ; KEY-VARS
187   (CALL2 28)                          ; ASSQ
189   (CDR&PUSH)
190   (GETVALUE&PUSH 29)                  ; TLIST
192   (CALL2 30)                          ; ZL-ASSOC
194   (CDR)
195   (CAR)
196   (CAR)
197   (STORE 4)
198   L198
198   (GETVALUE 0)                        ; P
200   (CDR)
201   (CAR&PUSH)
202   (LOAD&PUSH 5)
203   (GETVALUE&PUSH 19)                  ; L
205   (LOAD&PUSH 8)
206   (CONST&PUSH 32)                     ; 1
208   (LOAD&PUSH 10)
209   (GETVALUE&PUSH 1)                   ; ANS
211   (CALL 7 33)                         ; PSEXPT-FN1
214   (SETVALUE 1)                        ; ANS
216   (LOAD&JMPIF 9 L400)
220   (GETVALUE 1)                        ; ANS
222   L222
222   (UNBIND1)
223   (SKIP 3)
225   (UNBIND1)
226   L226
226   (SKIP 1)
228   (UNBIND 2)
230   (SKIP&RET 2)
232   L232
232   (GETVALUE&PUSH 0)                   ; P
234   (CALL1&PUSH 3)                      ; CDISREP
236   (CALL1 4)                           ; PSEXPT-FN2
238   (JMP L226)
240   L240
240   (GETVALUE&PUSH 0)                   ; P
242   (CALL1 6)                           ; PSEXPT-FN-SING
244   (JMP L226)
246   L246
246   (GETVALUE 0)                        ; P
248   (CDR)
249   (CDR)
250   (CDR)
251   (CAR)
252   (CAR)
253   (CAR&PUSH)
254   (CALLSR&PUSH 0 54)                  ; -
257   (GETVALUE 0)                        ; P
259   (CDR)
260   (CDR)
261   (CDR)
262   (CAR)
263   (CAR)
264   (CDR)
265   (CONS)
266   (JMP L293)
268   L268
268   (GETVALUE&PUSH 1)                   ; ANS
270   (CALL1 12)                          ; PS-INVERT-VAR
272   (JMP L226)
274   L274
274   (CONST&PUSH 9)                      ; %EX
275   (GETVALUE&PUSH 0)                   ; P
277   (CALL1&PUSH 10)                     ; PSEXPT-LOG-ORD
279   (GETVALUE 0)                        ; P
281   (CDR)
282   (CAR&PUSH)
283   (LOAD&JMPIF 3 L246)
286   (GETVALUE 0)                        ; P
288   (CDR)
289   (CDR)
290   (CDR)
291   (CAR)
292   (CAR)
293   L293
293   (PUSH)
294   (GETVALUE 0)                        ; P
296   (CDR)
297   (CDR)
298   (CDR)
299   (CAR)
300   (CDR&PUSH)
301   (CALL 5 11)                         ; GET-SERIES
304   (SETVALUE 1)                        ; ANS
306   (LOAD&JMPIF 0 L268)
309   (GETVALUE 1)                        ; ANS
311   (JMP L226)
314   L314
314   (CONST&PUSH 7)                      ; (0 . 1)
315   (GETVALUE&PUSH 0)                   ; P
317   (CALL1 13)                          ; PS-GT
319   (SETVALUE 1)                        ; ANS
321   (CAR&PUSH)
322   (CALL2&JMPIFNOT 14 L96)             ; E=
326   (GETVALUE 0)                        ; P
328   (CDR)
329   (CAR&PUSH)
330   (GETVALUE 0)                        ; P
332   (CDR)
333   (CDR)
334   (CAR)
335   (CAR&PUSH)
336   (LIST&PUSH 1)
338   (GETVALUE&PUSH 1)                   ; ANS
340   (GETVALUE 0)                        ; P
342   (CDR)
343   (CDR)
344   (CDR&PUSH)
345   (CALL2&PUSH 15)                     ; DELQ
347   (CALL&PUSH 3 16)                    ; PSCHECK
350   (JSR&PUSH L0)
353   (GETVALUE 1)                        ; ANS
355   (CDR&PUSH)
356   (CALL1&PUSH 17)                     ; SRDIS
358   (CALL1 4)                           ; PSEXPT-FN2
360   (JMP L90)
363   L363
363   (CONST&PUSH 25)                     ; 0
364   (CONST&PUSH 7)                      ; (0 . 1)
365   (LOAD 5)
366   (CONS&PUSH)
367   (LIST 2)
369   (JMP L170)
372   L372
372   (LOAD&PUSH 4)
373   (GETVALUE 0)                        ; P
375   (CDR)
376   (CAR)
377   (CAR&PUSH)
378   (GETVALUE&PUSH 27)                  ; KEY-VARS
380   (CALL2 28)                          ; ASSQ
382   (CDR&PUSH)
383   (GETVALUE&PUSH 29)                  ; TLIST
385   (CALL2 30)                          ; ZL-ASSOC
387   (CDR)
388   (CAR)
389   (CAR&PUSH)
390   (CALL2 31)                          ; EMIN
392   (STORE 4)
393   (LOAD&JMPIFNOT 4 L180)
397   (JMP L198)
400   L400
400   (GETVALUE&PUSH 1)                   ; ANS
402   (CALL1 12)                          ; PS-INVERT-VAR
404   (JMP L222)


Disassembly of function #:|(DEFUN PSEXPT-FN-SING (P) ...)-86|
(CONST 0) = PSEXPT-FN-SING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSEXPT-FN-SING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSEXPT-FN-SING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSEXPT-FN-SING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSEXPT-FN-SING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSEXPT-FN-SING
8     (SKIP&RET 1)


Disassembly of function PSEXPT-FN-SING
(CONST 0) = P
(CONST 1) = GVAR-LIM
(CONST 2) = ($INF $MINF)
(CONST 3) = MEMQ
(CONST 4) = PS
(CONST 5) = C*LOGS
(CONST 6) = C
(CONST 7) = EXP-C*LOGS
(CONST 8) = SUM-C*LOGS
(CONST 9) = PSDIFF
(CONST 10) = PS-LIM-INFP
(CONST 11) = PSEXPT-FN
(CONST 12) = PSTIMES
(CONST 13) = PS-GT
(CONST 14) = EXPAND-AND-DISREP
(CONST 15) = EXP
(CONST 16) = $%E
(CONST 17) = POWER*
(CONST 18) = ADJOIN-TVAR
(CONST 19) = DELQ
(CONST 20) = PSCHECK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP C P)
writes special variables : (EXP P C)
135 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CDR)
6     (CAR)
7     (CAR&PUSH)
8     (CALL1&PUSH 1)                      ; GVAR-LIM
10    (CONST&PUSH 2)                      ; ($INF $MINF)
11    (CALL2&PUSH 3)                      ; MEMQ
13    (CONST&PUSH 4)                      ; PS
14    (GETVALUE 0)                        ; P
16    (CDR)
17    (CAR&PUSH)
18    (GETVALUE 0)                        ; P
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (GETVALUE 0)                        ; P
25    (CDR)
26    (CDR)
27    (CDR)
28    (CAR&PUSH)
29    (LIST 1)
31    (CONS)
32    (CONS)
33    (CONS&PUSH)
34    (CALL1&PUSH 5)                      ; C*LOGS
36    (NIL)
37    (BIND 6)                            ; C
39    (NIL&PUSH)
40    (LOAD&PUSH 4)
41    (CALL1 7)                           ; EXP-C*LOGS
43    (SETVALUE 6)                        ; C
45    (GETVALUE&PUSH 0)                   ; P
47    (LOAD&PUSH 5)
48    (CALL1&PUSH 8)                      ; SUM-C*LOGS
50    (CALL2 9)                           ; PSDIFF
52    (SETVALUE 0)                        ; P
54    (PUSH)
55    (CALL1&JMPIFNOT 10 L88)             ; PS-LIM-INFP
58    (LOAD&JMPIF 5 L95)
61    (GETVALUE 0)                        ; P
63    (CDR)
64    (CDR)
65    (CDR)
66    (CAR)
67    L67
67    (STORE 0)
68    (CAR)
69    (CAR&PUSH)
70    (LOAD&PUSH 0)
71    (CALLS2&JMPIF 8 L101)               ; NUMBERP
74    (SKIP 1)
76    (JMPIF L108)
78    L78
78    (LOAD&PUSH 0)
79    (GETVALUE&PUSH 0)                   ; P
81    (CALL2&PUSH 14)                     ; EXPAND-AND-DISREP
83    (NIL)
84    (BIND 15)                           ; EXP
86    (JMP L149)
88    L88
88    (GETVALUE&PUSH 6)                   ; C
90    (GETVALUE 0)                        ; P
92    (JMP L183)
95    L95
95    (GETVALUE&PUSH 0)                   ; P
97    (CALL1 13)                          ; PS-GT
99    (JMP L67)
101   L101
101   (LOAD&PUSH 0)
102   (CALLS2 145)                        ; ZEROP
104   (SKIP 1)
106   (JMPIFNOT L78)
108   L108
108   (GETVALUE&PUSH 6)                   ; C
110   (LOAD&CDR&PUSH 1)
112   (CALL1&PUSH 11)                     ; PSEXPT-FN
114   (CALL2 12)                          ; PSTIMES
116   (SETVALUE 6)                        ; C
118   (JMP L156)
120   L120
120   (LOAD&PUSH 3)
121   (GETVALUE 0)                        ; P
123   (CDR)
124   (CDR)
125   (CDR&PUSH)
126   (CALL2 19)                          ; DELQ
128   (JMP L179)
130   L130
130   (LOAD 3)
131   (CAR)
132   (SETVALUE 15)                       ; EXP
134   (GETVALUE&PUSH 6)                   ; C
136   (CONST&PUSH 16)                     ; $%E
137   (GETVALUE&PUSH 15)                  ; EXP
139   (CALL2&PUSH 17)                     ; POWER*
141   (CALL1&PUSH 18)                     ; ADJOIN-TVAR
143   (CALL2 12)                          ; PSTIMES
145   (SETVALUE 6)                        ; C
147   (LOAD&CDR&STORE 3)
149   L149
149   (LOAD&PUSH 3)
150   (CALLS1&JMPIFNOT 146 L130)          ; ENDP
153   (UNBIND1)
154   (SKIP 1)
156   L156
156   (GETVALUE&PUSH 6)                   ; C
158   (GETVALUE 0)                        ; P
160   (CDR)
161   (CAR&PUSH)
162   (GETVALUE 0)                        ; P
164   (CDR)
165   (CDR)
166   (CAR)
167   (CAR&PUSH)
168   (LIST&PUSH 1)
170   (LOAD&JMPIF 8 L120)
173   (GETVALUE 0)                        ; P
175   (CDR)
176   (CDR)
177   (CDR)
178   (CDR)
179   L179
179   (PUSH)
180   (CALL 3 20)                         ; PSCHECK
183   L183
183   (PUSH)
184   (CALL1&PUSH 11)                     ; PSEXPT-FN
186   (CALL2 12)                          ; PSTIMES
188   (SKIP 1)
190   (UNBIND1)
191   (SKIP 2)
193   (UNBIND1)
194   (SKIP&RET 2)


Disassembly of function #:|(DEFUN GVAR-LOGP (GVAR) ...)-87|
(CONST 0) = GVAR-LOGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GVAR-LOGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GVAR-LOGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GVAR-LOGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GVAR-LOGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GVAR-LOGP
8     (SKIP&RET 1)


Disassembly of function GVAR-LOGP
(CONST 0) = IVARS
(CONST 1) = ASSQ
(CONST 2) = VAR
(CONST 3) = MEXPT
(CONST 4) = -1
(CONST 5) = %LOG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR IVARS)
writes special variable : (VAR)
38 byte-code instructions:
0     (LOAD&PUSH 1)
1     (GETVALUE&PUSH 0)                   ; IVARS
3     (CALL2 1)                           ; ASSQ
5     (CDR)
6     (BIND 2)                            ; VAR
8     (GETVALUE&PUSH 2)                   ; VAR
10    (CALLS2 4)                          ; CONSP
12    (JMPIFNOT1 L52)
14    (GETVALUE 2)                        ; VAR
16    (CAR)
17    (CAR&PUSH)
18    (CONST 3)                           ; MEXPT
19    (EQ)
20    (JMPIFNOT1 L52)
22    (GETVALUE 2)                        ; VAR
24    (CDR)
25    (CDR)
26    (CAR&PUSH)
27    (CONST 4)                           ; -1
28    (EQ)
29    (JMPIFNOT1 L52)
31    (GETVALUE 2)                        ; VAR
33    (CDR)
34    (CAR)
35    (SETVALUE 2)                        ; VAR
37    (PUSH)
38    (CALLS2 4)                          ; CONSP
40    (JMPIFNOT1 L52)
42    (GETVALUE 2)                        ; VAR
44    (CAR)
45    (CAR&PUSH)
46    (CONST 5)                           ; %LOG
47    (EQ)
48    (JMPIFNOT1 L52)
50    (GETVALUE 2)                        ; VAR
52    L52
52    (UNBIND1)
53    (SKIP&RET 2)


Disassembly of function #:|(DEFUN C*LOGS (P) ...)-88|
(CONST 0) = C*LOGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE C*LOGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; C*LOGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; C*LOGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE C*LOGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; C*LOGS
8     (SKIP&RET 1)


Disassembly of function C*LOGS
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = GVAR-LOGP
(CONST 3) = C
(CONST 4) = (-1 . 1)
(CONST 5) = PSTERM
(CONST 6) = PSCONST
(CONST 7) = CDISREP
(CONST 8) = TVARS
(CONST 9) = MFREE
(CONST 10) = (0 . 1)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C TVARS P)
writes special variable : (C)
54 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L66)                ; PS
9     (GETVALUE 0)                        ; P
11    (CDR)
12    (CAR)
13    (CAR&PUSH)
14    (CALL1&PUSH 2)                      ; GVAR-LOGP
16    (NIL)
17    (BIND 3)                            ; C
19    (LOAD&JMPIFNOT 3 L69)
22    (GETVALUE 0)                        ; P
24    (CDR)
25    (CDR)
26    (CDR&PUSH)
27    (CONST&PUSH 4)                      ; (-1 . 1)
28    (CALL2&PUSH 5)                      ; PSTERM
30    (CALL1 6)                           ; PSCONST
32    (SETVALUE 3)                        ; C
34    (PUSH)
35    (CALL1&PUSH 7)                      ; CDISREP
37    (GETVALUE&PUSH 8)                   ; TVARS
39    (CALL2&JMPIFNOT 9 L72)              ; MFREE
42    (GETVALUE&PUSH 3)                   ; C
44    (LOAD&PUSH 4)
45    (GETVALUE 0)                        ; P
47    (CONS)
48    (CONS&PUSH)
49    (GETVALUE 0)                        ; P
51    (CDR)
52    (CDR)
53    (CDR&PUSH)
54    (CONST&PUSH 10)                     ; (0 . 1)
55    (CALL2&PUSH 5)                      ; PSTERM
57    (JSR L0)
59    (CONS)
60    L60
60    (UNBIND1)
61    (SKIP 1)
63    L63
63    (UNBIND1)
64    (SKIP&RET 2)
66    L66
66    (NIL)
67    (JMP L63)
69    L69
69    (NIL)
70    (JMP L60)
72    L72
72    (NIL)
73    (JMP L60)


Disassembly of function #:|(DEFUN PSCONST (P) ...)-89|
(CONST 0) = PSCONST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCONST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCONST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCONST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCONST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCONST
8     (SKIP&RET 1)


Disassembly of function PSCONST
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = (0 . 1)
(CONST 3) = PSTERM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
19 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L22)                ; PS
9     (GETVALUE 0)                        ; P
11    (CDR)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; (0 . 1)
15    (CALL2&PUSH 3)                      ; PSTERM
17    (JSR L0)
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (GETVALUE 0)                        ; P
24    (JMP L19)


Disassembly of function #:|(DEFUN EXP-C*LOGS (C*LOGS) ...)-90|
(CONST 0) = EXP-C*LOGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXP-C*LOGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXP-C*LOGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXP-C*LOGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXP-C*LOGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXP-C*LOGS
8     (SKIP&RET 1)


Disassembly of function EXP-C*LOGS
(CONST 0) = (1 . 1)
(CONST 1) = (MEXPT)
(CONST 2) = CDISREP
(CONST 3) = TAYLOR2
(CONST 4) = PSTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD&JMPIF 1 L9)
3     L3
3     (CONST 0)                           ; (1 . 1)
4     (SKIP&RET 2)
6     L6
6     (LOAD&JMPIFNOT 1 L3)
9     L9
9     (CONST&PUSH 1)                      ; (MEXPT)
10    (LOAD 2)
11    (CAR)
12    (CDR)
13    (CAR)
14    (CDR)
15    (CAR&PUSH)
16    (LOAD 3)
17    (CAR)
18    (CAR&PUSH)
19    (CALL1&PUSH 2)                      ; CDISREP
21    (LIST&PUSH 3)
23    (CALL1&PUSH 3)                      ; TAYLOR2
25    (LOAD&CDR&PUSH 2)
27    (JSR&PUSH L6)
29    (CALL2 4)                           ; PSTIMES
31    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUM-C*LOGS (C*LOGS) ...)-91|
(CONST 0) = SUM-C*LOGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUM-C*LOGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUM-C*LOGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUM-C*LOGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUM-C*LOGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUM-C*LOGS
8     (SKIP&RET 1)


Disassembly of function SUM-C*LOGS
(CONST 0) = (0 . 1)
(CONST 1) = PS
(CONST 2) = (-1 . 1)
(CONST 3) = PSPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
33 byte-code instructions:
0     (LOAD&JMPIF 1 L9)
3     L3
3     (CONST 0)                           ; (0 . 1)
4     (SKIP&RET 2)
6     L6
6     (LOAD&JMPIFNOT 1 L3)
9     L9
9     (LOAD 1)
10    (CAR)
11    (CDR)
12    (CDR&PUSH)
13    (CONST&PUSH 1)                      ; PS
14    (LOAD 1)
15    (CDR)
16    (CAR&PUSH)
17    (LOAD 2)
18    (CDR)
19    (CDR)
20    (CAR&PUSH)
21    (CONST&PUSH 2)                      ; (-1 . 1)
22    (LOAD 6)
23    (CAR)
24    (CAR)
25    (CONS&PUSH)
26    (NIL)
27    (CONS)
28    (CONS)
29    (CONS)
30    (CONS&PUSH)
31    (LOAD&CDR&PUSH 3)
33    (JSR&PUSH L6)
35    (CALL2 3)                           ; PSPLUS
37    (SKIP&RET 3)


Disassembly of function #:|(DEFVAR TVAR-LIMITS NIL ...)-92|
(CONST 0) = (SPECIAL TVAR-LIMITS)
(CONST 1) = TVAR-LIMITS
(CONST 2) = VARIABLE
(CONST 3) = "A list of the form ((gvar . limit(gvar)) ...)"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TVAR-LIMITS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TVAR-LIMITS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TVAR-LIMITS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; TVAR-LIMITS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "A list of the form ((gvar . limit(gvar)) ...)"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; TVAR-LIMITS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN PS-LIM-INFP (PS) ...)-93|
(CONST 0) = PS-LIM-INFP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PS-LIM-INFP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PS-LIM-INFP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PS-LIM-INFP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PS-LIM-INFP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PS-LIM-INFP
8     (SKIP&RET 1)


Disassembly of function PS-LIM-INFP
(CONST 0) = PS
(CONST 1) = GVAR-LIM
(CONST 2) = ($INF $MINF)
(CONST 3) = MEMQ
(CONST 4) = PS-GT
(CONST 5) = LIM-POWER
(CONST 6) = LIM-INFP
(CONST 7) = $INFINITY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
46 byte-code instructions:
0     L0
0     (LOAD&CAR&PUSH 1)
2     (JMPIFNOTEQTO 0 L45)                ; PS
5     (LOAD 1)
6     (CDR)
7     (CAR)
8     (CAR&PUSH)
9     (CALL1&PUSH 1)                      ; GVAR-LIM
11    (LOAD&PUSH 0)
12    (CONST&PUSH 2)                      ; ($INF $MINF)
13    (CALL2&JMPIF 3 L48)                 ; MEMQ
16    (LOAD 2)
17    (CDR)
18    (CDR)
19    (CDR)
20    (CAR)
21    L21
21    (PUSH)
22    (LOAD 0)
23    (CAR)
24    (CAR&PUSH)
25    (CALLS2&JMPIF 145 L53)              ; ZEROP
28    (LOAD&PUSH 1)
29    (LOAD&CAR&PUSH 1)
31    (CALL2 5)                           ; LIM-POWER
33    (STORE 1)
34    (PUSH)
35    (CALL1 6)                           ; LIM-INFP
37    (JMPIFNOT1 L59)
39    (LOAD&PUSH 1)
40    (CONST 7)                           ; $INFINITY
41    (EQ)
42    (NOT)
43    (SKIP&RET 4)
45    L45
45    (NIL)
46    (SKIP&RET 2)
48    L48
48    (LOAD&PUSH 2)
49    (CALL1 4)                           ; PS-GT
51    (JMP L21)
53    L53
53    (LOAD&CDR&PUSH 0)
55    (JMPTAIL 1 5 L0)
59    L59
59    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LIM-ZEROP (LIM) ...)-94|
(CONST 0) = LIM-ZEROP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-ZEROP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-ZEROP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-ZEROP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-ZEROP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-ZEROP
8     (SKIP&RET 1)


Disassembly of function LIM-ZEROP
(CONST 0) = ($ZEROA $ZEROB $ZEROIM)
(CONST 1) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; ($ZEROA $ZEROB $ZEROIM)
2     (CALL2 1)                           ; MEMQ
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-PLUSP (LIM) ...)-95|
(CONST 0) = LIM-PLUSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-PLUSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-PLUSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-PLUSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-PLUSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-PLUSP
8     (SKIP&RET 1)


Disassembly of function LIM-PLUSP
(CONST 0) = ($ZEROA $POS $INF $FINITE)
(CONST 1) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; ($ZEROA $POS $INF $FINITE)
2     (CALL2 1)                           ; MEMQ
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-FINITEP (LIM) ...)-96|
(CONST 0) = LIM-FINITEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-FINITEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-FINITEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-FINITEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-FINITEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-FINITEP
8     (SKIP&RET 1)


Disassembly of function LIM-FINITEP
(CONST 0) = ($POS $NEG $IM $FINITE)
(CONST 1) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; ($POS $NEG $IM $FINITE)
2     (CALL2 1)                           ; MEMQ
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-INFP (LIM) ...)-97|
(CONST 0) = LIM-INFP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-INFP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-INFP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-INFP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-INFP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-INFP
8     (SKIP&RET 1)


Disassembly of function LIM-INFP
(CONST 0) = ($INF $MINF $INFINITY)
(CONST 1) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; ($INF $MINF $INFINITY)
2     (CALL2 1)                           ; MEMQ
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-IMAGP (LIM) ...)-98|
(CONST 0) = LIM-IMAGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-IMAGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-IMAGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-IMAGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-IMAGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-IMAGP
8     (SKIP&RET 1)


Disassembly of function LIM-IMAGP
(CONST 0) = ($IM $INFINITY)
(CONST 1) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; ($IM $INFINITY)
2     (CALL2 1)                           ; MEMQ
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-MINUS (LIM) ...)-99|
(CONST 0) = LIM-MINUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-MINUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-MINUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-MINUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-MINUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-MINUS
8     (SKIP&RET 1)


Disassembly of function LIM-MINUS
(CONST 0) = 
(($ZEROA . $ZEROB) ($ZEROB . $ZEROA) ($POS . $NEG) ($NEG . $POS) ($INF . $MINF)
 ($MINF . $INF) ($IM . $IM) ($INFINITY . $INFINITY) ($FINITE . $FINITE))
(CONST 1) = ASSQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (# # # ...)
2     (CALL2 1)                           ; ASSQ
4     (CDR)
5     (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-ABS (LIM) ...)-100|
(CONST 0) = LIM-ABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-ABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-ABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-ABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-ABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-ABS
8     (SKIP&RET 1)


Disassembly of function LIM-ABS
(CONST 0) = (($ZEROB . $ZEROA) ($NEG . $POS) ($MINF . $INF))
(CONST 1) = ASSQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (# # #)
2     (CALL2 1)                           ; ASSQ
4     (CDR)
5     (JMPIF1 L10)
7     (LOAD 1)
8     (SKIP&RET 2)
10    L10
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-TIMES (LIM1 LIM2) ...)-101|
(CONST 0) = LIM-TIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-TIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-TIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-TIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-TIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-TIMES
8     (SKIP&RET 1)


Disassembly of function LIM-TIMES
(CONST 0) = LIM-INFP
(CONST 1) = $INF
(CONST 2) = LIM-ZEROP
(CONST 3) = $POS
(CONST 4) = LIM-FINITEP
(CONST 5) = $FINITE
(CONST 6) = "Undefined finite*inf in lim-times"
(CONST 7) = BREAK
(CONST 8) = LIM-ABS
(CONST 9) = "Undefined limit product ~A * ~A in lim-times lim1 lim2"
(CONST 10) = LIM-IMAGP
(CONST 11) = $INFINITY
(CONST 12) = $IM
(CONST 13) = LIM-PLUSP
(CONST 14) = LIM-MINUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
66 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (CALL1&JMPIFNOT 0 L9)               ; LIM-INFP
5     (LOAD&PUSH 2)
6     (CALL1&JMPIF 0 L49)                 ; LIM-INFP
9     L9
9     (LOAD&PUSH 3)
10    (CALL1&JMPIFNOT 2 L17)              ; LIM-ZEROP
13    (LOAD&PUSH 2)
14    (CALL1&JMPIF 2 L53)                 ; LIM-ZEROP
17    L17
17    (LOAD&PUSH 2)
18    (CALL1&JMPIF 4 L57)                 ; LIM-FINITEP
21    (LOAD&PUSH 3)
22    (CALL1&JMPIF 4 L62)                 ; LIM-FINITEP
25    (CONST&PUSH 9)                      ; "Undefined limit product ~A * ~A in lim-times lim1 lim2"
26    (CALL1 7)                           ; BREAK
28    L28
28    (LOAD&PUSH 3)
29    (CALL1&JMPIF 10 L82)                ; LIM-IMAGP
32    (LOAD&PUSH 2)
33    (CALL1&JMPIF 10 L82)                ; LIM-IMAGP
36    (LOAD&PUSH 3)
37    (CALL1&JMPIFNOT 13 L44)             ; LIM-PLUSP
40    (LOAD&PUSH 2)
41    (CALL1&JMPIF 13 L89)                ; LIM-PLUSP
44    L44
44    (LOAD&PUSH 0)
45    (CALL1 14)                          ; LIM-MINUS
47    (SKIP&RET 4)
49    L49
49    (CONST 1)                           ; $INF
50    (STORE 0)
51    (JMP L28)
53    L53
53    (CONST 3)                           ; $POS
54    (STORE 0)
55    (JMP L28)
57    L57
57    (LOAD&PUSH 2)
58    (LOAD 4)
59    (STORE 3)
60    (POP&STORE 3)
62    L62
62    (LOAD&PUSH 3)
63    (JMPIFNOTEQTO 5 L73)                ; $FINITE
66    (LOAD&PUSH 3)
67    (CALL1&JMPIFNOT 0 L73)              ; LIM-INFP
70    (CONST&PUSH 6)                      ; "Undefined finite*inf in lim-times"
71    (CALL1 7)                           ; BREAK
73    L73
73    (LOAD&PUSH 2)
74    (CALL1 8)                           ; LIM-ABS
76    (STORE 0)
77    (JMP L28)
79    L79
79    (CONST 11)                          ; $INFINITY
80    (SKIP&RET 4)
82    L82
82    (LOAD&PUSH 0)
83    (CALL1&JMPIF 0 L79)                 ; LIM-INFP
86    (CONST 12)                          ; $IM
87    (SKIP&RET 4)
89    L89
89    (POP)
90    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LIM-POWER (LIM POWER) ...)-102|
(CONST 0) = LIM-POWER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-POWER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-POWER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-POWER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-POWER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-POWER
8     (SKIP&RET 1)


Disassembly of function LIM-POWER
(CONST 0) = $POS
(CONST 1) = (0 . 1)
(CONST 2) = E>
(CONST 3) = LIM-RECIP
(CONST 4) = LIM-PLUSP
(CONST 5) = LIM-MINUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
30 byte-code instructions:
0     L0
0     (LOAD&CAR&PUSH 1)
2     (CALLS2&JMPIF 145 L22)              ; ZEROP
5     (CONST&PUSH 1)                      ; (0 . 1)
6     (LOAD&PUSH 2)
7     (CALL2&JMPIF 2 L25)                 ; E>
10    (LOAD&CAR&PUSH 1)
12    (CALLS2&JMPIF 148 L19)              ; ODDP
15    (LOAD&PUSH 2)
16    (CALL1&JMPIFNOT 4 L40)              ; LIM-PLUSP
19    L19
19    (LOAD 2)
20    (SKIP&RET 3)
22    L22
22    (CONST 0)                           ; $POS
23    (SKIP&RET 3)
25    L25
25    (LOAD&PUSH 2)
26    (LOAD&CAR&PUSH 2)
28    (CALLSR&PUSH 0 54)                  ; -
31    (LOAD 3)
32    (CDR)
33    (CONS&PUSH)
34    (JSR&PUSH L0)
36    (CALL1 3)                           ; LIM-RECIP
38    (SKIP&RET 3)
40    L40
40    (LOAD&PUSH 2)
41    (CALL1 5)                           ; LIM-MINUS
43    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LIM-RECIP (LIM) ...)-103|
(CONST 0) = LIM-RECIP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-RECIP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-RECIP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-RECIP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-RECIP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-RECIP
8     (SKIP&RET 1)


Disassembly of function LIM-RECIP
(CONST 0) = (($ZEROA . $INF) ($ZEROB . $MINF) ($INF . $ZEROA) ($MINF . $ZEROB))
(CONST 1) = ASSQ
(CONST 2) = $FINITE
(CONST 3) = "inverting $FINITE?"
(CONST 4) = BREAK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (# # # ...)
2     (CALL2 1)                           ; ASSQ
4     (CDR)
5     (JMPIF1 L19)
7     (LOAD&PUSH 1)
8     (JMPIFEQTO 2 L14)                   ; $FINITE
11    (LOAD 1)
12    (SKIP&RET 2)
14    L14
14    (CONST&PUSH 3)                      ; "inverting $FINITE?"
15    (CALL1 4)                           ; BREAK
17    (SKIP&RET 2)
19    L19
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-EXP (LIM) ...)-104|
(CONST 0) = LIM-EXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-EXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-EXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-EXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-EXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-EXP
8     (SKIP&RET 1)


Disassembly of function LIM-EXP
(CONST 0) = 
#S(HASH-TABLE EQ ($INFINITY . 7) ($FINITE . 4) ($INF . 4) ($MINF . 1)
   ($NEG . 1) ($POS . 1) ($ZEROB . 1) ($ZEROA . 1))
(CONST 1) = $ZEROA
(CONST 2) = $INFINITY
(CONST 3) = "Unhandled limit in lim-exp"
(CONST 4) = BREAK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD 1)
1     (JMPHASH 0 L13 L4 L4 L4 L4 L4 L7 L7 L10)
4     L4
4     (CONST 1)                           ; $ZEROA
5     (SKIP&RET 2)
7     L7
7     (LOAD 1)
8     (SKIP&RET 2)
10    L10
10    (CONST 2)                           ; $INFINITY
11    (SKIP&RET 2)
13    L13
13    (CONST&PUSH 3)                      ; "Unhandled limit in lim-exp"
14    (CALL1 4)                           ; BREAK
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIM-LOG (LIM) ...)-105|
(CONST 0) = LIM-LOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIM-LOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIM-LOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIM-LOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIM-LOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIM-LOG
8     (SKIP&RET 1)


Disassembly of function LIM-LOG
(CONST 0) = $ZEROA
(CONST 1) = $MINF
(CONST 2) = $INF
(CONST 3) = "Unhandled limit in lim-log"
(CONST 4) = BREAK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L13)                   ; $ZEROA
4     (LOAD&PUSH 1)
5     (JMPIFEQTO 2 L16)                   ; $INF
8     (CONST&PUSH 3)                      ; "Unhandled limit in lim-log"
9     (CALL1 4)                           ; BREAK
11    (SKIP&RET 2)
13    L13
13    (CONST 1)                           ; $MINF
14    (SKIP&RET 2)
16    L16
16    (CONST 2)                           ; $INF
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EXPAND-AND-DISREP (TERM P) ...)-106|
(CONST 0) = EXPAND-AND-DISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPAND-AND-DISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPAND-AND-DISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPAND-AND-DISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPAND-AND-DISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPAND-AND-DISREP
8     (SKIP&RET 1)


Disassembly of function EXPAND-AND-DISREP
(CONST 0) = P
(CONST 1) = (MEXPT)
(CONST 2) = IVARS
(CONST 3) = ASSQ
(CONST 4) = EDISREP
(CONST 5) = A
(CONST 6) = PS
(CONST 7) = SRDIS
(CONST 8) = MUL*
(CONST 9) = (MTIMES)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A IVARS P)
58 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (CONST&PUSH 1)                      ; (MEXPT)
4     (GETVALUE 0)                        ; P
6     (CDR)
7     (CAR)
8     (CAR&PUSH)
9     (GETVALUE&PUSH 2)                   ; IVARS
11    (CALL2 3)                           ; ASSQ
13    (CDR&PUSH)
14    (LOAD&CAR&PUSH 7)
16    (CALL1&PUSH 4)                      ; EDISREP
18    (LIST&PUSH 3)
20    (LOAD 6)
21    (CDR)
22    (BIND 5)                            ; A
24    (GETVALUE 5)                        ; A
26    (CAR&PUSH)
27    (JMPIFNOTEQTO 6 L38)                ; PS
30    (NIL&PUSH)
31    (GETVALUE 5)                        ; A
33    (CDR)
34    (CDR)
35    (CDR&PUSH)
36    (JMP L67)
38    L38
38    (GETVALUE&PUSH 5)                   ; A
40    (CALL1&PUSH 7)                      ; SRDIS
42    (LOAD&PUSH 4)
43    (CALL2&PUSH 8)                      ; MUL*
45    (NIL)
46    (CONS)
47    (JMP L78)
49    L49
49    (LOAD&CAR&PUSH 0)
51    (CONST&PUSH 9)                      ; (MTIMES)
52    (LOAD&PUSH 1)
53    (GETVALUE&PUSH 5)                   ; A
55    (JSR L0)
57    (CONS&PUSH)
58    (LOAD&PUSH 7)
59    (CALL2&PUSH 8)                      ; MUL*
61    (LOAD&CONS&STORE 2)
63    (SKIP 1)
65    (LOAD&CDR&STORE 0)
67    L67
67    (LOAD&PUSH 0)
68    (CALLS1&JMPIFNOT 146 L49)           ; ENDP
71    (SKIP 1)
73    (LOAD&PUSH 0)
74    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
76    (SKIP 1)
78    L78
78    (UNBIND1)
79    (SKIP 1)
81    (UNBIND1)
82    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ADJOIN-SING-DATUM (D) ...)-107|
(CONST 0) = ADJOIN-SING-DATUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADJOIN-SING-DATUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADJOIN-SING-DATUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADJOIN-SING-DATUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADJOIN-SING-DATUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADJOIN-SING-DATUM
8     (SKIP&RET 1)


Disassembly of function ADJOIN-SING-DATUM
(CONST 0) = D
(CONST 1) = PREP1
(CONST 2) = TLIST
(CONST 3) = R
(CONST 4) = 1
(CONST 5) = (1 1)
(CONST 6) = "bad singular datum"
(CONST 7) = BREAK
(CONST 8) = DISREP
(CONST 9) = PUTPROP
(CONST 10) = ADJOIN-DATUM
(CONST 11) = KEY-VARS
(CONST 12) = IVARS
(CONST 13) = TVAR-LIMITS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TVAR-LIMITS IVARS KEY-VARS R TLIST D)
writes special variables : (TVAR-LIMITS IVARS KEY-VARS)
78 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; D
3     (GETVALUE 0)                        ; D
5     (CAR&PUSH)
6     (CALL1&PUSH 1)                      ; PREP1
8     (PUSH-UNBOUND 1)
10    (CALLS2&PUSH 143)                   ; GENSYM
12    (GETVALUE 0)                        ; D
14    (CAR&PUSH)
15    (GETVALUE&PUSH 2)                   ; TLIST
17    (PUSH-UNBOUND 1)
19    (CALLS1 156)                        ; LAST
21    (CAR)
22    (CDR)
23    (CDR)
24    (CDR)
25    (CDR)
26    (CDR&PUSH)
27    (CALLS2&PUSH 150)                   ; 1+
29    (LOAD 3)
30    (BIND 3)                            ; R
32    (GETVALUE 3)                        ; R
34    (CAR&PUSH)
35    (JMPIFNOTEQTO 4 L46)                ; 1
38    (GETVALUE 3)                        ; R
40    (CDR)
41    (CDR&PUSH)
42    (CONST&PUSH 5)                      ; (1 1)
43    (CALLS2&JMPIF 2 L49)                ; EQUAL
46    L46
46    (CONST&PUSH 6)                      ; "bad singular datum"
47    (CALL1 7)                           ; BREAK
49    L49
49    (LOAD&PUSH 5)
50    (LOAD&PUSH 5)
51    (CONST&PUSH 8)                      ; DISREP
52    (CALL 3 9)                          ; PUTPROP
55    (GETVALUE 0)                        ; D
57    (CDR)
58    (CDR)
59    (CDR&PUSH)
60    (LOAD&PUSH 6)
61    (LOAD 5)
62    (CONS&PUSH)
63    (CALLS1 170)                        ; RPLACD
65    (GETVALUE&PUSH 0)                   ; D
67    (CALL1 10)                          ; ADJOIN-DATUM
69    (GETVALUE 3)                        ; R
71    (CDR)
72    (CAR&PUSH)
73    (LOAD 5)
74    (CONS&PUSH)
75    (GETVALUE 11)                       ; KEY-VARS
77    (CONS)
78    (SETVALUE 11)                       ; KEY-VARS
80    (LOAD&PUSH 5)
81    (LOAD 5)
82    (CONS&PUSH)
83    (GETVALUE 11)                       ; KEY-VARS
85    (CONS)
86    (SETVALUE 11)                       ; KEY-VARS
88    (CAR&PUSH)
89    (GETVALUE 12)                       ; IVARS
91    (CONS)
92    (SETVALUE 12)                       ; IVARS
94    (LOAD&PUSH 5)
95    (GETVALUE 0)                        ; D
97    (CDR)
98    (CDR)
99    (CAR)
100   (CONS&PUSH)
101   (GETVALUE 13)                       ; TVAR-LIMITS
103   (CONS)
104   (SETVALUE 13)                       ; TVAR-LIMITS
106   (UNBIND1)
107   (SKIP 4)
109   (UNBIND1)
110   (SKIP&RET 2)


Disassembly of function #:|(DEFUN ADJOIN-TVAR (EXP) ...)-108|
(CONST 0) = ADJOIN-TVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADJOIN-TVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADJOIN-TVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADJOIN-TVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADJOIN-TVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADJOIN-TVAR
8     (SKIP&RET 1)


Disassembly of function ADJOIN-TVAR
(CONST 0) = EXP
(CONST 1) = PREP1
(CONST 2) = RAT->PS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1&PUSH 1)                      ; PREP1
7     (CALL1 2)                           ; RAT->PS
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RAT->PS (RAT) ...)-109|
(CONST 0) = RAT->PS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAT->PS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT->PS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAT->PS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAT->PS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAT->PS
8     (SKIP&RET 1)


Disassembly of function RAT->PS
(CONST 0) = POLY->PS
(CONST 1) = (-1 . 1)
(CONST 2) = PSEXPT
(CONST 3) = PSTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (CALL1&PUSH 0)                      ; POLY->PS
4     (LOAD&CDR&PUSH 2)
6     (CALL1&PUSH 0)                      ; POLY->PS
8     (CONST&PUSH 1)                      ; (-1 . 1)
9     (CALL2&PUSH 2)                      ; PSEXPT
11    (CALL2 3)                           ; PSTIMES
13    (SKIP&RET 2)


Disassembly of function #:|(DEFUN POLY->PS (POLY) ...)-110|
(CONST 0) = POLY->PS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLY->PS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLY->PS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLY->PS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLY->PS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLY->PS
8     (SKIP&RET 1)


Disassembly of function POLY->PS
(CONST 0) = PDIS
(CONST 1) = TVARS
(CONST 2) = MFREE
(CONST 3) = PREP1
(CONST 4) = (1 . 1)
(CONST 5) = KEY-VAR-POW
(CONST 6) = ADJOIN-PVAR
(CONST 7) = PS
(CONST 8) = KEY-VARS
(CONST 9) = ASSQ
(CONST 10) = TLIST
(CONST 11) = ZL-ASSOC
(CONST 12) = E*
(CONST 13) = INVERT-TERMS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST KEY-VARS TVARS)
91 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L111)
4     (LOAD&PUSH 1)
5     (CALL1&PUSH 0)                      ; PDIS
7     (GETVALUE&PUSH 1)                   ; TVARS
9     (CALL2&JMPIF 2 L111)                ; MFREE
13    (LOAD&CAR&PUSH 1)
15    (NIL&PUSH)
16    (CONST&PUSH 4)                      ; (1 . 1)
17    (LOAD&PUSH 2)
18    (CALL1 5)                           ; KEY-VAR-POW
20    (STORE 1)
21    (JMPIF L26)
23    (LOAD&PUSH 2)
24    (CALL1 6)                           ; ADJOIN-PVAR
26    L26
26    (STORE 0)
27    (CAR)
28    (STORE 2)
29    (LOAD&CDR&STORE 0)
31    (LOAD 2)
32    (JMPIFATOM L40)
34    (LOAD&CAR&PUSH 2)
36    (JMPIFEQTO 7 L116)                  ; PS
40    L40
40    (LOAD&PUSH 2)
41    (GETVALUE&PUSH 8)                   ; KEY-VARS
43    (CALL2 9)                           ; ASSQ
45    (CDR&PUSH)
46    (GETVALUE&PUSH 10)                  ; TLIST
48    (CALL2 11)                          ; ZL-ASSOC
50    (STORE 1)
51    (LOAD&CDR&PUSH 4)
53    (NIL&PUSH)
54    (LOAD&JMPIFNOT 1 L82)
57    L57
57    (LOAD 1)
58    (CDR)
59    (CDR)
60    (CDR&PUSH)
61    (LOAD&PUSH 3)
62    (LOAD&CAR&PUSH 3)
64    (CALL1&PUSH 3)                      ; PREP1
66    (CALL2&PUSH 12)                     ; E*
68    (LOAD 3)
69    (CDR)
70    (CAR&PUSH)
71    (JSR L0)
74    (CONS&PUSH)
75    (LOAD&CONS&STORE 1)
77    (POP&STORE 1)
79    (LOAD&JMPIF 1 L57)
82    L82
82    (CONST&PUSH 7)                      ; PS
83    (LOAD 4)
84    (CDR)
85    (CDR)
86    (CDR)
87    (CDR&PUSH)
88    (LOAD 5)
89    (CDR)
90    (CAR)
91    (CAR&PUSH)
92    (NIL)
93    (CONS&PUSH)
94    (LOAD&PUSH 7)
95    (LOAD 7)
96    (CDR)
97    (CDR)
98    (CDR)
99    (CDR)
100   (CAR)
101   (JMPIFEQ L119)
103   (LOAD&PUSH 3)
104   (CALL1 13)                          ; INVERT-TERMS
106   L106
106   (CONS)
107   (CONS)
108   (CONS)
109   (SKIP&RET 7)
111   L111
111   (LOAD&PUSH 1)
112   (CALL1 3)                           ; PREP1
114   (SKIP&RET 2)
116   L116
116   (LOAD 2)
117   (SKIP&RET 5)
119   L119
119   (LOAD 3)
120   (JMP L106)


Disassembly of function #:|(DEFUN KEY-VAR-POW (G) ...)-111|
(CONST 0) = KEY-VAR-POW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KEY-VAR-POW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KEY-VAR-POW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KEY-VAR-POW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KEY-VAR-POW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KEY-VAR-POW
8     (SKIP&RET 1)


Disassembly of function KEY-VAR-POW
(CONST 0) = KEY-VARS
(CONST 1) = ASSQ
(CONST 2) = VAR
(CONST 3) = TLIST
(CONST 4) = ZL-ASSOC
(CONST 5) = (1 . 1)
(CONST 6) = (-1 . 1)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST VAR KEY-VARS)
33 byte-code instructions:
0     (LOAD&PUSH 1)
1     (GETVALUE&PUSH 0)                   ; KEY-VARS
3     (CALL2 1)                           ; ASSQ
5     (CDR)
6     (BIND 2)                            ; VAR
8     (NIL&PUSH)
9     (GETVALUE 2)                        ; VAR
11    (JMPIFNOT1 L32)
13    (PUSH)
14    (GETVALUE&PUSH 3)                   ; TLIST
16    (CALL2 4)                           ; ZL-ASSOC
18    (STORE 0)
19    (LOAD&PUSH 5)
20    (LOAD 1)
21    (CDR)
22    (CDR)
23    (CDR)
24    (CDR)
25    (CAR)
26    (STORE 6)
27    (JMPIFEQ L37)
29    (LOAD&PUSH 5)
30    (CONST 6)                           ; (-1 . 1)
31    (CONS)
32    L32
32    (SKIP 1)
34    (UNBIND1)
35    (SKIP&RET 2)
37    L37
37    (LOAD&PUSH 5)
38    (CONST 5)                           ; (1 . 1)
39    (CONS)
40    (JMP L32)


Disassembly of function #:|(DEFUN ADJOIN-PVAR (G) ...)-112|
(CONST 0) = ADJOIN-PVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADJOIN-PVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADJOIN-PVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADJOIN-PVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADJOIN-PVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADJOIN-PVAR
8     (SKIP&RET 1)


Disassembly of function ADJOIN-PVAR
(CONST 0) = DISREP
(CONST 1) = TLIST
(CONST 2) = (1 . 1)
(CONST 3) = ANS
(CONST 4) = ASSOL
(CONST 5) = BAD1
(CONST 6) = BREAK
(CONST 7) = MEXPT
(CONST 8) = $%E
(CONST 9) = MTIMES
(CONST 10) = $%I
(CONST 11) = MFREE
(CONST 12) = "bad exponential in adjoin-pvar"
(CONST 13) = "now"
(CONST 14) = DIV*
(CONST 15) = (%COS)
(CONST 16) = ADJOIN-TVAR
(CONST 17) = PREP1
(CONST 18) = (%SIN)
(CONST 19) = PSTIMES
(CONST 20) = PSPLUS
(CONST 21) = $RATNUMP
(CONST 22) = -1
(CONST 23) = POWER*
(CONST 24) = 1
(CONST 25) = (1 1)
(CONST 26) = "Illegal kernel in ADJOIN-PVAR"
(CONST 27) = KEY-VAR-POW
(CONST 28) = E*
(CONST 29) = TVAR-LIM
(CONST 30) = LIM-INFP
(CONST 31) = LIM-RECIP
(CONST 32) = (-1 . 1)
(CONST 33) = PUTPROP
(CONST 34) = KEY-VARS
(CONST 35) = BAD2
(CONST 36) = ADJOIN-DATUM
(CONST 37) = IVARS
(CONST 38) = TVAR-LIMITS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS TVAR-LIMITS IVARS KEY-VARS TLIST)
writes special variables : (TVAR-LIMITS IVARS KEY-VARS ANS)
227 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; DISREP
2     (PUSH-UNBOUND 1)
4     (CALLS2&PUSH 132)                   ; GET
6     (PUSH-NIL 4)
8     (GETVALUE&PUSH 1)                   ; TLIST
10    (PUSH-UNBOUND 1)
12    (CALLS1 156)                        ; LAST
14    (CAR)
15    (CDR)
16    (CDR)
17    (CDR)
18    (CDR)
19    (CDR&PUSH)
20    (CALLS2&PUSH 150)                   ; 1+
22    (CONST&PUSH 2)                      ; (1 . 1)
23    (NIL&PUSH)
24    (LOAD 3)
25    (BIND 3)                            ; ANS
27    (LOAD&PUSH 10)
28    (GETVALUE&PUSH 1)                   ; TLIST
30    (CALL2&JMPIFNOT 4 L36)              ; ASSOL
33    (CONST&PUSH 5)                      ; BAD1
34    (CALL1 6)                           ; BREAK
36    L36
36    (LOAD 10)
37    (CAR)
38    (CAR&PUSH)
39    (JMPIFNOTEQTO 7 L69)                ; MEXPT
42    (LOAD 10)
43    (CDR)
44    (CAR&PUSH)
45    (JMPIFNOTEQTO 8 L69)                ; $%E
48    (LOAD 10)
49    (CDR)
50    (CDR)
51    (CAR)
52    (STORE 3)
53    (JMPIFATOM L69)
55    (LOAD 3)
56    (CAR)
57    (CAR&PUSH)
58    (JMPIFNOTEQTO 9 L69)                ; MTIMES
61    (LOAD&PUSH 3)
62    (CONST&PUSH 10)                     ; $%I
63    (NIL)
64    (CONS&PUSH)
65    (CALL2&JMPIFNOT 11 L265)            ; MFREE
69    L69
69    (LOAD 10)
70    (CAR)
71    (CAR&PUSH)
72    (JMPIFNOTEQTO 7 L144)               ; MEXPT
76    (LOAD 10)
77    (CDR)
78    (CDR)
79    (CAR)
80    (STORE 3)
81    (JMPIFATOM L144)
83    (LOAD 3)
84    (CAR)
85    (CAR&PUSH)
86    (JMPIFNOTEQTO 9 L144)               ; MTIMES
89    (LOAD 3)
90    (CDR)
91    (CAR&PUSH)
92    (CALL1&JMPIFNOT 21 L144)            ; $RATNUMP
95    (LOAD 3)
96    (CDR)
97    (CAR)
98    (STORE 4)
99    (LOAD&PUSH 10)
100   (LOAD&PUSH 5)
101   (CONST&PUSH 22)                     ; -1
102   (CALL2&PUSH 23)                     ; POWER*
104   (CALL2 23)                          ; POWER*
106   (STORE 10)
108   (PUSH)
109   (CALL1 17)                          ; PREP1
111   (STORE 12)
113   (LOAD&PUSH 4)
114   (CALL1 17)                          ; PREP1
116   (STORE 4)
117   (LOAD&CDR&PUSH 12)
119   (JMPIFNOTEQTO 24 L129)              ; 1
122   (LOAD 12)
123   (CAR)
124   (CDR&PUSH)
125   (CONST&PUSH 25)                     ; (1 1)
126   (CALLS2&JMPIF 2 L132)               ; EQUAL
129   L129
129   (CONST&PUSH 26)                     ; "Illegal kernel in ADJOIN-PVAR"
130   (CALL1 6)                           ; BREAK
132   L132
132   (LOAD 12)
133   (CAR)
134   (CAR)
135   (STORE 12)
137   (PUSH)
138   (CONST&PUSH 0)                      ; DISREP
139   (PUSH-UNBOUND 1)
141   (CALLS2&STORE 132 10)               ; GET
144   L144
144   (LOAD&PUSH 12)
145   (CALL1 27)                          ; KEY-VAR-POW
147   (SETVALUE 3)                        ; ANS
149   (JMPIF L309)
152   (LOAD&JMPIF 8 L160)
155   (LOAD&PUSH 10)
156   (CALL1 29)                          ; TVAR-LIM
158   (STORE 8)
160   L160
160   (PUSH)
161   (CALL1&JMPIFNOT 30 L203)            ; LIM-INFP
164   (LOAD 12)
165   (STORE 9)
167   (PUSH-UNBOUND 1)
169   (CALLS2&STORE 143 12)               ; GENSYM
172   (LOAD&PUSH 10)
173   (CONST&PUSH 22)                     ; -1
174   (CALL2 23)                          ; POWER*
176   (STORE 10)
178   (LOAD&PUSH 8)
179   (CALL1 31)                          ; LIM-RECIP
181   (STORE 8)
183   (CONST&PUSH 32)                     ; (-1 . 1)
185   (LOAD&PUSH 5)
186   (CALL2 28)                          ; E*
188   (STORE 4)
189   (LOAD&PUSH 12)
190   (LOAD&PUSH 11)
191   (CONST&PUSH 0)                      ; DISREP
192   (CALL 3 33)                         ; PUTPROP
195   (LOAD&PUSH 9)
196   (LOAD 11)
197   (CONS&PUSH)
198   (GETVALUE 34)                       ; KEY-VARS
200   (CONS)
201   (SETVALUE 34)                       ; KEY-VARS
203   L203
203   (LOAD&PUSH 10)
204   (GETVALUE&PUSH 1)                   ; TLIST
206   (CALL2&JMPIFNOT 4 L213)             ; ASSOL
209   (CONST&PUSH 35)                     ; BAD2
211   (CALL1 6)                           ; BREAK
213   L213
213   (LOAD&PUSH 10)
214   (GETVALUE 1)                        ; TLIST
216   (CAR)
217   (CDR)
218   (CAR&PUSH)
219   (CALLS1&PUSH 158)                   ; COPY-LIST
221   (LOAD&PUSH 10)
222   (NIL&PUSH)
223   (LOAD&PUSH 16)
224   (LOAD 10)
225   (LIST* 5)
227   (STORE 7)
228   (PUSH)
229   (CALL1 36)                          ; ADJOIN-DATUM
231   (LOAD&PUSH 12)
232   (LOAD 11)
233   (CONS&PUSH)
234   (GETVALUE 34)                       ; KEY-VARS
236   (CONS)
237   (SETVALUE 34)                       ; KEY-VARS
239   (CAR&PUSH)
240   (GETVALUE 37)                       ; IVARS
242   (CONS)
243   (SETVALUE 37)                       ; IVARS
245   (LOAD&PUSH 12)
246   (LOAD 9)
247   (CONS&PUSH)
248   (GETVALUE 38)                       ; TVAR-LIMITS
250   (CONS)
251   (SETVALUE 38)                       ; TVAR-LIMITS
253   (LOAD 12)
254   L254
254   (PUSH)
255   (LOAD 5)
256   (CONS)
257   L257
257   (UNBIND1)
258   (SKIP&RET 10)
260   L260
260   (CONST&PUSH 12)                     ; "bad exponential in adjoin-pvar"
261   (CALL1 6)                           ; BREAK
263   (JMP L257)
265   L265
265   (LOAD 3)
266   (CDR)
267   (CAR&PUSH)
268   (JMPIFNOTEQTO 10 L260)              ; $%I
271   (LOAD 3)
272   (CDR)
273   (CDR&PUSH)
274   (CONST&PUSH 10)                     ; $%I
275   (NIL)
276   (CONS&PUSH)
277   (CALL2&JMPIFNOT 11 L260)            ; MFREE
280   (CONST&PUSH 13)                     ; "now"
281   (CALL1 6)                           ; BREAK
283   (LOAD&PUSH 3)
284   (CONST&PUSH 10)                     ; $%I
285   (CALL2 14)                          ; DIV*
287   (STORE 3)
288   (CONST&PUSH 15)                     ; (%COS)
289   (LOAD&PUSH 4)
290   (LIST&PUSH 2)
292   (CALL1&PUSH 16)                     ; ADJOIN-TVAR
294   (CONST&PUSH 10)                     ; $%I
295   (CALL1&PUSH 17)                     ; PREP1
297   (CONST&PUSH 18)                     ; (%SIN)
298   (LOAD&PUSH 6)
299   (LIST&PUSH 2)
301   (CALL1&PUSH 16)                     ; ADJOIN-TVAR
303   (CALL2&PUSH 19)                     ; PSTIMES
305   (CALL2 20)                          ; PSPLUS
307   (JMP L254)
309   L309
309   (CAR&PUSH)
310   (LOAD&PUSH 5)
311   (GETVALUE 3)                        ; ANS
313   (CDR&PUSH)
314   (CALL2 28)                          ; E*
316   (CONS)
317   (JMP L257)


Disassembly of function #:|(DEFUN ADJOIN-DATUM (DATUM) ...)-113|
(CONST 0) = ADJOIN-DATUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADJOIN-DATUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADJOIN-DATUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADJOIN-DATUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADJOIN-DATUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADJOIN-DATUM
8     (SKIP&RET 1)


Disassembly of function ADJOIN-DATUM
(CONST 0) = TLIST
(CONST 1) = STRONGER-VAR?
(CONST 2) = RENUMBER-TLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (TLIST)
writes special variable : (TLIST)
41 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; TLIST
2     (NIL&PUSH)
3     (LOAD&JMPIFNOT 1 L47)
6     L6
6     (LOAD 1)
7     (CAR)
8     (CAR&PUSH)
9     (LOAD&CAR&PUSH 4)
11    (CALL2&JMPIFNOT 1 L38)              ; STRONGER-VAR?
14    (LOAD&JMPIFNOT 0 L30)
17    (LOAD&PUSH 0)
18    (LOAD&PUSH 4)
19    (LOAD 3)
20    (CONS&PUSH)
21    (CALLS1 170)                        ; RPLACD
23    (LOAD 0)
24    (CDR)
25    L25
25    (PUSH)
26    (CALL1 2)                           ; RENUMBER-TLIST
28    (SKIP&RET 4)
30    L30
30    (LOAD&PUSH 3)
31    (GETVALUE 0)                        ; TLIST
33    (CONS)
34    (SETVALUE 0)                        ; TLIST
36    (JMP L25)
38    L38
38    (LOAD&CDR&PUSH 1)
40    (LOAD 2)
41    (STORE 1)
42    (POP&STORE 1)
44    (LOAD&JMPIF 1 L6)
47    L47
47    (GETVALUE&PUSH 0)                   ; TLIST
49    (LOAD&PUSH 4)
50    (NIL)
51    (CONS&PUSH)
52    (CALLSR 2 35)                       ; NCONC
55    (SETVALUE 0)                        ; TLIST
57    (SKIP&RET 4)


Disassembly of function #:|(DEFUN RENUMBER-TLIST (TLIST) ...)-114|
(CONST 0) = RENUMBER-TLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RENUMBER-TLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RENUMBER-TLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RENUMBER-TLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RENUMBER-TLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RENUMBER-TLIST
8     (SKIP&RET 1)


Disassembly of function RENUMBER-TLIST
(CONST 0) = TLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (TLIST)
43 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; TLIST
3     (GETVALUE 0)                        ; TLIST
5     (CAR)
6     (CDR)
7     (CDR)
8     (CDR)
9     (CDR&PUSH)
10    (GETVALUE 0)                        ; TLIST
12    (CDR)
13    (CAR)
14    (CDR)
15    (CDR)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (CALLS1 170)                        ; RPLACD
21    (GETVALUE 0)                        ; TLIST
23    (CDR&PUSH)
24    (LOAD&JMPIFNOT 0 L49)
27    L27
27    (LOAD 0)
28    (CAR)
29    (CDR)
30    (CDR)
31    (CDR)
32    (CDR&PUSH)
33    (LOAD 1)
34    (CAR)
35    (CDR)
36    (CDR)
37    (CDR)
38    (CDR)
39    (CDR&PUSH)
40    (CALLS2&PUSH 150)                   ; 1+
42    (CALLS1 170)                        ; RPLACD
44    (LOAD&CDR&STORE 0)
46    (LOAD&JMPIF 0 L27)
49    L49
49    (NIL)
50    (SKIP 1)
52    (UNBIND1)
53    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TVAR? (VAR) ...)-115|
(CONST 0) = TVAR?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TVAR?>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TVAR?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TVAR?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TVAR?>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TVAR?
8     (SKIP&RET 1)


Disassembly of function TVAR?
(CONST 0) = VAR
(CONST 1) = ARRAY
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CALLS2 5)                          ; ATOM
7     (JMPIF1 L16)
9     (CONST&PUSH 1)                      ; ARRAY
10    (GETVALUE 0)                        ; VAR
12    (CAR)
13    (CDR&PUSH)
14    (CALL2 2)                           ; MEMQ
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN STRONGER-VAR? (V1 V2) ...)-116|
(CONST 0) = STRONGER-VAR?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRONGER-VAR?>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRONGER-VAR?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRONGER-VAR?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRONGER-VAR?>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRONGER-VAR?
8     (SKIP&RET 1)


Disassembly of function STRONGER-VAR?
(CONST 0) = (1 . 1)
(CONST 1) = ANS
(CONST 2) = ALIKE1
(CONST 3) = "stronger-var? called on equal vars"
(CONST 4) = BREAK
(CONST 5) = MEXPTP
(CONST 6) = $RATNUMP
(CONST 7) = PREP1
(CONST 8) = "= vars in stronger-var?"
(CONST 9) = E>
(CONST 10) = TVAR-LIM
(CONST 11) = $FINITE
(CONST 12) = GREAT
(CONST 13) = MTIMESP
(CONST 14) = ORDER-VARS-BY-STRENGTH
(CONST 15) = EDISREP
(CONST 16) = POWER*
(CONST 17) = STRONGER-VARS?
(CONST 18) = TVAR?
(CONST 19) = TLIST
(CONST 20) = ASSOL
(CONST 21) = MFREE
(CONST 22) = "Unhandled multivar datum comparison"
(CONST 23) = %LOG
(CONST 24) = MEXPT
(CONST 25) = $%E
(CONST 26) = (%LOG)
(CONST 27) = "Unhandled var in stronger-var?"
(CONST 28) = LOG-ABS-TVAR
(CONST 29) = (%LOG)
(CONST 30) = "Unhandled var in stronger-var?"
(CONST 31) = "Unhandled var in stronger-var?"
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST ANS)
writes special variable : (ANS)
293 byte-code instructions:
0     L0
0     (CONST&PUSH 0)                      ; (1 . 1)
1     (CONST&PUSH 0)                      ; (1 . 1)
2     (NIL&PUSH)
3     (NIL)
4     (BIND 1)                            ; ANS
6     (LOAD&PUSH 8)
7     (LOAD&PUSH 8)
8     (CALL2&JMPIFNOT 2 L14)              ; ALIKE1
11    (CONST&PUSH 3)                      ; "stronger-var? called on equal vars"
12    (CALL1 4)                           ; BREAK
14    L14
14    (LOAD&PUSH 8)
15    (CALL1&JMPIFNOT 5 L37)              ; MEXPTP
18    (LOAD 8)
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (CALL1&JMPIFNOT 6 L37)              ; $RATNUMP
25    (LOAD 8)
26    (CDR)
27    (CDR)
28    (CAR&PUSH)
29    (CALL1 7)                           ; PREP1
31    (STORE 5)
32    (LOAD 8)
33    (CDR)
34    (CAR)
35    (STORE 8)
37    L37
37    (LOAD&PUSH 7)
38    (CALL1&JMPIFNOT 5 L59)              ; MEXPTP
41    (LOAD 7)
42    (CDR)
43    (CDR)
44    (CAR&PUSH)
45    (CALL1&JMPIFNOT 6 L59)              ; $RATNUMP
48    (LOAD 7)
49    (CDR)
50    (CDR)
51    (CAR&PUSH)
52    (CALL1 7)                           ; PREP1
54    (STORE 4)
55    (LOAD 7)
56    (CDR)
57    (CAR)
58    (STORE 7)
59    L59
59    (LOAD&PUSH 8)
60    (LOAD&PUSH 8)
61    (CALL2&JMPIF 2 L211)                ; ALIKE1
65    (LOAD&PUSH 7)
66    (CALL1&PUSH 10)                     ; TVAR-LIM
68    (JMPIFNOTEQTO 11 L85)               ; $FINITE
71    (LOAD&PUSH 7)
72    (LOAD 9)
73    (STORE 8)
75    (POP&STORE 8)
77    (LOAD&PUSH 4)
78    (LOAD 6)
79    (STORE 5)
80    (POP&STORE 5)
82    (LOAD 3)
83    (NOT)
84    (STORE 3)
85    L85
85    (LOAD&PUSH 8)
86    (CALL1&PUSH 10)                     ; TVAR-LIM
88    (JMPIFEQTO 11 L228)                 ; $FINITE
92    (LOAD&PUSH 7)
93    (CALL1&JMPIFNOT 13 L110)            ; MTIMESP
96    (LOAD&PUSH 7)
97    (LOAD 9)
98    (STORE 8)
100   (POP&STORE 8)
102   (LOAD&PUSH 4)
103   (LOAD 6)
104   (STORE 5)
105   (POP&STORE 5)
107   (LOAD 3)
108   (NOT)
109   (STORE 3)
110   L110
110   (LOAD&PUSH 8)
111   (CALL1&JMPIF 13 L241)               ; MTIMESP
115   (LOAD&PUSH 7)
116   (CALL1&JMPIFNOT 18 L133)            ; TVAR?
119   (LOAD&PUSH 7)
120   (LOAD 9)
121   (STORE 8)
123   (POP&STORE 8)
125   (LOAD&PUSH 4)
126   (LOAD 6)
127   (STORE 5)
128   (POP&STORE 5)
130   (LOAD 3)
131   (NOT)
132   (STORE 3)
133   L133
133   (LOAD&PUSH 8)
134   (CALL1&JMPIF 18 L308)               ; TVAR?
138   (LOAD 7)
139   (CAR)
140   (CAR&PUSH)
141   (JMPIFNOTEQTO 23 L158)              ; %LOG
144   (LOAD&PUSH 7)
145   (LOAD 9)
146   (STORE 8)
148   (POP&STORE 8)
150   (LOAD&PUSH 4)
151   (LOAD 6)
152   (STORE 5)
153   (POP&STORE 5)
155   (LOAD 3)
156   (NOT)
157   (STORE 3)
158   L158
158   (LOAD 8)
159   (CAR)
160   (CAR&PUSH)
161   (JMPIFEQTO 23 L350)                 ; %LOG
165   (LOAD 8)
166   (CAR)
167   (CAR&PUSH)
168   (JMPIFNOTEQTO 24 L190)              ; MEXPT
171   (LOAD 8)
172   (CDR)
173   (CAR&PUSH)
174   (JMPIFNOTEQTO 25 L190)              ; $%E
177   (LOAD 7)
178   (CAR)
179   (CAR&PUSH)
180   (JMPIFNOTEQTO 24 L190)              ; MEXPT
183   (LOAD 7)
184   (CDR)
185   (CAR&PUSH)
186   (JMPIFEQTO 25 L381)                 ; $%E
190   L190
190   (CONST 31)                          ; "Unhandled var in stronger-var?"
192   L192
192   (PUSH)
193   (CALL1 4)                           ; BREAK
195   L195
195   (SETVALUE 1)                        ; ANS
197   (LOAD&JMPIF 3 L397)
201   (GETVALUE 1)                        ; ANS
203   L203
203   (UNBIND1)
204   (SKIP&RET 6)
206   L206
206   (CONST&PUSH 8)                      ; "= vars in stronger-var?"
207   (CALL1 4)                           ; BREAK
209   (JMP L203)
211   L211
211   (LOAD&PUSH 5)
212   (LOAD&PUSH 5)
213   (CALLS2&JMPIF 2 L206)               ; EQUAL
216   (LOAD&PUSH 5)
217   (LOAD&PUSH 5)
218   (CALL2 9)                           ; E>
220   (JMP L203)
222   L222
222   (LOAD&PUSH 8)
223   (LOAD&PUSH 8)
224   (CALL2 12)                          ; GREAT
226   (JMP L203)
228   L228
228   (LOAD&PUSH 7)
229   (CALL1&PUSH 10)                     ; TVAR-LIM
231   (JMPIFEQTO 11 L222)                 ; $FINITE
234   (LOAD 3)
235   (JMP L203)
237   L237
237   (LOAD 8)
238   (CDR)
239   (JMP L257)
241   L241
241   (LOAD&CDR&PUSH 8)
243   (CALL1&PUSH 14)                     ; ORDER-VARS-BY-STRENGTH
245   (LOAD&PUSH 8)
246   (CALL1&JMPIF 13 L237)               ; MTIMESP
249   (LOAD&PUSH 8)
250   (LOAD&PUSH 6)
251   (CALL1&PUSH 15)                     ; EDISREP
253   (CALL2&PUSH 16)                     ; POWER*
255   (NIL)
256   (CONS)
257   L257
257   (PUSH)
258   (CALL1&PUSH 14)                     ; ORDER-VARS-BY-STRENGTH
260   (CALL2 17)                          ; STRONGER-VARS?
262   (JMP L195)
265   L265
265   (LOAD&PUSH 8)
266   (GETVALUE&PUSH 19)                  ; TLIST
268   (CALL2 20)                          ; ASSOL
270   (CDR)
271   (CDR)
272   (CDR)
273   (CDR)
274   (CDR&PUSH)
275   (LOAD&PUSH 8)
276   (GETVALUE&PUSH 19)                  ; TLIST
278   (CALL2 20)                          ; ASSOL
280   (CDR)
281   (CDR)
282   (CDR)
283   (CDR)
284   (CDR&PUSH)
285   (LOAD&PUSH 1)
286   (LOAD&PUSH 1)
287   (CALLSR 1 48)                       ; >
290   (SKIP 2)
292   (JMP L195)
295   L295
295   (CONST 22)                          ; "Unhandled multivar datum comparison"
297   (JMP L192)
300   L300
300   (T)
301   (JMP L195)
304   L304
304   (CONST 26)                          ; (%LOG)
306   (JMP L370)
308   L308
308   (LOAD&PUSH 7)
309   (CALL1&JMPIF 18 L265)               ; TVAR?
312   (LOAD&PUSH 7)
313   (LOAD&PUSH 9)
314   (NIL)
315   (CONS&PUSH)
316   (CALL2&JMPIF 21 L295)               ; MFREE
319   (LOAD 7)
320   (CAR)
321   (CAR&PUSH)
322   (JMPIFEQTO 23 L300)                 ; %LOG
325   (LOAD 7)
326   (CAR)
327   (CAR&PUSH)
328   (JMPIFNOTEQTO 24 L337)              ; MEXPT
331   (LOAD 7)
332   (CDR)
333   (CAR&PUSH)
334   (JMPIFEQTO 25 L304)                 ; $%E
337   L337
337   (CONST 27)                          ; "Unhandled var in stronger-var?"
339   (JMP L192)
342   L342
342   (LOAD&PUSH 8)
343   (CALL1&PUSH 28)                     ; LOG-ABS-TVAR
345   (LOAD&PUSH 8)
346   (CALL1 28)                          ; LOG-ABS-TVAR
348   (JMP L390)
350   L350
350   (LOAD 7)
351   (CAR)
352   (CAR&PUSH)
353   (JMPIFEQTO 23 L342)                 ; %LOG
356   (LOAD 7)
357   (CAR)
358   (CAR&PUSH)
359   (JMPIFNOTEQTO 24 L376)              ; MEXPT
362   (LOAD 7)
363   (CDR)
364   (CAR&PUSH)
365   (JMPIFNOTEQTO 25 L376)              ; $%E
368   (CONST 29)                          ; (%LOG)
370   L370
370   (PUSH)
371   (LOAD&PUSH 9)
372   (LIST 2)
374   (JMP L385)
376   L376
376   (CONST 30)                          ; "Unhandled var in stronger-var?"
378   (JMP L192)
381   L381
381   (LOAD 8)
382   (CDR)
383   (CDR)
384   (CAR)
385   L385
385   (PUSH)
386   (LOAD 8)
387   (CDR)
388   (CDR)
389   (CAR)
390   L390
390   (PUSH)
391   (JSR L0)
394   (JMP L195)
397   L397
397   (GETVALUE 1)                        ; ANS
399   (NOT)
400   (JMP L203)


Disassembly of function #:|(DEFUN NEG-MONOM? (EXP) ...)-117|
(CONST 0) = NEG-MONOM?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEG-MONOM?>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEG-MONOM?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEG-MONOM?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEG-MONOM?>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEG-MONOM?
8     (SKIP&RET 1)


Disassembly of function NEG-MONOM?
(CONST 0) = EXP
(CONST 1) = MTIMESP
(CONST 2) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1 1)                           ; MTIMESP
7     (JMPIFNOT1 L30)
9     (GETVALUE 0)                        ; EXP
11    (CDR)
12    (CAR&PUSH)
13    (CONST 2)                           ; -1
14    (EQ)
15    (JMPIFNOT1 L30)
17    (GETVALUE 0)                        ; EXP
19    (CDR)
20    (CDR)
21    (CDR)
22    (NOT)
23    (JMPIFNOT1 L30)
25    (GETVALUE 0)                        ; EXP
27    (CDR)
28    (CDR)
29    (CAR)
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LOG-ABS-TVAR (VAR) ...)-118|
(CONST 0) = LOG-ABS-TVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOG-ABS-TVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOG-ABS-TVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOG-ABS-TVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOG-ABS-TVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOG-ABS-TVAR
8     (SKIP&RET 1)


Disassembly of function LOG-ABS-TVAR
(CONST 0) = VAR
(CONST 1) = TVAR?
(CONST 2) = %LOG
(CONST 3) = NEG-MONOM?
(CONST 4) = "Illegal logarithmic tvar"
(CONST 5) = BREAK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE 0)                        ; VAR
5     (CDR)
6     (CAR&PUSH)
7     (CALL1&JMPIF 1 L33)                 ; TVAR?
10    (GETVALUE 0)                        ; VAR
12    (CDR)
13    (CAR)
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFEQTO 2 L33)                   ; %LOG
19    (GETVALUE 0)                        ; VAR
21    (CDR)
22    (CAR&PUSH)
23    (CALL1 3)                           ; NEG-MONOM?
25    (JMPIF1 L30)
27    (CONST&PUSH 4)                      ; "Illegal logarithmic tvar"
28    (CALL1 5)                           ; BREAK
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (GETVALUE 0)                        ; VAR
35    (CDR)
36    (CAR)
37    (JMP L30)


Disassembly of function #:|(DEFUN ORDER-VARS-BY-STRENGTH (VARS) ...)-119|
(CONST 0) = ORDER-VARS-BY-STRENGTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDER-VARS-BY-STRENGTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDER-VARS-BY-STRENGTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDER-VARS-BY-STRENGTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDER-VARS-BY-STRENGTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDER-VARS-BY-STRENGTH
8     (SKIP&RET 1)


Disassembly of function ORDER-VARS-BY-STRENGTH
(CONST 0) = VARS
(CONST 1) = TVARS
(CONST 2) = MFREE
(CONST 3) = STRONGER-VAR?
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TVARS VARS)
54 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VARS
3     (GETVALUE&PUSH 0)                   ; VARS
5     (NIL&PUSH)
6     (LOAD&JMPIFNOT 1 L53)
9     L9
9     (LOAD&CAR&PUSH 1)
11    (GETVALUE&PUSH 1)                   ; TVARS
13    (CALL2&JMPIF 2 L48)                 ; MFREE
16    (LOAD&PUSH 0)
17    (LOAD&JMPIFNOT 0 L32)
20    L20
20    (LOAD&CAR&PUSH 2)
22    (LOAD&CAR&PUSH 1)
24    (CALL2&JMPIF 3 L59)                 ; STRONGER-VAR?
27    (LOAD&CDR&STORE 0)
29    (LOAD&JMPIF 0 L20)
32    L32
32    (LOAD&JMPIFNOT 1 L76)
35    (LOAD&PUSH 1)
36    (PUSH-UNBOUND 1)
38    (CALLS1&PUSH 156)                   ; LAST
40    (LOAD&CAR&PUSH 3)
42    (NIL)
43    (CONS&PUSH)
44    (CALLS1 170)                        ; RPLACD
46    (SKIP 1)
48    L48
48    (LOAD&CDR&STORE 1)
50    (LOAD&JMPIF 1 L9)
53    L53
53    (POP)
54    (SKIP 1)
56    (UNBIND1)
57    (SKIP&RET 2)
59    L59
59    (LOAD&PUSH 0)
60    (LOAD&CAR&PUSH 1)
62    (LOAD 2)
63    (CDR)
64    (CONS&PUSH)
65    (CALLS1 170)                        ; RPLACD
67    (LOAD&PUSH 0)
68    (LOAD&CAR&PUSH 3)
70    (CALLS1 168)                        ; RPLACA
72    (SKIP 1)
74    (JMP L48)
76    L76
76    (LOAD&CAR&PUSH 2)
78    (NIL)
79    (CONS)
80    (STORE 1)
81    (SKIP 1)
83    (JMP L48)


Disassembly of function #:|(DEFUN STRONGER-VARS? (VARS1 VARS2) ...)-120|
(CONST 0) = STRONGER-VARS?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRONGER-VARS?>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRONGER-VARS?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRONGER-VARS?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRONGER-VARS?>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRONGER-VARS?
8     (SKIP&RET 1)


Disassembly of function STRONGER-VARS?
(CONST 0) = "two equal vars generated"
(CONST 1) = BREAK
(CONST 2) = TVAR-LIM
(CONST 3) = LIM-INFP
(CONST 4) = LIM-ZEROP
(CONST 5) = "var with non-zero finite lim?"
(CONST 6) = "two equal vars generated"
(CONST 7) = "var with non-zero finite lim?"
(CONST 8) = ALIKE1
(CONST 9) = STRONGER-VAR?
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
56 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (LOAD&JMPIFNOT 1 L42)
5     L5
5     (LOAD&JMPIF 0 L69)
8     (LOAD&JMPIFNOT 1 L66)
11    (LOAD&CAR&PUSH 1)
13    (CALL1&PUSH 2)                      ; TVAR-LIM
15    (LOAD&PUSH 0)
16    (CALL1&JMPIF 3 L57)                 ; LIM-INFP
19    (LOAD&PUSH 0)
20    (CALL1&JMPIFNOT 4 L60)              ; LIM-ZEROP
23    L23
23    (NIL)
24    (SKIP&RET 6)
26    L26
26    (CONST 5)                           ; "var with non-zero finite lim?"
27    (JMP L61)
29    L29
29    (CONST 0)                           ; "two equal vars generated"
30    L30
30    (PUSH)
31    (CALL1 1)                           ; BREAK
33    L33
33    (LOAD&CDR&PUSH 1)
35    (LOAD&CDR&STORE 1)
37    (POP&STORE 1)
39    (LOAD&JMPIF 1 L5)
42    L42
42    (LOAD&JMPIFNOT 0 L29)
45    (LOAD&CAR&PUSH 0)
47    (CALL1&PUSH 2)                      ; TVAR-LIM
49    (LOAD&PUSH 0)
50    (CALL1&JMPIF 3 L23)                 ; LIM-INFP
53    (LOAD&PUSH 0)
54    (CALL1&JMPIFNOT 4 L26)              ; LIM-ZEROP
57    L57
57    (T)
58    (SKIP&RET 6)
60    L60
60    (CONST 7)                           ; "var with non-zero finite lim?"
61    L61
61    (PUSH)
62    (CALL1 1)                           ; BREAK
64    (SKIP&RET 6)
66    L66
66    (CONST 6)                           ; "two equal vars generated"
67    (JMP L30)
69    L69
69    (LOAD&CAR&PUSH 1)
71    (LOAD&CAR&PUSH 1)
73    (CALL2&JMPIF 8 L33)                 ; ALIKE1
76    (LOAD&CAR&PUSH 1)
78    (LOAD&CAR&PUSH 1)
80    (CALL2 9)                           ; STRONGER-VAR?
82    (SKIP&RET 5)


Disassembly of function #:|(DEFUN STRONGER-DATUM? (D1 D2) ...)-121|
(CONST 0) = STRONGER-DATUM?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRONGER-DATUM?>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRONGER-DATUM?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRONGER-DATUM?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRONGER-DATUM?>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRONGER-DATUM?
8     (SKIP&RET 1)


Disassembly of function STRONGER-DATUM?
(CONST 0) = (MTEXT)
(CONST 1) = |Is  |
(CONST 2) = | stronger than |
(CONST 3) = (?)
(CONST 4) = RETRIEVE
(CONST 5) = ($YES $Y $NO $N)
(CONST 6) = MEMQ
(CONST 7) = "~%Acceptable answers are Yes, Y, No, N~%"
(CONST 8) = MTELL
(CONST 9) = ($YES $Y)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
30 byte-code instructions:
0     (LOAD&CAR&STORE 2 2)
3     (LOAD&CAR&STORE 1 1)
6     (PUSH-NIL 2)
8     (LOAD&JMPIFNOT 1 L18)
11    (JMP L41)
13    L13
13    (T&STORE 1)
15    (LOAD&JMPIF 1 L41)
18    L18
18    (CONST&PUSH 0)                      ; (MTEXT)
19    (CONST&PUSH 1)                      ; |Is  |
20    (LOAD&PUSH 6)
21    (CONST&PUSH 2)                      ; | stronger than |
22    (LOAD&PUSH 7)
23    (CONST 3)                           ; (?)
24    (LIST*&PUSH 5)
26    (NIL&PUSH)
27    (CALL2 4)                           ; RETRIEVE
29    (STORE 0)
30    (PUSH)
31    (CONST&PUSH 5)                      ; ($YES $Y $NO $N)
32    (CALL2&JMPIF 6 L13)                 ; MEMQ
35    (CONST&PUSH 7)                      ; "~%Acceptable answers are Yes, Y, No, N~%"
36    (CALL1 8)                           ; MTELL
38    (LOAD&JMPIFNOT 1 L18)
41    L41
41    (LOAD&PUSH 0)
42    (CONST&PUSH 9)                      ; ($YES $Y)
43    (CALL2 6)                           ; MEMQ
45    (SKIP&RET 5)


Disassembly of function #:|(DEFUN DATUM-LIM (DATUM) ...)-122|
(CONST 0) = DATUM-LIM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DATUM-LIM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DATUM-LIM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DATUM-LIM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DATUM-LIM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DATUM-LIM
8     (SKIP&RET 1)


Disassembly of function DATUM-LIM
(CONST 0) = TVAR?
(CONST 1) = ($INF $MINF)
(CONST 2) = MEMQ
(CONST 3) = $ZEROA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
20 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (CALL1&JMPIFNOT 0 L17)              ; TVAR?
5     (LOAD 1)
6     (CDR)
7     (CDR)
8     (CAR&PUSH)
9     (LOAD&PUSH 0)
10    (CONST&PUSH 1)                      ; ($INF $MINF)
11    (CALL2&JMPIF 2 L23)                 ; MEMQ
14    (CONST 3)                           ; $ZEROA
15    (SKIP&RET 3)
17    L17
17    (LOAD 1)
18    (CDR)
19    (CDR)
20    (CAR)
21    (SKIP&RET 2)
23    L23
23    (POP)
24    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TVAR-LIM (KERNEL) ...)-123|
(CONST 0) = TVAR-LIM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TVAR-LIM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TVAR-LIM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TVAR-LIM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TVAR-LIM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TVAR-LIM
8     (SKIP&RET 1)


Disassembly of function TVAR-LIM
(CONST 0) = TVARS
(CONST 1) = MFREE
(CONST 2) = COEF-SIGN
(CONST 3) = TLIST
(CONST 4) = ASSOL
(CONST 5) = DATUM-LIM
(CONST 6) = -1
(CONST 7) = POWER*
(CONST 8) = LIM-RECIP
(CONST 9) = MEXPT
(CONST 10) = $RATNUMP
(CONST 11) = PREP1
(CONST 12) = LIM-POWER
(CONST 13) = $%E
(CONST 14) = LIM-EXP
(CONST 15) = "Unhandled case in tvar-lim"
(CONST 16) = BREAK
(CONST 17) = MTIMES
(CONST 18) = ANS
(CONST 19) = LIM-TIMES
(CONST 20) = %LOG
(CONST 21) = TVAR?
(CONST 22) = ZL-ASSOC
(CONST 23) = ($INF $MINF)
(CONST 24) = MEMQ
(CONST 25) = LIM-LOG
(CONST 26) = $MINF
(CONST 27) = MPLUS
(CONST 28) = $INF
(CONST 29) = NEG-MONOM?
(CONST 30) = "Illegal log kernel"
(CONST 31) = (%SIN %COS)
(CONST 32) = LIM-INFP
(CONST 33) = "Invalid trig kernel in tvar-lim"
(CONST 34) = $FINITE
(CONST 35) = "Unhandled kernel in tvar-lim"
(CONST 36) = TVAR-LIMITS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TVAR-LIMITS ANS TLIST TVARS)
writes special variables : (TVAR-LIMITS ANS)
212 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (GETVALUE&PUSH 0)                   ; TVARS
3     (CALL2&JMPIF 1 L94)                 ; MFREE
7     (LOAD&PUSH 1)
8     (GETVALUE&PUSH 3)                   ; TLIST
10    (CALL2&PUSH 4)                      ; ASSOL
12    (NIL&PUSH)
13    (LOAD&JMPIFNOT 1 L22)
16    (PUSH)
17    (CALL1 5)                           ; DATUM-LIM
19    (JMPIF1 L310)
22    L22
22    (LOAD&PUSH 3)
23    (CONST&PUSH 6)                      ; -1
24    (CALL2&PUSH 7)                      ; POWER*
26    (GETVALUE&PUSH 3)                   ; TLIST
28    (CALL2 4)                           ; ASSOL
30    (STORE 1)
31    (JMPIFNOT L45)
33    (PUSH)
34    (CALL1 5)                           ; DATUM-LIM
36    (STORE 0)
37    (JMPIFNOT L45)
39    (PUSH)
40    (CALL1 8)                           ; LIM-RECIP
42    (JMPIF1 L310)
45    L45
45    (LOAD 3)
46    (CAR)
47    (CAR&PUSH)
48    (JMPIFNOTEQTO 9 L264)               ; MEXPT
52    (LOAD 3)
53    (CDR)
54    (CAR&PUSH)
55    (GETVALUE&PUSH 3)                   ; TLIST
57    (CALL2 4)                           ; ASSOL
59    (STORE 1)
60    (JMPIFNOT L69)
62    (LOAD 3)
63    (CDR)
64    (CDR)
65    (CAR&PUSH)
66    (CALL1&JMPIF 10 L99)                ; $RATNUMP
69    L69
69    (LOAD 3)
70    (CDR)
71    (CDR)
72    (CAR&PUSH)
73    (CALL1&JMPIFNOT 10 L116)            ; $RATNUMP
76    (LOAD 3)
77    (CDR)
78    (CAR&PUSH)
79    (JSR L0)
82    L82
82    (PUSH)
83    (LOAD 4)
84    (CDR)
85    (CDR)
86    (CAR&PUSH)
87    (CALL1&PUSH 11)                     ; PREP1
89    (CALL2 12)                          ; LIM-POWER
91    (JMP L291)
94    L94
94    (LOAD&PUSH 1)
95    (CALL1 2)                           ; COEF-SIGN
97    (SKIP&RET 2)
99    L99
99    (LOAD&PUSH 1)
100   (CALL1 5)                           ; DATUM-LIM
102   (JMP L82)
104   L104
104   (LOAD 3)
105   (CDR)
106   (CDR)
107   (CAR&PUSH)
108   (JSR&PUSH L0)
111   (CALL1 14)                          ; LIM-EXP
113   (JMP L291)
116   L116
116   (LOAD 3)
117   (CDR)
118   (CAR&PUSH)
119   (JMPIFEQTO 13 L104)                 ; $%E
122   (CONST 15)                          ; "Unhandled case in tvar-lim"
123   (JMP L288)
126   L126
126   (LOAD 3)
127   (CDR)
128   (CAR&PUSH)
129   (JSR&PUSH L0)
132   (LOAD 4)
133   (CDR)
134   (CDR&PUSH)
135   (LOAD 1)
136   (BIND 18)                           ; ANS
138   (LOAD&JMPIFNOT 3 L158)
141   L141
141   (GETVALUE&PUSH 18)                  ; ANS
143   (LOAD&CAR&PUSH 4)
145   (JSR&PUSH L0)
148   (CALL2&PUSH 19)                     ; LIM-TIMES
150   (LOAD&CDR&STORE 4)
152   (POP)
153   (SETVALUE 18)                       ; ANS
155   (LOAD&JMPIF 3 L141)
158   L158
158   (GETVALUE 18)                       ; ANS
160   (UNBIND1)
161   (SKIP 2)
163   (JMP L291)
166   L166
166   (LOAD&PUSH 0)
167   (CALL1 25)                          ; LIM-LOG
169   (SKIP 1)
171   (JMP L291)
174   L174
174   (LOAD 3)
175   (CDR)
176   (CAR&PUSH)
177   (GETVALUE&PUSH 3)                   ; TLIST
179   (CALL2 22)                          ; ZL-ASSOC
181   (CDR)
182   (CDR)
183   (CAR&PUSH)
184   (LOAD&PUSH 0)
185   (CONST&PUSH 23)                     ; ($INF $MINF)
186   (CALL2&JMPIF 24 L166)               ; MEMQ
189   (CONST 26)                          ; $MINF
191   (SKIP 1)
193   (JMP L291)
196   L196
196   (CONST 26)                          ; $MINF
198   (JMP L291)
201   L201
201   (CONST 28)                          ; $INF
203   (JMP L291)
206   L206
206   (CONST 28)                          ; $INF
208   (JMP L291)
211   L211
211   (LOAD 3)
212   (CDR)
213   (CAR&PUSH)
214   (CALL1&JMPIF 21 L174)               ; TVAR?
217   (LOAD 3)
218   (CDR)
219   (CAR)
220   (CAR)
221   (CAR&PUSH)
222   (JMPIFEQTO 27 L196)                 ; MPLUS
225   (LOAD 3)
226   (CDR)
227   (CAR)
228   (CAR)
229   (CAR&PUSH)
230   (JMPIFEQTO 20 L201)                 ; %LOG
233   (LOAD 3)
234   (CDR)
235   (CAR&PUSH)
236   (CALL1&JMPIF 29 L206)               ; NEG-MONOM?
239   (CONST 30)                          ; "Illegal log kernel"
241   (JMP L288)
243   L243
243   (CONST&PUSH 33)                     ; "Invalid trig kernel in tvar-lim"
245   (CALL1 16)                          ; BREAK
247   (CONST 34)                          ; $FINITE
249   (JMP L291)
251   L251
251   (LOAD 3)
252   (CDR)
253   (CAR&PUSH)
254   (JSR&PUSH L0)
257   (CALL1&JMPIFNOT 32 L243)            ; LIM-INFP
260   (CONST 34)                          ; $FINITE
262   (JMP L291)
264   L264
264   (LOAD 3)
265   (CAR)
266   (CAR&PUSH)
267   (JMPIFEQTO 17 L126)                 ; MTIMES
271   (LOAD 3)
272   (CAR)
273   (CAR&PUSH)
274   (JMPIFEQTO 20 L211)                 ; %LOG
278   (LOAD 3)
279   (CAR)
280   (CAR&PUSH)
281   (CONST&PUSH 31)                     ; (%SIN %COS)
283   (CALL2&JMPIF 24 L251)               ; MEMQ
286   (CONST 35)                          ; "Unhandled kernel in tvar-lim"
288   L288
288   (PUSH)
289   (CALL1 16)                          ; BREAK
291   L291
291   (STORE 0)
292   (LOAD&JMPIFNOT 1 L307)
295   (CDR)
296   (CDR)
297   (CDR)
298   (CDR)
299   (CAR&PUSH)
300   (LOAD 1)
301   (CONS&PUSH)
302   (GETVALUE 36)                       ; TVAR-LIMITS
304   (CONS)
305   (SETVALUE 36)                       ; TVAR-LIMITS
307   L307
307   (POP)
308   (SKIP&RET 3)
310   L310
310   (SKIP&RET 4)


Disassembly of function #:|(DEFUN COEF-SIGN (COEF) ...)-124|
(CONST 0) = COEF-SIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COEF-SIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COEF-SIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COEF-SIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COEF-SIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COEF-SIGN
8     (SKIP&RET 1)


Disassembly of function COEF-SIGN
(CONST 0) = COEF
(CONST 1) = $%I
(CONST 2) = $FREEOF
(CONST 3) = $IM
(CONST 4) = $ASKSIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (COEF)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; COEF
3     (CONST&PUSH 1)                      ; $%I
4     (GETVALUE&PUSH 0)                   ; COEF
6     (CALL2&JMPIFNOT 2 L16)              ; $FREEOF
9     (GETVALUE&PUSH 0)                   ; COEF
11    (CALL1 4)                           ; $ASKSIGN
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (CONST 3)                           ; $IM
17    (JMP L13)


Disassembly of function #:|(DEFUN GVAR-LIM (GVAR) ...)-125|
(CONST 0) = GVAR-LIM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GVAR-LIM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GVAR-LIM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GVAR-LIM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GVAR-LIM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GVAR-LIM
8     (SKIP&RET 1)


Disassembly of function GVAR-LIM
(CONST 0) = TVAR-LIMITS
(CONST 1) = ASSQ
(CONST 2) = KEY-VARS
(CONST 3) = TVARS
(CONST 4) = MEMQ
(CONST 5) = $ZEROA
(CONST 6) = "Invalid gvar"
(CONST 7) = BREAK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TVARS KEY-VARS TVAR-LIMITS)
19 byte-code instructions:
0     (LOAD&PUSH 1)
1     (GETVALUE&PUSH 0)                   ; TVAR-LIMITS
3     (CALL2 1)                           ; ASSQ
5     (CDR)
6     (JMPIF1 L27)
8     (LOAD&PUSH 1)
9     (GETVALUE&PUSH 2)                   ; KEY-VARS
11    (CALL2 1)                           ; ASSQ
13    (CDR&PUSH)
14    (GETVALUE&PUSH 3)                   ; TVARS
16    (CALL2&JMPIF 4 L24)                 ; MEMQ
19    (CONST&PUSH 6)                      ; "Invalid gvar"
20    (CALL1 7)                           ; BREAK
22    (SKIP&RET 2)
24    L24
24    (CONST 5)                           ; $ZEROA
25    (SKIP&RET 2)
27    L27
27    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSEXPT-FN1 (VARH TRUNC L ...) ...)-126|
(CONST 0) = PSEXPT-FN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSEXPT-FN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSEXPT-FN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSEXPT-FN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSEXPT-FN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSEXPT-FN1
8     (SKIP&RET 1)


Disassembly of function PSEXPT-FN1
(CONST 0) = L
(CONST 1) = M
(CONST 2) = ANS
(CONST 3) = A
(CONST 4) = 0
(CONST 5) = K
(CONST 6) = C
(CONST 7) = E>
(CONST 8) = 1
(CONST 9) = (0 . 1)
(CONST 10) = EDIFF
(CONST 11) = PSTERM
(CONST 12) = PSTRIM-TERMS
(CONST 13) = EREDUCE
(CONST 14) = PSTERM1
(CONST 15) = PSTIMES
(CONST 16) = PSPLUS
(CONST 17) = E+
(CONST 18) = PSCHECK
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A C K M L ANS)
writes special variables : (M C K A)
116 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; L
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; ANS
9     (NIL)
10    (BIND 3)                            ; A
12    (CONST 4)                           ; 0
13    (BIND 5)                            ; K
15    (PUSH-NIL 2)
17    (NIL)
18    (BIND 6)                            ; C
20    (PUSH-NIL 3)
22    (GETVALUE&PUSH 2)                   ; ANS
24    (PUSH-UNBOUND 1)
26    (CALLS1 156)                        ; LAST
28    (SETVALUE 3)                        ; A
30    (JMP L163)
33    L33
33    (LOAD 27)
35    (STORE 1)
36    (GETVALUE 0)                        ; L
38    (STORE 7)
39    (CONST 8)                           ; 1
40    (SETVALUE 5)                        ; K
42    (CONST 9)                           ; (0 . 1)
43    (STORE 2)
44    (GETVALUE 1)                        ; M
46    (STORE 0)
47    (JMP L96)
49    L49
49    (LOAD&PUSH 0)
50    (CALLS2 145)                        ; ZEROP
52    (SKIP 1)
54    (JMPIFNOT L132)
57    (JMP L149)
60    L60
60    (STORE 7)
61    (GETVALUE&PUSH 5)                   ; K
63    (GETVALUE&PUSH 1)                   ; M
65    (CALL2&PUSH 13)                     ; EREDUCE
67    (LOAD&PUSH 8)
68    (LOAD&PUSH 3)
69    (CALL2&PUSH 14)                     ; PSTERM1
71    (LOAD&PUSH 8)
72    (CALL2&PUSH 15)                     ; PSTIMES
74    (CALL2 15)                          ; PSTIMES
76    (SETVALUE 6)                        ; C
78    (LOAD&PUSH 2)
79    (GETVALUE&PUSH 6)                   ; C
81    (CALL2 16)                          ; PSPLUS
83    (STORE 2)
84    (GETVALUE&PUSH 5)                   ; K
86    (CALLS2 150)                        ; 1+
88    (SETVALUE 5)                        ; K
90    (LOAD&PUSH 1)
91    (LOAD&PUSH 28)
93    (CALL2 17)                          ; E+
95    (STORE 1)
96    L96
96    (GETVALUE&PUSH 5)                   ; K
98    (LOAD&PUSH 1)
99    (CALLSR&JMPIF 1 48 L121)            ; >
103   (GETVALUE 2)                        ; ANS
105   (CDR&PUSH)
106   (LOAD&PUSH 26)
108   (LOAD&PUSH 3)
109   (CALL2&PUSH 10)                     ; EDIFF
111   (CALL2 11)                          ; PSTERM
113   (STORE 6)
114   (JMPIFNOT L121)
116   (LOAD&PUSH 7)
117   (LOAD&PUSH 2)
118   (CALL2&JMPIF 12 L60)                ; PSTRIM-TERMS
121   L121
121   (LOAD&CAR&PUSH 2)
123   (LOAD&PUSH 0)
124   (CALLS2&JMPIF 8 L49)                ; NUMBERP
128   (SKIP 1)
130   (JMPIF L149)
132   L132
132   (GETVALUE&PUSH 3)                   ; A
134   (LOAD&PUSH 26)
136   (LOAD 4)
137   (CONS&PUSH)
138   (GETVALUE 3)                        ; A
140   (CDR)
141   (CONS&PUSH)
142   (CALLS1 170)                        ; RPLACD
144   (GETVALUE 3)                        ; A
146   (CDR)
147   (SETVALUE 3)                        ; A
149   L149
149   (GETVALUE&PUSH 1)                   ; M
151   (CALLS2 150)                        ; 1+
153   (SETVALUE 1)                        ; M
155   (LOAD&PUSH 25)
157   (LOAD&PUSH 28)
159   (CALL2 17)                          ; E+
161   (STORE 25)
163   L163
163   (LOAD&PUSH 25)
165   (LOAD&PUSH 30)
167   (CALL2&JMPIFNOT 7 L33)              ; E>
171   (LOAD&PUSH 30)
173   (LOAD&PUSH 30)
175   (LIST&PUSH 1)
177   (GETVALUE 2)                        ; ANS
179   (CDR&PUSH)
180   (CALL 3 18)                         ; PSCHECK
183   (SKIP 3)
185   (UNBIND1)
186   (SKIP 2)
188   (UNBIND 5)
190   (SKIP&RET 8)


Disassembly of function #:|(DEFUN PSEXPT-FN2 (P) ...)-127|
(CONST 0) = PSEXPT-FN2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSEXPT-FN2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSEXPT-FN2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSEXPT-FN2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSEXPT-FN2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSEXPT-FN2
8     (SKIP&RET 1)


Disassembly of function PSEXPT-FN2
(CONST 0) = P
(CONST 1) = TLIST
(CONST 2) = ZL-ASSOC
(CONST 3) = TAYLOR2
(CONST 4) = PSEXPT-FN
(CONST 5) = (MEXPT)
(CONST 6) = $%E
(CONST 7) = PREP1
(CONST 8) = %LOG
(CONST 9) = MPLUS
(CONST 10) = MTIMES
(CONST 11) = $RATEXPAND
(CONST 12) = E
(CONST 13) = TEMP
(CONST 14) = (MPLUS MTIMES)
(CONST 15) = MEMQ
(CONST 16) = L
(CONST 17) = RED-MONO-LOG
(CONST 18) = TSEXPT
(CONST 19) = ADDN
(CONST 20) = POWER
(CONST 21) = TSTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L E TLIST P)
writes special variables : (L TEMP)
134 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L49)
7     (GETVALUE 0)                        ; P
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 8 L72)                   ; %LOG
14    (GETVALUE 0)                        ; P
16    (CAR)
17    (CAR&PUSH)
18    (JMPIFEQTO 9 L162)                  ; MPLUS
22    (GETVALUE 0)                        ; P
24    (CAR)
25    (CAR&PUSH)
26    (JMPIFEQTO 10 L162)                 ; MTIMES
30    (CONST&PUSH 6)                      ; $%E
31    (GETVALUE&PUSH 0)                   ; P
33    (CALL2 20)                          ; POWER
35    L35
35    (PUSH)
36    (CALL1 7)                           ; PREP1
38    L38
38    (UNBIND1)
39    (SKIP&RET 2)
41    L41
41    (GETVALUE&PUSH 0)                   ; P
43    (CALL1&PUSH 3)                      ; TAYLOR2
45    (CALL1 4)                           ; PSEXPT-FN
47    (JMP L38)
49    L49
49    (GETVALUE&PUSH 0)                   ; P
51    (GETVALUE&PUSH 1)                   ; TLIST
53    (CALL2&JMPIF 2 L41)                 ; ZL-ASSOC
56    (CONST&PUSH 5)                      ; (MEXPT)
57    (CONST&PUSH 6)                      ; $%E
58    (GETVALUE&PUSH 0)                   ; P
60    (LIST 3)
62    (JMP L35)
64    L64
64    (GETVALUE 0)                        ; P
66    (CDR)
67    (CAR&PUSH)
68    (CALL1 3)                           ; TAYLOR2
70    (JMP L38)
72    L72
72    (GETVALUE 0)                        ; P
74    (CDR)
75    (CAR&PUSH)
76    (GETVALUE&PUSH 1)                   ; TLIST
78    (CALL2&JMPIF 2 L64)                 ; ZL-ASSOC
81    (GETVALUE 0)                        ; P
83    (CDR)
84    (CAR)
85    (JMP L35)
87    L87
87    (GETVALUE&PUSH 12)                  ; E
89    (JSR L0)
92    (JMP L208)
95    L95
95    (PUSH)
96    (LOAD&CONS&STORE 3)
98    (JMP L132)
100   L100
100   (CONST&PUSH 6)                      ; $%E
101   (GETVALUE&PUSH 0)                   ; P
103   (CALL2 18)                          ; TSEXPT
105   (JMP L152)
107   L107
107   (GETVALUE 12)                       ; E
109   (CDR&PUSH)
110   (NIL&PUSH)
111   (NIL)
112   (BIND 16)                           ; L
114   (LOAD&JMPIFNOT 4 L137)
117   L117
117   (LOAD&CAR&PUSH 4)
119   (CALL1 17)                          ; RED-MONO-LOG
121   (SETVALUE 13)                       ; TEMP
123   (JMPIF L95)
125   (LOAD&CAR&PUSH 4)
127   (GETVALUE 16)                       ; L
129   (CONS)
130   (SETVALUE 16)                       ; L
132   L132
132   (LOAD&CDR&STORE 4)
134   (LOAD&JMPIF 4 L117)
137   L137
137   (LOAD&JMPIFNOT 3 L100)
140   (CONST&PUSH 6)                      ; $%E
141   (GETVALUE&PUSH 16)                  ; L
143   (NIL&PUSH)
144   (CALL2&PUSH 19)                     ; ADDN
146   (CALL2&PUSH 20)                     ; POWER
148   (LOAD 4)
149   (CONS&PUSH)
150   (CALL1 21)                          ; TSTIMES
152   L152
152   (UNBIND1)
153   (SKIP 2)
155   (JMP L208)
157   L157
157   (PUSH)
158   (CALL1 3)                           ; TAYLOR2
160   (JMP L208)
162   L162
162   (GETVALUE&PUSH 0)                   ; P
164   (CALL1 11)                          ; $RATEXPAND
166   (BIND 12)                           ; E
168   (NIL)
169   (BIND 13)                           ; TEMP
171   (GETVALUE 12)                       ; E
173   (JMPIFATOM L87)
176   (GETVALUE 12)                       ; E
178   (CAR)
179   (CAR&PUSH)
180   (CONST&PUSH 14)                     ; (MPLUS MTIMES)
181   (CALL2&JMPIFNOT 15 L87)             ; MEMQ
185   (GETVALUE 12)                       ; E
187   (CAR)
188   (CAR&PUSH)
189   (JMPIFEQTO 9 L107)                  ; MPLUS
193   (GETVALUE&PUSH 12)                  ; E
195   (CALL1 17)                          ; RED-MONO-LOG
197   (SETVALUE 13)                       ; TEMP
199   (JMPIF L157)
201   (CONST&PUSH 6)                      ; $%E
202   (GETVALUE&PUSH 0)                   ; P
204   (CALL2&PUSH 20)                     ; POWER
206   (CALL1 7)                           ; PREP1
208   L208
208   (UNBIND 2)
210   (JMP L38)


Disassembly of function #:|(DEFUN RED-MONO-LOG (E) ...)-128|
(CONST 0) = RED-MONO-LOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RED-MONO-LOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RED-MONO-LOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RED-MONO-LOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RED-MONO-LOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RED-MONO-LOG
8     (SKIP&RET 1)


Disassembly of function RED-MONO-LOG
(CONST 0) = E
(CONST 1) = %LOG
(CONST 2) = MTIMESP
(CONST 3) = TVARS
(CONST 4) = MFREE
(CONST 5) = EQ
(CONST 6) = MULN
(CONST 7) = POWER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TVARS E)
70 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L50)
7     (GETVALUE 0)                        ; E
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 1 L53)                   ; %LOG
14    (GETVALUE&PUSH 0)                   ; E
16    (CALL1&JMPIFNOT 2 L98)              ; MTIMESP
20    (GETVALUE 0)                        ; E
22    (CDR&PUSH)
23    (NIL&PUSH)
24    (LOAD&JMPIFNOT 1 L70)
27    L27
27    (LOAD 1)
28    (CAR)
29    (JMPIFATOM L38)
31    (LOAD 1)
32    (CAR)
33    (CAR)
34    (CAR&PUSH)
35    (JMPIFEQTO 1 L59)                   ; %LOG
38    L38
38    (LOAD&CAR&PUSH 1)
40    (GETVALUE&PUSH 3)                   ; TVARS
42    (CALL2&JMPIF 4 L65)                 ; MFREE
45    L45
45    (NIL)
46    (SKIP 2)
48    (JMP L99)
50    L50
50    (NIL)
51    (JMP L99)
53    L53
53    (GETVALUE 0)                        ; E
55    (CDR)
56    (CAR)
57    (JMP L99)
59    L59
59    (LOAD&JMPIF 0 L45)
62    (LOAD&CAR&STORE 1 0)
65    L65
65    (LOAD&CDR&STORE 1)
67    (LOAD&JMPIF 1 L27)
70    L70
70    (LOAD 0)
71    (JMPIFNOT1 L94)
73    (CDR)
74    (CAR&PUSH)
75    (LOAD&PUSH 1)
76    (GETVALUE 0)                        ; E
78    (CDR&PUSH)
79    (PUSH-UNBOUND 7)
81    (CONST 5)                           ; EQ
82    (STORE 2)
83    (CALLS2&PUSH 78)                    ; REMOVE
85    (NIL&PUSH)
86    (CALL2&PUSH 6)                      ; MULN
88    (CALL2 7)                           ; POWER
90    (SKIP 2)
92    (JMP L99)
94    L94
94    (SKIP 2)
96    (JMP L99)
98    L98
98    (NIL)
99    L99
99    (UNBIND1)
100   (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSLOG (P) ...)-129|
(CONST 0) = PSLOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSLOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSLOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSLOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSLOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSLOG
8     (SKIP&RET 1)


Disassembly of function PSLOG
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = CDISREP
(CONST 3) = PSLOG2
(CONST 4) = PSLOG-MONOM
(CONST 5) = (-1 . 1)
(CONST 6) = PSPLUS
(CONST 7) = PS-LIM-INFP
(CONST 8) = %LOG
(CONST 9) = PSEXPT-LOG-ORD
(CONST 10) = (0 . 1)
(CONST 11) = E>
(CONST 12) = GET-SERIES
(CONST 13) = PS-INVERT-VAR
(CONST 14) = L
(CONST 15) = ANS
(CONST 16) = $MAXTAYORDER
(CONST 17) = GVAR-LIM
(CONST 18) = ($ZEROA $ZEROB $INF $MINF)
(CONST 19) = MEMQ
(CONST 20) = "bad gvar lim"
(CONST 21) = BREAK
(CONST 22) = ($INF $MINF)
(CONST 23) = PS-GT
(CONST 24) = PSCHECK
(CONST 25) = PSEXPT
(CONST 26) = PSTIMES
(CONST 27) = ($INF $MINF)
(CONST 28) = (1 . 1)
(CONST 29) = "Internal TAYLOR MAXIMA-ERROR in PSLOG"
(CONST 30) = MERROR
(CONST 31) = PSEXPON-GCD
(CONST 32) = ZL-DELETE
(CONST 33) = 0
(CONST 34) = KEY-VARS
(CONST 35) = ASSQ
(CONST 36) = TLIST
(CONST 37) = ZL-ASSOC
(CONST 38) = EMIN
(CONST 39) = INVERT-TERMS
(CONST 40) = 1
(CONST 41) = PSLOG1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST KEY-VARS ANS $MAXTAYORDER L P)
writes special variables : (ANS L P)
284 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L261)               ; PS
10    (GETVALUE 0)                        ; P
12    (CDR)
13    (CDR)
14    (CDR&PUSH)
15    (LOAD 0)
16    (CDR)
17    (JMPIFNOT L269)
20    (GETVALUE&PUSH 0)                   ; P
22    (CONST&PUSH 5)                      ; (-1 . 1)
23    (CALL2 6)                           ; PSPLUS
25    (CDR)
26    (CDR)
27    (CDR)
28    (STORE 0)
29    (CDR)
30    (JMPIF L38)
32    (GETVALUE&PUSH 0)                   ; P
34    (CALL1&JMPIFNOT 7 L299)             ; PS-LIM-INFP
38    L38
38    (NIL)
39    (BIND 14)                           ; L
41    (PUSH-NIL 3)
43    (NIL)
44    (BIND 15)                           ; ANS
46    (NIL&PUSH)
47    (NIL)
48    (BIND 16)                           ; $MAXTAYORDER
50    (PUSH-NIL 2)
52    (GETVALUE 0)                        ; P
54    (CDR)
55    (CDR)
56    (CAR)
57    (CAR)
58    (STORE 10)
60    (GETVALUE 0)                        ; P
62    (CDR)
63    (CAR)
64    (CAR&PUSH)
65    (CALL1 17)                          ; GVAR-LIM
67    (STORE 1)
68    (PUSH)
69    (CONST&PUSH 18)                     ; ($ZEROA $ZEROB $INF $MINF)
70    (CALL2&JMPIFNOT 19 L341)            ; MEMQ
74    (LOAD&PUSH 1)
75    (CONST&PUSH 22)                     ; ($INF $MINF)
76    (CALL2&JMPIF 19 L347)               ; MEMQ
80    (GETVALUE 0)                        ; P
82    (CDR)
83    (CDR)
84    (CDR)
85    (CAR)
86    (STORE 9)
88    (NIL&STORE 0)
90    L90
90    (GETVALUE 0)                        ; P
92    (CDR)
93    (CAR&PUSH)
94    (LOAD&PUSH 11)
95    (NIL)
96    (CONS&PUSH)
97    (LOAD&PUSH 11)
98    (NIL)
99    (CONS&PUSH)
100   (CALL 3 24)                         ; PSCHECK
103   (STORE 9)
105   (PUSH)
106   (JSR L0)
109   (STORE 5)
110   (GETVALUE&PUSH 0)                   ; P
112   (T)
113   (BIND 16)                           ; $MAXTAYORDER
115   (LOAD&PUSH 13)
116   (CONST&PUSH 5)                      ; (-1 . 1)
117   (CALL2 25)                          ; PSEXPT
119   (UNBIND1)
120   (PUSH)
121   (CALL2 26)                          ; PSTIMES
123   (SETVALUE 0)                        ; P
125   (LOAD&PUSH 1)
126   (CONST&PUSH 27)                     ; ($INF $MINF)
127   (CALL2&JMPIFNOT 19 L139)            ; MEMQ
130   (LOAD 15)
132   (CAR)
133   (CAR&PUSH)
134   (CONST&PUSH 10)                     ; (0 . 1)
135   (CALL2&JMPIF 11 L357)               ; E>
139   L139
139   (GETVALUE 0)                        ; P
141   (CAR&PUSH)
142   (JMPIFNOTEQTO 1 L375)               ; PS
146   (GETVALUE 0)                        ; P
148   (CDR)
149   (CDR)
150   (CDR)
151   (SETVALUE 14)                       ; L
153   (PUSH)
154   (CALL1 31)                          ; PSEXPON-GCD
156   (STORE 11)
158   (LOAD&JMPIF 0 L385)
162   (GETVALUE 14)                       ; L
164   (CDR)
165   (SETVALUE 14)                       ; L
167   L167
167   (CONST&PUSH 33)                     ; 0
169   (NIL)
170   (CONS)
171   (SETVALUE 15)                       ; ANS
173   (GETVALUE 16)                       ; $MAXTAYORDER
175   (JMPIFNOT L400)
178   (LOAD&JMPIFNOT 0 L187)
181   L181
181   (GETVALUE&PUSH 14)                  ; L
183   (CALL1 39)                          ; INVERT-TERMS
185   (SETVALUE 14)                       ; L
187   L187
187   (CONST&PUSH 10)                     ; (0 . 1)
188   (LOAD&PUSH 12)
189   (CALL2&JMPIFNOT 11 L202)            ; E>
192   (LOAD&CAR&PUSH 11)
194   (CALLSR&PUSH 0 54)                  ; -
197   (LOAD 12)
198   (CDR)
199   (CONS)
200   (STORE 11)
202   L202
202   (LOAD&PUSH 5)
203   (GETVALUE 0)                        ; P
205   (CDR)
206   (CAR&PUSH)
207   (LOAD&PUSH 12)
208   (GETVALUE&PUSH 14)                  ; L
210   (LOAD&PUSH 15)
211   (CONST&PUSH 40)                     ; 1
213   (LOAD&PUSH 17)
214   (GETVALUE&PUSH 15)                  ; ANS
216   (CALL&PUSH 7 41)                    ; PSLOG1
219   (CALL2 6)                           ; PSPLUS
221   (SETVALUE 15)                       ; ANS
223   (LOAD&JMPIFNOT 0 L245)
226   (GETVALUE 15)                       ; ANS
228   (CAR&PUSH)
229   (JMPIFNOTEQTO 1 L245)               ; PS
232   (GETVALUE 15)                       ; ANS
234   (CDR)
235   (CAR)
236   (CAR&PUSH)
237   (GETVALUE 0)                        ; P
239   (CDR)
240   (CAR)
241   (CAR)
242   (JMPIFEQ L429)
245   L245
245   (GETVALUE 15)                       ; ANS
247   L247
247   (SKIP 2)
249   (UNBIND1)
250   (SKIP 1)
252   (UNBIND1)
253   (SKIP 3)
255   (UNBIND1)
256   (SKIP 1)
258   L258
258   (UNBIND1)
259   (SKIP&RET 2)
261   L261
261   (GETVALUE&PUSH 0)                   ; P
263   (CALL1&PUSH 2)                      ; CDISREP
265   (CALL1 3)                           ; PSLOG2
267   (JMP L258)
269   L269
269   (GETVALUE&PUSH 0)                   ; P
271   (CALL1 4)                           ; PSLOG-MONOM
273   (SKIP 1)
275   (JMP L258)
277   L277
277   (LOAD 3)
278   (CAR)
279   (CAR)
280   (CAR&PUSH)
281   (CALLSR&PUSH 0 54)                  ; -
284   (LOAD 4)
285   (CAR)
286   (CAR)
287   (CDR)
288   (CONS)
289   (JMP L318)
291   L291
291   (GETVALUE&PUSH 0)                   ; P
293   (CALL1 13)                          ; PS-INVERT-VAR
295   (SKIP 1)
297   (JMP L258)
299   L299
299   (CONST&PUSH 8)                      ; %LOG
300   (GETVALUE&PUSH 0)                   ; P
302   (CALL1&PUSH 9)                      ; PSEXPT-LOG-ORD
304   (GETVALUE 0)                        ; P
306   (CDR)
307   (CAR&PUSH)
308   (CONST&PUSH 10)                     ; (0 . 1)
309   (LOAD 4)
310   (CAR)
311   (CAR&PUSH)
312   (CALL2&JMPIF 11 L277)               ; E>
315   (LOAD 3)
316   (CAR)
317   (CAR)
318   L318
318   (PUSH)
319   (LOAD 4)
320   (CAR)
321   (CDR&PUSH)
322   (CALL 5 12)                         ; GET-SERIES
325   (SETVALUE 0)                        ; P
327   (CONST&PUSH 10)                     ; (0 . 1)
328   (LOAD 1)
329   (CAR)
330   (CAR&PUSH)
331   (CALL2&JMPIF 11 L291)               ; E>
334   (GETVALUE 0)                        ; P
336   (SKIP 1)
338   (JMP L258)
341   L341
341   (CONST&PUSH 20)                     ; "bad gvar lim"
342   (CALL1 21)                          ; BREAK
344   (JMP L90)
347   L347
347   (GETVALUE&PUSH 0)                   ; P
349   (CALL1 23)                          ; PS-GT
351   (STORE 9)
353   (STORE 0)
354   (JMP L90)
357   L357
357   (LOAD&PUSH 5)
358   (GETVALUE&PUSH 0)                   ; P
360   (JSR&PUSH L0)
363   (CALL2 6)                           ; PSPLUS
365   (JMP L247)
368   L368
368   (CONST&PUSH 29)                     ; "Internal TAYLOR MAXIMA-ERROR in PSLOG"
369   (CALL1 30)                          ; MERROR
371   (LOAD 5)
372   (JMP L247)
375   L375
375   (GETVALUE&PUSH 0)                   ; P
377   (CONST&PUSH 28)                     ; (1 . 1)
378   (CALLS2&JMPIFNOT 2 L368)            ; EQUAL
381   (LOAD 5)
382   (JMP L247)
385   L385
385   (GETVALUE&PUSH 14)                  ; L
387   (PUSH-UNBOUND 1)
389   (CALLS1&PUSH 156)                   ; LAST
391   (GETVALUE&PUSH 14)                  ; L
393   (CALL2 32)                          ; ZL-DELETE
395   (SETVALUE 14)                       ; L
397   (JMP L167)
400   L400
400   (LOAD&PUSH 10)
401   (GETVALUE 0)                        ; P
403   (CDR)
404   (CAR)
405   (CAR&PUSH)
406   (GETVALUE&PUSH 34)                  ; KEY-VARS
408   (CALL2 35)                          ; ASSQ
410   (CDR&PUSH)
411   (GETVALUE&PUSH 36)                  ; TLIST
413   (CALL2 37)                          ; ZL-ASSOC
415   (CDR)
416   (CAR)
417   (CAR&PUSH)
418   (CALL2 38)                          ; EMIN
420   (STORE 10)
422   (LOAD&JMPIFNOT 0 L187)
426   (JMP L181)
429   L429
429   (GETVALUE&PUSH 15)                  ; ANS
431   (CALL1 13)                          ; PS-INVERT-VAR
433   (JMP L247)


Disassembly of function #:|(DEFUN INVERT-TERMS (TERMS) ...)-130|
(CONST 0) = INVERT-TERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INVERT-TERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INVERT-TERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INVERT-TERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INVERT-TERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INVERT-TERMS
8     (SKIP&RET 1)


Disassembly of function INVERT-TERMS
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
26 byte-code instructions:
0     (LOAD&PUSH 1)
1     (JMP L29)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 0)                            ; X
8     (GETVALUE&PUSH 0)                   ; X
10    (GETVALUE 0)                        ; X
12    (CAR)
13    (CAR&PUSH)
14    (CALLSR&PUSH 0 54)                  ; -
17    (GETVALUE 0)                        ; X
19    (CAR)
20    (CDR)
21    (CONS&PUSH)
22    (CALLS1 168)                        ; RPLACA
24    (UNBIND1)
25    (SKIP 1)
27    (LOAD&CDR&STORE 0)
29    L29
29    (LOAD&PUSH 0)
30    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
33    (SKIP 1)
35    (LOAD&PUSH 1)
36    (CALLS2 73)                         ; NREVERSE
38    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PS-INVERT-VAR (PS) ...)-131|
(CONST 0) = PS-INVERT-VAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PS-INVERT-VAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PS-INVERT-VAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PS-INVERT-VAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PS-INVERT-VAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PS-INVERT-VAR
8     (SKIP&RET 1)


Disassembly of function PS-INVERT-VAR
(CONST 0) = PS
(CONST 1) = INVERT-TERMS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (JMPIFNOTEQTO 0 L16)                ; PS
5     (LOAD 1)
6     (CDR)
7     (CDR&PUSH)
8     (LOAD 2)
9     (CDR)
10    (CDR)
11    (CDR&PUSH)
12    (CALL1&PUSH 1)                      ; INVERT-TERMS
14    (CALLS1 170)                        ; RPLACD
16    L16
16    (LOAD 1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PS-GT (PS) ...)-132|
(CONST 0) = PS-GT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PS-GT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PS-GT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PS-GT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PS-GT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PS-GT
8     (SKIP&RET 1)


Disassembly of function PS-GT
(CONST 0) = PS
(CONST 1) = (0 . 1)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (JMPIFNOTEQTO 0 L16)                ; PS
5     (LOAD 1)
6     (CDR)
7     (CDR)
8     (CDR&PUSH)
9     (PUSH-UNBOUND 1)
11    (CALLS1 156)                        ; LAST
13    (CAR)
14    (SKIP&RET 2)
16    L16
16    (CONST&PUSH 1)                      ; (0 . 1)
17    (LOAD 2)
18    (CONS)
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSLOG1 (VARH TRUNC L ...) ...)-133|
(CONST 0) = PSLOG1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSLOG1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSLOG1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSLOG1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSLOG1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSLOG1
8     (SKIP&RET 1)


Disassembly of function PSLOG1
(CONST 0) = L
(CONST 1) = M
(CONST 2) = ANS
(CONST 3) = A
(CONST 4) = 0
(CONST 5) = K
(CONST 6) = C
(CONST 7) = E>
(CONST 8) = 1
(CONST 9) = (0 . 1)
(CONST 10) = EDIFF
(CONST 11) = PSTERM
(CONST 12) = PSTRIM-TERMS
(CONST 13) = PSTERM1
(CONST 14) = PSTIMES
(CONST 15) = PSPLUS
(CONST 16) = E+
(CONST 17) = ERECIP
(CONST 18) = PSDIFF
(CONST 19) = PSCHECK
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A M K C L ANS)
writes special variables : (M C K A)
135 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; L
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; ANS
9     (NIL)
10    (BIND 3)                            ; A
12    (CONST 4)                           ; 0
13    (BIND 5)                            ; K
15    (PUSH-NIL 2)
17    (NIL)
18    (BIND 6)                            ; C
20    (PUSH-NIL 3)
22    (GETVALUE&PUSH 2)                   ; ANS
24    (PUSH-UNBOUND 1)
26    (CALLS1 156)                        ; LAST
28    (SETVALUE 3)                        ; A
30    (JMP L192)
33    L33
33    (LOAD 27)
35    (STORE 1)
36    (GETVALUE 0)                        ; L
38    (STORE 7)
39    (CONST 8)                           ; 1
40    (SETVALUE 5)                        ; K
42    (CONST 9)                           ; (0 . 1)
43    (STORE 2)
44    (JMP L98)
46    L46
46    (PUSH)
47    (LOAD&PUSH 26)
49    (CALL2 13)                          ; PSTERM1
51    (SETVALUE 6)                        ; C
53    (JMP L139)
56    L56
56    (LOAD&PUSH 0)
57    (CALLS2 145)                        ; ZEROP
59    (SKIP 1)
61    (JMPIFNOT L161)
64    (JMP L178)
67    L67
67    (STORE 7)
68    (LOAD&PUSH 0)
69    (LOAD&PUSH 8)
70    (LOAD&PUSH 3)
71    (CALL2&PUSH 13)                     ; PSTERM1
73    (LOAD&PUSH 8)
74    (CALL2&PUSH 14)                     ; PSTIMES
76    (CALL2 14)                          ; PSTIMES
78    (SETVALUE 6)                        ; C
80    (LOAD&PUSH 2)
81    (GETVALUE&PUSH 6)                   ; C
83    (CALL2 15)                          ; PSPLUS
85    (STORE 2)
86    (GETVALUE&PUSH 5)                   ; K
88    (CALLS2 150)                        ; 1+
90    (SETVALUE 5)                        ; K
92    (LOAD&PUSH 1)
93    (LOAD&PUSH 28)
95    (CALL2 16)                          ; E+
97    (STORE 1)
98    L98
98    (GETVALUE&PUSH 5)                   ; K
100   (GETVALUE&PUSH 1)                   ; M
102   (CALLSR&JMPIF 1 45 L126)            ; =
106   (GETVALUE 2)                        ; ANS
108   (CDR&PUSH)
109   (LOAD&PUSH 26)
111   (LOAD&PUSH 3)
112   (CALL2 10)                          ; EDIFF
114   (STORE 1)
115   (PUSH)
116   (CALL2 11)                          ; PSTERM
118   (STORE 6)
119   (JMPIFNOT L126)
121   (LOAD&PUSH 7)
122   (LOAD&PUSH 2)
123   (CALL2&JMPIF 12 L67)                ; PSTRIM-TERMS
126   L126
126   (LOAD&PUSH 7)
127   (LOAD&PUSH 26)
129   (CALL2 12)                          ; PSTRIM-TERMS
131   (SETVALUE 6)                        ; C
133   (JMPIF L46)
136   (CONST 9)                           ; (0 . 1)
137   (SETVALUE 6)                        ; C
139   L139
139   (GETVALUE&PUSH 6)                   ; C
141   (LOAD&PUSH 3)
142   (LOAD&PUSH 27)
144   (CALL1&PUSH 17)                     ; ERECIP
146   (CALL2&PUSH 14)                     ; PSTIMES
148   (CALL2 18)                          ; PSDIFF
150   (STORE 2)
151   (CAR&PUSH)
152   (LOAD&PUSH 0)
153   (CALLS2&JMPIF 8 L56)                ; NUMBERP
157   (SKIP 1)
159   (JMPIF L178)
161   L161
161   (GETVALUE&PUSH 3)                   ; A
163   (LOAD&PUSH 26)
165   (LOAD 4)
166   (CONS&PUSH)
167   (GETVALUE 3)                        ; A
169   (CDR)
170   (CONS&PUSH)
171   (CALLS1 170)                        ; RPLACD
173   (GETVALUE 3)                        ; A
175   (CDR)
176   (SETVALUE 3)                        ; A
178   L178
178   (GETVALUE&PUSH 1)                   ; M
180   (CALLS2 150)                        ; 1+
182   (SETVALUE 1)                        ; M
184   (LOAD&PUSH 25)
186   (LOAD&PUSH 28)
188   (CALL2 16)                          ; E+
190   (STORE 25)
192   L192
192   (LOAD&PUSH 25)
194   (LOAD&PUSH 30)
196   (CALL2&JMPIFNOT 7 L33)              ; E>
200   (LOAD&PUSH 30)
202   (LOAD&PUSH 30)
204   (LIST&PUSH 1)
206   (GETVALUE 2)                        ; ANS
208   (CDR&PUSH)
209   (CALL 3 19)                         ; PSCHECK
212   (SKIP 3)
214   (UNBIND1)
215   (SKIP 2)
217   (UNBIND 5)
219   (SKIP&RET 8)


Disassembly of function #:|(DEFUN PSLOG-MONOM (MONOM) ...)-134|
(CONST 0) = PSLOG-MONOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSLOG-MONOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSLOG-MONOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSLOG-MONOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSLOG-MONOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSLOG-MONOM
8     (SKIP&RET 1)


Disassembly of function PSLOG-MONOM
(CONST 0) = KEY-VARS
(CONST 1) = ASSQ
(CONST 2) = TLIST
(CONST 3) = ZL-ASSOC
(CONST 4) = VAR
(CONST 5) = C
(CONST 6) = MULTIVAR
(CONST 7) = PSLOG
(CONST 8) = TVAR?
(CONST 9) = ($INF $MINF)
(CONST 10) = MEMQ
(CONST 11) = (%LOG)
(CONST 12) = SUB*
(CONST 13) = ADJOIN-TVAR
(CONST 14) = (%LOG)
(CONST 15) = PSMINUS
(CONST 16) = $MINF
(CONST 17) = (-1 . 1)
(CONST 18) = RCEXPT
(CONST 19) = MEXPT
(CONST 20) = -1
(CONST 21) = TVAR-LIM
(CONST 22) = (%LOG)
(CONST 23) = MUL*
(CONST 24) = (%LOG)
(CONST 25) = $%E
(CONST 26) = TAYLOR2
(CONST 27) = "Unhandled gvar in PSLOG-OF-GVAR"
(CONST 28) = BREAK
(CONST 29) = PSTIMES
(CONST 30) = PSPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C VAR TLIST KEY-VARS)
writes special variables : (C VAR)
174 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR)
3     (CAR&PUSH)
4     (LOAD&PUSH 0)
5     (GETVALUE&PUSH 0)                   ; KEY-VARS
7     (CALL2 1)                           ; ASSQ
9     (CDR&PUSH)
10    (GETVALUE&PUSH 2)                   ; TLIST
12    (CALL2&PUSH 3)                      ; ZL-ASSOC
14    (NIL)
15    (BIND 4)                            ; VAR
17    (PUSH-NIL 2)
19    (NIL)
20    (BIND 5)                            ; C
22    (CONST&PUSH 6)                      ; MULTIVAR
23    (LOAD 9)
24    (CDR)
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (CALL2 1)                           ; ASSQ
30    (CDR)
31    (JMPIF L83)
33    (LOAD 8)
34    (CAR)
35    (SETVALUE 4)                        ; VAR
37    (PUSH)
38    (CALL1&JMPIF 8 L185)                ; TVAR?
42    (GETVALUE 4)                        ; VAR
44    (CAR)
45    (CAR&PUSH)
46    (JMPIFNOTEQTO 19 L211)              ; MEXPT
50    (GETVALUE 4)                        ; VAR
52    (CDR)
53    (CDR)
54    (CAR&PUSH)
55    (JMPIFNOTEQTO 20 L146)              ; -1
59    (GETVALUE 4)                        ; VAR
61    (CDR)
62    (CAR&PUSH)
63    (CALL1&PUSH 21)                     ; TVAR-LIM
65    (JMPIFEQTO 16 L124)                 ; $MINF
68    (CONST&PUSH 24)                     ; (%LOG)
69    (GETVALUE 4)                        ; VAR
71    (CDR)
72    (CAR)
73    L73
73    (PUSH)
74    (LIST&PUSH 2)
76    (CALL1&PUSH 13)                     ; ADJOIN-TVAR
78    (CALL1 15)                          ; PSMINUS
80    (JMP L160)
83    L83
83    (LOAD 11)
84    (CDR)
85    (CDR)
86    (CDR)
87    (CAR)
88    (CDR&PUSH)
89    (CALL1 7)                           ; PSLOG
91    (JMP L235)
94    L94
94    (CONST&PUSH 11)                     ; (%LOG)
95    (GETVALUE&PUSH 4)                   ; VAR
97    (LOAD&PUSH 6)
98    (CALL2&PUSH 12)                     ; SUB*
100   (LIST&PUSH 2)
102   (CALL1 13)                          ; ADJOIN-TVAR
104   (JMP L160)
106   L106
106   (CONST&PUSH 17)                     ; (-1 . 1)
107   (LOAD 12)
108   (CDR)
109   (CDR)
110   (CDR)
111   (CAR)
112   (CAR&PUSH)
113   (CALL2 18)                          ; RCEXPT
115   (SETVALUE 5)                        ; C
117   (GETVALUE 5)                        ; C
119   (JMPIFNOT L215)
122   (JMP L174)
124   L124
124   (CONST&PUSH 17)                     ; (-1 . 1)
125   (LOAD 12)
126   (CDR)
127   (CDR)
128   (CDR)
129   (CAR)
130   (CAR&PUSH)
131   (CALL2 18)                          ; RCEXPT
133   (SETVALUE 5)                        ; C
135   (CONST&PUSH 22)                     ; (%LOG)
136   (CONST&PUSH 20)                     ; -1
137   (GETVALUE 4)                        ; VAR
139   (CDR)
140   (CAR&PUSH)
141   (CALL2 23)                          ; MUL*
143   (JMP L73)
146   L146
146   (GETVALUE 4)                        ; VAR
148   (CDR)
149   (CAR&PUSH)
150   (JMPIFNOTEQTO 25 L167)              ; $%E
153   (GETVALUE 4)                        ; VAR
155   (CDR)
156   (CDR)
157   (CAR&PUSH)
158   (CALL1 26)                          ; TAYLOR2
160   L160
160   (STORE 3)
161   (GETVALUE 5)                        ; C
163   (JMPIFNOT L215)
165   (JMP L174)
167   L167
167   (CONST&PUSH 27)                     ; "Unhandled gvar in PSLOG-OF-GVAR"
168   (CALL1 28)                          ; BREAK
170   (GETVALUE 5)                        ; C
172   (JMPIFNOT L215)
174   L174
174   (PUSH)
175   (LOAD 12)
176   (CDR)
177   (CDR)
178   (CDR)
179   (CAR)
180   (CDR&PUSH)
181   (CALL2 29)                          ; PSTIMES
183   (JMP L221)
185   L185
185   (LOAD 8)
186   (CDR)
187   (CDR)
188   (CAR)
189   (STORE 4)
190   (PUSH)
191   (CONST&PUSH 9)                      ; ($INF $MINF)
192   (CALL2&JMPIFNOT 10 L94)             ; MEMQ
196   (CONST&PUSH 14)                     ; (%LOG)
197   (GETVALUE&PUSH 4)                   ; VAR
199   (LIST&PUSH 2)
201   (CALL1&PUSH 13)                     ; ADJOIN-TVAR
203   (CALL1 15)                          ; PSMINUS
205   (STORE 3)
206   (LOAD&PUSH 4)
207   (JMPIFEQTO 16 L106)                 ; $MINF
211   L211
211   (GETVALUE 5)                        ; C
213   (JMPIF L174)
215   L215
215   (LOAD 11)
216   (CDR)
217   (CDR)
218   (CDR)
219   (CAR)
220   (CDR)
221   L221
221   (PUSH)
222   (CALL1&PUSH 7)                      ; PSLOG
224   (LOAD 12)
225   (CDR)
226   (CDR)
227   (CDR)
228   (CAR)
229   (CAR&PUSH)
230   (LOAD&PUSH 5)
231   (CALL2&PUSH 29)                     ; PSTIMES
233   (CALL2 30)                          ; PSPLUS
235   L235
235   (UNBIND1)
236   (SKIP 2)
238   (UNBIND1)
239   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PSLOG2 (P) ...)-135|
(CONST 0) = PSLOG2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSLOG2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSLOG2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSLOG2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSLOG2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSLOG2
8     (SKIP&RET 1)


Disassembly of function PSLOG2
(CONST 0) = P
(CONST 1) = $LOGARC
(CONST 2) = PSLOG3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; $LOGARC
6     (GETVALUE&PUSH 0)                   ; P
8     (CALL1 2)                           ; PSLOG3
10    (UNBIND 2)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSLOG3 (P) ...)-136|
(CONST 0) = PSLOG3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSLOG3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSLOG3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSLOG3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSLOG3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSLOG3
8     (SKIP&RET 1)


Disassembly of function PSLOG3
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = 0
(CONST 3) = -1
(CONST 4) = LOG-1
(CONST 5) = $%I
(CONST 6) = LOG%I
(CONST 7) = $%E
(CONST 8) = "Log(0) generated while TAYLOR expanding ~M"
(CONST 9) = LAST-EXP
(CONST 10) = MERROR
(CONST 11) = (%LOG)
(CONST 12) = PREP1
(CONST 13) = RAT
(CONST 14) = $TAYLOR_LOGEXPAND
(CONST 15) = (%LOG)
(CONST 16) = (%LOG)
(CONST 17) = (%LOG)
(CONST 18) = SUB*
(CONST 19) = FULL-LOG
(CONST 20) = FREE
(CONST 21) = $POLARFORM
(CONST 22) = MEXPT
(CONST 23) = TAYLOR2
(CONST 24) = PSLOG
(CONST 25) = PSTIMES
(CONST 26) = MTIMES
(CONST 27) = ANS
(CONST 28) = L
(CONST 29) = PSPLUS
(CONST 30) = (%LOG)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS L LAST-EXP LOG%I LOG-1 $TAYLOR_LOGEXPAND FULL-LOG P)
writes special variables : (L ANS)
138 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L81)
8     (GETVALUE 0)                        ; P
10    (CAR)
11    (CAR&PUSH)
12    (JMPIFEQTO 13 L112)                 ; RAT
16    (GETVALUE 19)                       ; FULL-LOG
18    (JMPIFNOT L27)
20    (GETVALUE&PUSH 0)                   ; P
22    (CONST&PUSH 5)                      ; $%I
23    (CALL2&JMPIFNOT 20 L136)            ; FREE
27    L27
27    (GETVALUE 0)                        ; P
29    (CAR)
30    (CAR&PUSH)
31    (JMPIFEQTO 22 L150)                 ; MEXPT
35    (GETVALUE 0)                        ; P
37    (CAR)
38    (CAR&PUSH)
39    (JMPIFNOTEQTO 26 L47)               ; MTIMES
42    (GETVALUE 14)                       ; $TAYLOR_LOGEXPAND
44    (JMPIF L170)
47    L47
47    (CONST 30)                          ; (%LOG)
49    L49
49    (PUSH)
50    (GETVALUE&PUSH 0)                   ; P
52    (LIST 2)
54    L54
54    (PUSH)
55    (CALL1 12)                          ; PREP1
57    L57
57    (UNBIND1)
58    (SKIP&RET 2)
60    L60
60    (CONST 2)                           ; 0
61    (JMP L54)
63    L63
63    (GETVALUE 4)                        ; LOG-1
65    (JMP L54)
67    L67
67    (GETVALUE 6)                        ; LOG%I
69    (JMP L54)
71    L71
71    (CONST 1)                           ; 1
72    (JMP L54)
74    L74
74    (CONST&PUSH 8)                      ; "Log(0) generated while TAYLOR expanding ~M"
75    (GETVALUE&PUSH 9)                   ; LAST-EXP
77    (CALL2 10)                          ; MERROR
79    (JMP L54)
81    L81
81    (GETVALUE&PUSH 0)                   ; P
83    (JMPIFEQTO 1 L60)                   ; 1
86    (GETVALUE&PUSH 0)                   ; P
88    (JMPIFEQTO 3 L63)                   ; -1
91    (GETVALUE&PUSH 0)                   ; P
93    (JMPIFEQTO 5 L67)                   ; $%I
96    (GETVALUE&PUSH 0)                   ; P
98    (JMPIFEQTO 7 L71)                   ; $%E
101   (GETVALUE&PUSH 0)                   ; P
103   (JMPIFEQTO 2 L74)                   ; 0
106   (CONST 11)                          ; (%LOG)
107   (JMP L49)
109   L109
109   (CONST 15)                          ; (%LOG)
110   (JMP L49)
112   L112
112   (GETVALUE 14)                       ; $TAYLOR_LOGEXPAND
114   (JMPIFNOT L109)
116   (CONST&PUSH 16)                     ; (%LOG)
117   (GETVALUE 0)                        ; P
119   (CDR)
120   (CAR&PUSH)
121   (LIST&PUSH 2)
123   (CONST&PUSH 17)                     ; (%LOG)
124   (GETVALUE 0)                        ; P
126   (CDR)
127   (CDR)
128   (CAR&PUSH)
129   (LIST&PUSH 2)
131   (CALL2 18)                          ; SUB*
133   (JMP L54)
136   L136
136   (NIL)
137   (BIND 19)                           ; FULL-LOG
139   (GETVALUE&PUSH 0)                   ; P
141   (CALL1&PUSH 21)                     ; $POLARFORM
143   (JSR L0)
146   (UNBIND1)
147   (JMP L57)
150   L150
150   (GETVALUE 0)                        ; P
152   (CDR)
153   (CDR)
154   (CAR&PUSH)
155   (CALL1&PUSH 23)                     ; TAYLOR2
157   (GETVALUE 0)                        ; P
159   (CDR)
160   (CAR&PUSH)
161   (CALL1&PUSH 23)                     ; TAYLOR2
163   (CALL1&PUSH 24)                     ; PSLOG
165   (CALL2 25)                          ; PSTIMES
167   (JMP L57)
170   L170
170   (GETVALUE 0)                        ; P
172   (CDR)
173   (CDR&PUSH)
174   (GETVALUE 0)                        ; P
176   (CDR)
177   (CAR&PUSH)
178   (JSR L0)
181   (BIND 27)                           ; ANS
183   (LOAD 3)
184   (BIND 28)                           ; L
186   (GETVALUE 28)                       ; L
188   (JMPIFNOT L212)
190   L190
190   (GETVALUE 28)                       ; L
192   (CDR&PUSH)
193   (GETVALUE&PUSH 27)                  ; ANS
195   (GETVALUE 28)                       ; L
197   (CAR&PUSH)
198   (JSR&PUSH L0)
201   (CALL2 29)                          ; PSPLUS
203   (SETVALUE 27)                       ; ANS
205   (POP)
206   (SETVALUE 28)                       ; L
208   (GETVALUE 28)                       ; L
210   (JMPIF L190)
212   L212
212   (GETVALUE 27)                       ; ANS
214   (UNBIND 2)
216   (SKIP 1)
218   (JMP L57)


Disassembly of function #:|(DEFUN GETFUN-LT (FUN) ...)-137|
(CONST 0) = GETFUN-LT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETFUN-LT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETFUN-LT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETFUN-LT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETFUN-LT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETFUN-LT
8     (SKIP&RET 1)


Disassembly of function GETFUN-LT
(CONST 0) = EXP-FORM
(CONST 1) = SP2
(CONST 2) = KEY-VARS
(CONST 3) = SP2VAR
(CONST 4) = (1 . 1)
(CONST 5) = GET-LEXP
(CONST 6) = PS
(CONST 7) = (0 . 1)
(CONST 8) = "~&~A---Unknown function in getfun-lt~%"
(CONST 9) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (KEY-VARS)
73 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L36)
3     (LOAD 1)
4     (CAR)
5     (CAR)
6     L6
6     (PUSH)
7     (CONST&PUSH 0)                      ; EXP-FORM
8     (PUSH-UNBOUND 1)
10    (CALLS2&PUSH 132)                   ; GET
12    (LOAD&JMPIF 0 L48)
15    (LOAD 2)
16    (JMPIFATOM L59)
18    (LOAD 2)
19    (CAR)
20    (CAR)
21    L21
21    (PUSH)
22    (CONST&PUSH 1)                      ; SP2
23    (PUSH-UNBOUND 1)
25    (CALLS2&STORE 132 0)                ; GET
28    (JMPIF L69)
30    (CONST&PUSH 8)                      ; "~&~A---Unknown function in getfun-lt~%"
31    (LOAD&PUSH 3)
32    (CALL2 9)                           ; MERROR
34    (SKIP&RET 3)
36    L36
36    (LOAD 1)
37    (JMP L6)
39    L39
39    (LOAD 0)
40    (CDR)
41    (CAR&PUSH)
42    (LOAD&CDR&PUSH 3)
44    (FUNCALL 1)
46    (SKIP&RET 3)
48    L48
48    (CDR)
49    (CAR)
50    (JMPIFATOM L39)
52    (LOAD 0)
53    (CDR)
54    (CAR&PUSH)
55    (CALLS1 161)                        ; COPY-TREE
57    (SKIP&RET 3)
59    L59
59    (LOAD 2)
60    (JMP L21)
62    L62
62    (LOAD 0)
63    (CDR)
64    (CDR)
65    (CDR)
66    (CAR)
67    (SKIP&RET 3)
69    L69
69    (GETVALUE 2)                        ; KEY-VARS
71    (CAR)
72    (CDR&PUSH)
73    (CONST&PUSH 3)                      ; SP2VAR
74    (LOAD&PUSH 2)
75    (PUSH-UNBOUND 3)
77    (CALLS1&PUSH 172)                   ; SUBST
79    (CONST&PUSH 4)                      ; (1 . 1)
80    (NIL&PUSH)
81    (CALL 3 5)                          ; GET-LEXP
84    (STORE 0)
85    (CAR&PUSH)
86    (JMPIFEQTO 6 L62)                   ; PS
89    (CONST&PUSH 7)                      ; (0 . 1)
90    (LOAD 1)
91    (CONS)
92    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VAR))-138|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN GETEXP-FUN (FUN VAR PW) ...)-139|
(CONST 0) = GETEXP-FUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETEXP-FUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETEXP-FUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETEXP-FUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETEXP-FUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETEXP-FUN
8     (SKIP&RET 1)


Disassembly of function GETEXP-FUN
(CONST 0) = VAR
(CONST 1) = EXP-FORM
(CONST 2) = INFIN-ORD-ERR
(CONST 3) = SP2
(CONST 4) = "~&~A---power series unavailable, internal error~%"
(CONST 5) = MERROR
(CONST 6) = SP2SUBS
(CONST 7) = SAFE-GET
(CONST 8) = MAXIMA-SUBSTITUTE
(CONST 9) = 
"~&Incorrect number of subscripts to the ~
				        DEFTAYLORed function ~A"
(CONST 10) = TS-FORMULA
(CONST 11) = E>
(CONST 12) = (0 . 1)
(CONST 13) = PS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
157 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (LOAD 6)
4     (JMPIFATOM L74)
7     (LOAD 6)
8     (CAR)
9     (CAR)
10    L10
10    (PUSH)
11    (CONST&PUSH 1)                      ; EXP-FORM
12    (PUSH-UNBOUND 1)
14    (CALLS2&PUSH 132)                   ; GET
16    (CALLS1&PUSH 161)                   ; COPY-TREE
18    (LOAD&JMPIFNOT 5 L78)
21    (LOAD&JMPIFNOT 0 L105)
25    (LOAD 0)
26    (CDR)
27    (CAR)
28    (JMPIFATOM L176)
31    (LOAD 0)
32    (CDR)
33    (CAR&PUSH)
34    (CALLS1 161)                        ; COPY-TREE
36    L36
36    (CAR&PUSH)
37    (LOAD&PUSH 6)
38    (CALL2&JMPIF 11 L186)               ; E>
42    (LOAD 0)
43    (CAR)
44    (JMPIFATOM L192)
47    (LOAD 0)
48    (CAR)
49    (CAR)
50    L50
50    (PUSH)
51    (LOAD 8)
52    (JMPIFATOM L197)
55    (LOAD&PUSH 6)
56    (LOAD&CDR&PUSH 9)
58    (LOAD 3)
59    (CDR)
60    (CONS)
61    (CONS)
62    L62
62    (APPLY 0)
64    (STORE 0)
65    (JMPIF L208)
68    (NIL)
69    (SKIP 1)
71    L71
71    (UNBIND1)
72    (SKIP&RET 4)
74    L74
74    (LOAD 6)
75    (JMP L10)
78    L78
78    (CALL0 2)                           ; INFIN-ORD-ERR
80    (SKIP 1)
82    (JMP L71)
84    L84
84    (LOAD 7)
85    (JMP L111)
87    L87
87    (CONST&PUSH 4)                      ; "~&~A---power series unavailable, internal error~%"
88    (LOAD&PUSH 8)
89    (CALL2 5)                           ; MERROR
91    (SKIP 1)
93    (JMP L71)
95    L95
95    (CONST&PUSH 9)                      ; "~&Incorrect number of subscripts to the ~
				        DEFTAYLORed function ~A"
96    (LOAD 10)
97    (CAR)
98    (CAR&PUSH)
99    (CALL2 5)                           ; MERROR
101   (SKIP 2)
103   (JMP L164)
105   L105
105   (LOAD 7)
106   (JMPIFATOM L84)
108   (LOAD 7)
109   (CAR)
110   (CAR)
111   L111
111   (PUSH)
112   (CONST&PUSH 3)                      ; SP2
113   (PUSH-UNBOUND 1)
115   (CALLS2&STORE 132 0)                ; GET
118   (JMPIFNOT L87)
120   (LOAD 7)
121   (JMPIFATOM L164)
123   (LOAD&CDR&PUSH 7)
125   (LOAD 8)
126   (CAR)
127   (CAR&PUSH)
128   (CONST&PUSH 6)                      ; SP2SUBS
129   (CALL2&PUSH 7)                      ; SAFE-GET
131   (LOAD&JMPIFNOT 1 L155)
134   L134
134   (LOAD&JMPIFNOT 0 L155)
137   (LOAD&CAR&PUSH 1)
139   (LOAD&CAR&PUSH 1)
141   (LOAD&PUSH 4)
142   (CALL 3 8)                          ; MAXIMA-SUBSTITUTE
145   (STORE 2)
146   (LOAD&CDR&PUSH 1)
148   (LOAD&CDR&STORE 1)
150   (POP&STORE 1)
152   (LOAD&JMPIF 1 L134)
155   L155
155   (LOAD&JMPIF 1 L95)
158   (LOAD&JMPIF 0 L95)
162   (SKIP 2)
164   L164
164   (LOAD&PUSH 0)
165   (GETVALUE&PUSH 0)                   ; VAR
167   (LOAD&PUSH 7)
168   (CALL 3 10)                         ; TS-FORMULA
171   (SKIP 1)
173   (JMP L71)
176   L176
176   (LOAD 0)
177   (CDR)
178   (CAR&PUSH)
179   (LOAD&CDR&PUSH 8)
181   (FUNCALL 1)
183   (JMP L36)
186   L186
186   (CONST 12)                          ; (0 . 1)
187   (SKIP 1)
189   (JMP L71)
192   L192
192   (LOAD 0)
193   (CAR)
194   (JMP L50)
197   L197
197   (LOAD&PUSH 6)
198   (LOAD 2)
199   (CDR)
200   (CONS)
201   (JMP L62)
204   L204
204   (POP)
205   (JMP L71)
208   L208
208   (LOAD&CAR&PUSH 0)
210   (JMPIFEQTO 13 L204)                 ; PS
213   (CONST&PUSH 13)                     ; PS
214   (GETVALUE&PUSH 0)                   ; VAR
216   (LOAD&PUSH 7)
217   (NIL)
218   (CONS&PUSH)
219   (LOAD 3)
220   (CONS)
221   (CONS)
222   (CONS)
223   (SKIP 1)
225   (JMP L71)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL VAR))-140|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN EXPEXP-FUNS (PW L SIGN ...) ...)-141|
(CONST 0) = EXPEXP-FUNS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPEXP-FUNS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPEXP-FUNS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPEXP-FUNS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPEXP-FUNS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPEXP-FUNS
8     (SKIP&RET 1)


Disassembly of function EXPEXP-FUNS
(CONST 0) = L
(CONST 1) = SIGN
(CONST 2) = E
(CONST 3) = E+
(CONST 4) = E>
(CONST 5) = (1 . 1)
(CONST 6) = E=
(CONST 7) = E1-
(CONST 8) = E*
(CONST 9) = EQUO
(CONST 10) = 1
(CONST 11) = RATTIMES
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN E L)
writes special variables : (SIGN L E)
64 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; L
3     (LOAD 6)
4     (BIND 1)                            ; SIGN
6     (NIL)
7     (BIND 2)                            ; E
9     (NIL&PUSH)
10    (GETVALUE 0)                        ; L
12    (CAR)
13    (SETVALUE 2)                        ; E
15    (GETVALUE&PUSH 0)                   ; L
17    (NIL)
18    (CONS)
19    (SETVALUE 0)                        ; L
21    (STORE 0)
22    (JMP L76)
24    L24
24    (GETVALUE 2)                        ; E
26    (JMP L48)
28    L28
28    (LOAD&PUSH 0)
29    (GETVALUE&PUSH 2)                   ; E
31    (GETVALUE&PUSH 1)                   ; SIGN
33    (LOAD&PUSH 14)
34    (CONST&PUSH 5)                      ; (1 . 1)
35    (CALL2&JMPIF 6 L24)                 ; E=
38    (GETVALUE&PUSH 2)                   ; E
40    (GETVALUE&PUSH 2)                   ; E
42    (CALL1&PUSH 7)                      ; E1-
44    (CALL2&JMPIF 8 L48)                 ; E*
47    (NIL)
48    L48
48    (PUSH)
49    (CALL2&PUSH 9)                      ; EQUO
51    (CONST&PUSH 10)                     ; 1
52    (LOAD 4)
53    (CAR)
54    (CDR)
55    (CDR)
56    (CONS&PUSH)
57    (T&PUSH)
58    (CALL 3 11)                         ; RATTIMES
61    (CONS&PUSH)
62    (LOAD 2)
63    (CDR)
64    (CONS&PUSH)
65    (CALLS1 170)                        ; RPLACD
67    (LOAD&CDR&STORE 0)
69    (GETVALUE&PUSH 1)                   ; SIGN
71    (LOAD&PUSH 13)
72    (CALL2 8)                           ; E*
74    (SETVALUE 1)                        ; SIGN
76    L76
76    (GETVALUE&PUSH 2)                   ; E
78    (LOAD&PUSH 12)
79    (CALL2 3)                           ; E+
81    (SETVALUE 2)                        ; E
83    (PUSH)
84    (LOAD&PUSH 16)
85    (CALL2&JMPIFNOT 4 L28)              ; E>
88    (GETVALUE 0)                        ; L
90    (SKIP 1)
92    (UNBIND 3)
94    (SKIP&RET 6)


Disassembly of function #:|(DEFUN EXPLOG-FUNS (PW L SIGN ...) ...)-142|
(CONST 0) = EXPLOG-FUNS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPLOG-FUNS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPLOG-FUNS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPLOG-FUNS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPLOG-FUNS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPLOG-FUNS
8     (SKIP&RET 1)


Disassembly of function EXPLOG-FUNS
(CONST 0) = L
(CONST 1) = SIGN
(CONST 2) = E
(CONST 3) = E+
(CONST 4) = E>
(CONST 5) = EQUO
(CONST 6) = E*
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN E L)
writes special variables : (SIGN L E)
44 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; L
3     (LOAD 6)
4     (BIND 1)                            ; SIGN
6     (NIL)
7     (BIND 2)                            ; E
9     (NIL&PUSH)
10    (GETVALUE 0)                        ; L
12    (CAR)
13    (SETVALUE 2)                        ; E
15    (GETVALUE&PUSH 0)                   ; L
17    (NIL)
18    (CONS)
19    (SETVALUE 0)                        ; L
21    (STORE 0)
22    (JMP L48)
24    L24
24    (LOAD&PUSH 0)
25    (GETVALUE&PUSH 2)                   ; E
27    (GETVALUE&PUSH 1)                   ; SIGN
29    (GETVALUE&PUSH 2)                   ; E
31    (CALL2 5)                           ; EQUO
33    (CONS&PUSH)
34    (LOAD 2)
35    (CDR)
36    (CONS&PUSH)
37    (CALLS1 170)                        ; RPLACD
39    (LOAD&CDR&STORE 0)
41    (GETVALUE&PUSH 1)                   ; SIGN
43    (LOAD&PUSH 13)
44    (CALL2 6)                           ; E*
46    (SETVALUE 1)                        ; SIGN
48    L48
48    (GETVALUE&PUSH 2)                   ; E
50    (LOAD&PUSH 12)
51    (CALL2 3)                           ; E+
53    (SETVALUE 2)                        ; E
55    (PUSH)
56    (LOAD&PUSH 16)
57    (CALL2&JMPIFNOT 4 L24)              ; E>
60    (GETVALUE 0)                        ; L
62    (SKIP 1)
64    (UNBIND 3)
66    (SKIP&RET 6)


Disassembly of function #:|(DEFUN EXPTAN-FUNS (PW L CHNG) ...)-143|
(CONST 0) = EXPTAN-FUNS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPTAN-FUNS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPTAN-FUNS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPTAN-FUNS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPTAN-FUNS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPTAN-FUNS
8     (SKIP&RET 1)


Disassembly of function EXPTAN-FUNS
(CONST 0) = L
(CONST 1) = E
(CONST 2) = SIGN
(CONST 3) = (1 . 1)
(CONST 4) = (1 . 2)
(CONST 5) = (4 . 1)
(CONST 6) = (2 . 1)
(CONST 7) = E+
(CONST 8) = E>
(CONST 9) = E1+
(CONST 10) = E*
(CONST 11) = EQUO
(CONST 12) = (4 . 1)
(CONST 13) = CDISREP
(CONST 14) = $BERN
(CONST 15) = PREP1
(CONST 16) = E1-
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN E L)
writes special variables : (SIGN L E)
75 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; E
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; SIGN
10    (PUSH-NIL 2)
12    (GETVALUE 0)                        ; L
14    (CAR)
15    (SETVALUE 1)                        ; E
17    (GETVALUE&PUSH 0)                   ; L
19    (NIL)
20    (CONS)
21    (SETVALUE 0)                        ; L
23    (STORE 5)
24    (CONST 3)                           ; (1 . 1)
25    (SETVALUE 2)                        ; SIGN
27    (CONST 4)                           ; (1 . 2)
28    (STORE 1)
29    (CONST 5)                           ; (4 . 1)
30    (STORE 0)
31    (JMP L93)
33    L33
33    (LOAD&PUSH 1)
34    (GETVALUE&PUSH 1)                   ; E
36    (GETVALUE&PUSH 1)                   ; E
38    (CALL1&PUSH 9)                      ; E1+
40    (CALL2&PUSH 10)                     ; E*
42    (CALL2 11)                          ; EQUO
44    (STORE 1)
45    (CONST&PUSH 12)                     ; (4 . 1)
46    (LOAD&PUSH 1)
47    (CALL2 10)                          ; E*
49    (STORE 0)
50    (LOAD&PUSH 13)
51    (GETVALUE&PUSH 2)                   ; SIGN
53    (CALL2 10)                          ; E*
55    (SETVALUE 2)                        ; SIGN
57    (LOAD&PUSH 5)
58    (GETVALUE&PUSH 1)                   ; E
60    (GETVALUE&PUSH 2)                   ; SIGN
62    (LOAD&PUSH 4)
63    (CALL2&PUSH 10)                     ; E*
65    (GETVALUE&PUSH 1)                   ; E
67    (CALL1&PUSH 9)                      ; E1+
69    (CALL1&PUSH 13)                     ; CDISREP
71    (CALL1&PUSH 14)                     ; $BERN
73    (CALL1&PUSH 15)                     ; PREP1
75    (LOAD&PUSH 4)
76    (LOAD&PUSH 5)
77    (CALL1&PUSH 16)                     ; E1-
79    (CALL2&PUSH 10)                     ; E*
81    (CALL2&PUSH 10)                     ; E*
83    (CALL2 10)                          ; E*
85    (CONS&PUSH)
86    (LOAD 7)
87    (CDR)
88    (CONS&PUSH)
89    (CALLS1 170)                        ; RPLACD
91    (LOAD&CDR&STORE 5)
93    L93
93    (CONST&PUSH 6)                      ; (2 . 1)
94    (GETVALUE&PUSH 1)                   ; E
96    (CALL2 7)                           ; E+
98    (SETVALUE 1)                        ; E
100   (PUSH)
101   (LOAD&PUSH 16)
102   (CALL2&JMPIFNOT 8 L33)              ; E>
106   (GETVALUE 0)                        ; L
108   (SKIP 2)
110   (UNBIND1)
111   (SKIP 1)
113   (UNBIND 2)
115   (SKIP&RET 4)


Disassembly of function #:|(DEFUN EXPCOT-FUNS (PW L SIGN ...) ...)-144|
(CONST 0) = EXPCOT-FUNS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPCOT-FUNS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPCOT-FUNS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPCOT-FUNS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPCOT-FUNS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPCOT-FUNS
8     (SKIP&RET 1)


Disassembly of function EXPCOT-FUNS
(CONST 0) = L
(CONST 1) = SIGN
(CONST 2) = E
(CONST 3) = (1 . 1)
(CONST 4) = (2 . 1)
(CONST 5) = E+
(CONST 6) = E>
(CONST 7) = E1+
(CONST 8) = E*
(CONST 9) = EQUO
(CONST 10) = (4 . 1)
(CONST 11) = CDISREP
(CONST 12) = $BERN
(CONST 13) = PREP1
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN E L)
writes special variables : (SIGN L E)
68 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; L
3     (LOAD 6)
4     (BIND 1)                            ; SIGN
6     (NIL)
7     (BIND 2)                            ; E
9     (PUSH-NIL 3)
11    (GETVALUE 0)                        ; L
13    (CAR)
14    (SETVALUE 2)                        ; E
16    (GETVALUE&PUSH 0)                   ; L
18    (NIL)
19    (CONS)
20    (SETVALUE 0)                        ; L
22    (STORE 2)
23    (CONST 3)                           ; (1 . 1)
24    (STORE 1)
25    (STORE 0)
26    (JMP L86)
28    L28
28    (LOAD&PUSH 1)
29    (GETVALUE&PUSH 2)                   ; E
31    (GETVALUE&PUSH 2)                   ; E
33    (CALL1&PUSH 7)                      ; E1+
35    (CALL2&PUSH 8)                      ; E*
37    (CALL2 9)                           ; EQUO
39    (STORE 1)
40    (CONST&PUSH 10)                     ; (4 . 1)
41    (LOAD&PUSH 1)
42    (CALL2 8)                           ; E*
44    (STORE 0)
45    (LOAD&PUSH 14)
46    (GETVALUE&PUSH 1)                   ; SIGN
48    (CALL2 8)                           ; E*
50    (SETVALUE 1)                        ; SIGN
52    (LOAD&PUSH 2)
53    (GETVALUE&PUSH 2)                   ; E
55    (GETVALUE&PUSH 1)                   ; SIGN
57    (LOAD&PUSH 4)
58    (CALL2&PUSH 8)                      ; E*
60    (GETVALUE&PUSH 2)                   ; E
62    (CALL1&PUSH 7)                      ; E1+
64    (CALL1&PUSH 11)                     ; CDISREP
66    (CALL1&PUSH 12)                     ; $BERN
68    (CALL1&PUSH 13)                     ; PREP1
70    (LOAD&PUSH 4)
71    (LOAD&PUSH 18)
72    (CALL2&PUSH 5)                      ; E+
74    (CALL2&PUSH 8)                      ; E*
76    (CALL2 8)                           ; E*
78    (CONS&PUSH)
79    (LOAD 4)
80    (CDR)
81    (CONS&PUSH)
82    (CALLS1 170)                        ; RPLACD
84    (LOAD&CDR&STORE 2)
86    L86
86    (CONST&PUSH 4)                      ; (2 . 1)
87    (GETVALUE&PUSH 2)                   ; E
89    (CALL2 5)                           ; E+
91    (SETVALUE 2)                        ; E
93    (PUSH)
94    (LOAD&PUSH 18)
95    (CALL2&JMPIFNOT 6 L28)              ; E>
99    (GETVALUE 0)                        ; L
101   (SKIP 3)
103   (UNBIND 3)
105   (SKIP&RET 6)


Disassembly of function #:|(DEFUN EXPSEC-FUNS (PW L CHNG) ...)-145|
(CONST 0) = EXPSEC-FUNS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPSEC-FUNS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPSEC-FUNS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPSEC-FUNS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPSEC-FUNS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPSEC-FUNS
8     (SKIP&RET 1)


Disassembly of function EXPSEC-FUNS
(CONST 0) = L
(CONST 1) = E
(CONST 2) = SIGN
(CONST 3) = (1 . 1)
(CONST 4) = (2 . 1)
(CONST 5) = E+
(CONST 6) = E>
(CONST 7) = E1-
(CONST 8) = E*
(CONST 9) = EQUO
(CONST 10) = CDISREP
(CONST 11) = $EULER
(CONST 12) = PREP1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN E L)
writes special variables : (SIGN L E)
62 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; E
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; SIGN
10    (NIL&PUSH)
11    (GETVALUE 0)                        ; L
13    (CAR)
14    (SETVALUE 1)                        ; E
16    (GETVALUE&PUSH 0)                   ; L
18    (NIL)
19    (CONS)
20    (SETVALUE 0)                        ; L
22    (STORE 4)
23    (CONST 3)                           ; (1 . 1)
24    (SETVALUE 2)                        ; SIGN
26    (STORE 0)
27    (JMP L74)
29    L29
29    (LOAD&PUSH 0)
30    (GETVALUE&PUSH 1)                   ; E
32    (GETVALUE&PUSH 1)                   ; E
34    (CALL1&PUSH 7)                      ; E1-
36    (CALL2&PUSH 8)                      ; E*
38    (CALL2 9)                           ; EQUO
40    (STORE 0)
41    (LOAD&PUSH 12)
42    (GETVALUE&PUSH 2)                   ; SIGN
44    (CALL2 8)                           ; E*
46    (SETVALUE 2)                        ; SIGN
48    (LOAD&PUSH 4)
49    (GETVALUE&PUSH 1)                   ; E
51    (GETVALUE&PUSH 2)                   ; SIGN
53    (LOAD&PUSH 3)
54    (CALL2&PUSH 8)                      ; E*
56    (GETVALUE&PUSH 1)                   ; E
58    (CALL1&PUSH 10)                     ; CDISREP
60    (CALL1&PUSH 11)                     ; $EULER
62    (CALL1&PUSH 12)                     ; PREP1
64    (CALL2 8)                           ; E*
66    (CONS&PUSH)
67    (LOAD 6)
68    (CDR)
69    (CONS&PUSH)
70    (CALLS1 170)                        ; RPLACD
72    (LOAD&CDR&STORE 4)
74    L74
74    (CONST&PUSH 4)                      ; (2 . 1)
75    (GETVALUE&PUSH 1)                   ; E
77    (CALL2 5)                           ; E+
79    (SETVALUE 1)                        ; E
81    (PUSH)
82    (LOAD&PUSH 15)
83    (CALL2&JMPIFNOT 6 L29)              ; E>
86    (GETVALUE 0)                        ; L
88    (SKIP 1)
90    (UNBIND1)
91    (SKIP 1)
93    (UNBIND 2)
95    (SKIP&RET 4)


Disassembly of function #:|(DEFUN EXPASIN-FUNS (PW L CHNG) ...)-146|
(CONST 0) = EXPASIN-FUNS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPASIN-FUNS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPASIN-FUNS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPASIN-FUNS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPASIN-FUNS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPASIN-FUNS
8     (SKIP&RET 1)


Disassembly of function EXPASIN-FUNS
(CONST 0) = L
(CONST 1) = E
(CONST 2) = SIGN
(CONST 3) = N
(CONST 4) = D
(CONST 5) = 1
(CONST 6) = (2 . 1)
(CONST 7) = E+
(CONST 8) = E>
(CONST 9) = EDIFF
(CONST 10) = E1-
(CONST 11) = *RED
(CONST 12) = X
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN D E N X L)
writes special variables : (D N SIGN L E)
87 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; E
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; SIGN
10    (NIL)
11    (BIND 3)                            ; N
13    (NIL)
14    (BIND 4)                            ; D
16    (GETVALUE 0)                        ; L
18    (CAR)
19    (SETVALUE 1)                        ; E
21    (GETVALUE&PUSH 0)                   ; L
23    (NIL)
24    (CONS)
25    (SETVALUE 0)                        ; L
27    (STORE 9)
29    (CONST 5)                           ; 1
30    (SETVALUE 2)                        ; SIGN
32    (SETVALUE 3)                        ; N
34    (SETVALUE 4)                        ; D
36    (JMP L122)
39    L39
39    (GETVALUE 12)                       ; X
41    (JMP L113)
44    L44
44    (GETVALUE&PUSH 3)                   ; N
46    (GETVALUE&PUSH 1)                   ; E
48    (CONST&PUSH 6)                      ; (2 . 1)
49    (CALL2 9)                           ; EDIFF
51    (CAR&PUSH)
52    (CALLSR 2 55)                       ; *
55    (SETVALUE 3)                        ; N
57    (GETVALUE&PUSH 4)                   ; D
59    (GETVALUE&PUSH 1)                   ; E
61    (CALL1 10)                          ; E1-
63    (CAR&PUSH)
64    (CALLSR 2 55)                       ; *
67    (SETVALUE 4)                        ; D
69    (GETVALUE&PUSH 2)                   ; SIGN
71    (LOAD&PUSH 18)
72    (CALLSR 2 55)                       ; *
75    (SETVALUE 2)                        ; SIGN
77    (LOAD&PUSH 9)
78    (GETVALUE&PUSH 1)                   ; E
80    (GETVALUE&PUSH 3)                   ; N
82    (GETVALUE&PUSH 2)                   ; SIGN
84    (CALLSR&PUSH 2 55)                  ; *
87    (GETVALUE&PUSH 4)                   ; D
89    (GETVALUE 1)                        ; E
91    (CAR&PUSH)
92    (CALLSR&PUSH 2 55)                  ; *
95    (CALL2 11)                          ; *RED
97    (BIND 12)                           ; X
99    (GETVALUE 12)                       ; X
101   (JMPIFATOM L39)
103   (GETVALUE 12)                       ; X
105   (CDR)
106   (CAR&PUSH)
107   (GETVALUE 12)                       ; X
109   (CDR)
110   (CDR)
111   (CAR)
112   (CONS)
113   L113
113   (UNBIND1)
114   (CONS&PUSH)
115   (LOAD 11)
116   (CDR)
117   (CONS&PUSH)
118   (CALLS1 170)                        ; RPLACD
120   (LOAD&CDR&STORE 9)
122   L122
122   (CONST&PUSH 6)                      ; (2 . 1)
123   (GETVALUE&PUSH 1)                   ; E
125   (CALL2 7)                           ; E+
127   (SETVALUE 1)                        ; E
129   (PUSH)
130   (LOAD&PUSH 20)
131   (CALL2&JMPIFNOT 8 L44)              ; E>
135   (GETVALUE 0)                        ; L
137   (UNBIND 3)
139   (SKIP 1)
141   (UNBIND 2)
143   (SKIP&RET 4)


Disassembly of function #:|(SLOOP FOR (FUN EXP) ...)-147|
(CONST 0) = EXP
(CONST 1) = 
(%EX ((EXPEXP-FUNS 1 . 1) ((0 . 1) 1 . 1) (1 . 1) (1 . 1) (1 . 1)) %SIN
 (EXPEXP-FUNS ((1 . 1) 1 . 1) (-1 . 1) (-1 . 1) (2 . 1)) %COS
 ((EXPEXP-FUNS 2 . 1) ((0 . 1) 1 . 1) (-1 . 1) (-1 . 1) (2 . 1)) %SINH
 (EXPEXP-FUNS ((1 . 1) 1 . 1) (1 . 1) (1 . 1) (2 . 1)) %COSH
 ((EXPEXP-FUNS 2 . 1) ((0 . 1) 1 . 1) (1 . 1) (1 . 1) (2 . 1)) %LOG
 (EXPLOG-FUNS ((1 . 1) 1 . 1) (-1 . 1) (-1 . 1) (1 . 1)) %ATAN
 (EXPLOG-FUNS ((1 . 1) 1 . 1) (-1 . 1) (-1 . 1) (2 . 1)) %ATANH
 (EXPLOG-FUNS ((1 . 1) 1 . 1) (1 . 1) (1 . 1) (2 . 1)) %COT
 (EXPCOT-FUNS ((-1 . 1) 1 . 1) (1 . 1) (-1 . 1) (0 . 1)) %CSC
 (EXPCOT-FUNS ((-1 . 1) 1 . 1) (-1 . 1) (-1 . 1) (-2 . 1)) %CSCH
 (EXPCOT-FUNS ((-1 . 1) 1 . 1) (-1 . 1) (1 . 1) (-2 . 1)) %COTH
 (EXPCOT-FUNS ((-1 . 1) 1 . 1) (1 . 1) (1 . 1) (0 . 1)) %TAN
 (EXPTAN-FUNS ((1 . 1) 1 . 1) (-1 . 1)) %TANH
 (EXPTAN-FUNS ((1 . 1) 1 . 1) (1 . 1)) %SEC
 ((EXPSEC-FUNS 2 . 1) ((0 . 1) 1 . 1) (-1 . 1)) %SECH
 ((EXPSEC-FUNS 2 . 1) ((0 . 1) 1 . 1) (1 . 1)) %ASIN
 (EXPASIN-FUNS ((1 . 1) 1 . 1) 1) %ASINH (EXPASIN-FUNS ((1 . 1) 1 . 1) -1)
 %GAMMA (EXPGAM-FUN ((-1 . 1) 1 . 1)) $PSI (EXPPLYGAM-FUNS PLYGAM-ORD))
(CONST 2) = EXP-FORM
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
writes special variable : (EXP)
25 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; EXP
4     (CONST&PUSH 1)                      ; (%EX (# # # ...) %SIN ...)
5     (LOAD&JMPIFNOT 0 L30)
8     L8
8     (LOAD&CAR&STORE 0 4)
11    (LOAD 0)
12    (CDR)
13    (CAR)
14    (SETVALUE 0)                        ; EXP
16    (LOAD&PUSH 4)
17    (GETVALUE&PUSH 0)                   ; EXP
19    (CONST&PUSH 2)                      ; EXP-FORM
20    (CALL 3 3)                          ; PUTPROP
23    (LOAD 0)
24    (CDR)
25    (CDR)
26    (STORE 0)
27    (LOAD&JMPIF 0 L8)
30    L30
30    (NIL)
31    (SKIP 1)
33    (UNBIND1)
34    (SKIP&RET 2)


Disassembly of function #:|(DEFUN KNOWN-PS (FUN) ...)-148|
(CONST 0) = KNOWN-PS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KNOWN-PS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KNOWN-PS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KNOWN-PS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KNOWN-PS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KNOWN-PS
8     (SKIP&RET 1)


Disassembly of function KNOWN-PS
(CONST 0) = (EXP-FORM SP2)
(CONST 1) = GETL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (EXP-FORM SP2)
2     (CALL2 1)                           ; GETL
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN SRF (X) ...)-149|
(CONST 0) = SRF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRF
8     (SKIP&RET 1)


Disassembly of function SRF
(CONST 0) = X
(CONST 1) = EXACT-POLY
(CONST 2) = TLIST
(CONST 3) = *WITHIN-SRF?*
(CONST 4) = TAYLOR1
(CONST 5) = TRUNC-VECTOR
(CONST 6) = E>
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variables : (TLIST X)
46 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T)
4     (BIND 1)                            ; EXACT-POLY
6     (NIL)
7     (BIND 2)                            ; TLIST
9     (T)
10    (BIND 3)                            ; *WITHIN-SRF?*
12    (GETVALUE&PUSH 0)                   ; X
14    (NIL&PUSH)
15    (CALL2 4)                           ; TAYLOR1
17    (SETVALUE 0)                        ; X
19    (CAR&PUSH)
20    (CALLS1 149)                        ; FIFTH
22    (SETVALUE 2)                        ; TLIST
24    (PUSH)
25    (GETVALUE 0)                        ; X
27    (CDR&PUSH)
28    (NIL&PUSH)
29    (CALL2&PUSH 5)                      ; TRUNC-VECTOR
31    (LOAD&JMPIFNOT 1 L61)
34    L34
34    (LOAD 0)
35    (CAR)
36    (JMPIFNOT L56)
38    (LOAD&CAR&PUSH 0)
40    (LOAD 2)
41    (CAR)
42    (CDR)
43    (CAR)
44    (CAR&PUSH)
45    (CALL2&JMPIFNOT 6 L56)              ; E>
48    (LOAD 1)
49    (CAR)
50    (CDR)
51    (CAR&PUSH)
52    (LOAD&CAR&PUSH 1)
54    (CALLS1 169)                        ; SYSTEM::%RPLACA
56    L56
56    (LOAD&CDR&STORE 1)
58    (LOAD&JMPIF 1 L34)
61    L61
61    (SKIP 2)
63    (GETVALUE 0)                        ; X
65    (UNBIND 4)
67    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $TAYLOR N ...)-150|
(CONST 0) = $TAYLOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TAYLOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAYLOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TAYLOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TAYLOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TAYLOR
8     (SKIP&RET 1)


Disassembly of function $TAYLOR
(CONST 0) = N
(CONST 1) = 0
(CONST 2) = $TAYLOR
(CONST 3) = WNA-ERR
(CONST 4) = 1
(CONST 5) = NARG1
(CONST 6) = LISTIFY1
(CONST 7) = TAYLOR*
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (N)
20 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (GETVALUE&PUSH 0)                   ; N
7     (CONST&PUSH 1)                      ; 0
8     (CALLSR&JMPIFNOT 1 45 L15)          ; =
12    (CONST&PUSH 2)                      ; $TAYLOR
13    (CALL1 3)                           ; WNA-ERR
15    L15
15    (CONST&PUSH 4)                      ; 1
16    (LOAD&PUSH 5)
17    (CALL2&PUSH 5)                      ; NARG1
19    (CONST&PUSH 4)                      ; 1
20    (GETVALUE&PUSH 0)                   ; N
22    (CALLSR&PUSH 1 54)                  ; -
25    (LOAD&PUSH 6)
26    (CALL2&PUSH 6)                      ; LISTIFY1
28    (CALL2 7)                           ; TAYLOR*
30    (UNBIND1)
31    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TAYLOR* (ARG L) ...)-151|
(CONST 0) = TAYLOR*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAYLOR*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAYLOR*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAYLOR*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAYLOR*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAYLOR*
8     (SKIP&RET 1)


Disassembly of function TAYLOR*
(CONST 0) = ARG
(CONST 1) = L
(CONST 2) = TLIST
(CONST 3) = $MAXTAYORDER
(CONST 4) = *WITHIN-SRF?*
(CONST 5) = $TAYLOR_TRUNCATE_POLYNOMIALS
(CONST 6) = USER-SPECIFIED
(CONST 7) = EXACT-POLY
(CONST 8) = PARSE-TAY-ARGS
(CONST 9) = TAYLOR1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TAYLOR_TRUNCATE_POLYNOMIALS TLIST ARG L)
28 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (NIL)
7     (BIND 2)                            ; TLIST
9     (NIL)
10    (BIND 3)                            ; $MAXTAYORDER
12    (NIL)
13    (BIND 4)                            ; *WITHIN-SRF?*
15    (GETVALUE 1)                        ; L
17    (JMPIF L38)
19    (CONST 6)                           ; USER-SPECIFIED
20    L20
20    (BIND 7)                            ; EXACT-POLY
22    (GETVALUE&PUSH 1)                   ; L
24    (CALL1 8)                           ; PARSE-TAY-ARGS
26    (GETVALUE&PUSH 0)                   ; ARG
28    (GETVALUE&PUSH 2)                   ; TLIST
30    (NIL)
31    (CONS&PUSH)
32    (CALL2 9)                           ; TAYLOR1
34    (UNBIND 6)
36    (SKIP&RET 3)
38    L38
38    (GETVALUE 5)                        ; $TAYLOR_TRUNCATE_POLYNOMIALS
40    (NOT)
41    (JMP L20)


Disassembly of function #:|(DEFUN TAY-ORDER (N) ...)-152|
(CONST 0) = TAY-ORDER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAY-ORDER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-ORDER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAY-ORDER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAY-ORDER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAY-ORDER
8     (SKIP&RET 1)


Disassembly of function TAY-ORDER
(CONST 0) = N
(CONST 1) = $FLOAT
(CONST 2) = MODULUS
(CONST 3) = $INF
(CONST 4) = $TAYLOR
(CONST 5) = WNA-ERR
(CONST 6) = MNUMP
(CONST 7) = "~&~:M---non-numeric expansion order~%"
(CONST 8) = MERROR
(CONST 9) = PREP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (NIL)
4     (BIND 1)                            ; $FLOAT
6     (NIL)
7     (BIND 2)                            ; MODULUS
9     (GETVALUE&PUSH 0)                   ; N
11    (JMPIFEQTO 3 L34)                   ; $INF
14    (GETVALUE 0)                        ; N
16    (JMPIFNOT L37)
18    (GETVALUE&PUSH 0)                   ; N
20    (CALL1&JMPIFNOT 6 L42)              ; MNUMP
23    (GETVALUE&PUSH 0)                   ; N
25    (CALL1 9)                           ; PREP1
27    L27
27    (PUSH)
28    (NIL)
29    (CONS)
30    L30
30    (UNBIND 3)
32    (SKIP&RET 2)
34    L34
34    (NIL)
35    (JMP L27)
37    L37
37    (CONST&PUSH 4)                      ; $TAYLOR
38    (CALL1 5)                           ; WNA-ERR
40    (JMP L30)
42    L42
42    (CONST&PUSH 7)                      ; "~&~:M---non-numeric expansion order~%"
43    (GETVALUE&PUSH 0)                   ; N
45    (CALL2 8)                           ; MERROR
47    (JMP L30)


Disassembly of function #:|(DEFUN RE-ERAT (HEAD EXP) ...)-153|
(CONST 0) = RE-ERAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RE-ERAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RE-ERAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RE-ERAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RE-ERAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RE-ERAT
8     (SKIP&RET 1)


Disassembly of function RE-ERAT
(CONST 0) = EXP
(CONST 1) = TAYLOR1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (LOAD 6)
6     (CDR)
7     (CDR)
8     (CDR)
9     (CDR)
10    (CAR&PUSH)
11    (LIST&PUSH 1)
13    (CALL2 1)                           ; TAYLOR1
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PARSE-TAY-ARGS (L) ...)-154|
(CONST 0) = PARSE-TAY-ARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-TAY-ARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-TAY-ARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-TAY-ARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-TAY-ARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-TAY-ARGS
8     (SKIP&RET 1)


Disassembly of function PARSE-TAY-ARGS
(CONST 0) = L
(CONST 1) = MLIST
(CONST 2) = $RATDISREP
(CONST 3) = PARSE-TAY-ARGS1
(CONST 4) = MNUMP
(CONST 5) = $INF
(CONST 6) = PARSE-TAY-ARGS2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
78 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (NOT)
6     (JMPIF1 L81)
9     (GETVALUE 0)                        ; L
11    (CAR&PUSH)
12    (CALLS2&JMPIF 6 L84)                ; SYMBOLP
16    (GETVALUE 0)                        ; L
18    (CAR)
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFNOTEQTO 1 L84)                ; MLIST
24    (GETVALUE 0)                        ; L
26    (CAR)
27    (CDR)
28    (CDR)
29    (BIND 0)                            ; L
31    (GETVALUE 0)                        ; L
33    (JMPIFNOT L56)
35    L35
35    (GETVALUE 0)                        ; L
37    (CAR&PUSH)
38    (CALL1&JMPIF 4 L104)                ; MNUMP
41    (GETVALUE 0)                        ; L
43    (CAR&PUSH)
44    (JMPIFEQTO 5 L104)                  ; $INF
47    (GETVALUE 0)                        ; L
49    (CDR)
50    (SETVALUE 0)                        ; L
52    (GETVALUE 0)                        ; L
54    (JMPIF L35)
56    L56
56    (UNBIND1)
57    (GETVALUE 0)                        ; L
59    (CAR&PUSH)
60    (GETVALUE 0)                        ; L
62    (CDR)
63    (CAR&PUSH)
64    (GETVALUE 0)                        ; L
66    (CDR)
67    (CDR)
68    (CAR&PUSH)
69    (LIST&PUSH 3)
71    (CALL1 6)                           ; PARSE-TAY-ARGS2
73    L73
73    (GETVALUE 0)                        ; L
75    (CDR)
76    (CDR)
77    L77
77    (CDR&PUSH)
78    (JSR L0)
81    L81
81    (UNBIND1)
82    (SKIP&RET 2)
84    L84
84    (GETVALUE 0)                        ; L
86    (CAR&PUSH)
87    (GETVALUE 0)                        ; L
89    (CDR)
90    (CAR&PUSH)
91    (CALL1&PUSH 2)                      ; $RATDISREP
93    (GETVALUE 0)                        ; L
95    (CDR)
96    (CDR)
97    (CAR&PUSH)
98    (LIST&PUSH 3)
100   (CALL1 3)                           ; PARSE-TAY-ARGS1
102   (JMP L73)
104   L104
104   (UNBIND1)
105   (GETVALUE 0)                        ; L
107   (CAR)
108   (CDR&PUSH)
109   (CALL1 3)                           ; PARSE-TAY-ARGS1
111   (GETVALUE 0)                        ; L
113   (JMP L77)


Disassembly of function #:|(DEFUN PARSE-TAY-ARGS1 (L) ...)-155|
(CONST 0) = PARSE-TAY-ARGS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-TAY-ARGS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-TAY-ARGS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-TAY-ARGS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-TAY-ARGS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-TAY-ARGS1
8     (SKIP&RET 1)


Disassembly of function PARSE-TAY-ARGS1
(CONST 0) = L
(CONST 1) = $LISTP
(CONST 2) = PARSE-TAY-ARGS2
(CONST 3) = $RATDISREP
(CONST 4) = TAY-ORDER
(CONST 5) = MAKE-SWITCH-LIST
(CONST 6) = V
(CONST 7) = TLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST V L)
writes special variable : (TLIST)
40 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (CAR&PUSH)
6     (CALL1&JMPIF 1 L53)                 ; $LISTP
9     (GETVALUE 0)                        ; L
11    (CAR&PUSH)
12    (GETVALUE 0)                        ; L
14    (CDR)
15    (CAR&PUSH)
16    (CALL1&PUSH 3)                      ; $RATDISREP
18    (GETVALUE 0)                        ; L
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (CALL1&PUSH 4)                      ; TAY-ORDER
25    (GETVALUE 0)                        ; L
27    (CDR)
28    (CDR)
29    (CDR&PUSH)
30    (CALL1&PUSH 5)                      ; MAKE-SWITCH-LIST
32    (LOAD 3)
33    (BIND 6)                            ; V
35    (GETVALUE&PUSH 6)                   ; V
37    (LOAD&PUSH 5)
38    (LOAD&PUSH 7)
39    (LOAD&PUSH 6)
40    (LIST&PUSH 4)
42    (GETVALUE 7)                        ; TLIST
44    (CONS)
45    (SETVALUE 7)                        ; TLIST
47    (UNBIND1)
48    (SKIP 4)
50    L50
50    (UNBIND1)
51    (SKIP&RET 2)
53    L53
53    (GETVALUE&PUSH 0)                   ; L
55    (CALL1 2)                           ; PARSE-TAY-ARGS2
57    (JMP L50)


Disassembly of function #:|(DEFUN PARSE-TAY-ARGS2 (L) ...)-156|
(CONST 0) = PARSE-TAY-ARGS2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-TAY-ARGS2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-TAY-ARGS2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-TAY-ARGS2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-TAY-ARGS2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-TAY-ARGS2
8     (SKIP&RET 1)


Disassembly of function PARSE-TAY-ARGS2
(CONST 0) = L
(CONST 1) = $LISTP
(CONST 2) = RATDISREP
(CONST 3) = MAKE-LONG-LIST
(CONST 4) = MAKE-SWITCH-LIST
(CONST 5) = 1
(CONST 6) = 0
(CONST 7) = LABEL
(CONST 8) = A
(CONST 9) = "Ran out of truncation levels"
(CONST 10) = MERROR
(CONST 11) = TAY-ORDER
(CONST 12) = MULTIVAR
(CONST 13) = TLIST
(CONST 14) = "~&Ran out of matching pts of expansion~%"
(CONST 15) = MULTI
(CONST 16) = -1
(CONST 17) = EXPTA
(CONST 18) = TIMESK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST LABEL A L)
writes special variables : (TLIST A L)
146 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-UNBOUND 1)
5     (CALLS2&PUSH 143)                   ; GENSYM
7     (GETVALUE 0)                        ; L
9     (CAR)
10    (CDR&PUSH)
11    (GETVALUE 0)                        ; L
13    (CDR)
14    (CAR&PUSH)
15    (CALL1&JMPIF 1 L187)                ; $LISTP
19    (GETVALUE 0)                        ; L
21    (CDR)
22    (CAR&PUSH)
23    (CALL1&PUSH 2)                      ; RATDISREP
25    (NIL)
26    (CONS)
27    L27
27    (PUSH)
28    (CALL1&PUSH 3)                      ; MAKE-LONG-LIST
30    (GETVALUE 0)                        ; L
32    (CDR)
33    (CDR)
34    (CAR&PUSH)
35    (GETVALUE 0)                        ; L
37    (CDR)
38    (CDR)
39    (CDR&PUSH)
40    (CALL1&PUSH 4)                      ; MAKE-SWITCH-LIST
42    (CONST&PUSH 5)                      ; 1
43    (CONST&PUSH 6)                      ; 0
44    (LOAD 6)
45    (BIND 7)                            ; LABEL
47    (LOAD 6)
48    (JMPIFATOM L197)
51    (LOAD&PUSH 8)
52    (LOAD 7)
53    (CDR)
54    (BIND 0)                            ; L
56    (LOAD 3)
57    (BIND 8)                            ; A
59    (GETVALUE 8)                        ; A
61    (JMPIFNOT L99)
63    L63
63    (GETVALUE 0)                        ; L
65    (JMPIFNOT L209)
68    (LOAD&PUSH 11)
69    (GETVALUE 0)                        ; L
71    (CAR&PUSH)
72    (CALLSR&STORE 2 58 11)              ; LCM
76    (LOAD&PUSH 10)
77    (GETVALUE 0)                        ; L
79    (CAR&PUSH)
80    (CALLSR&STORE 1 51 10)              ; MAX
84    L84
84    (GETVALUE 8)                        ; A
86    (CDR&PUSH)
87    (GETVALUE 0)                        ; L
89    (CDR)
90    (SETVALUE 0)                        ; L
92    (POP)
93    (SETVALUE 8)                        ; A
95    (GETVALUE 8)                        ; A
97    (JMPIF L63)
99    L99
99    (LOAD&CDR&STORE 13)
101   (UNBIND 2)
103   (SKIP 1)
105   L105
105   (GETVALUE&PUSH 7)                   ; LABEL
107   (LOAD&PUSH 4)
108   (CALL1&PUSH 11)                     ; TAY-ORDER
110   (CONST&PUSH 6)                      ; 0
111   (CONST&PUSH 12)                     ; MULTIVAR
112   (LOAD&PUSH 8)
113   (LOAD&PUSH 13)
114   (LIST&PUSH 3)
116   (NIL)
117   (CONS&PUSH)
118   (LIST&PUSH 4)
120   (GETVALUE 13)                       ; TLIST
122   (CONS)
123   (SETVALUE 13)                       ; TLIST
125   (LOAD&PUSH 8)
126   (LOAD&PUSH 7)
127   (LOAD&PUSH 9)
128   (LOAD&JMPIFNOT 2 L178)
131   L131
131   (LOAD&JMPIFNOT 0 L215)
135   (LOAD&CAR&PUSH 2)
137   (LOAD&CAR&PUSH 2)
139   (CALL1&PUSH 11)                     ; TAY-ORDER
141   (LOAD&CAR&PUSH 2)
143   (CONST&PUSH 15)                     ; MULTI
144   (GETVALUE&PUSH 7)                   ; LABEL
146   (LOAD&PUSH 12)
147   (LOAD&CAR&PUSH 7)
149   (CONST&PUSH 16)                     ; -1
150   (CALL2&PUSH 17)                     ; EXPTA
152   (CALL2&PUSH 18)                     ; TIMESK
154   (LIST&PUSH 3)
156   (LOAD 12)
157   (CONS&PUSH)
158   (LIST&PUSH 4)
160   (GETVALUE 13)                       ; TLIST
162   (CONS)
163   (SETVALUE 13)                       ; TLIST
165   L165
165   (LOAD&CDR&PUSH 2)
167   (LOAD&CDR&PUSH 2)
169   (LOAD&CDR&STORE 2)
171   (POP&STORE 2)
173   (POP&STORE 2)
175   (LOAD&JMPIF 2 L131)
178   L178
178   (NIL)
179   (SKIP 3)
181   (UNBIND1)
182   (SKIP 7)
184   (UNBIND1)
185   (SKIP&RET 2)
187   L187
187   (GETVALUE 0)                        ; L
189   (CDR)
190   (CAR)
191   (CDR&PUSH)
192   (CALLS1 158)                        ; COPY-LIST
194   (JMP L27)
197   L197
197   (LOAD 6)
198   (STORE 4)
199   (STORE 3)
200   (PUSH)
201   (NIL)
202   (CONS&PUSH)
203   (CALL1 3)                           ; MAKE-LONG-LIST
205   (STORE 6)
206   (JMP L105)
209   L209
209   (CONST&PUSH 9)                      ; "Ran out of truncation levels"
210   (CALL1 10)                          ; MERROR
212   (JMP L84)
215   L215
215   (CONST&PUSH 14)                     ; "~&Ran out of matching pts of expansion~%"
216   (CALL1 10)                          ; MERROR
218   (JMP L165)


Disassembly of function #:|(DEFUN MAKE-SWITCH-LIST (L) ...)-157|
(CONST 0) = MAKE-SWITCH-LIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-SWITCH-LIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-SWITCH-LIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-SWITCH-LIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-SWITCH-LIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-SWITCH-LIST
8     (SKIP&RET 1)


Disassembly of function MAKE-SWITCH-LIST
(CONST 0) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; L
6     (JMP L19)
8     L8
8     (LOAD&CAR&PUSH 0)
10    (LOAD&PUSH 0)
11    (T)
12    (CONS&PUSH)
13    (LOAD&CONS&STORE 2)
15    (SKIP 1)
17    (LOAD&CDR&STORE 0)
19    L19
19    (LOAD&PUSH 0)
20    (CALLS1&JMPIFNOT 146 L8)            ; ENDP
23    (SKIP 1)
25    (LOAD&PUSH 0)
26    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
28    (SKIP 1)
30    (UNBIND1)
31    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MAKE-LONG-LIST (Q) ...)-158|
(CONST 0) = MAKE-LONG-LIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-LONG-LIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-LONG-LIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-LONG-LIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-LONG-LIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-LONG-LIST
8     (SKIP&RET 1)


Disassembly of function MAKE-LONG-LIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOAD&PUSH 2)
2     (CALLSR 2 35)                       ; NCONC
5     (SKIP&RET 2)


Disassembly of function #:|(DEFUN RATWTSETUP (L) ...)-159|
(CONST 0) = RATWTSETUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATWTSETUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATWTSETUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATWTSETUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATWTSETUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATWTSETUP
8     (SKIP&RET 1)


Disassembly of function RATWTSETUP
(CONST 0) = L
(CONST 1) = A
(CONST 2) = MULTIVAR
(CONST 3) = ASSQ
(CONST 4) = MULTI
(CONST 5) = TLIST
(CONST 6) = ZL-ASSOC
(CONST 7) = 1
(CONST 8) = 
"Can't have two sets of multi dependent ~
			       variables which require~%different orders ~
			       of expansion"
(CONST 9) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST L)
writes special variables : (L A)
61 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (BIND 0)                            ; L
7     (NIL)
8     (BIND 1)                            ; A
10    (NIL&PUSH)
11    (GETVALUE 0)                        ; L
13    (JMPIFNOT L76)
15    L15
15    (CONST&PUSH 2)                      ; MULTIVAR
16    (GETVALUE 0)                        ; L
18    (CAR)
19    (CDR)
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (CALL2 3)                           ; ASSQ
25    (CDR)
26    (SETVALUE 1)                        ; A
28    (JMPIFNOT L67)
30    (CDR)
31    (CAR&PUSH)
32    (LOAD&JMPIFNOT 0 L65)
35    L35
35    (CONST&PUSH 4)                      ; MULTI
36    (LOAD&CAR&PUSH 1)
38    (GETVALUE&PUSH 5)                   ; TLIST
40    (CALL2 6)                           ; ZL-ASSOC
42    (CDR)
43    (CDR)
44    (CDR)
45    (CAR&PUSH)
46    (CALL2 3)                           ; ASSQ
48    (CDR)
49    (CDR)
50    (CAR&PUSH)
51    (JMPIFEQTO 7 L60)                   ; 1
54    (LOAD&JMPIFNOT 1 L83)
57    (CONST&PUSH 8)                      ; "Can't have two sets of multi dependent ~
			       variables which require~%different orders ~
			       of expansion"
58    (CALL1 9)                           ; MERROR
60    L60
60    (LOAD&CDR&STORE 0)
62    (LOAD&JMPIF 0 L35)
65    L65
65    (SKIP 1)
67    L67
67    (GETVALUE 0)                        ; L
69    (CDR)
70    (SETVALUE 0)                        ; L
72    (GETVALUE 0)                        ; L
74    (JMPIF L15)
76    L76
76    (NIL)
77    (SKIP 1)
79    (UNBIND 3)
81    (SKIP&RET 2)
83    L83
83    (T&STORE 1)
85    (SKIP 1)
87    (JMP L67)


Disassembly of function #:|(DEFMVAR $TAYLOR_ORDER_COEFFICIENTS T ...)-160-1|
(CONST 0) = $TAYLOR_ORDER_COEFFICIENTS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAYLOR_ORDER_COEFFICIENTS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TAYLOR_ORDER_COEFFICIENTS
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TAYLOR_ORDER_COEFFICIENTS T ...)-160-2|
(CONST 0) = (SPECIAL $TAYLOR_ORDER_COEFFICIENTS)
(CONST 1) = $TAYLOR_ORDER_COEFFICIENTS
(CONST 2) = VARIABLE
(CONST 3) = "When TRUE, coefficients of taylor series will be ordered canonically."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TAYLOR_ORDER_COEFFICIENTS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TAYLOR_ORDER_COEFFICIENTS
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TAYLOR_ORDER_COEFFICIENTS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "When TRUE, coefficients of taylor series will be ordered canonically."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TAYLOR_ORDER_COEFFICIENTS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TAYLOR1 (E TLIST) ...)-161|
(CONST 0) = TAYLOR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAYLOR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAYLOR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAYLOR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAYLOR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAYLOR1
8     (SKIP&RET 1)


Disassembly of function TAYLOR1
(CONST 0) = E
(CONST 1) = TLIST
(CONST 2) = FIND-TLISTS
(CONST 3) = TLIST-MERGE
(CONST 4) = $ZEROBERN
(CONST 5) = $SIMP
(CONST 6) = $ALGEBRAIC
(CONST 7) = GENPAIRS
(CONST 8) = VARLIST
(CONST 9) = TVARS
(CONST 10) = LOG-1
(CONST 11) = LOG%I
(CONST 12) = IVARS
(CONST 13) = KEY-VARS
(CONST 14) = ANS
(CONST 15) = FULL-LOG
(CONST 16) = LAST-EXP
(CONST 17) = MAINVAR-DATUM
(CONST 18) = ZEROLIST
(CONST 19) = TAYLOR_SIMPLIFIER
(CONST 20) = LEAST_TERM?
(CONST 21) = TVAR-LIMITS
(CONST 22) = D
(CONST 23) = TVAR?
(CONST 24) = ((%LOG SIMP) -1)
(CONST 25) = ((%LOG SIMP) $%I)
(CONST 26) = CAR
(CONST 27) = $TAYLOR_SIMPLIFIER
(CONST 28) = TAYLOR_SIMPLIFIER_CALLER
(CONST 29) = MFREE
(CONST 30) = "TAYLOR: attempt to expand ~M~&at a point depending on ~M"
(CONST 31) = MERROR
(CONST 32) = GENVAR
(CONST 33) = SETPLIST
(CONST 34) = RATSETUP
(CONST 35) = $TAYLOR_ORDER_COEFFICIENTS
(CONST 36) = *WITHIN-SRF?*
(CONST 37) = NEWVAR
(CONST 38) = ORDERPOINTER
(CONST 39) = V
(CONST 40) = ZL-ASSOC
(CONST 41) = TRANSFORM-TVAR
(CONST 42) = Y
(CONST 43) = DISREP
(CONST 44) = PUTPROP
(CONST 45) = PGET
(CONST 46) = 1
(CONST 47) = RATWTSETUP
(CONST 48) = SETUP-MULTIVAR-DISREP
(CONST 49) = ADJOIN-SING-DATUM
(CONST 50) = TAY-ERR
(CONST 51) = TAYLOR3
(CONST 52) = TAY-ERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(ANS Y IVARS KEY-VARS V *WITHIN-SRF?* $TAYLOR_ORDER_COEFFICIENTS VARLIST GENVAR
 TVARS $TAYLOR_SIMPLIFIER D TLIST E)
writes special variables : 
(ANS MAINVAR-DATUM GENPAIRS IVARS KEY-VARS V VARLIST TVARS LOG%I LOG-1
 LEAST_TERM? LAST-EXP $ALGEBRAIC $SIMP $ZEROBERN TAYLOR_SIMPLIFIER TLIST)
322 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD 4)
4     (BIND 1)                            ; TLIST
6     (GETVALUE&PUSH 0)                   ; E
8     (CALL1&PUSH 2)                      ; FIND-TLISTS
10    (GETVALUE&PUSH 1)                   ; TLIST
12    (CALLSR&PUSH 2 35)                  ; NCONC
15    (CALL1 3)                           ; TLIST-MERGE
17    (SETVALUE 1)                        ; TLIST
19    (NIL)
20    (BIND 4)                            ; $ZEROBERN
22    (NIL)
23    (BIND 5)                            ; $SIMP
25    (NIL)
26    (BIND 6)                            ; $ALGEBRAIC
28    (NIL)
29    (BIND 7)                            ; GENPAIRS
31    (NIL)
32    (BIND 8)                            ; VARLIST
34    (NIL)
35    (BIND 9)                            ; TVARS
37    (NIL&PUSH)
38    (NIL)
39    (BIND 10)                           ; LOG-1
41    (NIL)
42    (BIND 11)                           ; LOG%I
44    (NIL)
45    (BIND 12)                           ; IVARS
47    (NIL)
48    (BIND 13)                           ; KEY-VARS
50    (NIL)
51    (BIND 14)                           ; ANS
53    (NIL)
54    (BIND 15)                           ; FULL-LOG
56    (NIL)
57    (BIND 16)                           ; LAST-EXP
59    (NIL)
60    (BIND 17)                           ; MAINVAR-DATUM
62    (NIL)
63    (BIND 18)                           ; ZEROLIST
65    (NIL)
66    (BIND 19)                           ; TAYLOR_SIMPLIFIER
68    (NIL)
69    (BIND 20)                           ; LEAST_TERM?
71    (NIL)
72    (BIND 21)                           ; TVAR-LIMITS
74    (NIL&PUSH)
75    (GETVALUE&PUSH 1)                   ; TLIST
77    (JMP L118)
79    L79
79    (GETVALUE&PUSH 22)                  ; D
81    (NIL)
82    (CONS)
83    (JMP L108)
85    L85
85    (GETVALUE 27)                       ; $TAYLOR_SIMPLIFIER
87    (SETVALUE 19)                       ; TAYLOR_SIMPLIFIER
89    (JMP L179)
92    L92
92    (LOAD&CAR&PUSH 0)
94    (LOAD 0)
95    (BIND 22)                           ; D
97    (GETVALUE 22)                       ; D
99    (CAR&PUSH)
100   (CALL1&JMPIF 23 L79)                ; TVAR?
103   (GETVALUE&PUSH 22)                  ; D
105   (LOAD&CONS&STORE 42)
107   (NIL)
108   L108
108   (UNBIND1)
109   (PUSH)
110   (LOAD&PUSH 3)
111   (CALLS1&STORE 163 2)                ; NRECONC
114   (SKIP 1)
116   (LOAD&CDR&STORE 0)
118   L118
118   (LOAD&PUSH 0)
119   (CALLS1&JMPIFNOT 146 L92)           ; ENDP
122   (SKIP 1)
124   (LOAD&PUSH 0)
125   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
127   (SKIP 1)
129   (SETVALUE 1)                        ; TLIST
131   (T)
132   (SETVALUE 4)                        ; $ZEROBERN
134   (SETVALUE 5)                        ; $SIMP
136   (SETVALUE 6)                        ; $ALGEBRAIC
138   (GETVALUE 0)                        ; E
140   (SETVALUE 16)                       ; LAST-EXP
142   (T)
143   (SETVALUE 20)                       ; LEAST_TERM?
145   (CONST 24)                          ; ((%LOG SIMP) -1)
147   (SETVALUE 10)                       ; LOG-1
149   (CONST 25)                          ; ((%LOG SIMP) $%I)
151   (SETVALUE 11)                       ; LOG%I
153   (CONST&PUSH 26)                     ; CAR
154   (GETVALUE&PUSH 1)                   ; TLIST
156   (CALLSR 0 22)                       ; MAPCAR
159   (SETVALUE 9)                        ; TVARS
161   (PUSH)
162   (CALLS1 158)                        ; COPY-LIST
164   (SETVALUE 8)                        ; VARLIST
166   (GETVALUE 27)                       ; $TAYLOR_SIMPLIFIER
168   (JMPIFNOT L179)
170   (PUSH)
171   (CALLS1&JMPIF 80 L85)               ; FBOUNDP
175   (CONST 28)                          ; TAYLOR_SIMPLIFIER_CALLER
177   (SETVALUE 19)                       ; TAYLOR_SIMPLIFIER
179   L179
179   (GETVALUE&PUSH 1)                   ; TLIST
181   (LOAD&JMPIFNOT 0 L209)
184   L184
184   (LOAD 0)
185   (CAR)
186   (CDR)
187   (CDR)
188   (CAR&PUSH)
189   (GETVALUE&PUSH 9)                   ; TVARS
191   (CALL2&JMPIF 29 L204)               ; MFREE
194   (CONST&PUSH 30)                     ; "TAYLOR: attempt to expand ~M~&at a point depending on ~M"
196   (GETVALUE&PUSH 0)                   ; E
198   (LOAD 2)
199   (CAR)
200   (CAR&PUSH)
201   (CALL 3 31)                         ; MERROR
204   L204
204   (LOAD&CDR&STORE 0)
206   (LOAD&JMPIF 0 L184)
209   L209
209   (SKIP 1)
211   (GETVALUE&PUSH 32)                  ; GENVAR
213   (LOAD&PUSH 0)
214   (JMP L226)
216   L216
216   (LOAD&CAR&PUSH 0)
218   (LOAD&PUSH 0)
219   (NIL&PUSH)
220   (CALL2 33)                          ; SETPLIST
222   (SKIP 1)
224   (LOAD&CDR&STORE 0)
226   L226
226   (LOAD&PUSH 0)
227   (CALLS1&JMPIFNOT 146 L216)          ; ENDP
230   (SKIP 2)
232   (GETVALUE&PUSH 8)                   ; VARLIST
234   (GETVALUE&PUSH 32)                  ; GENVAR
236   (CALL2 34)                          ; RATSETUP
238   (GETVALUE 35)                       ; $TAYLOR_ORDER_COEFFICIENTS
240   (JMPIFNOT L250)
242   (GETVALUE 36)                       ; *WITHIN-SRF?*
244   (JMPIF L250)
246   (GETVALUE&PUSH 0)                   ; E
248   (CALL1 37)                          ; NEWVAR
250   L250
250   (GETVALUE&PUSH 8)                   ; VARLIST
252   (CALL1 38)                          ; ORDERPOINTER
254   (GETVALUE 8)                        ; VARLIST
256   (BIND 39)                           ; V
258   (JMP L265)
260   L260
260   (GETVALUE 39)                       ; V
262   (CDR)
263   (SETVALUE 39)                       ; V
265   L265
265   (GETVALUE 39)                       ; V
267   (CAR&PUSH)
268   (GETVALUE 9)                        ; TVARS
270   (CAR)
271   (JMPIFNOTEQ L260)
273   (GETVALUE 39)                       ; V
275   (UNBIND1)
276   (PUSH)
277   (LOAD&PUSH 0)
278   (GETVALUE 8)                        ; VARLIST
280   (BIND 39)                           ; V
282   (GETVALUE&PUSH 32)                  ; GENVAR
284   (JMP L294)
286   L286
286   (GETVALUE 39)                       ; V
288   (CDR&PUSH)
289   (LOAD&CDR&STORE 1)
291   (POP)
292   (SETVALUE 39)                       ; V
294   L294
294   (GETVALUE 39)                       ; V
296   (CAR&PUSH)
297   (GETVALUE 9)                        ; TVARS
299   (CAR)
300   (JMPIFNOTEQ L286)
302   (POP)
303   (UNBIND1)
304   (PUSH)
305   (JMP L360)
307   L307
307   (LOAD&CAR&PUSH 0)
309   (LOAD 2)
310   (CAR)
311   (CONS&PUSH)
312   (GETVALUE 13)                       ; KEY-VARS
314   (CONS)
315   (SETVALUE 13)                       ; KEY-VARS
317   (LOAD&CAR&PUSH 1)
319   (GETVALUE&PUSH 1)                   ; TLIST
321   (CALL2&PUSH 40)                     ; ZL-ASSOC
323   (LOAD&PUSH 2)
324   (LOAD&CAR&PUSH 3)
326   (LOAD&PUSH 2)
327   (CALL2&PUSH 41)                     ; TRANSFORM-TVAR
329   (CALLS1 168)                        ; RPLACA
331   (LOAD&CAR&PUSH 1)
333   (LOAD 3)
334   (CAR)
335   (CONS&PUSH)
336   (GETVALUE 12)                       ; IVARS
338   (CONS)
339   (SETVALUE 12)                       ; IVARS
341   (LOAD 0)
342   (CDR)
343   (CDR)
344   (CDR&PUSH)
345   (LOAD&CAR&PUSH 2)
347   (LOAD&CAR&PUSH 3)
349   (CALLS1 78)                         ; SYMBOL-VALUE
351   (CONS&PUSH)
352   (CALLS1 170)                        ; RPLACD
354   (SKIP 1)
356   (LOAD&CDR&STORE 1)
358   (LOAD&CDR&STORE 0)
360   L360
360   (LOAD&PUSH 1)
361   (CALLS1&JMPIF 146 L368)             ; ENDP
364   (LOAD&PUSH 0)
365   (CALLS1&JMPIFNOT 146 L307)          ; ENDP
368   L368
368   (SKIP 3)
370   (NIL&PUSH)
371   (GETVALUE&PUSH 8)                   ; VARLIST
373   (GETVALUE&PUSH 32)                  ; GENVAR
375   (JMP L413)
377   L377
377   (SKIP 2)
379   (JMP L425)
381   L381
381   (LOAD&CAR&PUSH 1)
383   (LOAD 1)
384   (BIND 42)                           ; Y
386   (LOAD&PUSH 3)
387   (GETVALUE&PUSH 42)                  ; Y
389   (CONST&PUSH 43)                     ; DISREP
391   (CALL 3 44)                         ; PUTPROP
394   (GETVALUE&PUSH 42)                  ; Y
396   (LOAD&PUSH 4)
397   (CALL1&PUSH 45)                     ; PGET
399   (CONST 46)                          ; 1
401   (CONS)
402   (CONS)
403   (UNBIND1)
404   (PUSH)
405   (LOAD&CONS&STORE 4)
407   (SKIP 2)
409   (LOAD&CDR&STORE 1)
411   (LOAD&CDR&STORE 0)
413   L413
413   (LOAD&PUSH 1)
414   (CALLS1&JMPIF 146 L377)             ; ENDP
417   (LOAD&CAR&PUSH 1)
419   (LOAD&PUSH 1)
420   (CALLS1&JMPIFNOT 146 L381)          ; ENDP
423   (SKIP 3)
425   L425
425   (LOAD&PUSH 0)
426   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
428   (SKIP 1)
430   (SETVALUE 7)                        ; GENPAIRS
432   (GETVALUE&PUSH 1)                   ; TLIST
434   (CALL1 47)                          ; RATWTSETUP
436   (NIL&PUSH)
437   (CALL1 48)                          ; SETUP-MULTIVAR-DISREP
439   (GETVALUE&PUSH 1)                   ; TLIST
441   (PUSH-UNBOUND 1)
443   (CALLS1 156)                        ; LAST
445   (CAR)
446   (SETVALUE 17)                       ; MAINVAR-DATUM
448   (LOAD&PUSH 36)
450   (JMP L477)
452   L452
452   (GETVALUE 14)                       ; ANS
454   (CAR&PUSH)
455   (GETVALUE 14)                       ; ANS
457   (CDR)
458   (CAR&PUSH)
459   (CALL2 52)                          ; TAY-ERROR
461   (JMP L499)
463   L463
463   (LOAD&CAR&PUSH 0)
465   (LOAD 0)
466   (BIND 22)                           ; D
468   (GETVALUE&PUSH 22)                  ; D
470   (CALL1 49)                          ; ADJOIN-SING-DATUM
472   (UNBIND1)
473   (SKIP 1)
475   (LOAD&CDR&STORE 0)
477   L477
477   (LOAD&PUSH 0)
478   (CALLS1&JMPIFNOT 146 L463)          ; ENDP
481   (SKIP 1)
483   (CONST 50)                          ; TAY-ERR
485   (CATCH-OPEN L492)
487   (GETVALUE&PUSH 0)                   ; E
489   (CALL1 51)                          ; TAYLOR3
491   (CATCH-CLOSE)
492   L492
492   (SETVALUE 14)                       ; ANS
494   (CAR)
495   (JMPIFATOM L452)
497   (GETVALUE 14)                       ; ANS
499   L499
499   (UNBIND 12)
501   (SKIP 1)
503   (UNBIND 8)
505   (SKIP&RET 3)


Disassembly of function #:|(DEFUN TRANSFORM-TVAR (VAR DATA) ...)-162|
(CONST 0) = TRANSFORM-TVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSFORM-TVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSFORM-TVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSFORM-TVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSFORM-TVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSFORM-TVAR
8     (SKIP&RET 1)


Disassembly of function TRANSFORM-TVAR
(CONST 0) = VAR
(CONST 1) = TVAR?
(CONST 2) = $ASYMP
(CONST 3) = ASSQ
(CONST 4) = ($INF INFINITY)
(CONST 5) = MEMQ
(CONST 6) = -1
(CONST 7) = POWER*
(CONST 8) = $MINF
(CONST 9) = MUL*
(CONST 10) = SUB*
(CONST 11) = TEMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEMP VAR)
89 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CALL1&JMPIFNOT 1 L78)              ; TVAR?
9     (LOAD 4)
10    (CDR)
11    (CDR)
12    (CAR&PUSH)
13    (LOAD&PUSH 0)
14    (CALLS2&JMPIF 8 L82)                ; NUMBERP
18    (SKIP 1)
20    (JMPIFNOT L33)
22    L22
22    (CONST&PUSH 2)                      ; $ASYMP
23    (LOAD 5)
24    (CDR)
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (CALL2 3)                           ; ASSQ
30    (CDR)
31    (JMPIFNOT L92)
33    L33
33    (LOAD 4)
34    (CDR)
35    (CDR)
36    (CAR&PUSH)
37    (CONST&PUSH 4)                      ; ($INF INFINITY)
38    (CALL2&JMPIF 5 L96)                 ; MEMQ
41    (LOAD 4)
42    (CDR)
43    (CDR)
44    (CAR&PUSH)
45    (JMPIFEQTO 8 L103)                  ; $MINF
48    (GETVALUE&PUSH 0)                   ; VAR
50    (LOAD 5)
51    (CDR)
52    (CDR)
53    (CAR&PUSH)
54    (CALL2 10)                          ; SUB*
56    (BIND 11)                           ; TEMP
58    (CONST&PUSH 2)                      ; $ASYMP
59    (LOAD 8)
60    (CDR)
61    (CDR)
62    (CDR)
63    (CAR&PUSH)
64    (CALL2 3)                           ; ASSQ
66    (CDR)
67    (JMPIF L113)
69    (GETVALUE 11)                       ; TEMP
71    (UNBIND1)
72    (JMPIF1 L75)
74    L74
74    (NIL)
75    L75
75    (UNBIND1)
76    (SKIP&RET 3)
78    L78
78    (GETVALUE 0)                        ; VAR
80    (JMP L75)
82    L82
82    (LOAD&PUSH 0)
83    (CALLS2 145)                        ; ZEROP
85    (SKIP 1)
87    (JMPIFNOT L33)
89    (JMP L22)
92    L92
92    (GETVALUE 0)                        ; VAR
94    (JMP L75)
96    L96
96    (GETVALUE&PUSH 0)                   ; VAR
98    (CONST&PUSH 6)                      ; -1
99    (CALL2 7)                           ; POWER*
101   (JMP L75)
103   L103
103   (CONST&PUSH 6)                      ; -1
104   (GETVALUE&PUSH 0)                   ; VAR
106   (CONST&PUSH 6)                      ; -1
107   (CALL2&PUSH 7)                      ; POWER*
109   (CALL2 9)                           ; MUL*
111   (JMP L75)
113   L113
113   (GETVALUE&PUSH 11)                  ; TEMP
115   (CONST&PUSH 6)                      ; -1
116   (CALL2 7)                           ; POWER*
118   (UNBIND1)
119   (JMPIF1 L75)
121   (JMP L74)


Disassembly of function #:|(DEFUN TAYLOR_SIMPLIFIER_CALLER (EXP) ...)-163|
(CONST 0) = TAYLOR_SIMPLIFIER_CALLER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAYLOR_SIMPLIFIER_CALLER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAYLOR_SIMPLIFIER_CALLER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAYLOR_SIMPLIFIER_CALLER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAYLOR_SIMPLIFIER_CALLER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAYLOR_SIMPLIFIER_CALLER
8     (SKIP&RET 1)


Disassembly of function TAYLOR_SIMPLIFIER_CALLER
(CONST 0) = EXP
(CONST 1) = $TAYLOR_SIMPLIFIER
(CONST 2) = MCALL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP $TAYLOR_SIMPLIFIER)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 1)                   ; $TAYLOR_SIMPLIFIER
5     (GETVALUE&PUSH 0)                   ; EXP
7     (CALL2 2)                           ; MCALL
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TAYLOR_SIMPLIFY_RECURSE (PS) ...)-164|
(CONST 0) = TAYLOR_SIMPLIFY_RECURSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAYLOR_SIMPLIFY_RECURSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAYLOR_SIMPLIFY_RECURSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAYLOR_SIMPLIFY_RECURSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAYLOR_SIMPLIFY_RECURSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAYLOR_SIMPLIFY_RECURSE
8     (SKIP&RET 1)


Disassembly of function TAYLOR_SIMPLIFY_RECURSE
(CONST 0) = PS
(CONST 1) = TAYLOR_SIMPLIFIER
(CONST 2) = CDISREP
(CONST 3) = TAYLOR2
(CONST 4) = KEY-VARS
(CONST 5) = ASSQ
(CONST 6) = TLIST
(CONST 7) = ZL-ASSOC
(CONST 8) = VAR
(CONST 9) = MULTIVAR
(CONST 10) = DISREP
(CONST 11) = (0 . 1)
(CONST 12) = EMAX
(CONST 13) = PUSH-PW
(CONST 14) = ANS
(CONST 15) = (1 . 1)
(CONST 16) = PSTIMES
(CONST 17) = PSPLUS
(CONST 18) = POP-PW
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TAYLOR_SIMPLIFIER ANS TLIST KEY-VARS)
writes special variables : (ANS VAR)
117 byte-code instructions:
0     L0
0     (LOAD&CAR&PUSH 1)
2     (JMPIFNOTEQTO 0 L133)               ; PS
6     (LOAD 1)
7     (CDR)
8     (CAR)
9     (CAR&PUSH)
10    (GETVALUE&PUSH 4)                   ; KEY-VARS
12    (CALL2 5)                           ; ASSQ
14    (CDR&PUSH)
15    (GETVALUE&PUSH 6)                   ; TLIST
17    (CALL2&PUSH 7)                      ; ZL-ASSOC
19    (NIL)
20    (BIND 8)                            ; VAR
22    (CONST&PUSH 9)                      ; MULTIVAR
23    (LOAD 4)
24    (CDR)
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (CALL2 5)                           ; ASSQ
30    (CDR)
31    (JMPIF L144)
34    (LOAD 5)
35    (CDR)
36    (CAR)
37    (CAR&PUSH)
38    (CONST&PUSH 10)                     ; DISREP
39    (PUSH-UNBOUND 1)
41    (CALLS2 132)                        ; GET
43    (SETVALUE 8)                        ; VAR
45    (LOAD&PUSH 3)
46    (LOAD 6)
47    (CDR)
48    (CDR)
49    (CAR)
50    (CAR&PUSH)
51    (CONST&PUSH 11)                     ; (0 . 1)
52    (CALL2&PUSH 12)                     ; EMAX
54    (CALL2 13)                          ; PUSH-PW
56    L56
56    (LOAD 5)
57    (CDR)
58    (CDR)
59    (CDR&PUSH)
60    (CONST 11)                          ; (0 . 1)
61    (BIND 14)                           ; ANS
63    (LOAD&JMPIFNOT 3 L119)
66    L66
66    (LOAD&CDR&PUSH 3)
68    (LOAD&JMPIFNOT 8 L149)
72    (LOAD 4)
73    (CAR)
74    (CDR&PUSH)
75    (JSR&PUSH L0)
78    (LOAD 5)
79    (CAR)
80    (CAR)
81    (CAR&PUSH)
82    (CALLS2&JMPIF 145 L157)             ; ZEROP
86    (CONST&PUSH 0)                      ; PS
87    (LOAD 12)
88    (CDR)
89    (CAR&PUSH)
90    (LOAD 13)
91    (CDR)
92    (CDR)
93    (CAR&PUSH)
94    (LOAD 8)
95    (CAR)
96    (CAR&PUSH)
97    (CONST 15)                          ; (1 . 1)
98    (CONS&PUSH)
99    (NIL)
100   (CONS)
101   (CONS)
102   (CONS)
103   (CONS)
104   L104
104   (PUSH)
105   (CALL2 16)                          ; PSTIMES
107   L107
107   (PUSH)
108   (GETVALUE&PUSH 14)                  ; ANS
110   (CALL2 17)                          ; PSPLUS
112   (SETVALUE 14)                       ; ANS
114   (POP&STORE 3)
116   (LOAD&JMPIF 3 L66)
119   L119
119   (LOAD&JMPIFNOT 7 L125)
122   (PUSH)
123   (CALL1 18)                          ; POP-PW
125   L125
125   (GETVALUE 14)                       ; ANS
127   (UNBIND1)
128   (SKIP 1)
130   (UNBIND1)
131   (SKIP&RET 3)
133   L133
133   (GETVALUE&PUSH 1)                   ; TAYLOR_SIMPLIFIER
135   (LOAD&PUSH 2)
136   (CALL1&PUSH 2)                      ; CDISREP
138   (FUNCALL&PUSH 1)
140   (CALL1 3)                           ; TAYLOR2
142   (SKIP&RET 2)
144   L144
144   (NIL&STORE 3)
146   (JMP L56)
149   L149
149   (LOAD 4)
150   (CAR)
151   (CDR&PUSH)
152   (JSR L0)
155   (JMP L107)
157   L157
157   (CONST 15)                          ; (1 . 1)
158   (JMP L104)


Disassembly of function #:|(DEFUN PUSH-PW (DATUM PW) ...)-165|
(CONST 0) = PUSH-PW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PUSH-PW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PUSH-PW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PUSH-PW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PUSH-PW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PUSH-PW
8     (SKIP&RET 1)


Disassembly of function PUSH-PW
(CONST 0) = MULTIVAR
(CONST 1) = ASSQ
(CONST 2) = VARS
(CONST 3) = TLIST
(CONST 4) = ZL-ASSOC
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST VARS)
writes special variable : (VARS)
49 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (LOAD&CDR&PUSH 3)
5     (LOAD&PUSH 3)
6     (LOAD 2)
7     (CONS&PUSH)
8     (CALLS1 169)                        ; SYSTEM::%RPLACA
10    (SKIP 1)
12    (CONST&PUSH 0)                      ; MULTIVAR
13    (LOAD 3)
14    (CDR)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (CALL2 1)                           ; ASSQ
20    (CDR)
21    (STORE 2)
22    (JMPIFNOT1 L64)
24    (CDR)
25    (CAR)
26    (BIND 2)                            ; VARS
28    (GETVALUE 2)                        ; VARS
30    (JMPIFNOT L60)
32    L32
32    (GETVALUE 2)                        ; VARS
34    (CAR&PUSH)
35    (GETVALUE&PUSH 3)                   ; TLIST
37    (CALL2&PUSH 4)                      ; ZL-ASSOC
39    (LOAD 0)
40    (CDR)
41    (CAR&PUSH)
42    (LOAD&CDR&PUSH 1)
44    (LOAD&PUSH 7)
45    (LOAD 2)
46    (CONS&PUSH)
47    (CALLS1 169)                        ; SYSTEM::%RPLACA
49    (SKIP 2)
51    (GETVALUE 2)                        ; VARS
53    (CDR)
54    (SETVALUE 2)                        ; VARS
56    (GETVALUE 2)                        ; VARS
58    (JMPIF L32)
60    L60
60    (NIL)
61    (UNBIND1)
62    (SKIP&RET 3)
64    L64
64    (SKIP&RET 3)


Disassembly of function #:|(DEFUN POP-PW (DATUM) ...)-166|
(CONST 0) = POP-PW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POP-PW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POP-PW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POP-PW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POP-PW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POP-PW
8     (SKIP&RET 1)


Disassembly of function POP-PW
(CONST 0) = MULTIVAR
(CONST 1) = ASSQ
(CONST 2) = VARS
(CONST 3) = TLIST
(CONST 4) = ZL-ASSOC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST VARS)
writes special variable : (VARS)
45 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR&PUSH)
3     (LOAD&CDR&PUSH 2)
5     (LOAD&CDR&PUSH 1)
7     (CALLS1 169)                        ; SYSTEM::%RPLACA
9     (SKIP 1)
11    (CONST&PUSH 0)                      ; MULTIVAR
12    (LOAD 2)
13    (CDR)
14    (CDR)
15    (CDR)
16    (CAR&PUSH)
17    (CALL2 1)                           ; ASSQ
19    (CDR)
20    (STORE 1)
21    (JMPIFNOT1 L62)
23    (CDR)
24    (CAR)
25    (BIND 2)                            ; VARS
27    (GETVALUE 2)                        ; VARS
29    (JMPIFNOT L58)
31    L31
31    (GETVALUE 2)                        ; VARS
33    (CAR&PUSH)
34    (GETVALUE&PUSH 3)                   ; TLIST
36    (CALL2&PUSH 4)                      ; ZL-ASSOC
38    (LOAD 0)
39    (CDR)
40    (CAR&PUSH)
41    (LOAD&CDR&PUSH 1)
43    (LOAD&CDR&PUSH 1)
45    (CALLS1 169)                        ; SYSTEM::%RPLACA
47    (SKIP 2)
49    (GETVALUE 2)                        ; VARS
51    (CDR)
52    (SETVALUE 2)                        ; VARS
54    (GETVALUE 2)                        ; VARS
56    (JMPIF L31)
58    L58
58    (NIL)
59    (UNBIND1)
60    (SKIP&RET 2)
62    L62
62    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SETUP-MULTIVAR-DISREP (MRAT?) ...)-167|
(CONST 0) = SETUP-MULTIVAR-DISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SETUP-MULTIVAR-DISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SETUP-MULTIVAR-DISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SETUP-MULTIVAR-DISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SETUP-MULTIVAR-DISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SETUP-MULTIVAR-DISREP
8     (SKIP&RET 1)


Disassembly of function SETUP-MULTIVAR-DISREP
(CONST 0) = VARLIST
(CONST 1) = GENVAR
(CONST 2) = TLIST
(CONST 3) = MULTIVAR
(CONST 4) = ASSQ
(CONST 5) = 1
(CONST 6) = DISREP
(CONST 7) = PUTPROP
(CONST 8) = MFREE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST GENVAR VARLIST)
writes special variables : (GENVAR VARLIST)
88 byte-code instructions:
0     (GETVALUE 0)                        ; VARLIST
2     (BIND 0)                            ; VARLIST
4     (GETVALUE 1)                        ; GENVAR
6     (BIND 1)                            ; GENVAR
8     (NIL&PUSH)
9     (LOAD&JMPIF 8 L21)
12    (LOAD&JMPIF 8 L38)
15    L15
15    (GETVALUE 2)                        ; TLIST
17    L17
17    (PUSH)
18    (LOAD&PUSH 0)
19    (JMP L79)
21    L21
21    (CAR)
22    (CDR)
23    (CDR)
24    (CAR)
25    (SETVALUE 0)                        ; VARLIST
27    (LOAD 8)
28    (CAR)
29    (CDR)
30    (CDR)
31    (CDR)
32    (CAR)
33    (SETVALUE 1)                        ; GENVAR
35    (LOAD&JMPIFNOT 8 L15)
38    L38
38    (CAR&PUSH)
39    (CALLS1 149)                        ; FIFTH
41    (JMP L17)
43    L43
43    (LOAD&CAR&PUSH 0)
45    (LOAD&CONS&STORE 3)
47    (LOAD 0)
48    (CDR)
49    (CDR)
50    (CDR)
51    (CDR)
52    (CAR&PUSH)
53    (CONST&PUSH 5)                      ; 1
54    (CONST&PUSH 6)                      ; DISREP
55    (CALL 3 7)                          ; PUTPROP
58    (SKIP 1)
60    (JMP L77)
62    L62
62    (LOAD&CAR&PUSH 0)
64    (CONST&PUSH 3)                      ; MULTIVAR
65    (LOAD 1)
66    (CDR)
67    (CDR)
68    (CDR)
69    (CAR&PUSH)
70    (CALL2 4)                           ; ASSQ
72    (CDR)
73    (JMPIF L43)
75    (SKIP 1)
77    L77
77    (LOAD&CDR&STORE 0)
79    L79
79    (LOAD&PUSH 0)
80    (CALLS1&JMPIFNOT 146 L62)           ; ENDP
83    (SKIP 2)
85    (LOAD 0)
86    (JMPIFNOT1 L120)
88    (GETVALUE&PUSH 0)                   ; VARLIST
90    (GETVALUE&PUSH 1)                   ; GENVAR
92    (LOAD&JMPIFNOT 1 L117)
95    L95
95    (LOAD&CAR&PUSH 1)
97    (LOAD&PUSH 3)
98    (CALL2&JMPIF 8 L108)                ; MFREE
101   (LOAD&CAR&PUSH 0)
103   (CONST&PUSH 5)                      ; 1
104   (CONST&PUSH 6)                      ; DISREP
105   (CALL 3 7)                          ; PUTPROP
108   L108
108   (LOAD&CDR&PUSH 1)
110   (LOAD&CDR&STORE 1)
112   (POP&STORE 1)
114   (LOAD&JMPIF 1 L95)
117   L117
117   (NIL)
118   (SKIP 2)
120   L120
120   (SKIP 1)
122   (UNBIND 2)
124   (SKIP&RET 2)


Disassembly of function #:|(DEFVAR TRUNC-CONSTANTS? 'T)-168|
(CONST 0) = (SPECIAL TRUNC-CONSTANTS?)
(CONST 1) = TRUNC-CONSTANTS?
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TRUNC-CONSTANTS?)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TRUNC-CONSTANTS?
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TRUNC-CONSTANTS?
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; TRUNC-CONSTANTS?
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TAYLOR3 (E) ...)-169|
(CONST 0) = TAYLOR3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAYLOR3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAYLOR3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAYLOR3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAYLOR3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAYLOR3
8     (SKIP&RET 1)


Disassembly of function TAYLOR3
(CONST 0) = E
(CONST 1) = MBAGP
(CONST 2) = TAYLOR3
(CONST 3) = TLIST
(CONST 4) = EXACT-POLY
(CONST 5) = USER-SPECIFIED
(CONST 6) = PREP1
(CONST 7) = MRAT
(CONST 8) = SIMP
(CONST 9) = VARLIST
(CONST 10) = GENVAR
(CONST 11) = TAYLOR_SIMPLIFIER
(CONST 12) = TAYLOR2
(CONST 13) = TRUNC-CONSTANTS?
(CONST 14) = TAYLOR_SIMPLIFY_RECURSE
(CONST 15) = TRUNC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR VARLIST TAYLOR_SIMPLIFIER EXACT-POLY TLIST E)
writes special variable : (E)
60 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CALL1&JMPIF 1 L60)                 ; MBAGP
8     (GETVALUE 3)                        ; TLIST
10    (JMPIF L17)
12    (GETVALUE&PUSH 4)                   ; EXACT-POLY
14    (JMPIFNOTEQTO 5 L74)                ; USER-SPECIFIED
17    L17
17    (GETVALUE 11)                       ; TAYLOR_SIMPLIFIER
19    (JMPIFNOT L88)
22    (GETVALUE&PUSH 0)                   ; E
24    (CALL1 12)                          ; TAYLOR2
26    (SETVALUE 0)                        ; E
28    (NIL)
29    (BIND 4)                            ; EXACT-POLY
31    (NIL)
32    (BIND 13)                           ; TRUNC-CONSTANTS?
34    (GETVALUE&PUSH 0)                   ; E
36    (CALL1 14)                          ; TAYLOR_SIMPLIFY_RECURSE
38    (UNBIND 2)
40    L40
40    (PUSH)
41    (CONST&PUSH 7)                      ; MRAT
42    (CONST&PUSH 8)                      ; SIMP
43    (GETVALUE&PUSH 9)                   ; VARLIST
45    (GETVALUE&PUSH 10)                  ; GENVAR
47    (GETVALUE&PUSH 3)                   ; TLIST
49    (CONST&PUSH 15)                     ; TRUNC
50    (LIST 6)
52    L52
52    (PUSH)
53    (LOAD 1)
54    (CONS)
55    (SKIP 1)
57    L57
57    (UNBIND1)
58    (SKIP&RET 2)
60    L60
60    (GETVALUE 0)                        ; E
62    (CAR&PUSH)
63    (CONST&SYMBOL-FUNCTION&PUSH 2)      ; TAYLOR3
65    (GETVALUE 0)                        ; E
67    (CDR&PUSH)
68    (CALLSR 0 22)                       ; MAPCAR
71    (CONS)
72    (JMP L57)
74    L74
74    (GETVALUE&PUSH 0)                   ; E
76    (CALL1&PUSH 6)                      ; PREP1
78    (CONST&PUSH 7)                      ; MRAT
79    (CONST&PUSH 8)                      ; SIMP
80    (GETVALUE&PUSH 9)                   ; VARLIST
82    (GETVALUE&PUSH 10)                  ; GENVAR
84    (LIST 4)
86    (JMP L52)
88    L88
88    (GETVALUE&PUSH 0)                   ; E
90    (CALL1 12)                          ; TAYLOR2
92    (JMP L40)


Disassembly of function #:|(DEFUN FIND-TLISTS (E) ...)-170|
(CONST 0) = FIND-TLISTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIND-TLISTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIND-TLISTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIND-TLISTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIND-TLISTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIND-TLISTS
8     (SKIP&RET 1)


Disassembly of function FIND-TLISTS
(CONST 0) = E
(CONST 1) = *A*
(CONST 2) = FINDTL1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*A* E)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (NIL)
4     (BIND 1)                            ; *A*
6     (GETVALUE&PUSH 0)                   ; E
8     (CALL1 2)                           ; FINDTL1
10    (GETVALUE 1)                        ; *A*
12    (UNBIND 2)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FINDTL1 (E) ...)-171|
(CONST 0) = FINDTL1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDTL1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDTL1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDTL1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDTL1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDTL1
8     (SKIP&RET 1)


Disassembly of function FINDTL1
(CONST 0) = E
(CONST 1) = MNUMP
(CONST 2) = MRAT
(CONST 3) = TRUNC
(CONST 4) = MEMQ
(CONST 5) = *A*
(CONST 6) = FINDTL1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*A* E)
writes special variable : (*A*)
47 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CALLS2 5)                          ; ATOM
7     (JMPIF1 L30)
9     (GETVALUE&PUSH 0)                   ; E
11    (CALL1 1)                           ; MNUMP
13    (JMPIF1 L30)
15    (GETVALUE 0)                        ; E
17    (CAR)
18    (CAR&PUSH)
19    (JMPIFEQTO 2 L33)                   ; MRAT
22    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; FINDTL1
24    (GETVALUE 0)                        ; E
26    (CDR&PUSH)
27    (CALLSR 0 24)                       ; MAPC
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (CONST&PUSH 3)                      ; TRUNC
34    (GETVALUE 0)                        ; E
36    (CAR&PUSH)
37    (CALL2 4)                           ; MEMQ
39    (JMPIFNOT1 L30)
41    (NIL&PUSH)
42    (GETVALUE 0)                        ; E
44    (CAR&PUSH)
45    (CALLS1&PUSH 149)                   ; FIFTH
47    (JMP L60)
49    L49
49    (LOAD&CAR&PUSH 0)
51    (LOAD&PUSH 0)
52    (CALLS1&PUSH 161)                   ; COPY-TREE
54    (LOAD&CONS&STORE 2)
56    (SKIP 1)
58    (LOAD&CDR&STORE 0)
60    L60
60    (LOAD&PUSH 0)
61    (CALLS1&JMPIFNOT 146 L49)           ; ENDP
64    (SKIP 1)
66    (LOAD&PUSH 0)
67    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
70    (GETVALUE 5)                        ; *A*
72    (CONS)
73    (SETVALUE 5)                        ; *A*
75    (JMP L30)


Disassembly of function #:|(DEFUN TLIST-MERGE (TLISTS) ...)-172|
(CONST 0) = TLIST-MERGE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TLIST-MERGE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TLIST-MERGE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TLIST-MERGE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TLIST-MERGE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TLIST-MERGE
8     (SKIP&RET 1)


Disassembly of function TLIST-MERGE
(CONST 0) = TLIST
(CONST 1) = TEMP
(CONST 2) = ASSOL
(CONST 3) = TVAR?
(CONST 4) = (MEXPT %LOG)
(CONST 5) = MEMQ
(CONST 6) = "Illegal taylor variable ~M"
(CONST 7) = MERROR
(CONST 8) = $MAXTAYORDER
(CONST 9) = E>
(CONST 10) = ALIKE1
(CONST 11) = 
"Cannot combine two expressions expanded at ~
			different points"
(CONST 12) = UNION*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEMP $MAXTAYORDER TLIST)
writes special variables : (TLIST TEMP)
135 byte-code instructions:
0     (LOAD&PUSH 1)
1     (NIL)
2     (BIND 0)                            ; TLIST
4     (LOAD&JMPIFNOT 3 L114)
8     L8
8     (LOAD&CAR&PUSH 3)
10    (NIL)
11    (BIND 1)                            ; TEMP
13    (LOAD&JMPIFNOT 3 L105)
17    L17
17    (LOAD 3)
18    (CAR)
19    (CAR&PUSH)
20    (GETVALUE&PUSH 0)                   ; TLIST
22    (CALL2 2)                           ; ASSOL
24    (SETVALUE 1)                        ; TEMP
26    (JMPIFNOT L148)
29    (GETVALUE 8)                        ; $MAXTAYORDER
31    (JMPIF L174)
34    (LOAD 3)
35    (CAR)
36    (CDR)
37    (CAR)
38    (CAR&PUSH)
39    (GETVALUE 1)                        ; TEMP
41    (CDR)
42    (CAR)
43    (CAR&PUSH)
44    (CALL2&JMPIF 9 L58)                 ; E>
47    L47
47    (GETVALUE 1)                        ; TEMP
49    (CDR)
50    (CAR&PUSH)
51    (LOAD 4)
52    (CAR)
53    (CDR)
54    (CAR)
55    (CAR&PUSH)
56    (CALLS1 169)                        ; SYSTEM::%RPLACA
58    L58
58    (GETVALUE 1)                        ; TEMP
60    (CDR)
61    (CDR)
62    (CAR&PUSH)
63    (LOAD 4)
64    (CAR)
65    (CDR)
66    (CDR)
67    (CAR&PUSH)
68    (CALL2&JMPIF 10 L74)                ; ALIKE1
71    (CONST&PUSH 11)                     ; "Cannot combine two expressions expanded at ~
			different points"
72    (CALL1 7)                           ; MERROR
74    L74
74    (GETVALUE&PUSH 1)                   ; TEMP
76    (GETVALUE 1)                        ; TEMP
78    (CDR)
79    (CDR)
80    (CDR)
81    (CAR&PUSH)
82    (LOAD 5)
83    (CAR)
84    (CDR)
85    (CDR)
86    (CDR)
87    (CAR&PUSH)
88    (CALL2&PUSH 12)                     ; UNION*
90    (LOAD 1)
91    (CDR)
92    (CDR)
93    (CDR&PUSH)
94    (LOAD&PUSH 1)
95    (CALLS1 169)                        ; SYSTEM::%RPLACA
97    (SKIP 2)
99    L99
99    (LOAD&CDR&STORE 3)
101   (LOAD&JMPIF 3 L17)
105   L105
105   (UNBIND1)
106   (SKIP 1)
108   (LOAD&CDR&STORE 3)
110   (LOAD&JMPIF 3 L8)
114   L114
114   (GETVALUE&PUSH 0)                   ; TLIST
116   (CALLS2 73)                         ; NREVERSE
118   (UNBIND1)
119   (SKIP&RET 3)
121   L121
121   (GETVALUE 1)                        ; TEMP
123   (CAR&PUSH)
124   (GETVALUE 1)                        ; TEMP
126   (CDR)
127   (CAR&PUSH)
128   (GETVALUE 1)                        ; TEMP
130   (CDR)
131   (CDR)
132   (CAR&PUSH)
133   (GETVALUE 1)                        ; TEMP
135   (CDR)
136   (CDR)
137   (CDR)
138   (CAR&PUSH)
139   (LIST&PUSH 4)
141   (GETVALUE 0)                        ; TLIST
143   (CONS)
144   (SETVALUE 0)                        ; TLIST
146   (JMP L99)
148   L148
148   (LOAD 3)
149   (CAR)
150   (SETVALUE 1)                        ; TEMP
152   (CAR&PUSH)
153   (CALL1&JMPIF 3 L121)                ; TVAR?
156   (GETVALUE 1)                        ; TEMP
158   (CAR)
159   (CAR)
160   (CAR&PUSH)
161   (CONST&PUSH 4)                      ; (MEXPT %LOG)
162   (CALL2&JMPIF 5 L121)                ; MEMQ
165   (CONST&PUSH 6)                      ; "Illegal taylor variable ~M"
166   (GETVALUE 1)                        ; TEMP
168   (CAR&PUSH)
169   (CALL2 7)                           ; MERROR
171   (JMP L99)
174   L174
174   (LOAD 3)
175   (CAR)
176   (CDR)
177   (CAR)
178   (CAR&PUSH)
179   (GETVALUE 1)                        ; TEMP
181   (CDR)
182   (CAR)
183   (CAR&PUSH)
184   (CALL2&JMPIFNOT 9 L58)              ; E>
188   (JMP L47)


Disassembly of function #:|(DEFUN COMPATTLIST (LIST) ...)-173|
(CONST 0) = COMPATTLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPATTLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPATTLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPATTLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPATTLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPATTLIST
8     (SKIP&RET 1)


Disassembly of function COMPATTLIST
(CONST 0) = L
(CONST 1) = TLIST
(CONST 2) = ZL-ASSOC
(CONST 3) = ALIKE1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST L)
writes special variable : (L)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L36)
7     L7
7     (GETVALUE 0)                        ; L
9     (CAR)
10    (CAR&PUSH)
11    (GETVALUE&PUSH 1)                   ; TLIST
13    (CALL2 2)                           ; ZL-ASSOC
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (GETVALUE 0)                        ; L
20    (CAR)
21    (CDR)
22    (CDR)
23    (CAR&PUSH)
24    (CALL2&JMPIFNOT 3 L40)              ; ALIKE1
27    (GETVALUE 0)                        ; L
29    (CDR)
30    (SETVALUE 0)                        ; L
32    (GETVALUE 0)                        ; L
34    (JMPIF L7)
36    L36
36    (T)
37    L37
37    (UNBIND1)
38    (SKIP&RET 2)
40    L40
40    (NIL)
41    (JMP L37)


Disassembly of function #:|(DEFUN TAYLOR2 (E) ...)-174|
(CONST 0) = TAYLOR2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAYLOR2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAYLOR2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAYLOR2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAYLOR2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAYLOR2
8     (SKIP&RET 1)


Disassembly of function TAYLOR2
(CONST 0) = E
(CONST 1) = LAST-EXP
(CONST 2) = TLIST
(CONST 3) = ASSOLIKE
(CONST 4) = 1
(CONST 5) = VAR-EXPAND
(CONST 6) = MNUMP
(CONST 7) = TVARS
(CONST 8) = MFREE
(CONST 9) = (0 . 1)
(CONST 10) = MAINVAR-DATUM
(CONST 11) = E>
(CONST 12) = (0 . 1)
(CONST 13) = TAYLOR_SIMPLIFIER
(CONST 14) = PREP1
(CONST 15) = ZEROLIST
(CONST 16) = MEMQ
(CONST 17) = "Bad arg TAYLOR2 - internal error"
(CONST 18) = MERROR
(CONST 19) = MRAT
(CONST 20) = TRUNC
(CONST 21) = VARLIST
(CONST 22) = GENVAR
(CONST 23) = COMPATVARLIST
(CONST 24) = COMPATTLIST
(CONST 25) = PSTRUNC
(CONST 26) = EXACT-POLY
(CONST 27) = RE-TAYLOR
(CONST 28) = MPLUS
(CONST 29) = TSPLUS
(CONST 30) = MTIMES
(CONST 31) = TSTIMES
(CONST 32) = MEXPT
(CONST 33) = TSEXPT
(CONST 34) = %LOG
(CONST 35) = TSLOG
(CONST 36) = KNOWN-PS
(CONST 37) = TAY-TRANS
(CONST 38) = ARRAY
(CONST 39) = TRY-EXPANSION
(CONST 40) = MQAPPLYP
(CONST 41) = SUBFUNNAME
(CONST 42) = SPEC-TRANS
(CONST 43) = (%SUM %PRODUCT)
(CONST 44) = TSPRSUM
(CONST 45) = %DERIVATIVE
(CONST 46) = TSDIFF
(CONST 47) = %AT
(CONST 48) = CAR
(CONST 49) = L
(CONST 50) = FREE
(CONST 51) = NEWSYM
(CONST 52) = DIFF-EXPAND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L GENVAR VARLIST ZEROLIST TAYLOR_SIMPLIFIER MAINVAR-DATUM TVARS TLIST E)
writes special variables : (L ZEROLIST)
306 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (BIND 1)                            ; LAST-EXP
7     (GETVALUE&PUSH 0)                   ; E
9     (GETVALUE&PUSH 2)                   ; TLIST
11    (CALL2&JMPIF 3 L86)                 ; ASSOLIKE
15    (GETVALUE&PUSH 0)                   ; E
17    (CALL1&JMPIF 6 L32)                 ; MNUMP
20    (GETVALUE 0)                        ; E
22    (JMPIFATOM L32)
24    (GETVALUE&PUSH 0)                   ; E
26    (GETVALUE&PUSH 7)                   ; TVARS
28    (CALL2&JMPIFNOT 8 L287)             ; MFREE
32    L32
32    (CONST&PUSH 9)                      ; (0 . 1)
33    (GETVALUE 10)                       ; MAINVAR-DATUM
35    (CDR)
36    (CAR)
37    (CAR&PUSH)
38    (CALL2&JMPIF 11 L97)                ; E>
41    (GETVALUE 13)                       ; TAYLOR_SIMPLIFIER
43    (JMPIFNOT L111)
46    (GETVALUE 0)                        ; E
48    (JMPIFATOM L111)
50    (GETVALUE&PUSH 13)                  ; TAYLOR_SIMPLIFIER
52    (GETVALUE&PUSH 0)                   ; E
54    (FUNCALL&PUSH 1)
56    (CALL1&PUSH 14)                     ; PREP1
58    (LOAD&CAR&PUSH 0)
60    (LOAD&PUSH 0)
61    (CALLS2&JMPIF 8 L102)               ; NUMBERP
64    (SKIP 1)
66    (JMPIFNOT L81)
68    L68
68    (LOAD&PUSH 0)
69    (GETVALUE&PUSH 15)                  ; ZEROLIST
71    (CALL2&JMPIF 16 L81)                ; MEMQ
74    (GETVALUE&PUSH 0)                   ; E
76    (GETVALUE 15)                       ; ZEROLIST
78    (CONS)
79    (SETVALUE 15)                       ; ZEROLIST
81    L81
81    (POP)
82    (UNBIND1)
83    (JMP L501)
86    L86
86    (GETVALUE&PUSH 0)                   ; E
88    (CONST&PUSH 4)                      ; 1
89    (NIL&PUSH)
90    (CALL 3 5)                          ; VAR-EXPAND
93    (UNBIND1)
94    (JMP L501)
97    L97
97    (CONST 12)                          ; (0 . 1)
98    (UNBIND1)
99    (JMP L501)
102   L102
102   (LOAD&PUSH 0)
103   (CALLS2 145)                        ; ZEROP
105   (SKIP 1)
107   (JMPIFNOT L81)
109   (JMP L68)
111   L111
111   (GETVALUE&PUSH 0)                   ; E
113   (CALL1 14)                          ; PREP1
115   (UNBIND1)
116   (JMP L501)
119   L119
119   (CONST&PUSH 17)                     ; "Bad arg TAYLOR2 - internal error"
120   (CALL1 18)                          ; MERROR
122   (UNBIND1)
123   (JMP L501)
126   L126
126   (GETVALUE 0)                        ; E
128   (CDR&PUSH)
129   (CALL1 25)                          ; PSTRUNC
131   (UNBIND1)
132   (JMP L501)
135   L135
135   (CONST&PUSH 20)                     ; TRUNC
136   (GETVALUE 0)                        ; E
138   (CAR&PUSH)
139   (CALL2&JMPIFNOT 16 L172)            ; MEMQ
142   (GETVALUE&PUSH 21)                  ; VARLIST
144   (GETVALUE 0)                        ; E
146   (CAR)
147   (CDR)
148   (CDR)
149   (CAR&PUSH)
150   (GETVALUE&PUSH 22)                  ; GENVAR
152   (GETVALUE 0)                        ; E
154   (CAR)
155   (CDR)
156   (CDR)
157   (CDR)
158   (CAR&PUSH)
159   (CALL 4 23)                         ; COMPATVARLIST
162   (JMPIFNOT L172)
164   (GETVALUE 0)                        ; E
166   (CAR&PUSH)
167   (CALLS1&PUSH 149)                   ; FIFTH
169   (CALL1&JMPIF 24 L126)               ; COMPATTLIST
172   L172
172   (NIL)
173   (BIND 26)                           ; EXACT-POLY
175   (GETVALUE&PUSH 0)                   ; E
177   (CALL1 27)                          ; RE-TAYLOR
179   (JMP L496)
182   L182
182   (GETVALUE 0)                        ; E
184   (CDR&PUSH)
185   (CALL1 29)                          ; TSPLUS
187   (UNBIND1)
188   (JMP L501)
191   L191
191   (GETVALUE 0)                        ; E
193   (CDR&PUSH)
194   (CALL1 31)                          ; TSTIMES
196   (UNBIND1)
197   (JMP L501)
200   L200
200   (GETVALUE 0)                        ; E
202   (CDR)
203   (CAR&PUSH)
204   (GETVALUE 0)                        ; E
206   (CDR)
207   (CDR)
208   (CAR&PUSH)
209   (CALL2 33)                          ; TSEXPT
211   (UNBIND1)
212   (JMP L501)
215   L215
215   (GETVALUE 0)                        ; E
217   (CDR)
218   (CAR&PUSH)
219   (CALL1 35)                          ; TSLOG
221   (UNBIND1)
222   (JMP L501)
225   L225
225   (GETVALUE 0)                        ; E
227   (CDR)
228   (JMP L372)
231   L231
231   (GETVALUE&PUSH 0)                   ; E
233   (CALL1&PUSH 41)                     ; SUBFUNNAME
235   (CONST&PUSH 42)                     ; SPEC-TRANS
237   (PUSH-UNBOUND 1)
239   (CALLS2&PUSH 132)                   ; GET
241   (GETVALUE&PUSH 0)                   ; E
243   (FUNCALL 1)
245   (JMPIF1 L500)
248   (JMP L420)
251   L251
251   (GETVALUE 0)                        ; E
253   (CDR)
254   (CAR&PUSH)
255   (GETVALUE 0)                        ; E
257   (CDR)
258   (CDR&PUSH)
259   (GETVALUE 0)                        ; E
261   (CAR)
262   (CAR&PUSH)
263   (CALL 3 44)                         ; TSPRSUM
266   (UNBIND1)
267   (JMP L501)
270   L270
270   (GETVALUE 0)                        ; E
272   (CDR)
273   (CAR&PUSH)
274   (GETVALUE 0)                        ; E
276   (CDR)
277   (CDR&PUSH)
278   (GETVALUE&PUSH 0)                   ; E
280   (CALL 3 46)                         ; TSDIFF
283   (UNBIND1)
284   (JMP L501)
287   L287
287   (GETVALUE 0)                        ; E
289   (CAR)
290   (CAR)
291   (JMPIFCONSP L119)
294   (GETVALUE 0)                        ; E
296   (CAR)
297   (CAR&PUSH)
298   (JMPIFEQTO 19 L135)                 ; MRAT
302   (GETVALUE 0)                        ; E
304   (CAR)
305   (CAR&PUSH)
306   (JMPIFEQTO 28 L182)                 ; MPLUS
310   (GETVALUE 0)                        ; E
312   (CAR)
313   (CAR&PUSH)
314   (JMPIFEQTO 30 L191)                 ; MTIMES
318   (GETVALUE 0)                        ; E
320   (CAR)
321   (CAR&PUSH)
322   (JMPIFEQTO 32 L200)                 ; MEXPT
326   (GETVALUE 0)                        ; E
328   (CAR)
329   (CAR&PUSH)
330   (JMPIFEQTO 34 L215)                 ; %LOG
334   (GETVALUE 0)                        ; E
336   (CAR)
337   (CAR&PUSH)
338   (CALL1&JMPIF 36 L352)               ; KNOWN-PS
341   (GETVALUE 0)                        ; E
343   (CAR)
344   (CAR&PUSH)
345   (CONST&PUSH 37)                     ; TAY-TRANS
347   (PUSH-UNBOUND 1)
349   (CALLS2&JMPIFNOT 132 L382)          ; GET
352   L352
352   (CONST&PUSH 38)                     ; ARRAY
354   (GETVALUE 0)                        ; E
356   (CAR)
357   (CDR&PUSH)
358   (CALL2&JMPIF 16 L382)               ; MEMQ
361   (GETVALUE 0)                        ; E
363   (CDR)
364   (CDR)
365   (JMPIF L225)
368   (GETVALUE 0)                        ; E
370   (CDR)
371   (CAR)
372   L372
372   (PUSH)
373   (GETVALUE 0)                        ; E
375   (CAR)
376   (CAR&PUSH)
377   (CALL2 39)                          ; TRY-EXPANSION
379   (JMPIF1 L500)
382   L382
382   (GETVALUE&PUSH 0)                   ; E
384   (CALL1&JMPIFNOT 40 L420)            ; MQAPPLYP
387   (GETVALUE&PUSH 0)                   ; E
389   (CALL1&PUSH 41)                     ; SUBFUNNAME
391   (CONST&PUSH 42)                     ; SPEC-TRANS
393   (PUSH-UNBOUND 1)
395   (CALLS2&JMPIF 132 L231)             ; GET
399   (GETVALUE&PUSH 0)                   ; E
401   (CALL1&PUSH 41)                     ; SUBFUNNAME
403   (CALL1&JMPIFNOT 36 L420)            ; KNOWN-PS
406   (GETVALUE 0)                        ; E
408   (CDR)
409   (CDR)
410   (CAR&PUSH)
411   (GETVALUE 0)                        ; E
413   (CDR)
414   (CAR&PUSH)
415   (CALL2 39)                          ; TRY-EXPANSION
417   (JMPIF1 L500)
420   L420
420   (GETVALUE 0)                        ; E
422   (CAR)
423   (CAR&PUSH)
424   (CONST&PUSH 43)                     ; (%SUM %PRODUCT)
426   (CALL2&JMPIF 16 L251)               ; MEMQ
430   (GETVALUE 0)                        ; E
432   (CAR)
433   (CAR&PUSH)
434   (JMPIFEQTO 45 L270)                 ; %DERIVATIVE
438   (GETVALUE 0)                        ; E
440   (CAR)
441   (CAR&PUSH)
442   (JMPIFEQTO 47 L459)                 ; %AT
445   (CONST&PUSH 48)                     ; CAR
447   (GETVALUE&PUSH 2)                   ; TLIST
449   (CALLSR 0 22)                       ; MAPCAR
452   (BIND 49)                           ; L
454   (GETVALUE 49)                       ; L
456   (JMPIF L475)
458   L458
458   (UNBIND1)
459   L459
459   (GETVALUE&PUSH 0)                   ; E
461   (CALL1 51)                          ; NEWSYM
463   (UNBIND1)
464   (JMP L501)
466   L466
466   (GETVALUE 49)                       ; L
468   (CDR)
469   (SETVALUE 49)                       ; L
471   (GETVALUE 49)                       ; L
473   (JMPIFNOT L458)
475   L475
475   (GETVALUE&PUSH 0)                   ; E
477   (GETVALUE 49)                       ; L
479   (CAR&PUSH)
480   (CALL2&JMPIF 50 L466)               ; FREE
483   (UNBIND1)
484   (NIL)
485   (BIND 26)                           ; EXACT-POLY
487   (GETVALUE&PUSH 0)                   ; E
489   (GETVALUE&PUSH 2)                   ; TLIST
491   (CALL2&PUSH 52)                     ; DIFF-EXPAND
493   (JSR L0)
496   L496
496   (UNBIND 2)
498   (JMP L501)
500   L500
500   (UNBIND1)
501   L501
501   (UNBIND1)
502   (SKIP&RET 2)


Disassembly of function #:|(DEFUN COMPATVARLIST (A B C ...) ...)-175|
(CONST 0) = COMPATVARLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPATVARLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPATVARLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPATVARLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPATVARLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPATVARLIST
8     (SKIP&RET 1)


Disassembly of function COMPATVARLIST
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = D
(CONST 4) = ALIKE1
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D C B A)
56 byte-code instructions:
0     L0
0     (LOAD 4)
1     (BIND 0)                            ; A
3     (LOAD 6)
4     (BIND 1)                            ; B
6     (LOAD 8)
7     (BIND 2)                            ; C
9     (LOAD 10)
10    (BIND 3)                            ; D
12    (GETVALUE 0)                        ; A
14    (JMPIFNOT L54)
16    (GETVALUE 1)                        ; B
18    (JMPIFNOT L57)
20    (GETVALUE 2)                        ; C
22    (JMPIFNOT L57)
24    (GETVALUE 3)                        ; D
26    (JMPIFNOT L57)
28    (GETVALUE 0)                        ; A
30    (CAR&PUSH)
31    (GETVALUE 1)                        ; B
33    (CAR&PUSH)
34    (CALL2&JMPIF 4 L63)                 ; ALIKE1
37    (GETVALUE&PUSH 0)                   ; A
39    (GETVALUE 1)                        ; B
41    (CDR&PUSH)
42    (GETVALUE 2)                        ; C
44    L44
44    (PUSH)
45    (GETVALUE 3)                        ; D
47    (CDR&PUSH)
48    (JSR L0)
50    L50
50    (UNBIND 4)
52    (SKIP&RET 5)
54    L54
54    (T)
55    (JMP L50)
57    L57
57    (NIL)
58    (JMP L50)
60    L60
60    (NIL)
61    (JMP L50)
63    L63
63    (GETVALUE 2)                        ; C
65    (CAR&PUSH)
66    (GETVALUE 3)                        ; D
68    (CAR)
69    (JMPIFNOTEQ L60)
71    (GETVALUE 0)                        ; A
73    (CDR&PUSH)
74    (GETVALUE 1)                        ; B
76    (CDR&PUSH)
77    (GETVALUE 2)                        ; C
79    (CDR)
80    (JMP L44)


Disassembly of function #:|(DEFUN RE-TAYLOR (MRAT) ...)-176|
(CONST 0) = RE-TAYLOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RE-TAYLOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RE-TAYLOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RE-TAYLOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RE-TAYLOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RE-TAYLOR
8     (SKIP&RET 1)


Disassembly of function RE-TAYLOR
(CONST 0) = OLD-IVARS
(CONST 1) = OLD-TLIST
(CONST 2) = V
(CONST 3) = DISREP
(CONST 4) = PUTPROP
(CONST 5) = SETUP-MULTIVAR-DISREP
(CONST 6) = RE-TAYLOR-RECURSE
(CONST 7) = GENVAR
(CONST 8) = VARLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST GENVAR V)
writes special variable : (OLD-IVARS)
112 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (CALLS1&PUSH 149)                   ; FIFTH
4     (LOAD 2)
5     (CAR)
6     (CDR)
7     (CDR)
8     (CAR&PUSH)
9     (LOAD 3)
10    (CAR)
11    (CDR)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (NIL)
16    (BIND 0)                            ; OLD-IVARS
18    (LOAD 5)
19    (BIND 1)                            ; OLD-TLIST
21    (LOAD&PUSH 6)
22    (LOAD&PUSH 8)
23    (JMP L48)
25    L25
25    (SKIP 2)
27    (JMP L60)
29    L29
29    (LOAD&CAR&PUSH 1)
31    (LOAD 0)
32    (BIND 2)                            ; V
34    (LOAD&PUSH 4)
35    (GETVALUE&PUSH 2)                   ; V
37    (CONST&PUSH 3)                      ; DISREP
38    (CALL 3 4)                          ; PUTPROP
41    (UNBIND1)
42    (SKIP 2)
44    (LOAD&CDR&STORE 1)
46    (LOAD&CDR&STORE 0)
48    L48
48    (LOAD&PUSH 1)
49    (CALLS1&JMPIF 146 L25)              ; ENDP
52    (LOAD&CAR&PUSH 1)
54    (LOAD&PUSH 1)
55    (CALLS1&JMPIFNOT 146 L29)           ; ENDP
58    (SKIP 3)
60    L60
60    (LOAD&PUSH 10)
61    (CALL1 5)                           ; SETUP-MULTIVAR-DISREP
63    (NIL&PUSH)
64    (LOAD&PUSH 7)
65    (LOAD&PUSH 9)
66    (JMP L91)
68    L68
68    (SKIP 2)
70    (JMP L103)
72    L72
72    (LOAD&CAR&PUSH 1)
74    (LOAD 0)
75    (BIND 2)                            ; V
77    (LOAD&PUSH 4)
78    (GETVALUE 2)                        ; V
80    (CONS)
81    (UNBIND1)
82    (PUSH)
83    (LOAD&CONS&STORE 4)
85    (SKIP 2)
87    (LOAD&CDR&STORE 1)
89    (LOAD&CDR&STORE 0)
91    L91
91    (LOAD&PUSH 1)
92    (CALLS1&JMPIF 146 L68)              ; ENDP
95    (LOAD&CAR&PUSH 1)
97    (LOAD&PUSH 1)
98    (CALLS1&JMPIFNOT 146 L72)           ; ENDP
101   (SKIP 3)
103   L103
103   (LOAD&PUSH 0)
104   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
106   (SKIP 1)
108   (SETVALUE 0)                        ; OLD-IVARS
110   (LOAD&CDR&PUSH 10)
112   (CALL1&PUSH 6)                      ; RE-TAYLOR-RECURSE
114   (GETVALUE&PUSH 7)                   ; GENVAR
116   (LOAD&PUSH 0)
117   (GETVALUE&PUSH 8)                   ; VARLIST
119   (JMP L144)
121   L121
121   (SKIP 2)
123   (JMP L156)
125   L125
125   (LOAD&CAR&PUSH 1)
127   (LOAD 0)
128   (BIND 2)                            ; V
130   (LOAD&PUSH 4)
131   (GETVALUE&PUSH 2)                   ; V
133   (CONST&PUSH 3)                      ; DISREP
134   (CALL 3 4)                          ; PUTPROP
137   (UNBIND1)
138   (SKIP 2)
140   (LOAD&CDR&STORE 1)
142   (LOAD&CDR&STORE 0)
144   L144
144   (LOAD&PUSH 1)
145   (CALLS1&JMPIF 146 L121)             ; ENDP
148   (LOAD&CAR&PUSH 1)
150   (LOAD&PUSH 1)
151   (CALLS1&JMPIFNOT 146 L125)          ; ENDP
154   (SKIP 3)
156   L156
156   (SKIP 1)
158   (NIL&PUSH)
159   (CALL1 5)                           ; SETUP-MULTIVAR-DISREP
161   (POP)
162   (UNBIND 2)
164   (SKIP&RET 5)


Disassembly of function #:|(DEFUN RE-TAYLOR-RECURSE (PS) ...)-177|
(CONST 0) = RE-TAYLOR-RECURSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RE-TAYLOR-RECURSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RE-TAYLOR-RECURSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RE-TAYLOR-RECURSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RE-TAYLOR-RECURSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RE-TAYLOR-RECURSE
8     (SKIP&RET 1)


Disassembly of function RE-TAYLOR-RECURSE
(CONST 0) = PS
(CONST 1) = CDISREP
(CONST 2) = TAYLOR2
(CONST 3) = VAR
(CONST 4) = OLD-IVARS
(CONST 5) = ASSQ
(CONST 6) = MULTIVAR
(CONST 7) = OLD-TLIST
(CONST 8) = ZL-ASSOC
(CONST 9) = TLIST
(CONST 10) = PUSH-PW
(CONST 11) = (0 . 1)
(CONST 12) = ANS
(CONST 13) = EDISREP
(CONST 14) = VAR-EXPAND
(CONST 15) = POWER
(CONST 16) = PSTIMES
(CONST 17) = PSPLUS
(CONST 18) = POP-PW
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS TLIST OLD-TLIST VAR OLD-IVARS)
writes special variables : (ANS VAR)
107 byte-code instructions:
0     L0
0     (LOAD&CAR&PUSH 1)
2     (JMPIFNOTEQTO 0 L123)               ; PS
6     (NIL)
7     (BIND 3)                            ; VAR
9     (NIL&PUSH)
10    (LOAD 5)
11    (CDR)
12    (CAR)
13    (CAR&PUSH)
14    (GETVALUE&PUSH 4)                   ; OLD-IVARS
16    (CALL2 5)                           ; ASSQ
18    (CDR)
19    (SETVALUE 3)                        ; VAR
21    (CONST&PUSH 6)                      ; MULTIVAR
22    (GETVALUE&PUSH 3)                   ; VAR
24    (GETVALUE&PUSH 7)                   ; OLD-TLIST
26    (CALL2 8)                           ; ZL-ASSOC
28    (CDR)
29    (CDR)
30    (CDR)
31    (CAR&PUSH)
32    (CALL2 5)                           ; ASSQ
34    (CDR)
35    (JMPIF L130)
38    (GETVALUE&PUSH 3)                   ; VAR
40    (GETVALUE&PUSH 9)                   ; TLIST
42    (CALL2 8)                           ; ZL-ASSOC
44    (STORE 0)
45    (JMPIFNOT L55)
47    (PUSH)
48    (LOAD 6)
49    (CDR)
50    (CDR)
51    (CAR)
52    (CAR&PUSH)
53    (CALL2 10)                          ; PUSH-PW
55    L55
55    (LOAD 5)
56    (CDR)
57    (CDR)
58    (CDR&PUSH)
59    (CONST 11)                          ; (0 . 1)
60    (BIND 12)                           ; ANS
62    (LOAD&JMPIFNOT 3 L107)
65    L65
65    (LOAD&CDR&PUSH 3)
67    (GETVALUE 3)                        ; VAR
69    (JMPIFNOT L136)
72    (LOAD 4)
73    (CAR)
74    (CDR&PUSH)
75    (JSR&PUSH L0)
78    (LOAD&JMPIF 6 L144)
81    (GETVALUE&PUSH 3)                   ; VAR
83    (LOAD 6)
84    (CAR)
85    (CAR&PUSH)
86    (CALL1&PUSH 13)                     ; EDISREP
88    (CALL2&PUSH 15)                     ; POWER
90    (CALL1 2)                           ; TAYLOR2
92    L92
92    (PUSH)
93    (CALL2 16)                          ; PSTIMES
95    L95
95    (PUSH)
96    (GETVALUE&PUSH 12)                  ; ANS
98    (CALL2 17)                          ; PSPLUS
100   (SETVALUE 12)                       ; ANS
102   (POP&STORE 3)
104   (LOAD&JMPIF 3 L65)
107   L107
107   (GETVALUE 12)                       ; ANS
109   (UNBIND1)
110   (STORE 0)
111   (LOAD&JMPIFNOT 1 L117)
114   (PUSH)
115   (CALL1 18)                          ; POP-PW
117   L117
117   (POP)
118   (SKIP 1)
120   (UNBIND1)
121   (SKIP&RET 2)
123   L123
123   (LOAD&PUSH 1)
124   (CALL1&PUSH 1)                      ; CDISREP
126   (CALL1 2)                           ; TAYLOR2
128   (SKIP&RET 2)
130   L130
130   (NIL)
131   (SETVALUE 3)                        ; VAR
133   (JMP L55)
136   L136
136   (LOAD 4)
137   (CAR)
138   (CDR&PUSH)
139   (JSR L0)
142   (JMP L95)
144   L144
144   (CAR&PUSH)
145   (LOAD 6)
146   (CAR)
147   (CAR&PUSH)
148   (CALL1&PUSH 13)                     ; EDISREP
150   (NIL&PUSH)
151   (CALL 3 14)                         ; VAR-EXPAND
154   (JMP L92)


Disassembly of function #:|(DEFUN VAR-EXPAND (VAR EXP DONT-TRUNCATE?) ...)-178|
(CONST 0) = VAR-EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE VAR-EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; VAR-EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; VAR-EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE VAR-EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; VAR-EXPAND
8     (SKIP&RET 1)


Disassembly of function VAR-EXPAND
(CONST 0) = VAR
(CONST 1) = EXP
(CONST 2) = $KEEPFLOAT
(CONST 3) = $FLOAT
(CONST 4) = MODULUS
(CONST 5) = PREP1
(CONST 6) = TLIST
(CONST 7) = ZL-ASSOC
(CONST 8) = TEMP
(CONST 9) = "Invalid call to var-expand"
(CONST 10) = MERROR
(CONST 11) = MULTI
(CONST 12) = ASSQ
(CONST 13) = (0 . 1)
(CONST 14) = E>
(CONST 15) = D
(CONST 16) = E1-
(CONST 17) = E+
(CONST 18) = PUSH-PW
(CONST 19) = 1
(CONST 20) = POP-PW
(CONST 21) = PSTIMES
(CONST 22) = TAYLOR2
(CONST 23) = PSPLUS
(CONST 24) = PSEXPT
(CONST 25) = PS
(CONST 26) = EXACT-POLY
(CONST 27) = $ASYMP
(CONST 28) = RATMINUS
(CONST 29) = (1 . 1)
(CONST 30) = ($INF $MINF $INFINITY)
(CONST 31) = MEMQ
(CONST 32) = "Cannot create an asymptotic expansion at infinity"
(CONST 33) = $MINF
(CONST 34) = (-1 . 1)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXACT-POLY D TEMP TLIST VAR EXP)
writes special variable : (EXP)
316 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; VAR
3     (LOAD 5)
4     (BIND 1)                            ; EXP
6     (NIL)
7     (BIND 2)                            ; $KEEPFLOAT
9     (NIL)
10    (BIND 3)                            ; $FLOAT
12    (NIL)
13    (BIND 4)                            ; MODULUS
15    (GETVALUE&PUSH 1)                   ; EXP
17    (CALL1 5)                           ; PREP1
19    (SETVALUE 1)                        ; EXP
21    (UNBIND 3)
23    (GETVALUE&PUSH 0)                   ; VAR
25    (GETVALUE&PUSH 6)                   ; TLIST
27    (CALL2 7)                           ; ZL-ASSOC
29    (BIND 8)                            ; TEMP
31    (GETVALUE 8)                        ; TEMP
33    (JMPIFNOT L96)
35    (CONST&PUSH 11)                     ; MULTI
36    (GETVALUE 8)                        ; TEMP
38    (CDR)
39    (CDR)
40    (CDR)
41    (CAR&PUSH)
42    (CALL2 12)                          ; ASSQ
44    (CDR)
45    (JMPIF L165)
48    (GETVALUE 8)                        ; TEMP
50    (CDR)
51    (CDR)
52    (CAR&PUSH)
53    (LOAD&PUSH 0)
54    (CALLS2&JMPIF 8 L224)               ; NUMBERP
58    (SKIP 1)
60    (JMPIF L232)
63    L63
63    (GETVALUE 8)                        ; TEMP
65    (CDR)
66    (CDR)
67    (CAR&PUSH)
68    (CONST&PUSH 30)                     ; ($INF $MINF $INFINITY)
70    (CALL2&JMPIFNOT 31 L374)            ; MEMQ
74    (CONST&PUSH 27)                     ; $ASYMP
75    (GETVALUE 8)                        ; TEMP
77    (CDR)
78    (CDR)
79    (CDR)
80    (CAR&PUSH)
81    (CALL2 12)                          ; ASSQ
83    (CDR)
84    (JMPIFNOT L311)
87    (CONST 32)                          ; "Cannot create an asymptotic expansion at infinity"
89    L89
89    (PUSH)
90    (CALL1 10)                          ; MERROR
92    (UNBIND1)
93    (JMP L431)
96    L96
96    (CONST 9)                           ; "Invalid call to var-expand"
97    (JMP L89)
99    L99
99    (CONST&PUSH 11)                     ; MULTI
100   (GETVALUE 8)                        ; TEMP
102   (CDR)
103   (CDR)
104   (CDR)
105   (CAR&PUSH)
106   (CALL2 12)                          ; ASSQ
108   (CDR)
109   (CAR&PUSH)
110   (GETVALUE&PUSH 6)                   ; TLIST
112   (CALL2 7)                           ; ZL-ASSOC
114   (BIND 15)                           ; D
116   (GETVALUE&PUSH 15)                  ; D
118   (GETVALUE 8)                        ; TEMP
120   (CDR)
121   (CAR)
122   (CAR&PUSH)
123   (GETVALUE&PUSH 1)                   ; EXP
125   (CALL1 16)                          ; E1-
127   (CAR&PUSH)
128   (CALLSR&PUSH 0 54)                  ; -
131   (GETVALUE&PUSH 1)                   ; EXP
133   (CALL1 16)                          ; E1-
135   (CDR)
136   (CONS&PUSH)
137   (CALL2&PUSH 17)                     ; E+
139   (CALL2 18)                          ; PUSH-PW
141   (CONST&PUSH 11)                     ; MULTI
142   (GETVALUE 8)                        ; TEMP
144   (CDR)
145   (CDR)
146   (CDR)
147   (CAR&PUSH)
148   (CALL2 12)                          ; ASSQ
150   (CDR)
151   (CAR&PUSH)
152   (CONST&PUSH 19)                     ; 1
153   (T&PUSH)
154   (JSR&PUSH L0)
157   (GETVALUE&PUSH 15)                  ; D
159   (CALL1 20)                          ; POP-PW
161   (POP)
162   (UNBIND1)
163   (JMP L188)
165   L165
165   (GETVALUE&PUSH 1)                   ; EXP
167   (CONST&PUSH 13)                     ; (0 . 1)
168   (CALL2&JMPIFNOT 14 L99)             ; E>
172   (CONST&PUSH 11)                     ; MULTI
173   (GETVALUE 8)                        ; TEMP
175   (CDR)
176   (CDR)
177   (CDR)
178   (CAR&PUSH)
179   (CALL2 12)                          ; ASSQ
181   (CDR)
182   (CAR&PUSH)
183   (CONST&PUSH 19)                     ; 1
184   (T&PUSH)
185   (JSR L0)
188   L188
188   (PUSH)
189   (GETVALUE 8)                        ; TEMP
191   (CDR)
192   (CDR)
193   (CDR)
194   (CDR)
195   (CAR&PUSH)
196   (CONST&PUSH 19)                     ; 1
197   (CONST&PUSH 19)                     ; 1
198   (LIST&PUSH 3)
200   (CONST 19)                          ; 1
201   (CONS&PUSH)
202   (CALL2 21)                          ; PSTIMES
204   (JMP L416)
207   L207
207   (CONST 13)                          ; (0 . 1)
208   (JMP L293)
211   L211
211   (NIL)
212   (JMP L267)
214   L214
214   (GETVALUE 1)                        ; EXP
216   (JMP L267)
218   L218
218   (GETVALUE&PUSH 1)                   ; EXP
220   (CALL1 28)                          ; RATMINUS
222   (JMP L284)
224   L224
224   (LOAD&PUSH 0)
225   (CALLS2 145)                        ; ZEROP
227   (SKIP 1)
229   (JMPIFNOT L63)
232   L232
232   (NIL&PUSH)
233   (GETVALUE&PUSH 1)                   ; EXP
235   (GETVALUE 8)                        ; TEMP
237   (CDR)
238   (CAR)
239   (CAR&PUSH)
240   (CALL2&JMPIFNOT 14 L248)            ; E>
243   (T&STORE 0)
245   (LOAD&JMPIFNOT 11 L207)
248   L248
248   (CONST&PUSH 25)                     ; PS
249   (GETVALUE 8)                        ; TEMP
251   (CDR)
252   (CDR)
253   (CDR)
254   (CDR&PUSH)
255   (GETVALUE 26)                       ; EXACT-POLY
257   (JMPIF L211)
259   (LOAD&JMPIF 2 L214)
262   (GETVALUE 8)                        ; TEMP
264   (CDR)
265   (CAR)
266   (CAR)
267   L267
267   (PUSH)
268   (NIL)
269   (CONS&PUSH)
270   (CONST&PUSH 27)                     ; $ASYMP
271   (GETVALUE 8)                        ; TEMP
273   (CDR)
274   (CDR)
275   (CDR)
276   (CAR&PUSH)
277   (CALL2 12)                          ; ASSQ
279   (CDR)
280   (JMPIF L218)
282   (GETVALUE 1)                        ; EXP
284   L284
284   (PUSH)
285   (CONST 29)                          ; (1 . 1)
287   (CONS&PUSH)
288   (NIL)
289   (CONS)
290   (CONS)
291   (CONS)
292   (CONS)
293   L293
293   (SKIP 1)
295   (UNBIND1)
296   (JMP L431)
299   L299
299   (CONST 13)                          ; (0 . 1)
300   (UNBIND1)
301   (JMP L431)
304   L304
304   (NIL)
305   (JMP L342)
307   L307
307   (CONST 34)                          ; (-1 . 1)
309   (JMP L357)
311   L311
311   (GETVALUE&PUSH 1)                   ; EXP
313   (CALL1 28)                          ; RATMINUS
315   (SETVALUE 1)                        ; EXP
317   (PUSH)
318   (GETVALUE 8)                        ; TEMP
320   (CDR)
321   (CAR)
322   (CAR&PUSH)
323   (CALL2&JMPIF 14 L299)               ; E>
326   (CONST&PUSH 25)                     ; PS
327   (GETVALUE 8)                        ; TEMP
329   (CDR)
330   (CDR)
331   (CDR)
332   (CDR&PUSH)
333   (GETVALUE 26)                       ; EXACT-POLY
335   (JMPIF L304)
337   (GETVALUE 8)                        ; TEMP
339   (CDR)
340   (CAR)
341   (CAR)
342   L342
342   (PUSH)
343   (NIL)
344   (CONS&PUSH)
345   (GETVALUE&PUSH 1)                   ; EXP
347   (GETVALUE 8)                        ; TEMP
349   (CDR)
350   (CDR)
351   (CAR&PUSH)
352   (JMPIFEQTO 33 L307)                 ; $MINF
355   (CONST 29)                          ; (1 . 1)
357   L357
357   (CONS&PUSH)
358   (NIL)
359   (CONS)
360   (CONS)
361   (CONS)
362   (CONS)
363   (UNBIND1)
364   (JMP L431)
367   L367
367   (NIL)
368   (JMP L390)
370   L370
370   (CONST 34)                          ; (-1 . 1)
372   (JMP L407)
374   L374
374   (CONST&PUSH 25)                     ; PS
375   (GETVALUE 8)                        ; TEMP
377   (CDR)
378   (CDR)
379   (CDR)
380   (CDR&PUSH)
381   (GETVALUE 26)                       ; EXACT-POLY
383   (JMPIF L367)
385   (GETVALUE 8)                        ; TEMP
387   (CDR)
388   (CAR)
389   (CAR)
390   L390
390   (PUSH)
391   (NIL)
392   (CONS&PUSH)
393   (CONST&PUSH 27)                     ; $ASYMP
394   (GETVALUE 8)                        ; TEMP
396   (CDR)
397   (CDR)
398   (CDR)
399   (CAR&PUSH)
400   (CALL2 12)                          ; ASSQ
402   (CDR)
403   (JMPIF L370)
405   (CONST 29)                          ; (1 . 1)
407   L407
407   (PUSH)
408   (CONST 29)                          ; (1 . 1)
410   (CONS&PUSH)
411   (NIL)
412   (CONS)
413   (CONS)
414   (CONS)
415   (CONS)
416   L416
416   (PUSH)
417   (GETVALUE 8)                        ; TEMP
419   (CDR)
420   (CDR)
421   (CAR&PUSH)
422   (CALL1&PUSH 22)                     ; TAYLOR2
424   (CALL2&PUSH 23)                     ; PSPLUS
426   (GETVALUE&PUSH 1)                   ; EXP
428   (CALL2 24)                          ; PSEXPT
430   (UNBIND1)
431   L431
431   (UNBIND 2)
433   (SKIP&RET 4)


Disassembly of function #:|(DEFUN EXPAND (ARG FUNC) ...)-179|
(CONST 0) = EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPAND
8     (SKIP&RET 1)


Disassembly of function EXPAND
(CONST 0) = ARG
(CONST 1) = TRY-EXPANSION
(CONST 2) = EXP-PT-ERR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (GETVALUE&PUSH 0)                   ; ARG
5     (LOAD&PUSH 5)
6     (CALL2 1)                           ; TRY-EXPANSION
8     (JMPIF1 L12)
10    (CALL0 2)                           ; EXP-PT-ERR
12    L12
12    (UNBIND1)
13    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TRY-EXPANSION (ARG FUNC) ...)-180|
(CONST 0) = TRY-EXPANSION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRY-EXPANSION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRY-EXPANSION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRY-EXPANSION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRY-EXPANSION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRY-EXPANSION
8     (SKIP&RET 1)


Disassembly of function TRY-EXPANSION
(CONST 0) = ARG
(CONST 1) = TEMP
(CONST 2) = EXACT-POLY
(CONST 3) = KNOWN-PS
(CONST 4) = (MQAPPLY)
(CONST 5) = TLIST
(CONST 6) = DIFF-EXPAND
(CONST 7) = TAYLOR2
(CONST 8) = TAY-TRANS
(CONST 9) = GETFUN-LT
(CONST 10) = (1 . 1)
(CONST 11) = GET-LEXP
(CONST 12) = (0 . 1)
(CONST 13) = E>
(CONST 14) = TAY-DEPTH-ERR
(CONST 15) = TAY-POLE-EXPAND
(CONST 16) = ASSQ
(CONST 17) = PS
(CONST 18) = RDIS
(CONST 19) = TVARS
(CONST 20) = MFREE
(CONST 21) = SYMBOLIC-EXPAND
(CONST 22) = CDISREP
(CONST 23) = (MQAPPLY)
(CONST 24) = SIMPLIFY
(CONST 25) = PREP1
(CONST 26) = (%ATAN %ASIN %ASINH %ATANH)
(CONST 27) = MEMQ
(CONST 28) = (0 . 1)
(CONST 29) = ESSEN-SING-ERR
(CONST 30) = %ATAN
(CONST 31) = SRDIS
(CONST 32) = IVARS
(CONST 33) = EDISREP
(CONST 34) = POWER*
(CONST 35) = MUL*
(CONST 36) = ASKSIGN-P-OR-N
(CONST 37) = $POS
(CONST 38) = ATRIGH
(CONST 39) = $%PI
(CONST 40) = PSPLUS
(CONST 41) = KEY-VARS
(CONST 42) = ZL-ASSOC
(CONST 43) = E*
(CONST 44) = E=
(CONST 45) = E1-
(CONST 46) = EDIFF
(CONST 47) = D
(CONST 48) = PUSH-PW
(CONST 49) = PSTRUNC
(CONST 50) = POP-PW
(CONST 51) = (%ATAN %ASIN %ASINH %ATANH)
(CONST 52) = CONST-EXP-FUNS
(CONST 53) = GET-SERIES
(CONST 54) = EQUO
(CONST 55) = PSCSUBST1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (CONST-EXP-FUNS D KEY-VARS IVARS TEMP TVARS TAY-POLE-EXPAND TLIST ARG)
writes special variable : (TEMP)
467 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (PUSH-NIL 6)
5     (NIL)
6     (BIND 1)                            ; TEMP
8     (NIL)
9     (BIND 2)                            ; EXACT-POLY
11    (LOAD 16)
13    (JMPIFATOM L34)
15    (LOAD 16)
17    (CAR)
18    (CAR&PUSH)
19    (CALL1&JMPIF 3 L34)                 ; KNOWN-PS
22    (CONST&PUSH 4)                      ; (MQAPPLY)
23    (LOAD&PUSH 17)
24    (GETVALUE&PUSH 0)                   ; ARG
26    (LIST&PUSH 3)
28    (GETVALUE&PUSH 5)                   ; TLIST
30    (CALL2&PUSH 6)                      ; DIFF-EXPAND
32    (CALL1 7)                           ; TAYLOR2
34    L34
34    (LOAD 16)
36    (JMPIFATOM L73)
38    (LOAD 16)
40    (CAR)
41    (CAR)
42    L42
42    (STORE 11)
44    (PUSH)
45    (CONST&PUSH 8)                      ; TAY-TRANS
46    (PUSH-UNBOUND 1)
48    (CALLS2 132)                        ; GET
50    (SETVALUE 1)                        ; TEMP
52    (JMPIF L77)
54    (LOAD&PUSH 16)
55    (CALL1&PUSH 9)                      ; GETFUN-LT
57    (LOAD&CAR&STORE 0 11)
60    (LOAD 0)
61    (CDR)
62    (STORE 10)
64    (SKIP 1)
66    (LOAD&JMPIFNOT 7 L314)
70    (JMP L322)
73    L73
73    (LOAD 16)
75    (JMP L42)
77    L77
77    (PUSH)
78    (GETVALUE&PUSH 0)                   ; ARG
80    (LOAD&PUSH 18)
81    (FUNCALL 2)
83    (JMP L706)
86    L86
86    (LOAD&PUSH 0)
87    (CALLS2 145)                        ; ZEROP
89    (SKIP 1)
91    (JMPIFNOT L359)
94    (JMP L332)
97    L97
97    (LOAD&PUSH 0)
98    (CALLS2 145)                        ; ZEROP
100   (SKIP 1)
102   (JMPIF L357)
105   L105
105   (LOAD&JMPIFNOT 7 L314)
109   (JMP L322)
112   L112
112   (LOAD&PUSH 0)
113   (CALLS2 145)                        ; ZEROP
115   (SKIP 1)
117   (JMPIFNOT L143)
119   L119
119   (LOAD 9)
120   (JMP L706)
123   L123
123   (LOAD&PUSH 11)
124   (GETVALUE&PUSH 15)                  ; TAY-POLE-EXPAND
126   (CALL2 16)                          ; ASSQ
128   (SETVALUE 1)                        ; TEMP
130   (JMPIF L555)
133   (LOAD&CAR&PUSH 10)
135   (LOAD&PUSH 0)
136   (CALLS2&JMPIF 8 L112)               ; NUMBERP
139   (SKIP 1)
141   (JMPIF L119)
143   L143
143   (CONST 12)                          ; (0 . 1)
144   (JMP L706)
147   L147
147   (GETVALUE&PUSH 0)                   ; ARG
149   (LOAD&PUSH 8)
150   (LOAD&PUSH 18)
151   (CALL 3 21)                         ; SYMBOLIC-EXPAND
154   (JMP L706)
157   L157
157   (LOAD&PUSH 16)
158   (LIST&PUSH 1)
160   (LOAD&PUSH 8)
161   (CALL1&PUSH 22)                     ; CDISREP
163   (LIST 2)
165   (JMP L196)
167   L167
167   (LOAD&PUSH 7)
168   (CALL1&PUSH 18)                     ; RDIS
170   (GETVALUE&PUSH 19)                  ; TVARS
172   (CALL2&JMPIFNOT 20 L147)            ; MFREE
175   (LOAD&PUSH 11)
176   (GETVALUE&PUSH 15)                  ; TAY-POLE-EXPAND
178   (CALL2 16)                          ; ASSQ
180   (SETVALUE 1)                        ; TEMP
182   (JMPIF L555)
185   (LOAD 16)
187   (JMPIFATOM L157)
189   (CONST&PUSH 23)                     ; (MQAPPLY)
190   (LOAD&PUSH 17)
191   (LOAD&PUSH 9)
192   (CALL1&PUSH 22)                     ; CDISREP
194   (LIST 3)
196   L196
196   (PUSH)
197   (CALL1&PUSH 24)                     ; SIMPLIFY
199   (CALL1 25)                          ; PREP1
201   (JMP L706)
204   L204
204   (GETVALUE&PUSH 0)                   ; ARG
206   (CONST&PUSH 10)                     ; (1 . 1)
207   (T&PUSH)
208   (CALL 3 11)                         ; GET-LEXP
211   (STORE 8)
213   (CDR)
214   (CDR)
215   (CDR)
216   (CAR)
217   (CAR)
218   (JMP L411)
221   L221
221   (GETVALUE&PUSH 0)                   ; ARG
223   (LOAD&PUSH 17)
224   (CALL2&PUSH 38)                     ; ATRIGH
226   (CONST&PUSH 39)                     ; $%PI
228   (CALL1&PUSH 7)                      ; TAYLOR2
230   (CALL2 40)                          ; PSPLUS
232   (JMP L706)
235   L235
235   (CONST 12)                          ; (0 . 1)
236   (UNBIND 2)
238   (SKIP 6)
240   (JMP L710)
243   L243
243   (GETVALUE 1)                        ; TEMP
245   (JMP L469)
248   L248
248   (GETVALUE&PUSH 0)                   ; ARG
250   (CALL1 7)                           ; TAYLOR2
252   (JMP L511)
255   L255
255   (LOAD 7)
256   (CDR)
257   (CDR)
258   (CDR)
259   (CAR)
260   (CAR)
261   (JMP L526)
264   L264
264   (LOAD&PUSH 11)
265   (JMPIFNOTEQTO 30 L303)              ; %ATAN
268   (LOAD 7)
269   (CDR)
270   (CDR)
271   (CDR)
272   (CAR)
273   (CDR&PUSH)
274   (CALL1&PUSH 31)                     ; SRDIS
276   (LOAD 8)
277   (CDR)
278   (CAR)
279   (CAR&PUSH)
280   (GETVALUE&PUSH 32)                  ; IVARS
282   (CALL2 16)                          ; ASSQ
284   (CDR&PUSH)
285   (LOAD 9)
286   (CDR)
287   (CDR)
288   (CDR)
289   (CAR)
290   (CAR&PUSH)
291   (CALL1&PUSH 33)                     ; EDISREP
293   (CALL2&PUSH 34)                     ; POWER*
295   (CALL2&PUSH 35)                     ; MUL*
297   (CALL1&PUSH 36)                     ; ASKSIGN-P-OR-N
299   (JMPIFEQTO 37 L221)                 ; $POS
303   L303
303   (GETVALUE&PUSH 0)                   ; ARG
305   (LOAD&PUSH 17)
306   (CALL2 38)                          ; ATRIGH
308   (JMP L706)
311   L311
311   (LOAD&JMPIF 7 L322)
314   L314
314   (GETVALUE&PUSH 0)                   ; ARG
316   (CONST&PUSH 10)                     ; (1 . 1)
317   (NIL&PUSH)
318   (CALL 3 11)                         ; GET-LEXP
321   (STORE 7)
322   L322
322   (CAR&PUSH)
323   (LOAD&PUSH 0)
324   (CALLS2&JMPIF 8 L86)                ; NUMBERP
328   (SKIP 1)
330   (JMPIFNOT L359)
332   L332
332   (CONST&PUSH 12)                     ; (0 . 1)
333   (LOAD&PUSH 11)
334   (CALL2&JMPIFNOT 13 L123)            ; E>
338   (GETVALUE&PUSH 0)                   ; ARG
340   (CONST&PUSH 10)                     ; (1 . 1)
341   (T&PUSH)
342   (CALL 3 11)                         ; GET-LEXP
345   (STORE 7)
346   (CAR&PUSH)
347   (LOAD&PUSH 0)
348   (CALLS2&JMPIF 8 L97)                ; NUMBERP
352   (SKIP 1)
354   (JMPIFNOT L105)
357   L357
357   (CALL0 14)                          ; TAY-DEPTH-ERR
359   L359
359   (LOAD&CAR&PUSH 7)
361   (JMPIFEQTO 17 L369)                 ; PS
364   (GETVALUE&PUSH 0)                   ; ARG
366   (CALL1 7)                           ; TAYLOR2
368   (STORE 7)
369   L369
369   (LOAD&CAR&PUSH 7)
371   (JMPIFNOTEQTO 17 L167)              ; PS
375   (CONST&PUSH 12)                     ; (0 . 1)
376   (LOAD 8)
377   (CDR)
378   (CDR)
379   (CDR)
380   (CAR)
381   (CAR)
382   (STORE 9)
384   (PUSH)
385   (CALL2&JMPIFNOT 13 L418)            ; E>
388   (LOAD&PUSH 11)
389   (CONST&PUSH 26)                     ; (%ATAN %ASIN %ASINH %ATANH)
390   (CALL2&JMPIF 27 L264)               ; MEMQ
394   (CONST&PUSH 12)                     ; (0 . 1)
395   (GETVALUE&PUSH 0)                   ; ARG
397   (CONST&PUSH 10)                     ; (1 . 1)
398   (T&PUSH)
399   (CALL 3 11)                         ; GET-LEXP
402   (STORE 8)
404   (CAR&PUSH)
405   (JMPIFEQTO 17 L204)                 ; PS
409   (CONST 28)                          ; (0 . 1)
411   L411
411   (PUSH)
412   (CALL2&JMPIFNOT 13 L311)            ; E>
416   (CALL0 29)                          ; ESSEN-SING-ERR
418   L418
418   (LOAD 7)
419   (CDR)
420   (CAR)
421   (CAR&PUSH)
422   (GETVALUE&PUSH 41)                  ; KEY-VARS
424   (CALL2 16)                          ; ASSQ
426   (CDR&PUSH)
427   (GETVALUE&PUSH 5)                   ; TLIST
429   (CALL2 42)                          ; ZL-ASSOC
431   (CDR)
432   (CAR)
433   (CAR)
434   (SETVALUE 1)                        ; TEMP
436   (LOAD&PUSH 10)
437   (LOAD&PUSH 9)
438   (CALL2&PUSH 43)                     ; E*
440   (GETVALUE&PUSH 1)                   ; TEMP
442   (CALL2&JMPIF 13 L235)               ; E>
446   (LOAD 7)
447   (CDR)
448   (CDR)
449   (CAR)
450   (CAR)
451   (JMPIFNOT L459)
453   (LOAD&PUSH 10)
454   (CONST&PUSH 10)                     ; (1 . 1)
455   (CALL2&JMPIF 44 L243)               ; E=
459   L459
459   (GETVALUE&PUSH 1)                   ; TEMP
461   (LOAD&PUSH 11)
462   (CALL1&PUSH 45)                     ; E1-
464   (LOAD&PUSH 10)
465   (CALL2&PUSH 43)                     ; E*
467   (CALL2 46)                          ; EDIFF
469   L469
469   (STORE 6)
470   (LOAD 7)
471   (CDR)
472   (CAR)
473   (CAR&PUSH)
474   (GETVALUE&PUSH 41)                  ; KEY-VARS
476   (CALL2 16)                          ; ASSQ
478   (CDR&PUSH)
479   (GETVALUE&PUSH 5)                   ; TLIST
481   (CALL2 42)                          ; ZL-ASSOC
483   (BIND 47)                           ; D
485   (GETVALUE&PUSH 47)                  ; D
487   (LOAD&PUSH 10)
488   (CALL2 48)                          ; PUSH-PW
490   (LOAD 10)
491   (CDR)
492   (CDR)
493   (CAR)
494   (CAR)
495   (JMPIFNOT L248)
498   (LOAD&PUSH 9)
499   (LOAD 11)
500   (CDR)
501   (CDR)
502   (CAR)
503   (CAR&PUSH)
504   (CALL2&JMPIF 13 L248)               ; E>
508   (LOAD&PUSH 10)
509   (CALL1 49)                          ; PSTRUNC
511   L511
511   (PUSH)
512   (GETVALUE&PUSH 47)                  ; D
514   (CALL1 50)                          ; POP-PW
516   (POP)
517   (UNBIND1)
518   (STORE 7)
519   (CAR&PUSH)
520   (JMPIFEQTO 17 L255)                 ; PS
524   (CONST 28)                          ; (0 . 1)
526   L526
526   (STORE 8)
528   (CAR&PUSH)
529   (LOAD&PUSH 0)
530   (CALLS2&JMPIF 8 L666)               ; NUMBERP
534   (SKIP 1)
536   (JMPIFNOT L674)
539   L539
539   (LOAD&PUSH 11)
540   (CONST&PUSH 51)                     ; (%ATAN %ASIN %ASINH %ATANH)
542   (CALL2&JMPIF 27 L303)               ; MEMQ
546   (LOAD&PUSH 11)
547   (GETVALUE&PUSH 52)                  ; CONST-EXP-FUNS
549   (CALL2 16)                          ; ASSQ
551   (SETVALUE 1)                        ; TEMP
553   (JMPIFNOT L595)
555   L555
555   (CDR&PUSH)
556   (GETVALUE&PUSH 0)                   ; ARG
558   (LOAD&PUSH 9)
559   (LOAD&PUSH 19)
560   (FUNCALL 3)
562   (JMP L706)
565   L565
565   (GETVALUE&PUSH 0)                   ; ARG
567   (CONST&PUSH 10)                     ; (1 . 1)
568   (T&PUSH)
569   (CALL 3 11)                         ; GET-LEXP
572   (STORE 7)
573   (CDR)
574   (CDR)
575   (CDR)
576   (CAR)
577   (CAR)
578   (JMP L609)
580   L580
580   (LOAD&PUSH 0)
581   (CALLS2 145)                        ; ZEROP
583   (SKIP 1)
585   (JMPIFNOT L618)
587   L587
587   (NIL)
588   (UNBIND 2)
590   (SKIP 6)
592   (JMP L710)
595   L595
595   (GETVALUE&PUSH 0)                   ; ARG
597   (CONST&PUSH 10)                     ; (1 . 1)
598   (T&PUSH)
599   (CALL 3 11)                         ; GET-LEXP
602   (STORE 7)
603   (CAR&PUSH)
604   (JMPIFEQTO 17 L565)                 ; PS
607   (CONST 28)                          ; (0 . 1)
609   L609
609   (CAR&PUSH)
610   (LOAD&PUSH 0)
611   (CALLS2&JMPIF 8 L580)               ; NUMBERP
614   (SKIP 1)
616   (JMPIF L587)
618   L618
618   (LOAD&JMPIFNOT 7 L314)
622   (JMP L322)
625   L625
625   (LOAD&PUSH 16)
626   (LOAD 8)
627   (CDR)
628   (CAR)
629   (CAR&PUSH)
630   (GETVALUE&PUSH 41)                  ; KEY-VARS
632   (CALL2 16)                          ; ASSQ
634   (CDR&PUSH)
635   (GETVALUE&PUSH 5)                   ; TLIST
637   (CALL2 42)                          ; ZL-ASSOC
639   (CDR)
640   (CAR)
641   (CAR&PUSH)
642   (LOAD 9)
643   (CDR)
644   (CAR&PUSH)
645   (LOAD 10)
646   (CDR)
647   (CDR)
648   (CDR)
649   (CAR)
650   (CAR&PUSH)
651   (LOAD 11)
652   (CDR)
653   (CDR)
654   (CDR)
655   (CAR)
656   (CDR&PUSH)
657   (CALL 5 53)                         ; GET-SERIES
660   (JMP L706)
662   L662
662   (GETVALUE 1)                        ; TEMP
664   (JMP L706)
666   L666
666   (LOAD&PUSH 0)
667   (CALLS2 145)                        ; ZEROP
669   (SKIP 1)
671   (JMPIF L539)
674   L674
674   (LOAD 7)
675   (CDR)
676   (CDR)
677   (CDR)
678   (CDR)
679   (JMPIFNOT L625)
681   (LOAD&PUSH 16)
682   (GETVALUE&PUSH 1)                   ; TEMP
684   (LOAD&PUSH 10)
685   (CALL2&PUSH 54)                     ; EQUO
687   (LOAD 9)
688   (CDR)
689   (CAR&PUSH)
690   (CONST&PUSH 10)                     ; (1 . 1)
691   (CONST&PUSH 10)                     ; (1 . 1)
692   (CALL 5 53)                         ; GET-SERIES
695   (SETVALUE 1)                        ; TEMP
697   (CAR&PUSH)
698   (JMPIFNOTEQTO 17 L662)              ; PS
701   (LOAD&PUSH 7)
702   (GETVALUE&PUSH 1)                   ; TEMP
704   (CALL2 55)                          ; PSCSUBST1
706   L706
706   (UNBIND 2)
708   (SKIP 6)
710   L710
710   (UNBIND1)
711   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SYMBOLIC-EXPAND (ARG PSARG FUNC) ...)-181|
(CONST 0) = SYMBOLIC-EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SYMBOLIC-EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SYMBOLIC-EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SYMBOLIC-EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SYMBOLIC-EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SYMBOLIC-EXPAND
8     (SKIP&RET 1)


Disassembly of function SYMBOLIC-EXPAND
(CONST 0) = ARG
(CONST 1) = CDISREP
(CONST 2) = (MQAPPLY)
(CONST 3) = SIMPLIFYA
(CONST 4) = PREP1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
23 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; ARG
3     (LOAD 4)
4     (JMPIFATOM L22)
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (LOAD&PUSH 5)
8     (LOAD&PUSH 7)
9     (CALL1&PUSH 1)                      ; CDISREP
11    (LIST 3)
13    L13
13    (PUSH)
14    (NIL&PUSH)
15    (CALL2&PUSH 3)                      ; SIMPLIFYA
17    (CALL1 4)                           ; PREP1
19    (UNBIND1)
20    (SKIP&RET 4)
22    L22
22    (LOAD&PUSH 4)
23    (LIST&PUSH 1)
25    (LOAD&PUSH 6)
26    (CALL1&PUSH 1)                      ; CDISREP
28    (LIST 2)
30    (JMP L13)


Disassembly of function #:|(DEFUN EXPAND-SING-TRIG? (ARG FUNC) ...)-182|
(CONST 0) = EXPAND-SING-TRIG?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPAND-SING-TRIG?>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPAND-SING-TRIG?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPAND-SING-TRIG?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPAND-SING-TRIG?>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPAND-SING-TRIG?
8     (SKIP&RET 1)


Disassembly of function EXPAND-SING-TRIG?
(CONST 0) = ARG
(CONST 1) = *PSCIRC
(CONST 2) = MEMQ
(CONST 3) = TAY-EXPONENTIALIZE
(CONST 4) = *PSACIRC
(CONST 5) = ATRIGH
(CONST 6) = ESSEN-SING-ERR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARG *PSACIRC *PSCIRC)
22 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (LOAD&PUSH 4)
4     (GETVALUE&PUSH 1)                   ; *PSCIRC
6     (CALL2&JMPIF 2 L20)                 ; MEMQ
9     (LOAD&PUSH 4)
10    (GETVALUE&PUSH 4)                   ; *PSACIRC
12    (CALL2&JMPIF 2 L27)                 ; MEMQ
15    (CALL0 6)                           ; ESSEN-SING-ERR
17    L17
17    (UNBIND1)
18    (SKIP&RET 3)
20    L20
20    (GETVALUE&PUSH 0)                   ; ARG
22    (LOAD&PUSH 5)
23    (CALL2 3)                           ; TAY-EXPONENTIALIZE
25    (JMP L17)
27    L27
27    (GETVALUE&PUSH 0)                   ; ARG
29    (LOAD&PUSH 5)
30    (CALL2 5)                           ; ATRIGH
32    (JMP L17)


Disassembly of function #:|(DEFUN TRIG-CONST (A ARG FUNC) ...)-183|
(CONST 0) = TRIG-CONST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG-CONST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG-CONST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG-CONST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG-CONST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG-CONST
8     (SKIP&RET 1)


Disassembly of function TRIG-CONST
(CONST 0) = A
(CONST 1) = ARG
(CONST 2) = PS
(CONST 3) = TRIGDISP
(CONST 4) = ASSQ
(CONST 5) = TEMP
(CONST 6) = (%TAN %COT)
(CONST 7) = MEMQ
(CONST 8) = SRDIS
(CONST 9) = MULTIPLE-%PI
(CONST 10) = PSDISREP
(CONST 11) = SUB*
(CONST 12) = RECIP
(CONST 13) = -1
(CONST 14) = TSEXPT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEMP A TRIGDISP ARG)
63 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; ARG
6     (GETVALUE 1)                        ; ARG
8     (CAR&PUSH)
9     (JMPIFEQTO 2 L72)                   ; PS
12    (GETVALUE 1)                        ; ARG
14    L14
14    (PUSH)
15    (LOAD&PUSH 8)
16    (GETVALUE&PUSH 3)                   ; TRIGDISP
18    (CALL2 4)                           ; ASSQ
20    (CDR)
21    (BIND 5)                            ; TEMP
23    (LOAD&CAR&PUSH 3)
25    (JMPIFEQTO 2 L44)                   ; PS
28    (LOAD&PUSH 11)
29    (CONST&PUSH 6)                      ; (%TAN %COT)
30    (CALL2&JMPIFNOT 7 L44)              ; MEMQ
33    (GETVALUE&PUSH 0)                   ; A
35    (LOAD&PUSH 4)
36    (CALL1&PUSH 8)                      ; SRDIS
38    (LOAD&PUSH 13)
39    (CALL 3 9)                          ; MULTIPLE-%PI
42    (JMPIF1 L65)
44    L44
44    (GETVALUE 5)                        ; TEMP
46    (JMPIF L82)
48    (LOAD&PUSH 11)
49    (CONST&PUSH 12)                     ; RECIP
50    (PUSH-UNBOUND 1)
52    (CALLS2&PUSH 132)                   ; GET
54    (LIST&PUSH 1)
56    (GETVALUE&PUSH 1)                   ; ARG
58    (CALL1&PUSH 8)                      ; SRDIS
60    (LIST&PUSH 2)
62    (CONST&PUSH 13)                     ; -1
63    (CALL2 14)                          ; TSEXPT
65    L65
65    (UNBIND1)
66    (SKIP 1)
68    (UNBIND 2)
70    (SKIP&RET 4)
72    L72
72    (GETVALUE 1)                        ; ARG
74    (CDR)
75    (CDR)
76    (CDR)
77    (CAR)
78    (CDR)
79    (JMP L14)
82    L82
82    (PUSH)
83    (LOAD&PUSH 4)
84    (CALL1 10)                          ; PSDISREP
86    (STORE 4)
87    (PUSH)
88    (GETVALUE&PUSH 0)                   ; A
90    (LOAD&PUSH 6)
91    (CALL2&PUSH 11)                     ; SUB*
93    (FUNCALL 2)
95    (JMP L65)


Disassembly of function #:|(DEFUN MULTIPLE-%PI (A CONST FUNC) ...)-184|
(CONST 0) = MULTIPLE-%PI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULTIPLE-%PI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULTIPLE-%PI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULTIPLE-%PI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULTIPLE-%PI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULTIPLE-%PI
8     (SKIP&RET 1)


Disassembly of function MULTIPLE-%PI
(CONST 0) = A
(CONST 1) = COEF
(CONST 2) = $%PI
(CONST 3) = $HIPOW
(CONST 4) = 1
(CONST 5) = $RATCOEF
(CONST 6) = $RATNUMP
(CONST 7) = SUB*
(CONST 8) = EXPAND
(CONST 9) = 2
(CONST 10) = %TAN
(CONST 11) = %COT
(CONST 12) = "Internal MAXIMA-ERROR in TAYLOR"
(CONST 13) = MERROR
(CONST 14) = PSMINUS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A COEF)
writes special variable : (COEF)
63 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (NIL)
4     (BIND 1)                            ; COEF
6     (LOAD&PUSH 8)
7     (CONST&PUSH 2)                      ; $%PI
8     (CALL2&PUSH 3)                      ; $HIPOW
10    (CONST 4)                           ; 1
11    (EQ)
12    (JMPIFNOT1 L86)
15    (LOAD&PUSH 8)
16    (CONST&PUSH 2)                      ; $%PI
17    (CONST&PUSH 4)                      ; 1
18    (CALL 3 5)                          ; $RATCOEF
21    (SETVALUE 1)                        ; COEF
23    (PUSH)
24    (CALL1 6)                           ; $RATNUMP
26    (JMPIFNOT1 L86)
28    (GETVALUE&PUSH 1)                   ; COEF
30    (CALLS2&JMPIF 8 L45)                ; NUMBERP
33    (GETVALUE 1)                        ; COEF
35    (CDR)
36    (CDR)
37    (CAR&PUSH)
38    (JMPIFEQTO 9 L62)                   ; 2
41    (NIL)
42    (UNBIND1)
43    (JMP L87)
45    L45
45    (GETVALUE&PUSH 0)                   ; A
47    (LOAD&PUSH 9)
48    (CALL2&PUSH 7)                      ; SUB*
50    (LOAD&PUSH 8)
51    (CALL2 8)                           ; EXPAND
53    (UNBIND1)
54    (JMP L87)
56    L56
56    (CONST 11)                          ; %COT
57    (JMP L78)
59    L59
59    (CONST 10)                          ; %TAN
60    (JMP L78)
62    L62
62    (GETVALUE&PUSH 0)                   ; A
64    (LOAD&PUSH 9)
65    (CALL2&PUSH 7)                      ; SUB*
67    (LOAD&PUSH 8)
68    (JMPIFEQTO 10 L56)                  ; %TAN
71    (LOAD&PUSH 8)
72    (JMPIFEQTO 11 L59)                  ; %COT
75    (CONST&PUSH 12)                     ; "Internal MAXIMA-ERROR in TAYLOR"
76    (CALL1 13)                          ; MERROR
78    L78
78    (PUSH)
79    (CALL2&PUSH 8)                      ; EXPAND
81    (CALL1 14)                          ; PSMINUS
83    (UNBIND1)
84    (JMP L87)
86    L86
86    (UNBIND1)
87    L87
87    (UNBIND1)
88    (SKIP&RET 4)


Disassembly of function #:|(SETQ *PSCIRC '(%COT %TAN %CSC ...) ...)-185|
(CONST 0) = (%COT %TAN %CSC %SIN %SEC %COS %COTH %TANH %CSCH %SINH %SECH %COSH)
(CONST 1) = *PSCIRC
(CONST 2) = (%ACOT %ATAN %ACSC %ASIN %ASEC %ACOS %ACOTH %ATANH %ACSCH %ASINH %ASECH %ACOSH)
(CONST 3) = *PSACIRC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (*PSACIRC *PSCIRC)
5 byte-code instructions:
0     (CONST 0)                           ; (%COT %TAN %CSC %SIN %SEC %COS ...)
1     (SETVALUE 1)                        ; *PSCIRC
3     (CONST 2)                           ; (%ACOT %ATAN %ACSC %ASIN %ASEC ...)
4     (SETVALUE 3)                        ; *PSACIRC
6     (SKIP&RET 1)


Disassembly of function #:|(SETQ CONST-EXP-FUNS `(# # . ,#) ...)-186|
(CONST 0) = (%GAMMA . GAM-CONST)
(CONST 1) = ($PSI . PLYGAM-CONST)
(CONST 2) = *PSCIRC
(CONST 3) = TRIG-CONST
(CONST 4) = CONST-EXP-FUNS
(CONST 5) = 
((%SIN . PSINA+B) (%COS . PSCOSA+B) (%TAN . PSTANA+B) (%SINH . PSINHA+B)
 (%COSH . PSCOSHA+B) (%TANH . PSTANHA+B))
(CONST 6) = TRIGDISP
(CONST 7) = ((%GAMMA . PLYGAM-POLE) ($PSI . PLYGAM-POLE))
(CONST 8) = TAY-POLE-EXPAND
(CONST 9) = TAY-EXPONENTIALIZE
(CONST 10) = *PSACIRC
(CONST 11) = TAY-CONST-EXPAND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*PSACIRC *PSCIRC)
writes special variables : (TAY-CONST-EXPAND TAY-POLE-EXPAND TRIGDISP CONST-EXP-FUNS)
63 byte-code instructions:
0     (CONST&PUSH 0)                      ; (%GAMMA . GAM-CONST)
1     (CONST&PUSH 1)                      ; ($PSI . PLYGAM-CONST)
2     (NIL&PUSH)
3     (GETVALUE&PUSH 2)                   ; *PSCIRC
5     (JMP L18)
7     L7
7     (LOAD&CAR&PUSH 0)
9     (LOAD&PUSH 0)
10    (CONST 3)                           ; TRIG-CONST
11    (CONS&PUSH)
12    (LOAD&CONS&STORE 2)
14    (SKIP 1)
16    (LOAD&CDR&STORE 0)
18    L18
18    (LOAD&PUSH 0)
19    (CALLS1&JMPIFNOT 146 L7)            ; ENDP
22    (SKIP 1)
24    (LOAD&PUSH 0)
25    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
27    (SKIP 1)
29    (LIST* 2)
31    (SETVALUE 4)                        ; CONST-EXP-FUNS
33    (CONST 5)                           ; (# # # ...)
34    (SETVALUE 6)                        ; TRIGDISP
36    (CONST 7)                           ; (# #)
37    (SETVALUE 8)                        ; TAY-POLE-EXPAND
39    (NIL&PUSH)
40    (GETVALUE&PUSH 2)                   ; *PSCIRC
42    (JMP L55)
44    L44
44    (LOAD&CAR&PUSH 0)
46    (LOAD&PUSH 0)
47    (CONST 9)                           ; TAY-EXPONENTIALIZE
48    (CONS&PUSH)
49    (LOAD&CONS&STORE 2)
51    (SKIP 1)
53    (LOAD&CDR&STORE 0)
55    L55
55    (LOAD&PUSH 0)
56    (CALLS1&JMPIFNOT 146 L44)           ; ENDP
59    (SKIP 1)
61    (LOAD&PUSH 0)
62    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
65    (NIL&PUSH)
66    (GETVALUE&PUSH 10)                  ; *PSACIRC
68    (JMP L81)
70    L70
70    (LOAD&CAR&PUSH 0)
72    (LOAD&PUSH 0)
73    (CONST 9)                           ; TAY-EXPONENTIALIZE
74    (CONS&PUSH)
75    (LOAD&CONS&STORE 2)
77    (SKIP 1)
79    (LOAD&CDR&STORE 0)
81    L81
81    (LOAD&PUSH 0)
82    (CALLS1&JMPIFNOT 146 L70)           ; ENDP
85    (SKIP 1)
87    (LOAD&PUSH 0)
88    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
91    (CALLSR 2 34)                       ; APPEND
94    (SETVALUE 11)                       ; TAY-CONST-EXPAND
96    (SKIP&RET 1)


Disassembly of function #:|(MAPC #'(LAMBDA # #) '(%ACOS %ACOT %ASEC ...))-187|
(CONST 0) = (%ACOS %ACOT %ASEC %ACSC %ACOSH %ACOTH %ASECH %ACSCH)
(CONST 1) = ATRIG-TRANS
(CONST 2) = TAY-TRANS
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; (%ACOS %ACOT %ASEC %ACSC ...)
1     (JMP L15)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD&PUSH 0)
6     (CONST&PUSH 1)                      ; ATRIG-TRANS
7     (CONST&PUSH 2)                      ; TAY-TRANS
8     (CALL 3 3)                          ; PUTPROP
11    (SKIP 1)
13    (LOAD&CDR&STORE 0)
15    L15
15    (LOAD&PUSH 0)
16    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
19    (SKIP 1)
21    (CONST 0)                           ; (%ACOS %ACOT %ASEC %ACSC ...)
22    (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MFACTORIAL FACTORIAL-TRANS ...)-188|
(CONST 0) = MFACTORIAL
(CONST 1) = TAY-TRANS
(CONST 2) = FACTORIAL-TRANS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFACTORIAL
1     (CONST&PUSH 1)                      ; TAY-TRANS
2     (CONST&PUSH 2)                      ; FACTORIAL-TRANS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN FACTORIAL-TRANS (ARG FUNC) ...)-189|
(CONST 0) = FACTORIAL-TRANS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTORIAL-TRANS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTORIAL-TRANS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTORIAL-TRANS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTORIAL-TRANS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTORIAL-TRANS
8     (SKIP&RET 1)


Disassembly of function FACTORIAL-TRANS
(CONST 0) = ARG
(CONST 1) = (%GAMMA)
(CONST 2) = 1
(CONST 3) = ADD*
(CONST 4) = TAYLOR2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; (%GAMMA)
4     (CONST&PUSH 2)                      ; 1
5     (GETVALUE&PUSH 0)                   ; ARG
7     (CALL2&PUSH 3)                      ; ADD*
9     (LIST&PUSH 2)
11    (CALL1 4)                           ; TAYLOR2
13    (UNBIND1)
14    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSINA+B (A B) ...)-190|
(CONST 0) = PSINA+B
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSINA+B>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSINA+B
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSINA+B
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSINA+B>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSINA+B
8     (SKIP&RET 1)


Disassembly of function PSINA+B
(CONST 0) = A
(CONST 1) = B
(CONST 2) = %SIN
(CONST 3) = EXPAND
(CONST 4) = %COS
(CONST 5) = PSTIMES
(CONST 6) = PSPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
21 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CONST&PUSH 2)                      ; %SIN
9     (CALL2&PUSH 3)                      ; EXPAND
11    (GETVALUE&PUSH 1)                   ; B
13    (CONST&PUSH 4)                      ; %COS
14    (CALL2&PUSH 3)                      ; EXPAND
16    (CALL2&PUSH 5)                      ; PSTIMES
18    (GETVALUE&PUSH 0)                   ; A
20    (CONST&PUSH 4)                      ; %COS
21    (CALL2&PUSH 3)                      ; EXPAND
23    (GETVALUE&PUSH 1)                   ; B
25    (CONST&PUSH 2)                      ; %SIN
26    (CALL2&PUSH 3)                      ; EXPAND
28    (CALL2&PUSH 5)                      ; PSTIMES
30    (CALL2 6)                           ; PSPLUS
32    (UNBIND 2)
34    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSCOSA+B (A B) ...)-191|
(CONST 0) = PSCOSA+B
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCOSA+B>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCOSA+B
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCOSA+B
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCOSA+B>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCOSA+B
8     (SKIP&RET 1)


Disassembly of function PSCOSA+B
(CONST 0) = A
(CONST 1) = B
(CONST 2) = %COS
(CONST 3) = EXPAND
(CONST 4) = PSTIMES
(CONST 5) = %SIN
(CONST 6) = PSDIFF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
21 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CONST&PUSH 2)                      ; %COS
9     (CALL2&PUSH 3)                      ; EXPAND
11    (GETVALUE&PUSH 1)                   ; B
13    (CONST&PUSH 2)                      ; %COS
14    (CALL2&PUSH 3)                      ; EXPAND
16    (CALL2&PUSH 4)                      ; PSTIMES
18    (GETVALUE&PUSH 0)                   ; A
20    (CONST&PUSH 5)                      ; %SIN
21    (CALL2&PUSH 3)                      ; EXPAND
23    (GETVALUE&PUSH 1)                   ; B
25    (CONST&PUSH 5)                      ; %SIN
26    (CALL2&PUSH 3)                      ; EXPAND
28    (CALL2&PUSH 4)                      ; PSTIMES
30    (CALL2 6)                           ; PSDIFF
32    (UNBIND 2)
34    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSTANA+B (A B) ...)-192|
(CONST 0) = PSTANA+B
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTANA+B>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTANA+B
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTANA+B
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTANA+B>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTANA+B
8     (SKIP&RET 1)


Disassembly of function PSTANA+B
(CONST 0) = A
(CONST 1) = B
(CONST 2) = %TAN
(CONST 3) = EXPAND
(CONST 4) = PSPLUS
(CONST 5) = (1 . 1)
(CONST 6) = PSTIMES
(CONST 7) = PSDIFF
(CONST 8) = (-1 . 1)
(CONST 9) = PSEXPT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
writes special variables : (B A)
25 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CONST&PUSH 2)                      ; %TAN
9     (CALL2 3)                           ; EXPAND
11    (SETVALUE 0)                        ; A
13    (GETVALUE&PUSH 1)                   ; B
15    (CONST&PUSH 2)                      ; %TAN
16    (CALL2 3)                           ; EXPAND
18    (SETVALUE 1)                        ; B
20    (GETVALUE&PUSH 0)                   ; A
22    (GETVALUE&PUSH 1)                   ; B
24    (CALL2&PUSH 4)                      ; PSPLUS
26    (CONST&PUSH 5)                      ; (1 . 1)
27    (GETVALUE&PUSH 0)                   ; A
29    (GETVALUE&PUSH 1)                   ; B
31    (CALL2&PUSH 6)                      ; PSTIMES
33    (CALL2&PUSH 7)                      ; PSDIFF
35    (CONST&PUSH 8)                      ; (-1 . 1)
36    (CALL2&PUSH 9)                      ; PSEXPT
38    (CALL2 6)                           ; PSTIMES
40    (UNBIND 2)
42    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSINHA+B (A B) ...)-193|
(CONST 0) = PSINHA+B
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSINHA+B>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSINHA+B
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSINHA+B
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSINHA+B>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSINHA+B
8     (SKIP&RET 1)


Disassembly of function PSINHA+B
(CONST 0) = A
(CONST 1) = B
(CONST 2) = %SINH
(CONST 3) = EXPAND
(CONST 4) = %COSH
(CONST 5) = PSTIMES
(CONST 6) = PSPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
21 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CONST&PUSH 2)                      ; %SINH
9     (CALL2&PUSH 3)                      ; EXPAND
11    (GETVALUE&PUSH 1)                   ; B
13    (CONST&PUSH 4)                      ; %COSH
14    (CALL2&PUSH 3)                      ; EXPAND
16    (CALL2&PUSH 5)                      ; PSTIMES
18    (GETVALUE&PUSH 0)                   ; A
20    (CONST&PUSH 4)                      ; %COSH
21    (CALL2&PUSH 3)                      ; EXPAND
23    (GETVALUE&PUSH 1)                   ; B
25    (CONST&PUSH 2)                      ; %SINH
26    (CALL2&PUSH 3)                      ; EXPAND
28    (CALL2&PUSH 5)                      ; PSTIMES
30    (CALL2 6)                           ; PSPLUS
32    (UNBIND 2)
34    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSCOSHA+B (A B) ...)-194|
(CONST 0) = PSCOSHA+B
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSCOSHA+B>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSCOSHA+B
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSCOSHA+B
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSCOSHA+B>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSCOSHA+B
8     (SKIP&RET 1)


Disassembly of function PSCOSHA+B
(CONST 0) = A
(CONST 1) = B
(CONST 2) = %COSH
(CONST 3) = EXPAND
(CONST 4) = PSTIMES
(CONST 5) = %SINH
(CONST 6) = PSPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
21 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CONST&PUSH 2)                      ; %COSH
9     (CALL2&PUSH 3)                      ; EXPAND
11    (GETVALUE&PUSH 1)                   ; B
13    (CONST&PUSH 2)                      ; %COSH
14    (CALL2&PUSH 3)                      ; EXPAND
16    (CALL2&PUSH 4)                      ; PSTIMES
18    (GETVALUE&PUSH 0)                   ; A
20    (CONST&PUSH 5)                      ; %SINH
21    (CALL2&PUSH 3)                      ; EXPAND
23    (GETVALUE&PUSH 1)                   ; B
25    (CONST&PUSH 5)                      ; %SINH
26    (CALL2&PUSH 3)                      ; EXPAND
28    (CALL2&PUSH 4)                      ; PSTIMES
30    (CALL2 6)                           ; PSPLUS
32    (UNBIND 2)
34    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSTANHA+B (A B) ...)-195|
(CONST 0) = PSTANHA+B
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSTANHA+B>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSTANHA+B
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSTANHA+B
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSTANHA+B>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSTANHA+B
8     (SKIP&RET 1)


Disassembly of function PSTANHA+B
(CONST 0) = A
(CONST 1) = B
(CONST 2) = %TANH
(CONST 3) = EXPAND
(CONST 4) = PSPLUS
(CONST 5) = (1 . 1)
(CONST 6) = PSTIMES
(CONST 7) = (-1 . 1)
(CONST 8) = PSEXPT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
writes special variables : (B A)
25 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CONST&PUSH 2)                      ; %TANH
9     (CALL2 3)                           ; EXPAND
11    (SETVALUE 0)                        ; A
13    (GETVALUE&PUSH 1)                   ; B
15    (CONST&PUSH 2)                      ; %TANH
16    (CALL2 3)                           ; EXPAND
18    (SETVALUE 1)                        ; B
20    (GETVALUE&PUSH 0)                   ; A
22    (GETVALUE&PUSH 1)                   ; B
24    (CALL2&PUSH 4)                      ; PSPLUS
26    (CONST&PUSH 5)                      ; (1 . 1)
27    (GETVALUE&PUSH 0)                   ; A
29    (GETVALUE&PUSH 1)                   ; B
31    (CALL2&PUSH 6)                      ; PSTIMES
33    (CALL2&PUSH 4)                      ; PSPLUS
35    (CONST&PUSH 7)                      ; (-1 . 1)
36    (CALL2&PUSH 8)                      ; PSEXPT
38    (CALL2 6)                           ; PSTIMES
40    (UNBIND 2)
42    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ATRIG-TRANS (ARG FUNC) ...)-196|
(CONST 0) = ATRIG-TRANS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATRIG-TRANS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATRIG-TRANS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATRIG-TRANS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATRIG-TRANS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATRIG-TRANS
8     (SKIP&RET 1)


Disassembly of function ATRIG-TRANS
(CONST 0) = ARG
(CONST 1) = (%ACOS %ACOSH)
(CONST 2) = MEMQ
(CONST 3) = (MPLUS)
(CONST 4) = HALF%PI
(CONST 5) = (MTIMES)
(CONST 6) = -1
(CONST 7) = ((%ACOS . %ASIN) (%ACOSH . %ASINH))
(CONST 8) = ASSQ
(CONST 9) = 
((%ACSC . %ASIN) (%ASEC . %ACOS) (%ACOT . %ATAN) (%ACSCH . %ASINH)
 (%ASECH . %ACOSH) (%ACOTH . %ATANH))
(CONST 10) = POWER*
(CONST 11) = TAYLOR2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (HALF%PI ARG)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (LOAD&PUSH 4)
4     (CONST&PUSH 1)                      ; (%ACOS %ACOSH)
5     (CALL2&JMPIF 2 L28)                 ; MEMQ
8     (LOAD&PUSH 4)
9     (CONST&PUSH 9)                      ; (# # # ...)
10    (CALL2 8)                           ; ASSQ
12    (CDR&PUSH)
13    (LIST&PUSH 1)
15    (GETVALUE&PUSH 0)                   ; ARG
17    (CONST&PUSH 6)                      ; -1
18    (CALL2&PUSH 10)                     ; POWER*
20    (LIST 2)
22    L22
22    (PUSH)
23    (CALL1 11)                          ; TAYLOR2
25    (UNBIND1)
26    (SKIP&RET 3)
28    L28
28    (CONST&PUSH 3)                      ; (MPLUS)
29    (GETVALUE&PUSH 4)                   ; HALF%PI
31    (CONST&PUSH 5)                      ; (MTIMES)
32    (CONST&PUSH 6)                      ; -1
33    (LOAD&PUSH 8)
34    (CONST&PUSH 7)                      ; ((%ACOS . %ASIN) (%ACOSH . %ASINH))
35    (CALL2 8)                           ; ASSQ
37    (CDR&PUSH)
38    (LIST&PUSH 1)
40    (GETVALUE&PUSH 0)                   ; ARG
42    (LIST&PUSH 2)
44    (LIST&PUSH 3)
46    (LIST 3)
48    (JMP L22)


Disassembly of function #:|(DEFUN ATRIGH (ARG FUNC) ...)-197|
(CONST 0) = ATRIGH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATRIGH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATRIGH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATRIGH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATRIGH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATRIGH
8     (SKIP&RET 1)


Disassembly of function ATRIGH
(CONST 0) = ARG
(CONST 1) = FULL-LOG
(CONST 2) = $LOGARC
(CONST 3) = ((MTIMES) $%I $%PI)
(CONST 4) = LOG-1
(CONST 5) = ((MTIMES) ((RAT) 1 2) $%I $%PI)
(CONST 6) = LOG%I
(CONST 7) = SIMPLIFY
(CONST 8) = TAYLOR2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (T)
4     (BIND 1)                            ; FULL-LOG
6     (T)
7     (BIND 2)                            ; $LOGARC
9     (CONST 3)                           ; ((MTIMES) $%I $%PI)
10    (BIND 4)                            ; LOG-1
12    (CONST 5)                           ; ((MTIMES) ((RAT) 1 2) $%I $%PI)
13    (BIND 6)                            ; LOG%I
15    (LOAD&PUSH 16)
16    (LIST&PUSH 1)
18    (GETVALUE&PUSH 0)                   ; ARG
20    (LIST&PUSH 2)
22    (CALL1&PUSH 7)                      ; SIMPLIFY
24    (CALL1 8)                           ; TAYLOR2
26    (UNBIND 5)
28    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TAY-EXPONENTIALIZE (ARG FUN) ...)-198|
(CONST 0) = TAY-EXPONENTIALIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAY-EXPONENTIALIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-EXPONENTIALIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAY-EXPONENTIALIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAY-EXPONENTIALIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAY-EXPONENTIALIZE
8     (SKIP&RET 1)


Disassembly of function TAY-EXPONENTIALIZE
(CONST 0) = ARG
(CONST 1) = $EXPONENTIALIZE
(CONST 2) = $LOGARC
(CONST 3) = MEVAL
(CONST 4) = TAYLOR2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
writes special variable : (ARG)
17 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (T)
4     (BIND 1)                            ; $EXPONENTIALIZE
6     (T)
7     (BIND 2)                            ; $LOGARC
9     (LOAD&PUSH 10)
10    (LIST&PUSH 1)
12    (GETVALUE&PUSH 0)                   ; ARG
14    (LIST&PUSH 2)
16    (CALL1 3)                           ; MEVAL
18    (SETVALUE 0)                        ; ARG
20    (UNBIND 2)
22    (GETVALUE&PUSH 0)                   ; ARG
24    (CALL1 4)                           ; TAYLOR2
26    (UNBIND1)
27    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TSPLUS (L) ...)-199|
(CONST 0) = TSPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSPLUS
8     (SKIP&RET 1)


Disassembly of function TSPLUS
(CONST 0) = L
(CONST 1) = TAYLOR2
(CONST 2) = ANS
(CONST 3) = PSPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS L)
writes special variables : (L ANS)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (CDR&PUSH)
6     (GETVALUE 0)                        ; L
8     (CAR&PUSH)
9     (CALL1 1)                           ; TAYLOR2
11    (BIND 2)                            ; ANS
13    (LOAD 3)
14    (BIND 0)                            ; L
16    (GETVALUE 0)                        ; L
18    (JMPIFNOT L41)
20    L20
20    (GETVALUE 0)                        ; L
22    (CDR&PUSH)
23    (GETVALUE&PUSH 2)                   ; ANS
25    (GETVALUE 0)                        ; L
27    (CAR&PUSH)
28    (CALL1&PUSH 1)                      ; TAYLOR2
30    (CALL2 3)                           ; PSPLUS
32    (SETVALUE 2)                        ; ANS
34    (POP)
35    (SETVALUE 0)                        ; L
37    (GETVALUE 0)                        ; L
39    (JMPIF L20)
41    L41
41    (GETVALUE 2)                        ; ANS
43    (UNBIND 2)
45    (SKIP 1)
47    (UNBIND1)
48    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TS-FORMULA (FORM VAR PW) ...)-200|
(CONST 0) = TS-FORMULA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TS-FORMULA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TS-FORMULA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TS-FORMULA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TS-FORMULA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TS-FORMULA
8     (SKIP&RET 1)


Disassembly of function TS-FORMULA
(CONST 0) = FORM
(CONST 1) = VAR
(CONST 2) = KEY-VARS
(CONST 3) = ASSQ
(CONST 4) = TLIST
(CONST 5) = ZL-ASSOC
(CONST 6) = D
(CONST 7) = PUSH-PW
(CONST 8) = IVARS
(CONST 9) = SP2VAR
(CONST 10) = TAYLOR2
(CONST 11) = POP-PW
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FORM IVARS D TLIST KEY-VARS VAR)
33 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (GETVALUE 1)                        ; VAR
8     (CAR&PUSH)
9     (GETVALUE&PUSH 2)                   ; KEY-VARS
11    (CALL2 3)                           ; ASSQ
13    (CDR&PUSH)
14    (GETVALUE&PUSH 4)                   ; TLIST
16    (CALL2&PUSH 5)                      ; ZL-ASSOC
18    (LOAD 0)
19    (BIND 6)                            ; D
21    (GETVALUE&PUSH 6)                   ; D
23    (LOAD&PUSH 12)
24    (CALL2 7)                           ; PUSH-PW
26    (GETVALUE 1)                        ; VAR
28    (CAR&PUSH)
29    (GETVALUE&PUSH 8)                   ; IVARS
31    (CALL2 3)                           ; ASSQ
33    (CDR&PUSH)
34    (CONST&PUSH 9)                      ; SP2VAR
35    (GETVALUE&PUSH 0)                   ; FORM
37    (PUSH-UNBOUND 3)
39    (CALLS1&PUSH 172)                   ; SUBST
41    (CALL1&PUSH 10)                     ; TAYLOR2
43    (GETVALUE&PUSH 6)                   ; D
45    (CALL1 11)                          ; POP-PW
47    (POP)
48    (UNBIND1)
49    (SKIP 1)
51    (UNBIND 2)
53    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO NEXT-SERIES (L) ...)-201|
(CONST 0) = NEXT-SERIES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEXT-SERIES>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEXT-SERIES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEXT-SERIES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEXT-SERIES>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; NEXT-SERIES
10    (SKIP&RET 1)


Disassembly of function NEXT-SERIES
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = L
(CONST 3) = CDADR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (L)
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L21)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; L
13    (CONST&PUSH 3)                      ; CDADR
14    (GETVALUE&PUSH 2)                   ; L
16    (LIST 2)
18    (UNBIND1)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 2)
22    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
24    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TSTIMES-GET-PW (L PW) ...)-202|
(CONST 0) = TSTIMES-GET-PW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSTIMES-GET-PW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTIMES-GET-PW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSTIMES-GET-PW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSTIMES-GET-PW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSTIMES-GET-PW
8     (SKIP&RET 1)


Disassembly of function TSTIMES-GET-PW
(CONST 0) = L
(CONST 1) = ORD-VECTOR
(CONST 2) = E+
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
59 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (BIND 0)                            ; L
7     (NIL&PUSH)
8     (GETVALUE 0)                        ; L
10    (JMPIFNOT L83)
13    L13
13    (NIL&PUSH)
14    (LOAD&PUSH 9)
15    (GETVALUE 0)                        ; L
17    (CAR)
18    (CDR&PUSH)
19    (CALL1 1)                           ; ORD-VECTOR
21    (STORE 2)
22    (PUSH)
23    (JMP L43)
25    L25
25    (SKIP 2)
27    (JMP L55)
29    L29
29    (LOAD&CAR&PUSH 1)
31    (LOAD&PUSH 1)
32    (LOAD&PUSH 1)
33    (CALL2&PUSH 2)                      ; E+
35    (LOAD&CONS&STORE 4)
37    (SKIP 2)
39    (LOAD&CDR&STORE 1)
41    (LOAD&CDR&STORE 0)
43    L43
43    (LOAD&PUSH 1)
44    (CALLS1&JMPIF 146 L25)              ; ENDP
47    (LOAD&CAR&PUSH 1)
49    (LOAD&PUSH 1)
50    (CALLS1&JMPIFNOT 146 L29)           ; ENDP
53    (SKIP 3)
55    L55
55    (LOAD&PUSH 0)
56    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
58    (SKIP 1)
60    (STORE 8)
62    (GETVALUE 0)                        ; L
64    (CAR&PUSH)
65    (GETVALUE 0)                        ; L
67    (CAR)
68    (CDR&PUSH)
69    (LOAD 2)
70    (CONS&PUSH)
71    (CALLS1 170)                        ; RPLACD
73    (GETVALUE 0)                        ; L
75    (CDR)
76    (SETVALUE 0)                        ; L
78    (GETVALUE 0)                        ; L
80    (JMPIF L13)
83    L83
83    (LOAD 8)
84    (SKIP 1)
86    (UNBIND 2)
88    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TSTIMES-L-MULT (A) ...)-203|
(CONST 0) = TSTIMES-L-MULT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSTIMES-L-MULT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTIMES-L-MULT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSTIMES-L-MULT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSTIMES-L-MULT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSTIMES-L-MULT
8     (SKIP&RET 1)


Disassembly of function TSTIMES-L-MULT
(CONST 0) = A
(CONST 1) = L
(CONST 2) = $MAXTAYORDER
(CONST 3) = PSTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L A)
writes special variables : (L A)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE 0)                        ; A
5     (CDR&PUSH)
6     (T&PUSH)
7     (GETVALUE 0)                        ; A
9     (CAR)
10    (BIND 0)                            ; A
12    (LOAD 4)
13    (BIND 1)                            ; L
15    (LOAD 6)
16    (BIND 2)                            ; $MAXTAYORDER
18    (GETVALUE 1)                        ; L
20    (JMPIFNOT L41)
22    L22
22    (GETVALUE 1)                        ; L
24    (CDR&PUSH)
25    (GETVALUE&PUSH 0)                   ; A
27    (GETVALUE 1)                        ; L
29    (CAR&PUSH)
30    (CALL2 3)                           ; PSTIMES
32    (SETVALUE 0)                        ; A
34    (POP)
35    (SETVALUE 1)                        ; L
37    (GETVALUE 1)                        ; L
39    (JMPIF L22)
41    L41
41    (GETVALUE 0)                        ; A
43    (UNBIND 3)
45    (SKIP 2)
47    (UNBIND1)
48    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MZFREE (E L) ...)-204|
(CONST 0) = MZFREE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MZFREE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MZFREE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MZFREE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MZFREE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MZFREE
8     (SKIP&RET 1)


Disassembly of function MZFREE
(CONST 0) = E
(CONST 1) = L
(CONST 2) = ZFREE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (E L)
writes special variable : (L)
28 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (GETVALUE 1)                        ; L
8     (BIND 1)                            ; L
10    (GETVALUE 1)                        ; L
12    (JMPIFNOT L31)
14    L14
14    (GETVALUE&PUSH 0)                   ; E
16    (GETVALUE 1)                        ; L
18    (CAR&PUSH)
19    (CALL2&JMPIFNOT 2 L37)              ; ZFREE
22    (GETVALUE 1)                        ; L
24    (CDR)
25    (SETVALUE 1)                        ; L
27    (GETVALUE 1)                        ; L
29    (JMPIF L14)
31    L31
31    (T)
32    (UNBIND1)
33    L33
33    (UNBIND 2)
35    (SKIP&RET 3)
37    L37
37    (NIL)
38    (UNBIND1)
39    (JMP L33)


Disassembly of function #:|(DEFUN TSTIMES (L) ...)-205|
(CONST 0) = TSTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSTIMES
8     (SKIP&RET 1)


Disassembly of function TSTIMES
(CONST 0) = L
(CONST 1) = TEMP
(CONST 2) = (1 . 1)
(CONST 3) = MEXPTP
(CONST 4) = TVARS
(CONST 5) = FREE
(CONST 6) = (MEXPT)
(CONST 7) = $%E
(CONST 8) = (%LOG)
(CONST 9) = MUL*
(CONST 10) = TSEXP-COMB
(CONST 11) = TSBASE-COMB
(CONST 12) = TRUNC-CONSTANTS?
(CONST 13) = 0
(CONST 14) = EXP
(CONST 15) = TAYLOR2
(CONST 16) = GET-LEXP
(CONST 17) = PS
(CONST 18) = MZFREE
(CONST 19) = PSTIMES
(CONST 20) = (0 . 1)
(CONST 21) = E>
(CONST 22) = ORD-VECTOR
(CONST 23) = X
(CONST 24) = TSTIMES-GET-PW
(CONST 25) = TLIST
(CONST 26) = EDIFF
(CONST 27) = E+
(CONST 28) = PUSH-PW
(CONST 29) = POP-PW
(CONST 30) = CADR
(CONST 31) = TSTIMES-L-MULT
(CONST 32) = ANS
(CONST 33) = $MAXTAYORDER
(CONST 34) = PSTRUNC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($MAXTAYORDER TEMP ANS X TLIST EXP TVARS L)
writes special variables : (TEMP L)
393 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 7)
5     (NIL)
6     (BIND 1)                            ; TEMP
8     (CONST&PUSH 2)                      ; (1 . 1)
9     (GETVALUE&PUSH 0)                   ; L
11    (NIL&PUSH)
12    (JMP L60)
14    L14
14    (LOAD 0)
15    (JMP L43)
17    L17
17    (LOAD 0)
18    (CDR)
19    (CDR)
20    (CAR&PUSH)
21    (GETVALUE 4)                        ; TVARS
23    (CAR&PUSH)
24    (CALL2&JMPIF 5 L14)                 ; FREE
27    (CONST&PUSH 6)                      ; (MEXPT)
28    (CONST&PUSH 7)                      ; $%E
29    (LOAD 2)
30    (CDR)
31    (CDR)
32    (CAR&PUSH)
33    (CONST&PUSH 8)                      ; (%LOG)
34    (LOAD 4)
35    (CDR)
36    (CAR&PUSH)
37    (LIST&PUSH 2)
39    (CALL2&PUSH 9)                      ; MUL*
41    (LIST 3)
43    L43
43    (PUSH)
44    (LOAD&CONS&STORE 11)
46    (JMP L58)
48    L48
48    (LOAD&CAR&STORE 1 0)
51    (PUSH)
52    (CALL1&JMPIF 3 L17)                 ; MEXPTP
55    (LOAD&PUSH 0)
56    (LOAD&CONS&STORE 12)
58    L58
58    (LOAD&CDR&STORE 1)
60    L60
60    (LOAD&PUSH 1)
61    (CALLS1&JMPIFNOT 146 L48)           ; ENDP
64    (SKIP 2)
66    (LOAD&JMPIFNOT 9 L79)
69    (PUSH)
70    (CALL1 10)                          ; TSEXP-COMB
72    (STORE 9)
74    (PUSH)
75    (CALL1 11)                          ; TSBASE-COMB
77    (STORE 9)
79    L79
79    (LOAD&PUSH 9)
80    (LOAD&PUSH 11)
81    (CALLSR 2 35)                       ; NCONC
84    (SETVALUE 0)                        ; L
86    (NIL)
87    (BIND 12)                           ; TRUNC-CONSTANTS?
89    (CONST&PUSH 13)                     ; 0
90    (NIL&PUSH)
91    (GETVALUE&PUSH 0)                   ; L
93    (JMP L115)
95    L95
95    (LOAD&CAR&PUSH 0)
97    (LOAD 0)
98    (BIND 14)                           ; EXP
100   (GETVALUE&PUSH 14)                  ; EXP
102   (GETVALUE&PUSH 14)                  ; EXP
104   (CALL1 15)                          ; TAYLOR2
106   (CONS)
107   (UNBIND1)
108   (PUSH)
109   (LOAD&CONS&STORE 2)
111   (SKIP 1)
113   (LOAD&CDR&STORE 0)
115   L115
115   (LOAD&PUSH 0)
116   (CALLS1&JMPIFNOT 146 L95)           ; ENDP
119   (SKIP 1)
121   (LOAD&PUSH 0)
122   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
124   (SKIP 1)
126   (CONS)
127   (STORE 12)
129   (UNBIND1)
130   (BIND 0)                            ; L
132   (NIL&PUSH)
133   (JMP L233)
136   L136
136   (LOAD&PUSH 0)
137   (CALLS2 145)                        ; ZEROP
139   (SKIP 1)
141   (JMPIFNOT L180)
143   L143
143   (CONST 13)                          ; 0
144   (STORE 11)
146   (SKIP 1)
148   (UNBIND1)
149   (JMP L330)
152   L152
152   (LOAD&PUSH 0)
153   (CALLS2 145)                        ; ZEROP
155   (SKIP 1)
157   (JMPIFNOT L255)
160   L160
160   (GETVALUE 0)                        ; L
162   (CDR)
163   (CAR)
164   (CAR&PUSH)
165   (CONST&PUSH 2)                      ; (1 . 1)
166   (NIL&PUSH)
167   (CALL 3 16)                         ; GET-LEXP
170   (STORE 0)
171   (CAR&PUSH)
172   (LOAD&PUSH 0)
173   (CALLS2&JMPIF 8 L136)               ; NUMBERP
176   (SKIP 1)
178   (JMPIF L143)
180   L180
180   (GETVALUE 0)                        ; L
182   (CDR)
183   (CAR)
184   (CAR&PUSH)
185   (LOAD 1)
186   (CONS)
187   (JMP L304)
190   L190
190   (GETVALUE 0)                        ; L
192   (CDR)
193   (CAR)
194   (CAR&PUSH)
195   (GETVALUE&PUSH 4)                   ; TVARS
197   (CALL2&JMPIFNOT 18 L219)            ; MZFREE
200   (GETVALUE 0)                        ; L
202   (CDR)
203   (CAR)
204   (CDR&PUSH)
205   (LOAD&PUSH 5)
206   (CALL2 19)                          ; PSTIMES
208   (STORE 4)
209   (JMP L225)
211   L211
211   (LOAD&PUSH 0)
212   (CALLS2 145)                        ; ZEROP
214   (SKIP 1)
216   (JMPIFNOT L286)
219   L219
219   (GETVALUE 0)                        ; L
221   (CDR)
222   (CAR&PUSH)
223   (LOAD&CONS&STORE 11)
225   L225
225   (GETVALUE&PUSH 0)                   ; L
227   (GETVALUE 0)                        ; L
229   (CDR)
230   (CDR&PUSH)
231   (CALLS1 170)                        ; RPLACD
233   L233
233   (GETVALUE 0)                        ; L
235   (CDR)
236   (JMPIFNOT L327)
239   (GETVALUE 0)                        ; L
241   (CDR)
242   (CAR)
243   (CDR)
244   (CAR&PUSH)
245   (LOAD&PUSH 0)
246   (CALLS2&JMPIF 8 L152)               ; NUMBERP
250   (SKIP 1)
252   (JMPIF L160)
255   L255
255   (GETVALUE 0)                        ; L
257   (CDR)
258   (CAR)
259   (CDR)
260   (CAR&PUSH)
261   (JMPIFNOTEQTO 17 L190)              ; PS
265   (GETVALUE 0)                        ; L
267   (CDR)
268   (CAR)
269   (CDR)
270   (CDR)
271   (CDR)
272   (CDR)
273   (CAR)
274   (CAR)
275   (CAR&PUSH)
276   (LOAD&PUSH 0)
277   (CALLS2&JMPIF 8 L211)               ; NUMBERP
281   (SKIP 1)
283   (JMPIF L219)
286   L286
286   (GETVALUE 0)                        ; L
288   (CDR)
289   (CAR)
290   (CDR)
291   (CDR)
292   (CDR)
293   (CDR)
294   (CAR)
295   (CAR&PUSH)
296   (CONST&PUSH 20)                     ; (0 . 1)
297   (CALL2&JMPIFNOT 21 L310)            ; E>
300   (GETVALUE 0)                        ; L
302   (CDR)
303   (CAR)
304   L304
304   (PUSH)
305   (LOAD&CONS&STORE 10)
307   (JMP L225)
310   L310
310   (GETVALUE 0)                        ; L
312   (CDR)
313   (SETVALUE 0)                        ; L
315   (JMP L233)
318   L318
318   (CONST 20)                          ; (0 . 1)
319   (SKIP 1)
321   (UNBIND1)
322   (SKIP 7)
324   (JMP L588)
327   L327
327   (SKIP 1)
329   (UNBIND1)
330   L330
330   (LOAD&PUSH 7)
331   (JMPIFEQTO 13 L318)                 ; 0
334   (LOAD 9)
335   (CDR)
336   (STORE 8)
338   (LOAD&PUSH 0)
339   (CALL1 22)                          ; ORD-VECTOR
341   (SETVALUE 1)                        ; TEMP
343   (PUSH)
344   (LOAD&PUSH 0)
345   (JMP L505)
348   L348
348   (NIL&PUSH)
349   (LOAD&PUSH 7)
350   (LOAD&PUSH 9)
351   (LOAD&PUSH 11)
352   (CALLSR&PUSH 3 35)                  ; NCONC
355   (JMP L458)
358   L358
358   (LOAD&CAR&PUSH 0)
360   (LOAD 0)
361   (BIND 23)                           ; X
363   (GETVALUE&PUSH 25)                  ; TLIST
365   (LOAD&PUSH 0)
366   (GETVALUE 23)                       ; X
368   (CDR)
369   (CDR&PUSH)
370   (LOAD&PUSH 14)
371   (JMP L404)
373   L373
373   (SKIP 3)
375   (JMP L422)
377   L377
377   (SKIP 4)
379   (JMP L422)
381   L381
381   (LOAD&CAR&PUSH 2)
383   (LOAD&PUSH 2)
384   (LOAD 3)
385   (CDR)
386   (CAR)
387   (CAR&PUSH)
388   (LOAD&PUSH 3)
389   (LOAD&PUSH 3)
390   (CALL2&PUSH 26)                     ; EDIFF
392   (CALL2&PUSH 27)                     ; E+
394   (CALL2 28)                          ; PUSH-PW
396   (SKIP 3)
398   (LOAD&CDR&STORE 2)
400   (LOAD&CDR&STORE 1)
402   (LOAD&CDR&STORE 0)
404   L404
404   (LOAD&PUSH 2)
405   (CALLS1&JMPIF 146 L373)             ; ENDP
408   (LOAD&CAR&PUSH 2)
410   (LOAD&PUSH 2)
411   (CALLS1&JMPIF 146 L377)             ; ENDP
414   (LOAD&CAR&PUSH 2)
416   (LOAD&PUSH 2)
417   (CALLS1&JMPIFNOT 146 L381)          ; ENDP
420   (SKIP 5)
422   L422
422   (SKIP 1)
424   (GETVALUE 23)                       ; X
426   (CAR&PUSH)
427   (CALL1&PUSH 15)                     ; TAYLOR2
429   (GETVALUE&PUSH 25)                  ; TLIST
431   (LOAD&PUSH 0)
432   (JMP L443)
434   L434
434   (LOAD&CAR&PUSH 0)
436   (LOAD&PUSH 0)
437   (CALL1 29)                          ; POP-PW
439   (SKIP 1)
441   (LOAD&CDR&STORE 0)
443   L443
443   (LOAD&PUSH 0)
444   (CALLS1&JMPIFNOT 146 L434)          ; ENDP
447   (SKIP 2)
449   (POP)
450   (UNBIND1)
451   (PUSH)
452   (LOAD&CONS&STORE 2)
454   (SKIP 1)
456   (LOAD&CDR&STORE 0)
458   L458
458   (LOAD&PUSH 0)
459   (CALLS1&JMPIFNOT 146 L358)          ; ENDP
463   (SKIP 1)
465   (LOAD&PUSH 0)
466   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
468   (SKIP 1)
470   (STORE 6)
471   (JMP L555)
474   L474
474   (LOAD 6)
475   (JMP L571)
478   L478
478   (LOAD 0)
479   (JMP L571)
482   L482
482   (GETVALUE 32)                       ; ANS
484   (JMP L582)
487   L487
487   (LOAD&CAR&PUSH 0)
489   (LOAD 0)
490   (BIND 23)                           ; X
492   (CONST&PUSH 20)                     ; (0 . 1)
493   (GETVALUE&PUSH 23)                  ; X
495   (CALL2&JMPIFNOT 21 L500)            ; E>
498   (T&STORE 10)
500   L500
500   (UNBIND1)
501   (SKIP 1)
503   (LOAD&CDR&STORE 0)
505   L505
505   (LOAD&PUSH 0)
506   (CALLS1&JMPIFNOT 146 L487)          ; ENDP
509   (SKIP 2)
511   (LOAD&PUSH 7)
512   (GETVALUE&PUSH 1)                   ; TEMP
514   (CALL2 24)                          ; TSTIMES-GET-PW
516   (LOAD&PUSH 6)
517   (LOAD&PUSH 9)
518   (GETVALUE&PUSH 1)                   ; TEMP
520   (CALL2&PUSH 24)                     ; TSTIMES-GET-PW
522   (CALL2 24)                          ; TSTIMES-GET-PW
524   (STORE 5)
525   (LOAD&JMPIF 8 L348)
529   (LOAD&JMPIF 4 L348)
533   (CONST&PUSH 30)                     ; CADR
535   (LOAD&PUSH 7)
536   (CALLSR&PUSH 0 22)                  ; MAPCAR
539   (CONST&PUSH 30)                     ; CADR
541   (LOAD&PUSH 9)
542   (CALLSR&PUSH 0 22)                  ; MAPCAR
545   (CONST&PUSH 30)                     ; CADR
547   (LOAD&PUSH 11)
548   (CALLSR&PUSH 0 22)                  ; MAPCAR
551   (CALLSR&STORE 3 35 6)               ; NCONC
555   L555
555   (LOAD&PUSH 6)
556   (CALL1 31)                          ; TSTIMES-L-MULT
558   (STORE 6)
559   (LOAD&JMPIFNOT 0 L474)
563   (LOAD&JMPIFNOT 6 L478)
567   (LOAD&PUSH 0)
568   (LOAD&PUSH 7)
569   (CALL2 19)                          ; PSTIMES
571   L571
571   (BIND 32)                           ; ANS
573   (GETVALUE 33)                       ; $MAXTAYORDER
575   (JMPIF L482)
578   (GETVALUE&PUSH 32)                  ; ANS
580   (CALL1 34)                          ; PSTRUNC
582   L582
582   (UNBIND1)
583   (SKIP 1)
585   (UNBIND1)
586   (SKIP 7)
588   L588
588   (UNBIND1)
589   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TSEXP-COMB (L) ...)-206|
(CONST 0) = TSEXP-COMB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSEXP-COMB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSEXP-COMB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSEXP-COMB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSEXP-COMB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSEXP-COMB
8     (SKIP&RET 1)


Disassembly of function TSEXP-COMB
(CONST 0) = L
(CONST 1) = *
(CONST 2) = A
(CONST 3) = E
(CONST 4) = $RATSIMP
(CONST 5) = 0
(CONST 6) = TVARS
(CONST 7) = MFREE
(CONST 8) = B
(CONST 9) = N
(CONST 10) = DIV*
(CONST 11) = (MEXPT SIMP)
(CONST 12) = POWER*
(CONST 13) = MUL*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TVARS E N B A L)
writes special variables : (B N E A L)
123 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&PUSH 1)                      ; *
4     (GETVALUE 0)                        ; L
6     (CONS)
7     (SETVALUE 0)                        ; L
9     (BIND 2)                            ; A
11    (NIL)
12    (BIND 3)                            ; E
14    (JMP L73)
16    L16
16    (GETVALUE&PUSH 2)                   ; A
18    (GETVALUE 2)                        ; A
20    (CDR)
21    (CDR&PUSH)
22    (CALLS1 170)                        ; RPLACD
24    (JMP L73)
26    L26
26    (GETVALUE&PUSH 8)                   ; B
28    (CONST&PUSH 11)                     ; (MEXPT SIMP)
29    (GETVALUE 2)                        ; A
31    (CDR)
32    (CAR)
33    (CDR)
34    (CAR&PUSH)
35    (GETVALUE 8)                        ; B
37    (CAR)
38    (CDR)
39    (CAR&PUSH)
40    (GETVALUE&PUSH 9)                   ; N
42    (CALL2&PUSH 12)                     ; POWER*
44    (CALL2&PUSH 13)                     ; MUL*
46    (GETVALUE 2)                        ; A
48    (CDR)
49    (CAR)
50    (CDR)
51    (CDR)
52    (CAR&PUSH)
53    (LIST&PUSH 3)
55    (CALLS1 168)                        ; RPLACA
57    (GETVALUE&PUSH 2)                   ; A
59    (GETVALUE 2)                        ; A
61    (CDR)
62    (CDR&PUSH)
63    (CALLS1 170)                        ; RPLACD
65    (JMP L171)
68    L68
68    (GETVALUE 2)                        ; A
70    (CDR)
71    (SETVALUE 2)                        ; A
73    L73
73    (GETVALUE 2)                        ; A
75    (CDR)
76    (CDR)
77    (JMPIFNOT L176)
80    (GETVALUE 2)                        ; A
82    (CDR)
83    (CAR)
84    (CDR)
85    (CDR&PUSH)
86    (GETVALUE 2)                        ; A
88    (CDR)
89    (CAR)
90    (CDR)
91    (CDR)
92    (CAR&PUSH)
93    (CALL1 4)                           ; $RATSIMP
95    (SETVALUE 3)                        ; E
97    (PUSH)
98    (CALLS1 168)                        ; RPLACA
100   (GETVALUE&PUSH 3)                   ; E
102   (JMPIFEQTO 5 L16)                   ; 0
106   (GETVALUE 2)                        ; A
108   (CDR)
109   (CAR)
110   (CDR)
111   (CDR)
112   (CAR&PUSH)
113   (GETVALUE&PUSH 6)                   ; TVARS
115   (CALL2&JMPIF 7 L68)                 ; MFREE
118   (GETVALUE 2)                        ; A
120   (CDR)
121   (CDR)
122   (BIND 8)                            ; B
124   (NIL)
125   (BIND 9)                            ; N
127   (GETVALUE 8)                        ; B
129   (JMPIFNOT L166)
131   L131
131   (GETVALUE 8)                        ; B
133   (CAR)
134   (CDR)
135   (CDR)
136   (CAR&PUSH)
137   (GETVALUE 2)                        ; A
139   (CDR)
140   (CAR)
141   (CDR)
142   (CDR)
143   (CAR&PUSH)
144   (CALL2&PUSH 10)                     ; DIV*
146   (CALL1 4)                           ; $RATSIMP
148   (SETVALUE 9)                        ; N
150   (PUSH)
151   (GETVALUE&PUSH 6)                   ; TVARS
153   (CALL2&JMPIF 7 L26)                 ; MFREE
157   (GETVALUE 8)                        ; B
159   (CDR)
160   (SETVALUE 8)                        ; B
162   (GETVALUE 8)                        ; B
164   (JMPIF L131)
166   L166
166   (GETVALUE 2)                        ; A
168   (CDR)
169   (SETVALUE 2)                        ; A
171   L171
171   (UNBIND 2)
173   (JMP L73)
176   L176
176   (GETVALUE 0)                        ; L
178   (CDR)
179   (UNBIND 3)
181   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TSBASE-COMB (L) ...)-207|
(CONST 0) = TSBASE-COMB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSBASE-COMB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSBASE-COMB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSBASE-COMB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSBASE-COMB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSBASE-COMB
8     (SKIP&RET 1)


Disassembly of function TSBASE-COMB
(CONST 0) = L
(CONST 1) = *
(CONST 2) = A
(CONST 3) = B
(CONST 4) = ALIKE1
(CONST 5) = ADD*
(CONST 6) = POWER*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A B L)
writes special variables : (A B L)
72 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&PUSH 1)                      ; *
4     (GETVALUE 0)                        ; L
6     (CONS)
7     (SETVALUE 0)                        ; L
9     (BIND 2)                            ; A
11    (JMP L90)
14    L14
14    (GETVALUE&PUSH 3)                   ; B
16    (GETVALUE 3)                        ; B
18    (CAR)
19    (CDR)
20    (CAR&PUSH)
21    (GETVALUE 3)                        ; B
23    (CAR)
24    (CDR)
25    (CDR)
26    (CAR&PUSH)
27    (GETVALUE 2)                        ; A
29    (CDR)
30    (CAR)
31    (CDR)
32    (CDR)
33    (CAR&PUSH)
34    (CALL2&PUSH 5)                      ; ADD*
36    (CALL2&PUSH 6)                      ; POWER*
38    (CALLS1 168)                        ; RPLACA
40    (GETVALUE&PUSH 2)                   ; A
42    (GETVALUE 2)                        ; A
44    (CDR)
45    (CDR&PUSH)
46    (CALLS1 170)                        ; RPLACD
48    (UNBIND1)
49    (JMP L90)
51    L51
51    (GETVALUE 2)                        ; A
53    (CDR)
54    (CDR)
55    (BIND 3)                            ; B
57    (GETVALUE 3)                        ; B
59    (JMPIFNOT L84)
61    L61
61    (GETVALUE 3)                        ; B
63    (CAR)
64    (CDR)
65    (CAR&PUSH)
66    (GETVALUE 2)                        ; A
68    (CDR)
69    (CAR)
70    (CDR)
71    (CAR&PUSH)
72    (CALL2&JMPIF 4 L14)                 ; ALIKE1
75    (GETVALUE 3)                        ; B
77    (CDR)
78    (SETVALUE 3)                        ; B
80    (GETVALUE 3)                        ; B
82    (JMPIF L61)
84    L84
84    (GETVALUE 2)                        ; A
86    (CDR)
87    (SETVALUE 2)                        ; A
89    (UNBIND1)
90    L90
90    (GETVALUE 2)                        ; A
92    (CDR)
93    (CDR)
94    (JMPIF L51)
96    (GETVALUE 0)                        ; L
98    (CDR)
99    (UNBIND 2)
101   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TSEXPT (B E) ...)-208|
(CONST 0) = TSEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSEXPT
8     (SKIP&RET 1)


Disassembly of function TSEXPT
(CONST 0) = B
(CONST 1) = E
(CONST 2) = MNUMP
(CONST 3) = TLIST
(CONST 4) = ZL-ASSOC
(CONST 5) = VAR-EXPAND
(CONST 6) = POWER*
(CONST 7) = PREP1
(CONST 8) = TVARS
(CONST 9) = MFREE
(CONST 10) = TSEXPT1
(CONST 11) = $%E
(CONST 12) = TSEXPT-RED
(CONST 13) = (%LOG)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST TVARS E B)
49 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (LOAD 4)
4     (BIND 1)                            ; E
6     (GETVALUE 0)                        ; B
8     (JMPIFCONSP L15)
10    (GETVALUE&PUSH 1)                   ; E
12    (CALL1&JMPIF 2 L53)                 ; MNUMP
15    L15
15    (GETVALUE&PUSH 1)                   ; E
17    (GETVALUE&PUSH 8)                   ; TVARS
19    (CALL2&JMPIF 9 L70)                 ; MFREE
22    (GETVALUE&PUSH 0)                   ; B
24    (JMPIFEQTO 11 L78)                  ; $%E
27    (CONST&PUSH 13)                     ; (%LOG)
28    (GETVALUE&PUSH 0)                   ; B
30    (LIST&PUSH 2)
32    (GETVALUE&PUSH 1)                   ; E
34    (LIST 2)
36    L36
36    (PUSH)
37    (CALL1 12)                          ; TSEXPT-RED
39    L39
39    (UNBIND 2)
41    (SKIP&RET 3)
43    L43
43    (GETVALUE&PUSH 0)                   ; B
45    (GETVALUE&PUSH 1)                   ; E
47    (NIL&PUSH)
48    (CALL 3 5)                          ; VAR-EXPAND
51    (JMP L39)
53    L53
53    (GETVALUE&PUSH 0)                   ; B
55    (GETVALUE&PUSH 3)                   ; TLIST
57    (CALL2&JMPIF 4 L43)                 ; ZL-ASSOC
60    (GETVALUE&PUSH 0)                   ; B
62    (GETVALUE&PUSH 1)                   ; E
64    (CALL2&PUSH 6)                      ; POWER*
66    (CALL1 7)                           ; PREP1
68    (JMP L39)
70    L70
70    (GETVALUE&PUSH 0)                   ; B
72    (GETVALUE&PUSH 1)                   ; E
74    (CALL2 10)                          ; TSEXPT1
76    (JMP L39)
78    L78
78    (GETVALUE&PUSH 1)                   ; E
80    (LIST 1)
82    (JMP L36)


Disassembly of function #:|(DEFUN TSEXPT-RED (L) ...)-209|
(CONST 0) = TSEXPT-RED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSEXPT-RED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSEXPT-RED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSEXPT-RED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSEXPT-RED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSEXPT-RED
8     (SKIP&RET 1)


Disassembly of function TSEXPT-RED
(CONST 0) = L
(CONST 1) = FULL-LOG
(CONST 2) = $LOGARC
(CONST 3) = E
(CONST 4) = ((MTIMES) $%I $%PI)
(CONST 5) = LOG-1
(CONST 6) = ((MTIMES) ((RAT) 1 2) $%I $%PI)
(CONST 7) = LOG%I
(CONST 8) = MTIMESP
(CONST 9) = TVARS
(CONST 10) = MFREE
(CONST 11) = %LOG
(CONST 12) = MULN
(CONST 13) = TSEXPT1
(CONST 14) = *PSACIRC
(CONST 15) = MEMQ
(CONST 16) = SIMPLIFYA
(CONST 17) = TLIST
(CONST 18) = D
(CONST 19) = (1 . 1)
(CONST 20) = EMAX
(CONST 21) = PUSH-PW
(CONST 22) = TAYLOR2
(CONST 23) = POP-PW
(CONST 24) = PS
(CONST 25) = (0 . 1)
(CONST 26) = PSTERM
(CONST 27) = PSEXPT-FN
(CONST 28) = ORD-VECTOR
(CONST 29) = EDIFF
(CONST 30) = PSDIFF
(CONST 31) = PSTIMES
(CONST 32) = PSTRUNC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D TLIST *PSACIRC TVARS L)
writes special variable : (L)
251 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 2)
5     (NIL)
6     (BIND 1)                            ; FULL-LOG
8     (T)
9     (BIND 2)                            ; $LOGARC
11    (PUSH-NIL 2)
13    (NIL)
14    (BIND 3)                            ; E
16    (CONST 4)                           ; ((MTIMES) $%I $%PI)
17    (BIND 5)                            ; LOG-1
19    (CONST 6)                           ; ((MTIMES) ((RAT) 1 2) $%I $%PI)
20    (BIND 7)                            ; LOG%I
22    (JMP L81)
24    L24
24    (GETVALUE&PUSH 0)                   ; L
26    (GETVALUE 0)                        ; L
28    (CAR)
29    (CDR&PUSH)
30    (CALLSR 2 34)                       ; APPEND
33    (SETVALUE 0)                        ; L
35    (JMP L110)
38    L38
38    (GETVALUE 0)                        ; L
40    (CAR&PUSH)
41    (LOAD&CONS&STORE 21)
43    (JMP L110)
46    L46
46    (LOAD 17)
48    (CAR)
49    (CDR)
50    (CAR&PUSH)
51    (LOAD&PUSH 19)
52    (NIL&PUSH)
53    (CALL2&PUSH 12)                     ; MULN
55    (CALL2 13)                          ; TSEXPT1
57    (JMP L373)
60    L60
60    (LOAD 17)
62    (CAR)
63    (CAR)
64    (CAR&PUSH)
65    (NIL)
66    (CONS&PUSH)
67    (LOAD 18)
69    (CAR)
70    (CDR)
71    (CONS&PUSH)
72    (NIL&PUSH)
73    (CALL2&PUSH 16)                     ; SIMPLIFYA
75    (NIL)
76    (CONS)
77    (SETVALUE 0)                        ; L
79    (LOAD&CDR&STORE 17)
81    L81
81    (GETVALUE 0)                        ; L
83    (BIND 0)                            ; L
85    (GETVALUE 0)                        ; L
87    (JMPIFNOT L119)
89    L89
89    (GETVALUE 0)                        ; L
91    (CAR&PUSH)
92    (CALL1&JMPIF 8 L24)                 ; MTIMESP
96    (GETVALUE 0)                        ; L
98    (CAR&PUSH)
99    (GETVALUE&PUSH 9)                   ; TVARS
101   (CALL2&JMPIF 10 L38)                ; MFREE
105   (GETVALUE 0)                        ; L
107   (CAR&PUSH)
108   (LOAD&CONS&STORE 20)
110   L110
110   (GETVALUE 0)                        ; L
112   (CDR)
113   (SETVALUE 0)                        ; L
115   (GETVALUE 0)                        ; L
117   (JMPIF L89)
119   L119
119   (UNBIND1)
120   (LOAD 17)
122   (CDR)
123   (JMPIF L150)
125   (LOAD 17)
127   (CAR)
128   (JMPIFATOM L150)
130   (LOAD 17)
132   (CAR)
133   (CAR)
134   (CAR&PUSH)
135   (JMPIFEQTO 11 L46)                  ; %LOG
139   (LOAD 17)
141   (CAR)
142   (CAR)
143   (CAR&PUSH)
144   (GETVALUE&PUSH 14)                  ; *PSACIRC
146   (CALL2&JMPIF 15 L60)                ; MEMQ
150   L150
150   (GETVALUE&PUSH 17)                  ; TLIST
152   (LOAD&PUSH 0)
153   (JMP L177)
155   L155
155   (LOAD&CAR&PUSH 0)
157   (LOAD 0)
158   (BIND 18)                           ; D
160   (GETVALUE&PUSH 18)                  ; D
162   (GETVALUE 18)                       ; D
164   (CDR)
165   (CAR)
166   (CAR&PUSH)
167   (CONST&PUSH 19)                     ; (1 . 1)
168   (CALL2&PUSH 20)                     ; EMAX
170   (CALL2 21)                          ; PUSH-PW
172   (UNBIND1)
173   (SKIP 1)
175   (LOAD&CDR&STORE 0)
177   L177
177   (LOAD&PUSH 0)
178   (CALLS1&JMPIFNOT 146 L155)          ; ENDP
181   (SKIP 2)
183   (LOAD&PUSH 17)
184   (LOAD&PUSH 19)
185   (CALLSR&PUSH 2 34)                  ; APPEND
188   (NIL&PUSH)
189   (CALL2 12)                          ; MULN
191   (STORE 10)
193   (PUSH)
194   (CALL1 22)                          ; TAYLOR2
196   (STORE 9)
198   (GETVALUE&PUSH 17)                  ; TLIST
200   (LOAD&PUSH 0)
201   (JMP L230)
203   L203
203   (LOAD 9)
204   (JMP L248)
206   L206
206   (LOAD&PUSH 0)
207   (CALLS2 145)                        ; ZEROP
209   (SKIP 1)
211   (JMPIFNOT L262)
213   (JMP L329)
216   L216
216   (LOAD&CAR&PUSH 0)
218   (LOAD 0)
219   (BIND 18)                           ; D
221   (GETVALUE&PUSH 18)                  ; D
223   (CALL1 23)                          ; POP-PW
225   (UNBIND1)
226   (SKIP 1)
228   (LOAD&CDR&STORE 0)
230   L230
230   (LOAD&PUSH 0)
231   (CALLS1&JMPIFNOT 146 L216)          ; ENDP
234   (SKIP 2)
236   (LOAD&CAR&PUSH 9)
238   (JMPIFNOTEQTO 24 L203)              ; PS
241   (LOAD 9)
242   (CDR)
243   (CDR)
244   (CDR&PUSH)
245   (CONST&PUSH 25)                     ; (0 . 1)
246   (CALL2 26)                          ; PSTERM
248   L248
248   (PUSH)
249   (PUSH-NIL 2)
251   (LOAD&CAR&PUSH 2)
253   (LOAD&PUSH 0)
254   (CALLS2&JMPIF 8 L206)               ; NUMBERP
257   (SKIP 1)
259   (JMPIF L329)
262   L262
262   (LOAD&PUSH 2)
263   (CALL1 27)                          ; PSEXPT-FN
265   (STORE 1)
266   (PUSH)
267   (CALL1 28)                          ; ORD-VECTOR
269   (STORE 0)
270   (GETVALUE&PUSH 17)                  ; TLIST
272   (LOAD&PUSH 0)
273   (LOAD&PUSH 2)
274   (JMP L307)
276   L276
276   (SKIP 2)
278   (JMP L319)
280   L280
280   (LOAD&CAR&PUSH 1)
282   (LOAD 1)
283   (BIND 18)                           ; D
285   (GETVALUE&PUSH 18)                  ; D
287   (GETVALUE 18)                       ; D
289   (CDR)
290   (CAR)
291   (CAR&PUSH)
292   (LOAD&PUSH 5)
293   (CALL2&PUSH 29)                     ; EDIFF
295   (CONST&PUSH 25)                     ; (0 . 1)
296   (CALL2&PUSH 20)                     ; EMAX
298   (CALL2 21)                          ; PUSH-PW
300   (UNBIND1)
301   (SKIP 2)
303   (LOAD&CDR&STORE 1)
305   (LOAD&CDR&STORE 0)
307   L307
307   (LOAD&PUSH 1)
308   (CALLS1&JMPIF 146 L276)             ; ENDP
311   (LOAD&CAR&PUSH 1)
313   (LOAD&PUSH 1)
314   (CALLS1&JMPIFNOT 146 L280)          ; ENDP
317   (SKIP 3)
319   L319
319   (SKIP 1)
321   (LOAD&PUSH 13)
322   (CALL1&PUSH 22)                     ; TAYLOR2
324   (LOAD&PUSH 3)
325   (CALL2 30)                          ; PSDIFF
327   (STORE 12)
329   L329
329   (LOAD&PUSH 12)
330   (CALL1 27)                          ; PSEXPT-FN
332   (STORE 12)
334   (LOAD&JMPIFNOT 1 L368)
337   (GETVALUE&PUSH 17)                  ; TLIST
339   (LOAD&PUSH 0)
340   (JMP L356)
342   L342
342   (LOAD&CAR&PUSH 0)
344   (LOAD 0)
345   (BIND 18)                           ; D
347   (GETVALUE&PUSH 18)                  ; D
349   (CALL1 23)                          ; POP-PW
351   (UNBIND1)
352   (SKIP 1)
354   (LOAD&CDR&STORE 0)
356   L356
356   (LOAD&PUSH 0)
357   (CALLS1&JMPIFNOT 146 L342)          ; ENDP
360   (SKIP 2)
362   (LOAD&PUSH 1)
363   (LOAD&PUSH 13)
364   (CALL2 31)                          ; PSTIMES
366   (STORE 12)
368   L368
368   (LOAD&PUSH 12)
369   (CALL1 32)                          ; PSTRUNC
371   (SKIP 3)
373   L373
373   (UNBIND 3)
375   (SKIP 2)
377   (UNBIND 2)
379   (SKIP 2)
381   (UNBIND1)
382   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TSEXPT1 (B E) ...)-210|
(CONST 0) = TSEXPT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSEXPT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSEXPT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSEXPT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSEXPT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSEXPT1
8     (SKIP&RET 1)


Disassembly of function TSEXPT1
(CONST 0) = B
(CONST 1) = E
(CONST 2) = S
(CONST 3) = MODULUS
(CONST 4) = TLIST
(CONST 5) = (0 . 1)
(CONST 6) = EMAX
(CONST 7) = PUSH-PW
(CONST 8) = TAYLOR2
(CONST 9) = POP-PW
(CONST 10) = PSFIND-S
(CONST 11) = PS
(CONST 12) = KEY-VARS
(CONST 13) = ASSQ
(CONST 14) = ZL-ASSOC
(CONST 15) = Y
(CONST 16) = X
(CONST 17) = MAXIMA-RATIONALIZE
(CONST 18) = STRIP-ZEROES
(CONST 19) = (1 . 1)
(CONST 20) = E>
(CONST 21) = GET-LEXP
(CONST 22) = (0 . 1)
(CONST 23) = RCEXPT
(CONST 24) = E*
(CONST 25) = $MAXTAYORDER
(CONST 26) = E1-
(CONST 27) = EDIFF
(CONST 28) = PSTRUNC1
(CONST 29) = D
(CONST 30) = PSEXPT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D $MAXTAYORDER S Y X B KEY-VARS E TLIST)
writes special variables : (S E)
244 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (LOAD 4)
4     (BIND 1)                            ; E
6     (NIL)
7     (BIND 2)                            ; S
9     (PUSH-NIL 3)
11    (NIL)
12    (BIND 3)                            ; MODULUS
14    (GETVALUE&PUSH 4)                   ; TLIST
16    (LOAD&PUSH 0)
17    (JMP L35)
19    L19
19    (LOAD&CAR&PUSH 0)
21    (LOAD&PUSH 0)
22    (LOAD 1)
23    (CDR)
24    (CAR)
25    (CAR&PUSH)
26    (CONST&PUSH 5)                      ; (0 . 1)
27    (CALL2&PUSH 6)                      ; EMAX
29    (CALL2 7)                           ; PUSH-PW
31    (SKIP 1)
33    (LOAD&CDR&STORE 0)
35    L35
35    (LOAD&PUSH 0)
36    (CALLS1&JMPIFNOT 146 L19)           ; ENDP
39    (SKIP 2)
41    (GETVALUE&PUSH 1)                   ; E
43    (CALL1&PUSH 8)                      ; TAYLOR2
45    (GETVALUE&PUSH 4)                   ; TLIST
47    (LOAD&PUSH 0)
48    (JMP L74)
50    L50
50    (LOAD 0)
51    (CDR)
52    (CAR)
53    (CAR&PUSH)
54    (GETVALUE&PUSH 12)                  ; KEY-VARS
56    (CALL2 13)                          ; ASSQ
58    (CDR&PUSH)
59    (GETVALUE&PUSH 4)                   ; TLIST
61    (CALL2 14)                          ; ZL-ASSOC
63    (JMP L113)
65    L65
65    (LOAD&CAR&PUSH 0)
67    (LOAD&PUSH 0)
68    (CALL1 9)                           ; POP-PW
70    (SKIP 1)
72    (LOAD&CDR&STORE 0)
74    L74
74    (LOAD&PUSH 0)
75    (CALLS1&JMPIFNOT 146 L65)           ; ENDP
78    (SKIP 2)
80    (POP)
81    (UNBIND1)
82    (SETVALUE 1)                        ; E
84    (PUSH)
85    (CALL1 10)                          ; PSFIND-S
87    (SETVALUE 2)                        ; S
89    (GETVALUE&PUSH 0)                   ; B
91    (CALL1 8)                           ; TAYLOR2
93    (STORE 0)
94    (CAR&PUSH)
95    (JMPIFEQTO 11 L50)                  ; PS
98    (LOAD&CAR&PUSH 0)
100   (LOAD&PUSH 0)
101   (CALLS2&JMPIF 8 L215)               ; NUMBERP
105   (SKIP 1)
107   (JMPIFNOT L223)
110   L110
110   (GETVALUE 4)                        ; TLIST
112   (CAR)
113   L113
113   (CDR)
114   (CAR)
115   (CAR)
116   (JMP L224)
119   L119
119   (GETVALUE&PUSH 16)                  ; X
121   (GETVALUE&PUSH 15)                  ; Y
123   (CALLS2 181)                        ; TRUNCATE
125   (JMP L260)
128   L128
128   (LOAD&PUSH 0)
129   (CALLS2 145)                        ; ZEROP
131   (SKIP 1)
133   (JMPIFNOT L283)
136   L136
136   (CONST&PUSH 19)                     ; (1 . 1)
137   (GETVALUE&PUSH 2)                   ; S
139   (CALL2&JMPIF 20 L153)               ; E>
142   (CONST&PUSH 5)                      ; (0 . 1)
143   (LOAD&PUSH 2)
144   (CALL2&JMPIFNOT 20 L161)            ; E>
147   (GETVALUE&PUSH 2)                   ; S
149   (CONST&PUSH 19)                     ; (1 . 1)
150   (CALL2&JMPIFNOT 20 L161)            ; E>
153   L153
153   (GETVALUE&PUSH 0)                   ; B
155   (NIL&PUSH)
156   (T&PUSH)
157   (CALL 3 21)                         ; GET-LEXP
160   (STORE 0)
161   L161
161   (LOAD&CAR&PUSH 0)
163   (JMPIFEQTO 11 L289)                 ; PS
167   (CONST 22)                          ; (0 . 1)
169   (STORE 2)
170   (JMP L296)
173   L173
173   (LOAD&PUSH 0)
174   (GETVALUE&PUSH 1)                   ; E
176   (CALL2 23)                          ; RCEXPT
178   (JMP L374)
181   L181
181   (CONST 5)                           ; (0 . 1)
182   (SKIP 3)
184   (UNBIND1)
185   (JMP L377)
188   L188
188   (LOAD 0)
189   (JMP L369)
192   L192
192   (GETVALUE 25)                       ; $MAXTAYORDER
194   (JMPIF L188)
196   (LOAD&PUSH 0)
197   (LOAD 1)
198   (CDR)
199   (CAR)
200   (CAR&PUSH)
201   (GETVALUE 2)                        ; S
203   (CONS&PUSH)
204   (LIST&PUSH 1)
206   (CALL2 28)                          ; PSTRUNC1
208   (JMP L369)
211   L211
211   (LOAD 0)
212   (JMP L369)
215   L215
215   (LOAD&PUSH 0)
216   (CALLS2 145)                        ; ZEROP
218   (SKIP 1)
220   (JMPIF L110)
223   L223
223   (CONST 5)                           ; (0 . 1)
224   L224
224   (STORE 1)
225   (GETVALUE 2)                        ; S
227   (CAR&PUSH)
228   (CALLS2&JMPIFNOT 15 L267)           ; FLOATP
231   (GETVALUE 2)                        ; S
233   (CAR&PUSH)
234   (GETVALUE 2)                        ; S
236   (CDR)
237   (BIND 15)                           ; Y
239   (LOAD 3)
240   (BIND 16)                           ; X
242   (GETVALUE&PUSH 16)                  ; X
244   (CALLS2&JMPIFNOT 12 L253)           ; INTEGERP
247   (GETVALUE&PUSH 15)                  ; Y
249   (CALLS2&JMPIF 12 L119)              ; INTEGERP
253   L253
253   (GETVALUE&PUSH 16)                  ; X
255   (GETVALUE&PUSH 15)                  ; Y
257   (CALLSR 1 56)                       ; /
260   L260
260   (UNBIND 2)
262   (STORE 0)
263   (CALL1 17)                          ; MAXIMA-RATIONALIZE
265   (SETVALUE 2)                        ; S
267   L267
267   (LOAD&PUSH 0)
268   (T&PUSH)
269   (CALL2 18)                          ; STRIP-ZEROES
271   (STORE 0)
272   (CAR&PUSH)
273   (LOAD&PUSH 0)
274   (CALLS2&JMPIF 8 L128)               ; NUMBERP
278   (SKIP 1)
280   (JMPIF L136)
283   L283
283   (LOAD&CAR&PUSH 0)
285   (JMPIFNOTEQTO 11 L173)              ; PS
289   L289
289   (LOAD 0)
290   (CDR)
291   (CDR)
292   (CDR)
293   (CAR)
294   (CAR)
295   (STORE 2)
296   L296
296   (GETVALUE&PUSH 2)                   ; S
298   (LOAD&PUSH 3)
299   (CALL2&PUSH 24)                     ; E*
301   (LOAD&PUSH 2)
302   (CALL2&JMPIFNOT 20 L310)            ; E>
305   (GETVALUE 25)                       ; $MAXTAYORDER
307   (JMPIFNOT L181)
310   L310
310   (LOAD&PUSH 1)
311   (LOAD&PUSH 3)
312   (GETVALUE&PUSH 2)                   ; S
314   (CALL1&PUSH 26)                     ; E1-
316   (CALL2&PUSH 24)                     ; E*
318   (CALL2 27)                          ; EDIFF
320   (SETVALUE 2)                        ; S
322   (LOAD&PUSH 1)
323   (GETVALUE&PUSH 2)                   ; S
325   (CALL2&JMPIF 20 L192)               ; E>
329   (LOAD&CAR&PUSH 0)
331   (JMPIFNOTEQTO 11 L211)              ; PS
335   (LOAD 0)
336   (CDR)
337   (CAR)
338   (CAR&PUSH)
339   (GETVALUE&PUSH 12)                  ; KEY-VARS
341   (CALL2 13)                          ; ASSQ
343   (CDR&PUSH)
344   (GETVALUE&PUSH 4)                   ; TLIST
346   (CALL2 14)                          ; ZL-ASSOC
348   (BIND 29)                           ; D
350   (GETVALUE&PUSH 29)                  ; D
352   (GETVALUE&PUSH 2)                   ; S
354   (CALL2 7)                           ; PUSH-PW
356   (GETVALUE&PUSH 0)                   ; B
358   (CALL1&PUSH 8)                      ; TAYLOR2
360   (T&PUSH)
361   (CALL2&PUSH 18)                     ; STRIP-ZEROES
363   (GETVALUE&PUSH 29)                  ; D
365   (CALL1 9)                           ; POP-PW
367   (POP)
368   (UNBIND1)
369   L369
369   (PUSH)
370   (GETVALUE&PUSH 1)                   ; E
372   (CALL2 30)                          ; PSEXPT
374   L374
374   (SKIP 3)
376   (UNBIND1)
377   L377
377   (UNBIND 2)
379   (SKIP&RET 3)


Disassembly of function #:|(DEFUN INCREMENT-TRUNCS (PS) ...)-211|
(CONST 0) = INCREMENT-TRUNCS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INCREMENT-TRUNCS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INCREMENT-TRUNCS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INCREMENT-TRUNCS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INCREMENT-TRUNCS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INCREMENT-TRUNCS
8     (SKIP&RET 1)


Disassembly of function INCREMENT-TRUNCS
(CONST 0) = KEY-VARS
(CONST 1) = ASSQ
(CONST 2) = TLIST
(CONST 3) = ZL-ASSOC
(CONST 4) = PS
(CONST 5) = (0 . 1)
(CONST 6) = E>
(CONST 7) = (2 . 1)
(CONST 8) = E+
(CONST 9) = E*
(CONST 10) = PUSH-PW
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST KEY-VARS)
73 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOAD 2)
2     (CDR)
3     (CAR)
4     (CAR&PUSH)
5     (GETVALUE&PUSH 0)                   ; KEY-VARS
7     (CALL2 1)                           ; ASSQ
9     (CDR&PUSH)
10    (GETVALUE&PUSH 2)                   ; TLIST
12    (CALL2 3)                           ; ZL-ASSOC
14    (CDR)
15    (CAR)
16    (CAR&PUSH)
17    (NIL&PUSH)
18    (JMP L83)
20    L20
20    (LOAD 2)
21    (CDR)
22    (CDR)
23    (CDR)
24    (CAR)
25    (CAR&PUSH)
26    (CONST&PUSH 5)                      ; (0 . 1)
27    (CALL2&JMPIFNOT 6 L76)              ; E>
30    (LOAD 2)
31    (CDR)
32    (CAR)
33    (CAR&PUSH)
34    (GETVALUE&PUSH 0)                   ; KEY-VARS
36    (CALL2 1)                           ; ASSQ
38    (CDR&PUSH)
39    (GETVALUE&PUSH 2)                   ; TLIST
41    (CALL2&PUSH 1)                      ; ASSQ
43    (LOAD&CONS&STORE 0)
45    (CAR&PUSH)
46    (LOAD&PUSH 2)
47    (CONST&PUSH 7)                      ; (2 . 1)
48    (CALL2&PUSH 8)                      ; E+
50    (LOAD 4)
51    (CDR)
52    (CDR)
53    (CDR)
54    (CAR)
55    (CAR&PUSH)
56    (CALL2&PUSH 9)                      ; E*
58    (LOAD 2)
59    (CAR)
60    (CDR)
61    (CAR)
62    (CAR&PUSH)
63    (CALL2&PUSH 8)                      ; E+
65    (CALL2 10)                          ; PUSH-PW
67    (LOAD&PUSH 1)
68    (LOAD 1)
69    (CAR)
70    (CDR)
71    (CAR)
72    (CAR&PUSH)
73    (CALL2 8)                           ; E+
75    (STORE 1)
76    L76
76    (LOAD 2)
77    (CDR)
78    (CDR)
79    (CDR)
80    (CAR)
81    (CDR)
82    (STORE 2)
83    L83
83    (LOAD&CAR&PUSH 2)
85    (JMPIFEQTO 4 L20)                   ; PS
89    (POP)
90    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DECREMENT-TRUNCS (DATA) ...)-212|
(CONST 0) = DECREMENT-TRUNCS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DECREMENT-TRUNCS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DECREMENT-TRUNCS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DECREMENT-TRUNCS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DECREMENT-TRUNCS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DECREMENT-TRUNCS
8     (SKIP&RET 1)


Disassembly of function DECREMENT-TRUNCS
(CONST 0) = POP-PW
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (LOAD&PUSH 1)
1     (JMP L12)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD&PUSH 0)
6     (CALL1 0)                           ; POP-PW
8     (SKIP 1)
10    (LOAD&CDR&STORE 0)
12    L12
12    (LOAD&PUSH 0)
13    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
16    (SKIP 1)
18    (LOAD 1)
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TSLOG (ARG) ...)-213|
(CONST 0) = TSLOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSLOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSLOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSLOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSLOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSLOG
8     (SKIP&RET 1)


Disassembly of function TSLOG
(CONST 0) = ARG
(CONST 1) = TAYLOR2
(CONST 2) = GET-LEXP
(CONST 3) = STRIP-ZEROES
(CONST 4) = (1 . 1)
(CONST 5) = PS
(CONST 6) = KEY-VARS
(CONST 7) = ASSQ
(CONST 8) = TLIST
(CONST 9) = ZL-ASSOC
(CONST 10) = (0 . 1)
(CONST 11) = E>
(CONST 12) = E*
(CONST 13) = E+
(CONST 14) = PUSH-PW
(CONST 15) = (2 . 1)
(CONST 16) = POP-PW
(CONST 17) = PSLOG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST KEY-VARS ARG)
131 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (GETVALUE&PUSH 0)                   ; ARG
5     (CALL1&PUSH 1)                      ; TAYLOR2
7     (NIL&PUSH)
8     (LOAD&CAR&PUSH 1)
10    (LOAD&PUSH 0)
11    (CALLS2&JMPIF 8 L36)                ; NUMBERP
14    (SKIP 1)
16    (JMPIFNOT L26)
18    L18
18    (GETVALUE&PUSH 0)                   ; ARG
20    (NIL&PUSH)
21    (T&PUSH)
22    (CALL 3 2)                          ; GET-LEXP
25    (STORE 1)
26    L26
26    (LOAD&PUSH 1)
27    (T&PUSH)
28    (CALL2 3)                           ; STRIP-ZEROES
30    (STORE 1)
31    (PUSH)
32    (CONST&PUSH 4)                      ; (1 . 1)
33    (JMP L128)
36    L36
36    (LOAD&PUSH 0)
37    (CALLS2 145)                        ; ZEROP
39    (SKIP 1)
41    (JMPIFNOT L26)
43    (JMP L18)
45    L45
45    (LOAD&CAR&PUSH 2)
47    (LOAD&PUSH 1)
48    (LOAD 3)
49    (CDR)
50    (CDR)
51    (CDR)
52    (CAR)
53    (CAR&PUSH)
54    (CALL2&PUSH 12)                     ; E*
56    (LOAD 4)
57    (CAR)
58    (CDR)
59    (CAR)
60    (CAR&PUSH)
61    (CALL2&PUSH 13)                     ; E+
63    (CALL2 14)                          ; PUSH-PW
65    (JMP L115)
67    L67
67    (LOAD&PUSH 0)
68    (CALLS2 145)                        ; ZEROP
70    (SKIP 1)
72    (JMPIFNOT L159)
75    (JMP L151)
78    L78
78    (LOAD 1)
79    (CDR)
80    (CAR)
81    (CAR&PUSH)
82    (GETVALUE&PUSH 6)                   ; KEY-VARS
84    (CALL2 7)                           ; ASSQ
86    (CDR&PUSH)
87    (GETVALUE&PUSH 8)                   ; TLIST
89    (CALL2&PUSH 9)                      ; ZL-ASSOC
91    (LOAD&CONS&STORE 2)
93    (LOAD 1)
94    (CDR)
95    (CDR)
96    (CDR)
97    (CAR)
98    (CAR&PUSH)
99    (CONST&PUSH 10)                     ; (0 . 1)
100   (CALL2&JMPIFNOT 11 L113)            ; E>
103   (LOAD 2)
104   (CAR)
105   (CDR)
106   (CAR)
107   (CAR&PUSH)
108   (CONST&PUSH 10)                     ; (0 . 1)
109   (CALL2&JMPIF 11 L45)                ; E>
113   L113
113   (LOAD&CDR&STORE 2)
115   L115
115   (LOAD 1)
116   (CDR)
117   (CDR)
118   (CDR)
119   (CAR)
120   (CDR&PUSH)
121   (LOAD&PUSH 1)
122   (CONST&PUSH 15)                     ; (2 . 1)
123   (CALL2 12)                          ; E*
125   (STORE 1)
126   (POP&STORE 1)
128   L128
128   (LOAD&CAR&PUSH 1)
130   (JMPIFEQTO 5 L78)                   ; PS
133   (LOAD&JMPIFNOT 2 L177)
136   (GETVALUE&PUSH 0)                   ; ARG
138   (CALL1 1)                           ; TAYLOR2
140   (STORE 3)
141   (CAR&PUSH)
142   (LOAD&PUSH 0)
143   (CALLS2&JMPIF 8 L67)                ; NUMBERP
147   (SKIP 1)
149   (JMPIFNOT L159)
151   L151
151   (GETVALUE&PUSH 0)                   ; ARG
153   (NIL&PUSH)
154   (T&PUSH)
155   (CALL 3 2)                          ; GET-LEXP
158   (STORE 3)
159   L159
159   (LOAD&PUSH 2)
160   (JMP L171)
162   L162
162   (LOAD&CAR&PUSH 0)
164   (LOAD&PUSH 0)
165   (CALL1 16)                          ; POP-PW
167   (SKIP 1)
169   (LOAD&CDR&STORE 0)
171   L171
171   (LOAD&PUSH 0)
172   (CALLS1&JMPIFNOT 146 L162)          ; ENDP
175   (SKIP 1)
177   L177
177   (LOAD&PUSH 3)
178   (CALL1 17)                          ; PSLOG
180   (SKIP 4)
182   (UNBIND1)
183   (SKIP&RET 2)


Disassembly of function #:|(DEFUN GET-LEXP (EXP E-START ZEROCHECK?) ...)-214|
(CONST 0) = GET-LEXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GET-LEXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GET-LEXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GET-LEXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GET-LEXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GET-LEXP
8     (SKIP&RET 1)


Disassembly of function GET-LEXP
(CONST 0) = EXP
(CONST 1) = 0
(CONST 2) = TAY-DEPTH-ERR
(CONST 3) = (0 . 1)
(CONST 4) = TLIST
(CONST 5) = D
(CONST 6) = (1 . 1)
(CONST 7) = EMAX
(CONST 8) = PUSH-PW
(CONST 9) = $TAYLORDEPTH
(CONST 10) = TAYLOR2
(CONST 11) = STRIP-ZEROES
(CONST 12) = ZEROLIST
(CONST 13) = MEMQ
(CONST 14) = POP-PW
(CONST 15) = 1
(CONST 16) = 2
(CONST 17) = E*
(CONST 18) = (2 . 1)
(CONST 19) = "~%~M~%Assumed to be zero in TAYLOR~%"
(CONST 20) = (MLABLE)
(CONST 21) = MTELL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ZEROLIST $TAYLORDEPTH D TLIST EXP)
190 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (JMPIFEQTO 1 L18)                   ; 0
8     (GETVALUE&PUSH 4)                   ; TLIST
10    (LOAD&PUSH 0)
11    (JMP L55)
13    L13
13    (CALL0 2)                           ; TAY-DEPTH-ERR
15    (JMP L303)
18    L18
18    (LOAD&JMPIF 4 L13)
21    (CONST 3)                           ; (0 . 1)
22    (JMP L303)
25    L25
25    (LOAD&CAR&PUSH 0)
27    (LOAD 0)
28    (BIND 5)                            ; D
30    (GETVALUE&PUSH 5)                   ; D
32    (LOAD&JMPIF 12 L47)
35    (GETVALUE 5)                        ; D
37    (CDR)
38    (CAR&PUSH)
39    (PUSH-UNBOUND 1)
41    (CALLS1 156)                        ; LAST
43    (CAR&PUSH)
44    (CONST&PUSH 6)                      ; (1 . 1)
45    (CALL2 7)                           ; EMAX
47    L47
47    (PUSH)
48    (CALL2 8)                           ; PUSH-PW
50    (UNBIND1)
51    (SKIP 1)
53    (LOAD&CDR&STORE 0)
55    L55
55    (LOAD&PUSH 0)
56    (CALLS1&JMPIFNOT 146 L25)           ; ENDP
59    (SKIP 2)
61    (NIL&PUSH)
62    (GETVALUE&PUSH 9)                   ; $TAYLORDEPTH
64    (CALLS2&PUSH 150)                   ; 1+
66    (JMP L247)
69    L69
69    (GETVALUE&PUSH 0)                   ; EXP
71    (CALL1&PUSH 10)                     ; TAYLOR2
73    (T&PUSH)
74    (CALL2 11)                          ; STRIP-ZEROES
76    (JMP L178)
79    L79
79    (LOAD&PUSH 0)
80    (CALLS2 145)                        ; ZEROP
82    (SKIP 1)
84    (JMPIF L190)
87    L87
87    (GETVALUE&PUSH 4)                   ; TLIST
89    (LOAD&PUSH 0)
90    (JMP L106)
92    L92
92    (LOAD&CAR&PUSH 0)
94    (LOAD 0)
95    (BIND 5)                            ; D
97    (GETVALUE&PUSH 5)                   ; D
99    (CALL1 14)                          ; POP-PW
101   (UNBIND1)
102   (SKIP 1)
104   (LOAD&CDR&STORE 0)
106   L106
106   (LOAD&PUSH 0)
107   (CALLS1&JMPIFNOT 146 L92)           ; ENDP
110   (SKIP 2)
112   (LOAD 1)
113   (SKIP 2)
115   (JMP L303)
118   L118
118   (NIL&STORE 7)
120   (CONST 16)                          ; 2
121   (STORE 0)
122   (GETVALUE&PUSH 4)                   ; TLIST
124   (LOAD&PUSH 0)
125   (JMP L161)
127   L127
127   (LOAD&CAR&PUSH 0)
129   (LOAD 0)
130   (BIND 5)                            ; D
132   (GETVALUE&PUSH 5)                   ; D
134   (GETVALUE 5)                        ; D
136   (CDR)
137   (CAR&PUSH)
138   (PUSH-UNBOUND 1)
140   (CALLS1 156)                        ; LAST
142   (CAR&PUSH)
143   (GETVALUE 5)                        ; D
145   (CDR)
146   (CAR)
147   (CAR&PUSH)
148   (CALL2&PUSH 17)                     ; E*
150   (GETVALUE&PUSH 5)                   ; D
152   (CALL1 14)                          ; POP-PW
154   (CALL2 8)                           ; PUSH-PW
156   (UNBIND1)
157   (SKIP 1)
159   (LOAD&CDR&STORE 0)
161   L161
161   (LOAD&PUSH 0)
162   (CALLS1&JMPIFNOT 146 L127)          ; ENDP
165   (SKIP 2)
167   (JMP L245)
170   L170
170   (LOAD&JMPIF 6 L69)
174   (GETVALUE&PUSH 0)                   ; EXP
176   (CALL1 10)                          ; TAYLOR2
178   L178
178   (STORE 1)
179   (CAR&PUSH)
180   (LOAD&PUSH 0)
181   (CALLS2&JMPIF 8 L79)                ; NUMBERP
185   (SKIP 1)
187   (JMPIFNOT L87)
190   L190
190   (GETVALUE&PUSH 0)                   ; EXP
192   (GETVALUE&PUSH 12)                  ; ZEROLIST
194   (CALL2&JMPIF 13 L87)                ; MEMQ
198   (LOAD&PUSH 0)
199   (CONST&PUSH 15)                     ; 1
200   (CALLSR&JMPIFNOT 1 45 L208)         ; =
204   (LOAD&JMPIF 7 L118)
208   L208
208   (GETVALUE&PUSH 4)                   ; TLIST
210   (LOAD&PUSH 0)
211   (JMP L239)
213   L213
213   (LOAD&CAR&PUSH 0)
215   (LOAD 0)
216   (BIND 5)                            ; D
218   (GETVALUE&PUSH 5)                   ; D
220   (CONST&PUSH 18)                     ; (2 . 1)
221   (GETVALUE 5)                        ; D
223   (CDR)
224   (CAR)
225   (CAR&PUSH)
226   (CALL2&PUSH 17)                     ; E*
228   (GETVALUE&PUSH 5)                   ; D
230   (CALL1 14)                          ; POP-PW
232   (CALL2 8)                           ; PUSH-PW
234   (UNBIND1)
235   (SKIP 1)
237   (LOAD&CDR&STORE 0)
239   L239
239   (LOAD&PUSH 0)
240   (CALLS1&JMPIFNOT 146 L213)          ; ENDP
243   (SKIP 2)
245   L245
245   (LOAD&DEC&STORE 0)
247   L247
247   (LOAD&PUSH 0)
248   (CALLS2&JMPIFNOT 8 L170)            ; NUMBERP
252   (LOAD&PUSH 0)
253   (CALLS2&JMPIFNOT 145 L170)          ; ZEROP
257   (GETVALUE&PUSH 4)                   ; TLIST
259   (LOAD&PUSH 0)
260   (JMP L282)
262   L262
262   (CALL0 2)                           ; TAY-DEPTH-ERR
264   (SKIP 2)
266   (JMP L303)
268   L268
268   (LOAD&CAR&PUSH 0)
270   (LOAD 0)
271   (BIND 5)                            ; D
273   (GETVALUE&PUSH 5)                   ; D
275   (CALL1 14)                          ; POP-PW
277   (UNBIND1)
278   (SKIP 1)
280   (LOAD&CDR&STORE 0)
282   L282
282   (LOAD&PUSH 0)
283   (CALLS1&JMPIFNOT 146 L268)          ; ENDP
286   (SKIP 2)
288   (LOAD&JMPIF 6 L262)
291   (CONST&PUSH 19)                     ; "~%~M~%Assumed to be zero in TAYLOR~%"
292   (CONST&PUSH 20)                     ; (MLABLE)
293   (NIL&PUSH)
294   (GETVALUE&PUSH 0)                   ; EXP
296   (LIST&PUSH 3)
298   (CALL2 21)                          ; MTELL
300   (CONST 3)                           ; (0 . 1)
301   (SKIP 2)
303   L303
303   (UNBIND1)
304   (SKIP&RET 4)


Disassembly of function #:|(DEFUN \|1P\| (X) ...)-215|
(CONST 0) = |1P|
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE |1P|>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; |1P|
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; |1P|
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE |1P|>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; |1P|
8     (SKIP&RET 1)


Disassembly of function |1P|
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = 1.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST 1)                           ; 1
6     (EQ)
7     (JMPIF1 L14)
9     (GETVALUE&PUSH 0)                   ; X
11    (CONST&PUSH 2)                      ; 1.0
12    (CALLS2 1)                          ; EQL
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN [MAX-TRUNC] NIL ...)-216|
(CONST 0) = [MAX-TRUNC]
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE [MAX-TRUNC]>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; [MAX-TRUNC]
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; [MAX-TRUNC]
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE [MAX-TRUNC]>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; [MAX-TRUNC]
8     (SKIP&RET 1)


Disassembly of function [MAX-TRUNC]
(CONST 0) = TLIST
(CONST 1) = L
(CONST 2) = (0 . 1)
(CONST 3) = E>
(CONST 4) = QUOT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L TLIST)
writes special variable : (L)
35 byte-code instructions:
0     (GETVALUE 0)                        ; TLIST
2     (BIND 1)                            ; L
4     (CONST&PUSH 2)                      ; (0 . 1)
5     (GETVALUE 1)                        ; L
7     (JMPIFNOT L39)
9     L9
9     (GETVALUE 1)                        ; L
11    (CAR)
12    (CDR)
13    (CAR)
14    (CAR&PUSH)
15    (LOAD&PUSH 1)
16    (CALL2&JMPIFNOT 3 L30)              ; E>
19    (GETVALUE 1)                        ; L
21    (CAR)
22    (CDR)
23    (CAR&PUSH)
24    (PUSH-UNBOUND 1)
26    (CALLS1 156)                        ; LAST
28    (CAR)
29    (STORE 0)
30    L30
30    (GETVALUE 1)                        ; L
32    (CDR)
33    (SETVALUE 1)                        ; L
35    (GETVALUE 1)                        ; L
37    (JMPIF L9)
39    L39
39    (LOAD&CAR&PUSH 0)
41    (LOAD&CDR&PUSH 1)
43    (CALL2&PUSH 4)                      ; QUOT
45    (CALLS2 150)                        ; 1+
47    (SKIP 1)
49    (UNBIND1)
50    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TSPRSUM (F L TYPE) ...)-217|
(CONST 0) = TSPRSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSPRSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSPRSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSPRSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSPRSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSPRSUM
8     (SKIP&RET 1)


Disassembly of function TSPRSUM
(CONST 0) = F
(CONST 1) = L
(CONST 2) = TVARS
(CONST 3) = MFREE
(CONST 4) = NEWSYM
(CONST 5) = A
(CONST 6) = AA
(CONST 7) = $MAXTAYORDER
(CONST 8) = %SUM
(CONST 9) = 0
(CONST 10) = TAYLOR2
(CONST 11) = 1
(CONST 12) = [MAX-TRUNC]
(CONST 13) = 2
(CONST 14) = $TAYLORDEPTH
(CONST 15) = MAXIMA-SUBSTITUTE
(CONST 16) = ANS
(CONST 17) = M
(CONST 18) = K
(CONST 19) = ADD*
(CONST 20) = EXP-PT-ERR
(CONST 21) = |1P|
(CONST 22) = PSTIMES
(CONST 23) = PSPLUS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M K ANS AA A $TAYLORDEPTH L TVARS F)
writes special variables : (A K ANS)
143 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; F
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (GETVALUE&PUSH 0)                   ; F
8     (GETVALUE&PUSH 2)                   ; TVARS
10    (CALL2&JMPIF 3 L65)                 ; MFREE
13    (GETVALUE 1)                        ; L
15    (CAR&PUSH)
16    (NIL)
17    (CONS&PUSH)
18    (GETVALUE 1)                        ; L
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (GETVALUE 1)                        ; L
25    (CDR)
26    (CAR&PUSH)
27    (NIL)
28    (CONS&PUSH)
29    (NIL)
30    (BIND 5)                            ; A
32    (NIL)
33    (BIND 6)                            ; AA
35    (NIL)
36    (BIND 7)                            ; $MAXTAYORDER
38    (LOAD&CAR&PUSH 9)
40    (CALLS2&JMPIFNOT 8 L75)             ; NUMBERP
43    (LOAD&PUSH 10)
44    (CALLS2&JMPIFNOT 8 L75)             ; NUMBERP
47    (LOAD&CAR&PUSH 9)
49    (LOAD&PUSH 11)
50    (CALLSR&JMPIFNOT 1 48 L75)          ; >
54    (LOAD&PUSH 19)
55    (JMPIFEQTO 8 L72)                   ; %SUM
58    (CONST 11)                          ; 1
59    L59
59    (PUSH)
60    (CALL1 10)                          ; TAYLOR2
62    (JMP L240)
65    L65
65    (GETVALUE&PUSH 0)                   ; F
67    (CALL1 4)                           ; NEWSYM
69    (JMP L244)
72    L72
72    (CONST 9)                           ; 0
73    (JMP L59)
75    L75
75    (LOAD&PUSH 19)
76    (JMPIFNOTEQTO 8 L81)                ; %SUM
79    (NIL&STORE 19)
81    L81
81    (CALL0 12)                          ; [MAX-TRUNC]
83    (PUSH)
84    (CONST&PUSH 13)                     ; 2
85    (GETVALUE&PUSH 14)                  ; $TAYLORDEPTH
87    (CALLS2&PUSH 154)                   ; EXPT
89    (CALLSR&PUSH 2 55)                  ; *
92    (CONST&PUSH 9)                      ; 0
93    (LOAD&CAR&PUSH 11)
95    (LOAD&CAR&PUSH 14)
97    (GETVALUE&PUSH 0)                   ; F
99    (CALL&PUSH 3 15)                    ; MAXIMA-SUBSTITUTE
102   (CALL1 10)                          ; TAYLOR2
104   (BIND 16)                           ; ANS
106   (LOAD 4)
107   (BIND 17)                           ; M
109   (LOAD 6)
110   (BIND 18)                           ; K
112   (JMP L170)
114   L114
114   (CALL0 20)                          ; EXP-PT-ERR
116   (LOAD&JMPIFNOT 30 L210)
120   L120
120   (GETVALUE 5)                        ; A
122   (CAR&PUSH)
123   (CALL1&JMPIFNOT 21 L138)            ; |1P|
126   (GETVALUE 5)                        ; A
128   (CDR&PUSH)
129   (CALL1&JMPIFNOT 21 L138)            ; |1P|
132   (GETVALUE&PUSH 6)                   ; AA
134   (CALL1&JMPIFNOT 21 L234)            ; |1P|
138   L138
138   (GETVALUE&PUSH 5)                   ; A
140   (GETVALUE&PUSH 16)                  ; ANS
142   (CALL2 22)                          ; PSTIMES
144   (SETVALUE 16)                       ; ANS
146   (JMP L164)
148   L148
148   (LOAD&PUSH 0)
149   (CALLS2 145)                        ; ZEROP
151   (SKIP 1)
153   (JMPIF L223)
156   L156
156   (GETVALUE&PUSH 16)                  ; ANS
158   (GETVALUE&PUSH 5)                   ; A
160   (CALL2 23)                          ; PSPLUS
162   (SETVALUE 16)                       ; ANS
164   L164
164   (GETVALUE&PUSH 18)                  ; K
166   (CALLS2 150)                        ; 1+
168   (SETVALUE 18)                       ; K
170   L170
170   (LOAD&PUSH 21)
171   (LOAD&CAR&PUSH 21)
173   (CALLS2&JMPIF 2 L234)               ; EQUAL
176   (LOAD&PUSH 20)
177   (CONST&PUSH 11)                     ; 1
178   (LOAD&CAR&PUSH 22)
180   (CALL2&PUSH 19)                     ; ADD*
182   (CALLS1 168)                        ; RPLACA
184   (GETVALUE&PUSH 18)                  ; K
186   (GETVALUE&PUSH 17)                  ; M
188   (CALLSR&JMPIF 1 48 L114)            ; >
193   (LOAD&CAR&PUSH 20)
195   (LOAD&CAR&PUSH 23)
197   (GETVALUE&PUSH 0)                   ; F
199   (CALL&PUSH 3 15)                    ; MAXIMA-SUBSTITUTE
202   (CALL1 10)                          ; TAYLOR2
204   (SETVALUE 5)                        ; A
206   (LOAD&JMPIF 30 L120)
210   L210
210   (GETVALUE 5)                        ; A
212   (CAR&PUSH)
213   (LOAD&PUSH 0)
214   (CALLS2&JMPIF 8 L148)               ; NUMBERP
218   (SKIP 1)
220   (JMPIFNOT L156)
223   L223
223   (GETVALUE&PUSH 6)                   ; AA
225   (CALLS2&JMPIFNOT 8 L234)            ; NUMBERP
228   (GETVALUE&PUSH 6)                   ; AA
230   (CALLS2&JMPIF 145 L156)             ; ZEROP
234   L234
234   (GETVALUE 16)                       ; ANS
236   (UNBIND 3)
238   (SKIP 2)
240   L240
240   (UNBIND 3)
242   (SKIP 3)
244   L244
244   (UNBIND 2)
246   (SKIP&RET 4)


Disassembly of function #:|(DEFUN TSDIFF (E L CHECK) ...)-218|
(CONST 0) = TSDIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TSDIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSDIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TSDIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TSDIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TSDIFF
8     (SKIP&RET 1)


Disassembly of function TSDIFF
(CONST 0) = E
(CONST 1) = L
(CONST 2) = N
(CONST 3) = V
(CONST 4) = TLIST
(CONST 5) = ASSQ
(CONST 6) = PREP1
(CONST 7) = ($DIFF)
(CONST 8) = MEVAL
(CONST 9) = X
(CONST 10) = ZL-ASSOC
(CONST 11) = E+
(CONST 12) = PUSH-PW
(CONST 13) = TAYLOR2
(CONST 14) = POP-PW
(CONST 15) = 1
(CONST 16) = GENVAR
(CONST 17) = VARLIST
(CONST 18) = A
(CONST 19) = B
(CONST 20) = SDIFF
(CONST 21) = DIFF
(CONST 22) = PUTPROP
(CONST 23) = PSDP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A VARLIST GENVAR X V E N TLIST L)
writes special variables : (V N E L)
202 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; E
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (NIL)
7     (BIND 2)                            ; N
9     (NIL)
10    (BIND 3)                            ; V
12    (NIL&PUSH)
13    (GETVALUE 1)                        ; L
15    (BIND 1)                            ; L
17    (GETVALUE 1)                        ; L
19    (JMPIFNOT L62)
21    L21
21    (GETVALUE 1)                        ; L
23    (CAR)
24    (JMPIFCONSP L41)
26    (GETVALUE 1)                        ; L
28    (CDR)
29    (CAR&PUSH)
30    (CALLS2&JMPIFNOT 8 L41)             ; NUMBERP
33    (GETVALUE 1)                        ; L
35    (CAR&PUSH)
36    (GETVALUE&PUSH 4)                   ; TLIST
38    (CALL2&JMPIF 5 L86)                 ; ASSQ
41    L41
41    (GETVALUE 1)                        ; L
43    (CAR&PUSH)
44    (GETVALUE 1)                        ; L
46    (CDR)
47    (CAR&PUSH)
48    (LOAD 5)
49    (CONS)
50    (CONS)
51    (STORE 3)
52    L52
52    (GETVALUE 1)                        ; L
54    (CDR)
55    (CDR)
56    (SETVALUE 1)                        ; L
58    (GETVALUE 1)                        ; L
60    (JMPIF L21)
62    L62
62    (UNBIND1)
63    (GETVALUE 2)                        ; N
65    (JMPIFNOT L105)
67    (LOAD&JMPIFNOT 0 L81)
70    (CONST&PUSH 7)                      ; ($DIFF)
71    (GETVALUE&PUSH 0)                   ; E
73    (GETVALUE 1)                        ; L
75    (CONS)
76    (CONS&PUSH)
77    (CALL1 8)                           ; MEVAL
79    (SETVALUE 0)                        ; E
81    L81
81    (NIL&PUSH)
82    (GETVALUE&PUSH 3)                   ; V
84    (JMP L132)
86    L86
86    (GETVALUE 1)                        ; L
88    (CDR)
89    (CAR&PUSH)
90    (GETVALUE 2)                        ; N
92    (CONS)
93    (SETVALUE 2)                        ; N
95    (GETVALUE 1)                        ; L
97    (CAR&PUSH)
98    (GETVALUE 3)                        ; V
100   (CONS)
101   (SETVALUE 3)                        ; V
103   (JMP L52)
105   L105
105   (LOAD&PUSH 14)
106   (CALL1 6)                           ; PREP1
108   (SKIP 1)
110   (JMP L315)
113   L113
113   (LOAD&CAR&PUSH 0)
115   (LOAD 0)
116   (BIND 9)                            ; X
118   (GETVALUE&PUSH 9)                   ; X
120   (GETVALUE&PUSH 4)                   ; TLIST
122   (CALL2 10)                          ; ZL-ASSOC
124   (UNBIND1)
125   (PUSH)
126   (LOAD&CONS&STORE 2)
128   (SKIP 1)
130   (LOAD&CDR&STORE 0)
132   L132
132   (LOAD&PUSH 0)
133   (CALLS1&JMPIFNOT 146 L113)          ; ENDP
136   (SKIP 1)
138   (LOAD&PUSH 0)
139   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
141   (SKIP 1)
143   (SETVALUE 1)                        ; L
145   (PUSH)
146   (LOAD&PUSH 0)
147   (GETVALUE&PUSH 2)                   ; N
149   (JMP L175)
151   L151
151   (SKIP 2)
153   (JMP L187)
155   L155
155   (LOAD&CAR&PUSH 1)
157   (LOAD&PUSH 1)
158   (LOAD 2)
159   (CDR)
160   (CAR)
161   (CAR&PUSH)
162   (LOAD&PUSH 2)
163   (CALL1&PUSH 6)                      ; PREP1
165   (CALL2&PUSH 11)                     ; E+
167   (CALL2 12)                          ; PUSH-PW
169   (SKIP 2)
171   (LOAD&CDR&STORE 1)
173   (LOAD&CDR&STORE 0)
175   L175
175   (LOAD&PUSH 1)
176   (CALLS1&JMPIF 146 L151)             ; ENDP
179   (LOAD&CAR&PUSH 1)
181   (LOAD&PUSH 1)
182   (CALLS1&JMPIFNOT 146 L155)          ; ENDP
185   (SKIP 3)
187   L187
187   (SKIP 1)
189   (GETVALUE&PUSH 0)                   ; E
191   (CALL1 13)                          ; TAYLOR2
193   (SETVALUE 0)                        ; E
195   (GETVALUE&PUSH 1)                   ; L
197   (LOAD&PUSH 0)
198   (JMP L209)
200   L200
200   (LOAD&CAR&PUSH 0)
202   (LOAD&PUSH 0)
203   (CALL1 14)                          ; POP-PW
205   (SKIP 1)
207   (LOAD&CDR&STORE 0)
209   L209
209   (LOAD&PUSH 0)
210   (CALLS1&JMPIFNOT 146 L200)          ; ENDP
213   (SKIP 2)
215   (GETVALUE&PUSH 3)                   ; V
217   (GETVALUE&PUSH 2)                   ; N
219   (LOAD&JMPIFNOT 1 L311)
223   L223
223   (CONST&PUSH 15)                     ; 1
224   (JMP L291)
227   L227
227   (GETVALUE&PUSH 16)                  ; GENVAR
229   (LOAD&PUSH 0)
230   (GETVALUE&PUSH 17)                  ; VARLIST
232   (JMP L269)
234   L234
234   (SKIP 2)
236   (JMP L281)
238   L238
238   (LOAD&CAR&PUSH 1)
240   (LOAD 1)
241   (BIND 18)                           ; A
243   (LOAD 3)
244   (BIND 19)                           ; B
246   (GETVALUE&PUSH 18)                  ; A
248   (GETVALUE&PUSH 19)                  ; B
250   (GETVALUE 3)                        ; V
252   (CAR&PUSH)
253   (CALL2&PUSH 20)                     ; SDIFF
255   (CALL1&PUSH 6)                      ; PREP1
257   (CONST&PUSH 21)                     ; DIFF
258   (CALL 3 22)                         ; PUTPROP
261   (UNBIND 2)
263   (SKIP 2)
265   (LOAD&CDR&STORE 1)
267   (LOAD&CDR&STORE 0)
269   L269
269   (LOAD&PUSH 1)
270   (CALLS1&JMPIF 146 L234)             ; ENDP
273   (LOAD&CAR&PUSH 1)
275   (LOAD&PUSH 1)
276   (CALLS1&JMPIFNOT 146 L238)          ; ENDP
279   (SKIP 3)
281   L281
281   (SKIP 1)
283   (GETVALUE&PUSH 0)                   ; E
285   (CALL1 23)                          ; PSDP
287   (SETVALUE 0)                        ; E
289   (LOAD&INC&STORE 0)
291   L291
291   (LOAD&PUSH 0)
292   (LOAD&CAR&PUSH 2)
294   (CALLSR&JMPIFNOT 1 48 L227)         ; >
299   (SKIP 1)
301   (LOAD&CDR&PUSH 1)
303   (LOAD&CDR&STORE 1)
305   (POP&STORE 1)
307   (LOAD&JMPIF 1 L223)
311   L311
311   (GETVALUE 0)                        ; E
313   (SKIP 3)
315   L315
315   (UNBIND 4)
317   (SKIP&RET 4)


Disassembly of function #:|(DEFUN NO-SING-ERR (X) ...)-219|
(CONST 0) = NO-SING-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NO-SING-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NO-SING-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NO-SING-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NO-SING-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NO-SING-ERR
8     (SKIP&RET 1)


Disassembly of function NO-SING-ERR
(CONST 0) = X
(CONST 1) = ERRORSW
(CONST 2) = ANS
(CONST 3) = UNFAM-SING-ERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T)
4     (BIND 1)                            ; ERRORSW
6     (CONST 1)                           ; ERRORSW
7     (CATCH-OPEN L14)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALLS1 91)                         ; EVAL
13    (CATCH-CLOSE)
14    L14
14    (BIND 2)                            ; ANS
16    (GETVALUE&PUSH 2)                   ; ANS
18    (T)
19    (JMPIFEQ L27)
21    (GETVALUE 2)                        ; ANS
23    L23
23    (UNBIND 3)
25    (SKIP&RET 2)
27    L27
27    (CALL0 3)                           ; UNFAM-SING-ERR
29    (JMP L23)


Disassembly of function #:|(DEFUN CHECK-INF-SING (PT-LIST) ...)-220|
(CONST 0) = CHECK-INF-SING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECK-INF-SING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECK-INF-SING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECK-INF-SING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECK-INF-SING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECK-INF-SING
8     (SKIP&RET 1)


Disassembly of function CHECK-INF-SING
(CONST 0) = $INF
(CONST 1) = MEMQ
(CONST 2) = $MINF
(CONST 3) = UNFAM-SING-ERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INF
1     (LOAD&PUSH 2)
2     (CALL2&JMPIF 1 L11)                 ; MEMQ
5     (CONST&PUSH 2)                      ; $MINF
6     (LOAD&PUSH 2)
7     (CALL2 1)                           ; MEMQ
9     (JMPIFNOT1 L15)
11    L11
11    (CALL0 3)                           ; UNFAM-SING-ERR
13    (SKIP&RET 2)
15    L15
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DIFF-EXPAND (EXP L) ...)-221|
(CONST 0) = DIFF-EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFF-EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFF-EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFF-EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFF-EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFF-EXPAND
8     (SKIP&RET 1)


Disassembly of function DIFF-EXPAND
(CONST 0) = EXP
(CONST 1) = L
(CONST 2) = #.#'CADDR
(CONST 3) = CHECK-INF-SING
(CONST 4) = SDIFF
(CONST 5) = 1
(CONST 6) = CDISREP
(CONST 7) = MEVAL
(CONST 8) = QUOTE
(CONST 9) = ($AT)
(CONST 10) = (MEQUAL)
(CONST 11) = NO-SING-ERR
(CONST 12) = ANS
(CONST 13) = VAR
(CONST 14) = COEF
(CONST 15) = GREAT
(CONST 16) = 0
(CONST 17) = (MTIMES)
(CONST 18) = (RAT SIMP)
(CONST 19) = ($AT)
(CONST 20) = (MEQUAL)
(CONST 21) = (MEXPT)
(CONST 22) = SUB*
(CONST 23) = (MPLUS)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS COEF VAR EXP L)
writes special variables : (COEF ANS EXP)
119 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (CONST&PUSH 2)                      ; #.#'CADDR
7     (GETVALUE&PUSH 1)                   ; L
9     (CALLSR&PUSH 0 22)                  ; MAPCAR
12    (CALL1 3)                           ; CHECK-INF-SING
14    (GETVALUE 1)                        ; L
16    (JMPIFNOT L94)
19    (GETVALUE&PUSH 0)                   ; EXP
21    (GETVALUE 1)                        ; L
23    (CDR&PUSH)
24    (JSR L0)
26    (SETVALUE 0)                        ; EXP
28    (PUSH)
29    (GETVALUE 1)                        ; L
31    (CAR)
32    (CAR&PUSH)
33    (CALL2&PUSH 4)                      ; SDIFF
35    (GETVALUE 1)                        ; L
37    (CAR)
38    (CAR&PUSH)
39    (CONST&PUSH 5)                      ; 1
40    (CONST&PUSH 5)                      ; 1
41    (GETVALUE 1)                        ; L
43    (CAR)
44    (CDR)
45    (CDR)
46    (CAR&PUSH)
47    (GETVALUE 1)                        ; L
49    (CAR)
50    (CDR)
51    (CAR)
52    (CAR&PUSH)
53    (CALL1&PUSH 6)                      ; CDISREP
55    (CONST&PUSH 7)                      ; MEVAL
56    (CONST&PUSH 8)                      ; QUOTE
57    (CONST&PUSH 9)                      ; ($AT)
58    (GETVALUE&PUSH 0)                   ; EXP
60    (CONST&PUSH 10)                     ; (MEQUAL)
61    (GETVALUE 1)                        ; L
63    (CAR)
64    (CAR&PUSH)
65    (GETVALUE 1)                        ; L
67    (CAR)
68    (CDR)
69    (CDR)
70    (CAR&PUSH)
71    (LIST&PUSH 3)
73    (LIST&PUSH 3)
75    (LIST&PUSH 2)
77    (LIST&PUSH 2)
79    (CALL1&PUSH 11)                     ; NO-SING-ERR
81    (LIST 1)
83    (BIND 12)                           ; ANS
85    (LOAD 7)
86    (BIND 13)                           ; VAR
88    (LOAD 9)
89    (BIND 14)                           ; COEF
91    (JMP L161)
94    L94
94    (GETVALUE 0)                        ; EXP
96    (JMP L179)
99    L99
99    (LOAD&PUSH 14)
100   (GETVALUE&PUSH 13)                  ; VAR
102   (CALL2&PUSH 4)                      ; SDIFF
104   (GETVALUE&PUSH 14)                  ; COEF
106   (LOAD&INC&PUSH 13)
108   (CALLSR&PUSH 2 55)                  ; *
111   (LOAD&INC&PUSH 13)
113   (CONST&PUSH 17)                     ; (MTIMES)
114   (CONST&PUSH 18)                     ; (RAT SIMP)
115   (CONST&PUSH 5)                      ; 1
116   (GETVALUE&PUSH 14)                  ; COEF
118   (LIST&PUSH 3)
120   (CONST&PUSH 7)                      ; MEVAL
121   (CONST&PUSH 8)                      ; QUOTE
122   (CONST&PUSH 19)                     ; ($AT)
123   (LOAD&PUSH 22)
124   (CONST&PUSH 20)                     ; (MEQUAL)
125   (GETVALUE&PUSH 13)                  ; VAR
127   (LOAD&PUSH 21)
128   (LIST&PUSH 3)
130   (LIST&PUSH 3)
132   (LIST&PUSH 2)
134   (LIST&PUSH 2)
136   (CALL1&PUSH 11)                     ; NO-SING-ERR
138   (CONST&PUSH 21)                     ; (MEXPT)
139   (GETVALUE&PUSH 13)                  ; VAR
141   (LOAD&PUSH 18)
142   (CALL2&PUSH 22)                     ; SUB*
144   (LOAD&PUSH 19)
145   (LIST&PUSH 3)
147   (LIST&PUSH 4)
149   (GETVALUE 12)                       ; ANS
151   (CONS)
152   (SETVALUE 12)                       ; ANS
154   (POP&STORE 13)
156   (POP)
157   (SETVALUE 14)                       ; COEF
159   (POP&STORE 14)
161   L161
161   (LOAD&PUSH 11)
162   (LOAD&PUSH 10)
163   (CALL2&JMPIF 15 L171)               ; GREAT
166   (LOAD&PUSH 14)
167   (JMPIFNOTEQTO 16 L99)               ; 0
171   L171
171   (CONST&PUSH 23)                     ; (MPLUS)
172   (GETVALUE 12)                       ; ANS
174   (CONS)
175   (UNBIND 3)
177   (SKIP 6)
179   L179
179   (UNBIND 2)
181   (SKIP&RET 3)


Disassembly of function #:|(DEFUN EDISREP (E) ...)-222|
(CONST 0) = EDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EDISREP
8     (SKIP&RET 1)


Disassembly of function EDISREP
(CONST 0) = E
(CONST 1) = 1
(CONST 2) = (RAT)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (CDR&PUSH)
6     (CONST&PUSH 1)                      ; 1
7     (CALLSR&JMPIF 1 45 L23)             ; =
11    (CONST&PUSH 2)                      ; (RAT)
12    (GETVALUE 0)                        ; E
14    (CAR&PUSH)
15    (GETVALUE 0)                        ; E
17    (CDR&PUSH)
18    (LIST 3)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE 0)                        ; E
25    (CAR)
26    (JMP L20)


Disassembly of function #:|(DEFUN STRIPTIMES (A) ...)-223|
(CONST 0) = STRIPTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRIPTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRIPTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRIPTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRIPTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRIPTIMES
8     (SKIP&RET 1)


Disassembly of function STRIPTIMES
(CONST 0) = A
(CONST 1) = MTIMESP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1&JMPIF 1 L15)                 ; MTIMESP
8     (GETVALUE&PUSH 0)                   ; A
10    (NIL)
11    (CONS)
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (GETVALUE 0)                        ; A
17    (CDR)
18    (JMP L12)


Disassembly of function #:|(DEFUN SRDIS (X) ...)-224|
(CONST 0) = SRDIS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRDIS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRDIS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRDIS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRDIS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRDIS
8     (SKIP&RET 1)


Disassembly of function SRDIS
(CONST 0) = X
(CONST 1) = $PSEXPAND
(CONST 2) = MRAT
(CONST 3) = SIMP
(CONST 4) = VARLIST
(CONST 5) = GENVAR
(CONST 6) = TLIST
(CONST 7) = TRUNC
(CONST 8) = $RATDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X TLIST GENVAR VARLIST)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; $PSEXPAND
6     (CONST&PUSH 2)                      ; MRAT
7     (CONST&PUSH 3)                      ; SIMP
8     (GETVALUE&PUSH 4)                   ; VARLIST
10    (GETVALUE&PUSH 5)                   ; GENVAR
12    (GETVALUE&PUSH 6)                   ; TLIST
14    (CONST&PUSH 7)                      ; TRUNC
15    (LIST&PUSH 6)
17    (GETVALUE 0)                        ; X
19    (CONS&PUSH)
20    (CALL1 8)                           ; $RATDISREP
22    (UNBIND 2)
24    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SRDISREP (R) ...)-225|
(CONST 0) = SRDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRDISREP
8     (SKIP&RET 1)


Disassembly of function SRDISREP
(CONST 0) = R
(CONST 1) = GENVAR
(CONST 2) = VARLIST
(CONST 3) = EXP
(CONST 4) = DISREP
(CONST 5) = PUTPROP
(CONST 6) = SETUP-MULTIVAR-DISREP
(CONST 7) = $PSEXPAND
(CONST 8) = $MULTI
(CONST 9) = PSDISEXPAND
(CONST 10) = PSDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PSEXPAND EXP GENVAR VARLIST R)
61 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; R
3     (GETVALUE 0)                        ; R
5     (CAR)
6     (CDR)
7     (CDR)
8     (CAR&PUSH)
9     (GETVALUE 0)                        ; R
11    (CAR)
12    (CDR)
13    (CDR)
14    (CDR)
15    (CAR)
16    (BIND 1)                            ; GENVAR
18    (LOAD 3)
19    (BIND 2)                            ; VARLIST
21    (GETVALUE&PUSH 2)                   ; VARLIST
23    (LOAD&PUSH 0)
24    (GETVALUE&PUSH 1)                   ; GENVAR
26    (JMP L58)
28    L28
28    (SKIP 2)
30    (JMP L70)
32    L32
32    (GETVALUE 0)                        ; R
34    (CDR&PUSH)
35    (CALL1 9)                           ; PSDISEXPAND
37    (JMP L86)
39    L39
39    (LOAD&CAR&PUSH 1)
41    (LOAD 1)
42    (BIND 3)                            ; EXP
44    (LOAD&PUSH 3)
45    (GETVALUE&PUSH 3)                   ; EXP
47    (CONST&PUSH 4)                      ; DISREP
48    (CALL 3 5)                          ; PUTPROP
51    (UNBIND1)
52    (SKIP 2)
54    (LOAD&CDR&STORE 1)
56    (LOAD&CDR&STORE 0)
58    L58
58    (LOAD&PUSH 1)
59    (CALLS1&JMPIF 146 L28)              ; ENDP
62    (LOAD&CAR&PUSH 1)
64    (LOAD&PUSH 1)
65    (CALLS1&JMPIFNOT 146 L39)           ; ENDP
68    (SKIP 3)
70    L70
70    (SKIP 1)
72    (GETVALUE&PUSH 0)                   ; R
74    (CALL1 6)                           ; SETUP-MULTIVAR-DISREP
76    (GETVALUE&PUSH 7)                   ; $PSEXPAND
78    (JMPIFEQTO 8 L32)                   ; $MULTI
81    (GETVALUE 0)                        ; R
83    (CDR&PUSH)
84    (CALL1 10)                          ; PSDISREP
86    L86
86    (UNBIND 2)
88    (SKIP 1)
90    (UNBIND1)
91    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSDISREP (P) ...)-226|
(CONST 0) = PSDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISREP
8     (SKIP&RET 1)


Disassembly of function PSDISREP
(CONST 0) = P
(CONST 1) = PS
(CONST 2) = DISREP
(CONST 3) = PSDISREP2
(CONST 4) = $PSEXPAND
(CONST 5) = (MPLUS TRUNC)
(CONST 6) = (MPLUS EXACT)
(CONST 7) = PSDISREP+
(CONST 8) = CDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PSEXPAND P)
44 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L19)                   ; PS
9     (GETVALUE&PUSH 0)                   ; P
11    (CALL1 8)                           ; CDISREP
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (CONST 5)                           ; (MPLUS TRUNC)
17    (JMP L56)
19    L19
19    (GETVALUE 0)                        ; P
21    (CDR)
22    (CDR)
23    (CDR&PUSH)
24    (GETVALUE 0)                        ; P
26    (CDR)
27    (CAR)
28    (CAR&PUSH)
29    (CONST&PUSH 2)                      ; DISREP
30    (PUSH-UNBOUND 1)
32    (CALLS2&PUSH 132)                   ; GET
34    (GETVALUE 0)                        ; P
36    (CDR)
37    (CDR)
38    (CAR)
39    (CAR&PUSH)
40    (CALL&PUSH 3 3)                     ; PSDISREP2
43    (GETVALUE 4)                        ; $PSEXPAND
45    (JMPIF L16)
47    (GETVALUE 0)                        ; P
49    (CDR)
50    (CDR)
51    (CAR)
52    (CAR)
53    (JMPIF L16)
55    (CONST 6)                           ; (MPLUS EXACT)
56    L56
56    (PUSH)
57    (CALL2 7)                           ; PSDISREP+
59    (JMP L13)


Disassembly of function #:|(DEFUN PSDISREP^ (N VAR) ...)-227|
(CONST 0) = PSDISREP^
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISREP^>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISREP^
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISREP^
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISREP^>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISREP^
8     (SKIP&RET 1)


Disassembly of function PSDISREP^
(CONST 0) = N
(CONST 1) = VAR
(CONST 2) = 1
(CONST 3) = (1 . 1)
(CONST 4) = PS-BMT-DISREP
(CONST 5) = MEXPTP
(CONST 6) = -1
(CONST 7) = (MEXPT RATSIMP)
(CONST 8) = EDISREP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PS-BMT-DISREP VAR N)
60 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE 0)                        ; N
8     (CAR&PUSH)
9     (LOAD&PUSH 0)
10    (CALLS2&JMPIF 8 L62)                ; NUMBERP
13    (SKIP 1)
15    (JMPIF L69)
17    L17
17    (GETVALUE 1)                        ; VAR
19    (JMPIFNOT L69)
21    (GETVALUE&PUSH 1)                   ; VAR
23    (JMPIFEQTO 2 L69)                   ; 1
26    (GETVALUE&PUSH 0)                   ; N
28    (CONST&PUSH 3)                      ; (1 . 1)
29    (CALLS2&JMPIF 2 L72)                ; EQUAL
32    (GETVALUE 4)                        ; PS-BMT-DISREP
34    (JMPIFNOT L49)
36    (GETVALUE&PUSH 1)                   ; VAR
38    (CALL1&JMPIFNOT 5 L49)              ; MEXPTP
41    (GETVALUE 1)                        ; VAR
43    (CDR)
44    (CDR)
45    (CAR&PUSH)
46    (JMPIFEQTO 6 L76)                   ; -1
49    L49
49    (CONST&PUSH 7)                      ; (MEXPT RATSIMP)
50    (GETVALUE&PUSH 1)                   ; VAR
52    (GETVALUE&PUSH 0)                   ; N
54    (CALL1&PUSH 8)                      ; EDISREP
56    (LIST 3)
58    L58
58    (UNBIND 2)
60    (SKIP&RET 3)
62    L62
62    (LOAD&PUSH 0)
63    (CALLS2 145)                        ; ZEROP
65    (SKIP 1)
67    (JMPIFNOT L17)
69    L69
69    (CONST 2)                           ; 1
70    (JMP L58)
72    L72
72    (GETVALUE 1)                        ; VAR
74    (JMP L58)
76    L76
76    (GETVALUE 0)                        ; N
78    (CAR&PUSH)
79    (CALLSR&PUSH 0 54)                  ; -
82    (GETVALUE 0)                        ; N
84    (CDR)
85    (CONS&PUSH)
86    (GETVALUE 1)                        ; VAR
88    (CDR)
89    (CAR&PUSH)
90    (JSR L0)
93    (JMP L58)


Disassembly of function #:|(DEFUN PSDISREP+ (P PLUSH &AUX ...) ...)-228|
(CONST 0) = PSDISREP+
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISREP+>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISREP+
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISREP+
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISREP+>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISREP+
8     (SKIP&RET 1)


Disassembly of function PSDISREP+
(CONST 0) = P
(CONST 1) = EXACT
(CONST 2) = MPLUSP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; P
6     (CDR)
7     (JMPIF L15)
9     (LOAD 5)
10    (CDR)
11    (CAR&PUSH)
12    (JMPIFEQTO 1 L43)                   ; EXACT
15    L15
15    (GETVALUE&PUSH 0)                   ; P
17    (PUSH-UNBOUND 1)
19    (CALLS1 156)                        ; LAST
21    (CAR)
22    (STORE 0)
23    (PUSH)
24    (CALL1&JMPIFNOT 2 L34)              ; MPLUSP
27    (LOAD&PUSH 0)
28    (LOAD&CDR&PUSH 1)
30    (CALLS2&PUSH 73)                    ; NREVERSE
32    (CALLS1 170)                        ; RPLACD
34    L34
34    (LOAD&PUSH 5)
35    (GETVALUE 0)                        ; P
37    (CONS)
38    L38
38    (SKIP 1)
40    (UNBIND1)
41    (SKIP&RET 3)
43    L43
43    (GETVALUE 0)                        ; P
45    (CAR)
46    (JMP L38)


Disassembly of function #:|(DEFUN PSDISREP* (A B) ...)-229|
(CONST 0) = PSDISREP*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISREP*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISREP*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISREP*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISREP*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISREP*
8     (SKIP&RET 1)


Disassembly of function PSDISREP*
(CONST 0) = A
(CONST 1) = B
(CONST 2) = 1
(CONST 3) = (MTIMES RATSIMP)
(CONST 4) = STRIPTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (JMPIFEQTO 2 L33)                   ; 1
11    (GETVALUE&PUSH 1)                   ; B
13    (JMPIFEQTO 2 L37)                   ; 1
16    (CONST&PUSH 3)                      ; (MTIMES RATSIMP)
17    (GETVALUE&PUSH 0)                   ; A
19    (CALL1&PUSH 4)                      ; STRIPTIMES
21    (GETVALUE&PUSH 1)                   ; B
23    (CALL1&PUSH 4)                      ; STRIPTIMES
25    (CALLSR 2 35)                       ; NCONC
28    (CONS)
29    L29
29    (UNBIND 2)
31    (SKIP&RET 3)
33    L33
33    (GETVALUE 1)                        ; B
35    (JMP L29)
37    L37
37    (GETVALUE 0)                        ; A
39    (JMP L29)


Disassembly of function #:|(DEFUN PSDISREP2 (P VAR TRUNC) ...)-230|
(CONST 0) = PSDISREP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISREP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISREP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISREP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISREP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISREP2
8     (SKIP&RET 1)


Disassembly of function PSDISREP2
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = $RATEXPAND
(CONST 3) = $PSEXPAND
(CONST 4) = PSDISREP2EXPAND
(CONST 5) = A
(CONST 6) = E>
(CONST 7) = PSDISREP
(CONST 8) = PSDISREP^
(CONST 9) = PSDISREP*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A VAR P $PSEXPAND $RATEXPAND)
writes special variables : (A P)
50 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; P
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (GETVALUE 2)                        ; $RATEXPAND
8     (JMPIF L72)
10    (GETVALUE 3)                        ; $PSEXPAND
12    (JMPIF L72)
14    (NIL)
15    (BIND 5)                            ; A
17    (GETVALUE 0)                        ; P
19    (BIND 0)                            ; P
21    (GETVALUE 0)                        ; P
23    (JMPIFNOT L64)
25    L25
25    (GETVALUE 0)                        ; P
27    (CAR)
28    (CAR&PUSH)
29    (LOAD&PUSH 14)
30    (CALL2&JMPIF 6 L64)                 ; E>
33    (GETVALUE 0)                        ; P
35    (CAR)
36    (CDR&PUSH)
37    (CALL1&PUSH 7)                      ; PSDISREP
39    (GETVALUE 0)                        ; P
41    (CAR)
42    (CAR&PUSH)
43    (GETVALUE&PUSH 1)                   ; VAR
45    (CALL2&PUSH 8)                      ; PSDISREP^
47    (CALL2&PUSH 9)                      ; PSDISREP*
49    (GETVALUE 5)                        ; A
51    (CONS&PUSH)
52    (GETVALUE 0)                        ; P
54    (CDR)
55    (SETVALUE 0)                        ; P
57    (POP)
58    (SETVALUE 5)                        ; A
60    (GETVALUE 0)                        ; P
62    (JMPIF L25)
64    L64
64    (GETVALUE 5)                        ; A
66    (UNBIND 2)
68    L68
68    (UNBIND 2)
70    (SKIP&RET 4)
72    L72
72    (GETVALUE&PUSH 0)                   ; P
74    (GETVALUE&PUSH 1)                   ; VAR
76    (CALL2 4)                           ; PSDISREP2EXPAND
78    (JMP L68)


Disassembly of function #:|(DEFUN PSDISREP2EXPAND (P VAR) ...)-231|
(CONST 0) = PSDISREP2EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISREP2EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISREP2EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISREP2EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISREP2EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISREP2EXPAND
8     (SKIP&RET 1)


Disassembly of function PSDISREP2EXPAND
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = L
(CONST 3) = PSDISREP
(CONST 4) = PSDISREP^
(CONST 5) = PSDISREP*EXPAND
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L VAR P)
writes special variables : (P L)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE 0)                        ; P
8     (BIND 0)                            ; P
10    (NIL)
11    (BIND 2)                            ; L
13    (GETVALUE 0)                        ; P
15    (JMPIFNOT L50)
17    L17
17    (GETVALUE 0)                        ; P
19    (CDR&PUSH)
20    (GETVALUE 0)                        ; P
22    (CAR)
23    (CDR&PUSH)
24    (CALL1&PUSH 3)                      ; PSDISREP
26    (GETVALUE 0)                        ; P
28    (CAR)
29    (CAR&PUSH)
30    (GETVALUE&PUSH 1)                   ; VAR
32    (CALL2&PUSH 4)                      ; PSDISREP^
34    (CALL2&PUSH 5)                      ; PSDISREP*EXPAND
36    (GETVALUE&PUSH 2)                   ; L
38    (CALLSR 2 35)                       ; NCONC
41    (SETVALUE 2)                        ; L
43    (POP)
44    (SETVALUE 0)                        ; P
46    (GETVALUE 0)                        ; P
48    (JMPIF L17)
50    L50
50    (GETVALUE 2)                        ; L
52    (UNBIND 4)
54    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSDISREP*EXPAND (A B) ...)-232|
(CONST 0) = PSDISREP*EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISREP*EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISREP*EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISREP*EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISREP*EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISREP*EXPAND
8     (SKIP&RET 1)


Disassembly of function PSDISREP*EXPAND
(CONST 0) = A
(CONST 1) = B
(CONST 2) = 1
(CONST 3) = MPLUSP
(CONST 4) = (MTIMES RATIMES)
(CONST 5) = STRIPTIMES
(CONST 6) = PSDISREP*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
50 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (JMPIFEQTO 2 L39)                   ; 1
11    (GETVALUE&PUSH 1)                   ; B
13    (JMPIFEQTO 2 L43)                   ; 1
16    (GETVALUE&PUSH 0)                   ; A
18    (CALL1&JMPIF 3 L47)                 ; MPLUSP
21    (CONST&PUSH 4)                      ; (MTIMES RATIMES)
22    (GETVALUE&PUSH 0)                   ; A
24    (CALL1&PUSH 5)                      ; STRIPTIMES
26    (GETVALUE&PUSH 1)                   ; B
28    (CALL1&PUSH 5)                      ; STRIPTIMES
30    (CALLSR 2 35)                       ; NCONC
33    (CONS)
34    L34
34    (PUSH)
35    (LIST 1)
37    (JMP L77)
39    L39
39    (GETVALUE 1)                        ; B
41    (JMP L34)
43    L43
43    (GETVALUE 0)                        ; A
45    (JMP L34)
47    L47
47    (NIL&PUSH)
48    (GETVALUE 0)                        ; A
50    (CDR&PUSH)
51    (JMP L66)
53    L53
53    (LOAD&CAR&PUSH 0)
55    (LOAD&PUSH 0)
56    (GETVALUE&PUSH 1)                   ; B
58    (CALL2&PUSH 6)                      ; PSDISREP*
60    (LOAD&CONS&STORE 2)
62    (SKIP 1)
64    (LOAD&CDR&STORE 0)
66    L66
66    (LOAD&PUSH 0)
67    (CALLS1&JMPIFNOT 146 L53)           ; ENDP
70    (SKIP 1)
72    (LOAD&PUSH 0)
73    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
75    (SKIP 1)
77    L77
77    (UNBIND 2)
79    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSDISEXPAND (P) ...)-233|
(CONST 0) = PSDISEXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISEXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISEXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISEXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISEXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISEXPAND
8     (SKIP&RET 1)


Disassembly of function PSDISEXPAND
(CONST 0) = P
(CONST 1) = ANS
(CONST 2) = (0 . 1)
(CONST 3) = PSDISEXCNT
(CONST 4) = X
(CONST 5) = (MPLUS TRUNC)
(CONST 6) = (MPLUS TRUNC)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X ANS P)
writes special variable : (ANS)
59 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (NIL)
5     (CONS)
6     (BIND 1)                            ; ANS
8     (GETVALUE&PUSH 0)                   ; P
10    (NIL&PUSH)
11    (CONST&PUSH 2)                      ; (0 . 1)
12    (CALL 3 3)                          ; PSDISEXCNT
15    (NIL&PUSH)
16    (GETVALUE 1)                        ; ANS
18    (CDR&PUSH)
19    (JMP L57)
21    L21
21    (GETVALUE 4)                        ; X
23    (CDR)
24    (CAR)
25    (JMP L49)
27    L27
27    (GETVALUE 1)                        ; ANS
29    (CAR)
30    (UNBIND1)
31    (JMP L79)
33    L33
33    (LOAD&CAR&PUSH 0)
35    (LOAD 0)
36    (BIND 4)                            ; X
38    (GETVALUE 4)                        ; X
40    (CDR)
41    (CDR)
42    (JMPIFNOT L21)
44    (CONST&PUSH 5)                      ; (MPLUS TRUNC)
45    (GETVALUE 4)                        ; X
47    (CDR)
48    (CONS)
49    L49
49    (UNBIND1)
50    (PUSH)
51    (LOAD&CONS&STORE 2)
53    (SKIP 1)
55    (LOAD&CDR&STORE 0)
57    L57
57    (LOAD&PUSH 0)
58    (CALLS1&JMPIFNOT 146 L33)           ; ENDP
61    (SKIP 1)
63    (LOAD&PUSH 0)
64    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
67    (CALLS2 73)                         ; NREVERSE
69    (SETVALUE 1)                        ; ANS
71    (CDR)
72    (JMPIFNOT L27)
74    (CONST&PUSH 6)                      ; (MPLUS TRUNC)
75    (GETVALUE 1)                        ; ANS
77    (CONS)
78    (UNBIND1)
79    L79
79    (UNBIND1)
80    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSDISEXCNT (P L N) ...)-234|
(CONST 0) = PSDISEXCNT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSDISEXCNT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSDISEXCNT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSDISEXCNT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSDISEXCNT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSDISEXCNT
8     (SKIP&RET 1)


Disassembly of function PSDISEXCNT
(CONST 0) = P
(CONST 1) = L
(CONST 2) = N
(CONST 3) = PS
(CONST 4) = DISREP
(CONST 5) = VAR
(CONST 6) = PSDISREP^
(CONST 7) = E+
(CONST 8) = CDISREP
(CONST 9) = (MTIMES TRUNC)
(CONST 10) = PSDISREP*
(CONST 11) = PSANS-ADD
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR N L P)
100 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; P
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; N
9     (GETVALUE 0)                        ; P
11    (CAR&PUSH)
12    (JMPIFEQTO 3 L62)                   ; PS
15    (GETVALUE 1)                        ; L
17    (JMPIFNOT L131)
20    (GETVALUE&PUSH 0)                   ; P
22    (CALL1&PUSH 8)                      ; CDISREP
24    (GETVALUE 1)                        ; L
26    (CDR)
27    (JMPIFNOT L138)
30    (CONST&PUSH 9)                      ; (MTIMES TRUNC)
31    (GETVALUE 1)                        ; L
33    (CONS)
34    L34
34    (PUSH)
35    (CALL2 10)                          ; PSDISREP*
37    L37
37    (PUSH)
38    (GETVALUE&PUSH 2)                   ; N
40    (CALL2 11)                          ; PSANS-ADD
42    L42
42    (UNBIND 3)
44    (SKIP&RET 4)
46    L46
46    (LOAD&PUSH 0)
47    (CALLS2 145)                        ; ZEROP
49    (SKIP 1)
51    (JMPIFNOT L95)
53    L53
53    (LOAD 3)
54    (CAR)
55    (CDR&PUSH)
56    (GETVALUE&PUSH 1)                   ; L
58    (GETVALUE 2)                        ; N
60    (JMP L115)
62    L62
62    (GETVALUE 0)                        ; P
64    (CDR)
65    (CAR)
66    (CAR&PUSH)
67    (CONST&PUSH 4)                      ; DISREP
68    (PUSH-UNBOUND 1)
70    (CALLS2&PUSH 132)                   ; GET
72    (GETVALUE 0)                        ; P
74    (CDR)
75    (CDR)
76    (CDR&PUSH)
77    (LOAD 1)
78    (BIND 5)                            ; VAR
80    (LOAD&JMPIFNOT 3 L124)
83    L83
83    (LOAD 3)
84    (CAR)
85    (CAR)
86    (CAR&PUSH)
87    (LOAD&PUSH 0)
88    (CALLS2&JMPIF 8 L46)                ; NUMBERP
91    (SKIP 1)
93    (JMPIF L53)
95    L95
95    (LOAD 3)
96    (CAR)
97    (CDR&PUSH)
98    (LOAD 4)
99    (CAR)
100   (CAR&PUSH)
101   (GETVALUE&PUSH 5)                   ; VAR
103   (CALL2&PUSH 6)                      ; PSDISREP^
105   (GETVALUE 1)                        ; L
107   (CONS&PUSH)
108   (LOAD 5)
109   (CAR)
110   (CAR&PUSH)
111   (GETVALUE&PUSH 2)                   ; N
113   (CALL2 7)                           ; E+
115   L115
115   (PUSH)
116   (JSR L0)
119   (LOAD&CDR&STORE 3)
121   (LOAD&JMPIF 3 L83)
124   L124
124   (NIL)
125   (UNBIND1)
126   (SKIP 2)
128   (JMP L42)
131   L131
131   (GETVALUE&PUSH 0)                   ; P
133   (CALL1 8)                           ; CDISREP
135   (JMP L37)
138   L138
138   (GETVALUE 1)                        ; L
140   (CAR)
141   (JMP L34)


Disassembly of function #:|(DEFUN PSANS-ADD (EXP N) ...)-235|
(CONST 0) = PSANS-ADD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSANS-ADD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSANS-ADD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSANS-ADD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSANS-ADD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSANS-ADD
8     (SKIP&RET 1)


Disassembly of function PSANS-ADD
(CONST 0) = EXP
(CONST 1) = N
(CONST 2) = ANS
(CONST 3) = L
(CONST 4) = E=
(CONST 5) = E>
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP N L ANS)
writes special variable : (L)
56 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE 2)                        ; ANS
8     (BIND 3)                            ; L
10    L10
10    (GETVALUE 3)                        ; L
12    (CDR)
13    (JMPIFNOT L55)
15    (GETVALUE 3)                        ; L
17    (CDR)
18    (CAR)
19    (CAR&PUSH)
20    (GETVALUE&PUSH 1)                   ; N
22    (CALL2&JMPIF 4 L66)                 ; E=
25    (GETVALUE 3)                        ; L
27    (CDR)
28    (CAR)
29    (CAR&PUSH)
30    (GETVALUE&PUSH 1)                   ; N
32    (CALL2&JMPIFNOT 5 L79)              ; E>
35    (GETVALUE&PUSH 3)                   ; L
37    (GETVALUE&PUSH 1)                   ; N
39    (GETVALUE&PUSH 0)                   ; EXP
41    (LIST&PUSH 2)
43    (GETVALUE 3)                        ; L
45    (CDR)
46    L46
46    (CONS&PUSH)
47    (CALLS1&JMPIFNOT 170 L79)           ; RPLACD
50    (NIL)
51    (UNBIND 3)
53    (SKIP&RET 3)
55    L55
55    (GETVALUE&PUSH 3)                   ; L
57    (GETVALUE&PUSH 1)                   ; N
59    (GETVALUE&PUSH 0)                   ; EXP
61    (LIST&PUSH 2)
63    (NIL)
64    (JMP L46)
66    L66
66    (GETVALUE 3)                        ; L
68    (CDR)
69    (CAR&PUSH)
70    (GETVALUE&PUSH 0)                   ; EXP
72    (GETVALUE 3)                        ; L
74    (CDR)
75    (CAR)
76    (CDR)
77    (JMP L46)
79    L79
79    (GETVALUE 3)                        ; L
81    (CDR)
82    (SETVALUE 3)                        ; L
84    (JMP L10)


Disassembly of function #:|(DEFUN SRCONVERT (R) ...)-236|
(CONST 0) = SRCONVERT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRCONVERT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRCONVERT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRCONVERT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRCONVERT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRCONVERT
8     (SKIP&RET 1)


Disassembly of function SRCONVERT
(CONST 0) = R
(CONST 1) = PSDISEXTEND
(CONST 2) = TRUNCLIST
(CONST 3) = TLIST
(CONST 4) = TEMP
(CONST 5) = CONS
(CONST 6) = ASSQ
(CONST 7) = MEMQ
(CONST 8) = MPLUSP
(CONST 9) = "FOO"
(CONST 10) = MERROR
(CONST 11) = TAY-ORDER
(CONST 12) = 0
(CONST 13) = MRAT
(CONST 14) = SIMP
(CONST 15) = TRUNC
(CONST 16) = SRCONVERT1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TLIST TEMP TRUNCLIST R)
writes special variables : (TLIST TEMP)
106 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; R
3     (GETVALUE 0)                        ; R
5     (CAR)
6     (CDR)
7     (CDR)
8     (CDR)
9     (CDR)
10    (CAR)
11    (CAR)
12    (JMPIFCONSP L136)
15    (GETVALUE 0)                        ; R
17    (CAR)
18    (CDR)
19    (CDR)
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (PUSH-NIL 3)
25    (GETVALUE 0)                        ; R
27    (CAR)
28    (CDR)
29    (CDR)
30    (CAR&PUSH)
31    (GETVALUE 0)                        ; R
33    (CAR)
34    (CDR)
35    (CDR)
36    (CDR)
37    (CAR&PUSH)
38    (LOAD 5)
39    (BIND 2)                            ; TRUNCLIST
41    (LOAD 7)
42    (BIND 3)                            ; TLIST
44    (LOAD 8)
45    (BIND 4)                            ; TEMP
47    (CONST&PUSH 5)                      ; CONS
48    (LOAD&PUSH 10)
49    (LOAD&PUSH 12)
50    (CALLSR&STORE 1 22 12)              ; MAPCAR
54    (GETVALUE 2)                        ; TRUNCLIST
56    (CDR&PUSH)
57    (LOAD&JMPIFNOT 0 L112)
60    L60
60    (LOAD&CAR&PUSH 0)
62    (LOAD&PUSH 14)
63    (CALL2 6)                           ; ASSQ
65    (CDR)
66    (SETVALUE 4)                        ; TEMP
68    (LOAD&CAR&PUSH 0)
70    (GETVALUE 2)                        ; TRUNCLIST
72    (CDR&PUSH)
73    (CALL2&JMPIFNOT 7 L105)             ; MEMQ
76    (GETVALUE&PUSH 4)                   ; TEMP
78    (CALL1&JMPIF 8 L147)                ; MPLUSP
82    (GETVALUE&PUSH 4)                   ; TEMP
84    (LOAD 1)
85    (CDR)
86    (CAR&PUSH)
87    (CALL1&PUSH 11)                     ; TAY-ORDER
89    (CONST&PUSH 12)                     ; 0
90    (NIL&PUSH)
91    (LOAD&CAR&PUSH 4)
93    (LOAD&CAR&PUSH 5)
95    (CALLS1 78)                         ; SYMBOL-VALUE
97    (CONS)
98    (LIST*&PUSH 4)
100   (GETVALUE 3)                        ; TLIST
102   (CONS)
103   (SETVALUE 3)                        ; TLIST
105   L105
105   (LOAD 0)
106   (CDR)
107   (CDR)
108   (STORE 0)
109   (LOAD&JMPIF 0 L60)
112   L112
112   (CONST&PUSH 13)                     ; MRAT
113   (CONST&PUSH 14)                     ; SIMP
114   (LOAD&PUSH 13)
115   (LOAD&PUSH 13)
116   (GETVALUE&PUSH 3)                   ; TLIST
118   (CONST&PUSH 15)                     ; TRUNC
119   (LIST&PUSH 6)
121   (GETVALUE 0)                        ; R
123   (CDR&PUSH)
124   (CALL1 16)                          ; SRCONVERT1
126   (CONS)
127   (SKIP 1)
129   (UNBIND 3)
131   (SKIP 6)
133   L133
133   (UNBIND1)
134   (SKIP&RET 2)
136   L136
136   (GETVALUE 0)                        ; R
138   (CAR&PUSH)
139   (GETVALUE 0)                        ; R
141   (CDR&PUSH)
142   (CALL1 1)                           ; PSDISEXTEND
144   (CONS)
145   (JMP L133)
147   L147
147   (CONST&PUSH 9)                      ; "FOO"
148   (CALL1 10)                          ; MERROR
150   (JMP L105)


Disassembly of function #:|(DEFUN SRCONVERT1 (P) ...)-237|
(CONST 0) = SRCONVERT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRCONVERT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRCONVERT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRCONVERT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRCONVERT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRCONVERT1
8     (SKIP&RET 1)


Disassembly of function SRCONVERT1
(CONST 0) = P
(CONST 1) = GENVAR
(CONST 2) = MEMQ
(CONST 3) = L
(CONST 4) = A
(CONST 5) = PREP1
(CONST 6) = PS
(CONST 7) = TRUNCLIST
(CONST 8) = OLDGET
(CONST 9) = TAY-ORDER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TRUNCLIST A L GENVAR P)
writes special variables : (L A)
57 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (GETVALUE&PUSH 1)                   ; GENVAR
8     (CALL2&JMPIFNOT 2 L81)              ; MEMQ
12    (GETVALUE 0)                        ; P
14    (CDR)
15    (BIND 3)                            ; L
17    (NIL)
18    (BIND 4)                            ; A
20    (GETVALUE 3)                        ; L
22    (JMPIFNOT L52)
24    L24
24    (GETVALUE 3)                        ; L
26    (CDR)
27    (CDR&PUSH)
28    (GETVALUE 3)                        ; L
30    (CAR&PUSH)
31    (CALL1&PUSH 5)                      ; PREP1
33    (GETVALUE 3)                        ; L
35    (CDR)
36    (CAR&PUSH)
37    (JSR L0)
39    (CONS&PUSH)
40    (GETVALUE 4)                        ; A
42    (CONS)
43    (SETVALUE 4)                        ; A
45    (POP)
46    (SETVALUE 3)                        ; L
48    (GETVALUE 3)                        ; L
50    (JMPIF L24)
52    L52
52    (CONST&PUSH 6)                      ; PS
53    (GETVALUE 0)                        ; P
55    (CAR&PUSH)
56    (GETVALUE 0)                        ; P
58    (CAR&PUSH)
59    (CALLS1 78)                         ; SYMBOL-VALUE
61    (CONS&PUSH)
62    (GETVALUE&PUSH 7)                   ; TRUNCLIST
64    (GETVALUE 0)                        ; P
66    (CAR&PUSH)
67    (CALL2&PUSH 8)                      ; OLDGET
69    (CALL1&PUSH 9)                      ; TAY-ORDER
71    (GETVALUE 4)                        ; A
73    (CONS)
74    (CONS)
75    (CONS)
76    (UNBIND 2)
78    L78
78    (UNBIND1)
79    (SKIP&RET 2)
81    L81
81    (GETVALUE 0)                        ; P
83    (JMP L78)


Disassembly of function #:|(DEFUN TAY-ERROR (MSG EXP) ...)-238|
(CONST 0) = TAY-ERROR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAY-ERROR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-ERROR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAY-ERROR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAY-ERROR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAY-ERROR
8     (SKIP&RET 1)


Disassembly of function TAY-ERROR
(CONST 0) = EXP
(CONST 1) = SILENT-TAYLOR-FLAG
(CONST 2) = TAYLOR-CATCH
(CONST 3) = "TAYLOR~A~%~%~M"
(CONST 4) = MERROR
(CONST 5) = "TAYLOR~A"
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP SILENT-TAYLOR-FLAG)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 1)                        ; SILENT-TAYLOR-FLAG
5     (JMPIF L18)
7     (GETVALUE 0)                        ; EXP
9     (JMPIF L21)
11    (CONST&PUSH 5)                      ; "TAYLOR~A"
12    (LOAD&PUSH 6)
13    (CALL2 4)                           ; MERROR
15    L15
15    (UNBIND1)
16    (SKIP&RET 3)
18    L18
18    (CONST&PUSH 2)                      ; TAYLOR-CATCH
19    (NIL)
20    (THROW)
21    L21
21    (CONST&PUSH 3)                      ; "TAYLOR~A~%~%~M"
22    (LOAD&PUSH 6)
23    (GETVALUE&PUSH 0)                   ; EXP
25    (CALL 3 4)                          ; MERROR
28    (JMP L15)


Disassembly of function #:|(DEFUN EXP-PT-ERR NIL ...)-239|
(CONST 0) = EXP-PT-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXP-PT-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXP-PT-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXP-PT-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXP-PT-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXP-PT-ERR
8     (SKIP&RET 1)


Disassembly of function EXP-PT-ERR
(CONST 0) = TAY-ERR
(CONST 1) = " unable to expand at a point specified in:"
(CONST 2) = LAST-EXP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LAST-EXP)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-ERR
1     (CONST&PUSH 1)                      ; " unable to expand at a point specified in:"
2     (GETVALUE&PUSH 2)                   ; LAST-EXP
4     (LIST 2)
6     (THROW)


Disassembly of function #:|(DEFUN ESSEN-SING-ERR NIL ...)-240|
(CONST 0) = ESSEN-SING-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ESSEN-SING-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ESSEN-SING-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ESSEN-SING-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ESSEN-SING-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ESSEN-SING-ERR
8     (SKIP&RET 1)


Disassembly of function ESSEN-SING-ERR
(CONST 0) = TAY-ERR
(CONST 1) = " encountered an essential singularity in:"
(CONST 2) = LAST-EXP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LAST-EXP)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-ERR
1     (CONST&PUSH 1)                      ; " encountered an essential singularity in:"
2     (GETVALUE&PUSH 2)                   ; LAST-EXP
4     (LIST 2)
6     (THROW)


Disassembly of function #:|(DEFUN UNFAM-SING-ERR NIL ...)-241|
(CONST 0) = UNFAM-SING-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UNFAM-SING-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UNFAM-SING-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UNFAM-SING-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UNFAM-SING-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UNFAM-SING-ERR
8     (SKIP&RET 1)


Disassembly of function UNFAM-SING-ERR
(CONST 0) = TAY-ERR
(CONST 1) = " encountered an unfamiliar singularity in:"
(CONST 2) = LAST-EXP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LAST-EXP)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-ERR
1     (CONST&PUSH 1)                      ; " encountered an unfamiliar singularity in:"
2     (GETVALUE&PUSH 2)                   ; LAST-EXP
4     (LIST 2)
6     (THROW)


Disassembly of function #:|(DEFUN INFIN-ORD-ERR NIL ...)-242|
(CONST 0) = INFIN-ORD-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INFIN-ORD-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INFIN-ORD-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INFIN-ORD-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INFIN-ORD-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INFIN-ORD-ERR
8     (SKIP&RET 1)


Disassembly of function INFIN-ORD-ERR
(CONST 0) = TAY-ERR
(CONST 1) = ": Expansion to infinite order?"
(CONST 2) = LAST-EXP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LAST-EXP)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-ERR
1     (CONST&PUSH 1)                      ; ": Expansion to infinite order?"
2     (GETVALUE&PUSH 2)                   ; LAST-EXP
4     (LIST 2)
6     (THROW)


Disassembly of function #:|(DEFUN TAY-DEPTH-ERR NIL ...)-243|
(CONST 0) = TAY-DEPTH-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAY-DEPTH-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-DEPTH-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAY-DEPTH-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAY-DEPTH-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAY-DEPTH-ERR
8     (SKIP&RET 1)


Disassembly of function TAY-DEPTH-ERR
(CONST 0) = TAY-ERR
(CONST 1) = ": TAYLORDEPTH exceeded while expanding:"
(CONST 2) = LAST-EXP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LAST-EXP)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAY-ERR
1     (CONST&PUSH 1)                      ; ": TAYLORDEPTH exceeded while expanding:"
2     (GETVALUE&PUSH 2)                   ; LAST-EXP
4     (LIST 2)
6     (THROW)


Disassembly of function #:|(DEFMFUN $TAYLORINFO (X) ...)-244|
(CONST 0) = $TAYLORINFO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TAYLORINFO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAYLORINFO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TAYLORINFO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TAYLORINFO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TAYLORINFO
8     (SKIP&RET 1)


Disassembly of function $TAYLORINFO
(CONST 0) = X
(CONST 1) = TRUNC
(CONST 2) = MEMQ
(CONST 3) = (MLIST)
(CONST 4) = (MLIST)
(CONST 5) = $INF
(CONST 6) = 1
(CONST 7) = (RAT)
(CONST 8) = W
(CONST 9) = (MEQUAL)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W X)
91 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; TRUNC
4     (GETVALUE 0)                        ; X
6     (CAR&PUSH)
7     (CALL2&JMPIFNOT 2 L23)              ; MEMQ
10    (CONST&PUSH 3)                      ; (MLIST)
11    (NIL&PUSH)
12    (GETVALUE 0)                        ; X
14    (CAR)
15    (CDR)
16    (CDR)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (JMP L114)
23    L23
23    (NIL)
24    (JMP L127)
27    L27
27    (CONST 5)                           ; $INF
28    (JMP L62)
30    L30
30    (LOAD 0)
31    (CAR)
32    (JMP L62)
34    L34
34    (LOAD&CAR&PUSH 0)
36    (CONST&PUSH 4)                      ; (MLIST)
37    (LOAD&CAR&PUSH 1)
39    (LOAD 2)
40    (CDR)
41    (CDR)
42    (CAR&PUSH)
43    (LOAD 3)
44    (CDR)
45    (CAR)
46    (CAR&PUSH)
47    (LOAD&JMPIFNOT 0 L27)
50    (LOAD&CDR&PUSH 0)
52    (JMPIFEQTO 6 L30)                   ; 1
55    (CONST&PUSH 7)                      ; (RAT)
56    (LOAD&CAR&PUSH 1)
58    (LOAD&CDR&PUSH 2)
60    (LIST 3)
62    L62
62    (STORE 0)
63    (LIST&PUSH 4)
65    (NIL&PUSH)
66    (LOAD 2)
67    (CDR)
68    (CDR)
69    (CDR)
70    (CAR&PUSH)
71    (JMP L95)
73    L73
73    (LOAD&CAR&PUSH 0)
75    (LOAD 0)
76    (BIND 8)                            ; W
78    (CONST&PUSH 9)                      ; (MEQUAL)
79    (GETVALUE 8)                        ; W
81    (CAR&PUSH)
82    (GETVALUE 8)                        ; W
84    (CDR&PUSH)
85    (LIST 3)
87    (UNBIND1)
88    (PUSH)
89    (LOAD&CONS&STORE 2)
91    (SKIP 1)
93    (LOAD&CDR&STORE 0)
95    L95
95    (LOAD&PUSH 0)
96    (CALLS1&JMPIFNOT 146 L73)           ; ENDP
99    (SKIP 1)
101   (LOAD&PUSH 0)
102   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
105   (CALLSR&PUSH 2 35)                  ; NCONC
108   (LOAD&CONS&STORE 2)
110   (SKIP 1)
112   (LOAD&CDR&STORE 0)
114   L114
114   (LOAD&PUSH 0)
115   (CALLS1&JMPIFNOT 146 L34)           ; ENDP
119   (SKIP 1)
121   (LOAD&PUSH 0)
122   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
124   (SKIP 1)
126   (CONS)
127   L127
127   (UNBIND1)
128   (SKIP&RET 2)


Wrote file binary-clisp/hayat.fas
Wrote file /cygdrive/e/temp/maxima/src/hayat.lis