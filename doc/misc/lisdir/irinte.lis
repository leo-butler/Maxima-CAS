Listing of compilation of file /cygdrive/e/temp/maxima/src/irinte.lisp
on 2002-12-17 13:35:47 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/irinte.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE IRINTE)-2|
(CONST 0) = IRINTE
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; IRINTE
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL CHECKCOEFSIGNLIST EC-1 ...))-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN HASVAR (EXP) ...)-5|
(CONST 0) = HASVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HASVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HASVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HASVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HASVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HASVAR
8     (SKIP&RET 1)


Disassembly of function HASVAR
(CONST 0) = EXP
(CONST 1) = FREEVAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1 1)                           ; FREEVAR
7     (NOT)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN ZERP (A) ...)-6|
(CONST 0) = ZERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZERP
8     (SKIP&RET 1)


Disassembly of function ZERP
(CONST 0) = A
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CONST 1)                           ; 0
6     (EQ)
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTEGERPFR (A) ...)-7|
(CONST 0) = INTEGERPFR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEGERPFR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEGERPFR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEGERPFR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEGERPFR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEGERPFR
8     (SKIP&RET 1)


Disassembly of function INTEGERPFR
(CONST 0) = A
(CONST 1) = MAXIMA-INTEGERP
(CONST 2) = INTEGERP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1 1)                           ; MAXIMA-INTEGERP
7     (NOT)
8     (JMPIFNOT1 L14)
10    (GETVALUE&PUSH 0)                   ; A
12    (CALL1 2)                           ; INTEGERP1
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NONZERP (A) ...)-8|
(CONST 0) = NONZERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NONZERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NONZERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NONZERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NONZERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NONZERP
8     (SKIP&RET 1)


Disassembly of function NONZERP
(CONST 0) = A
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CONST 1)                           ; 0
6     (EQ)
7     (NOT)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN FREEVNZ (A) ...)-9|
(CONST 0) = FREEVNZ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEVNZ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEVNZ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEVNZ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEVNZ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEVNZ
8     (SKIP&RET 1)


Disassembly of function FREEVNZ
(CONST 0) = A
(CONST 1) = FREEVAR
(CONST 2) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1 1)                           ; FREEVAR
7     (JMPIFNOT1 L14)
9     (GETVALUE&PUSH 0)                   ; A
11    (CONST 2)                           ; 0
12    (EQ)
13    (NOT)
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTE (FUNCT X) ...)-10|
(CONST 0) = INTE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTE
8     (SKIP&RET 1)


Disassembly of function INTE
(CONST 0) = X
(CONST 1) = CHECKCOEFSIGNLIST
(CONST 2) = GLOBALCAREFLAG
(CONST 3) = $RADEXPAND
(CONST 4) = INTIR-REF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : ($RADEXPAND)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; CHECKCOEFSIGNLIST
6     (NIL)
7     (BIND 2)                            ; GLOBALCAREFLAG
9     (NIL)
10    (BIND 3)                            ; $RADEXPAND
12    (T)
13    (SETVALUE 3)                        ; $RADEXPAND
15    (LOAD&PUSH 14)
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL2 4)                           ; INTIR-REF
20    (UNBIND 4)
22    (SKIP&RET 3)


Disassembly of function #:|(DEFUN INTIR-REF (FUN X) ...)-11|
(CONST 0) = INTIR-REF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIR-REF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIR-REF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIR-REF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIR-REF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIR-REF
8     (SKIP&RET 1)


Disassembly of function INTIR-REF
(CONST 0) = X
(CONST 1) = A
(CONST 2) = INTIR1
(CONST 3) = INTIR2
(CONST 4) = INTIR3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (A)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; A
6     (LOAD&PUSH 8)
7     (GETVALUE&PUSH 0)                   ; X
9     (CALL2 2)                           ; INTIR1
11    (SETVALUE 1)                        ; A
13    (JMPIF L33)
15    (LOAD&PUSH 8)
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL2 3)                           ; INTIR2
20    (SETVALUE 1)                        ; A
22    (JMPIF L36)
24    (LOAD&PUSH 8)
25    (GETVALUE&PUSH 0)                   ; X
27    (CALL2 4)                           ; INTIR3
29    (UNBIND1)
30    L30
30    (UNBIND1)
31    (SKIP&RET 3)
33    L33
33    (UNBIND1)
34    (JMP L30)
36    L36
36    (UNBIND1)
37    (JMP L30)


Disassembly of function #:|(DEFUN INTIR1 (FUN X) ...)-12|
(CONST 0) = INTIR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIR1
8     (SKIP&RET 1)


Disassembly of function INTIR1
(CONST 0) = X
(CONST 1) = D
(CONST 2) = P
(CONST 3) = SPECREPCHECK
(CONST 4) = FACTPOW
(CONST 5) = E1
(CONST 6) = CDRAS
(CONST 7) = E2
(CONST 8) = E0
(CONST 9) = R0
(CONST 10) = R1
(CONST 11) = R2
(CONST 12) = RATION1
(CONST 13) = RDIS
(CONST 14) = INTIR1-REF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P D X)
writes special variables : (P D)
86 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 7)
5     (NIL)
6     (BIND 1)                            ; D
8     (NIL)
9     (BIND 2)                            ; P
11    (LOAD&PUSH 18)
12    (CALL1&PUSH 3)                      ; SPECREPCHECK
14    (GETVALUE&PUSH 0)                   ; X
16    (CALL2 4)                           ; FACTPOW
18    (STORE 12)
20    (CONST&PUSH 5)                      ; E1
21    (LOAD&PUSH 13)
22    (CALL2 6)                           ; CDRAS
24    (STORE 9)
26    (CONST&PUSH 7)                      ; E2
27    (LOAD&PUSH 13)
28    (CALL2 6)                           ; CDRAS
30    (STORE 8)
32    (LOAD&JMPIFNOT 12 L125)
36    (CONST&PUSH 1)                      ; D
37    (LOAD&PUSH 13)
38    (CALL2 6)                           ; CDRAS
40    (SETVALUE 1)                        ; D
42    (CONST&PUSH 2)                      ; P
43    (LOAD&PUSH 13)
44    (CALL2 6)                           ; CDRAS
46    (SETVALUE 2)                        ; P
48    (CONST&PUSH 8)                      ; E0
49    (LOAD&PUSH 13)
50    (CALL2 6)                           ; CDRAS
52    (STORE 11)
54    (CONST&PUSH 9)                      ; R0
55    (LOAD&PUSH 13)
56    (CALL2 6)                           ; CDRAS
58    (STORE 10)
60    (CONST&PUSH 10)                     ; R1
61    (LOAD&PUSH 13)
62    (CALL2 6)                           ; CDRAS
64    (STORE 7)
65    (CONST&PUSH 11)                     ; R2
66    (LOAD&PUSH 13)
67    (CALL2 6)                           ; CDRAS
69    (STORE 6)
70    (LOAD&PUSH 11)
71    (CALLS2&JMPIFNOT 15 L81)            ; FLOATP
74    (LOAD&PUSH 11)
75    (CALL1&PUSH 12)                     ; RATION1
77    (CALL1 13)                          ; RDIS
79    (STORE 11)
81    L81
81    (LOAD&PUSH 9)
82    (CALLS2&JMPIFNOT 15 L92)            ; FLOATP
85    (LOAD&PUSH 9)
86    (CALL1&PUSH 12)                     ; RATION1
88    (CALL1 13)                          ; RDIS
90    (STORE 9)
92    L92
92    (LOAD&PUSH 8)
93    (CALLS2&JMPIFNOT 15 L103)           ; FLOATP
96    (LOAD&PUSH 8)
97    (CALL1&PUSH 12)                     ; RATION1
99    (CALL1 13)                          ; RDIS
101   (STORE 8)
103   L103
103   (GETVALUE&PUSH 1)                   ; D
105   (GETVALUE&PUSH 2)                   ; P
107   (LOAD&PUSH 12)
108   (LOAD&PUSH 14)
109   (LOAD&PUSH 11)
110   (LOAD&PUSH 14)
111   (LOAD&PUSH 12)
112   (LOAD&PUSH 15)
113   (GETVALUE&PUSH 0)                   ; X
115   (CALL 9 14)                         ; INTIR1-REF
118   (UNBIND 2)
120   (SKIP 7)
122   L122
122   (UNBIND1)
123   (SKIP&RET 3)
125   L125
125   (NIL)
126   (UNBIND 2)
128   (SKIP 7)
130   (JMP L122)


Disassembly of function #:|(DEFUN INTIR2 (FUNCT X) ...)-13|
(CONST 0) = INTIR2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIR2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIR2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIR2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIR2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIR2
8     (SKIP&RET 1)


Disassembly of function INTIR2
(CONST 0) = X
(CONST 1) = RES
(CONST 2) = INTIR
(CONST 3) = INTIRFACTOROOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (RES)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; RES
6     (LOAD&PUSH 8)
7     (GETVALUE&PUSH 0)                   ; X
9     (CALL2 2)                           ; INTIR
11    (SETVALUE 1)                        ; RES
13    (JMPIF L24)
15    (LOAD&PUSH 8)
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL2 3)                           ; INTIRFACTOROOT
20    (UNBIND1)
21    L21
21    (UNBIND1)
22    (SKIP&RET 3)
24    L24
24    (UNBIND1)
25    (JMP L21)


Disassembly of function #:|(DEFUN INTIR3 (EXP X) ...)-14|
(CONST 0) = INTIR3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIR3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIR3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIR3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIR3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIR3
8     (SKIP&RET 1)


Disassembly of function INTIR3
(CONST 0) = EXP
(CONST 1) = X
(CONST 2) = E
(CONST 3) = F
(CONST 4) = G
(CONST 5) = ELLIPTQUAD
(CONST 6) = CDRAS
(CONST 7) = R0
(CONST 8) = ($NOTEQUAL)
(CONST 9) = (0)
(CONST 10) = ASSUME
(CONST 11) = INTIR3-R0TEST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (G F E X EXP)
writes special variables : (G F E)
57 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; E
10    (NIL)
11    (BIND 3)                            ; F
13    (NIL)
14    (BIND 4)                            ; G
16    (NIL&PUSH)
17    (GETVALUE&PUSH 0)                   ; EXP
19    (GETVALUE&PUSH 1)                   ; X
21    (CALL2 5)                           ; ELLIPTQUAD
23    (STORE 10)
25    (JMPIF L38)
27    (NIL)
28    (SKIP 1)
30    (UNBIND 3)
32    (SKIP 1)
34    L34
34    (UNBIND 2)
36    (SKIP&RET 3)
38    L38
38    (CONST&PUSH 2)                      ; E
39    (LOAD&PUSH 11)
40    (CALL2 6)                           ; CDRAS
42    (SETVALUE 2)                        ; E
44    (CONST&PUSH 3)                      ; F
45    (LOAD&PUSH 11)
46    (CALL2 6)                           ; CDRAS
48    (SETVALUE 3)                        ; F
50    (CONST&PUSH 4)                      ; G
51    (LOAD&PUSH 11)
52    (CALL2 6)                           ; CDRAS
54    (SETVALUE 4)                        ; G
56    (CONST&PUSH 7)                      ; R0
57    (LOAD&PUSH 11)
58    (CALL2 6)                           ; CDRAS
60    (STORE 0)
61    (CONST&PUSH 8)                      ; ($NOTEQUAL)
62    (GETVALUE&PUSH 2)                   ; E
64    (CONST 9)                           ; (0)
65    (LIST*&PUSH 2)
67    (CALL1 10)                          ; ASSUME
69    (LOAD&PUSH 10)
70    (GETVALUE&PUSH 1)                   ; X
72    (GETVALUE&PUSH 2)                   ; E
74    (GETVALUE&PUSH 3)                   ; F
76    (GETVALUE&PUSH 4)                   ; G
78    (LOAD&PUSH 5)
79    (CALL 6 11)                         ; INTIR3-R0TEST
82    (SKIP 1)
84    (UNBIND 3)
86    (SKIP 1)
88    (JMP L34)


Disassembly of function #:|(DEFUN INTIR3-R0TEST (ASSOCLIST X E ...) ...)-15|
(CONST 0) = INTIR3-R0TEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIR3-R0TEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIR3-R0TEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIR3-R0TEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIR3-R0TEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIR3-R0TEST
8     (SKIP&RET 1)


Disassembly of function INTIR3-R0TEST
(CONST 0) = X
(CONST 1) = E
(CONST 2) = F
(CONST 3) = G
(CONST 4) = ROOT+ANYTHING
(CONST 5) = INTIR3-REF
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (G F E X)
24 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; X
3     (LOAD 7)
4     (BIND 1)                            ; E
6     (LOAD 9)
7     (BIND 2)                            ; F
9     (LOAD 11)
10    (BIND 3)                            ; G
12    (LOAD&PUSH 13)
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL2&JMPIF 4 L35)                 ; ROOT+ANYTHING
18    (LOAD&PUSH 18)
19    (GETVALUE&PUSH 0)                   ; X
21    (GETVALUE&PUSH 1)                   ; E
23    (GETVALUE&PUSH 2)                   ; F
25    (GETVALUE&PUSH 3)                   ; G
27    (LOAD&PUSH 18)
28    (CALL 6 5)                          ; INTIR3-REF
31    L31
31    (UNBIND 4)
33    (SKIP&RET 7)
35    L35
35    (NIL)
36    (JMP L31)


Disassembly of function #:|(DEFUN INTIR1-REF (D P R0 ...) ...)-16|
(CONST 0) = INTIR1-REF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIR1-REF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIR1-REF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIR1-REF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIR1-REF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIR1-REF
8     (SKIP&RET 1)


Disassembly of function INTIR1-REF
(CONST 0) = D
(CONST 1) = P
(CONST 2) = X
(CONST 3) = PP-INTIR1
(CONST 4) = MM-INTIR1
(CONST 5) = PM-INTIR1
9 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P D)
76 byte-code instructions:
0     (LOAD 9)
1     (BIND 0)                            ; D
3     (LOAD 11)
4     (BIND 1)                            ; P
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (LOAD 13)
10    (CDR)
11    (CAR&PUSH)
12    (LOAD 12)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD&PUSH 1)
16    (CALLS2&JMPIFNOT 146 L23)           ; PLUSP
19    (LOAD&PUSH 0)
20    (CALLS2&JMPIF 146 L58)              ; PLUSP
23    L23
23    (LOAD&PUSH 1)
24    (CALLS2&JMPIFNOT 147 L31)           ; MINUSP
27    (LOAD&PUSH 0)
28    (CALLS2&JMPIF 147 L77)              ; MINUSP
31    L31
31    (LOAD&PUSH 1)
32    (CALLS2&JMPIF 146 L96)              ; PLUSP
35    (GETVALUE&PUSH 0)                   ; D
37    (GETVALUE&PUSH 1)                   ; P
39    (LOAD&PUSH 20)
40    (LOAD&PUSH 20)
41    (LOAD&PUSH 18)
42    (LOAD&PUSH 18)
43    (LOAD&PUSH 22)
44    (LOAD 22)
46    L46
46    (PUSH)
47    (GETVALUE&PUSH 2)                   ; X
49    (CALL 9 5)                          ; PM-INTIR1
52    (SKIP 2)
54    L54
54    (UNBIND 3)
56    (SKIP&RET 10)
58    L58
58    (GETVALUE&PUSH 0)                   ; D
60    (GETVALUE&PUSH 1)                   ; P
62    (LOAD&PUSH 20)
63    (LOAD&PUSH 20)
64    (LOAD&PUSH 20)
65    (LOAD&PUSH 20)
66    (LOAD&PUSH 20)
67    (LOAD&PUSH 20)
68    (GETVALUE&PUSH 2)                   ; X
70    (CALL 9 3)                          ; PP-INTIR1
73    (SKIP 2)
75    (JMP L54)
77    L77
77    (GETVALUE&PUSH 0)                   ; D
79    (GETVALUE&PUSH 1)                   ; P
81    (LOAD&PUSH 20)
82    (LOAD&PUSH 20)
83    (LOAD&PUSH 20)
84    (LOAD&PUSH 20)
85    (LOAD&PUSH 20)
86    (LOAD&PUSH 20)
87    (GETVALUE&PUSH 2)                   ; X
89    (CALL 9 4)                          ; MM-INTIR1
92    (SKIP 2)
94    (JMP L54)
96    L96
96    (GETVALUE&PUSH 0)                   ; D
98    (GETVALUE&PUSH 1)                   ; P
100   (LOAD&PUSH 20)
101   (LOAD&PUSH 20)
102   (LOAD&PUSH 20)
103   (LOAD&PUSH 20)
104   (LOAD&PUSH 20)
105   (LOAD 20)
107   (JMP L46)


Disassembly of function #:|(DEFUN PP-INTIR1 (D P R0 ...) ...)-17|
(CONST 0) = PP-INTIR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PP-INTIR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PP-INTIR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PP-INTIR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PP-INTIR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PP-INTIR1
8     (SKIP&RET 1)


Disassembly of function PP-INTIR1
(CONST 0) = D
(CONST 1) = P
(CONST 2) = X
(CONST 3) = PP-INTIR1-EXEC
9 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P D)
40 byte-code instructions:
0     (LOAD 9)
1     (BIND 0)                            ; D
3     (LOAD 11)
4     (BIND 1)                            ; P
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (LOAD 13)
10    (CDR)
11    (CAR&PUSH)
12    (LOAD 12)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD&PUSH 1)
16    (LOAD&PUSH 1)
17    (CALLSR&JMPIF 1 48 L44)             ; >
21    (GETVALUE&PUSH 0)                   ; D
23    (GETVALUE&PUSH 1)                   ; P
25    (LOAD&PUSH 20)
26    (LOAD&PUSH 20)
27    (LOAD&PUSH 18)
28    (LOAD&PUSH 18)
29    (LOAD&PUSH 22)
30    (LOAD 22)
32    L32
32    (PUSH)
33    (GETVALUE&PUSH 2)                   ; X
35    (CALL 9 3)                          ; PP-INTIR1-EXEC
38    (SKIP 2)
40    (UNBIND 3)
42    (SKIP&RET 10)
44    L44
44    (GETVALUE&PUSH 0)                   ; D
46    (GETVALUE&PUSH 1)                   ; P
48    (LOAD&PUSH 20)
49    (LOAD&PUSH 20)
50    (LOAD&PUSH 20)
51    (LOAD&PUSH 20)
52    (LOAD&PUSH 20)
53    (LOAD 20)
55    (JMP L32)


Disassembly of function #:|(DEFUN MM-INTIR1 (D P R0 ...) ...)-18|
(CONST 0) = MM-INTIR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MM-INTIR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MM-INTIR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MM-INTIR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MM-INTIR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MM-INTIR1
8     (SKIP&RET 1)


Disassembly of function MM-INTIR1
(CONST 0) = D
(CONST 1) = P
(CONST 2) = X
(CONST 3) = MM-INTIR1-EXEC
9 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P D)
40 byte-code instructions:
0     (LOAD 9)
1     (BIND 0)                            ; D
3     (LOAD 11)
4     (BIND 1)                            ; P
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (LOAD 13)
10    (CDR)
11    (CAR&PUSH)
12    (LOAD 12)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD&PUSH 1)
16    (LOAD&PUSH 1)
17    (CALLSR&JMPIF 1 48 L44)             ; >
21    (GETVALUE&PUSH 0)                   ; D
23    (GETVALUE&PUSH 1)                   ; P
25    (LOAD&PUSH 20)
26    (LOAD&PUSH 20)
27    (LOAD&PUSH 18)
28    (LOAD&PUSH 18)
29    (LOAD&PUSH 22)
30    (LOAD 22)
32    L32
32    (PUSH)
33    (GETVALUE&PUSH 2)                   ; X
35    (CALL 9 3)                          ; MM-INTIR1-EXEC
38    (SKIP 2)
40    (UNBIND 3)
42    (SKIP&RET 10)
44    L44
44    (GETVALUE&PUSH 0)                   ; D
46    (GETVALUE&PUSH 1)                   ; P
48    (LOAD&PUSH 20)
49    (LOAD&PUSH 20)
50    (LOAD&PUSH 20)
51    (LOAD&PUSH 20)
52    (LOAD&PUSH 20)
53    (LOAD 20)
55    (JMP L32)


Disassembly of function #:|(DEFUN PM-INTIR1 (D P R0 ...) ...)-19|
(CONST 0) = PM-INTIR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PM-INTIR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PM-INTIR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PM-INTIR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PM-INTIR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PM-INTIR1
8     (SKIP&RET 1)


Disassembly of function PM-INTIR1
(CONST 0) = D
(CONST 1) = P
(CONST 2) = X
(CONST 3) = -1
(CONST 4) = MUL
(CONST 5) = SUB
(CONST 6) = POWER
(CONST 7) = MM-INTIR1
(CONST 8) = 0
(CONST 9) = PP-INTIR1
9 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P D)
61 byte-code instructions:
0     (LOAD 9)
1     (BIND 0)                            ; D
3     (LOAD 11)
4     (BIND 1)                            ; P
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (LOAD 13)
10    (CDR)
11    (CAR&PUSH)
12    (CONST&PUSH 3)                      ; -1
13    (LOAD 13)
14    (CDR)
15    (CAR&PUSH)
16    (CALL2&PUSH 4)                      ; MUL
18    (LOAD&PUSH 1)
19    (LOAD&PUSH 1)
20    (CALLSR&JMPIF 1 48 L32)             ; >
24    (LOAD&PUSH 17)
25    (JMPIFEQTO 8 L62)                   ; 0
28    (LOAD&PUSH 17)
29    (CALLS2&JMPIF 146 L62)              ; PLUSP
32    L32
32    (GETVALUE&PUSH 0)                   ; D
34    (GETVALUE&PUSH 1)                   ; P
36    (LOAD&PUSH 18)
37    (LOAD&PUSH 18)
38    (LOAD&PUSH 17)
39    (CALL2&PUSH 5)                      ; SUB
41    (CALL2&PUSH 6)                      ; POWER
43    (CALL2&PUSH 4)                      ; MUL
45    (LOAD&PUSH 20)
46    (LOAD&PUSH 20)
47    (LOAD&PUSH 20)
48    (LOAD&PUSH 18)
49    (LOAD&PUSH 20)
50    (LOAD&PUSH 20)
51    (GETVALUE&PUSH 2)                   ; X
53    (CALL 9 7)                          ; MM-INTIR1
56    (SKIP 2)
58    L58
58    (UNBIND 3)
60    (SKIP&RET 10)
62    L62
62    (GETVALUE&PUSH 0)                   ; D
64    (GETVALUE&PUSH 1)                   ; P
66    (LOAD&PUSH 16)
67    (LOAD&PUSH 16)
68    (LOAD&PUSH 19)
69    (CALL2&PUSH 5)                      ; SUB
71    (CALL2&PUSH 6)                      ; POWER
73    (CALL2&PUSH 4)                      ; MUL
75    (LOAD&PUSH 20)
76    (LOAD&PUSH 20)
77    (LOAD&PUSH 20)
78    (LOAD&PUSH 20)
79    (LOAD&PUSH 20)
80    (LOAD&PUSH 22)
81    (GETVALUE&PUSH 2)                   ; X
83    (CALL 9 9)                          ; PP-INTIR1
86    (SKIP 2)
88    (JMP L58)


Disassembly of function #:|(DEFUN PP-INTIR1-EXEC (D P R0 ...) ...)-20|
(CONST 0) = PP-INTIR1-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PP-INTIR1-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PP-INTIR1-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PP-INTIR1-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PP-INTIR1-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PP-INTIR1-EXEC
8     (SKIP&RET 1)


Disassembly of function PP-INTIR1-EXEC
(CONST 0) = D
(CONST 1) = P
(CONST 2) = X
(CONST 3) = 0
(CONST 4) = 1
(CONST 5) = POWER
(CONST 6) = -1
(CONST 7) = MUL
(CONST 8) = ADD
(CONST 9) = $EXPAND
(CONST 10) = INTIR
9 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P D)
36 byte-code instructions:
0     (LOAD 9)
1     (BIND 0)                            ; D
3     (LOAD 11)
4     (BIND 1)                            ; P
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (GETVALUE&PUSH 0)                   ; D
11    (GETVALUE&PUSH 1)                   ; P
13    (LOAD&PUSH 17)
14    (JMPIFEQTO 3 L52)                   ; 0
17    (LOAD&PUSH 18)
18    (LOAD&PUSH 18)
19    (CALL2 5)                           ; POWER
21    L21
21    (PUSH)
22    (LOAD&PUSH 17)
23    (LOAD&PUSH 17)
24    (CONST&PUSH 6)                      ; -1
25    (LOAD&PUSH 17)
26    (CALL2&PUSH 7)                      ; MUL
28    (CALL2&PUSH 8)                      ; ADD
30    (CALL2&PUSH 5)                      ; POWER
32    (LOAD&PUSH 18)
33    (LOAD&PUSH 17)
34    (CALL2&PUSH 7)                      ; MUL
36    (CALL1&PUSH 9)                      ; $EXPAND
38    (LOAD&PUSH 16)
39    (CALL2&PUSH 5)                      ; POWER
41    (CALL&PUSH 5 7)                     ; MUL
44    (GETVALUE&PUSH 2)                   ; X
46    (CALL2 10)                          ; INTIR
48    (UNBIND 3)
50    (SKIP&RET 10)
52    L52
52    (CONST 4)                           ; 1
53    (JMP L21)


Disassembly of function #:|(DEFUN MM-INTIR1-EXEC (D P R0 ...) ...)-21|
(CONST 0) = MM-INTIR1-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MM-INTIR1-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MM-INTIR1-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MM-INTIR1-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MM-INTIR1-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MM-INTIR1-EXEC
8     (SKIP&RET 1)


Disassembly of function MM-INTIR1-EXEC
(CONST 0) = D
(CONST 1) = P
(CONST 2) = X
(CONST 3) = 0
(CONST 4) = 1
(CONST 5) = POWER
(CONST 6) = -1
(CONST 7) = MUL
(CONST 8) = ADD
(CONST 9) = $EXPAND
(CONST 10) = INTIR
9 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P D)
36 byte-code instructions:
0     (LOAD 9)
1     (BIND 0)                            ; D
3     (LOAD 11)
4     (BIND 1)                            ; P
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (GETVALUE&PUSH 0)                   ; D
11    (GETVALUE&PUSH 1)                   ; P
13    (LOAD&PUSH 17)
14    (JMPIFEQTO 3 L52)                   ; 0
17    (LOAD&PUSH 18)
18    (LOAD&PUSH 18)
19    (CALL2 5)                           ; POWER
21    L21
21    (PUSH)
22    (LOAD&PUSH 15)
23    (LOAD&PUSH 15)
24    (CONST&PUSH 6)                      ; -1
25    (LOAD&PUSH 19)
26    (CALL2&PUSH 7)                      ; MUL
28    (CALL2&PUSH 8)                      ; ADD
30    (CALL2&PUSH 5)                      ; POWER
32    (LOAD&PUSH 16)
33    (LOAD&PUSH 19)
34    (CALL2&PUSH 7)                      ; MUL
36    (CALL1&PUSH 9)                      ; $EXPAND
38    (LOAD&PUSH 18)
39    (CALL2&PUSH 5)                      ; POWER
41    (CALL&PUSH 5 7)                     ; MUL
44    (GETVALUE&PUSH 2)                   ; X
46    (CALL2 10)                          ; INTIR
48    (UNBIND 3)
50    (SKIP&RET 10)
52    L52
52    (CONST 4)                           ; 1
53    (JMP L21)


Disassembly of function #:|(DEFUN INTIR3-REF (ASSOCLIST X E ...) ...)-22|
(CONST 0) = INTIR3-REF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIR3-REF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIR3-REF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIR3-REF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIR3-REF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIR3-REF
8     (SKIP&RET 1)


Disassembly of function INTIR3-REF
(CONST 0) = X
(CONST 1) = E
(CONST 2) = F
(CONST 3) = G
(CONST 4) = SIGNDISCR
(CONST 5) = D
(CONST 6) = CDRAS
(CONST 7) = P
(CONST 8) = E0
(CONST 9) = $POSITIVE
(CONST 10) = $NEGATIVE
(CONST 11) = PNS-INTIR3
(CONST 12) = ZS-INTIR3
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P D X G F E)
53 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; X
3     (LOAD 7)
4     (BIND 1)                            ; E
6     (LOAD 9)
7     (BIND 2)                            ; F
9     (LOAD 11)
10    (BIND 3)                            ; G
12    (GETVALUE&PUSH 1)                   ; E
14    (GETVALUE&PUSH 2)                   ; F
16    (GETVALUE&PUSH 3)                   ; G
18    (CALL&PUSH 3 4)                     ; SIGNDISCR
21    (CONST&PUSH 5)                      ; D
22    (LOAD&PUSH 20)
23    (CALL2&PUSH 6)                      ; CDRAS
25    (CONST&PUSH 7)                      ; P
26    (LOAD&PUSH 21)
27    (CALL2&PUSH 6)                      ; CDRAS
29    (CONST&PUSH 8)                      ; E0
30    (LOAD&PUSH 22)
31    (CALL2&PUSH 6)                      ; CDRAS
33    (LOAD 2)
34    (BIND 5)                            ; D
36    (LOAD 4)
37    (BIND 7)                            ; P
39    (LOAD&PUSH 9)
40    (JMPIFEQTO 9 L71)                   ; $POSITIVE
43    (LOAD&PUSH 9)
44    (JMPIFEQTO 10 L71)                  ; $NEGATIVE
47    (GETVALUE&PUSH 0)                   ; X
49    (GETVALUE&PUSH 1)                   ; E
51    (GETVALUE&PUSH 2)                   ; F
53    (GETVALUE&PUSH 5)                   ; D
55    (GETVALUE&PUSH 7)                   ; P
57    (LOAD&PUSH 28)
59    (LOAD&PUSH 12)
60    (CALL 7 12)                         ; ZS-INTIR3
63    L63
63    (UNBIND 2)
65    (SKIP 4)
67    (UNBIND 4)
69    (SKIP&RET 7)
71    L71
71    (GETVALUE&PUSH 0)                   ; X
73    (GETVALUE&PUSH 1)                   ; E
75    (GETVALUE&PUSH 2)                   ; F
77    (GETVALUE&PUSH 3)                   ; G
79    (GETVALUE&PUSH 5)                   ; D
81    (GETVALUE&PUSH 7)                   ; P
83    (LOAD&PUSH 29)
85    (LOAD&PUSH 13)
86    (CALL 8 11)                         ; PNS-INTIR3
89    (JMP L63)


Disassembly of function #:|(DEFUN ROOT+ANYTHING (EXP VAR) ...)-23|
(CONST 0) = ROOT+ANYTHING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ROOT+ANYTHING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ROOT+ANYTHING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ROOT+ANYTHING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ROOT+ANYTHING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ROOT+ANYTHING
8     (SKIP&RET 1)


Disassembly of function ROOT+ANYTHING
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = 
((MPLUS) ((COEFFPT) (C NONZERP) ((MEXPT) (U HASVAR) (V INTEGERPFR)))
 ((COEFFPP) (C TRUE)))
(CONST 3) = M2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; EXP
8     (CONST&PUSH 2)                      ; ((MPLUS) (# # #) (# #))
9     (NIL&PUSH)
10    (CALL 3 3)                          ; M2
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PNS-INTIR3 (X E F ...) ...)-24|
(CONST 0) = PNS-INTIR3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PNS-INTIR3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PNS-INTIR3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PNS-INTIR3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PNS-INTIR3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PNS-INTIR3
8     (SKIP&RET 1)


Disassembly of function PNS-INTIR3
(CONST 0) = X
(CONST 1) = E
(CONST 2) = F
(CONST 3) = G
(CONST 4) = D
(CONST 5) = P
(CONST 6) = MUL
(CONST 7) = 4
(CONST 8) = SUB
(CONST 9) = 2
(CONST 10) = -1
(CONST 11) = POWER
(CONST 12) = ADD
(CONST 13) = INTIR2
8 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D X P G E F)
67 byte-code instructions:
0     (LOAD 8)
1     (BIND 0)                            ; X
3     (LOAD 10)
4     (BIND 1)                            ; E
6     (LOAD 12)
7     (BIND 2)                            ; F
9     (LOAD 14)
10    (BIND 3)                            ; G
12    (LOAD 16)
14    (BIND 4)                            ; D
16    (LOAD 18)
18    (BIND 5)                            ; P
20    (GETVALUE&PUSH 2)                   ; F
22    (GETVALUE&PUSH 2)                   ; F
24    (CALL2&PUSH 6)                      ; MUL
26    (CONST&PUSH 7)                      ; 4
27    (GETVALUE&PUSH 1)                   ; E
29    (GETVALUE&PUSH 3)                   ; G
31    (CALL&PUSH 3 6)                     ; MUL
34    (CALL2&PUSH 8)                      ; SUB
36    (CONST&PUSH 9)                      ; 2
37    (CONST&PUSH 10)                     ; -1
38    (CALL2&PUSH 11)                     ; POWER
40    (CALL2&PUSH 11)                     ; POWER
42    (GETVALUE&PUSH 5)                   ; P
44    (LOAD&PUSH 22)
45    (LOAD&PUSH 22)
46    (CALL2&PUSH 11)                     ; POWER
48    (CALL2&PUSH 6)                      ; MUL
50    (CONST&PUSH 9)                      ; 2
51    (GETVALUE&PUSH 1)                   ; E
53    (GETVALUE&PUSH 0)                   ; X
55    (CALL&PUSH 3 6)                     ; MUL
58    (GETVALUE&PUSH 2)                   ; F
60    (CALL2&PUSH 12)                     ; ADD
62    (CONST&PUSH 9)                      ; 2
63    (GETVALUE&PUSH 1)                   ; E
65    (GETVALUE&PUSH 4)                   ; D
67    (LOAD&PUSH 5)
68    (CONST&PUSH 10)                     ; -1
69    (CALL2&PUSH 11)                     ; POWER
71    (CALL&PUSH 4 6)                     ; MUL
74    (LOAD&PUSH 0)
75    (LOAD&PUSH 2)
76    (LOAD&PUSH 5)
77    (CALL2&PUSH 8)                      ; SUB
79    (CONST&PUSH 10)                     ; -1
80    (CALL2&PUSH 11)                     ; POWER
82    (LOAD&PUSH 4)
83    (CALL&PUSH 3 6)                     ; MUL
86    (GETVALUE&PUSH 0)                   ; X
88    (CALL2&PUSH 13)                     ; INTIR2
90    (LOAD&PUSH 1)
91    (LOAD&PUSH 3)
92    (LOAD&PUSH 6)
93    (CALL2&PUSH 12)                     ; ADD
95    (CONST&PUSH 10)                     ; -1
96    (CALL2&PUSH 11)                     ; POWER
98    (LOAD&PUSH 5)
99    (CALL&PUSH 3 6)                     ; MUL
102   (GETVALUE&PUSH 0)                   ; X
104   (CALL2&PUSH 13)                     ; INTIR2
106   (CALL2&PUSH 8)                      ; SUB
108   (CALL1 6)                           ; MUL
110   (SKIP 4)
112   (UNBIND 6)
114   (SKIP&RET 9)


Disassembly of function #:|(DEFUN ZS-INTIR3 (X E F ...) ...)-25|
(CONST 0) = ZS-INTIR3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZS-INTIR3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZS-INTIR3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZS-INTIR3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZS-INTIR3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZS-INTIR3
8     (SKIP&RET 1)


Disassembly of function ZS-INTIR3
(CONST 0) = X
(CONST 1) = E
(CONST 2) = F
(CONST 3) = D
(CONST 4) = P
(CONST 5) = ADD
(CONST 6) = DIV
(CONST 7) = -2
(CONST 8) = POWER
(CONST 9) = MUL
(CONST 10) = INTIR2
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (F X E P D)
30 byte-code instructions:
0     (LOAD 7)
1     (BIND 0)                            ; X
3     (LOAD 9)
4     (BIND 1)                            ; E
6     (LOAD 11)
7     (BIND 2)                            ; F
9     (LOAD 13)
10    (BIND 3)                            ; D
12    (LOAD 15)
14    (BIND 4)                            ; P
16    (GETVALUE&PUSH 3)                   ; D
18    (GETVALUE&PUSH 4)                   ; P
20    (GETVALUE&PUSH 1)                   ; E
22    (GETVALUE&PUSH 0)                   ; X
24    (GETVALUE&PUSH 2)                   ; F
26    (GETVALUE&PUSH 1)                   ; E
28    (GETVALUE&PUSH 1)                   ; E
30    (CALL2&PUSH 5)                      ; ADD
32    (CALL2&PUSH 6)                      ; DIV
34    (CALL2&PUSH 5)                      ; ADD
36    (CONST&PUSH 7)                      ; -2
37    (CALL2&PUSH 8)                      ; POWER
39    (LOAD&PUSH 21)
40    (LOAD&PUSH 21)
41    (CALL2&PUSH 8)                      ; POWER
43    (CALL&PUSH 5 9)                     ; MUL
46    (GETVALUE&PUSH 0)                   ; X
48    (CALL2 10)                          ; INTIR2
50    (UNBIND 5)
52    (SKIP&RET 8)


Disassembly of function #:|(DEFUN CDRAS (A B) ...)-26|
(CONST 0) = CDRAS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CDRAS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CDRAS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CDRAS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CDRAS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CDRAS
8     (SKIP&RET 1)


Disassembly of function CDRAS
(CONST 0) = A
(CONST 1) = B
(CONST 2) = ZL-ASSOC
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (GETVALUE&PUSH 1)                   ; B
10    (CALL2 2)                           ; ZL-ASSOC
12    (CDR)
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN INTIR (FUNCT X) ...)-27|
(CONST 0) = INTIR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIR
8     (SKIP&RET 1)


Disassembly of function INTIR
(CONST 0) = X
(CONST 1) = SPECREPCHECK
(CONST 2) = JMAUG
(CONST 3) = INTI
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 1)                      ; SPECREPCHECK
7     (GETVALUE&PUSH 0)                   ; X
9     (CALL2 2)                           ; JMAUG
11    (STORE 0)
12    (LOAD&PUSH 6)
13    (GETVALUE&PUSH 0)                   ; X
15    (LOAD&PUSH 2)
16    (CALL 3 3)                          ; INTI
19    (SKIP 1)
21    (UNBIND1)
22    (SKIP&RET 3)


Disassembly of function #:|(DEFUN INTI (FUNCT X ASSOCLIST) ...)-28|
(CONST 0) = INTI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTI
8     (SKIP&RET 1)


Disassembly of function INTI
(CONST 0) = X
(CONST 1) = N
(CONST 2) = F
(CONST 3) = E
(CONST 4) = DENOM
(CONST 5) = CDRAS
(CONST 6) = MAXIMA-INTEGERP
(CONST 7) = 0
(CONST 8) = INTIRA
(CONST 9) = MUL
(CONST 10) = ADD
(CONST 11) = -1
(CONST 12) = MEVAL
(CONST 13) = DIV
(CONST 14) = POWER
(CONST 15) = "YANNIS"
(CONST 16) = $SUBSTITUTE
(CONST 17) = DISTREXPANDROOT
(CONST 18) = $EXPAND
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DENOM X F E N)
writes special variables : (DENOM E F N)
115 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; N
7     (NIL&PUSH)
8     (NIL)
9     (BIND 2)                            ; F
11    (NIL)
12    (BIND 3)                            ; E
14    (NIL)
15    (BIND 4)                            ; DENOM
17    (CONST&PUSH 1)                      ; N
18    (LOAD&PUSH 19)
19    (CALL2 5)                           ; CDRAS
21    (SETVALUE 1)                        ; N
23    (LOAD&JMPIFNOT 18 L182)
27    (GETVALUE&PUSH 1)                   ; N
29    (CALL1&JMPIF 6 L182)                ; MAXIMA-INTEGERP
33    (CONST&PUSH 2)                      ; F
34    (LOAD&PUSH 19)
35    (CALL2 5)                           ; CDRAS
37    (SETVALUE 2)                        ; F
39    (CONST&PUSH 3)                      ; E
40    (LOAD&PUSH 19)
41    (CALL2 5)                           ; CDRAS
43    (SETVALUE 3)                        ; E
45    (PUSH)
46    (JMPIFEQTO 7 L192)                  ; 0
50    (GETVALUE 3)                        ; E
52    (JMPIFNOT L192)
55    (GETVALUE&PUSH 2)                   ; F
57    (CALLS2&JMPIFNOT 8 L115)            ; NUMBERP
60    (GETVALUE&PUSH 2)                   ; F
62    (CALLS2&JMPIF 146 L115)             ; PLUSP
65    (GETVALUE&PUSH 2)                   ; F
67    (GETVALUE&PUSH 0)                   ; X
69    (CALL2&PUSH 9)                      ; MUL
71    (GETVALUE&PUSH 3)                   ; E
73    (CALL2 10)                          ; ADD
75    (SETVALUE 4)                        ; DENOM
77    (CONST&PUSH 11)                     ; -1
78    (GETVALUE&PUSH 2)                   ; F
80    (CALL2 9)                           ; MUL
82    (SETVALUE 2)                        ; F
84    (CONST&PUSH 11)                     ; -1
85    (GETVALUE&PUSH 3)                   ; E
87    (CALL2 9)                           ; MUL
89    (SETVALUE 3)                        ; E
91    (CONST&PUSH 11)                     ; -1
92    (GETVALUE&PUSH 4)                   ; DENOM
94    (LOAD&PUSH 22)
95    (CALL2&PUSH 9)                      ; MUL
97    (CALL1&PUSH 12)                     ; MEVAL
99    (GETVALUE&PUSH 2)                   ; F
101   (GETVALUE&PUSH 0)                   ; X
103   (CALL2&PUSH 9)                      ; MUL
105   (GETVALUE&PUSH 3)                   ; E
107   (CALL2&PUSH 10)                     ; ADD
109   (CALL2&PUSH 13)                     ; DIV
111   (CALL2 9)                           ; MUL
113   (STORE 20)
115   L115
115   (GETVALUE&PUSH 2)                   ; F
117   (CONST&PUSH 11)                     ; -1
118   (CALL2&PUSH 14)                     ; POWER
120   (GETVALUE&PUSH 2)                   ; F
122   (CONST&PUSH 11)                     ; -1
123   (CALL2&PUSH 14)                     ; POWER
125   (CONST&PUSH 15)                     ; "YANNIS"
126   (CALLS1&STORE 203 15)               ; MAKE-SYMBOL
129   (PUSH)
130   (CONST&PUSH 11)                     ; -1
131   (GETVALUE&PUSH 3)                   ; E
133   (CALL2&PUSH 9)                      ; MUL
135   (CALL2&PUSH 10)                     ; ADD
137   (CALL2&PUSH 9)                      ; MUL
139   (GETVALUE&PUSH 0)                   ; X
141   (LOAD&PUSH 23)
142   (CALL 3 16)                         ; $SUBSTITUTE
145   (CDR&PUSH)
146   (CALL1&PUSH 17)                     ; DISTREXPANDROOT
148   (LOAD&PUSH 15)
149   (CALL2&PUSH 8)                      ; INTIRA
151   (CALL2 9)                           ; MUL
153   (STORE 9)
155   (GETVALUE&PUSH 2)                   ; F
157   (GETVALUE&PUSH 0)                   ; X
159   (CALL2&PUSH 9)                      ; MUL
161   (GETVALUE&PUSH 3)                   ; E
163   (CALL2&PUSH 10)                     ; ADD
165   (LOAD&PUSH 14)
166   (LOAD&PUSH 11)
167   (CALL&PUSH 3 16)                    ; $SUBSTITUTE
170   (CALL1 18)                          ; $EXPAND
172   L172
172   (UNBIND 3)
174   (SKIP 1)
176   (UNBIND1)
177   (SKIP 1)
179   L179
179   (UNBIND1)
180   (SKIP&RET 4)
182   L182
182   (NIL)
183   (UNBIND 3)
185   (SKIP 1)
187   (UNBIND1)
188   (SKIP 1)
190   (JMP L179)
192   L192
192   (LOAD&PUSH 20)
193   (GETVALUE&PUSH 0)                   ; X
195   (CALL2 8)                           ; INTIRA
197   (JMP L172)


Disassembly of function #:|(DEFUN DISTREXPANDROOT (EXPR) ...)-29|
(CONST 0) = DISTREXPANDROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTREXPANDROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTREXPANDROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTREXPANDROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTREXPANDROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTREXPANDROOT
8     (SKIP&RET 1)


Disassembly of function DISTREXPANDROOT
(CONST 0) = 1
(CONST 1) = EXPANDROOT
(CONST 2) = MUL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&JMPIF 1 L9)
3     L3
3     (CONST 0)                           ; 1
4     (SKIP&RET 2)
6     L6
6     (LOAD&JMPIFNOT 1 L3)
9     L9
9     (LOAD&CAR&PUSH 1)
11    (CALL1&PUSH 1)                      ; EXPANDROOT
13    (LOAD&CDR&PUSH 2)
15    (JSR&PUSH L6)
17    (CALL2 2)                           ; MUL
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EXPANDROOT (EXPR) ...)-30|
(CONST 0) = EXPANDROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPANDROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPANDROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPANDROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPANDROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPANDROOT
8     (SKIP&RET 1)


Disassembly of function EXPANDROOT
(CONST 0) = MEXPT
(CONST 1) = INTEGERPFR
(CONST 2) = $EXPAND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L16)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 0 L16)                ; MEXPT
9     (LOAD 1)
10    (CDR)
11    (CDR)
12    (CAR&PUSH)
13    (CALL1&JMPIF 1 L19)                 ; INTEGERPFR
16    L16
16    (LOAD 1)
17    (SKIP&RET 2)
19    L19
19    (LOAD&PUSH 1)
20    (CALL1 2)                           ; $EXPAND
22    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTIRFACTOROOT (EXPR X) ...)-31|
(CONST 0) = INTIRFACTOROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIRFACTOROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIRFACTOROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIRFACTOROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIRFACTOROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIRFACTOROOT
8     (SKIP&RET 1)


Disassembly of function INTIRFACTOROOT
(CONST 0) = X
(CONST 1) = EXP
(CONST 2) = TIMESTEST
(CONST 3) = DISTRFACTOR
(CONST 4) = JMAUG
(CONST 5) = INTI
(CONST 6) = GLOBALCAREFLAG
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP X)
writes special variables : (GLOBALCAREFLAG EXP)
51 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; EXP
7     (LOAD 9)
8     (SETVALUE 1)                        ; EXP
10    (PUSH)
11    (CALL1&PUSH 2)                      ; TIMESTEST
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL2 3)                           ; DISTRFACTOR
17    (STORE 9)
19    (PUSH)
20    (GETVALUE&PUSH 0)                   ; X
22    (CALL2 4)                           ; JMAUG
24    (STORE 3)
25    (JMPIF L65)
27    (T)
28    (SETVALUE 6)                        ; GLOBALCAREFLAG
30    (GETVALUE&PUSH 1)                   ; EXP
32    (CALL1&PUSH 2)                      ; TIMESTEST
34    (GETVALUE&PUSH 0)                   ; X
36    (CALL2 3)                           ; DISTRFACTOR
38    (SETVALUE 1)                        ; EXP
40    (PUSH)
41    (GETVALUE&PUSH 0)                   ; X
43    (CALL2 4)                           ; JMAUG
45    (STORE 3)
46    (JMPIFNOT L68)
48    (NIL)
49    (SETVALUE 6)                        ; GLOBALCAREFLAG
51    (GETVALUE 1)                        ; EXP
53    L53
53    (PUSH)
54    (GETVALUE&PUSH 0)                   ; X
56    (LOAD&PUSH 5)
57    (CALL 3 5)                          ; INTI
60    (UNBIND1)
61    (SKIP 1)
63    (JMP L74)
65    L65
65    (LOAD 9)
66    (JMP L53)
68    L68
68    (NIL)
69    (SETVALUE 6)                        ; GLOBALCAREFLAG
71    (UNBIND1)
72    (SKIP 1)
74    L74
74    (UNBIND1)
75    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DISTRFACTOR (EXPR X) ...)-32|
(CONST 0) = DISTRFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTRFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTRFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTRFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTRFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTRFACTOR
8     (SKIP&RET 1)


Disassembly of function DISTRFACTOR
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = FACTOROOT
(CONST 3) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (LOAD&JMPIFNOT 5 L23)
6     (LOAD&CAR&PUSH 5)
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL2&PUSH 2)                      ; FACTOROOT
12    (LOAD&CDR&PUSH 6)
14    (GETVALUE&PUSH 0)                   ; X
16    (JSR&PUSH L0)
18    (CALL2 3)                           ; MUL
20    L20
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (CONST 1)                           ; 1
24    (JMP L20)


Disassembly of function #:|(DEFUN FACTOROOT (EXPR VAR) ...)-33|
(CONST 0) = FACTOROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTOROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTOROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTOROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTOROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTOROOT
8     (SKIP&RET 1)


Disassembly of function FACTOROOT
(CONST 0) = VAR
(CONST 1) = MEXPT
(CONST 2) = HASVAR
(CONST 3) = INTEGERPFR
(CONST 4) = CAREFULFACTOR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD 5)
4     (JMPIFATOM L27)
6     (LOAD 5)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 1 L23)                ; MEXPT
12    (LOAD&PUSH 5)
13    (CALL1&JMPIFNOT 2 L23)              ; HASVAR
16    (LOAD 5)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CALL1&JMPIF 3 L30)                 ; INTEGERPFR
23    L23
23    (LOAD 5)
24    L24
24    (UNBIND1)
25    (SKIP&RET 3)
27    L27
27    (LOAD 5)
28    (JMP L24)
30    L30
30    (LOAD&PUSH 5)
31    (GETVALUE&PUSH 0)                   ; VAR
33    (CALL2 4)                           ; CAREFULFACTOR
35    (JMP L24)


Disassembly of function #:|(DEFUN CAREFULFACTOR (EXPR X) ...)-34|
(CONST 0) = CAREFULFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CAREFULFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CAREFULFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CAREFULFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CAREFULFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CAREFULFACTOR
8     (SKIP&RET 1)


Disassembly of function CAREFULFACTOR
(CONST 0) = X
(CONST 1) = GLOBALCAREFLAG
(CONST 2) = $FACTOR
(CONST 3) = DIV
(CONST 4) = POWER
(CONST 5) = RESTOREX
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X GLOBALCAREFLAG)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; GLOBALCAREFLAG
5     (JMPIFNOT L29)
7     (LOAD 5)
8     (CDR)
9     (CAR&PUSH)
10    (GETVALUE&PUSH 0)                   ; X
12    (CALL2&PUSH 3)                      ; DIV
14    (LOAD 6)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (CALL2&PUSH 4)                      ; POWER
20    (CALL1&PUSH 2)                      ; $FACTOR
22    (GETVALUE&PUSH 0)                   ; X
24    (CALL2 5)                           ; RESTOREX
26    L26
26    (UNBIND1)
27    (SKIP&RET 3)
29    L29
29    (LOAD&PUSH 5)
30    (CALL1 2)                           ; $FACTOR
32    (JMP L26)


Disassembly of function #:|(DEFUN RESTOREX (EXPR VAR) ...)-35|
(CONST 0) = RESTOREX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESTOREX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESTOREX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESTOREX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESTOREX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESTOREX
8     (SKIP&RET 1)


Disassembly of function RESTOREX
(CONST 0) = VAR
(CONST 1) = MTIMES
(CONST 2) = DISTRESTOREX
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD 5)
4     (JMPIFATOM L16)
6     (LOAD 5)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFEQTO 1 L19)                   ; MTIMES
12    (LOAD 5)
13    L13
13    (UNBIND1)
14    (SKIP&RET 3)
16    L16
16    (LOAD 5)
17    (JMP L13)
19    L19
19    (LOAD&CDR&PUSH 5)
21    (GETVALUE&PUSH 0)                   ; VAR
23    (CALL2 2)                           ; DISTRESTOREX
25    (JMP L13)


Disassembly of function #:|(DEFUN DISTRESTOREX (EXPR VAR) ...)-36|
(CONST 0) = DISTRESTOREX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTRESTOREX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTRESTOREX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTRESTOREX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTRESTOREX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTRESTOREX
8     (SKIP&RET 1)


Disassembly of function DISTRESTOREX
(CONST 0) = VAR
(CONST 1) = 1
(CONST 2) = RESTOROOT
(CONST 3) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
17 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&JMPIFNOT 5 L23)
6     (LOAD&CAR&PUSH 5)
8     (GETVALUE&PUSH 0)                   ; VAR
10    (CALL2&PUSH 2)                      ; RESTOROOT
12    (LOAD&CDR&PUSH 6)
14    (GETVALUE&PUSH 0)                   ; VAR
16    (JSR&PUSH L0)
18    (CALL2 3)                           ; MUL
20    L20
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (CONST 1)                           ; 1
24    (JMP L20)


Disassembly of function #:|(DEFUN RESTOROOT (EXPR VAR) ...)-37|
(CONST 0) = RESTOROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESTOROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESTOROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESTOROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESTOROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESTOROOT
8     (SKIP&RET 1)


Disassembly of function RESTOROOT
(CONST 0) = VAR
(CONST 1) = MEXPT
(CONST 2) = INTEGERPFR
(CONST 3) = MPLUSP
(CONST 4) = MUL
(CONST 5) = $EXPAND
(CONST 6) = POWER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
38 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD 5)
4     (JMPIFATOM L29)
6     (LOAD 5)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 1 L25)                ; MEXPT
12    (LOAD 5)
13    (CDR)
14    (CDR)
15    (CAR&PUSH)
16    (CALL1&JMPIFNOT 2 L25)              ; INTEGERPFR
19    (LOAD 5)
20    (CDR)
21    (CAR&PUSH)
22    (CALL1&JMPIF 3 L32)                 ; MPLUSP
25    L25
25    (LOAD 5)
26    L26
26    (UNBIND1)
27    (SKIP&RET 3)
29    L29
29    (LOAD 5)
30    (JMP L26)
32    L32
32    (GETVALUE&PUSH 0)                   ; VAR
34    (LOAD 6)
35    (CDR)
36    (CAR&PUSH)
37    (CALL2&PUSH 4)                      ; MUL
39    (CALL1&PUSH 5)                      ; $EXPAND
41    (LOAD 6)
42    (CDR)
43    (CDR)
44    (CAR&PUSH)
45    (CALL2 6)                           ; POWER
47    (JMP L26)


Disassembly of function #:|(DEFUN TIMESTEST (EXPR) ...)-38|
(CONST 0) = TIMESTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TIMESTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TIMESTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TIMESTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TIMESTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TIMESTEST
8     (SKIP&RET 1)


Disassembly of function TIMESTEST
(CONST 0) = MTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L9)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 0 L14)                   ; MTIMES
9     L9
9     (LOAD&PUSH 1)
10    (LIST 1)
12    (SKIP&RET 2)
14    L14
14    (LOAD 1)
15    (CDR)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTIRA (FUNCT X) ...)-39|
(CONST 0) = INTIRA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTIRA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTIRA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTIRA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTIRA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTIRA
8     (SKIP&RET 1)


Disassembly of function INTIRA
(CONST 0) = X
(CONST 1) = A
(CONST 2) = B
(CONST 3) = C
(CONST 4) = EC-1
(CONST 5) = D
(CONST 6) = M
(CONST 7) = N
(CONST 8) = R12
(CONST 9) = SPECREPCHECK
(CONST 10) = JMAUG
(CONST 11) = CDRAS
(CONST 12) = |1//2|
(CONST 13) = MAXIMA-INTEGERP
(CONST 14) = RATION1
(CONST 15) = RDIS
(CONST 16) = 0
(CONST 17) = P
(CONST 18) = CHECKSIGNTM
(CONST 19) = -1
(CONST 20) = POWER
(CONST 21) = MUL
(CONST 22) = POWERCOEFLIST
(CONST 23) = $POSITIVE
(CONST 24) = NUMMNUMN
(CONST 25) = AUGMULT
(CONST 26) = NUMMDENN
(CONST 27) = DENMNUMN
(CONST 28) = DENMDENN
(CONST 29) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A B D M R12 C N |1//2| X)
writes special variables : (A B EC-1 M C D R12 N)
227 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; A
6     (NIL)
7     (BIND 2)                            ; B
9     (NIL)
10    (BIND 3)                            ; C
12    (NIL)
13    (BIND 4)                            ; EC-1
15    (NIL)
16    (BIND 5)                            ; D
18    (NIL)
19    (BIND 6)                            ; M
21    (NIL)
22    (BIND 7)                            ; N
24    (PUSH-NIL 8)
26    (NIL)
27    (BIND 8)                            ; R12
29    (LOAD&PUSH 37)
31    (CALL1&PUSH 9)                      ; SPECREPCHECK
33    (GETVALUE&PUSH 0)                   ; X
35    (CALL2 10)                          ; JMAUG
37    (STORE 10)
39    (CONST&PUSH 7)                      ; N
40    (LOAD&PUSH 11)
41    (CALL2 11)                          ; CDRAS
43    (SETVALUE 7)                        ; N
45    (GETVALUE 12)                       ; |1//2|
47    (SETVALUE 8)                        ; R12
49    (LOAD&JMPIFNOT 10 L198)
53    (GETVALUE&PUSH 7)                   ; N
55    (CALL1&JMPIF 13 L198)               ; MAXIMA-INTEGERP
59    (GETVALUE&PUSH 7)                   ; N
61    (CALLS2&JMPIFNOT 15 L72)            ; FLOATP
64    (GETVALUE&PUSH 7)                   ; N
66    (CALL1&PUSH 14)                     ; RATION1
68    (CALL1 15)                          ; RDIS
70    (SETVALUE 7)                        ; N
72    L72
72    (CONST&PUSH 5)                      ; D
73    (LOAD&PUSH 11)
74    (CALL2 11)                          ; CDRAS
76    (SETVALUE 5)                        ; D
78    (PUSH)
79    (JMPIFEQTO 16 L207)                 ; 0
83    (CONST&PUSH 1)                      ; A
84    (LOAD&PUSH 11)
85    (CALL2 11)                          ; CDRAS
87    (SETVALUE 3)                        ; C
89    (PUSH)
90    (JMPIFEQTO 16 L198)                 ; 0
94    (CONST&PUSH 6)                      ; M
95    (LOAD&PUSH 11)
96    (CALL2 11)                          ; CDRAS
98    (SETVALUE 6)                        ; M
100   (CONST&PUSH 17)                     ; P
101   (LOAD&PUSH 11)
102   (CALL2 11)                          ; CDRAS
104   (STORE 6)
105   (GETVALUE 7)                        ; N
107   (CDR)
108   (CAR)
109   (SETVALUE 7)                        ; N
111   (PUSH)
112   (CALL1 18)                          ; CHECKSIGNTM
114   (STORE 5)
115   (GETVALUE&PUSH 3)                   ; C
117   (CONST&PUSH 19)                     ; -1
118   (CALL2 20)                          ; POWER
120   (SETVALUE 4)                        ; EC-1
122   (CONST&PUSH 2)                      ; B
123   (LOAD&PUSH 11)
124   (CALL2 11)                          ; CDRAS
126   (SETVALUE 2)                        ; B
128   (CONST&PUSH 3)                      ; C
129   (LOAD&PUSH 11)
130   (CALL2 11)                          ; CDRAS
132   (SETVALUE 1)                        ; A
134   (GETVALUE&PUSH 8)                   ; R12
136   (GETVALUE&PUSH 7)                   ; N
138   (CALLS2&PUSH 151)                   ; 1-
140   (CALL2 21)                          ; MUL
142   (STORE 9)
144   (GETVALUE&PUSH 8)                   ; R12
146   (GETVALUE&PUSH 7)                   ; N
148   (CALLS2&PUSH 150)                   ; 1+
150   (CALL2 21)                          ; MUL
152   (STORE 7)
153   (PUSH)
154   (CALLSR&STORE 0 54 8)               ; -
158   (LOAD&PUSH 6)
159   (GETVALUE&PUSH 6)                   ; M
161   (GETVALUE&PUSH 0)                   ; X
163   (CALL 3 22)                         ; POWERCOEFLIST
166   (CAR)
167   (STORE 4)
168   (LOAD&PUSH 6)
169   (GETVALUE&PUSH 6)                   ; M
171   (GETVALUE&PUSH 0)                   ; X
173   (CALL 3 22)                         ; POWERCOEFLIST
176   (CDR)
177   (CAR)
178   (STORE 3)
179   (JMPIF L184)
181   (LOAD&JMPIF 4 L233)
184   L184
184   (LOAD&JMPIF 4 L191)
187   (LOAD&JMPIF 3 L271)
191   L191
191   (LOAD&JMPIFNOT 3 L198)
194   (LOAD&JMPIF 4 L335)
198   L198
198   (NIL)
199   (UNBIND1)
200   (SKIP 8)
202   (UNBIND 7)
204   L204
204   (UNBIND1)
205   (SKIP&RET 3)
207   L207
207   (CONST 16)                          ; 0
208   (UNBIND1)
209   (SKIP 8)
211   (UNBIND 7)
213   (JMP L204)
215   L215
215   (GETVALUE&PUSH 5)                   ; D
217   (LOAD&PUSH 5)
218   (LOAD&PUSH 11)
219   (LOAD&PUSH 10)
220   (GETVALUE&PUSH 3)                   ; C
222   (GETVALUE&PUSH 2)                   ; B
224   (GETVALUE&PUSH 1)                   ; A
226   (GETVALUE&PUSH 0)                   ; X
228   (CALL 7 24)                         ; NUMMNUMN
231   (JMP L290)
233   L233
233   (LOAD&PUSH 5)
234   (JMPIFEQTO 23 L215)                 ; $POSITIVE
237   (GETVALUE&PUSH 5)                   ; D
239   (LOAD&PUSH 5)
240   (LOAD&PUSH 10)
241   (GETVALUE&PUSH 3)                   ; C
243   (GETVALUE&PUSH 2)                   ; B
245   (GETVALUE&PUSH 1)                   ; A
247   (GETVALUE&PUSH 0)                   ; X
249   (CALL 6 26)                         ; NUMMDENN
252   (JMP L290)
254   L254
254   (GETVALUE&PUSH 5)                   ; D
256   (LOAD&PUSH 4)
257   (LOAD&PUSH 9)
258   (GETVALUE&PUSH 3)                   ; C
260   (GETVALUE&PUSH 2)                   ; B
262   (GETVALUE&PUSH 1)                   ; A
264   (GETVALUE&PUSH 0)                   ; X
266   (CALL 6 27)                         ; DENMNUMN
269   (JMP L290)
271   L271
271   (LOAD&PUSH 5)
272   (JMPIFEQTO 23 L254)                 ; $POSITIVE
275   (GETVALUE&PUSH 5)                   ; D
277   (LOAD&PUSH 4)
278   (LOAD&PUSH 10)
279   (GETVALUE&PUSH 3)                   ; C
281   (GETVALUE&PUSH 2)                   ; B
283   (GETVALUE&PUSH 1)                   ; A
285   (GETVALUE&PUSH 0)                   ; X
287   (CALL 6 28)                         ; DENMDENN
290   L290
290   (PUSH)
291   (CALL2&PUSH 21)                     ; MUL
293   (CALL1 25)                          ; AUGMULT
295   (JMP L380)
298   L298
298   (GETVALUE&PUSH 5)                   ; D
300   (LOAD&PUSH 5)
301   (LOAD&PUSH 11)
302   (LOAD&PUSH 10)
303   (GETVALUE&PUSH 3)                   ; C
305   (GETVALUE&PUSH 2)                   ; B
307   (GETVALUE&PUSH 1)                   ; A
309   (GETVALUE&PUSH 0)                   ; X
311   (CALL&PUSH 7 24)                    ; NUMMNUMN
314   (CALL2&PUSH 21)                     ; MUL
316   (CALL1&PUSH 25)                     ; AUGMULT
318   (GETVALUE&PUSH 5)                   ; D
320   (LOAD&PUSH 5)
321   (LOAD&PUSH 10)
322   (GETVALUE&PUSH 3)                   ; C
324   (GETVALUE&PUSH 2)                   ; B
326   (GETVALUE&PUSH 1)                   ; A
328   (GETVALUE&PUSH 0)                   ; X
330   (CALL 6 27)                         ; DENMNUMN
333   (JMP L373)
335   L335
335   (LOAD&PUSH 5)
336   (JMPIFEQTO 23 L298)                 ; $POSITIVE
339   (GETVALUE&PUSH 5)                   ; D
341   (LOAD&PUSH 5)
342   (LOAD&PUSH 10)
343   (GETVALUE&PUSH 3)                   ; C
345   (GETVALUE&PUSH 2)                   ; B
347   (GETVALUE&PUSH 1)                   ; A
349   (GETVALUE&PUSH 0)                   ; X
351   (CALL&PUSH 6 26)                    ; NUMMDENN
354   (CALL2&PUSH 21)                     ; MUL
356   (CALL1&PUSH 25)                     ; AUGMULT
358   (GETVALUE&PUSH 5)                   ; D
360   (LOAD&PUSH 5)
361   (LOAD&PUSH 11)
362   (GETVALUE&PUSH 3)                   ; C
364   (GETVALUE&PUSH 2)                   ; B
366   (GETVALUE&PUSH 1)                   ; A
368   (GETVALUE&PUSH 0)                   ; X
370   (CALL 6 28)                         ; DENMDENN
373   L373
373   (PUSH)
374   (CALL2&PUSH 21)                     ; MUL
376   (CALL1&PUSH 25)                     ; AUGMULT
378   (CALL2 29)                          ; ADD
380   L380
380   (UNBIND1)
381   (SKIP 8)
383   (UNBIND 7)
385   (JMP L204)


Disassembly of function #:|(DEFUN JMAUG (EXP VAR) ...)-40|
(CONST 0) = JMAUG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE JMAUG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; JMAUG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; JMAUG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE JMAUG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; JMAUG
8     (SKIP&RET 1)


Disassembly of function JMAUG
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = 
((MTIMES) ((COEFFTT) (D FREEVAR)) ((COEFFTT) (P POLYP))
 ((MEXPT) ((MPLUS) ((COEFFPT) (F FREEVAR) (X VARP)) ((COEFFPP) (E FREEVAR)))
  (M MAXIMA-INTEGERP))
 ((MEXPT)
  ((MPLUS) ((COEFFPT) (A FREEVAR) ((MEXPT) (X VARP) 2))
   ((COEFFPT) (B FREEVAR) (X VARP)) ((COEFFPP) (C FREEVAR)))
  (N INTEGERP1)))
(CONST 3) = M2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; EXP
8     (CONST&PUSH 2)                      ; ((MTIMES) (# #) (# #) (# # #) ...)
9     (NIL&PUSH)
10    (CALL 3 3)                          ; M2
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FACTPOW (EXP VAR) ...)-41|
(CONST 0) = FACTPOW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTPOW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTPOW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTPOW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTPOW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTPOW
8     (SKIP&RET 1)


Disassembly of function FACTPOW
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = 
((MTIMES) ((COEFFTT) (D FREEVAR)) ((COEFFTT) (P POLYP))
 ((MEXPT) (R1 HASVAR) (E1 INTEGERPFR)) ((MEXPT) (R2 HASVAR) (E2 INTEGERPFR))
 ((MEXPT) (R0 HASVAR) (E0 MAXIMA-INTEGERP)))
(CONST 3) = M2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; EXP
8     (CONST&PUSH 2)                      ; ((MTIMES) (# #) (# #) (# # #) ...)
9     (NIL&PUSH)
10    (CALL 3 3)                          ; M2
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ELLIPTQUAD (EXP VAR) ...)-42|
(CONST 0) = ELLIPTQUAD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELLIPTQUAD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELLIPTQUAD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELLIPTQUAD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELLIPTQUAD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELLIPTQUAD
8     (SKIP&RET 1)


Disassembly of function ELLIPTQUAD
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = 
((MTIMES) ((COEFFTT) (D FREEVAR)) ((COEFFTT) (P POLYP))
 ((MEXPT)
  ((MPLUS) ((COEFFPT) (E FREEVNZ) ((MEXPT) (X VARP) 2))
   ((COEFFPT) (F FREEVAR) (X VARP)) ((COEFFPP) (G FREEVAR)))
  -1)
 ((MEXPT) (R0 HASVAR) (E0 INTEGERPFR)))
(CONST 3) = M2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; EXP
8     (CONST&PUSH 2)                      ; ((MTIMES) (# #) (# #) (# # -1) ...)
9     (NIL&PUSH)
10    (CALL 3 3)                          ; M2
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN POLFOO (C B A ...) ...)-43|
(CONST 0) = POLFOO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLFOO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLFOO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLFOO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLFOO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLFOO
8     (SKIP&RET 1)


Disassembly of function POLFOO
(CONST 0) = C
(CONST 1) = B
(CONST 2) = A
(CONST 3) = X
(CONST 4) = MUL
(CONST 5) = ADD
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A B X C)
19 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; C
3     (LOAD 6)
4     (BIND 1)                            ; B
6     (LOAD 8)
7     (BIND 2)                            ; A
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (GETVALUE&PUSH 0)                   ; C
14    (GETVALUE&PUSH 3)                   ; X
16    (GETVALUE&PUSH 3)                   ; X
18    (CALL&PUSH 3 4)                     ; MUL
21    (GETVALUE&PUSH 1)                   ; B
23    (GETVALUE&PUSH 3)                   ; X
25    (CALL2&PUSH 4)                      ; MUL
27    (GETVALUE&PUSH 2)                   ; A
29    (CALL 3 5)                          ; ADD
32    (UNBIND 4)
34    (SKIP&RET 5)


Disassembly of function #:|(DEFUN POWERCOEFLIST (FUN M VAR) ...)-44|
(CONST 0) = POWERCOEFLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POWERCOEFLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POWERCOEFLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POWERCOEFLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POWERCOEFLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POWERCOEFLIST
8     (SKIP&RET 1)


Disassembly of function POWERCOEFLIST
(CONST 0) = M
(CONST 1) = VAR
(CONST 2) = COEF
(CONST 3) = PREVCONSTEXPAN
(CONST 4) = POWER
(CONST 5) = MUL
(CONST 6) = $EXPAND
(CONST 7) = UNQUOTE
(CONST 8) = 1
(CONST 9) = 0
(CONST 10) = $HIPOW
(CONST 11) = $LOPOW
(CONST 12) = $COEFF
(CONST 13) = CONSTERM
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (COEF M VAR)
writes special variable : (COEF)
132 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; M
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (PUSH-NIL 3)
8     (NIL)
9     (BIND 2)                            ; COEF
11    (PUSH-NIL 2)
13    (LOAD&PUSH 17)
14    (GETVALUE&PUSH 1)                   ; VAR
16    (CALL2&PUSH 3)                      ; PREVCONSTEXPAN
18    (GETVALUE&PUSH 1)                   ; VAR
20    (GETVALUE&PUSH 0)                   ; M
22    (CALL2&PUSH 4)                      ; POWER
24    (CALL2&PUSH 5)                      ; MUL
26    (CALL1&PUSH 6)                      ; $EXPAND
28    (CALL1 7)                           ; UNQUOTE
30    (STORE 7)
31    (LOAD&PUSH 17)
32    (JMPIFNOTEQTO 8 L42)                ; 1
35    (GETVALUE&PUSH 0)                   ; M
37    (CONST&PUSH 9)                      ; 0
38    (CALLSR&JMPIF 1 48 L68)             ; >
42    L42
42    (LOAD&PUSH 17)
43    (JMPIFNOTEQTO 8 L74)                ; 1
46    (GETVALUE&PUSH 0)                   ; M
48    (CONST&PUSH 9)                      ; 0
49    (CALLSR&JMPIFNOT 1 47 L74)          ; <
53    (NIL&PUSH)
54    (GETVALUE&PUSH 0)                   ; M
56    (CALLSR&PUSH 0 54)                  ; -
59    (CONST 8)                           ; 1
60    L60
60    (PUSH)
61    (LIST 1)
63    (CONS&PUSH)
64    (LIST 1)
66    (JMP L86)
68    L68
68    (NIL&PUSH)
69    (GETVALUE&PUSH 0)                   ; M
71    (CONST 8)                           ; 1
72    (JMP L60)
74    L74
74    (LOAD&PUSH 7)
75    (JMPIFNOTEQTO 8 L93)                ; 1
78    (CONST&PUSH 9)                      ; 0
79    (CONST&PUSH 8)                      ; 1
80    (LIST 1)
82    (CONS&PUSH)
83    (LIST&PUSH 1)
85    (NIL)
86    L86
86    (PUSH)
87    (LIST 1)
89    (CONS)
90    (JMP L206)
93    L93
93    (LOAD&PUSH 7)
94    (GETVALUE&PUSH 1)                   ; VAR
96    (CALL2 10)                          ; $HIPOW
98    (STORE 6)
99    (LOAD&PUSH 7)
100   (GETVALUE&PUSH 1)                   ; VAR
102   (CALL2 11)                          ; $LOPOW
104   (STORE 5)
105   (JMP L109)
107   L107
107   (LOAD&INC&STORE 5)
109   L109
109   (LOAD&PUSH 7)
110   (GETVALUE&PUSH 1)                   ; VAR
112   (LOAD&PUSH 7)
113   (CALL2&PUSH 4)                      ; POWER
115   (CALL2 12)                          ; $COEFF
117   (SETVALUE 2)                        ; COEF
119   (PUSH)
120   (CALLS2&JMPIFNOT 8 L132)            ; NUMBERP
123   (LOAD&PUSH 5)
124   (CALLS2&JMPIF 145 L132)             ; ZEROP
127   (GETVALUE&PUSH 2)                   ; COEF
129   (CALLS2&JMPIF 145 L107)             ; ZEROP
132   L132
132   (LOAD&PUSH 5)
133   (CONST&PUSH 9)                      ; 0
134   (CALLSR&JMPIFNOT 1 48 L151)         ; >
138   (LOAD&PUSH 1)
139   (LOAD&PUSH 6)
140   (GETVALUE&PUSH 2)                   ; COEF
142   (LIST 1)
144   (CONS&PUSH)
145   (LIST&PUSH 1)
147   (CALLSR&STORE 2 34 1)               ; APPEND
151   L151
151   (LOAD&PUSH 5)
152   (CALLS2&JMPIFNOT 145 L172)          ; ZEROP
155   (LOAD&PUSH 1)
156   (CONST&PUSH 9)                      ; 0
157   (LOAD&CDR&PUSH 9)
159   (GETVALUE&PUSH 1)                   ; VAR
161   (CALL2&PUSH 13)                     ; CONSTERM
163   (LIST 1)
165   (CONS&PUSH)
166   (LIST&PUSH 1)
168   (CALLSR&STORE 2 34 1)               ; APPEND
172   L172
172   (LOAD&PUSH 5)
173   (CONST&PUSH 9)                      ; 0
174   (CALLSR&JMPIFNOT 1 47 L194)         ; <
178   (LOAD&PUSH 0)
179   (LOAD&PUSH 6)
180   (CALLSR&PUSH 0 54)                  ; -
183   (GETVALUE&PUSH 2)                   ; COEF
185   (LIST 1)
187   (CONS&PUSH)
188   (LIST&PUSH 1)
190   (CALLSR&STORE 2 34 0)               ; APPEND
194   L194
194   (LOAD&PUSH 5)
195   (LOAD&PUSH 7)
196   (CALLS2&JMPIFNOT 2 L107)            ; EQUAL
200   (LOAD&PUSH 1)
201   (LOAD&PUSH 1)
202   (CALLS2&PUSH 72)                    ; REVERSE
204   (LIST 2)
206   L206
206   (SKIP 2)
208   (UNBIND1)
209   (SKIP 3)
211   (UNBIND 2)
213   (SKIP&RET 4)


Disassembly of function #:|(DEFUN CONSTERM (FUN VAR) ...)-45|
(CONST 0) = CONSTERM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTERM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTERM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTERM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTERM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTERM
8     (SKIP&RET 1)


Disassembly of function CONSTERM
(CONST 0) = VAR
(CONST 1) = 0
(CONST 2) = FREEOF
(CONST 3) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
23 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&JMPIFNOT 5 L22)
6     (GETVALUE&PUSH 0)                   ; VAR
8     (LOAD&CAR&PUSH 6)
10    (CALL2&JMPIF 2 L25)                 ; FREEOF
13    (LOAD&CDR&PUSH 5)
15    (GETVALUE&PUSH 0)                   ; VAR
17    (JSR L0)
19    L19
19    (UNBIND1)
20    (SKIP&RET 3)
22    L22
22    (CONST 1)                           ; 0
23    (JMP L19)
25    L25
25    (LOAD&CAR&PUSH 5)
27    (LOAD&CDR&PUSH 6)
29    (GETVALUE&PUSH 0)                   ; VAR
31    (JSR&PUSH L0)
33    (CALL2 3)                           ; ADD
35    (JMP L19)


Disassembly of function #:|(DEFUN PREVCONSTEXPAN (FUN VAR) ...)-46|
(CONST 0) = PREVCONSTEXPAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PREVCONSTEXPAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PREVCONSTEXPAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PREVCONSTEXPAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PREVCONSTEXPAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PREVCONSTEXPAN
8     (SKIP&RET 1)


Disassembly of function PREVCONSTEXPAN
(CONST 0) = VAR
(CONST 1) = MPLUS
(CONST 2) = FREEOF
(CONST 3) = MEXPT
(CONST 4) = INSIDE
(CONST 5) = (MQUOTE)
(CONST 6) = (MQUOTE)
(CONST 7) = DISTRINPLUSPREV
(CONST 8) = MTIMES
(CONST 9) = DISTRINTIMESPREV
(CONST 10) = POWER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
82 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD 5)
4     (JMPIFATOM L48)
6     (LOAD 5)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 1 L96)                ; MPLUS
13    (GETVALUE&PUSH 0)                   ; VAR
15    (LOAD&PUSH 6)
16    (CALL2&JMPIFNOT 2 L24)              ; FREEOF
19    (LOAD&PUSH 5)
20    (CONST&PUSH 3)                      ; MEXPT
21    (CALL2&JMPIFNOT 4 L52)              ; INSIDE
24    L24
24    (GETVALUE&PUSH 0)                   ; VAR
26    (LOAD&PUSH 6)
27    (CALL2&JMPIFNOT 2 L64)              ; FREEOF
30    (LOAD&PUSH 5)
31    (CONST&PUSH 3)                      ; MEXPT
32    (CALL2&JMPIFNOT 4 L64)              ; INSIDE
35    (CONST&PUSH 6)                      ; (MQUOTE)
36    (LOAD&CDR&PUSH 6)
38    (GETVALUE&PUSH 0)                   ; VAR
40    (CALL2 7)                           ; DISTRINPLUSPREV
42    L42
42    (PUSH)
43    (LIST 2)
45    (JMP L116)
48    L48
48    (LOAD 5)
49    (JMP L116)
52    L52
52    (CONST&PUSH 5)                      ; (MQUOTE)
53    (LOAD 6)
54    (JMP L42)
56    L56
56    (LOAD&CDR&PUSH 5)
58    (GETVALUE&PUSH 0)                   ; VAR
60    (CALL2 7)                           ; DISTRINPLUSPREV
62    (JMP L116)
64    L64
64    (LOAD&PUSH 5)
65    (CONST&PUSH 3)                      ; MEXPT
66    (CALL2&JMPIF 4 L56)                 ; INSIDE
69    (LOAD 5)
70    (JMP L116)
72    L72
72    (LOAD&CDR&PUSH 5)
74    (GETVALUE&PUSH 0)                   ; VAR
76    (CALL2 9)                           ; DISTRINTIMESPREV
78    (JMP L116)
80    L80
80    (LOAD 5)
81    (CDR)
82    (CAR&PUSH)
83    (GETVALUE&PUSH 0)                   ; VAR
85    (JSR&PUSH L0)
88    (LOAD 6)
89    (CDR)
90    (CDR)
91    (CAR&PUSH)
92    (CALL2 10)                          ; POWER
94    (JMP L116)
96    L96
96    (LOAD 5)
97    (CAR)
98    (CAR&PUSH)
99    (JMPIFEQTO 8 L72)                   ; MTIMES
102   (LOAD&CDR&PUSH 5)
104   (GETVALUE&PUSH 0)                   ; VAR
106   (CALL2&JMPIF 4 L115)                ; INSIDE
109   (LOAD 5)
110   (CAR)
111   (CAR&PUSH)
112   (JMPIFEQTO 3 L80)                   ; MEXPT
115   L115
115   (LOAD 5)
116   L116
116   (UNBIND1)
117   (SKIP&RET 3)


Disassembly of function #:|(DEFUN DISTRINPLUSPREV (FUN VAR) ...)-47|
(CONST 0) = DISTRINPLUSPREV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTRINPLUSPREV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTRINPLUSPREV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTRINPLUSPREV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTRINPLUSPREV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTRINPLUSPREV
8     (SKIP&RET 1)


Disassembly of function DISTRINPLUSPREV
(CONST 0) = VAR
(CONST 1) = 0
(CONST 2) = PREVCONSTEXPAN
(CONST 3) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
17 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&JMPIFNOT 5 L23)
6     (LOAD&CAR&PUSH 5)
8     (GETVALUE&PUSH 0)                   ; VAR
10    (CALL2&PUSH 2)                      ; PREVCONSTEXPAN
12    (LOAD&CDR&PUSH 6)
14    (GETVALUE&PUSH 0)                   ; VAR
16    (JSR&PUSH L0)
18    (CALL2 3)                           ; ADD
20    L20
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (CONST 1)                           ; 0
24    (JMP L20)


Disassembly of function #:|(DEFUN DISTRINTIMESPREV (FUN VAR) ...)-48|
(CONST 0) = DISTRINTIMESPREV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTRINTIMESPREV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTRINTIMESPREV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTRINTIMESPREV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTRINTIMESPREV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTRINTIMESPREV
8     (SKIP&RET 1)


Disassembly of function DISTRINTIMESPREV
(CONST 0) = VAR
(CONST 1) = 1
(CONST 2) = PREVCONSTEXPAN
(CONST 3) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
17 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&JMPIFNOT 5 L23)
6     (LOAD&CAR&PUSH 5)
8     (GETVALUE&PUSH 0)                   ; VAR
10    (CALL2&PUSH 2)                      ; PREVCONSTEXPAN
12    (LOAD&CDR&PUSH 6)
14    (GETVALUE&PUSH 0)                   ; VAR
16    (JSR&PUSH L0)
18    (CALL2 3)                           ; MUL
20    L20
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (CONST 1)                           ; 1
24    (JMP L20)


Disassembly of function #:|(DEFUN INSIDE (FUN ARG) ...)-49|
(CONST 0) = INSIDE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INSIDE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSIDE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INSIDE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INSIDE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INSIDE
8     (SKIP&RET 1)


Disassembly of function INSIDE
(CONST 0) = ARG
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
23 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (LOAD 5)
4     (JMPIFATOM L23)
6     (LOAD&CAR&PUSH 5)
8     (GETVALUE&PUSH 0)                   ; ARG
10    (JSR L0)
12    (JMPIF L30)
14    (LOAD&CDR&PUSH 5)
16    (GETVALUE&PUSH 0)                   ; ARG
18    (JSR L0)
20    L20
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (LOAD&PUSH 5)
24    (GETVALUE&PUSH 0)                   ; ARG
26    (CALLS2 2)                          ; EQUAL
28    (JMP L20)
30    L30
30    (T)
31    (JMP L20)


Disassembly of function #:|(DEFUN UNQUOTE (FUN) ...)-50|
(CONST 0) = UNQUOTE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UNQUOTE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UNQUOTE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UNQUOTE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UNQUOTE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UNQUOTE
8     (SKIP&RET 1)


Disassembly of function UNQUOTE
(CONST 0) = MQUOTE
(CONST 1) = INSIDE
(CONST 2) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; MQUOTE
2     (CALL2&JMPIFNOT 1 L12)              ; INSIDE
5     (LOAD&PUSH 1)
6     (CALL1&PUSH 2)                      ; MEVAL
8     (JMPTAIL 1 3 L0)
12    L12
12    (LOAD 1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CHECKSIGNTM (EXPR) ...)-51|
(CONST 0) = CHECKSIGNTM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKSIGNTM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKSIGNTM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKSIGNTM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKSIGNTM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKSIGNTM
8     (SKIP&RET 1)


Disassembly of function CHECKSIGNTM
(CONST 0) = ZEROSIGNTEST
(CONST 1) = PRODUCTCASE
(CONST 2) = CHECKCOEFSIGNLIST
(CONST 3) = MTIMES
(CONST 4) = CHECKFLAGANDACT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (CHECKCOEFSIGNLIST)
writes special variables : (CHECKCOEFSIGNLIST PRODUCTCASE)
50 byte-code instructions:
0     (PUSH-NIL 2)
2     (NIL)
3     (BIND 0)                            ; ZEROSIGNTEST
5     (NIL)
6     (BIND 1)                            ; PRODUCTCASE
8     (GETVALUE 2)                        ; CHECKCOEFSIGNLIST
10    (STORE 7)
11    (LOAD 9)
12    (JMPIFATOM L20)
14    (LOAD 9)
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 3 L38)                   ; MTIMES
20    L20
20    (LOAD&JMPIFNOT 7 L44)
23    L23
23    (LOAD 7)
24    (CAR)
25    (CAR&PUSH)
26    (LOAD&PUSH 10)
27    (CALLS2&JMPIFNOT 2 L66)             ; EQUAL
30    (LOAD 7)
31    (CAR)
32    (CDR)
33    (CAR)
34    L34
34    (UNBIND 2)
36    (SKIP&RET 4)
38    L38
38    (T)
39    (SETVALUE 1)                        ; PRODUCTCASE
41    (LOAD&JMPIF 7 L23)
44    L44
44    (GETVALUE&PUSH 2)                   ; CHECKCOEFSIGNLIST
46    (LOAD&PUSH 10)
47    (LOAD&PUSH 11)
48    (CALL1 4)                           ; CHECKFLAGANDACT
50    (STORE 8)
52    (PUSH)
53    (LIST 1)
55    (CONS&PUSH)
56    (LIST&PUSH 1)
58    (CALLSR 2 34)                       ; APPEND
61    (SETVALUE 2)                        ; CHECKCOEFSIGNLIST
63    (LOAD 6)
64    (JMP L34)
66    L66
66    (LOAD&CDR&STORE 7)
68    (LOAD&JMPIFNOT 7 L44)
71    (JMP L23)


Disassembly of function #:|(DEFUN CHECKFLAGANDACT (EXPR) ...)-52|
(CONST 0) = CHECKFLAGANDACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKFLAGANDACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKFLAGANDACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKFLAGANDACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKFLAGANDACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKFLAGANDACT
8     (SKIP&RET 1)


Disassembly of function CHECKFLAGANDACT
(CONST 0) = PRODUCTCASE
(CONST 1) = FINDSIGNOFACTORS
(CONST 2) = FINDSIGNOFTHEIRPRODUCT
(CONST 3) = $REALPART
(CONST 4) = ASKSIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (PRODUCTCASE)
writes special variable : (PRODUCTCASE)
13 byte-code instructions:
0     (GETVALUE 0)                        ; PRODUCTCASE
2     (JMPIF L11)
4     (LOAD&PUSH 1)
5     (CALL1&PUSH 3)                      ; $REALPART
7     (CALL1 4)                           ; ASKSIGN
9     (SKIP&RET 2)
11    L11
11    (NIL)
12    (SETVALUE 0)                        ; PRODUCTCASE
14    (LOAD&CDR&PUSH 1)
16    (CALL1&PUSH 1)                      ; FINDSIGNOFACTORS
18    (CALL1 2)                           ; FINDSIGNOFTHEIRPRODUCT
20    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FINDSIGNOFACTORS (LISTOFACTORS) ...)-53|
(CONST 0) = FINDSIGNOFACTORS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDSIGNOFACTORS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDSIGNOFACTORS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDSIGNOFACTORS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDSIGNOFACTORS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDSIGNOFACTORS
8     (SKIP&RET 1)


Disassembly of function FINDSIGNOFACTORS
(CONST 0) = ZEROSIGNTEST
(CONST 1) = $ZERO
(CONST 2) = CHECKSIGNTM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ZEROSIGNTEST)
writes special variable : (ZEROSIGNTEST)
21 byte-code instructions:
0     (LOAD&JMPIF 1 L12)
3     L3
3     (NIL)
4     (SKIP&RET 2)
6     L6
6     (CONST 1)                           ; $ZERO
7     (SKIP&RET 2)
9     L9
9     (LOAD&JMPIFNOT 1 L3)
12    L12
12    (GETVALUE&PUSH 0)                   ; ZEROSIGNTEST
14    (JMPIFEQTO 1 L6)                    ; $ZERO
17    (LOAD&CAR&PUSH 1)
19    (CALL1 2)                           ; CHECKSIGNTM
21    (SETVALUE 0)                        ; ZEROSIGNTEST
23    (PUSH)
24    (LIST&PUSH 1)
26    (LOAD&CDR&PUSH 2)
28    (JSR&PUSH L9)
30    (CALLSR 2 34)                       ; APPEND
33    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FINDSIGNOFTHEIRPRODUCT (LLIST) ...)-54|
(CONST 0) = FINDSIGNOFTHEIRPRODUCT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDSIGNOFTHEIRPRODUCT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDSIGNOFTHEIRPRODUCT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDSIGNOFTHEIRPRODUCT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDSIGNOFTHEIRPRODUCT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDSIGNOFTHEIRPRODUCT
8     (SKIP&RET 1)


Disassembly of function FINDSIGNOFTHEIRPRODUCT
(CONST 0) = SIGN
(CONST 1) = $ZERO
(CONST 2) = $POSITIVE
(CONST 3) = $NEGATIVE
(CONST 4) = CHANGESIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (SIGN)
writes special variable : (SIGN)
29 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; SIGN
3     (LOAD&PUSH 4)
4     (JMPIFEQTO 1 L17)                   ; $ZERO
7     (CONST 2)                           ; $POSITIVE
8     (SETVALUE 0)                        ; SIGN
10    (LOAD&JMPIF 4 L31)
13    L13
13    (GETVALUE 0)                        ; SIGN
15    (JMP L42)
17    L17
17    (CONST 1)                           ; $ZERO
18    (JMP L42)
20    L20
20    (GETVALUE&PUSH 0)                   ; SIGN
22    (CALL1 4)                           ; CHANGESIGN
24    (SETVALUE 0)                        ; SIGN
26    L26
26    (LOAD&CDR&STORE 4)
28    (LOAD&JMPIFNOT 4 L13)
31    L31
31    (LOAD&CAR&PUSH 4)
33    (JMPIFEQTO 2 L26)                   ; $POSITIVE
36    (LOAD&CAR&PUSH 4)
38    (JMPIFEQTO 3 L20)                   ; $NEGATIVE
41    (CONST 1)                           ; $ZERO
42    L42
42    (UNBIND1)
43    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CHANGESIGN (SIGN) ...)-55|
(CONST 0) = CHANGESIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHANGESIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHANGESIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHANGESIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHANGESIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHANGESIGN
8     (SKIP&RET 1)


Disassembly of function CHANGESIGN
(CONST 0) = SIGN
(CONST 1) = $POSITIVE
(CONST 2) = $NEGATIVE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (SIGN)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; SIGN
3     (GETVALUE&PUSH 0)                   ; SIGN
5     (JMPIFEQTO 1 L12)                   ; $POSITIVE
8     (CONST 1)                           ; $POSITIVE
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (CONST 2)                           ; $NEGATIVE
13    (JMP L9)


Disassembly of function #:|(DEFUN DEN1 (C B A ...) ...)-56|
(CONST 0) = DEN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEN1
8     (SKIP&RET 1)


Disassembly of function DEN1
(CONST 0) = C
(CONST 1) = B
(CONST 2) = A
(CONST 3) = X
(CONST 4) = (RAT)
(CONST 5) = -1
(CONST 6) = 2
(CONST 7) = MUL
(CONST 8) = ADD
(CONST 9) = POWER
(CONST 10) = CHECKSIGNTM
(CONST 11) = SIGNDIS2
(CONST 12) = $POSITIVE
(CONST 13) = $NEGATIVE
(CONST 14) = (%ASINH)
(CONST 15) = 4
(CONST 16) = MUL*
(CONST 17) = AUGMULT
(CONST 18) = $ZERO
(CONST 19) = (%LOG)
(CONST 20) = (%LOG)
(CONST 21) = R12
(CONST 22) = POLFOO
(CONST 23) = (%ASIN)
(CONST 24) = -4
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R12 A B X C)
159 byte-code instructions:
0     L0
0     (LOAD 4)
1     (BIND 0)                            ; C
3     (LOAD 6)
4     (BIND 1)                            ; B
6     (LOAD 8)
7     (BIND 2)                            ; A
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (CONST&PUSH 4)                      ; (RAT)
13    (CONST&PUSH 5)                      ; -1
14    (CONST&PUSH 6)                      ; 2
15    (LIST&PUSH 3)
17    (CONST&PUSH 6)                      ; 2
18    (GETVALUE&PUSH 0)                   ; C
20    (GETVALUE&PUSH 3)                   ; X
22    (CALL&PUSH 3 7)                     ; MUL
25    (GETVALUE&PUSH 1)                   ; B
27    (CALL2&PUSH 8)                      ; ADD
29    (PUSH-NIL 3)
31    (GETVALUE&PUSH 0)                   ; C
33    (CONST&PUSH 5)                      ; -1
34    (CALL2&PUSH 9)                      ; POWER
36    (CALL1 10)                          ; CHECKSIGNTM
38    (STORE 1)
39    (GETVALUE&PUSH 1)                   ; B
41    (CONST&PUSH 6)                      ; 2
42    (CALL2&PUSH 9)                      ; POWER
44    (CALL1 10)                          ; CHECKSIGNTM
46    (STORE 0)
47    (GETVALUE&PUSH 0)                   ; C
49    (GETVALUE&PUSH 1)                   ; B
51    (GETVALUE&PUSH 2)                   ; A
53    (LOAD&PUSH 4)
54    (LOAD&PUSH 4)
55    (CALL 5 11)                         ; SIGNDIS2
58    (STORE 2)
59    (LOAD&PUSH 1)
60    (JMPIFNOTEQTO 12 L68)               ; $POSITIVE
63    (LOAD&PUSH 2)
64    (JMPIFEQTO 13 L133)                 ; $NEGATIVE
68    L68
68    (LOAD&PUSH 1)
69    (JMPIFNOTEQTO 12 L77)               ; $POSITIVE
72    (LOAD&PUSH 2)
73    (JMPIFEQTO 18 L165)                 ; $ZERO
77    L77
77    (LOAD&PUSH 1)
78    (JMPIFEQTO 12 L178)                 ; $POSITIVE
82    (LOAD&PUSH 1)
83    (JMPIFNOTEQTO 13 L219)              ; $NEGATIVE
87    (LOAD&PUSH 2)
88    (JMPIFNOTEQTO 12 L219)              ; $POSITIVE
92    (CONST&PUSH 5)                      ; -1
93    (CONST&PUSH 5)                      ; -1
94    (GETVALUE&PUSH 0)                   ; C
96    (CALL2&PUSH 7)                      ; MUL
98    (LOAD&PUSH 6)
99    (CALL2&PUSH 9)                      ; POWER
101   (CONST&PUSH 23)                     ; (%ASIN)
102   (LOAD&PUSH 6)
103   (GETVALUE&PUSH 1)                   ; B
105   (GETVALUE&PUSH 1)                   ; B
107   (CALL2&PUSH 7)                      ; MUL
109   (CONST&PUSH 24)                     ; -4
110   (GETVALUE&PUSH 0)                   ; C
112   (GETVALUE&PUSH 2)                   ; A
114   (CALL&PUSH 3 7)                     ; MUL
117   (CALL2&PUSH 8)                      ; ADD
119   (LOAD&PUSH 9)
120   (CALL2&PUSH 9)                      ; POWER
122   (CALL2 7)                           ; MUL
124   L124
124   (PUSH)
125   (LIST&PUSH 2)
127   (CALL 3 16)                         ; MUL*
130   (JMP L249)
133   L133
133   (GETVALUE&PUSH 0)                   ; C
135   (LOAD&PUSH 5)
136   (CALL2&PUSH 9)                      ; POWER
138   (CONST&PUSH 14)                     ; (%ASINH)
139   (LOAD&PUSH 5)
140   (CONST&PUSH 15)                     ; 4
141   (GETVALUE&PUSH 0)                   ; C
143   (GETVALUE&PUSH 2)                   ; A
145   (CALL&PUSH 3 7)                     ; MUL
148   (CONST&PUSH 5)                      ; -1
149   (GETVALUE&PUSH 1)                   ; B
151   (GETVALUE&PUSH 1)                   ; B
153   (CALL&PUSH 3 7)                     ; MUL
156   (CALL2&PUSH 8)                      ; ADD
158   (LOAD&PUSH 8)
159   (CALL2&PUSH 9)                      ; POWER
161   (CALL2 7)                           ; MUL
163   (JMP L212)
165   L165
165   (CONST&PUSH 5)                      ; -1
166   (LOAD&PUSH 4)
167   (CALL2&PUSH 9)                      ; POWER
169   (GETVALUE&PUSH 0)                   ; C
171   (LOAD&PUSH 6)
172   (CALL2&PUSH 9)                      ; POWER
174   (CONST&PUSH 19)                     ; (%LOG)
175   (LOAD 6)
176   (JMP L124)
178   L178
178   (GETVALUE&PUSH 0)                   ; C
180   (LOAD&PUSH 5)
181   (CALL2&PUSH 9)                      ; POWER
183   (CONST&PUSH 20)                     ; (%LOG)
184   (CONST&PUSH 6)                      ; 2
185   (GETVALUE&PUSH 0)                   ; C
187   (GETVALUE&PUSH 21)                  ; R12
189   (CALL2&PUSH 9)                      ; POWER
191   (GETVALUE&PUSH 0)                   ; C
193   (GETVALUE&PUSH 1)                   ; B
195   (GETVALUE&PUSH 2)                   ; A
197   (GETVALUE&PUSH 3)                   ; X
199   (CALL&PUSH 4 22)                    ; POLFOO
202   (GETVALUE&PUSH 21)                  ; R12
204   (CALL2&PUSH 9)                      ; POWER
206   (CALL&PUSH 3 7)                     ; MUL
209   (LOAD&PUSH 6)
210   (CALL2 8)                           ; ADD
212   L212
212   (PUSH)
213   (LIST&PUSH 2)
215   (CALL2 16)                          ; MUL*
217   (JMP L249)
219   L219
219   (LOAD&PUSH 1)
220   (JMPIFNOTEQTO 13 L256)              ; $NEGATIVE
223   (CONST&PUSH 5)                      ; -1
224   (LOAD&PUSH 5)
225   (CALL2&PUSH 9)                      ; POWER
227   (CONST&PUSH 5)                      ; -1
228   (GETVALUE&PUSH 0)                   ; C
230   (CALL2&PUSH 7)                      ; MUL
232   (CONST&PUSH 5)                      ; -1
233   (GETVALUE&PUSH 1)                   ; B
235   (CALL2&PUSH 7)                      ; MUL
237   (CONST&PUSH 5)                      ; -1
238   (GETVALUE&PUSH 2)                   ; A
240   (CALL2&PUSH 7)                      ; MUL
242   (GETVALUE&PUSH 3)                   ; X
244   (JSR&PUSH L0)
247   (CALL2 7)                           ; MUL
249   L249
249   (PUSH)
250   (CALL1 17)                          ; AUGMULT
252   (SKIP 5)
254   (JMP L259)
256   L256
256   (NIL)
257   (SKIP 5)
259   L259
259   (UNBIND 4)
261   (SKIP&RET 5)


Disassembly of function #:|(DEFUN SIGNDISCR (C B A) ...)-57|
(CONST 0) = SIGNDISCR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNDISCR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNDISCR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNDISCR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNDISCR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNDISCR
8     (SKIP&RET 1)


Disassembly of function SIGNDISCR
(CONST 0) = C
(CONST 1) = B
(CONST 2) = A
(CONST 3) = 2
(CONST 4) = POWER
(CONST 5) = -4
(CONST 6) = MUL
(CONST 7) = ADD
(CONST 8) = SIMPLIFYA
(CONST 9) = CHECKSIGNTM
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A C B)
19 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 1)                   ; B
11    (CONST&PUSH 3)                      ; 2
12    (CALL2&PUSH 4)                      ; POWER
14    (CONST&PUSH 5)                      ; -4
15    (GETVALUE&PUSH 0)                   ; C
17    (GETVALUE&PUSH 2)                   ; A
19    (CALL&PUSH 3 6)                     ; MUL
22    (CALL2&PUSH 7)                      ; ADD
24    (NIL&PUSH)
25    (CALL2&PUSH 8)                      ; SIMPLIFYA
27    (CALL1 9)                           ; CHECKSIGNTM
29    (UNBIND 3)
31    (SKIP&RET 4)


Disassembly of function #:|(DEFUN ASKINVER (A) ...)-58|
(CONST 0) = ASKINVER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASKINVER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASKINVER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASKINVER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASKINVER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASKINVER
8     (SKIP&RET 1)


Disassembly of function ASKINVER
(CONST 0) = A
(CONST 1) = -1
(CONST 2) = POWER
(CONST 3) = CHECKSIGNTM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CONST&PUSH 1)                      ; -1
6     (CALL2&PUSH 2)                      ; POWER
8     (CALL1 3)                           ; CHECKSIGNTM
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIGNDIS1 (C B A) ...)-59|
(CONST 0) = SIGNDIS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNDIS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNDIS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNDIS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNDIS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNDIS1
8     (SKIP&RET 1)


Disassembly of function SIGNDIS1
(CONST 0) = C
(CONST 1) = B
(CONST 2) = A
(CONST 3) = MUL
(CONST 4) = 0
(CONST 5) = $ZERO
(CONST 6) = $NONZERO
(CONST 7) = -4
(CONST 8) = ADD
(CONST 9) = 2
(CONST 10) = POWER
(CONST 11) = CHECKSIGNTM
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C A B)
35 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 1)                   ; B
11    (GETVALUE&PUSH 2)                   ; A
13    (CALL2&PUSH 3)                      ; MUL
15    (JMPIFEQTO 4 L46)                   ; 0
18    (GETVALUE&PUSH 1)                   ; B
20    (GETVALUE&PUSH 1)                   ; B
22    (CALL2&PUSH 3)                      ; MUL
24    (CONST&PUSH 7)                      ; -4
25    (GETVALUE&PUSH 0)                   ; C
27    (GETVALUE&PUSH 2)                   ; A
29    (CALL&PUSH 3 3)                     ; MUL
32    (CALL2&PUSH 8)                      ; ADD
34    (CONST&PUSH 9)                      ; 2
35    (CALL2&PUSH 10)                     ; POWER
37    (CALL1 11)                          ; CHECKSIGNTM
39    L39
39    (UNBIND 3)
41    (SKIP&RET 4)
43    L43
43    (CONST 5)                           ; $ZERO
44    (JMP L39)
46    L46
46    (GETVALUE&PUSH 1)                   ; B
48    (JMPIFNOTEQTO 4 L56)                ; 0
51    (GETVALUE&PUSH 2)                   ; A
53    (JMPIFEQTO 4 L43)                   ; 0
56    L56
56    (CONST 6)                           ; $NONZERO
57    (JMP L39)


Disassembly of function #:|(DEFUN SIGNDIS2 (C B A ...) ...)-60|
(CONST 0) = SIGNDIS2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNDIS2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNDIS2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNDIS2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNDIS2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNDIS2
8     (SKIP&RET 1)


Disassembly of function SIGNDIS2
(CONST 0) = C
(CONST 1) = B
(CONST 2) = A
(CONST 3) = $ZERO
(CONST 4) = 0
(CONST 5) = ASKINVER
(CONST 6) = $POSITIVE
(CONST 7) = $NEGATIVE
(CONST 8) = SIGNDISCR
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B C A)
45 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; C
3     (LOAD 7)
4     (BIND 1)                            ; B
6     (LOAD 9)
7     (BIND 2)                            ; A
9     (LOAD&PUSH 10)
10    (JMPIFEQTO 3 L39)                   ; $ZERO
13    (GETVALUE&PUSH 2)                   ; A
15    (JMPIFEQTO 4 L69)                   ; 0
18    (GETVALUE&PUSH 0)                   ; C
20    (GETVALUE&PUSH 1)                   ; B
22    (GETVALUE&PUSH 2)                   ; A
24    (CALL 3 8)                          ; SIGNDISCR
27    L27
27    (UNBIND 3)
29    (SKIP&RET 6)
31    L31
31    (CONST 3)                           ; $ZERO
32    (JMP L27)
34    L34
34    (CONST 6)                           ; $POSITIVE
35    (SKIP 1)
37    (JMP L27)
39    L39
39    (GETVALUE&PUSH 2)                   ; A
41    (JMPIFEQTO 4 L31)                   ; 0
44    (GETVALUE&PUSH 2)                   ; A
46    (CALL1&PUSH 5)                      ; ASKINVER
48    (LOAD&PUSH 12)
49    (JMPIFNOTEQTO 6 L56)                ; $POSITIVE
52    (LOAD&PUSH 0)
53    (JMPIFEQTO 7 L34)                   ; $NEGATIVE
56    L56
56    (LOAD&PUSH 12)
57    (JMPIFNOTEQTO 7 L64)                ; $NEGATIVE
60    (LOAD&PUSH 0)
61    (JMPIFEQTO 6 L34)                   ; $POSITIVE
64    L64
64    (CONST 7)                           ; $NEGATIVE
65    (SKIP 1)
67    (JMP L27)
69    L69
69    (CONST 6)                           ; $POSITIVE
70    (JMP L27)


Disassembly of function #:|(DEFUN SIGNDIS3 (C B A ...) ...)-61|
(CONST 0) = SIGNDIS3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNDIS3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNDIS3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNDIS3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNDIS3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNDIS3
8     (SKIP&RET 1)


Disassembly of function SIGNDIS3
(CONST 0) = C
(CONST 1) = B
(CONST 2) = A
(CONST 3) = 0
(CONST 4) = EC-1
(CONST 5) = CHECKSIGNTM
(CONST 6) = $NEGATIVE
(CONST 7) = $POSITIVE
(CONST 8) = SIGNDISCR
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EC-1 A C B)
25 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; C
3     (LOAD 6)
4     (BIND 1)                            ; B
6     (LOAD 8)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 1)                   ; B
11    (JMPIFEQTO 3 L30)                   ; 0
14    (GETVALUE&PUSH 0)                   ; C
16    (GETVALUE&PUSH 1)                   ; B
18    (GETVALUE&PUSH 2)                   ; A
20    (CALL 3 8)                          ; SIGNDISCR
23    L23
23    (UNBIND 3)
25    (SKIP&RET 5)
27    L27
27    (CONST 6)                           ; $NEGATIVE
28    (JMP L23)
30    L30
30    (GETVALUE&PUSH 4)                   ; EC-1
32    (CALL1&PUSH 5)                      ; CHECKSIGNTM
34    (LOAD&PUSH 11)
35    (CALLS2&JMPIF 2 L27)                ; EQUAL
38    (CONST 7)                           ; $POSITIVE
39    (JMP L23)


Disassembly of function #:|(DEFUN NUMMNUMN (POSZPOWLIST PLUSPOWFO1 P ...) ...)-62|
(CONST 0) = NUMMNUMN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUMMNUMN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUMMNUMN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUMMNUMN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUMMNUMN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUMMNUMN
8     (SKIP&RET 1)


Disassembly of function NUMMNUMN
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = A
(CONST 4) = X
(CONST 5) = POLFOO
(CONST 6) = R12
(CONST 7) = ADD
(CONST 8) = POWER
(CONST 9) = EC-1
(CONST 10) = -2
(CONST 11) = COEF
(CONST 12) = M
(CONST 13) = 0
(CONST 14) = NUMN
(CONST 15) = MUL
(CONST 16) = AUGMULT
(CONST 17) = 1
(CONST 18) = -1
(CONST 19) = 2
(CONST 20) = MUL*
(CONST 21) = 3
(CONST 22) = (RAT)
(CONST 23) = 4
(CONST 24) = (RAT)
(CONST 25) = 8
(CONST 26) = -4
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M COEF EC-1 R12 P X A B C)
writes special variables : (M COEF)
273 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; P
3     (LOAD 7)
4     (BIND 1)                            ; C
6     (LOAD 9)
7     (BIND 2)                            ; B
9     (LOAD 11)
10    (BIND 3)                            ; A
12    (LOAD 13)
13    (BIND 4)                            ; X
15    (GETVALUE&PUSH 1)                   ; C
17    (GETVALUE&PUSH 2)                   ; B
19    (GETVALUE&PUSH 3)                   ; A
21    (GETVALUE&PUSH 4)                   ; X
23    (CALL&PUSH 4 5)                     ; POLFOO
26    (GETVALUE&PUSH 0)                   ; P
28    (GETVALUE&PUSH 6)                   ; R12
30    (CALL2&PUSH 7)                      ; ADD
32    (CALL2&PUSH 8)                      ; POWER
34    (GETVALUE&PUSH 9)                   ; EC-1
36    (GETVALUE&PUSH 1)                   ; C
38    (CONST&PUSH 10)                     ; -2
39    (CALL2&PUSH 8)                      ; POWER
41    (PUSH-NIL 2)
43    (NIL)
44    (BIND 11)                           ; COEF
46    (PUSH-NIL 3)
48    (NIL)
49    (BIND 12)                           ; M
51    (NIL&PUSH)
52    (CONST 13)                          ; 0
53    (STORE 11)
55    (LOAD 37)
57    (CAR)
58    (CAR)
59    (STORE 10)
61    (LOAD 37)
63    (CAR)
64    (CDR)
65    (CAR)
66    (SETVALUE 11)                       ; COEF
68    (LOAD&PUSH 10)
69    (CALLS2&JMPIF 145 L266)             ; ZEROP
73    L73
73    (LOAD&PUSH 14)
74    (LOAD&PUSH 14)
75    (CONST&PUSH 17)                     ; 1
76    (GETVALUE&PUSH 0)                   ; P
78    (GETVALUE&PUSH 0)                   ; P
80    (CALLSR&PUSH 3 53)                  ; +
83    (CONST&PUSH 18)                     ; -1
84    (CALL2&PUSH 8)                      ; POWER
86    (CALL&PUSH 3 15)                    ; MUL
89    (CALL1&PUSH 16)                     ; AUGMULT
91    (CONST&PUSH 18)                     ; -1
92    (GETVALUE&PUSH 2)                   ; B
94    (GETVALUE&PUSH 6)                   ; R12
96    (LOAD&PUSH 17)
97    (LOAD&PUSH 41)
99    (GETVALUE&PUSH 1)                   ; C
101   (GETVALUE&PUSH 2)                   ; B
103   (GETVALUE&PUSH 3)                   ; A
105   (GETVALUE&PUSH 4)                   ; X
107   (CALL&PUSH 5 14)                    ; NUMN
110   (CALL&PUSH 5 15)                    ; MUL
113   (CALL1&PUSH 16)                     ; AUGMULT
115   (CALL2 7)                           ; ADD
117   (STORE 5)
118   (LOAD&PUSH 10)
119   (JMPIFEQTO 17 L292)                 ; 1
123   L123
123   (GETVALUE&PUSH 4)                   ; X
125   (LOAD&PUSH 15)
126   (LOAD&PUSH 15)
127   (CONST&PUSH 19)                     ; 2
128   (GETVALUE&PUSH 0)                   ; P
130   (GETVALUE&PUSH 0)                   ; P
132   (CALLSR&PUSH 3 53)                  ; +
135   (CONST&PUSH 18)                     ; -1
136   (CALL2&PUSH 8)                      ; POWER
138   (CALL&PUSH 4 20)                    ; MUL*
141   (CALL1&PUSH 16)                     ; AUGMULT
143   (GETVALUE&PUSH 2)                   ; B
145   (CONST&PUSH 21)                     ; 3
146   (GETVALUE&PUSH 0)                   ; P
148   (GETVALUE&PUSH 0)                   ; P
150   (CALLSR&PUSH 3 53)                  ; +
153   (CONST&PUSH 22)                     ; (RAT)
154   (CONST&PUSH 18)                     ; -1
155   (CONST&PUSH 23)                     ; 4
156   (LIST&PUSH 3)
158   (LOAD&PUSH 16)
159   (CONST&PUSH 17)                     ; 1
160   (GETVALUE&PUSH 0)                   ; P
162   (GETVALUE&PUSH 0)                   ; P
164   (GETVALUE&PUSH 0)                   ; P
166   (GETVALUE&PUSH 0)                   ; P
168   (GETVALUE&PUSH 0)                   ; P
170   (CALLSR&PUSH 2 55)                  ; *
173   (GETVALUE&PUSH 0)                   ; P
175   (GETVALUE&PUSH 0)                   ; P
177   (CALLSR&PUSH 2 55)                  ; *
180   (CALLSR&PUSH 6 53)                  ; +
183   (CONST&PUSH 18)                     ; -1
184   (CALL2&PUSH 8)                      ; POWER
186   (LOAD&PUSH 20)
187   (CALL&PUSH 6 20)                    ; MUL*
190   (CALL1&PUSH 16)                     ; AUGMULT
192   (GETVALUE&PUSH 0)                   ; P
194   (CALLS2&PUSH 150)                   ; 1+
196   (CONST&PUSH 18)                     ; -1
197   (CALL2&PUSH 8)                      ; POWER
199   (LOAD&PUSH 15)
200   (CONST&PUSH 24)                     ; (RAT)
201   (CONST&PUSH 17)                     ; 1
202   (CONST&PUSH 25)                     ; 8
203   (LIST&PUSH 3)
205   (GETVALUE&PUSH 2)                   ; B
207   (CONST&PUSH 19)                     ; 2
208   (CALL2&PUSH 8)                      ; POWER
210   (CONST&PUSH 21)                     ; 3
211   (GETVALUE&PUSH 0)                   ; P
213   (GETVALUE&PUSH 0)                   ; P
215   (CALLSR&PUSH 3 53)                  ; +
218   (CALL2&PUSH 15)                     ; MUL
220   (CONST&PUSH 26)                     ; -4
221   (GETVALUE&PUSH 3)                   ; A
223   (GETVALUE&PUSH 1)                   ; C
225   (CALL&PUSH 3 15)                    ; MUL
228   (CALL2&PUSH 7)                      ; ADD
230   (LOAD&PUSH 42)
232   (GETVALUE&PUSH 1)                   ; C
234   (GETVALUE&PUSH 2)                   ; B
236   (GETVALUE&PUSH 3)                   ; A
238   (GETVALUE&PUSH 4)                   ; X
240   (CALL&PUSH 5 14)                    ; NUMN
243   (CALL&PUSH 5 15)                    ; MUL
246   (CALL1&PUSH 16)                     ; AUGMULT
248   (CALL 3 7)                          ; ADD
251   (STORE 4)
252   (LOAD&PUSH 10)
253   (JMPIFEQTO 19 L309)                 ; 2
256   L256
256   (CONST 23)                          ; 4
258   (STORE 6)
259   (CONST 21)                          ; 3
261   (SETVALUE 12)                       ; M
263   (JMP L361)
266   L266
266   (GETVALUE&PUSH 11)                  ; COEF
268   (LOAD&PUSH 37)
270   (GETVALUE&PUSH 1)                   ; C
272   (GETVALUE&PUSH 2)                   ; B
274   (GETVALUE&PUSH 3)                   ; A
276   (GETVALUE&PUSH 4)                   ; X
278   (CALL&PUSH 5 14)                    ; NUMN
281   (CALL2&PUSH 15)                     ; MUL
283   (CALL1 16)                          ; AUGMULT
285   (STORE 11)
287   (CONST 17)                          ; 1
288   (STORE 6)
289   (JMP L460)
292   L292
292   (LOAD&PUSH 11)
293   (GETVALUE&PUSH 11)                  ; COEF
295   (LOAD&PUSH 7)
296   (CALL2&PUSH 15)                     ; MUL
298   (CALL1&PUSH 16)                     ; AUGMULT
300   (CALL2 7)                           ; ADD
302   (STORE 11)
304   (CONST 19)                          ; 2
305   (STORE 6)
306   (JMP L460)
309   L309
309   (LOAD&PUSH 11)
310   (GETVALUE&PUSH 11)                  ; COEF
312   (LOAD&PUSH 6)
313   (CALL2&PUSH 15)                     ; MUL
315   (CALL1&PUSH 16)                     ; AUGMULT
317   (CALL2 7)                           ; ADD
319   (STORE 11)
321   (CONST 21)                          ; 3
323   (STORE 6)
324   (JMP L460)
327   L327
327   (LOAD&PUSH 6)
328   (JMPIFEQTO 17 L73)                  ; 1
332   (LOAD&PUSH 6)
333   (JMPIFNOTEQTO 19 L256)              ; 2
337   (JMP L123)
340   L340
340   (LOAD 37)
342   (CAR)
343   (CDR)
344   (CAR)
345   (SETVALUE 11)                       ; COEF
347   (LOAD 37)
349   (CAR)
350   (CAR)
351   (STORE 10)
353   (LOAD&PUSH 6)
354   (JMPIFNOTEQTO 23 L327)              ; 4
357   L357
357   (LOAD 4)
358   (STORE 5)
359   (LOAD 0)
360   (STORE 4)
361   L361
361   (GETVALUE&PUSH 12)                  ; M
363   (GETVALUE&PUSH 0)                   ; P
365   (GETVALUE&PUSH 0)                   ; P
367   (CALLSR&PUSH 3 53)                  ; +
370   (CONST&PUSH 18)                     ; -1
371   (CALL2&PUSH 8)                      ; POWER
373   (GETVALUE&PUSH 4)                   ; X
375   (GETVALUE&PUSH 12)                  ; M
377   (CALLS2&PUSH 151)                   ; 1-
379   (CALL2&PUSH 8)                      ; POWER
381   (LOAD&PUSH 16)
382   (LOAD&PUSH 16)
383   (LOAD&PUSH 3)
384   (CALL&PUSH 4 15)                    ; MUL
387   (CALL1&PUSH 16)                     ; AUGMULT
389   (CONST&PUSH 18)                     ; -1
390   (GETVALUE&PUSH 2)                   ; B
392   (CONST&PUSH 18)                     ; -1
393   (GETVALUE&PUSH 0)                   ; P
395   (GETVALUE&PUSH 0)                   ; P
397   (GETVALUE&PUSH 12)                  ; M
399   (GETVALUE&PUSH 12)                  ; M
401   (CALLSR&PUSH 5 53)                  ; +
404   (GETVALUE&PUSH 6)                   ; R12
406   (LOAD&PUSH 19)
407   (LOAD&PUSH 6)
408   (LOAD&PUSH 12)
409   (CALL&PUSH 7 15)                    ; MUL
412   (CALL1&PUSH 16)                     ; AUGMULT
414   (CONST&PUSH 18)                     ; -1
415   (GETVALUE&PUSH 3)                   ; A
417   (GETVALUE&PUSH 12)                  ; M
419   (CALLS2&PUSH 151)                   ; 1-
421   (LOAD&PUSH 19)
422   (LOAD&PUSH 6)
423   (LOAD&PUSH 13)
424   (CALL&PUSH 6 15)                    ; MUL
427   (CALL1&PUSH 16)                     ; AUGMULT
429   (CALL 3 7)                          ; ADD
432   (SKIP 1)
434   (STORE 0)
435   (GETVALUE&PUSH 12)                  ; M
437   (CALLS2 150)                        ; 1+
439   (SETVALUE 12)                       ; M
441   (PUSH)
442   (LOAD&PUSH 11)
443   (CALLSR&JMPIFNOT 1 48 L357)         ; >
448   (LOAD&PUSH 11)
449   (GETVALUE&PUSH 11)                  ; COEF
451   (LOAD&PUSH 2)
452   (CALL2&PUSH 15)                     ; MUL
454   (CALL1&PUSH 16)                     ; AUGMULT
456   (CALL2 7)                           ; ADD
458   (STORE 11)
460   L460
460   (LOAD&CDR&STORE 37)
462   (JMPIF L340)
465   (LOAD 11)
466   (SKIP 1)
468   (UNBIND1)
469   (SKIP 3)
471   (UNBIND1)
472   (SKIP 5)
474   (UNBIND 5)
476   (SKIP&RET 8)


Disassembly of function #:|(DEFUN NUMN (P C B ...) ...)-63|
(CONST 0) = NUMN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUMN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUMN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUMN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUMN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUMN
8     (SKIP&RET 1)


Disassembly of function NUMN
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = A
(CONST 4) = X
(CONST 5) = EC-1
(CONST 6) = 2
(CONST 7) = MUL
(CONST 8) = ADD
(CONST 9) = R12
(CONST 10) = 4
(CONST 11) = -1
(CONST 12) = (RAT)
(CONST 13) = 1
(CONST 14) = EXP1
(CONST 15) = (RAT)
(CONST 16) = POLFOO
(CONST 17) = POWER
(CONST 18) = AUGMULT
(CONST 19) = (RAT)
(CONST 20) = 8
(CONST 21) = DEN1
(CONST 22) = (RAT)
(CONST 23) = (RAT)
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP1 P A R12 X C B EC-1)
111 byte-code instructions:
0     L0
0     (LOAD 5)
1     (BIND 0)                            ; P
3     (LOAD 7)
4     (BIND 1)                            ; C
6     (LOAD 9)
7     (BIND 2)                            ; B
9     (LOAD 11)
10    (BIND 3)                            ; A
12    (LOAD 13)
13    (BIND 4)                            ; X
15    (GETVALUE&PUSH 5)                   ; EC-1
17    (GETVALUE&PUSH 2)                   ; B
19    (CONST&PUSH 6)                      ; 2
20    (GETVALUE&PUSH 1)                   ; C
22    (GETVALUE&PUSH 4)                   ; X
24    (CALL&PUSH 3 7)                     ; MUL
27    (CALL2&PUSH 8)                      ; ADD
29    (GETVALUE&PUSH 9)                   ; R12
31    (CONST&PUSH 10)                     ; 4
32    (GETVALUE&PUSH 3)                   ; A
34    (GETVALUE&PUSH 1)                   ; C
36    (CALL&PUSH 3 7)                     ; MUL
39    (CONST&PUSH 11)                     ; -1
40    (GETVALUE&PUSH 2)                   ; B
42    (GETVALUE&PUSH 2)                   ; B
44    (CALL&PUSH 3 7)                     ; MUL
47    (CALL2&PUSH 8)                      ; ADD
49    (CONST&PUSH 12)                     ; (RAT)
50    (CONST&PUSH 13)                     ; 1
51    (GETVALUE&PUSH 0)                   ; P
53    (CALLS2&PUSH 150)                   ; 1+
55    (LIST&PUSH 3)
57    (LOAD 4)
58    (BIND 14)                           ; EXP1
60    (GETVALUE&PUSH 0)                   ; P
62    (CALLS2&JMPIF 145 L145)             ; ZEROP
66    (CONST&PUSH 22)                     ; (RAT)
67    (CONST&PUSH 13)                     ; 1
68    (CONST&PUSH 10)                     ; 4
69    (LIST&PUSH 3)
71    (GETVALUE&PUSH 14)                  ; EXP1
73    (LOAD&PUSH 5)
74    (LOAD&PUSH 9)
75    (GETVALUE&PUSH 1)                   ; C
77    (GETVALUE&PUSH 2)                   ; B
79    (GETVALUE&PUSH 3)                   ; A
81    (GETVALUE&PUSH 4)                   ; X
83    (CALL&PUSH 4 16)                    ; POLFOO
86    (GETVALUE&PUSH 0)                   ; P
88    (LOAD&PUSH 11)
89    (CALL2&PUSH 8)                      ; ADD
91    (CALL2&PUSH 17)                     ; POWER
93    (CALL&PUSH 5 7)                     ; MUL
96    (CALL1&PUSH 18)                     ; AUGMULT
98    (CONST&PUSH 23)                     ; (RAT)
99    (CONST&PUSH 13)                     ; 1
100   (CONST&PUSH 20)                     ; 8
101   (LIST&PUSH 3)
103   (GETVALUE&PUSH 14)                  ; EXP1
105   (LOAD&PUSH 6)
106   (CONST&PUSH 13)                     ; 1
107   (GETVALUE&PUSH 0)                   ; P
109   (GETVALUE&PUSH 0)                   ; P
111   (CALLSR&PUSH 3 53)                  ; +
114   (LOAD&PUSH 9)
115   (GETVALUE&PUSH 0)                   ; P
117   (CALLS2&PUSH 151)                   ; 1-
119   (GETVALUE&PUSH 1)                   ; C
121   (GETVALUE&PUSH 2)                   ; B
123   (GETVALUE&PUSH 3)                   ; A
125   (GETVALUE&PUSH 4)                   ; X
127   (JSR&PUSH L0)
130   (CALL 6 7)                          ; MUL
133   L133
133   (PUSH)
134   (CALL1&PUSH 18)                     ; AUGMULT
136   (CALL2 8)                           ; ADD
138   (UNBIND1)
139   (SKIP 5)
141   (UNBIND 5)
143   (SKIP&RET 6)
145   L145
145   (CONST&PUSH 15)                     ; (RAT)
146   (CONST&PUSH 13)                     ; 1
147   (CONST&PUSH 10)                     ; 4
148   (LIST&PUSH 3)
150   (GETVALUE&PUSH 14)                  ; EXP1
152   (LOAD&PUSH 8)
153   (GETVALUE&PUSH 1)                   ; C
155   (GETVALUE&PUSH 2)                   ; B
157   (GETVALUE&PUSH 3)                   ; A
159   (GETVALUE&PUSH 4)                   ; X
161   (CALL&PUSH 4 16)                    ; POLFOO
164   (LOAD&PUSH 9)
165   (CALL2&PUSH 17)                     ; POWER
167   (CALL&PUSH 4 7)                     ; MUL
170   (CALL1&PUSH 18)                     ; AUGMULT
172   (CONST&PUSH 19)                     ; (RAT)
173   (CONST&PUSH 13)                     ; 1
174   (CONST&PUSH 20)                     ; 8
175   (LIST&PUSH 3)
177   (GETVALUE&PUSH 14)                  ; EXP1
179   (LOAD&PUSH 7)
180   (GETVALUE&PUSH 1)                   ; C
182   (GETVALUE&PUSH 2)                   ; B
184   (GETVALUE&PUSH 3)                   ; A
186   (GETVALUE&PUSH 4)                   ; X
188   (CALL&PUSH 4 21)                    ; DEN1
191   (CALL 4 7)                          ; MUL
194   (JMP L133)


Disassembly of function #:|(DEFUN AUGMULT (X) ...)-64|
(CONST 0) = AUGMULT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE AUGMULT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; AUGMULT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AUGMULT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE AUGMULT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; AUGMULT
8     (SKIP&RET 1)


Disassembly of function AUGMULT
(CONST 0) = X
(CONST 1) = SIMPLIFYA
(CONST 2) = $MULTTHRU
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (NIL&PUSH)
6     (CALL2&PUSH 1)                      ; SIMPLIFYA
8     (CALL1 2)                           ; $MULTTHRU
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DENMDENN (NEGPOWLIST P C ...) ...)-65|
(CONST 0) = DENMDENN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DENMDENN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DENMDENN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DENMDENN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DENMDENN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DENMDENN
8     (SKIP&RET 1)


Disassembly of function DENMDENN
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = A
(CONST 4) = X
(CONST 5) = POLFOO
(CONST 6) = R12
(CONST 7) = ADD
(CONST 8) = POWER
(CONST 9) = EXP1
(CONST 10) = COEF
(CONST 11) = M
(CONST 12) = SIMPLIFYA
(CONST 13) = CHECKSIGNTM
(CONST 14) = $ZERO
(CONST 15) = NOCONSTQUAD
(CONST 16) = 0
(CONST 17) = -1
(CONST 18) = DENN
(CONST 19) = MUL
(CONST 20) = AUGMULT
(CONST 21) = 1
(CONST 22) = DEN1DENN
(CONST 23) = 2
(CONST 24) = -2
(CONST 25) = 3
(CONST 26) = 4
(CONST 27) = (RAT)
(CONST 28) = -3
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M COEF EXP1 P R12 X A B C)
writes special variables : (M COEF)
246 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; P
3     (LOAD 7)
4     (BIND 1)                            ; C
6     (LOAD 9)
7     (BIND 2)                            ; B
9     (LOAD 11)
10    (BIND 3)                            ; A
12    (LOAD 13)
13    (BIND 4)                            ; X
15    (GETVALUE&PUSH 1)                   ; C
17    (GETVALUE&PUSH 2)                   ; B
19    (GETVALUE&PUSH 3)                   ; A
21    (GETVALUE&PUSH 4)                   ; X
23    (CALL&PUSH 4 5)                     ; POLFOO
26    (GETVALUE&PUSH 6)                   ; R12
28    (GETVALUE&PUSH 0)                   ; P
30    (CALLSR&PUSH 0 54)                  ; -
33    (CALL2&PUSH 7)                      ; ADD
35    (CALL2 8)                           ; POWER
37    (BIND 9)                            ; EXP1
39    (PUSH-NIL 2)
41    (NIL)
42    (BIND 10)                           ; COEF
44    (PUSH-NIL 3)
46    (NIL)
47    (BIND 11)                           ; M
49    (PUSH-NIL 3)
51    (GETVALUE&PUSH 3)                   ; A
53    (NIL&PUSH)
54    (CALL2&PUSH 12)                     ; SIMPLIFYA
56    (CALL1 13)                          ; CHECKSIGNTM
58    (STORE 1)
59    (PUSH)
60    (JMPIFEQTO 14 L200)                 ; $ZERO
64    (CONST 16)                          ; 0
65    (STORE 13)
67    (LOAD 38)
69    (CAR)
70    (CAR)
71    (STORE 12)
73    (GETVALUE&PUSH 3)                   ; A
75    (CONST&PUSH 17)                     ; -1
76    (CALL2 8)                           ; POWER
78    (STORE 0)
79    (LOAD 38)
81    (CAR)
82    (CDR)
83    (CAR)
84    (SETVALUE 10)                       ; COEF
86    (LOAD&PUSH 12)
87    (CALLS2&JMPIF 145 L216)             ; ZEROP
91    L91
91    (GETVALUE&PUSH 0)                   ; P
93    (GETVALUE&PUSH 1)                   ; C
95    (GETVALUE&PUSH 2)                   ; B
97    (GETVALUE&PUSH 3)                   ; A
99    (GETVALUE&PUSH 4)                   ; X
101   (CALL 5 22)                         ; DEN1DENN
104   (STORE 7)
105   (LOAD&PUSH 12)
106   (JMPIFEQTO 21 L244)                 ; 1
110   L110
110   (CONST&PUSH 17)                     ; -1
111   (LOAD&PUSH 1)
112   (GETVALUE&PUSH 4)                   ; X
114   (CONST&PUSH 17)                     ; -1
115   (CALL2&PUSH 8)                      ; POWER
117   (GETVALUE&PUSH 9)                   ; EXP1
119   (CALL&PUSH 4 19)                    ; MUL
122   (CALL1&PUSH 20)                     ; AUGMULT
124   (CONST&PUSH 17)                     ; -1
125   (GETVALUE&PUSH 2)                   ; B
127   (CONST&PUSH 21)                     ; 1
128   (GETVALUE&PUSH 0)                   ; P
130   (GETVALUE&PUSH 0)                   ; P
132   (CALLSR&PUSH 3 53)                  ; +
135   (GETVALUE&PUSH 6)                   ; R12
137   (LOAD&PUSH 5)
138   (GETVALUE&PUSH 0)                   ; P
140   (GETVALUE&PUSH 1)                   ; C
142   (GETVALUE&PUSH 2)                   ; B
144   (GETVALUE&PUSH 3)                   ; A
146   (GETVALUE&PUSH 4)                   ; X
148   (CALL&PUSH 5 22)                    ; DEN1DENN
151   (CALL&PUSH 6 19)                    ; MUL
154   (CALL1&PUSH 20)                     ; AUGMULT
156   (CONST&PUSH 24)                     ; -2
157   (GETVALUE&PUSH 0)                   ; P
159   (GETVALUE&PUSH 1)                   ; C
161   (LOAD&PUSH 5)
162   (GETVALUE&PUSH 0)                   ; P
164   (GETVALUE&PUSH 1)                   ; C
166   (GETVALUE&PUSH 2)                   ; B
168   (GETVALUE&PUSH 3)                   ; A
170   (GETVALUE&PUSH 4)                   ; X
172   (CALL&PUSH 5 18)                    ; DENN
175   (CALL&PUSH 5 19)                    ; MUL
178   (CALL1&PUSH 20)                     ; AUGMULT
180   (CALL 3 7)                          ; ADD
183   (STORE 6)
184   (LOAD&PUSH 12)
185   (JMPIFEQTO 23 L263)                 ; 2
189   L189
189   (CONST 26)                          ; 4
191   (STORE 8)
193   (CONST 25)                          ; 3
195   (SETVALUE 11)                       ; M
197   (JMP L316)
200   L200
200   (LOAD&PUSH 38)
202   (GETVALUE&PUSH 0)                   ; P
204   (GETVALUE&PUSH 1)                   ; C
206   (GETVALUE&PUSH 2)                   ; B
208   (GETVALUE&PUSH 4)                   ; X
210   (CALL 5 15)                         ; NOCONSTQUAD
213   (JMP L428)
216   L216
216   (GETVALUE&PUSH 10)                  ; COEF
218   (GETVALUE&PUSH 0)                   ; P
220   (GETVALUE&PUSH 1)                   ; C
222   (GETVALUE&PUSH 2)                   ; B
224   (GETVALUE&PUSH 3)                   ; A
226   (GETVALUE&PUSH 4)                   ; X
228   (CALL&PUSH 5 18)                    ; DENN
231   (CALL2&PUSH 19)                     ; MUL
233   (CALL1 20)                          ; AUGMULT
235   (STORE 13)
237   (CONST 21)                          ; 1
239   (STORE 8)
241   (JMP L422)
244   L244
244   (LOAD&PUSH 13)
245   (GETVALUE&PUSH 10)                  ; COEF
247   (LOAD&PUSH 9)
248   (CALL2&PUSH 19)                     ; MUL
250   (CALL1&PUSH 20)                     ; AUGMULT
252   (CALL2 7)                           ; ADD
254   (STORE 13)
256   (CONST 23)                          ; 2
258   (STORE 8)
260   (JMP L422)
263   L263
263   (LOAD&PUSH 13)
264   (GETVALUE&PUSH 10)                  ; COEF
266   (LOAD&PUSH 8)
267   (CALL2&PUSH 19)                     ; MUL
269   (CALL1&PUSH 20)                     ; AUGMULT
271   (CALL2 7)                           ; ADD
273   (STORE 13)
275   (CONST 25)                          ; 3
277   (STORE 8)
279   (JMP L422)
282   L282
282   (LOAD&PUSH 8)
283   (JMPIFEQTO 21 L91)                  ; 1
287   (LOAD&PUSH 8)
288   (JMPIFNOTEQTO 23 L189)              ; 2
292   (JMP L110)
295   L295
295   (LOAD 38)
297   (CAR)
298   (CDR)
299   (CAR)
300   (SETVALUE 10)                       ; COEF
302   (LOAD 38)
304   (CAR)
305   (CAR)
306   (STORE 12)
308   (LOAD&PUSH 8)
309   (JMPIFNOTEQTO 26 L282)              ; 4
312   L312
312   (LOAD 6)
313   (STORE 7)
314   (LOAD 2)
315   (STORE 6)
316   L316
316   (CONST&PUSH 27)                     ; (RAT)
317   (CONST&PUSH 17)                     ; -1
318   (GETVALUE&PUSH 11)                  ; M
320   (CALLS2&PUSH 151)                   ; 1-
322   (LIST&PUSH 3)
324   (NIL&PUSH)
325   (CALL2&PUSH 12)                     ; SIMPLIFYA
327   (LOAD&PUSH 0)
328   (LOAD&PUSH 2)
329   (GETVALUE&PUSH 4)                   ; X
331   (GETVALUE&PUSH 11)                  ; M
333   (CALLSR&PUSH 0 54)                  ; -
336   (CALLS2&PUSH 150)                   ; 1+
338   (CALL2&PUSH 8)                      ; POWER
340   (GETVALUE&PUSH 9)                   ; EXP1
342   (CALL&PUSH 4 19)                    ; MUL
345   (CALL1&PUSH 20)                     ; AUGMULT
347   (GETVALUE&PUSH 2)                   ; B
349   (CONST&PUSH 28)                     ; -3
350   (GETVALUE&PUSH 0)                   ; P
352   (GETVALUE&PUSH 0)                   ; P
354   (GETVALUE&PUSH 11)                  ; M
356   (GETVALUE&PUSH 11)                  ; M
358   (CALLSR&PUSH 5 53)                  ; +
361   (GETVALUE&PUSH 6)                   ; R12
363   (LOAD&PUSH 5)
364   (LOAD&PUSH 5)
365   (LOAD&PUSH 13)
366   (CALL&PUSH 6 19)                    ; MUL
369   (CALL1&PUSH 20)                     ; AUGMULT
371   (GETVALUE&PUSH 1)                   ; C
373   (LOAD&PUSH 4)
374   (LOAD&PUSH 4)
375   (CONST&PUSH 24)                     ; -2
376   (GETVALUE&PUSH 0)                   ; P
378   (GETVALUE&PUSH 0)                   ; P
380   (GETVALUE&PUSH 11)                  ; M
382   (CALLSR&PUSH 4 53)                  ; +
385   (LOAD&PUSH 14)
386   (CALL&PUSH 5 19)                    ; MUL
389   (CALL1&PUSH 20)                     ; AUGMULT
391   (CALL 3 7)                          ; ADD
394   (SKIP 1)
396   (STORE 2)
397   (GETVALUE&PUSH 11)                  ; M
399   (CALLS2 150)                        ; 1+
401   (SETVALUE 11)                       ; M
403   (PUSH)
404   (LOAD&PUSH 13)
405   (CALLSR&JMPIFNOT 1 48 L312)         ; >
410   (LOAD&PUSH 13)
411   (GETVALUE&PUSH 10)                  ; COEF
413   (LOAD&PUSH 4)
414   (CALL2&PUSH 19)                     ; MUL
416   (CALL1&PUSH 20)                     ; AUGMULT
418   (CALL2 7)                           ; ADD
420   (STORE 13)
422   L422
422   (LOAD&CDR&STORE 38)
424   (JMPIF L295)
427   (LOAD 13)
428   L428
428   (SKIP 3)
430   (UNBIND1)
431   (SKIP 3)
433   (UNBIND1)
434   (SKIP 2)
436   (UNBIND 6)
438   (SKIP&RET 7)


Disassembly of function #:|(DEFUN DENN (P C B ...) ...)-66|
(CONST 0) = DENN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DENN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DENN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DENN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DENN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DENN
8     (SKIP&RET 1)


Disassembly of function DENN
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = A
(CONST 4) = X
(CONST 5) = SIGNDIS1
(CONST 6) = 2
(CONST 7) = MUL
(CONST 8) = ADD
(CONST 9) = 4
(CONST 10) = -1
(CONST 11) = POWER
(CONST 12) = EXP1
(CONST 13) = $ZERO
(CONST 14) = EC-1
(CONST 15) = (%LOG)
(CONST 16) = R12
(CONST 17) = MUL*
(CONST 18) = AUGMULT
(CONST 19) = 0
(CONST 20) = (RAT)
(CONST 21) = (RAT)
(CONST 22) = 1
(CONST 23) = -2
(CONST 24) = DEN1
(CONST 25) = POLFOO
(CONST 26) = (RAT)
(CONST 27) = 8
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R12 EC-1 EXP1 P X A B C)
160 byte-code instructions:
0     L0
0     (LOAD 5)
1     (BIND 0)                            ; P
3     (LOAD 7)
4     (BIND 1)                            ; C
6     (LOAD 9)
7     (BIND 2)                            ; B
9     (LOAD 11)
10    (BIND 3)                            ; A
12    (LOAD 13)
13    (BIND 4)                            ; X
15    (GETVALUE&PUSH 1)                   ; C
17    (GETVALUE&PUSH 2)                   ; B
19    (GETVALUE&PUSH 3)                   ; A
21    (CALL&PUSH 3 5)                     ; SIGNDIS1
24    (GETVALUE&PUSH 2)                   ; B
26    (CONST&PUSH 6)                      ; 2
27    (GETVALUE&PUSH 1)                   ; C
29    (GETVALUE&PUSH 4)                   ; X
31    (CALL&PUSH 3 7)                     ; MUL
34    (CALL2&PUSH 8)                      ; ADD
36    (CONST&PUSH 9)                      ; 4
37    (GETVALUE&PUSH 3)                   ; A
39    (GETVALUE&PUSH 1)                   ; C
41    (CALL&PUSH 3 7)                     ; MUL
44    (GETVALUE&PUSH 2)                   ; B
46    (GETVALUE&PUSH 2)                   ; B
48    (CONST&PUSH 10)                     ; -1
49    (CALL&PUSH 3 7)                     ; MUL
52    (CALL2&PUSH 8)                      ; ADD
54    (CONST&PUSH 10)                     ; -1
55    (CALL2&PUSH 11)                     ; POWER
57    (CONST&PUSH 10)                     ; -1
58    (GETVALUE&PUSH 0)                   ; P
60    (GETVALUE&PUSH 0)                   ; P
62    (CALLSR&PUSH 3 53)                  ; +
65    (CONST&PUSH 10)                     ; -1
66    (CALL2&PUSH 11)                     ; POWER
68    (LOAD 2)
69    (BIND 12)                           ; EXP1
71    (LOAD&PUSH 6)
72    (JMPIFNOTEQTO 13 L80)               ; $ZERO
75    (GETVALUE&PUSH 0)                   ; P
77    (CALLS2&JMPIF 145 L135)             ; ZEROP
80    L80
80    (LOAD&PUSH 6)
81    (JMPIFNOTEQTO 13 L92)               ; $ZERO
84    (GETVALUE&PUSH 0)                   ; P
86    (CONST&PUSH 19)                     ; 0
87    (CALLSR&JMPIF 1 48 L157)            ; >
92    L92
92    (GETVALUE&PUSH 0)                   ; P
94    (CALLS2&JMPIF 145 L214)             ; ZEROP
98    (GETVALUE&PUSH 0)                   ; P
100   (JMPIFNOTEQTO 22 L227)              ; 1
104   (CONST&PUSH 6)                      ; 2
105   (GETVALUE&PUSH 12)                  ; EXP1
107   (LOAD&PUSH 6)
108   (GETVALUE&PUSH 1)                   ; C
110   (GETVALUE&PUSH 2)                   ; B
112   (GETVALUE&PUSH 3)                   ; A
114   (GETVALUE&PUSH 4)                   ; X
116   (CALL&PUSH 4 25)                    ; POLFOO
119   (CONST&PUSH 26)                     ; (RAT)
120   (CONST&PUSH 10)                     ; -1
121   (CONST&PUSH 6)                      ; 2
122   (LIST&PUSH 3)
124   (CALL2&PUSH 11)                     ; POWER
126   (CALL 4 7)                          ; MUL
129   L129
129   (PUSH)
130   (CALL1 18)                          ; AUGMULT
132   (JMP L290)
135   L135
135   (GETVALUE&PUSH 14)                  ; EC-1
137   (CONST&PUSH 15)                     ; (%LOG)
138   (GETVALUE&PUSH 4)                   ; X
140   (GETVALUE&PUSH 2)                   ; B
142   (GETVALUE&PUSH 16)                  ; R12
144   (GETVALUE&PUSH 14)                  ; EC-1
146   (CALL&PUSH 3 7)                     ; MUL
149   (CALL2&PUSH 8)                      ; ADD
151   (LIST&PUSH 2)
153   (CALL2 17)                          ; MUL*
155   (JMP L129)
157   L157
157   (CONST&PUSH 20)                     ; (RAT)
158   (CONST&PUSH 10)                     ; -1
159   (GETVALUE&PUSH 0)                   ; P
161   (GETVALUE&PUSH 0)                   ; P
163   (CALLSR&PUSH 2 53)                  ; +
166   (LIST&PUSH 3)
168   (GETVALUE&PUSH 1)                   ; C
170   (CONST&PUSH 21)                     ; (RAT)
171   (CONST&PUSH 10)                     ; -1
172   (CONST&PUSH 6)                      ; 2
173   (LIST&PUSH 3)
175   (CONST&PUSH 22)                     ; 1
176   (GETVALUE&PUSH 0)                   ; P
178   (GETVALUE&PUSH 0)                   ; P
180   (CALLSR&PUSH 3 53)                  ; +
183   (CALL2&PUSH 7)                      ; MUL
185   (CALL2&PUSH 11)                     ; POWER
187   (GETVALUE&PUSH 4)                   ; X
189   (GETVALUE&PUSH 2)                   ; B
191   (GETVALUE&PUSH 16)                  ; R12
193   (GETVALUE&PUSH 14)                  ; EC-1
195   (CALL&PUSH 3 7)                     ; MUL
198   (CALL2&PUSH 8)                      ; ADD
200   (CONST&PUSH 23)                     ; -2
201   (GETVALUE&PUSH 0)                   ; P
203   (CALLSR&PUSH 2 55)                  ; *
206   (CALL2&PUSH 11)                     ; POWER
208   (CALL 3 17)                         ; MUL*
211   (JMP L129)
214   L214
214   (GETVALUE&PUSH 1)                   ; C
216   (GETVALUE&PUSH 2)                   ; B
218   (GETVALUE&PUSH 3)                   ; A
220   (GETVALUE&PUSH 4)                   ; X
222   (CALL 4 24)                         ; DEN1
225   (JMP L290)
227   L227
227   (CONST&PUSH 6)                      ; 2
228   (GETVALUE&PUSH 12)                  ; EXP1
230   (LOAD&PUSH 5)
231   (LOAD&PUSH 7)
232   (GETVALUE&PUSH 1)                   ; C
234   (GETVALUE&PUSH 2)                   ; B
236   (GETVALUE&PUSH 3)                   ; A
238   (GETVALUE&PUSH 4)                   ; X
240   (CALL&PUSH 4 25)                    ; POLFOO
243   (GETVALUE&PUSH 16)                  ; R12
245   (GETVALUE&PUSH 0)                   ; P
247   (CALLSR&PUSH 0 54)                  ; -
250   (CALL2&PUSH 8)                      ; ADD
252   (CALL2&PUSH 11)                     ; POWER
254   (CALL&PUSH 5 7)                     ; MUL
257   (CALL1&PUSH 18)                     ; AUGMULT
259   (CONST&PUSH 27)                     ; 8
260   (GETVALUE&PUSH 1)                   ; C
262   (GETVALUE&PUSH 0)                   ; P
264   (CALLS2&PUSH 151)                   ; 1-
266   (LOAD&PUSH 7)
267   (LOAD&PUSH 9)
268   (GETVALUE&PUSH 0)                   ; P
270   (CALLS2&PUSH 151)                   ; 1-
272   (GETVALUE&PUSH 1)                   ; C
274   (GETVALUE&PUSH 2)                   ; B
276   (GETVALUE&PUSH 3)                   ; A
278   (GETVALUE&PUSH 4)                   ; X
280   (JSR&PUSH L0)
283   (CALL&PUSH 6 7)                     ; MUL
286   (CALL1&PUSH 18)                     ; AUGMULT
288   (CALL2 8)                           ; ADD
290   L290
290   (UNBIND1)
291   (SKIP 4)
293   (UNBIND 5)
295   (SKIP&RET 6)


Disassembly of function #:|(DEFUN DEN1DENN (P C B ...) ...)-67|
(CONST 0) = DEN1DENN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEN1DENN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEN1DENN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEN1DENN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEN1DENN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEN1DENN
8     (SKIP&RET 1)


Disassembly of function DEN1DENN
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = A
(CONST 4) = X
(CONST 5) = 2
(CONST 6) = POWER
(CONST 7) = CHECKSIGNTM
(CONST 8) = -1
(CONST 9) = $ZERO
(CONST 10) = 1
(CONST 11) = NOCONSTQUAD
(CONST 12) = DEN1DEN1
(CONST 13) = POLFOO
(CONST 14) = R12
(CONST 15) = ADD
(CONST 16) = MUL
(CONST 17) = AUGMULT
(CONST 18) = DENN
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R12 X B C P A)
85 byte-code instructions:
0     L0
0     (LOAD 5)
1     (BIND 0)                            ; P
3     (LOAD 7)
4     (BIND 1)                            ; C
6     (LOAD 9)
7     (BIND 2)                            ; B
9     (LOAD 11)
10    (BIND 3)                            ; A
12    (LOAD 13)
13    (BIND 4)                            ; X
15    (GETVALUE&PUSH 3)                   ; A
17    (CONST&PUSH 5)                      ; 2
18    (CALL2&PUSH 6)                      ; POWER
20    (CALL1&PUSH 7)                      ; CHECKSIGNTM
22    (GETVALUE&PUSH 3)                   ; A
24    (CONST&PUSH 8)                      ; -1
25    (CALL2&PUSH 6)                      ; POWER
27    (LOAD&PUSH 1)
28    (JMPIFEQTO 9 L130)                  ; $ZERO
32    (GETVALUE&PUSH 0)                   ; P
34    (CALLS2&JMPIF 145 L146)             ; ZEROP
38    (CONST&PUSH 8)                      ; -1
39    (GETVALUE&PUSH 0)                   ; P
41    (GETVALUE&PUSH 0)                   ; P
43    (CALLSR&PUSH 3 53)                  ; +
46    (CONST&PUSH 8)                      ; -1
47    (CALL2&PUSH 6)                      ; POWER
49    (LOAD&PUSH 1)
50    (GETVALUE&PUSH 1)                   ; C
52    (GETVALUE&PUSH 2)                   ; B
54    (GETVALUE&PUSH 3)                   ; A
56    (GETVALUE&PUSH 4)                   ; X
58    (CALL&PUSH 4 13)                    ; POLFOO
61    (GETVALUE&PUSH 14)                  ; R12
63    (GETVALUE&PUSH 0)                   ; P
65    (CALLSR&PUSH 0 54)                  ; -
68    (CALL2&PUSH 15)                     ; ADD
70    (CALL2&PUSH 6)                      ; POWER
72    (CALL&PUSH 3 16)                    ; MUL
75    (CALL1&PUSH 17)                     ; AUGMULT
77    (LOAD&PUSH 1)
78    (GETVALUE&PUSH 0)                   ; P
80    (CALLS2&PUSH 151)                   ; 1-
82    (GETVALUE&PUSH 1)                   ; C
84    (GETVALUE&PUSH 2)                   ; B
86    (GETVALUE&PUSH 3)                   ; A
88    (GETVALUE&PUSH 4)                   ; X
90    (JSR&PUSH L0)
93    (CALL2&PUSH 16)                     ; MUL
95    (CALL1&PUSH 17)                     ; AUGMULT
97    (CONST&PUSH 8)                      ; -1
98    (GETVALUE&PUSH 14)                  ; R12
100   (LOAD&PUSH 4)
101   (GETVALUE&PUSH 2)                   ; B
103   (GETVALUE&PUSH 0)                   ; P
105   (GETVALUE&PUSH 1)                   ; C
107   (GETVALUE&PUSH 2)                   ; B
109   (GETVALUE&PUSH 3)                   ; A
111   (GETVALUE&PUSH 4)                   ; X
113   (CALL&PUSH 5 18)                    ; DENN
116   (CALL&PUSH 5 16)                    ; MUL
119   (CALL1&PUSH 17)                     ; AUGMULT
121   (CALL 3 15)                         ; ADD
124   (SKIP 2)
126   L126
126   (UNBIND 5)
128   (SKIP&RET 6)
130   L130
130   (CONST&PUSH 10)                     ; 1
131   (GETVALUE&PUSH 0)                   ; P
133   (GETVALUE&PUSH 1)                   ; C
135   (GETVALUE&PUSH 2)                   ; B
137   (GETVALUE&PUSH 4)                   ; X
139   (CALL 5 11)                         ; NOCONSTQUAD
142   (SKIP 2)
144   (JMP L126)
146   L146
146   (GETVALUE&PUSH 1)                   ; C
148   (GETVALUE&PUSH 2)                   ; B
150   (GETVALUE&PUSH 3)                   ; A
152   (GETVALUE&PUSH 4)                   ; X
154   (CALL 4 12)                         ; DEN1DEN1
157   (SKIP 2)
159   (JMP L126)


Disassembly of function #:|(DEFUN DEN1DEN1 (C B A ...) ...)-68|
(CONST 0) = DEN1DEN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEN1DEN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEN1DEN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEN1DEN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEN1DEN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEN1DEN1
8     (SKIP&RET 1)


Disassembly of function DEN1DEN1
(CONST 0) = C
(CONST 1) = B
(CONST 2) = A
(CONST 3) = X
(CONST 4) = MUL
(CONST 5) = ADD
(CONST 6) = (MABS)
(CONST 7) = -1
(CONST 8) = POWER
(CONST 9) = (RAT)
(CONST 10) = 2
(CONST 11) = EXP1
(CONST 12) = SIMPLIFYA
(CONST 13) = CHECKSIGNTM
(CONST 14) = $ZERO
(CONST 15) = ((1 1))
(CONST 16) = 0
(CONST 17) = NOCONSTQUAD
(CONST 18) = SIGNDIS3
(CONST 19) = -2
(CONST 20) = $POSITIVE
(CONST 21) = $NEGATIVE
(CONST 22) = (%ASINH)
(CONST 23) = 4
(CONST 24) = AUGMULT
(CONST 25) = MUL*
(CONST 26) = (%LOG)
(CONST 27) = (%LOG)
(CONST 28) = R12
(CONST 29) = POLFOO
(CONST 30) = (%ASIN)
(CONST 31) = -4
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R12 EXP1 C A X B)
writes special variable : (EXP1)
185 byte-code instructions:
0     L0
0     (LOAD 4)
1     (BIND 0)                            ; C
3     (LOAD 6)
4     (BIND 1)                            ; B
6     (LOAD 8)
7     (BIND 2)                            ; A
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (GETVALUE&PUSH 1)                   ; B
14    (GETVALUE&PUSH 3)                   ; X
16    (CALL2&PUSH 4)                      ; MUL
18    (GETVALUE&PUSH 2)                   ; A
20    (GETVALUE&PUSH 2)                   ; A
22    (CALL&PUSH 3 5)                     ; ADD
25    (CONST&PUSH 6)                      ; (MABS)
26    (GETVALUE&PUSH 3)                   ; X
28    (LIST&PUSH 2)
30    (CONST&PUSH 7)                      ; -1
31    (CALL2&PUSH 8)                      ; POWER
33    (CONST&PUSH 9)                      ; (RAT)
34    (CONST&PUSH 7)                      ; -1
35    (CONST&PUSH 10)                     ; 2
36    (LIST&PUSH 3)
38    (PUSH-NIL 3)
40    (NIL)
41    (BIND 11)                           ; EXP1
43    (GETVALUE&PUSH 2)                   ; A
45    (NIL&PUSH)
46    (CALL2&PUSH 12)                     ; SIMPLIFYA
48    (CALL1 13)                          ; CHECKSIGNTM
50    (STORE 3)
51    (GETVALUE&PUSH 1)                   ; B
53    (GETVALUE&PUSH 3)                   ; X
55    (CALL2&PUSH 4)                      ; MUL
57    (GETVALUE&PUSH 2)                   ; A
59    (GETVALUE&PUSH 2)                   ; A
61    (CALL 3 5)                          ; ADD
64    (STORE 4)
65    (LOAD&PUSH 3)
66    (JMPIFEQTO 14 L165)                 ; $ZERO
70    (GETVALUE&PUSH 0)                   ; C
72    (GETVALUE&PUSH 1)                   ; B
74    (GETVALUE&PUSH 2)                   ; A
76    (LOAD&PUSH 6)
77    (CALL 4 18)                         ; SIGNDIS3
80    (STORE 5)
81    (GETVALUE&PUSH 2)                   ; A
83    (CONST&PUSH 19)                     ; -2
84    (CONST&PUSH 7)                      ; -1
85    (CALL2&PUSH 8)                      ; POWER
87    (CALL2 8)                           ; POWER
89    (SETVALUE 11)                       ; EXP1
91    (LOAD&PUSH 3)
92    (JMPIFNOTEQTO 20 L100)              ; $POSITIVE
95    (LOAD&PUSH 5)
96    (JMPIFEQTO 21 L179)                 ; $NEGATIVE
100   L100
100   (LOAD&PUSH 5)
101   (JMPIFNOTEQTO 14 L109)              ; $ZERO
104   (LOAD&PUSH 3)
105   (JMPIFEQTO 20 L213)                 ; $POSITIVE
109   L109
109   (LOAD&PUSH 3)
110   (JMPIFNOTEQTO 20 L278)              ; $POSITIVE
114   (CONST&PUSH 7)                      ; -1
115   (GETVALUE&PUSH 11)                  ; EXP1
117   (CONST&PUSH 27)                     ; (%LOG)
118   (GETVALUE&PUSH 1)                   ; B
120   (CONST&PUSH 10)                     ; 2
121   (GETVALUE&PUSH 2)                   ; A
123   (LOAD&PUSH 13)
124   (CALL&PUSH 3 4)                     ; MUL
127   (CONST&PUSH 10)                     ; 2
128   (LOAD&PUSH 13)
129   (GETVALUE&PUSH 2)                   ; A
131   (GETVALUE&PUSH 28)                  ; R12
133   (CALL2&PUSH 8)                      ; POWER
135   (GETVALUE&PUSH 0)                   ; C
137   (GETVALUE&PUSH 1)                   ; B
139   (GETVALUE&PUSH 2)                   ; A
141   (GETVALUE&PUSH 3)                   ; X
143   (CALL&PUSH 4 29)                    ; POLFOO
146   (GETVALUE&PUSH 28)                  ; R12
148   (CALL2&PUSH 8)                      ; POWER
150   (CALL&PUSH 4 4)                     ; MUL
153   (CALL 3 5)                          ; ADD
156   L156
156   (PUSH)
157   (LIST&PUSH 2)
159   (CALL 3 25)                         ; MUL*
162   (JMP L315)
165   L165
165   (CONST&PUSH 15)                     ; ((1 1))
166   (CONST&PUSH 16)                     ; 0
167   (GETVALUE&PUSH 0)                   ; C
169   (GETVALUE&PUSH 1)                   ; B
171   (GETVALUE&PUSH 3)                   ; X
173   (CALL 5 17)                         ; NOCONSTQUAD
176   (JMP L315)
179   L179
179   (CONST&PUSH 7)                      ; -1
180   (GETVALUE&PUSH 11)                  ; EXP1
182   (CONST&PUSH 22)                     ; (%ASINH)
183   (LOAD&PUSH 11)
184   (LOAD&PUSH 11)
185   (CONST&PUSH 23)                     ; 4
186   (GETVALUE&PUSH 2)                   ; A
188   (GETVALUE&PUSH 0)                   ; C
190   (CALL&PUSH 3 4)                     ; MUL
193   (CONST&PUSH 7)                      ; -1
194   (GETVALUE&PUSH 1)                   ; B
196   (GETVALUE&PUSH 1)                   ; B
198   (CALL&PUSH 3 4)                     ; MUL
201   (CALL2&PUSH 5)                      ; ADD
203   (LOAD&PUSH 12)
204   (CALL2&PUSH 8)                      ; POWER
206   (CALL&PUSH 3 4)                     ; MUL
209   (CALL1 24)                          ; AUGMULT
211   (JMP L156)
213   L213
213   (CONST&PUSH 7)                      ; -1
214   (LOAD&PUSH 5)
215   (CALL2&PUSH 8)                      ; POWER
217   (CONST&PUSH 7)                      ; -1
218   (GETVALUE&PUSH 11)                  ; EXP1
220   (CONST&PUSH 26)                     ; (%LOG)
221   (LOAD&PUSH 11)
222   (LOAD&PUSH 13)
223   (CALL2&PUSH 4)                      ; MUL
225   (CALL1&PUSH 24)                     ; AUGMULT
227   (LIST&PUSH 2)
229   (CALL 4 25)                         ; MUL*
232   (JMP L315)
235   L235
235   (CONST&PUSH 7)                      ; -1
236   (GETVALUE&PUSH 2)                   ; A
238   (CALL2&PUSH 4)                      ; MUL
240   (LOAD&PUSH 7)
241   (CALL2&PUSH 8)                      ; POWER
243   (CONST&PUSH 30)                     ; (%ASIN)
245   (LOAD&PUSH 10)
246   (LOAD&PUSH 10)
247   (GETVALUE&PUSH 1)                   ; B
249   (GETVALUE&PUSH 1)                   ; B
251   (CALL2&PUSH 4)                      ; MUL
253   (CONST&PUSH 31)                     ; -4
255   (GETVALUE&PUSH 2)                   ; A
257   (GETVALUE&PUSH 0)                   ; C
259   (CALL&PUSH 3 4)                     ; MUL
262   (CALL2&PUSH 5)                      ; ADD
264   (LOAD&PUSH 11)
265   (CALL2&PUSH 8)                      ; POWER
267   (CALL&PUSH 3 4)                     ; MUL
270   (CALL1&PUSH 24)                     ; AUGMULT
272   (LIST&PUSH 2)
274   (CALL2 25)                          ; MUL*
276   (JMP L315)
278   L278
278   (LOAD&PUSH 3)
279   (JMPIFNOTEQTO 21 L286)              ; $NEGATIVE
282   (LOAD&PUSH 5)
283   (JMPIFEQTO 20 L235)                 ; $POSITIVE
286   L286
286   (CONST&PUSH 7)                      ; -1
287   (CONST&PUSH 7)                      ; -1
288   (GETVALUE&PUSH 28)                  ; R12
290   (CALL2&PUSH 8)                      ; POWER
292   (CONST&PUSH 7)                      ; -1
293   (GETVALUE&PUSH 0)                   ; C
295   (CALL2&PUSH 4)                      ; MUL
297   (CONST&PUSH 7)                      ; -1
298   (GETVALUE&PUSH 1)                   ; B
300   (CALL2&PUSH 4)                      ; MUL
302   (CONST&PUSH 7)                      ; -1
303   (GETVALUE&PUSH 2)                   ; A
305   (CALL2&PUSH 4)                      ; MUL
307   (GETVALUE&PUSH 3)                   ; X
309   (JSR&PUSH L0)
312   (CALL 3 4)                          ; MUL
315   L315
315   (UNBIND1)
316   (SKIP 6)
318   (UNBIND 4)
320   (SKIP&RET 5)


Disassembly of function #:|(DEFUN NOCONSTQUAD (NEGPOWLIST P C ...) ...)-69|
(CONST 0) = NOCONSTQUAD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NOCONSTQUAD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NOCONSTQUAD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NOCONSTQUAD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NOCONSTQUAD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NOCONSTQUAD
8     (SKIP&RET 1)


Disassembly of function NOCONSTQUAD
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = X
(CONST 4) = 1
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = EXP1
(CONST 8) = COEF
(CONST 9) = M
(CONST 10) = 2
(CONST 11) = CHECKSIGNTM
(CONST 12) = $ZERO
(CONST 13) = TRIVIAL1
(CONST 14) = 0
(CONST 15) = DENN
(CONST 16) = MUL
(CONST 17) = AUGMULT
(CONST 18) = -2
(CONST 19) = POLFOO
(CONST 20) = R12
(CONST 21) = ADD
(CONST 22) = -4
(CONST 23) = 3
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M COEF R12 C EXP1 B X P)
writes special variables : (M COEF)
217 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; P
3     (LOAD 6)
4     (BIND 1)                            ; C
6     (LOAD 8)
7     (BIND 2)                            ; B
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (CONST&PUSH 4)                      ; 1
13    (GETVALUE&PUSH 0)                   ; P
15    (GETVALUE&PUSH 0)                   ; P
17    (CALLSR&PUSH 3 53)                  ; +
20    (CONST&PUSH 5)                      ; -1
21    (CALL2&PUSH 6)                      ; POWER
23    (GETVALUE&PUSH 3)                   ; X
25    (CONST&PUSH 5)                      ; -1
26    (CALL2&PUSH 6)                      ; POWER
28    (GETVALUE&PUSH 0)                   ; P
30    (CALLSR&PUSH 0 54)                  ; -
33    (LOAD 2)
34    (BIND 7)                            ; EXP1
36    (PUSH-NIL 2)
38    (NIL)
39    (BIND 8)                            ; COEF
41    (PUSH-NIL 3)
43    (NIL)
44    (BIND 9)                            ; M
46    (PUSH-NIL 2)
48    (GETVALUE&PUSH 2)                   ; B
50    (CONST&PUSH 10)                     ; 2
51    (CALL2&PUSH 6)                      ; POWER
53    (CALL1 11)                          ; CHECKSIGNTM
55    (STORE 5)
56    (PUSH)
57    (JMPIFEQTO 12 L156)                 ; $ZERO
61    (CONST 14)                          ; 0
62    (STORE 12)
64    (LOAD 36)
66    (CAR)
67    (CAR)
68    (STORE 11)
70    (LOAD 36)
72    (CAR)
73    (CDR)
74    (CAR)
75    (SETVALUE 8)                        ; COEF
77    (GETVALUE&PUSH 2)                   ; B
79    (CONST&PUSH 5)                      ; -1
80    (CALL2 6)                           ; POWER
82    (STORE 0)
83    (LOAD&PUSH 11)
84    (CALLS2&JMPIF 145 L170)             ; ZEROP
88    L88
88    (CONST&PUSH 18)                     ; -2
89    (GETVALUE&PUSH 7)                   ; EXP1
91    (LOAD&PUSH 2)
92    (LOAD&PUSH 20)
93    (GETVALUE&PUSH 1)                   ; C
95    (GETVALUE&PUSH 2)                   ; B
97    (CONST&PUSH 14)                     ; 0
98    (GETVALUE&PUSH 3)                   ; X
100   (CALL&PUSH 4 19)                    ; POLFOO
103   (GETVALUE&PUSH 20)                  ; R12
105   (LOAD&PUSH 22)
106   (CALL2&PUSH 21)                     ; ADD
108   (CALL2&PUSH 6)                      ; POWER
110   (CALL&PUSH 5 16)                    ; MUL
113   (CALL1&PUSH 17)                     ; AUGMULT
115   (CONST&PUSH 22)                     ; -4
116   (GETVALUE&PUSH 0)                   ; P
118   (GETVALUE&PUSH 1)                   ; C
120   (GETVALUE&PUSH 7)                   ; EXP1
122   (LOAD&PUSH 5)
123   (GETVALUE&PUSH 0)                   ; P
125   (GETVALUE&PUSH 1)                   ; C
127   (GETVALUE&PUSH 2)                   ; B
129   (CONST&PUSH 14)                     ; 0
130   (GETVALUE&PUSH 3)                   ; X
132   (CALL&PUSH 5 15)                    ; DENN
135   (CALL&PUSH 6 16)                    ; MUL
138   (CALL1&PUSH 17)                     ; AUGMULT
140   (CALL2 21)                          ; ADD
142   (STORE 6)
143   (LOAD&PUSH 11)
144   (JMPIFEQTO 4 L195)                  ; 1
147   L147
147   (CONST 23)                          ; 3
149   (STORE 7)
150   (CONST 10)                          ; 2
151   (SETVALUE 9)                        ; M
153   (JMP L239)
156   L156
156   (LOAD&PUSH 36)
158   (GETVALUE&PUSH 0)                   ; P
160   (GETVALUE&PUSH 1)                   ; C
162   (GETVALUE&PUSH 3)                   ; X
164   (CALL 4 13)                         ; TRIVIAL1
167   (JMP L356)
170   L170
170   (GETVALUE&PUSH 8)                   ; COEF
172   (GETVALUE&PUSH 0)                   ; P
174   (GETVALUE&PUSH 1)                   ; C
176   (GETVALUE&PUSH 2)                   ; B
178   (CONST&PUSH 14)                     ; 0
179   (GETVALUE&PUSH 3)                   ; X
181   (CALL&PUSH 5 15)                    ; DENN
184   (CALL2&PUSH 16)                     ; MUL
186   (CALL1 17)                          ; AUGMULT
188   (STORE 12)
190   (CONST 4)                           ; 1
191   (STORE 7)
192   (JMP L350)
195   L195
195   (LOAD&PUSH 12)
196   (GETVALUE&PUSH 8)                   ; COEF
198   (LOAD&PUSH 8)
199   (CALL2&PUSH 16)                     ; MUL
201   (CALL1&PUSH 17)                     ; AUGMULT
203   (CALL2 21)                          ; ADD
205   (STORE 12)
207   (CONST 10)                          ; 2
208   (STORE 7)
209   (JMP L350)
212   L212
212   (LOAD&PUSH 7)
213   (JMPIFNOTEQTO 4 L147)               ; 1
217   (JMP L88)
220   L220
220   (LOAD 36)
222   (CAR)
223   (CDR)
224   (CAR)
225   (SETVALUE 8)                        ; COEF
227   (LOAD 36)
229   (CAR)
230   (CAR)
231   (STORE 11)
233   (LOAD&PUSH 7)
234   (JMPIFNOTEQTO 23 L212)              ; 3
237   L237
237   (LOAD 1)
238   (STORE 6)
239   L239
239   (CONST&PUSH 18)                     ; -2
240   (CONST&PUSH 5)                      ; -1
241   (GETVALUE&PUSH 0)                   ; P
243   (GETVALUE&PUSH 0)                   ; P
245   (GETVALUE&PUSH 9)                   ; M
247   (GETVALUE&PUSH 9)                   ; M
249   (CALLSR&PUSH 5 53)                  ; +
252   (CONST&PUSH 5)                      ; -1
253   (CALL2&PUSH 6)                      ; POWER
255   (LOAD&PUSH 2)
256   (GETVALUE&PUSH 3)                   ; X
258   (CONST&PUSH 5)                      ; -1
259   (GETVALUE&PUSH 9)                   ; M
261   (CALL2&PUSH 16)                     ; MUL
263   (CALL2&PUSH 6)                      ; POWER
265   (GETVALUE&PUSH 1)                   ; C
267   (GETVALUE&PUSH 2)                   ; B
269   (CONST&PUSH 14)                     ; 0
270   (GETVALUE&PUSH 3)                   ; X
272   (CALL&PUSH 4 19)                    ; POLFOO
275   (GETVALUE&PUSH 20)                  ; R12
277   (LOAD&PUSH 22)
278   (CALL2&PUSH 21)                     ; ADD
280   (CALL2&PUSH 6)                      ; POWER
282   (CALL&PUSH 5 16)                    ; MUL
285   (CALL1&PUSH 17)                     ; AUGMULT
287   (CONST&PUSH 18)                     ; -2
288   (GETVALUE&PUSH 1)                   ; C
290   (CONST&PUSH 5)                      ; -1
291   (GETVALUE&PUSH 0)                   ; P
293   (GETVALUE&PUSH 0)                   ; P
295   (GETVALUE&PUSH 9)                   ; M
297   (CALLSR&PUSH 4 53)                  ; +
300   (LOAD&PUSH 4)
301   (CONST&PUSH 5)                      ; -1
302   (GETVALUE&PUSH 0)                   ; P
304   (GETVALUE&PUSH 0)                   ; P
306   (GETVALUE&PUSH 9)                   ; M
308   (GETVALUE&PUSH 9)                   ; M
310   (CALLSR&PUSH 5 53)                  ; +
313   (CONST&PUSH 5)                      ; -1
314   (CALL2&PUSH 6)                      ; POWER
316   (LOAD&PUSH 12)
317   (CALL&PUSH 6 16)                    ; MUL
320   (CALL1&PUSH 17)                     ; AUGMULT
322   (CALL2 21)                          ; ADD
324   (STORE 1)
325   (GETVALUE&PUSH 9)                   ; M
327   (CALLS2 150)                        ; 1+
329   (SETVALUE 9)                        ; M
331   (PUSH)
332   (LOAD&PUSH 12)
333   (CALLSR&JMPIFNOT 1 48 L237)         ; >
338   (LOAD&PUSH 12)
339   (GETVALUE&PUSH 8)                   ; COEF
341   (LOAD&PUSH 3)
342   (CALL2&PUSH 16)                     ; MUL
344   (CALL1&PUSH 17)                     ; AUGMULT
346   (CALL2 21)                          ; ADD
348   (STORE 12)
350   L350
350   (LOAD&CDR&STORE 36)
352   (JMPIF L220)
355   (LOAD 12)
356   L356
356   (SKIP 2)
358   (UNBIND1)
359   (SKIP 3)
361   (UNBIND1)
362   (SKIP 2)
364   (UNBIND1)
365   (SKIP 3)
367   (UNBIND 4)
369   (SKIP&RET 6)


Disassembly of function #:|(DEFUN TRIVIAL1 (NEGPOWLIST P C ...) ...)-70|
(CONST 0) = TRIVIAL1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIVIAL1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIVIAL1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIVIAL1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIVIAL1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIVIAL1
8     (SKIP&RET 1)


Disassembly of function TRIVIAL1
(CONST 0) = P
(CONST 1) = C
(CONST 2) = X
(CONST 3) = 0
(CONST 4) = -2
(CONST 5) = -1
(CONST 6) = MUL
(CONST 7) = ADD
(CONST 8) = POWER
(CONST 9) = (RAT)
(CONST 10) = 2
(CONST 11) = AUGMULT
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C P X)
57 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; P
3     (LOAD 5)
4     (BIND 1)                            ; C
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (LOAD&JMPIFNOT 13 L92)
13    (GETVALUE&PUSH 2)                   ; X
15    (CONST&PUSH 4)                      ; -2
16    (GETVALUE&PUSH 0)                   ; P
18    (CALLSR&PUSH 2 55)                  ; *
21    (CONST&PUSH 5)                      ; -1
22    (LOAD 16)
24    (CAR)
25    (CAR&PUSH)
26    (CALL2&PUSH 6)                      ; MUL
28    (CALL2&PUSH 7)                      ; ADD
30    (CALL2&PUSH 8)                      ; POWER
32    (LOAD 14)
33    (CAR)
34    (CDR)
35    (CAR&PUSH)
36    (GETVALUE&PUSH 1)                   ; C
38    (GETVALUE&PUSH 0)                   ; P
40    (CALLSR&PUSH 0 54)                  ; -
43    (CONST&PUSH 9)                      ; (RAT)
44    (CONST&PUSH 5)                      ; -1
45    (CONST&PUSH 10)                     ; 2
46    (LIST&PUSH 3)
48    (CALL2&PUSH 7)                      ; ADD
50    (CALL2&PUSH 8)                      ; POWER
52    (CONST&PUSH 4)                      ; -2
53    (GETVALUE&PUSH 0)                   ; P
55    (CALLSR&PUSH 2 55)                  ; *
58    (CONST&PUSH 5)                      ; -1
59    (LOAD 18)
61    (CAR)
62    (CAR&PUSH)
63    (CALL2&PUSH 6)                      ; MUL
65    (CALL2&PUSH 7)                      ; ADD
67    (CONST&PUSH 5)                      ; -1
68    (CALL2&PUSH 8)                      ; POWER
70    (CALL&PUSH 4 6)                     ; MUL
73    (CALL1&PUSH 11)                     ; AUGMULT
75    (LOAD&CDR&PUSH 14)
77    (GETVALUE&PUSH 0)                   ; P
79    (GETVALUE&PUSH 1)                   ; C
81    (GETVALUE&PUSH 2)                   ; X
83    (JSR&PUSH L0)
86    (CALL2 7)                           ; ADD
88    L88
88    (UNBIND 3)
90    (SKIP&RET 5)
92    L92
92    (CONST 3)                           ; 0
93    (JMP L88)


Disassembly of function #:|(DEFUN NUMMDENN (POSZPOWLIST P C ...) ...)-71|
(CONST 0) = NUMMDENN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUMMDENN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUMMDENN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUMMDENN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUMMDENN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUMMDENN
8     (SKIP&RET 1)


Disassembly of function NUMMDENN
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = A
(CONST 4) = X
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = POLFOO
(CONST 8) = R12
(CONST 9) = ADD
(CONST 10) = 4
(CONST 11) = MUL
(CONST 12) = EC-1
(CONST 13) = -2
(CONST 14) = 2
(CONST 15) = EXP1
(CONST 16) = COEF
(CONST 17) = M
(CONST 18) = 0
(CONST 19) = SIGNDIS1
(CONST 20) = DENN
(CONST 21) = AUGMULT
(CONST 22) = 1
(CONST 23) = (RAT)
(CONST 24) = $ZERO
(CONST 25) = -4
(CONST 26) = -3
(CONST 27) = (RAT)
(CONST 28) = (RAT)
(CONST 29) = 8
(CONST 30) = 3
(CONST 31) = DEN1
(CONST 32) = (RAT)
(CONST 33) = (%LOG)
(CONST 34) = MUL*
(CONST 35) = (%LOG)
(CONST 36) = (RAT)
(CONST 37) = (RAT)
(CONST 38) = DENOM
(CONST 39) = (RAT)
(CONST 40) = (RAT)
(CONST 41) = $EXPAND
(CONST 42) = DISTRINT
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (COEF DENOM M EXP1 EC-1 R12 X A B C P)
writes special variables : (M COEF)
513 byte-code instructions:
0     L0
0     (LOAD 5)
1     (BIND 0)                            ; P
3     (LOAD 7)
4     (BIND 1)                            ; C
6     (LOAD 9)
7     (BIND 2)                            ; B
9     (LOAD 11)
10    (BIND 3)                            ; A
12    (LOAD 13)
13    (BIND 4)                            ; X
15    (CONST&PUSH 5)                      ; -1
16    (GETVALUE&PUSH 0)                   ; P
18    (GETVALUE&PUSH 0)                   ; P
20    (CALLSR&PUSH 3 53)                  ; +
23    (CONST&PUSH 5)                      ; -1
24    (CALL2&PUSH 6)                      ; POWER
26    (GETVALUE&PUSH 1)                   ; C
28    (GETVALUE&PUSH 2)                   ; B
30    (GETVALUE&PUSH 3)                   ; A
32    (GETVALUE&PUSH 4)                   ; X
34    (CALL&PUSH 4 7)                     ; POLFOO
37    (GETVALUE&PUSH 8)                   ; R12
39    (GETVALUE&PUSH 0)                   ; P
41    (CALLSR&PUSH 0 54)                  ; -
44    (CALL2&PUSH 9)                      ; ADD
46    (CALL2&PUSH 6)                      ; POWER
48    (CONST&PUSH 10)                     ; 4
49    (GETVALUE&PUSH 3)                   ; A
51    (GETVALUE&PUSH 1)                   ; C
53    (CALL&PUSH 3 11)                    ; MUL
56    (CONST&PUSH 5)                      ; -1
57    (GETVALUE&PUSH 2)                   ; B
59    (GETVALUE&PUSH 2)                   ; B
61    (CALL&PUSH 3 11)                    ; MUL
64    (CALL2&PUSH 9)                      ; ADD
66    (CONST&PUSH 5)                      ; -1
67    (CALL2&PUSH 6)                      ; POWER
69    (GETVALUE&PUSH 4)                   ; X
71    (GETVALUE&PUSH 2)                   ; B
73    (GETVALUE&PUSH 8)                   ; R12
75    (GETVALUE&PUSH 12)                  ; EC-1
77    (CALL&PUSH 3 11)                    ; MUL
80    (CALL2&PUSH 9)                      ; ADD
82    (GETVALUE&PUSH 1)                   ; C
84    (CONST&PUSH 13)                     ; -2
85    (CALL2&PUSH 6)                      ; POWER
87    (CONST&PUSH 14)                     ; 2
88    (CONST&PUSH 13)                     ; -2
89    (GETVALUE&PUSH 0)                   ; P
91    (CALLSR&PUSH 2 55)                  ; *
94    (CALLSR&PUSH 2 53)                  ; +
97    (CONST&PUSH 13)                     ; -2
98    (GETVALUE&PUSH 0)                   ; P
100   (CALLSR&PUSH 2 55)                  ; *
103   (CALLS2&PUSH 150)                   ; 1+
105   (LOAD 6)
106   (BIND 15)                           ; EXP1
108   (PUSH-NIL 2)
110   (NIL)
111   (BIND 16)                           ; COEF
113   (PUSH-NIL 3)
115   (NIL)
116   (BIND 17)                           ; M
118   (PUSH-NIL 2)
120   (CONST 18)                          ; 0
121   (STORE 12)
123   (LOAD 44)
125   (CAR)
126   (CAR)
127   (STORE 11)
129   (LOAD 44)
131   (CAR)
132   (CDR)
133   (CAR)
134   (SETVALUE 16)                       ; COEF
136   (GETVALUE&PUSH 1)                   ; C
138   (GETVALUE&PUSH 2)                   ; B
140   (GETVALUE&PUSH 3)                   ; A
142   (CALL 3 19)                         ; SIGNDIS1
145   (STORE 0)
146   (LOAD&PUSH 11)
147   (CALLS2&JMPIF 145 L743)             ; ZEROP
151   L151
151   (CONST&PUSH 5)                      ; -1
152   (GETVALUE&PUSH 12)                  ; EC-1
154   (GETVALUE&PUSH 15)                  ; EXP1
156   (LOAD&PUSH 24)
157   (CALL&PUSH 4 11)                    ; MUL
160   (CALL1&PUSH 21)                     ; AUGMULT
162   (GETVALUE&PUSH 2)                   ; B
164   (CONST&PUSH 23)                     ; (RAT)
165   (CONST&PUSH 5)                      ; -1
166   (CONST&PUSH 14)                     ; 2
167   (LIST&PUSH 3)
169   (GETVALUE&PUSH 12)                  ; EC-1
171   (GETVALUE&PUSH 0)                   ; P
173   (GETVALUE&PUSH 1)                   ; C
175   (GETVALUE&PUSH 2)                   ; B
177   (GETVALUE&PUSH 3)                   ; A
179   (GETVALUE&PUSH 4)                   ; X
181   (CALL&PUSH 5 20)                    ; DENN
184   (CALL&PUSH 4 11)                    ; MUL
187   (CALL1&PUSH 21)                     ; AUGMULT
189   (CALL2 9)                           ; ADD
191   (STORE 6)
192   (LOAD&PUSH 11)
193   (JMPIFEQTO 22 L770)                 ; 1
197   L197
197   (GETVALUE&PUSH 0)                   ; P
199   (CONST&PUSH 18)                     ; 0
200   (CALLSR&JMPIFNOT 1 48 L309)         ; >
205   (LOAD&PUSH 0)
206   (JMPIFEQTO 24 L309)                 ; $ZERO
210   (GETVALUE&PUSH 12)                  ; EC-1
212   (GETVALUE&PUSH 15)                  ; EXP1
214   (LOAD&PUSH 22)
215   (LOAD&PUSH 24)
216   (CONST&PUSH 14)                     ; 2
217   (GETVALUE&PUSH 3)                   ; A
219   (GETVALUE&PUSH 2)                   ; B
221   (CALL&PUSH 3 11)                    ; MUL
224   (CONST&PUSH 14)                     ; 2
225   (GETVALUE&PUSH 2)                   ; B
227   (GETVALUE&PUSH 2)                   ; B
229   (GETVALUE&PUSH 4)                   ; X
231   (CALL&PUSH 4 11)                    ; MUL
234   (CONST&PUSH 25)                     ; -4
235   (GETVALUE&PUSH 3)                   ; A
237   (GETVALUE&PUSH 1)                   ; C
239   (GETVALUE&PUSH 4)                   ; X
241   (CALL&PUSH 4 11)                    ; MUL
244   (CALL&PUSH 3 9)                     ; ADD
247   (CALL&PUSH 5 11)                    ; MUL
250   (CALL1&PUSH 21)                     ; AUGMULT
252   (GETVALUE&PUSH 12)                  ; EC-1
254   (LOAD&PUSH 22)
255   (GETVALUE&PUSH 15)                  ; EXP1
257   (CONST&PUSH 10)                     ; 4
258   (GETVALUE&PUSH 3)                   ; A
260   (GETVALUE&PUSH 1)                   ; C
262   (CALL&PUSH 3 11)                    ; MUL
265   (CONST&PUSH 14)                     ; 2
266   (GETVALUE&PUSH 2)                   ; B
268   (GETVALUE&PUSH 2)                   ; B
270   (GETVALUE&PUSH 0)                   ; P
272   (CALL&PUSH 4 11)                    ; MUL
275   (CONST&PUSH 26)                     ; -3
276   (GETVALUE&PUSH 2)                   ; B
278   (GETVALUE&PUSH 2)                   ; B
280   (CALL&PUSH 3 11)                    ; MUL
283   (CALL&PUSH 3 9)                     ; ADD
286   (GETVALUE&PUSH 0)                   ; P
288   (CALLS2&PUSH 151)                   ; 1-
290   (GETVALUE&PUSH 1)                   ; C
292   (GETVALUE&PUSH 2)                   ; B
294   (GETVALUE&PUSH 3)                   ; A
296   (GETVALUE&PUSH 4)                   ; X
298   (CALL&PUSH 5 20)                    ; DENN
301   (CALL&PUSH 5 11)                    ; MUL
304   (CALL1&PUSH 21)                     ; AUGMULT
306   (CALL2 9)                           ; ADD
308   (STORE 5)
309   L309
309   (GETVALUE&PUSH 0)                   ; P
311   (JMPIFNOTEQTO 18 L405)              ; 0
315   (LOAD&PUSH 0)
316   (JMPIFEQTO 24 L405)                 ; $ZERO
320   (CONST&PUSH 27)                     ; (RAT)
321   (CONST&PUSH 22)                     ; 1
322   (CONST&PUSH 10)                     ; 4
323   (LIST&PUSH 3)
325   (LOAD&PUSH 19)
326   (CONST&PUSH 14)                     ; 2
327   (GETVALUE&PUSH 1)                   ; C
329   (GETVALUE&PUSH 4)                   ; X
331   (CALL&PUSH 3 11)                    ; MUL
334   (CONST&PUSH 26)                     ; -3
335   (GETVALUE&PUSH 2)                   ; B
337   (CALL2&PUSH 11)                     ; MUL
339   (CALL2&PUSH 9)                      ; ADD
341   (GETVALUE&PUSH 1)                   ; C
343   (GETVALUE&PUSH 2)                   ; B
345   (GETVALUE&PUSH 3)                   ; A
347   (GETVALUE&PUSH 4)                   ; X
349   (CALL&PUSH 4 7)                     ; POLFOO
352   (GETVALUE&PUSH 8)                   ; R12
354   (CALL2&PUSH 6)                      ; POWER
356   (CALL&PUSH 4 11)                    ; MUL
359   (CALL1&PUSH 21)                     ; AUGMULT
361   (CONST&PUSH 28)                     ; (RAT)
362   (CONST&PUSH 22)                     ; 1
363   (CONST&PUSH 29)                     ; 8
364   (LIST&PUSH 3)
366   (LOAD&PUSH 20)
367   (CONST&PUSH 30)                     ; 3
369   (GETVALUE&PUSH 2)                   ; B
371   (GETVALUE&PUSH 2)                   ; B
373   (CALL&PUSH 3 11)                    ; MUL
376   (CONST&PUSH 25)                     ; -4
377   (GETVALUE&PUSH 3)                   ; A
379   (GETVALUE&PUSH 1)                   ; C
381   (CALL&PUSH 3 11)                    ; MUL
384   (CALL2&PUSH 9)                      ; ADD
386   (GETVALUE&PUSH 1)                   ; C
388   (GETVALUE&PUSH 2)                   ; B
390   (GETVALUE&PUSH 3)                   ; A
392   (GETVALUE&PUSH 4)                   ; X
394   (CALL&PUSH 4 31)                    ; DEN1
397   (CALL&PUSH 4 11)                    ; MUL
400   (CALL1&PUSH 21)                     ; AUGMULT
402   (CALL2 9)                           ; ADD
404   (STORE 5)
405   L405
405   (GETVALUE&PUSH 0)                   ; P
407   (JMPIFNOTEQTO 18 L467)              ; 0
410   (LOAD&PUSH 0)
411   (JMPIFNOTEQTO 24 L467)              ; $ZERO
414   (GETVALUE&PUSH 2)                   ; B
416   (GETVALUE&PUSH 2)                   ; B
418   (CONST&PUSH 32)                     ; (RAT)
420   (CONST&PUSH 22)                     ; 1
421   (CONST&PUSH 10)                     ; 4
422   (LIST&PUSH 3)
424   (GETVALUE&PUSH 1)                   ; C
426   (CONST&PUSH 26)                     ; -3
427   (CALL2&PUSH 6)                      ; POWER
429   (CONST&PUSH 33)                     ; (%LOG)
431   (LOAD&PUSH 24)
432   (LIST&PUSH 2)
434   (CALL&PUSH 5 34)                    ; MUL*
437   (CALL1&PUSH 21)                     ; AUGMULT
439   (GETVALUE&PUSH 12)                  ; EC-1
441   (GETVALUE&PUSH 8)                   ; R12
443   (LOAD&PUSH 22)
444   (CONST&PUSH 14)                     ; 2
445   (CALL2&PUSH 6)                      ; POWER
447   (CALL&PUSH 3 11)                    ; MUL
450   (CALL1&PUSH 21)                     ; AUGMULT
452   (CONST&PUSH 5)                      ; -1
453   (GETVALUE&PUSH 2)                   ; B
455   (GETVALUE&PUSH 4)                   ; X
457   (LOAD&PUSH 23)
458   (CALL&PUSH 4 11)                    ; MUL
461   (CALL1&PUSH 21)                     ; AUGMULT
463   (CALL 3 9)                          ; ADD
466   (STORE 5)
467   L467
467   (GETVALUE&PUSH 0)                   ; P
469   (JMPIFNOTEQTO 22 L528)              ; 1
472   (LOAD&PUSH 0)
473   (JMPIFNOTEQTO 24 L528)              ; $ZERO
476   (GETVALUE&PUSH 12)                  ; EC-1
478   (CONST&PUSH 35)                     ; (%LOG)
480   (LOAD&PUSH 21)
481   (LIST&PUSH 2)
483   (CALL2&PUSH 34)                     ; MUL*
485   (CALL1&PUSH 21)                     ; AUGMULT
487   (GETVALUE&PUSH 2)                   ; B
489   (LOAD&PUSH 20)
490   (LOAD&PUSH 22)
491   (CONST&PUSH 5)                      ; -1
492   (CALL2&PUSH 6)                      ; POWER
494   (CALL&PUSH 3 11)                    ; MUL
497   (CALL1&PUSH 21)                     ; AUGMULT
499   (CONST&PUSH 36)                     ; (RAT)
501   (CONST&PUSH 5)                      ; -1
502   (CONST&PUSH 29)                     ; 8
503   (LIST&PUSH 3)
505   (GETVALUE&PUSH 1)                   ; C
507   (CONST&PUSH 26)                     ; -3
508   (CALL2&PUSH 6)                      ; POWER
510   (GETVALUE&PUSH 2)                   ; B
512   (GETVALUE&PUSH 2)                   ; B
514   (LOAD&PUSH 25)
516   (CONST&PUSH 13)                     ; -2
517   (CALL2&PUSH 6)                      ; POWER
519   (CALL&PUSH 5 11)                    ; MUL
522   (CALL1&PUSH 21)                     ; AUGMULT
524   (CALL 3 9)                          ; ADD
527   (STORE 5)
528   L528
528   (LOAD&PUSH 0)
529   (JMPIFNOTEQTO 24 L612)              ; $ZERO
533   (GETVALUE&PUSH 0)                   ; P
535   (CONST&PUSH 22)                     ; 1
536   (CALLSR&JMPIFNOT 1 48 L612)         ; >
541   (GETVALUE&PUSH 12)                  ; EC-1
543   (LOAD&PUSH 20)
544   (LOAD&PUSH 19)
545   (CALL2&PUSH 6)                      ; POWER
547   (LOAD&PUSH 19)
548   (CONST&PUSH 5)                      ; -1
549   (CALL2&PUSH 6)                      ; POWER
551   (CALL&PUSH 3 11)                    ; MUL
554   (CALL1&PUSH 21)                     ; AUGMULT
556   (CONST&PUSH 5)                      ; -1
557   (GETVALUE&PUSH 2)                   ; B
559   (LOAD&PUSH 21)
560   (LOAD&PUSH 20)
561   (CONST&PUSH 5)                      ; -1
562   (CALL2&PUSH 6)                      ; POWER
564   (LOAD&PUSH 24)
565   (LOAD&PUSH 22)
566   (CALL2&PUSH 6)                      ; POWER
568   (CALL&PUSH 5 11)                    ; MUL
571   (CALL1&PUSH 21)                     ; AUGMULT
573   (GETVALUE&PUSH 2)                   ; B
575   (GETVALUE&PUSH 2)                   ; B
577   (CONST&PUSH 37)                     ; (RAT)
579   (CONST&PUSH 5)                      ; -1
580   (CONST&PUSH 29)                     ; 8
581   (LIST&PUSH 3)
583   (GETVALUE&PUSH 1)                   ; C
585   (CONST&PUSH 26)                     ; -3
586   (CALL2&PUSH 6)                      ; POWER
588   (GETVALUE&PUSH 0)                   ; P
590   (CONST&PUSH 5)                      ; -1
591   (CALL2&PUSH 6)                      ; POWER
593   (LOAD&PUSH 26)
595   (CONST&PUSH 13)                     ; -2
596   (GETVALUE&PUSH 0)                   ; P
598   (CALLSR&PUSH 2 55)                  ; *
601   (CALL2&PUSH 6)                      ; POWER
603   (CALL&PUSH 6 11)                    ; MUL
606   (CALL1&PUSH 21)                     ; AUGMULT
608   (CALL 3 9)                          ; ADD
611   (STORE 5)
612   L612
612   (LOAD&PUSH 11)
613   (JMPIFEQTO 14 L787)                 ; 2
617   L617
617   (CONST 10)                          ; 4
618   (STORE 7)
619   (CONST 30)                          ; 3
621   (SETVALUE 17)                       ; M
623   L623
623   (GETVALUE&PUSH 0)                   ; P
625   (GETVALUE&PUSH 0)                   ; P
627   (GETVALUE&PUSH 17)                  ; M
629   (CALLSR&PUSH 0 54)                  ; -
632   (CALLSR 3 53)                       ; +
635   (BIND 38)                           ; DENOM
637   (GETVALUE&PUSH 17)                  ; M
639   (CALLS2&PUSH 151)                   ; 1-
641   (GETVALUE&PUSH 4)                   ; X
643   (LOAD&PUSH 1)
644   (CALL2&PUSH 6)                      ; POWER
646   (GETVALUE&PUSH 12)                  ; EC-1
648   (CONST&PUSH 39)                     ; (RAT)
650   (CONST&PUSH 5)                      ; -1
651   (GETVALUE&PUSH 38)                  ; DENOM
653   (LIST&PUSH 3)
655   (GETVALUE&PUSH 1)                   ; C
657   (GETVALUE&PUSH 2)                   ; B
659   (GETVALUE&PUSH 3)                   ; A
661   (GETVALUE&PUSH 4)                   ; X
663   (CALL&PUSH 4 7)                     ; POLFOO
666   (GETVALUE&PUSH 8)                   ; R12
668   (GETVALUE&PUSH 0)                   ; P
670   (CALLSR&PUSH 0 54)                  ; -
673   (CALL2&PUSH 9)                      ; ADD
675   (CALL2&PUSH 6)                      ; POWER
677   (CALL&PUSH 4 34)                    ; MUL*
680   (CALL1&PUSH 21)                     ; AUGMULT
682   (GETVALUE&PUSH 2)                   ; B
684   (CONST&PUSH 22)                     ; 1
685   (GETVALUE&PUSH 0)                   ; P
687   (GETVALUE&PUSH 0)                   ; P
689   (CONST&PUSH 13)                     ; -2
690   (GETVALUE&PUSH 17)                  ; M
692   (CALLSR&PUSH 2 55)                  ; *
695   (CALLSR&PUSH 4 53)                  ; +
698   (CONST&PUSH 40)                     ; (RAT)
700   (CONST&PUSH 5)                      ; -1
701   (CONST&PUSH 14)                     ; 2
702   (LIST&PUSH 3)
704   (GETVALUE&PUSH 12)                  ; EC-1
706   (GETVALUE&PUSH 38)                  ; DENOM
708   (CONST&PUSH 5)                      ; -1
709   (CALL2&PUSH 6)                      ; POWER
711   (LOAD&PUSH 15)
712   (CALL&PUSH 6 11)                    ; MUL
715   (CALL1&PUSH 21)                     ; AUGMULT
717   (GETVALUE&PUSH 3)                   ; A
719   (LOAD&PUSH 3)
720   (GETVALUE&PUSH 12)                  ; EC-1
722   (GETVALUE&PUSH 38)                  ; DENOM
724   (CONST&PUSH 5)                      ; -1
725   (CALL2&PUSH 6)                      ; POWER
727   (LOAD&PUSH 16)
728   (CALL&PUSH 5 11)                    ; MUL
731   (CALL1&PUSH 21)                     ; AUGMULT
733   (CALL 3 9)                          ; ADD
736   (SKIP 1)
738   (UNBIND1)
739   (STORE 1)
740   (JMP L895)
743   L743
743   (GETVALUE&PUSH 16)                  ; COEF
745   (GETVALUE&PUSH 0)                   ; P
747   (GETVALUE&PUSH 1)                   ; C
749   (GETVALUE&PUSH 2)                   ; B
751   (GETVALUE&PUSH 3)                   ; A
753   (GETVALUE&PUSH 4)                   ; X
755   (CALL&PUSH 5 20)                    ; DENN
758   (CALL2&PUSH 11)                     ; MUL
760   (CALL1 21)                          ; AUGMULT
762   (STORE 12)
764   (CONST 22)                          ; 1
766   (STORE 7)
767   (JMP L920)
770   L770
770   (LOAD&PUSH 12)
771   (GETVALUE&PUSH 16)                  ; COEF
773   (LOAD&PUSH 8)
774   (CALL2&PUSH 11)                     ; MUL
776   (CALL1&PUSH 21)                     ; AUGMULT
778   (CALL2 9)                           ; ADD
780   (STORE 12)
782   (CONST 14)                          ; 2
783   (STORE 7)
784   (JMP L920)
787   L787
787   (LOAD&PUSH 12)
788   (GETVALUE&PUSH 16)                  ; COEF
790   (LOAD&PUSH 7)
791   (CALL2&PUSH 11)                     ; MUL
793   (CALL1&PUSH 21)                     ; AUGMULT
795   (CALL2 9)                           ; ADD
797   (STORE 12)
799   (CONST 30)                          ; 3
801   (STORE 7)
802   (JMP L920)
805   L805
805   (LOAD&PUSH 7)
806   (JMPIFEQTO 22 L151)                 ; 1
810   (LOAD&PUSH 7)
811   (JMPIFNOTEQTO 14 L617)              ; 2
815   (JMP L197)
818   L818
818   (LOAD 44)
820   (CAR)
821   (CDR)
822   (CAR)
823   (SETVALUE 16)                       ; COEF
825   (LOAD 44)
827   (CAR)
828   (CAR)
829   (STORE 11)
831   (LOAD&PUSH 7)
832   (JMPIFNOTEQTO 10 L805)              ; 4
835   L835
835   (LOAD 5)
836   (STORE 6)
837   (LOAD 1)
838   (STORE 5)
839   (GETVALUE&PUSH 17)                  ; M
841   (GETVALUE&PUSH 0)                   ; P
843   (GETVALUE&PUSH 0)                   ; P
845   (CALLSR&PUSH 2 53)                  ; +
848   (CALLS2&JMPIFNOT 2 L623)            ; EQUAL
852   (GETVALUE&PUSH 17)                  ; M
854   (CALLS2&PUSH 151)                   ; 1-
856   (CONST&PUSH 22)                     ; 1
857   (LIST&PUSH 2)
859   (LIST&PUSH 1)
861   (GETVALUE&PUSH 0)                   ; P
863   (GETVALUE&PUSH 1)                   ; C
865   (GETVALUE&PUSH 2)                   ; B
867   (GETVALUE&PUSH 3)                   ; A
869   (GETVALUE&PUSH 4)                   ; X
871   (JSR&PUSH L0)
874   (GETVALUE&PUSH 4)                   ; X
876   (LOAD&PUSH 1)
877   (CALL2&PUSH 11)                     ; MUL
879   (CONST&PUSH 5)                      ; -1
880   (LOAD&PUSH 2)
881   (CALL1 41)                          ; $EXPAND
883   (CDR&PUSH)
884   (GETVALUE&PUSH 4)                   ; X
886   (CALL2&PUSH 42)                     ; DISTRINT
888   (CALL2&PUSH 11)                     ; MUL
890   (CALL2 9)                           ; ADD
892   (SKIP 1)
894   (STORE 1)
895   L895
895   (GETVALUE&PUSH 17)                  ; M
897   (CALLS2 150)                        ; 1+
899   (SETVALUE 17)                       ; M
901   (PUSH)
902   (LOAD&PUSH 12)
903   (CALLSR&JMPIFNOT 1 48 L835)         ; >
908   (LOAD&PUSH 12)
909   (GETVALUE&PUSH 16)                  ; COEF
911   (LOAD&PUSH 3)
912   (CALL2&PUSH 11)                     ; MUL
914   (CALL1&PUSH 21)                     ; AUGMULT
916   (CALL2 9)                           ; ADD
918   (STORE 12)
920   L920
920   (LOAD&CDR&STORE 44)
922   (JMPIF L818)
925   (LOAD 12)
926   (SKIP 2)
928   (UNBIND1)
929   (SKIP 3)
931   (UNBIND1)
932   (SKIP 2)
934   (UNBIND1)
935   (SKIP 7)
937   (UNBIND 5)
939   (SKIP&RET 7)


Disassembly of function #:|(DEFUN DENMNUMN (NEGPOWLIST POW C ...) ...)-72|
(CONST 0) = DENMNUMN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DENMNUMN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DENMNUMN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DENMNUMN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DENMNUMN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DENMNUMN
8     (SKIP&RET 1)


Disassembly of function DENMNUMN
(CONST 0) = C
(CONST 1) = B
(CONST 2) = A
(CONST 3) = X
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = EXP1
(CONST 7) = P
(CONST 8) = COEF
(CONST 9) = M
(CONST 10) = 2
(CONST 11) = CHECKSIGNTM
(CONST 12) = $ZERO
(CONST 13) = NONCONSTQUADENUM
(CONST 14) = 0
(CONST 15) = R12
(CONST 16) = MUL
(CONST 17) = ADD
(CONST 18) = NUMN
(CONST 19) = AUGMULT
(CONST 20) = 1
(CONST 21) = DEN1NUMN
(CONST 22) = POLFOO
(CONST 23) = (RAT)
(CONST 24) = (RAT)
(CONST 25) = -2
(CONST 26) = DEN1DEN1
(CONST 27) = DEN1
(CONST 28) = 3
(CONST 29) = 4
(CONST 30) = (RAT)
(CONST 31) = (RAT)
(CONST 32) = MUL*
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M COEF R12 EXP1 P B C A X)
writes special variables : (M COEF P)
314 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; C
3     (LOAD 6)
4     (BIND 1)                            ; B
6     (LOAD 8)
7     (BIND 2)                            ; A
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (GETVALUE&PUSH 3)                   ; X
14    (CONST&PUSH 4)                      ; -1
15    (CALL2 5)                           ; POWER
17    (BIND 6)                            ; EXP1
19    (CONST&PUSH 4)                      ; -1
20    (LOAD&PUSH 21)
21    (LOAD&PUSH 22)
22    (CALLSR&PUSH 3 53)                  ; +
25    (PUSH-NIL 2)
27    (NIL)
28    (BIND 7)                            ; P
30    (NIL)
31    (BIND 8)                            ; COEF
33    (PUSH-NIL 3)
35    (NIL)
36    (BIND 9)                            ; M
38    (PUSH-NIL 3)
40    (CONST&PUSH 4)                      ; -1
41    (LOAD&PUSH 39)
43    (LOAD&PUSH 40)
45    (CALLSR 3 53)                       ; +
48    (SETVALUE 7)                        ; P
50    (LOAD&CAR&PUSH 39)
52    (T)
53    (JMPIFEQ L291)
56    (GETVALUE&PUSH 2)                   ; A
58    (CONST&PUSH 10)                     ; 2
59    (CALL2&PUSH 5)                      ; POWER
61    (CALL1 11)                          ; CHECKSIGNTM
63    (STORE 1)
64    (PUSH)
65    (JMPIFEQTO 12 L296)                 ; $ZERO
69    (GETVALUE&PUSH 2)                   ; A
71    (CONST&PUSH 4)                      ; -1
72    (CALL2 5)                           ; POWER
74    (STORE 0)
75    L75
75    (CONST 14)                          ; 0
76    (STORE 16)
78    (LOAD 39)
80    (CAR)
81    (CAR)
82    (STORE 15)
84    (LOAD 39)
86    (CAR)
87    (CDR)
88    (CAR)
89    (SETVALUE 8)                        ; COEF
91    (LOAD&PUSH 15)
92    (CALLS2&JMPIF 145 L312)             ; ZEROP
96    L96
96    (LOAD&PUSH 38)
98    (GETVALUE&PUSH 0)                   ; C
100   (GETVALUE&PUSH 1)                   ; B
102   (GETVALUE&PUSH 2)                   ; A
104   (GETVALUE&PUSH 3)                   ; X
106   (CALL 5 21)                         ; DEN1NUMN
109   (STORE 7)
110   (LOAD&PUSH 15)
111   (JMPIFEQTO 20 L347)                 ; 1
115   L115
115   (GETVALUE&PUSH 7)                   ; P
117   (JMPIFEQTO 20 L205)                 ; 1
121   (CONST&PUSH 4)                      ; -1
122   (GETVALUE&PUSH 6)                   ; EXP1
124   (GETVALUE&PUSH 0)                   ; C
126   (GETVALUE&PUSH 1)                   ; B
128   (GETVALUE&PUSH 2)                   ; A
130   (GETVALUE&PUSH 3)                   ; X
132   (CALL&PUSH 4 22)                    ; POLFOO
135   (LOAD&PUSH 41)
137   (CONST&PUSH 23)                     ; (RAT)
138   (CONST&PUSH 4)                      ; -1
139   (CONST&PUSH 10)                     ; 2
140   (LIST&PUSH 3)
142   (CALL2&PUSH 17)                     ; ADD
144   (CALL2&PUSH 5)                      ; POWER
146   (CALL&PUSH 3 16)                    ; MUL
149   (CALL1&PUSH 19)                     ; AUGMULT
151   (GETVALUE&PUSH 1)                   ; B
153   (CONST&PUSH 24)                     ; (RAT)
154   (LOAD&PUSH 20)
155   (CONST&PUSH 10)                     ; 2
156   (LIST&PUSH 3)
158   (LOAD&DEC&PUSH 41)
160   (GETVALUE&PUSH 0)                   ; C
162   (GETVALUE&PUSH 1)                   ; B
164   (GETVALUE&PUSH 2)                   ; A
166   (GETVALUE&PUSH 3)                   ; X
168   (CALL&PUSH 5 21)                    ; DEN1NUMN
171   (CALL&PUSH 3 16)                    ; MUL
174   (CALL1&PUSH 19)                     ; AUGMULT
176   (GETVALUE&PUSH 0)                   ; C
178   (LOAD&PUSH 20)
179   (CONST&PUSH 25)                     ; -2
180   (LOAD&PUSH 43)
182   (CALLSR&PUSH 2 53)                  ; +
185   (GETVALUE&PUSH 0)                   ; C
187   (GETVALUE&PUSH 1)                   ; B
189   (GETVALUE&PUSH 2)                   ; A
191   (GETVALUE&PUSH 3)                   ; X
193   (CALL&PUSH 5 18)                    ; NUMN
196   (CALL&PUSH 3 16)                    ; MUL
199   (CALL1&PUSH 19)                     ; AUGMULT
201   (CALL 3 17)                         ; ADD
204   (STORE 6)
205   L205
205   (GETVALUE&PUSH 7)                   ; P
207   (JMPIFNOTEQTO 20 L275)              ; 1
211   (CONST&PUSH 4)                      ; -1
212   (GETVALUE&PUSH 0)                   ; C
214   (GETVALUE&PUSH 1)                   ; B
216   (GETVALUE&PUSH 2)                   ; A
218   (GETVALUE&PUSH 3)                   ; X
220   (CALL&PUSH 4 22)                    ; POLFOO
223   (GETVALUE&PUSH 15)                  ; R12
225   (CALL2&PUSH 5)                      ; POWER
227   (GETVALUE&PUSH 6)                   ; EXP1
229   (CALL&PUSH 3 16)                    ; MUL
232   (CALL1&PUSH 19)                     ; AUGMULT
234   (GETVALUE&PUSH 1)                   ; B
236   (GETVALUE&PUSH 15)                  ; R12
238   (GETVALUE&PUSH 0)                   ; C
240   (GETVALUE&PUSH 1)                   ; B
242   (GETVALUE&PUSH 2)                   ; A
244   (GETVALUE&PUSH 3)                   ; X
246   (CALL&PUSH 4 26)                    ; DEN1DEN1
249   (CALL&PUSH 3 16)                    ; MUL
252   (CALL1&PUSH 19)                     ; AUGMULT
254   (GETVALUE&PUSH 0)                   ; C
256   (GETVALUE&PUSH 0)                   ; C
258   (GETVALUE&PUSH 1)                   ; B
260   (GETVALUE&PUSH 2)                   ; A
262   (GETVALUE&PUSH 3)                   ; X
264   (CALL&PUSH 4 27)                    ; DEN1
267   (CALL2&PUSH 16)                     ; MUL
269   (CALL1&PUSH 19)                     ; AUGMULT
271   (CALL 3 17)                         ; ADD
274   (STORE 6)
275   L275
275   (LOAD&PUSH 15)
276   (JMPIFEQTO 10 L365)                 ; 2
280   L280
280   (CONST 29)                          ; 4
282   (STORE 8)
284   (CONST 28)                          ; 3
286   (SETVALUE 9)                        ; M
288   (JMP L418)
291   L291
291   (LOAD&CDR&STORE 39)
293   (JMP L75)
296   L296
296   (LOAD&PUSH 39)
298   (GETVALUE&PUSH 7)                   ; P
300   (GETVALUE&PUSH 0)                   ; C
302   (GETVALUE&PUSH 1)                   ; B
304   (GETVALUE&PUSH 3)                   ; X
306   (CALL 5 13)                         ; NONCONSTQUADENUM
309   (JMP L558)
312   L312
312   (GETVALUE&PUSH 8)                   ; COEF
314   (GETVALUE&PUSH 7)                   ; P
316   (GETVALUE&PUSH 15)                  ; R12
318   (CALL2&PUSH 16)                     ; MUL
320   (GETVALUE&PUSH 15)                  ; R12
322   (CALL2&PUSH 17)                     ; ADD
324   (GETVALUE&PUSH 0)                   ; C
326   (GETVALUE&PUSH 1)                   ; B
328   (GETVALUE&PUSH 2)                   ; A
330   (GETVALUE&PUSH 3)                   ; X
332   (CALL&PUSH 5 18)                    ; NUMN
335   (CALL2&PUSH 16)                     ; MUL
337   (CALL1 19)                          ; AUGMULT
339   (STORE 16)
341   (CONST 20)                          ; 1
342   (STORE 8)
344   (JMP L551)
347   L347
347   (LOAD&PUSH 16)
348   (GETVALUE&PUSH 8)                   ; COEF
350   (LOAD&PUSH 9)
351   (CALL2&PUSH 16)                     ; MUL
353   (CALL1&PUSH 19)                     ; AUGMULT
355   (CALL2 17)                          ; ADD
357   (STORE 16)
359   (CONST 10)                          ; 2
360   (STORE 8)
362   (JMP L551)
365   L365
365   (LOAD&PUSH 16)
366   (GETVALUE&PUSH 8)                   ; COEF
368   (LOAD&PUSH 8)
369   (CALL2&PUSH 16)                     ; MUL
371   (CALL1&PUSH 19)                     ; AUGMULT
373   (CALL2 17)                          ; ADD
375   (STORE 16)
377   (CONST 28)                          ; 3
379   (STORE 8)
381   (JMP L551)
384   L384
384   (LOAD&PUSH 8)
385   (JMPIFEQTO 20 L96)                  ; 1
389   (LOAD&PUSH 8)
390   (JMPIFNOTEQTO 10 L280)              ; 2
394   (JMP L115)
397   L397
397   (LOAD 39)
399   (CAR)
400   (CDR)
401   (CAR)
402   (SETVALUE 8)                        ; COEF
404   (LOAD 39)
406   (CAR)
407   (CAR)
408   (STORE 15)
410   (LOAD&PUSH 8)
411   (JMPIFNOTEQTO 29 L384)              ; 4
414   L414
414   (LOAD 6)
415   (STORE 7)
416   (LOAD 2)
417   (STORE 6)
418   L418
418   (GETVALUE&PUSH 9)                   ; M
420   (CALLS2&PUSH 151)                   ; 1-
422   (GETVALUE&PUSH 9)                   ; M
424   (CALLSR&PUSH 0 54)                  ; -
427   (CONST&PUSH 30)                     ; (RAT)
429   (CONST&PUSH 4)                      ; -1
430   (LOAD&PUSH 3)
431   (LIST&PUSH 3)
433   (LOAD&PUSH 3)
434   (GETVALUE&PUSH 3)                   ; X
436   (LOAD&INC&PUSH 3)
438   (CALL2&PUSH 5)                      ; POWER
440   (GETVALUE&PUSH 0)                   ; C
442   (GETVALUE&PUSH 1)                   ; B
444   (GETVALUE&PUSH 2)                   ; A
446   (GETVALUE&PUSH 3)                   ; X
448   (CALL&PUSH 4 22)                    ; POLFOO
451   (CONST&PUSH 31)                     ; (RAT)
453   (GETVALUE&PUSH 7)                   ; P
455   (CONST&PUSH 10)                     ; 2
456   (LIST&PUSH 3)
458   (CONST&PUSH 20)                     ; 1
459   (CALL2&PUSH 17)                     ; ADD
461   (CALL2&PUSH 5)                      ; POWER
463   (CALL&PUSH 4 32)                    ; MUL*
466   (CALL1&PUSH 19)                     ; AUGMULT
468   (CONST&PUSH 25)                     ; -2
469   (GETVALUE&PUSH 9)                   ; M
471   (GETVALUE&PUSH 9)                   ; M
473   (CALLSR&PUSH 3 53)                  ; +
476   (CONST&PUSH 4)                      ; -1
477   (CALL2&PUSH 5)                      ; POWER
479   (LOAD&PUSH 4)
480   (GETVALUE&PUSH 1)                   ; B
482   (CONST&PUSH 29)                     ; 4
483   (GETVALUE&PUSH 7)                   ; P
485   (CONST&PUSH 25)                     ; -2
486   (GETVALUE&PUSH 9)                   ; M
488   (CALLSR&PUSH 2 55)                  ; *
491   (CALLSR&PUSH 3 53)                  ; +
494   (LOAD&PUSH 13)
495   (CALL&PUSH 5 16)                    ; MUL
498   (CALL1&PUSH 19)                     ; AUGMULT
500   (GETVALUE&PUSH 0)                   ; C
502   (LOAD&PUSH 5)
503   (CONST&PUSH 28)                     ; 3
504   (GETVALUE&PUSH 7)                   ; P
506   (LOAD&PUSH 6)
507   (CALLSR&PUSH 3 53)                  ; +
510   (LOAD&PUSH 6)
511   (CONST&PUSH 4)                      ; -1
512   (CALL2&PUSH 5)                      ; POWER
514   (LOAD&PUSH 15)
515   (CALL&PUSH 5 16)                    ; MUL
518   (CALL1&PUSH 19)                     ; AUGMULT
520   (CALL 3 17)                         ; ADD
523   (SKIP 2)
525   (STORE 2)
526   (GETVALUE&PUSH 9)                   ; M
528   (CALLS2 150)                        ; 1+
530   (SETVALUE 9)                        ; M
532   (PUSH)
533   (LOAD&PUSH 16)
534   (CALLSR&JMPIFNOT 1 48 L414)         ; >
539   (LOAD&PUSH 16)
540   (GETVALUE&PUSH 8)                   ; COEF
542   (LOAD&PUSH 4)
543   (CALL2&PUSH 16)                     ; MUL
545   (CALL1&PUSH 19)                     ; AUGMULT
547   (CALL2 17)                          ; ADD
549   (STORE 16)
551   L551
551   (LOAD&CDR&STORE 39)
553   (JMPIF L397)
556   (LOAD 16)
558   L558
558   (SKIP 3)
560   (UNBIND1)
561   (SKIP 3)
563   (UNBIND 2)
565   (SKIP 3)
567   (UNBIND 5)
569   (SKIP&RET 7)


Disassembly of function #:|(DEFUN NONCONSTQUADENUM (NEGPOWLIST P C ...) ...)-73|
(CONST 0) = NONCONSTQUADENUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NONCONSTQUADENUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NONCONSTQUADENUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NONCONSTQUADENUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NONCONSTQUADENUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NONCONSTQUADENUM
8     (SKIP&RET 1)


Disassembly of function NONCONSTQUADENUM
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = X
(CONST 4) = COEF
(CONST 5) = M
(CONST 6) = 1
(CONST 7) = CASE1
(CONST 8) = 0
(CONST 9) = CASEGEN
(CONST 10) = MUL
(CONST 11) = AUGMULT
(CONST 12) = ADD
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X B C M COEF P)
writes special variables : (COEF M)
54 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; P
3     (LOAD 6)
4     (BIND 1)                            ; C
6     (LOAD 8)
7     (BIND 2)                            ; B
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (NIL&PUSH)
13    (NIL)
14    (BIND 4)                            ; COEF
16    (NIL)
17    (BIND 5)                            ; M
19    (GETVALUE&PUSH 0)                   ; P
21    (JMPIFEQTO 6 L75)                   ; 1
24    (CONST 8)                           ; 0
25    (STORE 6)
26    L26
26    (LOAD 24)
28    (CAR)
29    (CAR)
30    (SETVALUE 5)                        ; M
32    (LOAD 24)
34    (CAR)
35    (CDR)
36    (CAR)
37    (SETVALUE 4)                        ; COEF
39    (LOAD&PUSH 6)
40    (GETVALUE&PUSH 4)                   ; COEF
42    (GETVALUE&PUSH 5)                   ; M
44    (GETVALUE&PUSH 0)                   ; P
46    (GETVALUE&PUSH 1)                   ; C
48    (GETVALUE&PUSH 2)                   ; B
50    (GETVALUE&PUSH 3)                   ; X
52    (CALL&PUSH 5 9)                     ; CASEGEN
55    (CALL2&PUSH 10)                     ; MUL
57    (CALL1&PUSH 11)                     ; AUGMULT
59    (CALL2 12)                          ; ADD
61    (STORE 6)
62    (LOAD&CDR&STORE 24)
64    (JMPIF L26)
66    (LOAD 6)
67    L67
67    (UNBIND 2)
69    (SKIP 1)
71    (UNBIND 4)
73    (SKIP&RET 6)
75    L75
75    (LOAD&PUSH 24)
76    (GETVALUE&PUSH 1)                   ; C
78    (GETVALUE&PUSH 2)                   ; B
80    (GETVALUE&PUSH 3)                   ; X
82    (CALL 4 7)                          ; CASE1
85    (JMP L67)


Disassembly of function #:|(DEFUN CASEGEN (M P C ...) ...)-74|
(CONST 0) = CASEGEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CASEGEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CASEGEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CASEGEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CASEGEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CASEGEN
8     (SKIP&RET 1)


Disassembly of function CASEGEN
(CONST 0) = M
(CONST 1) = P
(CONST 2) = C
(CONST 3) = B
(CONST 4) = X
(CONST 5) = 0
(CONST 6) = POLFOO
(CONST 7) = (RAT)
(CONST 8) = 2
(CONST 9) = POWER
(CONST 10) = -2
(CONST 11) = -1
(CONST 12) = EXP1
(CONST 13) = 1
(CONST 14) = CASE1
(CONST 15) = CASE0
(CONST 16) = MUL
(CONST 17) = AUGMULT
(CONST 18) = R12
(CONST 19) = ADD
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R12 EXP1 M P X B C)
144 byte-code instructions:
0     L0
0     (LOAD 5)
1     (BIND 0)                            ; M
3     (LOAD 7)
4     (BIND 1)                            ; P
6     (LOAD 9)
7     (BIND 2)                            ; C
9     (LOAD 11)
10    (BIND 3)                            ; B
12    (LOAD 13)
13    (BIND 4)                            ; X
15    (GETVALUE&PUSH 2)                   ; C
17    (GETVALUE&PUSH 3)                   ; B
19    (CONST&PUSH 5)                      ; 0
20    (GETVALUE&PUSH 4)                   ; X
22    (CALL&PUSH 4 6)                     ; POLFOO
25    (CONST&PUSH 7)                      ; (RAT)
26    (GETVALUE&PUSH 1)                   ; P
28    (CONST&PUSH 8)                      ; 2
29    (LIST&PUSH 3)
31    (CALL2&PUSH 9)                      ; POWER
33    (GETVALUE&PUSH 0)                   ; M
35    (CALLS2&PUSH 151)                   ; 1-
37    (GETVALUE&PUSH 4)                   ; X
39    (GETVALUE&PUSH 0)                   ; M
41    (CALLSR&PUSH 0 54)                  ; -
44    (CALLS2&PUSH 150)                   ; 1+
46    (CALL2&PUSH 9)                      ; POWER
48    (CONST&PUSH 10)                     ; -2
49    (GETVALUE&PUSH 1)                   ; P
51    (CALLSR&PUSH 2 53)                  ; +
54    (CONST&PUSH 11)                     ; -1
55    (GETVALUE&PUSH 0)                   ; M
57    (GETVALUE&PUSH 1)                   ; P
59    (CALLSR&PUSH 0 54)                  ; -
62    (CALLSR&PUSH 3 53)                  ; +
65    (LOAD 4)
66    (BIND 12)                           ; EXP1
68    (GETVALUE&PUSH 1)                   ; P
70    (JMPIFEQTO 13 L146)                 ; 1
74    (GETVALUE&PUSH 0)                   ; M
76    (CALLS2&JMPIF 145 L164)             ; ZEROP
80    (GETVALUE&PUSH 0)                   ; M
82    (GETVALUE&PUSH 1)                   ; P
84    (CALLS2&PUSH 150)                   ; 1+
86    (CALLS2&JMPIF 2 L177)               ; EQUAL
90    (GETVALUE&PUSH 0)                   ; M
92    (JMPIFEQTO 13 L238)                 ; 1
96    (CONST&PUSH 11)                     ; -1
97    (GETVALUE&PUSH 12)                  ; EXP1
99    (LOAD&PUSH 5)
100   (CONST&PUSH 11)                     ; -1
101   (CALL2&PUSH 9)                      ; POWER
103   (LOAD&PUSH 8)
104   (CALL&PUSH 4 16)                    ; MUL
107   (CALL1&PUSH 17)                     ; AUGMULT
109   (CONST&PUSH 11)                     ; -1
110   (GETVALUE&PUSH 1)                   ; P
112   (GETVALUE&PUSH 3)                   ; B
114   (GETVALUE&PUSH 18)                  ; R12
116   (LOAD&PUSH 8)
117   (CONST&PUSH 11)                     ; -1
118   (CALL2&PUSH 9)                      ; POWER
120   (LOAD&PUSH 12)
121   (LOAD&PUSH 11)
122   (GETVALUE&PUSH 2)                   ; C
124   (GETVALUE&PUSH 3)                   ; B
126   (GETVALUE&PUSH 4)                   ; X
128   (JSR&PUSH L0)
131   (CALL 6 16)                         ; MUL
134   L134
134   (PUSH)
135   (CALL1&PUSH 17)                     ; AUGMULT
137   (CALL2 19)                          ; ADD
139   L139
139   (UNBIND1)
140   (SKIP 5)
142   (UNBIND 5)
144   (SKIP&RET 6)
146   L146
146   (GETVALUE&PUSH 0)                   ; M
148   (CONST&PUSH 13)                     ; 1
149   (LIST&PUSH 2)
151   (LIST&PUSH 1)
153   (GETVALUE&PUSH 2)                   ; C
155   (GETVALUE&PUSH 3)                   ; B
157   (GETVALUE&PUSH 4)                   ; X
159   (CALL 4 14)                         ; CASE1
162   (JMP L139)
164   L164
164   (GETVALUE&PUSH 1)                   ; P
166   (GETVALUE&PUSH 2)                   ; C
168   (GETVALUE&PUSH 3)                   ; B
170   (GETVALUE&PUSH 4)                   ; X
172   (CALL 4 15)                         ; CASE0
175   (JMP L139)
177   L177
177   (CONST&PUSH 11)                     ; -1
178   (GETVALUE&PUSH 12)                  ; EXP1
180   (LOAD&PUSH 8)
181   (CONST&PUSH 11)                     ; -1
182   (CALL2&PUSH 9)                      ; POWER
184   (LOAD&PUSH 8)
185   (CALL&PUSH 4 16)                    ; MUL
188   (CALL1&PUSH 17)                     ; AUGMULT
190   (GETVALUE&PUSH 3)                   ; B
192   (GETVALUE&PUSH 18)                  ; R12
194   (LOAD&PUSH 9)
195   (LOAD&PUSH 8)
196   (GETVALUE&PUSH 2)                   ; C
198   (GETVALUE&PUSH 3)                   ; B
200   (GETVALUE&PUSH 4)                   ; X
202   (JSR&PUSH L0)
205   (CALL&PUSH 3 16)                    ; MUL
208   (CALL1&PUSH 17)                     ; AUGMULT
210   (GETVALUE&PUSH 2)                   ; C
212   (CONST&PUSH 10)                     ; -2
213   (GETVALUE&PUSH 0)                   ; M
215   (CALLSR&PUSH 2 53)                  ; +
218   (LOAD&PUSH 8)
219   (GETVALUE&PUSH 2)                   ; C
221   (GETVALUE&PUSH 3)                   ; B
223   (GETVALUE&PUSH 4)                   ; X
225   (JSR&PUSH L0)
228   (CALL2&PUSH 16)                     ; MUL
230   (CALL1&PUSH 17)                     ; AUGMULT
232   (CALL 3 19)                         ; ADD
235   (JMP L139)
238   L238
238   (GETVALUE&PUSH 1)                   ; P
240   (CONST&PUSH 11)                     ; -1
241   (CALL2&PUSH 9)                      ; POWER
243   (GETVALUE&PUSH 12)                  ; EXP1
245   (CALL2&PUSH 16)                     ; MUL
247   (CALL1&PUSH 17)                     ; AUGMULT
249   (GETVALUE&PUSH 3)                   ; B
251   (GETVALUE&PUSH 18)                  ; R12
253   (LOAD&PUSH 7)
254   (GETVALUE&PUSH 2)                   ; C
256   (GETVALUE&PUSH 3)                   ; B
258   (GETVALUE&PUSH 4)                   ; X
260   (CALL&PUSH 4 15)                    ; CASE0
263   (CALL 3 16)                         ; MUL
266   (JMP L134)


Disassembly of function #:|(DEFUN CASE1 (NEGPOWLIST C B ...) ...)-75|
(CONST 0) = CASE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CASE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CASE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CASE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CASE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CASE1
8     (SKIP&RET 1)


Disassembly of function CASE1
(CONST 0) = C
(CONST 1) = B
(CONST 2) = X
(CONST 3) = (RAT)
(CONST 4) = -1
(CONST 5) = 2
(CONST 6) = POWER
(CONST 7) = EXP1
(CONST 8) = COEF
(CONST 9) = M
(CONST 10) = RES
(CONST 11) = 0
(CONST 12) = -2
(CONST 13) = 1
(CONST 14) = CASE0
(CONST 15) = MUL
(CONST 16) = AUGMULT
(CONST 17) = DEN1NUMN
(CONST 18) = ADD
(CONST 19) = (T (2 1))
(CONST 20) = DENMNUMN
(CONST 21) = 3
(CONST 22) = CHECKSIGNTM
(CONST 23) = $ZERO
(CONST 24) = 5
(CONST 25) = 4
(CONST 26) = EC-1
(CONST 27) = $POSITIVE
(CONST 28) = (%LOG)
(CONST 29) = R12
(CONST 30) = MUL*
(CONST 31) = (%ATAN)
(CONST 32) = POLFOO
(CONST 33) = PMM-1
(CONST 34) = EXT-1M
(CONST 35) = (RAT)
(CONST 36) = R1M
(CONST 37) = (%LOG)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M RES COEF R12 X EXP1 EC-1 B C)
writes special variables : (RES M COEF)
316 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (GETVALUE&PUSH 0)                   ; C
11    (CONST&PUSH 3)                      ; (RAT)
12    (CONST&PUSH 4)                      ; -1
13    (CONST&PUSH 5)                      ; 2
14    (LIST&PUSH 3)
16    (CALL2&PUSH 6)                      ; POWER
18    (GETVALUE&PUSH 1)                   ; B
20    (CONST&PUSH 4)                      ; -1
21    (CALL2&PUSH 6)                      ; POWER
23    (LOAD 1)
24    (BIND 7)                            ; EXP1
26    (PUSH-NIL 3)
28    (NIL)
29    (BIND 8)                            ; COEF
31    (PUSH-NIL 3)
33    (NIL)
34    (BIND 9)                            ; M
36    (PUSH-NIL 3)
38    (NIL)
39    (BIND 10)                           ; RES
41    (CONST 11)                          ; 0
42    (STORE 17)
44    (LOAD 36)
46    (CAR)
47    (CAR)
48    (STORE 16)
50    (LOAD 36)
52    (CAR)
53    (CDR)
54    (CAR)
55    (SETVALUE 8)                        ; COEF
57    (CONST&PUSH 12)                     ; -2
58    (LOAD&PUSH 17)
59    (CALLSR&STORE 2 53 15)              ; +
63    (LOAD&PUSH 16)
64    (CALLS2&JMPIF 145 L152)             ; ZEROP
68    L68
68    (LOAD&PUSH 16)
69    (JMPIFEQTO 13 L176)                 ; 1
73    L73
73    (LOAD&PUSH 16)
74    (JMPIFEQTO 5 L204)                  ; 2
78    L78
78    (GETVALUE&PUSH 1)                   ; B
80    (CONST&PUSH 5)                      ; 2
81    (CALL2&PUSH 6)                      ; POWER
83    (CALL1 22)                          ; CHECKSIGNTM
85    (STORE 4)
86    (PUSH)
87    (JMPIFEQTO 23 L504)                 ; $ZERO
91    (CONST 25)                          ; 4
93    (STORE 11)
95    (CONST 11)                          ; 0
96    (SETVALUE 9)                        ; M
98    (GETVALUE&PUSH 26)                  ; EC-1
100   (CALL1 22)                          ; CHECKSIGNTM
102   (STORE 5)
103   (PUSH)
104   (JMPIFEQTO 27 L234)                 ; $POSITIVE
108   (CONST&PUSH 5)                      ; 2
109   (GETVALUE&PUSH 7)                   ; EXP1
111   (CONST&PUSH 31)                     ; (%ATAN)
113   (GETVALUE&PUSH 0)                   ; C
115   (GETVALUE&PUSH 2)                   ; X
117   (GETVALUE&PUSH 1)                   ; B
119   (CONST&PUSH 4)                      ; -1
120   (GETVALUE&PUSH 0)                   ; C
122   (GETVALUE&PUSH 2)                   ; X
124   (CALL&PUSH 3 15)                    ; MUL
127   (CALL2&PUSH 18)                     ; ADD
129   (CONST&PUSH 4)                      ; -1
130   (CALL2&PUSH 6)                      ; POWER
132   (CALL&PUSH 3 15)                    ; MUL
135   (GETVALUE&PUSH 29)                  ; R12
137   (CALL2 6)                           ; POWER
139   L139
139   (PUSH)
140   (LIST&PUSH 2)
142   (CALL&PUSH 3 30)                    ; MUL*
145   (CALL1 16)                          ; AUGMULT
147   (SETVALUE 10)                       ; RES
149   (JMP L284)
152   L152
152   (GETVALUE&PUSH 8)                   ; COEF
154   (CONST&PUSH 13)                     ; 1
155   (GETVALUE&PUSH 0)                   ; C
157   (GETVALUE&PUSH 1)                   ; B
159   (GETVALUE&PUSH 2)                   ; X
161   (CALL&PUSH 4 14)                    ; CASE0
164   (CALL2&PUSH 15)                     ; MUL
166   (CALL1 16)                          ; AUGMULT
168   (STORE 17)
170   (CONST 13)                          ; 1
171   (STORE 11)
173   (JMP L546)
176   L176
176   (LOAD&PUSH 17)
177   (GETVALUE&PUSH 8)                   ; COEF
179   (CONST&PUSH 13)                     ; 1
180   (GETVALUE&PUSH 0)                   ; C
182   (GETVALUE&PUSH 1)                   ; B
184   (CONST&PUSH 11)                     ; 0
185   (GETVALUE&PUSH 2)                   ; X
187   (CALL&PUSH 5 17)                    ; DEN1NUMN
190   (CALL2&PUSH 15)                     ; MUL
192   (CALL1&PUSH 16)                     ; AUGMULT
194   (CALL2 18)                          ; ADD
196   (STORE 17)
198   (CONST 5)                           ; 2
199   (STORE 11)
201   (JMP L546)
204   L204
204   (LOAD&PUSH 17)
205   (GETVALUE&PUSH 8)                   ; COEF
207   (CONST&PUSH 19)                     ; (T (2 1))
208   (CONST&PUSH 13)                     ; 1
209   (GETVALUE&PUSH 0)                   ; C
211   (GETVALUE&PUSH 1)                   ; B
213   (CONST&PUSH 11)                     ; 0
214   (GETVALUE&PUSH 2)                   ; X
216   (CALL&PUSH 6 20)                    ; DENMNUMN
219   (CALL2&PUSH 15)                     ; MUL
221   (CALL1&PUSH 16)                     ; AUGMULT
223   (CALL2 18)                          ; ADD
225   (STORE 17)
227   (CONST 21)                          ; 3
229   (STORE 11)
231   (JMP L546)
234   L234
234   (CONST&PUSH 5)                      ; 2
235   (GETVALUE&PUSH 7)                   ; EXP1
237   (CONST&PUSH 28)                     ; (%LOG)
238   (GETVALUE&PUSH 0)                   ; C
240   (GETVALUE&PUSH 2)                   ; X
242   (CALL2&PUSH 15)                     ; MUL
244   (GETVALUE&PUSH 29)                  ; R12
246   (CALL2&PUSH 6)                      ; POWER
248   (GETVALUE&PUSH 1)                   ; B
250   (GETVALUE&PUSH 0)                   ; C
252   (GETVALUE&PUSH 2)                   ; X
254   (CALL2&PUSH 15)                     ; MUL
256   (CALL2&PUSH 18)                     ; ADD
258   (GETVALUE&PUSH 29)                  ; R12
260   (CALL2&PUSH 6)                      ; POWER
262   (CALL2 18)                          ; ADD
264   (JMP L139)
267   L267
267   (NIL)
268   (UNBIND1)
269   (SKIP 3)
271   (UNBIND1)
272   (SKIP 3)
274   (UNBIND1)
275   (SKIP 3)
277   (JMP L562)
280   L280
280   (GETVALUE 10)                       ; RES
282   (STORE 9)
284   L284
284   (GETVALUE&PUSH 9)                   ; M
286   (CALLS2 150)                        ; 1+
288   (SETVALUE 9)                        ; M
290   (CONST&PUSH 12)                     ; -2
291   (GETVALUE&PUSH 0)                   ; C
293   (GETVALUE&PUSH 1)                   ; B
295   (CONST&PUSH 11)                     ; 0
296   (GETVALUE&PUSH 2)                   ; X
298   (CALL&PUSH 4 32)                    ; POLFOO
301   (GETVALUE&PUSH 29)                  ; R12
303   (CALL2&PUSH 6)                      ; POWER
305   (LOAD&PUSH 23)
306   (GETVALUE&PUSH 9)                   ; M
308   (CALL1&PUSH 33)                     ; PMM-1
310   (CONST&PUSH 4)                      ; -1
311   (CALL2&PUSH 6)                      ; POWER
313   (GETVALUE&PUSH 2)                   ; X
315   (GETVALUE&PUSH 9)                   ; M
317   (CALL2&PUSH 34)                     ; EXT-1M
319   (CALL&PUSH 5 15)                    ; MUL
322   (CALL1&PUSH 16)                     ; AUGMULT
324   (CONST&PUSH 35)                     ; (RAT)
326   (CONST&PUSH 12)                     ; -2
327   (GETVALUE&PUSH 9)                   ; M
329   (CALL1&PUSH 33)                     ; PMM-1
331   (LIST&PUSH 3)
333   (GETVALUE&PUSH 0)                   ; C
335   (GETVALUE&PUSH 9)                   ; M
337   (CALLS2&PUSH 151)                   ; 1-
339   (LOAD&PUSH 25)
341   (GETVALUE&PUSH 10)                  ; RES
343   (CALL&PUSH 5 30)                    ; MUL*
346   (CALL1&PUSH 16)                     ; AUGMULT
348   (CALL2 18)                          ; ADD
350   (SETVALUE 10)                       ; RES
352   (GETVALUE&PUSH 9)                   ; M
354   (LOAD&PUSH 16)
355   (CALLS2&JMPIF 2 L280)               ; EQUAL
359   (GETVALUE&PUSH 9)                   ; M
361   (CALLS2&PUSH 151)                   ; 1-
363   (LOAD&PUSH 16)
364   (CALLS2&JMPIFNOT 2 L284)            ; EQUAL
368   (LOAD&JMPIFNOT 9 L267)
372   (GETVALUE 10)                       ; RES
374   (STORE 10)
376   (CONST&PUSH 4)                      ; -1
377   (GETVALUE&PUSH 0)                   ; C
379   (GETVALUE&PUSH 1)                   ; B
381   (CONST&PUSH 11)                     ; 0
382   (GETVALUE&PUSH 2)                   ; X
384   (CALL&PUSH 4 32)                    ; POLFOO
387   (GETVALUE&PUSH 29)                  ; R12
389   (CALL2&PUSH 6)                      ; POWER
391   (GETVALUE&PUSH 9)                   ; M
393   (CALL1&PUSH 36)                     ; R1M
395   (GETVALUE&PUSH 2)                   ; X
397   (GETVALUE&PUSH 9)                   ; M
399   (CALL2&PUSH 34)                     ; EXT-1M
401   (CALL&PUSH 4 15)                    ; MUL
404   (CALL1&PUSH 16)                     ; AUGMULT
406   (GETVALUE&PUSH 1)                   ; B
408   (GETVALUE&PUSH 29)                  ; R12
410   (GETVALUE&PUSH 9)                   ; M
412   (CALL1&PUSH 36)                     ; R1M
414   (LOAD&PUSH 14)
415   (CALL&PUSH 4 15)                    ; MUL
418   (CALL1&PUSH 16)                     ; AUGMULT
420   (GETVALUE&PUSH 0)                   ; C
422   (GETVALUE&PUSH 9)                   ; M
424   (CALL1&PUSH 36)                     ; R1M
426   (LOAD&PUSH 13)
427   (CALL&PUSH 3 15)                    ; MUL
430   (CALL1&PUSH 16)                     ; AUGMULT
432   (CALL 3 18)                         ; ADD
435   (STORE 3)
436   (JMP L534)
439   L439
439   (GETVALUE&PUSH 7)                   ; EXP1
441   (CONST&PUSH 37)                     ; (%LOG)
443   (GETVALUE&PUSH 2)                   ; X
445   (LIST&PUSH 2)
447   (CALL2 30)                          ; MUL*
449   (STORE 3)
450   (JMP L534)
453   L453
453   (LOAD 36)
455   (CAR)
456   (CDR)
457   (CAR)
458   (SETVALUE 8)                        ; COEF
460   (LOAD 36)
462   (CAR)
463   (CAR)
464   (STORE 16)
466   (LOAD&PUSH 11)
467   (JMPIFEQTO 24 L508)                 ; 5
470   (LOAD&PUSH 11)
471   (JMPIFEQTO 13 L68)                  ; 1
475   (LOAD&PUSH 11)
476   (JMPIFEQTO 5 L73)                   ; 2
480   (LOAD&PUSH 11)
481   (JMPIFEQTO 21 L78)                  ; 3
485   (CONST&PUSH 12)                     ; -2
486   (LOAD&PUSH 17)
487   (CALLSR&STORE 2 53 15)              ; +
491   (PUSH)
492   (GETVALUE&PUSH 9)                   ; M
494   (CALLS2&JMPIFNOT 2 L284)            ; EQUAL
498   (LOAD 10)
499   (STORE 9)
501   (JMP L284)
504   L504
504   (CONST 24)                          ; 5
506   (STORE 11)
508   L508
508   (LOAD 16)
510   (SETVALUE 9)                        ; M
512   (PUSH)
513   (CALLS2&JMPIF 145 L439)             ; ZEROP
517   (CONST&PUSH 4)                      ; -1
518   (GETVALUE&PUSH 7)                   ; EXP1
520   (GETVALUE&PUSH 2)                   ; X
522   (GETVALUE&PUSH 9)                   ; M
524   (CALL2&PUSH 34)                     ; EXT-1M
526   (GETVALUE&PUSH 9)                   ; M
528   (CALL1&PUSH 36)                     ; R1M
530   (CALL 4 15)                         ; MUL
533   (STORE 3)
534   L534
534   (LOAD&PUSH 17)
535   (GETVALUE&PUSH 8)                   ; COEF
537   (LOAD&PUSH 5)
538   (CALL2&PUSH 15)                     ; MUL
540   (CALL1&PUSH 16)                     ; AUGMULT
542   (CALL2 18)                          ; ADD
544   (STORE 17)
546   L546
546   (LOAD&CDR&STORE 36)
548   (JMPIF L453)
551   (LOAD 17)
553   (UNBIND1)
554   (SKIP 3)
556   (UNBIND1)
557   (SKIP 3)
559   (UNBIND1)
560   (SKIP 3)
562   L562
562   (UNBIND1)
563   (SKIP 2)
565   (UNBIND 3)
567   (SKIP&RET 5)


Disassembly of function #:|(DEFUN PMM-1 (M) ...)-76|
(CONST 0) = PMM-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PMM-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PMM-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PMM-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PMM-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PMM-1
8     (SKIP&RET 1)


Disassembly of function PMM-1
(CONST 0) = M
(CONST 1) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; -1
4     (GETVALUE&PUSH 0)                   ; M
6     (GETVALUE&PUSH 0)                   ; M
8     (CALLSR 3 53)                       ; +
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN R1M (M) ...)-77|
(CONST 0) = R1M
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE R1M>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; R1M
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; R1M
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE R1M>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; R1M
8     (SKIP&RET 1)


Disassembly of function R1M
(CONST 0) = M
(CONST 1) = (RAT)
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (RAT)
4     (CONST&PUSH 2)                      ; 1
5     (GETVALUE&PUSH 0)                   ; M
7     (LIST 3)
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EXT-1M (X M) ...)-78|
(CONST 0) = EXT-1M
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXT-1M>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXT-1M
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXT-1M
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXT-1M>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXT-1M
8     (SKIP&RET 1)


Disassembly of function EXT-1M
(CONST 0) = X
(CONST 1) = M
(CONST 2) = POWER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M X)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; M
10    (CALLSR&PUSH 0 54)                  ; -
13    (CALL2 2)                           ; POWER
15    (UNBIND 2)
17    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CASE0 (POWER C B ...) ...)-79|
(CONST 0) = CASE0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CASE0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CASE0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CASE0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CASE0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CASE0
8     (SKIP&RET 1)


Disassembly of function CASE0
(CONST 0) = C
(CONST 1) = B
(CONST 2) = X
(CONST 3) = (RAT)
(CONST 4) = 1
(CONST 5) = 4
(CONST 6) = 2
(CONST 7) = MUL
(CONST 8) = ADD
(CONST 9) = (RAT)
(CONST 10) = -3
(CONST 11) = POWER
(CONST 12) = -1
(CONST 13) = EXP1
(CONST 14) = P
(CONST 15) = EC-1
(CONST 16) = CHECKSIGNTM
(CONST 17) = $POSITIVE
(CONST 18) = 0
(CONST 19) = POLFOO
(CONST 20) = R12
(CONST 21) = AUGMULT
(CONST 22) = (RAT)
(CONST 23) = 8
(CONST 24) = (%LOG)
(CONST 25) = MUL*
(CONST 26) = $NEGATIVE
(CONST 27) = (RAT)
(CONST 28) = (%ASIN)
(CONST 29) = (RAT)
(CONST 30) = (RAT)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P R12 EXP1 EC-1 X C B)
writes special variable : (P)
170 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; B
6     (LOAD 7)
7     (BIND 2)                            ; X
9     (CONST&PUSH 3)                      ; (RAT)
10    (CONST&PUSH 4)                      ; 1
11    (CONST&PUSH 5)                      ; 4
12    (LIST&PUSH 3)
14    (GETVALUE&PUSH 1)                   ; B
16    (CONST&PUSH 6)                      ; 2
17    (GETVALUE&PUSH 0)                   ; C
19    (GETVALUE&PUSH 2)                   ; X
21    (CALL&PUSH 3 7)                     ; MUL
24    (CALL2&PUSH 8)                      ; ADD
26    (GETVALUE&PUSH 0)                   ; C
28    (CONST&PUSH 9)                      ; (RAT)
29    (CONST&PUSH 10)                     ; -3
30    (CONST&PUSH 6)                      ; 2
31    (LIST&PUSH 3)
33    (CALL2&PUSH 11)                     ; POWER
35    (CONST&PUSH 6)                      ; 2
36    (GETVALUE&PUSH 0)                   ; C
38    (GETVALUE&PUSH 2)                   ; X
40    (CALL&PUSH 3 7)                     ; MUL
43    (CONST&PUSH 12)                     ; -1
44    (GETVALUE&PUSH 1)                   ; B
46    (CALL2&PUSH 7)                      ; MUL
48    (CALL2&PUSH 8)                      ; ADD
50    (GETVALUE&PUSH 1)                   ; B
52    (CONST&PUSH 12)                     ; -1
53    (CALL2&PUSH 11)                     ; POWER
55    (LOAD 4)
56    (BIND 13)                           ; EXP1
58    (NIL&PUSH)
59    (NIL)
60    (BIND 14)                           ; P
62    (NIL&PUSH)
63    (GETVALUE&PUSH 15)                  ; EC-1
65    (CALL1 16)                          ; CHECKSIGNTM
67    (STORE 4)
68    (CONST 4)                           ; 1
69    (SETVALUE 14)                       ; P
71    (LOAD&PUSH 4)
72    (JMPIFNOTEQTO 17 L148)              ; $POSITIVE
76    (GETVALUE&PUSH 13)                  ; EXP1
78    (GETVALUE&PUSH 15)                  ; EC-1
80    (LOAD&PUSH 13)
81    (GETVALUE&PUSH 0)                   ; C
83    (GETVALUE&PUSH 1)                   ; B
85    (CONST&PUSH 18)                     ; 0
86    (GETVALUE&PUSH 2)                   ; X
88    (CALL&PUSH 4 19)                    ; POLFOO
91    (GETVALUE&PUSH 20)                  ; R12
93    (CALL2&PUSH 11)                     ; POWER
95    (CALL&PUSH 4 7)                     ; MUL
98    (CALL1&PUSH 21)                     ; AUGMULT
100   (GETVALUE&PUSH 1)                   ; B
102   (GETVALUE&PUSH 1)                   ; B
104   (CONST&PUSH 22)                     ; (RAT)
105   (CONST&PUSH 12)                     ; -1
106   (CONST&PUSH 23)                     ; 8
107   (LIST&PUSH 3)
109   (LOAD&PUSH 14)
110   (CONST&PUSH 24)                     ; (%LOG)
111   (LOAD&PUSH 17)
112   (CONST&PUSH 6)                      ; 2
113   (GETVALUE&PUSH 0)                   ; C
115   (GETVALUE&PUSH 20)                  ; R12
117   (CALL2&PUSH 11)                     ; POWER
119   (GETVALUE&PUSH 0)                   ; C
121   (GETVALUE&PUSH 1)                   ; B
123   (CONST&PUSH 18)                     ; 0
124   (GETVALUE&PUSH 2)                   ; X
126   (CALL&PUSH 4 19)                    ; POLFOO
129   (GETVALUE&PUSH 20)                  ; R12
131   (CALL2&PUSH 11)                     ; POWER
133   (CALL&PUSH 3 7)                     ; MUL
136   (CALL2&PUSH 8)                      ; ADD
138   (LIST&PUSH 2)
140   (CALL&PUSH 5 25)                    ; MUL*
143   (CALL1&PUSH 21)                     ; AUGMULT
145   (CALL2 8)                           ; ADD
147   (STORE 0)
148   L148
148   (LOAD&PUSH 4)
149   (JMPIFNOTEQTO 26 L277)              ; $NEGATIVE
153   (GETVALUE&PUSH 13)                  ; EXP1
155   (GETVALUE&PUSH 15)                  ; EC-1
157   (LOAD&PUSH 11)
158   (CONST&PUSH 12)                     ; -1
159   (GETVALUE&PUSH 0)                   ; C
161   (CALL2&PUSH 7)                      ; MUL
163   (GETVALUE&PUSH 1)                   ; B
165   (CONST&PUSH 18)                     ; 0
166   (GETVALUE&PUSH 2)                   ; X
168   (CALL&PUSH 4 19)                    ; POLFOO
171   (GETVALUE&PUSH 20)                  ; R12
173   (CALL2&PUSH 11)                     ; POWER
175   (CALL&PUSH 4 7)                     ; MUL
178   (CALL1&PUSH 21)                     ; AUGMULT
180   (GETVALUE&PUSH 1)                   ; B
182   (GETVALUE&PUSH 1)                   ; B
184   (CONST&PUSH 27)                     ; (RAT)
185   (CONST&PUSH 4)                      ; 1
186   (CONST&PUSH 23)                     ; 8
187   (LIST&PUSH 3)
189   (LOAD&PUSH 14)
190   (CONST&PUSH 28)                     ; (%ASIN)
191   (LOAD&PUSH 14)
192   (LOAD&PUSH 16)
193   (CALL2&PUSH 7)                      ; MUL
195   (LIST&PUSH 2)
197   (CALL&PUSH 5 25)                    ; MUL*
200   (CALL1&PUSH 21)                     ; AUGMULT
202   (CALL2 8)                           ; ADD
204   (STORE 0)
205   (JMP L277)
208   L208
208   (CONST&PUSH 6)                      ; 2
209   (GETVALUE&PUSH 14)                  ; P
211   (CALLSR 2 53)                       ; +
214   (SETVALUE 14)                       ; P
216   (PUSH)
217   (CALLS2&PUSH 150)                   ; 1+
219   (CONST&PUSH 12)                     ; -1
220   (CALL2&PUSH 11)                     ; POWER
222   (GETVALUE&PUSH 20)                  ; R12
224   (GETVALUE&PUSH 15)                  ; EC-1
226   (LOAD&PUSH 2)
227   (LOAD&PUSH 15)
228   (GETVALUE&PUSH 0)                   ; C
230   (GETVALUE&PUSH 1)                   ; B
232   (CONST&PUSH 18)                     ; 0
233   (GETVALUE&PUSH 2)                   ; X
235   (CALL&PUSH 4 19)                    ; POLFOO
238   (CONST&PUSH 29)                     ; (RAT)
239   (GETVALUE&PUSH 14)                  ; P
241   (CONST&PUSH 6)                      ; 2
242   (LIST&PUSH 3)
244   (CALL2&PUSH 11)                     ; POWER
246   (CALL&PUSH 5 7)                     ; MUL
249   (CALL1&PUSH 21)                     ; AUGMULT
251   (GETVALUE&PUSH 14)                  ; P
253   (GETVALUE&PUSH 1)                   ; B
255   (GETVALUE&PUSH 1)                   ; B
257   (CONST&PUSH 30)                     ; (RAT)
259   (CONST&PUSH 12)                     ; -1
260   (CONST&PUSH 5)                      ; 4
261   (LIST&PUSH 3)
263   (GETVALUE&PUSH 15)                  ; EC-1
265   (LOAD&PUSH 6)
266   (LOAD&PUSH 8)
267   (CALL&PUSH 7 7)                     ; MUL
270   (CALL1&PUSH 21)                     ; AUGMULT
272   (CALL2 8)                           ; ADD
274   (SKIP 1)
276   (STORE 0)
277   L277
277   (LOAD&PUSH 26)
279   (GETVALUE&PUSH 14)                  ; P
281   (CALLS2&JMPIFNOT 2 L208)            ; EQUAL
285   (POP)
286   (UNBIND1)
287   (SKIP 1)
289   (UNBIND1)
290   (SKIP 5)
292   (UNBIND 3)
294   (SKIP&RET 5)


Disassembly of function #:|(DEFUN DEN1NUMN (P C B ...) ...)-80|
(CONST 0) = DEN1NUMN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEN1NUMN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEN1NUMN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEN1NUMN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEN1NUMN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEN1NUMN
8     (SKIP&RET 1)


Disassembly of function DEN1NUMN
(CONST 0) = P
(CONST 1) = C
(CONST 2) = B
(CONST 3) = A
(CONST 4) = X
(CONST 5) = 1
(CONST 6) = POLFOO
(CONST 7) = R12
(CONST 8) = POWER
(CONST 9) = DEN1DEN1
(CONST 10) = MUL
(CONST 11) = AUGMULT
(CONST 12) = DEN1
(CONST 13) = ADD
(CONST 14) = (RAT)
(CONST 15) = -1
(CONST 16) = 2
(CONST 17) = -2
(CONST 18) = NUMN
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R12 X A B C P)
84 byte-code instructions:
0     L0
0     (LOAD 5)
1     (BIND 0)                            ; P
3     (LOAD 7)
4     (BIND 1)                            ; C
6     (LOAD 9)
7     (BIND 2)                            ; B
9     (LOAD 11)
10    (BIND 3)                            ; A
12    (LOAD 13)
13    (BIND 4)                            ; X
15    (GETVALUE&PUSH 0)                   ; P
17    (JMPIFEQTO 5 L113)                  ; 1
21    (GETVALUE&PUSH 1)                   ; C
23    (GETVALUE&PUSH 2)                   ; B
25    (GETVALUE&PUSH 3)                   ; A
27    (GETVALUE&PUSH 4)                   ; X
29    (CALL&PUSH 4 6)                     ; POLFOO
32    (GETVALUE&PUSH 0)                   ; P
34    (CONST&PUSH 14)                     ; (RAT)
35    (CONST&PUSH 15)                     ; -1
36    (CONST&PUSH 16)                     ; 2
37    (LIST&PUSH 3)
39    (CALL2&PUSH 13)                     ; ADD
41    (CALL2&PUSH 8)                      ; POWER
43    (CONST&PUSH 15)                     ; -1
44    (GETVALUE&PUSH 0)                   ; P
46    (GETVALUE&PUSH 0)                   ; P
48    (CALLSR&PUSH 3 53)                  ; +
51    (CONST&PUSH 15)                     ; -1
52    (CALL2&PUSH 8)                      ; POWER
54    (CALL2&PUSH 10)                     ; MUL
56    (CALL1&PUSH 11)                     ; AUGMULT
58    (GETVALUE&PUSH 3)                   ; A
60    (GETVALUE&PUSH 0)                   ; P
62    (CALLS2&PUSH 151)                   ; 1-
64    (GETVALUE&PUSH 1)                   ; C
66    (GETVALUE&PUSH 2)                   ; B
68    (GETVALUE&PUSH 3)                   ; A
70    (GETVALUE&PUSH 4)                   ; X
72    (JSR&PUSH L0)
75    (CALL2&PUSH 10)                     ; MUL
77    (CALL1&PUSH 11)                     ; AUGMULT
79    (GETVALUE&PUSH 2)                   ; B
81    (GETVALUE&PUSH 7)                   ; R12
83    (CONST&PUSH 17)                     ; -2
84    (GETVALUE&PUSH 0)                   ; P
86    (CALLSR&PUSH 2 53)                  ; +
89    (GETVALUE&PUSH 1)                   ; C
91    (GETVALUE&PUSH 2)                   ; B
93    (GETVALUE&PUSH 3)                   ; A
95    (GETVALUE&PUSH 4)                   ; X
97    (CALL 5 18)                         ; NUMN
100   L100
100   (PUSH)
101   (CALL&PUSH 3 10)                    ; MUL
104   (CALL1&PUSH 11)                     ; AUGMULT
106   (CALL 3 13)                         ; ADD
109   (UNBIND 5)
111   (SKIP&RET 6)
113   L113
113   (GETVALUE&PUSH 1)                   ; C
115   (GETVALUE&PUSH 2)                   ; B
117   (GETVALUE&PUSH 3)                   ; A
119   (GETVALUE&PUSH 4)                   ; X
121   (CALL&PUSH 4 6)                     ; POLFOO
124   (GETVALUE&PUSH 7)                   ; R12
126   (CALL2&PUSH 8)                      ; POWER
128   (GETVALUE&PUSH 3)                   ; A
130   (GETVALUE&PUSH 1)                   ; C
132   (GETVALUE&PUSH 2)                   ; B
134   (GETVALUE&PUSH 3)                   ; A
136   (GETVALUE&PUSH 4)                   ; X
138   (CALL&PUSH 4 9)                     ; DEN1DEN1
141   (CALL2&PUSH 10)                     ; MUL
143   (CALL1&PUSH 11)                     ; AUGMULT
145   (GETVALUE&PUSH 2)                   ; B
147   (GETVALUE&PUSH 7)                   ; R12
149   (GETVALUE&PUSH 1)                   ; C
151   (GETVALUE&PUSH 2)                   ; B
153   (GETVALUE&PUSH 3)                   ; A
155   (GETVALUE&PUSH 4)                   ; X
157   (CALL 4 12)                         ; DEN1
160   (JMP L100)


Disassembly of function #:|(DEFUN DISTRINT (EXPR X) ...)-81|
(CONST 0) = DISTRINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTRINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTRINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTRINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTRINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTRINT
8     (SKIP&RET 1)


Disassembly of function DISTRINT
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = INTIRA
(CONST 3) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (LOAD&JMPIFNOT 5 L23)
6     (LOAD&CAR&PUSH 5)
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL2&PUSH 2)                      ; INTIRA
12    (LOAD&CDR&PUSH 6)
14    (GETVALUE&PUSH 0)                   ; X
16    (JSR&PUSH L0)
18    (CALL2 3)                           ; ADD
20    L20
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (CONST 1)                           ; 0
24    (JMP L20)


Wrote file binary-clisp/irinte.fas
Wrote file /cygdrive/e/temp/maxima/src/irinte.lis