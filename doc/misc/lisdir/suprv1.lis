Listing of compilation of file /cygdrive/e/temp/maxima/src/suprv1.lisp
on 2002-12-17 13:33:21 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/suprv1.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE) (SETQ OLD-IBASE *READ-BASE* ...) ...)-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MOPL NIL)-3-1|
(CONST 0) = MOPL
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOPL
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; MOPL
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MOPL NIL)-3-2|
(CONST 0) = (SPECIAL MOPL)
(CONST 1) = MOPL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MOPL)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MOPL
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MOPL
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MOPL
12    (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL M$+ GCFLAG ...) (SPECIAL ERROR-CALL) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $PROMPT '_ ...)-5-1|
(CONST 0) = $PROMPT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = _
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PROMPT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $PROMPT
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; _
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $PROMPT '_ ...)-5-2|
(CONST 0) = (SPECIAL $PROMPT)
(CONST 1) = $PROMPT
(CONST 2) = _
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PROMPT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PROMPT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PROMPT
8     (CONST&PUSH 2)                      ; _
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $PROMPT
12    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFUN CONTROL-CHAR # ...))-6|
(CONST 0) = CONTROL-CHAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONTROL-CHAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONTROL-CHAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONTROL-CHAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONTROL-CHAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONTROL-CHAR
8     (SKIP&RET 1)


Disassembly of function CONTROL-CHAR
(CONST 0) = 1
(CONST 1) = 65
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1
1     (LOAD&PUSH 2)
2     (CALLS1&PUSH 40)                    ; CHAR-CODE
4     (CONST&PUSH 1)                      ; 65
5     (CALLSR&PUSH 1 54)                  ; -
8     (CALLSR&PUSH 2 53)                  ; +
11    (CALLS1 41)                         ; CODE-CHAR
13    (SKIP&RET 2)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-1|
(CONST 0) = 
((+ $+) (- $-) (* $*) (// $//) (^ $^) (|.| $.) (< $<) (= $=) (> $>) (|(| |$(|)
 (|)| |$)|) ([ $[) (] $]) (|,| |$,|) (|:| |$:|) (! $!) (|#| $#) (|'| |$'|)
 (|;| |$;|))
(CONST 1) = X
(CONST 2) = OPALIAS
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (CONST&PUSH 0)                      ; ((+ $+) (- $-) (* $*) (// $//) ...)
1     (JMP L24)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE 1)                        ; X
10    (CAR&PUSH)
11    (GETVALUE 1)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; OPALIAS
16    (CALL 3 3)                          ; PUTPROP
19    (UNBIND1)
20    (SKIP 1)
22    (LOAD&CDR&STORE 0)
24    L24
24    (LOAD&PUSH 0)
25    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
28    (SKIP 1)
30    (VALUES0)
31    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-2|
(CONST 0) = 
((CNTLC #\Etx) (BSP #\Backspace) (TAB #\Tab) (LF #\Newline) (FF #\Page)
 (CR #\Return) (CNTLY #\Em) (SP #\Space) (NEWLINE #\Newline) (RUBOUT #\Rubout))
(CONST 1) = X
(CONST 2) = #\NO-BREAK_SPACE
(CONST 3) = ASCII
(CONST 4) = SET
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
34 byte-code instructions:
0     (CONST&PUSH 0)                      ; (# # # ...)
1     (JMP L40)
3     L3
3     (GETVALUE 1)                        ; X
5     (CDR)
6     (CAR&PUSH)
7     (CALL1 3)                           ; ASCII
9     (JMP L32)
11    L11
11    (LOAD&CAR&PUSH 0)
13    (LOAD 0)
14    (BIND 1)                            ; X
16    (GETVALUE 1)                        ; X
18    (CAR&PUSH)
19    (GETVALUE 1)                        ; X
21    (CDR)
22    (CAR&PUSH)
23    (CONST&PUSH 2)                      ; #\NO-BREAK_SPACE
24    (CALLSR&JMPIF 1 9 L3)               ; CHAR<
28    (GETVALUE 1)                        ; X
30    (CDR)
31    (CAR)
32    L32
32    (PUSH)
33    (CALL2 4)                           ; SET
35    (UNBIND1)
36    (SKIP 1)
38    (LOAD&CDR&STORE 0)
40    L40
40    (LOAD&PUSH 0)
41    (CALLS1&JMPIFNOT 146 L11)           ; ENDP
44    (SKIP 1)
46    (VALUES0)
47    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-3|
(CONST 0) = GCSYML
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (GCSYML)
4 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; GCSYML
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-4|
(CONST 0) = 0
(CONST 1) = 14
(CONST 2) = GCSYML
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (GCSYML)
writes special variable : (GCSYML)
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0
1     (JMP L14)
3     L3
3     (PUSH-UNBOUND 1)
5     (CALLS2&PUSH 143)                   ; GENSYM
7     (GETVALUE 2)                        ; GCSYML
9     (CONS)
10    (SETVALUE 2)                        ; GCSYML
12    (LOAD&INC&STORE 0)
14    L14
14    (LOAD&PUSH 0)
15    (CONST&PUSH 1)                      ; 14
16    (CALLSR&JMPIFNOT 1 50 L3)           ; >=
20    (SKIP 1)
22    (VALUES0)
23    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-5|
(CONST 0) = ((MLIST) 0 0)
(CONST 1) = $LASTTIME
(CONST 2) = 0
(CONST 3) = THISTIME
(CONST 4) = GCT
(CONST 5) = GCFLAG
(CONST 6) = $PARSETIME
(CONST 7) = $DISPTIME
(CONST 8) = MEXPRP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (MEXPRP $DISPTIME $PARSETIME GCFLAG GCT THISTIME $LASTTIME)
12 byte-code instructions:
0     (CONST 0)                           ; ((MLIST) 0 0)
1     (SETVALUE 1)                        ; $LASTTIME
3     (CONST 2)                           ; 0
4     (SETVALUE 3)                        ; THISTIME
6     (SETVALUE 4)                        ; GCT
8     (NIL)
9     (SETVALUE 5)                        ; GCFLAG
11    (SETVALUE 6)                        ; $PARSETIME
13    (SETVALUE 7)                        ; $DISPTIME
15    (SETVALUE 8)                        ; MEXPRP
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-6|
(CONST 0) = BATCONL
(CONST 1) = 0
(CONST 2) = $BATCOUNT
(CONST 3) = $BATCHKILL
(CONST 4) = $STRDISP
(CONST 5) = $GRIND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($GRIND $STRDISP $BATCHKILL $BATCOUNT BATCONL)
12 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; BATCONL
3     (CONST 1)                           ; 0
4     (SETVALUE 2)                        ; $BATCOUNT
6     (NIL)
7     (SETVALUE 3)                        ; $BATCHKILL
9     (T)
10    (SETVALUE 4)                        ; $STRDISP
12    (NIL)
13    (SETVALUE 5)                        ; $GRIND
15    (VALUES0)
16    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-7|
(CONST 0) = REFCHKL
(CONST 1) = DEBUG
(CONST 2) = BAKTRCL
(CONST 3) = ERRBRKSW
(CONST 4) = MBREAK
(CONST 5) = $ERRORFUN
(CONST 6) = ERRCATCH
(CONST 7) = DEMONL
(CONST 8) = MCATCH
(CONST 9) = -1
(CONST 10) = BRKLVL
(CONST 11) = ALLBUTL
(CONST 12) = LOADF
(CONST 13) = $BACKTRACE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : 
($BACKTRACE LOADF ALLBUTL BRKLVL MCATCH DEMONL ERRCATCH $ERRORFUN MBREAK
 ERRBRKSW BAKTRCL DEBUG REFCHKL)
22 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; REFCHKL
3     (SETVALUE 1)                        ; DEBUG
5     (SETVALUE 2)                        ; BAKTRCL
7     (SETVALUE 3)                        ; ERRBRKSW
9     (SETVALUE 4)                        ; MBREAK
11    (SETVALUE 5)                        ; $ERRORFUN
13    (SETVALUE 6)                        ; ERRCATCH
15    (PUSH)
16    (LIST 1)
18    (SETVALUE 7)                        ; DEMONL
20    (NIL)
21    (SETVALUE 8)                        ; MCATCH
23    (CONST 9)                           ; -1
24    (SETVALUE 10)                       ; BRKLVL
26    (NIL)
27    (SETVALUE 11)                       ; ALLBUTL
29    (SETVALUE 12)                       ; LOADF
31    (CONST 13)                          ; $BACKTRACE
32    (SETVALUE 13)                       ; $BACKTRACE
34    (VALUES0)
35    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-8|
(CONST 0) = *IN-$BATCHLOAD*
(CONST 1) = *IN-TRANSLATE-FILE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (*IN-TRANSLATE-FILE* *IN-$BATCHLOAD*)
5 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; *IN-$BATCHLOAD*
3     (SETVALUE 1)                        ; *IN-TRANSLATE-FILE*
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-9|
(CONST 0) = BACKRUB
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (BACKRUB)
4 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; BACKRUB
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-10|
(CONST 0) = $DEBUGMODE
(CONST 1) = $BOTHCASES
(CONST 2) = $PAGEPAUSE
(CONST 3) = $DSKGC
(CONST 4) = 5
(CONST 5) = $POISLIM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($POISLIM $DSKGC $PAGEPAUSE $BOTHCASES $DEBUGMODE)
11 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; $DEBUGMODE
3     (T)
4     (SETVALUE 1)                        ; $BOTHCASES
6     (NIL)
7     (SETVALUE 2)                        ; $PAGEPAUSE
9     (SETVALUE 3)                        ; $DSKGC
11    (CONST 4)                           ; 5
12    (SETVALUE 5)                        ; $POISLIM
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-11|
(CONST 0) = $LOADPRINT
(CONST 1) = ^S
(CONST 2) = LOADFILES
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (LOADFILES ^S $LOADPRINT)
6 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; $LOADPRINT
3     (SETVALUE 1)                        ; ^S
5     (SETVALUE 2)                        ; LOADFILES
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-12|
(CONST 0) = $NOLABELS
(CONST 1) = ((MLIST SIMP))
(CONST 2) = $ALIASES
(CONST 3) = LESSORDER
(CONST 4) = GREATORDER
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (GREATORDER LESSORDER $ALIASES $NOLABELS)
9 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; $NOLABELS
3     (CONST 1)                           ; ((MLIST SIMP))
4     (SETVALUE 2)                        ; $ALIASES
6     (NIL)
7     (SETVALUE 3)                        ; LESSORDER
9     (SETVALUE 4)                        ; GREATORDER
11    (VALUES0)
12    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-13|
(CONST 0) = 
((MLIST SIMP) $LABELS $VALUES $FUNCTIONS $MACROS $ARRAYS $MYOPTIONS $PROPS
 $ALIASES $RULES $GRADEFS $DEPENDENCIES $LET_RULE_PACKAGES)
(CONST 1) = $INFOLISTS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($INFOLISTS)
4 byte-code instructions:
0     (CONST 0)                           ; ((MLIST SIMP) $LABELS $VALUES ...)
1     (SETVALUE 1)                        ; $INFOLISTS
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-14|
(CONST 0) = (MLIST SIMP)
(CONST 1) = $LABELS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($LABELS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MLIST SIMP)
1     (LIST 1)
3     (SETVALUE 1)                        ; $LABELS
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-15|
(CONST 0) = $DSKUSE
(CONST 1) = $DSK
(CONST 2) = $DEVICE
(CONST 3) = $DISPFLAG
(CONST 4) = LINELABLE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (LINELABLE $DISPFLAG $DEVICE $DSKUSE)
10 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; $DSKUSE
3     (CONST 1)                           ; $DSK
4     (SETVALUE 2)                        ; $DEVICE
6     (T)
7     (SETVALUE 3)                        ; $DISPFLAG
9     (NIL)
10    (SETVALUE 4)                        ; LINELABLE
12    (VALUES0)
13    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-16|
(CONST 0) = REPHRASE
(CONST 1) = ST
(CONST 2) = OLDST
(CONST 3) = REPRINT
(CONST 4) = POS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (POS REPRINT OLDST ST REPHRASE)
8 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; REPHRASE
3     (SETVALUE 1)                        ; ST
5     (SETVALUE 2)                        ; OLDST
7     (SETVALUE 3)                        ; REPRINT
9     (SETVALUE 4)                        ; POS
11    (VALUES0)
12    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-17|
(CONST 0) = 0
(CONST 1) = DCOUNT
(CONST 2) = $FILENUM
(CONST 3) = 1000
(CONST 4) = $STORENUM
(CONST 5) = 16
(CONST 6) = $FILESIZE
(CONST 7) = $DSKALL
(CONST 8) = NEW-C-LINE-HOOK
(CONST 9) = DSKFNP
(CONST 10) = TTYINTS
(CONST 11) = GCLINENUM
(CONST 12) = DSKSAVEP
(CONST 13) = SAVENO
(CONST 14) = $DYNAMALLOC
(CONST 15) = ALLOCLEVEL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : 
(ALLOCLEVEL $DYNAMALLOC SAVENO DSKSAVEP GCLINENUM TTYINTS DSKFNP
 NEW-C-LINE-HOOK $DSKALL $FILESIZE $STORENUM $FILENUM DCOUNT)
26 byte-code instructions:
0     (CONST 0)                           ; 0
1     (SETVALUE 1)                        ; DCOUNT
3     (SETVALUE 2)                        ; $FILENUM
5     (CONST 3)                           ; 1000
6     (SETVALUE 4)                        ; $STORENUM
8     (CONST 5)                           ; 16
9     (SETVALUE 6)                        ; $FILESIZE
11    (T)
12    (SETVALUE 7)                        ; $DSKALL
14    (NIL)
15    (SETVALUE 8)                        ; NEW-C-LINE-HOOK
17    (SETVALUE 9)                        ; DSKFNP
19    (T)
20    (SETVALUE 10)                       ; TTYINTS
22    (CONST 0)                           ; 0
23    (SETVALUE 11)                       ; GCLINENUM
25    (NIL)
26    (SETVALUE 12)                       ; DSKSAVEP
28    (CONST 0)                           ; 0
29    (SETVALUE 13)                       ; SAVENO
31    (NIL)
32    (SETVALUE 14)                       ; $DYNAMALLOC
34    (CONST 0)                           ; 0
35    (SETVALUE 15)                       ; ALLOCLEVEL
37    (VALUES0)
38    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-18|
(CONST 0) = " "
(CONST 1) = QUITMSG
(CONST 2) = " (Into LISP.  Type control-G to get to MACSYMA.)"
(CONST 3) = MQUITMSG
(CONST 4) = "(Type <space> to continue, <return> to terminate.)"
(CONST 5) = CONTMSG
(CONST 6) = "  (Type EXIT; to exit.)"
(CONST 7) = ^AMSG
(CONST 8) = "LISP  (Type <Alt>P<Space> to continue.)"
(CONST 9) = ^BMSG
(CONST 10) = 
"
 (Use the RUBOUT or DEL(ETE) key to erase a character.)"
(CONST 11) = ^HMSG
(CONST 12) = 
"
 (Printout of GC statistics turned on.  Type control-D again to turn them off.)
"
(CONST 13) = ^DMSG-ON
(CONST 14) = 
"
 (Printout of GC statistics turned off.)
"
(CONST 15) = ^DMSG-OFF
(CONST 16) = 
"Type ALL; NONE; a level-no. or the name of the space.
"
(CONST 17) = GCPROMPT
(CONST 18) = MORE-^W
(CONST 19) = LISPERRPRINT
(CONST 20) = PRINTMSG
(CONST 21) = PROMPTMSG
(CONST 22) = MRG-PUNT
(CONST 23) = READING
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : 
(READING MRG-PUNT PROMPTMSG PRINTMSG LISPERRPRINT MORE-^W GCPROMPT ^DMSG-OFF
 ^DMSG-ON ^HMSG ^BMSG ^AMSG CONTMSG MQUITMSG QUITMSG)
29 byte-code instructions:
0     (CONST 0)                           ; " "
1     (SETVALUE 1)                        ; QUITMSG
3     (CONST 2)                           ; " (Into LISP.  Type control-G to get to MACSYMA.)"
4     (SETVALUE 3)                        ; MQUITMSG
6     (CONST 4)                           ; "(Type <space> to continue, <return> to terminate.)"
7     (SETVALUE 5)                        ; CONTMSG
9     (CONST 6)                           ; "  (Type EXIT; to exit.)"
10    (SETVALUE 7)                        ; ^AMSG
12    (CONST 8)                           ; "LISP  (Type <Alt>P<Space> to continue.)"
13    (SETVALUE 9)                        ; ^BMSG
15    (CONST 10)                          ; "
 (Use the RUBOUT or DEL(ETE) key to erase a character.)"
16    (SETVALUE 11)                       ; ^HMSG
18    (CONST 12)                          ; "
 (Printout of GC statistics turned on.  Type control-D again to turn them off.)
"
19    (SETVALUE 13)                       ; ^DMSG-ON
21    (CONST 14)                          ; "
 (Printout of GC statistics turned off.)
"
22    (SETVALUE 15)                       ; ^DMSG-OFF
24    (CONST 16)                          ; "Type ALL; NONE; a level-no. or the name of the space.
"
25    (SETVALUE 17)                       ; GCPROMPT
27    (NIL)
28    (SETVALUE 18)                       ; MORE-^W
30    (T)
31    (SETVALUE 19)                       ; LISPERRPRINT
33    (NIL)
34    (SETVALUE 20)                       ; PRINTMSG
36    (SETVALUE 21)                       ; PROMPTMSG
38    (SETVALUE 22)                       ; MRG-PUNT
40    (SETVALUE 23)                       ; READING
42    (VALUES0)
43    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-19|
(CONST 0) = LISP-TOPLEVEL
(CONST 1) = STATE-PDL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (STATE-PDL)
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISP-TOPLEVEL
1     (NIL)
2     (CONS)
3     (SETVALUE 1)                        ; STATE-PDL
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# '#) ...)-7-20|
(CONST 0) = (RANDOM PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; (RANDOM PROPERTIES)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $% '$% ...)-8-1|
(CONST 0) = $%
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $%
11    (LOAD&PUSH 1)
12    (CONST&PUSH 0)                      ; $%
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $% '$% ...)-8-2|
(CONST 0) = (SPECIAL $%)
(CONST 1) = $%
(CONST 2) = VARIABLE
(CONST 3) = "The last D-line computed, corresponds to lisp *"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $%)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $%
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $%
8     (CONST&PUSH 1)                      ; $%
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $%
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "The last D-line computed, corresponds to lisp *"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $%
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $INCHAR '$C ...)-9-1|
(CONST 0) = $INCHAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $C
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INCHAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $INCHAR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $C
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $INCHAR '$C ...)-9-2|
(CONST 0) = (SPECIAL $INCHAR)
(CONST 1) = $INCHAR
(CONST 2) = $C
(CONST 3) = VARIABLE
(CONST 4) = "The alphabetic prefix of the names of expressions typed by the user."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $INCHAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $INCHAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $INCHAR
8     (CONST&PUSH 2)                      ; $C
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $INCHAR
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The alphabetic prefix of the names of expressions typed by the user."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $INCHAR
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $OUTCHAR '$D ...)-10-1|
(CONST 0) = $OUTCHAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $D
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OUTCHAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $OUTCHAR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $D
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $OUTCHAR '$D ...)-10-2|
(CONST 0) = (SPECIAL $OUTCHAR)
(CONST 1) = $OUTCHAR
(CONST 2) = $D
(CONST 3) = VARIABLE
(CONST 4) = "The alphabetic prefix of the names of expressions returned by the system."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $OUTCHAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $OUTCHAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $OUTCHAR
8     (CONST&PUSH 2)                      ; $D
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $OUTCHAR
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The alphabetic prefix of the names of expressions returned by the system."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $OUTCHAR
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LINECHAR '$E ...)-11-1|
(CONST 0) = $LINECHAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $E
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINECHAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LINECHAR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $E
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LINECHAR '$E ...)-11-2|
(CONST 0) = (SPECIAL $LINECHAR)
(CONST 1) = $LINECHAR
(CONST 2) = $E
(CONST 3) = VARIABLE
(CONST 4) = "The alphabetic prefix of the names of intermediate displayed expressions."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LINECHAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LINECHAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LINECHAR
8     (CONST&PUSH 2)                      ; $E
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $LINECHAR
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The alphabetic prefix of the names of intermediate displayed expressions."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $LINECHAR
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LINENUM 1 ...)-12-1|
(CONST 0) = $LINENUM
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINENUM
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LINENUM
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 1
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LINENUM 1 ...)-12-2|
(CONST 0) = (SPECIAL $LINENUM)
(CONST 1) = $LINENUM
(CONST 2) = 1
(CONST 3) = VARIABLE
(CONST 4) = "the line number of the last expression."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LINENUM)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LINENUM
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LINENUM
8     (CONST&PUSH 2)                      ; 1
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $LINENUM
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "the line number of the last expression."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $LINENUM
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DIREC 'JRMU ...)-13-1|
(CONST 0) = $DIREC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = JRMU
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DIREC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DIREC
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; JRMU
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DIREC 'JRMU ...)-13-2|
(CONST 0) = (SPECIAL $DIREC)
(CONST 1) = $DIREC
(CONST 2) = JRMU
(CONST 3) = VARIABLE
(CONST 4) = "The default file directory for SAVE, STORE, FASSAVE, and STRINGOUT."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DIREC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DIREC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DIREC
8     (CONST&PUSH 2)                      ; JRMU
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $DIREC
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The default file directory for SAVE, STORE, FASSAVE, and STRINGOUT."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $DIREC
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR CASEP T ...)-14-1|
(CONST 0) = CASEP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; CASEP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; CASEP
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR CASEP T ...)-14-2|
(CONST 0) = (SPECIAL CASEP)
(CONST 1) = CASEP
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes translation of characters from lower to upper case on ITS, 
   and from upper to lower case on Multics and Franz."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL CASEP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; CASEP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; CASEP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; CASEP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes translation of characters from lower to upper case on ITS, 
   and from upper to lower case on Multics and Franz."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; CASEP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR USER-TIMESOFAR NIL)-15-1|
(CONST 0) = USER-TIMESOFAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; USER-TIMESOFAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; USER-TIMESOFAR
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR USER-TIMESOFAR NIL)-15-2|
(CONST 0) = (SPECIAL USER-TIMESOFAR)
(CONST 1) = USER-TIMESOFAR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL USER-TIMESOFAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; USER-TIMESOFAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; USER-TIMESOFAR
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; USER-TIMESOFAR
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR MOREMSG "--Pause--")-16|
(CONST 0) = (SPECIAL MOREMSG)
(CONST 1) = MOREMSG
(CONST 2) = "--Pause--"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MOREMSG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MOREMSG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MOREMSG
8     (CONST&PUSH 2)                      ; "--Pause--"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MOREMSG
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR MORECONTINUE "--Continued--")-17|
(CONST 0) = (SPECIAL MORECONTINUE)
(CONST 1) = MORECONTINUE
(CONST 2) = "--Continued--"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MORECONTINUE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MORECONTINUE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MORECONTINUE
8     (CONST&PUSH 2)                      ; "--Continued--"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MORECONTINUE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR MOREFLUSH NIL)-18|
(CONST 0) = (SPECIAL MOREFLUSH)
(CONST 1) = MOREFLUSH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MOREFLUSH)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MOREFLUSH
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MOREFLUSH
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MOREFLUSH
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MOREWAIT NIL ...)-19-1|
(CONST 0) = $MOREWAIT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MOREWAIT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $MOREWAIT
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MOREWAIT NIL ...)-19-2|
(CONST 0) = (SPECIAL $MOREWAIT)
(CONST 1) = $MOREWAIT
(CONST 2) = VARIABLE
(CONST 3) = "needs to be documented"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $MOREWAIT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $MOREWAIT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $MOREWAIT
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $MOREWAIT
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "needs to be documented"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $MOREWAIT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SHOWTIME NIL)-20-1|
(CONST 0) = $SHOWTIME
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SHOWTIME
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SHOWTIME
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SHOWTIME NIL)-20-2|
(CONST 0) = (SPECIAL $SHOWTIME)
(CONST 1) = $SHOWTIME
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SHOWTIME)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SHOWTIME
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SHOWTIME
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $SHOWTIME
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ALIASLIST NIL ...)-21-1|
(CONST 0) = ALIASLIST
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALIASLIST
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ALIASLIST
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ALIASLIST NIL ...)-21-2|
(CONST 0) = (SPECIAL ALIASLIST)
(CONST 1) = ALIASLIST
(CONST 2) = VARIABLE
(CONST 3) = "is used by the MAKEATOMIC scheme which has never been completed"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ALIASLIST)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ALIASLIST
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ALIASLIST
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; ALIASLIST
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "is used by the MAKEATOMIC scheme which has never been completed"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; ALIASLIST
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SYS-GCTIME NIL ...)-22|
(CONST 0) = SYS-GCTIME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SYS-GCTIME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SYS-GCTIME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SYS-GCTIME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SYS-GCTIME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SYS-GCTIME
8     (SKIP&RET 1)


Disassembly of function SYS-GCTIME
(CONST 0) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; 0
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FILE_STRING_PRINT T ...)-23-1|
(CONST 0) = $FILE_STRING_PRINT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FILE_STRING_PRINT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $FILE_STRING_PRINT
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FILE_STRING_PRINT T ...)-23-2|
(CONST 0) = (SPECIAL $FILE_STRING_PRINT)
(CONST 1) = $FILE_STRING_PRINT
(CONST 2) = VARIABLE
(CONST 3) = "If TRUE, filenames are output as strings; if FALSE, as lists."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $FILE_STRING_PRINT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $FILE_STRING_PRINT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $FILE_STRING_PRINT
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $FILE_STRING_PRINT
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If TRUE, filenames are output as strings; if FALSE, as lists."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $FILE_STRING_PRINT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SHOWTIME NIL)-24-1|
(CONST 0) = $SHOWTIME
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SHOWTIME
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SHOWTIME
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SHOWTIME NIL)-24-2|
(CONST 0) = (SPECIAL $SHOWTIME)
(CONST 1) = $SHOWTIME
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SHOWTIME)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SHOWTIME
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SHOWTIME
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $SHOWTIME
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MEVAL* (TEST) ...)-25|
(CONST 0) = MEVAL*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVAL*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVAL*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVAL*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVAL*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVAL*
8     (SKIP&RET 1)


Disassembly of function MEVAL*
(CONST 0) = REFCHKL
(CONST 1) = BAKTRCL
(CONST 2) = CHECKFACTORS
(CONST 3) = $RATVARSWITCH
(CONST 4) = $RATVARS
(CONST 5) = VARLIST
(CONST 6) = MEVAL
(CONST 7) = CLEARSIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($RATVARS $RATVARSWITCH)
writes special variable : (VARLIST)
18 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; REFCHKL
3     (NIL)
4     (BIND 1)                            ; BAKTRCL
6     (NIL)
7     (BIND 2)                            ; CHECKFACTORS
9     (GETVALUE 3)                        ; $RATVARSWITCH
11    (JMPIFNOT L18)
13    (GETVALUE 4)                        ; $RATVARS
15    (CDR)
16    (SETVALUE 5)                        ; VARLIST
18    L18
18    (LOAD&PUSH 10)
19    (CALL1&PUSH 6)                      ; MEVAL
21    (CALL0 7)                           ; CLEARSIGN
23    (POP)
24    (UNBIND 3)
26    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MAKELABEL (X) ...)-26|
(CONST 0) = MAKELABEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKELABEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKELABEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKELABEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKELABEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKELABEL
8     (SKIP&RET 1)


Disassembly of function MAKELABEL
(CONST 0) = X
(CONST 1) = $DSKUSE
(CONST 2) = $NOLABELS
(CONST 3) = DCOUNT
(CONST 4) = $FILESIZE
(CONST 5) = 0
(CONST 6) = DSKSAVE
(CONST 7) = $LINENUM
(CONST 8) = CONCAT
(CONST 9) = LINELABLE
(CONST 10) = $LABELS
(CONST 11) = MEMQ
(CONST 12) = 1
(CONST 13) = DELQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LINELABLE $LABELS $LINENUM X $FILESIZE DCOUNT $NOLABELS $DSKUSE)
writes special variables : ($LABELS LINELABLE DCOUNT)
56 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; $DSKUSE
5     (JMPIFNOT L29)
7     (GETVALUE 2)                        ; $NOLABELS
9     (JMPIF L29)
11    (GETVALUE&PUSH 3)                   ; DCOUNT
13    (CALLS2 150)                        ; 1+
15    (SETVALUE 3)                        ; DCOUNT
17    (PUSH)
18    (GETVALUE&PUSH 4)                   ; $FILESIZE
20    (CALLSR&JMPIFNOT 1 48 L29)          ; >
24    (CONST 5)                           ; 0
25    (SETVALUE 3)                        ; DCOUNT
27    (CALL0 6)                           ; DSKSAVE
29    L29
29    (GETVALUE&PUSH 0)                   ; X
31    (GETVALUE&PUSH 7)                   ; $LINENUM
33    (CALL2 8)                           ; CONCAT
35    (SETVALUE 9)                        ; LINELABLE
37    (GETVALUE 2)                        ; $NOLABELS
39    (JMPIF L63)
41    (GETVALUE 10)                       ; $LABELS
43    (CDR)
44    (JMPIFNOT L76)
46    (GETVALUE&PUSH 9)                   ; LINELABLE
48    (GETVALUE 10)                       ; $LABELS
50    (CDR)
51    (CDR&PUSH)
52    (CALL2&JMPIF 11 L68)                ; MEMQ
55    (GETVALUE&PUSH 9)                   ; LINELABLE
57    (GETVALUE 10)                       ; $LABELS
59    (CDR)
60    (CAR)
61    (JMPIFNOTEQ L76)
63    L63
63    (GETVALUE 9)                        ; LINELABLE
65    L65
65    (UNBIND1)
66    (SKIP&RET 2)
68    L68
68    (GETVALUE&PUSH 9)                   ; LINELABLE
70    (GETVALUE&PUSH 10)                  ; $LABELS
72    (CONST&PUSH 12)                     ; 1
73    (CALL 3 13)                         ; DELQ
76    L76
76    (GETVALUE 10)                       ; $LABELS
78    (CAR&PUSH)
79    (GETVALUE&PUSH 9)                   ; LINELABLE
81    (GETVALUE 10)                       ; $LABELS
83    (CDR)
84    (CONS)
85    (CONS)
86    (SETVALUE 10)                       ; $LABELS
88    (GETVALUE 9)                        ; LINELABLE
90    (JMP L65)


Disassembly of function #:|(DEFMFUN PRINTLABEL NIL ...)-27|
(CONST 0) = PRINTLABEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRINTLABEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRINTLABEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRINTLABEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRINTLABEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRINTLABEL
8     (SKIP&RET 1)


Disassembly of function PRINTLABEL
(CONST 0) = #:|(|
(CONST 1) = LINELABLE
(CONST 2) = EXPLODEN
(CONST 3) = MAKNAM
(CONST 4) = #:|) |
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LINELABLE)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; #:|(|
1     (PUSH-UNBOUND 1)
3     (CALLS1 132)                        ; PRINC
5     (GETVALUE&PUSH 1)                   ; LINELABLE
7     (CALL1 2)                           ; EXPLODEN
9     (CDR&PUSH)
10    (CALL1&PUSH 3)                      ; MAKNAM
12    (PUSH-UNBOUND 1)
14    (CALLS1 132)                        ; PRINC
16    (CONST&PUSH 4)                      ; #:|) |
17    (PUSH-UNBOUND 1)
19    (CALLS1 132)                        ; PRINC
21    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MEXPLODEN (X) ...)-28|
(CONST 0) = MEXPLODEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEXPLODEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEXPLODEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEXPLODEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEXPLODEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEXPLODEN
8     (SKIP&RET 1)


Disassembly of function MEXPLODEN
(CONST 0) = X
(CONST 1) = *PRINT-RADIX*
(CONST 2) = 10
(CONST 3) = *PRINT-BASE*
(CONST 4) = EXPLODEN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; *PRINT-RADIX*
6     (CONST 2)                           ; 10
7     (BIND 3)                            ; *PRINT-BASE*
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 4)                           ; EXPLODEN
13    (UNBIND 3)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN ADDLABEL (LABEL) ...)-29|
(CONST 0) = ADDLABEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADDLABEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADDLABEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADDLABEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADDLABEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADDLABEL
8     (SKIP&RET 1)


Disassembly of function ADDLABEL
(CONST 0) = LABEL
(CONST 1) = $LABELS
(CONST 2) = 1
(CONST 3) = DELQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LABEL $LABELS)
writes special variable : ($LABELS)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; LABEL
3     (GETVALUE 1)                        ; $LABELS
5     (CAR&PUSH)
6     (GETVALUE&PUSH 0)                   ; LABEL
8     (GETVALUE&PUSH 0)                   ; LABEL
10    (GETVALUE 1)                        ; $LABELS
12    (CDR&PUSH)
13    (CONST&PUSH 2)                      ; 1
14    (CALL 3 3)                          ; DELQ
17    (CONS)
18    (CONS)
19    (SETVALUE 1)                        ; $LABELS
21    (UNBIND1)
22    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN TYI* NIL ...)-30|
(CONST 0) = TYI*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TYI*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TYI*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TYI*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TYI*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TYI*
8     (SKIP&RET 1)


Disassembly of function TYI*
(CONST 0) = TYI
(CONST 1) = #\Newline
(CONST 2) = 31
(CONST 3) = #\Rubout
(CONST 4) = #\Page
(CONST 5) = FORMFEED
(CONST 6) = $PROMPT
(CONST 7) = STRIPDOLLAR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROMPT)
28 byte-code instructions:
0     (CALL0 0)                           ; TYI
2     (PUSH)
3     (JMP L24)
5     L5
5     (LOAD&PUSH 0)
6     (CONST&PUSH 4)                      ; #\Page
7     (CALLSR&JMPIFNOT 1 7 L21)           ; CHAR=
11    (CALL0 5)                           ; FORMFEED
13    (GETVALUE&PUSH 6)                   ; $PROMPT
15    (CALL1&PUSH 7)                      ; STRIPDOLLAR
17    (PUSH-UNBOUND 1)
19    (CALLS1 132)                        ; PRINC
21    L21
21    (CALL0 0)                           ; TYI
23    (STORE 0)
24    L24
24    (LOAD&PUSH 0)
25    (CONST&PUSH 1)                      ; #\Newline
26    (CALLSR&JMPIF 1 7 L42)              ; CHAR=
30    (LOAD&PUSH 0)
31    (CONST&PUSH 2)                      ; 31
32    (CALLSR&JMPIFNOT 1 48 L5)           ; >
36    (LOAD&PUSH 0)
37    (CONST&PUSH 3)                      ; #\Rubout
38    (CALLSR&JMPIF 1 7 L5)               ; CHAR=
42    L42
42    (POP)
43    (SKIP&RET 1)


Disassembly of function #:|(DEFUN CONTINUEP NIL ...)-31|
(CONST 0) = CONTINUEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONTINUEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONTINUEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONTINUEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONTINUEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONTINUEP
8     (SKIP&RET 1)


Disassembly of function CONTINUEP
(CONST 0) = $PROMPT
(CONST 1) = STRIPDOLLAR
(CONST 2) = TYI*
(CONST 3) = #\Space
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROMPT)
9 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; $PROMPT
2     (CALL1&PUSH 1)                      ; STRIPDOLLAR
4     (PUSH-UNBOUND 1)
6     (CALLS1 132)                        ; PRINC
8     (CALL0 2)                           ; TYI*
10    (PUSH)
11    (CONST&PUSH 3)                      ; #\Space
12    (CALLSR 1 7)                        ; CHAR=
15    (SKIP&RET 1)


Disassembly of function #:|(DEFUN CHECKLABEL (X) ...)-32|
(CONST 0) = CHECKLABEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKLABEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKLABEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKLABEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKLABEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKLABEL
8     (SKIP&RET 1)


Disassembly of function CHECKLABEL
(CONST 0) = X
(CONST 1) = $NOLABELS
(CONST 2) = $LINENUM
(CONST 3) = 0
(CONST 4) = CONCAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $LINENUM $NOLABELS)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; $NOLABELS
5     (JMPIF L14)
7     (GETVALUE&PUSH 2)                   ; $LINENUM
9     (CONST&PUSH 3)                      ; 0
10    (CALLSR&JMPIFNOT 1 45 L18)          ; =
14    L14
14    (NOT)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)
18    L18
18    (GETVALUE&PUSH 0)                   ; X
20    (GETVALUE&PUSH 2)                   ; $LINENUM
22    (CALL2&PUSH 4)                      ; CONCAT
24    (CALLS1 79)                         ; BOUNDP
26    (NOT)
27    (JMP L15)


Disassembly of function #:|(DEFUN GCTIMEP (TIMEP TIM) ...)-33|
(CONST 0) = GCTIMEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GCTIMEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GCTIMEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GCTIMEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GCTIMEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GCTIMEP
8     (SKIP&RET 1)


Disassembly of function GCTIMEP
(CONST 0) = $ALL
(CONST 1) = "Totaltime= "
(CONST 2) = "Time= "
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 2)
1     (JMPIFNOTEQTO 0 L8)                 ; $ALL
4     (LOAD&PUSH 1)
5     (CALLS2&JMPIFNOT 145 L16)           ; ZEROP
8     L8
8     (CONST&PUSH 2)                      ; "Time= "
9     (PUSH-UNBOUND 1)
11    (CALLS1 132)                        ; PRINC
13    (NIL)
14    (SKIP&RET 3)
16    L16
16    (CONST&PUSH 1)                      ; "Totaltime= "
17    (PUSH-UNBOUND 1)
19    (CALLS1 132)                        ; PRINC
21    (T)
22    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $BOTHCASES (X) ...)-34|
(CONST 0) = $BOTHCASES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BOTHCASES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BOTHCASES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BOTHCASES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BOTHCASES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BOTHCASES
8     (SKIP&RET 1)


Disassembly of function $BOTHCASES
(CONST 0) = X
(CONST 1) = BOTHCASES1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 1)                           ; BOTHCASES1
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN BOTHCASES1 (SYMBOL VALUE) ...)-35|
(CONST 0) = BOTHCASES1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BOTHCASES1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BOTHCASES1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BOTHCASES1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BOTHCASES1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BOTHCASES1
8     (SKIP&RET 1)


Disassembly of function BOTHCASES1
(CONST 0) = CASEP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (CASEP)
5 byte-code instructions:
0     (LOAD 1)
1     (NOT)
2     (SETVALUE 0)                        ; CASEP
4     (LOAD 1)
5     (SKIP&RET 3)


Disassembly of function #:|(DEFUN LISTEN NIL ...)-36|
(CONST 0) = LISTEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISTEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISTEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISTEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISTEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LISTEN
8     (SKIP&RET 1)


Disassembly of function LISTEN
(CONST 0) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; 0
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DISPLAY* (&AUX # #) ...)-37|
(CONST 0) = DISPLAY*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISPLAY*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISPLAY*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISPLAY*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISPLAY*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISPLAY*
8     (SKIP&RET 1)


Disassembly of function DISPLAY*
(CONST 0) = 0
(CONST 1) = RUNTIME
(CONST 2) = ERRBREAK2
(CONST 3) = ERRSET
(CONST 4) = -1
(CONST 5) = THISTIME
(CONST 6) = #(NIL)
(CONST 7) = (#(ERROR 35) 1 . 1)
(CONST 8) = (MLABLE)
(CONST 9) = LINELABLE
(CONST 10) = $%
(CONST 11) = DISPLA
(CONST 12) = "~%Error during display~%"
(CONST 13) = MTELL
(CONST 14) = $DISPTIME
(CONST 15) = #:|Displaytime= |
(CONST 16) = COMPUTIME
(CONST 17) = #:| msec.|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRSET $DISPTIME $% LINELABLE)
64 byte-code instructions:
0     (NIL&PUSH)
1     (CONST&PUSH 0)                      ; 0
2     (CALL0 1)                           ; RUNTIME
4     (STORE 0)
5     (CONST 2)                           ; ERRBREAK2
6     (BIND 3)                            ; ERRSET
8     (CONST 4)                           ; -1
9     (BIND 5)                            ; THISTIME
11    (NIL&PUSH)
12    (TAGBODY-OPEN 6 L59)                ; #(NIL)
15    (HANDLER-OPEN 7 L35)                ; (#(ERROR 35) 1 . 1)
17    (CONST&PUSH 8)                      ; (MLABLE)
18    (GETVALUE&PUSH 9)                   ; LINELABLE
20    (GETVALUE&PUSH 10)                  ; $%
22    (LIST&PUSH 3)
24    (CALL1&PUSH 11)                     ; DISPLA
26    (LIST 1)
28    (SKIP 4)
30    (TAGBODY-CLOSE)
31    (SKIP 1)
33    (JMP L66)
35    L35
35    (HANDLER-BEGIN&PUSH)
36    (LOAD 0)
37    (STOREI 0 0 4)
41    (GO-I 0 0 2 0)
46    L46
46    (LOAD&PUSH 4)
47    (CALLSR 0 29)                       ; ERROR
50    L50
50    (CONST&PUSH 12)                     ; "~%Error during display~%"
51    (CALL1 13)                          ; MTELL
53    (GETVALUE 14)                       ; $DISPTIME
55    (JMPIFNOT L99)
57    (JMP L75)
59    L59
59    (GETVALUE 3)                        ; ERRSET
61    (JMPIF L46)
63    (TAGBODY-CLOSE)
64    (SKIP 1)
66    L66
66    (UNBIND 2)
68    (STORE 1)
69    (JMPIFNOT L50)
71    (GETVALUE 14)                       ; $DISPTIME
73    (JMPIFNOT L99)
75    L75
75    (CONST&PUSH 15)                     ; #:|Displaytime= |
76    (PUSH-UNBOUND 1)
78    (CALLS1 132)                        ; PRINC
80    (CALL0 1)                           ; RUNTIME
82    (PUSH)
83    (LOAD&PUSH 1)
84    (CALL2&PUSH 16)                     ; COMPUTIME
86    (PUSH-UNBOUND 1)
88    (CALLS1 132)                        ; PRINC
90    (CONST&PUSH 17)                     ; #:| msec.|
91    (PUSH-UNBOUND 1)
93    (CALLS1 132)                        ; PRINC
95    (PUSH-UNBOUND 1)
97    (CALLS1 139)                        ; TERPRI
99    L99
99    (LOAD 1)
100   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RUBOUT* (STG) ...)-38|
(CONST 0) = RUBOUT*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RUBOUT*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RUBOUT*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RUBOUT*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RUBOUT*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RUBOUT*
8     (SKIP&RET 1)


Disassembly of function RUBOUT*
(CONST 0) = ^W
(CONST 1) = ^R
(CONST 2) = RUBOUT-TTY
(CONST 3) = REPRINT
(CONST 4) = #\Return
(CONST 5) = #\Tab
(CONST 6) = SMART-TTY
(CONST 7) = POS
(CONST 8) = CURSORPOS
(CONST 9) = L
(CONST 10) = MAKNAM
(CONST 11) = X
(CONST 12) = TYO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (REPRINT SMART-TTY POS RUBOUT-TTY)
writes special variable : (REPRINT)
61 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; ^W
3     (NIL)
4     (BIND 1)                            ; ^R
6     (GETVALUE 2)                        ; RUBOUT-TTY
8     (JMPIF L70)
10    (LOAD&JMPIF 7 L97)
14    (NIL)
15    L15
15    (UNBIND 2)
17    (SKIP&RET 2)
19    L19
19    (GETVALUE 7)                        ; POS
21    (CAR&PUSH)
22    (GETVALUE 7)                        ; POS
24    (CDR&PUSH)
25    (CALL2 8)                           ; CURSORPOS
27    (CONST&PUSH 9)                      ; L
28    (CALL1 8)                           ; CURSORPOS
30    (LOAD 7)
31    (CDR)
32    (JMPIFNOT L44)
34    (LOAD&CDR&PUSH 7)
36    (CALLS2&PUSH 72)                    ; REVERSE
38    (CALL1&PUSH 10)                     ; MAKNAM
40    (PUSH-UNBOUND 1)
42    (CALLS1 132)                        ; PRINC
44    L44
44    (NIL)
45    (SETVALUE 3)                        ; REPRINT
47    (JMP L15)
49    L49
49    (LOAD&CDR&PUSH 7)
51    (NIL&PUSH)
52    (CALL2 3)                           ; REPRINT
54    (JMP L15)
56    L56
56    (GETVALUE 6)                        ; SMART-TTY
58    (JMPIF L19)
60    (GETVALUE 3)                        ; REPRINT
62    (JMPIF L49)
64    (LOAD&JMPIF 7 L49)
67    (NIL)
68    (JMP L15)
70    L70
70    (GETVALUE 3)                        ; REPRINT
72    (JMPIF L56)
74    (LOAD&JMPIFNOT 7 L56)
77    (LOAD&CAR&PUSH 7)
79    (CONST&PUSH 4)                      ; #\Return
80    (CALLSR&JMPIF 1 7 L56)              ; CHAR=
84    (LOAD&CAR&PUSH 7)
86    (CONST&PUSH 5)                      ; #\Tab
87    (CALLSR&JMPIF 1 7 L56)              ; CHAR=
91    (CONST&PUSH 11)                     ; X
92    (CALL1 8)                           ; CURSORPOS
94    (JMP L15)
97    L97
97    (CAR&PUSH)
98    (CALL1 12)                          ; TYO
100   (JMP L15)


Disassembly of function #:|(DEFMFUN REPRINT (STG FFP) ...)-39|
(CONST 0) = REPRINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REPRINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REPRINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REPRINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REPRINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REPRINT
8     (SKIP&RET 1)


Disassembly of function REPRINT
(CONST 0) = ^W
(CONST 1) = ^R
(CONST 2) = MTERPRI
(CONST 3) = STATE-PDL
(CONST 4) = MACSYMA-TOPLEVEL
(CONST 5) = PRINTLABEL
(CONST 6) = RETRIEVE
(CONST 7) = MRG-PUNT
(CONST 8) = BREAK
(CONST 9) = $PROMPT
(CONST 10) = STRIPDOLLAR
(CONST 11) = CURSORPOS
(CONST 12) = POS
(CONST 13) = MAKNAM
(CONST 14) = REPRINT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PROMPT MRG-PUNT STATE-PDL)
writes special variables : (REPRINT POS)
37 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; ^W
3     (NIL)
4     (BIND 1)                            ; ^R
6     (LOAD&JMPIF 7 L11)
9     (CALL0 2)                           ; MTERPRI
11    L11
11    (GETVALUE 3)                        ; STATE-PDL
13    (CAR&PUSH)
14    (LOAD&PUSH 0)
15    (JMPIFEQTO 4 L60)                   ; MACSYMA-TOPLEVEL
18    (LOAD&PUSH 0)
19    (JMPIFNOTEQTO 6 L35)                ; RETRIEVE
22    (GETVALUE&PUSH 7)                   ; MRG-PUNT
24    (JMPIFNOTEQTO 8 L35)                ; BREAK
27    (GETVALUE&PUSH 9)                   ; $PROMPT
29    (CALL1&PUSH 10)                     ; STRIPDOLLAR
31    (PUSH-UNBOUND 1)
33    (CALLS1 132)                        ; PRINC
35    L35
35    (SKIP 1)
37    (CALL0 11)                          ; CURSORPOS
39    (SETVALUE 12)                       ; POS
41    (LOAD&JMPIFNOT 8 L53)
44    (PUSH)
45    (CALLS2&PUSH 72)                    ; REVERSE
47    (CALL1&PUSH 13)                     ; MAKNAM
49    (PUSH-UNBOUND 1)
51    (CALLS1 132)                        ; PRINC
53    L53
53    (NIL)
54    (SETVALUE 14)                       ; REPRINT
56    (UNBIND 2)
58    (SKIP&RET 3)
60    L60
60    (CALL0 5)                           ; PRINTLABEL
62    (JMP L35)


Disassembly of function #:|(DEFUN GENERIC-AUTOLOAD (FILE &AUX TYPE) ...)-40|
(CONST 0) = GENERIC-AUTOLOAD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GENERIC-AUTOLOAD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GENERIC-AUTOLOAD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GENERIC-AUTOLOAD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GENERIC-AUTOLOAD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GENERIC-AUTOLOAD
8     (SKIP&RET 1)


Disassembly of function GENERIC-AUTOLOAD
(CONST 0) = (NIL "BIN" "O" "o" "XFASL" "QFASL" "LISP" "LSP")
(CONST 1) = EQUALP
(CONST 2) = LOAD
(CONST 3) = $BATCHLOAD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&CDR&PUSH 2)
3     (CALLS1&STORE 231 2)                ; PATHNAME
6     (PUSH)
7     (PUSH-UNBOUND 1)
9     (CALLS1&STORE 236 0)                ; PATHNAME-TYPE
12    (PUSH)
13    (CONST&PUSH 0)                      ; (NIL "BIN" "O" "o" "XFASL" ...)
14    (CONST&PUSH 1)                      ; EQUALP
15    (PUSH-UNBOUND 2)
17    (CALLS1&JMPIF 180 L25)              ; MEMBER
20    (LOAD&PUSH 2)
21    (CALL1 3)                           ; $BATCHLOAD
23    (SKIP&RET 3)
25    L25
25    (LOAD&PUSH 2)
26    (CALL1 2)                           ; LOAD
28    (SKIP&RET 3)


Disassembly of function #:|(DEFVAR AUTOLOAD 'GENERIC-AUTOLOAD)-41|
(CONST 0) = (SPECIAL AUTOLOAD)
(CONST 1) = AUTOLOAD
(CONST 2) = GENERIC-AUTOLOAD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL AUTOLOAD)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; AUTOLOAD
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; AUTOLOAD
8     (CONST&PUSH 2)                      ; GENERIC-AUTOLOAD
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; AUTOLOAD
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN LOAD-FUNCTION (FUNC MEXPRP) ...)-42|
(CONST 0) = LOAD-FUNCTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOAD-FUNCTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOAD-FUNCTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOAD-FUNCTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOAD-FUNCTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOAD-FUNCTION
8     (SKIP&RET 1)


Disassembly of function LOAD-FUNCTION
(CONST 0) = MEXPRP
(CONST 1) = AUTOLOAD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (AUTOLOAD)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; MEXPRP
3     (LOAD&PUSH 5)
4     (CONST&PUSH 1)                      ; AUTOLOAD
5     (PUSH-UNBOUND 1)
7     (CALLS2&PUSH 132)                   ; GET
9     (LOAD 0)
10    (JMPIFNOT1 L23)
12    (GETVALUE&PUSH 1)                   ; AUTOLOAD
14    (LOAD&PUSH 7)
15    (LOAD 2)
16    (CONS&PUSH)
17    (FUNCALL 1)
19    (SKIP 1)
21    (JMP L25)
23    L23
23    (SKIP 1)
25    L25
25    (UNBIND1)
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN LOAD-FILE (FILE) ...)-43|
(CONST 0) = LOAD-FILE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOAD-FILE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOAD-FILE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOAD-FILE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOAD-FILE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOAD-FILE
8     (SKIP&RET 1)


Disassembly of function LOAD-FILE
(CONST 0) = TO-MACSYMA-NAMESTRING
(CONST 1) = $LOAD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; TO-MACSYMA-NAMESTRING
3     (CALL1 1)                           ; $LOAD
5     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $LOADFILE (FORM) ...)-44-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $LOADFILE (FORM) ...)-44-2-1|>
(CONST 1) = $LOADFILE
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $LOADFILE (FORM) ...)-44-2-1|>
1     (CONST&PUSH 1)                      ; $LOADFILE
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $LOADFILE (FORM) ...)-44-2-1|
(CONST 0) = FILESTRIP
(CONST 1) = $LOADPRINT
(CONST 2) = (NIL $AUTOLOAD)
(CONST 3) = MEMQ
(CONST 4) = LOADFILE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($LOADPRINT)
10 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (CALL1&PUSH 0)                      ; FILESTRIP
4     (NIL&PUSH)
5     (GETVALUE&PUSH 1)                   ; $LOADPRINT
7     (CONST&PUSH 2)                      ; (NIL $AUTOLOAD)
8     (CALL2 3)                           ; MEMQ
10    (NOT)
11    (PUSH)
12    (CALL 3 4)                          ; LOADFILE
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $SETUP_AUTOLOAD (FILENAME &REST FUNCTIONS) ...)-45|
(CONST 0) = $SETUP_AUTOLOAD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SETUP_AUTOLOAD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SETUP_AUTOLOAD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SETUP_AUTOLOAD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SETUP_AUTOLOAD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SETUP_AUTOLOAD
8     (SKIP&RET 1)


Disassembly of function $SETUP_AUTOLOAD
(CONST 0) = "&$"
(CONST 1) = STRING-TRIM
(CONST 2) = $SETUP_AUTOLOAD
(CONST 3) = NONSYMCHK
(CONST 4) = DOLLARIFY-NAME
(CONST 5) = AUTOLOAD
(CONST 6) = PUTPROP
(CONST 7) = $PROPS
(CONST 8) = ADD2LNC
(CONST 9) = $DONE
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: ($PROPS)
28 byte-code instructions:
0     (CONST&PUSH 0)                      ; "&$"
1     (LOAD&PUSH 3)
2     (CALL2&PUSH 1)                      ; STRING-TRIM
4     (LOAD&PUSH 2)
5     (NIL&PUSH)
6     (JMP L32)
8     L8
8     (LOAD&CAR&STORE 1 0)
11    (PUSH)
12    (CONST&PUSH 2)                      ; $SETUP_AUTOLOAD
13    (CALL2 3)                           ; NONSYMCHK
15    (LOAD&PUSH 0)
16    (CALL1 4)                           ; DOLLARIFY-NAME
18    (STORE 0)
19    (PUSH)
20    (LOAD&PUSH 3)
21    (CONST&PUSH 5)                      ; AUTOLOAD
22    (CALL 3 6)                          ; PUTPROP
25    (LOAD&PUSH 0)
26    (GETVALUE&PUSH 7)                   ; $PROPS
28    (CALL2 8)                           ; ADD2LNC
30    (LOAD&CDR&STORE 1)
32    L32
32    (LOAD&PUSH 1)
33    (CALLS1&JMPIFNOT 146 L8)            ; ENDP
36    (SKIP 3)
38    (CONST 9)                           ; $DONE
39    (SKIP&RET 3)

WARNING in (DEFMFUN DOLLARIFY (L) ...)-46 in lines 373..385 :
Function DOLLARIFY
 was already defined in file #P"/cygdrive/e/temp/maxima/src/comm.lisp" in lines 831..838

Disassembly of function #:|(DEFMFUN DOLLARIFY (L) ...)-46|
(CONST 0) = DOLLARIFY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DOLLARIFY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DOLLARIFY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DOLLARIFY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DOLLARIFY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DOLLARIFY
8     (SKIP&RET 1)


Disassembly of function DOLLARIFY
(CONST 0) = ERRBREAK1
(CONST 1) = ERRSET
(CONST 2) = (MLIST SIMP)
(CONST 3) = X
(CONST 4) = Y
(CONST 5) = #(NIL)
(CONST 6) = (#(ERROR 14) 1 . 1)
(CONST 7) = MEXPLODEN
(CONST 8) = READLIST
(CONST 9) = MAKEALIAS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRSET Y X)
writes special variable : (Y)
67 byte-code instructions:
0     (CONST 0)                           ; ERRBREAK1
1     (BIND 1)                            ; ERRSET
3     (CONST&PUSH 2)                      ; (MLIST SIMP)
4     (NIL&PUSH)
5     (LOAD&PUSH 6)
6     (JMP L94)
9     L9
9     (GETVALUE 3)                        ; X
11    (JMP L85)
14    L14
14    (HANDLER-BEGIN&PUSH)
15    (LOAD 0)
16    (STOREI 0 0 4)
20    (GO-I 0 0 2 0)
25    L25
25    (LOAD&CAR&PUSH 0)
27    (LOAD 0)
28    (BIND 3)                            ; X
30    (NIL)
31    (BIND 4)                            ; Y
33    (GETVALUE&PUSH 3)                   ; X
35    (CALLS2&JMPIF 8 L9)                 ; NUMBERP
38    (NIL&PUSH)
39    (TAGBODY-OPEN 5 L67)                ; #(NIL)
42    (HANDLER-OPEN 6 L14)                ; (#(ERROR 14) 1 . 1)
44    (GETVALUE&PUSH 3)                   ; X
46    (CALL1&PUSH 7)                      ; MEXPLODEN
48    (CALL1&PUSH 8)                      ; READLIST
50    (LIST 1)
52    (SKIP 4)
54    (TAGBODY-CLOSE)
55    (SKIP 1)
57    (JMP L74)
59    L59
59    (LOAD&PUSH 4)
60    (CALLSR 0 29)                       ; ERROR
63    L63
63    (GETVALUE 4)                        ; Y
65    (JMP L85)
67    L67
67    (GETVALUE 1)                        ; ERRSET
69    (JMPIF L59)
71    (TAGBODY-CLOSE)
72    (SKIP 1)
74    L74
74    (CAR)
75    (SETVALUE 4)                        ; Y
77    (PUSH)
78    (CALLS2&JMPIF 8 L63)                ; NUMBERP
81    (GETVALUE&PUSH 3)                   ; X
83    (CALL1 9)                           ; MAKEALIAS
85    L85
85    (UNBIND 2)
87    (PUSH)
88    (LOAD&CONS&STORE 2)
90    (SKIP 1)
92    (LOAD&CDR&STORE 0)
94    L94
94    (LOAD&PUSH 0)
95    (CALLS1&JMPIFNOT 146 L25)           ; ENDP
99    (SKIP 1)
101   (LOAD&PUSH 0)
102   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
104   (SKIP 1)
106   (CONS)
107   (UNBIND1)
108   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MFBOUNDP (FUNC) ...)-47|
(CONST 0) = MFBOUNDP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFBOUNDP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFBOUNDP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFBOUNDP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFBOUNDP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFBOUNDP
8     (SKIP&RET 1)


Disassembly of function MFBOUNDP
(CONST 0) = (MEXPR MMACRO)
(CONST 1) = MGETL
(CONST 2) = (TRANSLATED-MMACRO MFEXPR* MFEXPR*S)
(CONST 3) = GETL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (MEXPR MMACRO)
2     (CALL2 1)                           ; MGETL
4     (JMPIF1 L12)
6     (LOAD&PUSH 1)
7     (CONST&PUSH 2)                      ; (TRANSLATED-MMACRO MFEXPR* ...)
8     (CALL2 3)                           ; GETL
10    (SKIP&RET 2)
12    L12
12    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN FILENAMEL (FILE) ...)-48|
(CONST 0) = FILENAMEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FILENAMEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FILENAMEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FILENAMEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FILENAMEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FILENAMEL
8     (SKIP&RET 1)


Disassembly of function FILENAMEL
(CONST 0) = $LISTP
(CONST 1) = "Not a proper filename ~M"
(CONST 2) = MERROR
(CONST 3) = FILESTRIP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
20 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L16)
3     (LOAD&PUSH 1)
4     (CALL1&JMPIF 0 L22)                 ; $LISTP
7     (CONST&PUSH 1)                      ; "Not a proper filename ~M"
8     (LOAD&PUSH 2)
9     (CALL2 2)                           ; MERROR
11    L11
11    (LOAD&PUSH 1)
12    (CALL1 3)                           ; FILESTRIP
14    (SKIP&RET 2)
16    L16
16    (LOAD&PUSH 1)
17    (NIL)
18    (CONS)
19    (STORE 1)
20    (JMP L11)
22    L22
22    (LOAD&CDR&STORE 1)
24    (JMP L11)


Disassembly of function #:|(DEFMFUN LOADFILE (FILE FINDP PRINTP ...) ...)-49|
(CONST 0) = LOADFILE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOADFILE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOADFILE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOADFILE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOADFILE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOADFILE
8     (SKIP&RET 1)


Disassembly of function LOADFILE
(CONST 0) = 0
(CONST 1) = SAVENO
(CONST 2) = $LOADPRINT
(CONST 3) = (NIL $LOADFILE)
(CONST 4) = MEMQ
(CONST 5) = #<COMPILED-CLOSURE LOADFILE-1>
(CONST 6) = *STANDARD-OUTPUT*
(CONST 7) = #(NIL)
(CONST 8) = (#(ERROR 52) 1 . 1)
(CONST 9) = LOAD
(CONST 10) = ERRSET
(CONST 11) = "Load failed for ~A"
(CONST 12) = MERROR
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRSET *STANDARD-OUTPUT* $LOADPRINT)
59 byte-code instructions:
0     (CONST 0)                           ; 0
1     (BIND 1)                            ; SAVENO
3     (LOAD&JMPIFNOT 5 L12)
6     (GETVALUE&PUSH 2)                   ; $LOADPRINT
8     (CONST&PUSH 3)                      ; (NIL $LOADFILE)
9     (CALL2&JMPIF 4 L45)                 ; MEMQ
12    L12
12    (LOAD&JMPIFNOT 4 L22)
15    L15
15    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE LOADFILE-1>
16    (GETVALUE&PUSH 6)                   ; *STANDARD-OUTPUT*
18    (LOAD&PUSH 8)
19    (CALLSR 2 21)                       ; FUNCALL
22    L22
22    (LOAD&PUSH 6)
23    (CALLS1&PUSH 231)                   ; PATHNAME
25    (NIL&PUSH)
26    (TAGBODY-OPEN 7 L67)                ; #(NIL)
29    (HANDLER-OPEN 8 L52)                ; (#(ERROR 52) 1 . 1)
31    (LOAD&PUSH 16)
32    (CALLS1&PUSH 231)                   ; PATHNAME
34    (CALL1&PUSH 9)                      ; LOAD
36    (LIST 1)
38    (SKIP 4)
40    (TAGBODY-CLOSE)
41    (SKIP 1)
43    (JMP L74)
45    L45
45    (NIL&STORE 4)
47    (LOAD&JMPIFNOT 4 L22)
50    (JMP L15)
52    L52
52    (HANDLER-BEGIN&PUSH)
53    (LOAD 0)
54    (STOREI 0 0 4)
58    (GO-I 0 0 2 0)
63    L63
63    (LOAD&PUSH 4)
64    (CALLSR 0 29)                       ; ERROR
67    L67
67    (GETVALUE 10)                       ; ERRSET
69    (JMPIF L63)
71    (TAGBODY-CLOSE)
72    (SKIP 1)
74    L74
74    (PUSH)
75    (LOAD&JMPIF 0 L86)
78    (CONST&PUSH 11)                     ; "Load failed for ~A"
79    (LOAD&PUSH 2)
80    (PUSH-UNBOUND 1)
82    (CALLS1&PUSH 244)                   ; NAMESTRING
84    (CALL2 12)                          ; MERROR
86    L86
86    (LOAD&PUSH 1)
87    (PUSH-UNBOUND 1)
89    (CALLS1 244)                        ; NAMESTRING
91    (SKIP 2)
93    (UNBIND1)
94    (SKIP&RET 4)


Disassembly of function LOADFILE-1
(CONST 0) = 
" being loaded.
"
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CALLS1 139)                        ; TERPRI
3     (LOAD&PUSH 2)
4     (LOAD&PUSH 4)
5     (CALLS1 132)                        ; PRINC
7     (CONST&PUSH 0)                      ; " being loaded.
"
8     (LOAD&PUSH 4)
9     (PUSH-UNBOUND 2)
11    (CALLS1 137)                        ; WRITE-STRING
13    (LOAD 1)
14    (SKIP&RET 4)


Disassembly of function #:|(DEFUN $DIRECTORY (PATH) ...)-50|
(CONST 0) = $DIRECTORY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DIRECTORY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DIRECTORY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DIRECTORY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DIRECTORY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DIRECTORY
8     (SKIP&RET 1)


Disassembly of function $DIRECTORY
(CONST 0) = (MLIST)
(CONST 1) = NAMESTRING
(CONST 2) = $FILENAME_MERGE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MLIST)
1     (CONST&PUSH 1)                      ; NAMESTRING
2     (LOAD&PUSH 3)
3     (CALL1&PUSH 2)                      ; $FILENAME_MERGE
5     (PUSH-UNBOUND 3)
7     (CALLS1&PUSH 250)                   ; DIRECTORY
9     (CALLSR 0 22)                       ; MAPCAR
12    (CONS)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN TRUEFNAME (FILE) ...)-51|
(CONST 0) = TRUEFNAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRUEFNAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRUEFNAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRUEFNAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRUEFNAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRUEFNAME
8     (SKIP&RET 1)


Disassembly of function TRUEFNAME
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS1 246)                        ; PROBE-FILE
3     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MTRUENAME (STREAM) ...)-52|
(CONST 0) = MTRUENAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MTRUENAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTRUENAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MTRUENAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MTRUENAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MTRUENAME
8     (SKIP&RET 1)


Disassembly of function MTRUENAME
(CONST 0) = :NAME
(CONST 1) = UNEXPAND-PATHNAME
(CONST 2) = MFILE-OUT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; :NAME
2     (FUNCALL&PUSH 1)
4     (CALL1&PUSH 1)                      ; UNEXPAND-PATHNAME
6     (CALL1 2)                           ; MFILE-OUT
8     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN CARFILE (FILE) ...)-53|
(CONST 0) = CARFILE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CARFILE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CARFILE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CARFILE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CARFILE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CARFILE
8     (SKIP&RET 1)


Disassembly of function CARFILE
(CONST 0) = 3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 45 L11)             ; =
8     (LOAD 1)
9     (SKIP&RET 2)
11    L11
11    (LOAD 1)
12    (CDR)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO FILEPOS-CHECK NIL ...)-54|
(CONST 0) = FILEPOS-CHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FILEPOS-CHECK>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; FILEPOS-CHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FILEPOS-CHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FILEPOS-CHECK>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; FILEPOS-CHECK
10    (SKIP&RET 1)


Disassembly of function FILEPOS-CHECK
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = (IF SPECP (SETQ FILEPOS (FILEPOS FILE-OBJ)))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (IF SPECP (SETQ FILEPOS #))
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $KILL (FORM) ...)-55-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $KILL (FORM) ...)-55-2-1|>
(CONST 1) = $KILL
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $KILL (FORM) ...)-55-2-1|>
1     (CONST&PUSH 1)                      ; $KILL
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $KILL (FORM) ...)-55-2-1|
(CONST 0) = KILL1
(CONST 1) = $DONE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; KILL1
2     (LOAD&CDR&PUSH 2)
4     (CALLSR 0 24)                       ; MAPC
7     (CONST 1)                           ; $DONE
8     (SKIP&RET 2)


Disassembly of function #:|(DEFVAR $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES T ...)-56|
(CONST 0) = (SPECIAL $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES)
(CONST 1) = $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES
(CONST 2) = VARIABLE
(CONST 3) = 
"Prevents killing functional properties 
 of items which have been translated and loaded"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Prevents killing functional properties 
 of items which have been translated and loaded"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN KILL1 (X) ...)-57|
(CONST 0) = KILL1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KILL1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KILL1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KILL1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KILL1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KILL1
8     (SKIP&RET 1)


Disassembly of function KILL1
(CONST 0) = X
(CONST 1) = ALLBUTL
(CONST 2) = MEMQ
(CONST 3) = GETOPR
(CONST 4) = $LABELS
(CONST 5) = TIME
(CONST 6) = NODISP
(CONST 7) = (MLIST SIMP)
(CONST 8) = 0
(CONST 9) = $LINENUM
(CONST 10) = DCOUNT
(CONST 11) = ($VALUES $ARRAYS $ALIASES $RULES $PROPS $LET_RULE_PACKAGES)
(CONST 12) = KILL1
(CONST 13) = ($FUNCTIONS $MACROS $GRADEFS $DEPENDENCIES)
(CONST 14) = Y
(CONST 15) = $MYOPTIONS
(CONST 16) = $TELLRATS
(CONST 17) = TELLRATLIST
(CONST 18) = $RATWEIGHTS
(CONST 19) = *RATWEIGHTS
(CONST 20) = ((MLIST SIMP))
(CONST 21) = $FEATURES
(CONST 22) = FEATUREL
(CONST 23) = (MLIST SIMP)
(CONST 24) = $ALL
(CONST 25) = $INFOLISTS
(CONST 26) = ((MLIST SIMP))
(CONST 27) = $RATVARS
(CONST 28) = VARLIST
(CONST 29) = GENVAR
(CONST 30) = CHECKFACTORS
(CONST 31) = GREATORDER
(CONST 32) = LESSORDER
(CONST 33) = $GENSUMNUM
(CONST 34) = ((MLIST))
(CONST 35) = $WEIGHTLEVELS
(CONST 36) = ((MLIST SIMP))
(CONST 37) = ((MLIST))
(CONST 38) = $DONTFACTOR
(CONST 39) = $SETCHECK
(CONST 40) = KILLALLCONTEXTS
(CONST 41) = (($CLABELS . $INCHAR) ($DLABELS . $OUTCHAR) ($ELABELS . $LINECHAR))
(CONST 42) = ASSQ
(CONST 43) = GETLABELS*
(CONST 44) = $KILL
(CONST 45) = REMVALUE
(CONST 46) = ML-TYPEP
(CONST 47) = FIXNUM
(CONST 48) = REMLABELS
(CONST 49) = $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES
(CONST 50) = TRANSLATED
(CONST 51) = $ALIASES
(CONST 52) = NOUN
(CONST 53) = VERB
(CONST 54) = REMCOMPARY
(CONST 55) = $CONTEXTS
(CONST 56) = $KILLCONTEXT
(CONST 57) = $RULE
(CONST 58) = MGET
(CONST 59) = RULEOF
(CONST 60) = $REMRULE
(CONST 61) = $RULES
(CONST 62) = 1
(CONST 63) = DELQ
(CONST 64) = OPERATORS
(CONST 65) = RULECHK
(CONST 66) = TRACE
(CONST 67) = MACSYMA-UNTRACE
(CONST 68) = REMOVE-TRANSL-FUN-PROPS
(CONST 69) = REMOVE-TRANSL-ARRAY-FUN-PROPS
(CONST 70) = SYSCONST
(CONST 71) = MPROPS
(CONST 72) = (BINDTEST NONARRAY EVFUN EVFLAG OPERS SPECIAL MODE)
(CONST 73) = OPERS
(CONST 74) = SIMPARGS1
(CONST 75) = $PROPS
(CONST 76) = SP2
(CONST 77) = KILLFRAME
(CONST 78) = STRIPDOLLAR
(CONST 79) = ALPHABET
(CONST 80) = GETCHARN
(CONST 81) = ZL-DELETE
(CONST 82) = OP
(CONST 83) = MOPL
(CONST 84) = KILL-OPERATOR
(CONST 85) = REMALIAS
(CONST 86) = $ARRAYS
(CONST 87) = REMPROPCHK
(CONST 88) = $FUNCTIONS
(CONST 89) = ZL-ASSOC
(CONST 90) = $MACROS
(CONST 91) = $GRADEFS
(CONST 92) = GRAD
(CONST 93) = $DEPENDENCIES
(CONST 94) = MLIST
(CONST 95) = (HASHAR ARRAY)
(CONST 96) = MGETL
(CONST 97) = REMARRELEM
(CONST 98) = $ALLBUT
(CONST 99) = IMPROPER-ARG-ERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($DEPENDENCIES $GRADEFS $MACROS $FUNCTIONS $ARRAYS MOPL ALPHABET $PROPS OPERS
 $RULES $CONTEXTS $INFOLISTS FEATUREL $FEATURES Y $LABELS $ALIASES
 $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES X ALLBUTL)
writes special variables : 
($SETCHECK $DONTFACTOR $WEIGHTLEVELS $GENSUMNUM LESSORDER GREATORDER
 CHECKFACTORS GENVAR VARLIST $RATVARS $FEATURES $RATWEIGHTS *RATWEIGHTS
 TELLRATLIST DCOUNT $LINENUM $LABELS X)
553 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE 1)                        ; ALLBUTL
6     (JMPIFNOT L17)
8     (GETVALUE&PUSH 0)                   ; X
10    (GETVALUE&PUSH 1)                   ; ALLBUTL
12    (CALL2 2)                           ; MEMQ
14    (JMPIF1 L964)
17    L17
17    (GETVALUE&PUSH 0)                   ; X
19    (CALL1 3)                           ; GETOPR
21    (SETVALUE 0)                        ; X
23    (PUSH)
24    (JMPIFEQTO 4 L187)                  ; $LABELS
28    (GETVALUE&PUSH 0)                   ; X
30    (CONST&PUSH 11)                     ; ($VALUES $ARRAYS $ALIASES ...)
31    (CALL2&JMPIF 2 L250)                ; MEMQ
35    (GETVALUE&PUSH 0)                   ; X
37    (CONST&PUSH 13)                     ; ($FUNCTIONS $MACROS $GRADEFS ...)
38    (CALL2&JMPIF 2 L265)                ; MEMQ
42    (GETVALUE&PUSH 0)                   ; X
44    (CONST 15)                          ; $MYOPTIONS
45    (EQ)
46    (JMPIF1 L964)
49    (GETVALUE&PUSH 0)                   ; X
51    (JMPIFEQTO 16 L295)                 ; $TELLRATS
55    (GETVALUE&PUSH 0)                   ; X
57    (JMPIFEQTO 18 L303)                 ; $RATWEIGHTS
61    (GETVALUE&PUSH 0)                   ; X
63    (JMPIFEQTO 21 L314)                 ; $FEATURES
67    (GETVALUE&PUSH 0)                   ; X
69    (T)
70    (JMPIFEQ L336)
73    (GETVALUE&PUSH 0)                   ; X
75    (JMPIFEQTO 24 L336)                 ; $ALL
79    (GETVALUE&PUSH 0)                   ; X
81    (CONST&PUSH 41)                     ; (# # #)
83    (CALL2 42)                          ; ASSQ
85    (STORE 0)
86    (JMPIF L390)
89    (GETVALUE&PUSH 0)                   ; X
91    (CALL1&PUSH 46)                     ; ML-TYPEP
93    (JMPIFNOTEQTO 47 L104)              ; FIXNUM
96    (GETVALUE&PUSH 0)                   ; X
98    (CONST&PUSH 8)                      ; 0
99    (CALLSR&JMPIFNOT 1 47 L427)         ; <
104   L104
104   (GETVALUE 49)                       ; $DONT_KILL_SYMBOLS_WITH_LISP_SOURCE_FILES
106   (JMPIFNOT L138)
108   (GETVALUE&PUSH 0)                   ; X
110   (CALLS2&JMPIFNOT 6 L138)            ; SYMBOLP
113   (GETVALUE&PUSH 0)                   ; X
115   (CONST&PUSH 50)                     ; TRANSLATED
117   (PUSH-UNBOUND 1)
119   (CALLS2 132)                        ; GET
121   (JMPIF1 L964)
124   (GETVALUE&PUSH 0)                   ; X
126   (CALLS1&JMPIFNOT 80 L138)           ; FBOUNDP
129   (GETVALUE 0)                        ; X
131   (SYMBOL-FUNCTION)
132   (PUSH)
133   (CALLS2 9)                          ; COMPILED-FUNCTION-P
135   (JMPIF1 L964)
138   L138
138   (GETVALUE 0)                        ; X
140   (JMPIFCONSP L836)
143   (GETVALUE&PUSH 0)                   ; X
145   (GETVALUE 51)                       ; $ALIASES
147   (CDR&PUSH)
148   (CALL2&JMPIFNOT 2 L160)             ; MEMQ
151   (GETVALUE&PUSH 0)                   ; X
153   (CONST&PUSH 52)                     ; NOUN
155   (PUSH-UNBOUND 1)
157   (CALLS2&JMPIF 132 L168)             ; GET
160   L160
160   (GETVALUE&PUSH 0)                   ; X
162   (CONST&PUSH 53)                     ; VERB
164   (PUSH-UNBOUND 1)
166   (CALLS2 132)                        ; GET
168   L168
168   (STORE 0)
169   (GETVALUE 1)                        ; ALLBUTL
171   (JMPIFNOT L444)
174   (LOAD&PUSH 0)
175   (GETVALUE&PUSH 1)                   ; ALLBUTL
177   (CALL2&JMPIFNOT 2 L444)             ; MEMQ
181   L181
181   (NIL)
182   (SKIP 1)
184   (JMP L966)
187   L187
187   (GETVALUE 4)                        ; $LABELS
189   (CDR&PUSH)
190   (NIL&PUSH)
191   (JMP L229)
193   L193
193   (LOAD&PUSH 2)
194   (LOAD&PUSH 1)
195   (NIL)
196   (CONS&PUSH)
197   (CALLSR&STORE 2 35 2)               ; NCONC
201   (JMP L227)
203   L203
203   (LOAD&CAR&STORE 1 0)
206   (GETVALUE 1)                        ; ALLBUTL
208   (JMPIFNOT L216)
210   (LOAD&PUSH 0)
211   (GETVALUE&PUSH 1)                   ; ALLBUTL
213   (CALL2&JMPIF 2 L193)                ; MEMQ
216   L216
216   (LOAD&PUSH 0)
217   (CALLS1 83)                         ; MAKUNBOUND
219   (LOAD&PUSH 0)
220   (CONST&PUSH 5)                      ; TIME
221   (CALLS2 137)                        ; REMPROP
223   (LOAD&PUSH 0)
224   (CONST&PUSH 6)                      ; NODISP
225   (CALLS2 137)                        ; REMPROP
227   L227
227   (LOAD&CDR&STORE 1)
229   L229
229   (LOAD&PUSH 1)
230   (CALLS1&JMPIFNOT 146 L203)          ; ENDP
233   (SKIP 2)
235   (CONST&PUSH 7)                      ; (MLIST SIMP)
236   (LOAD 1)
237   (CONS)
238   (SETVALUE 4)                        ; $LABELS
240   (CONST 8)                           ; 0
241   (SETVALUE 9)                        ; $LINENUM
243   (SETVALUE 10)                       ; DCOUNT
245   (SKIP 1)
247   (JMP L966)
250   L250
250   (CONST&SYMBOL-FUNCTION&PUSH 12)     ; KILL1
252   (GETVALUE&PUSH 0)                   ; X
254   (CALLS1 78)                         ; SYMBOL-VALUE
256   (CDR&PUSH)
257   (CALLSR 0 24)                       ; MAPC
260   (SKIP 1)
262   (JMP L966)
265   L265
265   (GETVALUE&PUSH 0)                   ; X
267   (CALLS1 78)                         ; SYMBOL-VALUE
269   (CDR&PUSH)
270   (LOAD&PUSH 0)
271   L271
271   (LOAD&PUSH 0)
272   (CALLS1&JMPIF 146 L419)             ; ENDP
276   (LOAD&CAR&PUSH 0)
278   (LOAD 0)
279   (BIND 14)                           ; Y
281   (GETVALUE 14)                       ; Y
283   (CAR)
284   (CAR&PUSH)
285   (JSR L0)
288   (UNBIND1)
289   (SKIP 1)
291   (LOAD&CDR&STORE 0)
293   (JMP L271)
295   L295
295   (NIL)
296   (SETVALUE 17)                       ; TELLRATLIST
298   (SKIP 1)
300   (JMP L966)
303   L303
303   (NIL)
304   (SETVALUE 19)                       ; *RATWEIGHTS
306   (CONST 20)                          ; ((MLIST SIMP))
307   (SETVALUE 18)                       ; $RATWEIGHTS
309   (SKIP 1)
311   (JMP L966)
314   L314
314   (GETVALUE 21)                       ; $FEATURES
316   (CDR&PUSH)
317   (GETVALUE&PUSH 22)                  ; FEATUREL
319   (CALLS2&JMPIF 2 L181)               ; EQUAL
323   (CONST&PUSH 23)                     ; (MLIST SIMP)
324   (GETVALUE&PUSH 22)                  ; FEATUREL
326   (CALLS1 158)                        ; COPY-LIST
328   (CONS)
329   (SETVALUE 21)                       ; $FEATURES
331   (SKIP 1)
333   (JMP L966)
336   L336
336   (CONST&SYMBOL-FUNCTION&PUSH 12)     ; KILL1
338   (GETVALUE 25)                       ; $INFOLISTS
340   (CDR&PUSH)
341   (CALLSR 0 24)                       ; MAPC
344   (CONST 26)                          ; ((MLIST SIMP))
346   (SETVALUE 27)                       ; $RATVARS
348   (NIL)
349   (SETVALUE 28)                       ; VARLIST
351   (SETVALUE 29)                       ; GENVAR
353   (SETVALUE 30)                       ; CHECKFACTORS
355   (SETVALUE 31)                       ; GREATORDER
357   (SETVALUE 32)                       ; LESSORDER
359   (CONST 8)                           ; 0
360   (SETVALUE 33)                       ; $GENSUMNUM
362   (CONST 34)                          ; ((MLIST))
364   (SETVALUE 35)                       ; $WEIGHTLEVELS
366   (NIL)
367   (SETVALUE 19)                       ; *RATWEIGHTS
369   (CONST 36)                          ; ((MLIST SIMP))
371   (SETVALUE 18)                       ; $RATWEIGHTS
373   (NIL)
374   (SETVALUE 17)                       ; TELLRATLIST
376   (CONST 37)                          ; ((MLIST))
378   (SETVALUE 38)                       ; $DONTFACTOR
380   (NIL)
381   (SETVALUE 39)                       ; $SETCHECK
383   (CALL0 40)                          ; KILLALLCONTEXTS
385   (SKIP 1)
387   (JMP L966)
390   L390
390   (CDR&PUSH)
391   (CALLS1&PUSH 91)                    ; EVAL
393   (NIL&PUSH)
394   (CALL2&PUSH 43)                     ; GETLABELS*
396   (LOAD&PUSH 0)
397   (JMP L415)
399   L399
399   (LOAD&CAR&PUSH 0)
401   (LOAD 0)
402   (BIND 14)                           ; Y
404   (GETVALUE&PUSH 14)                  ; Y
406   (CONST&PUSH 44)                     ; $KILL
408   (CALL2 45)                          ; REMVALUE
410   (UNBIND1)
411   (SKIP 1)
413   (LOAD&CDR&STORE 0)
415   L415
415   (LOAD&PUSH 0)
416   (CALLS1&JMPIFNOT 146 L399)          ; ENDP
419   L419
419   (SKIP 1)
421   (POP)
422   (SKIP 1)
424   (JMP L966)
427   L427
427   (GETVALUE&PUSH 0)                   ; X
429   (CALL1 48)                          ; REMLABELS
431   (SKIP 1)
433   (JMP L966)
436   L436
436   (PUSH)
437   (GETVALUE&PUSH 0)                   ; X
439   (CALL2 60)                          ; $REMRULE
441   (UNBIND1)
442   (JMP L497)
444   L444
444   (GETVALUE&PUSH 0)                   ; X
446   (CONST&PUSH 44)                     ; $KILL
448   (CALL2 45)                          ; REMVALUE
450   (GETVALUE&PUSH 0)                   ; X
452   (CALL1 54)                          ; REMCOMPARY
454   (GETVALUE&PUSH 0)                   ; X
456   (GETVALUE 55)                       ; $CONTEXTS
458   (CDR&PUSH)
459   (CALL2&JMPIFNOT 2 L466)             ; MEMQ
462   (GETVALUE&PUSH 0)                   ; X
464   (CALL1 56)                          ; $KILLCONTEXT
466   L466
466   (GETVALUE&PUSH 0)                   ; X
468   (CONST&PUSH 57)                     ; $RULE
470   (CALL2&JMPIFNOT 58 L497)            ; MGET
473   (GETVALUE&PUSH 0)                   ; X
475   (CALL1 59)                          ; RULEOF
477   (BIND 14)                           ; Y
479   (GETVALUE 14)                       ; Y
481   (JMPIF L436)
483   (GETVALUE&PUSH 0)                   ; X
485   (CALLS1 84)                         ; FMAKUNBOUND
487   (GETVALUE&PUSH 0)                   ; X
489   (GETVALUE&PUSH 61)                  ; $RULES
491   (CONST&PUSH 62)                     ; 1
493   (CALL 3 63)                         ; DELQ
496   (UNBIND1)
497   L497
497   (GETVALUE&PUSH 0)                   ; X
499   (CONST&PUSH 64)                     ; OPERATORS
501   (PUSH-UNBOUND 1)
503   (CALLS2&JMPIFNOT 132 L516)          ; GET
506   (GETVALUE&PUSH 0)                   ; X
508   (CALL1&JMPIFNOT 65 L516)            ; RULECHK
511   (GETVALUE&PUSH 0)                   ; X
513   (CONST&PUSH 24)                     ; $ALL
514   (CALL2 60)                          ; $REMRULE
516   L516
516   (GETVALUE&PUSH 0)                   ; X
518   (CONST&PUSH 66)                     ; TRACE
520   (CALL2&JMPIFNOT 58 L527)            ; MGET
523   (GETVALUE&PUSH 0)                   ; X
525   (CALL1 67)                          ; MACSYMA-UNTRACE
527   L527
527   (GETVALUE&PUSH 0)                   ; X
529   (CONST&PUSH 50)                     ; TRANSLATED
531   (PUSH-UNBOUND 1)
533   (CALLS2&JMPIFNOT 132 L544)          ; GET
536   (GETVALUE&PUSH 0)                   ; X
538   (CALL1 68)                          ; REMOVE-TRANSL-FUN-PROPS
540   (GETVALUE&PUSH 0)                   ; X
542   (CALL1 69)                          ; REMOVE-TRANSL-ARRAY-FUN-PROPS
544   L544
544   (GETVALUE&PUSH 0)                   ; X
546   (CONST&PUSH 70)                     ; SYSCONST
548   (PUSH-UNBOUND 1)
550   (CALLS2&JMPIF 132 L559)             ; GET
553   (GETVALUE&PUSH 0)                   ; X
555   (CONST&PUSH 71)                     ; MPROPS
557   (CALLS2 137)                        ; REMPROP
559   L559
559   (CONST&PUSH 72)                     ; (BINDTEST NONARRAY EVFUN ...)
561   (NIL&PUSH)
562   (JMP L574)
564   L564
564   (LOAD&CAR&STORE 1 0)
567   (GETVALUE&PUSH 0)                   ; X
569   (LOAD&PUSH 1)
570   (CALLS2 137)                        ; REMPROP
572   (LOAD&CDR&STORE 1)
574   L574
574   (LOAD&PUSH 1)
575   (CALLS1&JMPIFNOT 146 L564)          ; ENDP
578   (SKIP 2)
580   (GETVALUE&PUSH 73)                  ; OPERS
582   (NIL&PUSH)
583   (JMP L613)
585   L585
585   (LOAD&CAR&STORE 1 0)
588   (GETVALUE&PUSH 0)                   ; X
590   (LOAD&PUSH 1)
591   (CALLS2&JMPIFNOT 137 L611)          ; REMPROP
594   (GETVALUE&PUSH 0)                   ; X
596   (CONST&PUSH 64)                     ; OPERATORS
598   (PUSH-UNBOUND 1)
600   (CALLS2&PUSH 132)                   ; GET
602   (JMPIFNOTEQTO 74 L611)              ; SIMPARGS1
605   (GETVALUE&PUSH 0)                   ; X
607   (CONST&PUSH 64)                     ; OPERATORS
609   (CALLS2 137)                        ; REMPROP
611   L611
611   (LOAD&CDR&STORE 1)
613   L613
613   (LOAD&PUSH 1)
614   (CALLS1&JMPIFNOT 146 L585)          ; ENDP
617   (SKIP 2)
619   (GETVALUE&PUSH 0)                   ; X
621   (GETVALUE 75)                       ; $PROPS
623   (CDR&PUSH)
624   (CALL2&JMPIFNOT 2 L663)             ; MEMQ
627   (GETVALUE&PUSH 0)                   ; X
629   (CONST&PUSH 76)                     ; SP2
631   (CALLS2 137)                        ; REMPROP
633   (GETVALUE&PUSH 0)                   ; X
635   (CALL1 77)                          ; KILLFRAME
637   (GETVALUE&PUSH 0)                   ; X
639   (CALL1 78)                          ; STRIPDOLLAR
641   (BIND 14)                           ; Y
643   (GETVALUE&PUSH 14)                  ; Y
645   (CONST&PUSH 79)                     ; ALPHABET
647   (CALLS2 137)                        ; REMPROP
649   (GETVALUE&PUSH 14)                  ; Y
651   (CONST&PUSH 62)                     ; 1
653   (CALL2&PUSH 80)                     ; GETCHARN
655   (GETVALUE&PUSH 79)                  ; ALPHABET
657   (CONST&PUSH 62)                     ; 1
659   (CALL 3 81)                         ; ZL-DELETE
662   (UNBIND1)
663   L663
663   (GETVALUE&PUSH 0)                   ; X
665   (CONST&PUSH 82)                     ; OP
667   (PUSH-UNBOUND 1)
669   (CALLS2 132)                        ; GET
671   (BIND 14)                           ; Y
673   (GETVALUE 14)                       ; Y
675   (JMPIFNOT L695)
677   (PUSH)
678   (GETVALUE&PUSH 83)                  ; MOPL
680   (CALL2&JMPIF 2 L695)                ; MEMQ
683   (GETVALUE&PUSH 14)                  ; Y
685   (GETVALUE 75)                       ; $PROPS
687   (CDR&PUSH)
688   (CALL2&JMPIFNOT 2 L695)             ; MEMQ
691   (GETVALUE&PUSH 0)                   ; X
693   (CALL1 84)                          ; KILL-OPERATOR
695   L695
695   (UNBIND1)
696   (GETVALUE&PUSH 0)                   ; X
698   (NIL&PUSH)
699   (CALL2 85)                          ; REMALIAS
701   (GETVALUE&PUSH 0)                   ; X
703   (GETVALUE&PUSH 86)                  ; $ARRAYS
705   (CONST&PUSH 62)                     ; 1
707   (CALL 3 63)                         ; DELQ
710   (GETVALUE&PUSH 0)                   ; X
712   (CALL1 87)                          ; REMPROPCHK
714   (GETVALUE&PUSH 0)                   ; X
716   (NIL)
717   (CONS&PUSH)
718   (GETVALUE&PUSH 88)                  ; $FUNCTIONS
720   (CALL2&PUSH 89)                     ; ZL-ASSOC
722   (GETVALUE&PUSH 88)                  ; $FUNCTIONS
724   (CONST&PUSH 62)                     ; 1
726   (CALL 3 81)                         ; ZL-DELETE
729   (GETVALUE&PUSH 0)                   ; X
731   (NIL)
732   (CONS&PUSH)
733   (GETVALUE&PUSH 90)                  ; $MACROS
735   (CALL2&PUSH 89)                     ; ZL-ASSOC
737   (GETVALUE&PUSH 90)                  ; $MACROS
739   (CONST&PUSH 62)                     ; 1
741   (CALL 3 81)                         ; ZL-DELETE
744   (GETVALUE&PUSH 0)                   ; X
746   (NIL)
747   (CONS&PUSH)
748   (GETVALUE&PUSH 91)                  ; $GRADEFS
750   (CALL2 89)                          ; ZL-ASSOC
752   (BIND 14)                           ; Y
754   (GETVALUE 14)                       ; Y
756   (JMPIFNOT L773)
758   (GETVALUE&PUSH 0)                   ; X
760   (CONST&PUSH 92)                     ; GRAD
762   (CALLS2 137)                        ; REMPROP
764   (GETVALUE&PUSH 14)                  ; Y
766   (GETVALUE&PUSH 91)                  ; $GRADEFS
768   (CONST&PUSH 62)                     ; 1
770   (CALL 3 81)                         ; ZL-DELETE
773   L773
773   (UNBIND1)
774   (GETVALUE&PUSH 0)                   ; X
776   (NIL)
777   (CONS&PUSH)
778   (GETVALUE&PUSH 93)                  ; $DEPENDENCIES
780   (CALL2&PUSH 89)                     ; ZL-ASSOC
782   (GETVALUE&PUSH 93)                  ; $DEPENDENCIES
784   (CONST&PUSH 62)                     ; 1
786   (CALL 3 81)                         ; ZL-DELETE
789   (LOAD 0)
790   (JMPIFNOT1 L964)
793   (PUSH)
794   (JSR L0)
797   (SKIP 1)
799   (JMP L966)
802   L802
802   (GETVALUE 0)                        ; X
804   (CDR)
805   (CDR)
806   (CAR)
807   (BIND 9)                            ; $LINENUM
809   (GETVALUE 0)                        ; X
811   (CDR)
812   (CDR)
813   (CAR&PUSH)
814   (GETVALUE 0)                        ; X
816   (CDR)
817   (CAR&PUSH)
818   (CALLSR&PUSH 1 54)                  ; -
821   (CALL1 48)                          ; REMLABELS
823   (JMP L947)
826   L826
826   (PUSH)
827   (GETVALUE&PUSH 0)                   ; X
829   (CALL2 97)                          ; REMARRELEM
831   (SKIP 1)
833   (JMP L966)
836   L836
836   (GETVALUE 0)                        ; X
838   (CAR)
839   (CAR&PUSH)
840   (JMPIFNOTEQTO 94 L898)              ; MLIST
843   (GETVALUE 0)                        ; X
845   (CDR)
846   (CAR&PUSH)
847   (CALL1&PUSH 46)                     ; ML-TYPEP
849   (JMPIFNOTEQTO 47 L898)              ; FIXNUM
852   (GETVALUE 0)                        ; X
854   (CDR)
855   (CDR)
856   (JMPIF L874)
858   (GETVALUE&PUSH 0)                   ; X
860   (GETVALUE 0)                        ; X
862   (CDR)
863   (CAR&PUSH)
864   (NIL)
865   (CONS&PUSH)
866   (CALLSR 2 34)                       ; APPEND
869   (SETVALUE 0)                        ; X
871   (JMPIF L802)
874   L874
874   (GETVALUE 0)                        ; X
876   (CDR)
877   (CDR)
878   (CAR&PUSH)
879   (CALL1&PUSH 46)                     ; ML-TYPEP
881   (JMPIFNOTEQTO 47 L898)              ; FIXNUM
884   (GETVALUE 0)                        ; X
886   (CDR)
887   (CAR&PUSH)
888   (GETVALUE 0)                        ; X
890   (CDR)
891   (CDR)
892   (CAR&PUSH)
893   (CALLSR&JMPIFNOT 1 48 L802)         ; >
898   L898
898   (GETVALUE 0)                        ; X
900   (CAR)
901   (CAR&PUSH)
902   (CONST&PUSH 95)                     ; (HASHAR ARRAY)
904   (CALL2 96)                          ; MGETL
906   (STORE 0)
907   (JMPIF L826)
910   (GETVALUE 0)                        ; X
912   (CAR)
913   (CAR&PUSH)
914   (JMPIFNOTEQTO 98 L954)              ; $ALLBUT
917   (GETVALUE 0)                        ; X
919   (CDR&PUSH)
920   (NIL&PUSH)
921   (JMP L932)
923   L923
923   (LOAD&CAR&STORE 1 0)
926   (PUSH)
927   (CALLS2&JMPIFNOT 6 L952)            ; SYMBOLP
930   (LOAD&CDR&STORE 1)
932   L932
932   (LOAD&PUSH 1)
933   (CALLS1&JMPIFNOT 146 L923)          ; ENDP
936   (SKIP 2)
938   (GETVALUE 0)                        ; X
940   (CDR)
941   (BIND 1)                            ; ALLBUTL
943   (T&PUSH)
944   (JSR L0)
947   L947
947   (UNBIND1)
948   (SKIP 1)
950   (JMP L966)
952   L952
952   (SKIP 2)
954   L954
954   (GETVALUE&PUSH 0)                   ; X
956   (CONST&PUSH 44)                     ; $KILL
958   (CALL2 99)                          ; IMPROPER-ARG-ERR
960   (SKIP 1)
962   (JMP L966)
964   L964
964   (SKIP 1)
966   L966
966   (UNBIND1)
967   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN REMLABELS (N) ...)-58|
(CONST 0) = REMLABELS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMLABELS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMLABELS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMLABELS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMLABELS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMLABELS
8     (SKIP&RET 1)


Disassembly of function REMLABELS
(CONST 0) = X
(CONST 1) = $INCHAR
(CONST 2) = EXPLODEN
(CONST 3) = $OUTCHAR
(CONST 4) = $LINECHAR
(CONST 5) = $LINENUM
(CONST 6) = MEXPLODEN
(CONST 7) = IMPLODE
(CONST 8) = $KILL
(CONST 9) = REMVALUE
(CONST 10) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $LINENUM $LINECHAR $OUTCHAR $INCHAR)
writes special variables : (X $LINENUM)
43 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; X
4     (GETVALUE&PUSH 1)                   ; $INCHAR
6     (CALL1&PUSH 2)                      ; EXPLODEN
8     (GETVALUE&PUSH 3)                   ; $OUTCHAR
10    (CALL1&PUSH 2)                      ; EXPLODEN
12    (GETVALUE&PUSH 4)                   ; $LINECHAR
14    (CALL1&PUSH 2)                      ; EXPLODEN
16    (LIST 3)
18    (STORE 3)
19    (JMP L27)
21    L21
21    (GETVALUE&PUSH 5)                   ; $LINENUM
23    (CALLS2 151)                        ; 1-
25    (SETVALUE 5)                        ; $LINENUM
27    L27
27    (GETVALUE&PUSH 5)                   ; $LINENUM
29    (CALL1 6)                           ; MEXPLODEN
31    (SETVALUE 0)                        ; X
33    (LOAD&PUSH 3)
34    (LOAD&JMPIFNOT 0 L54)
37    L37
37    (LOAD&CAR&PUSH 0)
39    (GETVALUE&PUSH 0)                   ; X
41    (CALLSR&PUSH 2 34)                  ; APPEND
44    (CALL1&PUSH 7)                      ; IMPLODE
46    (CONST&PUSH 8)                      ; $KILL
47    (CALL2 9)                           ; REMVALUE
49    (LOAD&CDR&STORE 0)
51    (LOAD&JMPIF 0 L37)
54    L54
54    (SKIP 1)
56    (LOAD&DEC&STORE 5)
58    (PUSH)
59    (CALLS2&JMPIF 147 L69)              ; MINUSP
62    (GETVALUE&PUSH 5)                   ; $LINENUM
64    (CONST&PUSH 10)                     ; 0
65    (CALLSR&JMPIFNOT 1 45 L21)          ; =
69    L69
69    (NIL)
70    (UNBIND1)
71    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN REMVALUE (X FN) ...)-59|
(CONST 0) = REMVALUE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMVALUE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMVALUE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMVALUE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMVALUE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMVALUE
8     (SKIP&RET 1)


Disassembly of function REMVALUE
(CONST 0) = X
(CONST 1) = IMPROPER-ARG-ERR
(CONST 2) = Y
(CONST 3) = $VALUES
(CONST 4) = MEMQ
(CONST 5) = $LABELS
(CONST 6) = 1
(CONST 7) = DELQ
(CONST 8) = TIME
(CONST 9) = NODISP
(CONST 10) = DCOUNT
(CONST 11) = SPECIAL
(CONST 12) = TRANSP
(CONST 13) = SET
(CONST 14) = $DEFAULT_LET_RULE_PACKAGE
(CONST 15) = "Warning: Illegal REMVALUE attempt:~%~M"
(CONST 16) = MTELL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TRANSP DCOUNT Y $LABELS $VALUES X)
writes special variables : (DCOUNT Y)
79 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIFNOT 6 L76)             ; SYMBOLP
9     (GETVALUE&PUSH 0)                   ; X
11    (CALLS1&JMPIFNOT 79 L129)           ; BOUNDP
15    (NIL)
16    (BIND 2)                            ; Y
18    (GETVALUE&PUSH 0)                   ; X
20    (GETVALUE 3)                        ; $VALUES
22    (CDR&PUSH)
23    (CALL2 4)                           ; MEMQ
25    (SETVALUE 2)                        ; Y
27    (JMPIF L37)
29    (GETVALUE&PUSH 0)                   ; X
31    (GETVALUE 5)                        ; $LABELS
33    (CDR&PUSH)
34    (CALL2&JMPIFNOT 4 L93)              ; MEMQ
37    L37
37    (GETVALUE 2)                        ; Y
39    (JMPIF L83)
41    (GETVALUE&PUSH 0)                   ; X
43    (GETVALUE&PUSH 5)                   ; $LABELS
45    (CONST&PUSH 6)                      ; 1
46    (CALL 3 7)                          ; DELQ
49    (GETVALUE&PUSH 0)                   ; X
51    (CONST&PUSH 8)                      ; TIME
52    (CALLS2 137)                        ; REMPROP
54    (GETVALUE&PUSH 0)                   ; X
56    (CONST&PUSH 9)                      ; NODISP
57    (CALLS2 137)                        ; REMPROP
59    (GETVALUE&PUSH 10)                  ; DCOUNT
61    (CALLS2&JMPIF 145 L70)              ; ZEROP
64    (GETVALUE&PUSH 10)                  ; DCOUNT
66    (CALLS2 151)                        ; 1-
68    (SETVALUE 10)                       ; DCOUNT
70    L70
70    (GETVALUE&PUSH 0)                   ; X
72    (CALLS1 83)                         ; MAKUNBOUND
74    (JMP L111)
76    L76
76    (GETVALUE&PUSH 0)                   ; X
78    (LOAD&PUSH 5)
79    (CALL2 1)                           ; IMPROPER-ARG-ERR
81    (JMP L130)
83    L83
83    (GETVALUE&PUSH 0)                   ; X
85    (GETVALUE&PUSH 3)                   ; $VALUES
87    (CONST&PUSH 6)                      ; 1
88    (CALL 3 7)                          ; DELQ
91    (JMP L70)
93    L93
93    (GETVALUE&PUSH 0)                   ; X
95    (CONST&PUSH 11)                     ; SPECIAL
96    (PUSH-UNBOUND 1)
98    (CALLS2&JMPIF 132 L70)              ; GET
101   (GETVALUE 12)                       ; TRANSP
103   (JMPIFNOT L115)
105   (GETVALUE&PUSH 0)                   ; X
107   (GETVALUE&PUSH 0)                   ; X
109   (CALL2 13)                          ; SET
111   L111
111   (T)
112   (UNBIND1)
113   (JMP L130)
115   L115
115   (GETVALUE&PUSH 0)                   ; X
117   (JMPIFEQTO 14 L111)                 ; $DEFAULT_LET_RULE_PACKAGE
120   (CONST&PUSH 15)                     ; "Warning: Illegal REMVALUE attempt:~%~M"
121   (GETVALUE&PUSH 0)                   ; X
123   (CALL2 16)                          ; MTELL
125   (NIL)
126   (UNBIND1)
127   (JMP L130)
129   L129
129   (NIL)
130   L130
130   (UNBIND1)
131   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RULEOF (RULE) ...)-60|
(CONST 0) = RULEOF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RULEOF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RULEOF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RULEOF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RULEOF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RULEOF
8     (SKIP&RET 1)


Disassembly of function RULEOF
(CONST 0) = RULEOF
(CONST 1) = MGET
(CONST 2) = $RULE
(CONST 3) = RULES
(CONST 4) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; RULEOF
2     (CALL2 1)                           ; MGET
4     (JMPIF1 L35)
6     (LOAD&PUSH 1)
7     (CONST&PUSH 2)                      ; $RULE
8     (CALL2 1)                           ; MGET
10    (CDR)
11    (CAR)
12    (CAR)
13    (CAR&PUSH)
14    (NIL&PUSH)
15    (LOAD&PUSH 1)
16    (CONST&PUSH 3)                      ; RULES
17    (PUSH-UNBOUND 1)
19    (CALLS2&STORE 132 0)                ; GET
22    (JMPIFNOT1 L33)
24    (LOAD&PUSH 3)
25    (LOAD&PUSH 1)
26    (CALL2 4)                           ; MEMQ
28    (JMPIFNOT1 L33)
30    (LOAD 1)
31    (SKIP&RET 4)
33    L33
33    (SKIP&RET 4)
35    L35
35    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $DEBUGMODE (X) ...)-61|
(CONST 0) = $DEBUGMODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DEBUGMODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DEBUGMODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DEBUGMODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DEBUGMODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DEBUGMODE
8     (SKIP&RET 1)


Disassembly of function $DEBUGMODE
(CONST 0) = X
(CONST 1) = DEBUGMODE1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 1)                           ; DEBUGMODE1
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN DEBUGMODE1 (ASSIGN-VAR Y) ...)-62|
(CONST 0) = DEBUGMODE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEBUGMODE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEBUGMODE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEBUGMODE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEBUGMODE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEBUGMODE1
8     (SKIP&RET 1)


Disassembly of function DEBUGMODE1
(CONST 0) = Y
(CONST 1) = *RSET
(CONST 2) = DEBUG
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (Y)
writes special variables : (DEBUG *RSET)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Y
3     (GETVALUE 0)                        ; Y
5     (SETVALUE 1)                        ; *RSET
7     (SETVALUE 2)                        ; DEBUG
9     (UNBIND1)
10    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RETRIEVE1 (A B &AUX ...) ...)-63|
(CONST 0) = RETRIEVE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RETRIEVE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RETRIEVE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RETRIEVE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RETRIEVE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RETRIEVE1
8     (SKIP&RET 1)


Disassembly of function RETRIEVE1
(CONST 0) = *MREAD-PROMPT*
(CONST 1) = MACSYMA-QUIT
(CONST 2) = *TERMINAL-IO*
(CONST 3) = (NIL)
(CONST 4) = DBM-READ
(CONST 5) = BREAK-COMMAND
(CONST 6) = BREAK-CALL
(CONST 7) = :RESUME
(CONST 8) = $EXIT
(CONST 9) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*TERMINAL-IO*)
42 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; *MREAD-PROMPT*
3     (NIL&PUSH)
4     (CONST 1)                           ; MACSYMA-QUIT
5     (CATCH-OPEN L54)
7     (LOAD&JMPIFNOT 9 L37)
10    (JMP L39)
12    L12
12    (CONST 8)                           ; $EXIT
13    (SKIP 5)
15    (SKIPSP 2 1)
18    (JMP L60)
20    L20
20    (LOAD&CAR&PUSH 3)
22    (LOAD&CDR&PUSH 4)
24    (CONST&PUSH 5)                      ; BREAK-COMMAND
25    (CALL&PUSH 3 6)                     ; BREAK-CALL
28    (LOAD&PUSH 0)
29    (JMPIFEQTO 7 L12)                   ; :RESUME
32    (SKIP 1)
34    (LOAD&JMPIF 9 L39)
37    L37
37    (GETVALUE 2)                        ; *TERMINAL-IO*
39    L39
39    (PUSH)
40    (NIL&PUSH)
41    (CONST&PUSH 3)                      ; (NIL)
42    (CALL 3 4)                          ; DBM-READ
45    (STORE 3)
46    (JMPIFATOM L53)
48    (LOAD&CAR&PUSH 3)
50    (CALLS2&JMPIF 141 L20)              ; KEYWORDP
53    L53
53    (CATCH-CLOSE)
54    L54
54    (CONST&PUSH 9)                      ; 2
55    (LOAD&PUSH 1)
56    (CALLS1 148)                        ; NTH
58    (SKIP 1)
60    L60
60    (UNBIND1)
61    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN ERRBREAK (Y) ...)-64|
(CONST 0) = ERRBREAK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERRBREAK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERRBREAK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERRBREAK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERRBREAK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERRBREAK
8     (SKIP&RET 1)


Disassembly of function ERRBREAK
(CONST 0) = Y
(CONST 1) = DEBUG
(CONST 2) = BRKLVL
(CONST 3) = VARLIST
(CONST 4) = GENVAR
(CONST 5) = BINDLIST
(CONST 6) = LOCLIST
(CONST 7) = LINELABLE
(CONST 8) = X
(CONST 9) = ^Q
(CONST 10) = ^W
(CONST 11) = $%%
(CONST 12) = $BACKTRACE
(CONST 13) = OLDST
(CONST 14) = ERRBREAK1
(CONST 15) = ERRSET
(CONST 16) = RUNTIME
(CONST 17) = (MLIST SIMP)
(CONST 18) = BAKTRCL
(CONST 19) = ^R
(CONST 20) = DSKFNP
(CONST 21) = NOPRINT
(CONST 22) = MTERPRI
(CONST 23) = MACSYMA-BREAK
(CONST 24) = ERROR-BREAK
(CONST 25) = " level "
(CONST 26) = " Type EXIT; to quit, HELP; for more help."
(CONST 27) = STATE-PDL
(CONST 28) = #(NIL)
(CONST 29) = (#(ERROR 192) 3 . 2)
(CONST 30) = "_ "
(CONST 31) = "(debug) "
(CONST 32) = RETRIEVE1
(CONST 33) = $EXIT
(CONST 34) = TIMEORG
(CONST 35) = EXIT
(CONST 36) = $LISP
(CONST 37) = LISP
(CONST 38) = $TOPLEVEL
(CONST 39) = MBREAK
(CONST 40) = ST
(CONST 41) = REPHRASE
(CONST 42) = $LINENUM
(CONST 43) = CONTINUE
(CONST 44) = #:|Back to the break|
(CONST 45) = DISPFLAG
(CONST 46) = $DISPFLAG
(CONST 47) = MEVAL
(CONST 48) = DISPLA
(CONST 49) = ERRLFUN1
(CONST 50) = #:|(Still in break loop)|
(CONST 51) = "Exited from the break "
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(ERRSET DISPFLAG $%% $LINENUM X STATE-PDL Y DSKFNP ^R BAKTRCL LINELABLE LOCLIST
 BINDLIST GENVAR VARLIST BRKLVL DEBUG)
writes special variables : ($LINENUM X ^R $BACKTRACE $%% ERRSET)
242 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Y
3     (GETVALUE 1)                        ; DEBUG
5     (JMPIFNOT L408)
8     (GETVALUE&PUSH 2)                   ; BRKLVL
10    (CALLS2 150)                        ; 1+
12    (BIND 2)                            ; BRKLVL
14    (GETVALUE 3)                        ; VARLIST
16    (BIND 3)                            ; VARLIST
18    (GETVALUE 4)                        ; GENVAR
20    (BIND 4)                            ; GENVAR
22    (GETVALUE&PUSH 5)                   ; BINDLIST
24    (GETVALUE 6)                        ; LOCLIST
26    (CONS&PUSH)
27    (GETVALUE 7)                        ; LINELABLE
29    (BIND 7)                            ; LINELABLE
31    (NIL)
32    (BIND 8)                            ; X
34    (NIL)
35    (BIND 9)                            ; ^Q
37    (NIL)
38    (BIND 10)                           ; ^W
40    (PUSH-NIL 2)
42    (NIL)
43    (BIND 11)                           ; $%%
45    (NIL)
46    (BIND 12)                           ; $BACKTRACE
48    (NIL&PUSH)
49    (NIL)
50    (BIND 13)                           ; OLDST
52    (CONST 14)                          ; ERRBREAK1
53    (SETVALUE 15)                       ; ERRSET
55    (CALL0 16)                          ; RUNTIME
57    (STORE 10)
59    (CONST 11)                          ; $%%
60    (SETVALUE 11)                       ; $%%
62    (CONST&PUSH 17)                     ; (MLIST SIMP)
63    (GETVALUE&PUSH 18)                  ; BAKTRCL
65    (CALLS1 158)                        ; COPY-LIST
67    (CONS)
68    (SETVALUE 12)                       ; $BACKTRACE
70    (GETVALUE 19)                       ; ^R
72    (STORE 11)
74    (JMPIFNOT L79)
76    (GETVALUE 20)                       ; DSKFNP
78    (NOT)
79    L79
79    (SETVALUE 19)                       ; ^R
81    (GETVALUE&PUSH 0)                   ; Y
83    (JMPIFNOTEQTO 21 L153)              ; NOPRINT
87    (CALL0 22)                          ; MTERPRI
89    L89
89    (CONST 23)                          ; MACSYMA-BREAK
91    (CATCH-OPEN L320)
94    (PUSH)
95    (GETVALUE 27)                       ; STATE-PDL
97    (CONS)
98    (BIND 27)                           ; STATE-PDL
100   (NIL&PUSH)
101   (TAGBODY-OPEN 28 L306)              ; #(NIL)
105   (HANDLER-OPEN 29 L192)              ; (#(ERROR 192) 3 . 2)
107   (NIL&PUSH)
108   (GETVALUE 0)                        ; Y
110   (JMPIF L203)
113   (CONST 31)                          ; "(debug) "
115   L115
115   (PUSH)
116   (CALL2 32)                          ; RETRIEVE1
118   (SETVALUE 8)                        ; X
120   (PUSH)
121   (JMPIFEQTO 33 L208)                 ; $EXIT
125   (GETVALUE&PUSH 8)                   ; X
127   (JMPIFNOTEQTO 36 L270)              ; $LISP
131   (CONST 37)                          ; LISP
133   L133
133   (STORE 18)
135   (SKIP 4)
137   (TAGBODY-CLOSE)
138   (SKIP 1)
140   (UNBIND1)
141   (SKIP 3)
143   (SKIPSP 2 1)
146   (JMP L357)
149   L149
149   (CONST 23)                          ; MACSYMA-BREAK
151   (JMP L161)
153   L153
153   (CALL0 22)                          ; MTERPRI
155   (GETVALUE 0)                        ; Y
157   (JMPIF L149)
159   (CONST 24)                          ; ERROR-BREAK
161   L161
161   (PUSH)
162   (PUSH-UNBOUND 1)
164   (CALLS1 132)                        ; PRINC
166   (GETVALUE&PUSH 2)                   ; BRKLVL
168   (CALLS2&JMPIF 145 L182)             ; ZEROP
171   (CONST&PUSH 25)                     ; " level "
172   (PUSH-UNBOUND 1)
174   (CALLS1 132)                        ; PRINC
176   (GETVALUE&PUSH 2)                   ; BRKLVL
178   (PUSH-UNBOUND 1)
180   (CALLS1 132)                        ; PRINC
182   L182
182   (CONST&PUSH 26)                     ; " Type EXIT; to quit, HELP; for more help."
183   (PUSH-UNBOUND 1)
185   (CALLS1 132)                        ; PRINC
187   (CALL0 22)                          ; MTERPRI
189   (JMP L89)
192   L192
192   (HANDLER-BEGIN&PUSH)
193   (LOAD 0)
194   (STOREI 0 0 4)
198   (GO-I 0 0 2 0)
203   L203
203   (CONST 30)                          ; "_ "
205   (JMP L115)
208   L208
208   (LOAD&PUSH 25)
210   (CALL1 34)                          ; TIMEORG
212   (CONST 35)                          ; EXIT
214   (JMP L133)
217   L217
217   (CONST 39)                          ; MBREAK
219   (CATCH-OPEN L343)
222   (NIL)
223   (BIND 40)                           ; ST
225   (NIL)
226   (BIND 13)                           ; OLDST
228   (NIL)
229   (BIND 41)                           ; REPHRASE
231   (GETVALUE&PUSH 5)                   ; BINDLIST
233   (GETVALUE 6)                        ; LOCLIST
235   (CONS)
236   (BIND 39)                           ; MBREAK
238   (GETVALUE&PUSH 42)                  ; $LINENUM
240   (CALLS2 150)                        ; 1+
242   (SETVALUE 42)                       ; $LINENUM
244   (CALL0 43)                          ; CONTINUE
246   (UNBIND 4)
248   (CATCH-CLOSE)
249   (JMPIF L346)
252   L252
252   (CONST&PUSH 44)                     ; #:|Back to the break|
254   (PUSH-UNBOUND 1)
256   (CALLS1 132)                        ; PRINC
258   (PUSH-UNBOUND 1)
260   (CALLS1 139)                        ; TERPRI
262   (JMP L292)
264   L264
264   (GETVALUE&PUSH 11)                  ; $%%
266   (CALL1 48)                          ; DISPLA
268   (JMP L292)
270   L270
270   (GETVALUE&PUSH 8)                   ; X
272   (JMPIFEQTO 38 L217)                 ; $TOPLEVEL
275   (GETVALUE 45)                       ; DISPFLAG
277   (BIND 46)                           ; $DISPFLAG
279   (GETVALUE&PUSH 8)                   ; X
281   (CALL1 47)                          ; MEVAL
283   (SETVALUE 11)                       ; $%%
285   (UNBIND1)
286   (GETVALUE 45)                       ; DISPFLAG
288   (JMPIF L264)
290   (CALL0 22)                          ; MTERPRI
292   L292
292   (PUSH)
293   (LIST 1)
295   (SKIP 4)
297   (TAGBODY-CLOSE)
298   (SKIP 1)
300   (JMP L313)
302   L302
302   (LOAD&PUSH 4)
303   (CALLSR 0 29)                       ; ERROR
306   L306
306   (GETVALUE 15)                       ; ERRSET
308   (JMPIF L302)
310   (TAGBODY-CLOSE)
311   (SKIP 1)
313   L313
313   (UNBIND1)
314   (CATCH-CLOSE)
315   (JMPIFNOT L323)
317   (JMP L89)
320   L320
320   (JMPIF L89)
323   L323
323   (LOAD&PUSH 24)
324   (CALL1 49)                          ; ERRLFUN1
326   (PUSH-UNBOUND 1)
328   (CALLS1 139)                        ; TERPRI
330   (CONST&PUSH 50)                     ; #:|(Still in break loop)|
332   (PUSH-UNBOUND 1)
334   (CALLS1 132)                        ; PRINC
336   (PUSH-UNBOUND 1)
338   (CALLS1 139)                        ; TERPRI
340   (JMP L89)
343   L343
343   (JMPIFNOT L252)
346   L346
346   (SKIP 4)
348   (TAGBODY-CLOSE)
349   (SKIP 1)
351   (UNBIND1)
352   (SKIP 3)
354   (SKIPSP 2 1)
357   L357
357   (GETVALUE&PUSH 0)                   ; Y
359   (JMPIFEQTO 21 L386)                 ; NOPRINT
362   (CONST&PUSH 51)                     ; "Exited from the break "
364   (PUSH-UNBOUND 1)
366   (CALLS1 132)                        ; PRINC
368   (GETVALUE&PUSH 2)                   ; BRKLVL
370   (CALLS2&JMPIF 145 L379)             ; ZEROP
373   (GETVALUE&PUSH 2)                   ; BRKLVL
375   (PUSH-UNBOUND 1)
377   (CALLS1 132)                        ; PRINC
379   L379
379   (CALL0 22)                          ; MTERPRI
381   (LOAD&JMPIFNOT 11 L392)
384   (JMP L389)
386   L386
386   (LOAD&JMPIFNOT 11 L392)
389   L389
389   (T)
390   (SETVALUE 19)                       ; ^R
392   L392
392   (LOAD 3)
393   (UNBIND1)
394   (SKIP 1)
396   (UNBIND 2)
398   (SKIP 2)
400   (UNBIND 4)
402   (SKIP 1)
404   (UNBIND 3)
406   (JMP L409)
408   L408
408   (NIL)
409   L409
409   (UNBIND1)
410   (SKIP&RET 2)


Disassembly of function #:|(DEFUN ERRBREAK1 (IGN) ...)-65|
(CONST 0) = ERRBREAK1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERRBREAK1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERRBREAK1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERRBREAK1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERRBREAK1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERRBREAK1
8     (SKIP&RET 1)


Disassembly of function ERRBREAK1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 2)


Disassembly of function #:|(DEFUN ERRBREAK2 (IGN) ...)-66|
(CONST 0) = ERRBREAK2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERRBREAK2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERRBREAK2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERRBREAK2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERRBREAK2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERRBREAK2
8     (SKIP&RET 1)


Disassembly of function ERRBREAK2
(CONST 0) = LISP-BREAK
(CONST 1) = STATE-PDL
(CONST 2) = ERRBRKSW
(CONST 3) = ERST
(CONST 4) = *BREAK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRBRKSW STATE-PDL)
9 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISP-BREAK
1     (GETVALUE 1)                        ; STATE-PDL
3     (CONS)
4     (BIND 1)                            ; STATE-PDL
6     (GETVALUE&PUSH 2)                   ; ERRBRKSW
8     (CONST&PUSH 3)                      ; ERST
9     (CALL2 4)                           ; *BREAK
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MPAUSE (X) ...)-67|
(CONST 0) = MPAUSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MPAUSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPAUSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MPAUSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MPAUSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MPAUSE
8     (SKIP&RET 1)


Disassembly of function MPAUSE
(CONST 0) = X
(CONST 1) = LISP-BREAK
(CONST 2) = ^B-BREAK
(CONST 3) = STATE-PDL
(CONST 4) = "--Pause--"
(CONST 5) = MOREMSG
(CONST 6) = TIMESOFAR
(CONST 7) = ^BMSG
(CONST 8) = *BREAK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (^BMSG STATE-PDL)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; LISP-BREAK
4     (CONST&PUSH 2)                      ; ^B-BREAK
5     (GETVALUE 3)                        ; STATE-PDL
7     (LIST* 2)
9     (BIND 3)                            ; STATE-PDL
11    (CONST 4)                           ; "--Pause--"
12    (BIND 5)                            ; MOREMSG
14    (T&PUSH)
15    (CALL1 6)                           ; TIMESOFAR
17    (T&PUSH)
18    (GETVALUE&PUSH 7)                   ; ^BMSG
20    (CALL2 8)                           ; *BREAK
22    (UNBIND 3)
24    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $TOBREAK (X) ...)-68-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $TOBREAK (X) ...)-68-2-1|>
(CONST 1) = $TOBREAK
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $TOBREAK (X) ...)-68-2-1|>
1     (CONST&PUSH 1)                      ; $TOBREAK
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $TOBREAK (X) ...)-68-2-1|
(CONST 0) = X
(CONST 1) = MBREAK
(CONST 2) = "TOBREAK may be used only within a MACSYMA break."
(CONST 3) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X MBREAK)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; MBREAK
5     (JMPIF L13)
7     (CONST&PUSH 2)                      ; "TOBREAK may be used only within a MACSYMA break."
8     (CALL1 3)                           ; MERROR
10    (UNBIND1)
11    (SKIP&RET 2)
13    L13
13    (CONST&PUSH 1)                      ; MBREAK
14    (GETVALUE 0)                        ; X
16    (CDR)
17    (THROW)


Disassembly of function #:|(DEFUN ERRLFUN (X) ...)-69|
(CONST 0) = ERRLFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERRLFUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERRLFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERRLFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERRLFUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERRLFUN
8     (SKIP&RET 1)


Disassembly of function ERRLFUN
(CONST 0) = X
(CONST 1) = #(NIL)
(CONST 2) = (#(ERROR 87) 1 . 1)
(CONST 3) = ^S
(CONST 4) = LOADF
(CONST 5) = DEFAULTF
(CONST 6) = ERRSET
(CONST 7) = ^Q
(CONST 8) = #:|ERRLFUN has been clobbered.|
(CONST 9) = $ERRORFUN
(CONST 10) = #(NIL)
(CONST 11) = (#(ERROR 87) 1 . 1)
(CONST 12) = MAPPLY1
(CONST 13) = "~%Incorrect ERRORFUN"
(CONST 14) = MTELL
(CONST 15) = #(NIL)
(CONST 16) = (#(ERROR 87) 1 . 1)
(CONST 17) = MQUIT
(CONST 18) = SUPUNBIND
(CONST 19) = CLEARSIGN
(CONST 20) = #:|ERRLFUN has been clobbered.|
(CONST 21) = QUITMSG
(CONST 22) = " "
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (QUITMSG X ERRSET $ERRORFUN LOADF)
writes special variables : (QUITMSG ^Q LOADF DEFAULTF ^S)
106 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (TAGBODY-OPEN 1 L51)                ; #(NIL)
7     (HANDLER-OPEN 2 L87)                ; (#(ERROR 87) 1 . 1)
9     (NIL)
10    (SETVALUE 3)                        ; ^S
12    (GETVALUE 4)                        ; LOADF
14    (JMPIFNOT L21)
16    (SETVALUE 5)                        ; DEFAULTF
18    (NIL)
19    (SETVALUE 4)                        ; LOADF
21    L21
21    (SKIP 4)
23    (TAGBODY-CLOSE)
24    (SKIP 1)
26    (GETVALUE 9)                        ; $ERRORFUN
28    (JMPIFNOT L110)
31    (JMP L65)
33    L33
33    (NIL)
34    (SETVALUE 7)                        ; ^Q
36    (PUSH-UNBOUND 1)
38    (CALLS1 139)                        ; TERPRI
40    (CONST&PUSH 8)                      ; #:|ERRLFUN has been clobbered.|
41    (PUSH-UNBOUND 1)
43    (CALLS1 132)                        ; PRINC
45    (GETVALUE 9)                        ; $ERRORFUN
47    (JMPIFNOT L110)
49    (JMP L65)
51    L51
51    (GETVALUE 6)                        ; ERRSET
53    (JMPIF L136)
56    (TAGBODY-CLOSE)
57    (SKIP 1)
59    (JMPIFNOT L33)
61    (GETVALUE 9)                        ; $ERRORFUN
63    (JMPIFNOT L110)
65    L65
65    (NIL&PUSH)
66    (TAGBODY-OPEN 10 L98)               ; #(NIL)
69    (HANDLER-OPEN 11 L87)               ; (#(ERROR 87) 1 . 1)
71    (GETVALUE&PUSH 9)                   ; $ERRORFUN
73    (NIL&PUSH)
74    (GETVALUE&PUSH 9)                   ; $ERRORFUN
76    (NIL&PUSH)
77    (CALL 4 12)                         ; MAPPLY1
80    (SKIP 4)
82    (TAGBODY-CLOSE)
83    (SKIP 1)
85    (JMP L110)
87    L87
87    (HANDLER-BEGIN&PUSH)
88    (LOAD 0)
89    (STOREI 0 0 4)
93    (GO-I 0 0 2 0)
98    L98
98    (GETVALUE 6)                        ; ERRSET
100   (JMPIF L136)
102   (TAGBODY-CLOSE)
103   (SKIP 1)
105   (JMPIF L110)
107   (CONST&PUSH 13)                     ; "~%Incorrect ERRORFUN"
108   (CALL1 14)                          ; MTELL
110   L110
110   (NIL&PUSH)
111   (TAGBODY-OPEN 15 L132)              ; #(NIL)
114   (HANDLER-OPEN 16 L87)               ; (#(ERROR 87) 1 . 1)
116   (GETVALUE&PUSH 0)                   ; X
118   (JMPIFEQTO 17 L123)                 ; MQUIT
121   (CALL0 18)                          ; SUPUNBIND
123   L123
123   (CALL0 19)                          ; CLEARSIGN
125   (SKIP 4)
127   (TAGBODY-CLOSE)
128   (SKIP 1)
130   (JMP L157)
132   L132
132   (GETVALUE 6)                        ; ERRSET
134   (JMPIFNOT L140)
136   L136
136   (LOAD&PUSH 4)
137   (CALLSR 0 29)                       ; ERROR
140   L140
140   (TAGBODY-CLOSE)
141   (SKIP 1)
143   (JMPIF L157)
145   (NIL)
146   (SETVALUE 7)                        ; ^Q
148   (PUSH-UNBOUND 1)
150   (CALLS1 139)                        ; TERPRI
152   (CONST&PUSH 20)                     ; #:|ERRLFUN has been clobbered.|
153   (PUSH-UNBOUND 1)
155   (CALLS1 132)                        ; PRINC
157   L157
157   (GETVALUE 0)                        ; X
159   (NOT)
160   (JMPIFNOT1 L172)
162   (GETVALUE&PUSH 21)                  ; QUITMSG
164   (PUSH-UNBOUND 1)
166   (CALLS1 132)                        ; PRINC
168   (CONST 22)                          ; " "
170   (SETVALUE 21)                       ; QUITMSG
172   L172
172   (UNBIND1)
173   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUPUNBIND NIL ...)-70|
(CONST 0) = SUPUNBIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUPUNBIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUPUNBIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUPUNBIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUPUNBIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUPUNBIND
8     (SKIP&RET 1)


Disassembly of function SUPUNBIND
(CONST 0) = BINDLIST
(CONST 1) = MUNBIND
(CONST 2) = LOCLIST
(CONST 3) = MUNLOCAL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOCLIST BINDLIST)
12 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; BINDLIST
2     (CALLS2&PUSH 72)                    ; REVERSE
4     (CALL1 1)                           ; MUNBIND
6     (GETVALUE 2)                        ; LOCLIST
8     (JMPIFNOT L16)
10    L10
10    (CALL0 3)                           ; MUNLOCAL
12    (GETVALUE 2)                        ; LOCLIST
14    (JMPIF L10)
16    L16
16    (NIL)
17    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN ERRLFUN1 (MPDLS) ...)-71|
(CONST 0) = ERRLFUN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERRLFUN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERRLFUN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERRLFUN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERRLFUN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERRLFUN1
8     (SKIP&RET 1)


Disassembly of function ERRLFUN1
(CONST 0) = BINDLIST
(CONST 1) = MUNBIND
(CONST 2) = LOCLIST
(CONST 3) = MUNLOCAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOCLIST BINDLIST)
25 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; BINDLIST
2     (NIL&PUSH)
3     (JMP L11)
5     L5
5     (LOAD&CAR&PUSH 1)
7     (LOAD&CONS&STORE 0)
9     (LOAD&CDR&STORE 1)
11    L11
11    (LOAD&PUSH 1)
12    (LOAD 4)
13    (CAR)
14    (JMPIFNOTEQ L5)
16    (LOAD&PUSH 0)
17    (CALL1 1)                           ; MUNBIND
19    (SKIP 2)
21    (JMP L25)
23    L23
23    (CALL0 3)                           ; MUNLOCAL
25    L25
25    (GETVALUE&PUSH 2)                   ; LOCLIST
27    (LOAD 2)
28    (CDR)
29    (JMPIFNOTEQ L23)
31    (NIL)
32    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN GETALIAS (X) ...)-72|
(CONST 0) = GETALIAS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETALIAS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETALIAS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETALIAS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETALIAS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETALIAS
8     (SKIP&RET 1)


Disassembly of function GETALIAS
(CONST 0) = X
(CONST 1) = ALIAS
(CONST 2) = $FALSE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; ALIAS
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L19)
12    (GETVALUE&PUSH 0)                   ; X
14    (JMPIFEQTO 2 L22)                   ; $FALSE
17    (GETVALUE 0)                        ; X
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (NIL)
23    (JMP L19)


Disassembly of function #:|(DEFMFUN MAKEALIAS (X) ...)-73|
(CONST 0) = MAKEALIAS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKEALIAS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKEALIAS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKEALIAS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKEALIAS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKEALIAS
8     (SKIP&RET 1)


Disassembly of function MAKEALIAS
(CONST 0) = X
(CONST 1) = #\$
(CONST 2) = EXPLODEN
(CONST 3) = IMPLODE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; #\$
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL1 2)                           ; EXPLODEN
8     (CONS&PUSH)
9     (CALL1 3)                           ; IMPLODE
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN FEXPRCHECK (FORM) ...)-74|
(CONST 0) = FEXPRCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FEXPRCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FEXPRCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FEXPRCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FEXPRCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FEXPRCHECK
8     (SKIP&RET 1)


Disassembly of function FEXPRCHECK
(CONST 0) = "~:M takes just one argument."
(CONST 1) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (JMPIFNOT L14)
4     (LOAD 1)
5     (CDR)
6     (CDR)
7     (JMPIF L14)
9     (LOAD 1)
10    (CDR)
11    (CAR)
12    (SKIP&RET 2)
14    L14
14    (CONST&PUSH 0)                      ; "~:M takes just one argument."
15    (LOAD 2)
16    (CAR)
17    (CAR&PUSH)
18    (CALL2 1)                           ; MERROR
20    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN NONSYMCHK (X FN) ...)-75|
(CONST 0) = NONSYMCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NONSYMCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NONSYMCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NONSYMCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NONSYMCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NONSYMCHK
8     (SKIP&RET 1)


Disassembly of function NONSYMCHK
(CONST 0) = X
(CONST 1) = "The argument to ~:M must be a symbolic name:~%~M"
(CONST 2) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
14 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 6 L18)                ; SYMBOLP
8     (CONST&PUSH 1)                      ; "The argument to ~:M must be a symbolic name:~%~M"
9     (LOAD&PUSH 5)
10    (GETVALUE&PUSH 0)                   ; X
12    (CALL 3 2)                          ; MERROR
15    L15
15    (UNBIND1)
16    (SKIP&RET 3)
18    L18
18    (NIL)
19    (JMP L15)


Disassembly of function #:|(DEFMFUN PRINL (L) ...)-76|
(CONST 0) = PRINL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRINL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRINL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRINL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRINL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRINL
8     (SKIP&RET 1)


Disassembly of function PRINL
(CONST 0) = X
(CONST 1) = #\Space
(CONST 2) = TYO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (X)
20 byte-code instructions:
0     (LOAD&PUSH 1)
1     (NIL)
2     (BIND 0)                            ; X
4     (JMP L20)
6     L6
6     (LOAD 3)
7     (CAR)
8     (SETVALUE 0)                        ; X
10    (PUSH)
11    (PUSH-UNBOUND 1)
13    (CALLS1 132)                        ; PRINC
15    (CONST&PUSH 1)                      ; #\Space
16    (CALL1 2)                           ; TYO
18    (LOAD&CDR&STORE 3)
20    L20
20    (LOAD&PUSH 3)
21    (CALLS1&JMPIFNOT 146 L6)            ; ENDP
24    (NIL)
25    (UNBIND1)
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $PRINT N ...)-77|
(CONST 0) = $PRINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PRINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PRINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PRINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PRINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PRINT
8     (SKIP&RET 1)


Disassembly of function $PRINT
(CONST 0) = 0
(CONST 1) = ((MLIST SIMP))
(CONST 2) = LISTIFY1
(CONST 3) = | |
(CONST 4) = (MTEXT)
(CONST 5) = PRINTMSG
(CONST 6) = DISPLA
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
writes special variable : (PRINTMSG)
38 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 0
5     (CALLSR&JMPIF 1 45 L48)             ; =
9     (LOAD&PUSH 0)
10    (LOAD&PUSH 3)
11    (CALL2&PUSH 2)                      ; LISTIFY1
13    (LOAD&PUSH 0)
14    (LOAD&JMPIFNOT 0 L31)
17    L17
17    (LOAD&PUSH 0)
18    (CONST&PUSH 3)                      ; | |
19    (LOAD 2)
20    (CDR)
21    (CONS&PUSH)
22    (CALLS1 170)                        ; RPLACD
24    (LOAD 0)
25    (CDR)
26    (CDR)
27    (STORE 0)
28    (LOAD&JMPIF 0 L17)
31    L31
31    (SKIP 1)
33    (CONST&PUSH 4)                      ; (MTEXT)
34    (LOAD 1)
35    (CONS)
36    (SETVALUE 5)                        ; PRINTMSG
38    (PUSH)
39    (CALL1 6)                           ; DISPLA
41    (LOAD&PUSH 0)
42    (CALLS2 72)                         ; REVERSE
44    (CDR)
45    (CAR)
46    (SKIP&RET 4)
48    L48
48    (CONST 1)                           ; ((MLIST SIMP))
49    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $PLAYBACK (X) ...)-78-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $PLAYBACK (X) ...)-78-2-1|>
(CONST 1) = $PLAYBACK
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $PLAYBACK (X) ...)-78-2-1|>
1     (CONST&PUSH 1)                      ; $PLAYBACK
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $PLAYBACK (X) ...)-78-2-1|
(CONST 0) = X
(CONST 1) = PLAYBACK
(CONST 2) = STATE-PDL
(CONST 3) = $INCHAR
(CONST 4) = GETLABCHARN
(CONST 5) = $SHOWTIME
(CONST 6) = $GRIND
(CONST 7) = ML-TYPEP
(CONST 8) = FIXNUM
(CONST 9) = $ALL
(CONST 10) = $SLOW
(CONST 11) = $NOSTRING
(CONST 12) = $INPUT
(CONST 13) = ($SHOWTIME $TIME)
(CONST 14) = MEMQ
(CONST 15) = ($GCTIME $TOTALTIME)
(CONST 16) = LISTARGP
(CONST 17) = GETLABELS
(CONST 18) = $PLAYBACK
(CONST 19) = IMPROPER-ARG-ERR
(CONST 20) = $LABELS
(CONST 21) = $NOLABELS
(CONST 22) = $DONE
(CONST 23) = ERRBREAK2
(CONST 24) = ERRSET
(CONST 25) = #(NIL)
(CONST 26) = (#(ERROR 342) 1 . 1)
(CONST 27) = LINELABLE
(CONST 28) = MTERPRI
(CONST 29) = PRINTLABEL
(CONST 30) = MEVAL1
(CONST 31) = MGRIND
(CONST 32) = TYO
(CONST 33) = MSTRING
(CONST 34) = NODISP
(CONST 35) = $
(CONST 36) = |;|
(CONST 37) = TIME
(CONST 38) = GCTIMEP
(CONST 39) = #:| msec.|
(CONST 40) = (MLABLE)
(CONST 41) = DISPLA
(CONST 42) = CONTINUEP
(CONST 43) = $TERMINATED
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRSET $NOLABELS $LABELS $GRIND $SHOWTIME $INCHAR STATE-PDL X)
writes special variable : (X)
272 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (SETVALUE 0)                        ; X
8     (CONST&PUSH 1)                      ; PLAYBACK
9     (GETVALUE 2)                        ; STATE-PDL
11    (CONS)
12    (BIND 2)                            ; STATE-PDL
14    (PUSH-NIL 11)
16    (GETVALUE&PUSH 3)                   ; $INCHAR
18    (CALL1 4)                           ; GETLABCHARN
20    (STORE 1)
21    (GETVALUE 5)                        ; $SHOWTIME
23    (STORE 3)
24    (GETVALUE 6)                        ; $GRIND
26    (STORE 2)
27    (GETVALUE 0)                        ; X
29    (BIND 0)                            ; X
31    (GETVALUE 0)                        ; X
33    (JMPIFNOT L121)
36    L36
36    (GETVALUE 0)                        ; X
38    (CAR&PUSH)
39    (CALL1&PUSH 7)                      ; ML-TYPEP
41    (JMPIFEQTO 8 L211)                  ; FIXNUM
45    (GETVALUE 0)                        ; X
47    (CAR&PUSH)
48    (JMPIFEQTO 9 L111)                  ; $ALL
51    (GETVALUE 0)                        ; X
53    (CAR&PUSH)
54    (JMPIFEQTO 10 L219)                 ; $SLOW
58    (GETVALUE 0)                        ; X
60    (CAR&PUSH)
61    (JMPIFEQTO 11 L224)                 ; $NOSTRING
65    (GETVALUE 0)                        ; X
67    (CAR&PUSH)
68    (JMPIFEQTO 6 L229)                  ; $GRIND
72    (GETVALUE 0)                        ; X
74    (CAR&PUSH)
75    (JMPIFEQTO 12 L234)                 ; $INPUT
79    (GETVALUE 0)                        ; X
81    (CAR&PUSH)
82    (CONST&PUSH 13)                     ; ($SHOWTIME $TIME)
83    (CALL2&JMPIF 14 L244)               ; MEMQ
87    (GETVALUE 0)                        ; X
89    (CAR&PUSH)
90    (CONST&PUSH 15)                     ; ($GCTIME $TOTALTIME)
91    (CALL2&JMPIF 14 L251)               ; MEMQ
95    (GETVALUE 0)                        ; X
97    (CAR&PUSH)
98    (CALL1 16)                          ; LISTARGP
100   (STORE 11)
102   (JMPIF L256)
105   (GETVALUE 0)                        ; X
107   (CAR&PUSH)
108   (CONST&PUSH 18)                     ; $PLAYBACK
109   (CALL2 19)                          ; IMPROPER-ARG-ERR
111   L111
111   (GETVALUE 0)                        ; X
113   (CDR)
114   (SETVALUE 0)                        ; X
116   (GETVALUE 0)                        ; X
118   (JMPIF L36)
121   L121
121   (UNBIND1)
122   (LOAD&JMPIFNOT 0 L285)
126   (LOAD&JMPIF 7 L285)
130   (LOAD&JMPIFNOT 9 L335)
134   L134
134   (CONST&PUSH 23)                     ; ERRBREAK2
135   (LOAD&CAR&PUSH 10)
137   (CALL1&PUSH 4)                      ; GETLABCHARN
139   (LOAD&PUSH 3)
140   (CALLSR&PUSH 1 7)                   ; CHAR=
143   (LOAD 1)
144   (BIND 24)                           ; ERRSET
146   (NIL&PUSH)
147   (TAGBODY-OPEN 25 L440)              ; #(NIL)
151   (HANDLER-OPEN 26 L342)              ; (#(ERROR 342) 1 . 1)
153   (LOAD&JMPIF 19 L160)
156   (LOAD&JMPIF 12 L366)
160   L160
160   (LOAD&JMPIF 12 L448)
164   (LOAD&JMPIFNOT 17 L179)
167   (LOAD&CAR&PUSH 23)
169   (CONST&PUSH 37)                     ; TIME
171   (PUSH-UNBOUND 1)
173   (CALLS2&STORE 132 24)               ; GET
176   (JMPIF L412)
179   L179
179   (LOAD&JMPIF 18 L192)
182   L182
182   (LOAD&CAR&PUSH 23)
184   (CONST&PUSH 34)                     ; NODISP
186   (PUSH-UNBOUND 1)
188   (CALLS2&JMPIFNOT 132 L448)          ; GET
192   L192
192   (SKIP 4)
194   (TAGBODY-CLOSE)
195   (SKIP 1)
197   (UNBIND1)
198   (SKIP 2)
200   L200
200   (LOAD 9)
201   (CDR)
202   L202
202   (STORE 9)
204   (LOAD&JMPIFNOT 9 L335)
208   (JMP L134)
211   L211
211   (GETVALUE 0)                        ; X
213   (CAR)
214   (STORE 10)
216   (JMP L111)
219   L219
219   (T&STORE 9)
221   (JMP L111)
224   L224
224   (T&STORE 8)
226   (JMP L111)
229   L229
229   (T&STORE 5)
231   (JMP L111)
234   L234
234   (T&STORE 7)
236   (JMP L111)
239   L239
239   (T&STORE 6)
241   (JMP L111)
244   L244
244   (LOAD&JMPIFNOT 6 L239)
247   (STORE 6)
248   (JMP L111)
251   L251
251   (CONST 9)                           ; $ALL
252   (STORE 6)
253   (JMP L111)
256   L256
256   (LOAD&PUSH 12)
257   (LOAD&CAR&PUSH 12)
259   (LOAD&CDR&PUSH 13)
261   (NIL&PUSH)
262   (CALL&PUSH 3 17)                    ; GETLABELS
265   (CALLSR&STORE 2 35 12)              ; NCONC
269   (T&STORE 3)
271   (JMP L111)
274   L274
274   (LOAD&CDR&STORE 10)
276   (LOAD&JMPIF 7 L299)
279   L279
279   (LOAD&PUSH 10)
280   (CALLS2 72)                         ; REVERSE
282   (JMP L202)
285   L285
285   (GETVALUE 20)                       ; $LABELS
287   (CDR)
288   (STORE 10)
290   (JMPIFNOT L296)
292   (GETVALUE 21)                       ; $NOLABELS
294   (JMPIFNOT L274)
296   L296
296   (LOAD&JMPIFNOT 7 L279)
299   L299
299   (LOAD&PUSH 10)
300   (CALLS2&PUSH 71)                    ; LENGTH
302   (LOAD&PUSH 8)
303   (CALLSR&JMPIF 1 47 L279)            ; <
307   (LOAD&PUSH 7)
308   (NIL&PUSH)
309   (JMP L319)
311   L311
311   (LOAD&CAR&PUSH 12)
313   (LOAD&CONS&STORE 0)
315   (LOAD&CDR&STORE 12)
317   (LOAD&DEC&STORE 1)
319   L319
319   (LOAD&PUSH 1)
320   (CALLS2&JMPIFNOT 145 L311)          ; ZEROP
323   (LOAD&PUSH 11)
324   (LOAD&PUSH 1)
325   (CALLSR&STORE 2 35 11)              ; NCONC
329   (SKIP 2)
331   (LOAD&JMPIF 9 L134)
335   L335
335   (CONST 22)                          ; $DONE
337   (SKIP 11)
339   (JMP L488)
342   L342
342   (HANDLER-BEGIN&PUSH)
343   (LOAD 0)
344   (STOREI 0 0 4)
348   (GO-I 0 0 2 0)
353   L353
353   (LOAD&CAR&PUSH 23)
355   (CALL1&PUSH 30)                     ; MEVAL1
357   (NIL&PUSH)
358   (CALL2 31)                          ; MGRIND
360   (JMP L390)
362   L362
362   (CONST 35)                          ; $
364   (JMP L401)
366   L366
366   (LOAD 23)
368   (CAR)
369   (BIND 27)                           ; LINELABLE
371   (CALL0 28)                          ; MTERPRI
373   (CALL0 29)                          ; PRINTLABEL
375   (UNBIND1)
376   (LOAD&JMPIF 16 L353)
379   (CONST&SYMBOL-FUNCTION&PUSH 32)     ; TYO
381   (LOAD&CAR&PUSH 24)
383   (CALL1&PUSH 30)                     ; MEVAL1
385   (CALL1&PUSH 33)                     ; MSTRING
387   (CALLSR 0 24)                       ; MAPC
390   L390
390   (LOAD&CAR&PUSH 23)
392   (CONST&PUSH 34)                     ; NODISP
394   (PUSH-UNBOUND 1)
396   (CALLS2&JMPIF 132 L362)             ; GET
399   (CONST 36)                          ; |;|
401   L401
401   (PUSH)
402   (PUSH-UNBOUND 1)
404   (CALLS1 132)                        ; PRINC
406   (CALL0 28)                          ; MTERPRI
408   (SKIP 4)
410   (JMP L464)
412   L412
412   (LOAD&PUSH 17)
413   (LOAD&CDR&PUSH 25)
415   (CALL2 38)                          ; GCTIMEP
417   (SETVALUE 0)                        ; X
419   (LOAD&CAR&PUSH 24)
421   (PUSH-UNBOUND 1)
423   (CALLS1 132)                        ; PRINC
425   (CONST&PUSH 39)                     ; #:| msec.|
427   (PUSH-UNBOUND 1)
429   (CALLS1 132)                        ; PRINC
431   (CALL0 28)                          ; MTERPRI
433   (LOAD&JMPIFNOT 18 L182)
437   (JMP L192)
440   L440
440   (GETVALUE 24)                       ; ERRSET
442   (JMPIFNOT L464)
444   (LOAD&PUSH 4)
445   (CALLSR 0 29)                       ; ERROR
448   L448
448   (CALL0 28)                          ; MTERPRI
450   (CONST&PUSH 40)                     ; (MLABLE)
452   (LOAD&CAR&PUSH 24)
454   (LOAD&CAR&PUSH 25)
456   (CALL1&PUSH 30)                     ; MEVAL1
458   (LIST&PUSH 3)
460   (CALL1 41)                          ; DISPLA
462   (SKIP 4)
464   L464
464   (TAGBODY-CLOSE)
465   (SKIP 1)
467   (UNBIND1)
468   (SKIP 2)
470   (LOAD&JMPIFNOT 6 L200)
474   (LOAD 9)
475   (CDR)
476   (JMPIFNOT L200)
479   (CALL0 42)                          ; CONTINUEP
481   (JMPIF L200)
484   (CONST 43)                          ; $TERMINATED
486   (SKIP 11)
488   L488
488   (UNBIND 2)
490   (SKIP&RET 2)


Disassembly of function #:|(DEFUN LISTARGP (X) ...)-79|
(CONST 0) = LISTARGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISTARGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISTARGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISTARGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISTARGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LISTARGP
8     (SKIP&RET 1)


Disassembly of function LISTARGP
(CONST 0) = X
(CONST 1) = $LISTP
(CONST 2) = ML-TYPEP
(CONST 3) = FIXNUM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
53 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL1 1)                           ; $LISTP
8     (JMPIFNOT1 L67)
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (CALL1&PUSH 2)                      ; ML-TYPEP
16    (CONST 3)                           ; FIXNUM
17    (EQ)
18    (JMPIFNOT1 L67)
20    (GETVALUE 0)                        ; X
22    (CDR)
23    (CDR)
24    (JMPIF L33)
26    (GETVALUE 0)                        ; X
28    (CDR)
29    (CAR)
30    (STORE 0)
31    (JMPIF L57)
33    L33
33    (GETVALUE 0)                        ; X
35    (CDR)
36    (CDR)
37    (CAR)
38    (STORE 0)
39    (PUSH)
40    (CALL1&PUSH 2)                      ; ML-TYPEP
42    (CONST 3)                           ; FIXNUM
43    (EQ)
44    (JMPIFNOT1 L67)
46    (GETVALUE 0)                        ; X
48    (CDR)
49    (CAR&PUSH)
50    (LOAD&PUSH 1)
51    (CALLSR 1 48)                       ; >
54    (NOT)
55    (JMPIFNOT1 L67)
57    L57
57    (GETVALUE 0)                        ; X
59    (CDR)
60    (CAR&PUSH)
61    (LOAD 1)
62    (CONS)
63    (SKIP 1)
65    (JMP L69)
67    L67
67    (SKIP 1)
69    L69
69    (UNBIND1)
70    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $ALIAS (FORM) ...)-80-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $ALIAS (FORM) ...)-80-2-1|>
(CONST 1) = $ALIAS
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $ALIAS (FORM) ...)-80-2-1|>
1     (CONST&PUSH 1)                      ; $ALIAS
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $ALIAS (FORM) ...)-80-2-1|
(CONST 0) = "ALIAS takes an even number of arguments."
(CONST 1) = MERROR
(CONST 2) = ALIAS
(CONST 3) = (MLIST SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
23 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (PUSH)
3     (CALLS2&PUSH 71)                    ; LENGTH
5     (CALLS2&JMPIFNOT 148 L11)           ; ODDP
8     (CONST&PUSH 0)                      ; "ALIAS takes an even number of arguments."
9     (CALL1 1)                           ; MERROR
11    L11
11    (NIL&PUSH)
12    (LOAD&JMPIFNOT 2 L30)
15    L15
15    (LOAD&CAR&PUSH 2)
17    (LOAD&CDR&STORE 3)
19    (LOAD&CAR&PUSH 3)
21    (LOAD&CDR&STORE 4)
23    (CALL2&PUSH 2)                      ; ALIAS
25    (LOAD&CONS&STORE 0)
27    (LOAD&JMPIF 2 L15)
30    L30
30    (CONST&PUSH 3)                      ; (MLIST SIMP)
31    (LOAD&PUSH 1)
32    (CALLS2 73)                         ; NREVERSE
34    (CONS)
35    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN ALIAS (X Y) ...)-81|
(CONST 0) = ALIAS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALIAS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALIAS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALIAS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALIAS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALIAS
8     (SKIP&RET 1)


Disassembly of function ALIAS
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $ALIAS
(CONST 3) = NONSYMCHK
(CONST 4) = 1
(CONST 5) = GETCHAR
(CONST 6) = $
(CONST 7) = "-ed symbols may not be aliased. ~M"
(CONST 8) = MERROR
(CONST 9) = REVERSEALIAS
(CONST 10) = "~M already is aliased."
(CONST 11) = ALIAS
(CONST 12) = PUTPROP
(CONST 13) = STRIPDOLLAR
(CONST 14) = $ALIASES
(CONST 15) = ADD2LNC
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ALIASES Y X)
51 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; $ALIAS
9     (CALL2 3)                           ; NONSYMCHK
11    (JMPIF1 L82)
14    (GETVALUE&PUSH 1)                   ; Y
16    (CONST&PUSH 2)                      ; $ALIAS
17    (CALL2 3)                           ; NONSYMCHK
19    (JMPIF1 L82)
21    (GETVALUE&PUSH 0)                   ; X
23    (CONST&PUSH 4)                      ; 1
24    (CALL2&PUSH 5)                      ; GETCHAR
26    (JMPIFNOTEQTO 6 L53)                ; $
29    (GETVALUE&PUSH 0)                   ; X
31    (CONST&PUSH 9)                      ; REVERSEALIAS
32    (PUSH-UNBOUND 1)
34    (CALLS2&JMPIFNOT 132 L56)           ; GET
37    (GETVALUE&PUSH 0)                   ; X
39    (GETVALUE 1)                        ; Y
41    (EQ)
42    (NOT)
43    (JMPIFNOT1 L82)
45    (CONST 10)                          ; "~M already is aliased."
46    L46
46    (PUSH)
47    (GETVALUE&PUSH 0)                   ; X
49    (CALL2 8)                           ; MERROR
51    (JMP L82)
53    L53
53    (CONST 7)                           ; "-ed symbols may not be aliased. ~M"
54    (JMP L46)
56    L56
56    (GETVALUE&PUSH 0)                   ; X
58    (GETVALUE&PUSH 1)                   ; Y
60    (CONST&PUSH 11)                     ; ALIAS
61    (CALL 3 12)                         ; PUTPROP
64    (GETVALUE&PUSH 1)                   ; Y
66    (GETVALUE&PUSH 0)                   ; X
68    (CALL1&PUSH 13)                     ; STRIPDOLLAR
70    (CONST&PUSH 9)                      ; REVERSEALIAS
71    (CALL 3 12)                         ; PUTPROP
74    (GETVALUE&PUSH 1)                   ; Y
76    (GETVALUE&PUSH 14)                  ; $ALIASES
78    (CALL2 15)                          ; ADD2LNC
80    (GETVALUE 1)                        ; Y
82    L82
82    (UNBIND 2)
84    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN REMALIAS (X &OPTIONAL REMP) ...)-82|
(CONST 0) = REMALIAS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMALIAS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMALIAS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMALIAS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMALIAS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMALIAS
8     (SKIP&RET 1)


Disassembly of function REMALIAS
(CONST 0) = X
(CONST 1) = $ALIASES
(CONST 2) = MEMQ
(CONST 3) = REVERSEALIAS
(CONST 4) = Y
(CONST 5) = %DERIVATIVE
(CONST 6) = 1
(CONST 7) = DELQ
(CONST 8) = $DIFF
(CONST 9) = ALIAS
(CONST 10) = NOUN
(CONST 11) = MAKEALIAS
(CONST 12) = VERB
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (Y $ALIASES X)
writes special variable : (X)
69 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (JMPIFBOUNDP 4 L76)
7     (NIL&STORE 4)
9     (LOAD&JMPIFNOT 4 L79)
13    (JMP L87)
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (CONST&PUSH 3)                      ; REVERSEALIAS
19    (CALLS2 137)                        ; REMPROP
21    (GETVALUE&PUSH 0)                   ; X
23    (GETVALUE&PUSH 1)                   ; $ALIASES
25    (CONST&PUSH 6)                      ; 1
26    (CALL 3 7)                          ; DELQ
29    (CONST&PUSH 8)                      ; $DIFF
30    (CONST&PUSH 9)                      ; ALIAS
31    (CALLS2 137)                        ; REMPROP
33    (CONST 8)                           ; $DIFF
34    (UNBIND1)
35    (JMP L113)
38    L38
38    (GETVALUE&PUSH 0)                   ; X
40    (CONST&PUSH 3)                      ; REVERSEALIAS
41    (CALLS2 137)                        ; REMPROP
43    (GETVALUE&PUSH 0)                   ; X
45    (CONST&PUSH 10)                     ; NOUN
46    (CALLS2 137)                        ; REMPROP
48    (GETVALUE&PUSH 0)                   ; X
50    (GETVALUE&PUSH 1)                   ; $ALIASES
52    (CONST&PUSH 6)                      ; 1
53    (CALL 3 7)                          ; DELQ
56    (GETVALUE&PUSH 4)                   ; Y
58    (CALL1 11)                          ; MAKEALIAS
60    (SETVALUE 0)                        ; X
62    (PUSH)
63    (CONST&PUSH 9)                      ; ALIAS
64    (CALLS2 137)                        ; REMPROP
66    (GETVALUE&PUSH 0)                   ; X
68    (CONST&PUSH 12)                     ; VERB
69    (CALLS2 137)                        ; REMPROP
71    (GETVALUE 0)                        ; X
73    (UNBIND1)
74    (JMP L113)
76    L76
76    (LOAD&JMPIF 4 L87)
79    L79
79    (GETVALUE&PUSH 0)                   ; X
81    (GETVALUE 1)                        ; $ALIASES
83    (CDR&PUSH)
84    (CALL2&JMPIFNOT 2 L94)              ; MEMQ
87    L87
87    (GETVALUE&PUSH 0)                   ; X
89    (CONST&PUSH 3)                      ; REVERSEALIAS
90    (PUSH-UNBOUND 1)
92    (CALLS2 132)                        ; GET
94    L94
94    (BIND 4)                            ; Y
96    (GETVALUE 4)                        ; Y
98    (JMPIFNOT L106)
100   (GETVALUE&PUSH 0)                   ; X
102   (JMPIFEQTO 5 L16)                   ; %DERIVATIVE
106   L106
106   (GETVALUE 4)                        ; Y
108   (JMPIF L38)
111   (NIL)
112   (UNBIND1)
113   L113
113   (UNBIND1)
114   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN STRIPDOLLAR (X) ...)-83|
(CONST 0) = STRIPDOLLAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRIPDOLLAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRIPDOLLAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRIPDOLLAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRIPDOLLAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRIPDOLLAR
8     (SKIP&RET 1)


Disassembly of function STRIPDOLLAR
(CONST 0) = X
(CONST 1) = BIGFLOAT
(CONST 2) = FPFORMAT
(CONST 3) = IMPLODE
(CONST 4) = "Atomic arg required:~%~M"
(CONST 5) = MERROR
(CONST 6) = FALSE
(CONST 7) = TRUE
(CONST 8) = 1
(CONST 9) = GETCHAR
(CONST 10) = ($ % &)
(CONST 11) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
57 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFCONSP L43)
7     (GETVALUE&PUSH 0)                   ; X
9     (CALLS2&JMPIF 8 L64)                ; NUMBERP
12    (GETVALUE 0)                        ; X
14    (JMPIFNOT L68)
16    (GETVALUE&PUSH 0)                   ; X
18    (T)
19    (JMPIFEQ L71)
21    (GETVALUE&PUSH 0)                   ; X
23    (CONST&PUSH 8)                      ; 1
24    (CALL2&PUSH 9)                      ; GETCHAR
26    (CONST&PUSH 10)                     ; ($ % &)
27    (CALL2&JMPIF 11 L74)                ; MEMQ
30    (GETVALUE 0)                        ; X
32    L32
32    (UNBIND1)
33    (SKIP&RET 2)
35    L35
35    (GETVALUE&PUSH 0)                   ; X
37    (CALL1&PUSH 2)                      ; FPFORMAT
39    (CALL1 3)                           ; IMPLODE
41    (JMP L32)
43    L43
43    (GETVALUE 0)                        ; X
45    (CAR)
46    (CAR&PUSH)
47    (JMPIFNOTEQTO 1 L57)                ; BIGFLOAT
50    (GETVALUE 0)                        ; X
52    (CDR)
53    (CAR&PUSH)
54    (CALLS2&JMPIFNOT 147 L35)           ; MINUSP
57    L57
57    (CONST&PUSH 4)                      ; "Atomic arg required:~%~M"
58    (GETVALUE&PUSH 0)                   ; X
60    (CALL2 5)                           ; MERROR
62    (JMP L32)
64    L64
64    (GETVALUE 0)                        ; X
66    (JMP L32)
68    L68
68    (CONST 6)                           ; FALSE
69    (JMP L32)
71    L71
71    (CONST 7)                           ; TRUE
72    (JMP L32)
74    L74
74    (GETVALUE&PUSH 0)                   ; X
76    (CALLS1&PUSH 75)                    ; STRING
78    (CONST&PUSH 8)                      ; 1
79    (PUSH-UNBOUND 1)
81    (CALLS2&PUSH 69)                    ; SUBSEQ
83    (PUSH-UNBOUND 1)
85    (CALLS1 212)                        ; INTERN
87    (JMP L32)


Disassembly of function #:|(DEFMFUN FULLSTRIP (X) ...)-84|
(CONST 0) = FULLSTRIP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FULLSTRIP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FULLSTRIP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FULLSTRIP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FULLSTRIP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FULLSTRIP
8     (SKIP&RET 1)


Disassembly of function FULLSTRIP
(CONST 0) = X
(CONST 1) = FULLSTRIP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; FULLSTRIP1
5     (GETVALUE&PUSH 0)                   ; X
7     (CALLSR 0 22)                       ; MAPCAR
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN FULLSTRIP1 (X) ...)-85|
(CONST 0) = FULLSTRIP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FULLSTRIP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FULLSTRIP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FULLSTRIP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FULLSTRIP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FULLSTRIP1
8     (SKIP&RET 1)


Disassembly of function FULLSTRIP1
(CONST 0) = X
(CONST 1) = REVERSEALIAS
(CONST 2) = ALIASLIST
(CONST 3) = ASSQR
(CONST 4) = STRING*1
(CONST 5) = IMPLODE
(CONST 6) = STRIPDOLLAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALIASLIST X)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIFNOT 8 L12)             ; NUMBERP
8     (GETVALUE 0)                        ; X
10    (JMPIF1 L38)
12    L12
12    (GETVALUE&PUSH 0)                   ; X
14    (CONST&PUSH 1)                      ; REVERSEALIAS
15    (PUSH-UNBOUND 1)
17    (CALLS2 132)                        ; GET
19    (JMPIF1 L38)
21    (GETVALUE&PUSH 0)                   ; X
23    (GETVALUE&PUSH 2)                   ; ALIASLIST
25    (CALL2&PUSH 3)                      ; ASSQR
27    (LOAD&JMPIF 0 L41)
30    (SKIP 1)
32    (JMPIF1 L38)
34    L34
34    (GETVALUE&PUSH 0)                   ; X
36    (CALL1 6)                           ; STRIPDOLLAR
38    L38
38    (UNBIND1)
39    (SKIP&RET 2)
41    L41
41    (CAR&PUSH)
42    (CALL1&PUSH 4)                      ; STRING*1
44    (CALL1 5)                           ; IMPLODE
46    (SKIP 1)
48    (JMPIF1 L38)
50    (JMP L34)


Disassembly of function #:|(DEFUN STRING* (X) ...)-86|
(CONST 0) = STRING*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRING*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRING*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRING*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRING*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRING*
8     (SKIP&RET 1)


Disassembly of function STRING*
(CONST 0) = X
(CONST 1) = EXPLODEN
(CONST 2) = ALIASLIST
(CONST 3) = ASSQR
(CONST 4) = STRING*1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALIASLIST X)
26 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIFNOT 8 L14)             ; NUMBERP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1 1)                           ; EXPLODEN
12    (JMPIF1 L31)
14    L14
14    (GETVALUE&PUSH 0)                   ; X
16    (GETVALUE&PUSH 2)                   ; ALIASLIST
18    (CALL2&PUSH 3)                      ; ASSQR
20    (LOAD&JMPIF 0 L34)
23    (SKIP 1)
25    (JMPIF1 L31)
27    L27
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL1 4)                           ; STRING*1
31    L31
31    (UNBIND1)
32    (SKIP&RET 2)
34    L34
34    (CAR&PUSH)
35    (CALL1 4)                           ; STRING*1
37    (SKIP 1)
39    (JMPIF1 L31)
41    (JMP L27)


Disassembly of function #:|(DEFUN STRING*1 (X) ...)-87|
(CONST 0) = STRING*1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRING*1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRING*1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRING*1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRING*1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRING*1
8     (SKIP&RET 1)


Disassembly of function STRING*1
(CONST 0) = X
(CONST 1) = STRINGDISP
(CONST 2) = $LISPDISP
(CONST 3) = MAKESTRING
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; STRINGDISP
6     (NIL)
7     (BIND 2)                            ; $LISPDISP
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 3)                           ; MAKESTRING
13    (UNBIND 3)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MAKSTRING* (X) ...)-88|
(CONST 0) = MAKSTRING*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKSTRING*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKSTRING*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKSTRING*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKSTRING*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKSTRING*
8     (SKIP&RET 1)


Disassembly of function MAKSTRING*
(CONST 0) = X
(CONST 1) = STRING*
(CONST 2) = ASCII
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; STRING*
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (LOAD&JMPIFNOT 0 L25)
13    L13
13    (LOAD&PUSH 0)
14    (LOAD&CAR&PUSH 1)
16    (CALL1&PUSH 2)                      ; ASCII
18    (CALLS1 168)                        ; RPLACA
20    (LOAD&CDR&STORE 0)
22    (LOAD&JMPIF 0 L13)
25    L25
25    (SKIP 1)
27    (GETVALUE 0)                        ; X
29    (UNBIND1)
30    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $NOUNIFY (X) ...)-89|
(CONST 0) = $NOUNIFY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NOUNIFY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOUNIFY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NOUNIFY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NOUNIFY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NOUNIFY
8     (SKIP&RET 1)


Disassembly of function $NOUNIFY
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $NOUNIFY
(CONST 3) = NONSYMCHK
(CONST 4) = AMPERCHK
(CONST 5) = VERB
(CONST 6) = NOUN
(CONST 7) = EXPLODEC
(CONST 8) = ($ M)
(CONST 9) = MEMQ
(CONST 10) = %
(CONST 11) = IMPLODE
(CONST 12) = PUTPROP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variables : (Y X)
60 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; Y
6     (NIL&PUSH)
7     (GETVALUE&PUSH 0)                   ; X
9     (CONST&PUSH 2)                      ; $NOUNIFY
10    (CALL2 3)                           ; NONSYMCHK
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1 4)                           ; AMPERCHK
16    (SETVALUE 0)                        ; X
18    (PUSH)
19    (CONST&PUSH 5)                      ; VERB
20    (PUSH-UNBOUND 1)
22    (CALLS2 132)                        ; GET
24    (JMPIF1 L55)
26    (GETVALUE&PUSH 0)                   ; X
28    (CONST&PUSH 6)                      ; NOUN
29    (PUSH-UNBOUND 1)
31    (CALLS2&JMPIF 132 L61)              ; GET
34    (GETVALUE&PUSH 0)                   ; X
36    (CALL1 7)                           ; EXPLODEC
38    (SETVALUE 1)                        ; Y
40    (CAR&PUSH)
41    (CONST&PUSH 8)                      ; ($ M)
42    (CALL2 9)                           ; MEMQ
44    (STORE 0)
45    (JMPIF L70)
47    (GETVALUE 1)                        ; Y
49    (CAR&PUSH)
50    (JMPIFNOTEQTO 10 L70)               ; %
53    (GETVALUE 0)                        ; X
55    L55
55    (SKIP 1)
57    (UNBIND 2)
59    (SKIP&RET 2)
61    L61
61    (GETVALUE 0)                        ; X
63    (JMP L55)
65    L65
65    (GETVALUE 1)                        ; Y
67    (CDR)
68    (JMP L76)
70    L70
70    (CONST&PUSH 10)                     ; %
71    (LOAD&JMPIF 1 L65)
74    (GETVALUE 1)                        ; Y
76    L76
76    (CONS&PUSH)
77    (CALL1 11)                          ; IMPLODE
79    (SETVALUE 1)                        ; Y
81    (PUSH)
82    (GETVALUE&PUSH 0)                   ; X
84    (CONST&PUSH 6)                      ; NOUN
85    (CALL 3 12)                         ; PUTPROP
88    (GETVALUE&PUSH 0)                   ; X
90    (GETVALUE&PUSH 1)                   ; Y
92    (CONST&PUSH 5)                      ; VERB
93    (CALL 3 12)                         ; PUTPROP
96    (JMP L55)


Disassembly of function #:|(DEFMFUN $VERBIFY (X) ...)-90|
(CONST 0) = $VERBIFY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $VERBIFY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VERBIFY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $VERBIFY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $VERBIFY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $VERBIFY
8     (SKIP&RET 1)


Disassembly of function $VERBIFY
(CONST 0) = X
(CONST 1) = $VERBIFY
(CONST 2) = NONSYMCHK
(CONST 3) = AMPERCHK
(CONST 4) = NOUN
(CONST 5) = 1
(CONST 6) = GETCHARN
(CONST 7) = #\%
(CONST 8) = #\$
(CONST 9) = EXPLODEN
(CONST 10) = IMPLODE
(CONST 11) = $NOUNIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; $VERBIFY
6     (CALL2 2)                           ; NONSYMCHK
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1 3)                           ; AMPERCHK
12    (SETVALUE 0)                        ; X
14    (PUSH)
15    (CONST&PUSH 4)                      ; NOUN
16    (PUSH-UNBOUND 1)
18    (CALLS2 132)                        ; GET
20    (JMPIF1 L54)
22    (GETVALUE&PUSH 0)                   ; X
24    (CONST&PUSH 5)                      ; 1
25    (CALL2&PUSH 6)                      ; GETCHARN
27    (CONST&PUSH 7)                      ; #\%
28    (CALLSR&JMPIFNOT 1 7 L52)           ; CHAR=
32    (CONST&PUSH 8)                      ; #\$
33    (GETVALUE&PUSH 0)                   ; X
35    (CALL1 9)                           ; EXPLODEN
37    (CDR)
38    (CONS&PUSH)
39    (CALL1&PUSH 10)                     ; IMPLODE
41    (CALL1 11)                          ; $NOUNIFY
43    (GETVALUE&PUSH 0)                   ; X
45    (CONST&PUSH 4)                      ; NOUN
46    (PUSH-UNBOUND 1)
48    (CALLS2 132)                        ; GET
50    (JMPIF1 L54)
52    L52
52    (GETVALUE 0)                        ; X
54    L54
54    (UNBIND1)
55    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN DOLLARIFY-NAME (NAME) ...)-91|
(CONST 0) = DOLLARIFY-NAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DOLLARIFY-NAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DOLLARIFY-NAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DOLLARIFY-NAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DOLLARIFY-NAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DOLLARIFY-NAME
8     (SKIP&RET 1)


Disassembly of function DOLLARIFY-NAME
(CONST 0) = NAME
(CONST 1) = 1
(CONST 2) = GETCHARN
(CONST 3) = #\&
(CONST 4) = OPR
(CONST 5) = CASIFY-EXPLODEN
(CONST 6) = IMPLODE
(CONST 7) = #\$
(CONST 8) = OP
(CONST 9) = PUTPROP
(CONST 10) = $PROPS
(CONST 11) = ADD2LNC
(CONST 12) = #\%
(CONST 13) = $VERBIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PROPS NAME)
65 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NAME
3     (GETVALUE&PUSH 0)                   ; NAME
5     (CONST&PUSH 1)                      ; 1
6     (CALL2&PUSH 2)                      ; GETCHARN
8     (LOAD&PUSH 0)
9     (CONST&PUSH 3)                      ; #\&
10    (CALLSR&JMPIF 1 7 L28)              ; CHAR=
14    (LOAD&PUSH 0)
15    (CONST&PUSH 12)                     ; #\%
16    (CALLSR&JMPIF 1 7 L89)              ; CHAR=
21    (GETVALUE 0)                        ; NAME
23    (SKIP 1)
25    (JMP L99)
28    L28
28    (GETVALUE&PUSH 0)                   ; NAME
30    (CONST&PUSH 4)                      ; OPR
31    (PUSH-UNBOUND 1)
33    (CALLS2 132)                        ; GET
35    (JMPIF1 L97)
37    (GETVALUE&PUSH 0)                   ; NAME
39    (CALL1&PUSH 5)                      ; CASIFY-EXPLODEN
41    (PUSH-NIL 2)
43    (CONST&PUSH 3)                      ; #\&
44    (LOAD 3)
45    (CONS&PUSH)
46    (CALL1 6)                           ; IMPLODE
48    (STORE 1)
49    (PUSH)
50    (CONST&PUSH 4)                      ; OPR
51    (PUSH-UNBOUND 1)
53    (CALLS2 132)                        ; GET
55    (JMPIF1 L85)
57    (CONST&PUSH 7)                      ; #\$
58    (LOAD 3)
59    (CONS&PUSH)
60    (CALL1 6)                           ; IMPLODE
62    (STORE 0)
63    (PUSH)
64    (LOAD&PUSH 2)
65    (CONST&PUSH 8)                      ; OP
66    (CALL 3 9)                          ; PUTPROP
69    (LOAD&PUSH 1)
70    (LOAD&PUSH 1)
71    (CONST&PUSH 4)                      ; OPR
72    (CALL 3 9)                          ; PUTPROP
75    (LOAD&PUSH 1)
76    (GETVALUE&PUSH 10)                  ; $PROPS
78    (CALL2 11)                          ; ADD2LNC
80    (POP)
81    (SKIP 3)
83    (JMP L99)
85    L85
85    (SKIP 4)
87    (JMP L99)
89    L89
89    (GETVALUE&PUSH 0)                   ; NAME
91    (CALL1 13)                          ; $VERBIFY
93    (SKIP 1)
95    (JMP L99)
97    L97
97    (SKIP 1)
99    L99
99    (UNBIND1)
100   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $RANDOM N ...)-92|
(CONST 0) = $RANDOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RANDOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RANDOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RANDOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RANDOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RANDOM
8     (SKIP&RET 1)


Disassembly of function $RANDOM
(CONST 0) = #.#'RANDOM
(CONST 1) = LISTIFY1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; #.#'RANDOM
4     (LOAD&PUSH 1)
5     (LOAD&PUSH 4)
6     (CALL2 1)                           ; LISTIFY1
8     (APPLY&SKIP&RET 0 3)


Disassembly of function #:|(DEFMSPEC $STRING (FORM) ...)-93-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $STRING (FORM) ...)-93-2-1|>
(CONST 1) = $STRING
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $STRING (FORM) ...)-93-2-1|>
1     (CONST&PUSH 1)                      ; $STRING
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $STRING (FORM) ...)-93-2-1|
(CONST 0) = FEXPRCHECK
(CONST 1) = STRMEVAL
(CONST 2) = $GRIND
(CONST 3) = STRGRIND
(CONST 4) = MSTRING
(CONST 5) = ST
(CONST 6) = REPHRASE
(CONST 7) = #\&
(CONST 8) = IMPLODE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($GRIND)
writes special variables : (REPHRASE ST)
24 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; FEXPRCHECK
3     (CALL1 1)                           ; STRMEVAL
5     (STORE 1)
6     (GETVALUE 2)                        ; $GRIND
8     (JMPIF L29)
10    (LOAD&PUSH 1)
11    (CALL1 4)                           ; MSTRING
13    L13
13    (STORE 1)
14    (PUSH)
15    (CALLS2 72)                         ; REVERSE
17    (SETVALUE 5)                        ; ST
19    (T)
20    (SETVALUE 6)                        ; REPHRASE
22    (CONST&PUSH 7)                      ; #\&
23    (LOAD 2)
24    (CONS&PUSH)
25    (CALL1 8)                           ; IMPLODE
27    (SKIP&RET 2)
29    L29
29    (LOAD&PUSH 1)
30    (CALL1 3)                           ; STRGRIND
32    (JMP L13)


Disassembly of function #:|(DEFMFUN MAKSTRING (X) ...)-94|
(CONST 0) = MAKSTRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKSTRING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKSTRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKSTRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKSTRING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKSTRING
8     (SKIP&RET 1)


Disassembly of function MAKSTRING
(CONST 0) = X
(CONST 1) = MSTRING
(CONST 2) = ASCII
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; MSTRING
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (LOAD&JMPIFNOT 0 L25)
13    L13
13    (LOAD&PUSH 0)
14    (LOAD&CAR&PUSH 1)
16    (CALL1&PUSH 2)                      ; ASCII
18    (CALLS1 168)                        ; RPLACA
20    (LOAD&CDR&STORE 0)
22    (LOAD&JMPIF 0 L13)
25    L25
25    (SKIP 1)
27    (GETVALUE 0)                        ; X
29    (UNBIND1)
30    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN STRMEVAL (X) ...)-95|
(CONST 0) = STRMEVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRMEVAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRMEVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRMEVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRMEVAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRMEVAL
8     (SKIP&RET 1)


Disassembly of function STRMEVAL
(CONST 0) = X
(CONST 1) = MEVAL1
(CONST 2) = (MSETQ MDEFINE MDEFMACRO)
(CONST 3) = MEMQ
(CONST 4) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L22)
7     (GETVALUE 0)                        ; X
9     (CAR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; (MSETQ MDEFINE MDEFMACRO)
12    (CALL2&JMPIF 3 L28)                 ; MEMQ
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1 4)                           ; MEVAL
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (GETVALUE&PUSH 0)                   ; X
24    (CALL1 1)                           ; MEVAL1
26    (JMP L19)
28    L28
28    (GETVALUE 0)                        ; X
30    (JMP L19)


Disassembly of function #:|(PROG1 '(ALIAS PROPERTIES) (MAPC #'# '#) ...)-96|
(CONST 0) = 
(($BLOCK MPROG BLOCK) ($LAMBDA LAMBDA LAMBDA) ($ABS MABS ABS)
 ($SUBST $SUBSTITUTE SUBST) ($GO MGO GO) ($SIGNUM %SIGNUM SIGNUM)
 ($RETURN MRETURN RETURN) ($FACTORIAL MFACTORIAL FACTORIAL)
 ($NOUUO NOUUO NOUUO) ($RSET *RSET RSET) ($IBASE *READ-BASE* *READ-BASE*)
 ($OBASE *PRINT-BASE* OBASE) ($NOPOINT *NOPOINT NOPOINT)
 ($MODULUS MODULUS MODULUS) ($ZUNDERFLOW ZUNDERFLOW ZUNDERFLOW)
 ($TTYOFF ^W TTYOFF) ($WRITEFILE_ON ^R WRITEFILE_ON)
 ($MODE_DECLARE $MODEDECLARE MODE_DECLARE))
(CONST 1) = X
(CONST 2) = ALIAS
(CONST 3) = PUTPROP
(CONST 4) = REVERSEALIAS
(CONST 5) = 
(($RATCOEFF $RATCOEF) ($RATNUM $RATNUMER) ($TRUE T) ($BINOM %BINOMIAL)
 ($DERIVATIVE $DIFF) ($PROD $PRODUCT) ($BOTHCOEFF $BOTHCOEF))
(CONST 6) = (ALIAS PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
51 byte-code instructions:
0     (CONST&PUSH 0)                      ; (# # # ...)
1     (JMP L37)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE 1)                        ; X
10    (CAR&PUSH)
11    (GETVALUE 1)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; ALIAS
16    (CALL 3 3)                          ; PUTPROP
19    (GETVALUE 1)                        ; X
21    (CDR)
22    (CAR&PUSH)
23    (GETVALUE 1)                        ; X
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (CONST&PUSH 4)                      ; REVERSEALIAS
29    (CALL 3 3)                          ; PUTPROP
32    (UNBIND1)
33    (SKIP 1)
35    (LOAD&CDR&STORE 0)
37    L37
37    (LOAD&PUSH 0)
38    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
41    (SKIP 1)
43    (CONST&PUSH 5)                      ; (# # # ...)
44    (JMP L67)
46    L46
46    (LOAD&CAR&PUSH 0)
48    (LOAD 0)
49    (BIND 1)                            ; X
51    (GETVALUE 1)                        ; X
53    (CAR&PUSH)
54    (GETVALUE 1)                        ; X
56    (CDR)
57    (CAR&PUSH)
58    (CONST&PUSH 2)                      ; ALIAS
59    (CALL 3 3)                          ; PUTPROP
62    (UNBIND1)
63    (SKIP 1)
65    (LOAD&CDR&STORE 0)
67    L67
67    (LOAD&PUSH 0)
68    (CALLS1&JMPIFNOT 146 L46)           ; ENDP
71    (SKIP 1)
73    (CONST 6)                           ; (ALIAS PROPERTIES)
74    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN AMPERCHK (NAME) ...)-97|
(CONST 0) = AMPERCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = FUNCTION
(CONST 3) = 
" $AB ==> $AB,
   $aB ==> $aB,
   &aB ==> $AB,
   |aB| ==> |aB| "
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
(CONST 5) = #<COMPILED-CLOSURE AMPERCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; AMPERCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AMPERCHK
4     (CONST&PUSH 2)                      ; FUNCTION
5     (CONST&PUSH 3)                      ; " $AB ==> $AB,
   $aB ==> $aB,
   &aB ==> $AB,
   |aB| ==> |aB| "
6     (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
9     (CONST&PUSH 0)                      ; AMPERCHK
10    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE AMPERCHK>
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (CONST 0)                           ; AMPERCHK
14    (SKIP&RET 1)


Disassembly of function AMPERCHK
(CONST 0) = NAME
(CONST 1) = 1
(CONST 2) = GETCHARN
(CONST 3) = #\&
(CONST 4) = OPR
(CONST 5) = #\$
(CONST 6) = CASIFY-EXPLODEN
(CONST 7) = IMPLODE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NAME)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NAME
3     (GETVALUE&PUSH 0)                   ; NAME
5     (CONST&PUSH 1)                      ; 1
6     (CALL2&PUSH 2)                      ; GETCHARN
8     (CONST&PUSH 3)                      ; #\&
9     (CALLSR&JMPIF 1 7 L18)              ; CHAR=
13    (GETVALUE 0)                        ; NAME
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)
18    L18
18    (GETVALUE&PUSH 0)                   ; NAME
20    (CONST&PUSH 4)                      ; OPR
21    (PUSH-UNBOUND 1)
23    (CALLS2 132)                        ; GET
25    (JMPIF1 L15)
27    (CONST&PUSH 5)                      ; #\$
28    (GETVALUE&PUSH 0)                   ; NAME
30    (CALL1 6)                           ; CASIFY-EXPLODEN
32    (CONS&PUSH)
33    (CALL1 7)                           ; IMPLODE
35    (JMP L15)


Disassembly of function #:|(DEFUN CASIFY-EXPLODEN (X) ...)-98|
(CONST 0) = CASIFY-EXPLODEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CASIFY-EXPLODEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CASIFY-EXPLODEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CASIFY-EXPLODEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CASIFY-EXPLODEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CASIFY-EXPLODEN
8     (SKIP&RET 1)


Disassembly of function CASIFY-EXPLODEN
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = GETCHARN
(CONST 3) = #\&
(CONST 4) = EXPLODEN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 1
6     (CALL2&PUSH 2)                      ; GETCHARN
8     (CONST&PUSH 3)                      ; #\&
9     (CALLSR&JMPIF 1 7 L20)              ; CHAR=
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL1 4)                           ; EXPLODEN
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)
20    L20
20    (GETVALUE&PUSH 0)                   ; X
22    (CALLS1&PUSH 75)                    ; STRING
24    (PUSH-UNBOUND 2)
26    (CALLS1&PUSH 70)                    ; STRING-UPCASE
28    (CALL1 4)                           ; EXPLODEN
30    (CDR)
31    (JMP L17)


Disassembly of function #:|(DEFMSPEC $STRINGOUT (X) ...)-99-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $STRINGOUT (X) ...)-99-2-1|>
(CONST 1) = $STRINGOUT
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $STRINGOUT (X) ...)-99-2-1|>
1     (CONST&PUSH 1)                      ; $STRINGOUT
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $STRINGOUT (X) ...)-99-2-1|
(CONST 0) = X
(CONST 1) = $FILENAME_MERGE
(CONST 2) = :OUTPUT
(CONST 3) = SAVEFILE
(CONST 4) = #(NIL)
(CONST 5) = (#(ERROR 91) 3 . 2)
(CONST 6) = ($ALL $INPUT)
(CONST 7) = MEMQ
(CONST 8) = $INCHAR
(CONST 9) = GETLABELS*
(CONST 10) = $VALUES
(CONST 11) = (MSETQ)
(CONST 12) = $FUNCTIONS
(CONST 13) = CONSFUNDEF
(CONST 14) = $ARRAYS
(CONST 15) = AEXPR
(CONST 16) = MGET
(CONST 17) = $MACROS
(CONST 18) = LISTARGP
(CONST 19) = GETLABELS
(CONST 20) = $GRIND
(CONST 21) = STRMEVAL
(CONST 22) = MGRIND
(CONST 23) = MSTRING
(CONST 24) = MAKNAM
(CONST 25) = NODISP
(CONST 26) = $STRDISP
(CONST 27) = #\$
(CONST 28) = TYO
(CONST 29) = SEMI-COLON-CHAR
(CONST 30) = ERRSET
(CONST 31) = CLOSE
(CONST 32) = :ABORT
(CONST 33) = ERRBREAK1
(CONST 34) = "Error in STRINGOUT attempt"
(CONST 35) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(ERRSET SEMI-COLON-CHAR $STRDISP $GRIND SAVEFILE $MACROS $ARRAYS $FUNCTIONS
 $VALUES $INCHAR X)
writes special variable : (X)
265 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (SETVALUE 0)                        ; X
8     (PUSH-NIL 4)
10    (GETVALUE 0)                        ; X
12    (CAR&PUSH)
13    (CALL1 1)                           ; $FILENAME_MERGE
15    (STORE 3)
16    (GETVALUE 0)                        ; X
18    (CDR)
19    (SETVALUE 0)                        ; X
21    (LOAD&PUSH 3)
22    (CONST&PUSH 2)                      ; :OUTPUT
23    (PUSH-UNBOUND 5)
25    (CALLS1 249)                        ; OPEN
27    (BIND 3)                            ; SAVEFILE
29    (UNWIND-PROTECT-OPEN L401)
32    (NIL&PUSH)
33    (TAGBODY-OPEN 4 L366)               ; #(NIL)
37    (HANDLER-OPEN 5 L91)                ; (#(ERROR 91) 3 . 2)
39    (GETVALUE&PUSH 0)                   ; X
41    (LOAD&JMPIFNOT 0 L355)
45    L45
45    (LOAD&CAR&PUSH 0)
47    (CONST&PUSH 6)                      ; ($ALL $INPUT)
48    (CALL2&JMPIF 7 L102)                ; MEMQ
51    (LOAD&CAR&PUSH 0)
53    (JMPIFEQTO 10 L109)                 ; $VALUES
56    (LOAD&CAR&PUSH 0)
58    (JMPIFEQTO 12 L159)                 ; $FUNCTIONS
62    (LOAD&CAR&PUSH 0)
64    (CALL1 18)                          ; LISTARGP
66    (STORE 16)
68    (JMPIFNOT L303)
71    (CAR&PUSH)
72    (LOAD&CDR&PUSH 17)
74    (T&PUSH)
75    (CALL&PUSH 3 19)                    ; GETLABELS
78    L78
78    (LOAD&CDR&PUSH 1)
80    (CALLSR 2 35)                       ; NCONC
83    L83
83    (STORE 0)
84    (LOAD&JMPIFNOT 0 L355)
88    (JMP L306)
91    L91
91    (HANDLER-BEGIN&PUSH)
92    (LOAD 0)
93    (STOREI 0 0 4)
97    (GO-I 0 0 2 0)
102   L102
102   (GETVALUE&PUSH 8)                   ; $INCHAR
104   (T&PUSH)
105   (CALL2&PUSH 9)                      ; GETLABELS*
107   (JMP L78)
109   L109
109   (NIL&PUSH)
110   (GETVALUE 10)                       ; $VALUES
112   (CDR&PUSH)
113   (JMP L146)
115   L115
115   (LOAD&CAR&PUSH 0)
117   (LOAD 0)
118   (BIND 0)                            ; X
120   (GETVALUE&PUSH 0)                   ; X
122   (CALLS1&JMPIFNOT 79 L136)           ; BOUNDP
125   (CONST&PUSH 11)                     ; (MSETQ)
126   (GETVALUE&PUSH 0)                   ; X
128   (GETVALUE&PUSH 0)                   ; X
130   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
132   (LIST&PUSH 3)
134   (NIL)
135   (CONS)
136   L136
136   (UNBIND1)
137   (PUSH)
138   (LOAD&PUSH 3)
139   (CALLS1&STORE 163 2)                ; NRECONC
142   (SKIP 1)
144   (LOAD&CDR&STORE 0)
146   L146
146   (LOAD&PUSH 0)
147   (CALLS1&JMPIFNOT 146 L115)          ; ENDP
150   (SKIP 1)
152   (LOAD&PUSH 0)
153   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
156   (JMP L78)
159   L159
159   (NIL&PUSH)
160   (GETVALUE 12)                       ; $FUNCTIONS
162   (CDR&PUSH)
163   (JMP L187)
165   L165
165   (LOAD&CAR&PUSH 0)
167   (LOAD 0)
168   (BIND 0)                            ; X
170   (GETVALUE 0)                        ; X
172   (CAR)
173   (CAR&PUSH)
174   (PUSH-NIL 2)
176   (CALL 3 13)                         ; CONSFUNDEF
179   (UNBIND1)
180   (PUSH)
181   (LOAD&CONS&STORE 2)
183   (SKIP 1)
185   (LOAD&CDR&STORE 0)
187   L187
187   (LOAD&PUSH 0)
188   (CALLS1&JMPIFNOT 146 L165)          ; ENDP
191   (SKIP 1)
193   (LOAD&PUSH 0)
194   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
197   (NIL&PUSH)
198   (GETVALUE 14)                       ; $ARRAYS
200   (CDR&PUSH)
201   (JMP L233)
203   L203
203   (LOAD&CAR&PUSH 0)
205   (LOAD 0)
206   (BIND 0)                            ; X
208   (GETVALUE&PUSH 0)                   ; X
210   (CONST&PUSH 15)                     ; AEXPR
211   (CALL2&JMPIFNOT 16 L223)            ; MGET
214   (GETVALUE&PUSH 0)                   ; X
216   (T&PUSH)
217   (NIL&PUSH)
218   (CALL&PUSH 3 13)                    ; CONSFUNDEF
221   (NIL)
222   (CONS)
223   L223
223   (UNBIND1)
224   (PUSH)
225   (LOAD&PUSH 3)
226   (CALLS1&STORE 163 2)                ; NRECONC
229   (SKIP 1)
231   (LOAD&CDR&STORE 0)
233   L233
233   (LOAD&PUSH 0)
234   (CALLS1&JMPIFNOT 146 L203)          ; ENDP
237   (SKIP 1)
239   (LOAD&PUSH 0)
240   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
243   (NIL&PUSH)
244   (GETVALUE 17)                       ; $MACROS
246   (CDR&PUSH)
247   (JMP L271)
249   L249
249   (LOAD&CAR&PUSH 0)
251   (LOAD 0)
252   (BIND 0)                            ; X
254   (GETVALUE 0)                        ; X
256   (CAR)
257   (CAR&PUSH)
258   (PUSH-NIL 2)
260   (CALL 3 13)                         ; CONSFUNDEF
263   (UNBIND1)
264   (PUSH)
265   (LOAD&CONS&STORE 2)
267   (SKIP 1)
269   (LOAD&CDR&STORE 0)
271   L271
271   (LOAD&PUSH 0)
272   (CALLS1&JMPIFNOT 146 L249)          ; ENDP
275   (SKIP 1)
277   (LOAD&PUSH 0)
278   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
281   (LOAD&CDR&PUSH 3)
283   (CALLSR 4 35)                       ; NCONC
286   (JMP L83)
289   L289
289   (LOAD&CAR&PUSH 0)
291   (CALL1&PUSH 21)                     ; STRMEVAL
293   (GETVALUE&PUSH 3)                   ; SAVEFILE
295   (CALL2 22)                          ; MGRIND
297   (JMP L326)
299   L299
299   (CONST 27)                          ; #\$
301   (JMP L344)
303   L303
303   (LOAD&JMPIFNOT 0 L355)
306   L306
306   (GETVALUE&PUSH 3)                   ; SAVEFILE
308   (CALLS1 139)                        ; TERPRI
310   (GETVALUE 20)                       ; $GRIND
312   (JMPIF L289)
314   (LOAD&CAR&PUSH 0)
316   (CALL1&PUSH 21)                     ; STRMEVAL
318   (CALL1&PUSH 23)                     ; MSTRING
320   (CALL1&PUSH 24)                     ; MAKNAM
322   (GETVALUE&PUSH 3)                   ; SAVEFILE
324   (CALLS1 132)                        ; PRINC
326   L326
326   (LOAD 0)
327   (CAR)
328   (JMPIFCONSP L338)
330   (LOAD&CAR&PUSH 0)
332   (CONST&PUSH 25)                     ; NODISP
333   (PUSH-UNBOUND 1)
335   (CALLS2&JMPIF 132 L299)             ; GET
338   L338
338   (GETVALUE 26)                       ; $STRDISP
340   (JMPIFNOT L299)
342   (GETVALUE 29)                       ; SEMI-COLON-CHAR
344   L344
344   (PUSH)
345   (GETVALUE&PUSH 3)                   ; SAVEFILE
347   (CALL2 28)                          ; TYO
349   (LOAD&CDR&STORE 0)
351   (LOAD&JMPIF 0 L45)
355   L355
355   (SKIP 5)
357   (TAGBODY-CLOSE)
358   (SKIP 1)
360   (JMP L377)
362   L362
362   (LOAD&PUSH 4)
363   (CALLSR 0 29)                       ; ERROR
366   L366
366   (GETVALUE 30)                       ; ERRSET
368   (JMPIF L362)
370   (TAGBODY-CLOSE)
371   (SKIP 1)
373   (JMPIF L377)
375   (T&STORE 7)
377   L377
377   (GETVALUE&PUSH 3)                   ; SAVEFILE
379   (CALLS1&STORE 245 5)                ; TRUENAME
382   (GETVALUE&PUSH 3)                   ; SAVEFILE
384   (CALLS1 139)                        ; TERPRI
386   (GETVALUE 3)                        ; SAVEFILE
388   (JMPIFNOT L393)
390   (PUSH)
391   (CALL1 31)                          ; CLOSE
393   L393
393   (VALUES0)
394   (UNWIND-PROTECT-NORMAL-EXIT)
395   (GETVALUE 3)                        ; SAVEFILE
397   (JMPIFNOT L412)
399   (JMP L405)
401   L401
401   (GETVALUE 3)                        ; SAVEFILE
403   (JMPIFNOT L412)
405   L405
405   (PUSH)
406   (CONST&PUSH 32)                     ; :ABORT
408   (T&PUSH)
409   (CALL 3 31)                         ; CLOSE
412   L412
412   (UNWIND-PROTECT-CLOSE)
413   (UNBIND1)
414   (LOAD&JMPIFNOT 2 L426)
417   (CONST 33)                          ; ERRBREAK1
419   (BIND 30)                           ; ERRSET
421   (CONST&PUSH 34)                     ; "Error in STRINGOUT attempt"
423   (CALL1 35)                          ; MERROR
425   (UNBIND1)
426   L426
426   (LOAD&PUSH 0)
427   (PUSH-UNBOUND 1)
429   (CALLS1 244)                        ; NAMESTRING
431   (SKIP 4)
433   (UNBIND1)
434   (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $LABELS (CHAR) ...)-100-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $LABELS (CHAR) ...)-100-2-1|>
(CONST 1) = $LABELS
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $LABELS (CHAR) ...)-100-2-1|>
1     (CONST&PUSH 1)                      ; $LABELS
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $LABELS (CHAR) ...)-100-2-1|
(CONST 0) = FEXPRCHECK
(CONST 1) = $LABELS
(CONST 2) = NONSYMCHK
(CONST 3) = (MLIST SIMP)
(CONST 4) = GETLABELS*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FEXPRCHECK
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $LABELS
6     (CALL2 2)                           ; NONSYMCHK
8     (CONST&PUSH 3)                      ; (MLIST SIMP)
9     (LOAD&PUSH 2)
10    (NIL&PUSH)
11    (CALL2&PUSH 4)                      ; GETLABELS*
13    (CALLS2 73)                         ; NREVERSE
15    (CONS)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $%TH (X) ...)-101|
(CONST 0) = $%TH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $%TH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%TH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $%TH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $%TH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $%TH
8     (SKIP&RET 1)


Disassembly of function $%TH
(CONST 0) = X
(CONST 1) = ML-TYPEP
(CONST 2) = FIXNUM
(CONST 3) = 0
(CONST 4) = $%TH
(CONST 5) = IMPROPER-ARG-ERR
(CONST 6) = $LABELS
(CONST 7) = $OUTCHAR
(CONST 8) = GETLABCHARN
(CONST 9) = "Improper call to %TH"
(CONST 10) = MERROR
(CONST 11) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($OUTCHAR $LABELS X)
writes special variable : (X)
58 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 2)
5     (GETVALUE&PUSH 0)                   ; X
7     (CALL1&PUSH 1)                      ; ML-TYPEP
9     (JMPIFNOTEQTO 2 L19)                ; FIXNUM
12    (GETVALUE&PUSH 0)                   ; X
14    (CONST&PUSH 3)                      ; 0
15    (CALLSR&JMPIFNOT 1 45 L24)          ; =
19    L19
19    (GETVALUE&PUSH 0)                   ; X
21    (CONST&PUSH 4)                      ; $%TH
22    (CALL2 5)                           ; IMPROPER-ARG-ERR
24    L24
24    (GETVALUE&PUSH 0)                   ; X
26    (CONST&PUSH 3)                      ; 0
27    (CALLSR&JMPIFNOT 1 48 L38)          ; >
31    (GETVALUE&PUSH 0)                   ; X
33    (CALLSR 0 54)                       ; -
36    (SETVALUE 0)                        ; X
38    L38
38    (GETVALUE 6)                        ; $LABELS
40    (CDR)
41    (JMPIF L48)
43    (LOAD&JMPIFNOT 1 L68)
46    (JMP L71)
48    L48
48    (GETVALUE 6)                        ; $LABELS
50    (CDR)
51    (CDR)
52    (STORE 1)
53    (GETVALUE&PUSH 7)                   ; $OUTCHAR
55    (CALL1 8)                           ; GETLABCHARN
57    (STORE 0)
58    (LOAD&JMPIFNOT 1 L68)
61    (JMP L71)
63    L63
63    (LOAD&CDR&STORE 1)
65    (LOAD&JMPIF 1 L71)
68    L68
68    (CONST&PUSH 9)                      ; "Improper call to %TH"
69    (CALL1 10)                          ; MERROR
71    L71
71    (LOAD&CAR&PUSH 1)
73    (CALL1&PUSH 8)                      ; GETLABCHARN
75    (LOAD&PUSH 1)
76    (CALLSR&JMPIFNOT 1 7 L63)           ; CHAR=
80    (GETVALUE&PUSH 0)                   ; X
82    (CALLS2 150)                        ; 1+
84    (SETVALUE 0)                        ; X
86    (PUSH)
87    (CONST&PUSH 3)                      ; 0
88    (CALLSR&JMPIFNOT 1 45 L63)          ; =
92    (LOAD&CAR&PUSH 1)
94    (CALL1 11)                          ; MEVAL
96    (SKIP 2)
98    (UNBIND1)
99    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN GETLABELS (N1 N2 FLAG) ...)-102|
(CONST 0) = GETLABELS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETLABELS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETLABELS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETLABELS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETLABELS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETLABELS
8     (SKIP&RET 1)


Disassembly of function GETLABELS
(CONST 0) = FLAG
(CONST 1) = $INCHAR
(CONST 2) = EXPLODEN
(CONST 3) = $LINECHAR
(CONST 4) = $OUTCHAR
(CONST 5) = MEXPLODEN
(CONST 6) = X
(CONST 7) = IMPLODE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $OUTCHAR $LINECHAR $INCHAR FLAG)
53 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FLAG
3     (LOAD&PUSH 6)
4     (NIL&PUSH)
5     (GETVALUE 0)                        ; FLAG
7     (JMPIF L25)
9     (GETVALUE&PUSH 1)                   ; $INCHAR
11    (CALL1&PUSH 2)                      ; EXPLODEN
13    (GETVALUE&PUSH 3)                   ; $LINECHAR
15    (CALL1&PUSH 2)                      ; EXPLODEN
17    (GETVALUE&PUSH 4)                   ; $OUTCHAR
19    (CALL1&PUSH 2)                      ; EXPLODEN
21    (LIST&PUSH 3)
23    (JMP L72)
25    L25
25    (GETVALUE&PUSH 1)                   ; $INCHAR
27    (CALL1&PUSH 2)                      ; EXPLODEN
29    (LIST&PUSH 1)
31    (JMP L72)
33    L33
33    (LOAD&PUSH 0)
34    (LOAD&PUSH 3)
35    (CALL1 5)                           ; MEXPLODEN
37    (BIND 6)                            ; X
39    (NIL&PUSH)
40    (LOAD&JMPIFNOT 4 L65)
43    L43
43    (LOAD&CAR&PUSH 4)
45    (GETVALUE&PUSH 6)                   ; X
47    (CALLSR&PUSH 2 34)                  ; APPEND
50    (CALL1 7)                           ; IMPLODE
52    (STORE 0)
53    (PUSH)
54    (CALLS1&JMPIFNOT 79 L60)            ; BOUNDP
57    (LOAD&PUSH 0)
58    (LOAD&CONS&STORE 6)
60    L60
60    (LOAD&CDR&STORE 4)
62    (LOAD&JMPIF 4 L43)
65    L65
65    (SKIP 1)
67    (UNBIND1)
68    (SKIP 1)
70    (LOAD&INC&STORE 2)
72    L72
72    (LOAD&PUSH 2)
73    (LOAD&PUSH 9)
74    (CALLSR&JMPIFNOT 1 48 L33)          ; >
78    (LOAD&PUSH 1)
79    (CALLS2 73)                         ; NREVERSE
81    (SKIP 3)
83    (UNBIND1)
84    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN GETLABELS* (CHAR FLAG) ...)-103|
(CONST 0) = GETLABELS*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETLABELS*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETLABELS*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETLABELS*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETLABELS*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETLABELS*
8     (SKIP&RET 1)


Disassembly of function GETLABELS*
(CONST 0) = FLAG
(CONST 1) = $LABELS
(CONST 2) = GETLABCHARN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($LABELS FLAG)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FLAG
3     (GETVALUE 0)                        ; FLAG
5     (JMPIF L42)
7     (GETVALUE 1)                        ; $LABELS
9     (CDR)
10    L10
10    (PUSH)
11    (LOAD&PUSH 6)
12    (CALL1&PUSH 2)                      ; GETLABCHARN
14    (NIL&PUSH)
15    (LOAD&JMPIFNOT 2 L36)
18    L18
18    (LOAD&CAR&PUSH 2)
20    (CALL1&PUSH 2)                      ; GETLABCHARN
22    (LOAD&PUSH 2)
23    (CALLSR&JMPIFNOT 1 7 L31)           ; CHAR=
27    (LOAD&CAR&PUSH 2)
29    (LOAD&CONS&STORE 0)
31    L31
31    (LOAD&CDR&STORE 2)
33    (LOAD&JMPIF 2 L18)
36    L36
36    (POP)
37    (SKIP 2)
39    (UNBIND1)
40    (SKIP&RET 3)
42    L42
42    (GETVALUE 1)                        ; $LABELS
44    (CDR)
45    (CDR)
46    (JMP L10)


Disassembly of function #:|(DEFMFUN GETLABCHARN (LABEL) ...)-104|
(CONST 0) = GETLABCHARN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETLABCHARN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETLABCHARN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETLABCHARN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETLABCHARN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETLABCHARN
8     (SKIP&RET 1)


Disassembly of function GETLABCHARN
(CONST 0) = LABEL
(CONST 1) = 2
(CONST 2) = GETCHARN
(CONST 3) = #\%
(CONST 4) = 3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LABEL)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; LABEL
3     (GETVALUE&PUSH 0)                   ; LABEL
5     (CONST&PUSH 1)                      ; 2
6     (CALL2&PUSH 2)                      ; GETCHARN
8     (LOAD&PUSH 0)
9     (CONST&PUSH 3)                      ; #\%
10    (CALLSR&JMPIF 1 7 L18)              ; CHAR=
14    (POP)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)
18    L18
18    (GETVALUE&PUSH 0)                   ; LABEL
20    (CONST&PUSH 4)                      ; 3
21    (CALL2 2)                           ; GETCHARN
23    (SKIP 1)
25    (JMP L15)


Disassembly of function #:|(DEFMSPEC $ERRCATCH (FORM) ...)-105-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $ERRCATCH (FORM) ...)-105-2-1|>
(CONST 1) = $ERRCATCH
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $ERRCATCH (FORM) ...)-105-2-1|>
1     (CONST&PUSH 1)                      ; $ERRCATCH
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $ERRCATCH (FORM) ...)-105-2-1|
(CONST 0) = BINDLIST
(CONST 1) = LOCLIST
(CONST 2) = ERRCATCH
(CONST 3) = DEBUG
(CONST 4) = #(NIL)
(CONST 5) = (#(ERROR 30) 1 . 1)
(CONST 6) = MEVALN
(CONST 7) = ERRSET
(CONST 8) = ERRLFUN1
(CONST 9) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRCATCH ERRSET LOCLIST BINDLIST)
43 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; BINDLIST
2     (GETVALUE 1)                        ; LOCLIST
4     (CONS)
5     (BIND 2)                            ; ERRCATCH
7     (NIL&PUSH)
8     (NIL)
9     (BIND 3)                            ; DEBUG
11    (NIL&PUSH)
12    (TAGBODY-OPEN 4 L45)                ; #(NIL)
15    (HANDLER-OPEN 5 L30)                ; (#(ERROR 30) 1 . 1)
17    (LOAD&CDR&PUSH 17)
19    (CALL1&PUSH 6)                      ; MEVALN
21    (LIST 1)
23    (SKIP 4)
25    (TAGBODY-CLOSE)
26    (SKIP 1)
28    (JMP L52)
30    L30
30    (HANDLER-BEGIN&PUSH)
31    (LOAD 0)
32    (STOREI 0 0 4)
36    (GO-I 0 0 2 0)
41    L41
41    (LOAD&PUSH 4)
42    (CALLSR 0 29)                       ; ERROR
45    L45
45    (GETVALUE 7)                        ; ERRSET
47    (JMPIF L41)
49    (TAGBODY-CLOSE)
50    (SKIP 1)
52    L52
52    (UNBIND1)
53    (STORE 0)
54    (JMPIF L60)
56    (GETVALUE&PUSH 2)                   ; ERRCATCH
58    (CALL1 8)                           ; ERRLFUN1
60    L60
60    (CONST&PUSH 9)                      ; (MLIST)
61    (LOAD 1)
62    (CONS)
63    (SKIP 1)
65    (UNBIND1)
66    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $CATCH (FORM) ...)-106-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $CATCH (FORM) ...)-106-2-1|>
(CONST 1) = $CATCH
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $CATCH (FORM) ...)-106-2-1|>
1     (CONST&PUSH 1)                      ; $CATCH
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $CATCH (FORM) ...)-106-2-1|
(CONST 0) = BINDLIST
(CONST 1) = LOCLIST
(CONST 2) = MCATCH
(CONST 3) = MEVALN
(CONST 4) = ERRLFUN1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MCATCH LOCLIST BINDLIST)
16 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; BINDLIST
2     (GETVALUE 1)                        ; LOCLIST
4     (CONS)
5     (BIND 2)                            ; MCATCH
7     (CONST 2)                           ; MCATCH
8     (CATCH-OPEN L15)
10    (LOAD&CDR&PUSH 7)
12    (CALL1 3)                           ; MEVALN
14    (CATCH-CLOSE)
15    L15
15    (PUSH)
16    (GETVALUE&PUSH 2)                   ; MCATCH
18    (CALL1 4)                           ; ERRLFUN1
20    (POP)
21    (UNBIND1)
22    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $THROW (EXP) ...)-107|
(CONST 0) = $THROW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $THROW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THROW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $THROW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $THROW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $THROW
8     (SKIP&RET 1)


Disassembly of function $THROW
(CONST 0) = MCATCH
(CONST 1) = "THROW not within CATCH:~%~M"
(CONST 2) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (MCATCH)
9 byte-code instructions:
0     (GETVALUE 0)                        ; MCATCH
2     (JMPIF L8)
4     (CONST&PUSH 1)                      ; "THROW not within CATCH:~%~M"
5     (LOAD&PUSH 2)
6     (CALL2 2)                           ; MERROR
8     L8
8     (CONST&PUSH 0)                      ; MCATCH
9     (LOAD 2)
10    (THROW)


Disassembly of function #:|(DEFMSPEC $TIME (L) ...)-108-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $TIME (L) ...)-108-2-1|>
(CONST 1) = $TIME
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $TIME (L) ...)-108-2-1|>
1     (CONST&PUSH 1)                      ; $TIME
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $TIME (L) ...)-108-2-1|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $TIME (L) ...)-108-2-1-1|>
(CONST 1) = *STANDARD-OUTPUT*
(CONST 2) = (MLIST SIMP)
(CONST 3) = X
(CONST 4) = TIME
(CONST 5) = $%
(CONST 6) = $LASTTIME
(CONST 7) = 0
(CONST 8) = (MLIST SIMP)
(CONST 9) = $UNKNOWN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($LASTTIME X *STANDARD-OUTPUT*)
writes special variable : (X)
65 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $TIME (L) ...)-108-2-1-1|>
3     (GETVALUE&PUSH 1)                   ; *STANDARD-OUTPUT*
5     (CALLSR 1 21)                       ; FUNCALL
8     (CONST&PUSH 2)                      ; (MLIST SIMP)
9     (NIL&PUSH)
10    (LOAD&PUSH 3)
11    (JMP L82)
14    L14
14    (SETVALUE 3)                        ; X
16    (JMPIFNOT L73)
18    (JMP L62)
20    L20
20    (CONST&PUSH 8)                      ; (MLIST SIMP)
21    (GETVALUE 3)                        ; X
23    (CAR&PUSH)
24    (GETVALUE 3)                        ; X
26    (CDR&PUSH)
27    (LIST 3)
29    (JMP L74)
31    L31
31    (LOAD&CAR&PUSH 0)
33    (LOAD 0)
34    (BIND 3)                            ; X
36    (GETVALUE&PUSH 3)                   ; X
38    (CONST&PUSH 4)                      ; TIME
39    (PUSH-UNBOUND 1)
41    (CALLS2&JMPIF 132 L14)              ; GET
44    (GETVALUE&PUSH 3)                   ; X
46    (CONST 5)                           ; $%
47    (EQ)
48    (JMPIFNOT L14)
50    (GETVALUE 6)                        ; $LASTTIME
52    (CDR)
53    (CAR&PUSH)
54    (GETVALUE 6)                        ; $LASTTIME
56    (CDR)
57    (CDR)
58    (CAR)
59    (CONS)
60    (SETVALUE 3)                        ; X
62    L62
62    (CDR&PUSH)
63    (CONST&PUSH 7)                      ; 0
64    (CALLSR&JMPIFNOT 1 45 L20)          ; =
68    (GETVALUE 3)                        ; X
70    (CAR)
71    (JMPIF L74)
73    L73
73    (CONST 9)                           ; $UNKNOWN
74    L74
74    (UNBIND1)
75    (PUSH)
76    (LOAD&CONS&STORE 2)
78    (SKIP 1)
80    (LOAD&CDR&STORE 0)
82    L82
82    (LOAD&PUSH 0)
83    (CALLS1&JMPIFNOT 146 L31)           ; ENDP
86    (SKIP 1)
88    (LOAD&PUSH 0)
89    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
91    (SKIP 1)
93    (CONS)
94    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $TIME (L) ...)-108-2-1-1|
(CONST 0) = "Time:"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS1 140)                        ; FRESH-LINE
3     (CONST&PUSH 0)                      ; "Time:"
4     (LOAD&PUSH 3)
5     (PUSH-UNBOUND 2)
7     (CALLS1 137)                        ; WRITE-STRING
9     (LOAD 1)
10    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN TIMEORG (TIM) ...)-109|
(CONST 0) = TIMEORG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TIMEORG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TIMEORG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TIMEORG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TIMEORG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TIMEORG
8     (SKIP&RET 1)


Disassembly of function TIMEORG
(CONST 0) = THISTIME
(CONST 1) = 0
(CONST 2) = RUNTIME
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (THISTIME)
writes special variable : (THISTIME)
14 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; THISTIME
2     (CONST&PUSH 1)                      ; 0
3     (CALLSR 1 48)                       ; >
6     (JMPIFNOT1 L24)
8     (GETVALUE&PUSH 0)                   ; THISTIME
10    (CALL0 2)                           ; RUNTIME
12    (PUSH)
13    (LOAD&PUSH 3)
14    (CALLSR&PUSH 1 54)                  ; -
17    (CALLSR 2 53)                       ; +
20    (SETVALUE 0)                        ; THISTIME
22    (SKIP&RET 2)
24    L24
24    (SKIP&RET 2)


Disassembly of function #:|(PROGN 'COMPILE (DEFMFUN $QUIT NIL ...) ...)-110-2|
(CONST 0) = $QUIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $QUIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $QUIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $QUIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $QUIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function $QUIT
(CONST 0) = QUIT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CALL0 0)                           ; QUIT
2     (CALL0 0)                           ; QUIT
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN 'COMPILE (DEFMFUN $QUIT NIL ...) ...)-110-3|
(CONST 0) = $LOGOUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LOGOUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LOGOUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LOGOUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LOGOUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LOGOUT
8     (SKIP&RET 1)


Disassembly of function $LOGOUT
(CONST 0) = LOGOUT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CALL0 0)                           ; LOGOUT
2     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN FILEPRINT (FNAME) ...)-111|
(CONST 0) = FILEPRINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FILEPRINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FILEPRINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FILEPRINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FILEPRINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FILEPRINT
8     (SKIP&RET 1)


Disassembly of function FILEPRINT
(CONST 0) = $FILE_STRING_PRINT
(CONST 1) = "  "
(CONST 2) = "["
(CONST 3) = ", "
(CONST 4) = ", "
(CONST 5) = ", "
(CONST 6) = ", "
(CONST 7) = "]  "
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($FILE_STRING_PRINT)
66 byte-code instructions:
0     (GETVALUE 0)                        ; $FILE_STRING_PRINT
2     (JMPIF L83)
5     (CONST&PUSH 2)                      ; "["
6     (PUSH-UNBOUND 1)
8     (CALLS1 132)                        ; PRINC
10    (LOAD 1)
11    (CDR)
12    (CAR&PUSH)
13    (PUSH-UNBOUND 1)
15    (CALLS1 132)                        ; PRINC
17    (CONST&PUSH 3)                      ; ", "
18    (PUSH-UNBOUND 1)
20    (CALLS1 132)                        ; PRINC
22    (LOAD 1)
23    (CDR)
24    (CDR)
25    (CAR&PUSH)
26    (PUSH-UNBOUND 1)
28    (CALLS1 132)                        ; PRINC
30    (CONST&PUSH 4)                      ; ", "
31    (PUSH-UNBOUND 1)
33    (CALLS1 132)                        ; PRINC
35    (LOAD 1)
36    (CDR)
37    (CDR)
38    (CDR)
39    (JMPIFNOT L55)
41    (LOAD 1)
42    (CDR)
43    (CDR)
44    (CDR)
45    (CAR&PUSH)
46    (PUSH-UNBOUND 1)
48    (CALLS1 132)                        ; PRINC
50    (CONST&PUSH 5)                      ; ", "
51    (PUSH-UNBOUND 1)
53    (CALLS1 132)                        ; PRINC
55    L55
55    (LOAD 1)
56    (CAR)
57    (CAR&PUSH)
58    (PUSH-UNBOUND 1)
60    (CALLS1 132)                        ; PRINC
62    (CONST&PUSH 6)                      ; ", "
63    (PUSH-UNBOUND 1)
65    (CALLS1 132)                        ; PRINC
67    (LOAD 1)
68    (CAR)
69    (CDR)
70    (CAR&PUSH)
71    (PUSH-UNBOUND 1)
73    (CALLS1 132)                        ; PRINC
75    (CONST 7)                           ; "]  "
76    L76
76    (PUSH)
77    (PUSH-UNBOUND 1)
79    (CALLS1 132)                        ; PRINC
81    (SKIP&RET 2)
83    L83
83    (LOAD&PUSH 1)
84    (PUSH-UNBOUND 1)
86    (CALLS1&PUSH 244)                   ; NAMESTRING
88    (PUSH-UNBOUND 1)
90    (CALLS1 132)                        ; PRINC
92    (CONST 1)                           ; "  "
93    (JMP L76)


Disassembly of function #:|(DEFMFUN MFILE-OUT (FNAME) ...)-112|
(CONST 0) = MFILE-OUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFILE-OUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFILE-OUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFILE-OUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFILE-OUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFILE-OUT
8     (SKIP&RET 1)


Disassembly of function MFILE-OUT
(CONST 0) = $FILE_STRING_PRINT
(CONST 1) = #\&
(CONST 2) = EXPLODEN
(CONST 3) = IMPLODE
(CONST 4) = DOLLARIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($FILE_STRING_PRINT)
24 byte-code instructions:
0     (GETVALUE 0)                        ; $FILE_STRING_PRINT
2     (JMPIF L20)
4     (LOAD 1)
5     (CAR)
6     (JMPIFATOM L33)
8     (LOAD&CDR&PUSH 1)
10    (LOAD&CAR&PUSH 2)
12    (CALLSR 2 34)                       ; APPEND
15    L15
15    (PUSH)
16    (CALL1 4)                           ; DOLLARIFY
18    (SKIP&RET 2)
20    L20
20    (CONST&PUSH 1)                      ; #\&
21    (LOAD&PUSH 2)
22    (PUSH-UNBOUND 1)
24    (CALLS1&PUSH 244)                   ; NAMESTRING
26    (CALL1 2)                           ; EXPLODEN
28    (CONS&PUSH)
29    (CALL1 3)                           ; IMPLODE
31    (SKIP&RET 2)
33    L33
33    (LOAD 1)
34    (JMP L15)


Disassembly of function #:|(DEFUN MFILE NIL ...)-113|
(CONST 0) = MFILE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFILE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFILE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFILE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFILE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFILE
8     (SKIP&RET 1)


Disassembly of function MFILE
(CONST 0) = $FILENAME
(CONST 1) = $FILENUM
(CONST 2) = $DEVICE
(CONST 3) = $DIREC
(CONST 4) = FULLSTRIP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($DIREC $DEVICE $FILENUM $FILENAME)
writes special variable : ($FILENUM)
10 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; $FILENAME
2     (GETVALUE&PUSH 1)                   ; $FILENUM
4     (CALLS2 150)                        ; 1+
6     (SETVALUE 1)                        ; $FILENUM
8     (PUSH)
9     (GETVALUE&PUSH 2)                   ; $DEVICE
11    (GETVALUE&PUSH 3)                   ; $DIREC
13    (LIST&PUSH 4)
15    (CALL1 4)                           ; FULLSTRIP
17    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MTERPRI (&AUX X) ...)-114|
(CONST 0) = MTERPRI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MTERPRI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTERPRI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MTERPRI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MTERPRI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MTERPRI
8     (SKIP&RET 1)


Disassembly of function MTERPRI
(CONST 0) = X
(CONST 1) = SMART-TTY
(CONST 2) = (0 . 0)
(CONST 3) = ^W
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X SMART-TTY)
22 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; SMART-TTY
5     (JMPIFNOT L16)
7     (GETVALUE 0)                        ; X
9     (JMPIFNOT L16)
11    (PUSH)
12    (CONST&PUSH 2)                      ; (0 . 0)
13    (CALLS2&JMPIF 2 L23)                ; EQUAL
16    L16
16    (PUSH-UNBOUND 1)
18    (CALLS1 139)                        ; TERPRI
20    L20
20    (UNBIND1)
21    (SKIP&RET 1)
23    L23
23    (T)
24    (BIND 3)                            ; ^W
26    (PUSH-UNBOUND 1)
28    (CALLS1 139)                        ; TERPRI
30    (UNBIND1)
31    (JMP L20)


Disassembly of function #:|(DEFMFUN $PAGEPAUSE (X) ...)-115|
(CONST 0) = $PAGEPAUSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PAGEPAUSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PAGEPAUSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PAGEPAUSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PAGEPAUSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PAGEPAUSE
8     (SKIP&RET 1)


Disassembly of function $PAGEPAUSE
(CONST 0) = X
(CONST 1) = PAGEPAUSE1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 1)                           ; PAGEPAUSE1
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN PAGEPAUSE1 (X Y) ...)-116|
(CONST 0) = PAGEPAUSE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PAGEPAUSE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PAGEPAUSE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PAGEPAUSE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PAGEPAUSE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PAGEPAUSE1
8     (SKIP&RET 1)


Disassembly of function PAGEPAUSE1
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = "PAGEPAUSE does not exist in this system."
(CONST 3) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (CONST&PUSH 2)                      ; "PAGEPAUSE does not exist in this system."
7     (CALL1 3)                           ; MERROR
9     (UNBIND 2)
11    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $STATUS (FORM) ...)-117-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1|>
(CONST 1) = $STATUS
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1|>
1     (CONST&PUSH 1)                      ; $STATUS
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1|
(CONST 0) = #(NIL)
(CONST 1) = :NAME
(CONST 2) = COMMON-LISP:CONTINUE
(CONST 3) = :INVOKE-FUNCTION
(CONST 4) = #<COMPILED-CLOSURE #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1-1|>
(CONST 5) = :REPORT
(CONST 6) = SYSTEM::REPORT-NO-NEW-VALUE
(CONST 7) = :INTERACTIVE
(CONST 8) = SYSTEM::ASSERT-RESTART-NO-PROMPTS
(CONST 9) = SYSTEM::MAKE-RESTART
(CONST 10) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 11) = SYSTEM::*CONDITION-RESTARTS*
(CONST 12) = (#(CONDITION 70) 1 . 1)
(CONST 13) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 14) = SIGNAL
(CONST 15) = "~A"
(CONST 16) = (SYMBOLP KEYWORD)
(CONST 17) = SYSTEM::ASSERT-ERROR-STRING
(CONST 18) = #(NIL)
(CONST 19) = #<COMPILED-CLOSURE #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1-2|>
(CONST 20) = (#(CONDITION 70) 1 . 1)
(CONST 21) = (SYMBOLP FEATURE)
(CONST 22) = $FEATURE
(CONST 23) = *FEATURES*
(CONST 24) = DOLLARIFY
(CONST 25) = FULLSTRIP1
(CONST 26) = KEYWORD
(CONST 27) = MEMQ
(CONST 28) = $STATUS
(CONST 29) = ((MLIST SIMP) $FEATURE $STATUS)
(CONST 30) = "Unknown argument - STATUS:~%~M"
(CONST 31) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*FEATURES* SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS*)
118 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (CAR&PUSH)
3     (LOAD 2)
4     (CDR)
5     (CAR&PUSH)
6     L6
6     (LOAD&PUSH 1)
7     (CALLS2&JMPIF 6 L95)                ; SYMBOLP
11    (NIL)
12    (MAKE-VECTOR1&PUSH 1)
14    (NIL)
15    (STOREC 0 0)
18    (TAGBODY-OPEN 0 L59)                ; #(NIL)
21    (CONST&PUSH 1)                      ; :NAME
22    (CONST&PUSH 2)                      ; COMMON-LISP:CONTINUE
23    (CONST&PUSH 3)                      ; :INVOKE-FUNCTION
24    (LOAD&PUSH 7)
25    (LOAD&PUSH 6)
26    (COPY-CLOSURE&PUSH 4 2)             ; #<COMPILED-CLOSURE #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1-1|>
29    (CONST&PUSH 5)                      ; :REPORT
30    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; SYSTEM::REPORT-NO-NEW-VALUE
32    (CONST&PUSH 7)                      ; :INTERACTIVE
33    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
35    (CALL&PUSH 8 9)                     ; SYSTEM::MAKE-RESTART
38    (LIST&PUSH 1)
40    (LOAD&PUSH 0)
41    (GETVALUE&PUSH 10)                  ; SYSTEM::*ACTIVE-RESTARTS*
43    (CALLSR 2 34)                       ; APPEND
46    (BIND 10)                           ; SYSTEM::*ACTIVE-RESTARTS*
48    (GETVALUE 11)                       ; SYSTEM::*CONDITION-RESTARTS*
50    (BIND 11)                           ; SYSTEM::*CONDITION-RESTARTS*
52    (HANDLER-OPEN 12 L70)               ; (#(CONDITION 70) 1 . 1)
54    (CONST&PUSH 15)                     ; "~A"
55    (CONST 16)                          ; (SYMBOLP KEYWORD)
56    (JMP L146)
59    L59
59    (LOADC 4 0)
62    (UNLIST 0 0)
65    (TAGBODY-CLOSE)
66    (SKIP 1)
68    (JMP L6)
70    L70
70    (HANDLER-BEGIN&PUSH)
71    (LOAD&PUSH 0)
72    (LOADI&PUSH 0 0 6)
76    (CALL2 13)                          ; SYSTEM::ADD-CONDITION-RESTARTS
78    (LOAD&PUSH 0)
79    (CALL1 14)                          ; SIGNAL
81    (SKIPSP 2 1)
84    (SKIP&RET 2)
86    L86
86    (LOADC 4 0)
89    (UNLIST 0 0)
92    (TAGBODY-CLOSE)
93    (SKIP 1)
95    L95
95    (LOAD&PUSH 0)
96    (CALLS2&JMPIF 6 L184)               ; SYMBOLP
100   (NIL)
101   (MAKE-VECTOR1&PUSH 1)
103   (NIL)
104   (STOREC 0 0)
107   (TAGBODY-OPEN 18 L86)               ; #(NIL)
110   (CONST&PUSH 1)                      ; :NAME
111   (CONST&PUSH 2)                      ; COMMON-LISP:CONTINUE
112   (CONST&PUSH 3)                      ; :INVOKE-FUNCTION
113   (LOAD&PUSH 7)
114   (LOAD&PUSH 6)
115   (COPY-CLOSURE&PUSH 19 2)            ; #<COMPILED-CLOSURE #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1-2|>
118   (CONST&PUSH 5)                      ; :REPORT
119   (CONST&SYMBOL-FUNCTION&PUSH 6)      ; SYSTEM::REPORT-NO-NEW-VALUE
121   (CONST&PUSH 7)                      ; :INTERACTIVE
122   (CONST&SYMBOL-FUNCTION&PUSH 8)      ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
124   (CALL&PUSH 8 9)                     ; SYSTEM::MAKE-RESTART
127   (LIST&PUSH 1)
129   (LOAD&PUSH 0)
130   (GETVALUE&PUSH 10)                  ; SYSTEM::*ACTIVE-RESTARTS*
132   (CALLSR 2 34)                       ; APPEND
135   (BIND 10)                           ; SYSTEM::*ACTIVE-RESTARTS*
137   (GETVALUE 11)                       ; SYSTEM::*CONDITION-RESTARTS*
139   (BIND 11)                           ; SYSTEM::*CONDITION-RESTARTS*
141   (HANDLER-OPEN 20 L70)               ; (#(CONDITION 70) 1 . 1)
143   (CONST&PUSH 15)                     ; "~A"
144   (CONST 21)                          ; (SYMBOLP FEATURE)
146   L146
146   (PUSH)
147   (CALL1&PUSH 17)                     ; SYSTEM::ASSERT-ERROR-STRING
149   (CALLSR 1 29)                       ; ERROR
152   L152
152   (GETVALUE&PUSH 23)                  ; *FEATURES*
154   (CALL1 24)                          ; DOLLARIFY
156   (SKIP&RET 4)
158   L158
158   (T)
159   (SKIP&RET 4)
161   L161
161   (LOAD&JMPIFNOT 0 L152)
164   (LOAD&PUSH 0)
165   (CALL1&PUSH 25)                     ; FULLSTRIP1
167   (CALLS2&PUSH 140)                   ; SYMBOL-NAME
169   (CONST&PUSH 26)                     ; KEYWORD
170   (CALLS1&PUSH 212)                   ; INTERN
172   (GETVALUE&PUSH 23)                  ; *FEATURES*
174   (CALL2&JMPIF 27 L158)               ; MEMQ
177   (NIL)
178   (SKIP&RET 4)
180   L180
180   (CONST 29)                          ; ((MLIST SIMP) $FEATURE $STATUS)
182   (SKIP&RET 4)
184   L184
184   (LOAD&PUSH 1)
185   (JMPIFEQTO 22 L161)                 ; $FEATURE
188   (LOAD&PUSH 1)
189   (JMPIFEQTO 28 L180)                 ; $STATUS
192   (CONST&PUSH 30)                     ; "Unknown argument - STATUS:~%~M"
194   (LOAD&PUSH 2)
195   (CALL2 31)                          ; MERROR
197   (SKIP&RET 4)


Disassembly of function #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1-1|
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFMSPEC $STATUS (FORM) ...)-117-2-1-2|
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFQUOTE $SSTATUS (STATUS-FUNCTION ITEM) ...)-118-2|
(CONST 0) = $SSTATUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SSTATUS>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SSTATUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SSTATUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SSTATUS>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function $SSTATUS
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = QUOTE
(CONST 3) = 1
(CONST 4) = #(NIL)
(CONST 5) = :NAME
(CONST 6) = COMMON-LISP:CONTINUE
(CONST 7) = :INVOKE-FUNCTION
(CONST 8) = #<COMPILED-CLOSURE $SSTATUS-1>
(CONST 9) = :REPORT
(CONST 10) = SYSTEM::REPORT-NEW-VALUE
(CONST 11) = :INTERACTIVE
(CONST 12) = SYSTEM::ASSERT-RESTART-PROMPT
(CONST 13) = SYSTEM::MAKE-RESTART
(CONST 14) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 15) = SYSTEM::*CONDITION-RESTARTS*
(CONST 16) = (#(CONDITION 67) 1 . 1)
(CONST 17) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 18) = SIGNAL
(CONST 19) = "wrong number of args to $SSTATUS"
(CONST 20) = |$SSTATUS-aux|
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS*)
105 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L52)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (NIL&PUSH)
15    (LOAD&PUSH 1)
16    (PUSH-NIL 3)
18    (LOAD&JMPIFNOT 3 L45)
21    L21
21    (LOAD&CAR&PUSH 3)
23    (LOAD 0)
24    (STORE 5)
25    (SKIP 1)
27    (CONST&PUSH 2)                      ; QUOTE
28    (LOAD&PUSH 5)
29    (LIST 2)
31    (STORE 0)
32    (LOAD&JMPIF 1 L57)
35    (LOAD&PUSH 0)
36    (NIL)
37    (CONS)
38    (STORE 1)
39    (STORE 2)
40    L40
40    (LOAD&CDR&STORE 3)
42    (LOAD&JMPIF 3 L21)
45    L45
45    (LOAD 2)
46    (SKIP 5)
48    (STORE 0)
49    (JMP L143)
52    L52
52    (LOAD&PUSH 2)
53    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
55    (SKIP&RET 3)
57    L57
57    (PUSH)
58    (LOAD&PUSH 1)
59    (NIL)
60    (CONS)
61    (STORE 2)
62    (PUSH)
63    (CALLS1 171)                        ; SYSTEM::%RPLACD
65    (JMP L40)
67    L67
67    (HANDLER-BEGIN&PUSH)
68    (LOAD&PUSH 0)
69    (LOADI&PUSH 0 0 6)
73    (CALL2 17)                          ; SYSTEM::ADD-CONDITION-RESTARTS
75    (LOAD&PUSH 0)
76    (CALL1 18)                          ; SIGNAL
78    (SKIPSP 2 1)
81    (SKIP&RET 2)
83    L83
83    (NIL)
84    (MAKE-VECTOR1&PUSH 1)
86    (NIL)
87    (STOREC 0 0)
90    (TAGBODY-OPEN 4 L130)               ; #(NIL)
93    (CONST&PUSH 5)                      ; :NAME
94    (CONST&PUSH 6)                      ; COMMON-LISP:CONTINUE
95    (CONST&PUSH 7)                      ; :INVOKE-FUNCTION
96    (LOAD&PUSH 7)
97    (LOAD&PUSH 6)
98    (COPY-CLOSURE&PUSH 8 2)             ; #<COMPILED-CLOSURE $SSTATUS-1>
101   (CONST&PUSH 9)                      ; :REPORT
102   (CONST&SYMBOL-FUNCTION&PUSH 10)     ; SYSTEM::REPORT-NEW-VALUE
104   (CONST&PUSH 11)                     ; :INTERACTIVE
105   (CONST&SYMBOL-FUNCTION&PUSH 12)     ; SYSTEM::ASSERT-RESTART-PROMPT
107   (CALL&PUSH 8 13)                    ; SYSTEM::MAKE-RESTART
110   (LIST&PUSH 1)
112   (LOAD&PUSH 0)
113   (GETVALUE&PUSH 14)                  ; SYSTEM::*ACTIVE-RESTARTS*
115   (CALLSR 2 34)                       ; APPEND
118   (BIND 14)                           ; SYSTEM::*ACTIVE-RESTARTS*
120   (GETVALUE 15)                       ; SYSTEM::*CONDITION-RESTARTS*
122   (BIND 15)                           ; SYSTEM::*CONDITION-RESTARTS*
124   (HANDLER-OPEN 16 L67)               ; (#(CONDITION 67) 1 . 1)
126   (CONST&PUSH 19)                     ; "wrong number of args to $SSTATUS"
127   (CALLSR 0 29)                       ; ERROR
130   L130
130   (LOADC 4 0)
133   (UNLIST 1 0)
136   (LOAD 0)
137   (STORE 6)
138   (SKIP 1)
140   (TAGBODY-CLOSE)
141   (SKIP 1)
143   L143
143   (LOAD&PUSH 0)
144   (CALLS2&PUSH 71)                    ; LENGTH
146   (JMPIFNOTEQTO 3 L83)                ; 1
150   (CONST&PUSH 20)                     ; |$SSTATUS-aux|
151   (CONST&PUSH 2)                      ; QUOTE
152   (LOAD&PUSH 3)
153   (LIST&PUSH 2)
155   (LOAD 2)
156   (LIST* 2)
158   (SKIP&RET 5)


Disassembly of function $SSTATUS-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFQUOTE $SSTATUS (STATUS-FUNCTION ITEM) ...)-118-3|
(CONST 0) = |$SSTATUS-aux|
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE |$SSTATUS-aux|>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$SSTATUS-aux|
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; |$SSTATUS-aux|
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE |$SSTATUS-aux|>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; |$SSTATUS-aux|
8     (SKIP&RET 1)


Disassembly of function |$SSTATUS-aux|
(CONST 0) = $FEATURE
(CONST 1) = $MKEY
(CONST 2) = *FEATURES*
(CONST 3) = $NOFEATURE
(CONST 4) = "know only how to set and remove feature status"
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
writes special variable : (*FEATURES*)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (JMPIFEQTO 0 L22)                   ; $FEATURE
4     (LOAD&PUSH 2)
5     (JMPIFNOTEQTO 3 L33)                ; $NOFEATURE
8     (LOAD&PUSH 1)
9     (CALL1&PUSH 1)                      ; $MKEY
11    (GETVALUE&PUSH 2)                   ; *FEATURES*
13    (PUSH-UNBOUND 7)
15    (CALLS2 81)                         ; DELETE
17    L17
17    (SETVALUE 2)                        ; *FEATURES*
19    (T)
20    (SKIP&RET 3)
22    L22
22    (LOAD&PUSH 1)
23    (CALL1&PUSH 1)                      ; $MKEY
25    (GETVALUE&PUSH 2)                   ; *FEATURES*
27    (PUSH-UNBOUND 3)
29    (CALLS1 184)                        ; ADJOIN
31    (JMP L17)
33    L33
33    (CONST&PUSH 4)                      ; "know only how to set and remove feature status"
34    (CALLSR 0 29)                       ; ERROR


Disassembly of function #:|(PROGN 'COMPILE (DEFMFUN $DSKGC # ...) ...)-119-2|
(CONST 0) = $DSKGC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DSKGC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DSKGC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DSKGC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DSKGC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function $DSKGC
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (UNBIND1)
5     (SKIP&RET 2)


Disassembly of function #:|(PROGN 'COMPILE (DEFMFUN $DSKGC # ...) ...)-119-3|
(CONST 0) = DSKGC1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DSKGC1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DSKGC1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DSKGC1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DSKGC1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DSKGC1
8     (SKIP&RET 1)


Disassembly of function DSKGC1
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL)
7     (UNBIND 2)
9     (SKIP&RET 3)


Disassembly of function #:|(SETQ ERROR-CALL 'ERRBREAK)-120|
(CONST 0) = ERRBREAK
(CONST 1) = ERROR-CALL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (ERROR-CALL)
3 byte-code instructions:
0     (CONST 0)                           ; ERRBREAK
1     (SETVALUE 1)                        ; ERROR-CALL
3     (SKIP&RET 1)


Disassembly of function #:|(PROGN (DO # # ...) ($NOUNIFY '$SUM) ...)-121-1|
(CONST 0) = 
($SQRT $ERF $SIN $COS $TAN $LOG $PLOG $SEC $CSC $COT $SINH $COSH $TANH $SECH
 $CSCH $COTH $ASIN $ACOS $ATAN $ACOT $ACSC $ASEC $ASINH $ACOSH $ATANH $ACSCH
 $ASECH $ACOTH $BINOMIAL $GAMMA $GENFACT $DEL)
(CONST 1) = $NOUNIFY
(CONST 2) = X
(CONST 3) = ALIAS
(CONST 4) = PUTPROP
(CONST 5) = STRIPDOLLAR
(CONST 6) = REVERSEALIAS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($SQRT $ERF $SIN $COS $TAN ...)
1     (LOAD&JMPIFNOT 0 L34)
4     L4
4     (LOAD&CAR&PUSH 0)
6     (CALL1 1)                           ; $NOUNIFY
8     (BIND 2)                            ; X
10    (LOAD&CAR&PUSH 3)
12    (GETVALUE&PUSH 2)                   ; X
14    (CONST&PUSH 3)                      ; ALIAS
15    (CALL 3 4)                          ; PUTPROP
18    (GETVALUE&PUSH 2)                   ; X
20    (LOAD&CAR&PUSH 4)
22    (CALL1&PUSH 5)                      ; STRIPDOLLAR
24    (CONST&PUSH 6)                      ; REVERSEALIAS
25    (CALL 3 4)                          ; PUTPROP
28    (UNBIND1)
29    (LOAD&CDR&STORE 0)
31    (LOAD&JMPIF 0 L4)
34    L34
34    (SKIP 1)
36    (VALUES0)
37    (SKIP&RET 1)


Disassembly of function #:|(PROGN (DO # # ...) ($NOUNIFY '$SUM) ...)-121-2|
(CONST 0) = $SUM
(CONST 1) = $NOUNIFY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SUM
1     (CALL1 1)                           ; $NOUNIFY
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN (DO # # ...) ($NOUNIFY '$SUM) ...)-121-3|
(CONST 0) = $PRODUCT
(CONST 1) = $NOUNIFY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PRODUCT
1     (CALL1 1)                           ; $NOUNIFY
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN (DO # # ...) ($NOUNIFY '$SUM) ...)-121-4|
(CONST 0) = $INTEGRATE
(CONST 1) = $NOUNIFY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGRATE
1     (CALL1 1)                           ; $NOUNIFY
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN (DO # # ...) ($NOUNIFY '$SUM) ...)-121-5|
(CONST 0) = $LIMIT
(CONST 1) = $NOUNIFY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LIMIT
1     (CALL1 1)                           ; $NOUNIFY
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN (DO # # ...) ($NOUNIFY '$SUM) ...)-121-6|
(CONST 0) = $DIFF
(CONST 1) = VERB
(CONST 2) = %DERIVATIVE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DIFF
1     (CONST&PUSH 1)                      ; VERB
2     (CONST&PUSH 2)                      ; %DERIVATIVE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(PROGN (DO # # ...) ($NOUNIFY '$SUM) ...)-121-7|
(CONST 0) = %DERIVATIVE
(CONST 1) = NOUN
(CONST 2) = $DIFF
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %DERIVATIVE
1     (CONST&PUSH 1)                      ; NOUN
2     (CONST&PUSH 2)                      ; $DIFF
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(PROGN (DO # # ...) ($NOUNIFY '$SUM) ...)-121-8|
(CONST 0) = (NOUN PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; (NOUN PROPERTIES)
1     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# #) ...)-122-1|
(CONST 0) = 
(($DEBUGMODE DEBUGMODE1) ($BOTHCASES BOTHCASES1) ($PAGEPAUSE PAGEPAUSE1)
 ($DSKGC DSKGC1) ($TTYINTFUN TTYINTFUNSETUP) ($FPPREC FPPREC1)
 ($POISLIM POISLIM1) ($DEFAULT_LET_RULE_PACKAGE LET-RULE-SETTER)
 ($CURRENT_LET_RULE_PACKAGE LET-RULE-SETTER)
 ($LET_RULE_PACKAGES LET-RULE-SETTER))
(CONST 1) = X
(CONST 2) = ASSIGN
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (CONST&PUSH 0)                      ; (# # # ...)
1     (JMP L24)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE 1)                        ; X
10    (CAR&PUSH)
11    (GETVALUE 1)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; ASSIGN
16    (CALL 3 3)                          ; PUTPROP
19    (UNBIND1)
20    (SKIP 1)
22    (LOAD&CDR&STORE 0)
24    L24
24    (LOAD&PUSH 0)
25    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
28    (SKIP 1)
30    (VALUES0)
31    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# #) ...)-122-2|
(CONST 0) = $INFOLISTS
(CONST 1) = X
(CONST 2) = NEVERSET
(CONST 3) = ASSIGN
(CONST 4) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $INFOLISTS)
21 byte-code instructions:
0     (GETVALUE 0)                        ; $INFOLISTS
2     (CDR&PUSH)
3     (LOAD&PUSH 0)
4     (JMP L23)
6     L6
6     (LOAD&CAR&PUSH 0)
8     (LOAD 0)
9     (BIND 1)                            ; X
11    (GETVALUE&PUSH 1)                   ; X
13    (CONST&PUSH 2)                      ; NEVERSET
14    (CONST&PUSH 3)                      ; ASSIGN
15    (CALL 3 4)                          ; PUTPROP
18    (UNBIND1)
19    (SKIP 1)
21    (LOAD&CDR&STORE 0)
23    L23
23    (LOAD&PUSH 0)
24    (CALLS1&JMPIFNOT 146 L6)            ; ENDP
27    (SKIP 2)
29    (VALUES0)
30    (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# #) ...)-122-3|
(CONST 0) = $CONTEXTS
(CONST 1) = ASSIGN
(CONST 2) = NEVERSET
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONTEXTS
1     (CONST&PUSH 1)                      ; ASSIGN
2     (CONST&PUSH 2)                      ; NEVERSET
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(PROGN (MAPC #'# '#) (MAPC #'# #) ...)-122-4|
(CONST 0) = (ASSIGN PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; (ASSIGN PROPERTIES)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (NOTYPE I N ...))-123|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE) (SETQ *PRINT-BASE* OLD-BASE ...))-124|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:NIL-125
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/suprv1.fas
Wrote file /cygdrive/e/temp/maxima/src/suprv1.lis