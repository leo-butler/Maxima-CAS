Listing of compilation of file /cygdrive/e/temp/maxima/src/comm.lisp
on 2002-12-17 13:32:09 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/comm.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE COMM)-2|
(CONST 0) = COMM
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMM
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (GENPREFIX C) (SPECIAL $EXPTSUBST $LINECHAR ...) ...)-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(PROG1 '(OP AND OPR ...) (MAPC #'# '#) ...)-4|
(CONST 0) = 
((MPLUS &+) (MMINUS &-) (MTIMES &*) (MEXPT &**) (MEXPT &^) (MNCTIMES &.)
 (RAT &//) (MQUOTIENT &//) (MNCEXPT &^^) (MEQUAL &=) (MGREATERP &>) (MLESSP &<)
 (MLEQP &<=) (MGEQP &>=) (MNOTEQUAL &#) (MAND &AND) (MOR &OR) (MNOT &NOT)
 (MSETQ |&:|) (MDEFINE |&:=|) (MDEFMACRO |&::=|) (MQUOTE |&'|) (MLIST &[)
 (MSET |&::|) (MFACTORIAL &!) (MARROW &->) (MPROGN |&(|) (MCOND &IF))
(CONST 1) = OP
(CONST 2) = PUTPROP
(CONST 3) = OPR
(CONST 4) = ((MQAPPLY $SUBVAR) (BIGFLOAT $BFLOAT))
(CONST 5) = ((|&and| MAND) (|&or| MOR) (|&not| MNOT) (|&if| MCOND))
(CONST 6) = (OP AND OPR PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
56 byte-code instructions:
0     (CONST&PUSH 0)                      ; ((MPLUS &+) (MMINUS &-) ...)
1     (JMP L27)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD&CAR&PUSH 0)
7     (LOAD 1)
8     (CDR)
9     (CAR&PUSH)
10    (CONST&PUSH 1)                      ; OP
11    (CALL 3 2)                          ; PUTPROP
14    (LOAD 0)
15    (CDR)
16    (CAR&PUSH)
17    (LOAD&CAR&PUSH 1)
19    (CONST&PUSH 3)                      ; OPR
20    (CALL 3 2)                          ; PUTPROP
23    (SKIP 1)
25    (LOAD&CDR&STORE 0)
27    L27
27    (LOAD&PUSH 0)
28    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
31    (SKIP 1)
33    (CONST&PUSH 4)                      ; (# #)
34    (JMP L51)
36    L36
36    (LOAD&CAR&PUSH 0)
38    (LOAD&CAR&PUSH 0)
40    (LOAD 1)
41    (CDR)
42    (CAR&PUSH)
43    (CONST&PUSH 1)                      ; OP
44    (CALL 3 2)                          ; PUTPROP
47    (SKIP 1)
49    (LOAD&CDR&STORE 0)
51    L51
51    (LOAD&PUSH 0)
52    (CALLS1&JMPIFNOT 146 L36)           ; ENDP
55    (SKIP 1)
57    (CONST&PUSH 5)                      ; ((|&and| MAND) (|&or| MOR) ...)
58    (JMP L75)
60    L60
60    (LOAD&CAR&PUSH 0)
62    (LOAD&CAR&PUSH 0)
64    (LOAD 1)
65    (CDR)
66    (CAR&PUSH)
67    (CONST&PUSH 3)                      ; OPR
68    (CALL 3 2)                          ; PUTPROP
71    (SKIP 1)
73    (LOAD&CDR&STORE 0)
75    L75
75    (LOAD&PUSH 0)
76    (CALLS1&JMPIFNOT 146 L60)           ; ENDP
79    (SKIP 1)
81    (CONST 6)                           ; (OP AND OPR PROPERTIES)
82    (SKIP&RET 1)


Disassembly of function #:|(SETQ $EXPTSUBST NIL ...)-5|
(CONST 0) = $EXPTSUBST
(CONST 1) = $PARTSWITCH
(CONST 2) = $INFLAG
(CONST 3) = ((MLIST SIMP))
(CONST 4) = $GRADEFS
(CONST 5) = ((MLIST SIMP))
(CONST 6) = $DEPENDENCIES
(CONST 7) = (&@1 &@2 &@3 &@4)
(CONST 8) = ATVARS
(CONST 9) = ATP
(CONST 10) = ISLINP
(CONST 11) = LNORECURSE
(CONST 12) = &^
(CONST 13) = &**
(CONST 14) = $DERIVSUBST
(CONST 15) = TIMESP
(CONST 16) = $OPSUBST
(CONST 17) = IN-P
(CONST 18) = SUBSTP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : 
(SUBSTP IN-P $OPSUBST TIMESP $DERIVSUBST &** LNORECURSE ISLINP ATP ATVARS
 $DEPENDENCIES $GRADEFS $INFLAG $PARTSWITCH $EXPTSUBST)
25 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; $EXPTSUBST
3     (SETVALUE 1)                        ; $PARTSWITCH
5     (SETVALUE 2)                        ; $INFLAG
7     (CONST 3)                           ; ((MLIST SIMP))
8     (SETVALUE 4)                        ; $GRADEFS
10    (CONST 5)                           ; ((MLIST SIMP))
11    (SETVALUE 6)                        ; $DEPENDENCIES
13    (CONST 7)                           ; (&@1 &@2 &@3 &@4)
14    (SETVALUE 8)                        ; ATVARS
16    (NIL)
17    (SETVALUE 9)                        ; ATP
19    (SETVALUE 10)                       ; ISLINP
21    (SETVALUE 11)                       ; LNORECURSE
23    (CONST 12)                          ; &^
24    (SETVALUE 13)                       ; &**
26    (NIL)
27    (SETVALUE 14)                       ; $DERIVSUBST
29    (SETVALUE 15)                       ; TIMESP
31    (T)
32    (SETVALUE 16)                       ; $OPSUBST
34    (NIL)
35    (SETVALUE 17)                       ; IN-P
37    (SETVALUE 18)                       ; SUBSTP
39    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $VECT_CROSS NIL ...)-6-1|
(CONST 0) = $VECT_CROSS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VECT_CROSS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $VECT_CROSS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $VECT_CROSS NIL ...)-6-2|
(CONST 0) = (SPECIAL $VECT_CROSS)
(CONST 1) = $VECT_CROSS
(CONST 2) = VARIABLE
(CONST 3) = 
"If TRUE allows DIFF(X~Y,T) to work where ~ is defined in 
	  SHARE;VECT where VECT_CROSS is set to TRUE."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $VECT_CROSS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $VECT_CROSS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $VECT_CROSS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $VECT_CROSS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If TRUE allows DIFF(X~Y,T) to work where ~ is defined in 
	  SHARE;VECT where VECT_CROSS is set to TRUE."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $VECT_CROSS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $SUBSTITUTE (OLD NEW &OPTIONAL ...) ...)-7|
(CONST 0) = $SUBSTITUTE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SUBSTITUTE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SUBSTITUTE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SUBSTITUTE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SUBSTITUTE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SUBSTITUTE
8     (SKIP&RET 1)


Disassembly of function $SUBSTITUTE
(CONST 0) = MAXIMA-SUBSTITUTE
(CONST 1) = $LISTP
(CONST 2) = NOTLOREQ
(CONST 3) = $SUBSTITUTE
(CONST 4) = IMPROPER-ARG-ERR
(CONST 5) = MEQUAL
2 required arguments
1 optional argument
No rest parameter
No keyword parameters
69 byte-code instructions:
0     L0
0     (BOUNDP 1)
2     (PUSH)
3     (JMPIFBOUNDP 2 L48)
6     (NIL&STORE 2)
8     (LOAD&JMPIFNOT 0 L51)
11    L11
11    (LOAD&PUSH 4)
12    (LOAD&PUSH 4)
13    (LOAD&PUSH 4)
14    (CALL 3 0)                          ; MAXIMA-SUBSTITUTE
17    (SKIP&RET 5)
19    L19
19    (LOAD 5)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 1)
23    (PUSH-UNBOUND 1)
25    (JMPTAIL 3 9 L0)
29    L29
29    (LOAD&PUSH 5)
30    (CONST&PUSH 3)                      ; $SUBSTITUTE
31    (CALL2 4)                           ; IMPROPER-ARG-ERR
33    (SKIP&RET 6)
35    L35
35    (LOAD 5)
36    (CDR)
37    (CDR)
38    (CAR&PUSH)
39    (LOAD 6)
40    (CDR)
41    (CAR&PUSH)
42    (LOAD&PUSH 2)
43    (CALL 3 0)                          ; MAXIMA-SUBSTITUTE
46    (SKIP&RET 6)
48    L48
48    (LOAD&JMPIF 0 L11)
51    L51
51    (LOAD&PUSH 3)
52    (LOAD&PUSH 5)
53    (CALL1&JMPIFNOT 1 L67)              ; $LISTP
56    (LOAD 5)
57    (CDR)
58    (CAR&PUSH)
59    (CALL1&JMPIFNOT 1 L67)              ; $LISTP
62    (LOAD 5)
63    (CDR)
64    (CDR)
65    (JMPIFNOT L19)
67    L67
67    (LOAD&PUSH 5)
68    (CALL1&JMPIF 2 L29)                 ; NOTLOREQ
71    (LOAD 5)
72    (CAR)
73    (CAR&PUSH)
74    (JMPIFEQTO 5 L35)                   ; MEQUAL
77    (LOAD&CDR&PUSH 5)
79    (LOAD&JMPIFNOT 0 L96)
82    L82
82    (LOAD&CAR&PUSH 0)
84    (LOAD&PUSH 2)
85    (PUSH-UNBOUND 1)
87    (JSR L0)
90    (STORE 1)
91    (LOAD&CDR&STORE 0)
93    (LOAD&JMPIF 0 L82)
96    L96
96    (LOAD 1)
97    (SKIP&RET 7)


Disassembly of function #:|(DECLARE-TOP (SPECIAL X Y ...))-8|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MAXIMA-SUBSTITUTE (X Y Z) ...)-9|
(CONST 0) = MAXIMA-SUBSTITUTE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMA-SUBSTITUTE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-SUBSTITUTE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-SUBSTITUTE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMA-SUBSTITUTE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMA-SUBSTITUTE
8     (SKIP&RET 1)


Disassembly of function MAXIMA-SUBSTITUTE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = IN-P
(CONST 3) = SUBSTP
(CONST 4) = MNUMP
(CONST 5) = SIGNUM1
(CONST 6) = 1
(CONST 7) = $SQRTDISPFLAG
(CONST 8) = $PFEFORMAT
(CONST 9) = NFORMAT-ALL
(CONST 10) = -1
(CONST 11) = ((MMINUS) 1)
(CONST 12) = SUBST2
(CONST 13) = FUNCTIONP
(CONST 14) = OPERATORS
(CONST 15) = APPLICATION-OPERATOR
(CONST 16) = GETOPR
(CONST 17) = OPRY
(CONST 18) = OPRX
(CONST 19) = SUBST1
(CONST 20) = MEXPT
(CONST 21) = MUL2
(CONST 22) = MTIMES
(CONST 23) = NFORMAT
(CONST 24) = TIMESP
(CONST 25) = NEGXPTY
(CONST 26) = SIMPLIFYA
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
writes special variables : (X Y)
107 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (T)
7     (BIND 2)                            ; IN-P
9     (T)
10    (BIND 3)                            ; SUBSTP
12    (GETVALUE&PUSH 1)                   ; Y
14    (CALL1&JMPIFNOT 4 L39)              ; MNUMP
17    (GETVALUE&PUSH 1)                   ; Y
19    (CALL1&PUSH 5)                      ; SIGNUM1
21    (CONST&PUSH 6)                      ; 1
22    (CALLSR&JMPIFNOT 1 45 L39)          ; =
26    (NIL)
27    (BIND 7)                            ; $SQRTDISPFLAG
29    (T)
30    (BIND 8)                            ; $PFEFORMAT
32    (LOAD&PUSH 19)
33    (CALL1 9)                           ; NFORMAT-ALL
35    (STORE 19)
37    (UNBIND 2)
39    L39
39    (GETVALUE 1)                        ; Y
41    (JMPIFATOM L118)
44    (GETVALUE 1)                        ; Y
46    (CAR)
47    (CAR&PUSH)
48    (CONST 20)                          ; MEXPT
49    (EQ)
50    (JMPIFNOT L72)
52    (GETVALUE 1)                        ; Y
54    (CDR)
55    (CDR)
56    (CAR&PUSH)
57    (CALL1&PUSH 5)                      ; SIGNUM1
59    (CONST&PUSH 6)                      ; 1
60    (CALLSR&JMPIFNOT 1 45 L72)          ; =
64    (CONST&PUSH 10)                     ; -1
65    (GETVALUE 1)                        ; Y
67    (CDR)
68    (CDR)
69    (CAR&PUSH)
70    (CALL2 21)                          ; MUL2
72    L72
72    (PUSH)
73    (GETVALUE 1)                        ; Y
75    (CAR)
76    (CAR&PUSH)
77    (CONST 22)                          ; MTIMES
79    (EQ)
80    (JMPIFNOT L88)
82    (GETVALUE&PUSH 1)                   ; Y
84    (CALL1 23)                          ; NFORMAT
86    (SETVALUE 1)                        ; Y
88    L88
88    (BIND 24)                           ; TIMESP
90    (LOAD 3)
91    (BIND 25)                           ; NEGXPTY
93    (LOAD&PUSH 20)
94    (CALL1 12)                          ; SUBST2
96    L96
96    (UNBIND 2)
98    (SKIP 1)
100   L100
100   (PUSH)
101   (NIL&PUSH)
102   (CALL2 26)                          ; SIMPLIFYA
104   (UNBIND 4)
106   (SKIP&RET 4)
108   L108
108   (CONST 11)                          ; ((MMINUS) 1)
109   (SETVALUE 1)                        ; Y
111   (LOAD&PUSH 13)
112   (CALL1&PUSH 9)                      ; NFORMAT-ALL
114   (CALL1 12)                          ; SUBST2
116   (JMP L100)
118   L118
118   (GETVALUE&PUSH 1)                   ; Y
120   (JMPIFEQTO 10 L108)                 ; -1
123   (GETVALUE&PUSH 0)                   ; X
125   (CALLS2&JMPIF 6 L152)               ; SYMBOLP
128   (GETVALUE&PUSH 0)                   ; X
130   (CALL1&JMPIFNOT 13 L152)            ; FUNCTIONP
133   (PUSH-UNBOUND 1)
135   (CALLS2&PUSH 143)                   ; GENSYM
137   (LOAD&PUSH 0)
138   (CONST&PUSH 14)                     ; OPERATORS
139   (CONST&PUSH 15)                     ; APPLICATION-OPERATOR
140   (CALLS2 136)                        ; SYSTEM::%PUT
142   (LOAD&PUSH 0)
143   (GETVALUE&PUSH 0)                   ; X
145   (CALLS2 130)                        ; SYSTEM::%PUTD
147   (LOAD 0)
148   (SETVALUE 0)                        ; X
150   (SKIP 1)
152   L152
152   (GETVALUE&PUSH 0)                   ; X
154   (CALL1&PUSH 16)                     ; GETOPR
156   (GETVALUE&PUSH 1)                   ; Y
158   (CALL1 16)                          ; GETOPR
160   (BIND 17)                           ; OPRY
162   (LOAD 3)
163   (BIND 18)                           ; OPRX
165   (LOAD&PUSH 20)
166   (CALL1 19)                          ; SUBST1
168   (JMP L96)


Disassembly of function #:|(DEFVAR DUMMY-VARIABLE-OPERATORS '(%PRODUCT %SUM %LAPLACE ...))-10|
(CONST 0) = (SPECIAL DUMMY-VARIABLE-OPERATORS)
(CONST 1) = DUMMY-VARIABLE-OPERATORS
(CONST 2) = (%PRODUCT %SUM %LAPLACE %INTEGRATE %LIMIT %AT)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL DUMMY-VARIABLE-OPERATORS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; DUMMY-VARIABLE-OPERATORS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; DUMMY-VARIABLE-OPERATORS
8     (CONST&PUSH 2)                      ; (%PRODUCT %SUM %LAPLACE ...)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; DUMMY-VARIABLE-OPERATORS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SUBST1 (Z) ...)-11|
(CONST 0) = SUBST1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBST1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBST1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBST1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBST1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBST1
8     (SKIP&RET 1)


Disassembly of function SUBST1
(CONST 0) = Y
(CONST 1) = X
(CONST 2) = SPECREPP
(CONST 3) = SPECDISREP
(CONST 4) = BIGFLOAT
(CONST 5) = RAT
(CONST 6) = DIV
(CONST 7) = AT-SUBSTP
(CONST 8) = MCOND
(CONST 9) = SUBST1
(CONST 10) = $OPSUBST
(CONST 11) = OPRY
(CONST 12) = MQUOTIENT
(CONST 13) = (T NIL $%E $%PI $%I)
(CONST 14) = MEMQ
(CONST 15) = LAMBDA
(CONST 16) = ARRAY
(CONST 17) = MNUMP
(CONST 18) = $SUBNUMSIMP
(CONST 19) = $SUBVARP
(CONST 20) = MQAPPLY
(CONST 21) = SUBSTP
(CONST 22) = (MQAPPLY)
(CONST 23) = SUBST0
(CONST 24) = 
"Attempt to MAXIMA-SUBSTITUTE ~M for ~M in ~M~
			   ~%Illegal substitution for operator of expression"
(CONST 25) = MERROR
(CONST 26) = OPRX
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (OPRY $OPSUBST OPRX $SUBNUMSIMP X Y)
172 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L44)
3     (LOAD&PUSH 1)
4     (CALL1&JMPIF 2 L54)                 ; SPECREPP
7     (LOAD 1)
8     (CAR)
9     (CAR&PUSH)
10    (JMPIFEQTO 4 L41)                   ; BIGFLOAT
13    (LOAD 1)
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFNOTEQTO 5 L36)                ; RAT
19    (GETVALUE&PUSH 0)                   ; Y
21    (LOAD 2)
22    (CDR)
23    (CAR&PUSH)
24    (CALLS2&JMPIF 2 L61)                ; EQUAL
27    (GETVALUE&PUSH 0)                   ; Y
29    (LOAD 2)
30    (CDR)
31    (CDR)
32    (CAR&PUSH)
33    (CALLS2&JMPIF 2 L61)                ; EQUAL
36    L36
36    (LOAD&PUSH 1)
37    (CALL1&JMPIFNOT 7 L203)             ; AT-SUBSTP
41    L41
41    (LOAD 1)
42    (SKIP&RET 2)
44    L44
44    (GETVALUE&PUSH 0)                   ; Y
46    (LOAD&PUSH 2)
47    (CALLS2&JMPIFNOT 2 L41)             ; EQUAL
50    (GETVALUE 1)                        ; X
52    (SKIP&RET 2)
54    L54
54    (LOAD&PUSH 1)
55    (CALL1&PUSH 3)                      ; SPECDISREP
57    (JMPTAIL 1 3 L0)
61    L61
61    (LOAD 1)
62    (CDR)
63    (CAR&PUSH)
64    (JSR&PUSH L0)
67    (LOAD 2)
68    (CDR)
69    (CDR)
70    (CAR&PUSH)
71    (JSR&PUSH L0)
74    (CALL2 6)                           ; DIV
76    (SKIP&RET 2)
78    L78
78    (LOAD 1)
79    (CAR)
80    (CAR&PUSH)
81    (NIL)
82    (CONS&PUSH)
83    (LOAD 2)
84    (CDR)
85    (CAR&PUSH)
86    (JSR&PUSH L0)
89    (LOAD 3)
90    (CDR)
91    (CDR)
92    (CAR&PUSH)
93    (JSR&PUSH L0)
96    (LOAD 4)
97    (CDR)
98    (CDR)
99    (CDR)
100   (CAR&PUSH)
101   (LOAD 5)
102   (CDR)
103   (CDR)
104   (CDR)
105   (CDR)
106   (CAR&PUSH)
107   (JSR&PUSH L0)
110   (LIST 5)
112   (SKIP&RET 2)
114   L114
114   (CONST 20)                          ; MQAPPLY
115   (BIND 21)                           ; SUBSTP
117   (CONST&PUSH 22)                     ; (MQAPPLY)
118   (GETVALUE&PUSH 1)                   ; X
120   (LOAD 5)
121   (LIST*&PUSH 2)
123   (LOAD&PUSH 6)
124   (CALL2 23)                          ; SUBST0
126   (UNBIND1)
127   (SKIP&RET 3)
129   L129
129   (CONST&PUSH 16)                     ; ARRAY
130   (LOAD 3)
131   (CAR)
132   (CDR&PUSH)
133   (CALL2&JMPIFNOT 14 L154)            ; MEMQ
136   (GETVALUE&PUSH 1)                   ; X
138   (CALL1&JMPIFNOT 17 L145)            ; MNUMP
141   (GETVALUE 18)                       ; $SUBNUMSIMP
143   (JMPIF L114)
145   L145
145   (GETVALUE&PUSH 1)                   ; X
147   (CALL1&JMPIF 17 L154)               ; MNUMP
150   (GETVALUE 1)                        ; X
152   (JMPIFCONSP L114)
154   L154
154   (GETVALUE&PUSH 1)                   ; X
156   (CALL1&JMPIF 19 L114)               ; $SUBVARP
159   (CONST&PUSH 24)                     ; "Attempt to MAXIMA-SUBSTITUTE ~M for ~M in ~M~
			   ~%Illegal substitution for operator of expression"
160   (GETVALUE&PUSH 1)                   ; X
162   (GETVALUE&PUSH 0)                   ; Y
164   (LOAD&PUSH 5)
165   (CALL 4 25)                         ; MERROR
168   (SKIP&RET 3)
170   L170
170   (GETVALUE&PUSH 1)                   ; X
172   (CALLS2&JMPIF 8 L129)               ; NUMBERP
175   (GETVALUE&PUSH 1)                   ; X
177   (CONST&PUSH 13)                     ; (T NIL $%E $%PI $%I)
178   (CALL2&JMPIF 14 L129)               ; MEMQ
181   (GETVALUE 1)                        ; X
183   (JMPIFATOM L199)
185   (GETVALUE 1)                        ; X
187   (CAR&PUSH)
188   (JMPIFEQTO 15 L199)                 ; LAMBDA
191   (GETVALUE 1)                        ; X
193   (CAR)
194   (CAR&PUSH)
195   (JMPIFNOTEQTO 15 L129)              ; LAMBDA
199   L199
199   (GETVALUE 26)                       ; OPRX
201   (JMP L248)
203   L203
203   (GETVALUE&PUSH 0)                   ; Y
205   (T)
206   (JMPIFNOTEQ L215)
208   (LOAD 1)
209   (CAR)
210   (CAR&PUSH)
211   (JMPIFEQTO 8 L78)                   ; MCOND
215   L215
215   (CONST&SYMBOL-FUNCTION&PUSH 9)      ; SUBST1
217   (LOAD&CDR&PUSH 2)
219   (CALLSR&PUSH 0 22)                  ; MAPCAR
222   (GETVALUE 10)                       ; $OPSUBST
224   (JMPIFNOT L245)
226   (GETVALUE&PUSH 11)                  ; OPRY
228   (LOAD 3)
229   (CAR)
230   (CAR)
231   (JMPIFEQ L170)
233   (LOAD 2)
234   (CAR)
235   (CAR&PUSH)
236   (JMPIFNOTEQTO 5 L245)               ; RAT
239   (GETVALUE&PUSH 11)                  ; OPRY
241   (JMPIFEQTO 12 L170)                 ; MQUOTIENT
245   L245
245   (LOAD 2)
246   (CAR)
247   (CAR)
248   L248
248   (PUSH)
249   (NIL)
250   (CONS&PUSH)
251   (LOAD 1)
252   (CONS&PUSH)
253   (LOAD&PUSH 3)
254   (CALL2 23)                          ; SUBST0
256   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SUBST2 (Z) ...)-12|
(CONST 0) = SUBST2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBST2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBST2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBST2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBST2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBST2
8     (SKIP&RET 1)


Disassembly of function SUBST2
(CONST 0) = SPECREPP
(CONST 1) = SPECDISREP
(CONST 2) = ATP
(CONST 3) = (%DERIVATIVE %LAPLACE)
(CONST 4) = MEMQ
(CONST 5) = AT-SUBSTP
(CONST 6) = Y
(CONST 7) = ALIKE1
(CONST 8) = X
(CONST 9) = TIMESP
(CONST 10) = MTIMES
(CONST 11) = NFORMAT
(CONST 12) = MEXPT
(CONST 13) = NEGXPTY
(CONST 14) = -1
(CONST 15) = $EXPTSUBST
(CONST 16) = EXPTHACK
(CONST 17) = (MEXPT)
(CONST 18) = $DERIVSUBST
(CONST 19) = %DERIVATIVE
(CONST 20) = SUBST-DIFF-MATCH
(CONST 21) = SUBST2
(CONST 22) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($EXPTSUBST NEGXPTY $DERIVSUBST X TIMESP Y ATP)
136 byte-code instructions:
0     L0
0     (NIL&PUSH)
1     (LOAD 2)
2     (JMPIFATOM L23)
4     (LOAD&PUSH 2)
5     (CALL1&JMPIF 0 L26)                 ; SPECREPP
8     (GETVALUE 2)                        ; ATP
10    (JMPIFNOT L19)
12    (LOAD 2)
13    (CAR)
14    (CAR&PUSH)
15    (CONST&PUSH 3)                      ; (%DERIVATIVE %LAPLACE)
16    (CALL2&JMPIF 4 L23)                 ; MEMQ
19    L19
19    (LOAD&PUSH 2)
20    (CALL1&JMPIFNOT 5 L33)              ; AT-SUBSTP
23    L23
23    (LOAD 2)
24    (SKIP&RET 3)
26    L26
26    (LOAD&PUSH 2)
27    (CALL1&PUSH 1)                      ; SPECDISREP
29    (JMPTAIL 1 4 L0)
33    L33
33    (GETVALUE&PUSH 6)                   ; Y
35    (LOAD&PUSH 3)
36    (CALL2&JMPIF 7 L60)                 ; ALIKE1
39    (GETVALUE 9)                        ; TIMESP
41    (JMPIFNOT L111)
44    (LOAD 2)
45    (CAR)
46    (CAR&PUSH)
47    (JMPIFNOTEQTO 10 L111)              ; MTIMES
50    (GETVALUE&PUSH 6)                   ; Y
52    (LOAD&PUSH 3)
53    (CALL1 11)                          ; NFORMAT
55    (STORE 3)
56    (PUSH)
57    (CALL2&JMPIFNOT 7 L111)             ; ALIKE1
60    L60
60    (GETVALUE 8)                        ; X
62    (SKIP&RET 3)
64    L64
64    (NIL&STORE 0)
66    (GETVALUE 18)                       ; $DERIVSUBST
68    (JMPIFNOT L192)
71    (JMP L168)
74    L74
74    (CONST 14)                          ; -1
75    (STORE 0)
76    L76
76    (CONST&PUSH 17)                     ; (MEXPT)
77    (GETVALUE&PUSH 8)                   ; X
79    (LOAD&PUSH 2)
80    (LIST 3)
82    (SKIP&RET 3)
84    L84
84    (LOAD 3)
85    (SKIP&RET 4)
87    L87
87    (GETVALUE 6)                        ; Y
89    (CDR)
90    (CDR&PUSH)
91    (LOAD&CDR&PUSH 3)
93    (CALL2&PUSH 20)                     ; SUBST-DIFF-MATCH
95    (LOAD&JMPIFNOT 0 L84)
98    (LOAD 3)
99    (CAR)
100   (CAR&PUSH)
101   (NIL)
102   (CONS&PUSH)
103   (GETVALUE&PUSH 8)                   ; X
105   (LOAD 2)
106   (CDR)
107   (CONS)
108   (CONS)
109   (SKIP&RET 4)
111   L111
111   (GETVALUE 6)                        ; Y
113   (CAR)
114   (CAR&PUSH)
115   (JMPIFNOTEQTO 12 L164)              ; MEXPT
118   (LOAD 2)
119   (CAR)
120   (CAR&PUSH)
121   (JMPIFNOTEQTO 12 L164)              ; MEXPT
124   (GETVALUE 6)                        ; Y
126   (CDR)
127   (CAR&PUSH)
128   (LOAD 3)
129   (CDR)
130   (CAR&PUSH)
131   (CALL2&JMPIFNOT 7 L164)             ; ALIKE1
134   (GETVALUE&PUSH 13)                  ; NEGXPTY
136   (LOAD 3)
137   (CDR)
138   (CDR)
139   (CAR&PUSH)
140   (CALL2&JMPIF 7 L74)                 ; ALIKE1
144   (GETVALUE 15)                       ; $EXPTSUBST
146   (JMPIFNOT L64)
149   (GETVALUE 6)                        ; Y
151   (CDR)
152   (CDR)
153   (CAR&PUSH)
154   (LOAD 3)
155   (CDR)
156   (CDR)
157   (CAR&PUSH)
158   (CALL2 16)                          ; EXPTHACK
160   (STORE 0)
161   (JMPIF L76)
164   L164
164   (GETVALUE 18)                       ; $DERIVSUBST
166   (JMPIFNOT L192)
168   L168
168   (GETVALUE 6)                        ; Y
170   (CAR)
171   (CAR&PUSH)
172   (JMPIFNOTEQTO 19 L192)              ; %DERIVATIVE
175   (LOAD 2)
176   (CAR)
177   (CAR&PUSH)
178   (JMPIFNOTEQTO 19 L192)              ; %DERIVATIVE
181   (GETVALUE 6)                        ; Y
183   (CDR)
184   (CAR&PUSH)
185   (LOAD 3)
186   (CDR)
187   (CAR&PUSH)
188   (CALL2&JMPIF 7 L87)                 ; ALIKE1
192   L192
192   (CONST&SYMBOL-FUNCTION&PUSH 21)     ; SUBST2
194   (LOAD&PUSH 3)
195   (CALL2 22)                          ; RECUR-APPLY
197   (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL X Y ...))-13|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN SUBST0 (NEW OLD) ...)-14|
(CONST 0) = SUBST0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBST0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBST0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBST0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBST0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBST0
8     (SKIP&RET 1)


Disassembly of function SUBST0
(CONST 0) = ALIKE
(CONST 1) = ARRAY
(CONST 2) = MEMQ
(CONST 3) = SIMPLIFYA
(CONST 4) = (ARRAY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
47 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (LOAD&CDR&PUSH 2)
4     (CALL2&JMPIF 0 L27)                 ; ALIKE
7     (CONST&PUSH 1)                      ; ARRAY
8     (LOAD 2)
9     (CAR)
10    (CDR&PUSH)
11    (CALL2&JMPIFNOT 2 L48)              ; MEMQ
14    (LOAD 2)
15    (CAR)
16    (CAR&PUSH)
17    (CONST 4)                           ; (ARRAY)
18    (CONS&PUSH)
19    (LOAD 3)
20    L20
20    (CDR)
21    (CONS)
22    (JMP L49)
24    L24
24    (LOAD 1)
25    (SKIP&RET 3)
27    L27
27    (LOAD 2)
28    (CAR)
29    (CAR&PUSH)
30    (LOAD 2)
31    (CAR)
32    (CAR)
33    (JMPIFEQ L24)
35    (LOAD 2)
36    (CAR)
37    (CAR&PUSH)
38    (CONST&PUSH 1)                      ; ARRAY
39    (LOAD 3)
40    (CAR)
41    (CDR&PUSH)
42    (CALL2 2)                           ; MEMQ
44    (CONS&PUSH)
45    (LOAD 2)
46    (JMP L20)
48    L48
48    (LOAD 2)
49    L49
49    (PUSH)
50    (NIL&PUSH)
51    (CALL2 3)                           ; SIMPLIFYA
53    (SKIP&RET 3)


Disassembly of function #:|(DEFUN EXPTHACK (Y Z) ...)-15|
(CONST 0) = EXPTHACK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPTHACK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPTHACK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPTHACK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPTHACK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPTHACK
8     (SKIP&RET 1)


Disassembly of function EXPTHACK
(CONST 0) = Y
(CONST 1) = NN*
(CONST 2) = DN*
(CONST 3) = MNUMP
(CONST 4) = DIV*
(CONST 5) = RATNUMP
(CONST 6) = MPLUS
(CONST 7) = NUMDEN
(CONST 8) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DN* NN* Y)
writes special variable : (Y)
98 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; Y
3     (NIL)
4     (BIND 1)                            ; NN*
6     (NIL)
7     (BIND 2)                            ; DN*
9     (PUSH-NIL 5)
11    (GETVALUE&PUSH 0)                   ; Y
13    (CALL1&JMPIFNOT 3 L21)              ; MNUMP
16    (LOAD&PUSH 15)
17    (CALL1&JMPIF 3 L118)                ; MNUMP
21    L21
21    (LOAD 15)
23    (JMPIFATOM L147)
26    (LOAD&PUSH 15)
27    (CALL1&JMPIF 5 L153)                ; RATNUMP
31    (LOAD 15)
33    (CAR)
34    (CAR&PUSH)
35    (JMPIFEQTO 6 L153)                  ; MPLUS
39    L39
39    (GETVALUE&PUSH 0)                   ; Y
41    (CALL1 7)                           ; NUMDEN
43    (GETVALUE 1)                        ; NN*
45    (STORE 4)
46    (GETVALUE 2)                        ; DN*
48    (STORE 3)
49    (LOAD&PUSH 15)
50    (CALL1 7)                           ; NUMDEN
52    (GETVALUE 1)                        ; NN*
54    (STORE 2)
55    (GETVALUE 2)                        ; DN*
57    (STORE 1)
58    (PUSH)
59    (JMPIFNOTEQTO 8 L67)                ; 1
62    (LOAD&PUSH 3)
63    (JMPIFEQTO 8 L134)                  ; 1
67    L67
67    (LOAD&PUSH 1)
68    (LOAD&PUSH 4)
69    (CALL2&PUSH 4)                      ; DIV*
71    (CALL1 7)                           ; NUMDEN
73    (GETVALUE&PUSH 2)                   ; DN*
75    (JMPIFNOTEQTO 8 L83)                ; 1
78    (GETVALUE&PUSH 1)                   ; NN*
80    (JMPIFEQTO 8 L137)                  ; 1
83    L83
83    (GETVALUE&PUSH 1)                   ; NN*
85    (JMPIFEQTO 8 L140)                  ; 1
88    (GETVALUE&PUSH 2)                   ; DN*
90    (JMPIFNOTEQTO 8 L153)               ; 1
93    (GETVALUE 1)                        ; NN*
95    L95
95    (STORE 0)
96    (LOAD&PUSH 2)
97    (LOAD&PUSH 5)
98    (CALL2&PUSH 4)                      ; DIV*
100   (CALL1 7)                           ; NUMDEN
102   (GETVALUE&PUSH 2)                   ; DN*
104   (JMPIFNOTEQTO 8 L153)               ; 1
107   (GETVALUE&PUSH 1)                   ; NN*
109   (LOAD&PUSH 1)
110   (CALL2 4)                           ; DIV*
112   L112
112   (SKIP 5)
114   (UNBIND 2)
116   (JMP L158)
118   L118
118   (LOAD&PUSH 15)
119   (GETVALUE&PUSH 0)                   ; Y
121   (CALL2 4)                           ; DIV*
123   (SETVALUE 0)                        ; Y
125   (PUSH)
126   (CALLS2 8)                          ; NUMBERP
128   (JMPIFNOT1 L112)
130   (GETVALUE 0)                        ; Y
132   (JMP L112)
134   L134
134   (CONST 8)                           ; 1
135   (JMP L95)
137   L137
137   (CONST 8)                           ; 1
138   (JMP L95)
140   L140
140   (CONST&PUSH 8)                      ; 1
141   (GETVALUE&PUSH 2)                   ; DN*
143   (CALL2 4)                           ; DIV*
145   (JMP L95)
147   L147
147   (GETVALUE&PUSH 0)                   ; Y
149   (CALL1&JMPIF 3 L39)                 ; MNUMP
153   L153
153   (NIL)
154   (SKIP 5)
156   (UNBIND 2)
158   L158
158   (UNBIND1)
159   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SUBST-DIFF-MATCH (L1 L2) ...)-16|
(CONST 0) = SUBST-DIFF-MATCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBST-DIFF-MATCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBST-DIFF-MATCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBST-DIFF-MATCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBST-DIFF-MATCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBST-DIFF-MATCH
8     (SKIP&RET 1)


Disassembly of function SUBST-DIFF-MATCH
(CONST 0) = ALIKE1
(CONST 1) = FIXNUMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
90 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALLS1&PUSH 158)                   ; COPY-LIST
4     (NIL&PUSH)
5     (LOAD&JMPIFNOT 2 L114)
9     L9
9     (LOAD&PUSH 1)
10    (JMP L48)
12    L12
12    (LOAD&CDR&PUSH 0)
14    (LOAD 1)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD 5)
19    (CDR)
20    (CAR&PUSH)
21    (CALLSR&PUSH 1 54)                  ; -
24    (LOAD 2)
25    (CDR)
26    (CDR)
27    (CDR)
28    (CONS)
29    (JMP L36)
31    L31
31    (LOAD&PUSH 0)
32    (LOAD 1)
33    (CDR)
34    (CDR)
35    (CDR)
36    L36
36    (PUSH)
37    (CALLS1 170)                        ; RPLACD
39    (JMP L99)
41    L41
41    (NIL)
42    (SKIP&RET 6)
44    L44
44    (LOAD 0)
45    (CDR)
46    (CDR)
47    (STORE 0)
48    L48
48    (LOAD 0)
49    (CDR)
50    (JMPIFNOT L97)
52    (LOAD&CAR&PUSH 3)
54    (LOAD 1)
55    (CDR)
56    (CAR&PUSH)
57    (CALL2&JMPIFNOT 0 L44)              ; ALIKE1
60    (LOAD 3)
61    (CDR)
62    (CAR&PUSH)
63    (CALL1&JMPIFNOT 1 L97)              ; FIXNUMP
66    (LOAD 0)
67    (CDR)
68    (CDR)
69    (CAR&PUSH)
70    (CALL1&JMPIFNOT 1 L97)              ; FIXNUMP
73    (LOAD 3)
74    (CDR)
75    (CAR&PUSH)
76    (LOAD 1)
77    (CDR)
78    (CDR)
79    (CAR&PUSH)
80    (CALLSR&JMPIF 1 47 L12)             ; <
85    (LOAD 3)
86    (CDR)
87    (CAR&PUSH)
88    (LOAD 1)
89    (CDR)
90    (CDR)
91    (CAR&PUSH)
92    (CALLSR&JMPIF 1 45 L31)             ; =
97    L97
97    (T&STORE 1)
99    L99
99    (SKIP 1)
101   (LOAD&JMPIF 0 L41)
104   (LOAD 2)
105   (CDR)
106   (CDR)
107   (STORE 2)
108   (NIL&STORE 0)
110   (LOAD&JMPIF 2 L9)
114   L114
114   (LOAD 1)
115   (SKIP&RET 6)


Disassembly of function #:|(DEFUN AT-SUBSTP (Z) ...)-17|
(CONST 0) = AT-SUBSTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE AT-SUBSTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; AT-SUBSTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AT-SUBSTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE AT-SUBSTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; AT-SUBSTP
8     (SKIP&RET 1)


Disassembly of function AT-SUBSTP
(CONST 0) = ATP
(CONST 1) = (%DERIVATIVE %DEL)
(CONST 2) = MEMQ
(CONST 3) = DUMMY-VARIABLE-OPERATORS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DUMMY-VARIABLE-OPERATORS ATP)
16 byte-code instructions:
0     (GETVALUE 0)                        ; ATP
2     (JMPIFNOT1 L21)
4     (LOAD 1)
5     (CAR)
6     (CAR&PUSH)
7     (CONST&PUSH 1)                      ; (%DERIVATIVE %DEL)
8     (CALL2 2)                           ; MEMQ
10    (JMPIF1 L21)
12    (LOAD 1)
13    (CAR)
14    (CAR&PUSH)
15    (GETVALUE&PUSH 3)                   ; DUMMY-VARIABLE-OPERATORS
17    (CALL2 2)                           ; MEMQ
19    (SKIP&RET 2)
21    L21
21    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN RECUR-APPLY (FUN E) ...)-18|
(CONST 0) = RECUR-APPLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RECUR-APPLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RECUR-APPLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RECUR-APPLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RECUR-APPLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RECUR-APPLY
8     (SKIP&RET 1)


Disassembly of function RECUR-APPLY
(CONST 0) = BIGFLOAT
(CONST 1) = SPECREPP
(CONST 2) = SPECDISREP
(CONST 3) = ALIKE
(CONST 4) = ARRAY
(CONST 5) = MEMQ
(CONST 6) = SIMPLIFYA
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
38 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (JMPIFEQTO 0 L39)                   ; BIGFLOAT
6     (LOAD&PUSH 1)
7     (CALL1&JMPIF 1 L42)                 ; SPECREPP
10    (LOAD&PUSH 2)
11    (LOAD&CDR&PUSH 2)
13    (CALLSR&PUSH 0 22)                  ; MAPCAR
16    (LOAD&PUSH 0)
17    (LOAD&CDR&PUSH 3)
19    (CALL2&JMPIF 3 L50)                 ; ALIKE
22    (LOAD 2)
23    (CAR)
24    (CAR&PUSH)
25    (CONST&PUSH 4)                      ; ARRAY
26    (LOAD 4)
27    (CAR)
28    (CDR&PUSH)
29    (CALL2 5)                           ; MEMQ
31    (CONS&PUSH)
32    (LOAD 1)
33    (CONS&PUSH)
34    (NIL&PUSH)
35    (CALL2 6)                           ; SIMPLIFYA
37    (SKIP&RET 4)
39    L39
39    (LOAD 1)
40    (SKIP&RET 3)
42    L42
42    (LOAD&PUSH 2)
43    (LOAD&PUSH 2)
44    (CALL1&PUSH 2)                      ; SPECDISREP
46    (FUNCALL 1)
48    (SKIP&RET 3)
50    L50
50    (LOAD 2)
51    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $DEPENDS N ...)-19|
(CONST 0) = $DEPENDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DEPENDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DEPENDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DEPENDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DEPENDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DEPENDS
8     (SKIP&RET 1)


Disassembly of function $DEPENDS
(CONST 0) = "DEPENDS takes an even number of arguments."
(CONST 1) = MERROR
(CONST 2) = 1
(CONST 3) = NARG1
(CONST 4) = $LISTP
(CONST 5) = DEPENDS1
(CONST 6) = 2
(CONST 7) = I-$DEPENDENCIES
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
53 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CALLS2&JMPIFNOT 148 L10)           ; ODDP
7     (CONST&PUSH 0)                      ; "DEPENDS takes an even number of arguments."
8     (CALL1 1)                           ; MERROR
10    L10
10    (CONST&PUSH 2)                      ; 1
11    (NIL&PUSH)
12    (JMP L68)
14    L14
14    (LOAD&PUSH 1)
15    (LOAD&PUSH 5)
16    (CALL2 3)                           ; NARG1
18    (CDR&PUSH)
19    (LOAD&JMPIFNOT 0 L38)
22    L22
22    (LOAD&CAR&PUSH 0)
24    (LOAD&INC&PUSH 3)
26    (LOAD&PUSH 7)
27    (CALL2&PUSH 3)                      ; NARG1
29    (CALL2&PUSH 5)                      ; DEPENDS1
31    (LOAD&CONS&STORE 1)
33    (LOAD&CDR&STORE 0)
35    (LOAD&JMPIF 0 L22)
38    L38
38    (SKIP 1)
40    (JMP L62)
42    L42
42    (LOAD&PUSH 1)
43    (LOAD&PUSH 5)
44    (CALL2&PUSH 3)                      ; NARG1
46    (CALL1&JMPIF 4 L14)                 ; $LISTP
49    (LOAD&PUSH 1)
50    (LOAD&PUSH 5)
51    (CALL2&PUSH 3)                      ; NARG1
53    (LOAD&INC&PUSH 2)
55    (LOAD&PUSH 6)
56    (CALL2&PUSH 3)                      ; NARG1
58    (CALL2&PUSH 5)                      ; DEPENDS1
60    (LOAD&CONS&STORE 0)
62    L62
62    (LOAD&PUSH 1)
63    (CONST&PUSH 6)                      ; 2
64    (CALLSR&STORE 2 53 1)               ; +
68    L68
68    (LOAD&PUSH 1)
69    (LOAD&PUSH 3)
70    (CALLSR&JMPIFNOT 1 48 L42)          ; >
74    (LOAD&PUSH 0)
75    (CALLS2&PUSH 73)                    ; NREVERSE
77    (CALL1 7)                           ; I-$DEPENDENCIES
79    (SKIP&RET 5)


Disassembly of function #:|(DEFUN DEPENDS1 (X Y) ...)-20|
(CONST 0) = DEPENDS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEPENDS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEPENDS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEPENDS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEPENDS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEPENDS1
8     (SKIP&RET 1)


Disassembly of function DEPENDS1
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $DEPENDS
(CONST 3) = NONSYMCHK
(CONST 4) = $LISTP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; $DEPENDS
9     (CALL2 3)                           ; NONSYMCHK
11    (GETVALUE&PUSH 0)                   ; X
13    (NIL)
14    (CONS&PUSH)
15    (GETVALUE&PUSH 1)                   ; Y
17    (CALL1&JMPIF 4 L29)                 ; $LISTP
20    (GETVALUE&PUSH 1)                   ; Y
22    (NIL)
23    (CONS)
24    (CONS)
25    L25
25    (UNBIND 2)
27    (SKIP&RET 3)
29    L29
29    (GETVALUE 1)                        ; Y
31    (CDR)
32    (CONS)
33    (JMP L25)


Disassembly of function #:|(DEFMSPEC $DEPENDENCIES (FORM) ...)-21-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $DEPENDENCIES (FORM) ...)-21-2-1|>
(CONST 1) = $DEPENDENCIES
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $DEPENDENCIES (FORM) ...)-21-2-1|>
1     (CONST&PUSH 1)                      ; $DEPENDENCIES
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DEPENDENCIES (FORM) ...)-21-2-1|
(CONST 0) = I-$DEPENDENCIES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (CALL1 0)                           ; I-$DEPENDENCIES
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN I-$DEPENDENCIES (L) ...)-22|
(CONST 0) = I-$DEPENDENCIES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE I-$DEPENDENCIES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; I-$DEPENDENCIES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; I-$DEPENDENCIES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE I-$DEPENDENCIES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; I-$DEPENDENCIES
8     (SKIP&RET 1)


Disassembly of function I-$DEPENDENCIES
(CONST 0) = "Wrong format.  Try F(X)."
(CONST 1) = MERROR
(CONST 2) = MQAPPLY
(CONST 3) = ARRAY
(CONST 4) = MEMQ
(CONST 5) = "Improper form for DEPENDS:~%~M"
(CONST 6) = DEPENDS
(CONST 7) = MGET
(CONST 8) = Y
(CONST 9) = UNION*
(CONST 10) = MPUTPROP
(CONST 11) = $DEPENDENCIES
(CONST 12) = ((MLIST SIMP))
(CONST 13) = ADD2LNC
(CONST 14) = (MLIST SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($DEPENDENCIES Y)
writes special variables : ($DEPENDENCIES Y)
68 byte-code instructions:
0     (LOAD&PUSH 1)
1     (NIL&PUSH)
2     (JMP L87)
5     L5
5     (CONST&PUSH 0)                      ; "Wrong format.  Try F(X)."
6     (CALL1 1)                           ; MERROR
8     (JMP L85)
11    L11
11    (CONST&PUSH 5)                      ; "Improper form for DEPENDS:~%~M"
12    (LOAD&PUSH 1)
13    (CALL2 1)                           ; MERROR
15    (JMP L85)
18    L18
18    (LOAD&CAR&STORE 1 0)
21    (JMPIFATOM L5)
23    (LOAD 0)
24    (CAR)
25    (CAR&PUSH)
26    (JMPIFEQTO 2 L11)                   ; MQAPPLY
29    (CONST&PUSH 3)                      ; ARRAY
30    (LOAD 1)
31    (CAR)
32    (CDR&PUSH)
33    (CALL2&JMPIF 4 L11)                 ; MEMQ
36    (LOAD 0)
37    (CAR)
38    (CAR&PUSH)
39    (CONST&PUSH 6)                      ; DEPENDS
40    (CALL2 7)                           ; MGET
42    (BIND 8)                            ; Y
44    (LOAD 3)
45    (CAR)
46    (CAR&PUSH)
47    (LOAD&CDR&PUSH 4)
49    (CALLS2&PUSH 72)                    ; REVERSE
51    (GETVALUE&PUSH 8)                   ; Y
53    (CALL2 9)                           ; UNION*
55    (SETVALUE 8)                        ; Y
57    (PUSH)
58    (CONST&PUSH 6)                      ; DEPENDS
59    (CALL 3 10)                         ; MPUTPROP
62    (GETVALUE 11)                       ; $DEPENDENCIES
64    (CDR)
65    (JMPIF L72)
67    (CONST&PUSH 12)                     ; ((MLIST SIMP))
68    (CALLS1 158)                        ; COPY-LIST
70    (SETVALUE 11)                       ; $DEPENDENCIES
72    L72
72    (LOAD 3)
73    (CAR)
74    (CAR&PUSH)
75    (NIL)
76    (CONS&PUSH)
77    (GETVALUE 8)                        ; Y
79    (CONS&PUSH)
80    (GETVALUE&PUSH 11)                  ; $DEPENDENCIES
82    (CALL2 13)                          ; ADD2LNC
84    (UNBIND1)
85    L85
85    (LOAD&CDR&STORE 1)
87    L87
87    (LOAD&PUSH 1)
88    (CALLS1&JMPIFNOT 146 L18)           ; ENDP
92    (SKIP 2)
94    (CONST&PUSH 14)                     ; (MLIST SIMP)
95    (LOAD 2)
96    (CONS)
97    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $GRADEF (L) ...)-23-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $GRADEF (L) ...)-23-2-1|>
(CONST 1) = $GRADEF
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $GRADEF (L) ...)-23-2-1|>
1     (CONST&PUSH 1)                      ; $GRADEF
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $GRADEF (L) ...)-23-2-1|
(CONST 0) = 0
(CONST 1) = 3
(CONST 2) = "Wrong arguments to GRADEF"
(CONST 3) = MERROR
(CONST 4) = MEVAL
(CONST 5) = $ATOMGRAD
(CONST 6) = MGET
(CONST 7) = MPUTPROP
(CONST 8) = I-$DEPENDENCIES
(CONST 9) = $PROPS
(CONST 10) = ADD2LNC
(CONST 11) = MOPP1
(CONST 12) = ARRAY
(CONST 13) = MEMQ
(CONST 14) = "Wrong arguments to GRADEF:~%~M"
(CONST 15) = $GRADEF
(CONST 16) = WNA-ERR
(CONST 17) = "Parameters to GRADEF must be names:~%~M"
(CONST 18) = X
(CONST 19) = REMSIMP
(CONST 20) = (%DERIVATIVE)
(CONST 21) = 1
(CONST 22) = #.#'CONS
(CONST 23) = STRIPDOLLAR
(CONST 24) = GRAD
(CONST 25) = PUTPROP
(CONST 26) = $GRADEFS
(CONST 27) = ((MLIST SIMP))
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($GRADEFS X $PROPS)
writes special variable : ($GRADEFS)
167 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; 0
4     (LOAD 1)
5     (JMPIFATOM L65)
7     (LOAD 1)
8     (CAR)
9     (CAR&PUSH)
10    (CALL1&JMPIF 11 L114)               ; MOPP1
14    (CONST&PUSH 12)                     ; ARRAY
15    (LOAD 2)
16    (CAR)
17    (CDR&PUSH)
18    (CALL2&JMPIF 13 L114)               ; MEMQ
22    (LOAD&PUSH 1)
23    (CALLS2&PUSH 71)                    ; LENGTH
25    (LOAD&PUSH 4)
26    (CALLS2&PUSH 71)                    ; LENGTH
28    (CALLSR&STORE 1 54 0)               ; -
32    (PUSH)
33    (CALLS2&JMPIF 147 L120)             ; MINUSP
37    (LOAD&CDR&PUSH 1)
39    (LOAD&JMPIFNOT 0 L57)
42    L42
42    (LOAD&CAR&PUSH 0)
44    (CALLS2&JMPIF 6 L52)                ; SYMBOLP
47    (CONST&PUSH 17)                     ; "Parameters to GRADEF must be names:~%~M"
48    (LOAD&CAR&PUSH 1)
50    (CALL2 3)                           ; MERROR
52    L52
52    (LOAD&CDR&STORE 0)
54    (LOAD&JMPIF 0 L42)
57    L57
57    (SKIP 1)
59    (NIL&PUSH)
60    (LOAD&CDR&PUSH 4)
62    (JMP L144)
65    L65
65    (LOAD&PUSH 3)
66    (CALLS2&PUSH 71)                    ; LENGTH
68    (CONST&PUSH 1)                      ; 3
69    (CALLSR&JMPIF 1 45 L76)             ; =
73    (CONST&PUSH 2)                      ; "Wrong arguments to GRADEF"
74    (CALL1 3)                           ; MERROR
76    L76
76    (LOAD&PUSH 1)
77    (LOAD 4)
78    (CDR)
79    (CAR&PUSH)
80    (LOAD 5)
81    (CDR)
82    (CDR)
83    (CAR&PUSH)
84    (CALL1 4)                           ; MEVAL
86    (CONS&PUSH)
87    (LOAD&PUSH 3)
88    (CONST&PUSH 5)                      ; $ATOMGRAD
89    (CALL2 6)                           ; MGET
91    (CONS&PUSH)
92    (CONST&PUSH 5)                      ; $ATOMGRAD
93    (CALL 3 7)                          ; MPUTPROP
96    (LOAD&PUSH 1)
97    (NIL)
98    (CONS&PUSH)
99    (LOAD 4)
100   (CDR)
101   (CAR&PUSH)
102   (LIST&PUSH 2)
104   (NIL)
105   (CONS&PUSH)
106   (CALL1 8)                           ; I-$DEPENDENCIES
108   (LOAD&PUSH 1)
109   (GETVALUE 9)                        ; $PROPS
111   (JMP L249)
114   L114
114   (CONST&PUSH 14)                     ; "Wrong arguments to GRADEF:~%~M"
115   (LOAD&PUSH 2)
116   (CALL2 3)                           ; MERROR
118   (SKIP&RET 4)
120   L120
120   (CONST&PUSH 15)                     ; $GRADEF
121   (CALL1 16)                          ; WNA-ERR
123   (SKIP&RET 4)
125   L125
125   (LOAD&CAR&PUSH 0)
127   (LOAD 0)
128   (BIND 18)                           ; X
130   (GETVALUE&PUSH 18)                  ; X
132   (CALL1&PUSH 4)                      ; MEVAL
134   (CALL1 19)                          ; REMSIMP
136   (UNBIND1)
137   (PUSH)
138   (LOAD&CONS&STORE 2)
140   (SKIP 1)
142   (LOAD&CDR&STORE 0)
144   L144
144   (LOAD&PUSH 0)
145   (CALLS1&JMPIFNOT 146 L125)          ; ENDP
148   (SKIP 1)
150   (LOAD&PUSH 0)
151   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
154   (NIL&PUSH)
155   (LOAD&PUSH 3)
156   (CALLS2&PUSH 71)                    ; LENGTH
158   (LOAD&PUSH 3)
159   (CALLSR&PUSH 1 54)                  ; -
162   (LOAD&PUSH 4)
163   (CALLS1&PUSH 155)                   ; NTHCDR
165   (JMP L187)
167   L167
167   (LOAD&CAR&PUSH 0)
169   (LOAD 0)
170   (BIND 18)                           ; X
172   (CONST&PUSH 20)                     ; (%DERIVATIVE)
173   (LOAD&PUSH 9)
174   (GETVALUE&PUSH 18)                  ; X
176   (CONST&PUSH 21)                     ; 1
177   (LIST 4)
179   (UNBIND1)
180   (PUSH)
181   (LOAD&CONS&STORE 2)
183   (SKIP 1)
185   (LOAD&CDR&STORE 0)
187   L187
187   (LOAD&PUSH 0)
188   (CALLS1&JMPIFNOT 146 L167)          ; ENDP
191   (SKIP 1)
193   (LOAD&PUSH 0)
194   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
197   (CALLSR&STORE 2 35 3)               ; NCONC
201   (LOAD 1)
202   (CAR)
203   (CAR&PUSH)
204   (CONST&PUSH 22)                     ; #.#'CONS
205   (LOAD&CDR&PUSH 3)
207   (CONST&SYMBOL-FUNCTION&PUSH 23)     ; STRIPDOLLAR
209   (LOAD&CDR&PUSH 5)
211   (CALLSR&PUSH 0 22)                  ; MAPCAR
214   (CALLSR&PUSH 1 22)                  ; MAPCAR
217   (LOAD&CDR&PUSH 3)
219   (LOAD 6)
220   (CONS&PUSH)
221   (PUSH-UNBOUND 3)
223   (CALLS1&PUSH 178)                   ; SUBLIS
225   (CONST&PUSH 24)                     ; GRAD
226   (CALL 3 25)                         ; PUTPROP
229   (GETVALUE 26)                       ; $GRADEFS
231   (CDR)
232   (JMPIF L239)
234   (CONST&PUSH 27)                     ; ((MLIST SIMP))
235   (CALLS1 158)                        ; COPY-LIST
237   (SETVALUE 26)                       ; $GRADEFS
239   L239
239   (LOAD 1)
240   (CAR)
241   (CAR&PUSH)
242   (NIL)
243   (CONS&PUSH)
244   (LOAD 2)
245   (CDR)
246   (CONS&PUSH)
247   (GETVALUE 26)                       ; $GRADEFS
249   L249
249   (PUSH)
250   (CALL2 10)                          ; ADD2LNC
252   (LOAD 1)
253   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $DIFF N ...)-24|
(CONST 0) = $DIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DIFF
8     (SKIP&RET 1)


Disassembly of function $DIFF
(CONST 0) = DERIVLIST
(CONST 1) = LISTIFY1
(CONST 2) = DERIV
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; DERIVLIST
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 6)
8     (CALL2&PUSH 1)                      ; LISTIFY1
10    (CALL1 2)                           ; DERIV
12    (UNBIND1)
13    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $DEL (E) ...)-25|
(CONST 0) = $DEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DEL
8     (SKIP&RET 1)


Disassembly of function $DEL
(CONST 0) = STOTALDIFF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; STOTALDIFF
3     (SKIP&RET 2)


Disassembly of function #:|(DEFUN DERIV (E) ...)-26|
(CONST 0) = DERIV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DERIV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DERIV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DERIV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DERIV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DERIV
8     (SKIP&RET 1)


Disassembly of function DERIV
(CONST 0) = $DIFF
(CONST 1) = WNA-ERR
(CONST 2) = STOTALDIFF
(CONST 3) = (1)
(CONST 4) = DERIVLIST
(CONST 5) = ZL-MEMBER
(CONST 6) = NONVARCHECK
(CONST 7) = ML-TYPEP
(CONST 8) = FIXNUM
(CONST 9) = "Improper count to DIFF:~%~M"
(CONST 10) = MERROR
(CONST 11) = SDIFF
(CONST 12) = 0
(CONST 13) = DIFF%DERIV
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (DERIVLIST)
108 byte-code instructions:
0     (PUSH-NIL 3)
2     (LOAD&JMPIFNOT 4 L46)
5     (LOAD 4)
6     (CDR)
7     (JMPIFNOT L51)
9     (LOAD 4)
10    (CDR)
11    (CDR)
12    (JMPIF L19)
14    (LOAD&PUSH 4)
15    (CONST&PUSH 3)                      ; (1)
16    (CALLSR 2 35)                       ; NCONC
19    L19
19    (LOAD&CAR&STORE 4 2)
22    (LOAD&PUSH 4)
23    (CALLS1&STORE 158 4)                ; COPY-LIST
26    (STORE 1)
27    (GETVALUE 4)                        ; DERIVLIST
29    (JMPIFNOT L121)
32    L32
32    (LOAD 1)
33    (CDR)
34    (CAR&PUSH)
35    (GETVALUE&PUSH 4)                   ; DERIVLIST
37    (CALL2&JMPIF 5 L121)                ; ZL-MEMBER
41    (LOAD&CDR&STORE 1)
43    (JMP L112)
46    L46
46    (CONST&PUSH 0)                      ; $DIFF
47    (CALL1 1)                           ; WNA-ERR
49    (JMP L19)
51    L51
51    (LOAD&CAR&PUSH 4)
53    (CALL1 2)                           ; STOTALDIFF
55    (SKIP&RET 5)
57    L57
57    (LOAD 4)
58    (CDR)
59    (JMPIF L144)
62    (LOAD 2)
63    (SKIP&RET 5)
65    L65
65    (CONST&PUSH 0)                      ; $DIFF
66    (CALL1 1)                           ; WNA-ERR
68    (JMP L101)
70    L70
70    (LOAD 1)
71    (CDR)
72    (CDR)
73    (CAR)
74    (STORE 0)
75    (PUSH)
76    (CALLS2&JMPIFNOT 147 L101)          ; MINUSP
79    (CONST&PUSH 9)                      ; "Improper count to DIFF:~%~M"
80    (LOAD&PUSH 1)
81    (CALL2 10)                          ; MERROR
83    (JMP L101)
85    L85
85    (CONST 12)                          ; 0
86    (SKIP&RET 5)
88    L88
88    (LOAD&PUSH 2)
89    (LOAD 2)
90    (CDR)
91    (CAR&PUSH)
92    (CALL2 11)                          ; SDIFF
94    (STORE 2)
95    (PUSH)
96    (JMPIFEQTO 12 L85)                  ; 0
99    (LOAD&DEC&STORE 0)
101   L101
101   (LOAD&PUSH 0)
102   (CALLS2&JMPIFNOT 145 L88)           ; ZEROP
105   (LOAD&PUSH 1)
106   (LOAD 2)
107   (CDR)
108   (CDR)
109   (CDR&PUSH)
110   (CALLS1 170)                        ; RPLACD
112   L112
112   (LOAD 1)
113   (CDR)
114   (JMPIFNOT L57)
116   (GETVALUE 4)                        ; DERIVLIST
118   (JMPIF L32)
121   L121
121   (LOAD 1)
122   (CDR)
123   (CAR&PUSH)
124   (CONST&PUSH 0)                      ; $DIFF
125   (CALL2&JMPIF 6 L101)                ; NONVARCHECK
128   (LOAD 1)
129   (CDR)
130   (CDR)
131   (JMPIFNOT L65)
134   (LOAD 1)
135   (CDR)
136   (CDR)
137   (CAR&PUSH)
138   (CALL1&PUSH 7)                      ; ML-TYPEP
140   (JMPIFEQTO 8 L70)                   ; FIXNUM
144   L144
144   (LOAD&PUSH 2)
145   (LOAD 5)
146   (CDR)
147   (CONS&PUSH)
148   (CALL1 13)                          ; DIFF%DERIV
150   (SKIP&RET 5)


Disassembly of function #:|(DEFUN CHAINRULE (E X) ...)-27|
(CONST 0) = CHAINRULE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHAINRULE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHAINRULE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHAINRULE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHAINRULE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHAINRULE
8     (SKIP&RET 1)


Disassembly of function CHAINRULE
(CONST 0) = X
(CONST 1) = ISLINP
(CONST 2) = %DERIVATIVE
(CONST 3) = FREEL
(CONST 4) = 1
(CONST 5) = DIFF%DERIV
(CONST 6) = 0
(CONST 7) = ATOMGRAD
(CONST 8) = ARRAY
(CONST 9) = MEMQ
(CONST 10) = DEPENDS
(CONST 11) = MGET
(CONST 12) = DERIVFLAG
(CONST 13) = SDIFF
(CONST 14) = Y
(CONST 15) = (MTIMES)
(CONST 16) = (%DERIVATIVE)
(CONST 17) = ADDN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X ISLINP)
120 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE 1)                        ; ISLINP
6     (JMPIF L65)
8     (LOAD&PUSH 6)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL2 7)                           ; ATOMGRAD
13    (JMPIF1 L163)
16    (LOAD 6)
17    (JMPIFATOM L87)
20    (CONST&PUSH 8)                      ; ARRAY
21    (LOAD 7)
22    (CAR)
23    (CDR&PUSH)
24    (CALL2&JMPIF 9 L90)                 ; MEMQ
27    (LOAD 6)
28    (CDR)
29    (CAR)
30    (JMPIFATOM L93)
32    (LOAD 6)
33    (CDR)
34    (CAR)
35    L35
35    (CAR)
36    (CAR)
37    L37
37    (PUSH)
38    (CONST&PUSH 10)                     ; DEPENDS
39    (CALL2 11)                          ; MGET
41    (STORE 0)
42    (JMPIFNOT L98)
44    (NIL)
45    (BIND 12)                           ; DERIVFLAG
47    (NIL&PUSH)
48    (LOAD&PUSH 4)
49    (JMP L145)
52    L52
52    (LOAD&PUSH 6)
53    (GETVALUE&PUSH 0)                   ; X
55    (CONST&PUSH 4)                      ; 1
56    (LIST&PUSH 3)
58    (CALL1 5)                           ; DIFF%DERIV
60    (SKIP 1)
62    (JMP L165)
65    L65
65    (LOAD 6)
66    (JMPIFATOM L81)
68    (LOAD 6)
69    (CAR)
70    (CAR&PUSH)
71    (JMPIFNOTEQTO 2 L81)                ; %DERIVATIVE
74    (LOAD&CDR&PUSH 6)
76    (GETVALUE&PUSH 0)                   ; X
78    (CALL2&JMPIFNOT 3 L52)              ; FREEL
81    L81
81    (CONST 6)                           ; 0
82    (SKIP 1)
84    (JMP L165)
87    L87
87    (LOAD 6)
88    (JMP L37)
90    L90
90    (LOAD 6)
91    (JMP L35)
93    L93
93    (LOAD 6)
94    (CDR)
95    (CAR)
96    (JMP L37)
98    L98
98    (CONST 6)                           ; 0
99    (SKIP 1)
101   (JMP L165)
103   L103
103   (CONST 6)                           ; 0
104   (JMP L137)
106   L106
106   (LOAD&CAR&PUSH 0)
108   (LOAD&PUSH 0)
109   (GETVALUE&PUSH 0)                   ; X
111   (CALL2 13)                          ; SDIFF
113   (BIND 14)                           ; Y
115   (GETVALUE&PUSH 14)                  ; Y
117   (JMPIFEQTO 6 L103)                  ; 0
120   (CONST&PUSH 15)                     ; (MTIMES)
121   (LOAD&PUSH 16)
122   (LOAD&PUSH 5)
123   (CALL2&JMPIF 7 L132)                ; ATOMGRAD
126   (CONST&PUSH 16)                     ; (%DERIVATIVE)
127   (LOAD&PUSH 17)
128   (LOAD&PUSH 6)
129   (CONST&PUSH 4)                      ; 1
130   (LIST 4)
132   L132
132   (PUSH)
133   (GETVALUE&PUSH 14)                  ; Y
135   (LIST 3)
137   L137
137   (UNBIND1)
138   (PUSH)
139   (LOAD&CONS&STORE 2)
141   (SKIP 1)
143   (LOAD&CDR&STORE 0)
145   L145
145   (LOAD&PUSH 0)
146   (CALLS1&JMPIFNOT 146 L106)          ; ENDP
149   (SKIP 1)
151   (LOAD&PUSH 0)
152   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
155   (NIL&PUSH)
156   (CALL2 17)                          ; ADDN
158   (UNBIND1)
159   (SKIP 1)
161   (JMP L165)
163   L163
163   (SKIP 1)
165   L165
165   (UNBIND1)
166   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ATOMGRAD (E X) ...)-28|
(CONST 0) = ATOMGRAD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATOMGRAD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATOMGRAD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATOMGRAD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATOMGRAD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATOMGRAD
8     (SKIP&RET 1)


Disassembly of function ATOMGRAD
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $ATOMGRAD
(CONST 3) = MGET
(CONST 4) = ASSOLIKE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (Y)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; Y
6     (LOAD&PUSH 8)
7     (CALLS2 5)                          ; ATOM
9     (JMPIFNOT1 L28)
11    (LOAD&PUSH 8)
12    (CONST&PUSH 2)                      ; $ATOMGRAD
13    (CALL2 3)                           ; MGET
15    (SETVALUE 1)                        ; Y
17    (JMPIFNOT1 L28)
19    (GETVALUE&PUSH 0)                   ; X
21    (GETVALUE&PUSH 1)                   ; Y
23    (CALL2 4)                           ; ASSOLIKE
25    (UNBIND1)
26    (JMP L29)
28    L28
28    (UNBIND1)
29    L29
29    (UNBIND1)
30    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DEPENDS (E X) ...)-29|
(CONST 0) = DEPENDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEPENDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEPENDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEPENDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEPENDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEPENDS
8     (SKIP&RET 1)


Disassembly of function DEPENDS
(CONST 0) = X
(CONST 1) = ALIKE1
(CONST 2) = MNUMP
(CONST 3) = DEPENDS
(CONST 4) = MGET
(CONST 5) = DEPENDSL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
33 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2&JMPIF 1 L34)                 ; ALIKE1
9     (LOAD&PUSH 5)
10    (CALL1&JMPIF 2 L37)                 ; MNUMP
13    (LOAD 5)
14    (JMPIFATOM L40)
16    (LOAD 5)
17    (CAR)
18    (CAR&PUSH)
19    (GETVALUE&PUSH 0)                   ; X
21    (JSR L0)
23    (JMPIF1 L31)
25    (LOAD&CDR&PUSH 5)
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL2 5)                           ; DEPENDSL
31    L31
31    (UNBIND1)
32    (SKIP&RET 3)
34    L34
34    (T)
35    (JMP L31)
37    L37
37    (NIL)
38    (JMP L31)
40    L40
40    (LOAD&PUSH 5)
41    (CONST&PUSH 3)                      ; DEPENDS
42    (CALL2 4)                           ; MGET
44    (JMP L31)


Disassembly of function #:|(DEFUN DEPENDSL (L X) ...)-30|
(CONST 0) = DEPENDSL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEPENDSL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEPENDSL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEPENDSL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEPENDSL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEPENDSL
8     (SKIP&RET 1)


Disassembly of function DEPENDSL
(CONST 0) = X
(CONST 1) = DEPENDS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 5)
4     (NIL&PUSH)
5     (JMP L23)
7     L7
7     (T)
8     (SKIP 2)
10    (JMP L30)
12    L12
12    (LOAD&CAR&STORE 1 0)
15    (PUSH)
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL2&JMPIF 1 L7)                  ; DEPENDS
21    (LOAD&CDR&STORE 1)
23    L23
23    (LOAD&PUSH 1)
24    (CALLS1&JMPIFNOT 146 L12)           ; ENDP
27    (NIL)
28    (SKIP 2)
30    L30
30    (UNBIND1)
31    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN SDIFF (E X) ...)-31|
(CONST 0) = SDIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SDIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SDIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SDIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SDIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SDIFF
8     (SKIP&RET 1)


Disassembly of function SDIFF
(CONST 0) = X
(CONST 1) = ALIKE1
(CONST 2) = 1
(CONST 3) = MNUMP
(CONST 4) = 0
(CONST 5) = ARRAY
(CONST 6) = MEMQ
(CONST 7) = CHAINRULE
(CONST 8) = MRAT
(CONST 9) = RATDX
(CONST 10) = MPLUS
(CONST 11) = SDIFFMAP
(CONST 12) = ADDN
(CONST 13) = MBAGP
(CONST 14) = (%SUM %PRODUCT)
(CONST 15) = DIFFSUMPROD
(CONST 16) = %AT
(CONST 17) = DIFF-%AT
(CONST 18) = DEPENDS
(CONST 19) = MTIMES
(CONST 20) = SDIFFTIMES
(CONST 21) = MEXPT
(CONST 22) = DIFFEXPT
(CONST 23) = MNCTIMES
(CONST 24) = $DOTDISTRIB
(CONST 25) = NCMULN
(CONST 26) = (MNCTIMES)
(CONST 27) = NCMUL2
(CONST 28) = ADD2
(CONST 29) = $VECT_CROSS
(CONST 30) = $~
(CONST 31) = ($~)
(CONST 32) = ($~)
(CONST 33) = ADD2*
(CONST 34) = MNCEXPT
(CONST 35) = DIFFNCEXPT
(CONST 36) = (%LOG %PLOG)
(CONST 37) = MABS
(CONST 38) = SDIFFGRAD
(CONST 39) = %DERIVATIVE
(CONST 40) = FREEL
(CONST 41) = DIFF%DERIV
(CONST 42) = (%BINOMIAL $BETA)
(CONST 43) = $MAKEFACT
(CONST 44) = FACTOR
(CONST 45) = DIV
(CONST 46) = MUL2
(CONST 47) = %INTEGRATE
(CONST 48) = DIFFINT
(CONST 49) = %LAPLACE
(CONST 50) = DIFFLAPLACE
(CONST 51) = (%REALPART %IMAGPART)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($VECT_CROSS X)
308 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2&JMPIF 1 L146)                ; ALIKE1
10    (LOAD&PUSH 5)
11    (CALL1&JMPIF 3 L150)                ; MNUMP
15    (LOAD 5)
16    (JMPIFATOM L138)
19    (CONST&PUSH 5)                      ; ARRAY
20    (LOAD 6)
21    (CAR)
22    (CDR&PUSH)
23    (CALL2&JMPIF 6 L138)                ; MEMQ
27    (LOAD 5)
28    (CAR)
29    (CAR&PUSH)
30    (JMPIFEQTO 8 L154)                  ; MRAT
34    (LOAD 5)
35    (CAR)
36    (CAR&PUSH)
37    (JMPIFEQTO 10 L162)                 ; MPLUS
41    (LOAD&PUSH 5)
42    (CALL1&JMPIF 13 L170)               ; MBAGP
46    (LOAD 5)
47    (CAR)
48    (CAR&PUSH)
49    (CONST&PUSH 14)                     ; (%SUM %PRODUCT)
50    (CALL2&JMPIF 6 L182)                ; MEMQ
54    (LOAD 5)
55    (CAR)
56    (CAR&PUSH)
57    (JMPIFEQTO 16 L424)                 ; %AT
61    (LOAD&PUSH 5)
62    (GETVALUE&PUSH 0)                   ; X
64    (CALL2&JMPIFNOT 18 L190)            ; DEPENDS
68    (LOAD 5)
69    (CAR)
70    (CAR&PUSH)
71    (JMPIFEQTO 19 L194)                 ; MTIMES
75    (LOAD 5)
76    (CAR)
77    (CAR&PUSH)
78    (JMPIFEQTO 21 L207)                 ; MEXPT
82    (LOAD 5)
83    (CAR)
84    (CAR&PUSH)
85    (JMPIFEQTO 23 L215)                 ; MNCTIMES
89    (GETVALUE 29)                       ; $VECT_CROSS
91    (JMPIFNOT L100)
93    (LOAD 5)
94    (CAR)
95    (CAR&PUSH)
96    (JMPIFEQTO 30 L254)                 ; $~
100   L100
100   (LOAD 5)
101   (CAR)
102   (CAR&PUSH)
103   (JMPIFEQTO 34 L291)                 ; MNCEXPT
107   (LOAD 5)
108   (CAR)
109   (CAR&PUSH)
110   (CONST&PUSH 36)                     ; (%LOG %PLOG)
112   (CALL2&JMPIF 6 L309)                ; MEMQ
116   (LOAD 5)
117   (CAR)
118   (CAR&PUSH)
119   (JMPIFNOTEQTO 39 L398)              ; %DERIVATIVE
123   (LOAD 5)
124   (CDR)
125   (CAR)
126   (JMPIFATOM L138)
128   (CONST&PUSH 5)                      ; ARRAY
129   (LOAD 6)
130   (CDR)
131   (CAR)
132   (CAR)
133   (CDR&PUSH)
134   (CALL2&JMPIFNOT 6 L340)             ; MEMQ
138   L138
138   (LOAD&PUSH 5)
139   (GETVALUE&PUSH 0)                   ; X
141   (CALL2 7)                           ; CHAINRULE
143   (JMP L462)
146   L146
146   (CONST 2)                           ; 1
147   (JMP L462)
150   L150
150   (CONST 4)                           ; 0
151   (JMP L462)
154   L154
154   (LOAD&PUSH 5)
155   (GETVALUE&PUSH 0)                   ; X
157   (CALL2 9)                           ; RATDX
159   (JMP L462)
162   L162
162   (LOAD&CDR&PUSH 5)
164   (GETVALUE&PUSH 0)                   ; X
166   (CALL2 11)                          ; SDIFFMAP
168   (JMP L200)
170   L170
170   (LOAD&CAR&PUSH 5)
172   (LOAD&CDR&PUSH 6)
174   (GETVALUE&PUSH 0)                   ; X
176   (CALL2 11)                          ; SDIFFMAP
178   (CONS)
179   (JMP L462)
182   L182
182   (LOAD&PUSH 5)
183   (GETVALUE&PUSH 0)                   ; X
185   (CALL2 15)                          ; DIFFSUMPROD
187   (JMP L462)
190   L190
190   (CONST 4)                           ; 0
191   (JMP L462)
194   L194
194   (LOAD&CDR&PUSH 5)
196   (GETVALUE&PUSH 0)                   ; X
198   (CALL2 20)                          ; SDIFFTIMES
200   L200
200   (PUSH)
201   (T&PUSH)
202   (CALL2 12)                          ; ADDN
204   (JMP L462)
207   L207
207   (LOAD&PUSH 5)
208   (GETVALUE&PUSH 0)                   ; X
210   (CALL2 22)                          ; DIFFEXPT
212   (JMP L462)
215   L215
215   (T)
216   (BIND 24)                           ; $DOTDISTRIB
218   (LOAD 8)
219   (CDR)
220   (CAR&PUSH)
221   (GETVALUE&PUSH 0)                   ; X
223   (JSR&PUSH L0)
226   (LOAD 9)
227   (CDR)
228   (CDR)
229   (CONS&PUSH)
230   (T&PUSH)
231   (CALL2&PUSH 25)                     ; NCMULN
233   (LOAD 9)
234   (CDR)
235   (CAR&PUSH)
236   (CONST&PUSH 26)                     ; (MNCTIMES)
237   (LOAD 11)
238   (CDR)
239   (CDR)
240   (CONS&PUSH)
241   (GETVALUE&PUSH 0)                   ; X
243   (JSR&PUSH L0)
246   (CALL2&PUSH 27)                     ; NCMUL2
248   (CALL2 28)                          ; ADD2
250   (UNBIND1)
251   (JMP L462)
254   L254
254   (CONST&PUSH 31)                     ; ($~)
256   (LOAD 6)
257   (CDR)
258   (CAR&PUSH)
259   (LOAD 7)
260   (CDR)
261   (CDR)
262   (CAR&PUSH)
263   (GETVALUE&PUSH 0)                   ; X
265   (JSR&PUSH L0)
268   (LIST&PUSH 3)
270   (CONST&PUSH 32)                     ; ($~)
272   (LOAD 7)
273   (CDR)
274   (CAR&PUSH)
275   (GETVALUE&PUSH 0)                   ; X
277   (JSR&PUSH L0)
280   (LOAD 8)
281   (CDR)
282   (CDR)
283   (CAR&PUSH)
284   (LIST&PUSH 3)
286   (CALL2 33)                          ; ADD2*
288   (JMP L462)
291   L291
291   (LOAD&PUSH 5)
292   (GETVALUE&PUSH 0)                   ; X
294   (CALL2 35)                          ; DIFFNCEXPT
296   (JMP L462)
299   L299
299   (LOAD&CAR&PUSH 5)
301   (LOAD 6)
302   (CDR)
303   (CAR)
304   (CDR)
305   (CONS)
306   (JMP L457)
309   L309
309   (LOAD 5)
310   (CDR)
311   (CAR)
312   (JMPIFATOM L322)
314   (LOAD 5)
315   (CDR)
316   (CAR)
317   (CAR)
318   (CAR&PUSH)
319   (JMPIFEQTO 37 L299)                 ; MABS
322   L322
322   (LOAD 5)
323   (JMP L457)
326   L326
326   (LOAD 5)
327   (CDR)
328   (CAR&PUSH)
329   (GETVALUE&PUSH 0)                   ; X
331   (JSR&PUSH L0)
334   (LOAD 6)
335   (CDR)
336   (CDR)
337   (CONS)
338   (JMP L354)
340   L340
340   (LOAD 5)
341   (CDR)
342   (CDR&PUSH)
343   (GETVALUE&PUSH 0)                   ; X
345   (CALL2&JMPIF 40 L326)               ; FREEL
348   (LOAD&PUSH 5)
349   (GETVALUE&PUSH 0)                   ; X
351   (CONST&PUSH 2)                      ; 1
352   (LIST 3)
354   L354
354   (PUSH)
355   (CALL1 41)                          ; DIFF%DERIV
357   (JMP L462)
360   L360
360   (LOAD&PUSH 5)
361   (CALL1&PUSH 43)                     ; $MAKEFACT
363   (LOAD&PUSH 0)
364   (GETVALUE&PUSH 0)                   ; X
366   (JSR&PUSH L0)
369   (CALL1&PUSH 44)                     ; FACTOR
371   (LOAD&PUSH 7)
372   (LOAD&PUSH 2)
373   (CALL2&PUSH 45)                     ; DIV
375   (CALL2 46)                          ; MUL2
377   (SKIP 1)
379   (JMP L462)
382   L382
382   (LOAD&PUSH 5)
383   (GETVALUE&PUSH 0)                   ; X
385   (CALL2 48)                          ; DIFFINT
387   (JMP L462)
390   L390
390   (LOAD&PUSH 5)
391   (GETVALUE&PUSH 0)                   ; X
393   (CALL2 50)                          ; DIFFLAPLACE
395   (JMP L462)
398   L398
398   (LOAD 5)
399   (CAR)
400   (CAR&PUSH)
401   (CONST&PUSH 42)                     ; (%BINOMIAL $BETA)
403   (CALL2&JMPIF 6 L360)                ; MEMQ
406   (LOAD 5)
407   (CAR)
408   (CAR&PUSH)
409   (JMPIFEQTO 47 L382)                 ; %INTEGRATE
412   (LOAD 5)
413   (CAR)
414   (CAR&PUSH)
415   (JMPIFEQTO 49 L390)                 ; %LAPLACE
418   (LOAD 5)
419   (CAR)
420   (CAR&PUSH)
421   (JMPIFNOTEQTO 16 L448)              ; %AT
424   L424
424   (LOAD&PUSH 5)
425   (GETVALUE&PUSH 0)                   ; X
427   (CALL2 17)                          ; DIFF-%AT
429   (JMP L462)
431   L431
431   (LOAD 5)
432   (CAR)
433   (CAR&PUSH)
434   (NIL)
435   (CONS&PUSH)
436   (LOAD 6)
437   (CDR)
438   (CAR&PUSH)
439   (GETVALUE&PUSH 0)                   ; X
441   (JSR&PUSH L0)
444   (LIST 2)
446   (JMP L462)
448   L448
448   (LOAD 5)
449   (CAR)
450   (CAR&PUSH)
451   (CONST&PUSH 51)                     ; (%REALPART %IMAGPART)
453   (CALL2&JMPIF 6 L431)                ; MEMQ
456   (LOAD 5)
457   L457
457   (PUSH)
458   (GETVALUE&PUSH 0)                   ; X
460   (CALL2 38)                          ; SDIFFGRAD
462   L462
462   (UNBIND1)
463   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SDIFFGRAD (E X) ...)-32|
(CONST 0) = SDIFFGRAD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SDIFFGRAD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SDIFFGRAD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SDIFFGRAD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SDIFFGRAD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SDIFFGRAD
8     (SKIP&RET 1)


Disassembly of function SDIFFGRAD
(CONST 0) = X
(CONST 1) = MQAPPLY
(CONST 2) = GRAD
(CONST 3) = OLDGET
(CONST 4) = DEPENDS
(CONST 5) = 0
(CONST 6) = 1
(CONST 7) = DIFF%DERIV
(CONST 8) = "Wrong number of arguments for ~:M"
(CONST 9) = MERROR
(CONST 10) = SDIFFMAP
(CONST 11) = MUL2
(CONST 12) = (MLIST)
(CONST 13) = SUBSTITUTEL
(CONST 14) = ADDN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
114 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (CAR)
5     (CAR&PUSH)
6     (PUSH-NIL 2)
8     (LOAD&PUSH 2)
9     (JMPIFNOTEQTO 1 L22)                ; MQAPPLY
12    (LOAD 8)
13    (CDR)
14    (CAR)
15    (CAR)
16    (CAR&PUSH)
17    (CONST&PUSH 2)                      ; GRAD
18    (CALL2&JMPIF 3 L112)                ; OLDGET
22    L22
22    (LOAD&PUSH 2)
23    (JMPIFEQTO 1 L144)                  ; MQAPPLY
27    (LOAD&PUSH 2)
28    (CONST&PUSH 2)                      ; GRAD
29    (CALL2 3)                           ; OLDGET
31    (STORE 1)
32    (JMPIFNOT L144)
35    (LOAD&CDR&PUSH 8)
37    (CALLS2&PUSH 71)                    ; LENGTH
39    (LOAD&CAR&PUSH 2)
41    (CALLS2&PUSH 71)                    ; LENGTH
43    (CALLSR&JMPIFNOT 1 45 L162)         ; =
48    (LOAD&CDR&PUSH 8)
50    (GETVALUE&PUSH 0)                   ; X
52    (CALL2 10)                          ; SDIFFMAP
54    (STORE 0)
55    (CONST&SYMBOL-FUNCTION&PUSH 11)     ; MUL2
57    (LOAD&CDR&PUSH 9)
59    (LOAD&CAR&PUSH 3)
61    (LOAD&CDR&PUSH 4)
63    (LOAD&PUSH 4)
64    (NIL&PUSH)
65    (LOAD&JMPIFNOT 2 L88)
68    L68
68    (LOAD&CAR&PUSH 1)
70    (JMPIFEQTO 5 L170)                  ; 0
74    (LOAD 2)
75    (CAR)
76    L76
76    (PUSH)
77    (LOAD&CONS&STORE 0)
79    (LOAD&CDR&PUSH 2)
81    (LOAD&CDR&STORE 2)
83    (POP&STORE 2)
85    (LOAD&JMPIF 2 L68)
88    L88
88    (CONST&PUSH 12)                     ; (MLIST)
89    (LOAD&PUSH 1)
90    (CALLS2 73)                         ; NREVERSE
92    (CONS)
93    (SKIP 2)
95    (STORE 0)
96    (CALL 3 13)                         ; SUBSTITUTEL
99    (CDR&PUSH)
100   (LOAD&PUSH 2)
101   (CALLSR&PUSH 1 22)                  ; MAPCAR
104   (T&PUSH)
105   (CALL2 14)                          ; ADDN
107   (SKIP 3)
109   L109
109   (UNBIND1)
110   (SKIP&RET 3)
112   L112
112   (LOAD 8)
113   (CDR)
114   (CAR)
115   (CAR)
116   (CAR&PUSH)
117   (NIL)
118   (CONS&PUSH)
119   (LOAD 9)
120   (CDR)
121   (CAR)
122   (CDR&PUSH)
123   (LOAD 10)
124   (CDR)
125   (CDR&PUSH)
126   (CALLSR 2 34)                       ; APPEND
129   (CONS&PUSH)
130   (GETVALUE&PUSH 0)                   ; X
132   (JSR L0)
135   (SKIP 3)
137   (JMP L109)
139   L139
139   (CONST 5)                           ; 0
140   (SKIP 3)
142   (JMP L109)
144   L144
144   (LOAD&PUSH 8)
145   (GETVALUE&PUSH 0)                   ; X
147   (CALL2&JMPIFNOT 4 L139)             ; DEPENDS
150   (LOAD&PUSH 8)
151   (GETVALUE&PUSH 0)                   ; X
153   (CONST&PUSH 6)                      ; 1
154   (LIST&PUSH 3)
156   (CALL1 7)                           ; DIFF%DERIV
158   (SKIP 3)
160   (JMP L109)
162   L162
162   (CONST&PUSH 8)                      ; "Wrong number of arguments for ~:M"
163   (LOAD&PUSH 3)
164   (CALL2 9)                           ; MERROR
166   (SKIP 3)
168   (JMP L109)
170   L170
170   (CONST 5)                           ; 0
171   (JMP L76)


Disassembly of function #:|(DEFUN SDIFFMAP (E X) ...)-33|
(CONST 0) = SDIFFMAP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SDIFFMAP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SDIFFMAP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SDIFFMAP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SDIFFMAP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SDIFFMAP
8     (SKIP&RET 1)


Disassembly of function SDIFFMAP
(CONST 0) = X
(CONST 1) = SDIFF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (LOAD&PUSH 6)
5     (JMP L20)
7     L7
7     (LOAD&CAR&PUSH 0)
9     (LOAD&PUSH 0)
10    (GETVALUE&PUSH 0)                   ; X
12    (CALL2&PUSH 1)                      ; SDIFF
14    (LOAD&CONS&STORE 2)
16    (SKIP 1)
18    (LOAD&CDR&STORE 0)
20    L20
20    (LOAD&PUSH 0)
21    (CALLS1&JMPIFNOT 146 L7)            ; ENDP
24    (SKIP 1)
26    (LOAD&PUSH 0)
27    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
29    (SKIP 1)
31    (UNBIND1)
32    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SDIFFTIMES (L X) ...)-34|
(CONST 0) = SDIFFTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SDIFFTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SDIFFTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SDIFFTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SDIFFTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SDIFFTIMES
8     (SKIP&RET 1)


Disassembly of function SDIFFTIMES
(CONST 0) = X
(CONST 1) = SDIFF
(CONST 2) = MULN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
25 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 3)
5     (JMP L10)
7     L7
7     (LOAD&PUSH 2)
8     (LOAD&CONS&STORE 1)
10    L10
10    (LOAD&CAR&STORE 8 2)
13    (LOAD&CDR&STORE 8)
15    (LOAD&PUSH 2)
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL2&PUSH 1)                      ; SDIFF
20    (LOAD&PUSH 2)
21    (LOAD&PUSH 10)
22    (CALLSR 2 34)                       ; APPEND
25    (CONS&PUSH)
26    (T&PUSH)
27    (CALL2&PUSH 2)                      ; MULN
29    (LOAD&CONS&STORE 0)
31    (LOAD&JMPIF 8 L7)
34    (POP)
35    (SKIP 2)
37    (UNBIND1)
38    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIFFEXPT (E X) ...)-35|
(CONST 0) = DIFFEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFFEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFFEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFFEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFFEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFFEXPT
8     (SKIP&RET 1)


Disassembly of function DIFFEXPT
(CONST 0) = X
(CONST 1) = MNUMP
(CONST 2) = -1
(CONST 3) = ADDK
(CONST 4) = POWER
(CONST 5) = SDIFF
(CONST 6) = MUL3
(CONST 7) = (%LOG)
(CONST 8) = SIMPLIFYA
(CONST 9) = MUL2
(CONST 10) = ADD2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
64 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (CDR)
5     (CDR)
6     (CAR&PUSH)
7     (CALL1&JMPIF 1 L57)                 ; MNUMP
10    (LOAD&PUSH 5)
11    (LOAD 6)
12    (CDR)
13    (CAR&PUSH)
14    (CONST&PUSH 2)                      ; -1
15    (CALL2&PUSH 4)                      ; POWER
17    (LOAD 7)
18    (CDR)
19    (CDR)
20    (CAR&PUSH)
21    (LOAD 8)
22    (CDR)
23    (CAR&PUSH)
24    (GETVALUE&PUSH 0)                   ; X
26    (CALL2&PUSH 5)                      ; SDIFF
28    (CALL&PUSH 3 6)                     ; MUL3
31    (CONST&PUSH 7)                      ; (%LOG)
32    (LOAD 8)
33    (CDR)
34    (CAR&PUSH)
35    (LIST&PUSH 2)
37    (T&PUSH)
38    (CALL2&PUSH 8)                      ; SIMPLIFYA
40    (LOAD 8)
41    (CDR)
42    (CDR)
43    (CAR&PUSH)
44    (GETVALUE&PUSH 0)                   ; X
46    (CALL2&PUSH 5)                      ; SDIFF
48    (CALL2&PUSH 9)                      ; MUL2
50    (CALL2&PUSH 10)                     ; ADD2
52    (CALL2 9)                           ; MUL2
54    L54
54    (UNBIND1)
55    (SKIP&RET 3)
57    L57
57    (LOAD 5)
58    (CDR)
59    (CDR)
60    (CAR&PUSH)
61    (LOAD 6)
62    (CDR)
63    (CAR&PUSH)
64    (LOAD 7)
65    (CDR)
66    (CDR)
67    (CAR&PUSH)
68    (CONST&PUSH 2)                      ; -1
69    (CALL2&PUSH 3)                      ; ADDK
71    (CALL2&PUSH 4)                      ; POWER
73    (LOAD 7)
74    (CDR)
75    (CAR&PUSH)
76    (GETVALUE&PUSH 0)                   ; X
78    (CALL2&PUSH 5)                      ; SDIFF
80    (CALL 3 6)                          ; MUL3
83    (JMP L54)


Disassembly of function #:|(DEFUN DIFF%DERIV (E) ...)-36|
(CONST 0) = DIFF%DERIV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFF%DERIV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFF%DERIV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFF%DERIV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFF%DERIV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFF%DERIV
8     (SKIP&RET 1)


Disassembly of function DIFF%DERIV
(CONST 0) = DERIVFLAG
(CONST 1) = (%DERIVATIVE)
(CONST 2) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; DERIVFLAG
3     (CONST&PUSH 1)                      ; (%DERIVATIVE)
4     (LOAD 5)
5     (CONS&PUSH)
6     (T&PUSH)
7     (CALL2 2)                           ; SIMPLIFYA
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(PROG1 '(GRAD PROPERTIES) (LET # #) ...)-37|
(CONST 0) = 
((%LOG ((MEXPT) X -1)) (%PLOG ((MEXPT) X -1))
 (%GAMMA ((MTIMES) ((MQAPPLY) (($PSI ARRAY) 0) X) ((%GAMMA) X)))
 (MFACTORIAL
  ((MTIMES) ((MQAPPLY) (($PSI ARRAY) 0) ((MPLUS) 1 X)) ((MFACTORIAL) X)))
 (%SIN ((%COS) X)) (%COS ((MTIMES) -1 ((%SIN) X)))
 (%TAN ((MEXPT) ((%SEC) X) 2)) (%COT ((MTIMES) -1 ((MEXPT) ((%CSC) X) 2)))
 (%SEC ((MTIMES) ((%SEC) X) ((%TAN) X)))
 (%CSC ((MTIMES) -1 ((%COT) X) ((%CSC) X)))
 (%ASIN ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 ((MEXPT) X 2))) ((RAT) -1 2)))
 (%ACOS
  ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 ((MEXPT) X 2))) ((RAT) -1 2))))
 (%ATAN ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) -1))
 (%ACOT ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) -1)))
 (%ACSC
  ((MTIMES) -1 ((MEXPT) X -1)
   ((MEXPT) ((MPLUS) -1 ((MEXPT) X 2)) ((RAT) -1 2))))
 (%ASEC
  ((MTIMES) ((MEXPT) X -1) ((MEXPT) ((MPLUS) -1 ((MEXPT) X 2)) ((RAT) -1 2))))
 (%SINH ((%COSH) X)) (%COSH ((%SINH) X)) (%TANH ((MEXPT) ((%SECH) X) 2))
 (%COTH ((MTIMES) -1 ((MEXPT) ((%CSCH) X) 2)))
 (%SECH ((MTIMES) -1 ((%SECH) X) ((%TANH) X)))
 (%CSCH ((MTIMES) -1 ((%COTH) X) ((%CSCH) X)))
 (%ASINH ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) ((RAT) -1 2)))
 (%ACOSH ((MEXPT) ((MPLUS) -1 ((MEXPT) X 2)) ((RAT) -1 2)))
 (%ATANH ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 ((MEXPT) X 2))) -1))
 (%ACOTH ((MTIMES) -1 ((MEXPT) ((MPLUS) -1 ((MEXPT) X 2)) -1)))
 (%ASECH
  ((MTIMES) -1 ((MEXPT) X -1)
   ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 ((MEXPT) X 2))) ((RAT) -1 2))))
 (%ACSCH
  ((MTIMES) -1 ((MEXPT) X -1)
   ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) ((RAT) -1 2))))
 (MABS ((MTIMES) X ((MEXPT) ((MABS) X) -1)))
 (%ERF
  ((MTIMES) 2 ((MEXPT) $%PI ((RAT) -1 2))
   ((MEXPT) $%E ((MTIMES) -1 ((MEXPT) X 2)))))
 ($EI ((MTIMES) ((MEXPT) X -1) ((MEXPT) $%E X))))
(CONST 1) = (X)
(CONST 2) = GRAD
(CONST 3) = PUTPROP
(CONST 4) = $ATAN2
(CONST 5) = 
((X Y) ((MTIMES) Y ((MEXPT) ((MPLUS) ((MEXPT) X 2) ((MEXPT) Y 2)) -1))
 ((MTIMES) -1 X ((MEXPT) ((MPLUS) ((MEXPT) X 2) ((MEXPT) Y 2)) -1)))
(CONST 6) = $%J
(CONST 7) = 
((N X) ((%DERIVATIVE) ((MQAPPLY) (($%J ARRAY) N) X) N 1)
 ((MPLUS) ((MQAPPLY) (($%J ARRAY) ((MPLUS) -1 N)) X)
  ((MTIMES) -1 N ((MQAPPLY) (($%J ARRAY) N) X) ((MEXPT) X -1))))
(CONST 8) = $LI
(CONST 9) = 
((N X) ((%DERIVATIVE) ((MQAPPLY) (($LI ARRAY) N) X) N 1)
 ((MTIMES) ((MQAPPLY) (($LI ARRAY) ((MPLUS) -1 N)) X) ((MEXPT) X -1)))
(CONST 10) = $PSI
(CONST 11) = 
((N X) ((%DERIVATIVE) ((MQAPPLY) (($PSI ARRAY) N) X) N 1)
 ((MQAPPLY) (($PSI ARRAY) ((MPLUS) 1 N)) X))
(CONST 12) = (GRAD PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
35 byte-code instructions:
0     (CONST&PUSH 0)                      ; ((%LOG #) (%PLOG #) (%GAMMA #) ...)
1     (JMP L19)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD&CAR&PUSH 0)
7     (CONST&PUSH 1)                      ; (X)
8     (LOAD 2)
9     (CDR)
10    (CONS&PUSH)
11    (CONST&PUSH 2)                      ; GRAD
12    (CALL 3 3)                          ; PUTPROP
15    (SKIP 1)
17    (LOAD&CDR&STORE 0)
19    L19
19    (LOAD&PUSH 0)
20    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
23    (SKIP 1)
25    (CONST&PUSH 4)                      ; $ATAN2
26    (CONST&PUSH 2)                      ; GRAD
27    (CONST&PUSH 5)                      ; ((X Y) (# Y #) (# -1 X #))
28    (CALLS2 136)                        ; SYSTEM::%PUT
30    (CONST&PUSH 6)                      ; $%J
31    (CONST&PUSH 2)                      ; GRAD
32    (CONST&PUSH 7)                      ; ((N X) (# # N 1) (# # #))
33    (CALLS2 136)                        ; SYSTEM::%PUT
35    (CONST&PUSH 8)                      ; $LI
36    (CONST&PUSH 2)                      ; GRAD
37    (CONST&PUSH 9)                      ; ((N X) (# # N 1) (# # #))
38    (CALLS2 136)                        ; SYSTEM::%PUT
40    (CONST&PUSH 10)                     ; $PSI
41    (CONST&PUSH 2)                      ; GRAD
42    (CONST&PUSH 11)                     ; ((N X) (# # N 1) (# # X))
43    (CALLS2 136)                        ; SYSTEM::%PUT
45    (CONST 12)                          ; (GRAD PROPERTIES)
46    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN ATVARSCHK (ARGL) ...)-38|
(CONST 0) = ATVARSCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATVARSCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATVARSCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATVARSCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATVARSCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATVARSCHK
8     (SKIP&RET 1)


Disassembly of function ATVARSCHK
(CONST 0) = ATVARS
(CONST 1) = &
(CONST 2) = @
(CONST 3) = MEXPLODEN
(CONST 4) = IMPLODE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ATVARS)
24 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (GETVALUE&PUSH 0)                   ; ATVARS
5     (CALLS2&PUSH 71)                    ; LENGTH
7     (NIL&PUSH)
8     (JMP L23)
10    L10
10    (CONST&PUSH 1)                      ; &
11    (CONST&PUSH 2)                      ; @
12    (LOAD&PUSH 4)
13    (CALL1 3)                           ; MEXPLODEN
15    (CONS)
16    (CONS&PUSH)
17    (CALL1&PUSH 4)                      ; IMPLODE
19    (LOAD&CONS&STORE 0)
21    (LOAD&DEC&STORE 2)
23    L23
23    (LOAD&PUSH 1)
24    (LOAD&PUSH 3)
25    (CALLSR&JMPIF 1 47 L10)             ; <
29    (GETVALUE&PUSH 0)                   ; ATVARS
31    (LOAD&PUSH 1)
32    (CALLSR 2 35)                       ; NCONC
35    (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN NOTLOREQ (X) ...)-39|
(CONST 0) = NOTLOREQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NOTLOREQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NOTLOREQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NOTLOREQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NOTLOREQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NOTLOREQ
8     (SKIP&RET 1)


Disassembly of function NOTLOREQ
(CONST 0) = X
(CONST 1) = (MLIST MEQUAL)
(CONST 2) = MEMQ
(CONST 3) = MLIST
(CONST 4) = MEQUALP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
39 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 5)                          ; ATOM
7     (JMPIF1 L54)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST&PUSH 1)                      ; (MLIST MEQUAL)
14    (CALL2 2)                           ; MEMQ
16    (NOT)
17    (JMPIF1 L54)
19    (GETVALUE 0)                        ; X
21    (CAR)
22    (CAR&PUSH)
23    (CONST 3)                           ; MLIST
24    (EQ)
25    (JMPIFNOT1 L54)
27    (GETVALUE 0)                        ; X
29    (CDR&PUSH)
30    (NIL&PUSH)
31    (JMP L47)
33    L33
33    (T)
34    (SKIP 2)
36    (JMP L54)
38    L38
38    (LOAD&CAR&STORE 1 0)
41    (PUSH)
42    (CALL1&JMPIFNOT 4 L33)              ; MEQUALP
45    (LOAD&CDR&STORE 1)
47    L47
47    (LOAD&PUSH 1)
48    (CALLS1&JMPIFNOT 146 L38)           ; ENDP
51    (NIL)
52    (SKIP 2)
54    L54
54    (UNBIND1)
55    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SUBSTITUTEL (L1 L2 E) ...)-40|
(CONST 0) = SUBSTITUTEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBSTITUTEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBSTITUTEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBSTITUTEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBSTITUTEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBSTITUTEL
8     (SKIP&RET 1)


Disassembly of function SUBSTITUTEL
(CONST 0) = MAXIMA-SUBSTITUTE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 3)
1     (LOAD&PUSH 3)
2     (LOAD&JMPIFNOT 1 L23)
5     L5
5     (LOAD&CAR&PUSH 1)
7     (LOAD&CAR&PUSH 1)
9     (LOAD&PUSH 5)
10    (CALL 3 0)                          ; MAXIMA-SUBSTITUTE
13    (STORE 3)
14    (LOAD&CDR&PUSH 1)
16    (LOAD&CDR&STORE 1)
18    (POP&STORE 1)
20    (LOAD&JMPIF 1 L5)
23    L23
23    (LOAD 3)
24    (SKIP&RET 6)


Disassembly of function #:|(DEFMFUN UNION* (A B) ...)-41|
(CONST 0) = UNION*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UNION*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UNION*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UNION*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UNION*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UNION*
8     (SKIP&RET 1)


Disassembly of function UNION*
(CONST 0) = X
(CONST 1) = MEMALIKE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
19 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD 2)
2     (BIND 0)                            ; X
4     (LOAD&JMPIFNOT 3 L25)
7     L7
7     (LOAD&CAR&PUSH 3)
9     (LOAD&PUSH 6)
10    (CALL2&JMPIF 1 L20)                 ; MEMALIKE
13    (LOAD&CAR&PUSH 3)
15    (GETVALUE 0)                        ; X
17    (CONS)
18    (SETVALUE 0)                        ; X
20    L20
20    (LOAD&CDR&STORE 3)
22    (LOAD&JMPIF 3 L7)
25    L25
25    (GETVALUE 0)                        ; X
27    (UNBIND1)
28    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN INTERSECT* (A B) ...)-42|
(CONST 0) = INTERSECT*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTERSECT*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTERSECT*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTERSECT*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTERSECT*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTERSECT*
8     (SKIP&RET 1)


Disassembly of function INTERSECT*
(CONST 0) = X
(CONST 1) = MEMALIKE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
19 byte-code instructions:
0     (LOAD&PUSH 2)
1     (NIL)
2     (BIND 0)                            ; X
4     (LOAD&JMPIFNOT 3 L25)
7     L7
7     (LOAD&CAR&PUSH 3)
9     (LOAD&PUSH 6)
10    (CALL2&JMPIFNOT 1 L20)              ; MEMALIKE
13    (LOAD&CAR&PUSH 3)
15    (GETVALUE 0)                        ; X
17    (CONS)
18    (SETVALUE 0)                        ; X
20    L20
20    (LOAD&CDR&STORE 3)
22    (LOAD&JMPIF 3 L7)
25    L25
25    (GETVALUE 0)                        ; X
27    (UNBIND1)
28    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN NTHELEM (N E) ...)-43|
(CONST 0) = NTHELEM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NTHELEM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NTHELEM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NTHELEM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NTHELEM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NTHELEM
8     (SKIP&RET 1)


Disassembly of function NTHELEM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&DEC&PUSH 2)
2     (LOAD&PUSH 2)
3     (CALLS1 155)                        ; NTHCDR
5     (CAR)
6     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN DELSIMP (E) ...)-44|
(CONST 0) = DELSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DELSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DELSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DELSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DELSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DELSIMP
8     (SKIP&RET 1)


Disassembly of function DELSIMP
(CONST 0) = SIMP
(CONST 1) = 1
(CONST 2) = DELQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP
1     (LOAD&PUSH 2)
2     (CALLS1&PUSH 158)                   ; COPY-LIST
4     (CONST&PUSH 1)                      ; 1
5     (CALL 3 2)                          ; DELQ
8     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN REMSIMP (E) ...)-45|
(CONST 0) = REMSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMSIMP
8     (SKIP&RET 1)


Disassembly of function REMSIMP
(CONST 0) = DELSIMP
(CONST 1) = REMSIMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L17)
3     (LOAD&CAR&PUSH 1)
5     (CALL1&PUSH 0)                      ; DELSIMP
7     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; REMSIMP
9     (LOAD&CDR&PUSH 3)
11    (CALLSR 0 22)                       ; MAPCAR
14    (CONS)
15    (SKIP&RET 2)
17    L17
17    (LOAD 1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $TRUNC (E) ...)-46|
(CONST 0) = $TRUNC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TRUNC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRUNC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TRUNC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TRUNC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TRUNC
8     (SKIP&RET 1)


Disassembly of function $TRUNC
(CONST 0) = MPLUS
(CONST 1) = (TRUNC)
(CONST 2) = MBAGP
(CONST 3) = $TRUNC
(CONST 4) = SPECREPP
(CONST 5) = SPECDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
33 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L17)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 0 L20)                   ; MPLUS
9     (LOAD&PUSH 1)
10    (CALL1&JMPIF 2 L30)                 ; MBAGP
13    (LOAD&PUSH 1)
14    (CALL1&JMPIF 4 L42)                 ; SPECREPP
17    L17
17    (LOAD 1)
18    (SKIP&RET 2)
20    L20
20    (LOAD&CAR&PUSH 1)
22    (CONST&PUSH 1)                      ; (TRUNC)
23    (CALLSR&PUSH 2 34)                  ; APPEND
26    (LOAD 2)
27    (CDR)
28    (JMP L39)
30    L30
30    (LOAD&CAR&PUSH 1)
32    (CONST&SYMBOL-FUNCTION&PUSH 3)      ; $TRUNC
34    (LOAD&CDR&PUSH 3)
36    (CALLSR 0 22)                       ; MAPCAR
39    L39
39    (CONS)
40    (SKIP&RET 2)
42    L42
42    (LOAD&PUSH 1)
43    (CALL1&PUSH 5)                      ; SPECDISREP
45    (JMPTAIL 1 3 L0)


Disassembly of function #:|(DEFMFUN NONVARCHECK (E FN) ...)-47|
(CONST 0) = NONVARCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NONVARCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NONVARCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NONVARCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NONVARCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NONVARCHECK
8     (SKIP&RET 1)


Disassembly of function NONVARCHECK
(CONST 0) = MNUMP
(CONST 1) = MAXIMA-INTEGERP
(CONST 2) = MQAPPLY
(CONST 3) = MOPP1
(CONST 4) = "Non-variable 2nd argument to ~:M:~%~M"
(CONST 5) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&JMPIF 0 L28)                 ; MNUMP
4     (LOAD&PUSH 2)
5     (CALL1&JMPIF 1 L28)                 ; MAXIMA-INTEGERP
8     (LOAD&PUSH 2)
9     (CALLS2 4)                          ; CONSP
11    (JMPIFNOT1 L36)
13    (LOAD 2)
14    (CAR)
15    (CAR&PUSH)
16    (CONST 2)                           ; MQAPPLY
17    (EQ)
18    (NOT)
19    (JMPIFNOT1 L36)
21    (LOAD 2)
22    (CAR)
23    (CAR&PUSH)
24    (CALL1 3)                           ; MOPP1
26    (JMPIFNOT1 L36)
28    L28
28    (CONST&PUSH 4)                      ; "Non-variable 2nd argument to ~:M:~%~M"
29    (LOAD&PUSH 2)
30    (LOAD&PUSH 4)
31    (CALL 3 5)                          ; MERROR
34    (SKIP&RET 3)
36    L36
36    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $LDISPLAY (FORM) ...)-48-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $LDISPLAY (FORM) ...)-48-2-1|>
(CONST 1) = $LDISPLAY
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $LDISPLAY (FORM) ...)-48-2-1|>
1     (CONST&PUSH 1)                      ; $LDISPLAY
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $LDISPLAY (FORM) ...)-48-2-1|
(CONST 0) = DISP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (T&PUSH)
3     (T&PUSH)
4     (CALL 3 0)                          ; DISP1
7     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $LDISP N ...)-49|
(CONST 0) = $LDISP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LDISP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LDISP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LDISP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LDISP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LDISP
8     (SKIP&RET 1)


Disassembly of function $LDISP
(CONST 0) = LISTIFY1
(CONST 1) = DISP1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (LOAD&PUSH 3)
5     (CALL2&PUSH 0)                      ; LISTIFY1
7     (T&PUSH)
8     (NIL&PUSH)
9     (CALL 3 1)                          ; DISP1
12    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $DISPLAY (FORM) ...)-50-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $DISPLAY (FORM) ...)-50-2-1|>
(CONST 1) = $DISPLAY
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $DISPLAY (FORM) ...)-50-2-1|>
1     (CONST&PUSH 1)                      ; $DISPLAY
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DISPLAY (FORM) ...)-50-2-1|
(CONST 0) = DISP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (NIL&PUSH)
3     (T&PUSH)
4     (CALL 3 0)                          ; DISP1
7     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $DISP N ...)-51|
(CONST 0) = $DISP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DISP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DISP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DISP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DISP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DISP
8     (SKIP&RET 1)


Disassembly of function $DISP
(CONST 0) = LISTIFY1
(CONST 1) = DISP1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (LOAD&PUSH 3)
5     (CALL2&PUSH 0)                      ; LISTIFY1
7     (PUSH-NIL 2)
9     (CALL 3 1)                          ; DISP1
12    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DISP1 (LL LABLIST EQNSP) ...)-52|
(CONST 0) = DISP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISP1
8     (SKIP&RET 1)


Disassembly of function DISP1
(CONST 0) = (MLIST SIMP)
(CONST 1) = $DISPFLAG
(CONST 2) = 0
(CONST 3) = MEVAL
(CONST 4) = MEQUALP
(CONST 5) = (MEQUAL SIMP)
(CONST 6) = DISP2
(CONST 7) = ELABEL
(CONST 8) = RUNTIME
(CONST 9) = (MLABLE)
(CONST 10) = LINELABLE
(CONST 11) = DISPLA
(CONST 12) = MTERPRI
(CONST 13) = TIMEORG
(CONST 14) = $DONE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LINELABLE)
67 byte-code instructions:
0     (LOAD&JMPIFNOT 2 L7)
3     (CONST&PUSH 0)                      ; (MLIST SIMP)
4     (NIL)
5     (CONS)
6     (STORE 2)
7     L7
7     (LOAD&PUSH 3)
8     (PUSH-NIL 2)
10    (T)
11    (BIND 1)                            ; $DISPFLAG
13    (CONST&PUSH 2)                      ; 0
14    (LOAD&JMPIFNOT 6 L69)
17    L17
17    (LOAD&CAR&STORE 6 5)
20    (LOAD&JMPIF 8 L78)
23    (LOAD 5)
24    L24
24    (STORE 4)
25    (LOAD&JMPIFNOT 8 L32)
28    (LOAD&PUSH 4)
29    (CALL1&JMPIFNOT 4 L83)              ; MEQUALP
32    L32
32    (LOAD&JMPIFNOT 9 L44)
35    L35
35    (PUSH)
36    (LOAD&PUSH 5)
37    (CALL1&PUSH 7)                      ; ELABEL
39    (NIL)
40    (CONS&PUSH)
41    (CALLSR 2 35)                       ; NCONC
44    L44
44    (CALL0 8)                           ; RUNTIME
46    (STORE 0)
47    (CONST&PUSH 9)                      ; (MLABLE)
48    (LOAD&JMPIFNOT 10 L53)
51    (GETVALUE 10)                       ; LINELABLE
53    L53
53    (PUSH)
54    (LOAD&PUSH 6)
55    (LIST&PUSH 3)
57    (CALL1 11)                          ; DISPLA
59    (CALL0 12)                          ; MTERPRI
61    (LOAD&PUSH 0)
62    (CALL1 13)                          ; TIMEORG
64    (LOAD&CDR&STORE 6)
66    (LOAD&JMPIF 6 L17)
69    L69
69    (LOAD 9)
70    (JMPIF1 L73)
72    (CONST 14)                          ; $DONE
73    L73
73    (SKIP 1)
75    (UNBIND1)
76    (SKIP&RET 7)
78    L78
78    (LOAD&PUSH 5)
79    (CALL1 3)                           ; MEVAL
81    (JMP L24)
83    L83
83    (CONST&PUSH 5)                      ; (MEQUAL SIMP)
84    (LOAD&PUSH 6)
85    (CALL1&PUSH 6)                      ; DISP2
87    (LOAD&PUSH 6)
88    (LIST 3)
90    (STORE 4)
91    (LOAD&JMPIFNOT 9 L44)
94    (JMP L35)


Disassembly of function #:|(DEFUN DISP2 (E) ...)-53|
(CONST 0) = DISP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISP2
8     (SKIP&RET 1)


Disassembly of function DISP2
(CONST 0) = MQAPPLY
(CONST 1) = (MQAPPLY)
(CONST 2) = MEVAL
(CONST 3) = MSETQ
(CONST 4) = MSET
(CONST 5) = MLIST
(CONST 6) = DISP2
(CONST 7) = MSPECFUNP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
72 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L33)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 0 L36)                   ; MQAPPLY
9     (LOAD 1)
10    (CAR)
11    (CAR&PUSH)
12    (JMPIFEQTO 3 L62)                   ; MSETQ
15    (LOAD 1)
16    (CAR)
17    (CAR&PUSH)
18    (JMPIFEQTO 4 L70)                   ; MSET
21    (LOAD 1)
22    (CAR)
23    (CAR&PUSH)
24    (JMPIFEQTO 5 L80)                   ; MLIST
27    (LOAD 1)
28    (CAR)
29    (CAR&PUSH)
30    (CALL1&JMPIFNOT 7 L85)              ; MSPECFUNP
33    L33
33    (LOAD 1)
34    (SKIP&RET 2)
36    L36
36    (CONST&PUSH 1)                      ; (MQAPPLY)
37    (LOAD 2)
38    (CDR)
39    (CAR)
40    (CAR&PUSH)
41    (CONST&SYMBOL-FUNCTION&PUSH 2)      ; MEVAL
43    (LOAD 4)
44    (CDR)
45    (CAR)
46    (CDR&PUSH)
47    (CALLSR 0 22)                       ; MAPCAR
50    (CONS&PUSH)
51    (CONST&SYMBOL-FUNCTION&PUSH 2)      ; MEVAL
53    (LOAD 4)
54    (CDR)
55    (CDR&PUSH)
56    (CALLSR 0 22)                       ; MAPCAR
59    (CONS)
60    (JMP L95)
62    L62
62    (LOAD 1)
63    (CDR)
64    (CAR&PUSH)
65    (JMPTAIL 1 3 L0)
70    L70
70    (LOAD 1)
71    (CDR)
72    (CAR&PUSH)
73    (CALL1&PUSH 2)                      ; MEVAL
75    (JMPTAIL 1 3 L0)
80    L80
80    (LOAD&CAR&PUSH 1)
82    (CONST 6)                           ; DISP2
83    (JMP L88)
85    L85
85    (LOAD&CAR&PUSH 1)
87    (CONST 2)                           ; MEVAL
88    L88
88    (SYMBOL-FUNCTION)
89    (PUSH)
90    (LOAD&CDR&PUSH 3)
92    (CALLSR 0 22)                       ; MAPCAR
95    L95
95    (CONS)
96    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN ELABEL (E) ...)-54|
(CONST 0) = ELABEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELABEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELABEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELABEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELABEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELABEL
8     (SKIP&RET 1)


Disassembly of function ELABEL
(CONST 0) = $LINECHAR
(CONST 1) = CHECKLABEL
(CONST 2) = $LINENUM
(CONST 3) = MAKELABEL
(CONST 4) = $NOLABELS
(CONST 5) = LINELABLE
(CONST 6) = SET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LINELABLE $NOLABELS $LINENUM $LINECHAR)
writes special variable : ($LINENUM)
16 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; $LINECHAR
2     (CALL1&JMPIF 1 L11)                 ; CHECKLABEL
5     (GETVALUE&PUSH 2)                   ; $LINENUM
7     (CALLS2 150)                        ; 1+
9     (SETVALUE 2)                        ; $LINENUM
11    L11
11    (GETVALUE&PUSH 0)                   ; $LINECHAR
13    (CALL1 3)                           ; MAKELABEL
15    (GETVALUE 4)                        ; $NOLABELS
17    (JMPIF L24)
19    (GETVALUE&PUSH 5)                   ; LINELABLE
21    (LOAD&PUSH 2)
22    (CALL2 6)                           ; SET
24    L24
24    (GETVALUE 5)                        ; LINELABLE
26    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $DISPTERMS (E) ...)-55|
(CONST 0) = $DISPTERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DISPTERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DISPTERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DISPTERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DISPTERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DISPTERMS
8     (SKIP&RET 1)


Disassembly of function $DISPTERMS
(CONST 0) = BIGFLOAT
(CONST 1) = DISPLA
(CONST 2) = SPECREPP
(CONST 3) = SPECDISREP
(CONST 4) = $DISPFLAG
(CONST 5) = MTERPRI
(CONST 6) = MOP
(CONST 7) = GETOP
(CONST 8) = MPLUS
(CONST 9) = $POWERDISP
(CONST 10) = MARGS
(CONST 11) = $DONE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($POWERDISP)
55 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L63)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 0 L63)                   ; BIGFLOAT
9     (LOAD&PUSH 1)
10    (CALL1&JMPIF 2 L68)                 ; SPECREPP
13    (T)
14    (BIND 4)                            ; $DISPFLAG
16    (CALL0 5)                           ; MTERPRI
18    (LOAD&PUSH 4)
19    (CALL1&PUSH 6)                      ; MOP
21    (CALL1&PUSH 7)                      ; GETOP
23    (CALL1 1)                           ; DISPLA
25    (LOAD 4)
26    (CAR)
27    (CAR&PUSH)
28    (JMPIFNOTEQTO 8 L35)                ; MPLUS
31    (GETVALUE 9)                        ; $POWERDISP
33    (JMPIFNOT L76)
35    L35
35    (LOAD&PUSH 4)
36    (CALL1 10)                          ; MARGS
38    L38
38    (PUSH)
39    (LOAD&JMPIFNOT 0 L55)
42    L42
42    (CALL0 5)                           ; MTERPRI
44    (LOAD&CAR&PUSH 0)
46    (CALL1 1)                           ; DISPLA
48    (CALL0 5)                           ; MTERPRI
50    (LOAD&CDR&STORE 0)
52    (LOAD&JMPIF 0 L42)
55    L55
55    (SKIP 1)
57    (UNBIND1)
58    (CALL0 5)                           ; MTERPRI
60    L60
60    (CONST 11)                          ; $DONE
61    (SKIP&RET 2)
63    L63
63    (LOAD&PUSH 1)
64    (CALL1 1)                           ; DISPLA
66    (JMP L60)
68    L68
68    (LOAD&PUSH 1)
69    (CALL1&PUSH 3)                      ; SPECDISREP
71    (JSR L0)
74    (JMP L60)
76    L76
76    (LOAD&CDR&PUSH 4)
78    (CALLS2 72)                         ; REVERSE
80    (JMP L38)


Disassembly of function #:|(DEFMFUN $DISPFORM N ...)-56|
(CONST 0) = $DISPFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DISPFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DISPFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DISPFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DISPFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DISPFORM
8     (SKIP&RET 1)


Disassembly of function $DISPFORM
(CONST 0) = 1
(CONST 1) = 2
(CONST 2) = NARG1
(CONST 3) = $ALL
(CONST 4) = "Incorrect arguments to DISPFORM"
(CONST 5) = MERROR
(CONST 6) = NFORMAT
(CONST 7) = NFORMAT-ALL
(CONST 8) = SIMP
(CONST 9) = MEMQ
(CONST 10) = MPLUS
(CONST 11) = $POWERDISP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: ($POWERDISP)
66 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 1
5     (CALLSR&JMPIF 1 45 L25)             ; =
9     (LOAD&PUSH 0)
10    (CONST&PUSH 1)                      ; 2
11    (CALLSR&JMPIFNOT 1 45 L22)          ; =
15    (CONST&PUSH 1)                      ; 2
16    (LOAD&PUSH 3)
17    (CALL2&PUSH 2)                      ; NARG1
19    (JMPIFEQTO 3 L25)                   ; $ALL
22    L22
22    (CONST&PUSH 4)                      ; "Incorrect arguments to DISPFORM"
23    (CALL1 5)                           ; MERROR
25    L25
25    (CONST&PUSH 0)                      ; 1
26    (LOAD&PUSH 3)
27    (CALL2&PUSH 2)                      ; NARG1
29    (LOAD 0)
30    (JMPIFATOM L80)
32    (LOAD&PUSH 1)
33    (CONST&PUSH 0)                      ; 1
34    (CALLSR&JMPIF 1 45 L75)             ; =
38    (LOAD&PUSH 0)
39    (CALL1 7)                           ; NFORMAT-ALL
41    L41
41    (STORE 0)
42    (JMPIFATOM L80)
44    (CONST&PUSH 8)                      ; SIMP
45    (LOAD 1)
46    (CAR)
47    (CDR&PUSH)
48    (CALL2&JMPIF 9 L80)                 ; MEMQ
51    (LOAD 0)
52    (CAR)
53    (CAR&PUSH)
54    (CONST&PUSH 8)                      ; SIMP
55    (LOAD 2)
56    (CAR)
57    (CDR)
58    (CONS)
59    (CONS&PUSH)
60    (LOAD 1)
61    (CAR)
62    (CAR&PUSH)
63    (JMPIFNOTEQTO 10 L70)               ; MPLUS
66    (GETVALUE 11)                       ; $POWERDISP
68    (JMPIFNOT L83)
70    L70
70    (LOAD 1)
71    (CDR)
72    L72
72    (CONS)
73    (SKIP&RET 4)
75    L75
75    (LOAD&PUSH 0)
76    (CALL1 6)                           ; NFORMAT
78    (JMP L41)
80    L80
80    (POP)
81    (SKIP&RET 3)
83    L83
83    (LOAD&CDR&PUSH 1)
85    (CALLS2 72)                         ; REVERSE
87    (JMP L72)


Disassembly of function #:|(DEFMFUN $OP (EXPR) ...)-57|
(CONST 0) = $OP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $OP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $OP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $OP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $OP
8     (SKIP&RET 1)


Disassembly of function $OP
(CONST 0) = 0
(CONST 1) = $PART
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 0
2     (CALL2 1)                           ; $PART
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $OPERATORP (EXPR OPLIST) ...)-58|
(CONST 0) = $OPERATORP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $OPERATORP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OPERATORP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $OPERATORP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $OPERATORP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $OPERATORP
8     (SKIP&RET 1)


Disassembly of function $OPERATORP
(CONST 0) = $LISTP
(CONST 1) = $OP
(CONST 2) = $MEMBER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L12)                 ; $LISTP
4     (LOAD&PUSH 2)
5     (CALL1&PUSH 1)                      ; $OP
7     (LOAD&PUSH 2)
8     (CALLS2 2)                          ; EQUAL
10    (SKIP&RET 3)
12    L12
12    (LOAD&PUSH 2)
13    (CALL1&PUSH 1)                      ; $OP
15    (LOAD&PUSH 2)
16    (CALL2 2)                           ; $MEMBER
18    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $PART N ...)-59|
(CONST 0) = $PART
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PART>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PART
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PART
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PART>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PART
8     (SKIP&RET 1)


Disassembly of function $PART
(CONST 0) = LISTIFY1
(CONST 1) = $INFLAG
(CONST 2) = $PART
(CONST 3) = MPART
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: ($INFLAG)
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (LOAD&PUSH 3)
5     (CALL2&PUSH 0)                      ; LISTIFY1
7     (PUSH-NIL 2)
9     (GETVALUE&PUSH 1)                   ; $INFLAG
11    (CONST&PUSH 2)                      ; $PART
12    (CALL 5 3)                          ; MPART
15    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $INPART N ...)-60|
(CONST 0) = $INPART
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INPART>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INPART
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INPART
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INPART>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INPART
8     (SKIP&RET 1)


Disassembly of function $INPART
(CONST 0) = LISTIFY1
(CONST 1) = $INPART
(CONST 2) = MPART
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (LOAD&PUSH 3)
5     (CALL2&PUSH 0)                      ; LISTIFY1
7     (PUSH-NIL 2)
9     (T&PUSH)
10    (CONST&PUSH 1)                      ; $INPART
11    (CALL 5 2)                          ; MPART
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $SUBSTPART (L) ...)-61-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $SUBSTPART (L) ...)-61-2-1|>
(CONST 1) = $SUBSTPART
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $SUBSTPART (L) ...)-61-2-1|>
1     (CONST&PUSH 1)                      ; $SUBSTPART
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $SUBSTPART (L) ...)-61-2-1|
(CONST 0) = SUBSTP
(CONST 1) = $INFLAG
(CONST 2) = $SUBSTPART
(CONST 3) = MPART
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($INFLAG)
10 byte-code instructions:
0     (T)
1     (BIND 0)                            ; SUBSTP
3     (LOAD&CDR&PUSH 4)
5     (T&PUSH)
6     (NIL&PUSH)
7     (GETVALUE&PUSH 1)                   ; $INFLAG
9     (CONST&PUSH 2)                      ; $SUBSTPART
10    (CALL 5 3)                          ; MPART
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $SUBSTINPART (L) ...)-62-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $SUBSTINPART (L) ...)-62-2-1|>
(CONST 1) = $SUBSTINPART
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $SUBSTINPART (L) ...)-62-2-1|>
1     (CONST&PUSH 1)                      ; $SUBSTINPART
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $SUBSTINPART (L) ...)-62-2-1|
(CONST 0) = SUBSTP
(CONST 1) = $SUBSTINPART
(CONST 2) = MPART
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (T)
1     (BIND 0)                            ; SUBSTP
3     (LOAD&CDR&PUSH 4)
5     (T&PUSH)
6     (NIL&PUSH)
7     (T&PUSH)
8     (CONST&PUSH 1)                      ; $SUBSTINPART
9     (CALL 5 2)                          ; MPART
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN PART1 (ARGLIST SUBSTFLAG DISPFLAG ...) ...)-63|
(CONST 0) = PART1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PART1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PART1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PART1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PART1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PART1
8     (SKIP&RET 1)


Disassembly of function PART1
(CONST 0) = SUBSTP
(CONST 1) = $SUBSTPART
(CONST 2) = MPART
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (T)
1     (BIND 0)                            ; SUBSTP
3     (LOAD&PUSH 7)
4     (LOAD&PUSH 7)
5     (LOAD&PUSH 7)
6     (LOAD&PUSH 7)
7     (CONST&PUSH 1)                      ; $SUBSTPART
8     (CALL 5 2)                          ; MPART
11    (UNBIND1)
12    (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN MPART (ARGLIST SUBSTFLAG DISPFLAG ...) ...)-64|
(CONST 0) = MPART
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MPART>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPART
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MPART
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MPART>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MPART
8     (SKIP&RET 1)


Disassembly of function MPART
(CONST 0) = $PART
(CONST 1) = WNA-ERR
(CONST 2) = MEVAL
(CONST 3) = $PIECE
(CONST 4) = BOX
(CONST 5) = $LISTP
(CONST 6) = $MATRIXP
(CONST 7) = NFORMAT
(CONST 8) = NFORMAT-ALL
(CONST 9) = SPECREPP
(CONST 10) = SPECDISREP
(CONST 11) = $PARTSWITCH
(CONST 12) = "~:M called on atom: ~:M"
(CONST 13) = MERROR
(CONST 14) = BIGFLOAT
(CONST 15) = 0
(CONST 16) = MNUMP
(CONST 17) = "~M is an invalid operator in ~:M"
(CONST 18) = MQAPPLY
(CONST 19) = "Invalid operator in ~:M"
(CONST 20) = MOP
(CONST 21) = GETOP
(CONST 22) = GETOPR
(CONST 23) = "Invalid operator in ~:M:~%~M"
(CONST 24) = (MQAPPLY)
(CONST 25) = RESIMPLIFY
(CONST 26) = ARRAY
(CONST 27) = MEMQ
(CONST 28) = MOPP
(CONST 29) = (ARRAY)
(CONST 30) = (MBOX)
(CONST 31) = (MLABOX)
(CONST 32) = FIXNUMP
(CONST 33) = "Non-integer argument to ~:M:~%~M"
(CONST 34) = SIMPLIFY
(CONST 35) = MAPPLY
(CONST 36) = "Improper index to list or matrix"
(CONST 37) = $END
(CONST 38) = "~:M fell off end."
(CONST 39) = IMPROPER-ARG-ERR
(CONST 40) = (MLIST $ALLBUT)
(CONST 41) = (ARRAY)
(CONST 42) = "Non-integer argument to ~:M:~%~M"
(CONST 43) = MLIST
(CONST 44) = #.#'<
(CONST 45) = $ALLBUT
(CONST 46) = 1
(CONST 47) = "Invalid argument to ~:M:~%~M"
(CONST 48) = ZL-MEMBER
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PIECE $PARTSWITCH)
writes special variable : ($PIECE)
582 byte-code instructions:
0     (PUSH-NIL 13)
2     (LOAD&JMPIF 17 L7)
5     (LOAD 16)
7     L7
7     (STORE 2)
8     (LOAD&JMPIF 17 L68)
11    (LOAD&JMPIFNOT 18 L76)
14    L14
14    (LOAD&JMPIF 17 L82)
18    L18
18    (LOAD 18)
20    (CAR)
21    L21
21    (STORE 9)
23    (LOAD&CDR&STORE 18)
25    (JMPIFNOT L100)
28    (LOAD&JMPIFNOT 15 L125)
32    (LOAD&PUSH 9)
33    (CALL1&JMPIFNOT 9 L41)              ; SPECREPP
36    (LOAD&PUSH 9)
37    (CALL1 10)                          ; SPECDISREP
39    (STORE 9)
41    L41
41    (LOAD 9)
42    (JMPIFCONSP L49)
44    (GETVALUE 11)                       ; $PARTSWITCH
46    (JMPIFNOT L160)
49    L49
49    (LOAD&JMPIFNOT 15 L63)
52    L52
52    (LOAD&JMPIFNOT 2 L63)
55    (PUSH-NIL 2)
57    (LOAD&PUSH 11)
58    (PUSH-UNBOUND 3)
60    (CALLS1&STORE 172 9)                ; SUBST
63    L63
63    (LOAD 9)
64    (STORE 7)
65    (JMP L768)
68    L68
68    (LOAD&CAR&STORE 18 12)
71    (LOAD&CDR&STORE 18)
73    (LOAD&JMPIF 18 L14)
76    L76
76    (CONST&PUSH 0)                      ; $PART
77    (CALL1 1)                           ; WNA-ERR
79    (LOAD&JMPIFNOT 17 L18)
82    L82
82    (LOAD&CAR&PUSH 18)
84    (CALL1 2)                           ; MEVAL
86    (JMP L21)
89    L89
89    (LOAD&PUSH 12)
90    (CALL1 2)                           ; MEVAL
92    (SKIP&RET 19)
94    L94
94    (LOAD&PUSH 9)
95    (LOAD&PUSH 17)
96    (CALL2 4)                           ; BOX
98    (SKIP&RET 19)
100   L100
100   (LOAD 9)
101   (SETVALUE 3)                        ; $PIECE
103   (LOAD&JMPIF 17 L89)
106   (LOAD&JMPIF 16 L94)
109   (LOAD 9)
110   (SKIP&RET 19)
112   L112
112   (T&STORE 15)
114   (JMP L41)
117   L117
117   (LOAD&PUSH 9)
118   (CALL1 7)                           ; NFORMAT
120   (STORE 9)
122   (JMP L41)
125   L125
125   (LOAD&PUSH 9)
126   (CALL1&JMPIFNOT 5 L134)             ; $LISTP
129   (LOAD 18)
131   (CDR)
132   (JMPIFNOT L112)
134   L134
134   (LOAD&PUSH 9)
135   (CALL1&JMPIFNOT 6 L149)             ; $MATRIXP
138   (LOAD 18)
140   (CDR)
141   (JMPIFNOT L112)
143   (LOAD 18)
145   (CDR)
146   (CDR)
147   (JMPIFNOT L112)
149   L149
149   (LOAD&JMPIFNOT 2 L117)
152   (LOAD&PUSH 9)
153   (CALL1 8)                           ; NFORMAT-ALL
155   (STORE 9)
157   (JMP L41)
160   L160
160   (CONST&PUSH 12)                     ; "~:M called on atom: ~:M"
161   (LOAD&PUSH 15)
162   (LOAD&PUSH 11)
163   (CALL 3 13)                         ; MERROR
166   (LOAD&JMPIFNOT 15 L63)
170   (JMP L52)
173   L173
173   (LOAD&CAR&PUSH 18)
175   (CALL1 2)                           ; MEVAL
177   (JMP L786)
180   L180
180   (CONST&PUSH 17)                     ; "~M is an invalid operator in ~:M"
181   (LOAD&PUSH 13)
182   (LOAD 16)
184   (JMP L805)
187   L187
187   (CONST&PUSH 19)                     ; "Invalid operator in ~:M"
188   (LOAD&PUSH 15)
189   (CALL2 13)                          ; MERROR
191   (JMP L809)
194   L194
194   (CONST&PUSH 23)                     ; "Invalid operator in ~:M:~%~M"
195   (LOAD&PUSH 15)
196   (LOAD&PUSH 14)
197   (CALL 3 13)                         ; MERROR
200   (JMP L257)
202   L202
202   (LOAD 9)
203   (CAR)
204   (CAR&PUSH)
205   (JMPIFEQTO 18 L219)                 ; MQAPPLY
208   (LOAD&PUSH 9)
209   (LOAD&CAR&PUSH 10)
211   (LOAD 11)
212   (CDR)
213   (CONS&PUSH)
214   (CALLS1&PUSH 170)                   ; RPLACD
216   (CONST&PUSH 24)                     ; (MQAPPLY)
217   (CALLS1 168)                        ; RPLACA
219   L219
219   (LOAD&CDR&PUSH 9)
221   (LOAD 13)
222   (JMP L847)
225   L225
225   (CONST 29)                          ; (ARRAY)
227   (CONS)
228   (JMP L847)
231   L231
231   (LOAD&PUSH 12)
232   (CALL1&PUSH 2)                      ; MEVAL
234   (CALL1 22)                          ; GETOPR
236   (STORE 12)
238   (PUSH)
239   (CALL1&JMPIF 16 L194)               ; MNUMP
242   (LOAD 12)
243   (JMPIFCONSP L202)
245   (LOAD 9)
246   (CAR)
247   (CAR&PUSH)
248   (JMPIFNOTEQTO 18 L257)              ; MQAPPLY
251   (LOAD&PUSH 9)
252   (LOAD 10)
253   (CDR)
254   (CDR&PUSH)
255   (CALLS1 170)                        ; RPLACD
257   L257
257   (LOAD&PUSH 9)
258   (LOAD&PUSH 13)
259   (CONST&PUSH 26)                     ; ARRAY
260   (LOAD 12)
261   (CAR)
262   (CDR&PUSH)
263   (CALL2&JMPIFNOT 27 L272)            ; MEMQ
266   (LOAD&PUSH 14)
267   (CALL1 28)                          ; MOPP
269   (NOT)
270   (JMPIF L225)
272   L272
272   (CONS)
273   (JMP L847)
276   L276
276   (CONST 30)                          ; (MBOX)
278   (JMP L847)
281   L281
281   (LOAD&PUSH 9)
282   (PUSH-NIL 2)
284   (LOAD&PUSH 12)
285   (PUSH-UNBOUND 3)
287   (CALLS1&PUSH 172)                   ; SUBST
289   (LOAD&PUSH 18)
290   (CALL2 4)                           ; BOX
292   (CDR&PUSH)
293   (CALLS1 170)                        ; RPLACD
295   (LOAD&PUSH 9)
296   (LOAD&PUSH 17)
297   (T)
298   (JMPIFEQ L276)
300   (CONST 31)                          ; (MLABOX)
302   (JMP L847)
305   L305
305   (LOAD&PUSH 9)
306   (CALL1&PUSH 20)                     ; MOP
308   (CALL1 21)                          ; GETOP
310   (SETVALUE 3)                        ; $PIECE
312   (LOAD&JMPIF 17 L231)
316   (LOAD&JMPIF 16 L281)
319   (LOAD&JMPIFNOT 18 L858)
323   (GETVALUE 3)                        ; $PIECE
325   (JMP L371)
327   L327
327   (LOAD&PUSH 11)
328   (CONST&PUSH 15)                     ; 0
329   (CALLSR&JMPIFNOT 1 47 L809)         ; <
334   (JMP L436)
337   L337
337   (LOAD&CAR&PUSH 9)
339   (CALL1 25)                          ; RESIMPLIFY
341   (SETVALUE 3)                        ; $PIECE
343   (LOAD 9)
344   (JMP L734)
347   L347
347   (LOAD 9)
348   (CAR)
349   (JMP L416)
352   L352
352   (LOAD&JMPIF 15 L347)
355   (LOAD&CAR&PUSH 9)
357   (CALL1 34)                          ; SIMPLIFY
359   (JMP L416)
361   L361
361   (LOAD&PUSH 9)
362   (CALL1 7)                           ; NFORMAT
364   (STORE 9)
366   (JMP L768)
369   L369
369   (LOAD 9)
370   (CAR)
371   L371
371   (STORE 9)
373   (LOAD&JMPIF 15 L379)
376   (LOAD&JMPIFNOT 2 L361)
379   L379
379   (LOAD&PUSH 9)
380   (CALL1&JMPIFNOT 9 L768)             ; SPECREPP
384   (LOAD&PUSH 9)
385   (CALL1 10)                          ; SPECDISREP
387   (STORE 9)
389   (JMP L768)
392   L392
392   (CONST&PUSH 36)                     ; "Improper index to list or matrix"
394   (CALL1 13)                          ; MERROR
396   (JMP L436)
398   L398
398   (LOAD&DEC&STORE 11)
400   (LOAD&CDR&STORE 9)
402   (JMPIF L817)
405   L405
405   (GETVALUE&PUSH 11)                  ; $PARTSWITCH
407   (JMPIFEQTO 35 L392)                 ; MAPPLY
410   (GETVALUE 11)                       ; $PARTSWITCH
412   (JMPIFNOT L431)
414   (CONST 37)                          ; $END
416   L416
416   (SETVALUE 3)                        ; $PIECE
418   (SKIP&RET 19)
420   L420
420   (LOAD 9)
421   (CDR)
422   (CAR&PUSH)
423   (LOAD&PUSH 9)
424   (LIST 2)
426   (STORE 6)
427   (LOAD 9)
428   (CDR)
429   (JMP L479)
431   L431
431   (CONST&PUSH 38)                     ; "~:M fell off end."
433   (LOAD&PUSH 15)
434   (CALL2 13)                          ; MERROR
436   L436
436   (LOAD&PUSH 11)
437   (LOAD&PUSH 15)
438   (CALL2 39)                          ; IMPROPER-ARG-ERR
440   L440
440   (LOAD 11)
441   (CAR)
442   (CAR&PUSH)
443   (CONST&PUSH 40)                     ; (MLIST $ALLBUT)
445   (CALL2&JMPIFNOT 27 L436)            ; MEMQ
448   (LOAD 18)
450   (CDR)
451   (JMPIF L436)
453   (LOAD 9)
454   (CAR)
455   (CAR&PUSH)
456   (CONST&PUSH 26)                     ; ARRAY
457   (LOAD 11)
458   (CAR)
459   (CDR&PUSH)
460   (CALL2&JMPIFNOT 27 L465)            ; MEMQ
463   (CONST 41)                          ; (ARRAY)
465   L465
465   (CONS)
466   (STORE 8)
468   (LOAD 9)
469   (CAR)
470   (CAR&PUSH)
471   (JMPIFEQTO 18 L420)                 ; MQAPPLY
474   (LOAD&PUSH 8)
475   (NIL)
476   (CONS)
477   (STORE 6)
478   (LOAD 9)
479   L479
479   (CDR)
480   (STORE 9)
482   (LOAD 11)
483   (CDR)
484   (STORE 10)
486   (CONST 15)                          ; 0
487   (STORE 4)
488   (LOAD 9)
489   (STORE 8)
491   (LOAD&PUSH 10)
492   (NIL&PUSH)
493   (JMP L511)
495   L495
495   (LOAD&CAR&STORE 1 0)
498   (PUSH)
499   (CALL1&JMPIF 32 L509)               ; FIXNUMP
502   (CONST&PUSH 42)                     ; "Non-integer argument to ~:M:~%~M"
504   (LOAD&PUSH 17)
505   (LOAD&PUSH 2)
506   (CALL 3 13)                         ; MERROR
509   L509
509   (LOAD&CDR&STORE 1)
511   L511
511   (LOAD&PUSH 1)
512   (CALLS1&JMPIFNOT 146 L495)          ; ENDP
515   (SKIP 2)
517   (LOAD&JMPIFNOT 2 L546)
520   (LOAD 11)
521   (CAR)
522   (CAR&PUSH)
523   (JMPIFNOTEQTO 43 L546)              ; MLIST
526   (LOAD&JMPIFNOT 17 L536)
529   (LOAD&PUSH 10)
530   (PUSH-UNBOUND 1)
532   (CALLS1 156)                        ; LAST
534   (CAR)
535   (STORE 1)
536   L536
536   (LOAD&PUSH 10)
537   (CALLS1&PUSH 158)                   ; COPY-LIST
539   (CONST&PUSH 44)                     ; #.#'<
541   (PUSH-UNBOUND 3)
543   (CALLS2&STORE 103 10)               ; SORT
546   L546
546   (LOAD 11)
547   (CAR)
548   (CAR&PUSH)
549   (JMPIFNOTEQTO 45 L698)              ; $ALLBUT
553   (LOAD&PUSH 9)
554   (CALLS2&STORE 71 3)                 ; LENGTH
557   (LOAD&PUSH 10)
558   (NIL&PUSH)
559   (JMP L586)
561   L561
561   (LOAD&CAR&STORE 1 0)
564   (PUSH)
565   (CONST&PUSH 46)                     ; 1
567   (CALLSR&JMPIF 1 47 L577)            ; <
571   (LOAD&PUSH 0)
572   (LOAD&PUSH 6)
573   (CALLSR&JMPIFNOT 1 48 L584)         ; >
577   L577
577   (CONST&PUSH 47)                     ; "Invalid argument to ~:M:~%~M"
579   (LOAD&PUSH 17)
580   (LOAD&PUSH 2)
581   (CALL 3 13)                         ; MERROR
584   L584
584   (LOAD&CDR&STORE 1)
586   L586
586   (LOAD&PUSH 1)
587   (CALLS1&JMPIFNOT 146 L561)          ; ENDP
590   (SKIP 2)
592   (LOAD&PUSH 3)
593   (NIL&PUSH)
594   (JMP L683)
597   L597
597   (LOAD 1)
598   (STORE 0)
599   (LOAD&JMPIFNOT 2 L640)
602   L602
602   (LOAD&CAR&PUSH 10)
604   (LOAD&PUSH 5)
605   (CALLSR&STORE 1 54 5)               ; -
609   (LOAD&CAR&STORE 10 4)
612   (JMP L643)
614   L614
614   (LOAD&DEC&STORE 0)
616   (LOAD&JMPIFNOT 9 L405)
620   (JMP L906)
623   L623
623   (LOAD&PUSH 10)
624   (PUSH-UNBOUND 1)
626   (CALLS1 156)                        ; LAST
628   (CAR)
629   (STORE 1)
630   (LOAD&JMPIFNOT 10 L702)
634   L634
634   (LOAD&JMPIF 17 L597)
637   (LOAD&JMPIF 2 L602)
640   L640
640   (LOAD&CAR&STORE 10 5)
643   L643
643   (LOAD&PUSH 5)
644   (CONST&PUSH 46)                     ; 1
646   (CALLSR&JMPIF 1 47 L436)            ; <
651   (LOAD&JMPIFNOT 17 L661)
654   (LOAD&CAR&PUSH 10)
656   (LOAD&PUSH 2)
657   (CALLSR&JMPIF 1 47 L614)            ; <
661   L661
661   (LOAD&JMPIFNOT 9 L405)
665   (JMP L906)
668   L668
668   (LOAD&PUSH 6)
669   (CALL1 34)                          ; SIMPLIFY
671   (JMP L723)
673   L673
673   (LOAD&PUSH 1)
674   (LOAD&PUSH 13)
675   (CALL2&JMPIF 48 L681)               ; ZL-MEMBER
678   (LOAD&PUSH 1)
679   (LOAD&CONS&STORE 0)
681   L681
681   (LOAD&DEC&STORE 1)
683   L683
683   (LOAD&PUSH 1)
684   (CONST&PUSH 15)                     ; 0
685   (CALLSR&JMPIFNOT 1 45 L673)         ; =
689   (LOAD 0)
690   (STORE 12)
692   (SKIP 2)
694   (LOAD&JMPIF 17 L623)
698   L698
698   (LOAD&JMPIF 10 L634)
702   L702
702   (LOAD&JMPIF 2 L436)
706   (LOAD&JMPIF 10 L923)
710   L710
710   (LOAD&PUSH 6)
711   (CALLS2&STORE 73 6)                 ; NREVERSE
714   (LOAD&JMPIF 15 L668)
717   (LOAD&JMPIFNOT 2 L668)
720   (LOAD&PUSH 6)
721   (CALL1 25)                          ; RESIMPLIFY
723   L723
723   (SETVALUE 3)                        ; $PIECE
725   (LOAD&JMPIFNOT 17 L855)
729   (LOAD&DEC&PUSH 0)
731   (LOAD&PUSH 9)
732   (CALLS1 155)                        ; NTHCDR
734   L734
734   (PUSH)
735   (LOAD&PUSH 13)
736   (CALL1 2)                           ; MEVAL
738   (JMP L847)
741   L741
741   (LOAD&CDR&STORE 18)
743   (LOAD&PUSH 12)
744   (CALL1&JMPIF 16 L180)               ; MNUMP
748   (LOAD&JMPIFNOT 2 L305)
752   (LOAD&JMPIFNOT 18 L305)
756   (LOAD 9)
757   (CAR)
758   (CAR&PUSH)
759   (JMPIFNOTEQTO 18 L187)              ; MQAPPLY
763   (LOAD 9)
764   (CDR)
765   (CAR)
766   (STORE 9)
768   L768
768   (LOAD 9)
769   (JMPIFATOM L405)
772   (LOAD 9)
773   (CAR)
774   (CAR&PUSH)
775   (JMPIFEQTO 14 L405)                 ; BIGFLOAT
779   (LOAD&JMPIF 17 L173)
783   (LOAD 18)
785   (CAR)
786   L786
786   (STORE 11)
788   (PUSH)
789   (JMPIFEQTO 15 L741)                 ; 0
792   (LOAD 11)
793   (JMPIFCONSP L440)
796   (LOAD&PUSH 11)
797   (CALL1&JMPIF 32 L327)               ; FIXNUMP
801   (CONST&PUSH 33)                     ; "Non-integer argument to ~:M:~%~M"
803   (LOAD&PUSH 15)
804   (LOAD 13)
805   L805
805   (PUSH)
806   (CALL 3 13)                         ; MERROR
809   L809
809   (LOAD 9)
810   (CAR)
811   (CAR&PUSH)
812   (JMPIFNOTEQTO 18 L817)              ; MQAPPLY
815   (LOAD&CDR&STORE 9)
817   L817
817   (LOAD&PUSH 11)
818   (CALLS2&JMPIFNOT 145 L398)          ; ZEROP
822   (LOAD&CDR&STORE 18)
824   (JMPIF L369)
827   (LOAD&JMPIF 17 L337)
831   (LOAD&JMPIFNOT 16 L352)
835   (LOAD&CAR&PUSH 9)
837   (CALL1 25)                          ; RESIMPLIFY
839   (SETVALUE 3)                        ; $PIECE
841   L841
841   (LOAD&PUSH 9)
842   (LOAD&CAR&PUSH 10)
844   (LOAD&PUSH 18)
845   (CALL2 4)                           ; BOX
847   L847
847   (PUSH)
848   (CALLS1 168)                        ; RPLACA
850   (LOAD&PUSH 7)
851   (CALL1 25)                          ; RESIMPLIFY
853   (SKIP&RET 19)
855   L855
855   (LOAD&JMPIF 16 L841)
858   L858
858   (GETVALUE 3)                        ; $PIECE
860   (SKIP&RET 19)
862   L862
862   (LOAD 9)
863   (CDR)
864   (JMPIFNOT L405)
867   (LOAD&PUSH 9)
868   (LOAD 10)
869   (CDR)
870   (CAR&PUSH)
871   (CALLS1 168)                        ; RPLACA
873   (LOAD&PUSH 9)
874   (LOAD 10)
875   (CDR)
876   (CDR&PUSH)
877   (CALLS1 170)                        ; RPLACD
879   (LOAD&JMPIFNOT 2 L640)
883   (JMP L602)
886   L886
886   (LOAD&PUSH 9)
887   (LOAD&CAR&PUSH 10)
889   (LOAD&PUSH 18)
890   (CALL2&PUSH 4)                      ; BOX
892   (CALLS1 168)                        ; RPLACA
894   (LOAD 9)
895   (CDR)
896   (JMP L930)
898   L898
898   (LOAD&DEC&STORE 5)
900   (LOAD&CDR&STORE 9)
902   (LOAD&JMPIFNOT 9 L405)
906   L906
906   (LOAD&PUSH 5)
907   (CONST&PUSH 46)                     ; 1
909   (CALLSR&JMPIFNOT 1 45 L898)         ; =
913   (LOAD&CAR&PUSH 9)
915   (LOAD&CONS&STORE 6)
917   (LOAD&CDR&STORE 10)
919   (LOAD&JMPIFNOT 10 L710)
923   L923
923   (LOAD&JMPIF 17 L862)
926   (LOAD&JMPIF 16 L886)
929   (LOAD 8)
930   L930
930   (STORE 9)
932   (LOAD&JMPIFNOT 2 L640)
936   (JMP L602)


Disassembly of function #:|(DEFMFUN GETOP (X) ...)-65|
(CONST 0) = GETOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETOP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETOP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETOP
8     (SKIP&RET 1)


Disassembly of function GETOP
(CONST 0) = X
(CONST 1) = OP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIFNOT 6 L17)             ; SYMBOLP
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST&PUSH 1)                      ; OP
11    (PUSH-UNBOUND 1)
13    (CALLS2 132)                        ; GET
15    (JMPIF1 L19)
17    L17
17    (GETVALUE 0)                        ; X
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN GETOPR (X) ...)-66|
(CONST 0) = GETOPR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETOPR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETOPR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETOPR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETOPR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETOPR
8     (SKIP&RET 1)


Disassembly of function GETOPR
(CONST 0) = X
(CONST 1) = OPR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIFNOT 6 L17)             ; SYMBOLP
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST&PUSH 1)                      ; OPR
11    (PUSH-UNBOUND 1)
13    (CALLS2 132)                        ; GET
15    (JMPIF1 L19)
17    L17
17    (GETVALUE 0)                        ; X
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $LISTP (X) ...)-67|
(CONST 0) = $LISTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LISTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LISTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LISTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LISTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LISTP
8     (SKIP&RET 1)


Disassembly of function $LISTP
(CONST 0) = X
(CONST 1) = MLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L22)
9     (GETVALUE 0)                        ; X
11    (CAR&PUSH)
12    (CALLS2 4)                          ; CONSP
14    (JMPIFNOT1 L22)
16    (GETVALUE 0)                        ; X
18    (CAR)
19    (CAR&PUSH)
20    (CONST 1)                           ; MLIST
21    (EQ)
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $CONS (X E) ...)-68|
(CONST 0) = $CONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CONS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CONS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CONS
8     (SKIP&RET 1)


Disassembly of function $CONS
(CONST 0) = X
(CONST 1) = SPECREPCHECK
(CONST 2) = $CONS
(CONST 3) = ATOMCHK
(CONST 4) = MARGS
(CONST 5) = MCONS-EXP-ARGS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 4)
4     (CALL1 1)                           ; SPECREPCHECK
6     (STORE 4)
7     (PUSH)
8     (CONST&PUSH 2)                      ; $CONS
9     (T&PUSH)
10    (CALL 3 3)                          ; ATOMCHK
13    (LOAD&PUSH 4)
14    (GETVALUE&PUSH 0)                   ; X
16    (LOAD&PUSH 6)
17    (CALL1 4)                           ; MARGS
19    (CONS&PUSH)
20    (CALL2 5)                           ; MCONS-EXP-ARGS
22    (UNBIND1)
23    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $ENDCONS (X E) ...)-69|
(CONST 0) = $ENDCONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ENDCONS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ENDCONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ENDCONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ENDCONS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ENDCONS
8     (SKIP&RET 1)


Disassembly of function $ENDCONS
(CONST 0) = X
(CONST 1) = SPECREPCHECK
(CONST 2) = $ENDCONS
(CONST 3) = ATOMCHK
(CONST 4) = MARGS
(CONST 5) = MCONS-EXP-ARGS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
19 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 4)
4     (CALL1 1)                           ; SPECREPCHECK
6     (STORE 4)
7     (PUSH)
8     (CONST&PUSH 2)                      ; $ENDCONS
9     (T&PUSH)
10    (CALL 3 3)                          ; ATOMCHK
13    (LOAD&PUSH 4)
14    (LOAD&PUSH 5)
15    (CALL1&PUSH 4)                      ; MARGS
17    (GETVALUE&PUSH 0)                   ; X
19    (NIL)
20    (CONS&PUSH)
21    (CALLSR&PUSH 2 34)                  ; APPEND
24    (CALL2 5)                           ; MCONS-EXP-ARGS
26    (UNBIND1)
27    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $REVERSE (E) ...)-70|
(CONST 0) = $REVERSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $REVERSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REVERSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $REVERSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $REVERSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $REVERSE
8     (SKIP&RET 1)


Disassembly of function $REVERSE
(CONST 0) = FORMAT1
(CONST 1) = $REVERSE
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = MCONS-EXP-ARGS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $REVERSE
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (LOAD&PUSH 2)
12    (CALL1&PUSH 3)                      ; MARGS
14    (CALLS2&PUSH 72)                    ; REVERSE
16    (CALL2 4)                           ; MCONS-EXP-ARGS
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $APPEND N ...)-71|
(CONST 0) = $APPEND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $APPEND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $APPEND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $APPEND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $APPEND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $APPEND
8     (SKIP&RET 1)


Disassembly of function $APPEND
(CONST 0) = 0
(CONST 1) = ((MLIST SIMP))
(CONST 2) = 1
(CONST 3) = NARG1
(CONST 4) = SPECREPCHECK
(CONST 5) = $APPEND
(CONST 6) = ATOMCHK
(CONST 7) = MOP
(CONST 8) = ARRAY
(CONST 9) = MEMQ
(CONST 10) = #.#'APPEND
(CONST 11) = LISTIFY1
(CONST 12) = ALIKE1
(CONST 13) = "Arguments to APPEND are not compatible."
(CONST 14) = MERROR
(CONST 15) = MARGS
(CONST 16) = MCONS-EXP-ARGS
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
80 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 0
5     (CALLSR&JMPIF 1 45 L45)             ; =
9     (CONST&PUSH 2)                      ; 1
10    (LOAD&PUSH 3)
11    (CALL2&PUSH 3)                      ; NARG1
13    (CALL1&PUSH 4)                      ; SPECREPCHECK
15    (PUSH-NIL 2)
17    (LOAD&PUSH 2)
18    (CONST&PUSH 5)                      ; $APPEND
19    (NIL&PUSH)
20    (CALL 3 6)                          ; ATOMCHK
23    (LOAD&PUSH 2)
24    (CALL1 7)                           ; MOP
26    (STORE 1)
27    (CONST&PUSH 8)                      ; ARRAY
28    (LOAD 3)
29    (CAR)
30    (CDR&PUSH)
31    (CALL2&JMPIFNOT 9 L35)              ; MEMQ
34    (T)
35    L35
35    (STORE 0)
36    (LOAD&PUSH 2)
37    (CONST&PUSH 10)                     ; #.#'APPEND
38    (NIL&PUSH)
39    (LOAD&PUSH 6)
40    (LOAD&PUSH 9)
41    (CALL2&PUSH 11)                     ; LISTIFY1
43    (JMP L96)
45    L45
45    (CONST 1)                           ; ((MLIST SIMP))
46    (SKIP&RET 3)
48    L48
48    (T)
49    (JMPIFNOTEQ L83)
51    (JMP L86)
53    L53
53    (LOAD&CAR&PUSH 0)
55    (LOAD&PUSH 0)
56    (LOAD&PUSH 0)
57    (CALL1 4)                           ; SPECREPCHECK
59    (STORE 0)
60    (PUSH)
61    (CONST&PUSH 5)                      ; $APPEND
62    (NIL&PUSH)
63    (CALL 3 6)                          ; ATOMCHK
66    (LOAD&PUSH 7)
67    (LOAD&PUSH 1)
68    (CALL1&PUSH 7)                      ; MOP
70    (CALL2&JMPIFNOT 12 L83)             ; ALIKE1
73    (LOAD&PUSH 6)
74    (CONST&PUSH 8)                      ; ARRAY
75    (LOAD 2)
76    (CAR)
77    (CDR&PUSH)
78    (CALL2&JMPIF 9 L48)                 ; MEMQ
81    (JMPIFEQ L86)
83    L83
83    (CONST&PUSH 13)                     ; "Arguments to APPEND are not compatible."
84    (CALL1 14)                          ; MERROR
86    L86
86    (LOAD&PUSH 0)
87    (CALL1 15)                          ; MARGS
89    (STORE 0)
90    (LOAD&CONS&STORE 2)
92    (SKIP 1)
94    (LOAD&CDR&STORE 0)
96    L96
96    (LOAD&PUSH 0)
97    (CALLS1&JMPIFNOT 146 L53)           ; ENDP
100   (SKIP 1)
102   (LOAD&PUSH 0)
103   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
105   (SKIP 1)
107   (APPLY&PUSH 0)
109   (CALL2 16)                          ; MCONS-EXP-ARGS
111   (SKIP&RET 6)


Disassembly of function #:|(DEFUN MCONS-EXP-ARGS (E ARGS) ...)-72|
(CONST 0) = MCONS-EXP-ARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MCONS-EXP-ARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCONS-EXP-ARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MCONS-EXP-ARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MCONS-EXP-ARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MCONS-EXP-ARGS
8     (SKIP&RET 1)


Disassembly of function MCONS-EXP-ARGS
(CONST 0) = MQAPPLY
(CONST 1) = DELSIMP
(CONST 2) = MLIST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD 2)
1     (CAR)
2     (CAR&PUSH)
3     (JMPIFEQTO 0 L21)                   ; MQAPPLY
6     (LOAD 2)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFEQTO 2 L33)                   ; MLIST
12    (LOAD&CAR&PUSH 2)
14    (CALL1 1)                           ; DELSIMP
16    L16
16    (PUSH)
17    (LOAD 2)
18    (CONS)
19    (SKIP&RET 3)
21    L21
21    (LOAD&CAR&PUSH 2)
23    (CALL1&PUSH 1)                      ; DELSIMP
25    (LOAD 3)
26    (CDR)
27    (CAR&PUSH)
28    (LOAD 3)
29    (LIST* 2)
31    (SKIP&RET 3)
33    L33
33    (LOAD 2)
34    (CAR)
35    (JMP L16)


Disassembly of function #:|(DEFMFUN $MEMBER (X E) ...)-73|
(CONST 0) = $MEMBER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MEMBER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MEMBER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MEMBER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MEMBER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MEMBER
8     (SKIP&RET 1)


Disassembly of function $MEMBER
(CONST 0) = X
(CONST 1) = $TOTALDISREP
(CONST 2) = $MEMBER
(CONST 3) = ATOMCHK
(CONST 4) = MARGS
(CONST 5) = MEMALIKE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
19 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 4)
4     (CALL1 1)                           ; $TOTALDISREP
6     (STORE 4)
7     (PUSH)
8     (CONST&PUSH 2)                      ; $MEMBER
9     (T&PUSH)
10    (CALL 3 3)                          ; ATOMCHK
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL1&PUSH 1)                      ; $TOTALDISREP
17    (LOAD&PUSH 5)
18    (CALL1&PUSH 4)                      ; MARGS
20    (CALL2 5)                           ; MEMALIKE
22    (JMPIFNOT1 L25)
24    (T)
25    L25
25    (UNBIND1)
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN ATOMCHK (E FUN 2NDP) ...)-74|
(CONST 0) = ATOMCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATOMCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATOMCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATOMCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATOMCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATOMCHK
8     (SKIP&RET 1)


Disassembly of function ATOMCHK
(CONST 0) = BIGFLOAT
(CONST 1) = "~Margument value `~M' to ~:M was not a list"
(CONST 2) = |2nd |
(CONST 3) = ""
(CONST 4) = MERROR
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
23 byte-code instructions:
0     (LOAD 3)
1     (JMPIFATOM L10)
3     (LOAD 3)
4     (CAR)
5     (CAR&PUSH)
6     (CONST 0)                           ; BIGFLOAT
7     (EQ)
8     (JMPIFNOT1 L26)
10    L10
10    (CONST&PUSH 1)                      ; "~Margument value `~M' to ~:M was not a list"
11    (LOAD&JMPIF 2 L23)
14    (CONST 3)                           ; ""
15    L15
15    (PUSH)
16    (LOAD&PUSH 5)
17    (LOAD&PUSH 5)
18    (CALL 4 4)                          ; MERROR
21    (SKIP&RET 4)
23    L23
23    (CONST 2)                           ; |2nd |
24    (JMP L15)
26    L26
26    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN FORMAT1 (E) ...)-75|
(CONST 0) = FORMAT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FORMAT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FORMAT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FORMAT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FORMAT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FORMAT1
8     (SKIP&RET 1)


Disassembly of function FORMAT1
(CONST 0) = $LISTP
(CONST 1) = $INFLAG
(CONST 2) = SPECREPCHECK
(CONST 3) = NFORMAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($INFLAG)
14 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L13)                 ; $LISTP
4     (GETVALUE 1)                        ; $INFLAG
6     (JMPIF L16)
8     (LOAD&PUSH 1)
9     (CALL1 3)                           ; NFORMAT
11    (SKIP&RET 2)
13    L13
13    (LOAD 1)
14    (SKIP&RET 2)
16    L16
16    (LOAD&PUSH 1)
17    (CALL1 2)                           ; SPECREPCHECK
19    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $FIRST (E) ...)-76|
(CONST 0) = $FIRST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FIRST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FIRST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FIRST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FIRST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FIRST
8     (SKIP&RET 1)


Disassembly of function $FIRST
(CONST 0) = FORMAT1
(CONST 1) = $FIRST
(CONST 2) = ATOMCHK
(CONST 3) = "Argument to FIRST is empty."
(CONST 4) = MERROR
(CONST 5) = MARGS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $FIRST
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD 1)
11    (CDR)
12    (JMPIF L17)
14    (CONST&PUSH 3)                      ; "Argument to FIRST is empty."
15    (CALL1 4)                           ; MERROR
17    L17
17    (LOAD&PUSH 1)
18    (CALL1 5)                           ; MARGS
20    (CAR)
21    (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFUN DOLLARIFY # ...))-77|
(CONST 0) = DOLLARIFY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DOLLARIFY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DOLLARIFY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DOLLARIFY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DOLLARIFY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DOLLARIFY
8     (SKIP&RET 1)


Disassembly of function DOLLARIFY
(CONST 0) = STRING
(CONST 1) = "$"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRING
1     (CONST&PUSH 1)                      ; "$"
2     (LOAD&PUSH 3)
3     (CALLS2&PUSH 140)                   ; SYMBOL-NAME
5     (CALLSR&PUSH 2 37)                  ; CONCATENATE
8     (PUSH-UNBOUND 1)
10    (CALLS1 212)                        ; INTERN
12    (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO MAKE-NTH (SI I) ...)-78|
(CONST 0) = MAKE-NTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-NTH>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-NTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-NTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-NTH>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MAKE-NTH
10    (SKIP&RET 1)


Disassembly of function MAKE-NTH
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DOLLARIFY
(CONST 3) = DEFMFUN
(CONST 4) = (E)
(CONST 5) = ATOMCHK
(CONST 6) = (SETQ E (FORMAT1 E))
(CONST 7) = QUOTE
(CONST 8) = (NIL)
(CONST 9) = IF
(CONST 10) = <
(CONST 11) = (LENGTH (MARGS E))
(CONST 12) = MERROR
(CONST 13) = "There is no ~A element:~%~M"
(CONST 14) = (E)
(CONST 15) = ((MARGS E))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
45 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L54)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD&PUSH 1)
16    (CALL1&PUSH 2)                      ; DOLLARIFY
18    (CONST&PUSH 3)                      ; DEFMFUN
19    (LOAD&PUSH 1)
20    (CONST&PUSH 4)                      ; (E)
21    (CONST&PUSH 5)                      ; ATOMCHK
22    (CONST&PUSH 6)                      ; (SETQ E (FORMAT1 E))
23    (CONST&PUSH 7)                      ; QUOTE
24    (LOAD&PUSH 6)
25    (LIST&PUSH 2)
27    (CONST 8)                           ; (NIL)
28    (LIST*&PUSH 3)
30    (CONST&PUSH 9)                      ; IF
31    (CONST&PUSH 10)                     ; <
32    (CONST&PUSH 11)                     ; (LENGTH (MARGS E))
33    (LOAD&PUSH 8)
34    (LIST&PUSH 3)
36    (CONST&PUSH 12)                     ; MERROR
37    (CONST&PUSH 13)                     ; "There is no ~A element:~%~M"
38    (CONST&PUSH 7)                      ; QUOTE
39    (LOAD&PUSH 11)
40    (LIST&PUSH 2)
42    (CONST 14)                          ; (E)
43    (LIST*&PUSH 3)
45    (LIST&PUSH 3)
47    (LOAD&PUSH 7)
48    (CONST 15)                          ; ((MARGS E))
49    (CONS&PUSH)
50    (LIST 6)
52    (SKIP&RET 6)
54    L54
54    (LOAD&PUSH 2)
55    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
57    (SKIP&RET 3)


Disassembly of function #:|(MAKE-NTH SECOND 2)-79|
(CONST 0) = $SECOND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SECOND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SECOND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SECOND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SECOND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SECOND
8     (SKIP&RET 1)


Disassembly of function $SECOND
(CONST 0) = FORMAT1
(CONST 1) = $SECOND
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 2
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = SECOND
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $SECOND
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 2
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; SECOND
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1 3)                           ; MARGS
29    (CDR)
30    (CAR)
31    (SKIP&RET 2)


Disassembly of function #:|(MAKE-NTH THIRD 3)-80|
(CONST 0) = $THIRD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $THIRD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THIRD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $THIRD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $THIRD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $THIRD
8     (SKIP&RET 1)


Disassembly of function $THIRD
(CONST 0) = FORMAT1
(CONST 1) = $THIRD
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 3
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = THIRD
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
23 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $THIRD
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 3
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; THIRD
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1 3)                           ; MARGS
29    (CDR)
30    (CDR)
31    (CAR)
32    (SKIP&RET 2)


Disassembly of function #:|(MAKE-NTH FOURTH 4)-81|
(CONST 0) = $FOURTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FOURTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FOURTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FOURTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FOURTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FOURTH
8     (SKIP&RET 1)


Disassembly of function $FOURTH
(CONST 0) = FORMAT1
(CONST 1) = $FOURTH
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 4
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = FOURTH
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $FOURTH
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 4
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; FOURTH
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1 3)                           ; MARGS
29    (CDR)
30    (CDR)
31    (CDR)
32    (CAR)
33    (SKIP&RET 2)


Disassembly of function #:|(MAKE-NTH FIFTH 5)-82|
(CONST 0) = $FIFTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FIFTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FIFTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FIFTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FIFTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FIFTH
8     (SKIP&RET 1)


Disassembly of function $FIFTH
(CONST 0) = FORMAT1
(CONST 1) = $FIFTH
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 5
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = FIFTH
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $FIFTH
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 5
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; FIFTH
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1&PUSH 3)                      ; MARGS
29    (CALLS1 149)                        ; FIFTH
31    (SKIP&RET 2)


Disassembly of function #:|(MAKE-NTH SIXTH 6)-83|
(CONST 0) = $SIXTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SIXTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SIXTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SIXTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SIXTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SIXTH
8     (SKIP&RET 1)


Disassembly of function $SIXTH
(CONST 0) = FORMAT1
(CONST 1) = $SIXTH
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 6
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = SIXTH
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $SIXTH
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 6
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; SIXTH
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1&PUSH 3)                      ; MARGS
29    (CALLS1 150)                        ; SIXTH
31    (SKIP&RET 2)


Disassembly of function #:|(MAKE-NTH SEVENTH 7)-84|
(CONST 0) = $SEVENTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SEVENTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SEVENTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SEVENTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SEVENTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SEVENTH
8     (SKIP&RET 1)


Disassembly of function $SEVENTH
(CONST 0) = FORMAT1
(CONST 1) = $SEVENTH
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 7
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = SEVENTH
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $SEVENTH
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 7
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; SEVENTH
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1&PUSH 3)                      ; MARGS
29    (CALLS1 151)                        ; SEVENTH
31    (SKIP&RET 2)


Disassembly of function #:|(MAKE-NTH EIGHTH 8)-85|
(CONST 0) = $EIGHTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EIGHTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EIGHTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EIGHTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EIGHTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EIGHTH
8     (SKIP&RET 1)


Disassembly of function $EIGHTH
(CONST 0) = FORMAT1
(CONST 1) = $EIGHTH
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 8
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = EIGHTH
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $EIGHTH
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 8
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; EIGHTH
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1&PUSH 3)                      ; MARGS
29    (CALLS1 152)                        ; EIGHTH
31    (SKIP&RET 2)


Disassembly of function #:|(MAKE-NTH NINTH 9)-86|
(CONST 0) = $NINTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NINTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NINTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NINTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NINTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NINTH
8     (SKIP&RET 1)


Disassembly of function $NINTH
(CONST 0) = FORMAT1
(CONST 1) = $NINTH
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 9
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = NINTH
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $NINTH
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 9
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; NINTH
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1&PUSH 3)                      ; MARGS
29    (CALLS1 153)                        ; NINTH
31    (SKIP&RET 2)


Disassembly of function #:|(MAKE-NTH TENTH 10)-87|
(CONST 0) = $TENTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TENTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TENTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TENTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TENTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TENTH
8     (SKIP&RET 1)


Disassembly of function $TENTH
(CONST 0) = FORMAT1
(CONST 1) = $TENTH
(CONST 2) = ATOMCHK
(CONST 3) = MARGS
(CONST 4) = 10
(CONST 5) = "There is no ~A element:~%~M"
(CONST 6) = TENTH
(CONST 7) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $TENTH
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; MARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST&PUSH 4)                      ; 10
16    (CALLSR&JMPIFNOT 1 47 L26)          ; <
20    (CONST&PUSH 5)                      ; "There is no ~A element:~%~M"
21    (CONST&PUSH 6)                      ; TENTH
22    (LOAD&PUSH 3)
23    (CALL 3 7)                          ; MERROR
26    L26
26    (LOAD&PUSH 1)
27    (CALL1&PUSH 3)                      ; MARGS
29    (CALLS1 154)                        ; TENTH
31    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $REST N ...)-88|
(CONST 0) = $REST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $REST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $REST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $REST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $REST
8     (SKIP&RET 1)


Disassembly of function $REST
(CONST 0) = 2
(CONST 1) = NARG1
(CONST 2) = 0
(CONST 3) = 1
(CONST 4) = FORMAT1
(CONST 5) = $REST
(CONST 6) = ATOMCHK
(CONST 7) = WNA-ERR
(CONST 8) = FIXNUMP
(CONST 9) = "2nd argument to REST must be an integer:~%~M"
(CONST 10) = MERROR
(CONST 11) = MARGS
(CONST 12) = $PARTSWITCH
(CONST 13) = $END
(CONST 14) = "REST fell off end."
(CONST 15) = MQAPPLY
(CONST 16) = MLIST
(CONST 17) = DELSIMP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: ($PARTSWITCH)
122 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (PUSH-NIL 4)
5     (LOAD&PUSH 4)
6     (CONST&PUSH 0)                      ; 2
7     (CALLSR&JMPIFNOT 1 45 L19)          ; =
11    (CONST&PUSH 0)                      ; 2
12    (LOAD&PUSH 7)
13    (CALL2&PUSH 1)                      ; NARG1
15    (JMPIFEQTO 2 L111)                  ; 0
19    L19
19    (CONST&PUSH 3)                      ; 1
20    (LOAD&PUSH 7)
21    (CALL2&PUSH 1)                      ; NARG1
23    (CALL1 4)                           ; FORMAT1
25    (STORE 3)
26    (PUSH)
27    (CONST&PUSH 5)                      ; $REST
28    (NIL&PUSH)
29    (CALL 3 6)                          ; ATOMCHK
32    (LOAD&PUSH 4)
33    (CONST&PUSH 3)                      ; 1
34    (CALLSR&JMPIF 1 45 L69)             ; =
38    (LOAD&PUSH 4)
39    (CONST&PUSH 0)                      ; 2
40    (CALLSR&JMPIFNOT 1 45 L117)         ; =
45    (CONST&PUSH 0)                      ; 2
46    (LOAD&PUSH 7)
47    (CALL2&PUSH 1)                      ; NARG1
49    (CALL1&JMPIFNOT 8 L122)             ; FIXNUMP
53    (CONST&PUSH 0)                      ; 2
54    (LOAD&PUSH 7)
55    (CALL2 1)                           ; NARG1
57    (STORE 4)
58    (PUSH)
59    (CALLS2&JMPIFNOT 147 L69)           ; MINUSP
62    (LOAD&PUSH 4)
63    (CALLSR&STORE 0 54 4)               ; -
67    (T&STORE 0)
69    L69
69    (LOAD&PUSH 3)
70    (CALL1&PUSH 11)                     ; MARGS
72    (CALLS2&PUSH 71)                    ; LENGTH
74    (LOAD&PUSH 5)
75    (CALLSR&JMPIFNOT 1 47 L86)          ; <
79    (GETVALUE 12)                       ; $PARTSWITCH
81    (JMPIF L131)
83    (CONST&PUSH 14)                     ; "REST fell off end."
84    (CALL1 10)                          ; MERROR
86    L86
86    (LOAD&CAR&STORE 3 2)
89    (CAR&PUSH)
90    (JMPIFNOTEQTO 15 L99)               ; MQAPPLY
93    (LOAD 3)
94    (CDR)
95    (CAR)
96    (STORE 1)
97    (LOAD&CDR&STORE 3)
99    L99
99    (LOAD&CDR&STORE 3)
101   (LOAD&JMPIFNOT 0 L108)
104   (LOAD&PUSH 3)
105   (CALLS2&STORE 72 3)                 ; REVERSE
108   L108
108   (LOAD&PUSH 4)
109   (JMP L155)
111   L111
111   (CONST&PUSH 3)                      ; 1
112   (LOAD&PUSH 7)
113   (CALL2 1)                           ; NARG1
115   (SKIP&RET 7)
117   L117
117   (CONST&PUSH 5)                      ; $REST
118   (CALL1 7)                           ; WNA-ERR
120   (JMP L69)
122   L122
122   (CONST&PUSH 9)                      ; "2nd argument to REST must be an integer:~%~M"
123   (CONST&PUSH 0)                      ; 2
124   (LOAD&PUSH 8)
125   (CALL2&PUSH 1)                      ; NARG1
127   (CALL2 10)                          ; MERROR
129   (JMP L69)
131   L131
131   (CONST 13)                          ; $END
132   (SKIP&RET 7)
134   L134
134   (LOAD 2)
135   (JMP L169)
137   L137
137   (LOAD&PUSH 4)
138   (CALLS2 73)                         ; NREVERSE
140   (JMP L174)
142   L142
142   (LOAD&CAR&PUSH 3)
144   (LOAD&PUSH 2)
145   (LOAD 5)
146   (CDR)
147   (CONS)
148   (CONS)
149   (SKIP&RET 7)
151   L151
151   (LOAD&CDR&STORE 4)
153   (LOAD&DEC&STORE 0)
155   L155
155   (LOAD&PUSH 0)
156   (CALLS2&JMPIFNOT 145 L151)          ; ZEROP
159   (SKIP 1)
161   (LOAD&CAR&PUSH 2)
163   (JMPIFEQTO 16 L134)                 ; MLIST
166   (LOAD&PUSH 2)
167   (CALL1 17)                          ; DELSIMP
169   L169
169   (PUSH)
170   (LOAD&JMPIF 1 L137)
173   (LOAD 4)
174   L174
174   (CONS)
175   (STORE 3)
176   (LOAD&CAR&PUSH 2)
178   (JMPIFEQTO 15 L142)                 ; MQAPPLY
181   (LOAD 3)
182   (SKIP&RET 7)


Disassembly of function #:|(DEFMFUN $LAST (E) ...)-89|
(CONST 0) = $LAST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LAST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LAST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LAST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LAST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LAST
8     (SKIP&RET 1)


Disassembly of function $LAST
(CONST 0) = FORMAT1
(CONST 1) = $LAST
(CONST 2) = ATOMCHK
(CONST 3) = "Argument to LAST is empty."
(CONST 4) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $LAST
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (LOAD 1)
11    (CDR)
12    (JMPIF L17)
14    (CONST&PUSH 3)                      ; "Argument to LAST is empty."
15    (CALL1 4)                           ; MERROR
17    L17
17    (LOAD&PUSH 1)
18    (PUSH-UNBOUND 1)
20    (CALLS1 156)                        ; LAST
22    (CAR)
23    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ARGS (E) ...)-90|
(CONST 0) = $ARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ARGS
8     (SKIP&RET 1)


Disassembly of function $ARGS
(CONST 0) = FORMAT1
(CONST 1) = $ARGS
(CONST 2) = ATOMCHK
(CONST 3) = (MLIST)
(CONST 4) = MARGS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FORMAT1
3     (STORE 1)
4     (PUSH)
5     (CONST&PUSH 1)                      ; $ARGS
6     (NIL&PUSH)
7     (CALL 3 2)                          ; ATOMCHK
10    (CONST&PUSH 3)                      ; (MLIST)
11    (LOAD&PUSH 2)
12    (CALL1 4)                           ; MARGS
14    (CONS)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $DELETE N ...)-91|
(CONST 0) = $DELETE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DELETE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DELETE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DELETE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DELETE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DELETE
8     (SKIP&RET 1)


Disassembly of function $DELETE
(CONST 0) = 2
(CONST 1) = -1
(CONST 2) = 3
(CONST 3) = $DELETE
(CONST 4) = WNA-ERR
(CONST 5) = NARG1
(CONST 6) = FIXNUMP
(CONST 7) = "Improper 3rd argument to DELETE:~%~M"
(CONST 8) = MERROR
(CONST 9) = 1
(CONST 10) = X
(CONST 11) = SPECREPCHECK
(CONST 12) = ATOMCHK
(CONST 13) = DELSIMP
(CONST 14) = MQAPPLY
(CONST 15) = ALIKE1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
97 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 2
5     (CALLSR&JMPIF 1 45 L88)             ; =
10    (LOAD&PUSH 0)
11    (CONST&PUSH 2)                      ; 3
12    (CALLSR&JMPIFNOT 1 45 L92)          ; =
17    (CONST&PUSH 2)                      ; 3
18    (LOAD&PUSH 3)
19    (CALL2&PUSH 5)                      ; NARG1
21    (CALL1&JMPIFNOT 6 L33)              ; FIXNUMP
24    (CONST&PUSH 2)                      ; 3
25    (LOAD&PUSH 3)
26    (CALL2 5)                           ; NARG1
28    (STORE 0)
29    (PUSH)
30    (CALLS2&JMPIFNOT 147 L40)           ; MINUSP
33    L33
33    (CONST&PUSH 7)                      ; "Improper 3rd argument to DELETE:~%~M"
34    (CONST&PUSH 2)                      ; 3
35    (LOAD&PUSH 4)
36    (CALL2&PUSH 5)                      ; NARG1
38    (CALL2 8)                           ; MERROR
40    L40
40    (CONST&PUSH 9)                      ; 1
41    (LOAD&PUSH 3)
42    (CALL2&PUSH 5)                      ; NARG1
44    (CONST&PUSH 0)                      ; 2
45    (LOAD&PUSH 4)
46    (CALL2&PUSH 5)                      ; NARG1
48    (LOAD 1)
49    (BIND 10)                           ; X
51    (LOAD&PUSH 3)
52    (CALL1 11)                          ; SPECREPCHECK
54    (STORE 3)
55    (PUSH)
56    (CONST&PUSH 3)                      ; $DELETE
57    (T&PUSH)
58    (CALL 3 12)                         ; ATOMCHK
61    (GETVALUE&PUSH 10)                  ; X
63    (CALL1 11)                          ; SPECREPCHECK
65    (SETVALUE 10)                       ; X
67    (LOAD&CAR&PUSH 3)
69    (CALL1&PUSH 13)                     ; DELSIMP
71    (LOAD&CDR&PUSH 4)
73    (CALLS1 158)                        ; COPY-LIST
75    (CONS)
76    (STORE 3)
77    (NIL&PUSH)
78    (LOAD 4)
79    (CAR)
80    (CAR&PUSH)
81    (JMPIFEQTO 14 L97)                  ; MQAPPLY
84    (LOAD 4)
85    (STORE 0)
86    (JMP L108)
88    L88
88    (CONST 1)                           ; -1
89    (STORE 0)
90    (JMP L40)
92    L92
92    (CONST&PUSH 3)                      ; $DELETE
93    (CALL1 4)                           ; WNA-ERR
95    (JMP L40)
97    L97
97    (LOAD 4)
98    (JMP L127)
100   L100
100   (LOAD&DEC&STORE 6)
102   (LOAD&PUSH 0)
103   (LOAD 1)
104   (CDR)
105   (CDR&PUSH)
106   (CALLS1 170)                        ; RPLACD
108   L108
108   (LOAD 0)
109   (CDR)
110   (JMPIFNOT L131)
112   (LOAD&PUSH 6)
113   (CALLS2&JMPIF 145 L131)             ; ZEROP
116   (GETVALUE&PUSH 10)                  ; X
118   (LOAD 1)
119   (CDR)
120   (CAR&PUSH)
121   (CALL1&PUSH 11)                     ; SPECREPCHECK
123   (CALL2&JMPIF 15 L100)               ; ALIKE1
126   (LOAD 0)
127   L127
127   (CDR)
128   (STORE 0)
129   (JMP L108)
131   L131
131   (LOAD 4)
132   (SKIP 1)
134   (UNBIND1)
135   (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN $LENGTH (E) ...)-92|
(CONST 0) = $LENGTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LENGTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LENGTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LENGTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LENGTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LENGTH
8     (SKIP&RET 1)


Disassembly of function $LENGTH
(CONST 0) = $LISTP
(CONST 1) = $INFLAG
(CONST 2) = $RATP
(CONST 3) = SPECREPCHECK
(CONST 4) = $RATDISREP
(CONST 5) = "LENGTH called on atomic symbol ~:M"
(CONST 6) = MERROR
(CONST 7) = BIGFLOAT
(CONST 8) = MNEGP
(CONST 9) = 1
(CONST 10) = "LENGTH called on number ~:M"
(CONST 11) = (MTIMES MEXPT)
(CONST 12) = MEMQ
(CONST 13) = MARGS
(CONST 14) = MEXPT
(CONST 15) = ((RAT SIMP) 1 2)
(CONST 16) = ALIKE1
(CONST 17) = $SQRTDISPFLAG
(CONST 18) = 2
(CONST 19) = NFORMAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($SQRTDISPFLAG $INFLAG)
81 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L45)                 ; $LISTP
4     (GETVALUE 1)                        ; $INFLAG
6     (JMPIF L48)
8     (LOAD&PUSH 1)
9     (CALL1&JMPIFNOT 2 L48)              ; $RATP
12    (LOAD&PUSH 1)
13    (CALL1 4)                           ; $RATDISREP
15    L15
15    (STORE 1)
16    (PUSH)
17    (CALLS2&JMPIF 6 L53)                ; SYMBOLP
20    (LOAD&PUSH 1)
21    (CALLS2&JMPIF 8 L30)                ; NUMBERP
24    (LOAD 1)
25    (CAR)
26    (CAR&PUSH)
27    (JMPIFNOTEQTO 7 L82)                ; BIGFLOAT
30    L30
30    (GETVALUE 1)                        ; $INFLAG
32    (JMPIF L38)
34    (LOAD&PUSH 1)
35    (CALL1&JMPIF 8 L56)                 ; MNEGP
38    L38
38    (CONST 10)                          ; "LENGTH called on number ~:M"
39    L39
39    (PUSH)
40    (LOAD&PUSH 2)
41    (CALL2 6)                           ; MERROR
43    (SKIP&RET 2)
45    L45
45    (LOAD 1)
46    (JMP L15)
48    L48
48    (LOAD&PUSH 1)
49    (CALL1 3)                           ; SPECREPCHECK
51    (JMP L15)
53    L53
53    (CONST 5)                           ; "LENGTH called on atomic symbol ~:M"
54    (JMP L39)
56    L56
56    (CONST 9)                           ; 1
57    (SKIP&RET 2)
59    L59
59    (LOAD&PUSH 1)
60    (CALL1 13)                          ; MARGS
62    (JMP L103)
64    L64
64    (CONST 9)                           ; 1
65    (SKIP&RET 2)
67    L67
67    (LOAD 1)
68    (CDR)
69    (CDR)
70    (CAR&PUSH)
71    (CONST&PUSH 15)                     ; ((RAT SIMP) 1 2)
72    (CALL2&JMPIFNOT 16 L79)             ; ALIKE1
75    (GETVALUE 17)                       ; $SQRTDISPFLAG
77    (JMPIF L64)
79    L79
79    (CONST 18)                          ; 2
80    (SKIP&RET 2)
82    L82
82    (GETVALUE 1)                        ; $INFLAG
84    (JMPIF L59)
86    (LOAD 1)
87    (CAR)
88    (CAR&PUSH)
89    (CONST&PUSH 11)                     ; (MTIMES MEXPT)
90    (CALL2&JMPIFNOT 12 L59)             ; MEMQ
93    (LOAD 1)
94    (CAR)
95    (CAR&PUSH)
96    (JMPIFEQTO 14 L67)                  ; MEXPT
99    (LOAD&PUSH 1)
100   (CALL1 19)                          ; NFORMAT
102   (CDR)
103   L103
103   (PUSH)
104   (CALLS2 71)                         ; LENGTH
106   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ATOM (X) ...)-93|
(CONST 0) = $ATOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ATOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ATOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ATOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ATOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ATOM
8     (SKIP&RET 1)


Disassembly of function $ATOM
(CONST 0) = X
(CONST 1) = SPECREPCHECK
(CONST 2) = BIGFLOAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; SPECREPCHECK
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (CALLS2 5)                          ; ATOM
12    (JMPIF1 L20)
14    (GETVALUE 0)                        ; X
16    (CAR)
17    (CAR&PUSH)
18    (CONST 2)                           ; BIGFLOAT
19    (EQ)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $SYMBOLP (X) ...)-94|
(CONST 0) = $SYMBOLP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SYMBOLP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SYMBOLP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SYMBOLP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SYMBOLP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SYMBOLP
8     (SKIP&RET 1)


Disassembly of function $SYMBOLP
(CONST 0) = X
(CONST 1) = SPECREPCHECK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; SPECREPCHECK
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (CALLS2 6)                          ; SYMBOLP
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $NUM (E) ...)-95|
(CONST 0) = $NUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NUM
8     (SKIP&RET 1)


Disassembly of function $NUM
(CONST 0) = X
(CONST 1) = MRAT
(CONST 2) = $RATNUMER
(CONST 3) = RAT
(CONST 4) = NFORMAT
(CONST 5) = MQUOTIENT
(CONST 6) = SIMPLIFY
(CONST 7) = MMINUS
(CONST 8) = (MTIMES)
(CONST 9) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
63 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (JMPIFATOM L63)
6     (LOAD 4)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFEQTO 1 L66)                   ; MRAT
12    (LOAD 4)
13    (CAR)
14    (CAR&PUSH)
15    (JMPIFEQTO 3 L71)                   ; RAT
18    (LOAD&PUSH 4)
19    (CALL1 4)                           ; NFORMAT
21    (SETVALUE 0)                        ; X
23    (CAR)
24    (CAR&PUSH)
25    (JMPIFEQTO 5 L76)                   ; MQUOTIENT
28    (GETVALUE 0)                        ; X
30    (CAR)
31    (CAR&PUSH)
32    (JMPIFNOTEQTO 7 L82)                ; MMINUS
35    (GETVALUE 0)                        ; X
37    (CDR)
38    (CAR)
39    (SETVALUE 0)                        ; X
41    (JMPIFATOM L82)
43    (GETVALUE 0)                        ; X
45    (CAR)
46    (CAR&PUSH)
47    (JMPIFNOTEQTO 5 L82)                ; MQUOTIENT
50    (CONST&PUSH 8)                      ; (MTIMES)
51    (CONST&PUSH 9)                      ; -1
52    (GETVALUE 0)                        ; X
54    (CDR)
55    (CAR&PUSH)
56    (LIST 3)
58    L58
58    (PUSH)
59    (CALL1 6)                           ; SIMPLIFY
61    (JMP L83)
63    L63
63    (LOAD 4)
64    (JMP L83)
66    L66
66    (LOAD&PUSH 4)
67    (CALL1 2)                           ; $RATNUMER
69    (JMP L83)
71    L71
71    (LOAD 4)
72    (CDR)
73    (CAR)
74    (JMP L83)
76    L76
76    (GETVALUE 0)                        ; X
78    (CDR)
79    (CAR)
80    (JMP L58)
82    L82
82    (LOAD 4)
83    L83
83    (UNBIND1)
84    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $DENOM (E) ...)-96|
(CONST 0) = $DENOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DENOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DENOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DENOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DENOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DENOM
8     (SKIP&RET 1)


Disassembly of function $DENOM
(CONST 0) = 1
(CONST 1) = MRAT
(CONST 2) = $RATDENOM
(CONST 3) = RAT
(CONST 4) = NFORMAT
(CONST 5) = MQUOTIENT
(CONST 6) = MMINUS
(CONST 7) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
52 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L45)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L48)                   ; MRAT
9     (LOAD 1)
10    (CAR)
11    (CAR&PUSH)
12    (JMPIFEQTO 3 L53)                   ; RAT
15    (LOAD&PUSH 1)
16    (CALL1 4)                           ; NFORMAT
18    (STORE 1)
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFEQTO 5 L59)                   ; MQUOTIENT
24    (LOAD 1)
25    (CAR)
26    (CAR&PUSH)
27    (JMPIFNOTEQTO 6 L42)                ; MMINUS
30    (LOAD 1)
31    (CDR)
32    (CAR)
33    (STORE 1)
34    (JMPIFATOM L42)
36    (LOAD 1)
37    (CAR)
38    (CAR&PUSH)
39    (JMPIFEQTO 5 L59)                   ; MQUOTIENT
42    L42
42    (CONST 0)                           ; 1
43    (SKIP&RET 2)
45    L45
45    (CONST 0)                           ; 1
46    (SKIP&RET 2)
48    L48
48    (LOAD&PUSH 1)
49    (CALL1 2)                           ; $RATDENOM
51    (SKIP&RET 2)
53    L53
53    (LOAD 1)
54    (CDR)
55    (CDR)
56    (CAR)
57    (SKIP&RET 2)
59    L59
59    (LOAD 1)
60    (CDR)
61    (CDR)
62    (CAR&PUSH)
63    (CALL1 7)                           ; SIMPLIFY
65    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $FIX (E) ...)-97|
(CONST 0) = $FIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FIX
8     (SKIP&RET 1)


Disassembly of function $FIX
(CONST 0) = $ENTIER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; $ENTIER
3     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ENTIER (E) ...)-98|
(CONST 0) = $ENTIER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ENTIER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ENTIER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ENTIER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ENTIER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ENTIER
8     (SKIP&RET 1)


Disassembly of function $ENTIER
(CONST 0) = SPECREPCHECK
(CONST 1) = FIX
(CONST 2) = RATNUMP
(CONST 3) = QUOT
(CONST 4) = $BFLOATP
(CONST 5) = FPENTIER
(CONST 6) = SUB
(CONST 7) = ZEROP1
(CONST 8) = ($ENTIER)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
49 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; SPECREPCHECK
3     (LOAD&PUSH 0)
4     (CALLS2&JMPIF 8 L37)                ; NUMBERP
7     (LOAD&PUSH 0)
8     (CALL1&JMPIF 2 L42)                 ; RATNUMP
11    (LOAD&PUSH 0)
12    (CALL1&JMPIFNOT 4 L61)              ; $BFLOATP
15    (LOAD&PUSH 0)
16    (CALL1 5)                           ; FPENTIER
18    (STORE 2)
19    (LOAD 0)
20    (CDR)
21    (CAR&PUSH)
22    (CALLS2&JMPIFNOT 147 L58)           ; MINUSP
25    (LOAD&PUSH 2)
26    (LOAD&PUSH 1)
27    (CALL2&PUSH 6)                      ; SUB
29    (CALL1&JMPIF 7 L58)                 ; ZEROP1
32    L32
32    (LOAD&PUSH 2)
33    (CALLS2 151)                        ; 1-
35    (SKIP&RET 3)
37    L37
37    (LOAD&PUSH 0)
38    (CALL1 1)                           ; FIX
40    (SKIP&RET 3)
42    L42
42    (LOAD 0)
43    (CDR)
44    (CAR&PUSH)
45    (LOAD 1)
46    (CDR)
47    (CDR)
48    (CAR&PUSH)
49    (CALL2 3)                           ; QUOT
51    (STORE 2)
52    (LOAD 0)
53    (CDR)
54    (CAR&PUSH)
55    (CALLS2&JMPIF 147 L32)              ; MINUSP
58    L58
58    (LOAD 2)
59    (SKIP&RET 3)
61    L61
61    (CONST&PUSH 8)                      ; ($ENTIER)
62    (LOAD&PUSH 3)
63    (LIST 2)
65    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $FLOAT (E) ...)-99|
(CONST 0) = $FLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FLOAT
8     (SKIP&RET 1)


Disassembly of function $FLOAT
(CONST 0) = 1.0
(CONST 1) = $NUMER
(CONST 2) = MGET
(CONST 3) = ARRAY
(CONST 4) = MEMQ
(CONST 5) = RAT
(CONST 6) = FPCOFRAT
(CONST 7) = BIGFLOAT
(CONST 8) = FP2FLO
(CONST 9) = (MEXPT MNCEXPT)
(CONST 10) = $FLOAT
(CONST 11) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
68 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L51)                ; NUMBERP
4     (LOAD&PUSH 1)
5     (CALLS2&JMPIFNOT 6 L15)             ; SYMBOLP
8     (LOAD&PUSH 1)
9     (CONST&PUSH 1)                      ; $NUMER
10    (CALL2 2)                           ; MGET
12    (JMPIF1 L89)
15    L15
15    (LOAD 1)
16    (JMPIFATOM L57)
18    (CONST&PUSH 3)                      ; ARRAY
19    (LOAD 2)
20    (CAR)
21    (CDR&PUSH)
22    (CALL2&JMPIF 4 L57)                 ; MEMQ
25    (LOAD 1)
26    (CAR)
27    (CAR&PUSH)
28    (JMPIFEQTO 5 L60)                   ; RAT
31    (LOAD 1)
32    (CAR)
33    (CAR&PUSH)
34    (JMPIFEQTO 7 L65)                   ; BIGFLOAT
37    (LOAD 1)
38    (CAR)
39    (CAR&PUSH)
40    (CONST&PUSH 9)                      ; (MEXPT MNCEXPT)
41    (CALL2&JMPIF 4 L70)                 ; MEMQ
44    (CONST&SYMBOL-FUNCTION&PUSH 10)     ; $FLOAT
46    (LOAD&PUSH 2)
47    (CALL2 11)                          ; RECUR-APPLY
49    (SKIP&RET 2)
51    L51
51    (LOAD&PUSH 1)
52    (CONST&PUSH 0)                      ; 1.0
53    (CALLS2 174)                        ; COMMON-LISP:FLOAT
55    (SKIP&RET 2)
57    L57
57    (LOAD 1)
58    (SKIP&RET 2)
60    L60
60    (LOAD&PUSH 1)
61    (CALL1 6)                           ; FPCOFRAT
63    (SKIP&RET 2)
65    L65
65    (LOAD&PUSH 1)
66    (CALL1 8)                           ; FP2FLO
68    (SKIP&RET 2)
70    L70
70    (LOAD 1)
71    (CAR)
72    (CAR&PUSH)
73    (NIL)
74    (CONS&PUSH)
75    (LOAD 2)
76    (CDR)
77    (CAR&PUSH)
78    (JSR&PUSH L0)
81    (LOAD 3)
82    (CDR)
83    (CDR)
84    (CAR&PUSH)
85    (LIST 3)
87    (SKIP&RET 2)
89    L89
89    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $COEFF N ...)-100|
(CONST 0) = $COEFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $COEFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $COEFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $COEFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $COEFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $COEFF
8     (SKIP&RET 1)


Disassembly of function $COEFF
(CONST 0) = 3
(CONST 1) = NARG1
(CONST 2) = 0
(CONST 3) = 1
(CONST 4) = 2
(CONST 5) = COEFF
(CONST 6) = POWER
(CONST 7) = $COEFF
(CONST 8) = WNA-ERR
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
51 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 3
5     (CALLSR&JMPIF 1 45 L44)             ; =
9     (LOAD&PUSH 0)
10    (CONST&PUSH 4)                      ; 2
11    (CALLSR&JMPIFNOT 1 45 L68)          ; =
15    (CONST&PUSH 3)                      ; 1
16    (LOAD&PUSH 3)
17    (CALL2&PUSH 1)                      ; NARG1
19    (CONST&PUSH 4)                      ; 2
20    (LOAD&PUSH 4)
21    (CALL2&PUSH 1)                      ; NARG1
23    (CONST 3)                           ; 1
24    L24
24    (PUSH)
25    (CALL 3 5)                          ; COEFF
28    (SKIP&RET 3)
30    L30
30    (CONST&PUSH 3)                      ; 1
31    (LOAD&PUSH 3)
32    (CALL2&PUSH 1)                      ; NARG1
34    (CONST&PUSH 4)                      ; 2
35    (LOAD&PUSH 4)
36    (CALL2&PUSH 1)                      ; NARG1
38    (CONST&PUSH 0)                      ; 3
39    (LOAD&PUSH 5)
40    (CALL2 1)                           ; NARG1
42    (JMP L24)
44    L44
44    (CONST&PUSH 0)                      ; 3
45    (LOAD&PUSH 3)
46    (CALL2&PUSH 1)                      ; NARG1
48    (JMPIFEQTO 2 L30)                   ; 0
51    (CONST&PUSH 3)                      ; 1
52    (LOAD&PUSH 3)
53    (CALL2&PUSH 1)                      ; NARG1
55    (CONST&PUSH 4)                      ; 2
56    (LOAD&PUSH 4)
57    (CALL2&PUSH 1)                      ; NARG1
59    (CONST&PUSH 0)                      ; 3
60    (LOAD&PUSH 5)
61    (CALL2&PUSH 1)                      ; NARG1
63    (CALL2&PUSH 6)                      ; POWER
65    (CONST 3)                           ; 1
66    (JMP L24)
68    L68
68    (CONST&PUSH 7)                      ; $COEFF
69    (CALL1 8)                           ; WNA-ERR
71    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN COEFF (E VAR POW) ...)-101|
(CONST 0) = COEFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COEFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COEFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COEFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COEFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COEFF
8     (SKIP&RET 1)


Disassembly of function COEFF
(CONST 0) = ALIKE1
(CONST 1) = 1
(CONST 2) = 0
(CONST 3) = MEXPT
(CONST 4) = MPLUS
(CONST 5) = MBAGP
(CONST 6) = (MPLUS)
(CONST 7) = MRAT
(CONST 8) = RATCOEFF
(CONST 9) = FREE
(CONST 10) = MTIMES
(CONST 11) = POWER
(CONST 12) = MEMALIKE
(CONST 13) = $DELETE
(CONST 14) = SIMPLIFY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
146 byte-code instructions:
0     L0
0     (LOAD&PUSH 3)
1     (LOAD&PUSH 3)
2     (CALL2&JMPIF 0 L55)                 ; ALIKE1
5     (LOAD 3)
6     (JMPIFATOM L65)
8     (LOAD 3)
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 3 L93)                   ; MEXPT
15    (LOAD 3)
16    (CAR)
17    (CAR&PUSH)
18    (JMPIFEQTO 4 L110)                  ; MPLUS
22    (LOAD&PUSH 3)
23    (CALL1&JMPIF 5 L110)                ; MBAGP
27    (LOAD 3)
28    (CAR)
29    (CAR&PUSH)
30    (JMPIFEQTO 7 L153)                  ; MRAT
34    (LOAD&PUSH 1)
35    (JMPIFEQTO 2 L166)                  ; 0
39    (LOAD 3)
40    (CAR)
41    (CAR&PUSH)
42    (JMPIFEQTO 10 L189)                 ; MTIMES
46    (CONST 2)                           ; 0
47    L47
47    (PUSH)
48    (CALL1 14)                          ; SIMPLIFY
50    (SKIP&RET 4)
52    L52
52    (CONST 1)                           ; 1
53    (JMP L47)
55    L55
55    (LOAD&PUSH 1)
56    (JMPIFEQTO 1 L52)                   ; 1
59    (CONST 2)                           ; 0
60    (JMP L47)
62    L62
62    (LOAD 3)
63    (JMP L47)
65    L65
65    (LOAD&PUSH 1)
66    (JMPIFEQTO 2 L62)                   ; 0
69    (CONST 2)                           ; 0
70    (JMP L47)
72    L72
72    (CONST 2)                           ; 0
73    (JMP L47)
75    L75
75    (LOAD&PUSH 1)
76    (JMPIFEQTO 2 L72)                   ; 0
79    (LOAD 3)
80    (CDR)
81    (CDR)
82    (CAR&PUSH)
83    (LOAD&PUSH 2)
84    (CALL2&JMPIFNOT 0 L72)              ; ALIKE1
87    (CONST 1)                           ; 1
88    (JMP L47)
90    L90
90    (LOAD 3)
91    (JMP L47)
93    L93
93    (LOAD 3)
94    (CDR)
95    (CAR&PUSH)
96    (LOAD&PUSH 3)
97    (CALL2&JMPIF 0 L75)                 ; ALIKE1
100   (LOAD&PUSH 1)
101   (JMPIFEQTO 2 L90)                   ; 0
104   (CONST 2)                           ; 0
105   (JMP L47)
107   L107
107   (CONST 6)                           ; (MPLUS)
108   (JMP L118)
110   L110
110   (LOAD 3)
111   (CAR)
112   (CAR&PUSH)
113   (JMPIFEQTO 4 L107)                  ; MPLUS
116   (LOAD 3)
117   (CAR)
118   L118
118   (PUSH)
119   (NIL&PUSH)
120   (LOAD&CDR&PUSH 5)
122   (JMP L138)
124   L124
124   (LOAD&CAR&PUSH 0)
126   (LOAD&PUSH 0)
127   (LOAD&PUSH 7)
128   (LOAD&PUSH 7)
129   (JSR&PUSH L0)
132   (LOAD&CONS&STORE 2)
134   (SKIP 1)
136   (LOAD&CDR&STORE 0)
138   L138
138   (LOAD&PUSH 0)
139   (CALLS1&JMPIFNOT 146 L124)          ; ENDP
142   (SKIP 1)
144   (LOAD&PUSH 0)
145   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
147   (SKIP 1)
149   (CONS)
150   (JMP L47)
153   L153
153   (LOAD&PUSH 3)
154   (LOAD&PUSH 3)
155   (LOAD&PUSH 3)
156   (CALL 3 8)                          ; RATCOEFF
159   (JMP L47)
162   L162
162   (LOAD 3)
163   (JMP L47)
166   L166
166   (LOAD&PUSH 3)
167   (LOAD&PUSH 3)
168   (CALL2&JMPIF 9 L162)                ; FREE
171   (CONST 2)                           ; 0
172   (JMP L47)
175   L175
175   (LOAD 2)
176   (JMP L197)
178   L178
178   (LOAD&PUSH 0)
179   (LOAD&PUSH 5)
180   (CONST&PUSH 1)                      ; 1
181   (CALL 3 13)                         ; $DELETE
184   (SKIP 1)
186   (JMP L47)
189   L189
189   (LOAD&PUSH 1)
190   (JMPIFEQTO 1 L175)                  ; 1
193   (LOAD&PUSH 2)
194   (LOAD&PUSH 2)
195   (CALL2 11)                          ; POWER
197   L197
197   (PUSH)
198   (LOAD&PUSH 0)
199   (LOAD&CDR&PUSH 5)
201   (CALL2&JMPIF 12 L178)               ; MEMALIKE
204   (CONST 2)                           ; 0
205   (SKIP 1)
207   (JMP L47)


Disassembly of function #:|(DECLARE-TOP (SPECIAL POWERS VAR ...))-102|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $HIPOW (E VAR) ...)-103|
(CONST 0) = $HIPOW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $HIPOW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HIPOW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $HIPOW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $HIPOW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $HIPOW
8     (SKIP&RET 1)


Disassembly of function $HIPOW
(CONST 0) = VAR
(CONST 1) = FINDPOWERS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 5)
4     (T&PUSH)
5     (CALL2 1)                           ; FINDPOWERS
7     (UNBIND1)
8     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $LOPOW (E VAR) ...)-104|
(CONST 0) = $LOPOW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LOPOW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LOPOW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LOPOW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LOPOW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LOPOW
8     (SKIP&RET 1)


Disassembly of function $LOPOW
(CONST 0) = VAR
(CONST 1) = FINDPOWERS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 5)
4     (NIL&PUSH)
5     (CALL2 1)                           ; FINDPOWERS
7     (UNBIND1)
8     (SKIP&RET 3)


Disassembly of function #:|(DEFUN FINDPOWERS (E HIFLG) ...)-105|
(CONST 0) = FINDPOWERS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDPOWERS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDPOWERS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDPOWERS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDPOWERS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDPOWERS
8     (SKIP&RET 1)


Disassembly of function FINDPOWERS
(CONST 0) = HIFLG
(CONST 1) = POWERS
(CONST 2) = NUM
(CONST 3) = FLAG
(CONST 4) = FINDPOWERS1
(CONST 5) = 0
(CONST 6) = $MAX
(CONST 7) = $MIN
(CONST 8) = MAXIMIN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (HIFLG NUM POWERS)
writes special variable : (POWERS)
40 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; HIFLG
3     (NIL)
4     (BIND 1)                            ; POWERS
6     (NIL)
7     (BIND 2)                            ; NUM
9     (NIL)
10    (BIND 3)                            ; FLAG
12    (LOAD&PUSH 14)
13    (CALL1 4)                           ; FINDPOWERS1
15    (GETVALUE 1)                        ; POWERS
17    (JMPIFNOT L46)
19    (GETVALUE 2)                        ; NUM
21    (JMPIFNOT L29)
23    (PUSH)
24    (GETVALUE 1)                        ; POWERS
26    (CONS)
27    (SETVALUE 1)                        ; POWERS
29    L29
29    (GETVALUE&PUSH 1)                   ; POWERS
31    (GETVALUE 0)                        ; HIFLG
33    (JMPIF L54)
35    (CONST 7)                           ; $MIN
36    L36
36    (PUSH)
37    (CALL2 8)                           ; MAXIMIN
39    L39
39    (UNBIND 4)
41    (SKIP&RET 3)
43    L43
43    (CONST 5)                           ; 0
44    (JMP L39)
46    L46
46    (GETVALUE 2)                        ; NUM
48    (JMPIFNOT L43)
50    (GETVALUE 2)                        ; NUM
52    (JMP L39)
54    L54
54    (CONST 6)                           ; $MAX
55    (JMP L36)


Disassembly of function #:|(DEFUN FINDPOWERS1 (E) ...)-106|
(CONST 0) = FINDPOWERS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDPOWERS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDPOWERS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDPOWERS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDPOWERS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDPOWERS1
8     (SKIP&RET 1)


Disassembly of function FINDPOWERS1
(CONST 0) = VAR
(CONST 1) = ALIKE1
(CONST 2) = 1
(CONST 3) = CHECKPOW
(CONST 4) = MPLUS
(CONST 5) = FREEL
(CONST 6) = FLAG
(CONST 7) = 0
(CONST 8) = MEXPT
(CONST 9) = SPECREPP
(CONST 10) = SPECDISREP
(CONST 11) = FINDPOWERS1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG VAR)
writes special variable : (FLAG)
68 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (GETVALUE&PUSH 0)                   ; VAR
3     (CALL2&JMPIF 1 L42)                 ; ALIKE1
6     (LOAD&PUSH 1)
7     (CALLS2 5)                          ; ATOM
9     (JMPIF1 L103)
12    (LOAD 1)
13    (CAR)
14    (CAR&PUSH)
15    (JMPIFEQTO 4 L72)                   ; MPLUS
18    (LOAD 1)
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFNOTEQTO 8 L90)                ; MEXPT
25    (LOAD 1)
26    (CDR)
27    (CAR&PUSH)
28    (GETVALUE&PUSH 0)                   ; VAR
30    (CALL2&JMPIFNOT 1 L90)              ; ALIKE1
33    (LOAD 1)
34    (CDR)
35    (CDR)
36    (CAR)
37    L37
37    (PUSH)
38    (CALL1 3)                           ; CHECKPOW
40    (SKIP&RET 2)
42    L42
42    (CONST 2)                           ; 1
43    (JMP L37)
45    L45
45    (LOAD&CDR&PUSH 1)
47    (LOAD&JMPIFNOT 0 L69)
50    L50
50    (NIL)
51    (SETVALUE 6)                        ; FLAG
53    (LOAD&CAR&PUSH 0)
55    (JSR L0)
57    (GETVALUE 6)                        ; FLAG
59    (JMPIF L64)
61    (CONST&PUSH 7)                      ; 0
62    (CALL1 3)                           ; CHECKPOW
64    L64
64    (LOAD&CDR&STORE 0)
66    (LOAD&JMPIF 0 L50)
69    L69
69    (NIL)
70    (SKIP&RET 3)
72    L72
72    (LOAD&CDR&PUSH 1)
74    (GETVALUE&PUSH 0)                   ; VAR
76    (CALL2&JMPIFNOT 5 L45)              ; FREEL
79    (NIL)
80    (SKIP&RET 2)
82    L82
82    (LOAD&PUSH 1)
83    (CALL1&PUSH 10)                     ; SPECDISREP
85    (JMPTAIL 1 3 L0)
90    L90
90    (LOAD&PUSH 1)
91    (CALL1&JMPIF 9 L82)                 ; SPECREPP
94    (CONST&SYMBOL-FUNCTION&PUSH 11)     ; FINDPOWERS1
96    (LOAD&CDR&PUSH 2)
98    (CALLSR 0 24)                       ; MAPC
101   (SKIP&RET 2)
103   L103
103   (SKIP&RET 2)


Disassembly of function #:|(DEFUN CHECKPOW (POW) ...)-107|
(CONST 0) = CHECKPOW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKPOW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKPOW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKPOW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKPOW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKPOW
8     (SKIP&RET 1)


Disassembly of function CHECKPOW
(CONST 0) = FLAG
(CONST 1) = POWERS
(CONST 2) = NUM
(CONST 3) = HIFLG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (POWERS HIFLG NUM)
writes special variables : (POWERS NUM FLAG)
30 byte-code instructions:
0     (T)
1     (SETVALUE 0)                        ; FLAG
3     (LOAD&PUSH 1)
4     (CALLS2&JMPIFNOT 8 L28)             ; NUMBERP
7     (GETVALUE 2)                        ; NUM
9     (JMPIFNOT L23)
11    (GETVALUE 3)                        ; HIFLG
13    (JMPIFNOT L36)
15    (LOAD&PUSH 1)
16    (GETVALUE&PUSH 2)                   ; NUM
18    (CALLSR 1 48)                       ; >
21    (JMPIFNOT1 L46)
23    L23
23    (LOAD 1)
24    (SETVALUE 2)                        ; NUM
26    (SKIP&RET 2)
28    L28
28    (LOAD&PUSH 1)
29    (GETVALUE 1)                        ; POWERS
31    (CONS)
32    (SETVALUE 1)                        ; POWERS
34    (SKIP&RET 2)
36    L36
36    (LOAD&PUSH 1)
37    (GETVALUE&PUSH 2)                   ; NUM
39    (CALLSR&JMPIF 1 47 L23)             ; <
43    (NIL)
44    (SKIP&RET 2)
46    L46
46    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL POWERS VAR ...))-108|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (NOTYPE I N ...))-109|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/comm.fas
Wrote file /cygdrive/e/temp/maxima/src/comm.lis