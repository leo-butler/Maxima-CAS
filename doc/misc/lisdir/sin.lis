Listing of compilation of file /cygdrive/e/temp/maxima/src/sin.lisp
on 2002-12-17 13:34:39 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/sin.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE SIN)-2|
(CONST 0) = SIN
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIN
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL RATFORM EXPTSUM ...) (*EXPR POWERLIST RATROOT) ...)-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $INTEGRATION_CONSTANT_COUNTER 0)-4-1|
(CONST 0) = $INTEGRATION_CONSTANT_COUNTER
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGRATION_CONSTANT_COUNTER
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $INTEGRATION_CONSTANT_COUNTER
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 0
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $INTEGRATION_CONSTANT_COUNTER 0)-4-2|
(CONST 0) = (SPECIAL $INTEGRATION_CONSTANT_COUNTER)
(CONST 1) = $INTEGRATION_CONSTANT_COUNTER
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $INTEGRATION_CONSTANT_COUNTER
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $INTEGRATION_CONSTANT_COUNTER
8     (CONST&PUSH 2)                      ; 0
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $INTEGRATION_CONSTANT_COUNTER
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SASSQ1 (ARG LIST FN) ...)-5|
(CONST 0) = SASSQ1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SASSQ1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SASSQ1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SASSQ1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SASSQ1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SASSQ1
8     (SKIP&RET 1)


Disassembly of function SASSQ1
(CONST 0) = ARG
(CONST 1) = FN
(CONST 2) = ZL-ASSOC
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FN ARG)
13 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; ARG
3     (LOAD 4)
4     (BIND 1)                            ; FN
6     (GETVALUE&PUSH 0)                   ; ARG
8     (LOAD&PUSH 9)
9     (CALL2 2)                           ; ZL-ASSOC
11    (JMPIF1 L17)
13    (GETVALUE&PUSH 1)                   ; FN
15    (FUNCALL 0)
17    L17
17    (UNBIND 2)
19    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO OP (FROB) ...)-6|
(CONST 0) = OP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; OP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; OP
10    (SKIP&RET 1)


Disassembly of function OP
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = GET
(CONST 3) = ('OPERATORS)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L18)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; GET
12    (LOAD&PUSH 1)
13    (CONST 3)                           ; ('OPERATORS)
14    (LIST* 2)
16    (SKIP&RET 4)
18    L18
18    (LOAD&PUSH 2)
19    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
21    (SKIP&RET 3)


Disassembly of function #:|(DEFUN INTEGERP1 (X) ...)-7|
(CONST 0) = INTEGERP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEGERP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEGERP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEGERP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEGERP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEGERP1
8     (SKIP&RET 1)


Disassembly of function INTEGERP1
(CONST 0) = X
(CONST 1) = 2
(CONST 2) = MUL2*
(CONST 3) = INTEGERP2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 2
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2&PUSH 2)                      ; MUL2*
8     (CALL1 3)                           ; INTEGERP2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUPEREXPT (EXP VAR BASE*) ...)-8|
(CONST 0) = SUPEREXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUPEREXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUPEREXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUPEREXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUPEREXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUPEREXPT
8     (SKIP&RET 1)


Disassembly of function SUPEREXPT
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = BASE*
(CONST 3) = EXPTFLAG
(CONST 4) = Y
(CONST 5) = W
(CONST 6) = ELEMXPT
(CONST 7) = (MEXPT)
(CONST 8) = SIMPLOG
(CONST 9) = MUL2
(CONST 10) = DIV
(CONST 11) = INTEGRATOR
(CONST 12) = SUBSTINT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y VAR BASE* EXPTFLAG EXP)
writes special variable : (Y)
40 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (LOAD 7)
7     (BIND 2)                            ; BASE*
9     (NIL)
10    (BIND 3)                            ; EXPTFLAG
12    (NIL)
13    (BIND 4)                            ; Y
15    (NIL)
16    (BIND 5)                            ; W
18    (GETVALUE&PUSH 0)                   ; EXP
20    (CALL1 6)                           ; ELEMXPT
22    (SETVALUE 4)                        ; Y
24    (GETVALUE 3)                        ; EXPTFLAG
26    (JMPIF L64)
28    (CONST&PUSH 7)                      ; (MEXPT)
29    (GETVALUE&PUSH 2)                   ; BASE*
31    (GETVALUE&PUSH 1)                   ; VAR
33    (LIST&PUSH 3)
35    (GETVALUE&PUSH 1)                   ; VAR
37    (GETVALUE&PUSH 4)                   ; Y
39    (GETVALUE&PUSH 1)                   ; VAR
41    (GETVALUE&PUSH 2)                   ; BASE*
43    (LIST&PUSH 1)
45    (CALL1&PUSH 8)                      ; SIMPLOG
47    (CALL2&PUSH 9)                      ; MUL2
49    (CALL2&PUSH 10)                     ; DIV
51    (GETVALUE&PUSH 1)                   ; VAR
53    (CALL2&PUSH 11)                     ; INTEGRATOR
55    (CALL 3 12)                         ; SUBSTINT
58    (UNBIND 3)
60    L60
60    (UNBIND 3)
62    (SKIP&RET 4)
64    L64
64    (NIL)
65    (UNBIND 3)
67    (JMP L60)


Disassembly of function #:|(DEFUN ELEMXPT (EXP) ...)-9|
(CONST 0) = ELEMXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELEMXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELEMXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELEMXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELEMXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELEMXPT
8     (SKIP&RET 1)


Disassembly of function ELEMXPT
(CONST 0) = EXP
(CONST 1) = FREEVAR
(CONST 2) = EXPTFLAG
(CONST 3) = MEXPT
(CONST 4) = C
(CONST 5) = (MEXPT)
(CONST 6) = BASE*
(CONST 7) = (MEXPT)
(CONST 8) = (MTIMES)
(CONST 9) = (MEXPT)
(CONST 10) = (%LOG)
(CONST 11) = -1
(CONST 12) = (%LOG)
(CONST 13) = SIMPLIFY
(CONST 14) = ((MPLUS) ((COEFFPT) (A FREEVAR) (VAR VARP)) ((COEFFPT) (B FREEVAR)))
(CONST 15) = M2
(CONST 16) = W
(CONST 17) = ((MTIMES) ((MEXPT) BASE* B) ((MEXPT) VAR A))
(CONST 18) = SUBLISS
(CONST 19) = MAXIMA-SUBSTITUTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W C BASE* EXP)
writes special variables : (EXPTFLAG W)
116 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1&JMPIF 1 L69)                 ; FREEVAR
8     (GETVALUE 0)                        ; EXP
10    (JMPIFATOM L74)
12    (GETVALUE 0)                        ; EXP
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFNOTEQTO 3 L80)                ; MEXPT
19    (GETVALUE 0)                        ; EXP
21    (CDR)
22    (CAR&PUSH)
23    (CALL1&JMPIFNOT 1 L121)             ; FREEVAR
27    (GETVALUE 0)                        ; EXP
29    (CDR)
30    (CAR&PUSH)
31    (GETVALUE 6)                        ; BASE*
33    (JMPIFNOTEQ L132)
36    (GETVALUE 0)                        ; EXP
38    (CDR)
39    (CDR)
40    (CAR&PUSH)
41    (CONST&PUSH 14)                     ; ((MPLUS) (# # #) (# #))
42    (NIL&PUSH)
43    (CALL 3 15)                         ; M2
46    (SETVALUE 16)                       ; W
48    (JMPIF L168)
51    (GETVALUE 0)                        ; EXP
53    (CAR&PUSH)
54    (GETVALUE 6)                        ; BASE*
56    L56
56    (PUSH)
57    (GETVALUE 0)                        ; EXP
59    (CDR)
60    (CDR)
61    (CAR&PUSH)
62    (JSR&PUSH L0)
64    (LIST 3)
66    (JMP L179)
69    L69
69    (GETVALUE 0)                        ; EXP
71    (JMP L179)
74    L74
74    (T)
75    (SETVALUE 2)                        ; EXPTFLAG
77    (JMP L179)
80    L80
80    (GETVALUE 0)                        ; EXP
82    (CAR&PUSH)
83    (NIL&PUSH)
84    (GETVALUE 0)                        ; EXP
86    (CDR&PUSH)
87    (JMP L107)
89    L89
89    (LOAD&CAR&PUSH 0)
91    (LOAD 0)
92    (BIND 4)                            ; C
94    (GETVALUE&PUSH 4)                   ; C
96    (JSR L0)
99    (UNBIND1)
100   (PUSH)
101   (LOAD&CONS&STORE 2)
103   (SKIP 1)
105   (LOAD&CDR&STORE 0)
107   L107
107   (LOAD&PUSH 0)
108   (CALLS1&JMPIFNOT 146 L89)           ; ENDP
111   (SKIP 1)
113   (LOAD&PUSH 0)
114   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
116   (SKIP 1)
118   (CONS)
119   (JMP L179)
121   L121
121   (CONST&PUSH 5)                      ; (MEXPT)
122   (GETVALUE 0)                        ; EXP
124   (CDR)
125   (CAR&PUSH)
126   (JSR L0)
129   (JMP L56)
132   L132
132   (CONST&PUSH 7)                      ; (MEXPT)
133   (GETVALUE&PUSH 6)                   ; BASE*
135   (CONST&PUSH 8)                      ; (MTIMES)
136   (CONST&PUSH 9)                      ; (MEXPT)
137   (CONST&PUSH 10)                     ; (%LOG)
138   (GETVALUE&PUSH 6)                   ; BASE*
140   (LIST&PUSH 2)
142   (CONST&PUSH 11)                     ; -1
143   (LIST&PUSH 3)
145   (CONST&PUSH 12)                     ; (%LOG)
146   (GETVALUE 0)                        ; EXP
148   (CDR)
149   (CAR&PUSH)
150   (LIST&PUSH 2)
152   (GETVALUE 0)                        ; EXP
154   (CDR)
155   (CDR)
156   (CAR&PUSH)
157   (LIST&PUSH 4)
159   (CALL1&PUSH 13)                     ; SIMPLIFY
161   (LIST&PUSH 3)
163   (JSR L0)
166   (JMP L179)
168   L168
168   (GETVALUE&PUSH 6)                   ; BASE*
170   (CONST&PUSH 6)                      ; BASE*
171   (GETVALUE&PUSH 16)                  ; W
173   (CONST&PUSH 17)                     ; ((MTIMES) (# BASE* B) (# VAR A))
174   (CALL2&PUSH 18)                     ; SUBLISS
176   (CALL 3 19)                         ; MAXIMA-SUBSTITUTE
179   L179
179   (UNBIND1)
180   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUBST10 (EX) ...)-10|
(CONST 0) = SUBST10
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBST10>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBST10
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBST10
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBST10>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBST10
8     (SKIP&RET 1)


Disassembly of function SUBST10
(CONST 0) = MEXPT
(CONST 1) = VAR
(CONST 2) = (MEXPT)
(CONST 3) = D
(CONST 4) = QUOT
(CONST 5) = INTEGERP2
(CONST 6) = C
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C D VAR)
56 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L26)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 0 L16)                ; MEXPT
9     (LOAD 1)
10    (CDR)
11    (CAR&PUSH)
12    (GETVALUE 1)                        ; VAR
14    (JMPIFEQ L29)
16    L16
16    (LOAD 1)
17    (CAR)
18    (CAR&PUSH)
19    (NIL)
20    (CONS&PUSH)
21    (NIL&PUSH)
22    (LOAD&CDR&PUSH 3)
24    (JMP L63)
26    L26
26    (LOAD 1)
27    (SKIP&RET 2)
29    L29
29    (CONST&PUSH 2)                      ; (MEXPT)
30    (GETVALUE&PUSH 1)                   ; VAR
32    (LOAD 3)
33    (CDR)
34    (CDR)
35    (CAR&PUSH)
36    (GETVALUE&PUSH 3)                   ; D
38    (CALL2&PUSH 4)                      ; QUOT
40    (CALL1&PUSH 5)                      ; INTEGERP2
42    (LIST 3)
44    (SKIP&RET 2)
46    L46
46    (LOAD&CAR&PUSH 0)
48    (LOAD 0)
49    (BIND 6)                            ; C
51    (GETVALUE&PUSH 6)                   ; C
53    (JSR L0)
55    (UNBIND1)
56    (PUSH)
57    (LOAD&CONS&STORE 2)
59    (SKIP 1)
61    (LOAD&CDR&STORE 0)
63    L63
63    (LOAD&PUSH 0)
64    (CALLS1&JMPIFNOT 146 L46)           ; ENDP
67    (SKIP 1)
69    (LOAD&PUSH 0)
70    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
72    (SKIP 1)
74    (CONS)
75    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CHOICESIN (X1 X2) ...)-11|
(CONST 0) = CHOICESIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHOICESIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHOICESIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHOICESIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHOICESIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHOICESIN
8     (SKIP&RET 1)


Disassembly of function CHOICESIN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     L0
0     (LOAD&PUSH 2)
1     (LOAD 2)
2     (CAR)
3     (JMPIFEQ L15)
5     (LOAD&CAR&PUSH 1)
7     (LOAD&PUSH 3)
8     (LOAD&CDR&PUSH 3)
10    (JSR L0)
12    (CONS)
13    (SKIP&RET 3)
15    L15
15    (LOAD 1)
16    (CDR)
17    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RATIONALIZER (X) ...)-12|
(CONST 0) = RATIONALIZER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATIONALIZER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATIONALIZER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATIONALIZER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATIONALIZER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATIONALIZER
8     (SKIP&RET 1)


Disassembly of function RATIONALIZER
(CONST 0) = X
(CONST 1) = $FACTOR
(CONST 2) = SIMPLIFY
(CONST 3) = ALIKE1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&PUSH 1)                      ; $FACTOR
7     (CALL1&PUSH 2)                      ; SIMPLIFY
9     (LOAD&PUSH 0)
10    (GETVALUE&PUSH 0)                   ; X
12    (CALL2 3)                           ; ALIKE1
14    (NOT)
15    (JMPIFNOT1 L20)
17    (POP)
18    (JMP L22)
20    L20
20    (SKIP 1)
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTFORM (EXPRES) ...)-13|
(CONST 0) = INTFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTFORM
8     (SKIP&RET 1)


Disassembly of function INTFORM
(CONST 0) = EXPRES
(CONST 1) = FREEVAR
(CONST 2) = (MPLUS MTIMES)
(CONST 3) = MEMQ
(CONST 4) = L
(CONST 5) = Y
(CONST 6) = %LOG
(CONST 7) = ARCP
(CONST 8) = EXP
(CONST 9) = (MTIMES)
(CONST 10) = ((B RAT8))
(CONST 11) = (((COEFFTT) (C RAT8PRIME)))
(CONST 12) = M2
(CONST 13) = ARG
(CONST 14) = VAR
(CONST 15) = A
(CONST 16) = RATLOG
(CONST 17) = C
(CONST 18) = ((MTIMES) ((COEFFTT) (C RAT8)) ((COEFFTT) (D ELEM)))
(CONST 19) = NILL
(CONST 20) = SASSQ
(CONST 21) = B
(CONST 22) = D
(CONST 23) = (MQUOTIENT)
(CONST 24) = (MPLUS)
(CONST 25) = (MEXPT)
(CONST 26) = $%E
(CONST 27) = (MTIMES)
(CONST 28) = -1
(CONST 29) = MAXIMA-SUBSTITUTE
(CONST 30) = (MQUOTIENT)
(CONST 31) = (MEXPT)
(CONST 32) = MULN
(CONST 33) = INTEGRATOR
(CONST 34) = SUBSTINT
(CONST 35) = OPTRIG
(CONST 36) = W
(CONST 37) = POWERL
(CONST 38) = MONSTERTRIG
(CONST 39) = %DERIVATIVE
(CONST 40) = MQAPPLY
(CONST 41) = "Invalid arg to INTEGRATE:~%~M"
(CONST 42) = MERROR
(CONST 43) = CHECKDERIV
(CONST 44) = MEXPT
(CONST 45) = SUPEREXPT
(CONST 46) = $%E_TO_NUMLOG
(CONST 47) = RESIMPLIFY
(CONST 48) = ALIKE1
(CONST 49) = RAT8
(CONST 50) = RATROOTFORM
(CONST 51) = DENOMFIND
(CONST 52) = RATROOT
(CONST 53) = INTE
(CONST 54) = INTEGERP1
(CONST 55) = CHEBYFORM
(CONST 56) = CHEBYF
(CONST 57) = $EXPAND
(CONST 58) = (MEXPT)
(CONST 59) = SIMPLIFY
(CONST 60) = RATIONALIZER
(CONST 61) = $ALL
(CONST 62) = $RADEXPAND
(CONST 63) = (MEXPT)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (CHEBYFORM RATROOTFORM W D C B A Y ARG VAR EXP L EXPRES)
writes special variables : (EXP POWERL W ARG L Y)
418 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; EXPRES
3     (GETVALUE&PUSH 0)                   ; EXPRES
5     (CALL1&JMPIF 1 L51)                 ; FREEVAR
8     (GETVALUE 0)                        ; EXPRES
10    (JMPIFATOM L55)
12    (GETVALUE 0)                        ; EXPRES
14    (CAR)
15    (CAR&PUSH)
16    (CONST&PUSH 2)                      ; (MPLUS MTIMES)
17    (CALL2&JMPIFNOT 3 L323)             ; MEMQ
21    (GETVALUE 0)                        ; EXPRES
23    (CDR)
24    (BIND 4)                            ; L
26    (NIL)
27    (BIND 5)                            ; Y
29    L29
29    (GETVALUE 4)                        ; L
31    (CAR&PUSH)
32    (JSR L0)
34    (SETVALUE 5)                        ; Y
36    (JMPIF L46)
38    (GETVALUE 4)                        ; L
40    (CDR)
41    (SETVALUE 4)                        ; L
43    (JMPIF L29)
45    (NIL)
46    L46
46    (UNBIND 2)
48    (JMP L695)
51    L51
51    (NIL)
52    (JMP L695)
55    L55
55    (NIL)
56    (JMP L695)
59    L59
59    (GETVALUE&PUSH 8)                   ; EXP
61    (GETVALUE&PUSH 14)                  ; VAR
63    (CONST&PUSH 15)                     ; A
64    (GETVALUE 0)                        ; EXPRES
66    (CONS&PUSH)
67    (GETVALUE 13)                       ; ARG
69    (CONS&PUSH)
70    (CALL 3 16)                         ; RATLOG
73    (JMP L695)
76    L76
76    (CONST&PUSH 15)                     ; A
77    (LOAD&PUSH 1)
78    (CONST&PUSH 19)                     ; NILL
79    (CALL 3 20)                         ; SASSQ
82    (CDR&PUSH)
83    (CONST&PUSH 21)                     ; B
84    (LOAD&PUSH 2)
85    (CONST&PUSH 19)                     ; NILL
86    (CALL 3 20)                         ; SASSQ
89    (CDR&PUSH)
90    (CONST&PUSH 17)                     ; C
91    (GETVALUE&PUSH 5)                   ; Y
93    (CONST&PUSH 19)                     ; NILL
94    (CALL 3 20)                         ; SASSQ
97    (CDR&PUSH)
98    (CONST&PUSH 22)                     ; D
99    (GETVALUE&PUSH 5)                   ; Y
101   (CONST&PUSH 19)                     ; NILL
102   (CALL 3 20)                         ; SASSQ
105   (CDR)
106   (BIND 22)                           ; D
108   (LOAD 5)
109   (BIND 15)                           ; A
111   (LOAD 7)
112   (BIND 21)                           ; B
114   (LOAD 9)
115   (BIND 17)                           ; C
117   (GETVALUE&PUSH 0)                   ; EXPRES
119   (GETVALUE&PUSH 14)                  ; VAR
121   (CONST&PUSH 23)                     ; (MQUOTIENT)
122   (CONST&PUSH 24)                     ; (MPLUS)
123   (CONST&PUSH 25)                     ; (MEXPT)
124   (CONST&PUSH 26)                     ; $%E
125   (GETVALUE&PUSH 14)                  ; VAR
127   (LIST&PUSH 3)
129   (CONST&PUSH 27)                     ; (MTIMES)
130   (CONST&PUSH 28)                     ; -1
131   (GETVALUE&PUSH 15)                  ; A
133   (LIST&PUSH 3)
135   (LIST&PUSH 3)
137   (GETVALUE&PUSH 21)                  ; B
139   (LIST&PUSH 3)
141   (GETVALUE&PUSH 14)                  ; VAR
143   (GETVALUE&PUSH 17)                  ; C
145   (CALL&PUSH 3 29)                    ; MAXIMA-SUBSTITUTE
148   (CONST&PUSH 30)                     ; (MQUOTIENT)
150   (CONST&PUSH 31)                     ; (MEXPT)
152   (CONST&PUSH 26)                     ; $%E
153   (GETVALUE&PUSH 14)                  ; VAR
155   (LIST&PUSH 3)
157   (GETVALUE&PUSH 21)                  ; B
159   (LIST&PUSH 3)
161   (GETVALUE&PUSH 14)                  ; VAR
163   (GETVALUE&PUSH 0)                   ; EXPRES
165   (GETVALUE&PUSH 22)                  ; D
167   (CALL&PUSH 3 29)                    ; MAXIMA-SUBSTITUTE
170   (LIST&PUSH 3)
172   (NIL&PUSH)
173   (CALL2&PUSH 32)                     ; MULN
175   (GETVALUE&PUSH 14)                  ; VAR
177   (CALL2&PUSH 33)                     ; INTEGRATOR
179   (CALL 3 34)                         ; SUBSTINT
182   (UNBIND 4)
184   (SKIP 4)
186   (UNBIND1)
187   (JMP L695)
190   L190
190   (GETVALUE&PUSH 8)                   ; EXP
192   (CONST&PUSH 9)                      ; (MTIMES)
193   (GETVALUE 0)                        ; EXPRES
195   (CAR)
196   (CAR&PUSH)
197   (LIST&PUSH 1)
199   (CONST 10)                          ; ((B RAT8))
200   (CONS&PUSH)
201   (CONST 11)                          ; (((COEFFTT) (C RAT8PRIME)))
202   (LIST*&PUSH 2)
204   (NIL&PUSH)
205   (CALL 3 12)                         ; M2
208   (SETVALUE 13)                       ; ARG
210   (JMPIF L59)
213   (NIL)
214   (BIND 5)                            ; Y
216   (NIL&PUSH)
217   (GETVALUE 0)                        ; EXPRES
219   (CDR)
220   (CAR&PUSH)
221   (JSR L0)
224   (SETVALUE 5)                        ; Y
226   (JMPIF L464)
229   (GETVALUE 0)                        ; EXPRES
231   (CAR)
232   (CAR&PUSH)
233   (JMPIFNOTEQTO 6 L261)               ; %LOG
236   (GETVALUE 0)                        ; EXPRES
238   (CDR)
239   (CAR&PUSH)
240   (GETVALUE&PUSH 17)                  ; C
242   (NIL&PUSH)
243   (CALL 3 12)                         ; M2
246   (STORE 0)
247   (JMPIFNOT L261)
249   (GETVALUE&PUSH 8)                   ; EXP
251   (CONST&PUSH 18)                     ; ((MTIMES) (# #) (# #))
252   (NIL&PUSH)
253   (CALL 3 12)                         ; M2
256   (SETVALUE 5)                        ; Y
258   (JMPIF L76)
261   L261
261   (NIL)
262   (SKIP 1)
264   (UNBIND1)
265   (JMP L695)
268   L268
268   (GETVALUE 0)                        ; EXPRES
270   (CDR)
271   (CAR&PUSH)
272   (GETVALUE&PUSH 17)                  ; C
274   (NIL&PUSH)
275   (CALL 3 12)                         ; M2
278   (SETVALUE 36)                       ; W
280   (JMPIFNOT L541)
283   (T)
284   (SETVALUE 37)                       ; POWERL
286   (GETVALUE&PUSH 8)                   ; EXP
288   (GETVALUE&PUSH 14)                  ; VAR
290   (GETVALUE 0)                        ; EXPRES
292   (CDR)
293   (CAR&PUSH)
294   (CALL 3 38)                         ; MONSTERTRIG
297   (VALUES1)
298   (JMP L695)
301   L301
301   (NIL)
302   (JMP L695)
305   L305
305   (GETVALUE&PUSH 8)                   ; EXP
307   (GETVALUE&PUSH 14)                  ; VAR
309   (GETVALUE 0)                        ; EXPRES
311   (CDR)
312   (CAR&PUSH)
313   (CALL 3 45)                         ; SUPEREXPT
316   (JMP L695)
319   L319
319   (NIL)
320   (JMP L464)
323   L323
323   (GETVALUE 0)                        ; EXPRES
325   (CAR)
326   (CAR&PUSH)
327   (JMPIFEQTO 6 L190)                  ; %LOG
331   (GETVALUE 0)                        ; EXPRES
333   (CAR)
334   (CAR&PUSH)
335   (CALL1&JMPIF 7 L190)                ; ARCP
339   (GETVALUE 0)                        ; EXPRES
341   (CAR)
342   (CAR&PUSH)
343   (CALL1&JMPIF 35 L268)               ; OPTRIG
347   (GETVALUE 0)                        ; EXPRES
349   (CAR)
350   (CAR&PUSH)
351   (JMPIFNOTEQTO 39 L393)              ; %DERIVATIVE
354   (GETVALUE 8)                        ; EXP
356   (CAR)
357   (CAR&PUSH)
358   (GETVALUE 0)                        ; EXPRES
360   (CAR)
361   (CAR)
362   (JMPIFNOTEQ L393)
364   (GETVALUE 8)                        ; EXP
366   (CDR)
367   (CAR)
368   (JMPIFATOM L386)
370   (GETVALUE 8)                        ; EXP
372   (CDR)
373   (CAR)
374   (CAR)
375   (CAR&PUSH)
376   (JMPIFNOTEQTO 40 L386)              ; MQAPPLY
379   (CONST&PUSH 41)                     ; "Invalid arg to INTEGRATE:~%~M"
381   (GETVALUE&PUSH 8)                   ; EXP
383   (CALL2&JMPIFNOT 42 L393)            ; MERROR
386   L386
386   (GETVALUE&PUSH 8)                   ; EXP
388   (CALL1 43)                          ; CHECKDERIV
390   (JMPIF1 L695)
393   L393
393   (GETVALUE 0)                        ; EXPRES
395   (CAR)
396   (CAR&PUSH)
397   (JMPIFNOTEQTO 44 L301)              ; MEXPT
401   (GETVALUE 0)                        ; EXPRES
403   (CDR)
404   (CDR)
405   (CAR&PUSH)
406   (CALLS2&JMPIF 12 L541)              ; INTEGERP
410   (GETVALUE 0)                        ; EXPRES
412   (CDR)
413   (CAR&PUSH)
414   (CALL1&JMPIFNOT 1 L494)             ; FREEVAR
418   (GETVALUE 0)                        ; EXPRES
420   (CDR)
421   (CDR)
422   (CAR&PUSH)
423   (GETVALUE&PUSH 17)                  ; C
425   (NIL&PUSH)
426   (CALL 3 12)                         ; M2
429   (JMPIF L305)
432   (GETVALUE 0)                        ; EXPRES
434   (CDR)
435   (CDR)
436   (CAR&PUSH)
437   (JSR L0)
440   (JMPIF1 L695)
443   (T)
444   (BIND 46)                           ; $%E_TO_NUMLOG
446   (GETVALUE&PUSH 8)                   ; EXP
448   (CALL1&PUSH 47)                     ; RESIMPLIFY
450   (GETVALUE&PUSH 8)                   ; EXP
452   (LOAD&PUSH 1)
453   (CALL2&JMPIF 48 L319)               ; ALIKE1
457   (LOAD 0)
458   (SETVALUE 8)                        ; EXP
460   (PUSH)
461   (JSR L0)
464   L464
464   (SKIP 1)
466   (UNBIND1)
467   (JMP L695)
470   L470
470   (T)
471   (SETVALUE 37)                       ; POWERL
473   (GETVALUE&PUSH 8)                   ; EXP
475   (GETVALUE&PUSH 14)                  ; VAR
477   (GETVALUE 0)                        ; EXPRES
479   (CDR)
480   (CAR&PUSH)
481   (GETVALUE&PUSH 36)                  ; W
483   (CALL 4 52)                         ; RATROOT
486   (SETVALUE 36)                       ; W
488   (JMPIFNOT L565)
491   (JMP L695)
494   L494
494   (GETVALUE 0)                        ; EXPRES
496   (CDR)
497   (CAR&PUSH)
498   (CALL1&JMPIFNOT 49 L541)            ; RAT8
501   (GETVALUE 0)                        ; EXPRES
503   (CDR)
504   (CAR&PUSH)
505   (GETVALUE&PUSH 50)                  ; RATROOTFORM
507   (NIL&PUSH)
508   (CALL 3 12)                         ; M2
511   (SETVALUE 36)                       ; W
513   (JMPIFNOT L523)
515   (GETVALUE 0)                        ; EXPRES
517   (CDR)
518   (CDR)
519   (CAR&PUSH)
520   (CALL1&JMPIF 51 L470)               ; DENOMFIND
523   L523
523   (GETVALUE 0)                        ; EXPRES
525   (CDR)
526   (CDR)
527   (CAR&PUSH)
528   (CALL1&JMPIF 54 L551)               ; INTEGERP1
531   (GETVALUE&PUSH 8)                   ; EXP
533   (GETVALUE&PUSH 55)                  ; CHEBYFORM
535   (NIL&PUSH)
536   (CALL 3 12)                         ; M2
539   (JMPIF L584)
541   L541
541   (GETVALUE 0)                        ; EXPRES
543   (CDR)
544   (CAR&PUSH)
545   (JSR L0)
548   (JMP L695)
551   L551
551   (GETVALUE 0)                        ; EXPRES
553   (CDR)
554   (CAR&PUSH)
555   (GETVALUE&PUSH 22)                  ; D
557   (NIL&PUSH)
558   (CALL 3 12)                         ; M2
561   (SETVALUE 36)                       ; W
563   (JMPIFNOT L574)
565   L565
565   (GETVALUE&PUSH 8)                   ; EXP
567   (GETVALUE&PUSH 14)                  ; VAR
569   (CALL2 53)                          ; INTE
571   (JMP L695)
574   L574
574   (GETVALUE&PUSH 8)                   ; EXP
576   (GETVALUE&PUSH 55)                  ; CHEBYFORM
578   (NIL&PUSH)
579   (CALL 3 12)                         ; M2
582   (JMPIFNOT L622)
584   L584
584   (GETVALUE&PUSH 8)                   ; EXP
586   (GETVALUE&PUSH 14)                  ; VAR
588   (CALL2 56)                          ; CHEBYF
590   (JMP L695)
593   L593
593   (GETVALUE&PUSH 36)                  ; W
595   (GETVALUE 0)                        ; EXPRES
597   (CDR)
598   (CAR&PUSH)
599   (GETVALUE&PUSH 8)                   ; EXP
601   (CALL 3 29)                         ; MAXIMA-SUBSTITUTE
604   (SETVALUE 8)                        ; EXP
606   (CONST&PUSH 58)                     ; (MEXPT)
608   (GETVALUE&PUSH 36)                  ; W
610   (GETVALUE 0)                        ; EXPRES
612   (CDR)
613   (CDR)
614   (CAR&PUSH)
615   (LIST&PUSH 3)
617   (CALL1 59)                          ; SIMPLIFY
619   (JMP L687)
622   L622
622   (GETVALUE 0)                        ; EXPRES
624   (CDR)
625   (CAR&PUSH)
626   (CALL1 57)                          ; $EXPAND
628   (SETVALUE 36)                       ; W
630   (PUSH)
631   (GETVALUE 0)                        ; EXPRES
633   (CDR)
634   (CAR&PUSH)
635   (NIL&PUSH)
636   (CALL 3 12)                         ; M2
639   (JMPIFNOT L593)
641   (GETVALUE 0)                        ; EXPRES
643   (CDR)
644   (CAR&PUSH)
645   (CALL1 60)                          ; RATIONALIZER
647   (SETVALUE 36)                       ; W
649   (JMPIFNOT L694)
651   (CONST 61)                          ; $ALL
653   (BIND 62)                           ; $RADEXPAND
655   (GETVALUE&PUSH 36)                  ; W
657   (GETVALUE 0)                        ; EXPRES
659   (CDR)
660   (CAR&PUSH)
661   (GETVALUE&PUSH 8)                   ; EXP
663   (CALL 3 29)                         ; MAXIMA-SUBSTITUTE
666   (UNBIND1)
667   (SETVALUE 8)                        ; EXP
669   (CONST 61)                          ; $ALL
671   (BIND 62)                           ; $RADEXPAND
673   (CONST&PUSH 63)                     ; (MEXPT)
675   (GETVALUE&PUSH 36)                  ; W
677   (GETVALUE 0)                        ; EXPRES
679   (CDR)
680   (CDR)
681   (CAR&PUSH)
682   (LIST&PUSH 3)
684   (CALL1 59)                          ; SIMPLIFY
686   (UNBIND1)
687   L687
687   (PUSH)
688   (JSR L0)
691   (VALUES1)
692   (JMP L695)
694   L694
694   (NIL)
695   L695
695   (UNBIND1)
696   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SEPARC (EX) ...)-14|
(CONST 0) = SEPARC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SEPARC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SEPARC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SEPARC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SEPARC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SEPARC
8     (SKIP&RET 1)


Disassembly of function SEPARC
(CONST 0) = ARCFUNCP
(CONST 1) = ARCPART
(CONST 2) = 1
(CONST 3) = COEF
(CONST 4) = MTIMES
(CONST 5) = ARCLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (COEF)
writes special variables : (ARCPART COEF)
30 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L30)                 ; ARCFUNCP
4     (LOAD 1)
5     (CAR)
6     (CAR&PUSH)
7     (JMPIFNOTEQTO 4 L41)                ; MTIMES
10    (LOAD&CDR&PUSH 1)
12    (CALL1 5)                           ; ARCLIST
14    (GETVALUE 3)                        ; COEF
16    (CDR)
17    (JMPIFNOT L36)
19    (LOAD&CAR&PUSH 1)
21    (GETVALUE 3)                        ; COEF
23    (CONS)
24    (SETVALUE 3)                        ; COEF
26    L26
26    (SETVALUE 3)                        ; COEF
28    (SKIP&RET 2)
30    L30
30    (LOAD 1)
31    (SETVALUE 1)                        ; ARCPART
33    (CONST 2)                           ; 1
34    (JMP L26)
36    L36
36    (GETVALUE 3)                        ; COEF
38    (CAR)
39    (JMP L26)
41    L41
41    (NIL)
42    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ARCLIST (LIST) ...)-15|
(CONST 0) = ARCLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARCLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARCLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARCLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARCLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARCLIST
8     (SKIP&RET 1)


Disassembly of function ARCLIST
(CONST 0) = ARCFUNCP
(CONST 1) = ARCPART
(CONST 2) = COEF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (COEF ARCPART)
writes special variables : (COEF ARCPART)
24 byte-code instructions:
0     (LOAD&JMPIF 1 L15)
3     L3
3     (NIL)
4     (SKIP&RET 2)
6     L6
6     (LOAD 1)
7     (CAR)
8     (SETVALUE 1)                        ; ARCPART
10    (JMP L31)
12    L12
12    (LOAD&JMPIFNOT 1 L3)
15    L15
15    (LOAD&CAR&PUSH 1)
17    (CALL1&JMPIFNOT 0 L24)              ; ARCFUNCP
20    (GETVALUE 1)                        ; ARCPART
22    (JMPIFNOT L6)
24    L24
24    (LOAD&CAR&PUSH 1)
26    (GETVALUE 2)                        ; COEF
28    (CONS)
29    (SETVALUE 2)                        ; COEF
31    L31
31    (LOAD&CDR&PUSH 1)
33    (JMPTAIL 1 3 L12)


Disassembly of function #:|(DEFUN ARCFUNCP (EX) ...)-16|
(CONST 0) = ARCFUNCP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARCFUNCP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARCFUNCP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARCFUNCP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARCFUNCP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARCFUNCP
8     (SKIP&RET 1)


Disassembly of function ARCFUNCP
(CONST 0) = ARCP
(CONST 1) = %LOG
(CONST 2) = MEXPT
(CONST 3) = INTEGERP2
(CONST 4) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
41 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALLS2 4)                          ; CONSP
3     (JMPIFNOT1 L53)
5     (LOAD 1)
6     (CAR)
7     (CAR&PUSH)
8     (CALL1 0)                           ; ARCP
10    (JMPIF1 L53)
12    (LOAD 1)
13    (CAR)
14    (CAR&PUSH)
15    (CONST 1)                           ; %LOG
16    (EQ)
17    (JMPIF1 L53)
19    (LOAD 1)
20    (CAR)
21    (CAR&PUSH)
22    (CONST 2)                           ; MEXPT
23    (EQ)
24    (JMPIFNOT1 L53)
26    (LOAD 1)
27    (CDR)
28    (CDR)
29    (CAR&PUSH)
30    (CALL1 3)                           ; INTEGERP2
32    (JMPIFNOT1 L53)
34    (LOAD 1)
35    (CDR)
36    (CDR)
37    (CAR&PUSH)
38    (CALL1&PUSH 3)                      ; INTEGERP2
40    (CONST&PUSH 4)                      ; 0
41    (CALLSR 1 48)                       ; >
44    (JMPIFNOT1 L53)
46    (LOAD 1)
47    (CDR)
48    (CAR&PUSH)
49    (JMPTAIL 1 3 L0)
53    L53
53    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTEGRATOR (EXP VAR) ...)-17|
(CONST 0) = INTEGRATOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEGRATOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEGRATOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEGRATOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEGRATOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEGRATOR
8     (SKIP&RET 1)


Disassembly of function INTEGRATOR
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = Y
(CONST 3) = ARG
(CONST 4) = POWERL
(CONST 5) = B
(CONST 6) = W
(CONST 7) = C
(CONST 8) = D
(CONST 9) = E
(CONST 10) = RATROOTFORM
(CONST 11) = CHEBYFORM
(CONST 12) = ARCPART
(CONST 13) = COEF
(CONST 14) = FREEVAR
(CONST 15) = MUL2*
(CONST 16) = 1
(CONST 17) = PARTITION
(CONST 18) = MPLUSP
(CONST 19) = INTEGRATE1
(CONST 20) = $ATAN2
(CONST 21) = (%ATAN)
(CONST 22) = DIV
(CONST 23) = SIMPLIFYA
(CONST 24) = %SUM
(CONST 25) = INTSUM
(CONST 26) = DIFFDIV
(CONST 27) = MTIMES
(CONST 28) = ((MPLUS) ((COEFFPT) (B FREEVAR) (X VARP)) ((COEFFPT) (A FREEVAR)))
(CONST 29) = 
((MTIMES) ((COEFFTT) (E FREEVAR))
 ((MPLUS) ((COEFFPT) (A FREEVAR) (VAR VARP)) ((COEFFPT) (B FREEVAR)))
 ((MEXPT) ((MPLUS) ((COEFFPT) (C FREEVAR) (VAR VARP)) ((COEFFPT) (D FREEVAR)))
  -1))
(CONST 30) = 
((MTIMES) ((MEXPT) (VAR VARP) (R1 NUMBERP))
 ((MEXPT)
  ((MPLUS) ((MTIMES) ((COEFFTT) (C2 FREEVAR)) ((MEXPT) (VAR VARP) (Q FREE1)))
   ((COEFFPP) (C1 FREEVAR)))
  (R2 NUMBERP))
 ((COEFFTT) (A FREEVAR)))
(CONST 31) = 
((MPLUS) ((COEFFPT) (C FREEVAR) ((MEXPT) (X VARP) 2))
 ((COEFFPT) (B FREEVAR) (X VARP)) ((COEFFPT) (A FREEVAR)))
(CONST 32) = 
((MTIMES) ((MPLUS) ((COEFFPT) (A FREEVAR) (VAR VARP)) ((COEFFPT) (B FREEVAR)))
 ((MPLUS) ((COEFFPT) (C FREEVAR) (VAR VARP)) ((COEFFPT) (D FREEVAR))))
(CONST 33) = RAT8
(CONST 34) = INTFORM
(CONST 35) = POWERLIST
(CONST 36) = RATINT
(CONST 37) = SEPARC
(CONST 38) = STACK
(CONST 39) = ALIKE1
(CONST 40) = %INTEGRATE
(CONST 41) = ISINOP
(CONST 42) = SDIFF
(CONST 43) = MUL2
(CONST 44) = (MTIMES)
(CONST 45) = (MTIMES)
(CONST 46) = -1
(CONST 47) = ADD2*
(CONST 48) = SCEP
(CONST 49) = $TRIGREDUCE
(CONST 50) = SCE-INT
(CONST 51) = $EXPAND
(CONST 52) = RISCHINT
(CONST 53) = (%INTEGRATE)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (POWERL COEF STACK ARCPART Y W VAR EXP)
writes special variables : (E D CHEBYFORM RATROOTFORM C Y EXP W)
291 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (NIL)
7     (BIND 2)                            ; Y
9     (NIL)
10    (BIND 3)                            ; ARG
12    (NIL)
13    (BIND 4)                            ; POWERL
15    (NIL&PUSH)
16    (NIL)
17    (BIND 5)                            ; B
19    (NIL)
20    (BIND 6)                            ; W
22    (NIL)
23    (BIND 7)                            ; C
25    (NIL)
26    (BIND 8)                            ; D
28    (NIL)
29    (BIND 9)                            ; E
31    (NIL)
32    (BIND 10)                           ; RATROOTFORM
34    (NIL)
35    (BIND 11)                           ; CHEBYFORM
37    (NIL)
38    (BIND 12)                           ; ARCPART
40    (NIL)
41    (BIND 13)                           ; COEF
43    (NIL&PUSH)
44    (GETVALUE&PUSH 0)                   ; EXP
46    (CALL1&JMPIF 14 L180)               ; FREEVAR
50    (GETVALUE&PUSH 0)                   ; EXP
52    (GETVALUE&PUSH 1)                   ; VAR
54    (CONST&PUSH 16)                     ; 1
55    (CALL 3 17)                         ; PARTITION
58    (SETVALUE 6)                        ; W
60    (CAR)
61    (STORE 28)
63    (GETVALUE 6)                        ; W
65    (CDR)
66    (SETVALUE 0)                        ; EXP
68    (PUSH)
69    (CALL1&JMPIF 18 L186)               ; MPLUSP
73    (GETVALUE 0)                        ; EXP
75    (JMPIFATOM L85)
77    (GETVALUE 0)                        ; EXP
79    (CAR)
80    (CAR&PUSH)
81    (JMPIFEQTO 20 L195)                 ; $ATAN2
85    L85
85    (GETVALUE 0)                        ; EXP
87    (JMPIFATOM L97)
89    (GETVALUE 0)                        ; EXP
91    (CAR)
92    (CAR&PUSH)
93    (JMPIFEQTO 24 L221)                 ; %SUM
97    L97
97    (GETVALUE&PUSH 0)                   ; EXP
99    (GETVALUE&PUSH 1)                   ; VAR
101   (CALL2 26)                          ; DIFFDIV
103   (SETVALUE 2)                        ; Y
105   (JMPIF L231)
108   (GETVALUE 0)                        ; EXP
110   (CAR)
111   (CAR&PUSH)
112   (JMPIFEQTO 27 L237)                 ; MTIMES
116   (GETVALUE&PUSH 0)                   ; EXP
118   (LIST 1)
120   L120
120   (SETVALUE 2)                        ; Y
122   (CONST 28)                          ; ((MPLUS) (# # #) (# #))
124   (SETVALUE 7)                        ; C
126   (CONST 29)                          ; ((MTIMES) (# #) (# # #) (# # -1))
128   (SETVALUE 10)                       ; RATROOTFORM
130   (CONST 30)                          ; ((MTIMES) (# # #) (# # #) (# #))
132   (SETVALUE 11)                       ; CHEBYFORM
134   (CONST 31)                          ; ((MPLUS) (# # #) (# # #) (# #))
136   (SETVALUE 8)                        ; D
138   (CONST 32)                          ; ((MTIMES) (# # #) (# # #))
140   (SETVALUE 9)                        ; E
142   L142
142   (GETVALUE 2)                        ; Y
144   (CAR&PUSH)
145   (CALL1&JMPIFNOT 33 L255)            ; RAT8
149   (GETVALUE 2)                        ; Y
151   (CDR)
152   (SETVALUE 2)                        ; Y
154   (JMPIF L142)
156   (LOAD&PUSH 28)
158   (GETVALUE&PUSH 0)                   ; EXP
160   (GETVALUE&PUSH 1)                   ; VAR
162   (CALL2 35)                          ; POWERLIST
164   (SETVALUE 2)                        ; Y
166   (JMPIF L174)
168   (GETVALUE&PUSH 0)                   ; EXP
170   (GETVALUE&PUSH 1)                   ; VAR
172   (CALL2 36)                          ; RATINT
174   L174
174   (PUSH)
175   (CALL2 15)                          ; MUL2*
177   (JMP L497)
180   L180
180   (GETVALUE&PUSH 0)                   ; EXP
182   (GETVALUE 1)                        ; VAR
184   (JMP L174)
186   L186
186   (LOAD&PUSH 28)
188   (GETVALUE 0)                        ; EXP
190   (CDR&PUSH)
191   (CALL1 19)                          ; INTEGRATE1
193   (JMP L174)
195   L195
195   (LOAD&PUSH 28)
197   (CONST&PUSH 21)                     ; (%ATAN)
198   (GETVALUE 0)                        ; EXP
200   (CDR)
201   (CAR&PUSH)
202   (GETVALUE 0)                        ; EXP
204   (CDR)
205   (CDR)
206   (CAR&PUSH)
207   (CALL2&PUSH 22)                     ; DIV
209   (LIST&PUSH 2)
211   (T&PUSH)
212   (CALL2&PUSH 23)                     ; SIMPLIFYA
214   (GETVALUE&PUSH 1)                   ; VAR
216   (JSR L0)
219   (JMP L174)
221   L221
221   (LOAD&PUSH 28)
223   (GETVALUE&PUSH 0)                   ; EXP
225   (GETVALUE&PUSH 1)                   ; VAR
227   (CALL2 25)                          ; INTSUM
229   (JMP L174)
231   L231
231   (LOAD&PUSH 28)
233   (GETVALUE 2)                        ; Y
235   (JMP L174)
237   L237
237   (GETVALUE 0)                        ; EXP
239   (CDR)
240   (JMP L120)
243   L243
243   (LOAD&PUSH 28)
245   (GETVALUE 6)                        ; W
247   (JMP L174)
250   L250
250   (SKIP 1)
252   (JMP L424)
255   L255
255   (GETVALUE 2)                        ; Y
257   (CAR&PUSH)
258   (CALL1 34)                          ; INTFORM
260   (SETVALUE 6)                        ; W
262   (JMPIF L243)
264   (GETVALUE&PUSH 0)                   ; EXP
266   (CALL1 37)                          ; SEPARC
268   (GETVALUE 12)                       ; ARCPART
270   (JMPIFNOT L424)
273   (GETVALUE&PUSH 38)                  ; STACK
275   (LOAD&JMPIFNOT 0 L290)
278   L278
278   (LOAD&CAR&PUSH 0)
280   (GETVALUE&PUSH 13)                  ; COEF
282   (CALL2&JMPIF 39 L250)               ; ALIKE1
285   (LOAD&CDR&STORE 0)
287   (LOAD&JMPIF 0 L278)
290   L290
290   (SKIP 1)
292   (GETVALUE&PUSH 13)                  ; COEF
294   (GETVALUE 38)                       ; STACK
296   (CONS)
297   (BIND 38)                           ; STACK
299   (GETVALUE&PUSH 13)                  ; COEF
301   (GETVALUE&PUSH 1)                   ; VAR
303   (JSR L0)
306   (UNBIND1)
307   (SETVALUE 6)                        ; W
309   (PUSH)
310   (CONST&PUSH 40)                     ; %INTEGRATE
312   (CALL2&JMPIF 41 L424)               ; ISINOP
316   (GETVALUE&PUSH 6)                   ; W
318   (GETVALUE&PUSH 12)                  ; ARCPART
320   (GETVALUE&PUSH 1)                   ; VAR
322   (CALL2&PUSH 42)                     ; SDIFF
324   (CALL2 43)                          ; MUL2
326   (STORE 0)
327   (JMPIFNOT L424)
330   (GETVALUE&PUSH 38)                  ; STACK
332   (LOAD&JMPIF 0 L416)
336   L336
336   (SKIP 1)
338   (LOAD&PUSH 0)
339   (GETVALUE 38)                       ; STACK
341   (CONS)
342   (BIND 38)                           ; STACK
344   (LOAD&PUSH 3)
345   (GETVALUE&PUSH 1)                   ; VAR
347   (JSR L0)
350   (UNBIND1)
351   (SETVALUE 2)                        ; Y
353   (PUSH)
354   (CONST&PUSH 40)                     ; %INTEGRATE
356   (CALL2&JMPIF 41 L424)               ; ISINOP
360   (CONST&PUSH 44)                     ; (MTIMES)
362   (LOAD&PUSH 29)
364   (GETVALUE&PUSH 6)                   ; W
366   (GETVALUE&PUSH 12)                  ; ARCPART
368   (LIST&PUSH 4)
370   (CONST&PUSH 45)                     ; (MTIMES)
372   (CONST&PUSH 46)                     ; -1
374   (LOAD&PUSH 31)
376   (GETVALUE&PUSH 2)                   ; Y
378   (LIST&PUSH 4)
380   (CALL2 47)                          ; ADD2*
382   (JMP L497)
385   L385
385   (GETVALUE&PUSH 0)                   ; EXP
387   (CALL1 49)                          ; $TRIGREDUCE
389   (JMP L450)
391   L391
391   (CDR)
392   (CDR)
393   (JMPIF L385)
395   (GETVALUE 2)                        ; Y
397   (CAR&PUSH)
398   (GETVALUE 2)                        ; Y
400   (CDR)
401   (CAR&PUSH)
402   (GETVALUE&PUSH 1)                   ; VAR
404   (CALL 3 50)                         ; SCE-INT
407   (JMP L494)
410   L410
410   (LOAD&CDR&STORE 0)
412   (LOAD&JMPIFNOT 0 L336)
416   L416
416   (LOAD&CAR&PUSH 0)
418   (LOAD&PUSH 2)
419   (CALL2&JMPIFNOT 39 L410)            ; ALIKE1
422   (SKIP 1)
424   L424
424   (LOAD&PUSH 28)
426   (GETVALUE&PUSH 0)                   ; EXP
428   (GETVALUE&PUSH 1)                   ; VAR
430   (CALL2 48)                          ; SCEP
432   (SETVALUE 2)                        ; Y
434   (JMPIF L391)
436   (GETVALUE&PUSH 0)                   ; EXP
438   (GETVALUE&PUSH 0)                   ; EXP
440   (CALL1 51)                          ; $EXPAND
442   (SETVALUE 2)                        ; Y
444   (PUSH)
445   (CALL2&JMPIF 39 L462)               ; ALIKE1
448   (GETVALUE 2)                        ; Y
450   L450
450   (PUSH)
451   (GETVALUE&PUSH 1)                   ; VAR
453   (JSR L0)
456   (JMP L494)
458   L458
458   (GETVALUE 2)                        ; Y
460   (JMP L494)
462   L462
462   (GETVALUE 4)                        ; POWERL
464   (JMPIF L476)
466   (GETVALUE&PUSH 0)                   ; EXP
468   (GETVALUE&PUSH 1)                   ; VAR
470   (CALL2 35)                          ; POWERLIST
472   (SETVALUE 2)                        ; Y
474   (JMPIF L458)
476   L476
476   (GETVALUE&PUSH 0)                   ; EXP
478   (GETVALUE&PUSH 1)                   ; VAR
480   (CALL2 52)                          ; RISCHINT
482   (SETVALUE 2)                        ; Y
484   (JMPIF L494)
486   (CONST&PUSH 53)                     ; (%INTEGRATE)
488   (GETVALUE&PUSH 0)                   ; EXP
490   (GETVALUE&PUSH 1)                   ; VAR
492   (LIST 3)
494   L494
494   (PUSH)
495   (CALL2 43)                          ; MUL2
497   L497
497   (SKIP 1)
499   (UNBIND 9)
501   (SKIP 1)
503   (UNBIND 5)
505   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RAT8 (EX) ...)-18|
(CONST 0) = RAT8
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAT8>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT8
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAT8
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAT8>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAT8
8     (SKIP&RET 1)


Disassembly of function RAT8
(CONST 0) = VAR
(CONST 1) = ALIKE1
(CONST 2) = FREEVAR
(CONST 3) = (MPLUS MTIMES)
(CONST 4) = MEMQ
(CONST 5) = MEXPT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
46 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (GETVALUE&PUSH 0)                   ; VAR
3     (CALL2&JMPIF 1 L33)                 ; ALIKE1
6     (LOAD&PUSH 1)
7     (CALL1&JMPIF 2 L33)                 ; FREEVAR
10    (LOAD 1)
11    (CAR)
12    (CAR&PUSH)
13    (CONST&PUSH 3)                      ; (MPLUS MTIMES)
14    (CALL2&JMPIF 4 L39)                 ; MEMQ
17    (LOAD 1)
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFNOTEQTO 5 L30)                ; MEXPT
23    (LOAD 1)
24    (CDR)
25    (CDR)
26    (CAR&PUSH)
27    (CALLS2&JMPIF 12 L58)               ; INTEGERP
30    L30
30    (NIL)
31    (SKIP&RET 2)
33    L33
33    (T)
34    (SKIP&RET 2)
36    L36
36    (NIL)
37    (SKIP&RET 3)
39    L39
39    (LOAD&CDR&PUSH 1)
41    (LOAD&JMPIFNOT 0 L55)
44    L44
44    (LOAD&CAR&PUSH 0)
46    (JSR L0)
48    (JMPIFNOT L36)
50    (LOAD&CDR&STORE 0)
52    (LOAD&JMPIF 0 L44)
55    L55
55    (T)
56    (SKIP&RET 3)
58    L58
58    (LOAD 1)
59    (CDR)
60    (CAR&PUSH)
61    (JMPTAIL 1 3 L0)


Disassembly of function #:|(DEFUN OPTRIG (X) ...)-19|
(CONST 0) = OPTRIG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OPTRIG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OPTRIG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OPTRIG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OPTRIG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OPTRIG
8     (SKIP&RET 1)


Disassembly of function OPTRIG
(CONST 0) = X
(CONST 1) = (%SIN %COS %SEC %TAN %CSC %COT)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; (%SIN %COS %SEC %TAN %CSC %COT)
6     (CALL2 2)                           ; MEMQ
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTEGRATE1 (EXP) ...)-20|
(CONST 0) = INTEGRATE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEGRATE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEGRATE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEGRATE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEGRATE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEGRATE1
8     (SKIP&RET 1)


Disassembly of function INTEGRATE1
(CONST 0) = EXP
(CONST 1) = ANS
(CONST 2) = $LIFLAG
(CONST 3) = VAR
(CONST 4) = INTEGRATOR
(CONST 5) = %INTEGRATE
(CONST 6) = FREE
(CONST 7) = (MPLUS)
(CONST 8) = RISCHINT
(CONST 9) = ADDN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS VAR EXP)
writes special variable : (ANS)
46 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (NIL)
6     (BIND 1)                            ; ANS
8     (LOAD&JMPIFNOT 3 L42)
11    L11
11    (NIL)
12    (BIND 2)                            ; $LIFLAG
14    (LOAD&CAR&PUSH 6)
16    (GETVALUE&PUSH 3)                   ; VAR
18    (CALL2&PUSH 4)                      ; INTEGRATOR
20    (GETVALUE 1)                        ; ANS
22    (CONS)
23    (SETVALUE 1)                        ; ANS
25    (UNBIND1)
26    (GETVALUE 1)                        ; ANS
28    (CAR&PUSH)
29    (CONST&PUSH 5)                      ; %INTEGRATE
30    (CALL2&JMPIF 6 L37)                 ; FREE
33    (LOAD 3)
34    (CDR)
35    (JMPIF L54)
37    L37
37    (LOAD&CDR&STORE 3)
39    (LOAD&JMPIF 3 L11)
42    L42
42    (GETVALUE 1)                        ; ANS
44    L44
44    (PUSH)
45    (NIL&PUSH)
46    (CALL2 9)                           ; ADDN
48    (UNBIND1)
49    (SKIP 1)
51    (UNBIND1)
52    (SKIP&RET 2)
54    L54
54    (CONST&PUSH 7)                      ; (MPLUS)
55    (LOAD 4)
56    (CONS&PUSH)
57    (GETVALUE&PUSH 3)                   ; VAR
59    (CALL2&PUSH 8)                      ; RISCHINT
61    (GETVALUE 1)                        ; ANS
63    (CDR)
64    (CONS)
65    (JMP L44)


Disassembly of function #:|(DEFUN SCEP (EXPR VAR &AUX ...) ...)-21|
(CONST 0) = SCEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCEP
8     (SKIP&RET 1)


Disassembly of function SCEP
(CONST 0) = VAR
(CONST 1) = EXP
(CONST 2) = MTIMESP
(CONST 3) = TRIG1
(CONST 4) = LINEARP
(CONST 5) = MEXPTP
(CONST 6) = $%E
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP VAR)
writes special variable : (EXP)
60 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; EXP
7     (LOAD&PUSH 9)
8     (CALL1 2)                           ; MTIMESP
10    (JMPIFNOT1 L83)
13    (NIL&PUSH)
14    (LOAD&CDR&PUSH 10)
16    (LOAD&JMPIFNOT 0 L77)
19    L19
19    (LOAD&CAR&PUSH 0)
21    (LOAD 0)
22    (STORE 2)
23    (SKIP 1)
25    (JMPIFATOM L51)
27    (LOAD&CAR&PUSH 1)
29    (CALL1&JMPIF 3 L56)                 ; TRIG1
32    (LOAD&PUSH 1)
33    (CALL1&JMPIFNOT 5 L51)              ; MEXPTP
36    (LOAD 1)
37    (CDR)
38    (CAR&PUSH)
39    (JMPIFNOTEQTO 6 L51)                ; $%E
42    (LOAD 1)
43    (CDR)
44    (CDR)
45    (CAR&PUSH)
46    (GETVALUE&PUSH 0)                   ; VAR
48    (CALL2&JMPIF 4 L69)                 ; LINEARP
51    L51
51    (NIL)
52    (SKIP 2)
54    (JMP L83)
56    L56
56    (LOAD 1)
57    (CDR)
58    (CAR&PUSH)
59    (GETVALUE&PUSH 0)                   ; VAR
61    (CALL2&JMPIFNOT 4 L51)              ; LINEARP
64    (LOAD&PUSH 1)
65    (LOAD&CONS&STORE 5)
67    (JMP L72)
69    L69
69    (LOAD 1)
70    (SETVALUE 1)                        ; EXP
72    L72
72    (LOAD&CDR&STORE 0)
74    (LOAD&JMPIF 0 L19)
77    L77
77    (GETVALUE&PUSH 1)                   ; EXP
79    (LOAD 6)
80    (CONS)
81    (SKIP 2)
83    L83
83    (UNBIND1)
84    (SKIP 1)
86    (UNBIND1)
87    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SCE-INT (EXP S-C VAR) ...)-22|
(CONST 0) = SCE-INT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCE-INT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCE-INT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCE-INT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCE-INT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCE-INT
8     (SKIP&RET 1)


Disassembly of function SCE-INT
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = ISLINEAR
(CONST 3) = 2
(CONST 4) = POWER
(CONST 5) = ADD
(CONST 6) = DIV
(CONST 7) = MUL
(CONST 8) = %SIN
(CONST 9) = NEG
(CONST 10) = (%COS)
(CONST 11) = MUL*
(CONST 12) = (%SIN)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP)
53 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE 0)                        ; EXP
8     (CDR)
9     (CDR)
10    (CAR&PUSH)
11    (GETVALUE&PUSH 1)                   ; VAR
13    (CALL2 2)                           ; ISLINEAR
15    (CAR&PUSH)
16    (LOAD 9)
17    (CDR)
18    (CAR&PUSH)
19    (GETVALUE&PUSH 1)                   ; VAR
21    (CALL2 2)                           ; ISLINEAR
23    (CAR&PUSH)
24    (LOAD 10)
25    (CDR)
26    (CAR&PUSH)
27    (GETVALUE&PUSH 0)                   ; EXP
29    (LOAD&PUSH 3)
30    (CONST&PUSH 3)                      ; 2
31    (CALL2&PUSH 4)                      ; POWER
33    (LOAD&PUSH 3)
34    (CONST&PUSH 3)                      ; 2
35    (CALL2&PUSH 4)                      ; POWER
37    (CALL2&PUSH 5)                      ; ADD
39    (CALL2&PUSH 6)                      ; DIV
41    (LOAD&PUSH 3)
42    (LOAD&PUSH 13)
43    (CALL2&PUSH 7)                      ; MUL
45    (LOAD 13)
46    (CAR)
47    (CAR&PUSH)
48    (JMPIFEQTO 8 L69)                   ; %SIN
51    (LOAD&PUSH 3)
52    (CONST 12)                          ; (%SIN)
53    L53
53    (PUSH)
54    (LOAD&PUSH 4)
55    (LIST&PUSH 2)
57    (CALL2&PUSH 11)                     ; MUL*
59    (CALL2&PUSH 5)                      ; ADD
61    (CALL2 7)                           ; MUL
63    (SKIP 3)
65    (UNBIND 2)
67    (SKIP&RET 4)
69    L69
69    (LOAD&PUSH 3)
70    (CALL1&PUSH 9)                      ; NEG
72    (CONST 10)                          ; (%COS)
73    (JMP L53)


Disassembly of function #:|(DEFUN CHECKDERIV (EXPR) ...)-23|
(CONST 0) = CHECKDERIV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKDERIV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKDERIV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKDERIV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKDERIV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKDERIV
8     (SKIP&RET 1)


Disassembly of function CHECKDERIV
(CONST 0) = CHECKDERIV1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR&PUSH)
3     (LOAD 2)
4     (CDR)
5     (CDR&PUSH)
6     (NIL&PUSH)
7     (CALL 3 0)                          ; CHECKDERIV1
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CHECKDERIV1 (EXPR WRT OLD-WRT) ...)-24|
(CONST 0) = CHECKDERIV1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKDERIV1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKDERIV1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKDERIV1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKDERIV1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKDERIV1
8     (SKIP&RET 1)


Disassembly of function CHECKDERIV1
(CONST 0) = VAR
(CONST 1) = ALIKE1
(CONST 2) = 1
(CONST 3) = (%DERIVATIVE)
(CONST 4) = (%DERIVATIVE)
(CONST 5) = (%DERIVATIVE)
(CONST 6) = -1
(CONST 7) = ADD2*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
70 byte-code instructions:
0     L0
0     (LOAD&CAR&PUSH 2)
2     (GETVALUE&PUSH 0)                   ; VAR
4     (CALL2&JMPIFNOT 1 L70)              ; ALIKE1
7     (LOAD 2)
8     (CDR)
9     (CAR&PUSH)
10    (JMPIFEQTO 2 L52)                   ; 1
13    (CONST&PUSH 5)                      ; (%DERIVATIVE)
14    (LOAD&PUSH 4)
15    (LOAD&PUSH 3)
16    (CALLS2&PUSH 73)                    ; NREVERSE
18    (LOAD&CAR&PUSH 5)
20    (LOAD 6)
21    (CDR)
22    (CAR&PUSH)
23    (CONST&PUSH 6)                      ; -1
24    (CALL2&PUSH 7)                      ; ADD2*
26    (LOAD 7)
27    (CDR)
28    (CDR)
29    (LIST* 2)
31    L31
31    (PUSH)
32    (CALLSR 2 35)                       ; NCONC
35    L35
35    (LIST* 2)
37    (SKIP&RET 4)
39    L39
39    (LOAD 3)
40    (SKIP&RET 4)
42    L42
42    (LOAD&JMPIFNOT 1 L39)
45    (CONST&PUSH 3)                      ; (%DERIVATIVE)
46    (LOAD&PUSH 4)
47    (LOAD&PUSH 3)
48    (CALLS2 73)                         ; NREVERSE
50    (JMP L35)
52    L52
52    (LOAD 2)
53    (CDR)
54    (CDR)
55    (JMPIFNOT L42)
57    (CONST&PUSH 4)                      ; (%DERIVATIVE)
58    (LOAD&PUSH 4)
59    (LOAD&PUSH 3)
60    (CALLS2&PUSH 73)                    ; NREVERSE
62    (LOAD 5)
63    (CDR)
64    (CDR)
65    (JMP L31)
67    L67
67    (NIL)
68    (SKIP&RET 4)
70    L70
70    (LOAD 2)
71    (CDR)
72    (CDR)
73    (JMPIFNOT L67)
75    (LOAD&PUSH 3)
76    (LOAD 3)
77    (CDR)
78    (CDR&PUSH)
79    (LOAD 4)
80    (CDR)
81    (CAR&PUSH)
82    (LOAD&CAR&PUSH 5)
84    (LOAD 5)
85    (LIST*&PUSH 2)
87    (JMPTAIL 3 7 L0)


Disassembly of function #:|(DEFUN ELEM (A) ...)-25|
(CONST 0) = ELEM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELEM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELEM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELEM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELEM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELEM
8     (SKIP&RET 1)


Disassembly of function ELEM
(CONST 0) = A
(CONST 1) = FREEVAR
(CONST 2) = EXPRES
(CONST 3) = M2
(CONST 4) = AND
(CONST 5) = ELEM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXPRES A)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1&JMPIF 1 L37)                 ; FREEVAR
8     (GETVALUE 0)                        ; A
10    (JMPIFATOM L40)
12    (GETVALUE&PUSH 0)                   ; A
14    (GETVALUE&PUSH 2)                   ; EXPRES
16    (NIL&PUSH)
17    (CALL 3 3)                          ; M2
20    (JMPIF L43)
22    (CONST&PUSH 4)                      ; AND
23    (CONST&SYMBOL-FUNCTION&PUSH 5)      ; ELEM
25    (GETVALUE 0)                        ; A
27    (CDR&PUSH)
28    (CALLSR 0 22)                       ; MAPCAR
31    (CONS&PUSH)
32    (CALLS1 91)                         ; EVAL
34    L34
34    (UNBIND1)
35    (SKIP&RET 2)
37    L37
37    (T)
38    (JMP L34)
40    L40
40    (NIL)
41    (JMP L34)
43    L43
43    (T)
44    (JMP L34)


Disassembly of function #:|(DEFUN FREEVAR (A) ...)-26|
(CONST 0) = FREEVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEVAR
8     (SKIP&RET 1)


Disassembly of function FREEVAR
(CONST 0) = A
(CONST 1) = VAR
(CONST 2) = ALIKE1
(CONST 3) = ARRAY
(CONST 4) = MEMQ
(CONST 5) = "Variable of integration appeared in subscript"
(CONST 6) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR A)
47 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE 0)                        ; A
5     (JMPIFATOM L42)
7     (GETVALUE&PUSH 0)                   ; A
9     (GETVALUE&PUSH 1)                   ; VAR
11    (CALL2&JMPIF 2 L50)                 ; ALIKE1
14    (GETVALUE 0)                        ; A
16    (CAR)
17    (JMPIFATOM L27)
19    (CONST&PUSH 3)                      ; ARRAY
20    (GETVALUE 0)                        ; A
22    (CAR)
23    (CDR&PUSH)
24    (CALL2&JMPIF 4 L56)                 ; MEMQ
27    L27
27    (GETVALUE 0)                        ; A
29    (CAR&PUSH)
30    (JSR L0)
32    (JMPIFNOT1 L39)
34    (GETVALUE 0)                        ; A
36    (CDR&PUSH)
37    (JSR L0)
39    L39
39    (UNBIND1)
40    (SKIP&RET 2)
42    L42
42    (GETVALUE&PUSH 0)                   ; A
44    (GETVALUE 1)                        ; VAR
46    (EQ)
47    (NOT)
48    (JMP L39)
50    L50
50    (NIL)
51    (JMP L39)
53    L53
53    (T)
54    (JMP L39)
56    L56
56    (GETVALUE 0)                        ; A
58    (CDR&PUSH)
59    (JSR L0)
61    (JMPIF L53)
63    (CONST&PUSH 5)                      ; "Variable of integration appeared in subscript"
64    (CALL1 6)                           ; MERROR
66    (JMP L39)


Disassembly of function #:|(DEFUN VARP (X) ...)-27|
(CONST 0) = VARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE VARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; VARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; VARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE VARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; VARP
8     (SKIP&RET 1)


Disassembly of function VARP
(CONST 0) = X
(CONST 1) = VAR
(CONST 2) = ALIKE1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (GETVALUE&PUSH 1)                   ; VAR
7     (CALL2 2)                           ; ALIKE1
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTEGRALLOOKUPS (EXP) ...)-28|
(CONST 0) = INTEGRALLOOKUPS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEGRALLOOKUPS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEGRALLOOKUPS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEGRALLOOKUPS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEGRALLOOKUPS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEGRALLOOKUPS
8     (SKIP&RET 1)


Disassembly of function INTEGRALLOOKUPS
(CONST 0) = EXP
(CONST 1) = %LOG
(CONST 2) = X
(CONST 3) = ((MPLUS) ((MTIMES) X ((%LOG) X)) ((MTIMES) -1 X))
(CONST 4) = MAXIMA-SUBSTITUTE
(CONST 5) = MPLUS
(CONST 6) = ((RAT SIMP) 1 2)
(CONST 7) = MULN
(CONST 8) = MEXPT
(CONST 9) = FREEVAR
(CONST 10) = A
(CONST 11) = B
(CONST 12) = ((MTIMES) A ((MEXPT) ((%LOG) B) -1))
(CONST 13) = SIMPLIFYA
(CONST 14) = -1
(CONST 15) = MNUMP
(CONST 16) = $%I
(CONST 17) = FREEOF
(CONST 18) = 1
(CONST 19) = ADD2
(CONST 20) = 2
(CONST 21) = POWER
(CONST 22) = ASKSIGN
(CONST 23) = $ZERO
(CONST 24) = LOGMABS
(CONST 25) = ADD2*
(CONST 26) = N
(CONST 27) = ((MTIMES) ((MEXPT) N -1) ((MEXPT) X N))
(CONST 28) = 
((%SIN (MTIMES) -1 ((%COS) X)) (%COS (%SIN) X) (%TAN (%LOG) ((%SEC) X))
 (%SEC (%LOG) ((MPLUS) ((%SEC) X) ((%TAN) X))) (%COT (%LOG) ((%SIN) X))
 (%SINH (%COSH) X) (%COSH (%SINH) X) (%TANH (%LOG) ((%COSH) X))
 (%COTH (%LOG) ((%SINH) X)) (%SECH (%ATAN) ((%SINH) X))
 (%CSCH (%LOG) ((%TANH) ((MTIMES) ((RAT SIMP) 1 2) X)))
 (%CSC (MTIMES) -1 ((%LOG) ((MPLUS) ((%CSC) X) ((%COT) X)))))
(CONST 29) = NILL
(CONST 30) = SASSQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
113 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (CAR)
6     (CAR&PUSH)
7     (JMPIFEQTO 1 L47)                   ; %LOG
10    (GETVALUE 0)                        ; EXP
12    (CAR)
13    (CAR&PUSH)
14    (JMPIFEQTO 5 L55)                   ; MPLUS
17    (GETVALUE 0)                        ; EXP
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFEQTO 8 L97)                   ; MEXPT
25    (GETVALUE 0)                        ; EXP
27    (CDR)
28    (CAR&PUSH)
29    (CONST&PUSH 2)                      ; X
30    (GETVALUE 0)                        ; EXP
32    (CAR)
33    (CAR&PUSH)
34    (CONST&PUSH 28)                     ; ((%SIN # ...) (%COS # ...) ...)
35    (CONST&PUSH 29)                     ; NILL
36    (CALL 3 30)                         ; SASSQ
39    (CDR)
40    L40
40    (PUSH)
41    (CALL 3 4)                          ; MAXIMA-SUBSTITUTE
44    L44
44    (UNBIND1)
45    (SKIP&RET 2)
47    L47
47    (GETVALUE 0)                        ; EXP
49    (CDR)
50    (CAR&PUSH)
51    (CONST&PUSH 2)                      ; X
52    (CONST 3)                           ; ((MPLUS) (# X #) (# -1 X))
53    (JMP L40)
55    L55
55    (CONST&PUSH 6)                      ; ((RAT SIMP) 1 2)
56    (GETVALUE&PUSH 0)                   ; EXP
58    (GETVALUE&PUSH 0)                   ; EXP
60    (LIST&PUSH 3)
62    (NIL&PUSH)
63    (CALL2 7)                           ; MULN
65    (JMP L44)
67    L67
67    (GETVALUE&PUSH 0)                   ; EXP
69    (CONST&PUSH 10)                     ; A
70    (GETVALUE 0)                        ; EXP
72    (CDR)
73    (CAR&PUSH)
74    (CONST&PUSH 11)                     ; B
75    (CONST&PUSH 12)                     ; ((MTIMES) A ((MEXPT) (# B) -1))
76    (CALL&PUSH 3 4)                     ; MAXIMA-SUBSTITUTE
79    (CALL&PUSH 3 4)                     ; MAXIMA-SUBSTITUTE
82    (NIL&PUSH)
83    (CALL2 13)                          ; SIMPLIFYA
85    (JMP L44)
87    L87
87    (GETVALUE 0)                        ; EXP
89    (CDR)
90    (CAR&PUSH)
91    (CONST&PUSH 2)                      ; X
92    (CONST&PUSH 2)                      ; X
93    (CALL1 24)                          ; LOGMABS
95    (JMP L40)
97    L97
97    (GETVALUE 0)                        ; EXP
99    (CDR)
100   (CAR&PUSH)
101   (CALL1&JMPIF 9 L67)                 ; FREEVAR
104   (GETVALUE 0)                        ; EXP
106   (CDR)
107   (CDR)
108   (CAR&PUSH)
109   (JMPIFEQTO 14 L87)                  ; -1
112   (GETVALUE 0)                        ; EXP
114   (CDR)
115   (CDR)
116   (CAR&PUSH)
117   (CALL1&JMPIF 15 L145)               ; MNUMP
120   (CONST&PUSH 16)                     ; $%I
121   (GETVALUE 0)                        ; EXP
123   (CDR)
124   (CDR)
125   (CAR&PUSH)
126   (CALL2&JMPIFNOT 17 L145)            ; FREEOF
129   (GETVALUE 0)                        ; EXP
131   (CDR)
132   (CDR)
133   (CAR&PUSH)
134   (CONST&PUSH 18)                     ; 1
135   (CALL2&PUSH 19)                     ; ADD2
137   (CONST&PUSH 20)                     ; 2
138   (CALL2&PUSH 21)                     ; POWER
140   (CALL1&PUSH 22)                     ; ASKSIGN
142   (JMPIFEQTO 23 L87)                  ; $ZERO
145   L145
145   (GETVALUE 0)                        ; EXP
147   (CDR)
148   (CDR)
149   (CAR&PUSH)
150   (CONST&PUSH 18)                     ; 1
151   (CALL2&PUSH 25)                     ; ADD2*
153   (CONST&PUSH 26)                     ; N
154   (GETVALUE 0)                        ; EXP
156   (CDR)
157   (CAR&PUSH)
158   (CONST&PUSH 2)                      ; X
159   (CONST&PUSH 27)                     ; ((MTIMES) (# N -1) (# X N))
160   (CALL 3 4)                          ; MAXIMA-SUBSTITUTE
163   (JMP L40)


Disassembly of function #:|(DEFUN TRUE (IGNOR) ...)-29|
(CONST 0) = TRUE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRUE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRUE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRUE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRUE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRUE
8     (SKIP&RET 1)


Disassembly of function TRUE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (T)
1     (SKIP&RET 2)


Disassembly of function #:|(DEFUN RAT10 (EX) ...)-30|
(CONST 0) = RAT10
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAT10>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT10
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAT10
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAT10>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAT10
8     (SKIP&RET 1)


Disassembly of function RAT10
(CONST 0) = FREEVAR
(CONST 1) = VAR
(CONST 2) = ALIKE1
(CONST 3) = MEXPT
(CONST 4) = INTEGERP2
(CONST 5) = POWERLIST
(CONST 6) = (MPLUS MTIMES)
(CONST 7) = MEMQ
(CONST 8) = MARGS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (POWERLIST VAR)
writes special variable : (POWERLIST)
93 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L38)                 ; FREEVAR
4     (LOAD&PUSH 1)
5     (GETVALUE&PUSH 1)                   ; VAR
7     (CALL2&JMPIF 2 L41)                 ; ALIKE1
10    (LOAD 1)
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFEQTO 3 L64)                   ; MEXPT
16    (LOAD 1)
17    (CAR)
18    (CAR&PUSH)
19    (CONST&PUSH 6)                      ; (MPLUS MTIMES)
20    (CALL2&JMPIF 7 L92)                 ; MEMQ
24    (LOAD&PUSH 1)
25    (CALL1&PUSH 8)                      ; MARGS
27    (LOAD 0)
28    (CAR)
29    (JMPIFATOM L112)
32    (LOAD&CAR&PUSH 0)
34    (JMPTAIL 1 4 L0)
38    L38
38    (T)
39    (SKIP&RET 2)
41    L41
41    (NIL)
42    (SKIP&RET 2)
44    L44
44    (LOAD 1)
45    (CDR)
46    (CDR)
47    (CAR&PUSH)
48    (CALL1 4)                           ; INTEGERP2
50    (JMPIFNOT1 L141)
53    (LOAD 1)
54    (CDR)
55    (CDR)
56    (CAR&PUSH)
57    (GETVALUE 5)                        ; POWERLIST
59    (CONS)
60    (SETVALUE 5)                        ; POWERLIST
62    (SKIP&RET 2)
64    L64
64    (LOAD 1)
65    (CDR)
66    (CAR&PUSH)
67    (GETVALUE&PUSH 1)                   ; VAR
69    (CALL2&JMPIF 2 L44)                 ; ALIKE1
72    (LOAD 1)
73    (CDR)
74    (CAR&PUSH)
75    (JSR L0)
78    (JMPIFNOT1 L141)
80    (LOAD 1)
81    (CDR)
82    (CDR)
83    (CAR&PUSH)
84    (JMPTAIL 1 3 L0)
89    L89
89    (NIL)
90    (SKIP&RET 3)
92    L92
92    (LOAD&CDR&PUSH 1)
94    (LOAD&JMPIFNOT 0 L109)
97    L97
97    (LOAD&CAR&PUSH 0)
99    (JSR L0)
102   (JMPIFNOT L89)
104   (LOAD&CDR&STORE 0)
106   (LOAD&JMPIF 0 L97)
109   L109
109   (T)
110   (SKIP&RET 3)
112   L112
112   (LOAD&PUSH 0)
113   (LOAD&CAR&PUSH 1)
115   (JSR&PUSH L0)
118   (LOAD&JMPIFNOT 0 L138)
121   L121
121   (LOAD&JMPIFNOT 1 L138)
124   (LOAD&CDR&STORE 1)
126   (LOAD&JMPIFNOT 0 L134)
129   (LOAD&CAR&PUSH 1)
131   (JSR L0)
134   L134
134   (STORE 0)
135   (LOAD&JMPIF 0 L121)
138   L138
138   (POP)
139   (SKIP&RET 4)
141   L141
141   (SKIP&RET 2)


Disassembly of function #:|(DEFUN LISTGCD (POWERLIST) ...)-31|
(CONST 0) = LISTGCD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISTGCD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISTGCD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISTGCD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISTGCD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LISTGCD
8     (SKIP&RET 1)


Disassembly of function LISTGCD
(CONST 0) = POWERLIST
(CONST 1) = P
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P POWERLIST)
writes special variables : (POWERLIST P)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; POWERLIST
3     (NIL)
4     (BIND 1)                            ; P
6     (GETVALUE 0)                        ; POWERLIST
8     (CAR)
9     (SETVALUE 1)                        ; P
11    (JMP L27)
13    L13
13    (NIL)
14    (UNBIND1)
15    (JMP L44)
17    L17
17    (GETVALUE&PUSH 1)                   ; P
19    (GETVALUE 0)                        ; POWERLIST
21    (CAR&PUSH)
22    (CALLSR 2 57)                       ; GCD
25    (SETVALUE 1)                        ; P
27    L27
27    (GETVALUE 0)                        ; POWERLIST
29    (CDR)
30    (SETVALUE 0)                        ; POWERLIST
32    (GETVALUE&PUSH 1)                   ; P
34    (JMPIFEQTO 2 L13)                   ; 1
37    (GETVALUE 0)                        ; POWERLIST
39    (JMPIF L17)
41    (GETVALUE 1)                        ; P
43    (UNBIND1)
44    L44
44    (UNBIND1)
45    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTEGRATE5 (EX VAR) ...)-32|
(CONST 0) = INTEGRATE5
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEGRATE5>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEGRATE5
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEGRATE5
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEGRATE5>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEGRATE5
8     (SKIP&RET 1)


Disassembly of function INTEGRATE5
(CONST 0) = VAR
(CONST 1) = RAT8
(CONST 2) = RATINT
(CONST 3) = INTEGRATOR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 5)
4     (CALL1&JMPIF 1 L15)                 ; RAT8
7     (LOAD&PUSH 5)
8     (GETVALUE&PUSH 0)                   ; VAR
10    (CALL2 3)                           ; INTEGRATOR
12    L12
12    (UNBIND1)
13    (SKIP&RET 3)
15    L15
15    (LOAD&PUSH 5)
16    (GETVALUE&PUSH 0)                   ; VAR
18    (CALL2 2)                           ; RATINT
20    (JMP L12)


Disassembly of function #:|(DEFUN INTEGERP2 (X) ...)-33|
(CONST 0) = INTEGERP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEGERP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEGERP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEGERP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEGERP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEGERP2
8     (SKIP&RET 1)


Disassembly of function INTEGERP2
(CONST 0) = X
(CONST 1) = MAXIMA-RATIONALIZE
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALLS2&JMPIFNOT 8 L23)             ; NUMBERP
9     (GETVALUE&PUSH 0)                   ; X
11    (CALLS2&JMPIFNOT 15 L29)            ; FLOATP
14    (GETVALUE&PUSH 0)                   ; X
16    (CALL1 1)                           ; MAXIMA-RATIONALIZE
18    (STORE 0)
19    (CDR&PUSH)
20    (JMPIFEQTO 2 L35)                   ; 1
23    L23
23    (NIL)
24    (SKIP 1)
26    L26
26    (UNBIND1)
27    (SKIP&RET 2)
29    L29
29    (GETVALUE 0)                        ; X
31    (SKIP 1)
33    (JMP L26)
35    L35
35    (LOAD 0)
36    (CAR)
37    (SKIP 1)
39    (JMP L26)


Disassembly of function #:|(DEFUN RAT3 (EX IND) ...)-34|
(CONST 0) = RAT3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAT3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAT3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAT3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAT3
8     (SKIP&RET 1)


Disassembly of function RAT3
(CONST 0) = IND
(CONST 1) = FREEVAR
(CONST 2) = (MTIMES MPLUS)
(CONST 3) = MEMQ
(CONST 4) = MEXPT
(CONST 5) = MARGS
(CONST 6) = RATROOT
(CONST 7) = M2
(CONST 8) = DENOMFIND
(CONST 9) = ROOTLIST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RATROOT ROOTLIST IND)
writes special variable : (ROOTLIST)
100 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; IND
3     (LOAD&PUSH 5)
4     (CALL1&JMPIF 1 L38)                 ; FREEVAR
7     (LOAD 5)
8     (JMPIFATOM L42)
10    (LOAD 5)
11    (CAR)
12    (CAR&PUSH)
13    (CONST&PUSH 2)                      ; (MTIMES MPLUS)
14    (CALL2&JMPIF 3 L53)                 ; MEMQ
17    (LOAD 5)
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFNOTEQTO 4 L76)                ; MEXPT
23    (LOAD 5)
24    (CDR)
25    (CAR&PUSH)
26    (CALL1&JMPIFNOT 1 L101)             ; FREEVAR
30    (LOAD 5)
31    (CDR)
32    (CDR)
33    L33
33    (CAR&PUSH)
34    (T)
35    (JMP L130)
38    L38
38    (T)
39    (JMP L134)
42    L42
42    (GETVALUE 0)                        ; IND
44    (JMP L134)
47    L47
47    (NIL)
48    (SKIP 1)
50    (JMP L134)
53    L53
53    (LOAD&CDR&PUSH 5)
55    (LOAD&JMPIFNOT 0 L71)
58    L58
58    (LOAD&CAR&PUSH 0)
60    (GETVALUE&PUSH 0)                   ; IND
62    (JSR L0)
64    (JMPIFNOT L47)
66    (LOAD&CDR&STORE 0)
68    (LOAD&JMPIF 0 L58)
71    L71
71    (T)
72    (SKIP 1)
74    (JMP L134)
76    L76
76    (LOAD&PUSH 5)
77    (CALL1 5)                           ; MARGS
79    (JMP L33)
81    L81
81    (LOAD 5)
82    (CDR)
83    (CAR&PUSH)
84    (GETVALUE 0)                        ; IND
86    (JMP L130)
88    L88
88    (LOAD 5)
89    (CDR)
90    (CDR)
91    (CAR&PUSH)
92    (CALL1&PUSH 8)                      ; DENOMFIND
94    (GETVALUE 9)                        ; ROOTLIST
96    (CONS)
97    (SETVALUE 9)                        ; ROOTLIST
99    (JMP L134)
101   L101
101   (LOAD 5)
102   (CDR)
103   (CDR)
104   (CAR&PUSH)
105   (CALLS2&JMPIF 12 L81)               ; INTEGERP
108   (LOAD 5)
109   (CDR)
110   (CAR&PUSH)
111   (GETVALUE&PUSH 6)                   ; RATROOT
113   (NIL&PUSH)
114   (CALL 3 7)                          ; M2
117   (JMPIFNOT L126)
119   (LOAD 5)
120   (CDR)
121   (CDR)
122   (CAR&PUSH)
123   (CALL1&JMPIF 8 L88)                 ; DENOMFIND
126   L126
126   (LOAD 5)
127   (CDR)
128   (CAR&PUSH)
129   (NIL)
130   L130
130   (PUSH)
131   (JSR L0)
134   L134
134   (UNBIND1)
135   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SUBST4 (EX) ...)-35|
(CONST 0) = SUBST4
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBST4>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBST4
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBST4
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBST4>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBST4
8     (SKIP&RET 1)


Disassembly of function SUBST4
(CONST 0) = FREEVAR
(CONST 1) = A
(CONST 2) = MEXPT
(CONST 3) = RATROOT
(CONST 4) = M2
(CONST 5) = B
(CONST 6) = K
(CONST 7) = TIMESK
(CONST 8) = INTEGERP2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K B A RATROOT)
65 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L42)                 ; FREEVAR
4     (LOAD 1)
5     (JMPIFATOM L45)
7     (LOAD 1)
8     (CAR)
9     (CAR&PUSH)
10    (JMPIFNOTEQTO 2 L49)                ; MEXPT
13    (LOAD 1)
14    (CDR)
15    (CAR&PUSH)
16    (GETVALUE&PUSH 3)                   ; RATROOT
18    (NIL&PUSH)
19    (CALL 3 4)                          ; M2
22    (JMPIF L75)
24    (LOAD&CAR&PUSH 1)
26    (LOAD 2)
27    (CDR)
28    (CAR&PUSH)
29    (JSR&PUSH L0)
31    (LOAD 3)
32    (CDR)
33    (CDR)
34    (CAR&PUSH)
35    (JSR L0)
37    L37
37    (PUSH)
38    (LIST 3)
40    (SKIP&RET 2)
42    L42
42    (LOAD 1)
43    (SKIP&RET 2)
45    L45
45    (GETVALUE 1)                        ; A
47    (SKIP&RET 2)
49    L49
49    (NIL&PUSH)
50    (LOAD&PUSH 2)
51    (JMP L64)
53    L53
53    (LOAD&CAR&PUSH 0)
55    (LOAD&PUSH 0)
56    (JSR&PUSH L0)
58    (LOAD&CONS&STORE 2)
60    (SKIP 1)
62    (LOAD&CDR&STORE 0)
64    L64
64    (LOAD&PUSH 0)
65    (CALLS1&JMPIFNOT 146 L53)           ; ENDP
68    (SKIP 1)
70    (LOAD&PUSH 0)
71    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
73    (SKIP&RET 3)
75    L75
75    (LOAD&CAR&PUSH 1)
77    (GETVALUE&PUSH 5)                   ; B
79    (GETVALUE&PUSH 6)                   ; K
81    (LOAD 4)
82    (CDR)
83    (CDR)
84    (CAR&PUSH)
85    (CALL2&PUSH 7)                      ; TIMESK
87    (CALL1 8)                           ; INTEGERP2
89    (JMP L37)


Disassembly of function #:|(DEFUN FINDINGK (LIST) ...)-36|
(CONST 0) = FINDINGK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDINGK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDINGK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDINGK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDINGK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDINGK
8     (SKIP&RET 1)


Disassembly of function FINDINGK
(CONST 0) = 1
(CONST 1) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1
1     (LOAD 2)
2     (BIND 1)                            ; L
4     (GETVALUE 1)                        ; L
6     (JMPIFNOT L25)
8     L8
8     (LOAD&PUSH 3)
9     (GETVALUE 1)                        ; L
11    (CAR&PUSH)
12    (CALLSR&STORE 2 58 3)               ; LCM
16    (GETVALUE 1)                        ; L
18    (CDR)
19    (SETVALUE 1)                        ; L
21    (GETVALUE 1)                        ; L
23    (JMPIF L8)
25    L25
25    (LOAD 3)
26    (UNBIND1)
27    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DENOMFIND (X) ...)-37|
(CONST 0) = DENOMFIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DENOMFIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DENOMFIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DENOMFIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DENOMFIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DENOMFIND
8     (SKIP&RET 1)


Disassembly of function DENOMFIND
(CONST 0) = X
(CONST 1) = RATNUMP
(CONST 2) = 1
(CONST 3) = MAXIMA-RATIONALIZE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
26 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L26)                 ; RATNUMP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALLS2&JMPIFNOT 8 L33)             ; NUMBERP
13    (GETVALUE&PUSH 0)                   ; X
15    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
18    (GETVALUE&PUSH 0)                   ; X
20    (CALL1 3)                           ; MAXIMA-RATIONALIZE
22    (CDR)
23    L23
23    (UNBIND1)
24    (SKIP&RET 2)
26    L26
26    (GETVALUE 0)                        ; X
28    (CDR)
29    (CDR)
30    (CAR)
31    (JMP L23)
33    L33
33    (NIL)
34    (JMP L23)
36    L36
36    (CONST 2)                           ; 1
37    (JMP L23)


Disassembly of function #:|(DEFUN RATROOT (EXP VAR RATROOT ...) ...)-38|
(CONST 0) = RATROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATROOT
8     (SKIP&RET 1)


Disassembly of function RATROOT
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = RATROOT
(CONST 3) = W
(CONST 4) = ROOTLIST
(CONST 5) = K
(CONST 6) = Y
(CONST 7) = CHEBYF
(CONST 8) = RAT3
(CONST 9) = FINDINGK
(CONST 10) = 
((MQUOTIENT) ((MPLUS) ((MTIMES) B E) ((MTIMES) -1 D ((MEXPT) VAR K)))
 ((MPLUS) ((MTIMES) C ((MEXPT) VAR K)) ((MTIMES) -1 E A)))
(CONST 11) = SUBLISS
(CONST 12) = SIMPLIFY
(CONST 13) = SUBST41
(CONST 14) = (MTIMES)
(CONST 15) = 
((MQUOTIENT)
 ((MTIMES) E
  ((MPLUS) ((MTIMES) A D K ((MEXPT) VAR ((MPLUS) -1 K)))
   ((MTIMES) -1 ((MTIMES) B C K ((MEXPT) VAR ((MPLUS) -1 K))))))
 ((MEXPT) ((MPLUS) ((MTIMES) C ((MEXPT) VAR K)) ((MTIMES) -1 A)) 2))
(CONST 16) = INTEGRATOR
(CONST 17) = (MEXPT)
(CONST 18) = (MEXPT)
(CONST 19) = -1
(CONST 20) = SUBSTINT
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RATROOT Y W K ROOTLIST VAR EXP)
writes special variables : (K Y)
72 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; EXP
3     (LOAD 6)
4     (BIND 1)                            ; VAR
6     (LOAD 8)
7     (BIND 2)                            ; RATROOT
9     (LOAD 10)
10    (BIND 3)                            ; W
12    (NIL)
13    (BIND 4)                            ; ROOTLIST
15    (NIL)
16    (BIND 5)                            ; K
18    (NIL)
19    (BIND 6)                            ; Y
21    (NIL&PUSH)
22    (GETVALUE&PUSH 0)                   ; EXP
24    (GETVALUE&PUSH 1)                   ; VAR
26    (CALL2 7)                           ; CHEBYF
28    (SETVALUE 6)                        ; Y
30    (JMPIF L106)
33    (GETVALUE&PUSH 0)                   ; EXP
35    (T&PUSH)
36    (CALL2&JMPIFNOT 8 L114)             ; RAT3
40    (GETVALUE&PUSH 4)                   ; ROOTLIST
42    (CALL1 9)                           ; FINDINGK
44    (SETVALUE 5)                        ; K
46    (CONST&PUSH 5)                      ; K
47    (GETVALUE 5)                        ; K
49    (CONS&PUSH)
50    (GETVALUE 3)                        ; W
52    (CONS)
53    (STORE 0)
54    (GETVALUE&PUSH 0)                   ; EXP
56    (LOAD&PUSH 1)
57    (CONST&PUSH 10)                     ; ((MQUOTIENT) (# # #) (# # #))
58    (CALL2&PUSH 11)                     ; SUBLISS
60    (CALL1&PUSH 12)                     ; SIMPLIFY
62    (GETVALUE&PUSH 1)                   ; VAR
64    (CALL 3 13)                         ; SUBST41
67    (SETVALUE 6)                        ; Y
69    (CONST&PUSH 14)                     ; (MTIMES)
70    (GETVALUE&PUSH 6)                   ; Y
72    (LOAD&PUSH 2)
73    (CONST&PUSH 15)                     ; ((MQUOTIENT) (# E #) (# # 2))
74    (CALL2&PUSH 11)                     ; SUBLISS
76    (LIST&PUSH 3)
78    (CALL1&PUSH 12)                     ; SIMPLIFY
80    (GETVALUE&PUSH 1)                   ; VAR
82    (CALL2 16)                          ; INTEGRATOR
84    (SETVALUE 6)                        ; Y
86    (CONST&PUSH 17)                     ; (MEXPT)
87    (GETVALUE&PUSH 2)                   ; RATROOT
89    (CONST&PUSH 18)                     ; (MEXPT)
90    (GETVALUE&PUSH 5)                   ; K
92    (CONST&PUSH 19)                     ; -1
93    (LIST&PUSH 3)
95    (LIST&PUSH 3)
97    (CALL1&PUSH 12)                     ; SIMPLIFY
99    (GETVALUE&PUSH 1)                   ; VAR
101   (GETVALUE&PUSH 6)                   ; Y
103   (CALL 3 20)                         ; SUBSTINT
106   L106
106   (SKIP 1)
108   (UNBIND 3)
110   L110
110   (UNBIND 4)
112   (SKIP&RET 5)
114   L114
114   (NIL)
115   (SKIP 1)
117   (UNBIND 3)
119   (JMP L110)


Disassembly of function #:|(DEFUN SUBST41 (EXP A B) ...)-39|
(CONST 0) = SUBST41
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBST41>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBST41
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBST41
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBST41>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBST41
8     (SKIP&RET 1)


Disassembly of function SUBST41
(CONST 0) = EXP
(CONST 1) = A
(CONST 2) = B
(CONST 3) = SUBST4
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
10 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; A
6     (LOAD 7)
7     (BIND 2)                            ; B
9     (GETVALUE&PUSH 0)                   ; EXP
11    (CALL1 3)                           ; SUBST4
13    (UNBIND 3)
15    (SKIP&RET 4)


Disassembly of function #:|(DEFUN CHEBYF (EXP VAR) ...)-40|
(CONST 0) = CHEBYF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHEBYF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHEBYF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHEBYF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHEBYF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHEBYF
8     (SKIP&RET 1)


Disassembly of function CHEBYF
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = W
(CONST 3) = 
((MTIMES) ((MEXPT) (VAR VARP) (R1 NUMBERP))
 ((MEXPT)
  ((MPLUS) ((MTIMES) ((COEFFTT) (C2 FREEVAR)) ((MEXPT) (VAR VARP) (Q FREE1)))
   ((COEFFPP) (C1 FREEVAR)))
  (R2 NUMBERP))
 ((COEFFTT) (A FREEVAR)))
(CONST 4) = M2
(CONST 5) = Q
(CONST 6) = NILL
(CONST 7) = SASSQ
(CONST 8) = A
(CONST 9) = DIV*
(CONST 10) = R1
(CONST 11) = 1
(CONST 12) = SIMPLIFY
(CONST 13) = NEG
(CONST 14) = ADDN
(CONST 15) = R2
(CONST 16) = DENOMFIND
(CONST 17) = TIMESK
(CONST 18) = INTEGERP2
(CONST 19) = D1
(CONST 20) = D2
(CONST 21) = N1
(CONST 22) = N2
(CONST 23) = 0
(CONST 24) = ((MPLUS) C1 ((MTIMES) C2 ((MEXPT) VAR Q)))
(CONST 25) = SUBLISS
(CONST 26) = ((MTIMES) A ((MEXPT) VAR R2) ((MEXPT) C2 ((MTIMES) -1 ((MPLUS) R1 1))))
(CONST 27) = ((MPLUS) VAR ((MTIMES) -1 C1))
(CONST 28) = EXPANDEXPT
(CONST 29) = EXPANDS
(CONST 30) = INTEGRATOR
(CONST 31) = SUBSTINT
(CONST 32) = ((MEXPT) VAR ((MQUOTIENT) Q D1))
(CONST 33) = 
((MTIMES) D1 A ((MEXPT) VAR ((MPLUS) N1 D1 -1))
 ((MEXPT) ((MPLUS) ((MTIMES) C2 ((MEXPT) VAR D1)) C1) R2))
(CONST 34) = RATINT
(CONST 35) = ((MEXPT) ((MPLUS) C1 ((MTIMES) C2 ((MEXPT) VAR Q))) ((MQUOTIENT) 1 D2))
(CONST 36) = 
((MTIMES) A D2 ((MEXPT) C2 ((MTIMES) -1 ((MPLUS) R1 1)))
 ((MEXPT) VAR ((MPLUS) N2 D2 -1))
 ((MEXPT) ((MPLUS) ((MEXPT) VAR D2) ((MTIMES) -1 C1)) R1))
(CONST 37) = ADD2*
(CONST 38) = 
((MEXPT)
 ((MQUOTIENT) ((MPLUS) C1 ((MTIMES) C2 ((MEXPT) VAR Q))) ((MEXPT) VAR Q))
 ((MQUOTIENT) 1 D1))
(CONST 39) = 
((MTIMES) -1 A D1 ((MEXPT) C1 ((MPLUS) R1 R2 1))
 ((MEXPT) VAR ((MPLUS) N2 D1 -1))
 ((MEXPT) ((MPLUS) ((MEXPT) VAR D1) ((MTIMES) -1 C2))
  ((MTIMES) -1 ((MPLUS) R1 R2 2))))
(CONST 40) = (%INTEGRATE)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR W EXP)
writes special variable : (W)
185 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (PUSH-NIL 6)
8     (NIL)
9     (BIND 2)                            ; W
11    (NIL&PUSH)
12    (GETVALUE&PUSH 0)                   ; EXP
14    (CONST&PUSH 3)                      ; ((MTIMES) (# # #) (# # #) (# #))
15    (NIL&PUSH)
16    (CALL 3 4)                          ; M2
19    (SETVALUE 2)                        ; W
21    (JMPIFNOT L127)
24    (CONST&PUSH 5)                      ; Q
25    (GETVALUE&PUSH 2)                   ; W
27    (CONST&PUSH 6)                      ; NILL
28    (CALL 3 7)                          ; SASSQ
31    (CDR)
32    (STORE 0)
33    (CONST&PUSH 8)                      ; A
34    (CONST&PUSH 8)                      ; A
35    (GETVALUE&PUSH 2)                   ; W
37    (CONST&PUSH 6)                      ; NILL
38    (CALL 3 7)                          ; SASSQ
41    (CDR&PUSH)
42    (LOAD&PUSH 2)
43    (CALL2 9)                           ; DIV*
45    (CONS&PUSH)
46    (CONST&PUSH 10)                     ; R1
47    (CONST&PUSH 11)                     ; 1
48    (LOAD&PUSH 3)
49    (CALL1&PUSH 12)                     ; SIMPLIFY
51    (CALL1&PUSH 13)                     ; NEG
53    (CONST&PUSH 10)                     ; R1
54    (GETVALUE&PUSH 2)                   ; W
56    (CONST&PUSH 6)                      ; NILL
57    (CALL 3 7)                          ; SASSQ
60    (CDR&PUSH)
61    (LIST&PUSH 3)
63    (NIL&PUSH)
64    (CALL2&PUSH 14)                     ; ADDN
66    (LOAD&PUSH 3)
67    (CALL2 9)                           ; DIV*
69    (CONS&PUSH)
70    (GETVALUE 2)                        ; W
72    (LIST* 2)
74    (SETVALUE 2)                        ; W
76    (CONST&PUSH 10)                     ; R1
77    (GETVALUE&PUSH 2)                   ; W
79    (CONST&PUSH 6)                      ; NILL
80    (CALL 3 7)                          ; SASSQ
83    (CDR)
84    (STORE 9)
86    (CONST&PUSH 15)                     ; R2
87    (GETVALUE&PUSH 2)                   ; W
89    (CONST&PUSH 6)                      ; NILL
90    (CALL 3 7)                          ; SASSQ
93    (CDR)
94    (STORE 8)
96    (LOAD&PUSH 9)
97    (CALL1 16)                          ; DENOMFIND
99    (STORE 7)
100   (JMPIFNOT L127)
102   (LOAD&PUSH 8)
103   (CALL1 16)                          ; DENOMFIND
105   (STORE 6)
106   (JMPIFNOT L127)
108   (LOAD&PUSH 9)
109   (LOAD&PUSH 8)
110   (CALL2&PUSH 17)                     ; TIMESK
112   (CALL1 18)                          ; INTEGERP2
114   (STORE 5)
115   (JMPIFNOT L127)
117   (LOAD&PUSH 8)
118   (LOAD&PUSH 7)
119   (CALL2&PUSH 17)                     ; TIMESK
121   (CALL1 18)                          ; INTEGERP2
123   (STORE 4)
124   (JMPIF L197)
127   L127
127   (NIL)
128   (SKIP 1)
130   (UNBIND1)
131   (SKIP 6)
133   (JMP L292)
136   L136
136   (GETVALUE&PUSH 2)                   ; W
138   (CONST&PUSH 24)                     ; ((MPLUS) C1 (# C2 #))
139   (CALL2&PUSH 25)                     ; SUBLISS
141   (GETVALUE&PUSH 1)                   ; VAR
143   (GETVALUE&PUSH 2)                   ; W
145   (CONST&PUSH 26)                     ; ((MTIMES) A ((MEXPT) VAR R2) ...)
146   (CALL2&PUSH 25)                     ; SUBLISS
148   (LIST&PUSH 1)
150   (GETVALUE&PUSH 2)                   ; W
152   (CONST&PUSH 27)                     ; ((MPLUS) VAR ((MTIMES) -1 C1))
153   (CALL2&PUSH 25)                     ; SUBLISS
155   (LOAD&PUSH 13)
156   (CALL2 28)                          ; EXPANDEXPT
158   (CDR&PUSH)
159   (CALL2&PUSH 29)                     ; EXPANDS
161   (GETVALUE&PUSH 1)                   ; VAR
163   (CALL2 30)                          ; INTEGRATOR
165   (JMP L268)
168   L168
168   (GETVALUE&PUSH 2)                   ; W
170   (CONST&PUSH 32)                     ; ((MEXPT) VAR ((MQUOTIENT) Q D1))
172   (CALL2&PUSH 25)                     ; SUBLISS
174   (GETVALUE&PUSH 1)                   ; VAR
176   (GETVALUE&PUSH 2)                   ; W
178   (CONST 33)                          ; ((MTIMES) D1 A ...)
180   (JMP L259)
183   L183
183   (GETVALUE&PUSH 2)                   ; W
185   (CONST&PUSH 35)                     ; ((MEXPT) (# C1 #) (# 1 D2))
187   (CALL2&PUSH 25)                     ; SUBLISS
189   (GETVALUE&PUSH 1)                   ; VAR
191   (GETVALUE&PUSH 2)                   ; W
193   (CONST 36)                          ; ((MTIMES) A D2 ...)
195   (JMP L259)
197   L197
197   (CONST&PUSH 19)                     ; D1
198   (LOAD 8)
199   (CONS&PUSH)
200   (CONST&PUSH 20)                     ; D2
201   (LOAD 8)
202   (CONS&PUSH)
203   (CONST&PUSH 21)                     ; N1
204   (LOAD 8)
205   (CONS&PUSH)
206   (CONST&PUSH 22)                     ; N2
207   (LOAD 8)
208   (CONS&PUSH)
209   (GETVALUE 2)                        ; W
211   (LIST* 4)
213   (SETVALUE 2)                        ; W
215   (LOAD&PUSH 9)
216   (CALL1&JMPIFNOT 18 L226)            ; INTEGERP2
219   (LOAD&PUSH 9)
220   (CONST&PUSH 23)                     ; 0
221   (CALLSR&JMPIF 1 48 L136)            ; >
226   L226
226   (LOAD&PUSH 8)
227   (CALL1&JMPIF 18 L168)               ; INTEGERP2
230   (LOAD&PUSH 9)
231   (CALL1&JMPIFNOT 18 L240)            ; INTEGERP2
234   (LOAD&PUSH 9)
235   (CONST&PUSH 23)                     ; 0
236   (CALLSR&JMPIF 1 47 L183)            ; <
240   L240
240   (LOAD&PUSH 9)
241   (LOAD&PUSH 9)
242   (CALL2&PUSH 37)                     ; ADD2*
244   (CALL1&JMPIFNOT 18 L279)            ; INTEGERP2
247   (GETVALUE&PUSH 2)                   ; W
249   (CONST&PUSH 38)                     ; ((MEXPT) (# # #) (# 1 D1))
251   (CALL2&PUSH 25)                     ; SUBLISS
253   (GETVALUE&PUSH 1)                   ; VAR
255   (GETVALUE&PUSH 2)                   ; W
257   (CONST 39)                          ; ((MTIMES) -1 A D1 ...)
259   L259
259   (PUSH)
260   (CALL2&PUSH 25)                     ; SUBLISS
262   (CALL1&PUSH 12)                     ; SIMPLIFY
264   (GETVALUE&PUSH 1)                   ; VAR
266   (CALL2 34)                          ; RATINT
268   L268
268   (PUSH)
269   (CALL 3 31)                         ; SUBSTINT
272   (SKIP 1)
274   (UNBIND1)
275   (SKIP 6)
277   (JMP L292)
279   L279
279   (CONST&PUSH 40)                     ; (%INTEGRATE)
281   (GETVALUE&PUSH 0)                   ; EXP
283   (GETVALUE&PUSH 1)                   ; VAR
285   (LIST 3)
287   (SKIP 1)
289   (UNBIND1)
290   (SKIP 6)
292   L292
292   (UNBIND 2)
294   (SKIP&RET 3)


Disassembly of function #:|(DEFUN GREATERRATP (X1 X2) ...)-41|
(CONST 0) = GREATERRATP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GREATERRATP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GREATERRATP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GREATERRATP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GREATERRATP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GREATERRATP
8     (SKIP&RET 1)


Disassembly of function GREATERRATP
(CONST 0) = RATNUMP
(CONST 1) = 1.0
(CONST 2) = QUOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
43 byte-code instructions:
0     L0
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIFNOT 8 L8)              ; NUMBERP
4     (LOAD&PUSH 1)
5     (CALLS2&JMPIF 8 L19)                ; NUMBERP
8     L8
8     (LOAD&PUSH 2)
9     (CALL1&JMPIF 0 L26)                 ; RATNUMP
12    (LOAD&PUSH 1)
13    (CALL1&JMPIF 0 L43)                 ; RATNUMP
16    (NIL)
17    (SKIP&RET 3)
19    L19
19    (LOAD&PUSH 2)
20    (LOAD&PUSH 2)
21    (CALLSR 1 48)                       ; >
24    (SKIP&RET 3)
26    L26
26    (LOAD 2)
27    (CDR)
28    (CAR&PUSH)
29    (CONST&PUSH 1)                      ; 1.0
30    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
32    (LOAD 3)
33    (CDR)
34    (CDR)
35    (CAR&PUSH)
36    (CALL2&PUSH 2)                      ; QUOT
38    (LOAD&PUSH 2)
39    (JMPTAIL 2 5 L0)
43    L43
43    (LOAD&PUSH 2)
44    (LOAD 2)
45    (CDR)
46    (CAR&PUSH)
47    (CONST&PUSH 1)                      ; 1.0
48    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
50    (LOAD 3)
51    (CDR)
52    (CDR)
53    (CAR&PUSH)
54    (CALL2&PUSH 2)                      ; QUOT
56    (JMPTAIL 2 5 L0)


Disassembly of function #:|(DEFUN TRIG1 (X) ...)-42|
(CONST 0) = TRIG1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG1
8     (SKIP&RET 1)


Disassembly of function TRIG1
(CONST 0) = X
(CONST 1) = (%SIN %COS)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (CONST&PUSH 1)                      ; (%SIN %COS)
7     (CALL2 2)                           ; MEMQ
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUPERTRIG (EXP) ...)-43|
(CONST 0) = SUPERTRIG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUPERTRIG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUPERTRIG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUPERTRIG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUPERTRIG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUPERTRIG
8     (SKIP&RET 1)


Disassembly of function SUPERTRIG
(CONST 0) = EXP
(CONST 1) = FREEVAR
(CONST 2) = (MPLUS MTIMES)
(CONST 3) = MEMQ
(CONST 4) = MEXPT
(CONST 5) = %LOG
(CONST 6) = (%SIN %COS %TAN %SEC %COT %CSC)
(CONST 7) = TRIGARG
(CONST 8) = M2
(CONST 9) = ((MPLUS) ((COEFFPT) (B FREEVAR) (X VARP)) ((COEFFPT) (A FREEVAR)))
(CONST 10) = NOTSAME
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TRIGARG EXP)
writes special variable : (NOTSAME)
96 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1&JMPIF 1 L54)                 ; FREEVAR
8     (GETVALUE 0)                        ; EXP
10    (JMPIFATOM L57)
12    (GETVALUE 0)                        ; EXP
14    (CAR)
15    (CAR&PUSH)
16    (CONST&PUSH 2)                      ; (MPLUS MTIMES)
17    (CALL2&JMPIF 3 L60)                 ; MEMQ
20    (GETVALUE 0)                        ; EXP
22    (CAR)
23    (CAR&PUSH)
24    (JMPIFEQTO 4 L86)                   ; MEXPT
27    (GETVALUE 0)                        ; EXP
29    (CAR)
30    (CAR&PUSH)
31    (JMPIFEQTO 5 L100)                  ; %LOG
35    (GETVALUE 0)                        ; EXP
37    (CAR)
38    (CAR&PUSH)
39    (CONST&PUSH 6)                      ; (%SIN %COS %TAN %SEC %COT %CSC)
40    (CALL2&JMPIF 3 L113)                ; MEMQ
44    (GETVALUE 0)                        ; EXP
46    L46
46    (CDR)
47    (CAR)
48    L48
48    (PUSH)
49    (JSR L0)
51    L51
51    (UNBIND1)
52    (SKIP&RET 2)
54    L54
54    (T)
55    (JMP L51)
57    L57
57    (NIL)
58    (JMP L51)
60    L60
60    (GETVALUE 0)                        ; EXP
62    (CDR)
63    (CAR&PUSH)
64    (JSR L0)
67    (JMPIFNOT1 L51)
69    (GETVALUE 0)                        ; EXP
71    (CDR)
72    (CDR)
73    (NOT)
74    (JMPIF1 L51)
76    (GETVALUE 0)                        ; EXP
78    (CAR&PUSH)
79    (GETVALUE 0)                        ; EXP
81    (CDR)
82    (CDR)
83    (CONS)
84    (JMP L48)
86    L86
86    (GETVALUE 0)                        ; EXP
88    (CDR)
89    (CAR&PUSH)
90    (JSR L0)
93    (JMPIFNOT1 L51)
95    (GETVALUE 0)                        ; EXP
97    (CDR)
98    (JMP L46)
100   L100
100   (GETVALUE 0)                        ; EXP
102   (JMP L46)
104   L104
104   (T)
105   (JMP L51)
107   L107
107   (T)
108   (SETVALUE 10)                       ; NOTSAME
110   (NIL)
111   (JMP L51)
113   L113
113   (GETVALUE 0)                        ; EXP
115   (CDR)
116   (CAR&PUSH)
117   (GETVALUE&PUSH 7)                   ; TRIGARG
119   (NIL&PUSH)
120   (CALL 3 8)                          ; M2
123   (JMPIF L104)
125   (GETVALUE 0)                        ; EXP
127   (CDR)
128   (CAR&PUSH)
129   (CONST&PUSH 9)                      ; ((MPLUS) (# # #) (# #))
130   (NIL&PUSH)
131   (CALL 3 8)                          ; M2
134   (JMPIF L107)
136   (GETVALUE 0)                        ; EXP
138   (JMP L46)


Disassembly of function #:|(DEFUN SUBST2S (EX PAT) ...)-44|
(CONST 0) = SUBST2S
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBST2S>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBST2S
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBST2S
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBST2S>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBST2S
8     (SKIP&RET 1)


Disassembly of function SUBST2S
(CONST 0) = M2
(CONST 1) = VAR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
28 byte-code instructions:
0     (LOAD&JMPIF 2 L16)
3     L3
3     (NIL)
4     (SKIP&RET 3)
6     L6
6     (GETVALUE 1)                        ; VAR
8     (SKIP&RET 3)
10    L10
10    (LOAD 2)
11    (SKIP&RET 3)
13    L13
13    (LOAD&JMPIFNOT 2 L3)
16    L16
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 2)
18    (NIL&PUSH)
19    (CALL 3 0)                          ; M2
22    (JMPIF L6)
24    (LOAD 2)
25    (JMPIFATOM L10)
27    (LOAD&CAR&PUSH 2)
29    (LOAD&PUSH 2)
30    (JSR&PUSH L13)
32    (LOAD&CDR&PUSH 3)
34    (LOAD&PUSH 3)
35    (JSR L13)
37    (CONS)
38    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MONSTERTRIG (EXP VAR TRIGARG) ...)-45|
(CONST 0) = MONSTERTRIG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MONSTERTRIG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MONSTERTRIG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MONSTERTRIG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MONSTERTRIG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MONSTERTRIG
8     (SKIP&RET 1)


Disassembly of function MONSTERTRIG
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = TRIGARG
(CONST 3) = RISCHINT
(CONST 4) = NOTSAME
(CONST 5) = W
(CONST 6) = A
(CONST 7) = B
(CONST 8) = Y
(CONST 9) = D
(CONST 10) = SUPERTRIG
(CONST 11) = 
((MTIMES) ((COEFFTT) (A FREEVAR))
 (((B TRIG1)) ((MTIMES) (X VARP) ((COEFFTT) (M FREEVAR))))
 (((D TRIG1)) ((MTIMES) (X VARP) ((COEFFTT) (N FREEVAR)))))
(CONST 12) = M2
(CONST 13) = NILL
(CONST 14) = SASSQ
(CONST 15) = (%SIN %COS)
(CONST 16) = MEMQ
(CONST 17) = (%SIN %COS)
(CONST 18) = %SIN
(CONST 19) = 
((MTIMES) A
 ((MPLUS)
  ((MQUOTIENT) ((%SIN) ((MTIMES) ((MPLUS) M ((MTIMES) -1 N)) X))
   ((MTIMES) 2 ((MPLUS) M ((MTIMES) -1 N))))
  ((MTIMES) -1
   ((MQUOTIENT) ((%SIN) ((MTIMES) ((MPLUS) M N) X))
    ((MTIMES) 2 ((MPLUS) M N))))))
(CONST 20) = SUBLISS
(CONST 21) = SUBVAR
(CONST 22) = %COS
(CONST 23) = 
((MTIMES) A
 ((MPLUS)
  ((MQUOTIENT) ((%SIN) ((MTIMES) ((MPLUS) M ((MTIMES) -1 N)) X))
   ((MTIMES) 2 ((MPLUS) M ((MTIMES) -1 N))))
  ((MQUOTIENT) ((%SIN) ((MTIMES) ((MPLUS) M N) X))
   ((MTIMES) 2 ((MPLUS) M N)))))
(CONST 24) = M
(CONST 25) = N
(CONST 26) = 
((MTIMES) -1 A
 ((MPLUS)
  ((MQUOTIENT) ((%COS) ((MTIMES) ((MPLUS) M ((MTIMES) -1 N)) X))
   ((MTIMES) 2 ((MPLUS) M ((MTIMES) -1 N))))
  ((MQUOTIENT) ((%COS) ((MTIMES) ((MPLUS) M N) X))
   ((MTIMES) 2 ((MPLUS) M N)))))
(CONST 27) = 
((MTIMES) ((COEFFTT) (A FREEVAR))
 (((B TRIG1)) ((MTIMES) (X VARP) ((COEFFTT) (N INTEGERP2))))
 ((COEFFTT) (C SUPERTRIG)))
(CONST 28) = (MTIMES)
(CONST 29) = SCH-REPLACE
(CONST 30) = C
(CONST 31) = X
(CONST 32) = SUPERCOSNX
(CONST 33) = MAXIMA-SUBSTITUTE
(CONST 34) = SUPERSINX
(CONST 35) = $EXPAND
(CONST 36) = INTEGRATOR
(CONST 37) = SUBST2S
(CONST 38) = ((MPLUS) ((COEFFPT) (B FREEVAR) (X VARP)) ((COEFFPT) (A FREEVAR)))
(CONST 39) = DIV*
(CONST 40) = TRIGINT
(CONST 41) = SUBSTINT
(CONST 42) = ((MTIMES) ((COEFFTT) (D FREEVAR)) ((%INTEGRATE) (B TRUE) (C TRUE)))
(CONST 43) = (%INTEGRATE)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A W D B Y VAR NOTSAME EXP TRIGARG)
writes special variables : (A W D B TRIGARG Y)
199 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (LOAD 7)
7     (BIND 2)                            ; TRIGARG
9     (GETVALUE 2)                        ; TRIGARG
11    (JMPIFCONSP L74)
13    (NIL)
14    (BIND 4)                            ; NOTSAME
16    (NIL)
17    (BIND 5)                            ; W
19    (NIL)
20    (BIND 6)                            ; A
22    (NIL)
23    (BIND 7)                            ; B
25    (NIL)
26    (BIND 8)                            ; Y
28    (NIL)
29    (BIND 9)                            ; D
31    (GETVALUE&PUSH 0)                   ; EXP
33    (CALL1&JMPIF 10 L283)               ; SUPERTRIG
37    (GETVALUE 4)                        ; NOTSAME
39    (JMPIFNOT L68)
41    (GETVALUE&PUSH 0)                   ; EXP
43    (CONST&PUSH 11)                     ; ((MTIMES) (# #) (# #) (# #))
44    (NIL&PUSH)
45    (CALL 3 12)                         ; M2
48    (SETVALUE 8)                        ; Y
50    (JMPIF L96)
52    (GETVALUE 1)                        ; VAR
54    (SETVALUE 2)                        ; TRIGARG
56    (GETVALUE&PUSH 0)                   ; EXP
58    (CONST&PUSH 27)                     ; ((MTIMES) (# #) (# #) (# #))
59    (NIL&PUSH)
60    (CALL 3 12)                         ; M2
63    (SETVALUE 8)                        ; Y
65    (JMPIF L222)
68    L68
68    (NIL)
69    (UNBIND 6)
71    (JMP L339)
74    L74
74    (GETVALUE&PUSH 0)                   ; EXP
76    (GETVALUE&PUSH 1)                   ; VAR
78    (CALL2 3)                           ; RISCHINT
80    (JMP L339)
83    L83
83    (GETVALUE&PUSH 8)                   ; Y
85    (CONST 19)                          ; ((MTIMES) A (# # #))
86    (JMP L201)
89    L89
89    (GETVALUE&PUSH 8)                   ; Y
91    (CONST 23)                          ; ((MTIMES) A (# # #))
93    (JMP L201)
96    L96
96    (CONST&PUSH 7)                      ; B
97    (GETVALUE&PUSH 8)                   ; Y
99    (CONST&PUSH 13)                     ; NILL
100   (CALL 3 14)                         ; SASSQ
103   (CDR)
104   (SETVALUE 7)                        ; B
106   (CAR&PUSH)
107   (CONST&PUSH 15)                     ; (%SIN %COS)
108   (CALL2&JMPIFNOT 16 L68)             ; MEMQ
111   (CONST&PUSH 9)                      ; D
112   (GETVALUE&PUSH 8)                   ; Y
114   (CONST&PUSH 13)                     ; NILL
115   (CALL 3 14)                         ; SASSQ
118   (CDR)
119   (SETVALUE 9)                        ; D
121   (CAR&PUSH)
122   (CONST&PUSH 17)                     ; (%SIN %COS)
123   (CALL2&JMPIFNOT 16 L68)             ; MEMQ
126   (GETVALUE 7)                        ; B
128   (CAR&PUSH)
129   (JMPIFNOTEQTO 18 L138)              ; %SIN
132   (GETVALUE 9)                        ; D
134   (CAR&PUSH)
135   (JMPIFEQTO 18 L83)                  ; %SIN
138   L138
138   (GETVALUE 7)                        ; B
140   (CAR&PUSH)
141   (JMPIFNOTEQTO 22 L150)              ; %COS
144   (GETVALUE 9)                        ; D
146   (CAR&PUSH)
147   (JMPIFEQTO 22 L89)                  ; %COS
150   L150
150   (GETVALUE 7)                        ; B
152   (CAR&PUSH)
153   (JMPIFNOTEQTO 22 L197)              ; %COS
156   (CONST&PUSH 24)                     ; M
157   (GETVALUE&PUSH 8)                   ; Y
159   (CONST&PUSH 13)                     ; NILL
160   (CALL 3 14)                         ; SASSQ
163   (CDR)
164   (SETVALUE 5)                        ; W
166   (JMPIFNOT L197)
168   (CONST&PUSH 24)                     ; M
169   (GETVALUE&PUSH 8)                   ; Y
171   (CONST&PUSH 13)                     ; NILL
172   (CALL&PUSH 3 14)                    ; SASSQ
175   (CONST&PUSH 25)                     ; N
176   (GETVALUE&PUSH 8)                   ; Y
178   (CONST&PUSH 13)                     ; NILL
179   (CALL 3 14)                         ; SASSQ
182   (CDR&PUSH)
183   (CALLS1&JMPIFNOT 170 L197)          ; RPLACD
186   (CONST&PUSH 25)                     ; N
187   (GETVALUE&PUSH 8)                   ; Y
189   (CONST&PUSH 13)                     ; NILL
190   (CALL&PUSH 3 14)                    ; SASSQ
193   (GETVALUE&PUSH 5)                   ; W
195   (CALLS1 170)                        ; RPLACD
197   L197
197   (GETVALUE&PUSH 8)                   ; Y
199   (CONST 26)                          ; ((MTIMES) -1 A ...)
201   L201
201   (PUSH)
202   (CALL2&PUSH 20)                     ; SUBLISS
204   (CALL1 21)                          ; SUBVAR
206   (JMP L337)
209   L209
209   (GETVALUE&PUSH 1)                   ; VAR
211   (CONST&PUSH 31)                     ; X
213   (GETVALUE&PUSH 8)                   ; Y
215   (CONST&PUSH 25)                     ; N
216   (CALL2&PUSH 29)                     ; SCH-REPLACE
218   (CALL1 32)                          ; SUPERCOSNX
220   (JMP L256)
222   L222
222   (CONST&PUSH 28)                     ; (MTIMES)
223   (GETVALUE&PUSH 8)                   ; Y
225   (CONST&PUSH 6)                      ; A
226   (CALL2&PUSH 29)                     ; SCH-REPLACE
228   (GETVALUE&PUSH 8)                   ; Y
230   (CONST&PUSH 30)                     ; C
232   (CALL2&PUSH 29)                     ; SCH-REPLACE
234   (GETVALUE&PUSH 8)                   ; Y
236   (CONST&PUSH 7)                      ; B
237   (CALL2 29)                          ; SCH-REPLACE
239   (SETVALUE 7)                        ; B
241   (CAR&PUSH)
242   (JMPIFEQTO 22 L209)                 ; %COS
245   (GETVALUE&PUSH 1)                   ; VAR
247   (CONST&PUSH 31)                     ; X
249   (GETVALUE&PUSH 8)                   ; Y
251   (CONST&PUSH 25)                     ; N
252   (CALL2&PUSH 29)                     ; SCH-REPLACE
254   (CALL1 34)                          ; SUPERSINX
256   L256
256   (PUSH)
257   (CALL&PUSH 3 33)                    ; MAXIMA-SUBSTITUTE
260   (LIST&PUSH 4)
262   (CALL1&PUSH 35)                     ; $EXPAND
264   (GETVALUE&PUSH 1)                   ; VAR
266   (CALL2 36)                          ; INTEGRATOR
268   (JMP L337)
271   L271
271   (CONST&PUSH 43)                     ; (%INTEGRATE)
273   (GETVALUE&PUSH 0)                   ; EXP
275   (GETVALUE&PUSH 1)                   ; VAR
277   (LIST 3)
279   (UNBIND 6)
281   (JMP L339)
283   L283
283   (GETVALUE&PUSH 0)                   ; EXP
285   (GETVALUE&PUSH 2)                   ; TRIGARG
287   (CALL2 37)                          ; SUBST2S
289   (SETVALUE 5)                        ; W
291   (CONST&PUSH 7)                      ; B
292   (GETVALUE&PUSH 2)                   ; TRIGARG
294   (CONST&PUSH 38)                     ; ((MPLUS) (# # #) (# #))
296   (NIL&PUSH)
297   (CALL&PUSH 3 12)                    ; M2
300   (CONST&PUSH 13)                     ; NILL
301   (CALL 3 14)                         ; SASSQ
304   (CDR)
305   (SETVALUE 7)                        ; B
307   (GETVALUE&PUSH 2)                   ; TRIGARG
309   (GETVALUE&PUSH 1)                   ; VAR
311   (GETVALUE&PUSH 5)                   ; W
313   (GETVALUE&PUSH 7)                   ; B
315   (CALL2&PUSH 39)                     ; DIV*
317   (GETVALUE&PUSH 1)                   ; VAR
319   (CALL2&PUSH 40)                     ; TRIGINT
321   (CALL 3 41)                         ; SUBSTINT
324   (SETVALUE 6)                        ; A
326   (PUSH)
327   (CONST&PUSH 42)                     ; ((MTIMES) (# #) (# # #))
329   (NIL&PUSH)
330   (CALL 3 12)                         ; M2
333   (JMPIF L271)
335   (GETVALUE 6)                        ; A
337   L337
337   (UNBIND 6)
339   L339
339   (UNBIND 3)
341   (SKIP&RET 4)


Disassembly of function #:|(DEFUN TRIG2 (X) ...)-46|
(CONST 0) = TRIG2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIG2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIG2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIG2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIG2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIG2
8     (SKIP&RET 1)


Disassembly of function TRIG2
(CONST 0) = X
(CONST 1) = (%SIN %COS %TAN %COT %SEC %CSC)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (CONST&PUSH 1)                      ; (%SIN %COS %TAN %COT %SEC %CSC)
7     (CALL2 2)                           ; MEMQ
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUPERSINX (N) ...)-47|
(CONST 0) = SUPERSINX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUPERSINX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUPERSINX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUPERSINX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUPERSINX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUPERSINX
8     (SKIP&RET 1)


Disassembly of function SUPERSINX
(CONST 0) = N
(CONST 1) = 0
(CONST 2) = -1
(CONST 3) = 1
(CONST 4) = (MTIMES)
(CONST 5) = TIMESK
(CONST 6) = SINNX
(CONST 7) = $EXPAND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (CONST&PUSH 1)                      ; 0
6     (CALLSR&JMPIF 1 47 L30)             ; <
10    (CONST 3)                           ; 1
11    L11
11    (PUSH)
12    (CONST&PUSH 4)                      ; (MTIMES)
13    (LOAD&PUSH 1)
14    (LOAD&PUSH 2)
15    (GETVALUE&PUSH 0)                   ; N
17    (CALL2&PUSH 5)                      ; TIMESK
19    (CALL1&PUSH 6)                      ; SINNX
21    (LIST&PUSH 3)
23    (CALL1 7)                           ; $EXPAND
25    (SKIP 1)
27    (UNBIND1)
28    (SKIP&RET 2)
30    L30
30    (CONST 2)                           ; -1
31    (JMP L11)


Disassembly of function #:|(DEFUN SUPERCOSNX (N) ...)-48|
(CONST 0) = SUPERCOSNX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUPERCOSNX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUPERCOSNX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUPERCOSNX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUPERCOSNX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUPERCOSNX
8     (SKIP&RET 1)


Disassembly of function SUPERCOSNX
(CONST 0) = N
(CONST 1) = 0
(CONST 2) = -1
(CONST 3) = 1
(CONST 4) = TIMESK
(CONST 5) = COSNX
(CONST 6) = $EXPAND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (CONST&PUSH 1)                      ; 0
6     (CALLSR&JMPIF 1 47 L26)             ; <
10    (CONST 3)                           ; 1
11    L11
11    (PUSH)
12    (LOAD&PUSH 0)
13    (GETVALUE&PUSH 0)                   ; N
15    (CALL2&PUSH 4)                      ; TIMESK
17    (CALL1&PUSH 5)                      ; COSNX
19    (CALL1 6)                           ; $EXPAND
21    (SKIP 1)
23    (UNBIND1)
24    (SKIP&RET 2)
26    L26
26    (CONST 2)                           ; -1
27    (JMP L11)


Disassembly of function #:|(DEFUN SINNX (N) ...)-49|
(CONST 0) = SINNX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SINNX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SINNX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SINNX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SINNX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SINNX
8     (SKIP&RET 1)


Disassembly of function SINNX
(CONST 0) = N
(CONST 1) = 1
(CONST 2) = ((%SIN) X)
(CONST 3) = (MPLUS)
(CONST 4) = (MTIMES)
(CONST 5) = ((%SIN) X)
(CONST 6) = COSNX
(CONST 7) = (MTIMES)
(CONST 8) = ((%COS) X)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
25 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (JMPIFEQTO 1 L34)                   ; 1
8     (CONST&PUSH 3)                      ; (MPLUS)
9     (CONST&PUSH 4)                      ; (MTIMES)
10    (CONST&PUSH 5)                      ; ((%SIN) X)
11    (GETVALUE&PUSH 0)                   ; N
13    (CALLS2&PUSH 151)                   ; 1-
15    (CALL1&PUSH 6)                      ; COSNX
17    (LIST&PUSH 3)
19    (CONST&PUSH 7)                      ; (MTIMES)
20    (CONST&PUSH 8)                      ; ((%COS) X)
21    (GETVALUE&PUSH 0)                   ; N
23    (CALLS2&PUSH 151)                   ; 1-
25    (JSR&PUSH L0)
27    (LIST&PUSH 3)
29    (LIST 3)
31    L31
31    (UNBIND1)
32    (SKIP&RET 2)
34    L34
34    (CONST 2)                           ; ((%SIN) X)
35    (JMP L31)


Disassembly of function #:|(DEFUN COSNX (N) ...)-50|
(CONST 0) = COSNX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COSNX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COSNX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COSNX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COSNX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COSNX
8     (SKIP&RET 1)


Disassembly of function COSNX
(CONST 0) = N
(CONST 1) = 1
(CONST 2) = ((%COS) X)
(CONST 3) = (MPLUS)
(CONST 4) = (MTIMES)
(CONST 5) = ((%COS) X)
(CONST 6) = (MTIMES)
(CONST 7) = -1
(CONST 8) = ((%SIN) X)
(CONST 9) = SINNX
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
26 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (JMPIFEQTO 1 L35)                   ; 1
8     (CONST&PUSH 3)                      ; (MPLUS)
9     (CONST&PUSH 4)                      ; (MTIMES)
10    (CONST&PUSH 5)                      ; ((%COS) X)
11    (GETVALUE&PUSH 0)                   ; N
13    (CALLS2&PUSH 151)                   ; 1-
15    (JSR&PUSH L0)
17    (LIST&PUSH 3)
19    (CONST&PUSH 6)                      ; (MTIMES)
20    (CONST&PUSH 7)                      ; -1
21    (CONST&PUSH 8)                      ; ((%SIN) X)
22    (GETVALUE&PUSH 0)                   ; N
24    (CALLS2&PUSH 151)                   ; 1-
26    (CALL1&PUSH 9)                      ; SINNX
28    (LIST&PUSH 4)
30    (LIST 3)
32    L32
32    (UNBIND1)
33    (SKIP&RET 2)
35    L35
35    (CONST 2)                           ; ((%COS) X)
36    (JMP L32)


Disassembly of function #:|(DEFUN POSEVEN (X) ...)-51|
(CONST 0) = POSEVEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POSEVEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POSEVEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POSEVEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POSEVEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POSEVEN
8     (SKIP&RET 1)


Disassembly of function POSEVEN
(CONST 0) = X
(CONST 1) = EVEN
(CONST 2) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; EVEN
7     (JMPIFNOT1 L15)
9     (GETVALUE&PUSH 0)                   ; X
11    (CONST&PUSH 2)                      ; -1
12    (CALLSR 1 48)                       ; >
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TRIGFREE (X) ...)-52|
(CONST 0) = TRIGFREE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIGFREE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGFREE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIGFREE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIGFREE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIGFREE
8     (SKIP&RET 1)


Disassembly of function TRIGFREE
(CONST 0) = X
(CONST 1) = (SIN* COS* SEC* TAN*)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
21 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L22)
7     (GETVALUE 0)                        ; X
9     (CAR&PUSH)
10    (JSR L0)
12    (JMPIFNOT1 L19)
14    (GETVALUE 0)                        ; X
16    (CDR&PUSH)
17    (JSR L0)
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (GETVALUE&PUSH 0)                   ; X
24    (CONST&PUSH 1)                      ; (SIN* COS* SEC* TAN*)
25    (CALL2 2)                           ; MEMQ
27    (NOT)
28    (JMP L19)


Disassembly of function #:|(DEFUN RAT1 (EXP) ...)-53|
(CONST 0) = RAT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAT1
8     (SKIP&RET 1)


Disassembly of function RAT1
(CONST 0) = EXP
(CONST 1) = B1
(CONST 2) = NOTSAME
(CONST 3) = B
(CONST 4) = ((MEXPT) B (N EVEN))
(CONST 5) = RATS
(CONST 6) = YY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (YY NOTSAME B EXP)
writes special variables : (YY B1)
36 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (NIL)
4     (BIND 1)                            ; B1
6     (NIL)
7     (BIND 2)                            ; NOTSAME
9     (GETVALUE&PUSH 0)                   ; EXP
11    (CALLS2&JMPIFNOT 8 L19)             ; NUMBERP
14    (GETVALUE&PUSH 0)                   ; EXP
16    (CALLS2&JMPIF 145 L46)              ; ZEROP
19    L19
19    (GETVALUE&PUSH 3)                   ; B
21    (CONST&PUSH 3)                      ; B
22    (CONST&PUSH 4)                      ; ((MEXPT) B (N EVEN))
23    (PUSH-UNBOUND 3)
25    (CALLS1 172)                        ; SUBST
27    (SETVALUE 1)                        ; B1
29    (GETVALUE&PUSH 0)                   ; EXP
31    (CALL1 5)                           ; RATS
33    (SETVALUE 6)                        ; YY
35    (GETVALUE 2)                        ; NOTSAME
37    (JMPIFNOT L51)
39    (NIL)
40    L40
40    (VALUES1)
41    (UNBIND 2)
43    L43
43    (UNBIND1)
44    (SKIP&RET 2)
46    L46
46    (NIL)
47    (UNBIND 2)
49    (JMP L43)
51    L51
51    (GETVALUE 6)                        ; YY
53    (JMP L40)


Disassembly of function #:|(DEFUN RATS (EXP) ...)-54|
(CONST 0) = RATS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATS
8     (SKIP&RET 1)


Disassembly of function RATS
(CONST 0) = EXP
(CONST 1) = Y
(CONST 2) = A
(CONST 3) = X
(CONST 4) = (SIN* COS* SEC* TAN*)
(CONST 5) = MEMQ
(CONST 6) = NOTSAME
(CONST 7) = B1
(CONST 8) = M2
(CONST 9) = F3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B1 A EXP)
writes special variables : (NOTSAME Y)
62 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (NIL)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; EXP
8     (GETVALUE 2)                        ; A
10    (JMPIFEQ L37)
12    (GETVALUE 0)                        ; EXP
14    (JMPIFATOM L47)
16    (GETVALUE&PUSH 0)                   ; EXP
18    (GETVALUE&PUSH 7)                   ; B1
20    (NIL&PUSH)
21    (CALL 3 8)                          ; M2
24    (SETVALUE 1)                        ; Y
26    (JMPIF L58)
28    (GETVALUE 0)                        ; EXP
30    (CAR&PUSH)
31    (NIL&PUSH)
32    (GETVALUE 0)                        ; EXP
34    (CDR&PUSH)
35    (JMP L76)
37    L37
37    (CONST 3)                           ; X
38    (UNBIND1)
39    (JMP L89)
41    L41
41    (T)
42    (SETVALUE 6)                        ; NOTSAME
44    (UNBIND1)
45    (JMP L89)
47    L47
47    (GETVALUE&PUSH 0)                   ; EXP
49    (CONST&PUSH 4)                      ; (SIN* COS* SEC* TAN*)
50    (CALL2&JMPIF 5 L41)                 ; MEMQ
53    (GETVALUE 0)                        ; EXP
55    (UNBIND1)
56    (JMP L89)
58    L58
58    (PUSH)
59    (CALL1 9)                           ; F3
61    (UNBIND1)
62    (JMP L89)
64    L64
64    (LOAD&CAR&PUSH 0)
66    (LOAD&PUSH 0)
67    (JSR&PUSH L0)
70    (LOAD&CONS&STORE 2)
72    (SKIP 1)
74    (LOAD&CDR&STORE 0)
76    L76
76    (LOAD&PUSH 0)
77    (CALLS1&JMPIFNOT 146 L64)           ; ENDP
80    (SKIP 1)
82    (LOAD&PUSH 0)
83    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
85    (SKIP 1)
87    (CONS)
88    (UNBIND1)
89    L89
89    (UNBIND1)
90    (SKIP&RET 2)


Disassembly of function #:|(DEFUN F3 (Y) ...)-55|
(CONST 0) = F3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F3
8     (SKIP&RET 1)


Disassembly of function F3
(CONST 0) = Y
(CONST 1) = C
(CONST 2) = N
(CONST 3) = SASSQ
(CONST 4) = 2
(CONST 5) = QUOT
(CONST 6) = ((MEXPT) ((MPLUS) 1 ((MTIMES) C ((MEXPT) X 2))) N)
(CONST 7) = MAXIMA-SUBSTITUTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y C)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Y
3     (GETVALUE&PUSH 1)                   ; C
5     (CONST&PUSH 1)                      ; C
6     (CONST&PUSH 2)                      ; N
7     (GETVALUE&PUSH 0)                   ; Y
9     (NIL&PUSH)
10    (CALL 3 3)                          ; SASSQ
13    (CDR&PUSH)
14    (CONST&PUSH 4)                      ; 2
15    (CALL2&PUSH 5)                      ; QUOT
17    (CONST&PUSH 2)                      ; N
18    (CONST&PUSH 6)                      ; ((MEXPT) ((MPLUS) 1 (# C #)) N)
19    (CALL&PUSH 3 7)                     ; MAXIMA-SUBSTITUTE
22    (CALL 3 7)                          ; MAXIMA-SUBSTITUTE
25    (UNBIND1)
26    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ODD1 (N) ...)-56|
(CONST 0) = ODD1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ODD1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ODD1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ODD1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ODD1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ODD1
8     (SKIP&RET 1)


Disassembly of function ODD1
(CONST 0) = N
(CONST 1) = 2
(CONST 2) = 0
(CONST 3) = C
(CONST 4) = (MEXPT)
(CONST 5) = ((MPLUS) 1 ((MTIMES) C ((MEXPT) X 2)))
(CONST 6) = QUOT
(CONST 7) = MAXIMA-SUBSTITUTE
(CONST 8) = YZ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C N)
writes special variable : (YZ)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (CALLS2&JMPIFNOT 8 L20)             ; NUMBERP
8     (GETVALUE&PUSH 0)                   ; N
10    (CONST&PUSH 1)                      ; 2
11    (CALLS2&PUSH 184)                   ; REM
13    (JMPIFNOTEQTO 2 L23)                ; 0
16    (NIL)
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)
20    L20
20    (NIL)
21    (JMP L17)
23    L23
23    (GETVALUE&PUSH 3)                   ; C
25    (CONST&PUSH 3)                      ; C
26    (CONST&PUSH 4)                      ; (MEXPT)
27    (CONST&PUSH 5)                      ; ((MPLUS) 1 ((MTIMES) C (# X 2)))
28    (GETVALUE&PUSH 0)                   ; N
30    (CALLS2&PUSH 151)                   ; 1-
32    (CONST&PUSH 1)                      ; 2
33    (CALL2&PUSH 6)                      ; QUOT
35    (LIST&PUSH 3)
37    (CALL 3 7)                          ; MAXIMA-SUBSTITUTE
40    (SETVALUE 8)                        ; YZ
42    (JMP L17)


Disassembly of function #:|(DEFUN SUBVAR (X) ...)-57|
(CONST 0) = SUBVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBVAR
8     (SKIP&RET 1)


Disassembly of function SUBVAR
(CONST 0) = X
(CONST 1) = VAR
(CONST 2) = MAXIMA-SUBSTITUTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X VAR)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 1)                   ; VAR
5     (CONST&PUSH 0)                      ; X
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL 3 2)                          ; MAXIMA-SUBSTITUTE
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUBVARDLG (X) ...)-58|
(CONST 0) = SUBVARDLG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBVARDLG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBVARDLG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBVARDLG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBVARDLG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBVARDLG
8     (SKIP&RET 1)


Disassembly of function SUBVARDLG
(CONST 0) = X
(CONST 1) = M
(CONST 2) = VAR
(CONST 3) = MAXIMA-SUBSTITUTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M VAR X)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (JMP L34)
8     L8
8     (LOAD&CAR&PUSH 0)
10    (LOAD 0)
11    (BIND 1)                            ; M
13    (GETVALUE&PUSH 2)                   ; VAR
15    (CONST&PUSH 0)                      ; X
16    (GETVALUE 1)                        ; M
18    (CAR&PUSH)
19    (CALL&PUSH 3 3)                     ; MAXIMA-SUBSTITUTE
22    (GETVALUE 1)                        ; M
24    (CDR)
25    (CONS)
26    (UNBIND1)
27    (PUSH)
28    (LOAD&CONS&STORE 2)
30    (SKIP 1)
32    (LOAD&CDR&STORE 0)
34    L34
34    (LOAD&PUSH 0)
35    (CALLS1&JMPIFNOT 146 L8)            ; ENDP
38    (SKIP 1)
40    (LOAD&PUSH 0)
41    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
43    (SKIP 1)
45    (UNBIND1)
46    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TRIGINT (EXP VAR) ...)-59|
(CONST 0) = TRIGINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIGINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIGINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIGINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIGINT
8     (SKIP&RET 1)


Disassembly of function TRIGINT
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = Y
(CONST 3) = YY
(CONST 4) = M
(CONST 5) = N
(CONST 6) = C
(CONST 7) = YZ
(CONST 8) = A
(CONST 9) = B
(CONST 10) = 
((((%SIN) X) . SIN*) (((%COS) X) . COS*) (((%TAN) X) . TAN*)
 (((%COT) X) (MEXPT) TAN* -1) (((%SEC) X) . SEC*) (((%CSC) X) (MEXPT) SIN* -1))
(CONST 11) = SUBVARDLG
(CONST 12) = SIMPLIFYA
(CONST 13) = SUBLISS
(CONST 14) = ((TAN* (MTIMES) SIN* ((MEXPT) COS* -1)) (SEC* (MEXPT) COS* -1))
(CONST 15) = SIMPLIFY
(CONST 16) = 
((MTIMES) ((COEFFTT) (B TRIGFREE)) ((MEXPT) SIN* (M POSEVEN))
 ((MEXPT) COS* (N POSEVEN)))
(CONST 17) = M2
(CONST 18) = NILL
(CONST 19) = SASSQ
(CONST 20) = 0.5
(CONST 21) = 1
(CONST 22) = -1
(CONST 23) = INTEGERP2
(CONST 24) = (MTIMES)
(CONST 25) = ((RAT SIMP) 1 2)
(CONST 26) = (MTIMES)
(CONST 27) = 2
(CONST 28) = X
(CONST 29) = 
((MTIMES) ((MEXPT) ((MTIMES) ((RAT SIMP) 1 2) ((%SIN) X)) M)
 ((MEXPT) ((MPLUS) ((RAT SIMP) 1 2) ((MTIMES) ((RAT SIMP) 1 2) ((%COS) X))) A))
(CONST 30) = 
((MTIMES) ((MEXPT) ((MTIMES) ((RAT SIMP) 1 2) ((%SIN) X)) N)
 ((MEXPT) ((MPLUS) ((RAT SIMP) 1 2) ((MTIMES) ((RAT SIMP) -1 2) ((%COS) X)))
  A))
(CONST 31) = INTEGRATOR
(CONST 32) = SUBSTINT
(CONST 33) = SIN*
(CONST 34) = COS*
(CONST 35) = ((COEFFPT) (C RAT1) ((MEXPT) COS* (N ODD1)))
(CONST 36) = (%SIN)
(CONST 37) = ((COEFFPT) (C RAT1) ((MEXPT) SIN* (N ODD1)))
(CONST 38) = (%COS)
(CONST 39) = ((SIN* (MTIMES) TAN* ((MEXPT) SEC* -1)) (COS* (MEXPT) SEC* -1))
(CONST 40) = TAN*
(CONST 41) = SEC*
(CONST 42) = RAT1
(CONST 43) = (%TAN)
(CONST 44) = ((COEFFPT) (C RAT1) ((MEXPT) TAN* (N ODD1)))
(CONST 45) = (%SEC)
(CONST 46) = $EXPAND
(CONST 47) = ALIKE1
(CONST 48) = 
((SIN* (MTIMES) 2 X ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) -1))
 (COS* (MTIMES) ((MPLUS) 1 ((MTIMES) -1 ((MEXPT) X 2)))
  ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) -1)))
(CONST 49) = (MTIMES)
(CONST 50) = ((MTIMES) 2 ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) -1))
(CONST 51) = ((MQUOTIENT) ((%SIN) X) ((MPLUS) 1 ((%COS) X)))
(CONST 52) = SUBVAR
(CONST 53) = (MTIMES)
(CONST 54) = (MTIMES)
(CONST 55) = ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) -1)
(CONST 56) = (MTIMES)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A N M YZ YY VAR B Y EXP)
writes special variables : (N M B A C Y)
228 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (NIL)
7     (BIND 2)                            ; Y
9     (PUSH-NIL 3)
11    (NIL)
12    (BIND 3)                            ; YY
14    (NIL&PUSH)
15    (NIL)
16    (BIND 4)                            ; M
18    (NIL)
19    (BIND 5)                            ; N
21    (NIL)
22    (BIND 6)                            ; C
24    (NIL)
25    (BIND 7)                            ; YZ
27    (NIL)
28    (BIND 8)                            ; A
30    (NIL)
31    (BIND 9)                            ; B
33    (CONST&PUSH 10)                     ; ((# . SIN*) (# . COS*) ...)
34    (CALL1&PUSH 11)                     ; SUBVARDLG
36    (GETVALUE&PUSH 0)                   ; EXP
38    (NIL&PUSH)
39    (CALL2&PUSH 12)                     ; SIMPLIFYA
41    (CALL2 13)                          ; SUBLISS
43    (STORE 22)
45    (CONST&PUSH 14)                     ; ((TAN* # SIN* #) (SEC* # COS* -1))
46    (LOAD&PUSH 23)
47    (CALL2&PUSH 13)                     ; SUBLISS
49    (CALL1 15)                          ; SIMPLIFY
51    (SETVALUE 2)                        ; Y
53    (STORE 23)
55    (PUSH)
56    (CONST&PUSH 16)                     ; ((MTIMES) (# #) (# SIN* #) ...)
57    (NIL&PUSH)
58    (CALL 3 17)                         ; M2
61    (STORE 18)
63    (JMPIF L211)
66    (CONST 22)                          ; -1
68    (SETVALUE 6)                        ; C
70    (CONST 33)                          ; SIN*
72    (SETVALUE 8)                        ; A
74    (CONST 34)                          ; COS*
76    (SETVALUE 9)                        ; B
78    (GETVALUE&PUSH 2)                   ; Y
80    (CONST&PUSH 35)                     ; ((COEFFPT) (C RAT1) (# COS* #))
82    (NIL&PUSH)
83    (CALL 3 17)                         ; M2
86    (JMPIF L310)
89    (GETVALUE 9)                        ; B
91    (SETVALUE 8)                        ; A
93    (CONST 33)                          ; SIN*
95    (SETVALUE 9)                        ; B
97    (GETVALUE&PUSH 2)                   ; Y
99    (CONST&PUSH 37)                     ; ((COEFFPT) (C RAT1) (# SIN* #))
101   (NIL&PUSH)
102   (CALL 3 17)                         ; M2
105   (JMPIF L363)
108   (CONST&PUSH 39)                     ; ((SIN* # TAN* #) (COS* # SEC* -1))
110   (LOAD&PUSH 23)
111   (CALL2&PUSH 13)                     ; SUBLISS
113   (CALL1 15)                          ; SIMPLIFY
115   (SETVALUE 2)                        ; Y
117   (CONST 21)                          ; 1
119   (SETVALUE 6)                        ; C
121   (CONST 40)                          ; TAN*
123   (SETVALUE 8)                        ; A
125   (CONST 41)                          ; SEC*
127   (SETVALUE 9)                        ; B
129   (GETVALUE&PUSH 2)                   ; Y
131   (CALL1&JMPIF 42 L385)               ; RAT1
135   (GETVALUE 9)                        ; B
137   (SETVALUE 8)                        ; A
139   (CONST 40)                          ; TAN*
141   (SETVALUE 9)                        ; B
143   (GETVALUE&PUSH 2)                   ; Y
145   (CONST&PUSH 44)                     ; ((COEFFPT) (C RAT1) (# TAN* #))
147   (NIL&PUSH)
148   (CALL 3 17)                         ; M2
151   (JMPIFNOT L323)
154   (CONST 45)                          ; (%SEC)
156   L156
156   (PUSH)
157   (GETVALUE&PUSH 1)                   ; VAR
159   (LIST 2)
161   (STORE 24)
163   (CONST&PUSH 56)                     ; (MTIMES)
165   (GETVALUE&PUSH 3)                   ; YY
167   (GETVALUE 7)                        ; YZ
169   L169
169   (PUSH)
170   (LIST 3)
172   (SETVALUE 2)                        ; Y
174   L174
174   (GETVALUE&PUSH 2)                   ; Y
176   (CALL1 15)                          ; SIMPLIFY
178   (SETVALUE 2)                        ; Y
180   (LOAD&PUSH 24)
181   (CONST&PUSH 28)                     ; X
182   (GETVALUE&PUSH 2)                   ; Y
184   (CONST&PUSH 28)                     ; X
185   (CALL2&PUSH 31)                     ; INTEGRATOR
187   (CALL 3 32)                         ; SUBSTINT
190   L190
190   (UNBIND 6)
192   (SKIP 1)
194   (UNBIND1)
195   (SKIP 3)
197   (UNBIND 3)
199   (SKIP&RET 3)
201   L201
201   (CONST 21)                          ; 1
203   (JMP L240)
205   L205
205   (LOAD&PUSH 23)
206   (CONST 29)                          ; ((MTIMES) (# # M) (# # A))
208   (JMP L292)
211   L211
211   (CONST&PUSH 4)                      ; M
212   (LOAD&PUSH 19)
213   (CONST&PUSH 18)                     ; NILL
214   (CALL 3 19)                         ; SASSQ
217   (CDR)
218   (SETVALUE 4)                        ; M
220   (CONST&PUSH 5)                      ; N
221   (LOAD&PUSH 19)
222   (CONST&PUSH 18)                     ; NILL
223   (CALL 3 19)                         ; SASSQ
226   (CDR)
227   (SETVALUE 5)                        ; N
229   (CONST&PUSH 20)                     ; 0.5
230   (GETVALUE&PUSH 4)                   ; M
232   (GETVALUE&PUSH 5)                   ; N
234   (CALLSR&JMPIF 1 47 L201)            ; <
238   (CONST 22)                          ; -1
240   L240
240   (PUSH)
241   (GETVALUE&PUSH 5)                   ; N
243   (GETVALUE&PUSH 4)                   ; M
245   (CALLSR&PUSH 0 54)                  ; -
248   (CALLSR&PUSH 2 53)                  ; +
251   (CALLSR&PUSH 3 55)                  ; *
254   (CALL1 23)                          ; INTEGERP2
256   (SETVALUE 8)                        ; A
258   (CONST&PUSH 8)                      ; A
259   (GETVALUE 8)                        ; A
261   (CONS&PUSH)
262   (LOAD&CONS&STORE 18)
264   (CONST&PUSH 24)                     ; (MTIMES)
265   (CONST&PUSH 9)                      ; B
266   (LOAD&PUSH 20)
267   (CONST&PUSH 18)                     ; NILL
268   (CALL 3 19)                         ; SASSQ
271   (CDR&PUSH)
272   (CONST&PUSH 25)                     ; ((RAT SIMP) 1 2)
273   (CONST&PUSH 26)                     ; (MTIMES)
274   (CONST&PUSH 27)                     ; 2
275   (GETVALUE&PUSH 1)                   ; VAR
277   (LIST&PUSH 3)
279   (CONST&PUSH 28)                     ; X
280   (GETVALUE&PUSH 4)                   ; M
282   (GETVALUE&PUSH 5)                   ; N
284   (CALLSR&JMPIF 1 47 L205)            ; <
289   (LOAD&PUSH 23)
290   (CONST 30)                          ; ((MTIMES) (# # N) (# # A))
292   L292
292   (PUSH)
293   (CALL2&PUSH 13)                     ; SUBLISS
295   (CALL1&PUSH 15)                     ; SIMPLIFY
297   (CONST&PUSH 28)                     ; X
298   (CALL2&PUSH 31)                     ; INTEGRATOR
300   (CALL&PUSH 3 32)                    ; SUBSTINT
303   (LIST&PUSH 4)
305   (CALL1 15)                          ; SIMPLIFY
307   (JMP L190)
310   L310
310   (CONST 36)                          ; (%SIN)
312   (JMP L156)
315   L315
315   (LOAD&PUSH 24)
316   (GETVALUE&PUSH 1)                   ; VAR
318   (CALL2 31)                          ; INTEGRATOR
320   (JMP L190)
323   L323
323   (GETVALUE&PUSH 0)                   ; EXP
325   (CALL1 46)                          ; $EXPAND
327   (STORE 24)
329   (PUSH)
330   (GETVALUE&PUSH 0)                   ; EXP
332   (CALL2&JMPIFNOT 47 L315)            ; ALIKE1
335   (CONST&PUSH 48)                     ; ((SIN* # 2 X #) (COS* # # #))
337   (LOAD&PUSH 24)
338   (CALL2&PUSH 13)                     ; SUBLISS
340   (CALL1 15)                          ; SIMPLIFY
342   (SETVALUE 2)                        ; Y
344   (CONST&PUSH 49)                     ; (MTIMES)
346   (GETVALUE&PUSH 2)                   ; Y
348   (CONST&PUSH 50)                     ; ((MTIMES) 2 ((MEXPT) (# 1 #) -1))
350   (LIST 3)
352   (SETVALUE 2)                        ; Y
354   (CONST&PUSH 51)                     ; ((MQUOTIENT) (# X) (# 1 #))
356   (CALL1 52)                          ; SUBVAR
358   (STORE 24)
360   (JMP L174)
363   L363
363   (CONST&PUSH 38)                     ; (%COS)
365   (GETVALUE&PUSH 1)                   ; VAR
367   (LIST 2)
369   (STORE 24)
371   (CONST&PUSH 53)                     ; (MTIMES)
373   (CONST&PUSH 22)                     ; -1
374   (GETVALUE&PUSH 3)                   ; YY
376   (GETVALUE&PUSH 7)                   ; YZ
378   (LIST 4)
380   (SETVALUE 2)                        ; Y
382   (JMP L174)
385   L385
385   (CONST&PUSH 43)                     ; (%TAN)
387   (GETVALUE&PUSH 1)                   ; VAR
389   (LIST 2)
391   (STORE 24)
393   (CONST&PUSH 54)                     ; (MTIMES)
395   (CONST&PUSH 55)                     ; ((MEXPT) ((MPLUS) 1 (# X 2)) -1)
397   (GETVALUE 3)                        ; YY
399   (JMP L169)


Disassembly of function #:|(DEFMFUN SININT (EXP VAR) ...)-60|
(CONST 0) = SININT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SININT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SININT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SININT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SININT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SININT
8     (SKIP&RET 1)


Disassembly of function SININT
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = MNUMP
(CONST 3) = "Attempt to integrate wrt a number: ~:M"
(CONST 4) = MERROR
(CONST 5) = $RATP
(CONST 6) = RATDISREP
(CONST 7) = MXORLISTP
(CONST 8) = Y
(CONST 9) = MEQUALP
(CONST 10) = $INTEGRATIONCONSTANT
(CONST 11) = $INTEGRATION_CONSTANT_COUNTER
(CONST 12) = CONCAT
(CONST 13) = ADD2
(CONST 14) = ISINOP
(CONST 15) = (%INTEGRATE)
(CONST 16) = $OPSUBST
(CONST 17) = VARLIST
(CONST 18) = GENVAR
(CONST 19) = STACK
(CONST 20) = INTEGRATOR
(CONST 21) = SIMPLIFY
(CONST 22) = ANS
(CONST 23) = SUM-OF-INTSP
(CONST 24) = (%INTEGRATE)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS $INTEGRATION_CONSTANT_COUNTER Y EXP VAR)
writes special variable : ($INTEGRATION_CONSTANT_COUNTER)
128 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 1)                   ; VAR
8     (CALL1&JMPIF 2 L34)                 ; MNUMP
11    (GETVALUE&PUSH 1)                   ; VAR
13    (CALL1&JMPIF 5 L42)                 ; $RATP
16    (GETVALUE&PUSH 0)                   ; EXP
18    (CALL1&JMPIFNOT 5 L130)             ; $RATP
22    (GETVALUE&PUSH 0)                   ; EXP
24    (CALL1&PUSH 6)                      ; RATDISREP
26    (GETVALUE 1)                        ; VAR
28    L28
28    (PUSH)
29    (JSR L0)
31    (JMP L209)
34    L34
34    (CONST&PUSH 3)                      ; "Attempt to integrate wrt a number: ~:M"
35    (GETVALUE&PUSH 1)                   ; VAR
37    (CALL2 4)                           ; MERROR
39    (JMP L209)
42    L42
42    (GETVALUE&PUSH 0)                   ; EXP
44    (GETVALUE&PUSH 1)                   ; VAR
46    (CALL1 6)                           ; RATDISREP
48    (JMP L28)
50    L50
50    (GETVALUE 0)                        ; EXP
52    (CAR&PUSH)
53    (NIL&PUSH)
54    (GETVALUE 0)                        ; EXP
56    (CDR&PUSH)
57    (JMP L79)
59    L59
59    (LOAD&CAR&PUSH 0)
61    (LOAD 0)
62    (BIND 8)                            ; Y
64    (GETVALUE&PUSH 8)                   ; Y
66    (GETVALUE&PUSH 1)                   ; VAR
68    (JSR L0)
71    (UNBIND1)
72    (PUSH)
73    (LOAD&CONS&STORE 2)
75    (SKIP 1)
77    (LOAD&CDR&STORE 0)
79    L79
79    (LOAD&PUSH 0)
80    (CALLS1&JMPIFNOT 146 L59)           ; ENDP
83    (SKIP 1)
85    (LOAD&PUSH 0)
86    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
88    (SKIP 1)
90    (CONS)
91    (JMP L209)
94    L94
94    (GETVALUE 0)                        ; EXP
96    (CAR&PUSH)
97    (GETVALUE 0)                        ; EXP
99    (CDR)
100   (CAR&PUSH)
101   (GETVALUE&PUSH 1)                   ; VAR
103   (JSR&PUSH L0)
106   (GETVALUE 0)                        ; EXP
108   (CDR)
109   (CDR)
110   (CAR&PUSH)
111   (GETVALUE&PUSH 1)                   ; VAR
113   (JSR&PUSH L0)
116   (CONST&PUSH 10)                     ; $INTEGRATIONCONSTANT
117   (GETVALUE&PUSH 11)                  ; $INTEGRATION_CONSTANT_COUNTER
119   (CALLS2 150)                        ; 1+
121   (SETVALUE 11)                       ; $INTEGRATION_CONSTANT_COUNTER
123   (PUSH)
124   (CALL2&PUSH 12)                     ; CONCAT
126   (CALL2 13)                          ; ADD2
128   (JMP L157)
130   L130
130   (GETVALUE&PUSH 0)                   ; EXP
132   (CALL1&JMPIF 7 L50)                 ; MXORLISTP
136   (GETVALUE&PUSH 0)                   ; EXP
138   (CALL1&JMPIF 9 L94)                 ; MEQUALP
141   (GETVALUE 1)                        ; VAR
143   (JMPIFCONSP L173)
145   (GETVALUE&PUSH 0)                   ; EXP
147   (GETVALUE&PUSH 1)                   ; VAR
149   (CALL2&JMPIFNOT 14 L173)            ; ISINOP
152   (CONST&PUSH 15)                     ; (%INTEGRATE)
153   (GETVALUE&PUSH 0)                   ; EXP
155   (GETVALUE 1)                        ; VAR
157   L157
157   (PUSH)
158   (LIST 3)
160   (JMP L209)
162   L162
162   (CONST&PUSH 24)                     ; (%INTEGRATE)
163   (GETVALUE&PUSH 0)                   ; EXP
165   (GETVALUE&PUSH 1)                   ; VAR
167   (LIST 3)
169   (UNBIND1)
170   (VALUES1)
171   (JMP L209)
173   L173
173   (NIL)
174   (BIND 16)                           ; $OPSUBST
176   (NIL)
177   (BIND 17)                           ; VARLIST
179   (NIL)
180   (BIND 18)                           ; GENVAR
182   (NIL)
183   (BIND 19)                           ; STACK
185   (GETVALUE&PUSH 0)                   ; EXP
187   (GETVALUE&PUSH 1)                   ; VAR
189   (CALL2 20)                          ; INTEGRATOR
191   (UNBIND 4)
193   (PUSH)
194   (CALL1 21)                          ; SIMPLIFY
196   (BIND 22)                           ; ANS
198   (GETVALUE&PUSH 22)                  ; ANS
200   (CALL1&JMPIF 23 L162)               ; SUM-OF-INTSP
203   (GETVALUE 22)                       ; ANS
205   (UNBIND1)
206   (JMPIF1 L209)
208   (NIL)
209   L209
209   (UNBIND 2)
211   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SUM-OF-INTSP (ANS) ...)-61|
(CONST 0) = SUM-OF-INTSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUM-OF-INTSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUM-OF-INTSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUM-OF-INTSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUM-OF-INTSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUM-OF-INTSP
8     (SKIP&RET 1)


Disassembly of function SUM-OF-INTSP
(CONST 0) = ANS
(CONST 1) = VAR
(CONST 2) = MPLUSP
(CONST 3) = SUM-OF-INTSP
(CONST 4) = ANDMAPC
(CONST 5) = %INTEGRATE
(CONST 6) = MTIMESP
(CONST 7) = FREEOF
(CONST 8) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR ANS)
66 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; ANS
3     (GETVALUE 0)                        ; ANS
5     (JMPIFATOM L36)
7     (GETVALUE&PUSH 0)                   ; ANS
9     (CALL1&JMPIF 2 L44)                 ; MPLUSP
12    (GETVALUE 0)                        ; ANS
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFEQTO 5 L53)                   ; %INTEGRATE
19    (GETVALUE&PUSH 0)                   ; ANS
21    (CALL1&JMPIF 6 L61)                 ; MTIMESP
24    (GETVALUE&PUSH 1)                   ; VAR
26    (GETVALUE&PUSH 0)                   ; ANS
28    (CALL2&JMPIF 7 L103)                ; FREEOF
32    (NIL)
33    L33
33    (UNBIND1)
34    (SKIP&RET 2)
36    L36
36    (GETVALUE&PUSH 0)                   ; ANS
38    (GETVALUE 1)                        ; VAR
40    (EQ)
41    (NOT)
42    (JMP L33)
44    L44
44    (CONST&SYMBOL-FUNCTION&PUSH 3)      ; SUM-OF-INTSP
46    (GETVALUE 0)                        ; ANS
48    (CDR&PUSH)
49    (CALL2 4)                           ; ANDMAPC
51    (JMP L33)
53    L53
53    (T)
54    (JMP L33)
56    L56
56    (NIL)
57    (SKIP 2)
59    (JMP L33)
61    L61
61    (GETVALUE 0)                        ; ANS
63    (CDR&PUSH)
64    (NIL&PUSH)
65    (LOAD&JMPIFNOT 1 L91)
68    L68
68    (GETVALUE&PUSH 1)                   ; VAR
70    (LOAD&CAR&PUSH 2)
72    (CALL2&JMPIF 7 L86)                 ; FREEOF
75    (LOAD&CAR&PUSH 1)
77    (JSR L0)
80    (JMPIFNOT L56)
82    (LOAD&CAR&PUSH 1)
84    (LOAD&CONS&STORE 0)
86    L86
86    (LOAD&CDR&STORE 1)
88    (LOAD&JMPIF 1 L68)
91    L91
91    (LOAD&PUSH 0)
92    (CALLS2&PUSH 71)                    ; LENGTH
94    (CONST&PUSH 8)                      ; 2
95    (CALLSR 1 47)                       ; <
98    (SKIP 2)
100   (JMP L33)
103   L103
103   (T)
104   (JMP L33)


Disassembly of function #:|(DEFUN INTSUM (FORM VAR) ...)-62|
(CONST 0) = INTSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTSUM
8     (SKIP&RET 1)


Disassembly of function INTSUM
(CONST 0) = FORM
(CONST 1) = VAR
(CONST 2) = EXP
(CONST 3) = FREE
(CONST 4) = (%INTEGRATE)
(CONST 5) = 1
(CONST 6) = PARTITION
(CONST 7) = MEXPTP
(CONST 8) = MAXIMA-SUBSTITUTE
(CONST 9) = -1
(CONST 10) = INTEGRATOR
(CONST 11) = ADD2
(CONST 12) = INTSUM1
(CONST 13) = MLSP
(CONST 14) = (%INTEGRATE)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP VAR FORM)
writes special variable : (EXP)
109 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (NIL)
7     (BIND 2)                            ; EXP
9     (PUSH-NIL 5)
11    (GETVALUE 0)                        ; FORM
13    (CDR)
14    (CAR)
15    (SETVALUE 2)                        ; EXP
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR)
22    (STORE 4)
23    (GETVALUE 0)                        ; FORM
25    (CDR)
26    (CDR)
27    (CDR)
28    (CAR)
29    (STORE 3)
30    (GETVALUE 0)                        ; FORM
32    (CDR)
33    (CDR)
34    (CDR)
35    (CDR)
36    (CAR)
37    (STORE 2)
38    (GETVALUE 1)                        ; VAR
40    (JMPIFCONSP L118)
43    (LOAD&PUSH 4)
44    (GETVALUE&PUSH 1)                   ; VAR
46    (CALL2&JMPIFNOT 3 L118)             ; FREE
50    (LOAD&PUSH 3)
51    (GETVALUE&PUSH 1)                   ; VAR
53    (CALL2&JMPIFNOT 3 L118)             ; FREE
56    (LOAD&PUSH 2)
57    (GETVALUE&PUSH 1)                   ; VAR
59    (CALL2&JMPIFNOT 3 L118)             ; FREE
62    (GETVALUE&PUSH 2)                   ; EXP
64    (GETVALUE&PUSH 1)                   ; VAR
66    (CONST&PUSH 5)                      ; 1
67    (CALL 3 6)                          ; PARTITION
70    (STORE 1)
71    (CDR&PUSH)
72    (CALL1&JMPIFNOT 7 L149)             ; MEXPTP
76    (LOAD 1)
77    (CDR)
78    (CDR)
79    (CAR&PUSH)
80    (GETVALUE 1)                        ; VAR
82    (JMPIFNOTEQ L149)
85    (LOAD&PUSH 3)
86    (LOAD&PUSH 5)
87    (LOAD 3)
88    (CDR)
89    (CDR)
90    (CDR)
91    (CAR&PUSH)
92    (CALL 3 8)                          ; MAXIMA-SUBSTITUTE
95    (STORE 0)
96    (PUSH)
97    (JMPIFEQTO 9 L121)                  ; -1
100   (LOAD&PUSH 0)
101   (CONST&PUSH 9)                      ; -1
102   (CALL2&JMPIFNOT 13 L149)            ; MLSP
105   (CONST 14)                          ; (%INTEGRATE)
106   L106
106   (PUSH)
107   (GETVALUE&PUSH 0)                   ; FORM
109   (GETVALUE&PUSH 1)                   ; VAR
111   (LIST 3)
113   (SKIP 5)
115   (UNBIND1)
116   (JMP L162)
118   L118
118   (CONST 4)                           ; (%INTEGRATE)
119   (JMP L106)
121   L121
121   (LOAD&PUSH 3)
122   (LOAD&PUSH 5)
123   (GETVALUE&PUSH 2)                   ; EXP
125   (CALL&PUSH 3 8)                     ; MAXIMA-SUBSTITUTE
128   (GETVALUE&PUSH 1)                   ; VAR
130   (CALL2&PUSH 10)                     ; INTEGRATOR
132   (GETVALUE&PUSH 2)                   ; EXP
134   (LOAD&PUSH 6)
135   (CONST&PUSH 5)                      ; 1
136   (LOAD&PUSH 7)
137   (CALL2&PUSH 11)                     ; ADD2
139   (LOAD&PUSH 6)
140   (GETVALUE&PUSH 1)                   ; VAR
142   (CALL&PUSH 5 12)                    ; INTSUM1
145   (CALL2 11)                          ; ADD2
147   (JMP L159)
149   L149
149   (GETVALUE&PUSH 2)                   ; EXP
151   (LOAD&PUSH 5)
152   (LOAD&PUSH 5)
153   (LOAD&PUSH 5)
154   (GETVALUE&PUSH 1)                   ; VAR
156   (CALL 5 12)                         ; INTSUM1
159   L159
159   (SKIP 5)
161   (UNBIND1)
162   L162
162   (UNBIND 2)
164   (SKIP&RET 3)


Disassembly of function #:|(DEFUN INTSUM1 (EXP IDX LL ...) ...)-63|
(CONST 0) = INTSUM1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTSUM1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTSUM1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTSUM1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTSUM1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTSUM1
8     (SKIP&RET 1)


Disassembly of function INTSUM1
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = (MGEQP)
(CONST 3) = ASSUME
(CONST 4) = $INF
(CONST 5) = (MGEQP)
(CONST 6) = (%SUM)
(CONST 7) = INTEGRATOR
(CONST 8) = SIMPLIFYA
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP)
29 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (CONST&PUSH 2)                      ; (MGEQP)
7     (LOAD&PUSH 11)
8     (LOAD&PUSH 11)
9     (LIST&PUSH 3)
11    (CALL1 3)                           ; ASSUME
13    (LOAD&PUSH 8)
14    (JMPIFEQTO 4 L24)                   ; $INF
17    (CONST&PUSH 5)                      ; (MGEQP)
18    (LOAD&PUSH 9)
19    (LOAD&PUSH 12)
20    (LIST&PUSH 3)
22    (CALL1 3)                           ; ASSUME
24    L24
24    (CONST&PUSH 6)                      ; (%SUM)
25    (GETVALUE&PUSH 0)                   ; EXP
27    (GETVALUE&PUSH 1)                   ; VAR
29    (CALL2&PUSH 7)                      ; INTEGRATOR
31    (LOAD&PUSH 12)
32    (LOAD&PUSH 12)
33    (LOAD&PUSH 12)
34    (LIST&PUSH 5)
36    (T&PUSH)
37    (CALL2 8)                           ; SIMPLIFYA
39    (UNBIND 2)
41    (SKIP&RET 6)


Disassembly of function #:|(DEFUN RAT8PRIME (C) ...)-64|
(CONST 0) = RAT8PRIME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAT8PRIME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT8PRIME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAT8PRIME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAT8PRIME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAT8PRIME
8     (SKIP&RET 1)


Disassembly of function RAT8PRIME
(CONST 0) = C
(CONST 1) = RAT8
(CONST 2) = MNUMP
(CONST 3) = ZEROP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (C)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; C
3     (GETVALUE&PUSH 0)                   ; C
5     (CALL1 1)                           ; RAT8
7     (JMPIFNOT1 L21)
9     (GETVALUE&PUSH 0)                   ; C
11    (CALL1 2)                           ; MNUMP
13    (NOT)
14    (JMPIF1 L21)
16    (GETVALUE&PUSH 0)                   ; C
18    (CALL1 3)                           ; ZEROP1
20    (NOT)
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FINDS (X) ...)-65|
(CONST 0) = FINDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDS
8     (SKIP&RET 1)


Disassembly of function FINDS
(CONST 0) = X
(CONST 1) = (%LOG %INTEGRATE %ATAN)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L22)
7     (GETVALUE 0)                        ; X
9     (CAR&PUSH)
10    (JSR L0)
12    (JMPIF1 L19)
14    (GETVALUE 0)                        ; X
16    (CDR&PUSH)
17    (JSR L0)
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (GETVALUE&PUSH 0)                   ; X
24    (CONST&PUSH 1)                      ; (%LOG %INTEGRATE %ATAN)
25    (CALL2 2)                           ; MEMQ
27    (JMP L19)


Disassembly of function #:|(DEFUN RATLOG (EXP VAR FORM) ...)-66|
(CONST 0) = RATLOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATLOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATLOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATLOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATLOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATLOG
8     (SKIP&RET 1)


Disassembly of function RATLOG
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = FORM
(CONST 3) = A
(CONST 4) = B
(CONST 5) = C
(CONST 6) = D
(CONST 7) = Y
(CONST 8) = W
(CONST 9) = NILL
(CONST 10) = SASSQ
(CONST 11) = INTEGRATOR
(CONST 12) = FINDS
(CONST 13) = SDIFF
(CONST 14) = MUL2*
(CONST 15) = (MPLUS)
(CONST 16) = (MTIMES)
(CONST 17) = (MTIMES)
(CONST 18) = -1
(CONST 19) = SIMPLIFY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D VAR Y FORM)
writes special variables : (D C B Y)
82 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (LOAD 7)
7     (BIND 2)                            ; FORM
9     (NIL)
10    (BIND 3)                            ; A
12    (NIL)
13    (BIND 4)                            ; B
15    (NIL)
16    (BIND 5)                            ; C
18    (NIL)
19    (BIND 6)                            ; D
21    (NIL)
22    (BIND 7)                            ; Y
24    (NIL&PUSH)
25    (NIL)
26    (BIND 8)                            ; W
28    (GETVALUE 2)                        ; FORM
30    (SETVALUE 7)                        ; Y
32    (CONST&PUSH 4)                      ; B
33    (GETVALUE&PUSH 7)                   ; Y
35    (CONST&PUSH 9)                      ; NILL
36    (CALL 3 10)                         ; SASSQ
39    (CDR)
40    (SETVALUE 4)                        ; B
42    (CONST&PUSH 5)                      ; C
43    (GETVALUE&PUSH 7)                   ; Y
45    (CONST&PUSH 9)                      ; NILL
46    (CALL 3 10)                         ; SASSQ
49    (CDR)
50    (SETVALUE 5)                        ; C
52    (PUSH)
53    (GETVALUE&PUSH 1)                   ; VAR
55    (CALL2 11)                          ; INTEGRATOR
57    (SETVALUE 7)                        ; Y
59    (PUSH)
60    (CALL1&JMPIF 12 L124)               ; FINDS
63    (CONST&PUSH 3)                      ; A
64    (GETVALUE&PUSH 2)                   ; FORM
66    (CONST&PUSH 9)                      ; NILL
67    (CALL 3 10)                         ; SASSQ
70    (CDR&PUSH)
71    (GETVALUE&PUSH 1)                   ; VAR
73    (CALL2 13)                          ; SDIFF
75    (SETVALUE 6)                        ; D
77    (GETVALUE&PUSH 7)                   ; Y
79    (GETVALUE&PUSH 6)                   ; D
81    (CALL2&PUSH 14)                     ; MUL2*
83    (GETVALUE&PUSH 1)                   ; VAR
85    (CALL2 11)                          ; INTEGRATOR
87    (STORE 3)
88    (CONST&PUSH 3)                      ; A
89    (GETVALUE&PUSH 2)                   ; FORM
91    (CONST&PUSH 9)                      ; NILL
92    (CALL 3 10)                         ; SASSQ
95    (CDR)
96    (SETVALUE 6)                        ; D
98    (CONST&PUSH 15)                     ; (MPLUS)
99    (CONST&PUSH 16)                     ; (MTIMES)
100   (GETVALUE&PUSH 7)                   ; Y
102   (GETVALUE&PUSH 6)                   ; D
104   (LIST&PUSH 3)
106   (CONST&PUSH 17)                     ; (MTIMES)
107   (CONST&PUSH 18)                     ; -1
108   (LOAD&PUSH 7)
109   (LIST&PUSH 3)
111   (LIST&PUSH 3)
113   (CALL1 19)                          ; SIMPLIFY
115   (UNBIND1)
116   (SKIP 1)
118   (UNBIND 5)
120   L120
120   (UNBIND 3)
122   (SKIP&RET 4)
124   L124
124   (NIL)
125   (UNBIND1)
126   (SKIP 1)
128   (UNBIND 5)
130   (JMP L120)


Disassembly of function #:|(DEFUN FIND1 (Y A) ...)-67|
(CONST 0) = FIND1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIND1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIND1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIND1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIND1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIND1
8     (SKIP&RET 1)


Disassembly of function FIND1
(CONST 0) = Y
(CONST 1) = A
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A Y)
28 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; Y
3     (LOAD 4)
4     (BIND 1)                            ; A
6     (GETVALUE&PUSH 0)                   ; Y
8     (GETVALUE 1)                        ; A
10    (JMPIFEQ L36)
12    (GETVALUE 0)                        ; Y
14    (JMPIFATOM L39)
16    (GETVALUE 0)                        ; Y
18    (CAR&PUSH)
19    (GETVALUE&PUSH 1)                   ; A
21    (JSR L0)
23    (JMPIF1 L32)
25    (GETVALUE 0)                        ; Y
27    (CDR&PUSH)
28    (GETVALUE&PUSH 1)                   ; A
30    (JSR L0)
32    L32
32    (UNBIND 2)
34    (SKIP&RET 3)
36    L36
36    (T)
37    (JMP L32)
39    L39
39    (NIL)
40    (JMP L32)


Disassembly of function #:|(DEFUN MATCHSUM (ALIST BLIST) ...)-68|
(CONST 0) = MATCHSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MATCHSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MATCHSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MATCHSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MATCHSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MATCHSUM
8     (SKIP&RET 1)


Disassembly of function MATCHSUM
(CONST 0) = C
(CONST 1) = D
(CONST 2) = ((MTIMES) ((COEFFTT) (A FREEVAR)) ((COEFFTT) (C TRUE)))
(CONST 3) = M2
(CONST 4) = NILL
(CONST 5) = SASSQ
(CONST 6) = (MPLUS)
(CONST 7) = (MPLUS)
(CONST 8) = (MTIMES)
(CONST 9) = ((COEFFTT) (B FREE1))
(CONST 10) = MTIMESP
(CONST 11) = (D TRUE)
(CONST 12) = (MTIMES)
(CONST 13) = A
(CONST 14) = SUBLISS
(CONST 15) = (MEXPT)
(CONST 16) = B
(CONST 17) = -1
(CONST 18) = SIMPLIFY
(CONST 19) = (MPLUS)
(CONST 20) = TIMESLOOP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D C)
writes special variables : (D C)
71 byte-code instructions:
0     (PUSH-NIL 2)
2     (NIL)
3     (BIND 0)                            ; C
5     (NIL)
6     (BIND 1)                            ; D
8     (LOAD&CAR&PUSH 10)
10    (CONST&PUSH 2)                      ; ((MTIMES) (# #) (# #))
11    (NIL&PUSH)
12    (CALL 3 3)                          ; M2
15    (STORE 6)
16    (CONST&PUSH 0)                      ; C
17    (LOAD&PUSH 7)
18    (CONST&PUSH 4)                      ; NILL
19    (CALL 3 5)                          ; SASSQ
22    (CDR)
23    (SETVALUE 0)                        ; C
25    (CONST&PUSH 6)                      ; (MPLUS)
26    (LOAD 10)
27    (CONS&PUSH)
28    (CONST&PUSH 7)                      ; (MPLUS)
29    (CONST&PUSH 8)                      ; (MTIMES)
30    (CONST&PUSH 9)                      ; ((COEFFTT) (B FREE1))
31    (GETVALUE&PUSH 0)                   ; C
33    (CALL1&JMPIF 10 L90)                ; MTIMESP
36    (GETVALUE&PUSH 0)                   ; C
38    (LIST 1)
40    L40
40    (CONS)
41    (CONS&PUSH)
42    (CONST&PUSH 11)                     ; (D TRUE)
43    (LIST&PUSH 3)
45    (NIL&PUSH)
46    (CALL 3 3)                          ; M2
49    (STORE 7)
50    (JMPIFNOT L95)
52    (CONST&PUSH 12)                     ; (MTIMES)
53    (LOAD&PUSH 7)
54    (CONST&PUSH 13)                     ; A
55    (CALL2&PUSH 14)                     ; SUBLISS
57    (CONST&PUSH 15)                     ; (MEXPT)
58    (LOAD&PUSH 10)
59    (CONST&PUSH 16)                     ; B
60    (CALL2&PUSH 14)                     ; SUBLISS
62    (CONST&PUSH 17)                     ; -1
63    (LIST&PUSH 3)
65    (LIST&PUSH 3)
67    (CALL1 18)                          ; SIMPLIFY
69    (SETVALUE 1)                        ; D
71    (CONST&PUSH 19)                     ; (MPLUS)
72    (LOAD 11)
73    (CONS&PUSH)
74    (GETVALUE&PUSH 1)                   ; D
76    (LOAD&PUSH 11)
77    (CALL2&PUSH 20)                     ; TIMESLOOP
79    (NIL&PUSH)
80    (CALL 3 3)                          ; M2
83    (JMPIF L98)
85    (NIL)
86    L86
86    (UNBIND 2)
88    (SKIP&RET 5)
90    L90
90    (GETVALUE 0)                        ; C
92    (CDR)
93    (JMP L40)
95    L95
95    (NIL)
96    (JMP L86)
98    L98
98    (GETVALUE 1)                        ; D
100   (JMP L86)


Disassembly of function #:|(DEFUN TIMESLOOP (A B) ...)-69|
(CONST 0) = TIMESLOOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TIMESLOOP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TIMESLOOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TIMESLOOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TIMESLOOP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TIMESLOOP
8     (SKIP&RET 1)


Disassembly of function TIMESLOOP
(CONST 0) = A
(CONST 1) = B
(CONST 2) = (MPLUS)
(CONST 3) = C
(CONST 4) = MUL2*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C A B)
30 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (CONST&PUSH 2)                      ; (MPLUS)
7     (NIL&PUSH)
8     (GETVALUE&PUSH 1)                   ; B
10    (JMP L31)
12    L12
12    (LOAD&CAR&PUSH 0)
14    (LOAD 0)
15    (BIND 3)                            ; C
17    (GETVALUE&PUSH 0)                   ; A
19    (GETVALUE&PUSH 3)                   ; C
21    (CALL2 4)                           ; MUL2*
23    (UNBIND1)
24    (PUSH)
25    (LOAD&CONS&STORE 2)
27    (SKIP 1)
29    (LOAD&CDR&STORE 0)
31    L31
31    (LOAD&PUSH 0)
32    (CALLS1&JMPIFNOT 146 L12)           ; ENDP
35    (SKIP 1)
37    (LOAD&PUSH 0)
38    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
40    (SKIP 1)
42    (CONS)
43    (UNBIND 2)
45    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SIMPLOG (A) ...)-70|
(CONST 0) = SIMPLOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPLOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPLOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPLOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPLOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPLOG
8     (SKIP&RET 1)


Disassembly of function SIMPLOG
(CONST 0) = A
(CONST 1) = (%LOG)
(CONST 2) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; (%LOG)
4     (GETVALUE 0)                        ; A
6     (CONS&PUSH)
7     (NIL&PUSH)
8     (CALL2 2)                           ; SIMPLIFYA
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EXPANDS (AA B) ...)-71|
(CONST 0) = EXPANDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPANDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPANDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPANDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPANDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPANDS
8     (SKIP&RET 1)


Disassembly of function EXPANDS
(CONST 0) = AA
(CONST 1) = B
(CONST 2) = C
(CONST 3) = TIMESLOOP
(CONST 4) = ADDN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (AA C B)
29 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; AA
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (NIL&PUSH)
7     (GETVALUE&PUSH 1)                   ; B
9     (JMP L30)
11    L11
11    (LOAD&CAR&PUSH 0)
13    (LOAD 0)
14    (BIND 2)                            ; C
16    (GETVALUE&PUSH 2)                   ; C
18    (GETVALUE&PUSH 0)                   ; AA
20    (CALL2 3)                           ; TIMESLOOP
22    (UNBIND1)
23    (PUSH)
24    (LOAD&CONS&STORE 2)
26    (SKIP 1)
28    (LOAD&CDR&STORE 0)
30    L30
30    (LOAD&PUSH 0)
31    (CALLS1&JMPIFNOT 146 L11)           ; ENDP
34    (SKIP 1)
36    (LOAD&PUSH 0)
37    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
40    (NIL&PUSH)
41    (CALL2 4)                           ; ADDN
43    (UNBIND 2)
45    (SKIP&RET 3)


Disassembly of function #:|(DEFUN POWERLIST (EXP VAR) ...)-72|
(CONST 0) = POWERLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POWERLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POWERLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POWERLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POWERLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POWERLIST
8     (SKIP&RET 1)


Disassembly of function POWERLIST
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = Y
(CONST 3) = C
(CONST 4) = D
(CONST 5) = POWERLIST
(CONST 6) = B
(CONST 7) = 
((MTIMES) ((MEXPT) (VAR VARP) (C INTEGERP2)) ((COEFFTT) (A FREEVAR))
 ((COEFFTT) (B TRUE)))
(CONST 8) = M2
(CONST 9) = NILL
(CONST 10) = SASSQ
(CONST 11) = RAT10
(CONST 12) = LISTGCD
(CONST 13) = (MEXPT)
(CONST 14) = (MTIMES)
(CONST 15) = -1
(CONST 16) = POWER*
(CONST 17) = A
(CONST 18) = (MEXPT)
(CONST 19) = QUOT
(CONST 20) = SUBST10
(CONST 21) = SIMPLIFY
(CONST 22) = INTEGRATE5
(CONST 23) = SUBSTINT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR D POWERLIST C B Y EXP)
writes special variables : (D C B Y)
80 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (NIL)
7     (BIND 2)                            ; Y
9     (NIL)
10    (BIND 3)                            ; C
12    (NIL)
13    (BIND 4)                            ; D
15    (NIL)
16    (BIND 5)                            ; POWERLIST
18    (NIL)
19    (BIND 6)                            ; B
21    (GETVALUE&PUSH 0)                   ; EXP
23    (CONST&PUSH 7)                      ; ((MTIMES) (# # #) (# #) (# #))
24    (NIL&PUSH)
25    (CALL 3 8)                          ; M2
28    (SETVALUE 2)                        ; Y
30    (CONST&PUSH 6)                      ; B
31    (GETVALUE&PUSH 2)                   ; Y
33    (CONST&PUSH 9)                      ; NILL
34    (CALL 3 10)                         ; SASSQ
37    (CDR)
38    (SETVALUE 6)                        ; B
40    (CONST&PUSH 3)                      ; C
41    (GETVALUE&PUSH 2)                   ; Y
43    (CONST&PUSH 9)                      ; NILL
44    (CALL 3 10)                         ; SASSQ
47    (CDR)
48    (SETVALUE 3)                        ; C
50    (GETVALUE&PUSH 6)                   ; B
52    (CALL1&JMPIFNOT 11 L73)             ; RAT10
55    (GETVALUE&PUSH 3)                   ; C
57    (CALLS2&PUSH 150)                   ; 1+
59    (GETVALUE 5)                        ; POWERLIST
61    (CONS&PUSH)
62    (CALL1 12)                          ; LISTGCD
64    (SETVALUE 4)                        ; D
66    (JMPIFNOT L73)
68    (GETVALUE&PUSH 4)                   ; D
70    (CALLS2&JMPIFNOT 145 L78)           ; ZEROP
73    L73
73    (NIL)
74    (UNBIND 5)
76    (JMP L133)
78    L78
78    (CONST&PUSH 13)                     ; (MEXPT)
79    (GETVALUE&PUSH 1)                   ; VAR
81    (GETVALUE&PUSH 4)                   ; D
83    (LIST&PUSH 3)
85    (GETVALUE&PUSH 1)                   ; VAR
87    (CONST&PUSH 14)                     ; (MTIMES)
88    (GETVALUE&PUSH 4)                   ; D
90    (CONST&PUSH 15)                     ; -1
91    (CALL2&PUSH 16)                     ; POWER*
93    (CONST&PUSH 17)                     ; A
94    (GETVALUE&PUSH 2)                   ; Y
96    (CONST&PUSH 9)                      ; NILL
97    (CALL 3 10)                         ; SASSQ
100   (CDR&PUSH)
101   (CONST&PUSH 18)                     ; (MEXPT)
102   (GETVALUE&PUSH 1)                   ; VAR
104   (GETVALUE&PUSH 3)                   ; C
106   (CALLS2&PUSH 150)                   ; 1+
108   (GETVALUE&PUSH 4)                   ; D
110   (CALL2&PUSH 19)                     ; QUOT
112   (CALLS2&PUSH 151)                   ; 1-
114   (LIST&PUSH 3)
116   (GETVALUE&PUSH 6)                   ; B
118   (CALL1&PUSH 20)                     ; SUBST10
120   (LIST&PUSH 5)
122   (CALL1&PUSH 21)                     ; SIMPLIFY
124   (GETVALUE&PUSH 1)                   ; VAR
126   (CALL2&PUSH 22)                     ; INTEGRATE5
128   (CALL 3 23)                         ; SUBSTINT
131   (UNBIND 5)
133   L133
133   (UNBIND 2)
135   (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIFFDIV (EXP VAR) ...)-73|
(CONST 0) = DIFFDIV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFFDIV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFFDIV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFFDIV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFFDIV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFFDIV
8     (SKIP&RET 1)


Disassembly of function DIFFDIV
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = Y
(CONST 3) = A
(CONST 4) = X
(CONST 5) = V
(CONST 6) = D
(CONST 7) = W
(CONST 8) = MEXPTP
(CONST 9) = MPLUSP
(CONST 10) = INTEGERP2
(CONST 11) = 6
(CONST 12) = 0
(CONST 13) = EXPANDEXPT
(CONST 14) = INTEGRATOR
(CONST 15) = MTIMESP
(CONST 16) = (MTIMES)
(CONST 17) = (MPLUS)
(CONST 18) = (COEFFPT)
(CONST 19) = (C FREE1)
(CONST 20) = CHOICESIN
(CONST 21) = SDIFF
(CONST 22) = M2
(CONST 23) = 2
(CONST 24) = C
(CONST 25) = NILL
(CONST 26) = SASSQ
(CONST 27) = MUL2*
(CONST 28) = -1
(CONST 29) = POWER*
(CONST 30) = MULN
(CONST 31) = (MPLUS MTIMES)
(CONST 32) = MEMQ
(CONST 33) = MEXPT
(CONST 34) = FREEVAR
(CONST 35) = MATCHSUM
(CONST 36) = INTEGRALLOOKUPS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W V X D VAR Y EXP)
writes special variables : (V D X W Y EXP)
228 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (NIL)
7     (BIND 2)                            ; Y
9     (NIL)
10    (BIND 3)                            ; A
12    (NIL)
13    (BIND 4)                            ; X
15    (NIL)
16    (BIND 5)                            ; V
18    (NIL)
19    (BIND 6)                            ; D
21    (NIL&PUSH)
22    (NIL)
23    (BIND 7)                            ; W
25    (NIL&PUSH)
26    (GETVALUE&PUSH 0)                   ; EXP
28    (CALL1&JMPIFNOT 8 L67)              ; MEXPTP
31    (GETVALUE 0)                        ; EXP
33    (CDR)
34    (CAR&PUSH)
35    (CALL1&JMPIFNOT 9 L67)              ; MPLUSP
38    (GETVALUE 0)                        ; EXP
40    (CDR)
41    (CDR)
42    (CAR&PUSH)
43    (CALL1&JMPIFNOT 10 L67)             ; INTEGERP2
46    (GETVALUE 0)                        ; EXP
48    (CDR)
49    (CDR)
50    (CAR&PUSH)
51    (CONST&PUSH 11)                     ; 6
52    (CALLSR&JMPIFNOT 1 47 L67)          ; <
56    (GETVALUE 0)                        ; EXP
58    (CDR)
59    (CDR)
60    (CAR&PUSH)
61    (CONST&PUSH 12)                     ; 0
62    (CALLSR&JMPIF 1 48 L251)            ; >
67    L67
67    (GETVALUE&PUSH 0)                   ; EXP
69    (CALL1&JMPIF 15 L268)               ; MTIMESP
73    (CONST&PUSH 16)                     ; (MTIMES)
74    (GETVALUE&PUSH 0)                   ; EXP
76    (LIST 2)
78    L78
78    (SETVALUE 0)                        ; EXP
80    (CDR)
81    (STORE 4)
82    L82
82    (LOAD 4)
83    (CAR)
84    (SETVALUE 2)                        ; Y
86    (CONST&PUSH 17)                     ; (MPLUS)
87    (CONST&PUSH 18)                     ; (COEFFPT)
88    (CONST&PUSH 19)                     ; (C FREE1)
89    (GETVALUE&PUSH 2)                   ; Y
91    (GETVALUE 0)                        ; EXP
93    (CDR&PUSH)
94    (CALL2 20)                          ; CHOICESIN
96    (CONS)
97    (CONS&PUSH)
98    (LIST 2)
100   (STORE 0)
101   (GETVALUE&PUSH 2)                   ; Y
103   (GETVALUE&PUSH 1)                   ; VAR
105   (CALL2&PUSH 21)                     ; SDIFF
107   (LOAD&PUSH 1)
108   (NIL&PUSH)
109   (CALL 3 22)                         ; M2
112   (SETVALUE 7)                        ; W
114   (JMPIF L273)
117   (GETVALUE 2)                        ; Y
119   (JMPIFATOM L298)
122   (GETVALUE 2)                        ; Y
124   (CAR)
125   (CAR&PUSH)
126   (CONST&PUSH 31)                     ; (MPLUS MTIMES)
128   (CALL2&JMPIF 32 L298)               ; MEMQ
132   (GETVALUE 2)                        ; Y
134   (CAR)
135   (CAR&PUSH)
136   (JMPIFEQTO 33 L314)                 ; MEXPT
140   (GETVALUE 2)                        ; Y
142   L142
142   (CDR)
143   (CAR)
144   L144
144   (SETVALUE 7)                        ; W
146   (PUSH)
147   (GETVALUE&PUSH 1)                   ; VAR
149   (CALL2 21)                          ; SDIFF
151   (SETVALUE 4)                        ; X
153   (JMPIFNOT L333)
156   (PUSH)
157   (CALL1&JMPIFNOT 9 L333)             ; MPLUSP
161   (GETVALUE&PUSH 2)                   ; Y
163   (GETVALUE 0)                        ; EXP
165   (CDR&PUSH)
166   (CALL2 20)                          ; CHOICESIN
168   (SETVALUE 6)                        ; D
170   (JMPIFNOT L333)
173   (CAR)
174   (SETVALUE 5)                        ; V
176   (JMPIFNOT L333)
179   (PUSH)
180   (CALL1&JMPIFNOT 9 L333)             ; MPLUSP
184   (GETVALUE 6)                        ; D
186   (CDR)
187   (JMPIF L333)
190   (GETVALUE 4)                        ; X
192   (CDR&PUSH)
193   (GETVALUE 5)                        ; V
195   (CDR&PUSH)
196   (CALL2 35)                          ; MATCHSUM
198   (SETVALUE 6)                        ; D
200   (JMPIFNOT L356)
203   (CONST&PUSH 24)                     ; C
204   (GETVALUE 6)                        ; D
206   (CONS&PUSH)
207   (LIST 1)
209   (SETVALUE 7)                        ; W
211   L211
211   (GETVALUE&PUSH 2)                   ; Y
213   (CALL1 36)                          ; INTEGRALLOOKUPS
215   (SETVALUE 4)                        ; X
217   (JMPIFNOT L347)
220   (GETVALUE&PUSH 7)                   ; W
222   (T)
223   (JMPIFEQ L351)
226   (GETVALUE&PUSH 4)                   ; X
228   (CONST&PUSH 24)                     ; C
229   (GETVALUE&PUSH 7)                   ; W
231   (CONST&PUSH 25)                     ; NILL
232   (CALL 3 26)                         ; SASSQ
235   (CDR&PUSH)
236   (CONST&PUSH 28)                     ; -1
237   (CALL2&PUSH 29)                     ; POWER*
239   (CALL2 27)                          ; MUL2*
241   L241
241   (SKIP 1)
243   (UNBIND1)
244   (SKIP 1)
246   (UNBIND 5)
248   (JMP L372)
251   L251
251   (GETVALUE 0)                        ; EXP
253   (CDR)
254   (CAR&PUSH)
255   (GETVALUE 0)                        ; EXP
257   (CDR)
258   (CDR)
259   (CAR&PUSH)
260   (CALL2&PUSH 13)                     ; EXPANDEXPT
262   (GETVALUE&PUSH 1)                   ; VAR
264   (CALL2 14)                          ; INTEGRATOR
266   (JMP L241)
268   L268
268   (GETVALUE 0)                        ; EXP
270   (JMP L78)
273   L273
273   (GETVALUE&PUSH 2)                   ; Y
275   (GETVALUE&PUSH 2)                   ; Y
277   (CONST&PUSH 23)                     ; 2
278   (CONST&PUSH 24)                     ; C
279   (GETVALUE&PUSH 7)                   ; W
281   (CONST&PUSH 25)                     ; NILL
282   (CALL 3 26)                         ; SASSQ
285   (CDR&PUSH)
286   (CALL2&PUSH 27)                     ; MUL2*
288   (CONST&PUSH 28)                     ; -1
289   (CALL2&PUSH 29)                     ; POWER*
291   (LIST&PUSH 3)
293   (NIL&PUSH)
294   (CALL2 30)                          ; MULN
296   (JMP L241)
298   L298
298   (GETVALUE 2)                        ; Y
300   (JMP L144)
303   L303
303   (GETVALUE 2)                        ; Y
305   (CDR)
306   (JMP L142)
309   L309
309   (GETVALUE 2)                        ; Y
311   (JMP L142)
314   L314
314   (GETVALUE 2)                        ; Y
316   (CDR)
317   (CAR&PUSH)
318   (CALL1&JMPIF 34 L303)               ; FREEVAR
321   (GETVALUE 2)                        ; Y
323   (CDR)
324   (CDR)
325   (CAR&PUSH)
326   (CALL1&JMPIF 34 L309)               ; FREEVAR
329   (CONST 12)                          ; 0
330   (JMP L144)
333   L333
333   (GETVALUE&PUSH 4)                   ; X
335   (LOAD&PUSH 1)
336   (NIL&PUSH)
337   (CALL 3 22)                         ; M2
340   (SETVALUE 7)                        ; W
342   (JMPIFNOT L359)
344   (JMP L211)
347   L347
347   (NIL)
348   (JMP L241)
351   L351
351   (GETVALUE 4)                        ; X
353   (JMP L241)
356   L356
356   (NIL)
357   (SETVALUE 7)                        ; W
359   L359
359   (LOAD&CDR&STORE 4)
361   (JMPIF L82)
364   (NIL)
365   (SKIP 1)
367   (UNBIND1)
368   (SKIP 1)
370   (UNBIND 5)
372   L372
372   (UNBIND 2)
374   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SUBLISS (A B) ...)-74|
(CONST 0) = SUBLISS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBLISS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBLISS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBLISS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBLISS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBLISS
8     (SKIP&RET 1)


Disassembly of function SUBLISS
(CONST 0) = A
(CONST 1) = B
(CONST 2) = X
(CONST 3) = Y
(CONST 4) = MAXIMA-SUBSTITUTE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y A B)
writes special variables : (Y X)
32 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (NIL)
7     (BIND 2)                            ; X
9     (NIL)
10    (BIND 3)                            ; Y
12    (NIL&PUSH)
13    (GETVALUE 1)                        ; B
15    (SETVALUE 2)                        ; X
17    (GETVALUE 0)                        ; A
19    (JMP L38)
21    L21
21    (LOAD 0)
22    (CAR)
23    (SETVALUE 3)                        ; Y
25    (CDR&PUSH)
26    (GETVALUE 3)                        ; Y
28    (CAR&PUSH)
29    (GETVALUE&PUSH 2)                   ; X
31    (CALL 3 4)                          ; MAXIMA-SUBSTITUTE
34    (SETVALUE 2)                        ; X
36    (LOAD 0)
37    (CDR)
38    L38
38    (STORE 0)
39    (LOAD&JMPIF 0 L21)
42    (GETVALUE 2)                        ; X
44    (SKIP 1)
46    (UNBIND 4)
48    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SUBSTINT (X Y EXPRES) ...)-75|
(CONST 0) = SUBSTINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBSTINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBSTINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBSTINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBSTINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBSTINT
8     (SKIP&RET 1)


Disassembly of function SUBSTINT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = EXPRES
(CONST 3) = %INTEGRATE
(CONST 4) = EXP
(CONST 5) = VAR
(CONST 6) = MAXIMA-SUBSTITUTE
(CONST 7) = SUBSTINT1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP Y X EXPRES)
28 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; EXPRES
9     (GETVALUE 2)                        ; EXPRES
11    (JMPIFATOM L20)
13    (GETVALUE 2)                        ; EXPRES
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 3 L35)                   ; %INTEGRATE
20    L20
20    (GETVALUE&PUSH 0)                   ; X
22    (GETVALUE&PUSH 1)                   ; Y
24    (GETVALUE&PUSH 2)                   ; EXPRES
26    (CALL&PUSH 3 6)                     ; MAXIMA-SUBSTITUTE
29    (CALL1 7)                           ; SUBSTINT1
31    L31
31    (UNBIND 3)
33    (SKIP&RET 4)
35    L35
35    (GETVALUE 2)                        ; EXPRES
37    (CAR&PUSH)
38    (GETVALUE&PUSH 4)                   ; EXP
40    (GETVALUE&PUSH 5)                   ; VAR
42    (LIST 3)
44    (JMP L31)


Disassembly of function #:|(DEFUN SUBSTINT1 (EXP) ...)-76|
(CONST 0) = SUBSTINT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBSTINT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBSTINT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBSTINT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBSTINT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBSTINT1
8     (SKIP&RET 1)


Disassembly of function SUBSTINT1
(CONST 0) = EXP
(CONST 1) = %INTEGRATE
(CONST 2) = VAR
(CONST 3) = FREE
(CONST 4) = (%INTEGRATE)
(CONST 5) = SDIFF
(CONST 6) = MUL2
(CONST 7) = SIMPLIFY
(CONST 8) = SUBSTINT1
(CONST 9) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP)
50 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (JMPIFATOM L48)
7     (GETVALUE 0)                        ; EXP
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFNOTEQTO 1 L39)                ; %INTEGRATE
14    (GETVALUE 0)                        ; EXP
16    (CDR)
17    (CDR)
18    (CDR)
19    (JMPIF L39)
21    (GETVALUE 0)                        ; EXP
23    (CDR)
24    (CDR)
25    (CAR&PUSH)
26    (CALLS2&JMPIF 6 L39)                ; SYMBOLP
29    (GETVALUE 0)                        ; EXP
31    (CDR)
32    (CDR)
33    (CAR&PUSH)
34    (GETVALUE&PUSH 2)                   ; VAR
36    (CALL2&JMPIFNOT 3 L52)              ; FREE
39    L39
39    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; SUBSTINT1
41    (GETVALUE&PUSH 0)                   ; EXP
43    (CALL2 9)                           ; RECUR-APPLY
45    L45
45    (UNBIND1)
46    (SKIP&RET 2)
48    L48
48    (GETVALUE 0)                        ; EXP
50    (JMP L45)
52    L52
52    (CONST&PUSH 4)                      ; (%INTEGRATE)
53    (GETVALUE 0)                        ; EXP
55    (CDR)
56    (CAR&PUSH)
57    (GETVALUE 0)                        ; EXP
59    (CDR)
60    (CDR)
61    (CAR&PUSH)
62    (GETVALUE&PUSH 2)                   ; VAR
64    (CALL2&PUSH 5)                      ; SDIFF
66    (CALL2&PUSH 6)                      ; MUL2
68    (GETVALUE&PUSH 2)                   ; VAR
70    (LIST&PUSH 3)
72    (CALL1 7)                           ; SIMPLIFY
74    (JMP L45)


Wrote file binary-clisp/sin.fas
Wrote file /cygdrive/e/temp/maxima/src/sin.lis