Listing of compilation of file /cygdrive/e/temp/maxima/src/factor.lisp
on 2002-12-17 13:33:27 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/factor.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE FACTOR)-2|
(CONST 0) = FACTOR
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTOR
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RATMAC)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (*LEXPR $FACTOR) (SPECIAL *STOP* TRL* ...) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL AFIXN FCTCFIXN ...))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO AFIXN (ROW COL) ...)-6|
(CONST 0) = AFIXN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE AFIXN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; AFIXN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AFIXN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE AFIXN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; AFIXN
10    (SKIP&RET 1)


Disassembly of function AFIXN
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = ARRAYCALL
(CONST 3) = FIXNUM
(CONST 4) = AFIXN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L24)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; ARRAYCALL
16    (CONST&PUSH 3)                      ; FIXNUM
17    (CONST&PUSH 4)                      ; AFIXN
18    (LOAD&PUSH 4)
19    (LOAD&PUSH 4)
20    (LIST 5)
22    (SKIP&RET 5)
24    L24
24    (LOAD&PUSH 2)
25    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
27    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO FCTCFIXN (IND) ...)-7|
(CONST 0) = FCTCFIXN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FCTCFIXN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; FCTCFIXN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FCTCFIXN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FCTCFIXN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; FCTCFIXN
10    (SKIP&RET 1)


Disassembly of function FCTCFIXN
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = IND
(CONST 3) = ARRAYCALL
(CONST 4) = FIXNUM
(CONST 5) = FCTCFIXN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (IND)
19 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L23)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; IND
13    (CONST&PUSH 3)                      ; ARRAYCALL
14    (CONST&PUSH 4)                      ; FIXNUM
15    (CONST&PUSH 5)                      ; FCTCFIXN
16    (GETVALUE&PUSH 2)                   ; IND
18    (LIST 4)
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (LOAD&PUSH 2)
24    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO INVCFIXN (IND) ...)-8|
(CONST 0) = INVCFIXN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INVCFIXN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; INVCFIXN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INVCFIXN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INVCFIXN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; INVCFIXN
10    (SKIP&RET 1)


Disassembly of function INVCFIXN
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = IND
(CONST 3) = ARRAYCALL
(CONST 4) = FIXNUM
(CONST 5) = INVCFIXN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (IND)
19 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L23)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; IND
13    (CONST&PUSH 3)                      ; ARRAYCALL
14    (CONST&PUSH 4)                      ; FIXNUM
15    (CONST&PUSH 5)                      ; INVCFIXN
16    (GETVALUE&PUSH 2)                   ; IND
18    (LIST 4)
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (LOAD&PUSH 2)
24    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMVAR GAUSS NIL)-9-1|
(CONST 0) = GAUSS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; GAUSS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; GAUSS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR GAUSS NIL)-9-2|
(CONST 0) = (SPECIAL GAUSS)
(CONST 1) = GAUSS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL GAUSS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; GAUSS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; GAUSS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; GAUSS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *MIN* NIL)-10-1|
(CONST 0) = *MIN*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *MIN*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *MIN*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *MIN* NIL)-10-2|
(CONST 0) = (SPECIAL *MIN*)
(CONST 1) = *MIN*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *MIN*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *MIN*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *MIN*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *MIN*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *MX* NIL)-11-1|
(CONST 0) = *MX*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *MX*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *MX*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *MX* NIL)-11-2|
(CONST 0) = (SPECIAL *MX*)
(CONST 1) = *MX*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *MX*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *MX*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *MX*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *MX*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MINPOLY* NIL)-12-1|
(CONST 0) = MINPOLY*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; MINPOLY*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; MINPOLY*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MINPOLY* NIL)-12-2|
(CONST 0) = (SPECIAL MINPOLY*)
(CONST 1) = MINPOLY*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MINPOLY*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MINPOLY*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MINPOLY*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MINPOLY*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MPLC* NIL)-13-1|
(CONST 0) = MPLC*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPLC*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; MPLC*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MPLC* NIL)-13-2|
(CONST 0) = (SPECIAL MPLC*)
(CONST 1) = MPLC*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MPLC*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MPLC*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MPLC*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MPLC*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MM* 1)-14-1|
(CONST 0) = MM*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; MM*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; MM*
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 1
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MM* 1)-14-2|
(CONST 0) = (SPECIAL MM*)
(CONST 1) = MM*
(CONST 2) = 1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MM*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MM*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MM*
8     (CONST&PUSH 2)                      ; 1
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MM*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ALPHA NIL)-15-1|
(CONST 0) = ALPHA
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALPHA
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ALPHA
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ALPHA NIL)-15-2|
(CONST 0) = (SPECIAL ALPHA)
(CONST 1) = ALPHA
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ALPHA)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ALPHA
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ALPHA
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; ALPHA
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SMALLPRIMES '(3 5 7 ...))-16-1|
(CONST 0) = SMALLPRIMES
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = (3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; SMALLPRIMES
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; SMALLPRIMES
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; (3 5 7 11 13 17 19 23 29 31 37 ...)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SMALLPRIMES '(3 5 7 ...))-16-2|
(CONST 0) = (SPECIAL SMALLPRIMES)
(CONST 1) = SMALLPRIMES
(CONST 2) = (3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL SMALLPRIMES)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; SMALLPRIMES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; SMALLPRIMES
8     (CONST&PUSH 2)                      ; (3 5 7 11 13 17 19 23 29 31 37 ...)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; SMALLPRIMES
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NALGFAC T ...)-17-1|
(CONST 0) = $NALGFAC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NALGFAC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $NALGFAC
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NALGFAC T ...)-17-2|
(CONST 0) = (SPECIAL $NALGFAC)
(CONST 1) = $NALGFAC
(CONST 2) = VARIABLE
(CONST 3) = "If t use bmt's algebraic factoring algorithm"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $NALGFAC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $NALGFAC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $NALGFAC
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $NALGFAC
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If t use bmt's algebraic factoring algorithm"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $NALGFAC
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NEWFAC NIL)-18-1|
(CONST 0) = $NEWFAC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEWFAC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $NEWFAC
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NEWFAC NIL)-18-2|
(CONST 0) = (SPECIAL $NEWFAC)
(CONST 1) = $NEWFAC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $NEWFAC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $NEWFAC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $NEWFAC
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $NEWFAC
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN CSQFRP ($FACTORFLAG) ...)-19|
(CONST 0) = CSQFRP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CSQFRP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CSQFRP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CSQFRP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CSQFRP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CSQFRP
8     (SKIP&RET 1)


Disassembly of function CSQFRP
(CONST 0) = $FACTORFLAG
(CONST 1) = 1
(CONST 2) = CFACTOR
(CONST 3) = ODDELM
(CONST 4) = ZL-DELETE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($FACTORFLAG)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; $FACTORFLAG
3     (CONST&PUSH 1)                      ; 1
4     (GETVALUE&PUSH 0)                   ; $FACTORFLAG
6     (CALL1 2)                           ; CFACTOR
8     (CDR&PUSH)
9     (CALL1&PUSH 3)                      ; ODDELM
11    (CALL2 4)                           ; ZL-DELETE
13    (NOT)
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PRIMCYCLO (N &AUX *G* ...) ...)-20|
(CONST 0) = PRIMCYCLO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRIMCYCLO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRIMCYCLO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRIMCYCLO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRIMCYCLO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRIMCYCLO
8     (SKIP&RET 1)


Disassembly of function PRIMCYCLO
(CONST 0) = *G*
(CONST 1) = CFACTORW
(CONST 2) = *MAKE-LIST
(CONST 3) = CYCLOTOMIC
(CONST 4) = RES
(CONST 5) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RES)
68 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; *G*
3     (LOAD&PUSH 4)
4     (CALL1&PUSH 1)                      ; CFACTORW
6     (PUSH-NIL 2)
8     (LOAD&PUSH 2)
9     (PUSH-NIL 3)
11    (LOAD&JMPIFNOT 3 L44)
14    L14
14    (LOAD&CAR&STORE 3 5)
17    (LOAD 3)
18    (CDR)
19    (CAR)
20    (STORE 4)
21    (PUSH)
22    (LOAD&PUSH 6)
23    (CALL2 2)                           ; *MAKE-LIST
25    (STORE 0)
26    (LOAD&JMPIF 1 L76)
29    (LOAD 0)
30    (STORE 2)
31    L31
31    (PUSH)
32    (PUSH-UNBOUND 1)
34    (CALLS1&STORE 156 1)                ; LAST
37    L37
37    (LOAD 3)
38    (CDR)
39    (CDR)
40    (STORE 3)
41    (LOAD&JMPIF 3 L14)
44    L44
44    (LOAD 2)
45    (SKIP 6)
47    (STORE 0)
48    (LOAD&PUSH 5)
49    (LOAD&PUSH 1)
50    (LIST&PUSH 2)
52    (CALL1 3)                           ; CYCLOTOMIC
54    (BIND 4)                            ; RES
56    (GETVALUE 4)                        ; RES
58    (JMPIFCONSP L85)
60    (GETVALUE&PUSH 4)                   ; RES
62    (JMPIFEQTO 5 L91)                   ; 0
65    (CONST&PUSH 5)                      ; 0
66    (GETVALUE&PUSH 4)                   ; RES
68    (LIST 2)
70    (UNBIND1)
71    L71
71    (SKIP 1)
73    (UNBIND1)
74    (SKIP&RET 2)
76    L76
76    (PUSH)
77    (LOAD&PUSH 1)
78    (CALLS1&JMPIFNOT 171 L37)           ; SYSTEM::%RPLACD
81    (LOAD 1)
82    (CDR)
83    (JMP L31)
85    L85
85    (GETVALUE 4)                        ; RES
87    (CDR)
88    (UNBIND1)
89    (JMP L71)
91    L91
91    (NIL)
92    (UNBIND1)
93    (JMP L71)


Disassembly of function #:|(DEFUN FACTXN+-1 (P) ...)-21|
(CONST 0) = FACTXN+-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTXN+-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTXN+-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTXN+-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTXN+-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTXN+-1
8     (SKIP&RET 1)


Disassembly of function FACTXN+-1
(CONST 0) = P
(CONST 1) = *G*
(CONST 2) = $FACTORFLAG
(CONST 3) = 1
(CONST 4) = (1 0 1)
(CONST 5) = FACTXN+1
(CONST 6) = (1 0 -1)
(CONST 7) = FACTXN-1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR)
6     (BIND 1)                            ; *G*
8     (T)
9     (BIND 2)                            ; $FACTORFLAG
11    (GETVALUE 0)                        ; P
13    (CDR)
14    (CAR&PUSH)
15    (JMPIFEQTO 3 L39)                   ; 1
18    (GETVALUE 0)                        ; P
20    (CDR)
21    (CDR&PUSH)
22    (CONST&PUSH 4)                      ; (1 0 1)
23    (CALLS2&JMPIF 2 L45)                ; EQUAL
26    (GETVALUE 0)                        ; P
28    (CDR)
29    (CDR&PUSH)
30    (CONST&PUSH 6)                      ; (1 0 -1)
31    (CALLS2&JMPIF 2 L53)                ; EQUAL
34    (NIL)
35    L35
35    (UNBIND 3)
37    (SKIP&RET 2)
39    L39
39    (GETVALUE&PUSH 0)                   ; P
41    (LIST 1)
43    (JMP L35)
45    L45
45    (GETVALUE 0)                        ; P
47    (CDR)
48    (CAR&PUSH)
49    (CALL1 5)                           ; FACTXN+1
51    (JMP L35)
53    L53
53    (GETVALUE 0)                        ; P
55    (CDR)
56    (CAR&PUSH)
57    (CALL1 7)                           ; FACTXN-1
59    (JMP L35)


Disassembly of function #:|(DEFMFUN CFACTORW (N) ...)-22|
(CONST 0) = CFACTORW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFACTORW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFACTORW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFACTORW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFACTORW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFACTORW
8     (SKIP&RET 1)


Disassembly of function CFACTORW
(CONST 0) = $FACTORFLAG
(CONST 1) = CFACTOR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (T)
1     (BIND 0)                            ; $FACTORFLAG
3     (LOAD&PUSH 4)
4     (CALL1 1)                           ; CFACTOR
6     (UNBIND1)
7     (SKIP&RET 2)


Disassembly of function #:|(DEFUN FACTXN-1 (N) ...)-23|
(CONST 0) = FACTXN-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTXN-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTXN-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTXN-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTXN-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTXN-1
8     (SKIP&RET 1)


Disassembly of function FACTXN-1
(CONST 0) = 2
(CONST 1) = QUOT
(CONST 2) = FACTXN+1
(CONST 3) = CYCLOTOMIC
(CONST 4) = CFACTOR
(CONST 5) = DIVISORS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
20 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 149 L16)              ; EVENP
4     (CONST&SYMBOL-FUNCTION&PUSH 3)      ; CYCLOTOMIC
6     (LOAD&PUSH 2)
7     (CALL1&PUSH 4)                      ; CFACTOR
9     (CALL1&PUSH 5)                      ; DIVISORS
11    (CALLSR 0 22)                       ; MAPCAR
14    (SKIP&RET 2)
16    L16
16    (LOAD&PUSH 1)
17    (CONST&PUSH 0)                      ; 2
18    (CALL2&PUSH 1)                      ; QUOT
20    (JSR&PUSH L0)
22    (LOAD&PUSH 2)
23    (CONST&PUSH 0)                      ; 2
24    (CALL2&PUSH 1)                      ; QUOT
26    (CALL1&PUSH 2)                      ; FACTXN+1
28    (CALLSR 2 34)                       ; APPEND
31    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FACTXN+1 (N) ...)-24|
(CONST 0) = FACTXN+1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTXN+1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTXN+1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTXN+1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTXN+1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTXN+1
8     (SKIP&RET 1)


Disassembly of function FACTXN+1
(CONST 0) = GAUSS
(CONST 1) = $SUBRES
(CONST 2) = *G*
(CONST 3) = 2
(CONST 4) = QUOT
(CONST 5) = 1
(CONST 6) = 0
(CONST 7) = ALPHA
(CONST 8) = $GCD
(CONST 9) = PGCDCOFACTS
(CONST 10) = FIRSTN
(CONST 11) = CFACTOR
(CONST 12) = -1
(CONST 13) = CYCLOTOMIC
(CONST 14) = DIVISORS
(CONST 15) = P
(CONST 16) = PCSUBST
(CONST 17) = PABS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P ALPHA *G* GAUSS)
115 byte-code instructions:
0     (GETVALUE 0)                        ; GAUSS
2     (JMPIFNOT L92)
5     L5
5     (NIL)
6     (BIND 0)                            ; GAUSS
8     (LOAD&PUSH 4)
9     (JSR&PUSH L87)
12    (LOAD&PUSH 5)
13    (CALLS2&JMPIF 148 L36)              ; ODDP
16    (CONST&PUSH 1)                      ; $SUBRES
17    (GETVALUE&PUSH 2)                   ; *G*
19    (LOAD&PUSH 7)
20    (CONST&PUSH 3)                      ; 2
21    (CALL2&PUSH 4)                      ; QUOT
23    (CONST&PUSH 5)                      ; 1
24    (CONST&PUSH 6)                      ; 0
25    (GETVALUE&PUSH 7)                   ; ALPHA
27    (LIST&PUSH 5)
29    (LOAD 1)
30    (BIND 8)                            ; $GCD
32    (NIL&PUSH)
33    (LOAD&PUSH 6)
34    (JMP L56)
36    L36
36    (LOAD 0)
37    (JMP L70)
39    L39
39    (LOAD&CAR&PUSH 0)
41    (CONST&PUSH 3)                      ; 2
42    (LOAD&PUSH 1)
43    (LOAD&PUSH 8)
44    (CALL2&PUSH 9)                      ; PGCDCOFACTS
46    (CALL2&PUSH 10)                     ; FIRSTN
48    (LOAD&PUSH 3)
49    (CALLS1&STORE 163 2)                ; NRECONC
52    (SKIP 1)
54    (LOAD&CDR&STORE 0)
56    L56
56    (LOAD&PUSH 0)
57    (CALLS1&JMPIFNOT 146 L39)           ; ENDP
60    (SKIP 1)
62    (LOAD&PUSH 0)
63    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
65    (SKIP 1)
67    (UNBIND1)
68    (SKIP 2)
70    L70
70    (SKIP 1)
72    (UNBIND1)
73    (SKIP&RET 2)
75    L75
75    (GETVALUE&PUSH 2)                   ; *G*
77    (LOAD&PUSH 4)
78    (CONST&PUSH 5)                      ; 1
79    (CONST&PUSH 6)                      ; 0
80    (CONST&PUSH 5)                      ; 1
81    (LIST&PUSH 5)
83    (NIL)
84    (CONS)
85    (SKIP&RET 4)
87    L87
87    (GETVALUE 0)                        ; GAUSS
89    (JMPIF L5)
92    L92
92    (CONST&PUSH 5)                      ; 1
93    (LOAD&PUSH 2)
94    (CALL1&PUSH 11)                     ; CFACTOR
96    (CALLS2&PUSH 72)                    ; REVERSE
98    (LOAD 0)
99    (CDR)
100   (CAR&PUSH)
101   (JMPIFNOTEQTO 3 L114)               ; 2
104   (CONST&PUSH 3)                      ; 2
105   (LOAD&CAR&PUSH 1)
107   (CALLS2&STORE 154 1)                ; EXPT
110   (LOAD 0)
111   (CDR)
112   (CDR)
113   (STORE 0)
114   L114
114   (GETVALUE&PUSH 2)                   ; *G*
116   (LOAD&PUSH 2)
117   (CONST&PUSH 12)                     ; -1
118   (LIST 3)
120   (STORE 1)
121   (LOAD&JMPIFNOT 0 L75)
124   (NIL&PUSH)
125   (CONST&SYMBOL-FUNCTION&PUSH 13)     ; CYCLOTOMIC
127   (LOAD&PUSH 2)
128   (CALLS2&PUSH 72)                    ; REVERSE
130   (CALL1&PUSH 14)                     ; DIVISORS
132   (CALLSR&PUSH 0 22)                  ; MAPCAR
135   (JMP L161)
137   L137
137   (LOAD&CAR&PUSH 0)
139   (LOAD 0)
140   (BIND 15)                           ; P
142   (GETVALUE&PUSH 15)                  ; P
144   (LOAD&PUSH 8)
145   (GETVALUE 15)                       ; P
147   (CAR&PUSH)
148   (CALL&PUSH 3 16)                    ; PCSUBST
151   (CALL1 17)                          ; PABS
153   (UNBIND1)
154   (PUSH)
155   (LOAD&CONS&STORE 2)
157   (SKIP 1)
159   (LOAD&CDR&STORE 0)
161   L161
161   (LOAD&PUSH 0)
162   (CALLS1&JMPIFNOT 146 L137)          ; ENDP
165   (SKIP 1)
167   (LOAD&PUSH 0)
168   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
170   (SKIP&RET 5)


Disassembly of function #:|(DEFUN CYCLP (N IND) ...)-25|
(CONST 0) = CYCLP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CYCLP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CYCLP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CYCLP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CYCLP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CYCLP
8     (SKIP&RET 1)


Disassembly of function CYCLP
(CONST 0) = IND
(CONST 1) = SLOOP::SLOOP-TYPE-ERROR
(CONST 2) = 0
(CONST 3) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (IND)
40 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; IND
3     (LOAD&DEC&PUSH 5)
5     (LOAD&PUSH 0)
6     (CALLS2&JMPIF 13 L11)               ; SYSTEM::FIXNUMP
9     (CALL0 1)                           ; SLOOP::SLOOP-TYPE-ERROR
11    L11
11    (PUSH-NIL 3)
13    L13
13    (LOAD&PUSH 3)
14    (CONST&PUSH 2)                      ; 0
15    (CALLSR&JMPIF 1 47 L53)             ; <
19    (GETVALUE&PUSH 0)                   ; IND
21    (LOAD&PUSH 4)
22    (CALLSR&PUSH 2 55)                  ; *
25    (CONST&PUSH 3)                      ; 1
26    (LIST 2)
28    (STORE 0)
29    (LOAD&JMPIF 1 L44)
32    (LOAD 0)
33    (STORE 2)
34    L34
34    (PUSH)
35    (PUSH-UNBOUND 1)
37    (CALLS1&STORE 156 1)                ; LAST
40    L40
40    (LOAD&DEC&STORE 3)
42    (JMP L13)
44    L44
44    (PUSH)
45    (LOAD&PUSH 1)
46    (CALLS1&JMPIFNOT 171 L40)           ; SYSTEM::%RPLACD
49    (LOAD 1)
50    (CDR)
51    (JMP L34)
53    L53
53    (LOAD 2)
54    (SKIP 4)
56    (UNBIND1)
57    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CSF (L) ...)-26|
(CONST 0) = CSF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CSF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CSF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CSF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CSF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CSF
8     (SKIP&RET 1)


Disassembly of function CSF
(CONST 0) = L
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
18 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L21)
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (CONST&PUSH 1)                      ; 1
11    (GETVALUE 0)                        ; L
13    (CDR&PUSH)
14    (JSR L0)
16    (LIST* 2)
18    L18
18    (UNBIND1)
19    (SKIP&RET 2)
21    L21
21    (NIL)
22    (JMP L18)


Disassembly of function #:|(DEFUN CONDENSE (L) ...)-27|
(CONST 0) = CONDENSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONDENSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONDENSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONDENSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONDENSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONDENSE
8     (SKIP&RET 1)


Disassembly of function CONDENSE
(CONST 0) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
29 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (CDR)
6     (JMPIFNOT L29)
8     (GETVALUE 0)                        ; L
10    (CAR&PUSH)
11    (GETVALUE 0)                        ; L
13    (CDR)
14    (CAR)
15    (JMPIFEQ L33)
17    (GETVALUE 0)                        ; L
19    (CAR&PUSH)
20    (GETVALUE 0)                        ; L
22    (CDR&PUSH)
23    (JSR L0)
25    (CONS)
26    L26
26    (UNBIND1)
27    (SKIP&RET 2)
29    L29
29    (GETVALUE 0)                        ; L
31    (JMP L26)
33    L33
33    (GETVALUE 0)                        ; L
35    (CDR&PUSH)
36    (JSR L0)
38    (JMP L26)


Disassembly of function #:|(DEFUN CYCLOTOMIC (NL) ...)-28|
(CONST 0) = CYCLOTOMIC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CYCLOTOMIC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CYCLOTOMIC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CYCLOTOMIC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CYCLOTOMIC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CYCLOTOMIC
8     (SKIP&RET 1)


Disassembly of function CYCLOTOMIC
(CONST 0) = NUM
(CONST 1) = P
(CONST 2) = 1
(CONST 3) = *G*
(CONST 4) = 0
(CONST 5) = -1
(CONST 6) = CONDENSE
(CONST 7) = CYCLP
(CONST 8) = CSF
(CONST 9) = DIVISORS
(CONST 10) = PQUOTIENT
(CONST 11) = QUOT
(CONST 12) = PTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*G* NUM P)
writes special variables : (NUM P)
87 byte-code instructions:
0     (PUSH-NIL 3)
2     (NIL)
3     (BIND 0)                            ; NUM
5     (NIL&PUSH)
6     (NIL)
7     (BIND 1)                            ; P
9     (LOAD&CAR&PUSH 11)
11    (JMPIFEQTO 2 L52)                   ; 1
14    (LOAD 11)
15    (CDR)
16    (CAR&PUSH)
17    (CALL1 6)                           ; CONDENSE
19    (SETVALUE 1)                        ; P
21    (CDR)
22    (JMPIFNOT L62)
24    (CONST 2)                           ; 1
25    (SETVALUE 0)                        ; NUM
27    (STORE 3)
28    (LOAD&CAR&STORE 11 9)
31    (GETVALUE&PUSH 1)                   ; P
33    (CALL1&PUSH 8)                      ; CSF
35    (CALL1 9)                           ; DIVISORS
37    (STORE 7)
38    (LOAD&JMPIF 7 L95)
41    L41
41    (GETVALUE&PUSH 0)                   ; NUM
43    (LOAD&PUSH 4)
44    (CALL2 10)                          ; PQUOTIENT
46    L46
46    (UNBIND1)
47    (SKIP 1)
49    (UNBIND1)
50    (SKIP&RET 5)
52    L52
52    (GETVALUE&PUSH 3)                   ; *G*
54    (CONST&PUSH 2)                      ; 1
55    (CONST&PUSH 2)                      ; 1
56    (CONST&PUSH 4)                      ; 0
57    (CONST&PUSH 5)                      ; -1
58    (LIST 5)
60    (JMP L46)
62    L62
62    (GETVALUE&PUSH 3)                   ; *G*
64    (GETVALUE 1)                        ; P
66    (CAR&PUSH)
67    (GETVALUE 1)                        ; P
69    (CAR&PUSH)
70    (LOAD 14)
71    (CDR)
72    (CAR&PUSH)
73    (CALLS2&PUSH 71)                    ; LENGTH
75    (CALLS2&PUSH 151)                   ; 1-
77    (CALLS2&PUSH 154)                   ; EXPT
79    (CALL2 7)                           ; CYCLP
81    (CONS)
82    (JMP L46)
84    L84
84    (GETVALUE&PUSH 1)                   ; P
86    (GETVALUE&PUSH 0)                   ; NUM
88    (CALL2 12)                          ; PTIMES
90    (SETVALUE 0)                        ; NUM
92    (LOAD&JMPIFNOT 7 L41)
95    L95
95    (LOAD&CAR&STORE 7 8)
98    (LOAD&CDR&STORE 7)
100   (GETVALUE&PUSH 3)                   ; *G*
102   (LOAD&PUSH 10)
103   (LOAD&CAR&PUSH 10)
105   (CALL2&PUSH 11)                     ; QUOT
107   (CONST&PUSH 2)                      ; 1
108   (CONST&PUSH 4)                      ; 0
109   (CONST&PUSH 5)                      ; -1
110   (LIST 5)
112   (SETVALUE 1)                        ; P
114   (LOAD 8)
115   (CDR)
116   (CAR&PUSH)
117   (CALLS2&PUSH 71)                    ; LENGTH
119   (CALLS2&JMPIF 149 L84)              ; EVENP
122   (LOAD&CAR&PUSH 8)
124   (JMPIFEQTO 2 L84)                   ; 1
127   (GETVALUE&PUSH 1)                   ; P
129   (LOAD&PUSH 4)
130   (CALL2 12)                          ; PTIMES
132   (STORE 3)
133   (LOAD&JMPIFNOT 7 L41)
137   (JMP L95)


Disassembly of function #:|(DEFUN DIVISORS (L) ...)-29|
(CONST 0) = DIVISORS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIVISORS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIVISORS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIVISORS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIVISORS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIVISORS
8     (SKIP&RET 1)


Disassembly of function DIVISORS
(CONST 0) = L
(CONST 1) = (1 1)
(CONST 2) = (1 NIL)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
68 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (CONST&PUSH 1)                      ; (1 1)
6     (CALLS2&JMPIFNOT 2 L12)             ; EQUAL
9     (NIL)
10    (SETVALUE 0)                        ; L
12    L12
12    (CONST&PUSH 2)                      ; (1 NIL)
13    (LIST&PUSH 1)
15    (GETVALUE 0)                        ; L
17    (BIND 0)                            ; L
19    (GETVALUE 0)                        ; L
21    (JMPIFNOT L96)
24    L24
24    (LOAD&PUSH 3)
25    (GETVALUE 0)                        ; L
27    (CAR&PUSH)
28    (GETVALUE 0)                        ; L
30    (CDR)
31    (CAR&PUSH)
32    (JMP L79)
34    L34
34    (NIL&PUSH)
35    (LOAD&PUSH 3)
36    (JMP L59)
38    L38
38    (LOAD&CAR&PUSH 0)
40    (LOAD&PUSH 4)
41    (LOAD&CAR&PUSH 1)
43    (CALLSR&PUSH 2 55)                  ; *
46    (LOAD&PUSH 5)
47    (LOAD 2)
48    (CDR)
49    (CAR)
50    (CONS&PUSH)
51    (LIST&PUSH 2)
53    (LOAD&CONS&STORE 2)
55    (SKIP 1)
57    (LOAD&CDR&STORE 0)
59    L59
59    (LOAD&PUSH 0)
60    (CALLS1&JMPIFNOT 146 L38)           ; ENDP
63    (SKIP 1)
65    (LOAD&PUSH 0)
66    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
68    (SKIP 1)
70    (STORE 2)
71    (LOAD&PUSH 6)
72    (LOAD&PUSH 3)
73    (CALLSR&STORE 2 35 6)               ; NCONC
77    (LOAD&DEC&STORE 0)
79    L79
79    (LOAD&PUSH 0)
80    (CALLS2&JMPIFNOT 145 L34)           ; ZEROP
83    (SKIP 3)
85    (GETVALUE 0)                        ; L
87    (CDR)
88    (CDR)
89    (SETVALUE 0)                        ; L
91    (GETVALUE 0)                        ; L
93    (JMPIF L24)
96    L96
96    (LOAD 3)
97    (UNBIND1)
98    (SKIP 1)
100   (UNBIND1)
101   (SKIP&RET 2)


Disassembly of function #:|(DEFUN ESTCHECK2 (D LC C) ...)-30|
(CONST 0) = ESTCHECK2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ESTCHECK2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ESTCHECK2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ESTCHECK2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ESTCHECK2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ESTCHECK2
8     (SKIP&RET 1)


Disassembly of function ESTCHECK2
(CONST 0) = P
(CONST 1) = 0
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
writes special variable : (P)
39 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; P
3     (LOAD&JMPIFNOT 6 L61)
6     L6
6     (LOAD 6)
7     (CAR)
8     (SETVALUE 0)                        ; P
10    (LOAD&CDR&STORE 6)
12    (LOAD&PUSH 4)
13    (GETVALUE&PUSH 0)                   ; P
15    (CALLS2&PUSH 184)                   ; REM
17    (JMPIFEQTO 1 L33)                   ; 0
20    (LOAD&PUSH 5)
21    (GETVALUE&PUSH 0)                   ; P
23    (GETVALUE&PUSH 0)                   ; P
25    (CALLSR&PUSH 2 55)                  ; *
28    (CALLS2&PUSH 184)                   ; REM
30    (JMPIFNOTEQTO 1 L54)                ; 0
33    L33
33    (LOAD&PUSH 5)
34    (GETVALUE&PUSH 0)                   ; P
36    (CALLS2&PUSH 184)                   ; REM
38    (JMPIFEQTO 1 L58)                   ; 0
41    (LOAD&PUSH 4)
42    (GETVALUE&PUSH 0)                   ; P
44    (GETVALUE&PUSH 0)                   ; P
46    (CALLSR&PUSH 2 55)                  ; *
49    (CALLS2&PUSH 184)                   ; REM
51    (JMPIFEQTO 1 L58)                   ; 0
54    L54
54    (T)
55    L55
55    (UNBIND1)
56    (SKIP&RET 4)
58    L58
58    (LOAD&JMPIF 6 L6)
61    L61
61    (NIL)
62    (JMP L55)


Disassembly of function #:|(DEFUN ESTCHECK (P) ...)-31|
(CONST 0) = ESTCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ESTCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ESTCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ESTCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ESTCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ESTCHECK
8     (SKIP&RET 1)


Disassembly of function ESTCHECK
(CONST 0) = P
(CONST 1) = 0
(CONST 2) = PTERM
(CONST 3) = ODDELM
(CONST 4) = CGCDLIST
(CONST 5) = 1
(CONST 6) = CFACTORW
(CONST 7) = ESTCHECK2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
writes special variable : (P)
47 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (PUSH-NIL 3)
5     (GETVALUE 0)                        ; P
7     (JMPIFATOM L49)
9     (GETVALUE 0)                        ; P
11    (CDR)
12    (CDR)
13    (JMPIFNOT L49)
15    (GETVALUE&PUSH 0)                   ; P
17    (CONST&PUSH 1)                      ; 0
18    (CALL2&PUSH 2)                      ; PTERM
20    (JMPIFEQTO 1 L49)                   ; 0
23    (GETVALUE 0)                        ; P
25    (CDR)
26    (CAR)
27    (STORE 2)
28    (GETVALUE 0)                        ; P
30    (CDR&PUSH)
31    (CALL1 3)                           ; ODDELM
33    (CDR&PUSH)
34    (CALLS2 73)                         ; NREVERSE
36    (SETVALUE 0)                        ; P
38    (CAR)
39    (STORE 1)
40    (GETVALUE&PUSH 0)                   ; P
42    (CALL1 4)                           ; CGCDLIST
44    (STORE 0)
45    (PUSH)
46    (JMPIFNOTEQTO 5 L54)                ; 1
49    L49
49    (NIL)
50    (SKIP 3)
52    (JMP L68)
54    L54
54    (LOAD&PUSH 0)
55    (CALL1&PUSH 6)                      ; CFACTORW
57    (CALL1 3)                           ; ODDELM
59    (STORE 0)
60    (PUSH)
61    (LOAD&PUSH 3)
62    (LOAD&PUSH 3)
63    (CALL 3 7)                          ; ESTCHECK2
66    (SKIP 3)
68    L68
68    (UNBIND1)
69    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CGCDLIST (L) ...)-32|
(CONST 0) = CGCDLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CGCDLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CGCDLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CGCDLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CGCDLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CGCDLIST
8     (SKIP&RET 1)


Disassembly of function CGCDLIST
(CONST 0) = L
(CONST 1) = 1
(CONST 2) = ZL-MEMBER
(CONST 3) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
51 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L50)
7     (GETVALUE 0)                        ; L
9     (CDR)
10    (JMPIFNOT L53)
12    (CONST&PUSH 1)                      ; 1
13    (GETVALUE&PUSH 0)                   ; L
15    (CALL2&JMPIF 2 L60)                 ; ZL-MEMBER
18    (CONST&PUSH 3)                      ; -1
19    (GETVALUE&PUSH 0)                   ; L
21    (CALL2&JMPIF 2 L60)                 ; ZL-MEMBER
24    (GETVALUE 0)                        ; L
26    (CDR)
27    (CDR)
28    (JMPIFNOT L63)
30    (GETVALUE 0)                        ; L
32    (CAR&PUSH)
33    (GETVALUE 0)                        ; L
35    (CDR)
36    (CAR&PUSH)
37    (CALLSR&PUSH 2 57)                  ; GCD
40    (GETVALUE 0)                        ; L
42    (CDR)
43    (CDR)
44    (CONS&PUSH)
45    (JSR L0)
47    L47
47    (UNBIND1)
48    (SKIP&RET 2)
50    L50
50    (NIL)
51    (JMP L47)
53    L53
53    (GETVALUE 0)                        ; L
55    (CAR&PUSH)
56    (CALLS2 158)                        ; ABS
58    (JMP L47)
60    L60
60    (CONST 1)                           ; 1
61    (JMP L47)
63    L63
63    (GETVALUE 0)                        ; L
65    (CAR&PUSH)
66    (GETVALUE 0)                        ; L
68    (CDR)
69    (CAR&PUSH)
70    (CALLSR 2 57)                       ; GCD
73    (JMP L47)


Disassembly of function #:|(DEFUN DROPTERMS (P) ...)-33|
(CONST 0) = DROPTERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DROPTERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DROPTERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DROPTERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DROPTERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DROPTERMS
8     (SKIP&RET 1)


Disassembly of function DROPTERMS
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = DLP
(CONST 3) = KTERMS
(CONST 4) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DLP VAR P)
writes special variable : (P)
61 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (PUSH-NIL 2)
5     (GETVALUE 0)                        ; P
7     (JMPIFATOM L25)
9     (GETVALUE 0)                        ; P
11    (CAR&PUSH)
12    (GETVALUE 1)                        ; VAR
14    (JMPIFNOTEQ L31)
16    (GETVALUE 0)                        ; P
18    (CAR&PUSH)
19    (LOAD&CONS&STORE 1)
21    (GETVALUE 0)                        ; P
23    (JMP L72)
25    L25
25    (GETVALUE 0)                        ; P
27    (SKIP 2)
29    (JMP L86)
31    L31
31    (GETVALUE&PUSH 0)                   ; P
33    (GETVALUE&PUSH 2)                   ; DLP
35    (CALL2 3)                           ; KTERMS
37    (SKIP 2)
39    (JMP L86)
41    L41
41    (LOAD&PUSH 1)
42    (CALLS2 73)                         ; NREVERSE
44    (SKIP 2)
46    (JMP L86)
48    L48
48    (GETVALUE 0)                        ; P
50    (CDR)
51    (CAR&PUSH)
52    (GETVALUE&PUSH 2)                   ; DLP
54    (CALL2 3)                           ; KTERMS
56    (STORE 0)
57    (PUSH)
58    (JMPIFEQTO 4 L69)                   ; 0
61    (LOAD&PUSH 0)
62    (GETVALUE 0)                        ; P
64    (CAR&PUSH)
65    (LOAD 3)
66    (CONS)
67    (CONS)
68    (STORE 1)
69    L69
69    (GETVALUE 0)                        ; P
71    (CDR)
72    L72
72    (CDR)
73    (SETVALUE 0)                        ; P
75    (GETVALUE 0)                        ; P
77    (JMPIF L48)
79    (LOAD 1)
80    (CDR)
81    (JMPIF L41)
83    (CONST 4)                           ; 0
84    (SKIP 2)
86    L86
86    (UNBIND1)
87    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RESTORELC (L LC) ...)-34|
(CONST 0) = RESTORELC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESTORELC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESTORELC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESTORELC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESTORELC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESTORELC
8     (SKIP&RET 1)


Disassembly of function RESTORELC
(CONST 0) = L
(CONST 1) = VAR
(CONST 2) = 1
(CONST 3) = MANY*
(CONST 4) = ALGFAC*
(CONST 5) = INTBS*
(CONST 6) = INTBASEHK
(CONST 7) = LCPRODL
(CONST 8) = PTIMES
(CONST 9) = PSIMP
(CONST 10) = DROPTERMS
(CONST 11) = PPLUS
(CONST 12) = MODULUS
(CONST 13) = OLDCONTENT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (INTBS* ALGFAC* MANY* VAR L)
writes special variables : (VAR L)
107 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (PUSH-NIL 3)
5     (NIL)
6     (BIND 1)                            ; VAR
8     (PUSH-NIL 3)
10    (LOAD&PUSH 13)
11    (JMPIFEQTO 2 L143)                  ; 1
15    (GETVALUE&PUSH 0)                   ; L
17    (CALL1 7)                           ; LCPRODL
19    (STORE 7)
20    (CONST 2)                           ; 1
21    (STORE 8)
23    (GETVALUE 0)                        ; L
25    (JMPIFNOT L125)
28    L28
28    (GETVALUE 0)                        ; L
30    (CAR)
31    (STORE 1)
32    (GETVALUE 0)                        ; L
34    (CDR)
35    (SETVALUE 0)                        ; L
37    (LOAD 1)
38    (CAR)
39    (SETVALUE 1)                        ; VAR
41    (LOAD 1)
42    (CDR)
43    (CAR)
44    (STORE 0)
45    (LOAD 1)
46    (CDR)
47    (CDR)
48    (CAR)
49    (STORE 2)
50    (LOAD&PUSH 8)
51    (LOAD&CAR&PUSH 8)
53    (CALL2&PUSH 8)                      ; PTIMES
55    (GETVALUE&PUSH 1)                   ; VAR
57    (LOAD 3)
58    (CDR)
59    (CDR)
60    (CDR&PUSH)
61    (CALL2&PUSH 9)                      ; PSIMP
63    (CALL2 8)                           ; PTIMES
65    (STORE 1)
66    (GETVALUE 3)                        ; MANY*
68    (JMPIFNOT L74)
70    (LOAD&PUSH 1)
71    (CALL1 10)                          ; DROPTERMS
73    (STORE 1)
74    L74
74    (GETVALUE&PUSH 1)                   ; VAR
76    (LOAD&PUSH 1)
77    (LOAD&PUSH 15)
78    (LIST&PUSH 3)
80    (LOAD&PUSH 2)
81    (CALL2 11)                          ; PPLUS
83    (STORE 1)
84    (GETVALUE 3)                        ; MANY*
86    (JMPIF L101)
88    (GETVALUE 4)                        ; ALGFAC*
90    (JMPIFNOT L101)
92    (GETVALUE&PUSH 5)                   ; INTBS*
94    (JMPIFEQTO 2 L101)                  ; 1
97    (LOAD&PUSH 1)
98    (CALL1 6)                           ; INTBASEHK
100   (STORE 1)
101   L101
101   (NIL)
102   (BIND 12)                           ; MODULUS
104   (LOAD&PUSH 4)
105   (CALL1 13)                          ; OLDCONTENT
107   (CDR)
108   (CAR&PUSH)
109   (LOAD&CONS&STORE 9)
111   (UNBIND1)
112   (LOAD&PUSH 8)
113   (LOAD&PUSH 3)
114   (CALL2 8)                           ; PTIMES
116   (STORE 8)
118   (LOAD&CDR&STORE 7)
120   (GETVALUE 0)                        ; L
122   (JMPIF L28)
125   L125
125   (LOAD 6)
126   L126
126   (SKIP 3)
128   (UNBIND1)
129   (SKIP 3)
131   (UNBIND1)
132   (SKIP&RET 3)
134   L134
134   (CONST&SYMBOL-FUNCTION&PUSH 6)      ; INTBASEHK
136   (GETVALUE&PUSH 0)                   ; L
138   (CALLSR 0 22)                       ; MAPCAR
141   (JMP L126)
143   L143
143   (GETVALUE 3)                        ; MANY*
145   (JMPIF L156)
147   (GETVALUE 4)                        ; ALGFAC*
149   (JMPIFNOT L156)
151   (GETVALUE&PUSH 5)                   ; INTBS*
153   (JMPIFNOTEQTO 2 L134)               ; 1
156   L156
156   (GETVALUE&PUSH 0)                   ; L
158   (CALLS2 72)                         ; REVERSE
160   (JMP L126)


Disassembly of function #:|(DEFUN IREDUP (P) ...)-35|
(CONST 0) = IREDUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IREDUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IREDUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IREDUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IREDUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IREDUP
8     (SKIP&RET 1)


Disassembly of function IREDUP
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = MM*
(CONST 3) = ALGFAC*
(CONST 4) = SQFRP
(CONST 5) = SPLT
(CONST 6) = CPBER1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
writes special variable : (P)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (CONST 1)                           ; 1
4     (BIND 2)                            ; MM*
6     (NIL)
7     (BIND 3)                            ; ALGFAC*
9     (GETVALUE&PUSH 0)                   ; P
11    (GETVALUE 0)                        ; P
13    (CAR&PUSH)
14    (CALL2&JMPIF 4 L22)                 ; SQFRP
17    (NIL)
18    L18
18    (UNBIND 3)
20    (SKIP&RET 2)
22    L22
22    (CONST 5)                           ; SPLT
23    (CATCH-OPEN L30)
25    (GETVALUE&PUSH 0)                   ; P
27    (CALL1 6)                           ; CPBER1
29    (CATCH-CLOSE)
30    L30
30    (SETVALUE 0)                        ; P
32    (CAR)
33    (NOT)
34    (JMPIFNOT1 L18)
36    (GETVALUE 0)                        ; P
38    (CDR)
39    (CAR)
40    (CDR)
41    (NOT)
42    (JMP L18)


Disassembly of function #:|(DEFUN ZEROLP (A) ...)-36|
(CONST 0) = ZEROLP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZEROLP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZEROLP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZEROLP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZEROLP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZEROLP
8     (SKIP&RET 1)


Disassembly of function ZEROLP
(CONST 0) = ZEROP1
(CONST 1) = ANDMAPC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; ZEROP1
2     (LOAD&PUSH 2)
3     (CALL2 1)                           ; ANDMAPC
5     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN TESTDIVIDE (X Y) ...)-37|
(CONST 0) = TESTDIVIDE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TESTDIVIDE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TESTDIVIDE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TESTDIVIDE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TESTDIVIDE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TESTDIVIDE
8     (SKIP&RET 1)


Disassembly of function TESTDIVIDE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ERRRJFFLAG
(CONST 3) = ALGFAC*
(CONST 4) = ALGTESTD
(CONST 5) = RATERR
(CONST 6) = PQUOTIENT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X ALGFAC*)
51 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (T)
7     (BIND 2)                            ; ERRRJFFLAG
9     (GETVALUE 3)                        ; ALGFAC*
11    (JMPIF L56)
13    (GETVALUE 0)                        ; X
15    (JMPIFATOM L43)
17    (GETVALUE 1)                        ; Y
19    (JMPIFATOM L43)
21    (CONST 5)                           ; RATERR
22    (CATCH-OPEN L65)
24    (GETVALUE&PUSH 0)                   ; X
26    (PUSH-UNBOUND 1)
28    (CALLS1 156)                        ; LAST
30    (CAR&PUSH)
31    (GETVALUE&PUSH 1)                   ; Y
33    (PUSH-UNBOUND 1)
35    (CALLS1 156)                        ; LAST
37    (CAR&PUSH)
38    (CALL2 6)                           ; PQUOTIENT
40    (CATCH-CLOSE)
41    (JMPIFNOT L67)
43    L43
43    (CONST 5)                           ; RATERR
44    (CATCH-OPEN L71)
46    (GETVALUE&PUSH 0)                   ; X
48    (GETVALUE&PUSH 1)                   ; Y
50    (CALL2 6)                           ; PQUOTIENT
52    (CATCH-CLOSE)
53    (UNBIND1)
54    (JMP L72)
56    L56
56    (GETVALUE&PUSH 0)                   ; X
58    (GETVALUE&PUSH 1)                   ; Y
60    (CALL2 4)                           ; ALGTESTD
62    (UNBIND1)
63    (JMP L72)
65    L65
65    (JMPIF L43)
67    L67
67    (NIL)
68    (UNBIND1)
69    (JMP L72)
71    L71
71    (UNBIND1)
72    L72
72    (UNBIND 2)
74    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ALGTESTD (X Y) ...)-38|
(CONST 0) = ALGTESTD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGTESTD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGTESTD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGTESTD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGTESTD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGTESTD
8     (SKIP&RET 1)


Disassembly of function ALGTESTD
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = PDEGREEVECTOR
(CONST 3) = GENVAR
(CONST 4) = DIV-DEG-CHK
(CONST 5) = RATERR
(CONST 6) = RQUOTIENT
(CONST 7) = ADN*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ADN* GENVAR Y X)
writes special variables : (ADN* X)
39 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1&PUSH 2)                      ; PDEGREEVECTOR
10    (CALLS2&PUSH 73)                    ; NREVERSE
12    (GETVALUE&PUSH 1)                   ; Y
14    (CALL1&PUSH 2)                      ; PDEGREEVECTOR
16    (CALLS2&PUSH 73)                    ; NREVERSE
18    (GETVALUE&PUSH 3)                   ; GENVAR
20    (CALLS2&PUSH 72)                    ; REVERSE
22    (CALL 3 4)                          ; DIV-DEG-CHK
25    (JMPIFNOT1 L61)
27    (CONST 5)                           ; RATERR
28    (CATCH-OPEN L56)
30    (GETVALUE&PUSH 0)                   ; X
32    (GETVALUE&PUSH 1)                   ; Y
34    (CALL2 6)                           ; RQUOTIENT
36    (CATCH-CLOSE)
37    (SETVALUE 0)                        ; X
39    (JMPIFNOT L60)
41    L41
41    (GETVALUE&PUSH 7)                   ; ADN*
43    (GETVALUE 0)                        ; X
45    (CDR&PUSH)
46    (CALLSR 2 55)                       ; *
49    (SETVALUE 7)                        ; ADN*
51    (GETVALUE 0)                        ; X
53    (CAR)
54    (JMP L61)
56    L56
56    (SETVALUE 0)                        ; X
58    (JMPIF L41)
60    L60
60    (NIL)
61    L61
61    (UNBIND 2)
63    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIV-DEG-CHK (XL YL GL) ...)-39|
(CONST 0) = DIV-DEG-CHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIV-DEG-CHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIV-DEG-CHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIV-DEG-CHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIV-DEG-CHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIV-DEG-CHK
8     (SKIP&RET 1)


Disassembly of function DIV-DEG-CHK
(CONST 0) = $ALGEBRAIC
(CONST 1) = TELLRAT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($ALGEBRAIC)
24 byte-code instructions:
0     (LOAD&JMPIF 1 L12)
3     L3
3     (T)
4     (SKIP&RET 4)
6     L6
6     (NIL)
7     (SKIP&RET 4)
9     L9
9     (LOAD&JMPIFNOT 1 L3)
12    L12
12    (GETVALUE 0)                        ; $ALGEBRAIC
14    (JMPIFNOT L24)
16    (LOAD&CAR&PUSH 1)
18    (CONST&PUSH 1)                      ; TELLRAT
19    (PUSH-UNBOUND 1)
21    (CALLS2&JMPIF 132 L3)               ; GET
24    L24
24    (LOAD&CAR&PUSH 2)
26    (LOAD&CAR&PUSH 4)
28    (CALLSR&JMPIF 1 48 L6)              ; >
32    (LOAD&CDR&PUSH 3)
34    (LOAD&CDR&PUSH 3)
36    (LOAD&CDR&PUSH 3)
38    (JMPTAIL 3 7 L9)


Disassembly of function #:|(DEFUN FUU NIL ...)-40|
(CONST 0) = FUU
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FUU>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FUU
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FUU
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FUU>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FUU
8     (SKIP&RET 1)


Disassembly of function FUU
(CONST 0) = TELLRATLIST
(CONST 1) = VARLIST
(CONST 2) = GENVAR
(CONST 3) = GENPAIRS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (GENPAIRS GENVAR VARLIST TELLRATLIST)
6 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; TELLRATLIST
3     (SETVALUE 1)                        ; VARLIST
5     (SETVALUE 2)                        ; GENVAR
7     (SETVALUE 3)                        ; GENPAIRS
9     (SKIP&RET 1)


Disassembly of function #:|(DEFUN LINOUT (U) ...)-41|
(CONST 0) = LINOUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LINOUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LINOUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LINOUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LINOUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LINOUT
8     (SKIP&RET 1)


Disassembly of function LINOUT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 1
(CONST 3) = MODULUS
(CONST 4) = 0
(CONST 5) = CMOD
(CONST 6) = PCSUBSTY
(CONST 7) = PMODQUO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X MODULUS)
writes special variables : (Y X)
65 byte-code instructions:
0     (PUSH-NIL 2)
2     (NIL)
3     (BIND 0)                            ; X
5     (NIL)
6     (BIND 1)                            ; Y
8     (LOAD 9)
9     (CAR)
10    (SETVALUE 0)                        ; X
12    (PUSH)
13    (CONST&PUSH 2)                      ; 1
14    (CONST&PUSH 2)                      ; 1
15    (LIST 3)
17    (SETVALUE 1)                        ; Y
19    (GETVALUE 3)                        ; MODULUS
21    (STORE 7)
22    L22
22    (LOAD&DEC&STORE 7)
24    (PUSH)
25    (CONST&PUSH 4)                      ; 0
26    (CALLSR&JMPIF 1 47 L47)             ; <
30    (LOAD 9)
31    (CDR)
32    (CAR&PUSH)
33    (JMPIFNOTEQTO 2 L54)                ; 1
36    (CONST&PUSH 2)                      ; 1
37    (LOAD&PUSH 10)
38    (LOAD 8)
39    (CONS)
40    L40
40    (PUSH)
41    (LIST 2)
43    (UNBIND 2)
45    (SKIP&RET 4)
47    L47
47    (LOAD&PUSH 9)
48    (LOAD 7)
49    (JMP L40)
51    L51
51    (NIL)
52    (JMP L81)
54    L54
54    (LOAD&PUSH 7)
55    (CALL1&PUSH 5)                      ; CMOD
57    (GETVALUE&PUSH 0)                   ; X
59    (LOAD&PUSH 11)
60    (CALL&PUSH 3 6)                     ; PCSUBSTY
63    (CALLS2&JMPIFNOT 145 L22)           ; ZEROP
66    (GETVALUE&PUSH 1)                   ; Y
68    (LOAD&PUSH 8)
69    (CALLS2&JMPIF 145 L51)              ; ZEROP
72    (CONST&PUSH 4)                      ; 0
73    (LOAD&PUSH 9)
74    (CALLSR&PUSH 0 54)                  ; -
77    (CALL1&PUSH 5)                      ; CMOD
79    (LIST 2)
81    L81
81    (PUSH)
82    (CALLSR&PUSH 2 34)                  ; APPEND
85    (LOAD&CONS&STORE 6)
87    (LOAD&PUSH 9)
88    (LOAD&CAR&PUSH 7)
90    (CALL2 7)                           ; PMODQUO
92    (CAR)
93    (STORE 9)
95    (JMP L22)


Disassembly of function #:|(DEFUN ONEVARP (P) ...)-42|
(CONST 0) = ONEVARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEVARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEVARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEVARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEVARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEVARP
8     (SKIP&RET 1)


Disassembly of function ONEVARP
(CONST 0) = P
(CONST 1) = ALGFAC*
(CONST 2) = PACOEFP
(CONST 3) = ANDMAPC
(CONST 4) = #.#'NUMBERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P ALGFAC*)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 1)                        ; ALGFAC*
5     (JMPIF L17)
7     (CONST 4)                           ; #.#'NUMBERP
8     L8
8     (PUSH)
9     (GETVALUE 0)                        ; P
11    (CDR&PUSH)
12    (CALL2 3)                           ; ANDMAPC
14    (UNBIND1)
15    (SKIP&RET 2)
17    L17
17    (CONST&SYMBOL-FUNCTION 2)           ; PACOEFP
19    (JMP L8)


Disassembly of function #:|(DEFUN PUTODR (L) ...)-43|
(CONST 0) = PUTODR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PUTODR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PUTODR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PUTODR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PUTODR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PUTODR
8     (SKIP&RET 1)


Disassembly of function PUTODR
(CONST 0) = L
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
25 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (BIND 0)                            ; L
7     (CONST&PUSH 1)                      ; 1
8     (NIL&PUSH)
9     (GETVALUE 0)                        ; L
11    (JMPIFNOT L31)
13    L13
13    (GETVALUE 0)                        ; L
15    (CAR&PUSH)
16    (LOAD 2)
17    (CONS&PUSH)
18    (LOAD&CONS&STORE 0)
20    (GETVALUE 0)                        ; L
22    (CDR)
23    (SETVALUE 0)                        ; L
25    (LOAD&INC&STORE 1)
27    (GETVALUE 0)                        ; L
29    (JMPIF L13)
31    L31
31    (POP)
32    (SKIP 1)
34    (UNBIND 2)
36    (SKIP&RET 2)


Disassembly of function #:|(DEFUN KTERMS (P K) ...)-44|
(CONST 0) = KTERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KTERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KTERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KTERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KTERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KTERMS
8     (SKIP&RET 1)


Disassembly of function KTERMS
(CONST 0) = P
(CONST 1) = PACOEFP
(CONST 2) = 0
(CONST 3) = CONSTA
(CONST 4) = PSIMP
(CONST 5) = X
(CONST 6) = FIXNUMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P)
writes special variable : (P)
90 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALL1&JMPIF 1 L24)                 ; PACOEFP
8     (LOAD&PUSH 4)
9     (CONST&PUSH 2)                      ; 0
10    (CALLSR&JMPIF 1 45 L29)             ; =
14    (PUSH-NIL 3)
16    (GETVALUE 0)                        ; P
18    (CAR)
19    (STORE 2)
20    (GETVALUE 0)                        ; P
22    (JMP L47)
24    L24
24    (GETVALUE 0)                        ; P
26    (JMP L139)
29    L29
29    (GETVALUE&PUSH 0)                   ; P
31    (CALL1 3)                           ; CONSTA
33    (JMP L139)
36    L36
36    (GETVALUE 0)                        ; P
38    (CAR&PUSH)
39    (LOAD&PUSH 8)
40    (CALLSR&JMPIFNOT 1 48 L60)          ; >
44    (GETVALUE 0)                        ; P
46    (CDR)
47    L47
47    (CDR)
48    (SETVALUE 0)                        ; P
50    (GETVALUE 0)                        ; P
52    (JMPIF L36)
54    (CONST 2)                           ; 0
55    (SKIP 3)
57    (JMP L139)
60    L60
60    (GETVALUE 0)                        ; P
62    (JMPIFNOT L133)
65    L65
65    (GETVALUE 0)                        ; P
67    (CDR)
68    (CAR&PUSH)
69    (LOAD&PUSH 8)
70    (GETVALUE 0)                        ; P
72    (CAR&PUSH)
73    (CALLSR&PUSH 1 54)                  ; -
76    (JSR L0)
79    (STORE 0)
80    (BIND 5)                            ; X
82    (GETVALUE&PUSH 5)                   ; X
84    (CALL1&JMPIF 6 L96)                 ; FIXNUMP
87    (GETVALUE 5)                        ; X
89    (JMPIFCONSP L110)
91    (GETVALUE&PUSH 5)                   ; X
93    (CALLS2&JMPIFNOT 15 L105)           ; FLOATP
96    L96
96    (GETVALUE&PUSH 5)                   ; X
98    (CALLS2 145)                        ; ZEROP
100   (UNBIND1)
101   (JMPIFNOT L111)
103   (JMP L122)
105   L105
105   (UNBIND1)
106   (JMPIFNOT L111)
108   (JMP L122)
110   L110
110   (UNBIND1)
111   L111
111   (LOAD&PUSH 1)
112   (GETVALUE 0)                        ; P
114   (CAR&PUSH)
115   (LOAD&PUSH 2)
116   (LIST&PUSH 2)
118   (CALLSR&STORE 2 35 1)               ; NCONC
122   L122
122   (GETVALUE 0)                        ; P
124   (CDR)
125   (CDR)
126   (SETVALUE 0)                        ; P
128   (GETVALUE 0)                        ; P
130   (JMPIF L65)
133   L133
133   (LOAD&PUSH 2)
134   (LOAD&PUSH 2)
135   (CALL2 4)                           ; PSIMP
137   (SKIP 3)
139   L139
139   (UNBIND1)
140   (SKIP&RET 3)


Disassembly of function #:|(DEFUN CONSTA (P) ...)-45|
(CONST 0) = CONSTA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTA
8     (SKIP&RET 1)


Disassembly of function CONSTA
(CONST 0) = P
(CONST 1) = ALG
(CONST 2) = 0
(CONST 3) = PTERM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
18 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L23)
7     (GETVALUE&PUSH 0)                   ; P
9     (CALL1&JMPIF 1 L23)                 ; ALG
12    (GETVALUE 0)                        ; P
14    (CDR&PUSH)
15    (CONST&PUSH 2)                      ; 0
16    (CALL2&PUSH 3)                      ; PTERM
18    (JSR L0)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE 0)                        ; P
25    (JMP L20)


Disassembly of function #:|(DEFUN CONSTACL (P) ...)-46|
(CONST 0) = CONSTACL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTACL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTACL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTACL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTACL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTACL
8     (SKIP&RET 1)


Disassembly of function CONSTACL
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = CNT
(CONST 3) = NUMBERP
(CONST 4) = ANDMAPC
(CONST 5) = ODDELM
(CONST 6) = ZL-MEMBER
(CONST 7) = #.#'APPEND
(CONST 8) = CONSTACL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
writes special variable : (P)
42 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L33)
7     (CONST&PUSH 3)                      ; NUMBERP
8     (GETVALUE 0)                        ; P
10    (CDR&PUSH)
11    (CALL2&JMPIF 4 L47)                 ; ANDMAPC
14    (CONST&PUSH 7)                      ; #.#'APPEND
15    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; CONSTACL
17    (GETVALUE&PUSH 0)                   ; P
19    (CALL1 5)                           ; ODDELM
21    (CDR&PUSH)
22    (CALLSR 0 22)                       ; MAPCAR
25    (APPLY 0)
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)
30    L30
30    (CONST&PUSH 2)                      ; CNT
31    (CONST 1)                           ; 1
32    (THROW)
33    L33
33    (GETVALUE&PUSH 0)                   ; P
35    (JMPIFEQTO 1 L30)                   ; 1
38    (GETVALUE&PUSH 0)                   ; P
40    (LIST 1)
42    (JMP L27)
44    L44
44    (CONST&PUSH 2)                      ; CNT
45    (CONST 1)                           ; 1
46    (THROW)
47    L47
47    (GETVALUE&PUSH 0)                   ; P
49    (CALL1 5)                           ; ODDELM
51    (SETVALUE 0)                        ; P
53    (CONST&PUSH 1)                      ; 1
54    (GETVALUE&PUSH 0)                   ; P
56    (CALL2&JMPIF 6 L44)                 ; ZL-MEMBER
59    (GETVALUE 0)                        ; P
61    (CDR)
62    (JMP L27)


Disassembly of function #:|(DEFUN Z1 (POLY FACT1 FACT2) ...)-47|
(CONST 0) = Z1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE Z1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; Z1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; Z1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE Z1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; Z1
8     (SKIP&RET 1)


Disassembly of function Z1
(CONST 0) = FACT1
(CONST 1) = FACT2
(CONST 2) = RES
(CONST 3) = *AB*
(CONST 4) = DF1
(CONST 5) = DF2
(CONST 6) = *SHARPA
(CONST 7) = *SHARPB
(CONST 8) = MODULUS
(CONST 9) = HMODULUS
(CONST 10) = *PRIME
(CONST 11) = SETQMODULUS
(CONST 12) = LIMK
(CONST 13) = FACT20
(CONST 14) = 0
(CONST 15) = DLP
(CONST 16) = 2
(CONST 17) = QUOT
(CONST 18) = PMOD
(CONST 19) = PTIMES
(CONST 20) = PDIFFERENCE
(CONST 21) = VAR
(CONST 22) = Z2
(CONST 23) = KTERMS
(CONST 24) = OBTAINABM
(CONST 25) = PPLUS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DF2 DF1 VAR RES DLP *SHARPA *SHARPB LIMK FACT2 FACT1 *PRIME)
writes special variables : (DF2 DF1 RES *AB* *SHARPA *SHARPB)
150 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FACT1
3     (LOAD 4)
4     (BIND 1)                            ; FACT2
6     (NIL)
7     (BIND 2)                            ; RES
9     (PUSH-NIL 7)
11    (NIL)
12    (BIND 3)                            ; *AB*
14    (NIL&PUSH)
15    (NIL)
16    (BIND 4)                            ; DF1
18    (NIL)
19    (BIND 5)                            ; DF2
21    (PUSH-NIL 2)
23    (NIL)
24    (BIND 6)                            ; *SHARPA
26    (NIL)
27    (BIND 7)                            ; *SHARPB
29    (NIL)
30    (BIND 8)                            ; MODULUS
32    (NIL)
33    (BIND 9)                            ; HMODULUS
35    (GETVALUE&PUSH 10)                  ; *PRIME
37    (CALL1 11)                          ; SETQMODULUS
39    (GETVALUE&PUSH 0)                   ; FACT1
41    (GETVALUE&PUSH 1)                   ; FACT2
43    (GETVALUE&PUSH 12)                  ; LIMK
45    (CALL 3 13)                         ; FACT20
48    (SETVALUE 7)                        ; *SHARPB
50    (UNBIND 2)
52    (GETVALUE 7)                        ; *SHARPB
54    (CAR)
55    (SETVALUE 6)                        ; *SHARPA
57    (GETVALUE 7)                        ; *SHARPB
59    (CDR)
60    (CAR)
61    (SETVALUE 7)                        ; *SHARPB
63    (CONST&PUSH 14)                     ; 0
64    (GETVALUE&PUSH 6)                   ; *SHARPA
66    (GETVALUE&PUSH 7)                   ; *SHARPB
68    (LIST&PUSH 3)
70    (LIST 1)
72    (SETVALUE 3)                        ; *AB*
74    (GETVALUE 15)                       ; DLP
76    (STORE 23)
78    (PUSH)
79    (CONST&PUSH 16)                     ; 2
80    (CALL2 17)                          ; QUOT
82    (STORE 24)
84    (GETVALUE&PUSH 0)                   ; FACT1
86    (CALL1&PUSH 18)                     ; PMOD
88    (GETVALUE&PUSH 1)                   ; FACT2
90    (CALL1&PUSH 18)                     ; PMOD
92    (CALL2&PUSH 19)                     ; PTIMES
94    (LOAD&PUSH 38)
96    (CALL1&PUSH 18)                     ; PMOD
98    (CALL2 20)                          ; PDIFFERENCE
100   (SETVALUE 2)                        ; RES
102   (NIL&STORE 37)
104   (CONST 14)                          ; 0
105   (STORE 6)
106   (GETVALUE 0)                        ; FACT1
108   (SETVALUE 4)                        ; DF1
110   (GETVALUE 1)                        ; FACT2
112   (SETVALUE 5)                        ; DF2
114   (JMP L217)
117   L117
117   (GETVALUE 2)                        ; RES
119   (CDR)
120   (STORE 19)
122   (JMP L138)
124   L124
124   (GETVALUE 2)                        ; RES
126   (CAR&PUSH)
127   (GETVALUE 21)                       ; VAR
129   (JMPIFEQ L117)
131   (CONST&PUSH 14)                     ; 0
132   (GETVALUE&PUSH 2)                   ; RES
134   (LIST 2)
136   (STORE 19)
138   L138
138   (CONST 14)                          ; 0
139   (STORE 21)
141   (STORE 20)
143   (LOAD&JMPIFNOT 19 L209)
146   (JMP L151)
148   L148
148   (LOAD&JMPIFNOT 19 L209)
151   L151
151   (LOAD&CAR&STORE 19 14)
154   (LOAD 19)
156   (CDR)
157   (CAR)
158   (STORE 7)
159   (LOAD 19)
161   (CDR)
162   (CDR)
163   (STORE 19)
165   (LOAD&PUSH 7)
166   (LOAD&PUSH 7)
167   (CALL2 23)                          ; KTERMS
169   (STORE 22)
171   (NIL&STORE 7)
173   (LOAD&PUSH 22)
174   (JMPIFEQTO 14 L148)                 ; 0
177   (LOAD&PUSH 14)
178   (CALL1 24)                          ; OBTAINABM
180   (STORE 18)
182   (LOAD&PUSH 20)
183   (LOAD&CAR&PUSH 19)
185   (LOAD&PUSH 24)
186   (CALL2&PUSH 19)                     ; PTIMES
188   (CALL2 25)                          ; PPLUS
190   (STORE 20)
192   (LOAD&PUSH 21)
193   (LOAD 19)
195   (CDR)
196   (CAR&PUSH)
197   (LOAD&PUSH 24)
198   (CALL2&PUSH 19)                     ; PTIMES
200   (CALL2 25)                          ; PPLUS
202   (STORE 21)
204   (NIL&STORE 22)
206   (LOAD&JMPIF 19 L151)
209   L209
209   (LOAD&PUSH 21)
210   (LOAD&PUSH 21)
211   (LOAD&PUSH 8)
212   (LOAD&PUSH 27)
214   (CALL 4 22)                         ; Z2
217   L217
217   (GETVALUE&PUSH 2)                   ; RES
219   (JMPIFEQTO 14 L231)                 ; 0
222   (LOAD&INC&STORE 6)
224   (PUSH)
225   (LOAD&PUSH 24)
226   (CALLSR&JMPIFNOT 1 48 L124)         ; >
231   L231
231   (GETVALUE&PUSH 4)                   ; DF1
233   (GETVALUE&PUSH 5)                   ; DF2
235   (LIST 2)
237   (UNBIND 2)
239   (SKIP 2)
241   (UNBIND 2)
243   (SKIP 1)
245   (UNBIND1)
246   (SKIP 7)
248   (UNBIND 3)
250   (SKIP&RET 4)


Disassembly of function #:|(DEFUN Z2 (A B STEP ...) ...)-48|
(CONST 0) = Z2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE Z2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; Z2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; Z2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE Z2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; Z2
8     (SKIP&RET 1)


Disassembly of function Z2
(CONST 0) = 0
(CONST 1) = PTIMES
(CONST 2) = DROPTERMS
(CONST 3) = DF1
(CONST 4) = PDIFFERENCE
(CONST 5) = DF2
(CONST 6) = RES
(CONST 7) = PPLUS
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RES DF2 DF1)
writes special variables : (DF2 DF1 RES)
66 byte-code instructions:
0     (LOAD&PUSH 4)
1     (JMPIFNOTEQTO 0 L8)                 ; 0
4     (LOAD&PUSH 3)
5     (JMPIFEQTO 0 L71)                   ; 0
8     L8
8     (LOAD&PUSH 2)
9     (LOAD&PUSH 2)
10    (CALLSR&JMPIFNOT 1 47 L74)          ; <
14    (LOAD&PUSH 4)
15    (LOAD&PUSH 4)
16    (CALL2 1)                           ; PTIMES
18    L18
18    (PUSH)
19    (LOAD&PUSH 3)
20    (LOAD&PUSH 3)
21    (CALLSR&JMPIFNOT 1 47 L82)          ; <
25    (GETVALUE&PUSH 3)                   ; DF1
27    (LOAD&PUSH 5)
28    (CALL2 1)                           ; PTIMES
30    L30
30    (PUSH)
31    (CALL2&PUSH 4)                      ; PDIFFERENCE
33    (LOAD&PUSH 3)
34    (LOAD&PUSH 3)
35    (CALLSR&JMPIFNOT 1 47 L91)          ; <
39    (GETVALUE&PUSH 5)                   ; DF2
41    (LOAD&PUSH 6)
42    (CALL2 1)                           ; PTIMES
44    L44
44    (PUSH)
45    (CALL2 4)                           ; PDIFFERENCE
47    (STORE 2)
48    (GETVALUE&PUSH 6)                   ; RES
50    (LOAD&PUSH 3)
51    (CALL2 7)                           ; PPLUS
53    (SETVALUE 6)                        ; RES
55    (GETVALUE&PUSH 3)                   ; DF1
57    (LOAD&PUSH 5)
58    (CALL2 4)                           ; PDIFFERENCE
60    (SETVALUE 3)                        ; DF1
62    (GETVALUE&PUSH 5)                   ; DF2
64    (LOAD&PUSH 4)
65    (CALL2 4)                           ; PDIFFERENCE
67    (SETVALUE 5)                        ; DF2
69    (SKIP&RET 5)
71    L71
71    (NIL)
72    (SKIP&RET 5)
74    L74
74    (LOAD&PUSH 4)
75    (LOAD&PUSH 4)
76    (CALL2&PUSH 1)                      ; PTIMES
78    (CALL1 2)                           ; DROPTERMS
80    (JMP L18)
82    L82
82    (GETVALUE&PUSH 3)                   ; DF1
84    (LOAD&PUSH 5)
85    (CALL2&PUSH 1)                      ; PTIMES
87    (CALL1 2)                           ; DROPTERMS
89    (JMP L30)
91    L91
91    (GETVALUE&PUSH 5)                   ; DF2
93    (LOAD&PUSH 6)
94    (CALL2&PUSH 1)                      ; PTIMES
96    (CALL1 2)                           ; DROPTERMS
98    (JMP L44)


Disassembly of function #:|(DEFUN OBTAINABM (M) ...)-49|
(CONST 0) = OBTAINABM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OBTAINABM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OBTAINABM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OBTAINABM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OBTAINABM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OBTAINABM
8     (SKIP&RET 1)


Disassembly of function OBTAINABM
(CONST 0) = *AB*
(CONST 1) = ZL-ASSOC
(CONST 2) = VAR
(CONST 3) = 1
(CONST 4) = OBTAINAB
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR *AB*)
writes special variable : (*AB*)
23 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 2)
2     (GETVALUE&PUSH 0)                   ; *AB*
4     (CALL2 1)                           ; ZL-ASSOC
6     (CDR)
7     (STORE 0)
8     (JMPIF L30)
10    (GETVALUE&PUSH 2)                   ; VAR
12    (LOAD&PUSH 3)
13    (CONST&PUSH 3)                      ; 1
14    (LIST&PUSH 3)
16    (CALL1 4)                           ; OBTAINAB
18    (STORE 0)
19    (LOAD&PUSH 2)
20    (LOAD 1)
21    (CONS&PUSH)
22    (GETVALUE 0)                        ; *AB*
24    (CONS)
25    (SETVALUE 0)                        ; *AB*
27    (POP)
28    (SKIP&RET 2)
30    L30
30    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FACT20 (F1 G1 LIMK) ...)-50|
(CONST 0) = FACT20
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACT20>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACT20
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACT20
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACT20>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACT20
8     (SKIP&RET 1)


Disassembly of function FACT20
(CONST 0) = LIMK
(CONST 1) = 0
(CONST 2) = PMOD
(CONST 3) = PPPROG
(CONST 4) = MODULUS
(CONST 5) = SETQMODULUS
(CONST 6) = PTIMES
(CONST 7) = PPLUS
(CONST 8) = 1
(CONST 9) = PDIFFERENCE
(CONST 10) = PQUO
(CONST 11) = PMODQUO
(CONST 12) = PCTIMES
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LIMK MODULUS)
83 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; LIMK
3     (PUSH-NIL 10)
5     (CONST 1)                           ; 0
6     (STORE 1)
7     (LOAD&PUSH 16)
8     (CALL1&PUSH 2)                      ; PMOD
10    (LOAD&PUSH 16)
11    (CALL1&PUSH 2)                      ; PMOD
13    (CALL2 3)                           ; PPPROG
15    (STORE 4)
16    (CAR)
17    (STORE 7)
18    (LOAD 4)
19    (CDR)
20    (CAR)
21    (STORE 5)
22    (JMP L108)
25    L25
25    (GETVALUE 4)                        ; MODULUS
27    (STORE 6)
28    (PUSH)
29    (GETVALUE&PUSH 4)                   ; MODULUS
31    (CALLSR&PUSH 2 55)                  ; *
34    (CALL1 5)                           ; SETQMODULUS
36    (LOAD&PUSH 16)
37    (CALL1 2)                           ; PMOD
39    (STORE 9)
41    (LOAD&PUSH 15)
42    (CALL1 2)                           ; PMOD
44    (STORE 8)
46    (LOAD&PUSH 7)
47    (LOAD&PUSH 10)
48    (CALL2&PUSH 6)                      ; PTIMES
50    (LOAD&PUSH 6)
51    (LOAD&PUSH 10)
52    (CALL2&PUSH 6)                      ; PTIMES
54    (CALL2&PUSH 7)                      ; PPLUS
56    (CONST&PUSH 8)                      ; 1
57    (CALL2&PUSH 9)                      ; PDIFFERENCE
59    (CALL1&PUSH 2)                      ; PMOD
61    (LOAD&PUSH 7)
62    (CALL2 10)                          ; PQUO
64    (STORE 2)
65    (LOAD&PUSH 7)
66    (LOAD&PUSH 3)
67    (CALL2&PUSH 6)                      ; PTIMES
69    (LOAD&PUSH 9)
70    (CALL2 11)                          ; PMODQUO
72    (STORE 3)
73    (LOAD&PUSH 5)
74    (LOAD&PUSH 3)
75    (CALL2&PUSH 6)                      ; PTIMES
77    (LOAD&CAR&PUSH 4)
79    (LOAD&PUSH 11)
80    (CALL2&PUSH 6)                      ; PTIMES
82    (CALL2 7)                           ; PPLUS
84    (STORE 0)
85    (LOAD&PUSH 7)
86    (LOAD&PUSH 7)
87    (LOAD&CDR&PUSH 5)
89    (CALL2&PUSH 12)                     ; PCTIMES
91    (CALL1&PUSH 2)                      ; PMOD
93    (CALL2 9)                           ; PDIFFERENCE
95    (STORE 7)
96    (LOAD&PUSH 5)
97    (LOAD&PUSH 7)
98    (LOAD&PUSH 2)
99    (CALL2&PUSH 12)                     ; PCTIMES
101   (CALL1&PUSH 2)                      ; PMOD
103   (CALL2 9)                           ; PDIFFERENCE
105   (STORE 5)
106   (LOAD&INC&STORE 1)
108   L108
108   (LOAD&PUSH 1)
109   (GETVALUE&PUSH 0)                   ; LIMK
111   (CALLSR&JMPIFNOT 1 48 L25)          ; >
116   (LOAD&PUSH 7)
117   (LOAD&PUSH 6)
118   (LIST 2)
120   (SKIP 10)
122   (UNBIND1)
123   (SKIP&RET 4)


Disassembly of function #:|(DEFUN BASELIST (N) ...)-51|
(CONST 0) = BASELIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BASELIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BASELIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BASELIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BASELIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BASELIST
8     (SKIP&RET 1)


Disassembly of function BASELIST
(CONST 0) = *I*
(CONST 1) = 0
(CONST 2) = ELM
(CONST 3) = COMPLETEVECTOR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ELM)
writes special variable : (*I*)
8 byte-code instructions:
0     (LOAD 1)
1     (SETVALUE 0)                        ; *I*
3     (NIL&PUSH)
4     (CONST&PUSH 1)                      ; 0
5     (LOAD&PUSH 3)
6     (GETVALUE&PUSH 2)                   ; ELM
8     (CALL 4 3)                          ; COMPLETEVECTOR
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INLIST3 (L) ...)-52|
(CONST 0) = INLIST3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INLIST3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INLIST3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INLIST3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INLIST3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INLIST3
8     (SKIP&RET 1)


Disassembly of function INLIST3
(CONST 0) = L
(CONST 1) = *INL3
(CONST 2) = 1
(CONST 3) = -1
(CONST 4) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (*INL3)
34 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L27)
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (CALLS2&JMPIF 145 L32)              ; ZEROP
13    (GETVALUE 0)                        ; L
15    (CAR&PUSH)
16    (JMPIFNOTEQTO 2 L35)                ; 1
19    (CONST 3)                           ; -1
20    L20
20    (PUSH)
21    (GETVALUE 0)                        ; L
23    (CDR)
24    (CONS)
25    (JMP L42)
27    L27
27    (NIL)
28    (SETVALUE 1)                        ; *INL3
30    (JMP L42)
32    L32
32    (CONST 2)                           ; 1
33    (JMP L20)
35    L35
35    (CONST&PUSH 4)                      ; 0
36    (GETVALUE 0)                        ; L
38    (CDR&PUSH)
39    (JSR L0)
41    (CONS)
42    L42
42    (UNBIND1)
43    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NEWREP (P) ...)-53|
(CONST 0) = NEWREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWREP
8     (SKIP&RET 1)


Disassembly of function NEWREP
(CONST 0) = P
(CONST 1) = MODULUS
(CONST 2) = SUBVAR
(CONST 3) = SUBVAL
(CONST 4) = 1
(CONST 5) = 0
(CONST 6) = PCSUBSTY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SUBVAL P SUBVAR)
46 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; MODULUS
6     (GETVALUE 2)                        ; SUBVAR
8     (JMPIF L16)
10    (GETVALUE 0)                        ; P
12    (UNBIND1)
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (NIL&PUSH)
17    (GETVALUE&PUSH 2)                   ; SUBVAR
19    (GETVALUE&PUSH 3)                   ; SUBVAL
21    (JMP L44)
23    L23
23    (SKIP 2)
25    (JMP L56)
27    L27
27    (LOAD&CAR&PUSH 1)
29    (LOAD&PUSH 1)
30    (CONST&PUSH 4)                      ; 1
31    (CONST&PUSH 4)                      ; 1
32    (CONST&PUSH 5)                      ; 0
33    (LOAD&PUSH 4)
34    (LIST&PUSH 5)
36    (LOAD&CONS&STORE 4)
38    (SKIP 2)
40    (LOAD&CDR&STORE 1)
42    (LOAD&CDR&STORE 0)
44    L44
44    (LOAD&PUSH 1)
45    (CALLS1&JMPIF 146 L23)              ; ENDP
48    (LOAD&CAR&PUSH 1)
50    (LOAD&PUSH 1)
51    (CALLS1&JMPIFNOT 146 L27)           ; ENDP
54    (SKIP 3)
56    L56
56    (LOAD&PUSH 0)
57    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
60    (GETVALUE&PUSH 2)                   ; SUBVAR
62    (GETVALUE&PUSH 0)                   ; P
64    (CALL 3 6)                          ; PCSUBSTY
67    (UNBIND1)
68    (JMP L13)


Disassembly of function #:|(DEFUN OLDREP (P) ...)-54|
(CONST 0) = OLDREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OLDREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OLDREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OLDREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OLDREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OLDREP
8     (SKIP&RET 1)


Disassembly of function OLDREP
(CONST 0) = P
(CONST 1) = MODULUS
(CONST 2) = SUBVAR
(CONST 3) = SUBVAL
(CONST 4) = 1
(CONST 5) = 0
(CONST 6) = PCSUBSTY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SUBVAL P SUBVAR)
47 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; MODULUS
6     (GETVALUE 2)                        ; SUBVAR
8     (JMPIF L16)
10    (GETVALUE 0)                        ; P
12    (UNBIND1)
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (NIL&PUSH)
17    (GETVALUE&PUSH 2)                   ; SUBVAR
19    (GETVALUE&PUSH 3)                   ; SUBVAL
21    (JMP L47)
23    L23
23    (SKIP 2)
25    (JMP L59)
27    L27
27    (LOAD&CAR&PUSH 1)
29    (LOAD&PUSH 1)
30    (CONST&PUSH 4)                      ; 1
31    (CONST&PUSH 4)                      ; 1
32    (CONST&PUSH 5)                      ; 0
33    (LOAD&PUSH 4)
34    (CALLSR&PUSH 0 54)                  ; -
37    (LIST&PUSH 5)
39    (LOAD&CONS&STORE 4)
41    (SKIP 2)
43    (LOAD&CDR&STORE 1)
45    (LOAD&CDR&STORE 0)
47    L47
47    (LOAD&PUSH 1)
48    (CALLS1&JMPIF 146 L23)              ; ENDP
51    (LOAD&CAR&PUSH 1)
53    (LOAD&PUSH 1)
54    (CALLS1&JMPIFNOT 146 L27)           ; ENDP
57    (SKIP 3)
59    L59
59    (LOAD&PUSH 0)
60    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
63    (GETVALUE&PUSH 2)                   ; SUBVAR
65    (GETVALUE&PUSH 0)                   ; P
67    (CALL 3 6)                          ; PCSUBSTY
70    (UNBIND1)
71    (JMP L13)


Disassembly of function #:|(DEFUN COMPLETEVECTOR (L N M ...) ...)-55|
(CONST 0) = COMPLETEVECTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPLETEVECTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLETEVECTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPLETEVECTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPLETEVECTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPLETEVECTOR
8     (SKIP&RET 1)


Disassembly of function COMPLETEVECTOR
(CONST 0) = L
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
18 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; L
3     (LOAD&PUSH 5)
4     (JMP L14)
6     L6
6     (LOAD&PUSH 5)
7     (GETVALUE 0)                        ; L
9     (CONS)
10    (SETVALUE 0)                        ; L
12    (LOAD&DEC&STORE 0)
14    L14
14    (LOAD&PUSH 0)
15    (LOAD&PUSH 8)
16    (CALLSR&JMPIFNOT 1 45 L6)           ; =
20    (GETVALUE 0)                        ; L
22    (SKIP 1)
24    (UNBIND1)
25    (SKIP&RET 5)


Disassembly of function #:|(DEFUN DEGVECTOR (L N C) ...)-56|
(CONST 0) = DEGVECTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEGVECTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEGVECTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEGVECTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEGVECTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEGVECTOR
8     (SKIP&RET 1)


Disassembly of function DEGVECTOR
(CONST 0) = L
(CONST 1) = LF
(CONST 2) = NN*
(CONST 3) = 0
(CONST 4) = COMPLETEVECTOR
(CONST 5) = *ODR*
(CONST 6) = ZL-ASSOC
(CONST 7) = *MX*
(CONST 8) = MAXLIST
(CONST 9) = *MIN*
(CONST 10) = MINLIST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*MIN* *MX* LF *ODR* NN* L)
writes special variable : (LF)
76 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; LF
6     (PUSH-NIL 2)
8     (JMP L35)
10    L10
10    (GETVALUE&PUSH 0)                   ; L
12    (LOAD&PUSH 11)
13    (GETVALUE&PUSH 2)                   ; NN*
15    (CONST&PUSH 3)                      ; 0
16    (CALL&PUSH 4 4)                     ; COMPLETEVECTOR
19    (LIST 1)
21    (SKIP 2)
23    (UNBIND1)
24    (JMP L109)
27    L27
27    (LOAD&PUSH 1)
28    (CALL1 8)                           ; MAXLIST
30    (JMP L93)
32    L32
32    (CONST 3)                           ; 0
33    (STORE 9)
35    L35
35    (LOAD&PUSH 9)
36    (CALLS2&JMPIF 8 L10)                ; NUMBERP
39    (LOAD&CAR&PUSH 9)
41    (GETVALUE&PUSH 5)                   ; *ODR*
43    (CALL2 6)                           ; ZL-ASSOC
45    (CDR)
46    (STORE 0)
47    (JMPIFNOT L32)
49    (LOAD&CDR&STORE 9)
51    (GETVALUE&PUSH 0)                   ; L
53    (LOAD&PUSH 11)
54    (LOAD&PUSH 2)
55    (CONST&PUSH 3)                      ; 0
56    (CALL 4 4)                          ; COMPLETEVECTOR
59    (SETVALUE 1)                        ; LF
61    (LOAD&JMPIFNOT 9 L105)
64    L64
64    (LOAD&CAR&PUSH 9)
66    (GETVALUE 1)                        ; LF
68    (CONS&PUSH)
69    (LOAD&INC&PUSH 1)
71    (LOAD 11)
72    (CDR)
73    (CAR&PUSH)
74    (JSR&PUSH L0)
77    (LOAD&PUSH 2)
78    (CALLSR&STORE 2 35 1)               ; NCONC
82    (GETVALUE 7)                        ; *MX*
84    (JMPIF L27)
86    (GETVALUE 9)                        ; *MIN*
88    (JMPIFNOT L97)
90    (LOAD&PUSH 1)
91    (CALL1 10)                          ; MINLIST
93    L93
93    (PUSH)
94    (NIL)
95    (CONS)
96    (STORE 1)
97    L97
97    (LOAD 9)
98    (CDR)
99    (CDR)
100   (STORE 9)
102   (LOAD&JMPIF 9 L64)
105   L105
105   (LOAD 1)
106   (SKIP 2)
108   (UNBIND1)
109   L109
109   (UNBIND1)
110   (SKIP&RET 4)


Disassembly of function #:|(DEFUN UNION1 (A B) ...)-57|
(CONST 0) = UNION1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UNION1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UNION1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UNION1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UNION1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UNION1
8     (SKIP&RET 1)


Disassembly of function UNION1
(CONST 0) = ZL-MEMBER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (LOAD&JMPIFNOT 1 L20)
5     L5
5     (LOAD&CAR&PUSH 1)
7     (LOAD&PUSH 1)
8     (CALL2&JMPIF 0 L15)                 ; ZL-MEMBER
11    (LOAD&CAR&PUSH 1)
13    (LOAD&CONS&STORE 0)
15    L15
15    (LOAD&CDR&STORE 1)
17    (LOAD&JMPIF 1 L5)
20    L20
20    (POP)
21    (SKIP&RET 4)


Disassembly of function #:|(DEFUN OBTAINAB (U) ...)-58|
(CONST 0) = OBTAINAB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OBTAINAB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OBTAINAB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OBTAINAB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OBTAINAB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OBTAINAB
8     (SKIP&RET 1)


Disassembly of function OBTAINAB
(CONST 0) = PMOD
(CONST 1) = *SHARPA
(CONST 2) = PTIMES
(CONST 3) = FACT2
(CONST 4) = PMODQUO
(CONST 5) = FACT1
(CONST 6) = *SHARPB
(CONST 7) = PPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*SHARPB FACT1 FACT2 *SHARPA)
21 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD&PUSH 3)
3     (CALL1 0)                           ; PMOD
5     (STORE 1)
6     (GETVALUE&PUSH 1)                   ; *SHARPA
8     (LOAD&PUSH 2)
9     (CALL2&PUSH 2)                      ; PTIMES
11    (GETVALUE&PUSH 3)                   ; FACT2
13    (CALL2 4)                           ; PMODQUO
15    (STORE 0)
16    (CDR&PUSH)
17    (LOAD&CAR&PUSH 1)
19    (GETVALUE&PUSH 5)                   ; FACT1
21    (CALL2&PUSH 2)                      ; PTIMES
23    (GETVALUE&PUSH 6)                   ; *SHARPB
25    (LOAD&PUSH 4)
26    (CALL2&PUSH 2)                      ; PTIMES
28    (CALL2&PUSH 7)                      ; PPLUS
30    (CALL1&PUSH 0)                      ; PMOD
32    (LIST 2)
34    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PCDIFCONC (V J) ...)-59|
(CONST 0) = PCDIFCONC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PCDIFCONC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PCDIFCONC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PCDIFCONC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PCDIFCONC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PCDIFCONC
8     (SKIP&RET 1)


Disassembly of function PCDIFCONC
(CONST 0) = L
(CONST 1) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
45 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (JMP L40)
5     L5
5     (GETVALUE&PUSH 0)                   ; L
7     (NIL)
8     (JMP L57)
10    L10
10    (LOAD&PUSH 4)
11    (CONST&PUSH 1)                      ; 0
12    (CALLSR&JMPIF 1 45 L5)              ; =
16    (GETVALUE 0)                        ; L
18    (CDR)
19    (CDR&PUSH)
20    (LOAD&PUSH 5)
21    (CALLS1 168)                        ; RPLACA
23    (JMP L60)
25    L25
25    (GETVALUE 0)                        ; L
27    (CDR)
28    (CAR&PUSH)
29    (CONST&PUSH 1)                      ; 0
30    (CALLSR&JMPIF 1 45 L10)             ; =
34    (GETVALUE 0)                        ; L
36    (CDR)
37    (CDR)
38    (SETVALUE 0)                        ; L
40    L40
40    (GETVALUE 0)                        ; L
42    (CDR)
43    (JMPIF L25)
45    (LOAD&PUSH 4)
46    (CONST&PUSH 1)                      ; 0
47    (CALLSR&JMPIF 1 45 L60)             ; =
51    (GETVALUE&PUSH 0)                   ; L
53    (CONST&PUSH 1)                      ; 0
54    (LOAD&PUSH 6)
55    (LIST 2)
57    L57
57    (PUSH)
58    (CALLS1 170)                        ; RPLACD
60    L60
60    (LOAD 5)
61    (UNBIND1)
62    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ORDE (A L) ...)-60|
(CONST 0) = ORDE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDE
8     (SKIP&RET 1)


Disassembly of function ORDE
(CONST 0) = L
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
28 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L28)
7     (LOAD&PUSH 5)
8     (GETVALUE 0)                        ; L
10    (CAR&PUSH)
11    (CALLSR&JMPIF 1 47 L33)             ; <
15    (GETVALUE 0)                        ; L
17    (CAR&PUSH)
18    (LOAD&PUSH 6)
19    (GETVALUE 0)                        ; L
21    (CDR&PUSH)
22    (JSR L0)
24    (CONS)
25    L25
25    (UNBIND1)
26    (SKIP&RET 3)
28    L28
28    (LOAD&PUSH 5)
29    (LIST 1)
31    (JMP L25)
33    L33
33    (LOAD&PUSH 5)
34    (GETVALUE 0)                        ; L
36    (CONS)
37    (JMP L25)


Disassembly of function #:|(DEFUN PQUO (X Y) ...)-61|
(CONST 0) = PQUO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PQUO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PQUO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PQUO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PQUO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PQUO
8     (SKIP&RET 1)


Disassembly of function PQUO
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = MODULUS
(CONST 3) = PQUOTIENT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL)
7     (BIND 2)                            ; MODULUS
9     (GETVALUE&PUSH 0)                   ; X
11    (GETVALUE&PUSH 1)                   ; Y
13    (CALL2 3)                           ; PQUOTIENT
15    (UNBIND 3)
17    (SKIP&RET 3)


Disassembly of function #:|(DEFUN INTERSECT (X Y) ...)-62|
(CONST 0) = INTERSECT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTERSECT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTERSECT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTERSECT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTERSECT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTERSECT
8     (SKIP&RET 1)


Disassembly of function INTERSECT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ZL-MEMBER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
26 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFNOT1 L23)
10    (CAR&PUSH)
11    (GETVALUE&PUSH 1)                   ; Y
13    (CALL2&JMPIF 2 L27)                 ; ZL-MEMBER
16    (GETVALUE 0)                        ; X
18    (CDR&PUSH)
19    (GETVALUE&PUSH 1)                   ; Y
21    (JSR L0)
23    L23
23    (UNBIND 2)
25    (SKIP&RET 3)
27    L27
27    (GETVALUE 0)                        ; X
29    (CAR&PUSH)
30    (GETVALUE 0)                        ; X
32    (CDR&PUSH)
33    (GETVALUE&PUSH 1)                   ; Y
35    (JSR L0)
37    (CONS)
38    (JMP L23)


Disassembly of function #:|(DEFUN INDEX* (K) ...)-63|
(CONST 0) = INDEX*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INDEX*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INDEX*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INDEX*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INDEX*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INDEX*
8     (SKIP&RET 1)


Disassembly of function INDEX*
(CONST 0) = 2
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 2
2     (CALLSR&JMPIF 1 47 L14)             ; <
6     (LOAD&PUSH 1)
7     (LOAD&DEC&PUSH 2)
9     (JSR L0)
11    (CONS)
12    (SKIP&RET 2)
14    L14
14    (CONST&PUSH 1)                      ; 1
15    (LIST 1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN KLIM (U P1) ...)-64|
(CONST 0) = KLIM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KLIM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KLIM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KLIM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KLIM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KLIM
8     (SKIP&RET 1)


Disassembly of function KLIM
(CONST 0) = MAXCOEFFICIENT
(CONST 1) = 5
(CONST 2) = ALGFAC*
(CONST 3) = INTBS*
(CONST 4) = 10000
(CONST 5) = 20000
(CONST 6) = 0
(CONST 7) = LIMK
(CONST 8) = PLIM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LIMK INTBS* ALGFAC*)
writes special variables : (PLIM LIMK)
37 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (CALL1 0)                           ; MAXCOEFFICIENT
4     (STORE 0)
5     (CONST&PUSH 1)                      ; 5
6     (LOAD&PUSH 1)
7     (CALLSR&STORE 2 55 0)               ; *
11    (GETVALUE 2)                        ; ALGFAC*
13    (JMPIFNOT L22)
15    (LOAD&PUSH 0)
16    (GETVALUE&PUSH 3)                   ; INTBS*
18    (CALLSR&STORE 2 55 0)               ; *
22    L22
22    (LOAD&PUSH 0)
23    (CONST&PUSH 4)                      ; 10000
24    (CALLSR&JMPIFNOT 1 47 L30)          ; <
28    (CONST 5)                           ; 20000
29    (STORE 0)
30    L30
30    (CONST 6)                           ; 0
31    (SETVALUE 7)                        ; LIMK
33    (JMP L41)
35    L35
35    (GETVALUE&PUSH 7)                   ; LIMK
37    (CALLS2 150)                        ; 1+
39    (SETVALUE 7)                        ; LIMK
41    L41
41    (LOAD&PUSH 2)
42    (LOAD&PUSH 3)
43    (CALLSR&STORE 2 55 2)               ; *
47    (PUSH)
48    (LOAD&PUSH 1)
49    (CALLSR&JMPIFNOT 1 48 L35)          ; >
53    (LOAD 2)
54    (SETVALUE 8)                        ; PLIM
56    (GETVALUE 7)                        ; LIMK
58    (SKIP&RET 4)


Disassembly of function #:|(DECLARE-TOP (SPECIAL B B2))-65|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN CPBERL (U) ...)-66|
(CONST 0) = CPBERL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPBERL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPBERL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPBERL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPBERL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPBERL
8     (SKIP&RET 1)


Disassembly of function CPBERL
(CONST 0) = SPLT
(CONST 1) = CPBER1
(CONST 2) = ALPHA
(CONST 3) = MODULUS
(CONST 4) = 70
(CONST 5) = PMOD
(CONST 6) = CPBGZASS
(CONST 7) = CPBG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODULUS ALPHA)
53 byte-code instructions:
0     (PUSH-NIL 2)
2     (CONST 0)                           ; SPLT
3     (CATCH-OPEN L9)
5     (LOAD&PUSH 6)
6     (CALL1 1)                           ; CPBER1
8     (CATCH-CLOSE)
9     L9
9     (STORE 1)
10    (CDR)
11    (CDR)
12    (CAR)
13    (STORE 3)
14    (LOAD&CAR&STORE 1 0)
17    (LOAD 1)
18    (CDR)
19    (CAR)
20    (STORE 1)
21    (JMPIFNOT L55)
23    (LOAD 1)
24    (CDR)
25    (JMPIFNOT L58)
27    (LOAD&PUSH 0)
28    (GETVALUE 2)                        ; ALPHA
30    (JMPIF L63)
32    (GETVALUE&PUSH 3)                   ; MODULUS
34    (CONST&PUSH 4)                      ; 70
35    (CALLSR&JMPIF 1 48 L63)             ; >
39    (LOAD&PUSH 2)
40    (LOAD&PUSH 5)
41    (CALL1&PUSH 5)                      ; PMOD
43    (LOAD&PUSH 4)
44    (CALLS2&PUSH 71)                    ; LENGTH
46    (CALL 3 7)                          ; CPBG
49    L49
49    (PUSH)
50    (CALLSR 2 34)                       ; APPEND
53    (SKIP&RET 4)
55    L55
55    (POP)
56    (SKIP&RET 3)
58    L58
58    (LOAD&PUSH 3)
59    (LOAD 1)
60    (CONS)
61    (SKIP&RET 4)
63    L63
63    (LOAD&PUSH 2)
64    (LOAD&PUSH 5)
65    (CALL1&PUSH 5)                      ; PMOD
67    (LOAD&PUSH 4)
68    (CALLS2&PUSH 71)                    ; LENGTH
70    (CALL 3 6)                          ; CPBGZASS
73    (JMP L49)


Disassembly of function #:|(DEFUN POWRS (G N &AUX ...) ...)-67|
(CONST 0) = POWRS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POWRS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POWRS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POWRS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POWRS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POWRS
8     (SKIP&RET 1)


Disassembly of function POWRS
(CONST 0) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1
1     (NIL)
2     (CONS&PUSH)
3     (CONST&PUSH 0)                      ; 1
4     (JMP L15)
6     L6
6     (LOAD&PUSH 4)
7     (LOAD&PUSH 1)
8     (CONST&PUSH 0)                      ; 1
9     (LIST&PUSH 3)
11    (LOAD&CONS&STORE 1)
13    (LOAD&INC&STORE 0)
15    L15
15    (LOAD&PUSH 0)
16    (LOAD&PUSH 4)
17    (CALLSR&JMPIFNOT 1 45 L6)           ; =
21    (LOAD 1)
22    (SKIP&RET 5)


Disassembly of function #:|(DEFUN PPPROG (F G) ...)-68|
(CONST 0) = PPPROG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PPPROG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PPPROG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PPPROG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PPPROG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PPPROG
8     (SKIP&RET 1)


Disassembly of function PPPROG
(CONST 0) = B2
(CONST 1) = PMODQUO
(CONST 2) = 1
(CONST 3) = 0
(CONST 4) = PMINUS
(CONST 5) = ALPHA
(CONST 6) = ALG
(CONST 7) = PTIMES
(CONST 8) = PDIFFERENCE
(CONST 9) = X
(CONST 10) = FIXNUMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X ALPHA B2)
writes special variable : (B2)
143 byte-code instructions:
0     (PUSH-NIL 3)
2     (NIL)
3     (BIND 0)                            ; B2
5     (PUSH-NIL 9)
7     (LOAD 16)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 18)
13    (CDR)
14    (CAR&PUSH)
15    (CALLSR&JMPIF 1 48 L55)             ; >
19    (LOAD 17)
21    (STORE 2)
22    (LOAD 16)
24    (STORE 1)
25    (T&STORE 0)
27    L27
27    (LOAD&PUSH 2)
28    (LOAD&PUSH 2)
29    (CALL2 1)                           ; PMODQUO
31    (STORE 6)
32    (CONST 2)                           ; 1
33    (STORE 14)
35    (CONST 3)                           ; 0
36    (STORE 12)
38    (LOAD&CAR&PUSH 6)
40    (CALL1 4)                           ; PMINUS
42    (STORE 13)
44    (CONST 2)                           ; 1
45    (SETVALUE 0)                        ; B2
47    (LOAD 1)
48    (STORE 8)
50    (LOAD 6)
51    (CDR)
52    (STORE 7)
53    (JMP L106)
55    L55
55    (LOAD 16)
57    (STORE 2)
58    (LOAD 17)
60    (STORE 1)
61    (JMP L27)
63    L63
63    (LOAD&PUSH 8)
64    (LOAD&PUSH 8)
65    (CALL2 1)                           ; PMODQUO
67    (STORE 6)
68    (LOAD&PUSH 14)
69    (LOAD&CAR&PUSH 7)
71    (LOAD&PUSH 15)
72    (CALL2&PUSH 7)                      ; PTIMES
74    (CALL2 8)                           ; PDIFFERENCE
76    (STORE 4)
77    (LOAD&PUSH 12)
78    (LOAD&CAR&PUSH 7)
80    (GETVALUE&PUSH 0)                   ; B2
82    (CALL2&PUSH 7)                      ; PTIMES
84    (CALL2 8)                           ; PDIFFERENCE
86    (STORE 3)
87    (LOAD 7)
88    (STORE 8)
90    (LOAD 6)
91    (CDR)
92    (STORE 7)
93    (LOAD 13)
94    (STORE 14)
96    (GETVALUE 0)                        ; B2
98    (STORE 12)
100   (LOAD 4)
101   (STORE 13)
103   (LOAD 3)
104   (SETVALUE 0)                        ; B2
106   L106
106   (LOAD&PUSH 7)
107   (CALLS2&JMPIF 8 L118)               ; NUMBERP
110   (GETVALUE 5)                        ; ALPHA
112   (JMPIFNOT L63)
114   (LOAD&PUSH 7)
115   (CALL1&JMPIFNOT 6 L63)              ; ALG
118   L118
118   (LOAD 7)
119   (BIND 9)                            ; X
121   (GETVALUE&PUSH 9)                   ; X
123   (CALL1&JMPIF 10 L135)               ; FIXNUMP
126   (GETVALUE 9)                        ; X
128   (JMPIFCONSP L175)
130   (GETVALUE&PUSH 9)                   ; X
132   (CALLS2&JMPIFNOT 15 L149)           ; FLOATP
135   L135
135   (GETVALUE&PUSH 9)                   ; X
137   (CALLS2 145)                        ; ZEROP
139   (UNBIND1)
140   (JMPIFNOT L176)
142   (JMP L152)
144   L144
144   (LOAD&PUSH 12)
145   (LOAD 15)
147   (JMP L188)
149   L149
149   (UNBIND1)
150   (JMPIFNOT L176)
152   L152
152   (LOAD 8)
153   (CDR)
154   (CDR)
155   (CAR)
156   (STORE 5)
157   (PUSH)
158   (JMPIFEQTO 2 L144)                  ; 1
161   (LOAD&PUSH 12)
162   (LOAD&PUSH 6)
163   (CALL2 1)                           ; PMODQUO
165   (CAR&PUSH)
166   (LOAD&PUSH 15)
167   (LOAD 7)
168   (JMP L184)
170   L170
170   (LOAD&PUSH 5)
171   (CALLS2 72)                         ; REVERSE
173   (JMP L196)
175   L175
175   (UNBIND1)
176   L176
176   (GETVALUE&PUSH 0)                   ; B2
178   (LOAD&PUSH 8)
179   (CALL2 1)                           ; PMODQUO
181   (CAR&PUSH)
182   (LOAD&PUSH 14)
183   (LOAD 9)
184   L184
184   (PUSH)
185   (CALL2 1)                           ; PMODQUO
187   (CAR)
188   L188
188   (PUSH)
189   (LIST 2)
191   (STORE 5)
192   (LOAD&JMPIFNOT 0 L170)
195   (LOAD 5)
196   L196
196   (SKIP 9)
198   (UNBIND1)
199   (SKIP&RET 6)


Disassembly of function #:|(DEFUN ZFF (V F G) ...)-69|
(CONST 0) = ZFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZFF
8     (SKIP&RET 1)


Disassembly of function ZFF
(CONST 0) = MANY*
(CONST 1) = Z1
(CONST 2) = LIMK
(CONST 3) = FACT2Z
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LIMK MANY*)
14 byte-code instructions:
0     (GETVALUE 0)                        ; MANY*
2     (JMPIF L14)
4     (LOAD&PUSH 3)
5     (LOAD&PUSH 3)
6     (LOAD&PUSH 3)
7     (GETVALUE&PUSH 2)                   ; LIMK
9     (CALL 4 3)                          ; FACT2Z
12    (SKIP&RET 4)
14    L14
14    (LOAD&PUSH 3)
15    (LOAD&PUSH 3)
16    (LOAD&PUSH 3)
17    (CALL 3 1)                          ; Z1
20    (SKIP&RET 4)


Disassembly of function #:|(DEFUN ZFACT (U FL LIMK ...) ...)-70|
(CONST 0) = ZFACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZFACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZFACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZFACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZFACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZFACT
8     (SKIP&RET 1)


Disassembly of function ZFACT
(CONST 0) = LIMK
(CONST 1) = MANY*
(CONST 2) = FCS*
(CONST 3) = PLIM
(CONST 4) = SETQMODULUS
(CONST 5) = MAX
(CONST 6) = MULTIDEG
(CONST 7) = ODDELM
(CONST 8) = DLP
(CONST 9) = 1
(CONST 10) = V
(CONST 11) = FSPLIT
(CONST 12) = ZFACTSPLIT
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FCS* PLIM MANY*)
writes special variable : (DLP)
43 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; LIMK
3     (LOAD 4)
4     (BIND 1)                            ; MANY*
6     (NIL)
7     (BIND 2)                            ; FCS*
9     (NIL&PUSH)
10    (GETVALUE 1)                        ; MANY*
12    (JMPIFNOT L33)
14    (GETVALUE&PUSH 3)                   ; PLIM
16    (CALL1 4)                           ; SETQMODULUS
18    (CONST&PUSH 5)                      ; MAX
19    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; MULTIDEG
21    (LOAD&PUSH 16)
22    (CALL1 7)                           ; ODDELM
24    (CDR&PUSH)
25    (CALLSR 0 22)                       ; MAPCAR
28    (CONS&PUSH)
29    (CALLS1 91)                         ; EVAL
31    (SETVALUE 8)                        ; DLP
33    L33
33    (LOAD&PUSH 13)
34    (CALLS2&PUSH 71)                    ; LENGTH
36    (JMPIFEQTO 9 L57)                   ; 1
39    (LOAD&PUSH 13)
40    (CONST&PUSH 10)                     ; V
41    (CALL2 11)                          ; FSPLIT
43    (STORE 0)
44    (PUSH)
45    (LOAD&PUSH 15)
46    (CALL2 12)                          ; ZFACTSPLIT
48    (GETVALUE 2)                        ; FCS*
50    (SKIP 1)
52    (UNBIND1)
53    L53
53    (UNBIND 2)
55    (SKIP&RET 5)
57    L57
57    (LOAD&PUSH 14)
58    (LIST 1)
60    (SKIP 1)
62    (UNBIND1)
63    (JMP L53)


Disassembly of function #:|(DEFUN ZFACTSPLIT (FL V) ...)-71|
(CONST 0) = ZFACTSPLIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZFACTSPLIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZFACTSPLIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZFACTSPLIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZFACTSPLIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZFACTSPLIT
8     (SKIP&RET 1)


Disassembly of function ZFACTSPLIT
(CONST 0) = FCS*
(CONST 1) = ZFF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FCS*)
writes special variable : (FCS*)
52 byte-code instructions:
0     L0
0     (NIL&PUSH)
1     (LOAD 3)
2     (CDR)
3     (JMPIFNOT L32)
5     (LOAD 3)
6     (CDR)
7     (CDR)
8     (JMPIF L38)
10    (LOAD 3)
11    (CDR)
12    (CAR)
13    (STORE 3)
14    (LOAD&PUSH 2)
15    (LOAD&CAR&PUSH 4)
17    (LOAD 5)
18    (CDR)
19    (CAR&PUSH)
20    (CALL&PUSH 3 1)                     ; ZFF
23    (GETVALUE&PUSH 0)                   ; FCS*
25    (CALLSR 2 35)                       ; NCONC
28    L28
28    (SETVALUE 0)                        ; FCS*
30    (SKIP&RET 4)
32    L32
32    (LOAD&PUSH 2)
33    (GETVALUE 0)                        ; FCS*
35    (CONS)
36    (JMP L28)
38    L38
38    (LOAD&CDR&STORE 3)
40    (LOAD&PUSH 2)
41    (LOAD 4)
42    (CAR)
43    (CAR&PUSH)
44    (LOAD 5)
45    (CDR)
46    (CAR)
47    (CAR&PUSH)
48    (CALL 3 1)                          ; ZFF
51    (STORE 0)
52    (NIL&STORE 2)
54    (LOAD&CAR&PUSH 3)
56    (LOAD&CAR&PUSH 1)
58    (JSR L0)
60    (LOAD 3)
61    (CDR)
62    (CAR&PUSH)
63    (LOAD 1)
64    (CDR)
65    (CAR&PUSH)
66    (JMPTAIL 2 6 L0)


Disassembly of function #:|(DEFUN SPLIT2 (L) ...)-72|
(CONST 0) = SPLIT2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPLIT2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPLIT2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPLIT2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPLIT2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPLIT2
8     (SKIP&RET 1)


Disassembly of function SPLIT2
(CONST 0) = L
(CONST 1) = 2
(CONST 2) = QUOT
(CONST 3) = NCDR
(CONST 4) = DN*
(CONST 5) = NN*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variables : (NN* DN*)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 2)
5     (GETVALUE&PUSH 0)                   ; L
7     (CALLS2&PUSH 71)                    ; LENGTH
9     (CONST&PUSH 1)                      ; 2
10    (CALL2 2)                           ; QUOT
12    (STORE 0)
13    (GETVALUE&PUSH 0)                   ; L
15    (LOAD&PUSH 1)
16    (CALL2 3)                           ; NCDR
18    (STORE 1)
19    (CDR&PUSH)
20    (CALLS1 158)                        ; COPY-LIST
22    (SETVALUE 4)                        ; DN*
24    (LOAD&PUSH 1)
25    (NIL&PUSH)
26    (CALLS1 170)                        ; RPLACD
28    (GETVALUE 0)                        ; L
30    (SETVALUE 5)                        ; NN*
32    (NIL)
33    (SKIP 2)
35    (UNBIND1)
36    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FSPLIT (L IND) ...)-73|
(CONST 0) = FSPLIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FSPLIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FSPLIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FSPLIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FSPLIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FSPLIT
8     (SKIP&RET 1)


Disassembly of function FSPLIT
(CONST 0) = L
(CONST 1) = IND
(CONST 2) = NN*
(CONST 3) = DN*
(CONST 4) = PTIMES
(CONST 5) = SPLIT2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (IND DN* NN* L)
writes special variables : (DN* NN*)
54 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; IND
6     (NIL)
7     (BIND 2)                            ; NN*
9     (NIL)
10    (BIND 3)                            ; DN*
12    (GETVALUE 0)                        ; L
14    (CDR)
15    (JMPIFNOT L66)
17    (GETVALUE 0)                        ; L
19    (CDR)
20    (CDR)
21    (JMPIFNOT L72)
23    (GETVALUE&PUSH 0)                   ; L
25    (CALL1 5)                           ; SPLIT2
27    (GETVALUE&PUSH 2)                   ; NN*
29    (NIL&PUSH)
30    (JSR L0)
32    (SETVALUE 2)                        ; NN*
34    (GETVALUE&PUSH 3)                   ; DN*
36    (NIL&PUSH)
37    (JSR L0)
39    (SETVALUE 3)                        ; DN*
41    (GETVALUE 1)                        ; IND
43    (JMPIF L53)
45    (GETVALUE 2)                        ; NN*
47    (CAR&PUSH)
48    (GETVALUE 3)                        ; DN*
50    (CAR&PUSH)
51    (CALL2 4)                           ; PTIMES
53    L53
53    (PUSH)
54    (GETVALUE&PUSH 2)                   ; NN*
56    (GETVALUE&PUSH 3)                   ; DN*
58    (LIST 3)
60    L60
60    (UNBIND 2)
62    L62
62    (UNBIND 2)
64    (SKIP&RET 3)
66    L66
66    (GETVALUE 0)                        ; L
68    (UNBIND 2)
70    (JMP L62)
72    L72
72    (CONST&SYMBOL-FUNCTION&PUSH 4)      ; PTIMES
74    (GETVALUE 0)                        ; L
76    (APPLY&PUSH 0)
78    (GETVALUE&PUSH 0)                   ; L
80    (LIST 2)
82    (JMP L60)


Disassembly of function #:|(COMMENT THIS PAGE ...)-74|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PEXPTMOD (P N Q) ...)-75|
(CONST 0) = PEXPTMOD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PEXPTMOD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PEXPTMOD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PEXPTMOD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PEXPTMOD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PEXPTMOD
8     (SKIP&RET 1)


Disassembly of function PEXPTMOD
(CONST 0) = P
(CONST 1) = X
(CONST 2) = CEXPT
(CONST 3) = PGCD1
(CONST 4) = (0 1)
(CONST 5) = 2
(CONST 6) = QUOT
(CONST 7) = 0
(CONST 8) = PTIMES1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P)
writes special variables : (P X)
67 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; X
7     (GETVALUE 0)                        ; P
9     (JMPIFATOM L31)
11    (LOAD&CDR&STORE 8)
13    (GETVALUE 0)                        ; P
15    (CAR)
16    (SETVALUE 1)                        ; X
18    (LOAD&PUSH 9)
19    (CALLS2&JMPIF 148 L41)              ; ODDP
22    (CONST 4)                           ; (0 1)
23    (STORE 3)
24    (GETVALUE 0)                        ; P
26    (CDR)
27    (SETVALUE 0)                        ; P
29    (JMP L73)
31    L31
31    (GETVALUE&PUSH 0)                   ; P
33    (LOAD&PUSH 10)
34    (CALL2 2)                           ; CEXPT
36    (UNBIND1)
37    (SKIP 1)
39    (JMP L97)
41    L41
41    (GETVALUE 0)                        ; P
43    (CDR&PUSH)
44    (LOAD&PUSH 9)
45    (CALL2 3)                           ; PGCD1
47    (STORE 3)
48    (SETVALUE 0)                        ; P
50    (JMP L80)
52    L52
52    (GETVALUE&PUSH 0)                   ; P
54    (GETVALUE&PUSH 0)                   ; P
56    (CALL2 8)                           ; PTIMES1
58    (SETVALUE 0)                        ; P
60    (LOAD&PUSH 9)
61    (CALLS2&JMPIFNOT 148 L73)           ; ODDP
64    (LOAD&PUSH 3)
65    (GETVALUE&PUSH 0)                   ; P
67    (CALL2&PUSH 8)                      ; PTIMES1
69    (LOAD&PUSH 9)
70    (CALL2 3)                           ; PGCD1
72    (STORE 3)
73    L73
73    (GETVALUE&PUSH 0)                   ; P
75    (LOAD&PUSH 9)
76    (CALL2 3)                           ; PGCD1
78    (SETVALUE 0)                        ; P
80    L80
80    (LOAD&PUSH 9)
81    (CONST&PUSH 5)                      ; 2
82    (CALL2 6)                           ; QUOT
84    (STORE 9)
86    (PUSH)
87    (JMPIFNOTEQTO 7 L52)                ; 0
90    (GETVALUE&PUSH 1)                   ; X
92    (LOAD 4)
93    (CONS)
94    (UNBIND1)
95    (SKIP 1)
97    L97
97    (UNBIND1)
98    (SKIP&RET 4)


Disassembly of function #:|(DEFUN SQFRP (U VAR) ...)-76|
(CONST 0) = SQFRP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SQFRP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQFRP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SQFRP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SQFRP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SQFRP
8     (SKIP&RET 1)


Disassembly of function SQFRP
(CONST 0) = VAR
(CONST 1) = 0
(CONST 2) = PTERM
(CONST 3) = 1
(CONST 4) = ONEVARP
(CONST 5) = PDERIVATIVE
(CONST 6) = PGCD
(CONST 7) = ALG
(CONST 8) = QUICK-SQFR-CHECK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&CDR&PUSH 5)
5     (CONST&PUSH 1)                      ; 0
6     (CALL2&PUSH 2)                      ; PTERM
8     (JMPIFNOTEQTO 1 L19)                ; 0
11    (LOAD&CDR&PUSH 5)
13    (CONST&PUSH 3)                      ; 1
14    (CALL2&PUSH 2)                      ; PTERM
16    (JMPIFEQTO 1 L31)                   ; 0
19    L19
19    (LOAD&PUSH 5)
20    (CALL1&JMPIF 4 L34)                 ; ONEVARP
23    (LOAD&PUSH 5)
24    (GETVALUE&PUSH 0)                   ; VAR
26    (CALL2 8)                           ; QUICK-SQFR-CHECK
28    L28
28    (UNBIND1)
29    (SKIP&RET 3)
31    L31
31    (NIL)
32    (JMP L28)
34    L34
34    (LOAD&PUSH 5)
35    (LOAD&PUSH 6)
36    (GETVALUE&PUSH 0)                   ; VAR
38    (CALL2&PUSH 5)                      ; PDERIVATIVE
40    (CALL2 6)                           ; PGCD
42    (STORE 5)
43    (PUSH)
44    (CALLS2 8)                          ; NUMBERP
46    (JMPIF1 L28)
48    (LOAD&PUSH 5)
49    (CALL1 7)                           ; ALG
51    (JMP L28)


Disassembly of function #:|(DEFUN LOGTWO (X) ...)-77|
(CONST 0) = LOGTWO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOGTWO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOGTWO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOGTWO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOGTWO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOGTWO
8     (SKIP&RET 1)


Disassembly of function LOGTWO
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = LOG2
(CONST 4) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (JMPIFEQTO 1 L33)                   ; 0
9     (GETVALUE&PUSH 0)                   ; X
11    (JMPIFEQTO 2 L38)                   ; 1
14    (GETVALUE&PUSH 0)                   ; X
16    (CALL1 3)                           ; LOG2
18    (STORE 0)
19    (GETVALUE&PUSH 0)                   ; X
21    (CONST&PUSH 4)                      ; 2
22    (LOAD&PUSH 2)
23    (CALLS2&PUSH 154)                   ; EXPT
25    (CALLSR&JMPIF 1 48 L43)             ; >
29    (POP)
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (CONST 1)                           ; 0
34    (SKIP 1)
36    (JMP L30)
38    L38
38    (CONST 2)                           ; 1
39    (SKIP 1)
41    (JMP L30)
43    L43
43    (LOAD&PUSH 0)
44    (CALLS2 150)                        ; 1+
46    (SKIP 1)
48    (JMP L30)


Disassembly of function #:|(DECLARE-TOP (SPECIAL P))-78|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN FIXVL0 (L1 L2 OV) ...)-79|
(CONST 0) = FIXVL0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXVL0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXVL0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXVL0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXVL0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXVL0
8     (SKIP&RET 1)


Disassembly of function FIXVL0
(CONST 0) = B
(CONST 1) = SUBVAR
(CONST 2) = SUBVAL
(CONST 3) = VALIST
(CONST 4) = MEMQ
(CONST 5) = ASSSO
(CONST 6) = 0
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
writes special variables : (B VALIST SUBVAL SUBVAR)
38 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; B
4     (NIL&PUSH)
5     (LOAD&JMPIFNOT 6 L23)
8     L8
8     (LOAD&CAR&PUSH 6)
10    (LOAD&PUSH 9)
11    (CALL2&JMPIF 4 L39)                 ; MEMQ
14    (CONST 6)                           ; 0
15    L15
15    (PUSH)
16    (LOAD&CONS&STORE 0)
18    (LOAD&CDR&STORE 6)
20    (LOAD&JMPIF 6 L8)
23    L23
23    (LOAD 4)
24    (SETVALUE 1)                        ; SUBVAR
26    (GETVALUE 0)                        ; B
28    (SETVALUE 2)                        ; SUBVAL
30    (LOAD 0)
31    (SETVALUE 3)                        ; VALIST
33    (NIL)
34    (SKIP 1)
36    (UNBIND1)
37    (SKIP&RET 5)
39    L39
39    (LOAD&CAR&PUSH 6)
41    (LOAD&CONS&STORE 4)
43    (LOAD&CAR&PUSH 6)
45    (LOAD&PUSH 9)
46    (LOAD&PUSH 9)
47    (CALL&PUSH 3 5)                     ; ASSSO
50    (GETVALUE 0)                        ; B
52    (CONS)
53    (SETVALUE 0)                        ; B
55    (CAR)
56    (JMP L15)


Disassembly of function #:|(DEFUN ASSSO (A L1 L2) ...)-80|
(CONST 0) = ASSSO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASSSO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASSSO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASSSO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASSSO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASSSO
8     (SKIP&RET 1)


Disassembly of function ASSSO
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&JMPIFNOT 2 L15)
3     L3
3     (LOAD&CAR&PUSH 2)
5     (LOAD 4)
6     (JMPIFEQ L18)
8     (LOAD&CDR&STORE 2)
10    (LOAD&CDR&STORE 1)
12    (LOAD&JMPIF 2 L3)
15    L15
15    (NIL)
16    (SKIP&RET 4)
18    L18
18    (LOAD 1)
19    (CAR)
20    (SKIP&RET 4)


Disassembly of function #:|(DEFUN ZEROHK (L) ...)-81|
(CONST 0) = ZEROHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZEROHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZEROHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZEROHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZEROHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZEROHK
8     (SKIP&RET 1)


Disassembly of function ZEROHK
(CONST 0) = L
(CONST 1) = ZEROSHARP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 2)
5     (GETVALUE 0)                        ; L
7     (JMPIF L24)
9     (NIL)
10    (SKIP 2)
12    (JMP L42)
14    L14
14    (GETVALUE 0)                        ; L
16    (CAR&PUSH)
17    (CALL1&PUSH 1)                      ; ZEROSHARP
19    (LOAD&PUSH 1)
20    (CALLSR&JMPIFNOT 1 48 L32)          ; >
24    L24
24    (GETVALUE 0)                        ; L
26    (CAR)
27    (STORE 1)
28    (PUSH)
29    (CALL1 1)                           ; ZEROSHARP
31    (STORE 0)
32    L32
32    (GETVALUE 0)                        ; L
34    (CDR)
35    (SETVALUE 0)                        ; L
37    (JMPIF L14)
39    (LOAD 1)
40    (SKIP 2)
42    L42
42    (UNBIND1)
43    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MULTFACT (POLY) ...)-82|
(CONST 0) = MULTFACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULTFACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULTFACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULTFACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULTFACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULTFACT
8     (SKIP&RET 1)


Disassembly of function MULTFACT
(CONST 0) = *INL3
(CONST 1) = *I*
(CONST 2) = *MIN*
(CONST 3) = *MX*
(CONST 4) = NN*
(CONST 5) = *ODR*
(CONST 6) = ELM
(CONST 7) = LISTELM
(CONST 8) = PLIM
(CONST 9) = NE
(CONST 10) = VAR
(CONST 11) = VALIST
(CONST 12) = OVARLIST
(CONST 13) = P
(CONST 14) = SUBVAR
(CONST 15) = SUBVAR1
(CONST 16) = SUBVAL1
(CONST 17) = SUBVAL
(CONST 18) = DLP
(CONST 19) = LISTOVARS
(CONST 20) = GENVAR
(CONST 21) = ALGFAC*
(CONST 22) = ALPHA
(CONST 23) = ZL-DELETE
(CONST 24) = INTERSECT
(CONST 25) = 0
(CONST 26) = 1
(CONST 27) = PUTODR
(CONST 28) = DEGVECTOR
(CONST 29) = ZEROHK
(CONST 30) = NZEROS
(CONST 31) = POLYSUBST
(CONST 32) = FIXVL
(CONST 33) = FIXVL1
(CONST 34) = COMPLETEVECTOR
(CONST 35) = FIXVL0
(CONST 36) = CPBER3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P ALPHA SUBVAR SUBVAR1 SUBVAL1 SUBVAL OVARLIST ELM ALGFAC* GENVAR)
writes special variables : (SUBVAR1 SUBVAL1 P *ODR* SUBVAL NE *I* LISTELM NN* OVARLIST GENVAR ELM VAR)
192 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; *INL3
3     (NIL)
4     (BIND 1)                            ; *I*
6     (NIL)
7     (BIND 2)                            ; *MIN*
9     (NIL)
10    (BIND 3)                            ; *MX*
12    (NIL)
13    (BIND 4)                            ; NN*
15    (NIL)
16    (BIND 5)                            ; *ODR*
18    (NIL&PUSH)
19    (NIL)
20    (BIND 6)                            ; ELM
22    (NIL)
23    (BIND 7)                            ; LISTELM
25    (NIL)
26    (BIND 8)                            ; PLIM
28    (NIL&PUSH)
29    (NIL)
30    (BIND 9)                            ; NE
32    (NIL)
33    (BIND 10)                           ; VAR
35    (NIL)
36    (BIND 11)                           ; VALIST
38    (NIL&PUSH)
39    (NIL)
40    (BIND 12)                           ; OVARLIST
42    (NIL)
43    (BIND 13)                           ; P
45    (NIL)
46    (BIND 14)                           ; SUBVAR
48    (NIL)
49    (BIND 15)                           ; SUBVAR1
51    (NIL)
52    (BIND 16)                           ; SUBVAL1
54    (NIL)
55    (BIND 17)                           ; SUBVAL
57    (NIL)
58    (BIND 18)                           ; DLP
60    (LOAD 61)
62    (CAR)
63    (SETVALUE 10)                       ; VAR
65    (LOAD&PUSH 61)
67    (CALL1 19)                          ; LISTOVARS
69    (SETVALUE 6)                        ; ELM
71    (GETVALUE 20)                       ; GENVAR
73    (STORE 31)
75    (PUSH)
76    (GETVALUE 21)                       ; ALGFAC*
78    (JMPIF L286)
81    (GETVALUE 6)                        ; ELM
83    L83
83    (PUSH)
84    (CALL2 24)                          ; INTERSECT
86    (SETVALUE 20)                       ; GENVAR
88    (PUSH)
89    (CALLS2 72)                         ; REVERSE
91    (CDR&PUSH)
92    (CALLS2 72)                         ; REVERSE
94    (SETVALUE 12)                       ; OVARLIST
96    (PUSH)
97    (CALLS2&PUSH 71)                    ; LENGTH
99    (CALLS2 150)                        ; 1+
101   (SETVALUE 4)                        ; NN*
103   (CONST 25)                          ; 0
105   (SETVALUE 7)                        ; LISTELM
107   (LOAD 61)
109   (CDR)
110   (CDR)
111   (CAR)
112   (STORE 41)
114   (CONST 26)                          ; 1
116   (SETVALUE 6)                        ; ELM
118   (SETVALUE 1)                        ; *I*
120   (SETVALUE 9)                        ; NE
122   (LOAD&PUSH 61)
124   (CALLS2 72)                         ; REVERSE
126   (SETVALUE 17)                       ; SUBVAL
128   (GETVALUE&PUSH 12)                  ; OVARLIST
130   (CALLS2&PUSH 72)                    ; REVERSE
132   (CALL1 27)                          ; PUTODR
134   (SETVALUE 5)                        ; *ODR*
136   (NIL&PUSH)
137   (CONST&PUSH 26)                     ; 1
138   (LOAD&PUSH 43)
140   (CALL&PUSH 3 28)                    ; DEGVECTOR
143   (GETVALUE 17)                       ; SUBVAL
145   (CDR)
146   (CAR&PUSH)
147   (CONST&PUSH 25)                     ; 0
148   (CALLSR&JMPIF 1 48 L296)            ; >
153   (GETVALUE 17)                       ; SUBVAL
155   (CDR)
156   (CDR)
157   (CDR)
158   (CAR&PUSH)
159   (CONST&PUSH 26)                     ; 1
160   (CALLSR&JMPIF 1 48 L296)            ; >
165   (NIL)
166   L166
166   (PUSH)
167   (CALLSR&PUSH 2 35)                  ; NCONC
170   (CALL1 29)                          ; ZEROHK
172   (STORE 21)
174   (NIL)
175   (SETVALUE 17)                       ; SUBVAL
177   (LOAD 61)
179   (SETVALUE 13)                       ; P
181   (LOAD&JMPIFNOT 21 L307)
185   (LOAD&PUSH 21)
186   (GETVALUE&PUSH 12)                  ; OVARLIST
188   (CALL2 32)                          ; FIXVL
190   (LOAD&PUSH 21)
191   (GETVALUE&PUSH 12)                  ; OVARLIST
193   (CALL2 33)                          ; FIXVL1
195   (GETVALUE 16)                       ; SUBVAL1
197   (JMPIFNOT L206)
199   (PUSH)
200   (GETVALUE&PUSH 15)                  ; SUBVAR1
202   (CALL2 31)                          ; POLYSUBST
204   (SETVALUE 16)                       ; SUBVAL1
206   L206
206   (NIL&PUSH)
207   (CONST&PUSH 25)                     ; 0
208   (GETVALUE&PUSH 17)                  ; SUBVAL
210   (CALLS2&PUSH 71)                    ; LENGTH
212   (CONST&PUSH 26)                     ; 1
213   (CALL&PUSH 4 34)                    ; COMPLETEVECTOR
216   (GETVALUE&PUSH 14)                  ; SUBVAR
218   (CALL2 31)                          ; POLYSUBST
220   (SETVALUE 17)                       ; SUBVAL
222   L222
222   (GETVALUE&PUSH 16)                  ; SUBVAL1
224   (GETVALUE&PUSH 15)                  ; SUBVAR1
226   (CALL2 32)                          ; FIXVL
228   (NIL)
229   (SETVALUE 16)                       ; SUBVAL1
231   (SETVALUE 15)                       ; SUBVAR1
233   (GETVALUE&PUSH 14)                  ; SUBVAR
235   (GETVALUE&PUSH 17)                  ; SUBVAL
237   (GETVALUE&PUSH 12)                  ; OVARLIST
239   (CALLS2&PUSH 72)                    ; REVERSE
241   (CALL 3 35)                         ; FIXVL0
244   (GETVALUE 21)                       ; ALGFAC*
246   (JMPIFNOT L256)
248   (GETVALUE 22)                       ; ALPHA
250   (CAR&PUSH)
251   (GETVALUE 20)                       ; GENVAR
253   (CONS)
254   (SETVALUE 20)                       ; GENVAR
256   L256
256   (LOAD&PUSH 61)
258   (GETVALUE&PUSH 13)                  ; P
260   (CALL2 36)                          ; CPBER3
262   (STORE 61)
264   (LOAD 31)
266   (SETVALUE 20)                       ; GENVAR
268   (LOAD 61)
270   (UNBIND 7)
272   (SKIP 1)
274   (UNBIND 3)
276   (SKIP 1)
278   (UNBIND 3)
280   (SKIP 1)
282   (UNBIND 6)
284   (SKIP&RET 2)
286   L286
286   (GETVALUE 22)                       ; ALPHA
288   (CAR&PUSH)
289   (GETVALUE&PUSH 6)                   ; ELM
291   (CALL2 23)                          ; ZL-DELETE
293   (JMP L83)
296   L296
296   (NIL&PUSH)
297   (CONST&PUSH 26)                     ; 1
298   (GETVALUE 17)                       ; SUBVAL
300   (CAR&PUSH)
301   (CALL 3 28)                         ; DEGVECTOR
304   (JMP L166)
307   L307
307   (GETVALUE 12)                       ; OVARLIST
309   (SETVALUE 15)                       ; SUBVAR1
311   (PUSH)
312   (CALLS2&PUSH 71)                    ; LENGTH
314   (NIL&PUSH)
315   (CALL2&PUSH 30)                     ; NZEROS
317   (GETVALUE&PUSH 15)                  ; SUBVAR1
319   (CALL2 31)                          ; POLYSUBST
321   (SETVALUE 16)                       ; SUBVAL1
323   (JMP L222)


Disassembly of function #:|(DEFUN POLYSUBST (A B) ...)-83|
(CONST 0) = POLYSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLYSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLYSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLYSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLYSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLYSUBST
8     (SKIP&RET 1)


Disassembly of function POLYSUBST
(CONST 0) = B
(CONST 1) = *INL3
(CONST 2) = MODULUS
(CONST 3) = MODULU*
(CONST 4) = P
(CONST 5) = PCSUBSTY
(CONST 6) = 0
(CONST 7) = PMOD
(CONST 8) = SQFRP
(CONST 9) = INCREASELIST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B P MODULU*)
writes special variables : (P *INL3 MODULUS)
56 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; *INL3
7     (PUSH-NIL 2)
9     (NIL)
10    (BIND 2)                            ; MODULUS
12    (GETVALUE 3)                        ; MODULU*
14    (JMPIFNOT L18)
16    (SETVALUE 2)                        ; MODULUS
18    L18
18    (T)
19    (SETVALUE 1)                        ; *INL3
21    (GETVALUE 4)                        ; P
23    (CDR)
24    (CDR)
25    (CAR)
26    (STORE 8)
28    (LOAD&PUSH 14)
29    (CALLS2&STORE 71 3)                 ; LENGTH
32    (JMP L40)
34    L34
34    (LOAD&PUSH 14)
35    (LOAD&PUSH 4)
36    (CALL2 9)                           ; INCREASELIST
38    (STORE 14)
40    L40
40    (LOAD&PUSH 14)
41    (GETVALUE&PUSH 0)                   ; B
43    (LOAD&PUSH 10)
44    (CALL 3 5)                          ; PCSUBSTY
47    (STORE 4)
48    (PUSH)
49    (JMPIFEQTO 6 L34)                   ; 0
52    (NIL)
53    (BIND 2)                            ; MODULUS
55    (LOAD&PUSH 17)
56    (GETVALUE&PUSH 0)                   ; B
58    (GETVALUE&PUSH 4)                   ; P
60    (CALL 3 5)                          ; PCSUBSTY
63    (STORE 7)
64    (UNBIND1)
65    (PUSH)
66    (CALL1&PUSH 7)                      ; PMOD
68    (LOAD&CAR&PUSH 5)
70    (CALL2&JMPIFNOT 8 L34)              ; SQFRP
73    (LOAD 4)
74    (SETVALUE 4)                        ; P
76    (LOAD 14)
77    (UNBIND1)
78    (SKIP 2)
80    (UNBIND1)
81    (SKIP 1)
83    (UNBIND1)
84    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL P))-84|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN ZEROSHARP (L) ...)-85|
(CONST 0) = ZEROSHARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZEROSHARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZEROSHARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZEROSHARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZEROSHARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZEROSHARP
8     (SKIP&RET 1)


Disassembly of function ZEROSHARP
(CONST 0) = L
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&PUSH 1)                      ; 0
4     (GETVALUE 0)                        ; L
6     (BIND 0)                            ; L
8     (GETVALUE 0)                        ; L
10    (JMPIFNOT L29)
12    L12
12    (GETVALUE 0)                        ; L
14    (CAR&PUSH)
15    (CALLS2&JMPIFNOT 145 L20)           ; ZEROP
18    (LOAD&INC&STORE 3)
20    L20
20    (GETVALUE 0)                        ; L
22    (CDR)
23    (SETVALUE 0)                        ; L
25    (GETVALUE 0)                        ; L
27    (JMPIF L12)
29    L29
29    (LOAD 3)
30    (UNBIND1)
31    (SKIP 1)
33    (UNBIND1)
34    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FIXVL1 (L R) ...)-86|
(CONST 0) = FIXVL1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXVL1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXVL1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXVL1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXVL1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXVL1
8     (SKIP&RET 1)


Disassembly of function FIXVL1
(CONST 0) = L
(CONST 1) = SUBVAL1
(CONST 2) = SUBVAR1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SUBVAR1 SUBVAL1 L)
writes special variables : (L SUBVAR1 SUBVAL1)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L39)
7     L7
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (CALLS2&JMPIFNOT 145 L28)           ; ZEROP
13    (GETVALUE 0)                        ; L
15    (CAR&PUSH)
16    (GETVALUE 1)                        ; SUBVAL1
18    (CONS)
19    (SETVALUE 1)                        ; SUBVAL1
21    (LOAD&CAR&PUSH 4)
23    (GETVALUE 2)                        ; SUBVAR1
25    (CONS)
26    (SETVALUE 2)                        ; SUBVAR1
28    L28
28    (GETVALUE 0)                        ; L
30    (CDR)
31    (SETVALUE 0)                        ; L
33    (LOAD&CDR&STORE 4)
35    (GETVALUE 0)                        ; L
37    (JMPIF L7)
39    L39
39    (GETVALUE&PUSH 1)                   ; SUBVAL1
41    (CALLS2 73)                         ; NREVERSE
43    (SETVALUE 1)                        ; SUBVAL1
45    (GETVALUE&PUSH 2)                   ; SUBVAR1
47    (CALLS2 73)                         ; NREVERSE
49    (SETVALUE 2)                        ; SUBVAR1
51    (NIL)
52    (UNBIND1)
53    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FIXVL (L R) ...)-87|
(CONST 0) = FIXVL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXVL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXVL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXVL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXVL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXVL
8     (SKIP&RET 1)


Disassembly of function FIXVL
(CONST 0) = L
(CONST 1) = SUBVAL
(CONST 2) = SUBVAR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SUBVAR SUBVAL L)
writes special variables : (L SUBVAR SUBVAL)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L39)
7     L7
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (CALLS2&JMPIF 145 L28)              ; ZEROP
13    (GETVALUE 0)                        ; L
15    (CAR&PUSH)
16    (GETVALUE 1)                        ; SUBVAL
18    (CONS)
19    (SETVALUE 1)                        ; SUBVAL
21    (LOAD&CAR&PUSH 4)
23    (GETVALUE 2)                        ; SUBVAR
25    (CONS)
26    (SETVALUE 2)                        ; SUBVAR
28    L28
28    (GETVALUE 0)                        ; L
30    (CDR)
31    (SETVALUE 0)                        ; L
33    (LOAD&CDR&STORE 4)
35    (GETVALUE 0)                        ; L
37    (JMPIF L7)
39    L39
39    (GETVALUE&PUSH 1)                   ; SUBVAL
41    (CALLS2 73)                         ; NREVERSE
43    (SETVALUE 1)                        ; SUBVAL
45    (GETVALUE&PUSH 2)                   ; SUBVAR
47    (CALLS2 73)                         ; NREVERSE
49    (SETVALUE 2)                        ; SUBVAR
51    (NIL)
52    (UNBIND1)
53    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LOGN (ARG N) ...)-88|
(CONST 0) = LOGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOGN
8     (SKIP&RET 1)


Disassembly of function LOGN
(CONST 0) = QUOT
(CONST 1) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     L0
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALLSR&JMPIF 1 48 L9)              ; >
6     (CONST 1)                           ; 0
7     (SKIP&RET 3)
9     L9
9     (LOAD&PUSH 2)
10    (LOAD&PUSH 2)
11    (CALL2&PUSH 0)                      ; QUOT
13    (LOAD&PUSH 2)
14    (JSR&PUSH L0)
16    (CALLS2 150)                        ; 1+
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MAXCOEF (P) ...)-89|
(CONST 0) = MAXCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXCOEF
8     (SKIP&RET 1)


Disassembly of function MAXCOEF
(CONST 0) = P
(CONST 1) = MAXCOEFFICIENT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
6 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALL1 1)                           ; MAXCOEFFICIENT
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFUN INCRLIMK (P) ...)-90|
(CONST 0) = INCRLIMK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INCRLIMK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INCRLIMK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INCRLIMK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INCRLIMK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INCRLIMK
8     (SKIP&RET 1)


Disassembly of function INCRLIMK
(CONST 0) = P
(CONST 1) = MODULU*
(CONST 2) = PLIM
(CONST 3) = *PRIME
(CONST 4) = -1
(CONST 5) = LIMK
(CONST 6) = *ALPHA
(CONST 7) = PDEGREEVECTOR
(CONST 8) = *
(CONST 9) = VALIST
(CONST 10) = B
(CONST 11) = 0
(CONST 12) = 1
(CONST 13) = (%BINOCOEF)
(CONST 14) = 2
(CONST 15) = QUOT
(CONST 16) = SIMPBINOCOEF
(CONST 17) = MAXCOEF
(CONST 18) = LOGN
(CONST 19) = LOGTWO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PLIM B VALIST P *ALPHA LIMK MODULU*)
writes special variables : (LIMK *PRIME PLIM)
111 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (GETVALUE 1)                        ; MODULU*
6     (JMPIF L27)
8     (GETVALUE 5)                        ; LIMK
10    (JMPIF L36)
12    (GETVALUE 6)                        ; *ALPHA
14    (SETVALUE 2)                        ; PLIM
16    (SETVALUE 3)                        ; *PRIME
18    (CONST 4)                           ; -1
19    (SETVALUE 5)                        ; LIMK
21    L21
21    (NIL)
22    (SKIP 1)
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (SETVALUE 2)                        ; PLIM
29    (SETVALUE 3)                        ; *PRIME
31    (CONST 4)                           ; -1
32    (SETVALUE 5)                        ; LIMK
34    (JMP L21)
36    L36
36    (GETVALUE&PUSH 0)                   ; P
38    (CALL1&PUSH 7)                      ; PDEGREEVECTOR
40    (CALLS2 72)                         ; REVERSE
42    (CDR&PUSH)
43    (CALLS2&STORE 73 0)                 ; NREVERSE
46    (CONST&PUSH 8)                      ; *
47    (NIL&PUSH)
48    (LOAD&PUSH 2)
49    (GETVALUE&PUSH 9)                   ; VALIST
51    (JMP L113)
53    L53
53    (SKIP 2)
55    (JMP L125)
58    L58
58    (CONST 12)                          ; 1
59    (JMP L103)
61    L61
61    (LOAD&CAR&PUSH 1)
63    (LOAD 0)
64    (BIND 10)                           ; B
66    (GETVALUE&PUSH 10)                  ; B
68    (JMPIFEQTO 11 L58)                  ; 0
71    (CONST&PUSH 13)                     ; (%BINOCOEF)
72    (LOAD&PUSH 5)
73    (LOAD&PUSH 6)
74    (CONST&PUSH 14)                     ; 2
75    (CALL2&PUSH 15)                     ; QUOT
77    (LIST&PUSH 3)
79    (CONST&PUSH 12)                     ; 1
80    (T&PUSH)
81    (CALL&PUSH 3 16)                    ; SIMPBINOCOEF
84    (GETVALUE&PUSH 10)                  ; B
86    (LOAD&PUSH 6)
87    (CONST&PUSH 14)                     ; 2
88    (CALL2&PUSH 15)                     ; QUOT
90    (CALLS2&PUSH 154)                   ; EXPT
92    (CALLSR&PUSH 2 55)                  ; *
95    (GETVALUE&PUSH 10)                  ; B
97    (LOAD&PUSH 6)
98    (CALLS2&PUSH 154)                   ; EXPT
100   (CALLSR 1 51)                       ; MAX
103   L103
103   (UNBIND1)
104   (PUSH)
105   (LOAD&CONS&STORE 4)
107   (SKIP 2)
109   (LOAD&CDR&STORE 1)
111   (LOAD&CDR&STORE 0)
113   L113
113   (LOAD&PUSH 1)
114   (CALLS1&JMPIF 146 L53)              ; ENDP
117   (LOAD&CAR&PUSH 1)
119   (LOAD&PUSH 1)
120   (CALLS1&JMPIFNOT 146 L61)           ; ENDP
123   (SKIP 3)
125   L125
125   (LOAD&PUSH 0)
126   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
128   (SKIP 1)
130   (APPLY 0)
132   (STORE 0)
133   (CONST&PUSH 11)                     ; 0
134   (GETVALUE&PUSH 0)                   ; P
136   (CALL1&PUSH 17)                     ; MAXCOEF
138   (GETVALUE&PUSH 2)                   ; PLIM
140   (CALLSR&PUSH 1 51)                  ; MAX
143   (LOAD&PUSH 2)
144   (CALLSR&PUSH 2 55)                  ; *
147   (GETVALUE&PUSH 2)                   ; PLIM
149   (CALL2&PUSH 18)                     ; LOGN
151   (CALL1&PUSH 19)                     ; LOGTWO
153   (CALLS2&PUSH 151)                   ; 1-
155   (CALLSR&STORE 1 51 0)               ; MAX
159   (GETVALUE&PUSH 5)                   ; LIMK
161   (LOAD&PUSH 1)
162   (CALLSR 2 53)                       ; +
165   (SETVALUE 5)                        ; LIMK
167   L167
167   (LOAD&PUSH 0)
168   (CONST&PUSH 12)                     ; 1
169   (CALLSR&JMPIF 1 47 L21)             ; <
174   (LOAD&DEC&STORE 0)
176   (GETVALUE&PUSH 2)                   ; PLIM
178   (GETVALUE&PUSH 2)                   ; PLIM
180   (CALLSR 2 55)                       ; *
183   (SETVALUE 2)                        ; PLIM
185   (JMP L167)


Disassembly of function #:|(DEFUN INCREASELIST (L N) ...)-91|
(CONST 0) = INCREASELIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INCREASELIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INCREASELIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INCREASELIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INCREASELIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INCREASELIST
8     (SKIP&RET 1)


Disassembly of function INCREASELIST
(CONST 0) = L
(CONST 1) = *INL3
(CONST 2) = INLIST3
(CONST 3) = ELM
(CONST 4) = 2
(CONST 5) = MODULU*
(CONST 6) = "Not enough choices for substitution."
(CONST 7) = MERROR
(CONST 8) = 13
(CONST 9) = RAND
(CONST 10) = NE
(CONST 11) = 1
(CONST 12) = BASELIST
(CONST 13) = LISTELM
(CONST 14) = COMPLETEVECTOR
(CONST 15) = *I*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODULU* L LISTELM *I* NE ELM *INL3)
writes special variables : (*I* ELM L NE)
65 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 1)                        ; *INL3
5     (JMPIF L47)
7     (GETVALUE 1)                        ; *INL3
9     (JMPIF L57)
11    L11
11    (GETVALUE&PUSH 3)                   ; ELM
13    (JMPIFEQTO 4 L66)                   ; 2
16    (GETVALUE&PUSH 10)                  ; NE
18    (LOAD&PUSH 5)
19    (CALLS2&JMPIF 2 L76)                ; EQUAL
22    (GETVALUE&PUSH 15)                  ; *I*
24    (LOAD&PUSH 5)
25    (CALLS2&JMPIFNOT 2 L85)             ; EQUAL
28    (GETVALUE&PUSH 10)                  ; NE
30    (CALLS2 150)                        ; 1+
32    L32
32    (SETVALUE 10)                       ; NE
34    (PUSH)
35    (CALL1&PUSH 12)                     ; BASELIST
37    (GETVALUE&PUSH 10)                  ; NE
39    (LOAD&PUSH 6)
40    (GETVALUE&PUSH 13)                  ; LISTELM
42    (CALL 4 14)                         ; COMPLETEVECTOR
45    (JMP L101)
47    L47
47    (GETVALUE&PUSH 0)                   ; L
49    (CALL1 2)                           ; INLIST3
51    (SETVALUE 0)                        ; L
53    (GETVALUE 1)                        ; *INL3
55    (JMPIFNOT L11)
57    L57
57    (GETVALUE 0)                        ; L
59    (JMP L101)
61    L61
61    (CONST&PUSH 6)                      ; "Not enough choices for substitution."
62    (CALL1 7)                           ; MERROR
64    (JMP L101)
66    L66
66    (GETVALUE 5)                        ; MODULU*
68    (JMPIF L61)
70    (LOAD&PUSH 4)
71    (CONST&PUSH 8)                      ; 13
72    (CALL2 9)                           ; RAND
74    (JMP L101)
76    L76
76    (GETVALUE&PUSH 3)                   ; ELM
78    (CALLS2 150)                        ; 1+
80    (SETVALUE 3)                        ; ELM
82    (CONST 11)                          ; 1
83    (JMP L32)
85    L85
85    (GETVALUE&PUSH 15)                  ; *I*
87    (CALLS2 150)                        ; 1+
89    (SETVALUE 15)                       ; *I*
91    (GETVALUE&PUSH 13)                  ; LISTELM
93    (GETVALUE 0)                        ; L
95    (CONS&PUSH)
96    (CALLS2 72)                         ; REVERSE
98    (CDR&PUSH)
99    (CALLS2 72)                         ; REVERSE
101   L101
101   (UNBIND1)
102   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RAND (N MODULUS) ...)-92|
(CONST 0) = RAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAND
8     (SKIP&RET 1)


Disassembly of function RAND
(CONST 0) = MODULUS
(CONST 1) = L
(CONST 2) = 0
(CONST 3) = 1000
(CONST 4) = CMOD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODULUS L)
writes special variable : (L)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; MODULUS
3     (LOAD&PUSH 5)
4     (NIL)
5     (BIND 1)                            ; L
7     (JMP L30)
9     L9
9     (CONST&SYMBOL-FUNCTION&PUSH 4)      ; CMOD
11    (GETVALUE&PUSH 1)                   ; L
13    (CALLSR 0 22)                       ; MAPCAR
16    (JMP L42)
18    L18
18    (CONST&PUSH 3)                      ; 1000
19    (PUSH-UNBOUND 1)
21    (CALLS2&PUSH 220)                   ; RANDOM
23    (GETVALUE 1)                        ; L
25    (CONS)
26    (SETVALUE 1)                        ; L
28    (LOAD&DEC&STORE 3)
30    L30
30    (LOAD&PUSH 3)
31    (CONST&PUSH 2)                      ; 0
32    (CALLSR&JMPIFNOT 1 45 L18)          ; =
36    (GETVALUE 0)                        ; MODULUS
38    (JMPIF L9)
40    (GETVALUE 1)                        ; L
42    L42
42    (UNBIND1)
43    (SKIP 1)
45    (UNBIND1)
46    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TRUFAC (V LP OLFACT ...) ...)-93|
(CONST 0) = TRUFAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRUFAC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRUFAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRUFAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRUFAC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRUFAC
8     (SKIP&RET 1)


Disassembly of function TRUFAC
(CONST 0) = MANY*
(CONST 1) = MODULUS
(CONST 2) = HMODULUS
(CONST 3) = 1
(CONST 4) = SETQMODULUS
(CONST 5) = 4
(CONST 6) = PLIM
(CONST 7) = PTIMES
(CONST 8) = NPROD
(CONST 9) = MODULU*
(CONST 10) = TESTDIVIDE
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODULU* PLIM MODULUS)
118 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; MANY*
3     (LOAD 4)
4     (BIND 1)                            ; MODULUS
6     (PUSH-NIL 7)
8     (NIL)
9     (BIND 2)                            ; HMODULUS
11    (CONST 3)                           ; 1
12    (STORE 7)
13    (STORE 8)
15    (GETVALUE&PUSH 1)                   ; MODULUS
17    (CALL1 4)                           ; SETQMODULUS
19    (NIL&PUSH)
20    (LOAD&CONS&STORE 19)
22    (STORE 3)
23    (JMP L136)
26    L26
26    (LOAD 4)
27    (STORE 9)
29    (JMP L166)
32    L32
32    (LOAD&PUSH 21)
33    (LOAD 5)
34    (CONS)
35    (STORE 9)
37    (JMP L166)
40    L40
40    (LOAD&PUSH 19)
41    (CALLS2&PUSH 71)                    ; LENGTH
43    (CONST&PUSH 5)                      ; 4
44    (CALLSR&JMPIF 1 47 L32)             ; <
48    (LOAD&PUSH 4)
49    (LOAD&PUSH 8)
50    (LOAD&PUSH 23)
51    (GETVALUE 6)                        ; PLIM
53    (BIND 1)                            ; MODULUS
55    (LOAD&PUSH 14)
56    (LOAD 26)
58    (CDR)
59    (CAR&PUSH)
60    (CALL2 7)                           ; PTIMES
62    (UNBIND1)
63    (PUSH)
64    (LOAD 23)
66    (CDR)
67    (CDR)
68    (CONS&PUSH)
69    (CALL&PUSH 3 8)                     ; NPROD
72    (CALLSR&STORE 2 35 9)               ; NCONC
76    (JMP L166)
79    L79
79    (LOAD&PUSH 6)
80    (LOAD&CONS&STORE 4)
82    (LOAD&PUSH 7)
83    (LOAD 7)
84    (CDR)
85    (CDR)
86    (CAR&PUSH)
87    (CALL2 7)                           ; PTIMES
89    (STORE 7)
90    (LOAD 5)
91    (STORE 21)
93    (GETVALUE 6)                        ; PLIM
95    (BIND 1)                            ; MODULUS
97    (LOAD 6)
98    (CDR)
99    (CAR)
100   (CDR)
101   (CDR)
102   (CAR&PUSH)
103   (LOAD&PUSH 12)
104   (CALL2 7)                           ; PTIMES
106   (STORE 11)
108   (UNBIND1)
109   (LOAD&PUSH 3)
110   (LOAD 4)
111   (CDR)
112   (CDR&PUSH)
113   (CALLS1 170)                        ; RPLACD
115   (JMP L134)
117   L117
117   (LOAD&CAR&STORE 20 6)
120   (GETVALUE 9)                        ; MODULU*
122   (BIND 1)                            ; MODULUS
124   (LOAD&PUSH 24)
125   (LOAD&PUSH 10)
126   (CALL2 10)                          ; TESTDIVIDE
128   (UNBIND1)
129   (STORE 5)
130   (JMPIF L79)
132   (LOAD&CDR&STORE 3)
134   L134
134   (LOAD&CDR&STORE 20)
136   L136
136   (LOAD&PUSH 21)
137   (JMPIFEQTO 3 L26)                   ; 1
141   (LOAD&JMPIFNOT 20 L40)
145   (LOAD 20)
147   (CDR)
148   (JMPIF L117)
150   (LOAD 19)
152   (CDR)
153   (JMPIFNOT L161)
155   (LOAD 19)
157   (CDR)
158   (CDR)
159   (JMPIF L117)
161   L161
161   (LOAD&PUSH 21)
162   (LOAD 5)
163   (CONS)
164   (STORE 9)
166   L166
166   (LOAD 9)
167   (UNBIND1)
168   (SKIP 7)
170   (UNBIND 2)
172   (SKIP&RET 6)


Disassembly of function #:|(DEFUN MULTIDEG (P) ...)-94|
(CONST 0) = MULTIDEG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULTIDEG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULTIDEG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULTIDEG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULTIDEG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULTIDEG
8     (SKIP&RET 1)


Disassembly of function MULTIDEG
(CONST 0) = P
(CONST 1) = 0
(CONST 2) = ONEVARP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
writes special variable : (P)
47 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (PUSH-NIL 2)
5     (GETVALUE&PUSH 0)                   ; P
7     (CALLS2&JMPIF 8 L23)                ; NUMBERP
10    (GETVALUE&PUSH 0)                   ; P
12    (CALL1&JMPIF 2 L28)                 ; ONEVARP
15    (GETVALUE 0)                        ; P
17    (CDR)
18    (SETVALUE 0)                        ; P
20    (CAR)
21    (JMP L60)
23    L23
23    (CONST 1)                           ; 0
24    (SKIP 2)
26    (JMP L68)
28    L28
28    (GETVALUE 0)                        ; P
30    (CDR)
31    (CAR)
32    (SKIP 2)
34    (JMP L68)
36    L36
36    (GETVALUE 0)                        ; P
38    (CAR&PUSH)
39    (GETVALUE 0)                        ; P
41    (CDR)
42    (CAR&PUSH)
43    (JSR&PUSH L0)
45    (CALLSR&STORE 2 53 0)               ; +
49    (GETVALUE 0)                        ; P
51    (CDR)
52    (CDR)
53    (SETVALUE 0)                        ; P
55    (LOAD&PUSH 0)
56    (LOAD&PUSH 2)
57    (CALLSR 1 51)                       ; MAX
60    L60
60    (STORE 1)
61    (GETVALUE 0)                        ; P
63    (JMPIF L36)
65    (LOAD 1)
66    (SKIP 2)
68    L68
68    (UNBIND1)
69    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ODDELM (L) ...)-95|
(CONST 0) = ODDELM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ODDELM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ODDELM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ODDELM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ODDELM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ODDELM
8     (SKIP&RET 1)


Disassembly of function ODDELM
(CONST 0) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; L
6     (JMPIF L26)
8     L8
8     (LOAD 0)
9     (JMP L36)
11    L11
11    (GETVALUE 0)                        ; L
13    (CAR&PUSH)
14    (LOAD&CONS&STORE 0)
16    (GETVALUE 0)                        ; L
18    (CDR)
19    (CDR)
20    (SETVALUE 0)                        ; L
22    (GETVALUE 0)                        ; L
24    (JMPIFNOT L8)
26    L26
26    (GETVALUE 0)                        ; L
28    (CDR)
29    (JMPIF L11)
31    (GETVALUE 0)                        ; L
33    (CAR&PUSH)
34    (LOAD 1)
35    (CONS)
36    L36
36    (PUSH)
37    (CALLS2 73)                         ; NREVERSE
39    (SKIP 1)
41    (UNBIND1)
42    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CPBER3 (V U) ...)-96|
(CONST 0) = CPBER3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPBER3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPBER3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPBER3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPBER3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPBER3
8     (SKIP&RET 1)


Disassembly of function CPBER3
(CONST 0) = ALCINV
(CONST 1) = PLIM
(CONST 2) = MONIC*
(CONST 3) = SHARPCONT
(CONST 4) = LIMK
(CONST 5) = VAR
(CONST 6) = ALGFAC*
(CONST 7) = ALC
(CONST 8) = RAINV
(CONST 9) = PTIMES
(CONST 10) = ADN*
(CONST 11) = OLDCONTENT
(CONST 12) = 1
(CONST 13) = FACT5
(CONST 14) = *STOP*
(CONST 15) = SUBVAL
(CONST 16) = PCTIMES
(CONST 17) = INCRLIMK
(CONST 18) = MODULUS
(CONST 19) = NEWREP
(CONST 20) = ZFACT
(CONST 21) = RESTORELC
(CONST 22) = CRECIP
(CONST 23) = MODULU*
(CONST 24) = TRUFAC
(CONST 25) = OLDREP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SUBVAL MODULU* MONIC* LIMK SHARPCONT PLIM *STOP* ADN* ALCINV ALC ALGFAC*)
writes special variables : (*STOP* MODULUS MONIC* SHARPCONT ADN* ALCINV ALC VAR)
184 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; ALCINV
4     (NIL&PUSH)
5     (NIL)
6     (BIND 1)                            ; PLIM
8     (NIL)
9     (BIND 2)                            ; MONIC*
11    (NIL)
12    (BIND 3)                            ; SHARPCONT
14    (NIL)
15    (BIND 4)                            ; LIMK
17    (NIL)
18    (BIND 5)                            ; VAR
20    (NIL&PUSH)
21    (LOAD 22)
23    (CAR)
24    (SETVALUE 5)                        ; VAR
26    (GETVALUE 6)                        ; ALGFAC*
28    (JMPIFNOT L74)
30    (LOAD 22)
32    (CDR)
33    (CDR)
34    (CAR)
35    (JMPIFATOM L74)
37    (LOAD 22)
39    (CDR)
40    (CDR)
41    (CAR)
42    (SETVALUE 7)                        ; ALC
44    (LOAD&PUSH 22)
45    (GETVALUE&PUSH 7)                   ; ALC
47    (CALL1 8)                           ; RAINV
49    (SETVALUE 0)                        ; ALCINV
51    (CAR&PUSH)
52    (CALL2 9)                           ; PTIMES
54    (STORE 22)
56    (LOAD&PUSH 23)
57    (GETVALUE 0)                        ; ALCINV
59    (CAR&PUSH)
60    (CALL2 9)                           ; PTIMES
62    (STORE 23)
64    (GETVALUE&PUSH 10)                  ; ADN*
66    (GETVALUE 0)                        ; ALCINV
68    (CDR&PUSH)
69    (CALLSR 2 55)                       ; *
72    (SETVALUE 10)                       ; ADN*
74    L74
74    (LOAD&PUSH 22)
75    (CALL1 11)                          ; OLDCONTENT
77    (STORE 22)
79    (CAR)
80    (SETVALUE 3)                        ; SHARPCONT
82    (LOAD 22)
84    (CDR)
85    (CAR)
86    (STORE 22)
88    (LOAD 23)
90    (CDR)
91    (CDR)
92    (CAR)
93    (STORE 16)
95    (PUSH)
96    (JMPIFNOTEQTO 12 L102)              ; 1
99    (T)
100   (SETVALUE 2)                        ; MONIC*
102   L102
102   (LOAD&PUSH 22)
103   (CALL1 13)                          ; FACT5
105   (STORE 20)
107   (GETVALUE 14)                       ; *STOP*
109   (JMPIF L259)
112   (NIL&STORE 22)
114   (LOAD 20)
116   (CDR)
117   (JMPIFNOT L271)
120   (GETVALUE 6)                        ; ALGFAC*
122   (JMPIFNOT L143)
124   (GETVALUE&PUSH 10)                  ; ADN*
126   (JMPIFEQTO 12 L143)                 ; 1
129   (GETVALUE&PUSH 10)                  ; ADN*
131   (LOAD&PUSH 24)
132   (CALL2 16)                          ; PCTIMES
134   (STORE 23)
136   (GETVALUE&PUSH 10)                  ; ADN*
138   (LOAD&PUSH 17)
139   (CALL2 16)                          ; PCTIMES
141   (STORE 16)
143   L143
143   (LOAD&PUSH 23)
144   (CALL1 17)                          ; INCRLIMK
146   (GETVALUE 1)                        ; PLIM
148   (SETVALUE 18)                       ; MODULUS
150   (LOAD 23)
152   (STORE 22)
154   (PUSH)
155   (CALL1 19)                          ; NEWREP
157   (STORE 23)
159   (LOAD&CAR&PUSH 20)
161   (CALLS2&JMPIFNOT 8 L174)            ; NUMBERP
164   (GETVALUE&PUSH 3)                   ; SHARPCONT
166   (LOAD&CAR&PUSH 21)
168   (CALL2 9)                           ; PTIMES
170   (SETVALUE 3)                        ; SHARPCONT
172   (LOAD&CDR&STORE 20)
174   L174
174   (GETVALUE&PUSH 3)                   ; SHARPCONT
176   (JMPIFEQTO 12 L191)                 ; 1
179   (GETVALUE&PUSH 3)                   ; SHARPCONT
181   (LOAD&CAR&PUSH 21)
183   (CALL2&PUSH 9)                      ; PTIMES
185   (LOAD 21)
187   (CDR)
188   (CONS)
189   (STORE 20)
191   L191
191   (LOAD&PUSH 23)
192   (LOAD&PUSH 21)
193   (GETVALUE&PUSH 4)                   ; LIMK
195   (T&PUSH)
196   (CALL 4 20)                         ; ZFACT
199   (STORE 0)
200   (GETVALUE 2)                        ; MONIC*
202   (JMPIF L275)
205   (LOAD&PUSH 0)
206   (LOAD&PUSH 17)
207   (CALL1&PUSH 19)                     ; NEWREP
209   (CALL2 21)                          ; RESTORELC
211   L211
211   (STORE 20)
213   (GETVALUE 6)                        ; ALGFAC*
215   (JMPIFNOT L234)
217   (GETVALUE&PUSH 10)                  ; ADN*
219   (JMPIFEQTO 12 L234)                 ; 1
222   (GETVALUE&PUSH 10)                  ; ADN*
224   (CALL1&PUSH 22)                     ; CRECIP
226   (LOAD&PUSH 24)
227   (CALL2 16)                          ; PCTIMES
229   (STORE 23)
231   (CONST 12)                          ; 1
232   (SETVALUE 10)                       ; ADN*
234   L234
234   (LOAD&PUSH 23)
235   (LOAD&PUSH 21)
236   (LOAD&PUSH 2)
237   (CALLS2&PUSH 73)                    ; NREVERSE
239   (T&PUSH)
240   (GETVALUE&PUSH 23)                  ; MODULU*
242   (CALL 5 24)                         ; TRUFAC
245   (STORE 0)
246   (NIL&STORE 20)
248   (LOAD 0)
249   (CDR)
250   (JMPIF L281)
252   (LOAD 22)
254   L254
254   (PUSH)
255   (LIST 1)
257   (JMP L287)
259   L259
259   (GETVALUE 1)                        ; PLIM
261   (SETVALUE 14)                       ; *STOP*
263   (GETVALUE 15)                       ; SUBVAL
265   (CAR&PUSH)
266   (LOAD 21)
268   (CONS)
269   (JMP L287)
271   L271
271   (LOAD 23)
273   (JMP L254)
275   L275
275   (LOAD&PUSH 0)
276   (CALLS2 72)                         ; REVERSE
278   (JMP L211)
281   L281
281   (CONST&SYMBOL-FUNCTION&PUSH 25)     ; OLDREP
283   (LOAD&PUSH 1)
284   (CALLSR 0 22)                       ; MAPCAR
287   L287
287   (SKIP 1)
289   (UNBIND 5)
291   (SKIP 1)
293   (UNBIND1)
294   (SKIP&RET 4)


Disassembly of function #:|(DEFUN NPROD (LC U LFUNCT) ...)-97|
(CONST 0) = NPROD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NPROD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NPROD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NPROD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NPROD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NPROD
8     (SKIP&RET 1)


Disassembly of function NPROD
(CONST 0) = L
(CONST 1) = LF
(CONST 2) = MODULUS
(CONST 3) = HMODULUS
(CONST 4) = 2
(CONST 5) = QUOT
(CONST 6) = REMOV0
(CONST 7) = INDEX*
(CONST 8) = MONIC*
(CONST 9) = #.#'CADDR
(CONST 10) = REMOV3
(CONST 11) = PTIMES
(CONST 12) = #.#'LIST
(CONST 13) = 1
(CONST 14) = ZL-MEMBER
(CONST 15) = ORDE
(CONST 16) = PLIM
(CONST 17) = SETQMODULUS
(CONST 18) = PMOD
(CONST 19) = LCHK
(CONST 20) = MANY*
(CONST 21) = DROPTERMS
(CONST 22) = ALGFAC*
(CONST 23) = INTBS*
(CONST 24) = INTBASEHK
(CONST 25) = TESTDIVIDE
(CONST 26) = OLDCONTENT
(CONST 27) = RATERR
(CONST 28) = RQUOTIENT
(CONST 29) = PQUOTIENT
(CONST 30) = REMOV1
(CONST 31) = REMOV2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (INTBS* ALGFAC* MANY* PLIM L LF MONIC*)
writes special variables : (L LF)
292 byte-code instructions:
0     (PUSH-NIL 18)
2     (NIL)
3     (BIND 0)                            ; L
5     (NIL&PUSH)
6     (NIL)
7     (BIND 1)                            ; LF
9     (NIL)
10    (BIND 2)                            ; MODULUS
12    (NIL)
13    (BIND 3)                            ; HMODULUS
15    (NIL&PUSH)
16    (NIL)
17    (CONS)
18    (STORE 15)
20    (PUSH)
21    (CALLS1&STORE 161 14)               ; COPY-TREE
24    (NIL&PUSH)
25    (LOAD 33)
27    (CONS)
28    (STORE 21)
30    (LOAD 33)
32    (CDR)
33    (CAR&PUSH)
34    (CONST&PUSH 4)                      ; 2
35    (CALL2 5)                           ; QUOT
37    (STORE 28)
39    (LOAD&PUSH 21)
40    (LOAD&PUSH 29)
42    (CALL2 6)                           ; REMOV0
44    (LOAD 21)
46    (CDR)
47    (STORE 32)
49    (PUSH)
50    (CALLS2&STORE 71 26)                ; LENGTH
53    (PUSH)
54    (CALL1 7)                           ; INDEX*
56    (STORE 20)
58    (GETVALUE 8)                        ; MONIC*
60    (JMPIFNOT L305)
63    (LOAD 33)
65    (STORE 29)
67    L67
67    (NIL&PUSH)
68    (CONST&PUSH 12)                     ; #.#'LIST
69    (LOAD&PUSH 22)
70    (CALLSR 0 22)                       ; MAPCAR
73    (CONS)
74    (STORE 22)
76    (CONST 13)                          ; 1
77    (STORE 30)
79    (NIL&PUSH)
80    (LOAD&CONS&STORE 20)
82    (LOAD&PUSH 21)
83    (CALLS1&STORE 158 32)               ; COPY-LIST
86    L86
86    (LOAD&INC&STORE 30)
88    L88
88    (LOAD&PUSH 30)
90    (LOAD&PUSH 29)
92    (CALLSR&JMPIF 1 48 L293)            ; >
97    (LOAD&PUSH 30)
99    (LOAD&DEC&PUSH 27)
101   (CALLSR&JMPIF 1 48 L293)            ; >
106   (LOAD&JMPIFNOT 22 L293)
110   L110
110   (LOAD 22)
112   (CDR)
113   (JMPIFNOT L293)
116   (LOAD 20)
118   (CDR)
119   (STORE 9)
121   (LOAD 32)
123   (CDR)
124   (SETVALUE 1)                        ; LF
126   (LOAD 22)
128   (CDR)
129   (CAR)
130   (STORE 16)
132   (LOAD 21)
134   (CDR)
135   (CAR)
136   (STORE 17)
138   (LOAD&PUSH 22)
139   (LOAD 23)
141   (CDR)
142   (CDR&PUSH)
143   (CALLS1 170)                        ; RPLACD
145   (LOAD&PUSH 21)
146   (LOAD 22)
148   (CDR)
149   (CDR&PUSH)
150   (CALLS1 170)                        ; RPLACD
152   L152
152   (LOAD 9)
153   (CAR)
154   (SETVALUE 0)                        ; L
156   (GETVALUE 1)                        ; LF
158   (CAR)
159   (STORE 13)
161   (LOAD&CDR&STORE 9)
163   (GETVALUE 1)                        ; LF
165   (CDR)
166   (SETVALUE 1)                        ; LF
168   (GETVALUE&PUSH 0)                   ; L
170   (LOAD&PUSH 17)
171   (CALL2&JMPIF 14 L489)               ; ZL-MEMBER
175   (LOAD 13)
176   (CDR)
177   (CAR&PUSH)
178   (LOAD 18)
180   (CDR)
181   (CAR&PUSH)
182   (CALLSR&PUSH 2 53)                  ; +
185   (LOAD&PUSH 29)
187   (CALLSR&JMPIF 1 48 L489)            ; >
192   (GETVALUE&PUSH 0)                   ; L
194   (LOAD&PUSH 17)
195   (CALL2 15)                          ; ORDE
197   (SETVALUE 0)                        ; L
199   (PUSH)
200   (LOAD&PUSH 16)
201   (CALL2&JMPIF 14 L489)               ; ZL-MEMBER
205   (GETVALUE&PUSH 16)                  ; PLIM
207   (CALL1 17)                          ; SETQMODULUS
209   (LOAD&PUSH 13)
210   (CALL1&PUSH 18)                     ; PMOD
212   (LOAD&PUSH 18)
213   (CALL1&PUSH 18)                     ; PMOD
215   (CALL2 11)                          ; PTIMES
217   (STORE 18)
219   (STORE 27)
221   (LOAD&JMPIF 23 L339)
225   (GETVALUE 20)                       ; MANY*
227   (JMPIF L359)
230   L230
230   (GETVALUE 22)                       ; ALGFAC*
232   (JMPIFNOT L244)
234   (GETVALUE&PUSH 23)                  ; INTBS*
236   (JMPIFEQTO 13 L244)                 ; 1
239   (LOAD&PUSH 18)
240   (CALL1 24)                          ; INTBASEHK
242   (STORE 18)
244   L244
244   (NIL&PUSH)
245   (CALL1 17)                          ; SETQMODULUS
247   (LOAD&PUSH 29)
249   (LOAD&PUSH 19)
250   (CALL2 25)                          ; TESTDIVIDE
252   (STORE 19)
254   (JMPIFNOT L458)
257   (LOAD&JMPIF 23 L367)
261   (LOAD 19)
263   (STORE 33)
265   (STORE 29)
267   L267
267   (LOAD&PUSH 18)
268   (LOAD&CONS&STORE 24)
270   (LOAD&PUSH 33)
272   (JMPIFEQTO 13 L414)                 ; 1
276   (LOAD 33)
278   (CDR)
279   (CAR&PUSH)
280   (CONST&PUSH 4)                      ; 2
281   (CALL2 5)                           ; QUOT
283   (STORE 28)
285   (PUSH)
286   (LOAD&PUSH 31)
288   (CALLSR&JMPIFNOT 1 47 L419)         ; <
293   L293
293   (LOAD&PUSH 33)
295   (LOAD 25)
297   (CONS)
298   L298
298   (UNBIND 3)
300   (SKIP 1)
302   (UNBIND1)
303   (SKIP&RET 22)
305   L305
305   (CONST&PUSH 9)                      ; #.#'CADDR
306   (LOAD&PUSH 33)
308   (CALLSR&STORE 0 22 23)              ; MAPCAR
312   (LOAD&PUSH 20)
313   (CALLS1&STORE 158 25)               ; COPY-LIST
316   (LOAD&PUSH 23)
317   (LOAD&PUSH 26)
319   (CALL2 10)                          ; REMOV3
321   (LOAD&PUSH 34)
323   (LOAD 34)
325   (CDR)
326   (CDR)
327   (CAR&PUSH)
328   (LOAD&PUSH 35)
330   (CALL2&PUSH 11)                     ; PTIMES
332   (CALL2 11)                          ; PTIMES
334   (STORE 29)
336   (JMP L67)
339   L339
339   (PUSH)
340   (LOAD&PUSH 26)
342   (GETVALUE&PUSH 0)                   ; L
344   (CALL&PUSH 3 19)                    ; LCHK
347   (CALL1&PUSH 18)                     ; PMOD
349   (LOAD&PUSH 19)
350   (CALL2 11)                          ; PTIMES
352   (STORE 18)
354   (GETVALUE 20)                       ; MANY*
356   (JMPIFNOT L230)
359   L359
359   (LOAD&PUSH 18)
360   (CALL1 21)                          ; DROPTERMS
362   (STORE 18)
364   (JMP L244)
367   L367
367   (LOAD&PUSH 18)
368   (CALL1 26)                          ; OLDCONTENT
370   (STORE 18)
372   (CAR&PUSH)
373   (LOAD&PUSH 20)
374   (CALL2 11)                          ; PTIMES
376   (STORE 29)
378   (LOAD 18)
380   (CDR)
381   (CAR)
382   (STORE 18)
384   (GETVALUE 22)                       ; ALGFAC*
386   (JMPIFNOT L404)
388   (CONST 27)                          ; RATERR
390   (CATCH-OPEN L398)
392   (LOAD&PUSH 36)
394   (LOAD&PUSH 22)
395   (CALL2 28)                          ; RQUOTIENT
397   (CATCH-CLOSE)
398   L398
398   (CAR)
399   (STORE 33)
401   (JMP L267)
404   L404
404   (LOAD&PUSH 33)
406   (LOAD&PUSH 19)
407   (CALL2 29)                          ; PQUOTIENT
409   (STORE 33)
411   (JMP L267)
414   L414
414   (LOAD 24)
416   (JMP L298)
419   L419
419   (GETVALUE&PUSH 0)                   ; L
421   (LOAD&PUSH 23)
422   (LOAD&PUSH 23)
423   (LOAD&PUSH 31)
425   (CALL 4 30)                         ; REMOV1
428   (GETVALUE&PUSH 0)                   ; L
430   (LOAD&PUSH 16)
431   (LOAD&PUSH 16)
432   (LOAD&PUSH 31)
434   (CALL 4 30)                         ; REMOV1
437   (GETVALUE&PUSH 0)                   ; L
439   (LOAD&PUSH 21)
440   (LOAD&PUSH 34)
442   (LOAD&PUSH 31)
444   (CALL 4 31)                         ; REMOV2
447   (LOAD&PUSH 26)
449   (LOAD&PUSH 31)
451   (CALLSR&STORE 1 54 26)              ; -
455   (JMP L88)
458   L458
458   (LOAD&PUSH 15)
459   (GETVALUE&PUSH 0)                   ; L
461   (LIST&PUSH 1)
463   (CALLSR&STORE 2 35 15)              ; NCONC
467   (LOAD&PUSH 14)
468   (LOAD&PUSH 28)
470   (LIST&PUSH 1)
472   (CALLSR&STORE 2 35 14)              ; NCONC
476   (LOAD&JMPIFNOT 9 L493)
479   (JMP L152)
482   L482
482   (LOAD&JMPIFNOT 22 L293)
486   (JMP L110)
489   L489
489   (LOAD&JMPIF 9 L152)
493   L493
493   (LOAD 22)
495   (CDR)
496   (JMPIF L482)
498   (LOAD 15)
500   (STORE 22)
502   (LOAD 14)
503   (STORE 21)
505   (NIL&STORE 15)
507   (STORE 14)
509   (JMP L86)


Disassembly of function #:|(DEFUN REMOV2 (A B C ...) ...)-98|
(CONST 0) = REMOV2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOV2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOV2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOV2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOV2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOV2
8     (SKIP&RET 1)


Disassembly of function REMOV2
(CONST 0) = B
(CONST 1) = ZL-MEMBER
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
writes special variable : (B)
39 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; B
3     (JMP L46)
5     L5
5     (GETVALUE&PUSH 0)                   ; B
7     (GETVALUE 0)                        ; B
9     (CDR)
10    (CDR&PUSH)
11    (CALLS1 170)                        ; RPLACD
13    (LOAD&PUSH 5)
14    (LOAD 6)
15    (CDR)
16    (CDR&PUSH)
17    (CALLS1 170)                        ; RPLACD
19    (JMP L46)
21    L21
21    (GETVALUE 0)                        ; B
23    (CDR)
24    (CAR&PUSH)
25    (LOAD&PUSH 8)
26    (CALL2&JMPIF 1 L5)                  ; ZL-MEMBER
29    (LOAD 5)
30    (CDR)
31    (CAR)
32    (CDR)
33    (CAR&PUSH)
34    (LOAD&PUSH 5)
35    (CALLSR&JMPIF 1 48 L5)              ; >
39    (GETVALUE 0)                        ; B
41    (CDR)
42    (SETVALUE 0)                        ; B
44    (LOAD&CDR&STORE 5)
46    L46
46    (GETVALUE 0)                        ; B
48    (CDR)
49    (JMPIF L21)
51    (NIL)
52    (UNBIND1)
53    (SKIP&RET 5)


Disassembly of function #:|(DEFUN REMOV1 (A LT1 LP1 ...) ...)-99|
(CONST 0) = REMOV1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOV1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOV1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOV1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOV1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOV1
8     (SKIP&RET 1)


Disassembly of function REMOV1
(CONST 0) = INTERSECT
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
35 byte-code instructions:
0     (JMP L37)
2     L2
2     (LOAD&CDR&STORE 3)
4     (LOAD&CDR&STORE 2)
6     (JMP L37)
8     L8
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (CDR)
12    (CAR&PUSH)
13    (LOAD&PUSH 2)
14    (CALLSR&JMPIF 1 48 L25)             ; >
18    (LOAD&PUSH 4)
19    (LOAD 4)
20    (CDR)
21    (CAR&PUSH)
22    (CALL2&JMPIFNOT 0 L2)               ; INTERSECT
25    L25
25    (LOAD&PUSH 3)
26    (LOAD 4)
27    (CDR)
28    (CDR&PUSH)
29    (CALLS1 170)                        ; RPLACD
31    (LOAD&PUSH 2)
32    (LOAD 3)
33    (CDR)
34    (CDR&PUSH)
35    (CALLS1 170)                        ; RPLACD
37    L37
37    (LOAD 3)
38    (CDR)
39    (JMPIF L8)
41    (NIL)
42    (SKIP&RET 5)


Disassembly of function #:|(DEFUN REMOV0 (LF D2) ...)-100|
(CONST 0) = REMOV0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOV0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOV0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOV0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOV0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOV0
8     (SKIP&RET 1)


Disassembly of function REMOV0
(CONST 0) = LF
(CONST 1) = 1
(CONST 2) = PTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LF)
writes special variable : (LF)
51 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; LF
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; LF
6     (STORE 0)
7     (JMP L14)
9     L9
9     (GETVALUE 0)                        ; LF
11    (CDR)
12    (SETVALUE 0)                        ; LF
14    L14
14    (GETVALUE 0)                        ; LF
16    (CDR)
17    (JMPIFNOT L63)
19    (GETVALUE 0)                        ; LF
21    (CDR)
22    (CAR)
23    (CDR)
24    (CAR&PUSH)
25    (LOAD&PUSH 6)
26    (CALLSR&JMPIFNOT 1 48 L9)           ; >
30    (GETVALUE 0)                        ; LF
32    (CDR)
33    (CAR)
34    (CDR)
35    (CDR)
36    (CAR)
37    (STORE 5)
38    (GETVALUE&PUSH 0)                   ; LF
40    (GETVALUE 0)                        ; LF
42    (CDR)
43    (CDR&PUSH)
44    (CALLS1 170)                        ; RPLACD
46    (LOAD&PUSH 5)
47    (JMPIFEQTO 1 L63)                   ; 1
50    (LOAD&PUSH 0)
51    (LOAD&PUSH 6)
52    (LOAD 2)
53    (CDR)
54    (CAR&PUSH)
55    (CALL2&PUSH 2)                      ; PTIMES
57    (LOAD 2)
58    (CDR)
59    (CDR)
60    (CONS&PUSH)
61    (CALLS1 170)                        ; RPLACD
63    L63
63    (NIL)
64    (SKIP 1)
66    (UNBIND1)
67    (SKIP&RET 3)


Disassembly of function #:|(DEFUN REMOV3 (A B) ...)-101|
(CONST 0) = REMOV3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOV3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOV3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOV3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOV3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOV3
8     (SKIP&RET 1)


Disassembly of function REMOV3
(CONST 0) = B
(CONST 1) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
writes special variable : (B)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (JMP L34)
5     L5
5     (LOAD&PUSH 5)
6     (LOAD 6)
7     (CDR)
8     (CDR&PUSH)
9     (CALLS1 170)                        ; RPLACD
11    (GETVALUE&PUSH 0)                   ; B
13    (GETVALUE 0)                        ; B
15    (CDR)
16    (CDR&PUSH)
17    (CALLS1 170)                        ; RPLACD
19    (JMP L34)
21    L21
21    (LOAD 5)
22    (CDR)
23    (CAR&PUSH)
24    (JMPIFEQTO 1 L5)                    ; 1
27    (LOAD&CDR&STORE 5)
29    (GETVALUE 0)                        ; B
31    (CDR)
32    (SETVALUE 0)                        ; B
34    L34
34    (LOAD 5)
35    (CDR)
36    (JMPIF L21)
38    (NIL)
39    (UNBIND1)
40    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LCHK (A B C) ...)-102|
(CONST 0) = LCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LCHK
8     (SKIP&RET 1)


Disassembly of function LCHK
(CONST 0) = B
(CONST 1) = 1
(CONST 2) = ZL-MEMBER
(CONST 3) = PTIMES
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
writes special variable : (B)
25 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (NIL&PUSH)
4     (CONST 1)                           ; 1
5     (STORE 0)
6     (LOAD&JMPIFNOT 7 L32)
9     L9
9     (GETVALUE 0)                        ; B
11    (CAR&PUSH)
12    (LOAD&PUSH 6)
13    (CALL2&JMPIF 2 L22)                 ; ZL-MEMBER
16    (LOAD&PUSH 0)
17    (LOAD&CAR&PUSH 8)
19    (CALL2 3)                           ; PTIMES
21    (STORE 0)
22    L22
22    (LOAD&CDR&STORE 7)
24    (GETVALUE 0)                        ; B
26    (CDR)
27    (SETVALUE 0)                        ; B
29    (LOAD&JMPIF 7 L9)
32    L32
32    (POP)
33    (UNBIND1)
34    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LCPRODL (L) ...)-103|
(CONST 0) = LCPRODL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LCPRODL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LCPRODL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LCPRODL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LCPRODL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LCPRODL
8     (SKIP&RET 1)


Disassembly of function LCPRODL
(CONST 0) = L
(CONST 1) = 1
(CONST 2) = (1)
(CONST 3) = PTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 2)
5     (CONST 1)                           ; 1
6     (STORE 0)
7     (GETVALUE&PUSH 0)                   ; L
9     (CALLS2 72)                         ; REVERSE
11    (SETVALUE 0)                        ; L
13    (CONST 2)                           ; (1)
14    (STORE 1)
15    (JMP L35)
17    L17
17    (LOAD&PUSH 0)
18    (GETVALUE 0)                        ; L
20    (CAR)
21    (CDR)
22    (CDR)
23    (CAR&PUSH)
24    (CALL2 3)                           ; PTIMES
26    (STORE 0)
27    (GETVALUE 0)                        ; L
29    (CDR)
30    (SETVALUE 0)                        ; L
32    (LOAD&PUSH 0)
33    (LOAD&CONS&STORE 1)
35    L35
35    (GETVALUE 0)                        ; L
37    (CDR)
38    (JMPIF L17)
40    (LOAD 1)
41    (SKIP 2)
43    (UNBIND1)
44    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FACT5 (POLY) ...)-104|
(CONST 0) = FACT5
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACT5>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACT5
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACT5
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACT5>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACT5
8     (SKIP&RET 1)


Disassembly of function FACT5
(CONST 0) = TRL*
(CONST 1) = UU*
(CONST 2) = MODULUS
(CONST 3) = MONIC*
(CONST 4) = SPLIT*
(CONST 5) = VAR
(CONST 6) = ANOTYPE
(CONST 7) = FCTC
(CONST 8) = INVC
(CONST 9) = AFIXN
(CONST 10) = FCTCFIXN
(CONST 11) = INVCFIXN
(CONST 12) = ALGFAC*
(CONST 13) = ALC
(CONST 14) = 1
(CONST 15) = RAINV
(CONST 16) = ALCINV
(CONST 17) = RATTIMES
(CONST 18) = ADN*
(CONST 19) = MINPOLY*
(CONST 20) = $NALGFAC
(CONST 21) = (4 1 0 1)
(CONST 22) = SPLITCASE
(CONST 23) = FIXNUM
(CONST 24) = *ARRAY
(CONST 25) = MM*
(CONST 26) = MODULU*
(CONST 27) = FACT5MOD
(CONST 28) = CHOOZP
(CONST 29) = *PRIME
(CONST 30) = ALPHA
(CONST 31) = NALGFAC
(CONST 32) = *ALPHA
(CONST 33) = PLIM
(CONST 34) = -1
(CONST 35) = LIMK
(CONST 36) = CPBGZASS
(CONST 37) = CPBG
(CONST 38) = PMOD
(CONST 39) = PCTIMES
(CONST 40) = KLIM
(CONST 41) = ZFACT
(CONST 42) = RESTORELC
(CONST 43) = TRUFAC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(*ALPHA ALPHA ADN* ALC PLIM LIMK MODULUS UU* MODULU* MM* $NALGFAC MINPOLY*
 ALGFAC*)
writes special variables : 
(PLIM ADN* ALCINV ALC MODULUS LIMK *PRIME AFIXN INVCFIXN FCTCFIXN ANOTYPE INVC
 FCTC MONIC* UU* VAR)
280 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; TRL*
4     (NIL&PUSH)
5     (NIL)
6     (BIND 1)                            ; UU*
8     (PUSH-NIL 4)
10    (NIL)
11    (BIND 2)                            ; MODULUS
13    (NIL)
14    (BIND 3)                            ; MONIC*
16    (NIL)
17    (BIND 4)                            ; SPLIT*
19    (NIL)
20    (BIND 5)                            ; VAR
22    (NIL)
23    (BIND 6)                            ; ANOTYPE
25    (NIL)
26    (BIND 7)                            ; FCTC
28    (NIL)
29    (BIND 8)                            ; INVC
31    (NIL)
32    (BIND 9)                            ; AFIXN
34    (NIL)
35    (BIND 10)                           ; FCTCFIXN
37    (NIL)
38    (BIND 11)                           ; INVCFIXN
40    (LOAD 43)
42    (CAR)
43    (SETVALUE 5)                        ; VAR
45    (LOAD 43)
47    (CDR)
48    (CDR)
49    (CDR)
50    (JMPIFNOT L340)
53    (GETVALUE 12)                       ; ALGFAC*
55    (JMPIFNOT L65)
57    (LOAD 43)
59    (CDR)
60    (CDR)
61    (CAR)
62    (JMPIFCONSP L346)
65    L65
65    (GETVALUE 12)                       ; ALGFAC*
67    (JMPIFNOT L86)
69    L69
69    (GETVALUE 19)                       ; MINPOLY*
71    (JMPIFNOT L86)
73    (GETVALUE 20)                       ; $NALGFAC
75    (JMPIF L390)
78    (GETVALUE 19)                       ; MINPOLY*
80    (CDR&PUSH)
81    (CONST&PUSH 21)                     ; (4 1 0 1)
82    (CALLS2&JMPIF 2 L390)               ; EQUAL
86    L86
86    (LOAD 43)
88    (SETVALUE 1)                        ; UU*
90    (CDR)
91    (CDR)
92    (CAR)
93    (STORE 33)
95    (PUSH)
96    (JMPIFNOTEQTO 14 L102)              ; 1
99    (T)
100   (SETVALUE 3)                        ; MONIC*
102   L102
102   (LOAD 43)
104   (CDR)
105   (CAR)
106   (STORE 32)
108   (GETVALUE 12)                       ; ALGFAC*
110   (JMPIFNOT L397)
113   (NIL&PUSH)
114   (T&PUSH)
115   (LOAD&PUSH 34)
117   (CALL 3 24)                         ; *ARRAY
120   (SETVALUE 7)                        ; FCTC
122   (NIL&PUSH)
123   (T&PUSH)
124   (LOAD&PUSH 34)
126   (CALL 3 24)                         ; *ARRAY
129   (SETVALUE 8)                        ; INVC
131   (NIL&PUSH)
132   (T&PUSH)
133   (LOAD&PUSH 34)
135   (LOAD&PUSH 35)
137   (CALL 4 24)                         ; *ARRAY
140   (SETVALUE 6)                        ; ANOTYPE
142   (NIL&PUSH)
143   (CONST&PUSH 23)                     ; FIXNUM
144   (GETVALUE&PUSH 25)                  ; MM*
146   (CALL 3 24)                         ; *ARRAY
149   (SETVALUE 10)                       ; FCTCFIXN
151   (NIL&PUSH)
152   (CONST&PUSH 23)                     ; FIXNUM
153   (GETVALUE&PUSH 25)                  ; MM*
155   (CALL 3 24)                         ; *ARRAY
158   (SETVALUE 11)                       ; INVCFIXN
160   (NIL&PUSH)
161   (CONST&PUSH 23)                     ; FIXNUM
162   (GETVALUE&PUSH 25)                  ; MM*
164   (GETVALUE 25)                       ; MM*
166   L166
166   (PUSH)
167   (CALL 4 24)                         ; *ARRAY
170   (SETVALUE 9)                        ; AFIXN
172   (GETVALUE 26)                       ; MODULU*
174   (JMPIF L424)
177   (GETVALUE&PUSH 1)                   ; UU*
179   (CALL1 28)                          ; CHOOZP
181   (STORE 41)
183   (JMPIFATOM L201)
185   (LOAD&CAR&STORE 41 37)
188   (LOAD 41)
190   (CDR)
191   (CDR)
192   (CAR)
193   (SETVALUE 1)                        ; UU*
195   (LOAD 41)
197   (CDR)
198   (CAR)
199   (STORE 41)
201   L201
201   (GETVALUE 2)                        ; MODULUS
203   (SETVALUE 29)                       ; *PRIME
205   L205
205   (LOAD&PUSH 41)
207   (JMPIFEQTO 22 L431)                 ; SPLITCASE
211   (LOAD&PUSH 37)
213   (LOAD&PUSH 42)
215   (CALLSR 2 34)                       ; APPEND
218   (CDR)
219   (JMPIFNOT L459)
222   (GETVALUE&PUSH 1)                   ; UU*
224   (JMPIFEQTO 14 L470)                 ; 1
228   (GETVALUE 12)                       ; ALGFAC*
230   (JMPIF L475)
233   (GETVALUE&PUSH 1)                   ; UU*
235   (JMPIFEQTO 14 L251)                 ; 1
238   (LOAD&PUSH 41)
240   (GETVALUE&PUSH 1)                   ; UU*
242   (LOAD&PUSH 43)
244   (CALLS2&PUSH 71)                    ; LENGTH
246   (CALL 3 37)                         ; CPBG
249   (STORE 31)
251   L251
251   (NIL)
252   (SETVALUE 1)                        ; UU*
254   L254
254   (LOAD&PUSH 31)
256   (LOAD&PUSH 38)
258   (CALLSR&STORE 2 35 31)              ; NCONC
262   (NIL&STORE 37)
264   (LOAD&PUSH 33)
266   (CALL1&PUSH 38)                     ; PMOD
268   (LOAD&CAR&PUSH 32)
270   (CALL2&PUSH 39)                     ; PCTIMES
272   (LOAD 32)
274   (CDR)
275   (CONS)
276   (STORE 31)
278   (LOAD&PUSH 43)
280   (GETVALUE&PUSH 2)                   ; MODULUS
282   (CALL2 40)                          ; KLIM
284   (SETVALUE 35)                       ; LIMK
286   (LOAD&PUSH 43)
288   (LOAD&PUSH 32)
290   (GETVALUE&PUSH 35)                  ; LIMK
292   (NIL&PUSH)
293   (CALL 4 41)                         ; ZFACT
296   (STORE 30)
298   (NIL&STORE 31)
300   (LOAD&PUSH 43)
302   (GETVALUE 33)                       ; PLIM
304   (BIND 2)                            ; MODULUS
306   (LOAD&PUSH 34)
308   (LOAD&PUSH 38)
310   (CALL2 42)                          ; RESTORELC
312   (UNBIND1)
313   (PUSH)
314   (LOAD&PUSH 32)
316   (CALLS2&PUSH 73)                    ; NREVERSE
318   (PUSH-NIL 2)
320   (CALL 5 43)                         ; TRUFAC
323   (STORE 43)
325   (NIL)
326   (SETVALUE 2)                        ; MODULUS
328   (LOAD 43)
330   L330
330   (UNBIND 10)
332   (SKIP 4)
334   (UNBIND1)
335   (SKIP 1)
337   (UNBIND1)
338   (SKIP&RET 3)
340   L340
340   (LOAD&PUSH 43)
342   (LIST 1)
344   (JMP L330)
346   L346
346   (LOAD 43)
348   (CDR)
349   (CDR)
350   (CAR)
351   (SETVALUE 13)                       ; ALC
353   (LOAD&PUSH 43)
355   (CONST 14)                          ; 1
356   (CONS&PUSH)
357   (GETVALUE&PUSH 13)                  ; ALC
359   (CALL1 15)                          ; RAINV
361   (SETVALUE 16)                       ; ALCINV
363   (PUSH)
364   (T&PUSH)
365   (CALL 3 17)                         ; RATTIMES
368   (STORE 43)
370   (GETVALUE&PUSH 18)                  ; ADN*
372   (LOAD&CDR&PUSH 44)
374   (CALLSR 2 55)                       ; *
377   (SETVALUE 18)                       ; ADN*
379   (LOAD&CAR&STORE 43 43)
382   (GETVALUE 12)                       ; ALGFAC*
384   (JMPIFNOT L86)
387   (JMP L69)
390   L390
390   (CONST 22)                          ; SPLITCASE
392   (STORE 41)
394   (JMP L205)
397   L397
397   (NIL&PUSH)
398   (CONST&PUSH 23)                     ; FIXNUM
399   (LOAD&PUSH 34)
401   (CALL 3 24)                         ; *ARRAY
404   (SETVALUE 10)                       ; FCTCFIXN
406   (NIL&PUSH)
407   (CONST&PUSH 23)                     ; FIXNUM
408   (LOAD&PUSH 34)
410   (CALL 3 24)                         ; *ARRAY
413   (SETVALUE 11)                       ; INVCFIXN
415   (NIL&PUSH)
416   (CONST&PUSH 23)                     ; FIXNUM
417   (LOAD&PUSH 34)
419   (LOAD 35)
421   (JMP L166)
424   L424
424   (LOAD&PUSH 43)
426   (CALL1 27)                          ; FACT5MOD
428   (JMP L330)
431   L431
431   (LOAD&PUSH 43)
433   (GETVALUE 30)                       ; ALPHA
435   (CAR&PUSH)
436   (GETVALUE 19)                       ; MINPOLY*
438   (CDR)
439   (CONS&PUSH)
440   (CALL2 31)                          ; NALGFAC
442   (STORE 43)
444   (GETVALUE 32)                       ; *ALPHA
446   (SETVALUE 33)                       ; PLIM
448   (SETVALUE 29)                       ; *PRIME
450   (CONST 34)                          ; -1
452   (SETVALUE 35)                       ; LIMK
454   (LOAD 43)
456   (JMP L330)
459   L459
459   (LOAD&PUSH 43)
461   (LIST 1)
463   (STORE 43)
465   (LOAD 43)
467   (JMP L330)
470   L470
470   (NIL&STORE 31)
472   (JMP L254)
475   L475
475   (LOAD&PUSH 41)
477   (GETVALUE&PUSH 1)                   ; UU*
479   (LOAD&PUSH 43)
481   (CALLS2&PUSH 71)                    ; LENGTH
483   (CALL 3 36)                         ; CPBGZASS
486   (STORE 31)
488   (JMP L251)


Disassembly of function #:|(DEFUN FACT5MOD (U) ...)-105|
(CONST 0) = FACT5MOD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACT5MOD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACT5MOD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACT5MOD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACT5MOD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACT5MOD
8     (SKIP&RET 1)


Disassembly of function FACT5MOD
(CONST 0) = MODULU*
(CONST 1) = SETQMODULUS
(CONST 2) = PMOD
(CONST 3) = PMONICIZE
(CONST 4) = CPBERL
(CONST 5) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (MODULU*)
32 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD&PUSH 3)
3     (CALLS1&STORE 158 0)                ; COPY-LIST
6     (GETVALUE&PUSH 0)                   ; MODULU*
8     (CALL1 1)                           ; SETQMODULUS
10    (LOAD&PUSH 0)
11    (CALL1 2)                           ; PMOD
13    (STORE 0)
14    (CDR)
15    (CDR)
16    (CAR)
17    (STORE 1)
18    (LOAD&CDR&PUSH 0)
20    (CALL1 3)                           ; PMONICIZE
22    (LOAD&PUSH 0)
23    (CALL1 4)                           ; CPBERL
25    (STORE 0)
26    (CDR)
27    (JMPIFNOT L38)
29    (LOAD&PUSH 1)
30    (JMPIFEQTO 5 L43)                   ; 1
33    (LOAD&PUSH 1)
34    (LOAD 1)
35    (CONS)
36    (SKIP&RET 4)
38    L38
38    (LOAD&PUSH 3)
39    (LIST 1)
41    (SKIP&RET 4)
43    L43
43    (POP)
44    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CPBG (QLIST V M) ...)-106|
(CONST 0) = CPBG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPBG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPBG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPBG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPBG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPBG
8     (SKIP&RET 1)


Disassembly of function CPBG
(CONST 0) = 0
(CONST 1) = MODULUS
(CONST 2) = 2
(CONST 3) = QUOT
(CONST 4) = 1
(CONST 5) = Y
(CONST 6) = PCDIFCONC
(CONST 7) = PGCDU
(CONST 8) = PMODQUO
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y MODULUS)
writes special variable : (Y)
112 byte-code instructions:
0     (PUSH-NIL 5)
2     (CONST&PUSH 0)                      ; 0
3     (GETVALUE&PUSH 1)                   ; MODULUS
5     (CONST&PUSH 2)                      ; 2
6     (CALL2&PUSH 3)                      ; QUOT
8     (CONST&PUSH 4)                      ; 1
9     (PUSH-NIL 3)
11    (LOAD 10)
12    (BIND 5)                            ; Y
14    (LOAD&PUSH 15)
15    (CONST&PUSH 4)                      ; 1
16    (CALLSR&JMPIF 1 45 L68)             ; =
20    (GETVALUE&PUSH 1)                   ; MODULUS
22    (CONST&PUSH 2)                      ; 2
23    (CALL2 3)                           ; QUOT
25    (STORE 7)
26    (CONST 4)                           ; 1
27    (STORE 6)
28    (LOAD&PUSH 17)
29    (CALLS2 73)                         ; NREVERSE
31    (CDR)
32    (STORE 17)
34    (NIL&PUSH)
35    (LOAD&PUSH 17)
36    (LIST 2)
38    (STORE 3)
39    (NIL&STORE 16)
41    L41
41    (LOAD&CAR&PUSH 17)
43    (CONST&PUSH 0)                      ; 0
44    (CONST&PUSH 0)                      ; 0
45    (LIST&PUSH 2)
47    (CALLSR&STORE 2 35 12)              ; NCONC
51    (LOAD&CDR&STORE 17)
53    (LOAD&PUSH 7)
54    (CALLSR&STORE 0 54 8)               ; -
58    (LOAD&PUSH 3)
59    (LOAD&PUSH 5)
60    (CALLSR&STORE 2 35 3)               ; NCONC
64    (NIL&STORE 4)
66    (JMP L107)
68    L68
68    (LOAD&PUSH 16)
69    (LIST 1)
71    (JMP L168)
74    L74
74    (LOAD&PUSH 10)
75    (LOAD&PUSH 10)
76    (CALL2 8)                           ; PMODQUO
78    (CAR)
79    (SETVALUE 5)                        ; Y
81    (LOAD&PUSH 9)
82    (CALLS1&PUSH 158)                   ; COPY-LIST
84    (LOAD&CONS&STORE 4)
86    (GETVALUE&PUSH 5)                   ; Y
88    (LOAD&CONS&STORE 5)
90    (LOAD&INC&STORE 6)
92    (LOAD&PUSH 11)
93    (LOAD 12)
94    (CDR)
95    (CDR&PUSH)
96    (CALLS1 170)                        ; RPLACD
98    (LOAD&PUSH 6)
99    (LOAD&PUSH 16)
100   (CALLS2&JMPIFNOT 2 L147)            ; EQUAL
103   (JMP L161)
105   L105
105   (LOAD&INC&STORE 8)
107   L107
107   (LOAD&PUSH 3)
108   (LOAD&PUSH 6)
109   (CALLSR&STORE 2 35 11)              ; NCONC
113   (NIL&STORE 5)
115   (LOAD&PUSH 12)
116   (LOAD&PUSH 9)
117   (CALL2 6)                           ; PCDIFCONC
119   L119
119   (LOAD 11)
120   (CDR)
121   (CAR)
122   (STORE 10)
124   (LOAD&PUSH 12)
125   (LOAD&PUSH 11)
126   (CALL2 7)                           ; PGCDU
128   (STORE 9)
130   (PUSH)
131   (CALLS2&JMPIF 8 L145)               ; NUMBERP
134   (LOAD 9)
135   (CDR)
136   (CAR&PUSH)
137   (LOAD 11)
138   (CDR)
139   (CAR&PUSH)
140   (CALLSR&JMPIFNOT 1 45 L74)          ; =
145   L145
145   (LOAD&CDR&STORE 11)
147   L147
147   (LOAD 11)
148   (CDR)
149   (JMPIF L119)
151   (LOAD&PUSH 8)
152   (LOAD&PUSH 8)
153   (CALLSR&JMPIF 1 47 L105)            ; <
157   (LOAD&JMPIF 17 L41)
161   L161
161   (LOAD&PUSH 4)
162   (LOAD&PUSH 6)
163   (LOAD&CDR&PUSH 5)
165   (CALLSR 3 35)                       ; NCONC
168   L168
168   (UNBIND1)
169   (SKIP&RET 15)


Disassembly of function #:|(DEFUN FACT2Z (U F G ...) ...)-107|
(CONST 0) = FACT2Z
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACT2Z>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACT2Z
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACT2Z
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACT2Z>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACT2Z
8     (SKIP&RET 1)


Disassembly of function FACT2Z
(CONST 0) = LIMK
(CONST 1) = B
(CONST 2) = P
(CONST 3) = 0
(CONST 4) = MODULUS
(CONST 5) = PPPROG
(CONST 6) = PTIMES
(CONST 7) = PDIFFERENCE
(CONST 8) = PMOD
(CONST 9) = NPQUO
(CONST 10) = PMODQUO
(CONST 11) = PPLUS
(CONST 12) = NPCTIMES
(CONST 13) = PLIM
(CONST 14) = -1
(CONST 15) = SETQMODULUS
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P PLIM LIMK B MODULUS)
writes special variables : (MODULUS B P)
166 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; LIMK
3     (PUSH-NIL 5)
5     (NIL)
6     (BIND 1)                            ; B
8     (PUSH-NIL 2)
10    (NIL)
11    (BIND 2)                            ; P
13    (PUSH-NIL 3)
15    (CONST&PUSH 3)                      ; 0
16    (NIL&PUSH)
17    (GETVALUE 4)                        ; MODULUS
19    (SETVALUE 2)                        ; P
21    (LOAD&PUSH 24)
22    (LOAD&PUSH 24)
23    (CALL2 5)                           ; PPPROG
25    (STORE 8)
27    (CAR)
28    (STORE 17)
30    (LOAD 8)
31    (CDR)
32    (CAR)
33    (SETVALUE 1)                        ; B
35    (NIL)
36    (BIND 4)                            ; MODULUS
38    (LOAD&PUSH 27)
40    (LOAD&PUSH 27)
42    (CALL2&PUSH 6)                      ; PTIMES
44    (LOAD&PUSH 29)
46    (CALL2 7)                           ; PDIFFERENCE
48    (STORE 11)
50    (UNBIND1)
51    (JMP L120)
54    L54
54    (LOAD&PUSH 17)
55    (LOAD&PUSH 25)
57    (CALL2&PUSH 6)                      ; PTIMES
59    (GETVALUE&PUSH 1)                   ; B
61    (LOAD&PUSH 25)
63    (CALL2&PUSH 6)                      ; PTIMES
65    (CALL2&PUSH 11)                     ; PPLUS
67    (CONST&PUSH 14)                     ; -1
68    (CALL2&PUSH 11)                     ; PPLUS
70    (LOAD&PUSH 15)
71    (CALL2 9)                           ; NPQUO
73    (STORE 2)
74    (LOAD&PUSH 17)
75    (LOAD&PUSH 3)
76    (CALL2&PUSH 6)                      ; PTIMES
78    (LOAD&PUSH 24)
79    (CALL2 10)                          ; PMODQUO
81    (STORE 3)
82    (GETVALUE&PUSH 1)                   ; B
84    (LOAD&PUSH 3)
85    (CALL2&PUSH 6)                      ; PTIMES
87    (LOAD&CAR&PUSH 4)
89    (LOAD&PUSH 26)
91    (CALL2&PUSH 6)                      ; PTIMES
93    (CALL2 11)                          ; PPLUS
95    (STORE 0)
96    (LOAD&PUSH 17)
97    (LOAD&PUSH 14)
98    (LOAD&CDR&PUSH 5)
100   (CALL2&PUSH 12)                     ; NPCTIMES
102   (CALL2 11)                          ; PPLUS
104   (STORE 17)
106   (GETVALUE&PUSH 1)                   ; B
108   (LOAD&PUSH 14)
109   (LOAD&PUSH 2)
110   (CALL2&PUSH 12)                     ; NPCTIMES
112   (CALL2 11)                          ; PPLUS
114   (SETVALUE 1)                        ; B
116   (NIL&STORE 2)
118   (STORE 0)
119   (STORE 3)
120   L120
120   (LOAD&PUSH 8)
121   (JMPIFEQTO 3 L260)                  ; 0
125   (LOAD&PUSH 1)
126   (GETVALUE&PUSH 0)                   ; LIMK
128   (CALLSR&JMPIF 1 48 L260)            ; >
133   (GETVALUE 4)                        ; MODULUS
135   (STORE 14)
137   (PUSH)
138   (CALLSR&STORE 0 54 13)              ; -
142   (GETVALUE&PUSH 4)                   ; MODULUS
144   (GETVALUE&PUSH 4)                   ; MODULUS
146   (CALLSR 2 55)                       ; *
149   (SETVALUE 4)                        ; MODULUS
151   (LOAD&PUSH 8)
152   (CALL1 8)                           ; PMOD
154   (STORE 15)
156   (PUSH)
157   (JMPIFEQTO 3 L246)                  ; 0
161   (LOAD&PUSH 15)
162   (LOAD&PUSH 15)
163   (CALL2 9)                           ; NPQUO
165   (STORE 9)
167   (NIL&STORE 15)
169   (LOAD&PUSH 17)
170   (LOAD&PUSH 10)
171   (CALL2&PUSH 6)                      ; PTIMES
173   (LOAD&PUSH 24)
174   (CALL2 10)                          ; PMODQUO
176   (STORE 4)
177   (LOAD&PUSH 13)
178   (LOAD&CAR&PUSH 5)
180   (LOAD&PUSH 26)
182   (CALL2&PUSH 6)                      ; PTIMES
184   (GETVALUE&PUSH 1)                   ; B
186   (LOAD&PUSH 12)
187   (CALL2&PUSH 6)                      ; PTIMES
189   (CALL2&PUSH 11)                     ; PPLUS
191   (CALL2 12)                          ; NPCTIMES
193   (STORE 16)
195   (LOAD&PUSH 13)
196   (LOAD&CDR&PUSH 5)
198   (CALL2 12)                          ; NPCTIMES
200   (STORE 0)
201   (GETVALUE 13)                       ; PLIM
203   (BIND 4)                            ; MODULUS
205   (LOAD&PUSH 11)
206   (LOAD&PUSH 20)
207   (LOAD&PUSH 5)
208   (CALL2&PUSH 6)                      ; PTIMES
210   (CALL2&PUSH 11)                     ; PPLUS
212   (LOAD&PUSH 20)
213   (LOAD&PUSH 28)
215   (CALL2&PUSH 6)                      ; PTIMES
217   (LOAD&PUSH 5)
218   (LOAD&PUSH 30)
220   (CALL2&PUSH 6)                      ; PTIMES
222   (CALL2&PUSH 11)                     ; PPLUS
224   (CALL2 11)                          ; PPLUS
226   (STORE 11)
228   (LOAD&PUSH 27)
230   (LOAD&PUSH 20)
231   (CALL2 11)                          ; PPLUS
233   (STORE 27)
235   (LOAD&PUSH 26)
237   (LOAD&PUSH 4)
238   (CALL2 11)                          ; PPLUS
240   (STORE 26)
242   (UNBIND1)
243   (NIL&STORE 16)
245   (STORE 0)
246   L246
246   (LOAD&PUSH 8)
247   (JMPIFEQTO 3 L260)                  ; 0
250   (LOAD&INC&STORE 1)
252   (PUSH)
253   (GETVALUE&PUSH 0)                   ; LIMK
255   (CALLSR&JMPIFNOT 1 48 L54)          ; >
260   L260
260   (GETVALUE&PUSH 2)                   ; P
262   (CALL1 15)                          ; SETQMODULUS
264   (LOAD&PUSH 24)
265   (LOAD&PUSH 24)
266   (LIST 2)
268   (SKIP 5)
270   (UNBIND1)
271   (SKIP 2)
273   (UNBIND1)
274   (SKIP 5)
276   (UNBIND1)
277   (SKIP&RET 5)


Disassembly of function #:|(DEFUN NPCTIMES (C P) ...)-108|
(CONST 0) = NPCTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NPCTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NPCTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NPCTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NPCTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NPCTIMES
8     (SKIP&RET 1)


Disassembly of function NPCTIMES
(CONST 0) = P
(CONST 1) = NPCTIMES1
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
writes special variable : (P)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; P
6     (CALL2 1)                           ; NPCTIMES1
8     (SETVALUE 0)                        ; P
10    (JMPIFATOM L17)
12    (GETVALUE 0)                        ; P
14    (CDR)
15    (JMPIFNOT L22)
17    L17
17    (GETVALUE 0)                        ; P
19    L19
19    (UNBIND1)
20    (SKIP&RET 3)
22    L22
22    (CONST 2)                           ; 0
23    (JMP L19)


Disassembly of function #:|(DEFUN NPQUO (P C) ...)-109|
(CONST 0) = NPQUO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NPQUO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NPQUO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NPQUO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NPQUO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NPQUO
8     (SKIP&RET 1)


Disassembly of function NPQUO
(CONST 0) = P
(CONST 1) = MODULUS
(CONST 2) = 1
(CONST 3) = QUOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
52 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; MODULUS
7     (LOAD&PUSH 8)
8     (JMPIFEQTO 2 L20)                   ; 1
11    (GETVALUE 0)                        ; P
13    (JMPIFATOM L24)
15    (GETVALUE 0)                        ; P
17    (STORE 3)
18    (JMP L57)
20    L20
20    (GETVALUE 0)                        ; P
22    (JMP L63)
24    L24
24    (GETVALUE&PUSH 0)                   ; P
26    (LOAD&PUSH 9)
27    (CALL2 3)                           ; QUOT
29    (JMP L63)
31    L31
31    (LOAD&CAR&PUSH 4)
33    (LOAD&PUSH 10)
34    (CALL2 3)                           ; QUOT
36    (JMP L54)
38    L38
38    (LOAD 3)
39    (CDR)
40    (CDR)
41    (STORE 3)
42    (PUSH)
43    (LOAD 4)
44    (CAR)
45    (JMPIFATOM L31)
47    (LOAD&CAR&PUSH 4)
49    (CALLS1&PUSH 158)                   ; COPY-LIST
51    (LOAD&PUSH 10)
52    (JSR L0)
54    L54
54    (PUSH)
55    (CALLS1 168)                        ; RPLACA
57    L57
57    (LOAD 3)
58    (CDR)
59    (JMPIF L38)
61    (GETVALUE 0)                        ; P
63    L63
63    (UNBIND1)
64    (SKIP 1)
66    (UNBIND1)
67    (SKIP&RET 3)


Disassembly of function #:|(DEFUN NPCTIMES1 (C P) ...)-110|
(CONST 0) = NPCTIMES1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NPCTIMES1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NPCTIMES1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NPCTIMES1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NPCTIMES1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NPCTIMES1
8     (SKIP&RET 1)


Disassembly of function NPCTIMES1
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = CTIMES
(CONST 3) = NPCTIMES
(CONST 4) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
66 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (PUSH-NIL 2)
5     (LOAD&PUSH 7)
6     (JMPIFEQTO 1 L20)                   ; 1
9     (GETVALUE 0)                        ; P
11    (JMPIFATOM L27)
13    (GETVALUE 0)                        ; P
15    (STORE 1)
16    L16
16    (LOAD 1)
17    (CDR)
18    (JMPIF L54)
20    L20
20    (GETVALUE 0)                        ; P
22    (SKIP 2)
24    L24
24    (UNBIND1)
25    (SKIP&RET 3)
27    L27
27    (LOAD&PUSH 7)
28    (GETVALUE&PUSH 0)                   ; P
30    (CALL2 2)                           ; CTIMES
32    (SKIP 2)
34    (JMP L24)
36    L36
36    (LOAD&PUSH 7)
37    (LOAD 2)
38    (CDR)
39    (CDR)
40    (CAR&PUSH)
41    (CALL2 2)                           ; CTIMES
43    (JMP L69)
45    L45
45    (LOAD&PUSH 1)
46    (LOAD 2)
47    (CDR)
48    (CDR)
49    (CDR&PUSH)
50    (CALLS1 170)                        ; RPLACD
52    (JMP L16)
54    L54
54    (LOAD 1)
55    (CDR)
56    (CDR)
57    (CAR)
58    (JMPIFATOM L36)
60    (LOAD&PUSH 7)
61    (LOAD 2)
62    (CDR)
63    (CDR)
64    (CAR&PUSH)
65    (CALLS1&PUSH 158)                   ; COPY-LIST
67    (CALL2 3)                           ; NPCTIMES
69    L69
69    (STORE 0)
70    (PUSH)
71    (JMPIFEQTO 4 L45)                   ; 0
74    (LOAD 1)
75    (CDR)
76    (CDR)
77    (STORE 1)
78    (PUSH)
79    (LOAD&PUSH 1)
80    (CALLS1 168)                        ; RPLACA
82    (JMP L16)


Disassembly of function #:|(DEFUN X**Q1 (TERM U M ...) ...)-111|
(CONST 0) = X**Q1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE X**Q1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; X**Q1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; X**Q1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE X**Q1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; X**Q1
8     (SKIP&RET 1)


Disassembly of function X**Q1
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = TRL*
(CONST 3) = PEXPTMOD
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TRL* P)
writes special variable : (TRL*)
29 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (CONST&PUSH 1)                      ; 1
4     (LOAD&PUSH 8)
5     (LIST 1)
7     (SETVALUE 2)                        ; TRL*
9     (JMP L28)
11    L11
11    (LOAD&PUSH 8)
12    (GETVALUE&PUSH 0)                   ; P
14    (LOAD&PUSH 9)
15    (CALL 3 3)                          ; PEXPTMOD
18    (STORE 8)
20    (PUSH)
21    (GETVALUE 2)                        ; TRL*
23    (CONS)
24    (SETVALUE 2)                        ; TRL*
26    (LOAD&INC&STORE 0)
28    L28
28    (LOAD&PUSH 0)
29    (LOAD&PUSH 7)
30    (CALLSR&JMPIFNOT 1 45 L11)          ; =
34    (LOAD&PUSH 8)
35    (GETVALUE&PUSH 0)                   ; P
37    (LOAD&PUSH 9)
38    (CALL 3 3)                          ; PEXPTMOD
41    (SKIP 1)
43    (UNBIND1)
44    (SKIP&RET 5)


Disassembly of function #:|(DEFUN CPTOMF (P U N) ...)-112|
(CONST 0) = CPTOMF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPTOMF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPTOMF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPTOMF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPTOMF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPTOMF
8     (SKIP&RET 1)


Disassembly of function CPTOMF
(CONST 0) = P
(CONST 1) = L
(CONST 2) = *XN
(CONST 3) = 0
(CONST 4) = IND
(CONST 5) = #.#'-
(CONST 6) = P2CPOL
(CONST 7) = VAR
(CONST 8) = 1
(CONST 9) = CPTIMESX
(CONST 10) = (1 0)
(CONST 11) = NCDR
(CONST 12) = #.#'+
(CONST 13) = SPLIT*
(CONST 14) = AFIXN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR IND L AFIXN P)
writes special variables : (SPLIT* L IND *XN)
137 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; L
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; *XN
10    (CONST&PUSH 3)                      ; 0
11    (CONST&PUSH 3)                      ; 0
12    (NIL)
13    (BIND 4)                            ; IND
15    (LOAD&DEC&PUSH 16)
17    (JMP L138)
20    L20
20    (NIL)
21    (SKIP 1)
23    (UNBIND1)
24    (SKIP 2)
26    (UNBIND1)
27    (SKIP 1)
29    (UNBIND1)
30    (JMP L222)
33    L33
33    (CONST&PUSH 5)                      ; #.#'-
34    (LOAD 19)
36    (CDR)
37    (CDR&PUSH)
38    (LOAD&PUSH 2)
39    (CALL2&PUSH 6)                      ; P2CPOL
41    (CALLSR 0 22)                       ; MAPCAR
44    (SETVALUE 2)                        ; *XN
46    (PUSH)
47    (CALLS1&STORE 161 9)                ; COPY-TREE
50    (T)
51    (SETVALUE 4)                        ; IND
53    (GETVALUE&PUSH 0)                   ; P
55    (LOAD&PUSH 6)
56    (CALLSR&PUSH 2 55)                  ; *
59    (LOAD&PUSH 18)
60    (CALLSR&STORE 1 54 4)               ; -
64    (JMP L69)
66    L66
66    (GETVALUE 0)                        ; P
68    (STORE 4)
69    L69
69    (LOAD&PUSH 4)
70    (CONST&PUSH 3)                      ; 0
71    (CALLSR&JMPIF 1 45 L180)            ; =
76    (LOAD&PUSH 9)
77    (CALL1 9)                           ; CPTIMESX
79    (LOAD&DEC&STORE 4)
81    (JMP L69)
83    L83
83    (LOAD 9)
84    (SETVALUE 1)                        ; L
86    (LOAD 0)
87    (JMP L111)
89    L89
89    (GETVALUE&PUSH 14)                  ; AFIXN
91    (GETVALUE 1)                        ; L
93    (CAR&PUSH)
94    (LOAD&PUSH 1)
95    (LOAD&PUSH 8)
96    (LOAD&PUSH 8)
97    (LOAD&PUSH 3)
98    (CALLSR 2 2)                        ; SYSTEM::STORE
101   (SKIP 2)
103   (GETVALUE 1)                        ; L
105   (CDR)
106   (SETVALUE 1)                        ; L
108   (LOAD&PUSH 4)
109   (CALLS2 151)                        ; 1-
111   L111
111   (STORE 4)
112   (GETVALUE 1)                        ; L
114   (JMPIF L89)
116   (GETVALUE&PUSH 14)                  ; AFIXN
118   (GETVALUE&PUSH 14)                  ; AFIXN
120   (LOAD&PUSH 7)
121   (LOAD&PUSH 8)
122   (CALLSR&PUSH 2 1)                   ; AREF
125   (CONST&PUSH 8)                      ; 1
126   (CALLSR&PUSH 1 54)                  ; -
129   (LOAD&PUSH 1)
130   (LOAD&PUSH 8)
131   (LOAD&PUSH 9)
132   (LOAD&PUSH 3)
133   (CALLSR 2 2)                        ; SYSTEM::STORE
136   (SKIP 2)
138   L138
138   (LOAD&INC&STORE 5)
140   (PUSH)
141   (LOAD&PUSH 18)
142   (CALLSR&JMPIF 1 45 L20)             ; =
147   (GETVALUE 4)                        ; IND
149   (JMPIF L66)
152   (GETVALUE&PUSH 0)                   ; P
154   (LOAD&PUSH 6)
155   (CALLSR&PUSH 2 55)                  ; *
158   (LOAD&PUSH 1)
159   (CALLSR&JMPIF 1 48 L33)             ; >
164   (GETVALUE&PUSH 7)                   ; VAR
166   (GETVALUE&PUSH 0)                   ; P
168   (LOAD&PUSH 7)
169   (CALLSR&PUSH 2 55)                  ; *
172   (CONST&PUSH 8)                      ; 1
173   (LIST&PUSH 3)
175   (LOAD&PUSH 1)
176   (CALL2 6)                           ; P2CPOL
178   (STORE 9)
180   L180
180   (LOAD&PUSH 5)
181   (CONST&PUSH 8)                      ; 1
182   (CALLSR&JMPIFNOT 1 45 L83)          ; =
187   (CONST&PUSH 10)                     ; (1 0)
188   (LOAD&PUSH 10)
189   (LOAD&PUSH 11)
190   (CALLS2&PUSH 71)                    ; LENGTH
192   (CALLS2&PUSH 151)                   ; 1-
194   (CALL2&PUSH 11)                     ; NCDR
196   (CALLS2&JMPIFNOT 2 L83)             ; EQUAL
200   (CONST&PUSH 8)                      ; 1
201   (CONST&PUSH 12)                     ; #.#'+
202   (LOAD 11)
203   (APPLY&PUSH 0)
205   (CALLSR&JMPIFNOT 1 45 L83)          ; =
210   (T)
211   (SETVALUE 13)                       ; SPLIT*
213   (SKIP 1)
215   (UNBIND1)
216   (SKIP 2)
218   (UNBIND1)
219   (SKIP 1)
221   (UNBIND1)
222   L222
222   (UNBIND1)
223   (SKIP&RET 4)


Disassembly of function #:|(DEFUN P2CPOL (P N) ...)-113|
(CONST 0) = P2CPOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE P2CPOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; P2CPOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; P2CPOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE P2CPOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; P2CPOL
8     (SKIP&RET 1)


Disassembly of function P2CPOL
(CONST 0) = P
(CONST 1) = L
(CONST 2) = -1
(CONST 3) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L P)
writes special variables : (L P)
45 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; L
6     (GETVALUE 0)                        ; P
8     (CDR)
9     (SETVALUE 0)                        ; P
11    (JMP L58)
13    L13
13    (CONST&PUSH 3)                      ; 0
14    (GETVALUE 1)                        ; L
16    (CONS)
17    (SETVALUE 1)                        ; L
19    (JMP L56)
21    L21
21    (GETVALUE 0)                        ; P
23    (JMPIFNOT L13)
25    (LOAD&PUSH 7)
26    (GETVALUE 0)                        ; P
28    (CAR&PUSH)
29    (CALLSR&JMPIF 1 48 L13)             ; >
33    (LOAD&PUSH 7)
34    (GETVALUE 0)                        ; P
36    (CAR&PUSH)
37    (CALLSR&JMPIFNOT 1 45 L56)          ; =
41    (GETVALUE 0)                        ; P
43    (CDR)
44    (CAR&PUSH)
45    (GETVALUE 1)                        ; L
47    (CONS)
48    (SETVALUE 1)                        ; L
50    (GETVALUE 0)                        ; P
52    (CDR)
53    (CDR)
54    (SETVALUE 0)                        ; P
56    L56
56    (LOAD&DEC&STORE 7)
58    L58
58    (LOAD&PUSH 7)
59    (CONST&PUSH 2)                      ; -1
60    (CALLSR&JMPIFNOT 1 45 L21)          ; =
64    (GETVALUE&PUSH 1)                   ; L
66    (CALLS2 73)                         ; NREVERSE
68    (UNBIND 2)
70    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CPTIMESX (P) ...)-114|
(CONST 0) = CPTIMESX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPTIMESX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPTIMESX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPTIMESX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPTIMESX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPTIMESX
8     (SKIP&RET 1)


Disassembly of function CPTIMESX
(CONST 0) = P
(CONST 1) = *XN
(CONST 2) = CTIMES
(CONST 3) = CPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P *XN)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (PUSH-NIL 3)
5     (GETVALUE 1)                        ; *XN
7     (STORE 2)
8     (GETVALUE 0)                        ; P
10    (STORE 1)
11    (CAR)
12    (STORE 0)
13    (JMP L32)
15    L15
15    (LOAD&PUSH 1)
16    (LOAD 2)
17    (CDR)
18    (CAR&PUSH)
19    (LOAD&PUSH 2)
20    (LOAD&CAR&PUSH 5)
22    (CALL2&PUSH 2)                      ; CTIMES
24    (CALL2&PUSH 3)                      ; CPLUS
26    (CALLS1 168)                        ; RPLACA
28    (LOAD&CDR&STORE 1)
30    (LOAD&CDR&STORE 2)
32    L32
32    (LOAD 1)
33    (CDR)
34    (JMPIF L15)
36    (LOAD&PUSH 1)
37    (LOAD&PUSH 1)
38    (LOAD&CAR&PUSH 4)
40    (CALL2&PUSH 2)                      ; CTIMES
42    (CALLS1 168)                        ; RPLACA
44    (GETVALUE 0)                        ; P
46    (SKIP 3)
48    (UNBIND1)
49    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CMNULLF (N) ...)-115|
(CONST 0) = CMNULLF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CMNULLF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CMNULLF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CMNULLF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CMNULLF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CMNULLF
8     (SKIP&RET 1)


Disassembly of function CMNULLF
(CONST 0) = 1
(CONST 1) = 0
(CONST 2) = -1
(CONST 3) = CMOD
(CONST 4) = FCTCFIXN
(CONST 5) = INVCFIXN
(CONST 6) = AFIXN
(CONST 7) = CTIMES
(CONST 8) = CRECIP
(CONST 9) = CPLUS
(CONST 10) = VAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR AFIXN INVCFIXN FCTCFIXN)
204 byte-code instructions:
0     (PUSH-NIL 2)
2     (CONST&PUSH 0)                      ; 1
3     (CONST&PUSH 1)                      ; 0
4     (NIL&PUSH)
5     (LOAD&DEC&PUSH 6)
7     (PUSH-NIL 4)
9     (CONST&PUSH 2)                      ; -1
10    (CALL1 3)                           ; CMOD
12    (STORE 8)
14    (CONST&PUSH 1)                      ; 0
15    (JMP L39)
17    L17
17    (GETVALUE&PUSH 4)                   ; FCTCFIXN
19    (LOAD&PUSH 0)
20    (LOAD&PUSH 2)
21    (CONST&PUSH 2)                      ; -1
22    (CALLSR 1 2)                        ; SYSTEM::STORE
25    (SKIP 1)
27    (GETVALUE&PUSH 5)                   ; INVCFIXN
29    (LOAD&PUSH 0)
30    (LOAD&PUSH 2)
31    (CONST&PUSH 2)                      ; -1
32    (CALLSR 1 2)                        ; SYSTEM::STORE
35    (SKIP 1)
37    (LOAD&INC&STORE 0)
39    L39
39    (LOAD&PUSH 0)
40    (LOAD&PUSH 6)
41    (CALLSR&JMPIFNOT 1 48 L17)          ; >
45    (SKIP 1)
47    (CONST&PUSH 0)                      ; 1
48    (LIST 1)
50    (STORE 9)
52    (JMP L315)
55    L55
55    (CONST 1)                           ; 0
56    (STORE 6)
57    (JMP L231)
60    L60
60    (GETVALUE&PUSH 5)                   ; INVCFIXN
62    (LOAD&PUSH 0)
63    (LOAD&PUSH 9)
64    (LOAD&PUSH 9)
65    (CALLSR 1 2)                        ; SYSTEM::STORE
68    (SKIP 1)
70    (GETVALUE&PUSH 4)                   ; FCTCFIXN
72    (LOAD&PUSH 0)
73    (LOAD&PUSH 8)
74    (LOAD&PUSH 10)
75    (CALLSR 1 2)                        ; SYSTEM::STORE
78    (SKIP 1)
80    (GETVALUE&PUSH 6)                   ; AFIXN
82    (LOAD&PUSH 8)
83    (LOAD&PUSH 8)
84    (CALLSR&STORE 2 1 1)                ; AREF
88    (LOAD&PUSH 8)
89    (LOAD&PUSH 2)
90    (CALL2&PUSH 7)                      ; CTIMES
92    (CALL1 8)                           ; CRECIP
94    (STORE 1)
95    (LOAD&PUSH 7)
96    (JMP L121)
98    L98
98    (GETVALUE&PUSH 6)                   ; AFIXN
100   (LOAD&PUSH 3)
101   (GETVALUE&PUSH 6)                   ; AFIXN
103   (LOAD&PUSH 3)
104   (LOAD&PUSH 11)
105   (CALLSR&PUSH 2 1)                   ; AREF
108   (CALL2&PUSH 7)                      ; CTIMES
110   (LOAD&PUSH 1)
111   (LOAD&PUSH 3)
112   (LOAD&PUSH 11)
113   (LOAD&PUSH 3)
114   (CALLSR 2 2)                        ; SYSTEM::STORE
117   (SKIP 2)
119   (LOAD&INC&STORE 0)
121   L121
121   (LOAD&PUSH 0)
122   (LOAD&PUSH 6)
123   (CALLSR&JMPIFNOT 1 48 L98)          ; >
127   (SKIP 1)
129   (CONST 1)                           ; 0
130   (STORE 5)
131   L131
131   (LOAD&PUSH 5)
132   (LOAD&PUSH 5)
133   (CALLSR&JMPIF 1 48 L313)            ; >
138   (LOAD&PUSH 5)
139   (LOAD&PUSH 7)
140   (CALLSR&JMPIF 1 45 L195)            ; =
144   (GETVALUE&PUSH 6)                   ; AFIXN
146   (LOAD&PUSH 8)
147   (LOAD&PUSH 7)
148   (CALLSR&STORE 2 1 0)                ; AREF
152   (LOAD&PUSH 7)
153   (JMP L187)
155   L155
155   (GETVALUE&PUSH 6)                   ; AFIXN
157   (GETVALUE&PUSH 6)                   ; AFIXN
159   (LOAD&PUSH 2)
160   (LOAD&PUSH 9)
161   (CALLSR&PUSH 2 1)                   ; AREF
164   (GETVALUE&PUSH 6)                   ; AFIXN
166   (LOAD&PUSH 3)
167   (LOAD&PUSH 11)
168   (CALLSR&PUSH 2 1)                   ; AREF
171   (LOAD&PUSH 4)
172   (CALL2&PUSH 7)                      ; CTIMES
174   (CALL2&PUSH 9)                      ; CPLUS
176   (LOAD&PUSH 1)
177   (LOAD&PUSH 3)
178   (LOAD&PUSH 10)
179   (LOAD&PUSH 3)
180   (CALLSR 2 2)                        ; SYSTEM::STORE
183   (SKIP 2)
185   (LOAD&INC&STORE 0)
187   L187
187   (LOAD&PUSH 0)
188   (LOAD&PUSH 6)
189   (CALLSR&JMPIFNOT 1 48 L155)         ; >
193   (SKIP 1)
195   L195
195   (LOAD&INC&STORE 5)
197   (JMP L131)
200   L200
200   (LOAD&PUSH 0)
201   (CONST 0)                           ; 1
202   (JMP L284)
205   L205
205   (GETVALUE&PUSH 6)                   ; AFIXN
207   (LOAD&PUSH 8)
208   (LOAD&PUSH 8)
209   (CALLSR&PUSH 2 1)                   ; AREF
212   (CONST&PUSH 1)                      ; 0
213   (CALLSR&JMPIF 1 45 L229)            ; =
217   (GETVALUE&PUSH 4)                   ; FCTCFIXN
219   (LOAD&PUSH 7)
220   (CALLSR&PUSH 1 1)                   ; AREF
223   (CONST&PUSH 2)                      ; -1
224   (CALLSR&JMPIFNOT 1 48 L60)          ; >
229   L229
229   (LOAD&INC&STORE 6)
231   L231
231   (LOAD&PUSH 6)
232   (LOAD&PUSH 5)
233   (CALLSR&JMPIFNOT 1 48 L205)         ; >
237   (NIL&STORE 3)
239   (CONST&PUSH 1)                      ; 0
240   L240
240   (LOAD&PUSH 0)
241   (LOAD&PUSH 6)
242   (CALLSR&JMPIF 1 48 L299)            ; >
246   (LOAD&PUSH 0)
247   (LOAD&PUSH 9)
248   (CALLSR&JMPIF 1 45 L200)            ; =
252   (GETVALUE&PUSH 5)                   ; INVCFIXN
254   (LOAD&PUSH 1)
255   (CALLSR&PUSH 1 1)                   ; AREF
258   (CONST&PUSH 2)                      ; -1
259   (CALLSR&JMPIFNOT 1 48 L289)         ; >
263   (GETVALUE&PUSH 6)                   ; AFIXN
265   (LOAD&PUSH 9)
266   (GETVALUE&PUSH 5)                   ; INVCFIXN
268   (LOAD&PUSH 3)
269   (CALLSR&PUSH 1 1)                   ; AREF
272   (CALLSR&STORE 2 1 3)                ; AREF
276   (PUSH)
277   (CONST&PUSH 1)                      ; 0
278   (CALLSR&JMPIF 1 45 L289)            ; =
282   (LOAD&PUSH 0)
283   (LOAD 4)
284   L284
284   (PUSH)
285   (LOAD 6)
286   (CONS)
287   (CONS)
288   (STORE 4)
289   L289
289   (LOAD&INC&STORE 0)
291   (JMP L240)
293   L293
293   (LOAD 3)
294   (CDR)
295   (CAR)
296   (STORE 3)
297   (JMP L310)
299   L299
299   (SKIP 1)
301   (LOAD&CAR&PUSH 3)
303   (JMPIFEQTO 1 L293)                  ; 0
306   (GETVALUE&PUSH 10)                  ; VAR
308   (LOAD&CONS&STORE 3)
310   L310
310   (LOAD&PUSH 3)
311   (LOAD&CONS&STORE 9)
313   L313
313   (LOAD&INC&STORE 7)
315   L315
315   (LOAD&PUSH 7)
316   (LOAD&PUSH 5)
317   (CALLSR&JMPIFNOT 1 48 L55)          ; >
322   (LOAD 9)
323   (SKIP&RET 12)


Disassembly of function #:|(DEFUN CHOOZP (V) ...)-116|
(CONST 0) = CHOOZP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHOOZP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHOOZP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHOOZP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHOOZP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHOOZP
8     (SKIP&RET 1)


Disassembly of function CHOOZP
(CONST 0) = 1
(CONST 1) = 0
(CONST 2) = DEG
(CONST 3) = ALGCONT
(CONST 4) = NCONT
(CONST 5) = B
(CONST 6) = LMIN
(CONST 7) = NF
(CONST 8) = HAULONG
(CONST 9) = GAUSS
(CONST 10) = (3 7 11 19 23 29 31 37)
(CONST 11) = SMALLPRIMES
(CONST 12) = MODULUS
(CONST 13) = PMOD
(CONST 14) = SHARPCONT
(CONST 15) = MONIC*
(CONST 16) = VAR
(CONST 17) = SQFRP
(CONST 18) = ALGFAC*
(CONST 19) = MINPOLY*
(CONST 20) = IREDUP
(CONST 21) = PMONICIZE
(CONST 22) = SPLT
(CONST 23) = CPBER1
(CONST 24) = TRL*
(CONST 25) = 3
(CONST 26) = "Factor ran out of primes."
(CONST 27) = MERROR
(CONST 28) = 6
(CONST 29) = ZIREDUP
(CONST 30) = SPLITCASE
(CONST 31) = "The minimal poly must be irreducible over the integers."
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(B NF LMIN NCONT TRL* ALGCONT MINPOLY* ALGFAC* VAR MONIC* MODULUS SHARPCONT
 SMALLPRIMES GAUSS DEG)
writes special variables : (TRL* NCONT B LMIN ALGCONT MODULUS NF)
156 byte-code instructions:
0     (PUSH-NIL 4)
2     (CONST&PUSH 0)                      ; 1
3     (PUSH-NIL 4)
5     (CONST&PUSH 1)                      ; 0
6     (CONST&PUSH 1)                      ; 0
7     (LOAD 12)
8     (CDR)
9     (CAR)
10    (BIND 2)                            ; DEG
12    (CONST 1)                           ; 0
13    (BIND 3)                            ; ALGCONT
15    (LOAD 12)
16    (BIND 4)                            ; NCONT
18    (LOAD 12)
19    (BIND 5)                            ; B
21    (LOAD 13)
22    (BIND 6)                            ; LMIN
24    (LOAD 15)
26    (BIND 7)                            ; NF
28    (GETVALUE&PUSH 2)                   ; DEG
30    (CALL1 8)                           ; HAULONG
32    (SETVALUE 7)                        ; NF
34    (GETVALUE 9)                        ; GAUSS
36    (JMPIF L139)
39    (GETVALUE 11)                       ; SMALLPRIMES
41    (STORE 28)
43    L43
43    (LOAD 28)
45    (CAR)
46    (SETVALUE 12)                       ; MODULUS
48    (LOAD&PUSH 30)
50    (CALL1 13)                          ; PMOD
52    (STORE 27)
54    (GETVALUE&PUSH 14)                  ; SHARPCONT
56    (GETVALUE&PUSH 12)                  ; MODULUS
58    (CALLS2&PUSH 184)                   ; REM
60    (CALLS2&JMPIF 145 L112)             ; ZEROP
63    (GETVALUE 15)                       ; MONIC*
65    (JMPIF L81)
67    (LOAD 27)
69    (JMPIFATOM L112)
71    (GETVALUE&PUSH 2)                   ; DEG
73    (LOAD 28)
75    (CDR)
76    (CAR&PUSH)
77    (CALLSR&JMPIF 1 48 L112)            ; >
81    L81
81    (LOAD&PUSH 27)
83    (GETVALUE&PUSH 16)                  ; VAR
85    (CALL2&JMPIFNOT 17 L106)            ; SQFRP
88    (GETVALUE 18)                       ; ALGFAC*
90    (JMPIFNOT L171)
93    (GETVALUE 9)                        ; GAUSS
95    (JMPIF L171)
98    (GETVALUE&PUSH 19)                  ; MINPOLY*
100   (CALL1&PUSH 13)                     ; PMOD
102   (CALL1&JMPIF 20 L171)               ; IREDUP
106   L106
106   (GETVALUE&PUSH 3)                   ; ALGCONT
108   (CALLS2 150)                        ; 1+
110   (SETVALUE 3)                        ; ALGCONT
112   L112
112   (LOAD&CDR&STORE 28)
114   (JMPIFNOT L275)
117   (GETVALUE&PUSH 3)                   ; ALGCONT
119   (CONST&PUSH 28)                     ; 6
120   (CALLSR&JMPIFNOT 1 48 L43)          ; >
125   (GETVALUE&PUSH 19)                  ; MINPOLY*
127   (CALL1&JMPIF 29 L264)               ; ZIREDUP
131   (CONST 31)                          ; "The minimal poly must be irreducible over the integers."
133   L133
133   (PUSH)
134   (CALL1 27)                          ; MERROR
136   (JMP L43)
139   L139
139   (CONST 10)                          ; (3 7 11 19 23 29 31 37)
140   (STORE 28)
142   (JMP L43)
145   L145
145   (LOAD 25)
147   (SETVALUE 6)                        ; LMIN
149   (CONST 0)                           ; 1
150   (STORE 20)
152   (GETVALUE 12)                       ; MODULUS
154   (STORE 23)
156   (LOAD 22)
158   (SETVALUE 5)                        ; B
160   (GETVALUE 18)                       ; ALGFAC*
162   (JMPIFNOT L234)
165   (GETVALUE 24)                       ; TRL*
167   (STORE 26)
169   (JMP L234)
171   L171
171   (LOAD&CDR&PUSH 27)
173   (CALL1 21)                          ; PMONICIZE
175   (CONST 22)                          ; SPLT
177   (CATCH-OPEN L184)
179   (LOAD&PUSH 30)
181   (CALL1 23)                          ; CPBER1
183   (CATCH-CLOSE)
184   L184
184   (STORE 22)
186   (CONST 1)                           ; 0
187   (SETVALUE 3)                        ; ALGCONT
189   (GETVALUE&PUSH 4)                   ; NCONT
191   (CALLS2 150)                        ; 1+
193   (SETVALUE 4)                        ; NCONT
195   (LOAD&CAR&PUSH 22)
197   (CALLS2&PUSH 71)                    ; LENGTH
199   (LOAD 23)
201   (CDR)
202   (CAR&PUSH)
203   (CALLS2&PUSH 71)                    ; LENGTH
205   (CALLSR&STORE 2 53 25)              ; +
209   (GETVALUE&PUSH 6)                   ; LMIN
211   (CALLS2&JMPIF 145 L145)             ; ZEROP
215   (LOAD&PUSH 25)
217   (GETVALUE&PUSH 6)                   ; LMIN
219   (CALLSR&JMPIF 1 47 L145)            ; <
224   (LOAD&PUSH 25)
226   (GETVALUE&PUSH 6)                   ; LMIN
228   (CALLSR&JMPIFNOT 1 45 L234)         ; =
232   (LOAD&INC&STORE 20)
234   L234
234   (GETVALUE&PUSH 4)                   ; NCONT
236   (GETVALUE&PUSH 7)                   ; NF
238   (CALLSR&JMPIF 1 48 L280)            ; >
242   (LOAD&PUSH 25)
244   (GETVALUE&PUSH 7)                   ; NF
246   (CALLSR&JMPIFNOT 1 48 L280)         ; >
250   (LOAD&PUSH 20)
251   (CONST&PUSH 25)                     ; 3
252   (CALLSR&JMPIFNOT 1 45 L112)         ; =
257   (JMP L280)
259   L259
259   (CONST 26)                          ; "Factor ran out of primes."
261   (JMP L133)
264   L264
264   (LOAD 26)
266   (SETVALUE 24)                       ; TRL*
268   (NIL)
269   (SETVALUE 12)                       ; MODULUS
271   (CONST 30)                          ; SPLITCASE
273   (JMP L290)
275   L275
275   (GETVALUE&PUSH 6)                   ; LMIN
277   (CALLS2&JMPIF 145 L259)             ; ZEROP
280   L280
280   (LOAD 23)
282   (SETVALUE 12)                       ; MODULUS
284   (LOAD 26)
286   (SETVALUE 24)                       ; TRL*
288   (GETVALUE 5)                        ; B
290   L290
290   (UNBIND 6)
292   (SKIP&RET 13)


Disassembly of function #:|(DEFUN CPBQ1 (A N) ...)-117|
(CONST 0) = CPBQ1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPBQ1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPBQ1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPBQ1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPBQ1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPBQ1
8     (SKIP&RET 1)


Disassembly of function CPBQ1
(CONST 0) = SPLIT*
(CONST 1) = MODULUS
(CONST 2) = A
(CONST 3) = *ARRAY
(CONST 4) = ALGFAC*
(CONST 5) = MM*
(CONST 6) = CPTOM
(CONST 7) = CPTOMF
(CONST 8) = POWRS
(CONST 9) = CMNULL
(CONST 10) = CMNULLF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MM* SPLIT* ALGFAC* MODULUS)
writes special variable : (SPLIT*)
50 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; SPLIT*
3     (GETVALUE&PUSH 1)                   ; MODULUS
5     (CALLS2&JMPIFNOT 12 L42)            ; INTEGERP
8     (GETVALUE 4)                        ; ALGFAC*
10    (JMPIF L53)
12    L12
12    (GETVALUE&PUSH 1)                   ; MODULUS
14    (CALLS2&JMPIFNOT 12 L53)            ; INTEGERP
17    (GETVALUE&PUSH 1)                   ; MODULUS
19    (LOAD&PUSH 3)
20    (LOAD&PUSH 3)
21    (CALL 3 7)                          ; CPTOMF
24    (GETVALUE 0)                        ; SPLIT*
26    (JMPIF L66)
28    L28
28    (GETVALUE 4)                        ; ALGFAC*
30    (JMPIF L75)
32    (GETVALUE&PUSH 1)                   ; MODULUS
34    (CALLS2&JMPIFNOT 12 L75)            ; INTEGERP
37    (LOAD&PUSH 1)
38    (CALL1 10)                          ; CMNULLF
40    (SKIP&RET 3)
42    L42
42    (CONST&PUSH 2)                      ; A
43    (T&PUSH)
44    (LOAD&PUSH 3)
45    (LOAD&PUSH 4)
46    (CALL 4 3)                          ; *ARRAY
49    (GETVALUE 4)                        ; ALGFAC*
51    (JMPIFNOT L12)
53    L53
53    (GETVALUE&PUSH 1)                   ; MODULUS
55    (GETVALUE&PUSH 5)                   ; MM*
57    (LOAD&PUSH 4)
58    (LOAD&PUSH 4)
59    (CALL 4 6)                          ; CPTOM
62    (GETVALUE 0)                        ; SPLIT*
64    (JMPIFNOT L28)
66    L66
66    (LOAD&CAR&PUSH 2)
68    (LOAD 3)
69    (CDR)
70    (CAR&PUSH)
71    (CALL2 8)                           ; POWRS
73    (SKIP&RET 3)
75    L75
75    (LOAD&PUSH 1)
76    (CALL1 9)                           ; CMNULL
78    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CPBER1 (U) ...)-118|
(CONST 0) = CPBER1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPBER1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPBER1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPBER1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPBER1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPBER1
8     (SKIP&RET 1)


Disassembly of function CPBER1
(CONST 0) = VAR
(CONST 1) = LINOUT
(CONST 2) = 1
(CONST 3) = CPBQ1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (VAR)
30 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD 2)
2     (CAR)
3     (SETVALUE 0)                        ; VAR
5     (LOAD&PUSH 2)
6     (CALL1 1)                           ; LINOUT
8     (STORE 0)
9     (CAR)
10    (STORE 2)
11    (LOAD 0)
12    (CDR)
13    (CAR)
14    (STORE 0)
15    (LOAD&PUSH 2)
16    (JMPIFEQTO 2 L32)                   ; 1
19    (LOAD&PUSH 0)
20    (LOAD&PUSH 3)
21    (LOAD 4)
22    (CDR)
23    (CAR&PUSH)
24    (CALL2 3)                           ; CPBQ1
26    L26
26    (PUSH)
27    (LOAD&PUSH 4)
28    (LIST 3)
30    (SKIP&RET 3)
32    L32
32    (LOAD&PUSH 0)
33    (NIL)
34    (JMP L26)


Disassembly of function #:|(DEFUN FACTOR1972 (P) ...)-119|
(CONST 0) = FACTOR1972
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTOR1972>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTOR1972
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTOR1972
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTOR1972>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTOR1972
8     (SKIP&RET 1)


Disassembly of function FACTOR1972
(CONST 0) = P
(CONST 1) = MODULUS
(CONST 2) = MODULU*
(CONST 3) = MANY*
(CONST 4) = *STOP*
(CONST 5) = HMODULUS
(CONST 6) = MCFLAG
(CONST 7) = NEGFLAG
(CONST 8) = ALGFAC*
(CONST 9) = ALG
(CONST 10) = FACTOR72
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALGFAC* P MODULUS)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 1)                        ; MODULUS
5     (BIND 2)                            ; MODULU*
7     (NIL)
8     (BIND 3)                            ; MANY*
10    (NIL)
11    (BIND 4)                            ; *STOP*
13    (NIL)
14    (BIND 1)                            ; MODULUS
16    (NIL)
17    (BIND 5)                            ; HMODULUS
19    (NIL)
20    (BIND 6)                            ; MCFLAG
22    (NIL)
23    (BIND 7)                            ; NEGFLAG
25    (GETVALUE 0)                        ; P
27    (JMPIFATOM L51)
29    (GETVALUE&PUSH 0)                   ; P
31    (CALLS2&JMPIF 8 L51)                ; NUMBERP
34    (GETVALUE 8)                        ; ALGFAC*
36    (JMPIFNOT L43)
38    (GETVALUE&PUSH 0)                   ; P
40    (CALL1&JMPIF 9 L51)                 ; ALG
43    L43
43    (GETVALUE&PUSH 0)                   ; P
45    (CALL1 10)                          ; FACTOR72
47    L47
47    (UNBIND 8)
49    (SKIP&RET 2)
51    L51
51    (GETVALUE&PUSH 0)                   ; P
53    (LIST 1)
55    (JMP L47)


Disassembly of function #:|(DEFUN FACTOR72 (P) ...)-120|
(CONST 0) = FACTOR72
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTOR72>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTOR72
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTOR72
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTOR72>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTOR72
8     (SKIP&RET 1)


Disassembly of function FACTOR72
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = SHARPCONT
(CONST 3) = PLIM
(CONST 4) = ONEVARP
(CONST 5) = POSIZE
(CONST 6) = FACT5
(CONST 7) = $NEWFAC
(CONST 8) = MODULUS
(CONST 9) = ALGFAC*
(CONST 10) = MANY*
(CONST 11) = NMULTFACT
(CONST 12) = MULTFACT
(CONST 13) = NEGFLAG
(CONST 14) = PMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NEGFLAG ALGFAC* MODULUS $NEWFAC P)
writes special variables : (P MANY*)
47 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (CONST 1)                           ; 1
4     (BIND 2)                            ; SHARPCONT
6     (NIL)
7     (BIND 3)                            ; PLIM
9     (GETVALUE&PUSH 0)                   ; P
11    (CALL1&JMPIF 4 L45)                 ; ONEVARP
14    (GETVALUE 7)                        ; $NEWFAC
16    (JMPIFNOT L26)
18    (GETVALUE 8)                        ; MODULUS
20    (JMPIF L26)
22    (GETVALUE 9)                        ; ALGFAC*
24    (JMPIFNOT L56)
26    L26
26    (T)
27    (SETVALUE 10)                       ; MANY*
29    (GETVALUE&PUSH 0)                   ; P
31    (CALL1 12)                          ; MULTFACT
33    L33
33    (SETVALUE 0)                        ; P
35    (GETVALUE 13)                       ; NEGFLAG
37    (JMPIF L65)
39    (GETVALUE 0)                        ; P
41    L41
41    (UNBIND 3)
43    (SKIP&RET 2)
45    L45
45    (CONST&SYMBOL-FUNCTION&PUSH 5)      ; POSIZE
47    (GETVALUE&PUSH 0)                   ; P
49    (CALL1&PUSH 6)                      ; FACT5
51    (CALLSR 0 22)                       ; MAPCAR
54    (JMP L33)
56    L56
56    (T)
57    (SETVALUE 10)                       ; MANY*
59    (GETVALUE&PUSH 0)                   ; P
61    (CALL1 11)                          ; NMULTFACT
63    (JMP L33)
65    L65
65    (GETVALUE 0)                        ; P
67    (CAR&PUSH)
68    (CALL1&PUSH 14)                     ; PMINUS
70    (GETVALUE 0)                        ; P
72    (CDR)
73    (CONS)
74    (JMP L41)


Disassembly of function #:|(DEFUN POSIZE (P) ...)-121|
(CONST 0) = POSIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POSIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POSIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POSIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POSIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POSIZE
8     (SKIP&RET 1)


Disassembly of function POSIZE
(CONST 0) = P
(CONST 1) = PMINUSP
(CONST 2) = NEGFLAG
(CONST 3) = PMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NEGFLAG P)
writes special variable : (NEGFLAG)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALL1&JMPIF 1 L13)                 ; PMINUSP
8     (GETVALUE 0)                        ; P
10    L10
10    (UNBIND1)
11    (SKIP&RET 2)
13    L13
13    (GETVALUE 2)                        ; NEGFLAG
15    (NOT)
16    (SETVALUE 2)                        ; NEGFLAG
18    (GETVALUE&PUSH 0)                   ; P
20    (CALL1 3)                           ; PMINUS
22    (JMP L10)


Wrote file binary-clisp/factor.fas
Wrote file /cygdrive/e/temp/maxima/src/factor.lis