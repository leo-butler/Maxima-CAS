Listing of compilation of file /cygdrive/e/temp/maxima/src/simp.lisp
on 2002-12-17 13:33:06 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/simp.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE SIMP)-2|
(CONST 0) = SIMP
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL EXPTRLSW RULESW ...) (UNSPECIAL ARGS) ...)-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FLOAT NIL ...)-4-1|
(CONST 0) = $FLOAT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FLOAT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $FLOAT
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FLOAT NIL ...)-4-2|
(CONST 0) = (SPECIAL $FLOAT)
(CONST 1) = $FLOAT
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes non-integral rational numbers to be converted to
	 floating point."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $FLOAT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $FLOAT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $FLOAT
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $FLOAT
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes non-integral rational numbers to be converted to
	 floating point."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $FLOAT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NEGDISTRIB T ...)-5-1|
(CONST 0) = $NEGDISTRIB
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEGDISTRIB
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $NEGDISTRIB
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NEGDISTRIB T ...)-5-2|
(CONST 0) = (SPECIAL $NEGDISTRIB)
(CONST 1) = $NEGDISTRIB
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes negations to be distributed over sums, e.g. -(A+B) is
	 simplified to -A-B."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $NEGDISTRIB)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $NEGDISTRIB
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $NEGDISTRIB
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $NEGDISTRIB
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes negations to be distributed over sums, e.g. -(A+B) is
	 simplified to -A-B."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $NEGDISTRIB
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NUMER NIL ...)-6-1|
(CONST 0) = $NUMER
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NUMER
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $NUMER
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NUMER NIL ...)-6-2|
(CONST 0) = (SPECIAL $NUMER)
(CONST 1) = $NUMER
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes zl-SOME mathematical functions (including exponentiation)
	 with numerical arguments to be evaluated in floating point.
	 It causes variables in an expression which have been given
	 NUMERVALs to be replaced by their values.  It also turns
	 on the FLOAT switch."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $NUMER)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $NUMER
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $NUMER
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $NUMER
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes zl-SOME mathematical functions (including exponentiation)
	 with numerical arguments to be evaluated in floating point.
	 It causes variables in an expression which have been given
	 NUMERVALs to be replaced by their values.  It also turns
	 on the FLOAT switch."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $NUMER
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SIMP T ...)-7-1|
(CONST 0) = $SIMP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SIMP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SIMP
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SIMP T ...)-7-2|
(CONST 0) = (SPECIAL $SIMP)
(CONST 1) = $SIMP
(CONST 2) = VARIABLE
(CONST 3) = "Enables simplification."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SIMP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SIMP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SIMP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $SIMP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Enables simplification."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $SIMP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SUMEXPAND NIL ...)-8-1|
(CONST 0) = $SUMEXPAND
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SUMEXPAND
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SUMEXPAND
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SUMEXPAND NIL ...)-8-2|
(CONST 0) = (SPECIAL $SUMEXPAND)
(CONST 1) = $SUMEXPAND
(CONST 2) = VARIABLE
(CONST 3) = 
"If TRUE, products of sums and exponentiated sums go into nested 
	 sums."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SUMEXPAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SUMEXPAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SUMEXPAND
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $SUMEXPAND
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If TRUE, products of sums and exponentiated sums go into nested 
	 sums."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $SUMEXPAND
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NUMER_PBRANCH NIL)-9-1|
(CONST 0) = $NUMER_PBRANCH
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NUMER_PBRANCH
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $NUMER_PBRANCH
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NUMER_PBRANCH NIL)-9-2|
(CONST 0) = (SPECIAL $NUMER_PBRANCH)
(CONST 1) = $NUMER_PBRANCH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $NUMER_PBRANCH)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $NUMER_PBRANCH
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $NUMER_PBRANCH
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $NUMER_PBRANCH
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DOSCMXPLUS NIL ...)-10-1|
(CONST 0) = $DOSCMXPLUS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DOSCMXPLUS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DOSCMXPLUS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DOSCMXPLUS NIL ...)-10-2|
(CONST 0) = (SPECIAL $DOSCMXPLUS)
(CONST 1) = $DOSCMXPLUS
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes SCALAR + MATRIX to return a matrix answer.  This switch
	 is not subsumed under DOALLMXOPS."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DOSCMXPLUS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DOSCMXPLUS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DOSCMXPLUS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $DOSCMXPLUS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes SCALAR + MATRIX to return a matrix answer.  This switch
	 is not subsumed under DOALLMXOPS."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $DOSCMXPLUS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DOMXEXPT T ...)-11-1|
(CONST 0) = $DOMXEXPT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DOMXEXPT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DOMXEXPT
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DOMXEXPT T ...)-11-2|
(CONST 0) = (SPECIAL $DOMXEXPT)
(CONST 1) = $DOMXEXPT
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes SCALAR^MATRIX([1,2],[3,4]) to return
	 MATRIX([SCALAR,SCALAR^2],[SCALAR^3,SCALAR^4]).  In general, this
	 transformation affects exponentiations where the *print-base* is a scalar
	 and the power is a matrix or list."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DOMXEXPT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DOMXEXPT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DOMXEXPT
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $DOMXEXPT
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes SCALAR^MATRIX([1,2],[3,4]) to return
	 MATRIX([SCALAR,SCALAR^2],[SCALAR^3,SCALAR^4]).  In general, this
	 transformation affects exponentiations where the *print-base* is a scalar
	 and the power is a matrix or list."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $DOMXEXPT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DOMXPLUS NIL)-12-1|
(CONST 0) = $DOMXPLUS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DOMXPLUS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DOMXPLUS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DOMXPLUS NIL)-12-2|
(CONST 0) = (SPECIAL $DOMXPLUS)
(CONST 1) = $DOMXPLUS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DOMXPLUS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DOMXPLUS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DOMXPLUS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $DOMXPLUS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DOMXTIMES NIL)-13-1|
(CONST 0) = $DOMXTIMES
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DOMXTIMES
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DOMXTIMES
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DOMXTIMES NIL)-13-2|
(CONST 0) = (SPECIAL $DOMXTIMES)
(CONST 1) = $DOMXTIMES
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DOMXTIMES)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DOMXTIMES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DOMXTIMES
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $DOMXTIMES
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MX0SIMP T)-14-1|
(CONST 0) = $MX0SIMP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MX0SIMP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $MX0SIMP
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MX0SIMP T)-14-2|
(CONST 0) = (SPECIAL $MX0SIMP)
(CONST 1) = $MX0SIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $MX0SIMP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $MX0SIMP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $MX0SIMP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $MX0SIMP
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $EXPOP 0 ...)-15-1|
(CONST 0) = $EXPOP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPOP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $EXPOP
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 0
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $EXPOP 0 ...)-15-2|
(CONST 0) = (SPECIAL $EXPOP)
(CONST 1) = $EXPOP
(CONST 2) = 0
(CONST 3) = VARIABLE
(CONST 4) = 
"The largest positive exponent which will be automatically
	 expanded.  (X+1)^3 will be automatically expanded if
	 EXPOP is greater than or equal to 3."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $EXPOP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $EXPOP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $EXPOP
8     (CONST&PUSH 2)                      ; 0
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $EXPOP
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The largest positive exponent which will be automatically
	 expanded.  (X+1)^3 will be automatically expanded if
	 EXPOP is greater than or equal to 3."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $EXPOP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $EXPON 0 ...)-16-1|
(CONST 0) = $EXPON
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPON
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $EXPON
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 0
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $EXPON 0 ...)-16-2|
(CONST 0) = (SPECIAL $EXPON)
(CONST 1) = $EXPON
(CONST 2) = 0
(CONST 3) = VARIABLE
(CONST 4) = 
"The largest negative exponent which will be automatically
	 expanded.  (X+1)^(-3) will be automatically expanded if
	 EXPON is greater than or equal to 3."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $EXPON)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $EXPON
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $EXPON
8     (CONST&PUSH 2)                      ; 0
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $EXPON
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The largest negative exponent which will be automatically
	 expanded.  (X+1)^(-3) will be automatically expanded if
	 EXPON is greater than or equal to 3."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $EXPON
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MAXPOSEX 1000 ...)-17-1|
(CONST 0) = $MAXPOSEX
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 1000
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAXPOSEX
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $MAXPOSEX
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 1000
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MAXPOSEX 1000 ...)-17-2|
(CONST 0) = (SPECIAL $MAXPOSEX)
(CONST 1) = $MAXPOSEX
(CONST 2) = 1000
(CONST 3) = VARIABLE
(CONST 4) = 
"The largest positive exponent which will be expanded by
	 the EXPAND command."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $MAXPOSEX)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $MAXPOSEX
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $MAXPOSEX
8     (CONST&PUSH 2)                      ; 1000
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $MAXPOSEX
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The largest positive exponent which will be expanded by
	 the EXPAND command."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $MAXPOSEX
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MAXNEGEX 1000 ...)-18-1|
(CONST 0) = $MAXNEGEX
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 1000
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAXNEGEX
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $MAXNEGEX
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 1000
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $MAXNEGEX 1000 ...)-18-2|
(CONST 0) = (SPECIAL $MAXNEGEX)
(CONST 1) = $MAXNEGEX
(CONST 2) = 1000
(CONST 3) = VARIABLE
(CONST 4) = 
"The largest negative exponent which will be expanded by
	 the EXPAND command."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $MAXNEGEX)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $MAXNEGEX
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $MAXNEGEX
8     (CONST&PUSH 2)                      ; 1000
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $MAXNEGEX
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The largest negative exponent which will be expanded by
	 the EXPAND command."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $MAXNEGEX
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR DOSIMP NIL ...)-19-1|
(CONST 0) = DOSIMP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; DOSIMP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; DOSIMP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR DOSIMP NIL ...)-19-2|
(CONST 0) = (SPECIAL DOSIMP)
(CONST 1) = DOSIMP
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes SIMP flags to be ignored.  $EXPAND works by binding
	 $EXPOP to $MAXPOSEX, $EXPON to $MAXNEGEX, and DOSIMP to T."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL DOSIMP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; DOSIMP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; DOSIMP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; DOSIMP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes SIMP flags to be ignored.  $EXPAND works by binding
	 $EXPOP to $MAXPOSEX, $EXPON to $MAXNEGEX, and DOSIMP to T."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; DOSIMP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ERRORSW NIL ...)-20-1|
(CONST 0) = ERRORSW
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERRORSW
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ERRORSW
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ERRORSW NIL ...)-20-2|
(CONST 0) = (SPECIAL ERRORSW)
(CONST 1) = ERRORSW
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes a throw to the tag ERRORSW when certain errors occur
	 rather than the printing of a message.  Kludgy MAXIMA-SUBSTITUTE for
	 MAXIMA-ERROR signalling."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ERRORSW)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ERRORSW
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ERRORSW
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; ERRORSW
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes a throw to the tag ERRORSW when certain errors occur
	 rather than the printing of a message.  Kludgy MAXIMA-SUBSTITUTE for
	 MAXIMA-ERROR signalling."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; ERRORSW
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR DERIVSIMP T ...)-21-1|
(CONST 0) = DERIVSIMP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; DERIVSIMP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; DERIVSIMP
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR DERIVSIMP T ...)-21-2|
(CONST 0) = (SPECIAL DERIVSIMP)
(CONST 1) = DERIVSIMP
(CONST 2) = VARIABLE
(CONST 3) = "Hack in SIMPDERIV for RWG"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL DERIVSIMP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; DERIVSIMP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; DERIVSIMP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; DERIVSIMP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Hack in SIMPDERIV for RWG"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; DERIVSIMP
18    (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL $ROOTSEPSILON $GRINDSWITCH ...))-22|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ $ROOTSEPSILON 1.0E-7 ...)-23|
(CONST 0) = 1.0E-7
(CONST 1) = $ROOTSEPSILON
(CONST 2) = 0
(CONST 3) = $%RNUM
(CONST 4) = $GRINDSWITCH
(CONST 5) = 100000000
(CONST 6) = $ALGEPSILON
(CONST 7) = 1.0E-5
(CONST 8) = $ALGDELTA
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($ALGDELTA $ALGEPSILON $GRINDSWITCH $%RNUM $ROOTSEPSILON)
11 byte-code instructions:
0     (CONST 0)                           ; 1.0E-7
1     (SETVALUE 1)                        ; $ROOTSEPSILON
3     (CONST 2)                           ; 0
4     (SETVALUE 3)                        ; $%RNUM
6     (NIL)
7     (SETVALUE 4)                        ; $GRINDSWITCH
9     (CONST 5)                           ; 100000000
10    (SETVALUE 6)                        ; $ALGEPSILON
12    (CONST 7)                           ; 1.0E-5
13    (SETVALUE 8)                        ; $ALGDELTA
15    (SKIP&RET 1)


Disassembly of function #:|(PROGN (SETQ $LISTARITH T ...))-24|
(CONST 0) = $LISTARITH
(CONST 1) = WFLAG
(CONST 2) = $LOGNUMER
(CONST 3) = EXPANDP
(CONST 4) = $REAL
(CONST 5) = $DOMAIN
(CONST 6) = $M1PBRANCH
(CONST 7) = $%E_TO_NUMLOG
(CONST 8) = $%EMODE
(CONST 9) = TIMESINP
(CONST 10) = $TRUE
(CONST 11) = $FALSE
(CONST 12) = $ON
(CONST 13) = $OFF
(CONST 14) = $%E
(CONST 15) = $NUMER
(CONST 16) = MGET
(CONST 17) = %E-VAL
(CONST 18) = $%PI
(CONST 19) = %PI-VAL
(CONST 20) = $LOGABS
(CONST 21) = $LOGNEGINT
(CONST 22) = DERIVFLAG
(CONST 23) = $RATSIMPEXPONS
(CONST 24) = EXPTRLSW
(CONST 25) = $LOGEXPAND
(CONST 26) = EXPANDFLAG
(CONST 27) = $RADEXPAND
(CONST 28) = *ZEXPTSIMP?
(CONST 29) = $SUBNUMSIMP
(CONST 30) = RISCHPF
(CONST 31) = $COMPLEX
(CONST 32) = $LIMITDOMAIN
(CONST 33) = $LOGSIMP
(CONST 34) = RISCHP
(CONST 35) = RP-POLYLOGP
(CONST 36) = 0
(CONST 37) = *CONST*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : 
(*CONST* RP-POLYLOGP RISCHP $LOGSIMP $LIMITDOMAIN RISCHPF $SUBNUMSIMP
 *ZEXPTSIMP? $RADEXPAND EXPANDFLAG $LOGEXPAND EXPTRLSW $RATSIMPEXPONS DERIVFLAG
 $LOGNEGINT $LOGABS %PI-VAL %E-VAL $OFF $ON $FALSE $TRUE TIMESINP $%EMODE
 $%E_TO_NUMLOG $M1PBRANCH $DOMAIN EXPANDP $LOGNUMER WFLAG $LISTARITH)
57 byte-code instructions:
0     (T)
1     (SETVALUE 0)                        ; $LISTARITH
3     (NIL)
4     (SETVALUE 1)                        ; WFLAG
6     (SETVALUE 2)                        ; $LOGNUMER
8     (SETVALUE 3)                        ; EXPANDP
10    (CONST 4)                           ; $REAL
11    (SETVALUE 5)                        ; $DOMAIN
13    (NIL)
14    (SETVALUE 6)                        ; $M1PBRANCH
16    (SETVALUE 7)                        ; $%E_TO_NUMLOG
18    (T)
19    (SETVALUE 8)                        ; $%EMODE
21    (NIL)
22    (SETVALUE 9)                        ; TIMESINP
24    (T)
25    (SETVALUE 10)                       ; $TRUE
27    (NIL)
28    (SETVALUE 11)                       ; $FALSE
30    (T)
31    (SETVALUE 12)                       ; $ON
33    (NIL)
34    (SETVALUE 13)                       ; $OFF
36    (CONST&PUSH 14)                     ; $%E
37    (CONST&PUSH 15)                     ; $NUMER
38    (CALL2 16)                          ; MGET
40    (SETVALUE 17)                       ; %E-VAL
42    (CONST&PUSH 18)                     ; $%PI
43    (CONST&PUSH 15)                     ; $NUMER
44    (CALL2 16)                          ; MGET
46    (SETVALUE 19)                       ; %PI-VAL
48    (NIL)
49    (SETVALUE 20)                       ; $LOGABS
51    (SETVALUE 21)                       ; $LOGNEGINT
53    (SETVALUE 22)                       ; DERIVFLAG
55    (SETVALUE 23)                       ; $RATSIMPEXPONS
57    (SETVALUE 24)                       ; EXPTRLSW
59    (T)
60    (SETVALUE 25)                       ; $LOGEXPAND
62    (NIL)
63    (SETVALUE 26)                       ; EXPANDFLAG
65    (T)
66    (SETVALUE 27)                       ; $RADEXPAND
68    (NIL)
69    (SETVALUE 28)                       ; *ZEXPTSIMP?
71    (SETVALUE 29)                       ; $SUBNUMSIMP
73    (SETVALUE 30)                       ; RISCHPF
75    (CONST 31)                          ; $COMPLEX
77    (SETVALUE 32)                       ; $LIMITDOMAIN
79    (T)
80    (SETVALUE 33)                       ; $LOGSIMP
82    (NIL)
83    (SETVALUE 34)                       ; RISCHP
85    (SETVALUE 35)                       ; RP-POLYLOGP
87    (CONST 36)                          ; 0
89    (SETVALUE 37)                       ; *CONST*
91    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (MAPC #'# '#))-25|
(CONST 0) = ($%PI $%I $%E $%PHI $INF $MINF $INFINITY %I $%GAMMA)
(CONST 1) = X
(CONST 2) = $CONSTANT
(CONST 3) = MPUTPROP
(CONST 4) = SYSCONST
(CONST 5) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
23 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($%PI $%I $%E $%PHI $INF $MINF ...)
1     (JMP L27)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE&PUSH 1)                   ; X
10    (T&PUSH)
11    (CONST&PUSH 2)                      ; $CONSTANT
12    (CALL 3 3)                          ; MPUTPROP
15    (GETVALUE&PUSH 1)                   ; X
17    (T&PUSH)
18    (CONST&PUSH 4)                      ; SYSCONST
19    (CALL 3 5)                          ; PUTPROP
22    (UNBIND1)
23    (SKIP 1)
25    (LOAD&CDR&STORE 0)
27    L27
27    (LOAD&PUSH 0)
28    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
31    (SKIP 1)
33    (CONST 0)                           ; ($%PI $%I $%E $%PHI $INF $MINF ...)
34    (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNCTIMES T ...)-26|
(CONST 0) = MNCTIMES
(CONST 1) = ASSOCIATIVE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCTIMES
1     (CONST&PUSH 1)                      ; ASSOCIATIVE
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP LAMBDA T ...)-27|
(CONST 0) = LAMBDA
(CONST 1) = LISP-NO-SIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; LAMBDA
1     (CONST&PUSH 1)                      ; LISP-NO-SIMP
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (EVAL '#))-28|
(CONST 0) = 
(LET* ((X 1) (Y1 #'(LAMBDA (U) (+ X U))) (Z #'(LAMBDA NIL 3)))
 (DOLIST (Y (LIST X Z))
  (AND (CONSP Y) (SYMBOLP (CAR Y)) (SETF (GET (CAR Y) 'LISP-NO-SIMP) T))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; (LET* (# # #) (DOLIST # #))
1     (CALLS1 91)                         ; EVAL
3     (SKIP&RET 1)


Disassembly of function #:|(DOLIST (X '#) (PUTPROP X # ...))-29|
(CONST 0) = (MPLUS MTIMES MNCTIMES MEXPT MNCEXPT %SUM)
(CONST 1) = X
(CONST 2) = (SIMP)
(CONST 3) = MSIMPIND
(CONST 4) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
21 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MPLUS MTIMES MNCTIMES MEXPT ...)
1     (NIL)
2     (BIND 1)                            ; X
4     (JMP L21)
6     L6
6     (LOAD 3)
7     (CAR)
8     (SETVALUE 1)                        ; X
10    (PUSH)
11    (GETVALUE&PUSH 1)                   ; X
13    (CONST 2)                           ; (SIMP)
14    (CONS&PUSH)
15    (CONST&PUSH 3)                      ; MSIMPIND
16    (CALL 3 4)                          ; PUTPROP
19    (LOAD&CDR&STORE 3)
21    L21
21    (LOAD&PUSH 3)
22    (CALLS1&JMPIFNOT 146 L6)            ; ENDP
25    (NIL)
26    (UNBIND1)
27    (SKIP&RET 2)


Disassembly of function #:|(PROG1 '(OPERATORS PROPERTIES) (MAPC #'# '#))-30|
(CONST 0) = 
((MPLUS SIMPLUS) (MTIMES SIMPTIMES) (MNCEXPT SIMPNCEXPT) (MMINUS SIMPMIN)
 (%GAMMA SIMPGAMMA) (MFACTORIAL SIMPFACT) (MNCTIMES SIMPNCT)
 (MQUOTIENT SIMPQUOT) (MEXPT SIMPEXPT) (%LOG SIMPLN) (%SQRT SIMPSQRT)
 (%DERIVATIVE SIMPDERIV) (MABS SIMPABS) (%SIGNUM SIMPSIGNUM)
 (%INTEGRATE SIMPINTEG) (%LIMIT SIMP-LIMIT) ($EXP SIMPEXP)
 (BIGFLOAT SIMPBIGFLOAT) (LAMBDA SIMPLAMBDA) (MDEFINE SIMPMDEF)
 (MQAPPLY SIMPMQAPPLY) (%GAMMA SIMPGAMMA) (%ERF SIMPERF) ($BETA SIMPBETA)
 (%SUM SIMPSUM) (%BINOMIAL SIMPBINOCOEF) (%PLOG SIMPPLOG) (%PRODUCT SIMPPROD)
 (%GENFACT SIMPGFACT) ($ATAN2 SIMPATAN2) ($MATRIX SIMPMATRIX)
 (%MATRIX SIMPMATRIX) ($BERN SIMPBERN) ($EULER SIMPEULER))
(CONST 1) = X
(CONST 2) = OPERATORS
(CONST 3) = PUTPROP
(CONST 4) = (OPERATORS PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (CONST&PUSH 0)                      ; (# # # ...)
1     (JMP L24)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE 1)                        ; X
10    (CAR&PUSH)
11    (GETVALUE 1)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; OPERATORS
16    (CALL 3 3)                          ; PUTPROP
19    (UNBIND1)
20    (SKIP 1)
22    (LOAD&CDR&STORE 0)
24    L24
24    (LOAD&PUSH 0)
25    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
28    (SKIP 1)
30    (CONST 4)                           ; (OPERATORS PROPERTIES)
31    (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $LI LISIMP ...)-31|
(CONST 0) = $LI
(CONST 1) = SPECSIMP
(CONST 2) = LISIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LI
1     (CONST&PUSH 1)                      ; SPECSIMP
2     (CONST&PUSH 2)                      ; LISIMP
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $PSI PSISIMP ...)-32|
(CONST 0) = $PSI
(CONST 1) = SPECSIMP
(CONST 2) = PSISIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSI
1     (CONST&PUSH 1)                      ; SPECSIMP
2     (CONST&PUSH 2)                      ; PSISIMP
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $EQUAL T ...)-33|
(CONST 0) = $EQUAL
(CONST 1) = BINARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EQUAL
1     (CONST&PUSH 1)                      ; BINARY
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $NOTEQUAL T ...)-34|
(CONST 0) = $NOTEQUAL
(CONST 1) = BINARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOTEQUAL
1     (CONST&PUSH 1)                      ; BINARY
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO ONEP (A) ...)-35|
(CONST 0) = ONEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; ONEP
10    (SKIP&RET 1)


Disassembly of function ONEP
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = EQL
(CONST 3) = (1)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L18)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; EQL
12    (LOAD&PUSH 1)
13    (CONST 3)                           ; (1)
14    (LIST* 2)
16    (SKIP&RET 4)
18    L18
18    (LOAD&PUSH 2)
19    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
21    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN ONEP1 (A) ...)-36|
(CONST 0) = ONEP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEP1
8     (SKIP&RET 1)


Disassembly of function ONEP1
(CONST 0) = 1
(CONST 1) = BIGFLOATONE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BIGFLOATONE)
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 8 L11)             ; NUMBERP
4     (LOAD&PUSH 1)
5     (CONST&PUSH 0)                      ; 1
6     (CALLSR 1 45)                       ; =
9     (JMPIF1 L18)
11    L11
11    (LOAD&PUSH 1)
12    (GETVALUE&PUSH 1)                   ; BIGFLOATONE
14    (CALLS2 2)                          ; EQUAL
16    (SKIP&RET 2)
18    L18
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN ZEROP1 (A) ...)-37|
(CONST 0) = ZEROP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZEROP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZEROP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZEROP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZEROP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZEROP1
8     (SKIP&RET 1)


Disassembly of function ZEROP1
(CONST 0) = BIGFLOATZERO
(CONST 1) = ALIKE1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BIGFLOATZERO)
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L11)                ; NUMBERP
4     (LOAD&PUSH 1)
5     (GETVALUE&PUSH 0)                   ; BIGFLOATZERO
7     (CALL2 1)                           ; ALIKE1
9     (SKIP&RET 2)
11    L11
11    (LOAD&PUSH 1)
12    (CALLS2 145)                        ; ZEROP
14    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $BFLOATP (X) ...)-38|
(CONST 0) = $BFLOATP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BFLOATP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BFLOATP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BFLOATP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BFLOATP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BFLOATP
8     (SKIP&RET 1)


Disassembly of function $BFLOATP
(CONST 0) = X
(CONST 1) = BIGFLOAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; BIGFLOAT
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MNUMP (X) ...)-39|
(CONST 0) = MNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MNUMP
8     (SKIP&RET 1)


Disassembly of function MNUMP
(CONST 0) = X
(CONST 1) = (RAT BIGFLOAT)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 8)                          ; NUMBERP
7     (JMPIF1 L29)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALLS2 4)                          ; CONSP
13    (JMPIFNOT1 L29)
15    (GETVALUE 0)                        ; X
17    (CAR&PUSH)
18    (CALLS2 4)                          ; CONSP
20    (JMPIFNOT1 L29)
22    (GETVALUE 0)                        ; X
24    (CAR)
25    (CAR&PUSH)
26    (CONST&PUSH 1)                      ; (RAT BIGFLOAT)
27    (CALL2 2)                           ; MEMQ
29    L29
29    (UNBIND1)
30    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN EVEN (A) ...)-40|
(CONST 0) = EVEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVEN
8     (SKIP&RET 1)


Disassembly of function EVEN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 12)                         ; INTEGERP
3     (JMPIFNOT1 L11)
5     (LOAD&PUSH 1)
6     (CALLS2 148)                        ; ODDP
8     (NOT)
9     (SKIP&RET 2)
11    L11
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN RATNUMP (X) ...)-41|
(CONST 0) = RATNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATNUMP
8     (SKIP&RET 1)


Disassembly of function RATNUMP
(CONST 0) = X
(CONST 1) = RAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; RAT
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MPLUSP (X) ...)-42|
(CONST 0) = MPLUSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MPLUSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPLUSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MPLUSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MPLUSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MPLUSP
8     (SKIP&RET 1)


Disassembly of function MPLUSP
(CONST 0) = X
(CONST 1) = MPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MPLUS
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MTIMESP (X) ...)-43|
(CONST 0) = MTIMESP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MTIMESP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMESP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MTIMESP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MTIMESP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MTIMESP
8     (SKIP&RET 1)


Disassembly of function MTIMESP
(CONST 0) = X
(CONST 1) = MTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MTIMES
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MEXPTP (X) ...)-44|
(CONST 0) = MEXPTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEXPTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEXPTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEXPTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEXPTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEXPTP
8     (SKIP&RET 1)


Disassembly of function MEXPTP
(CONST 0) = X
(CONST 1) = MEXPT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MEXPT
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MNCTIMESP (X) ...)-45|
(CONST 0) = MNCTIMESP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MNCTIMESP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCTIMESP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MNCTIMESP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MNCTIMESP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MNCTIMESP
8     (SKIP&RET 1)


Disassembly of function MNCTIMESP
(CONST 0) = X
(CONST 1) = MNCTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MNCTIMES
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MNCEXPTP (X) ...)-46|
(CONST 0) = MNCEXPTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MNCEXPTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCEXPTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MNCEXPTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MNCEXPTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MNCEXPTP
8     (SKIP&RET 1)


Disassembly of function MNCEXPTP
(CONST 0) = X
(CONST 1) = MNCEXPT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MNCEXPT
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MLOGP (X) ...)-47|
(CONST 0) = MLOGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MLOGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLOGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MLOGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MLOGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MLOGP
8     (SKIP&RET 1)


Disassembly of function MLOGP
(CONST 0) = X
(CONST 1) = %LOG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; %LOG
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MMMINUSP (X) ...)-48|
(CONST 0) = MMMINUSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MMMINUSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMMINUSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MMMINUSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MMMINUSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MMMINUSP
8     (SKIP&RET 1)


Disassembly of function MMMINUSP
(CONST 0) = X
(CONST 1) = MMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MMINUS
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MNEGP (X) ...)-49|
(CONST 0) = MNEGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MNEGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNEGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MNEGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MNEGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MNEGP
8     (SKIP&RET 1)


Disassembly of function MNEGP
(CONST 0) = X
(CONST 1) = RATNUMP
(CONST 2) = $BFLOATP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 8 L27)                ; NUMBERP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1&JMPIF 1 L18)                 ; RATNUMP
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL1&JMPIFNOT 2 L31)              ; $BFLOATP
18    L18
18    (GETVALUE 0)                        ; X
20    (CDR)
21    (CAR)
22    L22
22    (PUSH)
23    (CALLS2 147)                        ; MINUSP
25    (JMP L32)
27    L27
27    (GETVALUE 0)                        ; X
29    (JMP L22)
31    L31
31    (NIL)
32    L32
32    (UNBIND1)
33    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MQAPPLYP (E) ...)-50|
(CONST 0) = MQAPPLYP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MQAPPLYP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQAPPLYP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MQAPPLYP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MQAPPLYP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MQAPPLYP
8     (SKIP&RET 1)


Disassembly of function MQAPPLYP
(CONST 0) = MQAPPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 4)                          ; CONSP
3     (JMPIFNOT1 L12)
5     (LOAD 1)
6     (CAR)
7     (CAR&PUSH)
8     (CONST 0)                           ; MQAPPLY
9     (EQ)
10    (SKIP&RET 2)
12    L12
12    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN RATDISREP (E) ...)-51|
(CONST 0) = RATDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATDISREP
8     (SKIP&RET 1)


Disassembly of function RATDISREP
(CONST 0) = $RATDISREP
(CONST 1) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; $RATDISREP
3     (NIL&PUSH)
4     (CALL2 1)                           ; SIMPLIFYA
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SRATSIMP (E) ...)-52|
(CONST 0) = SRATSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRATSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRATSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRATSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRATSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRATSIMP
8     (SKIP&RET 1)


Disassembly of function SRATSIMP
(CONST 0) = $RATSIMP
(CONST 1) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; $RATSIMP
3     (NIL&PUSH)
4     (CALL2 1)                           ; SIMPLIFYA
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SIMPCHECK (E FLAG) ...)-53|
(CONST 0) = SIMPCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPCHECK
8     (SKIP&RET 1)


Disassembly of function SIMPCHECK
(CONST 0) = FLAG
(CONST 1) = SPECREPP
(CONST 2) = SPECDISREP
(CONST 3) = SIMPLIFYA
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FLAG)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FLAG
3     (LOAD&PUSH 5)
4     (CALL1&JMPIF 1 L18)                 ; SPECREPP
7     (GETVALUE 0)                        ; FLAG
9     (JMPIF L23)
11    (LOAD&PUSH 5)
12    (NIL&PUSH)
13    (CALL2 3)                           ; SIMPLIFYA
15    L15
15    (UNBIND1)
16    (SKIP&RET 3)
18    L18
18    (LOAD&PUSH 5)
19    (CALL1 2)                           ; SPECDISREP
21    (JMP L15)
23    L23
23    (LOAD 5)
24    (JMP L15)


Disassembly of function #:|(DEFMFUN MRATCHECK (E) ...)-54|
(CONST 0) = MRATCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MRATCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MRATCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MRATCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MRATCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MRATCHECK
8     (SKIP&RET 1)


Disassembly of function MRATCHECK
(CONST 0) = $RATP
(CONST 1) = RATDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L7)                  ; $RATP
4     (LOAD 1)
5     (SKIP&RET 2)
7     L7
7     (LOAD&PUSH 1)
8     (CALL1 1)                           ; RATDISREP
10    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $NUMBERP (E) ...)-55|
(CONST 0) = $NUMBERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NUMBERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NUMBERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NUMBERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NUMBERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NUMBERP
8     (SKIP&RET 1)


Disassembly of function $NUMBERP
(CONST 0) = $RATNUMP
(CONST 1) = $FLOATNUMP
(CONST 2) = $BFLOATP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; $RATNUMP
3     (JMPIF1 L15)
5     (LOAD&PUSH 1)
6     (CALL1 1)                           ; $FLOATNUMP
8     (JMPIF1 L15)
10    (LOAD&PUSH 1)
11    (CALL1 2)                           ; $BFLOATP
13    (SKIP&RET 2)
15    L15
15    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $INTEGERP (X) ...)-56|
(CONST 0) = $INTEGERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INTEGERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INTEGERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INTEGERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INTEGERP
8     (SKIP&RET 1)


Disassembly of function $INTEGERP
(CONST 0) = X
(CONST 1) = $RATP
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 12)                         ; INTEGERP
7     (JMPIF1 L29)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 1)                           ; $RATP
13    (JMPIFNOT1 L29)
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CAR&PUSH)
19    (CALLS2 12)                         ; INTEGERP
21    (JMPIFNOT1 L29)
23    (GETVALUE 0)                        ; X
25    (CDR)
26    (CDR&PUSH)
27    (CONST 2)                           ; 1
28    (EQ)
29    L29
29    (UNBIND1)
30    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ODDP (X) ...)-57|
(CONST 0) = $ODDP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ODDP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODDP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ODDP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ODDP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ODDP
8     (SKIP&RET 1)


Disassembly of function $ODDP
(CONST 0) = X
(CONST 1) = $INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 12 L22)               ; INTEGERP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1&JMPIFNOT 1 L26)              ; $INTEGERP
13    (GETVALUE 0)                        ; X
15    (CDR)
16    (CAR)
17    L17
17    (PUSH)
18    (CALLS2 148)                        ; ODDP
20    (JMP L27)
22    L22
22    (GETVALUE 0)                        ; X
24    (JMP L17)
26    L26
26    (NIL)
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $EVENP (X) ...)-58|
(CONST 0) = $EVENP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EVENP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EVENP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EVENP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EVENP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EVENP
8     (SKIP&RET 1)


Disassembly of function $EVENP
(CONST 0) = X
(CONST 1) = $INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 12 L17)               ; INTEGERP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1&JMPIF 1 L23)                 ; $INTEGERP
13    (NIL)
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)
17    L17
17    (GETVALUE&PUSH 0)                   ; X
19    (CALLS2 149)                        ; EVENP
21    (JMP L14)
23    L23
23    (GETVALUE 0)                        ; X
25    (CDR)
26    (CAR&PUSH)
27    (CALLS2 148)                        ; ODDP
29    (NOT)
30    (JMP L14)


Disassembly of function #:|(DEFMFUN $FLOATNUMP (X) ...)-59|
(CONST 0) = $FLOATNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FLOATNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FLOATNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FLOATNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FLOATNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FLOATNUMP
8     (SKIP&RET 1)


Disassembly of function $FLOATNUMP
(CONST 0) = X
(CONST 1) = $RATP
(CONST 2) = ONEP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 15)                         ; FLOATP
7     (JMPIF1 L29)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 1)                           ; $RATP
13    (JMPIFNOT1 L29)
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CAR&PUSH)
19    (CALLS2 15)                         ; FLOATP
21    (JMPIFNOT1 L29)
23    (GETVALUE 0)                        ; X
25    (CDR)
26    (CDR&PUSH)
27    (CALL1 2)                           ; ONEP1
29    L29
29    (UNBIND1)
30    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $RATNUMP (X) ...)-60|
(CONST 0) = $RATNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATNUMP
8     (SKIP&RET 1)


Disassembly of function $RATNUMP
(CONST 0) = X
(CONST 1) = RATNUMP
(CONST 2) = $RATP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 12)                         ; INTEGERP
7     (JMPIF1 L35)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 1)                           ; RATNUMP
13    (JMPIF1 L35)
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1 2)                           ; $RATP
19    (JMPIFNOT1 L35)
21    (GETVALUE 0)                        ; X
23    (CDR)
24    (CAR&PUSH)
25    (CALLS2 12)                         ; INTEGERP
27    (JMPIFNOT1 L35)
29    (GETVALUE 0)                        ; X
31    (CDR)
32    (CDR&PUSH)
33    (CALLS2 12)                         ; INTEGERP
35    L35
35    (UNBIND1)
36    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $RATP (X) ...)-61|
(CONST 0) = $RATP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATP
8     (SKIP&RET 1)


Disassembly of function $RATP
(CONST 0) = X
(CONST 1) = MRAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MRAT
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $TAYLORP (X) ...)-62|
(CONST 0) = $TAYLORP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TAYLORP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAYLORP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TAYLORP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TAYLORP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TAYLORP
8     (SKIP&RET 1)


Disassembly of function $TAYLORP
(CONST 0) = X
(CONST 1) = MRAT
(CONST 2) = TRUNC
(CONST 3) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L27)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MRAT
14    (EQ)
15    (JMPIFNOT1 L27)
17    (CONST&PUSH 2)                      ; TRUNC
18    (GETVALUE 0)                        ; X
20    (CAR)
21    (CDR&PUSH)
22    (CALL2 3)                           ; MEMQ
24    (JMPIFNOT1 L27)
26    (T)
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SPECREPCHECK (E) ...)-63|
(CONST 0) = SPECREPCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPECREPCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPECREPCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPECREPCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPECREPCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPECREPCHECK
8     (SKIP&RET 1)


Disassembly of function SPECREPCHECK
(CONST 0) = SPECREPP
(CONST 1) = SPECDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L7)                  ; SPECREPP
4     (LOAD 1)
5     (SKIP&RET 2)
7     L7
7     (LOAD&PUSH 1)
8     (CALL1 1)                           ; SPECDISREP
10    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SPECREPP (E) ...)-64|
(CONST 0) = SPECREPP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPECREPP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPECREPP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPECREPP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPECREPP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPECREPP
8     (SKIP&RET 1)


Disassembly of function SPECREPP
(CONST 0) = (MRAT MPOIS)
(CONST 1) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 4)                          ; CONSP
3     (JMPIFNOT1 L13)
5     (LOAD 1)
6     (CAR)
7     (CAR&PUSH)
8     (CONST&PUSH 0)                      ; (MRAT MPOIS)
9     (CALL2 1)                           ; MEMQ
11    (SKIP&RET 2)
13    L13
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SPECDISREP (E) ...)-65|
(CONST 0) = SPECDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPECDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPECDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPECDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPECDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPECDISREP
8     (SKIP&RET 1)


Disassembly of function SPECDISREP
(CONST 0) = MRAT
(CONST 1) = RATDISREP
(CONST 2) = $OUTOFPOIS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (JMPIFEQTO 0 L11)                   ; MRAT
6     (LOAD&PUSH 1)
7     (CALL1 2)                           ; $OUTOFPOIS
9     (SKIP&RET 2)
11    L11
11    (LOAD&PUSH 1)
12    (CALL1 1)                           ; RATDISREP
14    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $POLYSIGN (X) ...)-66|
(CONST 0) = $POLYSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $POLYSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $POLYSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $POLYSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $POLYSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $POLYSIGN
8     (SKIP&RET 1)


Disassembly of function $POLYSIGN
(CONST 0) = X
(CONST 1) = RATF
(CONST 2) = 0
(CONST 3) = PMINUSP
(CONST 4) = -1
(CONST 5) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; RATF
7     (CDR)
8     (CAR)
9     (SETVALUE 0)                        ; X
11    (PUSH)
12    (JMPIFEQTO 2 L24)                   ; 0
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1&JMPIF 3 L27)                 ; PMINUSP
20    (CONST 5)                           ; 1
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)
24    L24
24    (CONST 2)                           ; 0
25    (JMP L21)
27    L27
27    (CONST 4)                           ; -1
28    (JMP L21)


Disassembly of function #:|(DEFMFUN ONEARGCHECK (L) ...)-67|
(CONST 0) = ONEARGCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEARGCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEARGCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEARGCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEARGCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEARGCHECK
8     (SKIP&RET 1)


Disassembly of function ONEARGCHECK
(CONST 0) = WNA-ERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (JMPIFNOT L9)
4     (LOAD 1)
5     (CDR)
6     (CDR)
7     (JMPIFNOT1 L16)
9     L9
9     (LOAD 1)
10    (CAR)
11    (CAR&PUSH)
12    (CALL1 0)                           ; WNA-ERR
14    (SKIP&RET 2)
16    L16
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN TWOARGCHECK (L) ...)-68|
(CONST 0) = TWOARGCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TWOARGCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TWOARGCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TWOARGCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TWOARGCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TWOARGCHECK
8     (SKIP&RET 1)


Disassembly of function TWOARGCHECK
(CONST 0) = WNA-ERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CDR)
3     (JMPIFNOT L11)
5     (LOAD 1)
6     (CDR)
7     (CDR)
8     (CDR)
9     (JMPIFNOT1 L18)
11    L11
11    (LOAD 1)
12    (CAR)
13    (CAR&PUSH)
14    (CALL1 0)                           ; WNA-ERR
16    (SKIP&RET 2)
18    L18
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN WNA-ERR (OP) ...)-69|
(CONST 0) = WNA-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WNA-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WNA-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WNA-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WNA-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WNA-ERR
8     (SKIP&RET 1)


Disassembly of function WNA-ERR
(CONST 0) = "Wrong number of arguments to ~:@M"
(CONST 1) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Wrong number of arguments to ~:@M"
1     (LOAD&PUSH 2)
2     (CALL2 1)                           ; MERROR
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN IMPROPER-ARG-ERR (EXP FN) ...)-70|
(CONST 0) = IMPROPER-ARG-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IMPROPER-ARG-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IMPROPER-ARG-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IMPROPER-ARG-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IMPROPER-ARG-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IMPROPER-ARG-ERR
8     (SKIP&RET 1)


Disassembly of function IMPROPER-ARG-ERR
(CONST 0) = "Improper argument to ~:M:~%~M"
(CONST 1) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Improper argument to ~:M:~%~M"
1     (LOAD&PUSH 2)
2     (LOAD&PUSH 4)
3     (CALL 3 1)                          ; MERROR
6     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN SUBARGCHECK (FORM SUBSHARP ARGSHARP ...) ...)-71|
(CONST 0) = SUBARGCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBARGCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBARGCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBARGCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBARGCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBARGCHECK
8     (SKIP&RET 1)


Disassembly of function SUBARGCHECK
(CONST 0) = SUBFUNSUBS
(CONST 1) = SUBFUNARGS
(CONST 2) = "Wrong number of arguments or subscripts to ~:@M"
(CONST 3) = MERROR
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD&PUSH 4)
1     (CALL1&PUSH 0)                      ; SUBFUNSUBS
3     (CALLS2&PUSH 71)                    ; LENGTH
5     (LOAD&PUSH 4)
6     (CALLSR&JMPIFNOT 1 45 L22)          ; =
10    (LOAD&PUSH 4)
11    (CALL1&PUSH 1)                      ; SUBFUNARGS
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (LOAD&PUSH 3)
16    (CALLSR 1 45)                       ; =
19    (NOT)
20    (JMPIFNOT1 L28)
22    L22
22    (CONST&PUSH 2)                      ; "Wrong number of arguments or subscripts to ~:@M"
23    (LOAD&PUSH 2)
24    (CALL2 3)                           ; MERROR
26    (SKIP&RET 5)
28    L28
28    (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN SUBFUNMAKES (FUN SUBL ARGL) ...)-72|
(CONST 0) = SUBFUNMAKES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBFUNMAKES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBFUNMAKES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBFUNMAKES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBFUNMAKES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBFUNMAKES
8     (SKIP&RET 1)


Disassembly of function SUBFUNMAKES
(CONST 0) = (MQAPPLY SIMP)
(CONST 1) = (SIMP ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MQAPPLY SIMP)
1     (LOAD&PUSH 4)
2     (CONST 1)                           ; (SIMP ARRAY)
3     (CONS&PUSH)
4     (LOAD 4)
5     (CONS&PUSH)
6     (LOAD 3)
7     (LIST* 2)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SUBFUNMAKE (FUN SUBL ARGL) ...)-73|
(CONST 0) = SUBFUNMAKE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBFUNMAKE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBFUNMAKE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBFUNMAKE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBFUNMAKE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBFUNMAKE
8     (SKIP&RET 1)


Disassembly of function SUBFUNMAKE
(CONST 0) = (MQAPPLY)
(CONST 1) = (SIMP ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MQAPPLY)
1     (LOAD&PUSH 4)
2     (CONST 1)                           ; (SIMP ARRAY)
3     (CONS&PUSH)
4     (LOAD 4)
5     (CONS&PUSH)
6     (LOAD 3)
7     (LIST* 2)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SUBFUNNAME (EXP) ...)-74|
(CONST 0) = SUBFUNNAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBFUNNAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBFUNNAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBFUNNAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBFUNNAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBFUNNAME
8     (SKIP&RET 1)


Disassembly of function SUBFUNNAME
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR)
3     (CAR)
4     (CAR)
5     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SUBFUNSUBS (EXP) ...)-75|
(CONST 0) = SUBFUNSUBS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBFUNSUBS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBFUNSUBS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBFUNSUBS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBFUNSUBS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBFUNSUBS
8     (SKIP&RET 1)


Disassembly of function SUBFUNSUBS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR)
3     (CDR)
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SUBFUNARGS (EXP) ...)-76|
(CONST 0) = SUBFUNARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBFUNARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBFUNARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBFUNARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBFUNARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBFUNARGS
8     (SKIP&RET 1)


Disassembly of function SUBFUNARGS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CDR)
3     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $NUMFACTOR (X) ...)-77|
(CONST 0) = $NUMFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NUMFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NUMFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NUMFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NUMFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NUMFACTOR
8     (SKIP&RET 1)


Disassembly of function $NUMFACTOR
(CONST 0) = X
(CONST 1) = SPECREPCHECK
(CONST 2) = MNUMP
(CONST 3) = 1
(CONST 4) = MTIMES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; SPECREPCHECK
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (CALL1&JMPIF 2 L35)                 ; MNUMP
13    (GETVALUE 0)                        ; X
15    (JMPIFATOM L39)
17    (GETVALUE 0)                        ; X
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFNOTEQTO 4 L42)                ; MTIMES
24    (GETVALUE 0)                        ; X
26    (CDR)
27    (CAR&PUSH)
28    (CALL1&JMPIF 2 L45)                 ; MNUMP
31    (CONST 3)                           ; 1
32    L32
32    (UNBIND1)
33    (SKIP&RET 2)
35    L35
35    (GETVALUE 0)                        ; X
37    (JMP L32)
39    L39
39    (CONST 3)                           ; 1
40    (JMP L32)
42    L42
42    (CONST 3)                           ; 1
43    (JMP L32)
45    L45
45    (GETVALUE 0)                        ; X
47    (CDR)
48    (CAR)
49    (JMP L32)


Disassembly of function #:|(DEFUN SCALAR-OR-CONSTANT-P (X FLAG) ...)-78|
(CONST 0) = SCALAR-OR-CONSTANT-P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCALAR-OR-CONSTANT-P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCALAR-OR-CONSTANT-P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCALAR-OR-CONSTANT-P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCALAR-OR-CONSTANT-P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCALAR-OR-CONSTANT-P
8     (SKIP&RET 1)


Disassembly of function SCALAR-OR-CONSTANT-P
(CONST 0) = X
(CONST 1) = FLAG
(CONST 2) = $NONSCALARP
(CONST 3) = $SCALARP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X FLAG)
16 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; FLAG
6     (GETVALUE 1)                        ; FLAG
8     (JMPIF L18)
10    (GETVALUE&PUSH 0)                   ; X
12    (CALL1 3)                           ; $SCALARP
14    L14
14    (UNBIND 2)
16    (SKIP&RET 3)
18    L18
18    (GETVALUE&PUSH 0)                   ; X
20    (CALL1 2)                           ; $NONSCALARP
22    (NOT)
23    (JMP L14)


Disassembly of function #:|(DEFMFUN $CONSTANTP (X) ...)-79|
(CONST 0) = $CONSTANTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CONSTANTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONSTANTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CONSTANTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CONSTANTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CONSTANTP
8     (SKIP&RET 1)


Disassembly of function $CONSTANTP
(CONST 0) = X
(CONST 1) = $NUMBERP
(CONST 2) = $CONSTANT
(CONST 3) = MGET
(CONST 4) = (RAT BIGFLOAT)
(CONST 5) = MEMQ
(CONST 6) = SPECREPP
(CONST 7) = SPECDISREP
(CONST 8) = MOPP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
65 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L39)
7     (GETVALUE 0)                        ; X
9     (CAR)
10    (CAR&PUSH)
11    (CONST&PUSH 4)                      ; (RAT BIGFLOAT)
12    (CALL2&JMPIF 5 L52)                 ; MEMQ
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1&JMPIF 6 L55)                 ; SPECREPP
20    (GETVALUE 0)                        ; X
22    (CAR)
23    (CAR&PUSH)
24    (CALL1&JMPIF 8 L67)                 ; MOPP
27    (GETVALUE 0)                        ; X
29    (CAR)
30    (CAR&PUSH)
31    (CONST&PUSH 2)                      ; $CONSTANT
32    (CALL2&JMPIF 3 L67)                 ; MGET
35    (NIL)
36    L36
36    (UNBIND1)
37    (SKIP&RET 2)
39    L39
39    (GETVALUE&PUSH 0)                   ; X
41    (CALL1 1)                           ; $NUMBERP
43    (JMPIF1 L36)
45    (GETVALUE&PUSH 0)                   ; X
47    (CONST&PUSH 2)                      ; $CONSTANT
48    (CALL2 3)                           ; MGET
50    (JMP L36)
52    L52
52    (T)
53    (JMP L36)
55    L55
55    (GETVALUE&PUSH 0)                   ; X
57    (CALL1&PUSH 7)                      ; SPECDISREP
59    (JSR L0)
61    (JMP L36)
63    L63
63    (NIL)
64    (UNBIND1)
65    (JMP L36)
67    L67
67    (GETVALUE 0)                        ; X
69    (CDR)
70    (BIND 0)                            ; X
72    (GETVALUE 0)                        ; X
74    (JMPIFNOT L93)
76    L76
76    (GETVALUE 0)                        ; X
78    (CAR&PUSH)
79    (JSR L0)
82    (JMPIFNOT L63)
84    (GETVALUE 0)                        ; X
86    (CDR)
87    (SETVALUE 0)                        ; X
89    (GETVALUE 0)                        ; X
91    (JMPIF L76)
93    L93
93    (T)
94    (UNBIND1)
95    (JMP L36)


Disassembly of function #:|(DEFMFUN CONSTANT (X) ...)-80|
(CONST 0) = CONSTANT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTANT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTANT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTANT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTANT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTANT
8     (SKIP&RET 1)


Disassembly of function CONSTANT
(CONST 0) = X
(CONST 1) = $CONSTANT
(CONST 2) = MGET
(CONST 3) = $SUBVARP
(CONST 4) = $CONSTANTP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
44 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 6 L17)                ; SYMBOLP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1&JMPIF 3 L28)                 ; $SUBVARP
13    (NIL)
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)
17    L17
17    (GETVALUE&PUSH 0)                   ; X
19    (CONST&PUSH 1)                      ; $CONSTANT
20    (CALL2 2)                           ; MGET
22    (JMP L14)
24    L24
24    (NIL)
25    (UNBIND1)
26    (JMP L14)
28    L28
28    (GETVALUE 0)                        ; X
30    (CAR)
31    (CAR&PUSH)
32    (CONST&PUSH 1)                      ; $CONSTANT
33    (CALL2 2)                           ; MGET
35    (JMPIFNOT1 L14)
37    (GETVALUE 0)                        ; X
39    (CDR)
40    (BIND 0)                            ; X
42    (GETVALUE 0)                        ; X
44    (JMPIFNOT L61)
46    L46
46    (GETVALUE 0)                        ; X
48    (CAR&PUSH)
49    (CALL1&JMPIFNOT 4 L24)              ; $CONSTANTP
52    (GETVALUE 0)                        ; X
54    (CDR)
55    (SETVALUE 0)                        ; X
57    (GETVALUE 0)                        ; X
59    (JMPIF L46)
61    L61
61    (T)
62    (UNBIND1)
63    (JMP L14)


Disassembly of function #:|(DEFUN MAXIMA-CONSTANTP (X) ...)-81|
(CONST 0) = MAXIMA-CONSTANTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMA-CONSTANTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-CONSTANTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-CONSTANTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMA-CONSTANTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMA-CONSTANTP
8     (SKIP&RET 1)


Disassembly of function MAXIMA-CONSTANTP
(CONST 0) = X
(CONST 1) = $CONSTANT
(CONST 2) = MGET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 8)                          ; NUMBERP
7     (JMPIF1 L14)
9     (GETVALUE&PUSH 0)                   ; X
11    (CONST&PUSH 1)                      ; $CONSTANT
12    (CALL2 2)                           ; MGET
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CONSTTERMP (X) ...)-82|
(CONST 0) = CONSTTERMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTTERMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTTERMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTTERMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTTERMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTTERMP
8     (SKIP&RET 1)


Disassembly of function CONSTTERMP
(CONST 0) = X
(CONST 1) = $CONSTANTP
(CONST 2) = $NONSCALARP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; $CONSTANTP
7     (JMPIFNOT1 L14)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 2)                           ; $NONSCALARP
13    (NOT)
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $SCALARP (X) ...)-83|
(CONST 0) = $SCALARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SCALARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SCALARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SCALARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SCALARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SCALARP
8     (SKIP&RET 1)


Disassembly of function $SCALARP
(CONST 0) = X
(CONST 1) = CONSTTERMP
(CONST 2) = SCALARCLASS
(CONST 3) = $SCALAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; CONSTTERMP
7     (JMPIF1 L15)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1&PUSH 2)                      ; SCALARCLASS
13    (CONST 3)                           ; $SCALAR
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $NONSCALARP (X) ...)-84|
(CONST 0) = $NONSCALARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NONSCALARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NONSCALARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NONSCALARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NONSCALARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NONSCALARP
8     (SKIP&RET 1)


Disassembly of function $NONSCALARP
(CONST 0) = X
(CONST 1) = SCALARCLASS
(CONST 2) = $NONSCALAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&PUSH 1)                      ; SCALARCLASS
7     (CONST 2)                           ; $NONSCALAR
8     (EQ)
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SCALARCLASS (EXP) ...)-85|
(CONST 0) = SCALARCLASS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCALARCLASS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCALARCLASS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCALARCLASS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCALARCLASS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCALARCLASS
8     (SKIP&RET 1)


Disassembly of function SCALARCLASS
(CONST 0) = $NONSCALAR
(CONST 1) = MGET
(CONST 2) = $SCALAR
(CONST 3) = SPECREPP
(CONST 4) = SPECDISREP
(CONST 5) = (MPLUS MTIMES)
(CONST 6) = MEMQ
(CONST 7) = CONSTTERMP
(CONST 8) = SCALARCLASS-LIST
(CONST 9) = MQAPPLY
(CONST 10) = MXORLISTP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
81 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L75)
4     (LOAD&PUSH 1)
5     (CALL1&JMPIF 3 L88)                 ; SPECREPP
9     (LOAD 1)
10    (CAR)
11    (CAR&PUSH)
12    (JSR L0)
14    (JMPIF1 L122)
17    (LOAD 1)
18    (CAR)
19    (CAR&PUSH)
20    (CONST&PUSH 5)                      ; (MPLUS MTIMES)
21    (CALL2&JMPIF 6 L101)                ; MEMQ
25    (LOAD 1)
26    (CAR)
27    (CAR&PUSH)
28    (JMPIFNOTEQTO 9 L39)                ; MQAPPLY
31    (LOAD 1)
32    (CDR)
33    (CAR&PUSH)
34    (JSR L0)
36    (JMPIF1 L122)
39    L39
39    (LOAD&PUSH 1)
40    (CALL1&JMPIF 10 L119)               ; MXORLISTP
44    (LOAD&CDR&PUSH 1)
46    (NIL&PUSH)
47    (LOAD&JMPIFNOT 1 L64)
50    L50
50    (LOAD&CAR&PUSH 1)
52    (CALL1&JMPIF 7 L59)                 ; CONSTTERMP
55    (LOAD&CAR&PUSH 1)
57    (LOAD&CONS&STORE 0)
59    L59
59    (LOAD&CDR&STORE 1)
61    (LOAD&JMPIF 1 L50)
64    L64
64    (LOAD&PUSH 0)
65    (CALL1 8)                           ; SCALARCLASS-LIST
67    (SKIP&RET 4)
69    L69
69    (CONST 0)                           ; $NONSCALAR
70    (SKIP&RET 2)
72    L72
72    (CONST 2)                           ; $SCALAR
73    (SKIP&RET 2)
75    L75
75    (LOAD&PUSH 1)
76    (CONST&PUSH 0)                      ; $NONSCALAR
77    (CALL2&JMPIF 1 L69)                 ; MGET
80    (LOAD&PUSH 1)
81    (CONST&PUSH 2)                      ; $SCALAR
82    (CALL2&JMPIF 1 L72)                 ; MGET
85    (NIL)
86    (SKIP&RET 2)
88    L88
88    (LOAD&PUSH 1)
89    (CALL1&PUSH 4)                      ; SPECDISREP
91    (JMPTAIL 1 3 L0)
96    L96
96    (LOAD&PUSH 0)
97    (CALL1 8)                           ; SCALARCLASS-LIST
99    (SKIP&RET 3)
101   L101
101   (LOAD&CDR&PUSH 1)
103   (LOAD&JMPIFNOT 0 L116)
106   L106
106   (LOAD&CAR&PUSH 0)
108   (CALL1&JMPIFNOT 7 L96)              ; CONSTTERMP
111   (LOAD&CDR&STORE 0)
113   (LOAD&JMPIF 0 L106)
116   L116
116   (CONST 2)                           ; $SCALAR
117   (SKIP&RET 3)
119   L119
119   (CONST 0)                           ; $NONSCALAR
120   (SKIP&RET 2)
122   L122
122   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SCALARCLASS-LIST (LLIST) ...)-86|
(CONST 0) = SCALARCLASS-LIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCALARCLASS-LIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCALARCLASS-LIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCALARCLASS-LIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCALARCLASS-LIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCALARCLASS-LIST
8     (SKIP&RET 1)


Disassembly of function SCALARCLASS-LIST
(CONST 0) = SCALARCLASS
(CONST 1) = $NONSCALAR
(CONST 2) = $SCALAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
35 byte-code instructions:
0     (LOAD&JMPIF 1 L21)
3     L3
3     (NIL)
4     (SKIP&RET 2)
6     L6
6     (LOAD&CAR&PUSH 1)
8     (CALL1 0)                           ; SCALARCLASS
10    (SKIP&RET 2)
12    L12
12    (CONST 1)                           ; $NONSCALAR
13    (SKIP&RET 4)
15    L15
15    (CONST 2)                           ; $SCALAR
16    (SKIP&RET 4)
18    L18
18    (LOAD&JMPIFNOT 1 L3)
21    L21
21    (LOAD 1)
22    (CDR)
23    (JMPIFNOT L6)
25    (LOAD&CAR&PUSH 1)
27    (CALL1&PUSH 0)                      ; SCALARCLASS
29    (LOAD&CDR&PUSH 2)
31    (JSR&PUSH L18)
33    (LOAD&PUSH 1)
34    (JMPIFEQTO 1 L12)                   ; $NONSCALAR
37    (LOAD&PUSH 0)
38    (JMPIFEQTO 1 L12)                   ; $NONSCALAR
41    (LOAD&PUSH 1)
42    (JMPIFNOTEQTO 2 L49)                ; $SCALAR
45    (LOAD&PUSH 0)
46    (JMPIFEQTO 2 L15)                   ; $SCALAR
49    L49
49    (NIL)
50    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN MBAGP (X) ...)-87|
(CONST 0) = MBAGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MBAGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MBAGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MBAGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MBAGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MBAGP
8     (SKIP&RET 1)


Disassembly of function MBAGP
(CONST 0) = X
(CONST 1) = (MEQUAL MLIST $MATRIX)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L16)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST&PUSH 1)                      ; (MEQUAL MLIST $MATRIX)
14    (CALL2 2)                           ; MEMQ
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MEQUALP (X) ...)-88|
(CONST 0) = MEQUALP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEQUALP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQUALP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEQUALP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEQUALP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEQUALP
8     (SKIP&RET 1)


Disassembly of function MEQUALP
(CONST 0) = X
(CONST 1) = MEQUAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MEQUAL
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MXORLISTP (X) ...)-89|
(CONST 0) = MXORLISTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MXORLISTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MXORLISTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MXORLISTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MXORLISTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MXORLISTP
8     (SKIP&RET 1)


Disassembly of function MXORLISTP
(CONST 0) = X
(CONST 1) = (MLIST $MATRIX)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L16)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST&PUSH 1)                      ; (MLIST $MATRIX)
14    (CALL2 2)                           ; MEMQ
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MXORLISTP1 (X) ...)-90|
(CONST 0) = MXORLISTP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MXORLISTP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MXORLISTP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MXORLISTP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MXORLISTP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MXORLISTP1
8     (SKIP&RET 1)


Disassembly of function MXORLISTP1
(CONST 0) = X
(CONST 1) = $MATRIX
(CONST 2) = MLIST
(CONST 3) = $LISTARITH
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($LISTARITH X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L27)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; $MATRIX
14    (EQ)
15    (JMPIF1 L27)
17    (GETVALUE 0)                        ; X
19    (CAR)
20    (CAR&PUSH)
21    (CONST 2)                           ; MLIST
22    (EQ)
23    (JMPIFNOT1 L27)
25    (GETVALUE 3)                        ; $LISTARITH
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN CONSTFUN (X) ...)-91|
(CONST 0) = CONSTFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTFUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTFUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTFUN
8     (SKIP&RET 1)


Disassembly of function CONSTFUN
(CONST 0) = X
(CONST 1) = *CONST*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*CONST*)
5 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; *CONST*
5     (UNBIND1)
6     (SKIP&RET 2)


Disassembly of function #:|(DEFUN CONSTMX (*CONST* X) ...)-92|
(CONST 0) = CONSTMX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTMX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTMX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTMX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTMX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTMX
8     (SKIP&RET 1)


Disassembly of function CONSTMX
(CONST 0) = *CONST*
(CONST 1) = X
(CONST 2) = CONSTFUN
(CONST 3) = FMAPL1
(CONST 4) = SIMPLIFYA
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; *CONST*
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (CONST&PUSH 2)                      ; CONSTFUN
7     (GETVALUE&PUSH 1)                   ; X
9     (CALL2&PUSH 3)                      ; FMAPL1
11    (T&PUSH)
12    (CALL2 4)                           ; SIMPLIFYA
14    (UNBIND 2)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN ISINOP (EXP VAR) ...)-93|
(CONST 0) = ISINOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ISINOP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ISINOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ISINOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ISINOP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ISINOP
8     (SKIP&RET 1)


Disassembly of function ISINOP
(CONST 0) = VAR
(CONST 1) = ARRAY
(CONST 2) = MEMQ
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
40 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD 5)
4     (JMPIFATOM L46)
6     (LOAD 5)
7     (CAR)
8     (CAR&PUSH)
9     (GETVALUE 0)                        ; VAR
11    (JMPIFNOTEQ L22)
13    (CONST&PUSH 1)                      ; ARRAY
14    (LOAD 6)
15    (CAR)
16    (CDR&PUSH)
17    (CALL2 2)                           ; MEMQ
19    (NOT)
20    (JMPIF1 L43)
22    L22
22    (LOAD&CDR&PUSH 5)
24    (LOAD&JMPIFNOT 0 L40)
27    L27
27    (LOAD&CAR&PUSH 0)
29    (GETVALUE&PUSH 0)                   ; VAR
31    (JSR L0)
33    (JMPIF L49)
35    (LOAD&CDR&STORE 0)
37    (LOAD&JMPIF 0 L27)
40    L40
40    (NIL)
41    (SKIP 1)
43    L43
43    (UNBIND1)
44    (SKIP&RET 3)
46    L46
46    (NIL)
47    (JMP L43)
49    L49
49    (T)
50    (SKIP 1)
52    (JMP L43)


Disassembly of function #:|(DEFMFUN FREE (EXP VAR) ...)-94|
(CONST 0) = FREE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREE
8     (SKIP&RET 1)


Disassembly of function FREE
(CONST 0) = VAR
(CONST 1) = ALIKE1
(CONST 2) = FREEL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
26 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; VAR
6     (CALL2&JMPIF 1 L30)                 ; ALIKE1
9     (LOAD 5)
10    (JMPIFATOM L33)
12    (LOAD 5)
13    (CAR)
14    (CAR&PUSH)
15    (GETVALUE&PUSH 0)                   ; VAR
17    (JSR L0)
19    (JMPIFNOT1 L27)
21    (LOAD&CDR&PUSH 5)
23    (GETVALUE&PUSH 0)                   ; VAR
25    (CALL2 2)                           ; FREEL
27    L27
27    (UNBIND1)
28    (SKIP&RET 3)
30    L30
30    (NIL)
31    (JMP L27)
33    L33
33    (T)
34    (JMP L27)


Disassembly of function #:|(DEFMFUN FREEL (L VAR) ...)-95|
(CONST 0) = FREEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEL
8     (SKIP&RET 1)


Disassembly of function FREEL
(CONST 0) = VAR
(CONST 1) = FREE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 5)
4     (LOAD&JMPIFNOT 0 L19)
7     L7
7     (LOAD&CAR&PUSH 0)
9     (GETVALUE&PUSH 0)                   ; VAR
11    (CALL2&JMPIFNOT 1 L25)              ; FREE
14    (LOAD&CDR&STORE 0)
16    (LOAD&JMPIF 0 L7)
19    L19
19    (T)
20    (SKIP 1)
22    L22
22    (UNBIND1)
23    (SKIP&RET 3)
25    L25
25    (NIL)
26    (SKIP 1)
28    (JMP L22)


Disassembly of function #:|(DEFMFUN FREEARGS (EXP VAR) ...)-96|
(CONST 0) = FREEARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEARGS
8     (SKIP&RET 1)


Disassembly of function FREEARGS
(CONST 0) = VAR
(CONST 1) = ALIKE1
(CONST 2) = MARGS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
34 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; VAR
6     (CALL2&JMPIF 1 L37)                 ; ALIKE1
9     (LOAD 5)
10    (JMPIFATOM L40)
12    (LOAD&PUSH 5)
13    (CALL1&PUSH 2)                      ; MARGS
15    (LOAD&JMPIFNOT 0 L31)
18    L18
18    (LOAD&CAR&PUSH 0)
20    (GETVALUE&PUSH 0)                   ; VAR
22    (JSR L0)
24    (JMPIFNOT L43)
26    (LOAD&CDR&STORE 0)
28    (LOAD&JMPIF 0 L18)
31    L31
31    (T)
32    (SKIP 1)
34    L34
34    (UNBIND1)
35    (SKIP&RET 3)
37    L37
37    (NIL)
38    (JMP L34)
40    L40
40    (T)
41    (JMP L34)
43    L43
43    (NIL)
44    (SKIP 1)
46    (JMP L34)


Disassembly of function #:|(DEFMFUN SIMPLIFYA (X Y) ...)-97|
(CONST 0) = SIMPLIFYA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPLIFYA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPLIFYA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPLIFYA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPLIFYA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPLIFYA
8     (SKIP&RET 1)


Disassembly of function SIMPLIFYA
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $%PI
(CONST 3) = $NUMER
(CONST 4) = %PI-VAL
(CONST 5) = $SIMP
(CONST 6) = "~%~S is a cons with an atomic cdr - SIMPLIFYA"
(CONST 7) = MERROR
(CONST 8) = LISP-NO-SIMP
(CONST 9) = RAT
(CONST 10) = *RED1
(CONST 11) = DOSIMP
(CONST 12) = SIMP
(CONST 13) = MEMQ
(CONST 14) = MRAT
(CONST 15) = (MPLUS MTIMES MEXPT)
(CONST 16) = OPERATORS
(CONST 17) = (SIMPLUS SIMPEXPT SIMPTIMES)
(CONST 18) = ARRAY
(CONST 19) = MPLUS
(CONST 20) = 1
(CONST 21) = SIMPLUS
(CONST 22) = MTIMES
(CONST 23) = SIMPTIMES
(CONST 24) = SIMPEXPT
(CONST 25) = LAMBDA
(CONST 26) = MAPPLY1
(CONST 27) = "Illegal form - SIMPLIFYA:~%~S"
(CONST 28) = OPERS
(CONST 29) = *OPERS-LIST
(CONST 30) = OPERS-LIST
(CONST 31) = OPER-APPLY
(CONST 32) = MQAPPLY
(CONST 33) = SUBSTP
(CONST 34) = $SUBNUMSIMP
(CONST 35) = "Improper value in functional position:~%~M"
(CONST 36) = RULECHK
(CONST 37) = SIMPARGS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*OPERS-LIST Y $NUMER %PI-VAL $SUBNUMSIMP SUBSTP DOSIMP $SIMP X)
290 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFATOM L180)
11    (GETVALUE 5)                        ; $SIMP
13    (JMPIFNOT L194)
16    (GETVALUE 0)                        ; X
18    (CAR)
19    (JMPIFATOM L207)
22    (GETVALUE 0)                        ; X
24    (CAR)
25    (CAR&PUSH)
26    (JMPIFEQTO 9 L270)                  ; RAT
30    (GETVALUE 11)                       ; DOSIMP
32    (JMPIF L43)
34    (CONST&PUSH 12)                     ; SIMP
35    (GETVALUE 0)                        ; X
37    (CAR)
38    (CDR&PUSH)
39    (CALL2&JMPIF 13 L277)               ; MEMQ
43    L43
43    (GETVALUE 0)                        ; X
45    (CAR)
46    (CAR&PUSH)
47    (JMPIFEQTO 14 L282)                 ; MRAT
51    (GETVALUE 0)                        ; X
53    (CAR)
54    (CAR&PUSH)
55    (CONST&PUSH 15)                     ; (MPLUS MTIMES MEXPT)
56    (CALL2&JMPIFNOT 13 L81)             ; MEMQ
59    (GETVALUE 0)                        ; X
61    (CAR)
62    (CAR&PUSH)
63    (CONST&PUSH 16)                     ; OPERATORS
64    (PUSH-UNBOUND 1)
66    (CALLS2&PUSH 132)                   ; GET
68    (CONST&PUSH 17)                     ; (SIMPLUS SIMPEXPT SIMPTIMES)
69    (CALL2&JMPIFNOT 13 L81)             ; MEMQ
72    (CONST&PUSH 18)                     ; ARRAY
73    (GETVALUE 0)                        ; X
75    (CAR)
76    (CDR&PUSH)
77    (CALL2&JMPIFNOT 13 L309)            ; MEMQ
81    L81
81    (GETVALUE 0)                        ; X
83    (CAR)
84    (CAR)
85    (JMPIFCONSP L353)
88    (GETVALUE 0)                        ; X
90    (CAR)
91    (CAR&PUSH)
92    (CONST&PUSH 28)                     ; OPERS
93    (PUSH-UNBOUND 1)
95    (CALLS2&JMPIF 132 L382)             ; GET
99    (GETVALUE 0)                        ; X
101   (CAR)
102   (CAR&PUSH)
103   (JMPIFNOTEQTO 32 L435)              ; MQAPPLY
107   (GETVALUE 0)                        ; X
109   (CDR)
110   (CAR)
111   (JMPIFATOM L137)
113   (GETVALUE&PUSH 33)                  ; SUBSTP
115   (JMPIFNOTEQTO 32 L435)              ; MQAPPLY
119   (GETVALUE 0)                        ; X
121   (CDR)
122   (CAR)
123   (CAR&PUSH)
124   (JMPIFEQTO 25 L137)                 ; LAMBDA
127   (GETVALUE 0)                        ; X
129   (CDR)
130   (CAR)
131   (CAR)
132   (CAR&PUSH)
133   (JMPIFNOTEQTO 25 L435)              ; LAMBDA
137   L137
137   (GETVALUE 0)                        ; X
139   (CDR)
140   (CAR&PUSH)
141   (CALLS2&JMPIF 6 L396)               ; SYMBOLP
145   (GETVALUE 0)                        ; X
147   (CDR)
148   (CAR)
149   (JMPIFCONSP L396)
152   (CONST&PUSH 18)                     ; ARRAY
153   (GETVALUE 0)                        ; X
155   (CAR)
156   (CDR&PUSH)
157   (CALL2&JMPIFNOT 13 L165)            ; MEMQ
160   (GETVALUE 34)                       ; $SUBNUMSIMP
162   (JMPIF L417)
165   L165
165   (CONST 35)                          ; "Improper value in functional position:~%~M"
167   L167
167   (PUSH)
168   (GETVALUE&PUSH 0)                   ; X
170   (CALL2 7)                           ; MERROR
172   (JMP L470)
175   L175
175   (GETVALUE 4)                        ; %PI-VAL
177   (JMP L470)
180   L180
180   (GETVALUE&PUSH 0)                   ; X
182   (JMPIFNOTEQTO 2 L189)               ; $%PI
185   (GETVALUE 3)                        ; $NUMER
187   (JMPIF L175)
189   L189
189   (GETVALUE 0)                        ; X
191   (JMP L470)
194   L194
194   (GETVALUE 0)                        ; X
196   (JMP L470)
199   L199
199   (CONST 6)                           ; "~%~S is a cons with an atomic cdr - SIMPLIFYA"
200   (JMP L167)
202   L202
202   (GETVALUE 0)                        ; X
204   (JMP L470)
207   L207
207   (GETVALUE 0)                        ; X
209   (CDR)
210   (JMPIFNOT L217)
212   (GETVALUE 0)                        ; X
214   (CDR)
215   (JMPIFATOM L199)
217   L217
217   (GETVALUE 0)                        ; X
219   (CAR&PUSH)
220   (CONST&PUSH 8)                      ; LISP-NO-SIMP
221   (PUSH-UNBOUND 1)
223   (CALLS2&JMPIF 132 L202)             ; GET
226   (GETVALUE 0)                        ; X
228   (CAR&PUSH)
229   (NIL&PUSH)
230   (GETVALUE 0)                        ; X
232   (CDR&PUSH)
233   (JMP L255)
235   L235
235   (LOAD&CAR&PUSH 0)
237   (LOAD 0)
238   (BIND 0)                            ; X
240   (GETVALUE&PUSH 0)                   ; X
242   (GETVALUE&PUSH 1)                   ; Y
244   (JSR L0)
247   (UNBIND1)
248   (PUSH)
249   (LOAD&CONS&STORE 2)
251   (SKIP 1)
253   (LOAD&CDR&STORE 0)
255   L255
255   (LOAD&PUSH 0)
256   (CALLS1&JMPIFNOT 146 L235)          ; ENDP
259   (SKIP 1)
261   (LOAD&PUSH 0)
262   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
264   (SKIP 1)
266   (CONS)
267   (JMP L470)
270   L270
270   (GETVALUE&PUSH 0)                   ; X
272   (CALL1 10)                          ; *RED1
274   (JMP L470)
277   L277
277   (GETVALUE 0)                        ; X
279   (JMP L470)
282   L282
282   (GETVALUE 0)                        ; X
284   (JMP L470)
287   L287
287   (GETVALUE&PUSH 0)                   ; X
289   (CONST&PUSH 20)                     ; 1
290   (GETVALUE&PUSH 1)                   ; Y
292   (CALL 3 21)                         ; SIMPLUS
295   (JMP L470)
298   L298
298   (GETVALUE&PUSH 0)                   ; X
300   (CONST&PUSH 20)                     ; 1
301   (GETVALUE&PUSH 1)                   ; Y
303   (CALL 3 23)                         ; SIMPTIMES
306   (JMP L470)
309   L309
309   (GETVALUE 0)                        ; X
311   (CAR)
312   (CAR&PUSH)
313   (JMPIFEQTO 19 L287)                 ; MPLUS
316   (GETVALUE 0)                        ; X
318   (CAR)
319   (CAR&PUSH)
320   (JMPIFEQTO 22 L298)                 ; MTIMES
323   (GETVALUE&PUSH 0)                   ; X
325   (CONST&PUSH 20)                     ; 1
326   (GETVALUE&PUSH 1)                   ; Y
328   (CALL 3 24)                         ; SIMPEXPT
331   (JMP L470)
334   L334
334   (GETVALUE 0)                        ; X
336   (CAR)
337   (CAR&PUSH)
338   (GETVALUE 0)                        ; X
340   (CDR&PUSH)
341   (GETVALUE 0)                        ; X
343   (CAR)
344   (CAR&PUSH)
345   (GETVALUE&PUSH 0)                   ; X
347   (CALL 4 26)                         ; MAPPLY1
350   (JMP L470)
353   L353
353   (GETVALUE 0)                        ; X
355   (CAR)
356   (CAR)
357   (CAR&PUSH)
358   (JMPIFEQTO 25 L334)                 ; LAMBDA
361   (GETVALUE 0)                        ; X
363   (CAR)
364   (CAR)
365   (CAR)
366   (JMPIFATOM L377)
368   (GETVALUE 0)                        ; X
370   (CAR)
371   (CAR)
372   (CAR)
373   (CAR&PUSH)
374   (JMPIFEQTO 25 L334)                 ; LAMBDA
377   L377
377   (CONST 27)                          ; "Illegal form - SIMPLIFYA:~%~S"
379   (JMP L167)
382   L382
382   (GETVALUE 29)                       ; *OPERS-LIST
384   (BIND 30)                           ; OPERS-LIST
386   (GETVALUE&PUSH 0)                   ; X
388   (GETVALUE&PUSH 1)                   ; Y
390   (CALL2 31)                          ; OPER-APPLY
392   (UNBIND1)
393   (JMP L470)
396   L396
396   (GETVALUE 0)                        ; X
398   (CDR)
399   (CAR&PUSH)
400   (GETVALUE 0)                        ; X
402   (CAR)
403   (CDR)
404   (CONS&PUSH)
405   (GETVALUE 0)                        ; X
407   (CDR)
408   (CDR)
409   (CONS&PUSH)
410   (GETVALUE&PUSH 1)                   ; Y
412   (JSR L0)
415   (JMP L470)
417   L417
417   (GETVALUE 0)                        ; X
419   (CDR)
420   (CAR)
421   (JMP L470)
423   L423
423   (LOAD&PUSH 0)
424   (GETVALUE&PUSH 0)                   ; X
426   (CONST&PUSH 20)                     ; 1
427   (GETVALUE&PUSH 1)                   ; Y
429   (FUNCALL 3)
431   (SKIP 1)
433   (JMP L470)
435   L435
435   (GETVALUE 0)                        ; X
437   (CAR)
438   (CAR&PUSH)
439   (CONST&PUSH 16)                     ; OPERATORS
440   (PUSH-UNBOUND 1)
442   (CALLS2&PUSH 132)                   ; GET
444   (LOAD&JMPIFNOT 0 L462)
447   (CONST&PUSH 18)                     ; ARRAY
448   (GETVALUE 0)                        ; X
450   (CAR)
451   (CDR&PUSH)
452   (CALL2&JMPIFNOT 13 L423)            ; MEMQ
455   (GETVALUE 0)                        ; X
457   (CAR)
458   (CAR&PUSH)
459   (CALL1&JMPIF 36 L423)               ; RULECHK
462   L462
462   (GETVALUE&PUSH 0)                   ; X
464   (GETVALUE&PUSH 1)                   ; Y
466   (CALL2 37)                          ; SIMPARGS
468   (SKIP 1)
470   L470
470   (UNBIND 2)
472   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN EQTEST (X CHECK) ...)-98|
(CONST 0) = EQTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EQTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EQTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EQTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EQTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EQTEST
8     (SKIP&RET 1)


Disassembly of function EQTEST
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = RAT
(CONST 3) = MRAT
(CONST 4) = SIMP
(CONST 5) = MEMQ
(CONST 6) = MSIMPIND
(CONST 7) = (SIMP)
(CONST 8) = ARRAY
(CONST 9) = (SIMP ARRAY)
(CONST 10) = (SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (Y)
135 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFATOM L96)
11    (GETVALUE 0)                        ; X
13    (CAR)
14    (CAR&PUSH)
15    (JMPIFEQTO 2 L96)                   ; RAT
19    (GETVALUE 0)                        ; X
21    (CAR)
22    (CAR&PUSH)
23    (JMPIFEQTO 3 L96)                   ; MRAT
27    (CONST&PUSH 4)                      ; SIMP
28    (GETVALUE 0)                        ; X
30    (CAR)
31    (CDR&PUSH)
32    (CALL2&JMPIF 5 L96)                 ; MEMQ
35    (GETVALUE 0)                        ; X
37    (CAR)
38    (CAR&PUSH)
39    (LOAD 8)
40    (CAR)
41    (CAR)
42    (JMPIFNOTEQ L135)
45    (GETVALUE 0)                        ; X
47    (CDR&PUSH)
48    (LOAD&CDR&PUSH 8)
50    (CALLS2&JMPIFNOT 2 L135)            ; EQUAL
54    (LOAD 7)
55    (CAR)
56    (CDR)
57    (JMPIF L71)
59    (LOAD 7)
60    (CAR)
61    (CAR&PUSH)
62    (CONST&PUSH 6)                      ; MSIMPIND
63    (PUSH-UNBOUND 1)
65    (CALLS2 132)                        ; GET
67    (SETVALUE 1)                        ; Y
69    (JMPIF L102)
71    L71
71    (CONST&PUSH 4)                      ; SIMP
72    (LOAD 8)
73    (CAR)
74    (CDR&PUSH)
75    (CALL2&JMPIF 5 L106)                ; MEMQ
78    (LOAD 7)
79    (CAR)
80    (CAR&PUSH)
81    (LOAD 8)
82    (CAR)
83    (CDR)
84    (JMPIF L111)
86    (CONST 7)                           ; (SIMP)
87    (CONS)
88    L88
88    (PUSH)
89    (LOAD 8)
90    (CDR)
91    (CONS)
92    (UNBIND1)
93    (JMP L184)
96    L96
96    (GETVALUE 0)                        ; X
98    (UNBIND1)
99    (JMP L184)
102   L102
102   (GETVALUE 1)                        ; Y
104   (JMP L88)
106   L106
106   (LOAD 7)
107   (UNBIND1)
108   (JMP L184)
111   L111
111   (CONST&PUSH 4)                      ; SIMP
112   (LOAD 9)
113   (CAR)
114   (CDR)
115   (CONS)
116   (CONS)
117   (JMP L88)
119   L119
119   (GETVALUE&PUSH 0)                   ; X
121   (GETVALUE 1)                        ; Y
123   (JMP L180)
125   L125
125   (GETVALUE&PUSH 0)                   ; X
127   (GETVALUE 0)                        ; X
129   (CAR)
130   (CAR&PUSH)
131   (CONST 9)                           ; (SIMP ARRAY)
132   (CONS)
133   (JMP L180)
135   L135
135   (GETVALUE 0)                        ; X
137   (CAR)
138   (CAR&PUSH)
139   (CONST&PUSH 6)                      ; MSIMPIND
140   (PUSH-UNBOUND 1)
142   (CALLS2 132)                        ; GET
144   (SETVALUE 1)                        ; Y
146   (JMPIF L119)
148   (CONST&PUSH 8)                      ; ARRAY
149   (GETVALUE 0)                        ; X
151   (CAR)
152   (CDR&PUSH)
153   (CALL2&JMPIF 5 L125)                ; MEMQ
156   (GETVALUE 0)                        ; X
158   (CAR)
159   (CAR&PUSH)
160   (LOAD 8)
161   (CAR)
162   (CAR)
163   (JMPIFNOTEQ L172)
165   (CONST&PUSH 8)                      ; ARRAY
166   (LOAD 8)
167   (CAR)
168   (CDR&PUSH)
169   (CALL2&JMPIF 5 L125)                ; MEMQ
172   L172
172   (GETVALUE&PUSH 0)                   ; X
174   (GETVALUE 0)                        ; X
176   (CAR)
177   (CAR&PUSH)
178   (CONST 10)                          ; (SIMP)
179   (CONS)
180   L180
180   (PUSH)
181   (CALLS1 168)                        ; RPLACA
183   (UNBIND1)
184   L184
184   (UNBIND1)
185   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RULECHK (X) ...)-99|
(CONST 0) = RULECHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RULECHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RULECHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RULECHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RULECHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RULECHK
8     (SKIP&RET 1)


Disassembly of function RULECHK
(CONST 0) = X
(CONST 1) = OLDRULES
(CONST 2) = MGET
(CONST 3) = RULES
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; OLDRULES
6     (CALL2 2)                           ; MGET
8     (JMPIF1 L17)
10    (GETVALUE&PUSH 0)                   ; X
12    (CONST&PUSH 3)                      ; RULES
13    (PUSH-UNBOUND 1)
15    (CALLS2 132)                        ; GET
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN RESIMPLIFY (X) ...)-100|
(CONST 0) = RESIMPLIFY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESIMPLIFY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESIMPLIFY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESIMPLIFY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESIMPLIFY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESIMPLIFY
8     (SKIP&RET 1)


Disassembly of function RESIMPLIFY
(CONST 0) = X
(CONST 1) = DOSIMP
(CONST 2) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T)
4     (BIND 1)                            ; DOSIMP
6     (GETVALUE&PUSH 0)                   ; X
8     (NIL&PUSH)
9     (CALL2 2)                           ; SIMPLIFYA
11    (UNBIND 2)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SSIMPLIFYA (X) ...)-101|
(CONST 0) = SSIMPLIFYA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SSIMPLIFYA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SSIMPLIFYA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SSIMPLIFYA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SSIMPLIFYA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SSIMPLIFYA
8     (SKIP&RET 1)


Disassembly of function SSIMPLIFYA
(CONST 0) = X
(CONST 1) = DOSIMP
(CONST 2) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T)
4     (BIND 1)                            ; DOSIMP
6     (GETVALUE&PUSH 0)                   ; X
8     (NIL&PUSH)
9     (CALL2 2)                           ; SIMPLIFYA
11    (UNBIND 2)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIMPARGS (X Y) ...)-102|
(CONST 0) = SIMPARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPARGS
8     (SKIP&RET 1)


Disassembly of function SIMPARGS
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = DIMENSION
(CONST 3) = DIMENSION-INFIX
(CONST 4) = BINARY
(CONST 5) = TWOARGCHECK
(CONST 6) = ARRAY
(CONST 7) = MEMQ
(CONST 8) = MARGS
(CONST 9) = "Subscripted variable found with no subscripts."
(CONST 10) = MERROR
(CONST 11) = (MLIST MEQUAL)
(CONST 12) = FLAG
(CONST 13) = SIMPLIFYA
(CONST 14) = SIMPCHECK
(CONST 15) = EQTEST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG Y X)
87 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (CAR)
9     (CAR&PUSH)
10    (CONST&PUSH 2)                      ; DIMENSION
11    (PUSH-UNBOUND 1)
13    (CALLS2&PUSH 132)                   ; GET
15    (JMPIFEQTO 3 L28)                   ; DIMENSION-INFIX
18    (GETVALUE 0)                        ; X
20    (CAR)
21    (CAR&PUSH)
22    (CONST&PUSH 4)                      ; BINARY
23    (PUSH-UNBOUND 1)
25    (CALLS2&JMPIFNOT 132 L32)           ; GET
28    L28
28    (GETVALUE&PUSH 0)                   ; X
30    (CALL1 5)                           ; TWOARGCHECK
32    L32
32    (CONST&PUSH 6)                      ; ARRAY
33    (GETVALUE 0)                        ; X
35    (CAR)
36    (CDR&PUSH)
37    (CALL2&JMPIFNOT 7 L45)              ; MEMQ
40    (GETVALUE&PUSH 0)                   ; X
42    (CALL1&JMPIFNOT 8 L70)              ; MARGS
45    L45
45    (GETVALUE 1)                        ; Y
47    (JMPIF L77)
49    L49
49    (GETVALUE 0)                        ; X
51    (CAR)
52    (CAR&PUSH)
53    (CONST&PUSH 11)                     ; (MLIST MEQUAL)
54    (CALL2 7)                           ; MEMQ
56    (BIND 12)                           ; FLAG
58    (GETVALUE 0)                        ; X
60    (CAR)
61    (CAR&PUSH)
62    (NIL)
63    (CONS&PUSH)
64    (NIL&PUSH)
65    (GETVALUE 0)                        ; X
67    (CDR&PUSH)
68    (JMP L104)
70    L70
70    (CONST&PUSH 9)                      ; "Subscripted variable found with no subscripts."
71    (CALL1 10)                          ; MERROR
73    (GETVALUE 1)                        ; Y
75    (JMPIFNOT L49)
77    L77
77    (GETVALUE 0)                        ; X
79    (JMP L117)
81    L81
81    (LOAD&PUSH 0)
82    (NIL&PUSH)
83    (CALL2 13)                          ; SIMPLIFYA
85    (JMP L97)
87    L87
87    (LOAD&CAR&PUSH 0)
89    (GETVALUE 12)                       ; FLAG
91    (JMPIF L81)
93    (LOAD&PUSH 0)
94    (NIL&PUSH)
95    (CALL2 14)                          ; SIMPCHECK
97    L97
97    (PUSH)
98    (LOAD&CONS&STORE 2)
100   (SKIP 1)
102   (LOAD&CDR&STORE 0)
104   L104
104   (LOAD&PUSH 0)
105   (CALLS1&JMPIFNOT 146 L87)           ; ENDP
108   (SKIP 1)
110   (LOAD&PUSH 0)
111   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
113   (SKIP 1)
115   (CONS)
116   (UNBIND1)
117   L117
117   (PUSH)
118   (GETVALUE&PUSH 0)                   ; X
120   (CALL2 15)                          ; EQTEST
122   (UNBIND 2)
124   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN ADDK (XX YY) ...)-103|
(CONST 0) = ADDK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADDK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADDK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADDK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADDK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADDK
8     (SKIP&RET 1)


Disassembly of function ADDK
(CONST 0) = 0
(CONST 1) = $BFLOATP
(CONST 2) = (MPLUS)
(CONST 3) = $BFLOAT
(CONST 4) = X
(CONST 5) = Y
(CONST 6) = FPCOFRAT
(CONST 7) = (RAT)
(CONST 8) = 1
(CONST 9) = (RAT)
(CONST 10) = (RAT)
(CONST 11) = (RAT)
(CONST 12) = TIMESKL
(CONST 13) = $FLOAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($FLOAT Y X)
writes special variables : (Y X)
171 byte-code instructions:
0     (LOAD&PUSH 2)
1     (JMPIFEQTO 0 L62)                   ; 0
4     (LOAD&PUSH 1)
5     (JMPIFEQTO 0 L65)                   ; 0
8     (LOAD&PUSH 2)
9     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
12    (LOAD&PUSH 1)
13    (CALLS2&JMPIF 8 L68)                ; NUMBERP
16    L16
16    (LOAD&PUSH 2)
17    (CALL1&JMPIF 1 L75)                 ; $BFLOATP
20    (LOAD&PUSH 1)
21    (CALL1&JMPIF 1 L75)                 ; $BFLOATP
24    (PUSH-NIL 3)
26    (LOAD 5)
27    (BIND 4)                            ; X
29    (LOAD 7)
30    (BIND 5)                            ; Y
32    (GETVALUE&PUSH 4)                   ; X
34    (CALLS2&JMPIF 8 L90)                ; NUMBERP
37    (GETVALUE&PUSH 5)                   ; Y
39    (CALLS2&JMPIFNOT 8 L147)            ; NUMBERP
43    (GETVALUE&PUSH 5)                   ; Y
45    (CALLS2&JMPIFNOT 15 L139)           ; FLOATP
49    (GETVALUE&PUSH 5)                   ; Y
51    (GETVALUE 4)                        ; X
53    L53
53    (PUSH)
54    (CALL1&PUSH 6)                      ; FPCOFRAT
56    (CALLSR 2 53)                       ; +
59    (JMP L278)
62    L62
62    (LOAD 1)
63    (SKIP&RET 3)
65    L65
65    (LOAD 2)
66    (SKIP&RET 3)
68    L68
68    (LOAD&PUSH 2)
69    (LOAD&PUSH 2)
70    (CALLSR 2 53)                       ; +
73    (SKIP&RET 3)
75    L75
75    (CONST&PUSH 2)                      ; (MPLUS)
76    (LOAD&PUSH 3)
77    (LOAD&PUSH 3)
78    (LIST&PUSH 3)
80    (CALL1 3)                           ; $BFLOAT
82    (SKIP&RET 3)
84    L84
84    (GETVALUE&PUSH 4)                   ; X
86    (GETVALUE 5)                        ; Y
88    (JMP L53)
90    L90
90    (GETVALUE&PUSH 4)                   ; X
92    (CALLS2&JMPIF 15 L84)               ; FLOATP
95    (CONST&PUSH 7)                      ; (RAT)
96    (GETVALUE&PUSH 4)                   ; X
98    (CONST&PUSH 8)                      ; 1
99    (LIST 3)
101   (SETVALUE 4)                        ; X
103   (JMP L147)
105   L105
105   (GETVALUE&PUSH 4)                   ; X
107   (GETVALUE&PUSH 5)                   ; Y
109   (CALLS2 181)                        ; TRUNCATE
111   (JMP L189)
114   L114
114   (GETVALUE&PUSH 4)                   ; X
116   (GETVALUE&PUSH 5)                   ; Y
118   (CALLS2 181)                        ; TRUNCATE
120   (JMP L220)
123   L123
123   (LOAD 8)
124   (JMP L278)
127   L127
127   (LOAD 8)
128   (CDR)
129   (CAR)
130   (JMP L278)
133   L133
133   (LOAD&PUSH 8)
134   (CALL1 6)                           ; FPCOFRAT
136   (JMP L278)
139   L139
139   (CONST&PUSH 9)                      ; (RAT)
140   (GETVALUE&PUSH 5)                   ; Y
142   (CONST&PUSH 8)                      ; 1
143   (LIST 3)
145   (SETVALUE 5)                        ; Y
147   L147
147   (GETVALUE 4)                        ; X
149   (CDR)
150   (CDR)
151   (CAR&PUSH)
152   (GETVALUE 5)                        ; Y
154   (CDR)
155   (CDR)
156   (CAR&PUSH)
157   (CALLSR&STORE 2 57 8)               ; GCD
161   (GETVALUE 4)                        ; X
163   (CDR)
164   (CDR)
165   (CAR)
166   (BIND 4)                            ; X
168   (LOAD 11)
169   (BIND 5)                            ; Y
171   (GETVALUE&PUSH 4)                   ; X
173   (CALLS2&JMPIFNOT 12 L182)           ; INTEGERP
176   (GETVALUE&PUSH 5)                   ; Y
178   (CALLS2&JMPIF 12 L105)              ; INTEGERP
182   L182
182   (GETVALUE&PUSH 4)                   ; X
184   (GETVALUE&PUSH 5)                   ; Y
186   (CALLSR 1 56)                       ; /
189   L189
189   (UNBIND 2)
191   (STORE 7)
192   (GETVALUE 5)                        ; Y
194   (CDR)
195   (CDR)
196   (CAR)
197   (BIND 4)                            ; X
199   (LOAD 11)
200   (BIND 5)                            ; Y
202   (GETVALUE&PUSH 4)                   ; X
204   (CALLS2&JMPIFNOT 12 L213)           ; INTEGERP
207   (GETVALUE&PUSH 5)                   ; Y
209   (CALLS2&JMPIF 12 L114)              ; INTEGERP
213   L213
213   (GETVALUE&PUSH 4)                   ; X
215   (GETVALUE&PUSH 5)                   ; Y
217   (CALLSR 1 56)                       ; /
220   L220
220   (UNBIND 2)
222   (STORE 6)
223   (CONST&PUSH 10)                     ; (RAT)
224   (CONST&PUSH 8)                      ; 1
225   (LOAD&PUSH 10)
226   (LIST&PUSH 3)
228   (CONST&PUSH 11)                     ; (RAT)
229   (GETVALUE 4)                        ; X
231   (CDR)
232   (CAR&PUSH)
233   (LOAD&PUSH 9)
234   (CALLSR&PUSH 2 55)                  ; *
237   (GETVALUE 5)                        ; Y
239   (CDR)
240   (CAR&PUSH)
241   (LOAD&PUSH 11)
242   (CALLSR&PUSH 2 55)                  ; *
245   (CALLSR&PUSH 2 53)                  ; +
248   (LOAD&PUSH 10)
249   (LOAD&PUSH 10)
250   (CALLSR&PUSH 2 55)                  ; *
253   (LIST&PUSH 3)
255   (CALL2 12)                          ; TIMESKL
257   (STORE 8)
259   (PUSH)
260   (CALLS2&JMPIF 8 L123)               ; NUMBERP
264   (LOAD 8)
265   (CDR)
266   (CDR)
267   (CAR&PUSH)
268   (JMPIFEQTO 8 L127)                  ; 1
272   (GETVALUE 13)                       ; $FLOAT
274   (JMPIF L133)
277   (LOAD 8)
278   L278
278   (UNBIND 2)
280   (SKIP&RET 6)


Disassembly of function #:|(DEFUN *RED1 (X) ...)-104|
(CONST 0) = *RED1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *RED1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *RED1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *RED1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *RED1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *RED1
8     (SKIP&RET 1)


Disassembly of function *RED1
(CONST 0) = X
(CONST 1) = SIMP
(CONST 2) = MEMQ
(CONST 3) = $FLOAT
(CONST 4) = FPCOFRAT
(CONST 5) = *RED
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($FLOAT X)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; SIMP
4     (GETVALUE 0)                        ; X
6     (CAR)
7     (CDR&PUSH)
8     (CALL2&JMPIF 2 L31)                 ; MEMQ
11    (GETVALUE 0)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CALL2 5)                           ; *RED
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)
25    L25
25    (GETVALUE&PUSH 0)                   ; X
27    (CALL1 4)                           ; FPCOFRAT
29    (JMP L22)
31    L31
31    (GETVALUE 3)                        ; $FLOAT
33    (JMPIF L25)
35    (GETVALUE 0)                        ; X
37    (JMP L22)


Disassembly of function #:|(DEFUN *RED (N D) ...)-105|
(CONST 0) = *RED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *RED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *RED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *RED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *RED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *RED
8     (SKIP&RET 1)


Disassembly of function *RED
(CONST 0) = 0
(CONST 1) = 1
(CONST 2) = X
(CONST 3) = Y
(CONST 4) = $FLOAT
(CONST 5) = FPCOFRAT1
(CONST 6) = (RAT SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($FLOAT Y X)
77 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIF 145 L97)              ; ZEROP
5     (LOAD&PUSH 1)
6     (JMPIFEQTO 1 L100)                  ; 1
10    (LOAD&PUSH 2)
11    (LOAD&PUSH 2)
12    (CALLSR&PUSH 2 57)                  ; GCD
15    (LOAD 3)
16    (BIND 2)                            ; X
18    (LOAD 3)
19    (BIND 3)                            ; Y
21    (GETVALUE&PUSH 2)                   ; X
23    (CALLS2&JMPIFNOT 12 L32)            ; INTEGERP
26    (GETVALUE&PUSH 3)                   ; Y
28    (CALLS2&JMPIF 12 L103)              ; INTEGERP
32    L32
32    (GETVALUE&PUSH 2)                   ; X
34    (GETVALUE&PUSH 3)                   ; Y
36    (CALLSR 1 56)                       ; /
39    L39
39    (UNBIND 2)
41    (STORE 3)
42    (LOAD 2)
43    (BIND 2)                            ; X
45    (LOAD 3)
46    (BIND 3)                            ; Y
48    (GETVALUE&PUSH 2)                   ; X
50    (CALLS2&JMPIFNOT 12 L58)            ; INTEGERP
53    (GETVALUE&PUSH 3)                   ; Y
55    (CALLS2&JMPIF 12 L112)              ; INTEGERP
58    L58
58    (GETVALUE&PUSH 2)                   ; X
60    (GETVALUE&PUSH 3)                   ; Y
62    (CALLSR 1 56)                       ; /
65    L65
65    (UNBIND 2)
67    (STORE 2)
68    (PUSH)
69    (CALLS2&JMPIFNOT 147 L82)           ; MINUSP
72    (LOAD&PUSH 3)
73    (CALLSR&STORE 0 54 3)               ; -
77    (LOAD&PUSH 2)
78    (CALLSR&STORE 0 54 2)               ; -
82    L82
82    (LOAD&PUSH 2)
83    (JMPIFEQTO 1 L120)                  ; 1
86    (GETVALUE 4)                        ; $FLOAT
88    (JMPIF L123)
90    (CONST&PUSH 6)                      ; (RAT SIMP)
91    (LOAD&PUSH 4)
92    (LOAD&PUSH 4)
93    (LIST 3)
95    (SKIP&RET 4)
97    L97
97    (CONST 0)                           ; 0
98    (SKIP&RET 3)
100   L100
100   (LOAD 2)
101   (SKIP&RET 3)
103   L103
103   (GETVALUE&PUSH 2)                   ; X
105   (GETVALUE&PUSH 3)                   ; Y
107   (CALLS2 181)                        ; TRUNCATE
109   (JMP L39)
112   L112
112   (GETVALUE&PUSH 2)                   ; X
114   (GETVALUE&PUSH 3)                   ; Y
116   (CALLS2 181)                        ; TRUNCATE
118   (JMP L65)
120   L120
120   (LOAD 3)
121   (SKIP&RET 4)
123   L123
123   (LOAD&PUSH 3)
124   (LOAD&PUSH 3)
125   (CALL2 5)                           ; FPCOFRAT1
127   (SKIP&RET 4)


Disassembly of function #:|(DEFUN NUM1 (A) ...)-106|
(CONST 0) = NUM1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUM1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUM1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUM1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUM1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUM1
8     (SKIP&RET 1)


Disassembly of function NUM1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L9)                 ; NUMBERP
4     (LOAD 1)
5     (CDR)
6     (CAR)
7     (SKIP&RET 2)
9     L9
9     (LOAD 1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DENOM1 (A) ...)-107|
(CONST 0) = DENOM1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DENOM1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DENOM1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DENOM1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DENOM1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DENOM1
8     (SKIP&RET 1)


Disassembly of function DENOM1
(CONST 0) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L10)                ; NUMBERP
4     (LOAD 1)
5     (CDR)
6     (CDR)
7     (CAR)
8     (SKIP&RET 2)
10    L10
10    (CONST 0)                           ; 1
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN TIMESK (X Y) ...)-108|
(CONST 0) = TIMESK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TIMESK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TIMESK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TIMESK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TIMESK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TIMESK
8     (SKIP&RET 1)


Disassembly of function TIMESK
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 1
(CONST 3) = $BFLOATP
(CONST 4) = (MTIMES)
(CONST 5) = $BFLOAT
(CONST 6) = FPCOFRAT
(CONST 7) = TIMESKL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
58 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (JMPIFEQTO 2 L59)                   ; 1
11    (GETVALUE&PUSH 1)                   ; Y
13    (JMPIFEQTO 2 L63)                   ; 1
16    (GETVALUE&PUSH 0)                   ; X
18    (CALLS2&JMPIFNOT 8 L26)             ; NUMBERP
21    (GETVALUE&PUSH 1)                   ; Y
23    (CALLS2&JMPIF 8 L67)                ; NUMBERP
26    L26
26    (GETVALUE&PUSH 0)                   ; X
28    (CALL1&JMPIF 3 L73)                 ; $BFLOATP
31    (GETVALUE&PUSH 1)                   ; Y
33    (CALL1&JMPIF 3 L73)                 ; $BFLOATP
36    (GETVALUE&PUSH 0)                   ; X
38    (CALLS2&JMPIF 15 L84)               ; FLOATP
41    (GETVALUE&PUSH 1)                   ; Y
43    (CALLS2&JMPIFNOT 15 L90)            ; FLOATP
46    (GETVALUE&PUSH 1)                   ; Y
48    (GETVALUE 0)                        ; X
50    L50
50    (PUSH)
51    (CALL1 6)                           ; FPCOFRAT
53    L53
53    (PUSH)
54    (CALLSR 2 55)                       ; *
57    (JMP L96)
59    L59
59    (GETVALUE 1)                        ; Y
61    (JMP L96)
63    L63
63    (GETVALUE 0)                        ; X
65    (JMP L96)
67    L67
67    (GETVALUE&PUSH 0)                   ; X
69    (GETVALUE 1)                        ; Y
71    (JMP L53)
73    L73
73    (CONST&PUSH 4)                      ; (MTIMES)
74    (GETVALUE&PUSH 0)                   ; X
76    (GETVALUE&PUSH 1)                   ; Y
78    (LIST&PUSH 3)
80    (CALL1 5)                           ; $BFLOAT
82    (JMP L96)
84    L84
84    (GETVALUE&PUSH 0)                   ; X
86    (GETVALUE 1)                        ; Y
88    (JMP L50)
90    L90
90    (GETVALUE&PUSH 0)                   ; X
92    (GETVALUE&PUSH 1)                   ; Y
94    (CALL2 7)                           ; TIMESKL
96    L96
96    (UNBIND 2)
98    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TIMESKL (X Y) ...)-109|
(CONST 0) = TIMESKL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TIMESKL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TIMESKL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TIMESKL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TIMESKL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TIMESKL
8     (SKIP&RET 1)


Disassembly of function TIMESKL
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = NUM1
(CONST 3) = DENOM1
(CONST 4) = *RED
(CONST 5) = 0
(CONST 6) = 1
(CONST 7) = (RAT SIMP)
(CONST 8) = $FLOAT
(CONST 9) = FPCOFRAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($FLOAT Y X)
79 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (PUSH-NIL 3)
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1&PUSH 2)                      ; NUM1
12    (GETVALUE&PUSH 1)                   ; Y
14    (CALL1&PUSH 3)                      ; DENOM1
16    (CALL2 4)                           ; *RED
18    (STORE 2)
19    (GETVALUE&PUSH 1)                   ; Y
21    (CALL1&PUSH 2)                      ; NUM1
23    (GETVALUE&PUSH 0)                   ; X
25    (CALL1&PUSH 3)                      ; DENOM1
27    (CALL2 4)                           ; *RED
29    (STORE 1)
30    (LOAD&PUSH 2)
31    (JMPIFEQTO 5 L94)                   ; 0
34    (LOAD&PUSH 1)
35    (JMPIFEQTO 5 L94)                   ; 0
38    (LOAD&PUSH 1)
39    (JMPIFEQTO 6 L97)                   ; 1
42    (LOAD&PUSH 2)
43    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
46    (LOAD&PUSH 1)
47    (CALLS2&JMPIF 8 L100)               ; NUMBERP
50    L50
50    (CONST&PUSH 7)                      ; (RAT SIMP)
51    (LOAD&PUSH 3)
52    (CALL1&PUSH 2)                      ; NUM1
54    (LOAD&PUSH 3)
55    (CALL1&PUSH 2)                      ; NUM1
57    (CALLSR&PUSH 2 55)                  ; *
60    (LOAD&PUSH 4)
61    (CALL1&PUSH 3)                      ; DENOM1
63    (LOAD&PUSH 4)
64    (CALL1&PUSH 3)                      ; DENOM1
66    (CALLSR&PUSH 2 55)                  ; *
69    (LIST 3)
71    L71
71    (STORE 0)
72    (PUSH)
73    (CALLS2&JMPIF 8 L87)                ; NUMBERP
76    (LOAD 0)
77    (CDR)
78    (CDR)
79    (CAR&PUSH)
80    (JMPIFEQTO 6 L107)                  ; 1
83    (GETVALUE 8)                        ; $FLOAT
85    (JMPIF L114)
87    L87
87    (POP)
88    (SKIP 2)
90    L90
90    (UNBIND 2)
92    (SKIP&RET 3)
94    L94
94    (CONST 5)                           ; 0
95    (JMP L71)
97    L97
97    (LOAD 2)
98    (JMP L71)
100   L100
100   (LOAD&PUSH 2)
101   (LOAD&PUSH 2)
102   (CALLSR 2 55)                       ; *
105   (JMP L71)
107   L107
107   (LOAD 0)
108   (CDR)
109   (CAR)
110   (SKIP 3)
112   (JMP L90)
114   L114
114   (LOAD&PUSH 0)
115   (CALL1 9)                           ; FPCOFRAT
117   (SKIP 3)
119   (JMP L90)


Disassembly of function #:|(DEFMFUN FPCOFRAT (RATNO) ...)-110|
(CONST 0) = FPCOFRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPCOFRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPCOFRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPCOFRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPCOFRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPCOFRAT
8     (SKIP&RET 1)


Disassembly of function FPCOFRAT
(CONST 0) = FPCOFRAT1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR&PUSH)
3     (LOAD 2)
4     (CDR)
5     (CDR)
6     (CAR&PUSH)
7     (CALL2 0)                           ; FPCOFRAT1
9     (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE LOAD) (DEFCONSTANT MACHINE-MANTISSA-PRECISION #))-111|
(CONST 0) = MACHINE-MANTISSA-PRECISION
(CONST 1) = 53
(CONST 2) = (DEFCONSTANT MACHINE-MANTISSA-PRECISION (FLOAT-DIGITS 1.0))
(CONST 3) = SYSTEM::CONSTANT-WARNING
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; MACHINE-MANTISSA-PRECISION
1     (PUSH-UNBOUND 1)
3     (CALLS1&JMPIFNOT 94 L17)            ; CONSTANTP
6     (CONST&PUSH 1)                      ; 53
7     (CONST&PUSH 0)                      ; MACHINE-MANTISSA-PRECISION
8     (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
10    (CALLS2&JMPIF 1 L17)                ; EQL
13    (CONST&PUSH 0)                      ; MACHINE-MANTISSA-PRECISION
14    (CONST&PUSH 2)                      ; (DEFCONSTANT ...)
15    (CALL2 3)                           ; SYSTEM::CONSTANT-WARNING
17    L17
17    (CONST&PUSH 0)                      ; MACHINE-MANTISSA-PRECISION
18    (CONST&PUSH 1)                      ; 53
19    (CALLS2 131)                        ; SYSTEM::%PROCLAIM-CONSTANT
21    (CONST 0)                           ; MACHINE-MANTISSA-PRECISION
22    (SKIP&RET 1)


Disassembly of function #:|(DEFUN FPCOFRAT1 (NU D) ...)-112|
(CONST 0) = FPCOFRAT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPCOFRAT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPCOFRAT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPCOFRAT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPCOFRAT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPCOFRAT1
8     (SKIP&RET 1)


Disassembly of function FPCOFRAT1
(CONST 0) = BIGP
(CONST 1) = HAULONG
(CONST 2) = SIGN
(CONST 3) = 53
(CONST 4) = HAIPART
(CONST 5) = 1.0
(CONST 6) = X
(CONST 7) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X SIGN)
82 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&JMPIFNOT 0 L64)              ; BIGP
4     (LOAD&PUSH 1)
5     (CALL1&JMPIFNOT 0 L64)              ; BIGP
8     (LOAD&PUSH 2)
9     (CALLS2&JMPIF 147 L94)              ; MINUSP
13    (LOAD&PUSH 1)
14    (CALLS2 147)                        ; MINUSP
16    L16
16    (PUSH)
17    (LOAD&PUSH 3)
18    (CALL1&PUSH 1)                      ; HAULONG
20    (LOAD&PUSH 3)
21    (CALL1&PUSH 1)                      ; HAULONG
23    (LOAD 2)
24    (BIND 2)                            ; SIGN
26    (LOAD&PUSH 4)
27    (LOAD&PUSH 4)
28    (CALLSR&JMPIF 1 48 L100)            ; >
33    (LOAD&PUSH 8)
34    (CONST&PUSH 3)                      ; 53
35    (CALL2 4)                           ; HAIPART
37    (STORE 8)
39    (LOAD&PUSH 7)
40    (LOAD&PUSH 4)
41    (LOAD&PUSH 6)
42    (CONST&PUSH 3)                      ; 53
43    (CALLSR&PUSH 1 54)                  ; -
46    (CALLSR&PUSH 1 54)                  ; -
49    (CALL2 4)                           ; HAIPART
51    (STORE 7)
52    (GETVALUE 2)                        ; SIGN
54    (JMPIFNOT L61)
56    L56
56    (LOAD&PUSH 8)
57    (CALLSR&STORE 0 54 8)               ; -
61    L61
61    (UNBIND1)
62    (SKIP 3)
64    L64
64    (LOAD&PUSH 2)
65    (CONST&PUSH 5)                      ; 1.0
66    (CALLS2 174)                        ; COMMON-LISP:FLOAT
68    (BIND 6)                            ; X
70    (LOAD 4)
71    (BIND 7)                            ; Y
73    (GETVALUE&PUSH 6)                   ; X
75    (CALLS2&JMPIFNOT 12 L83)            ; INTEGERP
78    (GETVALUE&PUSH 7)                   ; Y
80    (CALLS2&JMPIF 12 L126)              ; INTEGERP
83    L83
83    (GETVALUE&PUSH 6)                   ; X
85    (GETVALUE&PUSH 7)                   ; Y
87    (CALLSR 1 56)                       ; /
90    L90
90    (UNBIND 2)
92    (SKIP&RET 3)
94    L94
94    (LOAD&PUSH 1)
95    (CALLS2 146)                        ; PLUSP
97    (JMP L16)
100   L100
100   (LOAD&PUSH 7)
101   (CONST&PUSH 3)                      ; 53
102   (CALL2 4)                           ; HAIPART
104   (STORE 7)
105   (LOAD&PUSH 8)
106   (LOAD&PUSH 5)
107   (LOAD&PUSH 5)
108   (CONST&PUSH 3)                      ; 53
109   (CALLSR&PUSH 1 54)                  ; -
112   (CALLSR&PUSH 1 54)                  ; -
115   (CALL2 4)                           ; HAIPART
117   (STORE 8)
119   (GETVALUE 2)                        ; SIGN
121   (JMPIFNOT L61)
123   (JMP L56)
126   L126
126   (GETVALUE&PUSH 6)                   ; X
128   (GETVALUE&PUSH 7)                   ; Y
130   (CALLS2 181)                        ; TRUNCATE
132   (JMP L90)


Disassembly of function #:|(DEFUN EXPTA (X Y) ...)-113|
(CONST 0) = EXPTA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPTA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPTA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPTA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPTA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPTA
8     (SKIP&RET 1)


Disassembly of function EXPTA
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 1
(CONST 3) = NUM1
(CONST 4) = EXPTB
(CONST 5) = $BFLOATP
(CONST 6) = (MEXPT)
(CONST 7) = $BFLOAT
(CONST 8) = *RED
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
64 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 1)                   ; Y
8     (JMPIFEQTO 2 L56)                   ; 1
11    (GETVALUE&PUSH 0)                   ; X
13    (CALLS2&JMPIF 8 L60)                ; NUMBERP
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1&JMPIF 5 L70)                 ; $BFLOATP
21    (GETVALUE&PUSH 1)                   ; Y
23    (CALL1&PUSH 3)                      ; NUM1
25    (CALLS2&JMPIF 147 L81)              ; MINUSP
28    (GETVALUE 0)                        ; X
30    (CDR)
31    (CAR&PUSH)
32    (GETVALUE&PUSH 1)                   ; Y
34    (CALL1&PUSH 3)                      ; NUM1
36    (CALL2&PUSH 4)                      ; EXPTB
38    (GETVALUE 0)                        ; X
40    (CDR)
41    (CDR)
42    (CAR&PUSH)
43    (GETVALUE&PUSH 1)                   ; Y
45    (CALL1 3)                           ; NUM1
47    L47
47    (PUSH)
48    (CALL2&PUSH 4)                      ; EXPTB
50    (CALL2 8)                           ; *RED
52    L52
52    (UNBIND 2)
54    (SKIP&RET 3)
56    L56
56    (GETVALUE 0)                        ; X
58    (JMP L52)
60    L60
60    (GETVALUE&PUSH 0)                   ; X
62    (GETVALUE&PUSH 1)                   ; Y
64    (CALL1&PUSH 3)                      ; NUM1
66    (CALL2 4)                           ; EXPTB
68    (JMP L52)
70    L70
70    (CONST&PUSH 6)                      ; (MEXPT)
71    (GETVALUE&PUSH 0)                   ; X
73    (GETVALUE&PUSH 1)                   ; Y
75    (LIST&PUSH 3)
77    (CALL1 7)                           ; $BFLOAT
79    (JMP L52)
81    L81
81    (GETVALUE 0)                        ; X
83    (CDR)
84    (CDR)
85    (CAR&PUSH)
86    (GETVALUE&PUSH 1)                   ; Y
88    (CALL1&PUSH 3)                      ; NUM1
90    (CALLSR&PUSH 0 54)                  ; -
93    (CALL2&PUSH 4)                      ; EXPTB
95    (GETVALUE 0)                        ; X
97    (CDR)
98    (CAR&PUSH)
99    (GETVALUE&PUSH 1)                   ; Y
101   (CALL1&PUSH 3)                      ; NUM1
103   (CALLSR 0 54)                       ; -
106   (JMP L47)


Disassembly of function #:|(DEFUN EXPTB (A B) ...)-114|
(CONST 0) = EXPTB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPTB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPTB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPTB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPTB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPTB
8     (SKIP&RET 1)


Disassembly of function EXPTB
(CONST 0) = %E-VAL
(CONST 1) = EXP
(CONST 2) = 1
(CONST 3) = *RED
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (%E-VAL)
24 byte-code instructions:
0     (LOAD&PUSH 2)
1     (GETVALUE&PUSH 0)                   ; %E-VAL
3     (CALLS2&JMPIF 2 L28)                ; EQUAL
6     (LOAD&PUSH 2)
7     (CALLS2&JMPIF 15 L33)               ; FLOATP
10    (LOAD&PUSH 1)
11    (CALLS2&JMPIFNOT 147 L33)           ; MINUSP
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 2)
16    (CALLSR&PUSH 0 54)                  ; -
19    (CALLS2&STORE 154 1)                ; EXPT
22    (CONST&PUSH 2)                      ; 1
23    (LOAD&PUSH 2)
24    (CALL2 3)                           ; *RED
26    (SKIP&RET 3)
28    L28
28    (LOAD&PUSH 1)
29    (CALL1 1)                           ; EXP
31    (SKIP&RET 3)
33    L33
33    (LOAD&PUSH 2)
34    (LOAD&PUSH 2)
35    (CALLS2 154)                        ; EXPT
37    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN SIMPLUS (X W Z) ...)-115|
(CONST 0) = SIMPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPLUS
8     (SKIP&RET 1)


Disassembly of function SIMPLUS
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = SIMPLIFYA
(CONST 3) = MRAT
(CONST 4) = TRUNC
(CONST 5) = MEMQ
(CONST 6) = SPSIMPCASES
(CONST 7) = RATDISREP
(CONST 8) = (MPLUS)
(CONST 9) = SIMPLIFY
(CONST 10) = RATF
(CONST 11) = MEQUAL
(CONST 12) = ADD2
(CONST 13) = (MLIST $MATRIX)
(CONST 14) = $DOALLMXOPS
(CONST 15) = $DOMXMXOPS
(CONST 16) = $DOMXPLUS
(CONST 17) = MLIST
(CONST 18) = $LISTP
(CONST 19) = $LISTARITH
(CONST 20) = ADDMX
(CONST 21) = PLS
(CONST 22) = %SUM
(CONST 23) = SUMPLS
(CONST 24) = TESTP
(CONST 25) = ZEROP1
(CONST 26) = $DOSCMXPLUS
(CONST 27) = $DOSCMXOPS
(CONST 28) = MXPLUSC
(CONST 29) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($DOSCMXOPS $DOSCMXPLUS $LISTARITH $DOMXPLUS $DOMXMXOPS $DOALLMXOPS X)
writes special variable : (X)
225 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (PUSH-NIL 5)
5     (GETVALUE 0)                        ; X
7     (CDR)
8     (JMPIFNOT L16)
10    (GETVALUE 0)                        ; X
12    (STORE 3)
13    (JMP L270)
16    L16
16    (CONST 1)                           ; 0
17    (SKIP 5)
19    (JMP L338)
22    L22
22    (GETVALUE 0)                        ; X
24    (CAR)
25    (STORE 10)
27    (JMP L223)
30    L30
30    (LOAD&JMPIF 9 L22)
33    (GETVALUE 0)                        ; X
35    (CAR&PUSH)
36    (NIL&PUSH)
37    (CALL2 2)                           ; SIMPLIFYA
39    (STORE 10)
41    (JMP L223)
44    L44
44    (CONST&PUSH 8)                      ; (MPLUS)
45    (CONST&SYMBOL-FUNCTION&PUSH 9)      ; SIMPLIFY
47    (LOAD&PUSH 12)
48    (GETVALUE 0)                        ; X
50    (CDR)
51    (CONS&PUSH)
52    (CALLSR&PUSH 0 22)                  ; MAPCAR
55    (LOAD&CDR&PUSH 6)
57    (CALLSR 2 35)                       ; NCONC
60    (CONS&PUSH)
61    (CALL1 10)                          ; RATF
63    (SKIP 5)
65    (JMP L338)
68    L68
68    (LOAD 10)
69    (STORE 2)
70    (JMP L270)
73    L73
73    (LOAD&JMPIFNOT 2 L68)
76    (LOAD&CAR&PUSH 2)
78    (LOAD 3)
79    (CDR)
80    (CAR&PUSH)
81    (LOAD 12)
82    (CDR)
83    (CAR&PUSH)
84    (CALL2&PUSH 12)                     ; ADD2
86    (LOAD 4)
87    (CDR)
88    (CDR)
89    (CAR&PUSH)
90    (LOAD 13)
91    (CDR)
92    (CDR)
93    (CAR&PUSH)
94    (CALL2&PUSH 12)                     ; ADD2
96    (LIST 3)
98    (STORE 2)
99    (JMP L270)
102   L102
102   (LOAD 10)
103   (STORE 1)
104   (JMP L270)
107   L107
107   (LOAD&PUSH 1)
108   (LOAD&PUSH 11)
109   (CALL2 20)                          ; ADDMX
111   (STORE 1)
112   (JMP L270)
115   L115
115   (LOAD&JMPIFNOT 1 L102)
118   (GETVALUE 14)                       ; $DOALLMXOPS
120   (JMPIF L140)
122   (GETVALUE 15)                       ; $DOMXMXOPS
124   (JMPIF L140)
126   (GETVALUE 16)                       ; $DOMXPLUS
128   (JMPIF L140)
130   (LOAD 10)
131   (CAR)
132   (CAR&PUSH)
133   (JMPIFNOTEQTO 17 L150)              ; MLIST
136   (LOAD&PUSH 1)
137   (CALL1&JMPIFNOT 18 L150)            ; $LISTP
140   L140
140   (LOAD 10)
141   (CAR)
142   (CAR&PUSH)
143   (JMPIFNOTEQTO 17 L107)              ; MLIST
146   (GETVALUE 19)                       ; $LISTARITH
148   (JMPIF L107)
150   L150
150   (LOAD&PUSH 10)
151   (LOAD&PUSH 5)
152   (CALL2 21)                          ; PLS
154   (STORE 4)
155   (LOAD 1)
156   (STORE 1)
157   (JMP L270)
160   L160
160   (LOAD 1)
161   (STORE 4)
162   (JMP L326)
165   L165
165   (LOAD&PUSH 4)
166   (LOAD&PUSH 2)
167   (CALL2 28)                          ; MXPLUSC
169   (STORE 4)
170   (JMP L326)
173   L173
173   (CAR&PUSH)
174   (LOAD 3)
175   (CDR)
176   (CAR&PUSH)
177   (LOAD&PUSH 6)
178   (CALL2&PUSH 12)                     ; ADD2
180   (LOAD 4)
181   (CDR)
182   (CDR)
183   (CAR&PUSH)
184   (LOAD&PUSH 7)
185   (CALL2&PUSH 12)                     ; ADD2
187   (LIST 3)
189   (SKIP 5)
191   (JMP L338)
194   L194
194   (LOAD&JMPIF 2 L218)
197   (LOAD&JMPIF 1 L218)
200   (LOAD&JMPIFNOT 0 L210)
203   (CONST&PUSH 4)                      ; TRUNC
204   (LOAD 11)
205   (CAR)
206   (CDR&PUSH)
207   (CALL2&JMPIFNOT 5 L218)             ; MEMQ
210   L210
210   (GETVALUE 0)                        ; X
212   (CDR&PUSH)
213   (LOAD&PUSH 11)
214   (CALL2&JMPIFNOT 6 L44)              ; SPSIMPCASES
218   L218
218   (LOAD&PUSH 10)
219   (CALL1 7)                           ; RATDISREP
221   (STORE 10)
223   L223
223   (LOAD 10)
224   (JMPIFATOM L265)
226   (LOAD 10)
227   (CAR)
228   (CAR&PUSH)
229   (JMPIFEQTO 3 L194)                  ; MRAT
232   (LOAD 10)
233   (CAR)
234   (CAR&PUSH)
235   (JMPIFEQTO 11 L73)                  ; MEQUAL
239   (LOAD 10)
240   (CAR)
241   (CAR&PUSH)
242   (CONST&PUSH 13)                     ; (MLIST $MATRIX)
243   (CALL2&JMPIF 5 L115)                ; MEMQ
247   (LOAD 10)
248   (CAR)
249   (CAR&PUSH)
250   (JMPIFNOTEQTO 22 L265)              ; %SUM
253   (T&STORE 0)
255   (LOAD&PUSH 10)
256   (LOAD&PUSH 5)
257   (CALL2 23)                          ; SUMPLS
259   (STORE 4)
260   (CAR)
261   (STORE 10)
263   (LOAD&CDR&STORE 4)
265   L265
265   (LOAD&PUSH 10)
266   (LOAD&PUSH 5)
267   (CALL2 21)                          ; PLS
269   (STORE 4)
270   L270
270   (GETVALUE 0)                        ; X
272   (CDR)
273   (SETVALUE 0)                        ; X
275   (JMPIF L30)
278   (LOAD&PUSH 4)
279   (CALL1 24)                          ; TESTP
281   (STORE 4)
282   (LOAD&JMPIFNOT 1 L326)
285   (LOAD&PUSH 4)
286   (CALL1&JMPIF 25 L160)               ; ZEROP1
290   (LOAD&PUSH 1)
291   (CALL1&JMPIF 18 L306)               ; $LISTP
294   (GETVALUE 14)                       ; $DOALLMXOPS
296   (JMPIF L306)
298   (GETVALUE 26)                       ; $DOSCMXPLUS
300   (JMPIF L306)
302   (GETVALUE 27)                       ; $DOSCMXOPS
304   (JMPIFNOT L316)
306   L306
306   (LOAD&PUSH 1)
307   (CALL1&JMPIFNOT 18 L165)            ; $LISTP
311   (GETVALUE 19)                       ; $LISTARITH
313   (JMPIF L165)
316   L316
316   (LOAD&PUSH 1)
317   (LOAD&PUSH 5)
318   (NIL&PUSH)
319   (CALL2&PUSH 21)                     ; PLS
321   (CALL2&PUSH 21)                     ; PLS
323   (CALL1 24)                          ; TESTP
325   (STORE 4)
326   L326
326   (LOAD&PUSH 4)
327   (LOAD&PUSH 4)
328   (CALL2 29)                          ; EQTEST
330   (STORE 4)
331   (LOAD&JMPIF 2 L173)
335   (LOAD 4)
336   (SKIP 5)
338   L338
338   (UNBIND1)
339   (SKIP&RET 4)


Disassembly of function #:|(DEFUN MXPLUSC (SC MX) ...)-116|
(CONST 0) = MXPLUSC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MXPLUSC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MXPLUSC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MXPLUSC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MXPLUSC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MXPLUSC
8     (SKIP&RET 1)


Disassembly of function MXPLUSC
(CONST 0) = MPLUSP
(CONST 1) = PARTITION-NS
(CONST 2) = (MPLUS)
(CONST 3) = (MPLUS)
(CONST 4) = MPLUS
(CONST 5) = (MPLUS)
(CONST 6) = OUTERMAP1
(CONST 7) = SIMPLIFY
(CONST 8) = (MPLUS)
(CONST 9) = $ASSUMESCALAR
(CONST 10) = SCALAR-OR-CONSTANT-P
(CONST 11) = PLS
(CONST 12) = TESTP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($ASSUMESCALAR)
59 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&JMPIFNOT 0 L59)              ; MPLUSP
4     (LOAD&CDR&PUSH 2)
6     (CALL1 1)                           ; PARTITION-NS
8     (STORE 2)
9     (CAR)
10    (JMPIFNOT L37)
12    (LOAD 2)
13    (CDR)
14    (CAR)
15    (JMPIFNOT L41)
17    (CONST&PUSH 3)                      ; (MPLUS)
18    (CONST&PUSH 4)                      ; MPLUS
19    (CONST&PUSH 5)                      ; (MPLUS)
20    (LOAD 5)
21    (CAR)
22    (CONS&PUSH)
23    (LOAD&PUSH 4)
24    (CALL&PUSH 3 6)                     ; OUTERMAP1
27    (CALL1 7)                           ; SIMPLIFY
29    L29
29    (PUSH)
30    (LOAD 4)
31    (CDR)
32    (CAR)
33    (CONS)
34    (CONS)
35    (SKIP&RET 3)
37    L37
37    (CONST&PUSH 2)                      ; (MPLUS)
38    (LOAD 2)
39    (JMP L29)
41    L41
41    (CONST&PUSH 4)                      ; MPLUS
42    (CONST&PUSH 8)                      ; (MPLUS)
43    (LOAD 4)
44    (CAR)
45    (CONS)
46    (JMP L67)
48    L48
48    (LOAD&PUSH 1)
49    (LOAD&PUSH 3)
50    (NIL&PUSH)
51    (CALL2&PUSH 11)                     ; PLS
53    (CALL2&PUSH 11)                     ; PLS
55    (CALL1 12)                          ; TESTP
57    (SKIP&RET 3)
59    L59
59    (LOAD&PUSH 2)
60    (GETVALUE&PUSH 9)                   ; $ASSUMESCALAR
62    (CALL2&JMPIFNOT 10 L48)             ; SCALAR-OR-CONSTANT-P
65    (CONST&PUSH 4)                      ; MPLUS
66    (LOAD 3)
67    L67
67    (PUSH)
68    (LOAD&PUSH 3)
69    (CALL&PUSH 3 6)                     ; OUTERMAP1
72    (CALL1 7)                           ; SIMPLIFY
74    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PARTITION-NS (X) ...)-117|
(CONST 0) = PARTITION-NS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARTITION-NS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARTITION-NS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARTITION-NS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARTITION-NS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARTITION-NS
8     (SKIP&RET 1)


Disassembly of function PARTITION-NS
(CONST 0) = X
(CONST 1) = $ASSUMESCALAR
(CONST 2) = SCALAR-OR-CONSTANT-P
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ASSUMESCALAR X)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 2)
5     (GETVALUE&PUSH 0)                   ; X
7     (LOAD&PUSH 0)
8     (JMP L32)
10    L10
10    (LOAD&PUSH 0)
11    (LOAD&CONS&STORE 4)
13    (SKIP 1)
15    (JMP L30)
17    L17
17    (LOAD&CAR&PUSH 0)
19    (LOAD&PUSH 0)
20    (GETVALUE&PUSH 1)                   ; $ASSUMESCALAR
22    (CALL2&JMPIF 2 L10)                 ; SCALAR-OR-CONSTANT-P
25    (LOAD&PUSH 0)
26    (LOAD&CONS&STORE 3)
28    (SKIP 1)
30    L30
30    (LOAD&CDR&STORE 0)
32    L32
32    (LOAD&PUSH 0)
33    (CALLS1&JMPIFNOT 146 L17)           ; ENDP
36    (SKIP 2)
38    (LOAD&PUSH 1)
39    (CALLS2&PUSH 73)                    ; NREVERSE
41    (LOAD&PUSH 1)
42    (CALLS2&PUSH 73)                    ; NREVERSE
44    (LIST 2)
46    (SKIP 2)
48    (UNBIND1)
49    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ADDMX (X1 X2) ...)-118|
(CONST 0) = ADDMX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADDMX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADDMX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADDMX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADDMX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADDMX
8     (SKIP&RET 1)


Disassembly of function ADDMX
(CONST 0) = $DOSCMXOPS
(CONST 1) = $DOMXMXOPS
(CONST 2) = $LISTARITH
(CONST 3) = MPLUS
(CONST 4) = FMAPL1
(CONST 5) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (T)
1     (BIND 0)                            ; $DOSCMXOPS
3     (T)
4     (BIND 1)                            ; $DOMXMXOPS
6     (T)
7     (BIND 2)                            ; $LISTARITH
9     (CONST&PUSH 3)                      ; MPLUS
10    (LOAD&PUSH 12)
11    (LOAD&PUSH 12)
12    (CALL&PUSH 3 4)                     ; FMAPL1
15    (CALL1 5)                           ; SIMPLIFY
17    (UNBIND 3)
19    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PLUSIN (X FM) ...)-119|
(CONST 0) = PLUSIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PLUSIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PLUSIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PLUSIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PLUSIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PLUSIN
8     (SKIP&RET 1)


Disassembly of function PLUSIN
(CONST 0) = X
(CONST 1) = FLAG
(CONST 2) = 1
(CONST 3) = MTIMESP
(CONST 4) = MNUMP
(CONST 5) = (MTIMES)
(CONST 6) = (MTIMES)
(CONST 7) = ALIKE
(CONST 8) = ALIKE1
(CONST 9) = GREAT
(CONST 10) = TESTT
(CONST 11) = ((FOO))
(CONST 12) = EQTEST
(CONST 13) = (MTIMES SIMP)
(CONST 14) = ADDK
(CONST 15) = TESTTNEG
(CONST 16) = ONEP1
(CONST 17) = ZEROP1
(CONST 18) = (MTIMES SIMP)
(CONST 19) = MPLUSP
(CONST 20) = PLUSFLAG
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG X)
writes special variables : (PLUSFLAG FLAG X)
231 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; FLAG
7     (PUSH-NIL 3)
9     (CONST 2)                           ; 1
10    (STORE 1)
11    (GETVALUE&PUSH 0)                   ; X
13    (CALL1&JMPIFNOT 3 L74)              ; MTIMESP
16    (GETVALUE 0)                        ; X
18    (STORE 2)
19    (CDR)
20    (CAR&PUSH)
21    (CALL1&JMPIF 4 L31)                 ; MNUMP
24    (GETVALUE 0)                        ; X
26    L26
26    (CDR)
27    (SETVALUE 0)                        ; X
29    (JMP L80)
31    L31
31    (GETVALUE 0)                        ; X
33    (CDR)
34    (CAR)
35    (STORE 1)
36    (GETVALUE 0)                        ; X
38    (CDR)
39    (JMP L26)
41    L41
41    (GETVALUE 0)                        ; X
43    (CAR)
44    (JMP L89)
46    L46
46    (LOAD 0)
47    (JMP L121)
50    L50
50    (LOAD&PUSH 0)
51    (CALL1&PUSH 10)                     ; TESTT
53    (LOAD&JMPIF 3 L57)
56    (CONST 11)                          ; ((FOO))
57    L57
57    (PUSH)
58    (CALL2 12)                          ; EQTEST
60    (SETVALUE 1)                        ; FLAG
62    (LOAD&PUSH 11)
63    (GETVALUE&PUSH 1)                   ; FLAG
65    (LOAD 13)
66    (CDR)
67    (CONS&PUSH)
68    (CALLS1 170)                        ; RPLACD
70    (CDR)
71    (JMP L307)
74    L74
74    (GETVALUE&PUSH 0)                   ; X
76    (NIL)
77    (CONS)
78    (SETVALUE 0)                        ; X
80    L80
80    (GETVALUE 0)                        ; X
82    (CDR)
83    (JMPIFNOT L41)
85    (CONST&PUSH 5)                      ; (MTIMES)
86    (GETVALUE 0)                        ; X
88    (CONS)
89    L89
89    (STORE 6)
90    (CONST&PUSH 6)                      ; (MTIMES)
91    (LOAD&PUSH 2)
92    (GETVALUE 0)                        ; X
94    (LIST* 2)
96    (STORE 0)
97    L97
97    (LOAD 11)
98    (CDR)
99    (JMPIFNOT L50)
101   (LOAD 11)
102   (CDR)
103   (CAR&PUSH)
104   (CALL1&JMPIF 3 L204)                ; MTIMESP
108   (LOAD&PUSH 6)
109   (LOAD 12)
110   (CDR)
111   (CAR&PUSH)
112   (CALL2&JMPIFNOT 8 L120)             ; ALIKE1
115   (GETVALUE 0)                        ; X
117   (CDR)
118   (JMPIFNOT L146)
120   L120
120   (LOAD 6)
121   L121
121   (PUSH)
122   (LOAD 12)
123   (CDR)
124   (CAR&PUSH)
125   (CALL2&JMPIFNOT 9 L50)              ; GREAT
129   (LOAD&CDR&STORE 11)
131   (JMP L97)
133   L133
133   (LOAD 11)
134   (CDR)
135   (CAR&PUSH)
136   (LOAD 12)
137   (CDR)
138   (CAR)
139   (CDR)
140   (CDR&PUSH)
141   (CALLS1 170)                        ; RPLACD
143   (JMP L305)
146   L146
146   (LOAD&CDR&PUSH 11)
148   (CONST&PUSH 13)                     ; (MTIMES SIMP)
149   (CONST&PUSH 2)                      ; 1
150   (LOAD&PUSH 4)
151   (CALL2&PUSH 14)                     ; ADDK
153   (GETVALUE 0)                        ; X
155   (LIST*&PUSH 2)
157   (CALL1&PUSH 15)                     ; TESTTNEG
159   (CALLS1 168)                        ; RPLACA
161   L161
161   (LOAD 11)
162   (CDR)
163   (CAR&PUSH)
164   (CALL1&JMPIFNOT 3 L296)             ; MTIMESP
168   (LOAD 11)
169   (CDR)
170   (CAR)
171   (CDR)
172   (CAR&PUSH)
173   (CALL1&JMPIF 16 L133)               ; ONEP1
176   (LOAD 11)
177   (CDR)
178   (CAR)
179   (CDR)
180   (CAR&PUSH)
181   (CALL1&JMPIFNOT 17 L305)            ; ZEROP1
185   (LOAD&PUSH 11)
186   (LOAD 12)
187   (CDR)
188   (CDR&PUSH)
189   (CALLS1 170)                        ; RPLACD
191   (JMP L307)
194   L194
194   (T)
195   (SETVALUE 1)                        ; FLAG
197   (LOAD 12)
198   (CDR)
199   (CAR)
200   (CDR)
201   (CAR)
202   (JMP L243)
204   L204
204   (LOAD 11)
205   (CDR)
206   (CAR)
207   (CDR)
208   (SETVALUE 1)                        ; FLAG
210   (CAR&PUSH)
211   (CALL1&JMPIFNOT 4 L222)             ; MNUMP
214   (GETVALUE&PUSH 0)                   ; X
216   (GETVALUE 1)                        ; FLAG
218   (CDR&PUSH)
219   (CALL2&JMPIF 7 L230)                ; ALIKE
222   L222
222   (LOAD&PUSH 6)
223   (LOAD 12)
224   (CDR)
225   (CAR&PUSH)
226   (CALL2&JMPIFNOT 8 L46)              ; ALIKE1
230   L230
230   (CONST&PUSH 18)                     ; (MTIMES SIMP)
231   (LOAD 12)
232   (CDR)
233   (CAR)
234   (CDR)
235   (CAR&PUSH)
236   (CALL1&JMPIF 4 L194)                ; MNUMP
239   (NIL)
240   (SETVALUE 1)                        ; FLAG
242   (CONST 2)                           ; 1
243   L243
243   (PUSH)
244   (LOAD&PUSH 3)
245   (CALL2&PUSH 14)                     ; ADDK
247   (GETVALUE 0)                        ; X
249   (LIST*&PUSH 2)
251   (CALL1 15)                          ; TESTTNEG
253   (STORE 6)
254   (LOAD&CDR&PUSH 11)
256   (LOAD&PUSH 7)
257   (CALLS1 168)                        ; RPLACA
259   (LOAD&PUSH 6)
260   (CALL1&JMPIFNOT 3 L296)             ; MTIMESP
263   (LOAD 11)
264   (CDR)
265   (CAR)
266   (CDR)
267   (CAR&PUSH)
268   (CALL1&JMPIFNOT 16 L161)            ; ONEP1
272   (GETVALUE 1)                        ; FLAG
274   (JMPIFNOT L161)
277   (LOAD 11)
278   (CDR)
279   (CAR)
280   (CDR)
281   (CDR)
282   (CDR)
283   (JMPIF L161)
286   (LOAD&CDR&PUSH 11)
288   (LOAD 12)
289   (CDR)
290   (CAR)
291   (CDR)
292   (CDR)
293   (CAR&PUSH)
294   (CALLS1 168)                        ; RPLACA
296   L296
296   (LOAD 11)
297   (CDR)
298   (CAR&PUSH)
299   (CALL1&JMPIFNOT 19 L305)            ; MPLUSP
302   (T)
303   (SETVALUE 20)                       ; PLUSFLAG
305   L305
305   (LOAD 11)
306   (CDR)
307   L307
307   (SKIP 3)
309   (UNBIND1)
310   (SKIP 1)
312   (UNBIND1)
313   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN SIMPLN (X Y Z) ...)-120|
(CONST 0) = SIMPLN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPLN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPLN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPLN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPLN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPLN
8     (SKIP&RET 1)


Disassembly of function SIMPLN
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = ONEP1
(CONST 5) = -1
(CONST 6) = ADDK
(CONST 7) = ZEROP1
(CONST 8) = RADCANP
(CONST 9) = (%LOG SIMP)
(CONST 10) = 0
(CONST 11) = ERRORSW
(CONST 12) = "LOG(0) has been generated."
(CONST 13) = MERROR
(CONST 14) = $%E
(CONST 15) = 1
(CONST 16) = RATNUMP
(CONST 17) = SIMPLN1
(CONST 18) = $LOGEXPAND
(CONST 19) = $SUPER
(CONST 20) = (MPLUS)
(CONST 21) = (%LOG)
(CONST 22) = SIMPLIFYA
(CONST 23) = (%LOG)
(CONST 24) = EQTEST
(CONST 25) = MEXPTP
(CONST 26) = ($ALL $SUPER)
(CONST 27) = MEMQ
(CONST 28) = MTIMESP
(CONST 29) = (%LOG)
(CONST 30) = (MPLUS)
(CONST 31) = $BFLOATP
(CONST 32) = (%LOG)
(CONST 33) = $BFLOAT
(CONST 34) = $NUMER
(CONST 35) = $LOGNUMER
(CONST 36) = $%I
(CONST 37) = %PI-VAL
(CONST 38) = MUL2
(CONST 39) = ADD2
(CONST 40) = $LOGNEGINT
(CONST 41) = MAXIMA-INTEGERP
(CONST 42) = $SIGN
(CONST 43) = $NEG
(CONST 44) = ((MTIMES SIMP) $%I $%PI)
(CONST 45) = (%LOG SIMP)
(CONST 46) = NEG
(CONST 47) = (%LOG)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($LOGNEGINT $NUMER %PI-VAL $LOGNUMER ERRORSW RADCANP $LOGEXPAND Y X)
writes special variable : (Y)
211 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALL1&JMPIF 4 L58)                 ; ONEP1
23    (GETVALUE&PUSH 1)                   ; Y
25    (CALL1&JMPIF 7 L79)                 ; ZEROP1
28    (GETVALUE&PUSH 1)                   ; Y
30    (JMPIFEQTO 14 L90)                  ; $%E
33    (GETVALUE&PUSH 1)                   ; Y
35    (CALL1&JMPIF 16 L135)               ; RATNUMP
39    (GETVALUE 18)                       ; $LOGEXPAND
41    (JMPIFNOT L288)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIFNOT 25 L288)            ; MEXPTP
50    (GETVALUE 1)                        ; Y
52    L52
52    (PUSH)
53    (CALL1 17)                          ; SIMPLN1
55    (JMP L350)
58    L58
58    (CONST&PUSH 5)                      ; -1
59    (GETVALUE&PUSH 1)                   ; Y
61    (CALL2 6)                           ; ADDK
63    (JMP L350)
66    L66
66    (CONST&PUSH 9)                      ; (%LOG SIMP)
67    (CONST&PUSH 10)                     ; 0
68    (LIST 2)
70    (JMP L350)
73    L73
73    (CONST&PUSH 12)                     ; "LOG(0) has been generated."
74    (CALL1 13)                          ; MERROR
76    (JMP L350)
79    L79
79    (GETVALUE 8)                        ; RADCANP
81    (JMPIF L66)
83    (GETVALUE 11)                       ; ERRORSW
85    (JMPIFNOT L73)
87    (CONST&PUSH 11)                     ; ERRORSW
88    (T)
89    (THROW)
90    L90
90    (CONST 15)                          ; 1
91    (JMP L350)
94    L94
94    (NIL&PUSH)
95    (GETVALUE 1)                        ; Y
97    (CDR)
98    (CDR)
99    (CAR&PUSH)
100   (CONST&PUSH 5)                      ; -1
101   (LIST 3)
103   (JMP L52)
105   L105
105   (CONST&PUSH 20)                     ; (MPLUS)
106   (CONST&PUSH 21)                     ; (%LOG)
107   (GETVALUE 1)                        ; Y
109   (CDR)
110   (CAR&PUSH)
111   (LIST&PUSH 2)
113   (T&PUSH)
114   (CALL2&PUSH 22)                     ; SIMPLIFYA
116   (NIL&PUSH)
117   (GETVALUE 1)                        ; Y
119   (CDR)
120   (CDR)
121   (CAR&PUSH)
122   (CONST&PUSH 5)                      ; -1
123   (LIST&PUSH 3)
125   (CALL1&PUSH 17)                     ; SIMPLN1
127   (LIST&PUSH 3)
129   (T&PUSH)
130   (CALL2 22)                          ; SIMPLIFYA
132   (JMP L350)
135   L135
135   (GETVALUE 1)                        ; Y
137   (CDR)
138   (CAR&PUSH)
139   (JMPIFEQTO 15 L94)                  ; 1
142   (GETVALUE&PUSH 18)                  ; $LOGEXPAND
144   (JMPIFEQTO 19 L105)                 ; $SUPER
147   (CONST 23)                          ; (%LOG)
149   (JMP L341)
152   L152
152   (CONST&PUSH 29)                     ; (%LOG)
153   (GETVALUE 1)                        ; Y
155   (CAR&PUSH)
156   (LIST&PUSH 2)
158   (T&PUSH)
159   (CALL2 22)                          ; SIMPLIFYA
161   (JMP L180)
163   L163
163   (NIL&PUSH)
164   (GETVALUE 1)                        ; Y
166   (CDR)
167   (SETVALUE 1)                        ; Y
169   L169
169   (GETVALUE 1)                        ; Y
171   (CAR&PUSH)
172   (CALL1&JMPIFNOT 25 L152)            ; MEXPTP
175   (GETVALUE 1)                        ; Y
177   (CAR&PUSH)
178   (CALL1 17)                          ; SIMPLN1
180   L180
180   (PUSH)
181   (LOAD&CONS&STORE 0)
183   (GETVALUE 1)                        ; Y
185   (CDR)
186   (SETVALUE 1)                        ; Y
188   (JMPIF L169)
190   (CONST&PUSH 30)                     ; (MPLUS)
192   (LOAD 1)
193   (CONS&PUSH)
194   (T&PUSH)
195   (CALL2 22)                          ; SIMPLIFYA
197   (SKIP 1)
199   (JMP L350)
202   L202
202   (CONST&PUSH 32)                     ; (%LOG)
204   (GETVALUE&PUSH 1)                   ; Y
206   (LIST&PUSH 2)
208   (CALL1 33)                          ; $BFLOAT
210   (JMP L350)
213   L213
213   (GETVALUE 1)                        ; Y
215   (JMP L240)
217   L217
217   (CONST 10)                          ; 0
218   (JMP L350)
221   L221
221   (GETVALUE&PUSH 1)                   ; Y
223   (CALLS2&JMPIF 146 L213)             ; PLUSP
226   (GETVALUE 35)                       ; $LOGNUMER
228   (JMPIFNOT L248)
230   (GETVALUE&PUSH 1)                   ; Y
232   (JMPIFEQTO 5 L217)                  ; -1
235   (GETVALUE&PUSH 1)                   ; Y
237   (CALLSR 0 54)                       ; -
240   L240
240   (PUSH)
241   (PUSH-UNBOUND 1)
243   (CALLS2 155)                        ; LOG
245   (JMP L350)
248   L248
248   (GETVALUE&PUSH 1)                   ; Y
250   (CALLSR&PUSH 0 54)                  ; -
253   (PUSH-UNBOUND 1)
255   (CALLS2&PUSH 155)                   ; LOG
257   (CONST&PUSH 36)                     ; $%I
259   (GETVALUE&PUSH 37)                  ; %PI-VAL
261   (CALL2 38)                          ; MUL2
263   (JMP L283)
265   L265
265   (CONST 10)                          ; 0
266   (JMP L283)
268   L268
268   (CONST&PUSH 44)                     ; ((MTIMES SIMP) $%I $%PI)
270   (GETVALUE&PUSH 1)                   ; Y
272   (JMPIFEQTO 5 L265)                  ; -1
275   (CONST&PUSH 45)                     ; (%LOG SIMP)
277   (GETVALUE&PUSH 1)                   ; Y
279   (CALL1&PUSH 46)                     ; NEG
281   (LIST 2)
283   L283
283   (PUSH)
284   (CALL2 39)                          ; ADD2
286   (JMP L350)
288   L288
288   (GETVALUE&PUSH 18)                  ; $LOGEXPAND
290   (CONST&PUSH 26)                     ; ($ALL $SUPER)
291   (CALL2&JMPIFNOT 27 L300)            ; MEMQ
294   (GETVALUE&PUSH 1)                   ; Y
296   (CALL1&JMPIF 28 L163)               ; MTIMESP
300   L300
300   (GETVALUE&PUSH 1)                   ; Y
302   (CALL1&JMPIF 31 L202)               ; $BFLOATP
306   (GETVALUE&PUSH 1)                   ; Y
308   (CALLS2&JMPIF 15 L221)              ; FLOATP
312   (GETVALUE 34)                       ; $NUMER
314   (JMPIFNOT L322)
316   (GETVALUE&PUSH 1)                   ; Y
318   (CALLS2&JMPIF 12 L221)              ; INTEGERP
322   L322
322   (GETVALUE 40)                       ; $LOGNEGINT
324   (JMPIFNOT L339)
326   (GETVALUE&PUSH 1)                   ; Y
328   (CALL1&JMPIFNOT 41 L339)            ; MAXIMA-INTEGERP
331   (GETVALUE&PUSH 1)                   ; Y
333   (CALL1&PUSH 42)                     ; $SIGN
335   (JMPIFEQTO 43 L268)                 ; $NEG
339   L339
339   (CONST 47)                          ; (%LOG)
341   L341
341   (PUSH)
342   (GETVALUE&PUSH 1)                   ; Y
344   (LIST&PUSH 2)
346   (GETVALUE&PUSH 0)                   ; X
348   (CALL2 24)                          ; EQTEST
350   L350
350   (UNBIND 2)
352   (SKIP&RET 4)


Disassembly of function #:|(DEFUN SIMPLN1 (W) ...)-121|
(CONST 0) = SIMPLN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPLN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPLN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPLN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPLN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPLN1
8     (SKIP&RET 1)


Disassembly of function SIMPLN1
(CONST 0) = (MTIMES)
(CONST 1) = (%LOG)
(CONST 2) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MTIMES)
1     (LOAD 2)
2     (CDR)
3     (CDR)
4     (CAR&PUSH)
5     (CONST&PUSH 1)                      ; (%LOG)
6     (LOAD 4)
7     (CDR)
8     (CAR&PUSH)
9     (LIST&PUSH 2)
11    (T&PUSH)
12    (CALL2&PUSH 2)                      ; SIMPLIFYA
14    (LIST&PUSH 3)
16    (T&PUSH)
17    (CALL2 2)                           ; SIMPLIFYA
19    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SIMPSQRT (X VESTIGIAL Z) ...)-122|
(CONST 0) = SIMPSQRT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPSQRT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPSQRT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPSQRT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPSQRT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPSQRT
8     (SKIP&RET 1)


Disassembly of function SIMPSQRT
(CONST 0) = X
(CONST 1) = ONEARGCHECK
(CONST 2) = (MEXPT)
(CONST 3) = ((RAT SIMP) 1 2)
(CONST 4) = SIMPLIFYA
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
14 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; ONEARGCHECK
7     (CONST&PUSH 2)                      ; (MEXPT)
8     (GETVALUE 0)                        ; X
10    (CDR)
11    (CAR&PUSH)
12    (CONST&PUSH 3)                      ; ((RAT SIMP) 1 2)
13    (LIST&PUSH 3)
15    (LOAD&PUSH 5)
16    (CALL2 4)                           ; SIMPLIFYA
18    (UNBIND1)
19    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMPQUOT (X Y Z) ...)-123|
(CONST 0) = SIMPQUOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPQUOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPQUOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPQUOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPQUOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPQUOT
8     (SKIP&RET 1)


Disassembly of function SIMPQUOT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = *RED
(CONST 4) = SIMPLIFYA
(CONST 5) = (MEXPT)
(CONST 6) = -1
(CONST 7) = 1
(CONST 8) = (MTIMES)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variables : (X Y)
104 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (CALLS2&JMPIFNOT 12 L34)            ; INTEGERP
17    (GETVALUE 0)                        ; X
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (CALLS2&JMPIFNOT 12 L34)            ; INTEGERP
25    (GETVALUE 0)                        ; X
27    (CDR)
28    (CDR)
29    (CAR&PUSH)
30    (CALLS2&JMPIFNOT 145 L101)          ; ZEROP
34    L34
34    (GETVALUE 0)                        ; X
36    (CDR)
37    (CAR&PUSH)
38    (CALLS2&JMPIFNOT 8 L58)             ; NUMBERP
41    (GETVALUE 0)                        ; X
43    (CDR)
44    (CDR)
45    (CAR&PUSH)
46    (CALLS2&JMPIFNOT 8 L58)             ; NUMBERP
49    (GETVALUE 0)                        ; X
51    (CDR)
52    (CDR)
53    (CAR&PUSH)
54    (CALLS2&JMPIFNOT 145 L122)          ; ZEROP
58    L58
58    (GETVALUE 0)                        ; X
60    (CDR)
61    (CAR&PUSH)
62    (LOAD&PUSH 8)
63    (CALL2 4)                           ; SIMPLIFYA
65    (SETVALUE 1)                        ; Y
67    (CONST&PUSH 5)                      ; (MEXPT)
68    (GETVALUE 0)                        ; X
70    (CDR)
71    (CDR)
72    (CAR&PUSH)
73    (CONST&PUSH 6)                      ; -1
74    (LIST&PUSH 3)
76    (LOAD&PUSH 8)
77    (CALL2 4)                           ; SIMPLIFYA
79    (SETVALUE 0)                        ; X
81    (GETVALUE&PUSH 1)                   ; Y
83    (JMPIFEQTO 7 L159)                  ; 1
87    (CONST&PUSH 8)                      ; (MTIMES)
88    (GETVALUE&PUSH 1)                   ; Y
90    (GETVALUE&PUSH 0)                   ; X
92    (LIST&PUSH 3)
94    (T&PUSH)
95    (CALL2 4)                           ; SIMPLIFYA
97    L97
97    (UNBIND 2)
99    (SKIP&RET 4)
101   L101
101   (GETVALUE 0)                        ; X
103   (CDR)
104   (CAR&PUSH)
105   (GETVALUE 0)                        ; X
107   (CDR)
108   (CDR)
109   (CAR&PUSH)
110   (CALL2 3)                           ; *RED
112   (JMP L97)
114   L114
114   (GETVALUE&PUSH 0)                   ; X
116   (GETVALUE&PUSH 1)                   ; Y
118   (CALLS2 181)                        ; TRUNCATE
120   (JMP L153)
122   L122
122   (GETVALUE 0)                        ; X
124   (CDR)
125   (CAR&PUSH)
126   (GETVALUE 0)                        ; X
128   (CDR)
129   (CDR)
130   (CAR)
131   (BIND 1)                            ; Y
133   (LOAD 3)
134   (BIND 0)                            ; X
136   (GETVALUE&PUSH 0)                   ; X
138   (CALLS2&JMPIFNOT 12 L146)           ; INTEGERP
141   (GETVALUE&PUSH 1)                   ; Y
143   (CALLS2&JMPIF 12 L114)              ; INTEGERP
146   L146
146   (GETVALUE&PUSH 0)                   ; X
148   (GETVALUE&PUSH 1)                   ; Y
150   (CALLSR 1 56)                       ; /
153   L153
153   (UNBIND 2)
155   (SKIP 1)
157   (JMP L97)
159   L159
159   (GETVALUE 0)                        ; X
161   (JMP L97)


Disassembly of function #:|(DEFMFUN SIMPABS (X Y Z) ...)-124|
(CONST 0) = SIMPABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPABS
8     (SKIP&RET 1)


Disassembly of function SIMPABS
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = RATNUMP
(CONST 5) = $BFLOATP
(CONST 6) = CSIGN
(CONST 7) = CABS
(CONST 8) = ($POS $PZ)
(CONST 9) = MEMQ
(CONST 10) = ($NEG $NZ)
(CONST 11) = NEG
(CONST 12) = $ZERO
(CONST 13) = 0
(CONST 14) = MEXPTP
(CONST 15) = (MABS)
(CONST 16) = MTIMESP
(CONST 17) = (MABS)
(CONST 18) = MULN
(CONST 19) = MMINUSP
(CONST 20) = (MABS SIMP)
(CONST 21) = MBAGP
(CONST 22) = (MABS)
(CONST 23) = (MABS)
(CONST 24) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (Y)
157 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 8 L104)               ; NUMBERP
24    (GETVALUE&PUSH 1)                   ; Y
26    (CALL1&JMPIF 4 L111)                ; RATNUMP
30    (GETVALUE&PUSH 1)                   ; Y
32    (CALL1&JMPIF 5 L111)                ; $BFLOATP
36    (GETVALUE&PUSH 1)                   ; Y
38    (CALL1 6)                           ; CSIGN
40    (STORE 7)
41    (PUSH)
42    (T)
43    (JMPIFEQ L122)
46    (LOAD&PUSH 7)
47    (CONST&PUSH 8)                      ; ($POS $PZ)
48    (CALL2&JMPIF 9 L129)                ; MEMQ
52    (LOAD&PUSH 7)
53    (CONST&PUSH 10)                     ; ($NEG $NZ)
54    (CALL2&JMPIF 9 L134)                ; MEMQ
58    (LOAD&PUSH 7)
59    (JMPIFEQTO 12 L141)                 ; $ZERO
63    (GETVALUE&PUSH 1)                   ; Y
65    (CALL1&JMPIFNOT 14 L234)            ; MEXPTP
69    (GETVALUE 1)                        ; Y
71    (CDR)
72    (CDR)
73    (CAR&PUSH)
74    (CALLS2&JMPIFNOT 12 L234)           ; INTEGERP
78    (GETVALUE 1)                        ; Y
80    (CAR&PUSH)
81    (CONST&PUSH 15)                     ; (MABS)
82    (GETVALUE 1)                        ; Y
84    (CDR)
85    (CAR&PUSH)
86    (LIST&PUSH 2)
88    (NIL&PUSH)
89    (T&PUSH)
90    (JSR L0)
93    L93
93    (PUSH)
94    (GETVALUE 1)                        ; Y
96    (CDR)
97    (CDR)
98    (CAR&PUSH)
99    (LIST 3)
101   (JMP L259)
104   L104
104   (GETVALUE&PUSH 1)                   ; Y
106   (CALLS2 158)                        ; ABS
108   (JMP L259)
111   L111
111   (GETVALUE 1)                        ; Y
113   (CAR&PUSH)
114   (GETVALUE 1)                        ; Y
116   (CDR)
117   (CAR&PUSH)
118   (CALLS2 158)                        ; ABS
120   (JMP L93)
122   L122
122   (GETVALUE&PUSH 1)                   ; Y
124   (CALL1 7)                           ; CABS
126   (JMP L259)
129   L129
129   (GETVALUE 1)                        ; Y
131   (JMP L259)
134   L134
134   (GETVALUE&PUSH 1)                   ; Y
136   (CALL1 11)                          ; NEG
138   (JMP L259)
141   L141
141   (CONST 13)                          ; 0
142   (JMP L259)
145   L145
145   (NIL&PUSH)
146   (GETVALUE 1)                        ; Y
148   (CDR&PUSH)
149   (JMP L168)
151   L151
151   (LOAD&CAR&PUSH 0)
153   (CONST&PUSH 17)                     ; (MABS)
154   (LOAD&PUSH 1)
155   (LIST&PUSH 2)
157   (NIL&PUSH)
158   (T&PUSH)
159   (JSR&PUSH L0)
162   (LOAD&CONS&STORE 2)
164   (SKIP 1)
166   (LOAD&CDR&STORE 0)
168   L168
168   (LOAD&PUSH 0)
169   (CALLS1&JMPIFNOT 146 L151)          ; ENDP
172   (SKIP 1)
174   (LOAD&PUSH 0)
175   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
178   (T&PUSH)
179   (CALL2 18)                          ; MULN
181   (JMP L259)
184   L184
184   (CONST&PUSH 20)                     ; (MABS SIMP)
185   (GETVALUE&PUSH 1)                   ; Y
187   (CALL1&PUSH 11)                     ; NEG
189   (LIST 2)
191   (JMP L259)
194   L194
194   (GETVALUE 1)                        ; Y
196   (CAR&PUSH)
197   (NIL&PUSH)
198   (GETVALUE 1)                        ; Y
200   (CDR&PUSH)
201   (JMP L220)
203   L203
203   (LOAD&CAR&PUSH 0)
205   (CONST&PUSH 22)                     ; (MABS)
206   (LOAD&PUSH 1)
207   (LIST&PUSH 2)
209   (NIL&PUSH)
210   (T&PUSH)
211   (JSR&PUSH L0)
214   (LOAD&CONS&STORE 2)
216   (SKIP 1)
218   (LOAD&CDR&STORE 0)
220   L220
220   (LOAD&PUSH 0)
221   (CALLS1&JMPIFNOT 146 L203)          ; ENDP
224   (SKIP 1)
226   (LOAD&PUSH 0)
227   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
229   (SKIP 1)
231   (CONS)
232   (JMP L259)
234   L234
234   (GETVALUE&PUSH 1)                   ; Y
236   (CALL1&JMPIF 16 L145)               ; MTIMESP
240   (GETVALUE&PUSH 1)                   ; Y
242   (CALL1&JMPIF 19 L184)               ; MMINUSP
245   (GETVALUE&PUSH 1)                   ; Y
247   (CALL1&JMPIF 21 L194)               ; MBAGP
250   (CONST&PUSH 23)                     ; (MABS)
251   (GETVALUE&PUSH 1)                   ; Y
253   (LIST&PUSH 2)
255   (GETVALUE&PUSH 0)                   ; X
257   (CALL2 24)                          ; EQTEST
259   L259
259   (UNBIND 2)
261   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PLS (X OUT) ...)-125|
(CONST 0) = PLS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PLS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PLS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PLS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PLS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PLS
8     (SKIP&RET 1)


Disassembly of function PLS
(CONST 0) = X
(CONST 1) = PLUSFLAG
(CONST 2) = MTIMESP
(CONST 3) = TESTTNEG
(CONST 4) = (MPLUS)
(CONST 5) = MNUMP
(CONST 6) = MPLUSP
(CONST 7) = 0
(CONST 8) = (MPLUS)
(CONST 9) = ADDK
(CONST 10) = PLUSIN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PLUSFLAG X)
writes special variables : (PLUSFLAG X)
171 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; PLUSFLAG
7     (GETVALUE&PUSH 0)                   ; X
9     (CALL1&JMPIF 2 L73)                 ; MTIMESP
12    (LOAD&JMPIFNOT 8 L83)
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1&JMPIFNOT 5 L150)             ; MNUMP
22    (CONST&PUSH 8)                      ; (MPLUS)
23    (LOAD 9)
24    (CDR)
25    (CAR&PUSH)
26    (CALL1&JMPIF 5 L111)                ; MNUMP
30    (GETVALUE&PUSH 0)                   ; X
32    (LOAD 10)
33    L33
33    (CDR)
34    (CONS)
35    L35
35    (CONS)
36    (UNBIND1)
37    (SKIP 1)
39    (JMP L241)
42    L42
42    (GETVALUE&PUSH 0)                   ; X
44    (NIL)
45    (CONS)
46    (JMP L35)
48    L48
48    (GETVALUE 0)                        ; X
50    (JMP L61)
52    L52
52    (CONST&PUSH 7)                      ; 0
53    (GETVALUE 0)                        ; X
55    (JMPIFATOM L48)
57    (GETVALUE&PUSH 0)                   ; X
59    (CALLS1 158)                        ; COPY-LIST
61    L61
61    (PUSH)
62    (LIST 2)
64    (JMP L35)
66    L66
66    (GETVALUE 0)                        ; X
68    (CDR&PUSH)
69    (CALLS1 158)                        ; COPY-LIST
71    (JMP L35)
73    L73
73    (GETVALUE&PUSH 0)                   ; X
75    (CALL1 3)                           ; TESTTNEG
77    (SETVALUE 0)                        ; X
79    (LOAD&JMPIF 8 L16)
83    L83
83    (CONST&PUSH 4)                      ; (MPLUS)
84    (GETVALUE&PUSH 0)                   ; X
86    (CALL1&JMPIF 5 L42)                 ; MNUMP
89    (GETVALUE&PUSH 0)                   ; X
91    (CALL1&JMPIFNOT 6 L52)              ; MPLUSP
94    (GETVALUE 0)                        ; X
96    (CDR)
97    (CAR&PUSH)
98    (CALL1&JMPIF 5 L66)                 ; MNUMP
101   (CONST&PUSH 7)                      ; 0
102   (GETVALUE 0)                        ; X
104   (CDR&PUSH)
105   (CALLS1 158)                        ; COPY-LIST
107   (CONS)
108   (JMP L35)
111   L111
111   (LOAD 9)
112   (CDR)
113   (CAR&PUSH)
114   (GETVALUE&PUSH 0)                   ; X
116   (CALL2&PUSH 9)                      ; ADDK
118   (LOAD 10)
119   (CDR)
120   (JMP L33)
123   L123
123   (GETVALUE&PUSH 0)                   ; X
125   (LOAD&CDR&PUSH 9)
127   (CALL2 10)                          ; PLUSIN
129   (GETVALUE 1)                        ; PLUSFLAG
131   (JMPIFNOT L237)
134   (JMP L201)
137   L137
137   (LOAD 9)
138   (CDR)
139   (CAR)
140   (JMP L164)
142   L142
142   (GETVALUE 0)                        ; X
144   (CDR)
145   (SETVALUE 0)                        ; X
147   (CAR)
148   (JMP L173)
150   L150
150   (GETVALUE&PUSH 0)                   ; X
152   (CALL1&JMPIFNOT 6 L123)             ; MPLUSP
155   (LOAD&CDR&PUSH 8)
157   (LOAD 9)
158   (CDR)
159   (CAR&PUSH)
160   (CALL1&JMPIF 5 L137)                ; MNUMP
163   (CONST 7)                           ; 0
164   L164
164   (PUSH)
165   (GETVALUE 0)                        ; X
167   (CDR)
168   (CAR&PUSH)
169   (CALL1&JMPIF 5 L142)                ; MNUMP
172   (CONST 7)                           ; 0
173   L173
173   (PUSH)
174   (CALL2&PUSH 9)                      ; ADDK
176   (CALLS1 168)                        ; RPLACA
178   (LOAD 8)
179   (CDR)
180   (STORE 3)
181   (JMP L190)
183   L183
183   (GETVALUE 0)                        ; X
185   (CAR&PUSH)
186   (LOAD&PUSH 4)
187   (CALL2 10)                          ; PLUSIN
189   (STORE 3)
190   L190
190   (GETVALUE 0)                        ; X
192   (CDR)
193   (SETVALUE 0)                        ; X
195   (JMPIF L183)
197   (GETVALUE 1)                        ; PLUSFLAG
199   (JMPIFNOT L237)
201   L201
201   (NIL)
202   (SETVALUE 1)                        ; PLUSFLAG
204   (JMP L223)
206   L206
206   (LOAD 3)
207   (CDR)
208   (CAR)
209   (SETVALUE 0)                        ; X
211   (LOAD&PUSH 3)
212   (LOAD 4)
213   (CDR)
214   (CDR&PUSH)
215   (CALLS1 170)                        ; RPLACD
217   (GETVALUE&PUSH 0)                   ; X
219   (LOAD&PUSH 9)
220   (JSR L0)
223   L223
223   (LOAD 8)
224   (CDR)
225   (STORE 3)
226   L226
226   (LOAD 3)
227   (CDR)
228   (CAR&PUSH)
229   (CALL1&JMPIF 6 L206)                ; MPLUSP
232   (LOAD&CDR&STORE 3)
234   (CDR)
235   (JMPIF L226)
237   L237
237   (LOAD 8)
238   (UNBIND1)
239   (SKIP 1)
241   L241
241   (UNBIND1)
242   (SKIP&RET 3)


Disassembly of function #:|(DEFUN TESTT (X) ...)-126|
(CONST 0) = TESTT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TESTT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TESTT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TESTT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TESTT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TESTT
8     (SKIP&RET 1)


Disassembly of function TESTT
(CONST 0) = X
(CONST 1) = MNUMP
(CONST 2) = ONEP1
(CONST 3) = TESTTNEG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
42 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L35)                 ; MNUMP
8     (GETVALUE 0)                        ; X
10    (CDR)
11    (CDR)
12    (JMPIFNOT L39)
14    (GETVALUE 0)                        ; X
16    (CDR)
17    (CAR&PUSH)
18    (CALL1&JMPIFNOT 2 L53)              ; ONEP1
21    (GETVALUE 0)                        ; X
23    (CDR)
24    (CDR)
25    (CDR)
26    (JMPIF L43)
28    (GETVALUE 0)                        ; X
30    (CDR)
31    L31
31    (CDR)
32    (CAR)
33    (JMP L57)
35    L35
35    (GETVALUE 0)                        ; X
37    (JMP L57)
39    L39
39    (GETVALUE 0)                        ; X
41    (JMP L31)
43    L43
43    (GETVALUE&PUSH 0)                   ; X
45    (GETVALUE 0)                        ; X
47    (CDR)
48    (CDR&PUSH)
49    (CALLS1 170)                        ; RPLACD
51    (JMP L57)
53    L53
53    (GETVALUE&PUSH 0)                   ; X
55    (CALL1 3)                           ; TESTTNEG
57    L57
57    (UNBIND1)
58    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TESTTNEG (X) ...)-127|
(CONST 0) = TESTTNEG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TESTTNEG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TESTTNEG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TESTTNEG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TESTTNEG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TESTTNEG
8     (SKIP&RET 1)


Disassembly of function TESTTNEG
(CONST 0) = X
(CONST 1) = -1
(CONST 2) = MPLUSP
(CONST 3) = $NEGDISTRIB
(CONST 4) = MUL2
(CONST 5) = ADDN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NEGDISTRIB X)
48 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CAR&PUSH)
7     (JMPIFNOTEQTO 1 L29)                ; -1
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CDR)
14    (CDR)
15    (JMPIF L29)
17    (GETVALUE 0)                        ; X
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (CALL1&JMPIFNOT 2 L29)              ; MPLUSP
25    (GETVALUE 3)                        ; $NEGDISTRIB
27    (JMPIF L34)
29    L29
29    (GETVALUE 0)                        ; X
31    L31
31    (UNBIND1)
32    (SKIP&RET 2)
34    L34
34    (NIL&PUSH)
35    (GETVALUE 0)                        ; X
37    (CDR)
38    (CDR)
39    (CAR)
40    (CDR&PUSH)
41    (JMP L55)
43    L43
43    (LOAD&CAR&PUSH 0)
45    (CONST&PUSH 1)                      ; -1
46    (LOAD&PUSH 1)
47    (CALL2&PUSH 4)                      ; MUL2
49    (LOAD&CONS&STORE 2)
51    (SKIP 1)
53    (LOAD&CDR&STORE 0)
55    L55
55    (LOAD&PUSH 0)
56    (CALLS1&JMPIFNOT 146 L43)           ; ENDP
59    (SKIP 1)
61    (LOAD&PUSH 0)
62    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
65    (T&PUSH)
66    (CALL2 5)                           ; ADDN
68    (JMP L31)


Disassembly of function #:|(DEFUN TESTP (X) ...)-128|
(CONST 0) = TESTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TESTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TESTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TESTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TESTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TESTP
8     (SKIP&RET 1)


Disassembly of function TESTP
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = ZEROP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L34)
7     (GETVALUE 0)                        ; X
9     (CDR)
10    (CDR)
11    (JMPIFNOT L37)
13    (GETVALUE 0)                        ; X
15    (CDR)
16    (CAR&PUSH)
17    (CALL1&JMPIFNOT 2 L51)              ; ZEROP1
20    (GETVALUE 0)                        ; X
22    (CDR)
23    (CDR)
24    (CDR)
25    (JMPIF L41)
27    (GETVALUE 0)                        ; X
29    (CDR)
30    L30
30    (CDR)
31    (CAR)
32    (JMP L53)
34    L34
34    (CONST 1)                           ; 0
35    (JMP L53)
37    L37
37    (GETVALUE 0)                        ; X
39    (JMP L30)
41    L41
41    (GETVALUE&PUSH 0)                   ; X
43    (GETVALUE 0)                        ; X
45    (CDR)
46    (CDR&PUSH)
47    (CALLS1 170)                        ; RPLACD
49    (JMP L53)
51    L51
51    (GETVALUE 0)                        ; X
53    L53
53    (UNBIND1)
54    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIMPMIN (X VESTIGIAL Z) ...)-129|
(CONST 0) = SIMPMIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPMIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPMIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPMIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPMIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPMIN
8     (SKIP&RET 1)


Disassembly of function SIMPMIN
(CONST 0) = X
(CONST 1) = ONEARGCHECK
(CONST 2) = (MTIMES SIMP)
(CONST 3) = -1
(CONST 4) = (MTIMES)
(CONST 5) = SIMPLIFYA
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
39 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; ONEARGCHECK
7     (GETVALUE 0)                        ; X
9     (CDR)
10    (CAR&PUSH)
11    (CALLS2&JMPIF 8 L37)                ; NUMBERP
14    (GETVALUE 0)                        ; X
16    (CDR)
17    (CAR)
18    (JMPIFATOM L46)
20    (CONST&PUSH 4)                      ; (MTIMES)
21    (CONST&PUSH 3)                      ; -1
22    (GETVALUE 0)                        ; X
24    (CDR)
25    (CAR&PUSH)
26    (LOAD&PUSH 7)
27    (CALL2&PUSH 5)                      ; SIMPLIFYA
29    (LIST&PUSH 3)
31    (T&PUSH)
32    (CALL2 5)                           ; SIMPLIFYA
34    L34
34    (UNBIND1)
35    (SKIP&RET 4)
37    L37
37    (GETVALUE 0)                        ; X
39    (CDR)
40    (CAR&PUSH)
41    (CALLSR 0 54)                       ; -
44    (JMP L34)
46    L46
46    (CONST&PUSH 2)                      ; (MTIMES SIMP)
47    (CONST&PUSH 3)                      ; -1
48    (GETVALUE 0)                        ; X
50    (CDR)
51    (CAR&PUSH)
52    (LIST 3)
54    (JMP L34)


Disassembly of function #:|(DEFMFUN SIMPTIMES (X W Z) ...)-130|
(CONST 0) = SIMPTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPTIMES
8     (SKIP&RET 1)


Disassembly of function SIMPTIMES
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = ZEROP1
(CONST 3) = $MX0SIMP
(CONST 4) = MXORLISTP1
(CONST 5) = CONSTMX
(CONST 6) = (MEQUAL SIMP)
(CONST 7) = MUL2
(CONST 8) = MEXPTP
(CONST 9) = $NUMBERP
(CONST 10) = MEQUALP
(CONST 11) = (MEQUAL SIMP)
(CONST 12) = SIMPLIFYA
(CONST 13) = MRAT
(CONST 14) = TRUNC
(CONST 15) = MEMQ
(CONST 16) = SPSIMPCASES
(CONST 17) = RATDISREP
(CONST 18) = (MTIMES)
(CONST 19) = SIMPLIFY
(CONST 20) = RATF
(CONST 21) = MEQUAL
(CONST 22) = (MLIST $MATRIX)
(CONST 23) = $DOALLMXOPS
(CONST 24) = $DOMXMXOPS
(CONST 25) = $DOMXTIMES
(CONST 26) = MLIST
(CONST 27) = $LISTARITH
(CONST 28) = *INV*
(CONST 29) = $DETOUT
(CONST 30) = STIMEX
(CONST 31) = TMS
(CONST 32) = %SUM
(CONST 33) = $SUMEXPAND
(CONST 34) = SUMTIMES
(CONST 35) = MTIMESP
(CONST 36) = TESTT
(CONST 37) = (MTIMES)
(CONST 38) = (MEXPT MTIMES)
(CONST 39) = $EXPOP
(CONST 40) = $EXPON
(CONST 41) = EXPANDFLAG
(CONST 42) = MTIMES
(CONST 43) = EXPANDTIMES
(CONST 44) = MPLUSP
(CONST 45) = FIXNUMP
(CONST 46) = EXPANDEXPT
(CONST 47) = $LISTP
(CONST 48) = $DOSCMXOPS
(CONST 49) = (-1 -1.0)
(CONST 50) = ZL-MEMBER
(CONST 51) = (-1 -1.0)
(CONST 52) = MXTIMESC
(CONST 53) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(EXPANDFLAG $EXPON $EXPOP $SUMEXPAND $DOSCMXOPS *INV* $LISTARITH $DOMXTIMES
 $DOMXMXOPS $DOALLMXOPS $MX0SIMP X)
writes special variable : (X)
417 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (PUSH-NIL 5)
5     (GETVALUE 0)                        ; X
7     (CDR)
8     (JMPIFNOT L16)
10    (GETVALUE 0)                        ; X
12    (STORE 3)
13    (JMP L480)
16    L16
16    (CONST 1)                           ; 1
17    (SKIP 5)
19    (JMP L638)
22    L22
22    (LOAD&PUSH 4)
23    (LOAD&PUSH 2)
24    (CALL2 5)                           ; CONSTMX
26    (SKIP 5)
28    (JMP L638)
31    L31
31    (CONST&PUSH 6)                      ; (MEQUAL SIMP)
32    (LOAD&PUSH 5)
33    (LOAD 4)
34    (CDR)
35    (CAR&PUSH)
36    (CALL2&PUSH 7)                      ; MUL2
38    (LOAD&PUSH 6)
39    (LOAD 5)
40    (CDR)
41    (CDR)
42    (CAR)
43    (JMP L624)
46    L46
46    (LOAD&PUSH 6)
47    (LOAD 1)
48    (JMP L101)
50    L50
50    (GETVALUE 3)                        ; $MX0SIMP
52    (JMPIFNOT L635)
55    (LOAD&JMPIFNOT 1 L62)
58    (PUSH)
59    (CALL1&JMPIF 4 L22)                 ; MXORLISTP1
62    L62
62    (LOAD&JMPIF 2 L31)
65    (GETVALUE&PUSH 0)                   ; X
67    (NIL&PUSH)
68    L68
68    (LOAD&PUSH 1)
69    (CALLS1&JMPIF 146 L633)             ; ENDP
73    (LOAD&CAR&STORE 1 0)
76    (PUSH)
77    (CALL1&JMPIF 4 L46)                 ; MXORLISTP1
80    (LOAD&PUSH 0)
81    (CALL1&JMPIFNOT 8 L132)             ; MEXPTP
84    (LOAD 0)
85    (CDR)
86    (CAR&PUSH)
87    (CALL1&JMPIFNOT 4 L132)             ; MXORLISTP1
90    (LOAD 0)
91    (CDR)
92    (CDR)
93    (CAR&PUSH)
94    (CALL1&JMPIFNOT 9 L132)             ; $NUMBERP
97    (LOAD&PUSH 6)
98    (LOAD 1)
99    (CDR)
100   (CAR)
101   L101
101   (PUSH)
102   (CALL2 5)                           ; CONSTMX
104   (STORE 6)
105   (SKIP 2)
107   (JMP L635)
110   L110
110   (CONST&PUSH 11)                     ; (MEQUAL SIMP)
111   (LOAD&PUSH 7)
112   (LOAD 2)
113   (CDR)
114   (CAR&PUSH)
115   (CALL2&PUSH 7)                      ; MUL2
117   (LOAD&PUSH 8)
118   (LOAD 3)
119   (CDR)
120   (CDR)
121   (CAR&PUSH)
122   (CALL2&PUSH 7)                      ; MUL2
124   (LIST 3)
126   (STORE 6)
127   (SKIP 2)
129   (JMP L635)
132   L132
132   (LOAD&PUSH 0)
133   (CALL1&JMPIF 10 L110)               ; MEQUALP
136   (LOAD&CDR&STORE 1)
138   (JMP L68)
141   L141
141   (GETVALUE 0)                        ; X
143   (CAR)
144   (STORE 10)
146   (JMP L438)
149   L149
149   (LOAD&JMPIF 9 L141)
152   (GETVALUE 0)                        ; X
154   (CAR&PUSH)
155   (NIL&PUSH)
156   (CALL2 12)                          ; SIMPLIFYA
158   (STORE 10)
160   (JMP L438)
163   L163
163   (CONST&PUSH 18)                     ; (MTIMES)
164   (CONST&SYMBOL-FUNCTION&PUSH 19)     ; SIMPLIFY
166   (LOAD&PUSH 12)
167   (GETVALUE 0)                        ; X
169   (CDR)
170   (CONS&PUSH)
171   (CALLSR&PUSH 0 22)                  ; MAPCAR
174   (LOAD&CDR&PUSH 6)
176   (CALLSR 2 35)                       ; NCONC
179   (CONS&PUSH)
180   (CALL1 20)                          ; RATF
182   (SKIP 5)
184   (JMP L638)
187   L187
187   (LOAD 10)
188   (STORE 2)
189   (JMP L480)
192   L192
192   (LOAD&JMPIFNOT 2 L187)
195   (LOAD&CAR&PUSH 2)
197   (LOAD 3)
198   (CDR)
199   (CAR&PUSH)
200   (LOAD 12)
201   (CDR)
202   (CAR&PUSH)
203   (CALL2&PUSH 7)                      ; MUL2
205   (LOAD 4)
206   (CDR)
207   (CDR)
208   (CAR&PUSH)
209   (LOAD 13)
210   (CDR)
211   (CDR)
212   (CAR&PUSH)
213   (CALL2&PUSH 7)                      ; MUL2
215   (LIST 3)
217   (STORE 2)
218   (JMP L480)
221   L221
221   (LOAD 10)
222   (STORE 1)
223   (JMP L480)
226   L226
226   (LOAD&PUSH 1)
227   (LOAD&PUSH 11)
228   (CALL2 30)                          ; STIMEX
230   (STORE 1)
231   (JMP L480)
234   L234
234   (LOAD&JMPIFNOT 1 L221)
237   (GETVALUE 23)                       ; $DOALLMXOPS
239   (JMPIF L249)
241   (GETVALUE 24)                       ; $DOMXMXOPS
243   (JMPIF L249)
245   (GETVALUE 25)                       ; $DOMXTIMES
247   (JMPIFNOT L264)
249   L249
249   (LOAD 10)
250   (CAR)
251   (CAR&PUSH)
252   (JMPIFNOTEQTO 26 L259)              ; MLIST
255   (GETVALUE 27)                       ; $LISTARITH
257   (JMPIFNOT L264)
259   L259
259   (GETVALUE&PUSH 28)                  ; *INV*
261   (JMPIFNOTEQTO 29 L226)              ; $DETOUT
264   L264
264   (LOAD&PUSH 10)
265   (CONST&PUSH 1)                      ; 1
266   (LOAD&PUSH 6)
267   (CALL 3 31)                         ; TMS
270   (STORE 4)
271   (LOAD 1)
272   (STORE 1)
273   (JMP L480)
276   L276
276   (LOAD&PUSH 0)
277   (LOAD&PUSH 11)
278   (CALL2 34)                          ; SUMTIMES
280   (STORE 0)
281   (JMP L480)
284   L284
284   (LOAD&PUSH 4)
285   (CALL1 36)                          ; TESTT
287   (STORE 4)
288   (LOAD&JMPIFNOT 0 L525)
292   (JMP L503)
295   L295
295   (LOAD 0)
296   (STORE 4)
297   (JMP L525)
300   L300
300   (CONST&PUSH 37)                     ; (MTIMES)
302   (LOAD&PUSH 5)
303   (LOAD&PUSH 2)
304   (LIST 3)
306   (STORE 4)
307   (JMP L525)
310   L310
310   (LOAD&PUSH 4)
311   (CALL1 43)                          ; EXPANDTIMES
313   (JMP L335)
315   L315
315   (LOAD 1)
316   (JMP L392)
319   L319
319   (LOAD&PUSH 4)
320   (LOAD&PUSH 2)
321   (CALL2 52)                          ; MXTIMESC
323   (JMP L392)
326   L326
326   (LOAD 4)
327   (CDR)
328   (CAR&PUSH)
329   (LOAD 5)
330   (CDR)
331   (CDR)
332   (CAR&PUSH)
333   (CALL2 46)                          ; EXPANDEXPT
335   L335
335   (STORE 4)
336   (LOAD&JMPIFNOT 1 L599)
340   L340
340   (LOAD&JMPIFNOT 4 L315)
343   (LOAD&PUSH 1)
344   (CALL1&JMPIF 47 L371)               ; $LISTP
347   (GETVALUE 23)                       ; $DOALLMXOPS
349   (JMPIF L371)
351   (GETVALUE 48)                       ; $DOSCMXOPS
353   (JMPIFNOT L361)
355   (LOAD&PUSH 4)
356   (CONST&PUSH 49)                     ; (-1 -1.0)
358   (CALL2&JMPIFNOT 50 L371)            ; ZL-MEMBER
361   L361
361   (GETVALUE 24)                       ; $DOMXMXOPS
363   (JMPIFNOT L379)
365   (LOAD&PUSH 4)
366   (CONST&PUSH 51)                     ; (-1 -1.0)
368   (CALL2&JMPIFNOT 50 L379)            ; ZL-MEMBER
371   L371
371   (LOAD&PUSH 1)
372   (CALL1&JMPIFNOT 47 L319)            ; $LISTP
375   (GETVALUE 27)                       ; $LISTARITH
377   (JMPIF L319)
379   L379
379   (LOAD&PUSH 1)
380   (CONST&PUSH 1)                      ; 1
381   (LOAD&PUSH 6)
382   (CONST&PUSH 1)                      ; 1
383   (NIL&PUSH)
384   (CALL&PUSH 3 31)                    ; TMS
387   (CALL&PUSH 3 31)                    ; TMS
390   (CALL1 36)                          ; TESTT
392   L392
392   (STORE 4)
393   (LOAD&JMPIFNOT 4 L603)
397   L397
397   (PUSH)
398   (LOAD&PUSH 4)
399   (CALL2 53)                          ; EQTEST
401   (STORE 4)
402   (LOAD&JMPIFNOT 2 L635)
406   (JMP L606)
409   L409
409   (LOAD&JMPIF 2 L433)
412   (LOAD&JMPIF 1 L433)
415   (LOAD&JMPIFNOT 0 L425)
418   (CONST&PUSH 14)                     ; TRUNC
419   (LOAD 11)
420   (CAR)
421   (CDR&PUSH)
422   (CALL2&JMPIFNOT 15 L433)            ; MEMQ
425   L425
425   (GETVALUE 0)                        ; X
427   (CDR&PUSH)
428   (LOAD&PUSH 11)
429   (CALL2&JMPIFNOT 16 L163)            ; SPSIMPCASES
433   L433
433   (LOAD&PUSH 10)
434   (CALL1 17)                          ; RATDISREP
436   (STORE 10)
438   L438
438   (LOAD 10)
439   (JMPIFATOM L473)
441   (LOAD 10)
442   (CAR)
443   (CAR&PUSH)
444   (JMPIFEQTO 13 L409)                 ; MRAT
447   (LOAD 10)
448   (CAR)
449   (CAR&PUSH)
450   (JMPIFEQTO 21 L192)                 ; MEQUAL
454   (LOAD 10)
455   (CAR)
456   (CAR&PUSH)
457   (CONST&PUSH 22)                     ; (MLIST $MATRIX)
458   (CALL2&JMPIF 15 L234)               ; MEMQ
462   (LOAD 10)
463   (CAR)
464   (CAR&PUSH)
465   (JMPIFNOTEQTO 32 L473)              ; %SUM
468   (GETVALUE 33)                       ; $SUMEXPAND
470   (JMPIF L276)
473   L473
473   (LOAD&PUSH 10)
474   (CONST&PUSH 1)                      ; 1
475   (LOAD&PUSH 6)
476   (CALL 3 31)                         ; TMS
479   (STORE 4)
480   L480
480   (GETVALUE 0)                        ; X
482   (CDR)
483   (SETVALUE 0)                        ; X
485   (LOAD&PUSH 4)
486   (CALL1&JMPIF 2 L50)                 ; ZEROP1
490   (GETVALUE 0)                        ; X
492   (JMPIF L149)
495   (LOAD&PUSH 4)
496   (CALL1&JMPIF 35 L284)               ; MTIMESP
500   (LOAD&JMPIFNOT 0 L525)
503   L503
503   (LOAD&JMPIFNOT 4 L295)
507   (LOAD&PUSH 4)
508   (JMPIFEQTO 1 L295)                  ; 1
512   (LOAD&PUSH 4)
513   (CALL1&JMPIFNOT 35 L300)            ; MTIMESP
517   (LOAD&PUSH 4)
518   (LOAD&PUSH 1)
519   (LIST&PUSH 1)
521   (CALLSR&STORE 2 35 4)               ; NCONC
525   L525
525   (LOAD 4)
526   (JMPIFATOM L595)
529   (LOAD 4)
530   (CAR)
531   (CAR&PUSH)
532   (CONST&PUSH 38)                     ; (MEXPT MTIMES)
534   (CALL2&JMPIFNOT 15 L595)            ; MEMQ
537   (GETVALUE&PUSH 39)                  ; $EXPOP
539   (CALLS2&JMPIFNOT 145 L547)          ; ZEROP
542   (GETVALUE&PUSH 40)                  ; $EXPON
544   (CALLS2&JMPIF 145 L595)             ; ZEROP
547   L547
547   (GETVALUE 41)                       ; EXPANDFLAG
549   (JMPIF L595)
551   (LOAD 4)
552   (CAR)
553   (CAR&PUSH)
554   (JMPIFEQTO 42 L310)                 ; MTIMES
558   (LOAD 4)
559   (CDR)
560   (CAR&PUSH)
561   (CALL1&JMPIFNOT 44 L595)            ; MPLUSP
564   (LOAD 4)
565   (CDR)
566   (CDR)
567   (CAR&PUSH)
568   (CALL1&JMPIFNOT 45 L595)            ; FIXNUMP
571   (LOAD 4)
572   (CDR)
573   (CDR)
574   (CAR&PUSH)
575   (GETVALUE&PUSH 39)                  ; $EXPOP
577   (CALLSR&JMPIF 1 48 L595)            ; >
581   (LOAD 4)
582   (CDR)
583   (CDR)
584   (CAR&PUSH)
585   (CALLSR&PUSH 0 54)                  ; -
588   (GETVALUE&PUSH 40)                  ; $EXPON
590   (CALLSR&JMPIFNOT 1 48 L326)         ; >
595   L595
595   (LOAD&JMPIF 1 L340)
599   L599
599   (LOAD&JMPIF 4 L397)
603   L603
603   (LOAD&JMPIFNOT 2 L635)
606   L606
606   (LOAD&JMPIF 4 L611)
609   (CONST 1)                           ; 1
610   (STORE 4)
611   L611
611   (LOAD&CAR&PUSH 2)
613   (LOAD 3)
614   (CDR)
615   (CAR&PUSH)
616   (LOAD&PUSH 6)
617   (CALL2&PUSH 7)                      ; MUL2
619   (LOAD 4)
620   (CDR)
621   (CDR)
622   (CAR&PUSH)
623   (LOAD 7)
624   L624
624   (PUSH)
625   (CALL2&PUSH 7)                      ; MUL2
627   (LIST 3)
629   (SKIP 5)
631   (JMP L638)
633   L633
633   (SKIP 2)
635   L635
635   (LOAD 4)
636   (SKIP 5)
638   L638
638   (UNBIND1)
639   (SKIP&RET 4)


Disassembly of function #:|(DEFUN SPSIMPCASES (L E) ...)-131|
(CONST 0) = SPSIMPCASES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPSIMPCASES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPSIMPCASES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPSIMPCASES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPSIMPCASES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPSIMPCASES
8     (SKIP&RET 1)


Disassembly of function SPSIMPCASES
(CONST 0) = MBAGP
(CONST 1) = %SUM
(CONST 2) = TRUNC
(CONST 3) = MEMQ
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD&PUSH 2)
1     (NIL&PUSH)
2     (JMP L32)
4     L4
4     (T)
5     (SKIP&RET 5)
7     L7
7     (LOAD&CAR&STORE 1 0)
10    (PUSH)
11    (CALL1&JMPIF 0 L4)                  ; MBAGP
14    (LOAD 0)
15    (JMPIFATOM L30)
17    (LOAD 0)
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFNOTEQTO 1 L30)                ; %SUM
23    (CONST&PUSH 2)                      ; TRUNC
24    (LOAD 4)
25    (CAR)
26    (CDR&PUSH)
27    (CALL2&JMPIFNOT 3 L4)               ; MEMQ
30    L30
30    (LOAD&CDR&STORE 1)
32    L32
32    (LOAD&PUSH 1)
33    (CALLS1&JMPIFNOT 146 L7)            ; ENDP
36    (NIL)
37    (SKIP&RET 5)


Disassembly of function #:|(DEFUN MXTIMESC (SC MX) ...)-132|
(CONST 0) = MXTIMESC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MXTIMESC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MXTIMESC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MXTIMESC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MXTIMESC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MXTIMESC
8     (SKIP&RET 1)


Disassembly of function MXTIMESC
(CONST 0) = SIGN
(CONST 1) = MTIMESP
(CONST 2) = (-1 -1.0)
(CONST 3) = ZL-MEMBER
(CONST 4) = $DOSCMXOPS
(CONST 5) = $DOALLMXOPS
(CONST 6) = $DOMXMXOPS
(CONST 7) = $DOMXTIMES
(CONST 8) = PARTITION-NS
(CONST 9) = $ASSUMESCALAR
(CONST 10) = SCALAR-OR-CONSTANT-P
(CONST 11) = (MTIMES SIMP)
(CONST 12) = ((MTIMES))
(CONST 13) = (MTIMES)
(CONST 14) = MTIMES
(CONST 15) = OUTERMAP1
(CONST 16) = SIMPLIFYA
(CONST 17) = ((MTIMES))
(CONST 18) = (MTIMES)
(CONST 19) = (MTIMES)
(CONST 20) = TESTT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN $ASSUMESCALAR $DOMXTIMES $DOMXMXOPS $DOALLMXOPS $DOSCMXOPS)
writes special variable : (SIGN)
137 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; SIGN
3     (NIL&PUSH)
4     (LOAD&PUSH 6)
5     (CALL1&JMPIFNOT 1 L43)              ; MTIMESP
8     (LOAD 6)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; (-1 -1.0)
12    (CALL2&JMPIFNOT 3 L43)              ; ZL-MEMBER
15    (GETVALUE 4)                        ; $DOSCMXOPS
17    (JMPIFNOT L43)
19    (GETVALUE 5)                        ; $DOALLMXOPS
21    (JMPIF L43)
23    (GETVALUE 6)                        ; $DOMXMXOPS
25    (JMPIF L43)
27    (GETVALUE 7)                        ; $DOMXTIMES
29    (JMPIF L43)
31    (LOAD 6)
32    (CDR)
33    (CAR)
34    (SETVALUE 0)                        ; SIGN
36    (JMPIFNOT L43)
38    (LOAD&CDR&PUSH 6)
40    (NIL&PUSH)
41    (CALLS1 168)                        ; RPLACA
43    L43
43    (LOAD&PUSH 6)
44    (CALL1&JMPIF 1 L128)                ; MTIMESP
48    (LOAD&PUSH 6)
49    (GETVALUE&PUSH 9)                   ; $ASSUMESCALAR
51    (CALL2&JMPIFNOT 10 L135)            ; SCALAR-OR-CONSTANT-P
55    (LOAD 6)
56    L56
56    (PUSH)
57    (LOAD&JMPIFNOT 0 L139)
61    (LOAD 0)
62    (JMPIFATOM L69)
64    (LOAD 0)
65    (CAR)
66    (JMPIFNOT L146)
69    L69
69    (LOAD 0)
70    (JMPIFATOM L160)
73    (LOAD 0)
74    (CDR)
75    (JMPIF L82)
77    (LOAD 7)
78    (CDR)
79    (JMPIF L155)
82    L82
82    (LOAD&PUSH 7)
83    (CALL1&JMPIFNOT 1 L160)             ; MTIMESP
87    (CONST&PUSH 17)                     ; ((MTIMES))
88    (CONST&PUSH 14)                     ; MTIMES
89    (CONST&PUSH 18)                     ; (MTIMES)
90    (LOAD 3)
91    (CAR)
92    (CONS&PUSH)
93    (LOAD&PUSH 9)
94    (CALL&PUSH 3 15)                    ; OUTERMAP1
97    (T&PUSH)
98    (CALL2&PUSH 16)                     ; SIMPLIFYA
100   (LIST&PUSH 1)
102   (LOAD 2)
103   (CDR)
104   (CAR)
105   L105
105   (PUSH)
106   (CALLSR 3 34)                       ; APPEND
109   L109
109   (SKIP 1)
111   (STORE 0)
112   (GETVALUE 0)                        ; SIGN
114   (JMPIF L181)
117   (LOAD&PUSH 0)
118   (CALL1&JMPIF 1 L194)                ; MTIMESP
122   (LOAD 0)
123   L123
123   (SKIP 1)
125   (UNBIND1)
126   (SKIP&RET 3)
128   L128
128   (LOAD&CDR&PUSH 6)
130   (CALL1 8)                           ; PARTITION-NS
132   (JMP L56)
135   L135
135   (NIL)
136   (JMP L56)
139   L139
139   (CONST&PUSH 11)                     ; (MTIMES SIMP)
140   (LOAD&PUSH 8)
141   (LOAD&PUSH 8)
142   (LIST 3)
144   (JMP L109)
146   L146
146   (CONST&PUSH 12)                     ; ((MTIMES))
147   (LOAD 1)
148   (CDR)
149   (CAR&PUSH)
150   (LOAD&PUSH 8)
151   (LIST 1)
153   (JMP L105)
155   L155
155   (CONST&PUSH 13)                     ; (MTIMES)
156   (LOAD 1)
157   (CAR)
158   (CONS)
159   (STORE 0)
160   L160
160   (CONST&PUSH 14)                     ; MTIMES
161   (LOAD&PUSH 1)
162   (LOAD&PUSH 8)
163   (CALL&PUSH 3 15)                    ; OUTERMAP1
166   (NIL&PUSH)
167   (CALL2 16)                          ; SIMPLIFYA
169   (JMP L109)
171   L171
171   (LOAD&PUSH 0)
172   (GETVALUE&PUSH 0)                   ; SIGN
174   (LOAD 2)
175   (CDR)
176   (CONS&PUSH)
177   (CALLS1 170)                        ; RPLACD
179   (JMP L123)
181   L181
181   (LOAD&PUSH 0)
182   (CALL1&JMPIF 1 L171)                ; MTIMESP
185   (CONST&PUSH 19)                     ; (MTIMES)
186   (GETVALUE&PUSH 0)                   ; SIGN
188   (LOAD&PUSH 2)
189   (LIST 3)
191   (JMP L123)
194   L194
194   (LOAD&PUSH 0)
195   (CALL1 20)                          ; TESTT
197   (JMP L123)


Disassembly of function #:|(DEFUN STIMEX (X Y) ...)-133|
(CONST 0) = STIMEX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STIMEX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STIMEX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STIMEX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STIMEX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STIMEX
8     (SKIP&RET 1)


Disassembly of function STIMEX
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $DOSCMXOPS
(CONST 3) = $DOMXMXOPS
(CONST 4) = $LISTARITH
(CONST 5) = MTIMES
(CONST 6) = FMAPL1
(CONST 7) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
17 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (T)
7     (BIND 2)                            ; $DOSCMXOPS
9     (T)
10    (BIND 3)                            ; $DOMXMXOPS
12    (T)
13    (BIND 4)                            ; $LISTARITH
15    (CONST&PUSH 5)                      ; MTIMES
16    (GETVALUE&PUSH 0)                   ; X
18    (GETVALUE&PUSH 1)                   ; Y
20    (CALL&PUSH 3 6)                     ; FMAPL1
23    (CALL1 7)                           ; SIMPLIFY
25    (UNBIND 5)
27    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TMS (FACTOR POWER PRODUCT ...) ...)-134|
(CONST 0) = TMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMS
8     (SKIP&RET 1)


Disassembly of function TMS
(CONST 0) = RULESW
(CONST 1) = MPLUSP
(CONST 2) = (MTIMES SIMP)
(CONST 3) = ZEROP1
(CONST 4) = MNEGP
(CONST 5) = ERRORSW
(CONST 6) = "Division by 0"
(CONST 7) = MERROR
(CONST 8) = MTIMESP
(CONST 9) = 1
(CONST 10) = (MTIMES)
(CONST 11) = ((MTIMES))
(CONST 12) = MNUMP
(CONST 13) = (1)
(CONST 14) = EXPTA
(CONST 15) = TIMESK
(CONST 16) = TIMESIN
(CONST 17) = TMS-FORMAT-PRODUCT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRORSW RULESW)
writes special variable : (RULESW)
135 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; RULESW
4     (NIL&PUSH)
5     (LOAD&PUSH 6)
6     (CALL1&JMPIFNOT 1 L14)              ; MPLUSP
9     (CONST&PUSH 2)                      ; (MTIMES SIMP)
10    (LOAD&PUSH 7)
11    (LIST 2)
13    (STORE 6)
14    L14
14    (LOAD&PUSH 8)
15    (CALL1&JMPIF 3 L75)                 ; ZEROP1
18    (LOAD&JMPIF 6 L34)
21    (LOAD&PUSH 8)
22    (CALL1&JMPIFNOT 8 L29)              ; MTIMESP
25    (LOAD&PUSH 7)
26    (JMPIFEQTO 9 L91)                   ; 1
29    L29
29    (CONST&PUSH 10)                     ; (MTIMES)
30    (CONST&PUSH 9)                      ; 1
31    (LIST 2)
33    (STORE 6)
34    L34
34    (LOAD&PUSH 8)
35    (CALL1&JMPIF 12 L116)               ; MNUMP
39    (LOAD&PUSH 8)
40    (CALL1&JMPIF 8 L133)                ; MTIMESP
44    (LOAD&PUSH 8)
45    (LOAD&CDR&PUSH 7)
47    (LOAD&PUSH 9)
48    (CALL 3 16)                         ; TIMESIN
51    (STORE 0)
52    (GETVALUE 0)                        ; RULESW
54    (JMPIF L195)
57    (LOAD 6)
58    L58
58    (SKIP 1)
60    (UNBIND1)
61    (SKIP&RET 5)
63    L63
63    (CONST&PUSH 5)                      ; ERRORSW
64    (T)
65    (THROW)
66    L66
66    (GETVALUE 5)                        ; ERRORSW
68    (JMPIF L63)
70    (CONST&PUSH 6)                      ; "Division by 0"
71    (CALL1 7)                           ; MERROR
73    (JMP L58)
75    L75
75    (LOAD&PUSH 7)
76    (CALL1&JMPIF 4 L66)                 ; MNEGP
79    (LOAD 8)
80    (JMP L58)
82    L82
82    (NIL)
83    (JMP L99)
85    L85
85    (LOAD&PUSH 4)
86    (CALLS1&STORE 158 4)                ; COPY-LIST
89    (JMP L58)
91    L91
91    (CONST&PUSH 11)                     ; ((MTIMES))
92    (LOAD 9)
93    (CDR)
94    (CAR&PUSH)
95    (CALL1&JMPIF 12 L82)                ; MNUMP
98    (CONST 13)                          ; (1)
99    L99
99    (PUSH)
100   (LOAD&CDR&PUSH 10)
102   (NIL&PUSH)
103   (CALLSR&STORE 4 34 4)               ; APPEND
107   (PUSH)
108   (CALLS2&PUSH 71)                    ; LENGTH
110   (JMPIFEQTO 9 L85)                   ; 1
113   (LOAD 4)
114   (JMP L58)
116   L116
116   (LOAD&CDR&PUSH 6)
118   (LOAD 7)
119   (CDR)
120   (CAR&PUSH)
121   (LOAD&PUSH 10)
122   (LOAD&PUSH 10)
123   (CALL2&PUSH 14)                     ; EXPTA
125   (CALL2&PUSH 15)                     ; TIMESK
127   (CALLS1 168)                        ; RPLACA
129   (LOAD 6)
130   (JMP L58)
133   L133
133   (LOAD 8)
134   (CDR)
135   (CAR&PUSH)
136   (CALL1&JMPIFNOT 12 L155)            ; MNUMP
139   (LOAD&CDR&STORE 8)
141   (LOAD&CDR&PUSH 6)
143   (LOAD 7)
144   (CDR)
145   (CAR&PUSH)
146   (LOAD&CAR&PUSH 10)
148   (LOAD&PUSH 10)
149   (CALL2&PUSH 14)                     ; EXPTA
151   (CALL2&PUSH 15)                     ; TIMESK
153   (CALLS1 168)                        ; RPLACA
155   L155
155   (LOAD&CDR&PUSH 8)
157   (LOAD&JMPIFNOT 0 L189)
160   L160
160   (LOAD&PUSH 7)
161   (CALL1&JMPIF 3 L189)                ; ZEROP1
164   (LOAD&CAR&PUSH 0)
166   (LOAD&CDR&PUSH 8)
168   (LOAD&PUSH 10)
169   (CALL 3 16)                         ; TIMESIN
172   (STORE 1)
173   (GETVALUE 0)                        ; RULESW
175   (JMPIFNOT L184)
177   (NIL)
178   (SETVALUE 0)                        ; RULESW
180   (LOAD&PUSH 1)
181   (CALL1 17)                          ; TMS-FORMAT-PRODUCT
183   (STORE 7)
184   L184
184   (LOAD&CDR&STORE 0)
186   (LOAD&JMPIF 0 L160)
189   L189
189   (LOAD 7)
190   (SKIP 1)
192   (JMP L58)
195   L195
195   (LOAD&PUSH 0)
196   (CALL1 17)                          ; TMS-FORMAT-PRODUCT
198   (JMP L58)


Disassembly of function #:|(DEFUN TMS-FORMAT-PRODUCT (X) ...)-135|
(CONST 0) = TMS-FORMAT-PRODUCT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMS-FORMAT-PRODUCT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMS-FORMAT-PRODUCT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMS-FORMAT-PRODUCT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMS-FORMAT-PRODUCT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMS-FORMAT-PRODUCT
8     (SKIP&RET 1)


Disassembly of function TMS-FORMAT-PRODUCT
(CONST 0) = X
(CONST 1) = ZEROP1
(CONST 2) = MNUMP
(CONST 3) = (MTIMES)
(CONST 4) = MTIMESP
(CONST 5) = (MTIMES)
(CONST 6) = 1
(CONST 7) = (MTIMES)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
38 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L30)                 ; ZEROP1
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1&JMPIF 2 L34)                 ; MNUMP
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL1&JMPIFNOT 4 L41)              ; MTIMESP
18    (GETVALUE 0)                        ; X
20    (CDR)
21    (CAR&PUSH)
22    (CALL1&JMPIFNOT 2 L49)              ; MNUMP
25    (GETVALUE 0)                        ; X
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)
30    L30
30    (GETVALUE 0)                        ; X
32    (JMP L27)
34    L34
34    (CONST&PUSH 3)                      ; (MTIMES)
35    (GETVALUE&PUSH 0)                   ; X
37    (LIST 2)
39    (JMP L27)
41    L41
41    (CONST&PUSH 5)                      ; (MTIMES)
42    (CONST&PUSH 6)                      ; 1
43    (GETVALUE&PUSH 0)                   ; X
45    (LIST 3)
47    (JMP L27)
49    L49
49    (CONST&PUSH 7)                      ; (MTIMES)
50    (CONST&PUSH 6)                      ; 1
51    (GETVALUE 0)                        ; X
53    (CDR)
54    (CONS)
55    (CONS)
56    (JMP L27)


Disassembly of function #:|(DEFUN PLSK (X Y) ...)-136|
(CONST 0) = PLSK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PLSK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PLSK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PLSK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PLSK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PLSK
8     (SKIP&RET 1)


Disassembly of function PLSK
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $RATSIMPEXPONS
(CONST 3) = (MPLUS)
(CONST 4) = SRATSIMP
(CONST 5) = MNUMP
(CONST 6) = ADDK
(CONST 7) = ADD2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X $RATSIMPEXPONS)
29 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 2)                        ; $RATSIMPEXPONS
8     (JMPIF L30)
10    (GETVALUE&PUSH 0)                   ; X
12    (CALL1&JMPIFNOT 5 L20)              ; MNUMP
15    (GETVALUE&PUSH 1)                   ; Y
17    (CALL1&JMPIF 5 L41)                 ; MNUMP
20    L20
20    (GETVALUE&PUSH 0)                   ; X
22    (GETVALUE&PUSH 1)                   ; Y
24    (CALL2 7)                           ; ADD2
26    L26
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (CONST&PUSH 3)                      ; (MPLUS)
31    (GETVALUE&PUSH 0)                   ; X
33    (GETVALUE&PUSH 1)                   ; Y
35    (LIST&PUSH 3)
37    (CALL1 4)                           ; SRATSIMP
39    (JMP L26)
41    L41
41    (GETVALUE&PUSH 0)                   ; X
43    (GETVALUE&PUSH 1)                   ; Y
45    (CALL2 6)                           ; ADDK
47    (JMP L26)


Disassembly of function #:|(DEFUN MULT (X Y) ...)-137|
(CONST 0) = MULT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULT
8     (SKIP&RET 1)


Disassembly of function MULT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = MNUMP
(CONST 3) = TIMESK
(CONST 4) = MUL2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
20 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1&JMPIFNOT 2 L16)              ; MNUMP
11    (GETVALUE&PUSH 1)                   ; Y
13    (CALL1&JMPIF 2 L26)                 ; MNUMP
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (GETVALUE&PUSH 1)                   ; Y
20    (CALL2 4)                           ; MUL2
22    L22
22    (UNBIND 2)
24    (SKIP&RET 3)
26    L26
26    (GETVALUE&PUSH 0)                   ; X
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALL2 3)                           ; TIMESK
32    (JMP L22)


Disassembly of function #:|(DEFMFUN SIMP-LIMIT (X VESTIGIAL Z) ...)-138|
(CONST 0) = SIMP-LIMIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-LIMIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-LIMIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-LIMIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-LIMIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-LIMIT
8     (SKIP&RET 1)


Disassembly of function SIMP-LIMIT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 2
(CONST 3) = 4
(CONST 4) = 5
(CONST 5) = %LIMIT
(CONST 6) = WNA-ERR
(CONST 7) = SIMPMAP
(CONST 8) = ($PLUS $MINUS)
(CONST 9) = MEMQ
(CONST 10) = "4th arg to LIMIT must be either PLUS or MINUS:~%~M"
(CONST 11) = MERROR
(CONST 12) = MNUMP
(CONST 13) = "Wrong second arg to LIMIT:~%~M"
(CONST 14) = 1
(CONST 15) = (%LIMIT)
(CONST 16) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (Y)
68 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&PUSH 71)                    ; LENGTH
7     (NIL)
8     (BIND 1)                            ; Y
10    (LOAD&PUSH 3)
11    (CONST&PUSH 2)                      ; 2
12    (CALLSR&JMPIF 1 45 L31)             ; =
16    (LOAD&PUSH 3)
17    (CONST&PUSH 3)                      ; 4
18    (CALLSR&JMPIF 1 45 L31)             ; =
22    (LOAD&PUSH 3)
23    (CONST&PUSH 4)                      ; 5
24    (CALLSR&JMPIF 1 45 L31)             ; =
28    (CONST&PUSH 5)                      ; %LIMIT
29    (CALL1 6)                           ; WNA-ERR
31    L31
31    (GETVALUE 0)                        ; X
33    (CDR&PUSH)
34    (LOAD&PUSH 9)
35    (CALL2 7)                           ; SIMPMAP
37    (SETVALUE 1)                        ; Y
39    (LOAD&PUSH 3)
40    (CONST&PUSH 4)                      ; 5
41    (CALLSR&JMPIFNOT 1 45 L55)          ; =
45    (GETVALUE 1)                        ; Y
47    (CDR)
48    (CDR)
49    (CDR)
50    (CAR&PUSH)
51    (CONST&PUSH 8)                      ; ($PLUS $MINUS)
52    (CALL2&JMPIFNOT 9 L71)              ; MEMQ
55    L55
55    (GETVALUE 1)                        ; Y
57    (CDR)
58    (CAR&PUSH)
59    (CALL1&JMPIFNOT 12 L81)             ; MNUMP
62    (CONST&PUSH 13)                     ; "Wrong second arg to LIMIT:~%~M"
63    (GETVALUE 1)                        ; Y
65    L65
65    (CDR)
66    (CAR&PUSH)
67    (CALL2 11)                          ; MERROR
69    (JMP L95)
71    L71
71    (CONST&PUSH 10)                     ; "4th arg to LIMIT must be either PLUS or MINUS:~%~M"
72    (GETVALUE 1)                        ; Y
74    (CDR)
75    (CDR)
76    (JMP L65)
78    L78
78    (CONST 14)                          ; 1
79    (JMP L95)
81    L81
81    (GETVALUE 1)                        ; Y
83    (CAR&PUSH)
84    (JMPIFEQTO 14 L78)                  ; 1
87    (CONST&PUSH 15)                     ; (%LIMIT)
88    (GETVALUE 1)                        ; Y
90    (CONS&PUSH)
91    (GETVALUE&PUSH 0)                   ; X
93    (CALL2 16)                          ; EQTEST
95    L95
95    (UNBIND1)
96    (SKIP 1)
98    (UNBIND1)
99    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMPINTEG (X VESTIGIAL Z) ...)-139|
(CONST 0) = SIMPINTEG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPINTEG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPINTEG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPINTEG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPINTEG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPINTEG
8     (SKIP&RET 1)


Disassembly of function SIMPINTEG
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 3
(CONST 3) = 5
(CONST 4) = "Wrong number of arguments to 'INTEGRATE"
(CONST 5) = MERROR
(CONST 6) = SIMPMAP
(CONST 7) = MNUMP
(CONST 8) = "Attempt to integrate with respect to a number:~%~M"
(CONST 9) = ALIKE1
(CONST 10) = 0
(CONST 11) = SUB
(CONST 12) = $%I
(CONST 13) = FREE
(CONST 14) = $SIGN
(CONST 15) = $NEG
(CONST 16) = (%INTEGRATE)
(CONST 17) = SIMPLIFYA
(CONST 18) = NEG
(CONST 19) = 1
(CONST 20) = $INF
(CONST 21) = AMONG
(CONST 22) = $MINF
(CONST 23) = INFSIMP
(CONST 24) = (%INTEGRATE)
(CONST 25) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (Y)
123 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&PUSH 71)                    ; LENGTH
7     (NIL)
8     (BIND 1)                            ; Y
10    (LOAD&PUSH 3)
11    (CONST&PUSH 2)                      ; 3
12    (CALLSR&JMPIF 1 45 L25)             ; =
16    (LOAD&PUSH 3)
17    (CONST&PUSH 3)                      ; 5
18    (CALLSR&JMPIF 1 45 L25)             ; =
22    (CONST&PUSH 4)                      ; "Wrong number of arguments to 'INTEGRATE"
23    (CALL1 5)                           ; MERROR
25    L25
25    (GETVALUE 0)                        ; X
27    (CDR&PUSH)
28    (LOAD&PUSH 9)
29    (CALL2 6)                           ; SIMPMAP
31    (SETVALUE 1)                        ; Y
33    (CDR)
34    (CAR&PUSH)
35    (CALL1&JMPIF 7 L112)                ; MNUMP
39    (LOAD&PUSH 3)
40    (CONST&PUSH 3)                      ; 5
41    (CALLSR&JMPIFNOT 1 45 L59)          ; =
45    (GETVALUE 1)                        ; Y
47    (CDR)
48    (CDR)
49    (CAR&PUSH)
50    (GETVALUE 1)                        ; Y
52    (CDR)
53    (CDR)
54    (CDR)
55    (CAR&PUSH)
56    (CALL2&JMPIF 9 L121)                ; ALIKE1
59    L59
59    (LOAD&PUSH 3)
60    (CONST&PUSH 3)                      ; 5
61    (CALLSR&JMPIFNOT 1 45 L91)          ; =
65    (GETVALUE 1)                        ; Y
67    (CDR)
68    (CDR)
69    (CDR)
70    (CAR&PUSH)
71    (GETVALUE 1)                        ; Y
73    (CDR)
74    (CDR)
75    (CAR&PUSH)
76    (CALL2 11)                          ; SUB
78    (STORE 8)
80    (PUSH)
81    (CONST&PUSH 12)                     ; $%I
82    (CALL2&JMPIFNOT 13 L91)             ; FREE
85    (LOAD&PUSH 8)
86    (CALL1&PUSH 14)                     ; $SIGN
88    (JMPIFEQTO 15 L124)                 ; $NEG
91    L91
91    (GETVALUE 1)                        ; Y
93    (CAR&PUSH)
94    (JMPIFEQTO 19 L163)                 ; 1
98    (CONST&PUSH 24)                     ; (%INTEGRATE)
99    (GETVALUE 1)                        ; Y
101   (CONS&PUSH)
102   (GETVALUE&PUSH 0)                   ; X
104   (CALL2 25)                          ; EQTEST
106   L106
106   (UNBIND1)
107   (SKIP 1)
109   (UNBIND1)
110   (SKIP&RET 4)
112   L112
112   (CONST&PUSH 8)                      ; "Attempt to integrate with respect to a number:~%~M"
113   (GETVALUE 1)                        ; Y
115   (CDR)
116   (CAR&PUSH)
117   (CALL2 5)                           ; MERROR
119   (JMP L106)
121   L121
121   (CONST 10)                          ; 0
122   (JMP L106)
124   L124
124   (CONST&PUSH 16)                     ; (%INTEGRATE)
125   (GETVALUE 1)                        ; Y
127   (CAR&PUSH)
128   (GETVALUE 1)                        ; Y
130   (CDR)
131   (CAR&PUSH)
132   (GETVALUE 1)                        ; Y
134   (CDR)
135   (CDR)
136   (CDR)
137   (CAR&PUSH)
138   (GETVALUE 1)                        ; Y
140   (CDR)
141   (CDR)
142   (CAR&PUSH)
143   (LIST&PUSH 5)
145   (T&PUSH)
146   (CALL2&PUSH 17)                     ; SIMPLIFYA
148   (CALL1 18)                          ; NEG
150   (JMP L106)
152   L152
152   (GETVALUE 1)                        ; Y
154   (CDR)
155   (CAR)
156   (JMP L106)
158   L158
158   (LOAD&PUSH 8)
159   (CALL1 23)                          ; INFSIMP
161   (JMP L106)
163   L163
163   (LOAD&PUSH 3)
164   (CONST&PUSH 2)                      ; 3
165   (CALLSR&JMPIF 1 45 L152)            ; =
169   (CONST&PUSH 20)                     ; $INF
170   (LOAD&PUSH 9)
171   (CALL2&JMPIF 21 L158)               ; AMONG
174   (CONST&PUSH 22)                     ; $MINF
175   (LOAD&PUSH 9)
176   (CALL2&JMPIF 21 L158)               ; AMONG
179   (LOAD 8)
180   (JMP L106)


Disassembly of function #:|(DEFMFUN SIMPBIGFLOAT (X VESTIGIAL SIMP-FLAG) ...)-140|
(CONST 0) = SIMPBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function SIMPBIGFLOAT
(CONST 0) = X
(CONST 1) = BIGFLOATM*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
6 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; BIGFLOATM*
7     (UNBIND1)
8     (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMPEXP (X VESTIGIAL Z) ...)-141|
(CONST 0) = SIMPEXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPEXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPEXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPEXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPEXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPEXP
8     (SKIP&RET 1)


Disassembly of function SIMPEXP
(CONST 0) = X
(CONST 1) = ONEARGCHECK
(CONST 2) = (MEXPT)
(CONST 3) = $%E
(CONST 4) = SIMPLIFYA
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
14 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; ONEARGCHECK
7     (CONST&PUSH 2)                      ; (MEXPT)
8     (CONST&PUSH 3)                      ; $%E
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (LIST&PUSH 3)
15    (LOAD&PUSH 5)
16    (CALL2 4)                           ; SIMPLIFYA
18    (UNBIND1)
19    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMPLAMBDA (X VESTIGIAL SIMP-FLAG) ...)-142|
(CONST 0) = SIMPLAMBDA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPLAMBDA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPLAMBDA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPLAMBDA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPLAMBDA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPLAMBDA
8     (SKIP&RET 1)


Disassembly of function SIMPLAMBDA
(CONST 0) = X
(CONST 1) = (LAMBDA SIMP)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; (LAMBDA SIMP)
4     (GETVALUE 0)                        ; X
6     (CDR)
7     (CONS)
8     (UNBIND1)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMPMDEF (X VESTIGIAL SIMP-FLAG) ...)-143|
(CONST 0) = SIMPMDEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPMDEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPMDEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPMDEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPMDEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPMDEF
8     (SKIP&RET 1)


Disassembly of function SIMPMDEF
(CONST 0) = X
(CONST 1) = TWOARGCHECK
(CONST 2) = (MDEFINE SIMP)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
10 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; TWOARGCHECK
7     (CONST&PUSH 2)                      ; (MDEFINE SIMP)
8     (GETVALUE 0)                        ; X
10    (CDR)
11    (CONS)
12    (UNBIND1)
13    (SKIP&RET 4)


Disassembly of function #:|(DEFUN SIMPMAP (E Z) ...)-144|
(CONST 0) = SIMPMAP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPMAP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPMAP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPMAP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPMAP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPMAP
8     (SKIP&RET 1)


Disassembly of function SIMPMAP
(CONST 0) = SIMPCHECK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (JMP L16)
4     L4
4     (LOAD&CAR&PUSH 0)
6     (LOAD&PUSH 0)
7     (LOAD&PUSH 5)
8     (CALL2&PUSH 0)                      ; SIMPCHECK
10    (LOAD&CONS&STORE 2)
12    (SKIP 1)
14    (LOAD&CDR&STORE 0)
16    L16
16    (LOAD&PUSH 0)
17    (CALLS1&JMPIFNOT 146 L4)            ; ENDP
20    (SKIP 1)
22    (LOAD&PUSH 0)
23    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
25    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN INFSIMP (E) ...)-145|
(CONST 0) = INFSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INFSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INFSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INFSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INFSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INFSIMP
8     (SKIP&RET 1)


Disassembly of function INFSIMP
(CONST 0) = 1
(CONST 1) = $EXPAND
(CONST 2) = X
(CONST 3) = $IND
(CONST 4) = FREE
(CONST 5) = $UND
(CONST 6) = $ZEROA
(CONST 7) = $ZEROB
(CONST 8) = $INFINITY
(CONST 9) = MBAGP
(CONST 10) = INFSIMP2
(CONST 11) = $INF
(CONST 12) = $MINF
(CONST 13) = INFSIMP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
43 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 1
2     (CONST&PUSH 0)                      ; 1
3     (CALL 3 1)                          ; $EXPAND
6     (BIND 2)                            ; X
8     (GETVALUE&PUSH 2)                   ; X
10    (CONST&PUSH 3)                      ; $IND
11    (CALL2&JMPIFNOT 4 L63)              ; FREE
14    (GETVALUE&PUSH 2)                   ; X
16    (CONST&PUSH 5)                      ; $UND
17    (CALL2&JMPIFNOT 4 L63)              ; FREE
20    (GETVALUE&PUSH 2)                   ; X
22    (CONST&PUSH 6)                      ; $ZEROA
23    (CALL2&JMPIFNOT 4 L63)              ; FREE
26    (GETVALUE&PUSH 2)                   ; X
28    (CONST&PUSH 7)                      ; $ZEROB
29    (CALL2&JMPIFNOT 4 L63)              ; FREE
32    (GETVALUE&PUSH 2)                   ; X
34    (CONST&PUSH 8)                      ; $INFINITY
35    (CALL2&JMPIFNOT 4 L63)              ; FREE
38    (GETVALUE&PUSH 2)                   ; X
40    (CALL1&JMPIF 9 L63)                 ; MBAGP
43    (GETVALUE&PUSH 2)                   ; X
45    (CONST&PUSH 11)                     ; $INF
46    (CALL2&JMPIFNOT 4 L55)              ; FREE
49    (GETVALUE&PUSH 2)                   ; X
51    (CONST&PUSH 12)                     ; $MINF
52    (CALL2&JMPIF 4 L70)                 ; FREE
55    L55
55    (GETVALUE&PUSH 2)                   ; X
57    (LOAD&PUSH 5)
58    (CALL2 13)                          ; INFSIMP1
60    L60
60    (UNBIND1)
61    (SKIP&RET 2)
63    L63
63    (GETVALUE&PUSH 2)                   ; X
65    (LOAD&PUSH 5)
66    (CALL2 10)                          ; INFSIMP2
68    (JMP L60)
70    L70
70    (GETVALUE 2)                        ; X
72    (JMP L60)


Disassembly of function #:|(DEFUN INFSIMP1 (X E) ...)-146|
(CONST 0) = INFSIMP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INFSIMP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INFSIMP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INFSIMP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INFSIMP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INFSIMP1
8     (SKIP&RET 1)


Disassembly of function INFSIMP1
(CONST 0) = X
(CONST 1) = $MINF
(CONST 2) = 1
(CONST 3) = COEFF
(CONST 4) = $INF
(CONST 5) = 0
(CONST 6) = FREE
(CONST 7) = MUL2
(CONST 8) = ADD2
(CONST 9) = SUB
(CONST 10) = INFSIMP2
(CONST 11) = $ASKSIGN
(CONST 12) = $ZERO
(CONST 13) = $NEG
(CONST 14) = $POS
(CONST 15) = $UND
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
112 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; $MINF
6     (CONST&PUSH 2)                      ; 1
7     (CALL&PUSH 3 3)                     ; COEFF
10    (GETVALUE&PUSH 0)                   ; X
12    (CONST&PUSH 4)                      ; $INF
13    (CONST&PUSH 2)                      ; 1
14    (CALL&PUSH 3 3)                     ; COEFF
17    (LOAD&PUSH 1)
18    (JMPIFNOTEQTO 5 L26)                ; 0
21    (LOAD&PUSH 0)
22    (JMPIFEQTO 5 L152)                  ; 0
26    L26
26    (LOAD&PUSH 1)
27    (CONST&PUSH 4)                      ; $INF
28    (CALL2&JMPIF 6 L37)                 ; FREE
31    (LOAD&PUSH 0)
32    (CONST&PUSH 1)                      ; $MINF
33    (CALL2&JMPIFNOT 6 L152)             ; FREE
37    L37
37    (LOAD&PUSH 1)
38    (CONST&PUSH 1)                      ; $MINF
39    (CALL2&PUSH 7)                      ; MUL2
41    (LOAD&PUSH 1)
42    (CONST&PUSH 4)                      ; $INF
43    (CALL2&PUSH 7)                      ; MUL2
45    (CALL2&PUSH 8)                      ; ADD2
47    (GETVALUE&PUSH 0)                   ; X
49    (CALL2&PUSH 9)                      ; SUB
51    (LOAD&PUSH 0)
52    (CONST&PUSH 4)                      ; $INF
53    (CALL2 6)                           ; FREE
55    (NOT)
56    (JMPIF L143)
59    (SKIP 1)
61    (JMPIF L152)
64    L64
64    (LOAD&PUSH 1)
65    (CALL1&PUSH 11)                     ; $ASKSIGN
67    (LOAD&PUSH 1)
68    (CALL1&PUSH 11)                     ; $ASKSIGN
70    (LOAD&PUSH 0)
71    (JMPIFNOTEQTO 12 L79)               ; $ZERO
74    (LOAD&PUSH 1)
75    (JMPIFEQTO 13 L161)                 ; $NEG
79    L79
79    (LOAD&PUSH 0)
80    (JMPIFNOTEQTO 14 L88)               ; $POS
83    (LOAD&PUSH 1)
84    (JMPIFEQTO 12 L161)                 ; $ZERO
88    L88
88    (LOAD&PUSH 0)
89    (JMPIFNOTEQTO 14 L97)               ; $POS
92    (LOAD&PUSH 1)
93    (JMPIFEQTO 13 L161)                 ; $NEG
97    L97
97    (LOAD&PUSH 0)
98    (JMPIFNOTEQTO 12 L105)              ; $ZERO
101   (LOAD&PUSH 1)
102   (JMPIFEQTO 14 L166)                 ; $POS
105   L105
105   (LOAD&PUSH 0)
106   (JMPIFNOTEQTO 13 L113)              ; $NEG
109   (LOAD&PUSH 1)
110   (JMPIFEQTO 12 L166)                 ; $ZERO
113   L113
113   (LOAD&PUSH 0)
114   (JMPIFNOTEQTO 13 L121)              ; $NEG
117   (LOAD&PUSH 1)
118   (JMPIFEQTO 14 L166)                 ; $POS
121   L121
121   (LOAD&PUSH 0)
122   (JMPIFNOTEQTO 14 L129)              ; $POS
125   (LOAD&PUSH 1)
126   (JMPIFEQTO 14 L171)                 ; $POS
129   L129
129   (LOAD&PUSH 0)
130   (JMPIFNOTEQTO 13 L137)              ; $NEG
133   (LOAD&PUSH 1)
134   (JMPIFEQTO 13 L171)                 ; $NEG
137   L137
137   (NIL)
138   (SKIP 4)
140   L140
140   (UNBIND1)
141   (SKIP&RET 3)
143   L143
143   (LOAD&PUSH 0)
144   (CONST&PUSH 1)                      ; $MINF
145   (CALL2 6)                           ; FREE
147   (SKIP 1)
149   (JMPIF L64)
152   L152
152   (GETVALUE&PUSH 0)                   ; X
154   (LOAD&PUSH 7)
155   (CALL2 10)                          ; INFSIMP2
157   (SKIP 2)
159   (JMP L140)
161   L161
161   (CONST 4)                           ; $INF
162   (SKIP 4)
164   (JMP L140)
166   L166
166   (CONST 1)                           ; $MINF
167   (SKIP 4)
169   (JMP L140)
171   L171
171   (CONST 15)                          ; $UND
172   (SKIP 4)
174   (JMP L140)


Disassembly of function #:|(DEFUN INFSIMP2 (X E) ...)-147|
(CONST 0) = INFSIMP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INFSIMP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INFSIMP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INFSIMP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INFSIMP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INFSIMP2
8     (SKIP&RET 1)


Disassembly of function INFSIMP2
(CONST 0) = X
(CONST 1) = $LIMIT
(CONST 2) = %LIMIT
(CONST 3) = ISINOP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
15 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; $LIMIT
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (CONST&PUSH 2)                      ; %LIMIT
11    (CALL2&JMPIF 3 L19)                 ; ISINOP
14    (GETVALUE 0)                        ; X
16    L16
16    (UNBIND1)
17    (SKIP&RET 3)
19    L19
19    (LOAD 4)
20    (JMP L16)


Disassembly of function #:|(DEFMFUN SIMPDERIV (X Y Z) ...)-148|
(CONST 0) = SIMPDERIV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPDERIV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPDERIV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPDERIV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPDERIV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPDERIV
8     (SKIP&RET 1)


Disassembly of function SIMPDERIV
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = FLAG
(CONST 3) = EVEN
(CONST 4) = (1)
(CONST 5) = %DERIVATIVE
(CONST 6) = WNA-ERR
(CONST 7) = (%DERIVATIVE)
(CONST 8) = SIMPMAP
(CONST 9) = MNUMP
(CONST 10) = "Attempt to differentiate with respect to a number:~%~M"
(CONST 11) = MERROR
(CONST 12) = ZEROP1
(CONST 13) = CONSTANT
(CONST 14) = ALIKE1
(CONST 15) = 0
(CONST 16) = DERIVSIMP
(CONST 17) = DERIVFLAG
(CONST 18) = (%DEL SIMP)
(CONST 19) = DERIV
(CONST 20) = 1
(CONST 21) = ADD2
(CONST 22) = GREAT
(CONST 23) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG DERIVFLAG DERIVSIMP Y X)
writes special variables : (FLAG Y)
290 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (NIL)
7     (BIND 2)                            ; FLAG
9     (PUSH-NIL 2)
11    (GETVALUE&PUSH 0)                   ; X
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CALL1&JMPIF 3 L34)                 ; EVEN
18    (GETVALUE 0)                        ; X
20    (CDR)
21    (JMPIFNOT L31)
23    (GETVALUE 0)                        ; X
25    (CDR)
26    (CDR)
27    (CDR)
28    (JMPIFNOT L169)
31    L31
31    (CONST&PUSH 5)                      ; %DERIVATIVE
32    (CALL1 6)                           ; WNA-ERR
34    L34
34    (CONST&PUSH 7)                      ; (%DERIVATIVE)
35    (GETVALUE 0)                        ; X
37    (CDR&PUSH)
38    (LOAD&PUSH 14)
39    (CALL2 8)                           ; SIMPMAP
41    (CONS)
42    (STORE 1)
43    (CDR)
44    (CAR)
45    (SETVALUE 1)                        ; Y
47    (LOAD 1)
48    (CDR)
49    (CDR&PUSH)
50    (LOAD&JMPIFNOT 0 L70)
53    L53
53    (LOAD&CAR&PUSH 0)
55    (CALL1&JMPIFNOT 9 L63)              ; MNUMP
58    (CONST&PUSH 10)                     ; "Attempt to differentiate with respect to a number:~%~M"
59    (LOAD&CAR&PUSH 1)
61    (CALL2 11)                          ; MERROR
63    L63
63    (LOAD 0)
64    (CDR)
65    (CDR)
66    (STORE 0)
67    (LOAD&JMPIF 0 L53)
70    L70
70    (SKIP 1)
72    (GETVALUE&PUSH 1)                   ; Y
74    (CALL1&JMPIF 12 L184)               ; ZEROP1
78    (GETVALUE&PUSH 1)                   ; Y
80    (CALL1&JMPIF 9 L92)                 ; MNUMP
83    (GETVALUE 1)                        ; Y
85    (JMPIFCONSP L134)
87    (GETVALUE&PUSH 1)                   ; Y
89    (CALL1&JMPIFNOT 13 L134)            ; CONSTANT
92    L92
92    (LOAD 1)
93    (CDR)
94    (CDR)
95    (JMPIFNOT L184)
98    (GETVALUE&PUSH 1)                   ; Y
100   (LOAD 2)
101   (CDR)
102   (CDR)
103   (CAR&PUSH)
104   (CALL2&JMPIF 14 L134)               ; ALIKE1
107   (LOAD 1)
108   (CDR)
109   (CDR&PUSH)
110   (LOAD&JMPIFNOT 0 L132)
113   L113
113   (LOAD 0)
114   (CDR)
115   (CAR&PUSH)
116   (CALLS2&JMPIFNOT 8 L125)            ; NUMBERP
119   (LOAD 0)
120   (CDR)
121   (CAR&PUSH)
122   (CALLS2&JMPIFNOT 145 L178)          ; ZEROP
125   L125
125   (LOAD 0)
126   (CDR)
127   (CDR)
128   (STORE 0)
129   (LOAD&JMPIF 0 L113)
132   L132
132   (SKIP 1)
134   L134
134   (GETVALUE 1)                        ; Y
136   (JMPIFATOM L161)
138   (GETVALUE 1)                        ; Y
140   (CAR)
141   (CAR&PUSH)
142   (JMPIFNOTEQTO 5 L161)               ; %DERIVATIVE
145   (GETVALUE 16)                       ; DERIVSIMP
147   (JMPIFNOT L161)
149   (LOAD&PUSH 1)
150   (GETVALUE 1)                        ; Y
152   (CDR&PUSH)
153   (LOAD 3)
154   (CDR)
155   (CDR&PUSH)
156   (CALLSR&PUSH 2 34)                  ; APPEND
159   (CALLS1 170)                        ; RPLACD
161   L161
161   (LOAD 1)
162   (CDR)
163   (CDR)
164   (JMPIFNOT L188)
166   (LOAD 1)
167   (JMP L225)
169   L169
169   (GETVALUE&PUSH 0)                   ; X
171   (CONST&PUSH 4)                      ; (1)
172   (CALLSR 2 35)                       ; NCONC
175   (JMP L34)
178   L178
178   (SKIP 1)
180   (CONST 15)                          ; 0
181   (JMP L261)
184   L184
184   (CONST 15)                          ; 0
185   (JMP L261)
188   L188
188   (GETVALUE 17)                       ; DERIVFLAG
190   (JMPIF L390)
193   (CONST&PUSH 18)                     ; (%DEL SIMP)
194   (GETVALUE&PUSH 1)                   ; Y
196   (LIST 2)
198   (JMP L394)
201   L201
201   (GETVALUE 1)                        ; Y
203   (JMP L394)
206   L206
206   (LOAD&PUSH 0)
207   (LOAD 1)
208   (CDR)
209   (CDR)
210   (CDR&PUSH)
211   (CALLS1 170)                        ; RPLACD
213   (LOAD&JMPIFNOT 0 L230)
216   L216
216   (LOAD 0)
217   (CDR)
218   (CDR)
219   (CAR&PUSH)
220   (CALL1&JMPIF 12 L206)               ; ZEROP1
223   (LOAD 0)
224   (CDR)
225   L225
225   (CDR)
226   (STORE 0)
227   (LOAD&JMPIF 0 L216)
230   L230
230   (LOAD 1)
231   (CDR)
232   (CDR)
233   (JMPIFNOT L201)
235   (LOAD 1)
236   (CDR)
237   (CDR)
238   (CDR)
239   (CDR)
240   (JMPIF L304)
242   (LOAD 1)
243   (CDR)
244   (CDR)
245   (CDR)
246   (CAR&PUSH)
247   (JMPIFNOTEQTO 20 L304)              ; 1
250   (LOAD 1)
251   (CDR)
252   (CAR&PUSH)
253   (LOAD 2)
254   (CDR)
255   (CDR)
256   (CAR&PUSH)
257   (CALL2&JMPIFNOT 14 L304)            ; ALIKE1
260   (CONST 20)                          ; 1
261   L261
261   (SKIP 2)
263   (UNBIND1)
264   (JMP L397)
267   L267
267   (LOAD 12)
268   (CDR)
269   (CDR)
270   (CDR&PUSH)
271   (LOAD 13)
272   (CDR)
273   (CAR&PUSH)
274   (LOAD 14)
275   (CDR)
276   (CDR)
277   (CDR)
278   (CAR&PUSH)
279   (CALL2&PUSH 21)                     ; ADD2
281   (CALLS1 168)                        ; RPLACA
283   (LOAD&PUSH 12)
284   (LOAD 13)
285   (CDR)
286   (CDR)
287   (CDR&PUSH)
288   (CALLS1 170)                        ; RPLACD
290   (JMP L372)
293   L293
293   (LOAD&PUSH 1)
294   (GETVALUE&PUSH 0)                   ; X
296   (CALL2 23)                          ; EQTEST
298   (JMP L394)
301   L301
301   (NIL)
302   (SETVALUE 2)                        ; FLAG
304   L304
304   (LOAD 1)
305   (CDR)
306   (CDR)
307   (STORE 12)
309   L309
309   (LOAD 12)
310   (CDR)
311   (CDR)
312   (JMPIFNOT L380)
315   (LOAD&CAR&PUSH 12)
317   (LOAD 13)
318   (CDR)
319   (CDR)
320   (CAR&PUSH)
321   (CALL2&JMPIF 14 L267)               ; ALIKE1
324   (LOAD&CAR&PUSH 12)
326   (LOAD 13)
327   (CDR)
328   (CDR)
329   (CAR&PUSH)
330   (CALL2&JMPIFNOT 22 L372)            ; GREAT
333   (LOAD&CAR&PUSH 12)
335   (LOAD 13)
336   (CDR)
337   (CAR&PUSH)
338   (LOAD 14)
339   (CDR)
340   (CDR)
341   (CAR&PUSH)
342   (LOAD 15)
344   (CDR)
345   (CDR)
346   (CDR)
347   (CAR&PUSH)
348   (T)
349   (SETVALUE 2)                        ; FLAG
351   (LOAD&PUSH 16)
352   (LOAD&PUSH 2)
353   (CALLS1 168)                        ; RPLACA
355   (LOAD&PUSH 16)
356   (LOAD&PUSH 1)
357   (LOAD&PUSH 5)
358   (LOAD&PUSH 5)
359   (LOAD 20)
361   (CDR)
362   (CDR)
363   (CDR)
364   (CDR)
365   (CONS)
366   (CONS)
367   (CONS&PUSH)
368   (CALLS1 170)                        ; RPLACD
370   (SKIP 4)
372   L372
372   (LOAD 12)
373   (CDR)
374   (CDR)
375   (STORE 12)
377   (JMPIF L309)
380   L380
380   (GETVALUE 2)                        ; FLAG
382   (JMPIF L301)
385   (GETVALUE 17)                       ; DERIVFLAG
387   (JMPIFNOT L293)
390   L390
390   (LOAD&CDR&PUSH 1)
392   (CALL1 19)                          ; DERIV
394   L394
394   (SKIP 2)
396   (UNBIND1)
397   L397
397   (UNBIND 2)
399   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIGNUM1 (X) ...)-149|
(CONST 0) = SIGNUM1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNUM1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNUM1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNUM1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNUM1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNUM1
8     (SKIP&RET 1)


Disassembly of function SIGNUM1
(CONST 0) = X
(CONST 1) = MNUMP
(CONST 2) = NUM1
(CONST 3) = 1
(CONST 4) = -1
(CONST 5) = 0
(CONST 6) = MPLUSP
(CONST 7) = EXPANDP
(CONST 8) = MTIMESP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXPANDP X)
writes special variable : (X)
58 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L43)                 ; MNUMP
8     (GETVALUE 0)                        ; X
10    (JMPIFATOM L61)
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1&JMPIF 6 L67)                 ; MPLUSP
17    (GETVALUE&PUSH 0)                   ; X
19    (CALL1&JMPIFNOT 8 L82)              ; MTIMESP
22    (GETVALUE 0)                        ; X
24    (CDR)
25    (CAR&PUSH)
26    (CALL1&JMPIF 6 L79)                 ; MPLUSP
29    (GETVALUE 0)                        ; X
31    (CDR)
32    L32
32    (CAR&PUSH)
33    (JSR L0)
35    (JMP L83)
37    L37
37    (CONST 3)                           ; 1
38    (JMP L83)
40    L40
40    (CONST 4)                           ; -1
41    (JMP L83)
43    L43
43    (GETVALUE&PUSH 0)                   ; X
45    (CALL1 2)                           ; NUM1
47    (SETVALUE 0)                        ; X
49    (PUSH)
50    (CALLS2&JMPIF 146 L37)              ; PLUSP
53    (GETVALUE&PUSH 0)                   ; X
55    (CALLS2&JMPIF 147 L40)              ; MINUSP
58    (CONST 5)                           ; 0
59    (JMP L83)
61    L61
61    (CONST 3)                           ; 1
62    (JMP L83)
64    L64
64    (CONST 3)                           ; 1
65    (JMP L83)
67    L67
67    (GETVALUE 7)                        ; EXPANDP
69    (JMPIF L64)
71    (GETVALUE&PUSH 0)                   ; X
73    (PUSH-UNBOUND 1)
75    (CALLS1 156)                        ; LAST
77    (JMP L32)
79    L79
79    (CONST 3)                           ; 1
80    (JMP L83)
82    L82
82    (CONST 3)                           ; 1
83    L83
83    (UNBIND1)
84    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SIMPSIGNUM (X Y Z) ...)-150|
(CONST 0) = SIMPSIGNUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPSIGNUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPSIGNUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPSIGNUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPSIGNUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPSIGNUM
8     (SKIP&RET 1)


Disassembly of function SIMPSIGNUM
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = MNUMP
(CONST 5) = NUM1
(CONST 6) = 1
(CONST 7) = -1
(CONST 8) = 0
(CONST 9) = CSIGN
(CONST 10) = (%SIGNUM)
(CONST 11) = EQTEST
(CONST 12) = $POS
(CONST 13) = $NEG
(CONST 14) = $ZERO
(CONST 15) = MMINUSP
(CONST 16) = (%SIGNUM SIMP)
(CONST 17) = NEG
(CONST 18) = MUL2
(CONST 19) = (%SIGNUM)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (Y)
74 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALL1&JMPIF 4 L69)                 ; MNUMP
23    (GETVALUE&PUSH 1)                   ; Y
25    (CALL1 9)                           ; CSIGN
27    (STORE 7)
28    (PUSH)
29    (T)
30    (JMPIFEQ L87)
32    (LOAD&PUSH 7)
33    (JMPIFEQTO 12 L90)                  ; $POS
36    (LOAD&PUSH 7)
37    (JMPIFEQTO 13 L93)                  ; $NEG
40    (LOAD&PUSH 7)
41    (JMPIFEQTO 14 L96)                  ; $ZERO
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 15 L99)                ; MMINUSP
49    (CONST 19)                          ; (%SIGNUM)
50    L50
50    (PUSH)
51    (GETVALUE&PUSH 1)                   ; Y
53    (LIST&PUSH 2)
55    (GETVALUE&PUSH 0)                   ; X
57    (CALL2 11)                          ; EQTEST
59    L59
59    (UNBIND 2)
61    (SKIP&RET 4)
63    L63
63    (CONST 6)                           ; 1
64    (JMP L59)
66    L66
66    (CONST 7)                           ; -1
67    (JMP L59)
69    L69
69    (GETVALUE&PUSH 1)                   ; Y
71    (CALL1 5)                           ; NUM1
73    (SETVALUE 1)                        ; Y
75    (PUSH)
76    (CALLS2&JMPIF 146 L63)              ; PLUSP
79    (GETVALUE&PUSH 1)                   ; Y
81    (CALLS2&JMPIF 147 L66)              ; MINUSP
84    (CONST 8)                           ; 0
85    (JMP L59)
87    L87
87    (CONST 10)                          ; (%SIGNUM)
88    (JMP L50)
90    L90
90    (CONST 6)                           ; 1
91    (JMP L59)
93    L93
93    (CONST 7)                           ; -1
94    (JMP L59)
96    L96
96    (CONST 8)                           ; 0
97    (JMP L59)
99    L99
99    (CONST&PUSH 7)                      ; -1
100   (CONST&PUSH 16)                     ; (%SIGNUM SIMP)
101   (GETVALUE&PUSH 1)                   ; Y
103   (CALL1&PUSH 17)                     ; NEG
105   (LIST&PUSH 2)
107   (CALL2 18)                          ; MUL2
109   (JMP L59)


Disassembly of function #:|(DEFMFUN EXPTRL (R1 R2) ...)-151|
(CONST 0) = EXPTRL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPTRL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPTRL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPTRL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPTRL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPTRL
8     (SKIP&RET 1)


Disassembly of function EXPTRL
(CONST 0) = 1
(CONST 1) = 1.0
(CONST 2) = MNUMP
(CONST 3) = 0.0
(CONST 4) = ADDK
(CONST 5) = BIGFLOATONE
(CONST 6) = $BFLOAT
(CONST 7) = ZEROP1
(CONST 8) = MNEGP
(CONST 9) = ERRORSW
(CONST 10) = "~M has been generated"
(CONST 11) = (MEXPT)
(CONST 12) = MERROR
(CONST 13) = ZERORES
(CONST 14) = ONEP1
(CONST 15) = $BFLOATP
(CONST 16) = (MEXPT)
(CONST 17) = EXPTB
(CONST 18) = FIX
(CONST 19) = $NUMER
(CONST 20) = NUM1
(CONST 21) = $NUMER_PBRANCH
(CONST 22) = Y
(CONST 23) = $DOMAIN
(CONST 24) = $COMPLEX
(CONST 25) = %PI-VAL
(CONST 26) = (MTIMES SIMP)
(CONST 27) = $%I
(CONST 28) = ADD2
(CONST 29) = $FLOAT
(CONST 30) = $KEEPFLOAT
(CONST 31) = $RATPRINT
(CONST 32) = -1
(CONST 33) = RATF
(CONST 34) = POWER
(CONST 35) = MEXPTP
(CONST 36) = (MEXPT SIMP)
(CONST 37) = FPCOFRAT
(CONST 38) = RESIMPLIFY
(CONST 39) = MUL2
(CONST 40) = 2.0
(CONST 41) = %E-VAL
(CONST 42) = EXP
(CONST 43) = (MEXPT SIMP)
(CONST 44) = (RAT)
(CONST 45) = (RAT)
(CONST 46) = (RAT SIMP)
(CONST 47) = ((RAT) 1 2)
(CONST 48) = ALIKE1
(CONST 49) = (MTIMES SIMP)
(CONST 50) = ((RAT) -1 2)
(CONST 51) = (MTIMES SIMP)
(CONST 52) = -1.0
(CONST 53) = QUOT
(CONST 54) = EXPTRLSW
(CONST 55) = (MEXPT SIMP)
(CONST 56) = (MTIMES)
(CONST 57) = X
(CONST 58) = SIMPNRT
(CONST 59) = SIMPTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXPTRLSW X %E-VAL $NUMER $DOMAIN $NUMER_PBRANCH Y %PI-VAL ERRORSW BIGFLOATONE)
writes special variable : (Y)
467 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L20)                   ; 1
4     (LOAD&PUSH 1)
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&JMPIF 1 L23)                ; EQL
9     (LOAD&PUSH 1)
10    (GETVALUE&PUSH 5)                   ; BIGFLOATONE
12    (CALLS2&JMPIFNOT 2 L94)             ; EQUAL
16    (LOAD&PUSH 2)
17    (CALL1&JMPIF 2 L33)                 ; MNUMP
20    L20
20    (LOAD 2)
21    (SKIP&RET 3)
23    L23
23    (LOAD&PUSH 2)
24    (CALL1&JMPIFNOT 2 L20)              ; MNUMP
27    (CONST&PUSH 3)                      ; 0.0
28    (LOAD&PUSH 3)
29    (CALL2 4)                           ; ADDK
31    (SKIP&RET 3)
33    L33
33    (LOAD 2)
34    (JMP L119)
37    L37
37    (CONST&PUSH 9)                      ; ERRORSW
38    (T)
39    (THROW)
40    L40
40    (GETVALUE 9)                        ; ERRORSW
42    (JMPIF L37)
44    (CONST&PUSH 10)                     ; "~M has been generated"
45    (CONST&PUSH 11)                     ; (MEXPT)
46    (LOAD&PUSH 4)
47    (LOAD&PUSH 4)
48    (LIST&PUSH 3)
50    (CALL2 12)                          ; MERROR
52    (SKIP&RET 3)
54    L54
54    (LOAD&PUSH 1)
55    (CALL1&JMPIF 7 L40)                 ; ZEROP1
58    (LOAD&PUSH 1)
59    (CALL1&JMPIF 8 L40)                 ; MNEGP
62    (LOAD&PUSH 2)
63    (LOAD&PUSH 2)
64    (CALL2 13)                          ; ZERORES
66    (SKIP&RET 3)
68    L68
68    (GETVALUE 5)                        ; BIGFLOATONE
70    (SKIP&RET 3)
72    L72
72    (CONST 1)                           ; 1.0
73    (SKIP&RET 3)
75    L75
75    (LOAD&PUSH 2)
76    (CALL1&JMPIF 15 L68)                ; $BFLOATP
79    (LOAD&PUSH 1)
80    (CALL1&JMPIF 15 L68)                ; $BFLOATP
83    (LOAD&PUSH 2)
84    (CALLS2&JMPIF 15 L72)               ; FLOATP
87    (LOAD&PUSH 1)
88    (CALLS2&JMPIF 15 L72)               ; FLOATP
91    (CONST 0)                           ; 1
92    (SKIP&RET 3)
94    L94
94    (LOAD&PUSH 2)
95    (CALL1&JMPIF 7 L54)                 ; ZEROP1
98    (LOAD&PUSH 1)
99    (CALL1&JMPIF 7 L75)                 ; ZEROP1
102   (LOAD&PUSH 2)
103   (CALL1&JMPIF 14 L75)                ; ONEP1
106   (LOAD&PUSH 2)
107   (CALL1&JMPIF 15 L114)               ; $BFLOATP
110   (LOAD&PUSH 1)
111   (CALL1&JMPIFNOT 15 L128)            ; $BFLOATP
114   L114
114   (CONST&PUSH 16)                     ; (MEXPT)
115   (LOAD&PUSH 3)
116   (LOAD&PUSH 3)
117   (LIST 3)
119   L119
119   (PUSH)
120   (CALL1 6)                           ; $BFLOAT
122   (SKIP&RET 3)
124   L124
124   (LOAD&PUSH 2)
125   (LOAD 2)
126   (JMP L164)
128   L128
128   (LOAD&PUSH 2)
129   (CALLS2&JMPIFNOT 8 L136)            ; NUMBERP
132   (LOAD&PUSH 1)
133   (CALLS2&JMPIF 12 L124)              ; INTEGERP
136   L136
136   (LOAD&PUSH 2)
137   (CALLS2&JMPIFNOT 8 L301)            ; NUMBERP
141   (LOAD&PUSH 1)
142   (CALLS2&JMPIFNOT 15 L301)           ; FLOATP
146   (LOAD&PUSH 1)
147   (LOAD&PUSH 2)
148   (CALL1&PUSH 18)                     ; FIX
150   (CONST&PUSH 1)                      ; 1.0
151   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
153   (CALLS2&JMPIFNOT 2 L301)            ; EQUAL
157   (LOAD&PUSH 2)
158   (CONST&PUSH 1)                      ; 1.0
159   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
161   (LOAD&PUSH 2)
162   (CALL1 18)                          ; FIX
164   L164
164   (PUSH)
165   (CALL2 17)                          ; EXPTB
167   (SKIP&RET 3)
169   L169
169   (CONST&PUSH 3)                      ; 0.0
170   (LOAD&PUSH 5)
171   (CALL2 4)                           ; ADDK
173   (STORE 4)
174   (LOAD&PUSH 5)
175   (CALLSR&PUSH 0 54)                  ; -
178   (LOAD&PUSH 5)
179   (JSR L0)
182   (SETVALUE 22)                       ; Y
184   (GETVALUE&PUSH 25)                  ; %PI-VAL
186   (LOAD&PUSH 5)
187   (CALLSR&STORE 2 55 4)               ; *
191   (GETVALUE&PUSH 22)                  ; Y
193   (LOAD&PUSH 5)
194   (CALLS2&PUSH 162)                   ; COS
196   (CALLSR&PUSH 2 55)                  ; *
199   (CONST&PUSH 26)                     ; (MTIMES SIMP)
200   (GETVALUE&PUSH 22)                  ; Y
202   (LOAD&PUSH 7)
203   (CALLS2&PUSH 161)                   ; SIN
205   (CALLSR&PUSH 2 55)                  ; *
208   (CONST&PUSH 27)                     ; $%I
209   (LIST&PUSH 3)
211   (CALL2 28)                          ; ADD2
213   (JMP L727)
216   L216
216   (CONST&PUSH 36)                     ; (MEXPT SIMP)
218   (CONST&PUSH 32)                     ; -1
220   (GETVALUE 22)                       ; Y
222   (CDR)
223   (CDR)
224   (CAR&PUSH)
225   (CALL1&PUSH 37)                     ; FPCOFRAT
227   (LIST 3)
229   (JMP L280)
231   L231
231   (GETVALUE 21)                       ; $NUMER_PBRANCH
233   (JMPIF L169)
236   (GETVALUE&PUSH 23)                  ; $DOMAIN
238   (JMPIFEQTO 24 L169)                 ; $COMPLEX
242   (NIL)
243   (BIND 19)                           ; $NUMER
245   (NIL)
246   (BIND 29)                           ; $FLOAT
248   (NIL)
249   (BIND 30)                           ; $KEEPFLOAT
251   (NIL)
252   (BIND 31)                           ; $RATPRINT
254   (CONST&PUSH 32)                     ; -1
256   (LOAD&PUSH 17)
257   (CALL1&PUSH 33)                     ; RATF
259   (CALL2 34)                          ; POWER
261   (UNBIND 4)
263   (SETVALUE 22)                       ; Y
265   (PUSH)
266   (CALL1&JMPIFNOT 35 L276)            ; MEXPTP
269   (GETVALUE 22)                       ; Y
271   (CDR)
272   (CAR&PUSH)
273   (JMPIFEQTO 32 L216)                 ; -1
276   L276
276   (GETVALUE&PUSH 22)                  ; Y
278   (CALL1 38)                          ; RESIMPLIFY
280   L280
280   (SETVALUE 22)                       ; Y
282   (PUSH)
283   (LOAD&PUSH 6)
284   (CALLSR&PUSH 0 54)                  ; -
287   (LOAD&PUSH 6)
288   (JSR&PUSH L0)
291   (CALL2 39)                          ; MUL2
293   (JMP L727)
296   L296
296   (LOAD&PUSH 5)
297   (LOAD 5)
298   (JMP L379)
301   L301
301   (GETVALUE 19)                       ; $NUMER
303   (JMPIF L321)
305   (LOAD&PUSH 1)
306   (CALLS2&JMPIFNOT 15 L589)           ; FLOATP
310   (LOAD&PUSH 2)
311   (CALL1&PUSH 20)                     ; NUM1
313   (CALLS2&JMPIF 146 L321)             ; PLUSP
316   (GETVALUE 21)                       ; $NUMER_PBRANCH
318   (JMPIFNOT L589)
321   L321
321   (NIL)
322   (BIND 22)                           ; Y
324   (CONST&PUSH 3)                      ; 0.0
325   (LOAD&PUSH 6)
326   (CALL2 4)                           ; ADDK
328   (STORE 5)
329   (PUSH)
330   (CALLS2&JMPIF 147 L231)             ; MINUSP
334   (CONST&PUSH 3)                      ; 0.0
335   (LOAD&PUSH 5)
336   (CALL2 4)                           ; ADDK
338   (STORE 4)
339   (PUSH)
340   (LOAD&PUSH 5)
341   (CALL1&PUSH 18)                     ; FIX
343   (CONST&PUSH 1)                      ; 1.0
344   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
346   (CALLS2&JMPIF 2 L296)               ; EQUAL
349   (CONST&PUSH 40)                     ; 2.0
351   (LOAD&PUSH 5)
352   (CALLSR 2 55)                       ; *
355   (SETVALUE 22)                       ; Y
357   (PUSH)
358   (GETVALUE&PUSH 22)                  ; Y
360   (CALL1&PUSH 18)                     ; FIX
362   (CONST&PUSH 1)                      ; 1.0
363   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
365   (CALLS2&JMPIFNOT 2 L387)            ; EQUAL
368   (LOAD&PUSH 5)
369   (GETVALUE&PUSH 41)                  ; %E-VAL
371   (CALLS2&JMPIF 2 L387)               ; EQUAL
374   (LOAD&PUSH 5)
375   (CALLS2&PUSH 156)                   ; SQRT
377   (GETVALUE 22)                       ; Y
379   L379
379   (PUSH)
380   (CALL1&PUSH 18)                     ; FIX
382   (CALL2 17)                          ; EXPTB
384   (JMP L727)
387   L387
387   (LOAD&PUSH 4)
388   (LOAD&PUSH 6)
389   (PUSH-UNBOUND 1)
391   (CALLS2&PUSH 155)                   ; LOG
393   (CALLSR&PUSH 2 55)                  ; *
396   (CALL1 42)                          ; EXP
398   (JMP L727)
401   L401
401   (CONST 43)                          ; (MEXPT SIMP)
403   (JMP L552)
406   L406
406   (LOAD 2)
407   (CDR)
408   (CAR&PUSH)
409   (LOAD 3)
410   (CDR)
411   (CDR)
412   (CAR&PUSH)
413   (CALLSR 2 55)                       ; *
416   (JMP L465)
418   L418
418   (CONST&PUSH 44)                     ; (RAT)
420   (LOAD 3)
421   (CDR)
422   (CDR)
423   (CAR&PUSH)
424   (CALLSR&PUSH 0 54)                  ; -
427   (LOAD 4)
428   (CDR)
429   (CAR&PUSH)
430   (CALLSR 0 54)                       ; -
433   (JMP L462)
435   L435
435   (LOAD&PUSH 1)
436   (CALLS2&JMPIFNOT 147 L475)          ; MINUSP
439   (LOAD 2)
440   (CDR)
441   (CAR&PUSH)
442   (CALLS2&PUSH 158)                   ; ABS
444   (JMPIFEQTO 0 L406)                  ; 1
447   (LOAD 2)
448   (CDR)
449   (CAR&PUSH)
450   (CALLS2&JMPIF 147 L418)             ; MINUSP
453   (CONST&PUSH 45)                     ; (RAT)
455   (LOAD 3)
456   (CDR)
457   (CDR)
458   (CAR&PUSH)
459   (LOAD 4)
460   (CDR)
461   (CAR)
462   L462
462   (PUSH)
463   (LIST 3)
465   L465
465   (PUSH)
466   (LOAD&PUSH 2)
467   (CALLSR&PUSH 0 54)                  ; -
470   (JMPTAIL 2 5 L0)
475   L475
475   (CONST&PUSH 46)                     ; (RAT SIMP)
477   (LOAD 3)
478   (CDR)
479   (CAR&PUSH)
480   (LOAD&PUSH 3)
481   (CALL2&PUSH 17)                     ; EXPTB
483   (LOAD 4)
484   (CDR)
485   (CDR)
486   (CAR&PUSH)
487   (LOAD&PUSH 4)
488   (CALL2 17)                          ; EXPTB
490   (JMP L555)
492   L492
492   (CONST&PUSH 49)                     ; (MTIMES SIMP)
494   (LOAD&PUSH 3)
495   (CALLSR&PUSH 0 54)                  ; -
498   (CALLS2&PUSH 156)                   ; SQRT
500   (CONST 27)                          ; $%I
502   (JMP L555)
504   L504
504   (LOAD&PUSH 2)
505   (CALLS2&JMPIF 147 L492)             ; MINUSP
508   (LOAD&PUSH 2)
509   (CALLS2 156)                        ; SQRT
511   (SKIP&RET 3)
513   L513
513   (CONST&PUSH 51)                     ; (MTIMES SIMP)
515   (CONST&PUSH 52)                     ; -1.0
517   (LOAD&PUSH 4)
518   (CALLSR&PUSH 0 54)                  ; -
521   (CALLS2&PUSH 156)                   ; SQRT
523   (CALL2&PUSH 53)                     ; QUOT
525   (CONST 27)                          ; $%I
527   (JMP L555)
529   L529
529   (LOAD&PUSH 2)
530   (CALLS2&JMPIF 147 L513)             ; MINUSP
533   (CONST&PUSH 1)                      ; 1.0
534   (LOAD&PUSH 3)
535   (CALLS2&PUSH 156)                   ; SQRT
537   (CALL2 53)                          ; QUOT
539   (SKIP&RET 3)
541   L541
541   (LOAD&PUSH 2)
542   (LOAD&PUSH 2)
543   (CALL1&PUSH 37)                     ; FPCOFRAT
545   (JMPTAIL 2 5 L0)
550   L550
550   (CONST 55)                          ; (MEXPT SIMP)
552   L552
552   (PUSH)
553   (LOAD&PUSH 3)
554   (LOAD 3)
555   L555
555   (PUSH)
556   (LIST 3)
558   (SKIP&RET 3)
560   L560
560   (GETVALUE&PUSH 57)                  ; X
562   (GETVALUE&PUSH 22)                  ; Y
564   (CALLS2 181)                        ; TRUNCATE
566   (JMP L671)
569   L569
569   (GETVALUE 22)                       ; Y
571   (CAR&PUSH)
572   (GETVALUE 22)                       ; Y
574   (CDR)
575   (CAR&PUSH)
576   (GETVALUE 22)                       ; Y
578   (CDR)
579   (CDR)
580   (CAR&PUSH)
581   (LOAD&PUSH 6)
582   (CALL2&PUSH 39)                     ; MUL2
584   (LIST 3)
586   (JMP L716)
589   L589
589   (LOAD&PUSH 1)
590   (CALLS2&JMPIF 15 L401)              ; FLOATP
594   (LOAD&PUSH 1)
595   (CALLS2&JMPIF 12 L435)              ; INTEGERP
599   (LOAD&PUSH 2)
600   (CALLS2&JMPIFNOT 15 L610)           ; FLOATP
603   (LOAD&PUSH 1)
604   (CONST&PUSH 47)                     ; ((RAT) 1 2)
606   (CALL2&JMPIF 48 L504)               ; ALIKE1
610   L610
610   (LOAD&PUSH 2)
611   (CALLS2&JMPIFNOT 15 L621)           ; FLOATP
614   (LOAD&PUSH 1)
615   (CONST&PUSH 50)                     ; ((RAT) -1 2)
617   (CALL2&JMPIF 48 L529)               ; ALIKE1
621   L621
621   (LOAD&PUSH 2)
622   (CALLS2&JMPIFNOT 15 L630)           ; FLOATP
625   (LOAD&PUSH 2)
626   (CALLS2&JMPIF 146 L541)             ; PLUSP
630   L630
630   (GETVALUE 54)                       ; EXPTRLSW
632   (JMPIF L550)
635   (T)
636   (BIND 54)                           ; EXPTRLSW
638   (CONST&PUSH 56)                     ; (MTIMES)
640   (LOAD&PUSH 6)
641   (LOAD 6)
642   (CDR)
643   (CAR&PUSH)
644   (LOAD 7)
645   (CDR)
646   (CDR)
647   (CAR)
648   (BIND 22)                           ; Y
650   (LOAD 3)
651   (BIND 57)                           ; X
653   (GETVALUE&PUSH 57)                  ; X
655   (CALLS2&JMPIFNOT 12 L664)           ; INTEGERP
658   (GETVALUE&PUSH 22)                  ; Y
660   (CALLS2&JMPIF 12 L560)              ; INTEGERP
664   L664
664   (GETVALUE&PUSH 57)                  ; X
666   (GETVALUE&PUSH 22)                  ; Y
668   (CALLSR 1 56)                       ; /
671   L671
671   (UNBIND 2)
673   (STORE 0)
674   (JSR&PUSH L0)
677   (NIL)
678   (BIND 30)                           ; $KEEPFLOAT
680   (NIL)
681   (BIND 31)                           ; $RATPRINT
683   (LOAD&PUSH 13)
684   (LOAD 13)
685   (CDR)
686   (CDR)
687   (CAR&PUSH)
688   (CALL2 58)                          ; SIMPNRT
690   (UNBIND 2)
692   (PUSH)
693   (LOAD 7)
694   (CDR)
695   (CAR&PUSH)
696   (LOAD 8)
697   (CDR)
698   (CDR)
699   (CAR&PUSH)
700   (CALLS2&PUSH 184)                   ; REM
702   (LOAD 1)
703   (BIND 22)                           ; Y
705   (GETVALUE&PUSH 22)                  ; Y
707   (CALL1&JMPIF 35 L569)               ; MEXPTP
711   (GETVALUE&PUSH 22)                  ; Y
713   (LOAD&PUSH 4)
714   (CALL2 34)                          ; POWER
716   L716
716   (UNBIND1)
717   (SKIP 1)
719   (STORE 0)
720   (LIST&PUSH 3)
722   (CONST&PUSH 0)                      ; 1
723   (T&PUSH)
724   (CALL 3 59)                         ; SIMPTIMES
727   L727
727   (UNBIND1)
728   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN SIMPEXPT (X Y Z) ...)-152|
(CONST 0) = SIMPEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPEXPT
8     (SKIP&RET 1)


Disassembly of function SIMPEXPT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = RULESW
(CONST 3) = TWOARGCHECK
(CONST 4) = SIMPLIFYA
(CONST 5) = $RATSIMPEXPONS
(CONST 6) = $RATSIMP
(CONST 7) = $RATP
(CONST 8) = RATDISREP
(CONST 9) = TRUNC
(CONST 10) = MEMQ
(CONST 11) = (MEXPT)
(CONST 12) = SRF
(CONST 13) = GENVAR
(CONST 14) = VARLIST
(CONST 15) = (MEXPT)
(CONST 16) = RATREP*
(CONST 17) = MXORLISTP
(CONST 18) = ONEP1
(CONST 19) = ZEROP1
(CONST 20) = MNEGP
(CONST 21) = *ZEXPTSIMP?
(CONST 22) = $ASKSIGN
(CONST 23) = $NEG
(CONST 24) = ERRORSW
(CONST 25) = "Division by 0"
(CONST 26) = MERROR
(CONST 27) = $%I
(CONST 28) = FREE
(CONST 29) = "0 to a complex quantity has been generated."
(CONST 30) = ZERORES
(CONST 31) = MNUMP
(CONST 32) = RATNUMP
(CONST 33) = EXPTRL
(CONST 34) = EQTEST
(CONST 35) = %ITOPOT
(CONST 36) = MEVENP
(CONST 37) = MODDP
(CONST 38) = -1
(CONST 39) = POWER
(CONST 40) = MUL2
(CONST 41) = MAXIMA-INTEGERP
(CONST 42) = MMINUSP
(CONST 43) = NEG
(CONST 44) = MTIMESP
(CONST 45) = 3
(CONST 46) = FIXNUMP
(CONST 47) = MABS
(CONST 48) = EVNUMP
(CONST 49) = $DOMAIN
(CONST 50) = $REAL
(CONST 51) = DECL-COMPLEXP
(CONST 52) = $COMPLEX
(CONST 53) = DECL-REALP
(CONST 54) = MEQUAL
(CONST 55) = MEXPT
(CONST 56) = %SUM
(CONST 57) = $SUMEXPAND
(CONST 58) = 0
(CONST 59) = $MAXPOSEX
(CONST 60) = (MTIMES)
(CONST 61) = 1
(CONST 62) = SIMPTIMES
(CONST 63) = TMS
(CONST 64) = TESTT
(CONST 65) = MPLUSP
(CONST 66) = $EXPOP
(CONST 67) = $EXPON
(CONST 68) = EXPANDEXPT
(CONST 69) = RAT
(CONST 70) = MTIMES
(CONST 71) = $RADEXPAND
(CONST 72) = $ALL
(CONST 73) = SIMPLEXPON
(CONST 74) = $NUM
(CONST 75) = (1 -1)
(CONST 76) = ZL-MEMBER
(CONST 77) = MULT
(CONST 78) = $DENOM
(CONST 79) = $PNZ
(CONST 80) = $SIGN
(CONST 81) = ($NEG $NZ)
(CONST 82) = ALIKE1
(CONST 83) = (MEXPT SIMP)
(CONST 84) = ($PN $PNZ)
(CONST 85) = (MEXPT)
(CONST 86) = (MTIMES)
(CONST 87) = (1)
(CONST 88) = (MEXPT)
(CONST 89) = (MTIMES SIMP)
(CONST 90) = (MTIMES)
(CONST 91) = POWER*
(CONST 92) = (MTIMES)
(CONST 93) = (MTIMES)
(CONST 94) = (MTIMES)
(CONST 95) = MEXPTP
(CONST 96) = (MEXPT)
(CONST 97) = (MEXPT SIMP)
(CONST 98) = (MTIMES)
(CONST 99) = $NUMER
(CONST 100) = MGET
(CONST 101) = $%E
(CONST 102) = BIGFLOATONE
(CONST 103) = $BFLOAT
(CONST 104) = $BFLOATP
(CONST 105) = (MEXPT)
(CONST 106) = EXP
(CONST 107) = $LOGSIMP
(CONST 108) = %LOG
(CONST 109) = AMONG
(CONST 110) = %ETOLOG
(CONST 111) = $DEMOIVRE
(CONST 112) = DEMOIVRE
(CONST 113) = $%EMODE
(CONST 114) = %ESPECIAL
(CONST 115) = (MEXPT)
(CONST 116) = MXORLISTP1
(CONST 117) = ADDK
(CONST 118) = CONSTMX
(CONST 119) = $DOALLMXOPS
(CONST 120) = $DOSCMXOPS
(CONST 121) = $DOMXEXPT
(CONST 122) = $LISTP
(CONST 123) = $LISTARITH
(CONST 124) = $ASSUMESCALAR
(CONST 125) = SCALAR-OR-CONSTANT-P
(CONST 126) = OUTERMAP1
(CONST 127) = $DOMXMXOPS
(CONST 128) = (-1 -1.0)
(CONST 129) = NONEG
(CONST 130) = ODNUMP
(CONST 131) = RADMABS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($DOMXMXOPS $DOSCMXOPS $DOALLMXOPS $DOMAIN $DOMXEXPT $ASSUMESCALAR $LISTARITH
 $%EMODE $DEMOIVRE $LOGSIMP BIGFLOATONE $NUMER Y *ZEXPTSIMP? $RADEXPAND RULESW
 $EXPON $EXPOP $MAXPOSEX $SUMEXPAND ERRORSW $RATSIMPEXPONS X)
writes special variables : (Y RULESW)
940 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (PUSH-NIL 4)
8     (NIL)
9     (BIND 2)                            ; RULESW
11    (PUSH-NIL 3)
13    (GETVALUE 0)                        ; X
15    (STORE 7)
16    (LOAD&JMPIF 17 L50)
19    (GETVALUE&PUSH 0)                   ; X
21    (CALL1 3)                           ; TWOARGCHECK
23    (GETVALUE 0)                        ; X
25    (CDR)
26    (CAR&PUSH)
27    (NIL&PUSH)
28    (CALL2 4)                           ; SIMPLIFYA
30    (STORE 9)
32    (GETVALUE 5)                        ; $RATSIMPEXPONS
34    (JMPIF L61)
36    (GETVALUE 0)                        ; X
38    (CDR)
39    (CDR)
40    (CAR)
41    L41
41    (PUSH)
42    (NIL&PUSH)
43    (CALL2 4)                           ; SIMPLIFYA
45    (STORE 8)
47    (JMP L202)
50    L50
50    (GETVALUE 0)                        ; X
52    (CDR)
53    (CAR)
54    (STORE 9)
56    (GETVALUE 0)                        ; X
58    (JMP L356)
61    L61
61    (GETVALUE 0)                        ; X
63    (CDR)
64    (CDR)
65    (CAR&PUSH)
66    (CALL1 6)                           ; $RATSIMP
68    (JMP L41)
70    L70
70    (LOAD&PUSH 8)
71    (CALL1 8)                           ; RATDISREP
73    (STORE 8)
75    (JMP L202)
78    L78
78    (CONST&PUSH 11)                     ; (MEXPT)
79    (LOAD&PUSH 10)
80    (LOAD&PUSH 10)
81    (LIST&PUSH 3)
83    (CALL1 12)                          ; SRF
85    (SKIP 3)
87    (JMP L1555)
90    L90
90    (LOAD 9)
91    (CAR)
92    (CDR)
93    (CDR)
94    (CAR&PUSH)
95    (LOAD 10)
96    (CAR)
97    (CDR)
98    (CDR)
99    (CDR)
100   (CAR)
101   (BIND 13)                           ; GENVAR
103   (LOAD 3)
104   (BIND 14)                           ; VARLIST
106   (CONST&PUSH 15)                     ; (MEXPT)
107   (LOAD&PUSH 17)
108   (LOAD&PUSH 17)
109   (LIST&PUSH 3)
111   (CALL1 16)                          ; RATREP*
113   (UNBIND 2)
115   (SKIP 4)
117   (JMP L1555)
120   L120
120   (CONST&PUSH 9)                      ; TRUNC
121   (LOAD&CAR&PUSH 10)
123   (CALL2&JMPIF 10 L78)                ; MEMQ
126   (LOAD&PUSH 8)
127   (CALLS2&JMPIF 12 L90)               ; INTEGERP
130   (LOAD&PUSH 9)
131   (CALL1 8)                           ; RATDISREP
133   (STORE 9)
135   (JMP L202)
138   L138
138   (CONST 24)                          ; ERRORSW
140   (JMP L153)
142   L142
142   (GETVALUE 24)                       ; ERRORSW
144   (JMPIF L138)
146   (CONST 25)                          ; "Division by 0"
148   (JMP L844)
151   L151
151   (CONST 24)                          ; ERRORSW
153   L153
153   (PUSH)
154   (T)
155   (THROW)
156   L156
156   (LOAD&PUSH 9)
157   (LOAD&PUSH 9)
158   (CALL2 30)                          ; ZERORES
160   (SKIP 3)
162   (JMP L1555)
165   L165
165   (LOAD&PUSH 9)
166   (LOAD&PUSH 9)
167   (CALL2 33)                          ; EXPTRL
169   (JMP L1219)
172   L172
172   (LOAD&PUSH 8)
173   (CALL1 35)                          ; %ITOPOT
175   (SKIP 3)
177   (JMP L1555)
180   L180
180   (LOAD&PUSH 9)
181   (CALLSR&STORE 0 54 9)               ; -
185   (JMP L202)
187   L187
187   (CONST&PUSH 38)                     ; -1
189   (LOAD&PUSH 10)
190   (CALLSR&PUSH 0 54)                  ; -
193   (LOAD 10)
194   (JMP L542)
197   L197
197   (LOAD&PUSH 8)
198   (CALL1 43)                          ; NEG
200   (STORE 8)
202   L202
202   (LOAD&PUSH 8)
203   (CALL1&JMPIF 7 L70)                 ; $RATP
207   (LOAD&PUSH 9)
208   (CALL1&JMPIF 7 L120)                ; $RATP
212   (LOAD&PUSH 9)
213   (CALL1 17)                          ; MXORLISTP
215   (STORE 1)
216   (JMPIF L1504)
219   (LOAD&PUSH 8)
220   (CALL1 17)                          ; MXORLISTP
222   (STORE 0)
223   (JMPIF L1504)
226   (LOAD&PUSH 8)
227   (CALL1&JMPIF 18 L1167)              ; ONEP1
231   (LOAD&PUSH 8)
232   (CALL1&JMPIF 19 L1029)              ; ZEROP1
236   (LOAD&PUSH 9)
237   (CALL1&JMPIF 18 L1029)              ; ONEP1
241   (LOAD&PUSH 9)
242   (CALL1&JMPIF 19 L815)               ; ZEROP1
246   (LOAD&PUSH 9)
247   (CALL1&JMPIFNOT 31 L264)            ; MNUMP
250   (LOAD&PUSH 8)
251   (CALL1&JMPIFNOT 31 L264)            ; MNUMP
254   (LOAD&PUSH 9)
255   (CALL1&JMPIFNOT 32 L165)            ; RATNUMP
259   (LOAD&PUSH 8)
260   (CALL1&JMPIFNOT 32 L165)            ; RATNUMP
264   L264
264   (LOAD&PUSH 9)
265   (JMPIFEQTO 27 L172)                 ; $%I
269   (LOAD&PUSH 9)
270   (CALLS2&JMPIFNOT 8 L282)            ; NUMBERP
273   (LOAD&PUSH 9)
274   (CALLS2&JMPIFNOT 147 L282)          ; MINUSP
277   (LOAD&PUSH 8)
278   (CALL1&JMPIF 36 L180)               ; MEVENP
282   L282
282   (LOAD&PUSH 9)
283   (CALLS2&JMPIFNOT 8 L295)            ; NUMBERP
286   (LOAD&PUSH 9)
287   (CALLS2&JMPIFNOT 147 L295)          ; MINUSP
290   (LOAD&PUSH 8)
291   (CALL1&JMPIF 37 L187)               ; MODDP
295   L295
295   (LOAD&PUSH 9)
296   (JMPIFNOTEQTO 38 L308)              ; -1
299   (LOAD&PUSH 8)
300   (CALL1&JMPIFNOT 41 L308)            ; MAXIMA-INTEGERP
303   (LOAD&PUSH 8)
304   (CALL1&JMPIF 42 L197)               ; MMINUSP
308   L308
308   (LOAD&PUSH 9)
309   (JMPIFNOTEQTO 38 L1163)             ; -1
313   (LOAD&PUSH 8)
314   (CALL1&JMPIFNOT 41 L1163)           ; MAXIMA-INTEGERP
318   (LOAD&PUSH 8)
319   (CALL1&JMPIFNOT 44 L1163)           ; MTIMESP
323   (LOAD&PUSH 8)
324   (CALLS2&PUSH 71)                    ; LENGTH
326   (CONST&PUSH 45)                     ; 3
328   (CALLSR&JMPIFNOT 1 45 L1163)        ; =
333   (LOAD 8)
334   (CDR)
335   (CAR&PUSH)
336   (CALL1&JMPIFNOT 46 L1163)           ; FIXNUMP
340   (LOAD 8)
341   (CDR)
342   (CAR&PUSH)
343   (CALLS2&JMPIFNOT 148 L1163)         ; ODDP
347   (LOAD 8)
348   (CDR)
349   (CDR)
350   (CAR&PUSH)
351   (CALL1&JMPIFNOT 41 L1163)           ; MAXIMA-INTEGERP
355   (LOAD 8)
356   L356
356   (CDR)
357   (CDR)
358   (CAR)
359   (STORE 8)
361   (JMP L202)
364   L364
364   (LOAD 9)
365   (CDR)
366   (CAR&PUSH)
367   (LOAD&PUSH 9)
368   (CALL2 39)                          ; POWER
370   (SKIP 3)
372   (JMP L1555)
375   L375
375   (LOAD 9)
376   (CAR)
377   (CAR&PUSH)
378   (NIL)
379   (CONS&PUSH)
380   (LOAD 10)
381   (CDR)
382   (CAR&PUSH)
383   (LOAD&PUSH 10)
384   (CALL2&PUSH 39)                     ; POWER
386   (LOAD 11)
387   (CDR)
388   (CDR)
389   (CAR&PUSH)
390   (LOAD&PUSH 11)
391   (CALL2&PUSH 39)                     ; POWER
393   (LIST&PUSH 3)
395   (LOAD 10)
396   (JMP L1221)
399   L399
399   (LOAD&DEC&PUSH 8)
401   (LOAD&PUSH 10)
402   (JMP L421)
404   L404
404   (LOAD&DEC&PUSH 1)
406   (CONST&PUSH 60)                     ; (MTIMES)
408   (LOAD&PUSH 2)
409   (LOAD&PUSH 14)
410   (LIST&PUSH 3)
412   (CONST&PUSH 61)                     ; 1
414   (T&PUSH)
415   (CALL 3 62)                         ; SIMPTIMES
418   (STORE 1)
419   (POP&STORE 1)
421   L421
421   (LOAD&PUSH 1)
422   (CALLS2&JMPIFNOT 8 L404)            ; NUMBERP
425   (LOAD&PUSH 1)
426   (CALLS2&JMPIFNOT 145 L404)          ; ZEROP
429   (POP)
430   (SKIP 4)
432   (JMP L1555)
435   L435
435   (LOAD&PUSH 9)
436   (LOAD&PUSH 9)
437   (NIL&PUSH)
438   (CALL 3 63)                         ; TMS
441   (JMP L914)
444   L444
444   (LOAD&PUSH 9)
445   (LOAD&PUSH 9)
446   (CALL2 68)                          ; EXPANDEXPT
448   (JMP L1219)
451   L451
451   (LOAD 9)
452   (CAR)
453   (CAR&PUSH)
454   (JMPIFNOTEQTO 56 L484)              ; %SUM
457   (GETVALUE 57)                       ; $SUMEXPAND
459   (JMPIFNOT L484)
461   (LOAD&PUSH 8)
462   (CALLS2&JMPIFNOT 12 L484)           ; INTEGERP
465   (LOAD&PUSH 8)
466   (CALLS2&JMPIFNOT 8 L484)            ; NUMBERP
469   (LOAD&PUSH 8)
470   (CONST&PUSH 58)                     ; 0
472   (CALLSR&JMPIFNOT 1 48 L484)         ; >
476   (LOAD&PUSH 8)
477   (GETVALUE&PUSH 59)                  ; $MAXPOSEX
479   (CALLSR&JMPIF 1 47 L399)            ; <
484   L484
484   (LOAD&PUSH 8)
485   (JMPIFEQTO 38 L435)                 ; -1
488   (LOAD&PUSH 8)
489   (CALL1&JMPIFNOT 46 L847)            ; FIXNUMP
493   (LOAD&PUSH 9)
494   (CALL1&JMPIFNOT 65 L515)            ; MPLUSP
497   (LOAD&PUSH 8)
498   (GETVALUE&PUSH 66)                  ; $EXPOP
500   (CALLSR&JMPIF 1 48 L515)            ; >
504   (LOAD&PUSH 8)
505   (CALLSR&PUSH 0 54)                  ; -
508   (GETVALUE&PUSH 67)                  ; $EXPON
510   (CALLSR&JMPIFNOT 1 48 L444)         ; >
515   L515
515   (LOAD&PUSH 9)
516   (LOAD&PUSH 9)
517   (NIL&PUSH)
518   (CALL&PUSH 3 63)                    ; TMS
521   (T&PUSH)
522   (CALL2 4)                           ; SIMPLIFYA
524   (JMP L1219)
527   L527
527   (LOAD 9)
528   (CDR)
529   (CAR&PUSH)
530   (LOAD&PUSH 9)
531   (CALL2&PUSH 39)                     ; POWER
533   (LOAD 10)
534   (CDR)
535   (CDR)
536   (CAR&PUSH)
537   (CONST&PUSH 38)                     ; -1
539   (LOAD&PUSH 11)
540   (CALL2 40)                          ; MUL2
542   L542
542   (PUSH)
543   (CALL2&PUSH 39)                     ; POWER
545   (CALL2 40)                          ; MUL2
547   (SKIP 3)
549   (JMP L1555)
552   L552
552   (CONST&PUSH 38)                     ; -1
554   (LOAD&PUSH 9)
555   (CALL2 77)                          ; MULT
557   (STORE 8)
559   (LOAD&CAR&PUSH 2)
561   (LOAD&PUSH 10)
562   (CALL1&PUSH 78)                     ; $DENOM
564   (CALL2 40)                          ; MUL2
566   (STORE 9)
568   (JMP L202)
571   L571
571   (CONST 79)                          ; $PNZ
573   (JMP L720)
576   L576
576   (CONST&PUSH 38)                     ; -1
578   (LOAD&CONS&STORE 0)
580   (CONST&PUSH 38)                     ; -1
582   (LOAD&CAR&PUSH 3)
584   (CALL2 77)                          ; MULT
586   (JMP L731)
589   L589
589   (CONST&PUSH 83)                     ; (MEXPT SIMP)
591   (LOAD&PUSH 13)
592   (LOAD&PUSH 13)
593   (LIST 3)
595   (SKIP 6)
597   (JMP L1555)
600   L600
600   (LOAD&PUSH 5)
601   (LOAD&CONS&STORE 0)
603   (GETVALUE 2)                        ; RULESW
605   (JMPIFNOT L747)
608   (JMP L741)
611   L611
611   (LOAD&PUSH 5)
612   (LOAD&PUSH 13)
613   (CALL2&JMPIF 82 L589)               ; ALIKE1
616   (LOAD&PUSH 20)
617   (CONST&PUSH 84)                     ; ($PN $PNZ)
619   (CALL2&JMPIF 10 L600)               ; MEMQ
622   (CONST&PUSH 85)                     ; (MEXPT)
624   (LOAD&PUSH 6)
625   (LOAD&PUSH 13)
626   (LIST&PUSH 3)
628   (T&PUSH)
629   (CALL2&PUSH 4)                      ; SIMPLIFYA
631   (CONST&PUSH 61)                     ; 1
633   (CONST&PUSH 86)                     ; (MTIMES)
635   (LOAD 4)
636   (CONS&PUSH)
637   (CALL&PUSH 3 63)                    ; TMS
640   (CALL1 64)                          ; TESTT
642   (STORE 5)
643   (GETVALUE 2)                        ; RULESW
645   (JMPIFNOT L747)
648   (JMP L741)
651   L651
651   (CONST&PUSH 88)                     ; (MEXPT)
653   (LOAD&PUSH 13)
654   (LOAD&PUSH 13)
655   (LIST 3)
657   (JMP L806)
660   L660
660   (CONST&PUSH 89)                     ; (MTIMES SIMP)
662   (LOAD 2)
663   (CONS&PUSH)
664   (CALL1 64)                          ; TESTT
666   (SKIP 6)
668   (JMP L1555)
671   L671
671   (LOAD 9)
672   (CDR)
673   (CAR&PUSH)
674   (CALLS2&JMPIFNOT 8 L683)            ; NUMBERP
677   (LOAD 9)
678   (CDR)
679   (CAR&PUSH)
680   (JMPIFNOTEQTO 38 L694)              ; -1
683   L683
683   (LOAD&PUSH 9)
684   (CALL1&PUSH 74)                     ; $NUM
686   (CONST&PUSH 75)                     ; (1 -1)
688   (CALL2 76)                          ; ZL-MEMBER
690   (STORE 2)
691   (JMPIF L552)
694   L694
694   (GETVALUE 71)                       ; $RADEXPAND
696   (JMPIFNOT L1213)
699   (LOAD&CDR&PUSH 9)
701   (CONST&PUSH 61)                     ; 1
703   (NIL)
704   (CONS&PUSH)
705   (NIL&PUSH)
706   (LOAD&JMPIFNOT 2 L752)
709   L709
709   (LOAD&CAR&PUSH 2)
711   (CONST&PUSH 27)                     ; $%I
712   (CALL2&JMPIFNOT 28 L571)            ; FREE
716   (LOAD&CAR&PUSH 2)
718   (CALL1 80)                          ; $SIGN
720   L720
720   (STORE 20)
722   (PUSH)
723   (CONST&PUSH 81)                     ; ($NEG $NZ)
725   (CALL2&JMPIF 10 L576)               ; MEMQ
729   (LOAD 2)
730   (CAR)
731   L731
731   (STORE 5)
732   (PUSH)
733   (CALL1&JMPIFNOT 18 L611)            ; ONEP1
737   (GETVALUE 2)                        ; RULESW
739   (JMPIFNOT L747)
741   L741
741   (NIL)
742   (SETVALUE 2)                        ; RULESW
744   (LOAD 5)
745   (CDR)
746   (STORE 1)
747   L747
747   (LOAD&CDR&STORE 2)
749   (LOAD&JMPIF 2 L709)
752   L752
752   (LOAD&PUSH 1)
753   (CONST&PUSH 87)                     ; (1)
755   (CALLS2&JMPIF 2 L651)               ; EQUAL
759   (LOAD&JMPIFNOT 0 L660)
763   (CONST&PUSH 90)                     ; (MTIMES)
765   (LOAD&PUSH 1)
766   (CALLS2 73)                         ; NREVERSE
768   (CONS&PUSH)
769   (LOAD&PUSH 12)
770   (CALL2 91)                          ; POWER*
772   (STORE 0)
773   (PUSH)
774   (CALL1&JMPIF 18 L800)               ; ONEP1
777   (LOAD&PUSH 0)
778   (CONST&PUSH 61)                     ; 1
780   (CONST&PUSH 92)                     ; (MTIMES)
782   (LOAD 4)
783   (CONS&PUSH)
784   (CALL&PUSH 3 63)                    ; TMS
787   (CALL1 64)                          ; TESTT
789   (STORE 0)
790   (GETVALUE 2)                        ; RULESW
792   (JMPIFNOT L800)
794   (NIL)
795   (SETVALUE 2)                        ; RULESW
797   (LOAD 0)
798   (CDR)
799   (STORE 1)
800   L800
800   (CONST&PUSH 93)                     ; (MTIMES)
802   (LOAD 2)
803   (CONS&PUSH)
804   (CALL1 64)                          ; TESTT
806   L806
806   (PUSH)
807   (LOAD&PUSH 11)
808   (CALL2 34)                          ; EQTEST
810   (SKIP 6)
812   (JMP L1555)
815   L815
815   (LOAD&PUSH 8)
816   (CALL1&JMPIF 20 L142)               ; MNEGP
820   (GETVALUE 21)                       ; *ZEXPTSIMP?
822   (JMPIFNOT L831)
824   (LOAD&PUSH 8)
825   (CALL1&PUSH 22)                     ; $ASKSIGN
827   (JMPIFEQTO 23 L142)                 ; $NEG
831   L831
831   (LOAD&PUSH 8)
832   (CONST&PUSH 27)                     ; $%I
833   (CALL2&JMPIF 28 L156)               ; FREE
837   (GETVALUE 24)                       ; ERRORSW
839   (JMPIF L151)
842   (CONST 29)                          ; "0 to a complex quantity has been generated."
844   L844
844   (PUSH)
845   (CALL1 26)                          ; MERROR
847   L847
847   (LOAD 9)
848   (CAR)
849   (CAR&PUSH)
850   (JMPIFEQTO 55 L1399)                ; MEXPT
854   (LOAD 9)
855   (CAR)
856   (CAR&PUSH)
857   (JMPIFEQTO 69 L527)                 ; RAT
861   (LOAD 9)
862   (CAR)
863   (CAR&PUSH)
864   (JMPIFNOTEQTO 70 L1213)             ; MTIMES
868   (GETVALUE&PUSH 71)                  ; $RADEXPAND
870   (JMPIFEQTO 72 L883)                 ; $ALL
873   (GETVALUE 71)                       ; $RADEXPAND
875   (JMPIFNOT L671)
878   (LOAD&PUSH 8)
879   (CALL1&JMPIFNOT 73 L671)            ; SIMPLEXPON
883   L883
883   (CONST&PUSH 61)                     ; 1
885   (LIST 1)
887   (STORE 6)
888   L888
888   (LOAD 6)
889   (CDR)
890   (JMPIFNOT L906)
892   (LOAD&CAR&PUSH 6)
894   (CALL1&JMPIFNOT 18 L906)            ; ONEP1
897   (LOAD 6)
898   (CDR)
899   (CAR&PUSH)
900   (CALL1&JMPIFNOT 32 L906)            ; RATNUMP
904   (LOAD&CDR&STORE 6)
906   L906
906   (LOAD&CDR&STORE 9)
908   (JMPIF L948)
910   (CONST&PUSH 94)                     ; (MTIMES)
912   (LOAD 7)
913   (CONS)
914   L914
914   (PUSH)
915   (CALL1 64)                          ; TESTT
917   (JMP L1219)
920   L920
920   (LOAD 9)
921   (CAR)
922   (CAR&PUSH)
923   (LOAD 10)
924   (CAR)
925   (CDR)
926   (CAR&PUSH)
927   (LOAD 11)
928   (CAR)
929   (CDR)
930   (CDR)
931   (CAR&PUSH)
932   (LOAD&PUSH 11)
933   (CALL2 77)                          ; MULT
935   (JMP L969)
937   L937
937   (LOAD&PUSH 8)
938   (CALL1 35)                          ; %ITOPOT
940   (SETVALUE 1)                        ; Y
942   (JMP L974)
944   L944
944   (CONST 96)                          ; (MEXPT)
946   (JMP L965)
948   L948
948   (LOAD&CAR&PUSH 9)
950   (CALL1&JMPIF 95 L920)               ; MEXPTP
953   (LOAD&CAR&PUSH 9)
955   (JMPIFEQTO 27 L937)                 ; $%I
958   (LOAD&CAR&PUSH 9)
960   (CALL1&JMPIF 31 L944)               ; MNUMP
963   (CONST 97)                          ; (MEXPT SIMP)
965   L965
965   (PUSH)
966   (LOAD&CAR&PUSH 10)
968   (LOAD 10)
969   L969
969   (PUSH)
970   (LIST 3)
972   (SETVALUE 1)                        ; Y
974   L974
974   (GETVALUE&PUSH 1)                   ; Y
976   (T&PUSH)
977   (CALL2&PUSH 4)                      ; SIMPLIFYA
979   (CONST&PUSH 61)                     ; 1
981   (CONST&PUSH 98)                     ; (MTIMES)
983   (LOAD 9)
984   (CONS&PUSH)
985   (CALL&PUSH 3 63)                    ; TMS
988   (CALL1 64)                          ; TESTT
990   (STORE 2)
991   (GETVALUE 2)                        ; RULESW
993   (JMPIFNOT L888)
996   (NIL)
997   (SETVALUE 2)                        ; RULESW
999   (LOAD 2)
1000  (CDR)
1001  (STORE 6)
1002  (JMP L888)
1005  L1005
1005  (LOAD&PUSH 9)
1006  (CONST&PUSH 99)                     ; $NUMER
1008  (CALL2 100)                         ; MGET
1010  (BIND 1)                            ; Y
1012  (GETVALUE 1)                        ; Y
1014  (JMPIFNOT L1028)
1016  (PUSH)
1017  (CALLS2&JMPIFNOT 15 L1028)          ; FLOATP
1020  (GETVALUE 99)                       ; $NUMER
1022  (JMPIF L1045)
1024  (LOAD&PUSH 11)
1025  (JMPIFNOTEQTO 61 L1045)             ; 1
1028  L1028
1028  (UNBIND1)
1029  L1029
1029  (LOAD&PUSH 9)
1030  (LOAD&PUSH 9)
1031  (CALL2 33)                          ; EXPTRL
1033  (SKIP 3)
1035  (JMP L1555)
1038  L1038
1038  (CONST&PUSH 101)                    ; $%E
1040  (CALL1 103)                         ; $BFLOAT
1042  (JMP L1157)
1045  L1045
1045  (LOAD&PUSH 12)
1046  (JMPIFNOTEQTO 101 L1056)            ; $%E
1050  (LOAD&PUSH 11)
1051  (GETVALUE&PUSH 102)                 ; BIGFLOATONE
1053  (CALLS2&JMPIF 2 L1038)              ; EQUAL
1056  L1056
1056  (GETVALUE 1)                        ; Y
1058  (JMP L1157)
1061  L1061
1061  (CONST&PUSH 105)                    ; (MEXPT)
1063  (CONST&PUSH 101)                    ; $%E
1065  (LOAD&PUSH 10)
1066  (LIST&PUSH 3)
1068  (CALL1 103)                         ; $BFLOAT
1070  (SKIP 3)
1072  (JMP L1555)
1075  L1075
1075  (LOAD&PUSH 8)
1076  (CALL1 106)                         ; EXP
1078  (SKIP 3)
1080  (JMP L1555)
1083  L1083
1083  (LOAD&PUSH 8)
1084  (CALL1 110)                         ; %ETOLOG
1086  (SKIP 3)
1088  (JMP L1555)
1091  L1091
1091  (LOAD&PUSH 8)
1092  (CALL1&JMPIF 104 L1061)             ; $BFLOATP
1095  (LOAD&PUSH 8)
1096  (CALLS2&JMPIF 15 L1075)             ; FLOATP
1099  (GETVALUE 99)                       ; $NUMER
1101  (JMPIFNOT L1108)
1104  (LOAD&PUSH 8)
1105  (CALLS2&JMPIF 12 L1075)             ; INTEGERP
1108  L1108
1108  (GETVALUE 107)                      ; $LOGSIMP
1110  (JMPIFNOT L1119)
1113  (CONST&PUSH 108)                    ; %LOG
1115  (LOAD&PUSH 9)
1116  (CALL2&JMPIF 109 L1083)             ; AMONG
1119  L1119
1119  (GETVALUE 111)                      ; $DEMOIVRE
1121  (JMPIFNOT L1132)
1124  (LOAD&PUSH 8)
1125  (CALL1 112)                         ; DEMOIVRE
1127  (STORE 17)
1129  (JMPIF L1145)
1132  L1132
1132  (GETVALUE 113)                      ; $%EMODE
1134  (JMPIFNOT L1213)
1137  (LOAD&PUSH 8)
1138  (CALL1 114)                         ; %ESPECIAL
1140  (STORE 17)
1142  (JMPIFNOT L1213)
1145  L1145
1145  (LOAD 17)
1147  (SKIP 3)
1149  (JMP L1555)
1152  L1152
1152  (GETVALUE&PUSH 1)                   ; Y
1154  (LOAD&PUSH 12)
1155  (CALL2 33)                          ; EXPTRL
1157  L1157
1157  (UNBIND1)
1158  (SKIP 3)
1160  (JMP L1555)
1163  L1163
1163  (LOAD 9)
1164  (JMPIFCONSP L1342)
1167  L1167
1167  (LOAD&PUSH 8)
1168  (CALL1&JMPIF 19 L1029)              ; ZEROP1
1172  (LOAD&PUSH 8)
1173  (CALL1&JMPIF 18 L1005)              ; ONEP1
1177  (LOAD&PUSH 9)
1178  (JMPIFEQTO 101 L1091)               ; $%E
1182  (LOAD&PUSH 9)
1183  (CONST&PUSH 99)                     ; $NUMER
1185  (CALL2 100)                         ; MGET
1187  (BIND 1)                            ; Y
1189  (GETVALUE 1)                        ; Y
1191  (JMPIFNOT L1212)
1194  (PUSH)
1195  (CALLS2&JMPIFNOT 15 L1212)          ; FLOATP
1199  (LOAD&PUSH 11)
1200  (CALLS2&JMPIF 15 L1152)             ; FLOATP
1203  (GETVALUE 99)                       ; $NUMER
1205  (JMPIFNOT L1212)
1208  (LOAD&PUSH 11)
1209  (CALLS2&JMPIF 12 L1152)             ; INTEGERP
1212  L1212
1212  (UNBIND1)
1213  L1213
1213  (CONST&PUSH 115)                    ; (MEXPT)
1215  (LOAD&PUSH 10)
1216  (LOAD&PUSH 10)
1217  (LIST 3)
1219  L1219
1219  (PUSH)
1220  (LOAD 8)
1221  L1221
1221  (PUSH)
1222  (CALL2 34)                          ; EQTEST
1224  (SKIP 3)
1226  (JMP L1555)
1229  L1229
1229  (LOAD&PUSH 9)
1230  (CALL1&JMPIFNOT 116 L1029)          ; MXORLISTP1
1234  (CONST&PUSH 61)                     ; 1
1236  (LOAD&PUSH 9)
1237  (CALL2&PUSH 117)                    ; ADDK
1239  (LOAD&PUSH 10)
1240  (CALL2 118)                         ; CONSTMX
1242  (SKIP 3)
1244  (JMP L1555)
1247  L1247
1247  (LOAD 9)
1248  (SKIP 3)
1250  (JMP L1555)
1253  L1253
1253  (LOAD&JMPIFNOT 1 L1274)
1257  (LOAD&PUSH 9)
1258  (CALL1&JMPIFNOT 122 L1267)          ; $LISTP
1262  (GETVALUE 123)                      ; $LISTARITH
1264  (JMPIFNOT L1274)
1267  L1267
1267  (LOAD&PUSH 8)
1268  (GETVALUE&PUSH 124)                 ; $ASSUMESCALAR
1270  (CALL2&JMPIF 125 L1300)             ; SCALAR-OR-CONSTANT-P
1274  L1274
1274  (GETVALUE 121)                      ; $DOMXEXPT
1276  (JMPIFNOT L1213)
1279  (LOAD&JMPIFNOT 0 L1213)
1283  (LOAD&PUSH 8)
1284  (CALL1&JMPIFNOT 122 L1293)          ; $LISTP
1288  (GETVALUE 123)                      ; $LISTARITH
1290  (JMPIFNOT L1213)
1293  L1293
1293  (LOAD&PUSH 9)
1294  (GETVALUE&PUSH 124)                 ; $ASSUMESCALAR
1296  (CALL2&JMPIFNOT 125 L1213)          ; SCALAR-OR-CONSTANT-P
1300  L1300
1300  (CONST 55)                          ; MEXPT
1302  (JMP L1544)
1305  L1305
1305  (LOAD&PUSH 8)
1306  (LOAD 10)
1307  (CDR)
1308  (CDR)
1309  (CAR&PUSH)
1310  (CALL2 77)                          ; MULT
1312  (STORE 8)
1314  (LOAD 9)
1315  (CDR)
1316  (CAR)
1317  (STORE 9)
1319  (JMP L202)
1322  L1322
1322  (LOAD&PUSH 8)
1323  (LOAD 10)
1324  (CDR)
1325  (CDR)
1326  (CAR&PUSH)
1327  (CALL2 77)                          ; MULT
1329  (STORE 8)
1331  (LOAD 9)
1332  (CDR)
1333  (CAR&PUSH)
1334  (CALL1 131)                         ; RADMABS
1337  (STORE 9)
1339  (JMP L202)
1342  L1342
1342  (LOAD 9)
1343  (CAR)
1344  (CAR&PUSH)
1345  (JMPIFNOTEQTO 47 L1380)             ; MABS
1349  (LOAD&PUSH 8)
1350  (CALL1&JMPIFNOT 48 L1380)           ; EVNUMP
1354  (GETVALUE&PUSH 49)                  ; $DOMAIN
1356  (JMPIFNOTEQTO 50 L1367)             ; $REAL
1360  (LOAD 9)
1361  (CDR)
1362  (CAR&PUSH)
1363  (CALL1&JMPIFNOT 51 L364)            ; DECL-COMPLEXP
1367  L1367
1367  (GETVALUE&PUSH 49)                  ; $DOMAIN
1369  (JMPIFNOTEQTO 52 L1380)             ; $COMPLEX
1373  (LOAD 9)
1374  (CDR)
1375  (CAR&PUSH)
1376  (CALL1&JMPIF 53 L364)               ; DECL-REALP
1380  L1380
1380  (LOAD 9)
1381  (CAR)
1382  (CAR&PUSH)
1383  (JMPIFEQTO 54 L375)                 ; MEQUAL
1387  (LOAD&PUSH 8)
1388  (CALLS2&JMPIF 6 L847)               ; SYMBOLP
1392  (LOAD 9)
1393  (CAR)
1394  (CAR&PUSH)
1395  (JMPIFNOTEQTO 55 L451)              ; MEXPT
1399  L1399
1399  (GETVALUE&PUSH 71)                  ; $RADEXPAND
1401  (JMPIFEQTO 72 L1305)                ; $ALL
1405  (LOAD&PUSH 8)
1406  (CALL1&JMPIF 73 L1305)              ; SIMPLEXPON
1410  (LOAD 9)
1411  (CDR)
1412  (CAR&PUSH)
1413  (CALL1&JMPIF 129 L1305)             ; NONEG
1418  (LOAD 9)
1419  (CDR)
1420  (CDR)
1421  (CAR&PUSH)
1422  (JMPIFEQTO 38 L1305)                ; -1
1426  (GETVALUE&PUSH 49)                  ; $DOMAIN
1428  (JMPIFNOTEQTO 50 L1441)             ; $REAL
1432  (LOAD 9)
1433  (CDR)
1434  (CDR)
1435  (CAR&PUSH)
1436  (CALL1&JMPIF 130 L1305)             ; ODNUMP
1441  L1441
1441  (GETVALUE&PUSH 49)                  ; $DOMAIN
1443  (JMPIFNOTEQTO 50 L1473)             ; $REAL
1447  (LOAD&PUSH 9)
1448  (CONST&PUSH 27)                     ; $%I
1449  (CALL2&JMPIFNOT 28 L1473)           ; FREE
1453  (GETVALUE 71)                       ; $RADEXPAND
1455  (JMPIFNOT L1473)
1458  (LOAD 9)
1459  (CDR)
1460  (CAR&PUSH)
1461  (CALL1&JMPIF 51 L1473)              ; DECL-COMPLEXP
1465  (LOAD 9)
1466  (CDR)
1467  (CDR)
1468  (CAR&PUSH)
1469  (CALL1&JMPIF 48 L1322)              ; EVNUMP
1473  L1473
1473  (LOAD 9)
1474  (CDR)
1475  (CDR)
1476  (CAR&PUSH)
1477  (CALL1&JMPIFNOT 42 L1213)           ; MMINUSP
1481  (LOAD&PUSH 8)
1482  (CALL1 43)                          ; NEG
1484  (STORE 8)
1486  (LOAD&CAR&PUSH 9)
1488  (LOAD 10)
1489  (CDR)
1490  (CAR&PUSH)
1491  (LOAD 11)
1492  (CDR)
1493  (CDR)
1494  (CAR&PUSH)
1495  (CALL1&PUSH 43)                     ; NEG
1497  (LIST 3)
1499  (STORE 9)
1501  (JMP L202)
1504  L1504
1504  (LOAD&PUSH 8)
1505  (CALL1&JMPIF 19 L1229)              ; ZEROP1
1509  (LOAD&PUSH 8)
1510  (CALL1&JMPIF 18 L1247)              ; ONEP1
1514  (GETVALUE 119)                      ; $DOALLMXOPS
1516  (JMPIF L1253)
1519  (GETVALUE 120)                      ; $DOSCMXOPS
1521  (JMPIF L1253)
1524  (GETVALUE 121)                      ; $DOMXEXPT
1526  (JMPIF L1253)
1529  (GETVALUE 127)                      ; $DOMXMXOPS
1531  (JMPIFNOT L1213)
1534  (LOAD&PUSH 8)
1535  (CONST&PUSH 128)                    ; (-1 -1.0)
1538  (CALL2&JMPIFNOT 76 L1213)           ; ZL-MEMBER
1542  (CONST 55)                          ; MEXPT
1544  L1544
1544  (PUSH)
1545  (LOAD&PUSH 10)
1546  (LOAD&PUSH 10)
1547  (CALL&PUSH 3 126)                   ; OUTERMAP1
1550  (T&PUSH)
1551  (CALL2 4)                           ; SIMPLIFYA
1553  (SKIP 3)
1555  L1555
1555  (UNBIND1)
1556  (SKIP 4)
1558  (UNBIND 2)
1560  (SKIP&RET 4)


Disassembly of function #:|(DEFUN TIMESIN (X Y W) ...)-153|
(CONST 0) = TIMESIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TIMESIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TIMESIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TIMESIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TIMESIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TIMESIN
8     (SKIP&RET 1)


Disassembly of function TIMESIN
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = MEXPTP
(CONST 3) = 1
(CONST 4) = (MEXPT)
(CONST 5) = MULT
(CONST 6) = TIMESINP
(CONST 7) = $%I
(CONST 8) = SIMPLIFYA
(CONST 9) = ALIKE1
(CONST 10) = PLSK
(CONST 11) = ZEROP1
(CONST 12) = MNUMP
(CONST 13) = EXPTRL
(CONST 14) = POWER
(CONST 15) = TIMESK
(CONST 16) = MTIMESP
(CONST 17) = MAXIMA-CONSTANTP
(CONST 18) = ONEP1
(CONST 19) = GREAT
(CONST 20) = FIXNUMP
(CONST 21) = $%E
(CONST 22) = $NUMER
(CONST 23) = EXP
(CONST 24) = CONSTANT
(CONST 25) = $%EMODE
(CONST 26) = %ESPECIAL
(CONST 27) = ALIKE
(CONST 28) = (MEXPT)
(CONST 29) = ((FOO))
(CONST 30) = EQTEST
(CONST 31) = -1
(CONST 32) = (MEXPT)
(CONST 33) = RULESW
(CONST 34) = MULN
(CONST 35) = (MTIMES)
(CONST 36) = TMS
(CONST 37) = 4
(CONST 38) = 2
(CONST 39) = 3
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($%EMODE Y $NUMER TIMESINP X)
writes special variables : (RULESW X)
510 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (PUSH-NIL 5)
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1&JMPIFNOT 2 L16)              ; MEXPTP
13    (GETVALUE 0)                        ; X
15    (STORE 1)
16    L16
16    (LOAD&PUSH 12)
17    (JMPIFEQTO 3 L59)                   ; 1
20    (CONST&PUSH 4)                      ; (MEXPT)
21    (LOAD&JMPIF 2 L64)
24    (GETVALUE&PUSH 0)                   ; X
26    (LOAD 14)
27    L27
27    (PUSH)
28    (LIST 2)
30    (CONS)
31    (STORE 3)
32    (GETVALUE 6)                        ; TIMESINP
34    (JMPIF L50)
36    (GETVALUE&PUSH 0)                   ; X
38    (JMPIFEQTO 7 L50)                   ; $%I
41    (T)
42    (BIND 6)                            ; TIMESINP
44    (LOAD&PUSH 6)
45    (T&PUSH)
46    (CALL2 8)                           ; SIMPLIFYA
48    (STORE 6)
49    (UNBIND1)
50    L50
50    (LOAD&PUSH 3)
51    (CALL1&JMPIF 2 L78)                 ; MEXPTP
54    (LOAD&PUSH 3)
55    (CONST 3)                           ; 1
56    (JMP L282)
59    L59
59    (GETVALUE 0)                        ; X
61    (STORE 3)
62    (JMP L50)
64    L64
64    (GETVALUE 0)                        ; X
66    (CDR)
67    (CAR&PUSH)
68    (GETVALUE 0)                        ; X
70    (CDR)
71    (CDR)
72    (CAR&PUSH)
73    (LOAD&PUSH 15)
74    (CALL2 5)                           ; MULT
76    (JMP L27)
78    L78
78    (LOAD 3)
79    (CDR)
80    (JMP L285)
83    L83
83    (GETVALUE 0)                        ; X
85    (CAR&PUSH)
86    (LOAD&PUSH 13)
87    (CALL2 13)                          ; EXPTRL
89    (JMP L258)
92    L92
92    (GETVALUE 0)                        ; X
94    (CDR)
95    (JMP L285)
98    L98
98    (GETVALUE 0)                        ; X
100   (CAR&PUSH)
101   (CALL1&JMPIF 17 L300)               ; MAXIMA-CONSTANTP
105   (LOAD 4)
106   (CDR)
107   (CAR)
108   (CDR)
109   (CAR&PUSH)
110   (CALL1&JMPIF 17 L300)               ; MAXIMA-CONSTANTP
114   (GETVALUE 0)                        ; X
116   (CAR&PUSH)
117   (LOAD 5)
118   (CDR)
119   (CAR)
120   L120
120   (CDR)
121   (CAR&PUSH)
122   (CALL2&JMPIF 19 L508)               ; GREAT
126   L126
126   (GETVALUE 0)                        ; X
128   (CAR&PUSH)
129   (JMPIFEQTO 7 L700)                  ; $%I
133   L133
133   (GETVALUE 0)                        ; X
135   (CAR&PUSH)
136   (JMPIFEQTO 21 L330)                 ; $%E
140   L140
140   (LOAD&PUSH 12)
141   (CALL1&JMPIF 18 L351)               ; ONEP1
145   L145
145   (GETVALUE 0)                        ; X
147   (CAR&PUSH)
148   (CALL1&JMPIFNOT 17 L387)            ; MAXIMA-CONSTANTP
152   (LOAD&CDR&PUSH 4)
154   L154
154   (LOAD 0)
155   (CDR)
156   (JMPIFNOT L385)
159   (LOAD 0)
160   (CDR)
161   (CAR&PUSH)
162   (CALL1&JMPIFNOT 2 L361)             ; MEXPTP
166   (GETVALUE 0)                        ; X
168   (CAR&PUSH)
169   (LOAD 1)
170   (CDR)
171   (CAR)
172   (CDR)
173   (CAR&PUSH)
174   (CALL2&JMPIFNOT 9 L361)             ; ALIKE1
178   (LOAD 0)
179   (STORE 5)
180   (SKIP 1)
182   L182
182   (LOAD 4)
183   (CDR)
184   (JMPIFNOT L126)
186   (LOAD 4)
187   (CDR)
188   (CAR&PUSH)
189   (CALL1&JMPIFNOT 2 L306)             ; MEXPTP
193   (GETVALUE 0)                        ; X
195   (CAR&PUSH)
196   (LOAD 5)
197   (CDR)
198   (CAR)
199   (CDR)
200   (CAR&PUSH)
201   (CALL2&JMPIFNOT 9 L98)              ; ALIKE1
205   (LOAD 4)
206   (CDR)
207   (CAR)
208   (CDR)
209   (CDR)
210   (CAR&PUSH)
211   (LOAD&PUSH 13)
212   (CALL2 10)                          ; PLSK
214   (STORE 12)
216   (PUSH)
217   (CALL1&JMPIF 11 L687)               ; ZEROP1
221   (LOAD&PUSH 12)
222   (CALL1&JMPIFNOT 12 L544)            ; MNUMP
226   (GETVALUE 0)                        ; X
228   (CAR&PUSH)
229   (CALL1&JMPIF 12 L239)               ; MNUMP
232   (GETVALUE 0)                        ; X
234   (CAR&PUSH)
235   (JMPIFNOTEQTO 7 L544)               ; $%I
239   L239
239   (LOAD&PUSH 4)
240   (LOAD 5)
241   (CDR)
242   (CDR&PUSH)
243   (CALLS1 170)                        ; RPLACD
245   (GETVALUE 0)                        ; X
247   (CAR&PUSH)
248   (CALL1&JMPIF 12 L83)                ; MNUMP
252   (GETVALUE 0)                        ; X
254   (CAR&PUSH)
255   (LOAD&PUSH 13)
256   (CALL2 14)                          ; POWER
258   L258
258   (SETVALUE 0)                        ; X
260   (PUSH)
261   (CALL1&JMPIF 12 L369)               ; MNUMP
265   (GETVALUE&PUSH 0)                   ; X
267   (CALL1&JMPIF 16 L631)               ; MTIMESP
271   (GETVALUE 0)                        ; X
273   (STORE 3)
274   (PUSH)
275   (CALL1&JMPIF 2 L92)                 ; MEXPTP
279   (GETVALUE&PUSH 0)                   ; X
281   (CONST 3)                           ; 1
282   L282
282   (PUSH)
283   (LIST 2)
285   L285
285   (SETVALUE 0)                        ; X
287   (CDR)
288   (CAR)
289   (JMP L461)
292   L292
292   (LOAD&CDR&PUSH 4)
294   (GETVALUE 0)                        ; X
296   (CAR)
297   (JMP L744)
300   L300
300   (LOAD 3)
301   (JMP L325)
303   L303
303   (LOAD 3)
304   (JMP L325)
306   L306
306   (GETVALUE 0)                        ; X
308   (CAR&PUSH)
309   (LOAD 5)
310   (CDR)
311   (CAR&PUSH)
312   (CALL2&JMPIF 9 L665)                ; ALIKE1
316   (GETVALUE 0)                        ; X
318   (CAR&PUSH)
319   (CALL1&JMPIF 17 L303)               ; MAXIMA-CONSTANTP
322   (GETVALUE 0)                        ; X
324   (CAR)
325   L325
325   (PUSH)
326   (LOAD 5)
327   (JMP L120)
330   L330
330   (GETVALUE 22)                       ; $NUMER
332   (JMPIFNOT L140)
335   (LOAD&PUSH 12)
336   (CALLS2&JMPIFNOT 12 L140)           ; INTEGERP
340   (GETVALUE&PUSH 1)                   ; Y
342   (GETVALUE 1)                        ; Y
344   (CAR&PUSH)
345   (LOAD&PUSH 14)
346   (CALL1 23)                          ; EXP
348   (JMP L741)
351   L351
351   (GETVALUE 0)                        ; X
353   (CAR&PUSH)
354   (CALL1&JMPIFNOT 24 L495)            ; CONSTANT
358   (JMP L145)
361   L361
361   (LOAD&CDR&STORE 0)
363   (JMP L154)
366   L366
366   (LOAD 1)
367   (JMP L432)
369   L369
369   (GETVALUE&PUSH 1)                   ; Y
371   (GETVALUE 1)                        ; Y
373   (CAR&PUSH)
374   (GETVALUE 0)                        ; X
376   (JMP L741)
379   L379
379   (LOAD&PUSH 4)
380   (GETVALUE 0)                        ; X
382   (JMP L499)
385   L385
385   (SKIP 1)
387   L387
387   (GETVALUE 0)                        ; X
389   (CAR&PUSH)
390   (CALL1&JMPIFNOT 12 L397)            ; MNUMP
393   (LOAD&PUSH 12)
394   (CALL1&JMPIF 12 L416)               ; MNUMP
397   L397
397   (GETVALUE 0)                        ; X
399   (CAR&PUSH)
400   (JMPIFNOTEQTO 21 L491)              ; $%E
404   (GETVALUE 25)                       ; $%EMODE
406   (JMPIFNOT L491)
409   (LOAD&PUSH 12)
410   (CALL1 26)                          ; %ESPECIAL
412   (STORE 0)
413   (JMPIFNOT L491)
416   L416
416   (LOAD&JMPIF 0 L432)
419   (LOAD&CDR&PUSH 1)
421   (GETVALUE&PUSH 0)                   ; X
423   (CALL2&JMPIF 27 L366)               ; ALIKE
426   (GETVALUE 0)                        ; X
428   (CAR&PUSH)
429   (LOAD&PUSH 13)
430   (CALL2 13)                          ; EXPTRL
432   L432
432   (SETVALUE 0)                        ; X
434   (PUSH)
435   (CALL1&JMPIF 12 L369)               ; MNUMP
439   (GETVALUE&PUSH 0)                   ; X
441   (CALL1&JMPIF 16 L631)               ; MTIMESP
445   (GETVALUE&PUSH 0)                   ; X
447   (CALL1&JMPIF 2 L379)                ; MEXPTP
451   (GETVALUE 0)                        ; X
453   (STORE 3)
454   (PUSH)
455   (CONST&PUSH 3)                      ; 1
456   (LIST 2)
458   (SETVALUE 0)                        ; X
460   (CONST 3)                           ; 1
461   L461
461   (STORE 12)
463   (GETVALUE 1)                        ; Y
465   (STORE 4)
466   (JMP L182)
469   L469
469   (CONST&PUSH 28)                     ; (MEXPT)
470   (GETVALUE 0)                        ; X
472   (CAR&PUSH)
473   (LOAD&PUSH 14)
474   (LIST 3)
476   (STORE 3)
477   (PUSH)
478   (LOAD&JMPIF 2 L483)
481   (CONST 29)                          ; ((FOO))
483   L483
483   (PUSH)
484   (CALL2 30)                          ; EQTEST
486   (STORE 3)
487   (LOAD&PUSH 4)
488   (LOAD 4)
489   (JMP L499)
491   L491
491   (LOAD&PUSH 12)
492   (CALL1&JMPIFNOT 18 L469)            ; ONEP1
495   L495
495   (LOAD&PUSH 4)
496   (GETVALUE 0)                        ; X
498   (CAR)
499   L499
499   (PUSH)
500   (LOAD 6)
501   (CDR)
502   (CONS&PUSH)
503   (CALLS1 170)                        ; RPLACD
505   (JMP L650)
508   L508
508   (LOAD&CDR&STORE 4)
510   (JMP L182)
513   L513
513   (LOAD&PUSH 4)
514   (LOAD 5)
515   (CDR)
516   (CDR&PUSH)
517   (CALLS1 170)                        ; RPLACD
519   (GETVALUE&PUSH 1)                   ; Y
521   (CONST 31)                          ; -1
523   (JMP L737)
526   L526
526   (LOAD&CDR&PUSH 4)
528   (GETVALUE 0)                        ; X
530   (CAR&PUSH)
531   (LOAD&PUSH 14)
532   (CALL2 13)                          ; EXPTRL
534   (JMP L744)
537   L537
537   (LOAD&CDR&PUSH 4)
539   (GETVALUE 0)                        ; X
541   (JMP L744)
544   L544
544   (GETVALUE 0)                        ; X
546   (CAR&PUSH)
547   (CALL1&JMPIF 17 L615)               ; MAXIMA-CONSTANTP
551   (LOAD&PUSH 12)
552   (CALL1&JMPIF 18 L292)               ; ONEP1
556   L556
556   (CONST&PUSH 32)                     ; (MEXPT)
558   (GETVALUE 0)                        ; X
560   (CAR&PUSH)
561   (LOAD&PUSH 14)
562   (LIST 3)
564   (STORE 2)
565   (PUSH)
566   (T&PUSH)
567   (CALL2 8)                           ; SIMPLIFYA
569   (SETVALUE 0)                        ; X
571   (PUSH)
572   (LOAD&PUSH 3)
573   (CALL2&JMPIF 9 L537)                ; ALIKE1
576   (LOAD&PUSH 4)
577   (LOAD 5)
578   (CDR)
579   (CDR&PUSH)
580   (CALLS1 170)                        ; RPLACD
582   (T)
583   (SETVALUE 33)                       ; RULESW
585   (GETVALUE&PUSH 0)                   ; X
587   (GETVALUE 1)                        ; Y
589   (CONS&PUSH)
590   (T&PUSH)
591   (CALL2 34)                          ; MULN
593   (SKIP 5)
595   (JMP L784)
598   L598
598   (GETVALUE 0)                        ; X
600   (CAR&PUSH)
601   (CALL1&JMPIFNOT 12 L609)            ; MNUMP
604   (LOAD&PUSH 12)
605   (CALL1&JMPIF 12 L526)               ; MNUMP
609   L609
609   (GETVALUE 0)                        ; X
611   (CAR&PUSH)
612   (CALL1&JMPIFNOT 17 L556)            ; MAXIMA-CONSTANTP
615   L615
615   (LOAD&PUSH 4)
616   (LOAD 5)
617   (CDR)
618   (CDR&PUSH)
619   (CALLS1 170)                        ; RPLACD
621   (GETVALUE 0)                        ; X
623   (CAR)
624   (SETVALUE 0)                        ; X
626   (NIL&STORE 1)
628   (JMP L16)
631   L631
631   (GETVALUE&PUSH 0)                   ; X
633   (CONST&PUSH 3)                      ; 1
634   (CONST&PUSH 35)                     ; (MTIMES)
636   (GETVALUE 1)                        ; Y
638   (CONS)
639   (STORE 5)
640   (PUSH)
641   (CALL 3 36)                         ; TMS
644   (STORE 2)
645   (PUSH)
646   (LOAD 4)
647   (JMPIFNOTEQ L656)
649   (LOAD 2)
650   L650
650   (CDR)
651   (SKIP 5)
653   (JMP L784)
656   L656
656   (T)
657   (SETVALUE 33)                       ; RULESW
659   (LOAD 2)
660   (SKIP 5)
662   (JMP L784)
665   L665
665   (GETVALUE 0)                        ; X
667   (CAR&PUSH)
668   (JMPIFNOTEQTO 7 L676)               ; $%I
671   (LOAD&PUSH 12)
672   (JMPIFEQTO 3 L513)                  ; 1
676   L676
676   (CONST&PUSH 3)                      ; 1
677   (LOAD&PUSH 13)
678   (CALL2 10)                          ; PLSK
680   (STORE 12)
682   (PUSH)
683   (CALL1&JMPIFNOT 11 L598)            ; ZEROP1
687   L687
687   (LOAD&PUSH 4)
688   (LOAD 5)
689   (CDR)
690   (CDR)
691   (JMP L779)
694   L694
694   (LOAD 4)
695   (SKIP 5)
697   (JMP L784)
700   L700
700   (LOAD&PUSH 12)
701   (CALL1&JMPIFNOT 20 L133)            ; FIXNUMP
705   (LOAD&PUSH 12)
706   (CONST&PUSH 37)                     ; 4
708   (CALLS2&STORE 184 12)               ; REM
711   (PUSH)
712   (CALLS2&JMPIFNOT 147 L722)          ; MINUSP
715   (CONST&PUSH 37)                     ; 4
717   (LOAD&PUSH 13)
718   (CALLSR&STORE 2 53 12)              ; +
722   L722
722   (LOAD&PUSH 12)
723   (CALLS2&JMPIF 145 L694)             ; ZEROP
726   (LOAD&PUSH 12)
727   (CONST&PUSH 38)                     ; 2
729   (CALLSR&JMPIFNOT 1 45 L766)         ; =
733   (GETVALUE&PUSH 1)                   ; Y
735   (CONST 31)                          ; -1
737   L737
737   (PUSH)
738   (GETVALUE 1)                        ; Y
740   (CAR)
741   L741
741   (PUSH)
742   (CALL2 15)                          ; TIMESK
744   L744
744   (PUSH)
745   (CALLS1 168)                        ; RPLACA
747   (SKIP 5)
749   (JMP L784)
751   L751
751   (GETVALUE&PUSH 1)                   ; Y
753   (CONST&PUSH 31)                     ; -1
755   (GETVALUE 1)                        ; Y
757   (CAR&PUSH)
758   (CALL2&PUSH 15)                     ; TIMESK
760   (CALLS1 168)                        ; RPLACA
762   (LOAD&PUSH 4)
763   (CONST 7)                           ; $%I
764   (JMP L775)
766   L766
766   (LOAD&PUSH 12)
767   (CONST&PUSH 39)                     ; 3
769   (CALLSR&JMPIF 1 45 L751)            ; =
773   (LOAD&PUSH 4)
774   (CONST 7)                           ; $%I
775   L775
775   (PUSH)
776   (LOAD 6)
777   (CDR)
778   (CONS)
779   L779
779   (PUSH)
780   (CALLS1 170)                        ; RPLACD
782   (SKIP 5)
784   L784
784   (UNBIND 2)
786   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMPMATRIX (X VESTIGIAL Z) ...)-154|
(CONST 0) = SIMPMATRIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPMATRIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPMATRIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPMATRIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPMATRIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPMATRIX
8     (SKIP&RET 1)


Disassembly of function SIMPMATRIX
(CONST 0) = X
(CONST 1) = $SCALARMATRIXP
(CONST 2) = $ALL
(CONST 3) = MULT
(CONST 4) = MEMQ
(CONST 5) = $LISTP
(CONST 6) = SIMPLIFYA
(CONST 7) = SIMPMAP
(CONST 8) = MATCHECK
(CONST 9) = (%MATRIX SIMP)
(CONST 10) = ($MATRIX SIMP)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($SCALARMATRIXP X)
86 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CDR)
7     (JMPIF L47)
9     (GETVALUE 1)                        ; $SCALARMATRIXP
11    (JMPIFNOT L47)
13    (PUSH)
14    (JMPIFEQTO 2 L25)                   ; $ALL
17    (CONST&PUSH 3)                      ; MULT
18    (GETVALUE 0)                        ; X
20    (CAR)
21    (CDR&PUSH)
22    (CALL2&JMPIFNOT 4 L47)              ; MEMQ
25    L25
25    (GETVALUE 0)                        ; X
27    (CDR)
28    (CAR&PUSH)
29    (CALL1&JMPIFNOT 5 L47)              ; $LISTP
32    (GETVALUE 0)                        ; X
34    (CDR)
35    (CAR)
36    (CDR)
37    (JMPIFNOT L47)
39    (GETVALUE 0)                        ; X
41    (CDR)
42    (CAR)
43    (CDR)
44    (CDR)
45    (JMPIFNOT L53)
47    L47
47    (GETVALUE 0)                        ; X
49    (CDR&PUSH)
50    (NIL&PUSH)
51    (JMP L87)
53    L53
53    (GETVALUE 0)                        ; X
55    (CDR)
56    (CAR)
57    (CDR)
58    (CAR&PUSH)
59    (LOAD&PUSH 5)
60    (CALL2 6)                           ; SIMPLIFYA
62    (JMP L116)
64    L64
64    (T)
65    (SKIP 2)
67    (JMP L94)
69    L69
69    (LOAD&PUSH 0)
70    (CALL1 8)                           ; MATCHECK
72    (LOAD&JMPIFNOT 1 L110)
75    L75
75    (CONST 9)                           ; (%MATRIX SIMP)
76    (JMP L111)
78    L78
78    (LOAD&CAR&STORE 1 0)
81    (PUSH)
82    (CALL1&JMPIFNOT 5 L64)              ; $LISTP
85    (LOAD&CDR&STORE 1)
87    L87
87    (LOAD&PUSH 1)
88    (CALLS1&JMPIFNOT 146 L78)           ; ENDP
91    (NIL)
92    (SKIP 2)
94    L94
94    (PUSH)
95    (GETVALUE 0)                        ; X
97    (CDR&PUSH)
98    (LOAD&PUSH 6)
99    (CALL2&PUSH 7)                      ; SIMPMAP
101   (LOAD&JMPIFNOT 0 L107)
104   (LOAD&JMPIFNOT 1 L69)
107   L107
107   (LOAD&JMPIF 1 L75)
110   L110
110   (CONST 10)                          ; ($MATRIX SIMP)
111   L111
111   (PUSH)
112   (LOAD 1)
113   (CONS)
114   (SKIP 2)
116   L116
116   (UNBIND1)
117   (SKIP&RET 4)


Disassembly of function #:|(DEFUN %ITOPOT (POT) ...)-155|
(CONST 0) = %ITOPOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE %ITOPOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ITOPOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; %ITOPOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE %ITOPOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; %ITOPOT
8     (SKIP&RET 1)


Disassembly of function %ITOPOT
(CONST 0) = FIXNUMP
(CONST 1) = #.BOOLE-AND
(CONST 2) = 3
(CONST 3) = 0
(CONST 4) = 1
(CONST 5) = $%I
(CONST 6) = 2
(CONST 7) = -1
(CONST 8) = (MTIMES SIMP)
(CONST 9) = ((RAT SIMP) 1 2)
(CONST 10) = MUL2
(CONST 11) = POWER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
36 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L22)                 ; FIXNUMP
4     (CONST&PUSH 7)                      ; -1
5     (LOAD&PUSH 2)
6     (CONST&PUSH 9)                      ; ((RAT SIMP) 1 2)
7     (CALL2&PUSH 10)                     ; MUL2
9     (CALL2 11)                          ; POWER
11    (SKIP&RET 2)
13    L13
13    (CONST 4)                           ; 1
14    (SKIP&RET 3)
16    L16
16    (CONST 5)                           ; $%I
17    (SKIP&RET 3)
19    L19
19    (CONST 7)                           ; -1
20    (SKIP&RET 3)
22    L22
22    (CONST&PUSH 1)                      ; #.BOOLE-AND
23    (LOAD&PUSH 2)
24    (CONST&PUSH 2)                      ; 3
25    (CALLS2&PUSH 205)                   ; BOOLE
27    (LOAD&PUSH 0)
28    (CONST&PUSH 3)                      ; 0
29    (CALLSR&JMPIF 1 45 L13)             ; =
33    (LOAD&PUSH 0)
34    (CONST&PUSH 4)                      ; 1
35    (CALLSR&JMPIF 1 45 L16)             ; =
39    (LOAD&PUSH 0)
40    (CONST&PUSH 6)                      ; 2
41    (CALLSR&JMPIF 1 45 L19)             ; =
45    (CONST&PUSH 8)                      ; (MTIMES SIMP)
46    (CONST&PUSH 7)                      ; -1
47    (CONST&PUSH 5)                      ; $%I
48    (LIST 3)
50    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MNLOGP (POT) ...)-156|
(CONST 0) = MNLOGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MNLOGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNLOGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MNLOGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MNLOGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MNLOGP
8     (SKIP&RET 1)


Disassembly of function MNLOGP
(CONST 0) = %LOG
(CONST 1) = SIMPLIFYA
(CONST 2) = MTIMES
(CONST 3) = MAXIMA-INTEGERP
(CONST 4) = $%E_TO_NUMLOG
(CONST 5) = $NUMBERP
(CONST 6) = POWER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($%E_TO_NUMLOG)
58 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (JMPIFEQTO 0 L52)                   ; %LOG
6     (LOAD 1)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 2 L49)                ; MTIMES
12    (LOAD 1)
13    (CDR)
14    (CAR&PUSH)
15    (CALL1&JMPIF 3 L28)                 ; MAXIMA-INTEGERP
18    (GETVALUE 4)                        ; $%E_TO_NUMLOG
20    (JMPIFNOT L49)
22    (LOAD 1)
23    (CDR)
24    (CAR&PUSH)
25    (CALL1&JMPIFNOT 5 L49)              ; $NUMBERP
28    L28
28    (LOAD 1)
29    (CDR)
30    (CDR)
31    (CAR)
32    (JMPIFATOM L49)
34    (LOAD 1)
35    (CDR)
36    (CDR)
37    (CAR)
38    (CAR)
39    (CAR&PUSH)
40    (JMPIFNOTEQTO 0 L49)                ; %LOG
43    (LOAD 1)
44    (CDR)
45    (CDR)
46    (CDR)
47    (JMPIFNOT L60)
49    L49
49    (NIL)
50    (SKIP&RET 2)
52    L52
52    (LOAD 1)
53    (CDR)
54    (CAR&PUSH)
55    (NIL&PUSH)
56    (CALL2 1)                           ; SIMPLIFYA
58    (SKIP&RET 2)
60    L60
60    (LOAD 1)
61    (CDR)
62    (CDR)
63    (CAR)
64    (CDR)
65    (CAR&PUSH)
66    (LOAD 2)
67    (CDR)
68    (CAR&PUSH)
69    (CALL2 6)                           ; POWER
71    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MNLOG (POT) ...)-157|
(CONST 0) = MNLOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MNLOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNLOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MNLOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MNLOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MNLOG
8     (SKIP&RET 1)


Disassembly of function MNLOG
(CONST 0) = (MTIMES)
(CONST 1) = (MEXPT SIMP)
(CONST 2) = $%E
(CONST 3) = ADDN
(CONST 4) = 1
(CONST 5) = SIMPTIMES
(CONST 6) = %LOG
(CONST 7) = AMONG
(CONST 8) = MNLOGP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
58 byte-code instructions:
0     (PUSH-NIL 3)
2     (LOAD&JMPIF 4 L62)
5     L5
5     (LOAD&JMPIF 2 L32)
8     (LOAD&JMPIF 0 L38)
11    L11
11    (LOAD&JMPIFNOT 0 L50)
14    L14
14    (LOAD&JMPIFNOT 2 L54)
17    (LOAD&PUSH 2)
18    (LOAD&PUSH 1)
19    (LIST&PUSH 1)
21    (CALLSR&PUSH 2 34)                  ; APPEND
24    (CONST 4)                           ; 1
25    L25
25    (PUSH)
26    (NIL&PUSH)
27    (CALL 3 5)                          ; SIMPTIMES
30    (SKIP&RET 5)
32    L32
32    (CONST&PUSH 0)                      ; (MTIMES)
33    (LOAD&CONS&STORE 2)
35    (LOAD&JMPIFNOT 0 L11)
38    L38
38    (CONST&PUSH 1)                      ; (MEXPT SIMP)
39    (CONST&PUSH 2)                      ; $%E
40    (LOAD&PUSH 2)
41    (NIL&PUSH)
42    (CALL2&PUSH 3)                      ; ADDN
44    (LIST 3)
46    (STORE 0)
47    (LOAD&JMPIF 0 L14)
50    L50
50    (LOAD&PUSH 2)
51    (CONST 4)                           ; 1
52    (JMP L25)
54    L54
54    (POP)
55    (SKIP&RET 4)
57    L57
57    (LOAD&PUSH 1)
58    (LOAD&CONS&STORE 2)
60    (JMP L79)
62    L62
62    (CONST&PUSH 6)                      ; %LOG
63    (LOAD&CAR&PUSH 5)
65    (CALL2&JMPIFNOT 7 L75)              ; AMONG
68    (LOAD&CAR&PUSH 4)
70    (CALL1 8)                           ; MNLOGP
72    (STORE 1)
73    (JMPIF L57)
75    L75
75    (LOAD&CAR&PUSH 4)
77    (LOAD&CONS&STORE 0)
79    L79
79    (LOAD&CDR&STORE 4)
81    (LOAD&JMPIFNOT 4 L5)
85    (JMP L62)


Disassembly of function #:|(DEFUN %ETOLOG (POT) ...)-158|
(CONST 0) = %ETOLOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE %ETOLOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ETOLOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; %ETOLOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE %ETOLOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; %ETOLOG
8     (SKIP&RET 1)


Disassembly of function %ETOLOG
(CONST 0) = MNLOGP
(CONST 1) = MPLUS
(CONST 2) = MNLOG
(CONST 3) = (MEXPT SIMP)
(CONST 4) = $%E
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; MNLOGP
3     (JMPIF1 L24)
5     (LOAD 1)
6     (CAR)
7     (CAR&PUSH)
8     (JMPIFEQTO 1 L18)                   ; MPLUS
11    (CONST&PUSH 3)                      ; (MEXPT SIMP)
12    (CONST&PUSH 4)                      ; $%E
13    (LOAD&PUSH 3)
14    (LIST 3)
16    (SKIP&RET 2)
18    L18
18    (LOAD&CDR&PUSH 1)
20    (CALL1 2)                           ; MNLOG
22    (SKIP&RET 2)
24    L24
24    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ZERORES (R1 R2) ...)-159|
(CONST 0) = ZERORES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZERORES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZERORES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZERORES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZERORES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZERORES
8     (SKIP&RET 1)


Disassembly of function ZERORES
(CONST 0) = $BFLOATP
(CONST 1) = BIGFLOATZERO
(CONST 2) = 0.0
(CONST 3) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BIGFLOATZERO)
16 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&JMPIF 0 L19)                 ; $BFLOATP
4     (LOAD&PUSH 1)
5     (CALL1&JMPIF 0 L19)                 ; $BFLOATP
8     (LOAD&PUSH 2)
9     (CALLS2&JMPIF 15 L23)               ; FLOATP
12    (LOAD&PUSH 1)
13    (CALLS2&JMPIF 15 L23)               ; FLOATP
16    (CONST 3)                           ; 0
17    (SKIP&RET 3)
19    L19
19    (GETVALUE 1)                        ; BIGFLOATZERO
21    (SKIP&RET 3)
23    L23
23    (CONST 2)                           ; 0.0
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $ORDERLESSP (A B) ...)-160|
(CONST 0) = $ORDERLESSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ORDERLESSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ORDERLESSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ORDERLESSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ORDERLESSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ORDERLESSP
8     (SKIP&RET 1)


Disassembly of function $ORDERLESSP
(CONST 0) = SPECREPCHECK
(CONST 1) = ALIKE1
(CONST 2) = GREAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1 0)                           ; SPECREPCHECK
3     (STORE 2)
4     (LOAD&PUSH 1)
5     (CALL1 0)                           ; SPECREPCHECK
7     (STORE 1)
8     (LOAD&PUSH 2)
9     (LOAD&PUSH 2)
10    (CALL2 1)                           ; ALIKE1
12    (NOT)
13    (JMPIFNOT1 L24)
15    (LOAD&PUSH 1)
16    (LOAD&PUSH 3)
17    (CALL2 2)                           ; GREAT
19    (JMPIFNOT1 L24)
21    (T)
22    (SKIP&RET 3)
24    L24
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $ORDERGREATP (A B) ...)-161|
(CONST 0) = $ORDERGREATP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ORDERGREATP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ORDERGREATP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ORDERGREATP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ORDERGREATP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ORDERGREATP
8     (SKIP&RET 1)


Disassembly of function $ORDERGREATP
(CONST 0) = SPECREPCHECK
(CONST 1) = ALIKE1
(CONST 2) = GREAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1 0)                           ; SPECREPCHECK
3     (STORE 2)
4     (LOAD&PUSH 1)
5     (CALL1 0)                           ; SPECREPCHECK
7     (STORE 1)
8     (LOAD&PUSH 2)
9     (LOAD&PUSH 2)
10    (CALL2 1)                           ; ALIKE1
12    (NOT)
13    (JMPIFNOT1 L24)
15    (LOAD&PUSH 2)
16    (LOAD&PUSH 2)
17    (CALL2 2)                           ; GREAT
19    (JMPIFNOT1 L24)
21    (T)
22    (SKIP&RET 3)
24    L24
24    (SKIP&RET 3)


Disassembly of function #:|(DEFUN EVNUMP (N) ...)-162|
(CONST 0) = EVNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVNUMP
8     (SKIP&RET 1)


Disassembly of function EVNUMP
(CONST 0) = EVEN
(CONST 1) = RATNUMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; EVEN
3     (JMPIF1 L17)
5     (LOAD&PUSH 1)
6     (CALL1 1)                           ; RATNUMP
8     (JMPIFNOT1 L17)
10    (LOAD 1)
11    (CDR)
12    (CAR&PUSH)
13    (CALL1 0)                           ; EVEN
15    (SKIP&RET 2)
17    L17
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ODNUMP (N) ...)-163|
(CONST 0) = ODNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ODNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ODNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ODNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ODNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ODNUMP
8     (SKIP&RET 1)


Disassembly of function ODNUMP
(CONST 0) = RATNUMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 12 L9)             ; INTEGERP
4     (LOAD&PUSH 1)
5     (CALLS2 148)                        ; ODDP
7     (JMPIF1 L21)
9     L9
9     (LOAD&PUSH 1)
10    (CALL1 0)                           ; RATNUMP
12    (JMPIFNOT1 L21)
14    (LOAD 1)
15    (CDR)
16    (CAR&PUSH)
17    (CALLS2 148)                        ; ODDP
19    (SKIP&RET 2)
21    L21
21    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIMPLEXPON (E) ...)-164|
(CONST 0) = SIMPLEXPON
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPLEXPON>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPLEXPON
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPLEXPON
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPLEXPON>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPLEXPON
8     (SKIP&RET 1)


Disassembly of function SIMPLEXPON
(CONST 0) = MAXIMA-INTEGERP
(CONST 1) = $DOMAIN
(CONST 2) = $REAL
(CONST 3) = RATNUMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($DOMAIN)
18 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; MAXIMA-INTEGERP
3     (JMPIF1 L24)
5     (GETVALUE&PUSH 1)                   ; $DOMAIN
7     (CONST 2)                           ; $REAL
8     (EQ)
9     (JMPIFNOT1 L24)
11    (LOAD&PUSH 1)
12    (CALL1 3)                           ; RATNUMP
14    (JMPIFNOT1 L24)
16    (LOAD 1)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CALLS2 148)                        ; ODDP
22    (SKIP&RET 2)
24    L24
24    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NONEG (P) ...)-165|
(CONST 0) = NONEG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NONEG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NONEG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NONEG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NONEG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NONEG
8     (SKIP&RET 1)


Disassembly of function NONEG
(CONST 0) = $%I
(CONST 1) = FREE
(CONST 2) = $SIGN
(CONST 3) = ($POS $PZ $ZERO)
(CONST 4) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; $%I
2     (CALL2 1)                           ; FREE
4     (JMPIFNOT1 L14)
6     (LOAD&PUSH 1)
7     (CALL1&PUSH 2)                      ; $SIGN
9     (CONST&PUSH 3)                      ; ($POS $PZ $ZERO)
10    (CALL2 4)                           ; MEMQ
12    (SKIP&RET 2)
14    L14
14    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RADMABS (E) ...)-166|
(CONST 0) = RADMABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RADMABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RADMABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RADMABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RADMABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RADMABS
8     (SKIP&RET 1)


Disassembly of function RADMABS
(CONST 0) = LIMITP
(CONST 1) = $%I
(CONST 2) = FREE
(CONST 3) = ASKSIGN-P-OR-N
(CONST 4) = (MABS)
(CONST 5) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LIMITP)
14 byte-code instructions:
0     (GETVALUE 0)                        ; LIMITP
2     (JMPIFNOT L12)
4     (LOAD&PUSH 1)
5     (CONST&PUSH 1)                      ; $%I
6     (CALL2&JMPIFNOT 2 L12)              ; FREE
9     (LOAD&PUSH 1)
10    (CALL1 3)                           ; ASKSIGN-P-OR-N
12    L12
12    (CONST&PUSH 4)                      ; (MABS)
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (T&PUSH)
17    (CALL2 5)                           ; SIMPLIFYA
19    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SIMPMQAPPLY (EXP Y Z) ...)-167|
(CONST 0) = SIMPMQAPPLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPMQAPPLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPMQAPPLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPMQAPPLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPMQAPPLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPMQAPPLY
8     (SKIP&RET 1)


Disassembly of function SIMPMQAPPLY
(CONST 0) = Y
(CONST 1) = SPECSIMP
(CONST 2) = SIMPARGS
(CONST 3) = SIMPLIFYA
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (Y)
54 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; Y
3     (LOAD 6)
4     (CDR)
5     (CAR&PUSH)
6     (CALLS2&JMPIFNOT 4 L19)             ; CONSP
9     (LOAD 6)
10    (CDR)
11    (CAR)
12    (CAR)
13    (CAR&PUSH)
14    (CONST&PUSH 1)                      ; SPECSIMP
15    (PUSH-UNBOUND 1)
17    (CALLS2 132)                        ; GET
19    L19
19    (PUSH)
20    (NIL&PUSH)
21    (LOAD&JMPIF 1 L40)
24    (LOAD&PUSH 8)
25    (LOAD&PUSH 7)
26    (CALL2 2)                           ; SIMPARGS
28    (STORE 0)
29    (CDR)
30    (CAR&PUSH)
31    (CALLS2&JMPIF 6 L51)                ; SYMBOLP
34    (POP)
35    (SKIP 1)
37    L37
37    (UNBIND1)
38    (SKIP&RET 4)
40    L40
40    (PUSH)
41    (LOAD&PUSH 9)
42    (GETVALUE&PUSH 0)                   ; Y
44    (LOAD&PUSH 9)
45    (FUNCALL 3)
47    (SKIP 2)
49    (JMP L37)
51    L51
51    (LOAD 0)
52    (CDR)
53    (CAR&PUSH)
54    (LOAD 1)
55    (CAR)
56    (CDR)
57    (CONS&PUSH)
58    (LOAD 1)
59    (CDR)
60    (CDR)
61    (CONS&PUSH)
62    (LOAD&PUSH 7)
63    (CALL2 3)                           ; SIMPLIFYA
65    (SKIP 2)
67    (JMP L37)


Disassembly of function #:|(DEFMFUN DECL-COMPLEXP (E) ...)-168|
(CONST 0) = DECL-COMPLEXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DECL-COMPLEXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DECL-COMPLEXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DECL-COMPLEXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DECL-COMPLEXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DECL-COMPLEXP
8     (SKIP&RET 1)


Disassembly of function DECL-COMPLEXP
(CONST 0) = $COMPLEX
(CONST 1) = KINDP
(CONST 2) = $REAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 6)                          ; SYMBOLP
3     (JMPIFNOT1 L18)
5     (LOAD&PUSH 1)
6     (CONST&PUSH 0)                      ; $COMPLEX
7     (CALL2 1)                           ; KINDP
9     (JMPIFNOT1 L18)
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $REAL
13    (CALL2 1)                           ; KINDP
15    (NOT)
16    (SKIP&RET 2)
18    L18
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN DECL-REALP (E) ...)-169|
(CONST 0) = DECL-REALP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DECL-REALP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DECL-REALP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DECL-REALP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DECL-REALP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DECL-REALP
8     (SKIP&RET 1)


Disassembly of function DECL-REALP
(CONST 0) = $REAL
(CONST 1) = KINDP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 6)                          ; SYMBOLP
3     (JMPIFNOT1 L11)
5     (LOAD&PUSH 1)
6     (CONST&PUSH 0)                      ; $REAL
7     (CALL2 1)                           ; KINDP
9     (SKIP&RET 2)
11    L11
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN GREAT (X Y) ...)-170|
(CONST 0) = GREAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GREAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GREAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GREAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GREAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GREAT
8     (SKIP&RET 1)


Disassembly of function GREAT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = CONSTANT
(CONST 3) = ALPHALESSP
(CONST 4) = $SCALAR
(CONST 5) = MGET
(CONST 6) = MAXIMA-CONSTANTP
(CONST 7) = $MAINVAR
(CONST 8) = ORDFNA
(CONST 9) = RAT
(CONST 10) = (MBOX MLABOX)
(CONST 11) = MEMQ
(CONST 12) = (MBOX MLABOX)
(CONST 13) = (MTIMES MPLUS MEXPT %DEL)
(CONST 14) = (MTIMES MPLUS MEXPT %DEL)
(CONST 15) = ORDFN
(CONST 16) = BIGFLOAT
(CONST 17) = MGRP
(CONST 18) = MARGS
(CONST 19) = MOP
(CONST 20) = ALIKE1
(CONST 21) = ARRAY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (Y)
235 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (JMPIFATOM L189)
11    (GETVALUE 1)                        ; Y
13    (JMPIFATOM L258)
16    (GETVALUE 0)                        ; X
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFEQTO 9 L297)                  ; RAT
24    (GETVALUE 1)                        ; Y
26    (CAR)
27    (CAR&PUSH)
28    (CONST 9)                           ; RAT
29    (EQ)
30    (JMPIF1 L412)
33    (GETVALUE 0)                        ; X
35    (CAR)
36    (CAR&PUSH)
37    (CONST&PUSH 10)                     ; (MBOX MLABOX)
38    (CALL2&JMPIF 11 L308)               ; MEMQ
42    (GETVALUE 1)                        ; Y
44    (CAR)
45    (CAR&PUSH)
46    (CONST&PUSH 12)                     ; (MBOX MLABOX)
47    (CALL2&JMPIF 11 L316)               ; MEMQ
51    (GETVALUE 0)                        ; X
53    (CAR)
54    (CAR&PUSH)
55    (CONST&PUSH 13)                     ; (MTIMES MPLUS MEXPT %DEL)
56    (CALL2&JMPIF 11 L329)               ; MEMQ
60    (GETVALUE 1)                        ; Y
62    (CAR)
63    (CAR&PUSH)
64    (CONST&PUSH 14)                     ; (MTIMES MPLUS MEXPT %DEL)
65    (CALL2&JMPIF 11 L329)               ; MEMQ
69    (GETVALUE 0)                        ; X
71    (CAR)
72    (CAR&PUSH)
73    (JMPIFNOTEQTO 16 L84)               ; BIGFLOAT
76    (GETVALUE 1)                        ; Y
78    (CAR)
79    (CAR&PUSH)
80    (JMPIFEQTO 16 L338)                 ; BIGFLOAT
84    L84
84    (GETVALUE&PUSH 0)                   ; X
86    (CALL1&PUSH 18)                     ; MARGS
88    (GETVALUE&PUSH 1)                   ; Y
90    (CALL1&PUSH 18)                     ; MARGS
92    (LOAD&JMPIFNOT 1 L374)
96    L96
96    (LOAD&JMPIF 0 L357)
100   L100
100   (T)
101   (SKIP 2)
103   (JMP L412)
106   L106
106   (GETVALUE&PUSH 0)                   ; X
108   (CALLS2 15)                         ; FLOATP
110   (JMP L412)
113   L113
113   (GETVALUE 0)                        ; X
115   (BIND 0)                            ; X
117   (GETVALUE 1)                        ; Y
119   (BIND 1)                            ; Y
121   (GETVALUE&PUSH 0)                   ; X
123   (GETVALUE&PUSH 1)                   ; Y
125   (CALLSR 1 54)                       ; -
128   (UNBIND 2)
130   (SETVALUE 1)                        ; Y
132   (PUSH)
133   (CALLS2&JMPIF 145 L106)             ; ZEROP
136   (GETVALUE&PUSH 1)                   ; Y
138   (CALLS2 146)                        ; PLUSP
140   (JMP L412)
143   L143
143   (GETVALUE&PUSH 1)                   ; Y
145   (CALLS2&JMPIF 8 L113)               ; NUMBERP
148   (NIL)
149   (JMP L412)
152   L152
152   (GETVALUE&PUSH 1)                   ; Y
154   (CALL1&JMPIF 2 L239)                ; CONSTANT
158   (GETVALUE&PUSH 1)                   ; Y
160   (CALLS2 8)                          ; NUMBERP
162   (JMP L412)
165   L165
165   (GETVALUE&PUSH 1)                   ; Y
167   (CONST&PUSH 4)                      ; $SCALAR
168   (CALL2&JMPIF 5 L239)                ; MGET
172   (GETVALUE&PUSH 1)                   ; Y
174   (CALL1 6)                           ; MAXIMA-CONSTANTP
176   (JMP L412)
179   L179
179   (GETVALUE&PUSH 1)                   ; Y
181   (CONST&PUSH 7)                      ; $MAINVAR
182   (CALL2&JMPIF 5 L239)                ; MGET
185   (T)
186   (JMP L412)
189   L189
189   (GETVALUE 1)                        ; Y
191   (JMPIFCONSP L248)
193   (GETVALUE&PUSH 0)                   ; X
195   (CALLS2&JMPIF 8 L143)               ; NUMBERP
198   (GETVALUE&PUSH 0)                   ; X
200   (CALL1&JMPIF 2 L152)                ; CONSTANT
203   (GETVALUE&PUSH 0)                   ; X
205   (CONST&PUSH 4)                      ; $SCALAR
206   (CALL2&JMPIF 5 L165)                ; MGET
209   (GETVALUE&PUSH 0)                   ; X
211   (CONST&PUSH 7)                      ; $MAINVAR
212   (CALL2&JMPIF 5 L179)                ; MGET
215   (GETVALUE&PUSH 1)                   ; Y
217   (CALL1 6)                           ; MAXIMA-CONSTANTP
219   (JMPIF1 L412)
222   (GETVALUE&PUSH 1)                   ; Y
224   (CONST&PUSH 4)                      ; $SCALAR
225   (CALL2 5)                           ; MGET
227   (JMPIF1 L412)
230   (GETVALUE&PUSH 1)                   ; Y
232   (CONST&PUSH 7)                      ; $MAINVAR
233   (CALL2 5)                           ; MGET
235   (NOT)
236   (JMPIFNOT1 L412)
239   L239
239   (GETVALUE&PUSH 1)                   ; Y
241   (GETVALUE&PUSH 0)                   ; X
243   (CALL2 3)                           ; ALPHALESSP
245   (JMP L412)
248   L248
248   (GETVALUE&PUSH 1)                   ; Y
250   (GETVALUE&PUSH 0)                   ; X
252   (CALL2 8)                           ; ORDFNA
254   (NOT)
255   (JMP L412)
258   L258
258   (GETVALUE&PUSH 0)                   ; X
260   (GETVALUE&PUSH 1)                   ; Y
262   (CALL2 8)                           ; ORDFNA
264   (JMP L412)
267   L267
267   (GETVALUE 1)                        ; Y
269   (CDR)
270   (CDR)
271   (CAR&PUSH)
272   (GETVALUE 0)                        ; X
274   (CDR)
275   (CAR&PUSH)
276   (CALLSR&PUSH 2 55)                  ; *
279   (GETVALUE 0)                        ; X
281   (CDR)
282   (CDR)
283   (CAR&PUSH)
284   (GETVALUE 1)                        ; Y
286   (CDR)
287   (CAR&PUSH)
288   (CALLSR&PUSH 2 55)                  ; *
291   (CALLSR 1 48)                       ; >
294   (JMP L412)
297   L297
297   (GETVALUE 1)                        ; Y
299   (CAR)
300   (CAR&PUSH)
301   (JMPIFEQTO 9 L267)                  ; RAT
304   (NIL)
305   (JMP L412)
308   L308
308   (GETVALUE 0)                        ; X
310   (CDR)
311   (CAR&PUSH)
312   (GETVALUE 1)                        ; Y
314   (JMP L322)
316   L316
316   (GETVALUE&PUSH 0)                   ; X
318   (GETVALUE 1)                        ; Y
320   (CDR)
321   (CAR)
322   L322
322   (PUSH)
323   (JSR L0)
326   (JMP L412)
329   L329
329   (GETVALUE&PUSH 0)                   ; X
331   (GETVALUE&PUSH 1)                   ; Y
333   (CALL2 15)                          ; ORDFN
335   (JMP L412)
338   L338
338   (GETVALUE&PUSH 0)                   ; X
340   (GETVALUE&PUSH 1)                   ; Y
342   (CALL2 17)                          ; MGRP
344   (JMP L412)
347   L347
347   (GETVALUE&PUSH 0)                   ; X
349   (CALL1&PUSH 19)                     ; MOP
351   (GETVALUE&PUSH 1)                   ; Y
353   (CALL1 19)                          ; MOP
355   (JMP L406)
357   L357
357   (LOAD&CAR&PUSH 1)
359   (LOAD&CAR&PUSH 1)
361   (CALL2&JMPIFNOT 20 L402)            ; ALIKE1
364   (LOAD&CDR&PUSH 1)
366   (LOAD&CDR&STORE 1)
368   (POP&STORE 1)
370   (LOAD&JMPIF 1 L96)
374   L374
374   (LOAD&JMPIF 0 L397)
377   (GETVALUE&PUSH 0)                   ; X
379   (CALL1&PUSH 19)                     ; MOP
381   (GETVALUE&PUSH 1)                   ; Y
383   (CALL1&PUSH 19)                     ; MOP
385   (CALL2&JMPIFNOT 20 L347)            ; ALIKE1
388   (CONST&PUSH 21)                     ; ARRAY
389   (GETVALUE 0)                        ; X
391   (CAR)
392   (CDR&PUSH)
393   (CALL2&JMPIF 11 L100)               ; MEMQ
397   L397
397   (NIL)
398   (SKIP 2)
400   (JMP L412)
402   L402
402   (LOAD&CAR&PUSH 1)
404   (LOAD 1)
405   (CAR)
406   L406
406   (PUSH)
407   (JSR L0)
410   (SKIP 2)
412   L412
412   (UNBIND 2)
414   (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO MEMQARR (L) ...)-171|
(CONST 0) = MEMQARR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEMQARR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEMQARR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEMQARR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEMQARR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MEMQARR
10    (SKIP&RET 1)


Disassembly of function MEMQARR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = IF
(CONST 3) = MEMQ
(CONST 4) = 'ARRAY
(CONST 5) = (T)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L22)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; IF
12    (CONST&PUSH 3)                      ; MEMQ
13    (CONST&PUSH 4)                      ; 'ARRAY
14    (LOAD&PUSH 3)
15    (LIST&PUSH 3)
17    (CONST 5)                           ; (T)
18    (LIST* 2)
20    (SKIP&RET 4)
22    L22
22    (LOAD&PUSH 2)
23    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
25    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN ALIKE1 (X Y) ...)-172|
(CONST 0) = ALIKE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALIKE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALIKE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALIKE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALIKE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALIKE1
8     (SKIP&RET 1)


Disassembly of function ALIKE1
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ARRAY
(CONST 3) = MEMQ
(CONST 4) = ALIKE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
65 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE 1)                        ; Y
10    (EQ)
11    (JMPIF1 L76)
13    (GETVALUE 0)                        ; X
15    (JMPIFATOM L80)
17    (GETVALUE 1)                        ; Y
19    (JMPIFATOM L88)
22    (GETVALUE 0)                        ; X
24    (CAR&PUSH)
25    (CALLS2 4)                          ; CONSP
27    (JMPIFNOT1 L76)
29    (GETVALUE 1)                        ; Y
31    (CAR&PUSH)
32    (CALLS2 4)                          ; CONSP
34    (JMPIFNOT1 L76)
36    (GETVALUE 0)                        ; X
38    (CAR)
39    (CAR&PUSH)
40    (GETVALUE 1)                        ; Y
42    (CAR)
43    (CAR)
44    (EQ)
45    (JMPIFNOT1 L76)
47    (CONST&PUSH 2)                      ; ARRAY
48    (GETVALUE 0)                        ; X
50    (CAR)
51    (CDR&PUSH)
52    (CALL2&JMPIFNOT 3 L56)              ; MEMQ
55    (T)
56    L56
56    (PUSH)
57    (CONST&PUSH 2)                      ; ARRAY
58    (GETVALUE 1)                        ; Y
60    (CAR)
61    (CDR&PUSH)
62    (CALL2&JMPIF 3 L91)                 ; MEMQ
65    (EQ)
66    (JMPIFNOT1 L76)
68    L68
68    (GETVALUE 0)                        ; X
70    (CDR&PUSH)
71    (GETVALUE 1)                        ; Y
73    (CDR&PUSH)
74    (CALL2 4)                           ; ALIKE
76    L76
76    (UNBIND 2)
78    (SKIP&RET 3)
80    L80
80    (GETVALUE&PUSH 0)                   ; X
82    (GETVALUE&PUSH 1)                   ; Y
84    (CALLS2 2)                          ; EQUAL
86    (JMP L76)
88    L88
88    (NIL)
89    (JMP L76)
91    L91
91    (T)
92    (EQ)
93    (JMPIFNOT1 L76)
95    (JMP L68)


Disassembly of function #:|(DEFMFUN ALIKE (X Y) ...)-173|
(CONST 0) = ALIKE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALIKE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALIKE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALIKE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALIKE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALIKE
8     (SKIP&RET 1)


Disassembly of function ALIKE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ALIKE1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variables : (X Y)
38 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (BIND 0)                            ; X
10    (GETVALUE 1)                        ; Y
12    (BIND 1)                            ; Y
14    (JMP L45)
16    L16
16    (NIL)
17    (UNBIND 2)
19    (JMP L57)
21    L21
21    (GETVALUE 1)                        ; Y
23    (JMPIFATOM L16)
25    (GETVALUE 0)                        ; X
27    (CAR&PUSH)
28    (GETVALUE 1)                        ; Y
30    (CAR&PUSH)
31    (CALL2&JMPIFNOT 2 L16)              ; ALIKE1
34    (GETVALUE 0)                        ; X
36    (CDR&PUSH)
37    (GETVALUE 1)                        ; Y
39    (CDR)
40    (SETVALUE 1)                        ; Y
42    (POP)
43    (SETVALUE 0)                        ; X
45    L45
45    (GETVALUE 0)                        ; X
47    (JMPIFCONSP L21)
49    (GETVALUE&PUSH 0)                   ; X
51    (GETVALUE&PUSH 1)                   ; Y
53    (CALLS2 2)                          ; EQUAL
55    (UNBIND 2)
57    L57
57    (UNBIND 2)
59    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ORDFNA (E A) ...)-174|
(CONST 0) = ORDFNA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDFNA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDFNA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDFNA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDFNA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDFNA
8     (SKIP&RET 1)


Disassembly of function ORDFNA
(CONST 0) = RAT
(CONST 1) = CONSTANT
(CONST 2) = (MPLUS MTIMES MEXPT)
(CONST 3) = MEMQ
(CONST 4) = (RAT BIGFLOAT)
(CONST 5) = MARGS
(CONST 6) = MEXPT
(CONST 7) = MAXIMA-CONSTANTP
(CONST 8) = FREE
(CONST 9) = GREAT
(CONST 10) = 1
(CONST 11) = (MPLUS MTIMES)
(CONST 12) = ORDHACK
(CONST 13) = %DEL
(CONST 14) = (MPLUS MTIMES)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
152 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L57)                ; NUMBERP
4     (LOAD&PUSH 1)
5     (CALL1&JMPIFNOT 1 L16)              ; CONSTANT
8     (LOAD 2)
9     (CAR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; (MPLUS MTIMES MEXPT)
12    (CALL2&JMPIFNOT 3 L82)              ; MEMQ
16    L16
16    (LOAD&PUSH 2)
17    (CALL1&JMPIFNOT 5 L91)              ; MARGS
21    (LOAD 2)
22    (CAR)
23    (CAR&PUSH)
24    (JMPIFNOTEQTO 6 L152)               ; MEXPT
28    (LOAD 2)
29    (CDR)
30    (CAR&PUSH)
31    (CALL1&JMPIFNOT 7 L45)              ; MAXIMA-CONSTANTP
34    (LOAD&PUSH 1)
35    (CALL1&JMPIFNOT 1 L94)              ; CONSTANT
38    (LOAD 2)
39    (CDR)
40    (CDR)
41    (CAR&PUSH)
42    (CALL1&JMPIFNOT 7 L94)              ; MAXIMA-CONSTANTP
45    L45
45    (LOAD 2)
46    (CDR)
47    (CAR&PUSH)
48    (LOAD 2)
49    (JMPIFEQ L109)
51    (LOAD 2)
52    L52
52    (CDR)
53    (CAR)
54    (JMP L186)
57    L57
57    (LOAD 2)
58    (CAR)
59    (CAR&PUSH)
60    (CONST 0)                           ; RAT
61    (EQ)
62    (NOT)
63    (JMPIF1 L193)
66    (LOAD 2)
67    (CDR)
68    (CAR&PUSH)
69    (LOAD 3)
70    (CDR)
71    (CDR)
72    (CAR&PUSH)
73    (LOAD&PUSH 3)
74    (CALLSR&PUSH 2 55)                  ; *
77    (CALLSR 1 48)                       ; >
80    (SKIP&RET 3)
82    L82
82    (LOAD 2)
83    (CAR)
84    (CAR&PUSH)
85    (CONST&PUSH 4)                      ; (RAT BIGFLOAT)
86    (CALL2 3)                           ; MEMQ
88    (NOT)
89    (SKIP&RET 3)
91    L91
91    (NIL)
92    (SKIP&RET 3)
94    L94
94    (LOAD 2)
95    (CDR)
96    (CDR)
97    (CAR&PUSH)
98    (LOAD&PUSH 2)
99    (CALL2 8)                           ; FREE
101   (NOT)
102   (JMPIF1 L193)
105   (LOAD 2)
106   (CDR)
107   (JMP L52)
109   L109
109   (LOAD 2)
110   (CDR)
111   (CDR)
112   (CAR&PUSH)
113   (CONST 10)                          ; 1
114   (JMP L188)
117   L117
117   (LOAD&PUSH 2)
118   (PUSH-UNBOUND 1)
120   (CALLS1 156)                        ; LAST
122   (CAR&PUSH)
123   (LOAD&PUSH 0)
124   (LOAD 3)
125   (JMPIFNOTEQ L144)
127   (LOAD&PUSH 3)
128   (CALL1 12)                          ; ORDHACK
130   (NOT)
131   (SKIP&RET 4)
133   L133
133   (LOAD&PUSH 2)
134   (PUSH-UNBOUND 1)
136   (CALLS1 156)                        ; LAST
138   (CAR&PUSH)
139   (LOAD&PUSH 0)
140   (LOAD 3)
141   (EQ)
142   (JMPIF1 L150)
144   L144
144   (LOAD&PUSH 0)
145   (LOAD&PUSH 3)
146   (CALL2 9)                           ; GREAT
148   (SKIP&RET 4)
150   L150
150   (SKIP&RET 4)
152   L152
152   (LOAD 2)
153   (CAR)
154   (CAR&PUSH)
155   (CONST&PUSH 11)                     ; (MPLUS MTIMES)
156   (CALL2&JMPIF 3 L117)                ; MEMQ
159   (LOAD 2)
160   (CAR)
161   (CAR&PUSH)
162   (CONST 13)                          ; %DEL
163   (EQ)
164   (JMPIF1 L193)
166   (LOAD&PUSH 2)
167   (CALL1 5)                           ; MARGS
169   (CAR)
170   (STORE 2)
171   (JMPIFATOM L180)
173   (LOAD 2)
174   (CAR)
175   (CAR&PUSH)
176   (CONST&PUSH 14)                     ; (MPLUS MTIMES)
177   (CALL2&JMPIF 3 L133)                ; MEMQ
180   L180
180   (LOAD&PUSH 2)
181   (LOAD 2)
182   (EQ)
183   (JMPIF1 L193)
185   (LOAD 2)
186   L186
186   (PUSH)
187   (LOAD 2)
188   L188
188   (PUSH)
189   (CALL2 9)                           ; GREAT
191   (SKIP&RET 3)
193   L193
193   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ORDLIST (A B CX ...) ...)-175|
(CONST 0) = ORDLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDLIST
8     (SKIP&RET 1)


Disassembly of function ORDLIST
(CONST 0) = 0
(CONST 1) = MPLUS
(CONST 2) = 1
(CONST 3) = GREAT
(CONST 4) = NTHELEM
(CONST 5) = ALIKE1
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
72 byte-code instructions:
0     L0
0     (PUSH-NIL 4)
2     (LOAD&PUSH 8)
3     (CALLS2&STORE 71 3)                 ; LENGTH
6     (LOAD&PUSH 7)
7     (CALLS2&STORE 71 2)                 ; LENGTH
10    L10
10    (LOAD&PUSH 3)
11    (CONST&PUSH 0)                      ; 0
12    (CALLSR&JMPIF 1 45 L62)             ; =
16    (LOAD&PUSH 2)
17    (CONST&PUSH 0)                      ; 0
18    (CALLSR&JMPIF 1 45 L81)             ; =
22    (LOAD&PUSH 3)
23    (LOAD&PUSH 9)
24    (CALL2 4)                           ; NTHELEM
26    (STORE 1)
27    (LOAD&PUSH 2)
28    (LOAD&PUSH 8)
29    (CALL2 4)                           ; NTHELEM
31    (STORE 0)
32    (LOAD&PUSH 1)
33    (LOAD&PUSH 1)
34    (CALL2&JMPIF 5 L91)                 ; ALIKE1
37    (LOAD&PUSH 1)
38    (LOAD 1)
39    L39
39    (PUSH)
40    (CALL2 3)                           ; GREAT
42    (SKIP&RET 9)
44    L44
44    (LOAD&PUSH 6)
45    (CONST 1)                           ; MPLUS
46    (EQ)
47    (SKIP&RET 9)
49    L49
49    (CONST 0)                           ; 0
50    (JMP L57)
52    L52
52    (LOAD&PUSH 6)
53    (JMPIFEQTO 1 L49)                   ; MPLUS
56    (CONST 2)                           ; 1
57    L57
57    (PUSH)
58    (LOAD 8)
59    (CAR)
60    (JMP L39)
62    L62
62    (LOAD&PUSH 2)
63    (CONST&PUSH 0)                      ; 0
64    (CALLSR&JMPIF 1 45 L44)             ; =
68    (LOAD&PUSH 6)
69    (LOAD 6)
70    (JMPIFNOTEQ L78)
72    (LOAD&PUSH 2)
73    (CONST&PUSH 2)                      ; 1
74    (CALLSR&JMPIF 1 45 L52)             ; =
78    L78
78    (NIL)
79    (SKIP&RET 9)
81    L81
81    (LOAD&PUSH 7)
82    (LOAD&PUSH 9)
83    (LOAD&PUSH 7)
84    (LOAD&PUSH 9)
85    (JSR L0)
88    (NOT)
89    (SKIP&RET 9)
91    L91
91    (LOAD&DEC&STORE 3)
93    (LOAD&DEC&STORE 2)
95    (JMP L10)


Disassembly of function #:|(DEFUN ORDFN (X Y) ...)-176|
(CONST 0) = ORDFN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDFN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDFN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDFN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDFN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDFN
8     (SKIP&RET 1)


Disassembly of function ORDFN
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = %DEL
(CONST 3) = GREAT
(CONST 4) = (MPLUS MTIMES)
(CONST 5) = MEMQ
(CONST 6) = (MPLUS MTIMES)
(CONST 7) = ORDLIST
(CONST 8) = ALIKE1
(CONST 9) = ORDHACK
(CONST 10) = MPLUS
(CONST 11) = MEXPT
(CONST 12) = MPLUSP
(CONST 13) = ORDMEXPT
(CONST 14) = (MPLUS MTIMES)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
105 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; X
8     (CAR)
9     (CAR&PUSH)
10    (GETVALUE 1)                        ; Y
12    (CAR)
13    (CAR&PUSH)
14    (NIL&PUSH)
15    (LOAD&PUSH 2)
16    (JMPIFEQTO 2 L89)                   ; %DEL
20    (LOAD&PUSH 1)
21    (JMPIFEQTO 2 L98)                   ; %DEL
25    (LOAD&PUSH 2)
26    (CONST&PUSH 4)                      ; (MPLUS MTIMES)
27    (CALL2&JMPIFNOT 5 L143)             ; MEMQ
31    (LOAD&PUSH 1)
32    (CONST&PUSH 6)                      ; (MPLUS MTIMES)
33    (CALL2&JMPIF 5 L103)                ; MEMQ
37    (GETVALUE&PUSH 0)                   ; X
39    (PUSH-UNBOUND 1)
41    (CALLS1 156)                        ; LAST
43    (CAR)
44    (STORE 0)
45    (PUSH)
46    (GETVALUE&PUSH 1)                   ; Y
48    (CALL2&JMPIF 8 L118)                ; ALIKE1
52    (LOAD&PUSH 2)
53    (JMPIFNOTEQTO 10 L68)               ; MPLUS
56    (LOAD&PUSH 1)
57    (JMPIFNOTEQTO 11 L68)               ; MEXPT
60    (GETVALUE 1)                        ; Y
62    (CDR)
63    (CAR&PUSH)
64    (CALL1&JMPIF 12 L152)               ; MPLUSP
68    L68
68    (LOAD&PUSH 0)
69    (GETVALUE 1)                        ; Y
71    L71
71    (PUSH)
72    (CALL2 3)                           ; GREAT
74    (SKIP 3)
76    (JMP L161)
79    L79
79    (GETVALUE 0)                        ; X
81    (CDR)
82    (CAR&PUSH)
83    (GETVALUE 1)                        ; Y
85    (CDR)
86    (CAR)
87    (JMP L71)
89    L89
89    (LOAD&PUSH 1)
90    (JMPIFEQTO 2 L79)                   ; %DEL
93    (T)
94    (SKIP 3)
96    (JMP L161)
98    L98
98    (NIL)
99    (SKIP 3)
101   (JMP L161)
103   L103
103   (GETVALUE 0)                        ; X
105   (CDR&PUSH)
106   (GETVALUE 1)                        ; Y
108   (CDR&PUSH)
109   (LOAD&PUSH 4)
110   (LOAD&PUSH 4)
111   (CALL 4 7)                          ; ORDLIST
114   (SKIP 3)
116   (JMP L161)
118   L118
118   (GETVALUE&PUSH 0)                   ; X
120   (CALL1 9)                           ; ORDHACK
122   (JMP L158)
124   L124
124   (GETVALUE&PUSH 1)                   ; Y
126   (GETVALUE&PUSH 0)                   ; X
128   (JSR L0)
131   (JMP L158)
133   L133
133   (GETVALUE&PUSH 0)                   ; X
135   (GETVALUE&PUSH 1)                   ; Y
137   (CALL2 13)                          ; ORDMEXPT
139   (SKIP 3)
141   (JMP L161)
143   L143
143   (LOAD&PUSH 1)
144   (CONST&PUSH 14)                     ; (MPLUS MTIMES)
145   (CALL2&JMPIF 5 L124)                ; MEMQ
148   (LOAD&PUSH 2)
149   (JMPIFEQTO 11 L133)                 ; MEXPT
152   L152
152   (GETVALUE&PUSH 1)                   ; Y
154   (GETVALUE&PUSH 0)                   ; X
156   (CALL2 13)                          ; ORDMEXPT
158   L158
158   (NOT)
159   (SKIP 3)
161   L161
161   (UNBIND 2)
163   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ORDHACK (X) ...)-177|
(CONST 0) = ORDHACK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDHACK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDHACK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDHACK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDHACK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDHACK
8     (SKIP&RET 1)


Disassembly of function ORDHACK
(CONST 0) = X
(CONST 1) = MPLUS
(CONST 2) = 0
(CONST 3) = 1
(CONST 4) = GREAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
29 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CDR)
7     (JMPIFNOT1 L32)
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CDR)
13    (CDR)
14    (NOT)
15    (JMPIFNOT1 L32)
17    (GETVALUE 0)                        ; X
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFEQTO 1 L35)                   ; MPLUS
24    (CONST 3)                           ; 1
25    L25
25    (PUSH)
26    (GETVALUE 0)                        ; X
28    (CDR)
29    (CAR&PUSH)
30    (CALL2 4)                           ; GREAT
32    L32
32    (UNBIND1)
33    (SKIP&RET 2)
35    L35
35    (CONST 2)                           ; 0
36    (JMP L25)


Disassembly of function #:|(DEFUN ORDMEXPT (X Y) ...)-178|
(CONST 0) = ORDMEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDMEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDMEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDMEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDMEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDMEXPT
8     (SKIP&RET 1)


Disassembly of function ORDMEXPT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = MEXPT
(CONST 3) = ALIKE1
(CONST 4) = GREAT
(CONST 5) = MAXIMA-CONSTANTP
(CONST 6) = MNUMP
(CONST 7) = SIMPLN1
(CONST 8) = 1
(CONST 9) = (%LOG)
(CONST 10) = SIMPLN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
177 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 1)                        ; Y
8     (CAR)
9     (CAR&PUSH)
10    (JMPIFNOTEQTO 2 L212)               ; MEXPT
14    (GETVALUE 0)                        ; X
16    (CDR)
17    (CAR&PUSH)
18    (GETVALUE 1)                        ; Y
20    (CDR)
21    (CAR&PUSH)
22    (CALL2&JMPIF 3 L111)                ; ALIKE1
26    (GETVALUE 0)                        ; X
28    (CDR)
29    (CAR&PUSH)
30    (CALL1&JMPIF 5 L75)                 ; MAXIMA-CONSTANTP
33    (GETVALUE 1)                        ; Y
35    (CDR)
36    (CAR&PUSH)
37    (CALL1&JMPIF 5 L125)                ; MAXIMA-CONSTANTP
41    (GETVALUE 0)                        ; X
43    (CDR)
44    (CDR)
45    (CAR&PUSH)
46    (CALL1&JMPIF 6 L135)                ; MNUMP
50    (GETVALUE 1)                        ; Y
52    (CDR)
53    (CDR)
54    (CAR&PUSH)
55    (CALL1&JMPIFNOT 6 L162)             ; MNUMP
59    (GETVALUE 0)                        ; X
61    L61
61    (PUSH)
62    (GETVALUE 1)                        ; Y
64    L64
64    (CDR)
65    (CAR)
66    (JMP L258)
69    L69
69    (GETVALUE 0)                        ; X
71    (CDR)
72    (CAR)
73    (JMP L61)
75    L75
75    (GETVALUE 1)                        ; Y
77    (CDR)
78    (CAR&PUSH)
79    (CALL1&JMPIFNOT 5 L121)             ; MAXIMA-CONSTANTP
82    (GETVALUE 0)                        ; X
84    (CDR)
85    (CDR)
86    (CAR&PUSH)
87    (GETVALUE 1)                        ; Y
89    (CDR)
90    (CDR)
91    (CAR&PUSH)
92    (CALL2&JMPIF 3 L69)                 ; ALIKE1
95    (GETVALUE 0)                        ; X
97    (CDR)
98    (CDR)
99    (CAR&PUSH)
100   (CALL1&JMPIFNOT 6 L111)             ; MNUMP
103   (GETVALUE 1)                        ; Y
105   (CDR)
106   (CDR)
107   (CAR&PUSH)
108   (CALL1&JMPIF 6 L69)                 ; MNUMP
111   L111
111   (GETVALUE 0)                        ; X
113   (CDR)
114   (CDR)
115   (CAR&PUSH)
116   (GETVALUE 1)                        ; Y
118   (CDR)
119   (JMP L64)
121   L121
121   (GETVALUE 0)                        ; X
123   (JMP L61)
125   L125
125   (GETVALUE 0)                        ; X
127   (JMP L238)
130   L130
130   (GETVALUE 1)                        ; Y
132   (JMP L64)
135   L135
135   (GETVALUE 0)                        ; X
137   (CDR)
138   (CAR&PUSH)
139   (GETVALUE 1)                        ; Y
141   (CDR)
142   (CDR)
143   (CAR&PUSH)
144   (CALL1&JMPIF 6 L130)                ; MNUMP
147   (GETVALUE 1)                        ; Y
149   (JMP L258)
152   L152
152   (GETVALUE 0)                        ; X
154   (CDR)
155   (CAR&PUSH)
156   (GETVALUE 1)                        ; Y
158   (CDR)
159   (CAR)
160   (JMP L177)
162   L162
162   (GETVALUE&PUSH 0)                   ; X
164   (CALL1&PUSH 7)                      ; SIMPLN1
166   (GETVALUE&PUSH 1)                   ; Y
168   (CALL1&PUSH 7)                      ; SIMPLN1
170   (LOAD&PUSH 1)
171   (LOAD&PUSH 1)
172   (CALL2&JMPIF 3 L152)                ; ALIKE1
175   (LOAD&PUSH 1)
176   (LOAD 1)
177   L177
177   (PUSH)
178   (CALL2 4)                           ; GREAT
180   (SKIP 2)
182   (JMP L261)
185   L185
185   (T)
186   (JMP L261)
189   L189
189   (GETVALUE 0)                        ; X
191   (CDR)
192   (CDR)
193   (CAR&PUSH)
194   (GETVALUE&PUSH 1)                   ; Y
196   (CALL2&JMPIF 3 L185)                ; ALIKE1
199   (GETVALUE 0)                        ; X
201   (CDR)
202   (JMP L238)
204   L204
204   (GETVALUE 0)                        ; X
206   (CDR)
207   (CDR)
208   (CAR&PUSH)
209   (CONST 8)                           ; 1
210   (JMP L258)
212   L212
212   (GETVALUE 0)                        ; X
214   (CDR)
215   (CAR&PUSH)
216   (CALL1&JMPIF 5 L189)                ; MAXIMA-CONSTANTP
219   (GETVALUE 0)                        ; X
221   (CDR)
222   (CAR&PUSH)
223   (GETVALUE&PUSH 1)                   ; Y
225   (CALL2&JMPIF 3 L204)                ; ALIKE1
228   (GETVALUE 0)                        ; X
230   (CDR)
231   (CDR)
232   (CAR&PUSH)
233   (CALL1&JMPIFNOT 6 L244)             ; MNUMP
236   (GETVALUE 0)                        ; X
238   L238
238   (CDR)
239   (CAR&PUSH)
240   (GETVALUE 1)                        ; Y
242   (JMP L258)
244   L244
244   (GETVALUE&PUSH 0)                   ; X
246   (CALL1&PUSH 7)                      ; SIMPLN1
248   (CONST&PUSH 9)                      ; (%LOG)
249   (GETVALUE&PUSH 1)                   ; Y
251   (LIST&PUSH 2)
253   (CONST&PUSH 8)                      ; 1
254   (T&PUSH)
255   (CALL 3 10)                         ; SIMPLN
258   L258
258   (PUSH)
259   (CALL2 4)                           ; GREAT
261   L261
261   (UNBIND 2)
263   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $MULTTHRU NARGS ...)-179|
(CONST 0) = $MULTTHRU
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MULTTHRU>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MULTTHRU
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MULTTHRU
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MULTTHRU>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MULTTHRU
8     (SKIP&RET 1)


Disassembly of function $MULTTHRU
(CONST 0) = 2
(CONST 1) = 1
(CONST 2) = NARG1
(CONST 3) = SPECREPCHECK
(CONST 4) = (MPLUS MEQUAL)
(CONST 5) = MEMQ
(CONST 6) = MUL2
(CONST 7) = MEQUAL
(CONST 8) = EXPANDTERMS
(CONST 9) = MNCTIMES
(CONST 10) = MTIMES
(CONST 11) = MPLUSP
(CONST 12) = MULN
(CONST 13) = (MNCTIMES)
(CONST 14) = SIMPLIFYA
(CONST 15) = ADDN
(CONST 16) = $MULTTHRU
(CONST 17) = WNA-ERR
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
147 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (PUSH-NIL 2)
5     (LOAD&PUSH 2)
6     (CONST&PUSH 0)                      ; 2
7     (CALLSR&JMPIF 1 45 L77)             ; =
12    (LOAD&PUSH 2)
13    (CONST&PUSH 1)                      ; 1
14    (CALLSR&JMPIFNOT 1 45 L217)         ; =
19    (NIL&PUSH)
20    (CONST&PUSH 1)                      ; 1
21    (LOAD&PUSH 6)
22    (CALL2&PUSH 2)                      ; NARG1
24    (CALL1 3)                           ; SPECREPCHECK
26    (STORE 1)
27    (STORE 2)
28    (JMPIFATOM L44)
30    (LOAD 2)
31    (CAR)
32    (CAR&PUSH)
33    (JMPIFEQTO 9 L199)                  ; MNCTIMES
37    (LOAD 2)
38    (CAR)
39    (CAR&PUSH)
40    (JMPIFEQTO 10 L131)                 ; MTIMES
44    L44
44    (LOAD 2)
45    (SKIP&RET 6)
47    L47
47    (LOAD&PUSH 1)
48    (LOAD&PUSH 1)
49    (CALL2 6)                           ; MUL2
51    (SKIP&RET 5)
53    L53
53    (LOAD&CAR&PUSH 0)
55    (LOAD&PUSH 2)
56    (LOAD 2)
57    (CDR)
58    (CAR&PUSH)
59    (LIST&PUSH 2)
61    (JSR&PUSH L0)
63    (LOAD&PUSH 3)
64    (LOAD 3)
65    (CDR)
66    (CDR)
67    (CAR&PUSH)
68    (LIST&PUSH 2)
70    (JSR&PUSH L0)
73    (LIST 3)
75    (SKIP&RET 5)
77    L77
77    (CONST&PUSH 1)                      ; 1
78    (LOAD&PUSH 5)
79    (CALL2&PUSH 2)                      ; NARG1
81    (CALL1 3)                           ; SPECREPCHECK
83    (STORE 1)
84    (CONST&PUSH 0)                      ; 2
85    (LOAD&PUSH 5)
86    (CALL2&PUSH 2)                      ; NARG1
88    (CALL1 3)                           ; SPECREPCHECK
90    (STORE 0)
91    (JMPIFATOM L47)
93    (LOAD 0)
94    (CAR)
95    (CAR&PUSH)
96    (CONST&PUSH 4)                      ; (MPLUS MEQUAL)
97    (CALL2&JMPIFNOT 5 L47)              ; MEMQ
100   (LOAD 0)
101   (CAR)
102   (CAR&PUSH)
103   (JMPIFEQTO 7 L53)                   ; MEQUAL
106   (LOAD&PUSH 1)
107   (LOAD&CDR&PUSH 1)
109   (CALL2 8)                           ; EXPANDTERMS
111   (SKIP&RET 5)
113   L113
113   (LOAD&PUSH 0)
114   (LOAD&CDR&PUSH 3)
116   (CALLSR&STORE 2 35 0)               ; NCONC
120   (PUSH)
121   (T&PUSH)
122   (CALL2&PUSH 12)                     ; MULN
124   (LOAD 3)
125   (CAR)
126   (CDR&PUSH)
127   (CALL2 8)                           ; EXPANDTERMS
129   (SKIP&RET 6)
131   L131
131   (LOAD&CDR&PUSH 2)
133   (CALLS2&STORE 72 2)                 ; REVERSE
136   L136
136   (LOAD&CAR&PUSH 2)
138   (CALL1&JMPIF 11 L113)               ; MPLUSP
141   (LOAD&CAR&PUSH 2)
143   (LOAD&CONS&STORE 0)
145   (LOAD&CDR&STORE 2)
147   (JMPIFNOT L214)
150   (JMP L136)
152   L152
152   (LOAD&PUSH 0)
153   (CALLS2&STORE 73 0)                 ; NREVERSE
156   (NIL&PUSH)
157   (LOAD 3)
158   (CAR)
159   (CDR&PUSH)
160   (JMP L184)
162   L162
162   (LOAD&CAR&PUSH 0)
164   (CONST&PUSH 13)                     ; (MNCTIMES)
165   (LOAD&PUSH 4)
166   (LOAD&PUSH 2)
167   (NIL)
168   (CONS&PUSH)
169   (LOAD&CDR&PUSH 8)
171   (CALLSR 3 34)                       ; APPEND
174   (CONS&PUSH)
175   (T&PUSH)
176   (CALL2&PUSH 14)                     ; SIMPLIFYA
178   (LOAD&CONS&STORE 2)
180   (SKIP 1)
182   (LOAD&CDR&STORE 0)
184   L184
184   (LOAD&PUSH 0)
185   (CALLS1&JMPIFNOT 146 L162)          ; ENDP
188   (SKIP 1)
190   (LOAD&PUSH 0)
191   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
194   (T&PUSH)
195   (CALL2 15)                          ; ADDN
197   (SKIP&RET 6)
199   L199
199   (LOAD&CDR&STORE 2)
201   L201
201   (LOAD&CAR&PUSH 2)
203   (CALL1&JMPIF 11 L152)               ; MPLUSP
206   (LOAD&CAR&PUSH 2)
208   (LOAD&CONS&STORE 0)
210   (LOAD&CDR&STORE 2)
212   (JMPIF L201)
214   L214
214   (LOAD 1)
215   (SKIP&RET 6)
217   L217
217   (CONST&PUSH 16)                     ; $MULTTHRU
218   (CALL1 17)                          ; WNA-ERR
220   (SKIP&RET 5)


Disassembly of function #:|(DEFUN EXPANDEXPT (SUM POWER) ...)-180|
(CONST 0) = EXPANDEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPANDEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPANDEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPANDEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPANDEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPANDEXPT
8     (SKIP&RET 1)


Disassembly of function EXPANDEXPT
(CONST 0) = EXPONENTIATE-SUM
(CONST 1) = (MEXPT SIMP)
(CONST 2) = (-1)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (LOAD&PUSH 2)
3     (CALLS2&PUSH 158)                   ; ABS
5     (CALL2&PUSH 0)                      ; EXPONENTIATE-SUM
7     (LOAD&PUSH 2)
8     (CALLS2&JMPIF 146 L18)              ; PLUSP
11    (CONST&PUSH 1)                      ; (MEXPT SIMP)
12    (LOAD&PUSH 1)
13    (CONST 2)                           ; (-1)
14    (LIST* 2)
16    (SKIP&RET 4)
18    L18
18    (POP)
19    (SKIP&RET 3)


Disassembly of function #:|(DEFUN EXPONENTIATE-SUM (TERMS RPOWER) ...)-181|
(CONST 0) = EXPONENTIATE-SUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPONENTIATE-SUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPONENTIATE-SUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPONENTIATE-SUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPONENTIATE-SUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPONENTIATE-SUM
8     (SKIP&RET 1)


Disassembly of function EXPONENTIATE-SUM
(CONST 0) = 0
(CONST 1) = 1
(CONST 2) = POWER
(CONST 3) = (MPLUS SIMP)
(CONST 4) = COMBINATION
(CONST 5) = MULN
(CONST 6) = ADD2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
52 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 0
2     (CALLSR&JMPIF 1 45 L20)             ; =
6     (LOAD 2)
7     (CDR)
8     (JMPIFNOT L23)
10    (LOAD&PUSH 1)
11    (CONST&PUSH 1)                      ; 1
12    (CALLSR&JMPIF 1 45 L30)             ; =
16    (CONST&PUSH 0)                      ; 0
17    (CONST&PUSH 0)                      ; 0
18    (JMP L66)
20    L20
20    (CONST 1)                           ; 1
21    (SKIP&RET 3)
23    L23
23    (LOAD&CAR&PUSH 2)
25    (LOAD&PUSH 2)
26    (CALL2 2)                           ; POWER
28    (SKIP&RET 3)
30    L30
30    (CONST&PUSH 3)                      ; (MPLUS SIMP)
31    (LOAD 3)
32    (CONS)
33    (SKIP&RET 3)
35    L35
35    (LOAD&INC&PUSH 1)
37    (LOAD&PUSH 1)
38    (LOAD&PUSH 5)
39    (LOAD&PUSH 4)
40    (CALL2&PUSH 4)                      ; COMBINATION
42    (LOAD&CDR&PUSH 7)
44    (LOAD&PUSH 7)
45    (LOAD&PUSH 6)
46    (CALLSR&PUSH 1 54)                  ; -
49    (JSR&PUSH L0)
51    (LOAD&CAR&PUSH 8)
53    (LOAD&PUSH 6)
54    (CALL2&PUSH 2)                      ; POWER
56    (LIST&PUSH 3)
58    (T&PUSH)
59    (CALL2&PUSH 5)                      ; MULN
61    (CALL2 6)                           ; ADD2
63    (STORE 1)
64    (POP&STORE 1)
66    L66
66    (LOAD&PUSH 1)
67    (LOAD&PUSH 4)
68    (CALLSR&JMPIFNOT 1 48 L35)          ; >
72    (POP)
73    (SKIP&RET 4)


Disassembly of function #:|(DEFUN COMBINATION (N M) ...)-182|
(CONST 0) = COMBINATION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMBINATION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMBINATION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMBINATION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMBINATION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMBINATION
8     (SKIP&RET 1)


Disassembly of function COMBINATION
(CONST 0) = 2
(CONST 1) = QUOT
(CONST 2) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
31 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (LOAD&PUSH 3)
2     (CONST&PUSH 0)                      ; 2
3     (CALL2&PUSH 1)                      ; QUOT
5     (CALLSR&JMPIF 1 48 L14)             ; >
9     (CONST&PUSH 2)                      ; 1
10    (LOAD&PUSH 3)
11    (CONST&PUSH 2)                      ; 1
12    (JMP L37)
14    L14
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 3)
16    (LOAD&PUSH 3)
17    (CALLSR&PUSH 1 54)                  ; -
20    (JMPTAIL 2 5 L0)
24    L24
24    (LOAD&PUSH 2)
25    (LOAD&PUSH 2)
26    (CALLSR&PUSH 2 55)                  ; *
29    (LOAD&PUSH 1)
30    (CALL2 1)                           ; QUOT
32    (STORE 2)
33    (LOAD&DEC&STORE 1)
35    (LOAD&INC&STORE 0)
37    L37
37    (LOAD&PUSH 0)
38    (LOAD&PUSH 5)
39    (CALLSR&JMPIFNOT 1 48 L24)          ; >
43    (LOAD 2)
44    (SKIP&RET 6)


Disassembly of function #:|(DEFUN EXPANDSUMS (A B) ...)-183|
(CONST 0) = EXPANDSUMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPANDSUMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPANDSUMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPANDSUMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPANDSUMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPANDSUMS
8     (SKIP&RET 1)


Disassembly of function EXPANDSUMS
(CONST 0) = FIXEXPAND
(CONST 1) = EXPANDTERMS
(CONST 2) = ADDN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (CALL1 0)                           ; FIXEXPAND
4     (STORE 3)
5     (LOAD&CDR&STORE 2)
7     (LOAD&JMPIFNOT 3 L22)
10    L10
10    (LOAD&CAR&PUSH 3)
12    (LOAD&PUSH 3)
13    (CALL2&PUSH 1)                      ; EXPANDTERMS
15    (LOAD&CONS&STORE 0)
17    (LOAD&CDR&STORE 3)
19    (LOAD&JMPIF 3 L10)
22    L22
22    (T&PUSH)
23    (CALL2 2)                           ; ADDN
25    (SKIP&RET 3)


Disassembly of function #:|(DEFUN EXPANDTERMS (A B) ...)-184|
(CONST 0) = EXPANDTERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPANDTERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPANDTERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPANDTERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPANDTERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPANDTERMS
8     (SKIP&RET 1)


Disassembly of function EXPANDTERMS
(CONST 0) = MUL2
(CONST 1) = ADDN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&JMPIFNOT 2 L16)
4     L4
4     (LOAD&PUSH 3)
5     (LOAD&CAR&PUSH 3)
7     (CALL2&PUSH 0)                      ; MUL2
9     (LOAD&CONS&STORE 0)
11    (LOAD&CDR&STORE 2)
13    (LOAD&JMPIF 2 L4)
16    L16
16    (T&PUSH)
17    (CALL2 1)                           ; ADDN
19    (SKIP&RET 3)


Disassembly of function #:|(DEFUN GENEXPANDS (L) ...)-185|
(CONST 0) = GENEXPANDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GENEXPANDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GENEXPANDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GENEXPANDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GENEXPANDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GENEXPANDS
8     (SKIP&RET 1)


Disassembly of function GENEXPANDS
(CONST 0) = PRODS
(CONST 1) = NEGPRODS
(CONST 2) = SUMS
(CONST 3) = NEGSUMS
(CONST 4) = RAT
(CONST 5) = 1
(CONST 6) = MPLUS
(CONST 7) = MEXPT
(CONST 8) = -1
(CONST 9) = MPLUSP
(CONST 10) = EXPANDP
(CONST 11) = MMINUSP
(CONST 12) = NEG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NEGPRODS NEGSUMS SUMS PRODS)
writes special variables : (NEGPRODS NEGSUMS SUMS PRODS)
135 byte-code instructions:
0     (JMP L42)
2     L2
2     (LOAD 1)
3     (CAR)
4     (CDR)
5     (CAR&PUSH)
6     (JMPIFEQTO 5 L18)                   ; 1
9     (LOAD 1)
10    (CAR)
11    (CDR)
12    (CAR&PUSH)
13    (GETVALUE 0)                        ; PRODS
15    (CONS)
16    (SETVALUE 0)                        ; PRODS
18    L18
18    (LOAD 1)
19    (CAR)
20    (CDR)
21    (JMP L118)
24    L24
24    (LOAD&CAR&PUSH 1)
26    (GETVALUE 2)                        ; SUMS
28    (CONS)
29    (SETVALUE 2)                        ; SUMS
31    (JMP L42)
33    L33
33    (LOAD 1)
34    (CAR)
35    (CDR)
36    (CAR&PUSH)
37    (GETVALUE 3)                        ; NEGSUMS
39    (CONS)
40    (SETVALUE 3)                        ; NEGSUMS
42    L42
42    (LOAD&CDR&STORE 1)
44    (JMPIFNOT L157)
47    (LOAD 1)
48    (CAR)
49    (JMPIFATOM L147)
52    (LOAD 1)
53    (CAR)
54    (CAR)
55    (CAR&PUSH)
56    (JMPIFEQTO 4 L2)                    ; RAT
59    (LOAD 1)
60    (CAR)
61    (CAR)
62    (CAR&PUSH)
63    (JMPIFEQTO 6 L24)                   ; MPLUS
66    (LOAD 1)
67    (CAR)
68    (CAR)
69    (CAR&PUSH)
70    (JMPIFNOTEQTO 7 L88)                ; MEXPT
73    (LOAD 1)
74    (CAR)
75    (CDR)
76    (CDR)
77    (CAR&PUSH)
78    (JMPIFNOTEQTO 8 L88)                ; -1
81    (LOAD 1)
82    (CAR)
83    (CDR)
84    (CAR&PUSH)
85    (CALL1&JMPIF 9 L33)                 ; MPLUSP
88    L88
88    (LOAD 1)
89    (CAR)
90    (CAR)
91    (CAR&PUSH)
92    (JMPIFNOTEQTO 7 L147)               ; MEXPT
95    (T)
96    (BIND 10)                           ; EXPANDP
98    (LOAD 4)
99    (CAR)
100   (CDR)
101   (CDR)
102   (CAR&PUSH)
103   (CALL1 11)                          ; MMINUSP
105   (UNBIND1)
106   (JMPIFNOT L147)
108   (LOAD 1)
109   (CAR)
110   (CDR)
111   (CDR)
112   (CAR&PUSH)
113   (JMPIFNOTEQTO 8 L122)               ; -1
116   (LOAD 1)
117   (CAR)
118   L118
118   (CDR)
119   (CAR)
120   (JMP L138)
122   L122
122   (LOAD 1)
123   (CAR)
124   (CAR&PUSH)
125   (LOAD 2)
126   (CAR)
127   (CDR)
128   (CAR&PUSH)
129   (LOAD 3)
130   (CAR)
131   (CDR)
132   (CDR)
133   (CAR&PUSH)
134   (CALL1&PUSH 12)                     ; NEG
136   (LIST 3)
138   L138
138   (PUSH)
139   (GETVALUE 1)                        ; NEGPRODS
141   (CONS)
142   (SETVALUE 1)                        ; NEGPRODS
144   (JMP L42)
147   L147
147   (LOAD&CAR&PUSH 1)
149   (GETVALUE 0)                        ; PRODS
151   (CONS)
152   (SETVALUE 0)                        ; PRODS
154   (JMP L42)
157   L157
157   (GETVALUE&PUSH 0)                   ; PRODS
159   (CALLS2 73)                         ; NREVERSE
161   (SETVALUE 0)                        ; PRODS
163   (GETVALUE&PUSH 1)                   ; NEGPRODS
165   (CALLS2 73)                         ; NREVERSE
167   (SETVALUE 1)                        ; NEGPRODS
169   (GETVALUE&PUSH 2)                   ; SUMS
171   (CALLS2 73)                         ; NREVERSE
173   (SETVALUE 2)                        ; SUMS
175   (GETVALUE&PUSH 3)                   ; NEGSUMS
177   (CALLS2 73)                         ; NREVERSE
179   (SETVALUE 3)                        ; NEGSUMS
181   (NIL)
182   (SKIP&RET 2)


Disassembly of function #:|(DEFUN EXPANDTIMES (A) ...)-186|
(CONST 0) = EXPANDTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPANDTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPANDTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPANDTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPANDTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPANDTIMES
8     (SKIP&RET 1)


Disassembly of function EXPANDTIMES
(CONST 0) = PRODS
(CONST 1) = NEGPRODS
(CONST 2) = SUMS
(CONST 3) = NEGSUMS
(CONST 4) = GENEXPANDS
(CONST 5) = 1
(CONST 6) = (MTIMES SIMP)
(CONST 7) = (MTIMES SIMP)
(CONST 8) = EXPANDSUMS
(CONST 9) = FIXEXPAND
(CONST 10) = EXPANDTERMS
(CONST 11) = MPLUSP
(CONST 12) = -1
(CONST 13) = POWER
(CONST 14) = EXPANDFLAG
(CONST 15) = MUL2
(CONST 16) = (MEXPT SIMP)
(CONST 17) = (MEXPT SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NEGSUMS SUMS NEGPRODS PRODS)
writes special variables : (NEGPRODS PRODS)
155 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; PRODS
3     (NIL)
4     (BIND 1)                            ; NEGPRODS
6     (NIL)
7     (BIND 2)                            ; SUMS
9     (NIL)
10    (BIND 3)                            ; NEGSUMS
12    (PUSH-NIL 2)
14    (LOAD&PUSH 15)
15    (CALL1 4)                           ; GENEXPANDS
17    (GETVALUE 0)                        ; PRODS
19    (JMPIFNOT L67)
21    (GETVALUE 0)                        ; PRODS
23    (CDR)
24    (JMPIFNOT L70)
26    (CONST&PUSH 6)                      ; (MTIMES SIMP)
27    (GETVALUE 0)                        ; PRODS
29    (CONS)
30    L30
30    (SETVALUE 0)                        ; PRODS
32    (GETVALUE 1)                        ; NEGPRODS
34    (JMPIFNOT L75)
36    (GETVALUE 1)                        ; NEGPRODS
38    (CDR)
39    (JMPIFNOT L78)
41    (CONST&PUSH 7)                      ; (MTIMES SIMP)
42    (GETVALUE 1)                        ; NEGPRODS
44    (CONS)
45    L45
45    (SETVALUE 1)                        ; NEGPRODS
47    (GETVALUE 2)                        ; SUMS
49    (JMPIF L83)
51    (GETVALUE 3)                        ; NEGSUMS
53    (JMPIFNOT L145)
56    L56
56    (GETVALUE 3)                        ; NEGSUMS
58    (CAR)
59    (STORE 0)
60    (GETVALUE 3)                        ; NEGSUMS
62    (CDR&PUSH)
63    (LOAD&PUSH 0)
64    (JMP L178)
67    L67
67    (CONST 5)                           ; 1
68    (JMP L30)
70    L70
70    (GETVALUE 0)                        ; PRODS
72    (CAR)
73    (JMP L30)
75    L75
75    (CONST 5)                           ; 1
76    (JMP L45)
78    L78
78    (GETVALUE 1)                        ; NEGPRODS
80    (CAR)
81    (JMP L45)
83    L83
83    (GETVALUE 2)                        ; SUMS
85    (CAR)
86    (STORE 1)
87    (GETVALUE 2)                        ; SUMS
89    (CDR&PUSH)
90    (LOAD&PUSH 0)
91    (JMP L120)
93    L93
93    (LOAD 1)
94    (JMP L138)
96    L96
96    (GETVALUE 0)                        ; PRODS
98    (JMP L224)
101   L101
101   (GETVALUE&PUSH 1)                   ; NEGPRODS
103   (CONST&PUSH 12)                     ; -1
104   (CALL2 13)                          ; POWER
106   (JMP L202)
109   L109
109   (LOAD&CAR&PUSH 0)
111   (LOAD&PUSH 4)
112   (LOAD&PUSH 1)
113   (CALL2 8)                           ; EXPANDSUMS
115   (STORE 4)
116   (SKIP 1)
118   (LOAD&CDR&STORE 0)
120   L120
120   (LOAD&PUSH 0)
121   (CALLS1&JMPIFNOT 146 L109)          ; ENDP
124   (SKIP 2)
126   (GETVALUE&PUSH 0)                   ; PRODS
128   (JMPIFEQTO 5 L93)                   ; 1
131   (GETVALUE&PUSH 0)                   ; PRODS
133   (LOAD&PUSH 2)
134   (CALL1&PUSH 9)                      ; FIXEXPAND
136   (CALL2 10)                          ; EXPANDTERMS
138   L138
138   (SETVALUE 0)                        ; PRODS
140   (GETVALUE 3)                        ; NEGSUMS
142   (JMPIF L56)
145   L145
145   (GETVALUE&PUSH 1)                   ; NEGPRODS
147   (JMPIFEQTO 5 L96)                   ; 1
150   (GETVALUE&PUSH 0)                   ; PRODS
152   (CALL1&JMPIF 11 L101)               ; MPLUSP
155   (T)
156   (BIND 14)                           ; EXPANDFLAG
158   (GETVALUE&PUSH 0)                   ; PRODS
160   (GETVALUE&PUSH 1)                   ; NEGPRODS
162   (CONST&PUSH 12)                     ; -1
163   (CALL2 13)                          ; POWER
165   (JMP L220)
167   L167
167   (LOAD&CAR&PUSH 0)
169   (LOAD&PUSH 3)
170   (LOAD&PUSH 1)
171   (CALL2 8)                           ; EXPANDSUMS
173   (STORE 3)
174   (SKIP 1)
176   (LOAD&CDR&STORE 0)
178   L178
178   (LOAD&PUSH 0)
179   (CALLS1&JMPIFNOT 146 L167)          ; ENDP
182   (SKIP 2)
184   (GETVALUE&PUSH 1)                   ; NEGPRODS
186   (LOAD&PUSH 1)
187   (CALL1&PUSH 9)                      ; FIXEXPAND
189   (CALL2 10)                          ; EXPANDTERMS
191   (STORE 0)
192   (GETVALUE&PUSH 0)                   ; PRODS
194   (CALL1&JMPIFNOT 11 L210)            ; MPLUSP
197   (CONST&PUSH 16)                     ; (MEXPT SIMP)
198   (LOAD&PUSH 1)
199   (CONST&PUSH 12)                     ; -1
200   (LIST 3)
202   L202
202   (PUSH)
203   (GETVALUE 0)                        ; PRODS
205   (CDR&PUSH)
206   (CALL2 10)                          ; EXPANDTERMS
208   (JMP L224)
210   L210
210   (T)
211   (BIND 14)                           ; EXPANDFLAG
213   (GETVALUE&PUSH 0)                   ; PRODS
215   (CONST&PUSH 17)                     ; (MEXPT SIMP)
216   (LOAD&PUSH 5)
217   (CONST&PUSH 12)                     ; -1
218   (LIST 3)
220   L220
220   (PUSH)
221   (CALL2 15)                          ; MUL2
223   (UNBIND1)
224   L224
224   (SKIP 2)
226   (UNBIND 4)
228   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN EXPAND1 (EXP $EXPOP $EXPON) ...)-187|
(CONST 0) = EXPAND1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPAND1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPAND1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPAND1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPAND1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPAND1
8     (SKIP&RET 1)


Disassembly of function EXPAND1
(CONST 0) = $EXPOP
(CONST 1) = $EXPON
(CONST 2) = SPECREPCHECK
(CONST 3) = SSIMPLIFYA
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; $EXPOP
3     (LOAD 4)
4     (BIND 1)                            ; $EXPON
6     (LOAD&PUSH 9)
7     (CALL1&PUSH 2)                      ; SPECREPCHECK
9     (CALL1 3)                           ; SSIMPLIFYA
11    (UNBIND 2)
13    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $EXPAND NARGS ...)-188|
(CONST 0) = $EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EXPAND
8     (SKIP&RET 1)


Disassembly of function $EXPAND
(CONST 0) = 1
(CONST 1) = NARG1
(CONST 2) = $MAXPOSEX
(CONST 3) = $MAXNEGEX
(CONST 4) = EXPAND1
(CONST 5) = 2
(CONST 6) = 3
(CONST 7) = $EXPAND
(CONST 8) = WNA-ERR
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: ($MAXPOSEX $MAXNEGEX)
45 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 1
5     (CALLSR&JMPIF 1 45 L28)             ; =
9     (LOAD&PUSH 0)
10    (CONST&PUSH 5)                      ; 2
11    (CALLSR&JMPIFNOT 1 45 L36)          ; =
15    (CONST&PUSH 0)                      ; 1
16    (LOAD&PUSH 3)
17    (CALL2&PUSH 1)                      ; NARG1
19    (CONST&PUSH 5)                      ; 2
20    (LOAD&PUSH 4)
21    (CALL2 1)                           ; NARG1
23    L23
23    (PUSH)
24    (GETVALUE 3)                        ; $MAXNEGEX
26    (JMP L54)
28    L28
28    (CONST&PUSH 0)                      ; 1
29    (LOAD&PUSH 3)
30    (CALL2&PUSH 1)                      ; NARG1
32    (GETVALUE 2)                        ; $MAXPOSEX
34    (JMP L23)
36    L36
36    (LOAD&PUSH 0)
37    (CONST&PUSH 6)                      ; 3
38    (CALLSR&JMPIFNOT 1 45 L60)          ; =
42    (CONST&PUSH 0)                      ; 1
43    (LOAD&PUSH 3)
44    (CALL2&PUSH 1)                      ; NARG1
46    (CONST&PUSH 5)                      ; 2
47    (LOAD&PUSH 4)
48    (CALL2&PUSH 1)                      ; NARG1
50    (CONST&PUSH 6)                      ; 3
51    (LOAD&PUSH 5)
52    (CALL2 1)                           ; NARG1
54    L54
54    (PUSH)
55    (CALL 3 4)                          ; EXPAND1
58    (SKIP&RET 3)
60    L60
60    (CONST&PUSH 7)                      ; $EXPAND
61    (CALL1 8)                           ; WNA-ERR
63    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FIXEXPAND (A) ...)-189|
(CONST 0) = FIXEXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXEXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXEXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXEXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXEXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXEXPAND
8     (SKIP&RET 1)


Disassembly of function FIXEXPAND
(CONST 0) = MPLUSP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIFNOT 0 L8)               ; MPLUSP
4     (LOAD 1)
5     (CDR)
6     (SKIP&RET 2)
8     L8
8     (LOAD&PUSH 1)
9     (NIL)
10    (CONS)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SIMPNRT (X *N) ...)-190|
(CONST 0) = SIMPNRT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPNRT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPNRT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPNRT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPNRT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPNRT
8     (SKIP&RET 1)


Disassembly of function SIMPNRT
(CONST 0) = X
(CONST 1) = *N
(CONST 2) = *IN
(CONST 3) = *OUT
(CONST 4) = VARLIST
(CONST 5) = GENVAR
(CONST 6) = $FACTORFLAG
(CONST 7) = $DONTFACTOR
(CONST 8) = NEWVAR
(CONST 9) = RATREP*
(CONST 10) = 0
(CONST 11) = PSQFR
(CONST 12) = RATFACT
(CONST 13) = PDIS
(CONST 14) = SIMPNRT1
(CONST 15) = MULN
(CONST 16) = 1
(CONST 17) = NRTHK
(CONST 18) = $%EMODE
(CONST 19) = (MTIMES)
(CONST 20) = (MPLUS MTIMES RAT)
(CONST 21) = MEMQ
(CONST 22) = SIMPLIFYA
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*N *IN *OUT X)
writes special variables : (*IN *OUT X $FACTORFLAG)
90 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; *N
6     (NIL)
7     (BIND 2)                            ; *IN
9     (NIL)
10    (BIND 3)                            ; *OUT
12    (NIL)
13    (BIND 4)                            ; VARLIST
15    (NIL)
16    (BIND 5)                            ; GENVAR
18    (NIL)
19    (BIND 6)                            ; $FACTORFLAG
21    (NIL)
22    (BIND 7)                            ; $DONTFACTOR
24    (T)
25    (SETVALUE 6)                        ; $FACTORFLAG
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL1 8)                           ; NEWVAR
31    (GETVALUE&PUSH 0)                   ; X
33    (CALL1 9)                           ; RATREP*
35    (SETVALUE 0)                        ; X
37    (CDR)
38    (CAR&PUSH)
39    (JMPIFEQTO 10 L115)                 ; 0
43    (GETVALUE 0)                        ; X
45    (CDR&PUSH)
46    (CONST&PUSH 11)                     ; PSQFR
47    (CALL2 12)                          ; RATFACT
49    (SETVALUE 0)                        ; X
51    (CONST&SYMBOL-FUNCTION&PUSH 13)     ; PDIS
53    (GETVALUE&PUSH 0)                   ; X
55    (CALLSR&PUSH 0 22)                  ; MAPCAR
58    (CALL1 14)                          ; SIMPNRT1
60    (GETVALUE 3)                        ; *OUT
62    (JMPIF L120)
64    (CONST 16)                          ; 1
65    L65
65    (SETVALUE 3)                        ; *OUT
67    (GETVALUE 2)                        ; *IN
69    (JMPIF L126)
71    (CONST 16)                          ; 1
72    L72
72    (SETVALUE 2)                        ; *IN
74    (T)
75    (BIND 18)                           ; $%EMODE
77    (CONST&PUSH 19)                     ; (MTIMES)
78    (GETVALUE&PUSH 2)                   ; *IN
80    (GETVALUE&PUSH 3)                   ; *OUT
82    (LIST&PUSH 3)
84    (GETVALUE&PUSH 2)                   ; *IN
86    (CALLS2&JMPIF 5 L105)               ; ATOM
89    (GETVALUE 2)                        ; *IN
91    (CDR)
92    (CAR&PUSH)
93    (CALLS2&JMPIF 5 L105)               ; ATOM
96    (GETVALUE 2)                        ; *IN
98    (CDR)
99    (CAR)
100   (CAR)
101   (CAR&PUSH)
102   (CONST&PUSH 20)                     ; (MPLUS MTIMES RAT)
103   (CALL2 21)                          ; MEMQ
105   L105
105   (NOT)
106   (PUSH)
107   (CALL2 22)                          ; SIMPLIFYA
109   (UNBIND 7)
111   L111
111   (UNBIND 2)
113   (SKIP&RET 3)
115   L115
115   (CONST 10)                          ; 0
116   (UNBIND 6)
118   (JMP L111)
120   L120
120   (PUSH)
121   (NIL&PUSH)
122   (CALL2 15)                          ; MULN
124   (JMP L65)
126   L126
126   (PUSH)
127   (NIL&PUSH)
128   (CALL2 15)                          ; MULN
130   (SETVALUE 2)                        ; *IN
132   (PUSH)
133   (GETVALUE&PUSH 1)                   ; *N
135   (CALL2 17)                          ; NRTHK
137   (JMP L72)


Disassembly of function #:|(DEFUN SIMPNRT1 (X) ...)-191|
(CONST 0) = SIMPNRT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPNRT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPNRT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPNRT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPNRT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPNRT1
8     (SKIP&RET 1)


Disassembly of function SIMPNRT1
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = *N
(CONST 3) = 1
(CONST 4) = (MEXPT)
(CONST 5) = QUOT
(CONST 6) = SIMPNRT
(CONST 7) = *OUT
(CONST 8) = PNTHROOTP
(CONST 9) = (MEXPT)
(CONST 10) = (MEXPT)
(CONST 11) = *IN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*IN *OUT Y *N X)
writes special variables : (X *IN *OUT Y)
98 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (BIND 0)                            ; X
7     (NIL)
8     (BIND 1)                            ; Y
10    (GETVALUE 0)                        ; X
12    (JMPIFNOT L156)
15    L15
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CAR&PUSH)
19    (GETVALUE&PUSH 2)                   ; *N
21    (CALLSR 2 57)                       ; GCD
24    (SETVALUE 1)                        ; Y
26    (PUSH)
27    (JMPIFNOTEQTO 3 L71)                ; 1
30    (GETVALUE 0)                        ; X
32    (CDR)
33    (CAR&PUSH)
34    (JMPIFNOTEQTO 3 L95)                ; 1
37    (GETVALUE 0)                        ; X
39    (CAR&PUSH)
40    (CALLS2&JMPIFNOT 12 L95)            ; INTEGERP
43    (GETVALUE 0)                        ; X
45    (CAR&PUSH)
46    (CALLS2&JMPIFNOT 146 L95)           ; PLUSP
49    (GETVALUE 0)                        ; X
51    (CAR&PUSH)
52    (GETVALUE&PUSH 2)                   ; *N
54    (CALL2 8)                           ; PNTHROOTP
56    (SETVALUE 1)                        ; Y
58    (JMPIFNOT L95)
60    (GETVALUE 1)                        ; Y
62    L62
62    (PUSH)
63    (GETVALUE 7)                        ; *OUT
65    (CONS)
66    (SETVALUE 7)                        ; *OUT
68    (JMP L145)
71    L71
71    (CONST&PUSH 4)                      ; (MEXPT)
72    (GETVALUE 0)                        ; X
74    (CAR&PUSH)
75    (GETVALUE 0)                        ; X
77    (CDR)
78    (CAR&PUSH)
79    (GETVALUE&PUSH 1)                   ; Y
81    (CALL2&PUSH 5)                      ; QUOT
83    (LIST&PUSH 3)
85    (GETVALUE&PUSH 2)                   ; *N
87    (GETVALUE&PUSH 1)                   ; Y
89    (CALL2&PUSH 5)                      ; QUOT
91    (CALL2 6)                           ; SIMPNRT
93    (JMP L62)
95    L95
95    (GETVALUE&PUSH 2)                   ; *N
97    (GETVALUE 0)                        ; X
99    (CDR)
100   (CAR&PUSH)
101   (CALLS2&PUSH 158)                   ; ABS
103   (CALLSR&JMPIF 1 48 L126)            ; >
107   (CONST&PUSH 9)                      ; (MEXPT)
108   (GETVALUE 0)                        ; X
110   (CAR&PUSH)
111   (GETVALUE 0)                        ; X
113   (CDR)
114   (CAR&PUSH)
115   (GETVALUE&PUSH 2)                   ; *N
117   (CALL2&PUSH 5)                      ; QUOT
119   (LIST&PUSH 3)
121   (GETVALUE 7)                        ; *OUT
123   (CONS)
124   (SETVALUE 7)                        ; *OUT
126   L126
126   (CONST&PUSH 10)                     ; (MEXPT)
127   (GETVALUE 0)                        ; X
129   (CAR&PUSH)
130   (GETVALUE 0)                        ; X
132   (CDR)
133   (CAR&PUSH)
134   (GETVALUE&PUSH 2)                   ; *N
136   (CALLS2&PUSH 184)                   ; REM
138   (LIST&PUSH 3)
140   (GETVALUE 11)                       ; *IN
142   (CONS)
143   (SETVALUE 11)                       ; *IN
145   L145
145   (GETVALUE 0)                        ; X
147   (CDR)
148   (CDR)
149   (SETVALUE 0)                        ; X
151   (GETVALUE 0)                        ; X
153   (JMPIF L15)
156   L156
156   (NIL)
157   (UNBIND 3)
159   (SKIP&RET 2)


Disassembly of function #:|(DEFUN NRTHK (IN *N) ...)-192|
(CONST 0) = NRTHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NRTHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NRTHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NRTHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NRTHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NRTHK
8     (SKIP&RET 1)


Disassembly of function NRTHK
(CONST 0) = *N
(CONST 1) = 1
(CONST 2) = -1
(CONST 3) = 2
(CONST 4) = $%I
(CONST 5) = $DOMAIN
(CONST 6) = $REAL
(CONST 7) = EVEN
(CONST 8) = NRTHK2
(CONST 9) = $M1PBRANCH
(CONST 10) = $%EMODE
(CONST 11) = $%E
(CONST 12) = (MTIMES)
(CONST 13) = (RAT)
(CONST 14) = $%PI
(CONST 15) = POWER*
(CONST 16) = WFLAG
(CONST 17) = $ASKSIGN
(CONST 18) = $NEG
(CONST 19) = MNUMP
(CONST 20) = $SIGN
(CONST 21) = MUL2*
(CONST 22) = NRTHK1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($M1PBRANCH $DOMAIN *N WFLAG)
71 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; *N
3     (LOAD&PUSH 5)
4     (JMPIFEQTO 1 L42)                   ; 1
7     (LOAD&PUSH 5)
8     (JMPIFEQTO 2 L79)                   ; -1
12    (GETVALUE 16)                       ; WFLAG
14    (JMPIFNOT L23)
16    (LOAD&PUSH 5)
17    (CALL1&PUSH 17)                     ; $ASKSIGN
19    (JMPIFEQTO 18 L96)                  ; $NEG
23    L23
23    (LOAD&PUSH 5)
24    (CALL1&JMPIFNOT 19 L33)             ; MNUMP
27    (LOAD&PUSH 5)
28    (CALL1&PUSH 20)                     ; $SIGN
30    (JMPIFEQTO 18 L96)                  ; $NEG
33    L33
33    (LOAD 5)
34    L34
34    (PUSH)
35    (GETVALUE&PUSH 0)                   ; *N
37    (CALL2 8)                           ; NRTHK2
39    L39
39    (UNBIND1)
40    (SKIP&RET 3)
42    L42
42    (CONST 1)                           ; 1
43    (JMP L39)
45    L45
45    (CONST 4)                           ; $%I
46    (JMP L39)
48    L48
48    (CONST 2)                           ; -1
49    (JMP L34)
51    L51
51    (GETVALUE&PUSH 0)                   ; *N
53    (CALL1&JMPIF 7 L48)                 ; EVEN
56    (CONST 2)                           ; -1
57    (JMP L39)
59    L59
59    (T)
60    (BIND 10)                           ; $%EMODE
62    (CONST&PUSH 11)                     ; $%E
63    (CONST&PUSH 12)                     ; (MTIMES)
64    (CONST&PUSH 13)                     ; (RAT)
65    (CONST&PUSH 1)                      ; 1
66    (GETVALUE&PUSH 0)                   ; *N
68    (LIST&PUSH 3)
70    (CONST&PUSH 14)                     ; $%PI
71    (CONST&PUSH 4)                      ; $%I
72    (LIST&PUSH 4)
74    (CALL2 15)                          ; POWER*
76    (UNBIND1)
77    (JMP L39)
79    L79
79    (GETVALUE&PUSH 0)                   ; *N
81    (JMPIFEQTO 3 L45)                   ; 2
84    (GETVALUE&PUSH 5)                   ; $DOMAIN
86    (JMPIFEQTO 6 L51)                   ; $REAL
89    (GETVALUE 9)                        ; $M1PBRANCH
91    (JMPIF L59)
93    (CONST 2)                           ; -1
94    (JMP L34)
96    L96
96    (CONST&PUSH 2)                      ; -1
97    (LOAD&PUSH 6)
98    (CALL2&PUSH 21)                     ; MUL2*
100   (GETVALUE&PUSH 0)                   ; *N
102   (CALL2 22)                          ; NRTHK1
104   (JMP L39)


Disassembly of function #:|(DEFUN NRTHK1 (IN *N) ...)-193|
(CONST 0) = NRTHK1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NRTHK1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NRTHK1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NRTHK1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NRTHK1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NRTHK1
8     (SKIP&RET 1)


Disassembly of function NRTHK1
(CONST 0) = *N
(CONST 1) = $RADEXPAND
(CONST 2) = NRTHK2
(CONST 3) = -1
(CONST 4) = NRTHK
(CONST 5) = MUL2
(CONST 6) = MUL2*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*N $RADEXPAND)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; *N
3     (GETVALUE 1)                        ; $RADEXPAND
5     (JMPIF L18)
7     (CONST&PUSH 3)                      ; -1
8     (LOAD&PUSH 6)
9     (CALL2&PUSH 6)                      ; MUL2*
11    (GETVALUE&PUSH 0)                   ; *N
13    (CALL2 2)                           ; NRTHK2
15    L15
15    (UNBIND1)
16    (SKIP&RET 3)
18    L18
18    (LOAD&PUSH 5)
19    (GETVALUE&PUSH 0)                   ; *N
21    (CALL2&PUSH 2)                      ; NRTHK2
23    (CONST&PUSH 3)                      ; -1
24    (GETVALUE&PUSH 0)                   ; *N
26    (CALL2&PUSH 4)                      ; NRTHK
28    (CALL2 5)                           ; MUL2
30    (JMP L15)


Disassembly of function #:|(DEFUN NRTHK2 (IN *N) ...)-194|
(CONST 0) = NRTHK2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NRTHK2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NRTHK2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NRTHK2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NRTHK2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NRTHK2
8     (SKIP&RET 1)


Disassembly of function NRTHK2
(CONST 0) = *N
(CONST 1) = (RAT)
(CONST 2) = 1
(CONST 3) = POWER*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*N)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; *N
3     (LOAD&PUSH 5)
4     (CONST&PUSH 1)                      ; (RAT)
5     (CONST&PUSH 2)                      ; 1
6     (GETVALUE&PUSH 0)                   ; *N
8     (LIST&PUSH 3)
10    (CALL2 3)                           ; POWER*
12    (UNBIND1)
13    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VAR $RATFAC ...) (FIXNUM NARGS))-195|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $INTEGRATE NARGS ...)-196|
(CONST 0) = $INTEGRATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INTEGRATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGRATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INTEGRATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INTEGRATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INTEGRATE
8     (SKIP&RET 1)


Disassembly of function $INTEGRATE
(CONST 0) = $RATFAC
(CONST 1) = 2
(CONST 2) = CONTEXT
(CONST 3) = %RISCH
(CONST 4) = NOUNL
(CONST 5) = MEMQ
(CONST 6) = 1
(CONST 7) = NARG1
(CONST 8) = RISCHINT
(CONST 9) = SININT
(CONST 10) = CONTEXT-UNWINDER
(CONST 11) = 4
(CONST 12) = 3
(CONST 13) = $DEFINT
(CONST 14) = $INTEGRATE
(CONST 15) = WNA-ERR
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (NOUNL CONTEXT)
59 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; $RATFAC
6     (LOAD&PUSH 3)
7     (CONST&PUSH 1)                      ; 2
8     (CALLSR&JMPIF 1 45 L36)             ; =
12    (LOAD&PUSH 3)
13    (CONST&PUSH 11)                     ; 4
14    (CALLSR&JMPIF 1 45 L65)             ; =
18    (CONST&PUSH 14)                     ; $INTEGRATE
19    (CALL1 15)                          ; WNA-ERR
21    L21
21    (UNBIND1)
22    (SKIP&RET 3)
24    L24
24    (CONST&PUSH 6)                      ; 1
25    (LOAD&PUSH 9)
26    (CALL2&PUSH 7)                      ; NARG1
28    (CONST&PUSH 1)                      ; 2
29    (LOAD&PUSH 10)
30    (CALL2&PUSH 7)                      ; NARG1
32    (CALL2 8)                           ; RISCHINT
34    (JMP L58)
36    L36
36    (GETVALUE&PUSH 2)                   ; CONTEXT
38    (CALL1 2)                           ; CONTEXT
40    (BIND 2)                            ; CONTEXT
42    (CONST&PUSH 3)                      ; %RISCH
43    (GETVALUE&PUSH 4)                   ; NOUNL
45    (CALL2&JMPIF 5 L24)                 ; MEMQ
48    (CONST&PUSH 6)                      ; 1
49    (LOAD&PUSH 9)
50    (CALL2&PUSH 7)                      ; NARG1
52    (CONST&PUSH 1)                      ; 2
53    (LOAD&PUSH 10)
54    (CALL2&PUSH 7)                      ; NARG1
56    (CALL2 9)                           ; SININT
58    L58
58    (PUSH)
59    (CALL0 10)                          ; CONTEXT-UNWINDER
61    (POP)
62    (UNBIND1)
63    (JMP L21)
65    L65
65    (CONST&PUSH 6)                      ; 1
66    (LOAD&PUSH 6)
67    (CALL2&PUSH 7)                      ; NARG1
69    (CONST&PUSH 1)                      ; 2
70    (LOAD&PUSH 7)
71    (CALL2&PUSH 7)                      ; NARG1
73    (CONST&PUSH 12)                     ; 3
74    (LOAD&PUSH 8)
75    (CALL2&PUSH 7)                      ; NARG1
77    (CONST&PUSH 11)                     ; 4
78    (LOAD&PUSH 9)
79    (CALL2&PUSH 7)                      ; NARG1
81    (CALL 4 13)                         ; $DEFINT
84    (JMP L21)


Disassembly of function #:|(DEFMFUN RATP (A VAR) ...)-197|
(CONST 0) = RATP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATP
8     (SKIP&RET 1)


Disassembly of function RATP
(CONST 0) = VAR
(CONST 1) = (MPLUS MTIMES)
(CONST 2) = MEMQ
(CONST 3) = MEXPT
(CONST 4) = FREE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
67 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD 5)
4     (JMPIFATOM L28)
6     (LOAD 5)
7     (CAR)
8     (CAR&PUSH)
9     (CONST&PUSH 1)                      ; (MPLUS MTIMES)
10    (CALL2&JMPIF 2 L36)                 ; MEMQ
13    (LOAD 5)
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFEQTO 3 L65)                   ; MEXPT
19    (LOAD 5)
20    L20
20    (PUSH)
21    (GETVALUE&PUSH 0)                   ; VAR
23    (CALL2 4)                           ; FREE
25    L25
25    (UNBIND1)
26    (SKIP&RET 3)
28    L28
28    (T)
29    (JMP L25)
31    L31
31    (NIL)
32    (SKIP 1)
34    (JMP L25)
36    L36
36    (LOAD&CDR&PUSH 5)
38    (LOAD&JMPIFNOT 0 L54)
41    L41
41    (LOAD&CAR&PUSH 0)
43    (GETVALUE&PUSH 0)                   ; VAR
45    (JSR L0)
47    (JMPIFNOT L31)
49    (LOAD&CDR&STORE 0)
51    (LOAD&JMPIF 0 L41)
54    L54
54    (T)
55    (SKIP 1)
57    (JMP L25)
59    L59
59    (LOAD 5)
60    (CDR)
61    (CDR)
62    (CAR)
63    (JMP L20)
65    L65
65    (LOAD 5)
66    (CDR)
67    (CAR&PUSH)
68    (GETVALUE&PUSH 0)                   ; VAR
70    (CALL2&JMPIF 4 L59)                 ; FREE
73    (LOAD 5)
74    (CDR)
75    (CDR)
76    (CAR&PUSH)
77    (CALLS2 12)                         ; INTEGERP
79    (JMPIFNOT1 L25)
81    (LOAD 5)
82    (CDR)
83    (CAR&PUSH)
84    (GETVALUE&PUSH 0)                   ; VAR
86    (JSR L0)
89    (JMP L25)


Disassembly of function #:|(DEFMFUN RATNUMERATOR (R) ...)-198|
(CONST 0) = RATNUMERATOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATNUMERATOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATNUMERATOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATNUMERATOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATNUMERATOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATNUMERATOR
8     (SKIP&RET 1)


Disassembly of function RATNUMERATOR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L13)
3     (LOAD 1)
4     (CDR)
5     (JMPIFATOM L16)
7     (LOAD 1)
8     (CDR)
9     (CAR&PUSH)
10    (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
13    L13
13    (LOAD 1)
14    (SKIP&RET 2)
16    L16
16    (LOAD 1)
17    (CAR)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN RATDENOMINATOR (R) ...)-199|
(CONST 0) = RATDENOMINATOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATDENOMINATOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATDENOMINATOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATDENOMINATOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATDENOMINATOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATDENOMINATOR
8     (SKIP&RET 1)


Disassembly of function RATDENOMINATOR
(CONST 0) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L17)
3     (LOAD 1)
4     (CDR)
5     (JMPIFATOM L13)
7     (LOAD 1)
8     (CDR)
9     (CAR&PUSH)
10    (CALLS2&JMPIF 8 L20)                ; NUMBERP
13    L13
13    (LOAD 1)
14    (CDR)
15    (SKIP&RET 2)
17    L17
17    (CONST 0)                           ; 1
18    (SKIP&RET 2)
20    L20
20    (CONST 0)                           ; 1
21    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VAR))-200|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN BPROG (R S) ...)-201|
(CONST 0) = BPROG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BPROG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BPROG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BPROG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BPROG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BPROG
8     (SKIP&RET 1)


Disassembly of function BPROG
(CONST 0) = RATFIX
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = VAR
(CONST 4) = PDEGREE
(CONST 5) = PGCDEXPON
(CONST 6) = PEXPON*//
(CONST 7) = PTIMES
(CONST 8) = RATREDUCE
(CONST 9) = PSQUOREM1
(CONST 10) = PSIMP
(CONST 11) = PQUOTIENTCHK
(CONST 12) = PDIFFERENCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
148 byte-code instructions:
0     (PUSH-NIL 10)
2     (LOAD&PUSH 12)
3     (CALL1 0)                           ; RATFIX
5     (STORE 12)
7     (LOAD&PUSH 11)
8     (CALL1 0)                           ; RATFIX
10    (STORE 11)
12    (CONST 1)                           ; 0
13    (STORE 5)
14    (STORE 6)
15    (CONST 2)                           ; 1
16    (STORE 7)
17    (STORE 4)
18    (STORE 1)
19    (STORE 0)
20    (LOAD&CAR&STORE 12 9)
23    (PUSH)
24    (GETVALUE&PUSH 3)                   ; VAR
26    (CALL2&PUSH 4)                      ; PDEGREE
28    (CALLS2&JMPIF 145 L35)              ; ZEROP
31    (LOAD&PUSH 9)
32    (CALL1 5)                           ; PGCDEXPON
34    (STORE 0)
35    L35
35    (LOAD&CAR&STORE 11 8)
38    (PUSH)
39    (GETVALUE&PUSH 3)                   ; VAR
41    (CALL2&PUSH 4)                      ; PDEGREE
43    (CALLS2&JMPIF 145 L143)             ; ZEROP
47    (LOAD&PUSH 0)
48    (CONST&PUSH 2)                      ; 1
49    (CALLSR&JMPIF 1 45 L143)            ; =
54    (LOAD&PUSH 0)
55    (LOAD&PUSH 9)
56    (CALL1&PUSH 5)                      ; PGCDEXPON
58    (CALLSR&STORE 2 57 0)               ; GCD
62    (LOAD&PUSH 9)
63    (LOAD&PUSH 1)
64    (NIL&PUSH)
65    (CALL 3 6)                          ; PEXPON*//
68    (STORE 9)
70    (LOAD&PUSH 8)
71    (LOAD&PUSH 1)
72    (NIL&PUSH)
73    (CALL 3 6)                          ; PEXPON*//
76    (STORE 8)
78    (JMP L143)
80    L80
80    (LOAD&CDR&PUSH 9)
82    (LOAD&CDR&PUSH 9)
84    (T&PUSH)
85    (CALL 3 9)                          ; PSQUOREM1
88    (STORE 3)
89    (GETVALUE&PUSH 3)                   ; VAR
91    (LOAD 4)
92    (CDR)
93    (CAR&PUSH)
94    (CALL2 10)                          ; PSIMP
96    (STORE 2)
97    (GETVALUE&PUSH 3)                   ; VAR
99    (LOAD 4)
100   (CDR)
101   (CDR)
102   (CAR&PUSH)
103   (CALL2&PUSH 10)                     ; PSIMP
105   (LOAD&PUSH 2)
106   (CALL2 11)                          ; PQUOTIENTCHK
108   (STORE 9)
110   (LOAD&CAR&STORE 3 3)
113   (PUSH)
114   (LOAD&PUSH 8)
115   (CALL2&PUSH 7)                      ; PTIMES
117   (LOAD&PUSH 3)
118   (LOAD&PUSH 8)
119   (CALL2&PUSH 7)                      ; PTIMES
121   (CALL2&PUSH 12)                     ; PDIFFERENCE
123   (LOAD&PUSH 2)
124   (CALL2 11)                          ; PQUOTIENTCHK
126   (STORE 7)
127   (LOAD&PUSH 3)
128   (LOAD&PUSH 6)
129   (CALL2&PUSH 7)                      ; PTIMES
131   (LOAD&PUSH 3)
132   (LOAD&PUSH 6)
133   (CALL2&PUSH 7)                      ; PTIMES
135   (CALL2&PUSH 12)                     ; PDIFFERENCE
137   (LOAD&PUSH 2)
138   (CALL2 11)                          ; PQUOTIENTCHK
140   (STORE 5)
141   (LOAD 3)
142   (STORE 1)
143   L143
143   (LOAD&PUSH 9)
144   (GETVALUE&PUSH 3)                   ; VAR
146   (CALL2&PUSH 4)                      ; PDEGREE
148   (LOAD&PUSH 9)
149   (GETVALUE&PUSH 3)                   ; VAR
151   (CALL2&PUSH 4)                      ; PDEGREE
153   (CALLSR&JMPIFNOT 1 47 L173)         ; <
157   (LOAD&PUSH 8)
158   (LOAD 10)
159   (STORE 9)
161   (POP&STORE 9)
163   (LOAD&PUSH 6)
164   (LOAD 8)
165   (STORE 7)
166   (POP&STORE 7)
168   (LOAD&PUSH 4)
169   (LOAD 6)
170   (STORE 5)
171   (POP&STORE 5)
173   L173
173   (LOAD&PUSH 8)
174   (GETVALUE&PUSH 3)                   ; VAR
176   (CALL2&PUSH 4)                      ; PDEGREE
178   (CALLS2&JMPIFNOT 145 L80)           ; ZEROP
182   (LOAD&PUSH 6)
183   (GETVALUE&PUSH 3)                   ; VAR
185   (CALL2&PUSH 4)                      ; PDEGREE
187   (CALLS2&JMPIF 145 L197)             ; ZEROP
190   (LOAD&PUSH 6)
191   (LOAD&PUSH 1)
192   (T&PUSH)
193   (CALL 3 6)                          ; PEXPON*//
196   (STORE 6)
197   L197
197   (LOAD&PUSH 4)
198   (GETVALUE&PUSH 3)                   ; VAR
200   (CALL2&PUSH 4)                      ; PDEGREE
202   (CALLS2&JMPIF 145 L212)             ; ZEROP
205   (LOAD&PUSH 4)
206   (LOAD&PUSH 1)
207   (T&PUSH)
208   (CALL 3 6)                          ; PEXPON*//
211   (STORE 4)
212   L212
212   (LOAD&CDR&PUSH 12)
214   (LOAD&PUSH 7)
215   (CALL2&PUSH 7)                      ; PTIMES
217   (LOAD&PUSH 9)
218   (CALL2&PUSH 8)                      ; RATREDUCE
220   (LOAD&CDR&PUSH 12)
222   (LOAD&PUSH 6)
223   (CALL2&PUSH 7)                      ; PTIMES
225   (LOAD&PUSH 10)
226   (CALL2 8)                           ; RATREDUCE
228   (CONS)
229   (SKIP&RET 13)


Disassembly of function #:|(DEFMFUN RATDIFFERENCE (A B) ...)-202|
(CONST 0) = RATDIFFERENCE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATDIFFERENCE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATDIFFERENCE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATDIFFERENCE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATDIFFERENCE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATDIFFERENCE
8     (SKIP&RET 1)


Disassembly of function RATDIFFERENCE
(CONST 0) = RATMINUS
(CONST 1) = RATPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALL1&PUSH 0)                      ; RATMINUS
4     (CALL2 1)                           ; RATPLUS
6     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RATPL (A B) ...)-203|
(CONST 0) = RATPL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATPL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATPL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATPL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATPL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATPL
8     (SKIP&RET 1)


Disassembly of function RATPL
(CONST 0) = RATFIX
(CONST 1) = RATPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&PUSH 0)                      ; RATFIX
3     (LOAD&PUSH 2)
4     (CALL1&PUSH 0)                      ; RATFIX
6     (CALL2 1)                           ; RATPLUS
8     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RATTI (A B C) ...)-204|
(CONST 0) = RATTI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATTI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATTI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATTI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATTI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATTI
8     (SKIP&RET 1)


Disassembly of function RATTI
(CONST 0) = RATFIX
(CONST 1) = RATTIMES
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CALL1&PUSH 0)                      ; RATFIX
3     (LOAD&PUSH 3)
4     (CALL1&PUSH 0)                      ; RATFIX
6     (LOAD&PUSH 3)
7     (CALL 3 1)                          ; RATTIMES
10    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN RATQU (A B) ...)-205|
(CONST 0) = RATQU
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATQU>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATQU
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATQU
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATQU>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATQU
8     (SKIP&RET 1)


Disassembly of function RATQU
(CONST 0) = RATFIX
(CONST 1) = RATQUOTIENT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&PUSH 0)                      ; RATFIX
3     (LOAD&PUSH 2)
4     (CALL1&PUSH 0)                      ; RATFIX
6     (CALL2 1)                           ; RATQUOTIENT
8     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RATFIX (A) ...)-206|
(CONST 0) = RATFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATFIX
8     (SKIP&RET 1)


Disassembly of function RATFIX
(CONST 0) = RATNUMERATOR
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOAD&PUSH 2)
2     (CALL1&PUSH 0)                      ; RATNUMERATOR
4     (CALLS2&JMPIF 2 L10)                ; EQUAL
7     (LOAD 1)
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CONST 1)                           ; 1
12    (CONS)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN RATDIVIDE (F G) ...)-207|
(CONST 0) = RATDIVIDE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATDIVIDE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATDIVIDE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATDIVIDE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATDIVIDE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATDIVIDE
8     (SKIP&RET 1)


Disassembly of function RATDIVIDE
(CONST 0) = RATFIX
(CONST 1) = PDIVIDE
(CONST 2) = RATTI
(CONST 3) = RATQU
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
30 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (CALL1&PUSH 0)                      ; RATFIX
4     (LOAD&CAR&STORE 0 1)
7     (LOAD&CDR&STORE 0)
9     (NIL&PUSH)
10    (LOAD&PUSH 4)
11    (CALL1&PUSH 0)                      ; RATFIX
13    (LOAD&CAR&STORE 0 1)
16    (LOAD&CDR&STORE 0)
18    (NIL&PUSH)
19    (LOAD&PUSH 4)
20    (LOAD&PUSH 3)
21    (CALL2&PUSH 1)                      ; PDIVIDE
23    (LOAD&CAR&STORE 0 1)
26    (LOAD 0)
27    (CDR)
28    (CAR)
29    (STORE 0)
30    (LOAD&PUSH 1)
31    (LOAD&PUSH 3)
32    (T&PUSH)
33    (CALL&PUSH 3 2)                     ; RATTI
36    (LOAD&PUSH 5)
37    (CALL2&PUSH 3)                      ; RATQU
39    (LOAD&PUSH 1)
40    (LOAD&PUSH 6)
41    (CALL2 3)                           ; RATQU
43    (CONS)
44    (SKIP&RET 9)


Disassembly of function #:|(DEFMFUN POLCOEF (L N) ...)-208|
(CONST 0) = POLCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLCOEF
8     (SKIP&RET 1)


Disassembly of function POLCOEF
(CONST 0) = VAR
(CONST 1) = 0
(CONST 2) = PTERM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
23 byte-code instructions:
0     (LOAD 2)
1     (JMPIFATOM L30)
3     (GETVALUE&PUSH 0)                   ; VAR
5     (LOAD&CAR&PUSH 3)
7     (LOAD&PUSH 1)
8     (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
10    (LOAD&PUSH 1)
11    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
13    (CALLSR 1 48)                       ; >
16    (SKIP 2)
18    (JMPIF L30)
20    (LOAD&CDR&PUSH 2)
22    (LOAD&PUSH 2)
23    (CALL2 2)                           ; PTERM
25    (SKIP&RET 3)
27    L27
27    (LOAD 2)
28    (SKIP&RET 3)
30    L30
30    (LOAD&PUSH 1)
31    (JMPIFEQTO 1 L27)                   ; 0
34    (CONST 1)                           ; 0
35    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DISREP (L) ...)-209|
(CONST 0) = DISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISREP
8     (SKIP&RET 1)


Disassembly of function DISREP
(CONST 0) = RATNUMERATOR
(CONST 1) = RATFORM
(CONST 2) = 1
(CONST 3) = $RATDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RATFORM)
16 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; RATNUMERATOR
3     (LOAD&PUSH 2)
4     (CALLS2&JMPIF 2 L15)                ; EQUAL
7     (GETVALUE&PUSH 1)                   ; RATFORM
9     (LOAD 2)
10    L10
10    (CONS&PUSH)
11    (CALL1 3)                           ; $RATDISREP
13    (SKIP&RET 2)
15    L15
15    (GETVALUE&PUSH 1)                   ; RATFORM
17    (LOAD&PUSH 2)
18    (CONST 2)                           ; 1
19    (CONS)
20    (JMP L10)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL VAR))-210|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *AFTERFLAG NIL)-211|
(CONST 0) = (SPECIAL *AFTERFLAG)
(CONST 1) = *AFTERFLAG
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *AFTERFLAG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *AFTERFLAG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *AFTERFLAG
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *AFTERFLAG
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MATCHERR NIL ...)-212|
(CONST 0) = MATCHERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MATCHERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MATCHERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MATCHERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MATCHERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MATCHERR
8     (SKIP&RET 1)


Disassembly of function MATCHERR
(CONST 0) = MATCH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; MATCH
1     (NIL)
2     (THROW)


Disassembly of function #:|(DEFMFUN KAR (X) ...)-213|
(CONST 0) = KAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KAR
8     (SKIP&RET 1)


Disassembly of function KAR
(CONST 0) = X
(CONST 1) = MATCHERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L13)
7     (GETVALUE 0)                        ; X
9     (CAR)
10    L10
10    (UNBIND1)
11    (SKIP&RET 2)
13    L13
13    (CALL0 1)                           ; MATCHERR
15    (JMP L10)


Disassembly of function #:|(DEFMFUN KDR (X) ...)-214|
(CONST 0) = KDR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KDR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KDR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KDR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KDR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KDR
8     (SKIP&RET 1)


Disassembly of function KDR
(CONST 0) = X
(CONST 1) = MATCHERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L13)
7     (GETVALUE 0)                        ; X
9     (CDR)
10    L10
10    (UNBIND1)
11    (SKIP&RET 2)
13    L13
13    (CALL0 1)                           ; MATCHERR
15    (JMP L10)


Disassembly of function #:|(DEFMFUN SIMPARGS1 (A VESTIGIAL C) ...)-215|
(CONST 0) = SIMPARGS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPARGS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPARGS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPARGS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPARGS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPARGS1
8     (SKIP&RET 1)


Disassembly of function SIMPARGS1
(CONST 0) = SIMPARGS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 3)
1     (LOAD&PUSH 2)
2     (CALL2 0)                           ; SIMPARGS
4     (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN *KAR (X) ...)-216|
(CONST 0) = *KAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *KAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *KAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *KAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *KAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *KAR
8     (SKIP&RET 1)


Disassembly of function *KAR
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L12)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFQUOTE RETLIST (&REST L) ...)-217-2|
(CONST 0) = RETLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RETLIST>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; RETLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RETLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RETLIST>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function RETLIST
(CONST 0) = |RETLIST-aux|
(CONST 1) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; |RETLIST-aux|
3     (CONST&PUSH 1)                      ; QUOTE
4     (LOAD&PUSH 2)
5     (LIST&PUSH 2)
7     (LIST 2)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFQUOTE RETLIST (&REST L) ...)-217-3|
(CONST 0) = |RETLIST-aux|
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE |RETLIST-aux|>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; |RETLIST-aux|
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; |RETLIST-aux|
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE |RETLIST-aux|>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; |RETLIST-aux|
8     (SKIP&RET 1)


Disassembly of function |RETLIST-aux|
(CONST 0) = (MLIST SIMP)
(CONST 1) = (MEQUAL SIMP)
(CONST 2) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
23 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MLIST SIMP)
1     (NIL&PUSH)
2     (LOAD&PUSH 3)
3     (JMP L20)
5     L5
5     (LOAD&CAR&PUSH 0)
7     (CONST&PUSH 1)                      ; (MEQUAL SIMP)
8     (LOAD&PUSH 1)
9     (LOAD&PUSH 2)
10    (CALL1&PUSH 2)                      ; MEVAL
12    (LIST&PUSH 3)
14    (LOAD&CONS&STORE 2)
16    (SKIP 1)
18    (LOAD&CDR&STORE 0)
20    L20
20    (LOAD&PUSH 0)
21    (CALLS1&JMPIFNOT 146 L5)            ; ENDP
24    (SKIP 1)
26    (LOAD&PUSH 0)
27    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
29    (SKIP 1)
31    (CONS)
32    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN NTHKDR (X C) ...)-218|
(CONST 0) = NTHKDR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NTHKDR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NTHKDR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NTHKDR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NTHKDR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NTHKDR
8     (SKIP&RET 1)


Disassembly of function NTHKDR
(CONST 0) = X
(CONST 1) = KDR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
15 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 4)
4     (CALLS2&JMPIF 145 L18)              ; ZEROP
7     (GETVALUE&PUSH 0)                   ; X
9     (CALL1&PUSH 1)                      ; KDR
11    (LOAD&DEC&PUSH 5)
13    (JSR L0)
15    L15
15    (UNBIND1)
16    (SKIP&RET 3)
18    L18
18    (GETVALUE 0)                        ; X
20    (JMP L15)


Disassembly of function #:|(DECLARE-TOP (NOTYPE L1 L2 ...))-219|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/simp.fas
Wrote file /cygdrive/e/temp/maxima/src/simp.lis