Listing of compilation of file /cygdrive/e/temp/maxima/src/newinv.lisp
on 2002-12-17 13:35:13 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/newinv.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE NEWINV)-2|
(CONST 0) = NEWINV
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWINV
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *PTR* *PTC* ...))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (FIXNUM *R0))-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN MULTBK (L AX M) ...)-5|
(CONST 0) = MULTBK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULTBK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULTBK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULTBK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULTBK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULTBK
8     (SKIP&RET 1)


Disassembly of function MULTBK
(CONST 0) = L
(CONST 1) = AX
(CONST 2) = M
(CONST 3) = E
(CONST 4) = J
(CONST 5) = 2
(CONST 6) = 1
(CONST 7) = RATTIMES
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (E J AX L M)
writes special variables : (J L E)
56 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; AX
6     (LOAD 7)
7     (BIND 2)                            ; M
9     (NIL)
10    (BIND 3)                            ; E
12    (GETVALUE&PUSH 2)                   ; M
14    (CALLS2 150)                        ; 1+
16    (BIND 4)                            ; J
18    (JMP L77)
20    L20
20    (GETVALUE 0)                        ; L
22    (CAR)
23    (SETVALUE 3)                        ; E
25    (GETVALUE 0)                        ; L
27    (CDR)
28    (SETVALUE 0)                        ; L
30    (CONST&PUSH 6)                      ; 1
31    (JMP L62)
33    L33
33    (GETVALUE&PUSH 1)                   ; AX
35    (GETVALUE&PUSH 4)                   ; J
37    (GETVALUE&PUSH 3)                   ; E
39    (GETVALUE&PUSH 1)                   ; AX
41    (LOAD&PUSH 4)
42    (GETVALUE&PUSH 4)                   ; J
44    (CALLSR&PUSH 2 1)                   ; AREF
47    (T&PUSH)
48    (CALL&PUSH 3 7)                     ; RATTIMES
51    (LOAD&PUSH 2)
52    (LOAD&PUSH 4)
53    (LOAD&PUSH 3)
54    (LOAD&PUSH 3)
55    (CALLSR 2 2)                        ; SYSTEM::STORE
58    (SKIP 3)
60    (LOAD&INC&STORE 0)
62    L62
62    (LOAD&PUSH 0)
63    (GETVALUE&PUSH 2)                   ; M
65    (CALLSR&JMPIFNOT 1 48 L33)          ; >
69    (SKIP 1)
71    (GETVALUE&PUSH 4)                   ; J
73    (CALLS2 150)                        ; 1+
75    (SETVALUE 4)                        ; J
77    L77
77    (GETVALUE&PUSH 4)                   ; J
79    (CONST&PUSH 5)                      ; 2
80    (GETVALUE&PUSH 2)                   ; M
82    (CALLSR&PUSH 2 55)                  ; *
85    (CALLSR&JMPIFNOT 1 48 L20)          ; >
90    (UNBIND1)
91    (NIL)
92    (UNBIND 4)
94    (SKIP&RET 4)


Disassembly of function #:|(DEFUN CTIMEMT (X Y) ...)-6|
(CONST 0) = CTIMEMT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CTIMEMT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CTIMEMT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CTIMEMT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CTIMEMT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CTIMEMT
8     (SKIP&RET 1)


Disassembly of function CTIMEMT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = C
(CONST 3) = TIMESROW
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X C Y)
writes special variables : (Y C)
26 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL)
7     (BIND 2)                            ; C
9     (GETVALUE 1)                        ; Y
11    (JMPIFNOT L38)
13    L13
13    (GETVALUE&PUSH 2)                   ; C
15    (GETVALUE&PUSH 0)                   ; X
17    (GETVALUE 1)                        ; Y
19    (CAR&PUSH)
20    (CALL2&PUSH 3)                      ; TIMESROW
22    (LIST&PUSH 1)
24    (CALLSR 2 35)                       ; NCONC
27    (SETVALUE 2)                        ; C
29    (GETVALUE 1)                        ; Y
31    (CDR)
32    (SETVALUE 1)                        ; Y
34    (GETVALUE 1)                        ; Y
36    (JMPIF L13)
38    L38
38    (GETVALUE 2)                        ; C
40    (UNBIND 3)
42    (SKIP&RET 3)


Disassembly of function #:|(DEFUN STORA (AX M EI ...) ...)-7|
(CONST 0) = STORA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STORA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STORA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STORA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STORA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STORA
8     (SKIP&RET 1)


Disassembly of function STORA
(CONST 0) = AX
(CONST 1) = M
(CONST 2) = R
(CONST 3) = 0
(CONST 4) = J
(CONST 5) = RATREDUCE
(CONST 6) = *PTR*
(CONST 7) = *PTC*
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*PTC* *PTR* M AX J R)
writes special variable : (J)
74 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; AX
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (NIL&PUSH)
10    (CONST&PUSH 3)                      ; 0
11    (CONST 3)                           ; 0
12    (BIND 4)                            ; J
14    (PUSH-NIL 2)
16    (CONST 3)                           ; 0
17    (STORE 5)
18    (LOAD&JMPIFNOT 18 L42)
21    L21
21    (LOAD&CAR&STORE 18 0)
24    (LOAD&CDR&STORE 18)
26    (LOAD 0)
27    (CAR)
28    (CAR)
29    (STORE 6)
30    (LOAD&CDR&STORE 0)
32    L32
32    (GETVALUE 2)                        ; R
34    (SETVALUE 4)                        ; J
36    (LOAD&JMPIF 0 L52)
39    (LOAD&JMPIF 18 L21)
42    L42
42    (NIL)
43    (SKIP 2)
45    (UNBIND1)
46    (SKIP 2)
48    (UNBIND 3)
50    (SKIP&RET 5)
52    L52
52    (LOAD&INC&STORE 5)
54    (LOAD&CAR&STORE 0 1)
57    (LOAD&CDR&STORE 0)
59    (LOAD&JMPIFNOT 1 L32)
62    L62
62    (GETVALUE&PUSH 4)                   ; J
64    (CALLS2 150)                        ; 1+
66    (SETVALUE 4)                        ; J
68    (GETVALUE&PUSH 0)                   ; AX
70    (GETVALUE&PUSH 1)                   ; M
72    (GETVALUE&PUSH 4)                   ; J
74    (CALLSR&PUSH 2 53)                  ; +
77    (LOAD 3)
78    (CAR)
79    (CAR&PUSH)
80    (LOAD&PUSH 9)
81    (CALL2&PUSH 5)                      ; RATREDUCE
83    (LOAD&PUSH 2)
84    (LOAD&PUSH 9)
85    (LOAD&PUSH 3)
86    (LOAD&PUSH 3)
87    (CALLSR 2 2)                        ; SYSTEM::STORE
90    (SKIP 3)
92    (GETVALUE&PUSH 0)                   ; AX
94    (GETVALUE&PUSH 6)                   ; *PTR*
96    (LOAD&PUSH 7)
97    (CALLSR&PUSH 1 1)                   ; AREF
100   (GETVALUE&PUSH 7)                   ; *PTC*
102   (GETVALUE&PUSH 4)                   ; J
104   (CALLSR&PUSH 1 1)                   ; AREF
107   (LOAD&PUSH 2)
108   (LOAD&PUSH 2)
109   (LOAD&PUSH 2)
110   (NIL&PUSH)
111   (CALLSR 2 2)                        ; SYSTEM::STORE
114   (SKIP 3)
116   (LOAD&CDR&STORE 1)
118   (LOAD&JMPIFNOT 1 L32)
122   (JMP L62)


Disassembly of function #:|(DEFUN PRODHK (RI D R ...) ...)-8|
(CONST 0) = PRODHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRODHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRODHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRODHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRODHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRODHK
8     (SKIP&RET 1)


Disassembly of function PRODHK
(CONST 0) = D
(CONST 1) = R
(CONST 2) = M
(CONST 3) = E
(CONST 4) = *RR*
(CONST 5) = *R0
(CONST 6) = AX
(CONST 7) = STORA
(CONST 8) = DETL*
(CONST 9) = X
(CONST 10) = Y
(CONST 11) = BMHK
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X *RR* M AX DETL* D E R)
writes special variables : (DETL* E *R0)
89 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; D
3     (LOAD 5)
4     (BIND 1)                            ; R
6     (LOAD 7)
7     (BIND 2)                            ; M
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; E
13    (NIL)
14    (BIND 4)                            ; *RR*
16    (NIL)
17    (BIND 5)                            ; *R0
19    (NIL&PUSH)
20    (GETVALUE 1)                        ; R
22    (SETVALUE 5)                        ; *R0
24    (LOAD 24)
26    (STORE 10)
28    (LOAD&JMPIFNOT 10 L54)
31    L31
31    (LOAD 10)
32    (CAR)
33    (SETVALUE 3)                        ; E
35    (LOAD&CDR&STORE 10)
37    (GETVALUE&PUSH 3)                   ; E
39    (GETVALUE&PUSH 0)                   ; D
41    (LOAD&PUSH 2)
42    (GETVALUE&PUSH 1)                   ; R
44    (GETVALUE&PUSH 8)                   ; DETL*
46    (CALL&PUSH 5 11)                    ; BMHK
49    (LOAD&CONS&STORE 0)
51    (LOAD&JMPIF 10 L31)
54    L54
54    (GETVALUE&PUSH 6)                   ; AX
56    (GETVALUE&PUSH 2)                   ; M
58    (LOAD&PUSH 2)
59    (GETVALUE&PUSH 0)                   ; D
61    (LIST&PUSH 1)
63    (CALLSR&PUSH 2 34)                  ; APPEND
66    (GETVALUE&PUSH 1)                   ; R
68    (CALL 4 7)                          ; STORA
71    (GETVALUE 0)                        ; D
73    (CAR&PUSH)
74    (GETVALUE 8)                        ; DETL*
76    (CONS)
77    (SETVALUE 8)                        ; DETL*
79    (GETVALUE&PUSH 0)                   ; D
81    (LIST&PUSH 1)
83    (NIL&PUSH)
84    (LOAD&PUSH 26)
86    (GETVALUE&PUSH 4)                   ; *RR*
88    (CALLS2&PUSH 73)                    ; NREVERSE
90    (JMP L124)
92    L92
92    (SKIP 2)
94    (JMP L136)
96    L96
96    (LOAD&CAR&PUSH 1)
98    (LOAD 1)
99    (BIND 9)                            ; X
101   (LOAD 3)
102   (BIND 10)                           ; Y
104   (GETVALUE&PUSH 9)                   ; X
106   (GETVALUE&PUSH 10)                  ; Y
108   (LIST&PUSH 1)
110   (CALLSR 2 35)                       ; NCONC
113   (UNBIND 2)
115   (PUSH)
116   (LOAD&CONS&STORE 4)
118   (SKIP 2)
120   (LOAD&CDR&STORE 1)
122   (LOAD&CDR&STORE 0)
124   L124
124   (LOAD&PUSH 1)
125   (CALLS1&JMPIF 146 L92)              ; ENDP
128   (LOAD&CAR&PUSH 1)
130   (LOAD&PUSH 1)
131   (CALLS1&JMPIFNOT 146 L96)           ; ENDP
134   (SKIP 3)
136   L136
136   (LOAD&PUSH 0)
137   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
139   (SKIP 1)
141   (CONS)
142   (SKIP 1)
144   (UNBIND 3)
146   (SKIP 1)
148   (UNBIND 3)
150   (SKIP&RET 5)


Disassembly of function #:|(DEFUN OBMTRX (AX R S ...) ...)-9|
(CONST 0) = OBMTRX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OBMTRX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OBMTRX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OBMTRX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OBMTRX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OBMTRX
8     (SKIP&RET 1)


Disassembly of function OBMTRX
(CONST 0) = AX
(CONST 1) = R
(CONST 2) = S
(CONST 3) = J
(CONST 4) = ANS
(CONST 5) = 0
(CONST 6) = D
(CONST 7) = *PTR*
(CONST 8) = *PTC*
(CONST 9) = *NONZ*
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS D *NONZ* *PTC* R *PTR* AX J S)
writes special variables : (R ANS *NONZ* D J S)
72 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; AX
3     (LOAD 7)
4     (BIND 1)                            ; R
6     (LOAD 9)
7     (BIND 2)                            ; S
9     (LOAD 10)
10    (BIND 3)                            ; J
12    (NIL)
13    (BIND 4)                            ; ANS
15    (CONST&PUSH 5)                      ; 0
16    (CONST&PUSH 5)                      ; 0
17    (NIL&PUSH)
18    (NIL)
19    (BIND 6)                            ; D
21    (GETVALUE 2)                        ; S
23    (STORE 4)
24    (GETVALUE 3)                        ; J
26    (STORE 5)
27    (JMP L110)
30    L30
30    (GETVALUE&PUSH 2)                   ; S
32    (CALLS2 150)                        ; 1+
34    (SETVALUE 2)                        ; S
36    (GETVALUE&PUSH 3)                   ; J
38    (CALLS2 151)                        ; 1-
40    (SETVALUE 3)                        ; J
42    (GETVALUE&PUSH 0)                   ; AX
44    (GETVALUE&PUSH 7)                   ; *PTR*
46    (GETVALUE&PUSH 1)                   ; R
48    (CALLSR&PUSH 1 1)                   ; AREF
51    (GETVALUE&PUSH 8)                   ; *PTC*
53    (GETVALUE&PUSH 2)                   ; S
55    (CALLSR&PUSH 1 1)                   ; AREF
58    (CALLSR 2 1)                        ; AREF
61    (SETVALUE 6)                        ; D
63    (GETVALUE 9)                        ; *NONZ*
65    (JMPIF L75)
67    (GETVALUE&PUSH 6)                   ; D
69    (JMPIFEQTO 5 L75)                   ; 0
72    (T)
73    (SETVALUE 9)                        ; *NONZ*
75    L75
75    (GETVALUE&PUSH 6)                   ; D
77    (LOAD&CONS&STORE 3)
79    L79
79    (GETVALUE&PUSH 3)                   ; J
81    (CONST&PUSH 5)                      ; 0
82    (CALLSR&JMPIFNOT 1 45 L30)          ; =
86    (LOAD 5)
87    (SETVALUE 3)                        ; J
89    (LOAD 4)
90    (SETVALUE 2)                        ; S
92    (LOAD&PUSH 3)
93    (CALLS2&PUSH 73)                    ; NREVERSE
95    (GETVALUE 4)                        ; ANS
97    (CONS)
98    (SETVALUE 4)                        ; ANS
100   (NIL&STORE 3)
102   (GETVALUE&PUSH 1)                   ; R
104   (CALLS2 151)                        ; 1-
106   (SETVALUE 1)                        ; R
108   (LOAD&DEC&STORE 23)
110   L110
110   (LOAD&PUSH 23)
111   (CONST&PUSH 5)                      ; 0
112   (CALLSR&JMPIFNOT 1 45 L79)          ; =
116   (GETVALUE 4)                        ; ANS
118   (UNBIND1)
119   (SKIP 3)
121   (UNBIND 5)
123   (SKIP&RET 6)


Disassembly of function #:|(DEFUN BMHK (DA B NC ...) ...)-10|
(CONST 0) = BMHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BMHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BMHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BMHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BMHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BMHK
8     (SKIP&RET 1)


Disassembly of function BMHK
(CONST 0) = B
(CONST 1) = C
(CONST 2) = A
(CONST 3) = *NONZ*
(CONST 4) = X
(CONST 5) = Y
(CONST 6) = AX
(CONST 7) = *R0
(CONST 8) = OBMTRX
(CONST 9) = *RR*
(CONST 10) = (1 . 1)
(CONST 11) = MULTMAT
(CONST 12) = PMINUS
(CONST 13) = 1
(CONST 14) = CTIMEMT
(CONST 15) = ADDMATRIX1
(CONST 16) = PTIMES
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y C *NONZ* *RR* A *R0 AX B)
writes special variables : (Y X *R0 *RR* C A B)
112 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; B
3     (NIL)
4     (BIND 1)                            ; C
6     (NIL)
7     (BIND 2)                            ; A
9     (PUSH-NIL 3)
11    (NIL)
12    (BIND 3)                            ; *NONZ*
14    (NIL)
15    (BIND 4)                            ; X
17    (NIL)
18    (BIND 5)                            ; Y
20    (GETVALUE 0)                        ; B
22    (CAR)
23    (STORE 10)
25    (GETVALUE 0)                        ; B
27    (CDR)
28    (SETVALUE 0)                        ; B
30    (LOAD 26)
32    (CAR)
33    (SETVALUE 2)                        ; A
35    (LOAD&CDR&STORE 26)
37    (LOAD&PUSH 24)
38    (CALLS2&STORE 72 24)                ; REVERSE
41    (LOAD&PUSH 26)
43    (CALLS2&STORE 72 26)                ; REVERSE
46    (GETVALUE&PUSH 6)                   ; AX
48    (GETVALUE&PUSH 7)                   ; *R0
50    (LOAD&PUSH 25)
52    (GETVALUE 2)                        ; A
54    (CDR&PUSH)
55    (CALLS2&PUSH 71)                    ; LENGTH
57    (GETVALUE&PUSH 0)                   ; B
59    (CALLS2&PUSH 71)                    ; LENGTH
61    (CALL 5 8)                          ; OBMTRX
64    (SETVALUE 1)                        ; C
66    (PUSH)
67    (GETVALUE 9)                        ; *RR*
69    (CONS)
70    (SETVALUE 9)                        ; *RR*
72    (GETVALUE 3)                        ; *NONZ*
74    (JMPIFNOT L185)
77    (GETVALUE&PUSH 1)                   ; C
79    (GETVALUE&PUSH 0)                   ; B
81    (CALL2 11)                          ; MULTMAT
83    (STORE 11)
85    (GETVALUE&PUSH 7)                   ; *R0
87    (GETVALUE 2)                        ; A
89    (CDR&PUSH)
90    (CALLS2&PUSH 71)                    ; LENGTH
92    (CALLSR 1 54)                       ; -
95    (SETVALUE 7)                        ; *R0
97    (LOAD&JMPIFNOT 26 L155)
100   L100
100   (LOAD 26)
102   (CAR)
103   (SETVALUE 4)                        ; X
105   (LOAD 24)
107   (CAR)
108   (SETVALUE 5)                        ; Y
110   (CAR)
111   (STORE 9)
113   (GETVALUE 5)                        ; Y
115   (CDR)
116   (SETVALUE 5)                        ; Y
118   (GETVALUE&PUSH 4)                   ; X
120   (GETVALUE&PUSH 5)                   ; Y
122   (CALL2 11)                          ; MULTMAT
124   (SETVALUE 4)                        ; X
126   (LOAD 22)
128   (CAR)
129   (CAR&PUSH)
130   (CALL1&PUSH 12)                     ; PMINUS
132   (CONST 13)                          ; 1
133   (CONS&PUSH)
134   (LOAD&PUSH 12)
135   (CALL2&PUSH 14)                     ; CTIMEMT
137   (GETVALUE&PUSH 4)                   ; X
139   (CALL2 15)                          ; ADDMATRIX1
141   (STORE 11)
143   (LOAD 9)
144   (STORE 10)
146   (LOAD&CDR&STORE 22)
148   (LOAD&CDR&STORE 26)
150   (LOAD&CDR&STORE 24)
152   (LOAD&JMPIF 26 L100)
155   L155
155   (GETVALUE 2)                        ; A
157   (CAR)
158   (CAR&PUSH)
159   (CALL1&PUSH 12)                     ; PMINUS
161   (LOAD&CAR&PUSH 11)
163   (CALL2&PUSH 16)                     ; PTIMES
165   (CONST 13)                          ; 1
166   (CONS)
167   (STORE 10)
169   (PUSH)
170   (GETVALUE 2)                        ; A
172   (CDR&PUSH)
173   (LOAD&PUSH 13)
174   (CALL2 11)                          ; MULTMAT
176   L176
176   (CONS)
177   (UNBIND 3)
179   (SKIP 3)
181   (UNBIND 3)
183   (SKIP&RET 6)
185   L185
185   (CONST&PUSH 10)                     ; (1 . 1)
186   (GETVALUE 1)                        ; C
188   (JMP L176)


Disassembly of function #:|(DECLARE-TOP (SPECIAL BL))-11|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(COMMENT TMLATTICE RETURNS ...)-12|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN NEWINV (AX M N) ...)-13|
(CONST 0) = NEWINV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWINV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWINV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWINV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWINV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWINV
8     (SKIP&RET 1)


Disassembly of function NEWINV
(CONST 0) = AX
(CONST 1) = M
(CONST 2) = N
(CONST 3) = J
(CONST 4) = BL
(CONST 5) = D
(CONST 6) = DETL*
(CONST 7) = R
(CONST 8) = 0
(CONST 9) = *ARRAY
(CONST 10) = *PTR*
(CONST 11) = *PTC*
(CONST 12) = TMLATTICE
(CONST 13) = "SINGULAR"
(CONST 14) = MERROR
(CONST 15) = LENGTH
(CONST 16) = MAX
(CONST 17) = 2
(CONST 18) = *IAR*
(CONST 19) = TMUNPIVOT
(CONST 20) = MULTBK
(CONST 21) = (1 . 1)
(CONST 22) = (0 . 1)
(CONST 23) = TMLIN
(CONST 24) = STORA
(CONST 25) = PRODHK
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N D *PTC* *PTR* *IAR* R J BL AX M)
writes special variables : (D J R *IAR* BL *PTC* *PTR*)
219 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; AX
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; N
9     (NIL)
10    (BIND 3)                            ; J
12    (NIL&PUSH)
13    (NIL)
14    (BIND 4)                            ; BL
16    (NIL)
17    (BIND 5)                            ; D
19    (NIL&PUSH)
20    (NIL)
21    (BIND 6)                            ; DETL*
23    (PUSH-NIL 3)
25    (NIL)
26    (BIND 7)                            ; R
28    (PUSH-NIL 2)
30    (GETVALUE&PUSH 1)                   ; M
32    (JMP L50)
34    L34
34    (GETVALUE&PUSH 0)                   ; AX
36    (LOAD&PUSH 1)
37    (LOAD&PUSH 2)
38    (GETVALUE&PUSH 1)                   ; M
40    (CALLSR&PUSH 2 53)                  ; +
43    (CALLSR&PUSH 2 1)                   ; AREF
46    (LOAD&CONS&STORE 19)
48    (LOAD&DEC&STORE 0)
50    L50
50    (LOAD&PUSH 0)
51    (CONST&PUSH 8)                      ; 0
52    (CALLSR&JMPIFNOT 1 45 L34)          ; =
56    (SKIP 1)
58    (NIL&PUSH)
59    (T&PUSH)
60    (GETVALUE&PUSH 1)                   ; M
62    (CALLS2&PUSH 150)                   ; 1+
64    (CALL 3 9)                          ; *ARRAY
67    (SETVALUE 10)                       ; *PTR*
69    (NIL&PUSH)
70    (T&PUSH)
71    (GETVALUE&PUSH 1)                   ; M
73    (CALLS2&PUSH 150)                   ; 1+
75    (CALL 3 9)                          ; *ARRAY
78    (SETVALUE 11)                       ; *PTC*
80    (GETVALUE&PUSH 0)                   ; AX
82    (CONST&PUSH 10)                     ; *PTR*
83    (CONST&PUSH 11)                     ; *PTC*
84    (GETVALUE&PUSH 1)                   ; M
86    (CALL 4 12)                         ; TMLATTICE
89    (SETVALUE 4)                        ; BL
91    (JMPIF L96)
93    (CONST&PUSH 13)                     ; "SINGULAR"
94    (CALL1 14)                          ; MERROR
96    L96
96    (CONST&PUSH 15)                     ; LENGTH
97    (GETVALUE&PUSH 4)                   ; BL
99    (CALLSR 0 22)                       ; MAPCAR
102   (SETVALUE 4)                        ; BL
104   (CONST&PUSH 16)                     ; MAX
105   (GETVALUE 4)                        ; BL
107   (APPLY 0)
109   (STORE 11)
111   (NIL&PUSH)
112   (T&PUSH)
113   (LOAD&INC&PUSH 13)
115   (CONST&PUSH 17)                     ; 2
116   (LOAD&PUSH 15)
117   (CALLSR&PUSH 2 55)                  ; *
120   (CALLS2&PUSH 150)                   ; 1+
122   (CALL 4 9)                          ; *ARRAY
125   (SETVALUE 18)                       ; *IAR*
127   (CONST 8)                           ; 0
128   (SETVALUE 7)                        ; R
130   (GETVALUE 4)                        ; BL
132   (JMPIFNOT L341)
135   L135
135   (GETVALUE 4)                        ; BL
137   (CAR)
138   (STORE 1)
139   (STORE 7)
140   (CONST&PUSH 17)                     ; 2
141   (LOAD&PUSH 8)
142   (CALLSR&STORE 2 55 5)               ; *
146   (JMP L275)
149   L149
149   (LOAD 5)
150   (SETVALUE 3)                        ; J
152   (LOAD&PUSH 1)
153   (LOAD&PUSH 8)
154   (CALLSR&STORE 2 53 6)               ; +
158   (JMP L266)
161   L161
161   (CONST 21)                          ; (1 . 1)
163   (JMP L250)
166   L166
166   (GETVALUE&PUSH 3)                   ; J
168   (LOAD&PUSH 9)
169   (CALLSR&JMPIF 1 45 L161)            ; =
173   (CONST 22)                          ; (0 . 1)
175   (JMP L250)
178   L178
178   (CONST&PUSH 18)                     ; *IAR*
179   (LOAD&PUSH 8)
180   (LOAD&PUSH 9)
181   (LOAD&PUSH 10)
182   (CALL 4 23)                         ; TMLIN
185   (STORE 0)
186   (CAR)
187   (CAR&PUSH)
188   (LOAD 1)
189   (CDR)
190   (CONS&PUSH)
191   (LIST 1)
193   (STORE 0)
194   (GETVALUE&PUSH 0)                   ; AX
196   (GETVALUE&PUSH 1)                   ; M
198   (LOAD&PUSH 2)
199   (GETVALUE&PUSH 7)                   ; R
201   (CALL 4 24)                         ; STORA
204   (LOAD&PUSH 0)
205   (LIST 1)
207   (STORE 0)
208   (JMP L321)
211   L211
211   (GETVALUE&PUSH 18)                  ; *IAR*
213   (GETVALUE&PUSH 3)                   ; J
215   (GETVALUE&PUSH 3)                   ; J
217   (LOAD&PUSH 10)
218   (CALLSR&JMPIF 1 48 L166)            ; >
222   (GETVALUE&PUSH 0)                   ; AX
224   (GETVALUE&PUSH 10)                  ; *PTR*
226   (GETVALUE&PUSH 7)                   ; R
228   (LOAD&PUSH 6)
229   (CALLSR&PUSH 2 53)                  ; +
232   (CALLSR&PUSH 1 1)                   ; AREF
235   (GETVALUE&PUSH 11)                  ; *PTC*
237   (GETVALUE&PUSH 7)                   ; R
239   (GETVALUE&PUSH 3)                   ; J
241   (CALLSR&PUSH 2 53)                  ; +
244   (CALLSR&PUSH 1 1)                   ; AREF
247   (CALLSR 2 1)                        ; AREF
250   L250
250   (PUSH)
251   (LOAD&PUSH 2)
252   (LOAD&PUSH 5)
253   (LOAD&PUSH 3)
254   (LOAD&PUSH 3)
255   (CALLSR 2 2)                        ; SYSTEM::STORE
258   (SKIP 3)
260   (GETVALUE&PUSH 3)                   ; J
262   (CALLS2 151)                        ; 1-
264   (SETVALUE 3)                        ; J
266   L266
266   (GETVALUE&PUSH 3)                   ; J
268   (CONST&PUSH 8)                      ; 0
269   (CALLSR&JMPIFNOT 1 45 L211)         ; =
273   (LOAD&DEC&STORE 1)
275   L275
275   (LOAD&PUSH 1)
276   (CONST&PUSH 8)                      ; 0
277   (CALLSR&JMPIFNOT 1 45 L149)         ; =
282   (GETVALUE&PUSH 7)                   ; R
284   (CONST&PUSH 8)                      ; 0
285   (CALLSR&JMPIF 1 45 L178)            ; =
290   (CONST&PUSH 18)                     ; *IAR*
291   (LOAD&PUSH 8)
292   (LOAD&PUSH 9)
293   (LOAD&PUSH 10)
294   (CALL 4 23)                         ; TMLIN
297   (SETVALUE 5)                        ; D
299   (CAR)
300   (CAR&PUSH)
301   (GETVALUE 5)                        ; D
303   (CDR)
304   (CONS)
305   (SETVALUE 5)                        ; D
307   (LOAD&PUSH 0)
308   (GETVALUE&PUSH 5)                   ; D
310   (GETVALUE&PUSH 7)                   ; R
312   (GETVALUE&PUSH 1)                   ; M
314   (CALL 4 25)                         ; PRODHK
317   (STORE 0)
318   (NIL)
319   (SETVALUE 5)                        ; D
321   L321
321   (GETVALUE&PUSH 7)                   ; R
323   (GETVALUE 4)                        ; BL
325   (CAR&PUSH)
326   (CALLSR 2 53)                       ; +
329   (SETVALUE 7)                        ; R
331   (GETVALUE 4)                        ; BL
333   (CDR)
334   (SETVALUE 4)                        ; BL
336   (GETVALUE 4)                        ; BL
338   (JMPIF L135)
341   L341
341   (GETVALUE&PUSH 0)                   ; AX
343   (CONST&PUSH 10)                     ; *PTR*
344   (CONST&PUSH 11)                     ; *PTC*
345   (GETVALUE&PUSH 1)                   ; M
347   (GETVALUE&PUSH 2)                   ; N
349   (CALL 5 19)                         ; TMUNPIVOT
352   (LOAD&PUSH 18)
353   (GETVALUE&PUSH 0)                   ; AX
355   (GETVALUE&PUSH 1)                   ; M
357   (CALL 3 20)                         ; MULTBK
360   (SKIP 2)
362   (UNBIND1)
363   (SKIP 3)
365   (UNBIND1)
366   (SKIP 1)
368   (UNBIND 2)
370   (SKIP 1)
372   (UNBIND 4)
374   (SKIP&RET 4)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL BL *NONZ* ...))-14|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/newinv.fas
Wrote file /cygdrive/e/temp/maxima/src/newinv.lis