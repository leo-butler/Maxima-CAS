Listing of compilation of file /cygdrive/e/temp/maxima/src/float.lisp
on 2002-12-17 13:33:12 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/float.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE FLOAT)-2|
(CONST 0) = FLOAT
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLOAT
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|10-3|
(CONST 0) = 10
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; 10
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FLOAT2BF NIL ...)-4-1|
(CONST 0) = $FLOAT2BF
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FLOAT2BF
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $FLOAT2BF
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FLOAT2BF NIL ...)-4-2|
(CONST 0) = (SPECIAL $FLOAT2BF)
(CONST 1) = $FLOAT2BF
(CONST 2) = VARIABLE
(CONST 3) = 
"If TRUE, no MAXIMA-ERROR message is printed when a floating point number is
converted to a bigfloat number."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $FLOAT2BF)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $FLOAT2BF
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $FLOAT2BF
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $FLOAT2BF
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If TRUE, no MAXIMA-ERROR message is printed when a floating point number is
converted to a bigfloat number."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $FLOAT2BF
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BFTORAT NIL ...)-5-1|
(CONST 0) = $BFTORAT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BFTORAT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $BFTORAT
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BFTORAT NIL ...)-5-2|
(CONST 0) = (SPECIAL $BFTORAT)
(CONST 1) = $BFTORAT
(CONST 2) = VARIABLE
(CONST 3) = 
"Controls the conversion of bigfloat numbers to rational numbers.  If
FALSE, RATEPSILON will be used to control the conversion (this results in
relatively small rational numbers).  If TRUE, the rational number generated
will accurately represent the bigfloat."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $BFTORAT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $BFTORAT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $BFTORAT
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $BFTORAT
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Controls the conversion of bigfloat numbers to rational numbers.  If
FALSE, RATEPSILON will be used to control the conversion (this results in
relatively small rational numbers).  If TRUE, the rational number generated
will accurately represent the bigfloat."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $BFTORAT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BFTRUNC T ...)-6-1|
(CONST 0) = $BFTRUNC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BFTRUNC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $BFTRUNC
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BFTRUNC T ...)-6-2|
(CONST 0) = (SPECIAL $BFTRUNC)
(CONST 1) = $BFTRUNC
(CONST 2) = VARIABLE
(CONST 3) = "Needs to be documented"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $BFTRUNC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $BFTRUNC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $BFTRUNC
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $BFTRUNC
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Needs to be documented"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $BFTRUNC
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FPPRINTPREC 0 ...)-7-1|
(CONST 0) = $FPPRINTPREC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FPPRINTPREC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $FPPRINTPREC
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 0
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FPPRINTPREC 0 ...)-7-2|
(CONST 0) = (SPECIAL $FPPRINTPREC)
(CONST 1) = $FPPRINTPREC
(CONST 2) = 0
(CONST 3) = VARIABLE
(CONST 4) = "Needs to be documented"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $FPPRINTPREC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $FPPRINTPREC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $FPPRINTPREC
8     (CONST&PUSH 2)                      ; 0
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $FPPRINTPREC
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Needs to be documented"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $FPPRINTPREC
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FPPREC 16 ...)-8-1|
(CONST 0) = $FPPREC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 16
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FPPREC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $FPPREC
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 16
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FPPREC 16 ...)-8-2|
(CONST 0) = (SPECIAL $FPPREC)
(CONST 1) = $FPPREC
(CONST 2) = 16
(CONST 3) = VARIABLE
(CONST 4) = 
"Number of decimal digits of precision to use when creating new bigfloats.
One extra decimal digit in actual representation for rounding purposes."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $FPPREC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $FPPREC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $FPPREC
8     (CONST&PUSH 2)                      ; 16
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $FPPREC
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Number of decimal digits of precision to use when creating new bigfloats.
One extra decimal digit in actual representation for rounding purposes."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $FPPREC
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BIGFLOATZERO '(# 0 0) ...)-9-1|
(CONST 0) = BIGFLOATZERO
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((BIGFLOAT SIMP 56) 0 0)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOATZERO
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; BIGFLOATZERO
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((BIGFLOAT SIMP 56) 0 0)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BIGFLOATZERO '(# 0 0) ...)-9-2|
(CONST 0) = (SPECIAL BIGFLOATZERO)
(CONST 1) = BIGFLOATZERO
(CONST 2) = ((BIGFLOAT SIMP 56) 0 0)
(CONST 3) = VARIABLE
(CONST 4) = "Bigfloat representation of 0"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL BIGFLOATZERO)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; BIGFLOATZERO
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; BIGFLOATZERO
8     (CONST&PUSH 2)                      ; ((BIGFLOAT SIMP 56) 0 0)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; BIGFLOATZERO
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Bigfloat representation of 0"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; BIGFLOATZERO
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BIGFLOATONE '(# 36028797018963968 1) ...)-10-1|
(CONST 0) = BIGFLOATONE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((BIGFLOAT SIMP 56) 36028797018963968 1)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOATONE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; BIGFLOATONE
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; (# 36028797018963968 1)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BIGFLOATONE '(# 36028797018963968 1) ...)-10-2|
(CONST 0) = (SPECIAL BIGFLOATONE)
(CONST 1) = BIGFLOATONE
(CONST 2) = ((BIGFLOAT SIMP 56) 36028797018963968 1)
(CONST 3) = VARIABLE
(CONST 4) = "Bigfloat representation of 1"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL BIGFLOATONE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; BIGFLOATONE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; BIGFLOATONE
8     (CONST&PUSH 2)                      ; (# 36028797018963968 1)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; BIGFLOATONE
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Bigfloat representation of 1"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; BIGFLOATONE
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BFHALF '(# 36028797018963968 0) ...)-11-1|
(CONST 0) = BFHALF
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((BIGFLOAT SIMP 56) 36028797018963968 0)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; BFHALF
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; BFHALF
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; (# 36028797018963968 0)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BFHALF '(# 36028797018963968 0) ...)-11-2|
(CONST 0) = (SPECIAL BFHALF)
(CONST 1) = BFHALF
(CONST 2) = ((BIGFLOAT SIMP 56) 36028797018963968 0)
(CONST 3) = VARIABLE
(CONST 4) = "Bigfloat representation of 1/2"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL BFHALF)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; BFHALF
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; BFHALF
8     (CONST&PUSH 2)                      ; (# 36028797018963968 0)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; BFHALF
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Bigfloat representation of 1/2"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; BFHALF
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BFMHALF '(# -36028797018963968 0) ...)-12-1|
(CONST 0) = BFMHALF
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((BIGFLOAT SIMP 56) -36028797018963968 0)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; BFMHALF
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; BFMHALF
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; (# -36028797018963968 0)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BFMHALF '(# -36028797018963968 0) ...)-12-2|
(CONST 0) = (SPECIAL BFMHALF)
(CONST 1) = BFMHALF
(CONST 2) = ((BIGFLOAT SIMP 56) -36028797018963968 0)
(CONST 3) = VARIABLE
(CONST 4) = "Bigfloat representation of -1/2"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL BFMHALF)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; BFMHALF
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; BFMHALF
8     (CONST&PUSH 2)                      ; (# -36028797018963968 0)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; BFMHALF
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Bigfloat representation of -1/2"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; BFMHALF
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BIGFLOAT%E '(# 48968212118944587 2) ...)-13-1|
(CONST 0) = BIGFLOAT%E
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((BIGFLOAT SIMP 56) 48968212118944587 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOAT%E
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; BIGFLOAT%E
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; (# 48968212118944587 2)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BIGFLOAT%E '(# 48968212118944587 2) ...)-13-2|
(CONST 0) = (SPECIAL BIGFLOAT%E)
(CONST 1) = BIGFLOAT%E
(CONST 2) = ((BIGFLOAT SIMP 56) 48968212118944587 2)
(CONST 3) = VARIABLE
(CONST 4) = "Bigfloat representation of %E"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL BIGFLOAT%E)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; BIGFLOAT%E
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; BIGFLOAT%E
8     (CONST&PUSH 2)                      ; (# 48968212118944587 2)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; BIGFLOAT%E
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Bigfloat representation of %E"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; BIGFLOAT%E
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BIGFLOAT%PI '(# 56593902016227522 2) ...)-14-1|
(CONST 0) = BIGFLOAT%PI
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((BIGFLOAT SIMP 56) 56593902016227522 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOAT%PI
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; BIGFLOAT%PI
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; (# 56593902016227522 2)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR BIGFLOAT%PI '(# 56593902016227522 2) ...)-14-2|
(CONST 0) = (SPECIAL BIGFLOAT%PI)
(CONST 1) = BIGFLOAT%PI
(CONST 2) = ((BIGFLOAT SIMP 56) 56593902016227522 2)
(CONST 3) = VARIABLE
(CONST 4) = "Bigfloat representation of %PI"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL BIGFLOAT%PI)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; BIGFLOAT%PI
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; BIGFLOAT%PI
8     (CONST&PUSH 2)                      ; (# 56593902016227522 2)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; BIGFLOAT%PI
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Bigfloat representation of %PI"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; BIGFLOAT%PI
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR FPPREC)-15|
(CONST 0) = (SPECIAL FPPREC)
(CONST 1) = FPPREC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL FPPREC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST 1)                           ; FPPREC
4     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (FIXNUM FPPREC))-16|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *M)-17|
(CONST 0) = (SPECIAL *M)
(CONST 1) = *M
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *M)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST 1)                           ; *M
4     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (FIXNUM *M))-18|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *DECFP NIL)-19|
(CONST 0) = (SPECIAL *DECFP)
(CONST 1) = *DECFP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *DECFP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *DECFP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *DECFP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *DECFP
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR MAX-BFLOAT-%PI BIGFLOAT%PI)-20|
(CONST 0) = (SPECIAL MAX-BFLOAT-%PI)
(CONST 1) = MAX-BFLOAT-%PI
(CONST 2) = BIGFLOAT%PI
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BIGFLOAT%PI)
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MAX-BFLOAT-%PI)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MAX-BFLOAT-%PI
4     (CALLS1&JMPIF 79 L12)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MAX-BFLOAT-%PI
8     (GETVALUE&PUSH 2)                   ; BIGFLOAT%PI
10    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
12    L12
12    (CONST 1)                           ; MAX-BFLOAT-%PI
13    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR MAX-BFLOAT-%E BIGFLOAT%E)-21|
(CONST 0) = (SPECIAL MAX-BFLOAT-%E)
(CONST 1) = MAX-BFLOAT-%E
(CONST 2) = BIGFLOAT%E
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BIGFLOAT%E)
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MAX-BFLOAT-%E)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MAX-BFLOAT-%E
4     (CALLS1&JMPIF 79 L12)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MAX-BFLOAT-%E
8     (GETVALUE&PUSH 2)                   ; BIGFLOAT%E
10    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
12    L12
12    (CONST 1)                           ; MAX-BFLOAT-%E
13    (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *CANCELLED $FLOAT ...) (FIXNUM I N ...) ...)-22|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN HIPART (X NN) ...)-23|
(CONST 0) = HIPART
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HIPART>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HIPART
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HIPART
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HIPART>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HIPART
8     (SKIP&RET 1)


Disassembly of function HIPART
(CONST 0) = X
(CONST 1) = BIGP
(CONST 2) = HAIPART
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
14 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 4)
4     (CALL1&JMPIF 1 L15)                 ; BIGP
7     (GETVALUE&PUSH 0)                   ; X
9     (LOAD&PUSH 5)
10    (CALL2 2)                           ; HAIPART
12    L12
12    (UNBIND1)
13    (SKIP&RET 3)
15    L15
15    (GETVALUE&PUSH 0)                   ; X
17    (CALLS2 158)                        ; ABS
19    (JMP L12)


Disassembly of function #:|(DEFUN FPPREC1 (ASSIGN-VAR Q) ...)-24|
(CONST 0) = FPPREC1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPPREC1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPPREC1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPPREC1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPPREC1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPPREC1
8     (SKIP&RET 1)


Disassembly of function FPPREC1
(CONST 0) = FIXNUMP
(CONST 1) = 1
(CONST 2) = "Improper value for FPPREC:~%~M"
(CONST 3) = MERROR
(CONST 4) = 2
(CONST 5) = 10
(CONST 6) = HAULONG
(CONST 7) = FPPREC
(CONST 8) = $BFLOAT
(CONST 9) = BIGFLOATONE
(CONST 10) = 0
(CONST 11) = BIGFLOATZERO
(CONST 12) = BFHALF
(CONST 13) = BFMHALF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BIGFLOATONE)
writes special variables : (BFMHALF BFHALF BIGFLOATZERO BIGFLOATONE FPPREC)
42 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIFNOT 0 L10)              ; FIXNUMP
4     (LOAD&PUSH 1)
5     (CONST&PUSH 1)                      ; 1
6     (CALLSR&JMPIFNOT 1 47 L14)          ; <
10    L10
10    (CONST&PUSH 2)                      ; "Improper value for FPPREC:~%~M"
11    (LOAD&PUSH 2)
12    (CALL2 3)                           ; MERROR
14    L14
14    (CONST&PUSH 4)                      ; 2
15    (CONST&PUSH 5)                      ; 10
16    (LOAD&PUSH 3)
17    (CALLS2&PUSH 154)                   ; EXPT
19    (CALL1&PUSH 6)                      ; HAULONG
21    (CALLSR 2 53)                       ; +
24    (SETVALUE 7)                        ; FPPREC
26    (CONST&PUSH 1)                      ; 1
27    (CALL1 8)                           ; $BFLOAT
29    (SETVALUE 9)                        ; BIGFLOATONE
31    (CONST&PUSH 10)                     ; 0
32    (CALL1 8)                           ; $BFLOAT
34    (SETVALUE 11)                       ; BIGFLOATZERO
36    (GETVALUE 9)                        ; BIGFLOATONE
38    (CAR&PUSH)
39    (GETVALUE 9)                        ; BIGFLOATONE
41    (CDR)
42    (CAR&PUSH)
43    (CONST&PUSH 10)                     ; 0
44    (LIST 3)
46    (SETVALUE 12)                       ; BFHALF
48    (GETVALUE 9)                        ; BIGFLOATONE
50    (CAR&PUSH)
51    (GETVALUE 9)                        ; BIGFLOATONE
53    (CDR)
54    (CAR&PUSH)
55    (CALLSR&PUSH 0 54)                  ; -
58    (CONST&PUSH 10)                     ; 0
59    (LIST 3)
61    (SETVALUE 13)                       ; BFMHALF
63    (LOAD 1)
64    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPSCAN (LFT RT EXP ...) ...)-25|
(CONST 0) = FPSCAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPSCAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPSCAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPSCAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPSCAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPSCAN
8     (SKIP&RET 1)


Disassembly of function FPSCAN
(CONST 0) = 10
(CONST 1) = *READ-BASE*
(CONST 2) = 1
(CONST 3) = *M
(CONST 4) = 0
(CONST 5) = *CANCELLED
(CONST 6) = READLIST
(CONST 7) = 4
(CONST 8) = FPPREC
(CONST 9) = HAULONG
(CONST 10) = 3.322
(CONST 11) = FIX
(CONST 12) = $FLOAT
(CONST 13) = DIV
(CONST 14) = ADD
(CONST 15) = 1000
(CONST 16) = (MTIMES)
(CONST 17) = (MEXPT)
(CONST 18) = POWER
(CONST 19) = MUL2
(CONST 20) = $BFLOAT
(CONST 21) = BIGFLOATP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FPPREC)
63 byte-code instructions:
0     (CONST 0)                           ; 10
1     (BIND 1)                            ; *READ-BASE*
3     (CONST 2)                           ; 1
4     (BIND 3)                            ; *M
6     (CONST 4)                           ; 0
7     (BIND 5)                            ; *CANCELLED
9     (LOAD&PUSH 10)
10    (CALL1 6)                           ; READLIST
12    (STORE 10)
14    (CONST&PUSH 7)                      ; 4
15    (GETVALUE&PUSH 8)                   ; FPPREC
17    (LOAD&PUSH 12)
18    (CALL1&PUSH 9)                      ; HAULONG
20    (CONST&PUSH 10)                     ; 3.322
21    (LOAD&PUSH 16)
22    (CALLS2&PUSH 71)                    ; LENGTH
24    (CALLSR&PUSH 2 55)                  ; *
27    (CALLS2&PUSH 150)                   ; 1+
29    (CALL1&PUSH 11)                     ; FIX
31    (CALLSR 4 53)                       ; +
34    (BIND 8)                            ; FPPREC
36    (NIL)
37    (BIND 12)                           ; $FLOAT
39    (NIL&PUSH)
40    (LOAD&PUSH 19)
41    (CALL1&PUSH 6)                      ; READLIST
43    (LOAD&PUSH 19)
44    (CALL1&PUSH 6)                      ; READLIST
46    (CONST&PUSH 0)                      ; 10
47    (LOAD&PUSH 21)
48    (CALLS2&PUSH 71)                    ; LENGTH
50    (CALLS2&PUSH 154)                   ; EXPT
52    (CALL2&PUSH 13)                     ; DIV
54    (CALL2 14)                          ; ADD
56    (STORE 0)
57    (LOAD&PUSH 17)
58    (CALLS2&PUSH 158)                   ; ABS
60    (CONST&PUSH 15)                     ; 1000
61    (CALLSR&JMPIF 1 48 L86)             ; >
65    (LOAD&PUSH 0)
66    (CONST&PUSH 0)                      ; 10
67    (LOAD&PUSH 19)
68    (CALL2&PUSH 18)                     ; POWER
70    (CALL2 19)                          ; MUL2
72    L72
72    (PUSH)
73    (CALL1 20)                          ; $BFLOAT
75    (SKIP 1)
77    (UNBIND 2)
79    (PUSH)
80    (CALL1 21)                          ; BIGFLOATP
82    (UNBIND 3)
84    (SKIP&RET 4)
86    L86
86    (CONST&PUSH 16)                     ; (MTIMES)
87    (LOAD&PUSH 1)
88    (CONST&PUSH 17)                     ; (MEXPT)
89    (CONST&PUSH 0)                      ; 10
90    (LOAD&PUSH 21)
91    (LIST&PUSH 3)
93    (LIST 2)
95    (CONS)
96    (JMP L72)


Disassembly of function #:|(DEFUN DIM-BIGFLOAT (FORM RESULT) ...)-26|
(CONST 0) = DIM-BIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-BIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-BIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-BIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-BIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-BIGFLOAT
8     (SKIP&RET 1)


Disassembly of function DIM-BIGFLOAT
(CONST 0) = FPFORMAT
(CONST 1) = MAKNAM
(CONST 2) = DIMENSION-ATOM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&PUSH 0)                      ; FPFORMAT
3     (CALL1&PUSH 1)                      ; MAKNAM
5     (LOAD&PUSH 2)
6     (CALL2 2)                           ; DIMENSION-ATOM
8     (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPFORMAT (L) ...)-27|
(CONST 0) = FPFORMAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPFORMAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPFORMAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPFORMAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPFORMAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPFORMAT
8     (SKIP&RET 1)


Disassembly of function FPFORMAT
(CONST 0) = SIMP
(CONST 1) = MEMQ
(CONST 2) = 0
(CONST 3) = "Warning - an incorrect form for 0.0B0 has been generated."
(CONST 4) = MTELL
(CONST 5) = |0|
(CONST 6) = |.|
(CONST 7) = B
(CONST 8) = HAULONG
(CONST 9) = 3.32
(CONST 10) = QUOT
(CONST 11) = FIX
(CONST 12) = 1
(CONST 13) = *M
(CONST 14) = *CANCELLED
(CONST 15) = -2
(CONST 16) = DECIMALSIN
(CONST 17) = *DECFP
(CONST 18) = FPPREC
(CONST 19) = INTOFP
(CONST 20) = 2
(CONST 21) = FPINTEXPT
(CONST 22) = FPQUOTIENT
(CONST 23) = FPTIMES*
(CONST 24) = FPROUND
(CONST 25) = 10
(CONST 26) = *PRINT-BASE*
(CONST 27) = *PRINT-RADIX*
(CONST 28) = $BFTRUNC
(CONST 29) = EXPLODEC
(CONST 30) = $FPPRINTPREC
(CONST 31) = $FPPREC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($FPPREC $FPPRINTPREC $BFTRUNC *M FPPREC)
writes special variable : (FPPREC)
222 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP
1     (LOAD 2)
2     (CAR)
3     (CDR&PUSH)
4     (CALL2&JMPIF 1 L20)                 ; MEMQ
7     (LOAD 1)
8     (CAR)
9     (CAR&PUSH)
10    (CONST&PUSH 0)                      ; SIMP
11    (LOAD 3)
12    (CAR)
13    (CDR)
14    (CONS)
15    (CONS&PUSH)
16    (LOAD 2)
17    (CDR)
18    (CONS)
19    (STORE 1)
20    L20
20    (LOAD 1)
21    (CDR)
22    (CAR&PUSH)
23    (JMPIFEQTO 2 L161)                  ; 0
27    (LOAD 1)
28    (CDR)
29    (CDR)
30    (CAR&PUSH)
31    (CALL1&PUSH 8)                      ; HAULONG
33    (CONST&PUSH 9)                      ; 3.32
34    (CALL2&PUSH 10)                     ; QUOT
36    (CALLS2&PUSH 150)                   ; 1+
38    (CALL1&PUSH 11)                     ; FIX
40    (CONST 12)                          ; 1
41    (BIND 13)                           ; *M
43    (CONST 2)                           ; 0
44    (BIND 14)                           ; *CANCELLED
46    (T&PUSH)
47    (LOAD&PUSH 7)
48    (CONST&PUSH 15)                     ; -2
49    (LOAD 11)
50    (CAR)
51    (CDR)
52    (CDR)
53    (CAR&PUSH)
54    (CALLSR&PUSH 2 53)                  ; +
57    (CALL1&PUSH 16)                     ; DECIMALSIN
59    (CALLSR&PUSH 2 53)                  ; +
62    (LOAD 10)
63    (CAR)
64    (CDR)
65    (CDR)
66    (CAR&PUSH)
67    (LOAD&CDR&PUSH 11)
69    (NIL&PUSH)
70    (LOAD 4)
71    (BIND 17)                           ; *DECFP
73    (LOAD 6)
74    (BIND 18)                           ; FPPREC
76    (LOAD 7)
77    (CDR)
78    (CAR&PUSH)
79    (LOAD&PUSH 9)
80    (CALLSR&STORE 1 54 6)               ; -
84    (PUSH)
85    (CALLS2&JMPIF 147 L180)             ; MINUSP
89    (LOAD&CAR&PUSH 7)
91    (CALL1&PUSH 19)                     ; INTOFP
93    (CONST&PUSH 20)                     ; 2
94    (LOAD&PUSH 8)
95    (LOAD&PUSH 11)
96    (CALL&PUSH 3 21)                    ; FPINTEXPT
99    (CALL2 23)                          ; FPTIMES*
101   L101
101   (STORE 7)
102   (LOAD&PUSH 17)
103   (CALLSR&PUSH 0 54)                  ; -
106   (GETVALUE&PUSH 18)                  ; FPPREC
108   (CALLSR 2 53)                       ; +
111   (SETVALUE 18)                       ; FPPREC
113   (LOAD&CAR&PUSH 7)
115   (CALL1&PUSH 24)                     ; FPROUND
117   (LOAD&PUSH 18)
118   (CALLSR&PUSH 0 54)                  ; -
121   (GETVALUE&PUSH 13)                  ; *M
123   (LOAD 10)
124   (CDR)
125   (CAR&PUSH)
126   (CALLSR&PUSH 3 53)                  ; +
129   (LIST 2)
131   (UNBIND 2)
133   (SKIP 5)
135   (STORE 8)
137   (UNBIND 2)
139   (SKIP 1)
141   (CONST 25)                          ; 10
143   (BIND 26)                           ; *PRINT-BASE*
145   (NIL)
146   (BIND 27)                           ; *PRINT-RADIX*
148   (NIL&PUSH)
149   (GETVALUE 28)                       ; $BFTRUNC
151   (JMPIFNOT L198)
153   (LOAD&CAR&PUSH 8)
155   (CALL1&PUSH 29)                     ; EXPLODEC
157   (CALLS2&PUSH 73)                    ; NREVERSE
159   (JMP L214)
161   L161
161   (LOAD 1)
162   (CDR)
163   (CDR)
164   (CAR&PUSH)
165   (JMPIFEQTO 2 L171)                  ; 0
168   (CONST&PUSH 3)                      ; "Warning - an incorrect form for 0.0B0 has been generated."
169   (CALL1 4)                           ; MTELL
171   L171
171   (CONST&PUSH 5)                      ; |0|
172   (CONST&PUSH 6)                      ; |.|
173   (CONST&PUSH 5)                      ; |0|
174   (CONST&PUSH 7)                      ; B
175   (CONST&PUSH 5)                      ; |0|
176   (LIST 5)
178   (SKIP&RET 2)
180   L180
180   (LOAD&CAR&PUSH 7)
182   (CALL1&PUSH 19)                     ; INTOFP
184   (CONST&PUSH 20)                     ; 2
185   (LOAD&PUSH 8)
186   (CALLSR&PUSH 0 54)                  ; -
189   (LOAD&PUSH 11)
190   (CALL&PUSH 3 21)                    ; FPINTEXPT
193   (CALL2 22)                          ; FPQUOTIENT
195   (JMP L101)
198   L198
198   (LOAD&CAR&PUSH 8)
200   (CALL1 29)                          ; EXPLODEC
202   (JMP L224)
204   L204
204   (LOAD 2)
205   (CDR)
206   (JMPIFNOT L309)
209   (JMP L312)
212   L212
212   (LOAD&CDR&STORE 0)
214   L214
214   (LOAD&CAR&PUSH 0)
216   (JMPIFEQTO 5 L212)                  ; |0|
219   (LOAD&PUSH 0)
220   (CALLS2 73)                         ; NREVERSE
222   (SKIP 1)
224   L224
224   (STORE 0)
225   (CAR&PUSH)
226   (NIL)
227   (CONS&PUSH)
228   (CONST&PUSH 6)                      ; |.|
229   (NIL)
230   (CONS&PUSH)
231   (LOAD 2)
232   (CDR)
233   (JMPIFNOT L309)
236   (GETVALUE&PUSH 30)                  ; $FPPRINTPREC
238   (CALLS2&JMPIF 145 L204)             ; ZEROP
241   (GETVALUE&PUSH 30)                  ; $FPPRINTPREC
243   (GETVALUE&PUSH 31)                  ; $FPPREC
245   (CALLSR&JMPIFNOT 1 47 L204)         ; <
249   (LOAD 2)
250   (CDR)
251   (CDR)
252   (JMPIFNOT L204)
254   (LOAD&CDR&STORE 2)
256   (GETVALUE&PUSH 30)                  ; $FPPRINTPREC
258   (NIL&PUSH)
259   (JMP L278)
261   L261
261   (LOAD&PUSH 0)
262   (CALLS2 73)                         ; NREVERSE
264   (SKIP 2)
266   (JMPIFNOT L309)
268   (JMP L312)
270   L270
270   (LOAD&CAR&PUSH 4)
272   (LOAD&CONS&STORE 0)
274   (LOAD&CDR&STORE 4)
276   (LOAD&DEC&STORE 1)
278   L278
278   (LOAD&PUSH 1)
279   (CONST&PUSH 20)                     ; 2
280   (CALLSR&JMPIF 1 47 L288)            ; <
284   (LOAD 4)
285   (CDR)
286   (JMPIF L270)
288   L288
288   (GETVALUE 28)                       ; $BFTRUNC
290   (JMPIFNOT L261)
292   (LOAD&PUSH 0)
293   (JMP L297)
295   L295
295   (LOAD&CDR&STORE 0)
297   L297
297   (LOAD&CAR&PUSH 0)
299   (JMPIFEQTO 5 L295)                  ; |0|
302   (LOAD&PUSH 0)
303   (CALLS2 73)                         ; NREVERSE
305   (SKIP 3)
307   (JMPIF L312)
309   L309
309   (CONST&PUSH 5)                      ; |0|
310   (NIL)
311   (CONS)
312   L312
312   (PUSH)
313   (CONST&PUSH 7)                      ; B
314   (NIL)
315   (CONS&PUSH)
316   (LOAD 12)
317   (CDR)
318   (CAR&PUSH)
319   (CALLS2&PUSH 151)                   ; 1-
321   (CALL1&PUSH 29)                     ; EXPLODEC
323   (CALLSR 5 35)                       ; NCONC
326   (SKIP 1)
328   (UNBIND 2)
330   (SKIP&RET 2)


Disassembly of function #:|(DEFUN BIGFLOATP (X) ...)-28|
(CONST 0) = BIGFLOATP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIGFLOATP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOATP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIGFLOATP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIGFLOATP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BIGFLOATP
8     (SKIP&RET 1)


Disassembly of function BIGFLOATP
(CONST 0) = X
(CONST 1) = $BFLOATP
(CONST 2) = FPPREC
(CONST 3) = FPSHIFT
(CONST 4) = BCONS
(CONST 5) = FPROUND
(CONST 6) = *M
(CONST 7) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*M FPPREC X)
writes special variable : (X)
77 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIFNOT 1 L79)              ; $BFLOATP
9     (GETVALUE&PUSH 2)                   ; FPPREC
11    (GETVALUE 0)                        ; X
13    (CAR)
14    (CDR)
15    (CDR)
16    (CAR&PUSH)
17    (CALLSR&JMPIF 1 45 L82)             ; =
21    (GETVALUE&PUSH 2)                   ; FPPREC
23    (GETVALUE 0)                        ; X
25    (CAR)
26    (CDR)
27    (CDR)
28    (CAR&PUSH)
29    (CALLSR&JMPIF 1 48 L86)             ; >
33    (GETVALUE 0)                        ; X
35    (CDR)
36    (CAR&PUSH)
37    (CALL1&PUSH 5)                      ; FPROUND
39    (GETVALUE 0)                        ; X
41    (CDR)
42    (CDR)
43    (CAR&PUSH)
44    (GETVALUE&PUSH 6)                   ; *M
46    (GETVALUE&PUSH 2)                   ; FPPREC
48    (GETVALUE 0)                        ; X
50    (CAR)
51    (CDR)
52    (CDR)
53    (CAR&PUSH)
54    (CALLSR&PUSH 0 54)                  ; -
57    (CALLSR 4 53)                       ; +
60    L60
60    (PUSH)
61    (LIST&PUSH 2)
63    (CALL1 4)                           ; BCONS
65    (SETVALUE 0)                        ; X
67    (GETVALUE 0)                        ; X
69    (CDR)
70    (CAR&PUSH)
71    (JMPIFEQTO 7 L110)                  ; 0
74    (GETVALUE 0)                        ; X
76    L76
76    (UNBIND1)
77    (SKIP&RET 2)
79    L79
79    (NIL)
80    (JMP L76)
82    L82
82    (GETVALUE 0)                        ; X
84    (JMP L76)
86    L86
86    (GETVALUE 0)                        ; X
88    (CDR)
89    (CAR&PUSH)
90    (GETVALUE&PUSH 2)                   ; FPPREC
92    (GETVALUE 0)                        ; X
94    (CAR)
95    (CDR)
96    (CDR)
97    (CAR&PUSH)
98    (CALLSR&PUSH 1 54)                  ; -
101   (CALL2&PUSH 3)                      ; FPSHIFT
103   (GETVALUE 0)                        ; X
105   (CDR)
106   (CDR)
107   (CAR)
108   (JMP L60)
110   L110
110   (CONST&PUSH 7)                      ; 0
111   (CONST&PUSH 7)                      ; 0
112   (LIST&PUSH 2)
114   (CALL1 4)                           ; BCONS
116   (JMP L76)


Disassembly of function #:|(DEFUN BIGFLOAT2RAT (X) ...)-29|
(CONST 0) = BIGFLOAT2RAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIGFLOAT2RAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOAT2RAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIGFLOAT2RAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIGFLOAT2RAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BIGFLOAT2RAT
8     (SKIP&RET 1)


Disassembly of function BIGFLOAT2RAT
(CONST 0) = X
(CONST 1) = BIGFLOATP
(CONST 2) = $FLOAT2BF
(CONST 3) = Y
(CONST 4) = SIGN
(CONST 5) = FPABS
(CONST 6) = FPRATION1
(CONST 7) = $RATPRINT
(CONST 8) = "RAT replaced "
(CONST 9) = "-"
(CONST 10) = FPFORMAT
(CONST 11) = MAKNAM
(CONST 12) = " by "
(CONST 13) = #\/
(CONST 14) = TYO
(CONST 15) = " = "
(CONST 16) = (RAT SIMP)
(CONST 17) = $BFLOAT
(CONST 18) = "-"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y SIGN $RATPRINT X)
writes special variables : (Y SIGN X)
102 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; BIGFLOATP
7     (SETVALUE 0)                        ; X
9     (T)
10    (BIND 2)                            ; $FLOAT2BF
12    (NIL&PUSH)
13    (NIL)
14    (BIND 3)                            ; Y
16    (NIL)
17    (BIND 4)                            ; SIGN
19    (GETVALUE 0)                        ; X
21    (CDR)
22    (CAR&PUSH)
23    (CALLS2&JMPIF 147 L143)             ; MINUSP
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL1 6)                           ; FPRATION1
31    L31
31    (STORE 6)
32    (GETVALUE 7)                        ; $RATPRINT
34    (JMPIFNOT L134)
37    (CONST&PUSH 8)                      ; "RAT replaced "
38    (PUSH-UNBOUND 1)
40    (CALLS1 132)                        ; PRINC
42    (GETVALUE 4)                        ; SIGN
44    (JMPIFNOT L51)
46    (CONST&PUSH 9)                      ; "-"
47    (PUSH-UNBOUND 1)
49    (CALLS1 132)                        ; PRINC
51    L51
51    (GETVALUE 0)                        ; X
53    (CAR&PUSH)
54    (GETVALUE 0)                        ; X
56    (CDR&PUSH)
57    (CALL1 5)                           ; FPABS
59    (CONS&PUSH)
60    (CALL1&PUSH 10)                     ; FPFORMAT
62    (CALL1&PUSH 11)                     ; MAKNAM
64    (PUSH-UNBOUND 1)
66    (CALLS1 132)                        ; PRINC
68    (CONST&PUSH 12)                     ; " by "
69    (PUSH-UNBOUND 1)
71    (CALLS1 132)                        ; PRINC
73    (LOAD&CAR&PUSH 6)
75    (PUSH-UNBOUND 1)
77    (CALLS1 132)                        ; PRINC
79    (CONST&PUSH 13)                     ; #\/
80    (CALL1 14)                          ; TYO
82    (LOAD&CDR&PUSH 6)
84    (PUSH-UNBOUND 1)
86    (CALLS1 132)                        ; PRINC
88    (CONST&PUSH 15)                     ; " = "
89    (PUSH-UNBOUND 1)
91    (CALLS1 132)                        ; PRINC
93    (CONST&PUSH 16)                     ; (RAT SIMP)
94    (LOAD&CAR&PUSH 7)
96    (LOAD&CDR&PUSH 8)
98    (LIST&PUSH 3)
100   (CALL1 17)                          ; $BFLOAT
102   (SETVALUE 0)                        ; X
104   (GETVALUE 4)                        ; SIGN
106   (JMPIFNOT L113)
108   (CONST&PUSH 18)                     ; "-"
109   (PUSH-UNBOUND 1)
111   (CALLS1 132)                        ; PRINC
113   L113
113   (GETVALUE 0)                        ; X
115   (CAR&PUSH)
116   (GETVALUE 0)                        ; X
118   (CDR&PUSH)
119   (CALL1 5)                           ; FPABS
121   (CONS&PUSH)
122   (CALL1&PUSH 10)                     ; FPFORMAT
124   (CALL1&PUSH 11)                     ; MAKNAM
126   (PUSH-UNBOUND 1)
128   (CALLS1 132)                        ; PRINC
130   (PUSH-UNBOUND 1)
132   (CALLS1 139)                        ; TERPRI
134   L134
134   (LOAD 6)
135   (UNBIND 2)
137   (SKIP 1)
139   (UNBIND 2)
141   (SKIP&RET 2)
143   L143
143   (T)
144   (SETVALUE 4)                        ; SIGN
146   (GETVALUE 0)                        ; X
148   (CAR&PUSH)
149   (GETVALUE 0)                        ; X
151   (CDR&PUSH)
152   (CALL1 5)                           ; FPABS
154   (CONS&PUSH)
155   (CALL1 6)                           ; FPRATION1
157   (SETVALUE 3)                        ; Y
159   (PUSH)
160   (GETVALUE 3)                        ; Y
162   (CAR&PUSH)
163   (CALLSR&PUSH 0 54)                  ; -
166   (CALLS1 168)                        ; RPLACA
168   (JMP L31)


Disassembly of function #:|(DEFUN FPRATION1 (X) ...)-30|
(CONST 0) = FPRATION1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPRATION1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPRATION1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPRATION1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPRATION1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPRATION1
8     (SKIP&RET 1)


Disassembly of function FPRATION1
(CONST 0) = X
(CONST 1) = $BFTORAT
(CONST 2) = (RAT SIMP)
(CONST 3) = 1
(CONST 4) = 2
(CONST 5) = FPPREC
(CONST 6) = EXPTRL
(CONST 7) = $RATEPSILON
(CONST 8) = $BFLOAT
(CONST 9) = BIGFLOATZERO
(CONST 10) = 0
(CONST 11) = Y
(CONST 12) = FPENTIER
(CONST 13) = NUM
(CONST 14) = FPQUOTIENT
(CONST 15) = FPDIFFERENCE
(CONST 16) = FPABS
(CONST 17) = FPGREATERP
(CONST 18) = BCONS
(CONST 19) = INVERTBIGFLOAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NUM Y FPPREC BIGFLOATZERO X $RATEPSILON $BFTORAT)
writes special variables : (NUM Y)
100 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; $BFTORAT
5     (JMPIF L39)
7     (GETVALUE 7)                        ; $RATEPSILON
9     L9
9     (PUSH)
10    (CALL1 8)                           ; $BFLOAT
12    (CDR&PUSH)
13    (GETVALUE&PUSH 0)                   ; X
15    (GETVALUE&PUSH 9)                   ; BIGFLOATZERO
17    (CALLS2&JMPIF 2 L52)                ; EQUAL
20    (NIL)
21    (BIND 11)                           ; Y
23    (NIL&PUSH)
24    (GETVALUE&PUSH 0)                   ; X
26    (GETVALUE&PUSH 0)                   ; X
28    (CALL1 12)                          ; FPENTIER
30    (STORE 1)
31    (BIND 13)                           ; NUM
33    (CONST&PUSH 3)                      ; 1
34    (CONST&PUSH 3)                      ; 1
35    (CONST&PUSH 10)                     ; 0
36    (JMP L112)
39    L39
39    (CONST&PUSH 2)                      ; (RAT SIMP)
40    (CONST&PUSH 3)                      ; 1
41    (CONST&PUSH 4)                      ; 2
42    (GETVALUE&PUSH 5)                   ; FPPREC
44    (CALLS2&PUSH 151)                   ; 1-
46    (CALL2&PUSH 6)                      ; EXPTRL
48    (LIST 3)
50    (JMP L9)
52    L52
52    (CONST&PUSH 10)                     ; 0
53    (CONST 3)                           ; 1
54    (CONS)
55    (SKIP 1)
57    (JMP L156)
60    L60
60    (LOAD&CDR&PUSH 6)
62    (LOAD&PUSH 8)
63    (CALL1 8)                           ; $BFLOAT
65    (CDR&PUSH)
66    (CALL2&PUSH 15)                     ; FPDIFFERENCE
68    (CALL1&PUSH 18)                     ; BCONS
70    (CALL1 19)                          ; INVERTBIGFLOAT
72    (SETVALUE 11)                       ; Y
74    (PUSH)
75    (GETVALUE&PUSH 11)                  ; Y
77    (CALL1 12)                          ; FPENTIER
79    (STORE 8)
81    (PUSH)
82    (GETVALUE&PUSH 13)                  ; NUM
84    (CALLSR&PUSH 2 55)                  ; *
87    (LOAD&PUSH 3)
88    (CALLSR&PUSH 2 53)                  ; +
91    (LOAD&PUSH 9)
92    (LOAD&PUSH 5)
93    (CALLSR&PUSH 2 55)                  ; *
96    (LOAD&PUSH 3)
97    (CALLSR&PUSH 2 53)                  ; +
100   (GETVALUE 13)                       ; NUM
102   (STORE 4)
103   (LOAD 5)
104   (STORE 3)
105   (POP&STORE 4)
107   (POP)
108   (SETVALUE 13)                       ; NUM
110   (POP&STORE 6)
112   L112
112   (LOAD&PUSH 2)
113   (CALLS2&JMPIF 145 L60)              ; ZEROP
116   (GETVALUE 0)                        ; X
118   (CDR&PUSH)
119   (GETVALUE&PUSH 13)                  ; NUM
121   (CALL1 8)                           ; $BFLOAT
123   (CDR&PUSH)
124   (LOAD&PUSH 4)
125   (CALL1 8)                           ; $BFLOAT
127   (CDR&PUSH)
128   (CALL2&PUSH 14)                     ; FPQUOTIENT
130   (CALL2&PUSH 15)                     ; FPDIFFERENCE
132   (GETVALUE 0)                        ; X
134   (CDR&PUSH)
135   (CALL2&PUSH 14)                     ; FPQUOTIENT
137   (CALL1&PUSH 16)                     ; FPABS
139   (LOAD&PUSH 12)
140   (CALL2&JMPIF 17 L60)                ; FPGREATERP
144   (GETVALUE&PUSH 13)                  ; NUM
146   (LOAD 3)
147   (CONS)
148   (SKIP 3)
150   (UNBIND1)
151   (SKIP 2)
153   (UNBIND1)
154   (SKIP 1)
156   L156
156   (UNBIND1)
157   (SKIP&RET 2)


Disassembly of function #:|(DEFUN FLOATTOFP (X) ...)-31|
(CONST 0) = FLOATTOFP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FLOATTOFP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLOATTOFP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FLOATTOFP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FLOATTOFP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FLOATTOFP
8     (SKIP&RET 1)


Disassembly of function FLOATTOFP
(CONST 0) = X
(CONST 1) = $FLOAT2BF
(CONST 2) = "Warning:  Float to bigfloat conversion of ~S~%"
(CONST 3) = MTELL
(CONST 4) = FIXFLOAT
(CONST 5) = INTOFP
(CONST 6) = FPQUOTIENT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $FLOAT2BF)
writes special variable : (X)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; $FLOAT2BF
5     (JMPIF L12)
7     (CONST&PUSH 2)                      ; "Warning:  Float to bigfloat conversion of ~S~%"
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL2 3)                           ; MTELL
12    L12
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1 4)                           ; FIXFLOAT
16    (SETVALUE 0)                        ; X
18    (CAR&PUSH)
19    (CALL1&PUSH 5)                      ; INTOFP
21    (GETVALUE 0)                        ; X
23    (CDR&PUSH)
24    (CALL1&PUSH 5)                      ; INTOFP
26    (CALL2 6)                           ; FPQUOTIENT
28    (UNBIND1)
29    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN FP2FLO (L) ...)-32|
(CONST 0) = FP2FLO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FP2FLO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FP2FLO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FP2FLO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FP2FLO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FP2FLO
8     (SKIP&RET 1)


Disassembly of function FP2FLO
(CONST 0) = 53
(CONST 1) = FPPREC
(CONST 2) = 0
(CONST 3) = *M
(CONST 4) = FPROUND
(CONST 5) = 9.007199254740992E15
(CONST 6) = QUOT
(CONST 7) = #(NIL)
(CONST 8) = (#(ERROR 68) 1 . 1)
(CONST 9) = 2.0
(CONST 10) = ERRSET
(CONST 11) = "Floating point overflow in converting ~:M to flonum"
(CONST 12) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRSET *M)
60 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CDR)
3     (CDR)
4     (CAR&PUSH)
5     (LOAD 2)
6     (CDR)
7     (CAR&PUSH)
8     (LOAD 3)
9     (CDR)
10    (CDR)
11    (CAR&PUSH)
12    (CONST 0)                           ; 53
13    (BIND 1)                            ; FPPREC
15    (CONST 2)                           ; 0
16    (BIND 3)                            ; *M
18    (LOAD&PUSH 7)
19    (CALL1&PUSH 4)                      ; FPROUND
21    (CONST&PUSH 5)                      ; 9.007199254740992E15
22    (CALL2 6)                           ; QUOT
24    (STORE 7)
25    (NIL&PUSH)
26    (TAGBODY-OPEN 7 L79)                ; #(NIL)
29    (HANDLER-OPEN 8 L68)                ; (#(ERROR 68) 1 . 1)
31    (LOAD&PUSH 16)
32    (CONST&PUSH 9)                      ; 2.0
33    (LOAD&PUSH 17)
34    (LOAD&PUSH 20)
35    (CALLSR&PUSH 0 54)                  ; -
38    (GETVALUE&PUSH 3)                   ; *M
40    (CONST&PUSH 0)                      ; 53
41    (CALLSR&PUSH 4 53)                  ; +
44    (CALLS2&PUSH 154)                   ; EXPT
46    (CALLSR&PUSH 2 55)                  ; *
49    (LIST 1)
51    (SKIP 4)
53    L53
53    (TAGBODY-CLOSE)
54    (SKIP 1)
56    (STORE 8)
58    (JMPIF L87)
60    (CONST&PUSH 11)                     ; "Floating point overflow in converting ~:M to flonum"
61    (LOAD&PUSH 11)
62    (CALL2 12)                          ; MERROR
64    L64
64    (UNBIND 2)
66    (SKIP&RET 5)
68    L68
68    (HANDLER-BEGIN&PUSH)
69    (LOAD 0)
70    (STOREI 0 0 4)
74    (GO-I 0 0 2 0)
79    L79
79    (GETVALUE 10)                       ; ERRSET
81    (JMPIFNOT L53)
83    (LOAD&PUSH 4)
84    (CALLSR 0 29)                       ; ERROR
87    L87
87    (CAR)
88    (JMP L64)


Disassembly of function #:|(DEFUN FIXFLOAT (X) ...)-33|
(CONST 0) = FIXFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXFLOAT
8     (SKIP&RET 1)


Disassembly of function FIXFLOAT
(CONST 0) = X
(CONST 1) = 1.1102230246251565E-16
(CONST 2) = $RATEPSILON
(CONST 3) = MAXIMA-RATIONALIZE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST 1)                           ; 1.1102230246251565E-16
4     (BIND 2)                            ; $RATEPSILON
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 3)                           ; MAXIMA-RATIONALIZE
10    (UNBIND 2)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN BCONS (S) ...)-34|
(CONST 0) = BCONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BCONS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BCONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BCONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BCONS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BCONS
8     (SKIP&RET 1)


Disassembly of function BCONS
(CONST 0) = BIGFLOAT
(CONST 1) = SIMP
(CONST 2) = FPPREC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FPPREC)
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOAT
1     (CONST&PUSH 1)                      ; SIMP
2     (GETVALUE&PUSH 2)                   ; FPPREC
4     (LIST&PUSH 3)
6     (LOAD 2)
7     (CONS)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $BFLOAT (X) ...)-35|
(CONST 0) = $BFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BFLOAT
8     (SKIP&RET 1)


Disassembly of function $BFLOAT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = BIGFLOATP
(CONST 3) = ($%E $%PI)
(CONST 4) = MEMQ
(CONST 5) = INTOFP
(CONST 6) = BCONS
(CONST 7) = ARRAY
(CONST 8) = $%PHI
(CONST 9) = 
((MTIMES SIMP) ((RAT SIMP) 1 2)
 ((MPLUS SIMP) 1 ((MEXPT SIMP) 5 ((RAT SIMP) 1 2))))
(CONST 10) = MEXPT
(CONST 11) = $%E
(CONST 12) = *FPEXP
(CONST 13) = EXPTBIGFLOAT
(CONST 14) = MNCEXPT
(CONST 15) = (MNCEXPT)
(CONST 16) = FLOATPROG
(CONST 17) = SAFE-GET
(CONST 18) = $BFLOAT
(CONST 19) = TRIGP
(CONST 20) = ARCP
(CONST 21) = $ENTIER
(CONST 22) = $BFLOATP
(CONST 23) = LOGARC
(CONST 24) = $%I
(CONST 25) = FREE
(CONST 26) = $RATPRINT
(CONST 27) = $RECTFORM
(CONST 28) = FPARCSIMP
(CONST 29) = (%COT %SEC %CSC)
(CONST 30) = RECIP
(CONST 31) = INVERTBIGFLOAT
(CONST 32) = EXPONENTIALIZE
(CONST 33) = SUBST0
(CONST 34) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (Y)
203 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; BIGFLOATP
10    (JMPIF1 L332)
13    (GETVALUE&PUSH 0)                   ; X
15    (CALLS2&JMPIF 8 L145)               ; NUMBERP
19    (GETVALUE&PUSH 0)                   ; X
21    (CONST&PUSH 3)                      ; ($%E $%PI)
22    (CALL2&JMPIF 4 L145)                ; MEMQ
26    (GETVALUE 0)                        ; X
28    (JMPIFATOM L158)
31    (CONST&PUSH 7)                      ; ARRAY
32    (GETVALUE 0)                        ; X
34    (CAR)
35    (CDR&PUSH)
36    (CALL2&JMPIF 4 L158)                ; MEMQ
40    (GETVALUE 0)                        ; X
42    (CAR)
43    (CAR&PUSH)
44    (JMPIFEQTO 10 L180)                 ; MEXPT
48    (GETVALUE 0)                        ; X
50    (CAR)
51    (CAR&PUSH)
52    (JMPIFEQTO 14 L205)                 ; MNCEXPT
56    (GETVALUE 0)                        ; X
58    (CAR)
59    (CAR&PUSH)
60    (CONST&PUSH 16)                     ; FLOATPROG
61    (CALL2 17)                          ; SAFE-GET
63    (SETVALUE 1)                        ; Y
65    (JMPIF L224)
68    (GETVALUE 0)                        ; X
70    (CAR)
71    (CAR&PUSH)
72    (CALL1&JMPIF 19 L90)                ; TRIGP
75    (GETVALUE 0)                        ; X
77    (CAR)
78    (CAR&PUSH)
79    (CALL1&JMPIF 20 L90)                ; ARCP
82    (GETVALUE 0)                        ; X
84    (CAR)
85    (CAR&PUSH)
86    (JMPIFNOTEQTO 21 L323)              ; $ENTIER
90    L90
90    (GETVALUE 0)                        ; X
92    (CDR)
93    (CAR&PUSH)
94    (JSR L0)
97    (SETVALUE 1)                        ; Y
99    (PUSH)
100   (CALL1&JMPIFNOT 22 L306)            ; $BFLOATP
104   (GETVALUE 0)                        ; X
106   (CAR)
107   (CAR&PUSH)
108   (JMPIFEQTO 21 L239)                 ; $ENTIER
112   (GETVALUE 0)                        ; X
114   (CAR)
115   (CAR&PUSH)
116   (CALL1&JMPIF 20 L253)               ; ARCP
120   (GETVALUE 0)                        ; X
122   (CAR)
123   (CAR&PUSH)
124   (CONST&PUSH 29)                     ; (%COT %SEC %CSC)
125   (CALL2&JMPIF 4 L284)                ; MEMQ
129   (GETVALUE 0)                        ; X
131   (CAR)
132   (CAR&PUSH)
133   (GETVALUE&PUSH 1)                   ; Y
135   (CALL2 32)                          ; EXPONENTIALIZE
137   L137
137   (PUSH)
138   (JSR L0)
141   (UNBIND1)
142   (JMP L333)
145   L145
145   (GETVALUE&PUSH 0)                   ; X
147   (CALL1&PUSH 5)                      ; INTOFP
149   (CALL1 6)                           ; BCONS
151   (UNBIND1)
152   (JMP L333)
155   L155
155   (CONST 9)                           ; ((MTIMES SIMP) (# 1 2) (# 1 #))
156   (JMP L137)
158   L158
158   (GETVALUE&PUSH 0)                   ; X
160   (JMPIFEQTO 8 L155)                  ; $%PHI
163   (GETVALUE 0)                        ; X
165   (UNBIND1)
166   (JMP L333)
169   L169
169   (GETVALUE 0)                        ; X
171   (CDR)
172   (CDR)
173   (CAR&PUSH)
174   (CALL1 12)                          ; *FPEXP
176   (UNBIND1)
177   (JMP L333)
180   L180
180   (GETVALUE 0)                        ; X
182   (CDR)
183   (CAR&PUSH)
184   (JMPIFEQTO 11 L169)                 ; $%E
187   (GETVALUE 0)                        ; X
189   (CDR)
190   (CAR&PUSH)
191   (JSR&PUSH L0)
194   (GETVALUE 0)                        ; X
196   (CDR)
197   (CDR)
198   (CAR&PUSH)
199   (CALL2 13)                          ; EXPTBIGFLOAT
201   (UNBIND1)
202   (JMP L333)
205   L205
205   (CONST&PUSH 15)                     ; (MNCEXPT)
206   (GETVALUE 0)                        ; X
208   (CDR)
209   (CAR&PUSH)
210   (JSR&PUSH L0)
213   (GETVALUE 0)                        ; X
215   (CDR)
216   (CDR)
217   (CAR&PUSH)
218   (LIST 3)
220   (UNBIND1)
221   (JMP L333)
224   L224
224   (PUSH)
225   (CONST&SYMBOL-FUNCTION&PUSH 18)     ; $BFLOAT
227   (GETVALUE 0)                        ; X
229   (CDR&PUSH)
230   (CALLSR&PUSH 0 22)                  ; MAPCAR
233   (FUNCALL 1)
235   (UNBIND1)
236   (JMP L333)
239   L239
239   (GETVALUE&PUSH 1)                   ; Y
241   (CALL1 21)                          ; $ENTIER
243   (UNBIND1)
244   (JMP L333)
247   L247
247   (GETVALUE 1)                        ; Y
249   (UNBIND1)
250   (JMP L333)
253   L253
253   (GETVALUE 0)                        ; X
255   (CAR)
256   (CAR&PUSH)
257   (GETVALUE&PUSH 1)                   ; Y
259   (CALL2&PUSH 23)                     ; LOGARC
261   (JSR L0)
264   (SETVALUE 1)                        ; Y
266   (PUSH)
267   (CONST&PUSH 24)                     ; $%I
268   (CALL2&JMPIF 25 L247)               ; FREE
271   (NIL)
272   (BIND 26)                           ; $RATPRINT
274   (GETVALUE&PUSH 1)                   ; Y
276   (CALL1&PUSH 27)                     ; $RECTFORM
278   (CALL1 28)                          ; FPARCSIMP
280   (UNBIND 2)
282   (JMP L333)
284   L284
284   (GETVALUE 0)                        ; X
286   (CAR)
287   (CAR&PUSH)
288   (CONST&PUSH 30)                     ; RECIP
290   (CALL2&PUSH 17)                     ; SAFE-GET
292   (NIL)
293   (CONS&PUSH)
294   (GETVALUE&PUSH 1)                   ; Y
296   (LIST&PUSH 2)
298   (JSR&PUSH L0)
301   (CALL1 31)                          ; INVERTBIGFLOAT
303   (UNBIND1)
304   (JMP L333)
306   L306
306   (GETVALUE 0)                        ; X
308   (CAR)
309   (CAR&PUSH)
310   (NIL)
311   (CONS&PUSH)
312   (GETVALUE&PUSH 1)                   ; Y
314   (LIST&PUSH 2)
316   (GETVALUE&PUSH 0)                   ; X
318   (CALL2 33)                          ; SUBST0
320   (UNBIND1)
321   (JMP L333)
323   L323
323   (CONST&SYMBOL-FUNCTION&PUSH 18)     ; $BFLOAT
325   (GETVALUE&PUSH 0)                   ; X
327   (CALL2 34)                          ; RECUR-APPLY
329   (UNBIND1)
330   (JMP L333)
332   L332
332   (UNBIND1)
333   L333
333   (UNBIND1)
334   (SKIP&RET 2)


Disassembly of function #:|(DEFPROP MPLUS ADDBIGFLOAT ...)-36|
(CONST 0) = MPLUS
(CONST 1) = FLOATPROG
(CONST 2) = ADDBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPLUS
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; ADDBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MTIMES TIMESBIGFLOAT ...)-37|
(CONST 0) = MTIMES
(CONST 1) = FLOATPROG
(CONST 2) = TIMESBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMES
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; TIMESBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %SIN SINBIGFLOAT ...)-38|
(CONST 0) = %SIN
(CONST 1) = FLOATPROG
(CONST 2) = SINBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SIN
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; SINBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %COS COSBIGFLOAT ...)-39|
(CONST 0) = %COS
(CONST 1) = FLOATPROG
(CONST 2) = COSBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %COS
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; COSBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP RAT RATBIGFLOAT ...)-40|
(CONST 0) = RAT
(CONST 1) = FLOATPROG
(CONST 2) = RATBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; RATBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ATAN ATANBIGFLOAT ...)-41|
(CONST 0) = %ATAN
(CONST 1) = FLOATPROG
(CONST 2) = ATANBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ATAN
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; ATANBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %TAN TANBIGFLOAT ...)-42|
(CONST 0) = %TAN
(CONST 1) = FLOATPROG
(CONST 2) = TANBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %TAN
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; TANBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %LOG LOGBIGFLOAT ...)-43|
(CONST 0) = %LOG
(CONST 1) = FLOATPROG
(CONST 2) = LOGBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LOG
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; LOGBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MABS MABSBIGFLOAT ...)-44|
(CONST 0) = MABS
(CONST 1) = FLOATPROG
(CONST 2) = MABSBIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MABS
1     (CONST&PUSH 1)                      ; FLOATPROG
2     (CONST&PUSH 2)                      ; MABSBIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN ADDBIGFLOAT (H) ...)-45|
(CONST 0) = ADDBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADDBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADDBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADDBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADDBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADDBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function ADDBIGFLOAT
(CONST 0) = BIGFLOATZERO
(CONST 1) = 0
(CONST 2) = BIGFLOATP
(CONST 3) = FPPLUS
(CONST 4) = BCONS
(CONST 5) = (MPLUS)
(CONST 6) = (MPLUS)
(CONST 7) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BIGFLOATZERO)
47 byte-code instructions:
0     (PUSH-NIL 4)
2     (GETVALUE 0)                        ; BIGFLOATZERO
4     (STORE 2)
5     (STORE 3)
6     (CONST 1)                           ; 0
7     (STORE 0)
8     (LOAD&PUSH 5)
9     (LOAD&JMPIFNOT 0 L31)
12    L12
12    (LOAD&CAR&PUSH 0)
14    (CALL1 2)                           ; BIGFLOATP
16    (STORE 2)
17    (JMPIF L51)
19    (CONST&PUSH 5)                      ; (MPLUS)
20    (LOAD&CAR&PUSH 1)
22    (LOAD&PUSH 3)
23    (LIST 3)
25    (STORE 1)
26    L26
26    (LOAD&CDR&STORE 0)
28    (LOAD&JMPIF 0 L12)
31    L31
31    (SKIP 1)
33    (LOAD&PUSH 0)
34    (JMPIFEQTO 1 L61)                   ; 0
37    (LOAD&PUSH 3)
38    (LOAD&PUSH 3)
39    (CALLS2&JMPIF 2 L64)                ; EQUAL
42    (CONST&PUSH 6)                      ; (MPLUS)
43    (LOAD&PUSH 4)
44    (LOAD&PUSH 2)
45    (LIST&PUSH 3)
47    (CALL1 7)                           ; SIMPLIFY
49    (SKIP&RET 6)
51    L51
51    (CDR&PUSH)
52    (LOAD&CDR&PUSH 5)
54    (CALL2&PUSH 3)                      ; FPPLUS
56    (CALL1 4)                           ; BCONS
58    (STORE 4)
59    (JMP L26)
61    L61
61    (LOAD 3)
62    (SKIP&RET 6)
64    L64
64    (POP)
65    (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN RATBIGFLOAT (L) ...)-46|
(CONST 0) = RATBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function RATBIGFLOAT
(CONST 0) = FPQUOTIENT
(CONST 1) = BCONS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CDR&PUSH)
3     (LOAD 2)
4     (CDR)
5     (CAR)
6     (CDR&PUSH)
7     (CALL2&PUSH 0)                      ; FPQUOTIENT
9     (CALL1 1)                           ; BCONS
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DECIMALSIN (X) ...)-47|
(CONST 0) = DECIMALSIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DECIMALSIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DECIMALSIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DECIMALSIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DECIMALSIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DECIMALSIN
8     (SKIP&RET 1)


Disassembly of function DECIMALSIN
(CONST 0) = X
(CONST 1) = 59
(CONST 2) = 196
(CONST 3) = QUOT
(CONST 4) = 10
(CONST 5) = HAULONG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 59
4     (GETVALUE&PUSH 0)                   ; X
6     (CALLSR&PUSH 2 55)                  ; *
9     (CONST&PUSH 2)                      ; 196
10    (CALL2&PUSH 3)                      ; QUOT
12    (JMP L16)
14    L14
14    (LOAD&INC&STORE 0)
16    L16
16    (CONST&PUSH 4)                      ; 10
17    (LOAD&PUSH 1)
18    (CALLS2&PUSH 154)                   ; EXPT
20    (CALL1&PUSH 5)                      ; HAULONG
22    (GETVALUE&PUSH 0)                   ; X
24    (CALLSR&JMPIFNOT 1 48 L14)          ; >
28    (LOAD&PUSH 0)
29    (CALLS2 151)                        ; 1-
31    (SKIP 1)
33    (UNBIND1)
34    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN ATANBIGFLOAT (X) ...)-48|
(CONST 0) = ATANBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATANBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATANBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATANBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATANBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATANBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function ATANBIGFLOAT
(CONST 0) = X
(CONST 1) = *FPATAN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (GETVALUE 0)                        ; X
8     (CDR&PUSH)
9     (CALL2 1)                           ; *FPATAN
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN *FPATAN (A Y) ...)-49|
(CONST 0) = *FPATAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *FPATAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *FPATAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *FPATAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *FPATAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *FPATAN
8     (SKIP&RET 1)


Disassembly of function *FPATAN
(CONST 0) = Y
(CONST 1) = 8
(CONST 2) = FPPREC
(CONST 3) = $BFLOATP
(CONST 4) = $BFLOAT
(CONST 5) = FPATAN
(CONST 6) = (%ATAN)
(CONST 7) = FPATAN2
(CONST 8) = FPEND
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y FPPREC)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Y
3     (CONST&PUSH 1)                      ; 8
4     (GETVALUE&PUSH 2)                   ; FPPREC
6     (CALLSR 2 53)                       ; +
9     (BIND 2)                            ; FPPREC
11    (GETVALUE 0)                        ; Y
13    (JMPIFNOT L42)
15    (LOAD&PUSH 8)
16    (CALL1 4)                           ; $BFLOAT
18    (CDR&PUSH)
19    (GETVALUE 0)                        ; Y
21    (CAR&PUSH)
22    (CALL1 4)                           ; $BFLOAT
24    (CDR&PUSH)
25    (CALL2 7)                           ; FPATAN2
27    L27
27    (UNBIND1)
28    (PUSH)
29    (CALL1 8)                           ; FPEND
31    (UNBIND1)
32    (SKIP&RET 3)
34    L34
34    (LOAD&PUSH 8)
35    (CALL1 4)                           ; $BFLOAT
37    (CDR&PUSH)
38    (CALL1 5)                           ; FPATAN
40    (JMP L27)
42    L42
42    (LOAD&PUSH 8)
43    (CALL1&JMPIF 3 L34)                 ; $BFLOATP
46    (CONST&PUSH 6)                      ; (%ATAN)
47    (LOAD&PUSH 9)
48    (LIST 2)
50    (JMP L27)


Disassembly of function #:|(DEFUN FPATAN (X) ...)-50|
(CONST 0) = FPATAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPATAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPATAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPATAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPATAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPATAN
8     (SKIP&RET 1)


Disassembly of function FPATAN
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = INTOFP
(CONST 3) = 2
(CONST 4) = FPABS
(CONST 5) = FPGREATERP
(CONST 6) = FPPI
(CONST 7) = FPQUOTIENT
(CONST 8) = FPDIFFERENCE
(CONST 9) = FPTIMES*
(CONST 10) = FPPLUS
(CONST 11) = 0
(CONST 12) = 3
(CONST 13) = FPMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
135 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 7)
5     (CONST&PUSH 1)                      ; 1
6     (CALL1 2)                           ; INTOFP
8     (STORE 2)
9     (CONST&PUSH 3)                      ; 2
10    (CALL1 2)                           ; INTOFP
12    (STORE 1)
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL1&PUSH 4)                      ; FPABS
17    (LOAD&PUSH 3)
18    (CALL2&JMPIF 5 L50)                 ; FPGREATERP
21    (GETVALUE&PUSH 0)                   ; X
23    (CALL1&PUSH 4)                      ; FPABS
25    (LOAD&PUSH 3)
26    (LOAD&PUSH 3)
27    (CALL2&PUSH 7)                      ; FPQUOTIENT
29    (CALL2&JMPIF 5 L86)                 ; FPGREATERP
32    (GETVALUE 0)                        ; X
34    (STORE 4)
35    (PUSH)
36    (GETVALUE&PUSH 0)                   ; X
38    (CALL2&PUSH 9)                      ; FPTIMES*
40    (CALL1 13)                          ; FPMINUS
42    (STORE 5)
43    (GETVALUE 0)                        ; X
45    (STORE 6)
46    (CONST&PUSH 12)                     ; 3
47    (JMP L189)
50    L50
50    (CALL0 6)                           ; FPPI
52    (PUSH)
53    (LOAD&PUSH 2)
54    (CALL2 7)                           ; FPQUOTIENT
56    (STORE 0)
57    (PUSH)
58    (LOAD&PUSH 3)
59    (GETVALUE&PUSH 0)                   ; X
61    (CALL2&PUSH 7)                      ; FPQUOTIENT
63    (JSR&PUSH L0)
66    (CALL2 8)                           ; FPDIFFERENCE
68    (STORE 4)
69    (PUSH)
70    (LOAD&PUSH 1)
71    (CALL2&JMPIFNOT 5 L196)             ; FPGREATERP
75    (LOAD&PUSH 4)
76    (CALL0 6)                           ; FPPI
78    (PUSH)
79    (CALL2 8)                           ; FPDIFFERENCE
81    (SKIP 7)
83    (JMP L199)
86    L86
86    (GETVALUE&PUSH 0)                   ; X
88    (GETVALUE&PUSH 0)                   ; X
90    (GETVALUE&PUSH 0)                   ; X
92    (CALL2&PUSH 9)                      ; FPTIMES*
94    (LOAD&PUSH 4)
95    (CALL2&PUSH 10)                     ; FPPLUS
97    (CALL2 7)                           ; FPQUOTIENT
99    (STORE 0)
100   (GETVALUE&PUSH 0)                   ; X
102   (LOAD&PUSH 1)
103   (CALL2 9)                           ; FPTIMES*
105   (STORE 5)
106   (LOAD 2)
107   (STORE 4)
108   (STORE 6)
109   (CONST&PUSH 11)                     ; 0
110   (JMP L152)
112   L112
112   (LOAD&PUSH 7)
113   (LOAD&PUSH 7)
114   (CONST&PUSH 3)                      ; 2
115   (CONST&PUSH 3)                      ; 2
116   (LOAD&PUSH 4)
117   (CALLSR&PUSH 2 55)                  ; *
120   (CALLSR&PUSH 2 53)                  ; +
123   (CALL1&PUSH 2)                      ; INTOFP
125   (CONST&PUSH 3)                      ; 2
126   (LOAD&PUSH 4)
127   (CALLSR&PUSH 2 55)                  ; *
130   (CONST&PUSH 12)                     ; 3
131   (CALLSR&PUSH 2 53)                  ; +
134   (CALL1&PUSH 2)                      ; INTOFP
136   (CALL2&PUSH 7)                      ; FPQUOTIENT
138   (CALL2&PUSH 9)                      ; FPTIMES*
140   (CALL2 9)                           ; FPTIMES*
142   (STORE 7)
143   (LOAD 5)
144   (STORE 4)
145   (LOAD&PUSH 7)
146   (LOAD&PUSH 6)
147   (CALL2 10)                          ; FPPLUS
149   (STORE 5)
150   (LOAD&INC&STORE 0)
152   L152
152   (LOAD&PUSH 5)
153   (LOAD&PUSH 5)
154   (CALLS2&JMPIFNOT 2 L112)            ; EQUAL
157   (SKIP 1)
159   (LOAD&PUSH 0)
160   (LOAD&PUSH 5)
161   (CALL2 9)                           ; FPTIMES*
163   (STORE 4)
164   (JMP L196)
166   L166
166   (LOAD&PUSH 7)
167   (LOAD&PUSH 7)
168   (CALL2 9)                           ; FPTIMES*
170   (STORE 7)
171   (LOAD 5)
172   (STORE 4)
173   (PUSH)
174   (LOAD&PUSH 8)
175   (LOAD&PUSH 2)
176   (CALL1&PUSH 2)                      ; INTOFP
178   (CALL2&PUSH 7)                      ; FPQUOTIENT
180   (CALL2 10)                          ; FPPLUS
182   (STORE 5)
183   (LOAD&PUSH 0)
184   (CONST&PUSH 3)                      ; 2
185   (CALLSR&STORE 2 53 0)               ; +
189   L189
189   (LOAD&PUSH 5)
190   (LOAD&PUSH 5)
191   (CALLS2&JMPIFNOT 2 L166)            ; EQUAL
194   (SKIP 1)
196   L196
196   (LOAD 4)
197   (SKIP 7)
199   L199
199   (UNBIND1)
200   (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPATAN2 (Y X) ...)-51|
(CONST 0) = FPATAN2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPATAN2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPATAN2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPATAN2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPATAN2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPATAN2
8     (SKIP&RET 1)


Disassembly of function FPATAN2
(CONST 0) = Y
(CONST 1) = X
(CONST 2) = 0
(CONST 3) = "ATAN(0//0) has been generated."
(CONST 4) = MERROR
(CONST 5) = FPPI
(CONST 6) = -2
(CONST 7) = INTOFP
(CONST 8) = FPQUOTIENT
(CONST 9) = 2
(CONST 10) = FPATAN
(CONST 11) = FPMINUS
(CONST 12) = FPPLUS
(CONST 13) = FPDIFFERENCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
102 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; Y
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (GETVALUE 1)                        ; X
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 2 L125)               ; 0
13    (GETVALUE 0)                        ; Y
15    (CAR&PUSH)
16    (JMPIFEQTO 2 L37)                   ; 0
19    (GETVALUE 0)                        ; Y
21    (CAR&PUSH)
22    (CALLS2&JMPIF 147 L43)              ; MINUSP
25    (CALL0 5)                           ; FPPI
27    (PUSH)
28    (CONST 9)                           ; 2
29    L29
29    (PUSH)
30    (CALL1&PUSH 7)                      ; INTOFP
32    (CALL2 8)                           ; FPQUOTIENT
34    (JMP L160)
37    L37
37    (CONST&PUSH 3)                      ; "ATAN(0//0) has been generated."
38    (CALL1 4)                           ; MERROR
40    (JMP L160)
43    L43
43    (CALL0 5)                           ; FPPI
45    (PUSH)
46    (CONST 6)                           ; -2
47    (JMP L29)
49    L49
49    (LOAD&PUSH 0)
50    (CONST&PUSH 2)                      ; 0
51    (CALLSR 1 48)                       ; >
54    (SKIP 1)
56    (JMPIFNOT L89)
58    L58
58    (GETVALUE&PUSH 0)                   ; Y
60    (GETVALUE&PUSH 1)                   ; X
62    (CALL2&PUSH 8)                      ; FPQUOTIENT
64    (CALL1 10)                          ; FPATAN
66    (JMP L160)
69    L69
69    (LOAD&PUSH 0)
70    (CONST&PUSH 2)                      ; 0
71    (CALLSR 1 48)                       ; >
74    (SKIP 1)
76    (JMPIFNOT L136)
78    L78
78    (GETVALUE 0)                        ; Y
80    (CAR&PUSH)
81    (LOAD&PUSH 0)
82    (CALLS2&JMPIF 8 L49)                ; NUMBERP
85    (SKIP 1)
87    (JMPIF L58)
89    L89
89    (GETVALUE&PUSH 0)                   ; Y
91    (GETVALUE&PUSH 1)                   ; X
93    (CALL2&PUSH 8)                      ; FPQUOTIENT
95    (CALL1&PUSH 10)                     ; FPATAN
97    (CALL1 11)                          ; FPMINUS
99    (JMP L160)
101   L101
101   (LOAD&PUSH 0)
102   (CONST&PUSH 2)                      ; 0
103   (CALLSR 1 48)                       ; >
106   (SKIP 1)
108   (JMPIFNOT L147)
110   L110
110   (CALL0 5)                           ; FPPI
112   (PUSH)
113   (GETVALUE&PUSH 0)                   ; Y
115   (GETVALUE&PUSH 1)                   ; X
117   (CALL2&PUSH 8)                      ; FPQUOTIENT
119   (CALL1&PUSH 10)                     ; FPATAN
121   (CALL2 12)                          ; FPPLUS
123   (JMP L160)
125   L125
125   (GETVALUE 1)                        ; X
127   (CAR&PUSH)
128   (LOAD&PUSH 0)
129   (CALLS2&JMPIF 8 L69)                ; NUMBERP
132   (SKIP 1)
134   (JMPIF L78)
136   L136
136   (GETVALUE 0)                        ; Y
138   (CAR&PUSH)
139   (LOAD&PUSH 0)
140   (CALLS2&JMPIF 8 L101)               ; NUMBERP
143   (SKIP 1)
145   (JMPIF L110)
147   L147
147   (GETVALUE&PUSH 0)                   ; Y
149   (GETVALUE&PUSH 1)                   ; X
151   (CALL2&PUSH 8)                      ; FPQUOTIENT
153   (CALL1&PUSH 10)                     ; FPATAN
155   (CALL0 5)                           ; FPPI
157   (PUSH)
158   (CALL2 13)                          ; FPDIFFERENCE
160   L160
160   (UNBIND 2)
162   (SKIP&RET 3)


Disassembly of function #:|(DEFUN TANBIGFLOAT (A) ...)-52|
(CONST 0) = TANBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TANBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TANBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TANBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TANBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TANBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function TANBIGFLOAT
(CONST 0) = 8
(CONST 1) = FPPREC
(CONST 2) = $BFLOATP
(CONST 3) = $BFLOAT
(CONST 4) = FPSIN
(CONST 5) = FPQUOTIENT
(CONST 6) = (%TAN)
(CONST 7) = FPEND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FPPREC)
28 byte-code instructions:
0     (LOAD&CAR&STORE 1 1)
3     (CONST&PUSH 0)                      ; 8
4     (GETVALUE&PUSH 1)                   ; FPPREC
6     (CALLSR 2 53)                       ; +
9     (BIND 1)                            ; FPPREC
11    (LOAD&PUSH 4)
12    (CALL1&JMPIF 2 L25)                 ; $BFLOATP
15    (CONST&PUSH 6)                      ; (%TAN)
16    (LOAD&PUSH 5)
17    (LIST 2)
19    L19
19    (UNBIND1)
20    (PUSH)
21    (CALL1 7)                           ; FPEND
23    (SKIP&RET 2)
25    L25
25    (LOAD&PUSH 4)
26    (CALL1 3)                           ; $BFLOAT
28    (CDR)
29    (STORE 4)
30    (PUSH)
31    (T&PUSH)
32    (CALL2&PUSH 4)                      ; FPSIN
34    (LOAD&PUSH 5)
35    (NIL&PUSH)
36    (CALL2&PUSH 4)                      ; FPSIN
38    (CALL2 5)                           ; FPQUOTIENT
40    (JMP L19)


Disassembly of function #:|(DEFUN INTOFP (L) ...)-53|
(CONST 0) = INTOFP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTOFP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTOFP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTOFP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTOFP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTOFP
8     (SKIP&RET 1)


Disassembly of function INTOFP
(CONST 0) = $BFLOAT
(CONST 1) = FLOATTOFP
(CONST 2) = 0
(CONST 3) = (0 0)
(CONST 4) = $%PI
(CONST 5) = FPPI
(CONST 6) = $%E
(CONST 7) = FPE
(CONST 8) = FPROUND
(CONST 9) = *M
(CONST 10) = FPPREC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FPPREC *M)
34 byte-code instructions:
0     (LOAD 1)
1     (JMPIFCONSP L33)
3     (LOAD&PUSH 1)
4     (CALLS2&JMPIF 15 L38)               ; FLOATP
7     (LOAD&PUSH 1)
8     (JMPIFEQTO 2 L43)                   ; 0
11    (LOAD&PUSH 1)
12    (JMPIFEQTO 4 L46)                   ; $%PI
15    (LOAD&PUSH 1)
16    (JMPIFEQTO 6 L50)                   ; $%E
19    (LOAD&PUSH 1)
20    (CALL1&PUSH 8)                      ; FPROUND
22    (GETVALUE&PUSH 9)                   ; *M
24    (GETVALUE&PUSH 10)                  ; FPPREC
26    (CALLSR&PUSH 2 53)                  ; +
29    (LIST 2)
31    (SKIP&RET 2)
33    L33
33    (LOAD&PUSH 1)
34    (CALL1 0)                           ; $BFLOAT
36    (SKIP&RET 2)
38    L38
38    (LOAD&PUSH 1)
39    (CALL1 1)                           ; FLOATTOFP
41    (SKIP&RET 2)
43    L43
43    (CONST 3)                           ; (0 0)
44    (SKIP&RET 2)
46    L46
46    (CALL0 5)                           ; FPPI
48    (SKIP&RET 2)
50    L50
50    (CALL0 7)                           ; FPE
52    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPROUND (L &AUX # ...) ...)-54|
(CONST 0) = FPROUND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPROUND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPROUND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPROUND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPROUND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPROUND
8     (SKIP&RET 1)


Disassembly of function FPROUND
(CONST 0) = 10
(CONST 1) = *PRINT-BASE*
(CONST 2) = *PRINT-RADIX*
(CONST 3) = *DECFP
(CONST 4) = HAULONG
(CONST 5) = FPPREC
(CONST 6) = *M
(CONST 7) = 0
(CONST 8) = *CANCELLED
(CONST 9) = 1
(CONST 10) = FPSHIFT
(CONST 11) = ADJUST
(CONST 12) = HIPART
(CONST 13) = -1
(CONST 14) = FLATSIZE
(CONST 15) = 5
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ADJUST *M FPPREC *DECFP)
writes special variables : (*CANCELLED ADJUST *M)
94 byte-code instructions:
0     (CONST 0)                           ; 10
1     (BIND 1)                            ; *PRINT-BASE*
3     (NIL)
4     (BIND 2)                            ; *PRINT-RADIX*
6     (GETVALUE 3)                        ; *DECFP
8     (JMPIFNOT L89)
11    (LOAD&PUSH 7)
12    (CALLS2&PUSH 158)                   ; ABS
14    (CALL1&PUSH 14)                     ; FLATSIZE
16    (GETVALUE&PUSH 5)                   ; FPPREC
18    (CALLSR 1 54)                       ; -
21    (SETVALUE 6)                        ; *M
23    (CONST&PUSH 9)                      ; 1
24    (GETVALUE&PUSH 6)                   ; *M
26    (CALLS2&PUSH 151)                   ; 1-
28    (CALL2 10)                          ; FPSHIFT
30    (SETVALUE 11)                       ; ADJUST
32    (LOAD&PUSH 7)
33    (CALLS2&JMPIFNOT 147 L43)           ; MINUSP
36    (GETVALUE&PUSH 11)                  ; ADJUST
38    (CALLSR 0 54)                       ; -
41    (SETVALUE 11)                       ; ADJUST
43    L43
43    (CONST&PUSH 15)                     ; 5
44    (GETVALUE&PUSH 11)                  ; ADJUST
46    (CALLSR 2 55)                       ; *
49    (SETVALUE 11)                       ; ADJUST
51    (LOAD&PUSH 7)
52    (GETVALUE&PUSH 11)                  ; ADJUST
54    (CALLSR&STORE 2 53 7)               ; +
58    (PUSH)
59    (CALLS2&PUSH 158)                   ; ABS
61    (CALL1&PUSH 14)                     ; FLATSIZE
63    (GETVALUE&PUSH 5)                   ; FPPREC
65    (CALLSR 1 54)                       ; -
68    (SETVALUE 6)                        ; *M
70    L70
70    (LOAD&PUSH 7)
71    (GETVALUE&PUSH 6)                   ; *M
73    (CALLSR 0 54)                       ; -
76    L76
76    (PUSH)
77    (CALL2 10)                          ; FPSHIFT
79    L79
79    (UNBIND 2)
81    (SKIP&RET 2)
83    L83
83    (CONST 7)                           ; 0
84    (SETVALUE 8)                        ; *CANCELLED
86    (LOAD 7)
87    (JMP L79)
89    L89
89    (LOAD&PUSH 7)
90    (CALL1&PUSH 4)                      ; HAULONG
92    (GETVALUE&PUSH 5)                   ; FPPREC
94    (CALLSR 1 54)                       ; -
97    (SETVALUE 6)                        ; *M
99    (PUSH)
100   (CONST&PUSH 7)                      ; 0
101   (CALLSR&JMPIF 1 45 L83)             ; =
105   (CONST&PUSH 9)                      ; 1
106   (GETVALUE&PUSH 6)                   ; *M
108   (CALLS2&PUSH 151)                   ; 1-
110   (CALL2 10)                          ; FPSHIFT
112   (SETVALUE 11)                       ; ADJUST
114   (LOAD&PUSH 7)
115   (CALLS2&JMPIFNOT 147 L125)          ; MINUSP
118   (GETVALUE&PUSH 11)                  ; ADJUST
120   (CALLSR 0 54)                       ; -
123   (SETVALUE 11)                       ; ADJUST
125   L125
125   (LOAD&PUSH 7)
126   (GETVALUE&PUSH 11)                  ; ADJUST
128   (CALLSR&STORE 2 53 7)               ; +
132   (PUSH)
133   (CALL1&PUSH 4)                      ; HAULONG
135   (GETVALUE&PUSH 5)                   ; FPPREC
137   (CALLSR 1 54)                       ; -
140   (SETVALUE 6)                        ; *M
142   (PUSH)
143   (CALLS2 158)                        ; ABS
145   (SETVALUE 8)                        ; *CANCELLED
147   (LOAD&PUSH 7)
148   (GETVALUE&PUSH 6)                   ; *M
150   (CALLSR&PUSH 0 54)                  ; -
153   (CALL2&PUSH 12)                     ; HIPART
155   (CALLS2&JMPIFNOT 145 L70)           ; ZEROP
159   (LOAD&PUSH 7)
160   (CONST&PUSH 13)                     ; -1
161   (GETVALUE&PUSH 6)                   ; *M
163   (CALLSR&PUSH 1 54)                  ; -
166   (CALL2&PUSH 10)                     ; FPSHIFT
168   (CONST 9)                           ; 1
169   (JMP L76)


Disassembly of function #:|(DEFUN FPSHIFT (L N) ...)-55|
(CONST 0) = FPSHIFT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPSHIFT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPSHIFT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPSHIFT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPSHIFT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPSHIFT
8     (SKIP&RET 1)


Disassembly of function FPSHIFT
(CONST 0) = *DECFP
(CONST 1) = 0
(CONST 2) = 10
(CONST 3) = QUOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*DECFP)
42 byte-code instructions:
0     (GETVALUE 0)                        ; *DECFP
2     (JMPIFNOT L31)
4     (LOAD&PUSH 1)
5     (CONST&PUSH 1)                      ; 0
6     (CALLSR&JMPIF 1 48 L45)             ; >
10    (LOAD&PUSH 1)
11    (CONST&PUSH 1)                      ; 0
12    (CALLSR&JMPIF 1 47 L55)             ; <
16    (LOAD 2)
17    (SKIP&RET 3)
19    L19
19    (LOAD&PUSH 2)
20    (CALLSR&PUSH 0 54)                  ; -
23    (LOAD&PUSH 2)
24    (CALLS2&PUSH 209)                   ; ASH
26    (CALLSR 0 54)                       ; -
29    (SKIP&RET 3)
31    L31
31    (LOAD&PUSH 1)
32    (CALLS2&JMPIFNOT 147 L39)           ; MINUSP
35    (LOAD&PUSH 2)
36    (CALLS2&JMPIF 147 L19)              ; MINUSP
39    L39
39    (LOAD&PUSH 2)
40    (LOAD&PUSH 2)
41    (CALLS2 209)                        ; ASH
43    (SKIP&RET 3)
45    L45
45    (LOAD&PUSH 2)
46    (CONST&PUSH 2)                      ; 10
47    (LOAD&PUSH 3)
48    (CALLS2&PUSH 154)                   ; EXPT
50    (CALLSR 2 55)                       ; *
53    (SKIP&RET 3)
55    L55
55    (LOAD&PUSH 2)
56    (CONST&PUSH 2)                      ; 10
57    (LOAD&PUSH 3)
58    (CALLSR&PUSH 0 54)                  ; -
61    (CALLS2&PUSH 154)                   ; EXPT
63    (CALL2 3)                           ; QUOT
65    (SKIP&RET 3)


Disassembly of function #:|(DEFUN BIGLSH (X N) ...)-56|
(CONST 0) = BIGLSH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIGLSH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGLSH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIGLSH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIGLSH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BIGLSH
8     (SKIP&RET 1)


Disassembly of function BIGLSH
(CONST 0) = X
(CONST 1) = BIGP
(CONST 2) = -24
(CONST 3) = 0
(CONST 4) = HAULONG
(CONST 5) = 24
(CONST 6) = LSH
(CONST 7) = HIPART
(CONST 8) = 23
(CONST 9) = 1
(CONST 10) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
96 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L15)                 ; BIGP
8     (LOAD&PUSH 4)
9     (CONST&PUSH 2)                      ; -24
10    (CALLSR&JMPIF 1 47 L84)             ; <
15    L15
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1&JMPIF 1 L40)                 ; BIGP
20    (LOAD&PUSH 4)
21    (CONST&PUSH 3)                      ; 0
22    (CALLSR&JMPIF 1 49 L96)             ; <=
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL1&PUSH 4)                      ; HAULONG
31    (LOAD&PUSH 5)
32    (CALLSR&PUSH 2 53)                  ; +
35    (CONST&PUSH 5)                      ; 24
36    (CALLSR&JMPIF 1 47 L96)             ; <
40    L40
40    (LOAD&PUSH 4)
41    (CONST&PUSH 3)                      ; 0
42    (CALLSR&JMPIFNOT 1 47 L143)         ; <
47    (LOAD&PUSH 4)
48    (CALLS2&PUSH 158)                   ; ABS
50    (GETVALUE&PUSH 0)                   ; X
52    (CALL1&PUSH 4)                      ; HAULONG
54    (CALLSR&JMPIF 1 48 L114)            ; >
58    (GETVALUE&PUSH 0)                   ; X
60    (CONST&PUSH 3)                      ; 0
61    (CALLSR&JMPIF 1 48 L117)            ; >
65    (GETVALUE&PUSH 0)                   ; X
67    (GETVALUE&PUSH 0)                   ; X
69    (CALL1&PUSH 4)                      ; HAULONG
71    (LOAD&PUSH 6)
72    (CALLSR&PUSH 2 53)                  ; +
75    (CALL2 7)                           ; HIPART
77    L77
77    (PUSH)
78    (CALLSR 0 54)                       ; -
81    (JMP L165)
84    L84
84    (CONST 3)                           ; 0
85    (JMP L165)
88    L88
88    (GETVALUE&PUSH 0)                   ; X
90    (LOAD&PUSH 5)
91    (CALL2 6)                           ; LSH
93    (JMP L165)
96    L96
96    (GETVALUE&PUSH 0)                   ; X
98    (CONST&PUSH 3)                      ; 0
99    (CALLSR&JMPIF 1 50 L88)             ; >=
103   (GETVALUE&PUSH 0)                   ; X
105   (CALLSR&PUSH 0 54)                  ; -
108   (LOAD&PUSH 5)
109   (JSR L0)
112   (JMP L77)
114   L114
114   (CONST 3)                           ; 0
115   (JMP L165)
117   L117
117   (GETVALUE&PUSH 0)                   ; X
119   (GETVALUE&PUSH 0)                   ; X
121   (CALL1&PUSH 4)                      ; HAULONG
123   (LOAD&PUSH 6)
124   (CALLSR&PUSH 2 53)                  ; +
127   (CALL2 7)                           ; HIPART
129   (JMP L165)
131   L131
131   (GETVALUE 0)                        ; X
133   (JMP L165)
135   L135
135   (GETVALUE&PUSH 0)                   ; X
137   (CONST&PUSH 9)                      ; 1
138   (LOAD&PUSH 6)
139   (CALL2 6)                           ; LSH
141   (JMP L161)
143   L143
143   (LOAD&PUSH 4)
144   (CONST&PUSH 3)                      ; 0
145   (CALLSR&JMPIF 1 45 L131)            ; =
149   (LOAD&PUSH 4)
150   (CONST&PUSH 8)                      ; 23
151   (CALLSR&JMPIF 1 47 L135)            ; <
155   (GETVALUE&PUSH 0)                   ; X
157   (CONST&PUSH 10)                     ; 2
158   (LOAD&PUSH 6)
159   (CALLS2 154)                        ; EXPT
161   L161
161   (PUSH)
162   (CALLSR 2 55)                       ; *
165   L165
165   (UNBIND1)
166   (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPEXP (X) ...)-57|
(CONST 0) = FPEXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPEXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPEXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPEXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPEXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPEXP
8     (SKIP&RET 1)


Disassembly of function FPEXP
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = FPONE
(CONST 3) = FPABS
(CONST 4) = FPQUOTIENT
(CONST 5) = FPINTPART
(CONST 6) = 2
(CONST 7) = FPEXP1
(CONST 8) = INTOFP
(CONST 9) = FPDIFFERENCE
(CONST 10) = -1
(CONST 11) = FPPREC
(CONST 12) = HAULONG
(CONST 13) = FPE
(CONST 14) = FPEXPT
(CONST 15) = BCONS
(CONST 16) = BIGFLOATP
(CONST 17) = FPTIMES*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FPPREC X)
64 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 2)
5     (GETVALUE 0)                        ; X
7     (CAR&PUSH)
8     (LOAD&PUSH 0)
9     (CALLS2&JMPIF 8 L70)                ; NUMBERP
12    (SKIP 1)
14    (JMPIFNOT L79)
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1 5)                           ; FPINTPART
20    (STORE 1)
21    (PUSH)
22    (CONST&PUSH 6)                      ; 2
23    (CALLSR&JMPIF 1 47 L95)             ; <
28    (GETVALUE&PUSH 0)                   ; X
30    (LOAD&PUSH 2)
31    (CALL1&PUSH 8)                      ; INTOFP
33    (CALL2&PUSH 9)                      ; FPDIFFERENCE
35    (CALL1 7)                           ; FPEXP1
37    (STORE 0)
38    (PUSH)
39    (CONST&PUSH 10)                     ; -1
40    (GETVALUE&PUSH 11)                  ; FPPREC
42    (LOAD&PUSH 4)
43    (CALL1&PUSH 12)                     ; HAULONG
45    (CALLSR 3 53)                       ; +
48    (BIND 11)                           ; FPPREC
50    (CALL0 13)                          ; FPE
52    (PUSH)
53    (LOAD&PUSH 6)
54    (CALL2&PUSH 14)                     ; FPEXPT
56    (CALL1 15)                          ; BCONS
58    (UNBIND1)
59    (PUSH)
60    (CALL1 16)                          ; BIGFLOATP
62    (CDR&PUSH)
63    (CALL2 17)                          ; FPTIMES*
65    (SKIP 2)
67    L67
67    (UNBIND1)
68    (SKIP&RET 2)
70    L70
70    (LOAD&PUSH 0)
71    (CONST&PUSH 1)                      ; 0
72    (CALLSR 1 50)                       ; >=
75    (SKIP 1)
77    (JMPIF L16)
79    L79
79    (CALL0 2)                           ; FPONE
81    (PUSH)
82    (GETVALUE&PUSH 0)                   ; X
84    (CALL1&PUSH 3)                      ; FPABS
86    (JSR&PUSH L0)
89    (CALL2 4)                           ; FPQUOTIENT
91    (SKIP 2)
93    (JMP L67)
95    L95
95    (GETVALUE&PUSH 0)                   ; X
97    (CALL1 7)                           ; FPEXP1
99    (SKIP 2)
101   (JMP L67)


Disassembly of function #:|(DEFUN FPEXP1 (X) ...)-58|
(CONST 0) = FPEXP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPEXP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPEXP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPEXP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPEXP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPEXP1
8     (SKIP&RET 1)


Disassembly of function FPEXP1
(CONST 0) = X
(CONST 1) = FPONE
(CONST 2) = 1
(CONST 3) = FPTIMES*
(CONST 4) = INTOFP
(CONST 5) = FPQUOTIENT
(CONST 6) = FPPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 3)
5     (CALL0 1)                           ; FPONE
7     (STORE 2)
8     (STORE 1)
9     (CONST&PUSH 2)                      ; 1
10    (JMP L32)
12    L12
12    (GETVALUE&PUSH 0)                   ; X
14    (LOAD&PUSH 4)
15    (CALL2&PUSH 3)                      ; FPTIMES*
17    (LOAD&PUSH 1)
18    (CALL1&PUSH 4)                      ; INTOFP
20    (CALL2 5)                           ; FPQUOTIENT
22    (STORE 3)
23    (LOAD 2)
24    (STORE 1)
25    (PUSH)
26    (LOAD&PUSH 4)
27    (CALL2 6)                           ; FPPLUS
29    (STORE 2)
30    (LOAD&INC&STORE 0)
32    L32
32    (LOAD&PUSH 2)
33    (LOAD&PUSH 2)
34    (CALLS2&JMPIFNOT 2 L12)             ; EQUAL
37    (SKIP 1)
39    (LOAD 1)
40    (SKIP 3)
42    (UNBIND1)
43    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPQUOTIENT (A B) ...)-59|
(CONST 0) = FPQUOTIENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPQUOTIENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPQUOTIENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPQUOTIENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPQUOTIENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPQUOTIENT
8     (SKIP&RET 1)


Disassembly of function FPQUOTIENT
(CONST 0) = 0
(CONST 1) = "PQUOTIENT by zero"
(CONST 2) = MERROR
(CONST 3) = (0 0)
(CONST 4) = 3
(CONST 5) = FPPREC
(CONST 6) = FPSHIFT
(CONST 7) = QUOT
(CONST 8) = FPROUND
(CONST 9) = -3
(CONST 10) = *M
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*M FPPREC)
31 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (JMPIFEQTO 0 L45)                   ; 0
5     (LOAD&CAR&PUSH 2)
7     (JMPIFEQTO 0 L50)                   ; 0
10    (LOAD&CAR&PUSH 2)
12    (CONST&PUSH 4)                      ; 3
13    (GETVALUE&PUSH 5)                   ; FPPREC
15    (CALLSR&PUSH 2 53)                  ; +
18    (CALL2&PUSH 6)                      ; FPSHIFT
20    (LOAD&CAR&PUSH 2)
22    (CALL2&PUSH 7)                      ; QUOT
24    (CALL1&PUSH 8)                      ; FPROUND
26    (CONST&PUSH 9)                      ; -3
27    (LOAD 4)
28    (CDR)
29    (CAR&PUSH)
30    (LOAD 4)
31    (CDR)
32    (CAR&PUSH)
33    (CALLSR&PUSH 1 54)                  ; -
36    (GETVALUE&PUSH 10)                  ; *M
38    (CALLSR&PUSH 3 53)                  ; +
41    (LIST 2)
43    (SKIP&RET 3)
45    L45
45    (CONST&PUSH 1)                      ; "PQUOTIENT by zero"
46    (CALL1 2)                           ; MERROR
48    (SKIP&RET 3)
50    L50
50    (CONST 3)                           ; (0 0)
51    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPGREATERP (A B) ...)-60|
(CONST 0) = FPGREATERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPGREATERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPGREATERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPGREATERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPGREATERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPGREATERP
8     (SKIP&RET 1)


Disassembly of function FPGREATERP
(CONST 0) = FPDIFFERENCE
(CONST 1) = FPPOSP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALL2&PUSH 0)                      ; FPDIFFERENCE
4     (CALL1 1)                           ; FPPOSP
6     (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPLESSP (A B) ...)-61|
(CONST 0) = FPLESSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPLESSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPLESSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPLESSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPLESSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPLESSP
8     (SKIP&RET 1)


Disassembly of function FPLESSP
(CONST 0) = FPDIFFERENCE
(CONST 1) = FPPOSP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOAD&PUSH 3)
2     (CALL2&PUSH 0)                      ; FPDIFFERENCE
4     (CALL1 1)                           ; FPPOSP
6     (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPPOSP (X) ...)-62|
(CONST 0) = FPPOSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPPOSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPPOSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPPOSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPPOSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPPOSP
8     (SKIP&RET 1)


Disassembly of function FPPOSP
(CONST 0) = X
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (CONST&PUSH 1)                      ; 0
7     (CALLSR 1 48)                       ; >
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN FPMIN NA ...)-63|
(CONST 0) = FPMIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPMIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPMIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPMIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPMIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPMIN
8     (SKIP&RET 1)


Disassembly of function FPMIN
(CONST 0) = 1
(CONST 1) = NARG1
(CONST 2) = 2
(CONST 3) = FPLESSP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL&PUSH)
4     (CONST&PUSH 0)                      ; 1
5     (LOAD&PUSH 4)
6     (CALL2 1)                           ; NARG1
8     (STORE 0)
9     (CONST&PUSH 2)                      ; 2
10    (JMP L27)
12    L12
12    (LOAD&PUSH 0)
13    (LOAD&PUSH 5)
14    (CALL2&PUSH 1)                      ; NARG1
16    (LOAD&PUSH 2)
17    (CALL2&JMPIFNOT 3 L25)              ; FPLESSP
20    (LOAD&PUSH 0)
21    (LOAD&PUSH 5)
22    (CALL2 1)                           ; NARG1
24    (STORE 1)
25    L25
25    (LOAD&INC&STORE 0)
27    L27
27    (LOAD&PUSH 0)
28    (LOAD&PUSH 3)
29    (CALLSR&JMPIFNOT 1 48 L12)          ; >
33    (SKIP 1)
35    (POP)
36    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPE NIL ...)-64|
(CONST 0) = FPE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPE
8     (SKIP&RET 1)


Disassembly of function FPE
(CONST 0) = FPPREC
(CONST 1) = BIGFLOAT%E
(CONST 2) = BIGFLOATP
(CONST 3) = MAX-BFLOAT-%E
(CONST 4) = 1
(CONST 5) = *FPEXP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MAX-BFLOAT-%E BIGFLOAT%E FPPREC)
writes special variables : (MAX-BFLOAT-%E BIGFLOAT%E)
41 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; FPPREC
2     (GETVALUE 1)                        ; BIGFLOAT%E
4     (CAR)
5     (CDR)
6     (CDR)
7     (CAR&PUSH)
8     (CALLSR&JMPIF 1 45 L45)             ; =
12    (GETVALUE&PUSH 0)                   ; FPPREC
14    (GETVALUE 1)                        ; BIGFLOAT%E
16    (CAR)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CALLSR&JMPIF 1 47 L49)             ; <
24    (GETVALUE&PUSH 0)                   ; FPPREC
26    (GETVALUE 3)                        ; MAX-BFLOAT-%E
28    (CAR)
29    (CDR)
30    (CDR)
31    (CAR&PUSH)
32    (CALLSR&JMPIFNOT 1 47 L53)          ; <
36    (GETVALUE 3)                        ; MAX-BFLOAT-%E
38    L38
38    (PUSH)
39    (CALL1 2)                           ; BIGFLOATP
41    (SETVALUE 1)                        ; BIGFLOAT%E
43    (JMP L60)
45    L45
45    (GETVALUE 1)                        ; BIGFLOAT%E
47    (JMP L60)
49    L49
49    (GETVALUE 1)                        ; BIGFLOAT%E
51    (JMP L38)
53    L53
53    (CONST&PUSH 4)                      ; 1
54    (CALL1 5)                           ; *FPEXP
56    (SETVALUE 1)                        ; BIGFLOAT%E
58    (SETVALUE 3)                        ; MAX-BFLOAT-%E
60    L60
60    (CDR)
61    (SKIP&RET 1)


Disassembly of function #:|(DEFUN FPPI NIL ...)-65|
(CONST 0) = FPPI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPPI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPPI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPPI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPPI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPPI
8     (SKIP&RET 1)


Disassembly of function FPPI
(CONST 0) = FPPREC
(CONST 1) = BIGFLOAT%PI
(CONST 2) = BIGFLOATP
(CONST 3) = MAX-BFLOAT-%PI
(CONST 4) = FPPI1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MAX-BFLOAT-%PI BIGFLOAT%PI FPPREC)
writes special variables : (MAX-BFLOAT-%PI BIGFLOAT%PI)
40 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; FPPREC
2     (GETVALUE 1)                        ; BIGFLOAT%PI
4     (CAR)
5     (CDR)
6     (CDR)
7     (CAR&PUSH)
8     (CALLSR&JMPIF 1 45 L45)             ; =
12    (GETVALUE&PUSH 0)                   ; FPPREC
14    (GETVALUE 1)                        ; BIGFLOAT%PI
16    (CAR)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CALLSR&JMPIF 1 47 L49)             ; <
24    (GETVALUE&PUSH 0)                   ; FPPREC
26    (GETVALUE 3)                        ; MAX-BFLOAT-%PI
28    (CAR)
29    (CDR)
30    (CDR)
31    (CAR&PUSH)
32    (CALLSR&JMPIFNOT 1 47 L53)          ; <
36    (GETVALUE 3)                        ; MAX-BFLOAT-%PI
38    L38
38    (PUSH)
39    (CALL1 2)                           ; BIGFLOATP
41    (SETVALUE 1)                        ; BIGFLOAT%PI
43    (JMP L59)
45    L45
45    (GETVALUE 1)                        ; BIGFLOAT%PI
47    (JMP L59)
49    L49
49    (GETVALUE 1)                        ; BIGFLOAT%PI
51    (JMP L38)
53    L53
53    (CALL0 4)                           ; FPPI1
55    (SETVALUE 1)                        ; BIGFLOAT%PI
57    (SETVALUE 3)                        ; MAX-BFLOAT-%PI
59    L59
59    (CDR)
60    (SKIP&RET 1)


Disassembly of function #:|(DEFUN FPONE NIL ...)-66|
(CONST 0) = FPONE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPONE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPONE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPONE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPONE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPONE
8     (SKIP&RET 1)


Disassembly of function FPONE
(CONST 0) = *DECFP
(CONST 1) = 1
(CONST 2) = INTOFP
(CONST 3) = FPPREC
(CONST 4) = BIGFLOATONE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BIGFLOATONE FPPREC *DECFP)
21 byte-code instructions:
0     (GETVALUE 0)                        ; *DECFP
2     (JMPIF L22)
4     (GETVALUE&PUSH 3)                   ; FPPREC
6     (GETVALUE 4)                        ; BIGFLOATONE
8     (CAR)
9     (CDR)
10    (CDR)
11    (CAR&PUSH)
12    (CALLSR&JMPIF 1 45 L25)             ; =
16    (CONST 1)                           ; 1
17    L17
17    (PUSH)
18    (CALL1 2)                           ; INTOFP
20    (SKIP&RET 1)
22    L22
22    (CONST 1)                           ; 1
23    (JMP L17)
25    L25
25    (GETVALUE 4)                        ; BIGFLOATONE
27    (CDR)
28    (SKIP&RET 1)


Disassembly of function #:|(DEFUN COMPPI (N) ...)-67|
(CONST 0) = COMPPI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPPI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPPI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPPI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPPI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPPI
8     (SKIP&RET 1)


Disassembly of function COMPPI
(CONST 0) = 2
(CONST 1) = 3
(CONST 2) = X
(CONST 3) = 8
(CONST 4) = Y
(CONST 5) = 4
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
70 byte-code instructions:
0     (PUSH-NIL 3)
2     (CONST&PUSH 0)                      ; 2
3     (LOAD&PUSH 5)
4     (CALLS2&STORE 154 2)                ; EXPT
7     (CONST&PUSH 1)                      ; 3
8     (LOAD&PUSH 3)
9     (CALLSR&PUSH 2 55)                  ; *
12    (LOAD 3)
13    (BIND 2)                            ; X
15    (CONST 3)                           ; 8
16    (BIND 4)                            ; Y
18    (GETVALUE&PUSH 2)                   ; X
20    (CALLS2&JMPIFNOT 12 L28)            ; INTEGERP
23    (GETVALUE&PUSH 4)                   ; Y
25    (CALLS2&JMPIF 12 L47)               ; INTEGERP
28    L28
28    (GETVALUE&PUSH 2)                   ; X
30    (GETVALUE&PUSH 4)                   ; Y
32    (CALLSR 1 56)                       ; /
35    L35
35    (UNBIND 2)
37    (STORE 2)
38    (PUSH)
39    (CALLSR&STORE 2 53 0)               ; +
43    (CONST&PUSH 5)                      ; 4
44    (JMP L114)
47    L47
47    (GETVALUE&PUSH 2)                   ; X
49    (GETVALUE&PUSH 4)                   ; Y
51    (CALLS2 181)                        ; TRUNCATE
53    (JMP L35)
55    L55
55    (GETVALUE&PUSH 2)                   ; X
57    (GETVALUE&PUSH 4)                   ; Y
59    (CALLS2 181)                        ; TRUNCATE
61    (JMP L99)
63    L63
63    (LOAD&PUSH 2)
64    (LOAD&DEC&PUSH 1)
66    (LOAD&DEC&PUSH 2)
68    (CALLSR 3 55)                       ; *
71    (BIND 2)                            ; X
73    (CONST&PUSH 5)                      ; 4
74    (LOAD&PUSH 4)
75    (LOAD&INC&PUSH 5)
77    (CALLSR 3 55)                       ; *
80    (BIND 4)                            ; Y
82    (GETVALUE&PUSH 2)                   ; X
84    (CALLS2&JMPIFNOT 12 L92)            ; INTEGERP
87    (GETVALUE&PUSH 4)                   ; Y
89    (CALLS2&JMPIF 12 L55)               ; INTEGERP
92    L92
92    (GETVALUE&PUSH 2)                   ; X
94    (GETVALUE&PUSH 4)                   ; Y
96    (CALLSR 1 56)                       ; /
99    L99
99    (UNBIND 2)
101   (STORE 2)
102   (LOAD&PUSH 1)
103   (LOAD&PUSH 3)
104   (CALLSR&STORE 2 53 1)               ; +
108   (LOAD&PUSH 0)
109   (CONST&PUSH 0)                      ; 2
110   (CALLSR&STORE 2 53 0)               ; +
114   L114
114   (LOAD&PUSH 2)
115   (CALLS2&JMPIFNOT 145 L63)           ; ZEROP
118   (SKIP 1)
120   (POP)
121   (SKIP&RET 4)


Disassembly of function #:|(DEFUN FPPI1 NIL ...)-68|
(CONST 0) = FPPI1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPPI1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPPI1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPPI1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPPI1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPPI1
8     (SKIP&RET 1)


Disassembly of function FPPI1
(CONST 0) = 3
(CONST 1) = FPPREC
(CONST 2) = COMPPI
(CONST 3) = FPROUND
(CONST 4) = -3
(CONST 5) = *M
(CONST 6) = BCONS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*M FPPREC)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; 3
1     (GETVALUE&PUSH 1)                   ; FPPREC
3     (CALLSR&PUSH 2 53)                  ; +
6     (CALL1&PUSH 2)                      ; COMPPI
8     (CALL1&PUSH 3)                      ; FPROUND
10    (CONST&PUSH 4)                      ; -3
11    (GETVALUE&PUSH 5)                   ; *M
13    (CALLSR&PUSH 2 53)                  ; +
16    (LIST&PUSH 2)
18    (CALL1 6)                           ; BCONS
20    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN FPMAX NA ...)-69|
(CONST 0) = FPMAX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPMAX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPMAX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPMAX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPMAX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPMAX
8     (SKIP&RET 1)


Disassembly of function FPMAX
(CONST 0) = 1
(CONST 1) = NARG1
(CONST 2) = 2
(CONST 3) = FPGREATERP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL&PUSH)
4     (CONST&PUSH 0)                      ; 1
5     (LOAD&PUSH 4)
6     (CALL2 1)                           ; NARG1
8     (STORE 0)
9     (CONST&PUSH 2)                      ; 2
10    (JMP L27)
12    L12
12    (LOAD&PUSH 0)
13    (LOAD&PUSH 5)
14    (CALL2&PUSH 1)                      ; NARG1
16    (LOAD&PUSH 2)
17    (CALL2&JMPIFNOT 3 L25)              ; FPGREATERP
20    (LOAD&PUSH 0)
21    (LOAD&PUSH 5)
22    (CALL2 1)                           ; NARG1
24    (STORE 1)
25    L25
25    (LOAD&INC&STORE 0)
27    L27
27    (LOAD&PUSH 0)
28    (LOAD&PUSH 3)
29    (CALLSR&JMPIFNOT 1 48 L12)          ; >
33    (SKIP 1)
35    (POP)
36    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPDIFFERENCE (A B) ...)-70|
(CONST 0) = FPDIFFERENCE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPDIFFERENCE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPDIFFERENCE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPDIFFERENCE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPDIFFERENCE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPDIFFERENCE
8     (SKIP&RET 1)


Disassembly of function FPDIFFERENCE
(CONST 0) = FPMINUS
(CONST 1) = FPPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALL1&PUSH 0)                      ; FPMINUS
4     (CALL2 1)                           ; FPPLUS
6     (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPMINUS (X) ...)-71|
(CONST 0) = FPMINUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPMINUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPMINUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPMINUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPMINUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPMINUS
8     (SKIP&RET 1)


Disassembly of function FPMINUS
(CONST 0) = X
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L24)                   ; 0
9     (GETVALUE 0)                        ; X
11    (CAR&PUSH)
12    (CALLSR&PUSH 0 54)                  ; -
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CAR&PUSH)
19    (LIST 2)
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)
24    L24
24    (GETVALUE 0)                        ; X
26    (JMP L21)


Disassembly of function #:|(DEFUN FPPLUS (A B) ...)-72|
(CONST 0) = FPPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPPLUS
8     (SKIP&RET 1)


Disassembly of function FPPLUS
(CONST 0) = *M
(CONST 1) = 0
(CONST 2) = *CANCELLED
(CONST 3) = 2
(CONST 4) = FPSHIFT
(CONST 5) = 1
(CONST 6) = HIPART
(CONST 7) = -1
(CONST 8) = (0 0)
(CONST 9) = FPROUND
(CONST 10) = -2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*M)
writes special variable : (*CANCELLED)
148 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; *M
3     (PUSH-NIL 3)
5     (CONST 1)                           ; 0
6     (SETVALUE 2)                        ; *CANCELLED
8     (LOAD&CAR&PUSH 8)
10    (JMPIFEQTO 1 L131)                  ; 0
14    (LOAD&CAR&PUSH 7)
16    (JMPIFEQTO 1 L134)                  ; 0
20    (LOAD 8)
21    (CDR)
22    (CAR&PUSH)
23    (LOAD 8)
24    (CDR)
25    (CAR&PUSH)
26    (CALLSR&STORE 1 54 2)               ; -
30    (PUSH)
31    (JMPIFEQTO 1 L137)                  ; 0
35    (LOAD&PUSH 2)
36    (CONST&PUSH 1)                      ; 0
37    (CALLSR&JMPIF 1 48 L166)            ; >
42    (LOAD&CAR&PUSH 8)
44    (LOAD&INC&PUSH 3)
46    (CALL2 6)                           ; HIPART
48    (STORE 0)
49    (PUSH)
50    (CALLS2&JMPIFNOT 8 L58)             ; NUMBERP
53    (LOAD&PUSH 0)
54    (CALLS2&JMPIF 145 L211)             ; ZEROP
58    L58
58    (LOAD&CAR&PUSH 8)
60    (LOAD&PUSH 0)
61    (CALLS2&JMPIF 8 L215)               ; NUMBERP
65    (SKIP 1)
67    (JMPIF L225)
70    L70
70    (CONST 5)                           ; 1
71    L71
71    (STORE 0)
72    (LOAD&CAR&PUSH 7)
74    (CONST&PUSH 3)                      ; 2
75    (CALL2&PUSH 4)                      ; FPSHIFT
77    (LOAD&CAR&PUSH 9)
79    (CONST&PUSH 3)                      ; 2
80    (LOAD&PUSH 5)
81    (CALLSR 2 53)                       ; +
84    L84
84    (PUSH)
85    (CALL2&PUSH 4)                      ; FPSHIFT
87    (CALLSR 2 53)                       ; +
90    L90
90    (STORE 1)
91    (PUSH)
92    (LOAD&PUSH 1)
93    (CALLSR&STORE 2 53 1)               ; +
97    (PUSH)
98    (JMPIFEQTO 1 L229)                  ; 0
102   (LOAD&PUSH 1)
103   (CALL1 9)                           ; FPROUND
105   (STORE 1)
106   (CONST&PUSH 10)                     ; -2
107   (GETVALUE&PUSH 0)                   ; *M
109   (LOAD 10)
110   (CDR)
111   (CAR&PUSH)
112   (LOAD 10)
113   (CDR)
114   (CAR&PUSH)
115   (CALLSR&PUSH 1 51)                  ; MAX
118   (CALLSR&STORE 3 53 2)               ; +
122   (LOAD&PUSH 1)
123   (LOAD&PUSH 3)
124   (LIST 2)
126   L126
126   (SKIP 3)
128   (UNBIND1)
129   (SKIP&RET 3)
131   L131
131   (LOAD 7)
132   (JMP L126)
134   L134
134   (LOAD 8)
135   (JMP L126)
137   L137
137   (CONST 1)                           ; 0
138   (STORE 0)
139   (LOAD&CAR&PUSH 8)
141   (LOAD&CAR&PUSH 8)
143   (CALLSR&PUSH 2 53)                  ; +
146   (CONST&PUSH 3)                      ; 2
147   (CALL2 4)                           ; FPSHIFT
149   (JMP L90)
151   L151
151   (CONST 1)                           ; 0
152   (JMP L195)
154   L154
154   (LOAD&PUSH 0)
155   (CONST&PUSH 1)                      ; 0
156   (CALLSR 1 47)                       ; <
159   (SKIP 1)
161   (JMPIFNOT L194)
163   L163
163   (CONST 7)                           ; -1
164   (JMP L195)
166   L166
166   (LOAD&CAR&PUSH 7)
168   (CONST&PUSH 5)                      ; 1
169   (LOAD&PUSH 4)
170   (CALLSR&PUSH 1 54)                  ; -
173   (CALL2 6)                           ; HIPART
175   (STORE 0)
176   (PUSH)
177   (CALLS2&JMPIFNOT 8 L184)            ; NUMBERP
180   (LOAD&PUSH 0)
181   (CALLS2&JMPIF 145 L151)             ; ZEROP
184   L184
184   (LOAD&CAR&PUSH 7)
186   (LOAD&PUSH 0)
187   (CALLS2&JMPIF 8 L154)               ; NUMBERP
190   (SKIP 1)
192   (JMPIF L163)
194   L194
194   (CONST 5)                           ; 1
195   L195
195   (STORE 0)
196   (LOAD&CAR&PUSH 8)
198   (CONST&PUSH 3)                      ; 2
199   (CALL2&PUSH 4)                      ; FPSHIFT
201   (LOAD&CAR&PUSH 8)
203   (CONST&PUSH 3)                      ; 2
204   (LOAD&PUSH 5)
205   (CALLSR 1 54)                       ; -
208   (JMP L84)
211   L211
211   (CONST 1)                           ; 0
212   (JMP L71)
215   L215
215   (LOAD&PUSH 0)
216   (CONST&PUSH 1)                      ; 0
217   (CALLSR 1 47)                       ; <
220   (SKIP 1)
222   (JMPIFNOT L70)
225   L225
225   (CONST 7)                           ; -1
226   (JMP L71)
229   L229
229   (CONST 8)                           ; (0 0)
230   (JMP L126)


Disassembly of function #:|(DEFUN FPTIMES* (A B) ...)-73|
(CONST 0) = FPTIMES*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPTIMES*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPTIMES*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPTIMES*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPTIMES*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPTIMES*
8     (SKIP&RET 1)


Disassembly of function FPTIMES*
(CONST 0) = 0
(CONST 1) = (0 0)
(CONST 2) = FPROUND
(CONST 3) = *M
(CONST 4) = FPPREC
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FPPREC *M)
23 byte-code instructions:
0     (LOAD&CAR&PUSH 2)
2     (JMPIFEQTO 0 L39)                   ; 0
5     (LOAD&CAR&PUSH 1)
7     (JMPIFEQTO 0 L39)                   ; 0
10    (LOAD&CAR&PUSH 2)
12    (LOAD&CAR&PUSH 2)
14    (CALLSR&PUSH 2 55)                  ; *
17    (CALL1&PUSH 2)                      ; FPROUND
19    (GETVALUE&PUSH 3)                   ; *M
21    (LOAD 4)
22    (CDR)
23    (CAR&PUSH)
24    (LOAD 4)
25    (CDR)
26    (CAR&PUSH)
27    (GETVALUE&PUSH 4)                   ; FPPREC
29    (CALLSR&PUSH 0 54)                  ; -
32    (CALLSR&PUSH 4 53)                  ; +
35    (LIST 2)
37    (SKIP&RET 3)
39    L39
39    (CONST 1)                           ; (0 0)
40    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPINTEXPT (INT NN FIXPREC) ...)-74|
(CONST 0) = FPINTEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPINTEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPINTEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPINTEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPINTEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPINTEXPT
8     (SKIP&RET 1)


Disassembly of function FPINTEXPT
(CONST 0) = LOG2
(CONST 1) = QUOT
(CONST 2) = INTOFP
(CONST 3) = BAS
(CONST 4) = FPEXPT
(CONST 5) = FPTIMES*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BAS)
33 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOAD&PUSH 4)
2     (CALL1&PUSH 0)                      ; LOG2
4     (CALL2 1)                           ; QUOT
6     (STORE 1)
7     (LOAD&PUSH 3)
8     (LOAD&PUSH 3)
9     (LOAD&PUSH 3)
10    (CALLSR&PUSH 1 52)                  ; MIN
13    (CALLS2&PUSH 154)                   ; EXPT
15    (CALL1 2)                           ; INTOFP
17    (BIND 3)                            ; BAS
19    (LOAD&PUSH 5)
20    (LOAD&PUSH 5)
21    (CALLSR&JMPIF 1 48 L30)             ; >
25    (GETVALUE 3)                        ; BAS
27    L27
27    (UNBIND1)
28    (SKIP&RET 4)
30    L30
30    (LOAD&PUSH 6)
31    (LOAD&PUSH 6)
32    (LOAD&PUSH 6)
33    (CALLS2&PUSH 184)                   ; REM
35    (CALLS2&PUSH 154)                   ; EXPT
37    (CALL1&PUSH 2)                      ; INTOFP
39    (GETVALUE&PUSH 3)                   ; BAS
41    (LOAD&PUSH 7)
42    (LOAD&PUSH 7)
43    (CALL2&PUSH 1)                      ; QUOT
45    (CALL2&PUSH 4)                      ; FPEXPT
47    (CALL2 5)                           ; FPTIMES*
49    (JMP L27)


Disassembly of function #:|(DEFUN FPEXPT (P NN) ...)-75|
(CONST 0) = FPEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPEXPT
8     (SKIP&RET 1)


Disassembly of function FPEXPT
(CONST 0) = 0
(CONST 1) = FPONE
(CONST 2) = 1
(CONST 3) = FPQUOTIENT
(CONST 4) = 2
(CONST 5) = QUOT
(CONST 6) = FPTIMES*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
59 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L28)                   ; 0
4     (LOAD&PUSH 1)
5     (JMPIFEQTO 2 L32)                   ; 1
8     (LOAD&PUSH 1)
9     (CONST&PUSH 0)                      ; 0
10    (CALLSR&JMPIF 1 47 L35)             ; <
14    (NIL&PUSH)
15    (LOAD&PUSH 2)
16    (CALLS2&JMPIF 148 L49)              ; ODDP
19    (CALL0 1)                           ; FPONE
21    (STORE 0)
22    L22
22    (LOAD&PUSH 2)
23    (CONST&PUSH 4)                      ; 2
24    (CALL2&PUSH 5)                      ; QUOT
26    (JMP L72)
28    L28
28    (CALL0 1)                           ; FPONE
30    (SKIP&RET 3)
32    L32
32    (LOAD 2)
33    (SKIP&RET 3)
35    L35
35    (CALL0 1)                           ; FPONE
37    (PUSH)
38    (LOAD&PUSH 3)
39    (LOAD&PUSH 3)
40    (CALLSR&PUSH 0 54)                  ; -
43    (JSR&PUSH L0)
45    (CALL2 3)                           ; FPQUOTIENT
47    (SKIP&RET 3)
49    L49
49    (LOAD 3)
50    (STORE 0)
51    (JMP L22)
53    L53
53    (LOAD&PUSH 4)
54    (LOAD&PUSH 5)
55    (CALL2 6)                           ; FPTIMES*
57    (STORE 4)
58    (LOAD&PUSH 0)
59    (CALLS2&JMPIFNOT 148 L67)           ; ODDP
62    (LOAD&PUSH 1)
63    (LOAD&PUSH 5)
64    (CALL2 6)                           ; FPTIMES*
66    (STORE 1)
67    L67
67    (LOAD&PUSH 0)
68    (CONST&PUSH 4)                      ; 2
69    (CALL2 5)                           ; QUOT
71    (STORE 0)
72    L72
72    (LOAD&PUSH 0)
73    (CALLS2&JMPIFNOT 145 L53)           ; ZEROP
76    (SKIP 1)
78    (POP)
79    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (NOTYPE N))-76|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN EXPTBIGFLOAT (P N) ...)-77|
(CONST 0) = EXPTBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPTBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPTBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPTBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPTBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPTBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function EXPTBIGFLOAT
(CONST 0) = 1
(CONST 1) = 0
(CONST 2) = $BFLOAT
(CONST 3) = $BFLOATP
(CONST 4) = (MEXPT)
(CONST 5) = RATNUMP
(CONST 6) = (MTIMES)
(CONST 7) = $COMPLEX
(CONST 8) = $DOMAIN
(CONST 9) = $M1PBRANCH
(CONST 10) = -1
(CONST 11) = POWER
(CONST 12) = FPMINUS
(CONST 13) = BCONS
(CONST 14) = $EXPAND
(CONST 15) = 0.5
(CONST 16) = BFHALF
(CONST 17) = ((RAT SIMP) 1 2)
(CONST 18) = -0.5
(CONST 19) = BFMHALF
(CONST 20) = ((RAT SIMP) -1 2)
(CONST 21) = FPENTIER
(CONST 22) = (MTIMES)
(CONST 23) = $%PI
(CONST 24) = (MTIMES)
(CONST 25) = *FPSIN
(CONST 26) = (MTIMES SIMP)
(CONST 27) = (MTIMES)
(CONST 28) = ($%I)
(CONST 29) = ADD2
(CONST 30) = (MEXPT)
(CONST 31) = 10
(CONST 32) = FPROOT
(CONST 33) = FPEXPT
(CONST 34) = (MEXPT)
(CONST 35) = HAULONG
(CONST 36) = FPPREC
(CONST 37) = BIGFLOATP
(CONST 38) = FPLOG
(CONST 39) = FPTIMES*
(CONST 40) = FPEXP
(CONST 41) = FPROUND
(CONST 42) = *M
(CONST 43) = INVERTBIGFLOAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*M FPPREC BFMHALF BFHALF)
225 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L66)                   ; 1
4     (LOAD&PUSH 1)
5     (JMPIFEQTO 1 L69)                   ; 0
8     (LOAD&PUSH 2)
9     (CALL1&JMPIFNOT 3 L72)              ; $BFLOATP
12    (LOAD 2)
13    (CDR)
14    (CAR&PUSH)
15    (JMPIFEQTO 1 L76)                   ; 0
18    (LOAD 2)
19    (CDR)
20    (CAR&PUSH)
21    (CONST&PUSH 1)                      ; 0
22    (CALLSR&JMPIFNOT 1 47 L211)         ; <
27    (LOAD&PUSH 1)
28    (CALL1&JMPIFNOT 5 L211)             ; RATNUMP
32    (CONST&PUSH 6)                      ; (MTIMES)
33    (CONST 7)                           ; $COMPLEX
34    (BIND 8)                            ; $DOMAIN
36    (T)
37    (BIND 9)                            ; $M1PBRANCH
39    (CONST&PUSH 10)                     ; -1
40    (LOAD&PUSH 9)
41    (CALL2 11)                          ; POWER
43    (UNBIND 2)
45    (PUSH)
46    (CALL1&PUSH 2)                      ; $BFLOAT
48    (LOAD&CDR&PUSH 4)
50    (CALL1&PUSH 12)                     ; FPMINUS
52    (CALL1&PUSH 13)                     ; BCONS
54    (LOAD&PUSH 4)
55    (JSR&PUSH L0)
57    (LIST&PUSH 3)
59    (CALL1 14)                          ; $EXPAND
61    L61
61    (PUSH)
62    (CALL1 2)                           ; $BFLOAT
64    (SKIP&RET 3)
66    L66
66    (LOAD 2)
67    (SKIP&RET 3)
69    L69
69    (CONST 0)                           ; 1
70    (JMP L61)
72    L72
72    (CONST 4)                           ; (MEXPT)
73    (JMP L252)
76    L76
76    (CONST 1)                           ; 0
77    (JMP L61)
79    L79
79    (LOAD&PUSH 2)
80    (CONST&PUSH 17)                     ; ((RAT SIMP) 1 2)
81    (JMPTAIL 2 5 L0)
86    L86
86    (LOAD&PUSH 2)
87    (CONST&PUSH 20)                     ; ((RAT SIMP) -1 2)
88    (JMPTAIL 2 5 L0)
93    L93
93    (LOAD&PUSH 2)
94    (LOAD&PUSH 2)
95    (CALL1&PUSH 21)                     ; FPENTIER
97    (JMPTAIL 2 5 L0)
102   L102
102   (LOAD&PUSH 1)
103   (LOAD&PUSH 2)
104   (CALL1&PUSH 21)                     ; FPENTIER
106   (CALL1&PUSH 2)                      ; $BFLOAT
108   (CALLS2&JMPIF 2 L93)                ; EQUAL
111   (LOAD&CDR&PUSH 2)
113   (CALL1&PUSH 12)                     ; FPMINUS
115   (CALL1&PUSH 13)                     ; BCONS
117   (LOAD&PUSH 2)
118   (JSR L0)
121   (STORE 2)
122   (CONST&PUSH 22)                     ; (MTIMES)
123   (CONST&PUSH 23)                     ; $%PI
124   (LOAD&PUSH 3)
125   (LIST&PUSH 3)
127   (CALL1 2)                           ; $BFLOAT
129   (STORE 1)
130   (CONST&PUSH 24)                     ; (MTIMES)
131   (LOAD&PUSH 3)
132   (LOAD&PUSH 3)
133   (NIL&PUSH)
134   (CALL2&PUSH 25)                     ; *FPSIN
136   (LIST&PUSH 3)
138   (CALL1&PUSH 2)                      ; $BFLOAT
140   (CONST&PUSH 26)                     ; (MTIMES SIMP)
141   (CONST&PUSH 27)                     ; (MTIMES)
142   (LOAD&PUSH 5)
143   (LOAD&PUSH 5)
144   (T&PUSH)
145   (CALL2&PUSH 25)                     ; *FPSIN
147   (LIST&PUSH 3)
149   (CALL1&PUSH 2)                      ; $BFLOAT
151   (CONST 28)                          ; ($%I)
153   (LIST*&PUSH 2)
155   (CALL2 29)                          ; ADD2
157   (SKIP&RET 3)
159   L159
159   (LOAD&PUSH 1)
160   (CONST&PUSH 15)                     ; 0.5
161   (CALLS2&JMPIF 1 L79)                ; EQL
165   (LOAD&PUSH 1)
166   (GETVALUE&PUSH 16)                  ; BFHALF
168   (CALLS2&JMPIF 2 L79)                ; EQUAL
172   (LOAD&PUSH 1)
173   (CONST&PUSH 18)                     ; -0.5
174   (CALLS2&JMPIF 1 L86)                ; EQL
178   (LOAD&PUSH 1)
179   (GETVALUE&PUSH 19)                  ; BFMHALF
181   (CALLS2&JMPIF 2 L86)                ; EQUAL
185   (LOAD&PUSH 1)
186   (CALL1 2)                           ; $BFLOAT
188   (STORE 1)
189   (PUSH)
190   (CALL1&JMPIF 3 L102)                ; $BFLOATP
194   (CONST 30)                          ; (MEXPT)
196   (JMP L252)
198   L198
198   (LOAD&PUSH 2)
199   (LOAD 2)
200   (CDR)
201   (CDR)
202   (CAR&PUSH)
203   (CALL2&PUSH 32)                     ; FPROOT
205   (LOAD 2)
206   (CDR)
207   (CAR)
208   (JMP L344)
211   L211
211   (LOAD 2)
212   (CDR)
213   (CAR&PUSH)
214   (CONST&PUSH 1)                      ; 0
215   (CALLSR&JMPIFNOT 1 47 L223)         ; <
219   (LOAD&PUSH 1)
220   (CALLS2&JMPIFNOT 12 L159)           ; INTEGERP
223   L223
223   (LOAD&PUSH 1)
224   (CALL1&JMPIFNOT 5 L237)             ; RATNUMP
227   (LOAD 1)
228   (CDR)
229   (CDR)
230   (CAR&PUSH)
231   (CONST&PUSH 31)                     ; 10
233   (CALLSR&JMPIF 1 47 L198)            ; <
237   L237
237   (LOAD&PUSH 1)
238   (CALLS2&JMPIF 12 L335)              ; INTEGERP
242   (LOAD&PUSH 1)
243   (CALL1 2)                           ; $BFLOAT
245   (STORE 1)
246   (PUSH)
247   (CALL1&JMPIF 3 L259)                ; $BFLOATP
250   (CONST 34)                          ; (MEXPT)
252   L252
252   (PUSH)
253   (LOAD&PUSH 3)
254   (LOAD&PUSH 3)
255   (LIST 3)
257   (SKIP&RET 3)
259   L259
259   (CONST&PUSH 0)                      ; 1
260   (LOAD 2)
261   (CDR)
262   (CDR)
263   (CAR&PUSH)
264   (LOAD 4)
265   (CDR)
266   (CDR)
267   (CAR&PUSH)
268   (CALL1&PUSH 35)                     ; HAULONG
270   (CALLSR&PUSH 2 53)                  ; +
273   (CALLSR&PUSH 1 51)                  ; MAX
276   (LOAD&PUSH 0)
277   (GETVALUE&PUSH 36)                  ; FPPREC
279   (CALLSR 2 53)                       ; +
282   (BIND 36)                           ; FPPREC
284   (LOAD&PUSH 5)
285   (CALL1 37)                          ; BIGFLOATP
287   (CDR&PUSH)
288   (LOAD&PUSH 7)
289   (CALL1 37)                          ; BIGFLOATP
291   (CDR&PUSH)
292   (CALL1&PUSH 38)                     ; FPLOG
294   (CALL2&PUSH 39)                     ; FPTIMES*
296   (CALL1 40)                          ; FPEXP
298   (UNBIND1)
299   (STORE 3)
300   (CAR&PUSH)
301   (CALL1&PUSH 41)                     ; FPROUND
303   (LOAD&PUSH 1)
304   (CALLSR&PUSH 0 54)                  ; -
307   (GETVALUE&PUSH 42)                  ; *M
309   (LOAD 6)
310   (CDR)
311   (CAR&PUSH)
312   (CALLSR&PUSH 3 53)                  ; +
315   (LIST 2)
317   (STORE 3)
318   (PUSH)
319   (CALL1 13)                          ; BCONS
321   (SKIP&RET 4)
323   L323
323   (LOAD&PUSH 2)
324   (LOAD&PUSH 2)
325   (CALLSR&PUSH 0 54)                  ; -
328   (JSR&PUSH L0)
331   (CALL1 43)                          ; INVERTBIGFLOAT
333   (SKIP&RET 3)
335   L335
335   (LOAD&PUSH 1)
336   (CONST&PUSH 1)                      ; 0
337   (CALLSR&JMPIF 1 47 L323)            ; <
341   (LOAD&CDR&PUSH 2)
343   (LOAD 2)
344   L344
344   (PUSH)
345   (CALL2&PUSH 33)                     ; FPEXPT
347   (CALL1 13)                          ; BCONS
349   (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPROOT (A N) ...)-78|
(CONST 0) = FPROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPROOT
8     (SKIP&RET 1)


Disassembly of function FPROOT
(CONST 0) = FPPREC
(CONST 1) = 2
(CONST 2) = INTOFP
(CONST 3) = BIGFLOATP
(CONST 4) = QUOT
(CONST 5) = FPEXPT
(CONST 6) = X
(CONST 7) = (0 0)
(CONST 8) = FPQUOTIENT
(CONST 9) = FPDIFFERENCE
(CONST 10) = FPROUND
(CONST 11) = -2
(CONST 12) = *M
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*M X FPPREC)
writes special variable : (X)
69 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; FPPREC
2     (GETVALUE&PUSH 0)                   ; FPPREC
4     (CONST&PUSH 1)                      ; 2
5     (CALLSR 2 53)                       ; +
8     (BIND 0)                            ; FPPREC
10    (CONST&PUSH 1)                      ; 2
11    (CALL1&PUSH 2)                      ; INTOFP
13    (LOAD&PUSH 7)
14    (CALL1 3)                           ; BIGFLOATP
16    (CDR)
17    (STORE 7)
18    (CDR)
19    (CAR&PUSH)
20    (LOAD&PUSH 7)
21    (CALL2&PUSH 4)                      ; QUOT
23    (CALLS2&PUSH 150)                   ; 1+
25    (CALL2&PUSH 5)                      ; FPEXPT
27    (LOAD&PUSH 0)
28    (LOAD&DEC&PUSH 7)
30    (LOAD&PUSH 8)
31    (CALL1&PUSH 2)                      ; INTOFP
33    (LOAD 2)
34    (BIND 6)                            ; X
36    (JMP L61)
38    L38
38    (GETVALUE&PUSH 6)                   ; X
40    (GETVALUE&PUSH 6)                   ; X
42    (LOAD&PUSH 15)
43    (GETVALUE&PUSH 6)                   ; X
45    (LOAD&PUSH 8)
46    (CALL2&PUSH 5)                      ; FPEXPT
48    (CALL2&PUSH 8)                      ; FPQUOTIENT
50    (CALL2&PUSH 9)                      ; FPDIFFERENCE
52    (LOAD&PUSH 5)
53    (CALL2 8)                           ; FPQUOTIENT
55    (STORE 7)
56    (PUSH)
57    (CALL2 9)                           ; FPDIFFERENCE
59    (SETVALUE 6)                        ; X
61    L61
61    (LOAD&PUSH 6)
62    (CONST&PUSH 7)                      ; (0 0)
63    (CALLS2&JMPIF 2 L81)                ; EQUAL
66    (GETVALUE 6)                        ; X
68    (CDR)
69    (CAR&PUSH)
70    (LOAD 7)
71    (CDR)
72    (CAR&PUSH)
73    (CALLSR&PUSH 1 54)                  ; -
76    (LOAD&PUSH 11)
77    (CALLSR&JMPIFNOT 1 48 L38)          ; >
81    L81
81    (GETVALUE 6)                        ; X
83    (STORE 13)
85    (UNBIND1)
86    (SKIP 4)
88    (UNBIND1)
89    (SKIP 1)
91    (LOAD&CAR&PUSH 2)
93    (CALL1&PUSH 10)                     ; FPROUND
95    (CONST&PUSH 11)                     ; -2
96    (GETVALUE&PUSH 12)                  ; *M
98    (LOAD 5)
99    (CDR)
100   (CAR&PUSH)
101   (CALLSR&PUSH 3 53)                  ; +
104   (LIST 2)
106   (SKIP&RET 3)


Disassembly of function #:|(DEFUN TIMESBIGFLOAT (H) ...)-79|
(CONST 0) = TIMESBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TIMESBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TIMESBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TIMESBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TIMESBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TIMESBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function TIMESBIGFLOAT
(CONST 0) = FPONE
(CONST 1) = BCONS
(CONST 2) = 1
(CONST 3) = BIGFLOATP
(CONST 4) = FPTIMES*
(CONST 5) = (MTIMES)
(CONST 6) = (MTIMES)
(CONST 7) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
49 byte-code instructions:
0     (PUSH-NIL 4)
2     (CALL0 0)                           ; FPONE
4     (PUSH)
5     (CALL1 1)                           ; BCONS
7     (STORE 2)
8     (STORE 3)
9     (CONST 2)                           ; 1
10    (STORE 0)
11    (LOAD&PUSH 5)
12    (LOAD&JMPIFNOT 0 L34)
15    L15
15    (LOAD&CAR&PUSH 0)
17    (CALL1 3)                           ; BIGFLOATP
19    (STORE 2)
20    (JMPIF L54)
22    (CONST&PUSH 5)                      ; (MTIMES)
23    (LOAD&CAR&PUSH 1)
25    (LOAD&PUSH 3)
26    (LIST 3)
28    (STORE 1)
29    L29
29    (LOAD&CDR&STORE 0)
31    (LOAD&JMPIF 0 L15)
34    L34
34    (SKIP 1)
36    (LOAD&PUSH 0)
37    (JMPIFEQTO 2 L64)                   ; 1
40    (LOAD&PUSH 3)
41    (LOAD&PUSH 3)
42    (CALLS2&JMPIF 2 L67)                ; EQUAL
45    (CONST&PUSH 6)                      ; (MTIMES)
46    (LOAD&PUSH 4)
47    (LOAD&PUSH 2)
48    (LIST&PUSH 3)
50    (CALL1 7)                           ; SIMPLIFY
52    (SKIP&RET 6)
54    L54
54    (CDR&PUSH)
55    (LOAD&CDR&PUSH 5)
57    (CALL2&PUSH 4)                      ; FPTIMES*
59    (CALL1 1)                           ; BCONS
61    (STORE 4)
62    (JMP L29)
64    L64
64    (LOAD 3)
65    (SKIP&RET 6)
67    L67
67    (POP)
68    (SKIP&RET 5)


Disassembly of function #:|(DEFUN INVERTBIGFLOAT (A) ...)-80|
(CONST 0) = INVERTBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INVERTBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INVERTBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INVERTBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INVERTBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INVERTBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function INVERTBIGFLOAT
(CONST 0) = BIGFLOATP
(CONST 1) = FPONE
(CONST 2) = FPQUOTIENT
(CONST 3) = BCONS
(CONST 4) = (MEXPT)
(CONST 5) = -1
(CONST 6) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L13)                 ; BIGFLOATP
4     (CONST&PUSH 4)                      ; (MEXPT)
5     (LOAD&PUSH 2)
6     (CONST&PUSH 5)                      ; -1
7     (LIST&PUSH 3)
9     (CALL1 6)                           ; SIMPLIFY
11    (SKIP&RET 2)
13    L13
13    (CALL0 1)                           ; FPONE
15    (PUSH)
16    (LOAD&CDR&PUSH 2)
18    (CALL2&PUSH 2)                      ; FPQUOTIENT
20    (CALL1 3)                           ; BCONS
22    (SKIP&RET 2)


Disassembly of function #:|(DEFUN *FPEXP (A) ...)-81|
(CONST 0) = *FPEXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *FPEXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *FPEXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *FPEXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *FPEXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *FPEXP
8     (SKIP&RET 1)


Disassembly of function *FPEXP
(CONST 0) = 8
(CONST 1) = FPPREC
(CONST 2) = $BFLOAT
(CONST 3) = $BFLOATP
(CONST 4) = FPEXP
(CONST 5) = (MEXPT)
(CONST 6) = $%E
(CONST 7) = FPEND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FPPREC)
22 byte-code instructions:
0     (CONST&PUSH 0)                      ; 8
1     (GETVALUE&PUSH 1)                   ; FPPREC
3     (CALLSR 2 53)                       ; +
6     (BIND 1)                            ; FPPREC
8     (LOAD&PUSH 4)
9     (CALL1 2)                           ; $BFLOAT
11    (STORE 4)
12    (PUSH)
13    (CALL1&JMPIF 3 L27)                 ; $BFLOATP
16    (CONST&PUSH 5)                      ; (MEXPT)
17    (CONST&PUSH 6)                      ; $%E
18    (LOAD&PUSH 6)
19    (LIST 3)
21    L21
21    (UNBIND1)
22    (PUSH)
23    (CALL1 7)                           ; FPEND
25    (SKIP&RET 2)
27    L27
27    (LOAD&CDR&PUSH 4)
29    (CALL1 4)                           ; FPEXP
31    (JMP L21)


Disassembly of function #:|(DEFUN *FPSIN (A FL) ...)-82|
(CONST 0) = *FPSIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *FPSIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *FPSIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *FPSIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *FPSIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *FPSIN
8     (SKIP&RET 1)


Disassembly of function *FPSIN
(CONST 0) = 8
(CONST 1) = FPPREC
(CONST 2) = $BFLOATP
(CONST 3) = $BFLOAT
(CONST 4) = FPSIN
(CONST 5) = (%SIN)
(CONST 6) = (%COS)
(CONST 7) = FPEND
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FPPREC)
27 byte-code instructions:
0     (CONST&PUSH 0)                      ; 8
1     (GETVALUE&PUSH 1)                   ; FPPREC
3     (CALLSR 2 53)                       ; +
6     (BIND 1)                            ; FPPREC
8     (LOAD&PUSH 5)
9     (CALL1&JMPIF 2 L26)                 ; $BFLOATP
12    (LOAD&JMPIF 4 L35)
15    (CONST 6)                           ; (%COS)
16    L16
16    (PUSH)
17    (LOAD&PUSH 6)
18    (LIST 2)
20    L20
20    (UNBIND1)
21    (PUSH)
22    (CALL1 7)                           ; FPEND
24    (SKIP&RET 3)
26    L26
26    (LOAD&PUSH 5)
27    (CALL1 3)                           ; $BFLOAT
29    (CDR&PUSH)
30    (LOAD&PUSH 5)
31    (CALL2 4)                           ; FPSIN
33    (JMP L20)
35    L35
35    (CONST 5)                           ; (%SIN)
36    (JMP L16)


Disassembly of function #:|(DEFUN FPEND (A) ...)-83|
(CONST 0) = FPEND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPEND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPEND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPEND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPEND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPEND
8     (SKIP&RET 1)


Disassembly of function FPEND
(CONST 0) = 0
(CONST 1) = BCONS
(CONST 2) = FPROUND
(CONST 3) = -8
(CONST 4) = *M
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*M)
24 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (JMPIFEQTO 0 L31)                   ; 0
5     (LOAD&CAR&PUSH 1)
7     (CALLS2&JMPIFNOT 8 L34)             ; NUMBERP
10    (LOAD&CAR&PUSH 1)
12    (CALL1&PUSH 2)                      ; FPROUND
14    (CONST&PUSH 3)                      ; -8
15    (GETVALUE&PUSH 4)                   ; *M
17    (LOAD 4)
18    (CDR)
19    (CAR&PUSH)
20    (CALLSR&PUSH 3 53)                  ; +
23    (LIST 2)
25    (STORE 1)
26    L26
26    (PUSH)
27    (CALL1 1)                           ; BCONS
29    (SKIP&RET 2)
31    L31
31    (LOAD 1)
32    (JMP L26)
34    L34
34    (LOAD 1)
35    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPARCSIMP (E) ...)-84|
(CONST 0) = FPARCSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPARCSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPARCSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPARCSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPARCSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPARCSIMP
8     (SKIP&RET 1)


Disassembly of function FPARCSIMP
(CONST 0) = MPLUSP
(CONST 1) = MTIMESP
(CONST 2) = $BFLOATP
(CONST 3) = $%I
(CONST 4) = FPPREC
(CONST 5) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FPPREC)
57 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIFNOT 0 L67)              ; MPLUSP
4     (LOAD 1)
5     (CDR)
6     (CDR)
7     (CDR)
8     (JMPIF L67)
10    (LOAD 1)
11    (CDR)
12    (CDR)
13    (CAR&PUSH)
14    (CALL1&JMPIFNOT 1 L67)              ; MTIMESP
17    (LOAD 1)
18    (CDR)
19    (CDR)
20    (CAR)
21    (CDR)
22    (CDR)
23    (CDR)
24    (JMPIF L67)
26    (LOAD 1)
27    (CDR)
28    (CDR)
29    (CAR)
30    (CDR)
31    (CAR&PUSH)
32    (CALL1&JMPIFNOT 2 L67)              ; $BFLOATP
35    (LOAD 1)
36    (CDR)
37    (CDR)
38    (CAR)
39    (CDR)
40    (CDR)
41    (CAR&PUSH)
42    (JMPIFNOTEQTO 3 L67)                ; $%I
45    (LOAD 1)
46    (CDR)
47    (CDR)
48    (CAR)
49    (CDR)
50    (CAR)
51    (CDR)
52    (CDR)
53    (CAR&PUSH)
54    (GETVALUE&PUSH 4)                   ; FPPREC
56    (CALLSR&PUSH 0 54)                  ; -
59    (CONST&PUSH 5)                      ; 2
60    (CALLSR&PUSH 2 53)                  ; +
63    (CALLSR&JMPIF 1 47 L70)             ; <
67    L67
67    (LOAD 1)
68    (SKIP&RET 2)
70    L70
70    (LOAD 1)
71    (CDR)
72    (CAR)
73    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (FIXNUM N))-85|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN SINBIGFLOAT (X) ...)-86|
(CONST 0) = SINBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SINBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SINBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SINBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SINBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SINBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function SINBIGFLOAT
(CONST 0) = X
(CONST 1) = *FPSIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (T&PUSH)
7     (CALL2 1)                           ; *FPSIN
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN COSBIGFLOAT (X) ...)-87|
(CONST 0) = COSBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COSBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COSBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COSBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COSBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COSBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function COSBIGFLOAT
(CONST 0) = X
(CONST 1) = *FPSIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (NIL&PUSH)
7     (CALL2 1)                           ; *FPSIN
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *FPSINCHECK))-88|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ *FPSINCHECK NIL)-89|
(CONST 0) = *FPSINCHECK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*FPSINCHECK)
3 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; *FPSINCHECK
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN FPSIN (X FL) ...)-90|
(CONST 0) = FPSIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPSIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPSIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPSIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPSIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPSIN
8     (SKIP&RET 1)


Disassembly of function FPSIN
(CONST 0) = X
(CONST 1) = PIBY2
(CONST 2) = SIGN
(CONST 3) = *CANCELLED
(CONST 4) = 0
(CONST 5) = FPABS
(CONST 6) = INTOFP
(CONST 7) = 1
(CONST 8) = FPPREC
(CONST 9) = BCONS
(CONST 10) = BIGFLOATP
(CONST 11) = FPPI
(CONST 12) = 2
(CONST 13) = FPQUOTIENT
(CONST 14) = FPINTPART
(CONST 15) = FPTIMES*
(CONST 16) = FPPLUS
(CONST 17) = FPMINUS
(CONST 18) = *FPSINCHECK
(CONST 19) = *CANC=
(CONST 20) = FPPREC=
(CONST 21) = OLDPREC=
(CONST 22) = 4
(CONST 23) = FPSIN1
(CONST 24) = FPCOS1
(CONST 25) = 3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN *FPSINCHECK *CANCELLED PIBY2 FPPREC X)
writes special variables : (FPPREC *CANCELLED PIBY2 X SIGN)
195 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; PIBY2
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; SIGN
10    (PUSH-NIL 2)
12    (NIL)
13    (BIND 3)                            ; *CANCELLED
15    (LOAD&JMPIF 16 L209)
19    (T)
20    L20
20    (SETVALUE 2)                        ; SIGN
22    (GETVALUE&PUSH 0)                   ; X
24    (CALL1 5)                           ; FPABS
26    (SETVALUE 0)                        ; X
28    (CAR&PUSH)
29    (JMPIFEQTO 4 L224)                  ; 0
33    (GETVALUE&PUSH 8)                   ; FPPREC
35    (GETVALUE&PUSH 8)                   ; FPPREC
37    (GETVALUE 0)                        ; X
39    (CDR)
40    (CAR&PUSH)
41    (CALLSR&PUSH 2 53)                  ; +
44    (CALLSR&PUSH 1 51)                  ; MAX
47    (GETVALUE&PUSH 0)                   ; X
49    (CALL1&PUSH 9)                      ; BCONS
51    (CONST 4)                           ; 0
52    (BIND 3)                            ; *CANCELLED
54    (GETVALUE&PUSH 8)                   ; FPPREC
56    (LOAD 5)
57    (BIND 8)                            ; FPPREC
59    (NIL)
60    (BIND 0)                            ; X
62    L62
62    (LOAD&PUSH 10)
63    (CALL1 10)                          ; BIGFLOATP
65    (CDR)
66    (SETVALUE 0)                        ; X
68    (CALL0 11)                          ; FPPI
70    (PUSH)
71    (CONST&PUSH 12)                     ; 2
72    (CALL1&PUSH 6)                      ; INTOFP
74    (CALL2 13)                          ; FPQUOTIENT
76    (SETVALUE 1)                        ; PIBY2
78    (GETVALUE&PUSH 0)                   ; X
80    (GETVALUE&PUSH 1)                   ; PIBY2
82    (CALL2&PUSH 13)                     ; FPQUOTIENT
84    (CALL1 14)                          ; FPINTPART
86    (STORE 20)
88    (GETVALUE&PUSH 0)                   ; X
90    (LOAD&PUSH 21)
91    (CALLSR&PUSH 0 54)                  ; -
94    (CALL1&PUSH 6)                      ; INTOFP
96    (GETVALUE&PUSH 1)                   ; PIBY2
98    (CALL2&PUSH 15)                     ; FPTIMES*
100   (CALL2 16)                          ; FPPLUS
102   (SETVALUE 0)                        ; X
104   (GETVALUE 3)                        ; *CANCELLED
106   (STORE 15)
108   (GETVALUE&PUSH 0)                   ; X
110   (GETVALUE&PUSH 1)                   ; PIBY2
112   (CALL1&PUSH 17)                     ; FPMINUS
114   (CALL2 16)                          ; FPPLUS
116   (LOAD&PUSH 15)
117   (GETVALUE&PUSH 3)                   ; *CANCELLED
119   (CALLSR 1 51)                       ; MAX
122   (SETVALUE 3)                        ; *CANCELLED
124   (GETVALUE 18)                       ; *FPSINCHECK
126   (JMPIFNOT L142)
128   (CONST&PUSH 19)                     ; *CANC=
129   (GETVALUE&PUSH 3)                   ; *CANCELLED
131   (CONST&PUSH 20)                     ; FPPREC=
132   (GETVALUE&PUSH 8)                   ; FPPREC
134   (CONST&PUSH 21)                     ; OLDPREC=
135   (LOAD&PUSH 11)
136   (LIST&PUSH 6)
138   (PUSH-UNBOUND 1)
140   (CALLS1 130)                        ; PRINT
142   L142
142   (LOAD&PUSH 6)
143   (GETVALUE&PUSH 8)                   ; FPPREC
145   (GETVALUE&PUSH 3)                   ; *CANCELLED
147   (CALLSR&PUSH 1 54)                  ; -
150   (CALLSR&JMPIF 1 48 L286)            ; >
155   (LOAD&PUSH 20)
156   (CONST&PUSH 22)                     ; 4
157   (CALLS2&STORE 184 20)               ; REM
160   (LOAD&JMPIF 28 L237)
164   (LOAD&PUSH 20)
165   (CONST&PUSH 4)                      ; 0
166   (CALLSR&JMPIF 1 45 L249)            ; =
171   (LOAD&PUSH 20)
172   (CONST&PUSH 7)                      ; 1
173   (CALLSR&JMPIF 1 45 L255)            ; =
178   (LOAD&PUSH 20)
179   (CONST&PUSH 12)                     ; 2
180   (CALLSR&JMPIF 1 45 L273)            ; =
185   (LOAD&PUSH 20)
186   (CONST&PUSH 25)                     ; 3
187   (CALLSR&JMPIFNOT 1 45 L298)         ; =
192   L192
192   (GETVALUE&PUSH 0)                   ; X
194   (CALL1 23)                          ; FPSIN1
196   (JMP L299)
199   L199
199   (LOAD&PUSH 0)
200   (CONST&PUSH 4)                      ; 0
201   (CALLSR 1 48)                       ; >
204   (SKIP 1)
206   (JMP L20)
209   L209
209   (GETVALUE 0)                        ; X
211   (CAR&PUSH)
212   (LOAD&PUSH 0)
213   (CALLS2&JMPIF 8 L199)               ; NUMBERP
216   (SKIP 1)
218   (JMP L20)
221   L221
221   (CONST 4)                           ; 0
222   (JMP L228)
224   L224
224   (LOAD&JMPIF 16 L221)
227   (CONST 7)                           ; 1
228   L228
228   (PUSH)
229   (CALL1 6)                           ; INTOFP
231   (JMP L322)
234   L234
234   (NIL)
235   (JMP L299)
237   L237
237   (LOAD&PUSH 20)
238   (CONST&PUSH 4)                      ; 0
239   (CALLSR&JMPIF 1 45 L192)            ; =
243   (LOAD&PUSH 20)
244   (CONST&PUSH 7)                      ; 1
245   (CALLSR&JMPIFNOT 1 45 L261)         ; =
249   L249
249   (GETVALUE&PUSH 0)                   ; X
251   (CALL1 24)                          ; FPCOS1
253   (JMP L299)
255   L255
255   (GETVALUE&PUSH 0)                   ; X
257   (CALL1 23)                          ; FPSIN1
259   (JMP L277)
261   L261
261   (LOAD&PUSH 20)
262   (CONST&PUSH 12)                     ; 2
263   (CALLSR&JMPIF 1 45 L255)            ; =
267   (LOAD&PUSH 20)
268   (CONST&PUSH 25)                     ; 3
269   (CALLSR&JMPIFNOT 1 45 L234)         ; =
273   L273
273   (GETVALUE&PUSH 0)                   ; X
275   (CALL1 24)                          ; FPCOS1
277   L277
277   (PUSH)
278   (CALL1 17)                          ; FPMINUS
280   (JMP L299)
282   L282
282   (LOAD 16)
284   (JMP L308)
286   L286
286   (GETVALUE&PUSH 8)                   ; FPPREC
288   (GETVALUE&PUSH 3)                   ; *CANCELLED
290   (CALLSR 2 53)                       ; +
293   (SETVALUE 8)                        ; FPPREC
295   (JMP L62)
298   L298
298   (NIL)
299   L299
299   (STORE 16)
301   (GETVALUE 2)                        ; SIGN
303   (JMPIF L282)
305   (LOAD&PUSH 16)
306   (CALL1 17)                          ; FPMINUS
308   L308
308   (PUSH)
309   (CALL1 9)                           ; BCONS
311   (UNBIND 2)
313   (SKIP 1)
315   (UNBIND1)
316   (SKIP 1)
318   (STORE 0)
319   (CALL1 10)                          ; BIGFLOATP
321   (CDR)
322   L322
322   (UNBIND1)
323   (SKIP 2)
325   (UNBIND1)
326   (SKIP 1)
328   (UNBIND 2)
330   (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPCOS1 (X) ...)-91|
(CONST 0) = FPCOS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPCOS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPCOS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPCOS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPCOS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPCOS1
8     (SKIP&RET 1)


Disassembly of function FPCOS1
(CONST 0) = X
(CONST 1) = FPSINCOS1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (NIL&PUSH)
6     (CALL2 1)                           ; FPSINCOS1
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPSINCOS1 (X FL) ...)-92|
(CONST 0) = FPSINCOS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPSINCOS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPSINCOS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPSINCOS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPSINCOS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPSINCOS1
8     (SKIP&RET 1)


Disassembly of function FPSINCOS1
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = INTOFP
(CONST 3) = FPTIMES*
(CONST 4) = FPMINUS
(CONST 5) = 3
(CONST 6) = 2
(CONST 7) = FPQUOTIENT
(CONST 8) = FPPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
52 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (PUSH-NIL 4)
5     (LOAD&JMPIF 8 L29)
8     (CONST&PUSH 1)                      ; 1
9     (CALL1 2)                           ; INTOFP
11    L11
11    (STORE 3)
12    (GETVALUE&PUSH 0)                   ; X
14    (GETVALUE&PUSH 0)                   ; X
16    (CALL2&PUSH 3)                      ; FPTIMES*
18    (CALL1 4)                           ; FPMINUS
20    (STORE 0)
21    (LOAD 3)
22    (STORE 2)
23    (LOAD&JMPIF 8 L33)
26    (CONST&PUSH 6)                      ; 2
27    (JMP L64)
29    L29
29    (GETVALUE 0)                        ; X
31    (JMP L11)
33    L33
33    (CONST&PUSH 5)                      ; 3
34    (JMP L64)
36    L36
36    (LOAD&PUSH 3)
37    (LOAD&PUSH 2)
38    (LOAD&PUSH 2)
39    (LOAD&DEC&PUSH 3)
41    (CALLSR&PUSH 2 55)                  ; *
44    (CALL1&PUSH 2)                      ; INTOFP
46    (CALL2&PUSH 7)                      ; FPQUOTIENT
48    (CALL2 3)                           ; FPTIMES*
50    (STORE 3)
51    (LOAD 4)
52    (STORE 2)
53    (PUSH)
54    (LOAD&PUSH 4)
55    (CALL2 8)                           ; FPPLUS
57    (STORE 4)
58    (CONST&PUSH 6)                      ; 2
59    (LOAD&PUSH 1)
60    (CALLSR&STORE 2 53 0)               ; +
64    L64
64    (LOAD&PUSH 4)
65    (LOAD&PUSH 3)
66    (CALLS2&JMPIFNOT 2 L36)             ; EQUAL
69    (SKIP 1)
71    (LOAD 3)
72    (SKIP 4)
74    (UNBIND1)
75    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FPSIN1 (X) ...)-93|
(CONST 0) = FPSIN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPSIN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPSIN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPSIN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPSIN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPSIN1
8     (SKIP&RET 1)


Disassembly of function FPSIN1
(CONST 0) = X
(CONST 1) = FPSINCOS1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (T&PUSH)
6     (CALL2 1)                           ; FPSINCOS1
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPABS (X) ...)-94|
(CONST 0) = FPABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPABS
8     (SKIP&RET 1)


Disassembly of function FPABS
(CONST 0) = X
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (LOAD&PUSH 0)
7     (CALLS2&JMPIF 8 L27)                ; NUMBERP
10    (SKIP 1)
12    (JMPIF L36)
14    L14
14    (GETVALUE 0)                        ; X
16    (CAR&PUSH)
17    (CALLSR&PUSH 0 54)                  ; -
20    (GETVALUE 0)                        ; X
22    (CDR)
23    (CONS)
24    L24
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (LOAD&PUSH 0)
28    (CONST&PUSH 1)                      ; 0
29    (CALLSR 1 50)                       ; >=
32    (SKIP 1)
34    (JMPIFNOT L14)
36    L36
36    (GETVALUE 0)                        ; X
38    (JMP L24)


Disassembly of function #:|(DEFMFUN FPENTIER (F) ...)-95|
(CONST 0) = FPENTIER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPENTIER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPENTIER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPENTIER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPENTIER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPENTIER
8     (SKIP&RET 1)


Disassembly of function FPENTIER
(CONST 0) = FPPREC
(CONST 1) = FPINTPART
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CDR)
3     (CDR)
4     (CAR)
5     (BIND 0)                            ; FPPREC
7     (LOAD&CDR&PUSH 4)
9     (CALL1 1)                           ; FPINTPART
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPINTPART (F) ...)-96|
(CONST 0) = FPINTPART
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPINTPART>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPINTPART
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPINTPART
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPINTPART>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPINTPART
8     (SKIP&RET 1)


Disassembly of function FPINTPART
(CONST 0) = FPPREC
(CONST 1) = 0
(CONST 2) = 2
(CONST 3) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FPPREC)
23 byte-code instructions:
0     (NIL&PUSH)
1     (GETVALUE&PUSH 0)                   ; FPPREC
3     (LOAD 3)
4     (CDR)
5     (CAR&PUSH)
6     (CALLSR&STORE 1 54 0)               ; -
10    (PUSH)
11    (CONST&PUSH 1)                      ; 0
12    (CALLSR&JMPIF 1 48 L30)             ; >
16    (LOAD&CAR&PUSH 2)
18    (CONST&PUSH 2)                      ; 2
19    (LOAD&PUSH 2)
20    (CALLSR&PUSH 0 54)                  ; -
23    (CALLS2&PUSH 154)                   ; EXPT
25    (CALLSR 2 55)                       ; *
28    (SKIP&RET 3)
30    L30
30    (LOAD&CAR&PUSH 2)
32    (CONST&PUSH 2)                      ; 2
33    (LOAD&PUSH 2)
34    (CALLS2&PUSH 154)                   ; EXPT
36    (CALL2 3)                           ; QUOT
38    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LOGBIGFLOAT (A) ...)-97|
(CONST 0) = LOGBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOGBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOGBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOGBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOGBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOGBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function LOGBIGFLOAT
(CONST 0) = MINUS
(CONST 1) = 2
(CONST 2) = FPPREC
(CONST 3) = $BFLOATP
(CONST 4) = $BFLOAT
(CONST 5) = "LOG(0.0B0) has been generated"
(CONST 6) = MERROR
(CONST 7) = FPLOG
(CONST 8) = (%LOG)
(CONST 9) = 0
(CONST 10) = FPROUND
(CONST 11) = -2
(CONST 12) = *M
(CONST 13) = BCONS
(CONST 14) = $%I
(CONST 15) = $%PI
(CONST 16) = MUL
(CONST 17) = ADD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MINUS *M FPPREC)
writes special variable : (MINUS)
89 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; MINUS
3     (CONST&PUSH 1)                      ; 2
4     (GETVALUE&PUSH 2)                   ; FPPREC
6     (CALLSR 2 53)                       ; +
9     (BIND 2)                            ; FPPREC
11    (LOAD&CAR&PUSH 7)
13    (CALL1&JMPIFNOT 3 L109)             ; $BFLOATP
17    (LOAD&CAR&PUSH 7)
19    (CALL1 4)                           ; $BFLOAT
21    (STORE 7)
22    (CDR)
23    (CAR&PUSH)
24    (CALLS2&JMPIF 145 L41)              ; ZEROP
27    (LOAD 7)
28    (CDR)
29    (CAR&PUSH)
30    (CALLS2&JMPIF 147 L47)              ; MINUSP
33    (LOAD 7)
34    (CDR)
35    L35
35    (PUSH)
36    (CALL1 7)                           ; FPLOG
38    (JMP L114)
41    L41
41    (CONST&PUSH 5)                      ; "LOG(0.0B0) has been generated"
42    (CALL1 6)                           ; MERROR
44    (JMP L114)
47    L47
47    (T)
48    (SETVALUE 0)                        ; MINUS
50    (LOAD 7)
51    (CDR)
52    (CAR&PUSH)
53    (CALLSR&PUSH 0 54)                  ; -
56    (LOAD 8)
57    (CDR)
58    (CDR)
59    (CAR&PUSH)
60    (LIST 2)
62    (JMP L35)
64    L64
64    (CONST&PUSH 9)                      ; 0
65    (CONST 9)                           ; 0
66    (JMP L86)
68    L68
68    (LOAD&CAR&PUSH 4)
70    (CALLS2&JMPIF 145 L64)              ; ZEROP
73    (LOAD&CAR&PUSH 4)
75    (CALL1&PUSH 10)                     ; FPROUND
77    (CONST&PUSH 11)                     ; -2
78    (GETVALUE&PUSH 12)                  ; *M
80    (LOAD 7)
81    (CDR)
82    (CAR&PUSH)
83    (CALLSR 3 53)                       ; +
86    L86
86    (PUSH)
87    (LIST 2)
89    (STORE 4)
90    (PUSH)
91    (CALL1 13)                          ; BCONS
93    (STORE 4)
94    (GETVALUE 0)                        ; MINUS
96    (JMPIFNOT L124)
98    L98
98    (LOAD&PUSH 4)
99    (CONST&PUSH 14)                     ; $%I
100   (CONST&PUSH 15)                     ; $%PI
101   (CALL1&PUSH 4)                      ; $BFLOAT
103   (CALL2&PUSH 16)                     ; MUL
105   (CALL2 17)                          ; ADD
107   (JMP L125)
109   L109
109   (CONST&PUSH 8)                      ; (%LOG)
110   (LOAD&CAR&PUSH 8)
112   (LIST 2)
114   L114
114   (UNBIND1)
115   (STORE 4)
116   (CAR&PUSH)
117   (CALLS2&JMPIF 8 L68)                ; NUMBERP
120   (GETVALUE 0)                        ; MINUS
122   (JMPIF L98)
124   L124
124   (LOAD 4)
125   L125
125   (UNBIND1)
126   (SKIP&RET 2)


Disassembly of function #:|(DEFUN FPLOG (X) ...)-98|
(CONST 0) = FPLOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPLOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPLOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPLOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPLOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPLOG
8     (SKIP&RET 1)


Disassembly of function FPLOG
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = "Non-positive argument to FPLOG"
(CONST 3) = MERROR
(CONST 4) = FPE
(CONST 5) = FPONE
(CONST 6) = FPQUOTIENT
(CONST 7) = FPLESSP
(CONST 8) = FPTIMES*
(CONST 9) = INTOFP
(CONST 10) = FPDIFFERENCE
(CONST 11) = 2
(CONST 12) = FPPLUS
(CONST 13) = FPEXPT
(CONST 14) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
116 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 7)
5     (GETVALUE 0)                        ; X
7     (CAR&PUSH)
8     (CONST&PUSH 1)                      ; 0
9     (CALLSR&JMPIF 1 48 L16)             ; >
13    (CONST&PUSH 2)                      ; "Non-positive argument to FPLOG"
14    (CALL1 3)                           ; MERROR
16    L16
16    (CALL0 4)                           ; FPE
18    (STORE 1)
19    (CALL0 5)                           ; FPONE
21    (PUSH)
22    (LOAD&PUSH 2)
23    (CALL2 6)                           ; FPQUOTIENT
25    (STORE 6)
26    (CONST 1)                           ; 0
27    (STORE 4)
28    (JMP L72)
30    L30
30    (GETVALUE&PUSH 0)                   ; X
32    (LOAD&PUSH 2)
33    (CALL2 8)                           ; FPTIMES*
35    (SETVALUE 0)                        ; X
37    (LOAD&DEC&STORE 4)
39    (JMP L72)
41    L41
41    (NIL)
42    (SETVALUE 0)                        ; X
44    (GETVALUE 0)                        ; X
46    (JMPIF L94)
48    L48
48    (LOAD&INC&PUSH 4)
50    (CALL1 9)                           ; INTOFP
52    (SKIP 7)
54    (JMP L174)
57    L57
57    (GETVALUE&PUSH 0)                   ; X
59    (LOAD&PUSH 7)
60    (CALL2&JMPIF 7 L30)                 ; FPLESSP
63    (LOAD&INC&STORE 4)
65    (GETVALUE&PUSH 0)                   ; X
67    (LOAD&PUSH 2)
68    (CALL2 6)                           ; FPQUOTIENT
70    (SETVALUE 0)                        ; X
72    L72
72    (GETVALUE&PUSH 0)                   ; X
74    (LOAD&PUSH 2)
75    (CALLS2&JMPIF 2 L41)                ; EQUAL
78    (GETVALUE&PUSH 0)                   ; X
80    (LOAD&PUSH 2)
81    (CALL2&JMPIFNOT 7 L57)              ; FPLESSP
84    (LOAD&PUSH 6)
85    (GETVALUE&PUSH 0)                   ; X
87    (CALL2&JMPIFNOT 7 L57)              ; FPLESSP
90    (GETVALUE 0)                        ; X
92    (JMPIFNOT L48)
94    L94
94    (GETVALUE&PUSH 0)                   ; X
96    (CALL0 5)                           ; FPONE
98    (PUSH)
99    (CALL2 10)                          ; FPDIFFERENCE
101   (SETVALUE 0)                        ; X
103   (LOAD&PUSH 4)
104   (CALL1 9)                           ; INTOFP
106   (STORE 4)
107   (GETVALUE&PUSH 0)                   ; X
109   (GETVALUE&PUSH 0)                   ; X
111   (CONST&PUSH 11)                     ; 2
112   (CALL1 9)                           ; INTOFP
114   (STORE 7)
115   (PUSH)
116   (CALL2&PUSH 12)                     ; FPPLUS
118   (CALL2 6)                           ; FPQUOTIENT
120   (STORE 2)
121   (PUSH)
122   (CONST&PUSH 11)                     ; 2
123   (CALL2 13)                          ; FPEXPT
125   (SETVALUE 0)                        ; X
127   (CONST&PUSH 1)                      ; 0
128   (CALL1 9)                           ; INTOFP
130   (STORE 0)
131   (CONST&PUSH 14)                     ; 1
132   (JMP L158)
134   L134
134   (LOAD 1)
135   (STORE 4)
136   (PUSH)
137   (LOAD&PUSH 4)
138   (LOAD&PUSH 2)
139   (CALL1&PUSH 9)                      ; INTOFP
141   (CALL2&PUSH 6)                      ; FPQUOTIENT
143   (CALL2 12)                          ; FPPLUS
145   (STORE 1)
146   (LOAD&PUSH 3)
147   (GETVALUE&PUSH 0)                   ; X
149   (CALL2 8)                           ; FPTIMES*
151   (STORE 3)
152   (CONST&PUSH 11)                     ; 2
153   (LOAD&PUSH 1)
154   (CALLSR&STORE 2 53 0)               ; +
158   L158
158   (LOAD&PUSH 1)
159   (LOAD&PUSH 5)
160   (CALLS2&JMPIFNOT 2 L134)            ; EQUAL
163   (SKIP 1)
165   (LOAD&PUSH 4)
166   (LOAD&PUSH 6)
167   (LOAD&PUSH 2)
168   (CALL2&PUSH 8)                      ; FPTIMES*
170   (CALL2 12)                          ; FPPLUS
172   (SKIP 7)
174   L174
174   (UNBIND1)
175   (SKIP&RET 2)


Disassembly of function #:|(DEFUN MABSBIGFLOAT (L) ...)-99|
(CONST 0) = MABSBIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MABSBIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MABSBIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MABSBIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MABSBIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MABSBIGFLOAT
8     (SKIP&RET 1)


Disassembly of function MABSBIGFLOAT
(CONST 0) = BIGFLOATP
(CONST 1) = (MABS)
(CONST 2) = FPABS
(CONST 3) = BCONS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&CAR&PUSH 2)
3     (CALL1 0)                           ; BIGFLOATP
5     (STORE 0)
6     (JMPIFNOT L16)
8     (LOAD&CDR&PUSH 0)
10    (CALL1&PUSH 2)                      ; FPABS
12    (CALL1 3)                           ; BCONS
14    (SKIP&RET 3)
16    L16
16    (CONST&PUSH 1)                      ; (MABS)
17    (LOAD&CAR&PUSH 3)
19    (LIST 2)
21    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (LOAD) (FPPREC1 NIL $FPPREC))-100|
(CONST 0) = $FPPREC
(CONST 1) = FPPREC1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($FPPREC)
4 byte-code instructions:
0     (NIL&PUSH)
1     (GETVALUE&PUSH 0)                   ; $FPPREC
3     (CALL2 1)                           ; FPPREC1
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (NOTYPE I N ...))-101|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/float.fas
Wrote file /cygdrive/e/temp/maxima/src/float.lis