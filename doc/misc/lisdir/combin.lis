Listing of compilation of file /cygdrive/e/temp/maxima/src/combin.lisp
on 2002-12-17 13:35:56 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/combin.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE COMBIN)-2|
(CONST 0) = COMBIN
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMBIN
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *MFACTL *FACTLIST ...) (*LEXPR $RATCOEF $DIVIDE) ...)-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS MHAYAT RZMAC ...)-4|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE MINFCT))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(COMMENT MINFACTORIAL AND ...)-6|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $MAKEFACT (E) ...)-7|
(CONST 0) = $MAKEFACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MAKEFACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAKEFACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MAKEFACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MAKEFACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MAKEFACT
8     (SKIP&RET 1)


Disassembly of function $MAKEFACT
(CONST 0) = E
(CONST 1) = MAKEF
(CONST 2) = MAKEFACT1
(CONST 3) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (T)
4     (BIND 1)                            ; MAKEF
6     (GETVALUE 0)                        ; E
8     (JMPIFATOM L20)
10    (GETVALUE&PUSH 0)                   ; E
12    (CALL1&PUSH 2)                      ; MAKEFACT1
14    (CALL1 3)                           ; SIMPLIFY
16    (UNBIND1)
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)
20    L20
20    (GETVALUE 0)                        ; E
22    (UNBIND1)
23    (JMP L17)


Disassembly of function #:|(DEFUN MAKEFACT1 (E) ...)-8|
(CONST 0) = MAKEFACT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKEFACT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKEFACT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKEFACT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKEFACT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKEFACT1
8     (SKIP&RET 1)


Disassembly of function MAKEFACT1
(CONST 0) = E
(CONST 1) = %BINOMIAL
(CONST 2) = X
(CONST 3) = Y
(CONST 4) = 
((MTIMES) ((MFACTORIAL) X) ((MEXPT) ((MFACTORIAL) Y) -1)
 ((MEXPT) ((MFACTORIAL) ((MPLUS) X ((MTIMES) -1 Y))) -1))
(CONST 5) = %GAMMA
(CONST 6) = (MFACTORIAL)
(CONST 7) = (MPLUS)
(CONST 8) = -1
(CONST 9) = $BETA
(CONST 10) = ((MTIMES) ((%GAMMA) X) ((%GAMMA) Y) ((MEXPT) ((%GAMMA) ((MPLUS) X Y)) -1))
(CONST 11) = MAKEFACT1
(CONST 12) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
72 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L37)
7     (GETVALUE 0)                        ; E
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 1 L41)                   ; %BINOMIAL
14    (GETVALUE 0)                        ; E
16    (CAR)
17    (CAR&PUSH)
18    (JMPIFEQTO 5 L67)                   ; %GAMMA
21    (GETVALUE 0)                        ; E
23    (CAR)
24    (CAR&PUSH)
25    (JMPIFEQTO 9 L83)                   ; $BETA
28    (CONST&SYMBOL-FUNCTION&PUSH 11)     ; MAKEFACT1
30    (GETVALUE&PUSH 0)                   ; E
32    (CALL2 12)                          ; RECUR-APPLY
34    L34
34    (UNBIND1)
35    (SKIP&RET 2)
37    L37
37    (GETVALUE 0)                        ; E
39    (JMP L34)
41    L41
41    (GETVALUE 0)                        ; E
43    (CDR)
44    (CAR&PUSH)
45    (JSR&PUSH L0)
47    (CONST&PUSH 2)                      ; X
48    (GETVALUE 0)                        ; E
50    (CDR)
51    (CDR)
52    (CAR&PUSH)
53    (JSR&PUSH L0)
55    (CONST&PUSH 3)                      ; Y
56    (CONST&PUSH 4)                      ; ((MTIMES) (# X) (# # -1) (# # -1))
57    (PUSH-UNBOUND 3)
59    (CALLS1&PUSH 172)                   ; SUBST
61    (PUSH-UNBOUND 3)
63    (CALLS1 172)                        ; SUBST
65    (JMP L34)
67    L67
67    (CONST&PUSH 6)                      ; (MFACTORIAL)
68    (CONST&PUSH 7)                      ; (MPLUS)
69    (CONST&PUSH 8)                      ; -1
70    (GETVALUE 0)                        ; E
72    (CDR)
73    (CAR&PUSH)
74    (JSR&PUSH L0)
77    (LIST&PUSH 3)
79    (LIST 2)
81    (JMP L34)
83    L83
83    (GETVALUE 0)                        ; E
85    (CDR)
86    (CAR&PUSH)
87    (CONST&PUSH 2)                      ; X
88    (GETVALUE 0)                        ; E
90    (CDR)
91    (CDR)
92    (CAR&PUSH)
93    (CONST&PUSH 3)                      ; Y
94    (CONST&PUSH 10)                     ; ((MTIMES) (# X) (# Y) (# # -1))
95    (PUSH-UNBOUND 3)
97    (CALLS1&PUSH 172)                   ; SUBST
99    (PUSH-UNBOUND 3)
101   (CALLS1&PUSH 172)                   ; SUBST
103   (JSR L0)
106   (JMP L34)


Disassembly of function #:|(DEFMFUN $MAKEGAMMA (E) ...)-9|
(CONST 0) = $MAKEGAMMA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MAKEGAMMA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAKEGAMMA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MAKEGAMMA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MAKEGAMMA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MAKEGAMMA
8     (SKIP&RET 1)


Disassembly of function $MAKEGAMMA
(CONST 0) = E
(CONST 1) = $MAKEFACT
(CONST 2) = MAKEGAMMA1
(CONST 3) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L18)
7     (GETVALUE&PUSH 0)                   ; E
9     (CALL1&PUSH 1)                      ; $MAKEFACT
11    (CALL1&PUSH 2)                      ; MAKEGAMMA1
13    (CALL1 3)                           ; SIMPLIFY
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)
18    L18
18    (GETVALUE 0)                        ; E
20    (JMP L15)


Disassembly of function #:|(DEFMFUN $MINFACTORIAL (E) ...)-10|
(CONST 0) = $MINFACTORIAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MINFACTORIAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MINFACTORIAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MINFACTORIAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MINFACTORIAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MINFACTORIAL
8     (SKIP&RET 1)


Disassembly of function $MINFACTORIAL
(CONST 0) = E
(CONST 1) = *MFACTL
(CONST 2) = *FACTLIST
(CONST 3) = SPECREPP
(CONST 4) = SPECDISREP
(CONST 5) = GETFACT
(CONST 6) = EVFAC1
(CONST 7) = EVFACT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*FACTLIST E)
writes special variable : (E)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (NIL)
4     (BIND 1)                            ; *MFACTL
6     (NIL)
7     (BIND 2)                            ; *FACTLIST
9     (GETVALUE&PUSH 0)                   ; E
11    (CALL1&JMPIFNOT 3 L20)              ; SPECREPP
14    (GETVALUE&PUSH 0)                   ; E
16    (CALL1 4)                           ; SPECDISREP
18    (SETVALUE 0)                        ; E
20    L20
20    (GETVALUE&PUSH 0)                   ; E
22    (CALL1 5)                           ; GETFACT
24    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; EVFAC1
26    (GETVALUE&PUSH 2)                   ; *FACTLIST
28    (CALLSR 0 25)                       ; MAPL
31    (GETVALUE&PUSH 0)                   ; E
33    (CALL1 7)                           ; EVFACT
35    (SETVALUE 0)                        ; E
37    (UNBIND 3)
39    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EVFACT (E) ...)-11|
(CONST 0) = EVFACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVFACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVFACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVFACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVFACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVFACT
8     (SKIP&RET 1)


Disassembly of function EVFACT
(CONST 0) = E
(CONST 1) = MFACTORIAL
(CONST 2) = *FACTLIST
(CONST 3) = ZL-ASSOC
(CONST 4) = (%SUM %DERIVATIVE %INTEGRATE %PRODUCT)
(CONST 5) = MEMQ
(CONST 6) = EVFACT
(CONST 7) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*FACTLIST E)
46 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L31)
7     (GETVALUE 0)                        ; E
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 1 L35)                   ; MFACTORIAL
14    (GETVALUE 0)                        ; E
16    (CAR)
17    (CAR&PUSH)
18    (CONST&PUSH 4)                      ; (%SUM %DERIVATIVE %INTEGRATE ...)
19    (CALL2&JMPIF 5 L46)                 ; MEMQ
22    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; EVFACT
24    (GETVALUE&PUSH 0)                   ; E
26    (CALL2 7)                           ; RECUR-APPLY
28    L28
28    (UNBIND1)
29    (SKIP&RET 2)
31    L31
31    (GETVALUE 0)                        ; E
33    (JMP L28)
35    L35
35    (GETVALUE 0)                        ; E
37    (CDR)
38    (CAR&PUSH)
39    (GETVALUE&PUSH 2)                   ; *FACTLIST
41    (CALL2 3)                           ; ZL-ASSOC
43    (CDR)
44    (JMP L28)
46    L46
46    (GETVALUE 0)                        ; E
48    (CAR)
49    (CAR&PUSH)
50    (LIST&PUSH 1)
52    (GETVALUE 0)                        ; E
54    (CDR)
55    (CAR&PUSH)
56    (JSR&PUSH L0)
58    (GETVALUE 0)                        ; E
60    (CDR)
61    (CDR)
62    (CONS)
63    (CONS)
64    (JMP L28)


Disassembly of function #:|(DEFUN ADFACTL (E L) ...)-12|
(CONST 0) = ADFACTL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADFACTL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADFACTL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADFACTL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADFACTL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADFACTL
8     (SKIP&RET 1)


Disassembly of function ADFACTL
(CONST 0) = E
(CONST 1) = L
(CONST 2) = N
(CONST 3) = *MFACTL
(CONST 4) = (MPLUS)
(CONST 5) = (MTIMES)
(CONST 6) = -1
(CONST 7) = $RATSIMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N *MFACTL E L)
writes special variables : (*MFACTL N)
66 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (NIL)
7     (BIND 2)                            ; N
9     (GETVALUE 1)                        ; L
11    (JMPIFNOT L47)
13    (CONST&PUSH 4)                      ; (MPLUS)
14    (GETVALUE&PUSH 0)                   ; E
16    (CONST&PUSH 5)                      ; (MTIMES)
17    (CONST&PUSH 6)                      ; -1
18    (GETVALUE 1)                        ; L
20    (CAR)
21    (CAR&PUSH)
22    (LIST&PUSH 3)
24    (LIST&PUSH 3)
26    (CALL1 7)                           ; $RATSIMP
28    (SETVALUE 2)                        ; N
30    (PUSH)
31    (CALLS2&JMPIF 8 L74)                ; NUMBERP
34    (GETVALUE&PUSH 0)                   ; E
36    (GETVALUE 1)                        ; L
38    (CDR&PUSH)
39    (JSR L0)
41    (JMPIF1 L93)
43    L43
43    (NIL)
44    (UNBIND1)
45    (JMP L94)
47    L47
47    (GETVALUE&PUSH 0)                   ; E
49    (LIST&PUSH 1)
51    (GETVALUE 3)                        ; *MFACTL
53    (CONS)
54    (SETVALUE 3)                        ; *MFACTL
56    (UNBIND1)
57    (JMP L94)
59    L59
59    (GETVALUE 1)                        ; L
61    (CAR&PUSH)
62    (GETVALUE&PUSH 0)                   ; E
64    (GETVALUE 1)                        ; L
66    (CAR)
67    (CDR)
68    (CONS&PUSH)
69    (CALLS1 170)                        ; RPLACD
71    (UNBIND1)
72    (JMP L94)
74    L74
74    (GETVALUE&PUSH 2)                   ; N
76    (CALLS2&JMPIF 146 L59)              ; PLUSP
79    (GETVALUE&PUSH 1)                   ; L
81    (GETVALUE&PUSH 0)                   ; E
83    (GETVALUE 1)                        ; L
85    (CAR)
86    (CONS&PUSH)
87    (CALLS1 168)                        ; RPLACA
89    (JMPIF1 L93)
91    (JMP L43)
93    L93
93    (UNBIND1)
94    L94
94    (UNBIND 2)
96    (SKIP&RET 3)


Disassembly of function #:|(DEFUN GETFACT (E) ...)-13|
(CONST 0) = GETFACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETFACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETFACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETFACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETFACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETFACT
8     (SKIP&RET 1)


Disassembly of function GETFACT
(CONST 0) = E
(CONST 1) = MFACTORIAL
(CONST 2) = *FACTLIST
(CONST 3) = ZL-MEMBER
(CONST 4) = *MFACTL
(CONST 5) = ADFACTL
(CONST 6) = (%SUM %DERIVATIVE %INTEGRATE %PRODUCT)
(CONST 7) = MEMQ
(CONST 8) = GETFACT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*MFACTL *FACTLIST E)
writes special variable : (*FACTLIST)
53 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L36)
7     (GETVALUE 0)                        ; E
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 1 L39)                   ; MFACTORIAL
14    (GETVALUE 0)                        ; E
16    (CAR)
17    (CAR&PUSH)
18    (CONST&PUSH 6)                      ; (%SUM %DERIVATIVE %INTEGRATE ...)
19    (CALL2&JMPIF 7 L70)                 ; MEMQ
22    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; GETFACT
24    (GETVALUE 0)                        ; E
26    (CDR&PUSH)
27    (CALLSR 0 24)                       ; MAPC
30    (JMPIF1 L33)
32    (NIL)
33    L33
33    (UNBIND1)
34    (SKIP&RET 2)
36    L36
36    (NIL)
37    (JMP L33)
39    L39
39    (GETVALUE 0)                        ; E
41    (CDR)
42    (CAR&PUSH)
43    (GETVALUE&PUSH 2)                   ; *FACTLIST
45    (CALL2 3)                           ; ZL-MEMBER
47    (NOT)
48    (JMPIFNOT1 L33)
50    (GETVALUE 0)                        ; E
52    (CDR)
53    (CAR&PUSH)
54    (GETVALUE 2)                        ; *FACTLIST
56    (CONS)
57    (SETVALUE 2)                        ; *FACTLIST
59    (GETVALUE 0)                        ; E
61    (CDR)
62    (CAR&PUSH)
63    (GETVALUE&PUSH 4)                   ; *MFACTL
65    (CALL2 5)                           ; ADFACTL
67    (VALUES1)
68    (JMP L33)
70    L70
70    (GETVALUE 0)                        ; E
72    (CDR)
73    (CAR&PUSH)
74    (JSR L0)
77    (JMP L33)


Disassembly of function #:|(DEFUN EVFAC1 (E) ...)-14|
(CONST 0) = EVFAC1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVFAC1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVFAC1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVFAC1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVFAC1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVFAC1
8     (SKIP&RET 1)


Disassembly of function EVFAC1
(CONST 0) = E
(CONST 1) = *MFACTL
(CONST 2) = ZL-MEMBER
(CONST 3) = (MTIMES)
(CONST 4) = (MPLUS)
(CONST 5) = (MTIMES)
(CONST 6) = -1
(CONST 7) = $RATSIMP
(CONST 8) = 1
(CONST 9) = GFACT
(CONST 10) = (MFACTORIAL)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (E *MFACTL)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 1)                   ; *MFACTL
5     (JMP L9)
7     L7
7     (LOAD&CDR&STORE 0)
9     L9
9     (GETVALUE 0)                        ; E
11    (CAR&PUSH)
12    (LOAD&CAR&PUSH 1)
14    (CALL2&JMPIFNOT 2 L7)               ; ZL-MEMBER
17    (GETVALUE&PUSH 0)                   ; E
19    (GETVALUE 0)                        ; E
21    (CAR&PUSH)
22    (CONST&PUSH 3)                      ; (MTIMES)
23    (GETVALUE 0)                        ; E
25    (CAR&PUSH)
26    (CONST&PUSH 4)                      ; (MPLUS)
27    (GETVALUE 0)                        ; E
29    (CAR&PUSH)
30    (CONST&PUSH 5)                      ; (MTIMES)
31    (CONST&PUSH 6)                      ; -1
32    (LOAD 8)
33    (CAR)
34    (CAR&PUSH)
35    (LIST&PUSH 3)
37    (LIST&PUSH 3)
39    (CALL1&PUSH 7)                      ; $RATSIMP
41    (CONST&PUSH 8)                      ; 1
42    (CALL&PUSH 3 9)                     ; GFACT
45    (CONST&PUSH 10)                     ; (MFACTORIAL)
46    (LOAD 5)
47    (CAR)
48    (CAR&PUSH)
49    (LIST&PUSH 2)
51    (LIST 3)
53    (CONS&PUSH)
54    (CALLS1 168)                        ; RPLACA
56    (SKIP 1)
58    (UNBIND1)
59    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $FACTCOMB (E) ...)-15|
(CONST 0) = $FACTCOMB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FACTCOMB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FACTCOMB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FACTCOMB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FACTCOMB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FACTCOMB
8     (SKIP&RET 1)


Disassembly of function $FACTCOMB
(CONST 0) = E
(CONST 1) = VARLIST
(CONST 2) = MRAT
(CONST 3) = GENVAR
(CONST 4) = $RATFAC
(CONST 5) = RATDISREP
(CONST 6) = FACTCOMB
(CONST 7) = FACTCOMB1
(CONST 8) = SIMPLIFY
(CONST 9) = $SUMSPLITFACT
(CONST 10) = $MINFACTORIAL
(CONST 11) = RATF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($SUMSPLITFACT E VARLIST)
writes special variable : (E)
62 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 1)                   ; VARLIST
5     (PUSH-NIL 2)
7     (GETVALUE&PUSH 0)                   ; E
9     (CALLS2&JMPIFNOT 4 L18)             ; CONSP
12    (GETVALUE 0)                        ; E
14    (CAR)
15    (CAR&PUSH)
16    (CONST 2)                           ; MRAT
17    (EQ)
18    L18
18    (PUSH)
19    (LOAD 3)
20    (BIND 1)                            ; VARLIST
22    (LOAD 5)
23    (BIND 3)                            ; GENVAR
25    (LOAD 7)
26    (BIND 4)                            ; $RATFAC
28    (LOAD&JMPIFNOT 9 L37)
31    (GETVALUE&PUSH 0)                   ; E
33    (CALL1 5)                           ; RATDISREP
35    (SETVALUE 0)                        ; E
37    L37
37    (GETVALUE&PUSH 0)                   ; E
39    (CALL1 6)                           ; FACTCOMB
41    (SETVALUE 0)                        ; E
43    (JMPIFATOM L80)
45    (GETVALUE 0)                        ; E
47    (CAR)
48    (CAR&PUSH)
49    (LIST&PUSH 1)
51    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; FACTCOMB1
53    (GETVALUE 0)                        ; E
55    (CDR&PUSH)
56    (CALLSR 0 22)                       ; MAPCAR
59    (CONS&PUSH)
60    (CALL1 8)                           ; SIMPLIFY
62    L62
62    (SETVALUE 0)                        ; E
64    (GETVALUE 9)                        ; $SUMSPLITFACT
66    (JMPIFNOT L84)
68    (LOAD&JMPIF 9 L93)
71    L71
71    (GETVALUE 0)                        ; E
73    L73
73    (UNBIND 3)
75    (SKIP 4)
77    (UNBIND1)
78    (SKIP&RET 2)
80    L80
80    (GETVALUE 0)                        ; E
82    (JMP L62)
84    L84
84    (GETVALUE&PUSH 0)                   ; E
86    (CALL1 10)                          ; $MINFACTORIAL
88    (SETVALUE 0)                        ; E
90    (LOAD&JMPIFNOT 9 L71)
93    L93
93    (GETVALUE&PUSH 0)                   ; E
95    (CALL1 11)                          ; RATF
97    (JMP L73)


Disassembly of function #:|(DEFUN FACTCOMB1 (E) ...)-16|
(CONST 0) = FACTCOMB1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTCOMB1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTCOMB1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTCOMB1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTCOMB1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTCOMB1
8     (SKIP&RET 1)


Disassembly of function FACTCOMB1
(CONST 0) = E
(CONST 1) = MFACTORIAL
(CONST 2) = FREE
(CONST 3) = (MPLUS MTIMES MEXPT)
(CONST 4) = MEMQ
(CONST 5) = FACTCOMB1
(CONST 6) = FACTCOMB
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
writes special variable : (E)
42 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CONST&PUSH 1)                      ; MFACTORIAL
6     (CALL2&JMPIF 2 L44)                 ; FREE
9     (GETVALUE 0)                        ; E
11    (CAR)
12    (CAR&PUSH)
13    (CONST&PUSH 3)                      ; (MPLUS MTIMES MEXPT)
14    (CALL2&JMPIF 4 L48)                 ; MEMQ
17    (GETVALUE&PUSH 0)                   ; E
19    (CALL1 6)                           ; FACTCOMB
21    (SETVALUE 0)                        ; E
23    (JMPIFATOM L57)
25    (GETVALUE 0)                        ; E
27    (CAR)
28    (CAR&PUSH)
29    (LIST&PUSH 1)
31    (CONST 5)                           ; FACTCOMB1
32    L32
32    (SYMBOL-FUNCTION)
33    (PUSH)
34    (GETVALUE 0)                        ; E
36    (CDR&PUSH)
37    (CALLSR 0 22)                       ; MAPCAR
40    (CONS)
41    L41
41    (UNBIND1)
42    (SKIP&RET 2)
44    L44
44    (GETVALUE 0)                        ; E
46    (JMP L41)
48    L48
48    (GETVALUE 0)                        ; E
50    (CAR)
51    (CAR&PUSH)
52    (LIST&PUSH 1)
54    (CONST 5)                           ; FACTCOMB1
55    (JMP L32)
57    L57
57    (GETVALUE 0)                        ; E
59    (JMP L41)


Disassembly of function #:|(DEFUN FACTCOMB (E) ...)-17|
(CONST 0) = FACTCOMB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTCOMB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTCOMB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTCOMB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTCOMB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTCOMB
8     (SKIP&RET 1)


Disassembly of function FACTCOMB
(CONST 0) = E
(CONST 1) = MFACTORIAL
(CONST 2) = FREE
(CONST 3) = (MPLUS MTIMES)
(CONST 4) = MEMQ
(CONST 5) = FACTCOMBPLUS
(CONST 6) = FACTPLUSCOMB
(CONST 7) = MEXPT
(CONST 8) = (MEXPT)
(CONST 9) = 1
(CONST 10) = SIMPEXPT
(CONST 11) = MRAT
(CONST 12) = FACTRAT
(CONST 13) = FACTCOMB
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
62 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L50)
7     (GETVALUE&PUSH 0)                   ; E
9     (CONST&PUSH 1)                      ; MFACTORIAL
10    (CALL2&JMPIF 2 L54)                 ; FREE
13    (GETVALUE 0)                        ; E
15    (CAR)
16    (CAR&PUSH)
17    (CONST&PUSH 3)                      ; (MPLUS MTIMES)
18    (CALL2&JMPIF 4 L58)                 ; MEMQ
21    (GETVALUE 0)                        ; E
23    (CAR)
24    (CAR&PUSH)
25    (JMPIFEQTO 7 L66)                   ; MEXPT
28    (GETVALUE 0)                        ; E
30    (CAR)
31    (CAR&PUSH)
32    (JMPIFEQTO 11 L91)                  ; MRAT
35    (GETVALUE 0)                        ; E
37    (CAR&PUSH)
38    (CONST&SYMBOL-FUNCTION&PUSH 13)     ; FACTCOMB
40    (GETVALUE 0)                        ; E
42    (CDR&PUSH)
43    (CALLSR 0 22)                       ; MAPCAR
46    (CONS)
47    L47
47    (UNBIND1)
48    (SKIP&RET 2)
50    L50
50    (GETVALUE 0)                        ; E
52    (JMP L47)
54    L54
54    (GETVALUE 0)                        ; E
56    (JMP L47)
58    L58
58    (GETVALUE&PUSH 0)                   ; E
60    (CALL1&PUSH 5)                      ; FACTCOMBPLUS
62    (CALL1 6)                           ; FACTPLUSCOMB
64    (JMP L47)
66    L66
66    (CONST&PUSH 8)                      ; (MEXPT)
67    (GETVALUE 0)                        ; E
69    (CDR)
70    (CAR&PUSH)
71    (JSR&PUSH L0)
74    (GETVALUE 0)                        ; E
76    (CDR)
77    (CDR)
78    (CAR&PUSH)
79    (JSR&PUSH L0)
82    (LIST&PUSH 3)
84    (CONST&PUSH 9)                      ; 1
85    (NIL&PUSH)
86    (CALL 3 10)                         ; SIMPEXPT
89    (JMP L47)
91    L91
91    (GETVALUE&PUSH 0)                   ; E
93    (CALL1 12)                          ; FACTRAT
95    (JMP L47)


Disassembly of function #:|(DEFUN FACTRAT (E) ...)-18|
(CONST 0) = FACTRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTRAT
8     (SKIP&RET 1)


Disassembly of function FACTRAT
(CONST 0) = E
(CONST 1) = NN*
(CONST 2) = DN*
(CONST 3) = 1
(CONST 4) = $RATDISREP
(CONST 5) = FACTQSNT
(CONST 6) = NUMDEN
(CONST 7) = FACTPLUSCOMB
(CONST 8) = DIV*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DN* NN* E)
writes special variable : (E)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (NIL)
4     (BIND 1)                            ; NN*
6     (NIL)
7     (BIND 2)                            ; DN*
9     (GETVALUE 0)                        ; E
11    (CAR&PUSH)
12    (GETVALUE 0)                        ; E
14    (CDR)
15    (CAR&PUSH)
16    (CONST 3)                           ; 1
17    (CONS)
18    (CONS&PUSH)
19    (CALL1&PUSH 4)                      ; $RATDISREP
21    (GETVALUE 0)                        ; E
23    (CAR&PUSH)
24    (GETVALUE 0)                        ; E
26    (CDR)
27    (CDR&PUSH)
28    (CONST 3)                           ; 1
29    (CONS)
30    (CONS&PUSH)
31    (CALL1&PUSH 4)                      ; $RATDISREP
33    (CALL2 5)                           ; FACTQSNT
35    (SETVALUE 0)                        ; E
37    (PUSH)
38    (CALL1 6)                           ; NUMDEN
40    (GETVALUE&PUSH 1)                   ; NN*
42    (CALL1&PUSH 7)                      ; FACTPLUSCOMB
44    (GETVALUE&PUSH 2)                   ; DN*
46    (CALL1&PUSH 7)                      ; FACTPLUSCOMB
48    (CALL2 8)                           ; DIV*
50    (UNBIND 3)
52    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FACTQSNT (NUM DEN) ...)-19|
(CONST 0) = FACTQSNT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTQSNT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTQSNT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTQSNT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTQSNT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTQSNT
8     (SKIP&RET 1)


Disassembly of function FACTQSNT
(CONST 0) = NUM
(CONST 1) = 0
(CONST 2) = DIV*
(CONST 3) = FACTPLUSCOMB
(CONST 4) = E
(CONST 5) = NN*
(CONST 6) = DN*
(CONST 7) = NUMDEN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NN* DN* E NUM)
28 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (JMPIFEQTO 1 L44)                   ; 0
8     (PUSH-NIL 2)
10    (LOAD&PUSH 6)
11    (GETVALUE&PUSH 0)                   ; NUM
13    (CALL2&PUSH 2)                      ; DIV*
15    (CALL1 3)                           ; FACTPLUSCOMB
17    (BIND 4)                            ; E
19    (LOAD 4)
20    (BIND 5)                            ; NN*
22    (LOAD 6)
23    (BIND 6)                            ; DN*
25    (GETVALUE&PUSH 4)                   ; E
27    (CALL1 7)                           ; NUMDEN
29    (GETVALUE&PUSH 6)                   ; DN*
31    (GETVALUE&PUSH 5)                   ; NN*
33    (CALL2&PUSH 2)                      ; DIV*
35    (CALL1 3)                           ; FACTPLUSCOMB
37    (UNBIND 3)
39    (SKIP 2)
41    L41
41    (UNBIND1)
42    (SKIP&RET 3)
44    L44
44    (CONST 1)                           ; 0
45    (JMP L41)


Disassembly of function #:|(DEFUN FACTCOMBPLUS (E) ...)-20|
(CONST 0) = FACTCOMBPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTCOMBPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTCOMBPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTCOMBPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTCOMBPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTCOMBPLUS
8     (SKIP&RET 1)


Disassembly of function FACTCOMBPLUS
(CONST 0) = E
(CONST 1) = NN*
(CONST 2) = DN*
(CONST 3) = NPLUS
(CONST 4) = NUMDEN
(CONST 5) = $GCD
(CONST 6) = MFACTORIAL
(CONST 7) = FREE
(CONST 8) = (MPLUS)
(CONST 9) = DIV*
(CONST 10) = 1
(CONST 11) = DELQ
(CONST 12) = (MPLUS)
(CONST 13) = Q
(CONST 14) = FACTQSNT
(CONST 15) = SIMPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Q NN* DN* E)
83 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (NIL)
4     (BIND 1)                            ; NN*
6     (NIL)
7     (BIND 2)                            ; DN*
9     (GETVALUE&PUSH 0)                   ; E
11    (CALL1&PUSH 3)                      ; NPLUS
13    (NIL&PUSH)
14    (LOAD&JMPIFNOT 1 L89)
18    L18
18    (LOAD&CAR&PUSH 1)
20    (CALL1 4)                           ; NUMDEN
22    (LOAD&PUSH 0)
23    (NIL&PUSH)
24    (LOAD&JMPIFNOT 1 L69)
27    L27
27    (LOAD&CAR&STORE 1 0)
30    (GETVALUE&PUSH 2)                   ; DN*
32    (LOAD&CDR&PUSH 1)
34    (CALL2&PUSH 5)                      ; $GCD
36    (CONST&PUSH 6)                      ; MFACTORIAL
37    (CALL2&JMPIF 7 L64)                 ; FREE
40    (CONST&PUSH 8)                      ; (MPLUS)
41    (GETVALUE&PUSH 1)                   ; NN*
43    (GETVALUE&PUSH 2)                   ; DN*
45    (CALL2&PUSH 9)                      ; DIV*
47    (LOAD&CAR&PUSH 2)
49    (LOAD&CDR&PUSH 3)
51    (CALL2&PUSH 9)                      ; DIV*
53    (LIST&PUSH 3)
55    (CALL1 4)                           ; NUMDEN
57    (LOAD&PUSH 0)
58    (LOAD&PUSH 3)
59    (CONST&PUSH 10)                     ; 1
60    (CALL 3 11)                         ; DELQ
63    (STORE 2)
64    L64
64    (LOAD&CDR&STORE 1)
66    (LOAD&JMPIF 1 L27)
69    L69
69    (LOAD&PUSH 2)
70    (GETVALUE&PUSH 1)                   ; NN*
72    (GETVALUE 2)                        ; DN*
74    (CONS&PUSH)
75    (LIST&PUSH 1)
77    (CALLSR&STORE 2 35 2)               ; NCONC
81    (SKIP 2)
83    (LOAD&CDR&STORE 1)
85    (LOAD&JMPIF 1 L18)
89    L89
89    (CONST&PUSH 12)                     ; (MPLUS)
90    (NIL&PUSH)
91    (LOAD&PUSH 2)
92    (JMP L115)
94    L94
94    (LOAD&CAR&PUSH 0)
96    (LOAD 0)
97    (BIND 13)                           ; Q
99    (GETVALUE 13)                       ; Q
101   (CAR&PUSH)
102   (GETVALUE 13)                       ; Q
104   (CDR&PUSH)
105   (CALL2 14)                          ; FACTQSNT
107   (UNBIND1)
108   (PUSH)
109   (LOAD&CONS&STORE 2)
111   (SKIP 1)
113   (LOAD&CDR&STORE 0)
115   L115
115   (LOAD&PUSH 0)
116   (CALLS1&JMPIFNOT 146 L94)           ; ENDP
119   (SKIP 1)
121   (LOAD&PUSH 0)
122   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
124   (SKIP 1)
126   (CONS&PUSH)
127   (CONST&PUSH 10)                     ; 1
128   (NIL&PUSH)
129   (CALL 3 15)                         ; SIMPLUS
132   (SKIP 2)
134   (UNBIND 3)
136   (SKIP&RET 2)


Disassembly of function #:|(DEFUN FACTPLUSCOMB (E) ...)-21|
(CONST 0) = FACTPLUSCOMB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTPLUSCOMB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTPLUSCOMB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTPLUSCOMB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTPLUSCOMB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTPLUSCOMB
8     (SKIP&RET 1)


Disassembly of function FACTPLUSCOMB
(CONST 0) = E
(CONST 1) = DONEL
(CONST 2) = INDL
(CONST 3) = FACTEXPAND
(CONST 4) = GETFACTORIAL
(CONST 5) = NPLUS
(CONST 6) = Q
(CONST 7) = FACTPLUSDEP
(CONST 8) = FACTPOWERSELECT
(CONST 9) = (MPLUS)
(CONST 10) = FACTPLUS2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Q E)
writes special variables : (INDL E)
87 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (NIL)
4     (BIND 1)                            ; DONEL
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; INDL
10    (NIL&PUSH)
11    (JMP L112)
14    L14
14    (NIL&PUSH)
15    (GETVALUE&PUSH 0)                   ; E
17    (CALL1&PUSH 5)                      ; NPLUS
19    (JMP L78)
21    L21
21    (CONST&PUSH 9)                      ; (MPLUS)
22    (NIL&PUSH)
23    (LOAD&PUSH 2)
24    (JMP L44)
26    L26
26    (LOAD&CAR&PUSH 0)
28    (LOAD 0)
29    (BIND 6)                            ; Q
31    (GETVALUE&PUSH 6)                   ; Q
33    (LOAD&PUSH 12)
34    (CALL2 10)                          ; FACTPLUS2
36    (UNBIND1)
37    (PUSH)
38    (LOAD&CONS&STORE 2)
40    (SKIP 1)
42    (LOAD&CDR&STORE 0)
44    L44
44    (LOAD&PUSH 0)
45    (CALLS1&JMPIFNOT 146 L26)           ; ENDP
48    (SKIP 1)
50    (LOAD&PUSH 0)
51    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
53    (SKIP 1)
55    (CONS)
56    (SETVALUE 0)                        ; E
58    (JMP L112)
60    L60
60    (LOAD&CAR&PUSH 0)
62    (LOAD 0)
63    (BIND 6)                            ; Q
65    (GETVALUE&PUSH 6)                   ; Q
67    (LOAD&PUSH 11)
68    (CALL2 7)                           ; FACTPLUSDEP
70    (UNBIND1)
71    (PUSH)
72    (LOAD&CONS&STORE 2)
74    (SKIP 1)
76    (LOAD&CDR&STORE 0)
78    L78
78    (LOAD&PUSH 0)
79    (CALLS1&JMPIFNOT 146 L60)           ; ENDP
82    (SKIP 1)
84    (LOAD&PUSH 0)
85    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
87    (SKIP 1)
89    (SETVALUE 2)                        ; INDL
91    (PUSH)
92    (GETVALUE&PUSH 0)                   ; E
94    (CALL1&PUSH 5)                      ; NPLUS
96    (LOAD&PUSH 6)
97    (CALL 3 8)                          ; FACTPOWERSELECT
100   (STORE 0)
101   (CDR)
102   (JMPIF L21)
105   (LOAD&CAR&PUSH 0)
107   (LOAD&PUSH 5)
108   (CALL2 10)                          ; FACTPLUS2
110   (SETVALUE 0)                        ; E
112   L112
112   (GETVALUE&PUSH 0)                   ; E
114   (CALL1 3)                           ; FACTEXPAND
116   (SETVALUE 0)                        ; E
118   (PUSH)
119   (CALL1 4)                           ; GETFACTORIAL
121   (STORE 4)
122   (JMPIF L14)
125   (GETVALUE 0)                        ; E
127   (SKIP 1)
129   (UNBIND1)
130   (SKIP 1)
132   (UNBIND 2)
134   (SKIP&RET 2)


Disassembly of function #:|(DEFUN NPLUS (E) ...)-22|
(CONST 0) = NPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NPLUS
8     (SKIP&RET 1)


Disassembly of function NPLUS
(CONST 0) = E
(CONST 1) = MPLUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (CAR)
6     (CAR&PUSH)
7     (JMPIFEQTO 1 L17)                   ; MPLUS
10    (GETVALUE&PUSH 0)                   ; E
12    (LIST 1)
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)
17    L17
17    (GETVALUE 0)                        ; E
19    (CDR)
20    (JMP L14)


Disassembly of function #:|(DEFUN FACTEXPAND (E) ...)-23|
(CONST 0) = FACTEXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTEXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTEXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTEXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTEXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTEXPAND
8     (SKIP&RET 1)


Disassembly of function FACTEXPAND
(CONST 0) = E
(CONST 1) = MPLUS
(CONST 2) = (MPLUS)
(CONST 3) = FACTEXPAND
(CONST 4) = 1
(CONST 5) = SIMPLUS
(CONST 6) = MFACTORIAL
(CONST 7) = FREE
(CONST 8) = $EXPAND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L27)
7     (GETVALUE 0)                        ; E
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 1 L31)                   ; MPLUS
14    (GETVALUE&PUSH 0)                   ; E
16    (CONST&PUSH 6)                      ; MFACTORIAL
17    (CALL2&JMPIF 7 L48)                 ; FREE
20    (GETVALUE&PUSH 0)                   ; E
22    (CALL1 8)                           ; $EXPAND
24    L24
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (GETVALUE 0)                        ; E
29    (JMP L24)
31    L31
31    (CONST&PUSH 2)                      ; (MPLUS)
32    (CONST&SYMBOL-FUNCTION&PUSH 3)      ; FACTEXPAND
34    (GETVALUE 0)                        ; E
36    (CDR&PUSH)
37    (CALLSR 0 22)                       ; MAPCAR
40    (CONS&PUSH)
41    (CONST&PUSH 4)                      ; 1
42    (NIL&PUSH)
43    (CALL 3 5)                          ; SIMPLUS
46    (JMP L24)
48    L48
48    (GETVALUE 0)                        ; E
50    (JMP L24)


Disassembly of function #:|(DEFUN GETFACTORIAL (E) ...)-24|
(CONST 0) = GETFACTORIAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETFACTORIAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETFACTORIAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETFACTORIAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETFACTORIAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETFACTORIAL
8     (SKIP&RET 1)


Disassembly of function GETFACTORIAL
(CONST 0) = E
(CONST 1) = (MPLUS MTIMES)
(CONST 2) = MEMQ
(CONST 3) = A
(CONST 4) = MEXPT
(CONST 5) = MFACTORIAL
(CONST 6) = DONEL
(CONST 7) = MEMALIKE
(CONST 8) = (MFACTORIAL)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DONEL E)
writes special variables : (DONEL E A)
75 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L33)
7     (GETVALUE 0)                        ; E
9     (CAR)
10    (CAR&PUSH)
11    (CONST&PUSH 1)                      ; (MPLUS MTIMES)
12    (CALL2&JMPIF 2 L40)                 ; MEMQ
15    (GETVALUE 0)                        ; E
17    (CAR)
18    (CAR&PUSH)
19    (JMPIFEQTO 4 L75)                   ; MEXPT
22    (GETVALUE 0)                        ; E
24    (CAR)
25    (CAR&PUSH)
26    (JMPIFEQTO 5 L84)                   ; MFACTORIAL
29    (NIL)
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (NIL)
34    (JMP L30)
36    L36
36    (UNBIND 2)
38    (JMP L30)
40    L40
40    (GETVALUE 0)                        ; E
42    (CDR)
43    (BIND 0)                            ; E
45    (NIL)
46    (BIND 3)                            ; A
48    (GETVALUE 0)                        ; E
50    (JMPIFNOT L70)
52    L52
52    (GETVALUE 0)                        ; E
54    (CAR&PUSH)
55    (JSR L0)
57    (SETVALUE 3)                        ; A
59    (JMPIF L36)
61    (GETVALUE 0)                        ; E
63    (CDR)
64    (SETVALUE 0)                        ; E
66    (GETVALUE 0)                        ; E
68    (JMPIF L52)
70    L70
70    (NIL)
71    (UNBIND 2)
73    (JMP L30)
75    L75
75    (GETVALUE 0)                        ; E
77    (CDR)
78    (CAR&PUSH)
79    (JSR L0)
82    (JMP L30)
84    L84
84    (GETVALUE 0)                        ; E
86    (CDR)
87    (CAR&PUSH)
88    (GETVALUE&PUSH 6)                   ; DONEL
90    (CALL2 7)                           ; MEMALIKE
92    (NOT)
93    (JMPIFNOT1 L30)
96    (CONST&PUSH 8)                      ; (MFACTORIAL)
97    (GETVALUE 0)                        ; E
99    (CDR)
100   (CAR&PUSH)
101   (GETVALUE 6)                        ; DONEL
103   (CONS)
104   (SETVALUE 6)                        ; DONEL
106   (CAR&PUSH)
107   (LIST 2)
109   (JMP L30)


Disassembly of function #:|(DEFUN FACTPLUSDEP (E FACT) ...)-25|
(CONST 0) = FACTPLUSDEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTPLUSDEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTPLUSDEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTPLUSDEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTPLUSDEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTPLUSDEP
8     (SKIP&RET 1)


Disassembly of function FACTPLUSDEP
(CONST 0) = E
(CONST 1) = ALIKE1
(CONST 2) = 1
(CONST 3) = MTIMES
(CONST 4) = L
(CONST 5) = MEXPT
(CONST 6) = (MTIMES)
(CONST 7) = SIMPTIMES
(CONST 8) = MPLUS
(CONST 9) = Q
(CONST 10) = SAME
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Q L E)
writes special variables : (L E)
110 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (LOAD&PUSH 5)
6     (CALL2&JMPIF 1 L40)                 ; ALIKE1
9     (GETVALUE 0)                        ; E
11    (JMPIFATOM L43)
13    (GETVALUE 0)                        ; E
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 3 L52)                   ; MTIMES
20    (GETVALUE 0)                        ; E
22    (CAR)
23    (CAR&PUSH)
24    (JMPIFEQTO 5 L94)                   ; MEXPT
28    (GETVALUE 0)                        ; E
30    (CAR)
31    (CAR&PUSH)
32    (JMPIFEQTO 8 L129)                  ; MPLUS
36    (NIL)
37    L37
37    (UNBIND1)
38    (SKIP&RET 3)
40    L40
40    (CONST 2)                           ; 1
41    (JMP L37)
43    L43
43    (NIL)
44    (JMP L37)
46    L46
46    (SKIP 1)
48    (UNBIND 2)
50    (JMP L37)
52    L52
52    (GETVALUE 0)                        ; E
54    (CDR)
55    (BIND 4)                            ; L
57    (NIL)
58    (BIND 0)                            ; E
60    (NIL&PUSH)
61    (GETVALUE 4)                        ; L
63    (JMPIFNOT L87)
65    L65
65    (GETVALUE 4)                        ; L
67    (CAR)
68    (SETVALUE 0)                        ; E
70    (PUSH)
71    (LOAD&PUSH 12)
72    (JSR L0)
75    (STORE 0)
76    (JMPIF L46)
78    (GETVALUE 4)                        ; L
80    (CDR)
81    (SETVALUE 4)                        ; L
83    (GETVALUE 4)                        ; L
85    (JMPIF L65)
87    L87
87    (NIL)
88    (SKIP 1)
90    (UNBIND 2)
92    (JMP L37)
94    L94
94    (GETVALUE 0)                        ; E
96    (CDR)
97    (CAR&PUSH)
98    (LOAD&PUSH 5)
99    (JSR&PUSH L0)
102   (LOAD 0)
103   (JMPIFNOT1 L124)
105   (CONST&PUSH 6)                      ; (MTIMES)
106   (LOAD&PUSH 1)
107   (GETVALUE 0)                        ; E
109   (CDR)
110   (CDR)
111   (CAR&PUSH)
112   (LIST&PUSH 3)
114   (CONST&PUSH 2)                      ; 1
115   (T&PUSH)
116   (CALL 3 7)                          ; SIMPTIMES
119   (SKIP 1)
121   (JMP L37)
124   L124
124   (SKIP 1)
126   (JMP L37)
129   L129
129   (NIL&PUSH)
130   (GETVALUE 0)                        ; E
132   (CDR&PUSH)
133   (JMP L154)
135   L135
135   (LOAD&CAR&PUSH 0)
137   (LOAD 0)
138   (BIND 9)                            ; Q
140   (GETVALUE&PUSH 9)                   ; Q
142   (LOAD&PUSH 11)
143   (JSR L0)
146   (UNBIND1)
147   (PUSH)
148   (LOAD&CONS&STORE 2)
150   (SKIP 1)
152   (LOAD&CDR&STORE 0)
154   L154
154   (LOAD&PUSH 0)
155   (CALLS1&JMPIFNOT 146 L135)          ; ENDP
158   (SKIP 1)
160   (LOAD&PUSH 0)
161   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
164   (CALL1 10)                          ; SAME
166   (JMP L37)


Disassembly of function #:|(DEFUN SAME (L) ...)-26|
(CONST 0) = SAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SAME
8     (SKIP&RET 1)


Disassembly of function SAME
(CONST 0) = L
(CONST 1) = ALIKE1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
25 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (CAR&PUSH)
6     (GETVALUE 0)                        ; L
8     (CDR&PUSH)
9     (NIL&PUSH)
10    (LOAD&JMPIFNOT 1 L26)
13    L13
13    (LOAD&CAR&STORE 1 0)
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 1)
18    (CALL2&JMPIFNOT 1 L32)              ; ALIKE1
21    (LOAD&CDR&STORE 1)
23    (LOAD&JMPIF 1 L13)
26    L26
26    (LOAD 2)
27    (SKIP 3)
29    L29
29    (UNBIND1)
30    (SKIP&RET 2)
32    L32
32    (NIL)
33    (SKIP 3)
35    (JMP L29)


Disassembly of function #:|(DEFUN FACTPOWERSELECT (INDL E FACT) ...)-27|
(CONST 0) = FACTPOWERSELECT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTPOWERSELECT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTPOWERSELECT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTPOWERSELECT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTPOWERSELECT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTPOWERSELECT
8     (SKIP&RET 1)


Disassembly of function FACTPOWERSELECT
(CONST 0) = INDL
(CONST 1) = E
(CONST 2) = L
(CONST 3) = J
(CONST 4) = EXP
(CONST 5) = (MEXPT)
(CONST 6) = $DIVIDE
(CONST 7) = 0
(CONST 8) = ASSOLIKE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L EXP J E INDL)
writes special variables : (J L EXP)
84 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; INDL
3     (LOAD 5)
4     (BIND 1)                            ; E
6     (NIL)
7     (BIND 2)                            ; L
9     (NIL&PUSH)
10    (GETVALUE&PUSH 0)                   ; INDL
12    (GETVALUE 1)                        ; E
14    (BIND 3)                            ; J
16    (NIL&PUSH)
17    (NIL)
18    (BIND 4)                            ; EXP
20    (LOAD&JMPIFNOT 7 L119)
24    L24
24    (LOAD&CAR&STORE 7 3)
27    (JMPIFNOT L75)
29    (GETVALUE 3)                        ; J
31    (CAR&PUSH)
32    (CONST&PUSH 5)                      ; (MEXPT)
33    (LOAD&PUSH 21)
34    (LOAD&PUSH 6)
35    (LIST&PUSH 3)
37    (CALL2 6)                           ; $DIVIDE
39    (SETVALUE 4)                        ; EXP
41    (CDR)
42    (CAR&PUSH)
43    (JMPIFNOTEQTO 7 L55)                ; 0
46    (NIL&STORE 3)
48    (GETVALUE 4)                        ; EXP
50    (CDR)
51    L51
51    (CDR)
52    (CAR)
53    (JMP L78)
55    L55
55    (GETVALUE 4)                        ; EXP
57    (JMP L51)
59    L59
59    (LOAD&PUSH 3)
60    (GETVALUE&PUSH 4)                   ; EXP
62    (LIST&PUSH 2)
64    (LIST 1)
66    (SETVALUE 2)                        ; L
68    (JMP L106)
70    L70
70    (PUSH)
71    (GETVALUE 4)                        ; EXP
73    (JMP L100)
75    L75
75    (GETVALUE 3)                        ; J
77    (CAR)
78    L78
78    (SETVALUE 4)                        ; EXP
80    (GETVALUE 2)                        ; L
82    (JMPIFNOT L59)
84    (LOAD&PUSH 3)
85    (GETVALUE&PUSH 2)                   ; L
87    (CALL2 8)                           ; ASSOLIKE
89    (STORE 8)
91    (JMPIF L70)
93    (GETVALUE&PUSH 2)                   ; L
95    (LOAD&PUSH 4)
96    (GETVALUE&PUSH 4)                   ; EXP
98    (LIST 2)
100   L100
100   (PUSH)
101   (LIST&PUSH 1)
103   (CALLSR 2 35)                       ; NCONC
106   L106
106   (LOAD&CDR&PUSH 7)
108   (GETVALUE 3)                        ; J
110   (CDR)
111   (SETVALUE 3)                        ; J
113   (POP&STORE 7)
115   (LOAD&JMPIF 7 L24)
119   L119
119   (GETVALUE 2)                        ; L
121   (UNBIND1)
122   (SKIP 1)
124   (UNBIND1)
125   (SKIP 2)
127   (UNBIND 3)
129   (SKIP&RET 4)


Disassembly of function #:|(DEFUN FACTPLUS2 (L FACT) ...)-28|
(CONST 0) = FACTPLUS2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTPLUS2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTPLUS2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTPLUS2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTPLUS2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTPLUS2
8     (SKIP&RET 1)


Disassembly of function FACTPLUS2
(CONST 0) = L
(CONST 1) = (MPLUS)
(CONST 2) = FACTPLUS0
(CONST 3) = (MPLUS)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (CAR&PUSH)
6     (LOAD&JMPIF 0 L26)
9     (GETVALUE&PUSH 0)                   ; L
11    (CONST&PUSH 3)                      ; (MPLUS)
12    (CALLS1 168)                        ; RPLACA
14    (SKIP 1)
16    L16
16    (UNBIND1)
17    (SKIP&RET 3)
19    L19
19    (GETVALUE&PUSH 0)                   ; L
21    (CONST&PUSH 1)                      ; (MPLUS)
22    (CALLS1 168)                        ; RPLACA
24    (JMP L36)
26    L26
26    (GETVALUE 0)                        ; L
28    (CDR)
29    (CDR)
30    (JMPIF L19)
32    (GETVALUE 0)                        ; L
34    (CDR)
35    (CAR)
36    L36
36    (PUSH)
37    (LOAD&PUSH 1)
38    (LOAD 7)
39    (CDR)
40    (CAR&PUSH)
41    (CALL 3 2)                          ; FACTPLUS0
44    (SKIP 1)
46    (JMP L16)


Disassembly of function #:|(DEFUN FACTPLUS0 (R E FACT) ...)-29|
(CONST 0) = FACTPLUS0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTPLUS0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTPLUS0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTPLUS0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTPLUS0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTPLUS0
8     (SKIP&RET 1)


Disassembly of function FACTPLUS0
(CONST 0) = R
(CONST 1) = E
(CONST 2) = -1
(CONST 3) = J
(CONST 4) = EXP
(CONST 5) = (MEXPT)
(CONST 6) = 1
(CONST 7) = SIMPEXPT
(CONST 8) = (MEXPT)
(CONST 9) = DYPHEYED
(CONST 10) = $SUMSPLITFACT
(CONST 11) = 0
(CONST 12) = (MPLUS)
(CONST 13) = FACTPLUS1
(CONST 14) = Q
(CONST 15) = (MTIMES)
(CONST 16) = (MEXPT)
(CONST 17) = (MFACTORIAL)
(CONST 18) = (MPLUS)
(CONST 19) = SIMPLUS
(CONST 20) = (MPLUS)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Q J EXP $SUMSPLITFACT E R)
writes special variables : (J EXP R)
105 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; R
3     (LOAD 5)
4     (BIND 1)                            ; E
6     (CONST&PUSH 2)                      ; -1
7     (LOAD&PUSH 8)
8     (CONST 2)                           ; -1
9     (BIND 3)                            ; J
11    (NIL)
12    (BIND 4)                            ; EXP
14    (PUSH-NIL 2)
16    L16
16    (CONST&PUSH 5)                      ; (MEXPT)
17    (LOAD&PUSH 9)
18    (CONST&PUSH 2)                      ; -1
19    (LIST&PUSH 3)
21    (CONST&PUSH 6)                      ; 1
22    (NIL&PUSH)
23    (CALL 3 7)                          ; SIMPEXPT
26    (STORE 1)
27    (GETVALUE&PUSH 0)                   ; R
29    (CONST&PUSH 8)                      ; (MEXPT)
30    (LOAD&PUSH 3)
31    (GETVALUE&PUSH 1)                   ; E
33    (LIST&PUSH 3)
35    (CONST&PUSH 6)                      ; 1
36    (NIL&PUSH)
37    (CALL&PUSH 3 7)                     ; SIMPEXPT
40    (CALL2 9)                           ; DYPHEYED
42    (STORE 0)
43    (GETVALUE 10)                       ; $SUMSPLITFACT
45    (JMPIF L53)
47    (LOAD 0)
48    (CDR)
49    (CAR&PUSH)
50    (JMPIFNOTEQTO 11 L82)               ; 0
53    L53
53    (LOAD&CAR&PUSH 0)
55    (JMPIFEQTO 11 L82)                  ; 0
58    (LOAD 0)
59    (CAR)
60    (SETVALUE 0)                        ; R
62    (LOAD 0)
63    (CDR)
64    (CAR&PUSH)
65    (GETVALUE 4)                        ; EXP
67    (CONS)
68    (SETVALUE 4)                        ; EXP
70    (CONST&PUSH 20)                     ; (MPLUS)
71    (LOAD&PUSH 18)
72    (LOAD&PUSH 11)
73    (LIST 3)
75    (STORE 8)
77    (LOAD&DEC&STORE 9)
79    (JMP L16)
82    L82
82    (CONST&PUSH 12)                     ; (MPLUS)
83    (NIL&PUSH)
84    (GETVALUE&PUSH 0)                   ; R
86    (GETVALUE 4)                        ; EXP
88    (CONS&PUSH)
89    (GETVALUE&PUSH 1)                   ; E
91    (LOAD&PUSH 12)
92    (CALL&PUSH 3 13)                    ; FACTPLUS1
95    (JMP L135)
97    L97
97    (LOAD&CAR&PUSH 0)
99    (LOAD 0)
100   (BIND 14)                           ; Q
102   (GETVALUE&PUSH 3)                   ; J
104   (CALLS2 150)                        ; 1+
106   (SETVALUE 3)                        ; J
108   (CONST&PUSH 15)                     ; (MTIMES)
109   (GETVALUE&PUSH 14)                  ; Q
111   (CONST&PUSH 16)                     ; (MEXPT)
112   (CONST&PUSH 17)                     ; (MFACTORIAL)
113   (CONST&PUSH 18)                     ; (MPLUS)
114   (LOAD&PUSH 20)
115   (GETVALUE&PUSH 3)                   ; J
117   (LIST&PUSH 3)
119   (LIST&PUSH 2)
121   (GETVALUE&PUSH 1)                   ; E
123   (LIST&PUSH 3)
125   (LIST 3)
127   (UNBIND1)
128   (PUSH)
129   (LOAD&CONS&STORE 2)
131   (SKIP 1)
133   (LOAD&CDR&STORE 0)
135   L135
135   (LOAD&PUSH 0)
136   (CALLS1&JMPIFNOT 146 L97)           ; ENDP
139   (SKIP 1)
141   (LOAD&PUSH 0)
142   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
144   (SKIP 1)
146   (CONS&PUSH)
147   (CONST&PUSH 6)                      ; 1
148   (NIL&PUSH)
149   (CALL 3 19)                         ; SIMPLUS
152   (SKIP 2)
154   (UNBIND 2)
156   (SKIP 2)
158   (UNBIND 2)
160   (SKIP&RET 4)


Disassembly of function #:|(DEFUN FACTPLUS1 (EXP E FACT) ...)-30|
(CONST 0) = FACTPLUS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTPLUS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTPLUS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTPLUS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTPLUS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTPLUS1
8     (SKIP&RET 1)


Disassembly of function FACTPLUS1
(CONST 0) = EXP
(CONST 1) = E
(CONST 2) = L
(CONST 3) = 2
(CONST 4) = (MPLUS)
(CONST 5) = 1
(CONST 6) = (MEXPT)
(CONST 7) = DYPHEYED
(CONST 8) = $SUMSPLITFACT
(CONST 9) = 0
(CONST 10) = (MPLUS)
(CONST 11) = SIMPLUS
(CONST 12) = DONEL
(CONST 13) = (MPLUS)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DONEL $SUMSPLITFACT E L EXP)
writes special variables : (L DONEL)
86 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; E
6     (GETVALUE 0)                        ; EXP
8     (BIND 2)                            ; L
10    (CONST&PUSH 3)                      ; 2
11    (CONST&PUSH 4)                      ; (MPLUS)
12    (LOAD&PUSH 12)
13    (CONST&PUSH 5)                      ; 1
14    (LIST&PUSH 3)
16    (NIL&PUSH)
17    (GETVALUE 2)                        ; L
19    (JMPIFNOT L104)
22    L22
22    (GETVALUE 2)                        ; L
24    (CAR&PUSH)
25    (CONST&PUSH 6)                      ; (MEXPT)
26    (LOAD&PUSH 3)
27    (GETVALUE&PUSH 1)                   ; E
29    (LIST&PUSH 3)
31    (CALL2 7)                           ; DYPHEYED
33    (STORE 0)
34    (GETVALUE 8)                        ; $SUMSPLITFACT
36    (JMPIF L44)
38    (LOAD 0)
39    (CDR)
40    (CAR&PUSH)
41    (JMPIFNOTEQTO 9 L86)                ; 0
44    L44
44    (LOAD&CAR&PUSH 0)
46    (JMPIFEQTO 9 L86)                   ; 0
49    (GETVALUE&PUSH 2)                   ; L
51    (LOAD 1)
52    (CDR)
53    (CAR&PUSH)
54    (CALLS1&JMPIFNOT 168 L86)           ; RPLACA
57    (GETVALUE&PUSH 2)                   ; L
59    (GETVALUE 2)                        ; L
61    (CDR)
62    (CAR)
63    (JMPIF L112)
65    (LOAD&PUSH 2)
66    (CONST&PUSH 5)                      ; 1
67    (NIL&PUSH)
68    (CALL&PUSH 3 11)                    ; SIMPLUS
71    (GETVALUE 12)                       ; DONEL
73    (CONS)
74    (SETVALUE 12)                       ; DONEL
76    (LOAD 1)
77    (CAR)
78    L78
78    (PUSH)
79    (GETVALUE 2)                        ; L
81    (CDR)
82    (CDR)
83    (CONS&PUSH)
84    (CALLS1 170)                        ; RPLACD
86    L86
86    (GETVALUE 2)                        ; L
88    (CDR)
89    (SETVALUE 2)                        ; L
91    (CONST&PUSH 13)                     ; (MPLUS)
92    (LOAD&PUSH 14)
93    (LOAD&PUSH 4)
94    (LIST 3)
96    (STORE 1)
97    (LOAD&INC&STORE 2)
99    (GETVALUE 2)                        ; L
101   (JMPIF L22)
104   L104
104   (GETVALUE 0)                        ; EXP
106   (SKIP 3)
108   (UNBIND 3)
110   (SKIP&RET 4)
112   L112
112   (CONST&PUSH 10)                     ; (MPLUS)
113   (LOAD&CAR&PUSH 2)
115   (GETVALUE 2)                        ; L
117   (CDR)
118   (CAR&PUSH)
119   (LIST&PUSH 3)
121   (CONST&PUSH 5)                      ; 1
122   (NIL&PUSH)
123   (CALL 3 11)                         ; SIMPLUS
126   (JMP L78)


Disassembly of function #:|(DEFUN DYPHEYED (R F) ...)-31|
(CONST 0) = DYPHEYED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DYPHEYED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DYPHEYED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DYPHEYED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DYPHEYED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DYPHEYED
8     (SKIP&RET 1)


Disassembly of function DYPHEYED
(CONST 0) = R
(CONST 1) = F
(CONST 2) = NEWVAR
(CONST 3) = RATF
(CONST 4) = PDEGREEVECTOR
(CONST 5) = K
(CONST 6) = J
(CONST 7) = $DIVIDE
(CONST 8) = KANSEL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (J K F R)
writes special variables : (J K)
69 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; R
3     (LOAD 4)
4     (BIND 1)                            ; F
6     (PUSH-NIL 3)
8     (GETVALUE&PUSH 0)                   ; R
10    (CALL1 2)                           ; NEWVAR
12    (GETVALUE&PUSH 1)                   ; F
14    (CALL1 3)                           ; RATF
16    (STORE 2)
17    (CDR)
18    (CAR&PUSH)
19    (CALL1 4)                           ; PDEGREEVECTOR
21    (STORE 1)
22    (LOAD 2)
23    (CDR)
24    (CDR&PUSH)
25    (CALL1 4)                           ; PDEGREEVECTOR
27    (STORE 0)
28    (LOAD&PUSH 1)
29    (LOAD&PUSH 1)
30    (LOAD 4)
31    (CAR)
32    (CDR)
33    (CDR)
34    (CAR)
35    (BIND 5)                            ; K
37    (LOAD 3)
38    (BIND 6)                            ; J
40    (GETVALUE 5)                        ; K
42    (JMPIFNOT L72)
44    L44
44    (LOAD&CAR&PUSH 7)
46    (GETVALUE 6)                        ; J
48    (CAR&PUSH)
49    (CALLSR&JMPIF 1 48 L91)             ; >
53    (LOAD&CDR&PUSH 7)
55    (GETVALUE 6)                        ; J
57    (CDR&PUSH)
58    (GETVALUE 5)                        ; K
60    (CDR)
61    (SETVALUE 5)                        ; K
63    (POP)
64    (SETVALUE 6)                        ; J
66    (POP&STORE 7)
68    (GETVALUE 5)                        ; K
70    (JMPIF L44)
72    L72
72    (GETVALUE&PUSH 0)                   ; R
74    (LOAD 11)
75    (CDR)
76    (CAR&PUSH)
77    (LOAD 12)
78    (CDR)
79    (CDR&PUSH)
80    (CALL 3 8)                          ; KANSEL
83    L83
83    (UNBIND 2)
85    (SKIP 5)
87    (UNBIND 2)
89    (SKIP&RET 3)
91    L91
91    (GETVALUE&PUSH 0)                   ; R
93    (GETVALUE&PUSH 1)                   ; F
95    (GETVALUE 5)                        ; K
97    (CAR&PUSH)
98    (CALL 3 7)                          ; $DIVIDE
101   (CDR)
102   (JMP L83)


Disassembly of function #:|(DEFUN KANSEL (R N D) ...)-32|
(CONST 0) = KANSEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KANSEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KANSEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KANSEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KANSEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KANSEL
8     (SKIP&RET 1)


Disassembly of function KANSEL
(CONST 0) = R
(CONST 1) = N
(CONST 2) = D
(CONST 3) = RATF
(CONST 4) = TESTDIVIDE
(CONST 5) = RDIS
(CONST 6) = (0)
(CONST 7) = 0
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D N R)
39 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; R
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; D
9     (PUSH-NIL 3)
11    (GETVALUE&PUSH 0)                   ; R
13    (CALL1 3)                           ; RATF
15    (STORE 2)
16    (CDR)
17    (CAR&PUSH)
18    (GETVALUE&PUSH 1)                   ; N
20    (CALL2 4)                           ; TESTDIVIDE
22    (STORE 1)
23    (LOAD 2)
24    (CDR)
25    (CDR&PUSH)
26    (GETVALUE&PUSH 2)                   ; D
28    (CALL2 4)                           ; TESTDIVIDE
30    (STORE 0)
31    (LOAD&JMPIFNOT 1 L37)
34    (LOAD&JMPIF 0 L49)
37    L37
37    (CONST&PUSH 7)                      ; 0
38    (GETVALUE&PUSH 0)                   ; R
40    (LIST 1)
42    L42
42    (CONS)
43    (SKIP 3)
45    (UNBIND 3)
47    (SKIP&RET 4)
49    L49
49    (LOAD&PUSH 1)
50    (LOAD 1)
51    (CONS&PUSH)
52    (CALL1&PUSH 5)                      ; RDIS
54    (CONST 6)                           ; (0)
55    (JMP L42)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE EULBRN))-33|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(COMMENT EULER AND ...)-34|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *BN* #) ...)-35-1|
(CONST 0) = (SPECIAL *BN*)
(CONST 1) = *BN*
(CONST 2) = -1
(CONST 3) = 1
(CONST 4) = 5
(CONST 5) = -691
(CONST 6) = 7
(CONST 7) = -3617
(CONST 8) = 43867
(CONST 9) = -174611
(CONST 10) = 854513
(CONST 11) = -236364091
(CONST 12) = 8553103
(CONST 13) = -23749461029
(CONST 14) = 8615841276005
(CONST 15) = -7709321041217
(CONST 16) = 2577687858367
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BN*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BN*
4     (CALLS1&JMPIF 79 L30)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BN*
8     (NIL&PUSH)
9     (CONST&PUSH 2)                      ; -1
10    (CONST&PUSH 3)                      ; 1
11    (CONST&PUSH 2)                      ; -1
12    (CONST&PUSH 4)                      ; 5
13    (CONST&PUSH 5)                      ; -691
14    (CONST&PUSH 6)                      ; 7
15    (CONST&PUSH 7)                      ; -3617
16    (CONST&PUSH 8)                      ; 43867
17    (CONST&PUSH 9)                      ; -174611
18    (CONST&PUSH 10)                     ; 854513
19    (CONST&PUSH 11)                     ; -236364091
20    (CONST&PUSH 12)                     ; 8553103
21    (CONST&PUSH 13)                     ; -23749461029
22    (CONST&PUSH 14)                     ; 8615841276005
23    (CONST&PUSH 15)                     ; -7709321041217
24    (CONST&PUSH 16)                     ; 2577687858367
25    (CALLSR&PUSH 17 0)                  ; VECTOR
28    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
30    L30
30    (VALUES0)
31    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *BN* #) ...)-35-2|
(CONST 0) = (SPECIAL *BD*)
(CONST 1) = *BD*
(CONST 2) = 30
(CONST 3) = 42
(CONST 4) = 66
(CONST 5) = 2730
(CONST 6) = 6
(CONST 7) = 510
(CONST 8) = 798
(CONST 9) = 330
(CONST 10) = 138
(CONST 11) = 870
(CONST 12) = 14322
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BD*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BD*
4     (CALLS1&JMPIF 79 L30)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BD*
8     (NIL&PUSH)
9     (CONST&PUSH 2)                      ; 30
10    (CONST&PUSH 3)                      ; 42
11    (CONST&PUSH 2)                      ; 30
12    (CONST&PUSH 4)                      ; 66
13    (CONST&PUSH 5)                      ; 2730
14    (CONST&PUSH 6)                      ; 6
15    (CONST&PUSH 7)                      ; 510
16    (CONST&PUSH 8)                      ; 798
17    (CONST&PUSH 9)                      ; 330
18    (CONST&PUSH 10)                     ; 138
19    (CONST&PUSH 5)                      ; 2730
20    (CONST&PUSH 6)                      ; 6
21    (CONST&PUSH 11)                     ; 870
22    (CONST&PUSH 12)                     ; 14322
23    (CONST&PUSH 7)                      ; 510
24    (CONST&PUSH 6)                      ; 6
25    (CALLSR&PUSH 17 0)                  ; VECTOR
28    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
30    L30
30    (VALUES0)
31    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *BN* #) ...)-35-3|
(CONST 0) = (SPECIAL *EU*)
(CONST 1) = *EU*
(CONST 2) = -1
(CONST 3) = 5
(CONST 4) = -61
(CONST 5) = 1385
(CONST 6) = -50521
(CONST 7) = 2702765
(CONST 8) = -199360981
(CONST 9) = 19391512145
(CONST 10) = -2404879675441
(CONST 11) = 370371188237525
(CONST 12) = -69348874393137901
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *EU*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *EU*
4     (CALLS1&JMPIF 79 L24)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *EU*
8     (CONST&PUSH 2)                      ; -1
9     (CONST&PUSH 3)                      ; 5
10    (CONST&PUSH 4)                      ; -61
11    (CONST&PUSH 5)                      ; 1385
12    (CONST&PUSH 6)                      ; -50521
13    (CONST&PUSH 7)                      ; 2702765
14    (CONST&PUSH 8)                      ; -199360981
15    (CONST&PUSH 9)                      ; 19391512145
16    (CONST&PUSH 10)                     ; -2404879675441
17    (CONST&PUSH 11)                     ; 370371188237525
18    (CONST&PUSH 12)                     ; -69348874393137901
19    (CALLSR&PUSH 11 0)                  ; VECTOR
22    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
24    L24
24    (CONST 1)                           ; *EU*
25    (SKIP&RET 1)


Disassembly of function #:|(PUTPROP '*EU* 11 ...)-36|
(CONST 0) = *EU*
(CONST 1) = 11
(CONST 2) = LIM
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; *EU*
1     (CONST&PUSH 1)                      ; 11
2     (CONST&PUSH 2)                      ; LIM
3     (CALL 3 3)                          ; PUTPROP
6     (SKIP&RET 1)


Disassembly of function #:|(PUTPROP 'BERN 16 ...)-37|
(CONST 0) = BERN
(CONST 1) = 16
(CONST 2) = LIM
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; BERN
1     (CONST&PUSH 1)                      ; 16
2     (CONST&PUSH 2)                      ; LIM
3     (CALL 3 3)                          ; PUTPROP
6     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $EULER (S) ...)-38|
(CONST 0) = $EULER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EULER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EULER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EULER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EULER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EULER
8     (SKIP&RET 1)


Disassembly of function $EULER
(CONST 0) = S
(CONST 1) = 0
(CONST 2) = $FLOAT
(CONST 3) = FIXNUMP
(CONST 4) = ($EULER)
(CONST 5) = 1
(CONST 6) = $ZEROBERN
(CONST 7) = 2
(CONST 8) = QUOT
(CONST 9) = *EU*
(CONST 10) = LIM
(CONST 11) = %$/#&
(CONST 12) = EULER
(CONST 13) = *REARRAY
(CONST 14) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*EU* $ZEROBERN S)
writes special variable : (S)
99 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; S
3     (CONST&PUSH 1)                      ; 0
4     (NIL)
5     (BIND 2)                            ; $FLOAT
7     (GETVALUE&PUSH 0)                   ; S
9     (CALL1&JMPIFNOT 3 L56)              ; FIXNUMP
12    (GETVALUE&PUSH 0)                   ; S
14    (CONST&PUSH 1)                      ; 0
15    (CALLSR&JMPIF 1 47 L56)             ; <
19    (GETVALUE 0)                        ; S
21    (STORE 3)
22    (PUSH)
23    (CONST&PUSH 1)                      ; 0
24    (CALLSR&JMPIF 1 45 L64)             ; =
28    (GETVALUE 6)                        ; $ZEROBERN
30    (JMPIF L86)
32    (LOAD&PUSH 3)
33    (CONST&PUSH 9)                      ; *EU*
34    (CONST&PUSH 10)                     ; LIM
35    (PUSH-UNBOUND 1)
37    (CALLS2&PUSH 132)                   ; GET
39    (CALLSR&JMPIF 1 48 L125)            ; >
44    (GETVALUE&PUSH 9)                   ; *EU*
46    (LOAD 4)
47    L47
47    (PUSH)
48    (CALLS2&PUSH 151)                   ; 1-
50    (CALLSR 1 1)                        ; AREF
53    (JMP L145)
56    L56
56    (CONST&PUSH 4)                      ; ($EULER)
57    (GETVALUE&PUSH 0)                   ; S
59    (LIST 2)
61    (JMP L145)
64    L64
64    (CONST 5)                           ; 1
65    (JMP L145)
68    L68
68    (CONST 1)                           ; 0
69    (JMP L145)
72    L72
72    (GETVALUE&PUSH 9)                   ; *EU*
74    (LOAD&PUSH 4)
75    (CONST&PUSH 7)                      ; 2
76    (CALL2 8)                           ; QUOT
78    (JMP L47)
80    L80
80    (LOAD 3)
81    (JMP L139)
83    L83
83    (LOAD 3)
84    (JMP L139)
86    L86
86    (LOAD&PUSH 3)
87    (CALLS2&JMPIF 148 L68)              ; ODDP
90    (LOAD&PUSH 3)
91    (CONST&PUSH 7)                      ; 2
92    (CALL2&PUSH 8)                      ; QUOT
94    (CONST&PUSH 9)                      ; *EU*
95    (CONST&PUSH 10)                     ; LIM
96    (PUSH-UNBOUND 1)
98    (CALLS2&PUSH 132)                   ; GET
100   (CALLSR&JMPIFNOT 1 48 L72)          ; >
104   (GETVALUE&PUSH 6)                   ; $ZEROBERN
106   (JMPIFEQTO 11 L80)                  ; %$/#&
109   (CONST&PUSH 9)                      ; *EU*
110   (T&PUSH)
111   (LOAD&PUSH 5)
112   (CONST&PUSH 7)                      ; 2
113   (CALL2&PUSH 8)                      ; QUOT
115   (CALLS2&PUSH 150)                   ; 1+
117   (CALL 3 13)                         ; *REARRAY
120   (JMPIF L83)
122   (NIL)
123   (JMP L145)
125   L125
125   (CONST&PUSH 9)                      ; *EU*
126   (T&PUSH)
127   (LOAD&INC&PUSH 5)
129   (CALL 3 13)                         ; *REARRAY
132   (JMPIFNOT L144)
134   (CONST&PUSH 7)                      ; 2
135   (LOAD&PUSH 4)
136   (CALLSR 2 55)                       ; *
139   L139
139   (PUSH)
140   (CALL1 12)                          ; EULER
142   (JMP L145)
144   L144
144   (NIL)
145   L145
145   (UNBIND1)
146   (SKIP 1)
148   (SETVALUE 0)                        ; S
150   (PUSH)
151   (CALL1 14)                          ; SIMPLIFY
153   (UNBIND1)
154   (SKIP&RET 2)


Disassembly of function #:|(DEFUN EULER (%A*) ...)-39|
(CONST 0) = EULER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EULER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EULER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EULER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EULER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EULER
8     (SKIP&RET 1)


Disassembly of function EULER
(CONST 0) = E
(CONST 1) = $ZEROBERN
(CONST 2) = *A*
(CONST 3) = 1
(CONST 4) = 0
(CONST 5) = %$/#&
(CONST 6) = *EU*
(CONST 7) = 2
(CONST 8) = QUOT
(CONST 9) = LIM
(CONST 10) = PUTPROP
(CONST 11) = NXTBINCOEF
(CONST 12) = $EULER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*EU* E)
writes special variables : (*A* $ZEROBERN E)
70 byte-code instructions:
0     (PUSH-NIL 2)
2     (NIL)
3     (BIND 0)                            ; E
5     (NIL&PUSH)
6     (NIL)
7     (BIND 1)                            ; $ZEROBERN
9     (NIL)
10    (BIND 2)                            ; *A*
12    (CONST 3)                           ; 1
13    (STORE 11)
15    (LOAD 13)
16    (STORE 10)
18    (NIL&STORE 6)
20    (CONST 4)                           ; 0
21    (SETVALUE 0)                        ; E
23    (CONST 5)                           ; %$/#&
24    (SETVALUE 1)                        ; $ZEROBERN
26    (LOAD&PUSH 13)
27    (CALLS2 150)                        ; 1+
29    (SETVALUE 2)                        ; *A*
31    (JMP L66)
33    L33
33    (LOAD&PUSH 13)
34    (LOAD&PUSH 11)
35    (CALLSR&PUSH 1 54)                  ; -
38    (CALLS2&PUSH 150)                   ; 1+
40    (LOAD&PUSH 12)
41    (CALL2 11)                          ; NXTBINCOEF
43    (STORE 11)
45    (LOAD&DEC&STORE 10)
47    (LOAD 6)
48    (NOT)
49    (STORE 6)
50    (JMPIF L66)
52    (GETVALUE&PUSH 0)                   ; E
54    (LOAD&PUSH 12)
55    (LOAD&PUSH 12)
56    (CALL1&PUSH 12)                     ; $EULER
58    (CALLSR&PUSH 2 55)                  ; *
61    (CALLSR 2 53)                       ; +
64    (SETVALUE 0)                        ; E
66    L66
66    (LOAD&PUSH 10)
67    (CONST&PUSH 4)                      ; 0
68    (CALLSR&JMPIFNOT 1 45 L33)          ; =
72    (GETVALUE&PUSH 0)                   ; E
74    (CALLSR 0 54)                       ; -
77    (SETVALUE 0)                        ; E
79    (GETVALUE&PUSH 6)                   ; *EU*
81    (LOAD&PUSH 14)
82    (CONST&PUSH 7)                      ; 2
83    (CALL2&PUSH 8)                      ; QUOT
85    (CALLS2&PUSH 151)                   ; 1-
87    (GETVALUE&PUSH 0)                   ; E
89    (LOAD&PUSH 2)
90    (LOAD&PUSH 2)
91    (LOAD&PUSH 2)
92    (CALLSR 1 2)                        ; SYSTEM::STORE
95    (SKIP 3)
97    (CONST&PUSH 6)                      ; *EU*
98    (LOAD&PUSH 14)
99    (CONST&PUSH 7)                      ; 2
100   (CALL2&PUSH 8)                      ; QUOT
102   (CONST&PUSH 9)                      ; LIM
103   (CALL 3 10)                         ; PUTPROP
106   (GETVALUE 0)                        ; E
108   (UNBIND 2)
110   (SKIP 1)
112   (UNBIND1)
113   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMPEULER (X VESTIGIAL Z) ...)-40|
(CONST 0) = SIMPEULER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPEULER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPEULER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPEULER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPEULER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPEULER
8     (SKIP&RET 1)


Disassembly of function SIMPEULER
(CONST 0) = X
(CONST 1) = Z
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = U
(CONST 5) = FIXNUMP
(CONST 6) = 0
(CONST 7) = $EULER
(CONST 8) = ($EULER)
(CONST 9) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (U Z X)
32 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (GETVALUE&PUSH 1)                   ; Z
16    (CALL2 3)                           ; SIMPCHECK
18    (BIND 4)                            ; U
20    (GETVALUE&PUSH 4)                   ; U
22    (CALL1&JMPIFNOT 5 L32)              ; FIXNUMP
25    (GETVALUE&PUSH 4)                   ; U
27    (CONST&PUSH 6)                      ; 0
28    (CALLSR&JMPIFNOT 1 47 L46)          ; <
32    L32
32    (CONST&PUSH 8)                      ; ($EULER)
33    (GETVALUE&PUSH 4)                   ; U
35    (LIST&PUSH 2)
37    (GETVALUE&PUSH 0)                   ; X
39    (CALL2 9)                           ; EQTEST
41    (UNBIND1)
42    L42
42    (UNBIND 2)
44    (SKIP&RET 4)
46    L46
46    (GETVALUE&PUSH 4)                   ; U
48    (CALL1 7)                           ; $EULER
50    (UNBIND1)
51    (JMP L42)


Disassembly of function #:|(DEFMFUN $BERN (S) ...)-41|
(CONST 0) = $BERN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BERN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BERN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BERN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BERN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BERN
8     (SKIP&RET 1)


Disassembly of function $BERN
(CONST 0) = S
(CONST 1) = 0
(CONST 2) = $FLOAT
(CONST 3) = FIXNUMP
(CONST 4) = ($BERN)
(CONST 5) = 1
(CONST 6) = ((RAT) -1 2)
(CONST 7) = 2
(CONST 8) = ((RAT) 1 6)
(CONST 9) = $ZEROBERN
(CONST 10) = QUOT
(CONST 11) = BERN
(CONST 12) = LIM
(CONST 13) = (RAT)
(CONST 14) = *BN*
(CONST 15) = *BD*
(CONST 16) = $/#&
(CONST 17) = *REARRAY
(CONST 18) = (RAT)
(CONST 19) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*BD* *BN* $ZEROBERN S)
writes special variable : (S)
116 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; S
3     (CONST&PUSH 1)                      ; 0
4     (NIL)
5     (BIND 2)                            ; $FLOAT
7     (GETVALUE&PUSH 0)                   ; S
9     (CALL1&JMPIFNOT 3 L77)              ; FIXNUMP
13    (GETVALUE&PUSH 0)                   ; S
15    (CONST&PUSH 1)                      ; 0
16    (CALLSR&JMPIF 1 47 L77)             ; <
20    (GETVALUE 0)                        ; S
22    (STORE 3)
23    (PUSH)
24    (CONST&PUSH 1)                      ; 0
25    (CALLSR&JMPIF 1 45 L85)             ; =
29    (LOAD&PUSH 3)
30    (CONST&PUSH 5)                      ; 1
31    (CALLSR&JMPIF 1 45 L89)             ; =
35    (LOAD&PUSH 3)
36    (CONST&PUSH 7)                      ; 2
37    (CALLSR&JMPIF 1 45 L93)             ; =
41    (GETVALUE 9)                        ; $ZEROBERN
43    (JMPIF L110)
46    (LOAD&PUSH 3)
47    (CONST&PUSH 11)                     ; BERN
48    (CONST&PUSH 12)                     ; LIM
49    (PUSH-UNBOUND 1)
51    (CALLS2&PUSH 132)                   ; GET
53    (CALLSR&JMPIF 1 48 L159)            ; >
58    (CONST 18)                          ; (RAT)
59    L59
59    (PUSH)
60    (GETVALUE&PUSH 14)                  ; *BN*
62    (LOAD&PUSH 5)
63    (CALLSR&PUSH 1 1)                   ; AREF
66    (GETVALUE&PUSH 15)                  ; *BD*
68    (LOAD&PUSH 6)
69    (CALLSR&PUSH 1 1)                   ; AREF
72    (LIST 3)
74    (JMP L177)
77    L77
77    (CONST&PUSH 4)                      ; ($BERN)
78    (GETVALUE&PUSH 0)                   ; S
80    (LIST 2)
82    (JMP L177)
85    L85
85    (CONST 5)                           ; 1
86    (JMP L177)
89    L89
89    (CONST 6)                           ; ((RAT) -1 2)
90    (JMP L177)
93    L93
93    (CONST 8)                           ; ((RAT) 1 6)
94    (JMP L177)
97    L97
97    (CONST 1)                           ; 0
98    (JMP L177)
101   L101
101   (CONST 13)                          ; (RAT)
102   (JMP L59)
104   L104
104   (CONST&PUSH 7)                      ; 2
105   (LOAD&PUSH 4)
106   (CALLS2 150)                        ; 1+
108   (JMP L153)
110   L110
110   (LOAD&PUSH 3)
111   (CALLS2&JMPIF 148 L97)              ; ODDP
114   (LOAD&PUSH 3)
115   (CONST&PUSH 7)                      ; 2
116   (CALL2&PUSH 10)                     ; QUOT
118   (CALLS2&STORE 151 3)                ; 1-
121   (PUSH)
122   (CONST&PUSH 11)                     ; BERN
123   (CONST&PUSH 12)                     ; LIM
124   (PUSH-UNBOUND 1)
126   (CALLS2&PUSH 132)                   ; GET
128   (CALLSR&JMPIFNOT 1 48 L101)         ; >
132   (GETVALUE&PUSH 9)                   ; $ZEROBERN
134   (JMPIFEQTO 16 L104)                 ; $/#&
137   (CONST&PUSH 14)                     ; *BN*
138   (T&PUSH)
139   (LOAD&INC&STORE 5)
141   (PUSH)
142   (CALL 3 17)                         ; *REARRAY
145   (CONST&PUSH 15)                     ; *BD*
146   (T&PUSH)
147   (LOAD&PUSH 5)
148   (CALL 3 17)                         ; *REARRAY
151   (CONST&PUSH 7)                      ; 2
152   (LOAD 4)
153   L153
153   (PUSH)
154   (CALLSR 2 55)                       ; *
157   (JMP L174)
159   L159
159   (CONST&PUSH 14)                     ; *BN*
160   (T&PUSH)
161   (LOAD&INC&PUSH 5)
163   (CALL 3 17)                         ; *REARRAY
166   (CONST&PUSH 15)                     ; *BD*
167   (T&PUSH)
168   (LOAD&INC&PUSH 5)
170   (CALL 3 17)                         ; *REARRAY
173   (LOAD 3)
174   L174
174   (PUSH)
175   (CALL1 11)                          ; BERN
177   L177
177   (UNBIND1)
178   (SKIP 1)
180   (SETVALUE 0)                        ; S
182   (PUSH)
183   (CALL1 19)                          ; SIMPLIFY
185   (UNBIND1)
186   (SKIP&RET 2)


Disassembly of function #:|(DEFUN BERN (%A*) ...)-42|
(CONST 0) = BERN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BERN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BERN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BERN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BERN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BERN
8     (SKIP&RET 1)


Disassembly of function BERN
(CONST 0) = A
(CONST 1) = B
(CONST 2) = $ZEROBERN
(CONST 3) = L
(CONST 4) = *A*
(CONST 5) = 0
(CONST 6) = 1
(CONST 7) = $/#&
(CONST 8) = -1
(CONST 9) = *RED
(CONST 10) = BERN
(CONST 11) = 2
(CONST 12) = QUOT
(CONST 13) = LIM
(CONST 14) = PUTPROP
(CONST 15) = *BN*
(CONST 16) = *BD*
(CONST 17) = NXTBINCOEF
(CONST 18) = $BERN
(CONST 19) = NUM1
(CONST 20) = DENOM1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*BD* *BN* L A B)
writes special variables : (*A* B A $ZEROBERN L)
104 byte-code instructions:
0     (PUSH-NIL 3)
2     (NIL)
3     (BIND 0)                            ; A
5     (NIL)
6     (BIND 1)                            ; B
8     (NIL)
9     (BIND 2)                            ; $ZEROBERN
11    (NIL)
12    (BIND 3)                            ; L
14    (NIL)
15    (BIND 4)                            ; *A*
17    (CONST 5)                           ; 0
18    (STORE 16)
20    (LOAD&PUSH 19)
21    (CALLS2 151)                        ; 1-
23    (SETVALUE 3)                        ; L
25    (LOAD&INC&STORE 19)
27    (CONST 6)                           ; 1
28    (STORE 17)
30    (CONST 7)                           ; $/#&
31    (SETVALUE 2)                        ; $ZEROBERN
33    (CONST 6)                           ; 1
34    (SETVALUE 0)                        ; A
36    (SETVALUE 1)                        ; B
38    (LOAD&PUSH 19)
39    (CALLS2 150)                        ; 1+
41    (SETVALUE 4)                        ; *A*
43    (JMP L110)
46    L46
46    (LOAD&INC&STORE 16)
48    (GETVALUE&PUSH 1)                   ; B
50    (LOAD&PUSH 17)
51    (LOAD&PUSH 19)
52    (CALL2 17)                          ; NXTBINCOEF
54    (STORE 18)
56    (PUSH)
57    (LOAD&PUSH 18)
58    (CALL1 18)                          ; $BERN
60    (STORE 17)
62    (PUSH)
63    (CALL1&PUSH 19)                     ; NUM1
65    (CALLSR&PUSH 3 55)                  ; *
68    (GETVALUE&PUSH 0)                   ; A
70    (LOAD&PUSH 17)
71    (CALL1&PUSH 20)                     ; DENOM1
73    (CALLSR&PUSH 2 55)                  ; *
76    (CALLSR 2 53)                       ; +
79    (SETVALUE 0)                        ; A
81    (GETVALUE&PUSH 1)                   ; B
83    (LOAD&PUSH 16)
84    (CALL1&PUSH 20)                     ; DENOM1
86    (CALLSR 2 55)                       ; *
89    (SETVALUE 1)                        ; B
91    (GETVALUE&PUSH 0)                   ; A
93    (GETVALUE&PUSH 1)                   ; B
95    (CALL2 9)                           ; *RED
97    (SETVALUE 0)                        ; A
99    (PUSH)
100   (CALL1 20)                          ; DENOM1
102   (SETVALUE 1)                        ; B
104   (GETVALUE&PUSH 0)                   ; A
106   (CALL1 19)                          ; NUM1
108   (SETVALUE 0)                        ; A
110   L110
110   (LOAD&PUSH 16)
111   (GETVALUE&PUSH 3)                   ; L
113   (CALLSR&JMPIFNOT 1 45 L46)          ; =
118   (GETVALUE&PUSH 0)                   ; A
120   (CONST&PUSH 8)                      ; -1
121   (GETVALUE&PUSH 1)                   ; B
123   (LOAD&PUSH 22)
124   (CALLSR&PUSH 3 55)                  ; *
127   (CALL2 9)                           ; *RED
129   (STORE 15)
131   (CONST&PUSH 10)                     ; BERN
132   (LOAD&PUSH 20)
133   (CONST&PUSH 11)                     ; 2
134   (CALL2&PUSH 12)                     ; QUOT
136   (CALLS2&STORE 151 20)               ; 1-
139   (PUSH)
140   (CONST&PUSH 13)                     ; LIM
141   (CALL 3 14)                         ; PUTPROP
144   (GETVALUE&PUSH 15)                  ; *BN*
146   (LOAD 16)
148   (CDR)
149   (CAR&PUSH)
150   (LOAD&PUSH 1)
151   (LOAD&PUSH 22)
152   (LOAD&PUSH 2)
153   (CALLSR 1 2)                        ; SYSTEM::STORE
156   (SKIP 2)
158   (GETVALUE&PUSH 16)                  ; *BD*
160   (LOAD 16)
162   (CDR)
163   (CDR)
164   (CAR&PUSH)
165   (LOAD&PUSH 1)
166   (LOAD&PUSH 22)
167   (LOAD&PUSH 2)
168   (CALLSR 1 2)                        ; SYSTEM::STORE
171   (SKIP 2)
173   (LOAD 15)
175   (UNBIND 5)
177   (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN SIMPBERN (X VESTIGIAL Z) ...)-43|
(CONST 0) = SIMPBERN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPBERN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPBERN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPBERN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPBERN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPBERN
8     (SKIP&RET 1)


Disassembly of function SIMPBERN
(CONST 0) = X
(CONST 1) = Z
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = U
(CONST 5) = FIXNUMP
(CONST 6) = 0
(CONST 7) = $BERN
(CONST 8) = ($BERN)
(CONST 9) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (U Z X)
32 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (GETVALUE&PUSH 1)                   ; Z
16    (CALL2 3)                           ; SIMPCHECK
18    (BIND 4)                            ; U
20    (GETVALUE&PUSH 4)                   ; U
22    (CALL1&JMPIFNOT 5 L32)              ; FIXNUMP
25    (GETVALUE&PUSH 4)                   ; U
27    (CONST&PUSH 6)                      ; 0
28    (CALLSR&JMPIFNOT 1 47 L46)          ; <
32    L32
32    (CONST&PUSH 8)                      ; ($BERN)
33    (GETVALUE&PUSH 4)                   ; U
35    (LIST&PUSH 2)
37    (GETVALUE&PUSH 0)                   ; X
39    (CALL2 9)                           ; EQTEST
41    (UNBIND1)
42    L42
42    (UNBIND 2)
44    (SKIP&RET 4)
46    L46
46    (GETVALUE&PUSH 4)                   ; U
48    (CALL1 7)                           ; $BERN
50    (UNBIND1)
51    (JMP L42)


Disassembly of function #:|(DEFMFUN $BERNPOLY (X S) ...)-44|
(CONST 0) = $BERNPOLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BERNPOLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BERNPOLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BERNPOLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BERNPOLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BERNPOLY
8     (SKIP&RET 1)


Disassembly of function $BERNPOLY
(CONST 0) = X
(CONST 1) = S
(CONST 2) = 0
(CONST 3) = FIXNUMP
(CONST 4) = ($BERNPOLY)
(CONST 5) = -1
(CONST 6) = ZEROP1
(CONST 7) = 1
(CONST 8) = ADDK
(CONST 9) = POWER
(CONST 10) = SUM
(CONST 11) = BINOCOMP
(CONST 12) = $BERN
(CONST 13) = TIMESK
(CONST 14) = POWER*
(CONST 15) = MUL*
(CONST 16) = ADDN
(CONST 17) = ($BERNPOLY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SUM X S)
writes special variable : (SUM)
90 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; S
6     (CONST&PUSH 2)                      ; 0
7     (GETVALUE&PUSH 1)                   ; S
9     (CALL1&JMPIFNOT 3 L34)              ; FIXNUMP
12    (GETVALUE 1)                        ; S
14    (STORE 0)
15    (PUSH)
16    (CONST&PUSH 5)                      ; -1
17    (CALLSR&JMPIF 1 48 L48)             ; >
21    (CONST&PUSH 17)                     ; ($BERNPOLY)
22    (GETVALUE&PUSH 0)                   ; X
24    (LOAD 2)
25    L25
25    (PUSH)
26    (LIST 3)
28    (SKIP 1)
30    L30
30    (UNBIND 2)
32    (SKIP&RET 3)
34    L34
34    (CONST&PUSH 4)                      ; ($BERNPOLY)
35    (GETVALUE&PUSH 0)                   ; X
37    (GETVALUE 1)                        ; S
39    (JMP L25)
41    L41
41    (CONST&PUSH 7)                      ; 1
42    (GETVALUE&PUSH 0)                   ; X
44    (CALL2 8)                           ; ADDK
46    (JMP L64)
48    L48
48    (LOAD&PUSH 0)
49    (CONST&PUSH 2)                      ; 0
50    (CALLSR&JMPIFNOT 1 45 L59)          ; =
54    (GETVALUE&PUSH 0)                   ; X
56    (CALL1&JMPIF 6 L41)                 ; ZEROP1
59    L59
59    (GETVALUE&PUSH 0)                   ; X
61    (LOAD&PUSH 1)
62    (CALL2 9)                           ; POWER
64    L64
64    (PUSH)
65    (NIL)
66    (CONS)
67    (BIND 10)                           ; SUM
69    (CONST&PUSH 7)                      ; 1
70    (JMP L118)
72    L72
72    (CONST&PUSH 7)                      ; 1
73    (GETVALUE&PUSH 0)                   ; X
75    (CALL2 8)                           ; ADDK
77    (JMP L108)
79    L79
79    (LOAD&PUSH 4)
80    (LOAD&PUSH 1)
81    (CALL2&PUSH 11)                     ; BINOCOMP
83    (LOAD&PUSH 1)
84    (CALL1&PUSH 12)                     ; $BERN
86    (CALL2&PUSH 13)                     ; TIMESK
88    (LOAD&PUSH 5)
89    (LOAD&PUSH 2)
90    (CALLSR&JMPIFNOT 1 45 L99)          ; =
94    (GETVALUE&PUSH 0)                   ; X
96    (CALL1&JMPIF 6 L72)                 ; ZEROP1
99    L99
99    (GETVALUE&PUSH 0)                   ; X
101   (LOAD&PUSH 6)
102   (LOAD&PUSH 3)
103   (CALLSR&PUSH 1 54)                  ; -
106   (CALL2 14)                          ; POWER*
108   L108
108   (PUSH)
109   (CALL2&PUSH 15)                     ; MUL*
111   (GETVALUE 10)                       ; SUM
113   (CONS)
114   (SETVALUE 10)                       ; SUM
116   (LOAD&INC&STORE 0)
118   L118
118   (LOAD&PUSH 0)
119   (LOAD&PUSH 5)
120   (CALLSR&JMPIFNOT 1 48 L79)          ; >
124   (GETVALUE&PUSH 10)                  ; SUM
126   (T&PUSH)
127   (CALL2 16)                          ; ADDN
129   (SKIP 1)
131   (UNBIND1)
132   (SKIP 1)
134   (JMP L30)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE ZETA))-45|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(COMMENT ZETA AND ...)-46|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $ZETA (S) ...)-47|
(CONST 0) = $ZETA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ZETA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ZETA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ZETA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ZETA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ZETA
8     (SKIP&RET 1)


Disassembly of function $ZETA
(CONST 0) = S
(CONST 1) = FIXNUMP
(CONST 2) = ($ZETA)
(CONST 3) = 0
(CONST 4) = ($ZETA)
(CONST 5) = 1
(CONST 6) = X
(CONST 7) = Y
(CONST 8) = -1
(CONST 9) = $BERN
(CONST 10) = (RAT)
(CONST 11) = 2
(CONST 12) = TIMESK
(CONST 13) = ((RAT SIMP) -1 2)
(CONST 14) = $ZETA%PI
(CONST 15) = ($ZETA)
(CONST 16) = $NUMER
(CONST 17) = $FLOAT
(CONST 18) = $%PI
(CONST 19) = POWER
(CONST 20) = FACTORIAL
(CONST 21) = *RED
(CONST 22) = MABS
(CONST 23) = SIMPABS
(CONST 24) = MUL2
(CONST 25) = RESIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X $ZETA%PI S)
writes special variable : (S)
109 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; S
3     (GETVALUE&PUSH 0)                   ; S
5     (CALL1&JMPIFNOT 1 L40)              ; FIXNUMP
8     (GETVALUE&PUSH 0)                   ; S
10    (CALLS2&JMPIF 148 L101)             ; ODDP
14    (GETVALUE&PUSH 0)                   ; S
16    (JMPIFEQTO 3 L133)                  ; 0
20    (GETVALUE&PUSH 0)                   ; S
22    (CALLS2&JMPIF 147 L136)             ; MINUSP
26    (GETVALUE 14)                       ; $ZETA%PI
28    (JMPIF L139)
31    (CONST 15)                          ; ($ZETA)
32    L32
32    (PUSH)
33    (GETVALUE&PUSH 0)                   ; S
35    (LIST 2)
37    (JMP L187)
40    L40
40    (CONST 2)                           ; ($ZETA)
41    (JMP L32)
43    L43
43    (CONST 4)                           ; ($ZETA)
44    (JMP L32)
46    L46
46    (GETVALUE&PUSH 6)                   ; X
48    (GETVALUE&PUSH 7)                   ; Y
50    (CALLS2 181)                        ; TRUNCATE
52    (JMP L85)
54    L54
54    (CONST&PUSH 8)                      ; -1
55    (GETVALUE&PUSH 0)                   ; S
57    (CALL1&PUSH 9)                      ; $BERN
59    (CONST&PUSH 10)                     ; (RAT)
60    (CONST&PUSH 8)                      ; -1
61    (GETVALUE 0)                        ; S
63    (BIND 6)                            ; X
65    (CONST 11)                          ; 2
66    (BIND 7)                            ; Y
68    (GETVALUE&PUSH 6)                   ; X
70    (CALLS2&JMPIFNOT 12 L78)            ; INTEGERP
73    (GETVALUE&PUSH 7)                   ; Y
75    (CALLS2&JMPIF 12 L46)               ; INTEGERP
78    L78
78    (GETVALUE&PUSH 6)                   ; X
80    (GETVALUE&PUSH 7)                   ; Y
82    (CALLSR 1 56)                       ; /
85    L85
85    (UNBIND 2)
87    (PUSH)
88    (CALLS2&PUSH 154)                   ; EXPT
90    (GETVALUE&PUSH 0)                   ; S
92    (LIST&PUSH 3)
94    (CALL2&PUSH 12)                     ; TIMESK
96    (CALL2 12)                          ; TIMESK
98    (JMP L187)
101   L101
101   (GETVALUE&PUSH 0)                   ; S
103   (CONST&PUSH 3)                      ; 0
104   (CALLSR&JMPIF 1 48 L43)             ; >
109   (CONST 5)                           ; 1
110   (BIND 6)                            ; X
112   (GETVALUE 0)                        ; S
114   (BIND 7)                            ; Y
116   (GETVALUE&PUSH 6)                   ; X
118   (GETVALUE&PUSH 7)                   ; Y
120   (CALLSR 1 54)                       ; -
123   (UNBIND 2)
125   (SETVALUE 0)                        ; S
127   (JMPIF L54)
130   (NIL)
131   (JMP L187)
133   L133
133   (CONST 13)                          ; ((RAT SIMP) -1 2)
134   (JMP L187)
136   L136
136   (CONST 3)                           ; 0
137   (JMP L187)
139   L139
139   (NIL)
140   (BIND 16)                           ; $NUMER
142   (NIL)
143   (BIND 17)                           ; $FLOAT
145   (CONST&PUSH 18)                     ; $%PI
146   (GETVALUE&PUSH 0)                   ; S
148   (CALL2&PUSH 19)                     ; POWER
150   (CONST&PUSH 11)                     ; 2
151   (GETVALUE&PUSH 0)                   ; S
153   (CALLS2&PUSH 151)                   ; 1-
155   (CALLS2&PUSH 154)                   ; EXPT
157   (GETVALUE&PUSH 0)                   ; S
159   (CALL1&PUSH 20)                     ; FACTORIAL
161   (CALL2&PUSH 21)                     ; *RED
163   (CONST&PUSH 22)                     ; MABS
164   (GETVALUE&PUSH 0)                   ; S
166   (CALL1&PUSH 9)                      ; $BERN
168   (LIST&PUSH 2)
170   (CONST&PUSH 5)                      ; 1
171   (NIL&PUSH)
172   (CALL&PUSH 3 23)                    ; SIMPABS
175   (CALL2&PUSH 12)                     ; TIMESK
177   (CALL2 24)                          ; MUL2
179   (SETVALUE 0)                        ; S
181   (UNBIND 2)
183   (GETVALUE&PUSH 0)                   ; S
185   (CALL1 25)                          ; RESIMPLIFY
187   L187
187   (UNBIND1)
188   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $FIB (N) ...)-48|
(CONST 0) = $FIB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FIB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FIB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FIB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FIB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FIB
8     (SKIP&RET 1)


Disassembly of function $FIB
(CONST 0) = N
(CONST 1) = FIXNUMP
(CONST 2) = FFIB
(CONST 3) = ($FIB)
(CONST 4) = -1
(CONST 5) = ADD2*
(CONST 6) = $PREVFIB
(CONST 7) = ($FIB)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
writes special variable : ($PREVFIB)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (CALL1&JMPIF 1 L26)                 ; FIXNUMP
8     (CONST&PUSH 3)                      ; ($FIB)
9     (GETVALUE&PUSH 0)                   ; N
11    (CONST&PUSH 4)                      ; -1
12    (CALL2&PUSH 5)                      ; ADD2*
14    (LIST 2)
16    (SETVALUE 6)                        ; $PREVFIB
18    (CONST&PUSH 7)                      ; ($FIB)
19    (GETVALUE&PUSH 0)                   ; N
21    (LIST 2)
23    L23
23    (UNBIND1)
24    (SKIP&RET 2)
26    L26
26    (GETVALUE&PUSH 0)                   ; N
28    (CALL1 2)                           ; FFIB
30    (JMP L23)


Disassembly of function #:|(DEFUN FFIB (%N) ...)-49|
(CONST 0) = FFIB
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FFIB>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FFIB
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FFIB
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FFIB>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FFIB
8     (SKIP&RET 1)


Disassembly of function FFIB
(CONST 0) = -1
(CONST 1) = #.BOOLE-IOR
(CONST 2) = 1
(CONST 3) = $PREVFIB
(CONST 4) = *A
(CONST 5) = #.BOOLE-ANDC2
(CONST 6) = QUOT
(CONST 7) = X
(CONST 8) = Y
(CONST 9) = Z
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z Y X *A $PREVFIB)
writes special variables : ($PREVFIB *A)
66 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L100)                  ; -1
5     (LOAD&PUSH 1)
6     (CALLS2&JMPIF 145 L100)             ; ZEROP
10    (CONST&PUSH 5)                      ; #.BOOLE-ANDC2
11    (LOAD&PUSH 2)
12    (CONST&PUSH 2)                      ; 1
13    (CALLS2&PUSH 205)                   ; BOOLE
15    (CONST&PUSH 5)                      ; #.BOOLE-ANDC2
16    (CALL2&PUSH 6)                      ; QUOT
18    (JSR&PUSH L0)
20    (GETVALUE&PUSH 3)                   ; $PREVFIB
22    (CALLSR 2 53)                       ; +
25    (BIND 7)                            ; X
27    (GETVALUE&PUSH 3)                   ; $PREVFIB
29    (GETVALUE&PUSH 3)                   ; $PREVFIB
31    (CALLSR 2 55)                       ; *
34    (BIND 8)                            ; Y
36    (GETVALUE&PUSH 4)                   ; *A
38    (GETVALUE&PUSH 4)                   ; *A
40    (CALLSR 2 55)                       ; *
43    (BIND 9)                            ; Z
45    (GETVALUE&PUSH 7)                   ; X
47    (GETVALUE&PUSH 7)                   ; X
49    (CALLSR 2 55)                       ; *
52    (BIND 7)                            ; X
54    (GETVALUE 8)                        ; Y
56    (BIND 8)                            ; Y
58    (GETVALUE&PUSH 7)                   ; X
60    (GETVALUE&PUSH 8)                   ; Y
62    (CALLSR 1 54)                       ; -
65    (UNBIND 2)
67    (SETVALUE 4)                        ; *A
69    (GETVALUE&PUSH 8)                   ; Y
71    (GETVALUE&PUSH 9)                   ; Z
73    (CALLSR 2 53)                       ; +
76    (SETVALUE 3)                        ; $PREVFIB
78    (UNBIND 3)
80    (LOAD&PUSH 1)
81    (CALLS2&JMPIFNOT 148 L113)          ; ODDP
84    (GETVALUE&PUSH 4)                   ; *A
86    (GETVALUE&PUSH 3)                   ; $PREVFIB
88    (CALLSR&PUSH 2 53)                  ; +
91    (GETVALUE 4)                        ; *A
93    (SETVALUE 3)                        ; $PREVFIB
95    (POP)
96    L96
96    (SETVALUE 4)                        ; *A
98    (SKIP&RET 2)
100   L100
100   (CONST&PUSH 1)                      ; #.BOOLE-IOR
101   (LOAD&PUSH 2)
102   (CONST&PUSH 2)                      ; 1
103   (CALLS2 205)                        ; BOOLE
105   (SETVALUE 3)                        ; $PREVFIB
107   (LOAD&PUSH 1)
108   (CALLSR 0 54)                       ; -
111   (JMP L96)
113   L113
113   (GETVALUE 4)                        ; *A
115   (JMPIF1 L120)
117   (NIL)
118   (SKIP&RET 2)
120   L120
120   (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE CFFUN))-50|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(COMMENT CONTINUED FRACTION ...)-51|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $CFDISREP (A) ...)-52|
(CONST 0) = $CFDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CFDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CFDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CFDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CFDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CFDISREP
8     (SKIP&RET 1)


Disassembly of function $CFDISREP
(CONST 0) = A
(CONST 1) = $LISTP
(CONST 2) = "Arg to CFDISREP not a list: ~M"
(CONST 3) = MERROR
(CONST 4) = (MEXPT)
(CONST 5) = CFDISREP1
(CONST 6) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
39 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1&JMPIFNOT 1 L32)              ; $LISTP
8     (GETVALUE 0)                        ; A
10    (CDR)
11    (CDR)
12    (JMPIFNOT L39)
14    (GETVALUE 0)                        ; A
16    (CDR)
17    (CAR&PUSH)
18    (CALLS2&JMPIF 145 L45)              ; ZEROP
21    (GETVALUE 0)                        ; A
23    (CDR&PUSH)
24    (CALL1 5)                           ; CFDISREP1
26    (JMPIF1 L29)
28    (NIL)
29    L29
29    (UNBIND1)
30    (SKIP&RET 2)
32    L32
32    (CONST&PUSH 2)                      ; "Arg to CFDISREP not a list: ~M"
33    (GETVALUE&PUSH 0)                   ; A
35    (CALL2 3)                           ; MERROR
37    (JMP L29)
39    L39
39    (GETVALUE 0)                        ; A
41    (CDR)
42    (CAR)
43    (JMP L29)
45    L45
45    (CONST&PUSH 4)                      ; (MEXPT)
46    (GETVALUE 0)                        ; A
48    (CDR)
49    (CDR&PUSH)
50    (CALL1&PUSH 5)                      ; CFDISREP1
52    (CONST&PUSH 6)                      ; -1
53    (LIST 3)
55    (JMP L29)


Disassembly of function #:|(DEFUN CFDISREP1 (A) ...)-53|
(CONST 0) = CFDISREP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFDISREP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFDISREP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFDISREP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFDISREP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFDISREP1
8     (SKIP&RET 1)


Disassembly of function CFDISREP1
(CONST 0) = A
(CONST 1) = (MPLUS SIMP CF)
(CONST 2) = (RAT SIMP)
(CONST 3) = 1
(CONST 4) = (MEXPT SIMP)
(CONST 5) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
writes special variable : (A)
36 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE 0)                        ; A
5     (CDR)
6     (JMPIF L23)
8     (GETVALUE 0)                        ; A
10    (CAR)
11    (JMPIF1 L14)
13    (NIL)
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)
17    L17
17    (CONST&PUSH 2)                      ; (RAT SIMP)
18    (CONST&PUSH 3)                      ; 1
19    (GETVALUE 0)                        ; A
21    (JMP L42)
23    L23
23    (CONST&PUSH 1)                      ; (MPLUS SIMP CF)
24    (GETVALUE 0)                        ; A
26    (CAR&PUSH)
27    (GETVALUE 0)                        ; A
29    (CDR&PUSH)
30    (JSR L0)
32    (SETVALUE 0)                        ; A
34    (PUSH)
35    (CALLS2&JMPIF 12 L17)               ; INTEGERP
38    (CONST&PUSH 4)                      ; (MEXPT SIMP)
39    (GETVALUE&PUSH 0)                   ; A
41    (CONST 5)                           ; -1
42    L42
42    (PUSH)
43    (LIST&PUSH 3)
45    (LIST 3)
47    (JMP L14)


Disassembly of function #:|(DEFUN CFMAK (A) ...)-54|
(CONST 0) = CFMAK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFMAK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFMAK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFMAK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFMAK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFMAK
8     (SKIP&RET 1)


Disassembly of function CFMAK
(CONST 0) = A
(CONST 1) = MEVAL
(CONST 2) = MLIST
(CONST 3) = RAT
(CONST 4) = RATCF
(CONST 5) = "Continued fractions must be lists or integers"
(CONST 6) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
writes special variable : (A)
40 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1 1)                           ; MEVAL
7     (SETVALUE 0)                        ; A
9     (PUSH)
10    (CALLS2&JMPIF 12 L36)               ; INTEGERP
13    (GETVALUE 0)                        ; A
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 2 L42)                   ; MLIST
20    (GETVALUE 0)                        ; A
22    (CAR)
23    (CAR&PUSH)
24    (JMPIFEQTO 3 L47)                   ; RAT
27    (CONST&PUSH 5)                      ; "Continued fractions must be lists or integers"
28    (CALL1 6)                           ; MERROR
30    (JMPIF1 L33)
32    (NIL)
33    L33
33    (UNBIND1)
34    (SKIP&RET 2)
36    L36
36    (GETVALUE&PUSH 0)                   ; A
38    (LIST 1)
40    (JMP L33)
42    L42
42    (GETVALUE 0)                        ; A
44    (CDR)
45    (JMP L33)
47    L47
47    (GETVALUE 0)                        ; A
49    (CDR)
50    (CAR&PUSH)
51    (GETVALUE 0)                        ; A
53    (CDR)
54    (CDR)
55    (CAR&PUSH)
56    (CALL2 4)                           ; RATCF
58    (JMP L33)


Disassembly of function #:|(DEFUN MAKCF (A) ...)-55|
(CONST 0) = MAKCF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKCF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKCF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKCF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKCF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKCF
8     (SKIP&RET 1)


Disassembly of function MAKCF
(CONST 0) = A
(CONST 1) = (MLIST SIMP CF)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE 0)                        ; A
5     (CDR)
6     (JMPIFNOT L15)
8     (CONST&PUSH 1)                      ; (MLIST SIMP CF)
9     (GETVALUE 0)                        ; A
11    (CONS)
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (GETVALUE 0)                        ; A
17    (CAR)
18    (JMP L12)


Disassembly of function #:|(DEFMACRO BIND-STATUS-DIVOV-T (&REST FORMS) ...)-56|
(CONST 0) = BIND-STATUS-DIVOV-T
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIND-STATUS-DIVOV-T>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIND-STATUS-DIVOV-T
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIND-STATUS-DIVOV-T
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIND-STATUS-DIVOV-T>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; BIND-STATUS-DIVOV-T
10    (SKIP&RET 1)


Disassembly of function BIND-STATUS-DIVOV-T
(CONST 0) = PROGN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; PROGN
3     (LOAD 1)
4     (CONS)
5     (SKIP&RET 4)


Disassembly of function #:|(DEFMSPEC $CF (A) ...)-57-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $CF (A) ...)-57-2-1|>
(CONST 1) = $CF
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $CF (A) ...)-57-2-1|>
1     (CONST&PUSH 1)                      ; $CF
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $CF (A) ...)-57-2-1|
(CONST 0) = A
(CONST 1) = $LISTARITH
(CONST 2) = FEXPRCHECK
(CONST 3) = MEVAL
(CONST 4) = CFEVAL
(CONST 5) = CFRATSIMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (NIL)
4     (BIND 1)                            ; $LISTARITH
6     (GETVALUE&PUSH 0)                   ; A
8     (CALL1&PUSH 2)                      ; FEXPRCHECK
10    (CALL1&PUSH 3)                      ; MEVAL
12    (CALL1 4)                           ; CFEVAL
14    (UNBIND1)
15    (PUSH)
16    (CALL1 5)                           ; CFRATSIMP
18    (UNBIND1)
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CFRATSIMP (A) ...)-58|
(CONST 0) = CFRATSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFRATSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFRATSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFRATSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFRATSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFRATSIMP
8     (SKIP&RET 1)


Disassembly of function CFRATSIMP
(CONST 0) = A
(CONST 1) = (CF)
(CONST 2) = MEMQ
(CONST 3) = (MLIST CF SIMP)
(CONST 4) = FIND-CF
(CONST 5) = CF-BACK-RECURRENCE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE 0)                        ; A
5     (CAR&PUSH)
6     (CONST&PUSH 1)                      ; (CF)
7     (CALL2&JMPIF 2 L23)                 ; MEMQ
10    (CONST&PUSH 3)                      ; (MLIST CF SIMP)
11    (CONST&PUSH 4)                      ; FIND-CF
12    (GETVALUE 0)                        ; A
14    (CDR&PUSH)
15    (CALL1 5)                           ; CF-BACK-RECURRENCE
17    (APPLY 0)
19    (CONS)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE 0)                        ; A
25    (JMP L20)


Disassembly of function #:|(DEFUN CFEVAL (A) ...)-59|
(CONST 0) = CFEVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFEVAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFEVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFEVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFEVAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFEVAL
8     (SKIP&RET 1)


Disassembly of function CFEVAL
(CONST 0) = A
(CONST 1) = TEMP
(CONST 2) = $RATPRINT
(CONST 3) = (MLIST CF)
(CONST 4) = MAXIMA-RATIONALIZE
(CONST 5) = (MLIST CF)
(CONST 6) = RATCF
(CONST 7) = $BFLOATP
(CONST 8) = $BFTORAT
(CONST 9) = BIGFLOAT2RAT
(CONST 10) = (MLIST CF)
(CONST 11) = "~:M - not a continued fraction"
(CONST 12) = MERROR
(CONST 13) = RAT
(CONST 14) = (MLIST CF)
(CONST 15) = MLIST
(CONST 16) = CFRATSIMP
(CONST 17) = MTIMESP
(CONST 18) = FIXNUMP
(CONST 19) = MEXPTP
(CONST 20) = ((RAT) 1 2)
(CONST 21) = ALIKE1
(CONST 22) = 2
(CONST 23) = CFSQRT
(CONST 24) = MEXPT
(CONST 25) = ((RAT) 1 2)
(CONST 26) = ((RAT) 1 2)
(CONST 27) = SUB*
(CONST 28) = ((RAT) 1 2)
(CONST 29) = CFEXPT
(CONST 30) = CFTIMES
(CONST 31) = 
((MPLUS . CFPLUS) (MTIMES . CFTIMES) (MQUOTIENT . CFQUOT)
 (MDIFFERENCE . CFDIFF) (MMINUS . CFMINUS))
(CONST 32) = ASSQ
(CONST 33) = CF
(CONST 34) = MRAT
(CONST 35) = $RATDISREP
(CONST 36) = "Not a continued fraction:~%~M"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEMP A)
writes special variables : (TEMP A)
215 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (NIL)
4     (BIND 1)                            ; TEMP
6     (NIL)
7     (BIND 2)                            ; $RATPRINT
9     (GETVALUE&PUSH 0)                   ; A
11    (CALLS2&JMPIF 12 L49)               ; INTEGERP
14    (GETVALUE&PUSH 0)                   ; A
16    (CALLS2&JMPIF 15 L57)               ; FLOATP
19    (GETVALUE&PUSH 0)                   ; A
21    (CALL1&JMPIFNOT 7 L227)             ; $BFLOATP
25    (T)
26    (BIND 8)                            ; $BFTORAT
28    (GETVALUE&PUSH 0)                   ; A
30    (CALL1 9)                           ; BIGFLOAT2RAT
32    (SETVALUE 0)                        ; A
34    (CONST 10)                          ; (MLIST CF)
35    L35
35    (PUSH)
36    (GETVALUE 0)                        ; A
38    (CAR&PUSH)
39    (GETVALUE 0)                        ; A
41    (CDR&PUSH)
42    (CALL2 6)                           ; RATCF
44    (CONS)
45    (UNBIND1)
46    (JMP L340)
49    L49
49    (CONST&PUSH 3)                      ; (MLIST CF)
50    (GETVALUE&PUSH 0)                   ; A
52    (LIST 2)
54    (JMP L340)
57    L57
57    (GETVALUE&PUSH 0)                   ; A
59    (CALL1 4)                           ; MAXIMA-RATIONALIZE
61    (BIND 0)                            ; A
63    (CONST 5)                           ; (MLIST CF)
64    (JMP L35)
66    L66
66    (CONST 11)                          ; "~:M - not a continued fraction"
67    (JMP L335)
70    L70
70    (CONST&PUSH 14)                     ; (MLIST CF)
71    (GETVALUE 0)                        ; A
73    (CDR)
74    (CAR&PUSH)
75    (GETVALUE 0)                        ; A
77    (CDR)
78    (CDR)
79    (CAR&PUSH)
80    (CALL2 6)                           ; RATCF
82    (CONS)
83    (JMP L340)
86    L86
86    (GETVALUE&PUSH 0)                   ; A
88    (CALL1 16)                          ; CFRATSIMP
90    (JMP L340)
93    L93
93    (GETVALUE 0)                        ; A
95    (CDR)
96    (CAR&PUSH)
97    (CONST&PUSH 22)                     ; 2
98    (CALLS2&PUSH 154)                   ; EXPT
100   (GETVALUE 0)                        ; A
102   (CDR)
103   (CDR)
104   (CAR)
105   (CDR)
106   (CAR&PUSH)
107   (CALLSR 2 55)                       ; *
110   (JMP L125)
112   L112
112   (GETVALUE 0)                        ; A
114   (CDR)
115   (CDR)
116   (CAR&PUSH)
117   (CONST&PUSH 25)                     ; ((RAT) 1 2)
118   (CALL2&JMPIFNOT 21 L165)            ; ALIKE1
121   (GETVALUE 0)                        ; A
123   (CDR)
124   (CAR)
125   L125
125   (PUSH)
126   (JSR&PUSH L0)
129   (CALL1 23)                          ; CFSQRT
131   (JMP L340)
134   L134
134   (GETVALUE 0)                        ; A
136   (CDR)
137   (CAR&PUSH)
138   (JSR&PUSH L0)
141   (CALL1&PUSH 23)                     ; CFSQRT
143   (GETVALUE 0)                        ; A
145   (CDR)
146   (CAR&PUSH)
147   (JSR&PUSH L0)
150   (GETVALUE 0)                        ; A
152   (CDR)
153   (CDR)
154   (CAR&PUSH)
155   (CONST&PUSH 28)                     ; ((RAT) 1 2)
156   (CALL2&PUSH 27)                     ; SUB*
158   (CALL2&PUSH 29)                     ; CFEXPT
160   (CALL2 30)                          ; CFTIMES
162   (JMP L340)
165   L165
165   (GETVALUE 0)                        ; A
167   (CDR)
168   (CDR)
169   (CAR&PUSH)
170   (CONST&PUSH 26)                     ; ((RAT) 1 2)
171   (CALL2&PUSH 27)                     ; SUB*
173   (CALLS2&JMPIF 12 L134)              ; INTEGERP
176   (GETVALUE 0)                        ; A
178   (CDR)
179   (CAR&PUSH)
180   (JSR&PUSH L0)
183   (GETVALUE 0)                        ; A
185   (CDR)
186   (CDR)
187   (CAR&PUSH)
188   (CALL2 29)                          ; CFEXPT
190   (JMPIF1 L340)
193   (NIL)
194   (JMP L340)
197   L197
197   (GETVALUE 0)                        ; A
199   (CDR)
200   (CAR&PUSH)
201   (JSR&PUSH L0)
204   (GETVALUE 0)                        ; A
206   (CDR)
207   (CDR&PUSH)
208   (GETVALUE 1)                        ; TEMP
210   (CDR&PUSH)
211   (CALL 3 33)                         ; CF
214   (JMP L340)
217   L217
217   (GETVALUE&PUSH 0)                   ; A
219   (CALL1&PUSH 35)                     ; $RATDISREP
221   (JSR L0)
224   (JMP L340)
227   L227
227   (GETVALUE 0)                        ; A
229   (JMPIFATOM L66)
232   (GETVALUE 0)                        ; A
234   (CAR)
235   (CAR&PUSH)
236   (JMPIFEQTO 13 L70)                  ; RAT
240   (GETVALUE 0)                        ; A
242   (CAR)
243   (CAR&PUSH)
244   (JMPIFEQTO 15 L86)                  ; MLIST
248   (GETVALUE&PUSH 0)                   ; A
250   (CALL1&JMPIFNOT 17 L304)            ; MTIMESP
253   (GETVALUE 0)                        ; A
255   (CDR)
256   (CDR)
257   (JMPIFNOT L304)
259   (GETVALUE 0)                        ; A
261   (CDR)
262   (CDR)
263   (CDR)
264   (JMPIF L304)
266   (GETVALUE 0)                        ; A
268   (CDR)
269   (CAR&PUSH)
270   (CALL1&JMPIFNOT 18 L304)            ; FIXNUMP
273   (GETVALUE 0)                        ; A
275   (CDR)
276   (CDR)
277   (CAR&PUSH)
278   (CALL1&JMPIFNOT 19 L304)            ; MEXPTP
281   (GETVALUE 0)                        ; A
283   (CDR)
284   (CDR)
285   (CAR)
286   (CDR)
287   (CAR&PUSH)
288   (CALL1&JMPIFNOT 18 L304)            ; FIXNUMP
291   (GETVALUE 0)                        ; A
293   (CDR)
294   (CDR)
295   (CAR)
296   (CDR)
297   (CDR)
298   (CAR&PUSH)
299   (CONST&PUSH 20)                     ; ((RAT) 1 2)
300   (CALL2&JMPIF 21 L93)                ; ALIKE1
304   L304
304   (GETVALUE 0)                        ; A
306   (CAR)
307   (CAR&PUSH)
308   (JMPIFEQTO 24 L112)                 ; MEXPT
312   (GETVALUE 0)                        ; A
314   (CAR)
315   (CAR&PUSH)
316   (CONST&PUSH 31)                     ; (# # # ...)
318   (CALL2 32)                          ; ASSQ
320   (SETVALUE 1)                        ; TEMP
322   (JMPIF L197)
325   (GETVALUE 0)                        ; A
327   (CAR)
328   (CAR&PUSH)
329   (JMPIFEQTO 34 L217)                 ; MRAT
333   (CONST 36)                          ; "Not a continued fraction:~%~M"
335   L335
335   (PUSH)
336   (GETVALUE&PUSH 0)                   ; A
338   (CALL2 12)                          ; MERROR
340   L340
340   (UNBIND 3)
342   (SKIP&RET 2)


Disassembly of function #:|(DEFUN CF (A L FUN) ...)-60|
(CONST 0) = CF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CF
8     (SKIP&RET 1)


Disassembly of function CF
(CONST 0) = A
(CONST 1) = L
(CONST 2) = ($CF)
(CONST 3) = MEVAL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A L)
27 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (GETVALUE 1)                        ; L
8     (JMPIFNOT L36)
10    (LOAD&PUSH 7)
11    (GETVALUE&PUSH 0)                   ; A
13    (CONST&PUSH 2)                      ; ($CF)
14    (GETVALUE 1)                        ; L
16    (CAR&PUSH)
17    (LIST&PUSH 2)
19    (CALL1&PUSH 3)                      ; MEVAL
21    (FUNCALL&PUSH 2)
23    (GETVALUE 1)                        ; L
25    (CDR&PUSH)
26    (LOAD&PUSH 9)
27    (JSR L0)
29    (JMPIF1 L32)
31    (NIL)
32    L32
32    (UNBIND 2)
34    (SKIP&RET 4)
36    L36
36    (GETVALUE 0)                        ; A
38    (JMP L32)


Disassembly of function #:|(DEFUN CFPLUS (A B) ...)-61|
(CONST 0) = CFPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFPLUS
8     (SKIP&RET 1)


Disassembly of function CFPLUS
(CONST 0) = A
(CONST 1) = B
(CONST 2) = CFMAK
(CONST 3) = (0 1 1 0)
(CONST 4) = (0 0 0 1)
(CONST 5) = CFFUN
(CONST 6) = MAKCF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
writes special variables : (B A)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CALL1 2)                           ; CFMAK
10    (SETVALUE 0)                        ; A
12    (GETVALUE&PUSH 1)                   ; B
14    (CALL1 2)                           ; CFMAK
16    (SETVALUE 1)                        ; B
18    (CONST&PUSH 3)                      ; (0 1 1 0)
19    (CONST&PUSH 4)                      ; (0 0 0 1)
20    (GETVALUE&PUSH 0)                   ; A
22    (GETVALUE&PUSH 1)                   ; B
24    (CALL&PUSH 4 5)                     ; CFFUN
27    (CALL1 6)                           ; MAKCF
29    (UNBIND 2)
31    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CFTIMES (A B) ...)-62|
(CONST 0) = CFTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFTIMES
8     (SKIP&RET 1)


Disassembly of function CFTIMES
(CONST 0) = A
(CONST 1) = B
(CONST 2) = CFMAK
(CONST 3) = (1 0 0 0)
(CONST 4) = (0 0 0 1)
(CONST 5) = CFFUN
(CONST 6) = MAKCF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
writes special variables : (B A)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CALL1 2)                           ; CFMAK
10    (SETVALUE 0)                        ; A
12    (GETVALUE&PUSH 1)                   ; B
14    (CALL1 2)                           ; CFMAK
16    (SETVALUE 1)                        ; B
18    (CONST&PUSH 3)                      ; (1 0 0 0)
19    (CONST&PUSH 4)                      ; (0 0 0 1)
20    (GETVALUE&PUSH 0)                   ; A
22    (GETVALUE&PUSH 1)                   ; B
24    (CALL&PUSH 4 5)                     ; CFFUN
27    (CALL1 6)                           ; MAKCF
29    (UNBIND 2)
31    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CFDIFF (A B) ...)-63|
(CONST 0) = CFDIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFDIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFDIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFDIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFDIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFDIFF
8     (SKIP&RET 1)


Disassembly of function CFDIFF
(CONST 0) = A
(CONST 1) = B
(CONST 2) = CFMAK
(CONST 3) = (0 1 -1 0)
(CONST 4) = (0 0 0 1)
(CONST 5) = CFFUN
(CONST 6) = MAKCF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
writes special variables : (B A)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CALL1 2)                           ; CFMAK
10    (SETVALUE 0)                        ; A
12    (GETVALUE&PUSH 1)                   ; B
14    (CALL1 2)                           ; CFMAK
16    (SETVALUE 1)                        ; B
18    (CONST&PUSH 3)                      ; (0 1 -1 0)
19    (CONST&PUSH 4)                      ; (0 0 0 1)
20    (GETVALUE&PUSH 0)                   ; A
22    (GETVALUE&PUSH 1)                   ; B
24    (CALL&PUSH 4 5)                     ; CFFUN
27    (CALL1 6)                           ; MAKCF
29    (UNBIND 2)
31    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CFMIN (A) ...)-64|
(CONST 0) = CFMIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFMIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFMIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFMIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFMIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFMIN
8     (SKIP&RET 1)


Disassembly of function CFMIN
(CONST 0) = A
(CONST 1) = CFMAK
(CONST 2) = (0 0 -1 0)
(CONST 3) = (0 0 0 1)
(CONST 4) = (0)
(CONST 5) = CFFUN
(CONST 6) = MAKCF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
writes special variable : (A)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1 1)                           ; CFMAK
7     (SETVALUE 0)                        ; A
9     (CONST&PUSH 2)                      ; (0 0 -1 0)
10    (CONST&PUSH 3)                      ; (0 0 0 1)
11    (GETVALUE&PUSH 0)                   ; A
13    (CONST&PUSH 4)                      ; (0)
14    (CALL&PUSH 4 5)                     ; CFFUN
17    (CALL1 6)                           ; MAKCF
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CFQUOT (A B) ...)-65|
(CONST 0) = CFQUOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFQUOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFQUOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFQUOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFQUOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFQUOT
8     (SKIP&RET 1)


Disassembly of function CFQUOT
(CONST 0) = A
(CONST 1) = B
(CONST 2) = CFMAK
(CONST 3) = (0 1 0 0)
(CONST 4) = (0 0 1 0)
(CONST 5) = CFFUN
(CONST 6) = MAKCF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
writes special variables : (B A)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE&PUSH 0)                   ; A
8     (CALL1 2)                           ; CFMAK
10    (SETVALUE 0)                        ; A
12    (GETVALUE&PUSH 1)                   ; B
14    (CALL1 2)                           ; CFMAK
16    (SETVALUE 1)                        ; B
18    (CONST&PUSH 3)                      ; (0 1 0 0)
19    (CONST&PUSH 4)                      ; (0 0 1 0)
20    (GETVALUE&PUSH 0)                   ; A
22    (GETVALUE&PUSH 1)                   ; B
24    (CALL&PUSH 4 5)                     ; CFFUN
27    (CALL1 6)                           ; MAKCF
29    (UNBIND 2)
31    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CFEXPT (B E) ...)-66|
(CONST 0) = CFEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFEXPT
8     (SKIP&RET 1)


Disassembly of function CFEXPT
(CONST 0) = B
(CONST 1) = E
(CONST 2) = CFMAK
(CONST 3) = "Can't raise continued fraction to non-integral powers"
(CONST 4) = MERROR
(CONST 5) = N
(CONST 6) = 2
(CONST 7) = QUOT
(CONST 8) = (1)
(CONST 9) = S
(CONST 10) = (1 0 0 0)
(CONST 11) = (0 0 0 1)
(CONST 12) = CFFUN
(CONST 13) = (1 0 0 0)
(CONST 14) = (0 0 0 1)
(CONST 15) = 0
(CONST 16) = (0 0 0 1)
(CONST 17) = (0 1 0 0)
(CONST 18) = (1)
(CONST 19) = MAKCF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (S N E B)
writes special variables : (N S B)
80 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (LOAD 4)
4     (BIND 1)                            ; E
6     (GETVALUE&PUSH 0)                   ; B
8     (CALL1 2)                           ; CFMAK
10    (SETVALUE 0)                        ; B
12    (GETVALUE&PUSH 1)                   ; E
14    (CALLS2&JMPIFNOT 12 L41)            ; INTEGERP
17    (GETVALUE&PUSH 1)                   ; E
19    (CALLS2 158)                        ; ABS
21    (BIND 5)                            ; N
23    (GETVALUE&PUSH 5)                   ; N
25    (CONST&PUSH 6)                      ; 2
26    (CALL2&PUSH 7)                      ; QUOT
28    (GETVALUE&PUSH 5)                   ; N
30    (CALLS2&JMPIF 148 L47)              ; ODDP
33    (CONST 8)                           ; (1)
34    L34
34    (BIND 9)                            ; S
36    (LOAD 3)
37    (BIND 5)                            ; N
39    (JMP L89)
41    L41
41    (CONST&PUSH 3)                      ; "Can't raise continued fraction to non-integral powers"
42    (CALL1 4)                           ; MERROR
44    (JMP L128)
47    L47
47    (GETVALUE 0)                        ; B
49    (JMP L34)
51    L51
51    (GETVALUE 9)                        ; S
53    (JMP L117)
55    L55
55    (CONST&PUSH 10)                     ; (1 0 0 0)
56    (CONST&PUSH 11)                     ; (0 0 0 1)
57    (GETVALUE&PUSH 0)                   ; B
59    (GETVALUE&PUSH 0)                   ; B
61    (CALL 4 12)                         ; CFFUN
64    (SETVALUE 0)                        ; B
66    (GETVALUE&PUSH 5)                   ; N
68    (CALLS2&JMPIFNOT 148 L82)           ; ODDP
71    (CONST&PUSH 13)                     ; (1 0 0 0)
72    (CONST&PUSH 14)                     ; (0 0 0 1)
73    (GETVALUE&PUSH 9)                   ; S
75    (GETVALUE&PUSH 0)                   ; B
77    (CALL 4 12)                         ; CFFUN
80    (SETVALUE 9)                        ; S
82    L82
82    (GETVALUE&PUSH 5)                   ; N
84    (CONST&PUSH 6)                      ; 2
85    (CALL2 7)                           ; QUOT
87    (SETVALUE 5)                        ; N
89    L89
89    (GETVALUE&PUSH 5)                   ; N
91    (CALLS2&JMPIFNOT 145 L55)           ; ZEROP
94    (GETVALUE&PUSH 1)                   ; E
96    (CALLS2&JMPIFNOT 8 L106)            ; NUMBERP
99    (GETVALUE&PUSH 1)                   ; E
101   (CONST&PUSH 15)                     ; 0
102   (CALLSR&JMPIF 1 48 L51)             ; >
106   L106
106   (CONST&PUSH 16)                     ; (0 0 0 1)
107   (CONST&PUSH 17)                     ; (0 1 0 0)
108   (GETVALUE&PUSH 0)                   ; B
110   (CONST&PUSH 18)                     ; (1)
111   (CALL 4 12)                         ; CFFUN
114   (JMPIF L117)
116   (NIL)
117   L117
117   (PUSH)
118   (CALL1 19)                          ; MAKCF
120   (UNBIND 2)
122   (SKIP 1)
124   (UNBIND1)
125   (JMPIF1 L128)
127   (NIL)
128   L128
128   (UNBIND 2)
130   (SKIP&RET 3)


Disassembly of function #:|(DEFUN CONF1 (F G A ...) ...)-67|
(CONST 0) = CONF1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONF1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONF1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONF1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONF1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONF1
8     (SKIP&RET 1)


Disassembly of function CONF1
(CONST 0) = F
(CONST 1) = G
(CONST 2) = A
(CONST 3) = B
(CONST 4) = CONF2
(CONST 5) = 2147483648
(CONST 6) = SIGNUM
(CONST 7) = X
(CONST 8) = Y
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X F B A G)
49 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; F
3     (LOAD 6)
4     (BIND 1)                            ; G
6     (LOAD 8)
7     (BIND 2)                            ; A
9     (LOAD 10)
10    (BIND 3)                            ; B
12    (GETVALUE&PUSH 1)                   ; G
14    (GETVALUE&PUSH 2)                   ; A
16    (GETVALUE&PUSH 3)                   ; B
18    (CALL&PUSH 3 4)                     ; CONF2
21    (LOAD&PUSH 0)
22    (CALLS2&JMPIF 145 L64)              ; ZEROP
25    (GETVALUE&PUSH 0)                   ; F
27    (GETVALUE&PUSH 2)                   ; A
29    (GETVALUE&PUSH 3)                   ; B
31    (CALL 3 4)                          ; CONF2
34    (BIND 7)                            ; X
36    (LOAD 3)
37    (BIND 8)                            ; Y
39    (GETVALUE&PUSH 7)                   ; X
41    (CALLS2&JMPIFNOT 12 L49)            ; INTEGERP
44    (GETVALUE&PUSH 8)                   ; Y
46    (CALLS2&JMPIF 12 L81)               ; INTEGERP
49    L49
49    (GETVALUE&PUSH 7)                   ; X
51    (GETVALUE&PUSH 8)                   ; Y
53    (CALLSR 1 56)                       ; /
56    L56
56    (UNBIND 2)
58    L58
58    (SKIP 1)
60    (UNBIND 4)
62    (SKIP&RET 5)
64    L64
64    (CONST&PUSH 5)                      ; 2147483648
65    (GETVALUE&PUSH 0)                   ; F
67    (GETVALUE&PUSH 2)                   ; A
69    (GETVALUE&PUSH 3)                   ; B
71    (CALL&PUSH 3 4)                     ; CONF2
74    (CALL1&PUSH 6)                      ; SIGNUM
76    (CALLSR 2 55)                       ; *
79    (JMP L58)
81    L81
81    (GETVALUE&PUSH 7)                   ; X
83    (GETVALUE&PUSH 8)                   ; Y
85    (CALLS2 181)                        ; TRUNCATE
87    (JMP L56)


Disassembly of function #:|(DEFUN CONF2 (N A B) ...)-68|
(CONST 0) = CONF2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONF2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONF2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONF2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONF2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONF2
8     (SKIP&RET 1)


Disassembly of function CONF2
(CONST 0) = N
(CONST 1) = A
(CONST 2) = B
(CONST 3) = 2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A N)
32 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; A
6     (LOAD 7)
7     (BIND 2)                            ; B
9     (CONST&PUSH 3)                      ; 2
10    (GETVALUE 0)                        ; N
12    (CAR&PUSH)
13    (GETVALUE&PUSH 1)                   ; A
15    (GETVALUE&PUSH 2)                   ; B
17    (CALLSR&PUSH 3 55)                  ; *
20    (GETVALUE 0)                        ; N
22    (CDR)
23    (CAR&PUSH)
24    (GETVALUE&PUSH 1)                   ; A
26    (CALLSR&PUSH 2 55)                  ; *
29    (GETVALUE 0)                        ; N
31    (CDR)
32    (CDR)
33    (CAR&PUSH)
34    (GETVALUE&PUSH 2)                   ; B
36    (CALLSR&PUSH 2 55)                  ; *
39    (GETVALUE 0)                        ; N
41    (CDR)
42    (CDR)
43    (CDR)
44    (CAR&PUSH)
45    (CALLSR&PUSH 4 53)                  ; +
48    (CALLSR 2 55)                       ; *
51    (UNBIND 3)
53    (SKIP&RET 4)


Disassembly of function #:|(DEFUN CF-CONVERGENTS-P-Q (CF &OPTIONAL # ...) ...)-69|
(CONST 0) = CF-CONVERGENTS-P-Q
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = FUNCTION
(CONST 3) = 
"returns two lists such that pp_i/qq_i is the quotient of the first i terms
   of cf"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
(CONST 5) = #<COMPILED-CLOSURE CF-CONVERGENTS-P-Q>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; CF-CONVERGENTS-P-Q
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CF-CONVERGENTS-P-Q
4     (CONST&PUSH 2)                      ; FUNCTION
5     (CONST&PUSH 3)                      ; "returns two lists such that pp_i/qq_i is the quotient of the first i terms
   of cf"
6     (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
9     (CONST&PUSH 0)                      ; CF-CONVERGENTS-P-Q
10    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE CF-CONVERGENTS-P-Q>
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (CONST 0)                           ; CF-CONVERGENTS-P-Q
14    (SKIP&RET 1)


Disassembly of function CF-CONVERGENTS-P-Q
(CONST 0) = N
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = #<COMPILED-CLOSURE CF-CONVERGENTS-P-Q-1>
(CONST 4) = *STANDARD-OUTPUT*
(CONST 5) = PP
(CONST 6) = #<COMPILED-CLOSURE CF-CONVERGENTS-P-Q-2>
(CONST 7) = QQ
(CONST 8) = 2
(CONST 9) = SLOOP::SLOOP-TYPE-ERROR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (N *STANDARD-OUTPUT*)
93 byte-code instructions:
0     (JMPIFBOUNDP 1 L6)
3     (LOAD&PUSH 2)
4     (CALLS2 71)                         ; LENGTH
6     L6
6     (BIND 0)                            ; N
8     (PUSH-NIL 2)
10    (LOAD&PUSH 7)
11    (CALLS2&PUSH 71)                    ; LENGTH
13    (LOAD&PUSH 0)
14    (JMPIFEQTO 1 L78)                   ; 0
17    (LOAD&PUSH 0)
18    (JMPIFEQTO 2 L83)                   ; 1
21    (LOAD&CAR&PUSH 8)
23    (LOAD 9)
24    (CDR)
25    (CAR&PUSH)
26    (CALLSR&PUSH 2 55)                  ; *
29    (CALLS2&PUSH 150)                   ; 1+
31    (LOAD&CAR&PUSH 9)
33    (LIST 2)
35    (STORE 2)
36    (LOAD 8)
37    (CDR)
38    (CAR&PUSH)
39    (CONST&PUSH 2)                      ; 1
40    (LIST 2)
42    (STORE 1)
43    (CONST&PUSH 3)                      ; #<COMPILED-CLOSURE CF-CONVERGENTS-P-Q-1>
44    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
46    (CONST&PUSH 5)                      ; PP
47    (LOAD&PUSH 5)
48    (CALLSR 3 21)                       ; FUNCALL
51    (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE CF-CONVERGENTS-P-Q-2>
52    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
54    (CONST&PUSH 7)                      ; QQ
55    (LOAD&PUSH 4)
56    (CALLSR 3 21)                       ; FUNCALL
59    (LOAD 8)
60    (CDR)
61    (CDR)
62    (STORE 8)
64    (CONST&PUSH 8)                      ; 2
65    (GETVALUE&PUSH 0)                   ; N
67    (CALLS2&PUSH 150)                   ; 1+
69    (CALLS2&JMPIF 13 L74)               ; SYSTEM::FIXNUMP
72    (CALL0 9)                           ; SLOOP::SLOOP-TYPE-ERROR
74    L74
74    (GETVALUE&PUSH 0)                   ; N
76    (JMP L124)
78    L78
78    (CONST 2)                           ; 1
79    (SKIP 1)
81    (JMP L143)
83    L83
83    (CONST&PUSH 2)                      ; 1
84    (LIST 1)
86    (SKIP 1)
88    (JMP L143)
90    L90
90    (LOAD&CAR&PUSH 10)
92    (LOAD&CAR&PUSH 5)
94    (CALLSR&PUSH 2 55)                  ; *
97    (LOAD 5)
98    (CDR)
99    (CAR&PUSH)
100   (CALLSR&PUSH 2 53)                  ; +
103   (LOAD&CONS&STORE 4)
105   (LOAD&CAR&PUSH 10)
107   (LOAD&CAR&PUSH 4)
109   (CALLSR&PUSH 2 55)                  ; *
112   (LOAD 4)
113   (CDR)
114   (CAR&PUSH)
115   (CALLSR&PUSH 2 53)                  ; +
118   (LOAD&CONS&STORE 3)
120   (LOAD&CDR&STORE 10)
122   (LOAD&INC&STORE 1)
124   L124
124   (LOAD&PUSH 1)
125   (LOAD&PUSH 1)
126   (CALLSR&JMPIF 1 48 L133)            ; >
130   (LOAD&JMPIF 10 L90)
133   L133
133   (LOAD&PUSH 4)
134   (CALLS2&PUSH 72)                    ; REVERSE
136   (LOAD&PUSH 4)
137   (CALLS2&PUSH 72)                    ; REVERSE
139   (LIST 2)
141   (SKIP 3)
143   L143
143   (SKIP 2)
145   (UNBIND1)
146   (SKIP&RET 3)


Disassembly of function CF-CONVERGENTS-P-Q-1
(CONST 0) = 
"
The value of "
(CONST 1) = " is "
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
The value of "
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 5)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; " is "
11    (LOAD&PUSH 5)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 5)
18    (CALLS1 132)                        ; PRINC
20    (LOAD 1)
21    (SKIP&RET 5)


Disassembly of function CF-CONVERGENTS-P-Q-2
(CONST 0) = 
"
The value of "
(CONST 1) = " is "
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
The value of "
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 5)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; " is "
11    (LOAD&PUSH 5)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 5)
18    (CALLS1 132)                        ; PRINC
20    (LOAD 1)
21    (SKIP&RET 5)


Disassembly of function #:|(DEFUN FIND-CF1 (P Q &OPTIONAL ...) ...)-70|
(CONST 0) = FIND-CF1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIND-CF1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIND-CF1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIND-CF1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIND-CF1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIND-CF1
8     (SKIP&RET 1)


Disassembly of function FIND-CF1
(CONST 0) = P
(CONST 1) = Q
(CONST 2) = QUOT
(CONST 3) = 0
2 required arguments
3 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Q P)
42 byte-code instructions:
0     L0
0     (LOAD 5)
1     (BIND 0)                            ; P
3     (LOAD 7)
4     (BIND 1)                            ; Q
6     (UNBOUND->NIL 9)
8     (UNBOUND->NIL 8)
10    (UNBOUND->NIL 7)
12    (GETVALUE&PUSH 0)                   ; P
14    (GETVALUE&PUSH 1)                   ; Q
16    (CALL2 2)                           ; QUOT
18    (STORE 8)
20    (GETVALUE&PUSH 0)                   ; P
22    (LOAD&PUSH 9)
23    (GETVALUE&PUSH 1)                   ; Q
25    (CALLSR&PUSH 2 55)                  ; *
28    (CALLSR&STORE 1 54 7)               ; -
32    (PUSH)
33    (CONST&PUSH 3)                      ; 0
34    (CALLSR&JMPIFNOT 1 47 L62)          ; <
38    (LOAD&PUSH 7)
39    (GETVALUE&PUSH 1)                   ; Q
41    (CALLSR&STORE 2 53 7)               ; +
45    (LOAD&DEC&STORE 8)
47    L47
47    (LOAD&PUSH 8)
48    (LOAD&CONS&STORE 9)
50    (GETVALUE&PUSH 1)                   ; Q
52    (LOAD&PUSH 8)
53    (LOAD&PUSH 11)
54    (PUSH-UNBOUND 2)
56    (JSR L0)
58    L58
58    (UNBIND 2)
60    (SKIP&RET 6)
62    L62
62    (LOAD&PUSH 7)
63    (CALLS2&JMPIFNOT 145 L47)           ; ZEROP
66    (LOAD&PUSH 8)
67    (LOAD 10)
68    (CONS)
69    (JMP L58)


Disassembly of function #:|(DEFUN FIND-CF (P Q) ...)-71|
(CONST 0) = FIND-CF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = FUNCTION
(CONST 3) = "returns the continued fraction for p and q integers, q not zero"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
(CONST 5) = #<COMPILED-CLOSURE FIND-CF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIND-CF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIND-CF
4     (CONST&PUSH 2)                      ; FUNCTION
5     (CONST&PUSH 3)                      ; "returns the continued fraction for p and q integers, q not zero"
6     (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
9     (CONST&PUSH 0)                      ; FIND-CF
10    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE FIND-CF>
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (CONST 0)                           ; FIND-CF
14    (SKIP&RET 1)


Disassembly of function FIND-CF
(CONST 0) = P
(CONST 1) = Q
(CONST 2) = "quotient by zero"
(CONST 3) = 0
(CONST 4) = FIND-CF1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P Q)
writes special variables : (Q P)
25 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; Q
6     (GETVALUE&PUSH 1)                   ; Q
8     (CALLS2&JMPIF 145 L44)              ; ZEROP
11    (GETVALUE&PUSH 1)                   ; Q
13    (CONST&PUSH 3)                      ; 0
14    (CALLSR&JMPIFNOT 1 47 L32)          ; <
18    (GETVALUE&PUSH 0)                   ; P
20    (CALLSR 0 54)                       ; -
23    (SETVALUE 0)                        ; P
25    (GETVALUE&PUSH 1)                   ; Q
27    (CALLSR 0 54)                       ; -
30    (SETVALUE 1)                        ; Q
32    L32
32    (GETVALUE&PUSH 0)                   ; P
34    (GETVALUE&PUSH 1)                   ; Q
36    (CALL2&PUSH 4)                      ; FIND-CF1
38    (CALLS2 73)                         ; NREVERSE
40    (UNBIND 2)
42    (SKIP&RET 3)
44    L44
44    (CONST&PUSH 2)                      ; "quotient by zero"
45    (CALLSR 0 29)                       ; ERROR


Disassembly of function #:|(DEFUN CF-BACK-RECURRENCE (CF &AUX TEM ...) ...)-72|
(CONST 0) = CF-BACK-RECURRENCE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = FUNCTION
(CONST 3) = 
"converts CF (a continued fraction list) to a list of numerator
  denominator using  recurrence from end
  and not calculating intermediate quotients.
  The numerator and denom are relatively
   prime"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
(CONST 5) = #<COMPILED-CLOSURE CF-BACK-RECURRENCE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; CF-BACK-RECURRENCE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CF-BACK-RECURRENCE
4     (CONST&PUSH 2)                      ; FUNCTION
5     (CONST&PUSH 3)                      ; "converts CF (a continued fraction list) to a list of numerator
  denominator using  recurrence from end
  and not calculating intermediate quotients.
  The numerator and denom are relatively
   prime"
6     (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
9     (CONST&PUSH 0)                      ; CF-BACK-RECURRENCE
10    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE CF-BACK-RECURRENCE>
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (CONST 0)                           ; CF-BACK-RECURRENCE
14    (SKIP&RET 1)


Disassembly of function CF-BACK-RECURRENCE
(CONST 0) = 0
(CONST 1) = 1
(CONST 2) = V
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
writes special variable : (V)
47 byte-code instructions:
0     (NIL&PUSH)
1     (CONST&PUSH 0)                      ; 0
2     (CONST&PUSH 1)                      ; 1
3     (NIL&PUSH)
4     (LOAD&PUSH 5)
5     (CALLS2&PUSH 72)                    ; REVERSE
7     (LOAD 1)
8     (BIND 2)                            ; V
10    (LOAD&JMPIFNOT 3 L42)
13    L13
13    (LOAD&CAR&PUSH 3)
15    (LOAD 0)
16    (SETVALUE 2)                        ; V
18    (SKIP 1)
20    (LOAD&PUSH 5)
21    (GETVALUE&PUSH 2)                   ; V
23    (CALLSR&STORE 2 55 7)               ; *
27    (PUSH)
28    (LOAD&PUSH 7)
29    (CALLSR&STORE 2 53 7)               ; +
33    (LOAD 5)
34    (STORE 6)
35    (LOAD 7)
36    (STORE 5)
37    (LOAD&CDR&STORE 3)
39    (LOAD&JMPIF 3 L13)
42    L42
42    (LOAD&PUSH 5)
43    (CONST&PUSH 0)                      ; 0
44    (CALLSR&JMPIFNOT 1 49 L54)          ; <=
48    (LOAD&PUSH 6)
49    (CONST&PUSH 0)                      ; 0
50    (CALLSR&JMPIF 1 47 L62)             ; <
54    L54
54    (LOAD&PUSH 5)
55    (LOAD 7)
56    L56
56    (PUSH)
57    (LIST 2)
59    (UNBIND1)
60    (SKIP&RET 7)
62    L62
62    (LOAD&PUSH 5)
63    (CALLSR&PUSH 0 54)                  ; -
66    (LOAD&PUSH 7)
67    (CALLSR 0 54)                       ; -
70    (JMP L56)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL W))-73|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN CFFUN (F G A ...) ...)-74|
(CONST 0) = CFFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFFUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFFUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFFUN
8     (SKIP&RET 1)


Disassembly of function CFFUN
(CONST 0) = F
(CONST 1) = G
(CONST 2) = A
(CONST 3) = B
(CONST 4) = C
(CONST 5) = V
(CONST 6) = W
(CONST 7) = CONF1
(CONST 8) = X
(CONST 9) = Y
(CONST 10) = CONF6
(CONST 11) = CONF7
(CONST 12) = CONF4
(CONST 13) = CONF5
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W Y X C V B A G F)
writes special variables : (A B G C F V W)
208 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; F
3     (LOAD 6)
4     (BIND 1)                            ; G
6     (LOAD 8)
7     (BIND 2)                            ; A
9     (LOAD 10)
10    (BIND 3)                            ; B
12    (NIL)
13    (BIND 4)                            ; C
15    (NIL)
16    (BIND 5)                            ; V
18    (NIL)
19    (BIND 6)                            ; W
21    (JMP L348)
24    L24
24    (GETVALUE&PUSH 0)                   ; F
26    (GETVALUE&PUSH 1)                   ; G
28    (GETVALUE 2)                        ; A
30    (CAR&PUSH)
31    (GETVALUE 3)                        ; B
33    (CAR&PUSH)
34    (CALLS2&PUSH 150)                   ; 1+
36    (CALL 4 7)                          ; CONF1
39    (SETVALUE 6)                        ; W
41    (PUSH)
42    (GETVALUE&PUSH 0)                   ; F
44    (GETVALUE&PUSH 1)                   ; G
46    (GETVALUE 2)                        ; A
48    (CAR&PUSH)
49    (GETVALUE 3)                        ; B
51    (CAR&PUSH)
52    (CALL 4 7)                          ; CONF1
55    (SETVALUE 5)                        ; V
57    (PUSH)
58    (CALLS2&JMPIFNOT 2 L266)            ; EQUAL
62    (GETVALUE&PUSH 0)                   ; F
64    (GETVALUE&PUSH 1)                   ; G
66    (GETVALUE 2)                        ; A
68    (CAR&PUSH)
69    (CALLS2&PUSH 150)                   ; 1+
71    (GETVALUE 3)                        ; B
73    (CAR&PUSH)
74    (CALL&PUSH 4 7)                     ; CONF1
77    (GETVALUE&PUSH 5)                   ; V
79    (CALLS2&JMPIFNOT 2 L266)            ; EQUAL
83    (GETVALUE&PUSH 0)                   ; F
85    (GETVALUE&PUSH 1)                   ; G
87    (GETVALUE 2)                        ; A
89    (CAR&PUSH)
90    (CALLS2&PUSH 150)                   ; 1+
92    (GETVALUE 3)                        ; B
94    (CAR&PUSH)
95    (CALLS2&PUSH 150)                   ; 1+
97    (CALL&PUSH 4 7)                     ; CONF1
100   (GETVALUE&PUSH 5)                   ; V
102   (CALLS2&JMPIFNOT 2 L266)            ; EQUAL
106   (NIL&PUSH)
107   (GETVALUE&PUSH 0)                   ; F
109   (GETVALUE 1)                        ; G
111   (SETVALUE 0)                        ; F
113   (PUSH)
114   (JMP L243)
117   L117
117   (SKIP 2)
119   (JMP L256)
122   L122
122   (GETVALUE&PUSH 5)                   ; V
124   (GETVALUE 4)                        ; C
126   (CONS)
127   (SETVALUE 4)                        ; C
129   (JMP L348)
132   L132
132   (GETVALUE&PUSH 0)                   ; F
134   (GETVALUE&PUSH 3)                   ; B
136   (CALL2 10)                          ; CONF6
138   (SETVALUE 0)                        ; F
140   (GETVALUE&PUSH 1)                   ; G
142   (GETVALUE&PUSH 3)                   ; B
144   (CALL2 10)                          ; CONF6
146   (SETVALUE 1)                        ; G
148   (GETVALUE 5)                        ; V
150   (SETVALUE 3)                        ; B
152   (JMP L348)
155   L155
155   (GETVALUE 3)                        ; B
157   (CDR)
158   (SETVALUE 5)                        ; V
160   (JMPIF L132)
162   (GETVALUE&PUSH 0)                   ; F
164   (GETVALUE&PUSH 3)                   ; B
166   (CALL2 11)                          ; CONF7
168   (SETVALUE 0)                        ; F
170   (GETVALUE&PUSH 1)                   ; G
172   (GETVALUE&PUSH 3)                   ; B
174   (CALL2 11)                          ; CONF7
176   (SETVALUE 1)                        ; G
178   (JMP L348)
181   L181
181   (GETVALUE&PUSH 0)                   ; F
183   (GETVALUE&PUSH 2)                   ; A
185   (CALL2 12)                          ; CONF4
187   (SETVALUE 0)                        ; F
189   (GETVALUE&PUSH 1)                   ; G
191   (GETVALUE&PUSH 2)                   ; A
193   (CALL2 12)                          ; CONF4
195   (SETVALUE 1)                        ; G
197   (GETVALUE 5)                        ; V
199   (SETVALUE 2)                        ; A
201   (JMP L348)
204   L204
204   (LOAD&CAR&PUSH 1)
206   (LOAD 1)
207   (BIND 2)                            ; A
209   (LOAD 3)
210   (BIND 3)                            ; B
212   (GETVALUE 2)                        ; A
214   (BIND 8)                            ; X
216   (GETVALUE&PUSH 5)                   ; V
218   (GETVALUE&PUSH 3)                   ; B
220   (CALLSR 2 55)                       ; *
223   (BIND 9)                            ; Y
225   (GETVALUE&PUSH 8)                   ; X
227   (GETVALUE&PUSH 9)                   ; Y
229   (CALLSR 1 54)                       ; -
232   (UNBIND 4)
234   (PUSH)
235   (LOAD&CONS&STORE 4)
237   (SKIP 2)
239   (LOAD&CDR&STORE 1)
241   (LOAD&CDR&STORE 0)
243   L243
243   (LOAD&PUSH 1)
244   (CALLS1&JMPIF 146 L117)             ; ENDP
248   (LOAD&CAR&PUSH 1)
250   (LOAD&PUSH 1)
251   (CALLS1&JMPIFNOT 146 L204)          ; ENDP
254   (SKIP 3)
256   L256
256   (LOAD&PUSH 0)
257   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
259   (SKIP 1)
261   (SETVALUE 1)                        ; G
263   (JMPIF L122)
266   L266
266   (GETVALUE&PUSH 0)                   ; F
268   (GETVALUE&PUSH 1)                   ; G
270   (GETVALUE 2)                        ; A
272   (CAR&PUSH)
273   (CALLS2&PUSH 150)                   ; 1+
275   (GETVALUE 3)                        ; B
277   (CAR&PUSH)
278   (CALL 4 7)                          ; CONF1
281   (BIND 8)                            ; X
283   (GETVALUE 5)                        ; V
285   (BIND 9)                            ; Y
287   (GETVALUE&PUSH 8)                   ; X
289   (GETVALUE&PUSH 9)                   ; Y
291   (CALLSR 1 54)                       ; -
294   (UNBIND 2)
296   (PUSH)
297   (CALLS2&PUSH 158)                   ; ABS
299   (GETVALUE 6)                        ; W
301   (BIND 8)                            ; X
303   (GETVALUE 5)                        ; V
305   (BIND 9)                            ; Y
307   (GETVALUE&PUSH 8)                   ; X
309   (GETVALUE&PUSH 9)                   ; Y
311   (CALLSR 1 54)                       ; -
314   (UNBIND 2)
316   (PUSH)
317   (CALLS2&PUSH 158)                   ; ABS
319   (CALLSR&JMPIF 1 47 L155)            ; <
324   (GETVALUE 2)                        ; A
326   (CDR)
327   (SETVALUE 5)                        ; V
329   (JMPIF L181)
332   (GETVALUE&PUSH 0)                   ; F
334   (GETVALUE&PUSH 2)                   ; A
336   (CALL2 13)                          ; CONF5
338   (SETVALUE 0)                        ; F
340   (GETVALUE&PUSH 1)                   ; G
342   (GETVALUE&PUSH 2)                   ; A
344   (CALL2 13)                          ; CONF5
346   (SETVALUE 1)                        ; G
348   L348
348   (GETVALUE 1)                        ; G
350   (CDR)
351   (CDR)
352   (CDR)
353   (CAR&PUSH)
354   (CALLS2&JMPIFNOT 145 L24)           ; ZEROP
358   (GETVALUE 1)                        ; G
360   (CDR)
361   (CDR)
362   (CAR&PUSH)
363   (CALLS2&JMPIFNOT 145 L24)           ; ZEROP
367   (GETVALUE 1)                        ; G
369   (CDR)
370   (CAR&PUSH)
371   (CALLS2&JMPIFNOT 145 L24)           ; ZEROP
375   (GETVALUE 1)                        ; G
377   (CAR&PUSH)
378   (CALLS2&JMPIFNOT 145 L24)           ; ZEROP
382   (GETVALUE&PUSH 4)                   ; C
384   (CALLS2 72)                         ; REVERSE
386   (UNBIND 7)
388   (SKIP&RET 5)


Disassembly of function #:|(DEFUN CONF4 (N A) ...)-75|
(CONST 0) = CONF4
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONF4>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONF4
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONF4
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONF4>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONF4
8     (SKIP&RET 1)


Disassembly of function CONF4
(CONST 0) = N
(CONST 1) = A
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A N)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; A
6     (GETVALUE 0)                        ; N
8     (CAR&PUSH)
9     (GETVALUE 1)                        ; A
11    (CAR&PUSH)
12    (CALLSR&PUSH 2 55)                  ; *
15    (GETVALUE 0)                        ; N
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CALLSR&PUSH 2 53)                  ; +
23    (GETVALUE 0)                        ; N
25    (CDR)
26    (CAR&PUSH)
27    (GETVALUE 1)                        ; A
29    (CAR&PUSH)
30    (CALLSR&PUSH 2 55)                  ; *
33    (GETVALUE 0)                        ; N
35    (CDR)
36    (CDR)
37    (CDR)
38    (CAR&PUSH)
39    (CALLSR&PUSH 2 53)                  ; +
42    (GETVALUE 0)                        ; N
44    (CAR&PUSH)
45    (GETVALUE 0)                        ; N
47    (CDR)
48    (CAR&PUSH)
49    (LIST 4)
51    (UNBIND 2)
53    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CONF5 (N A) ...)-76|
(CONST 0) = CONF5
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONF5>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONF5
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONF5
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONF5>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONF5
8     (SKIP&RET 1)


Disassembly of function CONF5
(CONST 0) = N
(CONST 1) = A
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A N)
31 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; A
6     (CONST&PUSH 2)                      ; 0
7     (CONST&PUSH 2)                      ; 0
8     (GETVALUE 0)                        ; N
10    (CAR&PUSH)
11    (GETVALUE 1)                        ; A
13    (CAR&PUSH)
14    (CALLSR&PUSH 2 55)                  ; *
17    (GETVALUE 0)                        ; N
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (CALLSR&PUSH 2 53)                  ; +
25    (GETVALUE 0)                        ; N
27    (CDR)
28    (CAR&PUSH)
29    (GETVALUE 1)                        ; A
31    (CAR&PUSH)
32    (CALLSR&PUSH 2 55)                  ; *
35    (GETVALUE 0)                        ; N
37    (CDR)
38    (CDR)
39    (CDR)
40    (CAR&PUSH)
41    (CALLSR&PUSH 2 53)                  ; +
44    (LIST 4)
46    (UNBIND 2)
48    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CONF6 (N B) ...)-77|
(CONST 0) = CONF6
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONF6>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONF6
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONF6
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONF6>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONF6
8     (SKIP&RET 1)


Disassembly of function CONF6
(CONST 0) = N
(CONST 1) = B
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B N)
35 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE 0)                        ; N
8     (CAR&PUSH)
9     (GETVALUE 1)                        ; B
11    (CAR&PUSH)
12    (CALLSR&PUSH 2 55)                  ; *
15    (GETVALUE 0)                        ; N
17    (CDR)
18    (CAR&PUSH)
19    (CALLSR&PUSH 2 53)                  ; +
22    (GETVALUE 0)                        ; N
24    (CAR&PUSH)
25    (GETVALUE 0)                        ; N
27    (CDR)
28    (CDR)
29    (CAR&PUSH)
30    (GETVALUE 1)                        ; B
32    (CAR&PUSH)
33    (CALLSR&PUSH 2 55)                  ; *
36    (GETVALUE 0)                        ; N
38    (CDR)
39    (CDR)
40    (CDR)
41    (CAR&PUSH)
42    (CALLSR&PUSH 2 53)                  ; +
45    (GETVALUE 0)                        ; N
47    (CDR)
48    (CDR)
49    (CAR&PUSH)
50    (LIST 4)
52    (UNBIND 2)
54    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CONF7 (N B) ...)-78|
(CONST 0) = CONF7
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONF7>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONF7
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONF7
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONF7>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONF7
8     (SKIP&RET 1)


Disassembly of function CONF7
(CONST 0) = N
(CONST 1) = B
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B N)
31 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (CONST&PUSH 2)                      ; 0
7     (GETVALUE 0)                        ; N
9     (CAR&PUSH)
10    (GETVALUE 1)                        ; B
12    (CAR&PUSH)
13    (CALLSR&PUSH 2 55)                  ; *
16    (GETVALUE 0)                        ; N
18    (CDR)
19    (CAR&PUSH)
20    (CALLSR&PUSH 2 53)                  ; +
23    (CONST&PUSH 2)                      ; 0
24    (GETVALUE 0)                        ; N
26    (CDR)
27    (CDR)
28    (CAR&PUSH)
29    (GETVALUE 1)                        ; B
31    (CAR&PUSH)
32    (CALLSR&PUSH 2 55)                  ; *
35    (GETVALUE 0)                        ; N
37    (CDR)
38    (CDR)
39    (CDR)
40    (CAR&PUSH)
41    (CALLSR&PUSH 2 53)                  ; +
44    (LIST 4)
46    (UNBIND 2)
48    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CFSQRT (N) ...)-79|
(CONST 0) = CFSQRT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFSQRT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFSQRT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFSQRT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFSQRT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFSQRT
8     (SKIP&RET 1)


Disassembly of function CFSQRT
(CONST 0) = N
(CONST 1) = "Can't take square roots of non-integers yet"
(CONST 2) = MERROR
(CONST 3) = SQCONT
(CONST 4) = $CFLENGTH
(CONST 5) = 1
(CONST 6) = (MLIST SIMP)
(CONST 7) = 2
(CONST 8) = A
(CONST 9) = (MLIST SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A $CFLENGTH N)
writes special variable : (N)
52 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE 0)                        ; N
5     (CDR)
6     (CDR)
7     (JMPIF L38)
9     (GETVALUE 0)                        ; N
11    (CDR)
12    (CAR)
13    (SETVALUE 0)                        ; N
15    L15
15    (GETVALUE&PUSH 0)                   ; N
17    (CALL1 3)                           ; SQCONT
19    (SETVALUE 0)                        ; N
21    (GETVALUE&PUSH 4)                   ; $CFLENGTH
23    (CONST&PUSH 5)                      ; 1
24    (CALLSR&JMPIF 1 45 L43)             ; =
28    (CONST&PUSH 7)                      ; 2
29    (GETVALUE 0)                        ; N
31    (CDR&PUSH)
32    (CALLS1 161)                        ; COPY-TREE
34    (BIND 8)                            ; A
36    (JMP L62)
38    L38
38    (CONST&PUSH 1)                      ; "Can't take square roots of non-integers yet"
39    (CALL1 2)                           ; MERROR
41    (JMP L15)
43    L43
43    (CONST&PUSH 6)                      ; (MLIST SIMP)
44    (GETVALUE 0)                        ; N
46    (CONS)
47    (JMP L77)
49    L49
49    (GETVALUE&PUSH 0)                   ; N
51    (GETVALUE&PUSH 8)                   ; A
53    (CALLS1&PUSH 161)                   ; COPY-TREE
55    (CALLSR 2 35)                       ; NCONC
58    (SETVALUE 0)                        ; N
60    (LOAD&INC&STORE 3)
62    L62
62    (LOAD&PUSH 3)
63    (GETVALUE&PUSH 4)                   ; $CFLENGTH
65    (CALLSR&JMPIFNOT 1 48 L49)          ; >
69    (CONST&PUSH 9)                      ; (MLIST SIMP)
70    (GETVALUE 0)                        ; N
72    (CONS)
73    (UNBIND1)
74    (SKIP 1)
76    (VALUES1)
77    L77
77    (UNBIND1)
78    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $QUNIT (N) ...)-80|
(CONST 0) = $QUNIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $QUNIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $QUNIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $QUNIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $QUNIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $QUNIT
8     (SKIP&RET 1)


Disassembly of function $QUNIT
(CONST 0) = N
(CONST 1) = SQCONT
(CONST 2) = L
(CONST 3) = (MPLUS)
(CONST 4) = 0
(CONST 5) = 1
(CONST 6) = PELSO1
(CONST 7) = (MTIMES)
(CONST 8) = (MEXPT)
(CONST 9) = ((RAT) 1 2)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L N)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (CALL1 1)                           ; SQCONT
7     (BIND 2)                            ; L
9     (CONST&PUSH 3)                      ; (MPLUS)
10    (GETVALUE&PUSH 2)                   ; L
12    (CONST&PUSH 4)                      ; 0
13    (CONST&PUSH 5)                      ; 1
14    (CALL&PUSH 3 6)                     ; PELSO1
17    (CONST&PUSH 7)                      ; (MTIMES)
18    (CONST&PUSH 8)                      ; (MEXPT)
19    (GETVALUE&PUSH 0)                   ; N
21    (CONST&PUSH 9)                      ; ((RAT) 1 2)
22    (LIST&PUSH 3)
24    (GETVALUE&PUSH 2)                   ; L
26    (CONST&PUSH 5)                      ; 1
27    (CONST&PUSH 4)                      ; 0
28    (CALL&PUSH 3 6)                     ; PELSO1
31    (LIST&PUSH 3)
33    (LIST 3)
35    (UNBIND 2)
37    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PELSO1 (L A B) ...)-81|
(CONST 0) = PELSO1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PELSO1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PELSO1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PELSO1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PELSO1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PELSO1
8     (SKIP&RET 1)


Disassembly of function PELSO1
(CONST 0) = L
(CONST 1) = A
(CONST 2) = B
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A L)
writes special variables : (B A)
26 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; A
6     (LOAD 7)
7     (BIND 2)                            ; B
9     (GETVALUE&PUSH 0)                   ; L
11    (JMP L32)
13    L13
13    (GETVALUE&PUSH 1)                   ; A
15    (LOAD&CAR&PUSH 1)
17    (GETVALUE 2)                        ; B
19    (SETVALUE 1)                        ; A
21    (PUSH)
22    (CALLSR&PUSH 2 55)                  ; *
25    (CALLSR 2 53)                       ; +
28    (SETVALUE 2)                        ; B
30    (LOAD&CDR&STORE 0)
32    L32
32    (LOAD 0)
33    (CDR)
34    (JMPIF L13)
36    (GETVALUE 2)                        ; B
38    (SKIP 1)
40    (UNBIND 3)
42    (SKIP&RET 4)


Disassembly of function #:|(DEFUN SQCONT (N) ...)-82|
(CONST 0) = SQCONT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SQCONT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQCONT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SQCONT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SQCONT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SQCONT
8     (SKIP&RET 1)


Disassembly of function SQCONT
(CONST 0) = N
(CONST 1) = Q
(CONST 2) = M
(CONST 3) = A
(CONST 4) = L
(CONST 5) = $ISQRT
(CONST 6) = 1
(CONST 7) = X
(CONST 8) = Y
(CONST 9) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L Q M A Y X N)
writes special variables : (Q M L A)
109 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (NIL)
4     (BIND 1)                            ; Q
6     (PUSH-NIL 2)
8     (NIL)
9     (BIND 2)                            ; M
11    (PUSH-NIL 2)
13    (NIL)
14    (BIND 3)                            ; A
16    (NIL)
17    (BIND 4)                            ; L
19    (GETVALUE&PUSH 0)                   ; N
21    (CALL1 5)                           ; $ISQRT
23    (STORE 6)
24    (PUSH)
25    (LIST 1)
27    (SETVALUE 3)                        ; A
29    (CONST 6)                           ; 1
30    (STORE 11)
32    (LOAD 6)
33    (STORE 7)
34    (GETVALUE 0)                        ; N
36    (BIND 7)                            ; X
38    (LOAD&PUSH 10)
39    (LOAD&PUSH 11)
40    (CALLSR 2 55)                       ; *
43    (BIND 8)                            ; Y
45    (GETVALUE&PUSH 7)                   ; X
47    (GETVALUE&PUSH 8)                   ; Y
49    (CALLSR 1 54)                       ; -
52    (UNBIND 2)
54    (STORE 12)
56    (CONST&PUSH 9)                      ; 2
57    (LOAD&PUSH 7)
58    (CALLSR 2 55)                       ; *
61    (SETVALUE 4)                        ; L
63    (JMP L137)
66    L66
66    (GETVALUE&PUSH 7)                   ; X
68    (GETVALUE&PUSH 8)                   ; Y
70    (CALLS2 181)                        ; TRUNCATE
72    (JMP L166)
75    L75
75    (GETVALUE 3)                        ; A
77    (CAR&PUSH)
78    (LOAD&PUSH 13)
79    (CALLSR 2 55)                       ; *
82    (BIND 7)                            ; X
84    (LOAD 10)
85    (BIND 8)                            ; Y
87    (GETVALUE&PUSH 7)                   ; X
89    (GETVALUE&PUSH 8)                   ; Y
91    (CALLSR 1 54)                       ; -
94    (UNBIND 2)
96    (SETVALUE 2)                        ; M
98    (LOAD&PUSH 11)
99    (GETVALUE 3)                        ; A
101   (CAR&PUSH)
102   (LOAD 9)
103   (BIND 7)                            ; X
105   (GETVALUE 2)                        ; M
107   (BIND 8)                            ; Y
109   (GETVALUE&PUSH 7)                   ; X
111   (GETVALUE&PUSH 8)                   ; Y
113   (CALLSR 1 54)                       ; -
116   (UNBIND 2)
118   (PUSH)
119   (CALLSR&PUSH 2 55)                  ; *
122   (CALLSR 2 53)                       ; +
125   (SETVALUE 1)                        ; Q
127   (LOAD 12)
128   (STORE 11)
130   (GETVALUE 1)                        ; Q
132   (STORE 12)
134   (GETVALUE 2)                        ; M
136   (STORE 7)
137   L137
137   (LOAD&PUSH 7)
138   (LOAD&PUSH 7)
139   (CALLSR 2 53)                       ; +
142   (BIND 7)                            ; X
144   (LOAD 15)
146   (BIND 8)                            ; Y
148   (GETVALUE&PUSH 7)                   ; X
150   (CALLS2&JMPIFNOT 12 L159)           ; INTEGERP
153   (GETVALUE&PUSH 8)                   ; Y
155   (CALLS2&JMPIF 12 L66)               ; INTEGERP
159   L159
159   (GETVALUE&PUSH 7)                   ; X
161   (GETVALUE&PUSH 8)                   ; Y
163   (CALLSR 1 56)                       ; /
166   L166
166   (UNBIND 2)
168   (PUSH)
169   (GETVALUE 3)                        ; A
171   (CONS)
172   (SETVALUE 3)                        ; A
174   (CAR&PUSH)
175   (GETVALUE&PUSH 4)                   ; L
177   (CALLS2&JMPIFNOT 2 L75)             ; EQUAL
181   (GETVALUE&PUSH 3)                   ; A
183   (CALLS2 73)                         ; NREVERSE
185   (UNBIND 2)
187   (SKIP 2)
189   (UNBIND1)
190   (SKIP 2)
192   (UNBIND 2)
194   (SKIP&RET 2)


Disassembly of function #:|(DEFUN RATCF (X Y) ...)-83|
(CONST 0) = RATCF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATCF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATCF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATCF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATCF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATCF
8     (SKIP&RET 1)


Disassembly of function RATCF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = A
(CONST 3) = B
(CONST 4) = 1
(CONST 5) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A Y X)
writes special variables : (Y X A B)
103 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; B
12    (JMP L101)
15    L15
15    (GETVALUE 0)                        ; X
17    (JMP L176)
20    L20
20    (GETVALUE&PUSH 0)                   ; X
22    (GETVALUE&PUSH 1)                   ; Y
24    (CALLS2 181)                        ; TRUNCATE
26    (JMP L66)
28    L28
28    (GETVALUE&PUSH 1)                   ; Y
30    (GETVALUE&PUSH 0)                   ; X
32    (GETVALUE&PUSH 1)                   ; Y
34    (CALLS2&PUSH 184)                   ; REM
36    (CALLSR 2 53)                       ; +
39    (SETVALUE 3)                        ; B
41    (GETVALUE 0)                        ; X
43    (BIND 0)                            ; X
45    (GETVALUE 1)                        ; Y
47    (BIND 1)                            ; Y
49    (GETVALUE&PUSH 0)                   ; X
51    (CALLS2&JMPIFNOT 12 L59)            ; INTEGERP
54    (GETVALUE&PUSH 1)                   ; Y
56    (CALLS2&JMPIF 12 L20)               ; INTEGERP
59    L59
59    (GETVALUE&PUSH 0)                   ; X
61    (GETVALUE&PUSH 1)                   ; Y
63    (CALLSR 1 56)                       ; /
66    L66
66    (UNBIND 2)
68    (PUSH)
69    (CALLS2 151)                        ; 1-
71    (JMP L166)
74    L74
74    (GETVALUE&PUSH 0)                   ; X
76    (GETVALUE&PUSH 1)                   ; Y
78    (CALLS2 181)                        ; TRUNCATE
80    (JMP L164)
83    L83
83    (CONST&PUSH 5)                      ; 0
84    (GETVALUE 2)                        ; A
86    (CONS)
87    (SETVALUE 2)                        ; A
89    (GETVALUE 0)                        ; X
91    (SETVALUE 3)                        ; B
93    L93
93    (GETVALUE 1)                        ; Y
95    (SETVALUE 0)                        ; X
97    (GETVALUE 3)                        ; B
99    (SETVALUE 1)                        ; Y
101   L101
101   (GETVALUE&PUSH 1)                   ; Y
103   (JMPIFEQTO 4 L15)                   ; 1
107   (GETVALUE&PUSH 0)                   ; X
109   (CALLS2&JMPIF 147 L28)              ; MINUSP
113   (GETVALUE&PUSH 1)                   ; Y
115   (GETVALUE&PUSH 0)                   ; X
117   (CALLSR&JMPIF 1 48 L83)             ; >
121   (GETVALUE&PUSH 0)                   ; X
123   (GETVALUE&PUSH 1)                   ; Y
125   (CALLS2&JMPIF 2 L175)               ; EQUAL
128   (GETVALUE&PUSH 0)                   ; X
130   (GETVALUE&PUSH 1)                   ; Y
132   (CALLS2 184)                        ; REM
134   (SETVALUE 3)                        ; B
136   (JMPIFNOT L101)
138   (GETVALUE 0)                        ; X
140   (BIND 0)                            ; X
142   (GETVALUE 1)                        ; Y
144   (BIND 1)                            ; Y
146   (GETVALUE&PUSH 0)                   ; X
148   (CALLS2&JMPIFNOT 12 L157)           ; INTEGERP
151   (GETVALUE&PUSH 1)                   ; Y
153   (CALLS2&JMPIF 12 L74)               ; INTEGERP
157   L157
157   (GETVALUE&PUSH 0)                   ; X
159   (GETVALUE&PUSH 1)                   ; Y
161   (CALLSR 1 56)                       ; /
164   L164
164   (UNBIND 2)
166   L166
166   (PUSH)
167   (GETVALUE 2)                        ; A
169   (CONS)
170   (SETVALUE 2)                        ; A
172   (JMP L93)
175   L175
175   (CONST 4)                           ; 1
176   L176
176   (PUSH)
177   (GETVALUE 2)                        ; A
179   (CONS&PUSH)
180   (CALLS2 73)                         ; NREVERSE
182   (UNBIND 4)
184   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $CFEXPAND (X) ...)-84|
(CONST 0) = $CFEXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CFEXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CFEXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CFEXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CFEXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CFEXPAND
8     (SKIP&RET 1)


Disassembly of function $CFEXPAND
(CONST 0) = X
(CONST 1) = $LISTP
(CONST 2) = ($MATRIX)
(CONST 3) = CFEXPAND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIFNOT 1 L18)              ; $LISTP
8     (CONST&PUSH 2)                      ; ($MATRIX)
9     (GETVALUE 0)                        ; X
11    (CDR&PUSH)
12    (CALL1 3)                           ; CFEXPAND
14    (CONS)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)
18    L18
18    (GETVALUE 0)                        ; X
20    (JMP L15)


Disassembly of function #:|(DEFUN CFEXPAND (LL) ...)-85|
(CONST 0) = CFEXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFEXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFEXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFEXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFEXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFEXPAND
8     (SKIP&RET 1)


Disassembly of function CFEXPAND
(CONST 0) = LL
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = L
(CONST 4) = (MPLUS)
(CONST 5) = (MTIMES)
(CONST 6) = SIMPLIFY
(CONST 7) = (MPLUS)
(CONST 8) = (MTIMES)
(CONST 9) = (MLIST)
(CONST 10) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L LL)
writes special variable : (L)
54 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; LL
3     (CONST&PUSH 1)                      ; 0
4     (CONST&PUSH 2)                      ; 1
5     (CONST&PUSH 2)                      ; 1
6     (CONST&PUSH 1)                      ; 0
7     (GETVALUE 0)                        ; LL
9     (BIND 3)                            ; L
11    (GETVALUE 3)                        ; L
13    (JMPIFNOT L60)
15    L15
15    (LOAD&PUSH 5)
16    (CONST&PUSH 4)                      ; (MPLUS)
17    (CONST&PUSH 5)                      ; (MTIMES)
18    (GETVALUE 3)                        ; L
20    (CAR&PUSH)
21    (LOAD&PUSH 9)
22    (LIST&PUSH 3)
24    (LOAD&PUSH 9)
25    (LIST&PUSH 3)
27    (CALL1&PUSH 6)                      ; SIMPLIFY
29    (LOAD&PUSH 5)
30    (CONST&PUSH 7)                      ; (MPLUS)
31    (CONST&PUSH 8)                      ; (MTIMES)
32    (GETVALUE 3)                        ; L
34    (CAR&PUSH)
35    (LOAD&PUSH 9)
36    (LIST&PUSH 3)
38    (LOAD&PUSH 9)
39    (LIST&PUSH 3)
41    (CALL1&PUSH 6)                      ; SIMPLIFY
43    (GETVALUE 3)                        ; L
45    (CDR)
46    (SETVALUE 3)                        ; L
48    (POP&STORE 6)
50    (POP&STORE 6)
52    (POP&STORE 6)
54    (POP&STORE 6)
56    (GETVALUE 3)                        ; L
58    (JMPIF L15)
60    L60
60    (CONST&PUSH 9)                      ; (MLIST)
61    (LOAD&PUSH 6)
62    (LOAD&PUSH 8)
63    (LIST&PUSH 3)
65    (CONST&PUSH 10)                     ; (MLIST)
66    (LOAD&PUSH 5)
67    (LOAD&PUSH 7)
68    (LIST&PUSH 3)
70    (LIST 2)
72    (UNBIND1)
73    (SKIP 4)
75    (UNBIND1)
76    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE SUM) (*EXPR SUM))-86|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(COMMENT SUMMATION STUFF)-87|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN ADSUM (E) ...)-88|
(CONST 0) = ADSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADSUM
8     (SKIP&RET 1)


Disassembly of function ADSUM
(CONST 0) = E
(CONST 1) = SIMPLIFY
(CONST 2) = SUM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SUM E)
writes special variable : (SUM)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CALL1&PUSH 1)                      ; SIMPLIFY
7     (GETVALUE 2)                        ; SUM
9     (CONS)
10    (SETVALUE 2)                        ; SUM
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ADUSUM (E) ...)-89|
(CONST 0) = ADUSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADUSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADUSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADUSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADUSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADUSUM
8     (SKIP&RET 1)


Disassembly of function ADUSUM
(CONST 0) = E
(CONST 1) = SIMPLIFY
(CONST 2) = USUM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (USUM E)
writes special variable : (USUM)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CALL1&PUSH 1)                      ; SIMPLIFY
7     (GETVALUE 2)                        ; USUM
9     (CONS)
10    (SETVALUE 2)                        ; USUM
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SIMPSUM2 (EXP I LO ...) ...)-90|
(CONST 0) = SIMPSUM2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPSUM2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPSUM2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPSUM2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPSUM2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPSUM2
8     (SKIP&RET 1)


Disassembly of function SIMPSUM2
(CONST 0) = EXP
(CONST 1) = LO
(CONST 2) = HI
(CONST 3) = *PLUS
(CONST 4) = *TIMES
(CONST 5) = $SIMPSUM
(CONST 6) = U
(CONST 7) = 0
(CONST 8) = 1
(CONST 9) = $INF
(CONST 10) = $MINF
(CONST 11) = ADD*
(CONST 12) = -1
(CONST 13) = MAXIMA-SUBSTITUTE
(CONST 14) = MUL*
(CONST 15) = $SUMHACK
(CONST 16) = SUB*
(CONST 17) = $SIGN
(CONST 18) = $NEG
(CONST 19) = "Lower bound to sum is > upper bound"
(CONST 20) = MERROR
(CONST 21) = FREE
(CONST 22) = FREESUM
(CONST 23) = ADDN
(CONST 24) = SUMSUM
(CONST 25) = DOSUM
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (U *PLUS *TIMES EXP $SUMHACK LO HI)
writes special variables : (LO $SIMPSUM EXP U *TIMES *PLUS)
133 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; LO
6     (LOAD 7)
7     (BIND 2)                            ; HI
9     (NIL)
10    (BIND 3)                            ; *PLUS
12    (NIL)
13    (BIND 4)                            ; *TIMES
15    (NIL)
16    (BIND 5)                            ; $SIMPSUM
18    (NIL)
19    (BIND 6)                            ; U
21    (CONST&PUSH 7)                      ; 0
22    (LIST 1)
24    (SETVALUE 3)                        ; *PLUS
26    (CONST 8)                           ; 1
27    (SETVALUE 4)                        ; *TIMES
29    (GETVALUE&PUSH 2)                   ; HI
31    (JMPIFNOTEQTO 9 L40)                ; $INF
34    (GETVALUE&PUSH 1)                   ; LO
36    (JMPIFEQTO 10 L141)                 ; $MINF
40    L40
40    (GETVALUE&PUSH 2)                   ; HI
42    (GETVALUE&PUSH 1)                   ; LO
44    (CALL2&PUSH 11)                     ; ADD*
46    (JMPIFEQTO 7 L141)                  ; 0
50    (GETVALUE 15)                       ; $SUMHACK
52    (JMPIF L69)
54    L54
54    (GETVALUE&PUSH 2)                   ; HI
56    (GETVALUE&PUSH 1)                   ; LO
58    (CALL2 16)                          ; SUB*
60    (SETVALUE 6)                        ; U
62    (PUSH)
63    (CALL1&PUSH 17)                     ; $SIGN
65    (JMPIFEQTO 18 L197)                 ; $NEG
69    L69
69    (GETVALUE&PUSH 0)                   ; EXP
71    (LOAD&PUSH 25)
73    (CALL2&JMPIF 21 L210)               ; FREE
77    (GETVALUE&PUSH 0)                   ; EXP
79    (LOAD&PUSH 25)
81    (GETVALUE&PUSH 1)                   ; LO
83    (GETVALUE&PUSH 2)                   ; HI
85    (CALL 4 24)                         ; SUMSUM
88    (SETVALUE 0)                        ; EXP
90    (JMPIFNOT L224)
93    (GETVALUE&PUSH 4)                   ; *TIMES
95    (GETVALUE 0)                        ; EXP
97    (CDR)
98    (CAR&PUSH)
99    (GETVALUE 0)                        ; EXP
101   (CDR)
102   (CDR)
103   (CAR&PUSH)
104   (GETVALUE 0)                        ; EXP
106   (CDR)
107   (CDR)
108   (CDR)
109   (CAR&PUSH)
110   (GETVALUE 0)                        ; EXP
112   (CDR)
113   (CDR)
114   (CDR)
115   (CDR)
116   (CAR&PUSH)
117   (T&PUSH)
118   (CALL&PUSH 5 25)                    ; DOSUM
121   (CALL2 14)                          ; MUL*
123   (SETVALUE 0)                        ; EXP
125   (GETVALUE 0)                        ; EXP
127   L127
127   (PUSH)
128   (GETVALUE 3)                        ; *PLUS
130   (CONS)
131   L131
131   (PUSH)
132   (NIL&PUSH)
133   (CALL2 23)                          ; ADDN
135   (UNBIND 4)
137   L137
137   (UNBIND 3)
139   (SKIP&RET 5)
141   L141
141   (T)
142   (SETVALUE 5)                        ; $SIMPSUM
144   (CONST 7)                           ; 0
145   (SETVALUE 1)                        ; LO
147   (CONST&PUSH 12)                     ; -1
148   (GETVALUE&PUSH 4)                   ; *TIMES
150   (CONST&PUSH 7)                      ; 0
151   (LOAD&PUSH 27)
153   (GETVALUE&PUSH 0)                   ; EXP
155   (CALL&PUSH 3 13)                    ; MAXIMA-SUBSTITUTE
158   (CALL&PUSH 3 14)                    ; MUL*
161   (GETVALUE 3)                        ; *PLUS
163   (CONS)
164   (SETVALUE 3)                        ; *PLUS
166   (GETVALUE&PUSH 0)                   ; EXP
168   (CONST&PUSH 12)                     ; -1
169   (LOAD&PUSH 26)
171   (CALL2&PUSH 14)                     ; MUL*
173   (LOAD&PUSH 26)
175   (GETVALUE&PUSH 0)                   ; EXP
177   (CALL&PUSH 3 13)                    ; MAXIMA-SUBSTITUTE
180   (CALL2 11)                          ; ADD*
182   (SETVALUE 0)                        ; EXP
184   (GETVALUE 15)                       ; $SUMHACK
186   (JMPIFNOT L54)
189   (JMP L69)
192   L192
192   (CONST 7)                           ; 0
193   (UNBIND 4)
195   (JMP L137)
197   L197
197   (GETVALUE&PUSH 6)                   ; U
199   (JMPIFEQTO 12 L192)                 ; -1
202   (CONST&PUSH 19)                     ; "Lower bound to sum is > upper bound"
203   (CALL1 20)                          ; MERROR
205   (GETVALUE 0)                        ; EXP
207   (JMP L127)
210   L210
210   (GETVALUE&PUSH 0)                   ; EXP
212   (GETVALUE&PUSH 1)                   ; LO
214   (GETVALUE&PUSH 2)                   ; HI
216   (GETVALUE&PUSH 4)                   ; *TIMES
218   (CALL 4 22)                         ; FREESUM
221   (JMP L127)
224   L224
224   (GETVALUE 3)                        ; *PLUS
226   (JMP L131)


Disassembly of function #:|(DEFUN SUMSUM (E *VAR* LO ...) ...)-91|
(CONST 0) = SUMSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUMSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUMSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUMSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUMSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUMSUM
8     (SKIP&RET 1)


Disassembly of function SUMSUM
(CONST 0) = E
(CONST 1) = *VAR*
(CONST 2) = LO
(CONST 3) = HI
(CONST 4) = SUM
(CONST 5) = USUM
(CONST 6) = $INF
(CONST 7) = *INFSUMSIMP
(CONST 8) = ISUM
(CONST 9) = 1
(CONST 10) = (%SUM)
(CONST 11) = Q
(CONST 12) = (MTIMES)
(CONST 13) = *TIMES
(CONST 14) = SIMPTIMES
(CONST 15) = *PLUS
(CONST 16) = (%SUM)
(CONST 17) = (PLUS)
(CONST 18) = SIMPLUS
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (USUM *PLUS Q *TIMES LO *VAR* *INFSUMSIMP SUM E HI)
writes special variables : (*PLUS USUM)
90 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; E
3     (LOAD 6)
4     (BIND 1)                            ; *VAR*
6     (LOAD 8)
7     (BIND 2)                            ; LO
9     (LOAD 10)
10    (BIND 3)                            ; HI
12    (NIL)
13    (BIND 4)                            ; SUM
15    (NIL)
16    (BIND 5)                            ; USUM
18    (GETVALUE&PUSH 3)                   ; HI
20    (JMPIFEQTO 6 L48)                   ; $INF
23    (GETVALUE&PUSH 0)                   ; E
25    (CONST&PUSH 9)                      ; 1
26    (CALL2 4)                           ; SUM
28    (GETVALUE 4)                        ; SUM
30    (JMPIFNOT L62)
32    L32
32    (NIL&PUSH)
33    (GETVALUE&PUSH 4)                   ; SUM
35    (JMP L103)
38    L38
38    (GETVALUE&PUSH 0)                   ; E
40    (CALL1 8)                           ; ISUM
42    (GETVALUE 4)                        ; SUM
44    (JMPIFNOT L62)
46    (JMP L32)
48    L48
48    (GETVALUE 7)                        ; *INFSUMSIMP
50    (JMPIF L38)
52    (GETVALUE&PUSH 0)                   ; E
54    (LIST 1)
56    (SETVALUE 5)                        ; USUM
58    (GETVALUE 4)                        ; SUM
60    (JMPIF L32)
62    L62
62    (CONST&PUSH 10)                     ; (%SUM)
63    (GETVALUE&PUSH 0)                   ; E
65    (GETVALUE&PUSH 1)                   ; *VAR*
67    (GETVALUE&PUSH 2)                   ; LO
69    (GETVALUE&PUSH 3)                   ; HI
71    (LIST 5)
73    (UNBIND 2)
75    (JMP L146)
78    L78
78    (LOAD&CAR&PUSH 0)
80    (LOAD 0)
81    (BIND 11)                           ; Q
83    (CONST&PUSH 12)                     ; (MTIMES)
84    (GETVALUE&PUSH 13)                  ; *TIMES
86    (GETVALUE&PUSH 11)                  ; Q
88    (LIST&PUSH 3)
90    (CONST&PUSH 9)                      ; 1
91    (NIL&PUSH)
92    (CALL 3 14)                         ; SIMPTIMES
95    (UNBIND1)
96    (PUSH)
97    (LOAD&CONS&STORE 2)
99    (SKIP 1)
101   (LOAD&CDR&STORE 0)
103   L103
103   (LOAD&PUSH 0)
104   (CALLS1&JMPIFNOT 146 L78)           ; ENDP
107   (SKIP 1)
109   (LOAD&PUSH 0)
110   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
113   (GETVALUE&PUSH 15)                  ; *PLUS
115   (CALLSR 2 35)                       ; NCONC
118   (SETVALUE 15)                       ; *PLUS
120   (GETVALUE 5)                        ; USUM
122   (JMPIFNOT1 L144)
124   (CONST&PUSH 16)                     ; (%SUM)
125   (CONST&PUSH 17)                     ; (PLUS)
126   (GETVALUE 5)                        ; USUM
128   (CONS&PUSH)
129   (CONST&PUSH 9)                      ; 1
130   (T&PUSH)
131   (CALL&PUSH 3 18)                    ; SIMPLUS
134   (GETVALUE&PUSH 1)                   ; *VAR*
136   (GETVALUE&PUSH 2)                   ; LO
138   (GETVALUE&PUSH 3)                   ; HI
140   (LIST 5)
142   (SETVALUE 5)                        ; USUM
144   L144
144   (UNBIND 2)
146   L146
146   (UNBIND 4)
148   (SKIP&RET 5)


Disassembly of function #:|(DEFUN SUM (E Y) ...)-92|
(CONST 0) = SUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUM
8     (SKIP&RET 1)


Disassembly of function SUM
(CONST 0) = E
(CONST 1) = Y
(CONST 2) = *VAR*
(CONST 3) = FREE
(CONST 4) = HI
(CONST 5) = 1
(CONST 6) = -1
(CONST 7) = LO
(CONST 8) = MUL*
(CONST 9) = ADD*
(CONST 10) = ADSUM
(CONST 11) = POLY?
(CONST 12) = FPOLYSUM
(CONST 13) = %BINOMIAL
(CONST 14) = FBINO
(CONST 15) = MPLUS
(CONST 16) = Q
(CONST 17) = MTIMESP
(CONST 18) = MEXPTP
(CONST 19) = MPLUSP
(CONST 20) = FSGEO
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Q LO HI Y *VAR* E)
84 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; E
8     (NOT)
9     (JMPIF1 L140)
12    (GETVALUE&PUSH 0)                   ; E
14    (GETVALUE&PUSH 2)                   ; *VAR*
16    (CALL2&JMPIF 3 L41)                 ; FREE
19    (GETVALUE&PUSH 0)                   ; E
21    (GETVALUE&PUSH 2)                   ; *VAR*
23    (CALL2&JMPIFNOT 11 L102)            ; POLY?
27    (GETVALUE&PUSH 1)                   ; Y
29    (GETVALUE&PUSH 0)                   ; E
31    (CALL1&PUSH 12)                     ; FPOLYSUM
33    (CALL2 8)                           ; MUL*
35    L35
35    (PUSH)
36    (CALL1 10)                          ; ADSUM
38    (JMP L140)
41    L41
41    (GETVALUE&PUSH 1)                   ; Y
43    (GETVALUE&PUSH 0)                   ; E
45    (GETVALUE&PUSH 4)                   ; HI
47    (CONST&PUSH 5)                      ; 1
48    (CONST&PUSH 6)                      ; -1
49    (GETVALUE&PUSH 7)                   ; LO
51    (CALL2&PUSH 8)                      ; MUL*
53    (CALL&PUSH 3 9)                     ; ADD*
56    (CALL 3 8)                          ; MUL*
59    (JMP L35)
61    L61
61    (GETVALUE&PUSH 0)                   ; E
63    (GETVALUE&PUSH 1)                   ; Y
65    (CALL2 14)                          ; FBINO
67    (JMP L140)
70    L70
70    (GETVALUE 0)                        ; E
72    (CDR&PUSH)
73    (LOAD&PUSH 0)
74    (JMP L93)
76    L76
76    (LOAD&CAR&PUSH 0)
78    (LOAD 0)
79    (BIND 16)                           ; Q
81    (GETVALUE&PUSH 16)                  ; Q
83    (GETVALUE&PUSH 1)                   ; Y
85    (JSR L0)
88    (UNBIND1)
89    (SKIP 1)
91    (LOAD&CDR&STORE 0)
93    L93
93    (LOAD&PUSH 0)
94    (CALLS1&JMPIFNOT 146 L76)           ; ENDP
97    (SKIP 1)
99    (POP)
100   (JMP L140)
102   L102
102   (GETVALUE 0)                        ; E
104   (CAR)
105   (CAR&PUSH)
106   (JMPIFEQTO 13 L61)                  ; %BINOMIAL
109   (GETVALUE 0)                        ; E
111   (CAR)
112   (CAR&PUSH)
113   (JMPIFEQTO 15 L70)                  ; MPLUS
116   (GETVALUE&PUSH 0)                   ; E
118   (CALL1&JMPIF 17 L131)               ; MTIMESP
121   (GETVALUE&PUSH 0)                   ; E
123   (CALL1&JMPIF 18 L131)               ; MEXPTP
126   (GETVALUE&PUSH 0)                   ; E
128   (CALL1&JMPIFNOT 19 L139)            ; MPLUSP
131   L131
131   (GETVALUE&PUSH 0)                   ; E
133   (GETVALUE&PUSH 1)                   ; Y
135   (CALL2 20)                          ; FSGEO
137   (JMPIF1 L140)
139   L139
139   (NIL)
140   L140
140   (UNBIND 2)
142   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ISUM (E) ...)-93|
(CONST 0) = ISUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ISUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ISUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ISUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ISUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ISUM
8     (SKIP&RET 1)


Disassembly of function ISUM
(CONST 0) = E
(CONST 1) = ISUMOUT
(CONST 2) = ISUM1
(CONST 3) = ($INF $UNDEFINED $MINF)
(CONST 4) = MEMQ
(CONST 5) = SUM
(CONST 6) = USUM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
writes special variables : (USUM SUM E)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (CONST 1)                           ; ISUMOUT
4     (CATCH-OPEN L11)
6     (GETVALUE&PUSH 0)                   ; E
8     (CALL1 2)                           ; ISUM1
10    (CATCH-CLOSE)
11    L11
11    (SETVALUE 0)                        ; E
13    (PUSH)
14    (CONST&PUSH 3)                      ; ($INF $UNDEFINED $MINF)
15    (CALL2&JMPIF 4 L22)                 ; MEMQ
18    (NIL)
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (GETVALUE&PUSH 0)                   ; E
24    (LIST 1)
26    (SETVALUE 5)                        ; SUM
28    (NIL)
29    (SETVALUE 6)                        ; USUM
31    (JMP L19)


Disassembly of function #:|(DEFUN ISUM1 (E) ...)-94|
(CONST 0) = ISUM1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ISUM1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ISUM1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ISUM1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ISUM1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ISUM1
8     (SKIP&RET 1)


Disassembly of function ISUM1
(CONST 0) = E
(CONST 1) = *VAR*
(CONST 2) = FREE
(CONST 3) = ISUMOUT
(CONST 4) = $INF
(CONST 5) = RATP
(CONST 6) = IPOLYSUM
(CONST 7) = ADSUM
(CONST 8) = MPLUS
(CONST 9) = ISUM1
(CONST 10) = ISGEO
(CONST 11) = ADUSUM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*VAR* E)
39 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (GETVALUE&PUSH 1)                   ; *VAR*
7     (CALL2&JMPIF 2 L44)                 ; FREE
10    (GETVALUE 0)                        ; E
12    (JMPIFATOM L44)
14    (GETVALUE&PUSH 0)                   ; E
16    (GETVALUE&PUSH 1)                   ; *VAR*
18    (CALL2&JMPIF 5 L47)                 ; RATP
21    (GETVALUE 0)                        ; E
23    (CAR)
24    (CAR&PUSH)
25    (JMPIFEQTO 8 L55)                   ; MPLUS
28    (GETVALUE&PUSH 0)                   ; E
30    (CALL1 10)                          ; ISGEO
32    (JMPIF1 L41)
34    (GETVALUE&PUSH 0)                   ; E
36    (CALL1 11)                          ; ADUSUM
38    (JMPIF1 L41)
40    (NIL)
41    L41
41    (UNBIND1)
42    (SKIP&RET 2)
44    L44
44    (CONST&PUSH 3)                      ; ISUMOUT
45    (CONST 4)                           ; $INF
46    (THROW)
47    L47
47    (GETVALUE&PUSH 0)                   ; E
49    (CALL1&PUSH 6)                      ; IPOLYSUM
51    (CALL1 7)                           ; ADSUM
53    (JMP L41)
55    L55
55    (CONST&SYMBOL-FUNCTION&PUSH 9)      ; ISUM1
57    (GETVALUE 0)                        ; E
59    (CDR&PUSH)
60    (CALLSR 0 24)                       ; MAPC
63    (JMP L41)


Disassembly of function #:|(DEFUN IPOLYSUM (E) ...)-95|
(CONST 0) = IPOLYSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IPOLYSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IPOLYSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IPOLYSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IPOLYSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IPOLYSUM
8     (SKIP&RET 1)


Disassembly of function IPOLYSUM
(CONST 0) = E
(CONST 1) = $EXPAND
(CONST 2) = IPOLY1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CALL1&PUSH 1)                      ; $EXPAND
7     (CALL1 2)                           ; IPOLY1
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN IPOLY1 (E) ...)-96|
(CONST 0) = IPOLY1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IPOLY1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IPOLY1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IPOLY1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IPOLY1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IPOLY1
8     (SKIP&RET 1)


Disassembly of function IPOLY1
(CONST 0) = E
(CONST 1) = *VAR*
(CONST 2) = SMONO
(CONST 3) = *A
(CONST 4) = *N
(CONST 5) = (MPLUS)
(CONST 6) = 1
(CONST 7) = SIMPLIFY
(CONST 8) = ASKSIGN
(CONST 9) = IPOLY2
(CONST 10) = MPLUSP
(CONST 11) = (MPLUS)
(CONST 12) = IPOLY1
(CONST 13) = ADUSUM
(CONST 14) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*N *A *VAR* E)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (GETVALUE&PUSH 1)                   ; *VAR*
7     (CALL2&JMPIF 2 L23)                 ; SMONO
10    (GETVALUE&PUSH 0)                   ; E
12    (CALL1&JMPIF 10 L42)                ; MPLUSP
15    (GETVALUE&PUSH 0)                   ; E
17    (CALL1 13)                          ; ADUSUM
19    (CONST 14)                          ; 0
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE&PUSH 3)                   ; *A
25    (GETVALUE&PUSH 4)                   ; *N
27    (CONST&PUSH 5)                      ; (MPLUS)
28    (GETVALUE&PUSH 4)                   ; *N
30    (CONST&PUSH 6)                      ; 1
31    (LIST&PUSH 3)
33    (CALL1&PUSH 7)                      ; SIMPLIFY
35    (CALL1&PUSH 8)                      ; ASKSIGN
37    (CALL 3 9)                          ; IPOLY2
40    (JMP L20)
42    L42
42    (CONST&PUSH 11)                     ; (MPLUS)
43    (CONST&SYMBOL-FUNCTION&PUSH 12)     ; IPOLY1
45    (GETVALUE 0)                        ; E
47    (CDR&PUSH)
48    (CALLSR 0 22)                       ; MAPCAR
51    (CONS)
52    (JMP L20)


Disassembly of function #:|(DEFUN IPOLY2 (A N SIGN) ...)-97|
(CONST 0) = IPOLY2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IPOLY2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IPOLY2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IPOLY2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IPOLY2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IPOLY2
8     (SKIP&RET 1)


Disassembly of function IPOLY2
(CONST 0) = A
(CONST 1) = N
(CONST 2) = SIGN
(CONST 3) = LO
(CONST 4) = ASKSIGN
(CONST 5) = ($ZERO $NEGATIVE)
(CONST 6) = MEMQ
(CONST 7) = ISUMOUT
(CONST 8) = $INF
(CONST 9) = 1
(CONST 10) = (%SUM)
(CONST 11) = (MTIMES)
(CONST 12) = -1
(CONST 13) = (MEXPT)
(CONST 14) = *VAR*
(CONST 15) = (MPLUS)
(CONST 16) = ADSUM
(CONST 17) = $NEGATIVE
(CONST 18) = (MTIMES)
(CONST 19) = (MTIMES)
(CONST 20) = MEVAL
(CONST 21) = $ZETA
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN N *VAR* A LO)
51 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; SIGN
9     (GETVALUE&PUSH 3)                   ; LO
11    (CALL1&PUSH 4)                      ; ASKSIGN
13    (CONST&PUSH 5)                      ; ($ZERO $NEGATIVE)
14    (CALL2&JMPIF 6 L73)                 ; MEMQ
17    (GETVALUE&PUSH 3)                   ; LO
19    (JMPIFEQTO 9 L49)                   ; 1
22    (CONST&PUSH 10)                     ; (%SUM)
23    (CONST&PUSH 11)                     ; (MTIMES)
24    (GETVALUE&PUSH 0)                   ; A
26    (CONST&PUSH 12)                     ; -1
27    (CONST&PUSH 13)                     ; (MEXPT)
28    (GETVALUE&PUSH 14)                  ; *VAR*
30    (GETVALUE&PUSH 1)                   ; N
32    (LIST&PUSH 3)
34    (LIST&PUSH 4)
36    (GETVALUE&PUSH 14)                  ; *VAR*
38    (CONST&PUSH 9)                      ; 1
39    (CONST&PUSH 15)                     ; (MPLUS)
40    (CONST&PUSH 12)                     ; -1
41    (GETVALUE&PUSH 3)                   ; LO
43    (LIST&PUSH 3)
45    (LIST&PUSH 5)
47    (CALL1 16)                          ; ADSUM
49    L49
49    (GETVALUE&PUSH 2)                   ; SIGN
51    (JMPIFNOTEQTO 17 L76)               ; $NEGATIVE
54    (CONST&PUSH 18)                     ; (MTIMES)
55    (GETVALUE&PUSH 0)                   ; A
57    (CONST&PUSH 19)                     ; (MTIMES)
58    (CONST&PUSH 12)                     ; -1
59    (GETVALUE&PUSH 1)                   ; N
61    (LIST&PUSH 3)
63    (CALL1&PUSH 20)                     ; MEVAL
65    (CALL1&PUSH 21)                     ; $ZETA
67    (LIST 3)
69    (UNBIND 3)
71    (SKIP&RET 4)
73    L73
73    (CONST&PUSH 7)                      ; ISUMOUT
74    (CONST 8)                           ; $INF
75    (THROW)
76    L76
76    (CONST&PUSH 7)                      ; ISUMOUT
77    (CONST 8)                           ; $INF
78    (THROW)


Disassembly of function #:|(DEFUN FSGEO (E Y) ...)-98|
(CONST 0) = FSGEO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FSGEO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FSGEO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FSGEO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FSGEO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FSGEO
8     (SKIP&RET 1)


Disassembly of function FSGEO
(CONST 0) = E
(CONST 1) = Y
(CONST 2) = (MPLUS)
(CONST 3) = *VAR*
(CONST 4) = 1
(CONST 5) = MAXIMA-SUBSTITUTE
(CONST 6) = DIV*
(CONST 7) = $RATSIMP
(CONST 8) = R
(CONST 9) = FREE
(CONST 10) = (MTIMES)
(CONST 11) = 0
(CONST 12) = (MPLUS)
(CONST 13) = (MEXPT)
(CONST 14) = (MPLUS)
(CONST 15) = HI
(CONST 16) = (MTIMES)
(CONST 17) = -1
(CONST 18) = (MEXPT)
(CONST 19) = LO
(CONST 20) = (MEXPT)
(CONST 21) = (MPLUS)
(CONST 22) = ADSUM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LO HI Y R E *VAR*)
57 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (CONST&PUSH 2)                      ; (MPLUS)
7     (GETVALUE&PUSH 3)                   ; *VAR*
9     (CONST&PUSH 4)                      ; 1
10    (LIST&PUSH 3)
12    (GETVALUE&PUSH 3)                   ; *VAR*
14    (GETVALUE&PUSH 0)                   ; E
16    (CALL&PUSH 3 5)                     ; MAXIMA-SUBSTITUTE
19    (GETVALUE&PUSH 0)                   ; E
21    (CALL2&PUSH 6)                      ; DIV*
23    (CALL1 7)                           ; $RATSIMP
25    (BIND 8)                            ; R
27    (GETVALUE&PUSH 8)                   ; R
29    (GETVALUE&PUSH 3)                   ; *VAR*
31    (CALL2&JMPIF 9 L40)                 ; FREE
34    (NIL)
35    (UNBIND1)
36    L36
36    (UNBIND 2)
38    (SKIP&RET 3)
40    L40
40    (CONST&PUSH 10)                     ; (MTIMES)
41    (GETVALUE&PUSH 1)                   ; Y
43    (CONST&PUSH 11)                     ; 0
44    (GETVALUE&PUSH 3)                   ; *VAR*
46    (GETVALUE&PUSH 0)                   ; E
48    (CALL&PUSH 3 5)                     ; MAXIMA-SUBSTITUTE
51    (CONST&PUSH 12)                     ; (MPLUS)
52    (CONST&PUSH 13)                     ; (MEXPT)
53    (GETVALUE&PUSH 8)                   ; R
55    (CONST&PUSH 14)                     ; (MPLUS)
56    (GETVALUE&PUSH 15)                  ; HI
58    (CONST&PUSH 4)                      ; 1
59    (LIST&PUSH 3)
61    (LIST&PUSH 3)
63    (CONST&PUSH 16)                     ; (MTIMES)
64    (CONST&PUSH 17)                     ; -1
65    (CONST&PUSH 18)                     ; (MEXPT)
66    (GETVALUE&PUSH 8)                   ; R
68    (GETVALUE&PUSH 19)                  ; LO
70    (LIST&PUSH 3)
72    (LIST&PUSH 3)
74    (LIST&PUSH 3)
76    (CONST&PUSH 20)                     ; (MEXPT)
77    (CONST&PUSH 21)                     ; (MPLUS)
78    (GETVALUE&PUSH 8)                   ; R
80    (CONST&PUSH 17)                     ; -1
81    (LIST&PUSH 3)
83    (CONST&PUSH 17)                     ; -1
84    (LIST&PUSH 3)
86    (LIST&PUSH 5)
88    (CALL1 22)                          ; ADSUM
90    (UNBIND1)
91    (JMP L36)


Disassembly of function #:|(DEFUN ISGEO (E) ...)-99|
(CONST 0) = ISGEO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ISGEO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ISGEO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ISGEO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ISGEO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ISGEO
8     (SKIP&RET 1)


Disassembly of function ISGEO
(CONST 0) = E
(CONST 1) = (MPLUS)
(CONST 2) = *VAR*
(CONST 3) = 1
(CONST 4) = MAXIMA-SUBSTITUTE
(CONST 5) = DIV*
(CONST 6) = $RATSIMP
(CONST 7) = R
(CONST 8) = FREE
(CONST 9) = LO
(CONST 10) = (MPLUS)
(CONST 11) = (MABS)
(CONST 12) = -1
(CONST 13) = SIMPLIFY
(CONST 14) = ASKSIGN
(CONST 15) = ISGEO1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LO R E *VAR*)
38 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (CONST&PUSH 1)                      ; (MPLUS)
4     (GETVALUE&PUSH 2)                   ; *VAR*
6     (CONST&PUSH 3)                      ; 1
7     (LIST&PUSH 3)
9     (GETVALUE&PUSH 2)                   ; *VAR*
11    (GETVALUE&PUSH 0)                   ; E
13    (CALL&PUSH 3 4)                     ; MAXIMA-SUBSTITUTE
16    (GETVALUE&PUSH 0)                   ; E
18    (CALL2&PUSH 5)                      ; DIV*
20    (CALL1 6)                           ; $RATSIMP
22    (BIND 7)                            ; R
24    (GETVALUE&PUSH 7)                   ; R
26    (GETVALUE&PUSH 2)                   ; *VAR*
28    (CALL2 8)                           ; FREE
30    (JMPIFNOT1 L62)
32    (GETVALUE&PUSH 9)                   ; LO
34    (GETVALUE&PUSH 2)                   ; *VAR*
36    (GETVALUE&PUSH 0)                   ; E
38    (CALL&PUSH 3 4)                     ; MAXIMA-SUBSTITUTE
41    (GETVALUE&PUSH 7)                   ; R
43    (CONST&PUSH 10)                     ; (MPLUS)
44    (CONST&PUSH 11)                     ; (MABS)
45    (GETVALUE&PUSH 7)                   ; R
47    (LIST&PUSH 2)
49    (CONST&PUSH 12)                     ; -1
50    (LIST&PUSH 3)
52    (CALL1&PUSH 13)                     ; SIMPLIFY
54    (CALL1&PUSH 14)                     ; ASKSIGN
56    (CALL 3 15)                         ; ISGEO1
59    (UNBIND1)
60    (JMP L63)
62    L62
62    (UNBIND1)
63    L63
63    (UNBIND1)
64    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ISGEO1 (A R SIGN) ...)-100|
(CONST 0) = ISGEO1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ISGEO1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ISGEO1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ISGEO1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ISGEO1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ISGEO1
8     (SKIP&RET 1)


Disassembly of function ISGEO1
(CONST 0) = A
(CONST 1) = R
(CONST 2) = SIGN
(CONST 3) = $POSITIVE
(CONST 4) = 0
(CONST 5) = MGRP
(CONST 6) = ISUMOUT
(CONST 7) = $INF
(CONST 8) = $MINF
(CONST 9) = $ZERO
(CONST 10) = $UNDEFINED
(CONST 11) = $NEGATIVE
(CONST 12) = (MTIMES)
(CONST 13) = (MEXPT)
(CONST 14) = (MPLUS)
(CONST 15) = 1
(CONST 16) = (MTIMES)
(CONST 17) = -1
(CONST 18) = ADSUM
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R A SIGN)
47 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; R
6     (LOAD 7)
7     (BIND 2)                            ; SIGN
9     (GETVALUE&PUSH 2)                   ; SIGN
11    (JMPIFEQTO 3 L32)                   ; $POSITIVE
14    (GETVALUE&PUSH 2)                   ; SIGN
16    (JMPIFEQTO 9 L41)                   ; $ZERO
19    (GETVALUE&PUSH 2)                   ; SIGN
21    (JMPIFEQTO 11 L44)                  ; $NEGATIVE
24    (NIL)
25    L25
25    (UNBIND 3)
27    (SKIP&RET 4)
29    L29
29    (CONST&PUSH 6)                      ; ISUMOUT
30    (CONST 7)                           ; $INF
31    (THROW)
32    L32
32    (GETVALUE&PUSH 0)                   ; A
34    (CONST&PUSH 4)                      ; 0
35    (CALL2&JMPIF 5 L29)                 ; MGRP
38    (CONST&PUSH 6)                      ; ISUMOUT
39    (CONST 8)                           ; $MINF
40    (THROW)
41    L41
41    (CONST&PUSH 6)                      ; ISUMOUT
42    (CONST 10)                          ; $UNDEFINED
43    (THROW)
44    L44
44    (CONST&PUSH 12)                     ; (MTIMES)
45    (GETVALUE&PUSH 0)                   ; A
47    (CONST&PUSH 13)                     ; (MEXPT)
48    (CONST&PUSH 14)                     ; (MPLUS)
49    (CONST&PUSH 15)                     ; 1
50    (CONST&PUSH 16)                     ; (MTIMES)
51    (CONST&PUSH 17)                     ; -1
52    (GETVALUE&PUSH 1)                   ; R
54    (LIST&PUSH 3)
56    (LIST&PUSH 3)
58    (CONST&PUSH 17)                     ; -1
59    (LIST&PUSH 3)
61    (LIST&PUSH 3)
63    (CALL1 18)                          ; ADSUM
65    (JMP L25)


Disassembly of function #:|(DEFUN FPOLYSUM (E) ...)-101|
(CONST 0) = FPOLYSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPOLYSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPOLYSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPOLYSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPOLYSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPOLYSUM
8     (SKIP&RET 1)


Disassembly of function FPOLYSUM
(CONST 0) = E
(CONST 1) = *VAR*
(CONST 2) = $RAT
(CONST 3) = $RATDISREP
(CONST 4) = $EXPAND
(CONST 5) = FPOLY1
(CONST 6) = A
(CONST 7) = B
(CONST 8) = $PREDERROR
(CONST 9) = 0
(CONST 10) = LO
(CONST 11) = (0 1)
(CONST 12) = ZL-MEMBER
(CONST 13) = HI
(CONST 14) = FOO
(CONST 15) = MAXIMA-SUBSTITUTE
(CONST 16) = (MGEQP)
(CONST 17) = MEVALP
(CONST 18) = ASKSIGN
(CONST 19) = ($ZERO $POSITIVE)
(CONST 20) = MEMQ
(CONST 21) = (MPLUS)
(CONST 22) = (MTIMES)
(CONST 23) = -1
(CONST 24) = (MPLUS)
(CONST 25) = (MTIMES)
(CONST 26) = (MPLUS)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B HI LO A *VAR* E)
writes special variables : (B E)
81 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (GETVALUE&PUSH 1)                   ; *VAR*
7     (CALL2&PUSH 2)                      ; $RAT
9     (CALL1&PUSH 3)                      ; $RATDISREP
11    (CALL1 4)                           ; $EXPAND
13    (SETVALUE 0)                        ; E
15    (PUSH)
16    (CALL1 5)                           ; FPOLY1
18    (BIND 6)                            ; A
20    (NIL)
21    (BIND 7)                            ; B
23    (NIL)
24    (BIND 8)                            ; $PREDERROR
26    (GETVALUE 6)                        ; A
28    (JMPIFNOT L97)
31    (GETVALUE&PUSH 10)                  ; LO
33    (CONST&PUSH 11)                     ; (0 1)
34    (CALL2&JMPIF 12 L100)               ; ZL-MEMBER
37    (CONST&PUSH 16)                     ; (MGEQP)
38    (GETVALUE&PUSH 10)                  ; LO
40    (CONST&PUSH 9)                      ; 0
41    (LIST&PUSH 3)
43    (CALL1&PUSH 17)                     ; MEVALP
45    (T)
46    (JMPIFEQ L110)
48    (GETVALUE&PUSH 10)                  ; LO
50    (CALL1&PUSH 18)                     ; ASKSIGN
52    (CONST&PUSH 19)                     ; ($ZERO $POSITIVE)
53    (CALL2&JMPIF 20 L110)               ; MEMQ
56    (CONST&PUSH 25)                     ; (MTIMES)
57    (CONST&PUSH 23)                     ; -1
58    (GETVALUE&PUSH 1)                   ; *VAR*
60    (LIST&PUSH 3)
62    (GETVALUE&PUSH 1)                   ; *VAR*
64    (GETVALUE&PUSH 0)                   ; E
66    (CALL&PUSH 3 15)                    ; MAXIMA-SUBSTITUTE
69    (CALL1 5)                           ; FPOLY1
71    (SETVALUE 7)                        ; B
73    (CONST&PUSH 26)                     ; (MPLUS)
74    (GETVALUE&PUSH 13)                  ; HI
76    (CONST&PUSH 14)                     ; FOO
77    (GETVALUE&PUSH 6)                   ; A
79    (CALL&PUSH 3 15)                    ; MAXIMA-SUBSTITUTE
82    (GETVALUE&PUSH 10)                  ; LO
84    (CONST&PUSH 14)                     ; FOO
85    (GETVALUE&PUSH 7)                   ; B
87    (CALL 3 15)                         ; MAXIMA-SUBSTITUTE
90    L90
90    (PUSH)
91    (LIST 3)
93    L93
93    (UNBIND 4)
95    (SKIP&RET 2)
97    L97
97    (CONST 9)                           ; 0
98    (JMP L93)
100   L100
100   (GETVALUE&PUSH 13)                  ; HI
102   (CONST&PUSH 14)                     ; FOO
103   (GETVALUE&PUSH 6)                   ; A
105   (CALL 3 15)                         ; MAXIMA-SUBSTITUTE
108   (JMP L93)
110   L110
110   (CONST&PUSH 21)                     ; (MPLUS)
111   (GETVALUE&PUSH 13)                  ; HI
113   (CONST&PUSH 14)                     ; FOO
114   (GETVALUE&PUSH 6)                   ; A
116   (CALL&PUSH 3 15)                    ; MAXIMA-SUBSTITUTE
119   (CONST&PUSH 22)                     ; (MTIMES)
120   (CONST&PUSH 23)                     ; -1
121   (CONST&PUSH 24)                     ; (MPLUS)
122   (GETVALUE&PUSH 10)                  ; LO
124   (CONST&PUSH 23)                     ; -1
125   (LIST&PUSH 3)
127   (CONST&PUSH 14)                     ; FOO
128   (GETVALUE&PUSH 6)                   ; A
130   (CALL&PUSH 3 15)                    ; MAXIMA-SUBSTITUTE
133   (LIST 3)
135   (JMP L90)


Disassembly of function #:|(DEFUN FPOLY1 (E) ...)-102|
(CONST 0) = FPOLY1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPOLY1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPOLY1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPOLY1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPOLY1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPOLY1
8     (SKIP&RET 1)


Disassembly of function FPOLY1
(CONST 0) = E
(CONST 1) = *VAR*
(CONST 2) = SMONO
(CONST 3) = *A
(CONST 4) = *N
(CONST 5) = FPOLY2
(CONST 6) = MPLUS
(CONST 7) = (MPLUS)
(CONST 8) = FPOLY1
(CONST 9) = ADUSUM
(CONST 10) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*N *A *VAR* E)
29 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (GETVALUE&PUSH 1)                   ; *VAR*
7     (CALL2&JMPIF 2 L25)                 ; SMONO
10    (GETVALUE 0)                        ; E
12    (CAR)
13    (CAR&PUSH)
14    (JMPIFEQTO 6 L36)                   ; MPLUS
17    (GETVALUE&PUSH 0)                   ; E
19    (CALL1 9)                           ; ADUSUM
21    (CONST 10)                          ; 0
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)
25    L25
25    (GETVALUE&PUSH 3)                   ; *A
27    (GETVALUE&PUSH 4)                   ; *N
29    (GETVALUE&PUSH 0)                   ; E
31    (CALL 3 5)                          ; FPOLY2
34    (JMP L22)
36    L36
36    (CONST&PUSH 7)                      ; (MPLUS)
37    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; FPOLY1
39    (GETVALUE 0)                        ; E
41    (CDR&PUSH)
42    (CALLSR 0 22)                       ; MAPCAR
45    (CONS)
46    (JMP L22)


Disassembly of function #:|(DEFUN FPOLY2 (A N E) ...)-103|
(CONST 0) = FPOLY2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPOLY2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPOLY2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPOLY2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPOLY2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPOLY2
8     (SKIP&RET 1)


Disassembly of function FPOLY2
(CONST 0) = A
(CONST 1) = N
(CONST 2) = E
(CONST 3) = -1
(CONST 4) = ADUSUM
(CONST 5) = 0
(CONST 6) = LO
(CONST 7) = 1
(CONST 8) = FOO
(CONST 9) = ADD*
(CONST 10) = MUL*
(CONST 11) = (RAT)
(CONST 12) = $BERNPOLY
(CONST 13) = $BERN
(CONST 14) = SUB*
(CONST 15) = $RATSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LO E A N)
58 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; E
9     (GETVALUE&PUSH 1)                   ; N
11    (CALLS2&JMPIFNOT 12 L66)            ; INTEGERP
14    (GETVALUE&PUSH 1)                   ; N
16    (CONST&PUSH 3)                      ; -1
17    (CALLSR&JMPIFNOT 1 48 L66)          ; >
21    (GETVALUE&PUSH 1)                   ; N
23    (JMPIFEQTO 5 L79)                   ; 0
26    (GETVALUE&PUSH 0)                   ; A
28    (CONST&PUSH 11)                     ; (RAT)
29    (CONST&PUSH 7)                      ; 1
30    (GETVALUE&PUSH 1)                   ; N
32    (CALLS2&PUSH 150)                   ; 1+
34    (LIST&PUSH 3)
36    (CONST&PUSH 8)                      ; FOO
37    (CONST&PUSH 7)                      ; 1
38    (CALL2&PUSH 9)                      ; ADD*
40    (GETVALUE&PUSH 1)                   ; N
42    (CALLS2&PUSH 150)                   ; 1+
44    (CALL2&PUSH 12)                     ; $BERNPOLY
46    (GETVALUE&PUSH 1)                   ; N
48    (CALLS2&PUSH 150)                   ; 1+
50    (CALL1&PUSH 13)                     ; $BERN
52    (CALL2&PUSH 14)                     ; SUB*
54    (CALL&PUSH 3 10)                    ; MUL*
57    (CALL1 15)                          ; $RATSIMP
59    (JMPIF1 L62)
61    (NIL)
62    L62
62    (UNBIND 3)
64    (SKIP&RET 4)
66    L66
66    (GETVALUE&PUSH 2)                   ; E
68    (CALL1 4)                           ; ADUSUM
70    (CONST 5)                           ; 0
71    (JMP L62)
73    L73
73    (CONST&PUSH 7)                      ; 1
74    (CONST&PUSH 8)                      ; FOO
75    (CALL2 9)                           ; ADD*
77    (JMP L90)
79    L79
79    (GETVALUE&PUSH 6)                   ; LO
81    (CALLS2&JMPIFNOT 8 L89)             ; NUMBERP
84    (GETVALUE&PUSH 6)                   ; LO
86    (CALLS2&JMPIF 145 L73)              ; ZEROP
89    L89
89    (CONST 8)                           ; FOO
90    L90
90    (PUSH)
91    (GETVALUE&PUSH 0)                   ; A
93    (CALL2 10)                          ; MUL*
95    (JMP L62)


Disassembly of function #:|(DEFUN FBINO (E Y) ...)-104|
(CONST 0) = FBINO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FBINO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FBINO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FBINO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FBINO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FBINO
8     (SKIP&RET 1)


Disassembly of function FBINO
(CONST 0) = E
(CONST 1) = Y
(CONST 2) = N
(CONST 3) = D
(CONST 4) = L
(CONST 5) = H
(CONST 6) = LINEAR*
(CONST 7) = *VAR*
(CONST 8) = M2
(CONST 9) = ADUSUM
(CONST 10) = ASSQ
(CONST 11) = (MPLUS)
(CONST 12) = (MTIMES)
(CONST 13) = -1
(CONST 14) = 1
(CONST 15) = SIMPLUS
(CONST 16) = 0
(CONST 17) = (MTIMES)
(CONST 18) = HI
(CONST 19) = SIMPTIMES
(CONST 20) = (MTIMES)
(CONST 21) = LO
(CONST 22) = (0 -1)
(CONST 23) = ZL-MEMBER
(CONST 24) = (MPLUS)
(CONST 25) = (%BINOMIAL)
(CONST 26) = (MPLUS)
(CONST 27) = (MPLUS)
(CONST 28) = (MTIMES)
(CONST 29) = (%BINOMIAL)
(CONST 30) = (MPLUS)
(CONST 31) = (MPLUS)
(CONST 32) = ADSUM
(CONST 33) = 2
(CONST 34) = (MPLUS)
(CONST 35) = (MTIMES)
(CONST 36) = X
(CONST 37) = (MPLUS)
(CONST 38) = (MPLUS)
(CONST 39) = (MPLUS)
(CONST 40) = (MTIMES)
(CONST 41) = (MPLUS)
(CONST 42) = (MTIMES)
(CONST 43) = -2
(CONST 44) = (%BINOMIAL)
(CONST 45) = (MTIMES)
(CONST 46) = DOSUM
(CONST 47) = (MTIMES)
(CONST 48) = (MPLUS)
(CONST 49) = (MTIMES)
(CONST 50) = (MPLUS)
(CONST 51) = (MEXPT)
(CONST 52) = (MPLUS)
(CONST 53) = $FIB
(CONST 54) = (MEXPT)
(CONST 55) = (MPLUS)
(CONST 56) = (MTIMES)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (H L Y X HI LO D N *VAR* E)
writes special variables : (E H L D N)
387 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL)
7     (BIND 2)                            ; N
9     (NIL)
10    (BIND 3)                            ; D
12    (NIL)
13    (BIND 4)                            ; L
15    (NIL)
16    (BIND 5)                            ; H
18    (NIL&PUSH)
19    (GETVALUE 0)                        ; E
21    (CDR)
22    (CAR&PUSH)
23    (CONST&PUSH 2)                      ; N
24    (CONST&PUSH 6)                      ; LINEAR*
25    (GETVALUE&PUSH 7)                   ; *VAR*
27    (LIST&PUSH 3)
29    (NIL&PUSH)
30    (CALL 3 8)                          ; M2
33    (SETVALUE 2)                        ; N
35    (JMPIFNOT L329)
38    (CONST&PUSH 2)                      ; N
39    (GETVALUE&PUSH 2)                   ; N
41    (CALL2 10)                          ; ASSQ
43    (CDR)
44    (SETVALUE 2)                        ; N
46    (GETVALUE 0)                        ; E
48    (CDR)
49    (CDR)
50    (CAR&PUSH)
51    (CONST&PUSH 3)                      ; D
52    (CONST&PUSH 6)                      ; LINEAR*
53    (GETVALUE&PUSH 7)                   ; *VAR*
55    (LIST&PUSH 3)
57    (NIL&PUSH)
58    (CALL 3 8)                          ; M2
61    (SETVALUE 3)                        ; D
63    (JMPIFNOT L329)
66    (CONST&PUSH 3)                      ; D
67    (GETVALUE&PUSH 3)                   ; D
69    (CALL2 10)                          ; ASSQ
71    (CDR)
72    (SETVALUE 3)                        ; D
74    (GETVALUE 2)                        ; N
76    (CDR&PUSH)
77    (GETVALUE 3)                        ; D
79    (CDR&PUSH)
80    (CALLS2&JMPIFNOT 2 L105)            ; EQUAL
83    (CONST&PUSH 11)                     ; (MPLUS)
84    (GETVALUE 2)                        ; N
86    (CAR&PUSH)
87    (CONST&PUSH 12)                     ; (MTIMES)
88    (CONST&PUSH 13)                     ; -1
89    (GETVALUE 3)                        ; D
91    (CAR&PUSH)
92    (LIST&PUSH 3)
94    (LIST&PUSH 3)
96    (CONST&PUSH 14)                     ; 1
97    (NIL&PUSH)
98    (CALL&PUSH 3 15)                    ; SIMPLUS
101   (CONST 16)                          ; 0
102   (CONS)
103   (SETVALUE 3)                        ; D
105   L105
105   (GETVALUE 3)                        ; D
107   (CDR&PUSH)
108   (CALLS2&JMPIFNOT 8 L137)            ; NUMBERP
111   (GETVALUE 3)                        ; D
113   (CDR&PUSH)
114   (CALLS2&JMPIF 147 L340)             ; MINUSP
118   (GETVALUE 3)                        ; D
120   (CDR&PUSH)
121   (CALLS2&JMPIFNOT 145 L137)          ; ZEROP
124   (GETVALUE 2)                        ; N
126   (CDR&PUSH)
127   (CALLS2&JMPIFNOT 8 L137)            ; NUMBERP
130   (GETVALUE 2)                        ; N
132   (CDR&PUSH)
133   (CALLS2&JMPIF 147 L340)             ; MINUSP
137   L137
137   (GETVALUE 21)                       ; LO
139   (SETVALUE 4)                        ; L
141   (GETVALUE 18)                       ; HI
143   (SETVALUE 5)                        ; H
145   L145
145   (GETVALUE 2)                        ; N
147   (CDR&PUSH)
148   (CONST&PUSH 22)                     ; (0 -1)
149   (CALL2&JMPIF 23 L159)               ; ZL-MEMBER
152   (GETVALUE 3)                        ; D
154   (CDR&PUSH)
155   (JMPIFNOTEQTO 16 L329)              ; 0
159   L159
159   (GETVALUE 3)                        ; D
161   (CDR&PUSH)
162   (JMPIFNOTEQTO 16 L172)              ; 0
165   (GETVALUE 2)                        ; N
167   (CDR&PUSH)
168   (JMPIFEQTO 14 L389)                 ; 1
172   L172
172   (GETVALUE 3)                        ; D
174   (CDR&PUSH)
175   (JMPIFEQTO 14 L440)                 ; 1
179   (GETVALUE 3)                        ; D
181   (CDR&PUSH)
182   (JMPIFNOTEQTO 33 L329)              ; 2
186   (GETVALUE 2)                        ; N
188   (CDR&PUSH)
189   (JMPIFNOTEQTO 16 L329)              ; 0
193   (CONST 14)                          ; 1
194   (STORE 0)
195   L195
195   (GETVALUE 2)                        ; N
197   (CAR)
198   (SETVALUE 2)                        ; N
200   (GETVALUE 3)                        ; D
202   (CDR&PUSH)
203   (JMPIFEQTO 13 L452)                 ; -1
207   (GETVALUE 3)                        ; D
209   (CAR)
210   (SETVALUE 3)                        ; D
212   L212
212   (LOAD&PUSH 0)
213   (JMPIFNOTEQTO 14 L246)              ; 1
216   (GETVALUE 3)                        ; D
218   (BIND 36)                           ; X
220   (CONST 33)                          ; 2
222   (BIND 1)                            ; Y
224   (GETVALUE&PUSH 36)                  ; X
226   (CALLS2&JMPIFNOT 12 L235)           ; INTEGERP
229   (GETVALUE&PUSH 1)                   ; Y
231   (CALLS2&JMPIF 12 L476)              ; INTEGERP
235   L235
235   (GETVALUE&PUSH 36)                  ; X
237   (GETVALUE&PUSH 1)                   ; Y
239   (CALLSR 1 56)                       ; /
242   L242
242   (UNBIND 2)
244   (SETVALUE 3)                        ; D
246   L246
246   (CONST&PUSH 37)                     ; (MPLUS)
248   (GETVALUE&PUSH 4)                   ; L
250   (GETVALUE&PUSH 3)                   ; D
252   (LIST&PUSH 3)
254   (CONST&PUSH 14)                     ; 1
255   (NIL&PUSH)
256   (CALL 3 15)                         ; SIMPLUS
259   (SETVALUE 4)                        ; L
261   (CONST&PUSH 38)                     ; (MPLUS)
263   (GETVALUE&PUSH 5)                   ; H
265   (GETVALUE&PUSH 3)                   ; D
267   (LIST&PUSH 3)
269   (CONST&PUSH 14)                     ; 1
270   (NIL&PUSH)
271   (CALL 3 15)                         ; SIMPLUS
274   (SETVALUE 5)                        ; H
276   (GETVALUE&PUSH 4)                   ; L
278   (CALLS2&JMPIFNOT 8 L329)            ; NUMBERP
281   (CONST&PUSH 39)                     ; (MPLUS)
283   (GETVALUE&PUSH 5)                   ; H
285   (CONST&PUSH 40)                     ; (MTIMES)
287   (CONST&PUSH 13)                     ; -1
288   (GETVALUE&PUSH 2)                   ; N
290   (LIST&PUSH 3)
292   (LIST&PUSH 3)
294   (CONST&PUSH 14)                     ; 1
295   (NIL&PUSH)
296   (CALL 3 15)                         ; SIMPLUS
299   (SETVALUE 3)                        ; D
301   (PUSH)
302   (CALLS2&JMPIF 8 L548)               ; NUMBERP
306   (CONST&PUSH 41)                     ; (MPLUS)
308   (GETVALUE&PUSH 2)                   ; N
310   (CONST&PUSH 42)                     ; (MTIMES)
312   (CONST&PUSH 43)                     ; -2
314   (GETVALUE&PUSH 5)                   ; H
316   (LIST&PUSH 3)
318   (LIST&PUSH 3)
320   (CONST&PUSH 14)                     ; 1
321   (NIL&PUSH)
322   (CALL&PUSH 3 15)                    ; SIMPLUS
325   (CALLS2&JMPIF 8 L545)               ; NUMBERP
329   L329
329   (GETVALUE&PUSH 0)                   ; E
331   (CALL1 9)                           ; ADUSUM
333   L333
333   (SKIP 1)
335   (UNBIND 4)
337   (JMP L671)
340   L340
340   (GETVALUE&PUSH 3)                   ; D
342   (GETVALUE 3)                        ; D
344   (CDR&PUSH)
345   (CALLSR&PUSH 0 54)                  ; -
348   (CALLS1 170)                        ; RPLACD
350   (GETVALUE&PUSH 2)                   ; N
352   (GETVALUE 2)                        ; N
354   (CDR&PUSH)
355   (CALLSR&PUSH 0 54)                  ; -
358   (CALLS1 170)                        ; RPLACD
360   (CONST&PUSH 17)                     ; (MTIMES)
361   (GETVALUE&PUSH 18)                  ; HI
363   (CONST&PUSH 13)                     ; -1
364   (LIST&PUSH 3)
366   (CONST&PUSH 14)                     ; 1
367   (NIL&PUSH)
368   (CALL 3 19)                         ; SIMPTIMES
371   (SETVALUE 4)                        ; L
373   (CONST&PUSH 20)                     ; (MTIMES)
374   (GETVALUE&PUSH 21)                  ; LO
376   (CONST&PUSH 13)                     ; -1
377   (LIST&PUSH 3)
379   (CONST&PUSH 14)                     ; 1
380   (NIL&PUSH)
381   (CALL 3 19)                         ; SIMPTIMES
384   (SETVALUE 5)                        ; H
386   (JMP L145)
389   L389
389   (CONST&PUSH 24)                     ; (MPLUS)
390   (CONST&PUSH 25)                     ; (%BINOMIAL)
391   (CONST&PUSH 26)                     ; (MPLUS)
392   (GETVALUE&PUSH 5)                   ; H
394   (GETVALUE 2)                        ; N
396   (CAR&PUSH)
397   (CONST&PUSH 14)                     ; 1
398   (LIST&PUSH 4)
400   (CONST&PUSH 27)                     ; (MPLUS)
401   (GETVALUE 3)                        ; D
403   (CAR&PUSH)
404   (CONST&PUSH 14)                     ; 1
405   (LIST&PUSH 3)
407   (LIST&PUSH 3)
409   (CONST&PUSH 28)                     ; (MTIMES)
410   (CONST&PUSH 13)                     ; -1
411   (CONST&PUSH 29)                     ; (%BINOMIAL)
412   (CONST&PUSH 30)                     ; (MPLUS)
414   (GETVALUE&PUSH 4)                   ; L
416   (GETVALUE 2)                        ; N
418   (CAR&PUSH)
419   (LIST&PUSH 3)
421   (CONST&PUSH 31)                     ; (MPLUS)
423   (GETVALUE 3)                        ; D
425   (CAR&PUSH)
426   (CONST&PUSH 14)                     ; 1
427   (LIST&PUSH 3)
429   (LIST&PUSH 3)
431   (LIST&PUSH 3)
433   (LIST&PUSH 3)
435   (CALL1 32)                          ; ADSUM
437   (JMP L333)
440   L440
440   (GETVALUE 2)                        ; N
442   (CDR&PUSH)
443   (JMPIFNOTEQTO 13 L195)              ; -1
447   (CONST 16)                          ; 0
448   (STORE 0)
449   (JMP L195)
452   L452
452   (CONST&PUSH 34)                     ; (MPLUS)
454   (GETVALUE&PUSH 2)                   ; N
456   (CONST&PUSH 35)                     ; (MTIMES)
458   (CONST&PUSH 13)                     ; -1
459   (GETVALUE 3)                        ; D
461   (CAR&PUSH)
462   (LIST&PUSH 3)
464   (LIST&PUSH 3)
466   (CONST&PUSH 14)                     ; 1
467   (NIL&PUSH)
468   (CALL 3 15)                         ; SIMPLUS
471   (SETVALUE 3)                        ; D
473   (JMP L212)
476   L476
476   (GETVALUE&PUSH 36)                  ; X
478   (GETVALUE&PUSH 1)                   ; Y
480   (CALLS2 181)                        ; TRUNCATE
482   (JMP L242)
485   L485
485   (CONST&PUSH 49)                     ; (MTIMES)
487   (GETVALUE&PUSH 1)                   ; Y
489   (GETVALUE&PUSH 0)                   ; E
491   (LIST&PUSH 3)
493   (GETVALUE&PUSH 7)                   ; *VAR*
495   (CONST&PUSH 50)                     ; (MPLUS)
497   (GETVALUE&PUSH 2)                   ; N
499   (CONST&PUSH 14)                     ; 1
500   (LIST&PUSH 3)
502   (CONST&PUSH 14)                     ; 1
503   (NIL&PUSH)
504   (CALL&PUSH 3 15)                    ; SIMPLUS
507   (GETVALUE&PUSH 5)                   ; H
509   (T&PUSH)
510   (CALL&PUSH 5 46)                    ; DOSUM
513   (CALL1 32)                          ; ADSUM
515   (LOAD&JMPIF 0 L637)
519   L519
519   (CONST&PUSH 51)                     ; (MEXPT)
521   (CONST&PUSH 33)                     ; 2
523   (GETVALUE 2)                        ; N
525   (JMP L653)
528   L528
528   (CONST&PUSH 52)                     ; (MPLUS)
530   (GETVALUE&PUSH 2)                   ; N
532   (CONST&PUSH 14)                     ; 1
533   (LIST&PUSH 3)
535   (CONST&PUSH 14)                     ; 1
536   (NIL&PUSH)
537   (CALL&PUSH 3 15)                    ; SIMPLUS
540   (CALL1 53)                          ; $FIB
542   (JMP L656)
545   L545
545   (CONST 33)                          ; 2
547   (STORE 0)
548   L548
548   (CONST&PUSH 44)                     ; (%BINOMIAL)
550   (GETVALUE&PUSH 2)                   ; N
552   (GETVALUE&PUSH 7)                   ; *VAR*
554   (LIST 3)
556   (SETVALUE 0)                        ; E
558   (GETVALUE&PUSH 4)                   ; L
560   (CONST&PUSH 16)                     ; 0
561   (CALLSR&JMPIFNOT 1 48 L587)         ; >
565   (CONST&PUSH 45)                     ; (MTIMES)
567   (GETVALUE&PUSH 1)                   ; Y
569   (CONST&PUSH 13)                     ; -1
570   (GETVALUE&PUSH 0)                   ; E
572   (LIST&PUSH 4)
574   (GETVALUE&PUSH 7)                   ; *VAR*
576   (CONST&PUSH 16)                     ; 0
577   (GETVALUE&PUSH 4)                   ; L
579   (CALLS2&PUSH 151)                   ; 1-
581   (T&PUSH)
582   (CALL&PUSH 5 46)                    ; DOSUM
585   (CALL1 32)                          ; ADSUM
587   L587
587   (GETVALUE&PUSH 3)                   ; D
589   (CONST&PUSH 16)                     ; 0
590   (CALLSR&JMPIFNOT 1 47 L625)         ; <
594   (CONST&PUSH 47)                     ; (MTIMES)
596   (GETVALUE&PUSH 1)                   ; Y
598   (CONST&PUSH 13)                     ; -1
599   (GETVALUE&PUSH 0)                   ; E
601   (LIST&PUSH 4)
603   (GETVALUE&PUSH 7)                   ; *VAR*
605   (CONST&PUSH 48)                     ; (MPLUS)
607   (GETVALUE&PUSH 5)                   ; H
609   (CONST&PUSH 14)                     ; 1
610   (LIST&PUSH 3)
612   (CONST&PUSH 14)                     ; 1
613   (NIL&PUSH)
614   (CALL&PUSH 3 15)                    ; SIMPLUS
617   (GETVALUE&PUSH 2)                   ; N
619   (T&PUSH)
620   (CALL&PUSH 5 46)                    ; DOSUM
623   (CALL1 32)                          ; ADSUM
625   L625
625   (GETVALUE&PUSH 3)                   ; D
627   (CONST&PUSH 16)                     ; 0
628   (CALLSR&JMPIF 1 48 L485)            ; >
633   (LOAD&JMPIFNOT 0 L519)
637   L637
637   (LOAD&PUSH 0)
638   (CALLS2&JMPIF 145 L528)             ; ZEROP
642   (CONST&PUSH 54)                     ; (MEXPT)
644   (CONST&PUSH 33)                     ; 2
646   (CONST&PUSH 55)                     ; (MPLUS)
648   (GETVALUE&PUSH 2)                   ; N
650   (CONST&PUSH 13)                     ; -1
651   (LIST 3)
653   L653
653   (PUSH)
654   (LIST 3)
656   L656
656   (STORE 0)
657   (CONST&PUSH 56)                     ; (MTIMES)
659   (GETVALUE&PUSH 1)                   ; Y
661   (LOAD&PUSH 2)
662   (LIST&PUSH 3)
664   (CALL1 32)                          ; ADSUM
666   (NIL)
667   (SKIP 1)
669   (UNBIND 4)
671   L671
671   (UNBIND 2)
673   (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE PRODCT))-105|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(COMMENT PRODUCT ROUTINES)-106|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMSPEC $PRODUCT (L) ...)-107-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $PRODUCT (L) ...)-107-2-1|>
(CONST 1) = $PRODUCT
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $PRODUCT (L) ...)-107-2-1|>
1     (CONST&PUSH 1)                      ; $PRODUCT
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $PRODUCT (L) ...)-107-2-1|
(CONST 0) = L
(CONST 1) = 4
(CONST 2) = "Wrong no. of args to product"
(CONST 3) = MERROR
(CONST 4) = MEVAL
(CONST 5) = DOSUM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
36 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (CDR)
6     (SETVALUE 0)                        ; L
8     (PUSH)
9     (CALLS2&PUSH 71)                    ; LENGTH
11    (CONST&PUSH 1)                      ; 4
12    (CALLSR&JMPIFNOT 1 45 L48)          ; =
16    (GETVALUE 0)                        ; L
18    (CAR&PUSH)
19    (GETVALUE 0)                        ; L
21    (CDR)
22    (CAR&PUSH)
23    (GETVALUE 0)                        ; L
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (CALL1&PUSH 4)                      ; MEVAL
30    (GETVALUE 0)                        ; L
32    (CDR)
33    (CDR)
34    (CDR)
35    (CAR&PUSH)
36    (CALL1&PUSH 4)                      ; MEVAL
38    (NIL&PUSH)
39    (CALL 5 5)                          ; DOSUM
42    (JMPIF1 L45)
44    (NIL)
45    L45
45    (UNBIND1)
46    (SKIP&RET 2)
48    L48
48    (CONST&PUSH 2)                      ; "Wrong no. of args to product"
49    (CALL1 3)                           ; MERROR
51    (JMP L45)


Disassembly of function #:|(DECLARE-TOP (SPECIAL $RATSIMPEXPONS))-108|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN SIMPPROD (X Y Z) ...)-109|
(CONST 0) = SIMPPROD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPPROD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPPROD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPPROD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPPROD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPPROD
8     (SKIP&RET 1)


Disassembly of function SIMPPROD
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = Z
(CONST 3) = $RATSIMPEXPONS
(CONST 4) = 1
(CONST 5) = SIMPLIFYA
(CONST 6) = (MEXPT)
(CONST 7) = SIMPTIMES
(CONST 8) = SIMPPROD1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z X Y)
writes special variable : (Y)
53 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (T)
10    (BIND 3)                            ; $RATSIMPEXPONS
12    (GETVALUE&PUSH 1)                   ; Y
14    (JMPIFEQTO 4 L70)                   ; 1
17    (CONST&PUSH 6)                      ; (MEXPT)
18    (GETVALUE 0)                        ; X
20    (CDR)
21    (CAR&PUSH)
22    (GETVALUE&PUSH 1)                   ; Y
24    (LIST&PUSH 3)
26    (CONST&PUSH 4)                      ; 1
27    (GETVALUE&PUSH 2)                   ; Z
29    (CALL 3 7)                          ; SIMPTIMES
32    (SETVALUE 1)                        ; Y
34    L34
34    (UNBIND1)
35    (GETVALUE&PUSH 1)                   ; Y
37    (GETVALUE 0)                        ; X
39    (CDR)
40    (CDR)
41    (CAR&PUSH)
42    (GETVALUE 0)                        ; X
44    (CDR)
45    (CDR)
46    (CDR)
47    (CAR&PUSH)
48    (GETVALUE&PUSH 2)                   ; Z
50    (CALL2&PUSH 5)                      ; SIMPLIFYA
52    (GETVALUE 0)                        ; X
54    (CDR)
55    (CDR)
56    (CDR)
57    (CDR)
58    (CAR&PUSH)
59    (GETVALUE&PUSH 2)                   ; Z
61    (CALL2&PUSH 5)                      ; SIMPLIFYA
63    (CALL 4 8)                          ; SIMPPROD1
66    (UNBIND 3)
68    (SKIP&RET 4)
70    L70
70    (GETVALUE 0)                        ; X
72    (CDR)
73    (CAR&PUSH)
74    (GETVALUE&PUSH 2)                   ; Z
76    (CALL2 5)                           ; SIMPLIFYA
78    (SETVALUE 1)                        ; Y
80    (JMP L34)


Disassembly of function #:|(DEFUN SIMPPROD1 (EXP I LO ...) ...)-110|
(CONST 0) = SIMPPROD1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPPROD1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPPROD1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPPROD1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPPROD1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPPROD1
8     (SKIP&RET 1)


Disassembly of function SIMPPROD1
(CONST 0) = EXP
(CONST 1) = LO
(CONST 2) = HI
(CONST 3) = U
(CONST 4) = "Bad index to product:~%~M"
(CONST 5) = MERROR
(CONST 6) = ALIKE1
(CONST 7) = VALIST
(CONST 8) = MBIND
(CONST 9) = MEVAL
(CONST 10) = MUNBIND
(CONST 11) = $PRODHACK
(CONST 12) = SUB*
(CONST 13) = $SIGN
(CONST 14) = $NEG
(CONST 15) = 1
(CONST 16) = ADD2
(CONST 17) = $ZERO
(CONST 18) = "Lower bound to product is > upper bound."
(CONST 19) = (MPLUS)
(CONST 20) = (MTIMES)
(CONST 21) = -1
(CONST 22) = POWER*
(CONST 23) = ASKSIGN
(CONST 24) = 0
(CONST 25) = $POSITIVE
(CONST 26) = (MFACTORIAL)
(CONST 27) = (MFACTORIAL)
(CONST 28) = (MPLUS)
(CONST 29) = DIV*
(CONST 30) = (MFACTORIAL)
(CONST 31) = (MABS)
(CONST 32) = ($ZERO $POSITIVE)
(CONST 33) = MEMQ
(CONST 34) = ADD*
(CONST 35) = (MABS)
(CONST 36) = (MFACTORIAL)
(CONST 37) = MUL*
(CONST 38) = (%PRODUCT SIMP)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (U VALIST EXP $PRODHACK HI LO)
writes special variables : (HI U)
171 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; LO
6     (LOAD 7)
7     (BIND 2)                            ; HI
9     (NIL)
10    (BIND 3)                            ; U
12    (LOAD&PUSH 15)
13    (CALLS2&JMPIFNOT 6 L62)             ; SYMBOLP
16    (GETVALUE&PUSH 1)                   ; LO
18    (GETVALUE&PUSH 2)                   ; HI
20    (CALL2&JMPIF 6 L70)                 ; ALIKE1
23    (GETVALUE 11)                       ; $PRODHACK
25    (JMPIF L42)
27    (GETVALUE&PUSH 2)                   ; HI
29    (GETVALUE&PUSH 1)                   ; LO
31    (CALL2 12)                          ; SUB*
33    (SETVALUE 3)                        ; U
35    (PUSH)
36    (CALL1&PUSH 13)                     ; $SIGN
38    (JMPIFEQTO 14 L129)                 ; $NEG
42    L42
42    (GETVALUE 0)                        ; EXP
44    (JMPIFATOM L214)
47    (CONST&PUSH 38)                     ; (%PRODUCT SIMP)
49    (GETVALUE&PUSH 0)                   ; EXP
51    (LOAD&PUSH 17)
52    (GETVALUE&PUSH 1)                   ; LO
54    (GETVALUE&PUSH 2)                   ; HI
56    (LIST 5)
58    (UNBIND1)
59    (JMP L294)
62    L62
62    (CONST&PUSH 4)                      ; "Bad index to product:~%~M"
63    (LOAD&PUSH 16)
64    (CALL2 5)                           ; MERROR
66    (UNBIND1)
67    (JMP L294)
70    L70
70    (LOAD&PUSH 15)
71    (LIST 1)
73    (BIND 7)                            ; VALIST
75    (GETVALUE&PUSH 7)                   ; VALIST
77    (NIL&PUSH)
78    (UNWIND-PROTECT-OPEN L104)
80    (LOAD&PUSH 3)
81    (GETVALUE&PUSH 2)                   ; HI
83    (LIST&PUSH 1)
85    (NIL&PUSH)
86    (CALL 3 8)                          ; MBIND
89    (T&STORE 2)
91    (GETVALUE&PUSH 0)                   ; EXP
93    (CALL1 9)                           ; MEVAL
95    (UNWIND-PROTECT-NORMAL-EXIT)
96    (LOADI 0 0 0)
100   (JMPIFNOT L116)
102   (JMP L110)
104   L104
104   (LOADI 0 0 0)
108   (JMPIFNOT L116)
110   L110
110   (LOADI&PUSH 0 0 1)
114   (CALL1 10)                          ; MUNBIND
116   L116
116   (UNWIND-PROTECT-CLOSE)
117   (SKIP 2)
119   (UNBIND 2)
121   (JMP L294)
124   L124
124   (CONST 15)                          ; 1
125   (UNBIND1)
126   (JMP L294)
129   L129
129   (GETVALUE&PUSH 3)                   ; U
131   (CONST&PUSH 15)                     ; 1
132   (CALL2&PUSH 16)                     ; ADD2
134   (CALL1&PUSH 13)                     ; $SIGN
136   (JMPIFEQTO 17 L124)                 ; $ZERO
139   (CONST&PUSH 18)                     ; "Lower bound to product is > upper bound."
140   (CALL1 5)                           ; MERROR
142   (UNBIND1)
143   (JMP L294)
146   L146
146   (GETVALUE&PUSH 0)                   ; EXP
148   (CONST&PUSH 19)                     ; (MPLUS)
149   (GETVALUE&PUSH 2)                   ; HI
151   (CONST&PUSH 15)                     ; 1
152   (CONST&PUSH 20)                     ; (MTIMES)
153   (CONST&PUSH 21)                     ; -1
154   (GETVALUE&PUSH 1)                   ; LO
156   (LIST&PUSH 3)
158   (LIST&PUSH 4)
160   (CALL2 22)                          ; POWER*
162   (UNBIND1)
163   (JMP L294)
166   L166
166   (CONST 24)                          ; 0
168   (SKIP 1)
170   (JMPIF1 L293)
173   (JMP L289)
176   L176
176   (CONST&PUSH 26)                     ; (MFACTORIAL)
177   (GETVALUE&PUSH 2)                   ; HI
179   (LIST&PUSH 2)
181   (CONST&PUSH 27)                     ; (MFACTORIAL)
182   (CONST&PUSH 28)                     ; (MPLUS)
183   (GETVALUE&PUSH 1)                   ; LO
185   (CONST&PUSH 21)                     ; -1
186   (LIST&PUSH 3)
188   (LIST&PUSH 2)
190   (CALL2 29)                          ; DIV*
192   (SKIP 1)
194   (JMPIF1 L293)
197   (JMP L289)
200   L200
200   (CONST 24)                          ; 0
202   (JMP L272)
205   L205
205   (NIL)
206   (SKIP 1)
208   (JMPIF1 L293)
211   (JMP L289)
214   L214
214   (GETVALUE&PUSH 0)                   ; EXP
216   (LOAD 16)
218   (JMPIFNOTEQ L146)
221   (GETVALUE&PUSH 1)                   ; LO
223   (CALL1&PUSH 23)                     ; ASKSIGN
225   (LOAD&PUSH 0)
226   (JMPIFEQTO 17 L166)                 ; $ZERO
229   (LOAD&PUSH 0)
230   (JMPIFEQTO 25 L176)                 ; $POSITIVE
233   (CONST&PUSH 30)                     ; (MFACTORIAL)
235   (CONST&PUSH 31)                     ; (MABS)
237   (GETVALUE&PUSH 1)                   ; LO
239   (LIST&PUSH 2)
241   (LIST&PUSH 2)
243   (GETVALUE&PUSH 2)                   ; HI
245   (CALL1&PUSH 23)                     ; ASKSIGN
247   (CONST&PUSH 32)                     ; ($ZERO $POSITIVE)
249   (CALL2&JMPIF 33 L200)               ; MEMQ
252   (CONST&PUSH 21)                     ; -1
253   (GETVALUE&PUSH 2)                   ; HI
255   (GETVALUE&PUSH 1)                   ; LO
257   (CONST&PUSH 15)                     ; 1
258   (CALL&PUSH 3 34)                    ; ADD*
261   (CALL2&PUSH 22)                     ; POWER*
263   (CONST&PUSH 35)                     ; (MABS)
265   (GETVALUE&PUSH 2)                   ; HI
267   (LIST 2)
269   (SETVALUE 2)                        ; HI
271   (POP)
272   L272
272   (PUSH)
273   (CONST&PUSH 36)                     ; (MFACTORIAL)
275   (GETVALUE&PUSH 2)                   ; HI
277   (LIST&PUSH 2)
279   (CALL 3 37)                         ; MUL*
282   (JMPIFNOT L205)
285   (SKIP 1)
287   (JMPIF1 L293)
289   L289
289   (NIL)
290   (UNBIND1)
291   (JMP L294)
293   L293
293   (UNBIND1)
294   L294
294   (UNBIND 3)
296   (SKIP&RET 5)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE TAYRAT))-111|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $TAYTORAT (E) ...)-112|
(CONST 0) = $TAYTORAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TAYTORAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAYTORAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TAYTORAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TAYTORAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TAYTORAT
8     (SKIP&RET 1)


Disassembly of function $TAYTORAT
(CONST 0) = E
(CONST 1) = MBAGP
(CONST 2) = $TAYTORAT
(CONST 3) = TRUNC
(CONST 4) = MEMQ
(CONST 5) = RATF
(CONST 6) = SRRAT
(CONST 7) = $RATDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CALL1&JMPIF 1 L32)                 ; MBAGP
8     (GETVALUE 0)                        ; E
10    (JMPIFATOM L46)
12    (CONST&PUSH 3)                      ; TRUNC
13    (GETVALUE 0)                        ; E
15    (CAR)
16    (CDR&PUSH)
17    (CALL2&JMPIFNOT 4 L46)              ; MEMQ
20    (CONST 6)                           ; SRRAT
21    (CATCH-OPEN L50)
23    (GETVALUE&PUSH 0)                   ; E
25    (CALL1 6)                           ; SRRAT
27    (CATCH-CLOSE)
28    (JMPIF1 L59)
30    (JMP L52)
32    L32
32    (GETVALUE 0)                        ; E
34    (CAR&PUSH)
35    (CONST&SYMBOL-FUNCTION&PUSH 2)      ; $TAYTORAT
37    (GETVALUE 0)                        ; E
39    (CDR&PUSH)
40    (CALLSR 0 22)                       ; MAPCAR
43    (CONS)
44    (JMP L59)
46    L46
46    (GETVALUE 0)                        ; E
48    (JMP L56)
50    L50
50    (JMPIF1 L59)
52    L52
52    (GETVALUE&PUSH 0)                   ; E
54    (CALL1 7)                           ; $RATDISREP
56    L56
56    (PUSH)
57    (CALL1 5)                           ; RATF
59    L59
59    (UNBIND1)
60    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SRRAT (E) ...)-113|
(CONST 0) = SRRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRRAT
8     (SKIP&RET 1)


Disassembly of function SRRAT
(CONST 0) = E
(CONST 1) = MRAT
(CONST 2) = SIMP
(CONST 3) = SRRAT2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (CONST&PUSH 1)                      ; MRAT
4     (CONST&PUSH 2)                      ; SIMP
5     (GETVALUE 0)                        ; E
7     (CAR)
8     (CDR)
9     (CDR)
10    (CAR&PUSH)
11    (GETVALUE 0)                        ; E
13    (CAR)
14    (CDR)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (LIST&PUSH 4)
20    (GETVALUE 0)                        ; E
22    (CDR&PUSH)
23    (CALL1 3)                           ; SRRAT2
25    (CONS)
26    (UNBIND1)
27    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SRRAT2 (E) ...)-114|
(CONST 0) = SRRAT2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRRAT2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRRAT2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRRAT2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRRAT2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRRAT2
8     (SKIP&RET 1)


Disassembly of function SRRAT2
(CONST 0) = E
(CONST 1) = PS
(CONST 2) = SRRAT3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 1 L24)                ; PS
9     (GETVALUE 0)                        ; E
11    (CDR)
12    (CDR)
13    (CDR&PUSH)
14    (GETVALUE 0)                        ; E
16    (CDR)
17    (CAR)
18    (CAR&PUSH)
19    (CALL2 2)                           ; SRRAT3
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)
24    L24
24    (GETVALUE 0)                        ; E
26    (JMP L21)


Disassembly of function #:|(DEFUN SRRAT3 (L *VAR*) ...)-115|
(CONST 0) = SRRAT3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SRRAT3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SRRAT3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SRRAT3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SRRAT3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SRRAT3
8     (SKIP&RET 1)


Disassembly of function SRRAT3
(CONST 0) = L
(CONST 1) = *VAR*
(CONST 2) = (0 . 1)
(CONST 3) = 1
(CONST 4) = SRRAT
(CONST 5) = SRRAT2
(CONST 6) = RATTIMES
(CONST 7) = RATPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*VAR* L)
64 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; *VAR*
6     (GETVALUE 0)                        ; L
8     (JMPIFNOT L61)
10    (GETVALUE 0)                        ; L
12    (CAR)
13    (CAR)
14    (CDR&PUSH)
15    (JMPIFNOTEQTO 3 L64)                ; 1
18    (GETVALUE 0)                        ; L
20    (CDR)
21    (JMPIFNOT L67)
23    (GETVALUE&PUSH 1)                   ; *VAR*
25    (GETVALUE 0)                        ; L
27    (CAR)
28    (CAR)
29    (CAR&PUSH)
30    (CONST&PUSH 3)                      ; 1
31    (LIST&PUSH 3)
33    (CONST 3)                           ; 1
34    (CONS&PUSH)
35    (GETVALUE 0)                        ; L
37    (CAR)
38    (CDR&PUSH)
39    (CALL1&PUSH 5)                      ; SRRAT2
41    (T&PUSH)
42    (CALL&PUSH 3 6)                     ; RATTIMES
45    (GETVALUE 0)                        ; L
47    (CDR&PUSH)
48    (GETVALUE&PUSH 1)                   ; *VAR*
50    (JSR&PUSH L0)
52    (CALL2 7)                           ; RATPLUS
54    (JMPIF1 L57)
56    (NIL)
57    L57
57    (UNBIND 2)
59    (SKIP&RET 3)
61    L61
61    (CONST 2)                           ; (0 . 1)
62    (JMP L57)
64    L64
64    (CONST&PUSH 4)                      ; SRRAT
65    (NIL)
66    (THROW)
67    L67
67    (GETVALUE&PUSH 1)                   ; *VAR*
69    (GETVALUE 0)                        ; L
71    (CAR)
72    (CAR)
73    (CAR&PUSH)
74    (CONST&PUSH 3)                      ; 1
75    (LIST&PUSH 3)
77    (CONST 3)                           ; 1
78    (CONS&PUSH)
79    (GETVALUE 0)                        ; L
81    (CAR)
82    (CDR&PUSH)
83    (CALL1&PUSH 5)                      ; SRRAT2
85    (T&PUSH)
86    (CALL 3 6)                          ; RATTIMES
89    (JMP L57)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE DEFTAY) (SPECIAL $PROPS *I))-116|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMSPEC $DEFTAYLOR (L) ...)-117-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $DEFTAYLOR (L) ...)-117-2-1|>
(CONST 1) = $DEFTAYLOR
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $DEFTAYLOR (L) ...)-117-2-1|>
1     (CONST&PUSH 1)                      ; $DEFTAYLOR
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DEFTAYLOR (L) ...)-117-2-1|
(CONST 0) = L
(CONST 1) = (MLIST)
(CONST 2) = MEVAL
(CONST 3) = MQAPPLY
(CONST 4) = OP
(CONST 5) = OLDGET
(CONST 6) = MFACTORIAL
(CONST 7) = 2
(CONST 8) = "Bad argument to DEFTAYLOR:~%~M"
(CONST 9) = MERROR
(CONST 10) = SP2
(CONST 11) = "~:M being redefined in DEFTAYLOR.~%"
(CONST 12) = MTELL
(CONST 13) = SP2VAR
(CONST 14) = *INDEX
(CONST 15) = SUBSUM
(CONST 16) = PUTPROP
(CONST 17) = SP2SUBS
(CONST 18) = $PROPS
(CONST 19) = ADD2LNC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PROPS L)
writes special variable : (L)
153 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 5)
5     (JMP L197)
8     L8
8     (LOAD 5)
9     (CDR)
10    (CDR)
11    (CAR)
12    (STORE 3)
13    (SKIP 1)
15    (JMP L147)
18    L18
18    (LOAD 4)
19    (CDR)
20    (CDR)
21    (CDR)
22    (JMPIF L143)
25    (LOAD 4)
26    (CDR)
27    (CDR)
28    (JMPIFNOT L143)
31    (LOAD 4)
32    (CDR)
33    (CAR)
34    (CDR&PUSH)
35    (LOAD&JMPIF 0 L137)
39    L39
39    (LOAD 5)
40    (CDR)
41    (CAR)
42    (CAR)
43    (CAR)
44    (STORE 2)
45    (LOAD 5)
46    (CDR)
47    (CDR)
48    (JMPIF L8)
50    (SKIP 1)
52    (JMP L147)
55    L55
55    (GETVALUE 0)                        ; L
57    (CAR&PUSH)
58    (CALL1 2)                           ; MEVAL
60    (STORE 4)
61    (GETVALUE 0)                        ; L
63    (CDR)
64    (CAR&PUSH)
65    (CALL1 2)                           ; MEVAL
67    (STORE 3)
68    (GETVALUE 0)                        ; L
70    (CDR)
71    (SETVALUE 0)                        ; L
73    (NIL&STORE 2)
75    (LOAD 4)
76    (JMPIFATOM L143)
79    (LOAD 4)
80    (CAR)
81    (CAR&PUSH)
82    (JMPIFEQTO 3 L18)                   ; MQAPPLY
86    (LOAD 4)
87    (CAR)
88    (CAR)
89    (STORE 1)
90    (LOAD 4)
91    (CDR)
92    (JMPIFNOT L98)
94    (LOAD 4)
95    (CDR)
96    (CAR)
97    (STORE 2)
98    L98
98    (LOAD&PUSH 1)
99    (CONST&PUSH 4)                      ; OP
100   (CALL2&JMPIFNOT 5 L107)             ; OLDGET
103   (LOAD&PUSH 1)
104   (JMPIFNOTEQTO 6 L143)               ; MFACTORIAL
107   L107
107   (LOAD 4)
108   (CDR)
109   (CAR)
110   (JMPIFCONSP L143)
112   (LOAD&PUSH 4)
113   (CALLS2&PUSH 71)                    ; LENGTH
115   (CONST&PUSH 7)                      ; 2
116   (CALLSR&JMPIFNOT 1 45 L143)         ; =
120   (JMP L147)
122   L122
122   (CONST&PUSH 11)                     ; "~:M being redefined in DEFTAYLOR.~%"
123   (LOAD&PUSH 2)
124   (CALL2 12)                          ; MTELL
126   (LOAD&JMPIFNOT 2 L163)
129   (JMP L155)
131   L131
131   (LOAD&CDR&STORE 0)
133   (LOAD&JMPIFNOT 0 L39)
137   L137
137   (LOAD 0)
138   (CAR)
139   (JMPIFATOM L131)
141   (SKIP 1)
143   L143
143   (CONST&PUSH 8)                      ; "Bad argument to DEFTAYLOR:~%~M"
144   (LOAD&PUSH 5)
145   (CALL2 9)                           ; MERROR
147   L147
147   (LOAD&PUSH 1)
148   (CONST&PUSH 10)                     ; SP2
149   (CALL2&JMPIF 5 L122)                ; OLDGET
152   (LOAD&JMPIFNOT 2 L163)
155   L155
155   (CONST&PUSH 13)                     ; SP2VAR
156   (LOAD&PUSH 3)
157   (LOAD&PUSH 5)
158   (PUSH-UNBOUND 3)
160   (CALLS1&STORE 172 3)                ; SUBST
163   L163
163   (CONST&PUSH 14)                     ; *INDEX
164   (LOAD&PUSH 4)
165   (CALL2 15)                          ; SUBSUM
167   (STORE 3)
168   (LOAD&PUSH 1)
169   (LOAD&PUSH 4)
170   (CONST&PUSH 10)                     ; SP2
171   (CALL 3 16)                         ; PUTPROP
174   (LOAD 4)
175   (CAR)
176   (CAR&PUSH)
177   (JMPIFNOTEQTO 3 L189)               ; MQAPPLY
180   (LOAD&PUSH 1)
181   (LOAD 5)
182   (CDR)
183   (CAR)
184   (CDR&PUSH)
185   (CONST&PUSH 17)                     ; SP2SUBS
186   (CALL 3 16)                         ; PUTPROP
189   L189
189   (LOAD&PUSH 1)
190   (GETVALUE&PUSH 18)                  ; $PROPS
192   (CALL2 19)                          ; ADD2LNC
194   (LOAD&PUSH 1)
195   (LOAD&CONS&STORE 0)
197   L197
197   (GETVALUE 0)                        ; L
199   (CDR)
200   (SETVALUE 0)                        ; L
202   (JMPIF L55)
205   (CONST&PUSH 1)                      ; (MLIST)
206   (LOAD 1)
207   (CONS)
208   (SKIP 5)
210   (UNBIND1)
211   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUBSUM (*I E) ...)-118|
(CONST 0) = SUBSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBSUM
8     (SKIP&RET 1)


Disassembly of function SUBSUM
(CONST 0) = *I
(CONST 1) = E
(CONST 2) = SUSUM1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
8 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; *I
3     (LOAD 4)
4     (BIND 1)                            ; E
6     (GETVALUE&PUSH 1)                   ; E
8     (CALL1 2)                           ; SUSUM1
10    (UNBIND 2)
12    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SUSUM1 (E) ...)-119|
(CONST 0) = SUSUM1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUSUM1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUSUM1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUSUM1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUSUM1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUSUM1
8     (SKIP&RET 1)


Disassembly of function SUSUM1
(CONST 0) = E
(CONST 1) = %SUM
(CONST 2) = SP2VAR
(CONST 3) = SMONOP
(CONST 4) = "Argument to DEFTAYLOR must be power series at 0."
(CONST 5) = MERROR
(CONST 6) = *I
(CONST 7) = SUSUM1
(CONST 8) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*I E)
36 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L23)
7     (GETVALUE 0)                        ; E
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 1 L32)                   ; %SUM
14    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; SUSUM1
16    (GETVALUE&PUSH 0)                   ; E
18    (CALL2 8)                           ; RECUR-APPLY
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE 0)                        ; E
25    (JMP L20)
27    L27
27    (CONST&PUSH 4)                      ; "Argument to DEFTAYLOR must be power series at 0."
28    (CALL1 5)                           ; MERROR
30    (JMP L20)
32    L32
32    (GETVALUE 0)                        ; E
34    (CDR)
35    (CAR&PUSH)
36    (CONST&PUSH 2)                      ; SP2VAR
37    (CALL2&JMPIFNOT 3 L27)              ; SMONOP
40    (GETVALUE&PUSH 6)                   ; *I
42    (GETVALUE 0)                        ; E
44    (CDR)
45    (CDR)
46    (CAR&PUSH)
47    (GETVALUE&PUSH 0)                   ; E
49    (PUSH-UNBOUND 3)
51    (CALLS1 172)                        ; SUBST
53    (JMP L20)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE DECOMP) (SPECIAL VARLIST GENVAR ...))-120|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $POLYDECOMP (E V) ...)-121|
(CONST 0) = $POLYDECOMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $POLYDECOMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $POLYDECOMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $POLYDECOMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $POLYDECOMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $POLYDECOMP
8     (SKIP&RET 1)


Disassembly of function $POLYDECOMP
(CONST 0) = E
(CONST 1) = V
(CONST 2) = VARLIST
(CONST 3) = GENVAR
(CONST 4) = *VAR*
(CONST 5) = P
(CONST 6) = $FACTORFLAG
(CONST 7) = $RATFAC
(CONST 8) = RATDISREP
(CONST 9) = RATF
(CONST 10) = (1 1)
(CONST 11) = "Second arg to POLYDECOMP must be an atom"
(CONST 12) = MERROR
(CONST 13) = "Cannot POLYDECOMP a rational function"
(CONST 14) = (MLIST)
(CONST 15) = RDIS
(CONST 16) = PDECOMP
(CONST 17) = Q
(CONST 18) = 1
(CONST 19) = L
(CONST 20) = A
(CONST 21) = PDECPOW
(CONST 22) = PTERM
(CONST 23) = RATTIMES
(CONST 24) = 0
(CONST 25) = RATPLUS
(CONST 26) = PTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Q A L P *VAR* E V)
writes special variables : (L A *VAR* P)
206 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD 4)
4     (BIND 1)                            ; V
6     (GETVALUE&PUSH 1)                   ; V
8     (LIST 1)
10    (BIND 2)                            ; VARLIST
12    (NIL)
13    (BIND 3)                            ; GENVAR
15    (NIL)
16    (BIND 4)                            ; *VAR*
18    (NIL)
19    (BIND 5)                            ; P
21    (NIL&PUSH)
22    (NIL)
23    (BIND 6)                            ; $FACTORFLAG
25    (NIL)
26    (BIND 7)                            ; $RATFAC
28    (GETVALUE&PUSH 0)                   ; E
30    (CALL1&PUSH 8)                      ; RATDISREP
32    (CALL1 9)                           ; RATF
34    (CDR)
35    (SETVALUE 5)                        ; P
37    (GETVALUE&PUSH 1)                   ; V
39    (CALL1 9)                           ; RATF
41    (CDR)
42    (SETVALUE 4)                        ; *VAR*
44    (CDR)
45    (JMPIFNOT L103)
47    (GETVALUE 4)                        ; *VAR*
49    (CAR)
50    (CDR&PUSH)
51    (CONST&PUSH 10)                     ; (1 1)
52    (CALLS2&JMPIFNOT 2 L103)            ; EQUAL
55    (GETVALUE 4)                        ; *VAR*
57    (CAR)
58    (CAR)
59    (SETVALUE 4)                        ; *VAR*
61    L61
61    (GETVALUE 5)                        ; P
63    (CDR)
64    (JMPIFATOM L108)
66    (GETVALUE 5)                        ; P
68    (CDR)
69    (CAR&PUSH)
70    (GETVALUE 4)                        ; *VAR*
72    (JMPIFNOTEQ L108)
74    (CONST&PUSH 13)                     ; "Cannot POLYDECOMP a rational function"
75    (CALL1 12)                          ; MERROR
77    L77
77    (CONST&PUSH 14)                     ; (MLIST)
78    (GETVALUE 5)                        ; P
80    (JMPIFATOM L119)
82    (GETVALUE 5)                        ; P
84    (CAR&PUSH)
85    (GETVALUE 4)                        ; *VAR*
87    (JMPIFNOTEQ L119)
89    (GETVALUE&PUSH 5)                   ; P
91    (GETVALUE&PUSH 4)                   ; *VAR*
93    (CALL2 16)                          ; PDECOMP
95    (SETVALUE 5)                        ; P
97    (NIL&PUSH)
98    (GETVALUE&PUSH 5)                   ; P
100   (JMP L197)
103   L103
103   (CONST&PUSH 11)                     ; "Second arg to POLYDECOMP must be an atom"
104   (CALL1 12)                          ; MERROR
106   (JMP L61)
108   L108
108   (GETVALUE 5)                        ; P
110   (CDR)
111   (STORE 6)
112   (GETVALUE 5)                        ; P
114   (CAR)
115   (SETVALUE 5)                        ; P
117   (JMP L77)
119   L119
119   (GETVALUE&PUSH 5)                   ; P
121   (LOAD 8)
122   (CONS&PUSH)
123   (CALL1&PUSH 15)                     ; RDIS
125   (LIST 1)
127   (JMP L303)
130   L130
130   (GETVALUE&PUSH 19)                  ; L
132   (GETVALUE 19)                       ; L
134   (CDR)
135   (CAR&PUSH)
136   (GETVALUE 20)                       ; A
138   (CDR)
139   (CAR)
140   (CAR)
141   (CDR&PUSH)
142   (CONST&PUSH 18)                     ; 1
143   (CALL2&PUSH 22)                     ; PTERM
145   (GETVALUE 20)                       ; A
147   (CDR)
148   (CAR)
149   (CDR)
150   (CONS&PUSH)
151   (T&PUSH)
152   (CALL&PUSH 3 23)                    ; RATTIMES
155   (GETVALUE 20)                       ; A
157   (CDR)
158   (CAR)
159   (CAR)
160   (CDR&PUSH)
161   (CONST&PUSH 24)                     ; 0
162   (CALL2&PUSH 22)                     ; PTERM
164   (GETVALUE 20)                       ; A
166   (CDR)
167   (CAR)
168   (CDR)
169   (CONS&PUSH)
170   (CALL2&PUSH 25)                     ; RATPLUS
172   (GETVALUE 19)                       ; L
174   (CDR)
175   (CDR)
176   (CONS)
177   (JMP L266)
180   L180
180   (LOAD&CAR&PUSH 0)
182   (LOAD 0)
183   (BIND 17)                           ; Q
185   (GETVALUE&PUSH 17)                  ; Q
187   (CONST 18)                          ; 1
188   (CONS)
189   (UNBIND1)
190   (PUSH)
191   (LOAD&CONS&STORE 2)
193   (SKIP 1)
195   (LOAD&CDR&STORE 0)
197   L197
197   (LOAD&PUSH 0)
198   (CALLS1&JMPIFNOT 146 L180)          ; ENDP
201   (SKIP 1)
203   (LOAD&PUSH 0)
204   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
206   (SKIP 1)
208   (SETVALUE 5)                        ; P
210   (BIND 19)                           ; L
212   (NIL)
213   (BIND 20)                           ; A
215   (GETVALUE 19)                       ; L
217   (JMPIFNOT L278)
219   L219
219   (GETVALUE 19)                       ; L
221   (CAR&PUSH)
222   (GETVALUE&PUSH 4)                   ; *VAR*
224   (CALL2 21)                          ; PDECPOW
226   (SETVALUE 20)                       ; A
228   (JMPIFNOT L269)
230   (GETVALUE&PUSH 19)                  ; L
232   (GETVALUE 20)                       ; A
234   (CAR&PUSH)
235   (CALLS1 168)                        ; RPLACA
237   (GETVALUE 19)                       ; L
239   (CDR)
240   (JMPIF L130)
243   (GETVALUE 20)                       ; A
245   (CDR)
246   (CAR&PUSH)
247   (GETVALUE&PUSH 4)                   ; *VAR*
249   (CONST&PUSH 18)                     ; 1
250   (CONST&PUSH 18)                     ; 1
251   (LIST&PUSH 3)
253   (CONST 18)                          ; 1
254   (CONS&PUSH)
255   (CALLS2&JMPIF 2 L269)               ; EQUAL
258   (GETVALUE&PUSH 19)                  ; L
260   (GETVALUE 20)                       ; A
262   (CDR)
263   (CAR&PUSH)
264   (LIST 1)
266   L266
266   (PUSH)
267   (CALLS1 170)                        ; RPLACD
269   L269
269   (GETVALUE 19)                       ; L
271   (CDR)
272   (SETVALUE 19)                       ; L
274   (GETVALUE 19)                       ; L
276   (JMPIF L219)
278   L278
278   (GETVALUE 5)                        ; P
280   (CAR)
281   (CAR&PUSH)
282   (GETVALUE 5)                        ; P
284   (CAR)
285   (CDR&PUSH)
286   (LOAD&PUSH 15)
287   (CALL2 26)                          ; PTIMES
289   (CONS&PUSH)
290   (CALL1&PUSH 15)                     ; RDIS
292   (CONST&SYMBOL-FUNCTION&PUSH 15)     ; RDIS
294   (GETVALUE 5)                        ; P
296   (CDR&PUSH)
297   (CALLSR 0 22)                       ; MAPCAR
300   (CONS)
301   (UNBIND 2)
303   L303
303   (CONS)
304   (UNBIND 2)
306   (SKIP 1)
308   (UNBIND 6)
310   (SKIP&RET 3)


Disassembly of function #:|(DEFUN POLYDECOMP (P *VAR*) ...)-122|
(CONST 0) = POLYDECOMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLYDECOMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLYDECOMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLYDECOMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLYDECOMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLYDECOMP
8     (SKIP&RET 1)


Disassembly of function POLYDECOMP
(CONST 0) = P
(CONST 1) = *VAR*
(CONST 2) = $FACTORFLAG
(CONST 3) = $RATFAC
(CONST 4) = PDECOMP
(CONST 5) = Q
(CONST 6) = 1
(CONST 7) = L
(CONST 8) = A
(CONST 9) = PDECPOW
(CONST 10) = PTERM
(CONST 11) = RATTIMES
(CONST 12) = 0
(CONST 13) = RATPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Q A L *VAR* P)
writes special variables : (L A P)
141 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; *VAR*
6     (NIL)
7     (BIND 2)                            ; $FACTORFLAG
9     (NIL)
10    (BIND 3)                            ; $RATFAC
12    (GETVALUE 0)                        ; P
14    (JMPIFATOM L37)
16    (GETVALUE 0)                        ; P
18    (CAR&PUSH)
19    (GETVALUE 1)                        ; *VAR*
21    (JMPIFNOTEQ L37)
23    (GETVALUE&PUSH 0)                   ; P
25    (GETVALUE&PUSH 1)                   ; *VAR*
27    (CALL2 4)                           ; PDECOMP
29    (SETVALUE 0)                        ; P
31    (NIL&PUSH)
32    (GETVALUE&PUSH 0)                   ; P
34    (JMP L111)
37    L37
37    (GETVALUE&PUSH 0)                   ; P
39    (NIL)
40    (CONS)
41    (JMP L207)
44    L44
44    (GETVALUE&PUSH 7)                   ; L
46    (GETVALUE 7)                        ; L
48    (CDR)
49    (CAR&PUSH)
50    (GETVALUE 8)                        ; A
52    (CDR)
53    (CAR)
54    (CAR)
55    (CDR&PUSH)
56    (CONST&PUSH 6)                      ; 1
57    (CALL2&PUSH 10)                     ; PTERM
59    (GETVALUE 8)                        ; A
61    (CDR)
62    (CAR)
63    (CDR)
64    (CONS&PUSH)
65    (T&PUSH)
66    (CALL&PUSH 3 11)                    ; RATTIMES
69    (GETVALUE 8)                        ; A
71    (CDR)
72    (CAR)
73    (CAR)
74    (CDR&PUSH)
75    (CONST&PUSH 12)                     ; 0
76    (CALL2&PUSH 10)                     ; PTERM
78    (GETVALUE 8)                        ; A
80    (CDR)
81    (CAR)
82    (CDR)
83    (CONS&PUSH)
84    (CALL2&PUSH 13)                     ; RATPLUS
86    (GETVALUE 7)                        ; L
88    (CDR)
89    (CDR)
90    (CONS)
91    (JMP L180)
94    L94
94    (LOAD&CAR&PUSH 0)
96    (LOAD 0)
97    (BIND 5)                            ; Q
99    (GETVALUE&PUSH 5)                   ; Q
101   (CONST 6)                           ; 1
102   (CONS)
103   (UNBIND1)
104   (PUSH)
105   (LOAD&CONS&STORE 2)
107   (SKIP 1)
109   (LOAD&CDR&STORE 0)
111   L111
111   (LOAD&PUSH 0)
112   (CALLS1&JMPIFNOT 146 L94)           ; ENDP
115   (SKIP 1)
117   (LOAD&PUSH 0)
118   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
120   (SKIP 1)
122   (SETVALUE 0)                        ; P
124   (BIND 7)                            ; L
126   (NIL)
127   (BIND 8)                            ; A
129   (GETVALUE 7)                        ; L
131   (JMPIFNOT L192)
133   L133
133   (GETVALUE 7)                        ; L
135   (CAR&PUSH)
136   (GETVALUE&PUSH 1)                   ; *VAR*
138   (CALL2 9)                           ; PDECPOW
140   (SETVALUE 8)                        ; A
142   (JMPIFNOT L183)
144   (GETVALUE&PUSH 7)                   ; L
146   (GETVALUE 8)                        ; A
148   (CAR&PUSH)
149   (CALLS1 168)                        ; RPLACA
151   (GETVALUE 7)                        ; L
153   (CDR)
154   (JMPIF L44)
157   (GETVALUE 8)                        ; A
159   (CDR)
160   (CAR&PUSH)
161   (GETVALUE&PUSH 1)                   ; *VAR*
163   (CONST&PUSH 6)                      ; 1
164   (CONST&PUSH 6)                      ; 1
165   (LIST&PUSH 3)
167   (CONST 6)                           ; 1
168   (CONS&PUSH)
169   (CALLS2&JMPIF 2 L183)               ; EQUAL
172   (GETVALUE&PUSH 7)                   ; L
174   (GETVALUE 8)                        ; A
176   (CDR)
177   (CAR&PUSH)
178   (LIST 1)
180   L180
180   (PUSH)
181   (CALLS1 170)                        ; RPLACD
183   L183
183   (GETVALUE 7)                        ; L
185   (CDR)
186   (SETVALUE 7)                        ; L
188   (GETVALUE 7)                        ; L
190   (JMPIF L133)
192   L192
192   (GETVALUE 0)                        ; P
194   (CAR)
195   (CAR&PUSH)
196   (GETVALUE 0)                        ; P
198   (CAR)
199   (CDR)
200   (CONS&PUSH)
201   (GETVALUE 0)                        ; P
203   (CDR)
204   (CONS)
205   (UNBIND 2)
207   L207
207   (UNBIND 4)
209   (SKIP&RET 3)


Disassembly of function #:|(DEFUN PDECRED (F H *VAR*) ...)-123|
(CONST 0) = PDECRED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDECRED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDECRED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDECRED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDECRED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDECRED
8     (SKIP&RET 1)


Disassembly of function PDECRED
(CONST 0) = F
(CONST 1) = H
(CONST 2) = *VAR*
(CONST 3) = 1
(CONST 4) = PDIVIDE
(CONST 5) = X
(CONST 6) = FIXNUMP
(CONST 7) = Q
(CONST 8) = *ANS*
(CONST 9) = PSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*ANS* Q X F *VAR* H)
writes special variables : (Q *ANS* F)
197 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; F
3     (LOAD 5)
4     (BIND 1)                            ; H
6     (LOAD 7)
7     (BIND 2)                            ; *VAR*
9     (GETVALUE 1)                        ; H
11    (JMPIFATOM L82)
14    (GETVALUE 1)                        ; H
16    (CAR&PUSH)
17    (GETVALUE 2)                        ; *VAR*
19    (JMPIFNOTEQ L82)
21    (GETVALUE 1)                        ; H
23    (CDR)
24    (CAR&PUSH)
25    (JMPIFEQTO 3 L82)                   ; 1
28    (GETVALUE 0)                        ; F
30    (CDR)
31    (CAR&PUSH)
32    (GETVALUE 1)                        ; H
34    (CDR)
35    (CAR&PUSH)
36    (CALLS2&PUSH 184)                   ; REM
38    (CALLS2&JMPIFNOT 145 L82)           ; ZEROP
41    (GETVALUE&PUSH 0)                   ; F
43    (GETVALUE&PUSH 1)                   ; H
45    (CALL2 4)                           ; PDIVIDE
47    (SETVALUE 0)                        ; F
49    (CDR)
50    (CAR)
51    (CAR)
52    (BIND 5)                            ; X
54    (GETVALUE&PUSH 5)                   ; X
56    (CALL1&JMPIF 6 L68)                 ; FIXNUMP
59    (GETVALUE 5)                        ; X
61    (JMPIFCONSP L86)
63    (GETVALUE&PUSH 5)                   ; X
65    (CALLS2&JMPIFNOT 15 L77)            ; FLOATP
68    L68
68    (GETVALUE&PUSH 5)                   ; X
70    (CALLS2 145)                        ; ZEROP
72    (UNBIND1)
73    (JMPIFNOT L87)
75    (JMP L95)
77    L77
77    (UNBIND1)
78    (JMPIFNOT L87)
80    (JMP L95)
82    L82
82    (NIL)
83    (JMP L287)
86    L86
86    (UNBIND1)
87    L87
87    (GETVALUE 0)                        ; F
89    (CDR)
90    (CAR)
91    (CDR&PUSH)
92    (JMPIFEQTO 3 L82)                   ; 1
95    L95
95    (GETVALUE 0)                        ; F
97    (CAR)
98    (CAR&PUSH)
99    (GETVALUE&PUSH 1)                   ; H
101   (CALL2 4)                           ; PDIVIDE
103   (BIND 7)                            ; Q
105   (CONST&PUSH 3)                      ; 1
106   (NIL)
107   (BIND 8)                            ; *ANS*
109   L109
109   (GETVALUE 7)                        ; Q
111   (CAR)
112   (CAR)
113   (BIND 5)                            ; X
115   (GETVALUE&PUSH 5)                   ; X
117   (CALL1&JMPIF 6 L130)                ; FIXNUMP
120   (GETVALUE 5)                        ; X
122   (JMPIFCONSP L140)
124   (GETVALUE&PUSH 5)                   ; X
126   (CALLS2&JMPIFNOT 15 L253)           ; FLOATP
130   L130
130   (GETVALUE&PUSH 5)                   ; X
132   (CALLS2 145)                        ; ZEROP
134   (UNBIND1)
135   (JMPIFNOT L141)
137   (JMP L257)
140   L140
140   (UNBIND1)
141   L141
141   (GETVALUE 7)                        ; Q
143   (CDR)
144   (CAR)
145   (CDR&PUSH)
146   (JMPIFNOTEQTO 3 L201)               ; 1
149   (GETVALUE 7)                        ; Q
151   (CDR)
152   (CAR)
153   (CAR)
154   (JMPIFATOM L166)
156   (GETVALUE 7)                        ; Q
158   (CDR)
159   (CAR)
160   (CAR)
161   (CAR&PUSH)
162   (GETVALUE 2)                        ; *VAR*
164   (JMPIFEQ L201)
166   L166
166   (GETVALUE 7)                        ; Q
168   (CDR)
169   (CAR)
170   (CAR)
171   (BIND 5)                            ; X
173   (GETVALUE&PUSH 5)                   ; X
175   (CALL1&JMPIF 6 L187)                ; FIXNUMP
178   (GETVALUE 5)                        ; X
180   (JMPIFCONSP L209)
182   (GETVALUE&PUSH 5)                   ; X
184   (CALLS2&JMPIFNOT 15 L196)           ; FLOATP
187   L187
187   (GETVALUE&PUSH 5)                   ; X
189   (CALLS2 145)                        ; ZEROP
191   (UNBIND1)
192   (JMPIFNOT L210)
194   (JMP L222)
196   L196
196   (UNBIND1)
197   (JMPIFNOT L210)
199   (JMP L222)
201   L201
201   (NIL)
202   (UNBIND1)
203   (SKIP 1)
205   (UNBIND1)
206   (JMP L287)
209   L209
209   (UNBIND1)
210   L210
210   (LOAD&PUSH 3)
211   (GETVALUE 7)                        ; Q
213   (CDR)
214   (CAR)
215   (CAR&PUSH)
216   (GETVALUE 8)                        ; *ANS*
218   (CONS)
219   (CONS)
220   (SETVALUE 8)                        ; *ANS*
222   L222
222   (GETVALUE 7)                        ; Q
224   (CAR)
225   (CAR&PUSH)
226   (GETVALUE&PUSH 1)                   ; H
228   (CALL2 4)                           ; PDIVIDE
230   (SETVALUE 7)                        ; Q
232   (LOAD&INC&STORE 3)
234   (JMP L109)
237   L237
237   (GETVALUE&PUSH 2)                   ; *VAR*
239   (LOAD&PUSH 4)
240   (GETVALUE 7)                        ; Q
242   (CDR)
243   (CAR)
244   (CAR&PUSH)
245   (GETVALUE 8)                        ; *ANS*
247   (CONS)
248   (CONS&PUSH)
249   (CALL2 9)                           ; PSIMP
251   (JMP L283)
253   L253
253   (UNBIND1)
254   (JMPIFNOT L141)
257   L257
257   (GETVALUE 7)                        ; Q
259   (CDR)
260   (CAR)
261   (CDR&PUSH)
262   (JMPIFNOTEQTO 3 L282)               ; 1
265   (GETVALUE 7)                        ; Q
267   (CDR)
268   (CAR)
269   (CAR)
270   (JMPIFATOM L237)
272   (GETVALUE 7)                        ; Q
274   (CDR)
275   (CAR)
276   (CAR)
277   (CAR&PUSH)
278   (GETVALUE 2)                        ; *VAR*
280   (JMPIFNOTEQ L237)
282   L282
282   (NIL)
283   L283
283   (UNBIND1)
284   (SKIP 1)
286   (UNBIND1)
287   L287
287   (UNBIND 3)
289   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PDECOMP (P *VAR*) ...)-124|
(CONST 0) = PDECOMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDECOMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDECOMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDECOMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDECOMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDECOMP
8     (SKIP&RET 1)


Disassembly of function PDECOMP
(CONST 0) = P
(CONST 1) = *VAR*
(CONST 2) = 0
(CONST 3) = PTERM
(CONST 4) = C
(CONST 5) = A
(CONST 6) = 1
(CONST 7) = *X*
(CONST 8) = PDIFFERENCE
(CONST 9) = PDECOMP*
(CONST 10) = PCPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A C *VAR* P)
writes special variable : (A)
29 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; *VAR*
6     (GETVALUE 0)                        ; P
8     (CDR&PUSH)
9     (CONST&PUSH 2)                      ; 0
10    (CALL2 3)                           ; PTERM
12    (BIND 4)                            ; C
14    (NIL)
15    (BIND 5)                            ; A
17    (GETVALUE&PUSH 1)                   ; *VAR*
19    (CONST&PUSH 6)                      ; 1
20    (CONST&PUSH 6)                      ; 1
21    (LIST 3)
23    (BIND 7)                            ; *X*
25    (GETVALUE&PUSH 4)                   ; C
27    (GETVALUE&PUSH 0)                   ; P
29    (GETVALUE&PUSH 4)                   ; C
31    (CALL2&PUSH 8)                      ; PDIFFERENCE
33    (CALL1 9)                           ; PDECOMP*
35    (SETVALUE 5)                        ; A
37    (CAR&PUSH)
38    (CALL2&PUSH 10)                     ; PCPLUS
40    (GETVALUE 5)                        ; A
42    (CDR)
43    (CONS)
44    (UNBIND 5)
46    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PDECOMP* (*P*) ...)-125|
(CONST 0) = PDECOMP*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDECOMP*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDECOMP*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDECOMP*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDECOMP*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDECOMP*
8     (SKIP&RET 1)


Disassembly of function PDECOMP*
(CONST 0) = *P*
(CONST 1) = *X*
(CONST 2) = PQUOTIENT
(CONST 3) = PFACTOR
(CONST 4) = PDECGDFRM
(CONST 5) = L
(CONST 6) = A
(CONST 7) = PDECPRIMEP
(CONST 8) = PDECOMP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A L *X* *P*)
writes special variable : (A)
36 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; *P*
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; *P*
6     (GETVALUE&PUSH 1)                   ; *X*
8     (CALL2&PUSH 2)                      ; PQUOTIENT
10    (CALL1&PUSH 3)                      ; PFACTOR
12    (CALL1 4)                           ; PDECGDFRM
14    (BIND 5)                            ; L
16    (LOAD 3)
17    (BIND 6)                            ; A
19    (GETVALUE 0)                        ; *P*
21    (CDR)
22    (CAR&PUSH)
23    (CALL1&JMPIF 7 L54)                 ; PDECPRIMEP
26    (GETVALUE&PUSH 1)                   ; *X*
28    (GETVALUE&PUSH 5)                   ; L
30    (CALL2 8)                           ; PDECOMP1
32    (SETVALUE 6)                        ; A
34    (JMPIFNOT L54)
36    (GETVALUE 6)                        ; A
38    (CAR&PUSH)
39    (JSR&PUSH L0)
41    (GETVALUE 6)                        ; A
43    (CDR&PUSH)
44    (CALLSR 2 34)                       ; APPEND
47    L47
47    (UNBIND 2)
49    (SKIP 1)
51    (UNBIND1)
52    (SKIP&RET 2)
54    L54
54    (GETVALUE&PUSH 0)                   ; *P*
56    (LIST 1)
58    (JMP L47)


Disassembly of function #:|(DEFUN PDECOMP1 (PROD L) ...)-126|
(CONST 0) = PDECOMP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDECOMP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDECOMP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDECOMP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDECOMP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDECOMP1
8     (SKIP&RET 1)


Disassembly of function PDECOMP1
(CONST 0) = L
(CONST 1) = *P*
(CONST 2) = *VAR*
(CONST 3) = PDECRED
(CONST 4) = PTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*VAR* *P* L)
writes special variable : (L)
40 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L29)
7     (LOAD&PUSH 5)
8     (GETVALUE 0)                        ; L
10    (CDR&PUSH)
11    (JSR L0)
13    (JMPIF1 L26)
15    (GETVALUE 0)                        ; L
17    (CAR&PUSH)
18    (LOAD&PUSH 6)
19    (CALL2&PUSH 4)                      ; PTIMES
21    (GETVALUE 0)                        ; L
23    (CDR&PUSH)
24    (JSR L0)
26    L26
26    (UNBIND1)
27    (SKIP&RET 3)
29    L29
29    (LOAD 5)
30    (CDR)
31    (CAR&PUSH)
32    (GETVALUE 1)                        ; *P*
34    (CDR)
35    (CAR&PUSH)
36    (CALLS2 2)                          ; EQUAL
38    (NOT)
39    (JMPIFNOT1 L26)
41    (GETVALUE&PUSH 1)                   ; *P*
43    (LOAD&PUSH 6)
44    (GETVALUE&PUSH 2)                   ; *VAR*
46    (CALL 3 3)                          ; PDECRED
49    (SETVALUE 0)                        ; L
51    (JMPIFNOT1 L26)
53    (PUSH)
54    (LOAD&PUSH 6)
55    (LIST 2)
57    (JMP L26)


Disassembly of function #:|(DEFUN PDECGDFRM (L) ...)-127|
(CONST 0) = PDECGDFRM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDECGDFRM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDECGDFRM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDECGDFRM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDECGDFRM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDECGDFRM
8     (SKIP&RET 1)


Disassembly of function PDECGDFRM
(CONST 0) = L
(CONST 1) = LL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LL L)
writes special variables : (LL L)
53 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (CALLS1&PUSH 158)                   ; COPY-LIST
7     (GETVALUE 0)                        ; L
9     (CAR&PUSH)
10    (LIST 1)
12    (BIND 1)                            ; LL
14    (LOAD 3)
15    (BIND 0)                            ; L
17    (JMP L44)
19    L19
19    (LOAD&PUSH 0)
20    (CALLS2 145)                        ; ZEROP
22    (SKIP 1)
24    (JMPIFNOT L67)
26    L26
26    (GETVALUE 0)                        ; L
28    (CDR)
29    (CDR)
30    (SETVALUE 0)                        ; L
32    (GETVALUE 0)                        ; L
34    (JMPIFNOT L71)
36    L36
36    (GETVALUE 0)                        ; L
38    (CAR&PUSH)
39    (GETVALUE 1)                        ; LL
41    (CONS)
42    (SETVALUE 1)                        ; LL
44    L44
44    (GETVALUE 0)                        ; L
46    (CDR&PUSH)
47    (GETVALUE 0)                        ; L
49    (CDR)
50    (CAR&PUSH)
51    (CALLS2&PUSH 151)                   ; 1-
53    (CALLS1 168)                        ; RPLACA
55    (GETVALUE 0)                        ; L
57    (CDR)
58    (CAR&PUSH)
59    (LOAD&PUSH 0)
60    (CALLS2&JMPIF 8 L19)                ; NUMBERP
63    (SKIP 1)
65    (JMPIF L26)
67    L67
67    (GETVALUE 0)                        ; L
69    (JMPIF L36)
71    L71
71    (GETVALUE 1)                        ; LL
73    (UNBIND 2)
75    (SKIP 1)
77    (UNBIND1)
78    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PDECPRIMEP (X) ...)-128|
(CONST 0) = PDECPRIMEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDECPRIMEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDECPRIMEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDECPRIMEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDECPRIMEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDECPRIMEP
8     (SKIP&RET 1)


Disassembly of function PDECPRIMEP
(CONST 0) = X
(CONST 1) = CFACTORW
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; CFACTORW
7     (SETVALUE 0)                        ; X
9     (CDR)
10    (CDR)
11    (NOT)
12    (JMPIFNOT1 L20)
14    (GETVALUE 0)                        ; X
16    (CDR)
17    (CAR&PUSH)
18    (CONST 2)                           ; 1
19    (EQ)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PDECPOW (P *VAR*) ...)-129|
(CONST 0) = PDECPOW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDECPOW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDECPOW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDECPOW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDECPOW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDECPOW
8     (SKIP&RET 1)


Disassembly of function PDECPOW
(CONST 0) = P
(CONST 1) = *VAR*
(CONST 2) = PDERIVATIVE
(CONST 3) = A
(CONST 4) = OLDCONTENT
(CONST 5) = TESTDIVIDE
(CONST 6) = 1
(CONST 7) = PTIMES
(CONST 8) = RATREDUCE
(CONST 9) = RATTIMES
(CONST 10) = PEXPT
(CONST 11) = RATDIF
(CONST 12) = RATPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A *VAR* P)
writes special variables : (A P)
91 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; *VAR*
6     (GETVALUE 0)                        ; P
8     (CAR)
9     (SETVALUE 0)                        ; P
11    (PUSH)
12    (GETVALUE&PUSH 1)                   ; *VAR*
14    (CALL2&PUSH 2)                      ; PDERIVATIVE
16    (PUSH-NIL 3)
18    (NIL)
19    (BIND 3)                            ; A
21    (PUSH-NIL 2)
23    (LOAD&PUSH 8)
24    (CALL1 4)                           ; OLDCONTENT
26    (STORE 6)
27    (CAR)
28    (STORE 5)
29    (LOAD 6)
30    (CDR)
31    (CAR)
32    (STORE 6)
33    (LOAD&PUSH 8)
34    (GETVALUE&PUSH 1)                   ; *VAR*
36    (CALL2 2)                           ; PDERIVATIVE
38    (STORE 7)
39    (PUSH)
40    (CALL1 4)                           ; OLDCONTENT
42    (CDR)
43    (CAR)
44    (STORE 0)
45    (LOAD&PUSH 6)
46    (LOAD&PUSH 1)
47    (CALL2 5)                           ; TESTDIVIDE
49    (STORE 1)
50    (JMPIFNOT1 L125)
53    (PUSH)
54    (CALLS2 4)                          ; CONSP
56    (JMPIFNOT1 L125)
59    (LOAD&CAR&PUSH 1)
61    (GETVALUE 1)                        ; *VAR*
63    (EQ)
64    (JMPIFNOT1 L125)
66    (GETVALUE&PUSH 1)                   ; *VAR*
68    (GETVALUE 0)                        ; P
70    (CDR)
71    (CAR&PUSH)
72    (CONST&PUSH 6)                      ; 1
73    (LIST&PUSH 3)
75    (CONST 6)                           ; 1
76    (CONS&PUSH)
77    (LOAD&PUSH 6)
78    (GETVALUE 0)                        ; P
80    (CDR)
81    (CAR&PUSH)
82    (LOAD 4)
83    (CDR)
84    (CDR)
85    (CAR&PUSH)
86    (CALL2&PUSH 7)                      ; PTIMES
88    (CALL2 8)                           ; RATREDUCE
90    (SETVALUE 3)                        ; A
92    (PUSH)
93    (T&PUSH)
94    (CALL&PUSH 3 9)                     ; RATTIMES
97    (GETVALUE&PUSH 0)                   ; P
99    (CONST 6)                           ; 1
100   (CONS&PUSH)
101   (GETVALUE&PUSH 3)                   ; A
103   (LOAD&PUSH 4)
104   (GETVALUE 0)                        ; P
106   (CDR)
107   (CAR&PUSH)
108   (CALL2&PUSH 10)                     ; PEXPT
110   (CONST 6)                           ; 1
111   (CONS&PUSH)
112   (T&PUSH)
113   (CALL&PUSH 3 9)                     ; RATTIMES
116   (CALL2&PUSH 11)                     ; RATDIF
118   (CALL2&PUSH 12)                     ; RATPLUS
120   (LOAD&PUSH 2)
121   (CONST 6)                           ; 1
122   (CONS&PUSH)
123   (LIST 2)
125   L125
125   (SKIP 2)
127   (UNBIND1)
128   (SKIP 4)
130   (UNBIND 2)
132   (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL *MFACTL *FACTLIST ...))-130|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/combin.fas
Wrote file /cygdrive/e/temp/maxima/src/combin.lis