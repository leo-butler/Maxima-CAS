Listing of compilation of file /cygdrive/e/temp/maxima/src/linnew.lisp
on 2002-12-17 13:35:14 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/linnew.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE LINNEW)-2|
(CONST 0) = LINNEW
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; LINNEW
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *TMARRAYS* *A2* ...))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL N NX ...))-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL $LINENUM $DISPFLAG ...))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *TMARRAYS* NIL)-6|
(CONST 0) = (SPECIAL *TMARRAYS*)
(CONST 1) = *TMARRAYS*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *TMARRAYS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *TMARRAYS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *TMARRAYS*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *TMARRAYS*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO THRESHOLD NIL ...)-7|
(CONST 0) = THRESHOLD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE THRESHOLD>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; THRESHOLD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; THRESHOLD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE THRESHOLD>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; THRESHOLD
10    (SKIP&RET 1)


Disassembly of function THRESHOLD
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = 10
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; 10
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TMINITIALFLAG NIL ...)-8|
(CONST 0) = TMINITIALFLAG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMINITIALFLAG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMINITIALFLAG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMINITIALFLAG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMINITIALFLAG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMINITIALFLAG
8     (SKIP&RET 1)


Disassembly of function TMINITIALFLAG
(CONST 0) = $WISE
(CONST 1) = $FOOL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($FOOL $WISE)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $WISE
1     (CALLS1&JMPIF 79 L7)                ; BOUNDP
4     (NIL)
5     (SETVALUE 0)                        ; $WISE
7     L7
7     (CONST&PUSH 1)                      ; $FOOL
8     (CALLS1&JMPIFNOT 79 L14)            ; BOUNDP
11    (NIL)
12    (SKIP&RET 1)
14    L14
14    (NIL)
15    (SETVALUE 1)                        ; $FOOL
17    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TMDET (A4 N) ...)-9|
(CONST 0) = TMDET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMDET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMDET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMDET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMDET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMDET
8     (SKIP&RET 1)


Disassembly of function TMDET
(CONST 0) = N
(CONST 1) = IX
(CONST 2) = TMINITIALFLAG
(CONST 3) = TMHEADING
(CONST 4) = 0
(CONST 5) = NX
(CONST 6) = 1
(CONST 7) = TMINOR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
writes special variables : (NX IX)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (PUSH-NIL 2)
5     (NIL)
6     (BIND 1)                            ; IX
8     (CALL0 2)                           ; TMINITIALFLAG
10    (CALL0 3)                           ; TMHEADING
12    (CONST 4)                           ; 0
13    (SETVALUE 1)                        ; IX
15    (SETVALUE 5)                        ; NX
17    (CONST&PUSH 6)                      ; 1
18    (JMP L25)
20    L20
20    (LOAD&PUSH 0)
21    (LOAD&CONS&STORE 5)
23    (LOAD&INC&STORE 0)
25    L25
25    (LOAD&PUSH 0)
26    (GETVALUE&PUSH 0)                   ; N
28    (CALLSR&JMPIFNOT 1 48 L20)          ; >
32    (SKIP 1)
34    (LOAD&PUSH 4)
35    (CALLS2&STORE 73 4)                 ; NREVERSE
38    (LOAD&PUSH 10)
39    (GETVALUE&PUSH 0)                   ; N
41    (CONST&PUSH 6)                      ; 1
42    (LOAD&PUSH 7)
43    (CONST&PUSH 4)                      ; 0
44    (CALL 5 7)                          ; TMINOR
47    (STORE 3)
48    (UNBIND1)
49    (SKIP 2)
51    (UNBIND1)
52    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TMLIN (A4 N M ...) ...)-10|
(CONST 0) = TMLIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMLIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMLIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMLIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMLIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMLIN
8     (SKIP&RET 1)


Disassembly of function TMLIN
(CONST 0) = N
(CONST 1) = M
(CONST 2) = NX
(CONST 3) = R
(CONST 4) = TMDEFARRAY
(CONST 5) = TMINITIALFLAG
(CONST 6) = TMHEADING
(CONST 7) = 1
(CONST 8) = 0
(CONST 9) = IX
(CONST 10) = RES
(CONST 11) = $WISE
(CONST 12) = TMKILLARRAY
(CONST 13) = TMINOR
(CONST 14) = (0 . 1)
(CONST 15) = "COEFFICIENT MATRIX IS SINGULAR"
(CONST 16) = MERROR
(CONST 17) = TMREARRAY
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R NX M RES IX $WISE N)
writes special variables : (R IX RES)
96 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; NX
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; R
13    (GETVALUE&PUSH 0)                   ; N
15    (CALL1 4)                           ; TMDEFARRAY
17    (CALL0 5)                           ; TMINITIALFLAG
19    (CALL0 6)                           ; TMHEADING
21    (CONST&PUSH 7)                      ; 1
22    (JMP L29)
24    L24
24    (LOAD&PUSH 0)
25    (LOAD&CONS&STORE 4)
27    (LOAD&INC&STORE 0)
29    L29
29    (LOAD&PUSH 0)
30    (GETVALUE&PUSH 0)                   ; N
32    (CALLSR&JMPIFNOT 1 48 L24)          ; >
36    (SKIP 1)
38    (LOAD&PUSH 3)
39    (CALLS2&STORE 72 3)                 ; REVERSE
42    (CONST 8)                           ; 0
43    (BIND 9)                            ; IX
45    (NIL&PUSH)
46    (JMP L128)
49    L49
49    (CONST&PUSH 7)                      ; 1
50    (NIL)
51    (BIND 10)                           ; RES
53    (JMP L83)
55    L55
55    (CONST 7)                           ; 1
56    (JMP L93)
58    L58
58    (GETVALUE 11)                       ; $WISE
60    (JMPIF L66)
62    (GETVALUE&PUSH 9)                   ; IX
64    (CALL1 12)                          ; TMKILLARRAY
66    L66
66    (LOAD&PUSH 25)
68    (GETVALUE&PUSH 0)                   ; N
70    (CONST&PUSH 7)                      ; 1
71    (LOAD&PUSH 14)
72    (LOAD&PUSH 7)
73    (CALL&PUSH 5 13)                    ; TMINOR
76    (GETVALUE 10)                       ; RES
78    (CONS)
79    (SETVALUE 10)                       ; RES
81    (LOAD&INC&STORE 3)
83    L83
83    (LOAD&PUSH 3)
84    (GETVALUE&PUSH 9)                   ; IX
86    (CONST&PUSH 8)                      ; 0
87    (CALLSR&JMPIF 1 45 L55)             ; =
91    (GETVALUE 1)                        ; M
93    L93
93    (PUSH)
94    (CALLSR&JMPIFNOT 1 48 L58)          ; >
98    (GETVALUE&PUSH 10)                  ; RES
100   (CALLS2 72)                         ; REVERSE
102   (UNBIND1)
103   (STORE 0)
104   (LOAD&CONS&STORE 0)
106   (GETVALUE&PUSH 9)                   ; IX
108   (CONST&PUSH 8)                      ; 0
109   (CALLSR&JMPIFNOT 1 45 L122)         ; =
113   (LOAD&CAR&PUSH 0)
115   (CONST&PUSH 14)                     ; (0 . 1)
116   (CALLS2&JMPIFNOT 2 L122)            ; EQUAL
119   (CONST&PUSH 15)                     ; "COEFFICIENT MATRIX IS SINGULAR"
120   (CALL1 16)                          ; MERROR
122   L122
122   (GETVALUE&PUSH 9)                   ; IX
124   (CALLS2 150)                        ; 1+
126   (SETVALUE 9)                        ; IX
128   L128
128   (GETVALUE&PUSH 9)                   ; IX
130   (GETVALUE&PUSH 2)                   ; NX
132   (CALLSR&JMPIFNOT 1 48 L49)          ; >
137   (LOAD&PUSH 0)
138   (CALLS2 72)                         ; REVERSE
140   (SKIP 1)
142   (UNBIND1)
143   (SETVALUE 3)                        ; R
145   (GETVALUE&PUSH 0)                   ; N
147   (CALL1 17)                          ; TMREARRAY
149   (GETVALUE 3)                        ; R
151   (UNBIND1)
152   (SKIP 1)
154   (UNBIND 3)
156   (SKIP&RET 5)


Disassembly of function #:|(DEFUN TMINOR (A4 N K ...) ...)-11|
(CONST 0) = TMINOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMINOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMINOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMINOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMINOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMINOR
8     (SKIP&RET 1)


Disassembly of function TMINOR
(CONST 0) = N
(CONST 1) = K
(CONST 2) = L
(CONST 3) = NAME
(CONST 4) = GET-ARRAY-POINTER
(CONST 5) = IX
(CONST 6) = 1
(CONST 7) = J
(CONST 8) = (0 . 1)
(CONST 9) = EXTRACT
(CONST 10) = (0 . 1)
(CONST 11) = TMACCESS
(CONST 12) = RATPLUS
(CONST 13) = RATDIFFERENCE
(CONST 14) = $FOOL
(CONST 15) = TMEVAL
(CONST 16) = TMNOMOREUSE
(CONST 17) = TMSTORE
(CONST 18) = RATTIMES
(CONST 19) = $WISE
(CONST 20) = TMKILL
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($WISE $FOOL J NAME L IX N K)
writes special variables : (J NAME L)
163 byte-code instructions:
0     L0
0     (LOAD 4)
1     (BIND 0)                            ; N
3     (LOAD 6)
4     (BIND 1)                            ; K
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; L
10    (NIL&PUSH)
11    (NIL)
12    (BIND 3)                            ; NAME
14    (NIL&PUSH)
15    (LOAD&PUSH 20)
16    (CALL1 4)                           ; GET-ARRAY-POINTER
18    (STORE 20)
20    (GETVALUE&PUSH 1)                   ; K
22    (GETVALUE&PUSH 0)                   ; N
24    (CALLSR&JMPIFNOT 1 45 L82)          ; =
28    (GETVALUE&PUSH 1)                   ; K
30    (GETVALUE&PUSH 5)                   ; IX
32    (CALLSR&JMPIF 1 45 L49)             ; =
36    (LOAD&PUSH 20)
37    (LOAD&CAR&PUSH 18)
39    (GETVALUE 1)                        ; K
41    L41
41    (PUSH)
42    (CALLSR&STORE 2 1 4)                ; AREF
46    (JMP L267)
49    L49
49    (LOAD&PUSH 20)
50    (LOAD&CAR&PUSH 18)
52    (LOAD&PUSH 18)
53    (GETVALUE&PUSH 0)                   ; N
55    (CALLSR 2 53)                       ; +
58    (JMP L41)
60    L60
60    (LOAD&PUSH 24)
61    (GETVALUE&PUSH 2)                   ; L
63    (LOAD&PUSH 22)
64    (GETVALUE&PUSH 0)                   ; N
66    (CALLSR 2 53)                       ; +
69    (JMP L132)
71    L71
71    (CONST 12)                          ; RATPLUS
72    (JMP L155)
75    L75
75    (GETVALUE&PUSH 3)                   ; NAME
77    (CALL1 15)                          ; TMEVAL
79    (JMP L218)
82    L82
82    (CONST 6)                           ; 1
83    (BIND 7)                            ; J
85    (CONST&PUSH 8)                      ; (0 . 1)
86    L86
86    (GETVALUE&PUSH 7)                   ; J
88    (GETVALUE&PUSH 0)                   ; N
90    (GETVALUE&PUSH 1)                   ; K
92    (CALLSR&PUSH 1 54)                  ; -
95    (CALLS2&PUSH 150)                   ; 1+
97    (CALLSR&JMPIF 1 48 L261)            ; >
102   (LOAD&PUSH 21)
103   (GETVALUE&PUSH 7)                   ; J
105   (CALL2 9)                           ; EXTRACT
107   (SETVALUE 2)                        ; L
109   (CDR)
110   (CAR)
111   (STORE 12)
113   (GETVALUE 2)                        ; L
115   (CAR)
116   (SETVALUE 2)                        ; L
118   (GETVALUE&PUSH 1)                   ; K
120   (GETVALUE&PUSH 5)                   ; IX
122   (CALLSR&JMPIF 1 45 L60)             ; =
127   (LOAD&PUSH 24)
128   (GETVALUE&PUSH 2)                   ; L
130   (GETVALUE 1)                        ; K
132   L132
132   (PUSH)
133   (CALLSR&STORE 2 1 4)                ; AREF
137   (PUSH)
138   (CONST&PUSH 10)                     ; (0 . 1)
139   (CALLS2&JMPIF 2 L232)               ; EQUAL
143   (LOAD&PUSH 12)
144   (CALL1 11)                          ; TMACCESS
146   (SETVALUE 3)                        ; NAME
148   (GETVALUE&PUSH 7)                   ; J
150   (CALLS2&JMPIF 148 L71)              ; ODDP
154   (CONST 13)                          ; RATDIFFERENCE
155   L155
155   (PUSH)
156   (LOAD&PUSH 1)
157   (LOAD&PUSH 6)
158   (GETVALUE 14)                       ; $FOOL
160   (JMPIF L184)
162   (GETVALUE&PUSH 3)                   ; NAME
164   (CALL1&JMPIF 15 L75)                ; TMEVAL
168   (GETVALUE&PUSH 7)                   ; J
170   (GETVALUE&PUSH 2)                   ; L
172   (GETVALUE&PUSH 1)                   ; K
174   (CALL 3 16)                         ; TMNOMOREUSE
177   (JMPIFNOT L200)
179   (GETVALUE&PUSH 3)                   ; NAME
181   (NIL&PUSH)
182   (CALL2 17)                          ; TMSTORE
184   L184
184   (LOAD&PUSH 27)
186   (GETVALUE&PUSH 0)                   ; N
188   (GETVALUE&PUSH 1)                   ; K
190   (CALLS2&PUSH 150)                   ; 1+
192   (LOAD&PUSH 18)
193   (LOAD&PUSH 27)
195   (JSR L0)
198   (JMP L218)
200   L200
200   (GETVALUE&PUSH 3)                   ; NAME
202   (LOAD&PUSH 28)
204   (GETVALUE&PUSH 0)                   ; N
206   (GETVALUE&PUSH 1)                   ; K
208   (CALLS2&PUSH 150)                   ; 1+
210   (LOAD&PUSH 19)
211   (LOAD&PUSH 28)
213   (JSR&PUSH L0)
216   (CALL2 17)                          ; TMSTORE
218   L218
218   (PUSH)
219   (T&PUSH)
220   (CALL&PUSH 3 18)                    ; RATTIMES
223   (FUNCALL 2)
225   (STORE 0)
226   (GETVALUE 19)                       ; $WISE
228   (JMPIFNOT L252)
230   (JMP L236)
232   L232
232   (GETVALUE 19)                       ; $WISE
234   (JMPIFNOT L252)
236   L236
236   (GETVALUE&PUSH 7)                   ; J
238   (GETVALUE&PUSH 2)                   ; L
240   (GETVALUE&PUSH 1)                   ; K
242   (CALL 3 16)                         ; TMNOMOREUSE
245   (JMPIFNOT L252)
247   (LOAD&PUSH 12)
248   (GETVALUE&PUSH 1)                   ; K
250   (CALL2 20)                          ; TMKILL
252   L252
252   (GETVALUE&PUSH 7)                   ; J
254   (CALLS2 150)                        ; 1+
256   (SETVALUE 7)                        ; J
258   (JMP L86)
261   L261
261   (LOAD 0)
262   (STORE 8)
264   (SKIP 1)
266   (UNBIND1)
267   L267
267   (LOAD 4)
268   (SKIP 1)
270   (UNBIND1)
271   (SKIP 1)
273   (UNBIND1)
274   (SKIP 1)
276   (UNBIND 2)
278   (SKIP&RET 6)


Disassembly of function #:|(DEFUN EXTRACT (INDEX J) ...)-12|
(CONST 0) = EXTRACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXTRACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXTRACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXTRACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXTRACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXTRACT
8     (SKIP&RET 1)


Disassembly of function EXTRACT
(CONST 0) = J
(CONST 1) = IND
(CONST 2) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (J IND)
writes special variable : (IND)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; J
3     (LOAD 5)
4     (BIND 1)                            ; IND
6     (CONST&PUSH 2)                      ; 1
7     (NIL&PUSH)
8     (GETVALUE 1)                        ; IND
10    (JMPIFNOT L40)
12    L12
12    (LOAD&PUSH 1)
13    (GETVALUE&PUSH 0)                   ; J
15    (CALLSR&JMPIF 1 45 L47)             ; =
19    (LOAD&PUSH 0)
20    (GETVALUE 1)                        ; IND
22    (CAR&PUSH)
23    (LIST&PUSH 1)
25    (CALLSR&STORE 2 35 0)               ; NCONC
29    (GETVALUE 1)                        ; IND
31    (CDR)
32    (SETVALUE 1)                        ; IND
34    (LOAD&INC&STORE 1)
36    (GETVALUE 1)                        ; IND
38    (JMPIF L12)
40    L40
40    (NIL)
41    (SKIP 2)
43    (UNBIND1)
44    L44
44    (UNBIND1)
45    (SKIP&RET 3)
47    L47
47    (GETVALUE 1)                        ; IND
49    (CAR&PUSH)
50    (LOAD&PUSH 1)
51    (GETVALUE 1)                        ; IND
53    (CDR&PUSH)
54    (CALLSR&PUSH 2 35)                  ; NCONC
57    (LIST 2)
59    (SKIP 2)
61    (UNBIND1)
62    (JMP L44)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VLIST VARLIST ...))-13|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TMRATCONV (BBB N M) ...)-14|
(CONST 0) = TMRATCONV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMRATCONV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMRATCONV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMRATCONV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMRATCONV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMRATCONV
8     (SKIP&RET 1)


Disassembly of function TMRATCONV
(CONST 0) = N
(CONST 1) = M
(CONST 2) = CCC
(CONST 3) = SET
(CONST 4) = 1
(CONST 5) = K
(CONST 6) = J
(CONST 7) = *A2*
(CONST 8) = MAREF1
(CONST 9) = NEWVAR1
(CONST 10) = (MTIMES)
(CONST 11) = VLIST
(CONST 12) = NEWVAR
(CONST 13) = RATREP*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VLIST N M CCC J K *A2*)
writes special variables : (K J)
94 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (NIL)
7     (BIND 2)                            ; CCC
9     (CONST&PUSH 2)                      ; CCC
10    (LOAD&PUSH 13)
11    (CALL2 3)                           ; SET
13    (CONST 4)                           ; 1
14    (BIND 5)                            ; K
16    (JMP L71)
18    L18
18    (CONST 4)                           ; 1
19    (BIND 6)                            ; J
21    (JMP L56)
23    L23
23    (GETVALUE&PUSH 7)                   ; *A2*
25    (GETVALUE&PUSH 5)                   ; K
27    (GETVALUE&PUSH 6)                   ; J
29    (GETVALUE&PUSH 2)                   ; CCC
31    (GETVALUE&PUSH 5)                   ; K
33    (GETVALUE&PUSH 6)                   ; J
35    (CALL&PUSH 3 8)                     ; MAREF1
38    (LOAD&PUSH 3)
39    (LOAD&PUSH 3)
40    (LOAD&PUSH 3)
41    (LOAD&PUSH 3)
42    (CALLSR 2 2)                        ; SYSTEM::STORE
45    (SKIP 3)
47    (STORE 0)
48    (CALL1 9)                           ; NEWVAR1
50    (GETVALUE&PUSH 6)                   ; J
52    (CALLS2 150)                        ; 1+
54    (SETVALUE 6)                        ; J
56    L56
56    (GETVALUE&PUSH 6)                   ; J
58    (GETVALUE&PUSH 1)                   ; M
60    (CALLSR&JMPIFNOT 1 48 L23)          ; >
64    (UNBIND1)
65    (GETVALUE&PUSH 5)                   ; K
67    (CALLS2 150)                        ; 1+
69    (SETVALUE 5)                        ; K
71    L71
71    (GETVALUE&PUSH 5)                   ; K
73    (GETVALUE&PUSH 0)                   ; N
75    (CALLSR&JMPIFNOT 1 48 L18)          ; >
79    (UNBIND1)
80    (CONST&PUSH 10)                     ; (MTIMES)
81    (GETVALUE 11)                       ; VLIST
83    (CONS&PUSH)
84    (CALL1 12)                          ; NEWVAR
86    (CONST 4)                           ; 1
87    (BIND 5)                            ; K
89    (JMP L144)
91    L91
91    (CONST 4)                           ; 1
92    (BIND 6)                            ; J
94    (JMP L129)
96    L96
96    (GETVALUE&PUSH 7)                   ; *A2*
98    (GETVALUE&PUSH 5)                   ; K
100   (GETVALUE&PUSH 6)                   ; J
102   (GETVALUE&PUSH 7)                   ; *A2*
104   (GETVALUE&PUSH 5)                   ; K
106   (GETVALUE&PUSH 6)                   ; J
108   (CALLSR&PUSH 2 1)                   ; AREF
111   (CALL1 13)                          ; RATREP*
113   (CDR&PUSH)
114   (LOAD&PUSH 3)
115   (LOAD&PUSH 3)
116   (LOAD&PUSH 3)
117   (LOAD&PUSH 3)
118   (CALLSR 2 2)                        ; SYSTEM::STORE
121   (SKIP 4)
123   (GETVALUE&PUSH 6)                   ; J
125   (CALLS2 150)                        ; 1+
127   (SETVALUE 6)                        ; J
129   L129
129   (GETVALUE&PUSH 6)                   ; J
131   (GETVALUE&PUSH 1)                   ; M
133   (CALLSR&JMPIFNOT 1 48 L96)          ; >
137   (UNBIND1)
138   (GETVALUE&PUSH 5)                   ; K
140   (CALLS2 150)                        ; 1+
142   (SETVALUE 5)                        ; K
144   L144
144   (GETVALUE&PUSH 5)                   ; K
146   (GETVALUE&PUSH 0)                   ; N
148   (CALLSR&JMPIFNOT 1 48 L91)          ; >
152   (UNBIND1)
153   (NIL)
154   (UNBIND 3)
156   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $TMNEWDET N ...)-15|
(CONST 0) = $TMNEWDET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TMNEWDET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TMNEWDET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TMNEWDET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TMNEWDET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TMNEWDET
8     (SKIP&RET 1)


Disassembly of function $TMNEWDET
(CONST 0) = N
(CONST 1) = *AA*
(CONST 2) = R
(CONST 3) = VLIST
(CONST 4) = 2
(CONST 5) = NARG1
(CONST 6) = "WRONG ARG"
(CONST 7) = MERROR
(CONST 8) = 1
(CONST 9) = $MATRIXP
(CONST 10) = "WRONG ARG"
(CONST 11) = *ARRAY
(CONST 12) = *A2*
(CONST 13) = TMDEFARRAY
(CONST 14) = TMRATCONV
(CONST 15) = MRAT
(CONST 16) = SIMP
(CONST 17) = VARLIST
(CONST 18) = GENVAR
(CONST 19) = TMDET
(CONST 20) = *TMREARRAY
(CONST 21) = TMREARRAY
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (R GENVAR VARLIST *AA* N)
writes special variables : (N R *A2* *AA*)
79 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (NIL)
6     (BIND 1)                            ; *AA*
8     (NIL)
9     (BIND 2)                            ; R
11    (NIL)
12    (BIND 3)                            ; VLIST
14    (GETVALUE&PUSH 0)                   ; N
16    (CONST&PUSH 4)                      ; 2
17    (CALLSR&JMPIF 1 45 L100)            ; =
22    (GETVALUE&PUSH 0)                   ; N
24    (CONST&PUSH 8)                      ; 1
25    (CALLSR&JMPIFNOT 1 45 L40)          ; =
29    (CONST&PUSH 8)                      ; 1
30    (LOAD&PUSH 14)
31    (CALL2 5)                           ; NARG1
33    (SETVALUE 1)                        ; *AA*
35    (PUSH)
36    (CALL1&JMPIF 9 L122)                ; $MATRIXP
40    L40
40    (CONST&PUSH 10)                     ; "WRONG ARG"
41    (CALL1 7)                           ; MERROR
43    L43
43    (NIL&PUSH)
44    (T&PUSH)
45    (GETVALUE&PUSH 0)                   ; N
47    (CALLS2&PUSH 150)                   ; 1+
49    (GETVALUE&PUSH 0)                   ; N
51    (CALLS2&PUSH 150)                   ; 1+
53    (CALL 4 11)                         ; *ARRAY
56    (SETVALUE 12)                       ; *A2*
58    (GETVALUE&PUSH 0)                   ; N
60    (CALL1 13)                          ; TMDEFARRAY
62    (GETVALUE&PUSH 1)                   ; *AA*
64    (GETVALUE&PUSH 0)                   ; N
66    (GETVALUE&PUSH 0)                   ; N
68    (CALL 3 14)                         ; TMRATCONV
71    (CONST&PUSH 15)                     ; MRAT
72    (CONST&PUSH 16)                     ; SIMP
73    (GETVALUE&PUSH 17)                  ; VARLIST
75    (GETVALUE&PUSH 18)                  ; GENVAR
77    (LIST&PUSH 4)
79    (CONST&PUSH 12)                     ; *A2*
80    (GETVALUE&PUSH 0)                   ; N
82    (CALL2 19)                          ; TMDET
84    (CONS)
85    (SETVALUE 2)                        ; R
87    (CONST&PUSH 12)                     ; *A2*
88    (CALL1 20)                          ; *TMREARRAY
90    (GETVALUE&PUSH 0)                   ; N
92    (CALL1 21)                          ; TMREARRAY
94    (GETVALUE 2)                        ; R
96    (UNBIND 4)
98    (SKIP&RET 2)
100   L100
100   (CONST&PUSH 4)                      ; 2
101   (LOAD&PUSH 14)
102   (CALL2 5)                           ; NARG1
104   (SETVALUE 0)                        ; N
106   (PUSH)
107   (CALLS2&JMPIF 12 L113)              ; INTEGERP
110   (CONST&PUSH 6)                      ; "WRONG ARG"
111   (CALL1 7)                           ; MERROR
113   L113
113   (CONST&PUSH 8)                      ; 1
114   (LOAD&PUSH 14)
115   (CALL2 5)                           ; NARG1
117   (SETVALUE 1)                        ; *AA*
119   (JMP L43)
122   L122
122   (CONST&PUSH 8)                      ; 1
123   (LOAD&PUSH 14)
124   (CALL2 5)                           ; NARG1
126   (CDR&PUSH)
127   (CALLS2 71)                         ; LENGTH
129   (SETVALUE 0)                        ; N
131   (JMP L43)


Disassembly of function #:|(DEFMFUN $TMLINSOLVE NARG ...)-16|
(CONST 0) = $TMLINSOLVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TMLINSOLVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TMLINSOLVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TMLINSOLVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TMLINSOLVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TMLINSOLVE
8     (SKIP&RET 1)


Disassembly of function $TMLINSOLVE
(CONST 0) = LISTIFY1
(CONST 1) = TMLINSOLVE
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (LOAD&PUSH 3)
5     (CALL2&PUSH 0)                      ; LISTIFY1
7     (CALL1 1)                           ; TMLINSOLVE
9     (SKIP&RET 3)


Disassembly of function #:|(DEFUN TMLINSOLVE (ARGLIST) ...)-17|
(CONST 0) = TMLINSOLVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMLINSOLVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMLINSOLVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMLINSOLVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMLINSOLVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMLINSOLVE
8     (SKIP&RET 1)


Disassembly of function TMLINSOLVE
(CONST 0) = EQUATIONS
(CONST 1) = VARS
(CONST 2) = *AA*
(CONST 3) = TMERGE
(CONST 4) = NX
(CONST 5) = N
(CONST 6) = TOO-FEW-OR-MUCH-EQUATIONS
(CONST 7) = ($MATRIX SIMP)
(CONST 8) = E
(CONST 9) = (MPLUS)
(CONST 10) = $LHS
(CONST 11) = (MMINUS)
(CONST 12) = $RHS
(CONST 13) = MEVAL
(CONST 14) = EXP
(CONST 15) = ((MLIST))
(CONST 16) = V
(CONST 17) = R
(CONST 18) = $BOTHCOEF
(CONST 19) = (MMINUS)
(CONST 20) = 1
(CONST 21) = $TMLIN
(CONST 22) = NAME
(CONST 23) = $LINECHAR
(CONST 24) = MAKELABEL
(CONST 25) = $LINENUM
(CONST 26) = (MEQUAL)
(CONST 27) = (MTIMES SIMP)
(CONST 28) = (MEXPT SIMP)
(CONST 29) = -1
(CONST 30) = SET
(CONST 31) = $DISPFLAG
(CONST 32) = (MLABLE)
(CONST 33) = DISPLA
(CONST 34) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($DISPFLAG $LINENUM $LINECHAR NX N R V EXP NAME E EQUATIONS VARS)
writes special variables : ($LINENUM NAME *AA* R EXP N NX VARS EQUATIONS)
226 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; EQUATIONS
3     (NIL)
4     (BIND 1)                            ; VARS
6     (PUSH-NIL 2)
8     (NIL)
9     (BIND 2)                            ; *AA*
11    (LOAD 12)
12    (CAR)
13    (CDR)
14    (SETVALUE 0)                        ; EQUATIONS
16    (LOAD 12)
17    (CDR)
18    (CAR)
19    (CDR)
20    (SETVALUE 1)                        ; VARS
22    (LOAD 12)
23    (CDR)
24    (CDR)
25    (JMPIFNOT L69)
27    (LOAD 12)
28    (CDR)
29    (CDR)
30    (CAR)
31    (CDR)
32    L32
32    (STORE 4)
33    (NIL&STORE 12)
35    (GETVALUE&PUSH 1)                   ; VARS
37    (LOAD&PUSH 5)
38    (CALL2 3)                           ; TMERGE
40    (SETVALUE 1)                        ; VARS
42    (LOAD&PUSH 4)
43    (CALLS2 71)                         ; LENGTH
45    (SETVALUE 4)                        ; NX
47    (GETVALUE&PUSH 1)                   ; VARS
49    (CALLS2 71)                         ; LENGTH
51    (SETVALUE 5)                        ; N
53    (PUSH)
54    (GETVALUE&PUSH 0)                   ; EQUATIONS
56    (CALLS2&PUSH 71)                    ; LENGTH
58    (CALLSR&JMPIFNOT 1 45 L73)          ; =
62    (CONST&PUSH 7)                      ; ($MATRIX SIMP)
63    (PUSH-NIL 2)
65    (GETVALUE&PUSH 0)                   ; EQUATIONS
67    (JMP L110)
69    L69
69    (GETVALUE 1)                        ; VARS
71    (JMP L32)
73    L73
73    (CONST&PUSH 6)                      ; TOO-FEW-OR-MUCH-EQUATIONS
74    (PUSH-UNBOUND 1)
76    (CALLS1 130)                        ; PRINT
78    (JMP L345)
81    L81
81    (LOAD&CAR&PUSH 0)
83    (LOAD 0)
84    (BIND 8)                            ; E
86    (CONST&PUSH 9)                      ; (MPLUS)
87    (GETVALUE&PUSH 8)                   ; E
89    (CALL1&PUSH 10)                     ; $LHS
91    (CONST&PUSH 11)                     ; (MMINUS)
92    (GETVALUE&PUSH 8)                   ; E
94    (CALL1&PUSH 12)                     ; $RHS
96    (LIST&PUSH 2)
98    (LIST&PUSH 3)
100   (CALL1 13)                          ; MEVAL
102   (UNBIND1)
103   (PUSH)
104   (LOAD&CONS&STORE 2)
106   (SKIP 1)
108   (LOAD&CDR&STORE 0)
110   L110
110   (LOAD&PUSH 0)
111   (CALLS1&JMPIFNOT 146 L81)           ; ENDP
114   (SKIP 1)
116   (LOAD&PUSH 0)
117   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
120   (JMP L212)
123   L123
123   (LOAD&CAR&PUSH 0)
125   (LOAD 0)
126   (BIND 14)                           ; EXP
128   (CONST&PUSH 15)                     ; ((MLIST))
129   (NIL&PUSH)
130   (GETVALUE&PUSH 1)                   ; VARS
132   (JMP L184)
134   L134
134   (GETVALUE 22)                       ; NAME
136   (STORE 4)
137   (LOAD 12)
138   (CAR)
139   (CDR)
140   (CAR)
141   (JMP L292)
144   L144
144   (LOAD&CAR&PUSH 0)
146   (LOAD 0)
147   (BIND 16)                           ; V
149   (NIL)
150   (BIND 17)                           ; R
152   (GETVALUE&PUSH 14)                  ; EXP
154   (GETVALUE&PUSH 16)                  ; V
156   (CALL2 18)                          ; $BOTHCOEF
158   (SETVALUE 14)                       ; EXP
160   (CDR)
161   (CAR)
162   (SETVALUE 17)                       ; R
164   (GETVALUE 14)                       ; EXP
166   (CDR)
167   (CDR)
168   (CAR&PUSH)
169   (CALL1 13)                          ; MEVAL
171   (SETVALUE 14)                       ; EXP
173   (GETVALUE 17)                       ; R
175   (UNBIND 2)
177   (PUSH)
178   (LOAD&CONS&STORE 2)
180   (SKIP 1)
182   (LOAD&CDR&STORE 0)
184   L184
184   (LOAD&PUSH 0)
185   (CALLS1&JMPIFNOT 146 L144)          ; ENDP
188   (SKIP 1)
190   (LOAD&PUSH 0)
191   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
194   (CONST&PUSH 19)                     ; (MMINUS)
195   (GETVALUE&PUSH 14)                  ; EXP
197   (LIST&PUSH 2)
199   (LIST&PUSH 1)
201   (CALLSR 3 34)                       ; APPEND
204   (UNBIND1)
205   (PUSH)
206   (LOAD&CONS&STORE 2)
208   (SKIP 1)
210   (LOAD&CDR&STORE 0)
212   L212
212   (LOAD&PUSH 0)
213   (CALLS1&JMPIFNOT 146 L123)          ; ENDP
217   (SKIP 1)
219   (LOAD&PUSH 0)
220   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
222   (SKIP 1)
224   (CONS)
225   (SETVALUE 2)                        ; *AA*
227   (PUSH)
228   (GETVALUE&PUSH 5)                   ; N
230   (CONST&PUSH 20)                     ; 1
231   (GETVALUE&PUSH 4)                   ; NX
233   (CALL 4 21)                         ; $TMLIN
236   (CDR)
237   (STORE 3)
238   (NIL&PUSH)
239   (LOAD 5)
240   (CONS)
241   (BIND 1)                            ; VARS
243   (PUSH-NIL 2)
245   (NIL)
246   (BIND 22)                           ; NAME
248   (GETVALUE 1)                        ; VARS
250   (JMPIFNOT L334)
253   L253
253   (GETVALUE&PUSH 23)                  ; $LINECHAR
255   (CALL1 24)                          ; MAKELABEL
257   (SETVALUE 22)                       ; NAME
259   (GETVALUE&PUSH 25)                  ; $LINENUM
261   (CALLS2 150)                        ; 1+
263   (SETVALUE 25)                       ; $LINENUM
265   (GETVALUE&PUSH 22)                  ; NAME
267   (GETVALUE 1)                        ; VARS
269   (CAR)
270   (JMPIFNOT L134)
273   (CONST&PUSH 26)                     ; (MEQUAL)
274   (GETVALUE 1)                        ; VARS
276   (CAR&PUSH)
277   (CONST&PUSH 27)                     ; (MTIMES SIMP)
278   (LOAD 15)
280   (CAR)
281   (CDR)
282   (CAR&PUSH)
283   (CONST&PUSH 28)                     ; (MEXPT SIMP)
284   (LOAD&PUSH 9)
285   (CONST&PUSH 29)                     ; -1
286   (LIST&PUSH 3)
288   (LIST&PUSH 3)
290   (LIST 3)
292   L292
292   (PUSH)
293   (CALL2 30)                          ; SET
295   (GETVALUE&PUSH 22)                  ; NAME
297   (LOAD&CONS&STORE 4)
299   (LOAD&CDR&STORE 11)
301   (GETVALUE 31)                       ; $DISPFLAG
303   (JMPIFNOT L324)
305   (CONST&PUSH 32)                     ; (MLABLE)
307   (NIL)
308   (CONS&PUSH)
309   (GETVALUE&PUSH 22)                  ; NAME
311   (NIL)
312   (CONS&PUSH)
313   (GETVALUE&PUSH 22)                  ; NAME
315   (CALLS1&PUSH 91)                    ; EVAL
317   (NIL)
318   (CONS&PUSH)
319   (CALLSR&PUSH 3 35)                  ; NCONC
322   (CALL1 33)                          ; DISPLA
324   L324
324   (GETVALUE 1)                        ; VARS
326   (CDR)
327   (SETVALUE 1)                        ; VARS
329   (GETVALUE 1)                        ; VARS
331   (JMPIF L253)
334   L334
334   (CONST&PUSH 34)                     ; (MLIST)
336   (LOAD&PUSH 5)
337   (CALLS2 72)                         ; REVERSE
339   (CDR)
340   (CONS)
341   (UNBIND1)
342   (SKIP 2)
344   (UNBIND1)
345   L345
345   (UNBIND1)
346   (SKIP 2)
348   (UNBIND 2)
350   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMERGE (VARS OUTVARS) ...)-18|
(CONST 0) = TMERGE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMERGE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMERGE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMERGE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMERGE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMERGE
8     (SKIP&RET 1)


Disassembly of function TMERGE
(CONST 0) = VARS
(CONST 1) = L
(CONST 2) = V
(CONST 3) = ZL-MEMBER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L V VARS)
writes special variable : (L)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VARS
3     (LOAD&PUSH 4)
4     (NIL)
5     (BIND 1)                            ; L
7     (GETVALUE&PUSH 0)                   ; VARS
9     (LOAD&PUSH 0)
10    (JMP L35)
12    L12
12    (LOAD&CAR&PUSH 0)
14    (LOAD 0)
15    (BIND 2)                            ; V
17    (GETVALUE&PUSH 2)                   ; V
19    (LOAD&PUSH 15)
20    (CALL2&JMPIF 3 L30)                 ; ZL-MEMBER
23    (GETVALUE&PUSH 2)                   ; V
25    (GETVALUE 1)                        ; L
27    (CONS)
28    (SETVALUE 1)                        ; L
30    L30
30    (UNBIND1)
31    (SKIP 1)
33    (LOAD&CDR&STORE 0)
35    L35
35    (LOAD&PUSH 0)
36    (CALLS1&JMPIFNOT 146 L12)           ; ENDP
39    (SKIP 2)
41    (GETVALUE&PUSH 1)                   ; L
43    (CALLS2 72)                         ; REVERSE
45    (UNBIND1)
46    (PUSH)
47    (CALLSR 2 34)                       ; APPEND
50    (UNBIND1)
51    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $TMLIN (*AA* N M ...) ...)-19|
(CONST 0) = $TMLIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TMLIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TMLIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TMLIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TMLIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TMLIN
8     (SKIP&RET 1)


Disassembly of function $TMLIN
(CONST 0) = *AA*
(CONST 1) = N
(CONST 2) = M
(CONST 3) = NX
(CONST 4) = R
(CONST 5) = VLIST
(CONST 6) = *ARRAY
(CONST 7) = *A2*
(CONST 8) = #<COMPILED-CLOSURE $TMLIN-1>
(CONST 9) = *STANDARD-OUTPUT*
(CONST 10) = TMRATCONV
(CONST 11) = (MLIST)
(CONST 12) = TMLIN
(CONST 13) = RES
(CONST 14) = (MLIST)
(CONST 15) = MRAT
(CONST 16) = SIMP
(CONST 17) = VARLIST
(CONST 18) = GENVAR
(CONST 19) = *TMREARRAY
(CONST 20) = #<COMPILED-CLOSURE $TMLIN-2>
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R GENVAR VARLIST RES NX *AA* *A2* *STANDARD-OUTPUT* M N)
writes special variables : (R *A2*)
93 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; *AA*
3     (LOAD 6)
4     (BIND 1)                            ; N
6     (LOAD 8)
7     (BIND 2)                            ; M
9     (LOAD 10)
10    (BIND 3)                            ; NX
12    (NIL)
13    (BIND 4)                            ; R
15    (NIL)
16    (BIND 5)                            ; VLIST
18    (NIL&PUSH)
19    (T&PUSH)
20    (GETVALUE&PUSH 1)                   ; N
22    (CALLS2&PUSH 150)                   ; 1+
24    (GETVALUE&PUSH 2)                   ; M
26    (GETVALUE&PUSH 1)                   ; N
28    (CALLSR&PUSH 2 53)                  ; +
31    (CALLS2&PUSH 150)                   ; 1+
33    (CALL 4 6)                          ; *ARRAY
36    (SETVALUE 7)                        ; *A2*
38    (CONST&PUSH 8)                      ; #<COMPILED-CLOSURE $TMLIN-1>
39    (GETVALUE&PUSH 9)                   ; *STANDARD-OUTPUT*
41    (CONST&PUSH 7)                      ; *A2*
42    (GETVALUE&PUSH 7)                   ; *A2*
44    (CALLSR 3 21)                       ; FUNCALL
47    (GETVALUE&PUSH 0)                   ; *AA*
49    (GETVALUE&PUSH 1)                   ; N
51    (GETVALUE&PUSH 2)                   ; M
53    (GETVALUE&PUSH 1)                   ; N
55    (CALLSR&PUSH 2 53)                  ; +
58    (CALL 3 10)                         ; TMRATCONV
61    (CONST&PUSH 11)                     ; (MLIST)
62    (NIL&PUSH)
63    (CONST&PUSH 7)                      ; *A2*
64    (GETVALUE&PUSH 1)                   ; N
66    (GETVALUE&PUSH 2)                   ; M
68    (GETVALUE&PUSH 3)                   ; NX
70    (CALL&PUSH 4 12)                    ; TMLIN
73    (JMP L124)
75    L75
75    (LOAD&CAR&PUSH 0)
77    (LOAD 0)
78    (BIND 13)                           ; RES
80    (CONST&PUSH 14)                     ; (MLIST)
81    (NIL&PUSH)
82    (GETVALUE&PUSH 13)                  ; RES
84    (JMP L104)
86    L86
86    (LOAD&CAR&PUSH 0)
88    (CONST&PUSH 15)                     ; MRAT
89    (CONST&PUSH 16)                     ; SIMP
90    (GETVALUE&PUSH 17)                  ; VARLIST
92    (GETVALUE&PUSH 18)                  ; GENVAR
94    (LIST&PUSH 4)
96    (LOAD 1)
97    (CONS&PUSH)
98    (LOAD&CONS&STORE 2)
100   (SKIP 1)
102   (LOAD&CDR&STORE 0)
104   L104
104   (LOAD&PUSH 0)
105   (CALLS1&JMPIFNOT 146 L86)           ; ENDP
108   (SKIP 1)
110   (LOAD&PUSH 0)
111   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
113   (SKIP 1)
115   (CONS)
116   (UNBIND1)
117   (PUSH)
118   (LOAD&CONS&STORE 2)
120   (SKIP 1)
122   (LOAD&CDR&STORE 0)
124   L124
124   (LOAD&PUSH 0)
125   (CALLS1&JMPIFNOT 146 L75)           ; ENDP
128   (SKIP 1)
130   (LOAD&PUSH 0)
131   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
133   (SKIP 1)
135   (CONS)
136   (SETVALUE 4)                        ; R
138   (CONST&PUSH 7)                      ; *A2*
139   (CALL1 19)                          ; *TMREARRAY
141   (CONST&PUSH 20)                     ; #<COMPILED-CLOSURE $TMLIN-2>
142   (GETVALUE&PUSH 9)                   ; *STANDARD-OUTPUT*
144   (CONST&PUSH 7)                      ; *A2*
145   (GETVALUE&PUSH 7)                   ; *A2*
147   (CALLSR 3 21)                       ; FUNCALL
150   (GETVALUE 4)                        ; R
152   (UNBIND 6)
154   (SKIP&RET 5)


Disassembly of function $TMLIN-1
(CONST 0) = 
"
The value of "
(CONST 1) = " is "
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
The value of "
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 5)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; " is "
11    (LOAD&PUSH 5)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 5)
18    (CALLS1 132)                        ; PRINC
20    (LOAD 1)
21    (SKIP&RET 5)


Disassembly of function $TMLIN-2
(CONST 0) = 
"
The value of "
(CONST 1) = " is "
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
The value of "
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 5)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; " is "
11    (LOAD&PUSH 5)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 5)
18    (CALLS1 132)                        ; PRINC
20    (LOAD 1)
21    (SKIP&RET 5)


Disassembly of function #:|(DEFUN TMKILL (*INDX* K) ...)-20|
(CONST 0) = TMKILL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMKILL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMKILL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMKILL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMKILL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMKILL
8     (SKIP&RET 1)


Disassembly of function TMKILL
(CONST 0) = *INDX*
(CONST 1) = K
(CONST 2) = NAME
(CONST 3) = J
(CONST 4) = L
(CONST 5) = TMACCESS
(CONST 6) = TMEVAL
(CONST 7) = TMSTORE
(CONST 8) = IND
(CONST 9) = 1
(CONST 10) = EXTRACT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NAME K J L IND *INDX*)
writes special variables : (IND J L NAME)
63 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; *INDX*
3     (LOAD 4)
4     (BIND 1)                            ; K
6     (NIL)
7     (BIND 2)                            ; NAME
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; J
13    (NIL)
14    (BIND 4)                            ; L
16    (GETVALUE 0)                        ; *INDX*
18    (JMPIFNOT L85)
21    (GETVALUE&PUSH 0)                   ; *INDX*
23    (CALL1 5)                           ; TMACCESS
25    (SETVALUE 2)                        ; NAME
27    (PUSH)
28    (CALL1&JMPIF 6 L94)                 ; TMEVAL
31    (GETVALUE 0)                        ; *INDX*
33    (BIND 8)                            ; IND
35    (CONST&PUSH 9)                      ; 1
36    (GETVALUE 8)                        ; IND
38    (JMPIFNOT L82)
40    L40
40    (GETVALUE&PUSH 0)                   ; *INDX*
42    (LOAD&PUSH 1)
43    (CALL2 10)                          ; EXTRACT
45    (SETVALUE 4)                        ; L
47    (CAR)
48    (SETVALUE 3)                        ; J
50    (GETVALUE 4)                        ; L
52    (CDR)
53    (CAR)
54    (STORE 10)
56    (GETVALUE&PUSH 3)                   ; J
58    (LOAD&PUSH 1)
59    (CALLSR&JMPIFNOT 1 45 L71)          ; =
63    (LOAD&PUSH 10)
64    (GETVALUE&PUSH 1)                   ; K
66    (CALLS2&PUSH 150)                   ; 1+
68    (JSR L0)
71    L71
71    (GETVALUE 8)                        ; IND
73    (CDR)
74    (SETVALUE 8)                        ; IND
76    (LOAD&INC&STORE 0)
78    (GETVALUE 8)                        ; IND
80    (JMPIF L40)
82    L82
82    (SKIP 1)
84    (UNBIND1)
85    L85
85    (NIL)
86    (UNBIND 2)
88    (SKIP 1)
90    (UNBIND 3)
92    (SKIP&RET 3)
94    L94
94    (GETVALUE&PUSH 2)                   ; NAME
96    (NIL&PUSH)
97    (CALL2 7)                           ; TMSTORE
99    (JMP L85)


Disassembly of function #:|(DEFUN TMNOMOREUSE (J L K) ...)-21|
(CONST 0) = TMNOMOREUSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMNOMOREUSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMNOMOREUSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMNOMOREUSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMNOMOREUSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMNOMOREUSE
8     (SKIP&RET 1)


Disassembly of function TMNOMOREUSE
(CONST 0) = J
(CONST 1) = L
(CONST 2) = K
(CONST 3) = NX
(CONST 4) = IX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (IX NX K L J)
24 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; J
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; K
9     (GETVALUE&PUSH 0)                   ; J
11    (GETVALUE&PUSH 1)                   ; L
13    (CALLSR&JMPIFNOT 1 45 L35)          ; =
17    (GETVALUE&PUSH 2)                   ; K
19    (GETVALUE&PUSH 3)                   ; NX
21    (CALLSR&JMPIF 1 48 L40)             ; >
25    (GETVALUE&PUSH 2)                   ; K
27    (GETVALUE&PUSH 4)                   ; IX
29    (CALLS2&PUSH 150)                   ; 1+
31    (CALLSR&JMPIF 1 47 L40)             ; <
35    L35
35    (NIL)
36    L36
36    (UNBIND 3)
38    (SKIP&RET 4)
40    L40
40    (T)
41    (JMP L36)


Disassembly of function #:|(DEFUN TMDEFARRAY (N) ...)-22|
(CONST 0) = TMDEFARRAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMDEFARRAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMDEFARRAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMDEFARRAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMDEFARRAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMDEFARRAY
8     (SKIP&RET 1)


Disassembly of function TMDEFARRAY
(CONST 0) = N
(CONST 1) = NAME
(CONST 2) = *TMARRAYS*
(CONST 3) = GET-ARRAY-POINTER
(CONST 4) = ARRAYDIMS
(CONST 5) = 1
(CONST 6) = TMREARRAY
(CONST 7) = *ARRAY
(CONST 8) = "M"
(CONST 9) = 10
(CONST 10) = TMCOMBI
(CONST 11) = SET
(CONST 12) = SIMP
(CONST 13) = ARRAY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NAME N *TMARRAYS*)
writes special variables : (NAME *TMARRAYS*)
77 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (NIL)
4     (BIND 1)                            ; NAME
6     (GETVALUE&PUSH 2)                   ; *TMARRAYS*
8     (CALL1 3)                           ; GET-ARRAY-POINTER
10    (SETVALUE 2)                        ; *TMARRAYS*
12    (JMPIFNOT L27)
14    (PUSH)
15    (CALL1 4)                           ; ARRAYDIMS
17    (CDR)
18    (CAR)
19    (JMPIF L22)
21    (CONST 5)                           ; 1
22    L22
22    (PUSH)
23    (CALLS2&PUSH 151)                   ; 1-
25    (CALL1 6)                           ; TMREARRAY
27    L27
27    (NIL&PUSH)
28    (T&PUSH)
29    (GETVALUE&PUSH 0)                   ; N
31    (CALLS2&PUSH 150)                   ; 1+
33    (CALL 3 7)                          ; *ARRAY
36    (SETVALUE 2)                        ; *TMARRAYS*
38    (CONST&PUSH 5)                      ; 1
39    (JMP L109)
42    L42
42    (CONST&PUSH 8)                      ; "M"
43    (CALLS1 203)                        ; MAKE-SYMBOL
45    (JMP L81)
47    L47
47    (GETVALUE&PUSH 1)                   ; NAME
49    (NIL&PUSH)
50    (T&PUSH)
51    (GETVALUE&PUSH 0)                   ; N
53    (LOAD&PUSH 4)
54    (CALL2&PUSH 10)                     ; TMCOMBI
56    (CALLS2&PUSH 150)                   ; 1+
58    (CALL&PUSH 3 7)                     ; *ARRAY
61    (CALL2 11)                          ; SET
63    (GETVALUE&PUSH 2)                   ; *TMARRAYS*
65    (GETVALUE&PUSH 1)                   ; NAME
67    (CALL1 3)                           ; GET-ARRAY-POINTER
69    (JMP L98)
71    L71
71    (LOAD&PUSH 0)
72    (CONST&PUSH 5)                      ; 1
73    (CALLSR&JMPIF 1 45 L42)             ; =
77    (PUSH-UNBOUND 1)
79    (CALLS2 143)                        ; GENSYM
81    L81
81    (SETVALUE 1)                        ; NAME
83    (GETVALUE&PUSH 0)                   ; N
85    (CONST&PUSH 9)                      ; 10
86    (CALLSR&JMPIF 1 47 L47)             ; <
90    (GETVALUE&PUSH 2)                   ; *TMARRAYS*
92    (GETVALUE&PUSH 1)                   ; NAME
94    (CONST&PUSH 12)                     ; SIMP
95    (CONST&PUSH 13)                     ; ARRAY
96    (LIST 3)
98    L98
98    (PUSH)
99    (LOAD&PUSH 1)
100   (LOAD&PUSH 3)
101   (LOAD&PUSH 2)
102   (CALLSR 1 2)                        ; SYSTEM::STORE
105   (SKIP 2)
107   (LOAD&INC&STORE 0)
109   L109
109   (LOAD&PUSH 0)
110   (GETVALUE&PUSH 0)                   ; N
112   (CALLSR&JMPIFNOT 1 48 L71)          ; >
116   (SKIP 1)
118   (NIL)
119   (UNBIND 2)
121   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMREARRAY (N) ...)-23|
(CONST 0) = TMREARRAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMREARRAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMREARRAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMREARRAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMREARRAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMREARRAY
8     (SKIP&RET 1)


Disassembly of function TMREARRAY
(CONST 0) = N
(CONST 1) = 1
(CONST 2) = *TMARRAYS*
(CONST 3) = *TMREARRAY
(CONST 4) = TM$KILL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N *TMARRAYS*)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (CONST&PUSH 1)                      ; 1
4     (JMP L35)
6     L6
6     (GETVALUE&PUSH 2)                   ; *TMARRAYS*
8     (LOAD&PUSH 1)
9     (CALLSR&PUSH 1 1)                   ; AREF
12    (CALL1 3)                           ; *TMREARRAY
14    (JMP L33)
16    L16
16    (GETVALUE&PUSH 2)                   ; *TMARRAYS*
18    (LOAD&PUSH 1)
19    (CALLSR 1 1)                        ; AREF
22    (JMPIFATOM L6)
24    (GETVALUE&PUSH 2)                   ; *TMARRAYS*
26    (LOAD&PUSH 1)
27    (CALLSR 1 1)                        ; AREF
30    (CAR&PUSH)
31    (CALL1 4)                           ; TM$KILL
33    L33
33    (LOAD&INC&STORE 0)
35    L35
35    (LOAD&PUSH 0)
36    (GETVALUE&PUSH 0)                   ; N
38    (CALLSR&JMPIFNOT 1 48 L16)          ; >
42    (SKIP 1)
44    (CONST&PUSH 2)                      ; *TMARRAYS*
45    (CALL1 3)                           ; *TMREARRAY
47    (NIL)
48    (UNBIND1)
49    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMACCESS (INDEX) ...)-24|
(CONST 0) = TMACCESS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMACCESS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMACCESS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMACCESS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMACCESS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMACCESS
8     (SKIP&RET 1)


Disassembly of function TMACCESS
(CONST 0) = L
(CONST 1) = $FOOL
(CONST 2) = N
(CONST 3) = 10
(CONST 4) = AREF
(CONST 5) = *TMARRAYS*
(CONST 6) = 1
(CONST 7) = 0
(CONST 8) = X
(CONST 9) = Y
(CONST 10) = J
(CONST 11) = TMCOMBI
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y J X L *TMARRAYS* N $FOOL)
writes special variables : (X Y J L)
78 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; L
3     (GETVALUE 1)                        ; $FOOL
5     (JMPIF L33)
7     (LOAD&PUSH 4)
8     (CALLS2 71)                         ; LENGTH
10    (SETVALUE 0)                        ; L
12    (GETVALUE&PUSH 2)                   ; N
14    (CONST&PUSH 3)                      ; 10
15    (CALLSR&JMPIF 1 47 L36)             ; <
19    (CONST&PUSH 4)                      ; AREF
20    (GETVALUE&PUSH 5)                   ; *TMARRAYS*
22    (GETVALUE&PUSH 0)                   ; L
24    (CALLSR&PUSH 1 1)                   ; AREF
27    (LOAD 6)
28    (CONS)
29    (CONS)
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (NIL)
34    (JMP L30)
36    L36
36    (CONST&PUSH 4)                      ; AREF
37    (GETVALUE&PUSH 5)                   ; *TMARRAYS*
39    (GETVALUE&PUSH 0)                   ; L
41    (CALLSR&PUSH 1 1)                   ; AREF
44    (CONST&PUSH 6)                      ; 1
45    (CONST 7)                           ; 0
46    (BIND 8)                            ; X
48    (LOAD 10)
49    (BIND 9)                            ; Y
51    (CONST&PUSH 7)                      ; 0
52    (JMP L111)
54    L54
54    (GETVALUE&PUSH 8)                   ; X
56    (CALLS2 150)                        ; 1+
58    (BIND 10)                           ; J
60    (JMP L88)
62    L62
62    (LOAD&PUSH 3)
63    (GETVALUE&PUSH 2)                   ; N
65    (GETVALUE&PUSH 10)                  ; J
67    (CALLSR&PUSH 1 54)                  ; -
70    (GETVALUE&PUSH 0)                   ; L
72    (LOAD&PUSH 13)
73    (CALLSR&PUSH 1 54)                  ; -
76    (CALL2&PUSH 11)                     ; TMCOMBI
78    (CALLSR&STORE 2 53 3)               ; +
82    (GETVALUE&PUSH 10)                  ; J
84    (CALLS2 150)                        ; 1+
86    (SETVALUE 10)                       ; J
88    L88
88    (GETVALUE&PUSH 10)                  ; J
90    (GETVALUE 9)                        ; Y
92    (CAR&PUSH)
93    (CALLSR&JMPIFNOT 1 45 L62)          ; =
97    (UNBIND1)
98    (GETVALUE 9)                        ; Y
100   (CAR&PUSH)
101   (GETVALUE 9)                        ; Y
103   (CDR)
104   (SETVALUE 9)                        ; Y
106   (POP)
107   (SETVALUE 8)                        ; X
109   (LOAD&INC&STORE 7)
111   L111
111   (LOAD&PUSH 7)
112   (GETVALUE&PUSH 0)                   ; L
114   (CALLSR&JMPIFNOT 1 48 L54)          ; >
118   (LOAD&PUSH 0)
119   (CALLS2 150)                        ; 1+
121   (SKIP 1)
123   (UNBIND 2)
125   (STORE 0)
126   (LIST 3)
128   (JMP L30)


Disassembly of function #:|(DEFUN TMCOMBI (N I) ...)-25|
(CONST 0) = TMCOMBI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMCOMBI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMCOMBI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMCOMBI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMCOMBI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMCOMBI
8     (SKIP&RET 1)


Disassembly of function TMCOMBI
(CONST 0) = N
(CONST 1) = TMFACTORIAL
(CONST 2) = 0
(CONST 3) = QUOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
29 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (LOAD&PUSH 5)
6     (CALLSR&PUSH 1 54)                  ; -
9     (LOAD&PUSH 5)
10    (CALLSR&JMPIF 1 48 L34)             ; >
14    (GETVALUE&PUSH 0)                   ; N
16    (LOAD&PUSH 5)
17    (CALL2&PUSH 1)                      ; TMFACTORIAL
19    (GETVALUE&PUSH 0)                   ; N
21    (LOAD&PUSH 6)
22    (CALLSR&PUSH 1 54)                  ; -
25    (CONST 2)                           ; 0
26    L26
26    (PUSH)
27    (CALL2&PUSH 1)                      ; TMFACTORIAL
29    (CALL2 3)                           ; QUOT
31    (UNBIND1)
32    (SKIP&RET 3)
34    L34
34    (GETVALUE&PUSH 0)                   ; N
36    (GETVALUE&PUSH 0)                   ; N
38    (LOAD&PUSH 6)
39    (CALLSR&PUSH 1 54)                  ; -
42    (CALL2&PUSH 1)                      ; TMFACTORIAL
44    (LOAD&PUSH 5)
45    (CONST 2)                           ; 0
46    (JMP L26)


Disassembly of function #:|(DEFUN TMFACTORIAL (I J) ...)-26|
(CONST 0) = TMFACTORIAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMFACTORIAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMFACTORIAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMFACTORIAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMFACTORIAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMFACTORIAL
8     (SKIP&RET 1)


Disassembly of function TMFACTORIAL
(CONST 0) = J
(CONST 1) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (J)
17 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; J
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; J
6     (CALLSR&JMPIF 1 45 L23)             ; =
10    (LOAD&PUSH 5)
11    (LOAD&DEC&PUSH 6)
13    (GETVALUE&PUSH 0)                   ; J
15    (JSR&PUSH L0)
17    (CALLSR 2 55)                       ; *
20    L20
20    (UNBIND1)
21    (SKIP&RET 3)
23    L23
23    (CONST 1)                           ; 1
24    (JMP L20)


Disassembly of function #:|(DEFUN TMSTORE (NAME X) ...)-27|
(CONST 0) = TMSTORE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMSTORE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMSTORE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMSTORE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMSTORE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMSTORE
8     (SKIP&RET 1)


Disassembly of function TMSTORE
(CONST 0) = NAME
(CONST 1) = X
(CONST 2) = N
(CONST 3) = 10
(CONST 4) = STORE
(CONST 5) = QUOTE
(CONST 6) = (MQUOTE SIMP)
(CONST 7) = MSET
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X NAME N)
25 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; NAME
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (GETVALUE&PUSH 2)                   ; N
8     (CONST&PUSH 3)                      ; 10
9     (CALLSR&JMPIF 1 47 L28)             ; <
13    (GETVALUE&PUSH 0)                   ; NAME
15    (CONST&PUSH 6)                      ; (MQUOTE SIMP)
16    (GETVALUE&PUSH 1)                   ; X
18    (LIST&PUSH 2)
20    (CALL2 7)                           ; MSET
22    (GETVALUE 1)                        ; X
24    L24
24    (UNBIND 2)
26    (SKIP&RET 3)
28    L28
28    (CONST&PUSH 4)                      ; STORE
29    (GETVALUE&PUSH 0)                   ; NAME
31    (CONST&PUSH 5)                      ; QUOTE
32    (GETVALUE&PUSH 1)                   ; X
34    (LIST&PUSH 2)
36    (LIST&PUSH 3)
38    (CALLS1 91)                         ; EVAL
40    (JMP L24)


Disassembly of function #:|(DEFUN TMKILLARRAY (IX) ...)-28|
(CONST 0) = TMKILLARRAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMKILLARRAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMKILLARRAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMKILLARRAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMKILLARRAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMKILLARRAY
8     (SKIP&RET 1)


Disassembly of function TMKILLARRAY
(CONST 0) = IX
(CONST 1) = N
(CONST 2) = 10
(CONST 3) = *TMARRAYS*
(CONST 4) = (NIL)
(CONST 5) = FILLARRAY
(CONST 6) = TM$KILL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*TMARRAYS* IX N)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; IX
3     (GETVALUE&PUSH 1)                   ; N
5     (GETVALUE&PUSH 0)                   ; IX
7     (CALLSR&PUSH 1 54)                  ; -
10    (CALLS2&PUSH 150)                   ; 1+
12    (JMP L43)
14    L14
14    (GETVALUE&PUSH 3)                   ; *TMARRAYS*
16    (LOAD&PUSH 1)
17    (CALLSR&PUSH 1 1)                   ; AREF
20    (CONST&PUSH 4)                      ; (NIL)
21    (CALL2 5)                           ; FILLARRAY
23    (JMP L41)
25    L25
25    (GETVALUE&PUSH 1)                   ; N
27    (CONST&PUSH 2)                      ; 10
28    (CALLSR&JMPIF 1 47 L14)             ; <
32    (GETVALUE&PUSH 3)                   ; *TMARRAYS*
34    (LOAD&PUSH 1)
35    (CALLSR 1 1)                        ; AREF
38    (CAR&PUSH)
39    (CALL1 6)                           ; TM$KILL
41    L41
41    (LOAD&INC&STORE 0)
43    L43
43    (LOAD&PUSH 0)
44    (GETVALUE&PUSH 1)                   ; N
46    (CALLSR&JMPIFNOT 1 48 L25)          ; >
50    (NIL)
51    (SKIP 1)
53    (UNBIND1)
54    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMHEADING NIL ...)-29|
(CONST 0) = TMHEADING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMHEADING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMHEADING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMHEADING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMHEADING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMHEADING
8     (SKIP&RET 1)


Disassembly of function TMHEADING
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TMEVAL (E) ...)-30|
(CONST 0) = TMEVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMEVAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMEVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMEVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMEVAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMEVAL
8     (SKIP&RET 1)


Disassembly of function TMEVAL
(CONST 0) = E
(CONST 1) = N
(CONST 2) = 10
(CONST 3) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (E N)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (NIL&PUSH)
4     (GETVALUE&PUSH 1)                   ; N
6     (CONST&PUSH 2)                      ; 10
7     (CALLSR&JMPIF 1 47 L30)             ; <
11    (GETVALUE&PUSH 0)                   ; E
13    (CALL1 3)                           ; MEVAL
15    (STORE 0)
16    (PUSH)
17    (GETVALUE&PUSH 0)                   ; E
19    (CALLS2&JMPIF 2 L38)                ; EQUAL
22    (LOAD 0)
23    (CDR)
24    (CAR)
25    (SKIP 1)
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)
30    L30
30    (GETVALUE&PUSH 0)                   ; E
32    (CALLS1 91)                         ; EVAL
34    (SKIP 1)
36    (JMP L27)
38    L38
38    (NIL)
39    (SKIP 1)
41    (JMP L27)


Disassembly of function #:|(DEFUN TM$KILL (E) ...)-31|
(CONST 0) = TM$KILL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TM$KILL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TM$KILL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TM$KILL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TM$KILL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TM$KILL
8     (SKIP&RET 1)


Disassembly of function TM$KILL
(CONST 0) = E
(CONST 1) = KILL1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
6 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 0)                   ; E
5     (CALL1 1)                           ; KILL1
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $TMINVERSE (*AA*) ...)-32|
(CONST 0) = $TMINVERSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TMINVERSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TMINVERSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TMINVERSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TMINVERSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TMINVERSE
8     (SKIP&RET 1)


Disassembly of function $TMINVERSE
(CONST 0) = *AA*
(CONST 1) = R
(CONST 2) = VLIST
(CONST 3) = N
(CONST 4) = M
(CONST 5) = NX
(CONST 6) = *ARRAY
(CONST 7) = *A2*
(CONST 8) = TMRATCONV
(CONST 9) = 1
(CONST 10) = J
(CONST 11) = (1 . 1)
(CONST 12) = (0 . 1)
(CONST 13) = TMLIN
(CONST 14) = RES
(CONST 15) = (MLIST)
(CONST 16) = MRAT
(CONST 17) = SIMP
(CONST 18) = VARLIST
(CONST 19) = GENVAR
(CONST 20) = $RATDISREP
(CONST 21) = (MTIMES SIMP)
(CONST 22) = (MEXPT SIMP)
(CONST 23) = -1
(CONST 24) = ($MATRIX SIMP)
(CONST 25) = *TMREARRAY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R GENVAR VARLIST RES NX J *A2* M N *AA*)
writes special variables : (R J *A2* NX M N)
140 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; *AA*
3     (NIL)
4     (BIND 1)                            ; R
6     (NIL)
7     (BIND 2)                            ; VLIST
9     (NIL)
10    (BIND 3)                            ; N
12    (NIL)
13    (BIND 4)                            ; M
15    (NIL)
16    (BIND 5)                            ; NX
18    (GETVALUE 0)                        ; *AA*
20    (CDR&PUSH)
21    (CALLS2 71)                         ; LENGTH
23    (SETVALUE 3)                        ; N
25    (SETVALUE 4)                        ; M
27    (SETVALUE 5)                        ; NX
29    (NIL&PUSH)
30    (T&PUSH)
31    (GETVALUE&PUSH 3)                   ; N
33    (CALLS2&PUSH 150)                   ; 1+
35    (GETVALUE&PUSH 4)                   ; M
37    (GETVALUE&PUSH 3)                   ; N
39    (CALLSR&PUSH 2 53)                  ; +
42    (CALLS2&PUSH 150)                   ; 1+
44    (CALL 4 6)                          ; *ARRAY
47    (SETVALUE 7)                        ; *A2*
49    (GETVALUE&PUSH 0)                   ; *AA*
51    (GETVALUE&PUSH 3)                   ; N
53    (GETVALUE&PUSH 3)                   ; N
55    (CALL 3 8)                          ; TMRATCONV
58    (CONST&PUSH 9)                      ; 1
59    (JMP L113)
61    L61
61    (CONST 9)                           ; 1
62    (BIND 10)                           ; J
64    (JMP L102)
66    L66
66    (CONST 11)                          ; (1 . 1)
67    (JMP L86)
69    L69
69    (GETVALUE&PUSH 7)                   ; *A2*
71    (GETVALUE&PUSH 3)                   ; N
73    (GETVALUE&PUSH 10)                  ; J
75    (CALLSR&PUSH 2 53)                  ; +
78    (LOAD&PUSH 5)
79    (GETVALUE&PUSH 10)                  ; J
81    (CALLSR&JMPIF 1 45 L66)             ; =
85    (CONST 12)                          ; (0 . 1)
86    L86
86    (PUSH)
87    (LOAD&PUSH 2)
88    (LOAD&PUSH 7)
89    (LOAD&PUSH 3)
90    (LOAD&PUSH 3)
91    (CALLSR 2 2)                        ; SYSTEM::STORE
94    (SKIP 3)
96    (GETVALUE&PUSH 10)                  ; J
98    (CALLS2 150)                        ; 1+
100   (SETVALUE 10)                       ; J
102   L102
102   (GETVALUE&PUSH 10)                  ; J
104   (GETVALUE&PUSH 4)                   ; M
106   (CALLSR&JMPIFNOT 1 48 L69)          ; >
110   (UNBIND1)
111   (LOAD&INC&STORE 0)
113   L113
113   (LOAD&PUSH 0)
114   (GETVALUE&PUSH 3)                   ; N
116   (CALLSR&JMPIFNOT 1 48 L61)          ; >
120   (SKIP 1)
122   (NIL&PUSH)
123   (CONST&PUSH 7)                      ; *A2*
124   (GETVALUE&PUSH 3)                   ; N
126   (GETVALUE&PUSH 4)                   ; M
128   (GETVALUE&PUSH 5)                   ; NX
130   (CALL&PUSH 4 13)                    ; TMLIN
133   (JMP L186)
135   L135
135   (LOAD&CAR&PUSH 0)
137   (LOAD 0)
138   (BIND 14)                           ; RES
140   (CONST&PUSH 15)                     ; (MLIST)
141   (NIL&PUSH)
142   (GETVALUE&PUSH 14)                  ; RES
144   (JMP L166)
146   L146
146   (LOAD&CAR&PUSH 0)
148   (CONST&PUSH 16)                     ; MRAT
149   (CONST&PUSH 17)                     ; SIMP
150   (GETVALUE&PUSH 18)                  ; VARLIST
152   (GETVALUE&PUSH 19)                  ; GENVAR
154   (LIST&PUSH 4)
156   (LOAD 1)
157   (CONS&PUSH)
158   (CALL1&PUSH 20)                     ; $RATDISREP
160   (LOAD&CONS&STORE 2)
162   (SKIP 1)
164   (LOAD&CDR&STORE 0)
166   L166
166   (LOAD&PUSH 0)
167   (CALLS1&JMPIFNOT 146 L146)          ; ENDP
170   (SKIP 1)
172   (LOAD&PUSH 0)
173   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
175   (SKIP 1)
177   (CONS)
178   (UNBIND1)
179   (PUSH)
180   (LOAD&CONS&STORE 2)
182   (SKIP 1)
184   (LOAD&CDR&STORE 0)
186   L186
186   (LOAD&PUSH 0)
187   (CALLS1&JMPIFNOT 146 L135)          ; ENDP
190   (SKIP 1)
192   (LOAD&PUSH 0)
193   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
195   (SKIP 1)
197   (SETVALUE 1)                        ; R
199   (CONST&PUSH 21)                     ; (MTIMES SIMP)
200   (CONST&PUSH 22)                     ; (MEXPT SIMP)
201   (GETVALUE 1)                        ; R
203   (CAR)
204   (CDR)
205   (CAR&PUSH)
206   (CONST&PUSH 23)                     ; -1
207   (LIST&PUSH 3)
209   (CONST&PUSH 24)                     ; ($MATRIX SIMP)
210   (GETVALUE 1)                        ; R
212   (CDR)
213   (CONS&PUSH)
214   (LIST 3)
216   (SETVALUE 1)                        ; R
218   (CONST&PUSH 7)                      ; *A2*
219   (CALL1 25)                          ; *TMREARRAY
221   (GETVALUE 1)                        ; R
223   (UNBIND 6)
225   (SKIP&RET 2)


Disassembly of function #:|(DEFUN *TMREARRAY (X) ...)-33|
(CONST 0) = *TMREARRAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *TMREARRAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *TMREARRAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *TMREARRAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *TMREARRAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *TMREARRAY
8     (SKIP&RET 1)


Disassembly of function *TMREARRAY
(CONST 0) = X
(CONST 1) = *REARRAY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
6 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; *REARRAY
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMPIVOT-ISOLATE (K) ...)-34|
(CONST 0) = TMPIVOT-ISOLATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMPIVOT-ISOLATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMPIVOT-ISOLATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMPIVOT-ISOLATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMPIVOT-ISOLATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMPIVOT-ISOLATE
8     (SKIP&RET 1)


Disassembly of function TMPIVOT-ISOLATE
(CONST 0) = K
(CONST 1) = N
(CONST 2) = *B*
(CONST 3) = *ROW*
(CONST 4) = *COL*
(CONST 5) = TMEXCHANGE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*COL* *ROW* *B* N K)
47 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; K
3     (GETVALUE&PUSH 0)                   ; K
5     (GETVALUE&PUSH 1)                   ; N
7     (CALLSR&JMPIF 1 48 L15)             ; >
11    (GETVALUE&PUSH 0)                   ; K
13    (JMP L66)
15    L15
15    (T)
16    (JMP L76)
18    L18
18    (T)
19    (SKIP 1)
21    (JMP L76)
23    L23
23    (GETVALUE&PUSH 2)                   ; *B*
25    (GETVALUE&PUSH 3)                   ; *ROW*
27    (LOAD&PUSH 2)
28    (CALLSR&PUSH 1 1)                   ; AREF
31    (GETVALUE&PUSH 4)                   ; *COL*
33    (GETVALUE&PUSH 0)                   ; K
35    (CALLSR&PUSH 1 1)                   ; AREF
38    (CALLSR&JMPIFNOT 2 1 L64)           ; AREF
42    (CONST&PUSH 3)                      ; *ROW*
43    (GETVALUE&PUSH 0)                   ; K
45    (LOAD&PUSH 2)
46    (CALL 3 5)                          ; TMEXCHANGE
49    (GETVALUE&PUSH 0)                   ; K
51    (CALLS2&PUSH 150)                   ; 1+
53    (JSR L0)
55    (JMPIF L18)
57    (CONST&PUSH 3)                      ; *ROW*
58    (GETVALUE&PUSH 0)                   ; K
60    (LOAD&PUSH 2)
61    (CALL 3 5)                          ; TMEXCHANGE
64    L64
64    (LOAD&INC&STORE 0)
66    L66
66    (LOAD&PUSH 0)
67    (GETVALUE&PUSH 1)                   ; N
69    (CALLSR&JMPIFNOT 1 48 L23)          ; >
73    (NIL)
74    (SKIP 1)
76    L76
76    (UNBIND1)
77    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMEXCHANGE (ROWCOL I J) ...)-35|
(CONST 0) = TMEXCHANGE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMEXCHANGE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMEXCHANGE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMEXCHANGE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMEXCHANGE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMEXCHANGE
8     (SKIP&RET 1)


Disassembly of function TMEXCHANGE
(CONST 0) = J
(CONST 1) = GET-ARRAY-POINTER
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (J)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; J
3     (NIL&PUSH)
4     (LOAD&PUSH 7)
5     (CALL1 1)                           ; GET-ARRAY-POINTER
7     (STORE 7)
8     (PUSH)
9     (LOAD&PUSH 7)
10    (CALLSR&STORE 1 1 0)                ; AREF
14    (LOAD&PUSH 7)
15    (GETVALUE&PUSH 0)                   ; J
17    (CALLSR&PUSH 1 1)                   ; AREF
20    (LOAD&PUSH 8)
21    (LOAD&PUSH 8)
22    (LOAD&PUSH 2)
23    (CALLSR 1 2)                        ; SYSTEM::STORE
26    (SKIP 1)
28    (GETVALUE&PUSH 0)                   ; J
30    (LOAD&PUSH 8)
31    (LOAD&PUSH 1)
32    (LOAD&PUSH 3)
33    (CALLSR 1 2)                        ; SYSTEM::STORE
36    (SKIP 1)
38    (NIL)
39    (SKIP 1)
41    (UNBIND1)
42    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TMPERMUTE (AX N M ...) ...)-36|
(CONST 0) = TMPERMUTE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMPERMUTE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMPERMUTE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMPERMUTE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMPERMUTE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMPERMUTE
8     (SKIP&RET 1)


Disassembly of function TMPERMUTE
(CONST 0) = AX
(CONST 1) = N
(CONST 2) = M
(CONST 3) = FLAG
(CONST 4) = K
(CONST 5) = L
(CONST 6) = GET-ARRAY-POINTER
(CONST 7) = *INDX*
(CONST 8) = *ARRAY
(CONST 9) = 1
(CONST 10) = 0
(CONST 11) = TMMOVE
(CONST 12) = *TMREARRAY
8 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L K FLAG M N *INDX* AX)
writes special variables : (K L AX)
109 byte-code instructions:
0     (LOAD 8)
1     (BIND 0)                            ; AX
3     (LOAD 10)
4     (BIND 1)                            ; N
6     (LOAD 12)
7     (BIND 2)                            ; M
9     (LOAD 10)
10    (BIND 3)                            ; FLAG
12    (NIL)
13    (BIND 4)                            ; K
15    (NIL)
16    (BIND 5)                            ; L
18    (GETVALUE&PUSH 0)                   ; AX
20    (CALL1 6)                           ; GET-ARRAY-POINTER
22    (SETVALUE 0)                        ; AX
24    (LOAD&PUSH 21)
25    (CALL1 6)                           ; GET-ARRAY-POINTER
27    (STORE 21)
29    (CONST&PUSH 7)                      ; *INDX*
30    (T&PUSH)
31    (LOAD&INC&PUSH 22)
33    (CALL 3 8)                          ; *ARRAY
36    (CONST&PUSH 9)                      ; 1
37    (JMP L56)
39    L39
39    (GETVALUE&PUSH 7)                   ; *INDX*
41    (LOAD&PUSH 23)
42    (LOAD&PUSH 2)
43    (CALLSR&PUSH 1 1)                   ; AREF
46    (LOAD&PUSH 1)
47    (LOAD&PUSH 3)
48    (LOAD&PUSH 2)
49    (CALLSR 1 2)                        ; SYSTEM::STORE
52    (SKIP 2)
54    (LOAD&INC&STORE 0)
56    L56
56    (LOAD&PUSH 0)
57    (LOAD&PUSH 22)
58    (CALLSR&JMPIFNOT 1 48 L39)          ; >
62    (SKIP 1)
64    (CONST&PUSH 9)                      ; 1
65    (JMP L175)
68    L68
68    (GETVALUE&PUSH 7)                   ; *INDX*
70    (LOAD&PUSH 1)
71    (CALLSR&PUSH 1 1)                   ; AREF
74    (LOAD&PUSH 1)
75    (CALLSR&JMPIF 1 45 L173)            ; =
80    (GETVALUE&PUSH 0)                   ; AX
82    (GETVALUE&PUSH 1)                   ; N
84    (GETVALUE&PUSH 2)                   ; M
86    (LOAD&PUSH 27)
88    (LOAD&PUSH 27)
90    (LOAD&PUSH 5)
91    (CONST&PUSH 10)                     ; 0
92    (GETVALUE&PUSH 3)                   ; FLAG
94    (CALL 8 11)                         ; TMMOVE
97    (LOAD 0)
98    (SETVALUE 5)                        ; L
100   (JMP L125)
102   L102
102   (GETVALUE&PUSH 0)                   ; AX
104   (GETVALUE&PUSH 1)                   ; N
106   (GETVALUE&PUSH 2)                   ; M
108   (LOAD&PUSH 27)
110   (LOAD&PUSH 27)
112   (GETVALUE&PUSH 4)                   ; K
114   (GETVALUE&PUSH 5)                   ; L
116   (GETVALUE&PUSH 3)                   ; FLAG
118   (CALL 8 11)                         ; TMMOVE
121   (GETVALUE 4)                        ; K
123   (SETVALUE 5)                        ; L
125   L125
125   (GETVALUE&PUSH 7)                   ; *INDX*
127   (GETVALUE&PUSH 5)                   ; L
129   (CALLSR 1 1)                        ; AREF
132   (SETVALUE 4)                        ; K
134   (GETVALUE&PUSH 7)                   ; *INDX*
136   (GETVALUE&PUSH 5)                   ; L
138   (GETVALUE&PUSH 5)                   ; L
140   (LOAD&PUSH 2)
141   (LOAD&PUSH 2)
142   (LOAD&PUSH 2)
143   (CALLSR 1 2)                        ; SYSTEM::STORE
146   (SKIP 3)
148   (GETVALUE&PUSH 4)                   ; K
150   (LOAD&PUSH 1)
151   (CALLSR&JMPIFNOT 1 45 L102)         ; =
155   (GETVALUE&PUSH 0)                   ; AX
157   (GETVALUE&PUSH 1)                   ; N
159   (GETVALUE&PUSH 2)                   ; M
161   (LOAD&PUSH 27)
163   (LOAD&PUSH 27)
165   (CONST&PUSH 10)                     ; 0
166   (GETVALUE&PUSH 5)                   ; L
168   (GETVALUE&PUSH 3)                   ; FLAG
170   (CALL 8 11)                         ; TMMOVE
173   L173
173   (LOAD&INC&STORE 0)
175   L175
175   (LOAD&PUSH 0)
176   (LOAD&PUSH 22)
177   (CALLSR&JMPIFNOT 1 48 L68)          ; >
182   (SKIP 1)
184   (CONST&PUSH 7)                      ; *INDX*
185   (CALL1 12)                          ; *TMREARRAY
187   (NIL)
188   (UNBIND 6)
190   (SKIP&RET 9)


Disassembly of function #:|(DEFUN TMMOVE (AX N M ...) ...)-37|
(CONST 0) = TMMOVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMMOVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMMOVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMMOVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMMOVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMMOVE
8     (SKIP&RET 1)


Disassembly of function TMMOVE
(CONST 0) = AX
(CONST 1) = N
(CONST 2) = M
(CONST 3) = J
(CONST 4) = FLAG
(CONST 5) = LL
(CONST 6) = GET-ARRAY-POINTER
(CONST 7) = *ROW*
(CONST 8) = 1
(CONST 9) = K
8 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LL K J M N FLAG AX)
writes special variables : (K LL AX)
82 byte-code instructions:
0     (LOAD 8)
1     (BIND 0)                            ; AX
3     (LOAD 10)
4     (BIND 1)                            ; N
6     (LOAD 12)
7     (BIND 2)                            ; M
9     (LOAD 11)
10    (BIND 3)                            ; J
12    (LOAD 13)
13    (BIND 4)                            ; FLAG
15    (NIL)
16    (BIND 5)                            ; LL
18    (GETVALUE&PUSH 0)                   ; AX
20    (CALL1 6)                           ; GET-ARRAY-POINTER
22    (SETVALUE 0)                        ; AX
24    (GETVALUE&PUSH 4)                   ; FLAG
26    (JMPIFEQTO 7 L45)                   ; *ROW*
29    (GETVALUE&PUSH 1)                   ; N
31    (LOAD 24)
33    L33
33    (PUSH)
34    (CALLSR 1 54)                       ; -
37    (SETVALUE 5)                        ; LL
39    (CONST 8)                           ; 1
40    (BIND 9)                            ; K
42    (JMP L138)
45    L45
45    (GETVALUE&PUSH 2)                   ; M
47    (LOAD 23)
49    (JMP L33)
51    L51
51    (GETVALUE&PUSH 0)                   ; AX
53    (LOAD&PUSH 27)
55    (GETVALUE&PUSH 3)                   ; J
57    (CALLSR&PUSH 2 53)                  ; +
60    (LOAD&PUSH 27)
62    (GETVALUE&PUSH 9)                   ; K
64    (CALLSR&PUSH 2 53)                  ; +
67    (GETVALUE&PUSH 0)                   ; AX
69    (LOAD&PUSH 30)
71    (LOAD&PUSH 29)
73    (CALLSR&PUSH 2 53)                  ; +
76    (LOAD&PUSH 30)
78    (GETVALUE 9)                        ; K
80    (JMP L116)
82    L82
82    (GETVALUE&PUSH 4)                   ; FLAG
84    (JMPIFEQTO 7 L51)                   ; *ROW*
87    (GETVALUE&PUSH 0)                   ; AX
89    (LOAD&PUSH 27)
91    (GETVALUE&PUSH 9)                   ; K
93    (CALLSR&PUSH 2 53)                  ; +
96    (LOAD&PUSH 27)
98    (GETVALUE&PUSH 3)                   ; J
100   (CALLSR&PUSH 2 53)                  ; +
103   (GETVALUE&PUSH 0)                   ; AX
105   (LOAD&PUSH 30)
107   (GETVALUE&PUSH 9)                   ; K
109   (CALLSR&PUSH 2 53)                  ; +
112   (LOAD&PUSH 30)
114   (LOAD 30)
116   L116
116   (PUSH)
117   (CALLSR&PUSH 2 53)                  ; +
120   (CALLSR&PUSH 2 1)                   ; AREF
123   (LOAD&PUSH 3)
124   (LOAD&PUSH 3)
125   (LOAD&PUSH 3)
126   (LOAD&PUSH 3)
127   (CALLSR 2 2)                        ; SYSTEM::STORE
130   (SKIP 4)
132   (GETVALUE&PUSH 9)                   ; K
134   (CALLS2 150)                        ; 1+
136   (SETVALUE 9)                        ; K
138   L138
138   (GETVALUE&PUSH 9)                   ; K
140   (GETVALUE&PUSH 5)                   ; LL
142   (CALLSR&JMPIFNOT 1 48 L82)          ; >
146   (UNBIND1)
147   (NIL)
148   (UNBIND 6)
150   (SKIP&RET 9)


Disassembly of function #:|(DEFUN TMSYMETRICP (A3 N) ...)-38|
(CONST 0) = TMSYMETRICP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMSYMETRICP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMSYMETRICP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMSYMETRICP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMSYMETRICP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMSYMETRICP
8     (SKIP&RET 1)


Disassembly of function TMSYMETRICP
(CONST 0) = N
(CONST 1) = GET-ARRAY-POINTER
(CONST 2) = 1
(CONST 3) = J
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N J)
writes special variable : (J)
45 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (LOAD&PUSH 5)
4     (CALL1 1)                           ; GET-ARRAY-POINTER
6     (STORE 5)
7     (CONST&PUSH 2)                      ; 1
8     (JMP L57)
10    L10
10    (LOAD&PUSH 0)
11    (CALLS2 150)                        ; 1+
13    (BIND 3)                            ; J
15    (JMP L46)
17    L17
17    (UNBIND1)
18    (NIL)
19    (SKIP 1)
21    (JMP L67)
23    L23
23    (LOAD&PUSH 9)
24    (LOAD&PUSH 4)
25    (GETVALUE&PUSH 3)                   ; J
27    (CALLSR&PUSH 2 1)                   ; AREF
30    (LOAD&PUSH 10)
31    (GETVALUE&PUSH 3)                   ; J
33    (LOAD&PUSH 6)
34    (CALLSR&PUSH 2 1)                   ; AREF
37    (CALLS2&JMPIFNOT 2 L17)             ; EQUAL
40    (GETVALUE&PUSH 3)                   ; J
42    (CALLS2 150)                        ; 1+
44    (SETVALUE 3)                        ; J
46    L46
46    (GETVALUE&PUSH 3)                   ; J
48    (GETVALUE&PUSH 0)                   ; N
50    (CALLSR&JMPIFNOT 1 48 L23)          ; >
54    (UNBIND1)
55    (LOAD&INC&STORE 0)
57    L57
57    (LOAD&PUSH 0)
58    (GETVALUE&PUSH 0)                   ; N
60    (CALLSR&JMPIFNOT 1 48 L10)          ; >
64    (T)
65    (SKIP 1)
67    L67
67    (UNBIND1)
68    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TMLATTICE (A3 XROW XCOL ...) ...)-39|
(CONST 0) = TMLATTICE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMLATTICE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMLATTICE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMLATTICE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMLATTICE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMLATTICE
8     (SKIP&RET 1)


Disassembly of function TMLATTICE
(CONST 0) = N
(CONST 1) = RES
(CONST 2) = GET-ARRAY-POINTER
(CONST 3) = *ARRAY
(CONST 4) = *B*
(CONST 5) = *ROW*
(CONST 6) = *COL*
(CONST 7) = 1
(CONST 8) = J
(CONST 9) = (0 . 1)
(CONST 10) = 0
(CONST 11) = TMPIVOT-ISOLATE
(CONST 12) = TMLATTICE1
(CONST 13) = TMSORT-LATTICE
(CONST 14) = *TMREARRAY
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RES *COL* *ROW* J *B* N)
writes special variables : (RES J *COL* *ROW* *B*)
148 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (NIL)
4     (BIND 1)                            ; RES
6     (LOAD&PUSH 10)
7     (CALL1 2)                           ; GET-ARRAY-POINTER
9     (STORE 10)
11    (LOAD&PUSH 9)
12    (CALL1 2)                           ; GET-ARRAY-POINTER
14    (STORE 9)
16    (LOAD&PUSH 8)
17    (CALL1 2)                           ; GET-ARRAY-POINTER
19    (STORE 8)
21    (NIL&PUSH)
22    (T&PUSH)
23    (GETVALUE&PUSH 0)                   ; N
25    (CALLS2&PUSH 150)                   ; 1+
27    (GETVALUE&PUSH 0)                   ; N
29    (CALLS2&PUSH 150)                   ; 1+
31    (CALL 4 3)                          ; *ARRAY
34    (SETVALUE 4)                        ; *B*
36    (NIL&PUSH)
37    (T&PUSH)
38    (GETVALUE&PUSH 0)                   ; N
40    (CALLS2&PUSH 150)                   ; 1+
42    (CALL 3 3)                          ; *ARRAY
45    (SETVALUE 5)                        ; *ROW*
47    (NIL&PUSH)
48    (T&PUSH)
49    (GETVALUE&PUSH 0)                   ; N
51    (CALLS2&PUSH 150)                   ; 1+
53    (CALL 3 3)                          ; *ARRAY
56    (SETVALUE 6)                        ; *COL*
58    (CONST&PUSH 7)                      ; 1
59    (JMP L108)
61    L61
61    (CONST 7)                           ; 1
62    (BIND 8)                            ; J
64    (JMP L97)
66    L66
66    (GETVALUE&PUSH 4)                   ; *B*
68    (GETVALUE&PUSH 8)                   ; J
70    (LOAD&PUSH 16)
71    (LOAD&PUSH 6)
72    (GETVALUE&PUSH 8)                   ; J
74    (CALLSR&PUSH 2 1)                   ; AREF
77    (CONST&PUSH 9)                      ; (0 . 1)
78    (CALLS2 2)                          ; EQUAL
80    (NOT)
81    (PUSH)
82    (LOAD&PUSH 2)
83    (LOAD&PUSH 7)
84    (LOAD&PUSH 3)
85    (LOAD&PUSH 3)
86    (CALLSR 2 2)                        ; SYSTEM::STORE
89    (SKIP 3)
91    (GETVALUE&PUSH 8)                   ; J
93    (CALLS2 150)                        ; 1+
95    (SETVALUE 8)                        ; J
97    L97
97    (GETVALUE&PUSH 8)                   ; J
99    (GETVALUE&PUSH 0)                   ; N
101   (CALLSR&JMPIFNOT 1 48 L66)          ; >
105   (UNBIND1)
106   (LOAD&INC&STORE 0)
108   L108
108   (LOAD&PUSH 0)
109   (GETVALUE&PUSH 0)                   ; N
111   (CALLSR&JMPIFNOT 1 48 L61)          ; >
115   (SKIP 1)
117   (CONST&PUSH 10)                     ; 0
118   (JMP L148)
120   L120
120   (NIL)
121   (SETVALUE 1)                        ; RES
123   (JMP L230)
126   L126
126   (GETVALUE&PUSH 5)                   ; *ROW*
128   (LOAD&PUSH 0)
129   (LOAD&PUSH 2)
130   (LOAD&PUSH 3)
131   (CALLSR 1 2)                        ; SYSTEM::STORE
134   (SKIP 1)
136   (GETVALUE&PUSH 6)                   ; *COL*
138   (LOAD&PUSH 0)
139   (LOAD&PUSH 2)
140   (LOAD&PUSH 3)
141   (CALLSR 1 2)                        ; SYSTEM::STORE
144   (SKIP 1)
146   (LOAD&INC&STORE 0)
148   L148
148   (LOAD&PUSH 0)
149   (GETVALUE&PUSH 0)                   ; N
151   (CALLSR&JMPIFNOT 1 48 L126)         ; >
155   (SKIP 1)
157   (CONST&PUSH 7)                      ; 1
158   (CALL1&JMPIFNOT 11 L120)            ; TMPIVOT-ISOLATE
161   (CONST&PUSH 7)                      ; 1
162   (JMP L212)
164   L164
164   (GETVALUE&PUSH 4)                   ; *B*
166   (GETVALUE&PUSH 5)                   ; *ROW*
168   (LOAD&PUSH 2)
169   (CALLSR&PUSH 1 1)                   ; AREF
172   (GETVALUE&PUSH 6)                   ; *COL*
174   (LOAD&PUSH 3)
175   (CALLSR&PUSH 1 1)                   ; AREF
178   (LOAD&PUSH 2)
179   (LOAD&PUSH 2)
180   (LOAD&PUSH 2)
181   (LOAD&PUSH 6)
182   (CALLSR 2 2)                        ; SYSTEM::STORE
185   (SKIP 3)
187   (GETVALUE&PUSH 4)                   ; *B*
189   (GETVALUE&PUSH 5)                   ; *ROW*
191   (LOAD&PUSH 2)
192   (CALLSR&PUSH 1 1)                   ; AREF
195   (GETVALUE&PUSH 6)                   ; *COL*
197   (CONST&PUSH 10)                     ; 0
198   (CALLSR&PUSH 1 1)                   ; AREF
201   (LOAD&PUSH 2)
202   (LOAD&PUSH 2)
203   (LOAD&PUSH 2)
204   (T&PUSH)
205   (CALLSR 2 2)                        ; SYSTEM::STORE
208   (SKIP 3)
210   (LOAD&INC&STORE 0)
212   L212
212   (LOAD&PUSH 0)
213   (GETVALUE&PUSH 0)                   ; N
215   (CALLSR&JMPIFNOT 1 48 L164)         ; >
219   (SKIP 1)
221   (CONST&PUSH 7)                      ; 1
222   (CALL1 12)                          ; TMLATTICE1
224   (LOAD&PUSH 9)
225   (LOAD&PUSH 9)
226   (CALL2 13)                          ; TMSORT-LATTICE
228   (SETVALUE 1)                        ; RES
230   L230
230   (CONST&PUSH 4)                      ; *B*
231   (CALL1 14)                          ; *TMREARRAY
233   (CONST&PUSH 5)                      ; *ROW*
234   (CALL1 14)                          ; *TMREARRAY
236   (CONST&PUSH 6)                      ; *COL*
237   (CALL1 14)                          ; *TMREARRAY
239   (GETVALUE 1)                        ; RES
241   (UNBIND 2)
243   (SKIP&RET 5)


Disassembly of function #:|(DEFUN TMLATTICE1 (K) ...)-40|
(CONST 0) = TMLATTICE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMLATTICE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMLATTICE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMLATTICE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMLATTICE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMLATTICE1
8     (SKIP&RET 1)


Disassembly of function TMLATTICE1
(CONST 0) = K
(CONST 1) = N
(CONST 2) = TMPATHP
(CONST 3) = TMUNIFY-LOOP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N K)
29 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; K
3     (GETVALUE&PUSH 0)                   ; K
5     (GETVALUE&PUSH 1)                   ; N
7     (CALLSR&JMPIF 1 45 L20)             ; =
11    (GETVALUE&PUSH 0)                   ; K
13    (CALLS2&PUSH 150)                   ; 1+
15    (JSR L0)
17    (NIL&PUSH)
18    (JMP L29)
20    L20
20    (NIL)
21    (JMP L41)
23    L23
23    (GETVALUE&PUSH 0)                   ; K
25    (LOAD&CDR&PUSH 1)
27    (CALL2 3)                           ; TMUNIFY-LOOP
29    L29
29    (GETVALUE&PUSH 0)                   ; K
31    (GETVALUE&PUSH 0)                   ; K
33    (CALL2 2)                           ; TMPATHP
35    (STORE 0)
36    (JMPIF L23)
38    (NIL)
39    (SKIP 1)
41    L41
41    (UNBIND1)
42    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMPATHP (J K) ...)-41|
(CONST 0) = TMPATHP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMPATHP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMPATHP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMPATHP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMPATHP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMPATHP
8     (SKIP&RET 1)


Disassembly of function TMPATHP
(CONST 0) = J
(CONST 1) = K
(CONST 2) = *B*
(CONST 3) = *ROW*
(CONST 4) = *COL*
(CONST 5) = N
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N K *COL* J *ROW* *B*)
56 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; J
3     (LOAD 4)
4     (BIND 1)                            ; K
6     (GETVALUE&PUSH 2)                   ; *B*
8     (GETVALUE&PUSH 3)                   ; *ROW*
10    (GETVALUE&PUSH 0)                   ; J
12    (CALLSR&PUSH 1 1)                   ; AREF
15    (GETVALUE&PUSH 4)                   ; *COL*
17    (GETVALUE&PUSH 1)                   ; K
19    (CALLSR&PUSH 1 1)                   ; AREF
22    (CALLSR&PUSH 2 1)                   ; AREF
25    (T)
26    (JMPIFEQ L33)
28    (GETVALUE&PUSH 1)                   ; K
30    (NIL&PUSH)
31    (JMP L81)
33    L33
33    (GETVALUE&PUSH 0)                   ; J
35    (GETVALUE&PUSH 1)                   ; K
37    (LIST 2)
39    (JMP L91)
41    L41
41    (GETVALUE&PUSH 0)                   ; J
43    (LOAD 1)
44    (CONS)
45    (SKIP 2)
47    (JMP L91)
49    L49
49    (GETVALUE&PUSH 2)                   ; *B*
51    (GETVALUE&PUSH 3)                   ; *ROW*
53    (GETVALUE&PUSH 0)                   ; J
55    (CALLSR&PUSH 1 1)                   ; AREF
58    (GETVALUE&PUSH 4)                   ; *COL*
60    (LOAD&PUSH 4)
61    (CALLSR&PUSH 1 1)                   ; AREF
64    (CALLSR&PUSH 2 1)                   ; AREF
67    (T)
68    (JMPIFNOTEQ L79)
70    (LOAD&PUSH 1)
71    (GETVALUE&PUSH 1)                   ; K
73    (JSR L0)
76    (STORE 0)
77    (JMPIF L41)
79    L79
79    (LOAD&INC&STORE 1)
81    L81
81    (LOAD&PUSH 1)
82    (GETVALUE&PUSH 5)                   ; N
84    (CALLSR&JMPIFNOT 1 48 L49)          ; >
88    (NIL)
89    (SKIP 2)
91    L91
91    (UNBIND 2)
93    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TMUNIFY-LOOP (K CHAIN) ...)-42|
(CONST 0) = TMUNIFY-LOOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMUNIFY-LOOP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMUNIFY-LOOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMUNIFY-LOOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMUNIFY-LOOP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMUNIFY-LOOP
8     (SKIP&RET 1)


Disassembly of function TMUNIFY-LOOP
(CONST 0) = K
(CONST 1) = L
(CONST 2) = *B*
(CONST 3) = *ROW*
(CONST 4) = *COL*
(CONST 5) = 1
(CONST 6) = N
(CONST 7) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N L *COL* *ROW* *B* K)
writes special variable : (L)
211 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; K
3     (NIL)
4     (BIND 1)                            ; L
6     (PUSH-NIL 2)
8     (LOAD 9)
9     (CAR)
10    (SETVALUE 1)                        ; L
12    (PUSH)
13    (GETVALUE&PUSH 0)                   ; K
15    (CALLSR&JMPIF 1 45 L403)            ; =
20    (GETVALUE&PUSH 2)                   ; *B*
22    (GETVALUE&PUSH 3)                   ; *ROW*
24    (GETVALUE&PUSH 0)                   ; K
26    (CALLSR&PUSH 1 1)                   ; AREF
29    (GETVALUE&PUSH 4)                   ; *COL*
31    (GETVALUE&PUSH 0)                   ; K
33    (CALLSR&PUSH 1 1)                   ; AREF
36    (CALLSR&STORE 2 1 1)                ; AREF
40    (GETVALUE&PUSH 2)                   ; *B*
42    (GETVALUE&PUSH 3)                   ; *ROW*
44    (GETVALUE&PUSH 1)                   ; L
46    (CALLSR&PUSH 1 1)                   ; AREF
49    (GETVALUE&PUSH 4)                   ; *COL*
51    (GETVALUE&PUSH 1)                   ; L
53    (CALLSR&PUSH 1 1)                   ; AREF
56    (CALLSR&STORE 2 1 0)                ; AREF
60    (GETVALUE&PUSH 2)                   ; *B*
62    (GETVALUE&PUSH 3)                   ; *ROW*
64    (GETVALUE&PUSH 0)                   ; K
66    (CALLSR&PUSH 1 1)                   ; AREF
69    (GETVALUE&PUSH 4)                   ; *COL*
71    (GETVALUE&PUSH 0)                   ; K
73    (CALLSR&PUSH 1 1)                   ; AREF
76    (LOAD&PUSH 2)
77    (LOAD&PUSH 2)
78    (LOAD&PUSH 2)
79    (NIL&PUSH)
80    (CALLSR 2 2)                        ; SYSTEM::STORE
83    (SKIP 3)
85    (GETVALUE&PUSH 2)                   ; *B*
87    (GETVALUE&PUSH 3)                   ; *ROW*
89    (GETVALUE&PUSH 1)                   ; L
91    (CALLSR&PUSH 1 1)                   ; AREF
94    (GETVALUE&PUSH 4)                   ; *COL*
96    (GETVALUE&PUSH 1)                   ; L
98    (CALLSR&PUSH 1 1)                   ; AREF
101   (LOAD&PUSH 2)
102   (LOAD&PUSH 2)
103   (LOAD&PUSH 2)
104   (NIL&PUSH)
105   (CALLSR 2 2)                        ; SYSTEM::STORE
108   (SKIP 3)
110   (CONST&PUSH 5)                      ; 1
111   (JMP L288)
114   L114
114   (GETVALUE&PUSH 2)                   ; *B*
116   (GETVALUE&PUSH 3)                   ; *ROW*
118   (GETVALUE&PUSH 0)                   ; K
120   (CALLSR&PUSH 1 1)                   ; AREF
123   (GETVALUE&PUSH 4)                   ; *COL*
125   (LOAD&PUSH 3)
126   (CALLSR&PUSH 1 1)                   ; AREF
129   (GETVALUE&PUSH 2)                   ; *B*
131   (GETVALUE&PUSH 3)                   ; *ROW*
133   (GETVALUE&PUSH 0)                   ; K
135   (CALLSR&PUSH 1 1)                   ; AREF
138   (GETVALUE&PUSH 4)                   ; *COL*
140   (LOAD&PUSH 6)
141   (CALLSR&PUSH 1 1)                   ; AREF
144   (CALLSR&JMPIF 2 1 L166)             ; AREF
148   (GETVALUE&PUSH 2)                   ; *B*
150   (GETVALUE&PUSH 3)                   ; *ROW*
152   (GETVALUE&PUSH 1)                   ; L
154   (CALLSR&PUSH 1 1)                   ; AREF
157   (GETVALUE&PUSH 4)                   ; *COL*
159   (LOAD&PUSH 6)
160   (CALLSR&PUSH 1 1)                   ; AREF
163   (CALLSR 2 1)                        ; AREF
166   L166
166   (PUSH)
167   (LOAD&PUSH 3)
168   (LOAD&PUSH 3)
169   (LOAD&PUSH 3)
170   (LOAD&PUSH 3)
171   (CALLSR 2 2)                        ; SYSTEM::STORE
174   (SKIP 4)
176   (GETVALUE&PUSH 2)                   ; *B*
178   (GETVALUE&PUSH 3)                   ; *ROW*
180   (LOAD&PUSH 2)
181   (CALLSR&PUSH 1 1)                   ; AREF
184   (GETVALUE&PUSH 4)                   ; *COL*
186   (GETVALUE&PUSH 0)                   ; K
188   (CALLSR&PUSH 1 1)                   ; AREF
191   (GETVALUE&PUSH 2)                   ; *B*
193   (GETVALUE&PUSH 3)                   ; *ROW*
195   (LOAD&PUSH 5)
196   (CALLSR&PUSH 1 1)                   ; AREF
199   (GETVALUE&PUSH 4)                   ; *COL*
201   (GETVALUE&PUSH 0)                   ; K
203   (CALLSR&PUSH 1 1)                   ; AREF
206   (CALLSR&JMPIF 2 1 L228)             ; AREF
210   (GETVALUE&PUSH 2)                   ; *B*
212   (GETVALUE&PUSH 3)                   ; *ROW*
214   (LOAD&PUSH 5)
215   (CALLSR&PUSH 1 1)                   ; AREF
218   (GETVALUE&PUSH 4)                   ; *COL*
220   (GETVALUE&PUSH 1)                   ; L
222   (CALLSR&PUSH 1 1)                   ; AREF
225   (CALLSR 2 1)                        ; AREF
228   L228
228   (PUSH)
229   (LOAD&PUSH 3)
230   (LOAD&PUSH 3)
231   (LOAD&PUSH 3)
232   (LOAD&PUSH 3)
233   (CALLSR 2 2)                        ; SYSTEM::STORE
236   (SKIP 4)
238   (GETVALUE&PUSH 2)                   ; *B*
240   (GETVALUE&PUSH 3)                   ; *ROW*
242   (GETVALUE&PUSH 1)                   ; L
244   (CALLSR&PUSH 1 1)                   ; AREF
247   (GETVALUE&PUSH 4)                   ; *COL*
249   (LOAD&PUSH 3)
250   (CALLSR&PUSH 1 1)                   ; AREF
253   (LOAD&PUSH 2)
254   (LOAD&PUSH 2)
255   (LOAD&PUSH 2)
256   (NIL&PUSH)
257   (CALLSR 2 2)                        ; SYSTEM::STORE
260   (SKIP 3)
262   (GETVALUE&PUSH 2)                   ; *B*
264   (GETVALUE&PUSH 3)                   ; *ROW*
266   (LOAD&PUSH 2)
267   (CALLSR&PUSH 1 1)                   ; AREF
270   (GETVALUE&PUSH 4)                   ; *COL*
272   (GETVALUE&PUSH 1)                   ; L
274   (CALLSR&PUSH 1 1)                   ; AREF
277   (LOAD&PUSH 2)
278   (LOAD&PUSH 2)
279   (LOAD&PUSH 2)
280   (NIL&PUSH)
281   (CALLSR 2 2)                        ; SYSTEM::STORE
284   (SKIP 3)
286   (LOAD&INC&STORE 0)
288   L288
288   (LOAD&PUSH 0)
289   (GETVALUE&PUSH 6)                   ; N
291   (CALLSR&JMPIFNOT 1 48 L114)         ; >
296   (SKIP 1)
298   (GETVALUE&PUSH 2)                   ; *B*
300   (GETVALUE&PUSH 3)                   ; *ROW*
302   (GETVALUE&PUSH 0)                   ; K
304   (CALLSR&PUSH 1 1)                   ; AREF
307   (GETVALUE&PUSH 4)                   ; *COL*
309   (GETVALUE&PUSH 0)                   ; K
311   (CALLSR&PUSH 1 1)                   ; AREF
314   (LOAD&PUSH 2)
315   (LOAD&PUSH 2)
316   (LOAD&PUSH 2)
317   (LOAD&PUSH 6)
318   (CALLSR 2 2)                        ; SYSTEM::STORE
321   (SKIP 3)
323   (GETVALUE&PUSH 2)                   ; *B*
325   (GETVALUE&PUSH 3)                   ; *ROW*
327   (GETVALUE&PUSH 1)                   ; L
329   (CALLSR&PUSH 1 1)                   ; AREF
332   (GETVALUE&PUSH 4)                   ; *COL*
334   (GETVALUE&PUSH 1)                   ; L
336   (CALLSR&PUSH 1 1)                   ; AREF
339   (LOAD&PUSH 2)
340   (LOAD&PUSH 2)
341   (LOAD&PUSH 2)
342   (LOAD&PUSH 7)
343   (CALLSR 2 2)                        ; SYSTEM::STORE
346   (SKIP 3)
348   (GETVALUE&PUSH 2)                   ; *B*
350   (GETVALUE&PUSH 3)                   ; *ROW*
352   (GETVALUE&PUSH 0)                   ; K
354   (CALLSR&PUSH 1 1)                   ; AREF
357   (GETVALUE&PUSH 4)                   ; *COL*
359   (CONST&PUSH 7)                      ; 0
360   (CALLSR&PUSH 1 1)                   ; AREF
363   (LOAD&PUSH 2)
364   (LOAD&PUSH 2)
365   (LOAD&PUSH 2)
366   (T&PUSH)
367   (CALLSR 2 2)                        ; SYSTEM::STORE
370   (SKIP 3)
372   (GETVALUE&PUSH 2)                   ; *B*
374   (GETVALUE&PUSH 3)                   ; *ROW*
376   (GETVALUE&PUSH 1)                   ; L
378   (CALLSR&PUSH 1 1)                   ; AREF
381   (GETVALUE&PUSH 4)                   ; *COL*
383   (CONST&PUSH 7)                      ; 0
384   (CALLSR&PUSH 1 1)                   ; AREF
387   (LOAD&PUSH 2)
388   (LOAD&PUSH 2)
389   (LOAD&PUSH 2)
390   (NIL&PUSH)
391   (CALLSR 2 2)                        ; SYSTEM::STORE
394   (SKIP 3)
396   (GETVALUE&PUSH 0)                   ; K
398   (LOAD&CDR&PUSH 10)
400   (JSR L0)
403   L403
403   (NIL)
404   (SKIP 2)
406   (UNBIND 2)
408   (SKIP&RET 3)


Disassembly of function #:|(DEFUN TMSORT-LATTICE (XROW XCOL) ...)-43|
(CONST 0) = TMSORT-LATTICE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMSORT-LATTICE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMSORT-LATTICE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMSORT-LATTICE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMSORT-LATTICE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMSORT-LATTICE
8     (SKIP&RET 1)


Disassembly of function TMSORT-LATTICE
(CONST 0) = TMSORT1
(CONST 1) = X
(CONST 2) = *B*
(CONST 3) = *ROW*
(CONST 4) = *COL*
(CONST 5) = RES
(CONST 6) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RES *COL* *ROW* *B* X)
writes special variables : (X RES)
101 byte-code instructions:
0     (PUSH-NIL 2)
2     (CALL0 0)                           ; TMSORT1
4     (STORE 1)
5     (BIND 1)                            ; X
7     (NIL&PUSH)
8     (GETVALUE 1)                        ; X
10    (JMPIFNOT L115)
13    L13
13    (GETVALUE&PUSH 2)                   ; *B*
15    (GETVALUE&PUSH 3)                   ; *ROW*
17    (GETVALUE 1)                        ; X
19    (CAR&PUSH)
20    (CALLSR&PUSH 1 1)                   ; AREF
23    (GETVALUE&PUSH 4)                   ; *COL*
25    (GETVALUE 1)                        ; X
27    (CAR&PUSH)
28    (CALLSR&PUSH 1 1)                   ; AREF
31    (CALLSR&PUSH 2 1)                   ; AREF
34    (NIL)
35    (BIND 5)                            ; RES
37    (JMP L76)
39    L39
39    (GETVALUE&PUSH 3)                   ; *ROW*
41    (LOAD&PUSH 4)
42    (CALLSR&PUSH 1 1)                   ; AREF
45    (GETVALUE&PUSH 4)                   ; *COL*
47    (LOAD&PUSH 5)
48    (CALLSR&PUSH 1 1)                   ; AREF
51    (LIST&PUSH 2)
53    (GETVALUE 5)                        ; RES
55    (CONS)
56    (SETVALUE 5)                        ; RES
58    (GETVALUE&PUSH 2)                   ; *B*
60    (GETVALUE&PUSH 3)                   ; *ROW*
62    (LOAD&PUSH 5)
63    (CALLSR&PUSH 1 1)                   ; AREF
66    (GETVALUE&PUSH 4)                   ; *COL*
68    (LOAD&PUSH 6)
69    (CALLSR&PUSH 1 1)                   ; AREF
72    (CALLSR&STORE 2 1 3)                ; AREF
76    L76
76    (LOAD&PUSH 3)
77    (GETVALUE 1)                        ; X
79    (CAR&PUSH)
80    (CALLSR&JMPIFNOT 1 45 L39)          ; =
84    (GETVALUE&PUSH 3)                   ; *ROW*
86    (LOAD&PUSH 4)
87    (CALLSR&PUSH 1 1)                   ; AREF
90    (GETVALUE&PUSH 4)                   ; *COL*
92    (LOAD&PUSH 5)
93    (CALLSR&PUSH 1 1)                   ; AREF
96    (LIST&PUSH 2)
98    (GETVALUE 5)                        ; RES
100   (CONS)
101   (UNBIND1)
102   (STORE 0)
103   (LOAD&CONS&STORE 0)
105   (GETVALUE 1)                        ; X
107   (CDR)
108   (SETVALUE 1)                        ; X
110   (GETVALUE 1)                        ; X
112   (JMPIF L13)
115   L115
115   (POP)
116   (UNBIND1)
117   (STORE 0)
118   (PUSH)
119   (CONST&PUSH 6)                      ; 1
120   (LOAD&JMPIFNOT 1 L165)
123   L123
123   (LOAD&CAR&PUSH 1)
125   (LOAD&JMPIFNOT 0 L158)
128   L128
128   (LOAD 0)
129   (CAR)
130   (CAR&PUSH)
131   (LOAD&PUSH 8)
132   (LOAD&PUSH 3)
133   (LOAD&PUSH 2)
134   (CALLSR 1 2)                        ; SYSTEM::STORE
137   (SKIP 1)
139   (LOAD 0)
140   (CAR)
141   (CDR)
142   (CAR&PUSH)
143   (LOAD&PUSH 7)
144   (LOAD&PUSH 3)
145   (LOAD&PUSH 2)
146   (CALLSR 1 2)                        ; SYSTEM::STORE
149   (SKIP 1)
151   (LOAD&INC&STORE 1)
153   (LOAD&CDR&STORE 0)
155   (LOAD&JMPIF 0 L128)
158   L158
158   (SKIP 1)
160   (LOAD&CDR&STORE 1)
162   (LOAD&JMPIF 1 L123)
165   L165
165   (SKIP 2)
167   (POP)
168   (SKIP&RET 4)


Disassembly of function #:|(DEFUN TMSORT1 NIL ...)-44|
(CONST 0) = TMSORT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMSORT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMSORT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMSORT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMSORT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMSORT1
8     (SKIP&RET 1)


Disassembly of function TMSORT1
(CONST 0) = 1
(CONST 1) = N
(CONST 2) = *B*
(CONST 3) = *ROW*
(CONST 4) = *COL*
(CONST 5) = 0
(CONST 6) = TMMAXP
(CONST 7) = J
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N J *COL* *ROW* *B*)
writes special variable : (J)
68 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1
1     (NIL&PUSH)
2     (JMP L110)
5     L5
5     (GETVALUE&PUSH 2)                   ; *B*
7     (GETVALUE&PUSH 3)                   ; *ROW*
9     (LOAD&PUSH 3)
10    (CALLSR&PUSH 1 1)                   ; AREF
13    (GETVALUE&PUSH 4)                   ; *COL*
15    (CONST&PUSH 5)                      ; 0
16    (CALLSR&PUSH 1 1)                   ; AREF
19    (CALLSR&JMPIFNOT 2 1 L108)          ; AREF
24    (LOAD&PUSH 1)
25    (CALL1&JMPIFNOT 6 L108)             ; TMMAXP
29    (CONST 0)                           ; 1
30    (BIND 7)                            ; J
32    (JMP L71)
34    L34
34    (GETVALUE&PUSH 7)                   ; J
36    (LOAD&PUSH 5)
37    (CALLSR&JMPIF 1 45 L65)             ; =
41    (GETVALUE&PUSH 2)                   ; *B*
43    (GETVALUE&PUSH 3)                   ; *ROW*
45    (LOAD&PUSH 6)
46    (CALLSR&PUSH 1 1)                   ; AREF
49    (GETVALUE&PUSH 4)                   ; *COL*
51    (GETVALUE&PUSH 7)                   ; J
53    (CALLSR&PUSH 1 1)                   ; AREF
56    (LOAD&PUSH 2)
57    (LOAD&PUSH 2)
58    (LOAD&PUSH 2)
59    (NIL&PUSH)
60    (CALLSR 2 2)                        ; SYSTEM::STORE
63    (SKIP 3)
65    L65
65    (GETVALUE&PUSH 7)                   ; J
67    (CALLS2 150)                        ; 1+
69    (SETVALUE 7)                        ; J
71    L71
71    (GETVALUE&PUSH 7)                   ; J
73    (GETVALUE&PUSH 1)                   ; N
75    (CALLSR&JMPIFNOT 1 48 L34)          ; >
79    (UNBIND1)
80    (GETVALUE&PUSH 2)                   ; *B*
82    (GETVALUE&PUSH 3)                   ; *ROW*
84    (LOAD&PUSH 3)
85    (CALLSR&PUSH 1 1)                   ; AREF
88    (GETVALUE&PUSH 4)                   ; *COL*
90    (CONST&PUSH 5)                      ; 0
91    (CALLSR&PUSH 1 1)                   ; AREF
94    (LOAD&PUSH 2)
95    (LOAD&PUSH 2)
96    (LOAD&PUSH 2)
97    (NIL&PUSH)
98    (CALLSR 2 2)                        ; SYSTEM::STORE
101   (SKIP 3)
103   (LOAD&PUSH 1)
104   (LOAD&CONS&STORE 0)
106   (CONST 5)                           ; 0
107   (STORE 1)
108   L108
108   (LOAD&INC&STORE 1)
110   L110
110   (LOAD&PUSH 1)
111   (GETVALUE&PUSH 1)                   ; N
113   (CALLSR&JMPIFNOT 1 48 L5)           ; >
118   (POP)
119   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMMAXP (I) ...)-45|
(CONST 0) = TMMAXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMMAXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMMAXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMMAXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMMAXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMMAXP
8     (SKIP&RET 1)


Disassembly of function TMMAXP
(CONST 0) = 1
(CONST 1) = J
(CONST 2) = N
(CONST 3) = *B*
(CONST 4) = *ROW*
(CONST 5) = *COL*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N *COL* *ROW* *B* J)
writes special variable : (J)
30 byte-code instructions:
0     (CONST 0)                           ; 1
1     (BIND 1)                            ; J
3     (JMP L40)
5     L5
5     (NIL)
6     (JMP L49)
8     L8
8     (LOAD&PUSH 4)
9     (GETVALUE&PUSH 1)                   ; J
11    (CALLSR&JMPIF 1 45 L34)             ; =
15    (GETVALUE&PUSH 3)                   ; *B*
17    (GETVALUE&PUSH 4)                   ; *ROW*
19    (GETVALUE&PUSH 1)                   ; J
21    (CALLSR&PUSH 1 1)                   ; AREF
24    (GETVALUE&PUSH 5)                   ; *COL*
26    (LOAD&PUSH 7)
27    (CALLSR&PUSH 1 1)                   ; AREF
30    (CALLSR&JMPIF 2 1 L5)               ; AREF
34    L34
34    (GETVALUE&PUSH 1)                   ; J
36    (CALLS2 150)                        ; 1+
38    (SETVALUE 1)                        ; J
40    L40
40    (GETVALUE&PUSH 1)                   ; J
42    (GETVALUE&PUSH 2)                   ; N
44    (CALLSR&JMPIFNOT 1 48 L8)           ; >
48    (T)
49    L49
49    (UNBIND1)
50    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TMUNPIVOT (A3 *ROW* *COL* ...) ...)-46|
(CONST 0) = TMUNPIVOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TMUNPIVOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TMUNPIVOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TMUNPIVOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TMUNPIVOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TMUNPIVOT
8     (SKIP&RET 1)


Disassembly of function TMUNPIVOT
(CONST 0) = *ROW*
(CONST 1) = *COL*
(CONST 2) = N
(CONST 3) = M
(CONST 4) = GET-ARRAY-POINTER
(CONST 5) = *ARRAY
(CONST 6) = *ROWINV*
(CONST 7) = *COLINV*
(CONST 8) = 1
(CONST 9) = 0
(CONST 10) = TMPERMUTE
(CONST 11) = *TMREARRAY
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M *COLINV* *ROWINV* N *ROW* *COL*)
writes special variables : (*COLINV* *ROWINV* *ROW* *COL*)
87 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; *ROW*
3     (LOAD 6)
4     (BIND 1)                            ; *COL*
6     (LOAD 8)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; M
12    (GETVALUE&PUSH 1)                   ; *COL*
14    (CALL1 4)                           ; GET-ARRAY-POINTER
16    (SETVALUE 1)                        ; *COL*
18    (GETVALUE&PUSH 0)                   ; *ROW*
20    (CALL1 4)                           ; GET-ARRAY-POINTER
22    (SETVALUE 0)                        ; *ROW*
24    (NIL&PUSH)
25    (T&PUSH)
26    (GETVALUE&PUSH 2)                   ; N
28    (CALLS2&PUSH 150)                   ; 1+
30    (CALL 3 5)                          ; *ARRAY
33    (SETVALUE 6)                        ; *ROWINV*
35    (NIL&PUSH)
36    (T&PUSH)
37    (GETVALUE&PUSH 2)                   ; N
39    (CALLS2&PUSH 150)                   ; 1+
41    (CALL 3 5)                          ; *ARRAY
44    (SETVALUE 7)                        ; *COLINV*
46    (CONST&PUSH 8)                      ; 1
47    (JMP L67)
49    L49
49    (GETVALUE&PUSH 6)                   ; *ROWINV*
51    (GETVALUE&PUSH 0)                   ; *ROW*
53    (LOAD&PUSH 2)
54    (CALLSR&PUSH 1 1)                   ; AREF
57    (LOAD&PUSH 1)
58    (LOAD&PUSH 1)
59    (LOAD&PUSH 4)
60    (CALLSR 1 2)                        ; SYSTEM::STORE
63    (SKIP 2)
65    (LOAD&INC&STORE 0)
67    L67
67    (LOAD&PUSH 0)
68    (GETVALUE&PUSH 2)                   ; N
70    (CALLSR&JMPIFNOT 1 48 L49)          ; >
74    (SKIP 1)
76    (CONST&PUSH 8)                      ; 1
77    (JMP L97)
79    L79
79    (GETVALUE&PUSH 7)                   ; *COLINV*
81    (GETVALUE&PUSH 1)                   ; *COL*
83    (LOAD&PUSH 2)
84    (CALLSR&PUSH 1 1)                   ; AREF
87    (LOAD&PUSH 1)
88    (LOAD&PUSH 1)
89    (LOAD&PUSH 4)
90    (CALLSR 1 2)                        ; SYSTEM::STORE
93    (SKIP 2)
95    (LOAD&INC&STORE 0)
97    L97
97    (LOAD&PUSH 0)
98    (GETVALUE&PUSH 2)                   ; N
100   (CALLSR&JMPIFNOT 1 48 L79)          ; >
104   (SKIP 1)
106   (LOAD&PUSH 17)
107   (GETVALUE&PUSH 2)                   ; N
109   (GETVALUE&PUSH 3)                   ; M
111   (CONST&PUSH 9)                      ; 0
112   (GETVALUE&PUSH 2)                   ; N
114   (CONST&PUSH 7)                      ; *COLINV*
115   (GETVALUE&PUSH 2)                   ; N
117   (CONST&PUSH 0)                      ; *ROW*
118   (CALL 8 10)                         ; TMPERMUTE
121   (LOAD&PUSH 17)
122   (GETVALUE&PUSH 2)                   ; N
124   (GETVALUE&PUSH 3)                   ; M
126   (CONST&PUSH 9)                      ; 0
127   (GETVALUE&PUSH 2)                   ; N
129   (CONST&PUSH 6)                      ; *ROWINV*
130   (GETVALUE&PUSH 2)                   ; N
132   (CONST&PUSH 1)                      ; *COL*
133   (CALL 8 10)                         ; TMPERMUTE
136   (CONST&PUSH 6)                      ; *ROWINV*
137   (CALL1 11)                          ; *TMREARRAY
139   (CONST&PUSH 7)                      ; *COLINV*
140   (CALL1 11)                          ; *TMREARRAY
142   (NIL)
143   (UNBIND 4)
145   (SKIP&RET 6)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL N NX ...))-47|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/linnew.fas
Wrote file /cygdrive/e/temp/maxima/src/linnew.lis