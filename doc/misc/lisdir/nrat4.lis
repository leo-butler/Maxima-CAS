Listing of compilation of file /cygdrive/e/temp/maxima/src/nrat4.lisp
on 2002-12-17 13:33:43 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/nrat4.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE NRAT4)-2|
(CONST 0) = NRAT4
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; NRAT4
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (GENPREFIX FQZ_) (SPECIAL $RATSIMPEXPONS *EXP ...) ...)-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC RATMAC)-4|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RADSUBSTFLAG NIL ...)-5-1|
(CONST 0) = $RADSUBSTFLAG
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RADSUBSTFLAG
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RADSUBSTFLAG
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RADSUBSTFLAG NIL ...)-5-2|
(CONST 0) = (SPECIAL $RADSUBSTFLAG)
(CONST 1) = $RADSUBSTFLAG
(CONST 2) = VARIABLE
(CONST 3) = "RADSUBSTFLAG T makes RATSUBS call RADCAN when it appears useful"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RADSUBSTFLAG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RADSUBSTFLAG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RADSUBSTFLAG
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $RADSUBSTFLAG
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "RADSUBSTFLAG T makes RATSUBS call RADCAN when it appears useful"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $RADSUBSTFLAG
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN PDIS (X) ...)-6|
(CONST 0) = PDIS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDIS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDIS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDIS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDIS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDIS
8     (SKIP&RET 1)


Disassembly of function PDIS
(CONST 0) = X
(CONST 1) = PDIS*
(CONST 2) = $RATDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&PUSH 1)                      ; PDIS*
7     (CALL1 2)                           ; $RATDISREP
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PDIS* (X) ...)-7|
(CONST 0) = PDIS*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDIS*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDIS*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDIS*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDIS*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDIS*
8     (SKIP&RET 1)


Disassembly of function PDIS*
(CONST 0) = X
(CONST 1) = MRAT
(CONST 2) = SIMP
(CONST 3) = VARLIST
(CONST 4) = GENVAR
(CONST 5) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X GENVAR VARLIST)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; MRAT
4     (CONST&PUSH 2)                      ; SIMP
5     (GETVALUE&PUSH 3)                   ; VARLIST
7     (GETVALUE&PUSH 4)                   ; GENVAR
9     (LIST&PUSH 4)
11    (GETVALUE&PUSH 0)                   ; X
13    (CONST 5)                           ; 1
14    (LIST* 2)
16    (UNBIND1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RDIS (X) ...)-8|
(CONST 0) = RDIS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RDIS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RDIS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RDIS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RDIS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RDIS
8     (SKIP&RET 1)


Disassembly of function RDIS
(CONST 0) = X
(CONST 1) = RDIS*
(CONST 2) = $RATDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&PUSH 1)                      ; RDIS*
7     (CALL1 2)                           ; $RATDISREP
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RDIS* (X) ...)-9|
(CONST 0) = RDIS*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RDIS*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RDIS*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RDIS*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RDIS*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RDIS*
8     (SKIP&RET 1)


Disassembly of function RDIS*
(CONST 0) = X
(CONST 1) = MRAT
(CONST 2) = SIMP
(CONST 3) = VARLIST
(CONST 4) = GENVAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X GENVAR VARLIST)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; MRAT
4     (CONST&PUSH 2)                      ; SIMP
5     (GETVALUE&PUSH 3)                   ; VARLIST
7     (GETVALUE&PUSH 4)                   ; GENVAR
9     (LIST&PUSH 4)
11    (GETVALUE 0)                        ; X
13    (CONS)
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RFORM (X) ...)-10|
(CONST 0) = RFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RFORM
8     (SKIP&RET 1)


Disassembly of function RFORM
(CONST 0) = X
(CONST 1) = RATF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; RATF
7     (CDR)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(SETQ RADCANP NIL)-11|
(CONST 0) = RADCANP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (RADCANP)
3 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; RADCANP
3     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $RATCOEF NARGS ...)-12|
(CONST 0) = $RATCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATCOEF
8     (SKIP&RET 1)


Disassembly of function $RATCOEF
(CONST 0) = 3
(CONST 1) = 1
(CONST 2) = NARG1
(CONST 3) = 2
(CONST 4) = RATCOEFF
(CONST 5) = $RATCOEFF
(CONST 6) = WNA-ERR
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
34 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 3
5     (CALLSR&JMPIF 1 45 L30)             ; =
9     (LOAD&PUSH 0)
10    (CONST&PUSH 3)                      ; 2
11    (CALLSR&JMPIFNOT 1 45 L44)          ; =
15    (CONST&PUSH 1)                      ; 1
16    (LOAD&PUSH 3)
17    (CALL2&PUSH 2)                      ; NARG1
19    (CONST&PUSH 3)                      ; 2
20    (LOAD&PUSH 4)
21    (CALL2&PUSH 2)                      ; NARG1
23    (CONST 1)                           ; 1
24    L24
24    (PUSH)
25    (CALL 3 4)                          ; RATCOEFF
28    (SKIP&RET 3)
30    L30
30    (CONST&PUSH 1)                      ; 1
31    (LOAD&PUSH 3)
32    (CALL2&PUSH 2)                      ; NARG1
34    (CONST&PUSH 3)                      ; 2
35    (LOAD&PUSH 4)
36    (CALL2&PUSH 2)                      ; NARG1
38    (CONST&PUSH 0)                      ; 3
39    (LOAD&PUSH 5)
40    (CALL2 2)                           ; NARG1
42    (JMP L24)
44    L44
44    (CONST&PUSH 5)                      ; $RATCOEFF
45    (CALL1 6)                           ; WNA-ERR
47    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RATCOEFF (A B C) ...)-13|
(CONST 0) = RATCOEFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATCOEFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATCOEFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATCOEFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATCOEFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATCOEFF
8     (SKIP&RET 1)


Disassembly of function RATCOEFF
(CONST 0) = B
(CONST 1) = $RATP
(CONST 2) = TRUNC
(CONST 3) = MEMQ
(CONST 4) = ZEROP1
(CONST 5) = $RATCOEFF
(CONST 6) = IMPROPER-ARG-ERR
(CONST 7) = MBAGP
(CONST 8) = MNUMP
(CONST 9) = ASSOLIKE
(CONST 10) = PSCOEFF1
(CONST 11) = MEXPTP
(CONST 12) = MUL2
(CONST 13) = 0
(CONST 14) = RATDISREP
(CONST 15) = $RATWTLVL
(CONST 16) = MUL2*
(CONST 17) = RATCOEF
(CONST 18) = 1
(CONST 19) = (MEXPT)
(CONST 20) = MINIMIZE-VARLIST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
154 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (LOAD&PUSH 6)
4     (CALL1&PUSH 1)                      ; $RATP
6     (LOAD&JMPIFNOT 0 L15)
9     (CONST&PUSH 2)                      ; TRUNC
10    (LOAD 8)
11    (CAR)
12    (CDR&PUSH)
13    (CALL2 3)                           ; MEMQ
15    L15
15    (PUSH)
16    (GETVALUE&PUSH 0)                   ; B
18    (CALL1&JMPIF 4 L108)                ; ZEROP1
22    (LOAD&PUSH 8)
23    (CALL1&JMPIF 7 L118)                ; MBAGP
27    (LOAD&JMPIFNOT 0 L47)
30    (LOAD&PUSH 6)
31    (CALL1&JMPIFNOT 8 L47)              ; MNUMP
34    (GETVALUE&PUSH 0)                   ; B
36    (LOAD 9)
37    (CAR)
38    (CDR)
39    (CDR)
40    (CDR)
41    (CDR)
42    (CAR&PUSH)
43    (CALL2&JMPIF 9 L157)                ; ASSOLIKE
47    L47
47    (LOAD&JMPIFNOT 0 L189)
51    (GETVALUE&PUSH 0)                   ; B
53    (CALL1&JMPIFNOT 11 L189)            ; MEXPTP
57    (LOAD&PUSH 6)
58    (CALL1&JMPIFNOT 8 L189)             ; MNUMP
62    (GETVALUE 0)                        ; B
64    (CDR)
65    (CDR)
66    (CAR&PUSH)
67    (CALL1&JMPIFNOT 8 L189)             ; MNUMP
71    (GETVALUE 0)                        ; B
73    (CDR)
74    (CAR&PUSH)
75    (LOAD 9)
76    (CAR)
77    (CDR)
78    (CDR)
79    (CDR)
80    (CDR)
81    (CAR&PUSH)
82    (CALL2&JMPIFNOT 9 L189)             ; ASSOLIKE
86    (LOAD&PUSH 8)
87    (GETVALUE 0)                        ; B
89    (CDR)
90    (CAR&PUSH)
91    (LOAD&PUSH 8)
92    (GETVALUE 0)                        ; B
94    (CDR)
95    (CDR)
96    (CAR&PUSH)
97    (CALL2 12)                          ; MUL2
99    L99
99    (PUSH)
100   (CALL 3 10)                         ; PSCOEFF1
103   (SKIP 2)
105   (JMP L239)
108   L108
108   (GETVALUE&PUSH 0)                   ; B
110   (CONST&PUSH 5)                      ; $RATCOEFF
111   (CALL2 6)                           ; IMPROPER-ARG-ERR
113   (SKIP 2)
115   (JMP L239)
118   L118
118   (LOAD&CAR&PUSH 8)
120   (NIL&PUSH)
121   (LOAD&CDR&PUSH 10)
123   (JMP L140)
125   L125
125   (LOAD&CAR&PUSH 0)
127   (LOAD&PUSH 0)
128   (GETVALUE&PUSH 0)                   ; B
130   (LOAD&PUSH 12)
131   (JSR&PUSH L0)
134   (LOAD&CONS&STORE 2)
136   (SKIP 1)
138   (LOAD&CDR&STORE 0)
140   L140
140   (LOAD&PUSH 0)
141   (CALLS1&JMPIFNOT 146 L125)          ; ENDP
144   (SKIP 1)
146   (LOAD&PUSH 0)
147   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
149   (SKIP 1)
151   (CONS)
152   (SKIP 2)
154   (JMP L239)
157   L157
157   (LOAD&PUSH 8)
158   (GETVALUE&PUSH 0)                   ; B
160   (LOAD 8)
161   (JMP L99)
163   L163
163   (LOAD 8)
164   (SKIP 2)
166   (JMP L239)
169   L169
169   (LOAD&PUSH 11)
170   (GETVALUE&PUSH 0)                   ; B
172   (CALL2&PUSH 16)                     ; MUL2*
174   (GETVALUE 0)                        ; B
176   (JMP L222)
178   L178
178   (GETVALUE 0)                        ; B
180   (JMP L222)
182   L182
182   (LOAD&PUSH 8)
183   (CALL1 20)                          ; MINIMIZE-VARLIST
185   (SKIP 2)
187   (JMP L239)
189   L189
189   (LOAD&JMPIFNOT 0 L196)
192   (LOAD&PUSH 6)
193   (JMPIFEQTO 13 L163)                 ; 0
196   L196
196   (LOAD&JMPIFNOT 0 L204)
199   (LOAD&PUSH 8)
200   (CALL1 14)                          ; RATDISREP
202   (STORE 8)
204   L204
204   (NIL)
205   (BIND 15)                           ; $RATWTLVL
207   (LOAD&PUSH 9)
208   (JMPIFEQTO 13 L169)                 ; 0
211   (LOAD&PUSH 11)
212   (LOAD&PUSH 10)
213   (JMPIFEQTO 18 L178)                 ; 1
216   (CONST&PUSH 19)                     ; (MEXPT)
217   (GETVALUE&PUSH 0)                   ; B
219   (LOAD&PUSH 12)
220   (LIST 3)
222   L222
222   (PUSH)
223   (CALL2 17)                          ; RATCOEF
225   (UNBIND1)
226   (STORE 8)
228   (LOAD&JMPIFNOT 1 L234)
231   (LOAD&JMPIFNOT 0 L182)
234   L234
234   (LOAD&PUSH 8)
235   (CALL1 14)                          ; RATDISREP
237   (SKIP 2)
239   L239
239   (UNBIND1)
240   (SKIP&RET 4)


Disassembly of function #:|(DEFUN MINIMIZE-VARLIST (RATFUN) ...)-14|
(CONST 0) = MINIMIZE-VARLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MINIMIZE-VARLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MINIMIZE-VARLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MINIMIZE-VARLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MINIMIZE-VARLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MINIMIZE-VARLIST
8     (SKIP&RET 1)


Disassembly of function MINIMIZE-VARLIST
(CONST 0) = $RATP
(CONST 1) = RATF
(CONST 2) = MINVARLIST-MRAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
20 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L8)                  ; $RATP
4     (LOAD&PUSH 1)
5     (CALL1 1)                           ; RATF
7     (STORE 1)
8     L8
8     (LOAD 1)
9     (CAR)
10    (CDR)
11    (CDR)
12    (CAR&PUSH)
13    (LOAD 2)
14    (CAR)
15    (CDR)
16    (CDR)
17    (CDR)
18    (CAR&PUSH)
19    (LOAD&CDR&PUSH 3)
21    (CALL 3 2)                          ; MINVARLIST-MRAT
24    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MINVARLIST-MRAT (VARS GENS RATFORM) ...)-15|
(CONST 0) = MINVARLIST-MRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MINVARLIST-MRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MINVARLIST-MRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MINVARLIST-MRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MINVARLIST-MRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MINVARLIST-MRAT
8     (SKIP&RET 1)


Disassembly of function MINVARLIST-MRAT
(CONST 0) = RATFORM
(CONST 1) = LISTOVARS
(CONST 2) = UNION*
(CONST 3) = MEMQ
(CONST 4) = MRAT
(CONST 5) = SIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RATFORM)
39 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; RATFORM
3     (GETVALUE 0)                        ; RATFORM
5     (CAR&PUSH)
6     (CALL1&PUSH 1)                      ; LISTOVARS
8     (GETVALUE 0)                        ; RATFORM
10    (CDR&PUSH)
11    (CALL1&PUSH 1)                      ; LISTOVARS
13    (CALL2&PUSH 2)                      ; UNION*
15    (LOAD&PUSH 7)
16    (LOAD&PUSH 7)
17    (PUSH-NIL 2)
19    (LOAD&JMPIFNOT 2 L45)
22    L22
22    (LOAD&CAR&PUSH 2)
24    (LOAD&PUSH 5)
25    (CALL2&JMPIFNOT 3 L36)              ; MEMQ
28    (LOAD&CAR&PUSH 2)
30    (LOAD&CONS&STORE 0)
32    (LOAD&CAR&PUSH 3)
34    (LOAD&CONS&STORE 1)
36    L36
36    (LOAD&CDR&PUSH 3)
38    (LOAD&CDR&STORE 3)
40    (POP&STORE 3)
42    (LOAD&JMPIF 2 L22)
45    L45
45    (CONST&PUSH 4)                      ; MRAT
46    (CONST&PUSH 5)                      ; SIMP
47    (LOAD&PUSH 3)
48    (CALLS2&PUSH 73)                    ; NREVERSE
50    (LOAD&PUSH 3)
51    (CALLS2&PUSH 73)                    ; NREVERSE
53    (LIST&PUSH 4)
55    (GETVALUE 0)                        ; RATFORM
57    (CONS)
58    (SKIP 5)
60    (UNBIND1)
61    (SKIP&RET 4)


Disassembly of function #:|(DEFUN RATCOEF (EXP VAR) ...)-16|
(CONST 0) = RATCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATCOEF
8     (SKIP&RET 1)


Disassembly of function RATCOEF
(CONST 0) = VAR
(CONST 1) = VARLIST
(CONST 2) = GENVAR
(CONST 3) = $RATFAC
(CONST 4) = $ALGEBRAIC
(CONST 5) = $RATWTLVL
(CONST 6) = BAS
(CONST 7) = RATDISREP
(CONST 8) = MEXPTP
(CONST 9) = MNUMP
(CONST 10) = NEWVAR
(CONST 11) = RATREP*
(CONST 12) = ONEP1
(CONST 13) = PUREPROD
(CONST 14) = PRODCOEF
(CONST 15) = PDIS*
(CONST 16) = RATQUOTIENT
(CONST 17) = B
(CONST 18) = RATDIVIDE
(CONST 19) = RDIS*
(CONST 20) = RATCOEF1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B VARLIST BAS VAR)
writes special variables : (BAS VAR)
120 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (NIL)
4     (BIND 1)                            ; VARLIST
6     (NIL)
7     (BIND 2)                            ; GENVAR
9     (NIL)
10    (BIND 3)                            ; $RATFAC
12    (NIL)
13    (BIND 4)                            ; $ALGEBRAIC
15    (NIL)
16    (BIND 5)                            ; $RATWTLVL
18    (NIL)
19    (BIND 6)                            ; BAS
21    (NIL&PUSH)
22    (GETVALUE&PUSH 0)                   ; VAR
24    (CALL1 7)                           ; RATDISREP
26    (SETVALUE 0)                        ; VAR
28    (PUSH)
29    (CALL1&JMPIFNOT 8 L41)              ; MEXPTP
32    (GETVALUE 0)                        ; VAR
34    (CDR)
35    (CDR)
36    (CAR&PUSH)
37    (CALL1&JMPIF 9 L120)                ; MNUMP
41    L41
41    (GETVALUE 0)                        ; VAR
43    L43
43    (SETVALUE 6)                        ; BAS
45    (GETVALUE&PUSH 0)                   ; VAR
47    (CALL1 10)                          ; NEWVAR
49    (GETVALUE&PUSH 6)                   ; BAS
51    (CALL1 10)                          ; NEWVAR
53    (GETVALUE 1)                        ; VARLIST
55    (CAR)
56    (STORE 0)
57    (LOAD&PUSH 24)
58    (CALL1 10)                          ; NEWVAR
60    (LOAD&PUSH 24)
61    (CALL1 11)                          ; RATREP*
63    (CDR)
64    (STORE 24)
66    (GETVALUE&PUSH 0)                   ; VAR
68    (CALL1 11)                          ; RATREP*
70    (CDR)
71    (SETVALUE 0)                        ; VAR
73    (GETVALUE&PUSH 6)                   ; BAS
75    (CALL1 11)                          ; RATREP*
77    (CDR)
78    (CAR)
79    (SETVALUE 6)                        ; BAS
81    (LOAD&CDR&PUSH 24)
83    (CALL1&JMPIFNOT 12 L98)             ; ONEP1
86    (GETVALUE 0)                        ; VAR
88    (CDR&PUSH)
89    (CALL1&JMPIFNOT 12 L98)             ; ONEP1
92    (GETVALUE 0)                        ; VAR
94    (CAR&PUSH)
95    (CALL1&JMPIF 13 L127)               ; PUREPROD
98    L98
98    (LOAD&PUSH 24)
99    (GETVALUE&PUSH 0)                   ; VAR
101   (CALL2 16)                          ; RATQUOTIENT
103   (STORE 24)
105   (LOAD&JMPIF 0 L132)
108   (LOAD 24)
110   (CDR)
111   L111
111   (PUSH)
112   (LOAD&CAR&PUSH 25)
114   (CALL2&PUSH 14)                     ; PRODCOEF
116   (CALL1 15)                          ; PDIS*
118   (JMP L181)
120   L120
120   (GETVALUE 0)                        ; VAR
122   (CDR)
123   (CAR)
124   (JMP L43)
127   L127
127   (GETVALUE 0)                        ; VAR
129   (CAR)
130   (JMP L111)
132   L132
132   (LOAD&PUSH 0)
133   (CALL1 11)                          ; RATREP*
135   (CDR)
136   (CAR)
137   (CAR)
138   (STORE 0)
139   (JMP L149)
141   L141
141   (LOAD&CAR&PUSH 24)
143   (LOAD&CDR&PUSH 25)
145   (CALL2 20)                          ; RATCOEF1
147   (STORE 24)
149   L149
149   (LOAD 24)
151   (CDR)
152   (JMPIFATOM L173)
154   (LOAD 24)
156   (CDR)
157   (CAR)
158   (BIND 17)                           ; B
160   (LOAD&PUSH 3)
161   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
163   (GETVALUE&PUSH 17)                  ; B
165   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
167   (CALLSR 1 48)                       ; >
170   (UNBIND1)
171   (JMPIFNOT L141)
173   L173
173   (LOAD&PUSH 24)
174   (GETVALUE&PUSH 6)                   ; BAS
176   (CALL2 18)                          ; RATDIVIDE
178   (CDR&PUSH)
179   (CALL1 19)                          ; RDIS*
181   L181
181   (SKIP 1)
183   (UNBIND 7)
185   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RATCOEF1 (NUM DEN) ...)-17|
(CONST 0) = RATCOEF1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATCOEF1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATCOEF1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATCOEF1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATCOEF1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATCOEF1
8     (SKIP&RET 1)


Disassembly of function RATCOEF1
(CONST 0) = NUM
(CONST 1) = (0 . 1)
(CONST 2) = PDIVIDE
(CONST 3) = B
(CONST 4) = CONSTCOEF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B NUM)
42 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; NUM
3     (GETVALUE 0)                        ; NUM
5     (JMPIFATOM L47)
7     (GETVALUE 0)                        ; NUM
9     (CAR&PUSH)
10    (LOAD 5)
11    (CAR)
12    (JMPIFEQ L50)
14    (LOAD&CAR&PUSH 4)
16    (GETVALUE 0)                        ; NUM
18    (CAR)
19    (BIND 3)                            ; B
21    (LOAD&PUSH 3)
22    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
24    (GETVALUE&PUSH 3)                   ; B
26    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
28    (CALLSR 1 48)                       ; >
31    (UNBIND1)
32    (SKIP 1)
34    (JMPIF L58)
36    (GETVALUE 0)                        ; NUM
38    (CDR&PUSH)
39    (CALL1&PUSH 4)                      ; CONSTCOEF
41    (LOAD&PUSH 5)
42    (JSR L0)
44    L44
44    (UNBIND1)
45    (SKIP&RET 3)
47    L47
47    (CONST 1)                           ; (0 . 1)
48    (JMP L44)
50    L50
50    (GETVALUE&PUSH 0)                   ; NUM
52    (LOAD&PUSH 5)
53    (CALL2 2)                           ; PDIVIDE
55    (CAR)
56    (JMP L44)
58    L58
58    (CONST 1)                           ; (0 . 1)
59    (JMP L44)


Disassembly of function #:|(DEFUN CONSTCOEF (P) ...)-18|
(CONST 0) = CONSTCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTCOEF
8     (SKIP&RET 1)


Disassembly of function CONSTCOEF
(CONST 0) = P
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
23 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFNOT L22)
7     (GETVALUE 0)                        ; P
9     (CAR&PUSH)
10    (CALLS2&JMPIF 145 L25)              ; ZEROP
13    (GETVALUE 0)                        ; P
15    (CDR)
16    (CDR&PUSH)
17    (JSR L0)
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (CONST 1)                           ; 0
23    (JMP L19)
25    L25
25    (GETVALUE 0)                        ; P
27    (CDR)
28    (CAR)
29    (JMP L19)


Disassembly of function #:|(SETQ *RADSUBST NIL ...)-19|
(CONST 0) = *RADSUBST
(CONST 1) = RATSUBVL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (RATSUBVL *RADSUBST)
5 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; *RADSUBST
3     (T)
4     (SETVALUE 1)                        ; RATSUBVL
6     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $RATSUBST (A B C) ...)-20|
(CONST 0) = $RATSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATSUBST
8     (SKIP&RET 1)


Disassembly of function $RATSUBST
(CONST 0) = B
(CONST 1) = VARLIST
(CONST 2) = $RATFAC
(CONST 3) = GENVAR
(CONST 4) = $RATP
(CONST 5) = $RADSUBSTFLAG
(CONST 6) = NEWVAR
(CONST 7) = MEXPTP
(CONST 8) = ORMAPC
(CONST 9) = $FACTORFLAG
(CONST 10) = *EXP
(CONST 11) = *EXP2
(CONST 12) = *RADSUBST
(CONST 13) = FULLRATSIMP
(CONST 14) = FNEWVAR
(CONST 15) = RATREP*
(CONST 16) = SPC0
(CONST 17) = RDIS
(CONST 18) = $RATDISREP
(CONST 19) = MAXIMA-SUBSTITUTE
(CONST 20) = RATF
(CONST 21) = RATSUBVL
(CONST 22) = ALIKE1
(CONST 23) = RESIMPLIFY
(CONST 24) = PAIROFF
(CONST 25) = PMINUSP
(CONST 26) = RATMINUS
(CONST 27) = 1
(CONST 28) = 0
(CONST 29) = RATINVERT
(CONST 30) = RATTIMES
(CONST 31) = (0 1)
(CONST 32) = ZL-MEMBER
(CONST 33) = MRAT
(CONST 34) = SIMP
(CONST 35) = EVERYSUBST0
(CONST 36) = RATREDUCE
(CONST 37) = ALLSUBST00
(CONST 38) = ALIKE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR RATSUBVL *EXP2 *EXP VARLIST B $RADSUBSTFLAG)
writes special variables : (*RADSUBST *EXP2 *EXP VARLIST B)
286 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (NIL)
4     (BIND 1)                            ; VARLIST
6     (PUSH-NIL 2)
8     (NIL)
9     (BIND 2)                            ; $RATFAC
11    (NIL)
12    (BIND 3)                            ; GENVAR
14    (LOAD&PUSH 15)
15    (CALL1&JMPIF 4 L307)                ; $RATP
19    (GETVALUE 5)                        ; $RADSUBSTFLAG
21    (JMPIFNOT L107)
24    L24
24    (GETVALUE&PUSH 0)                   ; B
26    (CALL1 6)                           ; NEWVAR
28    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; MEXPTP
30    (GETVALUE&PUSH 1)                   ; VARLIST
32    (CALL2&JMPIFNOT 8 L107)             ; ORMAPC
36    (T)
37    (BIND 9)                            ; $FACTORFLAG
39    (NIL)
40    (BIND 10)                           ; *EXP
42    (NIL)
43    (BIND 11)                           ; *EXP2
45    (NIL)
46    (BIND 12)                           ; *RADSUBST
48    (GETVALUE&PUSH 0)                   ; B
50    (CALL1 13)                          ; FULLRATSIMP
52    (SETVALUE 0)                        ; B
54    (LOAD&PUSH 27)
56    (CALL1 13)                          ; FULLRATSIMP
58    (STORE 27)
60    (NIL)
61    (SETVALUE 1)                        ; VARLIST
63    (GETVALUE&PUSH 0)                   ; B
65    (CALL1 14)                          ; FNEWVAR
67    (LOAD&PUSH 27)
69    (CALL1 14)                          ; FNEWVAR
71    (GETVALUE&PUSH 0)                   ; B
73    (CALL1 15)                          ; RATREP*
75    (CDR)
76    (SETVALUE 10)                       ; *EXP
78    (LOAD&PUSH 27)
80    (CALL1 15)                          ; RATREP*
82    (CDR)
83    (SETVALUE 11)                       ; *EXP2
85    (T)
86    (SETVALUE 12)                       ; *RADSUBST
88    (CALL0 16)                          ; SPC0
90    (GETVALUE&PUSH 10)                  ; *EXP
92    (CALL1 17)                          ; RDIS
94    (SETVALUE 0)                        ; B
96    (GETVALUE&PUSH 11)                  ; *EXP2
98    (CALL1 17)                          ; RDIS
100   (STORE 27)
102   (NIL)
103   (SETVALUE 1)                        ; VARLIST
105   (UNBIND 4)
107   L107
107   (LOAD&PUSH 17)
108   (CALL1 18)                          ; $RATDISREP
110   (STORE 17)
112   (GETVALUE&PUSH 0)                   ; B
114   (CALL1 18)                          ; $RATDISREP
116   (SETVALUE 0)                        ; B
118   (LOAD&PUSH 15)
119   (CALL1 18)                          ; $RATDISREP
121   (STORE 15)
123   (GETVALUE&PUSH 0)                   ; B
125   (CALLS2&JMPIF 12 L317)              ; INTEGERP
129   (LOAD&PUSH 15)
130   (CALL1 6)                           ; NEWVAR
132   (GETVALUE 21)                       ; RATSUBVL
134   (JMPIF L335)
137   (GETVALUE 1)                        ; VARLIST
139   L139
139   (STORE 7)
140   (LOAD&PUSH 17)
141   (CALL1 6)                           ; NEWVAR
143   (GETVALUE&PUSH 0)                   ; B
145   (CALL1 6)                           ; NEWVAR
147   (GETVALUE&PUSH 1)                   ; VARLIST
149   (CALLS2&PUSH 72)                    ; REVERSE
151   (LOAD&PUSH 8)
152   (CALLS2&PUSH 72)                    ; REVERSE
154   (CALL2&PUSH 24)                     ; PAIROFF
156   (CALLS2&STORE 72 7)                 ; REVERSE
159   (LOAD&PUSH 17)
160   (CALL1 15)                          ; RATREP*
162   (CDR)
163   (STORE 17)
165   (GETVALUE&PUSH 0)                   ; B
167   (CALL1 15)                          ; RATREP*
169   (CDR)
170   (SETVALUE 0)                        ; B
172   (LOAD&PUSH 15)
173   (CALL1 15)                          ; RATREP*
175   (CDR)
176   (STORE 15)
178   (GETVALUE 0)                        ; B
180   (CAR&PUSH)
181   (CALL1&JMPIFNOT 25 L195)            ; PMINUSP
184   (GETVALUE&PUSH 0)                   ; B
186   (CALL1 26)                          ; RATMINUS
188   (SETVALUE 0)                        ; B
190   (LOAD&PUSH 17)
191   (CALL1 26)                          ; RATMINUS
193   (STORE 17)
195   L195
195   (GETVALUE 0)                        ; B
197   (CAR&PUSH)
198   (JMPIFNOTEQTO 27 L223)              ; 1
201   (GETVALUE 0)                        ; B
203   (CDR&PUSH)
204   (JMPIFEQTO 27 L223)                 ; 1
207   (LOAD&CAR&PUSH 17)
209   (JMPIFEQTO 28 L223)                 ; 0
212   (LOAD&PUSH 17)
213   (CALL1 29)                          ; RATINVERT
215   (STORE 17)
217   (GETVALUE&PUSH 0)                   ; B
219   (CALL1 29)                          ; RATINVERT
221   (SETVALUE 0)                        ; B
223   L223
223   (GETVALUE 0)                        ; B
225   (CDR&PUSH)
226   (JMPIFEQTO 27 L250)                 ; 1
229   (LOAD&PUSH 17)
230   (GETVALUE 0)                        ; B
232   (CDR&PUSH)
233   (CONST 27)                          ; 1
235   (CONS&PUSH)
236   (T&PUSH)
237   (CALL 3 30)                         ; RATTIMES
240   (STORE 17)
242   (GETVALUE 0)                        ; B
244   (CAR&PUSH)
245   (CONST 27)                          ; 1
247   (CONS)
248   (SETVALUE 0)                        ; B
250   L250
250   (GETVALUE 0)                        ; B
252   (CAR&PUSH)
253   (CONST&PUSH 31)                     ; (0 1)
255   (CALL2&JMPIF 32 L426)               ; ZL-MEMBER
259   (CONST&PUSH 33)                     ; MRAT
261   (CONST&PUSH 34)                     ; SIMP
263   (GETVALUE&PUSH 1)                   ; VARLIST
265   (GETVALUE&PUSH 3)                   ; GENVAR
267   (LIST&PUSH 4)
269   (LOAD&CDR&PUSH 18)
271   (JMPIFEQTO 27 L442)                 ; 1
275   (LOAD&PUSH 18)
276   (GETVALUE&PUSH 0)                   ; B
278   (LOAD&PUSH 18)
279   (CALL 3 37)                         ; ALLSUBST00
282   (CONS)
283   L283
283   (STORE 15)
285   (LOAD&PUSH 7)
286   (GETVALUE&PUSH 1)                   ; VARLIST
288   (CALL2&JMPIFNOT 38 L468)            ; ALIKE
292   (LOAD&JMPIF 6 L489)
296   L296
296   (LOAD&PUSH 15)
297   (CALL1 18)                          ; $RATDISREP
299   L299
299   (UNBIND 2)
301   (SKIP 2)
303   (UNBIND 2)
305   (SKIP&RET 4)
307   L307
307   (T&STORE 6)
309   (GETVALUE 5)                        ; $RADSUBSTFLAG
311   (JMPIFNOT L107)
314   (JMP L24)
317   L317
317   (LOAD&PUSH 17)
318   (GETVALUE&PUSH 0)                   ; B
320   (LOAD&PUSH 17)
321   (CALL&PUSH 3 19)                    ; MAXIMA-SUBSTITUTE
324   (CALL1 20)                          ; RATF
326   (STORE 15)
328   (LOAD&JMPIFNOT 6 L296)
331   (LOAD 15)
333   (JMP L299)
335   L335
335   (NIL&PUSH)
336   (GETVALUE&PUSH 1)                   ; VARLIST
338   (JMP L411)
341   L341
341   (LOAD 0)
342   (JMP L404)
344   L344
344   (LOAD&CAR&PUSH 0)
346   (LOAD 0)
347   (JMPIFATOM L341)
349   (LOAD&CAR&PUSH 0)
351   (NIL&PUSH)
352   (LOAD&CDR&PUSH 2)
354   (JMP L390)
356   L356
356   (LOAD 24)
358   (JMP L383)
360   L360
360   (LOAD 0)
361   (JMP L383)
363   L363
363   (LOAD&CAR&PUSH 0)
365   (LOAD&PUSH 0)
366   (GETVALUE&PUSH 0)                   ; B
368   (CALL2&JMPIF 22 L356)               ; ALIKE1
371   (LOAD 0)
372   (JMPIFATOM L360)
374   (LOAD&PUSH 24)
375   (GETVALUE&PUSH 0)                   ; B
377   (LOAD&PUSH 2)
378   (JSR&PUSH L0)
381   (CALL1 18)                          ; $RATDISREP
383   L383
383   (PUSH)
384   (LOAD&CONS&STORE 2)
386   (SKIP 1)
388   (LOAD&CDR&STORE 0)
390   L390
390   (LOAD&PUSH 0)
391   (CALLS1&JMPIFNOT 146 L363)          ; ENDP
394   (SKIP 1)
396   (LOAD&PUSH 0)
397   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
399   (SKIP 1)
401   (CONS&PUSH)
402   (CALL1 23)                          ; RESIMPLIFY
404   L404
404   (PUSH)
405   (LOAD&CONS&STORE 2)
407   (SKIP 1)
409   (LOAD&CDR&STORE 0)
411   L411
411   (LOAD&PUSH 0)
412   (CALLS1&JMPIFNOT 146 L344)          ; ENDP
416   (SKIP 1)
418   (LOAD&PUSH 0)
419   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
421   (SKIP 1)
423   (JMP L139)
426   L426
426   (LOAD&PUSH 17)
427   (CALL1&PUSH 17)                     ; RDIS
429   (GETVALUE&PUSH 0)                   ; B
431   (LOAD&PUSH 17)
432   (CALL1&PUSH 17)                     ; RDIS
434   (CALL&PUSH 3 19)                    ; MAXIMA-SUBSTITUTE
437   (CALL1 20)                          ; RATF
439   (JMP L283)
442   L442
442   (LOAD&CAR&PUSH 18)
444   (GETVALUE 0)                        ; B
446   (CAR&PUSH)
447   (LOAD&CAR&PUSH 18)
449   (CALL&PUSH 3 35)                    ; EVERYSUBST0
452   (LOAD&CAR&PUSH 19)
454   (GETVALUE 0)                        ; B
456   (CAR&PUSH)
457   (LOAD&CDR&PUSH 19)
459   (CALL&PUSH 3 35)                    ; EVERYSUBST0
462   (CALL2 36)                          ; RATREDUCE
464   (CONS)
465   (JMP L283)
468   L468
468   (LOAD 7)
469   (SETVALUE 1)                        ; VARLIST
471   (LOAD&CDR&PUSH 15)
473   (CALL1 17)                          ; RDIS
475   (STORE 15)
477   (NIL)
478   (SETVALUE 1)                        ; VARLIST
480   (LOAD&PUSH 15)
481   (CALL1 20)                          ; RATF
483   (STORE 15)
485   (LOAD&JMPIFNOT 6 L296)
489   L489
489   (LOAD 15)
491   (JMP L299)


Disassembly of function #:|(DEFUN XPTIMES (X Y) ...)-21|
(CONST 0) = XPTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE XPTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; XPTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; XPTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE XPTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; XPTIMES
8     (SKIP&RET 1)


Disassembly of function XPTIMES
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $RATWTLVL
(CONST 3) = 0
(CONST 4) = WTPTIMES
(CONST 5) = PTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X $RATWTLVL)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 2)                        ; $RATWTLVL
8     (JMPIF L20)
10    (GETVALUE&PUSH 0)                   ; X
12    (GETVALUE&PUSH 1)                   ; Y
14    (CALL2 5)                           ; PTIMES
16    L16
16    (UNBIND 2)
18    (SKIP&RET 3)
20    L20
20    (GETVALUE&PUSH 0)                   ; X
22    (GETVALUE&PUSH 1)                   ; Y
24    (CONST&PUSH 3)                      ; 0
25    (CALL 3 4)                          ; WTPTIMES
28    (JMP L16)


Disassembly of function #:|(DEFUN ALLSUBST00 (A B C) ...)-22|
(CONST 0) = ALLSUBST00
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALLSUBST00>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALLSUBST00
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALLSUBST00
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALLSUBST00>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALLSUBST00
8     (SKIP&RET 1)


Disassembly of function ALLSUBST00
(CONST 0) = B
(CONST 1) = EVERYSUBST00
(CONST 2) = RATQUOTIENT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
22 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (LOAD&PUSH 6)
4     (GETVALUE&PUSH 0)                   ; B
6     (CALLS2&JMPIF 2 L32)                ; EQUAL
9     (LOAD&PUSH 6)
10    (GETVALUE 0)                        ; B
12    (CAR&PUSH)
13    (LOAD&CAR&PUSH 6)
15    (CALL&PUSH 3 1)                     ; EVERYSUBST00
18    (LOAD&PUSH 7)
19    (GETVALUE 0)                        ; B
21    (CAR&PUSH)
22    (LOAD&CDR&PUSH 7)
24    (CALL&PUSH 3 1)                     ; EVERYSUBST00
27    (CALL2 2)                           ; RATQUOTIENT
29    L29
29    (UNBIND1)
30    (SKIP&RET 4)
32    L32
32    (LOAD 4)
33    (JMP L29)


Disassembly of function #:|(DEFUN EVERYSUBST00 (X I Z) ...)-23|
(CONST 0) = EVERYSUBST00
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVERYSUBST00>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVERYSUBST00
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVERYSUBST00
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVERYSUBST00>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVERYSUBST00
8     (SKIP&RET 1)


Disassembly of function EVERYSUBST00
(CONST 0) = X
(CONST 1) = (0 . 1)
(CONST 2) = *ALPHA
(CONST 3) = EVERYSUBST
(CONST 4) = 1
(CONST 5) = RATEXPT
(CONST 6) = RATTIMES
(CONST 7) = RATPLUS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X *ALPHA)
36 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; (0 . 1)
4     (PUSH-NIL 2)
6     (LOAD&PUSH 8)
7     (LOAD&PUSH 8)
8     (GETVALUE&PUSH 2)                   ; *ALPHA
10    (CALL&PUSH 3 3)                     ; EVERYSUBST
13    (LOAD&JMPIFNOT 0 L46)
16    L16
16    (LOAD&CAR&STORE 0 2)
19    (LOAD 0)
20    (CDR)
21    (CAR)
22    (STORE 1)
23    (LOAD&PUSH 3)
24    (LOAD&PUSH 2)
25    (CONST 4)                           ; 1
26    (CONS&PUSH)
27    (GETVALUE&PUSH 0)                   ; X
29    (LOAD&PUSH 5)
30    (CALL2&PUSH 5)                      ; RATEXPT
32    (T&PUSH)
33    (CALL&PUSH 3 6)                     ; RATTIMES
36    (CALL2 7)                           ; RATPLUS
38    (STORE 3)
39    (LOAD 0)
40    (CDR)
41    (CDR)
42    (STORE 0)
43    (LOAD&JMPIF 0 L16)
46    L46
46    (LOAD 3)
47    (SKIP 4)
49    (UNBIND1)
50    (SKIP&RET 4)


Disassembly of function #:|(DEFUN EVERYSUBST0 (X I Z) ...)-24|
(CONST 0) = EVERYSUBST0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVERYSUBST0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVERYSUBST0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVERYSUBST0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVERYSUBST0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVERYSUBST0
8     (SKIP&RET 1)


Disassembly of function EVERYSUBST0
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = *ALPHA
(CONST 3) = EVERYSUBST
(CONST 4) = PEXPT
(CONST 5) = XPTIMES
(CONST 6) = PPLUS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X *ALPHA)
33 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 0
4     (PUSH-NIL 2)
6     (LOAD&PUSH 8)
7     (LOAD&PUSH 8)
8     (GETVALUE&PUSH 2)                   ; *ALPHA
10    (CALL&PUSH 3 3)                     ; EVERYSUBST
13    (LOAD&JMPIFNOT 0 L42)
16    L16
16    (LOAD&CAR&STORE 0 2)
19    (LOAD 0)
20    (CDR)
21    (CAR)
22    (STORE 1)
23    (LOAD&PUSH 3)
24    (LOAD&PUSH 2)
25    (GETVALUE&PUSH 0)                   ; X
27    (LOAD&PUSH 5)
28    (CALL2&PUSH 4)                      ; PEXPT
30    (CALL2&PUSH 5)                      ; XPTIMES
32    (CALL2 6)                           ; PPLUS
34    (STORE 3)
35    (LOAD 0)
36    (CDR)
37    (CDR)
38    (STORE 0)
39    (LOAD&JMPIF 0 L16)
42    L42
42    (LOAD 3)
43    (SKIP 4)
45    (UNBIND1)
46    (SKIP&RET 4)


Disassembly of function #:|(DEFUN EVERYSUBST1 (A B MAXPOW) ...)-25|
(CONST 0) = EVERYSUBST1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVERYSUBST1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVERYSUBST1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVERYSUBST1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVERYSUBST1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVERYSUBST1
8     (SKIP&RET 1)


Disassembly of function EVERYSUBST1
(CONST 0) = B
(CONST 1) = EVERYSUBST
(CONST 2) = 0
(CONST 3) = 1
(CONST 4) = EVERYSUBST2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
60 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (PUSH-NIL 2)
5     (GETVALUE 0)                        ; B
7     (CDR&PUSH)
8     (PUSH-NIL 4)
10    (LOAD&JMPIFNOT 4 L65)
13    L13
13    (LOAD&CAR&STORE 4 6)
16    (LOAD 4)
17    (CDR)
18    (CAR)
19    (STORE 5)
20    (LOAD&PUSH 13)
21    (LOAD&PUSH 6)
22    (LOAD&PUSH 13)
23    (CALL&PUSH 3 1)                     ; EVERYSUBST
26    (LOAD 0)
27    (STORE 4)
28    (SKIP 1)
30    (CONST&PUSH 2)                      ; 0
31    (LOAD&PUSH 7)
32    (CALLSR&JMPIF 1 45 L71)             ; =
36    (LOAD&PUSH 3)
37    (GETVALUE 0)                        ; B
39    (CAR&PUSH)
40    (LOAD&PUSH 8)
41    (CONST&PUSH 3)                      ; 1
42    (LIST&PUSH 3)
44    (CALL2 4)                           ; EVERYSUBST2
46    L46
46    (STORE 0)
47    (LOAD&JMPIF 1 L74)
50    (LOAD 0)
51    (STORE 2)
52    L52
52    (PUSH)
53    (PUSH-UNBOUND 1)
55    (CALLS1&STORE 156 1)                ; LAST
58    L58
58    (LOAD 4)
59    (CDR)
60    (CDR)
61    (STORE 4)
62    (LOAD&JMPIF 4 L13)
65    L65
65    (LOAD 2)
66    (SKIP 7)
68    (UNBIND1)
69    (SKIP&RET 4)
71    L71
71    (LOAD 3)
72    (JMP L46)
74    L74
74    (PUSH)
75    (LOAD&PUSH 1)
76    (CALLS1&JMPIFNOT 171 L58)           ; SYSTEM::%RPLACD
79    (LOAD 1)
80    (CDR)
81    (JMP L52)


Disassembly of function #:|(DEFUN EVERYSUBST2 (L H) ...)-26|
(CONST 0) = EVERYSUBST2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVERYSUBST2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVERYSUBST2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVERYSUBST2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVERYSUBST2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVERYSUBST2
8     (SKIP&RET 1)


Disassembly of function EVERYSUBST2
(CONST 0) = L
(CONST 1) = PTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (LOAD&JMPIFNOT 0 L28)
8     L8
8     (LOAD&PUSH 5)
9     (LOAD 1)
10    (CDR)
11    (CAR&PUSH)
12    (CALL2&PUSH 1)                      ; PTIMES
14    (LOAD&CDR&PUSH 1)
16    (LOAD&PUSH 1)
17    (CALLS1 169)                        ; SYSTEM::%RPLACA
19    (SKIP 1)
21    (LOAD 0)
22    (CDR)
23    (CDR)
24    (STORE 0)
25    (LOAD&JMPIF 0 L8)
28    L28
28    (GETVALUE 0)                        ; L
30    (SKIP 1)
32    (UNBIND1)
33    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PAIROFF (L M) ...)-27|
(CONST 0) = PAIROFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PAIROFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PAIROFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PAIROFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PAIROFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PAIROFF
8     (SKIP&RET 1)


Disassembly of function PAIROFF
(CONST 0) = L
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
16 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD&JMPIFNOT 4 L19)
6     (LOAD&CAR&PUSH 4)
8     (GETVALUE 0)                        ; L
10    (CDR&PUSH)
11    (LOAD&CDR&PUSH 6)
13    (JSR L0)
15    (CONS)
16    L16
16    (UNBIND1)
17    (SKIP&RET 3)
19    L19
19    (GETVALUE 0)                        ; L
21    (JMP L16)


Disassembly of function #:|(DEFUN EVERYSUBST (A B MAXPOW) ...)-28|
(CONST 0) = EVERYSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVERYSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVERYSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVERYSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVERYSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVERYSUBST
8     (SKIP&RET 1)


Disassembly of function EVERYSUBST
(CONST 0) = B
(CONST 1) = 1
(CONST 2) = 0
(CONST 3) = QUOT
(CONST 4) = EVERYSUBST1
(CONST 5) = EVERYPTERMS
(CONST 6) = SUBSTFORSUM
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
writes special variable : (B)
105 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (LOAD 6)
4     (JMPIFATOM L45)
6     (GETVALUE 0)                        ; B
8     (JMPIFATOM L33)
10    (LOAD&CAR&PUSH 6)
12    (GETVALUE 0)                        ; B
14    (CAR)
15    (BIND 0)                            ; B
17    (LOAD&PUSH 3)
18    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
20    (GETVALUE&PUSH 0)                   ; B
22    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
24    (CALLSR 1 48)                       ; >
27    (UNBIND1)
28    (SKIP 1)
30    (JMPIFNOT L140)
33    L33
33    (CONST 2)                           ; 0
34    L34
34    (PUSH)
35    (GETVALUE&PUSH 0)                   ; B
37    (LIST 2)
39    (JMP L154)
42    L42
42    (LOAD 4)
43    (JMP L34)
45    L45
45    (LOAD&PUSH 6)
46    (JMPIFEQTO 1 L42)                   ; 1
49    (GETVALUE 0)                        ; B
51    (JMPIFCONSP L147)
54    (GETVALUE 0)                        ; B
56    (BIND 0)                            ; B
58    (CONST&PUSH 2)                      ; 0
59    (JMP L70)
61    L61
61    (GETVALUE&PUSH 0)                   ; B
63    (LOAD&PUSH 11)
64    (CALL2 3)                           ; QUOT
66    (SETVALUE 0)                        ; B
68    (LOAD&INC&STORE 0)
70    L70
70    (LOAD&PUSH 10)
71    (CALLS2&PUSH 158)                   ; ABS
73    (GETVALUE&PUSH 0)                   ; B
75    (CALLS2&PUSH 158)                   ; ABS
77    (CALLSR&JMPIF 1 48 L86)             ; >
81    (LOAD&PUSH 8)
82    (LOAD&PUSH 1)
83    (CALLS2&JMPIFNOT 2 L61)             ; EQUAL
86    L86
86    (POP)
87    (UNBIND1)
88    (STORE 4)
89    (PUSH)
90    (GETVALUE&PUSH 0)                   ; B
92    (LOAD&PUSH 8)
93    (LOAD&PUSH 7)
94    (CALLS2&STORE 154 6)                ; EXPT
97    (PUSH)
98    (CALL2&PUSH 3)                      ; QUOT
100   (CONST&PUSH 2)                      ; 0
101   (GETVALUE&PUSH 0)                   ; B
103   (LOAD&PUSH 8)
104   (CALLS2&PUSH 184)                   ; REM
106   (LIST 4)
108   (JMP L154)
110   L110
110   (GETVALUE&PUSH 0)                   ; B
112   (LOAD 7)
113   (CDR)
114   (CDR)
115   (CAR&PUSH)
116   (LOAD 8)
117   (CDR)
118   (CAR&PUSH)
119   (LOAD&PUSH 7)
120   (CALL 4 5)                          ; EVERYPTERMS
123   (JMP L154)
125   L125
125   (LOAD 6)
126   (CDR)
127   (CDR)
128   (CDR)
129   (JMPIFNOT L110)
131   (LOAD&PUSH 6)
132   (GETVALUE&PUSH 0)                   ; B
134   (LOAD&PUSH 6)
135   (CALL 3 6)                          ; SUBSTFORSUM
138   (JMP L154)
140   L140
140   (LOAD&CAR&PUSH 6)
142   (GETVALUE 0)                        ; B
144   (CAR)
145   (JMPIFEQ L125)
147   L147
147   (LOAD&PUSH 6)
148   (GETVALUE&PUSH 0)                   ; B
150   (LOAD&PUSH 6)
151   (CALL 3 4)                          ; EVERYSUBST1
154   L154
154   (UNBIND1)
155   (SKIP&RET 4)


Disassembly of function #:|(DEFUN EVERYPTERMS (X P N ...) ...)-29|
(CONST 0) = EVERYPTERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVERYPTERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVERYPTERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVERYPTERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVERYPTERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVERYPTERMS
8     (SKIP&RET 1)


Disassembly of function EVERYPTERMS
(CONST 0) = X
(CONST 1) = P
(CONST 2) = 0
(CONST 3) = K
(CONST 4) = QUOT
(CONST 5) = PSIMP
(CONST 6) = EVERYSUBST
(CONST 7) = EVERYPTERMS1
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K P X)
writes special variables : (X K)
75 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; X
3     (LOAD 6)
4     (BIND 1)                            ; P
6     (GETVALUE 0)                        ; X
8     (CDR)
9     (CAR&PUSH)
10    (LOAD&PUSH 9)
11    (CALLSR&JMPIF 1 47 L43)             ; <
15    (NIL)
16    (BIND 3)                            ; K
18    (PUSH-NIL 3)
20    (GETVALUE 0)                        ; X
22    (CAR)
23    (SETVALUE 3)                        ; K
25    (GETVALUE 0)                        ; X
27    (CDR)
28    (SETVALUE 0)                        ; X
30    L30
30    (LOAD&PUSH 13)
31    (GETVALUE 0)                        ; X
33    (CAR&PUSH)
34    (LOAD&PUSH 16)
35    (CALL2&PUSH 4)                      ; QUOT
37    (CALLSR&STORE 1 52 1)               ; MIN
41    (JMP L89)
43    L43
43    (CONST&PUSH 2)                      ; 0
44    (GETVALUE&PUSH 0)                   ; X
46    (LIST 2)
48    (JMP L110)
50    L50
50    (LOAD 2)
51    (JMP L107)
53    L53
53    (GETVALUE&PUSH 1)                   ; P
55    (GETVALUE 0)                        ; X
57    (CDR)
58    (CAR&PUSH)
59    (LOAD&PUSH 3)
60    (CALL 3 6)                          ; EVERYSUBST
63    (STORE 0)
64    (PUSH)
65    (GETVALUE&PUSH 3)                   ; K
67    (LOAD&PUSH 16)
68    (GETVALUE 0)                        ; X
70    (CAR&PUSH)
71    (CALL&PUSH 4 7)                     ; EVERYPTERMS1
74    (LOAD&PUSH 3)
75    (CALLSR&STORE 2 35 2)               ; NCONC
79    (GETVALUE 0)                        ; X
81    (CDR)
82    (CDR)
83    (SETVALUE 0)                        ; X
85    (JMPIF L30)
87    (CONST 2)                           ; 0
88    (STORE 1)
89    L89
89    (LOAD&PUSH 1)
90    (JMPIFNOTEQTO 2 L53)                ; 0
93    (GETVALUE 0)                        ; X
95    (JMPIFNOT L50)
97    (CONST&PUSH 2)                      ; 0
98    (GETVALUE&PUSH 3)                   ; K
100   (GETVALUE&PUSH 0)                   ; X
102   (CALL2&PUSH 5)                      ; PSIMP
104   (LOAD 4)
105   (CONS)
106   (CONS)
107   L107
107   (SKIP 3)
109   (UNBIND1)
110   L110
110   (UNBIND 2)
112   (SKIP&RET 5)


Disassembly of function #:|(DEFUN EVERYPTERMS1 (L K N ...) ...)-30|
(CONST 0) = EVERYPTERMS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVERYPTERMS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVERYPTERMS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVERYPTERMS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVERYPTERMS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVERYPTERMS1
8     (SKIP&RET 1)


Disassembly of function EVERYPTERMS1
(CONST 0) = L
(CONST 1) = K
(CONST 2) = 1
(CONST 3) = PSIMP
(CONST 4) = PTIMES
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K L)
34 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; L
3     (LOAD 6)
4     (BIND 1)                            ; K
6     (GETVALUE&PUSH 0)                   ; L
8     (LOAD&JMPIFNOT 0 L47)
11    L11
11    (GETVALUE&PUSH 1)                   ; K
13    (LOAD&PUSH 9)
14    (LOAD&PUSH 11)
15    (LOAD&CAR&PUSH 3)
17    (CALLSR&PUSH 2 55)                  ; *
20    (CALLSR&PUSH 1 54)                  ; -
23    (CONST&PUSH 2)                      ; 1
24    (LIST&PUSH 2)
26    (CALL2&PUSH 3)                      ; PSIMP
28    (LOAD 1)
29    (CDR)
30    (CAR&PUSH)
31    (CALL2&PUSH 4)                      ; PTIMES
33    (LOAD&CDR&PUSH 1)
35    (LOAD&PUSH 1)
36    (CALLS1 169)                        ; SYSTEM::%RPLACA
38    (SKIP 1)
40    (LOAD 0)
41    (CDR)
42    (CDR)
43    (STORE 0)
44    (LOAD&JMPIF 0 L11)
47    L47
47    (GETVALUE 0)                        ; L
49    (SKIP 1)
51    (UNBIND 2)
53    (SKIP&RET 5)


Disassembly of function #:|(DEFUN SUBSTFORSUM (A B MAXPOW) ...)-31|
(CONST 0) = SUBSTFORSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBSTFORSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBSTFORSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBSTFORSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBSTFORSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBSTFORSUM
8     (SKIP&RET 1)


Disassembly of function SUBSTFORSUM
(CONST 0) = B
(CONST 1) = 0
(CONST 2) = PDIVIDE
(CONST 3) = 1
(CONST 4) = X
(CONST 5) = FIXNUMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X B)
writes special variable : (B)
94 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (CONST&PUSH 1)                      ; 0
4     (PUSH-NIL 3)
6     L6
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 9)
8     (CALLSR&JMPIFNOT 1 47 L125)         ; <
13    (GETVALUE&PUSH 0)                   ; B
15    (LOAD&PUSH 11)
16    (CALL2 2)                           ; PDIVIDE
18    (STORE 1)
19    (CAR)
20    (STORE 2)
21    (LOAD 1)
22    (CDR)
23    (CAR)
24    (STORE 1)
25    (LOAD&CDR&PUSH 2)
27    (JMPIFNOTEQTO 3 L60)                ; 1
30    (LOAD 2)
31    (CAR)
32    (BIND 4)                            ; X
34    (GETVALUE&PUSH 4)                   ; X
36    (CALL1&JMPIF 5 L48)                 ; FIXNUMP
39    (GETVALUE 4)                        ; X
41    (JMPIFCONSP L70)
43    (GETVALUE&PUSH 4)                   ; X
45    (CALLS2&JMPIFNOT 15 L57)            ; FLOATP
48    L48
48    (GETVALUE&PUSH 4)                   ; X
50    (CALLS2 145)                        ; ZEROP
52    (UNBIND1)
53    (JMPIFNOT L71)
55    (JMP L60)
57    L57
57    (UNBIND1)
58    (JMPIFNOT L71)
60    L60
60    (LOAD&PUSH 3)
61    (GETVALUE&PUSH 0)                   ; B
63    (LOAD 2)
64    (CONS)
65    (CONS)
66    (SKIP 4)
68    (JMP L133)
70    L70
70    (UNBIND1)
71    L71
71    (LOAD&CDR&PUSH 1)
73    (JMPIFNOTEQTO 3 L60)                ; 1
76    (LOAD 1)
77    (CAR)
78    (BIND 4)                            ; X
80    (GETVALUE&PUSH 4)                   ; X
82    (CALL1&JMPIF 5 L94)                 ; FIXNUMP
85    (GETVALUE 4)                        ; X
87    (JMPIFCONSP L108)
89    (GETVALUE&PUSH 4)                   ; X
91    (CALLS2&JMPIFNOT 15 L103)           ; FLOATP
94    L94
94    (GETVALUE&PUSH 4)                   ; X
96    (CALLS2 145)                        ; ZEROP
98    (UNBIND1)
99    (JMPIFNOT L109)
101   (JMP L116)
103   L103
103   (UNBIND1)
104   (JMPIFNOT L109)
106   (JMP L116)
108   L108
108   (UNBIND1)
109   L109
109   (LOAD&PUSH 3)
110   (LOAD&CAR&PUSH 2)
112   (LOAD 2)
113   (CONS)
114   (CONS)
115   (STORE 0)
116   L116
116   (LOAD 2)
117   (CAR)
118   (SETVALUE 0)                        ; B
120   (LOAD&INC&STORE 3)
122   (JMP L6)
125   L125
125   (LOAD&PUSH 8)
126   (GETVALUE&PUSH 0)                   ; B
128   (LOAD 2)
129   (LIST* 2)
131   (SKIP 4)
133   L133
133   (UNBIND1)
134   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PRODCOEF (A B) ...)-32|
(CONST 0) = PRODCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRODCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRODCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRODCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRODCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRODCOEF
8     (SKIP&RET 1)


Disassembly of function PRODCOEF
(CONST 0) = B
(CONST 1) = QUOT
(CONST 2) = PRODCOEF1
(CONST 3) = 0
(CONST 4) = PTERM
(CONST 5) = SUMCOEF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
66 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (LOAD 5)
4     (JMPIFATOM L47)
6     (GETVALUE 0)                        ; B
8     (JMPIFATOM L58)
10    (LOAD&CAR&PUSH 5)
12    (GETVALUE 0)                        ; B
14    (CAR)
15    (BIND 0)                            ; B
17    (LOAD&PUSH 3)
18    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
20    (GETVALUE&PUSH 0)                   ; B
22    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
24    (CALLSR 1 48)                       ; >
27    (UNBIND1)
28    (SKIP 1)
30    (JMPIF L61)
32    (LOAD&CAR&PUSH 5)
34    (GETVALUE 0)                        ; B
36    (CAR)
37    (JMPIFEQ L81)
39    L39
39    (LOAD&PUSH 5)
40    (GETVALUE&PUSH 0)                   ; B
42    (CALL2 2)                           ; PRODCOEF1
44    L44
44    (UNBIND1)
45    (SKIP&RET 3)
47    L47
47    (GETVALUE 0)                        ; B
49    (JMPIFCONSP L39)
51    (GETVALUE&PUSH 0)                   ; B
53    (LOAD&PUSH 6)
54    (CALL2 1)                           ; QUOT
56    (JMP L44)
58    L58
58    (CONST 3)                           ; 0
59    (JMP L44)
61    L61
61    (CONST 3)                           ; 0
62    (JMP L44)
64    L64
64    (LOAD 5)
65    (CDR)
66    (CDR)
67    (CAR&PUSH)
68    (GETVALUE 0)                        ; B
70    (CDR&PUSH)
71    (LOAD 7)
72    (CDR)
73    (CAR&PUSH)
74    (CALL2&PUSH 4)                      ; PTERM
76    (JSR L0)
79    (JMP L44)
81    L81
81    (LOAD 5)
82    (CDR)
83    (CDR)
84    (CDR)
85    (JMPIFNOT L64)
87    (LOAD&PUSH 5)
88    (GETVALUE&PUSH 0)                   ; B
90    (CALL2 5)                           ; SUMCOEF
92    (JMP L44)


Disassembly of function #:|(DEFUN SUMCOEF (A B) ...)-33|
(CONST 0) = SUMCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUMCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUMCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUMCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUMCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUMCOEF
8     (SKIP&RET 1)


Disassembly of function SUMCOEF
(CONST 0) = B
(CONST 1) = PDIVIDE
(CONST 2) = 1
(CONST 3) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
writes special variable : (B)
26 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (GETVALUE&PUSH 0)                   ; B
5     (LOAD&PUSH 6)
6     (CALL2 1)                           ; PDIVIDE
8     (SETVALUE 0)                        ; B
10    (CAR)
11    (STORE 5)
12    (GETVALUE 0)                        ; B
14    (CDR)
15    (CAR)
16    (SETVALUE 0)                        ; B
18    (LOAD&CDR&PUSH 5)
20    (JMPIFNOTEQTO 2 L29)                ; 1
23    (GETVALUE 0)                        ; B
25    (CDR&PUSH)
26    (JMPIFEQTO 2 L33)                   ; 1
29    L29
29    (CONST 3)                           ; 0
30    L30
30    (UNBIND1)
31    (SKIP&RET 3)
33    L33
33    (LOAD 5)
34    (CAR)
35    (JMP L30)


Disassembly of function #:|(DEFUN PRODCOEF1 (A B) ...)-34|
(CONST 0) = PRODCOEF1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRODCOEF1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRODCOEF1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRODCOEF1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRODCOEF1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRODCOEF1
8     (SKIP&RET 1)


Disassembly of function PRODCOEF1
(CONST 0) = B
(CONST 1) = 0
(CONST 2) = PRODCOEF
(CONST 3) = X
(CONST 4) = FIXNUMP
(CONST 5) = PSIMP
(CONST 6) = PPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X B)
60 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (CONST&PUSH 1)                      ; 0
4     (PUSH-NIL 2)
6     (GETVALUE 0)                        ; B
8     (CDR&PUSH)
9     (NIL&PUSH)
10    (LOAD&JMPIFNOT 1 L81)
14    L14
14    (LOAD&CAR&STORE 1 3)
17    (LOAD 1)
18    (CDR)
19    (CAR)
20    (STORE 2)
21    (LOAD&PUSH 10)
22    (LOAD&PUSH 3)
23    (CALL2&PUSH 2)                      ; PRODCOEF
25    (LOAD 0)
26    (STORE 1)
27    (SKIP 1)
29    (BIND 3)                            ; X
31    (GETVALUE&PUSH 3)                   ; X
33    (CALL1&JMPIF 4 L45)                 ; FIXNUMP
36    (GETVALUE 3)                        ; X
38    (JMPIFCONSP L59)
40    (GETVALUE&PUSH 3)                   ; X
42    (CALLS2&JMPIFNOT 15 L54)            ; FLOATP
45    L45
45    (GETVALUE&PUSH 3)                   ; X
47    (CALLS2 145)                        ; ZEROP
49    (UNBIND1)
50    (JMPIFNOT L60)
52    (JMP L73)
54    L54
54    (UNBIND1)
55    (JMPIFNOT L60)
57    (JMP L73)
59    L59
59    (UNBIND1)
60    L60
60    (LOAD&PUSH 4)
61    (GETVALUE 0)                        ; B
63    (CAR&PUSH)
64    (LOAD&PUSH 5)
65    (LOAD&PUSH 3)
66    (LIST&PUSH 2)
68    (CALL2&PUSH 5)                      ; PSIMP
70    (CALL2 6)                           ; PPLUS
72    (STORE 4)
73    L73
73    (LOAD 1)
74    (CDR)
75    (CDR)
76    (STORE 1)
77    (LOAD&JMPIF 1 L14)
81    L81
81    (LOAD 4)
82    (SKIP 5)
84    (UNBIND1)
85    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PUREPROD (X) ...)-35|
(CONST 0) = PUREPROD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PUREPROD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PUREPROD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PUREPROD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PUREPROD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PUREPROD
8     (SKIP&RET 1)


Disassembly of function PUREPROD
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
24 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 5)                          ; ATOM
7     (JMPIF1 L31)
9     (GETVALUE 0)                        ; X
11    (CDR&PUSH)
12    (CALLS2 4)                          ; CONSP
14    (JMPIFNOT1 L31)
16    (GETVALUE 0)                        ; X
18    (CDR)
19    (CDR)
20    (CDR)
21    (NOT)
22    (JMPIFNOT1 L31)
24    (GETVALUE 0)                        ; X
26    (CDR)
27    (CDR)
28    (CAR&PUSH)
29    (JSR L0)
31    L31
31    (UNBIND1)
32    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $BOTHCOEF (R VAR) ...)-36|
(CONST 0) = $BOTHCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BOTHCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BOTHCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BOTHCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BOTHCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BOTHCOEF
8     (SKIP&RET 1)


Disassembly of function $BOTHCOEF
(CONST 0) = VAR
(CONST 1) = *VAR
(CONST 2) = VARLIST
(CONST 3) = GENVAR
(CONST 4) = $RATFAC
(CONST 5) = $RATP
(CONST 6) = (MLIST)
(CONST 7) = 1
(CONST 8) = COEFF
(CONST 9) = (MPLUS)
(CONST 10) = (MTIMES)
(CONST 11) = -1
(CONST 12) = NEWVAR
(CONST 13) = RATREP*
(CONST 14) = B
(CONST 15) = BOTHPRODCOEF
(CONST 16) = (MLIST)
(CONST 17) = RATREDUCE
(CONST 18) = RDIS*
(CONST 19) = "Bad arguments to BOTHCOEFF"
(CONST 20) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B VARLIST VAR)
writes special variable : (VAR)
109 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (NIL)
4     (BIND 1)                            ; *VAR
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; VARLIST
10    (NIL)
11    (BIND 3)                            ; GENVAR
13    (NIL)
14    (BIND 4)                            ; $RATFAC
16    (LOAD&PUSH 18)
17    (CALL1&JMPIFNOT 5 L126)             ; $RATP
21    (GETVALUE&PUSH 0)                   ; VAR
23    (CALL1 12)                          ; NEWVAR
25    (GETVALUE 2)                        ; VARLIST
27    (JMPIFNOT L30)
29    (CAR)
30    L30
30    (STORE 9)
32    (LOAD&PUSH 18)
33    (CALL1 12)                          ; NEWVAR
35    (GETVALUE&PUSH 0)                   ; VAR
37    (CALL1 13)                          ; RATREP*
39    (CDR)
40    (SETVALUE 0)                        ; VAR
42    (LOAD&PUSH 18)
43    (CALL1 13)                          ; RATREP*
45    (CDR)
46    (STORE 18)
48    (LOAD&JMPIF 9 L150)
52    (LOAD&JMPIFNOT 9 L162)
56    L56
56    (LOAD 18)
58    (CDR)
59    (JMPIFATOM L81)
61    (LOAD 18)
63    (CDR)
64    (CAR)
65    (BIND 14)                           ; B
67    (LOAD&PUSH 12)
68    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
70    (GETVALUE&PUSH 14)                  ; B
72    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
74    (CALLSR 1 48)                       ; >
77    (UNBIND1)
78    (JMPIFNOT L162)
81    L81
81    (GETVALUE 0)                        ; VAR
83    (CDR&PUSH)
84    (JMPIFNOTEQTO 7 L162)               ; 1
88    (GETVALUE 0)                        ; VAR
90    (CAR&PUSH)
91    (LOAD&CAR&PUSH 19)
93    (CALL2 15)                          ; BOTHPRODCOEF
95    (SETVALUE 0)                        ; VAR
97    (CONST&PUSH 16)                     ; (MLIST)
98    (GETVALUE 0)                        ; VAR
100   (CAR&PUSH)
101   (LOAD&CDR&PUSH 20)
103   (CALL2&PUSH 17)                     ; RATREDUCE
105   (CALL1&PUSH 18)                     ; RDIS*
107   (GETVALUE 0)                        ; VAR
109   (CDR&PUSH)
110   (LOAD&CDR&PUSH 21)
112   (CALL2&PUSH 17)                     ; RATREDUCE
114   (CALL1 18)                          ; RDIS*
116   L116
116   (PUSH)
117   (LIST 3)
119   (UNBIND 3)
121   (SKIP 1)
123   (UNBIND1)
124   (JMP L171)
126   L126
126   (CONST&PUSH 6)                      ; (MLIST)
127   (LOAD&PUSH 19)
128   (GETVALUE&PUSH 0)                   ; VAR
130   (CONST&PUSH 7)                      ; 1
131   (CALL 3 8)                          ; COEFF
134   (STORE 10)
136   (PUSH)
137   (CONST&PUSH 9)                      ; (MPLUS)
138   (LOAD&PUSH 21)
139   (CONST&PUSH 10)                     ; (MTIMES)
140   (CONST&PUSH 11)                     ; -1
141   (LOAD&PUSH 15)
142   (GETVALUE&PUSH 0)                   ; VAR
144   (LIST&PUSH 4)
146   (LIST 3)
148   (JMP L116)
150   L150
150   (PUSH)
151   (CALL1 13)                          ; RATREP*
153   (CDR)
154   (CAR)
155   (CAR)
156   (STORE 9)
158   (LOAD&JMPIF 9 L56)
162   L162
162   (CONST&PUSH 19)                     ; "Bad arguments to BOTHCOEFF"
163   (CALL1 20)                          ; MERROR
165   (NIL)
166   (UNBIND 3)
168   (SKIP 1)
170   (UNBIND1)
171   L171
171   (UNBIND1)
172   (SKIP&RET 3)


Disassembly of function #:|(DEFUN BOTHPRODCOEF (A B) ...)-37|
(CONST 0) = BOTHPRODCOEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BOTHPRODCOEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BOTHPRODCOEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BOTHPRODCOEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BOTHPRODCOEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BOTHPRODCOEF
8     (SKIP&RET 1)


Disassembly of function BOTHPRODCOEF
(CONST 0) = B
(CONST 1) = PRODCOEF
(CONST 2) = X
(CONST 3) = FIXNUMP
(CONST 4) = 0
(CONST 5) = PTIMES
(CONST 6) = PDIFFERENCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X B)
40 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; B
6     (CALL2&PUSH 1)                      ; PRODCOEF
8     (LOAD 0)
9     (BIND 2)                            ; X
11    (GETVALUE&PUSH 2)                   ; X
13    (CALL1&JMPIF 3 L25)                 ; FIXNUMP
16    (GETVALUE 2)                        ; X
18    (JMPIFCONSP L42)
20    (GETVALUE&PUSH 2)                   ; X
22    (CALLS2&JMPIFNOT 15 L34)            ; FLOATP
25    L25
25    (GETVALUE&PUSH 2)                   ; X
27    (CALLS2 145)                        ; ZEROP
29    (UNBIND1)
30    (JMPIFNOT L43)
32    (JMP L37)
34    L34
34    (UNBIND1)
35    (JMPIFNOT L43)
37    L37
37    (CONST&PUSH 4)                      ; 0
38    (GETVALUE 0)                        ; B
40    (JMP L52)
42    L42
42    (UNBIND1)
43    L43
43    (LOAD&PUSH 0)
44    (GETVALUE&PUSH 0)                   ; B
46    (LOAD&PUSH 2)
47    (LOAD&PUSH 9)
48    (CALL2&PUSH 5)                      ; PTIMES
50    (CALL2 6)                           ; PDIFFERENCE
52    L52
52    (CONS)
53    (SKIP 1)
55    (UNBIND1)
56    (SKIP&RET 3)


Disassembly of function #:|(DEFVAR ARGSFREEOFP NIL)-38|
(CONST 0) = (SPECIAL ARGSFREEOFP)
(CONST 1) = ARGSFREEOFP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ARGSFREEOFP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ARGSFREEOFP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ARGSFREEOFP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; ARGSFREEOFP
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN ARGSFREEOF (VAR E) ...)-39|
(CONST 0) = ARGSFREEOF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARGSFREEOF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARGSFREEOF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARGSFREEOF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARGSFREEOF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARGSFREEOF
8     (SKIP&RET 1)


Disassembly of function ARGSFREEOF
(CONST 0) = VAR
(CONST 1) = ARGSFREEOFP
(CONST 2) = FREEOF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (T)
4     (BIND 1)                            ; ARGSFREEOFP
6     (GETVALUE&PUSH 0)                   ; VAR
8     (LOAD&PUSH 8)
9     (CALL2 2)                           ; FREEOF
11    (UNBIND 2)
13    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $FREEOF NARGS ...)-40|
(CONST 0) = $FREEOF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FREEOF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FREEOF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FREEOF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FREEOF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FREEOF
8     (SKIP&RET 1)


Disassembly of function $FREEOF
(CONST 0) = L
(CONST 1) = $TOTALDISREP
(CONST 2) = LISTIFY1
(CONST 3) = GETOPR
(CONST 4) = FREEOF
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
32 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; L
6     (NIL&PUSH)
7     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; $TOTALDISREP
9     (LOAD&PUSH 5)
10    (LOAD&PUSH 8)
11    (CALL2&PUSH 2)                      ; LISTIFY1
13    (CALLS2&PUSH 73)                    ; NREVERSE
15    (CALLSR 0 22)                       ; MAPCAR
18    (SETVALUE 0)                        ; L
20    (CAR)
21    (STORE 0)
22    L22
22    (GETVALUE 0)                        ; L
24    (CDR)
25    (SETVALUE 0)                        ; L
27    (JMPIFNOT L44)
29    (GETVALUE 0)                        ; L
31    (CAR&PUSH)
32    (CALL1&PUSH 3)                      ; GETOPR
34    (LOAD&PUSH 1)
35    (CALL2&JMPIF 4 L22)                 ; FREEOF
38    (NIL)
39    L39
39    (SKIP 1)
41    (UNBIND1)
42    (SKIP&RET 3)
44    L44
44    (T)
45    (JMP L39)


Disassembly of function #:|(DEFUN FREEOF (VAR E) ...)-41|
(CONST 0) = FREEOF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEOF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEOF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEOF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEOF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEOF
8     (SKIP&RET 1)


Disassembly of function FREEOF
(CONST 0) = VAR
(CONST 1) = ALIKE1
(CONST 2) = ARGSFREEOFP
(CONST 3) = (%PRODUCT %SUM %LAPLACE)
(CONST 4) = MEMQ
(CONST 5) = %INTEGRATE
(CONST 6) = %LIMIT
(CONST 7) = FREEOFL
(CONST 8) = %AT
(CONST 9) = R
(CONST 10) = HAND-SIDE
(CONST 11) = L
(CONST 12) = LAMBDA
(CONST 13) = MARGS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARGSFREEOFP VAR)
126 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (LOAD&PUSH 5)
6     (CALL2&JMPIF 1 L103)                ; ALIKE1
10    (LOAD 4)
11    (JMPIFATOM L106)
14    (GETVALUE 2)                        ; ARGSFREEOFP
16    (JMPIF L27)
18    (GETVALUE&PUSH 0)                   ; VAR
20    (LOAD 5)
21    (CAR)
22    (CAR&PUSH)
23    (CALL2&JMPIF 1 L109)                ; ALIKE1
27    L27
27    (LOAD 4)
28    (CAR)
29    (CAR&PUSH)
30    (CONST&PUSH 3)                      ; (%PRODUCT %SUM %LAPLACE)
31    (CALL2&JMPIF 4 L57)                 ; MEMQ
34    (LOAD 4)
35    (CAR)
36    (CAR&PUSH)
37    (JMPIFNOTEQTO 5 L46)                ; %INTEGRATE
40    (LOAD 4)
41    (CDR)
42    (CDR)
43    (CDR)
44    (JMPIF L57)
46    L46
46    (LOAD 4)
47    (CAR)
48    (CAR&PUSH)
49    (JMPIFNOTEQTO 6 L66)                ; %LIMIT
52    (LOAD 4)
53    (CDR)
54    (CDR)
55    (JMPIFNOT L66)
57    L57
57    (GETVALUE&PUSH 0)                   ; VAR
59    (LOAD 5)
60    (CDR)
61    (CDR)
62    (CAR&PUSH)
63    (CALL2&JMPIF 1 L112)                ; ALIKE1
66    L66
66    (LOAD 4)
67    (CAR)
68    (CAR&PUSH)
69    (JMPIFEQTO 8 L126)                  ; %AT
72    (LOAD 4)
73    (CAR)
74    (CAR&PUSH)
75    (JMPIFNOTEQTO 12 L88)               ; LAMBDA
78    (GETVALUE&PUSH 0)                   ; VAR
80    (LOAD 5)
81    (CDR)
82    (CAR)
83    (CDR&PUSH)
84    (CALL2&JMPIF 4 L160)                ; MEMQ
88    L88
88    (GETVALUE 2)                        ; ARGSFREEOFP
90    (JMPIF L163)
93    (GETVALUE&PUSH 0)                   ; VAR
95    (LOAD 5)
96    (CDR)
97    L97
97    (PUSH)
98    (CALL2 7)                           ; FREEOFL
100   L100
100   (UNBIND1)
101   (SKIP&RET 3)
103   L103
103   (NIL)
104   (JMP L100)
106   L106
106   (T)
107   (JMP L100)
109   L109
109   (NIL)
110   (JMP L100)
112   L112
112   (GETVALUE&PUSH 0)                   ; VAR
114   (LOAD 5)
115   (CDR)
116   (CDR)
117   (CDR)
118   (JMP L97)
120   L120
120   (NIL)
121   (JMP L100)
123   L123
123   (T)
124   (JMP L100)
126   L126
126   (GETVALUE&PUSH 0)                   ; VAR
128   (LOAD 5)
129   (CDR)
130   (CDR)
131   (CAR&PUSH)
132   (CONST&PUSH 9)                      ; R
133   (CALL2&PUSH 10)                     ; HAND-SIDE
135   (CALL2&JMPIFNOT 7 L120)             ; FREEOFL
138   (GETVALUE&PUSH 0)                   ; VAR
140   (LOAD 5)
141   (CDR)
142   (CDR)
143   (CAR&PUSH)
144   (CONST&PUSH 11)                     ; L
145   (CALL2&PUSH 10)                     ; HAND-SIDE
147   (CALL2&JMPIFNOT 7 L123)             ; FREEOFL
150   (GETVALUE&PUSH 0)                   ; VAR
152   (LOAD 5)
153   (CDR)
154   (CAR&PUSH)
155   (JSR L0)
158   (JMP L100)
160   L160
160   (T)
161   (JMP L100)
163   L163
163   (GETVALUE&PUSH 0)                   ; VAR
165   (LOAD&PUSH 5)
166   (CALL1 13)                          ; MARGS
168   (JMP L97)


Disassembly of function #:|(DEFUN FREEOFL (VAR L) ...)-42|
(CONST 0) = FREEOFL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEOFL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEOFL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEOFL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEOFL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEOFL
8     (SKIP&RET 1)


Disassembly of function FREEOFL
(CONST 0) = VAR
(CONST 1) = L
(CONST 2) = X
(CONST 3) = FREEOF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X VAR L)
writes special variable : (X)
30 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (NIL)
7     (BIND 2)                            ; X
9     (GETVALUE&PUSH 1)                   ; L
11    (NIL&PUSH)
12    (LOAD&JMPIFNOT 1 L36)
15    L15
15    (LOAD&CAR&PUSH 1)
17    (LOAD 0)
18    (SETVALUE 2)                        ; X
20    (SKIP 1)
22    (GETVALUE&PUSH 0)                   ; VAR
24    (GETVALUE&PUSH 2)                   ; X
26    (CALL2 3)                           ; FREEOF
28    (STORE 0)
29    (JMPIFNOT L43)
31    (LOAD&CDR&STORE 1)
33    (LOAD&JMPIF 1 L15)
36    L36
36    (T)
37    L37
37    (SKIP 2)
39    (UNBIND 3)
41    (SKIP&RET 3)
43    L43
43    (NIL)
44    (JMP L37)


Disassembly of function #:|(DEFMFUN HAND-SIDE (E FLAG) ...)-43|
(CONST 0) = HAND-SIDE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HAND-SIDE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HAND-SIDE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HAND-SIDE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HAND-SIDE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HAND-SIDE
8     (SKIP&RET 1)


Disassembly of function HAND-SIDE
(CONST 0) = FLAG
(CONST 1) = MEQUAL
(CONST 2) = L
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FLAG)
42 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FLAG
3     (LOAD 5)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L16)                   ; MEQUAL
9     (LOAD 5)
10    (CDR)
11    L11
11    (STORE 5)
12    (NIL&PUSH)
13    (LOAD&PUSH 6)
14    (JMP L41)
16    L16
16    (LOAD&PUSH 5)
17    (NIL)
18    (CONS)
19    (JMP L11)
21    L21
21    (LOAD 0)
22    (JMP L33)
24    L24
24    (LOAD&CAR&PUSH 0)
26    (GETVALUE&PUSH 0)                   ; FLAG
28    (JMPIFEQTO 2 L21)                   ; L
31    (LOAD 0)
32    (CDR)
33    L33
33    (CDR)
34    (CAR&PUSH)
35    (LOAD&CONS&STORE 2)
37    (SKIP 1)
39    (LOAD&CDR&STORE 0)
41    L41
41    (LOAD&PUSH 0)
42    (CALLS1&JMPIFNOT 146 L24)           ; ENDP
45    (SKIP 1)
47    (LOAD&PUSH 0)
48    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
50    (SKIP 1)
52    (UNBIND1)
53    (SKIP&RET 3)


Disassembly of function #:|(COMMENT SUBTITLE RADCAN)-44|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $RADCAN (EXP) ...)-45|
(CONST 0) = $RADCAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RADCAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RADCAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RADCAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RADCAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RADCAN
8     (SKIP&RET 1)


Disassembly of function $RADCAN
(CONST 0) = MBAGP
(CONST 1) = $RADCAN
(CONST 2) = $RATSIMPEXPONS
(CONST 3) = 0
(CONST 4) = $EXPOP
(CONST 5) = $EXPON
(CONST 6) = FR1
(CONST 7) = RADCAN1
(CONST 8) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L27)                 ; MBAGP
4     (T)
5     (BIND 2)                            ; $RATSIMPEXPONS
7     (CONST 3)                           ; 0
8     (BIND 4)                            ; $EXPOP
10    (CONST 3)                           ; 0
11    (BIND 5)                            ; $EXPON
13    (LOAD&PUSH 10)
14    (NIL&PUSH)
15    (CALL2&PUSH 6)                      ; FR1
17    (CALL1 7)                           ; RADCAN1
19    (UNBIND 2)
21    (PUSH)
22    (CALL1 8)                           ; SIMPLIFY
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (LOAD&CAR&PUSH 1)
29    (CONST&PUSH 1)                      ; $RADCAN
30    (LOAD&CDR&PUSH 3)
32    (CALLSR 0 22)                       ; MAPCAR
35    (CONS)
36    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RADCAN1 (*EXP) ...)-46|
(CONST 0) = RADCAN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RADCAN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RADCAN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RADCAN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RADCAN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RADCAN1
8     (SKIP&RET 1)


Disassembly of function RADCAN1
(CONST 0) = *EXP
(CONST 1) = $GCD
(CONST 2) = *GCDL*
(CONST 3) = RADCANP
(CONST 4) = $FACTORFLAG
(CONST 5) = VARLIST
(CONST 6) = GENVAR
(CONST 7) = $RATFAC
(CONST 8) = $NOREPEAT
(CONST 9) = NEWVAR
(CONST 10) = RATREP*
(CONST 11) = X
(CONST 12) = RADCAN1
(CONST 13) = SPC0
(CONST 14) = RDIS
(CONST 15) = FR1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X VARLIST *GCDL* $GCD *EXP)
writes special variables : (VARLIST *EXP)
76 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; *EXP
3     (GETVALUE 0)                        ; *EXP
5     (JMPIFATOM L55)
7     (T&PUSH)
8     (PUSH-NIL 4)
10    (GETVALUE 1)                        ; $GCD
12    (JMPIF L17)
14    (GETVALUE 2)                        ; *GCDL*
16    (CAR)
17    L17
17    (BIND 1)                            ; $GCD
19    (T)
20    (BIND 3)                            ; RADCANP
22    (LOAD 10)
23    (BIND 4)                            ; $FACTORFLAG
25    (LOAD 12)
26    (BIND 5)                            ; VARLIST
28    (LOAD 14)
29    (BIND 6)                            ; GENVAR
31    (LOAD 16)
33    (BIND 7)                            ; $RATFAC
35    (LOAD 18)
37    (BIND 8)                            ; $NOREPEAT
39    (GETVALUE&PUSH 0)                   ; *EXP
41    (CALL1 9)                           ; NEWVAR
43    (GETVALUE&PUSH 0)                   ; *EXP
45    (CALL1 10)                          ; RATREP*
47    (CDR)
48    (SETVALUE 0)                        ; *EXP
50    (NIL&PUSH)
51    (GETVALUE&PUSH 5)                   ; VARLIST
53    (JMP L91)
55    L55
55    (GETVALUE 0)                        ; *EXP
57    (JMP L117)
59    L59
59    (GETVALUE 11)                       ; X
61    (JMP L83)
63    L63
63    (LOAD&CAR&PUSH 0)
65    (LOAD 0)
66    (BIND 11)                           ; X
68    (GETVALUE 11)                       ; X
70    (JMPIFATOM L59)
72    (GETVALUE 11)                       ; X
74    (CAR&PUSH)
75    (CONST&PUSH 12)                     ; RADCAN1
76    (GETVALUE 11)                       ; X
78    (CDR&PUSH)
79    (CALLSR 0 22)                       ; MAPCAR
82    (CONS)
83    L83
83    (UNBIND1)
84    (PUSH)
85    (LOAD&CONS&STORE 2)
87    (SKIP 1)
89    (LOAD&CDR&STORE 0)
91    L91
91    (LOAD&PUSH 0)
92    (CALLS1&JMPIFNOT 146 L63)           ; ENDP
95    (SKIP 1)
97    (LOAD&PUSH 0)
98    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
100   (SKIP 1)
102   (SETVALUE 5)                        ; VARLIST
104   (CALL0 13)                          ; SPC0
106   (GETVALUE&PUSH 0)                   ; *EXP
108   (CALL1&PUSH 14)                     ; RDIS
110   (NIL&PUSH)
111   (CALL2 15)                          ; FR1
113   (UNBIND 7)
115   (SKIP 5)
117   L117
117   (UNBIND1)
118   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SPC0 NIL ...)-47|
(CONST 0) = SPC0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC0
8     (SKIP&RET 1)


Disassembly of function SPC0
(CONST 0) = *V
(CONST 1) = *LOGLIST
(CONST 2) = VARLIST
(CONST 3) = ALLATOMS
(CONST 4) = SPC1
(CONST 5) = FACTORLOGS
(CONST 6) = SPC2
(CONST 7) = SPC3
(CONST 8) = GENVAR
(CONST 9) = SPC4
(CONST 10) = SPC5
(CONST 11) = RJFSIMP
(CONST 12) = SPC7
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*V GENVAR *LOGLIST VARLIST)
writes special variables : (GENVAR *LOGLIST VARLIST)
44 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; *V
3     (NIL)
4     (BIND 1)                            ; *LOGLIST
6     (GETVALUE&PUSH 2)                   ; VARLIST
8     (CALL1&JMPIF 3 L85)                 ; ALLATOMS
12    (CONST&SYMBOL-FUNCTION&PUSH 4)      ; SPC1
14    (GETVALUE&PUSH 2)                   ; VARLIST
16    (CALLSR 0 22)                       ; MAPCAR
19    (SETVALUE 2)                        ; VARLIST
21    (GETVALUE&PUSH 1)                   ; *LOGLIST
23    (CALL1 5)                           ; FACTORLOGS
25    (SETVALUE 1)                        ; *LOGLIST
27    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; SPC2
29    (GETVALUE&PUSH 1)                   ; *LOGLIST
31    (CALLSR 0 24)                       ; MAPC
34    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; SPC3
36    (GETVALUE&PUSH 2)                   ; VARLIST
38    (GETVALUE&PUSH 8)                   ; GENVAR
40    (CALLSR 1 24)                       ; MAPC
43    (CONST&SYMBOL-FUNCTION&PUSH 9)      ; SPC4
45    (GETVALUE&PUSH 2)                   ; VARLIST
47    (CALLSR 0 24)                       ; MAPC
50    (GETVALUE&PUSH 0)                   ; *V
52    (GETVALUE&PUSH 2)                   ; VARLIST
54    (GETVALUE&PUSH 8)                   ; GENVAR
56    (CALL 3 10)                         ; SPC5
59    (SETVALUE 8)                        ; GENVAR
61    (CAR)
62    (SETVALUE 2)                        ; VARLIST
64    (GETVALUE 8)                        ; GENVAR
66    (CDR)
67    (SETVALUE 8)                        ; GENVAR
69    (CONST&SYMBOL-FUNCTION&PUSH 11)     ; RJFSIMP
71    (GETVALUE&PUSH 2)                   ; VARLIST
73    (CALLSR 0 22)                       ; MAPCAR
76    (SETVALUE 2)                        ; VARLIST
78    (CONST&SYMBOL-FUNCTION&PUSH 12)     ; SPC7
80    (GETVALUE&PUSH 2)                   ; VARLIST
82    (CALLSR 0 24)                       ; MAPC
85    L85
85    (NIL)
86    (UNBIND 2)
88    (SKIP&RET 1)


Disassembly of function #:|(DEFUN ALLATOMS (L) ...)-48|
(CONST 0) = ALLATOMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALLATOMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALLATOMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALLATOMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALLATOMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALLATOMS
8     (SKIP&RET 1)


Disassembly of function ALLATOMS
(CONST 0) = L
(CONST 1) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (X)
26 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; X
6     (GETVALUE&PUSH 0)                   ; L
8     (NIL&PUSH)
9     (LOAD&JMPIFNOT 1 L30)
12    L12
12    (LOAD&CAR&PUSH 1)
14    (LOAD 0)
15    (SETVALUE 1)                        ; X
17    (SKIP 1)
19    (PUSH)
20    (CALLS2&STORE 5 0)                  ; ATOM
23    (JMPIFNOT L37)
25    (LOAD&CDR&STORE 1)
27    (LOAD&JMPIF 1 L12)
30    L30
30    (T)
31    L31
31    (SKIP 2)
33    (UNBIND 2)
35    (SKIP&RET 2)
37    L37
37    (NIL)
38    (JMP L31)


Disassembly of function #:|(DEFUN RJFSIMP (X &AUX EXPON) ...)-49|
(CONST 0) = RJFSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RJFSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RJFSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RJFSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RJFSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RJFSIMP
8     (SKIP&RET 1)


Disassembly of function RJFSIMP
(CONST 0) = X
(CONST 1) = *RADSUBST
(CONST 2) = $RADSUBSTFLAG
(CONST 3) = $LOGSIMP
(CONST 4) = RESIMPLIFY
(CONST 5) = M$EXP?
(CONST 6) = MLOGP
(CONST 7) = MTIMESP
(CONST 8) = *VAR
(CONST 9) = FREEOF
(CONST 10) = (MEXPT)
(CONST 11) = 1
(CONST 12) = ZL-REMOVE
(CONST 13) = MULN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*VAR $LOGSIMP X $RADSUBSTFLAG *RADSUBST)
writes special variable : (X)
93 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE 1)                        ; *RADSUBST
6     (JMPIFNOT L13)
8     (GETVALUE 2)                        ; $RADSUBSTFLAG
10    (JMPIF L101)
13    L13
13    (NIL)
14    (BIND 3)                            ; $LOGSIMP
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1 4)                           ; RESIMPLIFY
20    (UNBIND1)
21    (SETVALUE 0)                        ; X
23    (PUSH)
24    (CALL1&JMPIFNOT 5 L105)             ; M$EXP?
28    (GETVALUE 0)                        ; X
30    (CDR)
31    (CDR)
32    (CAR)
33    (STORE 0)
34    (PUSH)
35    (CALL1&JMPIF 6 L109)                ; MLOGP
39    (LOAD&PUSH 0)
40    (CALL1&JMPIFNOT 7 L114)             ; MTIMESP
44    (GETVALUE 3)                        ; $LOGSIMP
46    (JMPIF L52)
48    (GETVALUE 8)                        ; *VAR
50    (JMPIFNOT L114)
52    L52
52    (GETVALUE 8)                        ; *VAR
54    (JMPIFNOT L68)
56    (GETVALUE 3)                        ; $LOGSIMP
58    (NOT)
59    (JMPIFNOT L68)
61    (GETVALUE&PUSH 8)                   ; *VAR
63    (GETVALUE&PUSH 0)                   ; X
65    (CALL2 9)                           ; FREEOF
67    (NOT)
68    L68
68    (PUSH)
69    (LOAD&CDR&PUSH 1)
71    (LOAD&JMPIFNOT 0 L92)
74    L74
74    (LOAD&CAR&PUSH 0)
76    (CALLS2&JMPIF 8 L87)                ; NUMBERP
79    (LOAD&CAR&PUSH 0)
81    (CALL1&JMPIF 6 L118)                ; MLOGP
84    (LOAD&JMPIF 1 L92)
87    L87
87    (LOAD&CDR&STORE 0)
89    (LOAD&JMPIF 0 L74)
92    L92
92    (GETVALUE 0)                        ; X
94    (SKIP 2)
96    L96
96    (SKIP 1)
98    (UNBIND1)
99    (SKIP&RET 2)
101   L101
101   (GETVALUE 0)                        ; X
103   (JMP L96)
105   L105
105   (GETVALUE 0)                        ; X
107   (JMP L96)
109   L109
109   (LOAD 0)
110   (CDR)
111   (CAR)
112   (JMP L96)
114   L114
114   (GETVALUE 0)                        ; X
116   (JMP L96)
118   L118
118   (LOAD&JMPIFNOT 1 L125)
121   (LOAD 0)
122   (CDR)
123   (JMPIF L92)
125   L125
125   (CONST&PUSH 10)                     ; (MEXPT)
126   (LOAD 1)
127   (CAR)
128   (CDR)
129   (CAR&PUSH)
130   (LOAD&CAR&PUSH 2)
132   (LOAD&CDR&PUSH 5)
134   (CONST&PUSH 11)                     ; 1
135   (CALL&PUSH 3 12)                    ; ZL-REMOVE
138   (NIL&PUSH)
139   (CALL2&PUSH 13)                     ; MULN
141   (LIST 3)
143   (SKIP 2)
145   (JMP L96)


Disassembly of function #:|(DEFUN DSUBSTA (X Y ZL) ...)-50|
(CONST 0) = DSUBSTA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DSUBSTA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DSUBSTA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DSUBSTA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DSUBSTA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DSUBSTA
8     (SKIP&RET 1)


Disassembly of function DSUBSTA
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ALIKE1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
35 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD&JMPIFNOT 7 L42)
9     (GETVALUE&PUSH 1)                   ; Y
11    (LOAD&CAR&PUSH 8)
13    (CALL2&JMPIF 2 L45)                 ; ALIKE1
16    (LOAD 7)
17    (CAR)
18    (JMPIFATOM L29)
20    (GETVALUE&PUSH 0)                   ; X
22    (GETVALUE&PUSH 1)                   ; Y
24    (LOAD 9)
25    (CAR)
26    (CDR&PUSH)
27    (JSR L0)
29    L29
29    (GETVALUE&PUSH 0)                   ; X
31    (GETVALUE&PUSH 1)                   ; Y
33    (LOAD&CDR&PUSH 9)
35    (JSR L0)
37    (LOAD 7)
38    L38
38    (UNBIND 2)
40    (SKIP&RET 4)
42    L42
42    (LOAD 7)
43    (JMP L38)
45    L45
45    (LOAD&PUSH 7)
46    (GETVALUE&PUSH 0)                   ; X
48    (CALLS1 168)                        ; RPLACA
50    (JMP L29)


Disassembly of function #:|(DEFUN RADSUBST (A B) ...)-51|
(CONST 0) = RADSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RADSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RADSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RADSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RADSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RADSUBST
8     (SKIP&RET 1)


Disassembly of function RADSUBST
(CONST 0) = B
(CONST 1) = *EXP
(CONST 2) = ALLSUBST00
(CONST 3) = *RADSUBST
(CONST 4) = *EXP2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*EXP2 *RADSUBST *EXP B)
writes special variables : (*EXP2 *EXP)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; B
6     (GETVALUE&PUSH 1)                   ; *EXP
8     (CALL 3 2)                          ; ALLSUBST00
11    (SETVALUE 1)                        ; *EXP
13    (GETVALUE 3)                        ; *RADSUBST
15    (JMPIFNOT1 L27)
17    (LOAD&PUSH 5)
18    (GETVALUE&PUSH 0)                   ; B
20    (GETVALUE&PUSH 4)                   ; *EXP2
22    (CALL 3 2)                          ; ALLSUBST00
25    (SETVALUE 4)                        ; *EXP2
27    L27
27    (UNBIND1)
28    (SKIP&RET 3)


Disassembly of function #:|(SETQ *VAR NIL)-52|
(CONST 0) = *VAR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*VAR)
3 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; *VAR
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN SPC1 (X) ...)-53|
(CONST 0) = SPC1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC1
8     (SKIP&RET 1)


Disassembly of function SPC1
(CONST 0) = X
(CONST 1) = MLOGP
(CONST 2) = PUTONLOGLIST
(CONST 3) = MEXPTP
(CONST 4) = $%E
(CONST 5) = (MTIMES)
(CONST 6) = (%LOG SIMP RATSIMP)
(CONST 7) = $EXP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L25)                 ; MLOGP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1&JMPIFNOT 3 L20)              ; MEXPTP
13    (GETVALUE 0)                        ; X
15    (CDR)
16    (CAR&PUSH)
17    (JMPIFNOTEQTO 4 L31)                ; $%E
20    L20
20    (GETVALUE 0)                        ; X
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)
25    L25
25    (GETVALUE&PUSH 0)                   ; X
27    (CALL1 2)                           ; PUTONLOGLIST
29    (JMP L22)
31    L31
31    (CONST&PUSH 5)                      ; (MTIMES)
32    (GETVALUE 0)                        ; X
34    (CDR)
35    (CDR)
36    (CAR&PUSH)
37    (CONST&PUSH 6)                      ; (%LOG SIMP RATSIMP)
38    (GETVALUE 0)                        ; X
40    (CDR)
41    (CAR&PUSH)
42    (LIST&PUSH 2)
44    (CALL1&PUSH 2)                      ; PUTONLOGLIST
46    (LIST&PUSH 3)
48    (CALL1 7)                           ; $EXP
50    (JMP L22)


Disassembly of function #:|(DEFUN PUTONLOGLIST (L) ...)-54|
(CONST 0) = PUTONLOGLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PUTONLOGLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PUTONLOGLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PUTONLOGLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PUTONLOGLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PUTONLOGLIST
8     (SKIP&RET 1)


Disassembly of function PUTONLOGLIST
(CONST 0) = L
(CONST 1) = *LOGLIST
(CONST 2) = MEMALIKE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*LOGLIST L)
writes special variable : (*LOGLIST)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (GETVALUE&PUSH 1)                   ; *LOGLIST
7     (CALL2&JMPIFNOT 2 L15)              ; MEMALIKE
10    (GETVALUE 0)                        ; L
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (GETVALUE&PUSH 0)                   ; L
17    (GETVALUE 1)                        ; *LOGLIST
19    (CONS)
20    (SETVALUE 1)                        ; *LOGLIST
22    (GETVALUE 0)                        ; L
24    (JMP L12)


Disassembly of function #:|(DEFUN SPC2 (P) ...)-55|
(CONST 0) = SPC2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC2
8     (SKIP&RET 1)


Disassembly of function SPC2
(CONST 0) = P
(CONST 1) = RFORM
(CONST 2) = RADSUBST
(CONST 3) = VARLIST
(CONST 4) = DSUBSTA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST P)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CDR&PUSH)
6     (CALL1&PUSH 1)                      ; RFORM
8     (GETVALUE 0)                        ; P
10    (CAR&PUSH)
11    (CALL1&PUSH 1)                      ; RFORM
13    (CALL2 2)                           ; RADSUBST
15    (GETVALUE 0)                        ; P
17    (CDR&PUSH)
18    (GETVALUE 0)                        ; P
20    (CAR&PUSH)
21    (GETVALUE&PUSH 3)                   ; VARLIST
23    (CALL 3 4)                          ; DSUBSTA
26    (UNBIND1)
27    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SPC2A (X) ...)-56|
(CONST 0) = SPC2A
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC2A>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC2A
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC2A
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC2A>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC2A
8     (SKIP&RET 1)


Disassembly of function SPC2A
(CONST 0) = X
(CONST 1) = SPC2B
(CONST 2) = (MPLUS)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; SPC2B
5     (GETVALUE&PUSH 0)                   ; X
7     (CALLSR&PUSH 0 22)                  ; MAPCAR
10    (LOAD 0)
11    (CDR)
12    (JMPIF L21)
14    (LOAD 0)
15    (CAR)
16    (SKIP 1)
18    L18
18    (UNBIND1)
19    (SKIP&RET 2)
21    L21
21    (CONST&PUSH 2)                      ; (MPLUS)
22    (LOAD 1)
23    (CONS)
24    (SKIP 1)
26    (JMP L18)


Disassembly of function #:|(DEFUN SPC2B (X) ...)-57|
(CONST 0) = SPC2B
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC2B>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC2B
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC2B
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC2B>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC2B
8     (SKIP&RET 1)


Disassembly of function SPC2B
(CONST 0) = X
(CONST 1) = (%LOG SIMP RATSIMP IRREDUCIBLE)
(CONST 2) = PDIS
(CONST 3) = 1
(CONST 4) = (MTIMES)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; (%LOG SIMP RATSIMP IRREDUCIBLE)
4     (GETVALUE 0)                        ; X
6     (CAR&PUSH)
7     (CALL1&PUSH 2)                      ; PDIS
9     (LIST&PUSH 2)
11    (GETVALUE 0)                        ; X
13    (CDR&PUSH)
14    (JMPIFEQTO 3 L29)                   ; 1
17    (CONST&PUSH 4)                      ; (MTIMES)
18    (GETVALUE 0)                        ; X
20    (CDR&PUSH)
21    (LOAD&PUSH 2)
22    (LIST 3)
24    (SKIP 1)
26    L26
26    (UNBIND1)
27    (SKIP&RET 2)
29    L29
29    (POP)
30    (JMP L26)


Disassembly of function #:|(DEFUN SPC3 (X V &AUX ...) ...)-58|
(CONST 0) = SPC3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC3
8     (SKIP&RET 1)


Disassembly of function SPC3
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = M$EXP?
(CONST 3) = *VAR
(CONST 4) = $PARTFRAC
(CONST 5) = 10
(CONST 6) = EXPAND1
(CONST 7) = MPLUSP
(CONST 8) = (MTIMES)
(CONST 9) = $EXP
(CONST 10) = $RATSIMP
(CONST 11) = RFORM
(CONST 12) = RGET
(CONST 13) = RADSUBST
(CONST 14) = VARLIST
(CONST 15) = DSUBSTA
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST Y *VAR X)
writes special variable : (Y)
66 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; M$EXP?
10    (JMPIFNOT1 L104)
13    (GETVALUE 0)                        ; X
15    (CDR)
16    (CDR)
17    (CAR)
18    (SETVALUE 1)                        ; Y
20    (PUSH)
21    (CALLS2 4)                          ; CONSP
23    (JMPIFNOT1 L104)
26    (GETVALUE 3)                        ; *VAR
28    (JMPIF L52)
30    (GETVALUE 1)                        ; Y
32    L32
32    (PUSH)
33    (CONST&PUSH 5)                      ; 10
34    (CONST&PUSH 5)                      ; 10
35    (CALL 3 6)                          ; EXPAND1
38    (SETVALUE 1)                        ; Y
40    (PUSH)
41    (CALL1 7)                           ; MPLUSP
43    (JMPIFNOT1 L104)
45    (CONST&PUSH 8)                      ; (MTIMES)
46    (NIL&PUSH)
47    (GETVALUE 1)                        ; Y
49    (CDR&PUSH)
50    (JMP L73)
52    L52
52    (GETVALUE&PUSH 1)                   ; Y
54    (GETVALUE&PUSH 3)                   ; *VAR
56    (CALL2 4)                           ; $PARTFRAC
58    (JMP L32)
60    L60
60    (LOAD&CAR&PUSH 0)
62    (LOAD&PUSH 0)
63    (CALL1&PUSH 9)                      ; $EXP
65    (CALL1&PUSH 10)                     ; $RATSIMP
67    (LOAD&CONS&STORE 2)
69    (SKIP 1)
71    (LOAD&CDR&STORE 0)
73    L73
73    (LOAD&PUSH 0)
74    (CALLS1&JMPIFNOT 146 L60)           ; ENDP
77    (SKIP 1)
79    (LOAD&PUSH 0)
80    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
82    (SKIP 1)
84    (CONS)
85    (SETVALUE 1)                        ; Y
87    (PUSH)
88    (CALL1&PUSH 11)                     ; RFORM
90    (LOAD&PUSH 8)
91    (CALL1&PUSH 12)                     ; RGET
93    (CALL2 13)                          ; RADSUBST
95    (GETVALUE&PUSH 1)                   ; Y
97    (GETVALUE&PUSH 0)                   ; X
99    (GETVALUE&PUSH 14)                  ; VARLIST
101   (CALL 3 15)                         ; DSUBSTA
104   L104
104   (UNBIND 2)
106   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SPC4 (X) ...)-59|
(CONST 0) = SPC4
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC4>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC4
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC4
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC4>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC4
8     (SKIP&RET 1)


Disassembly of function SPC4
(CONST 0) = X
(CONST 1) = M$EXP?
(CONST 2) = *V
(CONST 3) = MEMALIKE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*V X)
writes special variable : (*V)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; M$EXP?
7     (JMPIFNOT1 L31)
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CDR)
13    (CAR&PUSH)
14    (GETVALUE&PUSH 2)                   ; *V
16    (CALL2 3)                           ; MEMALIKE
18    (NOT)
19    (JMPIFNOT1 L31)
21    (GETVALUE 0)                        ; X
23    (CDR)
24    (CDR)
25    (CAR&PUSH)
26    (GETVALUE 2)                        ; *V
28    (CONS)
29    (SETVALUE 2)                        ; *V
31    L31
31    (UNBIND1)
32    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RZCONTENT (R) ...)-60|
(CONST 0) = RZCONTENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RZCONTENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RZCONTENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RZCONTENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RZCONTENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RZCONTENT
8     (SKIP&RET 1)


Disassembly of function RZCONTENT
(CONST 0) = PCONTENT
(CONST 1) = P
(CONST 2) = PMINUSP
(CONST 3) = PMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
writes special variable : (P)
37 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&CAR&PUSH 2)
3     (CALL1&PUSH 0)                      ; PCONTENT
5     (NIL&PUSH)
6     (LOAD&CDR&PUSH 4)
8     (CALL1&PUSH 0)                      ; PCONTENT
10    (LOAD 2)
11    (BIND 1)                            ; P
13    (LOAD&CAR&STORE 3 4)
16    (LOAD 3)
17    (CDR)
18    (CAR)
19    (STORE 3)
20    (GETVALUE 1)                        ; P
22    (CAR)
23    (STORE 6)
24    (GETVALUE 1)                        ; P
26    (CDR)
27    (CAR)
28    (SETVALUE 1)                        ; P
30    (PUSH)
31    (CALL1&JMPIFNOT 2 L45)              ; PMINUSP
34    (GETVALUE&PUSH 1)                   ; P
36    (CALL1 3)                           ; PMINUS
38    (SETVALUE 1)                        ; P
40    (LOAD&PUSH 6)
41    (CALLSR&STORE 0 54 6)               ; -
45    L45
45    (LOAD&PUSH 6)
46    (LOAD 5)
47    (CONS&PUSH)
48    (GETVALUE&PUSH 1)                   ; P
50    (LOAD 5)
51    (CONS)
52    (CONS)
53    (UNBIND1)
54    (SKIP&RET 6)


Disassembly of function #:|(DEFUN SPC5 (VL OLDVARLIST OLDGENVAR ...) ...)-61|
(CONST 0) = SPC5
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC5>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC5
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC5
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC5>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC5
8     (SKIP&RET 1)


Disassembly of function SPC5
(CONST 0) = VARLIST
(CONST 1) = GENVAR
(CONST 2) = RFORM
(CONST 3) = RZCONTENT
(CONST 4) = ZL-ASSOC
(CONST 5) = PLCM
(CONST 6) = $EXP
(CONST 7) = RDIS
(CONST 8) = MLOGP
(CONST 9) = MEMALIKE
(CONST 10) = 1
(CONST 11) = DIV
(CONST 12) = SPC5B
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
111 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; VARLIST
4     (NIL)
5     (BIND 1)                            ; GENVAR
7     (LOAD&PUSH 10)
8     (NIL&PUSH)
9     (JMP L83)
12    L12
12    (LOAD&PUSH 2)
13    (LOAD 1)
14    (CDR)
15    (CAR&PUSH)
16    (CALL2&PUSH 5)                      ; PLCM
18    (LOAD&CDR&PUSH 1)
20    (LOAD&PUSH 1)
21    (CALLS1 169)                        ; SYSTEM::%RPLACA
23    (SKIP 1)
25    (LOAD&PUSH 3)
26    (CALL1&PUSH 6)                      ; $EXP
28    (LOAD&PUSH 3)
29    (LIST&PUSH 2)
31    (LOAD 1)
32    (CDR)
33    (CDR&PUSH)
34    (LOAD&CDR&PUSH 2)
36    (LOAD&PUSH 2)
37    (LOAD 2)
38    (CONS&PUSH)
39    (CALLS1 171)                        ; SYSTEM::%RPLACD
41    (SKIP 2)
43    (JMP L79)
45    L45
45    (LOAD&CAR&STORE 1 0)
48    (NIL&PUSH)
49    (LOAD&PUSH 1)
50    (CALL1&PUSH 2)                      ; RFORM
52    (CALL1&PUSH 3)                      ; RZCONTENT
54    (LOAD 0)
55    (CAR)
56    (CDR)
57    (STORE 1)
58    (LOAD&CDR&STORE 0)
60    (PUSH)
61    (LOAD&PUSH 11)
62    (CALL2&PUSH 4)                      ; ZL-ASSOC
64    (LOAD&JMPIF 0 L12)
67    (LOAD&PUSH 1)
68    (LOAD&PUSH 3)
69    (LOAD&PUSH 5)
70    (CALL1&PUSH 6)                      ; $EXP
72    (LOAD&PUSH 5)
73    (LIST&PUSH 2)
75    (LIST&PUSH 3)
77    (LOAD&CONS&STORE 11)
79    L79
79    (SKIP 3)
81    (LOAD&CDR&STORE 1)
83    L83
83    (LOAD&PUSH 1)
84    (CALLS1&JMPIFNOT 146 L45)           ; ENDP
87    (SKIP 2)
89    (LOAD&PUSH 6)
90    (NIL&PUSH)
91    (JMP L143)
93    L93
93    (LOAD&CAR&STORE 1 0)
96    (CAR&PUSH)
97    (CALL1&PUSH 7)                      ; RDIS
99    (LOAD&PUSH 0)
100   (CALL1&JMPIFNOT 8 L128)             ; MLOGP
103   (LOAD 0)
104   (CDR)
105   (CAR&PUSH)
106   (LOAD&PUSH 13)
107   (CALL2&JMPIFNOT 9 L128)             ; MEMALIKE
110   (LOAD 0)
111   (CDR)
112   (CAR&PUSH)
113   (CONST&PUSH 10)                     ; 1
114   (LIST&PUSH 2)
116   (LOAD 2)
117   (CDR)
118   (CDR&PUSH)
119   (LOAD&CDR&PUSH 3)
121   (LOAD&PUSH 2)
122   (LOAD 2)
123   (CONS&PUSH)
124   (CALLS1 171)                        ; SYSTEM::%RPLACD
126   (SKIP 2)
128   L128
128   (LOAD&PUSH 1)
129   (LOAD&PUSH 1)
130   (LOAD 3)
131   (CDR)
132   (CAR&PUSH)
133   (CALL2&PUSH 11)                     ; DIV
135   (CALL1&PUSH 6)                      ; $EXP
137   (CALLS1 168)                        ; RPLACA
139   (SKIP 1)
141   (LOAD&CDR&STORE 1)
143   L143
143   (LOAD&PUSH 1)
144   (CALLS1&JMPIFNOT 146 L93)           ; ENDP
147   (SKIP 2)
149   (LOAD&PUSH 6)
150   (LOAD&PUSH 10)
151   (LOAD&PUSH 10)
152   (CALL 3 12)                         ; SPC5B
155   (UNBIND 2)
157   (SKIP&RET 5)


Disassembly of function #:|(DEFUN SPC5B (V VARLIST GENVAR) ...)-62|
(CONST 0) = SPC5B
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC5B>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC5B
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC5B
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC5B>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC5B
8     (SKIP&RET 1)


Disassembly of function SPC5B
(CONST 0) = VARLIST
(CONST 1) = GENVAR
(CONST 2) = L
(CONST 3) = X
(CONST 4) = RFORM
(CONST 5) = QUOT
(CONST 6) = RATEXPT
(CONST 7) = RADSUBST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR VARLIST X L)
writes special variables : (X L)
61 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VARLIST
3     (LOAD 4)
4     (BIND 1)                            ; GENVAR
6     (LOAD&PUSH 9)
7     (NIL)
8     (BIND 2)                            ; L
10    (JMP L73)
12    L12
12    (LOAD 3)
13    (CAR)
14    (SETVALUE 2)                        ; L
16    (CDR)
17    (CDR&PUSH)
18    (NIL)
19    (BIND 3)                            ; X
21    (JMP L64)
23    L23
23    (LOAD 3)
24    (CAR)
25    (SETVALUE 3)                        ; X
27    (GETVALUE 2)                        ; L
29    (CDR)
30    (CAR&PUSH)
31    (GETVALUE 3)                        ; X
33    (CDR)
34    (CAR&PUSH)
35    (CALLS2&JMPIF 2 L62)                ; EQUAL
38    (GETVALUE 2)                        ; L
40    (CAR&PUSH)
41    (CALL1&PUSH 4)                      ; RFORM
43    (GETVALUE 2)                        ; L
45    (CDR)
46    (CAR&PUSH)
47    (GETVALUE 3)                        ; X
49    (CDR)
50    (CAR&PUSH)
51    (CALL2&PUSH 5)                      ; QUOT
53    (CALL2&PUSH 6)                      ; RATEXPT
55    (GETVALUE 3)                        ; X
57    (CAR&PUSH)
58    (CALL1&PUSH 4)                      ; RFORM
60    (CALL2 7)                           ; RADSUBST
62    L62
62    (LOAD&CDR&STORE 3)
64    L64
64    (LOAD&PUSH 3)
65    (CALLS1&JMPIFNOT 146 L23)           ; ENDP
68    (UNBIND1)
69    (SKIP 1)
71    (LOAD&CDR&STORE 3)
73    L73
73    (LOAD&PUSH 3)
74    (CALLS1&JMPIFNOT 146 L12)           ; ENDP
78    (UNBIND1)
79    (SKIP 1)
81    (GETVALUE&PUSH 0)                   ; VARLIST
83    (GETVALUE 1)                        ; GENVAR
85    (CONS)
86    (UNBIND 2)
88    (SKIP&RET 4)


Disassembly of function #:|(DEFUN SPC7 (X) ...)-63|
(CONST 0) = SPC7
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPC7>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPC7
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPC7
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPC7>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPC7
8     (SKIP&RET 1)


Disassembly of function SPC7
(CONST 0) = X
(CONST 1) = $%I
(CONST 2) = ((MEXPT) -1 ((RAT) 1 2))
(CONST 3) = MEXPTP
(CONST 4) = RATNUMP
(CONST 5) = RFORM
(CONST 6) = RATEXPT
(CONST 7) = RADSUBST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
42 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (JMPIFNOTEQTO 1 L11)                ; $%I
8     (CONST 2)                           ; ((MEXPT) -1 ((RAT) 1 2))
9     (SETVALUE 0)                        ; X
11    L11
11    (GETVALUE&PUSH 0)                   ; X
13    (CALL1 3)                           ; MEXPTP
15    (JMPIFNOT1 L58)
17    (GETVALUE 0)                        ; X
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (CALL1 4)                           ; RATNUMP
24    (JMPIFNOT1 L58)
26    (GETVALUE&PUSH 0)                   ; X
28    (CALL1&PUSH 5)                      ; RFORM
30    (GETVALUE 0)                        ; X
32    (CDR)
33    (CAR&PUSH)
34    (CALL1&PUSH 5)                      ; RFORM
36    (GETVALUE 0)                        ; X
38    (CDR)
39    (CDR)
40    (CAR&PUSH)
41    (LOAD&PUSH 1)
42    (LOAD 1)
43    (CDR)
44    (CAR&PUSH)
45    (CALL2&PUSH 6)                      ; RATEXPT
47    (LOAD&PUSH 3)
48    (LOAD 2)
49    (CDR)
50    (CDR)
51    (CAR&PUSH)
52    (CALL2&PUSH 6)                      ; RATEXPT
54    (CALL2 7)                           ; RADSUBST
56    (SKIP 3)
58    L58
58    (UNBIND1)
59    (SKIP&RET 2)


Disassembly of function #:|(DEFUN GOODFORM (L) ...)-64|
(CONST 0) = GOODFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GOODFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GOODFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GOODFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GOODFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GOODFORM
8     (SKIP&RET 1)


Disassembly of function GOODFORM
(CONST 0) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
42 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 2)
5     (GETVALUE&PUSH 0)                   ; L
7     (PUSH-NIL 3)
9     (LOAD&JMPIFNOT 3 L38)
12    L12
12    (LOAD&CAR&STORE 3 5)
15    (LOAD 3)
16    (CDR)
17    (CAR)
18    (STORE 4)
19    (LOAD&PUSH 5)
20    (LOAD 5)
21    (CONS)
22    (STORE 0)
23    (LOAD&JMPIF 1 L44)
26    (LOAD&PUSH 0)
27    (NIL)
28    (CONS)
29    (STORE 1)
30    (STORE 2)
31    L31
31    (LOAD 3)
32    (CDR)
33    (CDR)
34    (STORE 3)
35    (LOAD&JMPIF 3 L12)
38    L38
38    (LOAD 2)
39    (SKIP 6)
41    (UNBIND1)
42    (SKIP&RET 2)
44    L44
44    (PUSH)
45    (LOAD&PUSH 1)
46    (NIL)
47    (CONS)
48    (STORE 2)
49    (PUSH)
50    (CALLS1 171)                        ; SYSTEM::%RPLACD
52    (JMP L31)


Disassembly of function #:|(DEFUN FACTORLOGS (L) ...)-65|
(CONST 0) = FACTORLOGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTORLOGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTORLOGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTORLOGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTORLOGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTORLOGS
8     (SKIP&RET 1)


Disassembly of function FACTORLOGS
(CONST 0) = L
(CONST 1) = RADCAN1
(CONST 2) = RFORM
(CONST 3) = PFACTOR
(CONST 4) = RATFACT
(CONST 5) = GOODFORM
(CONST 6) = -1
(CONST 7) = FLSORT
(CONST 8) = #.#'CDR
(CONST 9) = ((-1 . 1))
(CONST 10) = ZL-DELETE
(CONST 11) = X
(CONST 12) = SPC2A
(CONST 13) = FLMAXL
(CONST 14) = FLGREAT
(CONST 15) = FLRED
(CONST 16) = FLEVENP
(CONST 17) = PMINUS
(CONST 18) = (-1 . 1)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X L)
writes special variable : (L)
169 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 5)
5     (GETVALUE&PUSH 0)                   ; L
7     (NIL&PUSH)
8     (JMP L51)
10    L10
10    (LOAD&PUSH 0)
11    (LOAD&CONS&STORE 6)
13    (JMP L49)
15    L15
15    (GETVALUE&PUSH 0)                   ; L
17    (LOAD&PUSH 0)
18    (JMP L230)
21    L21
21    (LOAD&CAR&STORE 1 0)
24    (PUSH)
25    (LOAD 1)
26    (CDR)
27    (CAR&PUSH)
28    (CALL1&PUSH 1)                      ; RADCAN1
30    (CALL1&PUSH 2)                      ; RFORM
32    (CONST&SYMBOL-FUNCTION&PUSH 3)      ; PFACTOR
34    (CALL2&PUSH 4)                      ; RATFACT
36    (CALL1 5)                           ; GOODFORM
38    (CONS)
39    (STORE 0)
40    (CDR)
41    (CAR)
42    (CAR&PUSH)
43    (JMPIFEQTO 6 L10)                   ; -1
46    (LOAD&PUSH 0)
47    (LOAD&CONS&STORE 5)
49    L49
49    (LOAD&CDR&STORE 1)
51    L51
51    (LOAD&PUSH 1)
52    (CALLS1&JMPIFNOT 146 L21)           ; ENDP
55    (SKIP 2)
57    (LOAD&PUSH 4)
58    (CALL1 7)                           ; FLSORT
60    (STORE 4)
61    (LOAD&PUSH 3)
62    (CALL1 7)                           ; FLSORT
64    (STORE 3)
65    (LOAD&PUSH 4)
66    (LOAD&PUSH 4)
67    (CALLSR 2 34)                       ; APPEND
70    (SETVALUE 0)                        ; L
72    (CONST&PUSH 8)                      ; #.#'CDR
73    (LOAD&PUSH 5)
74    (CALLSR&STORE 0 22 4)               ; MAPCAR
78    (CONST&PUSH 8)                      ; #.#'CDR
79    (LOAD&PUSH 4)
80    (CALLSR&STORE 0 22 3)               ; MAPCAR
84    L84
84    (CONST&PUSH 9)                      ; ((-1 . 1))
85    (LOAD&PUSH 5)
86    (CALL2 10)                          ; ZL-DELETE
88    (STORE 4)
89    (JMPIFNOT L15)
92    (LOAD&PUSH 4)
93    (CALL1 13)                          ; FLMAXL
95    (STORE 1)
96    (CAR)
97    (CAR)
98    (CAR)
99    (STORE 0)
100   (JMP L164)
102   L102
102   (LOAD&PUSH 1)
103   (JMP L147)
105   L105
105   (LOAD&CDR&PUSH 0)
107   (LOAD&CONS&STORE 5)
109   (SKIP 1)
111   (JMP L145)
113   L113
113   (LOAD&CAR&PUSH 0)
115   (LOAD&CAR&PUSH 0)
117   (LOAD 1)
118   (CAR)
119   (CAR&PUSH)
120   (CALL1&PUSH 17)                     ; PMINUS
122   (CALLS1 168)                        ; RPLACA
124   (LOAD 0)
125   (CAR)
126   (CDR&PUSH)
127   (CALLS2&JMPIFNOT 148 L143)          ; ODDP
130   (CONST&PUSH 18)                     ; (-1 . 1)
131   (LOAD&PUSH 1)
132   (CALL2 10)                          ; ZL-DELETE
134   (LOAD&PUSH 0)
135   (LOAD&PUSH 7)
136   (CALL2 10)                          ; ZL-DELETE
138   (STORE 6)
139   (LOAD 0)
140   (CDR)
141   (JMPIF L105)
143   L143
143   (SKIP 1)
145   L145
145   (LOAD&CDR&STORE 0)
147   L147
147   (LOAD&PUSH 0)
148   (CALLS1&JMPIFNOT 146 L113)          ; ENDP
151   (SKIP 1)
153   (JMP L84)
156   L156
156   (LOAD&PUSH 3)
157   (LOAD 3)
158   (CAR)
159   (CAR)
160   (CAR&PUSH)
161   (CALL2 15)                          ; FLRED
163   (STORE 3)
164   L164
164   (LOAD&PUSH 3)
165   (CALL1 13)                          ; FLMAXL
167   (STORE 2)
168   (JMPIFNOT L177)
170   (CAR)
171   (CAR)
172   (CAR&PUSH)
173   (LOAD&PUSH 1)
174   (CALL2&JMPIF 14 L156)               ; FLGREAT
177   L177
177   (LOAD&JMPIFNOT 2 L189)
180   (CAR)
181   (CAR)
182   (CAR&PUSH)
183   (LOAD&PUSH 1)
184   (CALLS2&JMPIF 2 L189)               ; EQUAL
187   (NIL&STORE 2)
189   L189
189   (LOAD&PUSH 2)
190   (CALL1&JMPIFNOT 16 L198)            ; FLEVENP
193   (LOAD&PUSH 1)
194   (CALL1&JMPIFNOT 16 L102)            ; FLEVENP
198   L198
198   (LOAD&PUSH 3)
199   (LOAD&PUSH 1)
200   (CALL2 15)                          ; FLRED
202   (STORE 3)
203   (LOAD&PUSH 4)
204   (LOAD&PUSH 1)
205   (CALL2 15)                          ; FLRED
207   (STORE 4)
208   (JMP L84)
211   L211
211   (LOAD&CAR&PUSH 0)
213   (LOAD 0)
214   (BIND 11)                           ; X
216   (GETVALUE&PUSH 11)                  ; X
218   (GETVALUE 11)                       ; X
220   (CDR&PUSH)
221   (CALL1&PUSH 12)                     ; SPC2A
223   (CALLS1 170)                        ; RPLACD
225   (UNBIND1)
226   (SKIP 1)
228   (LOAD&CDR&STORE 0)
230   L230
230   (LOAD&PUSH 0)
231   (CALLS1&JMPIFNOT 146 L211)          ; ENDP
234   (SKIP 1)
236   (POP)
237   (SKIP 5)
239   (UNBIND1)
240   (SKIP&RET 2)


Disassembly of function #:|(DEFUN FLEVENP (PL) ...)-66|
(CONST 0) = FLEVENP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FLEVENP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLEVENP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FLEVENP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FLEVENP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FLEVENP
8     (SKIP&RET 1)


Disassembly of function FLEVENP
(CONST 0) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (L)
25 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; L
3     (LOAD&PUSH 4)
4     (NIL&PUSH)
5     (LOAD&JMPIFNOT 1 L27)
8     L8
8     (LOAD&CAR&PUSH 1)
10    (LOAD 0)
11    (SETVALUE 0)                        ; L
13    (SKIP 1)
15    (CAR)
16    (CDR&PUSH)
17    (CALLS2&STORE 148 0)                ; ODDP
20    (JMPIF L33)
22    (LOAD&CDR&STORE 1)
24    (LOAD&JMPIF 1 L8)
27    L27
27    (T)
28    L28
28    (SKIP 2)
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (NIL)
34    (JMP L28)


Disassembly of function #:|(DEFUN FLRED (PL P) ...)-67|
(CONST 0) = FLRED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FLRED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLRED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FLRED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FLRED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FLRED
8     (SKIP&RET 1)


Disassembly of function FLRED
(CONST 0) = P
(CONST 1) = X
(CONST 2) = ZL-DELETE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (LOAD&PUSH 5)
4     (JMP L30)
6     L6
6     (LOAD 0)
7     (BIND 1)                            ; X
9     (GETVALUE&PUSH 0)                   ; P
11    (GETVALUE 1)                        ; X
13    (CAR)
14    (CAR)
15    (CAR&PUSH)
16    (CALLS2&JMPIFNOT 2 L27)             ; EQUAL
19    (GETVALUE&PUSH 1)                   ; X
21    (GETVALUE 1)                        ; X
23    (CAR)
24    (CDR&PUSH)
25    (CALLS1 168)                        ; RPLACA
27    L27
27    (UNBIND1)
28    (LOAD&CDR&STORE 0)
30    L30
30    (LOAD&PUSH 0)
31    (CALLS1&JMPIFNOT 146 L6)            ; ENDP
34    (SKIP 1)
36    (NIL&PUSH)
37    (LOAD&PUSH 6)
38    (CALL2 2)                           ; ZL-DELETE
40    (UNBIND1)
41    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FLMAXL (FPL) ...)-68|
(CONST 0) = FLMAXL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FLMAXL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLMAXL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FLMAXL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FLMAXL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FLMAXL
8     (SKIP&RET 1)


Disassembly of function FLMAXL
(CONST 0) = FLGREAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
45 byte-code instructions:
0     (LOAD&JMPIFNOT 1 L49)
3     (LOAD&CAR&PUSH 1)
5     (LIST&PUSH 1)
7     (LOAD&CDR&PUSH 2)
9     (LOAD&JMPIFNOT 0 L46)
12    L12
12    (LOAD 1)
13    (CAR)
14    (CAR)
15    (CAR&PUSH)
16    (LOAD 1)
17    (CAR)
18    (CAR)
19    (CAR&PUSH)
20    (CALLS2&JMPIF 2 L52)                ; EQUAL
23    (LOAD 1)
24    (CAR)
25    (CAR)
26    (CAR&PUSH)
27    (LOAD 1)
28    (CAR)
29    (CAR)
30    (CAR&PUSH)
31    (CALL2&JMPIF 0 L58)                 ; FLGREAT
34    (LOAD&CAR&PUSH 0)
36    (LIST 1)
38    L38
38    (PUSH)
39    (LOAD&CDR&STORE 1)
41    (POP&STORE 1)
43    (LOAD&JMPIF 0 L12)
46    L46
46    (LOAD 1)
47    (SKIP&RET 4)
49    L49
49    (NIL)
50    (SKIP&RET 2)
52    L52
52    (LOAD&CAR&PUSH 0)
54    (LOAD 2)
55    (CONS)
56    (JMP L38)
58    L58
58    (LOAD 1)
59    (JMP L38)


Disassembly of function #:|(DEFUN FLSORT (FPL) ...)-69|
(CONST 0) = FLSORT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FLSORT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLSORT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FLSORT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FLSORT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FLSORT
8     (SKIP&RET 1)


Disassembly of function FLSORT
(CONST 0) = X
(CONST 1) = FLGREAT
(CONST 2) = SORTCAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (JMP L24)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 0)                            ; X
8     (GETVALUE&PUSH 0)                   ; X
10    (GETVALUE 0)                        ; X
12    (CDR&PUSH)
13    (CONST&SYMBOL-FUNCTION&PUSH 1)      ; FLGREAT
15    (CALL2&PUSH 2)                      ; SORTCAR
17    (CALLS1 170)                        ; RPLACD
19    (UNBIND1)
20    (SKIP 1)
22    (LOAD&CDR&STORE 0)
24    L24
24    (LOAD&PUSH 0)
25    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
28    (SKIP 1)
30    (LOAD 1)
31    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NMT (P ANY) ...)-70|
(CONST 0) = NMT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NMT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NMT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NMT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NMT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NMT
8     (SKIP&RET 1)


Disassembly of function NMT
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
40 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L44)
7     (GETVALUE 0)                        ; P
9     (CDR&PUSH)
10    (CONST&PUSH 2)                      ; 0
11    (NIL&PUSH)
12    (LOAD&JMPIFNOT 2 L35)
15    L15
15    (LOAD 2)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD&PUSH 8)
19    (JSR L0)
21    (STORE 0)
22    (LOAD&PUSH 1)
23    (LOAD&PUSH 1)
24    (CALLSR&STORE 2 53 1)               ; +
28    (LOAD 2)
29    (CDR)
30    (CDR)
31    (STORE 2)
32    (LOAD&JMPIF 2 L15)
35    L35
35    (LOAD 1)
36    (SKIP 3)
38    L38
38    (UNBIND1)
39    (SKIP&RET 3)
41    L41
41    (CONST 1)                           ; 1
42    (JMP L38)
44    L44
44    (LOAD&JMPIF 4 L41)
47    (GETVALUE&PUSH 0)                   ; P
49    (CALLS2&JMPIF 147 L41)              ; MINUSP
52    (CONST 2)                           ; 0
53    (JMP L38)


Disassembly of function #:|(DEFUN NMTERMS (P) ...)-71|
(CONST 0) = NMTERMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NMTERMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NMTERMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NMTERMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NMTERMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NMTERMS
8     (SKIP&RET 1)


Disassembly of function NMTERMS
(CONST 0) = P
(CONST 1) = -1
(CONST 2) = 0
(CONST 3) = NMT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (JMPIFEQTO 1 L22)                   ; -1
8     (GETVALUE&PUSH 0)                   ; P
10    (NIL&PUSH)
11    (CALL2&PUSH 3)                      ; NMT
13    (GETVALUE&PUSH 0)                   ; P
15    (T&PUSH)
16    (CALL2 3)                           ; NMT
18    (CONS)
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (CONST&PUSH 2)                      ; 0
23    (CONST 2)                           ; 0
24    (CONS)
25    (JMP L19)


Disassembly of function #:|(DEFUN FLGREAT (P Q) ...)-72|
(CONST 0) = FLGREAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FLGREAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLGREAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FLGREAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FLGREAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FLGREAT
8     (SKIP&RET 1)


Disassembly of function FLGREAT
(CONST 0) = P
(CONST 1) = NMTERMS
(CONST 2) = FLGREAT1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
35 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALL1&PUSH 1)                      ; NMTERMS
7     (LOAD&PUSH 5)
8     (CALL1&PUSH 1)                      ; NMTERMS
10    (LOAD&CAR&PUSH 1)
12    (LOAD&CAR&PUSH 1)
14    (CALLSR&JMPIF 1 48 L34)             ; >
18    (LOAD&CAR&PUSH 1)
20    (LOAD&CAR&PUSH 1)
22    (CALLSR&JMPIF 1 47 L47)             ; <
26    (LOAD&CDR&PUSH 1)
28    (LOAD&CDR&PUSH 1)
30    (CALLSR&JMPIFNOT 1 48 L39)          ; >
34    L34
34    (T)
35    (SKIP 2)
37    (JMP L59)
39    L39
39    (LOAD&CDR&PUSH 1)
41    (LOAD&CDR&PUSH 1)
43    (CALLSR&JMPIFNOT 1 47 L52)          ; <
47    L47
47    (NIL)
48    (SKIP 2)
50    (JMP L59)
52    L52
52    (GETVALUE&PUSH 0)                   ; P
54    (LOAD&PUSH 7)
55    (CALL2 2)                           ; FLGREAT1
57    (SKIP 2)
59    L59
59    (UNBIND1)
60    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FLGREAT1 (P Q) ...)-73|
(CONST 0) = FLGREAT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FLGREAT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLGREAT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FLGREAT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FLGREAT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FLGREAT1
8     (SKIP&RET 1)


Disassembly of function FLGREAT1
(CONST 0) = P
(CONST 1) = B
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B P)
83 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALLS2&JMPIF 8 L104)               ; NUMBERP
9     (LOAD&PUSH 4)
10    (CALLS2&JMPIF 8 L111)               ; NUMBERP
14    (GETVALUE 0)                        ; P
16    (CAR&PUSH)
17    (LOAD 5)
18    (CAR)
19    (BIND 1)                            ; B
21    (LOAD&PUSH 3)
22    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
24    (GETVALUE&PUSH 1)                   ; B
26    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
28    (CALLSR 1 48)                       ; >
31    (UNBIND1)
32    (SKIP 1)
34    (JMPIF L114)
37    (LOAD&CAR&PUSH 4)
39    (GETVALUE 0)                        ; P
41    (CAR)
42    (BIND 1)                            ; B
44    (LOAD&PUSH 3)
45    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
47    (GETVALUE&PUSH 1)                   ; B
49    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
51    (CALLSR 1 48)                       ; >
54    (UNBIND1)
55    (SKIP 1)
57    (JMPIF L117)
59    (GETVALUE 0)                        ; P
61    (CDR)
62    (CAR&PUSH)
63    (LOAD 5)
64    (CDR)
65    (CAR&PUSH)
66    (CALLSR&JMPIF 1 48 L120)            ; >
70    (GETVALUE 0)                        ; P
72    (CDR)
73    (CAR&PUSH)
74    (LOAD 5)
75    (CDR)
76    (CAR&PUSH)
77    (CALLSR&JMPIF 1 47 L123)            ; <
81    (GETVALUE 0)                        ; P
83    (CDR)
84    (CDR)
85    (CAR&PUSH)
86    (LOAD 5)
87    (CDR)
88    (CDR)
89    (CAR&PUSH)
90    (JSR L0)
93    L93
93    (UNBIND1)
94    (SKIP&RET 3)
96    L96
96    (GETVALUE&PUSH 0)                   ; P
98    (LOAD&PUSH 5)
99    (CALLSR 1 48)                       ; >
102   (JMP L93)
104   L104
104   (LOAD&PUSH 4)
105   (CALLS2&JMPIF 8 L96)                ; NUMBERP
108   (NIL)
109   (JMP L93)
111   L111
111   (T)
112   (JMP L93)
114   L114
114   (T)
115   (JMP L93)
117   L117
117   (NIL)
118   (JMP L93)
120   L120
120   (T)
121   (JMP L93)
123   L123
123   (NIL)
124   (JMP L93)


Disassembly of function #:|(DECLARE-TOP (NOTYPE NARGS))-74|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/nrat4.fas
Wrote file /cygdrive/e/temp/maxima/src/nrat4.lis