Listing of compilation of file /cygdrive/e/temp/maxima/src/mdebug.lisp
on 2002-12-17 13:35:39 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/mdebug.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL) (PROCLAIM '#) ...)-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN $BT NIL ...)-3|
(CONST 0) = $BT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BT
8     (SKIP&RET 1)


Disassembly of function $BT
(CONST 0) = V
(CONST 1) = BAKTRCL
(CONST 2) = 1
(CONST 3) = 0
(CONST 4) = #\:
(CONST 5) = $PRINT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V BAKTRCL)
writes special variable : (V)
47 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; V
3     (GETVALUE&PUSH 1)                   ; BAKTRCL
5     (LOAD&JMPIFNOT 0 L66)
8     L8
8     (LOAD&CAR&PUSH 0)
10    (LOAD 0)
11    (SETVALUE 0)                        ; V
13    (SKIP 1)
15    (PUSH-UNBOUND 2)
17    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
19    (CONST&PUSH 2)                      ; 1
20    (GETVALUE 0)                        ; V
22    (CAR)
23    (CDR)
24    (CAR&PUSH)
25    (CALLS1&PUSH 148)                   ; NTH
27    (CONST&PUSH 3)                      ; 0
28    (GETVALUE 0)                        ; V
30    (CAR)
31    (CDR)
32    (CAR&PUSH)
33    (CALLS1&PUSH 148)                   ; NTH
35    (LOAD&PUSH 1)
36    (LOAD&PUSH 3)
37    (CALLS1 132)                        ; PRINC
39    (CONST&PUSH 4)                      ; #\:
40    (LOAD&PUSH 3)
41    (CALLS1 136)                        ; WRITE-CHAR
43    (LOAD&PUSH 0)
44    (LOAD&PUSH 3)
45    (CALLS1 132)                        ; PRINC
47    (CONST&PUSH 4)                      ; #\:
48    (LOAD&PUSH 3)
49    (CALLS1 136)                        ; WRITE-CHAR
51    (SKIP 2)
53    (LOAD&PUSH 0)
54    (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
57    (GETVALUE&PUSH 0)                   ; V
59    (CALL2 5)                           ; $PRINT
61    (LOAD&CDR&STORE 0)
63    (LOAD&JMPIF 0 L8)
66    L66
66    (NIL)
67    (SKIP 1)
69    (UNBIND1)
70    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *CURRENT-FRAME* 0)-4|
(CONST 0) = (SPECIAL *CURRENT-FRAME*)
(CONST 1) = *CURRENT-FRAME*
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *CURRENT-FRAME*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *CURRENT-FRAME*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *CURRENT-FRAME*
8     (CONST&PUSH 2)                      ; 0
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *CURRENT-FRAME*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $MDEBUG_PRINT_LENGTH 100 ...)-5|
(CONST 0) = (SPECIAL $MDEBUG_PRINT_LENGTH)
(CONST 1) = $MDEBUG_PRINT_LENGTH
(CONST 2) = 100
(CONST 3) = VARIABLE
(CONST 4) = "Length of forms to print out in debugger"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $MDEBUG_PRINT_LENGTH)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $MDEBUG_PRINT_LENGTH
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $MDEBUG_PRINT_LENGTH
8     (CONST&PUSH 2)                      ; 100
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $MDEBUG_PRINT_LENGTH
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Length of forms to print out in debugger"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $MDEBUG_PRINT_LENGTH
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO BAK-TOP-FORM (X) ...)-6|
(CONST 0) = BAK-TOP-FORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BAK-TOP-FORM>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; BAK-TOP-FORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BAK-TOP-FORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BAK-TOP-FORM>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; BAK-TOP-FORM
10    (SKIP&RET 1)


Disassembly of function BAK-TOP-FORM
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = X
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (X)
15 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L18)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; X
13    (GETVALUE 2)                        ; X
15    (UNBIND1)
16    (SKIP&RET 3)
18    L18
18    (LOAD&PUSH 2)
19    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
21    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FRAME-INFO (N) ...)-7|
(CONST 0) = FRAME-INFO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FRAME-INFO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FRAME-INFO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FRAME-INFO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FRAME-INFO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FRAME-INFO
8     (SKIP&RET 1)


Disassembly of function FRAME-INFO
(CONST 0) = N
(CONST 1) = *MLAMBDA-CALL-STACK*
(CONST 2) = M
(CONST 3) = 5
(CONST 4) = 0
(CONST 5) = 1
(CONST 6) = 2
(CONST 7) = 3
(CONST 8) = 4
(CONST 9) = BINDLIST
(CONST 10) = GET-LINEINFO
(CONST 11) = *LAST-MEVAL1-FORM*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*LAST-MEVAL1-FORM* BINDLIST N M *MLAMBDA-CALL-STACK*)
writes special variable : (M)
86 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 1)                   ; *MLAMBDA-CALL-STACK*
5     (LOAD&PUSH 0)
6     (CALLS2 71)                         ; LENGTH
8     (BIND 2)                            ; M
10    (PUSH-NIL 6)
12    (GETVALUE&PUSH 2)                   ; M
14    (GETVALUE&PUSH 2)                   ; M
16    (CONST&PUSH 3)                      ; 5
17    (CALLS2&PUSH 183)                   ; MOD
19    (CONST&PUSH 3)                      ; 5
20    (GETVALUE&PUSH 0)                   ; N
22    (CALLSR&PUSH 2 55)                  ; *
25    (CALLSR 2 54)                       ; -
28    (SETVALUE 2)                        ; M
30    (PUSH)
31    (CONST&PUSH 4)                      ; 0
32    (CALLSR&JMPIF 1 49 L124)            ; <=
37    (LOAD&PUSH 9)
38    (GETVALUE&PUSH 2)                   ; M
40    (CONST&PUSH 5)                      ; 1
41    (CALLSR&PUSH 1 54)                  ; -
44    (CALLSR&STORE 1 1 5)                ; AREF
48    (LOAD&PUSH 9)
49    (GETVALUE&PUSH 2)                   ; M
51    (CONST&PUSH 6)                      ; 2
52    (CALLSR&PUSH 1 54)                  ; -
55    (CALLSR&STORE 1 1 4)                ; AREF
59    (LOAD&PUSH 9)
60    (GETVALUE&PUSH 2)                   ; M
62    (CONST&PUSH 7)                      ; 3
63    (CALLSR&PUSH 1 54)                  ; -
66    (CALLSR&STORE 1 1 3)                ; AREF
70    (LOAD&PUSH 9)
71    (GETVALUE&PUSH 2)                   ; M
73    (CONST&PUSH 8)                      ; 4
74    (CALLSR&PUSH 1 54)                  ; -
77    (CALLSR&STORE 1 1 2)                ; AREF
81    (GETVALUE&PUSH 2)                   ; M
83    (LOAD&PUSH 10)
84    (CALLS1&PUSH 24)                    ; FILL-POINTER
86    (CALLSR&JMPIF 1 47 L132)            ; <
90    (GETVALUE 9)                        ; BINDLIST
92    L92
92    (STORE 0)
93    (GETVALUE&PUSH 2)                   ; M
95    (LOAD&PUSH 10)
96    (CALLS1&PUSH 24)                    ; FILL-POINTER
98    (CALLSR&JMPIF 1 47 L140)            ; <
102   (GETVALUE 11)                       ; *LAST-MEVAL1-FORM*
104   L104
104   (PUSH)
105   (CALL1 10)                          ; GET-LINEINFO
107   (STORE 1)
108   (LOAD&PUSH 5)
109   (LOAD&PUSH 5)
110   (LOAD&PUSH 5)
111   (LOAD&PUSH 5)
112   (LOAD&PUSH 5)
113   (LOAD&PUSH 5)
114   (STACK-TO-MV 6)
116   (SKIP 6)
118   (UNBIND1)
119   (SKIP 1)
121   L121
121   (UNBIND1)
122   (SKIP&RET 2)
124   L124
124   (NIL)
125   (SKIP 6)
127   (UNBIND1)
128   (SKIP 1)
130   (JMP L121)
132   L132
132   (LOAD&PUSH 9)
133   (GETVALUE&PUSH 2)                   ; M
135   (CALLSR 1 1)                        ; AREF
138   (JMP L92)
140   L140
140   (LOAD&PUSH 9)
141   (GETVALUE&PUSH 2)                   ; M
143   (CONST&PUSH 5)                      ; 1
144   (CALLSR&PUSH 2 53)                  ; +
147   (CALLSR 1 1)                        ; AREF
150   (JMP L104)


Disassembly of function #:|(DEFUN PRINT-ONE-FRAME (N PRINT-FRAME-NUMBER &AUX ...) ...)-8|
(CONST 0) = PRINT-ONE-FRAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRINT-ONE-FRAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRINT-ONE-FRAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRINT-ONE-FRAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRINT-ONE-FRAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRINT-ONE-FRAME
8     (SKIP&RET 1)


Disassembly of function PRINT-ONE-FRAME
(CONST 0) = N
(CONST 1) = VAL
(CONST 2) = *DEBUG-IO*
(CONST 3) = ST
(CONST 4) = FRAME-INFO
(CONST 5) = "#"
(CONST 6) = ": "
(CONST 7) = "("
(CONST 8) = $SCONCAT
(CONST 9) = "("
(CONST 10) = V
(CONST 11) = W
(CONST 12) = 100
(CONST 13) = 0
(CONST 14) = "..."
(CONST 15) = #<COMPILED-CLOSURE PRINT-ONE-FRAME-1>
(CONST 16) = ","
(CONST 17) = ""
(CONST 18) = FORMAT
(CONST 19) = ")"
(CONST 20) = #<COMPILED-CLOSURE PRINT-ONE-FRAME-2>
(CONST 21) = SHORT-NAME
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAL V ST N *DEBUG-IO*)
writes special variables : (V VAL W)
107 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (NIL)
4     (BIND 1)                            ; VAL
6     (GETVALUE 2)                        ; *DEBUG-IO*
8     (BIND 3)                            ; ST
10    (GETVALUE&PUSH 0)                   ; N
12    (CALL1 4)                           ; FRAME-INFO
14    (NV-TO-STACK 6)
16    (LOAD&JMPIF 5 L41)
19    (NIL)
20    (SKIP 6)
22    L22
22    (UNBIND 3)
24    (SKIP&RET 3)
26    L26
26    (CONST&PUSH 5)                      ; "#"
27    (GETVALUE&PUSH 0)                   ; N
29    (CONST&PUSH 6)                      ; ": "
30    (LOAD&PUSH 8)
31    (CONST&PUSH 7)                      ; "("
32    (CALL 5 8)                          ; $SCONCAT
35    (JMP L48)
37    L37
37    (CONST 16)                          ; ","
38    (JMP L114)
41    L41
41    (LOAD&JMPIF 16 L26)
44    (LOAD&PUSH 5)
45    (CONST&PUSH 9)                      ; "("
46    (CALL2 8)                           ; $SCONCAT
48    L48
48    (PUSH)
49    (GETVALUE&PUSH 3)                   ; ST
51    (CALLS1 132)                        ; PRINC
53    (LOAD 3)
54    (BIND 10)                           ; V
56    (NIL)
57    (BIND 11)                           ; W
59    (LOAD&PUSH 10)
60    (LOAD&JMPIFNOT 0 L128)
64    L64
64    (GETVALUE 10)                       ; V
66    (JMPIFNOT L128)
68    (LOAD&CAR&PUSH 0)
70    (LOAD 0)
71    (SETVALUE 11)                       ; W
73    (STORE 0)
74    (CALL1 8)                           ; $SCONCAT
76    (SETVALUE 1)                        ; VAL
78    (PUSH)
79    (CALLS2&PUSH 71)                    ; LENGTH
81    (CONST&PUSH 12)                     ; 100
82    (CALLSR&JMPIFNOT 1 48 L97)          ; >
86    (GETVALUE&PUSH 1)                   ; VAL
88    (CONST&PUSH 13)                     ; 0
89    (CONST&PUSH 12)                     ; 100
90    (CALLS2&PUSH 69)                    ; SUBSEQ
92    (CONST&PUSH 14)                     ; "..."
93    (CALL2 8)                           ; $SCONCAT
95    (SETVALUE 1)                        ; VAL
97    L97
97    (GETVALUE&PUSH 3)                   ; ST
99    (CONST&PUSH 15)                     ; #<COMPILED-CLOSURE PRINT-ONE-FRAME-1>
100   (GETVALUE 10)                       ; V
102   (CAR&PUSH)
103   (CALL1&PUSH 8)                      ; $SCONCAT
105   (GETVALUE&PUSH 1)                   ; VAL
107   (GETVALUE 10)                       ; V
109   (CDR)
110   (JMPIF L37)
113   (CONST 17)                          ; ""
114   L114
114   (PUSH)
115   (CALL 5 18)                         ; FORMAT
118   (GETVALUE 10)                       ; V
120   (CDR)
121   (SETVALUE 10)                       ; V
123   (LOAD&CDR&STORE 0)
125   (LOAD&JMPIF 0 L64)
128   L128
128   (SKIP 1)
130   (UNBIND 2)
132   (CONST&PUSH 19)                     ; ")"
133   (GETVALUE&PUSH 3)                   ; ST
135   (CALLS1 132)                        ; PRINC
137   (LOAD&JMPIFNOT 1 L153)
140   (GETVALUE&PUSH 3)                   ; ST
142   (CONST&PUSH 20)                     ; #<COMPILED-CLOSURE PRINT-ONE-FRAME-2>
143   (LOAD 3)
144   (CDR)
145   (CAR&PUSH)
146   (CALL1&PUSH 21)                     ; SHORT-NAME
148   (LOAD&CAR&PUSH 4)
150   (CALL 4 18)                         ; FORMAT
153   L153
153   (GETVALUE&PUSH 3)                   ; ST
155   (CALLS1 139)                        ; TERPRI
157   (LOAD&PUSH 5)
158   (LOAD&PUSH 5)
159   (LOAD&PUSH 5)
160   (LOAD&PUSH 5)
161   (LOAD&PUSH 5)
162   (LOAD&PUSH 5)
163   (STACK-TO-MV 6)
165   (SKIP 6)
167   (JMP L22)


Disassembly of function PRINT-ONE-FRAME-1
(CONST 0) = #\=
4 required arguments
0 optional arguments
Rest parameter
No keyword parameters
26 byte-code instructions:
0     (PUSH-UNBOUND 1)
2     (LOAD&PUSH 6)
3     (CALLS1&PUSH 144)                   ; SYSTEM::LINE-POSITION
5     (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
7     (LOAD&PUSH 5)
8     (LOAD&PUSH 1)
9     (CALLS1 132)                        ; PRINC
11    (LOAD&PUSH 0)
12    (CALLS2&PUSH 118)                   ; GET-OUTPUT-STREAM-STRING
14    (PUSH-UNBOUND 2)
16    (CALLS1&PUSH 71)                    ; NSTRING-DOWNCASE
18    (LOAD&PUSH 7)
19    (PUSH-UNBOUND 2)
21    (CALLS1 137)                        ; WRITE-STRING
23    (SKIP 1)
25    (CONST&PUSH 0)                      ; #\=
26    (LOAD&PUSH 6)
27    (CALLS1 136)                        ; WRITE-CHAR
29    (LOAD&PUSH 3)
30    (LOAD&PUSH 6)
31    (CALLS1 132)                        ; PRINC
33    (LOAD&PUSH 2)
34    (LOAD&PUSH 6)
35    (CALLS1 132)                        ; PRINC
37    (LOAD 1)
38    (SKIP&RET 6)


Disassembly of function PRINT-ONE-FRAME-2
(CONST 0) = #\(
(CONST 1) = " line "
(CONST 2) = #\)
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
18 byte-code instructions:
0     (CONST&PUSH 0)                      ; #\(
1     (LOAD&PUSH 5)
2     (CALLS1 136)                        ; WRITE-CHAR
4     (LOAD&PUSH 3)
5     (LOAD&PUSH 5)
6     (CALLS1 132)                        ; PRINC
8     (CONST&PUSH 1)                      ; " line "
9     (LOAD&PUSH 5)
10    (PUSH-UNBOUND 2)
12    (CALLS1 137)                        ; WRITE-STRING
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 5)
16    (CALLS1 132)                        ; PRINC
18    (CONST&PUSH 2)                      ; #\)
19    (LOAD&PUSH 5)
20    (CALLS1 136)                        ; WRITE-CHAR
22    (LOAD 1)
23    (SKIP&RET 5)

WARNING in (PROGN 'COMPILE (DEFUN STREAM-NAME # ...) ...)-9-2 in lines 84..136 :
Function STREAM-NAME
 was already defined in file #P"/cygdrive/e/temp/maxima/src/nparse.lisp" in lines 1857..1903

Disassembly of function #:|(PROGN 'COMPILE (DEFUN STREAM-NAME # ...) ...)-9-2|
(CONST 0) = STREAM-NAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STREAM-NAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STREAM-NAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STREAM-NAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STREAM-NAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function STREAM-NAME
(CONST 0) = #(NIL)
(CONST 1) = (#(ERROR 22) 1 . 1)
(CONST 2) = E
(CONST 3) = ERRSET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRSET E)
33 byte-code instructions:
0     (NIL&PUSH)
1     (TAGBODY-OPEN 0 L38)                ; #(NIL)
4     (HANDLER-OPEN 1 L22)                ; (#(ERROR 22) 1 . 1)
6     (LOAD&PUSH 10)
7     (CALLS1&PUSH 231)                   ; PATHNAME
9     (PUSH-UNBOUND 1)
11    (CALLS1&PUSH 244)                   ; NAMESTRING
13    (LIST 1)
15    (SKIP 4)
17    (TAGBODY-CLOSE)
18    (SKIP 1)
20    (JMP L49)
22    L22
22    (HANDLER-BEGIN&PUSH)
23    (LOAD 0)
24    (STOREI 0 0 4)
28    (GO-I 0 0 2 0)
33    L33
33    (GETVALUE&PUSH 2)                   ; E
35    (CALLSR 0 29)                       ; ERROR
38    L38
38    (LOAD 4)
39    (BIND 2)                            ; E
41    (GETVALUE 3)                        ; ERRSET
43    (JMPIF L33)
45    (UNBIND1)
46    (TAGBODY-CLOSE)
47    (SKIP 1)
49    L49
49    (PUSH)
50    (LOAD 0)
51    (CAR)
52    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFUN STREAM-NAME # ...) ...)-9-3|
(CONST 0) = BREAK-CALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BREAK-CALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BREAK-CALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BREAK-CALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-CALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function BREAK-CALL
(CONST 0) = ARGS
(CONST 1) = KEYWORD
(CONST 2) = COMPLETE-PROP
(CONST 3) = *DEBUG-IO*
(CONST 4) = #<COMPILED-CLOSURE BREAK-CALL-1>
(CONST 5) = FORMAT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARGS *DEBUG-IO*)
writes special variable : (ARGS)
51 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARGS
3     (NIL&PUSH)
4     (LOAD&PUSH 7)
5     (CONST&PUSH 1)                      ; KEYWORD
6     (LOAD&PUSH 7)
7     (CALL 3 2)                          ; COMPLETE-PROP
10    (STORE 0)
11    (STORE 7)
12    (JMPIFNOT L40)
14    (LOAD&PUSH 0)
15    (LOAD&PUSH 6)
16    (PUSH-UNBOUND 1)
18    (CALLS2&STORE 132 0)                ; GET
21    (PUSH)
22    (CALLS2&JMPIFNOT 6 L43)             ; SYMBOLP
25    (LOAD&JMPIF 0 L63)
28    L28
28    (GETVALUE&PUSH 3)                   ; *DEBUG-IO*
30    (CONST&PUSH 4)                      ; #<COMPILED-CLOSURE BREAK-CALL-1>
31    (LOAD&PUSH 9)
32    (CALL 3 5)                          ; FORMAT
35    L35
35    (SKIP 1)
37    (UNBIND1)
38    (SKIP&RET 4)
40    L40
40    (NIL)
41    (JMP L35)
43    L43
43    (PUSH-UNBOUND 1)
45    (CALLS2&PUSH 143)                   ; GENSYM
47    (LOAD&PUSH 0)
48    (LOAD&PUSH 2)
49    (CALLS2 130)                        ; SYSTEM::%PUTD
51    (LOAD&PUSH 8)
52    (LOAD&PUSH 7)
53    (LOAD&PUSH 2)
54    (CALLS2 136)                        ; SYSTEM::%PUT
56    (LOAD 0)
57    (STORE 1)
58    (SKIP 1)
60    (LOAD&JMPIFNOT 0 L28)
63    L63
63    (PUSH)
64    (GETVALUE 0)                        ; ARGS
66    (CONS)
67    (SETVALUE 0)                        ; ARGS
69    (PUSH)
70    (CALLS1 91)                         ; EVAL
72    (JMP L35)


Disassembly of function BREAK-CALL-1
(CONST 0) = 
" is undefined break command.
"
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CALLS1 140)                        ; FRESH-LINE
3     (LOAD&PUSH 2)
4     (LOAD&PUSH 4)
5     (CALLS1 129)                        ; PRIN1
7     (CONST&PUSH 0)                      ; " is undefined break command.
"
8     (LOAD&PUSH 4)
9     (PUSH-UNBOUND 2)
11    (CALLS1 137)                        ; WRITE-STRING
13    (LOAD 1)
14    (SKIP&RET 4)


Disassembly of function #:|(PROGN 'COMPILE (DEFUN STREAM-NAME # ...) ...)-9-4|
(CONST 0) = COMPLETE-PROP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPLETE-PROP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLETE-PROP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPLETE-PROP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPLETE-PROP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPLETE-PROP
8     (SKIP&RET 1)


Disassembly of function COMPLETE-PROP
(CONST 0) = V
(CONST 1) = #<COMPILED-CLOSURE COMPLETE-PROP-1>
(CONST 2) = 1
(CONST 3) = #<COMPILED-CLOSURE COMPLETE-PROP-2>
(CONST 4) = *STANDARD-OUTPUT*
(CONST 5) = #<COMPILED-CLOSURE COMPLETE-PROP-3>
3 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (*STANDARD-OUTPUT*)
63 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 2)
3     (LOAD&STOREC 5 0 0)
7     (LOAD&STOREC 3 0 1)
11    (UNBOUND->NIL 2)
13    (LOADC&PUSH 0 0)
16    (CALLS2&JMPIFNOT 6 L41)             ; SYMBOLP
19    (LOADC&PUSH 0 0)
22    (LOADC&PUSH 1 1)
25    (PUSH-UNBOUND 1)
27    (CALLS2&JMPIFNOT 132 L41)           ; GET
30    (LOADC&PUSH 0 0)
33    (CALLS2&PUSH 138)                   ; SYMBOL-PACKAGE
35    (LOAD&PUSH 5)
36    (CALLS1&PUSH 204)                   ; FIND-PACKAGE
38    (CALLS2&JMPIF 2 L97)                ; EQUAL
41    L41
41    (LOAD 0)
42    (MAKE-VECTOR1&PUSH 2)
44    (NIL)
45    (STOREC 0 0)
48    (STOREC 0 1)
51    (LOAD&PUSH 5)
52    (CALLS1&PUSH 204)                   ; FIND-PACKAGE
54    (NIL)
55    (BIND 0)                            ; V
57    (LOAD&PUSH 4)
58    (COPY-CLOSURE&PUSH 1 1)             ; #<COMPILED-CLOSURE COMPLETE-PROP-1>
61    (LOAD&PUSH 4)
62    (CALLS1 225)                        ; SYSTEM::MAP-SYMBOLS
64    (UNBIND1)
65    (SKIP 1)
67    (LOAD&JMPIF 3 L102)
70    (LOADC&PUSH 0 0)
73    (CALLS2&PUSH 71)                    ; LENGTH
75    (CONST&PUSH 2)                      ; 1
76    (CALLSR&JMPIF 1 48 L107)            ; >
80    (LOADC 0 0)
83    (JMPIF L121)
85    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE COMPLETE-PROP-3>
86    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
88    (LOADC&PUSH 3 0)
91    (CALLSR 2 21)                       ; FUNCALL
94    L94
94    (NIL)
95    (SKIP&RET 7)
97    L97
97    (LOADC 0 0)
100   (SKIP&RET 6)
102   L102
102   (LOADC 0 0)
105   (SKIP&RET 7)
107   L107
107   (CONST&PUSH 3)                      ; #<COMPILED-CLOSURE COMPLETE-PROP-2>
108   (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
110   (LOADC&PUSH 3 1)
113   (LOADC&PUSH 3 0)
116   (CALLSR 3 21)                       ; FUNCALL
119   (JMP L94)
121   L121
121   (LOADC 0 0)
124   (CAR)
125   (SKIP&RET 7)


Disassembly of function COMPLETE-PROP-1
(CONST 0) = NIL
(CONST 1) = V
(CONST 2) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 1)                            ; V
3     (GETVALUE&PUSH 1)                   ; V
5     (LOADV&PUSH 1 2)
8     (PUSH-UNBOUND 1)
10    (CALLS2&JMPIFNOT 132 L44)           ; GET
13    (LOADV&PUSH 1 1)
16    (CALLS2&PUSH 140)                   ; SYMBOL-NAME
18    (GETVALUE&PUSH 1)                   ; V
20    (CALLS2&PUSH 140)                   ; SYMBOL-NAME
22    (PUSH-UNBOUND 8)
24    (CALLS2&PUSH 102)                   ; SEARCH
26    (JMPIFNOTEQTO 2 L44)                ; 0
29    (LOADV 0 2)
32    (JMPIF L48)
34    (GETVALUE&PUSH 1)                   ; V
36    (NIL)
37    (CONS)
38    (STOREV 0 2)
41    (STOREV 0 1)
44    L44
44    (NIL)
45    (UNBIND1)
46    (SKIP&RET 2)
48    L48
48    (PUSH)
49    (GETVALUE&PUSH 1)                   ; V
51    (NIL)
52    (CONS)
53    (STOREV 0 2)
56    (PUSH)
57    (CALLS1 171)                        ; SYSTEM::%RPLACD
59    (JMP L44)


Disassembly of function COMPLETE-PROP-2
(CONST 0) = "Not unique with property "
(CONST 1) = ": "
(CONST 2) = ", "
(CONST 3) = #\.
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
51 byte-code instructions:
0     (LOAD&PUSH 4)
1     (CALLS1 140)                        ; FRESH-LINE
3     (CONST&PUSH 0)                      ; "Not unique with property "
4     (LOAD&PUSH 5)
5     (PUSH-UNBOUND 2)
7     (CALLS1 137)                        ; WRITE-STRING
9     (PUSH-UNBOUND 1)
11    (LOAD&PUSH 5)
12    (CALLS1&PUSH 144)                   ; SYSTEM::LINE-POSITION
14    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
16    (LOAD&PUSH 4)
17    (LOAD&PUSH 1)
18    (CALLS1 132)                        ; PRINC
20    (CONST&PUSH 1)                      ; ": "
21    (LOAD&PUSH 1)
22    (PUSH-UNBOUND 2)
24    (CALLS1 137)                        ; WRITE-STRING
26    (LOAD&PUSH 3)
27    (JMP L50)
29    L29
29    (SKIP 1)
31    (JMP L56)
33    L33
33    (LOAD&CAR&PUSH 0)
35    (LOAD&CDR&STORE 1)
37    (LOAD&PUSH 2)
38    (CALLS1 129)                        ; PRIN1
40    (LOAD&PUSH 0)
41    (CALLS1&JMPIF 146 L29)              ; ENDP
44    (CONST&PUSH 2)                      ; ", "
45    (LOAD&PUSH 2)
46    (PUSH-UNBOUND 2)
48    (CALLS1 137)                        ; WRITE-STRING
50    L50
50    (LOAD&PUSH 0)
51    (CALLS1&JMPIFNOT 146 L33)           ; ENDP
54    (SKIP 1)
56    L56
56    (LOAD&PUSH 0)
57    (CALLS2&PUSH 118)                   ; GET-OUTPUT-STREAM-STRING
59    (PUSH-UNBOUND 2)
61    (CALLS1&PUSH 71)                    ; NSTRING-DOWNCASE
63    (LOAD&PUSH 6)
64    (PUSH-UNBOUND 2)
66    (CALLS1 137)                        ; WRITE-STRING
68    (SKIP 1)
70    (CONST&PUSH 3)                      ; #\.
71    (LOAD&PUSH 5)
72    (CALLS1 136)                        ; WRITE-CHAR
74    (LOAD 1)
75    (SKIP&RET 5)


Disassembly of function COMPLETE-PROP-3
(CONST 0) = #\Space
(CONST 1) = " is not break command"
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
14 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CALLS1 140)                        ; FRESH-LINE
3     (CONST&PUSH 0)                      ; #\Space
4     (LOAD&PUSH 4)
5     (CALLS1 136)                        ; WRITE-CHAR
7     (LOAD&PUSH 2)
8     (LOAD&PUSH 4)
9     (CALLS1 132)                        ; PRINC
11    (CONST&PUSH 1)                      ; " is not break command"
12    (LOAD&PUSH 4)
13    (PUSH-UNBOUND 2)
15    (CALLS1 137)                        ; WRITE-STRING
17    (LOAD 1)
18    (SKIP&RET 4)


Disassembly of function #:|(DEFUN $BACKTRACE (&OPTIONAL #) ...)-10|
(CONST 0) = $BACKTRACE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BACKTRACE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BACKTRACE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BACKTRACE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BACKTRACE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BACKTRACE
8     (SKIP&RET 1)


Disassembly of function $BACKTRACE
(CONST 0) = 30
(CONST 1) = N
(CONST 2) = $DISPLAY2D
(CONST 3) = *DEBUG-IO*
(CONST 4) = ST
(CONST 5) = 0
(CONST 6) = SLOOP::SLOOP-TYPE-ERROR
(CONST 7) = *CURRENT-FRAME*
(CONST 8) = J
(CONST 9) = PRINT-ONE-FRAME
(CONST 10) = 16777214
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (J *CURRENT-FRAME* N *DEBUG-IO*)
writes special variable : (J)
44 byte-code instructions:
0     (JMPIFBOUNDP 1 L4)
3     (CONST 0)                           ; 30
4     L4
4     (BIND 1)                            ; N
6     (NIL)
7     (BIND 2)                            ; $DISPLAY2D
9     (GETVALUE 3)                        ; *DEBUG-IO*
11    (BIND 4)                            ; ST
13    (CONST&PUSH 5)                      ; 0
14    (GETVALUE&PUSH 1)                   ; N
16    (CALLS2&JMPIF 13 L21)               ; SYSTEM::FIXNUMP
19    (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
21    L21
21    (GETVALUE&PUSH 1)                   ; N
23    (GETVALUE&PUSH 7)                   ; *CURRENT-FRAME*
25    (CALLS2&JMPIF 13 L30)               ; SYSTEM::FIXNUMP
28    (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
30    L30
30    (GETVALUE 7)                        ; *CURRENT-FRAME*
32    (BIND 8)                            ; J
34    (JMP L53)
36    L36
36    (LOAD&INC&STORE 4)
38    (GETVALUE&PUSH 8)                   ; J
40    (CONST&PUSH 10)                     ; 16777214
41    (CALLSR&JMPIF 1 47 L47)             ; <
45    (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
47    L47
47    (GETVALUE&PUSH 8)                   ; J
49    (CALLS2 150)                        ; 1+
51    (SETVALUE 8)                        ; J
53    L53
53    (LOAD&PUSH 4)
54    (LOAD&PUSH 4)
55    (CALLSR&JMPIF 1 50 L65)             ; >=
59    (GETVALUE&PUSH 8)                   ; J
61    (T&PUSH)
62    (CALL2&JMPIF 9 L36)                 ; PRINT-ONE-FRAME
65    L65
65    (NIL)
66    (UNBIND1)
67    (SKIP 2)
69    (UNBIND 3)
71    (SKIP&RET 2)


Disassembly of function #:|(DEFVAR *BREAK-POINTS* NIL)-11|
(CONST 0) = (SPECIAL *BREAK-POINTS*)
(CONST 1) = *BREAK-POINTS*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BREAK-POINTS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BREAK-POINTS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BREAK-POINTS*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *BREAK-POINTS*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *BREAK-POINT-VECTOR* (MAKE-ARRAY 10 :FILL-POINTER ...))-12|
(CONST 0) = (SPECIAL *BREAK-POINT-VECTOR*)
(CONST 1) = *BREAK-POINT-VECTOR*
(CONST 2) = 10
(CONST 3) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BREAK-POINT-VECTOR*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BREAK-POINT-VECTOR*
4     (CALLS1&JMPIF 79 L18)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BREAK-POINT-VECTOR*
8     (CONST&PUSH 2)                      ; 10
9     (T&PUSH)
10    (PUSH-UNBOUND 6)
12    (CONST 3)                           ; 0
13    (STORE 2)
14    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
16    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
18    L18
18    (CONST 1)                           ; *BREAK-POINT-VECTOR*
19    (SKIP&RET 1)


Disassembly of function #:|(DEFUN INIT-BREAK-POINTS NIL ...)-13|
(CONST 0) = INIT-BREAK-POINTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INIT-BREAK-POINTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INIT-BREAK-POINTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INIT-BREAK-POINTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INIT-BREAK-POINTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INIT-BREAK-POINTS
8     (SKIP&RET 1)


Disassembly of function INIT-BREAK-POINTS
(CONST 0) = *BREAK-POINT-VECTOR*
(CONST 1) = 0
(CONST 2) = *BREAK-POINTS*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*BREAK-POINT-VECTOR*)
writes special variable : (*BREAK-POINTS*)
6 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *BREAK-POINT-VECTOR*
2     (CONST&PUSH 1)                      ; 0
3     (CALLS1 25)                         ; SYSTEM::SET-FILL-POINTER
5     (GETVALUE 0)                        ; *BREAK-POINT-VECTOR*
7     (SETVALUE 2)                        ; *BREAK-POINTS*
9     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *BREAK-STEP* NIL)-14|
(CONST 0) = (SPECIAL *BREAK-STEP*)
(CONST 1) = *BREAK-STEP*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BREAK-STEP*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BREAK-STEP*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BREAK-STEP*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *BREAK-STEP*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *STEP-NEXT* NIL)-15|
(CONST 0) = (SPECIAL *STEP-NEXT*)
(CONST 1) = *STEP-NEXT*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *STEP-NEXT*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *STEP-NEXT*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *STEP-NEXT*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *STEP-NEXT*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN STEP-INTO (&OPTIONAL #) ...)-16|
(CONST 0) = STEP-INTO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STEP-INTO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STEP-INTO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STEP-INTO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STEP-INTO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STEP-INTO
8     (SKIP&RET 1)


Disassembly of function STEP-INTO
(CONST 0) = 1
(CONST 1) = N
(CONST 2) = *BREAK-POINTS*
(CONST 3) = INIT-BREAK-POINTS
(CONST 4) = BREAK-STEP-INTO
(CONST 5) = *BREAK-STEP*
(CONST 6) = :RESUME
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (*BREAK-POINTS*)
writes special variable : (*BREAK-STEP*)
13 byte-code instructions:
0     (JMPIFBOUNDP 1 L4)
3     (CONST 0)                           ; 1
4     L4
4     (BIND 1)                            ; N
6     (GETVALUE 2)                        ; *BREAK-POINTS*
8     (JMPIF L12)
10    (CALL0 3)                           ; INIT-BREAK-POINTS
12    L12
12    (CONST 4)                           ; BREAK-STEP-INTO
13    (SETVALUE 5)                        ; *BREAK-STEP*
15    (CONST 6)                           ; :RESUME
16    (UNBIND1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN STEP-NEXT (&OPTIONAL #) ...)-17|
(CONST 0) = STEP-NEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STEP-NEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STEP-NEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STEP-NEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STEP-NEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STEP-NEXT
8     (SKIP&RET 1)


Disassembly of function STEP-NEXT
(CONST 0) = 1
(CONST 1) = N
(CONST 2) = CURRENT-STEP-FUN
(CONST 3) = *STEP-NEXT*
(CONST 4) = *BREAK-POINTS*
(CONST 5) = INIT-BREAK-POINTS
(CONST 6) = BREAK-STEP-NEXT
(CONST 7) = *BREAK-STEP*
(CONST 8) = :RESUME
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (*BREAK-POINTS* N)
writes special variables : (*BREAK-STEP* *STEP-NEXT*)
20 byte-code instructions:
0     (JMPIFBOUNDP 1 L4)
3     (CONST 0)                           ; 1
4     L4
4     (BIND 1)                            ; N
6     (CALL0 2)                           ; CURRENT-STEP-FUN
8     (PUSH)
9     (GETVALUE&PUSH 1)                   ; N
11    (LOAD 1)
12    (CONS)
13    (SETVALUE 3)                        ; *STEP-NEXT*
15    (GETVALUE 4)                        ; *BREAK-POINTS*
17    (JMPIF L21)
19    (CALL0 5)                           ; INIT-BREAK-POINTS
21    L21
21    (CONST 6)                           ; BREAK-STEP-NEXT
22    (SETVALUE 7)                        ; *BREAK-STEP*
24    (CONST 8)                           ; :RESUME
25    (SKIP 1)
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MAYBE-BREAK (FORM LINE-INFO FUN ...) ...)-18|
(CONST 0) = MAYBE-BREAK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAYBE-BREAK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAYBE-BREAK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAYBE-BREAK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAYBE-BREAK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAYBE-BREAK
8     (SKIP&RET 1)


Disassembly of function MAYBE-BREAK
(CONST 0) = FORM
(CONST 1) = POS
(CONST 2) = *BREAK-STEP*
(CONST 3) = *BREAK-POINTS*
(CONST 4) = 0
(CONST 5) = MAKE-BREAK-POINT
(CONST 6) = BREAK-DBM-LOOP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (POS *BREAK-POINTS* FORM)
writes special variables : (*BREAK-POINTS* *BREAK-STEP* POS)
31 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FORM
3     (NIL)
4     (BIND 1)                            ; POS
6     (GETVALUE&PUSH 0)                   ; FORM
8     (LOAD&PUSH 10)
9     (PUSH-UNBOUND 6)
11    (CALLS2 95)                         ; POSITION
13    (SETVALUE 1)                        ; POS
15    (JMPIF L22)
17    (NIL)
18    L18
18    (UNBIND 2)
20    (SKIP&RET 5)
22    L22
22    (NIL)
23    (SETVALUE 2)                        ; *BREAK-STEP*
25    (GETVALUE&PUSH 3)                   ; *BREAK-POINTS*
27    (CALLS2&PUSH 71)                    ; LENGTH
29    (CONST&PUSH 4)                      ; 0
30    (CALLSR&JMPIF 1 48 L37)             ; >
34    (NIL)
35    (SETVALUE 3)                        ; *BREAK-POINTS*
37    L37
37    (LOAD&PUSH 8)
38    (LOAD&PUSH 10)
39    (GETVALUE&PUSH 1)                   ; POS
41    (CALL&PUSH 3 5)                     ; MAKE-BREAK-POINT
44    (CALL1 6)                           ; BREAK-DBM-LOOP
46    (T)
47    (JMP L18)


Disassembly of function #:|(DEFVAR *BREAK-STEP* NIL)-19|
(CONST 0) = (SPECIAL *BREAK-STEP*)
(CONST 1) = *BREAK-STEP*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BREAK-STEP*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BREAK-STEP*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BREAK-STEP*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *BREAK-STEP*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN BREAK-STEP-INTO (FORM &OPTIONAL ENV) ...)-20|
(CONST 0) = BREAK-STEP-INTO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BREAK-STEP-INTO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BREAK-STEP-INTO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BREAK-STEP-INTO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-STEP-INTO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BREAK-STEP-INTO
8     (SKIP&RET 1)


Disassembly of function BREAK-STEP-INTO
(CONST 0) = FORM
(CONST 1) = CURRENT-STEP-FUN
(CONST 2) = SET-FULL-LINEINFO
(CONST 3) = MAYBE-BREAK
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (FORM)
21 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (UNBOUND->NIL 4)
5     (CALL0 1)                           ; CURRENT-STEP-FUN
7     (PUSH)
8     (LOAD&PUSH 0)
9     (CALL1&PUSH 2)                      ; SET-FULL-LINEINFO
11    (LOAD 0)
12    (JMPIFNOT1 L26)
14    (GETVALUE&PUSH 0)                   ; FORM
16    (LOAD&PUSH 1)
17    (LOAD&PUSH 3)
18    (LOAD&PUSH 9)
19    (CALL 4 3)                          ; MAYBE-BREAK
22    (SKIP 2)
24    (JMP L28)
26    L26
26    (SKIP 2)
28    L28
28    (UNBIND1)
29    (SKIP&RET 3)


Disassembly of function #:|(DEFUN BREAK-STEP-NEXT (FORM &OPTIONAL ENV) ...)-21|
(CONST 0) = BREAK-STEP-NEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BREAK-STEP-NEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BREAK-STEP-NEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BREAK-STEP-NEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-STEP-NEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BREAK-STEP-NEXT
8     (SKIP&RET 1)


Disassembly of function BREAK-STEP-NEXT
(CONST 0) = FORM
(CONST 1) = CURRENT-STEP-FUN
(CONST 2) = *STEP-NEXT*
(CONST 3) = SET-FULL-LINEINFO
(CONST 4) = MAYBE-BREAK
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (FORM *STEP-NEXT*)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (UNBOUND->NIL 4)
5     (CALL0 1)                           ; CURRENT-STEP-FUN
7     (PUSH)
8     (GETVALUE 2)                        ; *STEP-NEXT*
10    (CDR&PUSH)
11    (LOAD&PUSH 1)
12    (CALLS2&JMPIF 1 L21)                ; EQL
15    (NIL)
16    (SKIP 1)
18    L18
18    (UNBIND1)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 0)
22    (CALL1&PUSH 3)                      ; SET-FULL-LINEINFO
24    (GETVALUE&PUSH 0)                   ; FORM
26    (LOAD&PUSH 1)
27    (LOAD&PUSH 3)
28    (LOAD&PUSH 9)
29    (CALL 4 4)                          ; MAYBE-BREAK
32    (SKIP 2)
34    (JMP L18)


Disassembly of function #:|(DEFVAR *LINEINFO-ARRAY-INTERNAL* NIL)-22|
(CONST 0) = (SPECIAL *LINEINFO-ARRAY-INTERNAL*)
(CONST 1) = *LINEINFO-ARRAY-INTERNAL*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *LINEINFO-ARRAY-INTERNAL*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *LINEINFO-ARRAY-INTERNAL*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *LINEINFO-ARRAY-INTERNAL*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *LINEINFO-ARRAY-INTERNAL*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SET-FULL-LINEINFO (FNAME &AUX TE) ...)-23|
(CONST 0) = SET-FULL-LINEINFO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SET-FULL-LINEINFO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SET-FULL-LINEINFO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SET-FULL-LINEINFO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SET-FULL-LINEINFO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SET-FULL-LINEINFO
8     (SKIP&RET 1)


Disassembly of function SET-FULL-LINEINFO
(CONST 0) = LINEINFO
(CONST 1) = *LINEINFO-ARRAY-INTERNAL*
(CONST 2) = 20
(CONST 3) = 0
(CONST 4) = GET-LINEINFO
(CONST 5) = WALK-GET-LINEINFO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*LINEINFO-ARRAY-INTERNAL*)
writes special variable : (*LINEINFO-ARRAY-INTERNAL*)
53 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 2)
2     (CONST&PUSH 0)                      ; LINEINFO
3     (PUSH-UNBOUND 1)
5     (CALLS2&PUSH 132)                   ; GET
7     (LOAD 0)
8     (JMPIFATOM L51)
10    (GETVALUE 1)                        ; *LINEINFO-ARRAY-INTERNAL*
12    (JMPIFNOT L54)
14    (GETVALUE&PUSH 1)                   ; *LINEINFO-ARRAY-INTERNAL*
16    (CONST&PUSH 3)                      ; 0
17    (CALLS1 25)                         ; SYSTEM::SET-FILL-POINTER
19    L19
19    (LOAD&PUSH 0)
20    (CALL1 4)                           ; GET-LINEINFO
22    (STORE 1)
23    (JMPIFNOT L35)
25    (CAR&PUSH)
26    (GETVALUE&PUSH 1)                   ; *LINEINFO-ARRAY-INTERNAL*
28    (CALLS1 26)                         ; VECTOR-PUSH
30    (LOAD&PUSH 0)
31    (GETVALUE&PUSH 1)                   ; *LINEINFO-ARRAY-INTERNAL*
33    (CALL2 5)                           ; WALK-GET-LINEINFO
35    L35
35    (GETVALUE&PUSH 1)                   ; *LINEINFO-ARRAY-INTERNAL*
37    (CALLS1&PUSH 24)                    ; FILL-POINTER
39    (CONST&PUSH 3)                      ; 0
40    (CALLSR&JMPIF 1 48 L66)             ; >
44    (LOAD&PUSH 3)
45    (CONST&PUSH 0)                      ; LINEINFO
46    (NIL&PUSH)
47    (CALLS2 136)                        ; SYSTEM::%PUT
49    (SKIP&RET 4)
51    L51
51    (POP)
52    (SKIP&RET 3)
54    L54
54    (CONST&PUSH 2)                      ; 20
55    (T&PUSH)
56    (PUSH-UNBOUND 6)
58    (CONST 3)                           ; 0
59    (STORE 2)
60    (CALLS1 29)                         ; MAKE-ARRAY
62    (SETVALUE 1)                        ; *LINEINFO-ARRAY-INTERNAL*
64    (JMP L19)
66    L66
66    (GETVALUE&PUSH 1)                   ; *LINEINFO-ARRAY-INTERNAL*
68    (CALLS2&PUSH 70)                    ; COPY-SEQ
70    (LOAD&PUSH 4)
71    (CONST&PUSH 0)                      ; LINEINFO
72    (LOAD&PUSH 2)
73    (CALLS2 136)                        ; SYSTEM::%PUT
75    (SKIP&RET 5)


Disassembly of function #:|(DEFUN WALK-GET-LINEINFO (FORM AR &AUX ...) ...)-24|
(CONST 0) = WALK-GET-LINEINFO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WALK-GET-LINEINFO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WALK-GET-LINEINFO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WALK-GET-LINEINFO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WALK-GET-LINEINFO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WALK-GET-LINEINFO
8     (SKIP&RET 1)


Disassembly of function WALK-GET-LINEINFO
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = GET-LINEINFO
(CONST 3) = LINE-INFO-LINE
(CONST 4) = -1
(CONST 5) = 20
(CONST 6) = SLOOP::SLOOP-TYPE-ERROR
(CONST 7) = J
(CONST 8) = 1
(CONST 9) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V J FORM)
writes special variables : (V J)
115 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (CONST&PUSH 1)                      ; 0
4     (NIL&PUSH)
5     (GETVALUE 0)                        ; FORM
7     (JMPIFATOM L22)
9     (GETVALUE&PUSH 0)                   ; FORM
11    (CALL1 2)                           ; GET-LINEINFO
13    (STORE 0)
14    (JMPIF L35)
16    (NIL)
17    L17
17    (SKIP 2)
19    (UNBIND1)
20    (SKIP&RET 3)
22    L22
22    (NIL)
23    (JMP L17)
25    L25
25    (LOAD&PUSH 6)
26    (LOAD&PUSH 2)
27    (CALLSR&JMPIFNOT 1 1 L133)          ; AREF
32    (JMP L143)
35    L35
35    (PUSH)
36    (CALL1&PUSH 3)                      ; LINE-INFO-LINE
38    (LOAD&PUSH 7)
39    (CONST&PUSH 1)                      ; 0
40    (CALLSR&PUSH 1 1)                   ; AREF
43    (CONST&PUSH 4)                      ; -1
44    (CALLSR&STORE 2 54 1)               ; -
48    (PUSH)
49    (LOAD&PUSH 7)
50    (CALLS1&PUSH 24)                    ; FILL-POINTER
52    (CALLSR&JMPIF 1 47 L25)             ; <
56    (LOAD&PUSH 1)
57    (LOAD&PUSH 7)
58    (CALLS1&PUSH 10)                    ; ARRAY-TOTAL-SIZE
60    (CALLSR&JMPIF 1 47 L78)             ; <
64    (LOAD&PUSH 6)
65    (CONST&PUSH 5)                      ; 20
66    (LOAD&PUSH 3)
67    (CALLSR&PUSH 2 53)                  ; +
70    (PUSH-UNBOUND 6)
72    (LOAD&PUSH 14)
73    (CALLS1&STORE 24 2)                 ; FILL-POINTER
76    (CALLS1 30)                         ; ADJUST-ARRAY
78    L78
78    (LOAD&PUSH 6)
79    (CALLS1&PUSH 24)                    ; FILL-POINTER
81    (LOAD&PUSH 0)
82    (CALLS2&JMPIF 13 L87)               ; SYSTEM::FIXNUMP
85    (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
87    L87
87    (LOAD&PUSH 2)
88    (CALLS2&JMPIF 13 L93)               ; SYSTEM::FIXNUMP
91    (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
93    L93
93    (LOAD&PUSH 2)
94    (LOAD 1)
95    (BIND 7)                            ; J
97    (JMP L115)
99    L99
99    (GETVALUE&PUSH 7)                   ; J
101   (LOAD&PUSH 12)
102   (LOAD&PUSH 1)
103   (NIL&PUSH)
104   (CALLSR 1 2)                        ; SYSTEM::STORE
107   (SKIP 1)
109   (GETVALUE&PUSH 7)                   ; J
111   (CALLS2 150)                        ; 1+
113   (SETVALUE 7)                        ; J
115   L115
115   (GETVALUE&PUSH 7)                   ; J
117   (LOAD&PUSH 4)
118   (CALLSR&JMPIFNOT 1 50 L99)          ; >=
122   (UNBIND1)
123   (SKIP 2)
125   (LOAD&PUSH 6)
126   (LOAD&PUSH 2)
127   (CONST&PUSH 8)                      ; 1
128   (CALLSR&PUSH 2 53)                  ; +
131   (CALLS1 25)                         ; SYSTEM::SET-FILL-POINTER
133   L133
133   (GETVALUE&PUSH 0)                   ; FORM
135   (LOAD&PUSH 7)
136   (LOAD&PUSH 3)
137   (LOAD&PUSH 2)
138   (CALLSR 1 2)                        ; SYSTEM::STORE
141   (SKIP 1)
143   L143
143   (NIL&PUSH)
144   (GETVALUE 0)                        ; FORM
146   (CDR&PUSH)
147   (LOAD 1)
148   (BIND 9)                            ; V
150   (LOAD&JMPIFNOT 3 L173)
153   L153
153   (LOAD&CAR&PUSH 3)
155   (LOAD 0)
156   (SETVALUE 9)                        ; V
158   (SKIP 1)
160   (JMPIFATOM L168)
162   (GETVALUE&PUSH 9)                   ; V
164   (LOAD&PUSH 12)
165   (JSR L0)
168   L168
168   (LOAD&CDR&STORE 3)
170   (LOAD&JMPIF 3 L153)
173   L173
173   (NIL)
174   (UNBIND1)
175   (SKIP 2)
177   (JMP L17)


Disassembly of function #:|(DEFUN FIRST-FORM-LINE (FORM LINE &AUX ...) ...)-25|
(CONST 0) = FIRST-FORM-LINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIRST-FORM-LINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIRST-FORM-LINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIRST-FORM-LINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIRST-FORM-LINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIRST-FORM-LINE
8     (SKIP&RET 1)


Disassembly of function FIRST-FORM-LINE
(CONST 0) = FORM
(CONST 1) = GET-LINEINFO
(CONST 2) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
writes special variable : (V)
49 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; FORM
6     (JMPIFATOM L56)
8     (GETVALUE&PUSH 0)                   ; FORM
10    (CALL1 1)                           ; GET-LINEINFO
12    (STORE 0)
13    (JMPIFNOT L20)
15    (CAR&PUSH)
16    (LOAD&PUSH 6)
17    (CALLS2&JMPIF 1 L59)                ; EQL
20    L20
20    (NIL&PUSH)
21    (GETVALUE 0)                        ; FORM
23    (CDR&PUSH)
24    (LOAD 1)
25    (BIND 2)                            ; V
27    (LOAD&JMPIFNOT 3 L47)
30    L30
30    (LOAD&CAR&PUSH 3)
32    (LOAD 0)
33    (SETVALUE 2)                        ; V
35    (STORE 0)
36    (LOAD&PUSH 11)
37    (JSR L0)
39    (STORE 5)
40    (JMPIF L63)
42    (LOAD&CDR&STORE 3)
44    (LOAD&JMPIF 3 L30)
47    L47
47    (NIL)
48    (UNBIND1)
49    (SKIP 2)
51    L51
51    (SKIP 1)
53    (UNBIND1)
54    (SKIP&RET 3)
56    L56
56    (NIL)
57    (JMP L51)
59    L59
59    (GETVALUE 0)                        ; FORM
61    (JMP L51)
63    L63
63    (UNBIND1)
64    (SKIP 2)
66    (JMP L51)


Disassembly of function #:|(DEFVAR *LAST-DBM-COMMAND* NIL)-26|
(CONST 0) = (SPECIAL *LAST-DBM-COMMAND*)
(CONST 1) = *LAST-DBM-COMMAND*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *LAST-DBM-COMMAND*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *LAST-DBM-COMMAND*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *LAST-DBM-COMMAND*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *LAST-DBM-COMMAND*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SPLIT-STRING (STRING BAG &OPTIONAL ...) ...)-27|
(CONST 0) = SPLIT-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPLIT-STRING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPLIT-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPLIT-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPLIT-STRING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPLIT-STRING
8     (SKIP&RET 1)


Disassembly of function SPLIT-STRING
(CONST 0) = STRING
(CONST 1) = 0
(CONST 2) = POS
(CONST 3) = V
(CONST 4) = L
(CONST 5) = SLOOP::SLOOP-TYPE-ERROR
(CONST 6) = CHARACTER
2 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (POS V L STRING)
writes special variables : (POS V L)
76 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; STRING
3     (JMPIFBOUNDP 4 L8)
6     (CONST 1)                           ; 0
7     (STORE 4)
8     L8
8     (NIL&PUSH)
9     (NIL)
10    (BIND 2)                            ; POS
12    (NIL)
13    (BIND 3)                            ; V
15    (NIL)
16    (BIND 4)                            ; L
18    (LOAD&PUSH 14)
19    (CALLS2&JMPIF 13 L24)               ; SYSTEM::FIXNUMP
22    (CALL0 5)                           ; SLOOP::SLOOP-TYPE-ERROR
24    L24
24    (LOAD&PUSH 14)
25    (GETVALUE&PUSH 0)                   ; STRING
27    (CALLS2&PUSH 71)                    ; LENGTH
29    (LOAD&PUSH 0)
30    (CALLS2&JMPIF 13 L73)               ; SYSTEM::FIXNUMP
33    (CALL0 5)                           ; SLOOP::SLOOP-TYPE-ERROR
35    (JMP L73)
37    L37
37    (PUSH)
38    (CALLS2 71)                         ; LENGTH
40    (SETVALUE 4)                        ; L
42    (PUSH)
43    (T&PUSH)
44    (CONST&PUSH 6)                      ; CHARACTER
45    (PUSH-UNBOUND 5)
47    (GETVALUE 4)                        ; L
49    (STORE 2)
50    (LOAD&PUSH 19)
51    (CALLS2&STORE 73 3)                 ; NREVERSE
54    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
56    (GETVALUE&PUSH 0)                   ; STRING
58    (LOAD&PUSH 19)
59    (LOAD&PUSH 19)
60    (JSR L0)
62    (CONS)
63    (SKIP 2)
65    (JMP L111)
67    L67
67    (GETVALUE&PUSH 3)                   ; V
69    (LOAD&CONS&STORE 11)
71    L71
71    (LOAD&INC&STORE 1)
73    L73
73    (LOAD&PUSH 1)
74    (LOAD&PUSH 1)
75    (CALLSR&JMPIF 1 50 L104)            ; >=
79    (GETVALUE&PUSH 0)                   ; STRING
81    (LOAD&PUSH 2)
82    (CALLSR 1 1)                        ; AREF
85    (SETVALUE 3)                        ; V
87    (PUSH)
88    (LOAD&PUSH 18)
89    (PUSH-UNBOUND 6)
91    (CALLS2 95)                         ; POSITION
93    (SETVALUE 2)                        ; POS
95    (LOAD&INC&STORE 16)
97    (GETVALUE 2)                        ; POS
99    (JMPIFNOT L67)
101   (LOAD&JMPIFNOT 11 L71)
104   L104
104   (LOAD&JMPIF 11 L37)
108   (NIL)
109   (SKIP 2)
111   L111
111   (UNBIND 3)
113   (SKIP 1)
115   (UNBIND1)
116   (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE) (PROCLAIM '#))-28|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DBM-READ (&OPTIONAL # # ...) ...)-29|
(CONST 0) = DBM-READ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DBM-READ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DBM-READ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DBM-READ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DBM-READ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DBM-READ
8     (SKIP&RET 1)


Disassembly of function DBM-READ
(CONST 0) = *STANDARD-INPUT*
(CONST 1) = *MREAD-PROMPT*
(CONST 2) = ""
(CONST 3) = 0
(CONST 4) = *STANDARD-OUTPUT*
(CONST 5) = #\Newline
(CONST 6) = #\Return
(CONST 7) = *LAST-DBM-COMMAND*
(CONST 8) = #\?
(CONST 9) = #\:
(CONST 10) = N
(CONST 11) = KEYWORD
(CONST 12) = BREAK-COMMAND
(CONST 13) = COMPLETE-PROP
(CONST 14) = (:_NONE)
(CONST 15) = MAXIMA-READ
(CONST 16) = MACSYMA-READ-STRING
(CONST 17) = " "
(CONST 18) = SPLIT-STRING
(CONST 19) = "("
(CONST 20) = ";"
(CONST 21) = STRING-RIGHT-TRIM
(CONST 22) = ")"
(CONST 23) = $SCONCAT
(CONST 24) = (#\Space #\Tab)
(CONST 25) = (#\Space #\Tab #\; #\$)
(CONST 26) = 1
(CONST 27) = STRING-TRIM
(CONST 28) = (DISPLAYINPUT)
(CONST 29) = ($DESCRIBE)
(CONST 30) = MREAD
0 required arguments
4 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N *LAST-DBM-COMMAND* *STANDARD-OUTPUT* *MREAD-PROMPT* *STANDARD-INPUT*)
writes special variable : (*LAST-DBM-COMMAND*)
155 byte-code instructions:
0     (JMPIFBOUNDP 4 L6)
3     (GETVALUE 0)                        ; *STANDARD-INPUT*
5     (STORE 4)
6     L6
6     (JMPIFBOUNDP 3 L11)
9     (T&STORE 3)
11    L11
11    (UNBOUND->NIL 2)
13    (UNBOUND->NIL 1)
15    (PUSH-NIL 2)
17    (GETVALUE&PUSH 1)                   ; *MREAD-PROMPT*
19    (CONST 2)                           ; ""
20    (BIND 1)                            ; *MREAD-PROMPT*
22    (NIL&PUSH)
23    (LOAD&PUSH 4)
24    (CALLS2&PUSH 71)                    ; LENGTH
26    (CONST&PUSH 3)                      ; 0
27    (CALLSR&JMPIFNOT 1 48 L44)          ; >
31    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
33    (CALLS1 140)                        ; FRESH-LINE
35    (LOAD&PUSH 4)
36    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
38    (CALLS1 132)                        ; PRINC
40    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
42    (CALLS1 142)                        ; FORCE-OUTPUT
44    L44
44    (LOAD&PUSH 11)
45    (LOAD&PUSH 11)
46    (LOAD&PUSH 11)
47    (PUSH-UNBOUND 1)
49    (CALLS1&STORE 120 5)                ; READ-CHAR
52    (PUSH)
53    (JMPIFEQTO 5 L109)                  ; #\Newline
56    (LOAD&PUSH 5)
57    (JMPIFEQTO 6 L109)                  ; #\Return
60    (LOAD&PUSH 5)
61    (LOAD 10)
62    (JMPIFEQ L122)
64    (LOAD&PUSH 5)
65    (JMPIFNOTEQTO 8 L76)                ; #\?
68    (NIL&PUSH)
69    (LOAD&PUSH 12)
70    (NIL&PUSH)
71    (PUSH-UNBOUND 2)
73    (CALLS1&STORE 122 0)                ; PEEK-CHAR
76    L76
76    (LOAD&PUSH 5)
77    (LOAD&PUSH 12)
78    (CALLS1 121)                        ; UNREAD-CHAR
80    (LOAD&PUSH 5)
81    (JMPIFEQTO 9 L150)                  ; #\:
85    (LOAD&PUSH 5)
86    (JMPIFNOTEQTO 8 L97)                ; #\?
89    (LOAD&PUSH 0)
90    (CONST&PUSH 24)                     ; (#\Space #\Tab)
91    (PUSH-UNBOUND 3)
93    (CALLS1&JMPIF 180 L217)             ; MEMBER
97    L97
97    (NIL)
98    (SETVALUE 7)                        ; *LAST-DBM-COMMAND*
100   (LOAD&PUSH 11)
101   (LOAD&PUSH 10)
102   (CALL2 30)                          ; MREAD
104   L104
104   (SKIP 1)
106   (UNBIND1)
107   (SKIP&RET 8)
109   L109
109   (LOAD&JMPIFNOT 8 L44)
113   (GETVALUE 7)                        ; *LAST-DBM-COMMAND*
115   (JMPIFNOT L44)
118   (GETVALUE 7)                        ; *LAST-DBM-COMMAND*
120   (JMP L104)
122   L122
122   (LOAD 9)
123   (JMP L104)
125   L125
125   (LOAD&CAR&STORE 5 5)
128   (LOAD&JMPIF 5 L180)
131   L131
131   (CONST 14)                          ; (:_NONE)
132   (JMP L209)
135   L135
135   (LOAD&PUSH 4)
136   (CONST&PUSH 16)                     ; MACSYMA-READ-STRING
137   (LOAD&PUSH 8)
138   (CONST&PUSH 17)                     ; " "
139   (GETVALUE&PUSH 10)                  ; N
141   (CALL&PUSH 3 18)                    ; SPLIT-STRING
144   (CALLSR 0 22)                       ; MAPCAR
147   (CONS)
148   (JMP L209)
150   L150
150   (LOAD&PUSH 11)
151   (LOAD&PUSH 11)
152   (LOAD&PUSH 11)
153   (PUSH-UNBOUND 1)
155   (CALLS1&PUSH 119)                   ; READ-LINE
157   (NIL&PUSH)
158   (LOAD&PUSH 1)
159   (PUSH-UNBOUND 5)
161   (CALLS1 126)                        ; READ-FROM-STRING
163   (NV-TO-STACK 2)
165   (LOAD 0)
166   (BIND 10)                           ; N
168   (LOAD&PUSH 4)
169   (CONST&PUSH 11)                     ; KEYWORD
170   (CONST&PUSH 12)                     ; BREAK-COMMAND
171   (CALL 3 13)                         ; COMPLETE-PROP
174   (STORE 5)
175   (JMPIFCONSP L125)
177   (LOAD&JMPIFNOT 5 L131)
180   L180
180   (LOAD&PUSH 5)
181   (CONST&PUSH 15)                     ; MAXIMA-READ
182   (PUSH-UNBOUND 1)
184   (CALLS2&JMPIF 132 L135)             ; GET
187   (CONST&PUSH 19)                     ; "("
188   (CONST&PUSH 20)                     ; ";"
189   (LOAD&PUSH 8)
190   (CALL2&PUSH 21)                     ; STRING-RIGHT-TRIM
192   (CONST&PUSH 22)                     ; ")"
193   (CALL 3 23)                         ; $SCONCAT
196   (STORE 13)
198   (PUSH)
199   (PUSH-UNBOUND 2)
201   (CALLS2&PUSH 115)                   ; MAKE-STRING-INPUT-STREAM
203   (LOAD&PUSH 18)
204   (LOAD&PUSH 18)
205   (PUSH-UNBOUND 1)
207   (CALLS1 116)                        ; READ
209   L209
209   (SETVALUE 7)                        ; *LAST-DBM-COMMAND*
211   (UNBIND1)
212   (SKIP 4)
214   (JMP L104)
217   L217
217   (CONST&PUSH 25)                     ; (#\Space #\Tab #\; #\$)
218   (LOAD&PUSH 12)
219   (LOAD&PUSH 12)
220   (LOAD&PUSH 12)
221   (PUSH-UNBOUND 1)
223   (CALLS1&PUSH 119)                   ; READ-LINE
225   (CONST&PUSH 26)                     ; 1
226   (PUSH-UNBOUND 1)
228   (CALLS2&PUSH 69)                    ; SUBSEQ
230   (CALL2&PUSH 27)                     ; STRING-TRIM
232   (CONST&PUSH 28)                     ; (DISPLAYINPUT)
233   (NIL&PUSH)
234   (CONST&PUSH 29)                     ; ($DESCRIBE)
235   (LOAD&PUSH 3)
236   (LIST&PUSH 2)
238   (LIST 3)
240   (SKIP 1)
242   (JMP L104)


Disassembly of function #:|(DEFUN GRAB-LINE-NUMBER (LI STREAM) ...)-30|
(CONST 0) = GRAB-LINE-NUMBER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GRAB-LINE-NUMBER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GRAB-LINE-NUMBER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GRAB-LINE-NUMBER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GRAB-LINE-NUMBER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GRAB-LINE-NUMBER
8     (SKIP&RET 1)


Disassembly of function GRAB-LINE-NUMBER
(CONST 0) = 3
(CONST 1) = 1
(CONST 2) = GET-INSTREAM
(CONST 3) = POS
(CONST 4) = FIXNUMP
(CONST 5) = INSTREAM
(CONST 6) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (POS)
54 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIFNOT 1 48 L18)          ; >
8     (LOAD&PUSH 2)
9     (CONST&PUSH 1)                      ; 1
10    (CALLSR&PUSH 1 1)                   ; AREF
13    (PUSH-UNBOUND 1)
15    (CALLS1&JMPIF 38 L35)               ; DIGIT-CHAR-P
18    L18
18    (NIL)
19    (SKIP&RET 3)
21    L21
21    (CONST&PUSH 5)                      ; INSTREAM
22    (LOAD&PUSH 7)
23    (CONST&PUSH 0)                      ; 3
24    (LOAD&PUSH 3)
25    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
27    (CONST&PUSH 5)                      ; INSTREAM
28    (LOAD&PUSH 7)
29    (CONST&PUSH 6)                      ; 2
30    (LOAD&PUSH 8)
31    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
33    (JMP L72)
35    L35
35    (LOAD&PUSH 1)
36    (CALL1&PUSH 2)                      ; GET-INSTREAM
38    (LOAD 0)
39    (JMPIFNOT1 L77)
41    (LOAD&PUSH 3)
42    (PUSH-NIL 2)
44    (PUSH-UNBOUND 3)
46    (CALLS1 126)                        ; READ-FROM-STRING
48    (NV-TO-STACK 2)
50    (LOAD 0)
51    (BIND 3)                            ; POS
53    (LOAD&PUSH 8)
54    (PUSH-NIL 2)
56    (PUSH-UNBOUND 3)
58    (GETVALUE 3)                        ; POS
60    (STORE 1)
61    (CALLS1&PUSH 126)                   ; READ-FROM-STRING
63    (LOAD&PUSH 0)
64    (CALLS2&JMPIFNOT 7 L71)             ; STRINGP
67    (LOAD&PUSH 5)
68    (CALL1&JMPIF 4 L21)                 ; FIXNUMP
71    L71
71    (NIL)
72    L72
72    (SKIP 1)
74    (UNBIND1)
75    (SKIP&RET 6)
77    L77
77    (SKIP&RET 4)


Disassembly of function #:|(DEFVAR *BREAK-LEVEL* NIL)-31|
(CONST 0) = (SPECIAL *BREAK-LEVEL*)
(CONST 1) = *BREAK-LEVEL*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BREAK-LEVEL*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BREAK-LEVEL*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BREAK-LEVEL*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *BREAK-LEVEL*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *BREAK-ENV* NIL)-32|
(CONST 0) = (SPECIAL *BREAK-ENV*)
(CONST 1) = *BREAK-ENV*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BREAK-ENV*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BREAK-ENV*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BREAK-ENV*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *BREAK-ENV*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *TOP-EOF* (CONS NIL NIL))-33|
(CONST 0) = (SPECIAL *TOP-EOF*)
(CONST 1) = *TOP-EOF*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *TOP-EOF*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *TOP-EOF*
4     (CALLS1&JMPIF 79 L13)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *TOP-EOF*
8     (NIL&PUSH)
9     (NIL)
10    (CONS&PUSH)
11    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
13    L13
13    (CONST 1)                           ; *TOP-EOF*
14    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *QUIT-TAG* 'MACSYMA-QUIT)-34|
(CONST 0) = (SPECIAL *QUIT-TAG*)
(CONST 1) = *QUIT-TAG*
(CONST 2) = MACSYMA-QUIT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *QUIT-TAG*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *QUIT-TAG*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *QUIT-TAG*
8     (CONST&PUSH 2)                      ; MACSYMA-QUIT
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *QUIT-TAG*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *QUIT-TAGS* NIL)-35|
(CONST 0) = (SPECIAL *QUIT-TAGS*)
(CONST 1) = *QUIT-TAGS*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *QUIT-TAGS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *QUIT-TAGS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *QUIT-TAGS*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *QUIT-TAGS*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SET-ENV (BKPT) ...)-36|
(CONST 0) = SET-ENV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SET-ENV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SET-ENV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SET-ENV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SET-ENV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SET-ENV
8     (SKIP&RET 1)


Disassembly of function SET-ENV
(CONST 0) = BKPT
(CONST 1) = *DEBUG-IO*
(CONST 2) = #<COMPILED-CLOSURE SET-ENV-1>
(CONST 3) = BKPT-FILE
(CONST 4) = SHORT-NAME
(CONST 5) = BKPT-FILE-LINE
(CONST 6) = FORMAT
(CONST 7) = #<COMPILED-CLOSURE SET-ENV-2>
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BKPT *DEBUG-IO*)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; BKPT
3     (GETVALUE&PUSH 1)                   ; *DEBUG-IO*
5     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SET-ENV-1>
6     (GETVALUE&PUSH 0)                   ; BKPT
8     (CALL1&PUSH 3)                      ; BKPT-FILE
10    (CALL1&PUSH 4)                      ; SHORT-NAME
12    (GETVALUE&PUSH 0)                   ; BKPT
14    (CALL1&PUSH 5)                      ; BKPT-FILE-LINE
16    (NIL&PUSH)
17    (CALL 5 6)                          ; FORMAT
20    (GETVALUE&PUSH 1)                   ; *DEBUG-IO*
22    (CONST&PUSH 7)                      ; #<COMPILED-CLOSURE SET-ENV-2>
23    (GETVALUE&PUSH 0)                   ; BKPT
25    (CALL1&PUSH 3)                      ; BKPT-FILE
27    (GETVALUE&PUSH 0)                   ; BKPT
29    (CALL1&PUSH 5)                      ; BKPT-FILE-LINE
31    (CALL 4 6)                          ; FORMAT
34    (UNBIND1)
35    (SKIP&RET 2)


Disassembly of function SET-ENV-1
(CONST 0) = #\(
(CONST 1) = #\Space
(CONST 2) = " in "
(CONST 3) = #\)
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
32 byte-code instructions:
0     (CONST&PUSH 0)                      ; #\(
1     (LOAD&PUSH 5)
2     (CALLS1 136)                        ; WRITE-CHAR
4     (LOAD&PUSH 3)
5     (LOAD&PUSH 5)
6     (CALLS1 132)                        ; PRINC
8     (CONST&PUSH 1)                      ; #\Space
9     (LOAD&PUSH 5)
10    (CALLS1 136)                        ; WRITE-CHAR
12    (LOAD&PUSH 2)
13    (LOAD&PUSH 5)
14    (CALLS1 132)                        ; PRINC
16    (LOAD 1)
17    (CAR)
18    (JMPIF L29)
20    (LOAD&CDR&STORE 1)
22    L22
22    (CONST&PUSH 3)                      ; #\)
23    (LOAD&PUSH 5)
24    (CALLS1 136)                        ; WRITE-CHAR
26    (LOAD 1)
27    (SKIP&RET 5)
29    L29
29    (CONST&PUSH 2)                      ; " in "
30    (LOAD&PUSH 5)
31    (PUSH-UNBOUND 2)
33    (CALLS1 137)                        ; WRITE-STRING
35    (LOAD&CAR&PUSH 1)
37    (LOAD&CDR&STORE 2)
39    (LOAD&PUSH 5)
40    (CALLS1 132)                        ; PRINC
42    (JMP L22)


Disassembly of function SET-ENV-2
(CONST 0) = ""
(CONST 1) = #\:
(CONST 2) = 
"::
"
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 4)
1     (CALLS1 140)                        ; FRESH-LINE
3     (CONST&PUSH 0)                      ; ""
4     (LOAD&PUSH 5)
5     (PUSH-UNBOUND 2)
7     (CALLS1 137)                        ; WRITE-STRING
9     (LOAD&PUSH 3)
10    (LOAD&PUSH 5)
11    (CALLS1 132)                        ; PRINC
13    (CONST&PUSH 1)                      ; #\:
14    (LOAD&PUSH 5)
15    (CALLS1 136)                        ; WRITE-CHAR
17    (LOAD&PUSH 2)
18    (LOAD&PUSH 5)
19    (CALLS1 132)                        ; PRINC
21    (CONST&PUSH 2)                      ; "::
"
22    (LOAD&PUSH 5)
23    (PUSH-UNBOUND 2)
25    (CALLS1 137)                        ; WRITE-STRING
27    (LOAD 1)
28    (SKIP&RET 5)


Disassembly of function #:|(DEFVAR *DIFF-MSPECLIST* NIL)-37|
(CONST 0) = (SPECIAL *DIFF-MSPECLIST*)
(CONST 1) = *DIFF-MSPECLIST*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *DIFF-MSPECLIST*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *DIFF-MSPECLIST*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *DIFF-MSPECLIST*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *DIFF-MSPECLIST*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *DIFF-BINDLIST* NIL)-38|
(CONST 0) = (SPECIAL *DIFF-BINDLIST*)
(CONST 1) = *DIFF-BINDLIST*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *DIFF-BINDLIST*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *DIFF-BINDLIST*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *DIFF-BINDLIST*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *DIFF-BINDLIST*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN BREAK-DBM-LOOP (AT) ...)-39|
(CONST 0) = BREAK-DBM-LOOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BREAK-DBM-LOOP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BREAK-DBM-LOOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BREAK-DBM-LOOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-DBM-LOOP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BREAK-DBM-LOOP
8     (SKIP&RET 1)


Disassembly of function BREAK-DBM-LOOP
(CONST 0) = *BREAK-LEVEL*
(CONST 1) = *QUIT-TAG*
(CONST 2) = *QUIT-TAGS*
(CONST 3) = *BREAK-ENV*
(CONST 4) = ""
(CONST 5) = *MREAD-PROMPT*
(CONST 6) = *DIFF-BINDLIST*
(CONST 7) = *DIFF-MSPECLIST*
(CONST 8) = VAL
(CONST 9) = SET-ENV
(CONST 10) = 0
(CONST 11) = $FRAME
(CONST 12) = STEP-CONTINUE
(CONST 13) = *DEBUG-IO*
(CONST 14) = #<COMPILED-CLOSURE BREAK-DBM-LOOP-1>
(CONST 15) = "dbm"
(CONST 16) = FORMAT
(CONST 17) = MACSYMA-QUIT
(CONST 18) = *TOP-EOF*
(CONST 19) = DBM-READ
(CONST 20) = RES
(CONST 21) = BREAK-COMMAND
(CONST 22) = BREAK-CALL
(CONST 23) = :RESUME
(CONST 24) = 2
(CONST 25) = $__
(CONST 26) = MEVAL*
(CONST 27) = $%
(CONST 28) = $_
(CONST 29) = DISPLA
(CONST 30) = TOP
(CONST 31) = THROW-MACSYMA-TOP
(CONST 32) = RESTORE-BINDINGS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(*TOP-EOF* *DEBUG-IO* $% $__ RES *BREAK-ENV* *QUIT-TAGS* *QUIT-TAG*
 *BREAK-LEVEL*)
writes special variables : (VAL $_ $% $__)
124 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *BREAK-LEVEL*
2     (GETVALUE 1)                        ; *QUIT-TAG*
4     (CONS&PUSH)
5     (GETVALUE 2)                        ; *QUIT-TAGS*
7     (CONS)
8     (BIND 2)                            ; *QUIT-TAGS*
10    (LOAD&JMPIFNOT 4 L65)
13    (T&PUSH)
14    (GETVALUE 0)                        ; *BREAK-LEVEL*
16    (CONS)
17    L17
17    (BIND 0)                            ; *BREAK-LEVEL*
19    (NIL&PUSH)
20    (NIL)
21    (CONS)
22    (BIND 1)                            ; *QUIT-TAG*
24    (GETVALUE 3)                        ; *BREAK-ENV*
26    (BIND 3)                            ; *BREAK-ENV*
28    (CONST 4)                           ; ""
29    (BIND 5)                            ; *MREAD-PROMPT*
31    (NIL)
32    (BIND 6)                            ; *DIFF-BINDLIST*
34    (NIL)
35    (BIND 7)                            ; *DIFF-MSPECLIST*
37    (NIL)
38    (BIND 8)                            ; VAL
40    (LOAD 25)
42    (JMPIFCONSP L69)
44    (LOAD&JMPIF 25 L51)
47    L47
47    (CONST&PUSH 10)                     ; 0
48    (NIL&PUSH)
49    (CALL2 11)                          ; $FRAME
51    L51
51    (CONST 12)                          ; STEP-CONTINUE
52    (CATCH-OPEN L192)
55    (GETVALUE 1)                        ; *QUIT-TAG*
57    (CATCH-OPEN L191)
60    (UNWIND-PROTECT-OPEN L184)
63    (JMP L116)
65    L65
65    (GETVALUE 0)                        ; *BREAK-LEVEL*
67    (JMP L17)
69    L69
69    (LOAD&PUSH 25)
71    (CALL1 9)                           ; SET-ENV
73    (LOAD&JMPIFNOT 25 L47)
76    (JMP L51)
78    L78
78    (NIL)
79    (JMP L125)
81    L81
81    (SKIP 1)
83    (JMP L105)
85    L85
85    (CONST&PUSH 24)                     ; 2
86    (GETVALUE&PUSH 20)                  ; RES
88    (CALLS1 148)                        ; NTH
90    (SETVALUE 25)                       ; $__
92    (PUSH)
93    (CALL1 26)                          ; MEVAL*
95    (SETVALUE 27)                       ; $%
97    (GETVALUE 25)                       ; $__
99    (SETVALUE 28)                       ; $_
101   (GETVALUE&PUSH 27)                  ; $%
103   (CALL1 29)                          ; DISPLA
105   L105
105   (NIL)
106   (UNBIND1)
107   (CATCH-CLOSE)
108   L108
108   (SETVALUE 8)                        ; VAL
110   (PUSH)
111   (JMPIFNOTEQTO 30 L116)              ; TOP
114   (CALL0 31)                          ; THROW-MACSYMA-TOP
116   L116
116   (GETVALUE&PUSH 13)                  ; *DEBUG-IO*
118   (CONST&PUSH 14)                     ; #<COMPILED-CLOSURE BREAK-DBM-LOOP-1>
119   (LOAD&PUSH 35)
121   (CALLS2&JMPIF 7 L78)                ; STRINGP
124   (CONST 15)                          ; "dbm"
125   L125
125   (PUSH)
126   (GETVALUE&PUSH 2)                   ; *QUIT-TAGS*
128   (CALLS2&PUSH 71)                    ; LENGTH
130   (CALL 4 16)                         ; FORMAT
133   (CONST 17)                          ; MACSYMA-QUIT
134   (CATCH-OPEN L108)
136   (GETVALUE&PUSH 13)                  ; *DEBUG-IO*
138   (NIL&PUSH)
139   (GETVALUE&PUSH 18)                  ; *TOP-EOF*
141   (T&PUSH)
142   (CALL 4 19)                         ; DBM-READ
145   (BIND 20)                           ; RES
147   (GETVALUE 20)                       ; RES
149   (JMPIFATOM L85)
152   (GETVALUE 20)                       ; RES
154   (CAR&PUSH)
155   (CALLS2&JMPIFNOT 141 L85)           ; KEYWORDP
159   (GETVALUE 20)                       ; RES
161   (CAR&PUSH)
162   (GETVALUE 20)                       ; RES
164   (CDR&PUSH)
165   (CONST&PUSH 21)                     ; BREAK-COMMAND
166   (CALL&PUSH 3 22)                    ; BREAK-CALL
169   (LOAD&PUSH 0)
170   (JMPIFNOTEQTO 23 L81)               ; :RESUME
174   (NIL)
175   (SKIP 1)
177   (UNBIND1)
178   (SKIP 3)
180   (SKIPSP 2 1)
183   (UNWIND-PROTECT-NORMAL-EXIT)
184   L184
184   (CALL0 32)                          ; RESTORE-BINDINGS
186   (UNWIND-PROTECT-CLOSE)
187   (CATCH-CLOSE)
188   (CATCH-CLOSE)
189   (JMP L192)
191   L191
191   (CATCH-CLOSE)
192   L192
192   (UNBIND 8)
194   (SKIP&RET 2)


Disassembly of function BREAK-DBM-LOOP-1
(CONST 0) = #\(
(CONST 1) = #\:
(CONST 2) = ") "
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
29 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS1 140)                        ; FRESH-LINE
3     (LOAD 1)
4     (CAR)
5     (JMPIF L12)
7     (LOAD&CDR&STORE 1)
9     L9
9     (LOAD 1)
10    (SKIP&RET 3)
12    L12
12    (CONST&PUSH 0)                      ; #\(
13    (LOAD&PUSH 3)
14    (CALLS1 136)                        ; WRITE-CHAR
16    (LOAD&CAR&PUSH 1)
18    (LOAD&CDR&STORE 2)
20    (LOAD&PUSH 3)
21    (CALLS1 132)                        ; PRINC
23    (CONST&PUSH 1)                      ; #\:
24    (LOAD&PUSH 3)
25    (CALLS1 136)                        ; WRITE-CHAR
27    (LOAD&CAR&PUSH 1)
29    (LOAD&CDR&STORE 2)
31    (LOAD&PUSH 3)
32    (CALLS1 132)                        ; PRINC
34    (CONST&PUSH 2)                      ; ") "
35    (LOAD&PUSH 3)
36    (PUSH-UNBOUND 2)
38    (CALLS1 137)                        ; WRITE-STRING
40    (JMP L9)


Disassembly of function #:|(DEFUN BREAK-QUIT (&OPTIONAL # &AUX ...) ...)-40|
(CONST 0) = BREAK-QUIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BREAK-QUIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BREAK-QUIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BREAK-QUIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-QUIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BREAK-QUIT
8     (SKIP&RET 1)


Disassembly of function BREAK-QUIT
(CONST 0) = 0
(CONST 1) = LEVEL
(CONST 2) = *BREAK-LEVEL*
(CONST 3) = 1
(CONST 4) = *QUIT-TAGS*
(CONST 5) = X
(CONST 6) = MACSYMA-QUIT
(CONST 7) = TOP
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (X *QUIT-TAGS* LEVEL *BREAK-LEVEL*)
36 byte-code instructions:
0     (JMPIFBOUNDP 1 L4)
3     (CONST 0)                           ; 0
4     L4
4     (BIND 1)                            ; LEVEL
6     (GETVALUE&PUSH 2)                   ; *BREAK-LEVEL*
8     (CALLS2&PUSH 71)                    ; LENGTH
10    (GETVALUE&PUSH 1)                   ; LEVEL
12    (CONST&PUSH 0)                      ; 0
13    (CALLSR&JMPIFNOT 1 50 L24)          ; >=
17    (GETVALUE&PUSH 1)                   ; LEVEL
19    (LOAD&PUSH 1)
20    (CALLSR&JMPIF 1 47 L30)             ; <
24    L24
24    (CONST&PUSH 6)                      ; MACSYMA-QUIT
25    (CONST 7)                           ; TOP
26    (THROW)
27    L27
27    (CONST&PUSH 6)                      ; MACSYMA-QUIT
28    (CONST 7)                           ; TOP
29    (THROW)
30    L30
30    (LOAD&PUSH 0)
31    (CONST&PUSH 3)                      ; 1
32    (GETVALUE&PUSH 1)                   ; LEVEL
34    (CALLSR&PUSH 2 54)                  ; -
37    (GETVALUE&PUSH 4)                   ; *QUIT-TAGS*
39    (CALLS1 148)                        ; NTH
41    (BIND 5)                            ; X
43    (GETVALUE 5)                        ; X
45    (CDR&PUSH)
46    (JMPIFEQTO 6 L27)                   ; MACSYMA-QUIT
49    (GETVALUE 5)                        ; X
51    (CDR&PUSH)
52    (GETVALUE 5)                        ; X
54    (CDR)
55    (THROW)


Disassembly of function #:|(DEFUN BREAK-CURRENT NIL ...)-41|
(CONST 0) = BREAK-CURRENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BREAK-CURRENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BREAK-CURRENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BREAK-CURRENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-CURRENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BREAK-CURRENT
8     (SKIP&RET 1)


Disassembly of function BREAK-CURRENT
(CONST 0) = *BREAK-LEVEL*
(CONST 1) = *DEBUG-IO*
(CONST 2) = #<COMPILED-CLOSURE BREAK-CURRENT-1>
(CONST 3) = FORMAT
(CONST 4) = #<COMPILED-CLOSURE BREAK-CURRENT-2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*DEBUG-IO* *BREAK-LEVEL*)
15 byte-code instructions:
0     (GETVALUE 0)                        ; *BREAK-LEVEL*
2     (JMPIF L12)
4     (GETVALUE&PUSH 1)                   ; *DEBUG-IO*
6     (CONST&PUSH 4)                      ; #<COMPILED-CLOSURE BREAK-CURRENT-2>
7     (CALL2 3)                           ; FORMAT
9     L9
9     (VALUES0)
10    (SKIP&RET 1)
12    L12
12    (GETVALUE&PUSH 1)                   ; *DEBUG-IO*
14    (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-CURRENT-1>
15    (GETVALUE&PUSH 0)                   ; *BREAK-LEVEL*
17    (CALLS2&PUSH 71)                    ; LENGTH
19    (CALL 3 3)                          ; FORMAT
22    (JMP L9)


Disassembly of function BREAK-CURRENT-1
(CONST 0) = "Back to level "
(CONST 1) = #\.
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
24 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Back to level "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (PUSH-UNBOUND 1)
8     (LOAD&PUSH 4)
9     (CALLS1&PUSH 144)                   ; SYSTEM::LINE-POSITION
11    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
13    (LOAD&PUSH 3)
14    (LOAD&PUSH 1)
15    (CALLS1 129)                        ; PRIN1
17    (LOAD&PUSH 0)
18    (CALLS2&PUSH 118)                   ; GET-OUTPUT-STREAM-STRING
20    (PUSH-UNBOUND 2)
22    (CALLS1&PUSH 69)                    ; NSTRING-UPCASE
24    (LOAD&PUSH 5)
25    (PUSH-UNBOUND 2)
27    (CALLS1 137)                        ; WRITE-STRING
29    (SKIP 1)
31    (CONST&PUSH 1)                      ; #\.
32    (LOAD&PUSH 4)
33    (CALLS1 136)                        ; WRITE-CHAR
35    (LOAD 1)
36    (SKIP&RET 4)


Disassembly of function BREAK-CURRENT-2
(CONST 0) = "Top level."
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS1 140)                        ; FRESH-LINE
3     (CONST&PUSH 0)                      ; "Top level."
4     (LOAD&PUSH 3)
5     (PUSH-UNBOUND 2)
7     (CALLS1 137)                        ; WRITE-STRING
9     (LOAD 1)
10    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DEF-BREAK (KEYWORD FUN DOC) ...)-42|
(CONST 0) = DEF-BREAK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-BREAK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-BREAK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-BREAK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-BREAK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEF-BREAK
8     (SKIP&RET 1)


Disassembly of function DEF-BREAK
(CONST 0) = BREAK-COMMAND
(CONST 1) = BREAK-DOC
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CONST&PUSH 0)                      ; BREAK-COMMAND
2     (LOAD&PUSH 4)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (LOAD 1)
6     (JMPIFNOT1 L15)
8     (LOAD&PUSH 3)
9     (CONST&PUSH 1)                      ; BREAK-DOC
10    (LOAD&PUSH 3)
11    (CALLS2 136)                        ; SYSTEM::%PUT
13    (SKIP&RET 4)
15    L15
15    (SKIP&RET 4)

WARNING in BREAK-HELP in lines 457..474 :
variable DOC is not used.
Misspelled or missing IGNORE declaration?

Disassembly of function #:|(DEFUN BREAK-HELP (&OPTIONAL KEY) ...)-43|
(CONST 0) = BREAK-HELP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BREAK-HELP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BREAK-HELP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BREAK-HELP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-HELP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BREAK-HELP
8     (SKIP&RET 1)


Disassembly of function BREAK-HELP
(CONST 0) = KEYWORD
(CONST 1) = BREAK-DOC
(CONST 2) = COMPLETE-PROP
(CONST 3) = V
(CONST 4) = #<COMPILED-CLOSURE BREAK-HELP-1>
(CONST 5) = *STANDARD-OUTPUT*
(CONST 6) = #<COMPILED-CLOSURE BREAK-HELP-2>
(CONST 7) = ALPHALESSP
(CONST 8) = #<COMPILED-CLOSURE BREAK-HELP-3>
(CONST 9) = #<COMPILED-CLOSURE BREAK-HELP-4>
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (V *STANDARD-OUTPUT*)
writes special variable : (V)
86 byte-code instructions:
0     (JMPIFBOUNDP 1 L55)
3     (NIL&STORE 1)
5     (LOAD&JMPIFNOT 1 L58)
8     L8
8     (PUSH)
9     (CALLS2 141)                        ; KEYWORDP
11    (JMPIFNOT1 L143)
14    (LOAD&PUSH 1)
15    (CONST&PUSH 0)                      ; KEYWORD
16    (CONST&PUSH 1)                      ; BREAK-DOC
17    (T&PUSH)
18    (CALL&PUSH 4 2)                     ; COMPLETE-PROP
21    (NIL)
22    (BIND 3)                            ; V
24    (JMP L47)
26    L26
26    (LOAD 3)
27    (CAR)
28    (SETVALUE 3)                        ; V
30    (CONST&PUSH 4)                      ; #<COMPILED-CLOSURE BREAK-HELP-1>
31    (GETVALUE&PUSH 5)                   ; *STANDARD-OUTPUT*
33    (GETVALUE&PUSH 3)                   ; V
35    (GETVALUE&PUSH 3)                   ; V
37    (CONST&PUSH 1)                      ; BREAK-DOC
38    (PUSH-UNBOUND 1)
40    (CALLS2&PUSH 132)                   ; GET
42    (CALLSR 3 21)                       ; FUNCALL
45    (LOAD&CDR&STORE 3)
47    L47
47    (LOAD&PUSH 3)
48    (CALLS1&JMPIFNOT 146 L26)           ; ENDP
51    (NIL)
52    (UNBIND1)
53    (SKIP&RET 3)
55    L55
55    (LOAD&JMPIF 1 L8)
58    L58
58    (NIL)
59    (MAKE-VECTOR1&PUSH 3)
61    (NIL)
62    (STOREC 0 0)
65    (STOREC 0 1)
68    (STOREC 0 2)
71    (CONST&PUSH 0)                      ; KEYWORD
72    (CALLS1&PUSH 204)                   ; FIND-PACKAGE
74    (NIL)
75    (BIND 3)                            ; V
77    (LOAD&PUSH 4)
78    (COPY-CLOSURE&PUSH 6 1)             ; #<COMPILED-CLOSURE BREAK-HELP-2>
81    (LOAD&PUSH 4)
82    (CALLS1 225)                        ; SYSTEM::MAP-SYMBOLS
84    (UNBIND1)
85    (SKIP 1)
87    (LOADC&PUSH 0 0)
90    (CONST&PUSH 7)                      ; ALPHALESSP
91    (PUSH-UNBOUND 3)
93    (CALLS2 103)                        ; SORT
95    (STOREC 0 0)
98    (CONST&PUSH 8)                      ; #<COMPILED-CLOSURE BREAK-HELP-3>
99    (GETVALUE&PUSH 5)                   ; *STANDARD-OUTPUT*
101   (CALLSR 1 21)                       ; FUNCALL
104   (NIL)
105   (BIND 3)                            ; V
107   (LOADC&PUSH 3 0)
110   (LOAD&JMPIFNOT 0 L137)
113   L113
113   (LOAD&CAR&PUSH 0)
115   (LOAD 0)
116   (SETVALUE 3)                        ; V
118   (SKIP 1)
120   (CONST&PUSH 9)                      ; #<COMPILED-CLOSURE BREAK-HELP-4>
121   (GETVALUE&PUSH 5)                   ; *STANDARD-OUTPUT*
123   (GETVALUE 3)                        ; V
125   (CAR&PUSH)
126   (GETVALUE 3)                        ; V
128   (CDR&PUSH)
129   (CALLSR 3 21)                       ; FUNCALL
132   (LOAD&CDR&STORE 0)
134   (LOAD&JMPIF 0 L113)
137   L137
137   (SKIP 1)
139   (UNBIND1)
140   (NIL)
141   (SKIP&RET 3)
143   L143
143   (SKIP&RET 2)


Disassembly of function BREAK-HELP-1
(CONST 0) = "   "
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD&PUSH 4)
1     (CALLS1 140)                        ; FRESH-LINE
3     (LOAD&PUSH 4)
4     (CALLS1 139)                        ; TERPRI
6     (PUSH-UNBOUND 1)
8     (LOAD&PUSH 5)
9     (CALLS1&PUSH 144)                   ; SYSTEM::LINE-POSITION
11    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
13    (LOAD&PUSH 4)
14    (LOAD&PUSH 1)
15    (CALLS1 129)                        ; PRIN1
17    (LOAD&PUSH 0)
18    (CALLS2&PUSH 118)                   ; GET-OUTPUT-STREAM-STRING
20    (PUSH-UNBOUND 2)
22    (CALLS1&PUSH 71)                    ; NSTRING-DOWNCASE
24    (LOAD&PUSH 6)
25    (PUSH-UNBOUND 2)
27    (CALLS1 137)                        ; WRITE-STRING
29    (SKIP 1)
31    (CONST&PUSH 0)                      ; "   "
32    (LOAD&PUSH 5)
33    (PUSH-UNBOUND 2)
35    (CALLS1 137)                        ; WRITE-STRING
37    (LOAD&PUSH 2)
38    (LOAD&PUSH 5)
39    (CALLS1 132)                        ; PRINC
41    (LOAD 1)
42    (SKIP&RET 5)


Disassembly of function BREAK-HELP-2
(CONST 0) = NIL
(CONST 1) = V
(CONST 2) = BREAK-COMMAND
(CONST 3) = BREAK-DOC
(CONST 4) = "Undocumented"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 1)                            ; V
3     (GETVALUE&PUSH 1)                   ; V
5     (CONST&PUSH 2)                      ; BREAK-COMMAND
6     (PUSH-UNBOUND 1)
8     (CALLS2&JMPIFNOT 132 L42)           ; GET
11    (GETVALUE&PUSH 1)                   ; V
13    (GETVALUE&PUSH 1)                   ; V
15    (CONST&PUSH 3)                      ; BREAK-DOC
16    (PUSH-UNBOUND 1)
18    (CALLS2&JMPIF 132 L22)              ; GET
21    (CONST 4)                           ; "Undocumented"
22    L22
22    (CONS)
23    (STOREV 0 3)
26    (LOADV 0 2)
29    (JMPIF L46)
31    (LOADV&PUSH 0 3)
34    (NIL)
35    (CONS)
36    (STOREV 0 2)
39    (STOREV 0 1)
42    L42
42    (NIL)
43    (UNBIND1)
44    (SKIP&RET 2)
46    L46
46    (PUSH)
47    (LOADV&PUSH 0 3)
50    (NIL)
51    (CONS)
52    (STOREV 0 2)
55    (PUSH)
56    (CALLS1 171)                        ; SYSTEM::%RPLACD
58    (JMP L42)


Disassembly of function BREAK-HELP-3
(CONST 0) = 
"Break commands start with ':' Any unique substring may be used, eg :r :re :res all work for :resume.
Command     Description

--------     --------------------------------------"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Break commands start with ':' Any unique substring may be used, eg :r :re :res all work for :resume.
Command     Description

--------     --------------------------------------"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function BREAK-HELP-4
(CONST 0) = 
"
 "
(CONST 1) = "     "
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
28 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
 "
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (PUSH-UNBOUND 1)
8     (LOAD&PUSH 5)
9     (CALLS1&PUSH 144)                   ; SYSTEM::LINE-POSITION
11    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
13    (LOAD&PUSH 4)
14    (LOAD&PUSH 1)
15    (CALLS1 129)                        ; PRIN1
17    (LOAD&PUSH 0)
18    (CALLS2&PUSH 118)                   ; GET-OUTPUT-STREAM-STRING
20    (PUSH-UNBOUND 2)
22    (CALLS1&PUSH 71)                    ; NSTRING-DOWNCASE
24    (LOAD&PUSH 6)
25    (PUSH-UNBOUND 2)
27    (CALLS1 137)                        ; WRITE-STRING
29    (SKIP 1)
31    (CONST&PUSH 1)                      ; "     "
32    (LOAD&PUSH 5)
33    (PUSH-UNBOUND 2)
35    (CALLS1 137)                        ; WRITE-STRING
37    (LOAD&PUSH 2)
38    (LOAD&PUSH 5)
39    (CALLS1 132)                        ; PRINC
41    (LOAD 1)
42    (SKIP&RET 5)


Disassembly of function #:|(DEF-BREAK :HELP 'BREAK-HELP ...)-44|
(CONST 0) = :HELP
(CONST 1) = BREAK-HELP
(CONST 2) = "Print help on a break command or with no arguments on all break commands"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :HELP
1     (CONST&PUSH 1)                      ; BREAK-HELP
2     (CONST&PUSH 2)                      ; "Print help on a break command or with no arguments on all break commands"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :_NONE #'(LAMBDA NIL) ...)-45|
(CONST 0) = :_NONE
(CONST 1) = #<COMPILED-CLOSURE #:|(DEF-BREAK :_NONE #'(LAMBDA NIL) ...)-45-1|>
(CONST 2) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :_NONE
1     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :_NONE #'(LAMBDA NIL) ...)-45-1|>
2     (NIL&PUSH)
3     (CALL 3 2)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :_NONE #'(LAMBDA NIL) ...)-45-1|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :NEXT 'STEP-NEXT ...)-46|
(CONST 0) = :NEXT
(CONST 1) = STEP-NEXT
(CONST 2) = "Like :step, except that subroutine calls are stepped over"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :NEXT
1     (CONST&PUSH 1)                      ; STEP-NEXT
2     (CONST&PUSH 2)                      ; "Like :step, except that subroutine calls are stepped over"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :STEP 'STEP-INTO ...)-47|
(CONST 0) = :STEP
(CONST 1) = STEP-INTO
(CONST 2) = "Step program until it reaches a new source line"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :STEP
1     (CONST&PUSH 1)                      ; STEP-INTO
2     (CONST&PUSH 2)                      ; "Step program until it reaches a new source line"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :QUIT 'BREAK-QUIT ...)-48|
(CONST 0) = :QUIT
(CONST 1) = BREAK-QUIT
(CONST 2) = "Quit this level"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :QUIT
1     (CONST&PUSH 1)                      ; BREAK-QUIT
2     (CONST&PUSH 2)                      ; "Quit this level"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :TOP #'(LAMBDA # L ...) ...)-49|
(CONST 0) = :TOP
(CONST 1) = #<COMPILED-CLOSURE #:|(DEF-BREAK :TOP #'(LAMBDA # L ...) ...)-49-1|>
(CONST 2) = "Throw to top level"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :TOP
1     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :TOP #'(LAMBDA # L ...) ...)-49-1|>
2     (CONST&PUSH 2)                      ; "Throw to top level"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :TOP #'(LAMBDA # L ...) ...)-49-1|
(CONST 0) = L
(CONST 1) = MACSYMA-QUIT
(CONST 2) = TOP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&PUSH 1)                      ; MACSYMA-QUIT
4     (CONST 2)                           ; TOP
5     (THROW)

WARNING in (EVAL-WHEN (EVAL LOAD COMPILE) (DEFSTRUCT INSTREAM STREAM ...) ...)-50-1 in lines 486..493 :
Function MAKE-INSTREAM
 was already defined in file #P"/cygdrive/e/temp/maxima/src/nparse.lisp" in lines 1857..1903
WARNING in (EVAL-WHEN (EVAL LOAD COMPILE) (DEFSTRUCT INSTREAM STREAM ...) ...)-50-1 in lines 486..493 :
Function INSTREAM-P
 was already defined in file #P"/cygdrive/e/temp/maxima/src/nparse.lisp" in lines 1857..1903
WARNING in (EVAL-WHEN (EVAL LOAD COMPILE) (DEFSTRUCT INSTREAM STREAM ...) ...)-50-1 in lines 486..493 :
Function COPY-INSTREAM
 was already defined in file #P"/cygdrive/e/temp/maxima/src/nparse.lisp" in lines 1857..1903
WARNING in (EVAL-WHEN (EVAL LOAD COMPILE) (DEFSTRUCT INSTREAM STREAM ...) ...)-50-1 in lines 486..493 :
Function INSTREAM-STREAM
 was already defined in file #P"/cygdrive/e/temp/maxima/src/nparse.lisp" in lines 1857..1903
WARNING in (EVAL-WHEN (EVAL LOAD COMPILE) (DEFSTRUCT INSTREAM STREAM ...) ...)-50-1 in lines 486..493 :
Function INSTREAM-LINE
 was already defined in file #P"/cygdrive/e/temp/maxima/src/nparse.lisp" in lines 1857..1903
WARNING in (EVAL-WHEN (EVAL LOAD COMPILE) (DEFSTRUCT INSTREAM STREAM ...) ...)-50-1 in lines 486..493 :
Function INSTREAM-STREAM-NAME
 was already defined in file #P"/cygdrive/e/temp/maxima/src/nparse.lisp" in lines 1857..1903

Disassembly of function #:|(EVAL-WHEN (EVAL LOAD COMPILE) (DEFSTRUCT INSTREAM STREAM ...) ...)-50-1|
(CONST 0) = INSTREAM
(CONST 1) = STRUCTURE-OBJECT
(CONST 2) = SYSTEM::DEFSTRUCT-DESCRIPTION
(CONST 3) = 0
(CONST 4) = MAKE-INSTREAM
(CONST 5) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 6) = #<COMPILED-CLOSURE MAKE-INSTREAM>
(CONST 7) = 
(#(STREAM (:STREAM) 1 (NIL) NIL T NIL) #(LINE (:LINE) 2 (NIL . 0) 0 FIXNUM NIL)
 #(STREAM-NAME (:STREAM-NAME) 3 (NIL) NIL T NIL))
(CONST 8) = CLOS::DEFINE-STRUCTURE-CLASS
(CONST 9) = (INLINE INSTREAM-P)
(CONST 10) = INSTREAM-P
(CONST 11) = SYSTEM::INLINE-EXPANSION
(CONST 12) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN INSTREAM-P))
 (BLOCK INSTREAM-P (SYSTEM::%STRUCTURE-TYPE-P 'INSTREAM SYSTEM::OBJECT)))
(CONST 13) = #<COMPILED-CLOSURE INSTREAM-P>
(CONST 14) = (INLINE COPY-INSTREAM)
(CONST 15) = COPY-INSTREAM
(CONST 16) = 
((STRUCTURE) (DECLARE (SYSTEM::IN-DEFUN COPY-INSTREAM))
 (BLOCK COPY-INSTREAM (COPY-STRUCTURE STRUCTURE)))
(CONST 17) = #<COMPILED-CLOSURE COPY-INSTREAM>
(CONST 18) = (FUNCTION INSTREAM-STREAM (INSTREAM) T)
(CONST 19) = (INLINE INSTREAM-STREAM)
(CONST 20) = INSTREAM-STREAM
(CONST 21) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN INSTREAM-STREAM))
 (BLOCK INSTREAM-STREAM
  (THE T (SYSTEM::%STRUCTURE-REF 'INSTREAM SYSTEM::OBJECT 1))))
(CONST 22) = #<COMPILED-CLOSURE INSTREAM-STREAM>
(CONST 23) = SYSTEM::DEFSTRUCT-READER
(CONST 24) = (FUNCTION INSTREAM-LINE (INSTREAM) FIXNUM)
(CONST 25) = (INLINE INSTREAM-LINE)
(CONST 26) = INSTREAM-LINE
(CONST 27) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN INSTREAM-LINE))
 (BLOCK INSTREAM-LINE
  (THE FIXNUM (SYSTEM::%STRUCTURE-REF 'INSTREAM SYSTEM::OBJECT 2))))
(CONST 28) = #<COMPILED-CLOSURE INSTREAM-LINE>
(CONST 29) = (FUNCTION INSTREAM-STREAM-NAME (INSTREAM) T)
(CONST 30) = (INLINE INSTREAM-STREAM-NAME)
(CONST 31) = INSTREAM-STREAM-NAME
(CONST 32) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN INSTREAM-STREAM-NAME))
 (BLOCK INSTREAM-STREAM-NAME
  (THE T (SYSTEM::%STRUCTURE-REF 'INSTREAM SYSTEM::OBJECT 3))))
(CONST 33) = #<COMPILED-CLOSURE INSTREAM-STREAM-NAME>
(CONST 34) = SYSTEM::DEFSTRUCT-WRITER
(CONST 35) = SYSTEM::SETF-EXPANDER
(CONST 36) = -1
(CONST 37) = 1
(CONST 38) = #<COMPILED-CLOSURE SETF-INSTREAM-STREAM>
(CONST 39) = SETF
(CONST 40) = SYSTEM::%SET-DOCUMENTATION
(CONST 41) = #<COMPILED-CLOSURE SETF-INSTREAM-LINE>
(CONST 42) = #<COMPILED-CLOSURE SETF-INSTREAM-STREAM-NAME>
(CONST 43) = STRUCTURE
(CONST 44) = CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
163 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 1)
3     (CONST&PUSH 0)                      ; INSTREAM
4     (CONST&PUSH 1)                      ; STRUCTURE-OBJECT
5     (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 132)                   ; GET
10    (CONST 3)                           ; 0
11    (SVREF)
12    (CONS)
13    (STOREC 0 0)
16    (CONST&PUSH 4)                      ; MAKE-INSTREAM
17    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
19    (CONST&PUSH 4)                      ; MAKE-INSTREAM
20    (LOAD&PUSH 1)
21    (COPY-CLOSURE&PUSH 6 1)             ; #<COMPILED-CLOSURE MAKE-INSTREAM>
24    (CALLS2 130)                        ; SYSTEM::%PUTD
26    (CONST&PUSH 0)                      ; INSTREAM
27    (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
28    (LOADC&PUSH 2 0)
31    (T&PUSH)
32    (CONST&PUSH 4)                      ; MAKE-INSTREAM
33    (CONST&PUSH 7)                      ; (#(STREAM # ...) #(LINE # ...) ...)
34    (CALLSR&PUSH 4 0)                   ; VECTOR
37    (CALLS2 136)                        ; SYSTEM::%PUT
39    (SKIP 1)
41    (CONST&PUSH 0)                      ; INSTREAM
42    (CALL1 8)                           ; CLOS::DEFINE-STRUCTURE-CLASS
44    (CONST&PUSH 9)                      ; (INLINE INSTREAM-P)
45    (CALLS1 90)                         ; PROCLAIM
47    (CONST&PUSH 10)                     ; INSTREAM-P
48    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
50    (CONST&PUSH 10)                     ; INSTREAM-P
51    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
52    (CONST&PUSH 12)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
53    (CALLS2 136)                        ; SYSTEM::%PUT
55    (CONST&PUSH 10)                     ; INSTREAM-P
56    (CONST&PUSH 13)                     ; #<COMPILED-CLOSURE INSTREAM-P>
57    (CALLS2 130)                        ; SYSTEM::%PUTD
59    (CONST&PUSH 14)                     ; (INLINE COPY-INSTREAM)
60    (CALLS1 90)                         ; PROCLAIM
62    (CONST&PUSH 15)                     ; COPY-INSTREAM
63    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
65    (CONST&PUSH 15)                     ; COPY-INSTREAM
66    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
67    (CONST&PUSH 16)                     ; ((STRUCTURE) (DECLARE #) ...)
68    (CALLS2 136)                        ; SYSTEM::%PUT
70    (CONST&PUSH 15)                     ; COPY-INSTREAM
71    (CONST&PUSH 17)                     ; #<COMPILED-CLOSURE COPY-INSTREAM>
72    (CALLS2 130)                        ; SYSTEM::%PUTD
74    (CONST&PUSH 18)                     ; (FUNCTION INSTREAM-STREAM ...)
75    (CALLS1 90)                         ; PROCLAIM
77    (CONST&PUSH 19)                     ; (INLINE INSTREAM-STREAM)
78    (CALLS1 90)                         ; PROCLAIM
80    (CONST&PUSH 20)                     ; INSTREAM-STREAM
81    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
83    (CONST&PUSH 20)                     ; INSTREAM-STREAM
84    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
85    (CONST&PUSH 21)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
86    (CALLS2 136)                        ; SYSTEM::%PUT
88    (CONST&PUSH 20)                     ; INSTREAM-STREAM
89    (CONST&PUSH 22)                     ; #<COMPILED-CLOSURE INSTREAM-STREAM>
90    (CALLS2 130)                        ; SYSTEM::%PUTD
92    (CONST&PUSH 20)                     ; INSTREAM-STREAM
93    (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
94    (CONST&PUSH 0)                      ; INSTREAM
95    (CALLS2 136)                        ; SYSTEM::%PUT
97    (CONST&PUSH 24)                     ; (FUNCTION INSTREAM-LINE ...)
98    (CALLS1 90)                         ; PROCLAIM
100   (CONST&PUSH 25)                     ; (INLINE INSTREAM-LINE)
101   (CALLS1 90)                         ; PROCLAIM
103   (CONST&PUSH 26)                     ; INSTREAM-LINE
104   (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
106   (CONST&PUSH 26)                     ; INSTREAM-LINE
107   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
108   (CONST&PUSH 27)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
109   (CALLS2 136)                        ; SYSTEM::%PUT
111   (CONST&PUSH 26)                     ; INSTREAM-LINE
112   (CONST&PUSH 28)                     ; #<COMPILED-CLOSURE INSTREAM-LINE>
113   (CALLS2 130)                        ; SYSTEM::%PUTD
115   (CONST&PUSH 26)                     ; INSTREAM-LINE
116   (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
117   (CONST&PUSH 0)                      ; INSTREAM
118   (CALLS2 136)                        ; SYSTEM::%PUT
120   (CONST&PUSH 29)                     ; (FUNCTION INSTREAM-STREAM-NAME ...)
121   (CALLS1 90)                         ; PROCLAIM
123   (CONST&PUSH 30)                     ; (INLINE INSTREAM-STREAM-NAME)
125   (CALLS1 90)                         ; PROCLAIM
127   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
129   (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
131   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
133   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
134   (CONST&PUSH 32)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
136   (CALLS2 136)                        ; SYSTEM::%PUT
138   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
140   (CONST&PUSH 33)                     ; #<COMPILED-CLOSURE INSTREAM-STREAM-NAME>
142   (CALLS2 130)                        ; SYSTEM::%PUTD
144   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
146   (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
147   (CONST&PUSH 0)                      ; INSTREAM
148   (CALLS2 136)                        ; SYSTEM::%PUT
150   (CONST&PUSH 20)                     ; INSTREAM-STREAM
151   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
153   (CALLS2 137)                        ; REMPROP
155   (CONST&PUSH 20)                     ; INSTREAM-STREAM
156   (CONST&PUSH 35)                     ; SYSTEM::SETF-EXPANDER
158   (CONST&PUSH 36)                     ; -1
160   (CONST&PUSH 37)                     ; 1
162   (CONST 38)                          ; #<COMPILED-CLOSURE SETF-INSTREAM-STREAM>
164   (LIST*&PUSH 2)
166   (CALLS2 136)                        ; SYSTEM::%PUT
168   (CONST&PUSH 20)                     ; INSTREAM-STREAM
169   (CONST&PUSH 39)                     ; SETF
171   (NIL&PUSH)
172   (CALL 3 40)                         ; SYSTEM::%SET-DOCUMENTATION
175   (CONST&PUSH 20)                     ; INSTREAM-STREAM
176   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
178   (CONST&PUSH 0)                      ; INSTREAM
179   (CALLS2 136)                        ; SYSTEM::%PUT
181   (CONST&PUSH 26)                     ; INSTREAM-LINE
182   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
184   (CALLS2 137)                        ; REMPROP
186   (CONST&PUSH 26)                     ; INSTREAM-LINE
187   (CONST&PUSH 35)                     ; SYSTEM::SETF-EXPANDER
189   (CONST&PUSH 36)                     ; -1
191   (CONST&PUSH 37)                     ; 1
193   (CONST 41)                          ; #<COMPILED-CLOSURE SETF-INSTREAM-LINE>
195   (LIST*&PUSH 2)
197   (CALLS2 136)                        ; SYSTEM::%PUT
199   (CONST&PUSH 26)                     ; INSTREAM-LINE
200   (CONST&PUSH 39)                     ; SETF
202   (NIL&PUSH)
203   (CALL 3 40)                         ; SYSTEM::%SET-DOCUMENTATION
206   (CONST&PUSH 26)                     ; INSTREAM-LINE
207   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
209   (CONST&PUSH 0)                      ; INSTREAM
210   (CALLS2 136)                        ; SYSTEM::%PUT
212   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
214   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
216   (CALLS2 137)                        ; REMPROP
218   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
220   (CONST&PUSH 35)                     ; SYSTEM::SETF-EXPANDER
222   (CONST&PUSH 36)                     ; -1
224   (CONST&PUSH 37)                     ; 1
226   (CONST 42)                          ; #<COMPILED-CLOSURE SETF-INSTREAM-STREAM-NAME>
228   (LIST*&PUSH 2)
230   (CALLS2 136)                        ; SYSTEM::%PUT
232   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
234   (CONST&PUSH 39)                     ; SETF
236   (NIL&PUSH)
237   (CALL 3 40)                         ; SYSTEM::%SET-DOCUMENTATION
240   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
242   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
244   (CONST&PUSH 0)                      ; INSTREAM
245   (CALLS2 136)                        ; SYSTEM::%PUT
247   (CONST&PUSH 0)                      ; INSTREAM
248   (CONST&PUSH 43)                     ; STRUCTURE
250   (NIL&PUSH)
251   (CALL 3 40)                         ; SYSTEM::%SET-DOCUMENTATION
254   (CONST&PUSH 0)                      ; INSTREAM
255   (CALL1 44)                          ; CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD
257   (VALUES0)
258   (SKIP&RET 1)


Disassembly of function MAKE-INSTREAM
(CONST 0) = NIL
(CONST 1) = :STREAM
(CONST 2) = :LINE
(CONST 3) = :STREAM-NAME
(CONST 4) = 0
(CONST 5) = 4
(CONST 6) = INSTREAM
(CONST 7) = 1
(CONST 8) = 2
(CONST 9) = 3
0 required arguments
0 optional arguments
No rest parameter
3 keyword parameters: :STREAM, :LINE, :STREAM-NAME.
26 byte-code instructions:
0     (UNBOUND->NIL 3)
2     (JMPIFBOUNDP 2 L7)
5     (CONST 4)                           ; 0
6     (STORE 2)
7     L7
7     (UNBOUND->NIL 1)
9     (LOADV&PUSH 0 1)
12    (CONST&PUSH 5)                      ; 4
13    (CALLS2&PUSH 48)                    ; SYSTEM::%MAKE-STRUCTURE
15    (CONST&PUSH 6)                      ; INSTREAM
16    (LOAD&PUSH 1)
17    (CONST&PUSH 7)                      ; 1
18    (LOAD&PUSH 7)
19    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
21    (CONST&PUSH 6)                      ; INSTREAM
22    (LOAD&PUSH 1)
23    (CONST&PUSH 8)                      ; 2
24    (LOAD&PUSH 6)
25    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
27    (CONST&PUSH 6)                      ; INSTREAM
28    (LOAD&PUSH 1)
29    (CONST&PUSH 9)                      ; 3
30    (LOAD&PUSH 5)
31    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
33    (POP)
34    (SKIP&RET 4)


Disassembly of function INSTREAM-P
(CONST 0) = INSTREAM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM
1     (LOAD&PUSH 2)
2     (CALLS2 50)                         ; SYSTEM::%STRUCTURE-TYPE-P
4     (SKIP&RET 2)


Disassembly of function COPY-INSTREAM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 49)                         ; COPY-STRUCTURE
3     (SKIP&RET 2)


Disassembly of function INSTREAM-STREAM
(CONST 0) = INSTREAM
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 1
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function INSTREAM-LINE
(CONST 0) = INSTREAM
(CONST 1) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 2
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function INSTREAM-STREAM-NAME
(CONST 0) = INSTREAM
(CONST 1) = 3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 3
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function SETF-INSTREAM-STREAM
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'INSTREAM
(CONST 2) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'INSTREAM
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 1
7     (LOAD&PUSH 6)
8     (LIST 5)
10    (SKIP&RET 4)


Disassembly of function SETF-INSTREAM-LINE
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'INSTREAM
(CONST 2) = 2
(CONST 3) = THE
(CONST 4) = FIXNUM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'INSTREAM
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 2
7     (CONST&PUSH 3)                      ; THE
8     (CONST&PUSH 4)                      ; FIXNUM
9     (LOAD&PUSH 8)
10    (LIST&PUSH 3)
12    (LIST 5)
14    (SKIP&RET 4)


Disassembly of function SETF-INSTREAM-STREAM-NAME
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'INSTREAM
(CONST 2) = 3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'INSTREAM
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 3
7     (LOAD&PUSH 6)
8     (LIST 5)
10    (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (EVAL LOAD COMPILE) (DEFSTRUCT INSTREAM STREAM ...) ...)-50-2|
(CONST 0) = BKPT
(CONST 1) = STRUCTURE-OBJECT
(CONST 2) = SYSTEM::DEFSTRUCT-DESCRIPTION
(CONST 3) = 0
(CONST 4) = MAKE-BKPT
(CONST 5) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 6) = #<COMPILED-CLOSURE MAKE-BKPT>
(CONST 7) = LIST
(CONST 8) = 
(#(FORM (:FORM) 0 (NIL) NIL T NIL) #(FILE (:FILE) 1 (NIL) NIL T NIL)
 #(FILE-LINE (:FILE-LINE) 2 (NIL) NIL T NIL)
 #(FUNCTION (:FUNCTION) 3 (NIL) NIL T NIL))
(CONST 9) = (INLINE COPY-BKPT)
(CONST 10) = COPY-BKPT
(CONST 11) = SYSTEM::INLINE-EXPANSION
(CONST 12) = 
((STRUCTURE) (DECLARE (SYSTEM::IN-DEFUN COPY-BKPT))
 (BLOCK COPY-BKPT (COPY-LIST STRUCTURE)))
(CONST 13) = #<COMPILED-CLOSURE COPY-BKPT>
(CONST 14) = (FUNCTION BKPT-FORM (BKPT) T)
(CONST 15) = (INLINE BKPT-FORM)
(CONST 16) = BKPT-FORM
(CONST 17) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN BKPT-FORM))
 (BLOCK BKPT-FORM (THE T (NTH 0 SYSTEM::OBJECT))))
(CONST 18) = #<COMPILED-CLOSURE BKPT-FORM>
(CONST 19) = SYSTEM::DEFSTRUCT-READER
(CONST 20) = (FUNCTION BKPT-FILE (BKPT) T)
(CONST 21) = (INLINE BKPT-FILE)
(CONST 22) = BKPT-FILE
(CONST 23) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN BKPT-FILE))
 (BLOCK BKPT-FILE (THE T (NTH 1 SYSTEM::OBJECT))))
(CONST 24) = #<COMPILED-CLOSURE BKPT-FILE>
(CONST 25) = (FUNCTION BKPT-FILE-LINE (BKPT) T)
(CONST 26) = (INLINE BKPT-FILE-LINE)
(CONST 27) = BKPT-FILE-LINE
(CONST 28) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN BKPT-FILE-LINE))
 (BLOCK BKPT-FILE-LINE (THE T (NTH 2 SYSTEM::OBJECT))))
(CONST 29) = #<COMPILED-CLOSURE BKPT-FILE-LINE>
(CONST 30) = (FUNCTION BKPT-FUNCTION (BKPT) T)
(CONST 31) = (INLINE BKPT-FUNCTION)
(CONST 32) = BKPT-FUNCTION
(CONST 33) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN BKPT-FUNCTION))
 (BLOCK BKPT-FUNCTION (THE T (NTH 3 SYSTEM::OBJECT))))
(CONST 34) = #<COMPILED-CLOSURE BKPT-FUNCTION>
(CONST 35) = SYSTEM::DEFSTRUCT-WRITER
(CONST 36) = SYSTEM::SETF-EXPANDER
(CONST 37) = -1
(CONST 38) = 1
(CONST 39) = #<COMPILED-CLOSURE SETF-BKPT-FORM>
(CONST 40) = SETF
(CONST 41) = SYSTEM::%SET-DOCUMENTATION
(CONST 42) = #<COMPILED-CLOSURE SETF-BKPT-FILE>
(CONST 43) = #<COMPILED-CLOSURE SETF-BKPT-FILE-LINE>
(CONST 44) = #<COMPILED-CLOSURE SETF-BKPT-FUNCTION>
(CONST 45) = STRUCTURE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
179 byte-code instructions:
0     (CONST&PUSH 0)                      ; BKPT
1     (CONST&PUSH 1)                      ; STRUCTURE-OBJECT
2     (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
3     (PUSH-UNBOUND 1)
5     (CALLS2&PUSH 132)                   ; GET
7     (CONST 3)                           ; 0
8     (SVREF)
9     (CONS&PUSH)
10    (CONST&PUSH 4)                      ; MAKE-BKPT
11    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
13    (CONST&PUSH 4)                      ; MAKE-BKPT
14    (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE MAKE-BKPT>
15    (CALLS2 130)                        ; SYSTEM::%PUTD
17    (CONST&PUSH 0)                      ; BKPT
18    (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
19    (LOAD&PUSH 2)
20    (CONST&PUSH 7)                      ; LIST
21    (CONST&PUSH 4)                      ; MAKE-BKPT
22    (CONST&PUSH 8)                      ; (#(FORM # ...) #(FILE # ...) ...)
23    (CALLSR&PUSH 4 0)                   ; VECTOR
26    (CALLS2 136)                        ; SYSTEM::%PUT
28    (SKIP 1)
30    (CONST&PUSH 9)                      ; (INLINE COPY-BKPT)
31    (CALLS1 90)                         ; PROCLAIM
33    (CONST&PUSH 10)                     ; COPY-BKPT
34    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
36    (CONST&PUSH 10)                     ; COPY-BKPT
37    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
38    (CONST&PUSH 12)                     ; ((STRUCTURE) (DECLARE #) ...)
39    (CALLS2 136)                        ; SYSTEM::%PUT
41    (CONST&PUSH 10)                     ; COPY-BKPT
42    (CONST&PUSH 13)                     ; #<COMPILED-CLOSURE COPY-BKPT>
43    (CALLS2 130)                        ; SYSTEM::%PUTD
45    (CONST&PUSH 14)                     ; (FUNCTION BKPT-FORM (BKPT) T)
46    (CALLS1 90)                         ; PROCLAIM
48    (CONST&PUSH 15)                     ; (INLINE BKPT-FORM)
49    (CALLS1 90)                         ; PROCLAIM
51    (CONST&PUSH 16)                     ; BKPT-FORM
52    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
54    (CONST&PUSH 16)                     ; BKPT-FORM
55    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
56    (CONST&PUSH 17)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
57    (CALLS2 136)                        ; SYSTEM::%PUT
59    (CONST&PUSH 16)                     ; BKPT-FORM
60    (CONST&PUSH 18)                     ; #<COMPILED-CLOSURE BKPT-FORM>
61    (CALLS2 130)                        ; SYSTEM::%PUTD
63    (CONST&PUSH 16)                     ; BKPT-FORM
64    (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
65    (CONST&PUSH 0)                      ; BKPT
66    (CALLS2 136)                        ; SYSTEM::%PUT
68    (CONST&PUSH 20)                     ; (FUNCTION BKPT-FILE (BKPT) T)
69    (CALLS1 90)                         ; PROCLAIM
71    (CONST&PUSH 21)                     ; (INLINE BKPT-FILE)
72    (CALLS1 90)                         ; PROCLAIM
74    (CONST&PUSH 22)                     ; BKPT-FILE
75    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
77    (CONST&PUSH 22)                     ; BKPT-FILE
78    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
79    (CONST&PUSH 23)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
80    (CALLS2 136)                        ; SYSTEM::%PUT
82    (CONST&PUSH 22)                     ; BKPT-FILE
83    (CONST&PUSH 24)                     ; #<COMPILED-CLOSURE BKPT-FILE>
84    (CALLS2 130)                        ; SYSTEM::%PUTD
86    (CONST&PUSH 22)                     ; BKPT-FILE
87    (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
88    (CONST&PUSH 0)                      ; BKPT
89    (CALLS2 136)                        ; SYSTEM::%PUT
91    (CONST&PUSH 25)                     ; (FUNCTION BKPT-FILE-LINE (BKPT) T)
92    (CALLS1 90)                         ; PROCLAIM
94    (CONST&PUSH 26)                     ; (INLINE BKPT-FILE-LINE)
95    (CALLS1 90)                         ; PROCLAIM
97    (CONST&PUSH 27)                     ; BKPT-FILE-LINE
98    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
100   (CONST&PUSH 27)                     ; BKPT-FILE-LINE
101   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
102   (CONST&PUSH 28)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
103   (CALLS2 136)                        ; SYSTEM::%PUT
105   (CONST&PUSH 27)                     ; BKPT-FILE-LINE
106   (CONST&PUSH 29)                     ; #<COMPILED-CLOSURE BKPT-FILE-LINE>
107   (CALLS2 130)                        ; SYSTEM::%PUTD
109   (CONST&PUSH 27)                     ; BKPT-FILE-LINE
110   (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
111   (CONST&PUSH 0)                      ; BKPT
112   (CALLS2 136)                        ; SYSTEM::%PUT
114   (CONST&PUSH 30)                     ; (FUNCTION BKPT-FUNCTION (BKPT) T)
116   (CALLS1 90)                         ; PROCLAIM
118   (CONST&PUSH 31)                     ; (INLINE BKPT-FUNCTION)
120   (CALLS1 90)                         ; PROCLAIM
122   (CONST&PUSH 32)                     ; BKPT-FUNCTION
124   (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
126   (CONST&PUSH 32)                     ; BKPT-FUNCTION
128   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
129   (CONST&PUSH 33)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
131   (CALLS2 136)                        ; SYSTEM::%PUT
133   (CONST&PUSH 32)                     ; BKPT-FUNCTION
135   (CONST&PUSH 34)                     ; #<COMPILED-CLOSURE BKPT-FUNCTION>
137   (CALLS2 130)                        ; SYSTEM::%PUTD
139   (CONST&PUSH 32)                     ; BKPT-FUNCTION
141   (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
142   (CONST&PUSH 0)                      ; BKPT
143   (CALLS2 136)                        ; SYSTEM::%PUT
145   (CONST&PUSH 16)                     ; BKPT-FORM
146   (CONST&PUSH 35)                     ; SYSTEM::DEFSTRUCT-WRITER
148   (CALLS2 137)                        ; REMPROP
150   (CONST&PUSH 16)                     ; BKPT-FORM
151   (CONST&PUSH 36)                     ; SYSTEM::SETF-EXPANDER
153   (CONST&PUSH 37)                     ; -1
155   (CONST&PUSH 38)                     ; 1
157   (CONST 39)                          ; #<COMPILED-CLOSURE SETF-BKPT-FORM>
159   (LIST*&PUSH 2)
161   (CALLS2 136)                        ; SYSTEM::%PUT
163   (CONST&PUSH 16)                     ; BKPT-FORM
164   (CONST&PUSH 40)                     ; SETF
166   (NIL&PUSH)
167   (CALL 3 41)                         ; SYSTEM::%SET-DOCUMENTATION
170   (CONST&PUSH 16)                     ; BKPT-FORM
171   (CONST&PUSH 35)                     ; SYSTEM::DEFSTRUCT-WRITER
173   (CONST&PUSH 0)                      ; BKPT
174   (CALLS2 136)                        ; SYSTEM::%PUT
176   (CONST&PUSH 22)                     ; BKPT-FILE
177   (CONST&PUSH 35)                     ; SYSTEM::DEFSTRUCT-WRITER
179   (CALLS2 137)                        ; REMPROP
181   (CONST&PUSH 22)                     ; BKPT-FILE
182   (CONST&PUSH 36)                     ; SYSTEM::SETF-EXPANDER
184   (CONST&PUSH 37)                     ; -1
186   (CONST&PUSH 38)                     ; 1
188   (CONST 42)                          ; #<COMPILED-CLOSURE SETF-BKPT-FILE>
190   (LIST*&PUSH 2)
192   (CALLS2 136)                        ; SYSTEM::%PUT
194   (CONST&PUSH 22)                     ; BKPT-FILE
195   (CONST&PUSH 40)                     ; SETF
197   (NIL&PUSH)
198   (CALL 3 41)                         ; SYSTEM::%SET-DOCUMENTATION
201   (CONST&PUSH 22)                     ; BKPT-FILE
202   (CONST&PUSH 35)                     ; SYSTEM::DEFSTRUCT-WRITER
204   (CONST&PUSH 0)                      ; BKPT
205   (CALLS2 136)                        ; SYSTEM::%PUT
207   (CONST&PUSH 27)                     ; BKPT-FILE-LINE
208   (CONST&PUSH 35)                     ; SYSTEM::DEFSTRUCT-WRITER
210   (CALLS2 137)                        ; REMPROP
212   (CONST&PUSH 27)                     ; BKPT-FILE-LINE
213   (CONST&PUSH 36)                     ; SYSTEM::SETF-EXPANDER
215   (CONST&PUSH 37)                     ; -1
217   (CONST&PUSH 38)                     ; 1
219   (CONST 43)                          ; #<COMPILED-CLOSURE SETF-BKPT-FILE-LINE>
221   (LIST*&PUSH 2)
223   (CALLS2 136)                        ; SYSTEM::%PUT
225   (CONST&PUSH 27)                     ; BKPT-FILE-LINE
226   (CONST&PUSH 40)                     ; SETF
228   (NIL&PUSH)
229   (CALL 3 41)                         ; SYSTEM::%SET-DOCUMENTATION
232   (CONST&PUSH 27)                     ; BKPT-FILE-LINE
233   (CONST&PUSH 35)                     ; SYSTEM::DEFSTRUCT-WRITER
235   (CONST&PUSH 0)                      ; BKPT
236   (CALLS2 136)                        ; SYSTEM::%PUT
238   (CONST&PUSH 32)                     ; BKPT-FUNCTION
240   (CONST&PUSH 35)                     ; SYSTEM::DEFSTRUCT-WRITER
242   (CALLS2 137)                        ; REMPROP
244   (CONST&PUSH 32)                     ; BKPT-FUNCTION
246   (CONST&PUSH 36)                     ; SYSTEM::SETF-EXPANDER
248   (CONST&PUSH 37)                     ; -1
250   (CONST&PUSH 38)                     ; 1
252   (CONST 44)                          ; #<COMPILED-CLOSURE SETF-BKPT-FUNCTION>
254   (LIST*&PUSH 2)
256   (CALLS2 136)                        ; SYSTEM::%PUT
258   (CONST&PUSH 32)                     ; BKPT-FUNCTION
260   (CONST&PUSH 40)                     ; SETF
262   (NIL&PUSH)
263   (CALL 3 41)                         ; SYSTEM::%SET-DOCUMENTATION
266   (CONST&PUSH 32)                     ; BKPT-FUNCTION
268   (CONST&PUSH 35)                     ; SYSTEM::DEFSTRUCT-WRITER
270   (CONST&PUSH 0)                      ; BKPT
271   (CALLS2 136)                        ; SYSTEM::%PUT
273   (CONST&PUSH 0)                      ; BKPT
274   (CONST&PUSH 45)                     ; STRUCTURE
276   (NIL&PUSH)
277   (CALL 3 41)                         ; SYSTEM::%SET-DOCUMENTATION
280   (CONST 0)                           ; BKPT
281   (SKIP&RET 1)


Disassembly of function MAKE-BKPT
(CONST 0) = :FORM
(CONST 1) = :FILE
(CONST 2) = :FILE-LINE
(CONST 3) = :FUNCTION
(CONST 4) = FORM
(CONST 5) = 4
(CONST 6) = 0
(CONST 7) = SYSTEM::%SETNTH
(CONST 8) = 1
(CONST 9) = 2
(CONST 10) = 3
0 required arguments
0 optional arguments
No rest parameter
4 keyword parameters: :FORM, :FILE, :FILE-LINE, :FUNCTION.
reads special variable: (FORM)
29 byte-code instructions:
0     (JMPIFBOUNDP 4 L4)
3     (NIL)
4     L4
4     (BIND 4)                            ; FORM
6     (UNBOUND->NIL 6)
8     (UNBOUND->NIL 5)
10    (UNBOUND->NIL 4)
12    (CONST&PUSH 5)                      ; 4
13    (PUSH-UNBOUND 1)
15    (CALLS1&PUSH 157)                   ; MAKE-LIST
17    (CONST&PUSH 6)                      ; 0
18    (LOAD&PUSH 1)
19    (GETVALUE&PUSH 4)                   ; FORM
21    (CALL 3 7)                          ; SYSTEM::%SETNTH
24    (CONST&PUSH 8)                      ; 1
25    (LOAD&PUSH 1)
26    (LOAD&PUSH 9)
27    (CALL 3 7)                          ; SYSTEM::%SETNTH
30    (CONST&PUSH 9)                      ; 2
31    (LOAD&PUSH 1)
32    (LOAD&PUSH 8)
33    (CALL 3 7)                          ; SYSTEM::%SETNTH
36    (CONST&PUSH 10)                     ; 3
37    (LOAD&PUSH 1)
38    (LOAD&PUSH 7)
39    (CALL 3 7)                          ; SYSTEM::%SETNTH
42    (POP)
43    (UNBIND1)
44    (SKIP&RET 5)


Disassembly of function COPY-BKPT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS1 158)                        ; COPY-LIST
3     (SKIP&RET 2)


Disassembly of function BKPT-FORM
(CONST 0) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function BKPT-FILE
(CONST 0) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function BKPT-FILE-LINE
(CONST 0) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function BKPT-FUNCTION
(CONST 0) = 3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 3
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function SETF-BKPT-FORM
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 0
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function SETF-BKPT-FILE
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 1
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function SETF-BKPT-FILE-LINE
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 2
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function SETF-BKPT-FUNCTION
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 3
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function #:|(DEFUN *BREAK-POINTS* (FORM) ...)-51|
(CONST 0) = *BREAK-POINTS*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *BREAK-POINTS*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *BREAK-POINTS*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *BREAK-POINTS*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *BREAK-POINTS*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *BREAK-POINTS*
8     (SKIP&RET 1)


Disassembly of function *BREAK-POINTS*
(CONST 0) = FORM
(CONST 1) = *BREAK-POINTS*
(CONST 2) = CAR
(CONST 3) = POS
(CONST 4) = #<COMPILED-CLOSURE *BREAK-POINTS*-1>
(CONST 5) = *STANDARD-OUTPUT*
(CONST 6) = BREAK-DBM-LOOP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (POS *STANDARD-OUTPUT* *BREAK-POINTS* FORM)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 0)                   ; FORM
5     (GETVALUE&PUSH 1)                   ; *BREAK-POINTS*
7     (PUSH-UNBOUND 6)
9     (CONST 2)                           ; CAR
10    (STORE 2)
11    (CALLS2 95)                         ; POSITION
13    (BIND 3)                            ; POS
15    (CONST&PUSH 4)                      ; #<COMPILED-CLOSURE *BREAK-POINTS*-1>
16    (GETVALUE&PUSH 5)                   ; *STANDARD-OUTPUT*
18    (GETVALUE&PUSH 3)                   ; POS
20    (CALLSR 2 21)                       ; FUNCALL
23    (GETVALUE&PUSH 1)                   ; *BREAK-POINTS*
25    (GETVALUE&PUSH 3)                   ; POS
27    (CALLSR&PUSH 1 1)                   ; AREF
30    (CALL1 6)                           ; BREAK-DBM-LOOP
32    (UNBIND 2)
34    (SKIP&RET 2)


Disassembly of function *BREAK-POINTS*-1
(CONST 0) = "Bkpt "
(CONST 1) = #\:
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
12 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Bkpt "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\:
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE LOAD EVAL) (DEFSTRUCT # LINE ...))-52|
(CONST 0) = LINE-INFO
(CONST 1) = STRUCTURE-OBJECT
(CONST 2) = SYSTEM::DEFSTRUCT-DESCRIPTION
(CONST 3) = 0
(CONST 4) = MAKE-LINE-INFO
(CONST 5) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 6) = #<COMPILED-CLOSURE MAKE-LINE-INFO>
(CONST 7) = LIST
(CONST 8) = (#(LINE (:LINE) 0 (NIL) NIL T NIL) #(FILE (:FILE) 1 (NIL) NIL T NIL))
(CONST 9) = (INLINE COPY-LINE-INFO)
(CONST 10) = COPY-LINE-INFO
(CONST 11) = SYSTEM::INLINE-EXPANSION
(CONST 12) = 
((STRUCTURE) (DECLARE (SYSTEM::IN-DEFUN COPY-LINE-INFO))
 (BLOCK COPY-LINE-INFO (COPY-LIST STRUCTURE)))
(CONST 13) = #<COMPILED-CLOSURE COPY-LINE-INFO>
(CONST 14) = (FUNCTION LINE-INFO-LINE (LINE-INFO) T)
(CONST 15) = (INLINE LINE-INFO-LINE)
(CONST 16) = LINE-INFO-LINE
(CONST 17) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN LINE-INFO-LINE))
 (BLOCK LINE-INFO-LINE (THE T (NTH 0 SYSTEM::OBJECT))))
(CONST 18) = #<COMPILED-CLOSURE LINE-INFO-LINE>
(CONST 19) = SYSTEM::DEFSTRUCT-READER
(CONST 20) = (FUNCTION LINE-INFO-FILE (LINE-INFO) T)
(CONST 21) = (INLINE LINE-INFO-FILE)
(CONST 22) = LINE-INFO-FILE
(CONST 23) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN LINE-INFO-FILE))
 (BLOCK LINE-INFO-FILE (THE T (NTH 1 SYSTEM::OBJECT))))
(CONST 24) = #<COMPILED-CLOSURE LINE-INFO-FILE>
(CONST 25) = SYSTEM::DEFSTRUCT-WRITER
(CONST 26) = SYSTEM::SETF-EXPANDER
(CONST 27) = -1
(CONST 28) = 1
(CONST 29) = #<COMPILED-CLOSURE SETF-LINE-INFO-LINE>
(CONST 30) = SETF
(CONST 31) = SYSTEM::%SET-DOCUMENTATION
(CONST 32) = #<COMPILED-CLOSURE SETF-LINE-INFO-FILE>
(CONST 33) = STRUCTURE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
109 byte-code instructions:
0     (CONST&PUSH 0)                      ; LINE-INFO
1     (CONST&PUSH 1)                      ; STRUCTURE-OBJECT
2     (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
3     (PUSH-UNBOUND 1)
5     (CALLS2&PUSH 132)                   ; GET
7     (CONST 3)                           ; 0
8     (SVREF)
9     (CONS&PUSH)
10    (CONST&PUSH 4)                      ; MAKE-LINE-INFO
11    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
13    (CONST&PUSH 4)                      ; MAKE-LINE-INFO
14    (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE MAKE-LINE-INFO>
15    (CALLS2 130)                        ; SYSTEM::%PUTD
17    (CONST&PUSH 0)                      ; LINE-INFO
18    (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
19    (LOAD&PUSH 2)
20    (CONST&PUSH 7)                      ; LIST
21    (CONST&PUSH 4)                      ; MAKE-LINE-INFO
22    (CONST&PUSH 8)                      ; (#(LINE # 0 ...) #(FILE # 1 ...))
23    (CALLSR&PUSH 4 0)                   ; VECTOR
26    (CALLS2 136)                        ; SYSTEM::%PUT
28    (SKIP 1)
30    (CONST&PUSH 9)                      ; (INLINE COPY-LINE-INFO)
31    (CALLS1 90)                         ; PROCLAIM
33    (CONST&PUSH 10)                     ; COPY-LINE-INFO
34    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
36    (CONST&PUSH 10)                     ; COPY-LINE-INFO
37    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
38    (CONST&PUSH 12)                     ; ((STRUCTURE) (DECLARE #) ...)
39    (CALLS2 136)                        ; SYSTEM::%PUT
41    (CONST&PUSH 10)                     ; COPY-LINE-INFO
42    (CONST&PUSH 13)                     ; #<COMPILED-CLOSURE COPY-LINE-INFO>
43    (CALLS2 130)                        ; SYSTEM::%PUTD
45    (CONST&PUSH 14)                     ; (FUNCTION LINE-INFO-LINE ...)
46    (CALLS1 90)                         ; PROCLAIM
48    (CONST&PUSH 15)                     ; (INLINE LINE-INFO-LINE)
49    (CALLS1 90)                         ; PROCLAIM
51    (CONST&PUSH 16)                     ; LINE-INFO-LINE
52    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
54    (CONST&PUSH 16)                     ; LINE-INFO-LINE
55    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
56    (CONST&PUSH 17)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
57    (CALLS2 136)                        ; SYSTEM::%PUT
59    (CONST&PUSH 16)                     ; LINE-INFO-LINE
60    (CONST&PUSH 18)                     ; #<COMPILED-CLOSURE LINE-INFO-LINE>
61    (CALLS2 130)                        ; SYSTEM::%PUTD
63    (CONST&PUSH 16)                     ; LINE-INFO-LINE
64    (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
65    (CONST&PUSH 0)                      ; LINE-INFO
66    (CALLS2 136)                        ; SYSTEM::%PUT
68    (CONST&PUSH 20)                     ; (FUNCTION LINE-INFO-FILE ...)
69    (CALLS1 90)                         ; PROCLAIM
71    (CONST&PUSH 21)                     ; (INLINE LINE-INFO-FILE)
72    (CALLS1 90)                         ; PROCLAIM
74    (CONST&PUSH 22)                     ; LINE-INFO-FILE
75    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
77    (CONST&PUSH 22)                     ; LINE-INFO-FILE
78    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
79    (CONST&PUSH 23)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
80    (CALLS2 136)                        ; SYSTEM::%PUT
82    (CONST&PUSH 22)                     ; LINE-INFO-FILE
83    (CONST&PUSH 24)                     ; #<COMPILED-CLOSURE LINE-INFO-FILE>
84    (CALLS2 130)                        ; SYSTEM::%PUTD
86    (CONST&PUSH 22)                     ; LINE-INFO-FILE
87    (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
88    (CONST&PUSH 0)                      ; LINE-INFO
89    (CALLS2 136)                        ; SYSTEM::%PUT
91    (CONST&PUSH 16)                     ; LINE-INFO-LINE
92    (CONST&PUSH 25)                     ; SYSTEM::DEFSTRUCT-WRITER
93    (CALLS2 137)                        ; REMPROP
95    (CONST&PUSH 16)                     ; LINE-INFO-LINE
96    (CONST&PUSH 26)                     ; SYSTEM::SETF-EXPANDER
97    (CONST&PUSH 27)                     ; -1
98    (CONST&PUSH 28)                     ; 1
99    (CONST 29)                          ; #<COMPILED-CLOSURE SETF-LINE-INFO-LINE>
101   (LIST*&PUSH 2)
103   (CALLS2 136)                        ; SYSTEM::%PUT
105   (CONST&PUSH 16)                     ; LINE-INFO-LINE
106   (CONST&PUSH 30)                     ; SETF
108   (NIL&PUSH)
109   (CALL 3 31)                         ; SYSTEM::%SET-DOCUMENTATION
112   (CONST&PUSH 16)                     ; LINE-INFO-LINE
113   (CONST&PUSH 25)                     ; SYSTEM::DEFSTRUCT-WRITER
114   (CONST&PUSH 0)                      ; LINE-INFO
115   (CALLS2 136)                        ; SYSTEM::%PUT
117   (CONST&PUSH 22)                     ; LINE-INFO-FILE
118   (CONST&PUSH 25)                     ; SYSTEM::DEFSTRUCT-WRITER
119   (CALLS2 137)                        ; REMPROP
121   (CONST&PUSH 22)                     ; LINE-INFO-FILE
122   (CONST&PUSH 26)                     ; SYSTEM::SETF-EXPANDER
123   (CONST&PUSH 27)                     ; -1
124   (CONST&PUSH 28)                     ; 1
125   (CONST 32)                          ; #<COMPILED-CLOSURE SETF-LINE-INFO-FILE>
127   (LIST*&PUSH 2)
129   (CALLS2 136)                        ; SYSTEM::%PUT
131   (CONST&PUSH 22)                     ; LINE-INFO-FILE
132   (CONST&PUSH 30)                     ; SETF
134   (NIL&PUSH)
135   (CALL 3 31)                         ; SYSTEM::%SET-DOCUMENTATION
138   (CONST&PUSH 22)                     ; LINE-INFO-FILE
139   (CONST&PUSH 25)                     ; SYSTEM::DEFSTRUCT-WRITER
140   (CONST&PUSH 0)                      ; LINE-INFO
141   (CALLS2 136)                        ; SYSTEM::%PUT
143   (CONST&PUSH 0)                      ; LINE-INFO
144   (CONST&PUSH 33)                     ; STRUCTURE
146   (NIL&PUSH)
147   (CALL 3 31)                         ; SYSTEM::%SET-DOCUMENTATION
150   (CONST 0)                           ; LINE-INFO
151   (SKIP&RET 1)


Disassembly of function MAKE-LINE-INFO
(CONST 0) = :LINE
(CONST 1) = :FILE
(CONST 2) = 2
(CONST 3) = 0
(CONST 4) = SYSTEM::%SETNTH
(CONST 5) = 1
0 required arguments
0 optional arguments
No rest parameter
2 keyword parameters: :LINE, :FILE.
15 byte-code instructions:
0     (UNBOUND->NIL 2)
2     (UNBOUND->NIL 1)
4     (CONST&PUSH 2)                      ; 2
5     (PUSH-UNBOUND 1)
7     (CALLS1&PUSH 157)                   ; MAKE-LIST
9     (CONST&PUSH 3)                      ; 0
10    (LOAD&PUSH 1)
11    (LOAD&PUSH 5)
12    (CALL 3 4)                          ; SYSTEM::%SETNTH
15    (CONST&PUSH 5)                      ; 1
16    (LOAD&PUSH 1)
17    (LOAD&PUSH 4)
18    (CALL 3 4)                          ; SYSTEM::%SETNTH
21    (POP)
22    (SKIP&RET 3)


Disassembly of function COPY-LINE-INFO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS1 158)                        ; COPY-LIST
3     (SKIP&RET 2)


Disassembly of function LINE-INFO-LINE
(CONST 0) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function LINE-INFO-FILE
(CONST 0) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function SETF-LINE-INFO-LINE
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 0
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function SETF-LINE-INFO-FILE
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 1
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function #:|(DEFUN BREAK-FUNCTION (FUN &OPTIONAL # ...) ...)-53|
(CONST 0) = BREAK-FUNCTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BREAK-FUNCTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BREAK-FUNCTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BREAK-FUNCTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BREAK-FUNCTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BREAK-FUNCTION
8     (SKIP&RET 1)


Disassembly of function BREAK-FUNCTION
(CONST 0) = 0
(CONST 1) = FORM
(CONST 2) = DEBUG
(CONST 3) = #<COMPILED-CLOSURE BREAK-FUNCTION-1>
(CONST 4) = *STANDARD-OUTPUT*
(CONST 5) = MSTRINGP
(CONST 6) = $SCONCAT
(CONST 7) = JOE
(CONST 8) = MAXIMA
(CONST 9) = V
(CONST 10) = #<COMPILED-CLOSURE BREAK-FUNCTION-2>
(CONST 11) = #<COMPILED-CLOSURE BREAK-FUNCTION-3>
(CONST 12) = $CONCAT
(CONST 13) = (MEXPR MMACRO)
(CONST 14) = MGETL
(CONST 15) = GET-LINEINFO
(CONST 16) = SRC
(CONST 17) = FIXNUMP
(CONST 18) = FIRST-FORM-LINE
(CONST 19) = 1
(CONST 20) = #<COMPILED-CLOSURE BREAK-FUNCTION-4>
(CONST 21) = :FORM
(CONST 22) = :FILE-LINE
(CONST 23) = :FILE
(CONST 24) = :FUNCTION
(CONST 25) = MAKE-BKPT
(CONST 26) = INSERT-BREAK-POINT
(CONST 27) = N
(CONST 28) = #<COMPILED-CLOSURE BREAK-FUNCTION-5>
(CONST 29) = #<COMPILED-CLOSURE BREAK-FUNCTION-6>
1 required argument
2 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N FORM *STANDARD-OUTPUT* DEBUG)
writes special variables : (FORM DEBUG)
161 byte-code instructions:
0     L0
0     (NIL)
1     (MAKE-VECTOR1&PUSH 2)
3     (LOAD&STOREC 4 0 0)
7     (JMPIFBOUNDP 3 L11)
10    (CONST 0)                           ; 0
11    L11
11    (STOREC 0 1)
14    (UNBOUND->NIL 2)
16    (PUSH-NIL 3)
18    (NIL)
19    (BIND 1)                            ; FORM
21    (NIL&PUSH)
22    (GETVALUE 2)                        ; DEBUG
24    (JMPIF L35)
26    (CONST&PUSH 3)                      ; #<COMPILED-CLOSURE BREAK-FUNCTION-1>
27    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
29    (CALLSR 1 21)                       ; FUNCALL
32    (T)
33    (SETVALUE 2)                        ; DEBUG
35    L35
35    (LOADC&PUSH 7 0)
38    (CALLS2&JMPIF 7 L59)                ; STRINGP
41    (LOADC&PUSH 7 0)
44    (CALL1&JMPIFNOT 5 L238)             ; MSTRINGP
48    (LOADC&PUSH 7 0)
51    (CALL1 6)                           ; $SCONCAT
53    (STOREC 7 0)
56    (JMPIFNOT L238)
59    L59
59    (LOAD 7)
60    (MAKE-VECTOR1&PUSH 2)
62    (LOADC 8 0)
65    (STOREC 0 0)
68    (NIL)
69    (STOREC 0 1)
72    (LOAD 0)
73    (MAKE-VECTOR1&PUSH 2)
75    (NIL)
76    (STOREC 0 0)
79    (STOREC 0 1)
82    (BLOCK-OPEN 7 L236)
86    (CONST&PUSH 8)                      ; MAXIMA
87    (CALLS1&PUSH 204)                   ; FIND-PACKAGE
89    (NIL)
90    (BIND 9)                            ; V
92    (LOAD&PUSH 7)
93    (LOAD&PUSH 7)
94    (COPY-CLOSURE&PUSH 10 2)            ; #<COMPILED-CLOSURE BREAK-FUNCTION-2>
97    (LOAD&PUSH 4)
98    (CALLS1 225)                        ; SYSTEM::MAP-SYMBOLS
100   (UNBIND1)
101   (SKIP 1)
103   (CONST&PUSH 11)                     ; #<COMPILED-CLOSURE BREAK-FUNCTION-3>
104   (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
106   (LOADC&PUSH 14 0)
109   (CALLSR 2 21)                       ; FUNCALL
112   (NIL)
113   (BLOCK-CLOSE)
114   (SKIP 2)
116   (JMP L282)
119   L119
119   (CONST 0)                           ; 0
120   (JMP L177)
122   L122
122   (LOADC&PUSH 7 0)
125   (CONST&PUSH 19)                     ; 1
126   (PUSH-UNBOUND 1)
128   (JSR L0)
131   (JMP L282)
134   L134
134   (LOADC&PUSH 7 1)
137   (JMPIFEQTO 0 L122)                  ; 0
140   (CONST&PUSH 20)                     ; #<COMPILED-CLOSURE BREAK-FUNCTION-4>
141   (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
143   (LOADC&PUSH 9 1)
146   (LOADC&PUSH 10 0)
149   (CALL1&PUSH 6)                      ; $SCONCAT
151   (CALLSR 3 21)                       ; FUNCALL
154   (NIL)
155   (JMP L282)
158   L158
158   (LOAD&PUSH 4)
159   (CALLS1&STORE 149 0)                ; FIFTH
162   (PUSH)
163   (CALL1&JMPIF 17 L171)               ; FIXNUMP
166   (CONST&PUSH 0)                      ; 0
167   (LOAD&PUSH 5)
168   (CALLS1&STORE 148 0)                ; NTH
171   L171
171   (GETVALUE&PUSH 1)                   ; FORM
173   (LOAD&JMPIF 10 L119)
176   (LOAD 1)
177   L177
177   (PUSH)
178   (LOADC&PUSH 9 1)
181   (CALLSR&STORE 2 53 7)               ; +
185   (PUSH)
186   (CALL2 18)                          ; FIRST-FORM-LINE
188   (SETVALUE 1)                        ; FORM
190   (JMPIFNOT L134)
192   (CONST&PUSH 21)                     ; :FORM
193   (GETVALUE&PUSH 1)                   ; FORM
195   (CONST&PUSH 22)                     ; :FILE-LINE
196   (LOAD&PUSH 9)
197   (CONST&PUSH 23)                     ; :FILE
198   (CONST&PUSH 19)                     ; 1
199   (LOAD&PUSH 10)
200   (CALLS1&PUSH 148)                   ; NTH
202   (CONST&PUSH 24)                     ; :FUNCTION
203   (LOADC&PUSH 14 0)
206   (CALL&PUSH 8 25)                    ; MAKE-BKPT
209   (CALL1 26)                          ; INSERT-BREAK-POINT
211   (BIND 27)                           ; N
213   (CONST&PUSH 28)                     ; #<COMPILED-CLOSURE BREAK-FUNCTION-5>
214   (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
216   (GETVALUE&PUSH 27)                  ; N
218   (LOADC&PUSH 13 0)
221   (CALL1&PUSH 6)                      ; $SCONCAT
223   (CONST&PUSH 19)                     ; 1
224   (LOAD&PUSH 12)
225   (CALLS1&PUSH 148)                   ; NTH
227   (LOAD&PUSH 14)
228   (CALLSR 5 21)                       ; FUNCALL
231   (GETVALUE 27)                       ; N
233   (UNBIND1)
234   (JMP L282)
236   L236
236   (SKIP 2)
238   L238
238   (LOADC&PUSH 7 0)
241   (CALL1 12)                          ; $CONCAT
243   (STOREC 7 0)
246   (PUSH)
247   (CONST&PUSH 13)                     ; (MEXPR MMACRO)
248   (CALL2 14)                          ; MGETL
250   (CDR)
251   (CAR)
252   (STORE 5)
253   (JMPIFNOT L273)
255   (CDR)
256   (CDR)
257   (CAR)
258   (SETVALUE 1)                        ; FORM
260   (PUSH)
261   (CALL1 15)                          ; GET-LINEINFO
263   (STORE 4)
264   (JMPIFNOT L273)
266   (CDR)
267   (CDR)
268   (CAR&PUSH)
269   (JMPIFEQTO 16 L158)                 ; SRC
273   L273
273   (CONST&PUSH 29)                     ; #<COMPILED-CLOSURE BREAK-FUNCTION-6>
274   (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
276   (LOADC&PUSH 9 0)
279   (CALLSR 2 21)                       ; FUNCALL
282   L282
282   (SKIP 1)
284   (UNBIND1)
285   (SKIP&RET 8)


Disassembly of function BREAK-FUNCTION-1
(CONST 0) = "Turning on debugging debugmode(true)"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS1 140)                        ; FRESH-LINE
3     (CONST&PUSH 0)                      ; "Turning on debugging debugmode(true)"
4     (LOAD&PUSH 3)
5     (PUSH-UNBOUND 2)
7     (CALLS1 137)                        ; WRITE-STRING
9     (LOAD 1)
10    (SKIP&RET 3)


Disassembly of function BREAK-FUNCTION-2
(CONST 0) = NIL
(CONST 1) = NIL
(CONST 2) = V
(CONST 3) = SET-FULL-LINEINFO
(CONST 4) = 1
(CONST 5) = GET-LINEINFO
(CONST 6) = 0
(CONST 7) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
45 byte-code instructions:
0     (LOAD 1)
1     (BIND 2)                            ; V
3     (GETVALUE&PUSH 2)                   ; V
5     (CALL1 3)                           ; SET-FULL-LINEINFO
7     (STOREV 0 1)
10    (PUSH)
11    (CALLS2&JMPIFNOT 35 L75)            ; VECTORP
14    (LOADV&PUSH 0 1)
17    (CONST&PUSH 4)                      ; 1
18    (CALLSR&PUSH 1 1)                   ; AREF
21    (CALL1 5)                           ; GET-LINEINFO
23    (STOREV 0 2)
26    (JMPIFNOT L75)
28    (LOADV&PUSH 1 1)
31    (LOADV 0 2)
34    (CDR)
35    (CAR&PUSH)
36    (CALLS2&JMPIFNOT 2 L75)             ; EQUAL
39    (LOADV&PUSH 2 2)
42    (LOADV&PUSH 0 1)
45    (CONST&PUSH 6)                      ; 0
46    (CALLSR 1 1)                        ; AREF
49    (STOREV 1 2)
52    (PUSH)
53    (CALLSR&JMPIFNOT 1 50 L75)          ; >=
57    (LOADV&PUSH 2 2)
60    (LOADV&PUSH 1 2)
63    (LOADV&PUSH 0 1)
66    (CALLS2&PUSH 71)                    ; LENGTH
68    (CALLSR&PUSH 2 53)                  ; +
71    (CALLSR&JMPIF 1 49 L79)             ; <=
75    L75
75    (NIL)
76    (UNBIND1)
77    (SKIP&RET 2)
79    L79
79    (GETVALUE 2)                        ; V
81    (STOREV 2 1)
84    (LOADV&PUSH 2 2)
87    (LOADV&PUSH 1 2)
90    (CONST&PUSH 7)                      ; -1
91    (CALLSR 2 54)                       ; -
94    (STOREV 2 2)
97    (VALUES0)
98    (RETURN-FROM 1)


Disassembly of function BREAK-FUNCTION-3
(CONST 0) = "No line info for "
(CONST 1) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
12 byte-code instructions:
0     (CONST&PUSH 0)                      ; "No line info for "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\Space
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)


Disassembly of function BREAK-FUNCTION-4
(CONST 0) = " No instructions recorded for this line "
(CONST 1) = " of "
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 4)
1     (CALLS1 140)                        ; FRESH-LINE
3     (CONST&PUSH 0)                      ; " No instructions recorded for this line "
4     (LOAD&PUSH 5)
5     (PUSH-UNBOUND 2)
7     (CALLS1 137)                        ; WRITE-STRING
9     (LOAD&PUSH 3)
10    (LOAD&PUSH 5)
11    (CALLS1 132)                        ; PRINC
13    (CONST&PUSH 1)                      ; " of "
14    (LOAD&PUSH 5)
15    (PUSH-UNBOUND 2)
17    (CALLS1 137)                        ; WRITE-STRING
19    (LOAD&PUSH 2)
20    (LOAD&PUSH 5)
21    (CALLS1 132)                        ; PRINC
23    (LOAD 1)
24    (SKIP&RET 5)


Disassembly of function BREAK-FUNCTION-5
(CONST 0) = "Bkpt "
(CONST 1) = " for "
(CONST 2) = " (in "
(CONST 3) = " line "
(CONST 4) = 
") 
"
5 required arguments
0 optional arguments
Rest parameter
No keyword parameters
36 byte-code instructions:
0     (LOAD&PUSH 6)
1     (CALLS1 140)                        ; FRESH-LINE
3     (CONST&PUSH 0)                      ; "Bkpt "
4     (LOAD&PUSH 7)
5     (PUSH-UNBOUND 2)
7     (CALLS1 137)                        ; WRITE-STRING
9     (LOAD&PUSH 5)
10    (LOAD&PUSH 7)
11    (CALLS1 132)                        ; PRINC
13    (CONST&PUSH 1)                      ; " for "
14    (LOAD&PUSH 7)
15    (PUSH-UNBOUND 2)
17    (CALLS1 137)                        ; WRITE-STRING
19    (LOAD&PUSH 4)
20    (LOAD&PUSH 7)
21    (CALLS1 132)                        ; PRINC
23    (CONST&PUSH 2)                      ; " (in "
24    (LOAD&PUSH 7)
25    (PUSH-UNBOUND 2)
27    (CALLS1 137)                        ; WRITE-STRING
29    (LOAD&PUSH 3)
30    (LOAD&PUSH 7)
31    (CALLS1 132)                        ; PRINC
33    (CONST&PUSH 3)                      ; " line "
34    (LOAD&PUSH 7)
35    (PUSH-UNBOUND 2)
37    (CALLS1 137)                        ; WRITE-STRING
39    (LOAD&PUSH 2)
40    (LOAD&PUSH 7)
41    (CALLS1 132)                        ; PRINC
43    (CONST&PUSH 4)                      ; ") 
"
44    (LOAD&PUSH 7)
45    (PUSH-UNBOUND 2)
47    (CALLS1 137)                        ; WRITE-STRING
49    (LOAD 1)
50    (SKIP&RET 7)


Disassembly of function BREAK-FUNCTION-6
(CONST 0) = "No line info for "
(CONST 1) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
12 byte-code instructions:
0     (CONST&PUSH 0)                      ; "No line info for "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\Space
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)

WARNING in (DEFUN FIRST-FORM-LINE (FORM LINE &AUX ...) ...)-54 in lines 562..571 :
Function FIRST-FORM-LINE
 was already defined in lines 238..244

Disassembly of function #:|(DEFUN FIRST-FORM-LINE (FORM LINE &AUX ...) ...)-54|
(CONST 0) = FIRST-FORM-LINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIRST-FORM-LINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIRST-FORM-LINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIRST-FORM-LINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIRST-FORM-LINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIRST-FORM-LINE
8     (SKIP&RET 1)


Disassembly of function FIRST-FORM-LINE
(CONST 0) = FORM
(CONST 1) = GET-LINEINFO
(CONST 2) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
writes special variable : (V)
49 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; FORM
6     (JMPIFATOM L56)
8     (GETVALUE&PUSH 0)                   ; FORM
10    (CALL1 1)                           ; GET-LINEINFO
12    (STORE 0)
13    (JMPIFNOT L20)
15    (CAR&PUSH)
16    (LOAD&PUSH 6)
17    (CALLS2&JMPIF 1 L59)                ; EQL
20    L20
20    (NIL&PUSH)
21    (GETVALUE 0)                        ; FORM
23    (CDR&PUSH)
24    (LOAD 1)
25    (BIND 2)                            ; V
27    (LOAD&JMPIFNOT 3 L47)
30    L30
30    (LOAD&CAR&PUSH 3)
32    (LOAD 0)
33    (SETVALUE 2)                        ; V
35    (STORE 0)
36    (LOAD&PUSH 11)
37    (JSR L0)
39    (STORE 5)
40    (JMPIF L63)
42    (LOAD&CDR&STORE 3)
44    (LOAD&JMPIF 3 L30)
47    L47
47    (NIL)
48    (UNBIND1)
49    (SKIP 2)
51    L51
51    (SKIP 1)
53    (UNBIND1)
54    (SKIP&RET 3)
56    L56
56    (NIL)
57    (JMP L51)
59    L59
59    (GETVALUE 0)                        ; FORM
61    (JMP L51)
63    L63
63    (UNBIND1)
64    (SKIP 2)
66    (JMP L51)


Disassembly of function #:|(DEFUN MAKE-BREAK-POINT (FUN AR I) ...)-55|
(CONST 0) = MAKE-BREAK-POINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-BREAK-POINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-BREAK-POINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-BREAK-POINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-BREAK-POINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-BREAK-POINT
8     (SKIP&RET 1)


Disassembly of function MAKE-BREAK-POINT
(CONST 0) = GET-LINEINFO
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALLSR&PUSH 1 1)                   ; AREF
5     (LOAD&PUSH 0)
6     (CALL1&PUSH 0)                      ; GET-LINEINFO
8     (LOAD 0)
9     (JMPIFNOT1 L22)
11    (LOAD&PUSH 1)
12    (LOAD 1)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD&CAR&PUSH 2)
17    (LOAD&PUSH 8)
18    (LIST 4)
20    (SKIP&RET 6)
22    L22
22    (SKIP&RET 6)


Disassembly of function #:|(DEFUN DBM-UP (N &AUX # ...) ...)-56|
(CONST 0) = DBM-UP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DBM-UP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DBM-UP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DBM-UP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DBM-UP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DBM-UP
8     (SKIP&RET 1)


Disassembly of function DBM-UP
(CONST 0) = N
(CONST 1) = *CURRENT-FRAME*
(CONST 2) = *MLAMBDA-CALL-STACK*
(CONST 3) = M
(CONST 4) = 5
(CONST 5) = QUOT
(CONST 6) = 0
(CONST 7) = $FRAME
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M *MLAMBDA-CALL-STACK* *CURRENT-FRAME*)
writes special variables : (N M)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 1)                   ; *CURRENT-FRAME*
5     (GETVALUE&PUSH 2)                   ; *MLAMBDA-CALL-STACK*
7     (CALLS2 71)                         ; LENGTH
9     (BIND 3)                            ; M
11    (GETVALUE&PUSH 3)                   ; M
13    (CONST&PUSH 4)                      ; 5
14    (CALL2 5)                           ; QUOT
16    (SETVALUE 3)                        ; M
18    (GETVALUE&PUSH 0)                   ; N
20    (LOAD&PUSH 4)
21    (CALLSR 2 53)                       ; +
24    (SETVALUE 0)                        ; N
26    (PUSH)
27    (GETVALUE&PUSH 3)                   ; M
29    (CALLSR&JMPIF 1 48 L54)             ; >
33    (GETVALUE&PUSH 0)                   ; N
35    (CONST&PUSH 6)                      ; 0
36    (CALLSR&JMPIFNOT 1 47 L43)          ; <
40    (CONST 6)                           ; 0
41    (SETVALUE 0)                        ; N
43    L43
43    (GETVALUE&PUSH 0)                   ; N
45    (NIL&PUSH)
46    (CALL2 7)                           ; $FRAME
48    (UNBIND1)
49    (SKIP 1)
51    (UNBIND1)
52    (SKIP&RET 2)
54    L54
54    (GETVALUE 3)                        ; M
56    (SETVALUE 0)                        ; N
58    (JMP L43)


Disassembly of function #:|(DEFUN INSERT-BREAK-POINT (BPT &AUX AT) ...)-57|
(CONST 0) = INSERT-BREAK-POINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INSERT-BREAK-POINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSERT-BREAK-POINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INSERT-BREAK-POINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INSERT-BREAK-POINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INSERT-BREAK-POINT
8     (SKIP&RET 1)


Disassembly of function INSERT-BREAK-POINT
(CONST 0) = *BREAK-POINTS*
(CONST 1) = INIT-BREAK-POINTS
(CONST 2) = 3
(CONST 3) = BREAK-POINTS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*BREAK-POINTS*)
40 byte-code instructions:
0     (NIL&PUSH)
1     (GETVALUE 0)                        ; *BREAK-POINTS*
3     (JMPIF L7)
5     (CALL0 1)                           ; INIT-BREAK-POINTS
7     L7
7     (NIL&PUSH)
8     (GETVALUE&PUSH 0)                   ; *BREAK-POINTS*
10    (PUSH-UNBOUND 6)
12    (CALLS2&JMPIF 95 L27)               ; POSITION
15    (GETVALUE&PUSH 0)                   ; *BREAK-POINTS*
17    (CALLS2&PUSH 71)                    ; LENGTH
19    (NIL&PUSH)
20    (GETVALUE&PUSH 0)                   ; *BREAK-POINTS*
22    (PUSH-UNBOUND 1)
24    (CALLS1 28)                         ; VECTOR-PUSH-EXTEND
26    (POP)
27    L27
27    (STORE 0)
28    (CONST&PUSH 2)                      ; 3
29    (LOAD&PUSH 3)
30    (CALLS1&PUSH 148)                   ; NTH
32    (LOAD&PUSH 0)
33    (CONST&PUSH 3)                      ; BREAK-POINTS
34    (PUSH-UNBOUND 1)
36    (CALLS2&PUSH 132)                   ; GET
38    (LOAD&PUSH 1)
39    (CONST&PUSH 3)                      ; BREAK-POINTS
40    (LOAD&PUSH 4)
41    (LOAD 3)
42    (CONS&PUSH)
43    (CALLS2 136)                        ; SYSTEM::%PUT
45    (SKIP 2)
47    (GETVALUE&PUSH 0)                   ; *BREAK-POINTS*
49    (LOAD&PUSH 0)
50    (LOAD&PUSH 2)
51    (LOAD&PUSH 5)
52    (CALLSR 1 2)                        ; SYSTEM::STORE
55    (SKIP 1)
57    (POP)
58    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SHORT-NAME (NAME) ...)-58|
(CONST 0) = SHORT-NAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SHORT-NAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SHORT-NAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SHORT-NAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SHORT-NAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SHORT-NAME
8     (SKIP&RET 1)


Disassembly of function SHORT-NAME
(CONST 0) = NAME
(CONST 1) = #\/
(CONST 2) = POS
(CONST 3) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (POS NAME)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NAME
3     (CONST&PUSH 1)                      ; #\/
4     (GETVALUE&PUSH 0)                   ; NAME
6     (T&PUSH)
7     (PUSH-UNBOUND 5)
9     (CALLS2 95)                         ; POSITION
11    (BIND 2)                            ; POS
13    (GETVALUE 2)                        ; POS
15    (JMPIF L23)
17    (GETVALUE 0)                        ; NAME
19    (UNBIND1)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE&PUSH 0)                   ; NAME
25    (CONST&PUSH 3)                      ; 1
26    (GETVALUE&PUSH 2)                   ; POS
28    (CALLSR&PUSH 2 53)                  ; +
31    (PUSH-UNBOUND 1)
33    (CALLS2 69)                         ; SUBSEQ
35    (UNBIND1)
36    (JMP L20)


Disassembly of function #:|(DEFUN SHOW-BREAK-POINT (N &AUX DISABLED) ...)-59|
(CONST 0) = SHOW-BREAK-POINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SHOW-BREAK-POINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SHOW-BREAK-POINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SHOW-BREAK-POINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SHOW-BREAK-POINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SHOW-BREAK-POINT
8     (SKIP&RET 1)


Disassembly of function SHOW-BREAK-POINT
(CONST 0) = N
(CONST 1) = *BREAK-POINTS*
(CONST 2) = #<COMPILED-CLOSURE SHOW-BREAK-POINT-1>
(CONST 3) = *STANDARD-OUTPUT*
(CONST 4) = SHORT-NAME
(CONST 5) = #<COMPILED-CLOSURE SHOW-BREAK-POINT-2>
(CONST 6) = 2
(CONST 7) = RELATIVE-LINE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*STANDARD-OUTPUT* N *BREAK-POINTS*)
48 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (NIL&PUSH)
4     (GETVALUE&PUSH 1)                   ; *BREAK-POINTS*
6     (GETVALUE&PUSH 0)                   ; N
8     (CALLSR&PUSH 1 1)                   ; AREF
11    (LOAD 0)
12    (JMPIFNOT1 L62)
14    (CAR)
15    (JMPIF L21)
17    (T&STORE 1)
19    (LOAD&CDR&STORE 0)
21    L21
21    (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SHOW-BREAK-POINT-1>
22    (GETVALUE&PUSH 3)                   ; *STANDARD-OUTPUT*
24    (GETVALUE&PUSH 0)                   ; N
26    (LOAD 3)
27    (CDR)
28    (CAR&PUSH)
29    (CALL1&PUSH 4)                      ; SHORT-NAME
31    (LOAD 4)
32    (CDR)
33    (CDR)
34    (CAR&PUSH)
35    (LOAD&PUSH 6)
36    (CALLSR 5 21)                       ; FUNCALL
39    (LOAD 0)
40    (CDR)
41    (CDR)
42    (CDR)
43    (CAR&PUSH)
44    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE SHOW-BREAK-POINT-2>
45    (GETVALUE&PUSH 3)                   ; *STANDARD-OUTPUT*
47    (LOAD&PUSH 2)
48    (CONST&PUSH 6)                      ; 2
49    (LOAD&PUSH 5)
50    (CALLS1&PUSH 148)                   ; NTH
52    (CALL2&PUSH 7)                      ; RELATIVE-LINE
54    (LOAD&PUSH 3)
55    (CALLSR 3 21)                       ; FUNCALL
58    (SKIP 2)
60    (JMP L64)
62    L62
62    (SKIP 1)
64    L64
64    (SKIP 1)
66    (UNBIND1)
67    (SKIP&RET 2)


Disassembly of function SHOW-BREAK-POINT-1
(CONST 0) = "Bkpt "
(CONST 1) = ":("
(CONST 2) = " line "
(CONST 3) = #\)
(CONST 4) = "(disabled)"
4 required arguments
0 optional arguments
Rest parameter
No keyword parameters
37 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Bkpt "
1     (LOAD&PUSH 6)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 4)
7     (LOAD&PUSH 6)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; ":("
11    (LOAD&PUSH 6)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD&PUSH 3)
17    (LOAD&PUSH 6)
18    (CALLS1 132)                        ; PRINC
20    (CONST&PUSH 2)                      ; " line "
21    (LOAD&PUSH 6)
22    (PUSH-UNBOUND 2)
24    (CALLS1 137)                        ; WRITE-STRING
26    (LOAD&PUSH 2)
27    (LOAD&PUSH 6)
28    (CALLS1 132)                        ; PRINC
30    (CONST&PUSH 3)                      ; #\)
31    (LOAD&PUSH 6)
32    (CALLS1 136)                        ; WRITE-CHAR
34    (LOAD 1)
35    (CAR)
36    (JMPIF L43)
38    (LOAD&CDR&STORE 1)
40    L40
40    (LOAD 1)
41    (SKIP&RET 6)
43    L43
43    (CONST&PUSH 4)                      ; "(disabled)"
44    (LOAD&PUSH 6)
45    (PUSH-UNBOUND 2)
47    (CALLS1 137)                        ; WRITE-STRING
49    (JMP L40)


Disassembly of function SHOW-BREAK-POINT-2
(CONST 0) = "(line "
(CONST 1) = " of "
(CONST 2) = #\)
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; "(line "
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 5)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; " of "
11    (LOAD&PUSH 5)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 5)
18    (CALLS1 132)                        ; PRINC
20    (CONST&PUSH 2)                      ; #\)
21    (LOAD&PUSH 5)
22    (CALLS1 136)                        ; WRITE-CHAR
24    (LOAD 1)
25    (SKIP&RET 5)


Disassembly of function #:|(DEFUN RELATIVE-LINE (FUN L) ...)-60|
(CONST 0) = RELATIVE-LINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RELATIVE-LINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RELATIVE-LINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RELATIVE-LINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RELATIVE-LINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RELATIVE-LINE
8     (SKIP&RET 1)


Disassembly of function RELATIVE-LINE
(CONST 0) = L
(CONST 1) = SET-FULL-LINEINFO
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (LOAD&PUSH 5)
4     (CALL1&PUSH 1)                      ; SET-FULL-LINEINFO
6     (LOAD&JMPIF 0 L15)
9     (CONST 2)                           ; 0
10    (SKIP 1)
12    L12
12    (UNBIND1)
13    (SKIP&RET 3)
15    L15
15    (GETVALUE&PUSH 0)                   ; L
17    (LOAD&PUSH 1)
18    (CONST&PUSH 2)                      ; 0
19    (CALLSR&PUSH 1 1)                   ; AREF
22    (CALLSR 1 54)                       ; -
25    (SKIP 1)
27    (JMP L12)


Disassembly of function #:|(DEFUN ITERATE-OVER-BKPTS (L ACTION) ...)-61|
(CONST 0) = ITERATE-OVER-BKPTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ITERATE-OVER-BKPTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ITERATE-OVER-BKPTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ITERATE-OVER-BKPTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ITERATE-OVER-BKPTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ITERATE-OVER-BKPTS
8     (SKIP&RET 1)


Disassembly of function ITERATE-OVER-BKPTS
(CONST 0) = L
(CONST 1) = 0
(CONST 2) = *BREAK-POINTS*
(CONST 3) = #S(HASH-TABLE EQ (:SHOW . 80) (:DISABLE . 61) (:ENABLE . 49) (:DELETE . 35))
(CONST 4) = 3
(CONST 5) = BREAK-POINTS
(CONST 6) = SHOW-BREAK-POINT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L *BREAK-POINTS*)
103 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (CONST&PUSH 1)                      ; 0
4     (GETVALUE&PUSH 2)                   ; *BREAK-POINTS*
6     (CALLS2&PUSH 71)                    ; LENGTH
8     (JMP L133)
11    L11
11    (LOAD&PUSH 1)
12    (GETVALUE&PUSH 0)                   ; L
14    (PUSH-UNBOUND 3)
16    (CALLS1&JMPIF 180 L24)              ; MEMBER
19    (GETVALUE 0)                        ; L
21    (JMPIF L131)
24    L24
24    (GETVALUE&PUSH 2)                   ; *BREAK-POINTS*
26    (LOAD&PUSH 2)
27    (CALLSR&PUSH 1 1)                   ; AREF
30    (GETVALUE&PUSH 2)                   ; *BREAK-POINTS*
32    (LOAD 8)
33    (JMPHASH 3 L121 L70 L84 L96 L115)
37    L37
37    (LOAD&CDR&STORE 1)
39    (LOAD&JMPIFNOT 1 L77)
42    L42
42    (CONST&PUSH 4)                      ; 3
43    (LOAD&PUSH 2)
44    (CALLS1&PUSH 148)                   ; NTH
46    (LOAD&PUSH 4)
47    (CONST&PUSH 4)                      ; 3
48    (LOAD&PUSH 4)
49    (CALLS1&PUSH 148)                   ; NTH
51    (CONST&PUSH 5)                      ; BREAK-POINTS
52    (PUSH-UNBOUND 1)
54    (CALLS2&PUSH 132)                   ; GET
56    (PUSH-UNBOUND 7)
58    (CALLS2&PUSH 81)                    ; DELETE
60    (LOAD&PUSH 1)
61    (CONST&PUSH 5)                      ; BREAK-POINTS
62    (LOAD&PUSH 2)
63    (CALLS2 136)                        ; SYSTEM::%PUT
65    (SKIP 2)
67    (NIL)
68    (JMP L122)
70    L70
70    (LOAD 1)
71    (CAR)
72    (JMPIFNOT L37)
74    (LOAD&JMPIF 1 L42)
77    L77
77    (NIL)
78    (JMP L122)
80    L80
80    (LOAD 1)
81    (CDR)
82    (JMP L122)
84    L84
84    (LOAD 1)
85    (CAR)
86    (JMPIFNOT L80)
88    (LOAD 1)
89    (JMP L122)
91    L91
91    (NIL&PUSH)
92    (LOAD 2)
93    (CONS)
94    (JMP L122)
96    L96
96    (LOAD&JMPIFNOT 1 L102)
99    (CAR)
100   (JMPIF L91)
102   L102
102   (LOAD 1)
103   (JMP L122)
105   L105
105   (LOAD&PUSH 3)
106   (CALL1 6)                           ; SHOW-BREAK-POINT
108   (PUSH-UNBOUND 1)
110   (CALLS1 139)                        ; TERPRI
112   (LOAD 1)
113   (JMP L122)
115   L115
115   (LOAD&JMPIF 1 L105)
118   (LOAD 1)
119   (JMP L122)
121   L121
121   (NIL)
122   L122
122   (PUSH)
123   (LOAD&PUSH 1)
124   (LOAD&PUSH 5)
125   (LOAD&PUSH 2)
126   (CALLSR 1 2)                        ; SYSTEM::STORE
129   (SKIP 3)
131   L131
131   (LOAD&INC&STORE 1)
133   L133
133   (LOAD&PUSH 1)
134   (LOAD&PUSH 1)
135   (CALLSR&JMPIFNOT 1 50 L11)          ; >=
140   (NIL)
141   (SKIP 2)
143   (UNBIND1)
144   (SKIP&RET 3)


Disassembly of function #:|(DEFUN CURRENT-STEP-FUN (&AUX FUN) ...)-62|
(CONST 0) = CURRENT-STEP-FUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CURRENT-STEP-FUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CURRENT-STEP-FUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CURRENT-STEP-FUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CURRENT-STEP-FUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CURRENT-STEP-FUN
8     (SKIP&RET 1)


Disassembly of function CURRENT-STEP-FUN
(CONST 0) = 0
(CONST 1) = 100000
(CONST 2) = FRAME-INFO
(CONST 3) = SET-FULL-LINEINFO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (NIL&PUSH)
1     (CONST&PUSH 0)                      ; 0
2     (JMP L17)
4     L4
4     (LOAD 1)
5     (SKIP&RET 3)
7     L7
7     (LOAD&PUSH 1)
8     (CALLS2&JMPIFNOT 6 L15)             ; SYMBOLP
11    (LOAD&PUSH 1)
12    (CALL1&JMPIF 3 L4)                  ; SET-FULL-LINEINFO
15    L15
15    (LOAD&INC&STORE 0)
17    L17
17    (LOAD&PUSH 0)
18    (CONST&PUSH 1)                      ; 100000
19    (CALLSR&JMPIF 1 50 L29)             ; >=
23    (LOAD&PUSH 0)
24    (CALL1 2)                           ; FRAME-INFO
26    (STORE 1)
27    (JMPIF L7)
29    L29
29    (NIL)
30    (SKIP&RET 3)


Disassembly of function #:|(DEF-BREAK :BT '$BACKTRACE ...)-63|
(CONST 0) = :BT
(CONST 1) = $BACKTRACE
(CONST 2) = "Print a backtrace of the stack frames"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :BT
1     (CONST&PUSH 1)                      ; $BACKTRACE
2     (CONST&PUSH 2)                      ; "Print a backtrace of the stack frames"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :INFO #'(LAMBDA # #) ...)-64|
(CONST 0) = :INFO
(CONST 1) = #<COMPILED-CLOSURE #:|(DEF-BREAK :INFO #'(LAMBDA # #) ...)-64-1|>
(CONST 2) = "Print information about item"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :INFO
1     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :INFO #'(LAMBDA # #) ...)-64-1|>
2     (CONST&PUSH 2)                      ; "Print information about item"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :INFO #'(LAMBDA # #) ...)-64-1|
(CONST 0) = :BKPT
(CONST 1) = :SHOW
(CONST 2) = ITERATE-OVER-BKPTS
(CONST 3) = #<COMPILED-CLOSURE #:|(DEF-BREAK :INFO #'(LAMBDA # #) ...)-64-1-1|>
(CONST 4) = *STANDARD-OUTPUT*
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (*STANDARD-OUTPUT*)
13 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (LOAD&PUSH 1)
3     (JMPIFEQTO 0 L14)                   ; :BKPT
6     (CONST&PUSH 3)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :INFO #'(LAMBDA # #) ...)-64-1-1|>
7     (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
9     (CALLSR 1 21)                       ; FUNCALL
12    (SKIP&RET 2)
14    L14
14    (NIL&PUSH)
15    (CONST&PUSH 1)                      ; :SHOW
16    (CALL2 2)                           ; ITERATE-OVER-BKPTS
18    (VALUES0)
19    (SKIP&RET 2)


Disassembly of function #:|(DEF-BREAK :INFO #'(LAMBDA # #) ...)-64-1-1|
(CONST 0) = "usage: :info :bkpt -- show breakpoints"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "usage: :info :bkpt -- show breakpoints"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO LISP-QUIET (&REST L) ...)-65|
(CONST 0) = LISP-QUIET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISP-QUIET>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISP-QUIET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISP-QUIET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISP-QUIET>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; LISP-QUIET
10    (SKIP&RET 1)


Disassembly of function LISP-QUIET
(CONST 0) = L
(CONST 1) = ""
(CONST 2) = *MREAD-PROMPT*
(CONST 3) = PROGN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (*MREAD-PROMPT*)
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (BIND 0)                            ; L
4     (CONST 1)                           ; ""
5     (SETVALUE 2)                        ; *MREAD-PROMPT*
7     (CONST&PUSH 3)                      ; PROGN
8     (GETVALUE 0)                        ; L
10    (CONS&PUSH)
11    (CALLS1 91)                         ; EVAL
13    (UNBIND1)
14    (SKIP&RET 3)


Disassembly of function #:|(DEF-BREAK :LISP-QUIET 'LISP-QUIET ...)-66|
(CONST 0) = :LISP-QUIET
(CONST 1) = LISP-QUIET
(CONST 2) = "Evaluate the lisp form without printing a prompt"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :LISP-QUIET
1     (CONST&PUSH 1)                      ; LISP-QUIET
2     (CONST&PUSH 2)                      ; "Evaluate the lisp form without printing a prompt"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :LISP 'LISP-EVAL ...)-67|
(CONST 0) = :LISP
(CONST 1) = LISP-EVAL
(CONST 2) = "Evaluate the lisp form following on the line"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :LISP
1     (CONST&PUSH 1)                      ; LISP-EVAL
2     (CONST&PUSH 2)                      ; "Evaluate the lisp form following on the line"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO LISP-EVAL (&REST L) ...)-68|
(CONST 0) = LISP-EVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISP-EVAL>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISP-EVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISP-EVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISP-EVAL>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; LISP-EVAL
10    (SKIP&RET 1)


Disassembly of function LISP-EVAL
(CONST 0) = L
(CONST 1) = PROGN
(CONST 2) = V
(CONST 3) = *STANDARD-OUTPUT*
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (V *STANDARD-OUTPUT* L)
writes special variable : (V)
30 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (BIND 0)                            ; L
4     (CONST&PUSH 1)                      ; PROGN
5     (GETVALUE 0)                        ; L
7     (CONS&PUSH)
8     (CALLS1 91)                         ; EVAL
10    (MV-TO-LIST)
11    (PUSH)
12    (NIL)
13    (BIND 2)                            ; V
15    (JMP L33)
17    L17
17    (LOAD 3)
18    (CAR)
19    (SETVALUE 2)                        ; V
21    (GETVALUE&PUSH 3)                   ; *STANDARD-OUTPUT*
23    (CALLS1 140)                        ; FRESH-LINE
25    (GETVALUE&PUSH 2)                   ; V
27    (PUSH-UNBOUND 1)
29    (CALLS1 132)                        ; PRINC
31    (LOAD&CDR&STORE 3)
33    L33
33    (LOAD&PUSH 3)
34    (CALLS1&JMPIFNOT 146 L17)           ; ENDP
37    (NIL)
38    (UNBIND1)
39    (SKIP 1)
41    (UNBIND1)
42    (SKIP&RET 3)


Disassembly of function #:|(DEF-BREAK :DELETE #'(LAMBDA # # ...) ...)-69|
(CONST 0) = :DELETE
(CONST 1) = #<COMPILED-CLOSURE #:|(DEF-BREAK :DELETE #'(LAMBDA # # ...) ...)-69-1|>
(CONST 2) = 
"Delete all breakpoints, or if arguments are supplied delete the specified
breakpoints"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :DELETE
1     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :DELETE #'(LAMBDA # # ...) ...)-69-1|>
2     (CONST&PUSH 2)                      ; "Delete all breakpoints, or if arguments are supplied delete the specified
breakpoints"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :DELETE #'(LAMBDA # # ...) ...)-69-1|
(CONST 0) = L
(CONST 1) = :DELETE
(CONST 2) = ITERATE-OVER-BKPTS
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (L)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (CONST&PUSH 1)                      ; :DELETE
6     (CALL2 2)                           ; ITERATE-OVER-BKPTS
8     (VALUES0)
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEF-BREAK :FRAME '$FRAME ...)-70|
(CONST 0) = :FRAME
(CONST 1) = $FRAME
(CONST 2) = 
"With an argument print the selected stack frame.
Otherwise the current frame."
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :FRAME
1     (CONST&PUSH 1)                      ; $FRAME
2     (CONST&PUSH 2)                      ; "With an argument print the selected stack frame.
Otherwise the current frame."
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :RESUME #'(LAMBDA NIL :RESUME) ...)-71|
(CONST 0) = :RESUME
(CONST 1) = #<COMPILED-CLOSURE #:|(DEF-BREAK :RESUME #'(LAMBDA NIL :RESUME) ...)-71-1|>
(CONST 2) = "Continue the computation."
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :RESUME
1     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :RESUME #'(LAMBDA NIL :RESUME) ...)-71-1|>
2     (CONST&PUSH 2)                      ; "Continue the computation."
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :RESUME #'(LAMBDA NIL :RESUME) ...)-71-1|
(CONST 0) = :RESUME
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; :RESUME
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :CONTINUE #'(LAMBDA NIL :RESUME) ...)-72|
(CONST 0) = :CONTINUE
(CONST 1) = #<COMPILED-CLOSURE #:|(DEF-BREAK :CONTINUE #'(LAMBDA NIL :RESUME) ...)-72-1|>
(CONST 2) = "Continue the computation."
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :CONTINUE
1     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :CONTINUE #'(LAMBDA NIL :RESUME) ...)-72-1|>
2     (CONST&PUSH 2)                      ; "Continue the computation."
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :CONTINUE #'(LAMBDA NIL :RESUME) ...)-72-1|
(CONST 0) = :RESUME
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; :RESUME
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :DISABLE #'(LAMBDA # # ...) ...)-73|
(CONST 0) = :DISABLE
(CONST 1) = #<COMPILED-CLOSURE #:|(DEF-BREAK :DISABLE #'(LAMBDA # # ...) ...)-73-1|>
(CONST 2) = "Disable the specified breakpoints, or all if none are specified"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :DISABLE
1     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :DISABLE #'(LAMBDA # # ...) ...)-73-1|>
2     (CONST&PUSH 2)                      ; "Disable the specified breakpoints, or all if none are specified"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :DISABLE #'(LAMBDA # # ...) ...)-73-1|
(CONST 0) = L
(CONST 1) = :DISABLE
(CONST 2) = ITERATE-OVER-BKPTS
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (L)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (CONST&PUSH 1)                      ; :DISABLE
6     (CALL2 2)                           ; ITERATE-OVER-BKPTS
8     (VALUES0)
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEF-BREAK :ENABLE #'(LAMBDA # # ...) ...)-74|
(CONST 0) = :ENABLE
(CONST 1) = #<COMPILED-CLOSURE #:|(DEF-BREAK :ENABLE #'(LAMBDA # # ...) ...)-74-1|>
(CONST 2) = "Enable the specified breakpoints, or all if none are specified"
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :ENABLE
1     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE #:|(DEF-BREAK :ENABLE #'(LAMBDA # # ...) ...)-74-1|>
2     (CONST&PUSH 2)                      ; "Enable the specified breakpoints, or all if none are specified"
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-BREAK :ENABLE #'(LAMBDA # # ...) ...)-74-1|
(CONST 0) = L
(CONST 1) = :ENABLE
(CONST 2) = ITERATE-OVER-BKPTS
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (L)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (CONST&PUSH 1)                      ; :ENABLE
6     (CALL2 2)                           ; ITERATE-OVER-BKPTS
8     (VALUES0)
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEF-BREAK :BREAK 'DO-BREAK ...)-75|
(CONST 0) = :BREAK
(CONST 1) = DO-BREAK
(CONST 2) = 
"Set a breakpoint in the specified FUNCTION at the
specified LINE offset from the beginning of the function.
If FUNCTION is given as a string, then it is presumed to be
a FILE and LINE is the offset from the beginning of the file."
(CONST 3) = DEF-BREAK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :BREAK
1     (CONST&PUSH 1)                      ; DO-BREAK
2     (CONST&PUSH 2)                      ; "Set a breakpoint in the specified FUNCTION at the
specified LINE offset from the beginning of the function.
If FUNCTION is given as a string, then it is presumed to be
a FILE and LINE is the offset from the beginning of the file."
3     (CALL 3 3)                          ; DEF-BREAK
6     (SKIP&RET 1)


Disassembly of function #:|(SETF (GET :BREAK 'MAXIMA-READ) T)-76|
(CONST 0) = :BREAK
(CONST 1) = MAXIMA-READ
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; :BREAK
1     (CONST&PUSH 1)                      ; MAXIMA-READ
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO DO-BREAK (&OPTIONAL NAME &REST ...) ...)-77|
(CONST 0) = DO-BREAK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DO-BREAK>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DO-BREAK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DO-BREAK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DO-BREAK>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DO-BREAK
10    (SKIP&RET 1)


Disassembly of function DO-BREAK
(CONST 0) = NAME
(CONST 1) = L
(CONST 2) = *LAST-DBL-BREAK*
(CONST 3) = 3
(CONST 4) = 2
(CONST 5) = BREAK-FUNCTION
(CONST 6) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (*LAST-DBL-BREAK* L NAME)
34 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR)
3     (BIND 0)                            ; NAME
5     (LOAD 5)
6     (CDR)
7     (CDR)
8     (BIND 1)                            ; L
10    (GETVALUE 0)                        ; NAME
12    (JMPIFNOT L30)
14    (CONST&PUSH 5)                      ; BREAK-FUNCTION
15    (CONST&PUSH 6)                      ; QUOTE
16    (GETVALUE&PUSH 0)                   ; NAME
18    (LIST&PUSH 2)
20    (GETVALUE 1)                        ; L
22    (LIST*&PUSH 2)
24    (CALLS1 91)                         ; EVAL
26    L26
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (GETVALUE 2)                        ; *LAST-DBL-BREAK*
32    (JMPIFNOT1 L26)
34    (CONST&PUSH 3)                      ; 3
35    (GETVALUE&PUSH 2)                   ; *LAST-DBL-BREAK*
37    (CALLS1&PUSH 148)                   ; NTH
39    (LOAD&PUSH 0)
40    (CONST&PUSH 4)                      ; 2
41    (GETVALUE&PUSH 2)                   ; *LAST-DBL-BREAK*
43    (CALLS1&PUSH 148)                   ; NTH
45    (T&PUSH)
46    (CALL 3 5)                          ; BREAK-FUNCTION
49    (SKIP 1)
51    (JMP L26)


Disassembly of function #:|(DEFUN GET-LINEINFO (FORM) ...)-78|
(CONST 0) = GET-LINEINFO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GET-LINEINFO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GET-LINEINFO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GET-LINEINFO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GET-LINEINFO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GET-LINEINFO
8     (SKIP&RET 1)


Disassembly of function GET-LINEINFO
(CONST 0) = FORM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (JMPIFATOM L37)
7     (GETVALUE 0)                        ; FORM
9     (CAR)
10    (CDR)
11    (CAR)
12    (JMPIFCONSP L32)
14    (GETVALUE 0)                        ; FORM
16    (CAR)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CALLS2 4)                          ; CONSP
22    (JMPIFNOT1 L38)
24    (GETVALUE 0)                        ; FORM
26    (CAR)
27    (CDR)
28    L28
28    (CDR)
29    (CAR)
30    (JMP L38)
32    L32
32    (GETVALUE 0)                        ; FORM
34    (CAR)
35    (JMP L28)
37    L37
37    (NIL)
38    L38
38    (UNBIND1)
39    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RESTORE-BINDINGS NIL ...)-79|
(CONST 0) = RESTORE-BINDINGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESTORE-BINDINGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESTORE-BINDINGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESTORE-BINDINGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESTORE-BINDINGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESTORE-BINDINGS
8     (SKIP&RET 1)


Disassembly of function RESTORE-BINDINGS
(CONST 0) = *DIFF-BINDLIST*
(CONST 1) = *DIFF-MSPECLIST*
(CONST 2) = MBIND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*DIFF-MSPECLIST* *DIFF-BINDLIST*)
writes special variables : (*DIFF-MSPECLIST* *DIFF-BINDLIST*)
8 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *DIFF-BINDLIST*
2     (GETVALUE&PUSH 1)                   ; *DIFF-MSPECLIST*
4     (NIL&PUSH)
5     (CALL 3 2)                          ; MBIND
8     (NIL)
9     (SETVALUE 0)                        ; *DIFF-BINDLIST*
11    (SETVALUE 1)                        ; *DIFF-MSPECLIST*
13    (SKIP&RET 1)


Disassembly of function #:|(DEFUN REMOVE-BINDINGS (THE-BINDLIST) ...)-80|
(CONST 0) = REMOVE-BINDINGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOVE-BINDINGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOVE-BINDINGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOVE-BINDINGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOVE-BINDINGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOVE-BINDINGS
8     (SKIP&RET 1)


Disassembly of function REMOVE-BINDINGS
(CONST 0) = BINDLIST
(CONST 1) = V
(CONST 2) = VAR
(CONST 3) = *DIFF-BINDLIST*
(CONST 4) = *DIFF-MSPECLIST*
(CONST 5) = MSPECLIST
(CONST 6) = MUNBOUND
(CONST 7) = $VALUES
(CONST 8) = 1
(CONST 9) = DELQ
(CONST 10) = MUNBINDP
(CONST 11) = MSET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($VALUES MUNBOUND MSPECLIST *DIFF-MSPECLIST* VAR *DIFF-BINDLIST* V BINDLIST)
writes special variables : (V BINDLIST MSPECLIST *DIFF-MSPECLIST* *DIFF-BINDLIST* VAR)
59 byte-code instructions:
0     (GETVALUE 0)                        ; BINDLIST
2     (BIND 1)                            ; V
4     (NIL)
5     (BIND 2)                            ; VAR
7     (GETVALUE 1)                        ; V
9     (JMPIFNOT L79)
12    L12
12    (GETVALUE 1)                        ; V
14    (JMPIFNOT L79)
16    (GETVALUE&PUSH 1)                   ; V
18    (LOAD 8)
19    (JMPIFEQ L79)
21    (GETVALUE 1)                        ; V
23    (CAR)
24    (SETVALUE 2)                        ; VAR
26    (PUSH)
27    (GETVALUE 3)                        ; *DIFF-BINDLIST*
29    (CONS)
30    (SETVALUE 3)                        ; *DIFF-BINDLIST*
32    (GETVALUE&PUSH 2)                   ; VAR
34    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
36    (GETVALUE 4)                        ; *DIFF-MSPECLIST*
38    (CONS)
39    (SETVALUE 4)                        ; *DIFF-MSPECLIST*
41    (GETVALUE 5)                        ; MSPECLIST
43    (CAR&PUSH)
44    (GETVALUE 6)                        ; MUNBOUND
46    (JMPIFEQ L84)
48    (T)
49    (BIND 10)                           ; MUNBINDP
51    (GETVALUE&PUSH 2)                   ; VAR
53    (GETVALUE 5)                        ; MSPECLIST
55    (CAR&PUSH)
56    (CALL2 11)                          ; MSET
58    (UNBIND1)
59    L59
59    (GETVALUE 5)                        ; MSPECLIST
61    (CDR)
62    (SETVALUE 5)                        ; MSPECLIST
64    (GETVALUE 0)                        ; BINDLIST
66    (CDR)
67    (SETVALUE 0)                        ; BINDLIST
69    (GETVALUE 1)                        ; V
71    (CDR)
72    (SETVALUE 1)                        ; V
74    (GETVALUE 1)                        ; V
76    (JMPIF L12)
79    L79
79    (NIL)
80    (UNBIND 2)
82    (SKIP&RET 2)
84    L84
84    (GETVALUE&PUSH 2)                   ; VAR
86    (CALLS1 83)                         ; MAKUNBOUND
88    (GETVALUE&PUSH 2)                   ; VAR
90    (GETVALUE&PUSH 7)                   ; $VALUES
92    (CONST&PUSH 8)                      ; 1
93    (CALL 3 9)                          ; DELQ
96    (JMP L59)


Disassembly of function #:|(DEFUN $FRAME (&OPTIONAL # #) ...)-81|
(CONST 0) = $FRAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FRAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FRAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FRAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FRAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FRAME
8     (SKIP&RET 1)


Disassembly of function $FRAME
(CONST 0) = 0
(CONST 1) = N
(CONST 2) = RESTORE-BINDINGS
(CONST 3) = PRINT-ONE-FRAME
(CONST 4) = REMOVE-BINDINGS
(CONST 5) = *DEBUG-IO*
(CONST 6) = #<COMPILED-CLOSURE $FRAME-1>
(CONST 7) = FORMAT
0 required arguments
2 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*DEBUG-IO* N)
30 byte-code instructions:
0     (JMPIFBOUNDP 2 L4)
3     (CONST 0)                           ; 0
4     L4
4     (BIND 1)                            ; N
6     (JMPIFBOUNDP 4 L11)
9     (T&STORE 4)
11    L11
11    (CALL0 2)                           ; RESTORE-BINDINGS
13    (GETVALUE&PUSH 1)                   ; N
15    (LOAD&PUSH 5)
16    (CALL2 3)                           ; PRINT-ONE-FRAME
18    (NV-TO-STACK 6)
20    (LOAD&PUSH 0)
21    (CALL1 4)                           ; REMOVE-BINDINGS
23    (LOAD&JMPIFNOT 1 L44)
26    (GETVALUE&PUSH 5)                   ; *DEBUG-IO*
28    (CALLS1 140)                        ; FRESH-LINE
30    (GETVALUE&PUSH 5)                   ; *DEBUG-IO*
32    (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE $FRAME-1>
33    (LOAD 3)
34    (CDR)
35    (CAR&PUSH)
36    (LOAD&CAR&PUSH 4)
38    (CALLSR&PUSH 1 53)                  ; +
41    (CALL 4 7)                          ; FORMAT
44    L44
44    (VALUES0)
45    (SKIP 6)
47    (UNBIND1)
48    (SKIP&RET 3)


Disassembly of function $FRAME-1
(CONST 0) = ""
(CONST 1) = #\:
(CONST 2) = 
"::
"
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; ""
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 5)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\:
11    (LOAD&PUSH 5)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 5)
16    (CALLS1 132)                        ; PRINC
18    (CONST&PUSH 2)                      ; "::
"
19    (LOAD&PUSH 5)
20    (PUSH-UNBOUND 2)
22    (CALLS1 137)                        ; WRITE-STRING
24    (LOAD 1)
25    (SKIP&RET 5)


Wrote file binary-clisp/mdebug.fas
Wrote file /cygdrive/e/temp/maxima/src/mdebug.lis