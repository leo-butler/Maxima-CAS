Listing of compilation of file /cygdrive/e/temp/maxima/src/displa.lisp
on 2002-12-17 13:34:17 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/displa.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE DISPLA)-2|
(CONST 0) = DISPLA
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISPLA
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS DISPLM)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL $LINEL))-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR CHARACTER-GRAPHICS-TTY NIL ...)-5-1|
(CONST 0) = CHARACTER-GRAPHICS-TTY
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHARACTER-GRAPHICS-TTY
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; CHARACTER-GRAPHICS-TTY
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR CHARACTER-GRAPHICS-TTY NIL ...)-5-2|
(CONST 0) = (SPECIAL CHARACTER-GRAPHICS-TTY)
(CONST 1) = CHARACTER-GRAPHICS-TTY
(CONST 2) = VARIABLE
(CONST 3) = 
"If T, then console can draw lines and math symbols using
	 an extended character set."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL CHARACTER-GRAPHICS-TTY)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; CHARACTER-GRAPHICS-TTY
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; CHARACTER-GRAPHICS-TTY
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; CHARACTER-GRAPHICS-TTY
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If T, then console can draw lines and math symbols using
	 an extended character set."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; CHARACTER-GRAPHICS-TTY
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LINE-GRAPHICS-TTY NIL ...)-6-1|
(CONST 0) = LINE-GRAPHICS-TTY
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; LINE-GRAPHICS-TTY
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; LINE-GRAPHICS-TTY
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LINE-GRAPHICS-TTY NIL ...)-6-2|
(CONST 0) = (SPECIAL LINE-GRAPHICS-TTY)
(CONST 1) = LINE-GRAPHICS-TTY
(CONST 2) = VARIABLE
(CONST 3) = 
"If T, then console can draw lines and math symbols using
	 vector graphics."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL LINE-GRAPHICS-TTY)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; LINE-GRAPHICS-TTY
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; LINE-GRAPHICS-TTY
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; LINE-GRAPHICS-TTY
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If T, then console can draw lines and math symbols using
	 vector graphics."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; LINE-GRAPHICS-TTY
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $CURSORDISP T ...)-7-1|
(CONST 0) = $CURSORDISP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CURSORDISP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $CURSORDISP
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $CURSORDISP T ...)-7-2|
(CONST 0) = (SPECIAL $CURSORDISP)
(CONST 1) = $CURSORDISP
(CONST 2) = VARIABLE
(CONST 3) = 
"If T, causes expressions to be drawn by the displayer in logical 
	  sequence.  This only works with a console which can do cursor 
	  movement.
	  If NIL, expressions are simply printed line by line.
	  CURSORDISP is NIL when a WRITEFILE is in effect."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $CURSORDISP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $CURSORDISP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $CURSORDISP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $CURSORDISP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If T, causes expressions to be drawn by the displayer in logical 
	  sequence.  This only works with a console which can do cursor 
	  movement.
	  If NIL, expressions are simply printed line by line.
	  CURSORDISP is NIL when a WRITEFILE is in effect."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $CURSORDISP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $STARDISP NIL ...)-8-1|
(CONST 0) = $STARDISP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $STARDISP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $STARDISP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $STARDISP NIL ...)-8-2|
(CONST 0) = (SPECIAL $STARDISP)
(CONST 1) = $STARDISP
(CONST 2) = VARIABLE
(CONST 3) = "Causes factors of products are separated by * when displayed."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $STARDISP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $STARDISP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $STARDISP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $STARDISP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes factors of products are separated by * when displayed."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $STARDISP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LEFTJUST NIL ...)-9-1|
(CONST 0) = $LEFTJUST
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LEFTJUST
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LEFTJUST
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LEFTJUST NIL ...)-9-2|
(CONST 0) = (SPECIAL $LEFTJUST)
(CONST 1) = $LEFTJUST
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes equations to be drawn left justified rather than centered.
	 For slow consoles."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LEFTJUST)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LEFTJUST
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LEFTJUST
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $LEFTJUST
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes equations to be drawn left justified rather than centered.
	 For slow consoles."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $LEFTJUST
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DISPLAY2D T ...)-10-1|
(CONST 0) = $DISPLAY2D
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DISPLAY2D
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DISPLAY2D
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DISPLAY2D T ...)-10-2|
(CONST 0) = (SPECIAL $DISPLAY2D)
(CONST 1) = $DISPLAY2D
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes equations to be drawn in two dimensions.  Otherwise, drawn
	 linearly."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DISPLAY2D)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DISPLAY2D
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DISPLAY2D
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $DISPLAY2D
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes equations to be drawn in two dimensions.  Otherwise, drawn
	 linearly."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $DISPLAY2D
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LISPDISP NIL ...)-11-1|
(CONST 0) = $LISPDISP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LISPDISP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LISPDISP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LISPDISP NIL ...)-11-2|
(CONST 0) = (SPECIAL $LISPDISP)
(CONST 1) = $LISPDISP
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes symbols not having $ as the first character in their pnames
	 to be preceded with a ? when displayed."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LISPDISP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LISPDISP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LISPDISP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $LISPDISP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes symbols not having $ as the first character in their pnames
	 to be preceded with a ? when displayed."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $LISPDISP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LINEDISP T ...)-12-1|
(CONST 0) = $LINEDISP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINEDISP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LINEDISP
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LINEDISP T ...)-12-2|
(CONST 0) = (SPECIAL $LINEDISP)
(CONST 1) = $LINEDISP
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes quotients, matrices, and boxes to be drawn with straight
	 lines, if possible.  This will work on graphic terminals or
	 video terminals with line drawing character sets.  If enabled,
	 the values of LMXCHAR, RMXCHAR, ABSBOXCHAR, and BOXCHAR are ignored."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LINEDISP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LINEDISP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LINEDISP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $LINEDISP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes quotients, matrices, and boxes to be drawn with straight
	 lines, if possible.  This will work on graphic terminals or
	 video terminals with line drawing character sets.  If enabled,
	 the values of LMXCHAR, RMXCHAR, ABSBOXCHAR, and BOXCHAR are ignored."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $LINEDISP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DERIVABBREV NIL)-13-1|
(CONST 0) = $DERIVABBREV
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DERIVABBREV
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DERIVABBREV
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DERIVABBREV NIL)-13-2|
(CONST 0) = (SPECIAL $DERIVABBREV)
(CONST 1) = $DERIVABBREV
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DERIVABBREV)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DERIVABBREV
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DERIVABBREV
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $DERIVABBREV
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NOUNDISP NIL)-14-1|
(CONST 0) = $NOUNDISP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOUNDISP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $NOUNDISP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NOUNDISP NIL)-14-2|
(CONST 0) = (SPECIAL $NOUNDISP)
(CONST 1) = $NOUNDISP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $NOUNDISP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $NOUNDISP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $NOUNDISP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $NOUNDISP
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR STRINGDISP NIL ...)-15-1|
(CONST 0) = STRINGDISP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRINGDISP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; STRINGDISP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR STRINGDISP NIL ...)-15-2|
(CONST 0) = (SPECIAL STRINGDISP)
(CONST 1) = STRINGDISP
(CONST 2) = VARIABLE
(CONST 3) = 
"Causes strings to be bracketed in double quotes when displayed.
	 Normally this is off, but is turned on when a procedure definition is
	 being displayed."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL STRINGDISP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; STRINGDISP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; STRINGDISP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; STRINGDISP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Causes strings to be bracketed in double quotes when displayed.
	 Normally this is off, but is turned on when a procedure definition is
	 being displayed."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; STRINGDISP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR DISPLAYP NIL ...)-16-1|
(CONST 0) = DISPLAYP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISPLAYP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; DISPLAYP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR DISPLAYP NIL ...)-16-2|
(CONST 0) = (SPECIAL DISPLAYP)
(CONST 1) = DISPLAYP
(CONST 2) = VARIABLE
(CONST 3) = "Is T when inside of DISPLA"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL DISPLAYP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; DISPLAYP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; DISPLAYP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; DISPLAYP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Is T when inside of DISPLA"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; DISPLAYP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR D-MOREMSG "--More Display?--")-17|
(CONST 0) = (SPECIAL D-MOREMSG)
(CONST 1) = D-MOREMSG
(CONST 2) = "--More Display?--"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL D-MOREMSG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; D-MOREMSG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; D-MOREMSG
8     (CONST&PUSH 2)                      ; "--More Display?--"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; D-MOREMSG
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR D-MOREFLUSH "--Display Flushed--")-18|
(CONST 0) = (SPECIAL D-MOREFLUSH)
(CONST 1) = D-MOREFLUSH
(CONST 2) = "--Display Flushed--"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL D-MOREFLUSH)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; D-MOREFLUSH
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; D-MOREFLUSH
8     (CONST&PUSH 2)                      ; "--Display Flushed--"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; D-MOREFLUSH
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BOXCHAR '\|&"\| ...)-19-1|
(CONST 0) = $BOXCHAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = |&"|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BOXCHAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $BOXCHAR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; |&"|
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BOXCHAR '\|&"\| ...)-19-2|
(CONST 0) = (SPECIAL $BOXCHAR)
(CONST 1) = $BOXCHAR
(CONST 2) = |&"|
(CONST 3) = VARIABLE
(CONST 4) = "Character used for drawing boxes."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $BOXCHAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $BOXCHAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $BOXCHAR
8     (CONST&PUSH 2)                      ; |&"|
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $BOXCHAR
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Character used for drawing boxes."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $BOXCHAR
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ABSBOXCHAR '&! ...)-20-1|
(CONST 0) = $ABSBOXCHAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = &!
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ABSBOXCHAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $ABSBOXCHAR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; &!
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ABSBOXCHAR '&! ...)-20-2|
(CONST 0) = (SPECIAL $ABSBOXCHAR)
(CONST 1) = $ABSBOXCHAR
(CONST 2) = &!
(CONST 3) = VARIABLE
(CONST 4) = "Character used for drawing absolute value signs and 'evaluation at' signs."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $ABSBOXCHAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $ABSBOXCHAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $ABSBOXCHAR
8     (CONST&PUSH 2)                      ; &!
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $ABSBOXCHAR
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Character used for drawing absolute value signs and 'evaluation at' signs."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $ABSBOXCHAR
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LMXCHAR '&[ ...)-21-1|
(CONST 0) = $LMXCHAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = &[
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LMXCHAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LMXCHAR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; &[
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LMXCHAR '&[ ...)-21-2|
(CONST 0) = (SPECIAL $LMXCHAR)
(CONST 1) = $LMXCHAR
(CONST 2) = &[
(CONST 3) = VARIABLE
(CONST 4) = "Character used for drawing the left edge of a matrix."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LMXCHAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LMXCHAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LMXCHAR
8     (CONST&PUSH 2)                      ; &[
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $LMXCHAR
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Character used for drawing the left edge of a matrix."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $LMXCHAR
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RMXCHAR '&] ...)-22-1|
(CONST 0) = $RMXCHAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = &]
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RMXCHAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RMXCHAR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; &]
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RMXCHAR '&] ...)-22-2|
(CONST 0) = (SPECIAL $RMXCHAR)
(CONST 1) = $RMXCHAR
(CONST 2) = &]
(CONST 3) = VARIABLE
(CONST 4) = "Character used for drawing the right edge of a matrix."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RMXCHAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RMXCHAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RMXCHAR
8     (CONST&PUSH 2)                      ; &]
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $RMXCHAR
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Character used for drawing the right edge of a matrix."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $RMXCHAR
18    (SKIP&RET 1)


Disassembly of function #:|(SETQ SMART-TTY NIL ...)-23|
(CONST 0) = SMART-TTY
(CONST 1) = RUBOUT-TTY
(CONST 2) = LINE-GRAPHICS-TTY
(CONST 3) = SCROLLP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (SCROLLP LINE-GRAPHICS-TTY RUBOUT-TTY SMART-TTY)
7 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; SMART-TTY
3     (SETVALUE 1)                        ; RUBOUT-TTY
5     (SETVALUE 2)                        ; LINE-GRAPHICS-TTY
7     (T)
8     (SETVALUE 3)                        ; SCROLLP
10    (SKIP&RET 1)


Disassembly of function #:|(SETQ LINEL 79 ...)-24|
(CONST 0) = 79
(CONST 1) = LINEL
(CONST 2) = $LINEL
(CONST 3) = 24
(CONST 4) = TTYHEIGHT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (TTYHEIGHT $LINEL LINEL)
6 byte-code instructions:
0     (CONST 0)                           ; 79
1     (SETVALUE 1)                        ; LINEL
3     (SETVALUE 2)                        ; $LINEL
5     (CONST 3)                           ; 24
6     (SETVALUE 4)                        ; TTYHEIGHT
8     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR LINEARRAY (MAKE-ARRAY 80 :INITIAL-ELEMENT ...))-25|
(CONST 0) = (SPECIAL LINEARRAY)
(CONST 1) = LINEARRAY
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL LINEARRAY)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; LINEARRAY
4     (CALLS1&JMPIF 79 L17)               ; BOUNDP
7     (CONST&PUSH 1)                      ; LINEARRAY
8     (CONST&PUSH 2)                      ; 80
9     (PUSH-UNBOUND 7)
11    (NIL&STORE 4)
13    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
15    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
17    L17
17    (CONST 1)                           ; LINEARRAY
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MAXIMA-DISPLAY (FORM &KEY #) ...)-26|
(CONST 0) = MAXIMA-DISPLAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMA-DISPLAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-DISPLAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-DISPLAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMA-DISPLAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMA-DISPLAY
8     (SKIP&RET 1)


Disassembly of function MAXIMA-DISPLAY
(CONST 0) = :STREAM
(CONST 1) = FORM
(CONST 2) = *STANDARD-OUTPUT*
(CONST 3) = DISPLA
1 required argument
0 optional arguments
No rest parameter
1 keyword parameter: :STREAM.
reads special variables: (FORM *STANDARD-OUTPUT*)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 1)                            ; FORM
3     (JMPIFBOUNDP 4 L9)
6     (GETVALUE 2)                        ; *STANDARD-OUTPUT*
8     (STORE 4)
9     L9
9     (LOAD 4)
10    (BIND 2)                            ; *STANDARD-OUTPUT*
12    (GETVALUE&PUSH 1)                   ; FORM
14    (CALL1 3)                           ; DISPLA
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MAXIMA-DRAW-FORM (FORM &KEY # ...) ...)-27|
(CONST 0) = MAXIMA-DRAW-FORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = FUNCTION
(CONST 3) = 
"First try at getting an interface to allow one to draw a form at any 
  position. The at-x and at-y amount to the initial position which will be in
  the middle left of a matrix, or the main line for a polynomial.  On a stream
  which does no cursorpositioning it would be top left corner at the call and
  spaced over by at-y. It can't tell where it is in the line, already so you have to tell it
  where to begin, or if it occurs in a format command go back to last % to get offset."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
(CONST 5) = #<COMPILED-CLOSURE MAXIMA-DRAW-FORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-DRAW-FORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-DRAW-FORM
4     (CONST&PUSH 2)                      ; FUNCTION
5     (CONST&PUSH 3)                      ; "First try at getting an interface to allow one to draw a form at any 
  position. The at-x and at-y amount to the initial position which will be in
  the middle left of a matrix, or the main line for a polynomial.  On a stream
  which does no cursorpositioning it would be top left corner at the call and
  spaced over by at-y. It can't tell where it is in the line, already so you have to tell it
  where to begin, or if it occurs in a format command go back to last % to get offset."
6     (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
9     (CONST&PUSH 0)                      ; MAXIMA-DRAW-FORM
10    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE MAXIMA-DRAW-FORM>
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (CONST 0)                           ; MAXIMA-DRAW-FORM
14    (SKIP&RET 1)


Disassembly of function MAXIMA-DRAW-FORM
(CONST 0) = :STREAM
(CONST 1) = :AT-X
(CONST 2) = :AT-Y
(CONST 3) = :$LINEDISP
(CONST 4) = :$CURSORDISP
(CONST 5) = FORM
(CONST 6) = *STANDARD-OUTPUT*
(CONST 7) = 0
(CONST 8) = $LINEDISP
(CONST 9) = $CURSORDISP
(CONST 10) = CURSORPOS
(CONST 11) = CHECKRAT
(CONST 12) = MRATP
(CONST 13) = ^R
(CONST 14) = 1
(CONST 15) = MAXHT
(CONST 16) = MAXDP
(CONST 17) = WIDTH
(CONST 18) = HEIGHT
(CONST 19) = DEPTH
(CONST 20) = LEVEL
(CONST 21) = 2
(CONST 22) = SIZE
(CONST 23) = BREAK
(CONST 24) = RIGHT
(CONST 25) = LINES
(CONST 26) = BKPT
(CONST 27) = BKPTWD
(CONST 28) = BKPTHT
(CONST 29) = BKPTDP
(CONST 30) = BKPTOUT
(CONST 31) = BKPTLEVEL
(CONST 32) = IN-P
(CONST 33) = D-MOREFLUSH
(CONST 34) = MOREFLUSH
(CONST 35) = MORE-^W
(CONST 36) = D-MOREMSG
(CONST 37) = MOREMSG
(CONST 38) = MPAREN
(CONST 39) = DIMENSION
(CONST 40) = DRAW-2D
(CONST 41) = DRAW-LINEAR
(CONST 42) = LINEARRAY
(CONST 43) = SLOOP::SLOOP-TYPE-ERROR
(CONST 44) = OUTPUT-LINEAR-ONE-LINE
1 required argument
0 optional arguments
No rest parameter
5 keyword parameters: :STREAM, :AT-X, :AT-Y, :$LINEDISP, :$CURSORDISP.
reads special variables: (LINEARRAY HEIGHT $CURSORDISP D-MOREMSG D-MOREFLUSH ^R FORM *STANDARD-OUTPUT*)
143 byte-code instructions:
0     (LOAD 6)
1     (BIND 5)                            ; FORM
3     (JMPIFBOUNDP 8 L10)
6     (GETVALUE 6)                        ; *STANDARD-OUTPUT*
8     (STORE 8)
10    L10
10    (JMPIFBOUNDP 7 L15)
13    (CONST 7)                           ; 0
14    (STORE 7)
15    L15
15    (JMPIFBOUNDP 6 L20)
18    (CONST 7)                           ; 0
19    (STORE 6)
20    L20
20    (JMPIFBOUNDP 5 L24)
23    (NIL)
24    L24
24    (BIND 8)                            ; $LINEDISP
26    (JMPIFBOUNDP 7 L30)
29    (NIL)
30    L30
30    (BIND 9)                            ; $CURSORDISP
32    (PUSH-NIL 3)
34    (CALL0 10)                          ; CURSORPOS
36    (STORE 0)
37    (CAR)
38    (STORE 1)
39    (LOAD&CDR&STORE 0)
41    (LOAD 17)
43    (BIND 6)                            ; *STANDARD-OUTPUT*
45    (UNWIND-PROTECT-OPEN L218)
48    (GETVALUE&PUSH 5)                   ; FORM
50    (CALL1 11)                          ; CHECKRAT
52    (BIND 12)                           ; MRATP
54    (GETVALUE 13)                       ; ^R
56    (BIND 13)                           ; ^R
58    (CONST 14)                          ; 1
59    (BIND 15)                           ; MAXHT
61    (CONST 7)                           ; 0
62    (BIND 16)                           ; MAXDP
64    (CONST 7)                           ; 0
65    (BIND 17)                           ; WIDTH
67    (CONST 7)                           ; 0
68    (BIND 18)                           ; HEIGHT
70    (CONST 7)                           ; 0
71    (BIND 19)                           ; DEPTH
73    (CONST 7)                           ; 0
74    (BIND 20)                           ; LEVEL
76    (CONST 21)                          ; 2
78    (BIND 22)                           ; SIZE
80    (CONST 7)                           ; 0
81    (BIND 23)                           ; BREAK
83    (CONST 7)                           ; 0
84    (BIND 24)                           ; RIGHT
86    (CONST 14)                          ; 1
87    (BIND 25)                           ; LINES
89    (NIL)
90    (BIND 26)                           ; BKPT
92    (CONST 7)                           ; 0
93    (BIND 27)                           ; BKPTWD
95    (CONST 14)                          ; 1
96    (BIND 28)                           ; BKPTHT
98    (CONST 7)                           ; 0
99    (BIND 29)                           ; BKPTDP
101   (CONST 7)                           ; 0
102   (BIND 30)                           ; BKPTOUT
104   (CONST 7)                           ; 0
105   (BIND 31)                           ; BKPTLEVEL
107   (NIL)
108   (BIND 32)                           ; IN-P
110   (GETVALUE 33)                       ; D-MOREFLUSH
112   (BIND 34)                           ; MOREFLUSH
114   (NIL)
115   (BIND 35)                           ; MORE-^W
117   (GETVALUE 36)                       ; D-MOREMSG
119   (BIND 37)                           ; MOREMSG
121   (GETVALUE&PUSH 5)                   ; FORM
123   (NIL&PUSH)
124   (CONST&PUSH 38)                     ; MPAREN
126   (CONST&PUSH 38)                     ; MPAREN
128   (CONST&PUSH 7)                      ; 0
129   (CONST&PUSH 7)                      ; 0
130   (CALL 6 39)                         ; DIMENSION
133   (STORE 73)
135   (GETVALUE 9)                        ; $CURSORDISP
137   (JMPIF L181)
139   (LOAD&PUSH 87)
141   (GETVALUE&PUSH 18)                  ; HEIGHT
143   (CALLS2&PUSH 151)                   ; 1-
145   (CALLSR&PUSH 1 54)                  ; -
148   (CONST&PUSH 7)                      ; 0
149   (CALL2 10)                          ; CURSORPOS
151   (LOAD&PUSH 73)
153   (CALLS2&PUSH 73)                    ; NREVERSE
155   (LOAD&PUSH 88)
157   (GETVALUE&PUSH 18)                  ; HEIGHT
159   (CALLSR&PUSH 2 53)                  ; +
162   (LOAD&PUSH 88)
164   (CALL 3 41)                         ; DRAW-LINEAR
167   (GETVALUE&PUSH 42)                  ; LINEARRAY
169   (CALLS2&PUSH 71)                    ; LENGTH
171   (CALLS2&PUSH 151)                   ; 1-
173   (LOAD&PUSH 0)
174   (CALLS2&JMPIF 13 L206)              ; SYSTEM::FIXNUMP
177   (CALL0 43)                          ; SLOOP::SLOOP-TYPE-ERROR
179   (JMP L206)
181   L181
181   (LOAD&PUSH 73)
183   (CALLS2&PUSH 73)                    ; NREVERSE
185   (LOAD&PUSH 88)
187   (LOAD&PUSH 88)
189   (CALL 3 40)                         ; DRAW-2D
192   (JMP L214)
194   L194
194   (GETVALUE&PUSH 42)                  ; LINEARRAY
196   (LOAD&PUSH 1)
197   (CALLSR&JMPIFNOT 1 1 L204)          ; AREF
201   (LOAD&PUSH 0)
202   (CALL1 44)                          ; OUTPUT-LINEAR-ONE-LINE
204   L204
204   (LOAD&DEC&STORE 0)
206   L206
206   (LOAD&PUSH 0)
207   (CONST&PUSH 7)                      ; 0
208   (CALLSR&JMPIFNOT 1 47 L194)         ; <
212   (SKIP 1)
214   L214
214   (UNBIND 22)
216   (VALUES0)
217   (UNWIND-PROTECT-NORMAL-EXIT)
218   L218
218   (GETVALUE&PUSH 42)                  ; LINEARRAY
220   (NIL&PUSH)
221   (PUSH-UNBOUND 2)
223   (CALLS2 76)                         ; FILL
225   (UNWIND-PROTECT-CLOSE)
226   (LOAD&PUSH 4)
227   (LOAD&PUSH 4)
228   (CALL2 10)                          ; CURSORPOS
230   (UNBIND1)
231   (SKIP 3)
233   (UNBIND 3)
235   (SKIP&RET 7)


Disassembly of function #:|(DEFMACRO BIND-DIMENSION (FORM DIM-LIST &REST ...) ...)-28|
(CONST 0) = BIND-DIMENSION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIND-DIMENSION>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIND-DIMENSION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIND-DIMENSION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIND-DIMENSION>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; BIND-DIMENSION
10    (SKIP&RET 1)


Disassembly of function BIND-DIMENSION
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = FORM
(CONST 3) = LET
(CONST 4) = MRATP
(CONST 5) = CHECKRAT
(CONST 6) = 
((^R ^R) (MAXHT 1) (MAXDP 0) (WIDTH 0) (HEIGHT 0) (DEPTH 0) (LEVEL 0) (SIZE 2)
 (BREAK 0) (RIGHT 0) (LINES 1) BKPT (BKPTWD 0) (BKPTHT 1) (BKPTDP 0)
 (BKPTOUT 0) (BKPTLEVEL 0) IN-P (MOREFLUSH D-MOREFLUSH) MORE-^W
 (MOREMSG D-MOREMSG))
(CONST 7) = PROGN
(CONST 8) = SETQ
(CONST 9) = DIMENSION
(CONST 10) = (NIL 'MPAREN 'MPAREN 0 0)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (FORM)
42 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L53)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; FORM
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR&PUSH)
17    (LOAD 6)
18    (CDR)
19    (CDR)
20    (CDR&PUSH)
21    (CONST&PUSH 3)                      ; LET
22    (CONST&PUSH 4)                      ; MRATP
23    (CONST&PUSH 5)                      ; CHECKRAT
24    (GETVALUE&PUSH 2)                   ; FORM
26    (LIST&PUSH 2)
28    (LIST&PUSH 2)
30    (CONST 6)                           ; ((^R ^R) (MAXHT 1) (MAXDP 0) ...)
31    (CONS&PUSH)
32    (CONST&PUSH 7)                      ; PROGN
33    (CONST&PUSH 8)                      ; SETQ
34    (LOAD&PUSH 5)
35    (CONST&PUSH 9)                      ; DIMENSION
36    (GETVALUE&PUSH 2)                   ; FORM
38    (CONST 10)                          ; (NIL 'MPAREN 'MPAREN 0 0)
39    (LIST*&PUSH 2)
41    (LIST&PUSH 3)
43    (LOAD 4)
44    (LIST*&PUSH 2)
46    (LIST 3)
48    (SKIP 2)
50    (UNBIND1)
51    (SKIP&RET 3)
53    L53
53    (LOAD&PUSH 2)
54    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
56    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN DISPLA (FORM &AUX) ...)-29|
(CONST 0) = DISPLA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISPLA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISPLA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISPLA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISPLA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISPLA
8     (SKIP&RET 1)


Disassembly of function DISPLA
(CONST 0) = FORM
(CONST 1) = ^W
(CONST 2) = ^R
(CONST 3) = $DISPLAY2D
(CONST 4) = DISPLAYP
(CONST 5) = 80
(CONST 6) = LINEARRAY
(CONST 7) = CHECKRAT
(CONST 8) = MRATP
(CONST 9) = 1
(CONST 10) = MAXHT
(CONST 11) = 0
(CONST 12) = MAXDP
(CONST 13) = WIDTH
(CONST 14) = HEIGHT
(CONST 15) = DEPTH
(CONST 16) = LEVEL
(CONST 17) = 2
(CONST 18) = SIZE
(CONST 19) = BREAK
(CONST 20) = RIGHT
(CONST 21) = LINES
(CONST 22) = BKPT
(CONST 23) = BKPTWD
(CONST 24) = BKPTHT
(CONST 25) = BKPTDP
(CONST 26) = BKPTOUT
(CONST 27) = BKPTLEVEL
(CONST 28) = IN-P
(CONST 29) = D-MOREFLUSH
(CONST 30) = MOREFLUSH
(CONST 31) = MORE-^W
(CONST 32) = D-MOREMSG
(CONST 33) = MOREMSG
(CONST 34) = MPAREN
(CONST 35) = DIMENSION
(CONST 36) = CHECKBREAK
(CONST 37) = $LEFTJUST
(CONST 38) = LINEL
(CONST 39) = OUTPUT
(CONST 40) = SMART-TTY
(CONST 41) = SCROLLP
(CONST 42) = $CURSORDISP
(CONST 43) = CURSORPOS
(CONST 44) = TTYHEIGHT
(CONST 45) = 3
(CONST 46) = MTERPRI
(CONST 47) = LINEAR-DISPLA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(TTYHEIGHT SCROLLP SMART-TTY LINES $LEFTJUST D-MOREMSG D-MOREFLUSH LINEARRAY
 DISPLAYP $CURSORDISP BKPTOUT WIDTH LINEL FORM $DISPLAY2D ^R ^W)
writes special variable : (FORM)
142 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 1)                        ; ^W
5     (JMPIFNOT L11)
7     (GETVALUE 2)                        ; ^R
9     (JMPIFNOT1 L19)
11    L11
11    (GETVALUE 3)                        ; $DISPLAY2D
13    (JMPIF L54)
15    (GETVALUE&PUSH 0)                   ; FORM
17    (CALL1 47)                          ; LINEAR-DISPLA
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (CONST&PUSH 5)                      ; 80
23    (PUSH-UNBOUND 7)
25    (CALLS1 29)                         ; MAKE-ARRAY
27    (JMP L61)
29    L29
29    (GETVALUE&PUSH 38)                  ; LINEL
31    (GETVALUE&PUSH 13)                  ; WIDTH
33    (GETVALUE&PUSH 26)                  ; BKPTOUT
35    (CALLSR&PUSH 1 54)                  ; -
38    (CALLSR 1 54)                       ; -
41    (JMP L179)
44    L44
44    (GETVALUE 42)                       ; $CURSORDISP
46    (NOT)
47    (NOT)
48    (JMPIFNOT1 L218)
51    (JMP L194)
54    L54
54    (T&PUSH)
55    (GETVALUE 4)                        ; DISPLAYP
57    (JMPIF L22)
59    (GETVALUE 6)                        ; LINEARRAY
61    L61
61    (PUSH)
62    (GETVALUE&PUSH 0)                   ; FORM
64    (CALL1 7)                           ; CHECKRAT
66    (BIND 8)                            ; MRATP
68    (GETVALUE 2)                        ; ^R
70    (BIND 2)                            ; ^R
72    (CONST 9)                           ; 1
73    (BIND 10)                           ; MAXHT
75    (CONST 11)                          ; 0
76    (BIND 12)                           ; MAXDP
78    (CONST 11)                          ; 0
79    (BIND 13)                           ; WIDTH
81    (CONST 11)                          ; 0
82    (BIND 14)                           ; HEIGHT
84    (CONST 11)                          ; 0
85    (BIND 15)                           ; DEPTH
87    (CONST 11)                          ; 0
88    (BIND 16)                           ; LEVEL
90    (CONST 17)                          ; 2
91    (BIND 18)                           ; SIZE
93    (CONST 11)                          ; 0
94    (BIND 19)                           ; BREAK
96    (CONST 11)                          ; 0
97    (BIND 20)                           ; RIGHT
99    (CONST 9)                           ; 1
100   (BIND 21)                           ; LINES
102   (NIL)
103   (BIND 22)                           ; BKPT
105   (CONST 11)                          ; 0
106   (BIND 23)                           ; BKPTWD
108   (CONST 9)                           ; 1
109   (BIND 24)                           ; BKPTHT
111   (CONST 11)                          ; 0
112   (BIND 25)                           ; BKPTDP
114   (CONST 11)                          ; 0
115   (BIND 26)                           ; BKPTOUT
117   (CONST 11)                          ; 0
118   (BIND 27)                           ; BKPTLEVEL
120   (NIL)
121   (BIND 28)                           ; IN-P
123   (GETVALUE 29)                       ; D-MOREFLUSH
125   (BIND 30)                           ; MOREFLUSH
127   (NIL)
128   (BIND 31)                           ; MORE-^W
130   (GETVALUE 32)                       ; D-MOREMSG
132   (BIND 33)                           ; MOREMSG
134   (LOAD 67)
136   (BIND 4)                            ; DISPLAYP
138   (LOAD 69)
140   (BIND 6)                            ; LINEARRAY
142   (UNWIND-PROTECT-OPEN L219)
145   (GETVALUE&PUSH 0)                   ; FORM
147   (NIL&PUSH)
148   (CONST&PUSH 34)                     ; MPAREN
150   (CONST&PUSH 34)                     ; MPAREN
152   (CONST&PUSH 11)                     ; 0
153   (CONST&PUSH 11)                     ; 0
154   (CALL 6 35)                         ; DIMENSION
157   (SETVALUE 0)                        ; FORM
159   (PUSH)
160   (GETVALUE&PUSH 13)                  ; WIDTH
162   (CALL2 36)                          ; CHECKBREAK
164   (GETVALUE&PUSH 0)                   ; FORM
166   (GETVALUE 37)                       ; $LEFTJUST
168   (JMPIF L178)
170   (CONST&PUSH 17)                     ; 2
171   (GETVALUE&PUSH 21)                  ; LINES
173   (CALLSR&JMPIF 1 45 L29)             ; =
178   L178
178   (CONST 11)                          ; 0
179   L179
179   (PUSH)
180   (CALL2 39)                          ; OUTPUT
182   (GETVALUE 40)                       ; SMART-TTY
184   (JMPIFNOT1 L218)
186   (GETVALUE 41)                       ; SCROLLP
188   (JMPIF L44)
191   (NOT)
192   (JMPIFNOT1 L218)
194   L194
194   (CALL0 43)                          ; CURSORPOS
196   (CAR&PUSH)
197   (GETVALUE&PUSH 44)                  ; TTYHEIGHT
199   (CONST&PUSH 45)                     ; 3
201   (CALLSR&PUSH 1 54)                  ; -
204   (CALLSR 1 48)                       ; >
207   (JMPIFNOT1 L218)
209   (NIL)
210   (BIND 2)                            ; ^R
212   (CALL0 46)                          ; MTERPRI
214   (UNBIND1)
215   (UNWIND-PROTECT-NORMAL-EXIT)
216   (JMP L219)
218   L218
218   (UNWIND-PROTECT-NORMAL-EXIT)
219   L219
219   (GETVALUE&PUSH 6)                   ; LINEARRAY
221   (NIL&PUSH)
222   (PUSH-UNBOUND 2)
224   (CALLS2 76)                         ; FILL
226   (UNWIND-PROTECT-CLOSE)
227   (UNBIND 24)
229   (SKIP 2)
231   (JMP L19)


Disassembly of function #:|(DEFUN TRANSFORM-EXTENDS (X) ...)-30|
(CONST 0) = TRANSFORM-EXTENDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSFORM-EXTENDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSFORM-EXTENDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSFORM-EXTENDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSFORM-EXTENDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSFORM-EXTENDS
8     (SKIP&RET 1)


Disassembly of function TRANSFORM-EXTENDS
(CONST 0) = X
(CONST 1) = $EXTENDP
(CONST 2) = :MACSYMA-EXTEND-TYPE
(CONST 3) = SEND
(CONST 4) = (${)
(CONST 5) = $GET
(CONST 6) = $ACESSORS
(CONST 7) = :MACSYMA-EXTEND-ELEMENTS
(CONST 8) = LISTARRAY
(CONST 9) = V
(CONST 10) = (MEQUAL)
(CONST 11) = 0
(CONST 12) = SYSTEM::%SETNTH
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V X)
91 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L61)                 ; $EXTENDP
8     (GETVALUE 0)                        ; X
10    (JMPIFATOM L138)
13    (GETVALUE&PUSH 0)                   ; X
15    (GETVALUE&PUSH 0)                   ; X
17    (CONST&PUSH 11)                     ; 0
18    (LOAD&JMPIFNOT 2 L55)
21    L21
21    (LOAD&CAR&PUSH 2)
23    (LOAD&PUSH 0)
24    (JSR&PUSH L0)
26    (LOAD&PUSH 1)
27    (LOAD 1)
28    (JMPIFEQ L46)
30    (LOAD&PUSH 3)
31    (GETVALUE 0)                        ; X
33    (JMPIFNOTEQ L40)
35    (GETVALUE&PUSH 0)                   ; X
37    (CALLS2&STORE 70 3)                 ; COPY-SEQ
40    L40
40    (LOAD&PUSH 2)
41    (LOAD&PUSH 4)
42    (LOAD&PUSH 2)
43    (CALL 3 12)                         ; SYSTEM::%SETNTH
46    L46
46    (SKIP 2)
48    (LOAD&CDR&STORE 2)
50    (LOAD&INC&STORE 0)
52    (LOAD&JMPIF 2 L21)
55    L55
55    (LOAD 1)
56    (SKIP 3)
58    L58
58    (UNBIND1)
59    (SKIP&RET 2)
61    L61
61    (GETVALUE&PUSH 0)                   ; X
63    (CONST&PUSH 2)                      ; :MACSYMA-EXTEND-TYPE
64    (CALL2&PUSH 3)                      ; SEND
66    (CONST&PUSH 4)                      ; (${)
67    (LOAD&PUSH 1)
68    (LIST&PUSH 2)
70    (NIL&PUSH)
71    (CONST&PUSH 5)                      ; $GET
72    (LOAD&PUSH 3)
73    (CONST&PUSH 6)                      ; $ACESSORS
74    (FUNCALL 2)
76    (CDR&PUSH)
77    (GETVALUE&PUSH 0)                   ; X
79    (CONST&PUSH 7)                      ; :MACSYMA-EXTEND-ELEMENTS
80    (CALL2&PUSH 3)                      ; SEND
82    (CALL1&PUSH 8)                      ; LISTARRAY
84    (JMP L114)
86    L86
86    (SKIP 2)
88    (JMP L126)
90    L90
90    (LOAD&CAR&PUSH 1)
92    (LOAD 0)
93    (BIND 9)                            ; V
95    (CONST&PUSH 10)                     ; (MEQUAL)
96    (LOAD&PUSH 5)
97    (GETVALUE&PUSH 9)                   ; V
99    (JSR&PUSH L0)
102   (LIST 3)
104   (UNBIND1)
105   (PUSH)
106   (LOAD&CONS&STORE 4)
108   (SKIP 2)
110   (LOAD&CDR&STORE 1)
112   (LOAD&CDR&STORE 0)
114   L114
114   (LOAD&PUSH 1)
115   (CALLS1&JMPIF 146 L86)              ; ENDP
118   (LOAD&CAR&PUSH 1)
120   (LOAD&PUSH 1)
121   (CALLS1&JMPIFNOT 146 L90)           ; ENDP
124   (SKIP 3)
126   L126
126   (LOAD&PUSH 0)
127   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
130   (CALLSR 2 34)                       ; APPEND
133   (SKIP 1)
135   (JMP L58)
138   L138
138   (GETVALUE 0)                        ; X
140   (JMP L58)


Disassembly of function #:|(DEFMVAR $DISPLAY_FORMAT_INTERNAL NIL ...)-31-1|
(CONST 0) = $DISPLAY_FORMAT_INTERNAL
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DISPLAY_FORMAT_INTERNAL
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DISPLAY_FORMAT_INTERNAL
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DISPLAY_FORMAT_INTERNAL NIL ...)-31-2|
(CONST 0) = (SPECIAL $DISPLAY_FORMAT_INTERNAL)
(CONST 1) = $DISPLAY_FORMAT_INTERNAL
(CONST 2) = VARIABLE
(CONST 3) = 
"Setting this TRUE can help give the user a greater understanding
	 of the behavior of macsyma on certain of his problems,
	 especially those involving roots and quotients"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DISPLAY_FORMAT_INTERNAL)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DISPLAY_FORMAT_INTERNAL
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DISPLAY_FORMAT_INTERNAL
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $DISPLAY_FORMAT_INTERNAL
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Setting this TRUE can help give the user a greater understanding
	 of the behavior of macsyma on certain of his problems,
	 especially those involving roots and quotients"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $DISPLAY_FORMAT_INTERNAL
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN NFORMAT-CHECK (FORM) ...)-32|
(CONST 0) = NFORMAT-CHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NFORMAT-CHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NFORMAT-CHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NFORMAT-CHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NFORMAT-CHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NFORMAT-CHECK
8     (SKIP&RET 1)


Disassembly of function NFORMAT-CHECK
(CONST 0) = FORM
(CONST 1) = $DISPLAY_FORMAT_INTERNAL
(CONST 2) = SPECREPP
(CONST 3) = NFORMAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FORM $DISPLAY_FORMAT_INTERNAL)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 1)                        ; $DISPLAY_FORMAT_INTERNAL
5     (JMPIFNOT L21)
7     (GETVALUE 0)                        ; FORM
9     (JMPIFATOM L21)
11    (GETVALUE 0)                        ; FORM
13    (CAR)
14    (JMPIFATOM L21)
16    (GETVALUE&PUSH 0)                   ; FORM
18    (CALL1&JMPIFNOT 2 L28)              ; SPECREPP
21    L21
21    (GETVALUE&PUSH 0)                   ; FORM
23    (CALL1 3)                           ; NFORMAT
25    L25
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (GETVALUE 0)                        ; FORM
30    (JMP L25)


Disassembly of function #:|(DEFUN DIMENSION (FORM RESULT LOP ...) ...)-33|
(CONST 0) = DIMENSION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION
8     (SKIP&RET 1)


Disassembly of function DIMENSION
(CONST 0) = FORM
(CONST 1) = LOP
(CONST 2) = ROP
(CONST 3) = W
(CONST 4) = RIGHT
(CONST 5) = LEVEL
(CONST 6) = BREAK
(CONST 7) = NFORMAT-CHECK
(CONST 8) = DIMENSION-ATOM
(CONST 9) = (MPROGN)
(CONST 10) = LBP
(CONST 11) = RBP
(CONST 12) = DIMENSION-PAREN
(CONST 13) = ARRAY
(CONST 14) = MEMQ
(CONST 15) = DIMENSION-ARRAY
(CONST 16) = DIMENSION
(CONST 17) = SAFE-GET
(CONST 18) = DIMENSION-FUNCTION
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP LOP FORM BREAK W LEVEL)
writes special variable : (FORM)
89 byte-code instructions:
0     (LOAD 6)
1     (BIND 0)                            ; FORM
3     (LOAD 7)
4     (BIND 1)                            ; LOP
6     (LOAD 9)
7     (BIND 2)                            ; ROP
9     (LOAD 11)
10    (BIND 3)                            ; W
12    (LOAD 13)
13    (BIND 4)                            ; RIGHT
15    (GETVALUE&PUSH 5)                   ; LEVEL
17    (CALLS2 150)                        ; 1+
19    (BIND 5)                            ; LEVEL
21    (GETVALUE 3)                        ; W
23    (JMPIFNOT L36)
25    (GETVALUE 6)                        ; BREAK
27    (JMPIFNOT L36)
29    (GETVALUE&PUSH 3)                   ; W
31    (GETVALUE&PUSH 6)                   ; BREAK
33    (CALLSR 2 53)                       ; +
36    L36
36    (BIND 6)                            ; BREAK
38    (GETVALUE&PUSH 0)                   ; FORM
40    (CALL1 7)                           ; NFORMAT-CHECK
42    (SETVALUE 0)                        ; FORM
44    (JMPIFATOM L111)
47    (GETVALUE 0)                        ; FORM
49    (CAR)
50    (JMPIFCONSP L58)
52    (CONST&PUSH 9)                      ; (MPROGN)
53    (GETVALUE 0)                        ; FORM
55    (CONS)
56    (SETVALUE 0)                        ; FORM
58    L58
58    (GETVALUE 0)                        ; FORM
60    (CAR)
61    (CAR&PUSH)
62    (CALL1&PUSH 10)                     ; LBP
64    (GETVALUE&PUSH 1)                   ; LOP
66    (CALL1&PUSH 11)                     ; RBP
68    (CALLSR&JMPIF 1 49 L119)            ; <=
72    (GETVALUE&PUSH 2)                   ; ROP
74    (CALL1&PUSH 10)                     ; LBP
76    (GETVALUE 0)                        ; FORM
78    (CAR)
79    (CAR&PUSH)
80    (CALL1&PUSH 11)                     ; RBP
82    (CALLSR&JMPIF 1 48 L119)            ; >
86    (CONST&PUSH 13)                     ; ARRAY
87    (GETVALUE 0)                        ; FORM
89    (CAR&PUSH)
90    (CALL2&JMPIF 14 L127)               ; MEMQ
93    (GETVALUE 0)                        ; FORM
95    (CAR)
96    (CAR&PUSH)
97    (CONST&PUSH 16)                     ; DIMENSION
98    (CALL2&JMPIF 17 L135)               ; SAFE-GET
101   (GETVALUE&PUSH 0)                   ; FORM
103   (LOAD&PUSH 27)
105   (CALL2 18)                          ; DIMENSION-FUNCTION
107   L107
107   (UNBIND 7)
109   (SKIP&RET 7)
111   L111
111   (GETVALUE&PUSH 0)                   ; FORM
113   (LOAD&PUSH 27)
115   (CALL2 8)                           ; DIMENSION-ATOM
117   (JMP L107)
119   L119
119   (GETVALUE&PUSH 0)                   ; FORM
121   (LOAD&PUSH 27)
123   (CALL2 12)                          ; DIMENSION-PAREN
125   (JMP L107)
127   L127
127   (GETVALUE&PUSH 0)                   ; FORM
129   (LOAD&PUSH 27)
131   (CALL2 15)                          ; DIMENSION-ARRAY
133   (JMP L107)
135   L135
135   (GETVALUE 0)                        ; FORM
137   (CAR)
138   (CAR&PUSH)
139   (CONST&PUSH 16)                     ; DIMENSION
140   (PUSH-UNBOUND 1)
142   (CALLS2&PUSH 132)                   ; GET
144   (GETVALUE&PUSH 0)                   ; FORM
146   (LOAD&PUSH 28)
148   (FUNCALL 2)
150   (JMP L107)


Disassembly of function #:|(DEFVAR ATOM-CONTEXT 'DIMENSION-LIST)-34|
(CONST 0) = (SPECIAL ATOM-CONTEXT)
(CONST 1) = ATOM-CONTEXT
(CONST 2) = DIMENSION-LIST
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ATOM-CONTEXT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ATOM-CONTEXT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ATOM-CONTEXT
8     (CONST&PUSH 2)                      ; DIMENSION-LIST
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; ATOM-CONTEXT
12    (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (*EXPR DIMENSION-ARRAY-OBJECT))-35|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN DIMENSION-ATOM (FORM RESULT) ...)-36|
(CONST 0) = DIMENSION-ATOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-ATOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-ATOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-ATOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-ATOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-ATOM
8     (SKIP&RET 1)


Disassembly of function DIMENSION-ATOM
(CONST 0) = FORM
(CONST 1) = ATOM-CONTEXT
(CONST 2) = MAKESTRING
(CONST 3) = DIMENSION-STRING
(CONST 4) = ARRAY
(CONST 5) = ML-TYPEP
(CONST 6) = DIMENSION-ARRAY-OBJECT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ATOM-CONTEXT FORM)
36 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 0)                   ; FORM
5     (CALLS2&JMPIFNOT 6 L17)             ; SYMBOLP
8     (GETVALUE&PUSH 0)                   ; FORM
10    (GETVALUE&PUSH 1)                   ; ATOM-CONTEXT
12    (PUSH-UNBOUND 1)
14    (CALLS2&JMPIF 132 L38)              ; GET
17    L17
17    (GETVALUE&PUSH 0)                   ; FORM
19    (CALLS2&JMPIF 7 L28)                ; STRINGP
22    (GETVALUE&PUSH 0)                   ; FORM
24    (CONST&PUSH 4)                      ; ARRAY
25    (CALL2&JMPIF 5 L53)                 ; ML-TYPEP
28    L28
28    (GETVALUE&PUSH 0)                   ; FORM
30    (CALL1&PUSH 2)                      ; MAKESTRING
32    (LOAD&PUSH 5)
33    (CALL2 3)                           ; DIMENSION-STRING
35    L35
35    (UNBIND1)
36    (SKIP&RET 3)
38    L38
38    (GETVALUE&PUSH 0)                   ; FORM
40    (GETVALUE&PUSH 1)                   ; ATOM-CONTEXT
42    (PUSH-UNBOUND 1)
44    (CALLS2&PUSH 132)                   ; GET
46    (GETVALUE&PUSH 0)                   ; FORM
48    (LOAD&PUSH 6)
49    (FUNCALL 2)
51    (JMP L35)
53    L53
53    (GETVALUE&PUSH 0)                   ; FORM
55    (LOAD&PUSH 5)
56    (CALL2 6)                           ; DIMENSION-ARRAY-OBJECT
58    (JMP L35)


Disassembly of function #:|(DEFMFUN DIMENSION-STRING (DUMMY RESULT &AUX ...) ...)-37|
(CONST 0) = DIMENSION-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-STRING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-STRING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-STRING
8     (SKIP&RET 1)


Disassembly of function DIMENSION-STRING
(CONST 0) = 0
(CONST 1) = WIDTH
(CONST 2) = 1
(CONST 3) = HEIGHT
(CONST 4) = DEPTH
(CONST 5) = L
(CONST 6) = #\Newline
(CONST 7) = CHECKFIT
(CONST 8) = BREAK
(CONST 9) = LINEL
(CONST 10) = BKPTOUT
(CONST 11) = W
(CONST 12) = FORCEBREAK
(CONST 13) = #\#
(CONST 14) = CHECKBREAK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W BKPTOUT LINEL BREAK WIDTH L)
writes special variables : (W L DEPTH HEIGHT WIDTH)
105 byte-code instructions:
0     (NIL&PUSH)
1     (CONST 0)                           ; 0
2     (SETVALUE 1)                        ; WIDTH
4     (CONST 2)                           ; 1
5     (SETVALUE 3)                        ; HEIGHT
7     (CONST 0)                           ; 0
8     (SETVALUE 4)                        ; DEPTH
10    (LOAD 3)
11    (BIND 5)                            ; L
13    (GETVALUE 5)                        ; L
15    (JMPIFNOT L42)
17    L17
17    (GETVALUE&PUSH 1)                   ; WIDTH
19    (CALLS2 150)                        ; 1+
21    (SETVALUE 1)                        ; WIDTH
23    (GETVALUE 5)                        ; L
25    (CAR&PUSH)
26    (CONST&PUSH 6)                      ; #\Newline
27    (CALLSR&JMPIFNOT 1 7 L33)           ; CHAR=
31    (T&STORE 3)
33    L33
33    (GETVALUE 5)                        ; L
35    (CDR)
36    (SETVALUE 5)                        ; L
38    (GETVALUE 5)                        ; L
40    (JMPIF L17)
42    L42
42    (UNBIND1)
43    (GETVALUE&PUSH 1)                   ; WIDTH
45    (CALL1&JMPIFNOT 7 L51)              ; CHECKFIT
48    (LOAD&JMPIFNOT 0 L82)
51    L51
51    (GETVALUE 8)                        ; BREAK
53    (JMPIFNOT L82)
55    (CONST 0)                           ; 0
56    (SETVALUE 1)                        ; WIDTH
58    (LOAD 3)
59    (BIND 5)                            ; L
61    (GETVALUE&PUSH 9)                   ; LINEL
63    (GETVALUE&PUSH 8)                   ; BREAK
65    (GETVALUE&PUSH 10)                  ; BKPTOUT
67    (CALLSR&PUSH 1 54)                  ; -
70    (CALLSR 1 54)                       ; -
73    (BIND 11)                           ; W
75    (GETVALUE 5)                        ; L
77    (JMPIFNOT L175)
80    (JMP L109)
82    L82
82    (LOAD&PUSH 3)
83    (LOAD&PUSH 3)
84    (CALLS1 163)                        ; NRECONC
86    (SKIP&RET 4)
88    L88
88    (LOAD&PUSH 8)
89    (GETVALUE&PUSH 1)                   ; WIDTH
91    (CALL2 12)                          ; FORCEBREAK
93    (NIL&STORE 8)
95    (GETVALUE&PUSH 9)                   ; LINEL
97    (GETVALUE&PUSH 1)                   ; WIDTH
99    (CALLSR 2 53)                       ; +
102   (SETVALUE 11)                       ; W
104   (GETVALUE 5)                        ; L
106   (JMPIFNOT L175)
109   L109
109   (GETVALUE 5)                        ; L
111   (STORE 9)
113   (CDR)
114   (SETVALUE 5)                        ; L
116   (LOAD&CAR&PUSH 9)
118   (CONST&PUSH 6)                      ; #\Newline
119   (CALLSR&JMPIF 1 7 L88)              ; CHAR=
123   (GETVALUE&PUSH 1)                   ; WIDTH
125   (CALLS2 150)                        ; 1+
127   (SETVALUE 1)                        ; WIDTH
129   (GETVALUE&PUSH 11)                  ; W
131   (GETVALUE&PUSH 1)                   ; WIDTH
133   (CALLSR&JMPIFNOT 1 45 L165)         ; =
137   (GETVALUE 5)                        ; L
139   (JMPIFNOT L165)
141   (CONST&PUSH 13)                     ; #\#
142   (LOAD 9)
143   (CONS&PUSH)
144   (GETVALUE&PUSH 1)                   ; WIDTH
146   (CALL2 12)                          ; FORCEBREAK
148   (NIL&STORE 8)
150   (GETVALUE&PUSH 9)                   ; LINEL
152   (GETVALUE&PUSH 1)                   ; WIDTH
154   (CALLSR 2 53)                       ; +
157   (SETVALUE 11)                       ; W
159   (GETVALUE&PUSH 1)                   ; WIDTH
161   (CALLS2 150)                        ; 1+
163   (SETVALUE 1)                        ; WIDTH
165   L165
165   (LOAD&PUSH 9)
166   (LOAD&PUSH 9)
167   (CALLS1&STORE 170 8)                ; RPLACD
170   (GETVALUE 5)                        ; L
172   (JMPIF L109)
175   L175
175   (LOAD&PUSH 8)
176   (GETVALUE&PUSH 1)                   ; WIDTH
178   (CALL2 14)                          ; CHECKBREAK
180   (LOAD 8)
181   (UNBIND 2)
183   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN MAKESTRING (ATOM) ...)-38|
(CONST 0) = MAKESTRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKESTRING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKESTRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKESTRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKESTRING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKESTRING
8     (SKIP&RET 1)


Disassembly of function MAKESTRING
(CONST 0) = EXPLODEN
(CONST 1) = REVERSEALIAS
(CONST 2) = $ALIASES
(CONST 3) = MEMQ
(CONST 4) = NOUN
(CONST 5) = GETOP
(CONST 6) = #\&
(CONST 7) = DOUBLE-QUOTE-CHAR
(CONST 8) = #\$
(CONST 9) = STRINGDISP
(CONST 10) = #\%
(CONST 11) = $LISPDISP
(CONST 12) = #\?
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($LISPDISP DOUBLE-QUOTE-CHAR STRINGDISP $ALIASES)
81 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 2)
2     (CALLS2&JMPIF 8 L37)                ; NUMBERP
5     (LOAD&PUSH 2)
6     (CALLS2&JMPIFNOT 6 L40)             ; SYMBOLP
9     (LOAD&PUSH 2)
10    (CONST&PUSH 1)                      ; REVERSEALIAS
11    (PUSH-UNBOUND 1)
13    (CALLS2&STORE 132 0)                ; GET
16    (JMPIFNOT L43)
18    (LOAD&PUSH 2)
19    (GETVALUE&PUSH 2)                   ; $ALIASES
21    (CALL2&JMPIFNOT 3 L31)              ; MEMQ
24    (LOAD&PUSH 2)
25    (CONST&PUSH 4)                      ; NOUN
26    (PUSH-UNBOUND 1)
28    (CALLS2&JMPIF 132 L43)              ; GET
31    L31
31    (LOAD 0)
32    L32
32    (PUSH)
33    (CALL1 0)                           ; EXPLODEN
35    (SKIP&RET 3)
37    L37
37    (LOAD 2)
38    (JMP L32)
40    L40
40    (LOAD 2)
41    (JMP L32)
43    L43
43    (LOAD&PUSH 2)
44    (CALL1&PUSH 5)                      ; GETOP
46    (LOAD 3)
47    (JMPIFNOTEQ L84)
49    (LOAD&PUSH 2)
50    (CALL1 0)                           ; EXPLODEN
52    (STORE 0)
53    (CONST&PUSH 8)                      ; #\$
54    (LOAD&CAR&PUSH 1)
56    (CALLSR&JMPIF 1 7 L97)              ; CHAR=
60    (GETVALUE 9)                        ; STRINGDISP
62    (JMPIFNOT L101)
64    (CONST&PUSH 6)                      ; #\&
65    (LOAD&CAR&PUSH 1)
67    (CALLSR&JMPIFNOT 1 7 L101)          ; CHAR=
71    L71
71    (GETVALUE&PUSH 7)                   ; DOUBLE-QUOTE-CHAR
73    (LOAD&CDR&PUSH 1)
75    (GETVALUE&PUSH 7)                   ; DOUBLE-QUOTE-CHAR
77    (LIST&PUSH 1)
79    (CALLSR 2 35)                       ; NCONC
82    (JMP L121)
84    L84
84    (LOAD&PUSH 2)
85    (CALL1&PUSH 5)                      ; GETOP
87    (CALL1 0)                           ; EXPLODEN
89    (STORE 0)
90    (CONST&PUSH 6)                      ; #\&
91    (LOAD&CAR&PUSH 1)
93    (CALLSR&JMPIF 1 7 L71)              ; CHAR=
97    L97
97    (LOAD 0)
98    (CDR)
99    (SKIP&RET 3)
101   L101
101   (CONST&PUSH 10)                     ; #\%
102   (LOAD&CAR&PUSH 1)
104   (CALLSR&JMPIF 1 7 L97)              ; CHAR=
108   (CONST&PUSH 6)                      ; #\&
109   (LOAD&CAR&PUSH 1)
111   (CALLSR&JMPIF 1 7 L97)              ; CHAR=
115   (GETVALUE 11)                       ; $LISPDISP
117   (JMPIFNOT L124)
119   (CONST&PUSH 12)                     ; #\?
120   (LOAD 1)
121   L121
121   (CONS)
122   (SKIP&RET 3)
124   L124
124   (POP)
125   (SKIP&RET 2)


Disassembly of function #:|(DEFUN DIMENSION-PAREN (FORM RESULT) ...)-39|
(CONST 0) = DIMENSION-PAREN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-PAREN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-PAREN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-PAREN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-PAREN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-PAREN
8     (SKIP&RET 1)


Disassembly of function DIMENSION-PAREN
(CONST 0) = FORM
(CONST 1) = RIGHT-PARENTHESES-CHAR
(CONST 2) = LEFT-PARENTHESES-CHAR
(CONST 3) = MPAREN
(CONST 4) = 1
(CONST 5) = RIGHT
(CONST 6) = DIMENSION
(CONST 7) = 2
(CONST 8) = WIDTH
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (WIDTH RIGHT LEFT-PARENTHESES-CHAR FORM RIGHT-PARENTHESES-CHAR)
writes special variable : (WIDTH)
22 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 1)                   ; RIGHT-PARENTHESES-CHAR
5     (GETVALUE&PUSH 0)                   ; FORM
7     (GETVALUE&PUSH 2)                   ; LEFT-PARENTHESES-CHAR
9     (LOAD 7)
10    (CONS&PUSH)
11    (CONST&PUSH 3)                      ; MPAREN
12    (CONST&PUSH 3)                      ; MPAREN
13    (CONST&PUSH 4)                      ; 1
14    (GETVALUE&PUSH 5)                   ; RIGHT
16    (CALLS2&PUSH 150)                   ; 1+
18    (CALL 6 6)                          ; DIMENSION
21    (CONS)
22    (STORE 4)
23    (CONST&PUSH 7)                      ; 2
24    (GETVALUE&PUSH 8)                   ; WIDTH
26    (CALLSR 2 53)                       ; +
29    (SETVALUE 8)                        ; WIDTH
31    (LOAD 4)
32    (UNBIND1)
33    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIMENSION-ARRAY (X RESULT) ...)-40|
(CONST 0) = DIMENSION-ARRAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-ARRAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-ARRAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-ARRAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-ARRAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-ARRAY
8     (SKIP&RET 1)


Disassembly of function DIMENSION-ARRAY
(CONST 0) = X
(CONST 1) = BAS
(CONST 2) = 0
(CONST 3) = W
(CONST 4) = MQAPPLY
(CONST 5) = $NOUNDISP
(CONST 6) = VERB
(CONST 7) = ALIAS
(CONST 8) = #\'
(CONST 9) = 2
(CONST 10) = NOUN
(CONST 11) = $ALIASES
(CONST 12) = MEMQ
(CONST 13) = REVERSEALIAS
(CONST 14) = 1
(CONST 15) = MPAREN
(CONST 16) = LOP
(CONST 17) = ROP
(CONST 18) = BREAK
(CONST 19) = SIZE
(CONST 20) = DIMENSION-LIST
(CONST 21) = WIDTH
(CONST 22) = HEIGHT
(CONST 23) = DEPTH
(CONST 24) = ARRAY
(CONST 25) = RIGHT
(CONST 26) = DIMENSION-PAREN
(CONST 27) = DIMENSION-ARRAY
(CONST 28) = ATOM-CONTEXT
(CONST 29) = MFUNCTION
(CONST 30) = DIMENSION
(CONST 31) = CHECKFIT
(CONST 32) = (SUBSCRIPT)
(CONST 33) = DIMENSION-FUNCTION
(CONST 34) = RIGHT-PARENTHESES-CHAR
(CONST 35) = UPDATE-HEIGHTS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BAS RIGHT-PARENTHESES-CHAR LOP DEPTH HEIGHT WIDTH W $ALIASES $NOUNDISP X)
writes special variables : (X DEPTH WIDTH BAS W)
194 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; BAS
7     (CONST 2)                           ; 0
8     (BIND 3)                            ; W
10    (CONST&PUSH 2)                      ; 0
11    (CONST&PUSH 2)                      ; 0
12    (NIL&PUSH)
13    (GETVALUE 0)                        ; X
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 4 L225)                  ; MQAPPLY
21    (GETVALUE 0)                        ; X
23    (CAR)
24    (CAR)
25    (STORE 9)
27    (GETVALUE 5)                        ; $NOUNDISP
29    (JMPIFNOT L96)
32    L32
32    (GETVALUE 0)                        ; X
34    (CAR)
35    (CAR&PUSH)
36    (CALLS2&JMPIFNOT 6 L96)             ; SYMBOLP
39    (GETVALUE 0)                        ; X
41    (CAR)
42    (CAR&PUSH)
43    (CONST&PUSH 6)                      ; VERB
44    (PUSH-UNBOUND 1)
46    (CALLS2&JMPIFNOT 132 L60)           ; GET
49    (GETVALUE 0)                        ; X
51    (CAR)
52    (CAR&PUSH)
53    (CONST&PUSH 7)                      ; ALIAS
54    (PUSH-UNBOUND 1)
56    (CALLS2&JMPIF 132 L244)             ; GET
60    L60
60    (GETVALUE 0)                        ; X
62    (CAR)
63    (CAR&PUSH)
64    (CONST&PUSH 10)                     ; NOUN
65    (PUSH-UNBOUND 1)
67    (CALLS2&JMPIFNOT 132 L96)           ; GET
70    (GETVALUE 0)                        ; X
72    (CAR)
73    (CAR&PUSH)
74    (GETVALUE 11)                       ; $ALIASES
76    (CDR&PUSH)
77    (CALL2&JMPIF 12 L96)                ; MEMQ
80    (GETVALUE 0)                        ; X
82    (CAR)
83    (CAR&PUSH)
84    (CONST&PUSH 13)                     ; REVERSEALIAS
85    (PUSH-UNBOUND 1)
87    (CALLS2&JMPIF 132 L96)              ; GET
90    (CONST&PUSH 8)                      ; #\'
91    (LOAD&CONS&STORE 14)
93    (CONST 14)                          ; 1
94    (SETVALUE 3)                        ; W
96    L96
96    (CONST 15)                          ; MPAREN
97    (BIND 16)                           ; LOP
99    (CONST 15)                          ; MPAREN
100   (BIND 17)                           ; ROP
102   (NIL)
103   (BIND 18)                           ; BREAK
105   (CONST 14)                          ; 1
106   (BIND 19)                           ; SIZE
108   (GETVALUE&PUSH 0)                   ; X
110   (NIL&PUSH)
111   (CALL2 20)                          ; DIMENSION-LIST
113   (UNBIND 4)
115   (STORE 0)
116   (GETVALUE&PUSH 3)                   ; W
118   (GETVALUE&PUSH 21)                  ; WIDTH
120   (CALLSR 2 53)                       ; +
123   (SETVALUE 3)                        ; W
125   (GETVALUE 22)                       ; HEIGHT
127   (STORE 2)
128   (GETVALUE 23)                       ; DEPTH
130   (STORE 1)
131   (LOAD 9)
132   (JMPIFATOM L141)
134   (CONST&PUSH 24)                     ; ARRAY
135   (LOAD&CAR&PUSH 10)
137   (CALL2&JMPIF 12 L258)               ; MEMQ
141   L141
141   (CONST 27)                          ; DIMENSION-ARRAY
143   (BIND 28)                           ; ATOM-CONTEXT
145   (LOAD&PUSH 12)
146   (LOAD&PUSH 18)
147   (GETVALUE&PUSH 16)                  ; LOP
149   (CONST&PUSH 29)                     ; MFUNCTION
150   (NIL&PUSH)
151   (CONST&PUSH 2)                      ; 0
152   (CALL 6 30)                         ; DIMENSION
155   (UNBIND1)
156   L156
156   (SETVALUE 1)                        ; BAS
158   (GETVALUE&PUSH 3)                   ; W
160   (GETVALUE&PUSH 21)                  ; WIDTH
162   (CALLSR 2 53)                       ; +
165   (SETVALUE 21)                       ; WIDTH
167   (PUSH)
168   (CALL1&JMPIFNOT 31 L273)            ; CHECKFIT
172   (GETVALUE&PUSH 34)                  ; RIGHT-PARENTHESES-CHAR
174   (GETVALUE 1)                        ; BAS
176   (CAR&PUSH)
177   (CALLSR&JMPIF 1 7 L287)             ; CHAR=
182   (CONST&PUSH 2)                      ; 0
183   (GETVALUE&PUSH 23)                  ; DEPTH
185   (LOAD&PUSH 4)
186   (CALLSR&PUSH 2 53)                  ; +
189   (CALLSR&PUSH 0 54)                  ; -
192   (LOAD 2)
193   (CONS)
194   (CONS&PUSH)
195   (GETVALUE 1)                        ; BAS
197   (CONS)
198   (STORE 14)
200   (LOAD&PUSH 2)
201   (LOAD&PUSH 2)
202   (GETVALUE&PUSH 23)                  ; DEPTH
204   (CALLSR 3 53)                       ; +
207   (SETVALUE 23)                       ; DEPTH
209   L209
209   (GETVALUE&PUSH 22)                  ; HEIGHT
211   (GETVALUE&PUSH 23)                  ; DEPTH
213   (CALL2 35)                          ; UPDATE-HEIGHTS
215   (LOAD 14)
216   L216
216   (SKIP 3)
218   (UNBIND 2)
220   (SKIP 1)
222   (UNBIND1)
223   (SKIP&RET 3)
225   L225
225   (GETVALUE 0)                        ; X
227   (CDR)
228   (CAR)
229   (STORE 9)
231   (GETVALUE 0)                        ; X
233   (CDR)
234   (SETVALUE 0)                        ; X
236   (GETVALUE 5)                        ; $NOUNDISP
238   (JMPIFNOT L96)
241   (JMP L32)
244   L244
244   (CONST&PUSH 8)                      ; #\'
245   (CONST&PUSH 8)                      ; #\'
246   (LOAD 16)
248   (LIST* 2)
250   (STORE 14)
252   (CONST 9)                           ; 2
253   (SETVALUE 3)                        ; W
255   (JMP L96)
258   L258
258   (NIL)
259   (BIND 18)                           ; BREAK
261   (CONST 2)                           ; 0
262   (BIND 25)                           ; RIGHT
264   (LOAD&PUSH 15)
265   (LOAD&PUSH 21)
266   (CALL2 26)                          ; DIMENSION-PAREN
268   (UNBIND 2)
270   (JMP L156)
273   L273
273   (CONST&PUSH 32)                     ; (SUBSCRIPT)
275   (LOAD&PUSH 10)
276   (GETVALUE 0)                        ; X
278   (CDR)
279   (CONS)
280   (CONS&PUSH)
281   (LOAD&PUSH 15)
282   (CALL2 33)                          ; DIMENSION-FUNCTION
284   (JMP L216)
287   L287
287   (CONST&PUSH 2)                      ; 0
288   (LOAD&PUSH 3)
289   (CALLSR&PUSH 0 54)                  ; -
292   (LOAD 2)
293   (CONS)
294   (CONS&PUSH)
295   (GETVALUE 1)                        ; BAS
297   (CONS)
298   (STORE 14)
300   (LOAD&PUSH 2)
301   (LOAD&PUSH 2)
302   (CALLSR&PUSH 2 53)                  ; +
305   (GETVALUE&PUSH 23)                  ; DEPTH
307   (CALLSR 1 51)                       ; MAX
310   (SETVALUE 23)                       ; DEPTH
312   (JMP L209)


Disassembly of function #:|(DEFUN DIMENSION-FUNCTION (X RESULT) ...)-41|
(CONST 0) = DIMENSION-FUNCTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-FUNCTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-FUNCTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-FUNCTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-FUNCTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-FUNCTION
8     (SKIP&RET 1)


Disassembly of function DIMENSION-FUNCTION
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = $NOUNDISP
(CONST 4) = VERB
(CONST 5) = ALIAS
(CONST 6) = #\'
(CONST 7) = 2
(CONST 8) = NOUN
(CONST 9) = $ALIASES
(CONST 10) = MEMQ
(CONST 11) = REVERSEALIAS
(CONST 12) = 1
(CONST 13) = MQAPPLY
(CONST 14) = DIMENSION-FUNCTION
(CONST 15) = ATOM-CONTEXT
(CONST 16) = LOP
(CONST 17) = MPAREN
(CONST 18) = DIMENSION
(CONST 19) = WIDTH
(CONST 20) = HEIGHT
(CONST 21) = DEPTH
(CONST 22) = RIGHT-PARENTHESES-CHAR
(CONST 23) = LEFT-PARENTHESES-CHAR
(CONST 24) = ROP
(CONST 25) = BREAK
(CONST 26) = DIMENSION-LIST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(LEFT-PARENTHESES-CHAR RIGHT-PARENTHESES-CHAR BREAK DEPTH HEIGHT WIDTH W LOP
 $ALIASES X $NOUNDISP)
writes special variables : (X DEPTH HEIGHT WIDTH W)
150 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (CONST 1)                           ; 0
5     (BIND 2)                            ; W
7     (CONST&PUSH 1)                      ; 0
8     (CONST&PUSH 1)                      ; 0
9     (GETVALUE 3)                        ; $NOUNDISP
11    (JMPIFNOT L78)
14    (GETVALUE 0)                        ; X
16    (CAR)
17    (CAR&PUSH)
18    (CALLS2&JMPIFNOT 6 L78)             ; SYMBOLP
21    (GETVALUE 0)                        ; X
23    (CAR)
24    (CAR&PUSH)
25    (CONST&PUSH 4)                      ; VERB
26    (PUSH-UNBOUND 1)
28    (CALLS2&JMPIFNOT 132 L42)           ; GET
31    (GETVALUE 0)                        ; X
33    (CAR)
34    (CAR&PUSH)
35    (CONST&PUSH 5)                      ; ALIAS
36    (PUSH-UNBOUND 1)
38    (CALLS2&JMPIF 132 L199)             ; GET
42    L42
42    (GETVALUE 0)                        ; X
44    (CAR)
45    (CAR&PUSH)
46    (CONST&PUSH 8)                      ; NOUN
47    (PUSH-UNBOUND 1)
49    (CALLS2&JMPIFNOT 132 L78)           ; GET
52    (GETVALUE 0)                        ; X
54    (CAR)
55    (CAR&PUSH)
56    (GETVALUE 9)                        ; $ALIASES
58    (CDR&PUSH)
59    (CALL2&JMPIF 10 L78)                ; MEMQ
62    (GETVALUE 0)                        ; X
64    (CAR)
65    (CAR&PUSH)
66    (CONST&PUSH 11)                     ; REVERSEALIAS
67    (PUSH-UNBOUND 1)
69    (CALLS2&JMPIF 132 L78)              ; GET
72    (CONST&PUSH 6)                      ; #\'
73    (LOAD&CONS&STORE 10)
75    (CONST 12)                          ; 1
76    (SETVALUE 2)                        ; W
78    L78
78    (GETVALUE 0)                        ; X
80    (CAR)
81    (CAR&PUSH)
82    (JMPIFEQTO 13 L212)                 ; MQAPPLY
86    (GETVALUE 0)                        ; X
88    (CAR)
89    (CAR)
90    (STORE 5)
91    L91
91    (CONST 14)                          ; DIMENSION-FUNCTION
92    (BIND 15)                           ; ATOM-CONTEXT
94    (LOAD&PUSH 8)
95    (LOAD&PUSH 14)
96    (GETVALUE&PUSH 16)                  ; LOP
98    (CONST&PUSH 17)                     ; MPAREN
99    (CONST&PUSH 1)                      ; 0
100   (CONST&PUSH 12)                     ; 1
101   (CALL 6 18)                         ; DIMENSION
104   (UNBIND1)
105   (STORE 10)
107   (GETVALUE&PUSH 2)                   ; W
109   (GETVALUE&PUSH 19)                  ; WIDTH
111   (CALLSR 2 53)                       ; +
114   (SETVALUE 2)                        ; W
116   (GETVALUE 20)                       ; HEIGHT
118   (STORE 1)
119   (GETVALUE 21)                       ; DEPTH
121   (STORE 0)
122   (GETVALUE 0)                        ; X
124   (CDR)
125   (JMPIFNOT L225)
128   (CONST 17)                          ; MPAREN
129   (BIND 16)                           ; LOP
131   (CONST 17)                          ; MPAREN
132   (BIND 24)                           ; ROP
134   (GETVALUE 25)                       ; BREAK
136   (JMPIFNOT L146)
138   (CONST&PUSH 12)                     ; 1
139   (GETVALUE&PUSH 2)                   ; W
141   (GETVALUE&PUSH 25)                  ; BREAK
143   (CALLSR 3 53)                       ; +
146   L146
146   (BIND 25)                           ; BREAK
148   (GETVALUE&PUSH 22)                  ; RIGHT-PARENTHESES-CHAR
150   (GETVALUE&PUSH 0)                   ; X
152   (GETVALUE&PUSH 23)                  ; LEFT-PARENTHESES-CHAR
154   (LOAD 22)
156   (CONS&PUSH)
157   (CALL2 26)                          ; DIMENSION-LIST
159   (CONS)
160   (UNBIND 3)
162   (STORE 10)
164   (CONST&PUSH 7)                      ; 2
165   (GETVALUE&PUSH 2)                   ; W
167   (GETVALUE&PUSH 19)                  ; WIDTH
169   (CALLSR 3 53)                       ; +
172   (SETVALUE 19)                       ; WIDTH
174   (LOAD&PUSH 1)
175   (GETVALUE&PUSH 20)                  ; HEIGHT
177   (CALLSR 1 51)                       ; MAX
180   (SETVALUE 20)                       ; HEIGHT
182   (LOAD&PUSH 0)
183   (GETVALUE&PUSH 21)                  ; DEPTH
185   (CALLSR 1 51)                       ; MAX
188   (SETVALUE 21)                       ; DEPTH
190   L190
190   (LOAD 10)
191   (SKIP 2)
193   (UNBIND1)
194   (SKIP 1)
196   (UNBIND1)
197   (SKIP&RET 3)
199   L199
199   (CONST&PUSH 6)                      ; #\'
200   (CONST&PUSH 6)                      ; #\'
201   (LOAD 12)
202   (LIST* 2)
204   (STORE 10)
206   (CONST 7)                           ; 2
207   (SETVALUE 2)                        ; W
209   (JMP L78)
212   L212
212   (GETVALUE 0)                        ; X
214   (CDR)
215   (CAR)
216   (STORE 5)
217   (GETVALUE 0)                        ; X
219   (CDR)
220   (SETVALUE 0)                        ; X
222   (JMP L91)
225   L225
225   (GETVALUE&PUSH 22)                  ; RIGHT-PARENTHESES-CHAR
227   (GETVALUE&PUSH 23)                  ; LEFT-PARENTHESES-CHAR
229   (LOAD 12)
230   (LIST* 2)
232   (STORE 10)
234   (CONST&PUSH 7)                      ; 2
235   (GETVALUE&PUSH 2)                   ; W
237   (CALLSR 2 53)                       ; +
240   (SETVALUE 19)                       ; WIDTH
242   (JMP L190)


Disassembly of function #:|(DEFMFUN DIMENSION-PREFIX (FORM RESULT) ...)-42|
(CONST 0) = DIMENSION-PREFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-PREFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-PREFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-PREFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-PREFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-PREFIX
8     (SKIP&RET 1)


Disassembly of function DIMENSION-PREFIX
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = DISSYM
(CONST 3) = SAFE-GET
(CONST 4) = RECONC
(CONST 5) = ROP
(CONST 6) = RIGHT
(CONST 7) = DIMENSION
(CONST 8) = WIDTH
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (WIDTH RIGHT ROP FORM)
writes special variable : (WIDTH)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (CONST&PUSH 1)                      ; 0
5     (GETVALUE 0)                        ; FORM
7     (CAR)
8     (CAR&PUSH)
9     (CONST&PUSH 2)                      ; DISSYM
10    (CALL2 3)                           ; SAFE-GET
12    (STORE 1)
13    (PUSH)
14    (CALLS2&STORE 71 0)                 ; LENGTH
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CAR&PUSH)
21    (LOAD&PUSH 2)
22    (LOAD&PUSH 8)
23    (CALL2&PUSH 4)                      ; RECONC
25    (GETVALUE 0)                        ; FORM
27    (CAR)
28    (CAR&PUSH)
29    (GETVALUE&PUSH 5)                   ; ROP
31    (LOAD&PUSH 4)
32    (GETVALUE&PUSH 6)                   ; RIGHT
34    (CALL 6 7)                          ; DIMENSION
37    (STORE 6)
38    (LOAD&PUSH 0)
39    (GETVALUE&PUSH 8)                   ; WIDTH
41    (CALLSR 2 53)                       ; +
44    (SETVALUE 8)                        ; WIDTH
46    (LOAD 6)
47    (SKIP 2)
49    (UNBIND1)
50    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIMENSION-LIST (FORM RESULT) ...)-43|
(CONST 0) = DIMENSION-LIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-LIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-LIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-LIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-LIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-LIST
8     (SKIP&RET 1)


Disassembly of function DIMENSION-LIST
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = LOP
(CONST 4) = MCOMMA
(CONST 5) = RIGHT
(CONST 6) = DIMENSION
(CONST 7) = WIDTH
(CONST 8) = HEIGHT
(CONST 9) = DEPTH
(CONST 10) = L
(CONST 11) = #\Space
(CONST 12) = #\,
(CONST 13) = 2
(CONST 14) = CHECKBREAK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W L DEPTH HEIGHT WIDTH RIGHT LOP FORM)
writes special variables : (DEPTH HEIGHT WIDTH L W)
77 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (CONST 1)                           ; 0
4     (BIND 2)                            ; W
6     (CONST&PUSH 1)                      ; 0
7     (CONST&PUSH 1)                      ; 0
8     (GETVALUE 0)                        ; FORM
10    (CDR)
11    (CAR&PUSH)
12    (LOAD&PUSH 10)
13    (GETVALUE&PUSH 3)                   ; LOP
15    (CONST&PUSH 4)                      ; MCOMMA
16    (CONST&PUSH 1)                      ; 0
17    (GETVALUE&PUSH 5)                   ; RIGHT
19    (CALL 6 6)                          ; DIMENSION
22    (STORE 9)
24    (GETVALUE 7)                        ; WIDTH
26    (SETVALUE 2)                        ; W
28    (GETVALUE 8)                        ; HEIGHT
30    (STORE 1)
31    (GETVALUE 9)                        ; DEPTH
33    (STORE 0)
34    (GETVALUE 0)                        ; FORM
36    (CDR)
37    (CDR)
38    (BIND 10)                           ; L
40    (GETVALUE 10)                       ; L
42    (JMPIFNOT L113)
45    L45
45    (CONST&PUSH 11)                     ; #\Space
46    (CONST&PUSH 12)                     ; #\,
47    (LOAD 14)
48    (LIST* 2)
50    (STORE 12)
52    (GETVALUE&PUSH 2)                   ; W
54    (CONST&PUSH 13)                     ; 2
55    (CALLSR 2 53)                       ; +
58    (SETVALUE 2)                        ; W
60    (LOAD&PUSH 12)
61    (GETVALUE&PUSH 2)                   ; W
63    (CALL2 14)                          ; CHECKBREAK
65    (GETVALUE 10)                       ; L
67    (CAR&PUSH)
68    (LOAD&PUSH 13)
69    (CONST&PUSH 4)                      ; MCOMMA
70    (CONST&PUSH 4)                      ; MCOMMA
71    (GETVALUE&PUSH 2)                   ; W
73    (GETVALUE&PUSH 5)                   ; RIGHT
75    (CALL 6 6)                          ; DIMENSION
78    (STORE 12)
80    (GETVALUE&PUSH 2)                   ; W
82    (GETVALUE&PUSH 7)                   ; WIDTH
84    (CALLSR 2 53)                       ; +
87    (SETVALUE 2)                        ; W
89    (LOAD&PUSH 4)
90    (GETVALUE&PUSH 8)                   ; HEIGHT
92    (CALLSR&STORE 1 51 4)               ; MAX
96    (LOAD&PUSH 3)
97    (GETVALUE&PUSH 9)                   ; DEPTH
99    (CALLSR&STORE 1 51 3)               ; MAX
103   (GETVALUE 10)                       ; L
105   (CDR)
106   (SETVALUE 10)                       ; L
108   (GETVALUE 10)                       ; L
110   (JMPIF L45)
113   L113
113   (UNBIND1)
114   (GETVALUE 2)                        ; W
116   (SETVALUE 7)                        ; WIDTH
118   (LOAD 1)
119   (SETVALUE 8)                        ; HEIGHT
121   (LOAD 0)
122   (SETVALUE 9)                        ; DEPTH
124   (LOAD 9)
125   (SKIP 2)
127   (UNBIND 2)
129   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN DIMENSION-INFIX (FORM RESULT) ...)-44|
(CONST 0) = DIMENSION-INFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-INFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-INFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-INFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-INFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-INFIX
8     (SKIP&RET 1)


Disassembly of function DIMENSION-INFIX
(CONST 0) = FORM
(CONST 1) = WNA-ERR
(CONST 2) = 0
(CONST 3) = W
(CONST 4) = DISSYM
(CONST 5) = SAFE-GET
(CONST 6) = LOP
(CONST 7) = DIMENSION
(CONST 8) = WIDTH
(CONST 9) = HEIGHT
(CONST 10) = DEPTH
(CONST 11) = RECONC
(CONST 12) = CHECKBREAK
(CONST 13) = ROP
(CONST 14) = RIGHT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT ROP W DEPTH HEIGHT WIDTH LOP FORM)
writes special variables : (DEPTH HEIGHT WIDTH W)
92 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (CDR)
7     (JMPIFNOT L16)
9     (GETVALUE 0)                        ; FORM
11    (CDR)
12    (CDR)
13    (CDR)
14    (JMPIFNOT L22)
16    L16
16    (GETVALUE 0)                        ; FORM
18    (CAR)
19    (CAR&PUSH)
20    (CALL1 1)                           ; WNA-ERR
22    L22
22    (NIL&PUSH)
23    (CONST&PUSH 2)                      ; 0
24    (CONST 2)                           ; 0
25    (BIND 3)                            ; W
27    (CONST&PUSH 2)                      ; 0
28    (CONST&PUSH 2)                      ; 0
29    (GETVALUE 0)                        ; FORM
31    (CAR)
32    (CAR&PUSH)
33    (CONST&PUSH 4)                      ; DISSYM
34    (CALL2 5)                           ; SAFE-GET
36    (STORE 6)
37    (PUSH)
38    (CALLS2&STORE 71 5)                 ; LENGTH
41    (GETVALUE 0)                        ; FORM
43    (CDR)
44    (CAR&PUSH)
45    (LOAD&PUSH 12)
46    (GETVALUE&PUSH 6)                   ; LOP
48    (GETVALUE 0)                        ; FORM
50    (CAR)
51    (CAR&PUSH)
52    (CONST&PUSH 2)                      ; 0
53    (LOAD&PUSH 10)
54    (CALL 6 7)                          ; DIMENSION
57    (STORE 11)
59    (GETVALUE 8)                        ; WIDTH
61    (SETVALUE 3)                        ; W
63    (GETVALUE 9)                        ; HEIGHT
65    (STORE 1)
66    (GETVALUE 10)                       ; DEPTH
68    (STORE 0)
69    (LOAD&PUSH 6)
70    (LOAD&PUSH 12)
71    (CALL2 11)                          ; RECONC
73    (STORE 11)
75    (PUSH)
76    (LOAD&PUSH 6)
77    (GETVALUE&PUSH 3)                   ; W
79    (CALLSR&PUSH 2 53)                  ; +
82    (CALL2 12)                          ; CHECKBREAK
84    (GETVALUE 0)                        ; FORM
86    (CDR)
87    (CDR)
88    (CAR&PUSH)
89    (LOAD&PUSH 12)
90    (GETVALUE 0)                        ; FORM
92    (CAR)
93    (CAR&PUSH)
94    (GETVALUE&PUSH 13)                  ; ROP
96    (LOAD&PUSH 9)
97    (GETVALUE&PUSH 3)                   ; W
99    (CALLSR&PUSH 2 53)                  ; +
102   (GETVALUE&PUSH 14)                  ; RIGHT
104   (CALL 6 7)                          ; DIMENSION
107   (STORE 11)
109   (GETVALUE&PUSH 3)                   ; W
111   (LOAD&PUSH 6)
112   (GETVALUE&PUSH 8)                   ; WIDTH
114   (CALLSR 3 53)                       ; +
117   (SETVALUE 8)                        ; WIDTH
119   (LOAD&PUSH 1)
120   (GETVALUE&PUSH 9)                   ; HEIGHT
122   (CALLSR 1 51)                       ; MAX
125   (SETVALUE 9)                        ; HEIGHT
127   (LOAD&PUSH 0)
128   (GETVALUE&PUSH 10)                  ; DEPTH
130   (CALLSR 1 51)                       ; MAX
133   (SETVALUE 10)                       ; DEPTH
135   (LOAD 11)
136   (SKIP 2)
138   (UNBIND1)
139   (SKIP 2)
141   (UNBIND1)
142   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN DIMENSION-NARY (FORM RESULT) ...)-45|
(CONST 0) = DIMENSION-NARY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-NARY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-NARY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-NARY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-NARY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-NARY
8     (SKIP&RET 1)


Disassembly of function DIMENSION-NARY
(CONST 0) = FORM
(CONST 1) = DIMENSION-FUNCTION
(CONST 2) = 0
(CONST 3) = W
(CONST 4) = DISSYM
(CONST 5) = SAFE-GET
(CONST 6) = LOP
(CONST 7) = DIMNARY
(CONST 8) = WIDTH
(CONST 9) = HEIGHT
(CONST 10) = DEPTH
(CONST 11) = L
(CONST 12) = CHECKBREAK
(CONST 13) = RECONC
(CONST 14) = ROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP W L DEPTH HEIGHT WIDTH LOP FORM)
writes special variables : (DEPTH HEIGHT WIDTH L W)
127 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (CDR)
7     (JMPIFNOT L67)
9     (NIL&PUSH)
10    (CONST&PUSH 2)                      ; 0
11    (CONST 2)                           ; 0
12    (BIND 3)                            ; W
14    (CONST&PUSH 2)                      ; 0
15    (CONST&PUSH 2)                      ; 0
16    (GETVALUE 0)                        ; FORM
18    (CAR)
19    (CAR&PUSH)
20    (CONST&PUSH 4)                      ; DISSYM
21    (CALL2 5)                           ; SAFE-GET
23    (STORE 6)
24    (PUSH)
25    (CALLS2&STORE 71 5)                 ; LENGTH
28    (GETVALUE 0)                        ; FORM
30    (CDR)
31    (CAR&PUSH)
32    (LOAD&PUSH 12)
33    (GETVALUE&PUSH 6)                   ; LOP
35    (GETVALUE 0)                        ; FORM
37    (CAR)
38    (CAR&PUSH)
39    (GETVALUE 0)                        ; FORM
41    (CAR)
42    (CAR&PUSH)
43    (CONST&PUSH 2)                      ; 0
44    (CALL 6 7)                          ; DIMNARY
47    (STORE 11)
49    (GETVALUE 8)                        ; WIDTH
51    (SETVALUE 3)                        ; W
53    (GETVALUE 9)                        ; HEIGHT
55    (STORE 1)
56    (GETVALUE 10)                       ; DEPTH
58    (STORE 0)
59    (GETVALUE 0)                        ; FORM
61    (CDR)
62    (CDR)
63    (BIND 11)                           ; L
65    (JMP L126)
67    L67
67    (GETVALUE&PUSH 0)                   ; FORM
69    (LOAD&PUSH 5)
70    (CALL2 1)                           ; DIMENSION-FUNCTION
72    (JMP L204)
75    L75
75    (GETVALUE 11)                       ; L
77    (CAR&PUSH)
78    (LOAD&PUSH 15)
79    (GETVALUE 0)                        ; FORM
81    (CAR)
82    (CAR&PUSH)
83    (GETVALUE 0)                        ; FORM
85    (CAR)
86    (CAR&PUSH)
87    (GETVALUE 0)                        ; FORM
89    (CAR)
90    (CAR&PUSH)
91    (GETVALUE&PUSH 3)                   ; W
93    (CALL 6 7)                          ; DIMNARY
96    (STORE 14)
98    (GETVALUE&PUSH 3)                   ; W
100   (GETVALUE&PUSH 8)                   ; WIDTH
102   (CALLSR 2 53)                       ; +
105   (SETVALUE 3)                        ; W
107   (LOAD&PUSH 4)
108   (GETVALUE&PUSH 9)                   ; HEIGHT
110   (CALLSR&STORE 1 51 4)               ; MAX
114   (LOAD&PUSH 3)
115   (GETVALUE&PUSH 10)                  ; DEPTH
117   (CALLSR&STORE 1 51 3)               ; MAX
121   (GETVALUE 11)                       ; L
123   (CDR)
124   (SETVALUE 11)                       ; L
126   L126
126   (LOAD&PUSH 14)
127   (GETVALUE&PUSH 3)                   ; W
129   (CALL2 12)                          ; CHECKBREAK
131   (LOAD&PUSH 9)
132   (LOAD&PUSH 15)
133   (CALL2 13)                          ; RECONC
135   (STORE 14)
137   (LOAD&PUSH 8)
138   (GETVALUE&PUSH 3)                   ; W
140   (CALLSR 2 53)                       ; +
143   (SETVALUE 3)                        ; W
145   (GETVALUE 11)                       ; L
147   (CDR)
148   (JMPIF L75)
151   (GETVALUE 11)                       ; L
153   (CAR&PUSH)
154   (LOAD&PUSH 15)
155   (GETVALUE 0)                        ; FORM
157   (CAR)
158   (CAR&PUSH)
159   (GETVALUE 0)                        ; FORM
161   (CAR)
162   (CAR&PUSH)
163   (GETVALUE&PUSH 14)                  ; ROP
165   (GETVALUE&PUSH 3)                   ; W
167   (CALL 6 7)                          ; DIMNARY
170   (STORE 14)
172   (GETVALUE&PUSH 3)                   ; W
174   (GETVALUE&PUSH 8)                   ; WIDTH
176   (CALLSR 2 53)                       ; +
179   (SETVALUE 8)                        ; WIDTH
181   (LOAD&PUSH 4)
182   (GETVALUE&PUSH 9)                   ; HEIGHT
184   (CALLSR 1 51)                       ; MAX
187   (SETVALUE 9)                        ; HEIGHT
189   (LOAD&PUSH 3)
190   (GETVALUE&PUSH 10)                  ; DEPTH
192   (CALLSR 1 51)                       ; MAX
195   (SETVALUE 10)                       ; DEPTH
197   (UNBIND1)
198   (LOAD 11)
199   (SKIP 2)
201   (UNBIND1)
202   (SKIP 2)
204   L204
204   (UNBIND1)
205   (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIMNARY (FORM RESULT LOP ...) ...)-46|
(CONST 0) = DIMNARY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMNARY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMNARY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMNARY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMNARY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMNARY
8     (SKIP&RET 1)


Disassembly of function DIMNARY
(CONST 0) = FORM
(CONST 1) = LOP
(CONST 2) = ROP
(CONST 3) = W
(CONST 4) = DIMENSION-PAREN
(CONST 5) = RIGHT
(CONST 6) = DIMENSION
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT W ROP LOP FORM)
31 byte-code instructions:
0     (LOAD 6)
1     (BIND 0)                            ; FORM
3     (LOAD 7)
4     (BIND 1)                            ; LOP
6     (LOAD 8)
7     (BIND 2)                            ; ROP
9     (LOAD 10)
10    (BIND 3)                            ; W
12    (GETVALUE 0)                        ; FORM
14    (JMPIFATOM L24)
16    (GETVALUE 0)                        ; FORM
18    (CAR)
19    (CAR&PUSH)
20    (LOAD 16)
22    (JMPIFEQ L42)
24    L24
24    (GETVALUE&PUSH 0)                   ; FORM
26    (LOAD&PUSH 18)
27    (GETVALUE&PUSH 1)                   ; LOP
29    (GETVALUE&PUSH 2)                   ; ROP
31    (GETVALUE&PUSH 3)                   ; W
33    (GETVALUE&PUSH 5)                   ; RIGHT
35    (CALL 6 6)                          ; DIMENSION
38    L38
38    (UNBIND 4)
40    (SKIP&RET 7)
42    L42
42    (GETVALUE&PUSH 0)                   ; FORM
44    (LOAD&PUSH 18)
45    (CALL2 4)                           ; DIMENSION-PAREN
47    (JMP L38)


Disassembly of function #:|(DEFMFUN DIMENSION-POSTFIX (FORM RESULT) ...)-47|
(CONST 0) = DIMENSION-POSTFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-POSTFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-POSTFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-POSTFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-POSTFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-POSTFIX
8     (SKIP&RET 1)


Disassembly of function DIMENSION-POSTFIX
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = DISSYM
(CONST 3) = SAFE-GET
(CONST 4) = LOP
(CONST 5) = RIGHT
(CONST 6) = DIMENSION
(CONST 7) = WIDTH
(CONST 8) = RECONC
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (WIDTH RIGHT LOP FORM)
writes special variable : (WIDTH)
36 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (CONST&PUSH 1)                      ; 0
5     (GETVALUE 0)                        ; FORM
7     (CAR)
8     (CAR&PUSH)
9     (CONST&PUSH 2)                      ; DISSYM
10    (CALL2 3)                           ; SAFE-GET
12    (STORE 1)
13    (PUSH)
14    (CALLS2&STORE 71 0)                 ; LENGTH
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CAR&PUSH)
21    (LOAD&PUSH 7)
22    (GETVALUE&PUSH 4)                   ; LOP
24    (GETVALUE 0)                        ; FORM
26    (CAR)
27    (CAR&PUSH)
28    (CONST&PUSH 1)                      ; 0
29    (LOAD&PUSH 5)
30    (GETVALUE&PUSH 5)                   ; RIGHT
32    (CALLSR&PUSH 2 53)                  ; +
35    (CALL 6 6)                          ; DIMENSION
38    (STORE 6)
39    (LOAD&PUSH 0)
40    (GETVALUE&PUSH 7)                   ; WIDTH
42    (CALLSR 2 53)                       ; +
45    (SETVALUE 7)                        ; WIDTH
47    (LOAD&PUSH 1)
48    (LOAD&PUSH 7)
49    (CALL2 8)                           ; RECONC
51    (SKIP 2)
53    (UNBIND1)
54    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN DIMENSION-NOFIX (FORM RESULT) ...)-48|
(CONST 0) = DIMENSION-NOFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-NOFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-NOFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-NOFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-NOFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-NOFIX
8     (SKIP&RET 1)


Disassembly of function DIMENSION-NOFIX
(CONST 0) = FORM
(CONST 1) = DISSYM
(CONST 2) = SAFE-GET
(CONST 3) = WIDTH
(CONST 4) = RECONC
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
writes special variables : (WIDTH FORM)
16 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CAR)
6     (CAR&PUSH)
7     (CONST&PUSH 1)                      ; DISSYM
8     (CALL2 2)                           ; SAFE-GET
10    (SETVALUE 0)                        ; FORM
12    (PUSH)
13    (CALLS2 71)                         ; LENGTH
15    (SETVALUE 3)                        ; WIDTH
17    (GETVALUE&PUSH 0)                   ; FORM
19    (LOAD&PUSH 5)
20    (CALL2 4)                           ; RECONC
22    (UNBIND1)
23    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIMENSION-MATCH (FORM RESULT) ...)-49|
(CONST 0) = DIMENSION-MATCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-MATCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-MATCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-MATCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-MATCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-MATCH
8     (SKIP&RET 1)


Disassembly of function DIMENSION-MATCH
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = DISSYM
(CONST 3) = SAFE-GET
(CONST 4) = WIDTH
(CONST 5) = 1
(CONST 6) = HEIGHT
(CONST 7) = DEPTH
(CONST 8) = RECONC
(CONST 9) = MPAREN
(CONST 10) = LOP
(CONST 11) = ROP
(CONST 12) = BREAK
(CONST 13) = RIGHT
(CONST 14) = DIMENSION-LIST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (WIDTH RIGHT BREAK FORM)
writes special variables : (DEPTH HEIGHT WIDTH)
66 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (CONST&PUSH 1)                      ; 0
5     (GETVALUE 0)                        ; FORM
7     (CAR)
8     (CAR&PUSH)
9     (CONST&PUSH 2)                      ; DISSYM
10    (CALL2 3)                           ; SAFE-GET
12    (STORE 1)
13    (CAR&PUSH)
14    (CALLS2&STORE 71 0)                 ; LENGTH
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (JMPIFNOT L83)
22    (CONST 9)                           ; MPAREN
23    (BIND 10)                           ; LOP
25    (CONST 9)                           ; MPAREN
26    (BIND 11)                           ; ROP
28    (GETVALUE 12)                       ; BREAK
30    (JMPIFNOT L38)
32    (LOAD&PUSH 6)
33    (GETVALUE&PUSH 12)                  ; BREAK
35    (CALLSR 2 53)                       ; +
38    L38
38    (BIND 12)                           ; BREAK
40    (LOAD&PUSH 9)
41    (GETVALUE&PUSH 13)                  ; RIGHT
43    (CALLSR 2 53)                       ; +
46    (BIND 13)                           ; RIGHT
48    (GETVALUE&PUSH 0)                   ; FORM
50    (LOAD&CAR&PUSH 14)
52    (LOAD&PUSH 20)
53    (CALL2&PUSH 8)                      ; RECONC
55    (CALL2 14)                          ; DIMENSION-LIST
57    (UNBIND 4)
59    (STORE 6)
60    (LOAD&CDR&PUSH 1)
62    (CALLS2&PUSH 71)                    ; LENGTH
64    (LOAD&PUSH 1)
65    (GETVALUE&PUSH 4)                   ; WIDTH
67    (CALLSR 3 53)                       ; +
70    (SETVALUE 4)                        ; WIDTH
72    (LOAD&CDR&PUSH 1)
74    (LOAD 7)
75    L75
75    (PUSH)
76    (CALL2 8)                           ; RECONC
78    (SKIP 2)
80    (UNBIND1)
81    (SKIP&RET 3)
83    L83
83    (LOAD&PUSH 0)
84    (LOAD&CDR&PUSH 2)
86    (CALLS2&PUSH 71)                    ; LENGTH
88    (CALLSR 2 53)                       ; +
91    (SETVALUE 4)                        ; WIDTH
93    (CONST 5)                           ; 1
94    (SETVALUE 6)                        ; HEIGHT
96    (CONST 1)                           ; 0
97    (SETVALUE 7)                        ; DEPTH
99    (LOAD&CDR&PUSH 1)
101   (LOAD&CAR&PUSH 2)
103   (LOAD&PUSH 8)
104   (CALL2 8)                           ; RECONC
106   (JMP L75)


Disassembly of function #:|(DEFMFUN DIMENSION-SUPERSCRIPT (FORM RESULT) ...)-50|
(CONST 0) = DIMENSION-SUPERSCRIPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMENSION-SUPERSCRIPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMENSION-SUPERSCRIPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMENSION-SUPERSCRIPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMENSION-SUPERSCRIPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMENSION-SUPERSCRIPT
8     (SKIP&RET 1)


Disassembly of function DIMENSION-SUPERSCRIPT
(CONST 0) = FORM
(CONST 1) = EXP
(CONST 2) = 0
(CONST 3) = W
(CONST 4) = BAS
(CONST 5) = 1
(CONST 6) = SIZE
(CONST 7) = MPAREN
(CONST 8) = DIMENSION
(CONST 9) = WIDTH
(CONST 10) = HEIGHT
(CONST 11) = DEPTH
(CONST 12) = ARRAY
(CONST 13) = MEMQ
(CONST 14) = MQAPPLY
(CONST 15) = LOP
(CONST 16) = BREAK
(CONST 17) = DIMENSION-LIST
(CONST 18) = MOP
(CONST 19) = MEXPT
(CONST 20) = CHECKFIT
(CONST 21) = ($EXPT)
(CONST 22) = DIMENSION-FUNCTION
(CONST 23) = UPDATE-HEIGHTS
(CONST 24) = SAFE-GET
(CONST 25) = NFORMAT-CHECK
(CONST 26) = (MQAPPLY)
(CONST 27) = (MEXPT)
(CONST 28) = MARGS
(CONST 29) = ($EXPT)
(CONST 30) = RIGHT-PARENTHESES-CHAR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP BAS RIGHT-PARENTHESES-CHAR W LOP DEPTH HEIGHT WIDTH FORM)
writes special variables : (DEPTH HEIGHT WIDTH BAS W EXP)
264 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL)
4     (BIND 1)                            ; EXP
6     (CONST 2)                           ; 0
7     (BIND 3)                            ; W
9     (CONST&PUSH 2)                      ; 0
10    (CONST&PUSH 2)                      ; 0
11    (NIL)
12    (BIND 4)                            ; BAS
14    (CONST 5)                           ; 1
15    (BIND 6)                            ; SIZE
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (NIL&PUSH)
23    (CONST&PUSH 7)                      ; MPAREN
24    (CONST&PUSH 7)                      ; MPAREN
25    (NIL&PUSH)
26    (CONST&PUSH 2)                      ; 0
27    (CALL 6 8)                          ; DIMENSION
30    (UNBIND1)
31    (SETVALUE 1)                        ; EXP
33    (GETVALUE 9)                        ; WIDTH
35    (SETVALUE 3)                        ; W
37    (GETVALUE 10)                       ; HEIGHT
39    (STORE 4)
40    (GETVALUE 11)                       ; DEPTH
42    (STORE 3)
43    (GETVALUE 0)                        ; FORM
45    (CDR)
46    (CAR)
47    (JMPIFATOM L60)
49    (CONST&PUSH 12)                     ; ARRAY
50    (GETVALUE 0)                        ; FORM
52    (CDR)
53    (CAR)
54    (CAR)
55    (CDR&PUSH)
56    (CALL2&JMPIF 13 L197)               ; MEMQ
60    L60
60    (GETVALUE 0)                        ; FORM
62    (CDR)
63    (CDR)
64    (CAR)
65    (JMPIFCONSP L98)
67    (GETVALUE 0)                        ; FORM
69    (CDR)
70    (CAR)
71    (JMPIFATOM L98)
73    (GETVALUE 0)                        ; FORM
75    (CDR)
76    (CAR)
77    (CAR)
78    (CAR&PUSH)
79    (CONST&PUSH 8)                      ; DIMENSION
80    (CALL2&JMPIF 24 L98)                ; SAFE-GET
83    (GETVALUE 0)                        ; FORM
85    (CDR)
86    (CAR&PUSH)
87    (CALL1 25)                          ; NFORMAT-CHECK
89    (SETVALUE 4)                        ; BAS
91    (CAR)
92    (CAR&PUSH)
93    (CONST&PUSH 8)                      ; DIMENSION
94    (CALL2&JMPIFNOT 24 L358)            ; SAFE-GET
98    L98
98    (GETVALUE 0)                        ; FORM
100   (CDR)
101   (CAR&PUSH)
102   (LOAD&PUSH 16)
103   (GETVALUE&PUSH 15)                  ; LOP
105   (CONST&PUSH 19)                     ; MEXPT
106   (NIL&PUSH)
107   (CONST&PUSH 2)                      ; 0
108   (CALL 6 8)                          ; DIMENSION
111   (SETVALUE 4)                        ; BAS
113   (GETVALUE&PUSH 3)                   ; W
115   (GETVALUE&PUSH 9)                   ; WIDTH
117   (CALLSR 2 53)                       ; +
120   (SETVALUE 9)                        ; WIDTH
122   (PUSH)
123   (CALL1&JMPIFNOT 20 L379)            ; CHECKFIT
127   (GETVALUE&PUSH 30)                  ; RIGHT-PARENTHESES-CHAR
129   (GETVALUE 4)                        ; BAS
131   (CAR&PUSH)
132   (CALLS2&JMPIF 1 L391)               ; EQL
136   (CONST&PUSH 2)                      ; 0
137   (GETVALUE&PUSH 10)                  ; HEIGHT
139   (LOAD&PUSH 5)
140   (CALLSR&PUSH 2 53)                  ; +
143   (GETVALUE 1)                        ; EXP
145   (LIST*&PUSH 2)
147   (GETVALUE 4)                        ; BAS
149   (CONS)
150   (STORE 15)
152   (LOAD&PUSH 4)
153   (LOAD&PUSH 4)
154   (GETVALUE&PUSH 10)                  ; HEIGHT
156   (CALLSR 3 53)                       ; +
159   (SETVALUE 10)                       ; HEIGHT
161   L161
161   (GETVALUE&PUSH 10)                  ; HEIGHT
163   (GETVALUE&PUSH 11)                  ; DEPTH
165   (CALL2 23)                          ; UPDATE-HEIGHTS
167   (LOAD 15)
169   L169
169   (UNBIND1)
170   (SKIP 2)
172   (UNBIND 3)
174   (SKIP&RET 3)
176   L176
176   (GETVALUE 0)                        ; FORM
178   (CDR)
179   (CAR)
180   (CDR)
181   (JMP L214)
183   L183
183   (CONST&PUSH 21)                     ; ($EXPT)
184   (GETVALUE 0)                        ; FORM
186   (CDR)
187   (CONS&PUSH)
188   (LOAD&PUSH 20)
189   (CALL2 22)                          ; DIMENSION-FUNCTION
191   (STORE 19)
193   (SKIP 4)
195   (JMP L161)
197   L197
197   (NIL&PUSH)
198   (CONST&PUSH 2)                      ; 0
199   (CONST&PUSH 2)                      ; 0
200   (CONST&PUSH 2)                      ; 0
201   (GETVALUE 0)                        ; FORM
203   (CDR)
204   (CAR)
205   (CAR)
206   (CAR&PUSH)
207   (JMPIFEQTO 14 L176)                 ; MQAPPLY
210   (GETVALUE 0)                        ; FORM
212   (CDR)
213   (CAR)
214   L214
214   (STORE 3)
215   (CONST 7)                           ; MPAREN
216   (BIND 15)                           ; LOP
218   (NIL)
219   (BIND 16)                           ; BREAK
221   (CONST 5)                           ; 1
222   (BIND 6)                            ; SIZE
224   (LOAD&PUSH 12)
225   (NIL&PUSH)
226   (CALL2 17)                          ; DIMENSION-LIST
228   (UNBIND 3)
230   (STORE 3)
231   (GETVALUE 9)                        ; WIDTH
233   (STORE 2)
234   (GETVALUE 10)                       ; HEIGHT
236   (STORE 1)
237   (GETVALUE 11)                       ; DEPTH
239   (STORE 0)
240   (GETVALUE 0)                        ; FORM
242   (CDR)
243   (CAR&PUSH)
244   (CALL1&PUSH 18)                     ; MOP
246   (LOAD&PUSH 20)
247   (GETVALUE&PUSH 15)                  ; LOP
249   (CONST&PUSH 19)                     ; MEXPT
250   (NIL&PUSH)
251   (CONST&PUSH 2)                      ; 0
252   (CALL 6 8)                          ; DIMENSION
255   (SETVALUE 4)                        ; BAS
257   (GETVALUE&PUSH 9)                   ; WIDTH
259   (GETVALUE&PUSH 3)                   ; W
261   (LOAD&PUSH 4)
262   (CALLSR&PUSH 1 51)                  ; MAX
265   (CALLSR&PUSH 2 53)                  ; +
268   (CALL1&JMPIFNOT 20 L183)            ; CHECKFIT
272   (CONST&PUSH 2)                      ; 0
273   (GETVALUE&PUSH 10)                  ; HEIGHT
275   (LOAD&PUSH 9)
276   (CALLSR&PUSH 2 53)                  ; +
279   (GETVALUE 1)                        ; EXP
281   (CONS)
282   (CONS&PUSH)
283   (GETVALUE 4)                        ; BAS
285   (CONS)
286   (STORE 19)
288   (GETVALUE&PUSH 3)                   ; W
290   (CALLSR&PUSH 0 54)                  ; -
293   (GETVALUE&PUSH 11)                  ; DEPTH
295   (LOAD&PUSH 3)
296   (CALLSR&PUSH 2 53)                  ; +
299   (CALLSR&PUSH 0 54)                  ; -
302   (LOAD 5)
303   (CONS)
304   (CONS&PUSH)
305   (LOAD&CONS&STORE 19)
307   (GETVALUE&PUSH 3)                   ; W
309   (LOAD&PUSH 3)
310   (CALLSR&PUSH 1 51)                  ; MAX
313   (LOAD&PUSH 3)
314   (CALLSR&PUSH 1 54)                  ; -
317   (CONST&PUSH 2)                      ; 0
318   (LIST&PUSH 2)
320   (LOAD&CONS&STORE 19)
322   (GETVALUE&PUSH 9)                   ; WIDTH
324   (GETVALUE&PUSH 3)                   ; W
326   (LOAD&PUSH 4)
327   (CALLSR&PUSH 1 51)                  ; MAX
330   (CALLSR 2 53)                       ; +
333   (SETVALUE 9)                        ; WIDTH
335   (LOAD&PUSH 8)
336   (LOAD&PUSH 8)
337   (GETVALUE&PUSH 10)                  ; HEIGHT
339   (CALLSR 3 53)                       ; +
342   (SETVALUE 10)                       ; HEIGHT
344   (LOAD&PUSH 0)
345   (LOAD&PUSH 2)
346   (GETVALUE&PUSH 11)                  ; DEPTH
348   (CALLSR 3 53)                       ; +
351   (SETVALUE 11)                       ; DEPTH
353   (SKIP 4)
355   (JMP L161)
358   L358
358   (CONST&PUSH 26)                     ; (MQAPPLY)
359   (CONST&PUSH 27)                     ; (MEXPT)
360   (GETVALUE&PUSH 4)                   ; BAS
362   (CALL1&PUSH 18)                     ; MOP
364   (GETVALUE 0)                        ; FORM
366   (CDR)
367   (CDR)
368   (CAR&PUSH)
369   (LIST&PUSH 3)
371   (GETVALUE&PUSH 4)                   ; BAS
373   (CALL1 28)                          ; MARGS
375   (LIST* 2)
377   (JMP L384)
379   L379
379   (CONST&PUSH 29)                     ; ($EXPT)
380   (GETVALUE 0)                        ; FORM
382   (CDR)
383   (CONS)
384   L384
384   (PUSH)
385   (LOAD&PUSH 16)
386   (CALL2 22)                          ; DIMENSION-FUNCTION
388   (JMP L169)
391   L391
391   (CONST&PUSH 2)                      ; 0
392   (LOAD&INC&PUSH 4)
394   (GETVALUE 1)                        ; EXP
396   (LIST*&PUSH 2)
398   (GETVALUE 4)                        ; BAS
400   (CONS)
401   (STORE 15)
403   (CONST&PUSH 5)                      ; 1
404   (LOAD&PUSH 5)
405   (LOAD&PUSH 5)
406   (CALLSR&PUSH 3 53)                  ; +
409   (GETVALUE&PUSH 10)                  ; HEIGHT
411   (CALLSR 1 51)                       ; MAX
414   (SETVALUE 10)                       ; HEIGHT
416   (JMP L161)


Disassembly of function #:|(DEFUN DSUMPROD (FORM RESULT D-FORM ...) ...)-51|
(CONST 0) = DSUMPROD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DSUMPROD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DSUMPROD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DSUMPROD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DSUMPROD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DSUMPROD
8     (SKIP&RET 1)


Disassembly of function DSUMPROD
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = %LSUM
(CONST 3) = W
(CONST 4) = MPAREN
(CONST 5) = MEQUAL
(CONST 6) = DIMENSION
(CONST 7) = WIDTH
(CONST 8) = HEIGHT
(CONST 9) = DEPTH
(CONST 10) = #\Space
(CONST 11) = #\n
(CONST 12) = #\i
(CONST 13) = #\=
(CONST 14) = 3
(CONST 15) = CHECKFIT
(CONST 16) = DIMENSION-FUNCTION
(CONST 17) = 2
(CONST 18) = QUOT
(CONST 19) = UPDATE-HEIGHTS
(CONST 20) = ROP
(CONST 21) = RIGHT
(CONST 22) = 1
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT ROP W DEPTH HEIGHT WIDTH FORM)
writes special variables : (DEPTH HEIGHT WIDTH W)
193 byte-code instructions:
0     (LOAD 6)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (CONST&PUSH 1)                      ; 0
5     (CONST&PUSH 1)                      ; 0
6     (CONST&PUSH 1)                      ; 0
7     (NIL&PUSH)
8     (GETVALUE 0)                        ; FORM
10    (CAR)
11    (CAR&PUSH)
12    (CONST 2)                           ; %LSUM
13    (EQ)
14    (PUSH)
15    (LOAD 4)
16    (BIND 3)                            ; W
18    (GETVALUE 0)                        ; FORM
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (NIL&PUSH)
24    (CONST&PUSH 4)                      ; MPAREN
25    (CONST&PUSH 5)                      ; MEQUAL
26    (NIL&PUSH)
27    (CONST&PUSH 1)                      ; 0
28    (CALL 6 6)                          ; DIMENSION
31    (STORE 4)
32    (GETVALUE 7)                        ; WIDTH
34    (SETVALUE 3)                        ; W
36    (GETVALUE 8)                        ; HEIGHT
38    (STORE 6)
39    (GETVALUE 9)                        ; DEPTH
41    (STORE 5)
42    (LOAD&JMPIF 3 L285)
46    (CONST&PUSH 10)                     ; #\Space
47    (CONST&PUSH 13)                     ; #\=
48    (CONST&PUSH 10)                     ; #\Space
49    (LOAD 7)
50    (LIST* 3)
52    (STORE 4)
53    L53
53    (GETVALUE 0)                        ; FORM
55    (CDR)
56    (CDR)
57    (CDR)
58    (CAR&PUSH)
59    (LOAD&PUSH 5)
60    (CONST&PUSH 5)                      ; MEQUAL
61    (CONST&PUSH 4)                      ; MPAREN
62    (NIL&PUSH)
63    (CONST&PUSH 1)                      ; 0
64    (CALL 6 6)                          ; DIMENSION
67    (STORE 4)
68    (CONST&PUSH 14)                     ; 3
69    (GETVALUE&PUSH 3)                   ; W
71    (GETVALUE&PUSH 7)                   ; WIDTH
73    (CALLSR 3 53)                       ; +
76    (SETVALUE 3)                        ; W
78    (LOAD&PUSH 6)
79    (GETVALUE&PUSH 8)                   ; HEIGHT
81    (CALLSR&STORE 1 51 6)               ; MAX
85    (LOAD&PUSH 5)
86    (GETVALUE&PUSH 9)                   ; DEPTH
88    (CALLSR&STORE 1 51 5)               ; MAX
92    (LOAD&JMPIF 3 L112)
95    (GETVALUE 0)                        ; FORM
97    (CDR)
98    (CDR)
99    (CDR)
100   (CDR)
101   (CAR&PUSH)
102   (NIL&PUSH)
103   (CONST&PUSH 4)                      ; MPAREN
104   (CONST&PUSH 4)                      ; MPAREN
105   (NIL&PUSH)
106   (CONST&PUSH 1)                      ; 0
107   (CALL 6 6)                          ; DIMENSION
110   (STORE 8)
112   L112
112   (GETVALUE&PUSH 3)                   ; W
114   (GETVALUE&PUSH 7)                   ; WIDTH
116   (CALLSR&PUSH 1 51)                  ; MAX
119   (CALL1&JMPIFNOT 15 L296)            ; CHECKFIT
123   (LOAD&PUSH 15)
124   (CALLSR&PUSH 0 54)                  ; -
127   (LOAD&PUSH 14)
128   (LOAD&PUSH 8)
129   (CALLSR&PUSH 2 53)                  ; +
132   (CALLSR&PUSH 0 54)                  ; -
135   (LOAD 6)
136   (CONS)
137   (CONS&PUSH)
138   (LOAD&PUSH 17)
139   (LOAD 19)
141   (CONS)
142   (CONS)
143   (STORE 4)
144   (GETVALUE&PUSH 7)                   ; WIDTH
146   (LOAD&PUSH 16)
147   (CALLSR&JMPIF 1 48 L303)            ; >
152   (LOAD&PUSH 15)
153   (GETVALUE&PUSH 7)                   ; WIDTH
155   (CALLSR&PUSH 1 54)                  ; -
158   (CONST&PUSH 17)                     ; 2
159   (CALL2 18)                          ; QUOT
161   (STORE 15)
163   (PUSH)
164   (GETVALUE&PUSH 7)                   ; WIDTH
166   (CALLSR 2 53)                       ; +
169   (SETVALUE 7)                        ; WIDTH
171   L171
171   (LOAD&PUSH 15)
172   (GETVALUE&PUSH 3)                   ; W
174   (CALLSR&PUSH 1 54)                  ; -
177   (LOAD&PUSH 15)
178   (GETVALUE&PUSH 9)                   ; DEPTH
180   (CALLSR&PUSH 2 53)                  ; +
183   (LOAD 10)
184   (CONS)
185   (CONS&PUSH)
186   (LOAD 5)
187   (CONS)
188   (STORE 8)
190   (GETVALUE&PUSH 3)                   ; W
192   (GETVALUE&PUSH 7)                   ; WIDTH
194   (CALLSR 1 51)                       ; MAX
197   (SETVALUE 3)                        ; W
199   (LOAD&PUSH 13)
200   (LOAD&PUSH 7)
201   (LOAD&PUSH 7)
202   (CALLSR&STORE 3 53 5)               ; +
206   (LOAD&PUSH 14)
207   (GETVALUE&PUSH 8)                   ; HEIGHT
209   (GETVALUE&PUSH 9)                   ; DEPTH
211   (CALLSR&STORE 3 53 6)               ; +
215   (PUSH)
216   (LOAD&PUSH 6)
217   (CALL2 19)                          ; UPDATE-HEIGHTS
219   (GETVALUE 0)                        ; FORM
221   (CDR)
222   (CAR&PUSH)
223   (GETVALUE&PUSH 3)                   ; W
225   (GETVALUE&PUSH 7)                   ; WIDTH
227   (CALLSR&PUSH 1 54)                  ; -
230   (CALLS2&PUSH 150)                   ; 1+
232   (CONST&PUSH 1)                      ; 0
233   (LIST&PUSH 2)
235   (LOAD 10)
236   (CONS&PUSH)
237   (GETVALUE 0)                        ; FORM
239   (CAR)
240   (CAR&PUSH)
241   (GETVALUE&PUSH 20)                  ; ROP
243   (GETVALUE&PUSH 3)                   ; W
245   (GETVALUE&PUSH 21)                  ; RIGHT
247   (CALL 6 6)                          ; DIMENSION
250   (STORE 8)
252   (CONST&PUSH 22)                     ; 1
253   (GETVALUE&PUSH 3)                   ; W
255   (GETVALUE&PUSH 7)                   ; WIDTH
257   (CALLSR 3 53)                       ; +
260   (SETVALUE 7)                        ; WIDTH
262   (LOAD&PUSH 6)
263   (GETVALUE&PUSH 8)                   ; HEIGHT
265   (CALLSR 1 51)                       ; MAX
268   (SETVALUE 8)                        ; HEIGHT
270   (LOAD&PUSH 5)
271   (GETVALUE&PUSH 9)                   ; DEPTH
273   (CALLSR 1 51)                       ; MAX
276   (SETVALUE 9)                        ; DEPTH
278   (LOAD 8)
279   L279
279   (UNBIND1)
280   (SKIP 6)
282   (UNBIND1)
283   (SKIP&RET 7)
285   L285
285   (CONST&PUSH 10)                     ; #\Space
286   (CONST&PUSH 11)                     ; #\n
287   (CONST&PUSH 12)                     ; #\i
288   (CONST&PUSH 10)                     ; #\Space
289   (LOAD 8)
290   (LIST* 4)
292   (STORE 4)
293   (JMP L53)
296   L296
296   (GETVALUE&PUSH 0)                   ; FORM
298   (LOAD&PUSH 18)
299   (CALL2 16)                          ; DIMENSION-FUNCTION
301   (JMP L279)
303   L303
303   (CONST 1)                           ; 0
304   (STORE 15)
306   (JMP L171)


Disassembly of function #:|(DISPLA-DEF BIGFLOAT DIM-BIGFLOAT)-52-1|
(CONST 0) = BIGFLOAT
(CONST 1) = DIMENSION
(CONST 2) = DIM-BIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOAT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-BIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF BIGFLOAT DIM-BIGFLOAT)-52-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MQUOTE DIMENSION-PREFIX ...)-53-1|
(CONST 0) = MQUOTE
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-PREFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTE
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-PREFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MQUOTE DIMENSION-PREFIX ...)-53-2|
(CONST 0) = MQUOTE
(CONST 1) = DISSYM
(CONST 2) = (#\')
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTE
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\')
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MQUOTE DIMENSION-PREFIX ...)-53-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MSETQ DIMENSION-INFIX ...)-54-1|
(CONST 0) = MSETQ
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETQ
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MSETQ DIMENSION-INFIX ...)-54-2|
(CONST 0) = MSETQ
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\: #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETQ
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\: #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MSETQ DIMENSION-INFIX ...)-54-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MSET DIMENSION-INFIX ...)-55-1|
(CONST 0) = MSET
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSET
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MSET DIMENSION-INFIX ...)-55-2|
(CONST 0) = MSET
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\: #\: #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSET
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\: #\: #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MSET DIMENSION-INFIX ...)-55-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MDEFINE DIM-MDEFINE ...)-56-1|
(CONST 0) = MDEFINE
(CONST 1) = DIMENSION
(CONST 2) = DIM-MDEFINE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFINE
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MDEFINE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MDEFINE DIM-MDEFINE ...)-56-2|
(CONST 0) = MDEFINE
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\: #\= #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFINE
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\: #\= #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MDEFINE DIM-MDEFINE ...)-56-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MDEFMACRO DIM-MDEFINE ...)-57-1|
(CONST 0) = MDEFMACRO
(CONST 1) = DIMENSION
(CONST 2) = DIM-MDEFINE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFMACRO
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MDEFINE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MDEFMACRO DIM-MDEFINE ...)-57-2|
(CONST 0) = MDEFMACRO
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\: #\: #\= #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFMACRO
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\: #\: #\= #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MDEFMACRO DIM-MDEFINE ...)-57-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MDEFINE (FORM RESULT) ...)-58|
(CONST 0) = DIM-MDEFINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MDEFINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MDEFINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MDEFINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MDEFINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MDEFINE
8     (SKIP&RET 1)


Disassembly of function DIM-MDEFINE
(CONST 0) = FORM
(CONST 1) = $NOUNDISP
(CONST 2) = STRINGDISP
(CONST 3) = (MPROGN)
(CONST 4) = DIMENSION-INFIX
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
31 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (T)
4     (BIND 1)                            ; $NOUNDISP
6     (T)
7     (BIND 2)                            ; STRINGDISP
9     (GETVALUE 0)                        ; FORM
11    (CDR)
12    (CDR)
13    (CDR)
14    (JMPIF L26)
16    (GETVALUE 0)                        ; FORM
18    L18
18    (PUSH)
19    (LOAD&PUSH 11)
20    (CALL2 4)                           ; DIMENSION-INFIX
22    (UNBIND 3)
24    (SKIP&RET 3)
26    L26
26    (GETVALUE 0)                        ; FORM
28    (CAR&PUSH)
29    (GETVALUE 0)                        ; FORM
31    (CDR)
32    (CAR&PUSH)
33    (CONST&PUSH 3)                      ; (MPROGN)
34    (GETVALUE 0)                        ; FORM
36    (CDR)
37    (CDR)
38    (CONS&PUSH)
39    (LIST 3)
41    (JMP L18)


Disassembly of function #:|(DISPLA-DEF MFACTORIAL DIMENSION-POSTFIX ...)-59-1|
(CONST 0) = MFACTORIAL
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-POSTFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFACTORIAL
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-POSTFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MFACTORIAL DIMENSION-POSTFIX ...)-59-2|
(CONST 0) = MFACTORIAL
(CONST 1) = DISSYM
(CONST 2) = (#\!)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFACTORIAL
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\!)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MFACTORIAL DIMENSION-POSTFIX ...)-59-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MEXPT DIMENSION-SUPERSCRIPT)-60-1|
(CONST 0) = MEXPT
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-SUPERSCRIPT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEXPT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-SUPERSCRIPT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MEXPT DIMENSION-SUPERSCRIPT)-60-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNCEXPT DIM-MNCEXPT ...)-61-1|
(CONST 0) = MNCEXPT
(CONST 1) = DIMENSION
(CONST 2) = DIM-MNCEXPT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCEXPT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MNCEXPT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNCEXPT DIM-MNCEXPT ...)-61-2|
(CONST 0) = MNCEXPT
(CONST 1) = DISSYM
(CONST 2) = (#\^ #\^)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCEXPT
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\^ #\^)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNCEXPT DIM-MNCEXPT ...)-61-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MNCEXPT (FORM RESULT) ...)-62|
(CONST 0) = DIM-MNCEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MNCEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MNCEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MNCEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MNCEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MNCEXPT
8     (SKIP&RET 1)


Disassembly of function DIM-MNCEXPT
(CONST 0) = FORM
(CONST 1) = (MNCEXPT)
(CONST 2) = (MANGLE)
(CONST 3) = DIMENSION-SUPERSCRIPT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
16 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (CONST&PUSH 1)                      ; (MNCEXPT)
4     (GETVALUE 0)                        ; FORM
6     (CDR)
7     (CAR&PUSH)
8     (CONST&PUSH 2)                      ; (MANGLE)
9     (GETVALUE 0)                        ; FORM
11    (CDR)
12    (CDR)
13    (CONS&PUSH)
14    (LIST&PUSH 3)
16    (LOAD&PUSH 5)
17    (CALL2 3)                           ; DIMENSION-SUPERSCRIPT
19    (UNBIND1)
20    (SKIP&RET 3)


Disassembly of function #:|(DISPLA-DEF MNCTIMES DIMENSION-NARY ...)-63-1|
(CONST 0) = MNCTIMES
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCTIMES
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNCTIMES DIMENSION-NARY ...)-63-2|
(CONST 0) = MNCTIMES
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\. #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCTIMES
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\. #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNCTIMES DIMENSION-NARY ...)-63-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %PRODUCT DIM-%PRODUCT ...)-64-1|
(CONST 0) = %PRODUCT
(CONST 1) = DIMENSION
(CONST 2) = DIM-%PRODUCT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PRODUCT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-%PRODUCT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %PRODUCT DIM-%PRODUCT ...)-64-4|
(CONST 0) = %PRODUCT
(CONST 1) = RBP
(CONST 2) = 115
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PRODUCT
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 115
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-%PRODUCT (FORM RESULT) ...)-65|
(CONST 0) = DIM-%PRODUCT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-%PRODUCT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-%PRODUCT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-%PRODUCT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-%PRODUCT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-%PRODUCT
8     (SKIP&RET 1)


Disassembly of function DIM-%PRODUCT
(CONST 0) = FORM
(CONST 1) = (D-PRODSIGN)
(CONST 2) = 5
(CONST 3) = 3
(CONST 4) = 1
(CONST 5) = DSUMPROD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 0)                   ; FORM
5     (LOAD&PUSH 5)
6     (CONST&PUSH 1)                      ; (D-PRODSIGN)
7     (CONST&PUSH 2)                      ; 5
8     (CONST&PUSH 3)                      ; 3
9     (CONST&PUSH 4)                      ; 1
10    (CALL 6 5)                          ; DSUMPROD
13    (UNBIND1)
14    (SKIP&RET 3)


Disassembly of function #:|(DISPLA-DEF RAT DIM-RAT ...)-66-1|
(CONST 0) = RAT
(CONST 1) = DIMENSION
(CONST 2) = DIM-RAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-RAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF RAT DIM-RAT ...)-66-2|
(CONST 0) = RAT
(CONST 1) = DISSYM
(CONST 2) = (#\/)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\/)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF RAT DIM-RAT ...)-66-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-RAT (FORM RESULT) ...)-67|
(CONST 0) = DIM-RAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-RAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-RAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-RAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-RAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-RAT
8     (SKIP&RET 1)


Disassembly of function DIM-RAT
(CONST 0) = FORM
(CONST 1) = $PFEFORMAT
(CONST 2) = DIMENSION-NARY
(CONST 3) = DIM-MQUOTIENT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FORM $PFEFORMAT)
15 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE 1)                        ; $PFEFORMAT
5     (JMPIF L15)
7     (GETVALUE&PUSH 0)                   ; FORM
9     (LOAD&PUSH 5)
10    (CALL2 3)                           ; DIM-MQUOTIENT
12    L12
12    (UNBIND1)
13    (SKIP&RET 3)
15    L15
15    (GETVALUE&PUSH 0)                   ; FORM
17    (LOAD&PUSH 5)
18    (CALL2 2)                           ; DIMENSION-NARY
20    (JMP L12)


Disassembly of function #:|(DISPLA-DEF MQUOTIENT DIM-MQUOTIENT ...)-68-1|
(CONST 0) = MQUOTIENT
(CONST 1) = DIMENSION
(CONST 2) = DIM-MQUOTIENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTIENT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MQUOTIENT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MQUOTIENT DIM-MQUOTIENT ...)-68-2|
(CONST 0) = MQUOTIENT
(CONST 1) = DISSYM
(CONST 2) = (#\/)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTIENT
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\/)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MQUOTIENT DIM-MQUOTIENT ...)-68-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MQUOTIENT (FORM RESULT) ...)-69|
(CONST 0) = DIM-MQUOTIENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MQUOTIENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MQUOTIENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MQUOTIENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MQUOTIENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MQUOTIENT
8     (SKIP&RET 1)


Disassembly of function DIM-MQUOTIENT
(CONST 0) = FORM
(CONST 1) = WNA-ERR
(CONST 2) = NUM
(CONST 3) = 0
(CONST 4) = W
(CONST 5) = 1
(CONST 6) = SIZE
(CONST 7) = DIMENSION-NARY
(CONST 8) = MPAREN
(CONST 9) = RIGHT
(CONST 10) = DIMENSION
(CONST 11) = WIDTH
(CONST 12) = HEIGHT
(CONST 13) = DEPTH
(CONST 14) = CHECKFIT
(CONST 15) = DRATIO
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NUM W DEPTH HEIGHT WIDTH RIGHT SIZE FORM)
writes special variables : (W NUM)
88 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (CDR)
7     (JMPIFNOT L16)
9     (GETVALUE 0)                        ; FORM
11    (CDR)
12    (CDR)
13    (CDR)
14    (JMPIFNOT L22)
16    L16
16    (GETVALUE 0)                        ; FORM
18    (CAR)
19    (CAR&PUSH)
20    (CALL1 1)                           ; WNA-ERR
22    L22
22    (NIL)
23    (BIND 2)                            ; NUM
25    (CONST 3)                           ; 0
26    (BIND 4)                            ; W
28    (CONST&PUSH 3)                      ; 0
29    (CONST&PUSH 3)                      ; 0
30    (NIL&PUSH)
31    (CONST&PUSH 5)                      ; 1
32    (GETVALUE&PUSH 6)                   ; SIZE
34    (CALLSR&JMPIFNOT 1 45 L51)          ; =
38    (GETVALUE 0)                        ; FORM
40    (CDR)
41    (CAR)
42    (JMPIFCONSP L51)
44    (GETVALUE 0)                        ; FORM
46    (CDR)
47    (CDR)
48    (CAR)
49    (JMPIFATOM L101)
51    L51
51    (GETVALUE 0)                        ; FORM
53    (CDR)
54    (CAR&PUSH)
55    (NIL&PUSH)
56    (CONST&PUSH 8)                      ; MPAREN
57    (CONST&PUSH 8)                      ; MPAREN
58    (NIL&PUSH)
59    (GETVALUE&PUSH 9)                   ; RIGHT
61    (CALL 6 10)                         ; DIMENSION
64    (SETVALUE 2)                        ; NUM
66    (GETVALUE 11)                       ; WIDTH
68    (SETVALUE 4)                        ; W
70    (GETVALUE 12)                       ; HEIGHT
72    (STORE 2)
73    (GETVALUE 13)                       ; DEPTH
75    (STORE 1)
76    (GETVALUE&PUSH 4)                   ; W
78    (CALL1&JMPIFNOT 14 L101)            ; CHECKFIT
81    (GETVALUE 0)                        ; FORM
83    (CDR)
84    (CDR)
85    (CAR&PUSH)
86    (NIL&PUSH)
87    (CONST&PUSH 8)                      ; MPAREN
88    (CONST&PUSH 8)                      ; MPAREN
89    (NIL&PUSH)
90    (GETVALUE&PUSH 9)                   ; RIGHT
92    (CALL 6 10)                         ; DIMENSION
95    (STORE 0)
96    (GETVALUE&PUSH 11)                  ; WIDTH
98    (CALL1&JMPIF 14 L108)               ; CHECKFIT
101   L101
101   (GETVALUE&PUSH 0)                   ; FORM
103   (LOAD&PUSH 14)
104   (CALL2 7)                           ; DIMENSION-NARY
106   (JMP L125)
108   L108
108   (LOAD&PUSH 13)
109   (GETVALUE&PUSH 2)                   ; NUM
111   (GETVALUE&PUSH 4)                   ; W
113   (LOAD&PUSH 5)
114   (LOAD&PUSH 5)
115   (LOAD&PUSH 5)
116   (GETVALUE&PUSH 11)                  ; WIDTH
118   (GETVALUE&PUSH 12)                  ; HEIGHT
120   (GETVALUE&PUSH 13)                  ; DEPTH
122   (CALL 9 15)                         ; DRATIO
125   L125
125   (SKIP 3)
127   (UNBIND 3)
129   (SKIP&RET 3)

WARNING in (EVAL-WHEN (COMPILE EVAL LOAD) (SETQ X1 'H1 ...))-70 in lines 591..604 :
X1 is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
WARNING in (EVAL-WHEN (COMPILE EVAL LOAD) (SETQ X1 'H1 ...))-70 in lines 591..604 :
X2 is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (SETQ X1 'H1 ...))-70|
(CONST 0) = H1
(CONST 1) = X1
(CONST 2) = D2
(CONST 3) = X2
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (X2 X1)
5 byte-code instructions:
0     (CONST 0)                           ; H1
1     (SETVALUE 1)                        ; X1
3     (CONST 2)                           ; D2
4     (SETVALUE 3)                        ; X2
6     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DRATIO (RESULT NUM W1 ...) ...)-71|
(CONST 0) = DRATIO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DRATIO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DRATIO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DRATIO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DRATIO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DRATIO
8     (SKIP&RET 1)


Disassembly of function DRATIO
(CONST 0) = NUM
(CONST 1) = WIDTH
(CONST 2) = 1
(CONST 3) = HEIGHT
(CONST 4) = DEPTH
(CONST 5) = 2
(CONST 6) = QUOT
(CONST 7) = UPDATE-HEIGHTS
(CONST 8) = 0
(CONST 9) = (0)
(CONST 10) = D-HBAR
9 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NUM DEPTH HEIGHT WIDTH)
writes special variables : (DEPTH HEIGHT WIDTH)
58 byte-code instructions:
0     (LOAD 8)
1     (BIND 0)                            ; NUM
3     (LOAD&PUSH 10)
4     (LOAD&PUSH 7)
5     (CALLSR 1 51)                       ; MAX
8     (SETVALUE 1)                        ; WIDTH
10    (CONST&PUSH 2)                      ; 1
11    (LOAD&PUSH 10)
12    (LOAD&PUSH 10)
13    (CALLSR 3 53)                       ; +
16    (SETVALUE 3)                        ; HEIGHT
18    (LOAD&PUSH 5)
19    (LOAD&PUSH 5)
20    (CALLSR 2 53)                       ; +
23    (SETVALUE 4)                        ; DEPTH
25    (GETVALUE&PUSH 1)                   ; WIDTH
27    (LOAD&PUSH 11)
28    (CALLSR&PUSH 1 54)                  ; -
31    (CONST&PUSH 5)                      ; 2
32    (CALL2 6)                           ; QUOT
34    (STORE 9)
36    (GETVALUE&PUSH 1)                   ; WIDTH
38    (LOAD&PUSH 7)
39    (CALLSR&PUSH 1 54)                  ; -
42    (CONST&PUSH 5)                      ; 2
43    (CALL2 6)                           ; QUOT
45    (STORE 4)
46    (GETVALUE&PUSH 3)                   ; HEIGHT
48    (GETVALUE&PUSH 4)                   ; DEPTH
50    (CALL2 7)                           ; UPDATE-HEIGHTS
52    (LOAD&PUSH 9)
53    (LOAD&INC&PUSH 9)
55    (GETVALUE 0)                        ; NUM
57    (LIST*&PUSH 2)
59    (LOAD&CONS&STORE 12)
61    (LOAD&PUSH 4)
62    (LOAD&PUSH 10)
63    (LOAD&PUSH 12)
64    (CALLSR&PUSH 2 53)                  ; +
67    (CALLSR&PUSH 1 54)                  ; -
70    (LOAD&PUSH 6)
71    (CALLSR&PUSH 0 54)                  ; -
74    (LOAD 9)
75    (LIST*&PUSH 2)
77    (LOAD&CONS&STORE 12)
79    (CONST&PUSH 8)                      ; 0
80    (LOAD&PUSH 5)
81    (LOAD&PUSH 8)
82    (CALLSR&PUSH 2 54)                  ; -
85    (CONST 9)                           ; (0)
86    (CONS&PUSH)
87    (LOAD&CONS&STORE 12)
89    (CONST&PUSH 10)                     ; D-HBAR
90    (GETVALUE&PUSH 1)                   ; WIDTH
92    (LIST&PUSH 2)
94    (LOAD&CONS&STORE 12)
96    (UNBIND1)
97    (SKIP&RET 10)


Disassembly of function #:|(DISPLA-DEF MTIMES DIMENSION-NARY ...)-72-1|
(CONST 0) = MTIMES
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMES
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MTIMES DIMENSION-NARY ...)-72-2|
(CONST 0) = MTIMES
(CONST 1) = DISSYM
(CONST 2) = (#\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMES
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MTIMES DIMENSION-NARY ...)-72-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $STARDISP STARDISP ...)-73|
(CONST 0) = $STARDISP
(CONST 1) = ASSIGN
(CONST 2) = STARDISP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $STARDISP
1     (CONST&PUSH 1)                      ; ASSIGN
2     (CONST&PUSH 2)                      ; STARDISP
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN STARDISP (SYMBOL VAL) ...)-74|
(CONST 0) = STARDISP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STARDISP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STARDISP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STARDISP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STARDISP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STARDISP
8     (SKIP&RET 1)


Disassembly of function STARDISP
(CONST 0) = MTIMES
(CONST 1) = (#\*)
(CONST 2) = (#\Space)
(CONST 3) = DISSYM
(CONST 4) = PUTPROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMES
1     (LOAD&JMPIF 2 L12)
4     (CONST 2)                           ; (#\Space)
5     L5
5     (PUSH)
6     (CONST&PUSH 3)                      ; DISSYM
7     (CALL 3 4)                          ; PUTPROP
10    (SKIP&RET 3)
12    L12
12    (CONST 1)                           ; (#\*)
13    (JMP L5)


Disassembly of function #:|(DISPLA-DEF %INTEGRATE DIM-%INTEGRATE ...)-75-1|
(CONST 0) = %INTEGRATE
(CONST 1) = DIMENSION
(CONST 2) = DIM-%INTEGRATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INTEGRATE
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-%INTEGRATE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %INTEGRATE DIM-%INTEGRATE ...)-75-4|
(CONST 0) = %INTEGRATE
(CONST 1) = RBP
(CONST 2) = 115
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INTEGRATE
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 115
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-%INTEGRATE (FORM RESULT) ...)-76|
(CONST 0) = DIM-%INTEGRATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-%INTEGRATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-%INTEGRATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-%INTEGRATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-%INTEGRATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-%INTEGRATE
8     (SKIP&RET 1)


Disassembly of function DIM-%INTEGRATE
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = WNA-ERR
(CONST 4) = #\Space
(CONST 5) = (D-INTEGRALSIGN)
(CONST 6) = 2
(CONST 7) = 3
(CONST 8) = MPAREN
(CONST 9) = DIMENSION
(CONST 10) = WIDTH
(CONST 11) = HEIGHT
(CONST 12) = DEPTH
(CONST 13) = CHECKFIT
(CONST 14) = DIMENSION-FUNCTION
(CONST 15) = (D-INTEGRALSIGN)
(CONST 16) = 1
(CONST 17) = UPDATE-HEIGHTS
(CONST 18) = %INTEGRATE
(CONST 19) = #\d
(CONST 20) = ROP
(CONST 21) = RIGHT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT ROP W DEPTH HEIGHT WIDTH FORM)
writes special variables : (DEPTH HEIGHT WIDTH W)
181 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (CONST 1)                           ; 0
5     (BIND 2)                            ; W
7     (CONST&PUSH 1)                      ; 0
8     (CONST&PUSH 1)                      ; 0
9     (NIL&PUSH)
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CDR)
14    (JMPIFNOT L259)
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CDR)
22    (JMPIFNOT L268)
25    (GETVALUE 0)                        ; FORM
27    (CDR)
28    (CDR)
29    (CDR)
30    (CDR)
31    (CAR&PUSH)
32    (NIL&PUSH)
33    (CONST&PUSH 8)                      ; MPAREN
34    (CONST&PUSH 8)                      ; MPAREN
35    (NIL&PUSH)
36    (CONST&PUSH 1)                      ; 0
37    (CALL 6 9)                          ; DIMENSION
40    (STORE 6)
41    (GETVALUE 10)                       ; WIDTH
43    (SETVALUE 2)                        ; W
45    (GETVALUE 11)                       ; HEIGHT
47    (STORE 2)
48    (GETVALUE 12)                       ; DEPTH
50    (STORE 1)
51    (GETVALUE 0)                        ; FORM
53    (CDR)
54    (CDR)
55    (CDR)
56    (CAR&PUSH)
57    (NIL&PUSH)
58    (CONST&PUSH 8)                      ; MPAREN
59    (CONST&PUSH 8)                      ; MPAREN
60    (NIL&PUSH)
61    (CONST&PUSH 1)                      ; 0
62    (CALL 6 9)                          ; DIMENSION
65    (STORE 0)
66    (CONST&PUSH 6)                      ; 2
67    (GETVALUE&PUSH 2)                   ; W
69    (GETVALUE&PUSH 10)                  ; WIDTH
71    (CALLSR&PUSH 1 51)                  ; MAX
74    (CALLSR&PUSH 2 53)                  ; +
77    (CALL1&JMPIFNOT 13 L284)            ; CHECKFIT
81    (CONST&PUSH 1)                      ; 0
82    (CONST&PUSH 7)                      ; 3
83    (LOAD&PUSH 3)
84    (CALLSR&PUSH 2 53)                  ; +
87    (LOAD 8)
88    (LIST*&PUSH 2)
90    (CONST&PUSH 15)                     ; (D-INTEGRALSIGN)
91    (LOAD 13)
92    (LIST* 2)
94    (STORE 6)
95    (GETVALUE&PUSH 2)                   ; W
97    (CALLSR&PUSH 0 54)                  ; -
100   (CONST&PUSH 6)                      ; 2
101   (GETVALUE&PUSH 11)                  ; HEIGHT
103   (CALLSR&PUSH 2 53)                  ; +
106   (CALLSR&PUSH 0 54)                  ; -
109   (LOAD 2)
110   (CONS)
111   (CONS&PUSH)
112   (LOAD&CONS&STORE 6)
114   (CONST&PUSH 6)                      ; 2
115   (GETVALUE&PUSH 2)                   ; W
117   (GETVALUE&PUSH 10)                  ; WIDTH
119   (CALLSR&PUSH 1 51)                  ; MAX
122   (CALLSR 2 53)                       ; +
125   (SETVALUE 2)                        ; W
127   (CONST&PUSH 7)                      ; 3
128   (LOAD&PUSH 3)
129   (LOAD&PUSH 3)
130   (CALLSR&STORE 3 53 2)               ; +
134   (CONST&PUSH 6)                      ; 2
135   (GETVALUE&PUSH 11)                  ; HEIGHT
137   (GETVALUE&PUSH 12)                  ; DEPTH
139   (CALLSR&STORE 3 53 1)               ; +
143   (GETVALUE&PUSH 2)                   ; W
145   (CONST&PUSH 16)                     ; 1
146   (GETVALUE&PUSH 10)                  ; WIDTH
148   (CALLSR&PUSH 2 54)                  ; -
151   (CONST&PUSH 1)                      ; 0
152   (LIST&PUSH 2)
154   (LOAD&CONS&STORE 6)
156   L156
156   (LOAD&PUSH 2)
157   (LOAD&PUSH 2)
158   (CALL2 17)                          ; UPDATE-HEIGHTS
160   (GETVALUE 0)                        ; FORM
162   (CDR)
163   (CAR&PUSH)
164   (LOAD&PUSH 7)
165   (CONST&PUSH 18)                     ; %INTEGRATE
166   (CONST&PUSH 8)                      ; MPAREN
167   (GETVALUE&PUSH 2)                   ; W
169   (CONST&PUSH 6)                      ; 2
170   (CALL 6 9)                          ; DIMENSION
173   (STORE 6)
174   (GETVALUE&PUSH 2)                   ; W
176   (GETVALUE&PUSH 10)                  ; WIDTH
178   (CALLSR 2 53)                       ; +
181   (SETVALUE 2)                        ; W
183   (LOAD&PUSH 2)
184   (GETVALUE&PUSH 11)                  ; HEIGHT
186   (CALLSR&STORE 1 51 2)               ; MAX
190   (LOAD&PUSH 1)
191   (GETVALUE&PUSH 12)                  ; DEPTH
193   (CALLSR&STORE 1 51 1)               ; MAX
197   (CONST&PUSH 19)                     ; #\d
198   (CONST&PUSH 4)                      ; #\Space
199   (LOAD 8)
200   (LIST* 2)
202   (STORE 6)
203   (GETVALUE 0)                        ; FORM
205   (CDR)
206   (CDR)
207   (CAR&PUSH)
208   (LOAD&PUSH 7)
209   (CONST&PUSH 8)                      ; MPAREN
210   (GETVALUE&PUSH 20)                  ; ROP
212   (CONST&PUSH 6)                      ; 2
213   (GETVALUE&PUSH 2)                   ; W
215   (CALLSR&PUSH 2 53)                  ; +
218   (GETVALUE&PUSH 21)                  ; RIGHT
220   (CALL 6 9)                          ; DIMENSION
223   (STORE 6)
224   (CONST&PUSH 6)                      ; 2
225   (GETVALUE&PUSH 2)                   ; W
227   (GETVALUE&PUSH 10)                  ; WIDTH
229   (CALLSR 3 53)                       ; +
232   (SETVALUE 10)                       ; WIDTH
234   (LOAD&PUSH 2)
235   (GETVALUE&PUSH 11)                  ; HEIGHT
237   (CALLSR 1 51)                       ; MAX
240   (SETVALUE 11)                       ; HEIGHT
242   (LOAD&PUSH 1)
243   (GETVALUE&PUSH 12)                  ; DEPTH
245   (CALLSR 1 51)                       ; MAX
248   (SETVALUE 12)                       ; DEPTH
250   (LOAD 6)
251   L251
251   (SKIP 3)
253   (UNBIND1)
254   (SKIP 1)
256   (UNBIND1)
257   (SKIP&RET 3)
259   L259
259   (GETVALUE 0)                        ; FORM
261   (CAR)
262   (CAR&PUSH)
263   (CALL1 3)                           ; WNA-ERR
265   (JMP L156)
268   L268
268   (CONST&PUSH 4)                      ; #\Space
269   (CONST&PUSH 5)                      ; (D-INTEGRALSIGN)
270   (LOAD 13)
271   (LIST* 2)
273   (STORE 6)
274   (CONST 6)                           ; 2
275   (SETVALUE 2)                        ; W
277   (CONST 7)                           ; 3
278   (STORE 2)
279   (CONST 6)                           ; 2
280   (STORE 1)
281   (JMP L156)
284   L284
284   (GETVALUE&PUSH 0)                   ; FORM
286   (LOAD&PUSH 12)
287   (CALL2 14)                          ; DIMENSION-FUNCTION
289   (JMP L251)


Disassembly of function #:|(DISPLA-DEF %DERIVATIVE DIM-%DERIVATIVE ...)-77-1|
(CONST 0) = %DERIVATIVE
(CONST 1) = DIMENSION
(CONST 2) = DIM-%DERIVATIVE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %DERIVATIVE
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-%DERIVATIVE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %DERIVATIVE DIM-%DERIVATIVE ...)-77-4|
(CONST 0) = %DERIVATIVE
(CONST 1) = RBP
(CONST 2) = 125
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %DERIVATIVE
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 125
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-%DERIVATIVE (FORM RESULT) ...)-78|
(CONST 0) = DIM-%DERIVATIVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-%DERIVATIVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-%DERIVATIVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-%DERIVATIVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-%DERIVATIVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-%DERIVATIVE
8     (SKIP&RET 1)


Disassembly of function DIM-%DERIVATIVE
(CONST 0) = FORM
(CONST 1) = (%DIFF)
(CONST 2) = DIMENSION-FUNCTION
(CONST 3) = (1)
(CONST 4) = $DERIVABBREV
(CONST 5) = L
(CONST 6) = 0
(CONST 7) = DMDERIVABBREV
(CONST 8) = LOP
(CONST 9) = RBP
(CONST 10) = 130
(CONST 11) = ROP
(CONST 12) = LBP
(CONST 13) = 110
(CONST 14) = DIMENSION-PAREN
(CONST 15) = DMDERIVLONG
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP LOP L $DERIVABBREV FORM)
writes special variables : (L FORM)
97 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (CDR)
7     (JMPIFNOT L40)
9     (GETVALUE 0)                        ; FORM
11    (CDR)
12    (CDR)
13    (CDR)
14    (JMPIFNOT L51)
16    (GETVALUE 4)                        ; $DERIVABBREV
18    (JMPIFNOT L105)
21    L21
21    (GETVALUE 0)                        ; FORM
23    (CDR)
24    (CDR)
25    (BIND 5)                            ; L
27    (GETVALUE 5)                        ; L
29    (JMPIF L83)
31    L31
31    (UNBIND1)
32    (GETVALUE&PUSH 0)                   ; FORM
34    (LOAD&PUSH 5)
35    (CALL2 7)                           ; DMDERIVABBREV
37    (JMP L154)
40    L40
40    (CONST&PUSH 1)                      ; (%DIFF)
41    (GETVALUE 0)                        ; FORM
43    (CDR)
44    (CONS&PUSH)
45    (LOAD&PUSH 5)
46    (CALL2 2)                           ; DIMENSION-FUNCTION
48    (JMP L154)
51    L51
51    (GETVALUE&PUSH 0)                   ; FORM
53    (CONST&PUSH 3)                      ; (1)
54    (CALLSR 2 34)                       ; APPEND
57    (SETVALUE 0)                        ; FORM
59    (GETVALUE 4)                        ; $DERIVABBREV
61    (JMPIFNOT L105)
63    (JMP L21)
65    L65
65    (GETVALUE&PUSH 0)                   ; FORM
67    (LOAD&PUSH 5)
68    (CALL2 14)                          ; DIMENSION-PAREN
70    (JMP L154)
73    L73
73    (GETVALUE 5)                        ; L
75    (CDR)
76    (CDR)
77    (SETVALUE 5)                        ; L
79    (GETVALUE 5)                        ; L
81    (JMPIFNOT L31)
83    L83
83    (GETVALUE 5)                        ; L
85    (CAR)
86    (JMPIFCONSP L104)
88    (GETVALUE 5)                        ; L
90    (CDR)
91    (CAR&PUSH)
92    (CALLS2&JMPIFNOT 12 L104)           ; INTEGERP
95    (GETVALUE 5)                        ; L
97    (CDR)
98    (CAR&PUSH)
99    (CONST&PUSH 6)                      ; 0
100   (CALLSR&JMPIF 1 48 L73)             ; >
104   L104
104   (UNBIND1)
105   L105
105   (GETVALUE&PUSH 8)                   ; LOP
107   (CALL1&PUSH 9)                      ; RBP
109   (CONST&PUSH 10)                     ; 130
110   (CALLSR&JMPIF 1 48 L65)             ; >
114   (GETVALUE&PUSH 11)                  ; ROP
116   (CALL1&PUSH 12)                     ; LBP
118   (CONST&PUSH 10)                     ; 130
119   (CALLSR&JMPIF 1 48 L65)             ; >
123   (GETVALUE 0)                        ; FORM
125   (CDR)
126   (CAR)
127   (JMPIFATOM L149)
129   (GETVALUE&PUSH 8)                   ; LOP
131   (CALL1&PUSH 9)                      ; RBP
133   (CONST&PUSH 13)                     ; 110
134   (CALLSR&JMPIF 1 48 L65)             ; >
139   (GETVALUE&PUSH 11)                  ; ROP
141   (CALL1&PUSH 12)                     ; LBP
143   (CONST&PUSH 13)                     ; 110
144   (CALLSR&JMPIF 1 48 L65)             ; >
149   L149
149   (GETVALUE&PUSH 0)                   ; FORM
151   (LOAD&PUSH 5)
152   (CALL2 15)                          ; DMDERIVLONG
154   L154
154   (UNBIND1)
155   (SKIP&RET 3)


Disassembly of function #:|(DEFUN DMDERIVABBREV (FORM RESULT) ...)-79|
(CONST 0) = DMDERIVABBREV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DMDERIVABBREV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DMDERIVABBREV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DMDERIVABBREV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DMDERIVABBREV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DMDERIVABBREV
8     (SKIP&RET 1)


Disassembly of function DMDERIVABBREV
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = L
(CONST 4) = VAR
(CONST 5) = MPAREN
(CONST 6) = DIMENSION
(CONST 7) = 1
(CONST 8) = #\Space
(CONST 9) = WIDTH
(CONST 10) = LOP
(CONST 11) = %DERIV
(CONST 12) = RIGHT
(CONST 13) = DEPTH
(CONST 14) = HEIGHT
(CONST 15) = UPDATE-HEIGHTS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (HEIGHT DEPTH RIGHT LOP WIDTH W VAR L FORM)
writes special variables : (DEPTH WIDTH L W VAR)
105 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (CONST 1)                           ; 0
5     (BIND 2)                            ; W
7     (GETVALUE 0)                        ; FORM
9     (CDR)
10    (CDR)
11    (BIND 3)                            ; L
13    (NIL)
14    (BIND 4)                            ; VAR
16    (GETVALUE 3)                        ; L
18    (JMPIFNOT L101)
21    L21
21    (GETVALUE 3)                        ; L
23    (CAR&PUSH)
24    (NIL&PUSH)
25    (CONST&PUSH 5)                      ; MPAREN
26    (CONST&PUSH 5)                      ; MPAREN
27    (NIL&PUSH)
28    (CONST&PUSH 1)                      ; 0
29    (CALL 6 6)                          ; DIMENSION
32    (SETVALUE 4)                        ; VAR
34    (GETVALUE 3)                        ; L
36    (CDR)
37    (CAR&PUSH)
38    (JMP L52)
40    L40
40    (CONST&PUSH 8)                      ; #\Space
41    (GETVALUE&PUSH 4)                   ; VAR
43    (LOAD&PUSH 12)
44    (CALLSR 2 34)                       ; APPEND
47    (CONS)
48    (STORE 10)
50    (LOAD&DEC&STORE 0)
52    L52
52    (CONST&PUSH 7)                      ; 1
53    (LOAD&PUSH 1)
54    (CALLSR&JMPIFNOT 1 45 L40)          ; =
58    (SKIP 1)
60    (CONST&PUSH 8)                      ; #\Space
61    (GETVALUE&PUSH 4)                   ; VAR
63    (LOAD&PUSH 11)
64    (CALLSR 2 35)                       ; NCONC
67    (CONS)
68    (STORE 9)
70    (GETVALUE&PUSH 2)                   ; W
72    (GETVALUE 3)                        ; L
74    (CDR)
75    (CAR&PUSH)
76    (GETVALUE 3)                        ; L
78    (CDR)
79    (CAR&PUSH)
80    (GETVALUE&PUSH 9)                   ; WIDTH
82    (CALLSR&PUSH 2 55)                  ; *
85    (CALLSR 3 53)                       ; +
88    (SETVALUE 2)                        ; W
90    (GETVALUE 3)                        ; L
92    (CDR)
93    (CDR)
94    (SETVALUE 3)                        ; L
96    (GETVALUE 3)                        ; L
98    (JMPIF L21)
101   L101
101   (LOAD&CDR&STORE 9)
103   (GETVALUE&PUSH 2)                   ; W
105   (CALLS2 151)                        ; 1-
107   (SETVALUE 2)                        ; W
109   (UNBIND 2)
111   (GETVALUE 0)                        ; FORM
113   (CDR)
114   (CAR&PUSH)
115   (LOAD&PUSH 9)
116   (GETVALUE&PUSH 10)                  ; LOP
118   (CONST&PUSH 11)                     ; %DERIV
119   (CONST&PUSH 1)                      ; 0
120   (GETVALUE&PUSH 12)                  ; RIGHT
122   (CALL 6 6)                          ; DIMENSION
125   (STORE 8)
127   (CONST&PUSH 1)                      ; 0
128   (CONST&PUSH 1)                      ; 0
129   (GETVALUE&PUSH 13)                  ; DEPTH
131   (CONST&PUSH 7)                      ; 1
132   (CALLSR&PUSH 2 54)                  ; -
135   (LOAD 5)
136   (CONS)
137   (CONS&PUSH)
138   (LOAD&CONS&STORE 8)
140   (GETVALUE&PUSH 2)                   ; W
142   (GETVALUE&PUSH 9)                   ; WIDTH
144   (CALLSR 2 53)                       ; +
147   (SETVALUE 9)                        ; WIDTH
149   (CONST&PUSH 7)                      ; 1
150   (GETVALUE&PUSH 13)                  ; DEPTH
152   (CALLS2&PUSH 150)                   ; 1+
154   (CALLSR 1 51)                       ; MAX
157   (SETVALUE 13)                       ; DEPTH
159   (GETVALUE&PUSH 14)                  ; HEIGHT
161   (GETVALUE&PUSH 13)                  ; DEPTH
163   (CALL2 15)                          ; UPDATE-HEIGHTS
165   (LOAD 8)
166   (UNBIND1)
167   (SKIP 1)
169   (UNBIND1)
170   (SKIP&RET 3)


Disassembly of function #:|(DEFUN DMDERIVLONG (FORM RESULT) ...)-80|
(CONST 0) = DMDERIVLONG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DMDERIVLONG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DMDERIVLONG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DMDERIVLONG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DMDERIVLONG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DMDERIVLONG
8     (SKIP&RET 1)


Disassembly of function DMDERIVLONG
(CONST 0) = FORM
(CONST 1) = NUM
(CONST 2) = 0
(CONST 3) = 1
(CONST 4) = #\d
(CONST 5) = MPAREN
(CONST 6) = DIMENSION
(CONST 7) = (DIFF)
(CONST 8) = DIMENSION-SUPERSCRIPT
(CONST 9) = WIDTH
(CONST 10) = HEIGHT
(CONST 11) = DEPTH
(CONST 12) = L
(CONST 13) = #\Space
(CONST 14) = (DIFF)
(CONST 15) = 2
(CONST 16) = ADDN
(CONST 17) = NFORMAT-CHECK
(CONST 18) = (DIFF)
(CONST 19) = |d|
(CONST 20) = %DERIV
(CONST 21) = DRATIO
(CONST 22) = ROP
(CONST 23) = RIGHT
(CONST 24) = UPDATE-HEIGHTS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT ROP NUM L DEPTH HEIGHT WIDTH FORM)
writes special variables : (DEPTH HEIGHT WIDTH FORM L NUM)
223 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL)
4     (BIND 1)                            ; NUM
6     (CONST&PUSH 2)                      ; 0
7     (CONST&PUSH 2)                      ; 0
8     (CONST&PUSH 2)                      ; 0
9     (NIL&PUSH)
10    (CONST&PUSH 2)                      ; 0
11    (CONST&PUSH 2)                      ; 0
12    (CONST&PUSH 2)                      ; 0
13    (GETVALUE 0)                        ; FORM
15    (CDR)
16    (CDR)
17    (CDR)
18    (CAR&PUSH)
19    (LIST 1)
21    (SETVALUE 1)                        ; NUM
23    (GETVALUE 0)                        ; FORM
25    (CDR)
26    (CDR)
27    (CDR)
28    (CAR&PUSH)
29    (JMPIFEQTO 3 L254)                  ; 1
33    (CONST&PUSH 7)                      ; (DIFF)
34    (GETVALUE 0)                        ; FORM
36    (CDR)
37    (CDR)
38    (CONS&PUSH)
39    (CONST&PUSH 4)                      ; #\d
40    (LIST&PUSH 1)
42    (CALL2 8)                           ; DIMENSION-SUPERSCRIPT
44    L44
44    (STORE 3)
45    (GETVALUE&PUSH 9)                   ; WIDTH
47    (CALLS2&STORE 150 2)                ; 1+
50    (GETVALUE 10)                       ; HEIGHT
52    (STORE 1)
53    (GETVALUE 11)                       ; DEPTH
55    (STORE 0)
56    (GETVALUE 0)                        ; FORM
58    (CDR)
59    (CDR)
60    (CDR)
61    (CDR)
62    (BIND 12)                           ; L
64    (GETVALUE 12)                       ; L
66    (JMPIFNOT L129)
68    L68
68    (GETVALUE 12)                       ; L
70    (CDR)
71    (CAR&PUSH)
72    (GETVALUE 1)                        ; NUM
74    (CONS)
75    (SETVALUE 1)                        ; NUM
77    (GETVALUE 12)                       ; L
79    (CDR)
80    (CAR&PUSH)
81    (JMPIFEQTO 3 L272)                  ; 1
85    (CONST&PUSH 14)                     ; (DIFF)
86    (GETVALUE 12)                       ; L
88    (CONS&PUSH)
89    (CONST&PUSH 4)                      ; #\d
90    (CONST&PUSH 13)                     ; #\Space
91    (LOAD 9)
92    (CONS)
93    (CONS&PUSH)
94    (CALL2 8)                           ; DIMENSION-SUPERSCRIPT
96    L96
96    (STORE 6)
97    (CONST&PUSH 15)                     ; 2
98    (LOAD&PUSH 6)
99    (GETVALUE&PUSH 9)                   ; WIDTH
101   (CALLSR&STORE 3 53 5)               ; +
105   (LOAD&PUSH 4)
106   (GETVALUE&PUSH 10)                  ; HEIGHT
108   (CALLSR&STORE 1 51 4)               ; MAX
112   (LOAD&PUSH 3)
113   (GETVALUE&PUSH 11)                  ; DEPTH
115   (CALLSR&STORE 2 53 3)               ; +
119   (GETVALUE 12)                       ; L
121   (CDR)
122   (CDR)
123   (SETVALUE 12)                       ; L
125   (GETVALUE 12)                       ; L
127   (JMPIF L68)
129   L129
129   (UNBIND1)
130   (GETVALUE&PUSH 1)                   ; NUM
132   (T&PUSH)
133   (CALL2&PUSH 16)                     ; ADDN
135   (CALL1 17)                          ; NFORMAT-CHECK
137   (SETVALUE 1)                        ; NUM
139   (PUSH)
140   (JMPIFEQTO 3 L290)                  ; 1
144   (CONST&PUSH 18)                     ; (DIFF)
145   (CONST&PUSH 19)                     ; |d|
146   (GETVALUE&PUSH 1)                   ; NUM
148   (LIST&PUSH 3)
150   (NIL&PUSH)
151   (CALL2 8)                           ; DIMENSION-SUPERSCRIPT
153   (SETVALUE 1)                        ; NUM
155   (GETVALUE 9)                        ; WIDTH
157   (STORE 6)
158   (GETVALUE 10)                       ; HEIGHT
160   (STORE 5)
161   (GETVALUE 11)                       ; DEPTH
163   (STORE 4)
164   L164
164   (GETVALUE 0)                        ; FORM
166   (CDR)
167   (CAR&PUSH)
168   (CALL1 17)                          ; NFORMAT-CHECK
170   (SETVALUE 0)                        ; FORM
172   (JMPIFATOM L303)
175   (LOAD&PUSH 14)
176   (GETVALUE&PUSH 1)                   ; NUM
178   (LOAD&PUSH 8)
179   (LOAD&PUSH 8)
180   (LOAD&PUSH 8)
181   (LOAD&PUSH 8)
182   (LOAD&PUSH 8)
183   (LOAD&PUSH 8)
184   (LOAD&PUSH 8)
185   (CALL 9 21)                         ; DRATIO
188   (STORE 14)
190   (GETVALUE 9)                        ; WIDTH
192   (STORE 6)
193   (GETVALUE 10)                       ; HEIGHT
195   (STORE 5)
196   (GETVALUE 11)                       ; DEPTH
198   (STORE 4)
199   (GETVALUE&PUSH 0)                   ; FORM
201   (CONST&PUSH 13)                     ; #\Space
202   (LOAD 16)
204   (CONS&PUSH)
205   (CONST&PUSH 20)                     ; %DERIV
206   (GETVALUE&PUSH 22)                  ; ROP
208   (LOAD&PUSH 10)
209   (GETVALUE&PUSH 23)                  ; RIGHT
211   (CALL 6 6)                          ; DIMENSION
214   (STORE 14)
216   (CONST&PUSH 3)                      ; 1
217   (LOAD&PUSH 7)
218   (GETVALUE&PUSH 9)                   ; WIDTH
220   (CALLSR 3 53)                       ; +
223   (SETVALUE 9)                        ; WIDTH
225   (LOAD&PUSH 5)
226   (GETVALUE&PUSH 10)                  ; HEIGHT
228   (CALLSR 1 51)                       ; MAX
231   (SETVALUE 10)                       ; HEIGHT
233   (LOAD&PUSH 4)
234   (GETVALUE&PUSH 11)                  ; DEPTH
236   (CALLSR 1 51)                       ; MAX
239   (SETVALUE 11)                       ; DEPTH
241   (GETVALUE&PUSH 10)                  ; HEIGHT
243   (GETVALUE&PUSH 11)                  ; DEPTH
245   (CALL2 24)                          ; UPDATE-HEIGHTS
247   (LOAD 14)
248   L248
248   (SKIP 7)
250   (UNBIND 2)
252   (SKIP&RET 3)
254   L254
254   (GETVALUE 0)                        ; FORM
256   (CDR)
257   (CDR)
258   (CAR&PUSH)
259   (CONST&PUSH 4)                      ; #\d
260   (LIST&PUSH 1)
262   (CONST&PUSH 5)                      ; MPAREN
263   (CONST&PUSH 5)                      ; MPAREN
264   (NIL&PUSH)
265   (CONST&PUSH 2)                      ; 0
266   (CALL 6 6)                          ; DIMENSION
269   (JMP L44)
272   L272
272   (GETVALUE 12)                       ; L
274   (CAR&PUSH)
275   (CONST&PUSH 4)                      ; #\d
276   (CONST&PUSH 13)                     ; #\Space
277   (LOAD 9)
278   (CONS)
279   (CONS&PUSH)
280   (CONST&PUSH 5)                      ; MPAREN
281   (CONST&PUSH 5)                      ; MPAREN
282   (NIL&PUSH)
283   (CONST&PUSH 2)                      ; 0
284   (CALL 6 6)                          ; DIMENSION
287   (JMP L96)
290   L290
290   (CONST&PUSH 4)                      ; #\d
291   (LIST 1)
293   (SETVALUE 1)                        ; NUM
295   (CONST 3)                           ; 1
296   (STORE 6)
297   (STORE 5)
298   (CONST 2)                           ; 0
299   (STORE 4)
300   (JMP L164)
303   L303
303   (GETVALUE&PUSH 0)                   ; FORM
305   (GETVALUE&PUSH 1)                   ; NUM
307   (CONST&PUSH 20)                     ; %DERIV
308   (CONST&PUSH 5)                      ; MPAREN
309   (NIL&PUSH)
310   (CONST&PUSH 2)                      ; 0
311   (CALL 6 6)                          ; DIMENSION
314   (SETVALUE 1)                        ; NUM
316   (LOAD&PUSH 6)
317   (GETVALUE&PUSH 9)                   ; WIDTH
319   (CALLSR&STORE 2 53 6)               ; +
323   (LOAD&PUSH 14)
324   (GETVALUE&PUSH 1)                   ; NUM
326   (LOAD&PUSH 8)
327   (LOAD&PUSH 8)
328   (LOAD&PUSH 8)
329   (LOAD&PUSH 8)
330   (LOAD&PUSH 8)
331   (LOAD&PUSH 8)
332   (LOAD&PUSH 8)
333   (CALL 9 21)                         ; DRATIO
336   (JMP L248)


Disassembly of function #:|(DISPLA-DEF %AT DIM-%AT ...)-81-1|
(CONST 0) = %AT
(CONST 1) = DIMENSION
(CONST 2) = DIM-%AT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %AT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-%AT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %AT DIM-%AT ...)-81-3|
(CONST 0) = %AT
(CONST 1) = LBP
(CONST 2) = 105
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %AT
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 105
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %AT DIM-%AT ...)-81-4|
(CONST 0) = %AT
(CONST 1) = RBP
(CONST 2) = 105
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %AT
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 105
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-%AT (FORM RESULT) ...)-82|
(CONST 0) = DIM-%AT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-%AT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-%AT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-%AT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-%AT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-%AT
8     (SKIP&RET 1)


Disassembly of function DIM-%AT
(CONST 0) = FORM
(CONST 1) = EXP
(CONST 2) = 0
(CONST 3) = W
(CONST 4) = WNA-ERR
(CONST 5) = LOP
(CONST 6) = %AT
(CONST 7) = DIMENSION
(CONST 8) = WIDTH
(CONST 9) = HEIGHT
(CONST 10) = DEPTH
(CONST 11) = MLIST
(CONST 12) = (MCOMMA)
(CONST 13) = MPAREN
(CONST 14) = 1
(CONST 15) = CHECKFIT
(CONST 16) = DIMENSION-FUNCTION
(CONST 17) = D-VBAR
(CONST 18) = $ABSBOXCHAR
(CONST 19) = 2
(CONST 20) = GETCHARN
(CONST 21) = UPDATE-HEIGHTS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP $ABSBOXCHAR W DEPTH HEIGHT WIDTH LOP FORM)
writes special variables : (DEPTH HEIGHT WIDTH W EXP)
135 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL)
4     (BIND 1)                            ; EXP
6     (NIL&PUSH)
7     (CONST 2)                           ; 0
8     (BIND 3)                            ; W
10    (CONST&PUSH 2)                      ; 0
11    (CONST&PUSH 2)                      ; 0
12    (GETVALUE 0)                        ; FORM
14    (CDR)
15    (CDR)
16    (JMPIFNOT L25)
18    (GETVALUE 0)                        ; FORM
20    (CDR)
21    (CDR)
22    (CDR)
23    (JMPIFNOT L31)
25    L25
25    (GETVALUE 0)                        ; FORM
27    (CAR)
28    (CAR&PUSH)
29    (CALL1 4)                           ; WNA-ERR
31    L31
31    (GETVALUE 0)                        ; FORM
33    (CDR)
34    (CAR&PUSH)
35    (LOAD&PUSH 14)
36    (GETVALUE&PUSH 5)                   ; LOP
38    (CONST&PUSH 6)                      ; %AT
39    (NIL&PUSH)
40    (CONST&PUSH 2)                      ; 0
41    (CALL 6 7)                          ; DIMENSION
44    (SETVALUE 1)                        ; EXP
46    (GETVALUE 8)                        ; WIDTH
48    (SETVALUE 3)                        ; W
50    (GETVALUE 9)                        ; HEIGHT
52    (STORE 1)
53    (GETVALUE 10)                       ; DEPTH
55    (STORE 0)
56    (GETVALUE 0)                        ; FORM
58    (CDR)
59    (CDR)
60    (CAR)
61    (CAR)
62    (CAR&PUSH)
63    (JMPIFNOTEQTO 11 L84)               ; MLIST
66    (GETVALUE 0)                        ; FORM
68    (CDR)
69    (CDR)
70    (CAR)
71    (CDR)
72    (CDR)
73    (JMPIF L97)
75    (GETVALUE 0)                        ; FORM
77    (CDR)
78    (CDR)
79    (CAR)
80    L80
80    (CDR)
81    (CAR)
82    (JMP L105)
84    L84
84    (GETVALUE 0)                        ; FORM
86    (CDR)
87    (JMP L80)
89    L89
89    (GETVALUE&PUSH 0)                   ; FORM
91    (LOAD&PUSH 14)
92    (CALL2 16)                          ; DIMENSION-FUNCTION
94    (JMP L185)
97    L97
97    (CONST&PUSH 12)                     ; (MCOMMA)
98    (GETVALUE 0)                        ; FORM
100   (CDR)
101   (CDR)
102   (CAR)
103   (CDR)
104   (CONS)
105   L105
105   (PUSH)
106   (NIL&PUSH)
107   (CONST&PUSH 13)                     ; MPAREN
108   (CONST&PUSH 13)                     ; MPAREN
109   (NIL&PUSH)
110   (CONST&PUSH 2)                      ; 0
111   (CALL 6 7)                          ; DIMENSION
114   (STORE 5)
115   (CONST&PUSH 14)                     ; 1
116   (GETVALUE&PUSH 3)                   ; W
118   (GETVALUE&PUSH 8)                   ; WIDTH
120   (CALLSR&PUSH 3 53)                  ; +
123   (CALL1&JMPIFNOT 15 L89)             ; CHECKFIT
126   (CONST&PUSH 2)                      ; 0
127   (CONST&PUSH 2)                      ; 0
128   (CONST&PUSH 14)                     ; 1
129   (LOAD&PUSH 3)
130   (CALLSR&PUSH 2 54)                  ; -
133   (LOAD 7)
134   (CONS)
135   (CONS&PUSH)
136   (CONST&PUSH 17)                     ; D-VBAR
137   (LOAD&INC&PUSH 3)
139   (LOAD&INC&PUSH 3)
141   (GETVALUE&PUSH 18)                  ; $ABSBOXCHAR
143   (CONST&PUSH 19)                     ; 2
144   (CALL2&PUSH 20)                     ; GETCHARN
146   (LIST&PUSH 4)
148   (GETVALUE 1)                        ; EXP
150   (CONS)
151   (CONS)
152   (STORE 13)
154   (CONST&PUSH 14)                     ; 1
155   (GETVALUE&PUSH 3)                   ; W
157   (GETVALUE&PUSH 8)                   ; WIDTH
159   (CALLSR 3 53)                       ; +
162   (SETVALUE 8)                        ; WIDTH
164   (LOAD&PUSH 1)
165   (CALLS2 150)                        ; 1+
167   (SETVALUE 9)                        ; HEIGHT
169   (CONST&PUSH 14)                     ; 1
170   (LOAD&PUSH 1)
171   (GETVALUE&PUSH 10)                  ; DEPTH
173   (CALLSR 3 53)                       ; +
176   (SETVALUE 10)                       ; DEPTH
178   (GETVALUE&PUSH 9)                   ; HEIGHT
180   (GETVALUE&PUSH 10)                  ; DEPTH
182   (CALL2 21)                          ; UPDATE-HEIGHTS
184   (LOAD 13)
185   L185
185   (SKIP 2)
187   (UNBIND1)
188   (SKIP 1)
190   (UNBIND 2)
192   (SKIP&RET 3)


Disassembly of function #:|(DISPLA-DEF MMINUS DIMENSION-PREFIX ...)-83-1|
(CONST 0) = MMINUS
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-PREFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMINUS
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-PREFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MMINUS DIMENSION-PREFIX ...)-83-2|
(CONST 0) = MMINUS
(CONST 1) = DISSYM
(CONST 2) = (#\- #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMINUS
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\- #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MMINUS DIMENSION-PREFIX ...)-83-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MPLUS DIM-MPLUS)-84-1|
(CONST 0) = MPLUS
(CONST 1) = DIMENSION
(CONST 2) = DIM-MPLUS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPLUS
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MPLUS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MPLUS DIM-MPLUS)-84-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MUNARYPLUS (#\\+ #\\Space) ...)-85|
(CONST 0) = MUNARYPLUS
(CONST 1) = DISSYM
(CONST 2) = (#\+ #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MUNARYPLUS
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\+ #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MPLUS (FORM RESULT) ...)-86|
(CONST 0) = DIM-MPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MPLUS
8     (SKIP&RET 1)


Disassembly of function DIM-MPLUS
(CONST 0) = FORM
(CONST 1) = (TRUNC EXACT)
(CONST 2) = MEMQ
(CONST 3) = DIMENSION-FUNCTION
(CONST 4) = (MUNARYPLUS)
(CONST 5) = DIMENSION-PREFIX
(CONST 6) = LOP
(CONST 7) = MPLUS
(CONST 8) = 0
(CONST 9) = DIMENSION
(CONST 10) = WIDTH
(CONST 11) = CHECKBREAK
(CONST 12) = HEIGHT
(CONST 13) = DEPTH
(CONST 14) = TRUNC
(CONST 15) = L
(CONST 16) = W
(CONST 17) = MMMINUSP
(CONST 18) = (#\Space #\- #\Space)
(CONST 19) = (#\Space #\+ #\Space)
(CONST 20) = ROP
(CONST 21) = 3
(CONST 22) = RIGHT
(CONST 23) = 8
(CONST 24) = #\.
(CONST 25) = #\Space
(CONST 26) = #\+
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT ROP W L DEPTH HEIGHT WIDTH LOP FORM)
writes special variables : (DEPTH HEIGHT WIDTH L W FORM)
168 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (CDR)
7     (JMPIF L19)
9     (GETVALUE 0)                        ; FORM
11    (CAR)
12    (CDR)
13    (CAR&PUSH)
14    (CONST&PUSH 1)                      ; (TRUNC EXACT)
15    (CALL2&JMPIFNOT 2 L197)             ; MEMQ
19    L19
19    (GETVALUE 0)                        ; FORM
21    (CDR)
22    (CAR&PUSH)
23    (LOAD&PUSH 5)
24    (GETVALUE&PUSH 6)                   ; LOP
26    (CONST&PUSH 7)                      ; MPLUS
27    (CONST&PUSH 8)                      ; 0
28    (CONST&PUSH 8)                      ; 0
29    (CALL 6 9)                          ; DIMENSION
32    (STORE 4)
33    (PUSH)
34    (GETVALUE&PUSH 10)                  ; WIDTH
36    (CALL2 11)                          ; CHECKBREAK
38    (GETVALUE 0)                        ; FORM
40    (CDR)
41    (CDR&PUSH)
42    (GETVALUE&PUSH 10)                  ; WIDTH
44    (GETVALUE&PUSH 12)                  ; HEIGHT
46    (GETVALUE&PUSH 13)                  ; DEPTH
48    (CONST&PUSH 14)                     ; TRUNC
49    (GETVALUE 0)                        ; FORM
51    (CAR)
52    (CDR&PUSH)
53    (CALL2&PUSH 2)                      ; MEMQ
55    (NIL&PUSH)
56    (LOAD 5)
57    (BIND 15)                           ; L
59    (LOAD 7)
60    (BIND 16)                           ; W
62    (GETVALUE 15)                       ; L
64    (JMPIFNOT L150)
67    L67
67    (GETVALUE 15)                       ; L
69    (CAR&PUSH)
70    (CALL1&JMPIF 17 L212)               ; MMMINUSP
74    (CONST 19)                          ; (#\Space #\+ #\Space)
75    (STORE 6)
76    (GETVALUE 15)                       ; L
78    L78
78    (CAR)
79    (SETVALUE 0)                        ; FORM
81    (LOAD&JMPIF 7 L90)
84    (GETVALUE 15)                       ; L
86    (CDR)
87    (JMPIFNOT L221)
90    L90
90    (GETVALUE&PUSH 0)                   ; FORM
92    (LOAD&PUSH 7)
93    (LOAD&PUSH 18)
94    (CALLSR&PUSH 2 34)                  ; APPEND
97    (CONST&PUSH 7)                      ; MPLUS
98    (CONST&PUSH 7)                      ; MPLUS
99    (CONST&PUSH 21)                     ; 3
100   (GETVALUE&PUSH 16)                  ; W
102   (CALLSR&PUSH 2 53)                  ; +
105   (CONST&PUSH 8)                      ; 0
106   (CALL 6 9)                          ; DIMENSION
109   (STORE 16)
111   (CONST&PUSH 21)                     ; 3
112   (GETVALUE&PUSH 16)                  ; W
114   (GETVALUE&PUSH 10)                  ; WIDTH
116   (CALLSR 3 53)                       ; +
119   (SETVALUE 16)                       ; W
121   (LOAD&PUSH 9)
122   (GETVALUE&PUSH 12)                  ; HEIGHT
124   (CALLSR&STORE 1 51 9)               ; MAX
128   (LOAD&PUSH 8)
129   (GETVALUE&PUSH 13)                  ; DEPTH
131   (CALLSR&STORE 1 51 8)               ; MAX
135   (LOAD&PUSH 16)
136   (GETVALUE&PUSH 16)                  ; W
138   (CALL2 11)                          ; CHECKBREAK
140   (GETVALUE 15)                       ; L
142   (CDR)
143   (SETVALUE 15)                       ; L
145   (GETVALUE 15)                       ; L
147   (JMPIF L67)
150   L150
150   (LOAD&JMPIFNOT 7 L181)
153   (CONST&PUSH 23)                     ; 8
154   (GETVALUE&PUSH 16)                  ; W
156   (CALLSR 2 53)                       ; +
159   (SETVALUE 10)                       ; WIDTH
161   (LOAD 9)
162   (SETVALUE 12)                       ; HEIGHT
164   (LOAD 8)
165   (SETVALUE 13)                       ; DEPTH
167   (CONST&PUSH 24)                     ; #\.
168   (CONST&PUSH 25)                     ; #\Space
169   (CONST&PUSH 24)                     ; #\.
170   (CONST&PUSH 25)                     ; #\Space
171   (CONST&PUSH 24)                     ; #\.
172   (CONST&PUSH 25)                     ; #\Space
173   (CONST&PUSH 26)                     ; #\+
174   (CONST&PUSH 25)                     ; #\Space
175   (LOAD 24)
177   (LIST* 8)
179   (STORE 16)
181   L181
181   (LOAD 16)
183   (UNBIND 2)
185   (SKIP 6)
187   L187
187   (UNBIND1)
188   (SKIP&RET 3)
190   L190
190   (GETVALUE&PUSH 0)                   ; FORM
192   (LOAD&PUSH 5)
193   (CALL2 3)                           ; DIMENSION-FUNCTION
195   (JMP L187)
197   L197
197   (GETVALUE 0)                        ; FORM
199   (CDR)
200   (JMPIFNOT L190)
202   (CONST&PUSH 4)                      ; (MUNARYPLUS)
203   (GETVALUE 0)                        ; FORM
205   (CDR)
206   (CONS&PUSH)
207   (LOAD&PUSH 5)
208   (CALL2 5)                           ; DIMENSION-PREFIX
210   (JMP L187)
212   L212
212   (CONST 18)                          ; (#\Space #\- #\Space)
213   (STORE 6)
214   (GETVALUE 15)                       ; L
216   (CAR)
217   (CDR)
218   (JMP L78)
221   L221
221   (GETVALUE&PUSH 0)                   ; FORM
223   (LOAD&PUSH 7)
224   (LOAD&PUSH 18)
225   (CALLSR&PUSH 2 34)                  ; APPEND
228   (CONST&PUSH 7)                      ; MPLUS
229   (GETVALUE&PUSH 20)                  ; ROP
231   (CONST&PUSH 21)                     ; 3
232   (GETVALUE&PUSH 16)                  ; W
234   (CALLSR&PUSH 2 53)                  ; +
237   (GETVALUE&PUSH 22)                  ; RIGHT
239   (CALL 6 9)                          ; DIMENSION
242   (STORE 16)
244   (CONST&PUSH 21)                     ; 3
245   (GETVALUE&PUSH 16)                  ; W
247   (GETVALUE&PUSH 10)                  ; WIDTH
249   (CALLSR 3 53)                       ; +
252   (SETVALUE 10)                       ; WIDTH
254   (LOAD&PUSH 9)
255   (GETVALUE&PUSH 12)                  ; HEIGHT
257   (CALLSR 1 51)                       ; MAX
260   (SETVALUE 12)                       ; HEIGHT
262   (LOAD&PUSH 8)
263   (GETVALUE&PUSH 13)                  ; DEPTH
265   (CALLSR 1 51)                       ; MAX
268   (SETVALUE 13)                       ; DEPTH
270   (JMP L181)


Disassembly of function #:|(DISPLA-DEF %SUM DIM-%SUM ...)-87-1|
(CONST 0) = %SUM
(CONST 1) = DIMENSION
(CONST 2) = DIM-%SUM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SUM
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-%SUM
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %SUM DIM-%SUM ...)-87-4|
(CONST 0) = %SUM
(CONST 1) = RBP
(CONST 2) = 110
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SUM
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 110
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %LIMIT DIM-%LIMIT ...)-88-1|
(CONST 0) = %LIMIT
(CONST 1) = DIMENSION
(CONST 2) = DIM-%LIMIT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LIMIT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-%LIMIT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %LIMIT DIM-%LIMIT ...)-88-3|
(CONST 0) = %LIMIT
(CONST 1) = LBP
(CONST 2) = 90
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LIMIT
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 90
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %LIMIT DIM-%LIMIT ...)-88-4|
(CONST 0) = %LIMIT
(CONST 1) = RBP
(CONST 2) = 90
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LIMIT
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 90
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %LSUM DIM-%LSUM ...)-89-1|
(CONST 0) = %LSUM
(CONST 1) = DIMENSION
(CONST 2) = DIM-%LSUM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LSUM
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-%LSUM
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF %LSUM DIM-%LSUM ...)-89-4|
(CONST 0) = %LSUM
(CONST 1) = RBP
(CONST 2) = 110
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LSUM
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 110
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-%LSUM (FORM RESULT) ...)-90|
(CONST 0) = DIM-%LSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-%LSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-%LSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-%LSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-%LSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-%LSUM
8     (SKIP&RET 1)


Disassembly of function DIM-%LSUM
(CONST 0) = FORM
(CONST 1) = (D-SUMSIGN)
(CONST 2) = 4
(CONST 3) = 3
(CONST 4) = 2
(CONST 5) = DSUMPROD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 0)                   ; FORM
5     (LOAD&PUSH 5)
6     (CONST&PUSH 1)                      ; (D-SUMSIGN)
7     (CONST&PUSH 2)                      ; 4
8     (CONST&PUSH 3)                      ; 3
9     (CONST&PUSH 4)                      ; 2
10    (CALL 6 5)                          ; DSUMPROD
13    (UNBIND1)
14    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIM-%SUM (FORM RESULT) ...)-91|
(CONST 0) = DIM-%SUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-%SUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-%SUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-%SUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-%SUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-%SUM
8     (SKIP&RET 1)


Disassembly of function DIM-%SUM
(CONST 0) = FORM
(CONST 1) = (D-SUMSIGN)
(CONST 2) = 4
(CONST 3) = 3
(CONST 4) = 2
(CONST 5) = DSUMPROD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 0)                   ; FORM
5     (LOAD&PUSH 5)
6     (CONST&PUSH 1)                      ; (D-SUMSIGN)
7     (CONST&PUSH 2)                      ; 4
8     (CONST&PUSH 3)                      ; 3
9     (CONST&PUSH 4)                      ; 2
10    (CALL 6 5)                          ; DSUMPROD
13    (UNBIND1)
14    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIM-%LIMIT (FORM RESULT) ...)-92|
(CONST 0) = DIM-%LIMIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-%LIMIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-%LIMIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-%LIMIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-%LIMIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-%LIMIT
8     (SKIP&RET 1)


Disassembly of function DIM-%LIMIT
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = DIMENSION-FUNCTION
(CONST 4) = WNA-ERR
(CONST 5) = MPAREN
(CONST 6) = DIMENSION
(CONST 7) = WIDTH
(CONST 8) = HEIGHT
(CONST 9) = DEPTH
(CONST 10) = #\Space
(CONST 11) = #\>
(CONST 12) = #\-
(CONST 13) = 4
(CONST 14) = $PLUS
(CONST 15) = #\+
(CONST 16) = #\t
(CONST 17) = #\i
(CONST 18) = #\m
(CONST 19) = #\l
(CONST 20) = -5
(CONST 21) = 1
(CONST 22) = UPDATE-HEIGHTS
(CONST 23) = (1 0)
(CONST 24) = %LIMIT
(CONST 25) = ROP
(CONST 26) = RIGHT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT ROP W DEPTH HEIGHT WIDTH FORM)
writes special variables : (DEPTH WIDTH W)
145 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (CONST 1)                           ; 0
4     (BIND 2)                            ; W
6     (CONST&PUSH 1)                      ; 0
7     (CONST&PUSH 1)                      ; 0
8     (NIL&PUSH)
9     (GETVALUE 0)                        ; FORM
11    (CDR)
12    (CDR)
13    (JMPIFNOT L203)
16    (GETVALUE 0)                        ; FORM
18    (CDR)
19    (CDR)
20    (CDR)
21    (JMPIF L29)
23    (GETVALUE 0)                        ; FORM
25    (CAR)
26    (CAR&PUSH)
27    (CALL1 4)                           ; WNA-ERR
29    L29
29    (GETVALUE 0)                        ; FORM
31    (CDR)
32    (CDR)
33    (CAR&PUSH)
34    (NIL&PUSH)
35    (CONST&PUSH 5)                      ; MPAREN
36    (CONST&PUSH 5)                      ; MPAREN
37    (NIL&PUSH)
38    (CONST&PUSH 1)                      ; 0
39    (CALL 6 6)                          ; DIMENSION
42    (STORE 0)
43    (GETVALUE 7)                        ; WIDTH
45    (SETVALUE 2)                        ; W
47    (GETVALUE 8)                        ; HEIGHT
49    (STORE 2)
50    (GETVALUE 9)                        ; DEPTH
52    (STORE 1)
53    (CONST&PUSH 10)                     ; #\Space
54    (CONST&PUSH 11)                     ; #\>
55    (CONST&PUSH 12)                     ; #\-
56    (CONST&PUSH 10)                     ; #\Space
57    (LOAD 4)
58    (LIST* 4)
60    (STORE 0)
61    (GETVALUE 0)                        ; FORM
63    (CDR)
64    (CDR)
65    (CDR)
66    (CAR&PUSH)
67    (LOAD&PUSH 1)
68    (CONST&PUSH 5)                      ; MPAREN
69    (CONST&PUSH 5)                      ; MPAREN
70    (NIL&PUSH)
71    (CONST&PUSH 1)                      ; 0
72    (CALL 6 6)                          ; DIMENSION
75    (STORE 0)
76    (CONST&PUSH 13)                     ; 4
77    (GETVALUE&PUSH 2)                   ; W
79    (GETVALUE&PUSH 7)                   ; WIDTH
81    (CALLSR 3 53)                       ; +
84    (SETVALUE 2)                        ; W
86    (LOAD&PUSH 2)
87    (GETVALUE&PUSH 8)                   ; HEIGHT
89    (CALLSR&STORE 1 51 2)               ; MAX
93    (LOAD&PUSH 1)
94    (GETVALUE&PUSH 9)                   ; DEPTH
96    (CALLSR&STORE 1 51 1)               ; MAX
100   (GETVALUE 0)                        ; FORM
102   (CDR)
103   (CDR)
104   (CDR)
105   (CDR)
106   (JMPIFNOT L126)
108   (GETVALUE&PUSH 0)                   ; FORM
110   (CALLS1&PUSH 149)                   ; FIFTH
112   (JMPIFEQTO 14 L213)                 ; $PLUS
116   (CONST 12)                          ; #\-
117   L117
117   (PUSH)
118   (LOAD&CONS&STORE 0)
120   (GETVALUE&PUSH 2)                   ; W
122   (CALLS2 150)                        ; 1+
124   (SETVALUE 2)                        ; W
126   L126
126   (CONST&PUSH 16)                     ; #\t
127   (CONST&PUSH 17)                     ; #\i
128   (CONST&PUSH 18)                     ; #\m
129   (CONST&PUSH 17)                     ; #\i
130   (CONST&PUSH 19)                     ; #\l
131   (LOAD 15)
133   (LIST* 5)
135   (STORE 10)
137   (CONST&PUSH 20)                     ; -5
138   (LOAD&PUSH 3)
139   (CALLSR&PUSH 0 54)                  ; -
142   (LOAD 2)
143   (LIST*&PUSH 2)
145   (LOAD 11)
146   (CONS)
147   (STORE 0)
148   (LOAD&PUSH 2)
149   (LOAD&PUSH 2)
150   (CALLSR&STORE 2 53 1)               ; +
154   (CONST&PUSH 21)                     ; 1
155   (LOAD&PUSH 2)
156   (CALL2 22)                          ; UPDATE-HEIGHTS
158   (GETVALUE 0)                        ; FORM
160   (CDR)
161   (CAR&PUSH)
162   (CONST&PUSH 23)                     ; (1 0)
163   (LOAD 2)
164   (CONS&PUSH)
165   (CONST&PUSH 24)                     ; %LIMIT
166   (GETVALUE&PUSH 25)                  ; ROP
168   (GETVALUE&PUSH 2)                   ; W
170   (CALLS2&PUSH 150)                   ; 1+
172   (GETVALUE&PUSH 26)                  ; RIGHT
174   (CALL 6 6)                          ; DIMENSION
177   (STORE 0)
178   (CONST&PUSH 21)                     ; 1
179   (GETVALUE&PUSH 2)                   ; W
181   (GETVALUE&PUSH 7)                   ; WIDTH
183   (CALLSR 3 53)                       ; +
186   (SETVALUE 7)                        ; WIDTH
188   (LOAD&PUSH 1)
189   (GETVALUE&PUSH 9)                   ; DEPTH
191   (CALLSR 1 51)                       ; MAX
194   (SETVALUE 9)                        ; DEPTH
196   (POP)
197   (SKIP 2)
199   (UNBIND1)
200   L200
200   (UNBIND1)
201   (SKIP&RET 3)
203   L203
203   (GETVALUE&PUSH 0)                   ; FORM
205   (LOAD&PUSH 11)
206   (CALL2 3)                           ; DIMENSION-FUNCTION
208   (SKIP 3)
210   (UNBIND1)
211   (JMP L200)
213   L213
213   (CONST 15)                          ; #\+
214   (JMP L117)


Disassembly of function #:|(DISPLA-DEF MARROW DIMENSION-INFIX ...)-93-1|
(CONST 0) = MARROW
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARROW
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MARROW DIMENSION-INFIX ...)-93-2|
(CONST 0) = MARROW
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\- #\> #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARROW
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\- #\> #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MARROW DIMENSION-INFIX ...)-93-3|
(CONST 0) = MARROW
(CONST 1) = LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARROW
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MARROW DIMENSION-INFIX ...)-93-4|
(CONST 0) = MARROW
(CONST 1) = RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARROW
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MGREATERP DIMENSION-INFIX ...)-94-1|
(CONST 0) = MGREATERP
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGREATERP
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MGREATERP DIMENSION-INFIX ...)-94-2|
(CONST 0) = MGREATERP
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\> #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGREATERP
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\> #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MGREATERP DIMENSION-INFIX ...)-94-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MGEQP DIMENSION-INFIX ...)-95-1|
(CONST 0) = MGEQP
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGEQP
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MGEQP DIMENSION-INFIX ...)-95-2|
(CONST 0) = MGEQP
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\> #\= #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGEQP
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\> #\= #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MGEQP DIMENSION-INFIX ...)-95-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MEQUAL DIMENSION-INFIX ...)-96-1|
(CONST 0) = MEQUAL
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQUAL
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MEQUAL DIMENSION-INFIX ...)-96-2|
(CONST 0) = MEQUAL
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\= #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQUAL
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\= #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MEQUAL DIMENSION-INFIX ...)-96-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNOTEQUAL DIMENSION-INFIX ...)-97-1|
(CONST 0) = MNOTEQUAL
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOTEQUAL
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNOTEQUAL DIMENSION-INFIX ...)-97-2|
(CONST 0) = MNOTEQUAL
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\# #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOTEQUAL
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\# #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNOTEQUAL DIMENSION-INFIX ...)-97-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLEQP DIMENSION-INFIX ...)-98-1|
(CONST 0) = MLEQP
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLEQP
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLEQP DIMENSION-INFIX ...)-98-2|
(CONST 0) = MLEQP
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\< #\= #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLEQP
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\< #\= #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLEQP DIMENSION-INFIX ...)-98-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLESSP DIMENSION-INFIX ...)-99-1|
(CONST 0) = MLESSP
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLESSP
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLESSP DIMENSION-INFIX ...)-99-2|
(CONST 0) = MLESSP
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\< #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLESSP
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\< #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLESSP DIMENSION-INFIX ...)-99-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNOT DIMENSION-PREFIX ...)-100-1|
(CONST 0) = MNOT
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-PREFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-PREFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNOT DIMENSION-PREFIX ...)-100-2|
(CONST 0) = MNOT
(CONST 1) = DISSYM
(CONST 2) = (#\N #\O #\T #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOT
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\N #\O #\T #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MNOT DIMENSION-PREFIX ...)-100-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MAND DIMENSION-NARY ...)-101-1|
(CONST 0) = MAND
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAND
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MAND DIMENSION-NARY ...)-101-2|
(CONST 0) = MAND
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\A #\N #\D #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAND
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\A #\N #\D #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MAND DIMENSION-NARY ...)-101-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MOR DIMENSION-NARY ...)-102-1|
(CONST 0) = MOR
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOR
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MOR DIMENSION-NARY ...)-102-2|
(CONST 0) = MOR
(CONST 1) = DISSYM
(CONST 2) = (#\Space #\O #\R #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOR
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\Space #\O #\R #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MOR DIMENSION-NARY ...)-102-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MCOND DIM-MCOND)-103-1|
(CONST 0) = MCOND
(CONST 1) = DIMENSION
(CONST 2) = DIM-MCOND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCOND
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MCOND
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MCOND DIM-MCOND)-103-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MCOND (FORM RESULT) ...)-104|
(CONST 0) = DIM-MCOND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MCOND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MCOND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MCOND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MCOND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MCOND
8     (SKIP&RET 1)


Disassembly of function DIM-MCOND
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = #\Space
(CONST 4) = #\F
(CONST 5) = #\I
(CONST 6) = MCOND
(CONST 7) = MPAREN
(CONST 8) = 3
(CONST 9) = DIMENSION
(CONST 10) = WIDTH
(CONST 11) = HEIGHT
(CONST 12) = DEPTH
(CONST 13) = CHECKBREAK
(CONST 14) = #\N
(CONST 15) = #\E
(CONST 16) = #\H
(CONST 17) = #\T
(CONST 18) = 6
(CONST 19) = $FALSE
(CONST 20) = #\S
(CONST 21) = #\L
(CONST 22) = ROP
(CONST 23) = RIGHT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT ROP W DEPTH HEIGHT WIDTH FORM)
writes special variables : (DEPTH HEIGHT WIDTH W)
114 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (CONST 1)                           ; 0
4     (BIND 2)                            ; W
6     (CONST&PUSH 1)                      ; 0
7     (CONST&PUSH 1)                      ; 0
8     (CONST&PUSH 3)                      ; #\Space
9     (CONST&PUSH 4)                      ; #\F
10    (CONST&PUSH 5)                      ; #\I
11    (LOAD 12)
12    (LIST* 3)
14    (STORE 9)
16    (GETVALUE 0)                        ; FORM
18    (CDR)
19    (CAR&PUSH)
20    (LOAD&PUSH 10)
21    (CONST&PUSH 6)                      ; MCOND
22    (CONST&PUSH 7)                      ; MPAREN
23    (CONST&PUSH 8)                      ; 3
24    (CONST&PUSH 1)                      ; 0
25    (CALL 6 9)                          ; DIMENSION
28    (STORE 9)
30    (CONST&PUSH 8)                      ; 3
31    (GETVALUE&PUSH 10)                  ; WIDTH
33    (CALLSR 2 53)                       ; +
36    (SETVALUE 2)                        ; W
38    (GETVALUE 11)                       ; HEIGHT
40    (STORE 1)
41    (GETVALUE 12)                       ; DEPTH
43    (STORE 0)
44    (LOAD&PUSH 9)
45    (GETVALUE&PUSH 2)                   ; W
47    (CALL2 13)                          ; CHECKBREAK
49    (CONST&PUSH 3)                      ; #\Space
50    (CONST&PUSH 14)                     ; #\N
51    (CONST&PUSH 15)                     ; #\E
52    (CONST&PUSH 16)                     ; #\H
53    (CONST&PUSH 17)                     ; #\T
54    (CONST&PUSH 3)                      ; #\Space
55    (LOAD 15)
57    (LIST* 6)
59    (STORE 9)
61    (GETVALUE 0)                        ; FORM
63    (CDR)
64    (CDR)
65    (CAR&PUSH)
66    (LOAD&PUSH 10)
67    (CONST&PUSH 6)                      ; MCOND
68    (CONST&PUSH 7)                      ; MPAREN
69    (CONST&PUSH 18)                     ; 6
70    (GETVALUE&PUSH 2)                   ; W
72    (CALLSR&PUSH 2 53)                  ; +
75    (CONST&PUSH 1)                      ; 0
76    (CALL 6 9)                          ; DIMENSION
79    (STORE 9)
81    (CONST&PUSH 18)                     ; 6
82    (GETVALUE&PUSH 2)                   ; W
84    (GETVALUE&PUSH 10)                  ; WIDTH
86    (CALLSR 3 53)                       ; +
89    (SETVALUE 2)                        ; W
91    (LOAD&PUSH 1)
92    (GETVALUE&PUSH 11)                  ; HEIGHT
94    (CALLSR&STORE 1 51 1)               ; MAX
98    (LOAD&PUSH 0)
99    (GETVALUE&PUSH 12)                  ; DEPTH
101   (CALLSR&STORE 1 51 0)               ; MAX
105   (GETVALUE&PUSH 0)                   ; FORM
107   (CALLS1&PUSH 149)                   ; FIFTH
109   (JMPIFEQTO 19 L174)                 ; $FALSE
112   (LOAD&PUSH 9)
113   (GETVALUE&PUSH 2)                   ; W
115   (CALL2 13)                          ; CHECKBREAK
117   (CONST&PUSH 3)                      ; #\Space
118   (CONST&PUSH 15)                     ; #\E
119   (CONST&PUSH 20)                     ; #\S
120   (CONST&PUSH 21)                     ; #\L
121   (CONST&PUSH 15)                     ; #\E
122   (CONST&PUSH 3)                      ; #\Space
123   (LOAD 15)
125   (LIST* 6)
127   (STORE 9)
129   (GETVALUE&PUSH 0)                   ; FORM
131   (CALLS1&PUSH 149)                   ; FIFTH
133   (LOAD&PUSH 10)
134   (CONST&PUSH 6)                      ; MCOND
135   (GETVALUE&PUSH 22)                  ; ROP
137   (CONST&PUSH 18)                     ; 6
138   (GETVALUE&PUSH 2)                   ; W
140   (CALLSR&PUSH 2 53)                  ; +
143   (GETVALUE&PUSH 23)                  ; RIGHT
145   (CALL 6 9)                          ; DIMENSION
148   (STORE 9)
150   (CONST&PUSH 18)                     ; 6
151   (GETVALUE&PUSH 2)                   ; W
153   (GETVALUE&PUSH 10)                  ; WIDTH
155   (CALLSR 3 53)                       ; +
158   (SETVALUE 2)                        ; W
160   (LOAD&PUSH 1)
161   (GETVALUE&PUSH 11)                  ; HEIGHT
163   (CALLSR&STORE 1 51 1)               ; MAX
167   (LOAD&PUSH 0)
168   (GETVALUE&PUSH 12)                  ; DEPTH
170   (CALLSR&STORE 1 51 0)               ; MAX
174   L174
174   (GETVALUE 2)                        ; W
176   (SETVALUE 10)                       ; WIDTH
178   (LOAD 1)
179   (SETVALUE 11)                       ; HEIGHT
181   (LOAD 0)
182   (SETVALUE 12)                       ; DEPTH
184   (LOAD 9)
185   (SKIP 2)
187   (UNBIND 2)
189   (SKIP&RET 3)


Disassembly of function #:|(DISPLA-DEF MDO DIM-MDO)-105-1|
(CONST 0) = MDO
(CONST 1) = DIMENSION
(CONST 2) = DIM-MDO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDO
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MDO
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MDO DIM-MDO)-105-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MDO (FORM RESULT) ...)-106|
(CONST 0) = DIM-MDO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MDO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MDO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MDO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MDO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MDO
8     (SKIP&RET 1)


Disassembly of function DIM-MDO
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = #\Space
(CONST 4) = #\R
(CONST 5) = #\O
(CONST 6) = #\F
(CONST 7) = MDO
(CONST 8) = MPAREN
(CONST 9) = 4
(CONST 10) = RIGHT
(CONST 11) = DIMENSION
(CONST 12) = WIDTH
(CONST 13) = HEIGHT
(CONST 14) = DEPTH
(CONST 15) = 1
(CONST 16) = #\M
(CONST 17) = 6
(CONST 18) = #\P
(CONST 19) = #\E
(CONST 20) = #\T
(CONST 21) = #\S
(CONST 22) = #\X
(CONST 23) = #\N
(CONST 24) = #\U
(CONST 25) = #\H
(CONST 26) = MNOT
(CONST 27) = #\L
(CONST 28) = #\I
(CONST 29) = #\W
(CONST 30) = 7
(CONST 31) = 8
(CONST 32) = CHECKBREAK
(CONST 33) = #\D
(CONST 34) = ROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP W DEPTH HEIGHT WIDTH RIGHT FORM)
writes special variables : (DEPTH HEIGHT WIDTH FORM W)
337 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (CONST 1)                           ; 0
4     (BIND 2)                            ; W
6     (CONST&PUSH 1)                      ; 0
7     (CONST&PUSH 1)                      ; 0
8     (NIL&PUSH)
9     (GETVALUE 0)                        ; FORM
11    (CDR)
12    (CAR)
13    (JMPIFNOT L57)
15    (CONST&PUSH 3)                      ; #\Space
16    (CONST&PUSH 4)                      ; #\R
17    (CONST&PUSH 5)                      ; #\O
18    (CONST&PUSH 6)                      ; #\F
19    (LOAD 14)
20    (LIST* 4)
22    (STORE 10)
24    (CONST&PUSH 3)                      ; #\Space
25    (GETVALUE 0)                        ; FORM
27    (CDR)
28    (CAR&PUSH)
29    (LOAD&PUSH 12)
30    (CONST&PUSH 7)                      ; MDO
31    (CONST&PUSH 8)                      ; MPAREN
32    (CONST&PUSH 9)                      ; 4
33    (GETVALUE&PUSH 10)                  ; RIGHT
35    (CALL 6 11)                         ; DIMENSION
38    (CONS)
39    (STORE 10)
41    (CONST&PUSH 9)                      ; 4
42    (GETVALUE&PUSH 12)                  ; WIDTH
44    (CALLSR 2 53)                       ; +
47    (SETVALUE 2)                        ; W
49    (GETVALUE 13)                       ; HEIGHT
51    (STORE 2)
52    (GETVALUE 14)                       ; DEPTH
54    (STORE 1)
55    (T&STORE 0)
57    L57
57    (GETVALUE 0)                        ; FORM
59    (CDR)
60    (CDR)
61    (CAR)
62    (JMPIFNOT L130)
65    (GETVALUE 0)                        ; FORM
67    (CDR)
68    (CDR)
69    (CAR&PUSH)
70    (JMPIFEQTO 15 L130)                 ; 1
73    (CONST&PUSH 3)                      ; #\Space
74    (CONST&PUSH 16)                     ; #\M
75    (CONST&PUSH 5)                      ; #\O
76    (CONST&PUSH 4)                      ; #\R
77    (CONST&PUSH 6)                      ; #\F
78    (LOAD 15)
80    (LIST* 5)
82    (STORE 10)
84    (CONST&PUSH 3)                      ; #\Space
85    (GETVALUE 0)                        ; FORM
87    (CDR)
88    (CDR)
89    (CAR&PUSH)
90    (LOAD&PUSH 12)
91    (CONST&PUSH 7)                      ; MDO
92    (CONST&PUSH 8)                      ; MPAREN
93    (CONST&PUSH 17)                     ; 6
94    (GETVALUE&PUSH 2)                   ; W
96    (CALLSR&PUSH 2 53)                  ; +
99    (CONST&PUSH 1)                      ; 0
100   (CALL 6 11)                         ; DIMENSION
103   (CONS)
104   (STORE 10)
106   (CONST&PUSH 17)                     ; 6
107   (GETVALUE&PUSH 2)                   ; W
109   (GETVALUE&PUSH 12)                  ; WIDTH
111   (CALLSR 3 53)                       ; +
114   (SETVALUE 2)                        ; W
116   (LOAD&PUSH 2)
117   (GETVALUE&PUSH 13)                  ; HEIGHT
119   (CALLSR&STORE 1 51 2)               ; MAX
123   (LOAD&PUSH 1)
124   (GETVALUE&PUSH 14)                  ; DEPTH
126   (CALLSR&STORE 1 51 1)               ; MAX
130   L130
130   (GETVALUE 0)                        ; FORM
132   (CDR)
133   (CDR)
134   (CDR)
135   (SETVALUE 0)                        ; FORM
137   (CAR&PUSH)
138   (JMPIFEQTO 15 L211)                 ; 1
142   (GETVALUE 0)                        ; FORM
144   (CAR)
145   (JMPIF L376)
148   (GETVALUE 0)                        ; FORM
150   (CDR)
151   (CAR)
152   (JMPIFNOT L211)
154   (CONST&PUSH 3)                      ; #\Space
155   (CONST&PUSH 20)                     ; #\T
156   (CONST&PUSH 22)                     ; #\X
157   (CONST&PUSH 19)                     ; #\E
158   (CONST&PUSH 23)                     ; #\N
159   (LOAD 15)
161   (LIST* 5)
163   (STORE 10)
165   (CONST&PUSH 3)                      ; #\Space
166   (GETVALUE 0)                        ; FORM
168   (CDR)
169   (CAR&PUSH)
170   (LOAD&PUSH 12)
171   (CONST&PUSH 7)                      ; MDO
172   (CONST&PUSH 8)                      ; MPAREN
173   (CONST&PUSH 17)                     ; 6
174   (GETVALUE&PUSH 2)                   ; W
176   (CALLSR&PUSH 2 53)                  ; +
179   (CONST&PUSH 1)                      ; 0
180   (CALL 6 11)                         ; DIMENSION
183   (CONS)
184   (STORE 10)
186   (CONST 17)                          ; 6
187   L187
187   (PUSH)
188   (GETVALUE&PUSH 2)                   ; W
190   (GETVALUE&PUSH 12)                  ; WIDTH
192   (CALLSR 3 53)                       ; +
195   (SETVALUE 2)                        ; W
197   (LOAD&PUSH 2)
198   (GETVALUE&PUSH 13)                  ; HEIGHT
200   (CALLSR&STORE 1 51 2)               ; MAX
204   (LOAD&PUSH 1)
205   (GETVALUE&PUSH 14)                  ; DEPTH
207   (CALLSR&STORE 1 51 1)               ; MAX
211   L211
211   (GETVALUE 0)                        ; FORM
213   (CDR)
214   (CDR)
215   (CAR)
216   (JMPIFNOT L277)
218   (CONST&PUSH 3)                      ; #\Space
219   (CONST&PUSH 24)                     ; #\U
220   (CONST&PUSH 4)                      ; #\R
221   (CONST&PUSH 25)                     ; #\H
222   (CONST&PUSH 20)                     ; #\T
223   (LOAD 15)
225   (LIST* 5)
227   (STORE 10)
229   (CONST&PUSH 3)                      ; #\Space
230   (GETVALUE 0)                        ; FORM
232   (CDR)
233   (CDR)
234   (CAR&PUSH)
235   (LOAD&PUSH 12)
236   (CONST&PUSH 7)                      ; MDO
237   (CONST&PUSH 8)                      ; MPAREN
238   (CONST&PUSH 17)                     ; 6
239   (GETVALUE&PUSH 2)                   ; W
241   (CALLSR&PUSH 2 53)                  ; +
244   (CONST&PUSH 1)                      ; 0
245   (CALL 6 11)                         ; DIMENSION
248   (CONS)
249   (STORE 10)
251   (CONST&PUSH 17)                     ; 6
252   (GETVALUE&PUSH 2)                   ; W
254   (GETVALUE&PUSH 12)                  ; WIDTH
256   (CALLSR 3 53)                       ; +
259   (SETVALUE 2)                        ; W
261   (LOAD&PUSH 2)
262   (GETVALUE&PUSH 13)                  ; HEIGHT
264   (CALLSR&STORE 1 51 2)               ; MAX
268   (LOAD&PUSH 1)
269   (GETVALUE&PUSH 14)                  ; DEPTH
271   (CALLSR&STORE 1 51 1)               ; MAX
275   (T&STORE 0)
277   L277
277   (GETVALUE 0)                        ; FORM
279   (CDR)
280   (CDR)
281   (CDR)
282   (CAR)
283   (JMPIFNOT L454)
286   (GETVALUE 0)                        ; FORM
288   (CDR)
289   (CDR)
290   (CDR)
291   (CAR)
292   (JMPIFATOM L306)
294   (GETVALUE 0)                        ; FORM
296   (CDR)
297   (CDR)
298   (CDR)
299   (CAR)
300   (CAR)
301   (CAR&PUSH)
302   (JMPIFEQTO 26 L411)                 ; MNOT
306   L306
306   (CONST&PUSH 3)                      ; #\Space
307   (CONST&PUSH 21)                     ; #\S
308   (CONST&PUSH 21)                     ; #\S
309   (CONST&PUSH 19)                     ; #\E
310   (CONST&PUSH 27)                     ; #\L
311   (CONST&PUSH 23)                     ; #\N
312   (CONST&PUSH 24)                     ; #\U
313   (LOAD 17)
315   (LIST* 7)
317   (STORE 10)
319   (CONST&PUSH 3)                      ; #\Space
320   (GETVALUE 0)                        ; FORM
322   (CDR)
323   (CDR)
324   (CDR)
325   (CAR&PUSH)
326   (LOAD&PUSH 12)
327   (CONST&PUSH 7)                      ; MDO
328   (CONST&PUSH 8)                      ; MPAREN
329   (CONST&PUSH 31)                     ; 8
331   (GETVALUE&PUSH 2)                   ; W
333   (CALLSR&PUSH 2 53)                  ; +
336   (CONST&PUSH 1)                      ; 0
337   (CALL 6 11)                         ; DIMENSION
340   (CONS)
341   (STORE 10)
343   (CONST 31)                          ; 8
345   L345
345   (PUSH)
346   (GETVALUE&PUSH 2)                   ; W
348   (GETVALUE&PUSH 12)                  ; WIDTH
350   (CALLSR 3 53)                       ; +
353   (SETVALUE 2)                        ; W
355   (LOAD&PUSH 2)
356   (GETVALUE&PUSH 13)                  ; HEIGHT
358   (CALLSR&STORE 1 51 2)               ; MAX
362   (LOAD&PUSH 1)
363   (GETVALUE&PUSH 14)                  ; DEPTH
365   (CALLSR&STORE 1 51 1)               ; MAX
369   (LOAD&JMPIFNOT 0 L462)
373   (JMP L457)
376   L376
376   (CONST&PUSH 3)                      ; #\Space
377   (CONST&PUSH 18)                     ; #\P
378   (CONST&PUSH 19)                     ; #\E
379   (CONST&PUSH 20)                     ; #\T
380   (CONST&PUSH 21)                     ; #\S
381   (LOAD 15)
383   (LIST* 5)
385   (STORE 10)
387   (CONST&PUSH 3)                      ; #\Space
388   (GETVALUE 0)                        ; FORM
390   (CAR&PUSH)
391   (LOAD&PUSH 12)
392   (CONST&PUSH 7)                      ; MDO
393   (CONST&PUSH 8)                      ; MPAREN
394   (CONST&PUSH 17)                     ; 6
395   (GETVALUE&PUSH 2)                   ; W
397   (CALLSR&PUSH 2 53)                  ; +
400   (CONST&PUSH 1)                      ; 0
401   (CALL 6 11)                         ; DIMENSION
404   (CONS)
405   (STORE 10)
407   (CONST 17)                          ; 6
408   (JMP L187)
411   L411
411   (CONST&PUSH 3)                      ; #\Space
412   (CONST&PUSH 19)                     ; #\E
413   (CONST&PUSH 27)                     ; #\L
414   (CONST&PUSH 28)                     ; #\I
415   (CONST&PUSH 25)                     ; #\H
416   (CONST&PUSH 29)                     ; #\W
417   (LOAD 16)
419   (LIST* 6)
421   (STORE 10)
423   (CONST&PUSH 3)                      ; #\Space
424   (GETVALUE 0)                        ; FORM
426   (CDR)
427   (CDR)
428   (CDR)
429   (CAR)
430   (CDR)
431   (CAR&PUSH)
432   (LOAD&PUSH 12)
433   (CONST&PUSH 7)                      ; MDO
434   (CONST&PUSH 8)                      ; MPAREN
435   (CONST&PUSH 30)                     ; 7
437   (GETVALUE&PUSH 2)                   ; W
439   (CALLSR&PUSH 2 53)                  ; +
442   (CONST&PUSH 1)                      ; 0
443   (CALL 6 11)                         ; DIMENSION
446   (CONS)
447   (STORE 10)
449   (CONST 30)                          ; 7
451   (JMP L345)
454   L454
454   (LOAD&JMPIFNOT 0 L462)
457   L457
457   (LOAD&PUSH 10)
458   (GETVALUE&PUSH 2)                   ; W
460   (CALL2 32)                          ; CHECKBREAK
462   L462
462   (CONST&PUSH 3)                      ; #\Space
463   (CONST&PUSH 5)                      ; #\O
464   (CONST&PUSH 33)                     ; #\D
466   (LOAD 13)
467   (LIST* 3)
469   (STORE 10)
471   (GETVALUE 0)                        ; FORM
473   (CDR)
474   (CDR)
475   (CDR)
476   (CDR)
477   (CAR&PUSH)
478   (LOAD&PUSH 11)
479   (CONST&PUSH 7)                      ; MDO
480   (GETVALUE&PUSH 34)                  ; ROP
482   (CONST&PUSH 9)                      ; 4
483   (GETVALUE&PUSH 2)                   ; W
485   (CALLSR&PUSH 2 53)                  ; +
488   (GETVALUE&PUSH 10)                  ; RIGHT
490   (CALL 6 11)                         ; DIMENSION
493   (STORE 10)
495   (CONST&PUSH 9)                      ; 4
496   (GETVALUE&PUSH 2)                   ; W
498   (GETVALUE&PUSH 12)                  ; WIDTH
500   (CALLSR 3 53)                       ; +
503   (SETVALUE 12)                       ; WIDTH
505   (LOAD&PUSH 2)
506   (GETVALUE&PUSH 13)                  ; HEIGHT
508   (CALLSR 1 51)                       ; MAX
511   (SETVALUE 13)                       ; HEIGHT
513   (LOAD&PUSH 1)
514   (GETVALUE&PUSH 14)                  ; DEPTH
516   (CALLSR 1 51)                       ; MAX
519   (SETVALUE 14)                       ; DEPTH
521   (LOAD 10)
522   (SKIP 3)
524   (UNBIND 2)
526   (SKIP&RET 3)


Disassembly of function #:|(DISPLA-DEF MDOIN DIM-MDOIN)-107-1|
(CONST 0) = MDOIN
(CONST 1) = DIMENSION
(CONST 2) = DIM-MDOIN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDOIN
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MDOIN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MDOIN DIM-MDOIN)-107-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MDOIN (FORM RESULT) ...)-108|
(CONST 0) = DIM-MDOIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MDOIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MDOIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MDOIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MDOIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MDOIN
8     (SKIP&RET 1)


Disassembly of function DIM-MDOIN
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = #\Space
(CONST 4) = #\R
(CONST 5) = #\O
(CONST 6) = #\F
(CONST 7) = MDO
(CONST 8) = MPAREN
(CONST 9) = 4
(CONST 10) = DIMENSION
(CONST 11) = WIDTH
(CONST 12) = HEIGHT
(CONST 13) = DEPTH
(CONST 14) = #\N
(CONST 15) = #\I
(CONST 16) = #\U
(CONST 17) = #\H
(CONST 18) = #\T
(CONST 19) = 6
(CONST 20) = #\S
(CONST 21) = #\E
(CONST 22) = #\L
(CONST 23) = 8
(CONST 24) = #\D
(CONST 25) = ROP
(CONST 26) = RIGHT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RIGHT ROP W DEPTH HEIGHT WIDTH FORM)
writes special variables : (DEPTH HEIGHT WIDTH FORM W)
179 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (CONST 1)                           ; 0
4     (BIND 2)                            ; W
6     (CONST&PUSH 1)                      ; 0
7     (CONST&PUSH 1)                      ; 0
8     (CONST&PUSH 3)                      ; #\Space
9     (CONST&PUSH 4)                      ; #\R
10    (CONST&PUSH 5)                      ; #\O
11    (CONST&PUSH 6)                      ; #\F
12    (LOAD 13)
13    (LIST* 4)
15    (STORE 9)
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CAR&PUSH)
21    (LOAD&PUSH 10)
22    (CONST&PUSH 7)                      ; MDO
23    (CONST&PUSH 8)                      ; MPAREN
24    (CONST&PUSH 9)                      ; 4
25    (CONST&PUSH 1)                      ; 0
26    (CALL 6 10)                         ; DIMENSION
29    (STORE 9)
31    (CONST&PUSH 9)                      ; 4
32    (GETVALUE&PUSH 11)                  ; WIDTH
34    (CALLSR 2 53)                       ; +
37    (SETVALUE 2)                        ; W
39    (GETVALUE 12)                       ; HEIGHT
41    (STORE 1)
42    (GETVALUE 13)                       ; DEPTH
44    (STORE 0)
45    (CONST&PUSH 3)                      ; #\Space
46    (CONST&PUSH 14)                     ; #\N
47    (CONST&PUSH 15)                     ; #\I
48    (CONST&PUSH 3)                      ; #\Space
49    (LOAD 13)
50    (LIST* 4)
52    (STORE 9)
54    (GETVALUE 0)                        ; FORM
56    (CDR)
57    (CDR)
58    (CAR&PUSH)
59    (LOAD&PUSH 10)
60    (CONST&PUSH 7)                      ; MDO
61    (CONST&PUSH 8)                      ; MPAREN
62    (CONST&PUSH 9)                      ; 4
63    (GETVALUE&PUSH 2)                   ; W
65    (CALLSR&PUSH 2 53)                  ; +
68    (CONST&PUSH 1)                      ; 0
69    (CALL 6 10)                         ; DIMENSION
72    (STORE 9)
74    (CONST&PUSH 9)                      ; 4
75    (GETVALUE&PUSH 2)                   ; W
77    (GETVALUE&PUSH 11)                  ; WIDTH
79    (CALLSR 3 53)                       ; +
82    (SETVALUE 2)                        ; W
84    (LOAD&PUSH 1)
85    (GETVALUE&PUSH 12)                  ; HEIGHT
87    (CALLSR&STORE 1 51 1)               ; MAX
91    (LOAD&PUSH 0)
92    (GETVALUE&PUSH 13)                  ; DEPTH
94    (CALLSR&STORE 1 51 0)               ; MAX
98    (GETVALUE 0)                        ; FORM
100   (CDR)
101   (CDR)
102   (CDR)
103   (CDR)
104   (CDR)
105   (SETVALUE 0)                        ; FORM
107   (CAR)
108   (JMPIFNOT L164)
110   (CONST&PUSH 3)                      ; #\Space
111   (CONST&PUSH 16)                     ; #\U
112   (CONST&PUSH 4)                      ; #\R
113   (CONST&PUSH 17)                     ; #\H
114   (CONST&PUSH 18)                     ; #\T
115   (CONST&PUSH 3)                      ; #\Space
116   (LOAD 15)
118   (LIST* 6)
120   (STORE 9)
122   (GETVALUE 0)                        ; FORM
124   (CAR&PUSH)
125   (LOAD&PUSH 10)
126   (CONST&PUSH 7)                      ; MDO
127   (CONST&PUSH 8)                      ; MPAREN
128   (CONST&PUSH 19)                     ; 6
129   (GETVALUE&PUSH 2)                   ; W
131   (CALLSR&PUSH 2 53)                  ; +
134   (CONST&PUSH 1)                      ; 0
135   (CALL 6 10)                         ; DIMENSION
138   (STORE 9)
140   (CONST&PUSH 19)                     ; 6
141   (GETVALUE&PUSH 2)                   ; W
143   (GETVALUE&PUSH 11)                  ; WIDTH
145   (CALLSR 3 53)                       ; +
148   (SETVALUE 2)                        ; W
150   (LOAD&PUSH 1)
151   (GETVALUE&PUSH 12)                  ; HEIGHT
153   (CALLSR&STORE 1 51 1)               ; MAX
157   (LOAD&PUSH 0)
158   (GETVALUE&PUSH 13)                  ; DEPTH
160   (CALLSR&STORE 1 51 0)               ; MAX
164   L164
164   (GETVALUE 0)                        ; FORM
166   (CDR)
167   (CAR)
168   (JMPIFNOT L227)
170   (CONST&PUSH 3)                      ; #\Space
171   (CONST&PUSH 20)                     ; #\S
172   (CONST&PUSH 20)                     ; #\S
173   (CONST&PUSH 21)                     ; #\E
174   (CONST&PUSH 22)                     ; #\L
175   (CONST&PUSH 14)                     ; #\N
176   (CONST&PUSH 16)                     ; #\U
177   (CONST&PUSH 3)                      ; #\Space
178   (LOAD 17)
180   (LIST* 8)
182   (STORE 9)
184   (GETVALUE 0)                        ; FORM
186   (CDR)
187   (CAR&PUSH)
188   (LOAD&PUSH 10)
189   (CONST&PUSH 7)                      ; MDO
190   (CONST&PUSH 8)                      ; MPAREN
191   (CONST&PUSH 23)                     ; 8
192   (GETVALUE&PUSH 2)                   ; W
194   (CALLSR&PUSH 2 53)                  ; +
197   (CONST&PUSH 1)                      ; 0
198   (CALL 6 10)                         ; DIMENSION
201   (STORE 9)
203   (CONST&PUSH 23)                     ; 8
204   (GETVALUE&PUSH 2)                   ; W
206   (GETVALUE&PUSH 11)                  ; WIDTH
208   (CALLSR 3 53)                       ; +
211   (SETVALUE 2)                        ; W
213   (LOAD&PUSH 1)
214   (GETVALUE&PUSH 12)                  ; HEIGHT
216   (CALLSR&STORE 1 51 1)               ; MAX
220   (LOAD&PUSH 0)
221   (GETVALUE&PUSH 13)                  ; DEPTH
223   (CALLSR&STORE 1 51 0)               ; MAX
227   L227
227   (CONST&PUSH 3)                      ; #\Space
228   (CONST&PUSH 5)                      ; #\O
229   (CONST&PUSH 24)                     ; #\D
230   (CONST&PUSH 3)                      ; #\Space
231   (LOAD 13)
232   (LIST* 4)
234   (STORE 9)
236   (GETVALUE 0)                        ; FORM
238   (CDR)
239   (CDR)
240   (CAR&PUSH)
241   (LOAD&PUSH 10)
242   (CONST&PUSH 7)                      ; MDO
243   (GETVALUE&PUSH 25)                  ; ROP
245   (CONST&PUSH 9)                      ; 4
246   (GETVALUE&PUSH 2)                   ; W
248   (CALLSR&PUSH 2 53)                  ; +
251   (GETVALUE&PUSH 26)                  ; RIGHT
253   (CALL 6 10)                         ; DIMENSION
256   (STORE 9)
258   (CONST&PUSH 9)                      ; 4
259   (GETVALUE&PUSH 2)                   ; W
261   (GETVALUE&PUSH 11)                  ; WIDTH
263   (CALLSR 3 53)                       ; +
266   (SETVALUE 11)                       ; WIDTH
268   (LOAD&PUSH 1)
269   (GETVALUE&PUSH 12)                  ; HEIGHT
271   (CALLSR 1 51)                       ; MAX
274   (SETVALUE 12)                       ; HEIGHT
276   (LOAD&PUSH 0)
277   (GETVALUE&PUSH 13)                  ; DEPTH
279   (CALLSR 1 51)                       ; MAX
282   (SETVALUE 13)                       ; DEPTH
284   (LOAD 9)
285   (SKIP 2)
287   (UNBIND 2)
289   (SKIP&RET 3)


Disassembly of function #:|(DISPLA-DEF MPROGN DIMENSION-MATCH ...)-109-1|
(CONST 0) = MPROGN
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-MATCH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPROGN
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-MATCH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MPROGN DIMENSION-MATCH ...)-109-2|
(CONST 0) = MPROGN
(CONST 1) = DISSYM
(CONST 2) = ((#\() #\))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPROGN
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; ((#\() #\))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MPROGN DIMENSION-MATCH ...)-109-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLIST DIMENSION-MATCH ...)-110-1|
(CONST 0) = MLIST
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-MATCH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLIST
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-MATCH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLIST DIMENSION-MATCH ...)-110-2|
(CONST 0) = MLIST
(CONST 1) = DISSYM
(CONST 2) = ((#\[) #\])
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLIST
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; ((#\[) #\])
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLIST DIMENSION-MATCH ...)-110-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MANGLE DIMENSION-MATCH ...)-111-1|
(CONST 0) = MANGLE
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-MATCH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MANGLE
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-MATCH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MANGLE DIMENSION-MATCH ...)-111-2|
(CONST 0) = MANGLE
(CONST 1) = DISSYM
(CONST 2) = ((#\<) #\>)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MANGLE
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; ((#\<) #\>)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MANGLE DIMENSION-MATCH ...)-111-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MCOMMA DIMENSION-NARY ...)-112-1|
(CONST 0) = MCOMMA
(CONST 1) = DIMENSION
(CONST 2) = DIMENSION-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCOMMA
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIMENSION-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MCOMMA DIMENSION-NARY ...)-112-2|
(CONST 0) = MCOMMA
(CONST 1) = DISSYM
(CONST 2) = (#\, #\Space)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCOMMA
1     (CONST&PUSH 1)                      ; DISSYM
2     (CONST&PUSH 2)                      ; (#\, #\Space)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MCOMMA DIMENSION-NARY ...)-112-3|
(CONST 0) = MCOMMA
(CONST 1) = LBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCOMMA
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MCOMMA DIMENSION-NARY ...)-112-4|
(CONST 0) = MCOMMA
(CONST 1) = RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCOMMA
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MABS DIM-MABS)-113-1|
(CONST 0) = MABS
(CONST 1) = DIMENSION
(CONST 2) = DIM-MABS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MABS
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MABS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MABS DIM-MABS)-113-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MABS (FORM RESULT &AUX ...) ...)-114|
(CONST 0) = DIM-MABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MABS
8     (SKIP&RET 1)


Disassembly of function DIM-MABS
(CONST 0) = FORM
(CONST 1) = MPAREN
(CONST 2) = 0
(CONST 3) = DIMENSION
(CONST 4) = 2
(CONST 5) = WIDTH
(CONST 6) = LINEL
(CONST 7) = 1
(CONST 8) = HEIGHT
(CONST 9) = DEPTH
(CONST 10) = DIMENSION-FUNCTION
(CONST 11) = UPDATE-HEIGHTS
(CONST 12) = D-VBAR
(CONST 13) = $ABSBOXCHAR
(CONST 14) = GETCHARN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ABSBOXCHAR DEPTH HEIGHT LINEL WIDTH FORM)
writes special variable : (WIDTH)
56 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (PUSH-NIL 2)
5     (GETVALUE 0)                        ; FORM
7     (CDR)
8     (CAR&PUSH)
9     (NIL&PUSH)
10    (CONST&PUSH 1)                      ; MPAREN
11    (CONST&PUSH 1)                      ; MPAREN
12    (NIL&PUSH)
13    (CONST&PUSH 2)                      ; 0
14    (CALL 6 3)                          ; DIMENSION
17    (STORE 1)
18    (CONST&PUSH 4)                      ; 2
19    (GETVALUE&PUSH 5)                   ; WIDTH
21    (CALLSR&PUSH 2 53)                  ; +
24    (GETVALUE&PUSH 6)                   ; LINEL
26    (CALLSR&JMPIF 1 48 L85)             ; >
30    (CONST&PUSH 7)                      ; 1
31    (GETVALUE&PUSH 8)                   ; HEIGHT
33    (CALLSR&JMPIFNOT 1 45 L44)          ; =
37    (CONST&PUSH 2)                      ; 0
38    (GETVALUE&PUSH 9)                   ; DEPTH
40    (CALLSR&JMPIF 1 45 L85)             ; =
44    L44
44    (CONST&PUSH 4)                      ; 2
45    (GETVALUE&PUSH 5)                   ; WIDTH
47    (CALLSR 2 53)                       ; +
50    (SETVALUE 5)                        ; WIDTH
52    (GETVALUE&PUSH 8)                   ; HEIGHT
54    (GETVALUE&PUSH 9)                   ; DEPTH
56    (CALL2 11)                          ; UPDATE-HEIGHTS
58    (CONST&PUSH 12)                     ; D-VBAR
59    (GETVALUE&PUSH 8)                   ; HEIGHT
61    (GETVALUE&PUSH 9)                   ; DEPTH
63    (GETVALUE&PUSH 13)                  ; $ABSBOXCHAR
65    (CONST&PUSH 4)                      ; 2
66    (CALL2&PUSH 14)                     ; GETCHARN
68    (LIST 4)
70    (STORE 0)
71    (PUSH)
72    (LOAD&PUSH 2)
73    (LOAD&PUSH 2)
74    (LOAD 9)
75    (CONS&PUSH)
76    (CALLSR 2 35)                       ; NCONC
79    (CONS)
80    L80
80    (SKIP 2)
82    (UNBIND1)
83    (SKIP&RET 3)
85    L85
85    (GETVALUE&PUSH 0)                   ; FORM
87    (LOAD&PUSH 7)
88    (CALL2 10)                          ; DIMENSION-FUNCTION
90    (JMP L80)


Disassembly of function #:|(DISPLA-DEF $MATRIX DIM-$MATRIX)-115-1|
(CONST 0) = $MATRIX
(CONST 1) = DIMENSION
(CONST 2) = DIM-$MATRIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MATRIX
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-$MATRIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF $MATRIX DIM-$MATRIX)-115-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-$MATRIX (FORM RESULT) ...)-116|
(CONST 0) = DIM-$MATRIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-$MATRIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-$MATRIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-$MATRIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-$MATRIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-$MATRIX
8     (SKIP&RET 1)


Disassembly of function DIM-$MATRIX
(CONST 0) = FORM
(CONST 1) = SIMP
(CONST 2) = MEMQ
(CONST 3) = ((MLIST SIMP))
(CONST 4) = MEMALIKE
(CONST 5) = $LISTP
(CONST 6) = DIMENSION-FUNCTION
(CONST 7) = L
(CONST 8) = 0
(CONST 9) = MPAREN
(CONST 10) = DIMENSION
(CONST 11) = HEIGHT
(CONST 12) = DEPTH
(CONST 13) = 14
(CONST 14) = WIDTH
(CONST 15) = CHECKFIT
(CONST 16) = 2
(CONST 17) = QUOT
(CONST 18) = LINEARRAY
(CONST 19) = MATOUT
(CONST 20) = LEVEL
(CONST 21) = COLOUT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LEVEL LINEARRAY WIDTH DEPTH HEIGHT L FORM)
writes special variables : (HEIGHT DEPTH WIDTH L)
193 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (PUSH-NIL 4)
5     (GETVALUE 0)                        ; FORM
7     (CDR)
8     (JMPIFNOT L326)
11    (CONST&PUSH 1)                      ; SIMP
12    (GETVALUE 0)                        ; FORM
14    (CAR)
15    (CDR&PUSH)
16    (CALL2&JMPIFNOT 2 L326)             ; MEMQ
20    (CONST&PUSH 3)                      ; ((MLIST SIMP))
21    (GETVALUE 0)                        ; FORM
23    (CDR&PUSH)
24    (CALL2&JMPIF 4 L326)                ; MEMALIKE
28    (GETVALUE 0)                        ; FORM
30    (CDR&PUSH)
31    (NIL&PUSH)
32    (JMP L312)
35    L35
35    (T&STORE 9)
37    (SKIP 6)
39    (JMP L204)
42    L42
42    (T&STORE 0)
44    (LOAD&JMPIFNOT 0 L280)
48    (JMP L290)
51    L51
51    (LOAD&PUSH 3)
52    (LOAD&PUSH 2)
53    (LOAD&PUSH 4)
54    (LOAD&PUSH 11)
55    (CALL 4 19)                         ; MATOUT
58    (SKIP 4)
60    (JMP L333)
63    L63
63    (SKIP 2)
65    (GETVALUE 0)                        ; FORM
67    (CDR)
68    (CAR)
69    (CDR)
70    (BIND 7)                            ; L
72    (GETVALUE 7)                        ; L
74    (JMPIFNOT L91)
76    L76
76    (NIL&PUSH)
77    (LOAD&CONS&STORE 6)
79    (CONST&PUSH 8)                      ; 0
80    (LOAD&CONS&STORE 4)
82    (GETVALUE 7)                        ; L
84    (CDR)
85    (SETVALUE 7)                        ; L
87    (GETVALUE 7)                        ; L
89    (JMPIF L76)
91    L91
91    (UNBIND1)
92    (GETVALUE 0)                        ; FORM
94    (CDR&PUSH)
95    (CONST&PUSH 8)                      ; 0
96    (CONST&PUSH 8)                      ; 0
97    (LOAD&JMPIF 3 L213)
101   L101
101   (LOAD&JMPIFNOT 2 L213)
105   (LOAD 2)
106   (CAR)
107   (CDR&PUSH)
108   (LOAD&PUSH 7)
109   (LOAD&PUSH 6)
110   (NIL&PUSH)
111   (CONST&PUSH 8)                      ; 0
112   (CONST&PUSH 8)                      ; 0
113   (LOAD&JMPIFNOT 5 L191)
117   L117
117   (LOAD&CAR&PUSH 5)
119   (NIL&PUSH)
120   (CONST&PUSH 9)                      ; MPAREN
121   (CONST&PUSH 9)                      ; MPAREN
122   (NIL&PUSH)
123   (CONST&PUSH 8)                      ; 0
124   (CALL 6 10)                         ; DIMENSION
127   (STORE 2)
128   (LOAD&PUSH 1)
129   (GETVALUE&PUSH 11)                  ; HEIGHT
131   (CALLSR&STORE 1 51 1)               ; MAX
135   (LOAD&PUSH 0)
136   (GETVALUE&PUSH 12)                  ; DEPTH
138   (CALLSR&STORE 1 51 0)               ; MAX
142   (CONST&PUSH 13)                     ; 14
143   (GETVALUE&PUSH 14)                  ; WIDTH
145   (CALLSR&PUSH 2 53)                  ; +
148   (CALL1&JMPIFNOT 15 L35)             ; CHECKFIT
152   (LOAD&PUSH 4)
153   (GETVALUE&PUSH 14)                  ; WIDTH
155   (GETVALUE&PUSH 11)                  ; HEIGHT
157   (GETVALUE&PUSH 12)                  ; DEPTH
159   (LOAD 6)
160   (LIST*&PUSH 3)
162   (LOAD 6)
163   (CAR)
164   (CONS&PUSH)
165   (CALLS1 168)                        ; RPLACA
167   (LOAD&PUSH 3)
168   (GETVALUE&PUSH 14)                  ; WIDTH
170   (LOAD&CAR&PUSH 5)
172   (CALLSR&PUSH 1 51)                  ; MAX
175   (CALLS1 168)                        ; RPLACA
177   (LOAD&CDR&PUSH 5)
179   (LOAD&CDR&PUSH 5)
181   (LOAD&CDR&STORE 5)
183   (POP&STORE 5)
185   (POP&STORE 5)
187   (LOAD&JMPIF 5 L117)
191   L191
191   (LOAD&PUSH 6)
192   (LOAD&PUSH 8)
193   (LOAD&PUSH 3)
194   (CALLSR&STORE 3 53 6)               ; +
198   (LOAD&PUSH 0)
199   (CALLS2&STORE 150 7)                ; 1+
202   (SKIP 6)
204   L204
204   (LOAD&PUSH 0)
205   (LOAD&CONS&STORE 5)
207   (LOAD&CDR&STORE 2)
209   (LOAD&JMPIFNOT 3 L101)
213   L213
213   (CONST 8)                           ; 0
214   (SETVALUE 14)                       ; WIDTH
216   (LOAD&PUSH 4)
217   (LOAD&JMPIFNOT 0 L235)
220   L220
220   (CONST&PUSH 16)                     ; 2
221   (LOAD&CAR&PUSH 1)
223   (GETVALUE&PUSH 14)                  ; WIDTH
225   (CALLSR 3 53)                       ; +
228   (SETVALUE 14)                       ; WIDTH
230   (LOAD&CDR&STORE 0)
232   (LOAD&JMPIF 0 L220)
235   L235
235   (SKIP 1)
237   (LOAD&PUSH 1)
238   (LOAD&PUSH 1)
239   (CALLSR&PUSH 2 53)                  ; +
242   (CALLS2&STORE 151 1)                ; 1-
245   (PUSH)
246   (CONST&PUSH 16)                     ; 2
247   (CALL2 17)                          ; QUOT
249   (SETVALUE 12)                       ; DEPTH
251   (LOAD&PUSH 1)
252   (GETVALUE&PUSH 12)                  ; DEPTH
254   (CALLSR 1 54)                       ; -
257   (SETVALUE 11)                       ; HEIGHT
259   (SKIP 3)
261   (GETVALUE&PUSH 11)                  ; HEIGHT
263   (GETVALUE&PUSH 12)                  ; DEPTH
265   (CALLSR&PUSH 2 53)                  ; +
268   (GETVALUE&PUSH 18)                  ; LINEARRAY
270   (CALLS2&PUSH 71)                    ; LENGTH
272   (CALLSR&JMPIF 1 48 L42)             ; >
277   (LOAD&JMPIF 0 L290)
280   L280
280   (CONST&PUSH 16)                     ; 2
281   (GETVALUE&PUSH 14)                  ; WIDTH
283   (CALLSR&PUSH 2 53)                  ; +
286   (CALL1&JMPIF 15 L51)                ; CHECKFIT
290   L290
290   (LOAD&JMPIF 0 L326)
293   (GETVALUE&PUSH 20)                  ; LEVEL
295   (CONST&PUSH 16)                     ; 2
296   (CALLSR&JMPIFNOT 1 49 L326)         ; <=
300   (LOAD&PUSH 3)
301   (LOAD&PUSH 2)
302   (LOAD&PUSH 10)
303   (CALL 3 21)                         ; COLOUT
306   (SKIP 4)
308   (JMP L333)
310   L310
310   (LOAD&CDR&STORE 1)
312   L312
312   (LOAD&PUSH 1)
313   (CALLS1&JMPIF 146 L63)              ; ENDP
317   (LOAD&CAR&STORE 1 0)
320   (PUSH)
321   (CALL1&JMPIF 5 L310)                ; $LISTP
324   (SKIP 2)
326   L326
326   (GETVALUE&PUSH 0)                   ; FORM
328   (LOAD&PUSH 9)
329   (CALL2 6)                           ; DIMENSION-FUNCTION
331   (SKIP 4)
333   L333
333   (UNBIND1)
334   (SKIP&RET 3)


Disassembly of function #:|(DEFUN MATOUT (DMSTR CSTR RSTR ...) ...)-117|
(CONST 0) = MATOUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MATOUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MATOUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MATOUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MATOUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MATOUT
8     (SKIP&RET 1)


Disassembly of function MATOUT
(CONST 0) = D-MATRIX
(CONST 1) = LEFT
(CONST 2) = HEIGHT
(CONST 3) = DEPTH
(CONST 4) = #\Space
(CONST 5) = 0
(CONST 6) = W
(CONST 7) = 2
(CONST 8) = QUOT
(CONST 9) = WIDTH
(CONST 10) = UPDATE-HEIGHTS
(CONST 11) = RIGHT
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (WIDTH W DEPTH HEIGHT)
writes special variables : (WIDTH W)
100 byte-code instructions:
0     (CONST&PUSH 0)                      ; D-MATRIX
1     (CONST&PUSH 1)                      ; LEFT
2     (GETVALUE&PUSH 2)                   ; HEIGHT
4     (GETVALUE&PUSH 3)                   ; DEPTH
6     (LIST&PUSH 4)
8     (LOAD&CONS&STORE 1)
10    (CONST&PUSH 4)                      ; #\Space
11    (LOAD&CONS&STORE 1)
13    (LOAD&PUSH 4)
14    (LOAD&PUSH 4)
15    (CONST 5)                           ; 0
16    (BIND 6)                            ; W
18    (LOAD&JMPIFNOT 4 L126)
22    L22
22    (LOAD&CAR&PUSH 4)
24    (LOAD&PUSH 8)
25    (LOAD&JMPIFNOT 1 L90)
28    L28
28    (LOAD 1)
29    (CAR)
30    (CDR)
31    (CDR&PUSH)
32    (GETVALUE&PUSH 2)                   ; HEIGHT
34    (LOAD&CAR&PUSH 2)
36    (CALLSR&PUSH 1 54)                  ; -
39    (CALLS1 168)                        ; RPLACA
41    (LOAD 1)
42    (CAR)
43    (CDR&PUSH)
44    (LOAD&CAR&PUSH 6)
46    (LOAD 3)
47    (CAR)
48    (CAR&PUSH)
49    (CALLSR&PUSH 1 54)                  ; -
52    (CONST&PUSH 7)                      ; 2
53    (CALL2&PUSH 8)                      ; QUOT
55    (GETVALUE&PUSH 6)                   ; W
57    (CALLSR&PUSH 1 54)                  ; -
60    (CALLS1 168)                        ; RPLACA
62    (LOAD&CAR&PUSH 5)
64    (LOAD 2)
65    (CAR)
66    (CAR&PUSH)
67    (CALLSR&PUSH 2 53)                  ; +
70    (CONST&PUSH 7)                      ; 2
71    (CALL2 8)                           ; QUOT
73    (SETVALUE 6)                        ; W
75    (LOAD&PUSH 1)
76    (LOAD 2)
77    (CAR)
78    (CDR&PUSH)
79    (CALLS1 168)                        ; RPLACA
81    (LOAD&CDR&PUSH 1)
83    (LOAD&CDR&STORE 1)
85    (POP&STORE 1)
87    (LOAD&JMPIF 1 L28)
90    L90
90    (SKIP 2)
92    (CONST&PUSH 7)                      ; 2
93    (LOAD&CAR&PUSH 4)
95    (GETVALUE&PUSH 6)                   ; W
97    (CALLSR&PUSH 1 54)                  ; -
100   (CALLSR&PUSH 2 53)                  ; +
103   (CONST&PUSH 5)                      ; 0
104   (LIST&PUSH 2)
106   (LOAD&CAR&PUSH 5)
108   (LOAD&PUSH 8)
109   (CALLS1 163)                        ; NRECONC
111   (CONS)
112   (STORE 6)
113   (LOAD&CDR&PUSH 4)
115   (LOAD&CDR&STORE 4)
117   (CONST 5)                           ; 0
118   (SETVALUE 6)                        ; W
120   (POP&STORE 4)
122   (LOAD&JMPIF 4 L22)
126   L126
126   (UNBIND1)
127   (SKIP 2)
129   (CONST&PUSH 7)                      ; 2
130   (GETVALUE&PUSH 9)                   ; WIDTH
132   (CALLSR 2 53)                       ; +
135   (SETVALUE 9)                        ; WIDTH
137   (GETVALUE&PUSH 2)                   ; HEIGHT
139   (GETVALUE&PUSH 3)                   ; DEPTH
141   (CALL2 10)                          ; UPDATE-HEIGHTS
143   (LOAD&CAR&PUSH 1)
145   (LOAD 2)
146   (CAR)
147   (CAR&PUSH)
148   (CALLS2&PUSH 151)                   ; 1-
150   (CALLS1 168)                        ; RPLACA
152   (CONST&PUSH 0)                      ; D-MATRIX
153   (CONST&PUSH 11)                     ; RIGHT
154   (GETVALUE&PUSH 2)                   ; HEIGHT
156   (GETVALUE&PUSH 3)                   ; DEPTH
158   (LIST&PUSH 4)
160   (LOAD 2)
161   (CONS)
162   (SKIP&RET 5)


Disassembly of function #:|(DEFUN COLOUT (DMSTR CSTR RESULT) ...)-118|
(CONST 0) = COLOUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COLOUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COLOUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COLOUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COLOUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COLOUT
8     (SKIP&RET 1)


Disassembly of function COLOUT
(CONST 0) = 0
(CONST 1) = WIDTH
(CONST 2) = 1
(CONST 3) = HEIGHT
(CONST 4) = DEPTH
(CONST 5) = W
(CONST 6) = -1
(CONST 7) = #\Space
(CONST 8) = #\l
(CONST 9) = #\o
(CONST 10) = #\C
(CONST 11) = EXPLODEN
(CONST 12) = #\=
(CONST 13) = 8
(CONST 14) = FLATC
(CONST 15) = 2
(CONST 16) = QUOT
(CONST 17) = D-MATRIX
(CONST 18) = LEFT
(CONST 19) = (0)
(CONST 20) = RIGHT
(CONST 21) = 4
(CONST 22) = UPDATE-HEIGHTS
(CONST 23) = CHECKBREAK
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DEPTH HEIGHT W WIDTH)
writes special variables : (W DEPTH HEIGHT WIDTH)
164 byte-code instructions:
0     (CONST 0)                           ; 0
1     (SETVALUE 1)                        ; WIDTH
3     (CONST 2)                           ; 1
4     (SETVALUE 3)                        ; HEIGHT
6     (CONST 0)                           ; 0
7     (SETVALUE 4)                        ; DEPTH
9     (LOAD&PUSH 3)
10    (LOAD&PUSH 3)
11    (CONST&PUSH 2)                      ; 1
12    (CONST 0)                           ; 0
13    (BIND 5)                            ; W
15    (CONST&PUSH 6)                      ; -1
16    (CONST&PUSH 0)                      ; 0
17    (LOAD&JMPIFNOT 7 L248)
21    L21
21    (CONST&PUSH 7)                      ; #\Space
22    (CONST&PUSH 8)                      ; #\l
23    (CONST&PUSH 9)                      ; #\o
24    (CONST&PUSH 10)                     ; #\C
25    (CONST&PUSH 7)                      ; #\Space
26    (LOAD 14)
27    (LIST* 5)
29    (STORE 9)
31    (LOAD&PUSH 5)
32    (CALL1&PUSH 11)                     ; EXPLODEN
34    (LOAD&PUSH 10)
35    (CALLS1&STORE 163 9)                ; NRECONC
38    (CONST&PUSH 7)                      ; #\Space
39    (CONST&PUSH 12)                     ; #\=
40    (CONST&PUSH 7)                      ; #\Space
41    (LOAD 12)
42    (LIST* 3)
44    (STORE 9)
46    (CONST&PUSH 13)                     ; 8
47    (LOAD&PUSH 6)
48    (CALL1&PUSH 14)                     ; FLATC
50    (GETVALUE&PUSH 1)                   ; WIDTH
52    (CALLSR 3 53)                       ; +
55    (SETVALUE 1)                        ; WIDTH
57    (LOAD&CAR&PUSH 7)
59    (LOAD&JMPIFNOT 0 L138)
63    L63
63    (CONST&PUSH 2)                      ; 1
64    (LOAD&PUSH 3)
65    (LOAD 2)
66    (CAR)
67    (CDR)
68    (CAR&PUSH)
69    (LOAD 3)
70    (CAR)
71    (CDR)
72    (CDR)
73    (CAR&PUSH)
74    (CALLSR&STORE 4 53 2)               ; +
78    (LOAD 0)
79    (CAR)
80    (CDR)
81    (CDR&PUSH)
82    (LOAD&PUSH 3)
83    (LOAD 2)
84    (CAR)
85    (CDR)
86    (CAR&PUSH)
87    (CALLSR&PUSH 1 54)                  ; -
90    (CALLS1 168)                        ; RPLACA
92    (LOAD 0)
93    (CAR)
94    (CDR&PUSH)
95    (LOAD&CAR&PUSH 8)
97    (LOAD 2)
98    (CAR)
99    (CAR&PUSH)
100   (CALLSR&PUSH 1 54)                  ; -
103   (CONST&PUSH 15)                     ; 2
104   (CALL2&PUSH 16)                     ; QUOT
106   (GETVALUE&PUSH 5)                   ; W
108   (CALLSR&PUSH 1 54)                  ; -
111   (CALLS1 168)                        ; RPLACA
113   (LOAD&CAR&PUSH 7)
115   (LOAD 1)
116   (CAR)
117   (CAR&PUSH)
118   (CALLSR&PUSH 2 53)                  ; +
121   (CONST&PUSH 15)                     ; 2
122   (CALL2 16)                          ; QUOT
124   (SETVALUE 5)                        ; W
126   (LOAD&PUSH 0)
127   (LOAD 1)
128   (CAR)
129   (CDR&PUSH)
130   (CALLS1 168)                        ; RPLACA
132   (LOAD&CDR&STORE 0)
134   (LOAD&JMPIF 0 L63)
138   L138
138   (SKIP 1)
140   (LOAD&PUSH 1)
141   (CONST&PUSH 15)                     ; 2
142   (CALL2 16)                          ; QUOT
144   (STORE 0)
145   (LOAD&PUSH 1)
146   (LOAD&PUSH 1)
147   (CALLSR&STORE 1 54 1)               ; -
151   (CONST&PUSH 17)                     ; D-MATRIX
152   (CONST&PUSH 18)                     ; LEFT
153   (LOAD&PUSH 3)
154   (LOAD&PUSH 3)
155   (LIST&PUSH 4)
157   (LOAD&CONS&STORE 9)
159   (CONST&PUSH 7)                      ; #\Space
160   (LOAD&CONS&STORE 9)
162   (CONST&PUSH 0)                      ; 0
163   (LOAD&PUSH 1)
164   (CALLSR&PUSH 0 54)                  ; -
167   (LOAD&CAR&PUSH 9)
169   (CALLS2 73)                         ; NREVERSE
171   (LIST*&PUSH 2)
173   (LOAD&CONS&STORE 9)
175   (LOAD&CAR&PUSH 6)
177   (GETVALUE&PUSH 5)                   ; W
179   (CALLSR&PUSH 1 54)                  ; -
182   (CALLS2&PUSH 150)                   ; 1+
184   (CONST 19)                          ; (0)
185   (CONS&PUSH)
186   (LOAD&CONS&STORE 9)
188   (CONST&PUSH 17)                     ; D-MATRIX
189   (CONST&PUSH 20)                     ; RIGHT
190   (LOAD&PUSH 3)
191   (LOAD&PUSH 3)
192   (LIST&PUSH 4)
194   (LOAD&CONS&STORE 9)
196   (CONST&PUSH 21)                     ; 4
197   (LOAD&CAR&PUSH 7)
199   (GETVALUE&PUSH 1)                   ; WIDTH
201   (CALLSR 3 53)                       ; +
204   (SETVALUE 1)                        ; WIDTH
206   (LOAD&PUSH 1)
207   (GETVALUE&PUSH 3)                   ; HEIGHT
209   (CALLSR 1 51)                       ; MAX
212   (SETVALUE 3)                        ; HEIGHT
214   (LOAD&PUSH 0)
215   (GETVALUE&PUSH 4)                   ; DEPTH
217   (CALLSR 1 51)                       ; MAX
220   (SETVALUE 4)                        ; DEPTH
222   (LOAD&PUSH 1)
223   (LOAD&PUSH 1)
224   (CALL2 22)                          ; UPDATE-HEIGHTS
226   (LOAD&PUSH 9)
227   (GETVALUE&PUSH 1)                   ; WIDTH
229   (CALL2 23)                          ; CHECKBREAK
231   (LOAD&CDR&PUSH 7)
233   (LOAD&CDR&STORE 7)
235   (LOAD&INC&STORE 6)
237   (CONST 0)                           ; 0
238   (SETVALUE 5)                        ; W
240   (CONST 6)                           ; -1
241   (STORE 2)
242   (POP&STORE 7)
244   (LOAD&JMPIF 7 L21)
248   L248
248   (SKIP 2)
250   (UNBIND1)
251   (SKIP 3)
253   (LOAD 1)
254   (SKIP&RET 4)


Disassembly of function #:|(DISPLA-DEF MBOX DIM-MBOX)-119-1|
(CONST 0) = MBOX
(CONST 1) = DIMENSION
(CONST 2) = DIM-MBOX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MBOX
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MBOX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MBOX DIM-MBOX)-119-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MBOX (FORM RESULT &AUX ...) ...)-120|
(CONST 0) = DIM-MBOX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MBOX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MBOX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MBOX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MBOX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MBOX
8     (SKIP&RET 1)


Disassembly of function DIM-MBOX
(CONST 0) = FORM
(CONST 1) = MPAREN
(CONST 2) = 0
(CONST 3) = DIMENSION
(CONST 4) = 2
(CONST 5) = WIDTH
(CONST 6) = CHECKFIT
(CONST 7) = ($BOX)
(CONST 8) = DIMENSION-FUNCTION
(CONST 9) = D-BOX
(CONST 10) = HEIGHT
(CONST 11) = DEPTH
(CONST 12) = UPDATE-HEIGHTS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DEPTH HEIGHT WIDTH FORM)
writes special variables : (DEPTH HEIGHT WIDTH)
51 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; FORM
6     (CDR)
7     (CAR&PUSH)
8     (NIL&PUSH)
9     (CONST&PUSH 1)                      ; MPAREN
10    (CONST&PUSH 1)                      ; MPAREN
11    (NIL&PUSH)
12    (CONST&PUSH 2)                      ; 0
13    (CALL 6 3)                          ; DIMENSION
16    (STORE 0)
17    (CONST&PUSH 4)                      ; 2
18    (GETVALUE&PUSH 5)                   ; WIDTH
20    (CALLSR&PUSH 2 53)                  ; +
23    (CALL1&JMPIFNOT 6 L72)              ; CHECKFIT
26    (CONST&PUSH 9)                      ; D-BOX
27    (GETVALUE&PUSH 10)                  ; HEIGHT
29    (GETVALUE&PUSH 11)                  ; DEPTH
31    (GETVALUE&PUSH 5)                   ; WIDTH
33    (LOAD&PUSH 4)
34    (CALLS2&PUSH 73)                    ; NREVERSE
36    (LIST&PUSH 5)
38    (LOAD&CONS&STORE 5)
40    (CONST&PUSH 4)                      ; 2
41    (GETVALUE&PUSH 5)                   ; WIDTH
43    (CALLSR 2 53)                       ; +
46    (SETVALUE 5)                        ; WIDTH
48    (GETVALUE&PUSH 10)                  ; HEIGHT
50    (CALLS2 150)                        ; 1+
52    (SETVALUE 10)                       ; HEIGHT
54    (GETVALUE&PUSH 11)                  ; DEPTH
56    (CALLS2 150)                        ; 1+
58    (SETVALUE 11)                       ; DEPTH
60    (GETVALUE&PUSH 10)                  ; HEIGHT
62    (GETVALUE&PUSH 11)                  ; DEPTH
64    (CALL2 12)                          ; UPDATE-HEIGHTS
66    (LOAD 5)
67    L67
67    (SKIP 1)
69    (UNBIND1)
70    (SKIP&RET 3)
72    L72
72    (CONST&PUSH 7)                      ; ($BOX)
73    (GETVALUE 0)                        ; FORM
75    (CDR)
76    (CONS&PUSH)
77    (LOAD&PUSH 6)
78    (CALL2 8)                           ; DIMENSION-FUNCTION
80    (JMP L67)


Disassembly of function #:|(DISPLA-DEF MLABOX DIM-MLABOX)-121-1|
(CONST 0) = MLABOX
(CONST 1) = DIMENSION
(CONST 2) = DIM-MLABOX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLABOX
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MLABOX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLABOX DIM-MLABOX)-121-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MLABOX (FORM RESULT) ...)-122|
(CONST 0) = DIM-MLABOX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MLABOX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MLABOX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MLABOX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MLABOX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MLABOX
8     (SKIP&RET 1)


Disassembly of function DIM-MLABOX
(CONST 0) = FORM
(CONST 1) = MPAREN
(CONST 2) = 0
(CONST 3) = DIMENSION
(CONST 4) = 2
(CONST 5) = WIDTH
(CONST 6) = CHECKFIT
(CONST 7) = ($BOX)
(CONST 8) = DIMENSION-FUNCTION
(CONST 9) = HEIGHT
(CONST 10) = DEPTH
(CONST 11) = $BOXCHAR
(CONST 12) = GETCHARN
(CONST 13) = MAKSTRING
(CONST 14) = L
(CONST 15) = 1
(CONST 16) = W
(CONST 17) = D-HBAR
(CONST 18) = D-VBAR
(CONST 19) = (-1 0)
(CONST 20) = UPDATE-HEIGHTS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L W $BOXCHAR DEPTH HEIGHT WIDTH FORM)
writes special variables : (L W DEPTH HEIGHT WIDTH)
157 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (PUSH-NIL 2)
5     (GETVALUE 0)                        ; FORM
7     (CDR)
8     (CAR&PUSH)
9     (NIL&PUSH)
10    (CONST&PUSH 1)                      ; MPAREN
11    (CONST&PUSH 1)                      ; MPAREN
12    (NIL&PUSH)
13    (CONST&PUSH 2)                      ; 0
14    (CALL 6 3)                          ; DIMENSION
17    (STORE 1)
18    (CONST&PUSH 4)                      ; 2
19    (GETVALUE&PUSH 5)                   ; WIDTH
21    (CALLSR&PUSH 2 53)                  ; +
24    (CALL1&JMPIFNOT 6 L63)              ; CHECKFIT
27    (CONST&PUSH 4)                      ; 2
28    (GETVALUE&PUSH 5)                   ; WIDTH
30    (CALLSR 2 53)                       ; +
33    (SETVALUE 5)                        ; WIDTH
35    (GETVALUE&PUSH 9)                   ; HEIGHT
37    (CALLS2 150)                        ; 1+
39    (SETVALUE 9)                        ; HEIGHT
41    (GETVALUE&PUSH 10)                  ; DEPTH
43    (CALLS2 150)                        ; 1+
45    (SETVALUE 10)                       ; DEPTH
47    (GETVALUE&PUSH 11)                  ; $BOXCHAR
49    (CONST&PUSH 4)                      ; 2
50    (CALL2 12)                          ; GETCHARN
52    (STORE 0)
53    (NIL&PUSH)
54    (GETVALUE 0)                        ; FORM
56    (CDR)
57    (CDR)
58    (CAR&PUSH)
59    (CALL1&PUSH 13)                     ; MAKSTRING
61    (JMP L110)
63    L63
63    (CONST&PUSH 7)                      ; ($BOX)
64    (GETVALUE 0)                        ; FORM
66    (CDR)
67    (CONS&PUSH)
68    (LOAD&PUSH 7)
69    (CALL2 8)                           ; DIMENSION-FUNCTION
71    (SKIP 2)
73    (JMP L258)
76    L76
76    (CONST&PUSH 17)                     ; D-HBAR
77    (GETVALUE&PUSH 5)                   ; WIDTH
79    (GETVALUE&PUSH 16)                  ; W
81    (CALLSR&PUSH 1 54)                  ; -
84    (LOAD&PUSH 11)
85    (LIST&PUSH 3)
87    (LOAD 3)
88    (CONS)
89    (JMP L174)
92    L92
92    (LOAD&CAR&PUSH 0)
94    (LOAD 0)
95    (BIND 14)                           ; L
97    (GETVALUE&PUSH 14)                  ; L
99    (CONST&PUSH 15)                     ; 1
100   (CALL2 12)                          ; GETCHARN
102   (UNBIND1)
103   (PUSH)
104   (LOAD&CONS&STORE 2)
106   (SKIP 1)
108   (LOAD&CDR&STORE 0)
110   L110
110   (LOAD&PUSH 0)
111   (CALLS1&JMPIFNOT 146 L92)           ; ENDP
114   (SKIP 1)
116   (LOAD&PUSH 0)
117   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
119   (SKIP 1)
121   (BIND 14)                           ; L
123   (CONST 2)                           ; 0
124   (BIND 16)                           ; W
126   (NIL&PUSH)
127   (GETVALUE 14)                       ; L
129   (JMPIFNOT L159)
131   L131
131   (GETVALUE&PUSH 5)                   ; WIDTH
133   (GETVALUE&PUSH 16)                  ; W
135   (CALLSR&JMPIF 1 45 L159)            ; =
139   (GETVALUE 14)                       ; L
141   (CAR&PUSH)
142   (LOAD&CONS&STORE 0)
144   (GETVALUE&PUSH 16)                  ; W
146   (CALLS2 150)                        ; 1+
148   (SETVALUE 16)                       ; W
150   (GETVALUE 14)                       ; L
152   (CDR)
153   (SETVALUE 14)                       ; L
155   (GETVALUE 14)                       ; L
157   (JMPIF L131)
159   L159
159   (CONST&PUSH 2)                      ; 0
160   (GETVALUE&PUSH 9)                   ; HEIGHT
162   (CALLS2&PUSH 151)                   ; 1-
164   (GETVALUE&PUSH 16)                  ; W
166   (GETVALUE&PUSH 5)                   ; WIDTH
168   (CALLSR&JMPIF 1 47 L76)             ; <
173   (LOAD 2)
174   L174
174   (CONS)
175   (CONS)
176   (SKIP 1)
178   (UNBIND 2)
180   (PUSH)
181   (LOAD&CONS&STORE 6)
183   (LOAD&PUSH 1)
184   (CONST&PUSH 18)                     ; D-VBAR
185   (GETVALUE&PUSH 9)                   ; HEIGHT
187   (CALLS2&PUSH 151)                   ; 1-
189   (GETVALUE&PUSH 10)                  ; DEPTH
191   (CALLS2&PUSH 151)                   ; 1-
193   (LOAD&PUSH 4)
194   (LIST&PUSH 4)
196   (GETVALUE&PUSH 5)                   ; WIDTH
198   (CALLSR&PUSH 0 54)                  ; -
201   (CONST&PUSH 2)                      ; 0
202   (LIST&PUSH 2)
204   (LOAD 9)
205   (LIST*&PUSH 2)
207   (CALLSR&STORE 2 35 6)               ; NCONC
211   (CONST&PUSH 15)                     ; 1
212   (GETVALUE&PUSH 5)                   ; WIDTH
214   (CALLSR&PUSH 1 54)                  ; -
217   (GETVALUE&PUSH 10)                  ; DEPTH
219   (CALLSR&PUSH 0 54)                  ; -
222   (CONST&PUSH 17)                     ; D-HBAR
223   (GETVALUE&PUSH 5)                   ; WIDTH
225   (LOAD&PUSH 4)
226   (LIST&PUSH 3)
228   (LIST&PUSH 3)
230   (LOAD&CONS&STORE 6)
232   (CONST&PUSH 18)                     ; D-VBAR
233   (GETVALUE&PUSH 9)                   ; HEIGHT
235   (CALLS2&PUSH 151)                   ; 1-
237   (GETVALUE&PUSH 10)                  ; DEPTH
239   (CALLS2&PUSH 151)                   ; 1-
241   (LOAD&PUSH 3)
242   (LIST&PUSH 4)
244   (CONST&PUSH 19)                     ; (-1 0)
245   (LOAD 8)
246   (LIST* 2)
248   (STORE 6)
249   (GETVALUE&PUSH 9)                   ; HEIGHT
251   (GETVALUE&PUSH 10)                  ; DEPTH
253   (CALL2 20)                          ; UPDATE-HEIGHTS
255   (LOAD 6)
256   (SKIP 2)
258   L258
258   (UNBIND1)
259   (SKIP&RET 3)


Disassembly of function #:|(DISPLA-DEF MTEXT DIM-MTEXT ...)-123-1|
(CONST 0) = MTEXT
(CONST 1) = DIMENSION
(CONST 2) = DIM-MTEXT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTEXT
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MTEXT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MTEXT DIM-MTEXT ...)-123-3|
(CONST 0) = MTEXT
(CONST 1) = LBP
(CONST 2) = 1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTEXT
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 1
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MTEXT DIM-MTEXT ...)-123-4|
(CONST 0) = MTEXT
(CONST 1) = RBP
(CONST 2) = 1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTEXT
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 1
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MTEXT (FORM RESULT) ...)-124|
(CONST 0) = DIM-MTEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MTEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MTEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MTEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MTEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MTEXT
8     (SKIP&RET 1)


Disassembly of function DIM-MTEXT
(CONST 0) = FORM
(CONST 1) = LOP
(CONST 2) = ROP
(CONST 3) = 0
(CONST 4) = DIMENSION
(CONST 5) = DIMENSION-NARY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP LOP FORM)
23 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (CDR)
7     (JMPIFNOT L17)
9     (GETVALUE&PUSH 0)                   ; FORM
11    (LOAD&PUSH 5)
12    (CALL2 5)                           ; DIMENSION-NARY
14    L14
14    (UNBIND1)
15    (SKIP&RET 3)
17    L17
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CAR&PUSH)
21    (LOAD&PUSH 5)
22    (GETVALUE&PUSH 1)                   ; LOP
24    (GETVALUE&PUSH 2)                   ; ROP
26    (CONST&PUSH 3)                      ; 0
27    (CONST&PUSH 3)                      ; 0
28    (CALL 6 4)                          ; DIMENSION
31    (JMP L14)


Disassembly of function #:|(DISPLA-DEF MLABLE DIM-MLABEL ...)-125-1|
(CONST 0) = MLABLE
(CONST 1) = DIMENSION
(CONST 2) = DIM-MLABEL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLABLE
1     (CONST&PUSH 1)                      ; DIMENSION
2     (CONST&PUSH 2)                      ; DIM-MLABEL
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLABLE DIM-MLABEL ...)-125-3|
(CONST 0) = MLABLE
(CONST 1) = LBP
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLABLE
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 0
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DISPLA-DEF MLABLE DIM-MLABEL ...)-125-4|
(CONST 0) = MLABLE
(CONST 1) = RBP
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLABLE
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 0
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIM-MLABEL (FORM RESULT) ...)-126|
(CONST 0) = DIM-MLABEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIM-MLABEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIM-MLABEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIM-MLABEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIM-MLABEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIM-MLABEL
8     (SKIP&RET 1)


Disassembly of function DIM-MLABEL
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = W
(CONST 3) = MRATP
(CONST 4) = DIMENSION-PAREN
(CONST 5) = 4
(CONST 6) = WIDTH
(CONST 7) = HEIGHT
(CONST 8) = DEPTH
(CONST 9) = #\Space
(CONST 10) = LINEL
(CONST 11) = LEVEL
(CONST 12) = CHECKBREAK
(CONST 13) = MLABLE
(CONST 14) = ROP
(CONST 15) = RIGHT
(CONST 16) = DIMENSION
(CONST 17) = $LEFTJUST
(CONST 18) = BKPTOUT
(CONST 19) = 2
(CONST 20) = QUOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BKPTOUT $LEFTJUST RIGHT ROP W LINEL DEPTH HEIGHT WIDTH MRATP FORM)
writes special variables : (DEPTH HEIGHT WIDTH W)
110 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (CONST 1)                           ; 0
5     (BIND 2)                            ; W
7     (CONST&PUSH 1)                      ; 0
8     (CONST&PUSH 1)                      ; 0
9     (GETVALUE 0)                        ; FORM
11    (CDR)
12    (CAR)
13    (JMPIFNOT L155)
16    (GETVALUE 3)                        ; MRATP
18    (JMPIF L163)
21    (CONST&PUSH 9)                      ; #\Space
22    (GETVALUE 0)                        ; FORM
24    (CDR)
25    (CAR&PUSH)
26    (LOAD&PUSH 12)
27    (CALL2 4)                           ; DIMENSION-PAREN
29    (CONS)
30    (STORE 10)
32    (GETVALUE&PUSH 6)                   ; WIDTH
34    (CALLS2 150)                        ; 1+
36    L36
36    (SETVALUE 2)                        ; W
38    (GETVALUE 7)                        ; HEIGHT
40    (STORE 1)
41    (GETVALUE 8)                        ; DEPTH
43    (STORE 0)
44    L44
44    (GETVALUE 10)                       ; LINEL
46    (BIND 11)                           ; LEVEL
48    (LOAD&PUSH 13)
49    (GETVALUE&PUSH 2)                   ; W
51    (CALL2 12)                          ; CHECKBREAK
53    (UNBIND1)
54    (CONST&PUSH 1)                      ; 0
55    (CONST&PUSH 1)                      ; 0
56    (LIST 2)
58    (STORE 5)
59    (GETVALUE 0)                        ; FORM
61    (CDR)
62    (CDR)
63    (CAR&PUSH)
64    (LOAD&PUSH 6)
65    (LOAD 12)
66    (CONS&PUSH)
67    (CONST&PUSH 13)                     ; MLABLE
68    (GETVALUE&PUSH 14)                  ; ROP
70    (GETVALUE&PUSH 2)                   ; W
72    (GETVALUE&PUSH 15)                  ; RIGHT
74    (CALL 6 16)                         ; DIMENSION
77    (STORE 10)
79    (GETVALUE 17)                       ; $LEFTJUST
81    (JMPIF L121)
83    (CONST&PUSH 1)                      ; 0
84    (GETVALUE&PUSH 18)                  ; BKPTOUT
86    (CALLSR&JMPIFNOT 1 45 L121)         ; =
90    (LOAD&PUSH 5)
91    (CONST&PUSH 1)                      ; 0
92    (GETVALUE&PUSH 10)                  ; LINEL
94    (GETVALUE&PUSH 6)                   ; WIDTH
96    (CALLSR&PUSH 1 54)                  ; -
99    (CONST&PUSH 19)                     ; 2
100   (CALL2&PUSH 20)                     ; QUOT
102   (GETVALUE&PUSH 2)                   ; W
104   (CALLSR&PUSH 1 54)                  ; -
107   (CALLSR&PUSH 1 51)                  ; MAX
110   (CALLS1 168)                        ; RPLACA
112   (LOAD&CAR&PUSH 5)
114   (GETVALUE&PUSH 6)                   ; WIDTH
116   (CALLSR 2 53)                       ; +
119   (SETVALUE 6)                        ; WIDTH
121   L121
121   (GETVALUE&PUSH 2)                   ; W
123   (GETVALUE&PUSH 6)                   ; WIDTH
125   (CALLSR 2 53)                       ; +
128   (SETVALUE 6)                        ; WIDTH
130   (LOAD&PUSH 1)
131   (GETVALUE&PUSH 7)                   ; HEIGHT
133   (CALLSR 1 51)                       ; MAX
136   (SETVALUE 7)                        ; HEIGHT
138   (LOAD&PUSH 0)
139   (GETVALUE&PUSH 8)                   ; DEPTH
141   (CALLSR 1 51)                       ; MAX
144   (SETVALUE 8)                        ; DEPTH
146   (LOAD 10)
147   (SKIP 2)
149   (UNBIND1)
150   (SKIP 1)
152   (UNBIND1)
153   (SKIP&RET 3)
155   L155
155   (CONST 1)                           ; 0
156   (SETVALUE 2)                        ; W
158   (STORE 1)
159   (STORE 0)
160   (JMP L44)
163   L163
163   (PUSH)
164   (GETVALUE 0)                        ; FORM
166   (CDR)
167   (CAR&PUSH)
168   (LOAD&PUSH 12)
169   (CALL2&PUSH 4)                      ; DIMENSION-PAREN
171   (CALLSR&STORE 2 34 10)              ; APPEND
175   (CONST&PUSH 5)                      ; 4
176   (GETVALUE&PUSH 6)                   ; WIDTH
178   (CALLSR 2 53)                       ; +
181   (JMP L36)


Disassembly of function #:|(DEFPROP MPAREN -1 ...)-127|
(CONST 0) = MPAREN
(CONST 1) = LBP
(CONST 2) = -1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPAREN
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; -1
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MPAREN -1 ...)-128|
(CONST 0) = MPAREN
(CONST 1) = RBP
(CONST 2) = -1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPAREN
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; -1
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN CHECKRAT (FORM) ...)-129|
(CONST 0) = CHECKRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKRAT
8     (SKIP&RET 1)


Disassembly of function CHECKRAT
(CONST 0) = FORM
(CONST 1) = MRAT
(CONST 2) = TRUNC
(CONST 3) = MEMQ
(CONST 4) = (#\Space #\/ #\T #\/)
(CONST 5) = (#\Space #\/ #\R #\/)
(CONST 6) = MPOIS
(CONST 7) = (#\Space #\/ #\P #\/)
(CONST 8) = L
(CONST 9) = "~S has an atomic cdr - DISPLAY"
(CONST 10) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L FORM)
writes special variables : (FORM L)
69 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (JMPIFATOM L63)
7     (GETVALUE 0)                        ; FORM
9     (CAR)
10    (JMPIFATOM L19)
12    (GETVALUE 0)                        ; FORM
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFEQTO 1 L69)                   ; MRAT
19    L19
19    (GETVALUE 0)                        ; FORM
21    (CAR)
22    (JMPIFATOM L31)
24    (GETVALUE 0)                        ; FORM
26    (CAR)
27    (CAR&PUSH)
28    (JMPIFEQTO 6 L80)                   ; MPOIS
31    L31
31    (GETVALUE 0)                        ; FORM
33    (CDR)
34    (BIND 8)                            ; L
36    (GETVALUE 8)                        ; L
38    (JMPIFNOT L58)
40    L40
40    (GETVALUE 8)                        ; L
42    (JMPIFCONSP L83)
44    (CONST&PUSH 9)                      ; "~S has an atomic cdr - DISPLAY"
45    (GETVALUE&PUSH 0)                   ; FORM
47    (CALL2 10)                          ; MERROR
49    L49
49    (GETVALUE 8)                        ; L
51    (CDR)
52    (SETVALUE 8)                        ; L
54    (GETVALUE 8)                        ; L
56    (JMPIF L40)
58    L58
58    (NIL)
59    (UNBIND1)
60    L60
60    (UNBIND1)
61    (SKIP&RET 2)
63    L63
63    (NIL)
64    (JMP L60)
66    L66
66    (CONST 4)                           ; (#\Space #\/ #\T #\/)
67    (JMP L60)
69    L69
69    (CONST&PUSH 2)                      ; TRUNC
70    (GETVALUE 0)                        ; FORM
72    (CAR)
73    (CDR&PUSH)
74    (CALL2&JMPIF 3 L66)                 ; MEMQ
77    (CONST 5)                           ; (#\Space #\/ #\R #\/)
78    (JMP L60)
80    L80
80    (CONST 7)                           ; (#\Space #\/ #\P #\/)
81    (JMP L60)
83    L83
83    (GETVALUE 8)                        ; L
85    (CAR&PUSH)
86    (JSR L0)
89    (SETVALUE 0)                        ; FORM
91    (JMPIFNOT L49)
93    (UNBIND1)
94    (JMP L60)


Disassembly of function #:|(DEFUN CHECKFIT (W) ...)-130|
(CONST 0) = CHECKFIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKFIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKFIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKFIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKFIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKFIT
8     (SKIP&RET 1)


Disassembly of function CHECKFIT
(CONST 0) = W
(CONST 1) = BREAK
(CONST 2) = RIGHT
(CONST 3) = 1
(CONST 4) = BKPTWD
(CONST 5) = LINEL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LINEL BKPTWD RIGHT W BREAK)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; W
3     (GETVALUE 1)                        ; BREAK
5     (NOT)
6     (JMPIF1 L28)
8     (GETVALUE&PUSH 0)                   ; W
10    (GETVALUE&PUSH 1)                   ; BREAK
12    (GETVALUE&PUSH 2)                   ; RIGHT
14    (CONST&PUSH 3)                      ; 1
15    (CALLSR&PUSH 4 53)                  ; +
18    (GETVALUE&PUSH 4)                   ; BKPTWD
20    (CALLSR&PUSH 1 54)                  ; -
23    (GETVALUE&PUSH 5)                   ; LINEL
25    (CALLSR 1 49)                       ; <=
28    L28
28    (UNBIND1)
29    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CHECKBREAK (RESULT W) ...)-131|
(CONST 0) = CHECKBREAK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECKBREAK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECKBREAK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECKBREAK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECKBREAK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECKBREAK
8     (SKIP&RET 1)


Disassembly of function CHECKBREAK
(CONST 0) = W
(CONST 1) = BREAK
(CONST 2) = BKPTOUT
(CONST 3) = LINEL
(CONST 4) = BKPT
(CONST 5) = "Expression is too wide to be displayed."
(CONST 6) = MERROR
(CONST 7) = L
(CONST 8) = "CHECKBREAK not found in DISPLAY"
(CONST 9) = 0
(CONST 10) = OUTPUT
(CONST 11) = ^W
(CONST 12) = MORE-^W
(CONST 13) = MTERPRI
(CONST 14) = LINES
(CONST 15) = BKPTWD
(CONST 16) = MAXHT
(CONST 17) = BKPTHT
(CONST 18) = MAXDP
(CONST 19) = BKPTDP
(CONST 20) = LEVEL
(CONST 21) = BKPTLEVEL
(CONST 22) = 1
(CONST 23) = 2
(CONST 24) = QUOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(BKPTDP BKPTHT MAXDP MAXHT LINES MORE-^W ^W L BKPTWD BKPTLEVEL LEVEL BKPT LINEL
 BKPTOUT W BREAK)
writes special variables : (MAXDP MAXHT BKPTLEVEL BKPTDP BKPTHT BKPTWD BKPTOUT BKPT LINES L W)
111 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; W
3     (GETVALUE 1)                        ; BREAK
5     (NOT)
6     (JMPIF1 L61)
8     (GETVALUE&PUSH 0)                   ; W
10    (GETVALUE&PUSH 1)                   ; BREAK
12    (CALLSR 2 53)                       ; +
15    (SETVALUE 0)                        ; W
17    (PUSH)
18    (GETVALUE&PUSH 2)                   ; BKPTOUT
20    (CALLSR&PUSH 1 54)                  ; -
23    (GETVALUE&PUSH 3)                   ; LINEL
25    (CALLSR&JMPIF 1 48 L64)             ; >
29    (GETVALUE 4)                        ; BKPT
31    (JMPIFNOT L161)
34    (GETVALUE&PUSH 20)                  ; LEVEL
36    (GETVALUE&PUSH 21)                  ; BKPTLEVEL
38    (CALLSR&JMPIF 1 49 L161)            ; <=
43    (GETVALUE&PUSH 3)                   ; LINEL
45    (CONST&PUSH 23)                     ; 2
46    (CALL2&PUSH 24)                     ; QUOT
48    (GETVALUE&PUSH 15)                  ; BKPTWD
50    (GETVALUE&PUSH 2)                   ; BKPTOUT
52    (CALLSR&PUSH 1 54)                  ; -
55    (CALLSR&JMPIF 1 48 L161)            ; >
60    (NIL)
61    L61
61    (UNBIND1)
62    (SKIP&RET 3)
64    L64
64    (GETVALUE 4)                        ; BKPT
66    (JMPIFNOT L73)
68    (LOAD&PUSH 5)
69    (GETVALUE 4)                        ; BKPT
71    (JMPIFNOTEQ L76)
73    L73
73    (CONST&PUSH 5)                      ; "Expression is too wide to be displayed."
74    (CALL1 6)                           ; MERROR
76    L76
76    (LOAD 5)
77    (BIND 7)                            ; L
79    (JMP L93)
81    L81
81    (GETVALUE 7)                        ; L
83    (JMPIF L88)
85    (CONST&PUSH 8)                      ; "CHECKBREAK not found in DISPLAY"
86    (CALL1 6)                           ; MERROR
88    L88
88    (GETVALUE 7)                        ; L
90    (CDR)
91    (SETVALUE 7)                        ; L
93    L93
93    (GETVALUE&PUSH 4)                   ; BKPT
95    (GETVALUE 7)                        ; L
97    (CDR)
98    (JMPIFNOTEQ L81)
100   (GETVALUE&PUSH 7)                   ; L
102   (NIL&PUSH)
103   (CALLS1 170)                        ; RPLACD
105   (UNBIND1)
106   (GETVALUE&PUSH 4)                   ; BKPT
108   (CONST&PUSH 9)                      ; 0
109   (CALL2 10)                          ; OUTPUT
111   (GETVALUE 11)                       ; ^W
113   (JMPIF L117)
115   (GETVALUE 12)                       ; MORE-^W
117   L117
117   (BIND 11)                           ; ^W
119   (CALL0 13)                          ; MTERPRI
121   (UNBIND1)
122   (GETVALUE&PUSH 14)                  ; LINES
124   (CALLS2 150)                        ; 1+
126   (SETVALUE 14)                       ; LINES
128   (LOAD 5)
129   (SETVALUE 4)                        ; BKPT
131   (GETVALUE 15)                       ; BKPTWD
133   (SETVALUE 2)                        ; BKPTOUT
135   (GETVALUE 0)                        ; W
137   (SETVALUE 15)                       ; BKPTWD
139   (GETVALUE 16)                       ; MAXHT
141   (SETVALUE 17)                       ; BKPTHT
143   (GETVALUE 18)                       ; MAXDP
145   (SETVALUE 19)                       ; BKPTDP
147   (GETVALUE 20)                       ; LEVEL
149   (SETVALUE 21)                       ; BKPTLEVEL
151   (CONST 22)                          ; 1
153   (SETVALUE 16)                       ; MAXHT
155   (CONST 9)                           ; 0
156   (SETVALUE 18)                       ; MAXDP
158   (JMP L61)
161   L161
161   (LOAD 5)
162   (SETVALUE 4)                        ; BKPT
164   (GETVALUE 0)                        ; W
166   (SETVALUE 15)                       ; BKPTWD
168   (GETVALUE 20)                       ; LEVEL
170   (SETVALUE 21)                       ; BKPTLEVEL
172   (GETVALUE&PUSH 16)                  ; MAXHT
174   (GETVALUE&PUSH 17)                  ; BKPTHT
176   (CALLSR 1 51)                       ; MAX
179   (SETVALUE 17)                       ; BKPTHT
181   (GETVALUE&PUSH 18)                  ; MAXDP
183   (GETVALUE&PUSH 19)                  ; BKPTDP
185   (CALLSR 1 51)                       ; MAX
188   (SETVALUE 19)                       ; BKPTDP
190   (CONST 22)                          ; 1
192   (SETVALUE 16)                       ; MAXHT
194   (CONST 9)                           ; 0
195   (SETVALUE 18)                       ; MAXDP
197   (JMP L61)


Disassembly of function #:|(DEFUN FORCEBREAK (RESULT W) ...)-132|
(CONST 0) = FORCEBREAK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FORCEBREAK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FORCEBREAK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FORCEBREAK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FORCEBREAK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FORCEBREAK
8     (SKIP&RET 1)


Disassembly of function FORCEBREAK
(CONST 0) = W
(CONST 1) = 0
(CONST 2) = OUTPUT
(CONST 3) = MTERPRI
(CONST 4) = 2
(CONST 5) = LINES
(CONST 6) = BKPT
(CONST 7) = BREAK
(CONST 8) = BKPTOUT
(CONST 9) = 1
(CONST 10) = MAXHT
(CONST 11) = MAXDP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BREAK W LINES)
writes special variables : (MAXDP MAXHT BKPTOUT BKPT LINES)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; W
3     (LOAD&PUSH 5)
4     (CONST&PUSH 1)                      ; 0
5     (CALL2 2)                           ; OUTPUT
7     (CALL0 3)                           ; MTERPRI
9     (CONST&PUSH 4)                      ; 2
10    (GETVALUE&PUSH 5)                   ; LINES
12    (CALLSR 2 53)                       ; +
15    (SETVALUE 5)                        ; LINES
17    (NIL)
18    (SETVALUE 6)                        ; BKPT
20    (GETVALUE&PUSH 0)                   ; W
22    (GETVALUE&PUSH 7)                   ; BREAK
24    (CALLSR 2 53)                       ; +
27    (SETVALUE 8)                        ; BKPTOUT
29    (CONST 9)                           ; 1
30    (SETVALUE 10)                       ; MAXHT
32    (CONST 1)                           ; 0
33    (SETVALUE 11)                       ; MAXDP
35    (UNBIND1)
36    (SKIP&RET 3)


Disassembly of function #:|(DEFUN UPDATE-HEIGHTS (HT* DP*) ...)-133|
(CONST 0) = UPDATE-HEIGHTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UPDATE-HEIGHTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UPDATE-HEIGHTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UPDATE-HEIGHTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UPDATE-HEIGHTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UPDATE-HEIGHTS
8     (SKIP&RET 1)


Disassembly of function UPDATE-HEIGHTS
(CONST 0) = BREAK
(CONST 1) = MAXHT
(CONST 2) = MAXDP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MAXDP MAXHT BREAK)
writes special variables : (MAXDP MAXHT)
13 byte-code instructions:
0     (GETVALUE 0)                        ; BREAK
2     (JMPIFNOT1 L22)
4     (GETVALUE&PUSH 1)                   ; MAXHT
6     (LOAD&PUSH 3)
7     (CALLSR 1 51)                       ; MAX
10    (SETVALUE 1)                        ; MAXHT
12    (GETVALUE&PUSH 2)                   ; MAXDP
14    (LOAD&PUSH 2)
15    (CALLSR 1 51)                       ; MAX
18    (SETVALUE 2)                        ; MAXDP
20    (SKIP&RET 3)
22    L22
22    (SKIP&RET 3)


Disassembly of function #:|(DEFUN OUTPUT (RESULT W) ...)-134|
(CONST 0) = OUTPUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OUTPUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OUTPUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OUTPUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OUTPUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OUTPUT
8     (SKIP&RET 1)


Disassembly of function OUTPUT
(CONST 0) = W
(CONST 1) = ^W
(CONST 2) = MORE-^W
(CONST 3) = SMART-TTY
(CONST 4) = SCROLLP
(CONST 5) = $CURSORDISP
(CONST 6) = BKPTHT
(CONST 7) = BKPTDP
(CONST 8) = TTYHEIGHT
(CONST 9) = CURSORPOS
(CONST 10) = MORE-FUN
(CONST 11) = ^R
(CONST 12) = 80
(CONST 13) = "Expression is too high to be displayed."
(CONST 14) = MERROR
(CONST 15) = 2
(CONST 16) = OUTPUT-LINEAR
(CONST 17) = OUTPUT-2D
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W ^R TTYHEIGHT BKPTDP BKPTHT $CURSORDISP SCROLLP SMART-TTY MORE-^W ^W)
94 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; W
3     (GETVALUE 1)                        ; ^W
5     (JMPIF L12)
7     (GETVALUE 2)                        ; MORE-^W
9     (JMPIFNOT L139)
12    L12
12    (GETVALUE 1)                        ; ^W
14    (JMPIF L69)
16    L16
16    (GETVALUE 2)                        ; MORE-^W
18    (JMPIF L69)
20    (GETVALUE 3)                        ; SMART-TTY
22    (JMPIFNOT L69)
24    (GETVALUE 4)                        ; SCROLLP
26    (JMPIFNOT L32)
28    (GETVALUE 5)                        ; $CURSORDISP
30    (JMPIFNOT L69)
32    L32
32    (GETVALUE&PUSH 6)                   ; BKPTHT
34    (GETVALUE&PUSH 7)                   ; BKPTDP
36    (CALLSR&PUSH 2 53)                  ; +
39    (GETVALUE&PUSH 8)                   ; TTYHEIGHT
41    (CALLS2&PUSH 151)                   ; 1-
43    (CALLSR&JMPIFNOT 1 47 L69)          ; <
47    (GETVALUE&PUSH 6)                   ; BKPTHT
49    (GETVALUE&PUSH 7)                   ; BKPTDP
51    (CALLSR&PUSH 2 53)                  ; +
54    (GETVALUE&PUSH 8)                   ; TTYHEIGHT
56    (CALLS2&PUSH 151)                   ; 1-
58    (CALL0 9)                           ; CURSORPOS
60    (CAR&PUSH)
61    (CALLSR&PUSH 1 54)                  ; -
64    (CALLSR&JMPIF 1 48 L151)            ; >
69    L69
69    (GETVALUE 1)                        ; ^W
71    (JMPIF L77)
73    L73
73    (GETVALUE 2)                        ; MORE-^W
75    (JMPIFNOT L82)
77    L77
77    (GETVALUE 11)                       ; ^R
79    (NOT)
80    (JMPIF1 L136)
82    L82
82    (GETVALUE&PUSH 6)                   ; BKPTHT
84    (GETVALUE&PUSH 7)                   ; BKPTDP
86    (CALLSR&PUSH 2 53)                  ; +
89    (CONST&PUSH 12)                     ; 80
90    (CALLSR&JMPIF 1 48 L162)            ; >
95    (GETVALUE 3)                        ; SMART-TTY
97    (JMPIFNOT L167)
100   (GETVALUE 5)                        ; $CURSORDISP
102   (JMPIFNOT L167)
104   (GETVALUE 11)                       ; ^R
106   (JMPIF L167)
108   (GETVALUE 4)                        ; SCROLLP
110   (JMPIF L167)
112   (GETVALUE&PUSH 6)                   ; BKPTHT
114   (GETVALUE&PUSH 7)                   ; BKPTDP
116   (CALLSR&PUSH 2 53)                  ; +
119   (GETVALUE&PUSH 8)                   ; TTYHEIGHT
121   (CONST&PUSH 15)                     ; 2
122   (CALLSR&PUSH 1 54)                  ; -
125   (CALLSR&JMPIF 1 48 L167)            ; >
129   (LOAD&PUSH 5)
130   (CALLS2&PUSH 73)                    ; NREVERSE
132   (GETVALUE&PUSH 0)                   ; W
134   (CALL2 17)                          ; OUTPUT-2D
136   L136
136   (UNBIND1)
137   (SKIP&RET 3)
139   L139
139   (PUSH-UNBOUND 1)
141   (CALLS1 140)                        ; FRESH-LINE
143   (GETVALUE 1)                        ; ^W
145   (JMPIFNOT L16)
148   (JMP L69)
151   L151
151   (T&PUSH)
152   (CALL1 10)                          ; MORE-FUN
154   (GETVALUE 1)                        ; ^W
156   (JMPIFNOT L73)
159   (JMP L77)
162   L162
162   (CONST&PUSH 13)                     ; "Expression is too high to be displayed."
163   (CALL1 14)                          ; MERROR
165   (JMP L136)
167   L167
167   (LOAD&PUSH 5)
168   (CALLS2&PUSH 73)                    ; NREVERSE
170   (GETVALUE&PUSH 0)                   ; W
172   (CALL2 16)                          ; OUTPUT-LINEAR
174   (JMP L136)


Disassembly of function #:|(DEFUN OUTPUT-LINEAR (RESULT W) ...)-135|
(CONST 0) = OUTPUT-LINEAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OUTPUT-LINEAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OUTPUT-LINEAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OUTPUT-LINEAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OUTPUT-LINEAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OUTPUT-LINEAR
8     (SKIP&RET 1)


Disassembly of function OUTPUT-LINEAR
(CONST 0) = W
(CONST 1) = BKPTDP
(CONST 2) = DRAW-LINEAR
(CONST 3) = BKPTHT
(CONST 4) = 0
(CONST 5) = LINEARRAY
(CONST 6) = MORE-^W
(CONST 7) = OUTPUT-LINEAR-ONE-LINE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LINEARRAY BKPTHT W BKPTDP)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; W
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 1)                   ; BKPTDP
6     (GETVALUE&PUSH 0)                   ; W
8     (CALL 3 2)                          ; DRAW-LINEAR
11    (GETVALUE&PUSH 3)                   ; BKPTHT
13    (GETVALUE&PUSH 1)                   ; BKPTDP
15    (CALLSR&PUSH 2 53)                  ; +
18    (CALLS2&PUSH 151)                   ; 1-
20    L20
20    (LOAD&PUSH 0)
21    (CONST&PUSH 4)                      ; 0
22    (CALLSR&JMPIF 1 47 L40)             ; <
26    (GETVALUE&PUSH 5)                   ; LINEARRAY
28    (LOAD&PUSH 1)
29    (CALLSR&JMPIFNOT 1 1 L36)           ; AREF
33    (LOAD&PUSH 0)
34    (CALL1 7)                           ; OUTPUT-LINEAR-ONE-LINE
36    L36
36    (LOAD&DEC&STORE 0)
38    (JMP L20)
40    L40
40    (NIL)
41    (SKIP 1)
43    (UNBIND1)
44    (SKIP&RET 3)


Disassembly of function #:|(DEFUN OUTPUT-LINEAR-ONE-LINE (I) ...)-136|
(CONST 0) = OUTPUT-LINEAR-ONE-LINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OUTPUT-LINEAR-ONE-LINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OUTPUT-LINEAR-ONE-LINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OUTPUT-LINEAR-ONE-LINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OUTPUT-LINEAR-ONE-LINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OUTPUT-LINEAR-ONE-LINE
8     (SKIP&RET 1)


Disassembly of function OUTPUT-LINEAR-ONE-LINE
(CONST 0) = 0
(CONST 1) = N
(CONST 2) = LINEARRAY
(CONST 3) = TYOTBSP
(CONST 4) = V
(CONST 5) = TYO
(CONST 6) = MTERPRI
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N LINEARRAY)
writes special variables : (V N)
38 byte-code instructions:
0     (NIL&PUSH)
1     (CONST 0)                           ; 0
2     (BIND 1)                            ; N
4     (GETVALUE&PUSH 2)                   ; LINEARRAY
6     (LOAD&PUSH 6)
7     (CALLSR&STORE 1 1 3)                ; AREF
11    (CDR&PUSH)
12    (CALLS2&STORE 73 3)                 ; NREVERSE
15    (CAR)
16    (SETVALUE 1)                        ; N
18    (GETVALUE&PUSH 2)                   ; LINEARRAY
20    (NIL&PUSH)
21    (LOAD&PUSH 1)
22    (LOAD 8)
23    (SVSET)
24    (SKIP 1)
26    (GETVALUE&PUSH 1)                   ; N
28    (CALL1 3)                           ; TYOTBSP
30    (NIL&PUSH)
31    (LOAD&CDR&PUSH 4)
33    (LOAD 1)
34    (BIND 4)                            ; V
36    (LOAD&JMPIFNOT 3 L52)
39    L39
39    (LOAD&CAR&PUSH 3)
41    (LOAD 0)
42    (SETVALUE 4)                        ; V
44    (STORE 0)
45    (CALL1 5)                           ; TYO
47    (LOAD&CDR&STORE 3)
49    (LOAD&JMPIF 3 L39)
52    L52
52    (UNBIND1)
53    (SKIP 2)
55    (CALL0 6)                           ; MTERPRI
57    (NIL)
58    (UNBIND1)
59    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TYOTBSP (N) ...)-137|
(CONST 0) = TYOTBSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TYOTBSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TYOTBSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TYOTBSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TYOTBSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TYOTBSP
8     (SKIP&RET 1)


Disassembly of function TYOTBSP
(CONST 0) = N
(CONST 1) = 8
(CONST 2) = #\Tab
(CONST 3) = TYO
(CONST 4) = 1
(CONST 5) = #\Space
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
writes special variable : (N)
26 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     L3
3     (GETVALUE&PUSH 0)                   ; N
5     (CONST&PUSH 1)                      ; 8
6     (CALLSR&JMPIF 1 47 L32)             ; <
10    (CONST&PUSH 2)                      ; #\Tab
11    (CALL1 3)                           ; TYO
13    (GETVALUE&PUSH 0)                   ; N
15    (CONST&PUSH 1)                      ; 8
16    (CALLSR 1 54)                       ; -
19    (SETVALUE 0)                        ; N
21    (JMP L3)
23    L23
23    (CONST&PUSH 5)                      ; #\Space
24    (CALL1 3)                           ; TYO
26    (GETVALUE&PUSH 0)                   ; N
28    (CALLS2 151)                        ; 1-
30    (SETVALUE 0)                        ; N
32    L32
32    (GETVALUE&PUSH 0)                   ; N
34    (CONST&PUSH 4)                      ; 1
35    (CALLSR&JMPIFNOT 1 47 L23)          ; <
39    (NIL)
40    (UNBIND1)
41    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DRAW-LINEAR (DMSTR OLDROW OLDCOL) ...)-138|
(CONST 0) = DRAW-LINEAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = FUNCTION
(CONST 3) = 
"This puts the LINE lists into LINEARRAY ready to be drawn.
   Each LINE consists of first an initial number of columns to space
   (or tab over) and then the characters to be printed.
   oldrow and oldcol are the starting points for the the (dx,dy) offsets
   given in the dimension string DMSTR.  It does not check that oldrow
   is big enough for possible negative y offsets in DMSTR, but BKPTDP is the
   right global to use for  oldrow (see Draw-2d)."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
(CONST 5) = #<COMPILED-CLOSURE DRAW-LINEAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; DRAW-LINEAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DRAW-LINEAR
4     (CONST&PUSH 2)                      ; FUNCTION
5     (CONST&PUSH 3)                      ; "This puts the LINE lists into LINEARRAY ready to be drawn.
   Each LINE consists of first an initial number of columns to space
   (or tab over) and then the characters to be printed.
   oldrow and oldcol are the starting points for the the (dx,dy) offsets
   given in the dimension string DMSTR.  It does not check that oldrow
   is big enough for possible negative y offsets in DMSTR, but BKPTDP is the
   right global to use for  oldrow (see Draw-2d)."
6     (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
9     (CONST&PUSH 0)                      ; DRAW-LINEAR
10    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE DRAW-LINEAR>
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (CONST 0)                           ; DRAW-LINEAR
14    (SKIP&RET 1)


Disassembly of function DRAW-LINEAR
(CONST 0) = OLDROW
(CONST 1) = OLDCOL
(CONST 2) = LINEARRAY
(CONST 3) = N
(CONST 4) = 8
(CONST 5) = QUOT
(CONST 6) = M
(CONST 7) = #\Tab
(CONST 8) = #\Space
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M N OLDROW LINEARRAY OLDCOL)
writes special variables : (OLDCOL M N)
131 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; OLDROW
3     (LOAD 4)
4     (BIND 1)                            ; OLDCOL
6     (NIL&PUSH)
7     (LOAD&JMPIFNOT 10 L210)
11    (JMP L182)
14    L14
14    (GETVALUE&PUSH 1)                   ; OLDCOL
16    (LIST 1)
18    (STORE 0)
19    (LOAD&JMPIFNOT 10 L166)
23    (JMP L147)
26    L26
26    (GETVALUE&PUSH 2)                   ; LINEARRAY
28    (GETVALUE&PUSH 0)                   ; OLDROW
30    (CALLSR&STORE 1 1 0)                ; AREF
34    (JMPIFNOT L14)
36    (NIL)
37    (BIND 3)                            ; N
39    (LOAD 3)
40    (CAR)
41    (SETVALUE 3)                        ; N
43    (LOAD&CDR&STORE 3)
45    (CONST&PUSH 4)                      ; 8
46    (CONST&PUSH 4)                      ; 8
47    (GETVALUE&PUSH 3)                   ; N
49    (CONST&PUSH 4)                      ; 8
50    (CALL2&PUSH 5)                      ; QUOT
52    (CALLSR&PUSH 2 55)                  ; *
55    (CALLSR 2 53)                       ; +
58    (BIND 6)                            ; M
60    (JMP L73)
62    L62
62    (CONST&PUSH 7)                      ; #\Tab
63    (LOAD&CONS&STORE 6)
65    (CONST&PUSH 4)                      ; 8
66    (GETVALUE&PUSH 6)                   ; M
68    (CALLSR 2 53)                       ; +
71    (SETVALUE 6)                        ; M
73    L73
73    (GETVALUE&PUSH 6)                   ; M
75    (GETVALUE&PUSH 1)                   ; OLDCOL
77    (CALLSR&JMPIF 1 47 L62)             ; <
81    (GETVALUE&PUSH 3)                   ; N
83    (GETVALUE&PUSH 6)                   ; M
85    (CONST&PUSH 4)                      ; 8
86    (CALLSR&PUSH 1 54)                  ; -
89    (CALLSR 1 51)                       ; MAX
92    (SETVALUE 3)                        ; N
94    (UNBIND1)
95    (JMP L135)
97    L97
97    (LOAD 10)
98    (CAR)
99    (CDR)
100   (CDR&PUSH)
101   (CALLS2&PUSH 72)                    ; REVERSE
103   (GETVALUE&PUSH 0)                   ; OLDROW
105   (LOAD 12)
106   (CAR)
107   (CDR)
108   (CAR&PUSH)
109   (CALLSR&PUSH 2 53)                  ; +
112   (GETVALUE&PUSH 1)                   ; OLDCOL
114   (LOAD 13)
115   (CAR)
116   (CAR&PUSH)
117   (CALLSR&PUSH 2 53)                  ; +
120   (JSR L0)
123   (JMP L203)
126   L126
126   (CONST&PUSH 8)                      ; #\Space
127   (LOAD&CONS&STORE 3)
129   (GETVALUE&PUSH 3)                   ; N
131   (CALLS2 150)                        ; 1+
133   (SETVALUE 3)                        ; N
135   L135
135   (GETVALUE&PUSH 1)                   ; OLDCOL
137   (GETVALUE&PUSH 3)                   ; N
139   (CALLSR&JMPIFNOT 1 49 L126)         ; <=
143   (UNBIND1)
144   (LOAD&JMPIFNOT 10 L166)
147   L147
147   (LOAD 10)
148   (CAR)
149   (JMPIFCONSP L166)
151   (GETVALUE&PUSH 1)                   ; OLDCOL
153   (CALLS2 150)                        ; 1+
155   (SETVALUE 1)                        ; OLDCOL
157   (LOAD&CAR&PUSH 10)
159   (LOAD&CONS&STORE 0)
161   (LOAD&CDR&STORE 10)
163   (LOAD&JMPIF 10 L147)
166   L166
166   (GETVALUE&PUSH 2)                   ; LINEARRAY
168   (GETVALUE&PUSH 0)                   ; OLDROW
170   (GETVALUE&PUSH 1)                   ; OLDCOL
172   (LOAD 3)
173   (CONS&PUSH)
174   (LOAD&PUSH 2)
175   (LOAD 2)
176   (SVSET)
177   (SKIP 2)
179   (LOAD&JMPIFNOT 10 L210)
182   L182
182   (LOAD 10)
183   (CAR)
184   (JMPIFATOM L26)
187   (LOAD 10)
188   (CAR)
189   (CAR&PUSH)
190   (CALLS2&JMPIF 12 L97)               ; INTEGERP
194   (LOAD 10)
195   (CAR)
196   (CAR&PUSH)
197   (T&PUSH)
198   (LOAD 12)
199   (CAR)
200   (CDR)
201   (APPLY 1)
203   L203
203   (SETVALUE 1)                        ; OLDCOL
205   (LOAD&CDR&STORE 10)
207   (LOAD&JMPIF 10 L182)
210   L210
210   (SKIP 1)
212   (GETVALUE 1)                        ; OLDCOL
214   (UNBIND 2)
216   (SKIP&RET 4)


Disassembly of function #:|(DEFUN OUTPUT-2D (RESULT W &AUX ...) ...)-139|
(CONST 0) = OUTPUT-2D
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OUTPUT-2D>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OUTPUT-2D
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OUTPUT-2D
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OUTPUT-2D>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OUTPUT-2D
8     (SKIP&RET 1)


Disassembly of function OUTPUT-2D
(CONST 0) = W
(CONST 1) = 0
(CONST 2) = CURSORPOS
(CONST 3) = OLDROW
(CONST 4) = OLDCOL
(CONST 5) = BKPTHT
(CONST 6) = BKPTDP
(CONST 7) = CURSORPOS*
(CONST 8) = #\Newline
(CONST 9) = TYO*
(CONST 10) = 1
(CONST 11) = DRAW-2D
(CONST 12) = TTYHEIGHT
(CONST 13) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TTYHEIGHT W BKPTDP BKPTHT OLDROW)
writes special variables : (OLDCOL OLDROW)
44 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; W
3     (CONST&PUSH 1)                      ; 0
4     (CALL0 2)                           ; CURSORPOS
6     (CAR)
7     (SETVALUE 3)                        ; OLDROW
9     (CONST 1)                           ; 0
10    (SETVALUE 4)                        ; OLDCOL
12    (GETVALUE&PUSH 3)                   ; OLDROW
14    (GETVALUE&PUSH 5)                   ; BKPTHT
16    (GETVALUE&PUSH 6)                   ; BKPTDP
18    (CALLSR&STORE 3 53 0)               ; +
22    (GETVALUE&PUSH 3)                   ; OLDROW
24    (CONST&PUSH 1)                      ; 0
25    (CALL2 7)                           ; CURSORPOS*
27    (JMP L38)
29    L29
29    (CONST&PUSH 8)                      ; #\Newline
30    (CALL1 9)                           ; TYO*
32    (GETVALUE&PUSH 3)                   ; OLDROW
34    (CALLS2 150)                        ; 1+
36    (SETVALUE 3)                        ; OLDROW
38    L38
38    (LOAD&PUSH 0)
39    (GETVALUE&PUSH 3)                   ; OLDROW
41    (CALLSR&JMPIFNOT 1 45 L29)          ; =
45    (LOAD&PUSH 6)
46    (GETVALUE&PUSH 3)                   ; OLDROW
48    (GETVALUE&PUSH 6)                   ; BKPTDP
50    (CONST&PUSH 10)                     ; 1
51    (CALLSR&PUSH 2 54)                  ; -
54    (GETVALUE&PUSH 0)                   ; W
56    (CALL 3 11)                         ; DRAW-2D
59    (GETVALUE&PUSH 12)                  ; TTYHEIGHT
61    (CONST&PUSH 13)                     ; 2
62    (CALLSR&PUSH 1 54)                  ; -
65    (LOAD&PUSH 1)
66    (CALLSR&STORE 1 52 0)               ; MIN
70    (PUSH)
71    (CONST&PUSH 1)                      ; 0
72    (CALL2 7)                           ; CURSORPOS*
74    (SKIP 1)
76    (UNBIND1)
77    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DRAW-2D (DMSTR ROW COL) ...)-140|
(CONST 0) = DRAW-2D
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DRAW-2D>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DRAW-2D
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DRAW-2D
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DRAW-2D>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DRAW-2D
8     (SKIP&RET 1)


Disassembly of function DRAW-2D
(CONST 0) = CURSORPOS*
(CONST 1) = L
(CONST 2) = TYO*
(CONST 3) = OLDCOL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (OLDCOL L)
writes special variable : (L)
94 byte-code instructions:
0     L0
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALL2 0)                           ; CURSORPOS*
4     (LOAD 3)
5     (BIND 1)                            ; L
7     (GETVALUE 1)                        ; L
9     (JMPIFNOT L137)
12    (JMP L102)
15    L15
15    (GETVALUE 1)                        ; L
17    (CAR&PUSH)
18    (CALL1 2)                           ; TYO*
20    (JMP L128)
23    L23
23    (GETVALUE 3)                        ; OLDCOL
25    (STORE 4)
26    (JMP L81)
28    L28
28    (LOAD&PUSH 4)
29    (GETVALUE 1)                        ; L
31    (CAR)
32    (CAR&PUSH)
33    (CALLSR&STORE 2 53 4)               ; +
37    (JMP L76)
39    L39
39    (GETVALUE 1)                        ; L
41    (CAR)
42    (CDR)
43    (CDR)
44    (JMPIFNOT L28)
46    (GETVALUE 1)                        ; L
48    (CAR)
49    (CDR)
50    (CDR&PUSH)
51    (CALLS2&PUSH 72)                    ; REVERSE
53    (LOAD&PUSH 6)
54    (GETVALUE 1)                        ; L
56    (CAR)
57    (CDR)
58    (CAR&PUSH)
59    (CALLSR&PUSH 1 54)                  ; -
62    (LOAD&PUSH 6)
63    (GETVALUE 1)                        ; L
65    (CAR)
66    (CAR&PUSH)
67    (CALLSR&PUSH 2 53)                  ; +
70    (JSR L0)
73    (GETVALUE 3)                        ; OLDCOL
75    (STORE 4)
76    L76
76    (GETVALUE 1)                        ; L
78    (CDR)
79    (SETVALUE 1)                        ; L
81    L81
81    (GETVALUE 1)                        ; L
83    (CAR&PUSH)
84    (CALLS2&JMPIF 12 L94)               ; INTEGERP
87    (GETVALUE 1)                        ; L
89    (CAR)
90    (CAR&PUSH)
91    (CALLS2&JMPIF 12 L39)               ; INTEGERP
94    L94
94    (LOAD&PUSH 5)
95    (LOAD&PUSH 5)
96    (CALL2 0)                           ; CURSORPOS*
98    (GETVALUE 1)                        ; L
100   (JMPIFNOT L137)
102   L102
102   (GETVALUE 1)                        ; L
104   (CAR&PUSH)
105   (CALLS2&JMPIF 12 L15)               ; INTEGERP
109   (GETVALUE 1)                        ; L
111   (CAR)
112   (CAR&PUSH)
113   (CALLS2&JMPIF 12 L23)               ; INTEGERP
117   (GETVALUE 1)                        ; L
119   (CAR)
120   (CAR&PUSH)
121   (NIL&PUSH)
122   (GETVALUE 1)                        ; L
124   (CAR)
125   (CDR)
126   (APPLY 1)
128   L128
128   (GETVALUE 1)                        ; L
130   (CDR)
131   (SETVALUE 1)                        ; L
133   (GETVALUE 1)                        ; L
135   (JMPIF L102)
137   L137
137   (NIL)
138   (UNBIND1)
139   (SKIP&RET 4)


Disassembly of function #:|(DEFUN CHECK-DIMSTRING (STR) ...)-141|
(CONST 0) = CHECK-DIMSTRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECK-DIMSTRING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECK-DIMSTRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECK-DIMSTRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECK-DIMSTRING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECK-DIMSTRING
8     (SKIP&RET 1)


Disassembly of function CHECK-DIMSTRING
(CONST 0) = V
(CONST 1) = "bad entry ~A"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
writes special variable : (V)
21 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; V
3     (LOAD&PUSH 4)
4     (LOAD&JMPIFNOT 0 L21)
7     L7
7     (LOAD&CAR&PUSH 0)
9     (LOAD 0)
10    (SETVALUE 0)                        ; V
12    (STORE 0)
13    (CALLS2&JMPIF 12 L27)               ; INTEGERP
16    (LOAD&CDR&STORE 0)
18    (LOAD&JMPIF 0 L7)
21    L21
21    (NIL)
22    (SKIP 1)
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (CONST&PUSH 1)                      ; "bad entry ~A"
28    (GETVALUE&PUSH 0)                   ; V
30    (CALLSR 1 29)                       ; ERROR


Disassembly of function #:|(DECLARE-TOP (*EXPR LG-SET-POINT LG-DRAW-VECTOR ...) (NOTYPE # # ...) ...)-142|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (*EXPR CG-BEGIN-GRAPHICS CG-END-GRAPHICS ...))-143|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN D-HBAR (LINEAR? W &OPTIONAL ...) ...)-144|
(CONST 0) = D-HBAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D-HBAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D-HBAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D-HBAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D-HBAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D-HBAR
8     (SKIP&RET 1)


Disassembly of function D-HBAR
(CONST 0) = W
(CONST 1) = #\-
(CONST 2) = 0
(CONST 3) = OLDROW
(CONST 4) = OLDCOL
(CONST 5) = DRAW-LINEAR
(CONST 6) = LINE-GRAPHICS-TTY
(CONST 7) = $LINEDISP
(CONST 8) = LG-CHARACTER-Y
(CONST 9) = LG-CHARACTER-Y-2
(CONST 10) = LG-CHARACTER-X
(CONST 11) = LG-SET-POINT
(CONST 12) = LG-DRAW-VECTOR
(CONST 13) = CURSORPOS*
(CONST 14) = CHARACTER-GRAPHICS-TTY
(CONST 15) = CG-BEGIN-GRAPHICS
(CONST 16) = CG-HORIZONTAL-BAR
(CONST 17) = CG-END-GRAPHICS
(CONST 18) = TYO*
2 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: 
(LG-CHARACTER-X LG-CHARACTER-Y-2 LG-CHARACTER-Y OLDCOL OLDROW W
 CHARACTER-GRAPHICS-TTY $LINEDISP LINE-GRAPHICS-TTY)
writes special variable : (OLDCOL)
97 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; W
3     (JMPIFBOUNDP 4 L8)
6     (CONST 1)                           ; #\-
7     (STORE 4)
8     L8
8     (NIL&PUSH)
9     (LOAD&JMPIF 7 L35)
12    (GETVALUE 6)                        ; LINE-GRAPHICS-TTY
14    (JMPIFNOT L20)
16    (GETVALUE 7)                        ; $LINEDISP
18    (JMPIF L64)
20    L20
20    (GETVALUE 14)                       ; CHARACTER-GRAPHICS-TTY
22    (JMPIFNOT L29)
24    (GETVALUE 7)                        ; $LINEDISP
26    (JMPIF L116)
29    L29
29    (CONST&PUSH 2)                      ; 0
30    (GETVALUE&PUSH 0)                   ; W
32    (JMP L153)
35    L35
35    (CONST&PUSH 2)                      ; 0
36    (GETVALUE&PUSH 0)                   ; W
38    (JMP L45)
40    L40
40    (LOAD&PUSH 7)
41    (LOAD&CONS&STORE 2)
43    (LOAD&INC&STORE 1)
45    L45
45    (LOAD&PUSH 1)
46    (LOAD&PUSH 1)
47    (CALLSR&JMPIFNOT 1 50 L40)          ; >=
51    (SKIP 2)
53    (LOAD&PUSH 0)
54    (GETVALUE&PUSH 3)                   ; OLDROW
56    (GETVALUE&PUSH 4)                   ; OLDCOL
58    (CALL 3 5)                          ; DRAW-LINEAR
61    (JMP L162)
64    L64
64    (GETVALUE&PUSH 8)                   ; LG-CHARACTER-Y
66    (GETVALUE&PUSH 3)                   ; OLDROW
68    (CALLSR&PUSH 2 55)                  ; *
71    (GETVALUE&PUSH 9)                   ; LG-CHARACTER-Y-2
73    (CALLSR&PUSH 2 53)                  ; +
76    (GETVALUE&PUSH 4)                   ; OLDCOL
78    (GETVALUE&PUSH 10)                  ; LG-CHARACTER-X
80    (CALLSR&PUSH 2 55)                  ; *
83    (LOAD&PUSH 1)
84    (CALL2 11)                          ; LG-SET-POINT
86    (GETVALUE&PUSH 4)                   ; OLDCOL
88    (GETVALUE&PUSH 0)                   ; W
90    (CALLSR&PUSH 2 53)                  ; +
93    (GETVALUE&PUSH 10)                  ; LG-CHARACTER-X
95    (CALLSR&PUSH 2 55)                  ; *
98    (LOAD&PUSH 1)
99    (CALL2 12)                          ; LG-DRAW-VECTOR
101   (SKIP 1)
103   (GETVALUE&PUSH 3)                   ; OLDROW
105   (GETVALUE&PUSH 4)                   ; OLDCOL
107   (GETVALUE&PUSH 0)                   ; W
109   (CALLSR&PUSH 2 53)                  ; +
112   (CALL2 13)                          ; CURSORPOS*
114   (JMP L162)
116   L116
116   (CALL0 15)                          ; CG-BEGIN-GRAPHICS
118   (CONST&PUSH 2)                      ; 0
119   (GETVALUE&PUSH 0)                   ; W
121   (JMP L127)
123   L123
123   (CALL0 16)                          ; CG-HORIZONTAL-BAR
125   (LOAD&INC&STORE 1)
127   L127
127   (LOAD&PUSH 1)
128   (LOAD&PUSH 1)
129   (CALLSR&JMPIFNOT 1 50 L123)         ; >=
133   (SKIP 2)
135   (GETVALUE&PUSH 4)                   ; OLDCOL
137   (GETVALUE&PUSH 0)                   ; W
139   (CALLSR 2 53)                       ; +
142   (SETVALUE 4)                        ; OLDCOL
144   (CALL0 17)                          ; CG-END-GRAPHICS
146   (JMP L162)
148   L148
148   (LOAD&PUSH 7)
149   (CALL1 18)                          ; TYO*
151   (LOAD&INC&STORE 1)
153   L153
153   (LOAD&PUSH 1)
154   (LOAD&PUSH 1)
155   (CALLSR&JMPIFNOT 1 50 L148)         ; >=
159   (NIL)
160   (SKIP 2)
162   L162
162   (SKIP 1)
164   (UNBIND1)
165   (SKIP&RET 4)


Disassembly of function #:|(DEFUN D-VBAR (LINEAR? H D ...) ...)-145|
(CONST 0) = D-VBAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D-VBAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D-VBAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D-VBAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D-VBAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D-VBAR
8     (SKIP&RET 1)


Disassembly of function D-VBAR
(CONST 0) = VERTICAL-STROKE-CHAR
(CONST 1) = 2
(CONST 2) = 0
(CONST 3) = -1
(CONST 4) = OLDROW
(CONST 5) = OLDCOL
(CONST 6) = DRAW-LINEAR
(CONST 7) = LINE-GRAPHICS-TTY
(CONST 8) = $LINEDISP
(CONST 9) = LG-CHARACTER-X
(CONST 10) = LG-CHARACTER-X-2
(CONST 11) = 1
(CONST 12) = LG-CHARACTER-Y
(CONST 13) = LG-SET-POINT
(CONST 14) = LG-DRAW-VECTOR
(CONST 15) = CURSORPOS*
(CONST 16) = CHARACTER-GRAPHICS-TTY
(CONST 17) = CG-BEGIN-GRAPHICS
(CONST 18) = CG-VERTICAL-BAR
(CONST 19) = CG-END-GRAPHICS
(CONST 20) = TYO*
3 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: 
(CHARACTER-GRAPHICS-TTY $LINEDISP LINE-GRAPHICS-TTY LG-CHARACTER-Y
 LG-CHARACTER-X-2 LG-CHARACTER-X OLDCOL OLDROW VERTICAL-STROKE-CHAR)
150 byte-code instructions:
0     (JMPIFBOUNDP 1 L180)
4     (GETVALUE 0)                        ; VERTICAL-STROKE-CHAR
6     (STORE 1)
7     (LOAD&JMPIFNOT 4 L184)
11    L11
11    (LOAD&PUSH 2)
12    (CALLSR&STORE 0 54 2)               ; -
16    (LOAD&PUSH 3)
17    (CONST&PUSH 1)                      ; 2
18    (CALLSR&PUSH 1 54)                  ; -
21    (CONST&PUSH 2)                      ; 0
22    (LOAD&DEC&PUSH 5)
24    (LOAD&PUSH 4)
25    (LIST&PUSH 3)
27    (LIST&PUSH 1)
29    (JMP L40)
31    L31
31    (CONST&PUSH 3)                      ; -1
32    (LOAD&PUSH 2)
33    (LOAD&PUSH 5)
34    (LIST&PUSH 3)
36    (LOAD&CONS&STORE 0)
38    (LOAD&DEC&STORE 1)
40    L40
40    (LOAD&PUSH 1)
41    (LOAD&PUSH 5)
42    (CALLSR&JMPIFNOT 1 47 L31)          ; <
46    (LOAD&PUSH 0)
47    (CALLS2&PUSH 73)                    ; NREVERSE
49    (GETVALUE&PUSH 4)                   ; OLDROW
51    (GETVALUE&PUSH 5)                   ; OLDCOL
53    (CALL 3 6)                          ; DRAW-LINEAR
56    (SKIP&RET 7)
58    L58
58    (GETVALUE&PUSH 9)                   ; LG-CHARACTER-X
60    (GETVALUE&PUSH 5)                   ; OLDCOL
62    (CALLSR&PUSH 2 55)                  ; *
65    (GETVALUE&PUSH 10)                  ; LG-CHARACTER-X-2
67    (CALLSR&PUSH 2 53)                  ; +
70    (LOAD&PUSH 0)
71    (GETVALUE&PUSH 4)                   ; OLDROW
73    (LOAD&PUSH 5)
74    (CONST&PUSH 11)                     ; 1
75    (CALLSR&PUSH 3 53)                  ; +
78    (GETVALUE&PUSH 12)                  ; LG-CHARACTER-Y
80    (CALLSR&PUSH 2 55)                  ; *
83    (CONST&PUSH 1)                      ; 2
84    (CALLSR&PUSH 1 54)                  ; -
87    (CALL2 13)                          ; LG-SET-POINT
89    (LOAD&PUSH 0)
90    (GETVALUE&PUSH 4)                   ; OLDROW
92    (CONST&PUSH 11)                     ; 1
93    (LOAD&PUSH 7)
94    (CALLSR&PUSH 0 54)                  ; -
97    (CALLSR&PUSH 3 53)                  ; +
100   (GETVALUE&PUSH 12)                  ; LG-CHARACTER-Y
102   (CALLSR&PUSH 2 55)                  ; *
105   (CONST&PUSH 1)                      ; 2
106   (CALLSR&PUSH 2 53)                  ; +
109   (CALL2 14)                          ; LG-DRAW-VECTOR
111   (SKIP 1)
113   (GETVALUE 4)                        ; OLDROW
115   (JMP L172)
117   L117
117   (GETVALUE&PUSH 4)                   ; OLDROW
119   (CONST&PUSH 11)                     ; 1
120   (LOAD&PUSH 5)
121   (CALLSR&PUSH 0 54)                  ; -
124   (CALLSR&PUSH 3 53)                  ; +
127   (GETVALUE&PUSH 5)                   ; OLDCOL
129   (CALL2 15)                          ; CURSORPOS*
131   (CALL0 17)                          ; CG-BEGIN-GRAPHICS
133   (CALL0 18)                          ; CG-VERTICAL-BAR
135   (CONST&PUSH 2)                      ; 0
136   (LOAD&PUSH 4)
137   (LOAD&PUSH 4)
138   (CONST&PUSH 3)                      ; -1
139   (CALLSR&PUSH 3 53)                  ; +
142   (JMP L156)
144   L144
144   (GETVALUE&PUSH 4)                   ; OLDROW
146   (CALLS2&PUSH 150)                   ; 1+
148   (GETVALUE&PUSH 5)                   ; OLDCOL
150   (CALL2 15)                          ; CURSORPOS*
152   (CALL0 18)                          ; CG-VERTICAL-BAR
154   (LOAD&INC&STORE 1)
156   L156
156   (LOAD&PUSH 1)
157   (LOAD&PUSH 1)
158   (CALLSR&JMPIFNOT 1 50 L144)         ; >=
162   (SKIP 2)
164   (CALL0 19)                          ; CG-END-GRAPHICS
166   (GETVALUE&PUSH 4)                   ; OLDROW
168   (LOAD&PUSH 3)
169   (CALLSR 1 54)                       ; -
172   L172
172   (PUSH)
173   (GETVALUE&PUSH 5)                   ; OLDCOL
175   (CALLS2 150)                        ; 1+
177   (JMP L259)
180   L180
180   (LOAD&JMPIF 4 L11)
184   L184
184   (GETVALUE 7)                        ; LINE-GRAPHICS-TTY
186   (JMPIFNOT L193)
188   (GETVALUE 8)                        ; $LINEDISP
190   (JMPIF L58)
193   L193
193   (GETVALUE 16)                       ; CHARACTER-GRAPHICS-TTY
195   (JMPIFNOT L202)
197   (GETVALUE 8)                        ; $LINEDISP
199   (JMPIF L117)
202   L202
202   (GETVALUE&PUSH 4)                   ; OLDROW
204   (CONST&PUSH 11)                     ; 1
205   (LOAD&PUSH 5)
206   (CALLSR&PUSH 0 54)                  ; -
209   (CALLSR&PUSH 3 53)                  ; +
212   (GETVALUE&PUSH 5)                   ; OLDCOL
214   (CALL2 15)                          ; CURSORPOS*
216   (LOAD&PUSH 1)
217   (CALL1 20)                          ; TYO*
219   (CONST&PUSH 2)                      ; 0
220   (LOAD&PUSH 4)
221   (LOAD&PUSH 4)
222   (CONST&PUSH 3)                      ; -1
223   (CALLSR&PUSH 3 53)                  ; +
226   (JMP L243)
228   L228
228   (GETVALUE&PUSH 4)                   ; OLDROW
230   (CALLS2&PUSH 150)                   ; 1+
232   (GETVALUE&PUSH 5)                   ; OLDCOL
234   (CALLS2&PUSH 151)                   ; 1-
236   (CALL2 15)                          ; CURSORPOS*
238   (LOAD&PUSH 3)
239   (CALL1 20)                          ; TYO*
241   (LOAD&INC&STORE 1)
243   L243
243   (LOAD&PUSH 1)
244   (LOAD&PUSH 1)
245   (CALLSR&JMPIFNOT 1 50 L228)         ; >=
249   (SKIP 2)
251   (GETVALUE&PUSH 4)                   ; OLDROW
253   (LOAD&PUSH 3)
254   (CALLSR&PUSH 1 54)                  ; -
257   (GETVALUE 5)                        ; OLDCOL
259   L259
259   (PUSH)
260   (CALL2 15)                          ; CURSORPOS*
262   (SKIP&RET 5)


Disassembly of function #:|(DEFUN D-INTEGRALSIGN (LINEAR? &AUX DMSTR) ...)-146|
(CONST 0) = D-INTEGRALSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D-INTEGRALSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D-INTEGRALSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D-INTEGRALSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D-INTEGRALSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D-INTEGRALSIGN
8     (SKIP&RET 1)


Disassembly of function D-INTEGRALSIGN
(CONST 0) = LINE-GRAPHICS-TTY
(CONST 1) = $LINEDISP
(CONST 2) = LG-CHARACTER-X
(CONST 3) = OLDCOL
(CONST 4) = LG-CHARACTER-X-2
(CONST 5) = LG-CHARACTER-Y
(CONST 6) = OLDROW
(CONST 7) = 2
(CONST 8) = LG-CHARACTER-Y-2
(CONST 9) = (0 -1)
(CONST 10) = X
(CONST 11) = LG-SET-POINT
(CONST 12) = LG-DRAW-VECTOR
(CONST 13) = CURSORPOS*
(CONST 14) = ((0 2 #\/) (-1 1 #\[) (-1 0 #\I) (-1 -1 #\]) (-1 -2 #\/))
(CONST 15) = DRAW-LINEAR
(CONST 16) = DRAW-2D
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(X LG-CHARACTER-Y-2 LG-CHARACTER-Y LG-CHARACTER-X-2 LG-CHARACTER-X OLDCOL
 OLDROW $LINEDISP LINE-GRAPHICS-TTY)
writes special variable : (X)
113 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&JMPIF 2 L12)
4     (GETVALUE 0)                        ; LINE-GRAPHICS-TTY
6     (JMPIFNOT L12)
8     (GETVALUE 1)                        ; $LINEDISP
10    (JMPIF L28)
12    L12
12    (CONST 14)                          ; ((0 2 ...) (-1 1 ...) ...)
13    (STORE 0)
14    (LOAD&JMPIF 2 L201)
18    (LOAD&PUSH 0)
19    (GETVALUE&PUSH 6)                   ; OLDROW
21    (GETVALUE&PUSH 3)                   ; OLDCOL
23    (CALL 3 16)                         ; DRAW-2D
26    (SKIP&RET 3)
28    L28
28    (GETVALUE&PUSH 2)                   ; LG-CHARACTER-X
30    (GETVALUE&PUSH 3)                   ; OLDCOL
32    (CALLSR&PUSH 2 55)                  ; *
35    (GETVALUE&PUSH 4)                   ; LG-CHARACTER-X-2
37    (CALLS2&PUSH 151)                   ; 1-
39    (GETVALUE&PUSH 4)                   ; LG-CHARACTER-X-2
41    (GETVALUE&PUSH 2)                   ; LG-CHARACTER-X
43    (GETVALUE&PUSH 3)                   ; OLDCOL
45    (CALLS2&PUSH 150)                   ; 1+
47    (CALLSR&PUSH 2 55)                  ; *
50    (GETVALUE&PUSH 5)                   ; LG-CHARACTER-Y
52    (GETVALUE&PUSH 6)                   ; OLDROW
54    (CONST&PUSH 7)                      ; 2
55    (CALLSR&PUSH 1 54)                  ; -
58    (CALLSR&PUSH 2 55)                  ; *
61    (GETVALUE&PUSH 8)                   ; LG-CHARACTER-Y-2
63    (CALLSR&PUSH 2 53)                  ; +
66    (GETVALUE&PUSH 8)                   ; LG-CHARACTER-Y-2
68    (GETVALUE&PUSH 5)                   ; LG-CHARACTER-Y
70    (GETVALUE&PUSH 8)                   ; LG-CHARACTER-Y-2
72    (CALLSR&PUSH 2 53)                  ; +
75    (GETVALUE&PUSH 5)                   ; LG-CHARACTER-Y
77    (GETVALUE&PUSH 6)                   ; OLDROW
79    (CONST&PUSH 7)                      ; 2
80    (CALLSR&PUSH 2 53)                  ; +
83    (CALLSR&PUSH 2 55)                  ; *
86    (GETVALUE&PUSH 8)                   ; LG-CHARACTER-Y-2
88    (CALLSR&PUSH 2 53)                  ; +
91    (CONST&PUSH 9)                      ; (0 -1)
92    (NIL)
93    (BIND 10)                           ; X
95    (JMP L183)
98    L98
98    (LOAD 3)
99    (CAR)
100   (SETVALUE 10)                       ; X
102   (PUSH)
103   (LOAD&PUSH 9)
104   (CALLSR&PUSH 2 53)                  ; +
107   (LOAD&PUSH 8)
108   (CALL2 11)                          ; LG-SET-POINT
110   (GETVALUE&PUSH 10)                  ; X
112   (LOAD&PUSH 9)
113   (LOAD&PUSH 12)
114   (CALLSR&PUSH 0 54)                  ; -
117   (CALLSR&PUSH 3 53)                  ; +
120   (LOAD&PUSH 8)
121   (LOAD&PUSH 8)
122   (CALLSR&PUSH 2 53)                  ; +
125   (CALL2 12)                          ; LG-DRAW-VECTOR
127   (GETVALUE&PUSH 10)                  ; X
129   (LOAD&PUSH 9)
130   (LOAD&PUSH 11)
131   (CALLSR&PUSH 0 54)                  ; -
134   (CALLSR&PUSH 3 53)                  ; +
137   (LOAD&PUSH 8)
138   (LOAD&PUSH 7)
139   (CALLSR&PUSH 2 53)                  ; +
142   (CALL2 12)                          ; LG-DRAW-VECTOR
144   (GETVALUE&PUSH 10)                  ; X
146   (LOAD&PUSH 12)
147   (LOAD&PUSH 11)
148   (CALLSR&PUSH 3 53)                  ; +
151   (LOAD&PUSH 5)
152   (LOAD&PUSH 7)
153   (CALLSR&PUSH 1 54)                  ; -
156   (CALL2 12)                          ; LG-DRAW-VECTOR
158   (GETVALUE&PUSH 10)                  ; X
160   (LOAD&PUSH 12)
161   (LOAD&PUSH 12)
162   (CALLSR&PUSH 3 53)                  ; +
165   (LOAD&PUSH 5)
166   (LOAD&PUSH 8)
167   (CALLSR&PUSH 1 54)                  ; -
170   (CALL2 12)                          ; LG-DRAW-VECTOR
172   (GETVALUE&PUSH 10)                  ; X
174   (LOAD&PUSH 12)
175   (CALLSR&PUSH 2 53)                  ; +
178   (LOAD&PUSH 5)
179   (CALL2 12)                          ; LG-DRAW-VECTOR
181   (LOAD&CDR&STORE 3)
183   L183
183   (LOAD&PUSH 3)
184   (CALLS1&JMPIFNOT 146 L98)           ; ENDP
188   (UNBIND1)
189   (SKIP 9)
191   (GETVALUE&PUSH 6)                   ; OLDROW
193   (GETVALUE&PUSH 3)                   ; OLDCOL
195   (CALLS2&PUSH 150)                   ; 1+
197   (CALL2 13)                          ; CURSORPOS*
199   (SKIP&RET 3)
201   L201
201   (LOAD&PUSH 0)
202   (GETVALUE&PUSH 6)                   ; OLDROW
204   (GETVALUE&PUSH 3)                   ; OLDCOL
206   (CALL 3 15)                         ; DRAW-LINEAR
209   (SKIP&RET 3)


Disassembly of function #:|(DEFUN D-PRODSIGN (LINEAR? &AUX DMSTR) ...)-147|
(CONST 0) = D-PRODSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D-PRODSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D-PRODSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D-PRODSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D-PRODSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D-PRODSIGN
8     (SKIP&RET 1)


Disassembly of function D-PRODSIGN
(CONST 0) = $LINEDISP
(CONST 1) = CG-D-PRODSIGN
(CONST 2) = CG-BEGIN-GRAPHICS
(CONST 3) = CG-END-GRAPHICS
(CONST 4) = OLDCOL
(CONST 5) = 5
(CONST 6) = 
((0 2 #\\ (D-HBAR 3 #\=) #\/) (-4 0) (D-VBAR 2 1 #\!) #\Space (D-VBAR 2 1 #\!)
 (1 0))
(CONST 7) = OLDROW
(CONST 8) = DRAW-LINEAR
(CONST 9) = DRAW-2D
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (OLDCOL OLDROW $LINEDISP)
writes special variable : (OLDCOL)
30 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&JMPIF 2 L12)
4     (GETVALUE 0)                        ; $LINEDISP
6     (JMPIFNOT L12)
8     (CONST&PUSH 1)                      ; CG-D-PRODSIGN
9     (CALLS1&JMPIF 80 L27)               ; FBOUNDP
12    L12
12    (CONST 6)                           ; ((0 2 ...) (-4 0) ...)
13    (STORE 0)
14    (LOAD&JMPIF 2 L43)
17    (LOAD&PUSH 0)
18    (GETVALUE&PUSH 7)                   ; OLDROW
20    (GETVALUE&PUSH 4)                   ; OLDCOL
22    (CALL 3 9)                          ; DRAW-2D
25    (SKIP&RET 3)
27    L27
27    (CALL0 2)                           ; CG-BEGIN-GRAPHICS
29    (CALL0 1)                           ; CG-D-PRODSIGN
31    (CALL0 3)                           ; CG-END-GRAPHICS
33    (GETVALUE&PUSH 4)                   ; OLDCOL
35    (CONST&PUSH 5)                      ; 5
36    (CALLSR 2 53)                       ; +
39    (SETVALUE 4)                        ; OLDCOL
41    (SKIP&RET 3)
43    L43
43    (LOAD&PUSH 0)
44    (GETVALUE&PUSH 7)                   ; OLDROW
46    (GETVALUE&PUSH 4)                   ; OLDCOL
48    (CALL 3 8)                          ; DRAW-LINEAR
51    (SKIP&RET 3)


Disassembly of function #:|(DEFUN D-SUMSIGN (LINEAR? &AUX DMSTR) ...)-148|
(CONST 0) = D-SUMSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D-SUMSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D-SUMSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D-SUMSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D-SUMSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D-SUMSIGN
8     (SKIP&RET 1)


Disassembly of function D-SUMSIGN
(CONST 0) = $LINEDISP
(CONST 1) = LINE-GRAPHICS-TTY
(CONST 2) = LG-CHARACTER-X
(CONST 3) = OLDCOL
(CONST 4) = 2
(CONST 5) = 4
(CONST 6) = LG-CHARACTER-Y
(CONST 7) = OLDROW
(CONST 8) = LG-CHARACTER-Y-2
(CONST 9) = 6
(CONST 10) = LG-SET-POINT
(CONST 11) = X
(CONST 12) = LG-DRAW-VECTOR
(CONST 13) = CURSORPOS*
(CONST 14) = CG-D-SUMSIGN
(CONST 15) = CG-BEGIN-GRAPHICS
(CONST 16) = CG-END-GRAPHICS
(CONST 17) = ((0 2 (D-HBAR 4 #\=)) (-4 1 #\\) #\> (-2 -1 #\/) (-1 -2 (D-HBAR 4 #\=)))
(CONST 18) = DRAW-LINEAR
(CONST 19) = DRAW-2D
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(X LG-CHARACTER-Y-2 LG-CHARACTER-Y LG-CHARACTER-X OLDCOL OLDROW
 LINE-GRAPHICS-TTY $LINEDISP)
writes special variable : (OLDCOL)
148 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&JMPIF 2 L12)
4     (GETVALUE 0)                        ; $LINEDISP
6     (JMPIFNOT L12)
8     (GETVALUE 1)                        ; LINE-GRAPHICS-TTY
10    (JMPIF L40)
12    L12
12    (LOAD&JMPIF 2 L24)
15    (GETVALUE 0)                        ; $LINEDISP
17    (JMPIFNOT L24)
19    (CONST&PUSH 14)                     ; CG-D-SUMSIGN
20    (CALLS1&JMPIF 80 L230)              ; FBOUNDP
24    L24
24    (CONST 17)                          ; ((0 2 #) (-4 1 #\\) #\> ...)
25    (STORE 0)
26    (LOAD&JMPIF 2 L246)
30    (LOAD&PUSH 0)
31    (GETVALUE&PUSH 7)                   ; OLDROW
33    (GETVALUE&PUSH 3)                   ; OLDCOL
35    (CALL 3 19)                         ; DRAW-2D
38    (SKIP&RET 3)
40    L40
40    (GETVALUE&PUSH 2)                   ; LG-CHARACTER-X
42    (GETVALUE&PUSH 3)                   ; OLDCOL
44    (CALLSR&PUSH 2 55)                  ; *
47    (GETVALUE&PUSH 2)                   ; LG-CHARACTER-X
49    (GETVALUE&PUSH 3)                   ; OLDCOL
51    (CONST&PUSH 4)                      ; 2
52    (CALLSR&PUSH 2 53)                  ; +
55    (CALLSR&PUSH 2 55)                  ; *
58    (GETVALUE&PUSH 2)                   ; LG-CHARACTER-X
60    (GETVALUE&PUSH 3)                   ; OLDCOL
62    (CONST&PUSH 5)                      ; 4
63    (CALLSR&PUSH 2 53)                  ; +
66    (CALLSR&PUSH 2 55)                  ; *
69    (GETVALUE&PUSH 6)                   ; LG-CHARACTER-Y
71    (GETVALUE&PUSH 7)                   ; OLDROW
73    (CONST&PUSH 4)                      ; 2
74    (CALLSR&PUSH 1 54)                  ; -
77    (CALLSR&PUSH 2 55)                  ; *
80    (GETVALUE&PUSH 8)                   ; LG-CHARACTER-Y-2
82    (CALLSR&PUSH 2 53)                  ; +
85    (GETVALUE&PUSH 6)                   ; LG-CHARACTER-Y
87    (GETVALUE&PUSH 7)                   ; OLDROW
89    (CALLSR&PUSH 2 55)                  ; *
92    (GETVALUE&PUSH 8)                   ; LG-CHARACTER-Y-2
94    (CALLSR&PUSH 2 53)                  ; +
97    (GETVALUE&PUSH 6)                   ; LG-CHARACTER-Y
99    (GETVALUE&PUSH 7)                   ; OLDROW
101   (CONST&PUSH 4)                      ; 2
102   (CALLSR&PUSH 2 53)                  ; +
105   (CALLSR&PUSH 2 55)                  ; *
108   (GETVALUE&PUSH 8)                   ; LG-CHARACTER-Y-2
110   (CALLSR&PUSH 2 53)                  ; +
113   (LOAD&PUSH 3)
114   (CONST&PUSH 5)                      ; 4
115   (CALLSR&PUSH 2 53)                  ; +
118   (LOAD&PUSH 3)
119   (CONST&PUSH 9)                      ; 6
120   (CALLSR&PUSH 2 53)                  ; +
123   (CALL2 10)                          ; LG-SET-POINT
125   (LOAD&PUSH 3)
126   (LOAD 3)
127   (CONS&PUSH)
128   (LOAD&INC&PUSH 6)
130   (LOAD 4)
131   (CONS&PUSH)
132   (LOAD&INC&PUSH 6)
134   (LOAD 4)
135   (CONS&PUSH)
136   (LOAD&INC&PUSH 8)
138   (LOAD 4)
139   (CONS&PUSH)
140   (LOAD&PUSH 9)
141   (LOAD 5)
142   (CONS&PUSH)
143   (LOAD&PUSH 9)
144   (LOAD 7)
145   (CONS&PUSH)
146   (LOAD&PUSH 11)
147   (LOAD 9)
148   (CONS&PUSH)
149   (LOAD&DEC&PUSH 12)
151   (LOAD 10)
152   (CONS&PUSH)
153   (LOAD&DEC&PUSH 12)
155   (LOAD 10)
156   (CONS&PUSH)
157   (LIST&PUSH 9)
159   (LOAD&PUSH 0)
160   (JMP L180)
162   L162
162   (LOAD&CAR&PUSH 0)
164   (LOAD 0)
165   (BIND 11)                           ; X
167   (GETVALUE 11)                       ; X
169   (CAR&PUSH)
170   (GETVALUE 11)                       ; X
172   (CDR&PUSH)
173   (CALL2 12)                          ; LG-DRAW-VECTOR
175   (UNBIND1)
176   (SKIP 1)
178   (LOAD&CDR&STORE 0)
180   L180
180   (LOAD&PUSH 0)
181   (CALLS1&JMPIFNOT 146 L162)          ; ENDP
184   (SKIP 2)
186   (LOAD&PUSH 3)
187   (CONST&PUSH 5)                      ; 4
188   (CALLSR&PUSH 2 53)                  ; +
191   (LOAD&PUSH 1)
192   (CONST&PUSH 9)                      ; 6
193   (CALLSR&PUSH 1 54)                  ; -
196   (CALL2 10)                          ; LG-SET-POINT
198   (LOAD&PUSH 3)
199   (LOAD&PUSH 1)
200   (CALL2 12)                          ; LG-DRAW-VECTOR
202   (LOAD&PUSH 5)
203   (LOAD&PUSH 1)
204   (CALL2 12)                          ; LG-DRAW-VECTOR
206   (LOAD&PUSH 5)
207   (LOAD&DEC&PUSH 1)
209   (CALL2 12)                          ; LG-DRAW-VECTOR
211   (LOAD&PUSH 3)
212   (LOAD&DEC&PUSH 1)
214   (CALL2 12)                          ; LG-DRAW-VECTOR
216   (SKIP 6)
218   (GETVALUE&PUSH 7)                   ; OLDROW
220   (GETVALUE&PUSH 3)                   ; OLDCOL
222   (CONST&PUSH 5)                      ; 4
223   (CALLSR&PUSH 2 53)                  ; +
226   (CALL2 13)                          ; CURSORPOS*
228   (SKIP&RET 3)
230   L230
230   (CALL0 15)                          ; CG-BEGIN-GRAPHICS
232   (CALL0 14)                          ; CG-D-SUMSIGN
234   (CALL0 16)                          ; CG-END-GRAPHICS
236   (GETVALUE&PUSH 3)                   ; OLDCOL
238   (CONST&PUSH 5)                      ; 4
239   (CALLSR 2 53)                       ; +
242   (SETVALUE 3)                        ; OLDCOL
244   (SKIP&RET 3)
246   L246
246   (LOAD&PUSH 0)
247   (GETVALUE&PUSH 7)                   ; OLDROW
249   (GETVALUE&PUSH 3)                   ; OLDCOL
251   (CALL 3 18)                         ; DRAW-LINEAR
254   (SKIP&RET 3)


Disassembly of function #:|(DEFUN D-MATRIX (LINEAR? DIRECTION H ...) ...)-149|
(CONST 0) = D-MATRIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D-MATRIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D-MATRIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D-MATRIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D-MATRIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D-MATRIX
8     (SKIP&RET 1)


Disassembly of function D-MATRIX
(CONST 0) = LINE-GRAPHICS-TTY
(CONST 1) = $LINEDISP
(CONST 2) = LG-CHARACTER-X
(CONST 3) = OLDCOL
(CONST 4) = LG-CHARACTER-Y
(CONST 5) = OLDROW
(CONST 6) = 1
(CONST 7) = 2
(CONST 8) = RIGHT
(CONST 9) = LG-SET-POINT
(CONST 10) = LG-DRAW-VECTOR
(CONST 11) = CURSORPOS*
(CONST 12) = CHARACTER-GRAPHICS-TTY
(CONST 13) = $RMXCHAR
(CONST 14) = $LMXCHAR
(CONST 15) = GETCHARN
(CONST 16) = TYO*
(CONST 17) = CG-BEGIN-GRAPHICS
(CONST 18) = CG-UR-CORNER
(CONST 19) = CG-UL-CORNER
(CONST 20) = CG-END-GRAPHICS
(CONST 21) = -1
(CONST 22) = D-VBAR
(CONST 23) = CG-LR-CORNER
(CONST 24) = CG-LL-CORNER
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($LMXCHAR $RMXCHAR LG-CHARACTER-Y LG-CHARACTER-X OLDCOL OLDROW
 CHARACTER-GRAPHICS-TTY $LINEDISP LINE-GRAPHICS-TTY)
157 byte-code instructions:
0     (LOAD&JMPIF 4 L12)
3     (GETVALUE 0)                        ; LINE-GRAPHICS-TTY
5     (JMPIFNOT L12)
7     (GETVALUE 1)                        ; $LINEDISP
9     (JMPIF L121)
12    L12
12    (LOAD&JMPIF 4 L261)
16    (GETVALUE 12)                       ; CHARACTER-GRAPHICS-TTY
18    (JMPIFNOT L261)
21    (GETVALUE 1)                        ; $LINEDISP
23    (JMPIFNOT L261)
26    (LOAD&PUSH 2)
27    (LOAD&PUSH 2)
28    (CALLSR&PUSH 2 53)                  ; +
31    (CONST&PUSH 6)                      ; 1
32    (CALLSR&JMPIF 1 45 L212)            ; =
37    (GETVALUE&PUSH 5)                   ; OLDROW
39    (CONST&PUSH 6)                      ; 1
40    (LOAD&PUSH 4)
41    (CALLSR&PUSH 0 54)                  ; -
44    (CALLSR&PUSH 3 53)                  ; +
47    (GETVALUE&PUSH 3)                   ; OLDCOL
49    (CALL2 11)                          ; CURSORPOS*
51    (CALL0 17)                          ; CG-BEGIN-GRAPHICS
53    (LOAD&PUSH 3)
54    (JMPIFEQTO 8 L226)                  ; RIGHT
58    (CALL0 19)                          ; CG-UL-CORNER
60    L60
60    (CALL0 20)                          ; CG-END-GRAPHICS
62    (GETVALUE&PUSH 5)                   ; OLDROW
64    (CONST&PUSH 21)                     ; -1
65    (LOAD&PUSH 4)
66    (CALLSR&PUSH 3 53)                  ; +
69    (GETVALUE&PUSH 3)                   ; OLDCOL
71    (CALL2 11)                          ; CURSORPOS*
73    (LOAD&PUSH 2)
74    (LOAD&PUSH 2)
75    (CALLSR&PUSH 2 53)                  ; +
78    (CONST&PUSH 7)                      ; 2
79    (CALLSR&JMPIF 1 48 L231)            ; >
84    (GETVALUE&PUSH 5)                   ; OLDROW
86    (LOAD&PUSH 2)
87    (CALLSR&PUSH 2 53)                  ; +
90    (GETVALUE 3)                        ; OLDCOL
92    L92
92    (PUSH)
93    (CALL2 11)                          ; CURSORPOS*
95    (CALL0 17)                          ; CG-BEGIN-GRAPHICS
97    (LOAD&PUSH 3)
98    (JMPIFEQTO 8 L252)                  ; RIGHT
102   (CALL0 24)                          ; CG-LL-CORNER
104   L104
104   (CALL0 20)                          ; CG-END-GRAPHICS
106   (GETVALUE&PUSH 5)                   ; OLDROW
108   (LOAD&PUSH 2)
109   (CALLSR 1 54)                       ; -
112   L112
112   (PUSH)
113   (GETVALUE&PUSH 3)                   ; OLDCOL
115   (CALLS2&PUSH 150)                   ; 1+
117   (CALL2 11)                          ; CURSORPOS*
119   (SKIP&RET 5)
121   L121
121   (GETVALUE&PUSH 2)                   ; LG-CHARACTER-X
123   (GETVALUE&PUSH 3)                   ; OLDCOL
125   (CALLSR&PUSH 2 55)                  ; *
128   (CALLS2&PUSH 150)                   ; 1+
130   (GETVALUE&PUSH 2)                   ; LG-CHARACTER-X
132   (GETVALUE&PUSH 3)                   ; OLDCOL
134   (CALLS2&PUSH 150)                   ; 1+
136   (CALLSR&PUSH 2 55)                  ; *
139   (CALLS2&PUSH 151)                   ; 1-
141   (GETVALUE&PUSH 4)                   ; LG-CHARACTER-Y
143   (GETVALUE&PUSH 5)                   ; OLDROW
145   (CONST&PUSH 6)                      ; 1
146   (LOAD&PUSH 7)
147   (CALLSR&PUSH 0 54)                  ; -
150   (CALLSR&PUSH 3 53)                  ; +
153   (CALLSR&PUSH 2 55)                  ; *
156   (CONST&PUSH 7)                      ; 2
157   (CALLSR&PUSH 2 53)                  ; +
160   (GETVALUE&PUSH 4)                   ; LG-CHARACTER-Y
162   (GETVALUE&PUSH 5)                   ; OLDROW
164   (CONST&PUSH 6)                      ; 1
165   (LOAD&PUSH 7)
166   (CALLSR&PUSH 3 53)                  ; +
169   (CALLSR&PUSH 2 55)                  ; *
172   (CONST&PUSH 7)                      ; 2
173   (CALLSR&PUSH 1 54)                  ; -
176   (LOAD&PUSH 7)
177   (JMPIFNOTEQTO 8 L185)               ; RIGHT
180   (LOAD&PUSH 2)
181   (LOAD 4)
182   (STORE 3)
183   (POP&STORE 3)
185   L185
185   (LOAD&PUSH 2)
186   (LOAD&PUSH 2)
187   (CALL2 9)                           ; LG-SET-POINT
189   (LOAD&PUSH 3)
190   (LOAD&PUSH 2)
191   (CALL2 10)                          ; LG-DRAW-VECTOR
193   (LOAD&PUSH 3)
194   (LOAD&PUSH 1)
195   (CALL2 10)                          ; LG-DRAW-VECTOR
197   (LOAD&PUSH 2)
198   (LOAD&PUSH 1)
199   (CALL2 10)                          ; LG-DRAW-VECTOR
201   (SKIP 4)
203   (GETVALUE 5)                        ; OLDROW
205   (JMP L112)
208   L208
208   (GETVALUE 13)                       ; $RMXCHAR
210   (JMP L218)
212   L212
212   (LOAD&PUSH 3)
213   (JMPIFEQTO 8 L208)                  ; RIGHT
216   (GETVALUE 14)                       ; $LMXCHAR
218   L218
218   (PUSH)
219   (CONST&PUSH 7)                      ; 2
220   (CALL2&PUSH 15)                     ; GETCHARN
222   (CALL1 16)                          ; TYO*
224   (SKIP&RET 5)
226   L226
226   (CALL0 18)                          ; CG-UR-CORNER
228   (JMP L60)
231   L231
231   (NIL&PUSH)
232   (LOAD&DEC&PUSH 3)
234   (LOAD&DEC&PUSH 3)
236   (CALL 3 22)                         ; D-VBAR
239   (GETVALUE&PUSH 5)                   ; OLDROW
241   (LOAD&PUSH 2)
242   (CALLSR&PUSH 2 53)                  ; +
245   (GETVALUE&PUSH 3)                   ; OLDCOL
247   (CALLS2 151)                        ; 1-
249   (JMP L92)
252   L252
252   (CALL0 23)                          ; CG-LR-CORNER
254   (JMP L104)
257   L257
257   (GETVALUE 13)                       ; $RMXCHAR
259   (JMP L270)
261   L261
261   (LOAD&PUSH 4)
262   (LOAD&PUSH 3)
263   (LOAD&PUSH 3)
264   (LOAD&PUSH 6)
265   (JMPIFEQTO 8 L257)                  ; RIGHT
268   (GETVALUE 14)                       ; $LMXCHAR
270   L270
270   (PUSH)
271   (CONST&PUSH 7)                      ; 2
272   (CALL2&PUSH 15)                     ; GETCHARN
274   (CALL 4 22)                         ; D-VBAR
277   (SKIP&RET 5)


Disassembly of function #:|(DEFUN D-BOX (LINEAR? H D ...) ...)-150|
(CONST 0) = D-BOX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D-BOX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D-BOX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D-BOX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D-BOX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D-BOX
8     (SKIP&RET 1)


Disassembly of function D-BOX
(CONST 0) = W
(CONST 1) = 0
(CONST 2) = LINE-GRAPHICS-TTY
(CONST 3) = $LINEDISP
(CONST 4) = LG-CHARACTER-X
(CONST 5) = OLDCOL
(CONST 6) = 2
(CONST 7) = LG-CHARACTER-Y
(CONST 8) = OLDROW
(CONST 9) = LG-SET-POINT
(CONST 10) = LG-DRAW-VECTOR
(CONST 11) = CURSORPOS*
(CONST 12) = DRAW-2D
(CONST 13) = 1
(CONST 14) = CHARACTER-GRAPHICS-TTY
(CONST 15) = LEFT
(CONST 16) = D-MATRIX
(CONST 17) = D-HBAR
(CONST 18) = RIGHT
(CONST 19) = $BOXCHAR
(CONST 20) = GETCHARN
(CONST 21) = (0)
(CONST 22) = D-VBAR
(CONST 23) = (-1 0)
(CONST 24) = DRAW-LINEAR
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(LG-CHARACTER-Y LG-CHARACTER-X OLDCOL OLDROW W $BOXCHAR CHARACTER-GRAPHICS-TTY
 $LINEDISP LINE-GRAPHICS-TTY)
181 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; W
3     (CONST&PUSH 1)                      ; 0
4     (NIL&PUSH)
5     (LOAD&JMPIF 10 L17)
8     (GETVALUE 2)                        ; LINE-GRAPHICS-TTY
10    (JMPIFNOT L17)
12    (GETVALUE 3)                        ; $LINEDISP
14    (JMPIF L124)
17    L17
17    (LOAD&JMPIF 10 L29)
20    (GETVALUE 14)                       ; CHARACTER-GRAPHICS-TTY
22    (JMPIFNOT L29)
24    (GETVALUE 3)                        ; $LINEDISP
26    (JMPIF L226)
29    L29
29    (GETVALUE&PUSH 19)                  ; $BOXCHAR
31    (CONST&PUSH 6)                      ; 2
32    (CALL2 20)                          ; GETCHARN
34    (STORE 1)
35    (CONST&PUSH 1)                      ; 0
36    (LOAD&PUSH 10)
37    (CONST&PUSH 17)                     ; D-HBAR
38    (CONST&PUSH 6)                      ; 2
39    (GETVALUE&PUSH 0)                   ; W
41    (CALLSR&PUSH 2 53)                  ; +
44    (LOAD&PUSH 5)
45    (LIST&PUSH 3)
47    (LIST&PUSH 3)
49    (GETVALUE&PUSH 0)                   ; W
51    (CONST&PUSH 6)                      ; 2
52    (CALLSR&PUSH 2 53)                  ; +
55    (CALLSR&PUSH 0 54)                  ; -
58    (CONST 21)                          ; (0)
60    (CONS&PUSH)
61    (CONST&PUSH 22)                     ; D-VBAR
62    (LOAD&PUSH 12)
63    (LOAD&PUSH 12)
64    (LOAD&PUSH 6)
65    (LIST&PUSH 4)
67    (LOAD&PUSH 9)
68    (GETVALUE&PUSH 0)                   ; W
70    (CALLS2&PUSH 150)                   ; 1+
72    (CALLSR&PUSH 0 54)                  ; -
75    (LOAD&INC&PUSH 13)
77    (CALLSR&PUSH 0 54)                  ; -
80    (CONST&PUSH 17)                     ; D-HBAR
81    (GETVALUE&PUSH 0)                   ; W
83    (CONST&PUSH 6)                      ; 2
84    (CALLSR&PUSH 2 53)                  ; +
87    (LOAD&PUSH 9)
88    (LIST&PUSH 3)
90    (LIST&PUSH 3)
92    (CONST&PUSH 23)                     ; (-1 0)
93    (CONST&PUSH 22)                     ; D-VBAR
94    (LOAD&PUSH 16)
95    (LOAD&PUSH 16)
96    (LOAD&PUSH 10)
97    (LIST&PUSH 4)
99    (LIST&PUSH 3)
101   (CALLSR 2 34)                       ; APPEND
104   (LIST* 3)
106   (STORE 0)
107   (LOAD&JMPIF 10 L317)
111   (LOAD&PUSH 0)
112   (GETVALUE&PUSH 8)                   ; OLDROW
114   (GETVALUE&PUSH 5)                   ; OLDCOL
116   (CALL 3 12)                         ; DRAW-2D
119   L119
119   (SKIP 2)
121   (UNBIND1)
122   (SKIP&RET 6)
124   L124
124   (GETVALUE&PUSH 4)                   ; LG-CHARACTER-X
126   (GETVALUE&PUSH 5)                   ; OLDCOL
128   (CALLSR&PUSH 2 55)                  ; *
131   (GETVALUE&PUSH 4)                   ; LG-CHARACTER-X
133   (GETVALUE&PUSH 5)                   ; OLDCOL
135   (GETVALUE&PUSH 0)                   ; W
137   (CONST&PUSH 6)                      ; 2
138   (CALLSR&PUSH 3 53)                  ; +
141   (CALLSR&PUSH 2 55)                  ; *
144   (GETVALUE&PUSH 7)                   ; LG-CHARACTER-Y
146   (GETVALUE&PUSH 8)                   ; OLDROW
148   (LOAD&PUSH 13)
149   (CALLSR&PUSH 1 54)                  ; -
152   (CALLSR&PUSH 2 55)                  ; *
155   (CONST&PUSH 6)                      ; 2
156   (CALLSR&PUSH 2 53)                  ; +
159   (GETVALUE&PUSH 7)                   ; LG-CHARACTER-Y
161   (GETVALUE&PUSH 8)                   ; OLDROW
163   (LOAD&PUSH 13)
164   (CONST&PUSH 6)                      ; 2
165   (CALLSR&PUSH 3 53)                  ; +
168   (CALLSR&PUSH 2 55)                  ; *
171   (CONST&PUSH 6)                      ; 2
172   (CALLSR&PUSH 1 54)                  ; -
175   (LOAD&PUSH 3)
176   (LOAD&PUSH 2)
177   (CALL2 9)                           ; LG-SET-POINT
179   (LOAD&PUSH 2)
180   (LOAD&PUSH 2)
181   (CALL2 10)                          ; LG-DRAW-VECTOR
183   (LOAD&PUSH 2)
184   (LOAD&PUSH 1)
185   (CALL2 10)                          ; LG-DRAW-VECTOR
187   (LOAD&PUSH 3)
188   (LOAD&PUSH 1)
189   (CALL2 10)                          ; LG-DRAW-VECTOR
191   (LOAD&PUSH 3)
192   (LOAD&PUSH 2)
193   (CALL2 10)                          ; LG-DRAW-VECTOR
195   (SKIP 4)
197   (GETVALUE&PUSH 8)                   ; OLDROW
199   (GETVALUE&PUSH 5)                   ; OLDCOL
201   (CALLS2&PUSH 150)                   ; 1+
203   (CALL2 11)                          ; CURSORPOS*
205   (LOAD&PUSH 6)
206   (GETVALUE&PUSH 8)                   ; OLDROW
208   (GETVALUE&PUSH 5)                   ; OLDCOL
210   (CALL 3 12)                         ; DRAW-2D
213   (GETVALUE&PUSH 8)                   ; OLDROW
215   (GETVALUE&PUSH 5)                   ; OLDCOL
217   (CONST&PUSH 13)                     ; 1
218   (CALLSR&PUSH 2 53)                  ; +
221   (CALL2 11)                          ; CURSORPOS*
223   (JMP L119)
226   L226
226   (NIL&PUSH)
227   (CONST&PUSH 15)                     ; LEFT
228   (LOAD&INC&PUSH 11)
230   (LOAD&INC&PUSH 11)
232   (CALL 4 16)                         ; D-MATRIX
235   (GETVALUE&PUSH 8)                   ; OLDROW
237   (LOAD&PUSH 10)
238   (CALLSR&PUSH 1 54)                  ; -
241   (GETVALUE&PUSH 5)                   ; OLDCOL
243   (CALL2 11)                          ; CURSORPOS*
245   (NIL&PUSH)
246   (GETVALUE&PUSH 0)                   ; W
248   (CALL2 17)                          ; D-HBAR
250   (GETVALUE&PUSH 8)                   ; OLDROW
252   (LOAD&PUSH 10)
253   (CALLSR&PUSH 2 53)                  ; +
256   (GETVALUE&PUSH 5)                   ; OLDCOL
258   (GETVALUE&PUSH 0)                   ; W
260   (CALLSR&PUSH 1 54)                  ; -
263   (CALL2 11)                          ; CURSORPOS*
265   (LOAD&PUSH 6)
266   (GETVALUE&PUSH 8)                   ; OLDROW
268   (GETVALUE&PUSH 5)                   ; OLDCOL
270   (CALL 3 12)                         ; DRAW-2D
273   (GETVALUE&PUSH 8)                   ; OLDROW
275   (LOAD&PUSH 9)
276   (CONST&PUSH 13)                     ; 1
277   (CALLSR&PUSH 3 53)                  ; +
280   (GETVALUE&PUSH 5)                   ; OLDCOL
282   (GETVALUE&PUSH 0)                   ; W
284   (CALLSR&PUSH 1 54)                  ; -
287   (CALL2 11)                          ; CURSORPOS*
289   (NIL&PUSH)
290   (GETVALUE&PUSH 0)                   ; W
292   (CALL2 17)                          ; D-HBAR
294   (GETVALUE&PUSH 8)                   ; OLDROW
296   (LOAD&PUSH 9)
297   (CONST&PUSH 13)                     ; 1
298   (CALLSR&PUSH 2 54)                  ; -
301   (GETVALUE&PUSH 5)                   ; OLDCOL
303   (CALL2 11)                          ; CURSORPOS*
305   (NIL&PUSH)
306   (CONST&PUSH 18)                     ; RIGHT
307   (LOAD&INC&PUSH 11)
309   (LOAD&INC&PUSH 11)
311   (CALL 4 16)                         ; D-MATRIX
314   (JMP L119)
317   L317
317   (LOAD&PUSH 0)
318   (GETVALUE&PUSH 8)                   ; OLDROW
320   (GETVALUE&PUSH 5)                   ; OLDCOL
322   (CALL 3 24)                         ; DRAW-LINEAR
325   (JMP L119)


Disassembly of function #:|(DEFUN CURSORPOS* (ROW COL) ...)-151|
(CONST 0) = CURSORPOS*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CURSORPOS*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CURSORPOS*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CURSORPOS*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CURSORPOS*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CURSORPOS*
8     (SKIP&RET 1)


Disassembly of function CURSORPOS*
(CONST 0) = CURSORPOS
(CONST 1) = OLDROW
(CONST 2) = OLDCOL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (OLDCOL OLDROW)
8 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALL2 0)                           ; CURSORPOS
4     (LOAD 2)
5     (SETVALUE 1)                        ; OLDROW
7     (LOAD 1)
8     (SETVALUE 2)                        ; OLDCOL
10    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TYO* (CHAR) ...)-152|
(CONST 0) = TYO*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TYO*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TYO*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TYO*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TYO*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TYO*
8     (SKIP&RET 1)


Disassembly of function TYO*
(CONST 0) = #\Backspace
(CONST 1) = OLDCOL
(CONST 2) = #\U0080
(CONST 3) = TYO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (OLDCOL)
writes special variable : (OLDCOL)
18 byte-code instructions:
0     (CONST&PUSH 0)                      ; #\Backspace
1     (LOAD&PUSH 2)
2     (CALLSR&JMPIF 1 7 L23)              ; CHAR=
6     (LOAD&PUSH 1)
7     (CONST&PUSH 2)                      ; #\U0080
8     (CALLSR&JMPIFNOT 1 9 L18)           ; CHAR<
12    (GETVALUE&PUSH 1)                   ; OLDCOL
14    (CALLS2 150)                        ; 1+
16    (SETVALUE 1)                        ; OLDCOL
18    L18
18    (LOAD&PUSH 1)
19    (CALL1 3)                           ; TYO
21    (SKIP&RET 2)
23    L23
23    (GETVALUE&PUSH 1)                   ; OLDCOL
25    (CALLS2 151)                        ; 1-
27    (SETVALUE 1)                        ; OLDCOL
29    (JMP L18)


Disassembly of function #:|(PROGN 'COMPILE (DEFMFUN CG-TYO # ...) ...)-153-2|
(CONST 0) = CG-TYO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CG-TYO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CG-TYO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CG-TYO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CG-TYO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function CG-TYO
(CONST 0) = TYO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; TYO
3     (SKIP&RET 2)


Disassembly of function #:|(PROGN 'COMPILE (DEFMFUN CG-TYO # ...) ...)-153-3|
(CONST 0) = CG-IMAGE-TYO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CG-IMAGE-TYO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CG-IMAGE-TYO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CG-IMAGE-TYO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CG-IMAGE-TYO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CG-IMAGE-TYO
8     (SKIP&RET 1)


Disassembly of function CG-IMAGE-TYO
(CONST 0) = TYO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; TYO
3     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN CG-TYO-N (L) ...)-154|
(CONST 0) = CG-TYO-N
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CG-TYO-N>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CG-TYO-N
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CG-TYO-N
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CG-TYO-N>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CG-TYO-N
8     (SKIP&RET 1)


Disassembly of function CG-TYO-N
(CONST 0) = L
(CONST 1) = CG-TYO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; CG-TYO
5     (GETVALUE&PUSH 0)                   ; L
7     (CALLSR 0 24)                       ; MAPC
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN CG-IMAGE-TYO-N (L) ...)-155|
(CONST 0) = CG-IMAGE-TYO-N
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CG-IMAGE-TYO-N>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CG-IMAGE-TYO-N
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CG-IMAGE-TYO-N
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CG-IMAGE-TYO-N>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CG-IMAGE-TYO-N
8     (SKIP&RET 1)


Disassembly of function CG-IMAGE-TYO-N
(CONST 0) = L
(CONST 1) = CG-IMAGE-TYO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; CG-IMAGE-TYO
5     (GETVALUE&PUSH 0)                   ; L
7     (CALLSR 0 24)                       ; MAPC
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFVAR *BIG-CHUNK-SIZE* 9)-156|
(CONST 0) = (SPECIAL *BIG-CHUNK-SIZE*)
(CONST 1) = *BIG-CHUNK-SIZE*
(CONST 2) = 9
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *BIG-CHUNK-SIZE*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *BIG-CHUNK-SIZE*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *BIG-CHUNK-SIZE*
8     (CONST&PUSH 2)                      ; 9
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *BIG-CHUNK-SIZE*
12    (SKIP&RET 1)


Disassembly of function #:|(SETQ *TENTOCHUNKSIZE* (EXPT 10 *BIG-CHUNK-SIZE*))-157|
(CONST 0) = 10
(CONST 1) = *BIG-CHUNK-SIZE*
(CONST 2) = *TENTOCHUNKSIZE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*BIG-CHUNK-SIZE*)
writes special variable : (*TENTOCHUNKSIZE*)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; 10
1     (GETVALUE&PUSH 1)                   ; *BIG-CHUNK-SIZE*
3     (CALLS2 154)                        ; EXPT
5     (SETVALUE 2)                        ; *TENTOCHUNKSIZE*
7     (SKIP&RET 1)

WARNING in (DEFUN EXPLODEN (SYMB &AUX STRING) ...)-158 in lines 1813..1847 :
Function EXPLODEN
 was already defined in file #P"/cygdrive/e/temp/maxima/src/commac.lisp" in lines 665..698

Disassembly of function #:|(DEFUN EXPLODEN (SYMB &AUX STRING) ...)-158|
(CONST 0) = EXPLODEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPLODEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPLODEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPLODEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPLODEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPLODEN
8     (SKIP&RET 1)


Disassembly of function EXPLODEN
(CONST 0) = STRING
(CONST 1) = 0.0
(CONST 2) = 0.001
(CONST 3) = 1.0E7
(CONST 4) = $FPPREC
(CONST 5) = SYSTEM::DO-FORMAT-FIXED-FLOAT
(CONST 6) = 4
(CONST 7) = SYSTEM::DO-FORMAT-EXPONENTIAL-FLOAT
(CONST 8) = " "
(CONST 9) = STRING-LEFT-TRIM
(CONST 10) = #(NIL)
(CONST 11) = :NAME
(CONST 12) = COMMON-LISP:CONTINUE
(CONST 13) = :INVOKE-FUNCTION
(CONST 14) = #<COMPILED-CLOSURE EXPLODEN-1>
(CONST 15) = :REPORT
(CONST 16) = SYSTEM::REPORT-NO-NEW-VALUE
(CONST 17) = :INTERACTIVE
(CONST 18) = SYSTEM::ASSERT-RESTART-NO-PROMPTS
(CONST 19) = SYSTEM::MAKE-RESTART
(CONST 20) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 21) = SYSTEM::*CONDITION-RESTARTS*
(CONST 22) = (#(CONDITION 118) 1 . 1)
(CONST 23) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 24) = SIGNAL
(CONST 25) = "~A"
(CONST 26) = (STRINGP STRING)
(CONST 27) = SYSTEM::ASSERT-ERROR-STRING
(CONST 28) = LIST-STRING
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS* STRING $FPPREC)
writes special variable : (STRING)
119 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; STRING
3     (LOAD&PUSH 4)
4     (CALLS2&JMPIF 6 L29)                ; SYMBOLP
7     (LOAD&PUSH 4)
8     (CALLS2&JMPIF 15 L57)               ; FLOATP
11    (PUSH-UNBOUND 2)
13    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
15    (LOAD&PUSH 5)
16    (LOAD&PUSH 1)
17    (CALLS1 132)                        ; PRINC
19    (LOAD&PUSH 0)
20    (CALLS2 118)                        ; GET-OUTPUT-STREAM-STRING
22    (SKIP 1)
24    (SETVALUE 0)                        ; STRING
26    (JMP L193)
29    L29
29    (LOAD&PUSH 4)
30    (CALLS2 140)                        ; SYMBOL-NAME
32    (SETVALUE 0)                        ; STRING
34    (JMP L193)
37    L37
37    (PUSH-UNBOUND 2)
39    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
41    (GETVALUE&PUSH 4)                   ; $FPPREC
43    (CALLS2&PUSH 150)                   ; 1+
45    (LOAD&PUSH 1)
46    (PUSH-NIL 2)
48    (LOAD&PUSH 3)
49    (PUSH-NIL 4)
51    (LOAD&PUSH 15)
52    (CALL 9 5)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
55    (JMP L97)
57    L57
57    (LOAD&PUSH 4)
58    (CALLS2&PUSH 158)                   ; ABS
60    (LOAD&PUSH 0)
61    (CONST&PUSH 1)                      ; 0.0
62    (CALLS2&JMPIF 1 L37)                ; EQL
65    (LOAD&PUSH 0)
66    (CONST&PUSH 2)                      ; 0.001
67    (CALLSR&JMPIFNOT 1 50 L77)          ; >=
71    (LOAD&PUSH 0)
72    (CONST&PUSH 3)                      ; 1.0E7
73    (CALLSR&JMPIF 1 49 L37)             ; <=
77    L77
77    (PUSH-UNBOUND 2)
79    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
81    (CONST&PUSH 6)                      ; 4
82    (GETVALUE&PUSH 4)                   ; $FPPREC
84    (CALLSR&PUSH 2 53)                  ; +
87    (LOAD&PUSH 1)
88    (PUSH-NIL 2)
90    (LOAD&PUSH 3)
91    (PUSH-NIL 6)
93    (LOAD&PUSH 17)
94    (CALL 11 7)                         ; SYSTEM::DO-FORMAT-EXPONENTIAL-FLOAT
97    L97
97    (SKIP 1)
99    (LOAD&PUSH 0)
100   (CALLS2 118)                        ; GET-OUTPUT-STREAM-STRING
102   (SKIP 1)
104   (SETVALUE 0)                        ; STRING
106   (SKIP 1)
108   (CONST&PUSH 8)                      ; " "
109   (GETVALUE&PUSH 0)                   ; STRING
111   (CALL2 9)                           ; STRING-LEFT-TRIM
113   (SETVALUE 0)                        ; STRING
115   (JMP L193)
118   L118
118   (HANDLER-BEGIN&PUSH)
119   (LOAD&PUSH 0)
120   (LOADI&PUSH 0 0 6)
124   (CALL2 23)                          ; SYSTEM::ADD-CONDITION-RESTARTS
126   (LOAD&PUSH 0)
127   (CALL1 24)                          ; SIGNAL
129   (SKIPSP 2 1)
132   (SKIP&RET 2)
134   L134
134   (NIL)
135   (MAKE-VECTOR1&PUSH 1)
137   (NIL)
138   (STOREC 0 0)
141   (TAGBODY-OPEN 10 L184)              ; #(NIL)
144   (CONST&PUSH 11)                     ; :NAME
145   (CONST&PUSH 12)                     ; COMMON-LISP:CONTINUE
146   (CONST&PUSH 13)                     ; :INVOKE-FUNCTION
147   (LOAD&PUSH 7)
148   (LOAD&PUSH 6)
149   (COPY-CLOSURE&PUSH 14 2)            ; #<COMPILED-CLOSURE EXPLODEN-1>
152   (CONST&PUSH 15)                     ; :REPORT
153   (CONST&SYMBOL-FUNCTION&PUSH 16)     ; SYSTEM::REPORT-NO-NEW-VALUE
155   (CONST&PUSH 17)                     ; :INTERACTIVE
156   (CONST&SYMBOL-FUNCTION&PUSH 18)     ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
158   (CALL&PUSH 8 19)                    ; SYSTEM::MAKE-RESTART
161   (LIST&PUSH 1)
163   (LOAD&PUSH 0)
164   (GETVALUE&PUSH 20)                  ; SYSTEM::*ACTIVE-RESTARTS*
166   (CALLSR 2 34)                       ; APPEND
169   (BIND 20)                           ; SYSTEM::*ACTIVE-RESTARTS*
171   (GETVALUE 21)                       ; SYSTEM::*CONDITION-RESTARTS*
173   (BIND 21)                           ; SYSTEM::*CONDITION-RESTARTS*
175   (HANDLER-OPEN 22 L118)              ; (#(CONDITION 118) 1 . 1)
177   (CONST&PUSH 25)                     ; "~A"
178   (CONST&PUSH 26)                     ; (STRINGP STRING)
179   (CALL1&PUSH 27)                     ; SYSTEM::ASSERT-ERROR-STRING
181   (CALLSR 1 29)                       ; ERROR
184   L184
184   (LOADC 4 0)
187   (UNLIST 0 0)
190   (TAGBODY-CLOSE)
191   (SKIP 1)
193   L193
193   (GETVALUE&PUSH 0)                   ; STRING
195   (CALLS2&JMPIFNOT 7 L134)            ; STRINGP
198   (GETVALUE&PUSH 0)                   ; STRING
200   (CALL1 28)                          ; LIST-STRING
202   (UNBIND1)
203   (SKIP&RET 2)


Disassembly of function EXPLODEN-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Wrote file binary-clisp/displa.fas
Wrote file /cygdrive/e/temp/maxima/src/displa.lis