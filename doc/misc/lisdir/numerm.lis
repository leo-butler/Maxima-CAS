Listing of compilation of file /cygdrive/e/temp/maxima/src/numerm.lisp
on 2002-12-17 13:32:04 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/numerm.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE NUMERM MACRO)-2|
(CONST 0) = NUMERM
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (MACRO)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUMERM
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (MACRO)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO MAKE-ARRAY$ (&REST L) ...)-3|
(CONST 0) = MAKE-ARRAY$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-ARRAY$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-ARRAY$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-ARRAY$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-ARRAY$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MAKE-ARRAY$
10    (SKIP&RET 1)


Disassembly of function MAKE-ARRAY$
(CONST 0) = MAKE-ARRAY
(CONST 1) = LIST
(CONST 2) = (:ELEMENT-TYPE 'DOUBLE-FLOAT)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; MAKE-ARRAY
3     (CONST&PUSH 1)                      ; LIST
4     (LOAD 2)
5     (CONS&PUSH)
6     (CONST 2)                           ; (:ELEMENT-TYPE 'DOUBLE-FLOAT)
7     (LIST* 2)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO MAKE-ARRAY% (&REST L) ...)-4|
(CONST 0) = MAKE-ARRAY%
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-ARRAY%>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-ARRAY%
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-ARRAY%
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-ARRAY%>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MAKE-ARRAY%
10    (SKIP&RET 1)


Disassembly of function MAKE-ARRAY%
(CONST 0) = MAKE-ARRAY
(CONST 1) = LIST
(CONST 2) = (:ELEMENT-TYPE 'FIXNUM)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; MAKE-ARRAY
3     (CONST&PUSH 1)                      ; LIST
4     (LOAD 2)
5     (CONS&PUSH)
6     (CONST 2)                           ; (:ELEMENT-TYPE 'FIXNUM)
7     (LIST* 2)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO AREF$ (&REST L) ...)-5|
(CONST 0) = AREF$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE AREF$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; AREF$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AREF$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE AREF$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; AREF$
10    (SKIP&RET 1)


Disassembly of function AREF$
(CONST 0) = AREF
(CONST 1) = THE
(CONST 2) = (SIMPLE-ARRAY DOUBLE-FLOAT)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; AREF
3     (CONST&PUSH 1)                      ; THE
4     (CONST&PUSH 2)                      ; (SIMPLE-ARRAY DOUBLE-FLOAT)
5     (LOAD&CAR&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD 2)
10    (CDR)
11    (LIST* 2)
13    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO AREF% (&REST L) ...)-6|
(CONST 0) = AREF%
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE AREF%>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; AREF%
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AREF%
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE AREF%>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; AREF%
10    (SKIP&RET 1)


Disassembly of function AREF%
(CONST 0) = AREF
(CONST 1) = THE
(CONST 2) = (SIMPLE-ARRAY FIXNUM)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; AREF
3     (CONST&PUSH 1)                      ; THE
4     (CONST&PUSH 2)                      ; (SIMPLE-ARRAY FIXNUM)
5     (LOAD&CAR&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD 2)
10    (CDR)
11    (LIST* 2)
13    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO FREE-ARRAY% (A) ...)-7|
(CONST 0) = FREE-ARRAY%
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREE-ARRAY%>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREE-ARRAY%
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREE-ARRAY%
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREE-ARRAY%>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; FREE-ARRAY%
10    (SKIP&RET 1)


Disassembly of function FREE-ARRAY%
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L13)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (SKIP&RET 3)
13    L13
13    (LOAD&PUSH 2)
14    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO FREE-ARRAY$ (A) ...)-8|
(CONST 0) = FREE-ARRAY$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREE-ARRAY$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREE-ARRAY$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREE-ARRAY$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREE-ARRAY$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; FREE-ARRAY$
10    (SKIP&RET 1)


Disassembly of function FREE-ARRAY$
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L13)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (SKIP&RET 3)
13    L13
13    (LOAD&PUSH 2)
14    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DEFBINDTRAMP$ (NARGS) ...)-9|
(CONST 0) = DEFBINDTRAMP$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFBINDTRAMP$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFBINDTRAMP$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFBINDTRAMP$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFBINDTRAMP$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEFBINDTRAMP$
10    (SKIP&RET 1)


Disassembly of function DEFBINDTRAMP$
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = BIND-TRAMP
(CONST 3) = $
(CONST 4) = SYMBOLCONC
(CONST 5) = TRAMP
(CONST 6) = PROGN
(CONST 7) = 'COMPILE
(CONST 8) = PROCLAIM
(CONST 9) = QUOTE
(CONST 10) = SPECIAL
(CONST 11) = DEFMACRO
(CONST 12) = (F G &REST BODY)
(CONST 13) = SYSTEM::BACKQUOTE
(CONST 14) = LET
(CONST 15) = (SYSTEM::UNQUOTE F)
(CONST 16) = MAKE-TRAMP$
(CONST 17) = (SYSTEM::UNQUOTE G)
(CONST 18) = ((SYSTEM::SPLICE (SYSTEM::UNQUOTE BODY)))
(CONST 19) = LIST
(CONST 20) = 'LET
(CONST 21) = LIST*
(CONST 22) = 'LET
(CONST 23) = F
(CONST 24) = 'MAKE-TRAMP$
(CONST 25) = G
(CONST 26) = (BODY)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
76 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L106)            ; /=
9     (LOAD 2)
10    (CDR)
11    (CAR&PUSH)
12    (CONST&PUSH 2)                      ; BIND-TRAMP
13    (LOAD&PUSH 1)
14    (CONST&PUSH 3)                      ; $
15    (CALL&PUSH 3 4)                     ; SYMBOLCONC
18    (CONST&PUSH 5)                      ; TRAMP
19    (LOAD&PUSH 2)
20    (CONST&PUSH 3)                      ; $
21    (CALL&PUSH 3 4)                     ; SYMBOLCONC
24    (CONST&PUSH 6)                      ; PROGN
25    (CONST&PUSH 7)                      ; 'COMPILE
26    (CONST&PUSH 8)                      ; PROCLAIM
27    (CONST&PUSH 9)                      ; QUOTE
28    (CONST&PUSH 10)                     ; SPECIAL
29    (LOAD&PUSH 5)
30    (LIST&PUSH 2)
32    (LIST&PUSH 2)
34    (LIST&PUSH 2)
36    (CONST&PUSH 11)                     ; DEFMACRO
37    (LOAD&PUSH 5)
38    (CONST&PUSH 12)                     ; (F G &REST BODY)
39    (CONST&PUSH 13)                     ; SYSTEM::BACKQUOTE
40    (CONST&PUSH 14)                     ; LET
41    (LOAD&PUSH 8)
42    (LIST&PUSH 1)
44    (LIST&PUSH 1)
46    (CONST&PUSH 14)                     ; LET
47    (CONST&PUSH 15)                     ; (SYSTEM::UNQUOTE F)
48    (CONST&PUSH 16)                     ; MAKE-TRAMP$
49    (CONST&PUSH 17)                     ; (SYSTEM::UNQUOTE G)
50    (LOAD&PUSH 15)
51    (LIST&PUSH 3)
53    (LIST&PUSH 2)
55    (LIST&PUSH 1)
57    (CONST 18)                          ; ((SYSTEM::SPLICE #))
58    (LIST*&PUSH 2)
60    (LIST&PUSH 3)
62    (CONST&PUSH 19)                     ; LIST
63    (CONST&PUSH 20)                     ; 'LET
64    (CONST&PUSH 9)                      ; QUOTE
65    (LOAD&PUSH 11)
66    (LIST&PUSH 1)
68    (LIST&PUSH 1)
70    (LIST&PUSH 2)
72    (CONST&PUSH 21)                     ; LIST*
73    (CONST&PUSH 22)                     ; 'LET
74    (CONST&PUSH 19)                     ; LIST
75    (CONST&PUSH 19)                     ; LIST
76    (CONST&PUSH 23)                     ; F
77    (CONST&PUSH 21)                     ; LIST*
78    (CONST&PUSH 24)                     ; 'MAKE-TRAMP$
79    (CONST&PUSH 25)                     ; G
80    (CONST&PUSH 9)                      ; QUOTE
81    (LOAD&PUSH 22)
82    (LIST&PUSH 1)
84    (LIST&PUSH 2)
86    (LIST&PUSH 4)
88    (LIST&PUSH 3)
90    (LIST&PUSH 2)
92    (CONST 26)                          ; (BODY)
94    (LIST*&PUSH 3)
96    (LIST&PUSH 4)
98    (LIST&PUSH 3)
100   (LIST&PUSH 4)
102   (LIST 4)
104   (SKIP&RET 6)
106   L106
106   (LOAD&PUSH 2)
107   (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
109   (SKIP&RET 3)


Disassembly of function #:|(DEFBINDTRAMP$ 1)-10-2|
(CONST 0) = (SPECIAL TRAMP1$)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TRAMP1$)
1     (CALLS1 90)                         ; PROCLAIM
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(DEFBINDTRAMP$ 1)-10-3|
(CONST 0) = BIND-TRAMP1$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIND-TRAMP1$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIND-TRAMP1$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIND-TRAMP1$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIND-TRAMP1$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; BIND-TRAMP1$
10    (SKIP&RET 1)


Disassembly of function BIND-TRAMP1$
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = LET
(CONST 3) = ((TRAMP1$))
(CONST 4) = MAKE-TRAMP$
(CONST 5) = (1)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
33 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L39)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (CONST&PUSH 2)                      ; LET
20    (CONST&PUSH 3)                      ; ((TRAMP1$))
21    (CONST&PUSH 2)                      ; LET
22    (LOAD&PUSH 5)
23    (CONST&PUSH 4)                      ; MAKE-TRAMP$
24    (LOAD&PUSH 6)
25    (CONST 5)                           ; (1)
26    (LIST*&PUSH 2)
28    (LIST&PUSH 2)
30    (LIST&PUSH 1)
32    (LOAD 4)
33    (LIST*&PUSH 2)
35    (LIST 3)
37    (SKIP&RET 6)
39    L39
39    (LOAD&PUSH 2)
40    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
42    (SKIP&RET 3)


Disassembly of function #:|(DEFBINDTRAMP$ 2)-11-2|
(CONST 0) = (SPECIAL TRAMP2$)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TRAMP2$)
1     (CALLS1 90)                         ; PROCLAIM
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(DEFBINDTRAMP$ 2)-11-3|
(CONST 0) = BIND-TRAMP2$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIND-TRAMP2$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIND-TRAMP2$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIND-TRAMP2$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIND-TRAMP2$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; BIND-TRAMP2$
10    (SKIP&RET 1)


Disassembly of function BIND-TRAMP2$
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = LET
(CONST 3) = ((TRAMP2$))
(CONST 4) = MAKE-TRAMP$
(CONST 5) = (2)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
33 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L39)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (CONST&PUSH 2)                      ; LET
20    (CONST&PUSH 3)                      ; ((TRAMP2$))
21    (CONST&PUSH 2)                      ; LET
22    (LOAD&PUSH 5)
23    (CONST&PUSH 4)                      ; MAKE-TRAMP$
24    (LOAD&PUSH 6)
25    (CONST 5)                           ; (2)
26    (LIST*&PUSH 2)
28    (LIST&PUSH 2)
30    (LIST&PUSH 1)
32    (LOAD 4)
33    (LIST*&PUSH 2)
35    (LIST 3)
37    (SKIP&RET 6)
39    L39
39    (LOAD&PUSH 2)
40    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
42    (SKIP&RET 3)


Disassembly of function #:|(DEFBINDTRAMP$ 3)-12-2|
(CONST 0) = (SPECIAL TRAMP3$)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TRAMP3$)
1     (CALLS1 90)                         ; PROCLAIM
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(DEFBINDTRAMP$ 3)-12-3|
(CONST 0) = BIND-TRAMP3$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIND-TRAMP3$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIND-TRAMP3$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIND-TRAMP3$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIND-TRAMP3$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; BIND-TRAMP3$
10    (SKIP&RET 1)


Disassembly of function BIND-TRAMP3$
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = LET
(CONST 3) = ((TRAMP3$))
(CONST 4) = MAKE-TRAMP$
(CONST 5) = (3)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
33 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L39)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (CONST&PUSH 2)                      ; LET
20    (CONST&PUSH 3)                      ; ((TRAMP3$))
21    (CONST&PUSH 2)                      ; LET
22    (LOAD&PUSH 5)
23    (CONST&PUSH 4)                      ; MAKE-TRAMP$
24    (LOAD&PUSH 6)
25    (CONST 5)                           ; (3)
26    (LIST*&PUSH 2)
28    (LIST&PUSH 2)
30    (LIST&PUSH 1)
32    (LOAD 4)
33    (LIST*&PUSH 2)
35    (LIST 3)
37    (SKIP&RET 6)
39    L39
39    (LOAD&PUSH 2)
40    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
42    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO FCALL$ (&REST L) ...)-13|
(CONST 0) = FCALL$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FCALL$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; FCALL$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FCALL$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FCALL$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; FCALL$
10    (SKIP&RET 1)


Disassembly of function FCALL$
(CONST 0) = FUNCALL
1 required argument
1 optional argument
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; FUNCALL
3     (LOAD 1)
4     (CONS)
5     (SKIP&RET 4)


Wrote file binary-clisp/numerm.fas
Wrote file /cygdrive/e/temp/maxima/src/numerm.lis