Listing of compilation of file /cygdrive/e/temp/maxima/src/mdefun.lisp
on 2002-12-17 13:34:03 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/mdefun.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE MDEFUN MACRO)-2|
(CONST 0) = MDEFUN
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (MACRO)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFUN
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (MACRO)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS TRANSM)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *KNOWN-FUNCTIONS-INFO-STACK* NIL ...)-4|
(CONST 0) = (SPECIAL *KNOWN-FUNCTIONS-INFO-STACK*)
(CONST 1) = *KNOWN-FUNCTIONS-INFO-STACK*
(CONST 2) = VARIABLE
(CONST 3) = 
"When MDEFUN-TR expands it puts stuff here for MFUNCTION-CALL
  to use."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *KNOWN-FUNCTIONS-INFO-STACK*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *KNOWN-FUNCTIONS-INFO-STACK*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *KNOWN-FUNCTIONS-INFO-STACK*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "When MDEFUN-TR expands it puts stuff here for MFUNCTION-CALL
  to use."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *KNOWN-FUNCTIONS-INFO-STACK*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *UNKNOWN-FUNCTIONS-INFO-STACK* NIL ...)-5|
(CONST 0) = (SPECIAL *UNKNOWN-FUNCTIONS-INFO-STACK*)
(CONST 1) = *UNKNOWN-FUNCTIONS-INFO-STACK*
(CONST 2) = VARIABLE
(CONST 3) = 
"When MFUNCTION-CALL expands without info from
  *KNOWN-FUNCTIONS-INFO-STACK* it puts stuff here to be barfed
  at the end of compilation."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *UNKNOWN-FUNCTIONS-INFO-STACK*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *UNKNOWN-FUNCTIONS-INFO-STACK*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *UNKNOWN-FUNCTIONS-INFO-STACK*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "When MFUNCTION-CALL expands without info from
  *KNOWN-FUNCTIONS-INFO-STACK* it puts stuff here to be barfed
  at the end of compilation."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *UNKNOWN-FUNCTIONS-INFO-STACK*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO MDEFUN-TR (&REST FORM) ...)-6|
(CONST 0) = MDEFUN-TR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MDEFUN-TR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFUN-TR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MDEFUN-TR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MDEFUN-TR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MDEFUN-TR
10    (SKIP&RET 1)


Disassembly of function MDEFUN-TR
(CONST 0) = FORM
(CONST 1) = "without any special action"
(CONST 2) = "obsolete macro form, please retranslate source code"
(CONST 3) = FAIL-ACT
(CONST 4) = CERROR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (FORM)
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (BIND 0)                            ; FORM
4     (CONST&PUSH 1)                      ; "without any special action"
5     (CONST&PUSH 2)                      ; "obsolete macro form, please retranslate source code"
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CONST&PUSH 3)                      ; FAIL-ACT
9     (CALL 4 4)                          ; CERROR
12    (UNBIND1)
13    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO MDEFUN (&REST FORM) ...)-7|
(CONST 0) = MDEFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MDEFUN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MDEFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MDEFUN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MDEFUN
10    (SKIP&RET 1)


Disassembly of function MDEFUN
(CONST 0) = FORM
(CONST 1) = "without any special action"
(CONST 2) = "obsolete macro form, please retranslate source code"
(CONST 3) = FAIL-ACT
(CONST 4) = CERROR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (FORM)
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (BIND 0)                            ; FORM
4     (CONST&PUSH 1)                      ; "without any special action"
5     (CONST&PUSH 2)                      ; "obsolete macro form, please retranslate source code"
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CONST&PUSH 3)                      ; FAIL-ACT
9     (CALL 4 4)                          ; CERROR
12    (UNBIND1)
13    (SKIP&RET 3)


Disassembly of function #:|(DEFUN COMPILER-STATE NIL ...)-8|
(CONST 0) = COMPILER-STATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPILER-STATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPILER-STATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPILER-STATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPILER-STATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPILER-STATE
8     (SKIP&RET 1)


Disassembly of function COMPILER-STATE
(CONST 0) = "Is COMPILER-STATE true?"
(CONST 1) = Y-OR-N-P
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Is COMPILER-STATE true?"
1     (CALL1 1)                           ; Y-OR-N-P
3     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO DEFMTRFUN-EXTERNAL (&REST IG) ...)-9|
(CONST 0) = DEFMTRFUN-EXTERNAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFMTRFUN-EXTERNAL>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFMTRFUN-EXTERNAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFMTRFUN-EXTERNAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFMTRFUN-EXTERNAL>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEFMTRFUN-EXTERNAL
10    (SKIP&RET 1)


Disassembly of function DEFMTRFUN-EXTERNAL
1 required argument
1 optional argument
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DEFMTRFUN (# ARGL . BODY) ...)-10|
(CONST 0) = DEFMTRFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFMTRFUN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFMTRFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFMTRFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFMTRFUN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEFMTRFUN
10    (SKIP&RET 1)


Disassembly of function DEFMTRFUN
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = NAME
(CONST 3) = MODE
(CONST 4) = MDEFINE
(CONST 5) = :PROPERTY
(CONST 6) = (A-SUBR)
(CONST 7) = (TRANSLATED-MMACRO)
(CONST 8) = EVAL-WHEN
(CONST 9) = (COMPILE EVAL LOAD)
(CONST 10) = REMPROP
(CONST 11) = QUOTE
(CONST 12) = ('TRANSLATE)
(CONST 13) = DEFPROP
(CONST 14) = ARRAYFUN-MODE
(CONST 15) = FUNCTION-MODE
(CONST 16) = INSURE-ARRAY-PROPS
(CONST 17) = COND
(CONST 18) = (STATUS FEATURE MACSYMA)
(CONST 19) = MPUTPROP
(CONST 20) = '$FIXED_NUM_ARGS_FUNCTION
(CONST 21) = '$VARIABLE_NUM_ARGS_FUNCTION
(CONST 22) = ARGS
(CONST 23) = DEFUN-PROP
(CONST 24) = DEFMFUN
(CONST 25) = |mlexpr NARGS|
(CONST 26) = <
(CONST 27) = $ERROR
(CONST 28) = 'MAXIMA-ERROR
(CONST 29) = '| takes no less than |
(CONST 30) = 1
(CONST 31) = | argument.|
(CONST 32) = | arguments.|
(CONST 33) = LAMBDA
(CONST 34) = ARG
(CONST 35) = CONS
(CONST 36) = '(MLIST)
(CONST 37) = LISTIFY
(CONST 38) = F-
(CONST 39) = (|mlexpr NARGS|)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (MODE NAME)
254 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L191)            ; <
9     (LOAD 2)
10    (CDR)
11    (CAR)
12    (CAR)
13    (BIND 2)                            ; NAME
15    (LOAD 5)
16    (CDR)
17    (CAR)
18    (CDR)
19    (CAR)
20    (BIND 3)                            ; MODE
22    (LOAD 8)
23    (CDR)
24    (CAR)
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (LOAD 9)
29    (CDR)
30    (CAR)
31    (CDR)
32    (CDR)
33    (CDR)
34    (CAR&PUSH)
35    (LOAD 10)
36    (CDR)
37    (CAR)
38    (CDR)
39    (CDR)
40    (CDR)
41    (CDR&PUSH)
42    (LOAD 11)
43    (CDR)
44    (CDR)
45    (CAR&PUSH)
46    (LOAD 12)
47    (CDR)
48    (CDR)
49    (CDR&PUSH)
50    (NIL&PUSH)
51    (LOAD&JMPIFNOT 3 L56)
54    (CAR)
55    (STORE 3)
56    L56
56    (LOAD&PUSH 5)
57    (JMPIFEQTO 4 L205)                  ; MDEFINE
61    (GETVALUE&PUSH 2)                   ; NAME
63    (CONST 7)                           ; (TRANSLATED-MMACRO)
64    (CONS)
65    L65
65    (STORE 0)
66    (CONST&PUSH 8)                      ; EVAL-WHEN
67    (CONST&PUSH 9)                      ; (COMPILE EVAL LOAD)
68    (LOAD 5)
69    (NOT)
70    (JMPIFNOT L83)
72    (CONST&PUSH 10)                     ; REMPROP
73    (CONST&PUSH 11)                     ; QUOTE
74    (GETVALUE&PUSH 2)                   ; NAME
76    (LIST&PUSH 2)
78    (CONST 12)                          ; ('TRANSLATE)
79    (LIST*&PUSH 2)
81    (LIST 1)
83    L83
83    (PUSH)
84    (GETVALUE 3)                        ; MODE
86    (JMPIFNOT L103)
88    (CONST&PUSH 13)                     ; DEFPROP
89    (GETVALUE&PUSH 2)                   ; NAME
91    (GETVALUE&PUSH 3)                   ; MODE
93    (LOAD&JMPIF 9 L213)
97    (CONST 15)                          ; FUNCTION-MODE
98    L98
98    (PUSH)
99    (LIST&PUSH 4)
101   (LIST 1)
103   L103
103   (PUSH)
104   (LOAD&JMPIF 7 L217)
108   (NIL)
109   L109
109   (PUSH)
110   (LOAD&PUSH 10)
111   (JMPIFNOTEQTO 4 L118)               ; MDEFINE
114   (LOAD&JMPIFNOT 8 L262)
118   L118
118   (NIL)
119   L119
119   (PUSH)
120   (LOAD 6)
121   (JMPIFCONSP L293)
124   (CONST 24)                          ; DEFMFUN
126   L126
126   (PUSH)
127   (LOAD&PUSH 7)
128   (LOAD&JMPIFNOT 12 L298)
132   (CONST 25)                          ; |mlexpr NARGS|
134   L134
134   (PUSH)
135   (LOAD&JMPIFNOT 13 L302)
139   (LOAD&PUSH 11)
140   (CALLS2&PUSH 71)                    ; LENGTH
142   (CALLS2&PUSH 151)                   ; 1-
144   (CONST&PUSH 17)                     ; COND
145   (CONST&PUSH 26)                     ; <
146   (CONST&PUSH 25)                     ; |mlexpr NARGS|
147   (LOAD&PUSH 3)
148   (LIST&PUSH 3)
150   (CONST&PUSH 27)                     ; $ERROR
151   (CONST&PUSH 28)                     ; 'MAXIMA-ERROR
152   (CONST&PUSH 11)                     ; QUOTE
153   (GETVALUE&PUSH 2)                   ; NAME
155   (LIST&PUSH 2)
157   (CONST&PUSH 29)                     ; '| takes no less than |
158   (LOAD&PUSH 6)
159   (CONST&PUSH 11)                     ; QUOTE
160   (LOAD&PUSH 8)
161   (CONST&PUSH 30)                     ; 1
163   (CALLSR&JMPIF 1 45 L305)            ; =
168   (CONST 32)                          ; | arguments.|
170   L170
170   (PUSH)
171   (LIST&PUSH 2)
173   (LIST&PUSH 6)
175   (LIST&PUSH 2)
177   (T&PUSH)
178   (CONST&PUSH 33)                     ; LAMBDA
180   (LOAD&PUSH 16)
181   (LOAD 16)
183   (LIST*&PUSH 2)
185   (CONST&PUSH 30)                     ; 1
187   (NIL&PUSH)
188   (JMP L319)
191   L191
191   (LOAD&PUSH 2)
192   (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
194   (SKIP&RET 3)
196   L196
196   (CONST&PUSH 5)                      ; :PROPERTY
197   (GETVALUE&PUSH 2)                   ; NAME
199   (CONST 6)                           ; (A-SUBR)
200   (LIST* 2)
202   (JMP L65)
205   L205
205   (LOAD&JMPIF 3 L196)
208   (GETVALUE 2)                        ; NAME
210   (JMP L65)
213   L213
213   (CONST 14)                          ; ARRAYFUN-MODE
214   (JMP L98)
217   L217
217   (CONST&PUSH 16)                     ; INSURE-ARRAY-PROPS
218   (CONST&PUSH 11)                     ; QUOTE
219   (GETVALUE&PUSH 2)                   ; NAME
221   (LIST&PUSH 2)
223   (CONST&PUSH 11)                     ; QUOTE
224   (GETVALUE&PUSH 3)                   ; MODE
226   (LIST&PUSH 2)
228   (CONST&PUSH 11)                     ; QUOTE
229   (LOAD&PUSH 10)
230   (CALLS2&PUSH 71)                    ; LENGTH
232   (LIST&PUSH 2)
234   (LIST&PUSH 4)
236   (LIST 1)
238   (JMP L109)
241   L241
241   (CONST 20)                          ; '$FIXED_NUM_ARGS_FUNCTION
242   (JMP L276)
244   L244
244   (CONST&PUSH 22)                     ; ARGS
245   (CONST&PUSH 11)                     ; QUOTE
246   (GETVALUE&PUSH 2)                   ; NAME
248   (LIST&PUSH 2)
250   (CONST&PUSH 11)                     ; QUOTE
251   (NIL&PUSH)
252   (LOAD&PUSH 12)
253   (CALLS2 71)                         ; LENGTH
255   (CONS&PUSH)
256   (LIST&PUSH 2)
258   (LIST 3)
260   (JMP L287)
262   L262
262   (CONST&PUSH 17)                     ; COND
263   (CONST&PUSH 18)                     ; (STATUS FEATURE MACSYMA)
264   (CONST&PUSH 19)                     ; MPUTPROP
265   (CONST&PUSH 11)                     ; QUOTE
266   (GETVALUE&PUSH 2)                   ; NAME
268   (LIST&PUSH 2)
270   (T&PUSH)
271   (LOAD&JMPIFNOT 14 L241)
274   (CONST 21)                          ; '$VARIABLE_NUM_ARGS_FUNCTION
276   L276
276   (PUSH)
277   (LIST&PUSH 4)
279   (LIST&PUSH 2)
281   (LIST&PUSH 2)
283   (LOAD&JMPIFNOT 10 L244)
286   (NIL)
287   L287
287   (PUSH)
288   (LIST 2)
290   (JMP L119)
293   L293
293   (CONST 23)                          ; DEFUN-PROP
295   (JMP L126)
298   L298
298   (LOAD 10)
299   (JMP L134)
302   L302
302   (LOAD 10)
303   (JMP L358)
305   L305
305   (CONST 31)                          ; | argument.|
307   (JMP L170)
310   L310
310   (CONST&PUSH 34)                     ; ARG
312   (LOAD&PUSH 2)
313   (LIST&PUSH 2)
315   (LOAD&CONS&STORE 0)
317   (LOAD&INC&STORE 1)
319   L319
319   (LOAD&PUSH 1)
320   (LOAD&PUSH 7)
321   (CALLSR&JMPIFNOT 1 48 L310)         ; >
325   (CONST&PUSH 35)                     ; CONS
327   (CONST&PUSH 36)                     ; '(MLIST)
329   (CONST&PUSH 37)                     ; LISTIFY
331   (CONST&PUSH 38)                     ; F-
333   (LOAD&PUSH 10)
334   (CONST 39)                          ; (|mlexpr NARGS|)
336   (LIST*&PUSH 2)
338   (LIST&PUSH 2)
340   (LIST&PUSH 3)
342   (LOAD&CONS&STORE 0)
344   (PUSH)
345   (CALLS2 73)                         ; NREVERSE
347   (SKIP 2)
349   (CONS&PUSH)
350   (LIST&PUSH 2)
352   (LIST&PUSH 3)
354   (LIST 1)
356   (SKIP 1)
358   L358
358   (LIST*&PUSH 3)
360   (LIST&PUSH 1)
362   (CALLSR 5 34)                       ; APPEND
365   (LIST* 2)
367   (SKIP 6)
369   (UNBIND 2)
371   (SKIP&RET 3)


Wrote file binary-clisp/mdefun.fas
Wrote file /cygdrive/e/temp/maxima/src/mdefun.lis