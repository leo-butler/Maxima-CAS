Listing of compilation of file /cygdrive/e/temp/maxima/src/mlisp.lisp
on 2002-12-17 13:32:14 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/mlisp.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE MLISP)-2|
(CONST 0) = MLISP
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLISP
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE) (SETQ OLD-READ-BASE *READ-BASE* ...))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL MSPECLIST MPROPLIST ...))-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL ARGS))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (FIXNUM N I ...))-6|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ MSPECLIST NIL ...)-7|
(CONST 0) = MSPECLIST
(CONST 1) = BINDLIST
(CONST 2) = LOCLIST
(CONST 3) = MPROPLIST
(CONST 4) = $%ENUMER
(CONST 5) = $FLOAT
(CONST 6) = NOUNL
(CONST 7) = $REFCHECK
(CONST 8) = SCANMAPP
(CONST 9) = MAPLP
(CONST 10) = MPROGP
(CONST 11) = EVP
(CONST 12) = MDOP
(CONST 13) = MLOCP
(CONST 14) = PUTL
(CONST 15) = $SUBSCRMAP
(CONST 16) = $TRANSLATE
(CONST 17) = $TRANSRUN
(CONST 18) = $SAVEDEF
(CONST 19) = AEXPRP
(CONST 20) = $MAPERROR
(CONST 21) = 0
(CONST 22) = FMAPLVL
(CONST 23) = $OPTIONSET
(CONST 24) = $SETCHECKBREAK
(CONST 25) = DSKSETP
(CONST 26) = ARYP
(CONST 27) = MSUMP
(CONST 28) = EVARRP
(CONST 29) = $INFEVAL
(CONST 30) = FACTLIST
(CONST 31) = $MAPPRINT
(CONST 32) = FUNDEFSIMP
(CONST 33) = MFEXPRP
(CONST 34) = NOUNSFLAG
(CONST 35) = OPEXPRP
(CONST 36) = 1
(CONST 37) = SFINDEX
(CONST 38) = MSPECLIST2
(CONST 39) = ENVLIST
(CONST 40) = TRANSP
(CONST 41) = NOEVALARGS
(CONST 42) = $PIECE
(CONST 43) = $SETVAL
(CONST 44) = FEXPRERRP
(CONST 45) = RULEFCNL
(CONST 46) = 
($INTEGER $NONINTEGER $EVEN $ODD $RATIONAL $IRRATIONAL $REAL $IMAGINARY
 $COMPLEX $ANALYTIC $INCREASING $DECREASING $ODDFUN $EVENFUN $POSFUN
 $COMMUTATIVE $LASSOCIATIVE $RASSOCIATIVE $SYMMETRIC $ANTISYMMETRIC)
(CONST 47) = FEATUREL
(CONST 48) = (MLIST SIMP)
(CONST 49) = $FEATURES
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FEATUREL)
writes special variables : 
($FEATURES FEATUREL RULEFCNL FEXPRERRP $SETVAL $PIECE NOEVALARGS TRANSP ENVLIST
 MSPECLIST2 SFINDEX OPEXPRP NOUNSFLAG MFEXPRP FUNDEFSIMP $MAPPRINT FACTLIST
 $INFEVAL EVARRP MSUMP ARYP DSKSETP $SETCHECKBREAK $OPTIONSET FMAPLVL $MAPERROR
 AEXPRP $SAVEDEF $TRANSRUN $TRANSLATE $SUBSCRMAP PUTL MLOCP MDOP EVP MPROGP
 MAPLP SCANMAPP $REFCHECK NOUNL $FLOAT $%ENUMER MPROPLIST LOCLIST BINDLIST
 MSPECLIST)
68 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; MSPECLIST
3     (SETVALUE 1)                        ; BINDLIST
5     (SETVALUE 2)                        ; LOCLIST
7     (SETVALUE 3)                        ; MPROPLIST
9     (SETVALUE 4)                        ; $%ENUMER
11    (SETVALUE 5)                        ; $FLOAT
13    (SETVALUE 6)                        ; NOUNL
15    (SETVALUE 7)                        ; $REFCHECK
17    (SETVALUE 8)                        ; SCANMAPP
19    (SETVALUE 9)                        ; MAPLP
21    (SETVALUE 10)                       ; MPROGP
23    (SETVALUE 11)                       ; EVP
25    (SETVALUE 12)                       ; MDOP
27    (SETVALUE 13)                       ; MLOCP
29    (SETVALUE 14)                       ; PUTL
31    (SETVALUE 15)                       ; $SUBSCRMAP
33    (SETVALUE 16)                       ; $TRANSLATE
35    (T)
36    (SETVALUE 17)                       ; $TRANSRUN
38    (SETVALUE 18)                       ; $SAVEDEF
40    (NIL)
41    (SETVALUE 19)                       ; AEXPRP
43    (T)
44    (SETVALUE 20)                       ; $MAPERROR
46    (CONST 21)                          ; 0
48    (SETVALUE 22)                       ; FMAPLVL
50    (NIL)
51    (SETVALUE 23)                       ; $OPTIONSET
53    (SETVALUE 24)                       ; $SETCHECKBREAK
55    (SETVALUE 25)                       ; DSKSETP
57    (SETVALUE 26)                       ; ARYP
59    (SETVALUE 27)                       ; MSUMP
61    (SETVALUE 28)                       ; EVARRP
63    (SETVALUE 29)                       ; $INFEVAL
65    (SETVALUE 30)                       ; FACTLIST
67    (T)
68    (SETVALUE 31)                       ; $MAPPRINT
70    (NIL)
71    (SETVALUE 32)                       ; FUNDEFSIMP
73    (T)
74    (SETVALUE 33)                       ; MFEXPRP
76    (NIL)
77    (SETVALUE 34)                       ; NOUNSFLAG
79    (SETVALUE 35)                       ; OPEXPRP
81    (CONST 36)                          ; 1
83    (SETVALUE 37)                       ; SFINDEX
85    (NIL)
86    (SETVALUE 38)                       ; MSPECLIST2
88    (SETVALUE 39)                       ; ENVLIST
90    (SETVALUE 40)                       ; TRANSP
92    (SETVALUE 41)                       ; NOEVALARGS
94    (CONST 42)                          ; $PIECE
96    (SETVALUE 42)                       ; $PIECE
98    (CONST 43)                          ; $SETVAL
100   (SETVALUE 43)                       ; $SETVAL
102   (NIL)
103   (SETVALUE 44)                       ; FEXPRERRP
105   (SETVALUE 45)                       ; RULEFCNL
107   (CONST 46)                          ; ($INTEGER $NONINTEGER $EVEN ...)
109   (SETVALUE 47)                       ; FEATUREL
111   (CONST&PUSH 48)                     ; (MLIST SIMP)
113   (GETVALUE&PUSH 47)                  ; FEATUREL
115   (NIL&PUSH)
116   (CALLSR 2 34)                       ; APPEND
119   (CONS)
120   (SETVALUE 49)                       ; $FEATURES
122   (SKIP&RET 1)


Disassembly of function #:|(DEFVAR MUNBOUND '\|#####\|)-8|
(CONST 0) = (SPECIAL MUNBOUND)
(CONST 1) = MUNBOUND
(CONST 2) = |#####|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MUNBOUND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MUNBOUND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MUNBOUND
8     (CONST&PUSH 2)                      ; |#####|
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MUNBOUND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR FIXUNBOUND MOST-NEGATIVE-FIXNUM)-9|
(CONST 0) = (SPECIAL FIXUNBOUND)
(CONST 1) = FIXUNBOUND
(CONST 2) = #.MOST-NEGATIVE-FIXNUM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL FIXUNBOUND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; FIXUNBOUND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; FIXUNBOUND
8     (CONST&PUSH 2)                      ; #.MOST-NEGATIVE-FIXNUM
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; FIXUNBOUND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR FLOUNBOUND MOST-NEGATIVE-DOUBLE-FLOAT)-10|
(CONST 0) = (SPECIAL FLOUNBOUND)
(CONST 1) = FLOUNBOUND
(CONST 2) = #.MOST-NEGATIVE-DOUBLE-FLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL FLOUNBOUND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; FLOUNBOUND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; FLOUNBOUND
8     (CONST&PUSH 2)                      ; #.MOST-NEGATIVE-DOUBLE-FLOAT
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; FLOUNBOUND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MUNBINDP NIL ...)-11-1|
(CONST 0) = MUNBINDP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; MUNBINDP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; MUNBINDP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MUNBINDP NIL ...)-11-2|
(CONST 0) = (SPECIAL MUNBINDP)
(CONST 1) = MUNBINDP
(CONST 2) = VARIABLE
(CONST 3) = "Used for safely MUNBINDing incorrectly-bound variables."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MUNBINDP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MUNBINDP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MUNBINDP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; MUNBINDP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Used for safely MUNBINDing incorrectly-bound variables."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; MUNBINDP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SETCHECK NIL)-12-1|
(CONST 0) = $SETCHECK
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SETCHECK
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SETCHECK
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SETCHECK NIL)-12-2|
(CONST 0) = (SPECIAL $SETCHECK)
(CONST 1) = $SETCHECK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SETCHECK)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SETCHECK
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SETCHECK
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $SETCHECK
12    (SKIP&RET 1)


Disassembly of function #:|(MAPC #'(LAMBDA # #) '($VALUES $FUNCTIONS $MACROS ...))-13|
(CONST 0) = ($VALUES $FUNCTIONS $MACROS $ARRAYS $MYOPTIONS $RULES $PROPS)
(CONST 1) = X
(CONST 2) = (MLIST SIMP)
(CONST 3) = SET
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($VALUES $FUNCTIONS $MACROS ...)
1     (JMP L20)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE&PUSH 1)                   ; X
10    (CONST&PUSH 2)                      ; (MLIST SIMP)
11    (NIL)
12    (CONS&PUSH)
13    (CALL2 3)                           ; SET
15    (UNBIND1)
16    (SKIP 1)
18    (LOAD&CDR&STORE 0)
20    L20
20    (LOAD&PUSH 0)
21    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
24    (SKIP 1)
26    (CONST 0)                           ; ($VALUES $FUNCTIONS $MACROS ...)
27    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MAPPLY1 (FN ARGS FNNAME ...) ...)-14|
(CONST 0) = MAPPLY1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAPPLY1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAPPLY1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAPPLY1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAPPLY1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAPPLY1
8     (SKIP&RET 1)


Disassembly of function MAPPLY1
(CONST 0) = FUNCTIONP
(CONST 1) = "~M is a lisp level macro and cannot be applied at maxima level"
(CONST 2) = MERROR
(CONST 3) = ARRAY
(CONST 4) = GETOPR
(CONST 5) = BADFUNCHK
(CONST 6) = NOEVALARGS
(CONST 7) = MEVAL
(CONST 8) = LAMBDA
(CONST 9) = FUNCTION
(CONST 10) = MLAMBDA
(CONST 11) = MQUOTE
(CONST 12) = ARYP
(CONST 13) = (MLIST $MATRIX)
(CONST 14) = MEMQ
(CONST 15) = 1
(CONST 16) = $MATRIX
(CONST 17) = 2
(CONST 18) = "Wrong number of indices:~%~M"
(CONST 19) = (MLIST)
(CONST 20) = FIXNUMP
(CONST 21) = EVARRP
(CONST 22) = NOTEXIST
(CONST 23) = "Subscript must be an integer:~%~M"
(CONST 24) = $PIECE
(CONST 25) = MAPPLY
(CONST 26) = $PARTSWITCH
(CONST 27) = $INPART
(CONST 28) = (MQAPPLY ARRAY)
(CONST 29) = (MQAPPLY)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARYP $PIECE EVARRP)
181 byte-code instructions:
0     L0
0     (LOAD 4)
1     (JMPIFATOM L47)
3     (LOAD&PUSH 4)
4     (CALL1&JMPIF 0 L106)                ; FUNCTIONP
8     (LOAD&CAR&PUSH 4)
10    (JMPIFNOTEQTO 8 L204)               ; LAMBDA
14    (LOAD&PUSH 4)
15    (CONST&PUSH 9)                      ; FUNCTION
16    (CALLS2 42)                         ; COERCE
18    L18
18    (PUSH)
19    (LOAD 4)
20    (APPLY&SKIP&RET 0 5)
23    L23
23    (LOAD 4)
24    (JMP L18)
26    L26
26    (CONST&PUSH 1)                      ; "~M is a lisp level macro and cannot be applied at maxima level"
27    (LOAD&PUSH 5)
28    (CALL2 2)                           ; MERROR
30    (LOAD&PUSH 4)
31    (LOAD 4)
32    (CONS&PUSH)
33    (CALLS1 91)                         ; EVAL
35    (SKIP&RET 5)
37    L37
37    (LOAD&PUSH 4)
38    (PUSH-UNBOUND 1)
40    (CALLS1&JMPIF 87 L26)               ; MACRO-FUNCTION
43    (LOAD 4)
44    (SYMBOL-FUNCTION)
45    (JMP L71)
47    L47
47    (LOAD 4)
48    (JMPIFCONSP L103)
50    (LOAD&PUSH 4)
51    (CALL1&JMPIF 0 L23)                 ; FUNCTIONP
54    (LOAD&PUSH 4)
55    (CALLS1&JMPIF 80 L37)               ; FBOUNDP
58    (LOAD&PUSH 4)
59    (CONST&PUSH 3)                      ; ARRAY
60    (PUSH-UNBOUND 1)
62    (CALLS2&JMPIFNOT 132 L80)           ; GET
65    (LOAD&PUSH 4)
66    (CONST&PUSH 3)                      ; ARRAY
67    (PUSH-UNBOUND 1)
69    (CALLS2 132)                        ; GET
71    L71
71    (PUSH)
72    (LOAD&PUSH 4)
73    (LOAD&PUSH 6)
74    (LOAD&PUSH 4)
75    (JMPTAIL 4 9 L0)
80    L80
80    (LOAD&PUSH 4)
81    (CALL1 4)                           ; GETOPR
83    (STORE 4)
84    (LOAD&PUSH 2)
85    (LOAD&PUSH 5)
86    (NIL&PUSH)
87    (CALL 3 5)                          ; BADFUNCHK
90    (T)
91    (BIND 6)                            ; NOEVALARGS
93    (LOAD&PUSH 7)
94    (NIL)
95    (CONS&PUSH)
96    (LOAD 7)
97    (CONS&PUSH)
98    (CALL1 7)                           ; MEVAL
100   (UNBIND1)
101   (SKIP&RET 5)
103   L103
103   (NIL)
104   (SKIP&RET 5)
106   L106
106   (LOAD 4)
107   (JMP L18)
110   L110
110   (LOAD&PUSH 4)
111   (LOAD&PUSH 4)
112   (LOAD&PUSH 4)
113   (T&PUSH)
114   (LOAD&PUSH 5)
115   (CALL 5 10)                         ; MLAMBDA
118   (SKIP&RET 5)
120   L120
120   (LOAD&CDR&PUSH 4)
122   (LOAD 4)
123   (JMP L247)
126   L126
126   (CONST&PUSH 21)                     ; EVARRP
127   (CONST 22)                          ; NOTEXIST
129   (THROW)
130   L130
130   (LOAD&PUSH 3)
131   (CALLS2&PUSH 71)                    ; LENGTH
133   (CONST&PUSH 15)                     ; 1
134   (CALLSR&JMPIF 1 45 L158)            ; =
138   (LOAD 4)
139   (CAR)
140   (CAR&PUSH)
141   (JMPIFNOTEQTO 16 L152)              ; $MATRIX
144   (LOAD&PUSH 3)
145   (CALLS2&PUSH 71)                    ; LENGTH
147   (CONST&PUSH 17)                     ; 2
148   (CALLSR&JMPIF 1 45 L158)            ; =
152   L152
152   (CONST&PUSH 18)                     ; "Wrong number of indices:~%~M"
153   (CONST&PUSH 19)                     ; (MLIST)
154   (LOAD 5)
155   (CONS&PUSH)
156   (CALL2 2)                           ; MERROR
158   L158
158   (LOAD&PUSH 3)
159   (LOAD&JMPIFNOT 0 L181)
162   L162
162   (LOAD&CAR&PUSH 0)
164   (CALL1&JMPIF 20 L176)               ; FIXNUMP
167   (GETVALUE 21)                       ; EVARRP
169   (JMPIF L126)
171   (CONST&PUSH 23)                     ; "Subscript must be an integer:~%~M"
172   (LOAD&CAR&PUSH 1)
174   (CALL2 2)                           ; MERROR
176   L176
176   (LOAD&CDR&STORE 0)
178   (LOAD&JMPIF 0 L162)
181   L181
181   (GETVALUE 24)                       ; $PIECE
183   (BIND 24)                           ; $PIECE
185   (CONST 25)                          ; MAPPLY
187   (BIND 26)                           ; $PARTSWITCH
189   (CONST&SYMBOL-FUNCTION&PUSH 27)     ; $INPART
191   (LOAD&PUSH 12)
192   (LOAD 12)
193   (CONS)
194   (APPLY 0)
196   (UNBIND 2)
198   (SKIP&RET 6)
200   L200
200   (CONST 28)                          ; (MQAPPLY ARRAY)
202   (JMP L243)
204   L204
204   (LOAD 4)
205   (CAR)
206   (CAR&PUSH)
207   (JMPIFEQTO 8 L110)                  ; LAMBDA
211   (LOAD 4)
212   (CAR)
213   (CAR&PUSH)
214   (JMPIFEQTO 11 L120)                 ; MQUOTE
218   (GETVALUE 12)                       ; ARYP
220   (JMPIFNOT L230)
222   (LOAD 4)
223   (CAR)
224   (CAR&PUSH)
225   (CONST&PUSH 13)                     ; (MLIST $MATRIX)
226   (CALL2&JMPIF 14 L130)               ; MEMQ
230   L230
230   (GETVALUE 12)                       ; ARYP
232   (JMPIF L200)
234   (CONST&PUSH 3)                      ; ARRAY
235   (LOAD 5)
236   (CAR)
237   (CDR&PUSH)
238   (CALL2&JMPIFNOT 14 L250)            ; MEMQ
241   (CONST 29)                          ; (MQAPPLY)
243   L243
243   (PUSH)
244   (LOAD&PUSH 5)
245   (LOAD 5)
246   (CONS)
247   L247
247   (CONS)
248   (SKIP&RET 5)
250   L250
250   (LOAD&PUSH 2)
251   (LOAD&PUSH 5)
252   (T&PUSH)
253   (CALL 3 5)                          ; BADFUNCHK
256   (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN MCALL N ...)-15|
(CONST 0) = MCALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MCALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MCALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MCALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MCALL
8     (SKIP&RET 1)


Disassembly of function MCALL
(CONST 0) = 1
(CONST 1) = NARG1
(CONST 2) = LISTIFY1
(CONST 3) = MAPPLY1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (LOAD&PUSH 3)
5     (CALL2&PUSH 1)                      ; NARG1
7     (CONST&PUSH 0)                      ; 1
8     (LOAD&PUSH 2)
9     (CALLSR&PUSH 1 54)                  ; -
12    (LOAD&PUSH 4)
13    (CALL2&PUSH 2)                      ; LISTIFY1
15    (CONST&PUSH 0)                      ; 1
16    (LOAD&PUSH 5)
17    (CALL2&PUSH 1)                      ; NARG1
19    (NIL&PUSH)
20    (CALL 4 3)                          ; MAPPLY1
23    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (MAPEX T))-16|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN MEVALARGS (ARGS) ...)-17|
(CONST 0) = MEVALARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVALARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVALARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVALARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVALARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVALARGS
8     (SKIP&RET 1)


Disassembly of function MEVALARGS
(CONST 0) = NOEVALARGS
(CONST 1) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NOEVALARGS)
writes special variable : (NOEVALARGS)
11 byte-code instructions:
0     (GETVALUE 0)                        ; NOEVALARGS
2     (JMPIF L12)
4     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; MEVAL
6     (LOAD&PUSH 2)
7     (CALLSR 0 22)                       ; MAPCAR
10    (SKIP&RET 2)
12    L12
12    (NIL)
13    (SETVALUE 0)                        ; NOEVALARGS
15    (LOAD 1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFVAR *MLAMBDA-CALL-STACK* (MAKE-ARRAY 30 :FILL-POINTER ...))-18|
(CONST 0) = (SPECIAL *MLAMBDA-CALL-STACK*)
(CONST 1) = *MLAMBDA-CALL-STACK*
(CONST 2) = 30
(CONST 3) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *MLAMBDA-CALL-STACK*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *MLAMBDA-CALL-STACK*
4     (CALLS1&JMPIF 79 L18)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *MLAMBDA-CALL-STACK*
8     (CONST&PUSH 2)                      ; 30
9     (T&PUSH)
10    (PUSH-UNBOUND 6)
12    (CONST 3)                           ; 0
13    (STORE 2)
14    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
16    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
18    L18
18    (CONST 1)                           ; *MLAMBDA-CALL-STACK*
19    (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (MAPEX NIL))-19|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN MLAMBDA (FN ARGS FNNAME ...) ...)-20|
(CONST 0) = MLAMBDA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MLAMBDA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLAMBDA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MLAMBDA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MLAMBDA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MLAMBDA
8     (SKIP&RET 1)


Disassembly of function MLAMBDA
(CONST 0) = $LISTP
(CONST 1) = "First argument to LAMBDA must be a list:~%~M"
(CONST 2) = MERROR
(CONST 3) = NOEVALARGS
(CONST 4) = MLOCP
(CONST 5) = LOCLIST
(CONST 6) = MDEFLISTP
(CONST 7) = (MLIST)
(CONST 8) = MFEXPRP
(CONST 9) = MQUOTEP
(CONST 10) = MEVAL
(CONST 11) = "Illegal LAMBDA parameter:~%~M"
(CONST 12) = *MLAMBDA-CALL-STACK*
(CONST 13) = 10
(CONST 14) = 50
(CONST 15) = BINDLIST
(CONST 16) = MBIND
(CONST 17) = AEXPRP
(CONST 18) = LAMBDA
(CONST 19) = "No LAMBDA body present"
(CONST 20) = MEVALN
(CONST 21) = -5
(CONST 22) = MUNLOCAL
(CONST 23) = MUNBIND
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (AEXPRP BINDLIST *MLAMBDA-CALL-STACK* MFEXPRP LOCLIST)
writes special variables : (LOCLIST NOEVALARGS)
201 byte-code instructions:
0     (LOAD 5)
1     (CDR)
2     (CAR&PUSH)
3     (CALL1&JMPIF 0 L12)                 ; $LISTP
6     (CONST&PUSH 1)                      ; "First argument to LAMBDA must be a list:~%~M"
7     (LOAD 6)
8     (CDR)
9     (CAR&PUSH)
10    (CALL2 2)                           ; MERROR
12    L12
12    (NIL)
13    (SETVALUE 3)                        ; NOEVALARGS
15    (LOAD 5)
16    (CDR)
17    (CAR)
18    (CDR&PUSH)
19    (T)
20    (BIND 4)                            ; MLOCP
22    (NIL&PUSH)
23    (GETVALUE 5)                        ; LOCLIST
25    (CONS)
26    (SETVALUE 5)                        ; LOCLIST
28    (PUSH-NIL 2)
30    (LOAD&JMPIFNOT 5 L72)
33    L33
33    (LOAD&JMPIF 10 L40)
36    (LOAD&PUSH 5)
37    (CALL1&JMPIFNOT 6 L72)              ; MDEFLISTP
40    L40
40    (LOAD&PUSH 5)
41    (CALL1&JMPIF 6 L205)                ; MDEFLISTP
45    (GETVALUE 8)                        ; MFEXPRP
47    (JMPIFNOT L55)
49    L49
49    (LOAD&CAR&PUSH 5)
51    (CALL1&JMPIF 9 L224)                ; MQUOTEP
55    L55
55    (LOAD 5)
56    (CAR)
57    (JMPIFATOM L241)
60    (CONST&PUSH 11)                     ; "Illegal LAMBDA parameter:~%~M"
61    (LOAD&CAR&PUSH 6)
63    (CALL2 2)                           ; MERROR
65    L65
65    (LOAD&CDR&STORE 10)
67    (LOAD&CDR&STORE 5)
69    (LOAD&JMPIF 5 L33)
72    L72
72    (LOAD&PUSH 1)
73    (LOAD&PUSH 11)
74    (CALLS1&STORE 163 10)               ; NRECONC
77    (LOAD&PUSH 0)
78    (LOAD&PUSH 6)
79    (CALLS1&STORE 163 5)                ; NRECONC
82    (SKIP 2)
84    (NIL&PUSH)
85    (GETVALUE&PUSH 12)                  ; *MLAMBDA-CALL-STACK*
87    (UNWIND-PROTECT-OPEN L273)
90    (LOAD&PUSH 2)
91    (CALLS1&PUSH 10)                    ; ARRAY-TOTAL-SIZE
93    (LOAD&PUSH 3)
94    (CALLS1&PUSH 24)                    ; FILL-POINTER
96    (CONST&PUSH 13)                     ; 10
97    (CALLSR&PUSH 2 53)                  ; +
100   (CALLSR&JMPIF 1 48 L120)            ; >
104   (LOAD&PUSH 2)
105   (LOAD&PUSH 3)
106   (CALLS1&PUSH 10)                    ; ARRAY-TOTAL-SIZE
108   (CONST&PUSH 14)                     ; 50
109   (CALLSR&PUSH 2 53)                  ; +
112   (PUSH-UNBOUND 6)
114   (LOAD&PUSH 10)
115   (CALLS1&STORE 24 2)                 ; FILL-POINTER
118   (CALLS1 30)                         ; ADJUST-ARRAY
120   L120
120   (GETVALUE&PUSH 15)                  ; BINDLIST
122   (LOAD&PUSH 3)
123   (CALLS1 26)                         ; VECTOR-PUSH
125   (LOAD&PUSH 9)
126   (LOAD&PUSH 3)
127   (CALLS1 26)                         ; VECTOR-PUSH
129   (LOAD&PUSH 7)
130   (LOAD&PUSH 3)
131   (CALLS1 26)                         ; VECTOR-PUSH
133   (LOAD&PUSH 12)
134   (LOAD&PUSH 3)
135   (CALLS1 26)                         ; VECTOR-PUSH
137   (LOAD&PUSH 11)
138   (LOAD&PUSH 3)
139   (CALLS1 26)                         ; VECTOR-PUSH
141   (LOAD&PUSH 7)
142   (LOAD&PUSH 13)
143   (LOAD&PUSH 13)
144   (CALL 3 16)                         ; MBIND
147   (T&STORE 3)
149   (GETVALUE 17)                       ; AEXPRP
151   (JMPIFNOT L168)
153   (LOAD 13)
154   (CDR)
155   (CDR)
156   (CAR&PUSH)
157   (CALLS2&JMPIFNOT 4 L168)            ; CONSP
160   (LOAD 13)
161   (CDR)
162   (CDR)
163   (CAR)
164   (CAR)
165   (CAR&PUSH)
166   (CONST 18)                          ; LAMBDA
167   (EQ)
168   L168
168   (BIND 17)                           ; AEXPRP
170   (LOAD 16)
172   (CDR)
173   (CDR)
174   (JMPIFNOT L258)
177   (LOAD 16)
179   (CDR)
180   (CDR)
181   (CDR)
182   (JMPIF L264)
185   (LOAD 16)
187   (CDR)
188   (CDR)
189   (CAR&PUSH)
190   (CALL1 10)                          ; MEVAL
192   L192
192   (UNBIND1)
193   (VALUES1)
194   (UNWIND-PROTECT-NORMAL-EXIT)
195   (LOADI 0 0 1)
199   (JMPIFNOT L302)
202   (JMP L279)
205   L205
205   (LOAD 5)
206   (CAR)
207   (CDR)
208   (STORE 5)
209   (CONST&PUSH 7)                      ; (MLIST)
210   (LOAD 11)
211   (CONS&PUSH)
212   (NIL)
213   (CONS)
214   (STORE 10)
216   (GETVALUE 8)                        ; MFEXPRP
218   (JMPIFNOT L55)
221   (JMP L49)
224   L224
224   (LOAD&CAR&PUSH 10)
226   (LOAD&CONS&STORE 1)
228   (LOAD 5)
229   (CAR)
230   (CDR)
231   (CAR&PUSH)
232   (LOAD&CONS&STORE 0)
234   (JMP L65)
237   L237
237   (LOAD 10)
238   (CAR)
239   (JMP L252)
241   L241
241   (LOAD&CAR&PUSH 5)
243   (LOAD&CONS&STORE 0)
245   (LOAD&JMPIF 8 L237)
248   (LOAD&CAR&PUSH 10)
250   (CALL1 10)                          ; MEVAL
252   L252
252   (PUSH)
253   (LOAD&CONS&STORE 1)
255   (JMP L65)
258   L258
258   (CONST&PUSH 19)                     ; "No LAMBDA body present"
259   (CALL1 2)                           ; MERROR
261   (JMP L192)
264   L264
264   (LOAD 16)
266   (CDR)
267   (CDR&PUSH)
268   (CALL1 20)                          ; MEVALN
270   (JMP L192)
273   L273
273   (LOADI 0 0 1)
277   (JMPIFNOT L302)
279   L279
279   (GETVALUE&PUSH 12)                  ; *MLAMBDA-CALL-STACK*
281   (CONST&PUSH 21)                     ; -5
282   (LOAD&PUSH 1)
283   (CALLS1&PUSH 24)                    ; FILL-POINTER
285   (CALLSR&PUSH 2 53)                  ; +
288   (LOAD&PUSH 1)
289   (LOAD&PUSH 1)
290   (CALLS1 25)                         ; SYSTEM::SET-FILL-POINTER
292   (SKIP 2)
294   (CALL0 22)                          ; MUNLOCAL
296   (LOADI&PUSH 0 0 5)
300   (CALL1 23)                          ; MUNBIND
302   L302
302   (UNWIND-PROTECT-CLOSE)
303   (SKIP 2)
305   (UNBIND1)
306   (SKIP&RET 7)


Disassembly of function #:|(DEFMSPEC MPROGN (FORM) ...)-21-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MPROGN (FORM) ...)-21-2-1|>
(CONST 1) = MPROGN
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MPROGN (FORM) ...)-21-2-1|>
1     (CONST&PUSH 1)                      ; MPROGN
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MPROGN (FORM) ...)-21-2-1|
(CONST 0) = MEVALN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (CALL1 0)                           ; MEVALN
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MEVALN (L) ...)-22|
(CONST 0) = MEVALN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVALN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVALN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVALN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVALN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVALN
8     (SKIP&RET 1)


Disassembly of function MEVALN
(CONST 0) = $%%
(CONST 1) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($%%)
17 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST 0)                           ; $%%
2     (BIND 0)                            ; $%%
4     (JMP L14)
6     L6
6     (LOAD&CAR&PUSH 3)
8     (CALL1 1)                           ; MEVAL
10    (SETVALUE 0)                        ; $%%
12    (LOAD&CDR&STORE 3)
14    L14
14    (LOAD 3)
15    (CDR)
16    (JMPIF L6)
18    (LOAD&CAR&PUSH 3)
20    (CALL1 1)                           ; MEVAL
22    (UNBIND1)
23    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MQAPPLY1 (FORM) ...)-23|
(CONST 0) = MQAPPLY1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MQAPPLY1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQAPPLY1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MQAPPLY1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MQAPPLY1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MQAPPLY1
8     (SKIP&RET 1)


Disassembly of function MQAPPLY1
(CONST 0) = AEXPRP
(CONST 1) = MQUOTEP
(CONST 2) = MEVAL
(CONST 3) = ARYP
(CONST 4) = LAMBDA
(CONST 5) = "Improper array call"
(CONST 6) = MERROR
(CONST 7) = NOEVALARGS
(CONST 8) = MLAMBDA
(CONST 9) = MEVALARGS
(CONST 10) = MAPPLY1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NOEVALARGS ARYP)
53 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&CDR&PUSH 2)
3     (NIL)
4     (BIND 0)                            ; AEXPRP
6     (LOAD&CAR&STORE 3 4)
9     (LOAD&CDR&STORE 3)
11    (LOAD&PUSH 4)
12    (CALL1&JMPIF 1 L19)                 ; MQUOTEP
15    (LOAD&PUSH 4)
16    (CALL1 2)                           ; MEVAL
18    (STORE 4)
19    L19
19    (LOAD 4)
20    (JMPIFATOM L42)
22    (LOAD 4)
23    (CAR)
24    (CAR&PUSH)
25    (JMPIFEQTO 4 L57)                   ; LAMBDA
28    (LOAD&PUSH 4)
29    (LOAD&PUSH 4)
30    (CALL1&PUSH 9)                      ; MEVALARGS
32    (LOAD 8)
33    (CDR)
34    (CAR&PUSH)
35    (LOAD&PUSH 9)
36    (CALL 4 10)                         ; MAPPLY1
39    L39
39    (UNBIND1)
40    (SKIP&RET 4)
42    L42
42    (LOAD&PUSH 4)
43    (GETVALUE 3)                        ; ARYP
45    (CONS&PUSH)
46    (LOAD 4)
47    (CONS&PUSH)
48    (CALL1 2)                           ; MEVAL
50    (JMP L39)
52    L52
52    (CONST&PUSH 5)                      ; "Improper array call"
53    (CALL1 6)                           ; MERROR
55    (JMP L39)
57    L57
57    (GETVALUE 3)                        ; ARYP
59    (JMPIF L52)
61    (LOAD&PUSH 4)
62    (LOAD&PUSH 4)
63    (LOAD 8)
64    (CDR)
65    (CAR&PUSH)
66    (GETVALUE&PUSH 7)                   ; NOEVALARGS
68    (LOAD&PUSH 10)
69    (CALL 5 8)                          ; MLAMBDA
72    (JMP L39)


Disassembly of function #:|(DEFMFUN MEVAL (FORM) ...)-24|
(CONST 0) = MEVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVAL
8     (SKIP&RET 1)


Disassembly of function MEVAL
(CONST 0) = MEVAL1
(CONST 1) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; MEVAL1
3     (NIL&PUSH)
4     (CALL2 1)                           ; SIMPLIFYA
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SAFE-MGETL (ATOM INDS) ...)-25|
(CONST 0) = SAFE-MGETL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SAFE-MGETL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SAFE-MGETL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SAFE-MGETL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SAFE-MGETL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SAFE-MGETL
8     (SKIP&RET 1)


Disassembly of function SAFE-MGETL
(CONST 0) = MPROPS
(CONST 1) = GETL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2 6)                          ; SYMBOLP
3     (JMPIFNOT1 L22)
5     (LOAD&PUSH 2)
6     (CONST&PUSH 0)                      ; MPROPS
7     (PUSH-UNBOUND 1)
9     (CALLS2&PUSH 132)                   ; GET
11    (LOAD 0)
12    (JMPIFNOT1 L20)
14    (PUSH)
15    (LOAD&PUSH 3)
16    (CALL2 1)                           ; GETL
18    (SKIP&RET 4)
20    L20
20    (SKIP&RET 4)
22    L22
22    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN SAFE-MGET (ATOM INDS) ...)-26|
(CONST 0) = SAFE-MGET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SAFE-MGET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SAFE-MGET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SAFE-MGET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SAFE-MGET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SAFE-MGET
8     (SKIP&RET 1)


Disassembly of function SAFE-MGET
(CONST 0) = MPROPS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2 6)                          ; SYMBOLP
3     (JMPIFNOT1 L24)
5     (LOAD&PUSH 2)
6     (CONST&PUSH 0)                      ; MPROPS
7     (PUSH-UNBOUND 1)
9     (CALLS2&PUSH 132)                   ; GET
11    (LOAD 0)
12    (JMPIFNOT1 L22)
14    (CDR&PUSH)
15    (LOAD&PUSH 3)
16    (PUSH-UNBOUND 1)
18    (CALLS2 133)                        ; GETF
20    (SKIP&RET 4)
22    L22
22    (SKIP&RET 4)
24    L24
24    (SKIP&RET 3)


Disassembly of function #:|(DEFVAR *LAST-MEVAL1-FORM* NIL)-27|
(CONST 0) = (SPECIAL *LAST-MEVAL1-FORM*)
(CONST 1) = *LAST-MEVAL1-FORM*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *LAST-MEVAL1-FORM*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *LAST-MEVAL1-FORM*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *LAST-MEVAL1-FORM*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *LAST-MEVAL1-FORM*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MEVAL1 (FORM) ...)-28|
(CONST 0) = MEVAL1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVAL1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVAL1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVAL1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVAL1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVAL1
8     (SKIP&RET 1)


Disassembly of function MEVAL1
(CONST 0) = $NUMER
(CONST 1) = SAFE-MGET
(CONST 2) = $%E
(CONST 3) = $%ENUMER
(CONST 4) = BINDTEST
(CONST 5) = SAFE-GET
(CONST 6) = "~:M unbound variable"
(CONST 7) = MERROR
(CONST 8) = MFILEP
(CONST 9) = VALUE
(CONST 10) = DSKGET
(CONST 11) = $REFCHECK
(CONST 12) = $VALUES
(CONST 13) = MEMQ
(CONST 14) = REFCHKL
(CONST 15) = "~:M has value.~%"
(CONST 16) = MTELL
(CONST 17) = BAKTRCL
(CONST 18) = TRANSP
(CONST 19) = ARYP
(CONST 20) = *LAST-MEVAL1-FORM*
(CONST 21) = ARRAY
(CONST 22) = OPEXPRP
(CONST 23) = (MPLUS MTIMES MEXPT MNCTIMES)
(CONST 24) = DEBUG
(CONST 25) = *BREAK-POINTS*
(CONST 26) = *BREAK-STEP*
(CONST 27) = 0
(CONST 28) = SLOOP::SLOOP-TYPE-ERROR
(CONST 29) = $SUBSCRMAP
(CONST 30) = MARGS
(CONST 31) = X
(CONST 32) = MXORLISTP
(CONST 33) = NOEVALARGS
(CONST 34) = SUBGEN
(CONST 35) = MQAPPLY
(CONST 36) = MQAPPLY1
(CONST 37) = BADFUNCHK
(CONST 38) = (NOUN)
(CONST 39) = GETL
(CONST 40) = NOUNSFLAG
(CONST 41) = 1
(CONST 42) = GETCHAR
(CONST 43) = %
(CONST 44) = (SUBR FSUBR LSUBR)
(CONST 45) = GETL-LM-FCN-PROP
(CONST 46) = (MFEXPR* MFEXPR*S)
(CONST 47) = $VERBIFY
(CONST 48) = (NOUN)
(CONST 49) = $TRANSRUN
(CONST 50) = (T-MFEXPR)
(CONST 51) = SAFE-MGETL
(CONST 52) = (TRANSLATED-MMACRO)
(CONST 53) = TRACE
(CONST 54) = TRANSLATED
(CONST 55) = LOCAL-FUN
(CONST 56) = (EXPR SUBR LSUBR)
(CONST 57) = (HASHAR ARRAY)
(CONST 58) = (MEXPR MMACRO)
(CONST 59) = (T-MFEXPR)
(CONST 60) = (MFEXPR* MFEXPR*S)
(CONST 61) = (SUBR FSUBR EXPR FEXPR MACRO LSUBR)
(CONST 62) = (MEXPR MMACRO)
(CONST 63) = (ARRAY HASHAR)
(CONST 64) = I-$UNSTORE
(CONST 65) = HASHAR
(CONST 66) = MEVALARGS
(CONST 67) = HARRFIND
(CONST 68) = (FEXPR FSUBR)
(CONST 69) = FEXPRERRP
(CONST 70) = 
"Attempt to call ~A ~A from MACSYMA level.~
				 ~%Send a bug note."
(CONST 71) = SUBR
(CONST 72) = LSUBR
(CONST 73) = NOUN
(CONST 74) = NOUNL
(CONST 75) = (%SUM %PRODUCT)
(CONST 76) = DO%SUM
(CONST 77) = MEVAL2
(CONST 78) = ARRFIND
(CONST 79) = MEXPR
(CONST 80) = MLAMBDA
(CONST 81) = (MMACRO TRANSLATED-MMACRO)
(CONST 82) = MMACRO-APPLY
(CONST 83) = MEVAL
(CONST 84) = MFEXPR*
(CONST 85) = MACRO
(CONST 86) = T-MFEXPR
(CONST 87) = LOAD-FUNCTION
(CONST 88) = MEVAL1-EXTEND
(CONST 89) = OPERATORS
(CONST 90) = ATVALUES
(CONST 91) = AT1
(CONST 92) = NONARRAY
(CONST 93) = GETOPR
(CONST 94) = LAMBDA
(CONST 95) = "Improper array call"
(CONST 96) = MAPPLY1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(NOUNL $TRANSRUN NOUNSFLAG X *BREAK-STEP* DEBUG FEXPRERRP $SUBSCRMAP
 *BREAK-POINTS* REFCHKL $VALUES $REFCHECK $%ENUMER $NUMER NOEVALARGS ARYP
 OPEXPRP BAKTRCL)
writes special variables : (X TRANSP NOEVALARGS REFCHKL ARYP *LAST-MEVAL1-FORM*)
712 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L137)
4     (LOAD 1)
5     (CAR)
6     (JMPIFCONSP L1080)
9     (LOAD&CAR&PUSH 1)
11    (NIL)
12    (CONS&PUSH)
13    (LOAD 2)
14    (CDR)
15    (CONS)
16    (STORE 1)
17    L17
17    (GETVALUE 17)                       ; BAKTRCL
19    (BIND 17)                           ; BAKTRCL
21    (NIL)
22    (BIND 18)                           ; TRANSP
24    (NIL&PUSH)
25    (NIL)
26    (BIND 19)                           ; ARYP
28    (LOAD 11)
29    (SETVALUE 20)                       ; *LAST-MEVAL1-FORM*
31    (CONST&PUSH 21)                     ; ARRAY
32    (LOAD 12)
33    (CAR)
34    (CDR&PUSH)
35    (CALL2 13)                          ; MEMQ
37    (SETVALUE 19)                       ; ARYP
39    (GETVALUE 22)                       ; OPEXPRP
41    (JMPIF L537)
44    (GETVALUE 19)                       ; ARYP
46    (JMPIF L537)
49    (LOAD 11)
50    (CAR)
51    (CAR&PUSH)
52    (CONST&PUSH 23)                     ; (MPLUS MTIMES MEXPT MNCTIMES)
53    (CALL2&JMPIFNOT 13 L537)            ; MEMQ
57    (LOAD&JMPIFNOT 3 L988)
61    L61
61    (LOAD 11)
62    (CAR)
63    (CAR&PUSH)
64    (CONST&PUSH 89)                     ; OPERATORS
66    (CALL2&JMPIFNOT 5 L74)              ; SAFE-GET
69    (GETVALUE 19)                       ; ARYP
71    (JMPIFNOT L988)
74    L74
74    (LOAD 11)
75    (CAR)
76    (CAR&PUSH)
77    (LOAD 12)
78    (CAR)
79    (CAR&PUSH)
80    (CALLS1&STORE 78 4)                 ; SYMBOL-VALUE
83    (JMPIFEQ L988)
86    (GETVALUE 19)                       ; ARYP
88    (JMPIFNOT L99)
90    (LOAD 11)
91    (CAR)
92    (CAR&PUSH)
93    (CONST&PUSH 92)                     ; NONARRAY
95    (CALL2&JMPIF 5 L1013)               ; SAFE-GET
99    L99
99    (LOAD 3)
100   (JMPIFATOM L1029)
103   (LOAD 3)
104   (CAR)
105   (CAR&PUSH)
106   (JMPIFNOTEQTO 94 L1051)             ; LAMBDA
110   (GETVALUE 19)                       ; ARYP
112   (JMPIF L1068)
115   (LOAD 3)
116   L116
116   (PUSH)
117   (LOAD&CDR&PUSH 12)
119   (LOAD 13)
120   (CAR)
121   (CAR&PUSH)
122   (GETVALUE&PUSH 33)                  ; NOEVALARGS
124   (LOAD&PUSH 15)
125   (CALL 5 80)                         ; MLAMBDA
128   (JMP L1063)
131   L131
131   (LOAD&PUSH 0)
132   (JMPTAIL 1 4 L0)
137   L137
137   (NIL&PUSH)
138   (LOAD&PUSH 2)
139   (CALLS2&JMPIFNOT 6 L170)            ; SYMBOLP
142   (GETVALUE 0)                        ; $NUMER
144   (JMPIFNOT L161)
146   (LOAD&PUSH 2)
147   (CONST&PUSH 0)                      ; $NUMER
148   (CALL2 1)                           ; SAFE-MGET
150   (STORE 0)
151   (JMPIFNOT L161)
153   (LOAD&PUSH 2)
154   (JMPIFNOTEQTO 2 L131)               ; $%E
157   (GETVALUE 3)                        ; $%ENUMER
159   (JMPIF L131)
161   L161
161   (LOAD&PUSH 2)
162   (CALLS1&JMPIF 79 L204)              ; BOUNDP
165   (LOAD&PUSH 2)
166   (CONST&PUSH 4)                      ; BINDTEST
167   (CALL2&JMPIF 5 L173)                ; SAFE-GET
170   L170
170   (LOAD 2)
171   (SKIP&RET 3)
173   L173
173   (CONST&PUSH 6)                      ; "~:M unbound variable"
174   (LOAD&PUSH 3)
175   (CALL2 7)                           ; MERROR
177   (GETVALUE 11)                       ; $REFCHECK
179   (JMPIFNOT L239)
181   (JMP L216)
183   L183
183   (LOAD 0)
184   (CDR)
185   (CAR&PUSH)
186   (LOAD 1)
187   (CDR)
188   (CDR)
189   (CAR&PUSH)
190   (CONST&PUSH 9)                      ; VALUE
191   (NIL&PUSH)
192   (CALL&PUSH 4 10)                    ; DSKGET
195   (CALLS1&STORE 91 0)                 ; EVAL
198   (GETVALUE 11)                       ; $REFCHECK
200   (JMPIFNOT L239)
202   (JMP L216)
204   L204
204   (LOAD&PUSH 2)
205   (CALLS1&STORE 78 0)                 ; SYMBOL-VALUE
208   (PUSH)
209   (CALL1&JMPIF 8 L183)                ; MFILEP
212   (GETVALUE 11)                       ; $REFCHECK
214   (JMPIFNOT L239)
216   L216
216   (LOAD&PUSH 2)
217   (GETVALUE 12)                       ; $VALUES
219   (CDR&PUSH)
220   (CALL2&JMPIFNOT 13 L239)            ; MEMQ
223   (LOAD&PUSH 2)
224   (GETVALUE&PUSH 14)                  ; REFCHKL
226   (CALL2&JMPIF 13 L239)               ; MEMQ
229   (LOAD&PUSH 2)
230   (GETVALUE 14)                       ; REFCHKL
232   (CONS)
233   (SETVALUE 14)                       ; REFCHKL
235   (CONST&PUSH 15)                     ; "~:M has value.~%"
236   (LOAD&PUSH 3)
237   (CALL2 16)                          ; MTELL
239   L239
239   (POP)
240   (SKIP&RET 2)
242   L242
242   (GETVALUE&PUSH 25)                  ; *BREAK-POINTS*
244   (CONST&PUSH 27)                     ; 0
245   (LOAD&PUSH 1)
246   (CALLS1&PUSH 24)                    ; FILL-POINTER
248   (LOAD&PUSH 0)
249   (CALLS2&JMPIF 13 L258)              ; SYSTEM::FIXNUMP
252   (CALL0 28)                          ; SLOOP::SLOOP-TYPE-ERROR
254   (JMP L258)
256   L256
256   (LOAD&INC&STORE 1)
258   L258
258   (LOAD&PUSH 1)
259   (LOAD&PUSH 1)
260   (CALLSR&JMPIF 1 50 L277)            ; >=
264   (LOAD&PUSH 2)
265   (LOAD&PUSH 2)
266   (CALLSR 1 1)                        ; AREF
269   (CAR&PUSH)
270   (LOAD 15)
272   (JMPIFNOTEQ L256)
274   (LOAD&PUSH 14)
275   (CALL1 25)                          ; *BREAK-POINTS*
277   L277
277   (SKIP 3)
279   (GETVALUE 29)                       ; $SUBSCRMAP
281   (JMPIFNOT L596)
284   (JMP L562)
287   L287
287   (NIL)
288   (SETVALUE 33)                       ; NOEVALARGS
290   (LOAD&PUSH 11)
291   (CALL1 34)                          ; SUBGEN
293   (JMP L1063)
296   L296
296   (LOAD&PUSH 11)
297   (CALL1 36)                          ; MQAPPLY1
299   (JMP L1063)
302   L302
302   (LOAD 11)
303   (CAR)
304   (CAR&PUSH)
305   (CONST&PUSH 52)                     ; (TRANSLATED-MMACRO)
307   (CALL2 39)                          ; GETL
309   (SETVALUE 18)                       ; TRANSP
311   (JMPIFNOT L712)
314   (JMP L793)
317   L317
317   (T)
318   (SETVALUE 18)                       ; TRANSP
320   (LOAD 11)
321   (CAR)
322   (CAR)
323   (STORE 3)
324   (JMPIFNOT L756)
327   (JMP L750)
330   L330
330   (LOAD 11)
331   (CAR)
332   (CAR&PUSH)
333   (CONST&PUSH 57)                     ; (HASHAR ARRAY)
335   (CALL2 51)                          ; SAFE-MGETL
337   (STORE 3)
338   (JMPIFNOT L950)
341   (JMP L797)
344   L344
344   (LOAD 11)
345   (CAR)
346   (CAR&PUSH)
347   (CONST&PUSH 61)                     ; (SUBR FSUBR EXPR FEXPR MACRO LSUBR)
349   (CALL2 45)                          ; GETL-LM-FCN-PROP
351   (STORE 3)
352   (JMPIFNOT L950)
355   (JMP L797)
358   L358
358   (LOAD&CAR&PUSH 3)
360   (CONST&PUSH 63)                     ; (ARRAY HASHAR)
362   (CALL2&JMPIFNOT 13 L834)            ; MEMQ
366   (LOAD 3)
367   (CDR)
368   (CAR&PUSH)
369   (CALL1&JMPIFNOT 8 L834)             ; MFILEP
373   (LOAD 11)
374   (CAR)
375   (CAR&PUSH)
376   (NIL)
377   (CONS&PUSH)
378   (CALL1 64)                          ; I-$UNSTORE
380   (LOAD&PUSH 11)
381   (JSR L0)
384   (JMP L1063)
387   L387
387   (LOAD&CAR&PUSH 11)
389   (LOAD&CDR&PUSH 12)
391   (CALL1 66)                          ; MEVALARGS
393   (CONS&PUSH)
394   (CALL1 67)                          ; HARRFIND
396   (JMP L1063)
399   L399
399   (GETVALUE 69)                       ; FEXPRERRP
401   (JMPIFNOT L413)
403   (CONST&PUSH 70)                     ; "Attempt to call ~A ~A from MACSYMA level.~
				 ~%Send a bug note."
405   (LOAD&CAR&PUSH 4)
407   (LOAD 13)
408   (CAR)
409   (CAR&PUSH)
410   (CALL 3 7)                          ; MERROR
413   L413
413   (NIL)
414   (SETVALUE 33)                       ; NOEVALARGS
416   (LOAD 11)
417   (CAR)
418   (JMP L905)
421   L421
421   (LOAD 11)
422   (CAR)
423   (JMP L915)
426   L426
426   (LOAD 3)
427   (CDR)
428   (CAR&PUSH)
429   (LOAD 12)
430   (CAR)
431   (CDR)
432   (JMP L1042)
435   L435
435   (LOAD&CDR&PUSH 11)
437   (LOAD 12)
438   (CAR)
439   (CAR&PUSH)
440   (CALL2 76)                          ; DO%SUM
442   (STORE 3)
443   (NIL)
444   (SETVALUE 33)                       ; NOEVALARGS
446   (LOAD 11)
447   (CAR)
448   (CAR&PUSH)
449   (NIL)
450   (CONS&PUSH)
451   (LOAD 4)
452   (CONS)
453   (JMP L1063)
456   L456
456   (LOAD 11)
457   (CAR)
458   (CAR&PUSH)
459   (CONST&PUSH 75)                     ; (%SUM %PRODUCT)
461   (CALL2&JMPIF 13 L435)               ; MEMQ
464   (LOAD&CDR&PUSH 11)
466   (CALL1&PUSH 66)                     ; MEVALARGS
468   (LOAD&PUSH 12)
469   (CALL2 77)                          ; MEVAL2
471   (JMP L1063)
474   L474
474   (LOAD&CAR&PUSH 11)
476   (LOAD&CDR&PUSH 12)
478   (CALL1 66)                          ; MEVALARGS
480   (CONS&PUSH)
481   (CALL1 78)                          ; ARRFIND
483   (JMP L1063)
486   L486
486   (LOAD 3)
487   (CDR)
488   (CAR)
489   (JMP L116)
492   L492
492   (NIL)
493   (SETVALUE 33)                       ; NOEVALARGS
495   (LOAD 3)
496   (CDR)
497   (CAR&PUSH)
498   (LOAD&PUSH 12)
499   (CALL2&PUSH 82)                     ; MMACRO-APPLY
501   (CALL1 83)                          ; MEVAL
503   (JMP L1063)
506   L506
506   (NIL)
507   (SETVALUE 33)                       ; NOEVALARGS
509   (LOAD 3)
510   (CDR)
511   (CAR&PUSH)
512   (LOAD&PUSH 12)
513   (NIL)
514   (CONS)
515   (APPLY 0)
517   (JMP L1063)
520   L520
520   (NIL)
521   (SETVALUE 33)                       ; NOEVALARGS
523   (LOAD 11)
524   (CAR)
525   (CAR&PUSH)
526   (LOAD 12)
527   (CDR)
528   (CONS)
529   (STORE 11)
531   (PUSH)
532   (CALLS1 91)                         ; EVAL
534   (JMP L1063)
537   L537
537   (GETVALUE 24)                       ; DEBUG
539   (JMPIFNOT L558)
541   (GETVALUE 25)                       ; *BREAK-POINTS*
543   (JMPIFNOT L558)
545   (GETVALUE 26)                       ; *BREAK-STEP*
547   (JMPIFNOT L242)
550   (GETVALUE&PUSH 26)                  ; *BREAK-STEP*
552   (LOAD&PUSH 12)
553   (FUNCALL 1)
555   (JMPIFNOT L242)
558   L558
558   (GETVALUE 29)                       ; $SUBSCRMAP
560   (JMPIFNOT L596)
562   L562
562   (GETVALUE 19)                       ; ARYP
564   (JMPIFNOT L596)
566   (LOAD&PUSH 11)
567   (CALL1 30)                          ; MARGS
569   (BIND 31)                           ; X
571   (GETVALUE 31)                       ; X
573   (JMPIFNOT L590)
575   L575
575   (GETVALUE 31)                       ; X
577   (CAR&PUSH)
578   (CALL1&JMPIF 32 L590)               ; MXORLISTP
581   (GETVALUE 31)                       ; X
583   (CDR)
584   (SETVALUE 31)                       ; X
586   (GETVALUE 31)                       ; X
588   (JMPIF L575)
590   L590
590   (GETVALUE 31)                       ; X
592   (UNBIND1)
593   (JMPIF L287)
596   L596
596   (LOAD 11)
597   (CAR)
598   (CAR&PUSH)
599   (JMPIFEQTO 35 L296)                 ; MQAPPLY
603   (LOAD 11)
604   (CAR)
605   (CAR&PUSH)
606   (LOAD 12)
607   (CAR)
608   (CAR&PUSH)
609   (NIL&PUSH)
610   (CALL 3 37)                         ; BADFUNCHK
613   L613
613   (LOAD 11)
614   (CAR)
615   (CAR&PUSH)
616   (CALLS2&JMPIFNOT 6 L628)            ; SYMBOLP
619   (LOAD 11)
620   (CAR)
621   (CAR&PUSH)
622   (CONST&PUSH 38)                     ; (NOUN)
624   (CALL2&JMPIF 39 L793)               ; GETL
628   L628
628   (GETVALUE 40)                       ; NOUNSFLAG
630   (JMPIFNOT L684)
632   (LOAD 11)
633   (CAR)
634   (CAR&PUSH)
635   (CONST&PUSH 41)                     ; 1
637   (CALL2&PUSH 42)                     ; GETCHAR
639   (JMPIFNOTEQTO 43 L684)              ; %
642   (LOAD 11)
643   (CAR)
644   (CAR&PUSH)
645   (CONST&PUSH 44)                     ; (SUBR FSUBR LSUBR)
647   (CALL2&JMPIF 45 L684)               ; GETL-LM-FCN-PROP
650   (LOAD 11)
651   (CAR)
652   (CAR&PUSH)
653   (CALLS2&JMPIFNOT 6 L664)            ; SYMBOLP
656   (LOAD 11)
657   (CAR)
658   (CAR&PUSH)
659   (CONST&PUSH 46)                     ; (MFEXPR* MFEXPR*S)
661   (CALL2&JMPIF 39 L684)               ; GETL
664   L664
664   (LOAD 11)
665   (CAR)
666   (CAR&PUSH)
667   (CALL1 47)                          ; $VERBIFY
669   (LOAD 11)
670   (CAR)
671   (CAR&PUSH)
672   (CALLS2&JMPIFNOT 6 L684)            ; SYMBOLP
675   (LOAD 11)
676   (CAR)
677   (CAR&PUSH)
678   (CONST&PUSH 48)                     ; (NOUN)
680   (CALL2&JMPIF 39 L793)               ; GETL
684   L684
684   (GETVALUE 19)                       ; ARYP
686   (JMPIF L712)
688   (GETVALUE 49)                       ; $TRANSRUN
690   (JMPIFNOT L712)
692   (LOAD 11)
693   (CAR)
694   (CAR&PUSH)
695   (CONST&PUSH 50)                     ; (T-MFEXPR)
697   (CALL2&JMPIF 51 L707)               ; SAFE-MGETL
700   (LOAD 11)
701   (CAR)
702   (CAR&PUSH)
703   (CALLS2&JMPIF 6 L302)               ; SYMBOLP
707   L707
707   (SETVALUE 18)                       ; TRANSP
709   (JMPIF L793)
712   L712
712   (GETVALUE 19)                       ; ARYP
714   (JMPIF L756)
716   (LOAD 11)
717   (CAR)
718   (CAR&PUSH)
719   (CONST&PUSH 53)                     ; TRACE
721   (CALL2&JMPIF 1 L747)                ; SAFE-MGET
724   (GETVALUE 49)                       ; $TRANSRUN
726   (JMPIFNOT L747)
728   (LOAD 11)
729   (CAR)
730   (CAR&PUSH)
731   (CONST&PUSH 54)                     ; TRANSLATED
733   (CALL2&JMPIFNOT 5 L747)             ; SAFE-GET
736   (LOAD 11)
737   (CAR)
738   (CAR&PUSH)
739   (CONST&PUSH 55)                     ; LOCAL-FUN
741   (CALL2 1)                           ; SAFE-MGET
743   (NOT)
744   (JMPIF L317)
747   L747
747   (STORE 3)
748   (JMPIFNOT L756)
750   L750
750   (PUSH)
751   (CONST&PUSH 56)                     ; (EXPR SUBR LSUBR)
753   (CALL2&JMPIF 45 L793)               ; GETL-LM-FCN-PROP
756   L756
756   (GETVALUE 19)                       ; ARYP
758   (JMPIF L330)
761   (LOAD 11)
762   (CAR)
763   (CAR&PUSH)
764   (CONST&PUSH 58)                     ; (MEXPR MMACRO)
766   (CALL2&JMPIF 51 L793)               ; SAFE-MGETL
769   (LOAD 11)
770   (CAR)
771   (CAR&PUSH)
772   (CONST&PUSH 59)                     ; (T-MFEXPR)
774   (CALL2&JMPIF 51 L793)               ; SAFE-MGETL
777   (LOAD 11)
778   (CAR)
779   (CAR&PUSH)
780   (CALLS2&JMPIFNOT 6 L344)            ; SYMBOLP
784   (LOAD 11)
785   (CAR)
786   (CAR&PUSH)
787   (CONST&PUSH 60)                     ; (MFEXPR* MFEXPR*S)
789   (CALL2&JMPIFNOT 39 L344)            ; GETL
793   L793
793   (STORE 3)
794   (JMPIFNOT L950)
797   L797
797   (LOAD&CAR&PUSH 3)
799   (CONST&PUSH 62)                     ; (MEXPR MMACRO)
801   (CALL2&JMPIFNOT 13 L358)            ; MEMQ
805   (LOAD 3)
806   (CDR)
807   (CAR&PUSH)
808   (CALL1&JMPIFNOT 8 L358)             ; MFILEP
812   (LOAD&CAR&PUSH 3)
814   (LOAD 4)
815   (CDR)
816   (CAR)
817   (CDR)
818   (CAR&PUSH)
819   (LOAD 5)
820   (CDR)
821   (CAR)
822   (CDR)
823   (CDR)
824   (CAR&PUSH)
825   (LOAD&CAR&PUSH 6)
827   (NIL&PUSH)
828   (CALL&PUSH 4 10)                    ; DSKGET
831   (LIST 2)
833   (STORE 3)
834   L834
834   (LOAD&CAR&PUSH 3)
836   (JMPIFEQTO 65 L387)                 ; HASHAR
840   (LOAD&CAR&PUSH 3)
842   (CONST&PUSH 68)                     ; (FEXPR FSUBR)
844   (CALL2&JMPIF 13 L399)               ; MEMQ
848   (LOAD&CAR&PUSH 3)
850   (JMPIFEQTO 71 L421)                 ; SUBR
854   (LOAD&CAR&PUSH 3)
856   (JMPIFEQTO 72 L421)                 ; LSUBR
860   (LOAD&CAR&PUSH 3)
862   (JMPIFEQTO 73 L931)                 ; NOUN
866   (LOAD&CAR&PUSH 3)
868   (JMPIFEQTO 21 L474)                 ; ARRAY
872   (LOAD&CAR&PUSH 3)
874   (JMPIFEQTO 79 L486)                 ; MEXPR
878   (LOAD&CAR&PUSH 3)
880   (CONST&PUSH 81)                     ; (MMACRO TRANSLATED-MMACRO)
882   (CALL2&JMPIF 13 L492)               ; MEMQ
886   (LOAD&CAR&PUSH 3)
888   (JMPIFEQTO 84 L506)                 ; MFEXPR*
892   (LOAD&CAR&PUSH 3)
894   (JMPIFEQTO 85 L520)                 ; MACRO
898   (LOAD&CAR&PUSH 3)
900   (JMPIFNOTEQTO 86 L913)              ; T-MFEXPR
903   (LOAD 3)
904   (CDR)
905   L905
905   (CAR&PUSH)
906   (LOAD 12)
907   (CDR)
908   (APPLY 0)
910   (JMP L1063)
913   L913
913   (LOAD 3)
914   (CDR)
915   L915
915   (CAR&PUSH)
916   (LOAD&CDR&PUSH 12)
918   (CALL1 66)                          ; MEVALARGS
920   (APPLY 0)
922   (JMP L1063)
925   L925
925   (LOAD&PUSH 11)
926   (CALL1 88)                          ; MEVAL1-EXTEND
928   (JMP L1063)
931   L931
931   (LOAD 11)
932   (CAR)
933   (CAR&PUSH)
934   (GETVALUE&PUSH 74)                  ; NOUNL
936   (CALL2&JMPIF 13 L426)               ; MEMQ
940   (GETVALUE 40)                       ; NOUNSFLAG
942   (JMPIF L426)
945   (GETVALUE 19)                       ; ARYP
947   (JMPIFNOT L456)
950   L950
950   (GETVALUE 19)                       ; ARYP
952   (JMPIF L962)
954   (LOAD 11)
955   (CAR)
956   (CAR&PUSH)
957   (T&PUSH)
958   (CALL2&JMPIF 87 L613)               ; LOAD-FUNCTION
962   L962
962   (LOAD 11)
963   (CAR)
964   (CAR&PUSH)
965   (LOAD 12)
966   (CAR)
967   (CAR&PUSH)
968   (NIL&PUSH)
969   (CALL 3 37)                         ; BADFUNCHK
972   (LOAD 11)
973   (CAR)
974   (CAR&PUSH)
975   (CALLS2&JMPIFNOT 6 L925)            ; SYMBOLP
978   (LOAD 11)
979   (CAR)
980   (CAR&PUSH)
981   (CALLS1&STORE 79 3)                 ; BOUNDP
984   (LOAD&JMPIF 3 L61)
988   L988
988   (LOAD&CDR&PUSH 11)
990   (CALL1&PUSH 66)                     ; MEVALARGS
992   (LOAD&PUSH 12)
993   (CALL2 77)                          ; MEVAL2
995   (STORE 11)
997   (CAR)
998   (CAR&PUSH)
999   (CONST&PUSH 90)                     ; ATVALUES
1001  (CALL2&JMPIFNOT 1 L1010)            ; SAFE-MGET
1005  (LOAD&PUSH 11)
1006  (CALL1 91)                          ; AT1
1008  (JMPIF1 L1063)
1010  L1010
1010  (LOAD 11)
1011  (JMP L1063)
1013  L1013
1013  (LOAD 11)
1014  (CAR)
1015  (CAR&PUSH)
1016  (GETVALUE 19)                       ; ARYP
1018  (CONS&PUSH)
1019  (LOAD&CDR&PUSH 12)
1021  (CALL1 66)                          ; MEVALARGS
1023  (CONS)
1024  (UNBIND1)
1025  (SKIP 1)
1027  (JMP L1076)
1029  L1029
1029  (LOAD 11)
1030  (CAR)
1031  (CAR&PUSH)
1032  (LOAD&PUSH 4)
1033  (NIL&PUSH)
1034  (CALL 3 37)                         ; BADFUNCHK
1037  (LOAD&PUSH 3)
1038  (CALL1&PUSH 93)                     ; GETOPR
1040  (GETVALUE 19)                       ; ARYP
1042  L1042
1042  (CONS&PUSH)
1043  (LOAD 12)
1044  (CDR)
1045  (CONS)
1046  (STORE 11)
1048  (JMP L613)
1051  L1051
1051  (LOAD&PUSH 3)
1052  (LOAD&CDR&PUSH 12)
1054  (CALL1&PUSH 66)                     ; MEVALARGS
1056  (LOAD 13)
1057  (CAR)
1058  (CAR&PUSH)
1059  (LOAD&PUSH 14)
1060  (CALL 4 96)                         ; MAPPLY1
1063  L1063
1063  (UNBIND1)
1064  (SKIP 1)
1066  (JMP L1076)
1068  L1068
1068  (CONST&PUSH 95)                     ; "Improper array call"
1070  (CALL1 7)                           ; MERROR
1072  (NIL)
1073  (UNBIND1)
1074  (SKIP 1)
1076  L1076
1076  (UNBIND 2)
1078  (SKIP&RET 2)
1080  L1080
1080  (LOAD 1)
1081  (CAR)
1082  (CAR)
1083  (JMPIFATOM L17)
1086  (LOAD 1)
1087  (CAR)
1088  (CAR&PUSH)
1089  (LOAD&CDR&PUSH 2)
1091  (CALL1&PUSH 66)                     ; MEVALARGS
1093  (LOAD 3)
1094  (CAR)
1095  (CAR&PUSH)
1096  (LOAD&PUSH 4)
1097  (CALL 4 96)                         ; MAPPLY1
1100  (SKIP&RET 2)


Disassembly of function #:|(DEFUN GETL-LM-FCN-PROP (SYM PROPS &AUX ...) ...)-29|
(CONST 0) = GETL-LM-FCN-PROP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETL-LM-FCN-PROP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETL-LM-FCN-PROP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETL-LM-FCN-PROP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETL-LM-FCN-PROP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETL-LM-FCN-PROP
8     (SKIP&RET 1)


Disassembly of function GETL-LM-FCN-PROP
(CONST 0) = #(NIL)
(CONST 1) = :NAME
(CONST 2) = COMMON-LISP:CONTINUE
(CONST 3) = :INVOKE-FUNCTION
(CONST 4) = #<COMPILED-CLOSURE GETL-LM-FCN-PROP-1>
(CONST 5) = :REPORT
(CONST 6) = SYSTEM::REPORT-NEW-VALUE
(CONST 7) = :INTERACTIVE
(CONST 8) = SYSTEM::ASSERT-RESTART-PROMPT
(CONST 9) = SYSTEM::MAKE-RESTART
(CONST 10) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 11) = SYSTEM::*CONDITION-RESTARTS*
(CONST 12) = (#(CONDITION 5) 1 . 1)
(CONST 13) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 14) = SIGNAL
(CONST 15) = "symbol"
(CONST 16) = FUNCTIONP
(CONST 17) = SUBR
(CONST 18) = MACRO
(CONST 19) = ARRAY
(CONST 20) = MFEXPR*
(CONST 21) = EQ
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS*)
97 byte-code instructions:
0     (PUSH-NIL 2)
2     (JMP L91)
5     L5
5     (HANDLER-BEGIN&PUSH)
6     (LOAD&PUSH 0)
7     (LOADI&PUSH 0 0 6)
11    (CALL2 13)                          ; SYSTEM::ADD-CONDITION-RESTARTS
13    (LOAD&PUSH 0)
14    (CALL1 14)                          ; SIGNAL
16    (SKIPSP 2 1)
19    (SKIP&RET 2)
21    L21
21    (NIL)
22    (MAKE-VECTOR1&PUSH 1)
24    (NIL)
25    (STOREC 0 0)
28    (TAGBODY-OPEN 0 L77)                ; #(NIL)
31    (CONST&PUSH 1)                      ; :NAME
32    (CONST&PUSH 2)                      ; COMMON-LISP:CONTINUE
33    (CONST&PUSH 3)                      ; :INVOKE-FUNCTION
34    (LOAD&PUSH 7)
35    (LOAD&PUSH 6)
36    (COPY-CLOSURE&PUSH 4 2)             ; #<COMPILED-CLOSURE GETL-LM-FCN-PROP-1>
39    (CONST&PUSH 5)                      ; :REPORT
40    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; SYSTEM::REPORT-NEW-VALUE
42    (CONST&PUSH 7)                      ; :INTERACTIVE
43    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; SYSTEM::ASSERT-RESTART-PROMPT
45    (CALL&PUSH 8 9)                     ; SYSTEM::MAKE-RESTART
48    (LIST&PUSH 1)
50    (LOAD&PUSH 0)
51    (GETVALUE&PUSH 10)                  ; SYSTEM::*ACTIVE-RESTARTS*
53    (CALLSR 2 34)                       ; APPEND
56    (BIND 10)                           ; SYSTEM::*ACTIVE-RESTARTS*
58    (GETVALUE 11)                       ; SYSTEM::*CONDITION-RESTARTS*
60    (BIND 11)                           ; SYSTEM::*CONDITION-RESTARTS*
62    (HANDLER-OPEN 12 L5)                ; (#(CONDITION 5) 1 . 1)
64    (CONST&PUSH 15)                     ; "symbol"
65    (CALLSR 0 29)                       ; ERROR
68    L68
68    (CONST 17)                          ; SUBR
69    (JMP L127)
71    L71
71    (CONST 18)                          ; MACRO
72    (JMP L127)
74    L74
74    (CONST 19)                          ; ARRAY
75    (JMP L127)
77    L77
77    (LOADC 4 0)
80    (UNLIST 1 0)
83    (LOAD 0)
84    (STORE 10)
86    (SKIP 1)
88    (TAGBODY-CLOSE)
89    (SKIP 1)
91    L91
91    (LOAD&PUSH 4)
92    (CALLS2&JMPIFNOT 6 L21)             ; SYMBOLP
96    (LOAD 4)
97    (STORE 1)
98    (PUSH)
99    (CALL1&JMPIF 16 L68)                ; FUNCTIONP
102   (LOAD&PUSH 4)
103   (PUSH-UNBOUND 1)
105   (CALLS1&JMPIF 87 L71)               ; MACRO-FUNCTION
108   (LOAD&PUSH 4)
109   (CONST&PUSH 19)                     ; ARRAY
110   (PUSH-UNBOUND 1)
112   (CALLS2&STORE 132 1)                ; GET
115   (JMPIF L74)
117   (LOAD&PUSH 4)
118   (CONST&PUSH 20)                     ; MFEXPR*
119   (PUSH-UNBOUND 1)
121   (CALLS2&STORE 132 1)                ; GET
124   (JMPIFNOT L133)
126   (CONST 20)                          ; MFEXPR*
127   L127
127   (STORE 0)
128   (LOAD 0)
129   (JMPIFNOT1 L151)
131   (JMP L136)
133   L133
133   (LOAD 0)
134   (JMPIFNOT1 L151)
136   L136
136   (PUSH)
137   (LOAD&PUSH 4)
138   (CONST&PUSH 21)                     ; EQ
139   (PUSH-UNBOUND 2)
141   (CALLS1 180)                        ; MEMBER
143   (JMPIFNOT1 L151)
145   (LOAD&PUSH 0)
146   (LOAD&PUSH 2)
147   (LIST 2)
149   (SKIP&RET 5)
151   L151
151   (SKIP&RET 5)


Disassembly of function GETL-LM-FCN-PROP-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFMFUN MEVAL2 (NEWARGS OLD) ...)-30|
(CONST 0) = MEVAL2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVAL2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVAL2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVAL2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVAL2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVAL2
8     (SKIP&RET 1)


Disassembly of function MEVAL2
(CONST 0) = SIMP
(CONST 1) = MEMQ
(CONST 2) = MLIST
(CONST 3) = OPERATORS
(CONST 4) = ALIKE1
(CONST 5) = DELSIMP
(CONST 6) = ARYP
(CONST 7) = (SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARYP)
63 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (LOAD 3)
3     (CONS&PUSH)
4     (NIL&PUSH)
5     (CONST&PUSH 0)                      ; SIMP
6     (LOAD 4)
7     (CAR)
8     (CDR&PUSH)
9     (CALL2&JMPIFNOT 1 L33)              ; MEMQ
12    (LOAD 1)
13    (CAR)
14    (CAR&PUSH)
15    (CONST&PUSH 3)                      ; OPERATORS
16    (PUSH-UNBOUND 1)
18    (CALLS2 132)                        ; GET
20    (NOT)
21    (STORE 0)
22    (LOAD&PUSH 1)
23    (LOAD&PUSH 4)
24    (CALL2&JMPIFNOT 4 L54)              ; ALIKE1
27    (LOAD&JMPIFNOT 0 L46)
30    L30
30    (LOAD 3)
31    (SKIP&RET 5)
33    L33
33    (LOAD 1)
34    (CAR)
35    (CAR&PUSH)
36    (JMPIFEQTO 2 L61)                   ; MLIST
39    (LOAD&PUSH 1)
40    (LOAD&PUSH 4)
41    (CALLS2&JMPIFNOT 2 L61)             ; EQUAL
44    (JMP L30)
46    L46
46    (LOAD&CAR&PUSH 3)
48    (CALL1&PUSH 5)                      ; DELSIMP
50    (LOAD 4)
51    (CDR)
52    (JMP L77)
54    L54
54    (LOAD&JMPIFNOT 0 L70)
57    (GETVALUE 6)                        ; ARYP
59    (JMPIFNOT L64)
61    L61
61    (LOAD 1)
62    (SKIP&RET 5)
64    L64
64    (LOAD 1)
65    (CAR)
66    (CAR&PUSH)
67    (CONST 7)                           ; (SIMP)
68    (JMP L75)
70    L70
70    (LOAD 1)
71    (CAR)
72    (CAR&PUSH)
73    (GETVALUE 6)                        ; ARYP
75    L75
75    (CONS&PUSH)
76    (LOAD 5)
77    L77
77    (CONS)
78    (SKIP&RET 5)


Disassembly of function #:|(DEFUN MPARAMS (VARS) ...)-31|
(CONST 0) = MPARAMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MPARAMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPARAMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MPARAMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MPARAMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MPARAMS
8     (SKIP&RET 1)


Disassembly of function MPARAMS
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
38 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&CDR&PUSH 2)
3     L3
3     (LOAD&PUSH 0)
4     (CALLS1&JMPIF 146 L46)              ; ENDP
7     (LOAD&CAR&PUSH 0)
9     (LOAD 0)
10    (BIND 0)                            ; X
12    (GETVALUE 0)                        ; X
14    (JMPIFATOM L38)
16    (GETVALUE 0)                        ; X
18    (CDR)
19    (CAR)
20    (JMPIFATOM L42)
22    (GETVALUE 0)                        ; X
24    (CDR)
25    (CAR)
26    L26
26    (CDR)
27    (CAR)
28    L28
28    (UNBIND1)
29    (PUSH)
30    (LOAD&CONS&STORE 2)
32    (SKIP 1)
34    (LOAD&CDR&STORE 0)
36    (JMP L3)
38    L38
38    (GETVALUE 0)                        ; X
40    (JMP L28)
42    L42
42    (GETVALUE 0)                        ; X
44    (JMP L26)
46    L46
46    (SKIP 1)
48    (LOAD&PUSH 0)
49    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
51    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN MOP (FORM) ...)-32|
(CONST 0) = MOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MOP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MOP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MOP
8     (SKIP&RET 1)


Disassembly of function MOP
(CONST 0) = MQAPPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (JMPIFEQTO 0 L11)                   ; MQAPPLY
6     (LOAD 1)
7     (CAR)
8     L8
8     (CAR)
9     (SKIP&RET 2)
11    L11
11    (LOAD 1)
12    (CDR)
13    (JMP L8)


Disassembly of function #:|(DEFMFUN MARGS (FORM) ...)-33|
(CONST 0) = MARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MARGS
8     (SKIP&RET 1)


Disassembly of function MARGS
(CONST 0) = MQAPPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (JMPIFEQTO 0 L10)                   ; MQAPPLY
6     (LOAD 1)
7     L7
7     (CDR)
8     (SKIP&RET 2)
10    L10
10    (LOAD 1)
11    (CDR)
12    (JMP L7)


Disassembly of function #:|(DEFUN BADFUNCHK (NAME VAL FLAG) ...)-34|
(CONST 0) = BADFUNCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BADFUNCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BADFUNCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BADFUNCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BADFUNCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BADFUNCHK
8     (SKIP&RET 1)


Disassembly of function BADFUNCHK
(CONST 0) = NAME
(CONST 1) = FLAG
(CONST 2) = (T NIL $%E $%PI $%I)
(CONST 3) = MEMQ
(CONST 4) = 
"~:M evaluates to ~M~
		  ~%Improper name or value in functional position."
(CONST 5) = MERROR
(CONST 6) = "Improper name or value in functional position:~%~M"
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NAME FLAG)
31 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; NAME
3     (LOAD 4)
4     (BIND 1)                            ; FLAG
6     (GETVALUE 1)                        ; FLAG
8     (JMPIF L20)
10    (LOAD&PUSH 8)
11    (CALLS2&JMPIF 8 L20)                ; NUMBERP
14    (LOAD&PUSH 8)
15    (CONST&PUSH 2)                      ; (T NIL $%E $%PI $%I)
16    (CALL2 3)                           ; MEMQ
18    (JMPIFNOT1 L34)
20    L20
20    (GETVALUE 0)                        ; NAME
22    (JMPIFCONSP L30)
24    (LOAD&PUSH 8)
25    (GETVALUE&PUSH 0)                   ; NAME
27    (CALLS2&JMPIFNOT 2 L38)             ; EQUAL
30    L30
30    (CONST&PUSH 6)                      ; "Improper name or value in functional position:~%~M"
31    (LOAD&PUSH 9)
32    (CALL2 5)                           ; MERROR
34    L34
34    (UNBIND 2)
36    (SKIP&RET 4)
38    L38
38    (CONST&PUSH 4)                      ; "~:M evaluates to ~M~
		  ~%Improper name or value in functional position."
39    (GETVALUE&PUSH 0)                   ; NAME
41    (LOAD&PUSH 10)
42    (CALL 3 5)                          ; MERROR
45    (JMP L34)


Disassembly of function #:|(DEFMFUN MBIND (LAMVARS FNARGS FNNAME) ...)-35|
(CONST 0) = MBIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MBIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MBIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MBIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MBIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MBIND
8     (SKIP&RET 1)


Disassembly of function MBIND
(CONST 0) = "Too ~M arguments supplied to ~M:~%~M"
(CONST 1) = |&few|
(CONST 2) = |&many|
(CONST 3) = |&a function|
(CONST 4) = (MLIST)
(CONST 5) = MERROR
(CONST 6) = VAR
(CONST 7) = "Only symbolic atoms can be bound:~%~M"
(CONST 8) = BINDLIST
(CONST 9) = MUNBOUND
(CONST 10) = MSPECLIST
(CONST 11) = MSET
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MSPECLIST MUNBOUND BINDLIST VAR)
writes special variables : (MSPECLIST BINDLIST)
73 byte-code instructions:
0     (LOAD&PUSH 3)
1     (LOAD&PUSH 3)
2     (LOAD&JMPIFNOT 1 L63)
5     L5
5     (LOAD&JMPIFNOT 0 L63)
8     L8
8     (LOAD 1)
9     (CAR)
10    (BIND 6)                            ; VAR
12    (GETVALUE&PUSH 6)                   ; VAR
14    (CALLS2&JMPIF 6 L22)                ; SYMBOLP
17    (CONST&PUSH 7)                      ; "Only symbolic atoms can be bound:~%~M"
18    (GETVALUE&PUSH 6)                   ; VAR
20    (CALL2 5)                           ; MERROR
22    L22
22    (GETVALUE&PUSH 6)                   ; VAR
24    (GETVALUE 8)                        ; BINDLIST
26    (CONS&PUSH)
27    (GETVALUE&PUSH 6)                   ; VAR
29    (CALLS1&JMPIF 79 L102)              ; BOUNDP
33    (GETVALUE 9)                        ; MUNBOUND
35    L35
35    (PUSH)
36    (GETVALUE 10)                       ; MSPECLIST
38    (CONS&PUSH)
39    (LOAD 1)
40    (SETVALUE 8)                        ; BINDLIST
42    (LOAD 0)
43    (SETVALUE 10)                       ; MSPECLIST
45    (SKIP 2)
47    (GETVALUE&PUSH 6)                   ; VAR
49    (LOAD&CAR&PUSH 4)
51    (CALL2 11)                          ; MSET
53    (UNBIND1)
54    (LOAD&CDR&PUSH 1)
56    (LOAD&CDR&STORE 1)
58    (POP&STORE 1)
60    (LOAD&JMPIF 1 L5)
63    L63
63    (LOAD&JMPIF 1 L69)
66    (LOAD&JMPIFNOT 0 L89)
69    L69
69    (CONST&PUSH 0)                      ; "Too ~M arguments supplied to ~M:~%~M"
70    (LOAD&JMPIF 2 L92)
73    (CONST 2)                           ; |&many|
74    L74
74    (PUSH)
75    (LOAD&JMPIF 5 L95)
78    (CONST 3)                           ; |&a function|
79    L79
79    (PUSH)
80    (CONST&PUSH 4)                      ; (MLIST)
81    (LOAD 8)
82    (CONS&PUSH)
83    (CALL 4 5)                          ; MERROR
86    (JMPIFNOT L8)
89    L89
89    (NIL)
90    (SKIP&RET 6)
92    L92
92    (CONST 1)                           ; |&few|
93    (JMP L74)
95    L95
95    (PUSH)
96    (NIL)
97    (CONS&PUSH)
98    (LOAD 8)
99    (CONS)
100   (JMP L79)
102   L102
102   (GETVALUE&PUSH 6)                   ; VAR
104   (CALLS1 78)                         ; SYMBOL-VALUE
106   (JMP L35)


Disassembly of function #:|(DEFMFUN MUNBIND (VARS) ...)-36|
(CONST 0) = MUNBIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MUNBIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MUNBIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MUNBIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MUNBIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MUNBIND
8     (SKIP&RET 1)


Disassembly of function MUNBIND
(CONST 0) = VAR
(CONST 1) = MSPECLIST
(CONST 2) = MUNBOUND
(CONST 3) = $VALUES
(CONST 4) = 1
(CONST 5) = DELQ
(CONST 6) = MUNBINDP
(CONST 7) = MSET
(CONST 8) = BINDLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BINDLIST MUNBOUND MSPECLIST $VALUES VAR)
writes special variables : (BINDLIST MSPECLIST VAR)
42 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 72)                    ; REVERSE
3     (NIL)
4     (BIND 0)                            ; VAR
6     (JMP L56)
8     L8
8     (GETVALUE&PUSH 0)                   ; VAR
10    (CALLS1 83)                         ; MAKUNBOUND
12    (GETVALUE&PUSH 0)                   ; VAR
14    (GETVALUE&PUSH 3)                   ; $VALUES
16    (CONST&PUSH 4)                      ; 1
17    (CALL 3 5)                          ; DELQ
20    (JMP L44)
22    L22
22    (LOAD 3)
23    (CAR)
24    (SETVALUE 0)                        ; VAR
26    (GETVALUE 1)                        ; MSPECLIST
28    (CAR&PUSH)
29    (GETVALUE 2)                        ; MUNBOUND
31    (JMPIFEQ L8)
33    (T)
34    (BIND 6)                            ; MUNBINDP
36    (GETVALUE&PUSH 0)                   ; VAR
38    (GETVALUE 1)                        ; MSPECLIST
40    (CAR&PUSH)
41    (CALL2 7)                           ; MSET
43    (UNBIND1)
44    L44
44    (GETVALUE 1)                        ; MSPECLIST
46    (CDR)
47    (SETVALUE 1)                        ; MSPECLIST
49    (GETVALUE 8)                        ; BINDLIST
51    (CDR)
52    (SETVALUE 8)                        ; BINDLIST
54    (LOAD&CDR&STORE 3)
56    L56
56    (LOAD&PUSH 3)
57    (CALLS1&JMPIFNOT 146 L22)           ; ENDP
60    (NIL)
61    (UNBIND1)
62    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MFUNCTION-DELETE (VAR FN-A-LIST) ...)-37|
(CONST 0) = MFUNCTION-DELETE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFUNCTION-DELETE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFUNCTION-DELETE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFUNCTION-DELETE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFUNCTION-DELETE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFUNCTION-DELETE
8     (SKIP&RET 1)


Disassembly of function MFUNCTION-DELETE
(CONST 0) = VAR
(CONST 1) = ZL-ASSOC
(CONST 2) = 1
(CONST 3) = ZL-DELETE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (NIL)
6     (CONS&PUSH)
7     (LOAD&PUSH 5)
8     (CALL2&PUSH 1)                      ; ZL-ASSOC
10    (LOAD&PUSH 5)
11    (CONST&PUSH 2)                      ; 1
12    (CALL 3 3)                          ; ZL-DELETE
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC MLOCAL (L) ...)-38-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MLOCAL (L) ...)-38-2-1|>
(CONST 1) = MLOCAL
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MLOCAL (L) ...)-38-2-1|>
1     (CONST&PUSH 1)                      ; MLOCAL
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MLOCAL (L) ...)-38-2-1|
(CONST 0) = LOCLIST
(CONST 1) = MLOCP
(CONST 2) = ($LOCAL)
(CONST 3) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LOCLIST)
writes special variable : (LOCLIST)
13 byte-code instructions:
0     (NIL&PUSH)
1     (GETVALUE 0)                        ; LOCLIST
3     (CONS)
4     (SETVALUE 0)                        ; LOCLIST
6     (T)
7     (BIND 1)                            ; MLOCP
9     (CONST&PUSH 2)                      ; ($LOCAL)
10    (LOAD 5)
11    (CDR)
12    (CONS&PUSH)
13    (CALL1 3)                           ; MEVAL
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $LOCAL (L) ...)-39-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $LOCAL (L) ...)-39-2-1|>
(CONST 1) = $LOCAL
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $LOCAL (L) ...)-39-2-1|>
1     (CONST&PUSH 1)                      ; $LOCAL
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $LOCAL (L) ...)-39-2-1|
(CONST 0) = MLOCP
(CONST 1) = "Improper call to LOCAL"
(CONST 2) = MERROR
(CONST 3) = VAR
(CONST 4) = $LOCAL
(CONST 5) = IMPROPER-ARG-ERR
(CONST 6) = ARRAY
(CONST 7) = MGET
(CONST 8) = "Attempt to bind a complete array ~M"
(CONST 9) = MPROPS
(CONST 10) = MPROPLIST
(CONST 11) = DATA
(CONST 12) = FACTLIST
(CONST 13) = -1
(CONST 14) = ULABS
(CONST 15) = PUTPROP
(CONST 16) = $FUNCTIONS
(CONST 17) = MFUNCTION-DELETE
(CONST 18) = $MACROS
(CONST 19) = $DEPENDENCIES
(CONST 20) = $ARRAYS
(CONST 21) = 1
(CONST 22) = DELQ
(CONST 23) = ZL-REMPROP
(CONST 24) = LOCLIST
(CONST 25) = $DONE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOCLIST $ARRAYS $DEPENDENCIES $MACROS $FUNCTIONS FACTLIST MPROPLIST VAR MLOCP)
writes special variables : (MLOCP FACTLIST MPROPLIST VAR)
94 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (GETVALUE 0)                        ; MLOCP
4     (JMPIF L9)
6     (CONST&PUSH 1)                      ; "Improper call to LOCAL"
7     (CALL1 2)                           ; MERROR
9     L9
9     (LOAD&PUSH 1)
10    (NIL)
11    (BIND 3)                            ; VAR
13    (JMP L135)
16    L16
16    (GETVALUE&PUSH 3)                   ; VAR
18    (CONST&PUSH 4)                      ; $LOCAL
19    (CALL2 5)                           ; IMPROPER-ARG-ERR
21    (JMP L52)
23    L23
23    (LOAD 3)
24    (CAR)
25    (SETVALUE 3)                        ; VAR
27    (PUSH)
28    (CALLS2&JMPIFNOT 6 L16)             ; SYMBOLP
31    (GETVALUE&PUSH 3)                   ; VAR
33    (CONST&PUSH 6)                      ; ARRAY
34    (CALL2&JMPIFNOT 7 L52)              ; MGET
37    (GETVALUE&PUSH 3)                   ; VAR
39    (CONST&PUSH 6)                      ; ARRAY
40    (PUSH-UNBOUND 1)
42    (CALLS2&PUSH 132)                   ; GET
44    (CALLS2&JMPIFNOT 32 L52)            ; ARRAYP
47    (CONST&PUSH 8)                      ; "Attempt to bind a complete array ~M"
48    (GETVALUE&PUSH 3)                   ; VAR
50    (CALL2 2)                           ; MERROR
52    L52
52    (GETVALUE&PUSH 3)                   ; VAR
54    (CONST&PUSH 9)                      ; MPROPS
55    (PUSH-UNBOUND 1)
57    (CALLS2&PUSH 132)                   ; GET
59    (GETVALUE 10)                       ; MPROPLIST
61    (CONS)
62    (SETVALUE 10)                       ; MPROPLIST
64    (GETVALUE&PUSH 3)                   ; VAR
66    (CONST&PUSH 11)                     ; DATA
67    (PUSH-UNBOUND 1)
69    (CALLS2&PUSH 132)                   ; GET
71    (GETVALUE 12)                       ; FACTLIST
73    (CONS)
74    (SETVALUE 12)                       ; FACTLIST
76    (CAR&PUSH)
77    (NIL&PUSH)
78    (JMP L91)
80    L80
80    (LOAD&CAR&STORE 1 0)
83    (PUSH)
84    (CONST&PUSH 13)                     ; -1
85    (CONST&PUSH 14)                     ; ULABS
86    (CALL 3 15)                         ; PUTPROP
89    (LOAD&CDR&STORE 1)
91    L91
91    (LOAD&PUSH 1)
92    (CALLS1&JMPIFNOT 146 L80)           ; ENDP
95    (SKIP 2)
97    (GETVALUE&PUSH 3)                   ; VAR
99    (GETVALUE&PUSH 16)                  ; $FUNCTIONS
101   (CALL2 17)                          ; MFUNCTION-DELETE
103   (GETVALUE&PUSH 3)                   ; VAR
105   (GETVALUE&PUSH 18)                  ; $MACROS
107   (CALL2 17)                          ; MFUNCTION-DELETE
109   (GETVALUE&PUSH 3)                   ; VAR
111   (GETVALUE&PUSH 19)                  ; $DEPENDENCIES
113   (CALL2 17)                          ; MFUNCTION-DELETE
115   (GETVALUE&PUSH 3)                   ; VAR
117   (GETVALUE&PUSH 20)                  ; $ARRAYS
119   (CONST&PUSH 21)                     ; 1
120   (CALL 3 22)                         ; DELQ
123   (GETVALUE&PUSH 3)                   ; VAR
125   (CONST&PUSH 9)                      ; MPROPS
126   (CALL2 23)                          ; ZL-REMPROP
128   (GETVALUE&PUSH 3)                   ; VAR
130   (CONST&PUSH 11)                     ; DATA
131   (CALL2 23)                          ; ZL-REMPROP
133   (LOAD&CDR&STORE 3)
135   L135
135   (LOAD&PUSH 3)
136   (CALLS1&JMPIFNOT 146 L23)           ; ENDP
140   (UNBIND1)
141   (SKIP 1)
143   (GETVALUE&PUSH 24)                  ; LOCLIST
145   (LOAD&PUSH 2)
146   (CALLS2&PUSH 72)                    ; REVERSE
148   (CALLS1 168)                        ; RPLACA
150   (NIL)
151   (SETVALUE 0)                        ; MLOCP
153   (CONST 25)                          ; $DONE
155   (SKIP&RET 2)


Disassembly of function #:|(DEFUN MUNLOCAL NIL ...)-40|
(CONST 0) = MUNLOCAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MUNLOCAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MUNLOCAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MUNLOCAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MUNLOCAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MUNLOCAL
8     (SKIP&RET 1)


Disassembly of function MUNLOCAL
(CONST 0) = LOCLIST
(CONST 1) = VAR
(CONST 2) = MPROPLIST
(CONST 3) = FACTLIST
(CONST 4) = Y
(CONST 5) = REMCOMPARY
(CONST 6) = MPROPS
(CONST 7) = CPUT
(CONST 8) = MEXPR
(CONST 9) = $FUNCTIONS
(CONST 10) = ADD2LNC
(CONST 11) = MFUNCTION-DELETE
(CONST 12) = MMACRO
(CONST 13) = $MACROS
(CONST 14) = ARRAY
(CONST 15) = HASHAR
(CONST 16) = $ARRAYS
(CONST 17) = 1
(CONST 18) = DELQ
(CONST 19) = DEPENDS
(CONST 20) = $DEPENDENCIES
(CONST 21) = REMPROPCHK
(CONST 22) = REMOV
(CONST 23) = DATA
(CONST 24) = ULABS
(CONST 25) = ZL-REMPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FACTLIST MPROPLIST $DEPENDENCIES $ARRAYS $MACROS $FUNCTIONS Y VAR LOCLIST)
writes special variables : (LOCLIST FACTLIST MPROPLIST Y VAR)
147 byte-code instructions:
0     (GETVALUE 0)                        ; LOCLIST
2     (CAR&PUSH)
3     (NIL)
4     (BIND 1)                            ; VAR
6     (JMP L228)
9     L9
9     (GETVALUE&PUSH 1)                   ; VAR
11    (NIL)
12    (CONS&PUSH)
13    (GETVALUE 4)                        ; Y
15    (CDR)
16    (CAR)
17    (CDR)
18    (CONS&PUSH)
19    (GETVALUE&PUSH 9)                   ; $FUNCTIONS
21    (CALL2 10)                          ; ADD2LNC
23    (JMP L109)
26    L26
26    (GETVALUE&PUSH 1)                   ; VAR
28    (NIL)
29    (CONS&PUSH)
30    (GETVALUE 4)                        ; Y
32    (CDR)
33    (CAR)
34    (CDR)
35    (CONS&PUSH)
36    (GETVALUE&PUSH 13)                  ; $MACROS
38    (CALL2 10)                          ; ADD2LNC
40    (JMP L127)
43    L43
43    (GETVALUE&PUSH 1)                   ; VAR
45    (GETVALUE&PUSH 16)                  ; $ARRAYS
47    (CALL2 10)                          ; ADD2LNC
49    (JMP L153)
52    L52
52    (GETVALUE&PUSH 1)                   ; VAR
54    (NIL)
55    (CONS&PUSH)
56    (GETVALUE 4)                        ; Y
58    (CONS&PUSH)
59    (GETVALUE&PUSH 20)                  ; $DEPENDENCIES
61    (CALL2 10)                          ; ADD2LNC
63    (JMP L171)
66    L66
66    (LOAD 3)
67    (CAR)
68    (SETVALUE 1)                        ; VAR
70    (GETVALUE 2)                        ; MPROPLIST
72    (CAR&PUSH)
73    (NIL&PUSH)
74    (GETVALUE 3)                        ; FACTLIST
76    (CAR&PUSH)
77    (LOAD 1)
78    (BIND 4)                            ; Y
80    (GETVALUE&PUSH 1)                   ; VAR
82    (CALL1 5)                           ; REMCOMPARY
84    (GETVALUE&PUSH 1)                   ; VAR
86    (LOAD&PUSH 6)
87    (CONST&PUSH 6)                      ; MPROPS
88    (CALL 3 7)                          ; CPUT
91    (LOAD&CDR&PUSH 5)
93    (CONST&PUSH 8)                      ; MEXPR
94    (PUSH-UNBOUND 1)
96    (CALLS2 133)                        ; GETF
98    (SETVALUE 4)                        ; Y
100   (JMPIF L9)
103   (GETVALUE&PUSH 1)                   ; VAR
105   (GETVALUE&PUSH 9)                   ; $FUNCTIONS
107   (CALL2 11)                          ; MFUNCTION-DELETE
109   L109
109   (LOAD&CDR&PUSH 5)
111   (CONST&PUSH 12)                     ; MMACRO
112   (PUSH-UNBOUND 1)
114   (CALLS2 133)                        ; GETF
116   (SETVALUE 4)                        ; Y
118   (JMPIF L26)
121   (GETVALUE&PUSH 1)                   ; VAR
123   (GETVALUE&PUSH 13)                  ; $MACROS
125   (CALL2 11)                          ; MFUNCTION-DELETE
127   L127
127   (LOAD&CDR&PUSH 5)
129   (CONST&PUSH 14)                     ; ARRAY
130   (PUSH-UNBOUND 1)
132   (CALLS2&JMPIF 133 L43)              ; GETF
136   (LOAD&CDR&PUSH 5)
138   (CONST&PUSH 15)                     ; HASHAR
139   (PUSH-UNBOUND 1)
141   (CALLS2&JMPIF 133 L43)              ; GETF
145   (GETVALUE&PUSH 1)                   ; VAR
147   (GETVALUE&PUSH 16)                  ; $ARRAYS
149   (CONST&PUSH 17)                     ; 1
150   (CALL 3 18)                         ; DELQ
153   L153
153   (LOAD&CDR&PUSH 5)
155   (CONST&PUSH 19)                     ; DEPENDS
156   (PUSH-UNBOUND 1)
158   (CALLS2 133)                        ; GETF
160   (SETVALUE 4)                        ; Y
162   (JMPIF L52)
165   (GETVALUE&PUSH 1)                   ; VAR
167   (GETVALUE&PUSH 20)                  ; $DEPENDENCIES
169   (CALL2 11)                          ; MFUNCTION-DELETE
171   L171
171   (GETVALUE&PUSH 1)                   ; VAR
173   (CALL1 21)                          ; REMPROPCHK
175   (CONST&SYMBOL-FUNCTION&PUSH 22)     ; REMOV
177   (GETVALUE&PUSH 1)                   ; VAR
179   (CONST&PUSH 23)                     ; DATA
180   (PUSH-UNBOUND 1)
182   (CALLS2&PUSH 132)                   ; GET
184   (CALLSR 0 24)                       ; MAPC
187   (GETVALUE&PUSH 1)                   ; VAR
189   (LOAD&PUSH 4)
190   (CONST&PUSH 23)                     ; DATA
191   (CALL 3 7)                          ; CPUT
194   (LOAD&PUSH 3)
195   (NIL&PUSH)
196   (JMP L207)
198   L198
198   (LOAD&CAR&STORE 1 0)
201   (PUSH)
202   (CONST&PUSH 24)                     ; ULABS
203   (CALL2 25)                          ; ZL-REMPROP
205   (LOAD&CDR&STORE 1)
207   L207
207   (LOAD&PUSH 1)
208   (CALLS1&JMPIFNOT 146 L198)          ; ENDP
211   (SKIP 2)
213   (GETVALUE 2)                        ; MPROPLIST
215   (CDR)
216   (SETVALUE 2)                        ; MPROPLIST
218   (GETVALUE 3)                        ; FACTLIST
220   (CDR)
221   (SETVALUE 3)                        ; FACTLIST
223   (UNBIND1)
224   (SKIP 3)
226   (LOAD&CDR&STORE 3)
228   L228
228   (LOAD&PUSH 3)
229   (CALLS1&JMPIFNOT 146 L66)           ; ENDP
233   (UNBIND1)
234   (SKIP 1)
236   (GETVALUE 0)                        ; LOCLIST
238   (CDR)
239   (SETVALUE 0)                        ; LOCLIST
241   (NIL)
242   (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (MACROS T))-41|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO MSETQ (A B) ...)-42|
(CONST 0) = MSETQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MSETQ>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MSETQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MSETQ>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MSETQ
10    (SKIP&RET 1)


Disassembly of function MSETQ
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = MSET
(CONST 3) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L25)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; MSET
16    (CONST&PUSH 3)                      ; QUOTE
17    (LOAD&PUSH 3)
18    (LIST&PUSH 2)
20    (LOAD&PUSH 2)
21    (LIST 3)
23    (SKIP&RET 5)
25    L25
25    (LOAD&PUSH 2)
26    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
28    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (MACROS NIL))-43|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMSPEC MSETQ (L) ...)-44-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MSETQ (L) ...)-44-2-1|>
(CONST 1) = MSETQ
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MSETQ (L) ...)-44-2-1|>
1     (CONST&PUSH 1)                      ; MSETQ
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MSETQ (L) ...)-44-2-1|
(CONST 0) = TWOARGCHECK
(CONST 1) = SIMPLIFYA
(CONST 2) = MEVAL
(CONST 3) = MSET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; TWOARGCHECK
3     (LOAD 1)
4     (CDR)
5     (CAR&PUSH)
6     (NIL&PUSH)
7     (CALL2&PUSH 1)                      ; SIMPLIFYA
9     (LOAD 2)
10    (CDR)
11    (CDR)
12    (CAR&PUSH)
13    (CALL1&PUSH 2)                      ; MEVAL
15    (CALL2 3)                           ; MSET
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MSET (X Y) ...)-45|
(CONST 0) = MSET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MSET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MSET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MSET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MSET
8     (SKIP&RET 1)


Disassembly of function MSET
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $SETCHECK
(CONST 3) = MEMALIKE
(CONST 4) = (MTEXT)
(CONST 5) = DISP2
(CONST 6) = | set to |
(CONST 7) = DISPLA
(CONST 8) = $SETCHECKBREAK
(CONST 9) = $SETVAL
(CONST 10) = MERRBREAK
(CONST 11) = (T NIL)
(CONST 12) = MEMQ
(CONST 13) = $NUMER
(CONST 14) = MGET
(CONST 15) = 1
(CONST 16) = GETCHARN
(CONST 17) = #\&
(CONST 18) = MUNBINDP
(CONST 19) = "~:M improper value assignment to a numerical quantity"
(CONST 20) = MERROR
(CONST 21) = "~:M improper value assignment"
(CONST 22) = ASSIGN
(CONST 23) = (NEVERSET READ-ONLY-ASSIGN)
(CONST 24) = DSKSETP
(CONST 25) = $VALUES
(CONST 26) = ADD2LNC
(CONST 27) = OPTIONP
(CONST 28) = $OPTIONSET
(CONST 29) = "~:M option is being set.~%"
(CONST 30) = MTELL
(CONST 31) = $LINENUM
(CONST 32) = $MYOPTIONS
(CONST 33) = SET
(CONST 34) = ARRAY
(CONST 35) = ARRSTORE
(CONST 36) = $SUBSCRMAP
(CONST 37) = (MLIST $MATRIX)
(CONST 38) = MSET
(CONST 39) = OUTERMAP1
(CONST 40) = "Improper value assignment:~%~M"
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($SUBSCRMAP $VALUES $MYOPTIONS $OPTIONSET DSKSETP MUNBINDP $SETVAL
 $SETCHECKBREAK Y X $SETCHECK)
writes special variable : (Y)
163 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 2)                        ; $SETCHECK
8     (JMPIFNOT L76)
11    (GETVALUE&PUSH 2)                   ; $SETCHECK
13    (JMPIFEQTO 2 L76)                   ; $SETCHECK
16    (GETVALUE 2)                        ; $SETCHECK
18    (JMPIFATOM L42)
20    (GETVALUE&PUSH 0)                   ; X
22    (GETVALUE 2)                        ; $SETCHECK
24    (CDR&PUSH)
25    (CALL2&JMPIF 3 L42)                 ; MEMALIKE
28    (GETVALUE 0)                        ; X
30    (JMPIFATOM L76)
32    (GETVALUE 0)                        ; X
34    (CAR)
35    (CAR&PUSH)
36    (GETVALUE 2)                        ; $SETCHECK
38    (CDR&PUSH)
39    (CALL2&JMPIFNOT 3 L76)              ; MEMALIKE
42    L42
42    (GETVALUE&PUSH 0)                   ; X
44    (GETVALUE 1)                        ; Y
46    (JMPIFEQ L76)
48    (CONST&PUSH 4)                      ; (MTEXT)
49    (GETVALUE&PUSH 0)                   ; X
51    (CALL1&PUSH 5)                      ; DISP2
53    (CONST&PUSH 6)                      ; | set to |
54    (GETVALUE&PUSH 1)                   ; Y
56    (LIST&PUSH 4)
58    (CALL1 7)                           ; DISPLA
60    (GETVALUE 8)                        ; $SETCHECKBREAK
62    (JMPIFNOT L76)
64    (GETVALUE 1)                        ; Y
66    (BIND 9)                            ; $SETVAL
68    (T&PUSH)
69    (CALL1 10)                          ; MERRBREAK
71    (GETVALUE 9)                        ; $SETVAL
73    (SETVALUE 1)                        ; Y
75    (UNBIND1)
76    L76
76    (GETVALUE 0)                        ; X
78    (JMPIFCONSP L247)
81    (GETVALUE&PUSH 0)                   ; X
83    (CALLS2&JMPIFNOT 6 L108)            ; SYMBOLP
86    (GETVALUE&PUSH 0)                   ; X
88    (CONST&PUSH 11)                     ; (T NIL)
89    (CALL2&JMPIF 12 L108)               ; MEMQ
92    (GETVALUE&PUSH 0)                   ; X
94    (CONST&PUSH 13)                     ; $NUMER
95    (CALL2&JMPIF 14 L108)               ; MGET
98    (GETVALUE&PUSH 0)                   ; X
100   (CONST&PUSH 15)                     ; 1
101   (CALL2&PUSH 16)                     ; GETCHARN
103   (CONST&PUSH 17)                     ; #\&
104   (CALLSR&JMPIFNOT 1 7 L127)          ; CHAR=
108   L108
108   (GETVALUE 18)                       ; MUNBINDP
110   (JMPIF L210)
113   (GETVALUE&PUSH 0)                   ; X
115   (CONST&PUSH 13)                     ; $NUMER
116   (CALL2&JMPIF 14 L213)               ; MGET
120   (CONST 21)                          ; "~:M improper value assignment"
122   L122
122   (PUSH)
123   (GETVALUE&PUSH 0)                   ; X
125   (CALL2 20)                          ; MERROR
127   L127
127   (GETVALUE&PUSH 0)                   ; X
129   (CONST&PUSH 22)                     ; ASSIGN
130   (PUSH-UNBOUND 1)
132   (CALLS2&PUSH 132)                   ; GET
134   (LOAD&JMPIFNOT 0 L158)
137   (GETVALUE&PUSH 0)                   ; X
139   (GETVALUE 1)                        ; Y
141   (JMPIFNOTEQ L148)
143   (LOAD&PUSH 0)
144   (CONST&PUSH 23)                     ; (NEVERSET READ-ONLY-ASSIGN)
145   (CALL2&JMPIFNOT 12 L158)            ; MEMQ
148   L148
148   (LOAD&PUSH 0)
149   (GETVALUE&PUSH 0)                   ; X
151   (GETVALUE&PUSH 1)                   ; Y
153   (FUNCALL&PUSH 2)
155   (JMPIFEQTO 18 L217)                 ; MUNBINDP
158   L158
158   (SKIP 1)
160   (GETVALUE&PUSH 0)                   ; X
162   (CALLS1&JMPIF 79 L169)              ; BOUNDP
165   (GETVALUE 24)                       ; DSKSETP
167   (JMPIFNOT L222)
169   L169
169   (GETVALUE&PUSH 0)                   ; X
171   (GETVALUE 1)                        ; Y
173   (JMPIFEQ L201)
175   (GETVALUE&PUSH 0)                   ; X
177   (CALL1&JMPIFNOT 27 L201)            ; OPTIONP
180   (GETVALUE 28)                       ; $OPTIONSET
182   (JMPIFNOT L189)
184   (CONST&PUSH 29)                     ; "~:M option is being set.~%"
185   (GETVALUE&PUSH 0)                   ; X
187   (CALL2 30)                          ; MTELL
189   L189
189   (GETVALUE&PUSH 0)                   ; X
191   (JMPIFEQTO 31 L201)                 ; $LINENUM
194   (GETVALUE&PUSH 0)                   ; X
196   (GETVALUE 32)                       ; $MYOPTIONS
198   L198
198   (PUSH)
199   (CALL2 26)                          ; ADD2LNC
201   L201
201   (GETVALUE&PUSH 0)                   ; X
203   (GETVALUE&PUSH 1)                   ; Y
205   (CALL2 33)                          ; SET
207   (JMP L276)
210   L210
210   (NIL)
211   (JMP L276)
213   L213
213   (CONST 19)                          ; "~:M improper value assignment to a numerical quantity"
214   (JMP L122)
217   L217
217   (NIL)
218   (SKIP 1)
220   (JMP L276)
222   L222
222   (GETVALUE&PUSH 0)                   ; X
224   (GETVALUE 25)                       ; $VALUES
226   (JMP L198)
228   L228
228   (GETVALUE&PUSH 0)                   ; X
230   (GETVALUE&PUSH 1)                   ; Y
232   (CALL2 35)                          ; ARRSTORE
234   (JMP L276)
236   L236
236   (CONST&PUSH 38)                     ; MSET
238   (GETVALUE&PUSH 0)                   ; X
240   (GETVALUE&PUSH 1)                   ; Y
242   (CALL 3 39)                         ; OUTERMAP1
245   (JMP L276)
247   L247
247   (CONST&PUSH 34)                     ; ARRAY
249   (GETVALUE 0)                        ; X
251   (CAR)
252   (CDR&PUSH)
253   (CALL2&JMPIF 12 L228)               ; MEMQ
256   (GETVALUE 36)                       ; $SUBSCRMAP
258   (JMPIFNOT L269)
260   (GETVALUE 0)                        ; X
262   (CAR)
263   (CAR&PUSH)
264   (CONST&PUSH 37)                     ; (MLIST $MATRIX)
266   (CALL2&JMPIF 12 L236)               ; MEMQ
269   L269
269   (CONST&PUSH 40)                     ; "Improper value assignment:~%~M"
271   (GETVALUE&PUSH 0)                   ; X
273   (CALL2 20)                          ; MERROR
275   (NIL)
276   L276
276   (UNBIND 2)
278   (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $EV (L) ...)-46-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $EV (L) ...)-46-2-1|>
(CONST 1) = $EV
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $EV (L) ...)-46-2-1|>
1     (CONST&PUSH 1)                      ; $EV
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $EV (L) ...)-46-2-1|
(CONST 0) = EVP
(CONST 1) = NOUNL
(CONST 2) = $FLOAT
(CONST 3) = $NUMER
(CONST 4) = $EXPOP
(CONST 5) = $EXPON
(CONST 6) = $DOALLMXOPS
(CONST 7) = $DOSCMXOPS
(CONST 8) = DERIVFLAG
(CONST 9) = $DETOUT
(CONST 10) = NOUNSFLAG
(CONST 11) = RULEFCNL
(CONST 12) = $%E
(CONST 13) = ($%ENUMER)
(CONST 14) = 0
(CONST 15) = $NOEVAL
(CONST 16) = MEMQ
(CONST 17) = DERIVLIST
(CONST 18) = ARRAY
(CONST 19) = (MQUOTE MSETQ MLIST MEQUAL MDEFINE MSET MDEFMACRO $EXPAND $LOCAL $DERIVLIST)
(CONST 20) = MEVAL
(CONST 21) = MQUOTE
(CONST 22) = $EVAL
(CONST 23) = ($NOEVAL $RESCAN)
(CONST 24) = $NOUNS
(CONST 25) = $PRED
(CONST 26) = $EXPAND
(CONST 27) = $MAXPOSEX
(CONST 28) = $MAXNEGEX
(CONST 29) = %DERIVATIVE
(CONST 30) = EVFLAG
(CONST 31) = EVFUN
(CONST 32) = EVFUNMAKE
(CONST 33) = $DIFF
(CONST 34) = $DEL
(CONST 35) = $RISCH
(CONST 36) = $INTEGRATE
(CONST 37) = $NOUNIFY
(CONST 38) = $EV
(CONST 39) = IMPROPER-ARG-ERR
(CONST 40) = MLIST
(CONST 41) = (MSETQ MEQUAL MDEFINE MDEFMACRO MSET)
(CONST 42) = (MSETQ MLIST MEQUAL MDEFINE MDEFMACRO $EXPAND $LOCAL $DERIVLIST MSET)
(CONST 43) = (MDEFINE MDEFMACRO)
(CONST 44) = $USE_FAST_ARRAYS
(CONST 45) = MQAPPLY
(CONST 46) = $VERBIFY
(CONST 47) = RULECHK
(CONST 48) = $LOCAL
(CONST 49) = $DERIVLIST
(CONST 50) = MSET
(CONST 51) = (MSETQ)
(CONST 52) = (MSETQ MEQUAL)
(CONST 53) = MSETQP
(CONST 54) = |:SPREAD|
(CONST 55) = SPECREPCHECK
(CONST 56) = MBIND
(CONST 57) = (MLOCAL)
(CONST 58) = $TRANSLATE
(CONST 59) = MEVAL1
(CONST 60) = MEVALATOMS
(CONST 61) = $RATP
(CONST 62) = $RATDISREP
(CONST 63) = SPECREPP
(CONST 64) = SPECDISREP
(CONST 65) = SIMPLIFY
(CONST 66) = MAXIMA-SUBSTITUTE
(CONST 67) = MUNBIND
(CONST 68) = $%ENUMER
(CONST 69) = %E-VAL
(CONST 70) = RESIMPLIFY
(CONST 71) = MEVALP
(CONST 72) = $INFEVAL
(CONST 73) = ALIKE1
(CONST 74) = $NOREPEAT
(CONST 75) = RATF
(CONST 76) = MUNLOCAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($%ENUMER $INFEVAL %E-VAL $MAXNEGEX $MAXPOSEX RULEFCNL NOUNSFLAG $DETOUT
 DERIVFLAG $DOSCMXOPS $DOALLMXOPS $EXPON $EXPOP $NUMER $FLOAT NOUNL)
writes special variables : 
(RULEFCNL NOUNL DERIVLIST DERIVFLAG $EXPON $EXPOP NOUNSFLAG $FLOAT $NUMER
 $DETOUT $DOSCMXOPS $DOALLMXOPS)
672 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (T)
3     (BIND 0)                            ; EVP
5     (GETVALUE 1)                        ; NOUNL
7     (BIND 1)                            ; NOUNL
9     (GETVALUE 2)                        ; $FLOAT
11    (BIND 2)                            ; $FLOAT
13    (GETVALUE 3)                        ; $NUMER
15    (BIND 3)                            ; $NUMER
17    (GETVALUE 4)                        ; $EXPOP
19    (BIND 4)                            ; $EXPOP
21    (GETVALUE 5)                        ; $EXPON
23    (BIND 5)                            ; $EXPON
25    (GETVALUE 6)                        ; $DOALLMXOPS
27    (BIND 6)                            ; $DOALLMXOPS
29    (GETVALUE 7)                        ; $DOSCMXOPS
31    (BIND 7)                            ; $DOSCMXOPS
33    (GETVALUE 8)                        ; DERIVFLAG
35    (BIND 8)                            ; DERIVFLAG
37    (GETVALUE 9)                        ; $DETOUT
39    (BIND 9)                            ; $DETOUT
41    (GETVALUE 10)                       ; NOUNSFLAG
43    (BIND 10)                           ; NOUNSFLAG
45    (GETVALUE 11)                       ; RULEFCNL
47    (BIND 11)                           ; RULEFCNL
49    (LOAD 37)
51    (CDR)
52    (JMPIFNOT L79)
54    (LOAD 37)
56    (CDR)
57    (CDR)
58    (JMPIF L79)
60    (LOAD&CAR&PUSH 37)
62    (JMPIFNOTEQTO 12 L79)               ; $%E
65    (LOAD 37)
67    (CDR)
68    (CAR&PUSH)
69    (JMPIFNOTEQTO 3 L79)                ; $NUMER
72    (LOAD&PUSH 37)
74    (CONST&PUSH 13)                     ; ($%ENUMER)
75    (CALLSR&STORE 2 34 37)              ; APPEND
79    L79
79    (LOAD&CDR&PUSH 37)
81    (PUSH-NIL 3)
83    (LOAD&CAR&PUSH 41)
85    (NIL&PUSH)
86    (CONST&PUSH 14)                     ; 0
87    (PUSH-NIL 5)
89    (CONST&PUSH 15)                     ; $NOEVAL
90    (LOAD&CDR&PUSH 50)
92    (CALL2&PUSH 16)                     ; MEMQ
94    (LOAD 4)
95    (BIND 17)                           ; DERIVLIST
97    (LOAD&JMPIFNOT 15 L777)
101   L101
101   (LOAD 15)
103   (CAR)
104   (JMPIFATOM L134)
106   (CONST&PUSH 18)                     ; ARRAY
107   (LOAD 16)
109   (CAR)
110   (CAR)
111   (CDR&PUSH)
112   (CALL2&JMPIF 16 L134)               ; MEMQ
115   (LOAD 15)
117   (CAR)
118   (CAR)
119   (CAR&PUSH)
120   (CONST&PUSH 19)                     ; (MQUOTE MSETQ MLIST MEQUAL ...)
121   (CALL2&JMPIF 16 L134)               ; MEMQ
124   (LOAD&CAR&PUSH 15)
126   (CALL1&PUSH 20)                     ; MEVAL
128   (LOAD 16)
130   (CDR)
131   (CONS)
132   (STORE 15)
134   L134
134   (LOAD 15)
136   (CAR)
137   (JMPIFATOM L439)
140   (CONST&PUSH 18)                     ; ARRAY
141   (LOAD 16)
143   (CAR)
144   (CAR)
145   (CDR&PUSH)
146   (CALL2&JMPIF 16 L439)               ; MEMQ
150   (LOAD 15)
152   (CAR)
153   (CAR)
154   (CAR&PUSH)
155   (JMPIFEQTO 21 L439)                 ; MQUOTE
159   (LOAD 15)
161   (CAR)
162   (CAR)
163   (CAR&PUSH)
164   (CONST&PUSH 42)                     ; (MSETQ MLIST MEQUAL MDEFINE ...)
166   (CALL2&JMPIFNOT 16 L598)            ; MEMQ
170   (LOAD 15)
172   (CAR)
173   (CAR)
174   (CAR&PUSH)
175   (JMPIFEQTO 26 L611)                 ; $EXPAND
179   (LOAD 15)
181   (CAR)
182   (CAR)
183   (CAR&PUSH)
184   (CONST&PUSH 43)                     ; (MDEFINE MDEFMACRO)
186   (CALL2&JMPIF 16 L656)               ; MEMQ
190   (LOAD 15)
192   (CAR)
193   (CAR)
194   (CAR&PUSH)
195   (JMPIFEQTO 48 L712)                 ; $LOCAL
199   (LOAD 15)
201   (CAR)
202   (CAR)
203   (CAR&PUSH)
204   (JMPIFEQTO 49 L723)                 ; $DERIVLIST
208   (LOAD 15)
210   (CAR)
211   (CAR)
212   (CAR&PUSH)
213   (JMPIFNOTEQTO 50 L239)              ; MSET
216   (CONST&PUSH 51)                     ; (MSETQ)
218   (LOAD 16)
220   (CAR)
221   (CDR)
222   (CAR&PUSH)
223   (CALL1&PUSH 20)                     ; MEVAL
225   (LOAD 17)
227   (CAR)
228   (CDR)
229   (CDR)
230   (CAR&PUSH)
231   (LIST&PUSH 3)
233   (LOAD 16)
235   (CDR)
236   (CONS)
237   (STORE 15)
239   L239
239   (LOAD 15)
241   (CAR)
242   (CAR)
243   (CAR&PUSH)
244   (CONST&PUSH 52)                     ; (MSETQ MEQUAL)
246   (CALL2&JMPIFNOT 16 L763)            ; MEMQ
250   (LOAD&CAR&PUSH 15)
252   (CALL1&JMPIFNOT 53 L265)            ; MSETQP
255   (LOAD 15)
257   (CAR)
258   (CDR)
259   (CDR)
260   (CAR&PUSH)
261   (CALL1&JMPIF 53 L734)               ; MSETQP
265   L265
265   (LOAD&JMPIF 3 L275)
268   L268
268   (LOAD 15)
270   (CAR)
271   (CDR)
272   (CAR)
273   (JMPIFATOM L294)
275   L275
275   (LOAD&PUSH 10)
276   (LOAD 16)
278   (CAR)
279   (CDR)
280   (CDR)
281   (CAR&PUSH)
282   (LOAD 17)
284   (CAR)
285   (CDR)
286   (CAR)
287   (CONS&PUSH)
288   (LIST&PUSH 1)
290   (CALLSR&STORE 2 35 10)              ; NCONC
294   L294
294   (LOAD 15)
296   (CAR)
297   (CDR)
298   (CAR)
299   (JMPIFCONSP L771)
302   (LOAD 15)
304   (CAR)
305   (CDR)
306   (CAR&PUSH)
307   (LOAD&CONS&STORE 14)
309   (LOAD 15)
311   (CAR)
312   (CDR)
313   (CDR)
314   (CAR&PUSH)
315   (CALL1&PUSH 55)                     ; SPECREPCHECK
317   (CALL1 20)                          ; MEVAL
319   L319
319   (PUSH)
320   (LOAD&CONS&STORE 13)
322   (JMP L771)
325   L325
325   (LOAD&INC&STORE 9)
327   (JMPIFNOT L499)
330   (JMP L771)
333   L333
333   (NIL)
334   (SETVALUE 6)                        ; $DOALLMXOPS
336   (SETVALUE 7)                        ; $DOSCMXOPS
338   (T)
339   (SETVALUE 9)                        ; $DETOUT
341   (JMP L771)
344   L344
344   (T)
345   (SETVALUE 3)                        ; $NUMER
347   (SETVALUE 2)                        ; $FLOAT
349   (JMP L771)
352   L352
352   (T)
353   (SETVALUE 10)                       ; NOUNSFLAG
355   (JMP L771)
358   L358
358   (T&STORE 4)
360   (JMP L771)
363   L363
363   (GETVALUE 27)                       ; $MAXPOSEX
365   (SETVALUE 4)                        ; $EXPOP
367   (GETVALUE 28)                       ; $MAXNEGEX
369   (SETVALUE 5)                        ; $EXPON
371   (JMPIFNOT L499)
374   (JMP L771)
377   L377
377   (LOAD&CAR&PUSH 15)
379   (LOAD&CONS&STORE 14)
381   (LOAD&CAR&PUSH 15)
383   (CONST&PUSH 30)                     ; EVFLAG
385   (PUSH-UNBOUND 1)
387   (CALLS2 132)                        ; GET
389   (JMP L319)
392   L392
392   (LOAD&CAR&PUSH 15)
394   (CONST&PUSH 30)                     ; EVFLAG
396   (PUSH-UNBOUND 1)
398   (CALLS2&JMPIF 132 L377)             ; GET
401   (LOAD&CAR&PUSH 15)
403   (CONST&PUSH 31)                     ; EVFUN
405   (PUSH-UNBOUND 1)
407   (CALLS2&JMPIFNOT 132 L499)          ; GET
411   (LOAD&CAR&PUSH 15)
413   (LOAD&PUSH 12)
414   (CALL2 32)                          ; EVFUNMAKE
416   (STORE 11)
418   (LOAD&PUSH 6)
419   (LOAD&CAR&PUSH 16)
421   (NIL)
422   (CONS&PUSH)
423   (CALLSR&STORE 2 35 6)               ; NCONC
427   (JMPIFNOT L499)
430   (JMP L771)
433   L433
433   (NIL&PUSH)
434   (CONST 34)                          ; $DEL
436   (JMP L519)
439   L439
439   (LOAD&CAR&PUSH 15)
441   (CALLS2&JMPIFNOT 6 L499)            ; SYMBOLP
444   (LOAD&CAR&PUSH 15)
446   (JMPIFEQTO 22 L325)                 ; $EVAL
450   (LOAD&CAR&PUSH 15)
452   (CONST&PUSH 23)                     ; ($NOEVAL $RESCAN)
453   (CALL2&JMPIF 16 L771)               ; MEMQ
457   (LOAD&CAR&PUSH 15)
459   (JMPIFEQTO 9 L333)                  ; $DETOUT
463   (LOAD&CAR&PUSH 15)
465   (JMPIFEQTO 3 L344)                  ; $NUMER
469   (LOAD&CAR&PUSH 15)
471   (JMPIFEQTO 24 L352)                 ; $NOUNS
475   (LOAD&CAR&PUSH 15)
477   (JMPIFEQTO 25 L358)                 ; $PRED
481   (LOAD&CAR&PUSH 15)
483   (JMPIFEQTO 26 L363)                 ; $EXPAND
487   (LOAD&CAR&PUSH 15)
489   (JMPIFNOTEQTO 29 L392)              ; %DERIVATIVE
493   (T)
494   (SETVALUE 8)                        ; DERIVFLAG
496   (NIL)
497   (SETVALUE 17)                       ; DERIVLIST
499   L499
499   (LOAD&CAR&PUSH 15)
501   (CALL1&PUSH 20)                     ; MEVAL
503   (LOAD&PUSH 0)
504   (CALLS2&JMPIFNOT 6 L568)            ; SYMBOLP
507   (LOAD&PUSH 0)
508   (JMPIFEQTO 33 L433)                 ; $DIFF
512   (LOAD&PUSH 0)
513   (JMPIFNOTEQTO 35 L527)              ; $RISCH
516   (NIL&PUSH)
517   (CONST 36)                          ; $INTEGRATE
519   L519
519   (PUSH)
520   (LOAD 18)
522   (CDR)
523   (LIST* 2)
525   (STORE 16)
527   L527
527   (LOAD&PUSH 0)
528   (CALL1&PUSH 37)                     ; $NOUNIFY
530   (GETVALUE 1)                        ; NOUNL
532   (CONS)
533   (SETVALUE 1)                        ; NOUNL
535   (SKIP 1)
537   (JMP L771)
540   L540
540   (LOAD&CAR&PUSH 16)
542   (CONST 38)                          ; $EV
544   (JMP L590)
546   L546
546   (LOAD&PUSH 0)
547   (LOAD&CDR&PUSH 17)
549   (CALLSR 2 34)                       ; APPEND
552   (JMP L561)
554   L554
554   (NIL&PUSH)
555   (LOAD&PUSH 1)
556   (LOAD 18)
558   (CDR)
559   (LIST* 2)
561   L561
561   (STORE 16)
563   (SKIP 1)
565   (JMP L771)
568   L568
568   (LOAD&PUSH 0)
569   (CALLS2&JMPIF 8 L540)               ; NUMBERP
572   (LOAD 0)
573   (CAR)
574   (CAR&PUSH)
575   (JMPIFEQTO 40 L546)                 ; MLIST
578   (LOAD 0)
579   (CAR)
580   (CAR&PUSH)
581   (CONST&PUSH 41)                     ; (MSETQ MEQUAL MDEFINE ...)
583   (CALL2&JMPIF 16 L554)               ; MEMQ
586   (LOAD&CAR&PUSH 16)
588   (CONST 38)                          ; $EV
590   L590
590   (PUSH)
591   (CALL2 39)                          ; IMPROPER-ARG-ERR
593   (SKIP 1)
595   (JMP L771)
598   L598
598   (LOAD&CAR&PUSH 15)
600   (CONST&PUSH 38)                     ; $EV
602   (CALL2 39)                          ; IMPROPER-ARG-ERR
604   (JMP L771)
607   L607
607   (GETVALUE 27)                       ; $MAXPOSEX
609   (JMP L629)
611   L611
611   (LOAD 15)
613   (CAR)
614   (CDR)
615   (JMPIFNOT L607)
617   (LOAD 15)
619   (CAR)
620   (CDR)
621   (CDR)
622   (JMPIF L638)
624   (LOAD 15)
626   (CAR)
627   (CDR)
628   (CAR)
629   L629
629   (SETVALUE 4)                        ; $EXPOP
631   (GETVALUE 28)                       ; $MAXNEGEX
633   (SETVALUE 5)                        ; $EXPON
635   (JMP L771)
638   L638
638   (LOAD 15)
640   (CAR)
641   (CDR)
642   (CAR)
643   (SETVALUE 4)                        ; $EXPOP
645   (LOAD 15)
647   (CAR)
648   (CDR)
649   (CDR)
650   (CAR)
651   (SETVALUE 5)                        ; $EXPON
653   (JMP L771)
656   L656
656   (LOAD 15)
658   (CAR)
659   (CDR)
660   (CAR&PUSH)
661   (NIL)
662   (BIND 44)                           ; $USE_FAST_ARRAYS
664   (LOAD 3)
665   (CAR)
666   (CAR&PUSH)
667   (JMPIFNOTEQTO 45 L674)              ; MQAPPLY
670   (LOAD 3)
671   (CDR)
672   (CAR)
673   (STORE 3)
674   L674
674   (LOAD 3)
675   (CAR)
676   (CAR&PUSH)
677   (CALL1 46)                          ; $VERBIFY
679   (STORE 3)
680   (LOAD&PUSH 9)
681   (LOAD&CAR&PUSH 20)
683   (NIL)
684   (CONS&PUSH)
685   (CALLSR&STORE 2 35 9)               ; NCONC
689   (LOAD&PUSH 16)
690   (LOAD&PUSH 4)
691   (NIL)
692   (CONS&PUSH)
693   (CALLSR&STORE 2 34 16)              ; APPEND
697   (LOAD&PUSH 3)
698   (CALL1&JMPIFNOT 47 L707)            ; RULECHK
701   (LOAD&PUSH 3)
702   (GETVALUE 11)                       ; RULEFCNL
704   (CONS)
705   (SETVALUE 11)                       ; RULEFCNL
707   L707
707   (UNBIND1)
708   (SKIP 1)
710   (JMP L771)
712   L712
712   (LOAD&PUSH 12)
713   (LOAD 16)
715   (CAR)
716   (CDR&PUSH)
717   (CALLSR&STORE 2 34 12)              ; APPEND
721   (JMP L771)
723   L723
723   (T)
724   (SETVALUE 8)                        ; DERIVFLAG
726   (LOAD 15)
728   (CAR)
729   (CDR)
730   (SETVALUE 17)                       ; DERIVLIST
732   (JMP L771)
734   L734
734   (LOAD&CAR&PUSH 15)
736   (CALL1&PUSH 54)                     ; |:SPREAD|
738   (LOAD&CDR&PUSH 16)
740   (CALLSR&STORE 2 35 15)              ; NCONC
744   (LOAD&JMPIFNOT 3 L268)
748   (JMP L275)
751   L751
751   (LOAD&PUSH 14)
752   (CALL1 64)                          ; SPECDISREP
754   (STORE 14)
756   (LOAD&JMPIFNOT 13 L867)
760   (JMP L834)
763   L763
763   (LOAD&CAR&PUSH 15)
765   (LOAD&CDR&PUSH 16)
767   (CALLSR&STORE 2 34 15)              ; APPEND
771   L771
771   (LOAD&CDR&STORE 15)
773   (LOAD&JMPIF 15 L101)
777   L777
777   (NIL&PUSH)
778   (UNWIND-PROTECT-OPEN L999)
781   (LOAD&PUSH 17)
782   (LOAD&PUSH 18)
783   (NIL&PUSH)
784   (CALL 3 56)                         ; MBIND
787   (T&STORE 2)
789   (CONST&PUSH 57)                     ; (MLOCAL)
791   (LOAD 16)
793   (CONS&PUSH)
794   (CALL1 20)                          ; MEVAL
796   (NIL)
797   (BIND 58)                           ; $TRANSLATE
799   (CONST&SYMBOL-FUNCTION&PUSH 59)     ; MEVAL1
801   (LOAD&PUSH 12)
802   (CALLSR 0 24)                       ; MAPC
805   (UNBIND1)
806   (NIL)
807   (BIND 3)                            ; $NUMER
809   (LOAD&PUSH 17)
810   (CALL1 60)                          ; MEVALATOMS
812   (STORE 17)
814   (UNBIND1)
815   (PUSH)
816   (CALL1&JMPIFNOT 61 L826)            ; $RATP
819   (T&STORE 11)
821   (LOAD&PUSH 14)
822   (CALL1 62)                          ; $RATDISREP
824   (STORE 14)
826   L826
826   (LOAD&PUSH 14)
827   (CALL1&JMPIF 63 L751)               ; SPECREPP
831   (LOAD&JMPIFNOT 13 L867)
834   L834
834   (LOAD&PUSH 14)
835   (CALL1 65)                          ; SIMPLIFY
837   (STORE 14)
839   (LOAD&PUSH 13)
840   (NIL&PUSH)
841   (JMP L861)
843   L843
843   (LOAD&CAR&STORE 1 0)
846   (CAR&PUSH)
847   (CALL1&PUSH 20)                     ; MEVAL
849   (LOAD&CDR&PUSH 1)
851   (CALL1&PUSH 20)                     ; MEVAL
853   (LOAD&PUSH 18)
854   (CALL 3 66)                         ; MAXIMA-SUBSTITUTE
857   (STORE 16)
859   (LOAD&CDR&STORE 1)
861   L861
861   (LOAD&PUSH 1)
862   (CALLS1&JMPIFNOT 146 L843)          ; ENDP
865   (SKIP 2)
867   L867
867   (VALUES0)
868   (UNWIND-PROTECT-NORMAL-EXIT)
869   (LOADI 0 0 0)
873   (JMPIFNOT L1011)
876   (JMP L1005)
879   L879
879   (GETVALUE&PUSH 69)                  ; %E-VAL
881   (CONST&PUSH 12)                     ; $%E
882   (LOAD&PUSH 16)
883   (CALL 3 66)                         ; MAXIMA-SUBSTITUTE
886   (STORE 14)
888   (LOAD&JMPIFNOT 6 L1042)
892   L892
892   (LOAD&PUSH 14)
893   (CALL1 70)                          ; RESIMPLIFY
895   (JMP L1052)
898   L898
898   (LOAD&PUSH 14)
899   (CALL1 71)                          ; MEVALP
901   (JMP L1049)
904   L904
904   (NIL&PUSH)
905   (LOAD&PUSH 15)
906   (CALL1 55)                          ; SPECREPCHECK
908   (STORE 15)
910   L910
910   (LOAD&PUSH 10)
911   (LOAD&PUSH 16)
912   (LOAD&JMPIFNOT 1 L928)
915   L915
915   (LOAD&CAR&PUSH 1)
917   (NIL)
918   (CONS&PUSH)
919   (LOAD&PUSH 1)
920   (LIST 2)
922   (STORE 0)
923   (LOAD&CDR&STORE 1)
925   (LOAD&JMPIF 1 L915)
928   L928
928   (LOAD&PUSH 0)
929   (CALL1 20)                          ; MEVAL
931   (STORE 2)
932   (SKIP 2)
934   (LOAD&PUSH 14)
935   (NIL&PUSH)
936   (JMP L960)
938   L938
938   (LOAD 0)
939   (STORE 15)
941   (JMP L910)
943   L943
943   (LOAD&CAR&STORE 1 0)
946   (CAR&PUSH)
947   (CALL1&PUSH 20)                     ; MEVAL
949   (LOAD&CDR&PUSH 1)
951   (CALL1&PUSH 20)                     ; MEVAL
953   (LOAD&PUSH 4)
954   (CALL 3 66)                         ; MAXIMA-SUBSTITUTE
957   (STORE 2)
958   (LOAD&CDR&STORE 1)
960   L960
960   (LOAD&PUSH 1)
961   (CALLS1&JMPIFNOT 146 L943)          ; ENDP
964   (SKIP 2)
966   (GETVALUE 72)                       ; $INFEVAL
968   (JMPIF L978)
970   (LOAD&DEC&STORE 13)
972   (PUSH)
973   (CONST&PUSH 14)                     ; 0
974   (CALLSR&JMPIF 1 45 L987)            ; =
978   L978
978   (LOAD&PUSH 0)
979   (CALL1 55)                          ; SPECREPCHECK
981   (STORE 0)
982   (LOAD&PUSH 15)
983   (LOAD&PUSH 1)
984   (CALL2&JMPIFNOT 73 L938)            ; ALIKE1
987   L987
987   (LOAD 0)
988   (STORE 15)
990   (SKIP 1)
992   (LOAD&JMPIFNOT 11 L1086)
996   (JMP L1069)
999   L999
999   (LOADI 0 0 0)
1003  (JMPIFNOT L1011)
1005  L1005
1005  (LOADI&PUSH 0 0 15)
1009  (CALL1 67)                          ; MUNBIND
1011  L1011
1011  (UNWIND-PROTECT-CLOSE)
1012  (SKIP 1)
1014  (NIL&PUSH)
1015  (UNWIND-PROTECT-OPEN L1096)
1018  (LOAD&PUSH 17)
1019  (LOAD&PUSH 17)
1020  (NIL&PUSH)
1021  (CALL 3 56)                         ; MBIND
1024  (T&STORE 2)
1026  (GETVALUE 3)                        ; $NUMER
1028  (JMPIFNOT L1038)
1030  (LOAD&JMPIFNOT 6 L1038)
1033  (GETVALUE 68)                       ; $%ENUMER
1035  (JMPIF L879)
1038  L1038
1038  (LOAD&JMPIF 6 L892)
1042  L1042
1042  (LOAD&JMPIF 7 L898)
1046  (LOAD&PUSH 14)
1047  (CALL1 59)                          ; MEVAL1
1049  L1049
1049  (PUSH)
1050  (CALL1 65)                          ; SIMPLIFY
1052  L1052
1052  (STORE 14)
1054  (LOAD&PUSH 12)
1055  (CONST&PUSH 14)                     ; 0
1056  (CALLSR&JMPIF 1 48 L904)            ; >
1061  (GETVALUE 72)                       ; $INFEVAL
1063  (JMPIF L904)
1066  (LOAD&JMPIFNOT 11 L1086)
1069  L1069
1069  (GETVALUE 3)                        ; $NUMER
1071  (JMPIF L1086)
1073  (GETVALUE 2)                        ; $FLOAT
1075  (JMPIF L1086)
1077  (NIL)
1078  (BIND 74)                           ; $NOREPEAT
1080  (LOAD&PUSH 17)
1081  (CALL1 75)                          ; RATF
1083  (UNBIND1)
1084  (STORE 14)
1086  L1086
1086  (VALUES0)
1087  (UNWIND-PROTECT-NORMAL-EXIT)
1088  (LOADI 0 0 0)
1092  (JMPIFNOT L1108)
1094  (JMP L1102)
1096  L1096
1096  (LOADI 0 0 0)
1100  (JMPIFNOT L1108)
1102  L1102
1102  (LOADI&PUSH 0 0 15)
1106  (CALL1 67)                          ; MUNBIND
1108  L1108
1108  (UNWIND-PROTECT-CLOSE)
1109  (SKIP 1)
1111  (CALL0 76)                          ; MUNLOCAL
1113  (LOAD 11)
1114  (UNBIND1)
1115  (SKIP 13)
1117  (UNBIND 12)
1119  (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MEVALATOMS (EXP) ...)-47|
(CONST 0) = MEVALATOMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVALATOMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVALATOMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVALATOMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVALATOMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVALATOMS
8     (SKIP&RET 1)


Disassembly of function MEVALATOMS
(CONST 0) = MEVAL1
(CONST 1) = ARRAY
(CONST 2) = MEMQ
(CONST 3) = EVARRP
(CONST 4) = NOTEXIST
(CONST 5) = MEVALATOMS
(CONST 6) = MQUOTE
(CONST 7) = (MSETQ $DEFINE)
(CONST 8) = $EV
(CONST 9) = ($EVAL)
(CONST 10) = MPROGN
(CONST 11) = ($SUM $PRODUCT %SUM %PRODUCT)
(CONST 12) = MSUMP
(CONST 13) = MEVAL
(CONST 14) = $%TH
(CONST 15) = SIMPLIFY
(CONST 16) = ML-TYPEP
(CONST 17) = FIXNUM
(CONST 18) = AUTOLDCHK
(CONST 19) = (FSUBR FEXPR)
(CONST 20) = GETL-LM-FCN-PROP
(CONST 21) = (MFEXPR* MFEXPR*S)
(CONST 22) = GETL
(CONST 23) = EVOK
(CONST 24) = (MFEXPRP T-MFEXPR)
(CONST 25) = MGETL
(CONST 26) = T-MFEXPR
(CONST 27) = MGET
(CONST 28) = MEXPR
(CONST 29) = MDEFLISTP
(CONST 30) = MQUOTEP
(CONST 31) = MMACROEXPANDED
(CONST 32) = $TRANSRUN
(CONST 33) = TRANSLATED-MMACRO
(CONST 34) = MMACRO
(CONST 35) = MMACROEXPAND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRANSRUN MSUMP)
262 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L84)
4     (CONST&PUSH 1)                      ; ARRAY
5     (LOAD 2)
6     (CAR)
7     (CDR&PUSH)
8     (CALL2&JMPIF 2 L101)                ; MEMQ
12    (LOAD 1)
13    (CAR)
14    (CAR&PUSH)
15    (JMPIFEQTO 6 L121)                  ; MQUOTE
19    (LOAD 1)
20    (CAR)
21    (CAR&PUSH)
22    (CONST&PUSH 7)                      ; (MSETQ $DEFINE)
23    (CALL2&JMPIF 2 L126)                ; MEMQ
27    (LOAD 1)
28    (CAR)
29    (CAR&PUSH)
30    (JMPIFNOTEQTO 8 L51)                ; $EV
33    (LOAD 1)
34    (CDR)
35    (JMPIFNOT L51)
37    (LOAD 1)
38    (CDR)
39    (CDR)
40    (JMPIFNOT L142)
43    (LOAD 1)
44    (CDR)
45    (CDR&PUSH)
46    (CONST&PUSH 9)                      ; ($EVAL)
47    (CALLS2&JMPIF 2 L142)               ; EQUAL
51    L51
51    (LOAD 1)
52    (CAR)
53    (CAR&PUSH)
54    (JMPIFEQTO 10 L142)                 ; MPROGN
58    (LOAD 1)
59    (CAR)
60    (CAR&PUSH)
61    (CONST&PUSH 11)                     ; ($SUM $PRODUCT %SUM %PRODUCT)
62    (CALL2&JMPIF 2 L162)                ; MEMQ
66    (LOAD 1)
67    (CAR)
68    (CAR&PUSH)
69    (JMPIFNOTEQTO 14 L300)              ; $%TH
73    (LOAD 1)
74    (CDR)
75    (CAR&PUSH)
76    (CALL1&PUSH 15)                     ; SIMPLIFY
78    (CALL1&PUSH 16)                     ; ML-TYPEP
80    (JMPIFNOTEQTO 17 L300)              ; FIXNUM
84    L84
84    (LOAD&PUSH 1)
85    (CALL1 0)                           ; MEVAL1
87    (SKIP&RET 2)
89    L89
89    (LOAD&CAR&PUSH 2)
91    (CONST&SYMBOL-FUNCTION&PUSH 5)      ; MEVALATOMS
93    (LOAD&CDR&PUSH 4)
95    (CALLSR 0 22)                       ; MAPCAR
98    (CONS)
99    (SKIP&RET 3)
101   L101
101   (NIL&PUSH)
102   (T)
103   (BIND 3)                            ; EVARRP
105   (CONST 3)                           ; EVARRP
106   (CATCH-OPEN L112)
108   (LOAD&PUSH 8)
109   (CALL1 0)                           ; MEVAL1
111   (CATCH-CLOSE)
112   L112
112   (STORE 3)
113   (UNBIND1)
114   (PUSH)
115   (JMPIFEQTO 4 L89)                   ; NOTEXIST
118   (POP)
119   (SKIP&RET 2)
121   L121
121   (LOAD 1)
122   (CDR)
123   (CAR)
124   (SKIP&RET 2)
126   L126
126   (LOAD&CAR&PUSH 1)
128   (LOAD 2)
129   (CDR)
130   (CAR&PUSH)
131   (LOAD 3)
132   (CDR)
133   (CDR)
134   (CAR&PUSH)
135   (JSR&PUSH L0)
138   (LIST 3)
140   (SKIP&RET 2)
142   L142
142   (LOAD&CAR&PUSH 1)
144   (LOAD 2)
145   (CDR)
146   (CAR&PUSH)
147   (JSR&PUSH L0)
150   (LOAD 3)
151   (CDR)
152   (CDR)
153   (CONS)
154   (JMP L376)
157   L157
157   (LOAD&PUSH 1)
158   (CALL1 13)                          ; MEVAL
160   (SKIP&RET 2)
162   L162
162   (GETVALUE 12)                       ; MSUMP
164   (JMPIF L157)
166   (LOAD&CAR&PUSH 1)
168   (LOAD 2)
169   (CDR)
170   (CAR&PUSH)
171   (LOAD 3)
172   (CDR)
173   (CDR)
174   (CAR&PUSH)
175   (LOAD 4)
176   (CDR)
177   (CDR)
178   (CDR)
179   (CAR&PUSH)
180   (JSR&PUSH L0)
183   (LOAD 5)
184   (CDR)
185   (CDR)
186   (CDR)
187   (CDR)
188   (CAR&PUSH)
189   (JSR&PUSH L0)
192   (LIST 5)
194   (SKIP&RET 2)
196   L196
196   (LOAD 1)
197   (SKIP&RET 2)
199   L199
199   (LOAD 2)
200   (JMP L216)
202   L202
202   (LOAD&PUSH 0)
203   (LOAD 3)
204   (CAR)
205   (CDR)
206   (CAR&PUSH)
207   (CALL1&JMPIF 30 L199)               ; MQUOTEP
210   (CONST&SYMBOL-FUNCTION&PUSH 5)      ; MEVALATOMS
212   (LOAD&PUSH 3)
213   (CALLSR 0 22)                       ; MAPCAR
216   L216
216   (PUSH)
217   (CALLS1 163)                        ; NRECONC
219   (SKIP 3)
221   (JMP L376)
224   L224
224   (LOAD 1)
225   (CAR)
226   (JMP L272)
228   L228
228   (LOAD&CAR&PUSH 1)
230   (LOAD 2)
231   (CAR)
232   (CAR&PUSH)
233   (CONST&PUSH 26)                     ; T-MFEXPR
234   (CALL2 27)                          ; MGET
236   (CDR)
237   (JMPIF L248)
239   (LOAD 2)
240   (CAR)
241   (CAR&PUSH)
242   (CONST&PUSH 28)                     ; MEXPR
243   (CALL2 27)                          ; MGET
245   (CDR)
246   (CAR)
247   (CDR)
248   L248
248   (PUSH)
249   (LOAD&CDR&PUSH 3)
251   (NIL&PUSH)
252   (LOAD&JMPIFNOT 2 L284)
255   L255
255   (LOAD&JMPIFNOT 1 L284)
258   (LOAD&PUSH 2)
259   (CALL1&JMPIF 29 L202)               ; MDEFLISTP
262   (LOAD&CAR&PUSH 2)
264   (CALL1&JMPIF 30 L224)               ; MQUOTEP
267   (LOAD&CAR&PUSH 1)
269   (JSR L0)
272   L272
272   (PUSH)
273   (LOAD&CONS&STORE 0)
275   (LOAD&CDR&PUSH 2)
277   (LOAD&CDR&STORE 2)
279   (POP&STORE 2)
281   (LOAD&JMPIF 2 L255)
284   L284
284   (LOAD&PUSH 0)
285   (CALLS2 73)                         ; NREVERSE
287   (SKIP 3)
289   (JMP L376)
292   L292
292   (LOAD&PUSH 1)
293   (CALL1&PUSH 35)                     ; MMACROEXPAND
295   (JMPTAIL 1 3 L0)
300   L300
300   (LOAD 1)
301   (CAR)
302   (CAR&PUSH)
303   (CALL1 18)                          ; AUTOLDCHK
305   (LOAD 1)
306   (CAR)
307   (CAR&PUSH)
308   (CONST&PUSH 19)                     ; (FSUBR FEXPR)
309   (CALL2&JMPIF 20 L319)               ; GETL-LM-FCN-PROP
312   (LOAD 1)
313   (CAR)
314   (CAR&PUSH)
315   (CONST&PUSH 21)                     ; (MFEXPR* MFEXPR*S)
316   (CALL2&JMPIFNOT 22 L329)            ; GETL
319   L319
319   (LOAD 1)
320   (CAR)
321   (CAR&PUSH)
322   (CONST&PUSH 23)                     ; EVOK
323   (PUSH-UNBOUND 1)
325   (CALLS2&JMPIFNOT 132 L196)          ; GET
329   L329
329   (LOAD 1)
330   (CAR)
331   (CAR&PUSH)
332   (CONST&PUSH 24)                     ; (MFEXPRP T-MFEXPR)
333   (CALL2&JMPIF 25 L228)               ; MGETL
337   (LOAD 1)
338   (CAR)
339   (CAR&PUSH)
340   (JMPIFEQTO 31 L292)                 ; MMACROEXPANDED
343   (GETVALUE 32)                       ; $TRANSRUN
345   (JMPIFNOT L358)
347   (LOAD 1)
348   (CAR)
349   (CAR&PUSH)
350   (CONST&PUSH 33)                     ; TRANSLATED-MMACRO
352   (PUSH-UNBOUND 1)
354   (CALLS2&JMPIF 132 L292)             ; GET
358   L358
358   (LOAD 1)
359   (CAR)
360   (CAR&PUSH)
361   (CONST&PUSH 34)                     ; MMACRO
363   (CALL2&JMPIF 27 L292)               ; MGET
367   (LOAD&CAR&PUSH 1)
369   (CONST&SYMBOL-FUNCTION&PUSH 5)      ; MEVALATOMS
371   (LOAD&CDR&PUSH 3)
373   (CALLSR 0 22)                       ; MAPCAR
376   L376
376   (CONS)
377   (SKIP&RET 2)


Disassembly of function #:|(PROG1 '(EVOK PROPERTIES) (MAPC #'# '#))-48|
(CONST 0) = ($MAP $MAPLIST $FULLMAP $MATRIXMAP $FULLMAPL $OUTERMAP $SCANMAP $APPLY)
(CONST 1) = X
(CONST 2) = EVOK
(CONST 3) = PUTPROP
(CONST 4) = (EVOK PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($MAP $MAPLIST $FULLMAP ...)
1     (JMP L20)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE&PUSH 1)                   ; X
10    (T&PUSH)
11    (CONST&PUSH 2)                      ; EVOK
12    (CALL 3 3)                          ; PUTPROP
15    (UNBIND1)
16    (SKIP 1)
18    (LOAD&CDR&STORE 0)
20    L20
20    (LOAD&PUSH 0)
21    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
24    (SKIP 1)
26    (CONST 4)                           ; (EVOK PROPERTIES)
27    (SKIP&RET 1)


Disassembly of function #:|(DEFUN EVFUNMAKE (FUN EXP) ...)-49|
(CONST 0) = EVFUNMAKE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVFUNMAKE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVFUNMAKE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVFUNMAKE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVFUNMAKE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVFUNMAKE
8     (SKIP&RET 1)


Disassembly of function EVFUNMAKE
(CONST 0) = MSETQP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
22 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L12)                 ; MSETQP
4     (LOAD&PUSH 2)
5     (NIL)
6     (CONS&PUSH)
7     (LOAD&PUSH 2)
8     (LIST 2)
10    (SKIP&RET 3)
12    L12
12    (LOAD&CAR&PUSH 1)
14    (LOAD 2)
15    (CDR)
16    (CAR&PUSH)
17    (LOAD&PUSH 4)
18    (LOAD 4)
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (JSR&PUSH L0)
24    (LIST 3)
26    (SKIP&RET 3)


Disassembly of function #:|(DEFUN \|:SPREAD\| (X) ...)-50|
(CONST 0) = |:SPREAD|
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE |:SPREAD|>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; |:SPREAD|
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; |:SPREAD|
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE |:SPREAD|>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; |:SPREAD|
8     (SKIP&RET 1)


Disassembly of function |:SPREAD|
(CONST 0) = X
(CONST 1) = MSETQP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
49 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (BIND 0)                            ; X
7     (JMP L16)
9     L9
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CDR)
13    (CAR)
14    (SETVALUE 0)                        ; X
16    L16
16    (GETVALUE 0)                        ; X
18    (CDR)
19    (CDR)
20    (CAR&PUSH)
21    (CALL1&JMPIF 1 L9)                  ; MSETQP
24    (GETVALUE 0)                        ; X
26    (CDR)
27    (CDR)
28    (CAR)
29    (UNBIND1)
30    (PUSH)
31    (GETVALUE 0)                        ; X
33    (BIND 0)                            ; X
35    (NIL&PUSH)
36    (JMP L57)
38    L38
38    (GETVALUE 0)                        ; X
40    (CAR&PUSH)
41    (GETVALUE 0)                        ; X
43    (CDR)
44    (CAR&PUSH)
45    (LOAD&PUSH 6)
46    (LIST&PUSH 3)
48    (LOAD&CONS&STORE 0)
50    (GETVALUE 0)                        ; X
52    (CDR)
53    (CDR)
54    (CAR)
55    (SETVALUE 0)                        ; X
57    L57
57    (GETVALUE&PUSH 0)                   ; X
59    (CALL1&JMPIF 1 L38)                 ; MSETQP
62    (POP)
63    (UNBIND1)
64    (SKIP 1)
66    (UNBIND1)
67    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MSETQP (X) ...)-51|
(CONST 0) = MSETQP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MSETQP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETQP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MSETQP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MSETQP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MSETQP
8     (SKIP&RET 1)


Disassembly of function MSETQP
(CONST 0) = X
(CONST 1) = MSETQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MSETQ
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MQUOTEP (X) ...)-52|
(CONST 0) = MQUOTEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MQUOTEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MQUOTEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MQUOTEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MQUOTEP
8     (SKIP&RET 1)


Disassembly of function MQUOTEP
(CONST 0) = X
(CONST 1) = MQUOTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 1)                           ; MQUOTE
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MQUOTE (FORM) ...)-53-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MQUOTE (FORM) ...)-53-2-1|>
(CONST 1) = MQUOTE
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MQUOTE (FORM) ...)-53-2-1|>
1     (CONST&PUSH 1)                      ; MQUOTE
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MQUOTE (FORM) ...)-53-2-1|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR)
3     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $SUBVARP (X) ...)-54|
(CONST 0) = $SUBVARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SUBVARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SUBVARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SUBVARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SUBVARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SUBVARP
8     (SKIP&RET 1)


Disassembly of function $SUBVARP
(CONST 0) = X
(CONST 1) = ARRAY
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L19)
9     (CONST&PUSH 1)                      ; ARRAY
10    (GETVALUE 0)                        ; X
12    (CAR)
13    (CDR&PUSH)
14    (CALL2 2)                           ; MEMQ
16    (JMPIFNOT1 L19)
18    (T)
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MSETERR (X Y) ...)-55|
(CONST 0) = MSETERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MSETERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MSETERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MSETERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MSETERR
8     (SKIP&RET 1)


Disassembly of function MSETERR
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = MUNBINDP
(CONST 3) = "Attempt to set ~:M to ~M~%Improper value assignment"
(CONST 4) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X MUNBINDP)
16 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE 2)                        ; MUNBINDP
8     (JMPIF L22)
10    (CONST&PUSH 3)                      ; "Attempt to set ~:M to ~M~%Improper value assignment"
11    (GETVALUE&PUSH 0)                   ; X
13    (GETVALUE&PUSH 1)                   ; Y
15    (CALL 3 4)                          ; MERROR
18    L18
18    (UNBIND 2)
20    (SKIP&RET 3)
22    L22
22    (CONST 2)                           ; MUNBINDP
23    (JMP L18)


Disassembly of function #:|(PROG1 '(ASSIGN PROPERTIES) (MAPC #'# '#))-56|
(CONST 0) = 
(($LINEL MSETCHK) (*READ-BASE* MSETCHK) (*PRINT-BASE* MSETCHK)
 (MODULUS MSETCHK) ($INFOLISTS NEVERSET) ($TRACE NEVERSET)
 ($RATWEIGHTS MSETCHK) ($RATVARS MSETCHK) ($SETCHECK MSETCHK) ($GCD MSETCHK)
 ($DOTASSOC MSETCHK) ($RATWTLVL MSETCHK) ($RATFAC MSETCHK) ($ALL NEVERSET)
 ($NUMER NUMERSET) ($FORTINDENT MSETCHK) ($GENSUMNUM MSETCHK)
 ($GENINDEX MSETCHK) ($FPPRINTPREC MSETCHK) ($FLOATWIDTH MSETCHK)
 ($PARSEWINDOW MSETCHK) ($OPTIMPREFIX MSETCHK) ($TTYINTNUM MSETCHK))
(CONST 1) = X
(CONST 2) = ASSIGN
(CONST 3) = PUTPROP
(CONST 4) = (ASSIGN PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (CONST&PUSH 0)                      ; (# # # ...)
1     (JMP L24)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE 1)                        ; X
10    (CAR&PUSH)
11    (GETVALUE 1)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; ASSIGN
16    (CALL 3 3)                          ; PUTPROP
19    (UNBIND1)
20    (SKIP 1)
22    (LOAD&CDR&STORE 0)
24    L24
24    (LOAD&PUSH 0)
25    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
28    (SKIP 1)
30    (CONST 4)                           ; (ASSIGN PROPERTIES)
31    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MSETCHK (X Y) ...)-57|
(CONST 0) = MSETCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MSETCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MSETCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MSETCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MSETCHK
8     (SKIP&RET 1)


Disassembly of function MSETCHK
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = (*READ-BASE* *PRINT-BASE*)
(CONST 3) = MEMQ
(CONST 4) = ROMAN
(CONST 5) = FIXNUMP
(CONST 6) = 2
(CONST 7) = 35
(CONST 8) = MSETERR
(CONST 9) = *READ-BASE*
(CONST 10) = 
($LINEL $FORTINDENT $GENSUMNUM $FPPRINTPREC $FLOATWIDTH $PARSEWINDOW
 $TTYINTNUM)
(CONST 11) = $LINEL
(CONST 12) = LINEL
(CONST 13) = ($FORTINDENT $GENSUMNUM $FLOATWIDTH $TTYINTNUM)
(CONST 14) = 0
(CONST 15) = $PARSEWINDOW
(CONST 16) = -1
(CONST 17) = $FPPRINTPREC
(CONST 18) = 1
(CONST 19) = ($GENINDEX $OPTIMPREFIX)
(CONST 20) = $DOTASSOC
(CONST 21) = MNCTIMES
(CONST 22) = ASSOCIATIVE
(CONST 23) = CPUT
(CONST 24) = MODULUS
(CONST 25) = PRIMEP
(CONST 26) = (1 0 -1)
(CONST 27) = ZL-MEMBER
(CONST 28) = "Warning: MODULUS being set to ~:M, a non-prime.~%"
(CONST 29) = MTELL
(CONST 30) = $SETCHECK
(CONST 31) = ($ALL T NIL)
(CONST 32) = $LISTP
(CONST 33) = $GCD
(CONST 34) = *GCDL*
(CONST 35) = $RATVARS
(CONST 36) = $RATFAC
(CONST 37) = $RATWTLVL
(CONST 38) = "RATFAC and RATWTLVL may not both be used at the same time."
(CONST 39) = MERROR
(CONST 40) = $RATWEIGHTS
(CONST 41) = KILL1
(CONST 42) = $RATWEIGHT
(CONST 43) = "RATFAC and RATWTLVL may not both be used at the same time."
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($RATFAC $RATWTLVL *GCDL* Y X)
writes special variable : (LINEL)
201 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; (*READ-BASE* *PRINT-BASE*)
9     (CALL2&JMPIF 3 L69)                 ; MEMQ
12    (GETVALUE&PUSH 0)                   ; X
14    (CONST&PUSH 10)                     ; ($LINEL $FORTINDENT $GENSUMNUM ...)
15    (CALL2&JMPIF 3 L106)                ; MEMQ
19    (GETVALUE&PUSH 0)                   ; X
21    (CONST&PUSH 19)                     ; ($GENINDEX $OPTIMPREFIX)
22    (CALL2&JMPIF 3 L178)                ; MEMQ
26    (GETVALUE&PUSH 0)                   ; X
28    (JMPIFEQTO 20 L189)                 ; $DOTASSOC
32    (GETVALUE&PUSH 0)                   ; X
34    (JMPIFEQTO 24 L199)                 ; MODULUS
38    (GETVALUE&PUSH 0)                   ; X
40    (JMPIFEQTO 30 L243)                 ; $SETCHECK
44    (GETVALUE&PUSH 0)                   ; X
46    (JMPIFNOTEQTO 33 L302)              ; $GCD
50    (GETVALUE 1)                        ; Y
52    (NOT)
53    (JMPIFNOT L257)
56    (NOT)
57    (JMPIFNOT1 L380)
60    L60
60    (GETVALUE&PUSH 0)                   ; X
62    (GETVALUE&PUSH 1)                   ; Y
64    (CALL2 8)                           ; MSETERR
66    (JMP L380)
69    L69
69    (GETVALUE&PUSH 1)                   ; Y
71    (CONST 4)                           ; ROMAN
72    (EQ)
73    (JMPIF1 L380)
76    (GETVALUE&PUSH 1)                   ; Y
78    (CALL1&JMPIFNOT 5 L60)              ; FIXNUMP
81    (GETVALUE&PUSH 1)                   ; Y
83    (CONST&PUSH 6)                      ; 2
84    (CALLSR&JMPIF 1 47 L60)             ; <
88    (GETVALUE&PUSH 1)                   ; Y
90    (CONST&PUSH 7)                      ; 35
91    (CALLSR&JMPIF 1 48 L60)             ; >
95    (GETVALUE&PUSH 0)                   ; X
97    (CONST 9)                           ; *READ-BASE*
98    (EQ)
99    (JMPIF1 L380)
102   (NIL)
103   (JMP L380)
106   L106
106   (GETVALUE&PUSH 1)                   ; Y
108   (CALL1&JMPIF 5 L117)                ; FIXNUMP
111   (GETVALUE&PUSH 0)                   ; X
113   (GETVALUE&PUSH 1)                   ; Y
115   (CALL2 8)                           ; MSETERR
117   L117
117   (GETVALUE&PUSH 0)                   ; X
119   (JMPIFNOTEQTO 11 L126)              ; $LINEL
122   (GETVALUE 1)                        ; Y
124   (SETVALUE 12)                       ; LINEL
126   L126
126   (GETVALUE&PUSH 0)                   ; X
128   (CONST&PUSH 13)                     ; ($FORTINDENT $GENSUMNUM ...)
129   (CALL2&JMPIFNOT 3 L140)             ; MEMQ
132   (GETVALUE&PUSH 1)                   ; Y
134   (CONST&PUSH 14)                     ; 0
135   (CALLSR&JMPIF 1 47 L60)             ; <
140   L140
140   (GETVALUE&PUSH 0)                   ; X
142   (JMPIFNOTEQTO 15 L153)              ; $PARSEWINDOW
145   (GETVALUE&PUSH 1)                   ; Y
147   (CONST&PUSH 16)                     ; -1
148   (CALLSR&JMPIF 1 47 L60)             ; <
153   L153
153   (GETVALUE&PUSH 0)                   ; X
155   (JMPIFNOTEQTO 17 L174)              ; $FPPRINTPREC
158   (GETVALUE&PUSH 1)                   ; Y
160   (CONST&PUSH 14)                     ; 0
161   (CALLSR&JMPIF 1 47 L60)             ; <
166   (GETVALUE&PUSH 1)                   ; Y
168   (CONST&PUSH 18)                     ; 1
169   (CALLSR&JMPIF 1 45 L60)             ; =
174   L174
174   (NIL)
175   (JMP L380)
178   L178
178   (GETVALUE&PUSH 1)                   ; Y
180   (CALLS2 6)                          ; SYMBOLP
182   (NOT)
183   (JMPIFNOT1 L380)
186   (JMP L60)
189   L189
189   (CONST&PUSH 21)                     ; MNCTIMES
190   (GETVALUE&PUSH 1)                   ; Y
192   (CONST&PUSH 22)                     ; ASSOCIATIVE
193   (CALL 3 23)                         ; CPUT
196   (JMP L380)
199   L199
199   (GETVALUE 1)                        ; Y
201   (NOT)
202   (JMPIF1 L380)
205   (GETVALUE&PUSH 1)                   ; Y
207   (CALLS2&JMPIFNOT 12 L60)            ; INTEGERP
211   (GETVALUE&PUSH 1)                   ; Y
213   (CALL1&JMPIFNOT 25 L224)            ; PRIMEP
216   (GETVALUE&PUSH 1)                   ; Y
218   (CONST&PUSH 26)                     ; (1 0 -1)
219   (CALL2 27)                          ; ZL-MEMBER
221   (JMPIFNOT1 L380)
224   L224
224   (CONST&PUSH 28)                     ; "Warning: MODULUS being set to ~:M, a non-prime.~%"
225   (GETVALUE&PUSH 1)                   ; Y
227   (CALL2 29)                          ; MTELL
229   (JMP L380)
232   L232
232   (GETVALUE&PUSH 1)                   ; Y
234   (CALL1 32)                          ; $LISTP
236   (NOT)
237   (JMPIFNOT1 L380)
240   (JMP L60)
243   L243
243   (GETVALUE&PUSH 1)                   ; Y
245   (CONST&PUSH 31)                     ; ($ALL T NIL)
247   (CALL2&JMPIFNOT 3 L232)             ; MEMQ
250   (NOT)
251   (JMPIFNOT1 L380)
254   (JMP L60)
257   L257
257   (GETVALUE&PUSH 1)                   ; Y
259   (GETVALUE&PUSH 34)                  ; *GCDL*
261   (CALL2 3)                           ; MEMQ
263   (NOT)
264   (JMPIFNOT1 L380)
267   (JMP L60)
270   L270
270   (GETVALUE&PUSH 1)                   ; Y
272   (CALL1&JMPIFNOT 32 L60)             ; $LISTP
276   (CONST 35)                          ; $RATVARS
278   (JMP L330)
280   L280
280   (GETVALUE 1)                        ; Y
282   (JMPIFNOT1 L380)
285   (GETVALUE 37)                       ; $RATWTLVL
287   (JMPIFNOT1 L380)
290   (CONST 38)                          ; "RATFAC and RATWTLVL may not both be used at the same time."
292   (JMP L374)
295   L295
295   (CONST&PUSH 40)                     ; $RATWEIGHTS
297   (CALL1 41)                          ; KILL1
299   (JMP L380)
302   L302
302   (GETVALUE&PUSH 0)                   ; X
304   (JMPIFEQTO 35 L270)                 ; $RATVARS
307   (GETVALUE&PUSH 0)                   ; X
309   (JMPIFEQTO 36 L280)                 ; $RATFAC
312   (GETVALUE&PUSH 0)                   ; X
314   (JMPIFNOTEQTO 40 L351)              ; $RATWEIGHTS
317   (GETVALUE&PUSH 1)                   ; Y
319   (CALL1&JMPIFNOT 32 L60)             ; $LISTP
323   (GETVALUE 1)                        ; Y
325   (CDR)
326   (JMPIFNOT L295)
328   (CONST 42)                          ; $RATWEIGHT
330   L330
330   (SYMBOL-FUNCTION)
331   (PUSH)
332   (GETVALUE 1)                        ; Y
334   (CDR)
335   (APPLY 0)
337   (JMP L380)
339   L339
339   (GETVALUE&PUSH 0)                   ; X
341   (GETVALUE&PUSH 1)                   ; Y
343   (CALL2 8)                           ; MSETERR
345   (GETVALUE 1)                        ; Y
347   (JMPIFNOT1 L380)
349   (JMP L368)
351   L351
351   (GETVALUE&PUSH 0)                   ; X
353   (JMPIFNOTEQTO 37 L379)              ; $RATWTLVL
356   (GETVALUE 1)                        ; Y
358   (JMPIFNOT L364)
360   (PUSH)
361   (CALL1&JMPIFNOT 5 L339)             ; FIXNUMP
364   L364
364   (GETVALUE 1)                        ; Y
366   (JMPIFNOT1 L380)
368   L368
368   (GETVALUE 36)                       ; $RATFAC
370   (JMPIFNOT1 L380)
372   (CONST 43)                          ; "RATFAC and RATWTLVL may not both be used at the same time."
374   L374
374   (PUSH)
375   (CALL1 39)                          ; MERROR
377   (JMP L380)
379   L379
379   (NIL)
380   L380
380   (UNBIND 2)
382   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN NUMERSET (ASSIGN-VAR Y) ...)-58|
(CONST 0) = NUMERSET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUMERSET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUMERSET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUMERSET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUMERSET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUMERSET
8     (SKIP&RET 1)


Disassembly of function NUMERSET
(CONST 0) = Y
(CONST 1) = $FLOAT
(CONST 2) = MSET
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (Y)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Y
3     (CONST&PUSH 1)                      ; $FLOAT
4     (GETVALUE&PUSH 0)                   ; Y
6     (CALL2 2)                           ; MSET
8     (UNBIND1)
9     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN NEVERSET (X ASSIGN-VAL) ...)-59|
(CONST 0) = NEVERSET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEVERSET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEVERSET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEVERSET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEVERSET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEVERSET
8     (SKIP&RET 1)


Disassembly of function NEVERSET
(CONST 0) = X
(CONST 1) = MUNBINDP
(CONST 2) = "Improper value assignment to ~:M"
(CONST 3) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X MUNBINDP)
13 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; MUNBINDP
5     (JMPIF L15)
7     (CONST&PUSH 2)                      ; "Improper value assignment to ~:M"
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL2 3)                           ; MERROR
12    L12
12    (UNBIND1)
13    (SKIP&RET 3)
15    L15
15    (CONST 1)                           ; MUNBINDP
16    (JMP L12)


Disassembly of function #:|(DEFMFUN MMAPEV (L) ...)-60|
(CONST 0) = MMAPEV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MMAPEV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMAPEV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MMAPEV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MMAPEV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MMAPEV
8     (SKIP&RET 1)


Disassembly of function MMAPEV
(CONST 0) = "~:M called with fewer than two arguments."
(CONST 1) = MERROR
(CONST 2) = MEVAL
(CONST 3) = GETOPR
(CONST 4) = AUTOLDCHK
(CONST 5) = BADFUNCHK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
31 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CDR)
3     (JMPIF L11)
5     (CONST&PUSH 0)                      ; "~:M called with fewer than two arguments."
6     (LOAD 2)
7     (CAR)
8     (CAR&PUSH)
9     (CALL2 1)                           ; MERROR
11    L11
11    (LOAD 1)
12    (CDR)
13    (CAR&PUSH)
14    (CALL1&PUSH 2)                      ; MEVAL
16    (CALL1&PUSH 3)                      ; GETOPR
18    (LOAD&PUSH 0)
19    (CALL1 4)                           ; AUTOLDCHK
21    (LOAD 2)
22    (CDR)
23    (CAR&PUSH)
24    (LOAD&PUSH 1)
25    (NIL&PUSH)
26    (CALL 3 5)                          ; BADFUNCHK
29    (LOAD&PUSH 0)
30    (CONST&SYMBOL-FUNCTION&PUSH 2)      ; MEVAL
32    (LOAD 4)
33    (CDR)
34    (CDR&PUSH)
35    (CALLSR 0 22)                       ; MAPCAR
38    (CONS)
39    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $MAP (L) ...)-61-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $MAP (L) ...)-61-2-1|>
(CONST 1) = $MAP
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $MAP (L) ...)-61-2-1|>
1     (CONST&PUSH 1)                      ; $MAP
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $MAP (L) ...)-61-2-1|
(CONST 0) = MAP1
(CONST 1) = MMAPEV
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; MAP1
2     (LOAD&PUSH 2)
3     (CALL1 1)                           ; MMAPEV
5     (APPLY&SKIP&RET 0 2)


Disassembly of function #:|(DEFMFUN MAP1 N ...)-62|
(CONST 0) = MAP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAP1
8     (SKIP&RET 1)


Disassembly of function MAP1
(CONST 0) = NARG1
(CONST 1) = FORMAT1
(CONST 2) = SETARG1
(CONST 3) = MAPATOM
(CONST 4) = MOP
(CONST 5) = FLAG
(CONST 6) = 1
(CONST 7) = MAPLP
(CONST 8) = ALIKE1
(CONST 9) = MARGS
(CONST 10) = $MAPERROR
(CONST 11) = $MAPPRINT
(CONST 12) = "MAP is doing an APPLY.~%"
(CONST 13) = MTELL
(CONST 14) = FUNCER
(CONST 15) = 2
(CONST 16) = $MAP
(CONST 17) = IMPROPER-ARG-ERR
(CONST 18) = "Arguments to MAPL not uniform - cannot map."
(CONST 19) = MERROR
(CONST 20) = MMAPCAR
(CONST 21) = MCONS-OP-ARGS
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (MAPLP FLAG $MAPERROR $MAPPRINT)
writes special variable : (FLAG)
117 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (LOAD&PUSH 1)
5     (LOAD&PUSH 2)
6     (LOAD&PUSH 5)
7     (CALL2&PUSH 0)                      ; NARG1
9     (CALL1&PUSH 1)                      ; FORMAT1
11    (LOAD&PUSH 5)
12    (CALL&PUSH 3 2)                     ; SETARG1
15    (LOAD&PUSH 2)
16    (LOAD&PUSH 5)
17    (CALL2&PUSH 0)                      ; NARG1
19    (CALL1&JMPIF 3 L28)                 ; MAPATOM
22    (LOAD&PUSH 2)
23    (LOAD&PUSH 5)
24    (CALL2&PUSH 0)                      ; NARG1
26    (CALL1 4)                           ; MOP
28    L28
28    (PUSH)
29    (LOAD&PUSH 3)
30    (LOAD&PUSH 6)
31    (CALL2&PUSH 0)                      ; NARG1
33    (CALL1 3)                           ; MAPATOM
35    (BIND 5)                            ; FLAG
37    (PUSH-NIL 2)
39    (JMP L147)
42    L42
42    (GETVALUE 11)                       ; $MAPPRINT
44    (JMPIFNOT L49)
46    (CONST&PUSH 12)                     ; "MAP is doing an APPLY.~%"
47    (CALL1 13)                          ; MTELL
49    L49
49    (CONST&PUSH 6)                      ; 1
50    (LOAD&PUSH 11)
51    (CALL2&PUSH 0)                      ; NARG1
53    (LOAD&PUSH 2)
54    (CALL2 14)                          ; FUNCER
56    (JMP L171)
59    L59
59    (CONST&PUSH 15)                     ; 2
60    (LOAD&PUSH 11)
61    (CALL2&PUSH 0)                      ; NARG1
63    (CONST&PUSH 16)                     ; $MAP
64    (CALL2 17)                          ; IMPROPER-ARG-ERR
66    (JMP L171)
69    L69
69    (GETVALUE 10)                       ; $MAPERROR
71    (JMPIFNOT L42)
73    (LOAD&PUSH 8)
74    (CONST&PUSH 15)                     ; 2
75    (CALLSR&JMPIFNOT 1 45 L86)          ; =
79    (CONST&PUSH 15)                     ; 2
80    (LOAD&PUSH 11)
81    (CALL2&PUSH 0)                      ; NARG1
83    (CALL1&JMPIF 3 L59)                 ; MAPATOM
86    L86
86    (CONST&PUSH 18)                     ; "Arguments to MAPL not uniform - cannot map."
87    (CALL1 19)                          ; MERROR
89    (JMP L171)
92    L92
92    (LOAD&DEC&PUSH 7)
94    (LOAD&DEC&PUSH 8)
96    (LOAD&PUSH 12)
97    (CALL2&PUSH 0)                      ; NARG1
99    (CALL1&PUSH 1)                      ; FORMAT1
101   (GETVALUE 5)                        ; FLAG
103   (JMPIF L124)
105   (LOAD&PUSH 8)
106   (CALL1 3)                           ; MAPATOM
108   (SETVALUE 5)                        ; FLAG
110   (JMPIF L124)
112   (GETVALUE 7)                        ; MAPLP
114   (NOT)
115   (JMPIFNOT L124)
117   (LOAD&PUSH 8)
118   (CALL1&PUSH 4)                      ; MOP
120   (LOAD&PUSH 8)
121   (CALL2 8)                           ; ALIKE1
123   (NOT)
124   L124
124   (PUSH)
125   (LOAD&PUSH 9)
126   (LOAD 5)
127   (CONS&PUSH)
128   (GETVALUE 5)                        ; FLAG
130   (JMPIF L137)
132   (LOAD&PUSH 10)
133   (CALL1&PUSH 9)                      ; MARGS
135   (LOAD 5)
136   (CONS)
137   L137
137   (STORE 4)
138   (POP&STORE 4)
140   (POP)
141   (SETVALUE 5)                        ; FLAG
143   (POP&STORE 7)
145   (POP&STORE 7)
147   L147
147   (LOAD&PUSH 7)
148   (CONST&PUSH 6)                      ; 1
149   (CALLSR&JMPIFNOT 1 45 L92)          ; =
153   (GETVALUE 5)                        ; FLAG
155   (JMPIF L69)
158   (LOAD&PUSH 5)
159   (CONST&SYMBOL-FUNCTION&PUSH 20)     ; MMAPCAR
161   (CONST&PUSH 6)                      ; 1
162   (LOAD&PUSH 13)
163   (CALL2&PUSH 0)                      ; NARG1
165   (LOAD 3)
166   (CONS)
167   (APPLY&PUSH 0)
169   (CALL2 21)                          ; MCONS-OP-ARGS
171   L171
171   (SKIP 2)
173   (UNBIND1)
174   (SKIP&RET 6)


Disassembly of function #:|(DEFMSPEC $MAPLIST (L) ...)-63-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $MAPLIST (L) ...)-63-2-1|>
(CONST 1) = $MAPLIST
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $MAPLIST (L) ...)-63-2-1|>
1     (CONST&PUSH 1)                      ; $MAPLIST
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $MAPLIST (L) ...)-63-2-1|
(CONST 0) = MAPLP
(CONST 1) = MAP1
(CONST 2) = MMAPEV
(CONST 3) = (MLIST)
(CONST 4) = MLIST
(CONST 5) = (MLIST)
(CONST 6) = MARGS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
29 byte-code instructions:
0     (T)
1     (BIND 0)                            ; MAPLP
3     (NIL&PUSH)
4     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; MAP1
6     (LOAD&PUSH 6)
7     (CALL1 2)                           ; MMAPEV
9     (APPLY 0)
11    (STORE 0)
12    (JMPIFATOM L30)
14    (LOAD 0)
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 4 L36)                   ; MLIST
20    (CONST&PUSH 5)                      ; (MLIST)
21    (LOAD&PUSH 1)
22    (CALL1 6)                           ; MARGS
24    (CONS)
25    L25
25    (SKIP 1)
27    (UNBIND1)
28    (SKIP&RET 2)
30    L30
30    (CONST&PUSH 3)                      ; (MLIST)
31    (LOAD&PUSH 1)
32    (LIST 2)
34    (JMP L25)
36    L36
36    (LOAD 0)
37    (JMP L25)


Disassembly of function #:|(DEFMFUN MMAPCAR N ...)-64|
(CONST 0) = MMAPCAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MMAPCAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMAPCAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MMAPCAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MMAPCAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MMAPCAR
8     (SKIP&RET 1)


Disassembly of function MMAPCAR
(CONST 0) = 1
(CONST 1) = NARG1
(CONST 2) = 2
(CONST 3) = $MAPERROR
(CONST 4) = "Arguments to MAPL are not of the same length."
(CONST 5) = MERROR
(CONST 6) = $MAPPRINT
(CONST 7) = "MAP is truncating.~%"
(CONST 8) = MTELL
(CONST 9) = SETARG1
(CONST 10) = FUNCER
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: ($MAPPRINT $MAPERROR)
79 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (PUSH-NIL 2)
5     L5
5     (LOAD&PUSH 2)
6     (JMP L87)
9     L9
9     (CONST&PUSH 2)                      ; 2
10    (JMP L19)
12    L12
12    (SKIP 2)
14    (JMP L117)
17    L17
17    (LOAD&INC&STORE 0)
19    L19
19    (LOAD&PUSH 0)
20    (LOAD&PUSH 5)
21    (CALLSR&JMPIF 1 45 L12)             ; =
25    (LOAD&PUSH 0)
26    (LOAD&PUSH 7)
27    (CALL2&JMPIFNOT 1 L17)              ; NARG1
30    (SKIP 1)
32    (GETVALUE 3)                        ; $MAPERROR
34    (JMPIFNOT L110)
37    L37
37    (CONST&PUSH 4)                      ; "Arguments to MAPL are not of the same length."
38    (CALL1 5)                           ; MERROR
40    (GETVALUE 6)                        ; $MAPPRINT
42    (JMPIFNOT L115)
45    L45
45    (CONST&PUSH 7)                      ; "MAP is truncating.~%"
46    (CALL1 8)                           ; MTELL
48    (SKIP 1)
50    (JMP L117)
53    L53
53    (SKIP 1)
55    (CONST&PUSH 0)                      ; 1
56    (LOAD&PUSH 5)
57    (CALL2&PUSH 1)                      ; NARG1
59    (LOAD&PUSH 1)
60    (CALL2&PUSH 10)                     ; FUNCER
62    (LOAD&CONS&STORE 1)
64    (NIL&STORE 0)
66    (JMP L5)
68    L68
68    (LOAD&PUSH 0)
69    (LOAD&PUSH 6)
70    (CALL2 1)                           ; NARG1
72    (CAR&PUSH)
73    (LOAD&CONS&STORE 1)
75    (LOAD&PUSH 0)
76    (LOAD&PUSH 1)
77    (LOAD&PUSH 7)
78    (CALL2 1)                           ; NARG1
80    (CDR&PUSH)
81    (LOAD&PUSH 7)
82    (CALL 3 9)                          ; SETARG1
85    (LOAD&DEC&STORE 0)
87    L87
87    (LOAD&PUSH 0)
88    (CONST&PUSH 0)                      ; 1
89    (CALLSR&JMPIF 1 45 L53)             ; =
93    (LOAD&PUSH 0)
94    (LOAD&PUSH 6)
95    (CALL2&JMPIF 1 L68)                 ; NARG1
98    (LOAD&PUSH 0)
99    (LOAD&PUSH 4)
100   (CALLSR&JMPIFNOT 1 47 L9)           ; <
105   (GETVALUE 3)                        ; $MAPERROR
107   (JMPIF L37)
110   L110
110   (GETVALUE 6)                        ; $MAPPRINT
112   (JMPIF L45)
115   L115
115   (SKIP 1)
117   L117
117   (LOAD&PUSH 1)
118   (CALLS2 73)                         ; NREVERSE
120   (SKIP&RET 5)


Disassembly of function #:|(DEFUN MAPATOM (X) ...)-65|
(CONST 0) = MAPATOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAPATOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAPATOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAPATOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAPATOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAPATOM
8     (SKIP&RET 1)


Disassembly of function MAPATOM
(CONST 0) = X
(CONST 1) = MNUMP
(CONST 2) = $SUBVARP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 6)                          ; SYMBOLP
7     (JMPIF1 L19)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 1)                           ; MNUMP
13    (JMPIF1 L19)
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1 2)                           ; $SUBVARP
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $MAPATOM (X) ...)-66|
(CONST 0) = $MAPATOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MAPATOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAPATOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MAPATOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MAPATOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MAPATOM
8     (SKIP&RET 1)


Disassembly of function $MAPATOM
(CONST 0) = X
(CONST 1) = SPECREPCHECK
(CONST 2) = MAPATOM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&PUSH 1)                      ; SPECREPCHECK
7     (CALL1 2)                           ; MAPATOM
9     (JMPIFNOT1 L12)
11    (T)
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $FULLMAP (L) ...)-67-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $FULLMAP (L) ...)-67-2-1|>
(CONST 1) = $FULLMAP
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $FULLMAP (L) ...)-67-2-1|>
1     (CONST&PUSH 1)                      ; $FULLMAP
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $FULLMAP (L) ...)-67-2-1|
(CONST 0) = MMAPEV
(CONST 1) = FMAP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; MMAPEV
3     (STORE 1)
4     (CAR&PUSH)
5     (LOAD&CDR&PUSH 2)
7     (NIL&PUSH)
8     (CALL 3 1)                          ; FMAP1
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FMAP1 (FN ARGL FMAPCAARL) ...)-68|
(CONST 0) = FMAP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FMAP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FMAP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FMAP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FMAP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FMAP1
8     (SKIP&RET 1)


Disassembly of function FMAP1
(CONST 0) = FORMAT1
(CONST 1) = MAPATOM
(CONST 2) = MOP
(CONST 3) = FMAPLVL
(CONST 4) = ALIKE1
(CONST 5) = $MAPERROR
(CONST 6) = "Incorrect call to FULLMAP."
(CONST 7) = MERROR
(CONST 8) = $MAPPRINT
(CONST 9) = "FULLMAP is doing an APPLY.~%"
(CONST 10) = MTELL
(CONST 11) = FUNCER
(CONST 12) = MARGS
(CONST 13) = MEMQ
(CONST 14) = "FULLMAP found arguments with incompatible structure."
(CONST 15) = "FULLMAP is truncating.~%"
(CONST 16) = "FULLMAP found arguments with incompatible structure."
(CONST 17) = "FULLMAP is truncating.~%"
(CONST 18) = MCONS-OP-ARGS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($MAPPRINT $MAPERROR FMAPLVL)
226 byte-code instructions:
0     L0
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; FORMAT1
2     (LOAD&PUSH 3)
3     (CALLSR&STORE 0 22 2)               ; MAPCAR
7     (CAR&PUSH)
8     (CALL1&JMPIF 1 L15)                 ; MAPATOM
11    (LOAD&CAR&PUSH 2)
13    (CALL1 2)                           ; MOP
15    L15
15    (PUSH)
16    (GETVALUE&PUSH 3)                   ; FMAPLVL
18    (CALLS2 151)                        ; 1-
20    (BIND 3)                            ; FMAPLVL
22    (LOAD&PUSH 6)
23    (PUSH-NIL 2)
25    (LOAD&JMPIFNOT 2 L73)
28    L28
28    (LOAD&CAR&STORE 2 1)
31    (PUSH)
32    (CALL1&JMPIF 1 L51)                 ; MAPATOM
35    (LOAD&PUSH 6)
36    (LOAD&PUSH 2)
37    (CALL1&PUSH 2)                      ; MOP
39    (CALL2&JMPIFNOT 4 L51)              ; ALIKE1
42    (LOAD&JMPIFNOT 8 L58)
45    (LOAD 1)
46    (CAR)
47    (CAR&PUSH)
48    (LOAD 9)
49    (JMPIFEQ L58)
51    L51
51    (GETVALUE 5)                        ; $MAPERROR
53    (JMPIFNOT L87)
55    (CONST&PUSH 6)                      ; "Incorrect call to FULLMAP."
56    (CALL1 7)                           ; MERROR
58    L58
58    (LOAD&CDR&PUSH 2)
60    (LOAD&CAR&PUSH 3)
62    (CALL1&PUSH 12)                     ; MARGS
64    (LOAD&CONS&STORE 1)
66    (NIL&STORE 2)
68    (POP&STORE 2)
70    (LOAD&JMPIF 2 L28)
73    L73
73    (PUSH-NIL 3)
75    (LOAD&PUSH 3)
76    (PUSH-NIL 2)
78    (LOAD&PUSH 6)
79    (CALL2&JMPIFNOT 13 L153)            ; MEMQ
83    (LOAD&PUSH 5)
84    (NIL&PUSH)
85    (JMP L133)
87    L87
87    (GETVALUE 8)                        ; $MAPPRINT
89    (JMPIFNOT L94)
91    (CONST&PUSH 9)                      ; "FULLMAP is doing an APPLY.~%"
92    (CALL1 10)                          ; MTELL
94    L94
94    (LOAD&PUSH 10)
95    (LOAD&PUSH 10)
96    (CALL2 11)                          ; FUNCER
98    (SKIP 3)
100   (JMP L332)
103   L103
103   (SKIP 2)
105   (T)
106   (JMP L153)
108   L108
108   (CONST&PUSH 14)                     ; "FULLMAP found arguments with incompatible structure."
109   (CALL1 7)                           ; MERROR
111   (GETVALUE 8)                        ; $MAPPRINT
113   (JMPIFNOT L152)
115   L115
115   (CONST&PUSH 15)                     ; "FULLMAP is truncating.~%"
116   (CALL1 10)                          ; MTELL
118   (T)
119   (JMP L153)
121   L121
121   (LOAD 2)
122   (CAR)
123   (CAR&PUSH)
124   (CALL1 1)                           ; MAPATOM
126   (STORE 1)
127   (JMPIFNOT L166)
129   (JMP L171)
131   L131
131   (LOAD&CDR&STORE 1)
133   L133
133   (LOAD&PUSH 1)
134   (CALLS1&JMPIF 146 L103)             ; ENDP
137   (LOAD&CAR&STORE 1 0)
140   (JMPIFNOT L131)
142   (SKIP 2)
144   (GETVALUE 5)                        ; $MAPERROR
146   (JMPIF L108)
148   (GETVALUE 8)                        ; $MAPPRINT
150   (JMPIF L115)
152   L152
152   (T)
153   L153
153   (PUSH)
154   (LOAD&JMPIF 0 L324)
158   L158
158   (GETVALUE&PUSH 3)                   ; FMAPLVL
160   (CALLS2&JMPIFNOT 145 L121)          ; ZEROP
163   (STORE 1)
164   (JMPIF L171)
166   L166
166   (LOAD 2)
167   (CAR)
168   (CAR&PUSH)
169   (CALL1 2)                           ; MOP
171   L171
171   (PUSH)
172   (LOAD&PUSH 3)
173   (NIL&PUSH)
174   (LOAD&JMPIFNOT 1 L248)
178   L178
178   (LOAD 1)
179   (CAR)
180   (CAR)
181   (STORE 0)
182   (LOAD&JMPIF 4 L214)
185   (LOAD&PUSH 0)
186   (CALL1&JMPIF 1 L208)                ; MAPATOM
189   (LOAD&PUSH 2)
190   (LOAD&PUSH 1)
191   (CALL1&PUSH 2)                      ; MOP
193   (CALL2 4)                           ; ALIKE1
195   (NOT)
196   (JMPIF L208)
198   (LOAD&JMPIFNOT 17 L208)
201   (LOAD 0)
202   (CAR)
203   (CAR&PUSH)
204   (LOAD 18)
206   (EQ)
207   (NOT)
208   L208
208   (STORE 4)
209   (LOAD&JMPIFNOT 3 L217)
212   (JMP L222)
214   L214
214   (LOAD&JMPIF 3 L222)
217   L217
217   (LOAD 1)
218   (CAR)
219   (CDR)
220   (NOT)
221   (STORE 3)
222   L222
222   (LOAD&PUSH 0)
223   (NIL)
224   (CONS&PUSH)
225   (LOAD&PUSH 8)
226   (CALLSR&STORE 2 35 7)               ; NCONC
230   (LOAD&PUSH 6)
231   (LOAD 2)
232   (CAR)
233   (CDR&PUSH)
234   (NIL)
235   (CONS&PUSH)
236   (CALLSR&STORE 2 35 6)               ; NCONC
240   (LOAD&CDR&STORE 1)
242   (NIL&STORE 0)
244   (LOAD&JMPIF 1 L178)
248   L248
248   (LOAD&JMPIFNOT 3 L299)
251   (LOAD&PUSH 6)
252   (NIL&PUSH)
253   (JMP L277)
255   L255
255   (CONST&PUSH 16)                     ; "FULLMAP found arguments with incompatible structure."
256   (CALL1 7)                           ; MERROR
258   (GETVALUE 8)                        ; $MAPPRINT
260   (JMPIFNOT L299)
262   (JMP L296)
264   L264
264   (SKIP 5)
266   (LOAD&JMPIFNOT 1 L304)
269   L269
269   (LOAD&PUSH 16)
270   (LOAD&PUSH 5)
271   (CALL2 11)                          ; FUNCER
273   (JMP L310)
275   L275
275   (LOAD&CDR&STORE 1)
277   L277
277   (LOAD&PUSH 1)
278   (CALLS1&JMPIF 146 L264)             ; ENDP
281   (LOAD&CAR&STORE 1 0)
284   (JMPIFNOT L275)
286   (SKIP 2)
288   (GETVALUE 5)                        ; $MAPERROR
290   (JMPIF L255)
292   (GETVALUE 8)                        ; $MAPPRINT
294   (JMPIFNOT L299)
296   L296
296   (CONST&PUSH 17)                     ; "FULLMAP is truncating.~%"
297   (CALL1 10)                          ; MTELL
299   L299
299   (SKIP 3)
301   (LOAD&JMPIF 1 L269)
304   L304
304   (LOAD&PUSH 16)
305   (LOAD&PUSH 5)
306   (LOAD&PUSH 16)
307   (JSR L0)
310   L310
310   (PUSH)
311   (LOAD&CONS&STORE 5)
313   (NIL&STORE 4)
315   (LOAD 3)
316   (STORE 2)
317   (NIL&STORE 1)
319   (STORE 3)
320   (LOAD&JMPIFNOT 0 L158)
324   L324
324   (LOAD&PUSH 12)
325   (LOAD&PUSH 6)
326   (CALLS2&PUSH 73)                    ; NREVERSE
328   (CALL2 18)                          ; MCONS-OP-ARGS
330   (SKIP 9)
332   L332
332   (UNBIND1)
333   (SKIP&RET 5)


Disassembly of function #:|(DEFMSPEC $MATRIXMAP (L) ...)-69-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $MATRIXMAP (L) ...)-69-2-1|>
(CONST 1) = $MATRIXMAP
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $MATRIXMAP (L) ...)-69-2-1|>
1     (CONST&PUSH 1)                      ; $MATRIXMAP
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $MATRIXMAP (L) ...)-69-2-1|
(CONST 0) = 2
(CONST 1) = FMAPLVL
(CONST 2) = FMAPL1
(CONST 3) = MMAPEV
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST 0)                           ; 2
1     (BIND 1)                            ; FMAPLVL
3     (CONST&SYMBOL-FUNCTION&PUSH 2)      ; FMAPL1
5     (LOAD&PUSH 5)
6     (CALL1 3)                           ; MMAPEV
8     (APPLY 0)
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $FULLMAPL (L) ...)-70-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $FULLMAPL (L) ...)-70-2-1|>
(CONST 1) = $FULLMAPL
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $FULLMAPL (L) ...)-70-2-1|>
1     (CONST&PUSH 1)                      ; $FULLMAPL
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $FULLMAPL (L) ...)-70-2-1|
(CONST 0) = FMAPL1
(CONST 1) = MMAPEV
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; FMAPL1
2     (LOAD&PUSH 2)
3     (CALL1 1)                           ; MMAPEV
5     (APPLY&SKIP&RET 0 2)


Disassembly of function #:|(DEFMFUN FMAPL1 N ...)-71|
(CONST 0) = FMAPL1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FMAPL1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FMAPL1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FMAPL1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FMAPL1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FMAPL1
8     (SKIP&RET 1)


Disassembly of function FMAPL1
(CONST 0) = (MLIST)
(CONST 1) = 1
(CONST 2) = NARG1
(CONST 3) = LISTIFY1
(CONST 4) = MXORLISTP
(CONST 5) = "Argument to FULLMAPL is not a list or matrix."
(CONST 6) = MERROR
(CONST 7) = $MATRIX
(CONST 8) = ($MATRIX)
(CONST 9) = (MLIST SIMP)
(CONST 10) = MLIST
(CONST 11) = FMAP1
(CONST 12) = $LISTP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
69 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; (MLIST)
4     (NIL&PUSH)
5     (CONST&PUSH 1)                      ; 1
6     (LOAD&PUSH 5)
7     (CALL2&PUSH 2)                      ; NARG1
9     (NIL&PUSH)
10    (LOAD&PUSH 4)
11    (LOAD&PUSH 7)
12    (CALL2 3)                           ; LISTIFY1
14    (CDR&PUSH)
15    (JMP L50)
17    L17
17    (CONST&PUSH 5)                      ; "Argument to FULLMAPL is not a list or matrix."
18    (CALL1 6)                           ; MERROR
20    (JMP L43)
22    L22
22    (CONST 8)                           ; ($MATRIX)
23    (STORE 5)
24    (CONST&PUSH 9)                      ; (MLIST SIMP)
25    (LOAD 1)
26    (CDR)
27    (CONS)
28    (JMP L43)
30    L30
30    (LOAD&CAR&PUSH 0)
32    (LOAD&PUSH 0)
33    (CALL1&JMPIFNOT 4 L17)              ; MXORLISTP
36    (LOAD 0)
37    (CAR)
38    (CAR&PUSH)
39    (JMPIFEQTO 7 L22)                   ; $MATRIX
42    (LOAD 0)
43    L43
43    (PUSH)
44    (LOAD&CONS&STORE 2)
46    (SKIP 1)
48    (LOAD&CDR&STORE 0)
50    L50
50    (LOAD&PUSH 0)
51    (CALLS1&JMPIFNOT 146 L30)           ; ENDP
54    (SKIP 1)
56    (LOAD&PUSH 0)
57    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
60    (CONST&PUSH 10)                     ; MLIST
61    (CALL 3 11)                         ; FMAP1
64    (STORE 0)
65    (CDR&PUSH)
66    (NIL&PUSH)
67    (JMP L83)
69    L69
69    (SKIP 2)
71    (POP)
72    (SKIP&RET 4)
74    L74
74    (LOAD&CAR&STORE 1 0)
77    (PUSH)
78    (CALL1&JMPIFNOT 12 L69)             ; $LISTP
81    (LOAD&CDR&STORE 1)
83    L83
83    (LOAD&PUSH 1)
84    (CALLS1&JMPIFNOT 146 L74)           ; ENDP
87    (SKIP 2)
89    (LOAD&PUSH 1)
90    (LOAD 1)
91    (CDR)
92    (CONS)
93    (SKIP&RET 5)


Disassembly of function #:|(DEFMSPEC $OUTERMAP (L) ...)-72-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $OUTERMAP (L) ...)-72-2-1|>
(CONST 1) = $OUTERMAP
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $OUTERMAP (L) ...)-72-2-1|>
1     (CONST&PUSH 1)                      ; $OUTERMAP
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $OUTERMAP (L) ...)-72-2-1|
(CONST 0) = 3
(CONST 1) = FMAPL1
(CONST 2) = OUTERMAP1
(CONST 3) = MMAPEV
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 45 L17)             ; =
8     (CONST&SYMBOL-FUNCTION 2)           ; OUTERMAP1
10    L10
10    (PUSH)
11    (LOAD&PUSH 2)
12    (CALL1 3)                           ; MMAPEV
14    (APPLY&SKIP&RET 0 2)
17    L17
17    (CONST&SYMBOL-FUNCTION 1)           ; FMAPL1
19    (JMP L10)


Disassembly of function #:|(DEFMFUN OUTERMAP1 N ...)-73|
(CONST 0) = OUTERMAP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OUTERMAP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OUTERMAP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OUTERMAP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OUTERMAP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OUTERMAP1
8     (SKIP&RET 1)


Disassembly of function OUTERMAP1
(CONST 0) = OUTARGS1
(CONST 1) = OUTARGS2
(CONST 2) = 2
(CONST 3) = NARG1
(CONST 4) = MXORLISTP
(CONST 5) = 1
(CONST 6) = LISTIFY1
(CONST 7) = OUTERMAP2
(CONST 8) = FMAPL1
(CONST 9) = 3
(CONST 10) = FUNCER
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
writes special variables : (OUTARGS2 OUTARGS1)
76 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; OUTARGS1
6     (NIL)
7     (BIND 1)                            ; OUTARGS2
9     (CONST&PUSH 2)                      ; 2
10    (LOAD&PUSH 9)
11    (CALL2&PUSH 3)                      ; NARG1
13    (CALL1&JMPIF 4 L20)                 ; MXORLISTP
16    (CONST&PUSH 9)                      ; 3
17    (JMP L91)
20    L20
20    (CONST&PUSH 5)                      ; 1
21    (LOAD&PUSH 9)
22    (CALL2&PUSH 3)                      ; NARG1
24    (NIL)
25    (CONS)
26    (SETVALUE 0)                        ; OUTARGS1
28    (CONST&PUSH 2)                      ; 2
29    (LOAD&PUSH 7)
30    (CALLSR&PUSH 1 54)                  ; -
33    (LOAD&PUSH 9)
34    (CALL2 6)                           ; LISTIFY1
36    (SETVALUE 1)                        ; OUTARGS2
38    (CONST&PUSH 7)                      ; OUTERMAP2
39    (CONST&PUSH 2)                      ; 2
40    (LOAD&PUSH 10)
41    (CALL2&PUSH 3)                      ; NARG1
43    (CALL2 8)                           ; FMAPL1
45    (JMP L113)
48    L48
48    (LOAD&DEC&PUSH 0)
50    (LOAD&PUSH 10)
51    (CALL2 6)                           ; LISTIFY1
53    (SETVALUE 0)                        ; OUTARGS1
55    (LOAD&PUSH 0)
56    (LOAD&PUSH 8)
57    (CALLSR&JMPIFNOT 1 47 L69)          ; <
61    (LOAD&PUSH 0)
62    (LOAD&PUSH 8)
63    (CALLSR&PUSH 1 54)                  ; -
66    (LOAD&PUSH 10)
67    (CALL2 6)                           ; LISTIFY1
69    L69
69    (SETVALUE 1)                        ; OUTARGS2
71    (CONST&PUSH 7)                      ; OUTERMAP2
72    (LOAD&PUSH 1)
73    (LOAD&PUSH 11)
74    (CALL2&PUSH 3)                      ; NARG1
76    (CALL2 8)                           ; FMAPL1
78    (SKIP 1)
80    (JMP L113)
82    L82
82    (LOAD&PUSH 0)
83    (LOAD&PUSH 10)
84    (CALL2&PUSH 3)                      ; NARG1
86    (CALL1&JMPIF 4 L48)                 ; MXORLISTP
89    (LOAD&INC&STORE 0)
91    L91
91    (LOAD&PUSH 0)
92    (LOAD&PUSH 8)
93    (CALLSR&JMPIFNOT 1 48 L82)          ; >
97    (CONST&PUSH 5)                      ; 1
98    (LOAD&PUSH 10)
99    (CALL2&PUSH 3)                      ; NARG1
101   (CONST&PUSH 5)                      ; 1
102   (LOAD&PUSH 9)
103   (CALLSR&PUSH 1 54)                  ; -
106   (LOAD&PUSH 11)
107   (CALL2&PUSH 6)                      ; LISTIFY1
109   (CALL2 10)                          ; FUNCER
111   (SKIP 1)
113   L113
113   (UNBIND 2)
115   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN OUTERMAP2 N ...)-74|
(CONST 0) = OUTERMAP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OUTERMAP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OUTERMAP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OUTERMAP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OUTERMAP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OUTERMAP2
8     (SKIP&RET 1)


Disassembly of function OUTERMAP2
(CONST 0) = OUTERMAP1
(CONST 1) = OUTARGS1
(CONST 2) = 1
(CONST 3) = LISTIFY1
(CONST 4) = OUTARGS2
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (OUTARGS2 OUTARGS1)
16 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CALLS2 145)                        ; ZEROP
6     (NOT)
7     (JMPIFNOT1 L25)
9     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; OUTERMAP1
11    (GETVALUE&PUSH 1)                   ; OUTARGS1
13    (CONST&PUSH 2)                      ; 1
14    (LOAD&PUSH 5)
15    (CALL2&PUSH 3)                      ; LISTIFY1
17    (GETVALUE&PUSH 4)                   ; OUTARGS2
19    (CALLSR 3 34)                       ; APPEND
22    (APPLY&SKIP&RET 0 3)
25    L25
25    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN FUNCER (FN ARGS) ...)-75|
(CONST 0) = FUNCER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FUNCER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FUNCER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FUNCER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FUNCER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FUNCER
8     (SKIP&RET 1)


Disassembly of function FUNCER
(CONST 0) = OPEXPRP
(CONST 1) = (MPLUS MTIMES MEXPT MNCTIMES)
(CONST 2) = MEMQ
(CONST 3) = SIMPLIFY
(CONST 4) = (OUTERMAP2 CONSTFUN)
(CONST 5) = $TRANSRUN
(CONST 6) = TRANSLATED
(CONST 7) = LOCAL-FUN
(CONST 8) = MGET
(CONST 9) = MAPPLY1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRANSRUN OPEXPRP)
45 byte-code instructions:
0     (GETVALUE 0)                        ; OPEXPRP
2     (JMPIF L9)
4     (LOAD&PUSH 2)
5     (CONST&PUSH 1)                      ; (MPLUS MTIMES MEXPT MNCTIMES)
6     (CALL2&JMPIF 2 L52)                 ; MEMQ
9     L9
9     (LOAD&PUSH 2)
10    (CONST&PUSH 4)                      ; (OUTERMAP2 CONSTFUN)
11    (CALL2&JMPIF 2 L61)                 ; MEMQ
14    (GETVALUE 5)                        ; $TRANSRUN
16    (JMPIFNOT L38)
18    (LOAD&PUSH 2)
19    (CALLS2&JMPIFNOT 6 L38)             ; SYMBOLP
22    (LOAD&PUSH 2)
23    (CONST&PUSH 6)                      ; TRANSLATED
24    (PUSH-UNBOUND 1)
26    (CALLS2&JMPIFNOT 132 L38)           ; GET
29    (LOAD&PUSH 2)
30    (CONST&PUSH 7)                      ; LOCAL-FUN
31    (CALL2&JMPIF 8 L38)                 ; MGET
34    (LOAD&PUSH 2)
35    (CALLS1&JMPIF 80 L61)               ; FBOUNDP
38    L38
38    (LOAD&PUSH 2)
39    (CONST&SYMBOL-FUNCTION&PUSH 3)      ; SIMPLIFY
41    (LOAD&PUSH 3)
42    (CALLSR&PUSH 0 22)                  ; MAPCAR
45    (LOAD&PUSH 4)
46    (NIL&PUSH)
47    (CALL 4 9)                          ; MAPPLY1
50    (SKIP&RET 3)
52    L52
52    (LOAD&PUSH 2)
53    (NIL)
54    (CONS&PUSH)
55    (LOAD 2)
56    (CONS&PUSH)
57    (CALL1 3)                           ; SIMPLIFY
59    (SKIP&RET 3)
61    L61
61    (LOAD&PUSH 2)
62    (CONST&SYMBOL-FUNCTION&PUSH 3)      ; SIMPLIFY
64    (LOAD&PUSH 3)
65    (CALLSR 0 22)                       ; MAPCAR
68    (APPLY&SKIP&RET 0 3)


Disassembly of function #:|(DEFMSPEC $QPUT (L) ...)-76-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $QPUT (L) ...)-76-2-1|>
(CONST 1) = $QPUT
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $QPUT (L) ...)-76-2-1|>
1     (CONST&PUSH 1)                      ; $QPUT
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $QPUT (L) ...)-76-2-1|
(CONST 0) = 3
(CONST 1) = $QPUT
(CONST 2) = WNA-ERR
(CONST 3) = $PUT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (PUSH)
3     (CALLS2&PUSH 71)                    ; LENGTH
5     (CONST&PUSH 0)                      ; 3
6     (CALLSR&JMPIF 1 45 L13)             ; =
10    (CONST&PUSH 1)                      ; $QPUT
11    (CALL1 2)                           ; WNA-ERR
13    L13
13    (LOAD&CAR&PUSH 1)
15    (LOAD 2)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD 3)
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (CALL 3 3)                          ; $PUT
25    (SKIP&RET 2)

WARNING in (DEFMFUN $GET (ATOM IND) ...)-77 in line 1508 :
Function $GET
 was already defined in file #P"/cygdrive/e/temp/maxima/src/maxmac.lisp" in lines 576..580

Disassembly of function #:|(DEFMFUN $GET (ATOM IND) ...)-77|
(CONST 0) = $GET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GET
8     (SKIP&RET 1)


Disassembly of function $GET
(CONST 0) = $GET
(CONST 1) = PROP1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GET
1     (LOAD&PUSH 3)
2     (NIL&PUSH)
3     (LOAD&PUSH 4)
4     (CALL 4 1)                          ; PROP1
7     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $REM (ATOM IND) ...)-78|
(CONST 0) = $REM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $REM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $REM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $REM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $REM
8     (SKIP&RET 1)


Disassembly of function $REM
(CONST 0) = $REM
(CONST 1) = PROP1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REM
1     (LOAD&PUSH 3)
2     (NIL&PUSH)
3     (LOAD&PUSH 4)
4     (CALL 4 1)                          ; PROP1
7     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $PUT (ATOM VAL IND) ...)-79|
(CONST 0) = $PUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PUT
8     (SKIP&RET 1)


Disassembly of function $PUT
(CONST 0) = $PUT
(CONST 1) = PROP1
(CONST 2) = $PROPS
(CONST 3) = ADD2LNC
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PUT
1     (LOAD&PUSH 4)
2     (LOAD&PUSH 4)
3     (LOAD&PUSH 4)
4     (CALL&PUSH 4 1)                     ; PROP1
7     (LOAD&PUSH 4)
8     (GETVALUE&PUSH 2)                   ; $PROPS
10    (CALL2 3)                           ; ADD2LNC
12    (POP)
13    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PROP1 (FUN ATOM VAL ...) ...)-80|
(CONST 0) = PROP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PROP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PROP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PROP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PROP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PROP1
8     (SKIP&RET 1)


Disassembly of function PROP1
(CONST 0) = NONSYMCHK
(CONST 1) = $PROPS
(CONST 2) = MGET
(CONST 3) = $GET
(CONST 4) = $REM
(CONST 5) = ZL-REMPROP
(CONST 6) = $DONE
(CONST 7) = MPUTPROP
(CONST 8) = PUTPROP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
48 byte-code instructions:
0     (LOAD&PUSH 3)
1     (LOAD&PUSH 5)
2     (CALL2 0)                           ; NONSYMCHK
4     (LOAD&PUSH 1)
5     (LOAD&PUSH 5)
6     (CALL2 0)                           ; NONSYMCHK
8     (LOAD&PUSH 3)
9     (CONST&PUSH 1)                      ; $PROPS
10    (CALL2&PUSH 2)                      ; MGET
12    (LOAD&PUSH 5)
13    (JMPIFEQTO 3 L31)                   ; $GET
16    (LOAD&PUSH 5)
17    (JMPIFEQTO 4 L42)                   ; $REM
20    (LOAD&JMPIFNOT 0 L54)
23    (LOAD&PUSH 0)
24    (LOAD&PUSH 4)
25    (LOAD&PUSH 4)
26    (CALL 3 8)                          ; PUTPROP
29    (SKIP&RET 6)
31    L31
31    (LOAD 0)
32    (JMPIFNOT1 L67)
34    (CDR&PUSH)
35    (LOAD&PUSH 3)
36    (PUSH-UNBOUND 1)
38    (CALLS2 133)                        ; GETF
40    (SKIP&RET 6)
42    L42
42    (LOAD 0)
43    (JMPIFNOT1 L67)
45    (PUSH)
46    (LOAD&PUSH 3)
47    (CALL2 5)                           ; ZL-REMPROP
49    (JMPIFNOT1 L67)
51    (CONST 6)                           ; $DONE
52    (SKIP&RET 6)
54    L54
54    (LOAD&PUSH 4)
55    (NIL&PUSH)
56    (LOAD&PUSH 4)
57    (LOAD&PUSH 6)
58    (LIST&PUSH 3)
60    (CONST&PUSH 1)                      ; $PROPS
61    (CALL 3 7)                          ; MPUTPROP
64    (LOAD 3)
65    (SKIP&RET 6)
67    L67
67    (SKIP&RET 6)


Disassembly of function #:|(DEFMSPEC $DECLARE (L) ...)-81-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $DECLARE (L) ...)-81-2-1|>
(CONST 1) = $DECLARE
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $DECLARE (L) ...)-81-2-1|>
1     (CONST&PUSH 1)                      ; $DECLARE
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DECLARE (L) ...)-81-2-1|
(CONST 0) = "DECLARE takes an even number of arguments."
(CONST 1) = MERROR
(CONST 2) = FLAG
(CONST 3) = $LISTP
(CONST 4) = ($DECLARE)
(CONST 5) = MEVAL
(CONST 6) = $DECLARE
(CONST 7) = NONSYMCHK
(CONST 8) = DECLSETUP
(CONST 9) = ($EVFUN $EVFLAG $SPECIAL $NONARRAY $BINDTEST)
(CONST 10) = MEMQ
(CONST 11) = STRIPDOLLAR
(CONST 12) = DECLARE1
(CONST 13) = $NOUN
(CONST 14) = VAR
(CONST 15) = GETOPR
(CONST 16) = $NOUNIFY
(CONST 17) = ALIAS
(CONST 18) = ($CONSTANT $NONSCALAR $SCALAR $MAINVAR)
(CONST 19) = OPERS
(CONST 20) = $FEATURES
(CONST 21) = KIND
(CONST 22) = $FEATURE
(CONST 23) = ADD2LNC
(CONST 24) = $ALPHABETIC
(CONST 25) = "Unknown property to DECLARE: ~:M"
(CONST 26) = $DONE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR $FEATURES OPERS FLAG)
writes special variables : (VAR FLAG)
202 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (PUSH)
3     (CALLS2&PUSH 71)                    ; LENGTH
5     (CALLS2&JMPIFNOT 148 L11)           ; ODDP
8     (CONST&PUSH 0)                      ; "DECLARE takes an even number of arguments."
9     (CALL1 1)                           ; MERROR
11    L11
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (NIL)
14    (BIND 2)                            ; FLAG
16    (LOAD&JMPIFNOT 4 L292)
20    L20
20    (LOAD 4)
21    (CDR)
22    (CAR&PUSH)
23    (CALL1&JMPIF 3 L108)                ; $LISTP
27    (LOAD 4)
28    (CDR)
29    (CAR&PUSH)
30    (CONST&PUSH 6)                      ; $DECLARE
31    (CALL2&JMPIFNOT 7 L142)             ; NONSYMCHK
35    (GETVALUE 2)                        ; FLAG
37    (JMPIF L281)
40    L40
40    (LOAD 4)
41    (CDR)
42    (CAR&PUSH)
43    (CONST&PUSH 9)                      ; ($EVFUN $EVFLAG $SPECIAL ...)
44    (CALL2&JMPIF 10 L156)               ; MEMQ
48    (LOAD 4)
49    (CDR)
50    (CAR&PUSH)
51    (JMPIFEQTO 13 L167)                 ; $NOUN
55    (LOAD 4)
56    (CDR)
57    (CAR&PUSH)
58    (CONST&PUSH 18)                     ; ($CONSTANT $NONSCALAR $SCALAR ...)
59    (CALL2&JMPIF 10 L193)               ; MEMQ
63    (LOAD 4)
64    (CDR)
65    (CAR&PUSH)
66    (GETVALUE&PUSH 19)                  ; OPERS
68    (CALL2&JMPIF 10 L202)               ; MEMQ
72    (LOAD 4)
73    (CDR)
74    (CAR&PUSH)
75    (GETVALUE 20)                       ; $FEATURES
77    (CDR&PUSH)
78    (CALL2&JMPIF 10 L234)               ; MEMQ
82    (LOAD 4)
83    (CDR)
84    (CAR&PUSH)
85    (JMPIFEQTO 22 L244)                 ; $FEATURE
89    (LOAD 4)
90    (CDR)
91    (CAR&PUSH)
92    (JMPIFNOTEQTO 24 L275)              ; $ALPHABETIC
96    (LOAD&PUSH 3)
97    (T&PUSH)
98    (T&PUSH)
99    (CONST 24)                          ; $ALPHABETIC
101   L101
101   (PUSH)
102   (CALL 4 12)                         ; DECLARE1
105   (JMP L281)
108   L108
108   (LOAD 4)
109   (CDR)
110   (CAR)
111   (CDR&PUSH)
112   (LOAD&JMPIFNOT 0 L129)
115   L115
115   (CONST&PUSH 4)                      ; ($DECLARE)
116   (LOAD&CAR&PUSH 6)
118   (LOAD&CAR&PUSH 2)
120   (LIST&PUSH 3)
122   (CALL1 5)                           ; MEVAL
124   (LOAD&CDR&STORE 0)
126   (LOAD&JMPIF 0 L115)
129   L129
129   (T)
130   (SETVALUE 2)                        ; FLAG
132   (SKIP 1)
134   (GETVALUE 2)                        ; FLAG
136   (JMPIFNOT L40)
139   (JMP L281)
142   L142
142   (LOAD&CAR&PUSH 4)
144   (CONST&PUSH 6)                      ; $DECLARE
145   (CALL2 8)                           ; DECLSETUP
147   (STORE 3)
148   (GETVALUE 2)                        ; FLAG
150   (JMPIFNOT L40)
153   (JMP L281)
156   L156
156   (LOAD&PUSH 3)
157   (T&PUSH)
158   (LOAD 6)
159   (CDR)
160   (CAR&PUSH)
161   (CALL1&PUSH 11)                     ; STRIPDOLLAR
163   (NIL)
164   (JMP L101)
167   L167
167   (LOAD&PUSH 3)
168   (NIL)
169   (BIND 14)                           ; VAR
171   L171
171   (LOAD&PUSH 3)
172   (CALLS1&JMPIF 146 L270)             ; ENDP
176   (LOAD 3)
177   (CAR)
178   (SETVALUE 14)                       ; VAR
180   (PUSH)
181   (CALL1&PUSH 15)                     ; GETOPR
183   (GETVALUE&PUSH 14)                  ; VAR
185   (CALL1&PUSH 16)                     ; $NOUNIFY
187   (CALL2 17)                          ; ALIAS
189   (LOAD&CDR&STORE 3)
191   (JMP L171)
193   L193
193   (LOAD&PUSH 3)
194   (T&PUSH)
195   (LOAD 6)
196   (CDR)
197   (CAR&PUSH)
198   (T)
199   (JMP L101)
202   L202
202   (LOAD 4)
203   (CDR)
204   (CAR&PUSH)
205   (GETVALUE 20)                       ; $FEATURES
207   (CDR&PUSH)
208   (CALL2&JMPIFNOT 10 L220)            ; MEMQ
211   (LOAD&PUSH 3)
212   (T&PUSH)
213   (LOAD 6)
214   (CDR)
215   (CAR&PUSH)
216   (CONST&PUSH 21)                     ; KIND
217   (CALL 4 12)                         ; DECLARE1
220   L220
220   (CONST&SYMBOL-FUNCTION&PUSH 15)     ; GETOPR
222   (LOAD&PUSH 4)
223   (CALLSR&PUSH 0 22)                  ; MAPCAR
226   (T&PUSH)
227   (LOAD 6)
228   (CDR)
229   (CAR&PUSH)
230   (CONST 19)                          ; OPERS
231   (JMP L101)
234   L234
234   (LOAD&PUSH 3)
235   (T&PUSH)
236   (LOAD 6)
237   (CDR)
238   (CAR&PUSH)
239   (CONST 21)                          ; KIND
241   (JMP L101)
244   L244
244   (LOAD&PUSH 3)
245   (NIL)
246   (BIND 14)                           ; VAR
248   (JMP L266)
250   L250
250   (LOAD 3)
251   (CAR)
252   (SETVALUE 14)                       ; VAR
254   (PUSH)
255   (CONST&PUSH 6)                      ; $DECLARE
256   (CALL2 7)                           ; NONSYMCHK
258   (GETVALUE&PUSH 14)                  ; VAR
260   (GETVALUE&PUSH 20)                  ; $FEATURES
262   (CALL2 23)                          ; ADD2LNC
264   (LOAD&CDR&STORE 3)
266   L266
266   (LOAD&PUSH 3)
267   (CALLS1&JMPIFNOT 146 L250)          ; ENDP
270   L270
270   (UNBIND1)
271   (SKIP 1)
273   (JMP L281)
275   L275
275   (CONST&PUSH 25)                     ; "Unknown property to DECLARE: ~:M"
276   (LOAD 5)
277   (CDR)
278   (CAR&PUSH)
279   (CALL2 1)                           ; MERROR
281   L281
281   (LOAD 4)
282   (CDR)
283   (CDR)
284   (STORE 4)
285   (NIL)
286   (SETVALUE 2)                        ; FLAG
288   (LOAD&JMPIF 4 L20)
292   L292
292   (CONST 26)                          ; $DONE
294   (UNBIND1)
295   (SKIP&RET 4)


Disassembly of function #:|(DEFUN DECLARE1 (VARS VAL PROP ...) ...)-82|
(CONST 0) = DECLARE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DECLARE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DECLARE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DECLARE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DECLARE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DECLARE1
8     (SKIP&RET 1)


Disassembly of function DECLARE1
(CONST 0) = VAR
(CONST 1) = GETOPR
(CONST 2) = $DECLARE
(CONST 3) = NONSYMCHK
(CONST 4) = KIND
(CONST 5) = DECLAREKIND
(CONST 6) = OPERS
(CONST 7) = LINCHK
(CONST 8) = PUTPROP
(CONST 9) = OPERATORS
(CONST 10) = SIMPARGS1
(CONST 11) = $ALPHABETIC
(CONST 12) = STRIPDOLLAR
(CONST 13) = ALPHABET
(CONST 14) = 1
(CONST 15) = GETCHARN
(CONST 16) = ADD2LNC
(CONST 17) = SPECIAL
(CONST 18) = FLUIDIZE
(CONST 19) = ($SCALAR $NONSCALAR)
(CONST 20) = MEMQ
(CONST 21) = $SCALAR
(CONST 22) = $NONSCALAR
(CONST 23) = MGET
(CONST 24) = "Inconsistent Declaration: ~:M"
(CONST 25) = ($DECLARE)
(CONST 26) = MERROR
(CONST 27) = MPUTPROP
(CONST 28) = OP
(CONST 29) = OPERATORP1
(CONST 30) = $PROPS
(CONST 31) = MOPL
(CONST 32) = GETOP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALPHABET MOPL $PROPS VAR)
writes special variables : (MOPL VAR)
134 byte-code instructions:
0     (LOAD&PUSH 4)
1     (NIL)
2     (BIND 0)                            ; VAR
4     L4
4     (LOAD&PUSH 3)
5     (CALLS1&JMPIF 146 L221)             ; ENDP
9     (LOAD 3)
10    (CAR)
11    (SETVALUE 0)                        ; VAR
13    (PUSH)
14    (CALL1 1)                           ; GETOPR
16    (SETVALUE 0)                        ; VAR
18    (PUSH)
19    (CONST&PUSH 2)                      ; $DECLARE
20    (CALL2 3)                           ; NONSYMCHK
22    (LOAD&PUSH 5)
23    (JMPIFEQTO 4 L103)                  ; KIND
27    (LOAD&PUSH 5)
28    (JMPIFEQTO 6 L110)                  ; OPERS
32    (LOAD&PUSH 5)
33    (JMPIFEQTO 11 L145)                 ; $ALPHABETIC
37    (LOAD&PUSH 6)
38    (JMPIFEQTO 17 L167)                 ; SPECIAL
42    (LOAD&JMPIF 5 L185)
46    (GETVALUE&PUSH 0)                   ; VAR
48    (LOAD&PUSH 8)
49    (LOAD 8)
50    L50
50    (PUSH)
51    (CALL 3 8)                          ; PUTPROP
54    L54
54    (GETVALUE&PUSH 0)                   ; VAR
56    (CONST&PUSH 28)                     ; OP
57    (PUSH-UNBOUND 1)
59    (CALLS2&JMPIFNOT 132 L90)           ; GET
62    (GETVALUE&PUSH 0)                   ; VAR
64    (CALL1&JMPIFNOT 29 L90)             ; OPERATORP1
67    (GETVALUE&PUSH 0)                   ; VAR
69    (CONST&PUSH 28)                     ; OP
70    (PUSH-UNBOUND 1)
72    (CALLS2 132)                        ; GET
74    (SETVALUE 0)                        ; VAR
76    (PUSH)
77    (GETVALUE 30)                       ; $PROPS
79    (CDR&PUSH)
80    (CALL2&JMPIF 20 L90)                ; MEMQ
83    (GETVALUE&PUSH 0)                   ; VAR
85    (GETVALUE 31)                       ; MOPL
87    (CONS)
88    (SETVALUE 31)                       ; MOPL
90    L90
90    (GETVALUE&PUSH 0)                   ; VAR
92    (CALL1&PUSH 32)                     ; GETOP
94    (GETVALUE&PUSH 30)                  ; $PROPS
96    (CALL2 16)                          ; ADD2LNC
98    (LOAD&CDR&STORE 3)
100   (JMP L4)
103   L103
103   (GETVALUE&PUSH 0)                   ; VAR
105   (LOAD&PUSH 7)
106   (CALL2 5)                           ; DECLAREKIND
108   (JMP L54)
110   L110
110   (GETVALUE&PUSH 0)                   ; VAR
112   (CALL1 7)                           ; LINCHK
114   (SETVALUE 0)                        ; VAR
116   (PUSH)
117   (T&PUSH)
118   (LOAD&PUSH 8)
119   (CALL 3 8)                          ; PUTPROP
122   (GETVALUE&PUSH 0)                   ; VAR
124   (T&PUSH)
125   (CONST&PUSH 6)                      ; OPERS
126   (CALL 3 8)                          ; PUTPROP
129   (GETVALUE&PUSH 0)                   ; VAR
131   (CONST&PUSH 9)                      ; OPERATORS
132   (PUSH-UNBOUND 1)
134   (CALLS2&JMPIF 132 L54)              ; GET
138   (GETVALUE&PUSH 0)                   ; VAR
140   (CONST&PUSH 10)                     ; SIMPARGS1
141   (CONST 9)                           ; OPERATORS
142   (JMP L50)
145   L145
145   (GETVALUE&PUSH 0)                   ; VAR
147   (CALL1 12)                          ; STRIPDOLLAR
149   (STORE 7)
150   (PUSH)
151   (T&PUSH)
152   (CONST&PUSH 13)                     ; ALPHABET
153   (CALL 3 8)                          ; PUTPROP
156   (LOAD&PUSH 7)
157   (CONST&PUSH 14)                     ; 1
158   (CALL2&PUSH 15)                     ; GETCHARN
160   (GETVALUE&PUSH 13)                  ; ALPHABET
162   (CALL2 16)                          ; ADD2LNC
164   (JMP L54)
167   L167
167   (CONST&PUSH 17)                     ; SPECIAL
168   (GETVALUE&PUSH 0)                   ; VAR
170   (LIST&PUSH 2)
172   (CALLS1 90)                         ; PROCLAIM
174   (GETVALUE&PUSH 0)                   ; VAR
176   (CALL1 18)                          ; FLUIDIZE
178   (JMP L54)
181   L181
181   (CONST 22)                          ; $NONSCALAR
183   (JMP L198)
185   L185
185   (LOAD&PUSH 6)
186   (CONST&PUSH 19)                     ; ($SCALAR $NONSCALAR)
187   (CALL2&JMPIFNOT 20 L211)            ; MEMQ
190   (GETVALUE&PUSH 0)                   ; VAR
192   (LOAD&PUSH 7)
193   (JMPIFEQTO 21 L181)                 ; $SCALAR
196   (CONST 21)                          ; $SCALAR
198   L198
198   (PUSH)
199   (CALL2&JMPIFNOT 23 L211)            ; MGET
202   (CONST&PUSH 24)                     ; "Inconsistent Declaration: ~:M"
203   (CONST&PUSH 25)                     ; ($DECLARE)
204   (GETVALUE&PUSH 0)                   ; VAR
206   (LOAD&PUSH 9)
207   (LIST&PUSH 3)
209   (CALL2 26)                          ; MERROR
211   L211
211   (GETVALUE&PUSH 0)                   ; VAR
213   (LOAD&PUSH 8)
214   (LOAD&PUSH 8)
215   (CALL 3 27)                         ; MPUTPROP
218   (JMP L54)
221   L221
221   (NIL)
222   (UNBIND1)
223   (SKIP&RET 6)


Disassembly of function #:|(DEFUN LINCHK (VAR) ...)-83|
(CONST 0) = LINCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LINCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LINCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LINCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LINCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LINCHK
8     (SKIP&RET 1)


Disassembly of function LINCHK
(CONST 0) = VAR
(CONST 1) = ($SUM $INTEGRATE $LIMIT $DIFF $TRANSPOSE)
(CONST 2) = MEMQ
(CONST 3) = $NOUNIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CONST&PUSH 1)                      ; ($SUM $INTEGRATE $LIMIT $DIFF ...)
6     (CALL2&JMPIF 2 L14)                 ; MEMQ
9     (GETVALUE 0)                        ; VAR
11    L11
11    (UNBIND1)
12    (SKIP&RET 2)
14    L14
14    (GETVALUE&PUSH 0)                   ; VAR
16    (CALL1 3)                           ; $NOUNIFY
18    (JMP L11)


Disassembly of function #:|(DEFMSPEC $REMOVE (FORM) ...)-84-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $REMOVE (FORM) ...)-84-2-1|>
(CONST 1) = $REMOVE
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $REMOVE (FORM) ...)-84-2-1|>
1     (CONST&PUSH 1)                      ; $REMOVE
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $REMOVE (FORM) ...)-84-2-1|
(CONST 0) = I-$REMOVE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (CALL1 0)                           ; I-$REMOVE
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN I-$REMOVE (L) ...)-85|
(CONST 0) = I-$REMOVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE I-$REMOVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; I-$REMOVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; I-$REMOVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE I-$REMOVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; I-$REMOVE
8     (SKIP&RET 1)


Disassembly of function I-$REMOVE
(CONST 0) = "REMOVE takes an even number of arguments."
(CONST 1) = MERROR
(CONST 2) = FLAG
(CONST 3) = $LISTP
(CONST 4) = $REMOVE
(CONST 5) = NONSYMCHK
(CONST 6) = DECLSETUP
(CONST 7) = $VALUE
(CONST 8) = I-$REMVALUE
(CONST 9) = $FUNCTION
(CONST 10) = REM-VERBIFY
(CONST 11) = MEXPR
(CONST 12) = $FUNCTIONS
(CONST 13) = REMOVE1
(CONST 14) = $MACRO
(CONST 15) = MMACRO
(CONST 16) = $MACROS
(CONST 17) = $ARRAY
(CONST 18) = ($REMARRAY)
(CONST 19) = MEVAL
(CONST 20) = ($ALIAS $NOUN)
(CONST 21) = MEMQ
(CONST 22) = $ALIAS
(CONST 23) = REMALIAS1
(CONST 24) = $MATCHDECLARE
(CONST 25) = MATCHDECLARE
(CONST 26) = $RULE
(CONST 27) = REMRULE
(CONST 28) = ($EVFUN $EVFLAG $SPECIAL $NONARRAY $BINDTEST $AUTOLOAD $ASSIGN)
(CONST 29) = STRIPDOLLAR
(CONST 30) = ($MODE $MODEDECLARE)
(CONST 31) = MODE
(CONST 32) = FOO
(CONST 33) = $ATVALUE
(CONST 34) = ATVALUES
(CONST 35) = ($CONSTANT $NONSCALAR $SCALAR $MAINVAR $NUMER $ATOMGRAD)
(CONST 36) = OPERS
(CONST 37) = LINCHK
(CONST 38) = $FEATURES
(CONST 39) = $FEATURE
(CONST 40) = VAR
(CONST 41) = 1
(CONST 42) = DELQ
(CONST 43) = ($ALPHABETIC $TRANSFUN)
(CONST 44) = ($GRADEF $GRAD)
(CONST 45) = GRAD
(CONST 46) = $GRADEFS
(CONST 47) = ($DEPENDENCY $DEPEND $DEPENDS)
(CONST 48) = DEPENDS
(CONST 49) = $DEPENDENCIES
(CONST 50) = ($OP $OPERATOR)
(CONST 51) = $OP
(CONST 52) = ($DEFTAYLOR $TAYLORDEF)
(CONST 53) = SP2
(CONST 54) = "Unknown property to REMOVE: ~:M"
(CONST 55) = $DONE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($DEPENDENCIES $GRADEFS $MACROS $FUNCTIONS $FEATURES OPERS FLAG)
writes special variables : (VAR FLAG)
301 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CALLS2&JMPIFNOT 148 L9)            ; ODDP
6     (CONST&PUSH 0)                      ; "REMOVE takes an even number of arguments."
7     (CALL1 1)                           ; MERROR
9     L9
9     (LOAD&PUSH 1)
10    (NIL&PUSH)
11    (NIL)
12    (BIND 2)                            ; FLAG
14    (LOAD&JMPIFNOT 4 L442)
18    L18
18    (LOAD 4)
19    (CDR)
20    (CAR&PUSH)
21    (CALL1&JMPIF 3 L164)                ; $LISTP
25    (LOAD 4)
26    (CDR)
27    (CAR&PUSH)
28    (CONST&PUSH 4)                      ; $REMOVE
29    (CALL2&JMPIFNOT 5 L198)             ; NONSYMCHK
33    (GETVALUE 2)                        ; FLAG
35    (JMPIF L431)
38    L38
38    (LOAD 4)
39    (CDR)
40    (CAR&PUSH)
41    (JMPIFEQTO 7 L212)                  ; $VALUE
45    (LOAD 4)
46    (CDR)
47    (CAR&PUSH)
48    (JMPIFEQTO 9 L218)                  ; $FUNCTION
52    (LOAD 4)
53    (CDR)
54    (CAR&PUSH)
55    (JMPIFEQTO 14 L231)                 ; $MACRO
59    (LOAD 4)
60    (CDR)
61    (CAR&PUSH)
62    (JMPIFEQTO 17 L244)                 ; $ARRAY
66    (LOAD 4)
67    (CDR)
68    (CAR&PUSH)
69    (CONST&PUSH 20)                     ; ($ALIAS $NOUN)
70    (CALL2&JMPIF 21 L252)               ; MEMQ
74    (LOAD 4)
75    (CDR)
76    (CAR&PUSH)
77    (JMPIFEQTO 24 L265)                 ; $MATCHDECLARE
81    (LOAD 4)
82    (CDR)
83    (CAR&PUSH)
84    (JMPIFEQTO 26 L270)                 ; $RULE
88    (LOAD 4)
89    (CDR)
90    (CAR&PUSH)
91    (CONST&PUSH 28)                     ; ($EVFUN $EVFLAG $SPECIAL ...)
92    (CALL2&JMPIF 21 L276)               ; MEMQ
96    (LOAD 4)
97    (CDR)
98    (CAR&PUSH)
99    (CONST&PUSH 30)                     ; ($MODE $MODEDECLARE)
101   (CALL2&JMPIF 21 L285)               ; MEMQ
105   (LOAD 4)
106   (CDR)
107   (CAR&PUSH)
108   (JMPIFEQTO 33 L294)                 ; $ATVALUE
112   (LOAD 4)
113   (CDR)
114   (CAR&PUSH)
115   (CONST&PUSH 35)                     ; ($CONSTANT $NONSCALAR $SCALAR ...)
117   (CALL2&JMPIF 21 L299)               ; MEMQ
121   (LOAD 4)
122   (CDR)
123   (CAR&PUSH)
124   (GETVALUE&PUSH 36)                  ; OPERS
126   (CALL2&JMPIF 21 L308)               ; MEMQ
130   (LOAD 4)
131   (CDR)
132   (CAR&PUSH)
133   (GETVALUE 38)                       ; $FEATURES
135   (CDR&PUSH)
136   (CALL2&JMPIF 21 L317)               ; MEMQ
140   (LOAD 4)
141   (CDR)
142   (CAR&PUSH)
143   (JMPIFEQTO 39 L321)                 ; $FEATURE
147   (LOAD 4)
148   (CDR)
149   (CAR&PUSH)
150   (CONST&PUSH 43)                     ; ($ALPHABETIC $TRANSFUN)
152   (CALL2&JMPIFNOT 21 L377)            ; MEMQ
156   (LOAD 3)
157   L157
157   (PUSH)
158   (LOAD 5)
159   (CDR)
160   (CAR)
161   (JMP L412)
164   L164
164   (LOAD 4)
165   (CDR)
166   (CAR)
167   (CDR&PUSH)
168   (LOAD&JMPIFNOT 0 L185)
171   L171
171   (LOAD&CAR&PUSH 5)
173   (LOAD&CAR&PUSH 1)
175   (LIST&PUSH 2)
177   (JSR L0)
180   (LOAD&CDR&STORE 0)
182   (LOAD&JMPIF 0 L171)
185   L185
185   (T)
186   (SETVALUE 2)                        ; FLAG
188   (SKIP 1)
190   (GETVALUE 2)                        ; FLAG
192   (JMPIFNOT L38)
195   (JMP L431)
198   L198
198   (LOAD&CAR&PUSH 4)
200   (CONST&PUSH 4)                      ; $REMOVE
201   (CALL2 6)                           ; DECLSETUP
203   (STORE 3)
204   (GETVALUE 2)                        ; FLAG
206   (JMPIFNOT L38)
209   (JMP L431)
212   L212
212   (LOAD&PUSH 3)
213   (CALL1 8)                           ; I-$REMVALUE
215   (JMP L431)
218   L218
218   (CONST&SYMBOL-FUNCTION&PUSH 10)     ; REM-VERBIFY
220   (LOAD&PUSH 4)
221   (CALLSR&PUSH 0 22)                  ; MAPCAR
224   (CONST&PUSH 11)                     ; MEXPR
225   (T&PUSH)
226   (GETVALUE 12)                       ; $FUNCTIONS
228   (JMP L365)
231   L231
231   (CONST&SYMBOL-FUNCTION&PUSH 10)     ; REM-VERBIFY
233   (LOAD&PUSH 4)
234   (CALLSR&PUSH 0 22)                  ; MAPCAR
237   (CONST&PUSH 15)                     ; MMACRO
238   (T&PUSH)
239   (GETVALUE 16)                       ; $MACROS
241   (JMP L365)
244   L244
244   (CONST&PUSH 18)                     ; ($REMARRAY)
245   (LOAD 4)
246   (CONS&PUSH)
247   (CALL1 19)                          ; MEVAL
249   (JMP L431)
252   L252
252   (LOAD&PUSH 3)
253   (LOAD 5)
254   (CDR)
255   (CAR&PUSH)
256   (CONST 22)                          ; $ALIAS
258   (EQ)
259   (PUSH)
260   (CALL2 23)                          ; REMALIAS1
262   (JMP L431)
265   L265
265   (LOAD&PUSH 3)
266   (CONST 25)                          ; MATCHDECLARE
268   (JMP L303)
270   L270
270   (LOAD&PUSH 3)
271   (CALL1 27)                          ; REMRULE
273   (JMP L431)
276   L276
276   (LOAD&PUSH 3)
277   (LOAD 5)
278   (CDR)
279   (CAR&PUSH)
280   (CALL1 29)                          ; STRIPDOLLAR
282   (JMP L412)
285   L285
285   (LOAD&PUSH 3)
286   (CONST&PUSH 31)                     ; MODE
288   (NIL&PUSH)
289   (CONST 32)                          ; FOO
291   (JMP L416)
294   L294
294   (LOAD&PUSH 3)
295   (CONST 34)                          ; ATVALUES
297   (JMP L303)
299   L299
299   (LOAD&PUSH 3)
300   (LOAD 5)
301   (CDR)
302   (CAR)
303   L303
303   (PUSH)
304   (T)
305   (JMP L414)
308   L308
308   (CONST&SYMBOL-FUNCTION&PUSH 37)     ; LINCHK
310   (LOAD&PUSH 4)
311   (CALLSR 0 22)                       ; MAPCAR
314   (JMP L157)
317   L317
317   (LOAD 3)
318   (JMP L157)
321   L321
321   (LOAD&PUSH 3)
322   (NIL)
323   (BIND 40)                           ; VAR
325   (JMP L341)
327   L327
327   (LOAD 3)
328   (CAR)
329   (SETVALUE 40)                       ; VAR
331   (PUSH)
332   (GETVALUE&PUSH 38)                  ; $FEATURES
334   (CONST&PUSH 41)                     ; 1
336   (CALL 3 42)                         ; DELQ
339   (LOAD&CDR&STORE 3)
341   L341
341   (LOAD&PUSH 3)
342   (CALLS1&JMPIFNOT 146 L327)          ; ENDP
345   (UNBIND1)
346   (SKIP 1)
348   (JMP L431)
351   L351
351   (LOAD&PUSH 3)
352   (CONST&PUSH 45)                     ; GRAD
354   (NIL&PUSH)
355   (GETVALUE 46)                       ; $GRADEFS
357   (JMP L365)
359   L359
359   (LOAD&PUSH 3)
360   (CONST&PUSH 48)                     ; DEPENDS
362   (T&PUSH)
363   (GETVALUE 49)                       ; $DEPENDENCIES
365   L365
365   (PUSH)
366   (T)
367   (JMP L418)
369   L369
369   (LOAD&PUSH 3)
370   (CONST&PUSH 51)                     ; $OP
372   (NIL&PUSH)
373   (CONST 32)                          ; FOO
375   (JMP L416)
377   L377
377   (LOAD 4)
378   (CDR)
379   (CAR&PUSH)
380   (CONST&PUSH 44)                     ; ($GRADEF $GRAD)
382   (CALL2&JMPIF 21 L351)               ; MEMQ
385   (LOAD 4)
386   (CDR)
387   (CAR&PUSH)
388   (CONST&PUSH 47)                     ; ($DEPENDENCY $DEPEND $DEPENDS)
390   (CALL2&JMPIF 21 L359)               ; MEMQ
393   (LOAD 4)
394   (CDR)
395   (CAR&PUSH)
396   (CONST&PUSH 50)                     ; ($OP $OPERATOR)
398   (CALL2&JMPIF 21 L369)               ; MEMQ
401   (LOAD 4)
402   (CDR)
403   (CAR&PUSH)
404   (CONST&PUSH 52)                     ; ($DEFTAYLOR $TAYLORDEF)
406   (CALL2&JMPIFNOT 21 L424)            ; MEMQ
409   (LOAD&PUSH 3)
410   (CONST 53)                          ; SP2
412   L412
412   (PUSH)
413   (NIL)
414   L414
414   (PUSH)
415   (T)
416   L416
416   (PUSH)
417   (NIL)
418   L418
418   (PUSH)
419   (CALL 5 13)                         ; REMOVE1
422   (JMP L431)
424   L424
424   (CONST&PUSH 54)                     ; "Unknown property to REMOVE: ~:M"
426   (LOAD 5)
427   (CDR)
428   (CAR&PUSH)
429   (CALL2 1)                           ; MERROR
431   L431
431   (LOAD 4)
432   (CDR)
433   (CDR)
434   (STORE 4)
435   (NIL)
436   (SETVALUE 2)                        ; FLAG
438   (LOAD&JMPIF 4 L18)
442   L442
442   (CONST 55)                          ; $DONE
444   (UNBIND1)
445   (SKIP&RET 4)


Disassembly of function #:|(DEFUN DECLSETUP (X FN) ...)-86|
(CONST 0) = DECLSETUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DECLSETUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DECLSETUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DECLSETUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DECLSETUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DECLSETUP
8     (SKIP&RET 1)


Disassembly of function DECLSETUP
(CONST 0) = X
(CONST 1) = $NOUNIFY
(CONST 2) = MEVAL
(CONST 3) = MLIST
(CONST 4) = VAR
(CONST 5) = IMPROPER-ARG-ERR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR X)
68 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L25)
7     (GETVALUE 0)                        ; X
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFNOTEQTO 1 L87)                ; $NOUNIFY
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1 2)                           ; MEVAL
19    L19
19    (PUSH)
20    (NIL)
21    (CONS)
22    (JMP L100)
25    L25
25    (GETVALUE 0)                        ; X
27    (JMP L19)
29    L29
29    (NIL&PUSH)
30    (GETVALUE 0)                        ; X
32    (CDR&PUSH)
33    (JMP L74)
35    L35
35    (GETVALUE 4)                        ; VAR
37    (JMP L66)
39    L39
39    (GETVALUE&PUSH 4)                   ; VAR
41    (CALL1 2)                           ; MEVAL
43    (JMP L66)
45    L45
45    (LOAD&CAR&PUSH 0)
47    (LOAD 0)
48    (BIND 4)                            ; VAR
50    (GETVALUE 4)                        ; VAR
52    (JMPIFATOM L35)
54    (GETVALUE 4)                        ; VAR
56    (CAR)
57    (CAR&PUSH)
58    (JMPIFEQTO 1 L39)                   ; $NOUNIFY
61    (GETVALUE&PUSH 4)                   ; VAR
63    (LOAD&PUSH 11)
64    (CALL2 5)                           ; IMPROPER-ARG-ERR
66    L66
66    (UNBIND1)
67    (PUSH)
68    (LOAD&CONS&STORE 2)
70    (SKIP 1)
72    (LOAD&CDR&STORE 0)
74    L74
74    (LOAD&PUSH 0)
75    (CALLS1&JMPIFNOT 146 L45)           ; ENDP
78    (SKIP 1)
80    (LOAD&PUSH 0)
81    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
83    (SKIP 1)
85    (JMP L100)
87    L87
87    (GETVALUE 0)                        ; X
89    (CAR)
90    (CAR&PUSH)
91    (JMPIFEQTO 3 L29)                   ; MLIST
95    (GETVALUE&PUSH 0)                   ; X
97    (LOAD&PUSH 5)
98    (CALL2 5)                           ; IMPROPER-ARG-ERR
100   L100
100   (UNBIND1)
101   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN REMOVE1 (VARS PROP MPROPP ...) ...)-87|
(CONST 0) = REMOVE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOVE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOVE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOVE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOVE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOVE1
8     (SKIP&RET 1)


Disassembly of function REMOVE1
(CONST 0) = $REMOVE
(CONST 1) = NONSYMCHK
(CONST 2) = $ALL
(CONST 3) = $PROPS
(CONST 4) = #.#'CAAR
(CONST 5) = GETOPR
(CONST 6) = VAR
(CONST 7) = FLAG
(CONST 8) = MREMPROP
(CONST 9) = (MEXPR MMACRO)
(CONST 10) = MEMQ
(CONST 11) = MLEXPRP
(CONST 12) = MFEXPRP
(CONST 13) = TRACE
(CONST 14) = MGET
(CONST 15) = MACSYMA-UNTRACE
(CONST 16) = $OP
(CONST 17) = KILL-OPERATOR
(CONST 18) = $ALPHABETIC
(CONST 19) = STRIPDOLLAR
(CONST 20) = ALPHABET
(CONST 21) = ZL-REMPROP
(CONST 22) = 1
(CONST 23) = GETCHARN
(CONST 24) = ZL-DELETE
(CONST 25) = $TRANSFUN
(CONST 26) = REMOVE-TRANSL-FUN-PROPS
(CONST 27) = REMOVE-TRANSL-ARRAY-FUN-PROPS
(CONST 28) = $FEATURES
(CONST 29) = OPERS
(CONST 30) = UNKIND
(CONST 31) = DELQ
(CONST 32) = GETL
(CONST 33) = REMPROPCHK
(CONST 34) = FOO
(CONST 35) = MFUNCTION-DELETE
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG ALPHABET $PROPS VAR OPERS $FEATURES)
writes special variable : (FLAG)
149 byte-code instructions:
0     (LOAD&PUSH 5)
1     (NIL&PUSH)
2     (LOAD&JMPIFNOT 1 L100)
6     L6
6     (LOAD&CAR&PUSH 1)
8     (CONST&PUSH 0)                      ; $REMOVE
9     (CALL2 1)                           ; NONSYMCHK
11    (LOAD&CAR&PUSH 1)
13    (JMPIFNOTEQTO 2 L20)                ; $ALL
16    (LOAD&JMPIFNOT 0 L116)
20    L20
20    (LOAD&CAR&PUSH 1)
22    (CALL1 5)                           ; GETOPR
24    (BIND 6)                            ; VAR
26    (NIL)
27    (BIND 7)                            ; FLAG
29    (LOAD&JMPIF 11 L134)
33    (LOAD&PUSH 12)
34    (JMPIFEQTO 16 L169)                 ; $OP
38    (LOAD&PUSH 12)
39    (JMPIFEQTO 18 L176)                 ; $ALPHABETIC
43    (LOAD&PUSH 12)
44    (JMPIFEQTO 25 L199)                 ; $TRANSFUN
48    (LOAD&PUSH 12)
49    (GETVALUE 28)                       ; $FEATURES
51    (CDR&PUSH)
52    (CALL2 10)                          ; MEMQ
54    (SETVALUE 7)                        ; FLAG
56    (JMPIF L210)
59    (LOAD&PUSH 12)
60    (GETVALUE&PUSH 29)                  ; OPERS
62    (CALL2&JMPIF 10 L210)               ; MEMQ
66    (GETVALUE&PUSH 6)                   ; VAR
68    (LOAD 13)
69    L69
69    (PUSH)
70    (CALL2 21)                          ; ZL-REMPROP
72    L72
72    (LOAD&PUSH 10)
73    (T)
74    (JMPIFEQ L246)
77    (LOAD&PUSH 10)
78    (JMPIFEQTO 34 L92)                  ; FOO
81    (LOAD&JMPIF 9 L253)
85    (GETVALUE&PUSH 6)                   ; VAR
87    (LOAD&PUSH 11)
88    (CONST&PUSH 22)                     ; 1
89    (CALL 3 31)                         ; DELQ
92    L92
92    (UNBIND 2)
94    L94
94    (LOAD&CDR&STORE 1)
96    (LOAD&JMPIF 1 L6)
100   L100
100   (NIL)
101   (SKIP&RET 8)
103   L103
103   (GETVALUE 3)                        ; $PROPS
105   (CDR)
106   (JMP L125)
108   L108
108   (CONST&PUSH 4)                      ; #.#'CAAR
109   (LOAD&CDR&PUSH 6)
111   (CALLSR 0 22)                       ; MAPCAR
114   (JMP L125)
116   L116
116   (LOAD&PUSH 1)
117   (LOAD 5)
118   (JMPIFATOM L103)
120   (LOAD&JMPIF 4 L108)
123   (LOAD 5)
124   (CDR)
125   L125
125   (PUSH)
126   (CALLSR&STORE 2 34 1)               ; APPEND
130   (T&STORE 0)
132   (JMP L94)
134   L134
134   (GETVALUE&PUSH 6)                   ; VAR
136   (LOAD&PUSH 13)
137   (CALL2 8)                           ; MREMPROP
139   (LOAD&PUSH 12)
140   (CONST&PUSH 9)                      ; (MEXPR MMACRO)
141   (CALL2&JMPIFNOT 10 L72)             ; MEMQ
145   (GETVALUE&PUSH 6)                   ; VAR
147   (CONST&PUSH 11)                     ; MLEXPRP
148   (CALL2 8)                           ; MREMPROP
150   (GETVALUE&PUSH 6)                   ; VAR
152   (CONST&PUSH 12)                     ; MFEXPRP
153   (CALL2 8)                           ; MREMPROP
155   (GETVALUE&PUSH 6)                   ; VAR
157   (CONST&PUSH 13)                     ; TRACE
158   (CALL2&JMPIFNOT 14 L72)             ; MGET
162   (GETVALUE&PUSH 6)                   ; VAR
164   (CALL1 15)                          ; MACSYMA-UNTRACE
166   (JMP L72)
169   L169
169   (GETVALUE&PUSH 6)                   ; VAR
171   (CALL1 17)                          ; KILL-OPERATOR
173   (JMP L72)
176   L176
176   (GETVALUE&PUSH 6)                   ; VAR
178   (CALL1 19)                          ; STRIPDOLLAR
180   (STORE 12)
182   (PUSH)
183   (CONST&PUSH 20)                     ; ALPHABET
184   (CALL2 21)                          ; ZL-REMPROP
186   (LOAD&PUSH 12)
187   (CONST&PUSH 22)                     ; 1
188   (CALL2&PUSH 23)                     ; GETCHARN
190   (GETVALUE&PUSH 20)                  ; ALPHABET
192   (CONST&PUSH 22)                     ; 1
193   (CALL 3 24)                         ; ZL-DELETE
196   (JMP L72)
199   L199
199   (GETVALUE&PUSH 6)                   ; VAR
201   (CALL1 26)                          ; REMOVE-TRANSL-FUN-PROPS
203   (GETVALUE&PUSH 6)                   ; VAR
205   (CALL1 27)                          ; REMOVE-TRANSL-ARRAY-FUN-PROPS
207   (JMP L72)
210   L210
210   (GETVALUE 7)                        ; FLAG
212   (JMPIFNOT L219)
214   (GETVALUE&PUSH 6)                   ; VAR
216   (LOAD&PUSH 13)
217   (CALL2 30)                          ; UNKIND
219   L219
219   (GETVALUE&PUSH 6)                   ; VAR
221   (LOAD&PUSH 13)
222   (CALL2 21)                          ; ZL-REMPROP
224   (GETVALUE&PUSH 6)                   ; VAR
226   (LOAD&PUSH 13)
227   (GETVALUE&PUSH 29)                  ; OPERS
229   (CALLS1&PUSH 158)                   ; COPY-LIST
231   (CONST&PUSH 22)                     ; 1
232   (CALL&PUSH 3 31)                    ; DELQ
235   (CALL2&JMPIF 32 L72)                ; GETL
239   (GETVALUE&PUSH 6)                   ; VAR
241   (CONST 29)                          ; OPERS
243   (JMP L69)
246   L246
246   (GETVALUE&PUSH 6)                   ; VAR
248   (CALL1 33)                          ; REMPROPCHK
250   (JMP L92)
253   L253
253   (GETVALUE&PUSH 6)                   ; VAR
255   (LOAD&PUSH 11)
256   (CALL2 35)                          ; MFUNCTION-DELETE
258   (JMP L92)


Disassembly of function #:|(DEFUN REMOVE-TRANSL-FUN-PROPS (FUN) ...)-88|
(CONST 0) = REMOVE-TRANSL-FUN-PROPS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOVE-TRANSL-FUN-PROPS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOVE-TRANSL-FUN-PROPS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOVE-TRANSL-FUN-PROPS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOVE-TRANSL-FUN-PROPS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOVE-TRANSL-FUN-PROPS
8     (SKIP&RET 1)


Disassembly of function REMOVE-TRANSL-FUN-PROPS
(CONST 0) = TRACE
(CONST 1) = MGET
(CONST 2) = MACSYMA-UNTRACE
(CONST 3) = TRANSLATED
(CONST 4) = $SAVEDEF
(CONST 5) = $ALL
(CONST 6) = TRANSLATED-MMACRO
(CONST 7) = ZL-REMPROP
(CONST 8) = T-MFEXPR
(CONST 9) = MREMPROP
(CONST 10) = FUNCTION-MODE
(CONST 11) = (A-EXPR A-SUBR)
(CONST 12) = GETL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($SAVEDEF)
38 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; TRACE
2     (CALL2&JMPIFNOT 1 L8)               ; MGET
5     (LOAD&PUSH 1)
6     (CALL1 2)                           ; MACSYMA-UNTRACE
8     L8
8     (LOAD&PUSH 1)
9     (CONST&PUSH 3)                      ; TRANSLATED
10    (PUSH-UNBOUND 1)
12    (CALLS2 132)                        ; GET
14    (JMPIFNOT1 L51)
16    (GETVALUE&PUSH 4)                   ; $SAVEDEF
18    (CONST 5)                           ; $ALL
19    (EQ)
20    (NOT)
21    (JMPIFNOT1 L51)
23    (LOAD&PUSH 1)
24    (CALLS1 84)                         ; FMAKUNBOUND
26    (LOAD&PUSH 1)
27    (CONST&PUSH 6)                      ; TRANSLATED-MMACRO
28    (CALL2 7)                           ; ZL-REMPROP
30    (LOAD&PUSH 1)
31    (CONST&PUSH 8)                      ; T-MFEXPR
32    (CALL2 9)                           ; MREMPROP
34    (LOAD&PUSH 1)
35    (CONST&PUSH 10)                     ; FUNCTION-MODE
36    (CALL2 7)                           ; ZL-REMPROP
38    (LOAD&PUSH 1)
39    (CONST&PUSH 11)                     ; (A-EXPR A-SUBR)
40    (CALL2 12)                          ; GETL
42    (NOT)
43    (JMPIFNOT1 L51)
45    (LOAD&PUSH 1)
46    (CONST&PUSH 3)                      ; TRANSLATED
47    (CALL2 7)                           ; ZL-REMPROP
49    (SKIP&RET 2)
51    L51
51    (SKIP&RET 2)


Disassembly of function #:|(DEFUN REMOVE-TRANSL-ARRAY-FUN-PROPS (FUN) ...)-89|
(CONST 0) = REMOVE-TRANSL-ARRAY-FUN-PROPS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOVE-TRANSL-ARRAY-FUN-PROPS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOVE-TRANSL-ARRAY-FUN-PROPS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOVE-TRANSL-ARRAY-FUN-PROPS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOVE-TRANSL-ARRAY-FUN-PROPS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOVE-TRANSL-ARRAY-FUN-PROPS
8     (SKIP&RET 1)


Disassembly of function REMOVE-TRANSL-ARRAY-FUN-PROPS
(CONST 0) = TRANSLATED
(CONST 1) = $SAVEDEF
(CONST 2) = $ALL
(CONST 3) = A-EXPR
(CONST 4) = ZL-REMPROP
(CONST 5) = A-SUBR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($SAVEDEF)
26 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; TRANSLATED
2     (PUSH-UNBOUND 1)
4     (CALLS2 132)                        ; GET
6     (JMPIFNOT1 L35)
8     (GETVALUE&PUSH 1)                   ; $SAVEDEF
10    (CONST 2)                           ; $ALL
11    (EQ)
12    (NOT)
13    (JMPIFNOT1 L35)
15    (LOAD&PUSH 1)
16    (CONST&PUSH 3)                      ; A-EXPR
17    (CALL2 4)                           ; ZL-REMPROP
19    (LOAD&PUSH 1)
20    (CONST&PUSH 5)                      ; A-SUBR
21    (CALL2 4)                           ; ZL-REMPROP
23    (LOAD&PUSH 1)
24    (CALLS1 80)                         ; FBOUNDP
26    (NOT)
27    (JMPIFNOT1 L35)
29    (LOAD&PUSH 1)
30    (CONST&PUSH 0)                      ; TRANSLATED
31    (CALL2 4)                           ; ZL-REMPROP
33    (SKIP&RET 2)
35    L35
35    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN REMPROPCHK (VAR) ...)-90|
(CONST 0) = REMPROPCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMPROPCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMPROPCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMPROPCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMPROPCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMPROPCHK
8     (SKIP&RET 1)


Disassembly of function REMPROPCHK
(CONST 0) = VAR
(CONST 1) = 
($CONSTANT $NONSCALAR $SCALAR $MAINVAR $NUMER MATCHDECLARE $ATOMGRAD ATVALUES
 T-MFEXPR)
(CONST 2) = MGETL
(CONST 3) = 
(EVFUN EVFLAG TRANSLATED NONARRAY BINDTEST OPR SP2 OPERATORS OPERS SPECIAL DATA
 ALPHABET AUTOLOAD MODE)
(CONST 4) = GETL
(CONST 5) = $PROPS
(CONST 6) = 1
(CONST 7) = DELQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PROPS VAR)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CONST&PUSH 1)                      ; ($CONSTANT $NONSCALAR $SCALAR ...)
6     (CALL2 2)                           ; MGETL
8     (NOT)
9     (JMPIFNOT1 L27)
11    (GETVALUE&PUSH 0)                   ; VAR
13    (CONST&PUSH 3)                      ; (EVFUN EVFLAG TRANSLATED ...)
14    (CALL2 4)                           ; GETL
16    (NOT)
17    (JMPIFNOT1 L27)
19    (GETVALUE&PUSH 0)                   ; VAR
21    (GETVALUE&PUSH 5)                   ; $PROPS
23    (CONST&PUSH 6)                      ; 1
24    (CALL 3 7)                          ; DELQ
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFUN REM-VERBIFY (FNNAME) ...)-91|
(CONST 0) = REM-VERBIFY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REM-VERBIFY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REM-VERBIFY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REM-VERBIFY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REM-VERBIFY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REM-VERBIFY
8     (SKIP&RET 1)


Disassembly of function REM-VERBIFY
(CONST 0) = $REMOVE
(CONST 1) = NONSYMCHK
(CONST 2) = $VERBIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; $REMOVE
2     (CALL2 1)                           ; NONSYMCHK
4     (LOAD&PUSH 1)
5     (CALL1 2)                           ; $VERBIFY
7     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $REMFUNCTION (L) ...)-92-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $REMFUNCTION (L) ...)-92-2-1|>
(CONST 1) = $REMFUNCTION
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $REMFUNCTION (L) ...)-92-2-1|>
1     (CONST&PUSH 1)                      ; $REMFUNCTION
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $REMFUNCTION (L) ...)-92-2-1|
(CONST 0) = $ALL
(CONST 1) = MEMQ
(CONST 2) = #.#'CAAR
(CONST 3) = $FUNCTIONS
(CONST 4) = $MACROS
(CONST 5) = REM-VERBIFY
(CONST 6) = ZL-ASSOC
(CONST 7) = MEXPR
(CONST 8) = REMOVE1
(CONST 9) = MMACRO
(CONST 10) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($MACROS $FUNCTIONS)
58 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (CONST&PUSH 0)                      ; $ALL
3     (LOAD&PUSH 2)
4     (CALL2&JMPIF 1 L73)                 ; MEMQ
8     (CONST&SYMBOL-FUNCTION&PUSH 5)      ; REM-VERBIFY
10    (LOAD&PUSH 2)
11    (CALLSR&STORE 0 22 1)               ; MAPCAR
15    (PUSH)
16    (LOAD&JMPIFNOT 0 L48)
19    L19
19    (LOAD&CAR&PUSH 0)
21    (NIL)
22    (CONS&PUSH)
23    (GETVALUE 3)                        ; $FUNCTIONS
25    (CDR&PUSH)
26    (CALL2&JMPIF 6 L43)                 ; ZL-ASSOC
29    (LOAD&CAR&PUSH 0)
31    (NIL)
32    (CONS&PUSH)
33    (GETVALUE 4)                        ; $MACROS
35    (CDR&PUSH)
36    (CALL2&JMPIF 6 L43)                 ; ZL-ASSOC
39    (LOAD&PUSH 0)
40    (NIL&PUSH)
41    (CALLS1 168)                        ; RPLACA
43    L43
43    (LOAD&CDR&STORE 0)
45    (LOAD&JMPIF 0 L19)
48    L48
48    (SKIP 1)
50    L50
50    (LOAD&PUSH 1)
51    (CONST&PUSH 7)                      ; MEXPR
52    (T&PUSH)
53    (GETVALUE&PUSH 3)                   ; $FUNCTIONS
55    (T&PUSH)
56    (CALL 5 8)                          ; REMOVE1
59    (LOAD&PUSH 1)
60    (CONST&PUSH 9)                      ; MMACRO
61    (T&PUSH)
62    (GETVALUE&PUSH 4)                   ; $MACROS
64    (T&PUSH)
65    (CALL 5 8)                          ; REMOVE1
68    (CONST&PUSH 10)                     ; (MLIST)
69    (LOAD 2)
70    (CONS)
71    (SKIP&RET 2)
73    L73
73    (CONST&PUSH 2)                      ; #.#'CAAR
74    (GETVALUE 3)                        ; $FUNCTIONS
76    (CDR&PUSH)
77    (CALLSR&PUSH 0 22)                  ; MAPCAR
80    (CONST&PUSH 2)                      ; #.#'CAAR
81    (GETVALUE 4)                        ; $MACROS
83    (CDR&PUSH)
84    (CALLSR&PUSH 0 22)                  ; MAPCAR
87    (CALLSR&STORE 2 35 1)               ; NCONC
91    (JMP L50)


Disassembly of function #:|(DEFMSPEC $REMARRAY (L) ...)-93-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $REMARRAY (L) ...)-93-2-1|>
(CONST 1) = $REMARRAY
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $REMARRAY (L) ...)-93-2-1|>
1     (CONST&PUSH 1)                      ; $REMARRAY
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $REMARRAY (L) ...)-93-2-1|
(CONST 0) = (MLIST)
(CONST 1) = X
(CONST 2) = $ALL
(CONST 3) = $ARRAYS
(CONST 4) = REMCOMPARY
(CONST 5) = ARRAY
(CONST 6) = MREMPROP
(CONST 7) = HASHAR
(CONST 8) = AEXPR
(CONST 9) = 1
(CONST 10) = DELQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $ARRAYS)
writes special variable : (X)
61 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (CONST&PUSH 0)                      ; (MLIST)
3     (LOAD&PUSH 2)
4     (NIL)
5     (BIND 1)                            ; X
7     (NIL&PUSH)
8     (LOAD&JMPIFNOT 4 L64)
11    L11
11    (LOAD&CAR&PUSH 4)
13    (JMPIFEQTO 2 L76)                   ; $ALL
16    (LOAD&CAR&PUSH 4)
18    (CALL1 4)                           ; REMCOMPARY
20    (LOAD&CAR&PUSH 4)
22    (CONST&PUSH 5)                      ; ARRAY
23    (CALL2 6)                           ; MREMPROP
25    (STORE 0)
26    (LOAD&CAR&PUSH 4)
28    (CONST&PUSH 7)                      ; HASHAR
29    (CALL2&JMPIF 6 L33)                 ; MREMPROP
32    (LOAD 0)
33    L33
33    (STORE 0)
34    (LOAD&CAR&PUSH 4)
36    (CONST&PUSH 8)                      ; AEXPR
37    (CALL2&JMPIFNOT 6 L86)              ; MREMPROP
40    (STORE 0)
41    (JMPIFNOT L53)
43    L43
43    (LOAD&CAR&PUSH 4)
45    (GETVALUE&PUSH 3)                   ; $ARRAYS
47    (CONST&PUSH 9)                      ; 1
48    (CALL 3 10)                         ; DELQ
51    (LOAD 4)
52    (CAR)
53    L53
53    (PUSH)
54    (GETVALUE 1)                        ; X
56    (CONS)
57    (SETVALUE 1)                        ; X
59    L59
59    (LOAD&CDR&STORE 4)
61    (LOAD&JMPIF 4 L11)
64    L64
64    (GETVALUE&PUSH 1)                   ; X
66    (CALLS2 73)                         ; NREVERSE
68    (SKIP 1)
70    (UNBIND1)
71    (SKIP 1)
73    (CONS)
74    (SKIP&RET 2)
76    L76
76    (LOAD&PUSH 4)
77    (GETVALUE 3)                        ; $ARRAYS
79    (CDR&PUSH)
80    (CALLSR&STORE 2 34 4)               ; APPEND
84    (JMP L59)
86    L86
86    (LOAD 0)
87    (STORE 0)
88    (JMPIFNOT L53)
90    (JMP L43)


Disassembly of function #:|(DEFUN REMCOMPARY (X) ...)-94|
(CONST 0) = REMCOMPARY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMCOMPARY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMCOMPARY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMCOMPARY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMCOMPARY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMCOMPARY
8     (SKIP&RET 1)


Disassembly of function REMCOMPARY
(CONST 0) = X
(CONST 1) = ARRAY
(CONST 2) = MGET
(CONST 3) = ARRAY-MODE
(CONST 4) = ZL-REMPROP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (GETVALUE&PUSH 0)                   ; X
7     (CONST&PUSH 1)                      ; ARRAY
8     (CALL2 2)                           ; MGET
10    (JMPIFEQ L16)
12    (NIL)
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (CONST&PUSH 3)                      ; ARRAY-MODE
19    (CALL2 4)                           ; ZL-REMPROP
21    (GETVALUE&PUSH 0)                   ; X
23    (CONST&PUSH 1)                      ; ARRAY
24    (CALL2 4)                           ; ZL-REMPROP
26    (JMP L13)


Disassembly of function #:|(DEFMSPEC $REMVALUE (FORM) ...)-95-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $REMVALUE (FORM) ...)-95-2-1|>
(CONST 1) = $REMVALUE
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $REMVALUE (FORM) ...)-95-2-1|>
1     (CONST&PUSH 1)                      ; $REMVALUE
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $REMVALUE (FORM) ...)-95-2-1|
(CONST 0) = I-$REMVALUE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (CALL1 0)                           ; I-$REMVALUE
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN I-$REMVALUE (L) ...)-96|
(CONST 0) = I-$REMVALUE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE I-$REMVALUE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; I-$REMVALUE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; I-$REMVALUE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE I-$REMVALUE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; I-$REMVALUE
8     (SKIP&RET 1)


Disassembly of function I-$REMVALUE
(CONST 0) = (MLIST)
(CONST 1) = X
(CONST 2) = Y
(CONST 3) = $ALL
(CONST 4) = $VALUES
(CONST 5) = $REMVALUE
(CONST 6) = REMVALUE
(CONST 7) = (HASHAR ARRAY)
(CONST 8) = MGETL
(CONST 9) = REMARRELEM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $VALUES)
writes special variables : (X Y)
56 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MLIST)
1     (LOAD&PUSH 2)
2     (NIL)
3     (BIND 1)                            ; X
5     (NIL)
6     (BIND 2)                            ; Y
8     (LOAD&JMPIFNOT 6 L70)
11    L11
11    (LOAD&CAR&PUSH 6)
13    (JMPIFEQTO 3 L40)                   ; $ALL
16    (LOAD 6)
17    (CAR)
18    (JMPIFATOM L50)
20    (LOAD 6)
21    (CAR)
22    (CAR)
23    (CAR&PUSH)
24    (CONST&PUSH 7)                      ; (HASHAR ARRAY)
25    (CALL2 8)                           ; MGETL
27    (SETVALUE 2)                        ; Y
29    (JMPIFNOT L58)
31    (PUSH)
32    (LOAD&CAR&PUSH 7)
34    (CALL2 9)                           ; REMARRELEM
36    L36
36    (LOAD 6)
37    (CAR)
38    (JMP L59)
40    L40
40    (LOAD&PUSH 6)
41    (GETVALUE 4)                        ; $VALUES
43    (CDR&PUSH)
44    (CALLSR&STORE 2 34 6)               ; APPEND
48    (JMP L65)
50    L50
50    (LOAD&CAR&PUSH 6)
52    (CONST&PUSH 5)                      ; $REMVALUE
53    (CALL2&JMPIFNOT 6 L59)              ; REMVALUE
56    (JMP L36)
58    L58
58    (NIL)
59    L59
59    (PUSH)
60    (GETVALUE 1)                        ; X
62    (CONS)
63    (SETVALUE 1)                        ; X
65    L65
65    (LOAD&CDR&STORE 6)
67    (LOAD&JMPIF 6 L11)
70    L70
70    (GETVALUE&PUSH 1)                   ; X
72    (CALLS2 73)                         ; NREVERSE
74    (UNBIND 2)
76    (SKIP 1)
78    (CONS)
79    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN REMARRELEM (ARY FORM) ...)-97|
(CONST 0) = REMARRELEM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMARRELEM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMARRELEM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMARRELEM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMARRELEM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMARRELEM
8     (SKIP&RET 1)


Disassembly of function REMARRELEM
(CONST 0) = MFILEP
(CONST 1) = I-$UNSTORE
(CONST 2) = ARRAYDIMS
(CONST 3) = Y
(CONST 4) = FIXNUM
(CONST 5) = 0
(CONST 6) = FLONUM
(CONST 7) = 0.0
(CONST 8) = MUNBOUND
(CONST 9) = ARRSTORE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MUNBOUND Y)
34 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CALL1&JMPIFNOT 0 L13)              ; MFILEP
6     (LOAD 1)
7     (CAR)
8     (CAR&PUSH)
9     (NIL)
10    (CONS&PUSH)
11    (CALL1 1)                           ; I-$UNSTORE
13    L13
13    (LOAD 2)
14    (CDR)
15    (CAR&PUSH)
16    (CALL1 2)                           ; ARRAYDIMS
18    (CAR)
19    (BIND 3)                            ; Y
21    (LOAD&PUSH 4)
22    (GETVALUE&PUSH 3)                   ; Y
24    (JMPIFEQTO 4 L40)                   ; FIXNUM
27    (GETVALUE&PUSH 3)                   ; Y
29    (JMPIFEQTO 6 L43)                   ; FLONUM
32    (GETVALUE 8)                        ; MUNBOUND
34    L34
34    (PUSH)
35    (CALL2 9)                           ; ARRSTORE
37    (UNBIND1)
38    (SKIP&RET 3)
40    L40
40    (CONST 5)                           ; 0
41    (JMP L34)
43    L43
43    (CONST 7)                           ; 0.0
44    (JMP L34)


Disassembly of function #:|(DEFMFUN REMRULE (L) ...)-98|
(CONST 0) = REMRULE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMRULE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMRULE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMRULE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMRULE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMRULE
8     (SKIP&RET 1)


Disassembly of function REMRULE
(CONST 0) = $ALL
(CONST 1) = $RULES
(CONST 2) = OPERATORS
(CONST 3) = $REMRULE
(CONST 4) = RULEOF
(CONST 5) = $RULE
(CONST 6) = MGET
(CONST 7) = EXPR
(CONST 8) = ZL-REMPROP
(CONST 9) = MREMPROP
(CONST 10) = 1
(CONST 11) = DELQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($RULES)
51 byte-code instructions:
0     (LOAD&PUSH 1)
1     (NIL&PUSH)
2     (LOAD&JMPIFNOT 1 L79)
6     L6
6     (LOAD&CAR&PUSH 1)
8     (JMPIFEQTO 0 L34)                   ; $ALL
11    (LOAD&CAR&PUSH 1)
13    (CONST&PUSH 2)                      ; OPERATORS
14    (PUSH-UNBOUND 1)
16    (CALLS2&JMPIF 132 L44)              ; GET
19    (LOAD&CAR&PUSH 1)
21    (CALL1 4)                           ; RULEOF
23    (STORE 0)
24    (JMPIFNOT L49)
26    (PUSH)
27    (LOAD 2)
28    (CAR)
29    L29
29    (PUSH)
30    (CALL2 3)                           ; $REMRULE
32    (JMP L73)
34    L34
34    (LOAD&PUSH 1)
35    (GETVALUE 1)                        ; $RULES
37    (CDR&PUSH)
38    (CALLSR&STORE 2 34 1)               ; APPEND
42    (JMP L73)
44    L44
44    (LOAD&CAR&PUSH 1)
46    (CONST 0)                           ; $ALL
47    (JMP L29)
49    L49
49    (LOAD&CAR&PUSH 1)
51    (CONST&PUSH 5)                      ; $RULE
52    (CALL2&JMPIFNOT 6 L73)              ; MGET
55    (LOAD&CAR&PUSH 1)
57    (CONST&PUSH 7)                      ; EXPR
58    (CALL2 8)                           ; ZL-REMPROP
60    (LOAD&CAR&PUSH 1)
62    (CONST&PUSH 5)                      ; $RULE
63    (CALL2 9)                           ; MREMPROP
65    (LOAD&CAR&PUSH 1)
67    (GETVALUE&PUSH 1)                   ; $RULES
69    (CONST&PUSH 10)                     ; 1
70    (CALL 3 11)                         ; DELQ
73    L73
73    (LOAD&CDR&STORE 1)
75    (LOAD&JMPIF 1 L6)
79    L79
79    (NIL)
80    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN REMALIAS1 (L ALIASP) ...)-99|
(CONST 0) = REMALIAS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMALIAS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMALIAS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMALIAS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMALIAS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMALIAS1
8     (SKIP&RET 1)


Disassembly of function REMALIAS1
(CONST 0) = $ALL
(CONST 1) = $ALIASES
(CONST 2) = NOUN
(CONST 3) = REMALIAS
(CONST 4) = VERB
(CONST 5) = ZL-REMPROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($ALIASES)
39 byte-code instructions:
0     (LOAD&PUSH 2)
1     (NIL&PUSH)
2     (LOAD&JMPIFNOT 1 L45)
5     L5
5     (LOAD&CAR&PUSH 1)
7     (JMPIFEQTO 0 L48)                   ; $ALL
10    (LOAD&JMPIF 3 L58)
13    (LOAD&CAR&PUSH 1)
15    (CONST&PUSH 2)                      ; NOUN
16    (PUSH-UNBOUND 1)
18    (CALLS2&JMPIF 132 L58)              ; GET
21    (LOAD&CAR&PUSH 1)
23    (CONST&PUSH 4)                      ; VERB
24    (PUSH-UNBOUND 1)
26    (CALLS2&STORE 132 0)                ; GET
29    (JMPIFNOT L40)
31    (LOAD&CAR&PUSH 1)
33    (CONST&PUSH 4)                      ; VERB
34    (CALL2 5)                           ; ZL-REMPROP
36    (LOAD&PUSH 0)
37    (CONST&PUSH 2)                      ; NOUN
38    (CALL2 5)                           ; ZL-REMPROP
40    L40
40    (LOAD&CDR&STORE 1)
42    (LOAD&JMPIF 1 L5)
45    L45
45    (NIL)
46    (SKIP&RET 5)
48    L48
48    (LOAD&PUSH 1)
49    (GETVALUE 1)                        ; $ALIASES
51    (CDR&PUSH)
52    (CALLSR&STORE 2 34 1)               ; APPEND
56    (JMP L40)
58    L58
58    (LOAD&CAR&PUSH 1)
60    (T&PUSH)
61    (CALL2 3)                           ; REMALIAS
63    (JMP L40)


Disassembly of function #:|(DEFMFUN MREMPROP (ATOM IND) ...)-100|
(CONST 0) = MREMPROP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MREMPROP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MREMPROP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MREMPROP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MREMPROP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MREMPROP
8     (SKIP&RET 1)


Disassembly of function MREMPROP
(CONST 0) = MPROPS
(CONST 1) = ZL-REMPROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CONST&PUSH 0)                      ; MPROPS
2     (PUSH-UNBOUND 1)
4     (CALLS2&PUSH 132)                   ; GET
6     (LOAD 0)
7     (JMPIFNOT1 L15)
9     (PUSH)
10    (LOAD&PUSH 3)
11    (CALL2 1)                           ; ZL-REMPROP
13    (SKIP&RET 4)
15    L15
15    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN MGETL (ATOM INDS) ...)-101|
(CONST 0) = MGETL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MGETL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGETL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MGETL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MGETL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MGETL
8     (SKIP&RET 1)


Disassembly of function MGETL
(CONST 0) = MPROPS
(CONST 1) = GETL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CONST&PUSH 0)                      ; MPROPS
2     (PUSH-UNBOUND 1)
4     (CALLS2&PUSH 132)                   ; GET
6     (LOAD 0)
7     (JMPIFNOT1 L15)
9     (PUSH)
10    (LOAD&PUSH 3)
11    (CALL2 1)                           ; GETL
13    (SKIP&RET 4)
15    L15
15    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $MATRIX N ...)-102|
(CONST 0) = $MATRIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MATRIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MATRIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MATRIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MATRIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MATRIX
8     (SKIP&RET 1)


Disassembly of function $MATRIX
(CONST 0) = 0
(CONST 1) = ($MATRIX)
(CONST 2) = LISTIFY1
(CONST 3) = $LISTP
(CONST 4) = "Invalid matrix row:~%~M"
(CONST 5) = MERROR
(CONST 6) = MATCHECK
(CONST 7) = ($MATRIX)
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
35 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 0
5     (CALLSR&JMPIF 1 45 L17)             ; =
9     (LOAD&PUSH 0)
10    (LOAD&PUSH 3)
11    (CALL2&PUSH 2)                      ; LISTIFY1
13    (LOAD&PUSH 0)
14    (NIL&PUSH)
15    (JMP L35)
17    L17
17    (CONST&PUSH 1)                      ; ($MATRIX)
18    (NIL)
19    (CONS)
20    (SKIP&RET 3)
22    L22
22    (LOAD&CAR&STORE 1 0)
25    (PUSH)
26    (CALL1&JMPIF 3 L33)                 ; $LISTP
29    (CONST&PUSH 4)                      ; "Invalid matrix row:~%~M"
30    (LOAD&PUSH 1)
31    (CALL2 5)                           ; MERROR
33    L33
33    (LOAD&CDR&STORE 1)
35    L35
35    (LOAD&PUSH 1)
36    (CALLS1&JMPIFNOT 146 L22)           ; ENDP
39    (SKIP 2)
41    (LOAD&PUSH 0)
42    (CALL1 6)                           ; MATCHECK
44    (CONST&PUSH 7)                      ; ($MATRIX)
45    (LOAD 1)
46    (CONS)
47    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN MATCHECK (L) ...)-103|
(CONST 0) = MATCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MATCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MATCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MATCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MATCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MATCHECK
8     (SKIP&RET 1)


Disassembly of function MATCHECK
(CONST 0) = "All matrix rows are not of the same length."
(CONST 1) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (LOAD&CAR&PUSH 2)
4     (CALLS2&PUSH 71)                    ; LENGTH
6     (LOAD&JMPIFNOT 1 L26)
9     L9
9     (LOAD&PUSH 0)
10    (LOAD&CAR&PUSH 2)
12    (CALLS2&PUSH 71)                    ; LENGTH
14    (CALLSR&JMPIF 1 45 L21)             ; =
18    (CONST&PUSH 0)                      ; "All matrix rows are not of the same length."
19    (CALL1 1)                           ; MERROR
21    L21
21    (LOAD&CDR&STORE 1)
23    (LOAD&JMPIF 1 L9)
26    L26
26    (NIL)
27    (SKIP&RET 4)


Disassembly of function #:|(DEFUN HARRFIND (FORM) ...)-104|
(CONST 0) = HARRFIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HARRFIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HARRFIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HARRFIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HARRFIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HARRFIND
8     (SKIP&RET 1)


Disassembly of function HARRFIND
(CONST 0) = Y
(CONST 1) = HASHAR
(CONST 2) = MGET
(CONST 3) = ARRAY
(CONST 4) = 2
(CONST 5) = "Array ~:M already has dimension ~:M~%~M"
(CONST 6) = MERROR
(CONST 7) = 3
(CONST 8) = HASHER
(CONST 9) = 0
(CONST 10) = ALIKE
(CONST 11) = EVARRP
(CONST 12) = NOTEXIST
(CONST 13) = ARRFUNP
(CONST 14) = MEVAL2
(CONST 15) = ARRFUNCALL
(CONST 16) = 1
(CONST 17) = ARRAYSIZE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EVARRP Y)
writes special variable : (Y)
148 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; Y
4     (PUSH-NIL 5)
6     (LOAD 10)
7     (CAR)
8     (CAR&PUSH)
9     (CONST&PUSH 1)                      ; HASHAR
10    (CALL2&PUSH 2)                      ; MGET
12    (CONST&PUSH 3)                      ; ARRAY
13    (PUSH-UNBOUND 1)
15    (CALLS2&STORE 132 8)                ; GET
18    (PUSH)
19    (CONST&PUSH 4)                      ; 2
20    (CALLSR&PUSH 1 1)                   ; AREF
23    (LOAD&CDR&PUSH 11)
25    (CALLS2&PUSH 71)                    ; LENGTH
27    (CALLSR&JMPIF 1 45 L44)             ; =
31    (CONST&PUSH 5)                      ; "Array ~:M already has dimension ~:M~%~M"
32    (LOAD 11)
33    (CAR)
34    (CAR&PUSH)
35    (LOAD&PUSH 10)
36    (CONST&PUSH 4)                      ; 2
37    (CALLSR&PUSH 1 1)                   ; AREF
40    (LOAD&PUSH 13)
41    (CALL 4 6)                          ; MERROR
44    L44
44    (LOAD 10)
45    (CDR)
46    (STORE 2)
47    (LOAD&PUSH 8)
48    (CONST&PUSH 7)                      ; 3
49    (LOAD&PUSH 4)
50    (CALL1&PUSH 8)                      ; HASHER
52    (LOAD&PUSH 11)
53    (CONST&PUSH 9)                      ; 0
54    (CALLSR&PUSH 1 1)                   ; AREF
57    (CALLS2&PUSH 184)                   ; REM
59    (CALLSR&STORE 2 53 5)               ; +
63    (PUSH)
64    (CALLSR 1 1)                        ; AREF
67    (JMP L117)
69    L69
69    (LOAD 3)
70    (CAR)
71    (CDR)
72    (JMP L225)
75    L75
75    (CONST&PUSH 11)                     ; EVARRP
76    (CONST 12)                          ; NOTEXIST
77    (THROW)
78    L78
78    (LOAD&PUSH 2)
79    (LOAD&PUSH 11)
80    (CALL2 14)                          ; MEVAL2
82    (JMP L225)
85    L85
85    (PUSH)
86    (LOAD&PUSH 3)
87    (CALLSR 2 35)                       ; NCONC
90    (JMP L193)
93    L93
93    (LOAD 10)
94    (CAR)
95    (CAR&PUSH)
96    (LOAD&PUSH 2)
97    (LOAD&PUSH 3)
98    (CALLSR&PUSH 2 53)                  ; +
101   (CALL2 17)                          ; ARRAYSIZE
103   (GETVALUE 0)                        ; Y
105   (JMP L225)
108   L108
108   (LOAD 3)
109   (CAR)
110   (CAR&PUSH)
111   (LOAD&PUSH 3)
112   (CALL2&JMPIF 10 L69)                ; ALIKE
115   (LOAD 3)
116   (CDR)
117   L117
117   (STORE 3)
118   (LOAD&JMPIF 3 L108)
121   (GETVALUE 11)                       ; EVARRP
123   (JMPIF L75)
125   (LOAD 10)
126   (CAR)
127   (CAR&PUSH)
128   (CALL1 13)                          ; ARRFUNP
130   (SETVALUE 0)                        ; Y
132   (JMPIFNOT L78)
134   (GETVALUE&PUSH 0)                   ; Y
136   (LOAD&PUSH 3)
137   (LOAD&PUSH 12)
138   (CALL 3 15)                         ; ARRFUNCALL
141   (SETVALUE 0)                        ; Y
143   (LOAD 10)
144   (CAR)
145   (CAR&PUSH)
146   (CONST&PUSH 1)                      ; HASHAR
147   (CALL2&PUSH 2)                      ; MGET
149   (CONST&PUSH 3)                      ; ARRAY
150   (PUSH-UNBOUND 1)
152   (CALLS2&STORE 132 8)                ; GET
155   (PUSH)
156   (CONST&PUSH 7)                      ; 3
157   (LOAD&PUSH 4)
158   (CALL1&PUSH 8)                      ; HASHER
160   (LOAD&PUSH 11)
161   (CONST&PUSH 9)                      ; 0
162   (CALLSR&PUSH 1 1)                   ; AREF
165   (CALLS2&PUSH 184)                   ; REM
167   (CALLSR&STORE 2 53 5)               ; +
171   (PUSH)
172   (CALLSR&STORE 1 1 3)                ; AREF
176   (LOAD&PUSH 2)
177   (GETVALUE 0)                        ; Y
179   (CONS&PUSH)
180   (NIL)
181   (CONS)
182   (STORE 2)
183   (LOAD&JMPIF 3 L85)
187   (LOAD&PUSH 8)
188   (LOAD&PUSH 5)
189   (LOAD&PUSH 4)
190   (CALLSR 1 2)                        ; SYSTEM::STORE
193   L193
193   (LOAD&PUSH 8)
194   (CONST&PUSH 16)                     ; 1
195   (CALLSR&PUSH 1 1)                   ; AREF
198   (CALLS2&STORE 150 0)                ; 1+
201   (PUSH)
202   (LOAD&PUSH 9)
203   (CONST&PUSH 16)                     ; 1
204   (LOAD&PUSH 2)
205   (CALLSR 1 2)                        ; SYSTEM::STORE
208   (SKIP 1)
210   (LOAD&PUSH 0)
211   (LOAD&PUSH 9)
212   (CONST&PUSH 9)                      ; 0
213   (CALLSR&STORE 1 1 2)                ; AREF
217   (PUSH)
218   (CALLSR&JMPIF 1 48 L93)             ; >
223   (GETVALUE 0)                        ; Y
225   L225
225   (SKIP 5)
227   (UNBIND1)
228   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ARRFIND (FORM) ...)-105|
(CONST 0) = ARRFIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARRFIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRFIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARRFIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARRFIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARRFIND
8     (SKIP&RET 1)


Disassembly of function ARRFIND
(CONST 0) = DIMCHECK
(CONST 1) = ARRAY
(CONST 2) = MGET
(CONST 3) = ARRAYDIMS
(CONST 4) = AREF
(CONST 5) = FLONUM
(CONST 6) = FLOUNBOUND
(CONST 7) = FIXNUM
(CONST 8) = FIXUNBOUND
(CONST 9) = MUNBOUND
(CONST 10) = EVARRP
(CONST 11) = NOTEXIST
(CONST 12) = ARRFUNP
(CONST 13) = 0.0
(CONST 14) = 0
(CONST 15) = MEVAL2
(CONST 16) = ARRFUNCALL
(CONST 17) = #.#'SYSTEM::STORE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EVARRP MUNBOUND FLOUNBOUND FIXUNBOUND)
106 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (PUSH-NIL 3)
4     (LOAD 5)
5     (CAR)
6     (CAR&PUSH)
7     (LOAD&PUSH 4)
8     (NIL&PUSH)
9     (CALL 3 0)                          ; DIMCHECK
12    (STORE 1)
13    (JMPIF L54)
15    (LOAD&JMPIFNOT 1 L102)
19    L19
19    (CONST&PUSH 4)                      ; AREF
20    (LOAD 6)
21    (CAR)
22    (CAR&PUSH)
23    (CONST&PUSH 1)                      ; ARRAY
24    (CALL2&PUSH 2)                      ; MGET
26    (CONST&PUSH 1)                      ; ARRAY
27    (PUSH-UNBOUND 1)
29    (CALLS2&PUSH 132)                   ; GET
31    (LOAD 5)
32    (APPLY 1)
34    (STORE 2)
35    (LOAD&PUSH 0)
36    (JMPIFEQTO 5 L69)                   ; FLONUM
39    (LOAD&PUSH 0)
40    (JMPIFNOTEQTO 7 L97)                ; FIXNUM
43    (LOAD&PUSH 2)
44    (GETVALUE 8)                        ; FIXUNBOUND
46    L46
46    (PUSH)
47    (CALLSR&JMPIFNOT 1 45 L148)         ; =
52    (JMP L102)
54    L54
54    (LOAD 5)
55    (CAR)
56    (CAR&PUSH)
57    (CONST&PUSH 1)                      ; ARRAY
58    (CALL2&PUSH 2)                      ; MGET
60    (CALL1 3)                           ; ARRAYDIMS
62    (CAR)
63    (STORE 0)
64    (LOAD&JMPIFNOT 1 L102)
67    (JMP L19)
69    L69
69    (LOAD&PUSH 2)
70    (GETVALUE 6)                        ; FLOUNBOUND
72    (JMP L46)
74    L74
74    (CONST&PUSH 10)                     ; EVARRP
75    (CONST 11)                          ; NOTEXIST
76    (THROW)
77    L77
77    (CONST 13)                          ; 0.0
78    (SKIP&RET 6)
80    L80
80    (CONST 14)                          ; 0
81    (SKIP&RET 6)
83    L83
83    (LOAD&PUSH 0)
84    (JMPIFEQTO 5 L77)                   ; FLONUM
87    (LOAD&PUSH 0)
88    (JMPIFEQTO 7 L80)                   ; FIXNUM
91    (LOAD&PUSH 3)
92    (LOAD&PUSH 6)
93    (CALL2 15)                          ; MEVAL2
95    (SKIP&RET 6)
97    L97
97    (LOAD&PUSH 2)
98    (GETVALUE 9)                        ; MUNBOUND
100   (JMPIFNOTEQ L148)
102   L102
102   (GETVALUE 10)                       ; EVARRP
104   (JMPIF L74)
106   (LOAD&JMPIFNOT 1 L83)
109   (LOAD 5)
110   (CAR)
111   (CAR&PUSH)
112   (CALL1 12)                          ; ARRFUNP
114   (STORE 2)
115   (JMPIFNOT L83)
117   (LOAD&PUSH 2)
118   (LOAD&PUSH 4)
119   (LOAD&PUSH 7)
120   (CALL 3 16)                         ; ARRFUNCALL
123   (STORE 2)
124   (LOAD 5)
125   (CAR)
126   (CAR&PUSH)
127   (CONST&PUSH 1)                      ; ARRAY
128   (CALL2&PUSH 2)                      ; MGET
130   (CONST&PUSH 1)                      ; ARRAY
131   (PUSH-UNBOUND 1)
133   (CALLS2&PUSH 132)                   ; GET
135   (CONST&PUSH 17)                     ; #.#'SYSTEM::STORE
136   (LOAD&PUSH 1)
137   (LOAD&PUSH 6)
138   (LOAD&PUSH 6)
139   (LIST&PUSH 1)
141   (CALLSR 2 34)                       ; APPEND
144   (APPLY 1)
146   (SKIP 1)
148   L148
148   (LOAD 2)
149   (SKIP&RET 6)


Disassembly of function #:|(DEFMSPEC $ARRAY (X) ...)-106-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $ARRAY (X) ...)-106-2-1|>
(CONST 1) = $ARRAY
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $ARRAY (X) ...)-106-2-1|>
1     (CONST&PUSH 1)                      ; $ARRAY
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $ARRAY (X) ...)-106-2-1|
(CONST 0) = X
(CONST 1) = $USE_FAST_ARRAYS
(CONST 2) = $MAKE_ARRAY
(CONST 3) = $ANY
(CONST 4) = #.#'1+
(CONST 5) = MSET
(CONST 6) = 
(($COMPLETE . T) ($INTEGER . FIXNUM) ($FIXNUM . FIXNUM) ($FLOAT . FLONUM)
 ($FLONUM . FLONUM))
(CONST 7) = ASSQ
(CONST 8) = $VERBIFY
(CONST 9) = 0
(CONST 10) = $FUNCTION
(CONST 11) = MEMQ
(CONST 12) = 1
(CONST 13) = DELQ
(CONST 14) = MEVAL
(CONST 15) = $ARRAY
(CONST 16) = WNA-ERR
(CONST 17) = 5
(CONST 18) = "ARRAY takes at most 5 indices"
(CONST 19) = MERROR
(CONST 20) = ML-TYPEP
(CONST 21) = FIXNUM
(CONST 22) = "Non-integer dimension - ARRAY"
(CONST 23) = *ARRAY
(CONST 24) = (0)
(CONST 25) = FILLARRAY
(CONST 26) = FLONUM
(CONST 27) = (0.0)
(CONST 28) = (FIXNUM FLONUM)
(CONST 29) = MUNBOUND
(CONST 30) = ARRFUNP
(CONST 31) = FIXUNBOUND
(CONST 32) = FLOUNBOUND
(CONST 33) = HASHAR
(CONST 34) = MGET
(CONST 35) = ARRAY
(CONST 36) = MPUTPROP
(CONST 37) = 2
(CONST 38) = "Array ~:M already has ~:M dimension(s)"
(CONST 39) = 3
(CONST 40) = Y
(CONST 41) = "Improper index for declared array:~%~M"
(CONST 42) = (FIXNUM FLONUM)
(CONST 43) = "Element and array type do not match:~%~M"
(CONST 44) = #.#'SYSTEM::STORE
(CONST 45) = MREMPROP
(CONST 46) = $ARRAYS
(CONST 47) = ADD2LNC
(CONST 48) = $FIXNUM
(CONST 49) = ARRAY-MODE
(CONST 50) = PUTPROP
(CONST 51) = $FLOAT
(CONST 52) = $LISTP
(CONST 53) = ($ARRAY)
(CONST 54) = "Improper first argument to ARRAY:~%~M"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ARRAYS Y FLOUNBOUND FIXUNBOUND MUNBOUND $USE_FAST_ARRAYS X)
writes special variables : (Y X)
339 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (SETVALUE 0)                        ; X
8     (GETVALUE 1)                        ; $USE_FAST_ARRAYS
10    (JMPIF L35)
12    (GETVALUE 0)                        ; X
14    (CAR&PUSH)
15    (CALLS2&JMPIF 6 L71)                ; SYMBOLP
18    (GETVALUE 0)                        ; X
20    (CAR&PUSH)
21    (CALL1&JMPIF 52 L518)               ; $LISTP
25    (CONST&PUSH 54)                     ; "Improper first argument to ARRAY:~%~M"
27    (GETVALUE 0)                        ; X
29    (CAR&PUSH)
30    (CALL2 19)                          ; MERROR
32    L32
32    (UNBIND1)
33    (SKIP&RET 2)
35    L35
35    (GETVALUE 0)                        ; X
37    (CAR&PUSH)
38    (CONST&PUSH 2)                      ; $MAKE_ARRAY
39    (CONST&PUSH 3)                      ; $ANY
40    (CONST&PUSH 4)                      ; #.#'1+
41    (GETVALUE 0)                        ; X
43    (CDR&PUSH)
44    (CALLSR 0 22)                       ; MAPCAR
47    (APPLY&PUSH 1)
49    (CALL2 5)                           ; MSET
51    (JMP L32)
53    L53
53    (CDR)
54    (STORE 1)
55    (GETVALUE 0)                        ; X
57    (CDR)
58    (CDR)
59    (JMP L89)
61    L61
61    (CONST&PUSH 15)                     ; $ARRAY
62    (CALL1 16)                          ; WNA-ERR
64    (JMP L192)
67    L67
67    (CONST 18)                          ; "ARRAY takes at most 5 indices"
68    (JMP L189)
71    L71
71    (GETVALUE 0)                        ; X
73    (CDR)
74    (CAR&PUSH)
75    (CONST&PUSH 6)                      ; (# # # ...)
76    (CALL2&PUSH 7)                      ; ASSQ
78    (GETVALUE 0)                        ; X
80    (CAR&PUSH)
81    (CALL1&PUSH 8)                      ; $VERBIFY
83    (LOAD&JMPIF 1 L53)
86    (GETVALUE 0)                        ; X
88    (CDR)
89    L89
89    (PUSH)
90    (PUSH-NIL 3)
92    (CONST&PUSH 9)                      ; 0
93    (CONST&PUSH 10)                     ; $FUNCTION
94    (LOAD&PUSH 5)
95    (CALL2&JMPIFNOT 11 L109)            ; MEMQ
98    (CONST&PUSH 10)                     ; $FUNCTION
99    (LOAD&PUSH 5)
100   (CALLS1&PUSH 158)                   ; COPY-LIST
102   (CONST&PUSH 12)                     ; 1
103   (CALL 3 13)                         ; DELQ
106   (STORE 4)
107   (T&STORE 3)
109   L109
109   (CONST&SYMBOL-FUNCTION&PUSH 14)     ; MEVAL
111   (LOAD&PUSH 5)
112   (CALLSR&STORE 0 22 4)               ; MAPCAR
116   (JMPIFNOT L61)
118   (LOAD&PUSH 4)
119   (CALLS2&PUSH 71)                    ; LENGTH
121   (CONST&PUSH 17)                     ; 5
122   (CALLSR&JMPIF 1 48 L67)             ; >
126   (PUSH-NIL 2)
128   (LOAD&PUSH 6)
129   (JMP L174)
131   L131
131   (LOAD 6)
132   (JMP L208)
135   L135
135   (LOAD&PUSH 1)
136   (CONST 24)                          ; (0)
138   (JMP L228)
141   L141
141   (LOAD&PUSH 1)
142   (GETVALUE 29)                       ; MUNBOUND
144   (JMP L252)
147   L147
147   (GETVALUE 31)                       ; FIXUNBOUND
149   (JMP L252)
152   L152
152   (LOAD&PUSH 5)
153   (LOAD&PUSH 2)
154   (CONST 35)                          ; ARRAY
156   (JMP L479)
159   L159
159   (LOAD&CAR&PUSH 0)
161   (LOAD&PUSH 0)
162   (CALL1&PUSH 20)                     ; ML-TYPEP
164   (CONST 21)                          ; FIXNUM
166   (EQ)
167   (PUSH)
168   (LOAD&CONS&STORE 2)
170   (SKIP 1)
172   (LOAD&CDR&STORE 0)
174   L174
174   (LOAD&PUSH 0)
175   (CALLS1&JMPIFNOT 146 L159)          ; ENDP
178   (SKIP 1)
180   (LOAD&PUSH 0)
181   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
184   (CALL2&JMPIFNOT 11 L192)            ; MEMQ
187   (CONST 22)                          ; "Non-integer dimension - ARRAY"
189   L189
189   (PUSH)
190   (CALL1 19)                          ; MERROR
192   L192
192   (CONST&PUSH 4)                      ; #.#'1+
193   (LOAD&PUSH 5)
194   (CALLSR&STORE 0 22 4)               ; MAPCAR
198   (CONST&SYMBOL-FUNCTION&PUSH 23)     ; *ARRAY
200   (LOAD&JMPIF 7 L131)
204   (PUSH-UNBOUND 1)
206   (CALLS2 143)                        ; GENSYM
208   L208
208   (PUSH)
209   (T&PUSH)
210   (LOAD 7)
211   (CONS)
212   (CONS)
213   (APPLY 0)
215   (STORE 1)
216   (LOAD&PUSH 6)
217   (JMPIFEQTO 21 L135)                 ; FIXNUM
221   (LOAD&PUSH 6)
222   (JMPIFNOTEQTO 26 L231)              ; FLONUM
225   (LOAD&PUSH 1)
226   (CONST 27)                          ; (0.0)
228   L228
228   (PUSH)
229   (CALL2 25)                          ; FILLARRAY
231   L231
231   (LOAD&PUSH 6)
232   (CONST&PUSH 28)                     ; (FIXNUM FLONUM)
233   (CALL2&JMPIFNOT 11 L141)            ; MEMQ
237   (LOAD&JMPIF 3 L244)
240   (LOAD&PUSH 5)
241   (CALL1&JMPIFNOT 30 L257)            ; ARRFUNP
244   L244
244   (LOAD&PUSH 1)
245   (LOAD&PUSH 7)
246   (JMPIFEQTO 21 L147)                 ; FIXNUM
250   (GETVALUE 32)                       ; FLOUNBOUND
252   L252
252   (PUSH)
253   (LIST&PUSH 1)
255   (CALL2 25)                          ; FILLARRAY
257   L257
257   (LOAD&PUSH 5)
258   (CONST&PUSH 33)                     ; HASHAR
260   (CALL2 34)                          ; MGET
262   (STORE 2)
263   (JMPIFNOT L152)
266   (LOAD&PUSH 2)
267   (CONST&PUSH 35)                     ; ARRAY
269   (PUSH-UNBOUND 1)
271   (CALLS2&PUSH 132)                   ; GET
273   (CONST&PUSH 37)                     ; 2
275   (CALLSR&PUSH 1 1)                   ; AREF
278   (LOAD&PUSH 5)
279   (CALLS2&PUSH 71)                    ; LENGTH
281   (CALLSR&JMPIF 1 45 L303)            ; =
285   (CONST&PUSH 38)                     ; "Array ~:M already has ~:M dimension(s)"
287   (LOAD&PUSH 6)
288   (LOAD&PUSH 4)
289   (CONST&PUSH 35)                     ; ARRAY
291   (PUSH-UNBOUND 1)
293   (CALLS2&PUSH 132)                   ; GET
295   (CONST&PUSH 37)                     ; 2
297   (CALLSR&PUSH 1 1)                   ; AREF
300   (CALL 3 19)                         ; MERROR
303   L303
303   (CONST&PUSH 37)                     ; 2
305   (LOAD&PUSH 3)
306   (CONST&PUSH 35)                     ; ARRAY
308   (PUSH-UNBOUND 1)
310   (CALLS2&PUSH 132)                   ; GET
312   (CONST&PUSH 9)                      ; 0
313   (CALLSR&PUSH 1 1)                   ; AREF
316   (CALLSR&STORE 2 53 0)               ; +
320   (CONST&PUSH 39)                     ; 3
322   (JMP L461)
325   L325
325   (LOAD&PUSH 3)
326   (CONST&PUSH 35)                     ; ARRAY
328   (PUSH-UNBOUND 1)
330   (CALLS2&PUSH 132)                   ; GET
332   (LOAD&PUSH 1)
333   (CALLSR&PUSH 1 1)                   ; AREF
336   (LOAD&JMPIFNOT 0 L457)
340   L340
340   (LOAD 0)
341   (CAR)
342   (CAR)
343   (BIND 0)                            ; X
345   (LOAD 9)
346   (BIND 40)                           ; Y
348   (GETVALUE 0)                        ; X
350   (JMPIFNOT L400)
352   L352
352   (GETVALUE 0)                        ; X
354   (CAR&PUSH)
355   (CALL1&PUSH 20)                     ; ML-TYPEP
357   (JMPIFNOTEQTO 21 L378)              ; FIXNUM
360   (GETVALUE 0)                        ; X
362   (CAR&PUSH)
363   (CONST&PUSH 9)                      ; 0
364   (CALLSR&JMPIF 1 47 L378)            ; <
368   (GETVALUE 0)                        ; X
370   (CAR&PUSH)
371   (GETVALUE 40)                       ; Y
373   (CAR&PUSH)
374   (CALLSR&JMPIF 1 47 L385)            ; <
378   L378
378   (CONST&PUSH 41)                     ; "Improper index for declared array:~%~M"
380   (GETVALUE 0)                        ; X
382   (CAR&PUSH)
383   (CALL2 19)                          ; MERROR
385   L385
385   (GETVALUE 0)                        ; X
387   (CDR&PUSH)
388   (GETVALUE 40)                       ; Y
390   (CDR)
391   (SETVALUE 40)                       ; Y
393   (POP)
394   (SETVALUE 0)                        ; X
396   (GETVALUE 0)                        ; X
398   (JMPIF L352)
400   L400
400   (LOAD&PUSH 14)
401   (CONST&PUSH 42)                     ; (FIXNUM FLONUM)
403   (CALL2&JMPIFNOT 11 L422)            ; MEMQ
406   (LOAD 6)
407   (CAR)
408   (CDR&PUSH)
409   (CALL1&PUSH 20)                     ; ML-TYPEP
411   (LOAD 15)
413   (JMPIFEQ L422)
415   (CONST&PUSH 43)                     ; "Element and array type do not match:~%~M"
417   (LOAD 7)
418   (CAR)
419   (CDR&PUSH)
420   (CALL2 19)                          ; MERROR
422   L422
422   (LOAD&PUSH 9)
423   (CONST&PUSH 35)                     ; ARRAY
425   (PUSH-UNBOUND 1)
427   (CALLS2&PUSH 132)                   ; GET
429   (LOAD 7)
430   (CAR)
431   (CAR&PUSH)
432   (LOAD 8)
433   (CAR)
434   (CDR&PUSH)
435   (CONST&PUSH 44)                     ; #.#'SYSTEM::STORE
437   (LOAD&PUSH 3)
438   (LOAD&PUSH 3)
439   (LOAD&PUSH 3)
440   (LIST&PUSH 1)
442   (CALLSR 2 34)                       ; APPEND
445   (APPLY 1)
447   (SKIP 3)
449   (UNBIND 2)
451   (LOAD&CDR&STORE 0)
453   (LOAD&JMPIF 0 L340)
457   L457
457   (SKIP 1)
459   (LOAD&INC&STORE 0)
461   L461
461   (LOAD&PUSH 0)
462   (LOAD&PUSH 2)
463   (CALLSR&JMPIFNOT 1 48 L325)         ; >
468   (SKIP 1)
470   (LOAD&PUSH 5)
471   (CONST&PUSH 33)                     ; HASHAR
473   (CALL2 45)                          ; MREMPROP
475   (LOAD&PUSH 5)
476   (LOAD&PUSH 2)
477   (CONST 35)                          ; ARRAY
479   L479
479   (PUSH)
480   (CALL 3 36)                         ; MPUTPROP
483   (LOAD&PUSH 5)
484   (GETVALUE&PUSH 46)                  ; $ARRAYS
486   (CALL2 47)                          ; ADD2LNC
488   (LOAD&PUSH 6)
489   (JMPIFNOTEQTO 21 L500)              ; FIXNUM
492   (LOAD&PUSH 5)
493   (CONST&PUSH 48)                     ; $FIXNUM
495   (CONST&PUSH 49)                     ; ARRAY-MODE
497   (CALL 3 50)                         ; PUTPROP
500   L500
500   (LOAD&PUSH 6)
501   (JMPIFNOTEQTO 26 L512)              ; FLONUM
504   (LOAD&PUSH 5)
505   (CONST&PUSH 51)                     ; $FLOAT
507   (CONST&PUSH 49)                     ; ARRAY-MODE
509   (CALL 3 50)                         ; PUTPROP
512   L512
512   (LOAD 5)
513   (SKIP 7)
515   (JMP L32)
518   L518
518   (GETVALUE 0)                        ; X
520   (CAR)
521   (CDR&PUSH)
522   (LOAD&JMPIFNOT 0 L541)
525   L525
525   (CONST&PUSH 53)                     ; ($ARRAY)
527   (LOAD&CAR&PUSH 1)
529   (GETVALUE 0)                        ; X
531   (CDR)
532   (LIST*&PUSH 2)
534   (CALL1 14)                          ; MEVAL
536   (LOAD&CDR&STORE 0)
538   (LOAD&JMPIF 0 L525)
541   L541
541   (SKIP 1)
543   (GETVALUE 0)                        ; X
545   (CAR)
546   (JMP L32)


Disassembly of function #:|(DEFMFUN $SHOW_HASH_ARRAY (X) ...)-107|
(CONST 0) = $SHOW_HASH_ARRAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SHOW_HASH_ARRAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SHOW_HASH_ARRAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SHOW_HASH_ARRAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SHOW_HASH_ARRAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SHOW_HASH_ARRAY
8     (SKIP&RET 1)


Disassembly of function $SHOW_HASH_ARRAY
(CONST 0) = X
(CONST 1) = :MAP-HASH
(CONST 2) = (LAMBDA (U V) (FORMAT T "~%~A-->~A" U V))
(CONST 3) = SEND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; :MAP-HASH
6     (CONST&PUSH 2)                      ; (LAMBDA (U V) ...)
7     (CALL 3 3)                          ; SEND
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMVAR $USE_FAST_ARRAYS NIL)-108-1|
(CONST 0) = $USE_FAST_ARRAYS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $USE_FAST_ARRAYS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $USE_FAST_ARRAYS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $USE_FAST_ARRAYS NIL)-108-2|
(CONST 0) = (SPECIAL $USE_FAST_ARRAYS)
(CONST 1) = $USE_FAST_ARRAYS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $USE_FAST_ARRAYS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $USE_FAST_ARRAYS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $USE_FAST_ARRAYS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $USE_FAST_ARRAYS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN ARRSTORE (L R &AUX ...) ...)-109|
(CONST 0) = ARRSTORE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARRSTORE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRSTORE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARRSTORE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARRSTORE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARRSTORE
8     (SKIP&RET 1)


Disassembly of function ARRSTORE
(CONST 0) = $USE_FAST_ARRAYS
(CONST 1) = MEVALARGS
(CONST 2) = ML-TYPEP
(CONST 3) = ARRAY
(CONST 4) = #.#'SYSTEM::STORE
(CONST 5) = HASH-TABLE
(CONST 6) = DIM1
(CONST 7) = "Array has dimension 1"
(CONST 8) = "Array has dimension > 1"
(CONST 9) = LIST
(CONST 10) = MLIST
(CONST 11) = SYSTEM::%SETNTH
(CONST 12) = $MATRIX
(CONST 13) = 
"The value of ~A is not a hash-table ,an ~
                                           array, macsyma list, or a matrix"
(CONST 14) = (MSET)
(CONST 15) = MAKE-EQUAL-HASH-TABLE
(CONST 16) = MEVAL*
(CONST 17) = "The value of ~A is not a hash-table , an array,a macsyma list, or a matrix"
(CONST 18) = HASHAR
(CONST 19) = MGET
(CONST 20) = (MSET)
(CONST 21) = $VERBIFY
(CONST 22) = 0
(CONST 23) = MFILEP
(CONST 24) = I-$UNSTORE
(CONST 25) = MEVAL
(CONST 26) = DIMCHECK
(CONST 27) = ARRAYDIMS
(CONST 28) = (FIXNUM FLONUM)
(CONST 29) = MEMQ
(CONST 30) = "Improper assignment to complete array:~%~M"
(CONST 31) = MERROR
(CONST 32) = 2
(CONST 33) = "Array ~:M has dimension ~:M; it was called by ~:M"
(CONST 34) = 3
(CONST 35) = HASHER
(CONST 36) = ALIKE
(CONST 37) = MUNBOUND
(CONST 38) = 1
(CONST 39) = ZL-DELETE
(CONST 40) = ARRAYSIZE
(CONST 41) = MQAPPLY
(CONST 42) = MXORLISTP
(CONST 43) = (MQAPPLY $%)
(CONST 44) = "Illegal use of :"
(CONST 45) = $ARRAYS
(CONST 46) = ADD2LNC
(CONST 47) = MPUTPROP
(CONST 48) = 7
(CONST 49) = *ARRAY
(CONST 50) = 4
(CONST 51) = ARRSTORE-EXTEND
(CONST 52) = $LISTP
(CONST 53) = "Attempt to assign bad matrix row:~%~M"
(CONST 54) = "Wrong number of indices:~%~M"
(CONST 55) = (MLIST)
(CONST 56) = FIXNUM
(CONST 57) = "Index not an integer:~%~M"
(CONST 58) = NCDR
(CONST 59) = "~A - index out of range"
(CONST 60) = "Wrong number of indices:~%~M"
(CONST 61) = (MLIST)
(CONST 62) = $SETELMX
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ARRAYS MUNBOUND $USE_FAST_ARRAYS)
575 byte-code instructions:
0     L0
0     (PUSH-NIL 2)
2     (GETVALUE 0)                        ; $USE_FAST_ARRAYS
4     (JMPIFNOT L356)
7     (LOAD 4)
8     (CAR)
9     (CAR&PUSH)
10    (CALLS1&JMPIFNOT 79 L180)           ; BOUNDP
14    (LOAD 4)
15    (CAR)
16    (CAR&PUSH)
17    (CALLS1&STORE 78 1)                 ; SYMBOL-VALUE
20    (JMPIFNOT L180)
23    (LOAD&CDR&PUSH 4)
25    (CALL1 1)                           ; MEVALARGS
27    (STORE 0)
28    (LOAD&PUSH 1)
29    (CALL1&PUSH 2)                      ; ML-TYPEP
31    (LOAD&PUSH 0)
32    (JMPIFEQTO 3 L55)                   ; ARRAY
35    (LOAD&PUSH 0)
36    (JMPIFNOTEQTO 5 L98)                ; HASH-TABLE
39    (CONST&PUSH 6)                      ; DIM1
40    (LOAD&PUSH 3)
41    (PUSH-UNBOUND 1)
43    (CALLS1&JMPIF 99 L73)               ; GETHASH
46    (LOAD 1)
47    (CDR)
48    (JMPIF L77)
50    (CONST 8)                           ; "Array has dimension > 1"
51    L51
51    (PUSH)
52    (CALLSR 0 29)                       ; ERROR
55    L55
55    (CONST&PUSH 4)                      ; #.#'SYSTEM::STORE
56    (LOAD&PUSH 3)
57    (LOAD&PUSH 3)
58    (LOAD&PUSH 7)
59    (LIST&PUSH 1)
61    (CALLSR 2 34)                       ; APPEND
64    (APPLY&SKIP&RET 1 6)
67    L67
67    (CONST 7)                           ; "Array has dimension 1"
68    (JMP L51)
70    L70
70    (LOAD 1)
71    (JMP L83)
73    L73
73    (LOAD 1)
74    (CDR)
75    (JMPIF L67)
77    L77
77    (LOAD 1)
78    (CDR)
79    (JMPIF L70)
81    (LOAD 1)
82    (CAR)
83    L83
83    (PUSH)
84    (LOAD&PUSH 0)
85    (LOAD&PUSH 4)
86    (LOAD&PUSH 7)
87    (CALLS1 100)                        ; SYSTEM::PUTHASH
89    (SKIP&RET 7)
91    L91
91    (LOAD&CAR&STORE 1 1)
94    (PUSH)
95    (LOAD 3)
96    (JMP L122)
98    L98
98    (LOAD&PUSH 0)
99    (JMPIFNOTEQTO 9 L155)               ; LIST
102   (LOAD 2)
103   (CAR)
104   (CAR&PUSH)
105   (JMPIFEQTO 10 L91)                  ; MLIST
108   (LOAD 2)
109   (CAR)
110   (CAR&PUSH)
111   (JMPIFNOTEQTO 12 L130)              ; $MATRIX
114   (LOAD 1)
115   (CDR)
116   (CAR&PUSH)
117   (LOAD&CAR&PUSH 2)
119   (LOAD&PUSH 4)
120   (CALLS1 148)                        ; NTH
122   L122
122   (PUSH)
123   (LOAD&PUSH 6)
124   (CALL 3 11)                         ; SYSTEM::%SETNTH
127   (LOAD 4)
128   (SKIP&RET 6)
130   L130
130   (CONST 13)                          ; "The value of ~A is not a hash-table ,an ~
                                           array, macsyma list, or a matrix"
131   (JMP L162)
133   L133
133   (CONST&PUSH 14)                     ; (MSET)
134   (LOAD 6)
135   (CAR)
136   (CAR&PUSH)
137   (LOAD&CDR&PUSH 7)
139   (CALL1 1)                           ; MEVALARGS
141   (CDR&PUSH)
142   (CALL1&PUSH 15)                     ; MAKE-EQUAL-HASH-TABLE
144   (LIST&PUSH 3)
146   (CALL1 16)                          ; MEVAL*
148   (LOAD&PUSH 5)
149   (LOAD&PUSH 5)
150   (JMPTAIL 2 8 L0)
155   L155
155   (LOAD&PUSH 2)
156   (LOAD 6)
157   (CAR)
158   (CAR)
159   (JMPIFEQ L133)
161   (CONST 17)                          ; "The value of ~A is not a hash-table , an array,a macsyma list, or a matrix"
162   L162
162   (PUSH)
163   (LOAD 6)
164   (CAR)
165   (CAR&PUSH)
166   (CALLSR 1 29)                       ; ERROR
169   L169
169   (NIL)
170   (BIND 0)                            ; $USE_FAST_ARRAYS
172   (LOAD&PUSH 7)
173   (LOAD&PUSH 7)
174   (JSR L0)
177   (UNBIND1)
178   (SKIP&RET 5)
180   L180
180   (LOAD 4)
181   (CAR)
182   (CAR&PUSH)
183   (CONST&PUSH 18)                     ; HASHAR
184   (CALL2&JMPIF 19 L169)               ; MGET
187   (CONST&PUSH 20)                     ; (MSET)
188   (LOAD 5)
189   (CAR)
190   (CAR&PUSH)
191   (LOAD&CDR&PUSH 6)
193   (CALL1 1)                           ; MEVALARGS
195   (CDR&PUSH)
196   (CALL1&PUSH 15)                     ; MAKE-EQUAL-HASH-TABLE
198   (LIST&PUSH 3)
200   (CALL1 16)                          ; MEVAL*
202   (LOAD&PUSH 4)
203   (LOAD&PUSH 4)
204   (JMPTAIL 2 7 L0)
209   L209
209   (PUSH)
210   (CALL1&JMPIFNOT 23 L223)            ; MFILEP
213   (LOAD&PUSH 5)
214   (NIL)
215   (CONS&PUSH)
216   (CALL1 24)                          ; I-$UNSTORE
218   (LOAD&PUSH 5)
219   (CONST&PUSH 3)                      ; ARRAY
220   (CALL2 19)                          ; MGET
222   (STORE 4)
223   L223
223   (LOAD&PUSH 5)
224   (CONST&SYMBOL-FUNCTION&PUSH 25)     ; MEVAL
226   (LOAD&CDR&PUSH 12)
228   (CALLSR&STORE 0 22 4)               ; MAPCAR
232   (PUSH)
233   (T&PUSH)
234   (CALL 3 26)                         ; DIMCHECK
237   (LOAD&PUSH 4)
238   (CALL1 27)                          ; ARRAYDIMS
240   (CAR)
241   (STORE 5)
242   (PUSH)
243   (CONST&PUSH 28)                     ; (FIXNUM FLONUM)
244   (CALL2&JMPIFNOT 29 L258)            ; MEMQ
247   (LOAD&PUSH 9)
248   (CALL1&PUSH 2)                      ; ML-TYPEP
250   (LOAD 6)
251   (JMPIFEQ L258)
253   (CONST&PUSH 30)                     ; "Improper assignment to complete array:~%~M"
255   (LOAD&PUSH 10)
256   (CALL2 31)                          ; MERROR
258   L258
258   (LOAD&PUSH 4)
259   (CONST&PUSH 3)                      ; ARRAY
260   (PUSH-UNBOUND 1)
262   (CALLS2&PUSH 132)                   ; GET
264   (CONST&PUSH 4)                      ; #.#'SYSTEM::STORE
265   (LOAD&PUSH 1)
266   (LOAD&PUSH 6)
267   (LOAD&PUSH 13)
268   (LIST&PUSH 1)
270   (CALLSR 2 34)                       ; APPEND
273   (APPLY&SKIP&RET 1 12)
276   L276
276   (LOAD&PUSH 5)
277   (CONST&PUSH 3)                      ; ARRAY
278   (PUSH-UNBOUND 1)
280   (CALLS2&PUSH 132)                   ; GET
282   (LOAD&PUSH 6)
283   (CONST&PUSH 3)                      ; ARRAY
284   (PUSH-UNBOUND 1)
286   (CALLS2&PUSH 132)                   ; GET
288   (CONST&PUSH 38)                     ; 1
290   (CALLSR&PUSH 1 1)                   ; AREF
293   (CALLS2&PUSH 151)                   ; 1-
295   (LOAD&PUSH 1)
296   (CONST&PUSH 38)                     ; 1
298   (LOAD&PUSH 2)
299   (CALLSR 1 2)                        ; SYSTEM::STORE
302   (SKIP 2)
304   (JMP L320)
306   L306
306   (LOAD&PUSH 10)
307   (GETVALUE 37)                       ; MUNBOUND
309   (JMPIFEQ L276)
311   (LOAD&PUSH 2)
312   (LOAD&PUSH 5)
313   (LOAD 12)
314   (CONS&PUSH)
315   (NIL)
316   (CONS&PUSH)
317   (CALLSR 2 35)                       ; NCONC
320   L320
320   (LOAD&PUSH 5)
321   (CONST&PUSH 3)                      ; ARRAY
322   (PUSH-UNBOUND 1)
324   (CALLS2&PUSH 132)                   ; GET
326   (LOAD&CAR&PUSH 1)
328   (LOAD&PUSH 4)
329   (CONST&PUSH 38)                     ; 1
331   (CALL&PUSH 3 39)                    ; ZL-DELETE
334   (LOAD&PUSH 1)
335   (LOAD 6)
336   (JMP L532)
339   L339
339   (LOAD&PUSH 5)
340   (CONST&PUSH 3)                      ; ARRAY
341   (PUSH-UNBOUND 1)
343   (CALLS2&PUSH 132)                   ; GET
345   (LOAD&PUSH 0)
346   (LOAD&PUSH 5)
347   (LOAD&PUSH 7)
348   (CALLSR 1 2)                        ; SYSTEM::STORE
351   (SKIP 1)
353   (JMP L510)
356   L356
356   (LOAD 4)
357   (CAR)
358   (CAR&PUSH)
359   (CALL1&PUSH 21)                     ; $VERBIFY
361   (PUSH-NIL 2)
363   (CONST&PUSH 22)                     ; 0
364   (PUSH-NIL 2)
366   (LOAD&PUSH 5)
367   (CONST&PUSH 3)                      ; ARRAY
368   (CALL2 19)                          ; MGET
370   (STORE 4)
371   (JMPIF L209)
374   (LOAD&PUSH 5)
375   (CONST&PUSH 18)                     ; HASHAR
376   (CALL2 19)                          ; MGET
378   (STORE 4)
379   (JMPIFNOT L801)
382   (PUSH)
383   (CALL1&JMPIFNOT 23 L396)            ; MFILEP
386   (LOAD&PUSH 5)
387   (NIL)
388   (CONS&PUSH)
389   (CALL1 24)                          ; I-$UNSTORE
391   (LOAD&PUSH 5)
392   (CONST&PUSH 18)                     ; HASHAR
393   (CALL2 19)                          ; MGET
395   (STORE 4)
396   L396
396   (LOAD&PUSH 4)
397   (CONST&PUSH 3)                      ; ARRAY
398   (PUSH-UNBOUND 1)
400   (CALLS2&PUSH 132)                   ; GET
402   (CONST&PUSH 32)                     ; 2
404   (CALLSR&PUSH 1 1)                   ; AREF
407   (LOAD&CDR&PUSH 11)
409   (CALLS2&PUSH 71)                    ; LENGTH
411   (CALLSR&JMPIF 1 45 L433)            ; =
415   (CONST&PUSH 33)                     ; "Array ~:M has dimension ~:M; it was called by ~:M"
417   (LOAD&PUSH 6)
418   (LOAD&PUSH 6)
419   (CONST&PUSH 3)                      ; ARRAY
420   (PUSH-UNBOUND 1)
422   (CALLS2&PUSH 132)                   ; GET
424   (CONST&PUSH 32)                     ; 2
426   (CALLSR&PUSH 1 1)                   ; AREF
429   (LOAD&PUSH 13)
430   (CALL 4 31)                         ; MERROR
433   L433
433   (CONST&SYMBOL-FUNCTION&PUSH 25)     ; MEVAL
435   (LOAD&CDR&PUSH 11)
437   (CALLSR&STORE 0 22 3)               ; MAPCAR
441   (LOAD&PUSH 4)
442   (CONST&PUSH 3)                      ; ARRAY
443   (PUSH-UNBOUND 1)
445   (CALLS2&PUSH 132)                   ; GET
447   (CONST&PUSH 34)                     ; 3
449   (LOAD&PUSH 5)
450   (CALL1&PUSH 35)                     ; HASHER
452   (LOAD&PUSH 7)
453   (CONST&PUSH 3)                      ; ARRAY
454   (PUSH-UNBOUND 1)
456   (CALLS2&PUSH 132)                   ; GET
458   (CONST&PUSH 22)                     ; 0
459   (CALLSR&PUSH 1 1)                   ; AREF
462   (CALLS2&PUSH 184)                   ; REM
464   (CALLSR&STORE 2 53 3)               ; +
468   (PUSH)
469   (CALLSR&STORE 1 1 1)                ; AREF
473   (PUSH)
474   (LOAD&JMPIFNOT 0 L490)
477   L477
477   (LOAD 0)
478   (CAR)
479   (CAR&PUSH)
480   (LOAD&PUSH 5)
481   (CALL2&JMPIF 36 L306)               ; ALIKE
485   (LOAD&CDR&STORE 0)
487   (LOAD&JMPIF 0 L477)
490   L490
490   (LOAD&PUSH 10)
491   (GETVALUE 37)                       ; MUNBOUND
493   (JMPIFEQ L541)
495   (LOAD&PUSH 4)
496   (LOAD 11)
497   (CONS&PUSH)
498   (NIL)
499   (CONS)
500   (STORE 4)
501   (LOAD&JMPIFNOT 2 L339)
505   (LOAD&PUSH 2)
506   (LOAD&PUSH 5)
507   (CALLSR 2 35)                       ; NCONC
510   L510
510   (LOAD&PUSH 5)
511   (CONST&PUSH 3)                      ; ARRAY
512   (PUSH-UNBOUND 1)
514   (CALLS2&PUSH 132)                   ; GET
516   (LOAD&PUSH 6)
517   (CONST&PUSH 3)                      ; ARRAY
518   (PUSH-UNBOUND 1)
520   (CALLS2&PUSH 132)                   ; GET
522   (CONST&PUSH 38)                     ; 1
524   (CALLSR&PUSH 1 1)                   ; AREF
527   (CALLS2&PUSH 150)                   ; 1+
529   (LOAD&PUSH 1)
530   (CONST 38)                          ; 1
532   L532
532   (PUSH)
533   (LOAD&PUSH 2)
534   (CALLSR 1 2)                        ; SYSTEM::STORE
537   (SKIP 3)
539   (JMP L543)
541   L541
541   (SKIP 1)
543   L543
543   (LOAD&PUSH 4)
544   (CONST&PUSH 3)                      ; ARRAY
545   (PUSH-UNBOUND 1)
547   (CALLS2&PUSH 132)                   ; GET
549   (CONST&PUSH 38)                     ; 1
551   (CALLSR&PUSH 1 1)                   ; AREF
554   (LOAD&PUSH 5)
555   (CONST&PUSH 3)                      ; ARRAY
556   (PUSH-UNBOUND 1)
558   (CALLS2&PUSH 132)                   ; GET
560   (CONST&PUSH 22)                     ; 0
561   (CALLSR&PUSH 1 1)                   ; AREF
564   (CALLSR&JMPIFNOT 1 48 L897)         ; >
569   (LOAD&PUSH 5)
570   (CONST&PUSH 32)                     ; 2
572   (LOAD&PUSH 6)
573   (CONST&PUSH 3)                      ; ARRAY
574   (PUSH-UNBOUND 1)
576   (CALLS2&PUSH 132)                   ; GET
578   (CONST&PUSH 22)                     ; 0
579   (CALLSR&PUSH 1 1)                   ; AREF
582   (CALLSR&PUSH 2 55)                  ; *
585   (CALL2 40)                          ; ARRAYSIZE
587   (JMP L897)
590   L590
590   (T&STORE 0)
592   (LOAD&CDR&STORE 10)
594   (LOAD&JMPIFNOT 0 L819)
598   (JMP L839)
601   L601
601   (LOAD&PUSH 5)
602   (CONST&PUSH 43)                     ; (MQAPPLY $%)
604   (CALL2&JMPIFNOT 29 L611)            ; MEMQ
607   (CONST&PUSH 44)                     ; "Illegal use of :"
609   (CALL1 31)                          ; MERROR
611   L611
611   (LOAD&PUSH 5)
612   (GETVALUE&PUSH 45)                  ; $ARRAYS
614   (CALL2 46)                          ; ADD2LNC
616   (LOAD&PUSH 5)
617   (PUSH-UNBOUND 1)
619   (CALLS2&STORE 143 5)                ; GENSYM
622   (PUSH)
623   (CONST&PUSH 18)                     ; HASHAR
624   (CALL 3 47)                         ; MPUTPROP
627   (LOAD&PUSH 4)
628   (T&PUSH)
629   (CONST&PUSH 48)                     ; 7
631   (CALL 3 49)                         ; *ARRAY
634   (LOAD&PUSH 4)
635   (CONST&PUSH 3)                      ; ARRAY
636   (PUSH-UNBOUND 1)
638   (CALLS2&PUSH 132)                   ; GET
640   (LOAD&PUSH 0)
641   (CONST&PUSH 22)                     ; 0
642   (CONST&PUSH 50)                     ; 4
644   (CALLSR 1 2)                        ; SYSTEM::STORE
647   (SKIP 1)
649   (LOAD&PUSH 4)
650   (CONST&PUSH 3)                      ; ARRAY
651   (PUSH-UNBOUND 1)
653   (CALLS2&PUSH 132)                   ; GET
655   (LOAD&PUSH 0)
656   (CONST&PUSH 38)                     ; 1
658   (CONST&PUSH 22)                     ; 0
659   (CALLSR 1 2)                        ; SYSTEM::STORE
662   (SKIP 1)
664   (LOAD&PUSH 4)
665   (CONST&PUSH 3)                      ; ARRAY
666   (PUSH-UNBOUND 1)
668   (CALLS2&PUSH 132)                   ; GET
670   (LOAD&CDR&PUSH 11)
672   (CALLS2&PUSH 71)                    ; LENGTH
674   (LOAD&PUSH 1)
675   (CONST&PUSH 32)                     ; 2
677   (LOAD&PUSH 2)
678   (CALLSR 1 2)                        ; SYSTEM::STORE
681   (SKIP 2)
683   (LOAD&PUSH 10)
684   (LOAD&PUSH 10)
685   (JMPTAIL 2 13 L0)
690   L690
690   (LOAD&PUSH 4)
691   (LOAD&CDR&PUSH 11)
693   (CALL1&PUSH 1)                      ; MEVALARGS
695   (LOAD&PUSH 11)
696   (CALL 3 51)                         ; ARRSTORE-EXTEND
699   (SKIP&RET 11)
701   L701
701   (LOAD&PUSH 9)
702   (CALL1&JMPIFNOT 52 L717)            ; $LISTP
705   (LOAD 4)
706   (CDR)
707   (CAR&PUSH)
708   (CALLS2&PUSH 71)                    ; LENGTH
710   (LOAD&PUSH 10)
711   (CALLS2&PUSH 71)                    ; LENGTH
713   (CALLSR&JMPIF 1 45 L765)            ; =
717   L717
717   (CONST&PUSH 53)                     ; "Attempt to assign bad matrix row:~%~M"
719   (LOAD 10)
720   (JMP L762)
722   L722
722   (CONST 57)                          ; "Index not an integer:~%~M"
724   (JMP L792)
727   L727
727   (LOAD&CDR&PUSH 5)
729   (LOAD&PUSH 1)
730   (CALL2&PUSH 58)                     ; NCDR
732   (LOAD&PUSH 11)
733   (CALLS1 168)                        ; RPLACA
735   (SKIP 1)
737   (JMP L897)
740   L740
740   (LOAD 4)
741   (CAR)
742   (CAR&PUSH)
743   (JMPIFEQTO 12 L701)                 ; $MATRIX
746   (LOAD&PUSH 10)
747   (CALLS2&PUSH 71)                    ; LENGTH
749   (CONST&PUSH 32)                     ; 2
751   (CALLSR&JMPIF 1 45 L765)            ; =
755   (CONST&PUSH 54)                     ; "Wrong number of indices:~%~M"
757   (CONST&PUSH 55)                     ; (MLIST)
759   (LOAD 12)
760   (CDR)
761   (CONS)
762   L762
762   (PUSH)
763   (CALL2 31)                          ; MERROR
765   L765
765   (LOAD 10)
766   (CDR)
767   (CAR&PUSH)
768   (CALL1&PUSH 25)                     ; MEVAL
770   (LOAD&PUSH 0)
771   (CALL1&PUSH 2)                      ; ML-TYPEP
773   (JMPIFNOTEQTO 56 L722)              ; FIXNUM
776   (LOAD&PUSH 0)
777   (CONST&PUSH 22)                     ; 0
778   (CALLSR&JMPIFNOT 1 48 L790)         ; >
782   (LOAD&PUSH 0)
783   (LOAD&PUSH 6)
784   (CALLS2&PUSH 71)                    ; LENGTH
786   (CALLSR&JMPIF 1 47 L727)            ; <
790   L790
790   (CONST 59)                          ; "~A - index out of range"
792   L792
792   (PUSH)
793   (LOAD&PUSH 1)
794   (CALL2 31)                          ; MERROR
796   (SKIP 1)
798   (JMP L897)
801   L801
801   (LOAD&PUSH 5)
802   (JMPIFNOTEQTO 41 L816)              ; MQAPPLY
805   (LOAD 10)
806   (CDR)
807   (CAR&PUSH)
808   (CALL1 25)                          ; MEVAL
810   (STORE 4)
811   (PUSH)
812   (CALL1&JMPIF 42 L590)               ; MXORLISTP
816   L816
816   (LOAD&JMPIF 0 L839)
819   L819
819   (LOAD&PUSH 5)
820   (CALLS1&JMPIFNOT 79 L601)           ; BOUNDP
824   (LOAD&PUSH 5)
825   (CALLS1&STORE 78 4)                 ; SYMBOL-VALUE
828   (PUSH)
829   (CALL1&JMPIF 42 L839)               ; MXORLISTP
832   (LOAD&PUSH 4)
833   (CALL1&PUSH 2)                      ; ML-TYPEP
835   (JMPIFNOTEQTO 3 L601)               ; ARRAY
839   L839
839   (LOAD&PUSH 4)
840   (CALL1&PUSH 2)                      ; ML-TYPEP
842   (JMPIFEQTO 3 L690)                  ; ARRAY
846   (LOAD 4)
847   (CAR)
848   (CAR&PUSH)
849   (JMPIFEQTO 10 L740)                 ; MLIST
853   (LOAD&PUSH 10)
854   (CALLS2&PUSH 71)                    ; LENGTH
856   (CONST&PUSH 32)                     ; 2
858   (CALLSR&JMPIF 1 45 L740)            ; =
863   (LOAD&PUSH 10)
864   (CALLS2&PUSH 71)                    ; LENGTH
866   (CONST&PUSH 34)                     ; 3
868   (CALLSR&JMPIF 1 45 L881)            ; =
872   (CONST&PUSH 60)                     ; "Wrong number of indices:~%~M"
874   (CONST&PUSH 61)                     ; (MLIST)
876   (LOAD 12)
877   (CDR)
878   (CONS&PUSH)
879   (CALL2 31)                          ; MERROR
881   L881
881   (LOAD&PUSH 9)
882   (LOAD 11)
883   (CDR)
884   (CAR&PUSH)
885   (CALL1&PUSH 25)                     ; MEVAL
887   (LOAD 12)
888   (CDR)
889   (CDR)
890   (CAR&PUSH)
891   (CALL1&PUSH 25)                     ; MEVAL
893   (LOAD&PUSH 7)
894   (CALL 4 62)                         ; $SETELMX
897   L897
897   (LOAD 9)
898   (SKIP&RET 11)


Disassembly of function #:|(DEFUN ARRFUNP (X) ...)-110|
(CONST 0) = ARRFUNP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARRFUNP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRFUNP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARRFUNP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARRFUNP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARRFUNP
8     (SKIP&RET 1)


Disassembly of function ARRFUNP
(CONST 0) = X
(CONST 1) = $TRANSRUN
(CONST 2) = (A-EXPR)
(CONST 3) = GETL
(CONST 4) = (AEXPR)
(CONST 5) = MGETL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $TRANSRUN)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; $TRANSRUN
5     (JMPIFNOT L14)
7     (GETVALUE&PUSH 0)                   ; X
9     (CONST&PUSH 2)                      ; (A-EXPR)
10    (CALL2 3)                           ; GETL
12    (JMPIF1 L19)
14    L14
14    (GETVALUE&PUSH 0)                   ; X
16    (CONST&PUSH 4)                      ; (AEXPR)
17    (CALL2 5)                           ; MGETL
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ARRFUNCALL (ARRFUN SUBS FORM) ...)-111|
(CONST 0) = ARRFUNCALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARRFUNCALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRFUNCALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARRFUNCALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARRFUNCALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARRFUNCALL
8     (SKIP&RET 1)


Disassembly of function ARRFUNCALL
(CONST 0) = AEXPRP
(CONST 1) = #S(HASH-TABLE EQ (A-SUBR . 22) (A-EXPR . 14) (AEXPR . 1))
(CONST 2) = MAPPLY1
(CONST 3) = SYSTEM-SUBRCALL*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
35 byte-code instructions:
0     (T)
1     (BIND 0)                            ; AEXPRP
3     (LOAD 6)
4     (CAR)
5     (JMPHASH 1 L37 L8 L21 L29)
8     L8
8     (LOAD 6)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD&PUSH 6)
12    (LOAD 8)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD&PUSH 7)
16    (CALL 4 2)                          ; MAPPLY1
19    (JMP L38)
21    L21
21    (LOAD 6)
22    (CDR)
23    (CAR&PUSH)
24    (LOAD 6)
25    (APPLY 0)
27    (JMP L38)
29    L29
29    (LOAD 6)
30    (CDR)
31    (CAR&PUSH)
32    (LOAD&PUSH 6)
33    (CALL2 3)                           ; SYSTEM-SUBRCALL*
35    (JMP L38)
37    L37
37    (NIL)
38    L38
38    (UNBIND1)
39    (SKIP&RET 4)


Disassembly of function #:|(DEFUN HASHER (L) ...)-112|
(CONST 0) = HASHER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HASHER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HASHER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HASHER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HASHER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HASHER
8     (SKIP&RET 1)


Disassembly of function HASHER
(CONST 0) = 0
(CONST 1) = 32767
(CONST 2) = X
(CONST 3) = $RATP
(CONST 4) = "Subscripts may not be in CRE form."
(CONST 5) = MERROR
(CONST 6) = FIXNUMP
(CONST 7) = 5.0E-4
(CONST 8) = FIX
(CONST 9) = 7
(CONST 10) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
65 byte-code instructions:
0     (LOAD&JMPIF 1 L43)
3     L3
3     (CONST 0)                           ; 0
4     (SKIP&RET 2)
6     L6
6     (CONST&PUSH 4)                      ; "Subscripts may not be in CRE form."
7     (CALL1 5)                           ; MERROR
9     (JMP L100)
12    L12
12    (GETVALUE 2)                        ; X
14    (JMP L29)
16    L16
16    (GETVALUE&PUSH 2)                   ; X
18    (CALL1&JMPIF 6 L12)                 ; FIXNUMP
21    (GETVALUE&PUSH 2)                   ; X
23    (CONST&PUSH 7)                      ; 5.0E-4
24    (CALLSR&PUSH 2 53)                  ; +
27    (CALL1 8)                           ; FIX
29    L29
29    (PUSH)
30    (CONST&PUSH 9)                      ; 7
31    (LOAD&CDR&PUSH 7)
33    (JSR&PUSH L40)
35    (CALLSR 2 55)                       ; *
38    (JMP L75)
40    L40
40    (LOAD&JMPIFNOT 1 L3)
43    L43
43    (CONST&PUSH 1)                      ; 32767
44    (LOAD 2)
45    (CAR)
46    (BIND 2)                            ; X
48    (GETVALUE&PUSH 2)                   ; X
50    (CALL1&JMPIF 3 L6)                  ; $RATP
53    (GETVALUE&PUSH 2)                   ; X
55    (CALL1&JMPIF 6 L16)                 ; FIXNUMP
58    (GETVALUE&PUSH 2)                   ; X
60    (CALLS2&JMPIF 15 L16)               ; FLOATP
63    (GETVALUE 2)                        ; X
65    (JMPIFCONSP L81)
67    (GETVALUE&PUSH 2)                   ; X
69    (CALLS1&PUSH 108)                   ; SXHASH
71    (LOAD&CDR&PUSH 6)
73    (JSR L40)
75    L75
75    (PUSH)
76    (CALLSR 2 53)                       ; +
79    (JMP L100)
81    L81
81    (CONST&PUSH 10)                     ; 1
82    (GETVALUE 2)                        ; X
84    (CAR)
85    (CAR&PUSH)
86    (CALLS1&PUSH 108)                   ; SXHASH
88    (GETVALUE 2)                        ; X
90    (CDR&PUSH)
91    (JSR&PUSH L40)
93    (LOAD&CDR&PUSH 8)
95    (JSR&PUSH L40)
97    (CALLSR 4 53)                       ; +
100   L100
100   (UNBIND1)
101   (PUSH)
102   (CALLSR 2 61)                       ; LOGAND
105   (SKIP&RET 2)


Disassembly of function #:|(DEFUN ARRAYSIZE (FUN N) ...)-113|
(CONST 0) = ARRAYSIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARRAYSIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRAYSIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARRAYSIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARRAYSIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARRAYSIZE
8     (SKIP&RET 1)


Disassembly of function ARRAYSIZE
(CONST 0) = Y
(CONST 1) = HASHAR
(CONST 2) = MGET
(CONST 3) = ARRAY
(CONST 4) = MPUTPROP
(CONST 5) = 3
(CONST 6) = *ARRAY
(CONST 7) = 0
(CONST 8) = 1
(CONST 9) = 2
(CONST 10) = HASHER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (Y)
100 byte-code instructions:
0     (PUSH-NIL 7)
2     (NIL)
3     (BIND 0)                            ; Y
5     (LOAD&PUSH 12)
6     (CONST&PUSH 1)                      ; HASHAR
7     (CALL2&PUSH 2)                      ; MGET
9     (CONST&PUSH 3)                      ; ARRAY
10    (PUSH-UNBOUND 1)
12    (CALLS2&STORE 132 9)                ; GET
15    (LOAD&PUSH 12)
16    (PUSH-UNBOUND 1)
18    (CALLS2&STORE 143 9)                ; GENSYM
21    (PUSH)
22    (CONST&PUSH 1)                      ; HASHAR
23    (CALL 3 4)                          ; MPUTPROP
26    (LOAD&PUSH 8)
27    (T&PUSH)
28    (LOAD&PUSH 13)
29    (CONST&PUSH 5)                      ; 3
30    (CALLSR&PUSH 2 53)                  ; +
33    (CALL 3 6)                          ; *ARRAY
36    (LOAD&PUSH 8)
37    (CONST&PUSH 3)                      ; ARRAY
38    (PUSH-UNBOUND 1)
40    (CALLS2&STORE 132 8)                ; GET
43    (PUSH)
44    (CONST&PUSH 7)                      ; 0
45    (LOAD&PUSH 13)
46    (CALLSR 1 2)                        ; SYSTEM::STORE
49    (LOAD&PUSH 9)
50    (CONST&PUSH 8)                      ; 1
51    (CALLSR&PUSH 1 1)                   ; AREF
54    (LOAD&PUSH 9)
55    (CONST&PUSH 8)                      ; 1
56    (LOAD&PUSH 2)
57    (CALLSR 1 2)                        ; SYSTEM::STORE
60    (SKIP 1)
62    (LOAD&PUSH 9)
63    (CONST&PUSH 9)                      ; 2
64    (CALLSR&PUSH 1 1)                   ; AREF
67    (LOAD&PUSH 9)
68    (CONST&PUSH 9)                      ; 2
69    (LOAD&PUSH 2)
70    (CALLSR 1 2)                        ; SYSTEM::STORE
73    (SKIP 1)
75    (CONST 9)                           ; 2
76    (STORE 7)
77    (PUSH)
78    (LOAD&PUSH 10)
79    (CONST&PUSH 7)                      ; 0
80    (CALLSR&PUSH 1 1)                   ; AREF
83    (CALLSR&STORE 2 53 6)               ; +
87    L87
87    (LOAD&INC&STORE 7)
89    (PUSH)
90    (LOAD&PUSH 7)
91    (CALLSR&JMPIFNOT 1 48 L99)          ; >
95    (T)
96    (UNBIND1)
97    (SKIP&RET 10)
99    L99
99    (LOAD&PUSH 9)
100   (LOAD&PUSH 8)
101   (CALLSR 1 1)                        ; AREF
104   (JMP L151)
106   L106
106   (PUSH)
107   (LOAD&PUSH 5)
108   (NIL)
109   (CONS&PUSH)
110   (CALLSR 2 35)                       ; NCONC
113   (JMP L149)
115   L115
115   (CONST&PUSH 5)                      ; 3
116   (LOAD&CAR&STORE 6 5)
119   (CAR&PUSH)
120   (CALL1&PUSH 10)                     ; HASHER
122   (LOAD&PUSH 13)
123   (CALLS2&PUSH 184)                   ; REM
125   (CALLSR&STORE 2 53 3)               ; +
129   (LOAD&PUSH 8)
130   (LOAD&PUSH 4)
131   (CALLSR 1 1)                        ; AREF
134   (SETVALUE 0)                        ; Y
136   (JMPIF L106)
138   (LOAD&PUSH 4)
139   (NIL)
140   (CONS&PUSH)
141   (LOAD&PUSH 9)
142   (LOAD&PUSH 5)
143   (LOAD&PUSH 2)
144   (CALLSR 1 2)                        ; SYSTEM::STORE
147   (SKIP 1)
149   L149
149   (LOAD 5)
150   (CDR)
151   L151
151   (STORE 5)
152   (LOAD&JMPIFNOT 5 L87)
156   (JMP L115)


Disassembly of function #:|(DEFUN DIMCHECK (ARY SUB FIXPP) ...)-114|
(CONST 0) = DIMCHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIMCHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIMCHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIMCHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIMCHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIMCHECK
8     (SKIP&RET 1)


Disassembly of function DIMCHECK
(CONST 0) = ARRAY
(CONST 1) = MGET
(CONST 2) = ARRAYDIMS
(CONST 3) = Y
(CONST 4) = X
(CONST 5) = ML-TYPEP
(CONST 6) = FIXNUM
(CONST 7) = 0
(CONST 8) = FIXNUMP
(CONST 9) = "Array ~:M has dimensions ~:M, but was called with ~:M"
(CONST 10) = (MLIST)
(CONST 11) = #.#'1-
(CONST 12) = (MLIST)
(CONST 13) = MERROR
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
writes special variables : (X Y)
77 byte-code instructions:
0     (LOAD&PUSH 2)
1     (T&PUSH)
2     (LOAD&PUSH 5)
3     (CONST&PUSH 0)                      ; ARRAY
4     (CALL2&PUSH 1)                      ; MGET
6     (CALL1 2)                           ; ARRAYDIMS
8     (CDR)
9     (BIND 3)                            ; Y
11    (LOAD 4)
12    (BIND 4)                            ; X
14    (GETVALUE 3)                        ; Y
16    (JMPIFNOT L109)
19    L19
19    (GETVALUE 4)                        ; X
21    (JMPIFNOT L58)
23    (GETVALUE 4)                        ; X
25    (CAR&PUSH)
26    (CALL1&PUSH 5)                      ; ML-TYPEP
28    (JMPIFNOTEQTO 6 L49)                ; FIXNUM
31    (GETVALUE 4)                        ; X
33    (CAR&PUSH)
34    (CONST&PUSH 7)                      ; 0
35    (CALLSR&JMPIF 1 47 L58)             ; <
39    (GETVALUE 4)                        ; X
41    (CAR&PUSH)
42    (GETVALUE 3)                        ; Y
44    (CAR&PUSH)
45    (CALLSR&JMPIFNOT 1 47 L58)          ; <
49    L49
49    (GETVALUE 4)                        ; X
51    (CAR&PUSH)
52    (CALL1&JMPIF 8 L93)                 ; FIXNUMP
55    (LOAD&JMPIFNOT 9 L91)
58    L58
58    (NIL)
59    (SETVALUE 3)                        ; Y
61    (PUSH)
62    (T)
63    (CONS)
64    (SETVALUE 4)                        ; X
66    (JMP L93)
68    L68
68    (CONST&PUSH 9)                      ; "Array ~:M has dimensions ~:M, but was called with ~:M"
69    (LOAD&PUSH 12)
70    (CONST&PUSH 10)                     ; (MLIST)
71    (CONST&PUSH 11)                     ; #.#'1-
72    (LOAD&PUSH 15)
73    (CONST&PUSH 0)                      ; ARRAY
74    (CALL2&PUSH 1)                      ; MGET
76    (CALL1 2)                           ; ARRAYDIMS
78    (CDR&PUSH)
79    (CALLSR 0 22)                       ; MAPCAR
82    (CONS&PUSH)
83    (CONST&PUSH 12)                     ; (MLIST)
84    (LOAD 14)
85    (CONS&PUSH)
86    (CALL 4 13)                         ; MERROR
89    (JMP L114)
91    L91
91    (NIL&STORE 6)
93    L93
93    (GETVALUE 4)                        ; X
95    (CDR&PUSH)
96    (GETVALUE 3)                        ; Y
98    (CDR)
99    (SETVALUE 3)                        ; Y
101   (POP)
102   (SETVALUE 4)                        ; X
104   (GETVALUE 3)                        ; Y
106   (JMPIF L19)
109   L109
109   (GETVALUE 4)                        ; X
111   (JMPIF L68)
113   (LOAD 6)
114   L114
114   (UNBIND 2)
116   (SKIP&RET 6)


Disassembly of function #:|(DEFUN CONSTLAM (X &AUX #) ...)-115|
(CONST 0) = CONSTLAM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTLAM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTLAM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTLAM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTLAM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTLAM
8     (SKIP&RET 1)


Disassembly of function CONSTLAM
(CONST 0) = X
(CONST 1) = AEXPRP
(CONST 2) = MPARAMS
(CONST 3) = MBIND
(CONST 4) = MEVAL
(CONST 5) = MUNBIND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (AEXPRP X)
47 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (GETVALUE 1)                        ; AEXPRP
7     (JMPIF L15)
9     (LOAD 0)
10    L10
10    (SKIP 1)
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (LOAD&CAR&PUSH 0)
17    (LOAD 1)
18    (CDR)
19    (CAR&PUSH)
20    (LOAD 2)
21    (CDR)
22    (CAR&PUSH)
23    (CALL1&PUSH 2)                      ; MPARAMS
25    (NIL&PUSH)
26    (UNWIND-PROTECT-OPEN L54)
28    (LOAD&PUSH 3)
29    (LOAD&PUSH 4)
30    (NIL&PUSH)
31    (CALL 3 3)                          ; MBIND
34    (T&STORE 2)
36    (CONST&SYMBOL-FUNCTION&PUSH 4)      ; MEVAL
38    (LOAD 7)
39    (CDR)
40    (CDR&PUSH)
41    (CALLSR 0 22)                       ; MAPCAR
44    (VALUES1)
45    (UNWIND-PROTECT-NORMAL-EXIT)
46    (LOADI 0 0 0)
50    (JMPIFNOT L66)
52    (JMP L60)
54    L54
54    (LOADI 0 0 0)
58    (JMPIFNOT L66)
60    L60
60    (LOADI&PUSH 0 0 1)
64    (CALL1 5)                           ; MUNBIND
66    L66
66    (UNWIND-PROTECT-CLOSE)
67    (SKIP 2)
69    (LIST* 2)
71    (JMP L10)


Disassembly of function #:|(DEFMSPEC $DEFINE (L) ...)-116-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $DEFINE (L) ...)-116-2-1|>
(CONST 1) = $DEFINE
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $DEFINE (L) ...)-116-2-1|>
1     (CONST&PUSH 1)                      ; $DEFINE
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DEFINE (L) ...)-116-2-1|
(CONST 0) = TWOARGCHECK
(CONST 1) = (MDEFINE)
(CONST 2) = MQUOTEP
(CONST 3) = ($EV $FUNMAKE $ARRAYMAKE)
(CONST 4) = MEMQ
(CONST 5) = MEVAL
(CONST 6) = DISP2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
37 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; TWOARGCHECK
3     (LOAD&CDR&STORE 1)
5     (CONST&PUSH 1)                      ; (MDEFINE)
6     (LOAD&CAR&PUSH 2)
8     (CALL1&JMPIF 2 L39)                 ; MQUOTEP
11    (LOAD 2)
12    (CAR)
13    (JMPIFATOM L23)
15    (LOAD 2)
16    (CAR)
17    (CAR)
18    (CAR&PUSH)
19    (CONST&PUSH 3)                      ; ($EV $FUNMAKE $ARRAYMAKE)
20    (CALL2&JMPIF 4 L45)                 ; MEMQ
23    L23
23    (LOAD&CAR&PUSH 2)
25    (CALL1 6)                           ; DISP2
27    L27
27    (PUSH)
28    (LOAD 3)
29    (CDR)
30    (CAR&PUSH)
31    (CALL1&PUSH 5)                      ; MEVAL
33    (LIST&PUSH 3)
35    (CALL1 5)                           ; MEVAL
37    (SKIP&RET 2)
39    L39
39    (LOAD 2)
40    (CAR)
41    (CDR)
42    (CAR)
43    (JMP L27)
45    L45
45    (LOAD&CAR&PUSH 2)
47    (CALL1 5)                           ; MEVAL
49    (JMP L27)

WARNING in SET-LINEINFO in lines 2284..2288 :
variable TYPE is not used.
Misspelled or missing IGNORE declaration?

Disassembly of function #:|(DEFUN SET-LINEINFO (FNNAME LINEINFO BODY ...) ...)-117|
(CONST 0) = SET-LINEINFO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SET-LINEINFO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SET-LINEINFO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SET-LINEINFO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SET-LINEINFO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SET-LINEINFO
8     (SKIP&RET 1)


Disassembly of function SET-LINEINFO
(CONST 0) = SRC
(CONST 1) = LINEINFO
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD 3)
1     (JMPIFATOM L10)
3     (LOAD 3)
4     (CDR)
5     (CDR)
6     (CAR&PUSH)
7     (JMPIFEQTO 0 L16)                   ; SRC
10    L10
10    (LOAD&PUSH 4)
11    (CONST&PUSH 1)                      ; LINEINFO
12    (CALLS2 137)                        ; REMPROP
14    (SKIP&RET 5)
16    L16
16    (LOAD&PUSH 4)
17    (LOAD&CAR&PUSH 4)
19    (LIST&PUSH 2)
21    (LOAD 4)
22    (CDR)
23    (CDR&PUSH)
24    (LOAD&PUSH 1)
25    (CALLS1 171)                        ; SYSTEM::%RPLACD
27    (SKIP 1)
29    (LOAD&PUSH 4)
30    (CONST&PUSH 1)                      ; LINEINFO
31    (LOAD&PUSH 4)
32    (CALLS2 136)                        ; SYSTEM::%PUT
34    (SKIP&RET 5)


Disassembly of function #:|(DEFMSPEC MDEFINE (L) ...)-118-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MDEFINE (L) ...)-118-2-1|>
(CONST 1) = MDEFINE
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MDEFINE (L) ...)-118-2-1|>
1     (CONST&PUSH 1)                      ; MDEFINE
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MDEFINE (L) ...)-118-2-1|
(CONST 0) = $USE_FAST_ARRAYS
(CONST 1) = TWOARGCHECK
(CONST 2) = MQAPPLY
(CONST 3) = ARRAY
(CONST 4) = MEMQ
(CONST 5) = "Improper function definition:~%~M"
(CONST 6) = MERROR
(CONST 7) = "Improper function definition:~%~M"
(CONST 8) = $VERBIFY
(CONST 9) = (HASHAR ARRAY)
(CONST 10) = MGETL
(CONST 11) = SPECSIMP
(CONST 12) = 
"Warning - you are redefining the MACSYMA ~
			    subscripted function ~:M.~%"
(CONST 13) = MTELL
(CONST 14) = MOPP
(CONST 15) = ($ALL $ALLBUT $%)
(CONST 16) = "Improper function name: ~:@M"
(CONST 17) = MREDEF-CHECK
(CONST 18) = MMACRO
(CONST 19) = $MACROS
(CONST 20) = REMOVE1
(CONST 21) = MDEFCHK
(CONST 22) = EVP
(CONST 23) = LOCLIST
(CONST 24) = LOCAL-FUN
(CONST 25) = MPUTPROP
(CONST 26) = REMOVE-TRANSL-FUN-PROPS
(CONST 27) = $FUNCTIONS
(CONST 28) = ADD2LNC
(CONST 29) = MEXPR
(CONST 30) = SET-LINEINFO
(CONST 31) = MDEFINE1
(CONST 32) = $TRANSLATE
(CONST 33) = TRANSLATE-FUNCTION
(CONST 34) = $ARRAYS
(CONST 35) = (HASHAR ARRAY)
(CONST 36) = REMOVE-TRANSL-ARRAY-FUN-PROPS
(CONST 37) = MFILEP
(CONST 38) = I-$UNSTORE
(CONST 39) = (HASHAR ARRAY)
(CONST 40) = HASHAR
(CONST 41) = 2
(CONST 42) = ARRAYDIMS
(CONST 43) = "Array ~:M already defined with different dimensions"
(CONST 44) = MDEFARRAY
(CONST 45) = 7
(CONST 46) = *ARRAY
(CONST 47) = 0
(CONST 48) = 4
(CONST 49) = 1
(CONST 50) = (MDEFINE SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ARRAYS $MACROS $TRANSLATE $FUNCTIONS LOCLIST EVP)
305 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; $USE_FAST_ARRAYS
3     (LOAD&PUSH 4)
4     (CALL1 1)                           ; TWOARGCHECK
6     (LOAD&CDR&STORE 4)
8     (CAR&PUSH)
9     (LOAD 5)
10    (CDR)
11    (CAR&PUSH)
12    (PUSH-NIL 5)
14    (LOAD 6)
15    (JMPIFATOM L63)
17    (LOAD 6)
18    (CAR)
19    (CAR&PUSH)
20    (CONST 2)                           ; MQAPPLY
21    (EQ)
22    (STORE 0)
23    (JMPIFNOT L32)
25    (CONST&PUSH 3)                      ; ARRAY
26    (LOAD 7)
27    (CAR)
28    (CDR&PUSH)
29    (CALL2&JMPIF 4 L63)                 ; MEMQ
32    L32
32    (LOAD&JMPIF 0 L242)
36    (LOAD 6)
37    (CAR)
38    (CAR&PUSH)
39    (CALL1 8)                           ; $VERBIFY
41    (STORE 1)
42    (PUSH)
43    (CALL1&JMPIF 14 L51)                ; MOPP
46    (LOAD&PUSH 1)
47    (CONST&PUSH 15)                     ; ($ALL $ALLBUT $%)
48    (CALL2&JMPIFNOT 4 L88)              ; MEMQ
51    L51
51    (CONST&PUSH 16)                     ; "Improper function name: ~:@M"
52    (LOAD 2)
53    L53
53    (PUSH)
54    (CALL2 6)                           ; MERROR
56    (LOAD&JMPIFNOT 2 L298)
60    (JMP L309)
63    L63
63    (CONST&PUSH 5)                      ; "Improper function definition:~%~M"
64    (LOAD 7)
65    (JMP L53)
67    L67
67    (CONST&PUSH 12)                     ; "Warning - you are redefining the MACSYMA ~
			    subscripted function ~:M.~%"
68    (LOAD&PUSH 2)
69    (CALL2 13)                          ; MTELL
71    (LOAD&JMPIFNOT 2 L298)
75    (JMP L309)
78    L78
78    (LOAD 6)
79    (CDR)
80    (STORE 3)
81    (LOAD&JMPIFNOT 2 L298)
85    (JMP L309)
88    L88
88    (CONST&PUSH 3)                      ; ARRAY
89    (LOAD 7)
90    (CAR)
91    (CDR&PUSH)
92    (CALL2 4)                           ; MEMQ
94    (STORE 2)
95    (JMPIF L78)
97    (LOAD 6)
98    (CDR)
99    (STORE 4)
100   (LOAD&PUSH 1)
101   (CALL1 17)                          ; MREDEF-CHECK
103   (LOAD&JMPIFNOT 2 L298)
107   (JMP L309)
110   L110
110   (LOAD&PUSH 1)
111   (T&PUSH)
112   (CONST&PUSH 24)                     ; LOCAL-FUN
113   (CALL 3 25)                         ; MPUTPROP
116   (JMP L141)
118   L118
118   (LOAD&CAR&PUSH 6)
120   (LOAD&PUSH 2)
121   (CALLS1 168)                        ; RPLACA
123   (LOAD&JMPIF 2 L335)
127   L127
127   (GETVALUE 22)                       ; EVP
129   (JMPIFNOT L138)
131   (LOAD&PUSH 1)
132   (GETVALUE 23)                       ; LOCLIST
134   (CAR&PUSH)
135   (CALL2&JMPIF 4 L110)                ; MEMQ
138   L138
138   (LOAD&PUSH 1)
139   (CALL1 26)                          ; REMOVE-TRANSL-FUN-PROPS
141   L141
141   (LOAD&PUSH 1)
142   (NIL)
143   (CONS&PUSH)
144   (LOAD 5)
145   (CONS&PUSH)
146   (GETVALUE&PUSH 27)                  ; $FUNCTIONS
148   (CALL2 28)                          ; ADD2LNC
150   (LOAD&PUSH 1)
151   (LOAD 7)
152   (CAR)
153   (CDR)
154   (CAR&PUSH)
155   (LOAD&PUSH 7)
156   (CONST&PUSH 29)                     ; MEXPR
157   (CALL 4 30)                         ; SET-LINEINFO
160   (LOAD&PUSH 1)
161   (LOAD&PUSH 5)
162   (LOAD&PUSH 7)
163   (CALL2&PUSH 31)                     ; MDEFINE1
165   (CONST&PUSH 29)                     ; MEXPR
166   (CALL 3 25)                         ; MPUTPROP
169   (GETVALUE 32)                       ; $TRANSLATE
171   (JMPIFNOT L431)
174   (LOAD&PUSH 1)
175   (CALL1 33)                          ; TRANSLATE-FUNCTION
177   (JMP L431)
180   L180
180   (LOAD 2)
181   (CDR)
182   (CAR&PUSH)
183   (CONST&PUSH 3)                      ; ARRAY
184   (PUSH-UNBOUND 1)
186   (CALLS2&PUSH 132)                   ; GET
188   (CONST&PUSH 41)                     ; 2
190   (CALLSR 1 1)                        ; AREF
193   (JMP L225)
195   L195
195   (LOAD 2)
196   (CDR)
197   (CAR&PUSH)
198   (CALL1&JMPIFNOT 37 L212)            ; MFILEP
201   (LOAD&PUSH 1)
202   (NIL)
203   (CONS&PUSH)
204   (CALL1 38)                          ; I-$UNSTORE
206   (LOAD&PUSH 1)
207   (CONST&PUSH 39)                     ; (HASHAR ARRAY)
209   (CALL2 10)                          ; MGETL
211   (STORE 2)
212   L212
212   (LOAD&CAR&PUSH 2)
214   (JMPIFEQTO 40 L180)                 ; HASHAR
217   (LOAD 2)
218   (CDR)
219   (CAR&PUSH)
220   (CALL1 42)                          ; ARRAYDIMS
222   (CDR&PUSH)
223   (CALLS2 71)                         ; LENGTH
225   L225
225   (PUSH)
226   (LOAD&PUSH 4)
227   (CALLS2&PUSH 71)                    ; LENGTH
229   (CALLSR&JMPIF 1 45 L423)            ; =
234   (CONST&PUSH 43)                     ; "Array ~:M already defined with different dimensions"
236   (LOAD&PUSH 2)
237   (CALL2 6)                           ; MERROR
239   (JMP L423)
242   L242
242   (LOAD 6)
243   (CDR)
244   (CAR)
245   (JMPIFATOM L258)
247   (CONST&PUSH 3)                      ; ARRAY
248   (LOAD 7)
249   (CDR)
250   (CAR)
251   (CAR)
252   (CDR&PUSH)
253   (CALL2 4)                           ; MEMQ
255   (STORE 2)
256   (JMPIF L264)
258   L258
258   (CONST&PUSH 7)                      ; "Improper function definition:~%~M"
259   (LOAD 7)
260   (CDR)
261   (CAR&PUSH)
262   (CALL2 6)                           ; MERROR
264   L264
264   (LOAD 6)
265   (CDR)
266   (CAR)
267   (CDR)
268   (STORE 3)
269   (LOAD 6)
270   (CDR)
271   (CDR)
272   (STORE 4)
273   (LOAD 6)
274   (CDR)
275   (CAR)
276   (STORE 6)
277   (CAR)
278   (CAR&PUSH)
279   (CALL1 8)                           ; $VERBIFY
281   (STORE 1)
282   (PUSH)
283   (CONST&PUSH 9)                      ; (HASHAR ARRAY)
284   (CALL2&JMPIF 10 L295)               ; MGETL
287   (LOAD&PUSH 1)
288   (CONST&PUSH 11)                     ; SPECSIMP
289   (PUSH-UNBOUND 1)
291   (CALLS2&JMPIF 132 L67)              ; GET
295   L295
295   (LOAD&JMPIF 2 L309)
298   L298
298   (LOAD&PUSH 1)
299   (NIL)
300   (CONS&PUSH)
301   (CONST&PUSH 18)                     ; MMACRO
302   (T&PUSH)
303   (GETVALUE&PUSH 19)                  ; $MACROS
305   (T&PUSH)
306   (CALL 5 20)                         ; REMOVE1
309   L309
309   (LOAD&PUSH 1)
310   (LOAD&JMPIF 5 L318)
313   (LOAD 1)
314   (NOT)
315   (JMPIFNOT L318)
317   (LOAD 4)
318   L318
318   (PUSH)
319   (LOAD&PUSH 4)
320   (LOAD&PUSH 3)
321   (CALL 4 21)                         ; MDEFCHK
324   (LOAD&PUSH 1)
325   (LOAD 7)
326   (CAR)
327   (CAR)
328   (JMPIFNOTEQ L118)
331   (LOAD&JMPIFNOT 2 L127)
335   L335
335   (LOAD&PUSH 1)
336   (GETVALUE&PUSH 34)                  ; $ARRAYS
338   (CALL2 28)                          ; ADD2LNC
340   (LOAD&PUSH 1)
341   (CONST&PUSH 35)                     ; (HASHAR ARRAY)
343   (CALL2 10)                          ; MGETL
345   (STORE 2)
346   (PUSH)
347   (LOAD&PUSH 2)
348   (CALL1 36)                          ; REMOVE-TRANSL-ARRAY-FUN-PROPS
350   (POP)
351   (JMPIF L195)
354   (LOAD&PUSH 1)
355   (PUSH-UNBOUND 1)
357   (CALLS2&STORE 143 3)                ; GENSYM
360   (PUSH)
361   (CONST&PUSH 40)                     ; HASHAR
363   (CALL 3 25)                         ; MPUTPROP
366   (LOAD&PUSH 2)
367   (T&PUSH)
368   (CONST&PUSH 45)                     ; 7
370   (CALL 3 46)                         ; *ARRAY
373   (LOAD&PUSH 2)
374   (CONST&PUSH 3)                      ; ARRAY
375   (PUSH-UNBOUND 1)
377   (CALLS2&PUSH 132)                   ; GET
379   (LOAD&PUSH 0)
380   (CONST&PUSH 47)                     ; 0
382   (CONST&PUSH 48)                     ; 4
384   (CALLSR 1 2)                        ; SYSTEM::STORE
387   (SKIP 1)
389   (LOAD&PUSH 2)
390   (CONST&PUSH 3)                      ; ARRAY
391   (PUSH-UNBOUND 1)
393   (CALLS2&PUSH 132)                   ; GET
395   (LOAD&PUSH 0)
396   (CONST&PUSH 49)                     ; 1
398   (CONST&PUSH 47)                     ; 0
400   (CALLSR 1 2)                        ; SYSTEM::STORE
403   (SKIP 1)
405   (LOAD&PUSH 2)
406   (CONST&PUSH 3)                      ; ARRAY
407   (PUSH-UNBOUND 1)
409   (CALLS2&PUSH 132)                   ; GET
411   (LOAD&PUSH 4)
412   (CALLS2&PUSH 71)                    ; LENGTH
414   (LOAD&PUSH 1)
415   (CONST&PUSH 41)                     ; 2
417   (LOAD&PUSH 2)
418   (CALLSR 1 2)                        ; SYSTEM::STORE
421   (SKIP 2)
423   L423
423   (LOAD&PUSH 1)
424   (LOAD&PUSH 4)
425   (LOAD&PUSH 6)
426   (LOAD&PUSH 8)
427   (LOAD&PUSH 4)
428   (CALL 5 44)                         ; MDEFARRAY
431   L431
431   (CONST&PUSH 50)                     ; (MDEFINE SIMP)
433   (LOAD&PUSH 12)
434   (CALLS1 158)                        ; COPY-LIST
436   (CONS)
437   (SKIP 7)
439   (UNBIND1)
440   (SKIP&RET 2)


Disassembly of function #:|(DEFUN MREDEF-CHECK (FNNAME) ...)-119|
(CONST 0) = MREDEF-CHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MREDEF-CHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MREDEF-CHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MREDEF-CHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MREDEF-CHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MREDEF-CHECK
8     (SKIP&RET 1)


Disassembly of function MREDEF-CHECK
(CONST 0) = MEXPR
(CONST 1) = MGET
(CONST 2) = AUTOLOAD
(CONST 3) = (SUBR FSUBR LSUBR)
(CONST 4) = GETL-LM-FCN-PROP
(CONST 5) = MFEXPR*S
(CONST 6) = TRANSLATED
(CONST 7) = MOPP
(CONST 8) = "Warning - you are redefining the MACSYMA "
(CONST 9) = (VERB OPERATORS)
(CONST 10) = GETL
(CONST 11) = "command "
(CONST 12) = "function "
(CONST 13) = STRIPDOLLAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
48 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; MEXPR
2     (CALL2&JMPIF 1 L35)                 ; MGET
5     (LOAD&PUSH 1)
6     (CONST&PUSH 2)                      ; AUTOLOAD
7     (PUSH-UNBOUND 1)
9     (CALLS2&JMPIF 132 L24)              ; GET
12    (LOAD&PUSH 1)
13    (CONST&PUSH 3)                      ; (SUBR FSUBR LSUBR)
14    (CALL2&JMPIF 4 L24)                 ; GETL-LM-FCN-PROP
17    (LOAD&PUSH 1)
18    (CONST&PUSH 5)                      ; MFEXPR*S
19    (PUSH-UNBOUND 1)
21    (CALLS2&JMPIFNOT 132 L31)           ; GET
24    L24
24    (LOAD&PUSH 1)
25    (CONST&PUSH 6)                      ; TRANSLATED
26    (PUSH-UNBOUND 1)
28    (CALLS2&JMPIFNOT 132 L41)           ; GET
31    L31
31    (LOAD&PUSH 1)
32    (CALL1&JMPIF 7 L41)                 ; MOPP
35    L35
35    (NIL)
36    (SKIP&RET 2)
38    L38
38    (CONST 11)                          ; "command "
39    (JMP L52)
41    L41
41    (CONST&PUSH 8)                      ; "Warning - you are redefining the MACSYMA "
42    (PUSH-UNBOUND 1)
44    (CALLS1 132)                        ; PRINC
46    (LOAD&PUSH 1)
47    (CONST&PUSH 9)                      ; (VERB OPERATORS)
48    (CALL2&JMPIF 10 L38)                ; GETL
51    (CONST 12)                          ; "function "
52    L52
52    (PUSH)
53    (PUSH-UNBOUND 1)
55    (CALLS1 132)                        ; PRINC
57    (LOAD&PUSH 1)
58    (CALL1&PUSH 13)                     ; STRIPDOLLAR
60    (PUSH-UNBOUND 1)
62    (CALLS1 132)                        ; PRINC
64    (PUSH-UNBOUND 1)
66    (CALLS1 139)                        ; TERPRI
68    (T)
69    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MDEFARRAY (FUN SUBS ARGS ...) ...)-120|
(CONST 0) = MDEFARRAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MDEFARRAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFARRAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MDEFARRAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MDEFARRAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MDEFARRAY
8     (SKIP&RET 1)


Disassembly of function MDEFARRAY
(CONST 0) = "~a is already a hash table.  Make it a function first"
(CONST 1) = MDEFINE1
(CONST 2) = AEXPR
(CONST 3) = MPUTPROP
(CONST 4) = $CONSTANTP
(CONST 5) = 1
(CONST 6) = GETCHARN
(CONST 7) = #\&
(CONST 8) = ARRSTORE
(CONST 9) = MDEFCHK
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
64 byte-code instructions:
0     (LOAD&PUSH 5)
1     (CALLS1&JMPIFNOT 79 L8)             ; BOUNDP
4     (LOAD&PUSH 5)
5     (CALLS2&JMPIF 25 L18)               ; HASH-TABLE-P
8     L8
8     (LOAD&JMPIF 3 L14)
11    (LOAD&JMPIFNOT 1 L23)
14    L14
14    (LOAD&PUSH 4)
15    (NIL&PUSH)
16    (JMP L48)
18    L18
18    (CONST&PUSH 0)                      ; "~a is already a hash table.  Make it a function first"
19    (LOAD&PUSH 6)
20    (CALLSR 1 29)                       ; ERROR
23    L23
23    (LOAD&PUSH 5)
24    (LOAD&PUSH 5)
25    (LOAD&PUSH 4)
26    (CALL2&PUSH 1)                      ; MDEFINE1
28    (CONST 2)                           ; AEXPR
29    (JMP L86)
31    L31
31    (SKIP 2)
33    (LOAD&PUSH 5)
34    (NIL)
35    (CONS&PUSH)
36    (LOAD 5)
37    (CONS&PUSH)
38    (LOAD&PUSH 4)
39    (LOAD&PUSH 4)
40    (CALL2&PUSH 1)                      ; MDEFINE1
42    (CALL2 8)                           ; ARRSTORE
44    (SKIP&RET 6)
46    L46
46    (LOAD&CDR&STORE 1)
48    L48
48    (LOAD&PUSH 1)
49    (CALLS1&JMPIF 146 L31)              ; ENDP
52    (LOAD&CAR&STORE 1 0)
55    (PUSH)
56    (CALL1&JMPIF 4 L46)                 ; $CONSTANTP
59    (LOAD&PUSH 0)
60    (CONST&PUSH 5)                      ; 1
61    (CALL2&PUSH 6)                      ; GETCHARN
63    (CONST&PUSH 7)                      ; #\&
64    (CALLSR&JMPIF 1 7 L46)              ; CHAR=
68    (SKIP 2)
70    (LOAD&PUSH 5)
71    (LOAD&PUSH 5)
72    (T&PUSH)
73    (NIL&PUSH)
74    (CALL 4 9)                          ; MDEFCHK
77    (LOAD&PUSH 5)
78    (LOAD&PUSH 5)
79    (LOAD&PUSH 5)
80    (LOAD&PUSH 5)
81    (CALL2&PUSH 1)                      ; MDEFINE1
83    (CALL2&PUSH 1)                      ; MDEFINE1
85    (CONST 2)                           ; AEXPR
86    L86
86    (PUSH)
87    (CALL 3 3)                          ; MPUTPROP
90    (SKIP&RET 6)


Disassembly of function #:|(DEFMFUN MSPECFUNP (FUN) ...)-121|
(CONST 0) = MSPECFUNP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MSPECFUNP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSPECFUNP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MSPECFUNP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MSPECFUNP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MSPECFUNP
8     (SKIP&RET 1)


Disassembly of function MSPECFUNP
(CONST 0) = (FSUBR FEXPR MACRO)
(CONST 1) = GETL-LM-FCN-PROP
(CONST 2) = (MFEXPR* MFEXPR*S)
(CONST 3) = GETL
(CONST 4) = $TRANSRUN
(CONST 5) = TRANSLATED-MMACRO
(CONST 6) = MMACRO
(CONST 7) = MGET
(CONST 8) = EVOK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($TRANSRUN)
26 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (FSUBR FEXPR MACRO)
2     (CALL2&JMPIF 1 L27)                 ; GETL-LM-FCN-PROP
5     (LOAD&PUSH 1)
6     (CONST&PUSH 2)                      ; (MFEXPR* MFEXPR*S)
7     (CALL2&JMPIF 3 L27)                 ; GETL
10    (GETVALUE 4)                        ; $TRANSRUN
12    (JMPIFNOT L21)
14    (LOAD&PUSH 1)
15    (CONST&PUSH 5)                      ; TRANSLATED-MMACRO
16    (PUSH-UNBOUND 1)
18    (CALLS2&JMPIF 132 L27)              ; GET
21    L21
21    (LOAD&PUSH 1)
22    (CONST&PUSH 6)                      ; MMACRO
23    (CALL2 7)                           ; MGET
25    (JMPIFNOT1 L36)
27    L27
27    (LOAD&PUSH 1)
28    (CONST&PUSH 8)                      ; EVOK
29    (PUSH-UNBOUND 1)
31    (CALLS2 132)                        ; GET
33    (NOT)
34    (SKIP&RET 2)
36    L36
36    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MDEFINE1 (ARGS BODY) ...)-122|
(CONST 0) = MDEFINE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MDEFINE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFINE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MDEFINE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MDEFINE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MDEFINE1
8     (SKIP&RET 1)


Disassembly of function MDEFINE1
(CONST 0) = FUNDEFSIMP
(CONST 1) = SIMPLIFY
(CONST 2) = (LAMBDA)
(CONST 3) = (MLIST)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FUNDEFSIMP)
27 byte-code instructions:
0     (GETVALUE 0)                        ; FUNDEFSIMP
2     (JMPIFNOT L15)
4     (LOAD&PUSH 1)
5     (CALL1&PUSH 1)                      ; SIMPLIFY
7     (LOAD 2)
8     (JMPIFATOM L13)
10    (LOAD 0)
11    (JMPIFCONSP L24)
13    L13
13    (SKIP 1)
15    L15
15    (CONST&PUSH 2)                      ; (LAMBDA)
16    (CONST&PUSH 3)                      ; (MLIST)
17    (LOAD 4)
18    (CONS&PUSH)
19    (LOAD&PUSH 3)
20    (LIST 3)
22    (SKIP&RET 3)
24    L24
24    (LOAD&PUSH 2)
25    (LOAD&CAR&PUSH 1)
27    (CALLS1 168)                        ; RPLACA
29    (LOAD&PUSH 2)
30    (LOAD&CDR&PUSH 1)
32    (CALLS1 170)                        ; RPLACD
34    (SKIP 1)
36    (JMP L15)


Disassembly of function #:|(DEFUN MDEFCHK (FUN ARGS ARY ...) ...)-123|
(CONST 0) = MDEFCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MDEFCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MDEFCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MDEFCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MDEFCHK
8     (SKIP&RET 1)


Disassembly of function MDEFCHK
(CONST 0) = MDEFPARAM
(CONST 1) = MFEXPRP
(CONST 2) = MQUOTEP
(CONST 3) = MDEFLISTP
(CONST 4) = "Improper parameter in function definition for ~:M:~%~M"
(CONST 5) = MERROR
(CONST 6) = MPUTPROP
(CONST 7) = MLEXPRP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (MFEXPRP)
81 byte-code instructions:
0     (LOAD&PUSH 3)
1     (PUSH-NIL 2)
3     (LOAD&JMPIFNOT 2 L79)
7     L7
7     (LOAD&CAR&PUSH 2)
9     (CALL1&JMPIF 0 L73)                 ; MDEFPARAM
12    (LOAD&JMPIFNOT 5 L18)
15    (LOAD&JMPIFNOT 4 L66)
18    L18
18    (GETVALUE 1)                        ; MFEXPRP
20    (JMPIFNOT L35)
22    (LOAD&CAR&PUSH 2)
24    (CALL1&JMPIFNOT 2 L35)              ; MQUOTEP
27    (LOAD 2)
28    (CAR)
29    (CDR)
30    (CAR&PUSH)
31    (CALL1&JMPIF 0 L100)                ; MDEFPARAM
35    L35
35    (LOAD&PUSH 2)
36    (CALL1&JMPIFNOT 3 L66)              ; MDEFLISTP
39    (LOAD 2)
40    (CAR)
41    (CDR)
42    (CAR&PUSH)
43    (CALL1&JMPIF 0 L106)                ; MDEFPARAM
46    (GETVALUE 1)                        ; MFEXPRP
48    (JMPIFNOT L66)
50    (LOAD 2)
51    (CAR)
52    (CDR)
53    (CAR&PUSH)
54    (CALL1&JMPIFNOT 2 L66)              ; MQUOTEP
57    (LOAD 2)
58    (CAR)
59    (CDR)
60    (CAR)
61    (CDR)
62    (CAR&PUSH)
63    (CALL1&JMPIF 0 L104)                ; MDEFPARAM
66    L66
66    (CONST&PUSH 4)                      ; "Improper parameter in function definition for ~:M:~%~M"
67    (LOAD&PUSH 8)
68    (LOAD&CAR&PUSH 4)
70    (CALL 3 5)                          ; MERROR
73    L73
73    (LOAD&CDR&STORE 2)
75    (LOAD&JMPIF 2 L7)
79    L79
79    (LOAD&JMPIFNOT 1 L85)
82    (LOAD&JMPIFNOT 4 L110)
85    L85
85    (LOAD 0)
86    (JMPIFNOT1 L121)
88    L88
88    (LOAD 4)
89    (NOT)
90    (JMPIFNOT1 L121)
92    (LOAD&PUSH 7)
93    (LOAD&PUSH 1)
94    (CONST&PUSH 7)                      ; MLEXPRP
95    (CALL 3 6)                          ; MPUTPROP
98    (SKIP&RET 8)
100   L100
100   (T&STORE 1)
102   (JMP L73)
104   L104
104   (T&STORE 1)
106   L106
106   (T&STORE 0)
108   (JMP L73)
110   L110
110   (LOAD&PUSH 7)
111   (LOAD&PUSH 2)
112   (CONST&PUSH 1)                      ; MFEXPRP
113   (CALL 3 6)                          ; MPUTPROP
116   (LOAD 0)
117   (JMPIFNOT1 L121)
119   (JMP L88)
121   L121
121   (SKIP&RET 8)


Disassembly of function #:|(DEFUN MDEFPARAM (X) ...)-124|
(CONST 0) = MDEFPARAM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MDEFPARAM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFPARAM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MDEFPARAM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MDEFPARAM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MDEFPARAM
8     (SKIP&RET 1)


Disassembly of function MDEFPARAM
(CONST 0) = X
(CONST 1) = MAXIMA-CONSTANTP
(CONST 2) = 1
(CONST 3) = GETCHARN
(CONST 4) = #\&
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 5)                          ; ATOM
7     (JMPIFNOT1 L26)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 1)                           ; MAXIMA-CONSTANTP
13    (NOT)
14    (JMPIFNOT1 L26)
16    (GETVALUE&PUSH 0)                   ; X
18    (CONST&PUSH 2)                      ; 1
19    (CALL2&PUSH 3)                      ; GETCHARN
21    (CONST&PUSH 4)                      ; #\&
22    (CALLSR 1 7)                        ; CHAR=
25    (NOT)
26    L26
26    (UNBIND1)
27    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MDEFLISTP (L) ...)-125|
(CONST 0) = MDEFLISTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MDEFLISTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFLISTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MDEFLISTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MDEFLISTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MDEFLISTP
8     (SKIP&RET 1)


Disassembly of function MDEFLISTP
(CONST 0) = $LISTP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (NOT)
3     (JMPIFNOT1 L23)
5     (LOAD&CAR&PUSH 1)
7     (CALL1 0)                           ; $LISTP
9     (JMPIFNOT1 L23)
11    (LOAD 1)
12    (CAR)
13    (CDR)
14    (JMPIFNOT1 L23)
16    (LOAD 1)
17    (CAR)
18    (CDR)
19    (CDR)
20    (NOT)
21    (SKIP&RET 2)
23    L23
23    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MOPP (FUN) ...)-126|
(CONST 0) = MOPP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MOPP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOPP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MOPP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MOPP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MOPP
8     (SKIP&RET 1)


Disassembly of function MOPP
(CONST 0) = MQAPPLY
(CONST 1) = MOPP1
(CONST 2) = OPERATORS
(CONST 3) = RULECHK
(CONST 4) = RULEFCNL
(CONST 5) = MEMQ
(CONST 6) = OPERS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RULEFCNL)
30 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST 0)                           ; MQAPPLY
2     (EQ)
3     (NOT)
4     (JMPIFNOT1 L42)
6     (LOAD&PUSH 1)
7     (CALL1 1)                           ; MOPP1
9     (JMPIF1 L42)
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; OPERATORS
13    (PUSH-UNBOUND 1)
15    (CALLS2 132)                        ; GET
17    (JMPIFNOT1 L42)
19    (LOAD&PUSH 1)
20    (CALL1 3)                           ; RULECHK
22    (NOT)
23    (JMPIFNOT1 L42)
25    (LOAD&PUSH 1)
26    (GETVALUE&PUSH 4)                   ; RULEFCNL
28    (CALL2 5)                           ; MEMQ
30    (NOT)
31    (JMPIFNOT1 L42)
33    (LOAD&PUSH 1)
34    (CONST&PUSH 6)                      ; OPERS
35    (PUSH-UNBOUND 1)
37    (CALLS2 132)                        ; GET
39    (NOT)
40    (SKIP&RET 2)
42    L42
42    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MOPP1 (FUN) ...)-127|
(CONST 0) = MOPP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MOPP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOPP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MOPP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MOPP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MOPP1
8     (SKIP&RET 1)


Disassembly of function MOPP1
(CONST 0) = OP
(CONST 1) = $PROPS
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; OP
2     (PUSH-UNBOUND 1)
4     (CALLS2&STORE 132 1)                ; GET
7     (JMPIFNOT1 L18)
9     (PUSH)
10    (GETVALUE 1)                        ; $PROPS
12    (CDR&PUSH)
13    (CALL2 2)                           ; MEMQ
15    (NOT)
16    (SKIP&RET 2)
18    L18
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MAPPLY (A B C) ...)-128|
(CONST 0) = MAPPLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAPPLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAPPLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAPPLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAPPLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAPPLY
8     (SKIP&RET 1)


Disassembly of function MAPPLY
(CONST 0) = MAPPLY1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD&PUSH 3)
1     (LOAD&PUSH 3)
2     (LOAD&PUSH 3)
3     (NIL&PUSH)
4     (CALL 4 0)                          ; MAPPLY1
7     (SKIP&RET 4)


Disassembly of function #:|(DEFMSPEC $APPLY (L) ...)-129-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $APPLY (L) ...)-129-2-1|>
(CONST 1) = $APPLY
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $APPLY (L) ...)-129-2-1|>
1     (CONST&PUSH 1)                      ; $APPLY
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $APPLY (L) ...)-129-2-1|
(CONST 0) = TWOARGCHECK
(CONST 1) = MEVAL
(CONST 2) = $LISTP
(CONST 3) = 
"Attempt to apply ~:M to ~M~
		 ~%Second argument to APPLY must be a list."
(CONST 4) = MERROR
(CONST 5) = GETOPR
(CONST 6) = AUTOLDCHK
(CONST 7) = MAPPLY1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
31 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; TWOARGCHECK
3     (LOAD 1)
4     (CDR)
5     (CAR&PUSH)
6     (CALL1&PUSH 1)                      ; MEVAL
8     (LOAD 2)
9     (CDR)
10    (CDR)
11    (CAR&PUSH)
12    (CALL1&PUSH 1)                      ; MEVAL
14    (LOAD&PUSH 0)
15    (CALL1&JMPIF 2 L24)                 ; $LISTP
18    (CONST&PUSH 3)                      ; "Attempt to apply ~:M to ~M~
		 ~%Second argument to APPLY must be a list."
19    (LOAD&PUSH 2)
20    (LOAD&PUSH 2)
21    (CALL 3 4)                          ; MERROR
24    L24
24    (LOAD&PUSH 1)
25    (CALL1 5)                           ; GETOPR
27    (STORE 1)
28    (PUSH)
29    (CALL1 6)                           ; AUTOLDCHK
31    (LOAD&PUSH 1)
32    (LOAD&CDR&PUSH 1)
34    (LOAD 5)
35    (CDR)
36    (CAR&PUSH)
37    (LOAD&PUSH 6)
38    (CALL 4 7)                          ; MAPPLY1
41    (SKIP&RET 4)


Disassembly of function #:|(DEFUN AUTOLDCHK (FUN) ...)-130|
(CONST 0) = AUTOLDCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE AUTOLDCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; AUTOLDCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AUTOLDCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE AUTOLDCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; AUTOLDCHK
8     (SKIP&RET 1)


Disassembly of function AUTOLDCHK
(CONST 0) = AUTOLOAD
(CONST 1) = MFBOUNDP
(CONST 2) = LOAD-FUNCTION
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
25 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 6)                          ; SYMBOLP
3     (JMPIFNOT1 L34)
5     (LOAD&PUSH 1)
6     (CONST&PUSH 0)                      ; AUTOLOAD
7     (PUSH-UNBOUND 1)
9     (CALLS2 132)                        ; GET
11    (JMPIFNOT1 L34)
13    (LOAD&PUSH 1)
14    (CALLS1&JMPIFNOT 80 L26)            ; FBOUNDP
17    (NOT)
18    (JMPIFNOT1 L34)
20    L20
20    (LOAD&PUSH 1)
21    (T&PUSH)
22    (CALL2 2)                           ; LOAD-FUNCTION
24    (SKIP&RET 2)
26    L26
26    (LOAD&PUSH 1)
27    (CALL1 1)                           ; MFBOUNDP
29    (NOT)
30    (JMPIFNOT1 L34)
32    (JMP L20)
34    L34
34    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DISPFUN (L) ...)-131-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $DISPFUN (L) ...)-131-2-1|>
(CONST 1) = $DISPFUN
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $DISPFUN (L) ...)-131-2-1|>
1     (CONST&PUSH 1)                      ; $DISPFUN
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DISPFUN (L) ...)-131-2-1|
(CONST 0) = $ALL
(CONST 1) = DISPFUN1
(CONST 2) = $FUNCTIONS
(CONST 3) = $ARRAYS
(CONST 4) = X
(CONST 5) = AEXPR
(CONST 6) = MGET
(CONST 7) = $MACROS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($MACROS X $ARRAYS $FUNCTIONS)
52 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (CDR)
3     (JMPIF L24)
5     (LOAD&CAR&PUSH 1)
7     (JMPIFNOTEQTO 0 L24)                ; $ALL
10    (GETVALUE 2)                        ; $FUNCTIONS
12    (CDR&PUSH)
13    (T&PUSH)
14    (NIL&PUSH)
15    (CALL 3 1)                          ; DISPFUN1
18    (NIL&PUSH)
19    (GETVALUE 3)                        ; $ARRAYS
21    (CDR&PUSH)
22    (JMP L53)
24    L24
24    (LOAD&PUSH 1)
25    (NIL)
26    (JMP L72)
28    L28
28    (LOAD&CAR&PUSH 0)
30    (LOAD 0)
31    (BIND 4)                            ; X
33    (GETVALUE&PUSH 4)                   ; X
35    (CONST&PUSH 5)                      ; AEXPR
36    (CALL2&JMPIFNOT 6 L43)              ; MGET
39    (GETVALUE&PUSH 4)                   ; X
41    (NIL)
42    (CONS)
43    L43
43    (UNBIND1)
44    (PUSH)
45    (LOAD&PUSH 3)
46    (CALLS1&STORE 163 2)                ; NRECONC
49    (SKIP 1)
51    (LOAD&CDR&STORE 0)
53    L53
53    (LOAD&PUSH 0)
54    (CALLS1&JMPIFNOT 146 L28)           ; ENDP
57    (SKIP 1)
59    (LOAD&PUSH 0)
60    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
63    (NIL&PUSH)
64    (T&PUSH)
65    (CALL 3 1)                          ; DISPFUN1
68    (GETVALUE 7)                        ; $MACROS
70    (CDR&PUSH)
71    (T)
72    L72
72    (PUSH)
73    (NIL&PUSH)
74    (CALL 3 1)                          ; DISPFUN1
77    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DISPFUN1 (L FLAG MAEXPRP) ...)-132|
(CONST 0) = DISPFUN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISPFUN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISPFUN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISPFUN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISPFUN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISPFUN1
8     (SKIP&RET 1)


Disassembly of function DISPFUN1
(CONST 0) = FLAG
(CONST 1) = CONSFUNDEF
(CONST 2) = $LDISP
(CONST 3) = $DONE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FLAG)
29 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FLAG
3     (LOAD&PUSH 6)
4     (NIL&PUSH)
5     (JMP L30)
7     L7
7     (LOAD 0)
8     (CAR)
9     (CAR)
10    (JMP L20)
12    L12
12    (LOAD&CAR&STORE 1 0)
15    (GETVALUE 0)                        ; FLAG
17    (JMPIF L7)
19    (LOAD 0)
20    L20
20    (PUSH)
21    (LOAD&PUSH 7)
22    (NIL&PUSH)
23    (CALL&PUSH 3 1)                     ; CONSFUNDEF
26    (CALL1 2)                           ; $LDISP
28    (LOAD&CDR&STORE 1)
30    L30
30    (LOAD&PUSH 1)
31    (CALLS1&JMPIFNOT 146 L12)           ; ENDP
34    (SKIP 2)
36    (CONST 3)                           ; $DONE
37    (UNBIND1)
38    (SKIP&RET 4)


Disassembly of function #:|(DEFMSPEC $FUNDEF (X) ...)-133-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $FUNDEF (X) ...)-133-2-1|>
(CONST 1) = $FUNDEF
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $FUNDEF (X) ...)-133-2-1|>
1     (CONST&PUSH 1)                      ; $FUNDEF
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $FUNDEF (X) ...)-133-2-1|
(CONST 0) = X
(CONST 1) = FEXPRCHECK
(CONST 2) = CONSFUNDEF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&PUSH 1)                      ; FEXPRCHECK
7     (PUSH-NIL 2)
9     (CALL 3 2)                          ; CONSFUNDEF
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CONSFUNDEF (X MAEXPRP STRINGP) ...)-134|
(CONST 0) = CONSFUNDEF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSFUNDEF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSFUNDEF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSFUNDEF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSFUNDEF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSFUNDEF
8     (SKIP&RET 1)


Disassembly of function CONSFUNDEF
(CONST 0) = X
(CONST 1) = NAME
(CONST 2) = MQAPPLY
(CONST 3) = ARRAY
(CONST 4) = MEMQ
(CONST 5) = $VERBIFY
(CONST 6) = (MEXPR MMACRO)
(CONST 7) = MGETL
(CONST 8) = (AEXPR)
(CONST 9) = MEVAL1
(CONST 10) = LAMBDA
(CONST 11) = EDIT
(CONST 12) = STATE-PDL
(CONST 13) = "~:M is not the name of a user function."
(CONST 14) = MERROR
(CONST 15) = MFILEP
(CONST 16) = DSKGET
(CONST 17) = MMACRO
(CONST 18) = (MDEFMACRO SIMP)
(CONST 19) = (MDEFINE SIMP)
(CONST 20) = (MQAPPLY)
(CONST 21) = AEXPR
(CONST 22) = (MQAPPLY)
(CONST 23) = (ARRAY)
(CONST 24) = (ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NAME STATE-PDL X)
writes special variable : (NAME)
194 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; NAME
7     (NIL&PUSH)
8     (GETVALUE&PUSH 0)                   ; X
10    (CALLS2&JMPIFNOT 4 L29)             ; CONSP
13    (GETVALUE 0)                        ; X
15    (CAR)
16    (CAR&PUSH)
17    (CONST 2)                           ; MQAPPLY
18    (EQ)
19    (NOT)
20    (JMPIFNOT L29)
22    (CONST&PUSH 3)                      ; ARRAY
23    (GETVALUE 0)                        ; X
25    (CAR)
26    (CDR&PUSH)
27    (CALL2 4)                           ; MEMQ
29    L29
29    (STORE 4)
30    (GETVALUE 0)                        ; X
32    (JMPIFATOM L93)
34    (LOAD&JMPIFNOT 4 L171)
38    (GETVALUE 0)                        ; X
40    (CAR)
41    (CAR&PUSH)
42    (CALL1&PUSH 5)                      ; $VERBIFY
44    (CONST&PUSH 3)                      ; ARRAY
45    (LIST&PUSH 2)
47    (GETVALUE 0)                        ; X
49    (CDR)
50    (CONS)
51    (SETVALUE 1)                        ; NAME
53    (PUSH)
54    (CALL1 9)                           ; MEVAL1
56    (STORE 0)
57    (JMPIFATOM L66)
59    (LOAD 0)
60    (CAR)
61    (CAR&PUSH)
62    (JMPIFEQTO 10 L171)                 ; LAMBDA
66    L66
66    (NIL)
67    L67
67    (STORE 0)
68    (LOAD&JMPIF 0 L175)
72    L72
72    (LOAD&JMPIF 9 L115)
75    (CONST&PUSH 11)                     ; EDIT
76    (GETVALUE&PUSH 12)                  ; STATE-PDL
78    (CALL2&JMPIFNOT 4 L85)              ; MEMQ
81    (PUSH-UNBOUND 1)
83    (CALLS1 139)                        ; TERPRI
85    L85
85    (CONST&PUSH 13)                     ; "~:M is not the name of a user function."
86    (GETVALUE&PUSH 0)                   ; X
88    (CALL2 14)                          ; MERROR
90    (JMP L206)
93    L93
93    (GETVALUE&PUSH 0)                   ; X
95    (CALL1 5)                           ; $VERBIFY
97    (SETVALUE 1)                        ; NAME
99    (LOAD&JMPIF 10 L108)
102   (GETVALUE&PUSH 1)                   ; NAME
104   (CONST&PUSH 6)                      ; (MEXPR MMACRO)
105   (CALL2&JMPIF 7 L67)                 ; MGETL
108   L108
108   (GETVALUE&PUSH 1)                   ; NAME
110   (CONST&PUSH 8)                      ; (AEXPR)
111   (CALL2 7)                           ; MGETL
113   (JMP L67)
115   L115
115   (GETVALUE 0)                        ; X
117   (SKIP 1)
119   (UNBIND1)
120   (SKIP 1)
122   (JMP L270)
125   L125
125   (CONST 18)                          ; (MDEFMACRO SIMP)
126   (JMP L213)
129   L129
129   (CONST&PUSH 20)                     ; (MQAPPLY)
130   (GETVALUE&PUSH 1)                   ; NAME
132   (LOAD 3)
133   (CDR)
134   (CAR)
135   (CDR)
136   (CONS)
137   (CONS&PUSH)
138   (LOAD 2)
139   (CDR)
140   (CDR)
141   (CONS)
142   (JMP L264)
145   L145
145   (CONST&PUSH 22)                     ; (MQAPPLY)
146   (GETVALUE&PUSH 1)                   ; NAME
148   (CONST 23)                          ; (ARRAY)
150   (CONS&PUSH)
151   (LOAD 4)
152   (CDR)
153   (CAR)
154   (CDR)
155   (CAR)
156   (CDR)
157   (CONS&PUSH)
158   (LOAD 2)
159   (CDR)
160   (CAR)
161   (CDR)
162   (CONS)
163   (CONS&PUSH)
164   (LOAD 1)
165   (CDR)
166   (CDR)
167   (CAR)
168   (JMP L259)
171   L171
171   (LOAD&JMPIFNOT 0 L72)
175   L175
175   (LOAD&JMPIF 4 L206)
178   (LOAD 0)
179   (CDR)
180   (CAR&PUSH)
181   (CALL1&JMPIFNOT 15 L206)            ; MFILEP
184   (LOAD&CAR&PUSH 0)
186   (LOAD 1)
187   (CDR)
188   (CAR)
189   (CDR)
190   (CAR&PUSH)
191   (LOAD 2)
192   (CDR)
193   (CAR)
194   (CDR)
195   (CDR)
196   (CAR&PUSH)
197   (LOAD&CAR&PUSH 3)
199   (NIL&PUSH)
200   (CALL&PUSH 4 16)                    ; DSKGET
203   (LIST 2)
205   (STORE 0)
206   L206
206   (LOAD&CAR&PUSH 0)
208   (JMPIFEQTO 17 L125)                 ; MMACRO
212   (CONST 19)                          ; (MDEFINE SIMP)
213   L213
213   (PUSH)
214   (LOAD&JMPIF 5 L129)
218   (LOAD 1)
219   (CDR)
220   (CAR)
221   (CDR)
222   (CDR)
223   (CAR&PUSH)
224   (LOAD&CAR&PUSH 2)
226   (JMPIFNOTEQTO 21 L239)              ; AEXPR
229   (LOAD 0)
230   (JMPIFATOM L239)
232   (LOAD 0)
233   (CAR)
234   (CAR&PUSH)
235   (JMPIFEQTO 10 L145)                 ; LAMBDA
239   L239
239   (GETVALUE&PUSH 1)                   ; NAME
241   (LOAD&CAR&PUSH 3)
243   (CONST 21)                          ; AEXPR
245   (EQ)
246   (JMPIFNOT L250)
248   (CONST 24)                          ; (ARRAY)
250   L250
250   (CONS&PUSH)
251   (LOAD 3)
252   (CDR)
253   (CAR)
254   (CDR)
255   (CAR)
256   (CDR)
257   (CONS&PUSH)
258   (LOAD 1)
259   L259
259   (PUSH)
260   (LIST 2)
262   (SKIP 1)
264   L264
264   (CONS)
265   (SKIP 1)
267   (UNBIND1)
268   (SKIP 1)
270   L270
270   (UNBIND1)
271   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $FUNMAKE (FUN ARGS) ...)-135|
(CONST 0) = $FUNMAKE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FUNMAKE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FUNMAKE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FUNMAKE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FUNMAKE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FUNMAKE
8     (SKIP&RET 1)


Disassembly of function $FUNMAKE
(CONST 0) = $SUBVARP
(CONST 1) = LAMBDA
(CONST 2) = "Bad first argument to FUNMAKE: ~M"
(CONST 3) = MERROR
(CONST 4) = $LISTP
(CONST 5) = "Bad second argument to FUNMAKE: ~M"
(CONST 6) = GETOPR
(CONST 7) = MCONS-OP-ARGS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
26 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIF 6 L21)                ; SYMBOLP
4     (LOAD&PUSH 2)
5     (CALL1&JMPIF 0 L21)                 ; $SUBVARP
8     (LOAD 2)
9     (JMPIFATOM L17)
11    (LOAD 2)
12    (CAR)
13    (CAR&PUSH)
14    (JMPIFEQTO 1 L21)                   ; LAMBDA
17    L17
17    (CONST&PUSH 2)                      ; "Bad first argument to FUNMAKE: ~M"
18    (LOAD&PUSH 3)
19    (CALL2 3)                           ; MERROR
21    L21
21    (LOAD&PUSH 1)
22    (CALL1&JMPIF 4 L29)                 ; $LISTP
25    (CONST&PUSH 5)                      ; "Bad second argument to FUNMAKE: ~M"
26    (LOAD&PUSH 2)
27    (CALL2 3)                           ; MERROR
29    L29
29    (LOAD&PUSH 2)
30    (CALL1&PUSH 6)                      ; GETOPR
32    (LOAD&CDR&PUSH 2)
34    (CALL2 7)                           ; MCONS-OP-ARGS
36    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN MCONS-OP-ARGS (OP ARGS) ...)-136|
(CONST 0) = MCONS-OP-ARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MCONS-OP-ARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCONS-OP-ARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MCONS-OP-ARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MCONS-OP-ARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MCONS-OP-ARGS
8     (SKIP&RET 1)


Disassembly of function MCONS-OP-ARGS
(CONST 0) = (MQAPPLY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIF 6 L11)                ; SYMBOLP
4     (CONST&PUSH 0)                      ; (MQAPPLY)
5     (LOAD&PUSH 3)
6     (LOAD 3)
7     (LIST* 2)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (NIL)
13    (CONS&PUSH)
14    (LOAD 2)
15    (CONS)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN OPTIONP (X) ...)-137|
(CONST 0) = OPTIONP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OPTIONP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OPTIONP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OPTIONP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OPTIONP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OPTIONP
8     (SKIP&RET 1)


Disassembly of function OPTIONP
(CONST 0) = X
(CONST 1) = $VALUES
(CONST 2) = MEMQ
(CONST 3) = $LABELS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($LABELS $VALUES X)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS1 79)                         ; BOUNDP
7     (JMPIFNOT1 L27)
9     (GETVALUE&PUSH 0)                   ; X
11    (GETVALUE 1)                        ; $VALUES
13    (CDR&PUSH)
14    (CALL2 2)                           ; MEMQ
16    (NOT)
17    (JMPIFNOT1 L27)
19    (GETVALUE&PUSH 0)                   ; X
21    (GETVALUE 3)                        ; $LABELS
23    (CDR&PUSH)
24    (CALL2 2)                           ; MEMQ
26    (NOT)
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MCOND (FORM) ...)-138-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MCOND (FORM) ...)-138-2-1|>
(CONST 1) = MCOND
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MCOND (FORM) ...)-138-2-1|>
1     (CONST&PUSH 1)                      ; MCOND
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MCOND (FORM) ...)-138-2-1|
(CONST 0) = MEVALP
(CONST 1) = MEVAL
(CONST 2) = (MCOND)
(CONST 3) = MEVAL-ATOMS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
34 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (PUSH)
3     (NIL&PUSH)
4     (LOAD&JMPIFNOT 1 L26)
7     L7
7     (LOAD&CAR&PUSH 1)
9     (CALL1 0)                           ; MEVALP
11    (STORE 0)
12    (PUSH)
13    (T)
14    (JMPIFEQ L29)
16    (LOAD&JMPIF 0 L36)
19    (LOAD 1)
20    (CDR)
21    (CDR)
22    (STORE 1)
23    (LOAD&JMPIF 1 L7)
26    L26
26    (NIL)
27    (SKIP&RET 4)
29    L29
29    (LOAD 1)
30    (CDR)
31    (CAR&PUSH)
32    (CALL1 1)                           ; MEVAL
34    (SKIP&RET 4)
36    L36
36    (CONST&PUSH 2)                      ; (MCOND)
37    (LOAD&PUSH 1)
38    (CONST&SYMBOL-FUNCTION&PUSH 3)      ; MEVAL-ATOMS
40    (LOAD&CDR&PUSH 4)
42    (CALLSR 0 22)                       ; MAPCAR
45    (LIST* 2)
47    (SKIP&RET 4)


Disassembly of function #:|(DEFUN MEVAL-ATOMS (FORM) ...)-139|
(CONST 0) = MEVAL-ATOMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVAL-ATOMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVAL-ATOMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVAL-ATOMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVAL-ATOMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVAL-ATOMS
8     (SKIP&RET 1)


Disassembly of function MEVAL-ATOMS
(CONST 0) = MEVAL1
(CONST 1) = MQUOTE
(CONST 2) = (FSUBR FEXPR)
(CONST 3) = GETL-LM-FCN-PROP
(CONST 4) = (MFEXPR* MFEXPR*S)
(CONST 5) = GETL
(CONST 6) = (MCOND MAND MOR MNOT MPROGN MDO MDOIN)
(CONST 7) = MEMQ
(CONST 8) = MEVAL-ATOMS
(CONST 9) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
39 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L37)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L42)                   ; MQUOTE
9     (LOAD 1)
10    (CAR)
11    (CAR&PUSH)
12    (CONST&PUSH 2)                      ; (FSUBR FEXPR)
13    (CALL2&JMPIF 3 L23)                 ; GETL-LM-FCN-PROP
16    (LOAD 1)
17    (CAR)
18    (CAR&PUSH)
19    (CONST&PUSH 4)                      ; (MFEXPR* MFEXPR*S)
20    (CALL2&JMPIFNOT 5 L30)              ; GETL
23    L23
23    (LOAD 1)
24    (CAR)
25    (CAR&PUSH)
26    (CONST&PUSH 6)                      ; (MCOND MAND MOR MNOT MPROGN ...)
27    (CALL2&JMPIFNOT 7 L47)              ; MEMQ
30    L30
30    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; MEVAL-ATOMS
32    (LOAD&PUSH 2)
33    (CALL2 9)                           ; RECUR-APPLY
35    (SKIP&RET 2)
37    L37
37    (LOAD&PUSH 1)
38    (CALL1 0)                           ; MEVAL1
40    (SKIP&RET 2)
42    L42
42    (LOAD 1)
43    (CDR)
44    (CAR)
45    (SKIP&RET 2)
47    L47
47    (LOAD 1)
48    (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MDO (FORM) ...)-140-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MDO (FORM) ...)-140-2-1|>
(CONST 1) = MDO
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MDO (FORM) ...)-140-2-1|>
1     (CONST&PUSH 1)                      ; MDO
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MDO (FORM) ...)-140-2-1|
(CONST 0) = MDO
(CONST 1) = VAR
(CONST 2) = MDOP
(CONST 3) = (MPLUS)
(CONST 4) = 1
(CONST 5) = (MOR)
(CONST 6) = SIMPLIFY
(CONST 7) = $NUMFACTOR
(CONST 8) = MNEGP
(CONST 9) = (MLESSP)
(CONST 10) = (MGREATERP)
(CONST 11) = MEVAL
(CONST 12) = MBIND
(CONST 13) = BINDLIST
(CONST 14) = IS
(CONST 15) = MPROG
(CONST 16) = MSET
(CONST 17) = "GO not in BLOCK:~%~M"
(CONST 18) = MERROR
(CONST 19) = "Illegal RETURN:~%~M"
(CONST 20) = $DONE
(CONST 21) = MUNBIND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BINDLIST VAR)
168 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (T&PUSH)
3     (LOAD 2)
4     (CAR)
5     (JMPIF L8)
7     (CONST 0)                           ; MDO
8     L8
8     (BIND 1)                            ; VAR
10    (PUSH-NIL 3)
12    (LOAD 6)
13    (BIND 2)                            ; MDOP
15    (LOAD 11)
16    (CDR)
17    (CDR)
18    (CDR)
19    (CAR)
20    (JMPIF L35)
22    (CONST&PUSH 3)                      ; (MPLUS)
23    (LOAD 12)
24    (CDR)
25    (CDR)
26    (CAR)
27    (JMPIF L30)
29    (CONST 4)                           ; 1
30    L30
30    (PUSH)
31    (GETVALUE&PUSH 1)                   ; VAR
33    (LIST 3)
35    L35
35    (STORE 5)
36    (CONST&PUSH 5)                      ; (MOR)
37    (LOAD 12)
38    (CDR)
39    (CDR)
40    (CDR)
41    (CDR)
42    (CAR)
43    (JMPIFNOT L125)
46    (LOAD 12)
47    (CDR)
48    (CDR)
49    (CAR&PUSH)
50    (CALL1&PUSH 6)                      ; SIMPLIFY
52    (CALL1&PUSH 7)                      ; $NUMFACTOR
54    (CALL1&JMPIF 8 L128)                ; MNEGP
58    (CONST 10)                          ; (MGREATERP)
59    L59
59    (PUSH)
60    (GETVALUE&PUSH 1)                   ; VAR
62    (LOAD 14)
63    (CDR)
64    (CDR)
65    (CDR)
66    (CDR)
67    (CAR&PUSH)
68    (LIST 3)
70    L70
70    (PUSH)
71    (LOAD 13)
72    (CDR)
73    (CDR)
74    (CDR)
75    (CDR)
76    (CDR)
77    (CAR&PUSH)
78    (LIST 3)
80    (STORE 4)
81    (LOAD 11)
82    (CDR)
83    (CDR)
84    (CDR)
85    (CDR)
86    (CDR)
87    (CDR)
88    (CAR)
89    (STORE 3)
90    (GETVALUE&PUSH 1)                   ; VAR
92    (NIL)
93    (CONS&PUSH)
94    (NIL&PUSH)
95    (UNWIND-PROTECT-OPEN L194)
98    (LOAD&PUSH 3)
99    (LOAD 16)
101   (CDR)
102   (CAR)
103   (JMPIFNOT L132)
105   (LOAD 16)
107   (CDR)
108   (CAR&PUSH)
109   (CALL1 11)                          ; MEVAL
111   L111
111   (PUSH)
112   (NIL)
113   (CONS&PUSH)
114   (NIL&PUSH)
115   (CALL 3 12)                         ; MBIND
118   (T&STORE 2)
120   (NIL&PUSH)
121   (GETVALUE&PUSH 13)                  ; BINDLIST
123   (JMP L178)
125   L125
125   (NIL)
126   (JMP L70)
128   L128
128   (CONST 9)                           ; (MLESSP)
129   (JMP L59)
132   L132
132   (CONST 4)                           ; 1
133   (JMP L111)
135   L135
135   (CONST 15)                          ; MPROG
136   (CATCH-OPEN L161)
138   (LOAD&PUSH 12)
139   (CALL1 11)                          ; MEVAL
141   (NIL)
142   (CATCH-CLOSE)
143   (STORE 1)
144   L144
144   (GETVALUE&PUSH 1)                   ; VAR
146   (LOAD&PUSH 12)
147   (CALL1&PUSH 11)                     ; MEVAL
149   (CALL2 16)                          ; MSET
151   (JMP L178)
153   L153
153   (CONST&PUSH 17)                     ; "GO not in BLOCK:~%~M"
154   (LOAD 2)
155   (JMP L175)
157   L157
157   (LOAD 1)
158   (CAR)
159   (JMP L183)
161   L161
161   (STORE 1)
162   (JMPIFNOT L144)
164   (LOAD 1)
165   (JMPIFATOM L153)
167   (LOAD&PUSH 0)
168   (GETVALUE 13)                       ; BINDLIST
170   (JMPIFEQ L157)
172   (CONST&PUSH 19)                     ; "Illegal RETURN:~%~M"
173   (LOAD 2)
174   (CAR)
175   L175
175   (PUSH)
176   (CALL2 18)                          ; MERROR
178   L178
178   (LOAD&PUSH 10)
179   (CALL1&JMPIFNOT 14 L135)            ; IS
182   (CONST 20)                          ; $DONE
183   L183
183   (SKIP 2)
185   (UNWIND-PROTECT-NORMAL-EXIT)
186   (LOADI 0 0 0)
190   (JMPIFNOT L206)
192   (JMP L200)
194   L194
194   (LOADI 0 0 0)
198   (JMPIFNOT L206)
200   L200
200   (LOADI&PUSH 0 0 1)
204   (CALL1 21)                          ; MUNBIND
206   L206
206   (UNWIND-PROTECT-CLOSE)
207   (SKIP 2)
209   (UNBIND1)
210   (SKIP 3)
212   (UNBIND1)
213   (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC MDOIN (FORM) ...)-141-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MDOIN (FORM) ...)-141-2-1|>
(CONST 1) = MDOIN
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MDOIN (FORM) ...)-141-2-1|>
1     (CONST&PUSH 1)                      ; MDOIN
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MDOIN (FORM) ...)-141-2-1|
(CONST 0) = MDO
(CONST 1) = VAR
(CONST 2) = MDOP
(CONST 3) = MEVAL
(CONST 4) = FORMAT1
(CONST 5) = "Atomic 'IN' argument to DO statement:~%~M"
(CONST 6) = MERROR
(CONST 7) = MARGS
(CONST 8) = (MOR)
(CONST 9) = (MGREATERP)
(CONST 10) = $DONE
(CONST 11) = MBIND
(CONST 12) = BINDLIST
(CONST 13) = IS
(CONST 14) = MPROG
(CONST 15) = MSET
(CONST 16) = "GO not in BLOCK:~%~M"
(CONST 17) = "Illegal RETURN:~%~M"
(CONST 18) = MUNBIND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BINDLIST VAR)
148 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (T&PUSH)
3     (LOAD 2)
4     (CAR)
5     (JMPIF L8)
7     (CONST 0)                           ; MDO
8     L8
8     (BIND 1)                            ; VAR
10    (PUSH-NIL 3)
12    (LOAD 6)
13    (BIND 2)                            ; MDOP
15    (LOAD 11)
16    (CDR)
17    (CAR&PUSH)
18    (CALL1&PUSH 3)                      ; MEVAL
20    (CALL1 4)                           ; FORMAT1
22    (STORE 5)
23    (JMPIFATOM L97)
26    (LOAD&PUSH 5)
27    (CALL1 7)                           ; MARGS
29    L29
29    (STORE 5)
30    (CONST&PUSH 8)                      ; (MOR)
31    (LOAD 12)
32    (CDR)
33    (CDR)
34    (CDR)
35    (CDR)
36    (CAR)
37    (JMPIFNOT L50)
39    (CONST&PUSH 9)                      ; (MGREATERP)
40    (GETVALUE&PUSH 1)                   ; VAR
42    (LOAD 14)
43    (CDR)
44    (CDR)
45    (CDR)
46    (CDR)
47    (CAR&PUSH)
48    (LIST 3)
50    L50
50    (PUSH)
51    (LOAD 13)
52    (CDR)
53    (CDR)
54    (CDR)
55    (CDR)
56    (CDR)
57    (CAR&PUSH)
58    (LIST 3)
60    (STORE 4)
61    (LOAD 11)
62    (CDR)
63    (CDR)
64    (CDR)
65    (CDR)
66    (CDR)
67    (CDR)
68    (CAR)
69    (STORE 3)
70    (LOAD 5)
71    (JMPIFATOM L104)
73    (GETVALUE&PUSH 1)                   ; VAR
75    (NIL)
76    (CONS&PUSH)
77    (NIL&PUSH)
78    (UNWIND-PROTECT-OPEN L173)
81    (LOAD&PUSH 3)
82    (LOAD&CAR&PUSH 10)
84    (NIL)
85    (CONS&PUSH)
86    (NIL&PUSH)
87    (CALL 3 11)                         ; MBIND
90    (T&STORE 2)
92    (NIL&PUSH)
93    (GETVALUE&PUSH 12)                  ; BINDLIST
95    (JMP L154)
97    L97
97    (CONST&PUSH 5)                      ; "Atomic 'IN' argument to DO statement:~%~M"
98    (LOAD&PUSH 6)
99    (CALL2 6)                           ; MERROR
101   (JMP L29)
104   L104
104   (CONST 10)                          ; $DONE
105   (JMP L188)
108   L108
108   (CONST 14)                          ; MPROG
109   (CATCH-OPEN L137)
111   (LOAD&PUSH 12)
112   (CALL1 3)                           ; MEVAL
114   (NIL)
115   (CATCH-CLOSE)
116   (STORE 1)
117   L117
117   (LOAD&CDR&STORE 11)
119   (JMPIFNOT L154)
121   (GETVALUE&PUSH 1)                   ; VAR
123   (LOAD&CAR&PUSH 12)
125   (CALL2 15)                          ; MSET
127   (JMP L154)
129   L129
129   (CONST&PUSH 16)                     ; "GO not in BLOCK:~%~M"
130   (LOAD 2)
131   (JMP L151)
133   L133
133   (LOAD 1)
134   (CAR)
135   (JMP L162)
137   L137
137   (STORE 1)
138   (JMPIFNOT L117)
140   (LOAD 1)
141   (JMPIFATOM L129)
143   (LOAD&PUSH 0)
144   (GETVALUE 12)                       ; BINDLIST
146   (JMPIFEQ L133)
148   (CONST&PUSH 17)                     ; "Illegal RETURN:~%~M"
149   (LOAD 2)
150   (CAR)
151   L151
151   (PUSH)
152   (CALL2 6)                           ; MERROR
154   L154
154   (LOAD 11)
155   (JMPIFATOM L161)
157   (LOAD&PUSH 10)
158   (CALL1&JMPIFNOT 13 L108)            ; IS
161   L161
161   (CONST 10)                          ; $DONE
162   L162
162   (SKIP 2)
164   (UNWIND-PROTECT-NORMAL-EXIT)
165   (LOADI 0 0 0)
169   (JMPIFNOT L185)
171   (JMP L179)
173   L173
173   (LOADI 0 0 0)
177   (JMPIFNOT L185)
179   L179
179   (LOADI&PUSH 0 0 1)
183   (CALL1 18)                          ; MUNBIND
185   L185
185   (UNWIND-PROTECT-CLOSE)
186   (SKIP 2)
188   L188
188   (UNBIND1)
189   (SKIP 3)
191   (UNBIND1)
192   (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC MPROG (PROG) ...)-142-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MPROG (PROG) ...)-142-2-1|>
(CONST 1) = MPROG
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MPROG (PROG) ...)-142-2-1|>
1     (CONST&PUSH 1)                      ; MPROG
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MPROG (PROG) ...)-142-2-1|
(CONST 0) = MLOCP
(CONST 1) = $LISTP
(CONST 2) = LOCLIST
(CONST 3) = MSETQ
(CONST 4) = MEVAL
(CONST 5) = "Improper form in BLOCK variable list: ~M"
(CONST 6) = MERROR
(CONST 7) = MBIND
(CONST 8) = MPROGP
(CONST 9) = BINDLIST
(CONST 10) = $DONE
(CONST 11) = X
(CONST 12) = $%%
(CONST 13) = MPROG
(CONST 14) = "Illegal RETURN:~%~M"
(CONST 15) = "Illegal GO:~%~M"
(CONST 16) = ZL-MEMBER
(CONST 17) = "No such tag as ~:M"
(CONST 18) = (NIL)
(CONST 19) = MUNLOCAL
(CONST 20) = MUNBIND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MPROGP BINDLIST X LOCLIST)
writes special variables : (X $%% LOCLIST)
212 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (PUSH-NIL 2)
4     (T)
5     (BIND 0)                            ; MLOCP
7     (LOAD&CAR&PUSH 6)
9     (CALL1&JMPIFNOT 1 L18)              ; $LISTP
12    (LOAD 6)
13    (CAR)
14    (CDR)
15    (STORE 4)
16    (LOAD&CDR&STORE 6)
18    L18
18    (NIL&PUSH)
19    (GETVALUE 2)                        ; LOCLIST
21    (CONS)
22    (SETVALUE 2)                        ; LOCLIST
24    (LOAD&PUSH 4)
25    (LOAD&JMPIFNOT 0 L37)
28    L28
28    (LOAD 0)
29    (CAR)
30    (JMPIFCONSP L50)
32    (LOAD&CDR&STORE 0)
34    (LOAD&JMPIF 0 L28)
37    L37
37    (LOAD 5)
38    (STORE 4)
39    (SKIP 1)
41    L41
41    (LOAD&PUSH 3)
42    (T)
43    (JMPIFNOTEQ L233)
46    (NIL&PUSH)
47    (LOAD&PUSH 5)
48    (JMP L89)
50    L50
50    (T&STORE 4)
52    (SKIP 1)
54    (JMP L41)
56    L56
56    (LOAD 0)
57    (JMP L82)
59    L59
59    (LOAD 0)
60    (CDR)
61    (CDR)
62    (CAR&PUSH)
63    (CALL1 4)                           ; MEVAL
65    (JMP L82)
67    L67
67    (LOAD&CAR&PUSH 0)
69    (LOAD 0)
70    (JMPIFATOM L56)
72    (LOAD 0)
73    (CAR)
74    (CAR&PUSH)
75    (JMPIFEQTO 3 L59)                   ; MSETQ
78    (CONST&PUSH 5)                      ; "Improper form in BLOCK variable list: ~M"
79    (LOAD&PUSH 1)
80    (CALL2 6)                           ; MERROR
82    L82
82    (PUSH)
83    (LOAD&CONS&STORE 2)
85    (SKIP 1)
87    (LOAD&CDR&STORE 0)
89    L89
89    (LOAD&PUSH 0)
90    (CALLS1&JMPIFNOT 146 L67)           ; ENDP
93    (SKIP 1)
95    (LOAD&PUSH 0)
96    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
98    (SKIP 1)
100   (STORE 3)
101   (NIL&PUSH)
102   (LOAD&PUSH 5)
103   (JMP L221)
106   L106
106   (LOAD 0)
107   (JMP L214)
110   L110
110   (T&STORE 6)
112   (LOAD&CAR&PUSH 12)
114   (CALL1 4)                           ; MEVAL
116   (JMP L172)
118   L118
118   (CONST 13)                          ; MPROG
119   (CATCH-OPEN L153)
121   (LOAD&CAR&PUSH 15)
123   (CALL1 4)                           ; MEVAL
125   (SETVALUE 12)                       ; $%%
127   (STORE 10)
129   (NIL)
130   (CATCH-CLOSE)
131   (SETVALUE 11)                       ; X
133   (LOAD&JMPIFNOT 6 L278)
137   (JMP L275)
140   L140
140   (CONST&PUSH 14)                     ; "Illegal RETURN:~%~M"
141   (GETVALUE 11)                       ; X
143   (CAR)
144   (JMP L195)
146   L146
146   (GETVALUE 11)                       ; X
148   (JMPIFCONSP L140)
150   (CONST 15)                          ; "Illegal GO:~%~M"
151   (JMP L192)
153   L153
153   (SETVALUE 11)                       ; X
155   (JMPIFNOT L272)
158   (LOAD&PUSH 8)
159   (GETVALUE 9)                        ; BINDLIST
161   (JMPIFNOTEQ L146)
163   (GETVALUE 11)                       ; X
165   (JMPIFATOM L180)
167   (T&STORE 6)
169   (GETVALUE 11)                       ; X
171   (CAR)
172   L172
172   (STORE 7)
173   (LOAD&JMPIFNOT 6 L278)
177   (JMP L275)
180   L180
180   (GETVALUE&PUSH 11)                  ; X
182   (GETVALUE&PUSH 8)                   ; MPROGP
184   (CALL2 16)                          ; ZL-MEMBER
186   (STORE 12)
188   (JMPIF L272)
191   (CONST 17)                          ; "No such tag as ~:M"
192   L192
192   (PUSH)
193   (GETVALUE 11)                       ; X
195   L195
195   (PUSH)
196   (CALL2 6)                           ; MERROR
198   (LOAD&JMPIFNOT 6 L278)
202   (JMP L275)
205   L205
205   (LOAD&CAR&PUSH 0)
207   (LOAD 0)
208   (JMPIFATOM L106)
211   (LOAD 0)
212   (CDR)
213   (CAR)
214   L214
214   (PUSH)
215   (LOAD&CONS&STORE 2)
217   (SKIP 1)
219   (LOAD&CDR&STORE 0)
221   L221
221   (LOAD&PUSH 0)
222   (CALLS1&JMPIFNOT 146 L205)          ; ENDP
225   (SKIP 1)
227   (LOAD&PUSH 0)
228   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
230   (SKIP 1)
232   (STORE 4)
233   L233
233   (NIL&PUSH)
234   (UNWIND-PROTECT-OPEN L302)
237   (LOAD&PUSH 7)
238   (LOAD&PUSH 7)
239   (NIL&PUSH)
240   (CALL 3 7)                          ; MBIND
243   (T&STORE 2)
245   (LOAD&PUSH 9)
246   (LOAD 10)
247   (BIND 8)                            ; MPROGP
249   (GETVALUE&PUSH 9)                   ; BINDLIST
251   (CONST&PUSH 10)                     ; $DONE
252   (NIL&PUSH)
253   (NIL)
254   (BIND 11)                           ; X
256   (CONST 12)                          ; $%%
257   (BIND 12)                           ; $%%
259   (LOAD&JMPIFNOT 12 L283)
262   L262
262   (LOAD 12)
263   (CAR)
264   (JMPIFCONSP L118)
267   (LOAD 12)
268   (CDR)
269   (JMPIFNOT L110)
272   L272
272   (LOAD&JMPIFNOT 6 L278)
275   L275
275   (CONST 18)                          ; (NIL)
276   (STORE 12)
278   L278
278   (LOAD&CDR&STORE 12)
280   (LOAD&JMPIF 12 L262)
283   L283
283   (CALL0 19)                          ; MUNLOCAL
285   (LOAD 7)
286   (UNBIND 2)
288   (SKIP 3)
290   (UNBIND1)
291   (SKIP 1)
293   (UNWIND-PROTECT-NORMAL-EXIT)
294   (LOADI 0 0 0)
298   (JMPIFNOT L314)
300   (JMP L308)
302   L302
302   (LOADI 0 0 0)
306   (JMPIFNOT L314)
308   L308
308   (LOADI&PUSH 0 0 5)
312   (CALL1 20)                          ; MUNBIND
314   L314
314   (UNWIND-PROTECT-CLOSE)
315   (SKIP 1)
317   (UNBIND1)
318   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN MRETURN (X) ...)-143|
(CONST 0) = MRETURN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MRETURN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MRETURN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MRETURN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MRETURN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MRETURN
8     (SKIP&RET 1)


Disassembly of function MRETURN
(CONST 0) = X
(CONST 1) = MPROGP
(CONST 2) = MDOP
(CONST 3) = "RETURN not in BLOCK:~%~M"
(CONST 4) = MERROR
(CONST 5) = MPROG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X MDOP MPROGP)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; MPROGP
5     (JMPIF L16)
7     (GETVALUE 2)                        ; MDOP
9     (JMPIF L16)
11    (CONST&PUSH 3)                      ; "RETURN not in BLOCK:~%~M"
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL2 4)                           ; MERROR
16    L16
16    (CONST&PUSH 5)                      ; MPROG
17    (GETVALUE&PUSH 0)                   ; X
19    (NIL)
20    (CONS)
21    (THROW)


Disassembly of function #:|(DEFMSPEC MGO (TAG) ...)-144-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MGO (TAG) ...)-144-2-1|>
(CONST 1) = MGO
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MGO (TAG) ...)-144-2-1|>
1     (CONST&PUSH 1)                      ; MGO
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MGO (TAG) ...)-144-2-1|
(CONST 0) = FEXPRCHECK
(CONST 1) = MPROGP
(CONST 2) = "GO not in BLOCK:~%~M"
(CONST 3) = MERROR
(CONST 4) = MPROG
(CONST 5) = "Argument to GO not atomic:~%~M"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (MPROGP)
20 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; FEXPRCHECK
3     (STORE 1)
4     (GETVALUE 1)                        ; MPROGP
6     (JMPIFNOT L18)
8     (LOAD 1)
9     (JMPIFATOM L21)
11    (CONST 5)                           ; "Argument to GO not atomic:~%~M"
12    L12
12    (PUSH)
13    (LOAD&PUSH 2)
14    (CALL2 3)                           ; MERROR
16    (SKIP&RET 2)
18    L18
18    (CONST 2)                           ; "GO not in BLOCK:~%~M"
19    (JMP L12)
21    L21
21    (CONST&PUSH 4)                      ; MPROG
22    (LOAD 2)
23    (THROW)


Disassembly of function #:|(DEFMSPEC $SUBVAR (L) ...)-145-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $SUBVAR (L) ...)-145-2-1|>
(CONST 1) = $SUBVAR
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $SUBVAR (L) ...)-145-2-1|>
1     (CONST&PUSH 1)                      ; $SUBVAR
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $SUBVAR (L) ...)-145-2-1|
(CONST 0) = $SUBVAR
(CONST 1) = WNA-ERR
(CONST 2) = (MQAPPLY ARRAY)
(CONST 3) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (JMPIF L7)
4     (CONST&PUSH 0)                      ; $SUBVAR
5     (CALL1 1)                           ; WNA-ERR
7     L7
7     (CONST&PUSH 2)                      ; (MQAPPLY ARRAY)
8     (LOAD 2)
9     (CONS&PUSH)
10    (CALL1 3)                           ; MEVAL
12    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN RAT (X Y) ...)-146|
(CONST 0) = RAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAT
8     (SKIP&RET 1)


Disassembly of function RAT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = (RAT SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (CONST&PUSH 2)                      ; (RAT SIMP)
7     (GETVALUE&PUSH 0)                   ; X
9     (GETVALUE&PUSH 1)                   ; Y
11    (LIST 3)
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $EXP (X) ...)-147|
(CONST 0) = $EXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EXP
8     (SKIP&RET 1)


Disassembly of function $EXP
(CONST 0) = X
(CONST 1) = (MEXPT)
(CONST 2) = $%E
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; (MEXPT)
4     (CONST&PUSH 2)                      ; $%E
5     (GETVALUE&PUSH 0)                   ; X
7     (LIST 3)
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $SQRT (X) ...)-148|
(CONST 0) = $SQRT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SQRT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SQRT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SQRT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SQRT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SQRT
8     (SKIP&RET 1)


Disassembly of function $SQRT
(CONST 0) = X
(CONST 1) = (%SQRT)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; (%SQRT)
4     (GETVALUE&PUSH 0)                   ; X
6     (LIST 2)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN ADD2LNC (ITEM LLIST &AUX) ...)-149|
(CONST 0) = ADD2LNC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADD2LNC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADD2LNC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADD2LNC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADD2LNC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADD2LNC
8     (SKIP&RET 1)


Disassembly of function ADD2LNC
(CONST 0) = $LISTP
(CONST 1) = MEMALIKE
(CONST 2) = ZL-ASSOC
(CONST 3) = 1
(CONST 4) = ZL-DELETE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
30 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALL1&JMPIF 0 L34)                 ; $LISTP
5     (LOAD 2)
6     L6
6     (PUSH)
7     (CALL2 1)                           ; MEMALIKE
9     (NOT)
10    (JMPIFNOT1 L38)
12    (LOAD 2)
13    (JMPIFATOM L25)
15    (LOAD&CAR&PUSH 2)
17    (LOAD&PUSH 2)
18    (CALL2&PUSH 2)                      ; ZL-ASSOC
20    (LOAD&PUSH 2)
21    (CONST&PUSH 3)                      ; 1
22    (CALL 3 4)                          ; ZL-DELETE
25    L25
25    (LOAD&PUSH 1)
26    (LOAD&PUSH 3)
27    (NIL)
28    (CONS&PUSH)
29    (CALLSR 2 35)                       ; NCONC
32    (SKIP&RET 3)
34    L34
34    (LOAD 2)
35    (CDR)
36    (JMP L6)
38    L38
38    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN BIGFLOATM* (BF) ...)-150|
(CONST 0) = BIGFLOATM*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIGFLOATM*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOATM*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIGFLOATM*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIGFLOATM*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BIGFLOATM*
8     (SKIP&RET 1)


Disassembly of function BIGFLOATM*
(CONST 0) = SIMP
(CONST 1) = MEMQ
(CONST 2) = $FLOAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($FLOAT)
29 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP
1     (LOAD 2)
2     (CAR)
3     (CDR&PUSH)
4     (CALL2&JMPIFNOT 1 L14)              ; MEMQ
7     (GETVALUE 2)                        ; $FLOAT
9     (JMPIF L31)
11    L11
11    (LOAD 1)
12    (SKIP&RET 2)
14    L14
14    (LOAD 1)
15    (CAR)
16    (CAR&PUSH)
17    (CONST&PUSH 0)                      ; SIMP
18    (LOAD 3)
19    (CAR)
20    (CDR)
21    (LIST*&PUSH 2)
23    (LOAD 2)
24    (CDR)
25    (CONS)
26    (STORE 1)
27    (GETVALUE 2)                        ; $FLOAT
29    (JMPIFNOT L11)
31    L31
31    (LOAD&PUSH 1)
32    (CALL1 2)                           ; $FLOAT
34    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ALLBUT N ...)-151|
(CONST 0) = $ALLBUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ALLBUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ALLBUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ALLBUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ALLBUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ALLBUT
8     (SKIP&RET 1)


Disassembly of function $ALLBUT
(CONST 0) = ($ALLBUT)
(CONST 1) = LISTIFY1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; ($ALLBUT)
4     (LOAD&PUSH 1)
5     (LOAD&PUSH 4)
6     (CALL2 1)                           ; LISTIFY1
8     (CONS)
9     (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN MFILEP (X) ...)-152|
(CONST 0) = MFILEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFILEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFILEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFILEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFILEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFILEP
8     (SKIP&RET 1)


Disassembly of function MFILEP
(CONST 0) = X
(CONST 1) = MFILE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 4)                          ; CONSP
7     (JMPIFNOT1 L22)
9     (GETVALUE 0)                        ; X
11    (CAR&PUSH)
12    (CALLS2 4)                          ; CONSP
14    (JMPIFNOT1 L22)
16    (GETVALUE 0)                        ; X
18    (CAR)
19    (CAR&PUSH)
20    (CONST 1)                           ; MFILE
21    (EQ)
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)


Disassembly of function #:|(DEFQUOTE DSKSETQ (&REST L) ...)-153-2|
(CONST 0) = DSKSETQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DSKSETQ>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DSKSETQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DSKSETQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DSKSETQ>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function DSKSETQ
(CONST 0) = |DSKSETQ-aux|
(CONST 1) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; |DSKSETQ-aux|
3     (CONST&PUSH 1)                      ; QUOTE
4     (LOAD&PUSH 2)
5     (LIST&PUSH 2)
7     (LIST 2)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFQUOTE DSKSETQ (&REST L) ...)-153-3|
(CONST 0) = |DSKSETQ-aux|
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE |DSKSETQ-aux|>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; |DSKSETQ-aux|
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; |DSKSETQ-aux|
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE |DSKSETQ-aux|>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; |DSKSETQ-aux|
8     (SKIP&RET 1)


Disassembly of function |DSKSETQ-aux|
(CONST 0) = DSKSETP
(CONST 1) = MSET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (T)
1     (BIND 0)                            ; DSKSETP
3     (LOAD&CAR&PUSH 4)
5     (LOAD 5)
6     (CDR)
7     (CAR&PUSH)
8     (CALLS1&PUSH 91)                    ; EVAL
10    (CALL2 1)                           ; MSET
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN DSKRAT (X) ...)-154|
(CONST 0) = DSKRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DSKRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DSKRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DSKRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DSKRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DSKRAT
8     (SKIP&RET 1)


Disassembly of function DSKRAT
(CONST 0) = X
(CONST 1) = ORDERPOINTER
(CONST 2) = GENVAR
(CONST 3) = DSKRAT-SUBST
(CONST 4) = TRUNC
(CONST 5) = MEMQ
(CONST 6) = SRCONVERT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR X)
67 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR)
6     (CDR)
7     (CDR)
8     (CAR&PUSH)
9     (CALL1 1)                           ; ORDERPOINTER
11    (GETVALUE&PUSH 2)                   ; GENVAR
13    (LOAD&PUSH 0)
14    (GETVALUE 0)                        ; X
16    (CAR)
17    (CDR)
18    (CDR)
19    (CDR)
20    (CAR&PUSH)
21    (JMP L61)
23    L23
23    (SKIP 2)
25    (JMP L73)
27    L27
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL1 6)                           ; SRCONVERT
31    (JMP L95)
33    L33
33    (LOAD&CAR&PUSH 1)
35    (LOAD&PUSH 1)
36    (LOAD&PUSH 1)
37    (GETVALUE 0)                        ; X
39    (CAR)
40    (CDR)
41    (CDR)
42    (CDR)
43    (CDR&PUSH)
44    (CALL 3 3)                          ; DSKRAT-SUBST
47    (LOAD&PUSH 1)
48    (LOAD&PUSH 1)
49    (GETVALUE 0)                        ; X
51    (CDR&PUSH)
52    (CALL 3 3)                          ; DSKRAT-SUBST
55    (SKIP 2)
57    (LOAD&CDR&STORE 1)
59    (LOAD&CDR&STORE 0)
61    L61
61    (LOAD&PUSH 1)
62    (CALLS1&JMPIF 146 L23)              ; ENDP
65    (LOAD&CAR&PUSH 1)
67    (LOAD&PUSH 1)
68    (CALLS1&JMPIFNOT 146 L33)           ; ENDP
71    (SKIP 3)
73    L73
73    (SKIP 1)
75    (GETVALUE 0)                        ; X
77    (CAR)
78    (CDR)
79    (CDR)
80    (CDR&PUSH)
81    (GETVALUE&PUSH 2)                   ; GENVAR
83    (CALLS1 168)                        ; RPLACA
85    (CONST&PUSH 4)                      ; TRUNC
86    (GETVALUE 0)                        ; X
88    (CAR&PUSH)
89    (CALL2&JMPIF 5 L27)                 ; MEMQ
93    (GETVALUE 0)                        ; X
95    L95
95    (UNBIND1)
96    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DSKRAT-SUBST (X Y Z) ...)-155|
(CONST 0) = DSKRAT-SUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DSKRAT-SUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DSKRAT-SUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DSKRAT-SUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DSKRAT-SUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DSKRAT-SUBST
8     (SKIP&RET 1)


Disassembly of function DSKRAT-SUBST
(CONST 0) = X
(CONST 1) = Y
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
32 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (JMPIFATOM L36)
9     (GETVALUE&PUSH 1)                   ; Y
11    (LOAD 8)
12    (CAR)
13    (JMPIFEQ L39)
15    (GETVALUE&PUSH 0)                   ; X
17    (GETVALUE&PUSH 1)                   ; Y
19    (LOAD&CAR&PUSH 9)
21    (JSR L0)
23    L23
23    (GETVALUE&PUSH 0)                   ; X
25    (GETVALUE&PUSH 1)                   ; Y
27    (LOAD&CDR&PUSH 9)
29    (JSR L0)
31    (LOAD 7)
32    L32
32    (UNBIND 2)
34    (SKIP&RET 4)
36    L36
36    (LOAD 7)
37    (JMP L32)
39    L39
39    (LOAD&PUSH 7)
40    (GETVALUE&PUSH 0)                   ; X
42    (CALLS1 168)                        ; RPLACA
44    (JMP L23)


Disassembly of function #:|(DEFMFUN \|''MAKE-FUN\| (NOUN-NAME X) ...)-156|
(CONST 0) = |''MAKE-FUN|
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE |''MAKE-FUN|>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; |''MAKE-FUN|
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; |''MAKE-FUN|
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE |''MAKE-FUN|>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; |''MAKE-FUN|
8     (SKIP&RET 1)


Disassembly of function |''MAKE-FUN|
(CONST 0) = X
(CONST 1) = $NUMER
(CONST 2) = $FLOAT
(CONST 3) = RESIMPLIFY
(CONST 4) = SIMPLIFYA
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T)
4     (BIND 1)                            ; $NUMER
6     (T)
7     (BIND 2)                            ; $FLOAT
9     (LOAD&PUSH 11)
10    (NIL)
11    (CONS&PUSH)
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1&PUSH 3)                      ; RESIMPLIFY
16    (LIST&PUSH 2)
18    (T&PUSH)
19    (CALL2 4)                           ; SIMPLIFYA
21    (UNBIND 3)
23    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO \|''MAKE\| (FUN NOUN) ...)-157|
(CONST 0) = |''MAKE|
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE |''MAKE|>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; |''MAKE|
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; |''MAKE|
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE |''MAKE|>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; |''MAKE|
10    (SKIP&RET 1)


Disassembly of function |''MAKE|
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DEFMFUN
(CONST 3) = (X)
(CONST 4) = |''MAKE-FUN|
(CONST 5) = QUOTE
(CONST 6) = (X)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
26 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L30)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; DEFMFUN
16    (LOAD&PUSH 2)
17    (CONST&PUSH 3)                      ; (X)
18    (CONST&PUSH 4)                      ; |''MAKE-FUN|
19    (CONST&PUSH 5)                      ; QUOTE
20    (LOAD&PUSH 5)
21    (LIST&PUSH 2)
23    (CONST 6)                           ; (X)
24    (LIST*&PUSH 2)
26    (LIST 4)
28    (SKIP&RET 5)
30    L30
30    (LOAD&PUSH 2)
31    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
33    (SKIP&RET 3)


Disassembly of function #:|(\|''MAKE\| $LOG %LOG)-158|
(CONST 0) = $LOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LOG
8     (SKIP&RET 1)


Disassembly of function $LOG
(CONST 0) = X
(CONST 1) = %LOG
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %LOG
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $SIN %SIN)-159|
(CONST 0) = $SIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SIN
8     (SKIP&RET 1)


Disassembly of function $SIN
(CONST 0) = X
(CONST 1) = %SIN
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %SIN
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $COS %COS)-160|
(CONST 0) = $COS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $COS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $COS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $COS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $COS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $COS
8     (SKIP&RET 1)


Disassembly of function $COS
(CONST 0) = X
(CONST 1) = %COS
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %COS
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $TAN %TAN)-161|
(CONST 0) = $TAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TAN
8     (SKIP&RET 1)


Disassembly of function $TAN
(CONST 0) = X
(CONST 1) = %TAN
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %TAN
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $COT %COT)-162|
(CONST 0) = $COT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $COT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $COT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $COT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $COT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $COT
8     (SKIP&RET 1)


Disassembly of function $COT
(CONST 0) = X
(CONST 1) = %COT
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %COT
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $SEC %SEC)-163|
(CONST 0) = $SEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SEC
8     (SKIP&RET 1)


Disassembly of function $SEC
(CONST 0) = X
(CONST 1) = %SEC
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %SEC
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $CSC %CSC)-164|
(CONST 0) = $CSC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CSC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CSC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CSC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CSC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CSC
8     (SKIP&RET 1)


Disassembly of function $CSC
(CONST 0) = X
(CONST 1) = %CSC
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %CSC
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $SINH %SINH)-165|
(CONST 0) = $SINH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SINH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SINH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SINH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SINH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SINH
8     (SKIP&RET 1)


Disassembly of function $SINH
(CONST 0) = X
(CONST 1) = %SINH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %SINH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $COSH %COSH)-166|
(CONST 0) = $COSH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $COSH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $COSH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $COSH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $COSH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $COSH
8     (SKIP&RET 1)


Disassembly of function $COSH
(CONST 0) = X
(CONST 1) = %COSH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %COSH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $TANH %TANH)-167|
(CONST 0) = $TANH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TANH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TANH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TANH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TANH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TANH
8     (SKIP&RET 1)


Disassembly of function $TANH
(CONST 0) = X
(CONST 1) = %TANH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %TANH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $COTH %COTH)-168|
(CONST 0) = $COTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $COTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $COTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $COTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $COTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $COTH
8     (SKIP&RET 1)


Disassembly of function $COTH
(CONST 0) = X
(CONST 1) = %COTH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %COTH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $SECH %SECH)-169|
(CONST 0) = $SECH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SECH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SECH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SECH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SECH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SECH
8     (SKIP&RET 1)


Disassembly of function $SECH
(CONST 0) = X
(CONST 1) = %SECH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %SECH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $CSCH %CSCH)-170|
(CONST 0) = $CSCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CSCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CSCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CSCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CSCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CSCH
8     (SKIP&RET 1)


Disassembly of function $CSCH
(CONST 0) = X
(CONST 1) = %CSCH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %CSCH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ASIN %ASIN)-171|
(CONST 0) = $ASIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ASIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ASIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ASIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ASIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ASIN
8     (SKIP&RET 1)


Disassembly of function $ASIN
(CONST 0) = X
(CONST 1) = %ASIN
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ASIN
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ACOS %ACOS)-172|
(CONST 0) = $ACOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ACOS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ACOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ACOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ACOS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ACOS
8     (SKIP&RET 1)


Disassembly of function $ACOS
(CONST 0) = X
(CONST 1) = %ACOS
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ACOS
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ATAN %ATAN)-173|
(CONST 0) = $ATAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ATAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ATAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ATAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ATAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ATAN
8     (SKIP&RET 1)


Disassembly of function $ATAN
(CONST 0) = X
(CONST 1) = %ATAN
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ATAN
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ACOT %ACOT)-174|
(CONST 0) = $ACOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ACOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ACOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ACOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ACOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ACOT
8     (SKIP&RET 1)


Disassembly of function $ACOT
(CONST 0) = X
(CONST 1) = %ACOT
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ACOT
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ASEC %ASEC)-175|
(CONST 0) = $ASEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ASEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ASEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ASEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ASEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ASEC
8     (SKIP&RET 1)


Disassembly of function $ASEC
(CONST 0) = X
(CONST 1) = %ASEC
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ASEC
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ACSC %ACSC)-176|
(CONST 0) = $ACSC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ACSC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ACSC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ACSC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ACSC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ACSC
8     (SKIP&RET 1)


Disassembly of function $ACSC
(CONST 0) = X
(CONST 1) = %ACSC
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ACSC
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ASINH %ASINH)-177|
(CONST 0) = $ASINH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ASINH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ASINH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ASINH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ASINH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ASINH
8     (SKIP&RET 1)


Disassembly of function $ASINH
(CONST 0) = X
(CONST 1) = %ASINH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ASINH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ACOSH %ACOSH)-178|
(CONST 0) = $ACOSH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ACOSH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ACOSH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ACOSH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ACOSH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ACOSH
8     (SKIP&RET 1)


Disassembly of function $ACOSH
(CONST 0) = X
(CONST 1) = %ACOSH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ACOSH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ATANH %ATANH)-179|
(CONST 0) = $ATANH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ATANH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ATANH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ATANH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ATANH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ATANH
8     (SKIP&RET 1)


Disassembly of function $ATANH
(CONST 0) = X
(CONST 1) = %ATANH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ATANH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ACOTH %ACOTH)-180|
(CONST 0) = $ACOTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ACOTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ACOTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ACOTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ACOTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ACOTH
8     (SKIP&RET 1)


Disassembly of function $ACOTH
(CONST 0) = X
(CONST 1) = %ACOTH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ACOTH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ASECH %ASECH)-181|
(CONST 0) = $ASECH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ASECH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ASECH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ASECH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ASECH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ASECH
8     (SKIP&RET 1)


Disassembly of function $ASECH
(CONST 0) = X
(CONST 1) = %ASECH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ASECH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $ACSCH %ACSCH)-182|
(CONST 0) = $ACSCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ACSCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ACSCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ACSCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ACSCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ACSCH
8     (SKIP&RET 1)


Disassembly of function $ACSCH
(CONST 0) = X
(CONST 1) = %ACSCH
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %ACSCH
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(\|''MAKE\| $GAMMA %GAMMA)-183|
(CONST 0) = $GAMMA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GAMMA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GAMMA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GAMMA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GAMMA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GAMMA
8     (SKIP&RET 1)


Disassembly of function $GAMMA
(CONST 0) = X
(CONST 1) = %GAMMA
(CONST 2) = |''MAKE-FUN|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; %GAMMA
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; |''MAKE-FUN|
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $BINOMIAL (X Y) ...)-184|
(CONST 0) = $BINOMIAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BINOMIAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BINOMIAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BINOMIAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BINOMIAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BINOMIAL
8     (SKIP&RET 1)


Disassembly of function $BINOMIAL
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $NUMER
(CONST 3) = $FLOAT
(CONST 4) = (%BINOMIAL)
(CONST 5) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
15 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (T)
7     (BIND 2)                            ; $NUMER
9     (T)
10    (BIND 3)                            ; $FLOAT
12    (CONST&PUSH 4)                      ; (%BINOMIAL)
13    (GETVALUE&PUSH 0)                   ; X
15    (GETVALUE&PUSH 1)                   ; Y
17    (LIST&PUSH 3)
19    (CALL1 5)                           ; SIMPLIFY
21    (UNBIND 4)
23    (SKIP&RET 3)


Disassembly of function #:|(PROG1 '(EVFUN PROPERTIES) (MAPC #'# '#))-185|
(CONST 0) = 
($RADCAN $FACTOR $RATSIMP $TRIGEXPAND $TRIGREDUCE $LOGCONTRACT $ROOTSCONTRACT
 $BFLOAT $RATEXPAND $FULLRATSIMP $RECTFORM $POLARFORM)
(CONST 1) = X
(CONST 2) = EVFUN
(CONST 3) = PUTPROP
(CONST 4) = (EVFUN PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($RADCAN $FACTOR $RATSIMP ...)
1     (JMP L20)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE&PUSH 1)                   ; X
10    (T&PUSH)
11    (CONST&PUSH 2)                      ; EVFUN
12    (CALL 3 3)                          ; PUTPROP
15    (UNBIND1)
16    (SKIP 1)
18    (LOAD&CDR&STORE 0)
20    L20
20    (LOAD&PUSH 0)
21    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
24    (SKIP 1)
26    (CONST 4)                           ; (EVFUN PROPERTIES)
27    (SKIP&RET 1)


Disassembly of function #:|(PROG1 '(EVFLAG PROPERTIES) (MAPC #'# '#))-186|
(CONST 0) = 
($EXPONENTIALIZE $%EMODE $DEMOIVRE $LOGEXPAND $LOGARC $LOGNUMER $RADEXPAND
 $KEEPFLOAT $LISTARITH $FLOAT $RATSIMPEXPONS $RATMX $SIMP $SIMPSUM $ALGEBRAIC
 $RATALGDENOM $FACTORFLAG $RATFAC $INFEVAL $%ENUMER $PROGRAMMODE $LOGNEGINT
 $LOGABS $LETRAT $HALFANGLES $EXPTISOLATE $ISOLATE_WRT_TIMES $SUMEXPAND
 $CAUCHYSUM $NUMER_PBRANCH $M1PBRANCH $DOTSCRULES $TRIGEXPAND)
(CONST 1) = X
(CONST 2) = EVFLAG
(CONST 3) = PUTPROP
(CONST 4) = (EVFLAG PROPERTIES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($EXPONENTIALIZE $%EMODE ...)
1     (JMP L20)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD 0)
6     (BIND 1)                            ; X
8     (GETVALUE&PUSH 1)                   ; X
10    (T&PUSH)
11    (CONST&PUSH 2)                      ; EVFLAG
12    (CALL 3 3)                          ; PUTPROP
15    (UNBIND1)
16    (SKIP 1)
18    (LOAD&CDR&STORE 0)
20    L20
20    (LOAD&PUSH 0)
21    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
24    (SKIP 1)
26    (CONST 4)                           ; (EVFLAG PROPERTIES)
27    (SKIP&RET 1)


Disassembly of function #:|(MDEFPROP $%E 2.718281828459045 ...)-187|
(CONST 0) = $%E
(CONST 1) = 2.718281828459045
(CONST 2) = $NUMER
(CONST 3) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%E
1     (CONST&PUSH 1)                      ; 2.718281828459045
2     (CONST&PUSH 2)                      ; $NUMER
3     (CALL 3 3)                          ; MPUTPROP
6     (SKIP&RET 1)


Disassembly of function #:|(MDEFPROP $%PI 3.141592653589793 ...)-188|
(CONST 0) = $%PI
(CONST 1) = 3.141592653589793
(CONST 2) = $NUMER
(CONST 3) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%PI
1     (CONST&PUSH 1)                      ; 3.141592653589793
2     (CONST&PUSH 2)                      ; $NUMER
3     (CALL 3 3)                          ; MPUTPROP
6     (SKIP&RET 1)


Disassembly of function #:|(MDEFPROP $%PHI 1.618033988749895 ...)-189|
(CONST 0) = $%PHI
(CONST 1) = 1.618033988749895
(CONST 2) = $NUMER
(CONST 3) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%PHI
1     (CONST&PUSH 1)                      ; 1.618033988749895
2     (CONST&PUSH 2)                      ; $NUMER
3     (CALL 3 3)                          ; MPUTPROP
6     (SKIP&RET 1)


Disassembly of function #:|(MDEFPROP $%GAMMA 0.5772156649015329 ...)-190|
(CONST 0) = $%GAMMA
(CONST 1) = 0.5772156649015329
(CONST 2) = $NUMER
(CONST 3) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%GAMMA
1     (CONST&PUSH 1)                      ; 0.5772156649015329
2     (CONST&PUSH 2)                      ; $NUMER
3     (CALL 3 3)                          ; MPUTPROP
6     (SKIP&RET 1)


Disassembly of function #:|(MDEFPROP $HERALD_PACKAGE (NIL $TRANSLOAD T) ...)-191|
(CONST 0) = $HERALD_PACKAGE
(CONST 1) = (NIL $TRANSLOAD T)
(CONST 2) = $PROPS
(CONST 3) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HERALD_PACKAGE
1     (CONST&PUSH 1)                      ; (NIL $TRANSLOAD T)
2     (CONST&PUSH 2)                      ; $PROPS
3     (CALL 3 3)                          ; MPUTPROP
6     (SKIP&RET 1)


Disassembly of function #:|(MDEFPROP $LOAD_PACKAGE (NIL $TRANSLOAD T) ...)-192|
(CONST 0) = $LOAD_PACKAGE
(CONST 1) = (NIL $TRANSLOAD T)
(CONST 2) = $PROPS
(CONST 3) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LOAD_PACKAGE
1     (CONST&PUSH 1)                      ; (NIL $TRANSLOAD T)
2     (CONST&PUSH 2)                      ; $PROPS
3     (CALL 3 3)                          ; MPUTPROP
6     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP BIGFLOAT BIGFLOATM* ...)-193|
(CONST 0) = BIGFLOAT
(CONST 1) = MFEXPR*
(CONST 2) = BIGFLOATM*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOAT
1     (CONST&PUSH 1)                      ; MFEXPR*
2     (CONST&PUSH 2)                      ; BIGFLOATM*
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP LAMBDA CONSTLAM ...)-194|
(CONST 0) = LAMBDA
(CONST 1) = MFEXPR*
(CONST 2) = CONSTLAM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; LAMBDA
1     (CONST&PUSH 1)                      ; MFEXPR*
2     (CONST&PUSH 2)                      ; CONSTLAM
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP QUOTE CADR ...)-195|
(CONST 0) = QUOTE
(CONST 1) = MFEXPR*
(CONST 2) = CADR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; QUOTE
1     (CONST&PUSH 1)                      ; MFEXPR*
2     (CONST&PUSH 2)                      ; CADR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE) (SETQ *READ-BASE* OLD-READ-BASE))-196|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (NOTYPE N I ...))-197|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/mlisp.fas
Wrote file /cygdrive/e/temp/maxima/src/mlisp.lis