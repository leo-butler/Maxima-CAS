Listing of compilation of file /cygdrive/e/temp/maxima/src/pade.lisp
on 2002-12-17 13:35:55 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/pade.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE PADE)-2|
(CONST 0) = PADE
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; PADE
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL TLIST TPF))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC MHAYAT ...)-4|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO RED (P) ...)-5|
(CONST 0) = RED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RED>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; RED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RED>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; RED
10    (SKIP&RET 1)


Disassembly of function RED
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = P
(CONST 3) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (P)
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L21)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; P
13    (CONST&PUSH 3)                      ; CDR
14    (GETVALUE&PUSH 2)                   ; P
16    (LIST 2)
18    (UNBIND1)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 2)
22    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO P0? (P) ...)-6|
(CONST 0) = P0?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE P0?>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; P0?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; P0?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE P0?>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; P0?
10    (SKIP&RET 1)


Disassembly of function P0?
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = P
(CONST 3) = NULL
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (P)
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L21)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; P
13    (CONST&PUSH 3)                      ; NULL
14    (GETVALUE&PUSH 2)                   ; P
16    (LIST 2)
18    (UNBIND1)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 2)
22    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO E0? (EXPON) ...)-7|
(CONST 0) = E0?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE E0?>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; E0?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; E0?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE E0?>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; E0?
10    (SKIP&RET 1)


Disassembly of function E0?
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = ZEROP
(CONST 3) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; ZEROP
12    (CONST&PUSH 3)                      ; CAR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO EPOS? (EXPON) ...)-8|
(CONST 0) = EPOS?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EPOS?>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; EPOS?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EPOS?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EPOS?>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; EPOS?
10    (SKIP&RET 1)


Disassembly of function EPOS?
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = SIGNP
(CONST 3) = G
(CONST 4) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L21)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; SIGNP
12    (CONST&PUSH 3)                      ; G
13    (CONST&PUSH 4)                      ; CAR
14    (LOAD&PUSH 3)
15    (LIST&PUSH 2)
17    (LIST 3)
19    (SKIP&RET 4)
21    L21
21    (LOAD&PUSH 2)
22    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO ENEG? (EXPON) ...)-9|
(CONST 0) = ENEG?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ENEG?>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; ENEG?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ENEG?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ENEG?>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; ENEG?
10    (SKIP&RET 1)


Disassembly of function ENEG?
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = SIGNP
(CONST 3) = L
(CONST 4) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L21)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; SIGNP
12    (CONST&PUSH 3)                      ; L
13    (CONST&PUSH 4)                      ; CAR
14    (LOAD&PUSH 3)
15    (LIST&PUSH 2)
17    (LIST 3)
19    (SKIP&RET 4)
21    L21
21    (LOAD&PUSH 2)
22    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO NUM (R) ...)-10|
(CONST 0) = NUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUM>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUM>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; NUM
10    (SKIP&RET 1)


Disassembly of function NUM
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = R
(CONST 3) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (R)
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L21)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; R
13    (CONST&PUSH 3)                      ; CAR
14    (GETVALUE&PUSH 2)                   ; R
16    (LIST 2)
18    (UNBIND1)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 2)
22    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DENOM (R) ...)-11|
(CONST 0) = DENOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DENOM>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DENOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DENOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DENOM>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DENOM
10    (SKIP&RET 1)


Disassembly of function DENOM
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = R
(CONST 3) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (R)
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L21)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; R
13    (CONST&PUSH 3)                      ; CDR
14    (GETVALUE&PUSH 2)                   ; R
16    (LIST 2)
18    (UNBIND1)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 2)
22    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO ENEG (EXP) ...)-12|
(CONST 0) = ENEG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ENEG>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; ENEG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ENEG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ENEG>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; ENEG
10    (SKIP&RET 1)


Disassembly of function ENEG
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = EXP
(CONST 3) = CONS
(CONST 4) = MINUS
(CONST 5) = CAR
(CONST 6) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (EXP)
24 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L32)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; EXP
13    (CONST&PUSH 3)                      ; CONS
14    (CONST&PUSH 4)                      ; MINUS
15    (CONST&PUSH 5)                      ; CAR
16    (GETVALUE&PUSH 2)                   ; EXP
18    (LIST&PUSH 2)
20    (LIST&PUSH 2)
22    (CONST&PUSH 6)                      ; CDR
23    (GETVALUE&PUSH 2)                   ; EXP
25    (LIST&PUSH 2)
27    (LIST 3)
29    (UNBIND1)
30    (SKIP&RET 3)
32    L32
32    (LOAD&PUSH 2)
33    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
35    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO PADE-LEXP (POLY) ...)-13|
(CONST 0) = PADE-LEXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PADE-LEXP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; PADE-LEXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PADE-LEXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PADE-LEXP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; PADE-LEXP
10    (SKIP&RET 1)


Disassembly of function PADE-LEXP
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = COND
(CONST 3) = P0?
(CONST 4) = ((EZERO))
(CONST 5) = LE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L29)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; COND
12    (CONST&PUSH 3)                      ; P0?
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (CONST 4)                           ; ((EZERO))
17    (CONS&PUSH)
18    (T&PUSH)
19    (CONST&PUSH 5)                      ; LE
20    (LOAD&PUSH 4)
21    (LIST&PUSH 2)
23    (LIST&PUSH 2)
25    (LIST 3)
27    (SKIP&RET 4)
29    L29
29    (LOAD&PUSH 2)
30    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
32    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ESHIFT (POLY EXPON) ...)-14|
(CONST 0) = ESHIFT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ESHIFT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ESHIFT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ESHIFT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ESHIFT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ESHIFT
8     (SKIP&RET 1)


Disassembly of function ESHIFT
(CONST 0) = E+
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (JMP L20)
4     L4
4     (LOAD&CAR&PUSH 0)
6     (LOAD&CAR&PUSH 0)
8     (LOAD&PUSH 5)
9     (CALL2&PUSH 0)                      ; E+
11    (LOAD 1)
12    (CDR)
13    (CONS&PUSH)
14    (LOAD&CONS&STORE 2)
16    (SKIP 1)
18    (LOAD&CDR&STORE 0)
20    L20
20    (LOAD&PUSH 0)
21    (CALLS1&JMPIFNOT 146 L4)            ; ENDP
24    (SKIP 1)
26    (LOAD&PUSH 0)
27    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
29    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO PSMAKE (P) ...)-15|
(CONST 0) = PSMAKE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSMAKE>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSMAKE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSMAKE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSMAKE>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; PSMAKE
10    (SKIP&RET 1)


Disassembly of function PSMAKE
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = P
(CONST 3) = MAKE-PS
(CONST 4) = (GVAR-O TPF)
(CONST 5) = (POLY-DATA TPF)
(CONST 6) = REVERSE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (P)
21 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L26)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; P
13    (CONST&PUSH 3)                      ; MAKE-PS
14    (CONST&PUSH 4)                      ; (GVAR-O TPF)
15    (CONST&PUSH 5)                      ; (POLY-DATA TPF)
16    (CONST&PUSH 6)                      ; REVERSE
17    (GETVALUE&PUSH 2)                   ; P
19    (LIST&PUSH 2)
21    (LIST 4)
23    (UNBIND1)
24    (SKIP&RET 3)
26    L26
26    (LOAD&PUSH 2)
27    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
29    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $PADE (TAYLOR-FORM N-BOUND D-BOUND) ...)-16|
(CONST 0) = $PADE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PADE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PADE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PADE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PADE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PADE
8     (SKIP&RET 1)


Disassembly of function $PADE
(CONST 0) = $RATP
(CONST 1) = TRUNC
(CONST 2) = MEMQ
(CONST 3) = "First argument to Pade must be a taylor series"
(CONST 4) = MERROR
(CONST 5) = TLIST
(CONST 6) = VARLIST
(CONST 7) = GENVAR
(CONST 8) = (MLIST)
(CONST 9) = TAY-ORDER
(CONST 10) = PADE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (TLIST)
writes special variables : (GENVAR TLIST VARLIST)
52 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CALL1&JMPIFNOT 0 L10)              ; $RATP
4     (CONST&PUSH 1)                      ; TRUNC
5     (LOAD&CAR&PUSH 4)
7     (CALL2&JMPIF 2 L13)                 ; MEMQ
10    L10
10    (CONST&PUSH 3)                      ; "First argument to Pade must be a taylor series"
11    (CALL1 4)                           ; MERROR
13    L13
13    (PUSH-NIL 2)
15    (LOAD 5)
16    (CAR)
17    (CDR)
18    (CDR)
19    (BIND 5)                            ; TLIST
21    (LOAD 4)
22    (BIND 6)                            ; VARLIST
24    (LOAD 6)
25    (BIND 7)                            ; GENVAR
27    (GETVALUE 5)                        ; TLIST
29    (CAR)
30    (SETVALUE 6)                        ; VARLIST
32    (GETVALUE 5)                        ; TLIST
34    (CDR)
35    (SETVALUE 5)                        ; TLIST
37    (CAR)
38    (SETVALUE 7)                        ; GENVAR
40    (GETVALUE 5)                        ; TLIST
42    (CDR)
43    (CAR)
44    (SETVALUE 5)                        ; TLIST
46    (CONST&PUSH 8)                      ; (MLIST)
47    (LOAD&CDR&PUSH 15)
49    (LOAD&PUSH 15)
50    (CALL1 9)                           ; TAY-ORDER
52    (CAR&PUSH)
53    (LOAD&PUSH 15)
54    (CALL1 9)                           ; TAY-ORDER
56    (CAR)
57    (CONS&PUSH)
58    (LOAD&CAR&PUSH 17)
60    (CALLS1 149)                        ; FIFTH
62    (CAR)
63    (CDR)
64    (CAR&PUSH)
65    (PUSH-UNBOUND 1)
67    (CALLS1 156)                        ; LAST
69    (CAR&PUSH)
70    (CALL 3 10)                         ; PADE
73    (CONS)
74    (UNBIND 3)
76    (SKIP&RET 6)


Disassembly of function #:|(DEFUN PADE (TPF BOUNDS TRUNC) ...)-17|
(CONST 0) = PADE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PADE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PADE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PADE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PADE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PADE
8     (SKIP&RET 1)


Disassembly of function PADE
(CONST 0) = TPF
(CONST 1) = PSEXPON-GCD
(CONST 2) = EGCD
(CONST 3) = E+
(CONST 4) = ESHIFT
(CONST 5) = EDIFF
(CONST 6) = 0
(CONST 7) = (1 . 1)
(CONST 8) = (0 . 1)
(CONST 9) = PADE-MONIZE
(CONST 10) = E>
(CONST 11) = ANS
(CONST 12) = E=
(CONST 13) = PADE1
(CONST 14) = R
(CONST 15) = PS
(CONST 16) = SRDIS
(CONST 17) = DIV*
(CONST 18) = $RATSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R ANS TPF)
writes special variable : (ANS)
245 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; TPF
3     (GETVALUE 0)                        ; TPF
5     (CDR)
6     (CDR)
7     (CDR)
8     (CAR)
9     (CAR&PUSH)
10    (GETVALUE 0)                        ; TPF
12    (CDR)
13    (CDR)
14    (CDR&PUSH)
15    (LOAD&PUSH 6)
16    (LOAD&PUSH 7)
17    (LOAD&PUSH 2)
18    (CALL1&PUSH 1)                      ; PSEXPON-GCD
20    (CALL2&PUSH 2)                      ; EGCD
22    (CALL2 3)                           ; E+
24    (STORE 6)
25    (LOAD&CAR&PUSH 1)
27    (CALLS2&JMPIF 145 L67)              ; ZEROP
30    (LOAD&PUSH 0)
31    (LOAD&CAR&PUSH 2)
33    (CALLSR&PUSH 0 54)                  ; -
36    (LOAD 3)
37    (CDR)
38    (CONS&PUSH)
39    (CALL2 4)                           ; ESHIFT
41    (STORE 0)
42    (LOAD&PUSH 6)
43    (LOAD&PUSH 2)
44    (CALL2 5)                           ; EDIFF
46    (STORE 6)
47    (LOAD&CAR&PUSH 1)
49    (LOAD&PUSH 0)
50    (CALLS2&JMPIF 8 L214)               ; NUMBERP
54    (SKIP 1)
56    (JMPIF L224)
59    L59
59    (LOAD&PUSH 7)
60    (LOAD&CDR&PUSH 8)
62    (LOAD&PUSH 3)
63    (CALL2&PUSH 3)                      ; E+
65    (CALLS1 170)                        ; RPLACD
67    L67
67    (LOAD&PUSH 6)
68    (CONST 7)                           ; (1 . 1)
69    (CONS&PUSH)
70    (LIST&PUSH 1)
72    (NIL)
73    (CONS&PUSH)
74    (LOAD&PUSH 1)
75    (CALLS2&PUSH 72)                    ; REVERSE
77    (CONST&PUSH 8)                      ; (0 . 1)
78    (CONST 7)                           ; (1 . 1)
79    (CONS&PUSH)
80    (LIST&PUSH 1)
82    (CALL2&PUSH 9)                      ; PADE-MONIZE
84    (LOAD&PUSH 2)
85    (PUSH-UNBOUND 1)
87    (CALLS1 156)                        ; LAST
89    (CAR)
90    (CAR&PUSH)
91    (LOAD&CAR&PUSH 10)
93    (CALL2&JMPIF 10 L245)               ; E>
97    (LOAD 9)
98    (CDR)
99    (CAR&PUSH)
100   (LOAD&PUSH 0)
101   (CALLS2&JMPIF 8 L235)               ; NUMBERP
105   (SKIP 1)
107   (JMPIF L245)
110   L110
110   (LOAD&PUSH 0)
111   (LIST 1)
113   (BIND 11)                           ; ANS
115   L115
115   (LOAD 3)
116   (CAR)
117   (JMPIFNOT L251)
120   (LOAD 3)
121   (CAR)
122   (CAR)
123   (CAR)
124   L124
124   (CAR&PUSH)
125   (CALLS2&JMPIF 145 L282)             ; ZEROP
129   (LOAD 3)
130   (CDR)
131   (JMPIFNOT L255)
134   (LOAD 3)
135   (CDR)
136   (CAR)
137   (CAR)
138   L138
138   (PUSH)
139   (LOAD&CDR&PUSH 13)
141   (CALL2&JMPIF 10 L282)               ; E>
145   (LOAD 3)
146   (CDR)
147   (JMPIFNOT L259)
150   (LOAD 3)
151   (CDR)
152   (CAR)
153   (CAR)
154   L154
154   (PUSH)
155   (LOAD&CDR&PUSH 13)
157   (CALL2&JMPIF 12 L282)               ; E=
161   (LOAD&PUSH 4)
162   (LOAD&PUSH 4)
163   (CALL2 13)                          ; PADE1
165   (STORE 4)
166   (LOAD&PUSH 3)
167   (LOAD 5)
168   (STORE 4)
169   (POP&STORE 4)
171   (LOAD 3)
172   (CAR)
173   (CAR)
174   (CAR&PUSH)
175   (LOAD&CAR&PUSH 13)
177   (CALL2&JMPIF 10 L207)               ; E>
180   (LOAD 3)
181   (CDR)
182   (CAR)
183   (CAR&PUSH)
184   (LOAD&CDR&PUSH 13)
186   (CALL2&JMPIF 10 L207)               ; E>
189   (LOAD&CAR&PUSH 3)
191   (PUSH-UNBOUND 1)
193   (CALLS1 156)                        ; LAST
195   (CAR)
196   (CAR)
197   (CAR&PUSH)
198   (LOAD&PUSH 0)
199   (CALLS2&JMPIF 8 L263)               ; NUMBERP
202   (SKIP 1)
204   (JMPIFNOT L273)
207   L207
207   (GETVALUE 11)                       ; ANS
209   (SETVALUE 11)                       ; ANS
211   (JMP L115)
214   L214
214   (LOAD&PUSH 0)
215   (CONST&PUSH 6)                      ; 0
216   (CALLSR 1 48)                       ; >
219   (SKIP 1)
221   (JMPIFNOT L59)
224   L224
224   (LOAD&PUSH 7)
225   (LOAD&CAR&PUSH 8)
227   (LOAD&PUSH 3)
228   (CALL2&PUSH 5)                      ; EDIFF
230   (CALLS1 168)                        ; RPLACA
232   (JMP L67)
235   L235
235   (LOAD&PUSH 0)
236   (CONST&PUSH 6)                      ; 0
237   (CALLSR 1 47)                       ; <
240   (SKIP 1)
242   (JMPIFNOT L110)
245   L245
245   (NIL)
246   (BIND 11)                           ; ANS
248   (JMP L115)
251   L251
251   (CONST 8)                           ; (0 . 1)
252   (JMP L124)
255   L255
255   (CONST 8)                           ; (0 . 1)
256   (JMP L138)
259   L259
259   (CONST 8)                           ; (0 . 1)
260   (JMP L154)
263   L263
263   (LOAD&PUSH 0)
264   (CONST&PUSH 6)                      ; 0
265   (CALLSR 1 48)                       ; >
268   (SKIP 1)
270   (JMPIF L207)
273   L273
273   (LOAD&PUSH 3)
274   (GETVALUE 11)                       ; ANS
276   (CONS)
277   (SETVALUE 11)                       ; ANS
279   (JMP L115)
282   L282
282   (NIL&PUSH)
283   (GETVALUE&PUSH 11)                  ; ANS
285   (JMP L347)
287   L287
287   (LOAD&CAR&PUSH 0)
289   (LOAD 0)
290   (BIND 14)                           ; R
292   (CONST&PUSH 15)                     ; PS
293   (GETVALUE 0)                        ; TPF
295   (CDR)
296   (CAR&PUSH)
297   (GETVALUE 0)                        ; TPF
299   (CDR)
300   (CDR)
301   (CAR&PUSH)
302   (GETVALUE 14)                       ; R
304   (CAR&PUSH)
305   (LOAD&PUSH 16)
306   (CALL2&PUSH 4)                      ; ESHIFT
308   (CALLS2 72)                         ; REVERSE
310   (CONS)
311   (CONS)
312   (CONS&PUSH)
313   (CALL1&PUSH 16)                     ; SRDIS
315   (CONST&PUSH 15)                     ; PS
316   (GETVALUE 0)                        ; TPF
318   (CDR)
319   (CAR&PUSH)
320   (GETVALUE 0)                        ; TPF
322   (CDR)
323   (CDR)
324   (CAR&PUSH)
325   (GETVALUE 14)                       ; R
327   (CDR&PUSH)
328   (CALLS2 72)                         ; REVERSE
330   (CONS)
331   (CONS)
332   (CONS&PUSH)
333   (CALL1&PUSH 16)                     ; SRDIS
335   (CALL2&PUSH 17)                     ; DIV*
337   (CALL1 18)                          ; $RATSIMP
339   (UNBIND1)
340   (PUSH)
341   (LOAD&CONS&STORE 2)
343   (SKIP 1)
345   (LOAD&CDR&STORE 0)
347   L347
347   (LOAD&PUSH 0)
348   (CALLS1&JMPIFNOT 146 L287)          ; ENDP
351   (SKIP 1)
353   (LOAD&PUSH 0)
354   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
356   (SKIP 1)
358   (UNBIND1)
359   (SKIP 4)
361   (UNBIND1)
362   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PADE1 (R1 R2) ...)-18|
(CONST 0) = PADE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PADE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PADE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PADE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PADE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PADE1
8     (SKIP&RET 1)


Disassembly of function PADE1
(CONST 0) = E>
(CONST 1) = EDIFF
(CONST 2) = RATQUOTIENT
(CONST 3) = RATMINUS
(CONST 4) = TERM*
(CONST 5) = UPOLY+
(CONST 6) = PADE-MONIZE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
53 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD 2)
2     (CAR)
3     (CAR)
4     (CDR&PUSH)
5     (LOAD 3)
6     (CAR)
7     (CAR)
8     (CAR&PUSH)
9     (LOAD 4)
10    (CAR)
11    (CDR&PUSH)
12    (LOAD&CDR&PUSH 5)
14    (LOAD&CAR&PUSH 7)
16    (LOAD&CDR&PUSH 8)
18    (LOAD&JMPIFNOT 1 L64)
21    L21
21    (LOAD&PUSH 4)
22    (LOAD 2)
23    (CAR)
24    (CAR&PUSH)
25    (CALL2&JMPIF 0 L64)                 ; E>
28    (LOAD 1)
29    (CAR)
30    (CAR&PUSH)
31    (LOAD&PUSH 5)
32    (CALL2&PUSH 1)                      ; EDIFF
34    (LOAD 2)
35    (CAR)
36    (CDR&PUSH)
37    (LOAD&PUSH 7)
38    (CALL2&PUSH 2)                      ; RATQUOTIENT
40    (CALL1 3)                           ; RATMINUS
42    (CONS)
43    (STORE 6)
44    (LOAD&CDR&PUSH 1)
46    (LOAD&PUSH 7)
47    (LOAD&PUSH 5)
48    (CALL2&PUSH 4)                      ; TERM*
50    (CALL2 5)                           ; UPOLY+
52    (STORE 1)
53    (LOAD&PUSH 0)
54    (LOAD&PUSH 7)
55    (LOAD&PUSH 4)
56    (CALL2&PUSH 4)                      ; TERM*
58    (CALL2 5)                           ; UPOLY+
60    (STORE 0)
61    (LOAD&JMPIF 1 L21)
64    L64
64    (LOAD&PUSH 1)
65    (LOAD&PUSH 1)
66    (CALL2 6)                           ; PADE-MONIZE
68    (SKIP&RET 10)


Disassembly of function #:|(DEFUN TERM* (TERM P) ...)-19|
(CONST 0) = TERM*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TERM*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TERM*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TERM*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TERM*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TERM*
8     (SKIP&RET 1)


Disassembly of function TERM*
(CONST 0) = P
(CONST 1) = COEF
(CONST 2) = RATTIMES
(CONST 3) = E+
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (COEF P)
51 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (LOAD&CDR&PUSH 6)
6     (LOAD&CAR&PUSH 7)
8     (NIL&PUSH)
9     (LOAD 2)
10    (BIND 1)                            ; COEF
12    (GETVALUE&PUSH 0)                   ; P
14    (LOAD&PUSH 0)
15    (JMP L61)
17    L17
17    (LOAD&PUSH 0)
18    (CALLS2 145)                        ; ZEROP
20    (SKIP 1)
22    (JMPIF L57)
24    L24
24    (LOAD&PUSH 7)
25    (LOAD&CAR&PUSH 1)
27    (CALL2&PUSH 3)                      ; E+
29    (LOAD 7)
30    (CONS&PUSH)
31    (LOAD&CONS&STORE 9)
33    (SKIP 1)
35    (JMP L59)
37    L37
37    (LOAD&CAR&PUSH 0)
39    (GETVALUE&PUSH 1)                   ; COEF
41    (LOAD&CDR&PUSH 1)
43    (T&PUSH)
44    (CALL 3 2)                          ; RATTIMES
47    (STORE 6)
48    (CAR&PUSH)
49    (LOAD&PUSH 0)
50    (CALLS2&JMPIF 8 L17)                ; NUMBERP
53    (SKIP 1)
55    (JMPIFNOT L24)
57    L57
57    (SKIP 1)
59    L59
59    (LOAD&CDR&STORE 0)
61    L61
61    (LOAD&PUSH 0)
62    (CALLS1&JMPIFNOT 146 L37)           ; ENDP
65    (SKIP 2)
67    (LOAD&PUSH 6)
68    (CALLS2 73)                         ; NREVERSE
70    (UNBIND1)
71    (SKIP 4)
73    (UNBIND1)
74    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PADE-MONIZE (NUM DEN) ...)-20|
(CONST 0) = PADE-MONIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PADE-MONIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PADE-MONIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PADE-MONIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PADE-MONIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PADE-MONIZE
8     (SKIP&RET 1)


Disassembly of function PADE-MONIZE
(CONST 0) = NUM
(CONST 1) = (0 . 1)
(CONST 2) = RATINVERT
(CONST 3) = MULT
(CONST 4) = TERM*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MULT NUM)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; NUM
3     (CONST&PUSH 1)                      ; (0 . 1)
4     (GETVALUE 0)                        ; NUM
6     (CAR)
7     (CDR&PUSH)
8     (CALL1 2)                           ; RATINVERT
10    (CONS)
11    (BIND 3)                            ; MULT
13    (GETVALUE&PUSH 3)                   ; MULT
15    (GETVALUE&PUSH 0)                   ; NUM
17    (CALL2&PUSH 4)                      ; TERM*
19    (GETVALUE&PUSH 3)                   ; MULT
21    (LOAD&PUSH 9)
22    (CALL2 4)                           ; TERM*
24    (CONS)
25    (UNBIND 2)
27    (SKIP&RET 3)


Disassembly of function #:|(DEFUN UPOLY+ (P1 P2) ...)-21|
(CONST 0) = UPOLY+
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UPOLY+>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UPOLY+
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UPOLY+
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UPOLY+>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UPOLY+
8     (SKIP&RET 1)


Disassembly of function UPOLY+
(CONST 0) = P
(CONST 1) = C
(CONST 2) = E>
(CONST 3) = RATPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C P)
writes special variables : (C P)
78 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; C
6     (LOAD&JMPIFNOT 8 L52)
9     L9
9     (LOAD&JMPIF 7 L22)
12    (GETVALUE&PUSH 0)                   ; P
14    (LOAD 9)
15    L15
15    (PUSH)
16    (CALLS1 163)                        ; NRECONC
18    (UNBIND 2)
20    (SKIP&RET 3)
22    L22
22    (LOAD 7)
23    (CAR)
24    (CAR&PUSH)
25    (LOAD 9)
26    (CAR)
27    (CAR&PUSH)
28    (CALL2&JMPIF 2 L57)                 ; E>
31    (LOAD 8)
32    (CAR)
33    (CAR&PUSH)
34    (LOAD 8)
35    (CAR)
36    (CAR&PUSH)
37    (CALL2&JMPIFNOT 2 L72)              ; E>
40    (LOAD&CAR&PUSH 8)
42    (LOAD&CDR&STORE 9)
44    L44
44    (GETVALUE 0)                        ; P
46    (CONS)
47    (SETVALUE 0)                        ; P
49    (LOAD&JMPIF 8 L9)
52    L52
52    (GETVALUE&PUSH 0)                   ; P
54    (LOAD 8)
55    (JMP L15)
57    L57
57    (LOAD&CAR&PUSH 7)
59    (LOAD&CDR&STORE 8)
61    (JMP L44)
63    L63
63    (LOAD&PUSH 0)
64    (CALLS2 145)                        ; ZEROP
66    (SKIP 1)
68    (JMPIFNOT L91)
70    (JMP L102)
72    L72
72    (LOAD 8)
73    (CAR)
74    (CDR&PUSH)
75    (LOAD 8)
76    (CAR)
77    (CDR&PUSH)
78    (CALL2 3)                           ; RATPLUS
80    (SETVALUE 1)                        ; C
82    (CAR&PUSH)
83    (LOAD&PUSH 0)
84    (CALLS2&JMPIF 8 L63)                ; NUMBERP
87    (SKIP 1)
89    (JMPIF L102)
91    L91
91    (LOAD 8)
92    (CAR)
93    (CAR&PUSH)
94    (GETVALUE 1)                        ; C
96    (CONS&PUSH)
97    (GETVALUE 0)                        ; P
99    (CONS)
100   (SETVALUE 0)                        ; P
102   L102
102   (LOAD&CDR&STORE 8)
104   (LOAD&CDR&STORE 7)
106   (LOAD&JMPIFNOT 8 L52)
109   (JMP L9)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL TLIST TPF))-22|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/pade.fas
Wrote file /cygdrive/e/temp/maxima/src/pade.lis