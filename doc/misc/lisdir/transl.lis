Listing of compilation of file /cygdrive/e/temp/maxima/src/transl.lisp
on 2002-12-17 13:33:48 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/transl.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE TRANSL)-2|
(CONST 0) = TRANSL
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSL
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(TRANSL-MODULE TRANSL)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRANSBIND NIL ...)-4-1|
(CONST 0) = $TRANSBIND
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRANSBIND
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TRANSBIND
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRANSBIND NIL ...)-4-2|
(CONST 0) = (SPECIAL $TRANSBIND)
(CONST 1) = $TRANSBIND
(CONST 2) = VARIABLE
(CONST 3) = "This variable is now obsolete."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TRANSBIND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TRANSBIND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TRANSBIND
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TRANSBIND
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "This variable is now obsolete."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TRANSBIND
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN OBSOLETE-VARIABLE (VAR IGNORE-VAL) ...)-5|
(CONST 0) = OBSOLETE-VARIABLE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OBSOLETE-VARIABLE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OBSOLETE-VARIABLE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OBSOLETE-VARIABLE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OBSOLETE-VARIABLE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OBSOLETE-VARIABLE
8     (SKIP&RET 1)


Disassembly of function OBSOLETE-VARIABLE
(CONST 0) = VAR
(CONST 1) = $OBSOLETE
(CONST 2) = SET
(CONST 3) = "~%Warning, setting obsolete variable: ~:M~%"
(CONST 4) = MTELL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
16 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
7     (CONST 1)                           ; $OBSOLETE
8     (EQ)
9     (JMPIF1 L21)
11    (GETVALUE&PUSH 0)                   ; VAR
13    (CONST&PUSH 1)                      ; $OBSOLETE
14    (CALL2 2)                           ; SET
16    (CONST&PUSH 3)                      ; "~%Warning, setting obsolete variable: ~:M~%"
17    (GETVALUE&PUSH 0)                   ; VAR
19    (CALL2 4)                           ; MTELL
21    L21
21    (UNBIND1)
22    (SKIP&RET 3)


Disassembly of function #:|(PUTPROP '$TRANSBIND #'OBSOLETE-VARIABLE ...)-6|
(CONST 0) = $TRANSBIND
(CONST 1) = OBSOLETE-VARIABLE
(CONST 2) = ASSIGN
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRANSBIND
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; OBSOLETE-VARIABLE
3     (CONST&PUSH 2)                      ; ASSIGN
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *UNTRANSLATED-FUNCTIONS-CALLED* NIL)-7|
(CONST 0) = (SPECIAL *UNTRANSLATED-FUNCTIONS-CALLED*)
(CONST 1) = *UNTRANSLATED-FUNCTIONS-CALLED*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *UNTRANSLATED-FUNCTIONS-CALLED*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *UNTRANSLATED-FUNCTIONS-CALLED*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *UNTRANSLATED-FUNCTIONS-CALLED*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_SEMICOMPILE NIL ...)-8-1|
(CONST 0) = $TR_SEMICOMPILE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_SEMICOMPILE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_SEMICOMPILE
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_SEMICOMPILE NIL ...)-8-2|
(CONST 0) = (SPECIAL $TR_SEMICOMPILE)
(CONST 1) = $TR_SEMICOMPILE
(CONST 2) = VARIABLE
(CONST 3) = 
"If TRUE TRANSLATE_FILE and COMPFILE output forms which will~
	 be macroexpanded but not compiled into machine code by the~
	 lisp compiler."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_SEMICOMPILE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_SEMICOMPILE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_SEMICOMPILE
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_SEMICOMPILE
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If TRUE TRANSLATE_FILE and COMPFILE output forms which will~
	 be macroexpanded but not compiled into machine code by the~
	 lisp compiler."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_SEMICOMPILE
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRANSCOMPILE T ...)-9-1|
(CONST 0) = $TRANSCOMPILE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRANSCOMPILE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TRANSCOMPILE
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRANSCOMPILE T ...)-9-2|
(CONST 0) = (SPECIAL $TRANSCOMPILE)
(CONST 1) = $TRANSCOMPILE
(CONST 2) = VARIABLE
(CONST 3) = 
"If TRUE TRANSLATE_FILE outputs declarations for the COMPLR.
	  The only use of the switch is to save the space declarations take
	  up in interpreted code."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TRANSCOMPILE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TRANSCOMPILE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TRANSCOMPILE
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TRANSCOMPILE
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If TRUE TRANSLATE_FILE outputs declarations for the COMPLR.
	  The only use of the switch is to save the space declarations take
	  up in interpreted code."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TRANSCOMPILE
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SPECIAL NIL ...)-10-1|
(CONST 0) = $SPECIAL
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SPECIAL
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SPECIAL
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SPECIAL NIL ...)-10-2|
(CONST 0) = (SPECIAL $SPECIAL)
(CONST 1) = $SPECIAL
(CONST 2) = VARIABLE
(CONST 3) = "This is an obsolete variable -GJC"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SPECIAL)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SPECIAL
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SPECIAL
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $SPECIAL
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "This is an obsolete variable -GJC"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $SPECIAL
18    (SKIP&RET 1)


Disassembly of function #:|(PUTPROP '$SPECIAL #'OBSOLETE-VARIABLE ...)-11|
(CONST 0) = $SPECIAL
(CONST 1) = OBSOLETE-VARIABLE
(CONST 2) = ASSIGN
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SPECIAL
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; OBSOLETE-VARIABLE
3     (CONST&PUSH 2)                      ; ASSIGN
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TSTACK NIL ...)-12-1|
(CONST 0) = TSTACK
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTACK
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; TSTACK
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TSTACK NIL ...)-12-2|
(CONST 0) = (SPECIAL TSTACK)
(CONST 1) = TSTACK
(CONST 2) = VARIABLE
(CONST 3) = " stack of local variable modes "
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TSTACK)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TSTACK
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TSTACK
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; TSTACK
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; " stack of local variable modes "
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; TSTACK
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LOCAL NIL ...)-13-1|
(CONST 0) = LOCAL
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOCAL
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; LOCAL
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LOCAL NIL ...)-13-2|
(CONST 0) = (SPECIAL LOCAL)
(CONST 1) = LOCAL
(CONST 2) = VARIABLE
(CONST 3) = "T if a $LOCAL statement is in the body."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL LOCAL)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; LOCAL
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; LOCAL
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; LOCAL
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "T if a $LOCAL statement is in the body."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; LOCAL
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ARRAYS NIL ...)-14-1|
(CONST 0) = ARRAYS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRAYS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ARRAYS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ARRAYS NIL ...)-14-2|
(CONST 0) = (SPECIAL ARRAYS)
(CONST 1) = ARRAYS
(CONST 2) = VARIABLE
(CONST 3) = "arrays to declare to COMPLR"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ARRAYS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ARRAYS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ARRAYS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; ARRAYS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "arrays to declare to COMPLR"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; ARRAYS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LEXPRS NIL ...)-15-1|
(CONST 0) = LEXPRS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEXPRS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; LEXPRS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LEXPRS NIL ...)-15-2|
(CONST 0) = (SPECIAL LEXPRS)
(CONST 1) = LEXPRS
(CONST 2) = VARIABLE
(CONST 3) = "Lexprs to declare."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL LEXPRS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; LEXPRS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; LEXPRS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; LEXPRS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Lexprs to declare."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; LEXPRS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR EXPRS NIL ...)-16-1|
(CONST 0) = EXPRS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPRS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; EXPRS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR EXPRS NIL ...)-16-2|
(CONST 0) = (SPECIAL EXPRS)
(CONST 1) = EXPRS
(CONST 2) = VARIABLE
(CONST 3) = "what else?"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL EXPRS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; EXPRS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; EXPRS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; EXPRS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "what else?"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; EXPRS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR FEXPRS NIL ...)-17-1|
(CONST 0) = FEXPRS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; FEXPRS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; FEXPRS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR FEXPRS NIL ...)-17-2|
(CONST 0) = (SPECIAL FEXPRS)
(CONST 1) = FEXPRS
(CONST 2) = VARIABLE
(CONST 3) = "Fexprs to declare."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL FEXPRS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; FEXPRS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; FEXPRS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; FEXPRS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Fexprs to declare."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; FEXPRS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TR-PROGRET T)-18-1|
(CONST 0) = TR-PROGRET
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-PROGRET
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; TR-PROGRET
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TR-PROGRET T)-18-2|
(CONST 0) = (SPECIAL TR-PROGRET)
(CONST 1) = TR-PROGRET
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TR-PROGRET)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TR-PROGRET
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TR-PROGRET
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; TR-PROGRET
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR INSIDE-MPROG NIL)-19-1|
(CONST 0) = INSIDE-MPROG
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSIDE-MPROG
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; INSIDE-MPROG
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR INSIDE-MPROG NIL)-19-2|
(CONST 0) = (SPECIAL INSIDE-MPROG)
(CONST 1) = INSIDE-MPROG
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL INSIDE-MPROG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; INSIDE-MPROG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; INSIDE-MPROG
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; INSIDE-MPROG
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR RETURNS NIL ...)-20-1|
(CONST 0) = RETURNS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; RETURNS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; RETURNS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR RETURNS NIL ...)-20-2|
(CONST 0) = (SPECIAL RETURNS)
(CONST 1) = RETURNS
(CONST 2) = VARIABLE
(CONST 3) = "list of TRANSLATEd return forms in the block."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL RETURNS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; RETURNS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; RETURNS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; RETURNS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "list of TRANSLATEd return forms in the block."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; RETURNS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR RETURN-MODE NIL ...)-21-1|
(CONST 0) = RETURN-MODE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; RETURN-MODE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; RETURN-MODE
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR RETURN-MODE NIL ...)-21-2|
(CONST 0) = (SPECIAL RETURN-MODE)
(CONST 1) = RETURN-MODE
(CONST 2) = VARIABLE
(CONST 3) = "the highest(?) mode of all the returns."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL RETURN-MODE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; RETURN-MODE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; RETURN-MODE
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; RETURN-MODE
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "the highest(?) mode of all the returns."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; RETURN-MODE
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR NEED-PROG? NIL)-22-1|
(CONST 0) = NEED-PROG?
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEED-PROG?
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; NEED-PROG?
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR NEED-PROG? NIL)-22-2|
(CONST 0) = (SPECIAL NEED-PROG?)
(CONST 1) = NEED-PROG?
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL NEED-PROG?)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; NEED-PROG?
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; NEED-PROG?
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; NEED-PROG?
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ASSIGNS NIL ...)-23-1|
(CONST 0) = ASSIGNS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASSIGNS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ASSIGNS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ASSIGNS NIL ...)-23-2|
(CONST 0) = (SPECIAL ASSIGNS)
(CONST 1) = ASSIGNS
(CONST 2) = VARIABLE
(CONST 3) = 
"These are very-special variables which have a macsyma
	assign property which must be called to bind and unbind the variable
	whenever it is `lambda' bound."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ASSIGNS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ASSIGNS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ASSIGNS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; ASSIGNS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "These are very-special variables which have a macsyma
	assign property which must be called to bind and unbind the variable
	whenever it is `lambda' bound."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; ASSIGNS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SPECIALS NIL ...)-24-1|
(CONST 0) = SPECIALS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPECIALS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; SPECIALS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SPECIALS NIL ...)-24-2|
(CONST 0) = (SPECIAL SPECIALS)
(CONST 1) = SPECIALS
(CONST 2) = VARIABLE
(CONST 3) = "variables to declare special to the complr."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL SPECIALS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; SPECIALS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; SPECIALS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; SPECIALS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "variables to declare special to the complr."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; SPECIALS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TRANSLATE-TIME-EVALABLES '($MODEDECLARE $ALIAS $DECLARE ...))-25-1|
(CONST 0) = TRANSLATE-TIME-EVALABLES
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 
($MODEDECLARE $ALIAS $DECLARE $INFIX $NOFIX $DECLARE_TRANSLATED $MATCHFIX
 $PREFIX $POSTFIX $COMPFILE)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-TIME-EVALABLES
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; TRANSLATE-TIME-EVALABLES
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ($MODEDECLARE $ALIAS $DECLARE ...)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TRANSLATE-TIME-EVALABLES '($MODEDECLARE $ALIAS $DECLARE ...))-25-2|
(CONST 0) = (SPECIAL TRANSLATE-TIME-EVALABLES)
(CONST 1) = TRANSLATE-TIME-EVALABLES
(CONST 2) = 
($MODEDECLARE $ALIAS $DECLARE $INFIX $NOFIX $DECLARE_TRANSLATED $MATCHFIX
 $PREFIX $POSTFIX $COMPFILE)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TRANSLATE-TIME-EVALABLES)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TRANSLATE-TIME-EVALABLES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TRANSLATE-TIME-EVALABLES
8     (CONST&PUSH 2)                      ; ($MODEDECLARE $ALIAS $DECLARE ...)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; TRANSLATE-TIME-EVALABLES
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *TRANSL-BACKTRACE* NIL ...)-26-1|
(CONST 0) = *TRANSL-BACKTRACE*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *TRANSL-BACKTRACE*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *TRANSL-BACKTRACE*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *TRANSL-BACKTRACE* NIL ...)-26-2|
(CONST 0) = (SPECIAL *TRANSL-BACKTRACE*)
(CONST 1) = *TRANSL-BACKTRACE*
(CONST 2) = VARIABLE
(CONST 3) = " What do you think? "
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *TRANSL-BACKTRACE*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *TRANSL-BACKTRACE*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *TRANSL-BACKTRACE*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *TRANSL-BACKTRACE*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; " What do you think? "
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *TRANSL-BACKTRACE*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *TRANSL-DEBUG* NIL ...)-27-1|
(CONST 0) = *TRANSL-DEBUG*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *TRANSL-DEBUG*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *TRANSL-DEBUG*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *TRANSL-DEBUG* NIL ...)-27-2|
(CONST 0) = (SPECIAL *TRANSL-DEBUG*)
(CONST 1) = *TRANSL-DEBUG*
(CONST 2) = VARIABLE
(CONST 3) = "if T it pushes BACKTRACE and TRACE "
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *TRANSL-DEBUG*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *TRANSL-DEBUG*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *TRANSL-DEBUG*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *TRANSL-DEBUG*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "if T it pushes BACKTRACE and TRACE "
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *TRANSL-DEBUG*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TR-ABORT NIL ...)-28-1|
(CONST 0) = TR-ABORT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-ABORT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; TR-ABORT
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TR-ABORT NIL ...)-28-2|
(CONST 0) = (SPECIAL TR-ABORT)
(CONST 1) = TR-ABORT
(CONST 2) = VARIABLE
(CONST 3) = 
"set to T if abortion is requested by any of the
	sub-parts of the translation. A *THROW would be better, although it
	wouldn't cause the rest of the translation to continue, which may
	be useful in translation for MAXIMA-ERROR checking."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TR-ABORT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TR-ABORT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TR-ABORT
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; TR-ABORT
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "set to T if abortion is requested by any of the
	sub-parts of the translation. A *THROW would be better, although it
	wouldn't cause the rest of the translation to continue, which may
	be useful in translation for MAXIMA-ERROR checking."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; TR-ABORT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TR-UNIQUE (GENSYM) ...)-29-1|
(CONST 0) = TR-UNIQUE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
15 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-UNIQUE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L21)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (PUSH-UNBOUND 1)
12    (CALLS2&PUSH 143)                   ; GENSYM
14    (CONST&PUSH 0)                      ; TR-UNIQUE
15    (LOAD&PUSH 2)
16    (LOAD&PUSH 2)
17    (CALLS1 100)                        ; SYSTEM::PUTHASH
19    (SKIP 2)
21    L21
21    (VALUES0)
22    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TR-UNIQUE (GENSYM) ...)-29-2|
(CONST 0) = (SPECIAL TR-UNIQUE)
(CONST 1) = TR-UNIQUE
(CONST 2) = VARIABLE
(CONST 3) = 
"this is just a unque object used for random purposes,
	such as the second (file end) argument of READ."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TR-UNIQUE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TR-UNIQUE
4     (CALLS1&JMPIF 79 L14)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TR-UNIQUE
8     (PUSH-UNBOUND 1)
10    (CALLS2&PUSH 143)                   ; GENSYM
12    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
14    L14
14    (CONST&PUSH 1)                      ; TR-UNIQUE
15    (CONST&PUSH 2)                      ; VARIABLE
16    (CONST&PUSH 3)                      ; "this is just a unque object used for random purposes,
	such as the second (file end) argument of READ."
17    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
20    (CONST 1)                           ; TR-UNIQUE
21    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_UNDECLARED '$COMPILE ...)-30-1|
(CONST 0) = $TR_WARN_UNDECLARED
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $COMPILE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_WARN_UNDECLARED
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_WARN_UNDECLARED
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $COMPILE
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_UNDECLARED '$COMPILE ...)-30-2|
(CONST 0) = (SPECIAL $TR_WARN_UNDECLARED)
(CONST 1) = $TR_WARN_UNDECLARED
(CONST 2) = $COMPILE
(CONST 3) = VARIABLE
(CONST 4) = "When to send warnings about undeclared variables to the TTY"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_WARN_UNDECLARED)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_WARN_UNDECLARED
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_WARN_UNDECLARED
8     (CONST&PUSH 2)                      ; $COMPILE
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_WARN_UNDECLARED
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "When to send warnings about undeclared variables to the TTY"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_WARN_UNDECLARED
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_MEVAL '$COMPFILE ...)-31-1|
(CONST 0) = $TR_WARN_MEVAL
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $COMPFILE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_WARN_MEVAL
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_WARN_MEVAL
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $COMPFILE
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_MEVAL '$COMPFILE ...)-31-2|
(CONST 0) = (SPECIAL $TR_WARN_MEVAL)
(CONST 1) = $TR_WARN_MEVAL
(CONST 2) = $COMPFILE
(CONST 3) = VARIABLE
(CONST 4) = "If MEVAL is called that indicates problems in the translation"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_WARN_MEVAL)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_WARN_MEVAL
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_WARN_MEVAL
8     (CONST&PUSH 2)                      ; $COMPFILE
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_WARN_MEVAL
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "If MEVAL is called that indicates problems in the translation"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_WARN_MEVAL
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_FEXPR '$COMPFILE ...)-32-1|
(CONST 0) = $TR_WARN_FEXPR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $COMPFILE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_WARN_FEXPR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_WARN_FEXPR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $COMPFILE
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_FEXPR '$COMPFILE ...)-32-2|
(CONST 0) = (SPECIAL $TR_WARN_FEXPR)
(CONST 1) = $TR_WARN_FEXPR
(CONST 2) = $COMPFILE
(CONST 3) = VARIABLE
(CONST 4) = 
"FEXPRS should not normally be output in translated code, all legitimate
special program forms are translated."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_WARN_FEXPR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_WARN_FEXPR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_WARN_FEXPR
8     (CONST&PUSH 2)                      ; $COMPFILE
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_WARN_FEXPR
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "FEXPRS should not normally be output in translated code, all legitimate
special program forms are translated."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_WARN_FEXPR
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_MODE '$ALL ...)-33-1|
(CONST 0) = $TR_WARN_MODE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $ALL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_WARN_MODE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_WARN_MODE
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $ALL
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_MODE '$ALL ...)-33-2|
(CONST 0) = (SPECIAL $TR_WARN_MODE)
(CONST 1) = $TR_WARN_MODE
(CONST 2) = $ALL
(CONST 3) = VARIABLE
(CONST 4) = "Warn when variables are assigned values out of their mode."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_WARN_MODE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_WARN_MODE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_WARN_MODE
8     (CONST&PUSH 2)                      ; $ALL
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_WARN_MODE
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Warn when variables are assigned values out of their mode."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_WARN_MODE
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_UNDEFINED_VARIABLE '$ALL ...)-34-1|
(CONST 0) = $TR_WARN_UNDEFINED_VARIABLE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $ALL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_WARN_UNDEFINED_VARIABLE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_WARN_UNDEFINED_VARIABLE
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $ALL
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_WARN_UNDEFINED_VARIABLE '$ALL ...)-34-2|
(CONST 0) = (SPECIAL $TR_WARN_UNDEFINED_VARIABLE)
(CONST 1) = $TR_WARN_UNDEFINED_VARIABLE
(CONST 2) = $ALL
(CONST 3) = VARIABLE
(CONST 4) = "Warn when undefined global variables are seen."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_WARN_UNDEFINED_VARIABLE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_WARN_UNDEFINED_VARIABLE
8     (CONST&PUSH 2)                      ; $ALL
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_WARN_UNDEFINED_VARIABLE
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Warn when undefined global variables are seen."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_WARN_UNDEFINED_VARIABLE
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *WARNED-UN-DECLARED-VARS* NIL ...)-35-1|
(CONST 0) = *WARNED-UN-DECLARED-VARS*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *WARNED-UN-DECLARED-VARS*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *WARNED-UN-DECLARED-VARS*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *WARNED-UN-DECLARED-VARS* NIL ...)-35-2|
(CONST 0) = (SPECIAL *WARNED-UN-DECLARED-VARS*)
(CONST 1) = *WARNED-UN-DECLARED-VARS*
(CONST 2) = VARIABLE
(CONST 3) = "Warning State variable"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *WARNED-UN-DECLARED-VARS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *WARNED-UN-DECLARED-VARS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *WARNED-UN-DECLARED-VARS*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *WARNED-UN-DECLARED-VARS*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Warning State variable"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *WARNED-UN-DECLARED-VARS*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *WARNED-FEXPRS* NIL ...)-36-1|
(CONST 0) = *WARNED-FEXPRS*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *WARNED-FEXPRS*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *WARNED-FEXPRS*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *WARNED-FEXPRS* NIL ...)-36-2|
(CONST 0) = (SPECIAL *WARNED-FEXPRS*)
(CONST 1) = *WARNED-FEXPRS*
(CONST 2) = VARIABLE
(CONST 3) = "Warning State variable"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *WARNED-FEXPRS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *WARNED-FEXPRS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *WARNED-FEXPRS*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *WARNED-FEXPRS*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Warning State variable"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *WARNED-FEXPRS*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *WARNED-MODE-VARS* NIL ...)-37-1|
(CONST 0) = *WARNED-MODE-VARS*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *WARNED-MODE-VARS*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *WARNED-MODE-VARS*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *WARNED-MODE-VARS* NIL ...)-37-2|
(CONST 0) = (SPECIAL *WARNED-MODE-VARS*)
(CONST 1) = *WARNED-MODE-VARS*
(CONST 2) = VARIABLE
(CONST 3) = "Warning State variable"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *WARNED-MODE-VARS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *WARNED-MODE-VARS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *WARNED-MODE-VARS*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *WARNED-MODE-VARS*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Warning State variable"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *WARNED-MODE-VARS*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_FUNCTION_CALL_DEFAULT '$GENERAL ...)-38-1|
(CONST 0) = $TR_FUNCTION_CALL_DEFAULT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $GENERAL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_FUNCTION_CALL_DEFAULT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_FUNCTION_CALL_DEFAULT
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $GENERAL
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_FUNCTION_CALL_DEFAULT '$GENERAL ...)-38-2|
(CONST 0) = (SPECIAL $TR_FUNCTION_CALL_DEFAULT)
(CONST 1) = $TR_FUNCTION_CALL_DEFAULT
(CONST 2) = $GENERAL
(CONST 3) = VARIABLE
(CONST 4) = 
"
FALSE means punt to MEVAL, EXPR means assume lisp fixed arg function.
GENERAL, the default gives code good for mexprs and mlexprs but not macros.
GENERAL assures variable bindings are correct in compiled code.
In GENERAL mode, when translating F(X), if F is a bound variable, then
it assumes that APPLY(F,[X]) is meant, and translates a such, with 
apropriate warning. There is no need to turn this off.
APPLY means like APPLY."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_FUNCTION_CALL_DEFAULT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_FUNCTION_CALL_DEFAULT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_FUNCTION_CALL_DEFAULT
8     (CONST&PUSH 2)                      ; $GENERAL
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_FUNCTION_CALL_DEFAULT
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "
FALSE means punt to MEVAL, EXPR means assume lisp fixed arg function.
GENERAL, the default gives code good for mexprs and mlexprs but not macros.
GENERAL assures variable bindings are correct in compiled code.
In GENERAL mode, when translating F(X), if F is a bound variable, then
it assumes that APPLY(F,[X]) is meant, and translates a such, with 
apropriate warning. There is no need to turn this off.
APPLY means like APPLY."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_FUNCTION_CALL_DEFAULT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_ARRAY_AS_REF T ...)-39-1|
(CONST 0) = $TR_ARRAY_AS_REF
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_ARRAY_AS_REF
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_ARRAY_AS_REF
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_ARRAY_AS_REF T ...)-39-2|
(CONST 0) = (SPECIAL $TR_ARRAY_AS_REF)
(CONST 1) = $TR_ARRAY_AS_REF
(CONST 2) = VARIABLE
(CONST 3) = "If true runtime code uses value of the variable as the array."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_ARRAY_AS_REF)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_ARRAY_AS_REF
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_ARRAY_AS_REF
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_ARRAY_AS_REF
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If true runtime code uses value of the variable as the array."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_ARRAY_AS_REF
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_NUMER NIL ...)-40-1|
(CONST 0) = $TR_NUMER
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_NUMER
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_NUMER
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_NUMER NIL ...)-40-2|
(CONST 0) = (SPECIAL $TR_NUMER)
(CONST 1) = $TR_NUMER
(CONST 2) = VARIABLE
(CONST 3) = "If TRUE numer properties are used for atoms which have them, e.g. %PI"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_NUMER)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_NUMER
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_NUMER
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_NUMER
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If TRUE numer properties are used for atoms which have them, e.g. %PI"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_NUMER
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_PREDICATE_BRAIN_DAMAGE NIL ...)-41-1|
(CONST 0) = $TR_PREDICATE_BRAIN_DAMAGE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_PREDICATE_BRAIN_DAMAGE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_PREDICATE_BRAIN_DAMAGE
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_PREDICATE_BRAIN_DAMAGE NIL ...)-41-2|
(CONST 0) = (SPECIAL $TR_PREDICATE_BRAIN_DAMAGE)
(CONST 1) = $TR_PREDICATE_BRAIN_DAMAGE
(CONST 2) = VARIABLE
(CONST 3) = 
"If TRUE, output possible multiple evaluations in an attempt
  to interface to the COMPARE package."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_PREDICATE_BRAIN_DAMAGE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_PREDICATE_BRAIN_DAMAGE
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_PREDICATE_BRAIN_DAMAGE
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If TRUE, output possible multiple evaluations in an attempt
  to interface to the COMPARE package."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_PREDICATE_BRAIN_DAMAGE
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR BOOLEAN-OBJECT-TABLE '(# # # ...))-42|
(CONST 0) = (SPECIAL BOOLEAN-OBJECT-TABLE)
(CONST 1) = BOOLEAN-OBJECT-TABLE
(CONST 2) = (($TRUE $BOOLEAN . T) ($FALSE $BOOLEAN) (T $BOOLEAN . T) (NIL $BOOLEAN))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL BOOLEAN-OBJECT-TABLE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; BOOLEAN-OBJECT-TABLE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; BOOLEAN-OBJECT-TABLE
8     (CONST&PUSH 2)                      ; (# # # ...)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; BOOLEAN-OBJECT-TABLE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR MODE-INIT-VALUE-TABLE '(# # # ...))-43|
(CONST 0) = (SPECIAL MODE-INIT-VALUE-TABLE)
(CONST 1) = MODE-INIT-VALUE-TABLE
(CONST 2) = (($FLOAT . 0.0) ($FIXNUM . 0) ($NUMBER . 0) ($LIST QUOTE ((MLIST))) ($BOOLEAN))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MODE-INIT-VALUE-TABLE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MODE-INIT-VALUE-TABLE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MODE-INIT-VALUE-TABLE
8     (CONST&PUSH 2)                      ; (($FLOAT . 0.0) ($FIXNUM . 0) ...)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MODE-INIT-VALUE-TABLE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR TR-LAMBDA-PUNT-ASSIGNS NIL ...)-44|
(CONST 0) = (SPECIAL TR-LAMBDA-PUNT-ASSIGNS)
(CONST 1) = TR-LAMBDA-PUNT-ASSIGNS
(CONST 2) = VARIABLE
(CONST 3) = "Kludge argument to TR-LAMBDA due to lack of keyword argument passing"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TR-LAMBDA-PUNT-ASSIGNS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TR-LAMBDA-PUNT-ASSIGNS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TR-LAMBDA-PUNT-ASSIGNS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; TR-LAMBDA-PUNT-ASSIGNS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Kludge argument to TR-LAMBDA due to lack of keyword argument passing"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; TR-LAMBDA-PUNT-ASSIGNS
18    (SKIP&RET 1)


Disassembly of function #:|(OR (BOUNDP '*IN-COMPILE*) (SETQ *IN-COMPILE* NIL))-45|
(CONST 0) = *IN-COMPILE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*IN-COMPILE*)
9 byte-code instructions:
0     (NIL&PUSH)
1     (CONST&PUSH 0)                      ; *IN-COMPILE*
2     (CALLS1&STORE 79 0)                 ; BOUNDP
5     (JMPIFNOT L9)
7     (SKIP&RET 2)
9     L9
9     (NIL)
10    (SETVALUE 0)                        ; *IN-COMPILE*
12    (SKIP&RET 2)


Disassembly of function #:|(DEFTRFUN TR-TELL (&REST X &AUX ...) ...)-46|
(CONST 0) = TR-TELL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-TELL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-TELL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-TELL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-TELL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-TELL
8     (SKIP&RET 1)


Disassembly of function TR-TELL
(CONST 0) = X
(CONST 1) = FLATC
(CONST 2) = 10
(CONST 3) = *TRANSLATION-MSGS-FILES*
(CONST 4) = V
(CONST 5) = STRIPDOLLAR
(CONST 6) = MGRIND
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (V *TRANSLATION-MSGS-FILES* X)
writes special variables : (X V)
83 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T&PUSH)
4     (GETVALUE 0)                        ; X
6     (BIND 0)                            ; X
8     (GETVALUE 0)                        ; X
10    (JMPIFNOT L120)
13    L13
13    (GETVALUE 0)                        ; X
15    (CAR)
16    (JMPIFATOM L26)
18    (GETVALUE&PUSH 3)                   ; *TRANSLATION-MSGS-FILES*
20    (NIL)
21    (BIND 4)                            ; V
23    (JMP L103)
26    L26
26    (LOAD&JMPIF 3 L39)
29    (GETVALUE 0)                        ; X
31    (CAR&PUSH)
32    (CALL1&PUSH 1)                      ; FLATC
34    (CONST&PUSH 2)                      ; 10
35    (CALLSR&JMPIFNOT 1 48 L64)          ; >
39    L39
39    (GETVALUE&PUSH 3)                   ; *TRANSLATION-MSGS-FILES*
41    (NIL)
42    (BIND 4)                            ; V
44    (JMP L55)
46    L46
46    (LOAD 3)
47    (CAR)
48    (SETVALUE 4)                        ; V
50    (PUSH)
51    (CALLS1 139)                        ; TERPRI
53    (LOAD&CDR&STORE 3)
55    L55
55    (LOAD&PUSH 3)
56    (CALLS1&JMPIFNOT 146 L46)           ; ENDP
59    (UNBIND1)
60    (SKIP 1)
62    (NIL&STORE 3)
64    L64
64    (GETVALUE&PUSH 3)                   ; *TRANSLATION-MSGS-FILES*
66    (NIL)
67    (BIND 4)                            ; V
69    L69
69    (LOAD&PUSH 3)
70    (CALLS1&JMPIF 146 L107)             ; ENDP
73    (LOAD 3)
74    (CAR)
75    (SETVALUE 4)                        ; V
77    (GETVALUE 0)                        ; X
79    (CAR&PUSH)
80    (CALL1&PUSH 5)                      ; STRIPDOLLAR
82    (GETVALUE&PUSH 4)                   ; V
84    (CALLS1 132)                        ; PRINC
86    (LOAD&CDR&STORE 3)
88    (JMP L69)
90    L90
90    (LOAD 3)
91    (CAR)
92    (SETVALUE 4)                        ; V
94    (GETVALUE 0)                        ; X
96    (CAR&PUSH)
97    (GETVALUE&PUSH 4)                   ; V
99    (CALL2 6)                           ; MGRIND
101   (LOAD&CDR&STORE 3)
103   L103
103   (LOAD&PUSH 3)
104   (CALLS1&JMPIFNOT 146 L90)           ; ENDP
107   L107
107   (UNBIND1)
108   (SKIP 1)
110   (GETVALUE 0)                        ; X
112   (CDR)
113   (SETVALUE 0)                        ; X
115   (GETVALUE 0)                        ; X
117   (JMPIF L13)
120   L120
120   (NIL)
121   (UNBIND1)
122   (SKIP 1)
124   (UNBIND1)
125   (SKIP&RET 2)


Disassembly of function #:|(DEFTRFUN BARFO (&REST L) ...)-47|
(CONST 0) = BARFO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BARFO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BARFO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BARFO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BARFO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BARFO
8     (SKIP&RET 1)


Disassembly of function BARFO
(CONST 0) = L
(CONST 1) = TR-TELL
(CONST 2) = ("***BARFO*** gasp. Internal TRANSLATE error. i.e. *BUG*")
(CONST 3) = *TRANSL-DEBUG*
(CONST 4) = |Transl Barfo|
(CONST 5) = *BREAK
(CONST 6) = TR-ABORT
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (*TRANSL-DEBUG* L)
writes special variable : (TR-ABORT)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; TR-TELL
5     (GETVALUE&PUSH 0)                   ; L
7     (CONST&PUSH 2)                      ; #
8     (CALLSR 2 35)                       ; NCONC
11    (APPLY 0)
13    (GETVALUE 3)                        ; *TRANSL-DEBUG*
15    (JMPIF L24)
17    (T)
18    (SETVALUE 6)                        ; TR-ABORT
20    (NIL)
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)
24    L24
24    (T&PUSH)
25    (CONST&PUSH 4)                      ; |Transl Barfo|
26    (CALL2 5)                           ; *BREAK
28    (JMP L21)


Disassembly of function #:|(DEFUN SPECIALP (VAR) ...)-48|
(CONST 0) = SPECIALP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPECIALP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPECIALP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPECIALP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPECIALP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPECIALP
8     (SKIP&RET 1)


Disassembly of function SPECIALP
(CONST 0) = VAR
(CONST 1) = OPTIONP
(CONST 2) = SPECIAL
(CONST 3) = $TRANSCOMPILE
(CONST 4) = SPECIALS
(CONST 5) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRANSCOMPILE SPECIALS VAR)
writes special variable : (SPECIALS)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CALL1&JMPIF 1 L30)                 ; OPTIONP
8     (GETVALUE&PUSH 0)                   ; VAR
10    (CONST&PUSH 2)                      ; SPECIAL
11    (PUSH-UNBOUND 1)
13    (CALLS2&JMPIF 132 L30)              ; GET
16    (NIL)
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)
20    L20
20    (GETVALUE&PUSH 0)                   ; VAR
22    (GETVALUE 4)                        ; SPECIALS
24    (CONS)
25    (SETVALUE 4)                        ; SPECIALS
27    (T)
28    (JMP L17)
30    L30
30    (GETVALUE 3)                        ; $TRANSCOMPILE
32    (JMPIFNOT L41)
34    (GETVALUE&PUSH 0)                   ; VAR
36    (GETVALUE&PUSH 4)                   ; SPECIALS
38    (CALL2&JMPIFNOT 5 L20)              ; MEMQ
41    L41
41    (T)
42    (JMP L17)


Disassembly of function #:|(DEFMVAR *TR-WARN-BREAK* T ...)-49-1|
(CONST 0) = *TR-WARN-BREAK*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *TR-WARN-BREAK*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *TR-WARN-BREAK*
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *TR-WARN-BREAK* T ...)-49-2|
(CONST 0) = (SPECIAL *TR-WARN-BREAK*)
(CONST 1) = *TR-WARN-BREAK*
(CONST 2) = VARIABLE
(CONST 3) = " if in debug mode WARNINGs signaled go to lisp break loops "
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *TR-WARN-BREAK*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *TR-WARN-BREAK*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *TR-WARN-BREAK*
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *TR-WARN-BREAK*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; " if in debug mode WARNINGs signaled go to lisp break loops "
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *TR-WARN-BREAK*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO TR-WARNBREAK NIL ...)-50|
(CONST 0) = TR-WARNBREAK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-WARNBREAK>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-WARNBREAK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-WARNBREAK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-WARNBREAK>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; TR-WARNBREAK
10    (SKIP&RET 1)


Disassembly of function TR-WARNBREAK
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = (AND *TRANSL-DEBUG* *TR-WARN-BREAK* (*BREAK T 'TRANSL))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (AND *TRANSL-DEBUG* ...)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TR-WARNP (VAL) ...)-51|
(CONST 0) = TR-WARNP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-WARNP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-WARNP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-WARNP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-WARNP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-WARNP
8     (SKIP&RET 1)


Disassembly of function TR-WARNP
(CONST 0) = *IN-COMPILE*
(CONST 1) = ($ALL $COMPILE $COMPFILE $TRANSLATE)
(CONST 2) = MEMQ
(CONST 3) = *IN-COMPFILE*
(CONST 4) = *IN-TRANSLATE-FILE*
(CONST 5) = ($ALL $COMPFILE $TRANSLATE)
(CONST 6) = *IN-TRANSLATE*
(CONST 7) = ($ALL $TRANSLATE)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*IN-TRANSLATE* *IN-TRANSLATE-FILE* *IN-COMPFILE* *IN-COMPILE*)
29 byte-code instructions:
0     (LOAD 1)
1     (JMPIFNOT1 L37)
3     (GETVALUE 0)                        ; *IN-COMPILE*
5     (JMPIF L26)
7     (GETVALUE 3)                        ; *IN-COMPFILE*
9     (JMPIF L30)
11    (GETVALUE 4)                        ; *IN-TRANSLATE-FILE*
13    (JMPIF L30)
15    (GETVALUE 6)                        ; *IN-TRANSLATE*
17    (JMPIFNOT L34)
19    (LOAD&PUSH 1)
20    (CONST 7)                           ; ($ALL $TRANSLATE)
21    L21
21    (PUSH)
22    (CALL2 2)                           ; MEMQ
24    (SKIP&RET 2)
26    L26
26    (LOAD&PUSH 1)
27    (CONST 1)                           ; ($ALL $COMPILE $COMPFILE ...)
28    (JMP L21)
30    L30
30    (LOAD&PUSH 1)
31    (CONST 5)                           ; ($ALL $COMPFILE $TRANSLATE)
32    (JMP L21)
34    L34
34    (NIL)
35    (SKIP&RET 2)
37    L37
37    (SKIP&RET 2)


Disassembly of function #:|(DEFVAR WARNED-UNDEFINED-VARIABLES NIL)-52|
(CONST 0) = (SPECIAL WARNED-UNDEFINED-VARIABLES)
(CONST 1) = WARNED-UNDEFINED-VARIABLES
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; WARNED-UNDEFINED-VARIABLES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; WARNED-UNDEFINED-VARIABLES
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; WARNED-UNDEFINED-VARIABLES
12    (SKIP&RET 1)


Disassembly of function #:|(DEFTRFUN WARN-UNDEFINED-VARIABLE (FORM) ...)-53|
(CONST 0) = WARN-UNDEFINED-VARIABLE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WARN-UNDEFINED-VARIABLE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WARN-UNDEFINED-VARIABLE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WARN-UNDEFINED-VARIABLE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WARN-UNDEFINED-VARIABLE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WARN-UNDEFINED-VARIABLE
8     (SKIP&RET 1)


Disassembly of function WARN-UNDEFINED-VARIABLE
(CONST 0) = $TR_WARN_UNDEFINED_VARIABLE
(CONST 1) = TR-WARNP
(CONST 2) = WARNED-UNDEFINED-VARIABLES
(CONST 3) = MEMQ
(CONST 4) = "~%Warning-> ~:M is an undefined global variable."
(CONST 5) = TR-FORMAT
(CONST 6) = *TRANSL-DEBUG*
(CONST 7) = *TR-WARN-BREAK*
(CONST 8) = TRANSL
(CONST 9) = *BREAK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(*TR-WARN-BREAK* *TRANSL-DEBUG* WARNED-UNDEFINED-VARIABLES
 $TR_WARN_UNDEFINED_VARIABLE)
writes special variable : (WARNED-UNDEFINED-VARIABLES)
24 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; $TR_WARN_UNDEFINED_VARIABLE
2     (CALL1 1)                           ; TR-WARNP
4     (JMPIFNOT1 L37)
6     (LOAD&PUSH 1)
7     (GETVALUE&PUSH 2)                   ; WARNED-UNDEFINED-VARIABLES
9     (CALL2 3)                           ; MEMQ
11    (JMPIF1 L37)
13    (LOAD&PUSH 1)
14    (GETVALUE 2)                        ; WARNED-UNDEFINED-VARIABLES
16    (CONS)
17    (SETVALUE 2)                        ; WARNED-UNDEFINED-VARIABLES
19    (CONST&PUSH 4)                      ; "~%Warning-> ~:M is an undefined global variable."
20    (LOAD&PUSH 2)
21    (CALL2 5)                           ; TR-FORMAT
23    (GETVALUE 6)                        ; *TRANSL-DEBUG*
25    (JMPIFNOT1 L37)
27    (GETVALUE 7)                        ; *TR-WARN-BREAK*
29    (JMPIFNOT1 L37)
31    (T&PUSH)
32    (CONST&PUSH 8)                      ; TRANSL
33    (CALL2 9)                           ; *BREAK
35    (SKIP&RET 2)
37    L37
37    (SKIP&RET 2)


Disassembly of function #:|(DEFTRFUN WARN-UNDECLARED (FORM &OPTIONAL COMMENT) ...)-54|
(CONST 0) = WARN-UNDECLARED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WARN-UNDECLARED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WARN-UNDECLARED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WARN-UNDECLARED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WARN-UNDECLARED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WARN-UNDECLARED
8     (SKIP&RET 1)


Disassembly of function WARN-UNDECLARED
(CONST 0) = $TR_WARN_UNDECLARED
(CONST 1) = TR-WARNP
(CONST 2) = *WARNED-UN-DECLARED-VARS*
(CONST 3) = ZL-MEMBER
(CONST 4) = 
"~%WARNING-> ~:M has not been MODEDECLAREd, ~
		       taken as mode ANY."
(CONST 5) = TR-FORMAT
(CONST 6) = *TRANSLATION-MSGS-FILES*
(CONST 7) = V
(CONST 8) = *TRANSL-DEBUG*
(CONST 9) = *TR-WARN-BREAK*
(CONST 10) = TRANSL
(CONST 11) = *BREAK
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: 
(V *TRANSLATION-MSGS-FILES* *TR-WARN-BREAK* *TRANSL-DEBUG*
 *WARNED-UN-DECLARED-VARS* $TR_WARN_UNDECLARED)
writes special variables : (V *WARNED-UN-DECLARED-VARS*)
54 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (GETVALUE&PUSH 0)                   ; $TR_WARN_UNDECLARED
4     (CALL1 1)                           ; TR-WARNP
6     (JMPIFNOT1 L80)
9     (LOAD&PUSH 2)
10    (GETVALUE&PUSH 2)                   ; *WARNED-UN-DECLARED-VARS*
12    (CALL2&JMPIF 3 L43)                 ; ZL-MEMBER
15    (LOAD&PUSH 2)
16    (GETVALUE 2)                        ; *WARNED-UN-DECLARED-VARS*
18    (CONS)
19    (SETVALUE 2)                        ; *WARNED-UN-DECLARED-VARS*
21    (CONST&PUSH 4)                      ; "~%WARNING-> ~:M has not been MODEDECLAREd, ~
		       taken as mode ANY."
22    (LOAD&PUSH 3)
23    (CALL2 5)                           ; TR-FORMAT
25    (LOAD&JMPIF 1 L46)
28    (GETVALUE 8)                        ; *TRANSL-DEBUG*
30    (JMPIFNOT L40)
32    L32
32    (GETVALUE 9)                        ; *TR-WARN-BREAK*
34    (JMPIFNOT L40)
36    (T&PUSH)
37    (CONST&PUSH 10)                     ; TRANSL
38    (CALL2 11)                          ; *BREAK
40    L40
40    (NIL)
41    (SKIP&RET 3)
43    L43
43    (T)
44    (SKIP&RET 3)
46    L46
46    (GETVALUE&PUSH 6)                   ; *TRANSLATION-MSGS-FILES*
48    (NIL)
49    (BIND 7)                            ; V
51    (JMP L67)
53    L53
53    (LOAD 3)
54    (CAR)
55    (SETVALUE 7)                        ; V
57    (PUSH)
58    (CALLS1 139)                        ; TERPRI
60    (LOAD&PUSH 5)
61    (GETVALUE&PUSH 7)                   ; V
63    (CALLS1 132)                        ; PRINC
65    (LOAD&CDR&STORE 3)
67    L67
67    (LOAD&PUSH 3)
68    (CALLS1&JMPIFNOT 146 L53)           ; ENDP
71    (UNBIND1)
72    (SKIP 1)
74    (GETVALUE 8)                        ; *TRANSL-DEBUG*
76    (JMPIFNOT L40)
78    (JMP L32)
80    L80
80    (SKIP&RET 3)


Disassembly of function #:|(DEFTRFUN WARN-MEVAL (FORM &OPTIONAL COMMENT) ...)-55|
(CONST 0) = WARN-MEVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WARN-MEVAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WARN-MEVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WARN-MEVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WARN-MEVAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WARN-MEVAL
8     (SKIP&RET 1)


Disassembly of function WARN-MEVAL
(CONST 0) = $TR_WARN_MEVAL
(CONST 1) = TR-WARNP
(CONST 2) = 
"~%WARNING-> ~:M~
		       ~%has caused a call to the evaluator to be output,~
		       ~%due to lack of information. Code will not work compiled."
(CONST 3) = TR-FORMAT
(CONST 4) = *TRANSLATION-MSGS-FILES*
(CONST 5) = V
(CONST 6) = *TRANSL-DEBUG*
(CONST 7) = *TR-WARN-BREAK*
(CONST 8) = TRANSL
(CONST 9) = *BREAK
(CONST 10) = WARNED
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (V *TRANSLATION-MSGS-FILES* *TR-WARN-BREAK* *TRANSL-DEBUG* $TR_WARN_MEVAL)
writes special variable : (V)
44 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (GETVALUE&PUSH 0)                   ; $TR_WARN_MEVAL
4     (CALL1&JMPIFNOT 1 L63)              ; TR-WARNP
7     (CONST&PUSH 2)                      ; "~%WARNING-> ~:M~
		       ~%has caused a call to the evaluator to be output,~
		       ~%due to lack of information. Code will not work compiled."
8     (LOAD&PUSH 3)
9     (CALL2 3)                           ; TR-FORMAT
11    (LOAD&JMPIF 1 L29)
14    (GETVALUE 6)                        ; *TRANSL-DEBUG*
16    (JMPIFNOT L26)
18    L18
18    (GETVALUE 7)                        ; *TR-WARN-BREAK*
20    (JMPIFNOT L26)
22    (T&PUSH)
23    (CONST&PUSH 8)                      ; TRANSL
24    (CALL2 9)                           ; *BREAK
26    L26
26    (CONST 10)                          ; WARNED
27    (SKIP&RET 3)
29    L29
29    (GETVALUE&PUSH 4)                   ; *TRANSLATION-MSGS-FILES*
31    (NIL)
32    (BIND 5)                            ; V
34    (JMP L50)
36    L36
36    (LOAD 3)
37    (CAR)
38    (SETVALUE 5)                        ; V
40    (PUSH)
41    (CALLS1 139)                        ; TERPRI
43    (LOAD&PUSH 5)
44    (GETVALUE&PUSH 5)                   ; V
46    (CALLS1 132)                        ; PRINC
48    (LOAD&CDR&STORE 3)
50    L50
50    (LOAD&PUSH 3)
51    (CALLS1&JMPIFNOT 146 L36)           ; ENDP
54    (UNBIND1)
55    (SKIP 1)
57    (GETVALUE 6)                        ; *TRANSL-DEBUG*
59    (JMPIFNOT L26)
61    (JMP L18)
63    L63
63    (NIL)
64    (SKIP&RET 3)


Disassembly of function #:|(DEFTRFUN WARN-MODE (VAR MODE NEWMODE ...) ...)-56|
(CONST 0) = WARN-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WARN-MODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WARN-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WARN-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WARN-MODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WARN-MODE
8     (SKIP&RET 1)


Disassembly of function WARN-MODE
(CONST 0) = VAR
(CONST 1) = $TR_WARN_MODE
(CONST 2) = TR-WARNP
(CONST 3) = COVERS
(CONST 4) = *WARNED-MODE-VARS*
(CONST 5) = ZL-MEMBER
(CONST 6) = 
"~%WARNING-> Assigning variable ~:M, whose mode is ~:M,~
		 a value of mode ~:M."
(CONST 7) = TR-FORMAT
(CONST 8) = *TRANSLATION-MSGS-FILES*
(CONST 9) = V
(CONST 10) = *TRANSL-DEBUG*
(CONST 11) = *TR-WARN-BREAK*
(CONST 12) = TRANSL
(CONST 13) = *BREAK
3 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: 
(*TR-WARN-BREAK* *TRANSL-DEBUG* V *TRANSLATION-MSGS-FILES* *WARNED-MODE-VARS*
 VAR $TR_WARN_MODE)
writes special variables : (*WARNED-MODE-VARS* V)
69 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; VAR
3     (UNBOUND->NIL 4)
5     (LOAD&PUSH 6)
6     (LOAD 6)
7     (EQ)
8     (JMPIF1 L32)
10    (GETVALUE&PUSH 1)                   ; $TR_WARN_MODE
12    (CALL1&JMPIFNOT 2 L31)              ; TR-WARNP
15    (LOAD&PUSH 6)
16    (LOAD&PUSH 6)
17    (CALL2&JMPIF 3 L31)                 ; COVERS
20    (GETVALUE&PUSH 0)                   ; VAR
22    (LOAD&PUSH 7)
23    (LOAD&PUSH 7)
24    (LIST&PUSH 3)
26    (GETVALUE&PUSH 4)                   ; *WARNED-MODE-VARS*
28    (CALL2&JMPIFNOT 5 L69)              ; ZL-MEMBER
31    L31
31    (NIL)
32    L32
32    (UNBIND1)
33    (SKIP&RET 5)
35    L35
35    (GETVALUE&PUSH 8)                   ; *TRANSLATION-MSGS-FILES*
37    (NIL)
38    (BIND 9)                            ; V
40    (JMP L56)
42    L42
42    (LOAD 3)
43    (CAR)
44    (SETVALUE 9)                        ; V
46    (PUSH)
47    (CALLS1 139)                        ; TERPRI
49    (LOAD&PUSH 8)
50    (GETVALUE&PUSH 9)                   ; V
52    (CALLS1 132)                        ; PRINC
54    (LOAD&CDR&STORE 3)
56    L56
56    (LOAD&PUSH 3)
57    (CALLS1&JMPIFNOT 146 L42)           ; ENDP
60    (UNBIND1)
61    (SKIP 1)
63    (GETVALUE 10)                       ; *TRANSL-DEBUG*
65    (JMPIFNOT1 L32)
67    (JMP L95)
69    L69
69    (GETVALUE&PUSH 0)                   ; VAR
71    (LOAD&PUSH 7)
72    (LOAD&PUSH 7)
73    (LIST&PUSH 3)
75    (GETVALUE 4)                        ; *WARNED-MODE-VARS*
77    (CONS)
78    (SETVALUE 4)                        ; *WARNED-MODE-VARS*
80    (CONST&PUSH 6)                      ; "~%WARNING-> Assigning variable ~:M, whose mode is ~:M,~
		 a value of mode ~:M."
81    (GETVALUE&PUSH 0)                   ; VAR
83    (LOAD&PUSH 8)
84    (LOAD&PUSH 8)
85    (CALL 4 7)                          ; TR-FORMAT
88    (LOAD&JMPIF 4 L35)
91    (GETVALUE 10)                       ; *TRANSL-DEBUG*
93    (JMPIFNOT1 L32)
95    L95
95    (GETVALUE 11)                       ; *TR-WARN-BREAK*
97    (JMPIFNOT1 L32)
100   (T&PUSH)
101   (CONST&PUSH 12)                     ; TRANSL
102   (CALL2 13)                          ; *BREAK
104   (JMP L32)


Disassembly of function #:|(DEFTRFUN WARN-FEXPR (FORM &OPTIONAL COMMENT) ...)-57|
(CONST 0) = WARN-FEXPR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WARN-FEXPR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WARN-FEXPR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WARN-FEXPR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WARN-FEXPR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WARN-FEXPR
8     (SKIP&RET 1)


Disassembly of function WARN-FEXPR
(CONST 0) = $TR_WARN_FEXPR
(CONST 1) = TR-WARNP
(CONST 2) = *WARNED-FEXPRS*
(CONST 3) = ZL-MEMBER
(CONST 4) = 
"~%WARNING->~%~:M~
		       ~%is a special function without a full LISP translation~
		       ~%scheme. Use in compiled code may not work."
(CONST 5) = TR-FORMAT
(CONST 6) = *TRANSLATION-MSGS-FILES*
(CONST 7) = V
(CONST 8) = *TRANSL-DEBUG*
(CONST 9) = *TR-WARN-BREAK*
(CONST 10) = TRANSL
(CONST 11) = *BREAK
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: 
(*TR-WARN-BREAK* *TRANSL-DEBUG* V *TRANSLATION-MSGS-FILES* *WARNED-FEXPRS*
 $TR_WARN_FEXPR)
writes special variables : (*WARNED-FEXPRS* V)
52 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (GETVALUE&PUSH 0)                   ; $TR_WARN_FEXPR
4     (CALL1&JMPIFNOT 1 L13)              ; TR-WARNP
7     (LOAD&PUSH 2)
8     (GETVALUE&PUSH 2)                   ; *WARNED-FEXPRS*
10    (CALL2&JMPIFNOT 3 L50)              ; ZL-MEMBER
13    L13
13    (NIL)
14    (SKIP&RET 3)
16    L16
16    (GETVALUE&PUSH 6)                   ; *TRANSLATION-MSGS-FILES*
18    (NIL)
19    (BIND 7)                            ; V
21    (JMP L37)
23    L23
23    (LOAD 3)
24    (CAR)
25    (SETVALUE 7)                        ; V
27    (PUSH)
28    (CALLS1 139)                        ; TERPRI
30    (LOAD&PUSH 5)
31    (GETVALUE&PUSH 7)                   ; V
33    (CALLS1 132)                        ; PRINC
35    (LOAD&CDR&STORE 3)
37    L37
37    (LOAD&PUSH 3)
38    (CALLS1&JMPIFNOT 146 L23)           ; ENDP
41    (UNBIND1)
42    (SKIP 1)
44    (GETVALUE 8)                        ; *TRANSL-DEBUG*
46    (JMPIFNOT1 L77)
48    (JMP L67)
50    L50
50    (LOAD&PUSH 2)
51    (GETVALUE 2)                        ; *WARNED-FEXPRS*
53    (CONS)
54    (SETVALUE 2)                        ; *WARNED-FEXPRS*
56    (CONST&PUSH 4)                      ; "~%WARNING->~%~:M~
		       ~%is a special function without a full LISP translation~
		       ~%scheme. Use in compiled code may not work."
57    (LOAD&PUSH 3)
58    (CALL2 5)                           ; TR-FORMAT
60    (LOAD&JMPIF 1 L16)
63    (GETVALUE 8)                        ; *TRANSL-DEBUG*
65    (JMPIFNOT1 L77)
67    L67
67    (GETVALUE 9)                        ; *TR-WARN-BREAK*
69    (JMPIFNOT1 L77)
71    (T&PUSH)
72    (CONST&PUSH 10)                     ; TRANSL
73    (CALL2 11)                          ; *BREAK
75    (SKIP&RET 3)
77    L77
77    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MACSYMA-SPECIAL-MACRO-P (FCN) ...)-58|
(CONST 0) = MACSYMA-SPECIAL-MACRO-P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MACSYMA-SPECIAL-MACRO-P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MACSYMA-SPECIAL-MACRO-P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MACSYMA-SPECIAL-MACRO-P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MACSYMA-SPECIAL-MACRO-P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MACSYMA-SPECIAL-MACRO-P
8     (SKIP&RET 1)


Disassembly of function MACSYMA-SPECIAL-MACRO-P
(CONST 0) = (MACRO)
(CONST 1) = GETL-LM-FCN-PROP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (MACRO)
2     (CALL2 1)                           ; GETL-LM-FCN-PROP
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN MACSYMA-SPECIAL-OP-P (F) ...)-59|
(CONST 0) = MACSYMA-SPECIAL-OP-P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MACSYMA-SPECIAL-OP-P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MACSYMA-SPECIAL-OP-P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MACSYMA-SPECIAL-OP-P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MACSYMA-SPECIAL-OP-P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MACSYMA-SPECIAL-OP-P
8     (SKIP&RET 1)


Disassembly of function MACSYMA-SPECIAL-OP-P
(CONST 0) = F
(CONST 1) = (FSUBR FEXPR MFEXPR* MFEXPR*S *FEXPR)
(CONST 2) = GETL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (F)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; F
3     (GETVALUE&PUSH 0)                   ; F
5     (CONST&PUSH 1)                      ; (FSUBR FEXPR MFEXPR* MFEXPR*S ...)
6     (CALL2 2)                           ; GETL
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN POSSIBLE-PREDICATE-OP-P (F) ...)-60|
(CONST 0) = POSSIBLE-PREDICATE-OP-P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POSSIBLE-PREDICATE-OP-P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POSSIBLE-PREDICATE-OP-P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POSSIBLE-PREDICATE-OP-P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POSSIBLE-PREDICATE-OP-P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POSSIBLE-PREDICATE-OP-P
8     (SKIP&RET 1)


Disassembly of function POSSIBLE-PREDICATE-OP-P
(CONST 0) = F
(CONST 1) = (MNOTEQUAL MEQUAL $EQUAL MGREATERP MGEQP MLESSP MLEQP)
(CONST 2) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (F)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; F
3     (GETVALUE&PUSH 0)                   ; F
5     (CONST&PUSH 1)                      ; (MNOTEQUAL MEQUAL $EQUAL ...)
6     (CALL2 2)                           ; MEMQ
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN WARN-PREDICATE (FORM) ...)-61|
(CONST 0) = WARN-PREDICATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WARN-PREDICATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WARN-PREDICATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WARN-PREDICATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WARN-PREDICATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WARN-PREDICATE
8     (SKIP&RET 1)


Disassembly of function WARN-PREDICATE
(CONST 0) = "This variable should be declared BOOLEAN perhaps."
(CONST 1) = MACSYMA-SPECIAL-OP-P
(CONST 2) = "Special form not handled in targeting: Transl BUG."
(CONST 3) = POSSIBLE-PREDICATE-OP-P
(CONST 4) = "Unable to assert modes of subexpressions, a call to the macsyma data *print-base* has been generated."
(CONST 5) = "TRANSLATE doesn't know predicate properties for this, a call to the macsyma data *print-base* has been generated."
(CONST 6) = WARN-MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
25 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOAD 2)
2     (JMPIFATOM L22)
4     (LOAD 2)
5     (CAR)
6     (CAR&PUSH)
7     (CALL1&JMPIF 1 L25)                 ; MACSYMA-SPECIAL-OP-P
10    (LOAD 2)
11    (CAR)
12    (CAR&PUSH)
13    (CALL1&JMPIF 3 L28)                 ; POSSIBLE-PREDICATE-OP-P
16    (CONST 5)                           ; "TRANSLATE doesn't know predicate properties for this, a call to the macsyma data *print-base* has been generated."
17    L17
17    (PUSH)
18    (CALL2 6)                           ; WARN-MEVAL
20    (SKIP&RET 2)
22    L22
22    (CONST 0)                           ; "This variable should be declared BOOLEAN perhaps."
23    (JMP L17)
25    L25
25    (CONST 2)                           ; "Special form not handled in targeting: Transl BUG."
26    (JMP L17)
28    L28
28    (CONST 4)                           ; "Unable to assert modes of subexpressions, a call to the macsyma data *print-base* has been generated."
29    (JMP L17)


Disassembly of function #:|(DEFUN TR-LOCAL-EXP (EXP &REST VARS-MODES) ...)-62|
(CONST 0) = TR-LOCAL-EXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-LOCAL-EXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-LOCAL-EXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-LOCAL-EXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-LOCAL-EXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-LOCAL-EXP
8     (SKIP&RET 1)


Disassembly of function TR-LOCAL-EXP
(CONST 0) = EXP
(CONST 1) = TR-LAMBDA-PUNT-ASSIGNS
(CONST 2) = (LAMBDA)
(CONST 3) = (MLIST)
(CONST 4) = L
(CONST 5) = VARIABLE-P
(CONST 6) = BAD-VAR-WARN
(CONST 7) = ($MODEDECLARE)
(CONST 8) = TR-LAMBDA
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (EXP L)
writes special variable : (L)
54 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (T)
4     (BIND 1)                            ; TR-LAMBDA-PUNT-ASSIGNS
6     (CONST&PUSH 2)                      ; (LAMBDA)
7     (CONST&PUSH 3)                      ; (MLIST)
8     (LOAD 9)
9     (BIND 4)                            ; L
11    (NIL&PUSH)
12    (GETVALUE 4)                        ; L
14    (JMPIFNOT L43)
16    L16
16    (GETVALUE 4)                        ; L
18    (CAR&PUSH)
19    (CALL1&JMPIF 5 L27)                 ; VARIABLE-P
22    (GETVALUE 4)                        ; L
24    (CAR&PUSH)
25    (CALL1 6)                           ; BAD-VAR-WARN
27    L27
27    (GETVALUE 4)                        ; L
29    (CDR)
30    (CDR&PUSH)
31    (GETVALUE 4)                        ; L
33    (CAR&PUSH)
34    (LOAD&CONS&STORE 1)
36    (POP)
37    (SETVALUE 4)                        ; L
39    (GETVALUE 4)                        ; L
41    (JMPIF L16)
43    L43
43    (POP)
44    (UNBIND1)
45    (CONS&PUSH)
46    (CONST&PUSH 7)                      ; ($MODEDECLARE)
47    (LOAD 10)
48    (CONS&PUSH)
49    (GETVALUE&PUSH 0)                   ; EXP
51    (LIST&PUSH 4)
53    (CALL1 8)                           ; TR-LAMBDA
55    (UNBIND1)
56    (PUSH)
57    (LOAD&CAR&PUSH 0)
59    (LOAD&PUSH 1)
60    (PUSH-UNBOUND 1)
62    (CALLS1 156)                        ; LAST
64    (CAR)
65    (BIND 0)                            ; EXP
67    (LOAD&PUSH 3)
68    (GETVALUE 0)                        ; EXP
70    (CONS)
71    (UNBIND1)
72    (SKIP 2)
74    (UNBIND1)
75    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TR-ARGS (FORM) ...)-63|
(CONST 0) = TR-ARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-ARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-ARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-ARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-ARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-ARGS
8     (SKIP&RET 1)


Disassembly of function TR-ARGS
(CONST 0) = X
(CONST 1) = TRANSLATE
(CONST 2) = DCONVX
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 2)
2     (JMP L23)
4     L4
4     (LOAD&CAR&PUSH 0)
6     (LOAD 0)
7     (BIND 0)                            ; X
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1&PUSH 1)                      ; TRANSLATE
13    (CALL1 2)                           ; DCONVX
15    (UNBIND1)
16    (PUSH)
17    (LOAD&CONS&STORE 2)
19    (SKIP 1)
21    (LOAD&CDR&STORE 0)
23    L23
23    (LOAD&PUSH 0)
24    (CALLS1&JMPIFNOT 146 L4)            ; ENDP
27    (SKIP 1)
29    (LOAD&PUSH 0)
30    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
32    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DTRANSLATE (FORM) ...)-64|
(CONST 0) = DTRANSLATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DTRANSLATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DTRANSLATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DTRANSLATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DTRANSLATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DTRANSLATE
8     (SKIP&RET 1)


Disassembly of function DTRANSLATE
(CONST 0) = TRANSLATE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; TRANSLATE
3     (CDR)
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN DCONV (X MODE) ...)-65|
(CONST 0) = DCONV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DCONV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DCONV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DCONV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DCONV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DCONV
8     (SKIP&RET 1)


Disassembly of function DCONV
(CONST 0) = X
(CONST 1) = $FLOAT
(CONST 2) = DCONV-$FLOAT
(CONST 3) = $CRE
(CONST 4) = DCONV-$CRE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
19 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 4)
4     (JMPIFEQTO 1 L17)                   ; $FLOAT
7     (LOAD&PUSH 4)
8     (JMPIFEQTO 3 L23)                   ; $CRE
11    (GETVALUE 0)                        ; X
13    (CDR)
14    L14
14    (UNBIND1)
15    (SKIP&RET 3)
17    L17
17    (GETVALUE&PUSH 0)                   ; X
19    (CALL1 2)                           ; DCONV-$FLOAT
21    (JMP L14)
23    L23
23    (GETVALUE&PUSH 0)                   ; X
25    (CALL1 4)                           ; DCONV-$CRE
27    (JMP L14)


Disassembly of function #:|(DEFUN DCONVX (X) ...)-66|
(CONST 0) = DCONVX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DCONVX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DCONVX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DCONVX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DCONVX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DCONVX
8     (SKIP&RET 1)


Disassembly of function DCONVX
(CONST 0) = X
(CONST 1) = (RATEXPR PEXPR)
(CONST 2) = MEMQ
(CONST 3) = DCONV-$CRE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (CONST&PUSH 1)                      ; (RATEXPR PEXPR)
7     (CALL2&JMPIF 2 L16)                 ; MEMQ
10    (GETVALUE 0)                        ; X
12    (CDR)
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1 3)                           ; DCONV-$CRE
20    (JMP L13)


Disassembly of function #:|(DEFUN DCONV-$FLOAT (X) ...)-67|
(CONST 0) = DCONV-$FLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DCONV-$FLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DCONV-$FLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DCONV-$FLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DCONV-$FLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DCONV-$FLOAT
8     (SKIP&RET 1)


Disassembly of function DCONV-$FLOAT
(CONST 0) = X
(CONST 1) = ($FIXNUM $NUMBER)
(CONST 2) = MEMQ
(CONST 3) = 1.0
(CONST 4) = FLOAT
(CONST 5) = $RATIONAL
(CONST 6) = QUOTE
(CONST 7) = $FLOAT
(CONST 8) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
58 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (CONST&PUSH 1)                      ; ($FIXNUM $NUMBER)
7     (CALL2&JMPIF 2 L40)                 ; MEMQ
10    (GETVALUE 0)                        ; X
12    (CAR&PUSH)
13    (JMPIFNOTEQTO 5 L74)                ; $RATIONAL
16    (GETVALUE 0)                        ; X
18    (CDR)
19    (CAR&PUSH)
20    (JMPIFEQTO 6 L49)                   ; QUOTE
23    (CONST 7)                           ; $FLOAT
24    L24
24    (PUSH)
25    (GETVALUE 0)                        ; X
27    (CDR&PUSH)
28    (LIST 2)
30    (JMP L77)
32    L32
32    (GETVALUE 0)                        ; X
34    (CDR&PUSH)
35    (CONST&PUSH 3)                      ; 1.0
36    (CALLS2 174)                        ; COMMON-LISP:FLOAT
38    (JMP L77)
40    L40
40    (GETVALUE 0)                        ; X
42    (CDR&PUSH)
43    (CALLS2&JMPIF 12 L32)               ; INTEGERP
46    (CONST 4)                           ; FLOAT
47    (JMP L24)
49    L49
49    (GETVALUE 0)                        ; X
51    (CDR)
52    (CDR)
53    (CAR)
54    (CDR)
55    (CAR&PUSH)
56    (CONST&PUSH 3)                      ; 1.0
57    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
59    (GETVALUE 0)                        ; X
61    (CDR)
62    (CDR)
63    (CAR)
64    (CDR)
65    (CDR)
66    (CAR&PUSH)
67    (CONST&PUSH 3)                      ; 1.0
68    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
70    (CALL2 8)                           ; QUOT
72    (JMP L77)
74    L74
74    (GETVALUE 0)                        ; X
76    (CDR)
77    L77
77    (UNBIND1)
78    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DCONV-$CRE (X) ...)-68|
(CONST 0) = DCONV-$CRE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DCONV-$CRE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DCONV-$CRE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DCONV-$CRE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DCONV-$CRE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DCONV-$CRE
8     (SKIP&RET 1)


Disassembly of function DCONV-$CRE
(CONST 0) = X
(CONST 1) = $CRE
(CONST 2) = RATF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L18)                   ; $CRE
9     (CONST&PUSH 2)                      ; RATF
10    (GETVALUE 0)                        ; X
12    (CDR&PUSH)
13    (LIST 2)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)
18    L18
18    (GETVALUE 0)                        ; X
20    (CDR)
21    (JMP L15)


Disassembly of function #:|(DEFMVAR *$ANY-MODES* '($ANY $LIST))-69-1|
(CONST 0) = *$ANY-MODES*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ($ANY $LIST)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *$ANY-MODES*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *$ANY-MODES*
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ($ANY $LIST)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *$ANY-MODES* '($ANY $LIST))-69-2|
(CONST 0) = (SPECIAL *$ANY-MODES*)
(CONST 1) = *$ANY-MODES*
(CONST 2) = ($ANY $LIST)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *$ANY-MODES*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *$ANY-MODES*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *$ANY-MODES*
8     (CONST&PUSH 2)                      ; ($ANY $LIST)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *$ANY-MODES*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN COVERS (MODE1 MODE2) ...)-70|
(CONST 0) = COVERS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COVERS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COVERS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COVERS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COVERS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COVERS
8     (SKIP&RET 1)


Disassembly of function COVERS
(CONST 0) = $FLOAT
(CONST 1) = ($FLOAT $FIXNUM $RATIONAL)
(CONST 2) = MEMQ
(CONST 3) = $NUMBER
(CONST 4) = ($FIXNUM $FLOAT)
(CONST 5) = *$ANY-MODES*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*$ANY-MODES*)
27 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD 2)
2     (JMPIFEQ L18)
4     (LOAD&PUSH 2)
5     (JMPIFEQTO 0 L21)                   ; $FLOAT
8     (LOAD&PUSH 2)
9     (JMPIFEQTO 3 L25)                   ; $NUMBER
12    (LOAD&PUSH 2)
13    (GETVALUE&PUSH 5)                   ; *$ANY-MODES*
15    (CALL2&JMPIFNOT 2 L32)              ; MEMQ
18    L18
18    (T)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 1)
22    (CONST 1)                           ; ($FLOAT $FIXNUM $RATIONAL)
23    (JMP L27)
25    L25
25    (LOAD&PUSH 1)
26    (CONST 4)                           ; ($FIXNUM $FLOAT)
27    L27
27    (PUSH)
28    (CALL2 2)                           ; MEMQ
30    (SKIP&RET 3)
32    L32
32    (NIL)
33    (SKIP&RET 3)


Disassembly of function #:|(DEFTRFUN TR-MFUN (NAME &AUX #) ...)-71|
(CONST 0) = TR-MFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-MFUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-MFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-MFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-MFUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-MFUN
8     (SKIP&RET 1)


Disassembly of function TR-MFUN
(CONST 0) = NAME
(CONST 1) = *TRANSL-BACKTRACE*
(CONST 2) = CONSFUNDEF
(CONST 3) = TR-ABORT
(CONST 4) = TR-MDEFINE-TOPLEVEL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NAME)
writes special variable : (TR-ABORT)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NAME
3     (NIL)
4     (BIND 1)                            ; *TRANSL-BACKTRACE*
6     (GETVALUE&PUSH 0)                   ; NAME
8     (PUSH-NIL 2)
10    (CALL&PUSH 3 2)                     ; CONSFUNDEF
13    (LOAD&JMPIFNOT 0 L25)
16    (LOAD&PUSH 0)
17    (CALL1 4)                           ; TR-MDEFINE-TOPLEVEL
19    (SKIP 1)
21    L21
21    (UNBIND 2)
23    (SKIP&RET 2)
25    L25
25    (T)
26    (SETVALUE 3)                        ; TR-ABORT
28    (SKIP 1)
30    (JMP L21)


Disassembly of function #:|(DEFUN TR-MDEFINE-TOPLEVEL (FORM &AUX #) ...)-72|
(CONST 0) = TR-MDEFINE-TOPLEVEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-MDEFINE-TOPLEVEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-MDEFINE-TOPLEVEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-MDEFINE-TOPLEVEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-MDEFINE-TOPLEVEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-MDEFINE-TOPLEVEL
8     (SKIP&RET 1)


Disassembly of function TR-MDEFINE-TOPLEVEL
(CONST 0) = NAME
(CONST 1) = MQAPPLY
(CONST 2) = ARRAY
(CONST 3) = MEMQ
(CONST 4) = MLIST
(CONST 5) = TR-UNIQUE
(CONST 6) = (LAMBDA)
(CONST 7) = (MLIST)
(CONST 8) = "Bad argument list for a function to translate->"
(CONST 9) = (MLIST)
(CONST 10) = TR-TELL
(CONST 11) = TR-ABORT
(CONST 12) = (MDEFINE MDEFMACRO)
(CONST 13) = MDEFMACRO
(CONST 14) = MACRO
(CONST 15) = FUNC
(CONST 16) = (LAMBDA)
(CONST 17) = (MLIST)
(CONST 18) = TR-LAMBDA
(CONST 19) = DEFMTRFUN-EXTERNAL
(CONST 20) = PUSH-PRE-TRANSL-FORM
(CONST 21) = ($ANY NIL)
(CONST 22) = FUNCTION-MODE
(CONST 23) = PUTPROP
(CONST 24) = ($ANY NIL)
(CONST 25) = DECMODE-ARRAYFUN
(CONST 26) = *IN-TRANSLATE*
(CONST 27) = $PACKAGEFILE
(CONST 28) = DEFPROP
(CONST 29) = (T TRANSLATED)
(CONST 30) = ADD2LNC
(CONST 31) = QUOTE
(CONST 32) = ($PROPS)
(CONST 33) = $SAVEDEF
(CONST 34) = $ALL
(CONST 35) = #S(HASH-TABLE EQ (MACRO . 9) (FUNC . 5) (ARRAY . 1))
(CONST 36) = $ARRAYS
(CONST 37) = $FUNCTIONS
(CONST 38) = $MACROS
(CONST 39) = MDEFPROP
(CONST 40) = (LAMBDA)
(CONST 41) = (MLIST)
(CONST 42) = #S(HASH-TABLE EQ (FUNC . 9) (MACRO . 5) (ARRAY . 1))
(CONST 43) = AEXPR
(CONST 44) = MMACRO
(CONST 45) = MEXPR
(CONST 46) = PROGN
(CONST 47) = DEFMTRFUN
(CONST 48) = ?
(CONST 49) = BARFO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($SAVEDEF $PACKAGEFILE *IN-TRANSLATE* TR-UNIQUE NAME)
writes special variables : (TR-ABORT NAME)
259 byte-code instructions:
0     L0
0     (PUSH-NIL 4)
2     (LOAD&CDR&PUSH 5)
4     (PUSH-NIL 3)
6     (LOAD 6)
7     (BIND 0)                            ; NAME
9     (LOAD&CAR&STORE 6 7)
12    (CAR)
13    (STORE 8)
15    (CAR)
16    (SETVALUE 0)                        ; NAME
18    (LOAD&CDR&STORE 8)
20    (LOAD&CDR&STORE 7)
22    (LOAD 6)
23    (CDR)
24    (CAR)
25    (STORE 6)
26    (LOAD&PUSH 7)
27    (GETVALUE&PUSH 0)                   ; NAME
29    (CONST 1)                           ; MQAPPLY
30    (EQ)
31    (JMPIF L37)
33    (CONST&PUSH 2)                      ; ARRAY
34    (LOAD&PUSH 10)
35    (CALL2 3)                           ; MEMQ
37    L37
37    (PUSH)
38    (LOAD&JMPIFNOT 1 L80)
41    L41
41    (LOAD&CAR&PUSH 1)
43    (LOAD 0)
44    (JMPIFATOM L112)
47    (LOAD&JMPIF 1 L68)
50    (LOAD&JMPIF 13 L68)
53    (LOAD 0)
54    (CAR)
55    (CAR&PUSH)
56    (JMPIFNOTEQTO 4 L68)                ; MLIST
59    (LOAD 0)
60    (CDR)
61    (JMPIFNOT L68)
63    (LOAD 0)
64    (CDR)
65    (CAR)
66    (JMPIFATOM L115)
68    L68
68    (GETVALUE 5)                        ; TR-UNIQUE
70    L70
70    (PUSH)
71    (LOAD&CONS&STORE 8)
73    L73
73    (SKIP 1)
75    (LOAD&CDR&STORE 1)
77    (LOAD&JMPIF 1 L41)
80    L80
80    (LOAD&PUSH 7)
81    (CALLS2&STORE 73 7)                 ; NREVERSE
84    (SKIP 2)
86    (GETVALUE&PUSH 0)                   ; NAME
88    (JMPIFEQTO 1 L124)                  ; MQAPPLY
91    (GETVALUE&PUSH 5)                   ; TR-UNIQUE
93    (LOAD&PUSH 6)
94    (CALL2&JMPIF 3 L143)                ; MEMQ
97    (LOAD 12)
98    (CAR)
99    (CAR&PUSH)
100   (CONST&PUSH 12)                     ; (MDEFINE MDEFMACRO)
101   (CALL2&JMPIF 3 L202)                ; MEMQ
105   (CONST&PUSH 48)                     ; ?
107   (CALL1 49)                          ; BARFO
109   L109
109   (UNBIND1)
110   (SKIP&RET 10)
112   L112
112   (LOAD 0)
113   (JMP L70)
115   L115
115   (LOAD 0)
116   (CDR)
117   (CAR&PUSH)
118   (LOAD&CONS&STORE 8)
120   (T&STORE 13)
122   (JMP L73)
124   L124
124   (LOAD&CAR&PUSH 12)
126   (LOAD&CAR&PUSH 8)
128   (CONST&PUSH 6)                      ; (LAMBDA)
129   (CONST&PUSH 7)                      ; (MLIST)
130   (LOAD 11)
131   (CDR)
132   (CONS&PUSH)
133   (LOAD&PUSH 10)
134   (LIST&PUSH 3)
136   (LIST&PUSH 3)
138   (JSR L0)
141   (JMP L109)
143   L143
143   (CONST&PUSH 8)                      ; "Bad argument list for a function to translate->"
144   (CONST&PUSH 9)                      ; (MLIST)
145   (LOAD 9)
146   (CONS&PUSH)
147   (CALL2 10)                          ; TR-TELL
149   (T)
150   (SETVALUE 11)                       ; TR-ABORT
152   (NIL)
153   (JMP L109)
155   L155
155   (CONST 14)                          ; MACRO
156   (JMP L214)
158   L158
158   (CONST 2)                           ; ARRAY
159   (JMP L214)
161   L161
161   (CONST&PUSH 19)                     ; DEFMTRFUN-EXTERNAL
162   (LOAD&PUSH 1)
163   (LIST&PUSH 2)
165   (CALL1 20)                          ; PUSH-PRE-TRANSL-FORM
167   (LOAD&CAR&PUSH 1)
169   (CONST&PUSH 21)                     ; ($ANY NIL)
170   (CALL2&JMPIF 3 L254)                ; MEMQ
174   (GETVALUE&PUSH 0)                   ; NAME
176   (LOAD&CAR&PUSH 2)
178   (CONST&PUSH 22)                     ; FUNCTION-MODE
179   (CALL 3 23)                         ; PUTPROP
182   (GETVALUE 26)                       ; *IN-TRANSLATE*
184   (JMPIFNOT L258)
187   (JMP L262)
190   L190
190   (GETVALUE&PUSH 0)                   ; NAME
192   (LOAD&CAR&PUSH 2)
194   (CALL2 25)                          ; DECMODE-ARRAYFUN
196   (GETVALUE 26)                       ; *IN-TRANSLATE*
198   (JMPIFNOT L258)
200   (JMP L262)
202   L202
202   (LOAD 12)
203   (CAR)
204   (CAR&PUSH)
205   (JMPIFEQTO 13 L155)                 ; MDEFMACRO
208   (CONST&PUSH 2)                      ; ARRAY
209   (LOAD&PUSH 9)
210   (CALL2&JMPIF 3 L158)                ; MEMQ
213   (CONST 15)                          ; FUNC
214   L214
214   (STORE 4)
215   (CONST&PUSH 16)                     ; (LAMBDA)
216   (CONST&PUSH 17)                     ; (MLIST)
217   (LOAD 7)
218   (CONS&PUSH)
219   (LOAD&PUSH 8)
220   (LIST&PUSH 3)
222   (CALL1&PUSH 18)                     ; TR-LAMBDA
224   (GETVALUE&PUSH 0)                   ; NAME
226   (LOAD&CAR&PUSH 1)
228   (LOAD 15)
230   (CAR)
231   (CAR&PUSH)
232   (LOAD&PUSH 14)
233   (LOAD&PUSH 9)
234   (CONST 2)                           ; ARRAY
235   (EQ)
236   (PUSH)
237   (LIST&PUSH 5)
239   (LOAD&PUSH 6)
240   (JMPIFEQTO 15 L161)                 ; FUNC
244   (LOAD&PUSH 6)
245   (JMPIFNOTEQTO 2 L254)               ; ARRAY
248   (LOAD&CAR&PUSH 1)
250   (CONST&PUSH 24)                     ; ($ANY NIL)
251   (CALL2&JMPIFNOT 3 L190)             ; MEMQ
254   L254
254   (GETVALUE 26)                       ; *IN-TRANSLATE*
256   (JMPIF L262)
258   L258
258   (GETVALUE 27)                       ; $PACKAGEFILE
260   (JMPIF L324)
262   L262
262   (CONST&PUSH 28)                     ; DEFPROP
263   (GETVALUE&PUSH 0)                   ; NAME
265   (CONST 29)                          ; (T TRANSLATED)
267   (LIST*&PUSH 2)
269   (LOAD&CONS&STORE 5)
271   (CONST&PUSH 30)                     ; ADD2LNC
273   (CONST&PUSH 31)                     ; QUOTE
275   (GETVALUE&PUSH 0)                   ; NAME
277   (LIST&PUSH 2)
279   (CONST 32)                          ; ($PROPS)
281   (LIST*&PUSH 2)
283   (LOAD&CONS&STORE 5)
285   (GETVALUE&PUSH 33)                  ; $SAVEDEF
287   (JMPIFNOTEQTO 34 L324)              ; $ALL
290   (CONST&PUSH 30)                     ; ADD2LNC
292   (CONST&PUSH 31)                     ; QUOTE
294   (GETVALUE&PUSH 0)                   ; NAME
296   (LOAD 13)
297   (CONS&PUSH)
298   (LOAD 12)
299   (CONS&PUSH)
300   (LIST&PUSH 2)
302   (LOAD 8)
303   (JMPHASH 35 L318 L306 L310 L314)
306   L306
306   (CONST 36)                          ; $ARRAYS
308   (JMP L319)
310   L310
310   (CONST 37)                          ; $FUNCTIONS
312   (JMP L319)
314   L314
314   (CONST 38)                          ; $MACROS
316   (JMP L319)
318   L318
318   (NIL)
319   L319
319   (PUSH)
320   (LIST&PUSH 3)
322   (LOAD&CONS&STORE 5)
324   L324
324   (GETVALUE&PUSH 33)                  ; $SAVEDEF
326   (JMPIFNOTEQTO 34 L364)              ; $ALL
329   (CONST&PUSH 39)                     ; MDEFPROP
331   (GETVALUE&PUSH 0)                   ; NAME
333   (CONST&PUSH 40)                     ; (LAMBDA)
335   (CONST&PUSH 41)                     ; (MLIST)
337   (LOAD 13)
338   (CONS&PUSH)
339   (LOAD&PUSH 12)
340   (LIST&PUSH 3)
342   (LOAD 9)
343   (JMPHASH 42 L358 L346 L350 L354)
346   L346
346   (CONST 43)                          ; AEXPR
348   (JMP L359)
350   L350
350   (CONST 44)                          ; MMACRO
352   (JMP L359)
354   L354
354   (CONST 45)                          ; MEXPR
356   (JMP L359)
358   L358
358   (NIL)
359   L359
359   (PUSH)
360   (LIST&PUSH 4)
362   (LOAD&CONS&STORE 5)
364   L364
364   (CONST&PUSH 46)                     ; PROGN
366   (LOAD&PUSH 6)
367   (CALLS2&PUSH 73)                    ; NREVERSE
369   (CONST&PUSH 47)                     ; DEFMTRFUN
371   (LOAD&PUSH 3)
372   (LOAD 5)
373   (CDR)
374   (CDR)
375   (LIST*&PUSH 2)
377   (LIST&PUSH 1)
379   (CALLSR 2 34)                       ; APPEND
382   (CONS)
383   (SKIP 2)
385   (JMP L109)


Disassembly of function #:|(DEFUN LISP-FCN-TYPEP (FCN TYPE) ...)-73|
(CONST 0) = LISP-FCN-TYPEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISP-FCN-TYPEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISP-FCN-TYPEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISP-FCN-TYPEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISP-FCN-TYPEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LISP-FCN-TYPEP
8     (SKIP&RET 1)


Disassembly of function LISP-FCN-TYPEP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (PUSH-UNBOUND 1)
4     (CALLS2 132)                        ; GET
6     (SKIP&RET 3)


Disassembly of function #:|(DEFTRFUN TRANSLATE-FUNCTION (NAME) ...)-74|
(CONST 0) = TRANSLATE-FUNCTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE-FUNCTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-FUNCTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE-FUNCTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE-FUNCTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE-FUNCTION
8     (SKIP&RET 1)


Disassembly of function TRANSLATE-FUNCTION
(CONST 0) = NAME
(CONST 1) = *WARNED-UN-DECLARED-VARS*
(CONST 2) = *WARNED-FEXPRS*
(CONST 3) = *WARNED-MODE-VARS*
(CONST 4) = *WARNED-UNDEFINED-VARS*
(CONST 5) = WARNED-UNDEFINED-VARIABLES
(CONST 6) = TR-ABORT
(CONST 7) = TRANSL-FILE
(CONST 8) = *IN-COMPFILE*
(CONST 9) = *IN-TRANSLATE-FILE*
(CONST 10) = *IN-TRANSLATE*
(CONST 11) = *PRE-TRANSL-FORMS*
(CONST 12) = *NEW-AUTOLOAD-ENTRIES*
(CONST 13) = $TR_SEMICOMPILE
(CONST 14) = ARRAYS
(CONST 15) = EXPRS
(CONST 16) = LEXPRS
(CONST 17) = FEXPRS
(CONST 18) = SPECIALS
(CONST 19) = DECLARES
(CONST 20) = $TRANSCOMPILE
(CONST 21) = $TR_NUMER
(CONST 22) = DEFINED_VARIABLES
(CONST 23) = TR-MFUN
(CONST 24) = TRANSLATED
(CONST 25) = EXPR
(CONST 26) = LISP-FCN-TYPEP
(CONST 27) = TRFAIL
(CONST 28) = SUBR
(CONST 29) = TRACE
(CONST 30) = MGET
(CONST 31) = MACSYMA-UNTRACE
(CONST 32) = $SAVEDEF
(CONST 33) = ($REMFUNCTION)
(CONST 34) = MEVAL
(CONST 35) = #(NIL)
(CONST 36) = (#(ERROR 162) 1 . 1)
(CONST 37) = EVAL
(CONST 38) = ERRSET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRSET $SAVEDEF TR-ABORT NAME $TR_NUMER $TRANSCOMPILE $TR_SEMICOMPILE)
writes special variable : (*IN-TRANSLATE*)
129 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NAME
3     (NIL)
4     (BIND 1)                            ; *WARNED-UN-DECLARED-VARS*
6     (NIL)
7     (BIND 2)                            ; *WARNED-FEXPRS*
9     (NIL)
10    (BIND 3)                            ; *WARNED-MODE-VARS*
12    (NIL)
13    (BIND 4)                            ; *WARNED-UNDEFINED-VARS*
15    (NIL)
16    (BIND 5)                            ; WARNED-UNDEFINED-VARIABLES
18    (NIL)
19    (BIND 6)                            ; TR-ABORT
21    (NIL)
22    (BIND 7)                            ; TRANSL-FILE
24    (NIL)
25    (BIND 8)                            ; *IN-COMPFILE*
27    (NIL)
28    (BIND 9)                            ; *IN-TRANSLATE-FILE*
30    (NIL)
31    (BIND 10)                           ; *IN-TRANSLATE*
33    (NIL)
34    (BIND 11)                           ; *PRE-TRANSL-FORMS*
36    (NIL)
37    (BIND 12)                           ; *NEW-AUTOLOAD-ENTRIES*
39    (GETVALUE 13)                       ; $TR_SEMICOMPILE
41    (BIND 13)                           ; $TR_SEMICOMPILE
43    (NIL)
44    (BIND 14)                           ; ARRAYS
46    (NIL)
47    (BIND 15)                           ; EXPRS
49    (NIL)
50    (BIND 16)                           ; LEXPRS
52    (NIL)
53    (BIND 17)                           ; FEXPRS
55    (NIL)
56    (BIND 18)                           ; SPECIALS
58    (NIL)
59    (BIND 19)                           ; DECLARES
61    (GETVALUE 20)                       ; $TRANSCOMPILE
63    (BIND 20)                           ; $TRANSCOMPILE
65    (GETVALUE 21)                       ; $TR_NUMER
67    (BIND 21)                           ; $TR_NUMER
69    (NIL)
70    (BIND 22)                           ; DEFINED_VARIABLES
72    (T)
73    (SETVALUE 10)                       ; *IN-TRANSLATE*
75    (GETVALUE&PUSH 0)                   ; NAME
77    (CALL1&PUSH 23)                     ; TR-MFUN
79    (GETVALUE&PUSH 0)                   ; NAME
81    (CONST&PUSH 24)                     ; TRANSLATED
82    (PUSH-UNBOUND 1)
84    (CALLS2&JMPIFNOT 132 L93)           ; GET
87    (GETVALUE&PUSH 0)                   ; NAME
89    (CONST&PUSH 25)                     ; EXPR
90    (CALL2 26)                          ; LISP-FCN-TYPEP
92    (NOT)
93    L93
93    (PUSH)
94    (GETVALUE 6)                        ; TR-ABORT
96    (JMPIF L146)
98    (LOAD&JMPIFNOT 0 L106)
101   (GETVALUE&PUSH 0)                   ; NAME
103   (CONST&PUSH 28)                     ; SUBR
104   (CALLS2 137)                        ; REMPROP
106   L106
106   (GETVALUE&PUSH 0)                   ; NAME
108   (CONST&PUSH 29)                     ; TRACE
109   (CALL2&JMPIF 30 L152)               ; MGET
112   (GETVALUE 32)                       ; $SAVEDEF
114   (JMPIF L124)
116   L116
116   (CONST&PUSH 33)                     ; ($REMFUNCTION)
118   (GETVALUE&PUSH 0)                   ; NAME
120   (LIST&PUSH 2)
122   (CALL1 34)                          ; MEVAL
124   L124
124   (NIL&PUSH)
125   (TAGBODY-OPEN 35 L185)              ; #(NIL)
128   (HANDLER-OPEN 36 L162)              ; (#(ERROR 162) 1 . 1)
130   (CONST&PUSH 37)                     ; EVAL
132   (LOAD&PUSH 11)
133   (LIST 1)
135   (APPLY&PUSH 0)
137   (LIST 1)
139   (SKIP 4)
141   (TAGBODY-CLOSE)
142   (SKIP 1)
144   (JMP L192)
146   L146
146   (GETVALUE&PUSH 0)                   ; NAME
148   (CALL1 27)                          ; TRFAIL
150   (JMP L203)
152   L152
152   (GETVALUE&PUSH 0)                   ; NAME
154   (CALL1 31)                          ; MACSYMA-UNTRACE
156   (GETVALUE 32)                       ; $SAVEDEF
158   (JMPIFNOT L116)
160   (JMP L124)
162   L162
162   (HANDLER-BEGIN&PUSH)
163   (LOAD 0)
164   (STOREI 0 0 4)
168   (GO-I 0 0 2 0)
173   L173
173   (LOAD&PUSH 4)
174   (CALLSR 0 29)                       ; ERROR
177   L177
177   (GETVALUE&PUSH 0)                   ; NAME
179   (CALL1 27)                          ; TRFAIL
181   (SKIP 1)
183   (JMP L203)
185   L185
185   (GETVALUE 38)                       ; ERRSET
187   (JMPIF L173)
189   (TAGBODY-CLOSE)
190   (SKIP 1)
192   L192
192   (PUSH)
193   (LOAD&JMPIFNOT 0 L177)
196   (GETVALUE&PUSH 0)                   ; NAME
198   (LOAD&PUSH 3)
199   (STACK-TO-MV 2)
201   (SKIP 1)
203   L203
203   (SKIP 2)
205   (UNBIND 23)
207   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TRFAIL (X) ...)-75|
(CONST 0) = TRFAIL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRFAIL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRFAIL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRFAIL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRFAIL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRFAIL
8     (SKIP&RET 1)


Disassembly of function TRFAIL
(CONST 0) = X
(CONST 1) = " failed to translate."
(CONST 2) = TR-TELL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; " failed to translate."
6     (CALL2 2)                           ; TR-TELL
8     (NIL)
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFTRFUN TRANSLATE-MACEXPR-ACTUAL (FORM FILEPOS) ...)-76|
(CONST 0) = TRANSLATE-MACEXPR-ACTUAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE-MACEXPR-ACTUAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-MACEXPR-ACTUAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE-MACEXPR-ACTUAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE-MACEXPR-ACTUAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE-MACEXPR-ACTUAL
8     (SKIP&RET 1)


Disassembly of function TRANSLATE-MACEXPR-ACTUAL
(CONST 0) = TAGS
(CONST 1) = P
(CONST 2) = TRANSLATE-MACEXPR-TOPLEVEL
(CONST 3) = *TRANSLATE-BUFFERED-FORMS*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*TRANSLATE-BUFFERED-FORMS* P)
writes special variable : (*TRANSLATE-BUFFERED-FORMS*)
30 byte-code instructions:
0     (LOAD 2)
1     (JMPIFATOM L24)
3     (LOAD 2)
4     (CAR)
5     (CAR&PUSH)
6     (CALLS2&JMPIFNOT 6 L24)             ; SYMBOLP
9     (LOAD 2)
10    (CAR)
11    (CAR&PUSH)
12    (CONST&PUSH 0)                      ; TAGS
13    (PUSH-UNBOUND 1)
15    (CALLS2 132)                        ; GET
17    (BIND 1)                            ; P
19    (GETVALUE 1)                        ; P
21    (JMPIF L34)
23    (UNBIND1)
24    L24
24    (LOAD&PUSH 2)
25    (CALL1&PUSH 2)                      ; TRANSLATE-MACEXPR-TOPLEVEL
27    (GETVALUE 3)                        ; *TRANSLATE-BUFFERED-FORMS*
29    (CONS)
30    (SETVALUE 3)                        ; *TRANSLATE-BUFFERED-FORMS*
32    (SKIP&RET 3)
34    L34
34    (PUSH)
35    (LOAD&PUSH 6)
36    (LOAD&PUSH 6)
37    (FUNCALL 2)
39    (UNBIND1)
40    (JMP L24)


Disassembly of function #:|(DEFMFUN TRANSLATE-AND-EVAL-MACSYMA-EXPRESSION (FORM) ...)-77|
(CONST 0) = TRANSLATE-AND-EVAL-MACSYMA-EXPRESSION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE-AND-EVAL-MACSYMA-EXPRESSION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-AND-EVAL-MACSYMA-EXPRESSION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE-AND-EVAL-MACSYMA-EXPRESSION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE-AND-EVAL-MACSYMA-EXPRESSION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE-AND-EVAL-MACSYMA-EXPRESSION
8     (SKIP&RET 1)


Disassembly of function TRANSLATE-AND-EVAL-MACSYMA-EXPRESSION
(CONST 0) = *WARNED-UN-DECLARED-VARS*
(CONST 1) = *WARNED-FEXPRS*
(CONST 2) = *WARNED-MODE-VARS*
(CONST 3) = *WARNED-UNDEFINED-VARS*
(CONST 4) = WARNED-UNDEFINED-VARIABLES
(CONST 5) = TR-ABORT
(CONST 6) = TRANSL-FILE
(CONST 7) = *IN-COMPFILE*
(CONST 8) = *IN-TRANSLATE-FILE*
(CONST 9) = *IN-TRANSLATE*
(CONST 10) = *PRE-TRANSL-FORMS*
(CONST 11) = *NEW-AUTOLOAD-ENTRIES*
(CONST 12) = $TR_SEMICOMPILE
(CONST 13) = ARRAYS
(CONST 14) = EXPRS
(CONST 15) = LEXPRS
(CONST 16) = FEXPRS
(CONST 17) = SPECIALS
(CONST 18) = DECLARES
(CONST 19) = $TRANSCOMPILE
(CONST 20) = $TR_NUMER
(CONST 21) = DEFINED_VARIABLES
(CONST 22) = TRANSLATOR-EVAL
(CONST 23) = TRANSLATE-MACEXPR-TOPLEVEL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TR_NUMER $TRANSCOMPILE $TR_SEMICOMPILE)
writes special variable : (*IN-TRANSLATE*)
53 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; *WARNED-UN-DECLARED-VARS*
3     (NIL)
4     (BIND 1)                            ; *WARNED-FEXPRS*
6     (NIL)
7     (BIND 2)                            ; *WARNED-MODE-VARS*
9     (NIL)
10    (BIND 3)                            ; *WARNED-UNDEFINED-VARS*
12    (NIL)
13    (BIND 4)                            ; WARNED-UNDEFINED-VARIABLES
15    (NIL)
16    (BIND 5)                            ; TR-ABORT
18    (NIL)
19    (BIND 6)                            ; TRANSL-FILE
21    (NIL)
22    (BIND 7)                            ; *IN-COMPFILE*
24    (NIL)
25    (BIND 8)                            ; *IN-TRANSLATE-FILE*
27    (NIL)
28    (BIND 9)                            ; *IN-TRANSLATE*
30    (NIL)
31    (BIND 10)                           ; *PRE-TRANSL-FORMS*
33    (NIL)
34    (BIND 11)                           ; *NEW-AUTOLOAD-ENTRIES*
36    (GETVALUE 12)                       ; $TR_SEMICOMPILE
38    (BIND 12)                           ; $TR_SEMICOMPILE
40    (NIL)
41    (BIND 13)                           ; ARRAYS
43    (NIL)
44    (BIND 14)                           ; EXPRS
46    (NIL)
47    (BIND 15)                           ; LEXPRS
49    (NIL)
50    (BIND 16)                           ; FEXPRS
52    (NIL)
53    (BIND 17)                           ; SPECIALS
55    (NIL)
56    (BIND 18)                           ; DECLARES
58    (GETVALUE 19)                       ; $TRANSCOMPILE
60    (BIND 19)                           ; $TRANSCOMPILE
62    (GETVALUE 20)                       ; $TR_NUMER
64    (BIND 20)                           ; $TR_NUMER
66    (NIL)
67    (BIND 21)                           ; DEFINED_VARIABLES
69    (T)
70    (SETVALUE 9)                        ; *IN-TRANSLATE*
72    (CONST&PUSH 22)                     ; TRANSLATOR-EVAL
73    (CONST&PUSH 23)                     ; TRANSLATE-MACEXPR-TOPLEVEL
74    (LOAD&PUSH 69)
76    (FUNCALL&PUSH 1)
78    (FUNCALL 1)
80    (UNBIND 22)
82    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TRANSLATOR-EVAL (X) ...)-78|
(CONST 0) = TRANSLATOR-EVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATOR-EVAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATOR-EVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATOR-EVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATOR-EVAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATOR-EVAL
8     (SKIP&RET 1)


Disassembly of function TRANSLATOR-EVAL
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
6 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS1 91)                         ; EVAL
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFUN APPLY-IN$BIND_DURING_TRANSLATION (F FORM &REST ...) ...)-79|
(CONST 0) = APPLY-IN$BIND_DURING_TRANSLATION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE APPLY-IN$BIND_DURING_TRANSLATION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; APPLY-IN$BIND_DURING_TRANSLATION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; APPLY-IN$BIND_DURING_TRANSLATION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE APPLY-IN$BIND_DURING_TRANSLATION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; APPLY-IN$BIND_DURING_TRANSLATION
8     (SKIP&RET 1)


Disassembly of function APPLY-IN$BIND_DURING_TRANSLATION
(CONST 0) = F
(CONST 1) = L
(CONST 2) = $LISTP
(CONST 3) = "Badly formed BIND_DURING_TRANSLATION variable list.~%~:M"
(CONST 4) = TR-FORMAT
(CONST 5) = P
(CONST 6) = MEVAL
(CONST 7) = MSETQ
(CONST 8) = "Badly formed BIND_DURING_TRANSLATION binding~%~:M"
(CONST 9) = $BIND_DURING_TRANSLATION
(CONST 10) = MBIND
(CONST 11) = MUNBIND
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (F P L)
writes special variable : (L)
95 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; F
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (LOAD 8)
7     (CDR)
8     (CAR&PUSH)
9     (CALL1&JMPIFNOT 2 L59)              ; $LISTP
12    (LOAD 8)
13    (CDR)
14    (CAR)
15    (CDR)
16    (BIND 1)                            ; L
18    (PUSH-NIL 2)
20    (GETVALUE 1)                        ; L
22    (JMPIFNOT L99)
25    L25
25    (GETVALUE 1)                        ; L
27    (CAR)
28    (BIND 5)                            ; P
30    (GETVALUE 5)                        ; P
32    (JMPIFATOM L75)
34    (GETVALUE 5)                        ; P
36    (CAR)
37    (CAR&PUSH)
38    (JMPIFNOTEQTO 7 L83)                ; MSETQ
41    (GETVALUE 5)                        ; P
43    (CDR)
44    (CAR&PUSH)
45    (LOAD&CONS&STORE 4)
47    (GETVALUE 5)                        ; P
49    (CDR)
50    (CDR)
51    (CAR)
52    L52
52    (PUSH)
53    (CALL1&PUSH 6)                      ; MEVAL
55    (LOAD&CONS&STORE 3)
57    (JMP L88)
59    L59
59    (CONST&PUSH 3)                      ; "Badly formed BIND_DURING_TRANSLATION variable list.~%~:M"
60    (LOAD 9)
61    (CDR)
62    (CAR&PUSH)
63    (CALL2 4)                           ; TR-FORMAT
65    (GETVALUE&PUSH 0)                   ; F
67    (LOAD&PUSH 9)
68    (GETVALUE 1)                        ; L
70    (APPLY 1)
72    (JMP L142)
75    L75
75    (GETVALUE&PUSH 5)                   ; P
77    (LOAD&CONS&STORE 4)
79    (GETVALUE 5)                        ; P
81    (JMP L52)
83    L83
83    (CONST&PUSH 8)                      ; "Badly formed BIND_DURING_TRANSLATION binding~%~:M"
84    (GETVALUE&PUSH 5)                   ; P
86    (CALL2 4)                           ; TR-FORMAT
88    L88
88    (UNBIND1)
89    (GETVALUE 1)                        ; L
91    (CDR)
92    (SETVALUE 1)                        ; L
94    (GETVALUE 1)                        ; L
96    (JMPIF L25)
99    L99
99    (NIL&PUSH)
100   (UNWIND-PROTECT-OPEN L126)
102   (LOAD&PUSH 4)
103   (LOAD&PUSH 4)
104   (CONST&PUSH 9)                      ; $BIND_DURING_TRANSLATION
105   (CALL 3 10)                         ; MBIND
108   (T&STORE 2)
110   (GETVALUE&PUSH 0)                   ; F
112   (LOAD&PUSH 17)
113   (GETVALUE 1)                        ; L
115   (APPLY 1)
117   (UNWIND-PROTECT-NORMAL-EXIT)
118   (LOADI 0 0 0)
122   (JMPIFNOT L138)
124   (JMP L132)
126   L126
126   (LOADI 0 0 0)
130   (JMPIFNOT L138)
132   L132
132   (LOADI&PUSH 0 0 2)
136   (CALL1 11)                          ; MUNBIND
138   L138
138   (UNWIND-PROTECT-CLOSE)
139   (SKIP 3)
141   (UNBIND1)
142   L142
142   (UNBIND 2)
144   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN TRANSLATE-MACEXPR-TOPLEVEL (FORM &AUX # ...) ...)-80|
(CONST 0) = TRANSLATE-MACEXPR-TOPLEVEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE-MACEXPR-TOPLEVEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-MACEXPR-TOPLEVEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE-MACEXPR-TOPLEVEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE-MACEXPR-TOPLEVEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE-MACEXPR-TOPLEVEL
8     (SKIP&RET 1)


Disassembly of function TRANSLATE-MACEXPR-TOPLEVEL
(CONST 0) = *TRANSL-BACKTRACE*
(CONST 1) = TR-ABORT
(CONST 2) = TOPLEVEL-OPTIMIZE
(CONST 3) = $BIND_DURING_TRANSLATION
(CONST 4) = #<COMPILED-CLOSURE TRANSLATE-MACEXPR-TOPLEVEL-1>
(CONST 5) = APPLY-IN$BIND_DURING_TRANSLATION
(CONST 6) = $EVAL_WHEN
(CONST 7) = $LISTP
(CONST 8) = "Bad EVAL-WHEN times"
(CONST 9) = TR-TELL
(CONST 10) = STRIPDOLLAR
(CONST 11) = $TRANSLATE
(CONST 12) = MEMQ
(CONST 13) = MEVAL
(CONST 14) = $LOADFILE
(CONST 15) = PROGN
(CONST 16) = 'COMPILE
(CONST 17) = TRANSLATE-MACEXPR-TOPLEVEL
(CONST 18) = (COMPILE LOAD EVAL)
(CONST 19) = INTERSECT
(CONST 20) = EVAL-WHEN
(CONST 21) = $COMPILE
(CONST 22) = (COMPILE)
(CONST 23) = TRANSLATE-TIME-EVALABLES
(CONST 24) = MEVAL1
(CONST 25) = (COMPILE LOAD EVAL)
(CONST 26) = MEVAL*
(CONST 27) = QUOTE
(CONST 28) = (MDEFINE MDEFMACRO)
(CONST 29) = NAME
(CONST 30) = "~%Translating: ~:@M"
(CONST 31) = TR-FORMAT
(CONST 32) = TR-MDEFINE-TOPLEVEL
(CONST 33) = "~%~:@M failed to Translate.  Continuing..."
(CONST 34) = MPROGN
(CONST 35) = 'COMPILE
(CONST 36) = DTRANSLATE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TRANSLATE-TIME-EVALABLES TR-ABORT NAME)
178 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; *TRANSL-BACKTRACE*
3     (NIL)
4     (BIND 1)                            ; TR-ABORT
6     (LOAD&PUSH 7)
7     (CALL1 2)                           ; TOPLEVEL-OPTIMIZE
9     (STORE 7)
10    (JMPIFATOM L99)
13    (LOAD 7)
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFEQTO 3 L103)                  ; $BIND_DURING_TRANSLATION
20    (LOAD 7)
21    (CAR)
22    (CAR&PUSH)
23    (JMPIFNOTEQTO 6 L221)               ; $EVAL_WHEN
27    (LOAD 7)
28    (CDR)
29    (CAR&PUSH)
30    (LOAD 8)
31    (CDR)
32    (CDR&PUSH)
33    (NIL&PUSH)
34    (LOAD&PUSH 2)
35    (CALL1&JMPIF 7 L110)                ; $LISTP
39    (LOAD 2)
40    (JMPIFATOM L114)
43    (CONST&PUSH 8)                      ; "Bad EVAL-WHEN times"
44    (LOAD 11)
45    (CDR)
46    (CAR&PUSH)
47    (CALL2 9)                           ; TR-TELL
49    (NIL)
50    L50
50    (STORE 2)
51    (CONST&PUSH 10)                     ; STRIPDOLLAR
52    (LOAD&PUSH 3)
53    (CALLSR&STORE 0 22 0)               ; MAPCAR
57    (CONST&PUSH 11)                     ; $TRANSLATE
58    (LOAD&PUSH 3)
59    (CALL2&JMPIFNOT 12 L67)             ; MEMQ
62    (CONST&PUSH 13)                     ; MEVAL
63    (LOAD&PUSH 2)
64    (CALLSR 0 24)                       ; MAPC
67    L67
67    (CONST&PUSH 14)                     ; $LOADFILE
68    (LOAD&PUSH 3)
69    (CALL2&JMPIF 12 L120)               ; MEMQ
72    (LOAD&PUSH 0)
73    (CONST&PUSH 18)                     ; (COMPILE LOAD EVAL)
74    (CALL2 19)                          ; INTERSECT
76    (STORE 0)
77    (JMPIF L125)
79    (CONST&PUSH 21)                     ; $COMPILE
80    (LOAD&PUSH 3)
81    (CALL2&JMPIFNOT 12 L130)            ; MEMQ
84    (CONST&PUSH 20)                     ; EVAL-WHEN
85    (CONST&PUSH 22)                     ; (COMPILE)
86    (CONST 17)                          ; TRANSLATE-MACEXPR-TOPLEVEL
87    L87
87    (PUSH)
88    (LOAD&PUSH 4)
89    (CALLSR 0 22)                       ; MAPCAR
92    (LIST* 2)
94    (SKIP 3)
96    (JMP L252)
99    L99
99    (NIL)
100   (JMP L252)
103   L103
103   (CONST&PUSH 4)                      ; #<COMPILED-CLOSURE TRANSLATE-MACEXPR-TOPLEVEL-1>
104   (LOAD&PUSH 8)
105   (CALL2 5)                           ; APPLY-IN$BIND_DURING_TRANSLATION
107   (JMP L252)
110   L110
110   (LOAD 2)
111   (CDR)
112   (JMP L50)
114   L114
114   (LOAD&PUSH 2)
115   (LIST 1)
117   (JMP L50)
120   L120
120   (CONST&PUSH 15)                     ; PROGN
121   (CONST&PUSH 16)                     ; 'COMPILE
122   (CONST 17)                          ; TRANSLATE-MACEXPR-TOPLEVEL
123   (JMP L87)
125   L125
125   (CONST&PUSH 20)                     ; EVAL-WHEN
126   (LOAD&PUSH 1)
127   (CONST 17)                          ; TRANSLATE-MACEXPR-TOPLEVEL
128   (JMP L87)
130   L130
130   (NIL)
131   (SKIP 3)
133   (JMP L252)
136   L136
136   (LOAD&PUSH 7)
137   (CALL1 24)                          ; MEVAL1
139   (CONST&PUSH 20)                     ; EVAL-WHEN
140   (CONST&PUSH 25)                     ; (COMPILE LOAD EVAL)
141   (CONST&PUSH 26)                     ; MEVAL*
142   (CONST&PUSH 27)                     ; QUOTE
143   (LOAD&PUSH 11)
144   (LIST&PUSH 2)
146   (LIST&PUSH 2)
148   (LIST 3)
150   (JMP L252)
153   L153
153   (CONST&PUSH 33)                     ; "~%~:@M failed to Translate.  Continuing..."
155   (GETVALUE&PUSH 29)                  ; NAME
157   (CALL2 31)                          ; TR-FORMAT
159   (CONST&PUSH 26)                     ; MEVAL*
160   (CONST&PUSH 27)                     ; QUOTE
161   (LOAD&PUSH 13)
162   (LIST&PUSH 2)
164   (LIST 2)
166   (JMP L191)
168   L168
168   (LOAD 7)
169   (CDR)
170   (CAR)
171   (CAR)
172   (CAR)
173   (BIND 29)                           ; NAME
175   (NIL&PUSH)
176   (CONST&PUSH 30)                     ; "~%Translating: ~:@M"
178   (GETVALUE&PUSH 29)                  ; NAME
180   (CALL2 31)                          ; TR-FORMAT
182   (LOAD&PUSH 11)
183   (CALL1 32)                          ; TR-MDEFINE-TOPLEVEL
185   (STORE 0)
186   (GETVALUE 1)                        ; TR-ABORT
188   (JMPIF L153)
190   (LOAD 0)
191   L191
191   (SKIP 1)
193   (UNBIND1)
194   (JMP L252)
196   L196
196   (CONST&PUSH 15)                     ; PROGN
197   (CONST&PUSH 35)                     ; 'COMPILE
199   (CONST&SYMBOL-FUNCTION&PUSH 17)     ; TRANSLATE-MACEXPR-TOPLEVEL
201   (LOAD&CDR&PUSH 10)
203   (CALLSR 0 22)                       ; MAPCAR
206   (LIST* 2)
208   (JMP L252)
210   L210
210   (CONST&PUSH 26)                     ; MEVAL*
211   (CONST&PUSH 27)                     ; QUOTE
212   (LOAD&PUSH 10)
213   (LIST&PUSH 2)
215   (LIST 2)
217   (SKIP 1)
219   (JMP L252)
221   L221
221   (LOAD 7)
222   (CAR)
223   (CAR&PUSH)
224   (GETVALUE&PUSH 23)                  ; TRANSLATE-TIME-EVALABLES
226   (CALL2&JMPIF 12 L136)               ; MEMQ
230   (LOAD 7)
231   (CAR)
232   (CAR&PUSH)
233   (CONST&PUSH 28)                     ; (MDEFINE MDEFMACRO)
234   (CALL2&JMPIF 12 L168)               ; MEMQ
238   (LOAD 7)
239   (CAR)
240   (CAR&PUSH)
241   (JMPIFEQTO 34 L196)                 ; MPROGN
244   (LOAD&PUSH 7)
245   (CALL1&PUSH 36)                     ; DTRANSLATE
247   (GETVALUE 1)                        ; TR-ABORT
249   (JMPIF L210)
251   (POP)
252   L252
252   (UNBIND 2)
254   (SKIP&RET 2)


Disassembly of function TRANSLATE-MACEXPR-TOPLEVEL-1
(CONST 0) = PROGN
(CONST 1) = 'COMPILE
(CONST 2) = TRANSLATE-MACEXPR-TOPLEVEL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (CONST&PUSH 0)                      ; PROGN
1     (CONST&PUSH 1)                      ; 'COMPILE
2     (CONST&PUSH 2)                      ; TRANSLATE-MACEXPR-TOPLEVEL
3     (LOAD 4)
4     (CDR)
5     (CDR&PUSH)
6     (CALLSR 0 22)                       ; MAPCAR
9     (LIST* 2)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMVAR $TR_OPTIMIZE_MAX_LOOP 100 ...)-81-1|
(CONST 0) = $TR_OPTIMIZE_MAX_LOOP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 100
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_OPTIMIZE_MAX_LOOP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_OPTIMIZE_MAX_LOOP
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 100
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_OPTIMIZE_MAX_LOOP 100 ...)-81-2|
(CONST 0) = (SPECIAL $TR_OPTIMIZE_MAX_LOOP)
(CONST 1) = $TR_OPTIMIZE_MAX_LOOP
(CONST 2) = 100
(CONST 3) = VARIABLE
(CONST 4) = 
"The maximum number of times the macro-expansion and optimization
	 pass of the translator will loop in considering a form.
	 This is to catch macro expansion errors, and non-terminating
	 optimization properties."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_OPTIMIZE_MAX_LOOP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_OPTIMIZE_MAX_LOOP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_OPTIMIZE_MAX_LOOP
8     (CONST&PUSH 2)                      ; 100
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_OPTIMIZE_MAX_LOOP
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The maximum number of times the macro-expansion and optimization
	 pass of the translator will loop in considering a form.
	 This is to catch macro expansion errors, and non-terminating
	 optimization properties."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_OPTIMIZE_MAX_LOOP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TOPLEVEL-OPTIMIZE (FORM) ...)-82|
(CONST 0) = TOPLEVEL-OPTIMIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TOPLEVEL-OPTIMIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TOPLEVEL-OPTIMIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TOPLEVEL-OPTIMIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TOPLEVEL-OPTIMIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TOPLEVEL-OPTIMIZE
8     (SKIP&RET 1)


Disassembly of function TOPLEVEL-OPTIMIZE
(CONST 0) = $PROPS
(CONST 1) = MGET
(CONST 2) = ($CONSTANT)
(CONST 3) = GETL
(CONST 4) = V
(CONST 5) = 0
(CONST 6) = $TR_OPTIMIZE_MAX_LOOP
(CONST 7) = TOPLEVEL-OPTIMIZE-1
(CONST 8) = 
"~%Looping over ~A times in optimization of call to ~:@M~
		    ~%macro expand MAXIMA-ERROR likely so punting at this level."
(CONST 9) = TR-FORMAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TR_OPTIMIZE_MAX_LOOP V)
55 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFCONSP L31)
3     (LOAD&PUSH 1)
4     (CALLS2&JMPIFNOT 6 L28)             ; SYMBOLP
7     (LOAD&PUSH 1)
8     (CONST&PUSH 0)                      ; $PROPS
9     (CALL2&PUSH 1)                      ; MGET
11    (CONST&PUSH 2)                      ; ($CONSTANT)
12    (CALL2 3)                           ; GETL
14    (BIND 4)                            ; V
16    (GETVALUE 4)                        ; V
18    (JMPIF L24)
20    (LOAD 4)
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)
24    L24
24    (CDR)
25    (CAR)
26    (JMP L21)
28    L28
28    (LOAD 1)
29    (SKIP&RET 2)
31    L31
31    (NIL&PUSH)
32    (CONST&PUSH 5)                      ; 0
33    (JMP L54)
35    L35
35    (LOAD&PUSH 1)
36    (JMPTAIL 1 5 L0)
40    L40
40    (LOAD&PUSH 3)
41    (CALL1 7)                           ; TOPLEVEL-OPTIMIZE-1
43    (STORE 1)
44    (JMPIFATOM L35)
46    (LOAD&PUSH 1)
47    (LOAD 4)
48    (JMPIFEQ L70)
50    (LOAD 1)
51    (STORE 3)
52    (LOAD&INC&STORE 0)
54    L54
54    (LOAD&PUSH 0)
55    (GETVALUE&PUSH 6)                   ; $TR_OPTIMIZE_MAX_LOOP
57    (CALLSR&JMPIFNOT 1 48 L40)          ; >
61    (CONST&PUSH 8)                      ; "~%Looping over ~A times in optimization of call to ~:@M~
		    ~%macro expand MAXIMA-ERROR likely so punting at this level."
62    (GETVALUE&PUSH 6)                   ; $TR_OPTIMIZE_MAX_LOOP
64    (LOAD 5)
65    (CAR)
66    (CAR&PUSH)
67    (CALL 3 9)                          ; TR-FORMAT
70    L70
70    (LOAD 3)
71    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TOPLEVEL-OPTIMIZE-1 (FORM &AUX # ...) ...)-83|
(CONST 0) = TOPLEVEL-OPTIMIZE-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TOPLEVEL-OPTIMIZE-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TOPLEVEL-OPTIMIZE-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TOPLEVEL-OPTIMIZE-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TOPLEVEL-OPTIMIZE-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TOPLEVEL-OPTIMIZE-1
8     (SKIP&RET 1)


Disassembly of function TOPLEVEL-OPTIMIZE-1
(CONST 0) = ARRAY
(CONST 1) = MEMQ
(CONST 2) = $TRANSRUN
(CONST 3) = TRANSLATED-MMACRO
(CONST 4) = MMACRO
(CONST 5) = MGET
(CONST 6) = MMACRO-APPLY
(CONST 7) = $OPTIMIZE
(CONST 8) = $GET
(CONST 9) = "an optimizer property"
(CONST 10) = MAPPLY1
(CONST 11) = $TRANSLOAD
(CONST 12) = AUTOLOAD
(CONST 13) = GET-LISP-FUN-TYPE
(CONST 14) = (TRANSLATE MFEXPR* MFEXPR*S FSUBR FEXPR *FEXPR MACRO)
(CONST 15) = GETL
(CONST 16) = (MEXPR)
(CONST 17) = MGETL
(CONST 18) = LOAD-FUNCTION
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($TRANSRUN)
79 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (NIL&PUSH)
3     (LOAD 1)
4     (JMPIFATOM L59)
6     (CONST&PUSH 0)                      ; ARRAY
7     (LOAD&PUSH 2)
8     (CALL2&JMPIF 1 L59)                 ; MEMQ
11    (LOAD&CAR&STORE 1 1)
14    (GETVALUE 2)                        ; $TRANSRUN
16    (JMPIF L62)
18    (LOAD&PUSH 1)
19    (CONST&PUSH 4)                      ; MMACRO
20    (CALL2&JMPIFNOT 5 L78)              ; MGET
23    L23
23    (STORE 0)
24    (JMPIF L87)
26    L26
26    (LOAD&PUSH 1)
27    (CONST&PUSH 7)                      ; $OPTIMIZE
28    (CALL2 8)                           ; $GET
30    (STORE 0)
31    (JMPIF L93)
33    (LOAD&PUSH 1)
34    (CONST&PUSH 11)                     ; $TRANSLOAD
35    (CALL2&JMPIFNOT 8 L59)              ; $GET
38    (LOAD&PUSH 1)
39    (CONST&PUSH 12)                     ; AUTOLOAD
40    (PUSH-UNBOUND 1)
42    (CALLS2&JMPIFNOT 132 L59)           ; GET
45    (LOAD&PUSH 1)
46    (CALL1&JMPIF 13 L59)                ; GET-LISP-FUN-TYPE
49    (LOAD&PUSH 1)
50    (CONST&PUSH 14)                     ; (TRANSLATE MFEXPR* MFEXPR*S ...)
51    (CALL2&JMPIF 15 L59)                ; GETL
54    (LOAD&PUSH 1)
55    (CONST&PUSH 16)                     ; (MEXPR)
56    (CALL2&JMPIFNOT 17 L104)            ; MGETL
59    L59
59    (LOAD 3)
60    (SKIP&RET 4)
62    L62
62    (LOAD&PUSH 1)
63    (CONST&PUSH 3)                      ; TRANSLATED-MMACRO
64    (PUSH-UNBOUND 1)
66    (CALLS2&JMPIF 132 L23)              ; GET
69    (LOAD&PUSH 1)
70    (CONST&PUSH 4)                      ; MMACRO
71    (CALL2 5)                           ; MGET
73    (STORE 0)
74    (JMPIFNOT L26)
76    (JMP L87)
78    L78
78    (LOAD&PUSH 1)
79    (CONST&PUSH 3)                      ; TRANSLATED-MMACRO
80    (PUSH-UNBOUND 1)
82    (CALLS2&STORE 132 0)                ; GET
85    (JMPIFNOT L26)
87    L87
87    (PUSH)
88    (LOAD&PUSH 4)
89    (CALL2 6)                           ; MMACRO-APPLY
91    (SKIP&RET 4)
93    L93
93    (PUSH)
94    (LOAD&PUSH 4)
95    (LIST&PUSH 1)
97    (CONST&PUSH 9)                      ; "an optimizer property"
98    (NIL&PUSH)
99    (CALL 4 10)                         ; MAPPLY1
102   (SKIP&RET 4)
104   L104
104   (LOAD&PUSH 1)
105   (T&PUSH)
106   (CALL2 18)                          ; LOAD-FUNCTION
108   (LOAD&CAR&PUSH 3)
110   (LOAD 4)
111   (CDR)
112   (CONS)
113   (SKIP&RET 4)


Disassembly of function #:|(DEFTRFUN TRANSLATE (FORM) ...)-84|
(CONST 0) = TRANSLATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE
8     (SKIP&RET 1)


Disassembly of function TRANSLATE
(CONST 0) = *TRANSL-DEBUG*
(CONST 1) = *TRANSL-BACKTRACE*
(CONST 2) = TOPLEVEL-OPTIMIZE
(CONST 3) = TRANSLATE-ATOM
(CONST 4) = TRANSLATE-FORM
(CONST 5) = "help"
(CONST 6) = BARFO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*TRANSL-BACKTRACE* *TRANSL-DEBUG*)
writes special variable : (*TRANSL-BACKTRACE*)
51 byte-code instructions:
0     (GETVALUE 0)                        ; *TRANSL-DEBUG*
2     (JMPIFNOT L10)
4     (LOAD&PUSH 1)
5     (GETVALUE 1)                        ; *TRANSL-BACKTRACE*
7     (CONS)
8     (SETVALUE 1)                        ; *TRANSL-BACKTRACE*
10    L10
10    (LOAD&PUSH 1)
11    (CALL1 2)                           ; TOPLEVEL-OPTIMIZE
13    (STORE 1)
14    (GETVALUE 0)                        ; *TRANSL-DEBUG*
16    (JMPIF L50)
18    (GETVALUE 0)                        ; *TRANSL-DEBUG*
20    (JMPIFNOT L28)
22    L22
22    (LOAD&PUSH 1)
23    (GETVALUE 1)                        ; *TRANSL-BACKTRACE*
25    (CONS)
26    (SETVALUE 1)                        ; *TRANSL-BACKTRACE*
28    L28
28    (LOAD 1)
29    (JMPIFATOM L61)
31    (LOAD 1)
32    (JMPIFCONSP L66)
34    (CONST&PUSH 5)                      ; "help"
35    (CALL1 6)                           ; BARFO
37    L37
37    (PUSH)
38    (GETVALUE 0)                        ; *TRANSL-DEBUG*
40    (JMPIFNOT L47)
42    (GETVALUE 1)                        ; *TRANSL-BACKTRACE*
44    (CDR)
45    (SETVALUE 1)                        ; *TRANSL-BACKTRACE*
47    L47
47    (POP)
48    (SKIP&RET 2)
50    L50
50    (GETVALUE 1)                        ; *TRANSL-BACKTRACE*
52    (CDR)
53    (SETVALUE 1)                        ; *TRANSL-BACKTRACE*
55    (GETVALUE 0)                        ; *TRANSL-DEBUG*
57    (JMPIFNOT L28)
59    (JMP L22)
61    L61
61    (LOAD&PUSH 1)
62    (CALL1 3)                           ; TRANSLATE-ATOM
64    (JMP L37)
66    L66
66    (LOAD&PUSH 1)
67    (CALL1 4)                           ; TRANSLATE-FORM
69    (JMP L37)


Disassembly of function #:|(DEFUN TRANSLATE-ATOM (FORM &AUX TEMP) ...)-85|
(CONST 0) = TRANSLATE-ATOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE-ATOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-ATOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE-ATOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE-ATOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE-ATOM
8     (SKIP&RET 1)


Disassembly of function TRANSLATE-ATOM
(CONST 0) = TR-CLASS
(CONST 1) = BOOLEAN-OBJECT-TABLE
(CONST 2) = ASSQ
(CONST 3) = $NUMER
(CONST 4) = MGET
(CONST 5) = $TR_NUMER
(CONST 6) = $FLOAT
(CONST 7) = IMPLIED-QUOTEP
(CONST 8) = $ANY
(CONST 9) = QUOTE
(CONST 10) = TBOUNDP
(CONST 11) = SPECIALP
(CONST 12) = TEVAL
(CONST 13) = VALUE-MODE
(CONST 14) = WARN-UNDEFINED-VARIABLE
(CONST 15) = $TRANSCOMPILE
(CONST 16) = SPECIALS
(CONST 17) = MEMQ
(CONST 18) = MODE-INIT-VALUE-TABLE
(CONST 19) = PUSH-DEFVAR
(CONST 20) = TRD-MSYMEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODE-INIT-VALUE-TABLE SPECIALS $TRANSCOMPILE $TR_NUMER BOOLEAN-OBJECT-TABLE)
writes special variable : (SPECIALS)
90 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 2)
2     (CALLS2&JMPIF 8 L49)                ; NUMBERP
5     (LOAD&PUSH 2)
6     (GETVALUE&PUSH 1)                   ; BOOLEAN-OBJECT-TABLE
8     (CALL2 2)                           ; ASSQ
10    (STORE 0)
11    (JMPIF L54)
13    (LOAD&PUSH 2)
14    (CONST&PUSH 3)                      ; $NUMER
15    (CALL2 4)                           ; MGET
17    (STORE 0)
18    (JMPIFNOT L24)
20    (GETVALUE 5)                        ; $TR_NUMER
22    (JMPIF L57)
24    L24
24    (LOAD&PUSH 2)
25    (CALL1 7)                           ; IMPLIED-QUOTEP
27    (STORE 0)
28    (JMPIF L61)
30    (LOAD&PUSH 2)
31    (CALL1&JMPIFNOT 10 L71)             ; TBOUNDP
34    (LOAD&PUSH 2)
35    (CALL1 11)                          ; SPECIALP
37    (LOAD&PUSH 2)
38    (CALL1 12)                          ; TEVAL
40    (STORE 2)
41    (PUSH)
42    (CALL1 13)                          ; VALUE-MODE
44    L44
44    (PUSH)
45    (LOAD 3)
46    L46
46    (CONS)
47    (SKIP&RET 3)
49    L49
49    (LOAD&PUSH 2)
50    (CALL1 0)                           ; TR-CLASS
52    (JMP L44)
54    L54
54    (CDR)
55    (SKIP&RET 3)
57    L57
57    (CONST&PUSH 6)                      ; $FLOAT
58    (LOAD 1)
59    (JMP L46)
61    L61
61    (CONST&PUSH 8)                      ; $ANY
62    (CONST&PUSH 9)                      ; QUOTE
63    (LOAD&PUSH 2)
64    (LIST 3)
66    (SKIP&RET 3)
68    L68
68    (CDR)
69    (JMP L109)
71    L71
71    (LOAD&PUSH 2)
72    (CALL1&JMPIF 11 L94)                ; SPECIALP
75    (LOAD&PUSH 2)
76    (CALL1 14)                          ; WARN-UNDEFINED-VARIABLE
78    (GETVALUE 15)                       ; $TRANSCOMPILE
80    (JMPIFNOT L94)
82    (LOAD&PUSH 2)
83    (GETVALUE&PUSH 16)                  ; SPECIALS
85    (CALL2&JMPIF 17 L94)                ; MEMQ
88    (LOAD&PUSH 2)
89    (GETVALUE 16)                       ; SPECIALS
91    (CONS)
92    (SETVALUE 16)                       ; SPECIALS
94    L94
94    (LOAD&PUSH 2)
95    (CALL1&PUSH 13)                     ; VALUE-MODE
97    (LOAD&PUSH 0)
98    (GETVALUE&PUSH 18)                  ; MODE-INIT-VALUE-TABLE
100   (CALL2&PUSH 2)                      ; ASSQ
102   (LOAD&JMPIF 0 L68)
105   (CONST&PUSH 9)                      ; QUOTE
106   (LOAD&PUSH 5)
107   (LIST 2)
109   L109
109   (STORE 0)
110   (LOAD&PUSH 4)
111   (LOAD&PUSH 1)
112   (CALL2 19)                          ; PUSH-DEFVAR
114   (LOAD&PUSH 1)
115   (CONST&PUSH 20)                     ; TRD-MSYMEVAL
116   (LOAD&PUSH 6)
117   (LOAD&PUSH 3)
118   (LIST 4)
120   (SKIP&RET 5)


Disassembly of function #:|(DEFUN TRANSLATE-FORM (FORM &AUX TEMP) ...)-86|
(CONST 0) = TRANSLATE-FORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE-FORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-FORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE-FORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE-FORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE-FORM
8     (SKIP&RET 1)


Disassembly of function TRANSLATE-FORM
(CONST 0) = MEVAL
(CONST 1) = $ANY
(CONST 2) = (MQAPPLY)
(CONST 3) = TRANSLATE
(CONST 4) = ARRAY
(CONST 5) = MEMQ
(CONST 6) = TR-ARRAYCALL
(CONST 7) = GET-LISP-FUN-TYPE
(CONST 8) = TR-LISP-FUNCTION-CALL
(CONST 9) = MACSYMA-SPECIAL-MACRO-P
(CONST 10) = ATTEMPT-TRANSLATE-RANDOM-MACRO-OP
(CONST 11) = MACSYMA-SPECIAL-OP-P
(CONST 12) = ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP
(CONST 13) = (NOUN OPERATORS)
(CONST 14) = GETL
(CONST 15) = TR-INFAMOUS-NOUN-FORM
(CONST 16) = TR-MACSYMA-USER-FUNCTION-CALL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
92 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&CAR&PUSH 2)
3     (JMPIFEQTO 0 L75)                   ; MEVAL
7     (LOAD 2)
8     (CAR)
9     (CAR)
10    (JMPIFCONSP L80)
13    (CONST&PUSH 4)                      ; ARRAY
14    (LOAD 3)
15    (CAR)
16    (CDR&PUSH)
17    (CALL2&JMPIF 5 L92)                 ; MEMQ
21    (LOAD 2)
22    (CAR)
23    (CAR&PUSH)
24    (CONST&PUSH 3)                      ; TRANSLATE
25    (PUSH-UNBOUND 1)
27    (CALLS2&STORE 132 0)                ; GET
30    (JMPIF L97)
33    (LOAD 2)
34    (CAR)
35    (CAR&PUSH)
36    (CALL1 7)                           ; GET-LISP-FUN-TYPE
38    (STORE 0)
39    (JMPIF L103)
41    (LOAD 2)
42    (CAR)
43    (CAR&PUSH)
44    (CALL1 9)                           ; MACSYMA-SPECIAL-MACRO-P
46    (STORE 0)
47    (JMPIF L109)
49    (LOAD 2)
50    (CAR)
51    (CAR&PUSH)
52    (CALL1 11)                          ; MACSYMA-SPECIAL-OP-P
54    (STORE 0)
55    (JMPIF L115)
57    (LOAD 2)
58    (CAR)
59    (CAR&PUSH)
60    (CONST&PUSH 13)                     ; (NOUN OPERATORS)
61    (CALL2&JMPIF 14 L121)               ; GETL
64    (LOAD 2)
65    (CAR)
66    (CAR&PUSH)
67    (LOAD&CDR&PUSH 3)
69    (LOAD&PUSH 4)
70    (CALL 3 16)                         ; TR-MACSYMA-USER-FUNCTION-CALL
73    (SKIP&RET 3)
75    L75
75    (CONST&PUSH 1)                      ; $ANY
76    (LOAD 3)
77    (CONS)
78    (SKIP&RET 3)
80    L80
80    (CONST&PUSH 2)                      ; (MQAPPLY)
81    (LOAD 3)
82    (CAR)
83    (CAR&PUSH)
84    (LOAD 4)
85    (CDR)
86    (LIST*&PUSH 2)
88    (CALL1 3)                           ; TRANSLATE
90    (SKIP&RET 3)
92    L92
92    (LOAD&PUSH 2)
93    (CALL1 6)                           ; TR-ARRAYCALL
95    (SKIP&RET 3)
97    L97
97    (PUSH)
98    (LOAD&PUSH 3)
99    (FUNCALL 1)
101   (SKIP&RET 3)
103   L103
103   (LOAD&PUSH 2)
104   (LOAD&PUSH 1)
105   (CALL2 8)                           ; TR-LISP-FUNCTION-CALL
107   (SKIP&RET 3)
109   L109
109   (LOAD&PUSH 2)
110   (LOAD&PUSH 1)
111   (CALL2 10)                          ; ATTEMPT-TRANSLATE-RANDOM-MACRO-OP
113   (SKIP&RET 3)
115   L115
115   (LOAD&PUSH 2)
116   (LOAD&PUSH 1)
117   (CALL2 12)                          ; ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP
119   (SKIP&RET 3)
121   L121
121   (LOAD&PUSH 2)
122   (CALL1 15)                          ; TR-INFAMOUS-NOUN-FORM
124   (SKIP&RET 3)


Disassembly of function #:|(DEFMVAR $TR_BOUND_FUNCTION_APPLYP T)-87-1|
(CONST 0) = $TR_BOUND_FUNCTION_APPLYP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TR_BOUND_FUNCTION_APPLYP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TR_BOUND_FUNCTION_APPLYP
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TR_BOUND_FUNCTION_APPLYP T)-87-2|
(CONST 0) = (SPECIAL $TR_BOUND_FUNCTION_APPLYP)
(CONST 1) = $TR_BOUND_FUNCTION_APPLYP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_BOUND_FUNCTION_APPLYP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_BOUND_FUNCTION_APPLYP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_BOUND_FUNCTION_APPLYP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $TR_BOUND_FUNCTION_APPLYP
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TR-MACSYMA-USER-FUNCTION-CALL (FUNCTION ARGS FORM) ...)-88|
(CONST 0) = TR-MACSYMA-USER-FUNCTION-CALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-MACSYMA-USER-FUNCTION-CALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-MACSYMA-USER-FUNCTION-CALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-MACSYMA-USER-FUNCTION-CALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-MACSYMA-USER-FUNCTION-CALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-MACSYMA-USER-FUNCTION-CALL
8     (SKIP&RET 1)


Disassembly of function TR-MACSYMA-USER-FUNCTION-CALL
(CONST 0) = $TR_FUNCTION_CALL_DEFAULT
(CONST 1) = $APPLY
(CONST 2) = ($APPLY)
(CONST 3) = (MLIST)
(CONST 4) = TRANSLATE
(CONST 5) = $EXPR
(CONST 6) = SUBR
(CONST 7) = TR-LISP-FUNCTION-CALL
(CONST 8) = $GENERAL
(CONST 9) = $TR_BOUND_FUNCTION_APPLYP
(CONST 10) = TBOUNDP
(CONST 11) = ($APPLY)
(CONST 12) = (MLIST)
(CONST 13) = "in the form "
(CONST 14) = "has been used as a function, yet is a bound variable"
(CONST 15) = "in this context. This code being translated as :"
(CONST 16) = TR-TELL
(CONST 17) = *UNTRANSLATED-FUNCTIONS-CALLED*
(CONST 18) = FUNCTION-MODE
(CONST 19) = MFUNCTION-CALL
(CONST 20) = TR-ARGS
(CONST 21) = CALL-AND-SIMP
(CONST 22) = WARN-MEVAL
(CONST 23) = MEVAL
(CONST 24) = QUOTE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(*UNTRANSLATED-FUNCTIONS-CALLED* $TR_BOUND_FUNCTION_APPLYP
 $TR_FUNCTION_CALL_DEFAULT)
writes special variable : (*UNTRANSLATED-FUNCTIONS-CALLED*)
78 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; $TR_FUNCTION_CALL_DEFAULT
2     (JMPIFEQTO 1 L32)                   ; $APPLY
5     (GETVALUE&PUSH 0)                   ; $TR_FUNCTION_CALL_DEFAULT
7     (JMPIFEQTO 5 L46)                   ; $EXPR
10    (GETVALUE&PUSH 0)                   ; $TR_FUNCTION_CALL_DEFAULT
12    (JMPIFEQTO 8 L73)                   ; $GENERAL
15    (LOAD&PUSH 1)
16    (CALL1 22)                          ; WARN-MEVAL
18    (LOAD 1)
19    (CAR)
20    (CAR&PUSH)
21    (CALL1&PUSH 18)                     ; FUNCTION-MODE
23    (CONST&PUSH 23)                     ; MEVAL
24    (CONST&PUSH 24)                     ; QUOTE
25    (LOAD&PUSH 4)
26    (LIST&PUSH 2)
28    (LIST 3)
30    (SKIP&RET 4)
32    L32
32    (CONST&PUSH 2)                      ; ($APPLY)
33    (LOAD 2)
34    (CAR)
35    (CAR&PUSH)
36    (CONST&PUSH 3)                      ; (MLIST)
37    (LOAD 4)
38    (CDR)
39    (CONS&PUSH)
40    (LIST&PUSH 3)
42    (CALL1 4)                           ; TRANSLATE
44    (SKIP&RET 4)
46    L46
46    (LOAD&PUSH 1)
47    (CONST&PUSH 6)                      ; SUBR
48    (CALL2 7)                           ; TR-LISP-FUNCTION-CALL
50    (SKIP&RET 4)
52    L52
52    (CONST&PUSH 11)                     ; ($APPLY)
53    (LOAD&PUSH 4)
54    (CONST&PUSH 12)                     ; (MLIST)
55    (LOAD 5)
56    (CONS&PUSH)
57    (LIST&PUSH 3)
59    (LOAD&PUSH 4)
60    (CONST&PUSH 13)                     ; "in the form "
61    (LOAD&PUSH 4)
62    (CONST&PUSH 14)                     ; "has been used as a function, yet is a bound variable"
63    (CONST&PUSH 15)                     ; "in this context. This code being translated as :"
64    (LOAD&PUSH 5)
65    (CALL 6 16)                         ; TR-TELL
68    (LOAD&PUSH 0)
69    (CALL1 4)                           ; TRANSLATE
71    (SKIP&RET 5)
73    L73
73    (GETVALUE 9)                        ; $TR_BOUND_FUNCTION_APPLYP
75    (JMPIFNOT L81)
77    (LOAD&PUSH 3)
78    (CALL1&JMPIF 10 L52)                ; TBOUNDP
81    L81
81    (LOAD 1)
82    (CAR)
83    (CAR&PUSH)
84    (GETVALUE&PUSH 17)                  ; *UNTRANSLATED-FUNCTIONS-CALLED*
86    (PUSH-UNBOUND 3)
88    (CALLS1 184)                        ; ADJOIN
90    (SETVALUE 17)                       ; *UNTRANSLATED-FUNCTIONS-CALLED*
92    (LOAD 1)
93    (CAR)
94    (CAR&PUSH)
95    (CALL1&PUSH 18)                     ; FUNCTION-MODE
97    (CONST&PUSH 19)                     ; MFUNCTION-CALL
98    (LOAD 3)
99    (CAR)
100   (CAR&PUSH)
101   (LOAD&PUSH 5)
102   (CALL1 20)                          ; TR-ARGS
104   (CONS&PUSH)
105   (CALL 3 21)                         ; CALL-AND-SIMP
108   (SKIP&RET 4)


Disassembly of function #:|(DEFUN ATTEMPT-TRANSLATE-RANDOM-MACRO-OP (FORM TYPEL &AUX ...) ...)-89|
(CONST 0) = ATTEMPT-TRANSLATE-RANDOM-MACRO-OP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATTEMPT-TRANSLATE-RANDOM-MACRO-OP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATTEMPT-TRANSLATE-RANDOM-MACRO-OP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATTEMPT-TRANSLATE-RANDOM-MACRO-OP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATTEMPT-TRANSLATE-RANDOM-MACRO-OP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATTEMPT-TRANSLATE-RANDOM-MACRO-OP
8     (SKIP&RET 1)


Disassembly of function ATTEMPT-TRANSLATE-RANDOM-MACRO-OP
(CONST 0) = TYPEL
(CONST 1) = WARN-FEXPR
(CONST 2) = TRANSLATE-ATOMS
(CONST 3) = $ANY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; TYPEL
3     (NIL&PUSH)
4     (LOAD&PUSH 6)
5     (CALL1 1)                           ; WARN-FEXPR
7     (LOAD&PUSH 6)
8     (CALL1 2)                           ; TRANSLATE-ATOMS
10    (STORE 0)
11    (PUSH)
12    (LOAD 1)
13    (CAR)
14    (CAR&PUSH)
15    (CALLS1 169)                        ; SYSTEM::%RPLACA
17    (CONST&PUSH 3)                      ; $ANY
18    (LOAD 1)
19    (CONS)
20    (SKIP 1)
22    (UNBIND1)
23    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP (FORM TYPEL) ...)-90|
(CONST 0) = ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP
8     (SKIP&RET 1)


Disassembly of function ATTEMPT-TRANSLATE-RANDOM-SPECIAL-OP
(CONST 0) = TYPEL
(CONST 1) = WARN-FEXPR
(CONST 2) = $ANY
(CONST 3) = MEVAL
(CONST 4) = QUOTE
(CONST 5) = TRANSLATE-ATOMS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; TYPEL
3     (LOAD&PUSH 5)
4     (CALL1 1)                           ; WARN-FEXPR
6     (CONST&PUSH 2)                      ; $ANY
7     (CONST&PUSH 3)                      ; MEVAL
8     (CONST&PUSH 4)                      ; QUOTE
9     (LOAD&PUSH 8)
10    (CALL1&PUSH 5)                      ; TRANSLATE-ATOMS
12    (LIST&PUSH 2)
14    (LIST 3)
16    (UNBIND1)
17    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TR-LISP-FUNCTION-CALL (FORM TYPE) ...)-91|
(CONST 0) = TR-LISP-FUNCTION-CALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-LISP-FUNCTION-CALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-LISP-FUNCTION-CALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-LISP-FUNCTION-CALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-LISP-FUNCTION-CALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-LISP-FUNCTION-CALL
8     (SKIP&RET 1)


Disassembly of function TR-LISP-FUNCTION-CALL
(CONST 0) = (SUBR LSUBR EXPR)
(CONST 1) = MEMQ
(CONST 2) = $TRANSCOMPILE
(CONST 3) = SUBR
(CONST 4) = EXPRS
(CONST 5) = LSUBR
(CONST 6) = LEXPRS
(CONST 7) = TRANSLATE
(CONST 8) = DCONVX
(CONST 9) = FEXPRS
(CONST 10) = DTRANSLATE
(CONST 11) = FUNCTION-MODE
(CONST 12) = CALL-AND-SIMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LEXPRS EXPRS FEXPRS $TRANSCOMPILE)
writes special variables : (LEXPRS EXPRS FEXPRS)
73 byte-code instructions:
0     (LOAD 2)
1     (CAR)
2     (CAR&PUSH)
3     (PUSH-NIL 2)
5     (LOAD&PUSH 4)
6     (CONST&PUSH 0)                      ; (SUBR LSUBR EXPR)
7     (CALL2&JMPIF 1 L59)                 ; MEMQ
10    (GETVALUE 2)                        ; $TRANSCOMPILE
12    (JMPIFNOT L26)
14    (LOAD&PUSH 2)
15    (GETVALUE&PUSH 9)                   ; FEXPRS
17    (CALL2&JMPIF 1 L26)                 ; MEMQ
20    (LOAD&PUSH 2)
21    (GETVALUE 9)                        ; FEXPRS
23    (CONS)
24    (SETVALUE 9)                        ; FEXPRS
26    L26
26    (CONST&PUSH 10)                     ; DTRANSLATE
27    (LOAD&CDR&PUSH 6)
29    (CALLSR 0 22)                       ; MAPCAR
32    L32
32    (STORE 0)
33    (LOAD&PUSH 2)
34    (CALL1 11)                          ; FUNCTION-MODE
36    (STORE 1)
37    (PUSH)
38    (LOAD&PUSH 3)
39    (LOAD&PUSH 2)
40    (CALL 3 12)                         ; CALL-AND-SIMP
43    (SKIP&RET 6)
45    L45
45    (LOAD&PUSH 2)
46    (GETVALUE&PUSH 4)                   ; EXPRS
48    (CALL2&JMPIF 1 L83)                 ; MEMQ
51    (LOAD&PUSH 2)
52    (GETVALUE 4)                        ; EXPRS
54    (CONS)
55    (SETVALUE 4)                        ; EXPRS
57    (JMP L83)
59    L59
59    (GETVALUE 2)                        ; $TRANSCOMPILE
61    (JMPIFNOT L83)
63    (LOAD&PUSH 4)
64    (JMPIFEQTO 3 L45)                   ; SUBR
67    (LOAD&PUSH 4)
68    (JMPIFNOTEQTO 5 L83)                ; LSUBR
71    (LOAD&PUSH 2)
72    (GETVALUE&PUSH 6)                   ; LEXPRS
74    (CALL2&JMPIF 1 L83)                 ; MEMQ
77    (LOAD&PUSH 2)
78    (GETVALUE 6)                        ; LEXPRS
80    (CONS)
81    (SETVALUE 6)                        ; LEXPRS
83    L83
83    (NIL&PUSH)
84    (LOAD&CDR&PUSH 6)
86    (JMP L101)
88    L88
88    (LOAD&CAR&PUSH 0)
90    (LOAD&PUSH 0)
91    (CALL1&PUSH 7)                      ; TRANSLATE
93    (CALL1&PUSH 8)                      ; DCONVX
95    (LOAD&CONS&STORE 2)
97    (SKIP 1)
99    (LOAD&CDR&STORE 0)
101   L101
101   (LOAD&PUSH 0)
102   (CALLS1&JMPIFNOT 146 L88)           ; ENDP
105   (SKIP 1)
107   (LOAD&PUSH 0)
108   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
110   (SKIP 1)
112   (JMP L32)


Disassembly of function #:|(DEFUN GET-LISP-FUN-TYPE (FUN &AUX TEMP) ...)-92|
(CONST 0) = GET-LISP-FUN-TYPE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GET-LISP-FUN-TYPE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GET-LISP-FUN-TYPE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GET-LISP-FUN-TYPE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GET-LISP-FUN-TYPE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GET-LISP-FUN-TYPE
8     (SKIP&RET 1)


Disassembly of function GET-LISP-FUN-TYPE
(CONST 0) = *LEXPR
(CONST 1) = LSUBR
(CONST 2) = *EXPR
(CONST 3) = SUBR
(CONST 4) = $FIXED_NUM_ARGS_FUNCTION
(CONST 5) = MGET
(CONST 6) = $VARIABLE_NUM_ARGS_FUNCTION
(CONST 7) = (EXPR SUBR LSUBR)
(CONST 8) = GETL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
37 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 2)
2     (CONST&PUSH 0)                      ; *LEXPR
3     (PUSH-UNBOUND 1)
5     (CALLS2&JMPIF 132 L35)              ; GET
8     (LOAD&PUSH 2)
9     (CONST&PUSH 2)                      ; *EXPR
10    (PUSH-UNBOUND 1)
12    (CALLS2&JMPIF 132 L38)              ; GET
15    (LOAD&PUSH 2)
16    (CONST&PUSH 4)                      ; $FIXED_NUM_ARGS_FUNCTION
17    (CALL2&JMPIF 5 L41)                 ; MGET
20    (LOAD&PUSH 2)
21    (CONST&PUSH 6)                      ; $VARIABLE_NUM_ARGS_FUNCTION
22    (CALL2&JMPIF 5 L44)                 ; MGET
25    (LOAD&PUSH 2)
26    (CONST&PUSH 7)                      ; (EXPR SUBR LSUBR)
27    (CALL2 8)                           ; GETL
29    (STORE 0)
30    (JMPIF L47)
32    (NIL)
33    (SKIP&RET 3)
35    L35
35    (CONST 1)                           ; LSUBR
36    (SKIP&RET 3)
38    L38
38    (CONST 3)                           ; SUBR
39    (SKIP&RET 3)
41    L41
41    (CONST 3)                           ; SUBR
42    (SKIP&RET 3)
44    L44
44    (CONST 1)                           ; LSUBR
45    (SKIP&RET 3)
47    L47
47    (CAR)
48    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TR-INFAMOUS-NOUN-FORM (FORM) ...)-93|
(CONST 0) = TR-INFAMOUS-NOUN-FORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-INFAMOUS-NOUN-FORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-INFAMOUS-NOUN-FORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-INFAMOUS-NOUN-FORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-INFAMOUS-NOUN-FORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-INFAMOUS-NOUN-FORM
8     (SKIP&RET 1)


Disassembly of function TR-INFAMOUS-NOUN-FORM
(CONST 0) = ARRAY
(CONST 1) = MEMQ
(CONST 2) = (ARRAY)
(CONST 3) = TR-ARGS
(CONST 4) = $ANY
(CONST 5) = SIMPLIFY
(CONST 6) = SYSTEM::BACKQUOTE
(CONST 7) = SYSTEM::UNQUOTE
(CONST 8) = LIST
(CONST 9) = QUOTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
35 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRAY
1     (LOAD&CAR&PUSH 2)
3     (CALL2&JMPIF 1 L39)                 ; MEMQ
6     (LOAD 1)
7     (CAR)
8     (CAR&PUSH)
9     (LIST 1)
11    L11
11    (PUSH)
12    (LOAD&CDR&PUSH 2)
14    (CALL1&PUSH 3)                      ; TR-ARGS
16    (CONST&PUSH 4)                      ; $ANY
17    (CONST&PUSH 5)                      ; SIMPLIFY
18    (CONST&PUSH 6)                      ; SYSTEM::BACKQUOTE
19    (LOAD&PUSH 4)
20    (CONST&PUSH 7)                      ; SYSTEM::UNQUOTE
21    (LOAD 5)
22    (CONS&PUSH)
23    (LIST&PUSH 2)
25    (CONST&PUSH 8)                      ; LIST
26    (CONST&PUSH 9)                      ; QUOTE
27    (LOAD&PUSH 7)
28    (LIST&PUSH 2)
30    (LOAD 6)
31    (LIST*&PUSH 2)
33    (LIST&PUSH 3)
35    (LIST 3)
37    (SKIP&RET 4)
39    L39
39    (LOAD 1)
40    (CAR)
41    (CAR&PUSH)
42    (CONST 2)                           ; (ARRAY)
43    (CONS)
44    (JMP L11)


Disassembly of function #:|(DEFUN IMPLIED-QUOTEP (ATOM) ...)-94|
(CONST 0) = IMPLIED-QUOTEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IMPLIED-QUOTEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IMPLIED-QUOTEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IMPLIED-QUOTEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IMPLIED-QUOTEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IMPLIED-QUOTEP
8     (SKIP&RET 1)


Disassembly of function IMPLIED-QUOTEP
(CONST 0) = IMPLIED-QUOTEP
(CONST 1) = 1
(CONST 2) = GETCHARN
(CONST 3) = #\&
(CONST 4) = &**
(CONST 5) = "~% `**' is obsolete, use `^' !!!"
(CONST 6) = TR-FORMAT
(CONST 7) = &^
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; IMPLIED-QUOTEP
2     (PUSH-UNBOUND 1)
4     (CALLS2&JMPIF 132 L20)              ; GET
7     (LOAD&PUSH 1)
8     (CONST&PUSH 1)                      ; 1
9     (CALL2&PUSH 2)                      ; GETCHARN
11    (CONST&PUSH 3)                      ; #\&
12    (CALLSR&JMPIFNOT 1 7 L29)           ; CHAR=
16    (LOAD&PUSH 1)
17    (JMPIFEQTO 4 L23)                   ; &**
20    L20
20    (LOAD 1)
21    (SKIP&RET 2)
23    L23
23    (CONST&PUSH 5)                      ; "~% `**' is obsolete, use `^' !!!"
24    (CALL1 6)                           ; TR-FORMAT
26    (CONST 7)                           ; &^
27    (SKIP&RET 2)
29    L29
29    (NIL)
30    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TRANSLATE-ATOMS (FORM) ...)-95|
(CONST 0) = TRANSLATE-ATOMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE-ATOMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-ATOMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE-ATOMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE-ATOMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE-ATOMS
8     (SKIP&RET 1)


Disassembly of function TRANSLATE-ATOMS
(CONST 0) = (T NIL)
(CONST 1) = MEMQ
(CONST 2) = TBOUNDP
(CONST 3) = $TRANSCOMPILE
(CONST 4) = SPECIALP
(CONST 5) = SPECIALS
(CONST 6) = MQUOTE
(CONST 7) = TRANSLATE-ATOMS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SPECIALS $TRANSCOMPILE)
writes special variable : (SPECIALS)
39 byte-code instructions:
0     (LOAD 1)
1     (JMPIFCONSP L45)
3     (LOAD&PUSH 1)
4     (CALLS2&JMPIF 8 L32)                ; NUMBERP
7     (LOAD&PUSH 1)
8     (CONST&PUSH 0)                      ; (T NIL)
9     (CALL2&JMPIF 1 L32)                 ; MEMQ
12    (LOAD&PUSH 1)
13    (CALL1&JMPIF 2 L35)                 ; TBOUNDP
16    (GETVALUE 3)                        ; $TRANSCOMPILE
18    (JMPIFNOT L32)
20    L20
20    (LOAD&PUSH 1)
21    (GETVALUE&PUSH 5)                   ; SPECIALS
23    (CALL2&JMPIF 1 L32)                 ; MEMQ
26    (LOAD&PUSH 1)
27    (GETVALUE 5)                        ; SPECIALS
29    (CONS)
30    (SETVALUE 5)                        ; SPECIALS
32    L32
32    (LOAD 1)
33    (SKIP&RET 2)
35    L35
35    (GETVALUE 3)                        ; $TRANSCOMPILE
37    (JMPIFNOT L32)
39    (LOAD&PUSH 1)
40    (CALL1&JMPIFNOT 4 L20)              ; SPECIALP
43    (JMP L32)
45    L45
45    (LOAD 1)
46    (CAR)
47    (CAR&PUSH)
48    (JMPIFEQTO 6 L32)                   ; MQUOTE
51    (LOAD&CAR&PUSH 1)
53    (CONST&PUSH 7)                      ; TRANSLATE-ATOMS
54    (LOAD&CDR&PUSH 3)
56    (CALLSR 0 22)                       ; MAPCAR
59    (CONS)
60    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TR-NOSIMPP (OP) ...)-96|
(CONST 0) = TR-NOSIMPP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-NOSIMPP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-NOSIMPP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-NOSIMPP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-NOSIMPP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-NOSIMPP
8     (SKIP&RET 1)


Disassembly of function TR-NOSIMPP
(CONST 0) = TR-NOSIMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L6)
3     (NIL)
4     (SKIP&RET 2)
6     L6
6     (LOAD&PUSH 1)
7     (CONST&PUSH 0)                      ; TR-NOSIMP
8     (PUSH-UNBOUND 1)
10    (CALLS2 132)                        ; GET
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CALL-AND-SIMP (MODE FUN ARGS) ...)-97|
(CONST 0) = CALL-AND-SIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CALL-AND-SIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CALL-AND-SIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CALL-AND-SIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CALL-AND-SIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CALL-AND-SIMP
8     (SKIP&RET 1)


Disassembly of function CALL-AND-SIMP
(CONST 0) = $ANY
(CONST 1) = TR-NOSIMPP
(CONST 2) = SIMPLIFY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 3)
1     (JMPIFNOTEQTO 0 L17)                ; $ANY
4     (LOAD&PUSH 2)
5     (CALL1&JMPIF 1 L17)                 ; TR-NOSIMPP
8     (LOAD&PUSH 3)
9     (CONST&PUSH 2)                      ; SIMPLIFY
10    (LOAD&PUSH 4)
11    (LOAD 4)
12    (CONS&PUSH)
13    (LIST 3)
15    (SKIP&RET 4)
17    L17
17    (LOAD&PUSH 3)
18    (LOAD&PUSH 3)
19    (LOAD 3)
20    (LIST* 2)
22    (SKIP&RET 4)


Disassembly of function #:|(DEF%TR $BIND_DURING_TRANSLATION (FORM) ...)-98-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR $BIND_DURING_TRANSLATION (FORM) ...)-98-2-1|>
(CONST 1) = $BIND_DURING_TRANSLATION
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR $BIND_DURING_TRANSLATION (FORM) ...)-98-2-1|>
1     (CONST&PUSH 1)                      ; $BIND_DURING_TRANSLATION
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $BIND_DURING_TRANSLATION (FORM) ...)-98-2-1|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR $BIND_DURING_TRANSLATION (FORM) ...)-98-2-1-1|>
(CONST 1) = APPLY-IN$BIND_DURING_TRANSLATION
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR $BIND_DURING_TRANSLATION (FORM) ...)-98-2-1-1|>
1     (LOAD&PUSH 2)
2     (CALL2 1)                           ; APPLY-IN$BIND_DURING_TRANSLATION
4     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $BIND_DURING_TRANSLATION (FORM) ...)-98-2-1-1|
(CONST 0) = (MPROGN)
(CONST 1) = TRANSLATE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MPROGN)
1     (LOAD 2)
2     (CDR)
3     (CDR)
4     (CONS&PUSH)
5     (CALL1 1)                           ; TRANSLATE
7     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DECLARE_TRANSLATED (FNS) ...)-99-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $DECLARE_TRANSLATED (FNS) ...)-99-2-1|>
(CONST 1) = $DECLARE_TRANSLATED
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $DECLARE_TRANSLATED (FNS) ...)-99-2-1|>
1     (CONST&PUSH 1)                      ; $DECLARE_TRANSLATED
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $DECLARE_TRANSLATED (FNS) ...)-99-2-1|
(CONST 0) = V
(CONST 1) = ONCE-TRANSLATED
(CONST 2) = "Declare_translated needs symbolic args"
(CONST 3) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
writes special variable : (V)
29 byte-code instructions:
0     (LOAD&CDR&STORE 1)
2     (NIL)
3     (BIND 0)                            ; V
5     (LOAD&PUSH 4)
6     (LOAD&JMPIFNOT 0 L26)
9     L9
9     (LOAD&CAR&PUSH 0)
11    (LOAD 0)
12    (SETVALUE 0)                        ; V
14    (STORE 0)
15    (CALLS2&JMPIF 6 L32)                ; SYMBOLP
18    (CONST&PUSH 2)                      ; "Declare_translated needs symbolic args"
19    (CALL1 3)                           ; MERROR
21    L21
21    (LOAD&CDR&STORE 0)
23    (LOAD&JMPIF 0 L9)
26    L26
26    (NIL)
27    (SKIP 1)
29    (UNBIND1)
30    (SKIP&RET 2)
32    L32
32    (GETVALUE&PUSH 0)                   ; V
34    (LOAD&PUSH 0)
35    (CONST&PUSH 1)                      ; ONCE-TRANSLATED
36    (T&PUSH)
37    (CALLS2 136)                        ; SYSTEM::%PUT
39    (SKIP 1)
41    (JMP L21)


Disassembly of function #:|(DEF%TR $DECLARE (FORM) ...)-100-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR $DECLARE (FORM) ...)-100-2-1|>
(CONST 1) = $DECLARE
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR $DECLARE (FORM) ...)-100-2-1|>
1     (CONST&PUSH 1)                      ; $DECLARE
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $DECLARE (FORM) ...)-100-2-1|
(CONST 0) = L
(CONST 1) = $SPECIAL
(CONST 2) = SPEC
(CONST 3) = $ANY
(CONST 4) = $DECLARE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
54 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (BIND 0)                            ; L
4     (NIL&PUSH)
5     (GETVALUE 0)                        ; L
7     (JMPIFNOT L39)
9     L9
9     (GETVALUE 0)                        ; L
11    (CDR)
12    (CAR&PUSH)
13    (JMPIFNOTEQTO 1 L54)                ; $SPECIAL
16    (GETVALUE 0)                        ; L
18    (CAR)
19    (JMPIFATOM L67)
21    (CONST&PUSH 2)                      ; SPEC
22    (GETVALUE 0)                        ; L
24    (CAR)
25    (CDR&PUSH)
26    (CALLSR 0 24)                       ; MAPC
29    L29
29    (GETVALUE 0)                        ; L
31    (CDR)
32    (CDR)
33    (SETVALUE 0)                        ; L
35    (GETVALUE 0)                        ; L
37    (JMPIF L9)
39    L39
39    (LOAD 0)
40    (JMPIFNOT1 L49)
42    (CONST&PUSH 3)                      ; $ANY
43    (CONST&PUSH 4)                      ; $DECLARE
44    (LOAD&PUSH 2)
45    (CALLS2 73)                         ; NREVERSE
47    (LIST* 2)
49    L49
49    (SKIP 1)
51    (UNBIND1)
52    (SKIP&RET 2)
54    L54
54    (GETVALUE 0)                        ; L
56    (CDR)
57    (CAR&PUSH)
58    (GETVALUE 0)                        ; L
60    (CAR&PUSH)
61    (LOAD 2)
62    (CONS)
63    (CONS)
64    (STORE 0)
65    (JMP L29)
67    L67
67    (GETVALUE 0)                        ; L
69    (CAR&PUSH)
70    (CALL1 2)                           ; SPEC
72    (JMP L29)


Disassembly of function #:|(DEFUN SPEC (VAR) ...)-101|
(CONST 0) = SPEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPEC
8     (SKIP&RET 1)


Disassembly of function SPEC
(CONST 0) = VAR
(CONST 1) = SPECIALS
(CONST 2) = MEMQ
(CONST 3) = SPECIAL
(CONST 4) = PUTPROP
(CONST 5) = TBIND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SPECIALS VAR)
writes special variable : (SPECIALS)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (GETVALUE&PUSH 1)                   ; SPECIALS
7     (CALL2&JMPIF 2 L17)                 ; MEMQ
10    (GETVALUE&PUSH 0)                   ; VAR
12    (GETVALUE 1)                        ; SPECIALS
14    (CONS)
15    (SETVALUE 1)                        ; SPECIALS
17    L17
17    (GETVALUE&PUSH 0)                   ; VAR
19    (T&PUSH)
20    (CONST&PUSH 3)                      ; SPECIAL
21    (CALL 3 4)                          ; PUTPROP
24    (GETVALUE&PUSH 0)                   ; VAR
26    (GETVALUE&PUSH 0)                   ; VAR
28    (CONST&PUSH 5)                      ; TBIND
29    (CALL 3 4)                          ; PUTPROP
32    (UNBIND1)
33    (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $EVAL_WHEN (FORM) ...)-102-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR $EVAL_WHEN (FORM) ...)-102-2-1|>
(CONST 1) = $EVAL_WHEN
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR $EVAL_WHEN (FORM) ...)-102-2-1|>
1     (CONST&PUSH 1)                      ; $EVAL_WHEN
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $EVAL_WHEN (FORM) ...)-102-2-1|
(CONST 0) = "EVAL_WHEN can only be used at top level in a file"
(CONST 1) = "it cannot be used inside an expression or function."
(CONST 2) = TR-TELL
(CONST 3) = TR-ABORT
(CONST 4) = ($ANY)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (TR-ABORT)
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; "EVAL_WHEN can only be used at top level in a file"
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; "it cannot be used inside an expression or function."
3     (CALL 3 2)                          ; TR-TELL
6     (T)
7     (SETVALUE 3)                        ; TR-ABORT
9     (CONST 4)                           ; ($ANY)
10    (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MDEFINE (FORM) ...)-103-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MDEFINE (FORM) ...)-103-2-1|>
(CONST 1) = MDEFINE
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MDEFINE (FORM) ...)-103-2-1|>
1     (CONST&PUSH 1)                      ; MDEFINE
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MDEFINE (FORM) ...)-103-2-1|
(CONST 0) = 
"A definition of the function ~:@M is given inside a program.~
   ~%This doesn't work well, try using LAMBDA expressions instead.~%"
(CONST 1) = TR-FORMAT
(CONST 2) = $ANY
(CONST 3) = MEVAL
(CONST 4) = QUOTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; "A definition of the function ~:@M is given inside a program.~
   ~%This doesn't work well, try using LAMBDA expressions instead.~%"
1     (LOAD 2)
2     (CDR)
3     (CAR)
4     (CAR)
5     (CAR&PUSH)
6     (CALL2 1)                           ; TR-FORMAT
8     (CONST&PUSH 2)                      ; $ANY
9     (CONST&PUSH 3)                      ; MEVAL
10    (CONST&PUSH 4)                      ; QUOTE
11    (LOAD&PUSH 4)
12    (LIST&PUSH 2)
14    (LIST 3)
16    (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MDEFMACRO (FORM) ...)-104-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MDEFMACRO (FORM) ...)-104-2-1|>
(CONST 1) = MDEFMACRO
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MDEFMACRO (FORM) ...)-104-2-1|>
1     (CONST&PUSH 1)                      ; MDEFMACRO
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MDEFMACRO (FORM) ...)-104-2-1|
(CONST 0) = 
"A definiton of a macro ~:@M is being given inside the~
	     ~%body of a function or expression. This probably isn't going~
	     ~%to work, local macro definitions are not supported.~%"
(CONST 1) = TR-FORMAT
(CONST 2) = MEVAL
(CONST 3) = $ANY
(CONST 4) = QUOTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; "A definiton of a macro ~:@M is being given inside the~
	     ~%body of a function or expression. This probably isn't going~
	     ~%to work, local macro definitions are not supported.~%"
1     (LOAD 2)
2     (CDR)
3     (CAR)
4     (CAR)
5     (CAR&PUSH)
6     (CALL2 1)                           ; TR-FORMAT
8     (LOAD&PUSH 1)
9     (CALL1 2)                           ; MEVAL
11    (CONST&PUSH 3)                      ; $ANY
12    (CONST&PUSH 2)                      ; MEVAL
13    (CONST&PUSH 4)                      ; QUOTE
14    (LOAD&PUSH 4)
15    (LIST&PUSH 2)
17    (LIST 3)
19    (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $LOCAL (FORM) ...)-105-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR $LOCAL (FORM) ...)-105-2-1|>
(CONST 1) = $LOCAL
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR $LOCAL (FORM) ...)-105-2-1|>
1     (CONST&PUSH 1)                      ; $LOCAL
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $LOCAL (FORM) ...)-105-2-1|
(CONST 0) = LOCAL
(CONST 1) = "Too many LOCAL statements in one block"
(CONST 2) = TR-FORMAT
(CONST 3) = TR-ABORT
(CONST 4) = 
"Local does not work well in translated code.~
              ~%Try to use value cell and the Use_fast_arrays:true
              ~%if this is for arrays.  For functions, local definitions are~
               ~%not advised so use lambda expression"
(CONST 5) = MLOCAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LOCAL)
writes special variables : (TR-ABORT LOCAL)
20 byte-code instructions:
0     (GETVALUE 0)                        ; LOCAL
2     (JMPIF L18)
4     (T)
5     (SETVALUE 0)                        ; LOCAL
7     L7
7     (CONST&PUSH 4)                      ; "Local does not work well in translated code.~
              ~%Try to use value cell and the Use_fast_arrays:true
              ~%if this is for arrays.  For functions, local definitions are~
               ~%not advised so use lambda expression"
8     (CALL1 2)                           ; TR-FORMAT
10    (NIL&PUSH)
11    (CONST&PUSH 5)                      ; MLOCAL
12    (LOAD 3)
13    (CDR)
14    (CONS)
15    (CONS)
16    (SKIP&RET 2)
18    L18
18    (CONST&PUSH 1)                      ; "Too many LOCAL statements in one block"
19    (CALL1 2)                           ; TR-FORMAT
21    (T)
22    (SETVALUE 3)                        ; TR-ABORT
24    (JMP L7)


Disassembly of function #:|(DEF%TR MQUOTE (FORM) ...)-106-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MQUOTE (FORM) ...)-106-2-1|>
(CONST 1) = MQUOTE
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MQUOTE (FORM) ...)-106-2-1|>
1     (CONST&PUSH 1)                      ; MQUOTE
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MQUOTE (FORM) ...)-106-2-1|
(CONST 0) = TR-CLASS
(CONST 1) = QUOTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR&PUSH)
3     (CALL1&PUSH 0)                      ; TR-CLASS
5     (CONST&PUSH 1)                      ; QUOTE
6     (LOAD 3)
7     (CDR)
8     (CAR&PUSH)
9     (LIST 3)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TR-LAMBDA (FORM &OPTIONAL # ...) ...)-107|
(CONST 0) = TR-LAMBDA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-LAMBDA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-LAMBDA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-LAMBDA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-LAMBDA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-LAMBDA
8     (SKIP&RET 1)


Disassembly of function TR-LAMBDA
(CONST 0) = TR-SEQ
(CONST 1) = MPARAMS
(CONST 2) = TBIND
(CONST 3) = MAKE-DECLARES
(CONST 4) = TR-LAMBDA-PUNT-ASSIGNS
(CONST 5) = L
(CONST 6) = VAR
(CONST 7) = ASSIGN
(CONST 8) = (ASSIGN-MODE-CHECK)
(CONST 9) = MEMQ
(CONST 10) = QUOTE
(CONST 11) = TEVAL
(CONST 12) = LAMBDA
(CONST 13) = TUNBINDS
(CONST 14) = TR-GENSYM
(CONST 15) = UNWIND-PROTECT
(CONST 16) = PROGN
(CONST 17) = DTRANSLATE
1 required argument
1 optional argument
Rest parameter
No keyword parameters
reads special variables: (VAR L TR-LAMBDA-PUNT-ASSIGNS)
writes special variable : (L)
185 byte-code instructions:
0     (JMPIFBOUNDP 2 L6)
3     (CONST&SYMBOL-FUNCTION&STORE 0 2)   ; TR-SEQ
6     L6
6     (LOAD 3)
7     (CDR)
8     (CAR&PUSH)
9     (CALL1&PUSH 1)                      ; MPARAMS
11    (NIL&PUSH)
12    (CONST&SYMBOL-FUNCTION&PUSH 2)      ; TBIND
14    (LOAD&PUSH 2)
15    (CALLSR 0 24)                       ; MAPC
18    (NIL&PUSH)
19    (LOAD&PUSH 5)
20    (LOAD 7)
21    (CDR)
22    (CDR&PUSH)
23    (LOAD 6)
24    (APPLY&PUSH 1)
26    (LOAD&PUSH 3)
27    (T&PUSH)
28    (CALL2&PUSH 3)                      ; MAKE-DECLARES
30    (LOAD&CAR&STORE 1 2)
33    (LOAD&CDR&STORE 1)
35    (GETVALUE 4)                        ; TR-LAMBDA-PUNT-ASSIGNS
37    (JMPIF L47)
39    (LOAD 4)
40    (BIND 5)                            ; L
42    (GETVALUE 5)                        ; L
44    (JMPIF L88)
46    L46
46    (UNBIND1)
47    L47
47    (LOAD&PUSH 2)
48    (CONST&PUSH 12)                     ; LAMBDA
49    (LOAD&PUSH 6)
50    (CALL1&PUSH 13)                     ; TUNBINDS
52    (LOAD&PUSH 3)
53    (LOAD&PUSH 7)
54    (LOAD&PUSH 6)
55    (CALLSR 2 34)                       ; APPEND
58    (LIST* 4)
60    (SKIP&RET 9)
62    L62
62    (LOAD&PUSH 0)
63    (CONST&PUSH 10)                     ; QUOTE
64    (GETVALUE&PUSH 6)                   ; VAR
66    (LIST&PUSH 2)
68    (GETVALUE&PUSH 6)                   ; VAR
70    (CALL1&PUSH 11)                     ; TEVAL
72    (LIST&PUSH 3)
74    (LOAD&CONS&STORE 10)
76    L76
76    (SKIP 1)
78    (UNBIND1)
79    (GETVALUE 5)                        ; L
81    (CDR)
82    (SETVALUE 5)                        ; L
84    (GETVALUE 5)                        ; L
86    (JMPIFNOT L46)
88    L88
88    (GETVALUE 5)                        ; L
90    (CAR)
91    (BIND 6)                            ; VAR
93    (GETVALUE&PUSH 6)                   ; VAR
95    (CONST&PUSH 7)                      ; ASSIGN
96    (PUSH-UNBOUND 1)
98    (CALLS2&PUSH 132)                   ; GET
100   (LOAD&JMPIFNOT 0 L76)
103   (PUSH)
104   (CONST&PUSH 8)                      ; (ASSIGN-MODE-CHECK)
105   (CALL2&JMPIF 9 L62)                 ; MEMQ
108   (SKIP 1)
110   (UNBIND 2)
112   (NIL&PUSH)
113   (LOAD&PUSH 5)
114   (JMP L127)
116   L116
116   (LOAD&CAR&PUSH 0)
118   (CALL0 14)                          ; TR-GENSYM
120   (PUSH)
121   (LOAD&CONS&STORE 2)
123   (SKIP 1)
125   (LOAD&CDR&STORE 0)
127   L127
127   (LOAD&PUSH 0)
128   (CALLS1&JMPIFNOT 146 L116)          ; ENDP
131   (SKIP 1)
133   (LOAD&PUSH 0)
134   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
137   (LOAD&PUSH 3)
138   (CONST&PUSH 12)                     ; LAMBDA
139   (LOAD&PUSH 2)
140   (CONST&PUSH 15)                     ; UNWIND-PROTECT
141   (CONST&PUSH 16)                     ; PROGN
142   (NIL&PUSH)
143   (LOAD&PUSH 11)
144   (LOAD&PUSH 7)
145   (JMP L191)
147   L147
147   (SKIP 2)
149   (JMP L203)
151   L151
151   (LOAD&CAR&PUSH 1)
153   (LOAD 1)
154   (BIND 6)                            ; VAR
156   (GETVALUE&PUSH 6)                   ; VAR
158   (CONST&PUSH 7)                      ; ASSIGN
159   (PUSH-UNBOUND 1)
161   (CALLS2&PUSH 132)                   ; GET
163   (LOAD&JMPIFNOT 0 L177)
166   (PUSH)
167   (CONST&PUSH 10)                     ; QUOTE
168   (GETVALUE&PUSH 6)                   ; VAR
170   (LIST&PUSH 2)
172   (LOAD&PUSH 6)
173   (LIST&PUSH 3)
175   (LIST 1)
177   L177
177   (SKIP 1)
179   (UNBIND1)
180   (PUSH)
181   (LOAD&PUSH 5)
182   (CALLS1&STORE 163 4)                ; NRECONC
185   (SKIP 2)
187   (LOAD&CDR&STORE 1)
189   (LOAD&CDR&STORE 0)
191   L191
191   (LOAD&PUSH 1)
192   (CALLS1&JMPIF 146 L147)             ; ENDP
195   (LOAD&CAR&PUSH 1)
197   (LOAD&PUSH 1)
198   (CALLS1&JMPIFNOT 146 L151)          ; ENDP
201   (SKIP 3)
203   L203
203   (LOAD&PUSH 0)
204   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
207   (CONST&PUSH 12)                     ; LAMBDA
208   (LOAD&PUSH 12)
209   (CALL1&PUSH 13)                     ; TUNBINDS
211   (LOAD&PUSH 9)
212   (LOAD 11)
213   (LIST*&PUSH 3)
215   (LOAD 7)
216   (CONS&PUSH)
217   (LIST&PUSH 1)
219   (CALLSR 2 34)                       ; APPEND
222   (CONS&PUSH)
223   (NIL&PUSH)
224   (LOAD&PUSH 11)
225   (JMP L268)
227   L227
227   (LOAD&CAR&PUSH 0)
229   (LOAD 0)
230   (BIND 6)                            ; VAR
232   (GETVALUE&PUSH 6)                   ; VAR
234   (CONST&PUSH 7)                      ; ASSIGN
235   (PUSH-UNBOUND 1)
237   (CALLS2&PUSH 132)                   ; GET
239   (LOAD&JMPIFNOT 0 L256)
242   (PUSH)
243   (CONST&PUSH 10)                     ; QUOTE
244   (GETVALUE&PUSH 6)                   ; VAR
246   (LIST&PUSH 2)
248   (GETVALUE&PUSH 6)                   ; VAR
250   (CALL1&PUSH 17)                     ; DTRANSLATE
252   (LIST&PUSH 3)
254   (LIST 1)
256   L256
256   (SKIP 1)
258   (UNBIND1)
259   (PUSH)
260   (LOAD&PUSH 3)
261   (CALLS1&STORE 163 2)                ; NRECONC
264   (SKIP 1)
266   (LOAD&CDR&STORE 0)
268   L268
268   (LOAD&PUSH 0)
269   (CALLS1&JMPIFNOT 146 L227)          ; ENDP
272   (SKIP 1)
274   (LOAD&PUSH 0)
275   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
277   (SKIP 1)
279   (LIST*&PUSH 2)
281   (LIST 4)
283   (SKIP&RET 10)


Disassembly of function #:|(DEFUN UPDATE-GLOBAL-DECLARES NIL ...)-108|
(CONST 0) = UPDATE-GLOBAL-DECLARES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UPDATE-GLOBAL-DECLARES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UPDATE-GLOBAL-DECLARES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UPDATE-GLOBAL-DECLARES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UPDATE-GLOBAL-DECLARES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UPDATE-GLOBAL-DECLARES
8     (SKIP&RET 1)


Disassembly of function UPDATE-GLOBAL-DECLARES
(CONST 0) = ARRAYS
(CONST 1) = L
(CONST 2) = ARRAY-MODE
(CONST 3) = $FIXNUM
(CONST 4) = ARRAY*
(CONST 5) = FIXNUM
(CONST 6) = (1)
(CONST 7) = DECLARES
(CONST 8) = MEMQ
(CONST 9) = $FLOAT
(CONST 10) = FLONUM
(CONST 11) = (1)
(CONST 12) = SPECIALS
(CONST 13) = SPECIAL
(CONST 14) = MAKE-DECLARES
(CONST 15) = LEXPRS
(CONST 16) = *LEXPR
(CONST 17) = FEXPRS
(CONST 18) = *FEXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FEXPRS LEXPRS SPECIALS DECLARES L ARRAYS)
writes special variables : (L DECLARES)
134 byte-code instructions:
0     (GETVALUE 0)                        ; ARRAYS
2     (BIND 1)                            ; L
4     (NIL&PUSH)
5     (GETVALUE 1)                        ; L
7     (JMPIFNOT L65)
9     L9
9     (GETVALUE 1)                        ; L
11    (CAR&PUSH)
12    (CALL1 2)                           ; ARRAY-MODE
14    (STORE 0)
15    (PUSH)
16    (JMPIFEQTO 3 L134)                  ; $FIXNUM
20    (LOAD&PUSH 0)
21    (JMPIFNOTEQTO 9 L56)                ; $FLOAT
24    (CONST&PUSH 4)                      ; ARRAY*
25    (CONST&PUSH 10)                     ; FLONUM
26    (GETVALUE 1)                        ; L
28    (CAR&PUSH)
29    (CONST 11)                          ; (1)
30    (CONS&PUSH)
31    (LIST&PUSH 2)
33    (LIST&PUSH 2)
35    (GETVALUE&PUSH 7)                   ; DECLARES
37    (CALL2&JMPIF 8 L56)                 ; MEMQ
40    (CONST&PUSH 4)                      ; ARRAY*
41    (CONST&PUSH 10)                     ; FLONUM
42    (GETVALUE 1)                        ; L
44    (CAR&PUSH)
45    (CONST 11)                          ; (1)
46    L46
46    (CONS&PUSH)
47    (LIST&PUSH 2)
49    (LIST&PUSH 2)
51    (GETVALUE 7)                        ; DECLARES
53    (CONS)
54    (SETVALUE 7)                        ; DECLARES
56    L56
56    (GETVALUE 1)                        ; L
58    (CDR)
59    (SETVALUE 1)                        ; L
61    (GETVALUE 1)                        ; L
63    (JMPIF L9)
65    L65
65    (SKIP 1)
67    (UNBIND1)
68    (GETVALUE 12)                       ; SPECIALS
70    (JMPIFNOT L82)
72    (CONST&PUSH 13)                     ; SPECIAL
73    (GETVALUE 12)                       ; SPECIALS
75    (CONS&PUSH)
76    (GETVALUE&PUSH 7)                   ; DECLARES
78    (CALL2&JMPIFNOT 8 L160)             ; MEMQ
82    L82
82    (GETVALUE 12)                       ; SPECIALS
84    (JMPIF L174)
87    L87
87    (GETVALUE 15)                       ; LEXPRS
89    (JMPIFNOT L103)
91    L91
91    (CONST&PUSH 16)                     ; *LEXPR
92    (GETVALUE&PUSH 15)                  ; LEXPRS
94    (CALLS2 72)                         ; REVERSE
96    (CONS&PUSH)
97    (GETVALUE&PUSH 7)                   ; DECLARES
99    (CALL2&JMPIFNOT 8 L194)             ; MEMQ
103   L103
103   (GETVALUE 17)                       ; FEXPRS
105   (JMPIFNOT1 L212)
108   L108
108   (CONST&PUSH 18)                     ; *FEXPR
109   (GETVALUE&PUSH 17)                  ; FEXPRS
111   (CALLS2 72)                         ; REVERSE
113   (CONS&PUSH)
114   (GETVALUE&PUSH 7)                   ; DECLARES
116   (CALL2 8)                           ; MEMQ
118   (JMPIF1 L212)
121   (CONST&PUSH 18)                     ; *FEXPR
122   (GETVALUE&PUSH 17)                  ; FEXPRS
124   (CALLS2 72)                         ; REVERSE
126   (CONS&PUSH)
127   (GETVALUE 7)                        ; DECLARES
129   (CONS)
130   (SETVALUE 7)                        ; DECLARES
132   (SKIP&RET 1)
134   L134
134   (CONST&PUSH 4)                      ; ARRAY*
135   (CONST&PUSH 5)                      ; FIXNUM
136   (GETVALUE 1)                        ; L
138   (CAR&PUSH)
139   (CONST 6)                           ; (1)
140   (CONS&PUSH)
141   (LIST&PUSH 2)
143   (LIST&PUSH 2)
145   (GETVALUE&PUSH 7)                   ; DECLARES
147   (CALL2&JMPIF 8 L56)                 ; MEMQ
151   (CONST&PUSH 4)                      ; ARRAY*
152   (CONST&PUSH 5)                      ; FIXNUM
153   (GETVALUE 1)                        ; L
155   (CAR&PUSH)
156   (CONST 6)                           ; (1)
157   (JMP L46)
160   L160
160   (CONST&PUSH 13)                     ; SPECIAL
161   (GETVALUE 12)                       ; SPECIALS
163   (CONS&PUSH)
164   (GETVALUE 7)                        ; DECLARES
166   (CONS)
167   (SETVALUE 7)                        ; DECLARES
169   (GETVALUE 12)                       ; SPECIALS
171   (JMPIFNOT L87)
174   L174
174   (PUSH)
175   (NIL&PUSH)
176   (CALL2 14)                          ; MAKE-DECLARES
178   (CDR&PUSH)
179   (GETVALUE&PUSH 7)                   ; DECLARES
181   (CALLSR 2 35)                       ; NCONC
184   (SETVALUE 7)                        ; DECLARES
186   (GETVALUE 15)                       ; LEXPRS
188   (JMPIFNOT L103)
191   (JMP L91)
194   L194
194   (CONST&PUSH 16)                     ; *LEXPR
195   (GETVALUE&PUSH 15)                  ; LEXPRS
197   (CALLS2 72)                         ; REVERSE
199   (CONS&PUSH)
200   (GETVALUE 7)                        ; DECLARES
202   (CONS)
203   (SETVALUE 7)                        ; DECLARES
205   (GETVALUE 17)                       ; FEXPRS
207   (JMPIFNOT1 L212)
209   (JMP L108)
212   L212
212   (SKIP&RET 1)


Disassembly of function #:|(DEFUN MAKE-DECLARES (VARLIST LOCALP &AUX ...) ...)-109|
(CONST 0) = MAKE-DECLARES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-DECLARES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-DECLARES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-DECLARES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-DECLARES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-DECLARES
8     (SKIP&RET 1)


Disassembly of function MAKE-DECLARES
(CONST 0) = VARLIST
(CONST 1) = $TRANSCOMPILE
(CONST 2) = L
(CONST 3) = VAR
(CONST 4) = SPECIAL
(CONST 5) = TEVAL
(CONST 6) = VALUE-MODE
(CONST 7) = $FIXNUM
(CONST 8) = MEMQ
(CONST 9) = $FLOAT
(CONST 10) = FIXNUM
(CONST 11) = FLONUM
(CONST 12) = DECLARE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR L VARLIST $TRANSCOMPILE)
writes special variables : (L VAR)
110 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VARLIST
3     (PUSH-NIL 4)
5     (GETVALUE 1)                        ; $TRANSCOMPILE
7     (JMPIFNOT1 L117)
10    (GETVALUE 0)                        ; VARLIST
12    (BIND 2)                            ; L
14    (NIL&PUSH)
15    (NIL)
16    (BIND 3)                            ; VAR
18    (GETVALUE 2)                        ; L
20    (JMPIFNOT L77)
22    L22
22    (LOAD&JMPIFNOT 15 L34)
25    (GETVALUE 2)                        ; L
27    (CAR&PUSH)
28    (CONST&PUSH 4)                      ; SPECIAL
29    (PUSH-UNBOUND 1)
31    (CALLS2&JMPIF 132 L68)              ; GET
34    L34
34    (GETVALUE 2)                        ; L
36    (CAR&PUSH)
37    (CALL1 5)                           ; TEVAL
39    (SETVALUE 3)                        ; VAR
41    (PUSH)
42    (CALL1 6)                           ; VALUE-MODE
44    (STORE 3)
45    (GETVALUE&PUSH 3)                   ; VAR
47    (LOAD&CONS&STORE 7)
49    (LOAD&PUSH 3)
50    (JMPIFEQTO 7 L122)                  ; $FIXNUM
54    (LOAD&PUSH 3)
55    (JMPIFNOTEQTO 9 L68)                ; $FLOAT
58    (GETVALUE&PUSH 3)                   ; VAR
60    (LOAD&PUSH 9)
61    (CALL2&JMPIF 8 L68)                 ; MEMQ
64    (GETVALUE&PUSH 3)                   ; VAR
66    (LOAD&CONS&STORE 8)
68    L68
68    (GETVALUE 2)                        ; L
70    (CDR)
71    (SETVALUE 2)                        ; L
73    (GETVALUE 2)                        ; L
75    (JMPIF L22)
77    L77
77    (UNBIND1)
78    (SKIP 1)
80    (UNBIND1)
81    (LOAD&JMPIFNOT 2 L91)
84    (CONST&PUSH 10)                     ; FIXNUM
85    (LOAD 3)
86    (CONS&PUSH)
87    (LOAD&PUSH 4)
88    (CALL2&JMPIFNOT 8 L135)             ; MEMQ
91    L91
91    (LOAD&JMPIFNOT 1 L101)
94    L94
94    (CONST&PUSH 11)                     ; FLONUM
95    (LOAD 2)
96    (CONS&PUSH)
97    (LOAD&PUSH 4)
98    (CALL2&JMPIFNOT 8 L145)             ; MEMQ
101   L101
101   (LOAD&JMPIFNOT 0 L111)
104   L104
104   (CONST&PUSH 4)                      ; SPECIAL
105   (LOAD 1)
106   (CONS&PUSH)
107   (LOAD&PUSH 4)
108   (CALL2&JMPIFNOT 8 L155)             ; MEMQ
111   L111
111   (LOAD 3)
112   (JMPIFNOT1 L117)
114   L114
114   (CONST&PUSH 12)                     ; DECLARE
115   (LOAD 4)
116   (CONS)
117   L117
117   (SKIP 4)
119   (UNBIND1)
120   (SKIP&RET 3)
122   L122
122   (GETVALUE&PUSH 3)                   ; VAR
124   (LOAD&PUSH 10)
125   (CALL2&JMPIF 8 L68)                 ; MEMQ
128   (GETVALUE&PUSH 3)                   ; VAR
130   (LOAD&CONS&STORE 9)
132   (JMP L68)
135   L135
135   (CONST&PUSH 10)                     ; FIXNUM
136   (LOAD 3)
137   (CONS&PUSH)
138   (LOAD&CONS&STORE 3)
140   (LOAD&JMPIFNOT 1 L101)
143   (JMP L94)
145   L145
145   (CONST&PUSH 11)                     ; FLONUM
146   (LOAD 2)
147   (CONS&PUSH)
148   (LOAD&CONS&STORE 3)
150   (LOAD&JMPIFNOT 0 L111)
153   (JMP L104)
155   L155
155   (CONST&PUSH 4)                      ; SPECIAL
156   (LOAD 1)
157   (CONS&PUSH)
158   (LOAD&CONS&STORE 3)
160   (LOAD 3)
161   (JMPIFNOT1 L117)
163   (JMP L114)


Disassembly of function #:|(DEF%TR DOLIST (FORM) ...)-110-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR DOLIST (FORM) ...)-110-2-1|>
(CONST 1) = DOLIST
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR DOLIST (FORM) ...)-110-2-1|>
1     (CONST&PUSH 1)                      ; DOLIST
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR DOLIST (FORM) ...)-110-2-1|
(CONST 0) = (MPROGN)
(CONST 1) = TRANSLATE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MPROGN)
1     (LOAD 2)
2     (CDR)
3     (CONS&PUSH)
4     (CALL1 1)                           ; TRANSLATE
6     (SKIP&RET 2)


Disassembly of function #:|(DEFUN TR-SEQ (L) ...)-111|
(CONST 0) = TR-SEQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-SEQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-SEQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-SEQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-SEQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-SEQ
8     (SKIP&RET 1)


Disassembly of function TR-SEQ
(CONST 0) = L
(CONST 1) = TRANSLATE
(CONST 2) = EXP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP L)
writes special variable : (L)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (PUSH-NIL 2)
5     (GETVALUE 0)                        ; L
7     (JMPIFNOT L35)
9     L9
9     (GETVALUE 0)                        ; L
11    (CAR&PUSH)
12    (GETVALUE 0)                        ; L
14    (CDR)
15    (SETVALUE 0)                        ; L
17    (CALL1 1)                           ; TRANSLATE
19    (BIND 2)                            ; EXP
21    (GETVALUE 2)                        ; EXP
23    (CAR)
24    (STORE 4)
25    (GETVALUE 2)                        ; EXP
27    (CDR&PUSH)
28    (LOAD&CONS&STORE 3)
30    (UNBIND1)
31    (GETVALUE 0)                        ; L
33    (JMPIF L9)
35    L35
35    (LOAD&PUSH 1)
36    (LOAD&PUSH 1)
37    (CALLS2 73)                         ; NREVERSE
39    (CONS)
40    (SKIP 2)
42    (UNBIND1)
43    (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MPROGN (FORM) ...)-112-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MPROGN (FORM) ...)-112-2-1|>
(CONST 1) = MPROGN
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MPROGN (FORM) ...)-112-2-1|>
1     (CONST&PUSH 1)                      ; MPROGN
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MPROGN (FORM) ...)-112-2-1|
(CONST 0) = TR-SEQ
(CONST 1) = PROGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (CALL1 0)                           ; TR-SEQ
4     (STORE 1)
5     (CAR&PUSH)
6     (CONST&PUSH 1)                      ; PROGN
7     (LOAD 3)
8     (CDR)
9     (CONS)
10    (CONS)
11    (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MPROG (FORM) ...)-113-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MPROG (FORM) ...)-113-2-1|>
(CONST 1) = MPROG
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MPROG (FORM) ...)-113-2-1|>
1     (CONST&PUSH 1)                      ; MPROG
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MPROG (FORM) ...)-113-2-1|
(CONST 0) = $LISTP
(CONST 1) = "A BLOCK with no body: ~:M"
(CONST 2) = TR-FORMAT
(CONST 3) = (((MQUOTE) $DONE))
(CONST 4) = TRANSLATE
(CONST 5) = (LAMBDA)
(CONST 6) = (MLIST)
(CONST 7) = TR-MPROG-BODY
(CONST 8) = TR-LAMBDA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
97 byte-code instructions:
0     (PUSH-NIL 3)
2     (LOAD 4)
3     (CDR)
4     (CAR&PUSH)
5     (CALL1&JMPIF 0 L26)                 ; $LISTP
8     (NIL&STORE 2)
10    (LOAD 4)
11    L11
11    (CDR)
12    (STORE 1)
13    (LOAD&JMPIF 1 L22)
16    (CONST&PUSH 1)                      ; "A BLOCK with no body: ~:M"
17    (LOAD&PUSH 5)
18    (CALL2 2)                           ; TR-FORMAT
20    (CONST 3)                           ; (((MQUOTE) $DONE))
21    (STORE 1)
22    L22
22    (NIL&PUSH)
23    (LOAD&PUSH 3)
24    (JMP L56)
26    L26
26    (LOAD 4)
27    (CDR)
28    (CAR)
29    (CDR)
30    (STORE 2)
31    (LOAD 4)
32    (CDR)
33    (JMP L11)
35    L35
35    (LOAD 0)
36    (JMP L49)
38    L38
38    (LOAD&CAR&PUSH 0)
40    (LOAD 0)
41    (JMPIFATOM L35)
43    (LOAD 0)
44    (CDR)
45    (CDR)
46    (CAR&PUSH)
47    (CALL1 4)                           ; TRANSLATE
49    L49
49    (PUSH)
50    (LOAD&CONS&STORE 2)
52    (SKIP 1)
54    (LOAD&CDR&STORE 0)
56    L56
56    (LOAD&PUSH 0)
57    (CALLS1&JMPIFNOT 146 L38)           ; ENDP
60    (SKIP 1)
62    (LOAD&PUSH 0)
63    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
65    (SKIP 1)
67    (STORE 0)
68    (NIL&PUSH)
69    (LOAD&PUSH 3)
70    (JMP L90)
72    L72
72    (LOAD 0)
73    (JMP L83)
75    L75
75    (LOAD&CAR&PUSH 0)
77    (LOAD 0)
78    (JMPIFATOM L72)
80    (LOAD 0)
81    (CDR)
82    (CAR)
83    L83
83    (PUSH)
84    (LOAD&CONS&STORE 2)
86    (SKIP 1)
88    (LOAD&CDR&STORE 0)
90    L90
90    (LOAD&PUSH 0)
91    (CALLS1&JMPIFNOT 146 L75)           ; ENDP
94    (SKIP 1)
96    (LOAD&PUSH 0)
97    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
99    (SKIP 1)
101   (STORE 2)
102   (CONST&PUSH 5)                      ; (LAMBDA)
103   (CONST&PUSH 6)                      ; (MLIST)
104   (LOAD 4)
105   (CONS&PUSH)
106   (LOAD 3)
107   (LIST*&PUSH 2)
109   (CONST&SYMBOL-FUNCTION&PUSH 7)      ; TR-MPROG-BODY
111   (LOAD&PUSH 2)
112   (LOAD&PUSH 5)
113   (CALL 4 8)                          ; TR-LAMBDA
116   (STORE 4)
117   (CAR&PUSH)
118   (LOAD&CDR&PUSH 5)
120   (LOAD 2)
121   (CONS)
122   (CONS)
123   (SKIP&RET 5)


Disassembly of function #:|(DEFUN TR-MPROG-BODY (BODY VAL-LIST ARGLIST ...) ...)-114|
(CONST 0) = TR-MPROG-BODY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-MPROG-BODY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-MPROG-BODY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-MPROG-BODY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-MPROG-BODY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-MPROG-BODY
8     (SKIP&RET 1)


Disassembly of function TR-MPROG-BODY
(CONST 0) = INSIDE-MPROG
(CONST 1) = RETURN-MODE
(CONST 2) = NEED-PROG?
(CONST 3) = RETURNS
(CONST 4) = LOCAL
(CONST 5) = L
(CONST 6) = TRANSLATE
(CONST 7) = *UNION-MODE
(CONST 8) = RETURN
(CONST 9) = DTRANSLATE
(CONST 10) = VALUE-MODE
(CONST 11) = MODE-INIT-VALUE-TABLE
(CONST 12) = ASSQ
(CONST 13) = QUOTE
(CONST 14) = "IN a BLOCK statement"
(CONST 15) = WARN-MODE
(CONST 16) = PROG
(CONST 17) = ZL-DELETE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODE-INIT-VALUE-TABLE NEED-PROG? RETURN-MODE L)
writes special variables : (RETURN-MODE L)
113 byte-code instructions:
0     (T)
1     (BIND 0)                            ; INSIDE-MPROG
3     (NIL)
4     (BIND 1)                            ; RETURN-MODE
6     (NIL)
7     (BIND 2)                            ; NEED-PROG?
9     (NIL)
10    (BIND 3)                            ; RETURNS
12    (NIL)
13    (BIND 4)                            ; LOCAL
15    (NIL)
16    (BIND 5)                            ; L
18    (LOAD&JMPIFNOT 21 L47)
21    L21
21    (LOAD&CAR&PUSH 21)
23    (LOAD&CDR&STORE 22)
25    (LOAD&JMPIFNOT 22 L52)
28    (LOAD&PUSH 0)
29    (CALLS2&JMPIF 6 L36)                ; SYMBOLP
32    (LOAD&PUSH 0)
33    (CALL1 9)                           ; DTRANSLATE
35    (STORE 0)
36    L36
36    (LOAD&PUSH 0)
37    (GETVALUE 5)                        ; L
39    (CONS)
40    (SETVALUE 5)                        ; L
42    (SKIP 1)
44    (LOAD&JMPIF 21 L21)
47    L47
47    (LOAD&PUSH 20)
48    (LOAD&PUSH 20)
49    (JMP L144)
52    L52
52    (LOAD&PUSH 0)
53    (CALL1 6)                           ; TRANSLATE
55    (STORE 0)
56    (CAR&PUSH)
57    (GETVALUE&PUSH 1)                   ; RETURN-MODE
59    (CALL2 7)                           ; *UNION-MODE
61    (SETVALUE 1)                        ; RETURN-MODE
63    (LOAD&CDR&STORE 0)
65    (GETVALUE 2)                        ; NEED-PROG?
67    (JMPIFNOT L36)
69    (LOAD 0)
70    (JMPIFATOM L77)
72    (LOAD&CAR&PUSH 0)
74    (JMPIFEQTO 8 L36)                   ; RETURN
77    L77
77    (CONST&PUSH 8)                      ; RETURN
78    (LOAD&PUSH 1)
79    (LIST 2)
81    (STORE 0)
82    (JMP L36)
84    L84
84    (LOAD&PUSH 1)
85    (LOAD&CAR&PUSH 1)
87    (CALL1&PUSH 10)                     ; VALUE-MODE
89    (GETVALUE&PUSH 11)                  ; MODE-INIT-VALUE-TABLE
91    (CALL2 12)                          ; ASSQ
93    (CDR)
94    (JMPIF L137)
96    (CONST&PUSH 13)                     ; QUOTE
97    (LOAD&CAR&PUSH 2)
99    (LIST 2)
101   (JMP L137)
103   L103
103   (CONST&PUSH 16)                     ; PROG
104   (PUSH-NIL 2)
106   (GETVALUE&PUSH 5)                   ; L
108   (CALL2 17)                          ; ZL-DELETE
110   (LIST*&PUSH 2)
112   (LIST 1)
114   (JMP L168)
116   L116
116   (LOAD 1)
117   (CAR)
118   (JMPIFATOM L84)
120   (LOAD&CAR&PUSH 0)
122   (LOAD&CAR&PUSH 1)
124   (CALL1&PUSH 10)                     ; VALUE-MODE
126   (LOAD 3)
127   (CAR)
128   (CAR&PUSH)
129   (CONST&PUSH 14)                     ; "IN a BLOCK statement"
130   (CALL 4 15)                         ; WARN-MODE
133   (LOAD&PUSH 1)
134   (LOAD 2)
135   (CAR)
136   (CDR)
137   L137
137   (PUSH)
138   (CALLS1 168)                        ; RPLACA
140   (LOAD&CDR&STORE 1)
142   (LOAD&CDR&STORE 0)
144   L144
144   (LOAD&PUSH 1)
145   (CALLS1&JMPIF 146 L152)             ; ENDP
148   (LOAD&PUSH 0)
149   (CALLS1&JMPIFNOT 146 L116)          ; ENDP
152   L152
152   (SKIP 2)
154   (GETVALUE&PUSH 5)                   ; L
156   (CALLS2 73)                         ; NREVERSE
158   (SETVALUE 5)                        ; L
160   (GETVALUE&PUSH 1)                   ; RETURN-MODE
162   (GETVALUE 2)                        ; NEED-PROG?
164   (JMPIF L103)
166   (GETVALUE 5)                        ; L
168   L168
168   (CONS)
169   (UNBIND 6)
171   (SKIP&RET 4)


Disassembly of function #:|(DEF%TR MRETURN (FORM) ...)-115-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MRETURN (FORM) ...)-115-2-1|>
(CONST 1) = MRETURN
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MRETURN (FORM) ...)-115-2-1|>
1     (CONST&PUSH 1)                      ; MRETURN
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MRETURN (FORM) ...)-115-2-1|
(CONST 0) = INSIDE-MPROG
(CONST 1) = "RETURN found not inside a BLOCK DO: ~%~:M"
(CONST 2) = TR-FORMAT
(CONST 3) = NEED-PROG?
(CONST 4) = TRANSLATE
(CONST 5) = RETURN-MODE
(CONST 6) = *UNION-MODE
(CONST 7) = RETURN
(CONST 8) = RETURNS
(CONST 9) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RETURNS RETURN-MODE INSIDE-MPROG)
writes special variables : (RETURNS RETURN-MODE NEED-PROG?)
36 byte-code instructions:
0     (GETVALUE 0)                        ; INSIDE-MPROG
2     (JMPIF L8)
4     (CONST&PUSH 1)                      ; "RETURN found not inside a BLOCK DO: ~%~:M"
5     (LOAD&PUSH 2)
6     (CALL2 2)                           ; TR-FORMAT
8     L8
8     (T)
9     (SETVALUE 3)                        ; NEED-PROG?
11    (LOAD 1)
12    (CDR)
13    (CAR&PUSH)
14    (CALL1 4)                           ; TRANSLATE
16    (STORE 1)
17    (GETVALUE 5)                        ; RETURN-MODE
19    (JMPIF L42)
21    (LOAD 1)
22    (CAR)
23    L23
23    (SETVALUE 5)                        ; RETURN-MODE
25    (CONST&PUSH 7)                      ; RETURN
26    (LOAD&CDR&PUSH 2)
28    (LIST 2)
30    (STORE 1)
31    (PUSH)
32    (GETVALUE 8)                        ; RETURNS
34    (CONS)
35    (SETVALUE 8)                        ; RETURNS
37    (CONST&PUSH 9)                      ; $ANY
38    (LOAD 2)
39    (CONS)
40    (SKIP&RET 2)
42    L42
42    (LOAD&CAR&PUSH 1)
44    (GETVALUE&PUSH 5)                   ; RETURN-MODE
46    (CALL2 6)                           ; *UNION-MODE
48    (JMP L23)


Disassembly of function #:|(DEF%TR MGO (FORM) ...)-116-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MGO (FORM) ...)-116-2-1|>
(CONST 1) = MGO
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MGO (FORM) ...)-116-2-1|>
1     (CONST&PUSH 1)                      ; MGO
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MGO (FORM) ...)-116-2-1|
(CONST 0) = INSIDE-MPROG
(CONST 1) = "~%GO found not inside a BLOCK or DO. ~%~:M"
(CONST 2) = TR-FORMAT
(CONST 3) = "~%GO TAG in form not symbolic.~%~:M"
(CONST 4) = NEED-PROG?
(CONST 5) = $ANY
(CONST 6) = GO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (INSIDE-MPROG)
writes special variable : (NEED-PROG?)
23 byte-code instructions:
0     (GETVALUE 0)                        ; INSIDE-MPROG
2     (JMPIF L8)
4     (CONST&PUSH 1)                      ; "~%GO found not inside a BLOCK or DO. ~%~:M"
5     (LOAD&PUSH 2)
6     (CALL2 2)                           ; TR-FORMAT
8     L8
8     (LOAD 1)
9     (CDR)
10    (CAR&PUSH)
11    (CALLS2&JMPIF 6 L18)                ; SYMBOLP
14    (CONST&PUSH 3)                      ; "~%GO TAG in form not symbolic.~%~:M"
15    (LOAD&PUSH 2)
16    (CALL2 2)                           ; TR-FORMAT
18    L18
18    (T)
19    (SETVALUE 4)                        ; NEED-PROG?
21    (CONST&PUSH 5)                      ; $ANY
22    (CONST&PUSH 6)                      ; GO
23    (LOAD 3)
24    (CDR)
25    (CAR&PUSH)
26    (LIST 3)
28    (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MQAPPLY (FORM) ...)-117-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MQAPPLY (FORM) ...)-117-2-1|>
(CONST 1) = MQAPPLY
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MQAPPLY (FORM) ...)-117-2-1|>
1     (CONST&PUSH 1)                      ; MQAPPLY
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MQAPPLY (FORM) ...)-117-2-1|
(CONST 0) = ARRAY
(CONST 1) = MEMQ
(CONST 2) = ARYP
(CONST 3) = FN
(CONST 4) = *TRANSLATION-MSGS-FILES*
(CONST 5) = "~%Illegal mqapply form:~%~:M"
(CONST 6) = MFORMAT
(CONST 7) = MQUOTE
(CONST 8) = $ANY
(CONST 9) = LIST
(CONST 10) = QUOTE
(CONST 11) = TR-ARGS
(CONST 12) = LAMBDA
(CONST 13) = BOGUS
(CONST 14) = MQUOTEP
(CONST 15) = $LISTP
(CONST 16) = 
"~%QUOTE or [] args are not allowed in mqapply forms.~%~
		  ~:M"
(CONST 17) = TR-FORMAT
(CONST 18) = TR-ABORT
(CONST 19) = TR-LAMBDA
(CONST 20) = SIMPLIFY
(CONST 21) = MAPPLY
(CONST 22) = TRANSLATE
(CONST 23) = DCONVX
(CONST 24) = WARN-MEVAL
(CONST 25) = MEVAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*TRANSLATION-MSGS-FILES* ARYP FN)
writes special variables : (FN TR-ABORT)
127 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR&PUSH)
3     (LOAD 2)
4     (CDR)
5     (CDR&PUSH)
6     (CONST&PUSH 0)                      ; ARRAY
7     (LOAD 4)
8     (CAR)
9     (CDR&PUSH)
10    (CALL2 1)                           ; MEMQ
12    (BIND 2)                            ; ARYP
14    (LOAD 4)
15    (BIND 3)                            ; FN
17    (GETVALUE 3)                        ; FN
19    (JMPIFATOM L56)
21    (GETVALUE 3)                        ; FN
23    (CAR)
24    (CAR&PUSH)
25    (JMPIFEQTO 7 L66)                   ; MQUOTE
28    (GETVALUE 3)                        ; FN
30    (CAR)
31    (CAR&PUSH)
32    (JMPIFEQTO 12 L85)                  ; LAMBDA
35    (GETVALUE 2)                        ; ARYP
37    (JMPIFNOT L160)
40    (LOAD&PUSH 9)
41    (CALL1 24)                          ; WARN-MEVAL
43    (CONST&PUSH 8)                      ; $ANY
44    (CONST&PUSH 25)                     ; MEVAL
45    (CONST&PUSH 10)                     ; QUOTE
46    (LOAD&PUSH 12)
47    (LIST 2)
49    L49
49    (PUSH)
50    (LIST 3)
52    L52
52    (UNBIND 2)
54    (SKIP&RET 4)
56    L56
56    (GETVALUE&PUSH 4)                   ; *TRANSLATION-MSGS-FILES*
58    (CONST&PUSH 5)                      ; "~%Illegal mqapply form:~%~:M"
59    (LOAD&PUSH 11)
60    (CALL 3 6)                          ; MFORMAT
63    (NIL)
64    (JMP L52)
66    L66
66    (CONST&PUSH 8)                      ; $ANY
67    (CONST&PUSH 9)                      ; LIST
68    (CONST&PUSH 10)                     ; QUOTE
69    (GETVALUE 3)                        ; FN
71    (CDR)
72    (CAR&PUSH)
73    (GETVALUE 2)                        ; ARYP
75    (CONS&PUSH)
76    (LIST&PUSH 2)
78    (LOAD&PUSH 9)
79    (CALL1 11)                          ; TR-ARGS
81    (LIST* 3)
83    (JMP L52)
85    L85
85    (CONST&PUSH 13)                     ; BOGUS
86    (NIL&PUSH)
87    (GETVALUE 3)                        ; FN
89    (CDR)
90    (CAR)
91    (CDR&PUSH)
92    (JMP L125)
94    L94
94    (CONST 13)                          ; BOGUS
95    (JMP L118)
97    L97
97    (CONST&PUSH 16)                     ; "~%QUOTE or [] args are not allowed in mqapply forms.~%~
		  ~:M"
98    (LOAD&PUSH 10)
99    (CALL2 17)                          ; TR-FORMAT
101   (T)
102   (SETVALUE 18)                       ; TR-ABORT
104   (NIL)
105   (JMP L52)
107   L107
107   (LOAD&CAR&PUSH 0)
109   (LOAD&PUSH 0)
110   (CALL1&JMPIF 14 L94)                ; MQUOTEP
113   (LOAD&PUSH 0)
114   (CALL1&JMPIF 15 L94)                ; $LISTP
117   (NIL)
118   L118
118   (PUSH)
119   (LOAD&CONS&STORE 2)
121   (SKIP 1)
123   (LOAD&CDR&STORE 0)
125   L125
125   (LOAD&PUSH 0)
126   (CALLS1&JMPIFNOT 146 L107)          ; ENDP
129   (SKIP 1)
131   (LOAD&PUSH 0)
132   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
135   (CALL2&JMPIF 1 L97)                 ; MEMQ
138   (GETVALUE&PUSH 3)                   ; FN
140   (CALL1 19)                          ; TR-LAMBDA
142   (SETVALUE 3)                        ; FN
144   (LOAD&PUSH 6)
145   (CALL1 11)                          ; TR-ARGS
147   (STORE 6)
148   (GETVALUE 3)                        ; FN
150   (CAR&PUSH)
151   (GETVALUE 3)                        ; FN
153   (CDR&PUSH)
154   (LOAD 8)
155   (LIST* 2)
157   (JMP L52)
160   L160
160   (CONST&PUSH 8)                      ; $ANY
161   (CONST&PUSH 20)                     ; SIMPLIFY
162   (CONST&PUSH 21)                     ; MAPPLY
163   (GETVALUE&PUSH 3)                   ; FN
165   (CALL1&PUSH 22)                     ; TRANSLATE
167   (CALL1&PUSH 23)                     ; DCONVX
169   (CONST&PUSH 9)                      ; LIST
170   (LOAD&PUSH 11)
171   (CALL1 11)                          ; TR-ARGS
173   (CONS&PUSH)
174   (CONST&PUSH 10)                     ; QUOTE
175   (GETVALUE&PUSH 3)                   ; FN
177   (LIST&PUSH 2)
179   (LIST 4)
181   (JMP L49)


Disassembly of function #:|(DEF%TR MCOND (FORM) ...)-118-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MCOND (FORM) ...)-118-2-1|>
(CONST 1) = MCOND
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MCOND (FORM) ...)-118-2-1|>
1     (CONST&PUSH 1)                      ; MCOND
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MCOND (FORM) ...)-118-2-1|
(CONST 0) = TRANSLATE
(CONST 1) = TRANSLATE-PREDICATE
(CONST 2) = L
(CONST 3) = MCOND
(CONST 4) = *UNION-MODE
(CONST 5) = PROGN
(CONST 6) = DCONV
(CONST 7) = COND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
158 byte-code instructions:
0     (PUSH-NIL 3)
2     (LOAD 4)
3     (CDR)
4     (CDR)
5     (CAR&PUSH)
6     (CALL1 0)                           ; TRANSLATE
8     (STORE 2)
9     (CAR)
10    (STORE 1)
11    (LOAD&PUSH 2)
12    (LOAD 5)
13    (CDR)
14    (CAR&PUSH)
15    (CALL1&PUSH 1)                      ; TRANSLATE-PREDICATE
17    (LIST 2)
19    (STORE 0)
20    (LOAD 4)
21    (CDR)
22    (CDR)
23    (CDR)
24    (BIND 2)                            ; L
26    (GETVALUE 2)                        ; L
28    (JMPIFNOT L85)
30    L30
30    (GETVALUE 2)                        ; L
32    (CDR)
33    (CAR)
34    (JMPIFATOM L52)
36    (GETVALUE 2)                        ; L
38    (CDR)
39    (CAR)
40    (CAR)
41    (CAR&PUSH)
42    (JMPIFNOTEQTO 3 L52)                ; MCOND
45    (GETVALUE 2)                        ; L
47    (CDR)
48    (CAR)
49    (CDR)
50    (SETVALUE 2)                        ; L
52    L52
52    (GETVALUE 2)                        ; L
54    (CDR)
55    (CAR&PUSH)
56    (CALL1 0)                           ; TRANSLATE
58    (STORE 5)
59    (LOAD&PUSH 4)
60    (LOAD&CAR&PUSH 6)
62    (CALL2 4)                           ; *UNION-MODE
64    (STORE 4)
65    (LOAD&PUSH 5)
66    (GETVALUE 2)                        ; L
68    (CAR&PUSH)
69    (CALL1&PUSH 1)                      ; TRANSLATE-PREDICATE
71    (LOAD 5)
72    (CONS)
73    (CONS)
74    (STORE 3)
75    (GETVALUE 2)                        ; L
77    (CDR)
78    (CDR)
79    (SETVALUE 2)                        ; L
81    (GETVALUE 2)                        ; L
83    (JMPIF L30)
85    L85
85    (UNBIND1)
86    (NIL&STORE 4)
88    (LOAD 0)
89    (BIND 2)                            ; L
91    (GETVALUE 2)                        ; L
93    (JMPIFNOT L171)
96    L96
96    (GETVALUE 2)                        ; L
98    (CDR)
99    (CAR&PUSH)
100   (T)
101   (JMPIFNOTEQ L109)
103   (GETVALUE 2)                        ; L
105   (CAR)
106   (CDR)
107   (JMPIFNOT L160)
109   L109
109   (GETVALUE 2)                        ; L
111   (CDR)
112   (CAR&PUSH)
113   (GETVALUE 2)                        ; L
115   (CAR)
116   (CDR)
117   (JMPIFATOM L134)
119   (GETVALUE 2)                        ; L
121   (CAR)
122   (CDR)
123   (CDR)
124   (JMPIFNOT L134)
126   (GETVALUE 2)                        ; L
128   (CAR)
129   (CDR)
130   (CAR&PUSH)
131   (JMPIFEQTO 5 L179)                  ; PROGN
134   L134
134   (GETVALUE 2)                        ; L
136   (CAR)
137   (CDR&PUSH)
138   (GETVALUE 2)                        ; L
140   (CDR)
141   (CAR&PUSH)
142   (CALLS2&JMPIFNOT 2 L151)            ; EQUAL
145   (GETVALUE 2)                        ; L
147   (CAR)
148   (CDR)
149   (JMPIFATOM L208)
151   L151
151   (GETVALUE 2)                        ; L
153   (CAR)
154   (CDR&PUSH)
155   (LIST 1)
157   L157
157   (CONS&PUSH)
158   (LOAD&CONS&STORE 7)
160   L160
160   (GETVALUE 2)                        ; L
162   (CDR)
163   (CDR)
164   (SETVALUE 2)                        ; L
166   (GETVALUE 2)                        ; L
168   (JMPIF L96)
171   L171
171   (UNBIND1)
172   (LOAD&PUSH 1)
173   (CONST&PUSH 7)                      ; COND
174   (LOAD 6)
175   (CONS)
176   (CONS)
177   (SKIP&RET 5)
179   L179
179   (GETVALUE 2)                        ; L
181   (CAR)
182   (CAR&PUSH)
183   (GETVALUE 2)                        ; L
185   (CAR)
186   (CDR)
187   (CDR&PUSH)
188   (CALLS2 72)                         ; REVERSE
190   (CAR)
191   (CONS&PUSH)
192   (LOAD&PUSH 6)
193   (CALL2&PUSH 6)                      ; DCONV
195   (GETVALUE 2)                        ; L
197   (CAR)
198   (CDR)
199   (CDR&PUSH)
200   (CALLS2 72)                         ; REVERSE
202   (CDR)
203   (CONS&PUSH)
204   (CALLS2 73)                         ; NREVERSE
206   (JMP L157)
208   L208
208   (NIL)
209   (JMP L157)


Disassembly of function #:|(DEFUN NEW-END-SYMBOL (&AUX TEM) ...)-119|
(CONST 0) = NEW-END-SYMBOL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEW-END-SYMBOL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEW-END-SYMBOL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEW-END-SYMBOL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEW-END-SYMBOL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEW-END-SYMBOL
8     (SKIP&RET 1)


Disassembly of function NEW-END-SYMBOL
(CONST 0) = 0
(CONST 1) = "test-"
(CONST 2) = 16777214
(CONST 3) = SLOOP::SLOOP-TYPE-ERROR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (NIL&PUSH)
1     (CONST&PUSH 0)                      ; 0
2     (JMP L14)
4     L4
4     (LOAD&PUSH 0)
5     (CONST&PUSH 2)                      ; 16777214
6     (CALLSR&JMPIF 1 47 L12)             ; <
10    (CALL0 3)                           ; SLOOP::SLOOP-TYPE-ERROR
12    L12
12    (LOAD&INC&STORE 0)
14    L14
14    (PUSH-UNBOUND 2)
16    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
18    (CONST&PUSH 1)                      ; "test-"
19    (LOAD&PUSH 1)
20    (PUSH-UNBOUND 2)
22    (CALLS1 137)                        ; WRITE-STRING
24    (LOAD&PUSH 1)
25    (LOAD&PUSH 1)
26    (CALLS1 132)                        ; PRINC
28    (LOAD&PUSH 0)
29    (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
32    (PUSH-UNBOUND 1)
34    (CALLS1&STORE 212 1)                ; INTERN
37    (PUSH)
38    (CALLS2&JMPIF 139 L4)               ; SYMBOL-PLIST
41    (LOAD 1)
42    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (SPECIAL SHIT))-120|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEF%TR MDO (FORM) ...)-121-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MDO (FORM) ...)-121-2-1|>
(CONST 1) = MDO
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MDO (FORM) ...)-121-2-1|>
1     (CONST&PUSH 1)                      ; MDO
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MDO (FORM) ...)-121-2-1|
(CONST 0) = RETURNS
(CONST 1) = ASSIGNS
(CONST 2) = RETURN-MODE
(CONST 3) = LOCAL
(CONST 4) = INSIDE-MPROG
(CONST 5) = NEED-PROG?
(CONST 6) = VAR
(CONST 7) = MDO
(CONST 8) = SPECIALP
(CONST 9) = TBIND
(CONST 10) = TRANSLATE
(CONST 11) = ($FIXNUM . 1)
(CONST 12) = MODE
(CONST 13) = DECLVALUE
(CONST 14) = (MPLUS)
(CONST 15) = (MPLUS)
(CONST 16) = 1
(CONST 17) = *UNION-MODE
(CONST 18) = WARN-MODE
(CONST 19) = (MOR)
(CONST 20) = SIMPLIFY
(CONST 21) = $NUMFACTOR
(CONST 22) = MNEGP
(CONST 23) = (MLESSP)
(CONST 24) = (MGREATERP)
(CONST 25) = TRANSLATE-PREDICATE
(CONST 26) = $ANY
(CONST 27) = SHIT
(CONST 28) = L
(CONST 29) = DCONV
(CONST 30) = TUNBIND
(CONST 31) = DO
(CONST 32) = ('$DONE)
(CONST 33) = PROGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L RETURN-MODE SHIT RETURNS VAR)
writes special variables : (L VAR)
246 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; RETURNS
3     (NIL)
4     (BIND 1)                            ; ASSIGNS
6     (NIL)
7     (BIND 2)                            ; RETURN-MODE
9     (NIL)
10    (BIND 3)                            ; LOCAL
12    (T)
13    (BIND 4)                            ; INSIDE-MPROG
15    (NIL)
16    (BIND 5)                            ; NEED-PROG?
18    (NIL&PUSH)
19    (NIL)
20    (BIND 6)                            ; VAR
22    (PUSH-NIL 5)
24    (LOAD 28)
26    (CDR)
27    (CAR)
28    (JMPIF L31)
30    (CONST 7)                           ; MDO
31    L31
31    (SETVALUE 6)                        ; VAR
33    (PUSH)
34    (CALL1 8)                           ; SPECIALP
36    (GETVALUE&PUSH 6)                   ; VAR
38    (CALL1 9)                           ; TBIND
40    (LOAD 28)
42    (CDR)
43    (CDR)
44    (CAR)
45    (JMPIF L265)
48    (CONST 11)                          ; ($FIXNUM . 1)
49    L49
49    (STORE 4)
50    (GETVALUE&PUSH 6)                   ; VAR
52    (CONST&PUSH 12)                     ; MODE
53    (PUSH-UNBOUND 1)
55    (CALLS2&STORE 132 0)                ; GET
58    (JMPIF L68)
60    (GETVALUE&PUSH 6)                   ; VAR
62    (LOAD&CAR&PUSH 5)
64    (T&PUSH)
65    (CALL 3 13)                         ; DECLVALUE
68    L68
68    (LOAD 28)
70    (CDR)
71    (CDR)
72    (CDR)
73    (CAR)
74    (JMPIF L275)
77    (LOAD 28)
79    (CDR)
80    (CDR)
81    (CDR)
82    (CDR)
83    (CAR)
84    (JMPIF L93)
86    (CONST&PUSH 15)                     ; (MPLUS)
87    (CONST 16)                          ; 1
88    L88
88    (PUSH)
89    (GETVALUE&PUSH 6)                   ; VAR
91    (LIST 3)
93    L93
93    (PUSH)
94    (CALL1 10)                          ; TRANSLATE
96    (STORE 3)
97    (LOAD&PUSH 28)
99    (CALLS1&STORE 158 28)               ; COPY-LIST
102   (LOAD&JMPIFNOT 0 L285)
106   (GETVALUE&PUSH 6)                   ; VAR
108   (LOAD&PUSH 1)
109   (LOAD&CAR&PUSH 6)
111   (LOAD&CAR&PUSH 6)
113   (CALL2&PUSH 17)                     ; *UNION-MODE
115   (CALL 3 18)                         ; WARN-MODE
118   L118
118   (CONST&PUSH 19)                     ; (MOR)
119   (LOAD 29)
121   (CDR)
122   (CDR)
123   (CDR)
124   (CDR)
125   (CDR)
126   (CAR)
127   (JMPIFNOT L300)
130   (LOAD 29)
132   (CDR)
133   (CDR)
134   (CDR)
135   (CAR)
136   (JMPIFNOT L152)
138   (LOAD 29)
140   (CDR)
141   (CDR)
142   (CDR)
143   (CAR&PUSH)
144   (CALL1&PUSH 20)                     ; SIMPLIFY
146   (CALL1&PUSH 21)                     ; $NUMFACTOR
148   (CALL1&JMPIF 22 L304)               ; MNEGP
152   L152
152   (CONST 24)                          ; (MGREATERP)
154   L154
154   (PUSH)
155   (GETVALUE&PUSH 6)                   ; VAR
157   (LOAD 31)
159   (CDR)
160   (CDR)
161   (CDR)
162   (CDR)
163   (CDR)
164   (CAR&PUSH)
165   (LIST 3)
167   L167
167   (PUSH)
168   (LOAD 30)
170   (CDR)
171   (CDR)
172   (CDR)
173   (CDR)
174   (CDR)
175   (CDR)
176   (CAR&PUSH)
177   (LIST&PUSH 3)
179   (CALL1 25)                          ; TRANSLATE-PREDICATE
181   (STORE 2)
182   (LOAD 28)
184   (CDR)
185   (CDR)
186   (CDR)
187   (CDR)
188   (CDR)
189   (CDR)
190   (CDR)
191   (CAR&PUSH)
192   (CALL1 10)                          ; TRANSLATE
194   (STORE 1)
195   (GETVALUE 0)                        ; RETURNS
197   (JMPIFNOT L309)
200   (GETVALUE 27)                       ; SHIT
202   (JMPIF L314)
205   (GETVALUE 2)                        ; RETURN-MODE
207   L207
207   (STORE 8)
209   (LOAD 28)
211   (CDR)
212   (CAR)
213   (JMPIF L216)
215   (CONST 7)                           ; MDO
216   L216
216   (PUSH)
217   (CALL1 30)                          ; TUNBIND
219   (SETVALUE 6)                        ; VAR
221   (LOAD&PUSH 8)
222   (CONST&PUSH 31)                     ; DO
224   (GETVALUE&PUSH 6)                   ; VAR
226   (LOAD&CDR&PUSH 7)
228   (LOAD&CDR&PUSH 7)
230   (LIST&PUSH 3)
232   (NIL)
233   (CONS&PUSH)
234   (LOAD&PUSH 5)
235   (CONST 32)                          ; ('$DONE)
237   (CONS&PUSH)
238   (LOAD 5)
239   (CDR)
240   (JMPIFATOM L352)
243   (LOAD 5)
244   (CDR)
245   (CAR&PUSH)
246   (JMPIFEQTO 33 L356)                 ; PROGN
250   (LOAD&CDR&PUSH 5)
252   (LIST 1)
254   L254
254   (LIST* 4)
256   (SKIP 5)
258   (UNBIND1)
259   (SKIP 1)
261   (UNBIND 6)
263   (SKIP&RET 2)
265   L265
265   (LOAD 28)
267   (CDR)
268   (CDR)
269   (CAR&PUSH)
270   (CALL1 10)                          ; TRANSLATE
272   (JMP L49)
275   L275
275   (CONST&PUSH 14)                     ; (MPLUS)
276   (LOAD 29)
278   (CDR)
279   (CDR)
280   (CDR)
281   (CAR)
282   (JMP L88)
285   L285
285   (GETVALUE&PUSH 6)                   ; VAR
287   (LOAD&CAR&PUSH 5)
289   (LOAD&CAR&PUSH 5)
291   (CALL2&PUSH 17)                     ; *UNION-MODE
293   (T&PUSH)
294   (CALL 3 13)                         ; DECLVALUE
297   (JMP L118)
300   L300
300   (NIL)
301   (JMP L167)
304   L304
304   (CONST 23)                          ; (MLESSP)
306   (JMP L154)
309   L309
309   (CONST 26)                          ; $ANY
311   (JMP L207)
314   L314
314   (GETVALUE 0)                        ; RETURNS
316   (BIND 28)                           ; L
318   (GETVALUE 28)                       ; L
320   (JMPIFNOT L346)
322   L322
322   (GETVALUE 28)                       ; L
324   (CAR)
325   (CDR&PUSH)
326   (GETVALUE 28)                       ; L
328   (CAR)
329   (CDR)
330   (CAR&PUSH)
331   (GETVALUE&PUSH 2)                   ; RETURN-MODE
333   (CALL2&PUSH 29)                     ; DCONV
335   (CALLS1 168)                        ; RPLACA
337   (GETVALUE 28)                       ; L
339   (CDR)
340   (SETVALUE 28)                       ; L
342   (GETVALUE 28)                       ; L
344   (JMPIF L322)
346   L346
346   (UNBIND1)
347   (GETVALUE 2)                        ; RETURN-MODE
349   (JMP L207)
352   L352
352   (NIL)
353   (JMP L254)
356   L356
356   (LOAD 5)
357   (CDR)
358   (CDR)
359   (JMP L254)


Disassembly of function #:|(SETQ SHIT NIL)-122|
(CONST 0) = SHIT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (SHIT)
3 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; SHIT
3     (SKIP&RET 1)


Disassembly of function #:|(DEF%TR MDOIN (FORM) ...)-123-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MDOIN (FORM) ...)-123-2-1|>
(CONST 1) = MDOIN
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MDOIN (FORM) ...)-123-2-1|>
1     (CONST&PUSH 1)                      ; MDOIN
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MDOIN (FORM) ...)-123-2-1|
(CONST 0) = RETURNS
(CONST 1) = ASSIGNS
(CONST 2) = RETURN-MODE
(CONST 3) = LOCAL
(CONST 4) = INSIDE-MPROG
(CONST 5) = NEED-PROG?
(CONST 6) = VAR
(CONST 7) = TBIND
(CONST 8) = MDO
(CONST 9) = SPECIALP
(CONST 10) = DTRANSLATE
(CONST 11) = TUNBIND
(CONST 12) = $ANY
(CONST 13) = SIMPLIFY
(CONST 14) = MDOIN
(CONST 15) = TRANSLATE
(CONST 16) = SHIT
(CONST 17) = L
(CONST 18) = DCONV
(CONST 19) = DO
(CONST 20) = CDR
(CONST 21) = ((CDR MDO))
(CONST 22) = ((NULL MDO) '$DONE)
(CONST 23) = SETQ
(CONST 24) = ((CAR MDO))
(CONST 25) = PROGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L RETURN-MODE SHIT RETURNS VAR)
writes special variables : (L VAR)
157 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; RETURNS
3     (NIL)
4     (BIND 1)                            ; ASSIGNS
6     (NIL)
7     (BIND 2)                            ; RETURN-MODE
9     (NIL)
10    (BIND 3)                            ; LOCAL
12    (T)
13    (BIND 4)                            ; INSIDE-MPROG
15    (NIL)
16    (BIND 5)                            ; NEED-PROG?
18    (NIL&PUSH)
19    (NIL)
20    (BIND 6)                            ; VAR
22    (PUSH-NIL 2)
24    (LOAD 25)
26    (CDR)
27    (CAR&PUSH)
28    (CALL1 7)                           ; TBIND
30    (SETVALUE 6)                        ; VAR
32    (CONST&PUSH 8)                      ; MDO
33    (CALL1 7)                           ; TBIND
35    (GETVALUE&PUSH 6)                   ; VAR
37    (CALL1 9)                           ; SPECIALP
39    (LOAD 25)
41    (CDR)
42    (CDR)
43    (CAR&PUSH)
44    (CALL1 10)                          ; DTRANSLATE
46    (STORE 1)
47    (LOAD 25)
49    (CDR)
50    (CDR)
51    (CDR)
52    (CDR)
53    (CDR)
54    (CAR)
55    (JMPIF L157)
58    (LOAD 25)
60    (CDR)
61    (CDR)
62    (CDR)
63    (CDR)
64    (CDR)
65    (CDR)
66    (CAR)
67    (JMPIF L157)
70    (LOAD 25)
72    (CDR)
73    (CDR)
74    (CDR)
75    (CDR)
76    (CDR)
77    (CDR)
78    (CDR)
79    (CAR&PUSH)
80    (CALL1 15)                          ; TRANSLATE
82    (STORE 0)
83    (GETVALUE 0)                        ; RETURNS
85    (JMPIFNOT L177)
88    (GETVALUE 16)                       ; SHIT
90    (JMPIF L181)
93    (GETVALUE 2)                        ; RETURN-MODE
95    L95
95    (STORE 5)
96    (CONST&PUSH 8)                      ; MDO
97    (CALL1 11)                          ; TUNBIND
99    (LOAD 25)
101   (CDR)
102   (CAR&PUSH)
103   (CALL1 11)                          ; TUNBIND
105   (LOAD&PUSH 5)
106   (CONST&PUSH 19)                     ; DO
107   (GETVALUE&PUSH 6)                   ; VAR
109   (LIST&PUSH 1)
111   (CONST&PUSH 8)                      ; MDO
112   (CONST&PUSH 20)                     ; CDR
113   (LOAD&PUSH 6)
114   (LIST&PUSH 2)
116   (CONST 21)                          ; ((CDR MDO))
118   (LIST*&PUSH 2)
120   (LIST&PUSH 2)
122   (CONST&PUSH 22)                     ; ((NULL MDO) '$DONE)
123   (CONST&PUSH 23)                     ; SETQ
124   (GETVALUE&PUSH 6)                   ; VAR
126   (CONST 24)                          ; ((CAR MDO))
128   (LIST*&PUSH 2)
130   (LOAD 5)
131   (CDR)
132   (JMPIFATOM L219)
135   (LOAD 5)
136   (CDR)
137   (CAR&PUSH)
138   (JMPIFEQTO 25 L225)                 ; PROGN
142   (LOAD&CDR&PUSH 5)
144   (LIST 1)
146   (LIST* 5)
148   L148
148   (SKIP 2)
150   (UNBIND1)
151   (SKIP 1)
153   (UNBIND 6)
155   (SKIP&RET 2)
157   L157
157   (CONST&PUSH 8)                      ; MDO
158   (CALL1 11)                          ; TUNBIND
160   (LOAD 25)
162   (CDR)
163   (CAR&PUSH)
164   (CALL1 11)                          ; TUNBIND
166   (CONST&PUSH 12)                     ; $ANY
167   (CONST&PUSH 13)                     ; SIMPLIFY
168   (CONST&PUSH 14)                     ; MDOIN
169   (LOAD 28)
171   (CDR)
172   (CONS&PUSH)
173   (LIST 3)
175   (JMP L148)
177   L177
177   (CONST 12)                          ; $ANY
178   (JMP L95)
181   L181
181   (GETVALUE 0)                        ; RETURNS
183   (BIND 17)                           ; L
185   (GETVALUE 17)                       ; L
187   (JMPIFNOT L213)
189   L189
189   (GETVALUE 17)                       ; L
191   (CAR)
192   (CDR&PUSH)
193   (GETVALUE 17)                       ; L
195   (CAR)
196   (CDR)
197   (CAR&PUSH)
198   (GETVALUE&PUSH 2)                   ; RETURN-MODE
200   (CALL2&PUSH 18)                     ; DCONV
202   (CALLS1 168)                        ; RPLACA
204   (GETVALUE 17)                       ; L
206   (CDR)
207   (SETVALUE 17)                       ; L
209   (GETVALUE 17)                       ; L
211   (JMPIF L189)
213   L213
213   (UNBIND1)
214   (GETVALUE 2)                        ; RETURN-MODE
216   (JMP L95)
219   L219
219   (NIL)
220   (LIST* 5)
222   (JMP L148)
225   L225
225   (LOAD 5)
226   (CDR)
227   (CDR)
228   (LIST* 5)
230   (JMP L148)


Disassembly of function #:|(DEFUN LAMBDA-WRAP1 (TN VAL FORM) ...)-124|
(CONST 0) = LAMBDA-WRAP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LAMBDA-WRAP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LAMBDA-WRAP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LAMBDA-WRAP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LAMBDA-WRAP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LAMBDA-WRAP1
8     (SKIP&RET 1)


Disassembly of function LAMBDA-WRAP1
(CONST 0) = QUOTE
(CONST 1) = LAMBDA
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD 2)
1     (JMPIFATOM L20)
3     (LOAD&CAR&PUSH 2)
5     (JMPIFEQTO 0 L20)                   ; QUOTE
8     (CONST&PUSH 1)                      ; LAMBDA
9     (LOAD&PUSH 4)
10    (LIST&PUSH 1)
12    (LOAD&PUSH 3)
13    (LIST&PUSH 3)
15    (LOAD&PUSH 3)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (LOAD&PUSH 4)
22    (LOAD&PUSH 3)
23    (PUSH-UNBOUND 3)
25    (CALLS1 172)                        ; SUBST
27    (SKIP&RET 4)


Disassembly of function #:|(DEF%TR MSETQ (FORM) ...)-125-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR MSETQ (FORM) ...)-125-2-1|>
(CONST 1) = MSETQ
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR MSETQ (FORM) ...)-125-2-1|>
1     (CONST&PUSH 1)                      ; MSETQ
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR MSETQ (FORM) ...)-125-2-1|
(CONST 0) = VAR
(CONST 1) = VALUE-MODE
(CONST 2) = TRANSLATE
(CONST 3) = TBOUNDP
(CONST 4) = SPECIALS
(CONST 5) = MEMQ
(CONST 6) = WARN-MODE
(CONST 7) = $ANY
(CONST 8) = DCONV
(CONST 9) = ASSIGN
(CONST 10) = TR-GENSYM
(CONST 11) = PROGN
(CONST 12) = QUOTE
(CONST 13) = SETQ
(CONST 14) = TEVAL
(CONST 15) = LAMBDA-WRAP1
(CONST 16) = ARRAY
(CONST 17) = TR-ARRAYSETQ
(CONST 18) = "~%Dubious first LHS argument to ~:@M~%~:M"
(CONST 19) = TR-FORMAT
(CONST 20) = MSET
(CONST 21) = TRANSLATE-ATOMS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SPECIALS VAR)
writes special variable : (SPECIALS)
108 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CAR&PUSH)
3     (LOAD 2)
4     (CDR)
5     (CDR)
6     (CAR&PUSH)
7     (PUSH-NIL 2)
9     (LOAD 3)
10    (BIND 0)                            ; VAR
12    (GETVALUE 0)                        ; VAR
14    (JMPIFATOM L95)
17    (CONST&PUSH 16)                     ; ARRAY
18    (GETVALUE 0)                        ; VAR
20    (CAR&PUSH)
21    (CALL2&JMPIF 5 L165)                ; MEMQ
25    (CONST&PUSH 18)                     ; "~%Dubious first LHS argument to ~:@M~%~:M"
26    (LOAD 9)
27    (CAR)
28    (CAR&PUSH)
29    (GETVALUE&PUSH 0)                   ; VAR
31    (CALL 3 19)                         ; TR-FORMAT
34    (LOAD&PUSH 5)
35    (CALL1 2)                           ; TRANSLATE
37    (STORE 5)
38    (CAR&PUSH)
39    (CONST&PUSH 20)                     ; MSET
40    (CONST&PUSH 12)                     ; QUOTE
41    (GETVALUE&PUSH 0)                   ; VAR
43    (CALL1&PUSH 21)                     ; TRANSLATE-ATOMS
45    (LIST&PUSH 2)
47    (LOAD&CDR&PUSH 8)
49    (LIST 4)
51    L51
51    (UNBIND1)
52    (SKIP&RET 6)
54    L54
54    (LOAD&CAR&STORE 5 3)
57    (LOAD&CDR&STORE 5)
59    (JMP L141)
62    L62
62    (CALL0 10)                          ; TR-GENSYM
64    (PUSH)
65    (LOAD&PUSH 0)
66    (LOAD&PUSH 8)
67    (CONST&PUSH 11)                     ; PROGN
68    (LOAD&PUSH 9)
69    (CONST&PUSH 12)                     ; QUOTE
70    (GETVALUE&PUSH 0)                   ; VAR
72    (LIST&PUSH 2)
74    (LOAD&PUSH 5)
75    (LIST&PUSH 3)
77    (CONST&PUSH 13)                     ; SETQ
78    (GETVALUE&PUSH 0)                   ; VAR
80    (CALL1&PUSH 14)                     ; TEVAL
82    (LOAD&PUSH 6)
83    (LIST&PUSH 3)
85    (LIST&PUSH 3)
87    (CALL 3 15)                         ; LAMBDA-WRAP1
90    (SKIP 1)
92    (CONS)
93    (JMP L51)
95    L95
95    (GETVALUE&PUSH 0)                   ; VAR
97    (CALL1 1)                           ; VALUE-MODE
99    (STORE 3)
100   (LOAD&PUSH 5)
101   (CALL1 2)                           ; TRANSLATE
103   (STORE 5)
104   (GETVALUE&PUSH 0)                   ; VAR
106   (CALL1&JMPIF 3 L123)                ; TBOUNDP
109   (GETVALUE&PUSH 0)                   ; VAR
111   (GETVALUE&PUSH 4)                   ; SPECIALS
113   (CALL2&JMPIF 5 L123)                ; MEMQ
116   (GETVALUE&PUSH 0)                   ; VAR
118   (GETVALUE 4)                        ; SPECIALS
120   (CONS)
121   (SETVALUE 4)                        ; SPECIALS
123   L123
123   (GETVALUE&PUSH 0)                   ; VAR
125   (LOAD&PUSH 4)
126   (LOAD&CAR&PUSH 7)
128   (CALL 3 6)                          ; WARN-MODE
131   (LOAD&PUSH 3)
132   (JMPIFEQTO 7 L54)                   ; $ANY
136   (LOAD&PUSH 5)
137   (LOAD&PUSH 4)
138   (CALL2 8)                           ; DCONV
140   (STORE 5)
141   L141
141   (LOAD&PUSH 3)
142   (GETVALUE&PUSH 0)                   ; VAR
144   (CONST&PUSH 9)                      ; ASSIGN
145   (PUSH-UNBOUND 1)
147   (CALLS2&STORE 132 5)                ; GET
150   (JMPIF L62)
153   (CONST&PUSH 13)                     ; SETQ
154   (GETVALUE&PUSH 0)                   ; VAR
156   (CALL1&PUSH 14)                     ; TEVAL
158   (LOAD&PUSH 8)
159   (LIST 3)
161   (CONS)
162   (JMP L51)
165   L165
165   (GETVALUE&PUSH 0)                   ; VAR
167   (LOAD&PUSH 6)
168   (CALL2 17)                          ; TR-ARRAYSETQ
170   (JMP L51)


Disassembly of function #:|(DEF%TR $RAT (FORM) ...)-126-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR $RAT (FORM) ...)-126-2-1|>
(CONST 1) = $RAT
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR $RAT (FORM) ...)-126-2-1|>
1     (CONST&PUSH 1)                      ; $RAT
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $RAT (FORM) ...)-126-2-1|
(CONST 0) = $CRE
(CONST 1) = TRANSLATE
(CONST 2) = DCONV-$CRE
(CONST 3) = TR-ABORT
(CONST 4) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (TR-ABORT)
19 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CDR)
3     (JMPIFNOT L13)
5     (T)
6     (SETVALUE 3)                        ; TR-ABORT
8     (CONST&PUSH 4)                      ; $ANY
9     (LOAD 2)
10    L10
10    (CONS)
11    (SKIP&RET 2)
13    L13
13    (CONST&PUSH 0)                      ; $CRE
14    (LOAD 2)
15    (CDR)
16    (CAR&PUSH)
17    (CALL1&PUSH 1)                      ; TRANSLATE
19    (CALL1 2)                           ; DCONV-$CRE
21    (JMP L10)


Disassembly of function #:|(DEF%TR $MAX (X) ...)-127-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR $MAX (X) ...)-127-2-1|>
(CONST 1) = $MAX
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR $MAX (X) ...)-127-2-1|>
1     (CONST&PUSH 1)                      ; $MAX
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $MAX (X) ...)-127-2-1|
(CONST 0) = X
(CONST 1) = TRANSLATE-$MAX-$MIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
6 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; TRANSLATE-$MAX-$MIN
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $MIN (X) ...)-128-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR $MIN (X) ...)-128-2-1|>
(CONST 1) = $MIN
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR $MIN (X) ...)-128-2-1|>
1     (CONST&PUSH 1)                      ; $MIN
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR $MIN (X) ...)-128-2-1|
(CONST 0) = X
(CONST 1) = TRANSLATE-$MAX-$MIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
6 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; TRANSLATE-$MAX-$MIN
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR %MAX (X) ...)-129-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR %MAX (X) ...)-129-2-1|>
(CONST 1) = %MAX
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR %MAX (X) ...)-129-2-1|>
1     (CONST&PUSH 1)                      ; %MAX
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR %MAX (X) ...)-129-2-1|
(CONST 0) = X
(CONST 1) = TRANSLATE-$MAX-$MIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
6 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; TRANSLATE-$MAX-$MIN
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR %MIN (X) ...)-130-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF%TR %MIN (X) ...)-130-2-1|>
(CONST 1) = %MIN
(CONST 2) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF%TR %MIN (X) ...)-130-2-1|>
1     (CONST&PUSH 1)                      ; %MIN
2     (CONST&PUSH 2)                      ; TRANSLATE
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEF%TR %MIN (X) ...)-130-2-1|
(CONST 0) = X
(CONST 1) = TRANSLATE-$MAX-$MIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
6 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; TRANSLATE-$MAX-$MIN
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFUN TRANSLATE-$MAX-$MIN (FORM) ...)-131|
(CONST 0) = TRANSLATE-$MAX-$MIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRANSLATE-$MAX-$MIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRANSLATE-$MAX-$MIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRANSLATE-$MAX-$MIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRANSLATE-$MAX-$MIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRANSLATE-$MAX-$MIN
8     (SKIP&RET 1)


Disassembly of function TRANSLATE-$MAX-$MIN
(CONST 0) = STRIPDOLLAR
(CONST 1) = L
(CONST 2) = TRANSLATE
(CONST 3) = *UNION-MODE
(CONST 4) = ($FIXNUM $FLOAT $NUMBER)
(CONST 5) = MEMQ
(CONST 6) = MIN
(CONST 7) = MAX
(CONST 8) = CDR
(CONST 9) = $ANY
(CONST 10) = MINIMUM
(CONST 11) = MAXIMUM
(CONST 12) = LIST
(CONST 13) = DCONVX
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
67 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD 3)
3     (CAR)
4     (CAR&PUSH)
5     (CALL1&PUSH 0)                      ; STRIPDOLLAR
7     (NIL&PUSH)
8     (LOAD&CDR&PUSH 5)
10    (JMP L61)
12    L12
12    (CONST 6)                           ; MIN
13    (JMP L21)
15    L15
15    (LOAD&PUSH 2)
16    (LOAD&PUSH 1)
17    (JMPIFEQTO 6 L12)                   ; MIN
20    (CONST 7)                           ; MAX
21    L21
21    (PUSH)
22    (CONST&PUSH 8)                      ; CDR
23    (LOAD&PUSH 4)
24    (CALLSR 0 22)                       ; MAPCAR
27    (LIST* 2)
29    (SKIP&RET 5)
31    L31
31    (CONST 10)                          ; MINIMUM
32    (JMP L84)
34    L34
34    (LOAD&CAR&PUSH 0)
36    (LOAD 0)
37    (BIND 1)                            ; L
39    (GETVALUE&PUSH 1)                   ; L
41    (CALL1 2)                           ; TRANSLATE
43    (SETVALUE 1)                        ; L
45    (CAR&PUSH)
46    (LOAD&PUSH 9)
47    (CALL2 3)                           ; *UNION-MODE
49    (STORE 8)
51    (GETVALUE 1)                        ; L
53    (UNBIND1)
54    (PUSH)
55    (LOAD&CONS&STORE 2)
57    (SKIP 1)
59    (LOAD&CDR&STORE 0)
61    L61
61    (LOAD&PUSH 0)
62    (CALLS1&JMPIFNOT 146 L34)           ; ENDP
65    (SKIP 1)
67    (LOAD&PUSH 0)
68    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
70    (SKIP 1)
72    (STORE 1)
73    (LOAD&PUSH 2)
74    (CONST&PUSH 4)                      ; ($FIXNUM $FLOAT $NUMBER)
75    (CALL2&JMPIF 5 L15)                 ; MEMQ
78    (CONST&PUSH 9)                      ; $ANY
79    (LOAD&PUSH 1)
80    (JMPIFEQTO 6 L31)                   ; MIN
83    (CONST 11)                          ; MAXIMUM
84    L84
84    (PUSH)
85    (CONST&PUSH 12)                     ; LIST
86    (CONST&PUSH 13)                     ; DCONVX
87    (LOAD&PUSH 5)
88    (CALLSR 0 22)                       ; MAPCAR
91    (CONS&PUSH)
92    (LIST 3)
94    (SKIP&RET 5)


Disassembly of function #:|(DEFUN TR-CLASS (X) ...)-132|
(CONST 0) = TR-CLASS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TR-CLASS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TR-CLASS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TR-CLASS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TR-CLASS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TR-CLASS
8     (SKIP&RET 1)


Disassembly of function TR-CLASS
(CONST 0) = X
(CONST 1) = $FIXNUM
(CONST 2) = $FLOAT
(CONST 3) = (T NIL)
(CONST 4) = MEMQ
(CONST 5) = $BOOLEAN
(CONST 6) = $ANY
(CONST 7) = RAT
(CONST 8) = $RATIONAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 12 L34)               ; INTEGERP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALLS2&JMPIF 15 L37)               ; FLOATP
13    (GETVALUE&PUSH 0)                   ; X
15    (CONST&PUSH 3)                      ; (T NIL)
16    (CALL2&JMPIF 4 L40)                 ; MEMQ
19    (GETVALUE 0)                        ; X
21    (JMPIFATOM L43)
23    (GETVALUE 0)                        ; X
25    (CAR)
26    (CAR&PUSH)
27    (JMPIFEQTO 7 L46)                   ; RAT
30    (CONST 6)                           ; $ANY
31    L31
31    (UNBIND1)
32    (SKIP&RET 2)
34    L34
34    (CONST 1)                           ; $FIXNUM
35    (JMP L31)
37    L37
37    (CONST 2)                           ; $FLOAT
38    (JMP L31)
40    L40
40    (CONST 5)                           ; $BOOLEAN
41    (JMP L31)
43    L43
43    (CONST 6)                           ; $ANY
44    (JMP L31)
46    L46
46    (CONST 8)                           ; $RATIONAL
47    (JMP L31)


Disassembly of function #:|(DEFUN *UNION-MODE (MODE1 MODE2) ...)-133|
(CONST 0) = *UNION-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *UNION-MODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *UNION-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *UNION-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *UNION-MODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *UNION-MODE
8     (SKIP&RET 1)


Disassembly of function *UNION-MODE
(CONST 0) = *$ANY-MODES*
(CONST 1) = MEMQ
(CONST 2) = $ANY
(CONST 3) = $FIXNUM
(CONST 4) = $FLOAT
(CONST 5) = $NUMBER
(CONST 6) = $RATIONAL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*$ANY-MODES*)
59 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD 2)
2     (JMPIFEQ L10)
4     (LOAD&JMPIFNOT 2 L35)
7     (LOAD&JMPIF 1 L19)
10    L10
10    (LOAD 2)
11    (SKIP&RET 3)
13    L13
13    (CONST 2)                           ; $ANY
14    (SKIP&RET 3)
16    L16
16    (CONST 2)                           ; $ANY
17    (SKIP&RET 3)
19    L19
19    (LOAD&PUSH 1)
20    (GETVALUE&PUSH 0)                   ; *$ANY-MODES*
22    (CALL2&JMPIF 1 L13)                 ; MEMQ
25    (LOAD&PUSH 2)
26    (GETVALUE&PUSH 0)                   ; *$ANY-MODES*
28    (CALL2&JMPIF 1 L16)                 ; MEMQ
31    (LOAD&PUSH 2)
32    (JMPIFNOTEQTO 3 L68)                ; $FIXNUM
35    L35
35    (LOAD 1)
36    (SKIP&RET 3)
38    L38
38    (CONST 5)                           ; $NUMBER
39    (SKIP&RET 3)
41    L41
41    (LOAD&PUSH 1)
42    (JMPIFEQTO 5 L38)                   ; $NUMBER
45    (CONST 4)                           ; $FLOAT
46    (SKIP&RET 3)
48    L48
48    (CONST 4)                           ; $FLOAT
49    (SKIP&RET 3)
51    L51
51    (LOAD&PUSH 1)
52    (JMPIFEQTO 4 L48)                   ; $FLOAT
55    (CONST 2)                           ; $ANY
56    (SKIP&RET 3)
58    L58
58    (CONST 2)                           ; $ANY
59    (SKIP&RET 3)
61    L61
61    (LOAD&PUSH 1)
62    (JMPIFEQTO 6 L58)                   ; $RATIONAL
65    (CONST 5)                           ; $NUMBER
66    (SKIP&RET 3)
68    L68
68    (LOAD&PUSH 2)
69    (JMPIFEQTO 4 L41)                   ; $FLOAT
72    (LOAD&PUSH 2)
73    (JMPIFEQTO 6 L51)                   ; $RATIONAL
76    (LOAD&PUSH 2)
77    (JMPIFEQTO 5 L61)                   ; $NUMBER
80    (CONST 2)                           ; $ANY
81    (SKIP&RET 3)


Disassembly of function #:|(DEFUN VALUE-MODE (VAR) ...)-134|
(CONST 0) = VALUE-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE VALUE-MODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; VALUE-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; VALUE-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE VALUE-MODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; VALUE-MODE
8     (SKIP&RET 1)


Disassembly of function VALUE-MODE
(CONST 0) = VAR
(CONST 1) = MODE
(CONST 2) = WARN-UNDECLARED
(CONST 3) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CONST&PUSH 1)                      ; MODE
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L17)
12    (GETVALUE&PUSH 0)                   ; VAR
14    (CALL1 2)                           ; WARN-UNDECLARED
16    (CONST 3)                           ; $ANY
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DECMODE-ARRAYFUN (F M) ...)-135|
(CONST 0) = DECMODE-ARRAYFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DECMODE-ARRAYFUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DECMODE-ARRAYFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DECMODE-ARRAYFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DECMODE-ARRAYFUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DECMODE-ARRAYFUN
8     (SKIP&RET 1)


Disassembly of function DECMODE-ARRAYFUN
(CONST 0) = F
(CONST 1) = M
(CONST 2) = ARRAYFUN-MODE
(CONST 3) = PUTPROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M F)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; F
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (GETVALUE&PUSH 0)                   ; F
8     (GETVALUE&PUSH 1)                   ; M
10    (CONST&PUSH 2)                      ; ARRAYFUN-MODE
11    (CALL 3 3)                          ; PUTPROP
14    (UNBIND 2)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ARRAY-MODE (AR) ...)-136|
(CONST 0) = ARRAY-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARRAY-MODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRAY-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARRAY-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARRAY-MODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARRAY-MODE
8     (SKIP&RET 1)


Disassembly of function ARRAY-MODE
(CONST 0) = ARRAY-MODE
(CONST 1) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; ARRAY-MODE
2     (PUSH-UNBOUND 1)
4     (CALLS2 132)                        ; GET
6     (JMPIF1 L11)
8     (CONST 1)                           ; $ANY
9     (SKIP&RET 2)
11    L11
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ARRAYFUN-MODE (AR) ...)-137|
(CONST 0) = ARRAYFUN-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARRAYFUN-MODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRAYFUN-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARRAYFUN-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARRAYFUN-MODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARRAYFUN-MODE
8     (SKIP&RET 1)


Disassembly of function ARRAYFUN-MODE
(CONST 0) = ARRAYFUN-MODE
(CONST 1) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; ARRAYFUN-MODE
2     (PUSH-UNBOUND 1)
4     (CALLS2 132)                        ; GET
6     (JMPIF1 L11)
8     (CONST 1)                           ; $ANY
9     (SKIP&RET 2)
11    L11
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FUNCTION-MODE (F) ...)-138|
(CONST 0) = FUNCTION-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FUNCTION-MODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FUNCTION-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FUNCTION-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FUNCTION-MODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FUNCTION-MODE
8     (SKIP&RET 1)


Disassembly of function FUNCTION-MODE
(CONST 0) = F
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (F)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; F
3     (GETVALUE&PUSH 0)                   ; F
5     (CONST&PUSH 1)                      ; FUNCTION-MODE
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L13)
12    (CONST 2)                           ; $ANY
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FUNCTION-MODE-@ (F) ...)-139|
(CONST 0) = FUNCTION-MODE-@
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FUNCTION-MODE-@>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FUNCTION-MODE-@
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FUNCTION-MODE-@
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FUNCTION-MODE-@>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FUNCTION-MODE-@
8     (SKIP&RET 1)


Disassembly of function FUNCTION-MODE-@
(CONST 0) = F
(CONST 1) = VAL-MODES
(CONST 2) = FUNCTION-MODE
(CONST 3) = $ANY
(CONST 4) = ASS-EQ-REF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (F)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; F
3     (GETVALUE&PUSH 0)                   ; F
5     (CONST&PUSH 1)                      ; VAL-MODES
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 132)                   ; GET
10    (CONST&PUSH 2)                      ; FUNCTION-MODE
11    (CONST&PUSH 3)                      ; $ANY
12    (CALL 3 4)                          ; ASS-EQ-REF
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ARRAY-MODE-@ (F) ...)-140|
(CONST 0) = ARRAY-MODE-@
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARRAY-MODE-@>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARRAY-MODE-@
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARRAY-MODE-@
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARRAY-MODE-@>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARRAY-MODE-@
8     (SKIP&RET 1)


Disassembly of function ARRAY-MODE-@
(CONST 0) = F
(CONST 1) = VAL-MODES
(CONST 2) = ARRAY-MODE
(CONST 3) = $ANY
(CONST 4) = ASS-EQ-REF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (F)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; F
3     (GETVALUE&PUSH 0)                   ; F
5     (CONST&PUSH 1)                      ; VAL-MODES
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 132)                   ; GET
10    (CONST&PUSH 2)                      ; ARRAY-MODE
11    (CONST&PUSH 3)                      ; $ANY
12    (CALL 3 4)                          ; ASS-EQ-REF
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFVAR $TR_BIND_MODE_HOOK NIL ...)-141|
(CONST 0) = (SPECIAL $TR_BIND_MODE_HOOK)
(CONST 1) = $TR_BIND_MODE_HOOK
(CONST 2) = VARIABLE
(CONST 3) = 
"A hack to allow users to key the modes of variables
  off of variable spelling, and other things like that."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TR_BIND_MODE_HOOK)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TR_BIND_MODE_HOOK
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TR_BIND_MODE_HOOK
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $TR_BIND_MODE_HOOK
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "A hack to allow users to key the modes of variables
  off of variable spelling, and other things like that."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $TR_BIND_MODE_HOOK
18    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE LOAD) (DEFSTRUCT # MODE ...))-142|
(CONST 0) = TSTACK-SLOT
(CONST 1) = STRUCTURE-OBJECT
(CONST 2) = SYSTEM::DEFSTRUCT-DESCRIPTION
(CONST 3) = 0
(CONST 4) = MAKE-TSTACK-SLOT
(CONST 5) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 6) = #<COMPILED-CLOSURE MAKE-TSTACK-SLOT>
(CONST 7) = 
(#(MODE (:MODE) 1 (NIL) NIL T NIL) #(TBIND (:TBIND) 2 (NIL) NIL T NIL)
 #(VAL-MODES (:VAL-MODES) 3 (NIL) NIL T NIL)
 #(SPECIAL (:SPECIAL) 4 (NIL) NIL T NIL))
(CONST 8) = CLOS::DEFINE-STRUCTURE-CLASS
(CONST 9) = (INLINE TSTACK-SLOT-P)
(CONST 10) = TSTACK-SLOT-P
(CONST 11) = SYSTEM::INLINE-EXPANSION
(CONST 12) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN TSTACK-SLOT-P))
 (BLOCK TSTACK-SLOT-P (SYSTEM::%STRUCTURE-TYPE-P 'TSTACK-SLOT SYSTEM::OBJECT)))
(CONST 13) = #<COMPILED-CLOSURE TSTACK-SLOT-P>
(CONST 14) = (INLINE COPY-TSTACK-SLOT)
(CONST 15) = COPY-TSTACK-SLOT
(CONST 16) = 
((STRUCTURE) (DECLARE (SYSTEM::IN-DEFUN COPY-TSTACK-SLOT))
 (BLOCK COPY-TSTACK-SLOT (COPY-STRUCTURE STRUCTURE)))
(CONST 17) = #<COMPILED-CLOSURE COPY-TSTACK-SLOT>
(CONST 18) = (FUNCTION TSTACK-SLOT-MODE (TSTACK-SLOT) T)
(CONST 19) = (INLINE TSTACK-SLOT-MODE)
(CONST 20) = TSTACK-SLOT-MODE
(CONST 21) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN TSTACK-SLOT-MODE))
 (BLOCK TSTACK-SLOT-MODE
  (THE T (SYSTEM::%STRUCTURE-REF 'TSTACK-SLOT SYSTEM::OBJECT 1))))
(CONST 22) = #<COMPILED-CLOSURE TSTACK-SLOT-MODE>
(CONST 23) = SYSTEM::DEFSTRUCT-READER
(CONST 24) = (FUNCTION TSTACK-SLOT-TBIND (TSTACK-SLOT) T)
(CONST 25) = (INLINE TSTACK-SLOT-TBIND)
(CONST 26) = TSTACK-SLOT-TBIND
(CONST 27) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN TSTACK-SLOT-TBIND))
 (BLOCK TSTACK-SLOT-TBIND
  (THE T (SYSTEM::%STRUCTURE-REF 'TSTACK-SLOT SYSTEM::OBJECT 2))))
(CONST 28) = #<COMPILED-CLOSURE TSTACK-SLOT-TBIND>
(CONST 29) = (FUNCTION TSTACK-SLOT-VAL-MODES (TSTACK-SLOT) T)
(CONST 30) = (INLINE TSTACK-SLOT-VAL-MODES)
(CONST 31) = TSTACK-SLOT-VAL-MODES
(CONST 32) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN TSTACK-SLOT-VAL-MODES))
 (BLOCK TSTACK-SLOT-VAL-MODES
  (THE T (SYSTEM::%STRUCTURE-REF 'TSTACK-SLOT SYSTEM::OBJECT 3))))
(CONST 33) = #<COMPILED-CLOSURE TSTACK-SLOT-VAL-MODES>
(CONST 34) = (FUNCTION TSTACK-SLOT-SPECIAL (TSTACK-SLOT) T)
(CONST 35) = (INLINE TSTACK-SLOT-SPECIAL)
(CONST 36) = TSTACK-SLOT-SPECIAL
(CONST 37) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN TSTACK-SLOT-SPECIAL))
 (BLOCK TSTACK-SLOT-SPECIAL
  (THE T (SYSTEM::%STRUCTURE-REF 'TSTACK-SLOT SYSTEM::OBJECT 4))))
(CONST 38) = #<COMPILED-CLOSURE TSTACK-SLOT-SPECIAL>
(CONST 39) = SYSTEM::DEFSTRUCT-WRITER
(CONST 40) = SYSTEM::SETF-EXPANDER
(CONST 41) = -1
(CONST 42) = 1
(CONST 43) = #<COMPILED-CLOSURE SETF-TSTACK-SLOT-MODE>
(CONST 44) = SETF
(CONST 45) = SYSTEM::%SET-DOCUMENTATION
(CONST 46) = #<COMPILED-CLOSURE SETF-TSTACK-SLOT-TBIND>
(CONST 47) = #<COMPILED-CLOSURE SETF-TSTACK-SLOT-VAL-MODES>
(CONST 48) = #<COMPILED-CLOSURE SETF-TSTACK-SLOT-SPECIAL>
(CONST 49) = STRUCTURE
(CONST 50) = CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
198 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 1)
3     (CONST&PUSH 0)                      ; TSTACK-SLOT
4     (CONST&PUSH 1)                      ; STRUCTURE-OBJECT
5     (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 132)                   ; GET
10    (CONST 3)                           ; 0
11    (SVREF)
12    (CONS)
13    (STOREC 0 0)
16    (CONST&PUSH 4)                      ; MAKE-TSTACK-SLOT
17    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
19    (CONST&PUSH 4)                      ; MAKE-TSTACK-SLOT
20    (LOAD&PUSH 1)
21    (COPY-CLOSURE&PUSH 6 1)             ; #<COMPILED-CLOSURE MAKE-TSTACK-SLOT>
24    (CALLS2 130)                        ; SYSTEM::%PUTD
26    (CONST&PUSH 0)                      ; TSTACK-SLOT
27    (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
28    (LOADC&PUSH 2 0)
31    (T&PUSH)
32    (CONST&PUSH 4)                      ; MAKE-TSTACK-SLOT
33    (CONST&PUSH 7)                      ; (#(MODE # ...) #(TBIND # ...) ...)
34    (CALLSR&PUSH 4 0)                   ; VECTOR
37    (CALLS2 136)                        ; SYSTEM::%PUT
39    (SKIP 1)
41    (CONST&PUSH 0)                      ; TSTACK-SLOT
42    (CALL1 8)                           ; CLOS::DEFINE-STRUCTURE-CLASS
44    (CONST&PUSH 9)                      ; (INLINE TSTACK-SLOT-P)
45    (CALLS1 90)                         ; PROCLAIM
47    (CONST&PUSH 10)                     ; TSTACK-SLOT-P
48    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
50    (CONST&PUSH 10)                     ; TSTACK-SLOT-P
51    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
52    (CONST&PUSH 12)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
53    (CALLS2 136)                        ; SYSTEM::%PUT
55    (CONST&PUSH 10)                     ; TSTACK-SLOT-P
56    (CONST&PUSH 13)                     ; #<COMPILED-CLOSURE TSTACK-SLOT-P>
57    (CALLS2 130)                        ; SYSTEM::%PUTD
59    (CONST&PUSH 14)                     ; (INLINE COPY-TSTACK-SLOT)
60    (CALLS1 90)                         ; PROCLAIM
62    (CONST&PUSH 15)                     ; COPY-TSTACK-SLOT
63    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
65    (CONST&PUSH 15)                     ; COPY-TSTACK-SLOT
66    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
67    (CONST&PUSH 16)                     ; ((STRUCTURE) (DECLARE #) ...)
68    (CALLS2 136)                        ; SYSTEM::%PUT
70    (CONST&PUSH 15)                     ; COPY-TSTACK-SLOT
71    (CONST&PUSH 17)                     ; #<COMPILED-CLOSURE COPY-TSTACK-SLOT>
72    (CALLS2 130)                        ; SYSTEM::%PUTD
74    (CONST&PUSH 18)                     ; (FUNCTION TSTACK-SLOT-MODE ...)
75    (CALLS1 90)                         ; PROCLAIM
77    (CONST&PUSH 19)                     ; (INLINE TSTACK-SLOT-MODE)
78    (CALLS1 90)                         ; PROCLAIM
80    (CONST&PUSH 20)                     ; TSTACK-SLOT-MODE
81    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
83    (CONST&PUSH 20)                     ; TSTACK-SLOT-MODE
84    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
85    (CONST&PUSH 21)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
86    (CALLS2 136)                        ; SYSTEM::%PUT
88    (CONST&PUSH 20)                     ; TSTACK-SLOT-MODE
89    (CONST&PUSH 22)                     ; #<COMPILED-CLOSURE TSTACK-SLOT-MODE>
90    (CALLS2 130)                        ; SYSTEM::%PUTD
92    (CONST&PUSH 20)                     ; TSTACK-SLOT-MODE
93    (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
94    (CONST&PUSH 0)                      ; TSTACK-SLOT
95    (CALLS2 136)                        ; SYSTEM::%PUT
97    (CONST&PUSH 24)                     ; (FUNCTION TSTACK-SLOT-TBIND ...)
98    (CALLS1 90)                         ; PROCLAIM
100   (CONST&PUSH 25)                     ; (INLINE TSTACK-SLOT-TBIND)
101   (CALLS1 90)                         ; PROCLAIM
103   (CONST&PUSH 26)                     ; TSTACK-SLOT-TBIND
104   (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
106   (CONST&PUSH 26)                     ; TSTACK-SLOT-TBIND
107   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
108   (CONST&PUSH 27)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
109   (CALLS2 136)                        ; SYSTEM::%PUT
111   (CONST&PUSH 26)                     ; TSTACK-SLOT-TBIND
112   (CONST&PUSH 28)                     ; #<COMPILED-CLOSURE TSTACK-SLOT-TBIND>
113   (CALLS2 130)                        ; SYSTEM::%PUTD
115   (CONST&PUSH 26)                     ; TSTACK-SLOT-TBIND
116   (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
117   (CONST&PUSH 0)                      ; TSTACK-SLOT
118   (CALLS2 136)                        ; SYSTEM::%PUT
120   (CONST&PUSH 29)                     ; (FUNCTION ...)
121   (CALLS1 90)                         ; PROCLAIM
123   (CONST&PUSH 30)                     ; (INLINE TSTACK-SLOT-VAL-MODES)
125   (CALLS1 90)                         ; PROCLAIM
127   (CONST&PUSH 31)                     ; TSTACK-SLOT-VAL-MODES
129   (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
131   (CONST&PUSH 31)                     ; TSTACK-SLOT-VAL-MODES
133   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
134   (CONST&PUSH 32)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
136   (CALLS2 136)                        ; SYSTEM::%PUT
138   (CONST&PUSH 31)                     ; TSTACK-SLOT-VAL-MODES
140   (CONST&PUSH 33)                     ; #<COMPILED-CLOSURE TSTACK-SLOT-VAL-MODES>
142   (CALLS2 130)                        ; SYSTEM::%PUTD
144   (CONST&PUSH 31)                     ; TSTACK-SLOT-VAL-MODES
146   (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
147   (CONST&PUSH 0)                      ; TSTACK-SLOT
148   (CALLS2 136)                        ; SYSTEM::%PUT
150   (CONST&PUSH 34)                     ; (FUNCTION TSTACK-SLOT-SPECIAL ...)
152   (CALLS1 90)                         ; PROCLAIM
154   (CONST&PUSH 35)                     ; (INLINE TSTACK-SLOT-SPECIAL)
156   (CALLS1 90)                         ; PROCLAIM
158   (CONST&PUSH 36)                     ; TSTACK-SLOT-SPECIAL
160   (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
162   (CONST&PUSH 36)                     ; TSTACK-SLOT-SPECIAL
164   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
165   (CONST&PUSH 37)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
167   (CALLS2 136)                        ; SYSTEM::%PUT
169   (CONST&PUSH 36)                     ; TSTACK-SLOT-SPECIAL
171   (CONST&PUSH 38)                     ; #<COMPILED-CLOSURE TSTACK-SLOT-SPECIAL>
173   (CALLS2 130)                        ; SYSTEM::%PUTD
175   (CONST&PUSH 36)                     ; TSTACK-SLOT-SPECIAL
177   (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
178   (CONST&PUSH 0)                      ; TSTACK-SLOT
179   (CALLS2 136)                        ; SYSTEM::%PUT
181   (CONST&PUSH 20)                     ; TSTACK-SLOT-MODE
182   (CONST&PUSH 39)                     ; SYSTEM::DEFSTRUCT-WRITER
184   (CALLS2 137)                        ; REMPROP
186   (CONST&PUSH 20)                     ; TSTACK-SLOT-MODE
187   (CONST&PUSH 40)                     ; SYSTEM::SETF-EXPANDER
189   (CONST&PUSH 41)                     ; -1
191   (CONST&PUSH 42)                     ; 1
193   (CONST 43)                          ; #<COMPILED-CLOSURE SETF-TSTACK-SLOT-MODE>
195   (LIST*&PUSH 2)
197   (CALLS2 136)                        ; SYSTEM::%PUT
199   (CONST&PUSH 20)                     ; TSTACK-SLOT-MODE
200   (CONST&PUSH 44)                     ; SETF
202   (NIL&PUSH)
203   (CALL 3 45)                         ; SYSTEM::%SET-DOCUMENTATION
206   (CONST&PUSH 20)                     ; TSTACK-SLOT-MODE
207   (CONST&PUSH 39)                     ; SYSTEM::DEFSTRUCT-WRITER
209   (CONST&PUSH 0)                      ; TSTACK-SLOT
210   (CALLS2 136)                        ; SYSTEM::%PUT
212   (CONST&PUSH 26)                     ; TSTACK-SLOT-TBIND
213   (CONST&PUSH 39)                     ; SYSTEM::DEFSTRUCT-WRITER
215   (CALLS2 137)                        ; REMPROP
217   (CONST&PUSH 26)                     ; TSTACK-SLOT-TBIND
218   (CONST&PUSH 40)                     ; SYSTEM::SETF-EXPANDER
220   (CONST&PUSH 41)                     ; -1
222   (CONST&PUSH 42)                     ; 1
224   (CONST 46)                          ; #<COMPILED-CLOSURE SETF-TSTACK-SLOT-TBIND>
226   (LIST*&PUSH 2)
228   (CALLS2 136)                        ; SYSTEM::%PUT
230   (CONST&PUSH 26)                     ; TSTACK-SLOT-TBIND
231   (CONST&PUSH 44)                     ; SETF
233   (NIL&PUSH)
234   (CALL 3 45)                         ; SYSTEM::%SET-DOCUMENTATION
237   (CONST&PUSH 26)                     ; TSTACK-SLOT-TBIND
238   (CONST&PUSH 39)                     ; SYSTEM::DEFSTRUCT-WRITER
240   (CONST&PUSH 0)                      ; TSTACK-SLOT
241   (CALLS2 136)                        ; SYSTEM::%PUT
243   (CONST&PUSH 31)                     ; TSTACK-SLOT-VAL-MODES
245   (CONST&PUSH 39)                     ; SYSTEM::DEFSTRUCT-WRITER
247   (CALLS2 137)                        ; REMPROP
249   (CONST&PUSH 31)                     ; TSTACK-SLOT-VAL-MODES
251   (CONST&PUSH 40)                     ; SYSTEM::SETF-EXPANDER
253   (CONST&PUSH 41)                     ; -1
255   (CONST&PUSH 42)                     ; 1
257   (CONST 47)                          ; #<COMPILED-CLOSURE SETF-TSTACK-SLOT-VAL-MODES>
259   (LIST*&PUSH 2)
261   (CALLS2 136)                        ; SYSTEM::%PUT
263   (CONST&PUSH 31)                     ; TSTACK-SLOT-VAL-MODES
265   (CONST&PUSH 44)                     ; SETF
267   (NIL&PUSH)
268   (CALL 3 45)                         ; SYSTEM::%SET-DOCUMENTATION
271   (CONST&PUSH 31)                     ; TSTACK-SLOT-VAL-MODES
273   (CONST&PUSH 39)                     ; SYSTEM::DEFSTRUCT-WRITER
275   (CONST&PUSH 0)                      ; TSTACK-SLOT
276   (CALLS2 136)                        ; SYSTEM::%PUT
278   (CONST&PUSH 36)                     ; TSTACK-SLOT-SPECIAL
280   (CONST&PUSH 39)                     ; SYSTEM::DEFSTRUCT-WRITER
282   (CALLS2 137)                        ; REMPROP
284   (CONST&PUSH 36)                     ; TSTACK-SLOT-SPECIAL
286   (CONST&PUSH 40)                     ; SYSTEM::SETF-EXPANDER
288   (CONST&PUSH 41)                     ; -1
290   (CONST&PUSH 42)                     ; 1
292   (CONST 48)                          ; #<COMPILED-CLOSURE SETF-TSTACK-SLOT-SPECIAL>
294   (LIST*&PUSH 2)
296   (CALLS2 136)                        ; SYSTEM::%PUT
298   (CONST&PUSH 36)                     ; TSTACK-SLOT-SPECIAL
300   (CONST&PUSH 44)                     ; SETF
302   (NIL&PUSH)
303   (CALL 3 45)                         ; SYSTEM::%SET-DOCUMENTATION
306   (CONST&PUSH 36)                     ; TSTACK-SLOT-SPECIAL
308   (CONST&PUSH 39)                     ; SYSTEM::DEFSTRUCT-WRITER
310   (CONST&PUSH 0)                      ; TSTACK-SLOT
311   (CALLS2 136)                        ; SYSTEM::%PUT
313   (CONST&PUSH 0)                      ; TSTACK-SLOT
314   (CONST&PUSH 49)                     ; STRUCTURE
316   (NIL&PUSH)
317   (CALL 3 45)                         ; SYSTEM::%SET-DOCUMENTATION
320   (CONST&PUSH 0)                      ; TSTACK-SLOT
321   (CALL1 50)                          ; CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD
323   (CONST 0)                           ; TSTACK-SLOT
324   (SKIP&RET 1)


Disassembly of function MAKE-TSTACK-SLOT
(CONST 0) = NIL
(CONST 1) = :MODE
(CONST 2) = :TBIND
(CONST 3) = :VAL-MODES
(CONST 4) = :SPECIAL
(CONST 5) = 5
(CONST 6) = TSTACK-SLOT
(CONST 7) = 1
(CONST 8) = 2
(CONST 9) = 3
(CONST 10) = 4
0 required arguments
0 optional arguments
No rest parameter
4 keyword parameters: :MODE, :TBIND, :VAL-MODES, :SPECIAL.
29 byte-code instructions:
0     (UNBOUND->NIL 4)
2     (UNBOUND->NIL 3)
4     (UNBOUND->NIL 2)
6     (UNBOUND->NIL 1)
8     (LOADV&PUSH 0 1)
11    (CONST&PUSH 5)                      ; 5
12    (CALLS2&PUSH 48)                    ; SYSTEM::%MAKE-STRUCTURE
14    (CONST&PUSH 6)                      ; TSTACK-SLOT
15    (LOAD&PUSH 1)
16    (CONST&PUSH 7)                      ; 1
17    (LOAD&PUSH 8)
18    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
20    (CONST&PUSH 6)                      ; TSTACK-SLOT
21    (LOAD&PUSH 1)
22    (CONST&PUSH 8)                      ; 2
23    (LOAD&PUSH 7)
24    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
26    (CONST&PUSH 6)                      ; TSTACK-SLOT
27    (LOAD&PUSH 1)
28    (CONST&PUSH 9)                      ; 3
29    (LOAD&PUSH 6)
30    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
32    (CONST&PUSH 6)                      ; TSTACK-SLOT
33    (LOAD&PUSH 1)
34    (CONST&PUSH 10)                     ; 4
35    (LOAD&PUSH 5)
36    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
38    (POP)
39    (SKIP&RET 5)


Disassembly of function TSTACK-SLOT-P
(CONST 0) = TSTACK-SLOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTACK-SLOT
1     (LOAD&PUSH 2)
2     (CALLS2 50)                         ; SYSTEM::%STRUCTURE-TYPE-P
4     (SKIP&RET 2)


Disassembly of function COPY-TSTACK-SLOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 49)                         ; COPY-STRUCTURE
3     (SKIP&RET 2)


Disassembly of function TSTACK-SLOT-MODE
(CONST 0) = TSTACK-SLOT
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTACK-SLOT
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 1
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function TSTACK-SLOT-TBIND
(CONST 0) = TSTACK-SLOT
(CONST 1) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTACK-SLOT
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 2
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function TSTACK-SLOT-VAL-MODES
(CONST 0) = TSTACK-SLOT
(CONST 1) = 3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTACK-SLOT
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 3
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function TSTACK-SLOT-SPECIAL
(CONST 0) = TSTACK-SLOT
(CONST 1) = 4
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TSTACK-SLOT
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 4
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function SETF-TSTACK-SLOT-MODE
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'TSTACK-SLOT
(CONST 2) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'TSTACK-SLOT
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 1
7     (LOAD&PUSH 6)
8     (LIST 5)
10    (SKIP&RET 4)


Disassembly of function SETF-TSTACK-SLOT-TBIND
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'TSTACK-SLOT
(CONST 2) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'TSTACK-SLOT
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 2
7     (LOAD&PUSH 6)
8     (LIST 5)
10    (SKIP&RET 4)


Disassembly of function SETF-TSTACK-SLOT-VAL-MODES
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'TSTACK-SLOT
(CONST 2) = 3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'TSTACK-SLOT
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 3
7     (LOAD&PUSH 6)
8     (LIST 5)
10    (SKIP&RET 4)


Disassembly of function SETF-TSTACK-SLOT-SPECIAL
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'TSTACK-SLOT
(CONST 2) = 4
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'TSTACK-SLOT
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 4
7     (LOAD&PUSH 6)
8     (LIST 5)
10    (SKIP&RET 4)


Disassembly of function #:|(DEFUN VARIABLE-P (VAR) ...)-143|
(CONST 0) = VARIABLE-P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE VARIABLE-P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; VARIABLE-P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; VARIABLE-P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE VARIABLE-P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; VARIABLE-P
8     (SKIP&RET 1)


Disassembly of function VARIABLE-P
(CONST 0) = VAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE 0)                        ; VAR
5     (JMPIFNOT1 L17)
7     (PUSH)
8     (CALLS2 6)                          ; SYMBOLP
10    (JMPIFNOT1 L17)
12    (GETVALUE&PUSH 0)                   ; VAR
14    (T)
15    (EQ)
16    (NOT)
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN BAD-VAR-WARN (VAR) ...)-144|
(CONST 0) = BAD-VAR-WARN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BAD-VAR-WARN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BAD-VAR-WARN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BAD-VAR-WARN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BAD-VAR-WARN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BAD-VAR-WARN
8     (SKIP&RET 1)


Disassembly of function BAD-VAR-WARN
(CONST 0) = VAR
(CONST 1) = "~%BAD object to use as a variable:~%~:M~%"
(CONST 2) = TR-FORMAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (CONST&PUSH 1)                      ; "~%BAD object to use as a variable:~%~:M~%"
4     (GETVALUE&PUSH 0)                   ; VAR
6     (CALL2 2)                           ; TR-FORMAT
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN TBIND (VAR &AUX OLD) ...)-145|
(CONST 0) = TBIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TBIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TBIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TBIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TBIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TBIND
8     (SKIP&RET 1)


Disassembly of function TBIND
(CONST 0) = VAR
(CONST 1) = VARIABLE-P
(CONST 2) = :MODE
(CONST 3) = MODE
(CONST 4) = :TBIND
(CONST 5) = TBIND
(CONST 6) = :VAL-MODES
(CONST 7) = VAL-MODES
(CONST 8) = :SPECIAL
(CONST 9) = SPECIAL
(CONST 10) = MAKE-TSTACK-SLOT
(CONST 11) = TSTACK
(CONST 12) = SPECIALP
(CONST 13) = PUTPROP
(CONST 14) = $TR_BIND_MODE_HOOK
(CONST 15) = MAPPLY
(CONST 16) = TR-DECLARE-VARMODE
(CONST 17) = BAD-VAR-WARN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TR_BIND_MODE_HOOK TSTACK VAR)
writes special variable : (TSTACK)
74 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; VAR
6     (CALL1&JMPIFNOT 1 L114)             ; VARIABLE-P
10    (CONST&PUSH 2)                      ; :MODE
11    (GETVALUE&PUSH 0)                   ; VAR
13    (CONST&PUSH 3)                      ; MODE
14    (PUSH-UNBOUND 1)
16    (CALLS2&PUSH 132)                   ; GET
18    (CONST&PUSH 4)                      ; :TBIND
19    (GETVALUE&PUSH 0)                   ; VAR
21    (CONST&PUSH 5)                      ; TBIND
22    (PUSH-UNBOUND 1)
24    (CALLS2&PUSH 132)                   ; GET
26    (CONST&PUSH 6)                      ; :VAL-MODES
27    (GETVALUE&PUSH 0)                   ; VAR
29    (CONST&PUSH 7)                      ; VAL-MODES
30    (PUSH-UNBOUND 1)
32    (CALLS2&PUSH 132)                   ; GET
34    (CONST&PUSH 8)                      ; :SPECIAL
35    (GETVALUE&PUSH 0)                   ; VAR
37    (CONST&PUSH 9)                      ; SPECIAL
38    (PUSH-UNBOUND 1)
40    (CALLS2&PUSH 132)                   ; GET
42    (CALL 8 10)                         ; MAKE-TSTACK-SLOT
45    (STORE 0)
46    (GETVALUE&PUSH 0)                   ; VAR
48    (LOAD 1)
49    (CONS&PUSH)
50    (GETVALUE 11)                       ; TSTACK
52    (CONS)
53    (SETVALUE 11)                       ; TSTACK
55    (GETVALUE&PUSH 0)                   ; VAR
57    (CALL1&JMPIF 12 L75)                ; SPECIALP
60    (GETVALUE&PUSH 0)                   ; VAR
62    (CONST&PUSH 7)                      ; VAL-MODES
63    (CALLS2 137)                        ; REMPROP
65    (GETVALUE&PUSH 0)                   ; VAR
67    (CONST&PUSH 3)                      ; MODE
68    (CALLS2 137)                        ; REMPROP
70    (GETVALUE&PUSH 0)                   ; VAR
72    (CONST&PUSH 9)                      ; SPECIAL
73    (CALLS2 137)                        ; REMPROP
75    L75
75    (GETVALUE&PUSH 0)                   ; VAR
77    (GETVALUE&PUSH 0)                   ; VAR
79    (CONST&PUSH 5)                      ; TBIND
80    (CALL 3 13)                         ; PUTPROP
83    (GETVALUE 14)                       ; $TR_BIND_MODE_HOOK
85    (JMPIFNOT L110)
87    (PUSH)
88    (GETVALUE&PUSH 0)                   ; VAR
90    (LIST&PUSH 1)
92    (CONST&PUSH 14)                     ; $TR_BIND_MODE_HOOK
93    (CALL&PUSH 3 15)                    ; MAPPLY
96    (LOAD&JMPIFNOT 0 L104)
99    (GETVALUE&PUSH 0)                   ; VAR
101   (LOAD&PUSH 1)
102   (CALL2 16)                          ; TR-DECLARE-VARMODE
104   L104
104   (SKIP 1)
106   (GETVALUE 0)                        ; VAR
108   (JMP L118)
110   L110
110   (GETVALUE 0)                        ; VAR
112   (JMP L118)
114   L114
114   (GETVALUE&PUSH 0)                   ; VAR
116   (CALL1 17)                          ; BAD-VAR-WARN
118   L118
118   (SKIP 1)
120   (UNBIND1)
121   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TUNBIND (VAR &AUX #) ...)-146|
(CONST 0) = TUNBIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TUNBIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TUNBIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TUNBIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TUNBIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TUNBIND
8     (SKIP&RET 1)


Disassembly of function TUNBIND
(CONST 0) = VAR
(CONST 1) = TSTACK
(CONST 2) = ASSQ
(CONST 3) = VARIABLE-P
(CONST 4) = TEVAL
(CONST 5) = DELQ
(CONST 6) = TSTACK-SLOT
(CONST 7) = 1
(CONST 8) = MODE
(CONST 9) = PUTPROP1
(CONST 10) = 2
(CONST 11) = TBIND
(CONST 12) = 3
(CONST 13) = VAL-MODES
(CONST 14) = 4
(CONST 15) = SPECIAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TSTACK VAR)
writes special variable : (TSTACK)
52 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (GETVALUE&PUSH 1)                   ; TSTACK
7     (CALL2&PUSH 2)                      ; ASSQ
9     (GETVALUE&PUSH 0)                   ; VAR
11    (CALL1 3)                           ; VARIABLE-P
13    (JMPIFNOT1 L23)
15    (GETVALUE&PUSH 0)                   ; VAR
17    (CALL1&PUSH 4)                      ; TEVAL
19    (LOAD&JMPIF 1 L28)
22    (POP)
23    L23
23    (SKIP 1)
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (PUSH)
29    (GETVALUE&PUSH 1)                   ; TSTACK
31    (CALL2 5)                           ; DELQ
33    (SETVALUE 1)                        ; TSTACK
35    (LOAD&CDR&STORE 1)
37    (GETVALUE&PUSH 0)                   ; VAR
39    (CONST&PUSH 6)                      ; TSTACK-SLOT
40    (LOAD&PUSH 3)
41    (CONST&PUSH 7)                      ; 1
42    (CALLS2&PUSH 46)                    ; SYSTEM::%STRUCTURE-REF
44    (CONST&PUSH 8)                      ; MODE
45    (CALL 3 9)                          ; PUTPROP1
48    (GETVALUE&PUSH 0)                   ; VAR
50    (CONST&PUSH 6)                      ; TSTACK-SLOT
51    (LOAD&PUSH 3)
52    (CONST&PUSH 10)                     ; 2
53    (CALLS2&PUSH 46)                    ; SYSTEM::%STRUCTURE-REF
55    (CONST&PUSH 11)                     ; TBIND
56    (CALL 3 9)                          ; PUTPROP1
59    (GETVALUE&PUSH 0)                   ; VAR
61    (CONST&PUSH 6)                      ; TSTACK-SLOT
62    (LOAD&PUSH 3)
63    (CONST&PUSH 12)                     ; 3
64    (CALLS2&PUSH 46)                    ; SYSTEM::%STRUCTURE-REF
66    (CONST&PUSH 13)                     ; VAL-MODES
67    (CALL 3 9)                          ; PUTPROP1
70    (GETVALUE&PUSH 0)                   ; VAR
72    (CONST&PUSH 6)                      ; TSTACK-SLOT
73    (LOAD&PUSH 3)
74    (CONST&PUSH 14)                     ; 4
75    (CALLS2&PUSH 46)                    ; SYSTEM::%STRUCTURE-REF
77    (CONST&PUSH 15)                     ; SPECIAL
78    (CALL 3 9)                          ; PUTPROP1
81    (POP)
82    (JMP L23)


Disassembly of function #:|(DEFUN PUTPROP1 (NAME VALUE KEY) ...)-147|
(CONST 0) = PUTPROP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PUTPROP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PUTPROP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PUTPROP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PUTPROP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PUTPROP1
8     (SKIP&RET 1)


Disassembly of function PUTPROP1
(CONST 0) = NAME
(CONST 1) = PUTPROP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NAME)
16 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; NAME
3     (LOAD&JMPIF 5 L15)
6     (GETVALUE&PUSH 0)                   ; NAME
8     (LOAD&PUSH 5)
9     (CALLS2 137)                        ; REMPROP
11    (NIL)
12    L12
12    (UNBIND1)
13    (SKIP&RET 4)
15    L15
15    (GETVALUE&PUSH 0)                   ; NAME
17    (LOAD&PUSH 6)
18    (LOAD&PUSH 6)
19    (CALL 3 1)                          ; PUTPROP
22    (JMP L12)


Disassembly of function #:|(DEFUN TUNBINDS (L) ...)-148|
(CONST 0) = TUNBINDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TUNBINDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TUNBINDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TUNBINDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TUNBINDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TUNBINDS
8     (SKIP&RET 1)


Disassembly of function TUNBINDS
(CONST 0) = L
(CONST 1) = TSTACK
(CONST 2) = TUNBIND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TSTACK L)
writes special variable : (L)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; L
6     (JMPIFNOT L25)
8     L8
8     (GETVALUE 1)                        ; TSTACK
10    (CAR)
11    (CAR&PUSH)
12    (CALL1&PUSH 2)                      ; TUNBIND
14    (LOAD&CONS&STORE 0)
16    (GETVALUE 0)                        ; L
18    (CDR)
19    (SETVALUE 0)                        ; L
21    (GETVALUE 0)                        ; L
23    (JMPIF L8)
25    L25
25    (POP)
26    (UNBIND1)
27    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TBOUNDP (VAR) ...)-149|
(CONST 0) = TBOUNDP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TBOUNDP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TBOUNDP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TBOUNDP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TBOUNDP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TBOUNDP
8     (SKIP&RET 1)


Disassembly of function TBOUNDP
(CONST 0) = VAR
(CONST 1) = TBIND
(CONST 2) = SPECIAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CONST&PUSH 1)                      ; TBIND
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIFNOT1 L20)
12    (GETVALUE&PUSH 0)                   ; VAR
14    (CONST&PUSH 2)                      ; SPECIAL
15    (PUSH-UNBOUND 1)
17    (CALLS2 132)                        ; GET
19    (NOT)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TEVAL (VAR) ...)-150|
(CONST 0) = TEVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEVAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEVAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEVAL
8     (SKIP&RET 1)


Disassembly of function TEVAL
(CONST 0) = VAR
(CONST 1) = TBIND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (CONST&PUSH 1)                      ; TBIND
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L14)
12    (GETVALUE 0)                        ; VAR
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO MASET (VAL AR &REST ...) ...)-151|
(CONST 0) = MASET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MASET>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MASET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MASET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MASET>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MASET
10    (SKIP&RET 1)


Disassembly of function MASET
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = PROGN
(CONST 3) = COND
(CONST 4) = SYMBOLP
(CONST 5) = SETF
(CONST 6) = MAKE-EQUAL-HASH-TABLE
(CONST 7) = MASET1
1 required argument
1 optional argument
No rest parameter
No keyword parameters
44 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L52)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (CONST&PUSH 2)                      ; PROGN
20    (CONST&PUSH 3)                      ; COND
21    (CONST&PUSH 4)                      ; SYMBOLP
22    (LOAD&PUSH 4)
23    (LIST&PUSH 2)
25    (CONST&PUSH 5)                      ; SETF
26    (LOAD&PUSH 5)
27    (CONST&PUSH 6)                      ; MAKE-EQUAL-HASH-TABLE
28    (LOAD 6)
29    (CDR)
30    (JMPIFNOT L33)
32    (T)
33    L33
33    (PUSH)
34    (LIST&PUSH 2)
36    (LIST&PUSH 3)
38    (LIST&PUSH 2)
40    (LIST&PUSH 2)
42    (CONST&PUSH 7)                      ; MASET1
43    (LOAD&PUSH 5)
44    (LOAD&PUSH 5)
45    (LOAD 5)
46    (LIST*&PUSH 3)
48    (LIST 3)
50    (SKIP&RET 6)
52    L52
52    (LOAD&PUSH 2)
53    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
55    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO MAREF (AR &REST INDS) ...)-152|
(CONST 0) = MAREF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAREF>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAREF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAREF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAREF>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MAREF
10    (SKIP&RET 1)


Disassembly of function MAREF
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = MQAPPLY
(CONST 3) = MEMQ
(CONST 4) = MARRAYREF
(CONST 5) = MAREF1
1 required argument
1 optional argument
No rest parameter
No keyword parameters
44 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L36)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (LOAD&PUSH 1)
15    (JMPIFEQTO 2 L41)                   ; MQAPPLY
18    (LOAD 1)
19    (JMPIFATOM L26)
21    (CONST&PUSH 2)                      ; MQAPPLY
22    (LOAD&PUSH 2)
23    (CALL2&JMPIF 3 L41)                 ; MEMQ
26    L26
26    (LOAD 1)
27    (JMPIFCONSP L48)
29    (CONST&PUSH 5)                      ; MAREF1
30    (LOAD&PUSH 2)
31    (LOAD 2)
32    L32
32    (LIST* 2)
34    (SKIP&RET 5)
36    L36
36    (LOAD&PUSH 2)
37    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
39    (SKIP&RET 3)
41    L41
41    (CONST&PUSH 4)                      ; MARRAYREF
42    (LOAD&CAR&PUSH 1)
44    (LOAD 2)
45    (CDR)
46    (JMP L32)
48    L48
48    (CONST&PUSH 4)                      ; MARRAYREF
49    (LOAD&PUSH 2)
50    (LOAD&CAR&PUSH 2)
52    (LOAD 3)
53    (CDR)
54    (LIST* 3)
56    (SKIP&RET 5)


Wrote file binary-clisp/transl.fas
Wrote file /cygdrive/e/temp/maxima/src/transl.lis