Listing of compilation of file /cygdrive/e/temp/maxima/src/mrgmac.lisp
on 2002-12-17 13:31:59 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/mrgmac.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE MRGMAC MACRO)-2|
(CONST 0) = MRGMAC
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (MACRO)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MRGMAC
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (MACRO)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN ZL-GET (SYM TAG) ...)-3|
(CONST 0) = ZL-GET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZL-GET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZL-GET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZL-GET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZL-GET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZL-GET
8     (SKIP&RET 1)


Disassembly of function ZL-GET
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIF 6 L10)                ; SYMBOLP
4     (LOAD 2)
5     (JMPIFCONSP L18)
7     (NIL)
8     (SKIP&RET 3)
10    L10
10    (LOAD&PUSH 2)
11    (LOAD&PUSH 2)
12    (PUSH-UNBOUND 1)
14    (CALLS2 132)                        ; GET
16    (SKIP&RET 3)
18    L18
18    (LOAD&CDR&PUSH 2)
20    (LOAD&PUSH 2)
21    (PUSH-UNBOUND 1)
23    (CALLS2 133)                        ; GETF
25    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO FIX-LM (&REST BODY) ...)-4|
(CONST 0) = FIX-LM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIX-LM>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIX-LM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIX-LM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIX-LM>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; FIX-LM
10    (SKIP&RET 1)


Disassembly of function FIX-LM
(CONST 0) = PROGN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; PROGN
3     (LOAD 1)
4     (CONS)
5     (SKIP&RET 4)


Disassembly of function #:|(DEFUN CHAR-LIST-SYNTAX-ON NIL ...)-5|
(CONST 0) = CHAR-LIST-SYNTAX-ON
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHAR-LIST-SYNTAX-ON>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHAR-LIST-SYNTAX-ON
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHAR-LIST-SYNTAX-ON
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHAR-LIST-SYNTAX-ON>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHAR-LIST-SYNTAX-ON
8     (SKIP&RET 1)


Disassembly of function CHAR-LIST-SYNTAX-ON
(CONST 0) = {
(CONST 1) = MACRO
(CONST 2) = #<COMPILED-CLOSURE CHAR-LIST-SYNTAX-ON-1>
(CONST 3) = SETSYNTAX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; {
1     (CONST&PUSH 1)                      ; MACRO
2     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHAR-LIST-SYNTAX-ON-1>
3     (CALL 3 3)                          ; SETSYNTAX
6     (T)
7     (SKIP&RET 1)


Disassembly of function CHAR-LIST-SYNTAX-ON-1
(CONST 0) = TYI
(CONST 1) = #\}
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (CALL0 0)                           ; TYI
2     (PUSH)
3     (NIL&PUSH)
4     (JMP L12)
6     L6
6     (LOAD&PUSH 1)
7     (LOAD&CONS&STORE 0)
9     (CALL0 0)                           ; TYI
11    (STORE 1)
12    L12
12    (CONST&PUSH 1)                      ; #\}
13    (LOAD&PUSH 2)
14    (CALLSR&JMPIFNOT 1 7 L6)            ; CHAR=
18    (LOAD&PUSH 0)
19    (CALLS2 73)                         ; NREVERSE
21    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CHAR-LIST-SYNTAX-OFF NIL ...)-6|
(CONST 0) = CHAR-LIST-SYNTAX-OFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHAR-LIST-SYNTAX-OFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHAR-LIST-SYNTAX-OFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHAR-LIST-SYNTAX-OFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHAR-LIST-SYNTAX-OFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHAR-LIST-SYNTAX-OFF
8     (SKIP&RET 1)


Disassembly of function CHAR-LIST-SYNTAX-OFF
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DEFINE-MACRO (NAME LAMBDA-EXP) ...)-7|
(CONST 0) = DEFINE-MACRO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFINE-MACRO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFINE-MACRO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFINE-MACRO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFINE-MACRO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFINE-MACRO
8     (SKIP&RET 1)


Disassembly of function DEFINE-MACRO
(CONST 0) = SYSTEM::MAKE-MACRO
(CONST 1) = SYSTEM::MACRO
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 6 L7)              ; SYMBOLP
4     (LOAD 1)
5     (SYMBOL-FUNCTION)
6     (STORE 1)
7     L7
7     (LOAD&PUSH 2)
8     (LOAD&PUSH 2)
9     (CALL1&PUSH 0)                      ; SYSTEM::MAKE-MACRO
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (LOAD&PUSH 2)
14    (CONST&PUSH 1)                      ; SYSTEM::MACRO
15    (CALLS2 137)                        ; REMPROP
17    (LOAD 1)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO LAMBIND* (VAR-LIST . BODY) ...)-8|
(CONST 0) = LAMBIND*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LAMBIND*>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; LAMBIND*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LAMBIND*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LAMBIND*>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; LAMBIND*
10    (SKIP&RET 1)


Disassembly of function LAMBIND*
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = LET
(CONST 3) = PROG
1 required argument
1 optional argument
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L25)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; LET
15    (LOAD&PUSH 2)
16    (CONST&PUSH 3)                      ; PROG
17    (NIL&PUSH)
18    (LOAD 4)
19    (LIST*&PUSH 2)
21    (LIST 3)
23    (SKIP&RET 5)
25    L25
25    (LOAD&PUSH 2)
26    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
28    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO PROGB* (VAR-LIST . BODY) ...)-9|
(CONST 0) = PROGB*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PROGB*>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; PROGB*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PROGB*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PROGB*>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; PROGB*
10    (SKIP&RET 1)


Disassembly of function PROGB*
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = LET
(CONST 3) = PROG
1 required argument
1 optional argument
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L25)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; LET
15    (LOAD&PUSH 2)
16    (CONST&PUSH 3)                      ; PROG
17    (NIL&PUSH)
18    (LOAD 4)
19    (LIST*&PUSH 2)
21    (LIST 3)
23    (SKIP&RET 5)
25    L25
25    (LOAD&PUSH 2)
26    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
28    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO MAPAND #'LIST ...)-10|
(CONST 0) = MAPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAPAND>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAPAND>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MAPAND
10    (SKIP&RET 1)


Disassembly of function MAPAND
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DO
(CONST 3) = L
(CONST 4) = ((CDR L))
(CONST 5) = ((NULL L) T)
(CONST 6) = IFN
(CONST 7) = ((CAR L))
(CONST 8) = ((RETURN NIL))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
30 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L35)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; DO
16    (CONST&PUSH 3)                      ; L
17    (LOAD&PUSH 2)
18    (CONST 4)                           ; ((CDR L))
19    (LIST*&PUSH 2)
21    (LIST&PUSH 1)
23    (CONST&PUSH 5)                      ; ((NULL L) T)
24    (CONST&PUSH 6)                      ; IFN
25    (LOAD&PUSH 5)
26    (CONST 7)                           ; ((CAR L))
27    (CONS&PUSH)
28    (CONST 8)                           ; ((RETURN NIL))
29    (LIST*&PUSH 2)
31    (LIST 4)
33    (SKIP&RET 5)
35    L35
35    (LOAD&PUSH 2)
36    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
38    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO MAPOR #'LIST ...)-11|
(CONST 0) = MAPOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAPOR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAPOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAPOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAPOR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MAPOR
10    (SKIP&RET 1)


Disassembly of function MAPOR
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DO
(CONST 3) = L
(CONST 4) = ((CDR L))
(CONST 5) = ((NULL L))
(CONST 6) = IF
(CONST 7) = FUNCALL
(CONST 8) = ((CAR L))
(CONST 9) = ((RETURN T))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
31 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L37)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; DO
16    (CONST&PUSH 3)                      ; L
17    (LOAD&PUSH 2)
18    (CONST 4)                           ; ((CDR L))
19    (LIST*&PUSH 2)
21    (LIST&PUSH 1)
23    (CONST&PUSH 5)                      ; ((NULL L))
24    (CONST&PUSH 6)                      ; IF
25    (CONST&PUSH 7)                      ; FUNCALL
26    (LOAD&PUSH 6)
27    (CONST 8)                           ; ((CAR L))
28    (LIST*&PUSH 2)
30    (CONST 9)                           ; ((RETURN T))
31    (LIST*&PUSH 2)
33    (LIST 4)
35    (SKIP&RET 5)
37    L37
37    (LOAD&PUSH 2)
38    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
40    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO MAPLAC #'LIST ...)-12|
(CONST 0) = MAPLAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAPLAC>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAPLAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAPLAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAPLAC>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MAPLAC
10    (SKIP&RET 1)


Disassembly of function MAPLAC
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DO
(CONST 3) = L
(CONST 4) = ((CDR L))
(CONST 5) = ((NULL L))
(CONST 6) = RPLACA
(CONST 7) = FUNCALL
(CONST 8) = ((CAR L))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
31 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L37)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; DO
16    (CONST&PUSH 3)                      ; L
17    (LOAD&PUSH 2)
18    (CONST 4)                           ; ((CDR L))
19    (LIST*&PUSH 2)
21    (LIST&PUSH 1)
23    (CONST&PUSH 5)                      ; ((NULL L))
24    (CONST&PUSH 6)                      ; RPLACA
25    (CONST&PUSH 3)                      ; L
26    (CONST&PUSH 7)                      ; FUNCALL
27    (LOAD&PUSH 7)
28    (CONST 8)                           ; ((CAR L))
29    (LIST*&PUSH 2)
31    (LIST&PUSH 3)
33    (LIST 4)
35    (SKIP&RET 5)
37    L37
37    (LOAD&PUSH 2)
38    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
40    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO PUT (A B C) ...)-13|
(CONST 0) = PUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PUT>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; PUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PUT>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; PUT
10    (SKIP&RET 1)


Disassembly of function PUT
(CONST 0) = 4
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = PUTPROP
1 required argument
1 optional argument
No rest parameter
No keyword parameters
26 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 4
4     (CALLSR&JMPIF 1 46 L28)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CONST&PUSH 2)                      ; PUTPROP
21    (LOAD&PUSH 3)
22    (LOAD&PUSH 3)
23    (LOAD&PUSH 3)
24    (LIST 4)
26    (SKIP&RET 6)
28    L28
28    (LOAD&PUSH 2)
29    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
31    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO COPYP (L) ...)-14|
(CONST 0) = COPYP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COPYP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; COPYP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COPYP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COPYP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; COPYP
10    (SKIP&RET 1)


Disassembly of function COPYP
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CONS
(CONST 3) = CAR
(CONST 4) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
20 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L24)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CONS
12    (CONST&PUSH 3)                      ; CAR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (CONST&PUSH 4)                      ; CDR
17    (LOAD&PUSH 3)
18    (LIST&PUSH 2)
20    (LIST 3)
22    (SKIP&RET 4)
24    L24
24    (LOAD&PUSH 2)
25    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
27    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO COPYL (L) ...)-15|
(CONST 0) = COPYL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COPYL>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; COPYL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COPYL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COPYL>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; COPYL
10    (SKIP&RET 1)


Disassembly of function COPYL
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = APPEND
(CONST 3) = (NIL)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L18)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; APPEND
12    (LOAD&PUSH 1)
13    (CONST 3)                           ; (NIL)
14    (LIST* 2)
16    (SKIP&RET 4)
18    L18
18    (LOAD&PUSH 2)
19    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
21    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO ECONS (X Y) ...)-16|
(CONST 0) = ECONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ECONS>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; ECONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ECONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ECONS>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; ECONS
10    (SKIP&RET 1)


Disassembly of function ECONS
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = APPEND
(CONST 3) = LIST
1 required argument
1 optional argument
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L25)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; APPEND
16    (LOAD&PUSH 2)
17    (CONST&PUSH 3)                      ; LIST
18    (LOAD&PUSH 3)
19    (LIST&PUSH 2)
21    (LIST 3)
23    (SKIP&RET 5)
25    L25
25    (LOAD&PUSH 2)
26    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
28    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-2|
(CONST 0) = CAAADAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CAAADAR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CAAADAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CAAADAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CAAADAR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CAAADAR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CAAADR
(CONST 3) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CAAADR
12    (CONST&PUSH 3)                      ; CAR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-3|
(CONST 0) = CAAADDR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CAAADDR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CAAADDR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CAAADDR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CAAADDR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CAAADDR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CAAADR
(CONST 3) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CAAADR
12    (CONST&PUSH 3)                      ; CDR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-4|
(CONST 0) = CAADAAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CAADAAR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CAADAAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CAADAAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CAADAAR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CAADAAR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CAADAR
(CONST 3) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CAADAR
12    (CONST&PUSH 3)                      ; CAR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-5|
(CONST 0) = CAADADR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CAADADR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CAADADR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CAADADR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CAADADR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CAADADR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CAADAR
(CONST 3) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CAADAR
12    (CONST&PUSH 3)                      ; CDR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-6|
(CONST 0) = CADAAAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CADAAAR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CADAAAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CADAAAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CADAAAR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CADAAAR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CADAAR
(CONST 3) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CADAAR
12    (CONST&PUSH 3)                      ; CAR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-7|
(CONST 0) = CADADDR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CADADDR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CADADDR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CADADDR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CADADDR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CADADDR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CADADR
(CONST 3) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CADADR
12    (CONST&PUSH 3)                      ; CDR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-8|
(CONST 0) = CADDAAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CADDAAR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CADDAAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CADDAAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CADDAAR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CADDAAR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CADDAR
(CONST 3) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CADDAR
12    (CONST&PUSH 3)                      ; CAR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-9|
(CONST 0) = CADDDAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CADDDAR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CADDDAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CADDDAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CADDDAR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CADDDAR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CADDDR
(CONST 3) = CAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CADDDR
12    (CONST&PUSH 3)                      ; CAR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-10|
(CONST 0) = CDADADR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CDADADR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CDADADR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CDADADR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CDADADR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CDADADR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CDADAR
(CONST 3) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CDADAR
12    (CONST&PUSH 3)                      ; CDR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-11|
(CONST 0) = CDADDDR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CDADDDR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CDADDDR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CDADDDR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CDADDDR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function CDADDDR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CDADDR
(CONST 3) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CDADDR
12    (CONST&PUSH 3)                      ; CDR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(PROGN 'COMPILE (DEFMACRO CAAADAR # ...) ...)-17-12|
(CONST 0) = CDDDDDR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CDDDDDR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CDDDDDR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CDDDDDR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CDDDDDR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; CDDDDDR
10    (SKIP&RET 1)


Disassembly of function CDDDDDR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = CDDDDR
(CONST 3) = CDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L20)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; CDDDDR
12    (CONST&PUSH 3)                      ; CDR
13    (LOAD&PUSH 2)
14    (LIST&PUSH 2)
16    (LIST 2)
18    (SKIP&RET 4)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
23    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO TELL (&REST ARGS) ...)-18|
(CONST 0) = TELL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TELL>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; TELL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TELL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TELL>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; TELL
10    (SKIP&RET 1)


Disassembly of function TELL
(CONST 0) = DISPLA
(CONST 1) = LIST
(CONST 2) = '(MTEXT)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; DISPLA
3     (CONST&PUSH 1)                      ; LIST
4     (CONST&PUSH 2)                      ; '(MTEXT)
5     (LOAD 3)
6     (LIST*&PUSH 2)
8     (LIST 2)
10    (SKIP&RET 4)


Disassembly of function #:|(DECLARE-TOP (SPECIAL NAME BAS ...) (*EXPR MODE))-19|
(CONST 0) = (SPECIAL NAME BAS MOBJECTS SELECTOR)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL NAME BAS MOBJECTS ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (SKIP&RET 1)


Disassembly of function #:|(SETQ MOBJECTS NIL)-20|
(CONST 0) = MOBJECTS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (MOBJECTS)
3 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; MOBJECTS
3     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MODE (C-MODE S-MODE A-MODE) ...)-21|
(CONST 0) = MODE
(CONST 1) = (C-MODE S-MODE A-MODE)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MODE
1     (CONST&PUSH 0)                      ; MODE
2     (CONST&PUSH 1)                      ; (C-MODE S-MODE A-MODE)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO C-MODE (&REST L) ...)-22|
(CONST 0) = C-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE C-MODE>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; C-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; C-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE C-MODE>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; C-MODE
10    (SKIP&RET 1)


Disassembly of function C-MODE
(CONST 0) = LIST
1 required argument
1 optional argument
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; LIST
3     (LOAD 1)
4     (CONS)
5     (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO S-MODE (&REST X) ...)-23|
(CONST 0) = S-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE S-MODE>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; S-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; S-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE S-MODE>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; S-MODE
10    (SKIP&RET 1)


Disassembly of function S-MODE
(CONST 0) = S-MODE
(CONST 1) = C
(CONST 2) = CAR
(CONST 3) = SEL
(CONST 4) = CADR
(CONST 5) = _
(CONST 6) = CADDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
34 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; S-MODE
3     (LOAD&CONS&STORE 0)
5     (CDR)
6     (CDR)
7     (CAR&PUSH)
8     (JMPIFEQTO 1 L34)                   ; C
11    (LOAD 0)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (JMPIFEQTO 3 L37)                   ; SEL
18    (LOAD 0)
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (JMPIFNOTEQTO 5 L40)                ; _
25    (CONST 6)                           ; CADDR
26    L26
26    (PUSH)
27    (LOAD 1)
28    (CDR)
29    (CAR&PUSH)
30    (LIST 2)
32    (SKIP&RET 4)
34    L34
34    (CONST 2)                           ; CAR
35    (JMP L26)
37    L37
37    (CONST 4)                           ; CADR
38    (JMP L26)
40    L40
40    (NIL)
41    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO A-MODE (&REST X) ...)-24|
(CONST 0) = A-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE A-MODE>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; A-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; A-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE A-MODE>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; A-MODE
10    (SKIP&RET 1)


Disassembly of function A-MODE
(CONST 0) = A-MODE
(CONST 1) = C
(CONST 2) = RPLACA
(CONST 3) = (CADR X)
(CONST 4) = SEL
(CONST 5) = CDR
(CONST 6) = _
(CONST 7) = CDDR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
45 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; A-MODE
3     (LOAD&CONS&STORE 0)
5     (CDR)
6     (CDR)
7     (CAR&PUSH)
8     (JMPIFEQTO 1 L43)                   ; C
11    (LOAD 0)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (JMPIFEQTO 4 L47)                   ; SEL
18    (LOAD 0)
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (JMPIFNOTEQTO 6 L51)                ; _
25    (CONST&PUSH 2)                      ; RPLACA
26    (CONST 7)                           ; CDDR
27    L27
27    (PUSH)
28    (LOAD 2)
29    (CDR)
30    (CAR&PUSH)
31    (LIST 2)
33    L33
33    (PUSH)
34    (LOAD 2)
35    (CDR)
36    (CDR)
37    (CDR)
38    (CAR&PUSH)
39    (LIST 3)
41    (SKIP&RET 4)
43    L43
43    (CONST&PUSH 2)                      ; RPLACA
44    (CONST 3)                           ; (CADR X)
45    (JMP L33)
47    L47
47    (CONST&PUSH 2)                      ; RPLACA
48    (CONST 5)                           ; CDR
49    (JMP L27)
51    L51
51    (NIL)
52    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO DEFMODE (&REST X) ...)-25|
(CONST 0) = DEFMODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFMODE>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFMODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFMODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFMODE>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEFMODE
10    (SKIP&RET 1)


Disassembly of function DEFMODE
(CONST 0) = DEFMODE
(CONST 1) = SELECTOR
(CONST 2) = MEMQ
(CONST 3) = DEFINE-MODE
(CONST 4) = EVAL
(CONST 5) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
34 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; DEFMODE
3     (LOAD&CONS&STORE 0)
5     (CONST&PUSH 1)                      ; SELECTOR
6     (LOAD 1)
7     (CDR)
8     (CDR)
9     (CDR)
10    (CDR&PUSH)
11    (CALL2 2)                           ; MEMQ
13    (BIND 1)                            ; SELECTOR
15    (LOAD 3)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD 4)
19    (CDR)
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (CALL2 3)                           ; DEFINE-MODE
25    (CONST&PUSH 4)                      ; EVAL
26    (LOAD 4)
27    (CDR)
28    (CDR)
29    (CDR)
30    (CDR&PUSH)
31    (CALLSR 0 24)                       ; MAPC
34    (CONST&PUSH 5)                      ; QUOTE
35    (LOAD 4)
36    (CDR)
37    (CAR&PUSH)
38    (LIST 2)
40    (UNBIND1)
41    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DEFINE-MODE (NAME DESC &AUX) ...)-26|
(CONST 0) = DEFINE-MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFINE-MODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFINE-MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFINE-MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFINE-MODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFINE-MODE
8     (SKIP&RET 1)


Disassembly of function DEFINE-MODE
(CONST 0) = NAME
(CONST 1) = "C-"
(CONST 2) = "S-"
(CONST 3) = "A-"
(CONST 4) = DEFC
(CONST 5) = DEFINE-MACRO
(CONST 6) = DEFS
(CONST 7) = DEFA
(CONST 8) = MODE
(CONST 9) = PUTPROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NAME)
71 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; NAME
3     (PUSH-NIL 3)
5     (PUSH-UNBOUND 2)
7     (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
9     (GETVALUE&PUSH 0)                   ; NAME
11    (CONST&PUSH 1)                      ; "C-"
12    (LOAD&PUSH 2)
13    (PUSH-UNBOUND 2)
15    (CALLS1 137)                        ; WRITE-STRING
17    (LOAD&PUSH 0)
18    (LOAD&PUSH 2)
19    (CALLS1 132)                        ; PRINC
21    (SKIP 1)
23    (LOAD&PUSH 0)
24    (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
27    (PUSH-UNBOUND 1)
29    (CALLS1&STORE 212 2)                ; INTERN
32    (PUSH-UNBOUND 2)
34    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
36    (GETVALUE&PUSH 0)                   ; NAME
38    (CONST&PUSH 2)                      ; "S-"
39    (LOAD&PUSH 2)
40    (PUSH-UNBOUND 2)
42    (CALLS1 137)                        ; WRITE-STRING
44    (LOAD&PUSH 0)
45    (LOAD&PUSH 2)
46    (CALLS1 132)                        ; PRINC
48    (SKIP 1)
50    (LOAD&PUSH 0)
51    (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
54    (PUSH-UNBOUND 1)
56    (CALLS1&STORE 212 1)                ; INTERN
59    (PUSH-UNBOUND 2)
61    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
63    (GETVALUE&PUSH 0)                   ; NAME
65    (CONST&PUSH 3)                      ; "A-"
66    (LOAD&PUSH 2)
67    (PUSH-UNBOUND 2)
69    (CALLS1 137)                        ; WRITE-STRING
71    (LOAD&PUSH 0)
72    (LOAD&PUSH 2)
73    (CALLS1 132)                        ; PRINC
75    (SKIP 1)
77    (LOAD&PUSH 0)
78    (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
81    (PUSH-UNBOUND 1)
83    (CALLS1&STORE 212 0)                ; INTERN
86    (LOAD&PUSH 2)
87    (LOAD&PUSH 8)
88    (CALL1&PUSH 4)                      ; DEFC
90    (CALL2 5)                           ; DEFINE-MACRO
92    (LOAD&PUSH 1)
93    (LOAD&PUSH 8)
94    (CALL1&PUSH 6)                      ; DEFS
96    (CALL2 5)                           ; DEFINE-MACRO
98    (LOAD&PUSH 0)
99    (LOAD&PUSH 8)
100   (CALL1&PUSH 7)                      ; DEFA
102   (CALL2 5)                           ; DEFINE-MACRO
104   (GETVALUE&PUSH 0)                   ; NAME
106   (LOAD&PUSH 3)
107   (LOAD&PUSH 3)
108   (LOAD&PUSH 3)
109   (LIST&PUSH 3)
111   (CONST&PUSH 8)                      ; MODE
112   (CALL 3 9)                          ; PUTPROP
115   (GETVALUE 0)                        ; NAME
117   (SKIP 3)
119   (UNBIND1)
120   (SKIP&RET 3)


Disassembly of function #:|(DEFUN DEFC (DESC) ...)-27|
(CONST 0) = DEFC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFC
8     (SKIP&RET 1)


Disassembly of function DEFC
(CONST 0) = X
(CONST 1) = BAS
(CONST 2) = LAMBDA
(CONST 3) = (X &OPTIONAL ENV)
(CONST 4) = ENV
(CONST 5) = DEFC1
(CONST 6) = FUNCTION
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (CONST 0)                           ; X
1     (BIND 1)                            ; BAS
3     (CONST&PUSH 2)                      ; LAMBDA
4     (CONST&PUSH 3)                      ; (X &OPTIONAL ENV)
5     (CONST&PUSH 4)                      ; ENV
6     (LOAD&PUSH 7)
7     (CALL1&PUSH 5)                      ; DEFC1
9     (LIST&PUSH 4)
11    (CONST&PUSH 6)                      ; FUNCTION
12    (CALLS2 42)                         ; COERCE
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DEFC1 (DESC) ...)-28|
(CONST 0) = DEFC1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFC1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFC1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFC1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFC1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFC1
8     (SKIP&RET 1)


Disassembly of function DEFC1
(CONST 0) = QUOTE
(CONST 1) = SELECTOR
(CONST 2) = CDR
(CONST 3) = BAS
(CONST 4) = CAR
(CONST 5) = ATOM
(CONST 6) = LIST
(CONST 7) = 'C-ATOM
(CONST 8) = CADR
(CONST 9) = ((CONS 'LIST (CDR X)))
(CONST 10) = CONS
(CONST 11) = 'CONS
(CONST 12) = 'LIST
(CONST 13) = STRUCT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BAS)
writes special variable : (BAS)
95 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L39)
3     (LOAD&CAR&PUSH 1)
5     (JMPIFEQTO 1 L50)                   ; SELECTOR
8     (LOAD&CAR&PUSH 1)
10    (JMPIFEQTO 5 L68)                   ; ATOM
13    (LOAD&CAR&PUSH 1)
15    (JMPIFEQTO 10 L87)                  ; CONS
19    (LOAD&CAR&PUSH 1)
21    (JMPIFEQTO 6 L106)                  ; LIST
25    (LOAD&CAR&PUSH 1)
27    (JMPIFEQTO 13 L133)                 ; STRUCT
31    (CONST 0)                           ; QUOTE
32    L32
32    (PUSH)
33    (LOAD 2)
34    L34
34    (PUSH)
35    (LIST 2)
37    (SKIP&RET 2)
39    L39
39    (CONST 0)                           ; QUOTE
40    (JMP L32)
42    L42
42    (CONST&PUSH 0)                      ; QUOTE
43    (LOAD 2)
44    (CDR)
45    (CDR)
46    (CDR)
47    (CAR)
48    (JMP L34)
50    L50
50    (LOAD 1)
51    (CDR)
52    (CDR)
53    (CDR)
54    (JMPIF L42)
56    (CONST&PUSH 2)                      ; CDR
57    (GETVALUE&PUSH 3)                   ; BAS
59    (LIST 2)
61    (SETVALUE 3)                        ; BAS
63    (CONST&PUSH 4)                      ; CAR
64    (GETVALUE 3)                        ; BAS
66    (JMP L34)
68    L68
68    (CONST&PUSH 6)                      ; LIST
69    (CONST&PUSH 7)                      ; 'C-ATOM
70    (CONST&PUSH 0)                      ; QUOTE
71    (CONST&PUSH 0)                      ; QUOTE
72    (CONST&PUSH 8)                      ; CADR
73    (LOAD&CDR&PUSH 6)
75    (CALLSR&PUSH 0 22)                  ; MAPCAR
78    (LIST&PUSH 2)
80    (LIST&PUSH 2)
82    (CONST 9)                           ; ((CONS 'LIST (CDR X)))
83    (LIST* 3)
85    (SKIP&RET 2)
87    L87
87    (CONST&PUSH 6)                      ; LIST
88    (CONST&PUSH 11)                     ; 'CONS
89    (LOAD 3)
90    (CDR)
91    (CAR&PUSH)
92    (JSR&PUSH L0)
95    (LOAD 4)
96    (CDR)
97    (CDR)
98    (CAR&PUSH)
99    (JSR&PUSH L0)
102   (LIST 4)
104   (SKIP&RET 2)
106   L106
106   (LOAD&CDR&PUSH 1)
108   (NIL&PUSH)
109   (LOAD&JMPIFNOT 1 L124)
112   L112
112   (LOAD&CAR&PUSH 1)
114   (JSR&PUSH L0)
117   (LOAD&CONS&STORE 0)
119   (LOAD&CDR&STORE 1)
121   (LOAD&JMPIF 1 L112)
124   L124
124   (CONST&PUSH 6)                      ; LIST
125   (CONST&PUSH 12)                     ; 'LIST
126   (LOAD&PUSH 2)
127   (CALLS2 73)                         ; NREVERSE
129   (LIST* 2)
131   (SKIP&RET 4)
133   L133
133   (CONST&PUSH 6)                      ; LIST
134   (LOAD 2)
135   (CDR)
136   (CONS&PUSH)
137   (JMPTAIL 1 3 L0)


Disassembly of function #:|(DEFUN DEFS (DESC) ...)-29|
(CONST 0) = DEFS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFS
8     (SKIP&RET 1)


Disassembly of function DEFS
(CONST 0) = LAMBDA
(CONST 1) = (X &OPTIONAL ENV)
(CONST 2) = ENV
(CONST 3) = COND
(CONST 4) = (CADR X)
(CONST 5) = DEFS1
(CONST 6) = FUNCTION
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; LAMBDA
1     (CONST&PUSH 1)                      ; (X &OPTIONAL ENV)
2     (CONST&PUSH 2)                      ; ENV
3     (CONST&PUSH 3)                      ; COND
4     (LOAD&PUSH 5)
5     (CONST&PUSH 4)                      ; (CADR X)
6     (NIL&PUSH)
7     (CALL&PUSH 3 5)                     ; DEFS1
10    (CALLS2 73)                         ; NREVERSE
12    (CONS&PUSH)
13    (LIST&PUSH 4)
15    (CONST&PUSH 6)                      ; FUNCTION
16    (CALLS2 42)                         ; COERCE
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DEFS1 (DESC BAS RESULT) ...)-30|
(CONST 0) = DEFS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFS1
8     (SKIP&RET 1)


Disassembly of function DEFS1
(CONST 0) = BAS
(CONST 1) = SELECTOR
(CONST 2) = NAME
(CONST 3) = MODES
(CONST 4) = ZL-GET
(CONST 5) = PUTPROP
(CONST 6) = SELS
(CONST 7) = DEFINE-MACRO
(CONST 8) = EQ
(CONST 9) = QUOTE
(CONST 10) = ((CADDR X))
(CONST 11) = ATOM
(CONST 12) = MEMQ
(CONST 13) = (CADDR X)
(CONST 14) = CADR
(CONST 15) = LIST
(CONST 16) = 'ZL-GET
(CONST 17) = ((LIST 'QUOTE (CADDR X)))
(CONST 18) = CONS
(CONST 19) = 'CAR
(CONST 20) = 'CDR
(CONST 21) = 'CAR
(CONST 22) = 'CDR
(CONST 23) = STRUCT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (BAS SELECTOR NAME)
writes special variable : (BAS)
200 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; BAS
3     (LOAD 6)
4     (JMPIFATOM L116)
7     (LOAD&CAR&PUSH 6)
9     (JMPIFEQTO 1 L120)                  ; SELECTOR
13    (LOAD&CAR&PUSH 6)
15    (JMPIFNOTEQTO 11 L248)              ; ATOM
19    (LOAD&CDR&PUSH 6)
21    (LOAD&JMPIFNOT 0 L86)
24    L24
24    (LOAD 0)
25    (CAR)
26    (CDR)
27    (CAR&PUSH)
28    (GETVALUE&PUSH 2)                   ; NAME
30    (LOAD 2)
31    (CAR)
32    (CDR)
33    (CDR)
34    (CAR)
35    (CONS&PUSH)
36    (LOAD 2)
37    (CAR)
38    (CDR)
39    (CAR&PUSH)
40    (CONST&PUSH 3)                      ; MODES
41    (CALL2 4)                           ; ZL-GET
43    (CONS&PUSH)
44    (CONST&PUSH 3)                      ; MODES
45    (CALL 3 5)                          ; PUTPROP
48    (GETVALUE&PUSH 2)                   ; NAME
50    (LOAD 1)
51    (CAR)
52    (CDR)
53    (CAR&PUSH)
54    (LOAD 2)
55    (CAR)
56    (CDR)
57    (CDR)
58    (CAR)
59    (CONS&PUSH)
60    (GETVALUE&PUSH 2)                   ; NAME
62    (CONST&PUSH 6)                      ; SELS
63    (CALL2 4)                           ; ZL-GET
65    (CONS&PUSH)
66    (CONST&PUSH 6)                      ; SELS
67    (CALL 3 5)                          ; PUTPROP
70    (GETVALUE 1)                        ; SELECTOR
72    (JMPIFNOT L81)
74    (LOAD 0)
75    (CAR)
76    (CDR)
77    (CAR&PUSH)
78    (CONST&PUSH 1)                      ; SELECTOR
79    (CALL2 7)                           ; DEFINE-MACRO
81    L81
81    (LOAD&CDR&STORE 0)
83    (LOAD&JMPIF 0 L24)
86    L86
86    (SKIP 1)
88    (CONST&PUSH 12)                     ; MEMQ
89    (CONST&PUSH 13)                     ; (CADDR X)
90    (CONST&PUSH 9)                      ; QUOTE
91    (CONST&PUSH 14)                     ; CADR
92    (LOAD&CDR&PUSH 10)
94    (CALLSR&PUSH 0 22)                  ; MAPCAR
97    (LIST&PUSH 2)
99    (LIST&PUSH 3)
101   (CONST&PUSH 15)                     ; LIST
102   (CONST&PUSH 16)                     ; 'ZL-GET
103   (GETVALUE&PUSH 0)                   ; BAS
105   (CONST 17)                          ; ((LIST 'QUOTE (CADDR X)))
106   (LIST* 3)
108   L108
108   (PUSH)
109   (LIST&PUSH 2)
111   (LOAD 5)
112   (CONS)
113   (JMP L278)
116   L116
116   (LOAD 4)
117   (JMP L278)
120   L120
120   (LOAD 6)
121   (CDR)
122   (CAR&PUSH)
123   (GETVALUE&PUSH 2)                   ; NAME
125   (LOAD 8)
126   (CDR)
127   (CDR)
128   (CAR)
129   (CONS&PUSH)
130   (LOAD 8)
131   (CDR)
132   (CAR&PUSH)
133   (CONST&PUSH 3)                      ; MODES
134   (CALL2 4)                           ; ZL-GET
136   (CONS&PUSH)
137   (CONST&PUSH 3)                      ; MODES
138   (CALL 3 5)                          ; PUTPROP
141   (GETVALUE&PUSH 2)                   ; NAME
143   (LOAD 7)
144   (CDR)
145   (CAR&PUSH)
146   (LOAD 8)
147   (CDR)
148   (CDR)
149   (CAR)
150   (CONS&PUSH)
151   (GETVALUE&PUSH 2)                   ; NAME
153   (CONST&PUSH 6)                      ; SELS
154   (CALL2 4)                           ; ZL-GET
156   (CONS&PUSH)
157   (CONST&PUSH 6)                      ; SELS
158   (CALL 3 5)                          ; PUTPROP
161   (GETVALUE 1)                        ; SELECTOR
163   (JMPIFNOT L171)
165   (LOAD 6)
166   (CDR)
167   (CAR&PUSH)
168   (CONST&PUSH 1)                      ; SELECTOR
169   (CALL2 7)                           ; DEFINE-MACRO
171   L171
171   (CONST&PUSH 8)                      ; EQ
172   (CONST&PUSH 9)                      ; QUOTE
173   (LOAD 8)
174   (CDR)
175   (CAR&PUSH)
176   (LIST&PUSH 2)
178   (CONST 10)                          ; ((CADDR X))
179   (LIST*&PUSH 2)
181   (GETVALUE 0)                        ; BAS
183   (JMP L108)
186   L186
186   (LOAD 6)
187   (CDR)
188   (CAR&PUSH)
189   (CONST&PUSH 15)                     ; LIST
190   (CONST&PUSH 19)                     ; 'CAR
191   (GETVALUE&PUSH 0)                   ; BAS
193   (LIST&PUSH 3)
195   (LOAD&PUSH 6)
196   (JSR L0)
199   (STORE 4)
200   (LOAD 6)
201   (CDR)
202   (CDR)
203   (CAR&PUSH)
204   (CONST&PUSH 15)                     ; LIST
205   (CONST&PUSH 20)                     ; 'CDR
206   (GETVALUE&PUSH 0)                   ; BAS
208   (LIST 3)
210   (JMP L270)
212   L212
212   (LOAD&CDR&PUSH 6)
214   (LOAD&JMPIFNOT 0 L243)
217   L217
217   (LOAD&CAR&PUSH 0)
219   (CONST&PUSH 15)                     ; LIST
220   (CONST&PUSH 21)                     ; 'CAR
221   (GETVALUE&PUSH 0)                   ; BAS
223   (LIST&PUSH 3)
225   (LOAD&PUSH 7)
226   (JSR L0)
229   (STORE 5)
230   (CONST&PUSH 15)                     ; LIST
231   (CONST&PUSH 22)                     ; 'CDR
232   (GETVALUE&PUSH 0)                   ; BAS
234   (LIST 3)
236   (SETVALUE 0)                        ; BAS
238   (LOAD&CDR&STORE 0)
240   (LOAD&JMPIF 0 L217)
243   L243
243   (SKIP 1)
245   (LOAD 4)
246   (JMP L278)
248   L248
248   (LOAD&CAR&PUSH 6)
250   (JMPIFEQTO 18 L186)                 ; CONS
254   (LOAD&CAR&PUSH 6)
256   (JMPIFEQTO 15 L212)                 ; LIST
259   (LOAD&CAR&PUSH 6)
261   (JMPIFNOTEQTO 23 L277)              ; STRUCT
264   (CONST&PUSH 15)                     ; LIST
265   (LOAD 7)
266   (CDR)
267   (CONS&PUSH)
268   (GETVALUE 0)                        ; BAS
270   L270
270   (PUSH)
271   (LOAD&PUSH 6)
272   (JSR L0)
275   (JMP L278)
277   L277
277   (LOAD 4)
278   L278
278   (UNBIND1)
279   (SKIP&RET 4)


Disassembly of function #:|(DEFUN DEFA (DESC) ...)-31|
(CONST 0) = DEFA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFA
8     (SKIP&RET 1)


Disassembly of function DEFA
(CONST 0) = LAMBDA
(CONST 1) = (X &OPTIONAL ENV)
(CONST 2) = ENV
(CONST 3) = COND
(CONST 4) = (CADR X)
(CONST 5) = DEFA1
(CONST 6) = FUNCTION
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; LAMBDA
1     (CONST&PUSH 1)                      ; (X &OPTIONAL ENV)
2     (CONST&PUSH 2)                      ; ENV
3     (CONST&PUSH 3)                      ; COND
4     (LOAD&PUSH 5)
5     (CONST&PUSH 4)                      ; (CADR X)
6     (PUSH-NIL 2)
8     (CALL&PUSH 4 5)                     ; DEFA1
11    (CALLS2 73)                         ; NREVERSE
13    (CONS&PUSH)
14    (LIST&PUSH 4)
16    (CONST&PUSH 6)                      ; FUNCTION
17    (CALLS2 42)                         ; COERCE
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DEFA1 (DESC BAS CDR ...) ...)-32|
(CONST 0) = DEFA1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFA1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFA1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFA1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFA1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFA1
8     (SKIP&RET 1)


Disassembly of function DEFA1
(CONST 0) = BAS
(CONST 1) = SELECTOR
(CONST 2) = LIST
(CONST 3) = 'CAR
(CONST 4) = 'RPLACA
(CONST 5) = ((CADDDR X))
(CONST 6) = 'CDR
(CONST 7) = 'RPLACD
(CONST 8) = ((CADDDR X))
(CONST 9) = EQ
(CONST 10) = QUOTE
(CONST 11) = ((CADDR X))
(CONST 12) = ATOM
(CONST 13) = (T (LIST 'A-ATOM (CADR X) (LIST 'QUOTE (CADDR X)) (CADDDR X)))
(CONST 14) = CONS
(CONST 15) = 'CAR
(CONST 16) = 'CDR
(CONST 17) = 'CAR
(CONST 18) = 'CDR
(CONST 19) = STRUCT
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (BAS)
writes special variable : (BAS)
123 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; BAS
3     (LOAD 7)
4     (JMPIFATOM L49)
6     (LOAD&CAR&PUSH 7)
8     (JMPIFEQTO 1 L65)                   ; SELECTOR
11    (LOAD&CAR&PUSH 7)
13    (JMPIFEQTO 12 L103)                 ; ATOM
17    (LOAD&CAR&PUSH 7)
19    (JMPIFEQTO 14 L109)                 ; CONS
23    (LOAD&CAR&PUSH 7)
25    (JMPIFEQTO 2 L138)                  ; LIST
29    (LOAD&CAR&PUSH 7)
31    (JMPIFNOTEQTO 19 L175)              ; STRUCT
35    (CONST&PUSH 2)                      ; LIST
36    (LOAD 8)
37    (CDR)
38    (CONS&PUSH)
39    (GETVALUE&PUSH 0)                   ; BAS
41    (LOAD 7)
42    L42
42    (PUSH)
43    (LOAD&PUSH 7)
44    (JSR L0)
46    (JMP L176)
49    L49
49    (LOAD 4)
50    (JMP L176)
53    L53
53    (CONST&PUSH 2)                      ; LIST
54    (CONST&PUSH 3)                      ; 'CAR
55    (CONST&PUSH 2)                      ; LIST
56    (CONST&PUSH 4)                      ; 'RPLACA
57    (GETVALUE 0)                        ; BAS
59    (CDR)
60    (CDR)
61    (CAR&PUSH)
62    (CONST 5)                           ; ((CADDDR X))
63    (JMP L78)
65    L65
65    (LOAD&JMPIFNOT 5 L53)
68    (CONST&PUSH 2)                      ; LIST
69    (CONST&PUSH 6)                      ; 'CDR
70    (CONST&PUSH 2)                      ; LIST
71    (CONST&PUSH 7)                      ; 'RPLACD
72    (GETVALUE 0)                        ; BAS
74    (CDR)
75    (CDR)
76    (CAR&PUSH)
77    (CONST 8)                           ; ((CADDDR X))
78    L78
78    (LIST*&PUSH 3)
80    (LIST 3)
82    (SETVALUE 0)                        ; BAS
84    (CONST&PUSH 9)                      ; EQ
85    (CONST&PUSH 10)                     ; QUOTE
86    (LOAD 9)
87    (CDR)
88    (CAR&PUSH)
89    (LIST&PUSH 2)
91    (CONST 11)                          ; ((CADDR X))
92    (LIST*&PUSH 2)
94    (GETVALUE&PUSH 0)                   ; BAS
96    (LIST&PUSH 2)
98    (LOAD 5)
99    (CONS)
100   (JMP L176)
103   L103
103   (CONST&PUSH 13)                     ; (T (LIST 'A-ATOM (CADR X) ...))
104   (LIST 1)
106   (JMP L176)
109   L109
109   (LOAD 7)
110   (CDR)
111   (CAR&PUSH)
112   (CONST&PUSH 2)                      ; LIST
113   (CONST&PUSH 15)                     ; 'CAR
114   (GETVALUE&PUSH 0)                   ; BAS
116   (LIST&PUSH 3)
118   (NIL&PUSH)
119   (LOAD&PUSH 7)
120   (JSR L0)
123   (STORE 4)
124   (LOAD 7)
125   (CDR)
126   (CDR)
127   (CAR&PUSH)
128   (CONST&PUSH 2)                      ; LIST
129   (CONST&PUSH 16)                     ; 'CDR
130   (GETVALUE&PUSH 0)                   ; BAS
132   (LIST&PUSH 3)
134   (T)
135   (JMP L42)
138   L138
138   (LOAD&CDR&PUSH 7)
140   (LOAD&JMPIFNOT 0 L170)
143   L143
143   (LOAD&CAR&PUSH 0)
145   (CONST&PUSH 2)                      ; LIST
146   (CONST&PUSH 17)                     ; 'CAR
147   (GETVALUE&PUSH 0)                   ; BAS
149   (LIST&PUSH 3)
151   (NIL&PUSH)
152   (LOAD&PUSH 8)
153   (JSR L0)
156   (STORE 5)
157   (CONST&PUSH 2)                      ; LIST
158   (CONST&PUSH 18)                     ; 'CDR
159   (GETVALUE&PUSH 0)                   ; BAS
161   (LIST 3)
163   (SETVALUE 0)                        ; BAS
165   (LOAD&CDR&STORE 0)
167   (LOAD&JMPIF 0 L143)
170   L170
170   (SKIP 1)
172   (LOAD 4)
173   (JMP L176)
175   L175
175   (LOAD 4)
176   L176
176   (UNBIND1)
177   (SKIP&RET 5)


Disassembly of function #:|(DEFUN MODE (X) ...)-33|
(CONST 0) = MODE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MODE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MODE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MODE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MODE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MODE
8     (SKIP&RET 1)


Disassembly of function MODE
(CONST 0) = MOBJECTS
(CONST 1) = ZL-ASSOC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (MOBJECTS)
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (GETVALUE&PUSH 0)                   ; MOBJECTS
3     (CALL2 1)                           ; ZL-ASSOC
5     (CDR)
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO MODEDECLARE (&REST L) ...)-34|
(CONST 0) = MODEDECLARE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MODEDECLARE>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MODEDECLARE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MODEDECLARE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MODEDECLARE>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MODEDECLARE
10    (SKIP&RET 1)


Disassembly of function MODEDECLARE
(CONST 0) = MODECLARE-INTERNAL
(CONST 1) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; MODECLARE-INTERNAL
3     (CONST&PUSH 1)                      ; QUOTE
4     (LOAD&PUSH 2)
5     (LIST&PUSH 2)
7     (LIST 2)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFUN MODEDECLARE-INTERNAL (X) ...)-35|
(CONST 0) = MODEDECLARE-INTERNAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MODEDECLARE-INTERNAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MODEDECLARE-INTERNAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MODEDECLARE-INTERNAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MODEDECLARE-INTERNAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MODEDECLARE-INTERNAL
8     (SKIP&RET 1)


Disassembly of function MODEDECLARE-INTERNAL
(CONST 0) = MOBJECTS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (MOBJECTS)
writes special variable : (MOBJECTS)
29 byte-code instructions:
0     (LOAD&PUSH 1)
1     (JMP L33)
3     L3
3     (LOAD&CAR&PUSH 0)
5     (LOAD&CDR&PUSH 0)
7     (LOAD&PUSH 0)
8     (JMP L25)
10    L10
10    (LOAD&CAR&PUSH 0)
12    (LOAD&PUSH 0)
13    (LOAD 4)
14    (CAR)
15    (CONS&PUSH)
16    (GETVALUE 0)                        ; MOBJECTS
18    (CONS)
19    (SETVALUE 0)                        ; MOBJECTS
21    (SKIP 1)
23    (LOAD&CDR&STORE 0)
25    L25
25    (LOAD&PUSH 0)
26    (CALLS1&JMPIFNOT 146 L10)           ; ENDP
29    (SKIP 3)
31    (LOAD&CDR&STORE 0)
33    L33
33    (LOAD&PUSH 0)
34    (CALLS1&JMPIFNOT 146 L3)            ; ENDP
37    (SKIP 1)
39    (LOAD 1)
40    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NDM-ERR (X) ...)-36|
(CONST 0) = NDM-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NDM-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NDM-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NDM-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NDM-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NDM-ERR
8     (SKIP&RET 1)


Disassembly of function NDM-ERR
(CONST 0) = "Cannot determine the mode of "
(CONST 1) = "without any special action"
(CONST 2) = "NDM-ERR"
(CONST 3) = CERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (PUSH-UNBOUND 1)
2     (CALLS1 139)                        ; TERPRI
4     (CONST&PUSH 0)                      ; "Cannot determine the mode of "
5     (PUSH-UNBOUND 1)
7     (CALLS1 132)                        ; PRINC
9     (LOAD&PUSH 1)
10    (PUSH-UNBOUND 1)
12    (CALLS1 132)                        ; PRINC
14    (CONST&PUSH 1)                      ; "without any special action"
15    (CONST&PUSH 2)                      ; "NDM-ERR"
16    (CALL2 3)                           ; CERROR
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NSM-ERR (X) ...)-37|
(CONST 0) = NSM-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NSM-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NSM-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NSM-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NSM-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NSM-ERR
8     (SKIP&RET 1)


Disassembly of function NSM-ERR
(CONST 0) = "No such mode as "
(CONST 1) = "without any special action"
(CONST 2) = "NSM-ERR"
(CONST 3) = CERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (PUSH-UNBOUND 1)
2     (CALLS1 139)                        ; TERPRI
4     (CONST&PUSH 0)                      ; "No such mode as "
5     (PUSH-UNBOUND 1)
7     (CALLS1 132)                        ; PRINC
9     (LOAD&PUSH 1)
10    (PUSH-UNBOUND 1)
12    (CALLS1 132)                        ; PRINC
14    (CONST&PUSH 1)                      ; "without any special action"
15    (CONST&PUSH 2)                      ; "NSM-ERR"
16    (CALL2 3)                           ; CERROR
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SEL-ERR (B S) ...)-38|
(CONST 0) = SEL-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SEL-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SEL-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SEL-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SEL-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SEL-ERR
8     (SKIP&RET 1)


Disassembly of function SEL-ERR
(CONST 0) = #\:
(CONST 1) = TYO
(CONST 2) = "is an impossible selection"
(CONST 3) = "without any special action"
(CONST 4) = "SEL-ERR"
(CONST 5) = CERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (PUSH-UNBOUND 1)
2     (CALLS1 139)                        ; TERPRI
4     (CONST&PUSH 0)                      ; #\:
5     (CALL1 1)                           ; TYO
7     (LOAD&PUSH 2)
8     (PUSH-UNBOUND 1)
10    (CALLS1 132)                        ; PRINC
12    (LOAD&JMPIFNOT 1 L29)
15    L15
15    (CONST&PUSH 0)                      ; #\:
16    (CALL1 1)                           ; TYO
18    (LOAD&CAR&PUSH 1)
20    (PUSH-UNBOUND 1)
22    (CALLS1 132)                        ; PRINC
24    (LOAD&CDR&STORE 1)
26    (LOAD&JMPIF 1 L15)
29    L29
29    (CONST&PUSH 2)                      ; "is an impossible selection"
30    (PUSH-UNBOUND 1)
32    (CALLS1 132)                        ; PRINC
34    (CONST&PUSH 3)                      ; "without any special action"
35    (CONST&PUSH 4)                      ; "SEL-ERR"
36    (CALL2 5)                           ; CERROR
38    (SKIP&RET 3)


Disassembly of function #:|(DEFUN IA-ERR (X) ...)-39|
(CONST 0) = IA-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IA-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IA-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IA-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IA-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IA-ERR
8     (SKIP&RET 1)


Disassembly of function IA-ERR
(CONST 0) = "Cannot assign "
(CONST 1) = "without any special action"
(CONST 2) = "IA-ERR"
(CONST 3) = CERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (PUSH-UNBOUND 1)
2     (CALLS1 139)                        ; TERPRI
4     (CONST&PUSH 0)                      ; "Cannot assign "
5     (PUSH-UNBOUND 1)
7     (CALLS1 132)                        ; PRINC
9     (LOAD&PUSH 1)
10    (PUSH-UNBOUND 1)
12    (CALLS1 132)                        ; PRINC
14    (CONST&PUSH 1)                      ; "without any special action"
15    (CONST&PUSH 2)                      ; "IA-ERR"
16    (CALL2 3)                           ; CERROR
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO SEL (&REST X) ...)-40|
(CONST 0) = SEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SEL>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; SEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SEL>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; SEL
10    (SKIP&RET 1)


Disassembly of function SEL
(CONST 0) = SEL
(CONST 1) = MODE
(CONST 2) = FSEL
(CONST 3) = SEL-ERR
(CONST 4) = ZL-GET
1 required argument
1 optional argument
No rest parameter
No keyword parameters
51 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; SEL
3     (LOAD&CONS&STORE 0)
5     (CDR)
6     (CAR&PUSH)
7     (CALL1&PUSH 1)                      ; MODE
9     (LOAD 1)
10    (CDR)
11    (CDR&PUSH)
12    (CALL2&PUSH 2)                      ; FSEL
14    (LOAD&JMPIFNOT 0 L23)
17    (LOAD 1)
18    (CDR)
19    (CAR)
20    (STORE 1)
21    (JMP L56)
23    L23
23    (LOAD 1)
24    (CDR)
25    (CAR&PUSH)
26    (LOAD 2)
27    (CDR)
28    (CDR&PUSH)
29    (CALL2 3)                           ; SEL-ERR
31    (SKIP&RET 5)
33    L33
33    (LOAD&CAR&PUSH 0)
35    (CONST&PUSH 1)                      ; MODE
36    (CALL2 4)                           ; ZL-GET
38    (CDR)
39    (CAR&PUSH)
40    (LOAD&PUSH 1)
41    (LOAD&PUSH 3)
42    (CALLS1 168)                        ; RPLACA
44    (CONS)
45    (STORE 1)
46    (LOAD 0)
47    (CDR)
48    (CDR)
49    (STORE 0)
50    (LOAD 1)
51    (CDR)
52    (CDR&PUSH)
53    (NIL&PUSH)
54    (CALLS1 170)                        ; RPLACD
56    L56
56    (LOAD 0)
57    (CDR)
58    (JMPIF L33)
60    (LOAD 1)
61    (SKIP&RET 5)


Disassembly of function #:|(DEFUN FSEL (M SELS) ...)-41|
(CONST 0) = FSEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FSEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FSEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FSEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FSEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FSEL
8     (SKIP&RET 1)


Disassembly of function FSEL
(CONST 0) = MODES
(CONST 1) = ZL-GET
(CONST 2) = SELS
(CONST 3) = ASSQ
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
87 byte-code instructions:
0     (LOAD&JMPIF 1 L75)
4     L4
4     (LOAD&PUSH 2)
5     (LIST 1)
7     (SKIP&RET 3)
9     L9
9     (LOAD 0)
10    (CAR)
11    (CAR&PUSH)
12    (LOAD&CAR&PUSH 3)
14    (LOAD 5)
15    (CONS)
16    (CONS)
17    (SKIP&RET 4)
19    L19
19    (LOAD&CAR&PUSH 1)
21    (CONST&PUSH 0)                      ; MODES
22    (CALL2&PUSH 1)                      ; ZL-GET
24    (LOAD&JMPIFNOT 0 L42)
27    L27
27    (LOAD 0)
28    (CAR)
29    (CDR&PUSH)
30    (LOAD&CDR&PUSH 3)
32    (JSR L71)
34    (STORE 3)
35    (JMPIF L9)
37    (LOAD&CDR&STORE 0)
39    (LOAD&JMPIF 0 L27)
42    L42
42    (NIL)
43    (SKIP&RET 4)
45    L45
45    (LOAD&PUSH 3)
46    (LOAD&CAR&PUSH 3)
48    (LOAD&CDR&PUSH 2)
50    (LOAD&CDR&PUSH 5)
52    (JSR L71)
54    (CONS)
55    (CONS)
56    (SKIP 1)
58    (JMPIF1 L119)
60    (JMP L94)
62    L62
62    (LOAD&PUSH 4)
63    (LOAD 2)
64    (CAR)
65    (CAR&PUSH)
66    (LOAD 2)
67    (CONS)
68    (CONS)
69    (SKIP&RET 5)
71    L71
71    (LOAD&JMPIFNOT 1 L4)
75    L75
75    (LOAD&JMPIFNOT 2 L19)
78    (NIL&PUSH)
79    (LOAD&CAR&PUSH 2)
81    (LOAD&PUSH 4)
82    (CONST&PUSH 2)                      ; SELS
83    (CALL2&PUSH 1)                      ; ZL-GET
85    (CALL2 3)                           ; ASSQ
87    (STORE 0)
88    (JMPIF L45)
90    (SKIP 1)
92    (JMPIF1 L119)
94    L94
94    (LOAD&PUSH 2)
95    (CONST&PUSH 2)                      ; SELS
96    (CALL2&PUSH 1)                      ; ZL-GET
98    (NIL&PUSH)
99    (LOAD&JMPIFNOT 1 L116)
102   L102
102   (LOAD 1)
103   (CAR)
104   (CDR&PUSH)
105   (LOAD&PUSH 4)
106   (JSR L71)
108   (STORE 0)
109   (JMPIF L62)
111   (LOAD&CDR&STORE 1)
113   (LOAD&JMPIF 1 L102)
116   L116
116   (NIL)
117   (SKIP&RET 5)
119   L119
119   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SELECTOR (X ENV) ...)-42|
(CONST 0) = SELECTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SELECTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SELECTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SELECTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SELECTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SELECTOR
8     (SKIP&RET 1)


Disassembly of function SELECTOR
(CONST 0) = SEL
(CONST 1) = _
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
25 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CDR)
3     (JMPIFNOT L22)
5     (CONST&PUSH 1)                      ; _
6     (CONST&PUSH 0)                      ; SEL
7     (LOAD 4)
8     (CDR)
9     (CAR&PUSH)
10    (LOAD&CAR&PUSH 5)
12    (LIST&PUSH 3)
14    (LOAD 4)
15    (CDR)
16    (CDR)
17    L17
17    (CAR&PUSH)
18    (LIST 3)
20    (SKIP&RET 3)
22    L22
22    (CONST&PUSH 0)                      ; SEL
23    (LOAD 3)
24    (CDR)
25    (CAR&PUSH)
26    (LOAD 4)
27    (JMP L17)


Disassembly of function #:|(DEFMACRO _ (&REST X) ...)-43|
(CONST 0) = _
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE _>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; _
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; _
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE _>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; _
10    (SKIP&RET 1)


Disassembly of function _
(CONST 0) = _
(CONST 1) = STO
1 required argument
1 optional argument
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; _
3     (LOAD&CONS&STORE 0)
5     (CONST&PUSH 1)                      ; STO
6     (LOAD 1)
7     (CDR)
8     (CONS)
9     (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO STO (&REST X) ...)-44|
(CONST 0) = STO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STO>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; STO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STO>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; STO
10    (SKIP&RET 1)


Disassembly of function STO
(CONST 0) = STO
(CONST 1) = SETQ
(CONST 2) = SEL
(CONST 3) = MODE
(CONST 4) = FSEL
(CONST 5) = ZL-GET
(CONST 6) = IA-ERR
(CONST 7) = PROGN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
101 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; STO
3     (LOAD&CONS&STORE 0)
5     (CDR&PUSH)
6     (PUSH-NIL 2)
8     (LOAD&JMPIFNOT 2 L47)
11    L11
11    (LOAD 2)
12    (CAR)
13    (JMPIFATOM L54)
15    (LOAD 2)
16    (CAR)
17    (CAR&PUSH)
18    (JMPIFNOTEQTO 2 L36)                ; SEL
21    (LOAD 2)
22    (CAR)
23    (CDR)
24    (CAR&PUSH)
25    (CALL1&PUSH 3)                      ; MODE
27    (LOAD 3)
28    (CAR)
29    (CDR)
30    (CDR&PUSH)
31    (CALL2 4)                           ; FSEL
33    (STORE 1)
34    (JMPIF L64)
36    L36
36    (LOAD&CAR&PUSH 2)
38    (CALL1 6)                           ; IA-ERR
40    L40
40    (LOAD 2)
41    (CDR)
42    (CDR)
43    (STORE 2)
44    (LOAD&JMPIF 2 L11)
47    L47
47    (CONST&PUSH 7)                      ; PROGN
48    (LOAD&PUSH 1)
49    (CALLS2 73)                         ; NREVERSE
51    (CONS)
52    (SKIP&RET 7)
54    L54
54    (CONST&PUSH 1)                      ; SETQ
55    (LOAD&CAR&PUSH 3)
57    (LOAD 4)
58    (CDR)
59    (CAR&PUSH)
60    (LIST 3)
62    (JMP L119)
64    L64
64    (LOAD 2)
65    (CAR)
66    (CDR)
67    (CAR)
68    (STORE 3)
69    (LOAD 1)
70    (CDR)
71    (CDR&PUSH)
72    (JMP L96)
74    L74
74    (LOAD&CAR&PUSH 0)
76    (CONST&PUSH 3)                      ; MODE
77    (CALL2 5)                           ; ZL-GET
79    (CDR)
80    (CAR&PUSH)
81    (LOAD&PUSH 1)
82    (LOAD&PUSH 6)
83    (CALLS1 168)                        ; RPLACA
85    (CONS)
86    (STORE 4)
87    (CDR)
88    (CDR&PUSH)
89    (NIL&PUSH)
90    (CALLS1 170)                        ; RPLACD
92    (LOAD 0)
93    (CDR)
94    (CDR)
95    (STORE 0)
96    L96
96    (LOAD 0)
97    (CDR)
98    (JMPIF L74)
100   (SKIP 1)
102   (LOAD&CAR&PUSH 1)
104   (CONST&PUSH 3)                      ; MODE
105   (CALL2 5)                           ; ZL-GET
107   (CDR)
108   (CDR)
109   (CAR&PUSH)
110   (LOAD&PUSH 4)
111   (LOAD 3)
112   (CDR)
113   (CAR&PUSH)
114   (LOAD 5)
115   (CDR)
116   (CAR&PUSH)
117   (LIST 4)
119   L119
119   (PUSH)
120   (LOAD&CONS&STORE 0)
122   (JMP L40)


Disassembly of function #:|(DEFMACRO CONS-EXP (OP . ARGS) ...)-45|
(CONST 0) = CONS-EXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONS-EXP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONS-EXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONS-EXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONS-EXP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; CONS-EXP
10    (SKIP&RET 1)


Disassembly of function CONS-EXP
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = SIMPLIFY
(CONST 3) = LIST
1 required argument
1 optional argument
No rest parameter
No keyword parameters
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L27)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; SIMPLIFY
15    (CONST&PUSH 3)                      ; LIST
16    (CONST&PUSH 3)                      ; LIST
17    (LOAD&PUSH 4)
18    (LIST&PUSH 2)
20    (LOAD 3)
21    (LIST*&PUSH 2)
23    (LIST 2)
25    (SKIP&RET 5)
27    L27
27    (LOAD&PUSH 2)
28    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
30    (SKIP&RET 3)


Wrote file binary-clisp/mrgmac.fas
Wrote file /cygdrive/e/temp/maxima/src/mrgmac.lis