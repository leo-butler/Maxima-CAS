Listing of compilation of file /cygdrive/e/temp/maxima/src/residu.lisp
on 2002-12-17 13:35:01 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/residu.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE RESIDU)-2|
(CONST 0) = RESIDU
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESIDU
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (*LEXPR $DIFF $SUBSTITUTE ...) (SPECIAL $BREAKUP $NOPRINCIPAL ...) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ SEMIRAT* NIL)-5|
(CONST 0) = SEMIRAT*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (SEMIRAT*)
3 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; SEMIRAT*
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN POLELIST (D REGION REGION1) ...)-6|
(CONST 0) = POLELIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLELIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLELIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLELIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLELIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLELIST
8     (SKIP&RET 1)


Disassembly of function POLELIST
(CONST 0) = D
(CONST 1) = $BREAKUP
(CONST 2) = R
(CONST 3) = SS
(CONST 4) = S
(CONST 5) = WFLAG
(CONST 6) = VAR
(CONST 7) = LEADCOEF
(CONST 8) = POLYINX
(CONST 9) = SOLVECASE
(CONST 10) = FAILURE
(CONST 11) = SEMIRAT*
(CONST 12) = -1
(CONST 13) = MUL*
(CONST 14) = ADD*
(CONST 15) = POWER*
(CONST 16) = 1
(CONST 17) = $NOPRINCIPAL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R SEMIRAT* S SS $NOPRINCIPAL LEADCOEF VAR D)
writes special variables : (SS R S D LEADCOEF WFLAG)
158 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; D
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; $BREAKUP
7     (NIL)
8     (BIND 2)                            ; R
10    (NIL&PUSH)
11    (NIL)
12    (BIND 3)                            ; SS
14    (NIL&PUSH)
15    (NIL)
16    (BIND 4)                            ; S
18    (NIL&PUSH)
19    (NIL)
20    (BIND 5)                            ; WFLAG
22    (NIL&PUSH)
23    (T)
24    (SETVALUE 5)                        ; WFLAG
26    (GETVALUE&PUSH 0)                   ; D
28    (GETVALUE&PUSH 6)                   ; VAR
30    (CONST&PUSH 7)                      ; LEADCOEF
31    (CALL 3 8)                          ; POLYINX
34    (SETVALUE 7)                        ; LEADCOEF
36    (GETVALUE&PUSH 0)                   ; D
38    (CALL1 9)                           ; SOLVECASE
40    (STORE 19)
42    (PUSH)
43    (JMPIFEQTO 10 L103)                 ; FAILURE
46    (LOAD&JMPIFNOT 19 L150)
50    L50
50    (LOAD 19)
52    (CAR)
53    (CDR)
54    (CDR)
55    (CAR)
56    (STORE 4)
57    (LOAD 19)
59    (CDR)
60    (CAR)
61    (SETVALUE 0)                        ; D
63    (GETVALUE 7)                        ; LEADCOEF
65    (JMPIFNOT L84)
67    (LOAD&PUSH 4)
68    (GETVALUE&PUSH 6)                   ; VAR
70    (CONST&PUSH 12)                     ; -1
71    (LOAD&PUSH 7)
72    (CALL2&PUSH 13)                     ; MUL*
74    (CALL2&PUSH 14)                     ; ADD*
76    (GETVALUE&PUSH 0)                   ; D
78    (CALL2&PUSH 15)                     ; POWER*
80    (LOAD 2)
81    (CONS)
82    (CONS)
83    (STORE 0)
84    L84
84    (LOAD&PUSH 25)
86    (LOAD&PUSH 5)
87    (FUNCALL 1)
89    (JMPIF L128)
91    (LOAD&PUSH 24)
92    (LOAD&PUSH 5)
93    (FUNCALL 1)
95    (JMPIFNOT L234)
98    (GETVALUE 17)                       ; $NOPRINCIPAL
100   (JMPIFNOT L219)
103   L103
103   (NIL)
104   (SKIP 1)
106   (UNBIND1)
107   (SKIP 1)
109   (UNBIND1)
110   (SKIP 1)
112   (UNBIND1)
113   (SKIP 1)
115   (UNBIND 2)
117   (SKIP 1)
119   L119
119   (UNBIND1)
120   (SKIP&RET 4)
122   L122
122   (LOAD&PUSH 0)
123   (LOAD&PUSH 13)
124   (GETVALUE 3)                        ; SS
126   (JMP L184)
128   L128
128   (GETVALUE&PUSH 0)                   ; D
130   (JMPIFNOTEQTO 16 L206)              ; 1
134   (LOAD&PUSH 4)
135   (GETVALUE 4)                        ; S
137   (CONS)
138   (SETVALUE 4)                        ; S
140   L140
140   (LOAD 19)
142   (CDR)
143   (CDR)
144   (STORE 19)
146   (LOAD&JMPIF 19 L50)
150   L150
150   (GETVALUE 11)                       ; SEMIRAT*
152   (JMPIFNOT L179)
154   (GETVALUE&PUSH 4)                   ; S
156   (CALLS2&PUSH 71)                    ; LENGTH
158   (GETVALUE&PUSH 2)                   ; R
160   (CALLS2&PUSH 71)                    ; LENGTH
162   (CALLSR&PUSH 2 53)                  ; +
165   (GETVALUE&PUSH 3)                   ; SS
167   (CALLS2&PUSH 71)                    ; LENGTH
169   (LOAD&PUSH 14)
170   (CALLS2&PUSH 71)                    ; LENGTH
172   (CALLSR&PUSH 2 53)                  ; +
175   (CALLSR&JMPIF 1 48 L122)            ; >
179   L179
179   (LOAD&PUSH 0)
180   (GETVALUE&PUSH 2)                   ; R
182   (GETVALUE 4)                        ; S
184   L184
184   (PUSH)
185   (LOAD&PUSH 11)
186   (LIST 4)
188   (SKIP 1)
190   (UNBIND1)
191   (SKIP 1)
193   (UNBIND1)
194   (SKIP 1)
196   (UNBIND1)
197   (SKIP 1)
199   (UNBIND 2)
201   (SKIP 1)
203   (JMP L119)
206   L206
206   (LOAD&PUSH 4)
207   (GETVALUE&PUSH 0)                   ; D
209   (LIST&PUSH 2)
211   (GETVALUE 2)                        ; R
213   (CONS)
214   (SETVALUE 2)                        ; R
216   (JMP L140)
219   L219
219   (LOAD&PUSH 4)
220   (LOAD&CONS&STORE 8)
222   (JMP L140)
225   L225
225   (LOAD&PUSH 4)
226   (GETVALUE 3)                        ; SS
228   (CONS)
229   (SETVALUE 3)                        ; SS
231   (JMP L140)
234   L234
234   (GETVALUE 11)                       ; SEMIRAT*
236   (JMPIFNOT L140)
239   (GETVALUE&PUSH 0)                   ; D
241   (JMPIFEQTO 16 L225)                 ; 1
244   (LOAD&PUSH 4)
245   (GETVALUE&PUSH 0)                   ; D
247   (LIST&PUSH 2)
249   (LOAD&CONS&STORE 12)
251   (JMP L140)


Disassembly of function #:|(DEFUN SOLVECASE (E) ...)-7|
(CONST 0) = SOLVECASE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SOLVECASE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SOLVECASE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SOLVECASE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SOLVECASE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SOLVECASE
8     (SKIP&RET 1)


Disassembly of function SOLVECASE
(CONST 0) = E
(CONST 1) = VAR
(CONST 2) = AMONG
(CONST 3) = *FAILURES
(CONST 4) = *ROOTS
(CONST 5) = 1
(CONST 6) = SOLVE
(CONST 7) = FAILURE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*ROOTS *FAILURES E VAR)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE&PUSH 1)                   ; VAR
5     (GETVALUE&PUSH 0)                   ; E
7     (CALL2&JMPIFNOT 2 L39)              ; AMONG
10    (NIL)
11    (BIND 3)                            ; *FAILURES
13    (NIL)
14    (BIND 4)                            ; *ROOTS
16    (GETVALUE&PUSH 0)                   ; E
18    (GETVALUE&PUSH 1)                   ; VAR
20    (CONST&PUSH 5)                      ; 1
21    (CALL 3 6)                          ; SOLVE
24    (GETVALUE 3)                        ; *FAILURES
26    (JMPIF L42)
28    (GETVALUE 4)                        ; *ROOTS
30    (JMPIFNOT L45)
32    (GETVALUE 4)                        ; *ROOTS
34    L34
34    (UNBIND 2)
36    L36
36    (UNBIND1)
37    (SKIP&RET 2)
39    L39
39    (NIL)
40    (JMP L36)
42    L42
42    (CONST 7)                           ; FAILURE
43    (JMP L34)
45    L45
45    (NIL)
46    (JMP L34)


Disassembly of function #:|(DEFUN RES (N D REGION ...) ...)-8|
(CONST 0) = RES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RES
8     (SKIP&RET 1)


Disassembly of function RES
(CONST 0) = N
(CONST 1) = D
(CONST 2) = POLELIST
(CONST 3) = A
(CONST 4) = B
(CONST 5) = C
(CONST 6) = FACTORS
(CONST 7) = LEADCOEF
(CONST 8) = VAR
(CONST 9) = SDIFF
(CONST 10) = RESIDUE
(CONST 11) = ADDN
(CONST 12) = 0
(CONST 13) = DIV*
(CONST 14) = $RESIDUE
(CONST 15) = ADD*
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LEADCOEF N FACTORS C B A VAR D)
writes special variables : (C B A FACTORS)
141 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; N
3     (LOAD 6)
4     (BIND 1)                            ; D
6     (GETVALUE&PUSH 1)                   ; D
8     (LOAD&PUSH 9)
9     (LOAD&PUSH 9)
10    (CALL&PUSH 3 2)                     ; POLELIST
13    (NIL)
14    (BIND 3)                            ; A
16    (NIL)
17    (BIND 4)                            ; B
19    (NIL)
20    (BIND 5)                            ; C
22    (NIL)
23    (BIND 6)                            ; FACTORS
25    (NIL)
26    (BIND 7)                            ; LEADCOEF
28    (LOAD&JMPIFNOT 15 L102)
32    (LOAD 15)
34    (CAR)
35    (SETVALUE 6)                        ; FACTORS
37    (LOAD&CDR&STORE 15)
39    (CDR)
40    (CAR)
41    (JMPIF L50)
43    (LOAD 15)
45    (CDR)
46    (CDR)
47    (CAR)
48    (JMPIFNOT L56)
50    L50
50    (GETVALUE&PUSH 1)                   ; D
52    (GETVALUE&PUSH 8)                   ; VAR
54    (CALL2 9)                           ; SDIFF
56    L56
56    (LOAD 15)
58    (CAR)
59    (JMPIF L109)
61    (CONST 12)                          ; 0
62    (SETVALUE 3)                        ; A
64    L64
64    (LOAD 15)
66    (CDR)
67    (CAR)
68    (JMPIF L131)
70    (CONST 12)                          ; 0
71    (SETVALUE 4)                        ; B
73    L73
73    (LOAD 15)
75    (CDR)
76    (CDR)
77    (CAR)
78    (JMPIF L176)
81    (NIL)
82    (SETVALUE 5)                        ; C
84    L84
84    (GETVALUE&PUSH 3)                   ; A
86    (GETVALUE&PUSH 4)                   ; B
88    (CALL2&PUSH 15)                     ; ADD*
90    (GETVALUE&PUSH 5)                   ; C
92    (LIST 2)
94    L94
94    (UNBIND 5)
96    (SKIP 1)
98    (UNBIND 2)
100   (SKIP&RET 5)
102   L102
102   (NIL)
103   (JMP L94)
105   L105
105   (GETVALUE 6)                        ; FACTORS
107   (JMP L117)
109   L109
109   (GETVALUE&PUSH 0)                   ; N
111   (GETVALUE 7)                        ; LEADCOEF
113   (JMPIF L105)
115   (GETVALUE 1)                        ; D
117   L117
117   (PUSH)
118   (LOAD&CAR&PUSH 17)
120   (CALL&PUSH 3 10)                    ; RESIDUE
123   (NIL&PUSH)
124   (CALL2 11)                          ; ADDN
126   (SETVALUE 3)                        ; A
128   (JMP L64)
131   L131
131   (NIL&PUSH)
132   (LOAD 16)
134   (CDR)
135   (CAR&PUSH)
136   (JMP L158)
138   L138
138   (LOAD&CAR&PUSH 0)
140   (GETVALUE&PUSH 0)                   ; N
142   (GETVALUE&PUSH 1)                   ; D
144   (CALL2&PUSH 13)                     ; DIV*
146   (GETVALUE&PUSH 8)                   ; VAR
148   (LOAD&PUSH 2)
149   (CALL&PUSH 3 14)                    ; $RESIDUE
152   (LOAD&CONS&STORE 2)
154   (SKIP 1)
156   (LOAD&CDR&STORE 0)
158   L158
158   (LOAD&PUSH 0)
159   (CALLS1&JMPIFNOT 146 L138)          ; ENDP
162   (SKIP 1)
164   (LOAD&PUSH 0)
165   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
168   (NIL&PUSH)
169   (CALL2 11)                          ; ADDN
171   (SETVALUE 4)                        ; B
173   (JMP L73)
176   L176
176   (NIL&PUSH)
177   (LOAD 16)
179   (CDR)
180   (CDR)
181   (CAR&PUSH)
182   (JMP L204)
184   L184
184   (LOAD&CAR&PUSH 0)
186   (GETVALUE&PUSH 0)                   ; N
188   (GETVALUE&PUSH 1)                   ; D
190   (CALL2&PUSH 13)                     ; DIV*
192   (GETVALUE&PUSH 8)                   ; VAR
194   (LOAD&PUSH 2)
195   (CALL&PUSH 3 14)                    ; $RESIDUE
198   (LOAD&CONS&STORE 2)
200   (SKIP 1)
202   (LOAD&CDR&STORE 0)
204   L204
204   (LOAD&PUSH 0)
205   (CALLS1&JMPIFNOT 146 L184)          ; ENDP
208   (SKIP 1)
210   (LOAD&PUSH 0)
211   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
214   (NIL&PUSH)
215   (CALL2 11)                          ; ADDN
217   (SETVALUE 5)                        ; C
219   (JMP L84)


Disassembly of function #:|(DEFUN RESIDUE (ZN FACTORS PL) ...)-9|
(CONST 0) = RESIDUE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESIDUE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESIDUE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESIDUE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESIDUE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESIDUE
8     (SKIP&RET 1)


Disassembly of function RESIDUE
(CONST 0) = ZN
(CONST 1) = FACTORS
(CONST 2) = LEADCOEF
(CONST 3) = REMFACTOR
(CONST 4) = RESM0
(CONST 5) = DIV*
(CONST 6) = RESM1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ZN FACTORS LEADCOEF)
59 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; ZN
3     (LOAD 5)
4     (BIND 1)                            ; FACTORS
6     (GETVALUE 2)                        ; LEADCOEF
8     (JMPIF L15)
10    (NIL&PUSH)
11    (LOAD&PUSH 8)
12    (JMP L79)
15    L15
15    (NIL&PUSH)
16    (LOAD&PUSH 8)
17    L17
17    (LOAD&PUSH 0)
18    (CALLS1&JMPIF 146 L83)              ; ENDP
21    (LOAD&CAR&PUSH 0)
23    (NIL&PUSH)
24    (GETVALUE&PUSH 1)                   ; FACTORS
26    (LOAD&CAR&PUSH 2)
28    (GETVALUE&PUSH 0)                   ; ZN
30    (CALL&PUSH 3 3)                     ; REMFACTOR
33    (LOAD&CAR&STORE 0 1)
36    (LOAD 0)
37    (CDR)
38    (CAR)
39    (STORE 0)
40    (LOAD&PUSH 1)
41    (LOAD&PUSH 1)
42    (LOAD&CAR&PUSH 4)
44    (LOAD 5)
45    (CDR)
46    (CAR&PUSH)
47    (CALL 4 4)                          ; RESM0
50    (SKIP 1)
52    (STORE 0)
53    (LOAD&CONS&STORE 2)
55    (SKIP 1)
57    (LOAD&CDR&STORE 0)
59    (JMP L17)
61    L61
61    (LOAD&CAR&PUSH 0)
63    (GETVALUE&PUSH 0)                   ; ZN
65    (GETVALUE&PUSH 1)                   ; FACTORS
67    (CALL2&PUSH 5)                      ; DIV*
69    (LOAD&CAR&PUSH 1)
71    (CALL2&PUSH 6)                      ; RESM1
73    (LOAD&CONS&STORE 2)
75    (SKIP 1)
77    (LOAD&CDR&STORE 0)
79    L79
79    (LOAD&PUSH 0)
80    (CALLS1&JMPIFNOT 146 L61)           ; ENDP
83    L83
83    (SKIP 1)
85    (LOAD&PUSH 0)
86    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
88    (SKIP 1)
90    (UNBIND 2)
92    (SKIP&RET 4)


Disassembly of function #:|(DEFUN RES1 (ZN ZD PL1) ...)-10|
(CONST 0) = RES1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RES1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RES1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RES1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RES1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RES1
8     (SKIP&RET 1)


Disassembly of function RES1
(CONST 0) = ZN
(CONST 1) = ZD
(CONST 2) = DIV*
(CONST 3) = SUBIN
(CONST 4) = $EXPAND
(CONST 5) = $RECTFORM
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ZD ZN)
writes special variable : (ZD)
30 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; ZN
3     (LOAD 5)
4     (BIND 1)                            ; ZD
6     (GETVALUE&PUSH 0)                   ; ZN
8     (GETVALUE&PUSH 1)                   ; ZD
10    (CALL2 2)                           ; DIV*
12    (SETVALUE 1)                        ; ZD
14    (NIL&PUSH)
15    (LOAD&PUSH 8)
16    (JMP L35)
18    L18
18    (LOAD&CAR&PUSH 0)
20    (LOAD&PUSH 0)
21    (GETVALUE&PUSH 1)                   ; ZD
23    (CALL2&PUSH 3)                      ; SUBIN
25    (CALL1&PUSH 4)                      ; $EXPAND
27    (CALL1&PUSH 5)                      ; $RECTFORM
29    (LOAD&CONS&STORE 2)
31    (SKIP 1)
33    (LOAD&CDR&STORE 0)
35    L35
35    (LOAD&PUSH 0)
36    (CALLS1&JMPIFNOT 146 L18)           ; ENDP
39    (SKIP 1)
41    (LOAD&PUSH 0)
42    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
44    (SKIP 1)
46    (UNBIND 2)
48    (SKIP&RET 4)


Disassembly of function #:|(DEFUN RESPROG0 (F G N ...) ...)-11|
(CONST 0) = RESPROG0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESPROG0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESPROG0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESPROG0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESPROG0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESPROG0
8     (SKIP&RET 1)


Disassembly of function RESPROG0
(CONST 0) = F
(CONST 1) = N
(CONST 2) = A
(CONST 3) = B
(CONST 4) = C
(CONST 5) = R
(CONST 6) = RESPROG
(CONST 7) = PTIMES
(CONST 8) = PDIVIDE
(CONST 9) = PPLUS
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C R B N A F)
writes special variables : (R C B A)
76 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; F
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (NIL)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; B
12    (NIL)
13    (BIND 4)                            ; C
15    (NIL)
16    (BIND 5)                            ; R
18    (GETVALUE&PUSH 0)                   ; F
20    (LOAD&PUSH 22)
21    (CALL2 6)                           ; RESPROG
23    (SETVALUE 2)                        ; A
25    (CDR)
26    (CAR)
27    (SETVALUE 3)                        ; B
29    (GETVALUE 2)                        ; A
31    (CDR)
32    (CDR&PUSH)
33    (LOAD&PUSH 20)
34    (CALL2 7)                           ; PTIMES
36    (SETVALUE 4)                        ; C
38    (GETVALUE 2)                        ; A
40    (CAR)
41    (CAR)
42    (SETVALUE 2)                        ; A
44    (GETVALUE&PUSH 1)                   ; N
46    (GETVALUE&PUSH 2)                   ; A
48    (CALL2 7)                           ; PTIMES
50    (SETVALUE 2)                        ; A
52    (GETVALUE&PUSH 1)                   ; N
54    (GETVALUE&PUSH 3)                   ; B
56    (CALL2 7)                           ; PTIMES
58    (SETVALUE 3)                        ; B
60    (GETVALUE&PUSH 2)                   ; A
62    (LOAD&PUSH 22)
63    (CALL2 8)                           ; PDIVIDE
65    (SETVALUE 5)                        ; R
67    (CDR)
68    (CAR)
69    (SETVALUE 2)                        ; A
71    (GETVALUE 5)                        ; R
73    (CAR)
74    (SETVALUE 5)                        ; R
76    (CAR&PUSH)
77    (GETVALUE&PUSH 0)                   ; F
79    (CALL2&PUSH 7)                      ; PTIMES
81    (GETVALUE 5)                        ; R
83    (CDR&PUSH)
84    (GETVALUE&PUSH 3)                   ; B
86    (CALL2&PUSH 7)                      ; PTIMES
88    (CALL2&PUSH 9)                      ; PPLUS
90    (GETVALUE 5)                        ; R
92    (CDR)
93    (CONS)
94    (SETVALUE 3)                        ; B
96    (GETVALUE 2)                        ; A
98    (CAR&PUSH)
99    (GETVALUE 2)                        ; A
101   (CDR&PUSH)
102   (GETVALUE&PUSH 4)                   ; C
104   (CALL2 7)                           ; PTIMES
106   (CONS&PUSH)
107   (GETVALUE 3)                        ; B
109   (CAR&PUSH)
110   (GETVALUE 3)                        ; B
112   (CDR&PUSH)
113   (GETVALUE&PUSH 4)                   ; C
115   (CALL2 7)                           ; PTIMES
117   (CONS)
118   (CONS)
119   (UNBIND 6)
121   (SKIP&RET 5)


Disassembly of function #:|(DEFUN RESM0 (E N POLE ...) ...)-12|
(CONST 0) = RESM0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESM0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESM0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESM0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESM0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESM0
8     (SKIP&RET 1)


Disassembly of function RESM0
(CONST 0) = E
(CONST 1) = N
(CONST 2) = M
(CONST 3) = DIV*
(CONST 4) = VAR
(CONST 5) = $DIFF
(CONST 6) = SUBIN
(CONST 7) = $EXPAND
(CONST 8) = $RECTFORM
(CONST 9) = (MFACTORIAL)
(CONST 10) = SIMPLIFY
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M VAR E N)
writes special variable : (E)
31 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; E
3     (LOAD 6)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; M
9     (GETVALUE&PUSH 1)                   ; N
11    (GETVALUE&PUSH 0)                   ; E
13    (CALL2 3)                           ; DIV*
15    (SETVALUE 0)                        ; E
17    (PUSH)
18    (GETVALUE&PUSH 4)                   ; VAR
20    (GETVALUE&PUSH 2)                   ; M
22    (CALLS2&PUSH 151)                   ; 1-
24    (CALL 3 5)                          ; $DIFF
27    (SETVALUE 0)                        ; E
29    (LOAD&PUSH 11)
30    (GETVALUE&PUSH 0)                   ; E
32    (CALL2&PUSH 6)                      ; SUBIN
34    (CALL1&PUSH 7)                      ; $EXPAND
36    (CALL1 8)                           ; $RECTFORM
38    (SETVALUE 0)                        ; E
40    (PUSH)
41    (CONST&PUSH 9)                      ; (MFACTORIAL)
42    (GETVALUE&PUSH 2)                   ; M
44    (CALLS2&PUSH 151)                   ; 1-
46    (LIST&PUSH 2)
48    (CALL1&PUSH 10)                     ; SIMPLIFY
50    (CALL2 3)                           ; DIV*
52    (UNBIND 3)
54    (SKIP&RET 5)


Disassembly of function #:|(DEFUN REMFACTOR (L P N) ...)-13|
(CONST 0) = REMFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMFACTOR
8     (SKIP&RET 1)


Disassembly of function REMFACTOR
(CONST 0) = L
(CONST 1) = P
(CONST 2) = N
(CONST 3) = F
(CONST 4) = LEADCOEF
(CONST 5) = MULN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N LEADCOEF P L)
writes special variables : (F L)
44 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; P
6     (LOAD 7)
7     (BIND 2)                            ; N
9     (NIL)
10    (BIND 3)                            ; F
12    (NIL&PUSH)
13    (GETVALUE 0)                        ; L
15    (JMPIFNOT L41)
17    L17
17    (GETVALUE&PUSH 1)                   ; P
19    (GETVALUE 0)                        ; L
21    (CAR&PUSH)
22    (CALLS2&JMPIF 2 L58)                ; EQUAL
25    (GETVALUE 0)                        ; L
27    (CDR)
28    (CAR&PUSH)
29    (LOAD&CONS&STORE 0)
31    L31
31    (GETVALUE 0)                        ; L
33    (CDR)
34    (CDR)
35    (SETVALUE 0)                        ; L
37    (GETVALUE 0)                        ; L
39    (JMPIF L17)
41    L41
41    (GETVALUE&PUSH 4)                   ; LEADCOEF
43    (LOAD 1)
44    (CONS&PUSH)
45    (NIL&PUSH)
46    (CALL2&PUSH 5)                      ; MULN
48    (GETVALUE&PUSH 2)                   ; N
50    (LIST 2)
52    (SKIP 1)
54    (UNBIND 4)
56    (SKIP&RET 4)
58    L58
58    (GETVALUE 0)                        ; L
60    (CDR)
61    (CAR)
62    (SETVALUE 3)                        ; F
64    (JMP L31)


Disassembly of function #:|(DEFUN RESPROG (P1B P2B) ...)-14|
(CONST 0) = RESPROG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESPROG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESPROG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESPROG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESPROG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESPROG
8     (SKIP&RET 1)


Disassembly of function RESPROG
(CONST 0) = TEMP
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = VAR
(CONST 4) = PDEGREE
(CONST 5) = PSIMP
(CONST 6) = PGCD
(CONST 7) = PQUOTIENT
(CONST 8) = PTIMES
(CONST 9) = PDIFFERENCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEMP VAR)
writes special variable : (TEMP)
128 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; TEMP
3     (PUSH-NIL 8)
5     (CONST 1)                           ; 0
6     (STORE 4)
7     (STORE 6)
8     (CONST 2)                           ; 1
9     (STORE 7)
10    (STORE 3)
11    (JMP L121)
14    L14
14    (GETVALUE&PUSH 3)                   ; VAR
16    (LOAD&PUSH 14)
17    (GETVALUE&PUSH 3)                   ; VAR
19    (CALL2&PUSH 4)                      ; PDEGREE
21    (LOAD&PUSH 14)
22    (GETVALUE&PUSH 3)                   ; VAR
24    (CALL2&PUSH 4)                      ; PDEGREE
26    (CALLSR&PUSH 1 54)                  ; -
29    (CONST&PUSH 2)                      ; 1
30    (LIST&PUSH 2)
32    (CALL2 5)                           ; PSIMP
34    (STORE 2)
35    (LOAD 13)
36    (CDR)
37    (CDR)
38    (CAR&PUSH)
39    (LOAD 13)
40    (CDR)
41    (CDR)
42    (CAR&PUSH)
43    (CALL2 6)                           ; PGCD
45    (STORE 5)
46    (LOAD 13)
47    (CDR)
48    (CDR)
49    (CAR&PUSH)
50    (LOAD&PUSH 6)
51    (CALL2 7)                           ; PQUOTIENT
53    (STORE 1)
54    (LOAD 12)
55    (CDR)
56    (CDR)
57    (CAR&PUSH)
58    (LOAD&PUSH 6)
59    (CALL2 7)                           ; PQUOTIENT
61    (STORE 0)
62    (PUSH)
63    (LOAD&CAR&PUSH 14)
65    (LOAD 15)
67    (CDR)
68    (CDR)
69    (CDR&PUSH)
70    (CALL2&PUSH 5)                      ; PSIMP
72    (CALL2&PUSH 8)                      ; PTIMES
74    (LOAD&PUSH 2)
75    (LOAD&PUSH 4)
76    (LOAD&CAR&PUSH 15)
78    (LOAD 16)
80    (CDR)
81    (CDR)
82    (CDR&PUSH)
83    (CALL2&PUSH 5)                      ; PSIMP
85    (CALL2&PUSH 8)                      ; PTIMES
87    (CALL2&PUSH 8)                      ; PTIMES
89    (CALL2 9)                           ; PDIFFERENCE
91    (STORE 13)
93    (LOAD&PUSH 0)
94    (LOAD&PUSH 8)
95    (CALL2&PUSH 8)                      ; PTIMES
97    (LOAD&PUSH 2)
98    (LOAD&PUSH 8)
99    (CALL2&PUSH 8)                      ; PTIMES
101   (LOAD&PUSH 4)
102   (CALL2&PUSH 8)                      ; PTIMES
104   (CALL2 9)                           ; PDIFFERENCE
106   (STORE 7)
107   (LOAD&PUSH 0)
108   (LOAD&PUSH 5)
109   (CALL2&PUSH 8)                      ; PTIMES
111   (LOAD&PUSH 2)
112   (LOAD&PUSH 5)
113   (CALL2&PUSH 8)                      ; PTIMES
115   (LOAD&PUSH 4)
116   (CALL2&PUSH 8)                      ; PTIMES
118   (CALL2 9)                           ; PDIFFERENCE
120   (STORE 4)
121   L121
121   (LOAD&PUSH 13)
122   (GETVALUE&PUSH 3)                   ; VAR
124   (CALL2&PUSH 4)                      ; PDEGREE
126   (LOAD&PUSH 13)
127   (GETVALUE&PUSH 3)                   ; VAR
129   (CALL2&PUSH 4)                      ; PDEGREE
131   (CALLSR&JMPIFNOT 1 47 L161)         ; <
135   (LOAD 12)
136   (SETVALUE 0)                        ; TEMP
138   (LOAD 13)
139   (STORE 12)
141   (GETVALUE 0)                        ; TEMP
143   (STORE 13)
145   (LOAD 6)
146   (SETVALUE 0)                        ; TEMP
148   (LOAD 7)
149   (STORE 6)
150   (GETVALUE 0)                        ; TEMP
152   (STORE 7)
153   (LOAD 3)
154   (SETVALUE 0)                        ; TEMP
156   (LOAD 4)
157   (STORE 3)
158   (GETVALUE 0)                        ; TEMP
160   (STORE 4)
161   L161
161   (LOAD&PUSH 12)
162   (GETVALUE&PUSH 3)                   ; VAR
164   (CALL2&PUSH 4)                      ; PDEGREE
166   (CALLS2&JMPIFNOT 145 L14)           ; ZEROP
170   (LOAD&PUSH 6)
171   (LOAD 13)
172   (CONS&PUSH)
173   (LOAD&PUSH 4)
174   (LOAD 14)
175   (CONS)
176   (CONS)
177   (SKIP 8)
179   (UNBIND1)
180   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SNUMDEN (E) ...)-15|
(CONST 0) = SNUMDEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SNUMDEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SNUMDEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SNUMDEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SNUMDEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SNUMDEN
8     (SKIP&RET 1)


Disassembly of function SNUMDEN
(CONST 0) = E
(CONST 1) = MNUMP
(CONST 2) = SN*
(CONST 3) = MEXPTP
(CONST 4) = VAR
(CONST 5) = POLYINX
(CONST 6) = -1
(CONST 7) = POWER*
(CONST 8) = SD*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SD* SN* VAR E)
writes special variables : (SD* SN*)
71 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L37)
7     (GETVALUE&PUSH 0)                   ; E
9     (CALL1&JMPIF 1 L37)                 ; MNUMP
12    (GETVALUE&PUSH 0)                   ; E
14    (CALL1&JMPIFNOT 3 L26)              ; MEXPTP
17    (GETVALUE 0)                        ; E
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (CALLS2&JMPIF 12 L90)               ; INTEGERP
26    L26
26    (GETVALUE&PUSH 0)                   ; E
28    (GETVALUE&PUSH 4)                   ; VAR
30    (NIL&PUSH)
31    (CALL 3 5)                          ; POLYINX
34    (JMPIFNOT L105)
37    L37
37    (GETVALUE&PUSH 0)                   ; E
39    (GETVALUE 2)                        ; SN*
41    (CONS)
42    (SETVALUE 2)                        ; SN*
44    (JMP L106)
46    L46
46    (GETVALUE 0)                        ; E
48    (CDR)
49    (CAR)
50    (JMP L82)
52    L52
52    (GETVALUE 0)                        ; E
54    (CDR)
55    (CDR)
56    (CAR&PUSH)
57    (CALLS2&JMPIFNOT 147 L37)           ; MINUSP
60    (GETVALUE 0)                        ; E
62    (CDR)
63    (CDR)
64    (CAR&PUSH)
65    (JMPIFEQTO 6 L46)                   ; -1
68    (GETVALUE 0)                        ; E
70    (CDR)
71    (CAR&PUSH)
72    (GETVALUE 0)                        ; E
74    (CDR)
75    (CDR)
76    (CAR&PUSH)
77    (CALLSR&PUSH 0 54)                  ; -
80    (CALL2 7)                           ; POWER*
82    L82
82    (PUSH)
83    (GETVALUE 8)                        ; SD*
85    (CONS)
86    (SETVALUE 8)                        ; SD*
88    (JMP L106)
90    L90
90    (GETVALUE 0)                        ; E
92    (CDR)
93    (CAR&PUSH)
94    (GETVALUE&PUSH 4)                   ; VAR
96    (NIL&PUSH)
97    (CALL 3 5)                          ; POLYINX
100   (JMPIF L52)
102   (NIL)
103   (JMP L106)
105   L105
105   (NIL)
106   L106
106   (UNBIND1)
107   (SKIP&RET 2)


Disassembly of function #:|(SETQ SN* NIL ...)-16|
(CONST 0) = SN*
(CONST 1) = SD*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (SD* SN*)
4 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; SN*
3     (SETVALUE 1)                        ; SD*
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $RESIDUE (E VAR P) ...)-17|
(CONST 0) = $RESIDUE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RESIDUE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RESIDUE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RESIDUE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RESIDUE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RESIDUE
8     (SKIP&RET 1)


Disassembly of function $RESIDUE
(CONST 0) = E
(CONST 1) = VAR
(CONST 2) = P
(CONST 3) = $UNKNOWN
(CONST 4) = $RESIDUE
(CONST 5) = $NOUNIFY
(CONST 6) = (%RESIDUE)
(CONST 7) = SN*
(CONST 8) = SD*
(CONST 9) = MTIMESP
(CONST 10) = SNUMDEN
(CONST 11) = ANDMAPCAR
(CONST 12) = MULN
(CONST 13) = NN*
(CONST 14) = DN*
(CONST 15) = NUMDEN
(CONST 16) = DIV*
(CONST 17) = RESM1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SD* SN* VAR P DN* NN* E)
writes special variables : (DN* NN*)
50 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; E
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (LOAD 7)
7     (BIND 2)                            ; P
9     (GETVALUE&PUSH 0)                   ; E
11    (CALL1&JMPIF 3 L53)                 ; $UNKNOWN
14    (NIL)
15    (BIND 7)                            ; SN*
17    (NIL)
18    (BIND 8)                            ; SD*
20    (GETVALUE&PUSH 0)                   ; E
22    (CALL1&JMPIFNOT 9 L33)              ; MTIMESP
25    (CONST&SYMBOL-FUNCTION&PUSH 10)     ; SNUMDEN
27    (GETVALUE 0)                        ; E
29    (CDR&PUSH)
30    (CALL2&JMPIF 11 L67)                ; ANDMAPCAR
33    L33
33    (GETVALUE&PUSH 0)                   ; E
35    (CALL1 15)                          ; NUMDEN
37    L37
37    (UNBIND 2)
39    (GETVALUE&PUSH 13)                  ; NN*
41    (GETVALUE&PUSH 14)                  ; DN*
43    (CALL2&PUSH 16)                     ; DIV*
45    (GETVALUE&PUSH 2)                   ; P
47    (CALL2 17)                          ; RESM1
49    L49
49    (UNBIND 3)
51    (SKIP&RET 4)
53    L53
53    (CONST&PUSH 4)                      ; $RESIDUE
54    (CALL1 5)                           ; $NOUNIFY
56    (CONST&PUSH 6)                      ; (%RESIDUE)
57    (GETVALUE&PUSH 0)                   ; E
59    (GETVALUE&PUSH 1)                   ; VAR
61    (GETVALUE&PUSH 2)                   ; P
63    (LIST 4)
65    (JMP L49)
67    L67
67    (GETVALUE&PUSH 7)                   ; SN*
69    (NIL&PUSH)
70    (CALL2 12)                          ; MULN
72    (SETVALUE 13)                       ; NN*
74    (GETVALUE&PUSH 8)                   ; SD*
76    (NIL&PUSH)
77    (CALL2 12)                          ; MULN
79    (SETVALUE 14)                       ; DN*
81    (JMP L37)


Disassembly of function #:|(DEFUN RESM1 (E POLE) ...)-18|
(CONST 0) = RESM1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESM1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESM1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESM1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESM1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESM1
8     (SKIP&RET 1)


Disassembly of function RESM1
(CONST 0) = E
(CONST 1) = $RECTFORM
(CONST 2) = VAR
(CONST 3) = 0
(CONST 4) = $TAYLOR
(CONST 5) = RATDISREP
(CONST 6) = -1
(CONST 7) = MUL*
(CONST 8) = ADD*
(CONST 9) = POWER*
(CONST 10) = 1
(CONST 11) = COEFF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR E)
writes special variable : (E)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; E
3     (LOAD&PUSH 4)
4     (CALL1 1)                           ; $RECTFORM
6     (STORE 4)
7     (GETVALUE&PUSH 0)                   ; E
9     (GETVALUE&PUSH 2)                   ; VAR
11    (LOAD&PUSH 6)
12    (CONST&PUSH 3)                      ; 0
13    (CALL&PUSH 4 4)                     ; $TAYLOR
16    (CALL1 5)                           ; RATDISREP
18    (SETVALUE 0)                        ; E
20    (PUSH)
21    (CONST&PUSH 6)                      ; -1
22    (LOAD&PUSH 6)
23    (CALL2&PUSH 7)                      ; MUL*
25    (GETVALUE&PUSH 2)                   ; VAR
27    (CALL2&PUSH 8)                      ; ADD*
29    (CONST&PUSH 6)                      ; -1
30    (CALL2&PUSH 9)                      ; POWER*
32    (CONST&PUSH 10)                     ; 1
33    (CALL 3 11)                         ; COEFF
36    (UNBIND1)
37    (SKIP&RET 3)


Wrote file binary-clisp/residu.fas
Wrote file /cygdrive/e/temp/maxima/src/residu.lis