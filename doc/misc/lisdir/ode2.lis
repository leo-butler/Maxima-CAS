Listing of compilation of file /cygdrive/e/temp/maxima/src/ode2.lisp
on 2002-12-17 13:36:08 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/ode2.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:NIL-2
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE LOAD EVAL) (MEVAL* '#))-3|
(CONST 0) = 
(($DECLARE) $PT $SPECIAL $YP $SPECIAL $YOLD $SPECIAL $%Q% $SPECIAL $YNEW
 $SPECIAL $X $SPECIAL $Y $SPECIAL $METHOD $SPECIAL $%F% $SPECIAL $%G% $SPECIAL
 $MSG1 $SPECIAL $MSG2 $SPECIAL $INTFACTOR $SPECIAL $ODEINDEX $SPECIAL
 $SINGSOLVE $SPECIAL)
(CONST 1) = MEVAL*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; (($DECLARE) $PT $SPECIAL $YP ...)
1     (CALL1 1)                           ; MEVAL*
3     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2 T ...) ...)-4-1|
(CONST 0) = $ODE2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2 T ...) ...)-4-2|
(CONST 0) = $ODE2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2 T ...) ...)-4-3-1|
(CONST 0) = $ODE2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2 T ...) ...)-4-3-2|
(CONST 0) = $ODE2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2 T ...) ...)-4-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $ODE2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $ODE2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2 T ...) ...)-4-3-5|
(CONST 0) = $ODE2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ODE2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ODE2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ODE2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ODE2
8     (SKIP&RET 1)


Disassembly of function $ODE2
(CONST 0) = $YOLD
(CONST 1) = $X
(CONST 2) = $DERIVSUBST
(CONST 3) = $YNEW
(CONST 4) = ($YOLD '$YOLD)
(CONST 5) = |TRD-MSYMEVAL-aux|
(CONST 6) = ($YOLD '$YOLD)
(CONST 7) = $SUBSTITUTE
(CONST 8) = SIMPLIFY
(CONST 9) = ($X '$X)
(CONST 10) = $ODE2A
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($YNEW)
26 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; $YOLD
3     (LOAD 4)
4     (BIND 1)                            ; $X
6     (NIL)
7     (BIND 2)                            ; $DERIVSUBST
9     (CONST 3)                           ; $YNEW
10    (BIND 3)                            ; $YNEW
12    (CONST&PUSH 4)                      ; ($YOLD '$YOLD)
13    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
15    (GETVALUE&PUSH 3)                   ; $YNEW
17    (GETVALUE&PUSH 3)                   ; $YNEW
19    (CONST&PUSH 6)                      ; ($YOLD '$YOLD)
20    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
22    (LOAD&PUSH 19)
23    (CALL&PUSH 3 7)                     ; $SUBSTITUTE
26    (CALL1&PUSH 8)                      ; SIMPLIFY
28    (GETVALUE&PUSH 3)                   ; $YNEW
30    (CONST&PUSH 9)                      ; ($X '$X)
31    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
33    (CALL&PUSH 3 10)                    ; $ODE2A
36    (CALL1&PUSH 8)                      ; SIMPLIFY
38    (CALL&PUSH 3 7)                     ; $SUBSTITUTE
41    (CALL1 8)                           ; SIMPLIFY
43    (UNBIND 4)
45    (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2A T ...) ...)-5-1|
(CONST 0) = $ODE2A
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2A
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2A T ...) ...)-5-2|
(CONST 0) = $ODE2A
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2A
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2A T ...) ...)-5-3-1|
(CONST 0) = $ODE2A
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2A
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2A T ...) ...)-5-3-2|
(CONST 0) = $ODE2A
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2A
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2A T ...) ...)-5-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $ODE2A
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $ODE2A
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)

WARNING in $ODE2A in lines 64..137 :
variable $MSG is not used.
Misspelled or missing IGNORE declaration?

Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE2A T ...) ...)-5-3-5|
(CONST 0) = $ODE2A
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ODE2A>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE2A
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ODE2A
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ODE2A>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ODE2A
8     (SKIP&RET 1)


Disassembly of function $ODE2A
(CONST 0) = $Y
(CONST 1) = $X
(CONST 2) = $DE
(CONST 3) = $A1
(CONST 4) = $A2
(CONST 5) = $A3
(CONST 6) = $A4
(CONST 7) = $%Q%
(CONST 8) = $INTFACTOR
(CONST 9) = $NONE
(CONST 10) = $METHOD
(CONST 11) = (%DERIVATIVE)
(CONST 12) = ($Y '$Y)
(CONST 13) = |TRD-MSYMEVAL-aux|
(CONST 14) = ($X '$X)
(CONST 15) = (2)
(CONST 16) = SIMPLIFY
(CONST 17) = $FREEOF
(CONST 18) = ($Y '$Y)
(CONST 19) = ($X '$X)
(CONST 20) = $ODE1A
(CONST 21) = $FTEST
(CONST 22) = ($%Q% '$%Q%)
(CONST 23) = $LHS
(CONST 24) = $RHS
(CONST 25) = *MMINUS
(CONST 26) = ADD*
(CONST 27) = $DESIMP
(CONST 28) = ($Y '$Y)
(CONST 29) = ($X '$X)
(CONST 30) = $DERIVDEGREE
(CONST 31) = 2
(CONST 32) = LIKE
(CONST 33) = ($MSG '$MSG)
(CONST 34) = $FAILURE
(CONST 35) = (%DERIVATIVE)
(CONST 36) = ($Y '$Y)
(CONST 37) = ($X '$X)
(CONST 38) = (2)
(CONST 39) = $COEFF
(CONST 40) = (%DERIVATIVE)
(CONST 41) = ($Y '$Y)
(CONST 42) = ($X '$X)
(CONST 43) = ($Y '$Y)
(CONST 44) = (%DERIVATIVE)
(CONST 45) = ($Y '$Y)
(CONST 46) = ($X '$X)
(CONST 47) = (2)
(CONST 48) = MUL*
(CONST 49) = (%DERIVATIVE)
(CONST 50) = ($Y '$Y)
(CONST 51) = ($X '$X)
(CONST 52) = ($Y '$Y)
(CONST 53) = $EXPAND
(CONST 54) = $PR2
(CONST 55) = $HOM2
(CONST 56) = 0
(CONST 57) = ($%Q% '$%Q%)
(CONST 58) = ($%Q% '$%Q%)
(CONST 59) = DIV
(CONST 60) = $VARP
(CONST 61) = $REDUCE
(CONST 62) = ($%Q% '$%Q%)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($METHOD $INTFACTOR)
170 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; $Y
3     (LOAD 4)
4     (BIND 1)                            ; $X
6     (CONST&PUSH 2)                      ; $DE
7     (CONST&PUSH 3)                      ; $A1
8     (CONST&PUSH 4)                      ; $A2
9     (CONST&PUSH 5)                      ; $A3
10    (CONST&PUSH 6)                      ; $A4
11    (CONST 7)                           ; $%Q%
12    (BIND 7)                            ; $%Q%
14    (NIL)
15    (SETVALUE 8)                        ; $INTFACTOR
17    (CONST 9)                           ; $NONE
18    (SETVALUE 10)                       ; $METHOD
20    (CONST&PUSH 11)                     ; (%DERIVATIVE)
21    (CONST&PUSH 12)                     ; ($Y '$Y)
22    (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
24    (CONST&PUSH 14)                     ; ($X '$X)
25    (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
27    (CONST 15)                          ; (2)
28    (LIST*&PUSH 3)
30    (CALL1&PUSH 16)                     ; SIMPLIFY
32    (LOAD&PUSH 18)
33    (CALL2&JMPIF 17 L227)               ; $FREEOF
37    (LOAD&PUSH 17)
38    (CALL1&PUSH 23)                     ; $LHS
40    (LOAD&PUSH 18)
41    (CALL1&PUSH 24)                     ; $RHS
43    (CALL1&PUSH 25)                     ; *MMINUS
45    (CALL2&PUSH 26)                     ; ADD*
47    (CALL1&PUSH 27)                     ; $DESIMP
49    (CALL1 16)                          ; SIMPLIFY
51    (STORE 7)
52    (PUSH)
53    (CONST&PUSH 28)                     ; ($Y '$Y)
54    (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
56    (CONST&PUSH 29)                     ; ($X '$X)
57    (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
59    (CALL&PUSH 3 30)                    ; $DERIVDEGREE
62    (CALL1&PUSH 16)                     ; SIMPLIFY
64    (CONST&PUSH 31)                     ; 2
66    (CALL2&JMPIFNOT 32 L245)            ; LIKE
70    (LOAD&PUSH 7)
71    (CONST&PUSH 35)                     ; (%DERIVATIVE)
73    (CONST&PUSH 36)                     ; ($Y '$Y)
75    (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
77    (CONST&PUSH 37)                     ; ($X '$X)
79    (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
81    (CONST 38)                          ; (2)
83    (LIST*&PUSH 3)
85    (CALL1&PUSH 16)                     ; SIMPLIFY
87    (CALL2&PUSH 39)                     ; $COEFF
89    (CALL1 16)                          ; SIMPLIFY
91    (STORE 6)
92    (LOAD&PUSH 7)
93    (CONST&PUSH 40)                     ; (%DERIVATIVE)
95    (CONST&PUSH 41)                     ; ($Y '$Y)
97    (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
99    (CONST&PUSH 42)                     ; ($X '$X)
101   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
103   (LIST&PUSH 3)
105   (CALL1&PUSH 16)                     ; SIMPLIFY
107   (CALL2&PUSH 39)                     ; $COEFF
109   (CALL1 16)                          ; SIMPLIFY
111   (STORE 5)
112   (LOAD&PUSH 7)
113   (CONST&PUSH 43)                     ; ($Y '$Y)
115   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
117   (CALL2&PUSH 39)                     ; $COEFF
119   (CALL1 16)                          ; SIMPLIFY
121   (STORE 4)
122   (LOAD&PUSH 7)
123   (LOAD&PUSH 7)
124   (CONST&PUSH 44)                     ; (%DERIVATIVE)
126   (CONST&PUSH 45)                     ; ($Y '$Y)
128   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
130   (CONST&PUSH 46)                     ; ($X '$X)
132   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
134   (CONST 47)                          ; (2)
136   (LIST*&PUSH 3)
138   (CALL1&PUSH 16)                     ; SIMPLIFY
140   (CALL2&PUSH 48)                     ; MUL*
142   (CALL1&PUSH 25)                     ; *MMINUS
144   (LOAD&PUSH 7)
145   (CALL1&PUSH 25)                     ; *MMINUS
147   (CONST&PUSH 49)                     ; (%DERIVATIVE)
149   (CONST&PUSH 50)                     ; ($Y '$Y)
151   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
153   (CONST&PUSH 51)                     ; ($X '$X)
155   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
157   (LIST&PUSH 3)
159   (CALL1&PUSH 16)                     ; SIMPLIFY
161   (CALL2&PUSH 48)                     ; MUL*
163   (LOAD&PUSH 7)
164   (CALL1&PUSH 25)                     ; *MMINUS
166   (CONST&PUSH 52)                     ; ($Y '$Y)
168   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
170   (CALL2&PUSH 48)                     ; MUL*
172   (CALL&PUSH 4 26)                    ; ADD*
175   (CALL1&PUSH 53)                     ; $EXPAND
177   (CALL1 16)                          ; SIMPLIFY
179   (STORE 3)
180   (LOAD&PUSH 6)
181   (CALL1&JMPIFNOT 54 L207)            ; $PR2
184   (LOAD&PUSH 5)
185   (CALL1&JMPIFNOT 54 L207)            ; $PR2
188   (LOAD&PUSH 4)
189   (CALL1&JMPIFNOT 54 L207)            ; $PR2
192   (LOAD&PUSH 3)
193   (CALL1&JMPIFNOT 54 L207)            ; $PR2
196   (LOAD&PUSH 6)
197   (LOAD&PUSH 6)
198   (LOAD&PUSH 6)
199   (CALL&PUSH 3 55)                    ; $HOM2
202   (CALL1&PUSH 16)                     ; SIMPLIFY
204   (CALL1&JMPIF 21 L258)               ; $FTEST
207   L207
207   (LOAD&PUSH 7)
208   (CALL1&PUSH 61)                     ; $REDUCE
210   (CALL1&PUSH 16)                     ; SIMPLIFY
212   (CALL1&JMPIFNOT 21 L280)            ; $FTEST
216   (CONST 62)                          ; ($%Q% '$%Q%)
218   L218
218   (PUSH)
219   (CALL1 13)                          ; |TRD-MSYMEVAL-aux|
221   (JMP L281)
223   L223
223   (CONST 22)                          ; ($%Q% '$%Q%)
225   (JMP L218)
227   L227
227   (LOAD&PUSH 17)
228   (CONST&PUSH 18)                     ; ($Y '$Y)
229   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
231   (CONST&PUSH 19)                     ; ($X '$X)
232   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
234   (CALL&PUSH 3 20)                    ; $ODE1A
237   (CALL1&PUSH 16)                     ; SIMPLIFY
239   (CALL1&JMPIF 21 L223)               ; $FTEST
242   (NIL)
243   (JMP L281)
245   L245
245   (CONST&PUSH 33)                     ; ($MSG '$MSG)
247   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
249   (LOAD&PUSH 18)
250   (CALL2 34)                          ; $FAILURE
252   (JMP L281)
254   L254
254   (CONST 57)                          ; ($%Q% '$%Q%)
256   (JMP L218)
258   L258
258   (LOAD&PUSH 3)
259   (CONST&PUSH 56)                     ; 0
261   (CALL2&JMPIF 32 L254)               ; LIKE
264   (CONST&PUSH 58)                     ; ($%Q% '$%Q%)
266   (CALL1&PUSH 13)                     ; |TRD-MSYMEVAL-aux|
268   (LOAD&PUSH 4)
269   (CALL1&PUSH 25)                     ; *MMINUS
271   (LOAD&PUSH 8)
272   (CALL2&PUSH 59)                     ; DIV
274   (CALL2&PUSH 60)                     ; $VARP
276   (CALL1 16)                          ; SIMPLIFY
278   (JMP L281)
280   L280
280   (NIL)
281   L281
281   (UNBIND1)
282   (SKIP 5)
284   (UNBIND 2)
286   (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE1A T ...) ...)-6-1|
(CONST 0) = $ODE1A
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE1A
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE1A T ...) ...)-6-2|
(CONST 0) = $ODE1A
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE1A
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE1A T ...) ...)-6-3-1|
(CONST 0) = $ODE1A
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE1A
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE1A T ...) ...)-6-3-2|
(CONST 0) = $ODE1A
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE1A
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE1A T ...) ...)-6-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $ODE1A
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $ODE1A
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $ODE1A T ...) ...)-6-3-5|
(CONST 0) = $ODE1A
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ODE1A>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ODE1A
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ODE1A
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ODE1A>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ODE1A
8     (SKIP&RET 1)


Disassembly of function $ODE1A
(CONST 0) = $Y
(CONST 1) = $X
(CONST 2) = $DE
(CONST 3) = $DES
(CONST 4) = $LHS
(CONST 5) = $RHS
(CONST 6) = *MMINUS
(CONST 7) = ADD*
(CONST 8) = $EXPAND
(CONST 9) = SIMPLIFY
(CONST 10) = ($Y '$Y)
(CONST 11) = |TRD-MSYMEVAL-aux|
(CONST 12) = ($X '$X)
(CONST 13) = $DERIVDEGREE
(CONST 14) = 1
(CONST 15) = LIKE
(CONST 16) = ($MSG1 '$MSG1)
(CONST 17) = $FAILURE
(CONST 18) = (%DERIVATIVE)
(CONST 19) = ($Y '$Y)
(CONST 20) = ($X '$X)
(CONST 21) = $LINEAR2
(CONST 22) = ($MSG2 '$MSG2)
(CONST 23) = $DESIMP
(CONST 24) = (%DERIVATIVE)
(CONST 25) = ($Y '$Y)
(CONST 26) = ($X '$X)
(CONST 27) = $SOLVE1
(CONST 28) = $SOLVELNR
(CONST 29) = $FTEST
(CONST 30) = ($%Q% '$%Q%)
(CONST 31) = $SEPARABLE
(CONST 32) = ($%Q% '$%Q%)
(CONST 33) = ($%G% '$%G%)
(CONST 34) = ($%F% '$%F%)
(CONST 35) = $INTEGFACTOR
(CONST 36) = ($%Q% '$%Q%)
(CONST 37) = ($%G% '$%G%)
(CONST 38) = MUL*
(CONST 39) = ($%Q% '$%Q%)
(CONST 40) = ($%F% '$%F%)
(CONST 41) = $EXACT
(CONST 42) = (%DERIVATIVE)
(CONST 43) = ($Y '$Y)
(CONST 44) = ($X '$X)
(CONST 45) = ($MSG2 '$MSG2)
(CONST 46) = ($%G% '$%G%)
(CONST 47) = ($%F% '$%F%)
(CONST 48) = ($%Q% '$%Q%)
(CONST 49) = ($%G% '$%G%)
(CONST 50) = ($%Q% '$%Q%)
(CONST 51) = ($%F% '$%F%)
(CONST 52) = $SOLVEHOM
(CONST 53) = ($%Q% '$%Q%)
(CONST 54) = $SOLVEBERNOULLI
(CONST 55) = ($%Q% '$%Q%)
(CONST 56) = $GENHOM
(CONST 57) = ($%Q% '$%Q%)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
163 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; $Y
3     (LOAD 4)
4     (BIND 1)                            ; $X
6     (CONST&PUSH 2)                      ; $DE
7     (CONST&PUSH 3)                      ; $DES
8     (LOAD&PUSH 11)
9     (CALL1&PUSH 4)                      ; $LHS
11    (LOAD&PUSH 12)
12    (CALL1&PUSH 5)                      ; $RHS
14    (CALL1&PUSH 6)                      ; *MMINUS
16    (CALL2&PUSH 7)                      ; ADD*
18    (CALL1&PUSH 8)                      ; $EXPAND
20    (CALL1 9)                           ; SIMPLIFY
22    (STORE 1)
23    (PUSH)
24    (CONST&PUSH 10)                     ; ($Y '$Y)
25    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
27    (CONST&PUSH 12)                     ; ($X '$X)
28    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
30    (CALL&PUSH 3 13)                    ; $DERIVDEGREE
33    (CALL1&PUSH 9)                      ; SIMPLIFY
35    (CONST&PUSH 14)                     ; 1
36    (CALL2&JMPIFNOT 15 L154)            ; LIKE
40    (LOAD&PUSH 1)
41    (CONST&PUSH 18)                     ; (%DERIVATIVE)
42    (CONST&PUSH 19)                     ; ($Y '$Y)
43    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
45    (CONST&PUSH 20)                     ; ($X '$X)
46    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
48    (LIST&PUSH 3)
50    (CALL1&PUSH 9)                      ; SIMPLIFY
52    (CALL2&PUSH 21)                     ; $LINEAR2
54    (CALL1&PUSH 9)                      ; SIMPLIFY
56    (NIL&PUSH)
57    (CALL2&JMPIF 15 L157)               ; LIKE
61    (LOAD&PUSH 1)
62    (CALL1&PUSH 23)                     ; $DESIMP
64    (CALL1 9)                           ; SIMPLIFY
66    (STORE 0)
67    (PUSH)
68    (CONST&PUSH 24)                     ; (%DERIVATIVE)
69    (CONST&PUSH 25)                     ; ($Y '$Y)
70    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
72    (CONST&PUSH 26)                     ; ($X '$X)
73    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
75    (LIST&PUSH 3)
77    (CALL1&PUSH 9)                      ; SIMPLIFY
79    (CALL2&PUSH 27)                     ; $SOLVE1
81    (CALL1 9)                           ; SIMPLIFY
83    (STORE 1)
84    (PUSH)
85    (CALL1&PUSH 28)                     ; $SOLVELNR
87    (CALL1&PUSH 9)                      ; SIMPLIFY
89    (CALL1&JMPIF 29 L161)               ; $FTEST
93    (LOAD&PUSH 1)
94    (CALL1&PUSH 31)                     ; $SEPARABLE
96    (CALL1&PUSH 9)                      ; SIMPLIFY
98    (CALL1&JMPIF 29 L166)               ; $FTEST
102   (CONST&PUSH 33)                     ; ($%G% '$%G%)
104   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
106   (CONST&PUSH 34)                     ; ($%F% '$%F%)
108   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
110   (CALL2&PUSH 35)                     ; $INTEGFACTOR
112   (CALL1&PUSH 9)                      ; SIMPLIFY
114   (CALL1&JMPIF 29 L171)               ; $FTEST
117   (LOAD&PUSH 0)
118   (CONST&PUSH 42)                     ; (%DERIVATIVE)
120   (CONST&PUSH 43)                     ; ($Y '$Y)
122   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
124   (CONST&PUSH 44)                     ; ($X '$X)
126   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
128   (LIST&PUSH 3)
130   (CALL1&PUSH 9)                      ; SIMPLIFY
132   (CALL2&PUSH 21)                     ; $LINEAR2
134   (CALL1&PUSH 9)                      ; SIMPLIFY
136   (NIL&PUSH)
137   (CALL2&JMPIFNOT 15 L226)            ; LIKE
141   (CONST 45)                          ; ($MSG2 '$MSG2)
143   L143
143   (PUSH)
144   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
146   (LOAD&PUSH 12)
147   (CALL2 17)                          ; $FAILURE
149   (SKIP 2)
151   (JMP L277)
154   L154
154   (CONST 16)                          ; ($MSG1 '$MSG1)
155   (JMP L143)
157   L157
157   (CONST 22)                          ; ($MSG2 '$MSG2)
159   (JMP L143)
161   L161
161   (CONST 30)                          ; ($%Q% '$%Q%)
163   (JMP L267)
166   L166
166   (CONST 32)                          ; ($%Q% '$%Q%)
168   (JMP L267)
171   L171
171   (CONST&PUSH 36)                     ; ($%Q% '$%Q%)
173   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
175   (CONST&PUSH 37)                     ; ($%G% '$%G%)
177   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
179   (CALL2&PUSH 38)                     ; MUL*
181   (CONST&PUSH 39)                     ; ($%Q% '$%Q%)
183   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
185   (CONST 40)                          ; ($%F% '$%F%)
187   (JMP L205)
189   L189
189   (CONST&PUSH 48)                     ; ($%Q% '$%Q%)
191   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
193   (CONST&PUSH 49)                     ; ($%G% '$%G%)
195   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
197   (CALL2&PUSH 38)                     ; MUL*
199   (CONST&PUSH 50)                     ; ($%Q% '$%Q%)
201   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
203   (CONST 51)                          ; ($%F% '$%F%)
205   L205
205   (PUSH)
206   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
208   (CALL2&PUSH 38)                     ; MUL*
210   (CALL2&PUSH 41)                     ; $EXACT
212   (CALL1 9)                           ; SIMPLIFY
214   (SKIP 2)
216   (JMP L277)
218   L218
218   (CONST 53)                          ; ($%Q% '$%Q%)
220   (JMP L267)
222   L222
222   (CONST 55)                          ; ($%Q% '$%Q%)
224   (JMP L267)
226   L226
226   (CONST&PUSH 46)                     ; ($%G% '$%G%)
228   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
230   (CONST&PUSH 47)                     ; ($%F% '$%F%)
232   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
234   (CALL2&PUSH 35)                     ; $INTEGFACTOR
236   (CALL1&PUSH 9)                      ; SIMPLIFY
238   (CALL1&JMPIF 29 L189)               ; $FTEST
241   (LOAD&PUSH 1)
242   (CALL1&PUSH 52)                     ; $SOLVEHOM
244   (CALL1&PUSH 9)                      ; SIMPLIFY
246   (CALL1&JMPIF 29 L218)               ; $FTEST
249   (LOAD&PUSH 1)
250   (CALL1&PUSH 54)                     ; $SOLVEBERNOULLI
252   (CALL1&PUSH 9)                      ; SIMPLIFY
254   (CALL1&JMPIF 29 L222)               ; $FTEST
257   (LOAD&PUSH 1)
258   (CALL1&PUSH 56)                     ; $GENHOM
260   (CALL1&PUSH 9)                      ; SIMPLIFY
262   (CALL1&JMPIFNOT 29 L274)            ; $FTEST
265   (CONST 57)                          ; ($%Q% '$%Q%)
267   L267
267   (PUSH)
268   (CALL1 11)                          ; |TRD-MSYMEVAL-aux|
270   (SKIP 2)
272   (JMP L277)
274   L274
274   (NIL)
275   (SKIP 2)
277   L277
277   (UNBIND 2)
279   (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $DESIMP T ...) ...)-7-1|
(CONST 0) = $DESIMP
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DESIMP
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $DESIMP T ...) ...)-7-2|
(CONST 0) = $DESIMP
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DESIMP
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $DESIMP T ...) ...)-7-3-1|
(CONST 0) = $DESIMP
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DESIMP
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $DESIMP T ...) ...)-7-3-2|
(CONST 0) = $DESIMP
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DESIMP
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $DESIMP T ...) ...)-7-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $DESIMP
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $DESIMP
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $DESIMP T ...) ...)-7-3-5|
(CONST 0) = $DESIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DESIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DESIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DESIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DESIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DESIMP
8     (SKIP&RET 1)


Disassembly of function $DESIMP
(CONST 0) = $INFLAG
(CONST 1) = $FACTOR
(CONST 2) = SIMPLIFY
(CONST 3) = $ATOM
(CONST 4) = 0
(CONST 5) = $INPART
(CONST 6) = &*
(CONST 7) = LIKE
(CONST 8) = $EXPAND
(CONST 9) = #<COMPILED-CLOSURE $DESIMP-1>
(CONST 10) = GETOPR
(CONST 11) = MAP1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
29 byte-code instructions:
0     (T)
1     (BIND 0)                            ; $INFLAG
3     (LOAD&PUSH 4)
4     (CALL1&PUSH 1)                      ; $FACTOR
6     (CALL1 2)                           ; SIMPLIFY
8     (STORE 4)
9     (PUSH)
10    (CALL1&JMPIF 3 L40)                 ; $ATOM
13    (LOAD&PUSH 4)
14    (CONST&PUSH 4)                      ; 0
15    (CALL2&PUSH 5)                      ; $INPART
17    (CALL1&PUSH 2)                      ; SIMPLIFY
19    (CONST&PUSH 6)                      ; &*
20    (CALL2&JMPIFNOT 7 L40)              ; LIKE
23    (CONST&PUSH 9)                      ; #<COMPILED-CLOSURE $DESIMP-1>
24    (CALL1&PUSH 10)                     ; GETOPR
26    (LOAD&PUSH 5)
27    (CALL2&PUSH 11)                     ; MAP1
29    (CALL1 2)                           ; SIMPLIFY
31    (STORE 4)
32    L32
32    (PUSH)
33    (CALL1&PUSH 8)                      ; $EXPAND
35    (CALL1 2)                           ; SIMPLIFY
37    (UNBIND1)
38    (SKIP&RET 2)
40    L40
40    (LOAD 4)
41    (JMP L32)


Disassembly of function $DESIMP-1
(CONST 0) = $U
(CONST 1) = $DIFF
(CONST 2) = $NOUNIFY
(CONST 3) = SIMPLIFY
(CONST 4) = $FREEOF
(CONST 5) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($U)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; $U
3     (CONST&PUSH 1)                      ; $DIFF
4     (CALL1&PUSH 2)                      ; $NOUNIFY
6     (CALL1&PUSH 3)                      ; SIMPLIFY
8     (GETVALUE&PUSH 0)                   ; $U
10    (CALL2&JMPIF 4 L18)                 ; $FREEOF
13    (GETVALUE 0)                        ; $U
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)
18    L18
18    (CONST 5)                           ; 1
19    (JMP L15)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PR2 T ...) ...)-8-1|
(CONST 0) = $PR2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PR2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PR2 T ...) ...)-8-2|
(CONST 0) = $PR2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PR2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PR2 T ...) ...)-8-3-1|
(CONST 0) = $PR2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PR2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PR2 T ...) ...)-8-3-2|
(CONST 0) = $PR2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $BOOLEAN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PR2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $BOOLEAN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PR2 T ...) ...)-8-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $PR2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $PR2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PR2 T ...) ...)-8-3-5|
(CONST 0) = $PR2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PR2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PR2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PR2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PR2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PR2
8     (SKIP&RET 1)


Disassembly of function $PR2
(CONST 0) = $%F%
(CONST 1) = ($Y '$Y)
(CONST 2) = |TRD-MSYMEVAL-aux|
(CONST 3) = (%DERIVATIVE)
(CONST 4) = ($Y '$Y)
(CONST 5) = ($X '$X)
(CONST 6) = SIMPLIFY
(CONST 7) = (%DERIVATIVE)
(CONST 8) = ($Y '$Y)
(CONST 9) = ($X '$X)
(CONST 10) = (2)
(CONST 11) = ($%F% '$%F%)
(CONST 12) = $FREEOF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; $%F%
3     (CONST&PUSH 1)                      ; ($Y '$Y)
4     (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
6     (CONST&PUSH 3)                      ; (%DERIVATIVE)
7     (CONST&PUSH 4)                      ; ($Y '$Y)
8     (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
10    (CONST&PUSH 5)                      ; ($X '$X)
11    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
13    (LIST&PUSH 3)
15    (CALL1&PUSH 6)                      ; SIMPLIFY
17    (CONST&PUSH 7)                      ; (%DERIVATIVE)
18    (CONST&PUSH 8)                      ; ($Y '$Y)
19    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
21    (CONST&PUSH 9)                      ; ($X '$X)
22    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
24    (CONST 10)                          ; (2)
25    (LIST*&PUSH 3)
27    (CALL1&PUSH 6)                      ; SIMPLIFY
29    (CONST&PUSH 11)                     ; ($%F% '$%F%)
30    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
32    (CALL 4 12)                         ; $FREEOF
35    (UNBIND1)
36    (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FTEST T ...) ...)-9-1|
(CONST 0) = $FTEST
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FTEST
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FTEST T ...) ...)-9-2|
(CONST 0) = $FTEST
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FTEST
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FTEST T ...) ...)-9-3-1|
(CONST 0) = $FTEST
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FTEST
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FTEST T ...) ...)-9-3-2|
(CONST 0) = $FTEST
(CONST 1) = FUNCTION-MODE
(CONST 2) = $BOOLEAN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FTEST
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $BOOLEAN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FTEST T ...) ...)-9-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $FTEST
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $FTEST
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FTEST T ...) ...)-9-3-5|
(CONST 0) = $FTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FTEST
8     (SKIP&RET 1)


Disassembly of function $FTEST
(CONST 0) = $%Q%
(CONST 1) = LIKE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($%Q%)
7 byte-code instructions:
0     (LOAD 1)
1     (SETVALUE 0)                        ; $%Q%
3     (PUSH)
4     (NIL&PUSH)
5     (CALL2 1)                           ; LIKE
7     (NOT)
8     (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVE1 T ...) ...)-10-1|
(CONST 0) = $SOLVE1
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVE1
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVE1 T ...) ...)-10-2|
(CONST 0) = $SOLVE1
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVE1
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVE1 T ...) ...)-10-3-1|
(CONST 0) = $SOLVE1
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVE1
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVE1 T ...) ...)-10-3-2|
(CONST 0) = $SOLVE1
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVE1
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVE1 T ...) ...)-10-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $SOLVE1
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $SOLVE1
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVE1 T ...) ...)-10-3-5|
(CONST 0) = $SOLVE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SOLVE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SOLVE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SOLVE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SOLVE1
8     (SKIP&RET 1)


Disassembly of function $SOLVE1
(CONST 0) = $Y
(CONST 1) = $PROGRAMMODE
(CONST 2) = ($Y '$Y)
(CONST 3) = |TRD-MSYMEVAL-aux|
(CONST 4) = $SOLVE
(CONST 5) = SIMPLIFY
(CONST 6) = $FIRST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; $Y
3     (T)
4     (BIND 1)                            ; $PROGRAMMODE
6     (LOAD&PUSH 8)
7     (CONST&PUSH 2)                      ; ($Y '$Y)
8     (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
10    (CALL2&PUSH 4)                      ; $SOLVE
12    (CALL1&PUSH 5)                      ; SIMPLIFY
14    (CALL1&PUSH 6)                      ; $FIRST
16    (CALL1 5)                           ; SIMPLIFY
18    (UNBIND 2)
20    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $LINEAR2 T ...) ...)-11-1|
(CONST 0) = $LINEAR2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINEAR2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $LINEAR2 T ...) ...)-11-2|
(CONST 0) = $LINEAR2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINEAR2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $LINEAR2 T ...) ...)-11-3-1|
(CONST 0) = $LINEAR2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINEAR2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $LINEAR2 T ...) ...)-11-3-2|
(CONST 0) = $LINEAR2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINEAR2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $LINEAR2 T ...) ...)-11-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $LINEAR2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $LINEAR2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $LINEAR2 T ...) ...)-11-3-5|
(CONST 0) = $LINEAR2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LINEAR2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LINEAR2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LINEAR2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LINEAR2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LINEAR2
8     (SKIP&RET 1)


Disassembly of function $LINEAR2
(CONST 0) = $X
(CONST 1) = ($X '$X)
(CONST 2) = |TRD-MSYMEVAL-aux|
(CONST 3) = $RATCOEF
(CONST 4) = SIMPLIFY
(CONST 5) = $%F%
(CONST 6) = ($X '$X)
(CONST 7) = ($%F% '$%F%)
(CONST 8) = $FREEOF
(CONST 9) = ($%F% '$%F%)
(CONST 10) = ($X '$X)
(CONST 11) = MUL*
(CONST 12) = *MMINUS
(CONST 13) = ADD*
(CONST 14) = $RATSIMP
(CONST 15) = $%G%
(CONST 16) = ($X '$X)
(CONST 17) = ($%G% '$%G%)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($%G% $%F%)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; $X
3     (LOAD&PUSH 5)
4     (CONST&PUSH 1)                      ; ($X '$X)
5     (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
7     (CALL2&PUSH 3)                      ; $RATCOEF
9     (CALL1 4)                           ; SIMPLIFY
11    (SETVALUE 5)                        ; $%F%
13    (CONST&PUSH 6)                      ; ($X '$X)
14    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
16    (CONST&PUSH 7)                      ; ($%F% '$%F%)
17    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
19    (CALL2&JMPIFNOT 8 L52)              ; $FREEOF
22    (LOAD&PUSH 5)
23    (CONST&PUSH 9)                      ; ($%F% '$%F%)
24    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
26    (CONST&PUSH 10)                     ; ($X '$X)
27    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
29    (CALL2&PUSH 11)                     ; MUL*
31    (CALL1&PUSH 12)                     ; *MMINUS
33    (CALL2&PUSH 13)                     ; ADD*
35    (CALL1&PUSH 14)                     ; $RATSIMP
37    (CALL1 4)                           ; SIMPLIFY
39    (SETVALUE 15)                       ; $%G%
41    (CONST&PUSH 16)                     ; ($X '$X)
42    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
44    (CONST&PUSH 17)                     ; ($%G% '$%G%)
45    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
47    (CALL2 8)                           ; $FREEOF
49    L49
49    (UNBIND1)
50    (SKIP&RET 3)
52    L52
52    (NIL)
53    (JMP L49)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVELNR T ...) ...)-12-1|
(CONST 0) = $SOLVELNR
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVELNR
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVELNR T ...) ...)-12-2|
(CONST 0) = $SOLVELNR
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVELNR
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVELNR T ...) ...)-12-3-1|
(CONST 0) = $SOLVELNR
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVELNR
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVELNR T ...) ...)-12-3-2|
(CONST 0) = $SOLVELNR
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVELNR
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVELNR T ...) ...)-12-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $SOLVELNR
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $SOLVELNR
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVELNR T ...) ...)-12-3-5|
(CONST 0) = $SOLVELNR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SOLVELNR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVELNR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SOLVELNR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SOLVELNR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SOLVELNR
8     (SKIP&RET 1)


Disassembly of function $SOLVELNR
(CONST 0) = $%F%
(CONST 1) = $%G%
(CONST 2) = $W
(CONST 3) = $RHS
(CONST 4) = ($Y '$Y)
(CONST 5) = |TRD-MSYMEVAL-aux|
(CONST 6) = $LINEAR2
(CONST 7) = SIMPLIFY
(CONST 8) = LIKE
(CONST 9) = ($%F% '$%F%)
(CONST 10) = ($X '$X)
(CONST 11) = $INTEGRATE
(CONST 12) = $EXP
(CONST 13) = $LINEAR
(CONST 14) = $METHOD
(CONST 15) = (MEQUAL)
(CONST 16) = ($Y '$Y)
(CONST 17) = ($%G% '$%G%)
(CONST 18) = DIV
(CONST 19) = ($X '$X)
(CONST 20) = $%C
(CONST 21) = ADD*
(CONST 22) = MUL*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($W)
writes special variables : ($METHOD $W)
48 byte-code instructions:
0     (CONST 0)                           ; $%F%
1     (BIND 0)                            ; $%F%
3     (CONST 1)                           ; $%G%
4     (BIND 1)                            ; $%G%
6     (CONST 2)                           ; $W
7     (BIND 2)                            ; $W
9     (LOAD&PUSH 10)
10    (CALL1&PUSH 3)                      ; $RHS
12    (CONST&PUSH 4)                      ; ($Y '$Y)
13    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
15    (CALL2&PUSH 6)                      ; $LINEAR2
17    (CALL1&PUSH 7)                      ; SIMPLIFY
19    (NIL&PUSH)
20    (CALL2&JMPIF 8 L75)                 ; LIKE
23    (CONST&PUSH 9)                      ; ($%F% '$%F%)
24    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
26    (CONST&PUSH 10)                     ; ($X '$X)
27    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
29    (CALL2&PUSH 11)                     ; $INTEGRATE
31    (CALL1&PUSH 7)                      ; SIMPLIFY
33    (CALL1&PUSH 12)                     ; $EXP
35    (CALL1 7)                           ; SIMPLIFY
37    (SETVALUE 2)                        ; $W
39    (CONST 13)                          ; $LINEAR
40    (SETVALUE 14)                       ; $METHOD
42    (CONST&PUSH 15)                     ; (MEQUAL)
43    (CONST&PUSH 16)                     ; ($Y '$Y)
44    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
46    (GETVALUE&PUSH 2)                   ; $W
48    (CONST&PUSH 17)                     ; ($%G% '$%G%)
49    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
51    (GETVALUE&PUSH 2)                   ; $W
53    (CALL2&PUSH 18)                     ; DIV
55    (CONST&PUSH 19)                     ; ($X '$X)
56    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
58    (CALL2&PUSH 11)                     ; $INTEGRATE
60    (CALL1&PUSH 7)                      ; SIMPLIFY
62    (CONST&PUSH 20)                     ; $%C
63    (CALL2&PUSH 21)                     ; ADD*
65    (CALL2&PUSH 22)                     ; MUL*
67    (LIST&PUSH 3)
69    (CALL1 7)                           ; SIMPLIFY
71    L71
71    (UNBIND 3)
73    (SKIP&RET 2)
75    L75
75    (NIL)
76    (JMP L71)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SEPARABLE T ...) ...)-13-1|
(CONST 0) = $SEPARABLE
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SEPARABLE
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SEPARABLE T ...) ...)-13-2|
(CONST 0) = $SEPARABLE
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SEPARABLE
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SEPARABLE T ...) ...)-13-3-1|
(CONST 0) = $SEPARABLE
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SEPARABLE
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SEPARABLE T ...) ...)-13-3-2|
(CONST 0) = $SEPARABLE
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SEPARABLE
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SEPARABLE T ...) ...)-13-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $SEPARABLE
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $SEPARABLE
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SEPARABLE T ...) ...)-13-3-5|
(CONST 0) = $SEPARABLE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SEPARABLE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SEPARABLE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SEPARABLE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SEPARABLE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SEPARABLE
8     (SKIP&RET 1)


Disassembly of function $SEPARABLE
(CONST 0) = ((MLIST))
(CONST 1) = ((MLIST))
(CONST 2) = $INFLAG
(CONST 3) = $RHS
(CONST 4) = $FACTOR
(CONST 5) = SIMPLIFY
(CONST 6) = $ATOM
(CONST 7) = 0
(CONST 8) = $INPART
(CONST 9) = &*
(CONST 10) = LIKE
(CONST 11) = (MLIST)
(CONST 12) = $U
(CONST 13) = ($X '$X)
(CONST 14) = |TRD-MSYMEVAL-aux|
(CONST 15) = $FREEOF
(CONST 16) = $CONS
(CONST 17) = ($Y '$Y)
(CONST 18) = ((MLIST))
(CONST 19) = 1
(CONST 20) = MAPPLY-TR
(CONST 21) = ((MLIST))
(CONST 22) = $SEPARABLE
(CONST 23) = $METHOD
(CONST 24) = (MEQUAL)
(CONST 25) = DIV
(CONST 26) = ($Y '$Y)
(CONST 27) = $INTEGRATE
(CONST 28) = $RATSIMP
(CONST 29) = ($X '$X)
(CONST 30) = $%C
(CONST 31) = ADD*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($U)
writes special variables : ($METHOD $U)
121 byte-code instructions:
0     (CONST&PUSH 0)                      ; ((MLIST))
1     (CONST&PUSH 1)                      ; ((MLIST))
2     (NIL&PUSH)
3     (T)
4     (BIND 2)                            ; $INFLAG
6     (LOAD&PUSH 7)
7     (CALL1&PUSH 3)                      ; $RHS
9     (CALL1&PUSH 4)                      ; $FACTOR
11    (CALL1 5)                           ; SIMPLIFY
13    (STORE 7)
14    (PUSH)
15    (CALL1&JMPIF 6 L28)                 ; $ATOM
18    (LOAD&PUSH 7)
19    (CONST&PUSH 7)                      ; 0
20    (CALL2&PUSH 8)                      ; $INPART
22    (CALL1&PUSH 5)                      ; SIMPLIFY
24    (CONST&PUSH 9)                      ; &*
25    (CALL2&JMPIF 10 L33)                ; LIKE
28    L28
28    (CONST&PUSH 11)                     ; (MLIST)
29    (LOAD&PUSH 8)
30    (LIST 2)
32    (STORE 7)
33    L33
33    (NIL&PUSH)
34    (LOAD&CDR&PUSH 8)
36    (LOAD 1)
37    (BIND 12)                           ; $U
39    (LOAD&JMPIFNOT 3 L76)
42    L42
42    (LOAD 3)
43    (CAR)
44    (SETVALUE 12)                       ; $U
46    (CONST&PUSH 13)                     ; ($X '$X)
47    (CALL1&PUSH 14)                     ; |TRD-MSYMEVAL-aux|
49    (GETVALUE&PUSH 12)                  ; $U
51    (CALL2&JMPIF 15 L154)               ; $FREEOF
55    (CONST&PUSH 17)                     ; ($Y '$Y)
56    (CALL1&PUSH 14)                     ; |TRD-MSYMEVAL-aux|
58    (GETVALUE&PUSH 12)                  ; $U
60    (CALL2&JMPIFNOT 15 L164)            ; $FREEOF
64    (GETVALUE&PUSH 12)                  ; $U
66    (LOAD&PUSH 11)
67    (CALL2 16)                          ; $CONS
69    (STORE 10)
71    L71
71    (LOAD&CDR&STORE 3)
73    (LOAD&JMPIF 3 L42)
76    L76
76    (UNBIND1)
77    (SKIP 2)
79    L79
79    (LOAD&PUSH 3)
80    (T&PUSH)
81    (CALL2&JMPIF 10 L172)               ; LIKE
85    (LOAD&PUSH 5)
86    (CONST&PUSH 18)                     ; ((MLIST))
87    (CALL2&JMPIF 10 L175)               ; LIKE
91    (CONST&PUSH 9)                      ; &*
92    (LOAD&PUSH 6)
93    (CALL2&PUSH 20)                     ; MAPPLY-TR
95    (CALL1 5)                           ; SIMPLIFY
97    (STORE 5)
98    L98
98    (LOAD&PUSH 4)
99    (CONST&PUSH 21)                     ; ((MLIST))
100   (CALL2&JMPIF 10 L180)               ; LIKE
104   (CONST&PUSH 9)                      ; &*
105   (LOAD&PUSH 5)
106   (CALL2&PUSH 20)                     ; MAPPLY-TR
108   (CALL1 5)                           ; SIMPLIFY
110   (STORE 4)
111   L111
111   (CONST 22)                          ; $SEPARABLE
113   (SETVALUE 23)                       ; $METHOD
115   (CONST&PUSH 24)                     ; (MEQUAL)
116   (CONST&PUSH 19)                     ; 1
117   (LOAD&PUSH 6)
118   (CALL2&PUSH 25)                     ; DIV
120   (CONST&PUSH 26)                     ; ($Y '$Y)
121   (CALL1&PUSH 14)                     ; |TRD-MSYMEVAL-aux|
123   (CALL2&PUSH 27)                     ; $INTEGRATE
125   (CALL1&PUSH 5)                      ; SIMPLIFY
127   (CALL1&PUSH 28)                     ; $RATSIMP
129   (CALL1&PUSH 5)                      ; SIMPLIFY
131   (LOAD&PUSH 7)
132   (CONST&PUSH 29)                     ; ($X '$X)
133   (CALL1&PUSH 14)                     ; |TRD-MSYMEVAL-aux|
135   (CALL2&PUSH 27)                     ; $INTEGRATE
137   (CALL1&PUSH 5)                      ; SIMPLIFY
139   (CALL1&PUSH 28)                     ; $RATSIMP
141   (CALL1&PUSH 5)                      ; SIMPLIFY
143   (CONST&PUSH 30)                     ; $%C
145   (CALL2&PUSH 31)                     ; ADD*
147   (LIST&PUSH 3)
149   (CALL1 5)                           ; SIMPLIFY
151   L151
151   (UNBIND1)
152   (SKIP&RET 5)
154   L154
154   (GETVALUE&PUSH 12)                  ; $U
156   (LOAD&PUSH 10)
157   (CALL2 16)                          ; $CONS
159   (STORE 9)
161   (JMP L71)
164   L164
164   (T&STORE 8)
166   (UNBIND1)
167   (SKIP 2)
169   (JMP L79)
172   L172
172   (NIL)
173   (JMP L151)
175   L175
175   (CONST 19)                          ; 1
176   (STORE 5)
177   (JMP L98)
180   L180
180   (CONST 19)                          ; 1
181   (STORE 4)
182   (JMP L111)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $INTEGFACTOR T ...) ...)-14-1|
(CONST 0) = $INTEGFACTOR
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGFACTOR
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $INTEGFACTOR T ...) ...)-14-2|
(CONST 0) = $INTEGFACTOR
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGFACTOR
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $INTEGFACTOR T ...) ...)-14-3-1|
(CONST 0) = $INTEGFACTOR
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGFACTOR
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $INTEGFACTOR T ...) ...)-14-3-2|
(CONST 0) = $INTEGFACTOR
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGFACTOR
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $INTEGFACTOR T ...) ...)-14-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $INTEGFACTOR
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $INTEGFACTOR
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $INTEGFACTOR T ...) ...)-14-3-5|
(CONST 0) = $INTEGFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INTEGFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTEGFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INTEGFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INTEGFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INTEGFACTOR
8     (SKIP&RET 1)


Disassembly of function $INTEGFACTOR
(CONST 0) = $B1
(CONST 1) = $B2
(CONST 2) = $DMDX
(CONST 3) = $DMDY
(CONST 4) = $DNDX
(CONST 5) = $DNDY
(CONST 6) = $DD
(CONST 7) = $%E_TO_NUMLOG
(CONST 8) = ($Y '$Y)
(CONST 9) = |TRD-MSYMEVAL-aux|
(CONST 10) = $DIFF
(CONST 11) = SIMPLIFY
(CONST 12) = $RATSIMP
(CONST 13) = ($X '$X)
(CONST 14) = *MMINUS
(CONST 15) = ADD*
(CONST 16) = 0
(CONST 17) = LIKE
(CONST 18) = 1
(CONST 19) = ($X '$X)
(CONST 20) = ($Y '$Y)
(CONST 21) = 2
(CONST 22) = POWER
(CONST 23) = DIV
(CONST 24) = ($Y '$Y)
(CONST 25) = $FREEOF
(CONST 26) = ($X '$X)
(CONST 27) = $INTEGRATE
(CONST 28) = $EXP
(CONST 29) = ($X '$X)
(CONST 30) = ($Y '$Y)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
115 byte-code instructions:
0     (CONST&PUSH 0)                      ; $B1
1     (CONST&PUSH 1)                      ; $B2
2     (CONST&PUSH 2)                      ; $DMDX
3     (CONST&PUSH 3)                      ; $DMDY
4     (CONST&PUSH 4)                      ; $DNDX
5     (CONST&PUSH 5)                      ; $DNDY
6     (CONST&PUSH 6)                      ; $DD
7     (T)
8     (BIND 7)                            ; $%E_TO_NUMLOG
10    (LOAD&PUSH 12)
11    (CONST&PUSH 8)                      ; ($Y '$Y)
12    (CALL1&PUSH 9)                      ; |TRD-MSYMEVAL-aux|
14    (CALL2&PUSH 10)                     ; $DIFF
16    (CALL1&PUSH 11)                     ; SIMPLIFY
18    (CALL1&PUSH 12)                     ; $RATSIMP
20    (CALL1 11)                          ; SIMPLIFY
22    (STORE 6)
23    (LOAD&PUSH 11)
24    (CONST&PUSH 13)                     ; ($X '$X)
25    (CALL1&PUSH 9)                      ; |TRD-MSYMEVAL-aux|
27    (CALL2&PUSH 10)                     ; $DIFF
29    (CALL1&PUSH 11)                     ; SIMPLIFY
31    (CALL1&PUSH 12)                     ; $RATSIMP
33    (CALL1 11)                          ; SIMPLIFY
35    (STORE 5)
36    (LOAD&PUSH 6)
37    (LOAD&PUSH 6)
38    (CALL1&PUSH 14)                     ; *MMINUS
40    (CALL2 15)                          ; ADD*
42    (STORE 3)
43    (PUSH)
44    (CONST&PUSH 16)                     ; 0
45    (CALL2&JMPIF 17 L145)               ; LIKE
49    (LOAD&PUSH 12)
50    (CONST&PUSH 19)                     ; ($X '$X)
51    (CALL1&PUSH 9)                      ; |TRD-MSYMEVAL-aux|
53    (CALL2&PUSH 10)                     ; $DIFF
55    (CALL1&PUSH 11)                     ; SIMPLIFY
57    (CALL1&PUSH 12)                     ; $RATSIMP
59    (CALL1 11)                          ; SIMPLIFY
61    (STORE 7)
62    (LOAD&PUSH 11)
63    (CONST&PUSH 20)                     ; ($Y '$Y)
64    (CALL1&PUSH 9)                      ; |TRD-MSYMEVAL-aux|
66    (CALL2&PUSH 10)                     ; $DIFF
68    (CALL1&PUSH 11)                     ; SIMPLIFY
70    (CALL1&PUSH 12)                     ; $RATSIMP
72    (CALL1 11)                          ; SIMPLIFY
74    (STORE 4)
75    (LOAD&PUSH 7)
76    (LOAD&PUSH 5)
77    (CALL1&PUSH 14)                     ; *MMINUS
79    (CALL2&PUSH 15)                     ; ADD*
81    (CONST&PUSH 16)                     ; 0
82    (CALL2&JMPIFNOT 17 L93)             ; LIKE
85    (LOAD&PUSH 6)
86    (LOAD&PUSH 6)
87    (CALL2&PUSH 15)                     ; ADD*
89    (CONST&PUSH 16)                     ; 0
90    (CALL2&JMPIF 17 L148)               ; LIKE
93    L93
93    (CONST&PUSH 24)                     ; ($Y '$Y)
94    (CALL1&PUSH 9)                      ; |TRD-MSYMEVAL-aux|
96    (LOAD&PUSH 4)
97    (LOAD&PUSH 13)
98    (CALL2&PUSH 23)                     ; DIV
100   (CALL1&PUSH 12)                     ; $RATSIMP
102   (CALL1 11)                          ; SIMPLIFY
104   (STORE 10)
106   (PUSH)
107   (CALL2&JMPIF 25 L163)               ; $FREEOF
110   (CONST&PUSH 29)                     ; ($X '$X)
111   (CALL1&PUSH 9)                      ; |TRD-MSYMEVAL-aux|
113   (LOAD&PUSH 4)
114   (LOAD&PUSH 14)
115   (CALL2&PUSH 23)                     ; DIV
117   (CALL1&PUSH 12)                     ; $RATSIMP
119   (CALL1 11)                          ; SIMPLIFY
121   (STORE 9)
123   (PUSH)
124   (CALL2&JMPIFNOT 25 L168)            ; $FREEOF
127   (LOAD&PUSH 8)
128   (CALL1&PUSH 14)                     ; *MMINUS
130   (CONST 30)                          ; ($Y '$Y)
132   L132
132   (PUSH)
133   (CALL1&PUSH 9)                      ; |TRD-MSYMEVAL-aux|
135   (CALL2&PUSH 27)                     ; $INTEGRATE
137   (CALL1&PUSH 11)                     ; SIMPLIFY
139   (CALL1&PUSH 28)                     ; $EXP
141   (CALL1 11)                          ; SIMPLIFY
143   (JMP L169)
145   L145
145   (CONST 18)                          ; 1
146   (JMP L169)
148   L148
148   (CONST&PUSH 18)                     ; 1
149   (LOAD&PUSH 13)
150   (CONST&PUSH 21)                     ; 2
151   (CALL2&PUSH 22)                     ; POWER
153   (LOAD&PUSH 13)
154   (CONST&PUSH 21)                     ; 2
155   (CALL2&PUSH 22)                     ; POWER
157   (CALL2&PUSH 15)                     ; ADD*
159   (CALL2 23)                          ; DIV
161   (JMP L169)
163   L163
163   (LOAD&PUSH 9)
164   (CONST 26)                          ; ($X '$X)
166   (JMP L132)
168   L168
168   (NIL)
169   L169
169   (UNBIND1)
170   (SKIP&RET 10)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT T ...) ...)-15-1|
(CONST 0) = $EXACT
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT T ...) ...)-15-2|
(CONST 0) = $EXACT
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT T ...) ...)-15-3-1|
(CONST 0) = $EXACT
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT T ...) ...)-15-3-2|
(CONST 0) = $EXACT
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT T ...) ...)-15-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $EXACT
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $EXACT
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT T ...) ...)-15-3-5|
(CONST 0) = $EXACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EXACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EXACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EXACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EXACT
8     (SKIP&RET 1)


Disassembly of function $EXACT
(CONST 0) = $A
(CONST 1) = $YNEW
(CONST 2) = ($YOLD '$YOLD)
(CONST 3) = |TRD-MSYMEVAL-aux|
(CONST 4) = ($%Q% '$%Q%)
(CONST 5) = $SUBSTITUTE
(CONST 6) = SIMPLIFY
(CONST 7) = $INTFACTOR
(CONST 8) = $RATSIMP
(CONST 9) = ($X '$X)
(CONST 10) = $INTEGRATE
(CONST 11) = $EXACT
(CONST 12) = $METHOD
(CONST 13) = (MEQUAL)
(CONST 14) = ($Y '$Y)
(CONST 15) = $DIFF
(CONST 16) = *MMINUS
(CONST 17) = ADD*
(CONST 18) = ($Y '$Y)
(CONST 19) = $%C
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($YNEW)
writes special variables : ($METHOD $INTFACTOR)
45 byte-code instructions:
0     (CONST&PUSH 0)                      ; $A
1     (CONST 1)                           ; $YNEW
2     (BIND 1)                            ; $YNEW
4     (CONST&PUSH 2)                      ; ($YOLD '$YOLD)
5     (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
7     (GETVALUE&PUSH 1)                   ; $YNEW
9     (CONST&PUSH 4)                      ; ($%Q% '$%Q%)
10    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
12    (CALL&PUSH 3 5)                     ; $SUBSTITUTE
15    (CALL1 6)                           ; SIMPLIFY
17    (SETVALUE 7)                        ; $INTFACTOR
19    (LOAD&PUSH 6)
20    (CALL1&PUSH 8)                      ; $RATSIMP
22    (CALL1&PUSH 6)                      ; SIMPLIFY
24    (CONST&PUSH 9)                      ; ($X '$X)
25    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
27    (CALL2&PUSH 10)                     ; $INTEGRATE
29    (CALL1 6)                           ; SIMPLIFY
31    (STORE 3)
32    (CONST 11)                          ; $EXACT
33    (SETVALUE 12)                       ; $METHOD
35    (CONST&PUSH 13)                     ; (MEQUAL)
36    (LOAD&PUSH 4)
37    (LOAD&PUSH 7)
38    (LOAD&PUSH 6)
39    (CONST&PUSH 14)                     ; ($Y '$Y)
40    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
42    (CALL2&PUSH 15)                     ; $DIFF
44    (CALL1&PUSH 6)                      ; SIMPLIFY
46    (CALL1&PUSH 16)                     ; *MMINUS
48    (CALL2&PUSH 17)                     ; ADD*
50    (CALL1&PUSH 8)                      ; $RATSIMP
52    (CALL1&PUSH 6)                      ; SIMPLIFY
54    (CONST&PUSH 18)                     ; ($Y '$Y)
55    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
57    (CALL2&PUSH 10)                     ; $INTEGRATE
59    (CALL1&PUSH 6)                      ; SIMPLIFY
61    (CALL2&PUSH 17)                     ; ADD*
63    (CALL1&PUSH 8)                      ; $RATSIMP
65    (CALL1&PUSH 6)                      ; SIMPLIFY
67    (CONST&PUSH 19)                     ; $%C
68    (LIST&PUSH 3)
70    (CALL1 6)                           ; SIMPLIFY
72    (UNBIND1)
73    (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEHOM T ...) ...)-16-1|
(CONST 0) = $SOLVEHOM
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEHOM
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEHOM T ...) ...)-16-2|
(CONST 0) = $SOLVEHOM
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEHOM
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEHOM T ...) ...)-16-3-1|
(CONST 0) = $SOLVEHOM
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEHOM
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEHOM T ...) ...)-16-3-2|
(CONST 0) = $SOLVEHOM
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEHOM
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEHOM T ...) ...)-16-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $SOLVEHOM
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $SOLVEHOM
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEHOM T ...) ...)-16-3-5|
(CONST 0) = $SOLVEHOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SOLVEHOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEHOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SOLVEHOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SOLVEHOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SOLVEHOM
8     (SKIP&RET 1)


Disassembly of function $SOLVEHOM
(CONST 0) = $A1
(CONST 1) = $A2
(CONST 2) = ($X '$X)
(CONST 3) = |TRD-MSYMEVAL-aux|
(CONST 4) = $QQ
(CONST 5) = MUL*
(CONST 6) = ($Y '$Y)
(CONST 7) = $RHS
(CONST 8) = $SUBSTITUTE
(CONST 9) = SIMPLIFY
(CONST 10) = $RATSIMP
(CONST 11) = ($X '$X)
(CONST 12) = $FREEOF
(CONST 13) = ($Y '$Y)
(CONST 14) = ($X '$X)
(CONST 15) = DIV
(CONST 16) = 1
(CONST 17) = *MMINUS
(CONST 18) = ADD*
(CONST 19) = $INTEGRATE
(CONST 20) = $HOMOGENEOUS
(CONST 21) = $METHOD
(CONST 22) = (MEQUAL)
(CONST 23) = $%C
(CONST 24) = ($X '$X)
(CONST 25) = $EXP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($METHOD)
55 byte-code instructions:
0     (CONST&PUSH 0)                      ; $A1
1     (CONST&PUSH 1)                      ; $A2
2     (CONST&PUSH 2)                      ; ($X '$X)
3     (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
5     (CONST&PUSH 4)                      ; $QQ
6     (CALL2&PUSH 5)                      ; MUL*
8     (CONST&PUSH 6)                      ; ($Y '$Y)
9     (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
11    (LOAD&PUSH 5)
12    (CALL1&PUSH 7)                      ; $RHS
14    (CALL&PUSH 3 8)                     ; $SUBSTITUTE
17    (CALL1&PUSH 9)                      ; SIMPLIFY
19    (CALL1&PUSH 10)                     ; $RATSIMP
21    (CALL1 9)                           ; SIMPLIFY
23    (STORE 1)
24    (CONST&PUSH 11)                     ; ($X '$X)
25    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
27    (LOAD&PUSH 2)
28    (CALL2&JMPIFNOT 12 L85)             ; $FREEOF
31    (CONST&PUSH 13)                     ; ($Y '$Y)
32    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
34    (CONST&PUSH 14)                     ; ($X '$X)
35    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
37    (CALL2&PUSH 15)                     ; DIV
39    (CONST&PUSH 4)                      ; $QQ
40    (CONST&PUSH 16)                     ; 1
41    (LOAD&PUSH 4)
42    (CONST&PUSH 4)                      ; $QQ
43    (CALL1&PUSH 17)                     ; *MMINUS
45    (CALL2&PUSH 18)                     ; ADD*
47    (CALL2&PUSH 15)                     ; DIV
49    (CONST&PUSH 4)                      ; $QQ
50    (CALL2&PUSH 19)                     ; $INTEGRATE
52    (CALL1&PUSH 9)                      ; SIMPLIFY
54    (CALL&PUSH 3 8)                     ; $SUBSTITUTE
57    (CALL1&PUSH 9)                      ; SIMPLIFY
59    (CALL1&PUSH 10)                     ; $RATSIMP
61    (CALL1 9)                           ; SIMPLIFY
63    (STORE 0)
64    (CONST 20)                          ; $HOMOGENEOUS
65    (SETVALUE 21)                       ; $METHOD
67    (CONST&PUSH 22)                     ; (MEQUAL)
68    (CONST&PUSH 23)                     ; $%C
69    (CONST&PUSH 24)                     ; ($X '$X)
70    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
72    (CALL2&PUSH 5)                      ; MUL*
74    (LOAD&PUSH 2)
75    (CALL1&PUSH 25)                     ; $EXP
77    (CALL1&PUSH 9)                      ; SIMPLIFY
79    (LIST&PUSH 3)
81    (CALL1 9)                           ; SIMPLIFY
83    (SKIP&RET 4)
85    L85
85    (NIL)
86    (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEBERNOULLI T ...) ...)-17-1|
(CONST 0) = $SOLVEBERNOULLI
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEBERNOULLI
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEBERNOULLI T ...) ...)-17-2|
(CONST 0) = $SOLVEBERNOULLI
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEBERNOULLI
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEBERNOULLI T ...) ...)-17-3-1|
(CONST 0) = $SOLVEBERNOULLI
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEBERNOULLI
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEBERNOULLI T ...) ...)-17-3-2|
(CONST 0) = $SOLVEBERNOULLI
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEBERNOULLI
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEBERNOULLI T ...) ...)-17-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $SOLVEBERNOULLI
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $SOLVEBERNOULLI
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $SOLVEBERNOULLI T ...) ...)-17-3-5|
(CONST 0) = $SOLVEBERNOULLI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SOLVEBERNOULLI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SOLVEBERNOULLI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SOLVEBERNOULLI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SOLVEBERNOULLI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SOLVEBERNOULLI
8     (SKIP&RET 1)


Disassembly of function $SOLVEBERNOULLI
(CONST 0) = $A1
(CONST 1) = $A2
(CONST 2) = $N
(CONST 3) = $RHS
(CONST 4) = $EXPAND
(CONST 5) = SIMPLIFY
(CONST 6) = ($Y '$Y)
(CONST 7) = |TRD-MSYMEVAL-aux|
(CONST 8) = 1
(CONST 9) = $COEFF
(CONST 10) = ($Y '$Y)
(CONST 11) = $FREEOF
(CONST 12) = ($Y '$Y)
(CONST 13) = MUL*
(CONST 14) = *MMINUS
(CONST 15) = ADD*
(CONST 16) = $RATSIMP
(CONST 17) = ($Y '$Y)
(CONST 18) = $HIPOW
(CONST 19) = ($Y '$Y)
(CONST 20) = ($Y '$Y)
(CONST 21) = ($X '$X)
(CONST 22) = ($Y '$Y)
(CONST 23) = 0
(CONST 24) = LIKE
(CONST 25) = ($Y '$Y)
(CONST 26) = ($Y '$Y)
(CONST 27) = POWER
(CONST 28) = ($X '$X)
(CONST 29) = $INTEGRATE
(CONST 30) = $BERNOULLI
(CONST 31) = $METHOD
(CONST 32) = $ODEINDEX
(CONST 33) = (MEQUAL)
(CONST 34) = ($Y '$Y)
(CONST 35) = $EXP
(CONST 36) = -1
(CONST 37) = ($X '$X)
(CONST 38) = $%C
(CONST 39) = DIV
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($ODEINDEX $METHOD)
120 byte-code instructions:
0     (CONST&PUSH 0)                      ; $A1
1     (CONST&PUSH 1)                      ; $A2
2     (CONST&PUSH 2)                      ; $N
3     (LOAD&PUSH 4)
4     (CALL1&PUSH 3)                      ; $RHS
6     (CALL1&PUSH 4)                      ; $EXPAND
8     (CALL1 5)                           ; SIMPLIFY
10    (STORE 4)
11    (PUSH)
12    (CONST&PUSH 6)                      ; ($Y '$Y)
13    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
15    (CONST&PUSH 8)                      ; 1
16    (CALL&PUSH 3 9)                     ; $COEFF
19    (CALL1 5)                           ; SIMPLIFY
21    (STORE 2)
22    (CONST&PUSH 10)                     ; ($Y '$Y)
23    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
25    (LOAD&PUSH 3)
26    (CALL2&JMPIFNOT 11 L113)            ; $FREEOF
30    (LOAD&PUSH 4)
31    (LOAD&PUSH 3)
32    (CONST&PUSH 12)                     ; ($Y '$Y)
33    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
35    (CALL2&PUSH 13)                     ; MUL*
37    (CALL1&PUSH 14)                     ; *MMINUS
39    (CALL2&PUSH 15)                     ; ADD*
41    (CALL1&PUSH 16)                     ; $RATSIMP
43    (CALL1&PUSH 5)                      ; SIMPLIFY
45    (CONST&PUSH 17)                     ; ($Y '$Y)
46    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
48    (CALL2&PUSH 18)                     ; $HIPOW
50    (CALL1 5)                           ; SIMPLIFY
52    (STORE 0)
53    (LOAD&PUSH 4)
54    (CONST&PUSH 19)                     ; ($Y '$Y)
55    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
57    (LOAD&PUSH 2)
58    (CALL&PUSH 3 9)                     ; $COEFF
61    (CALL1 5)                           ; SIMPLIFY
63    (STORE 1)
64    (CONST&PUSH 20)                     ; ($Y '$Y)
65    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
67    (LOAD&PUSH 2)
68    (CALL2&JMPIFNOT 11 L113)            ; $FREEOF
71    (CONST&PUSH 21)                     ; ($X '$X)
72    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
74    (CONST&PUSH 22)                     ; ($Y '$Y)
75    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
77    (LOAD&PUSH 2)
78    (CALL 3 11)                         ; $FREEOF
81    (JMPIFNOT L113)
83    (LOAD&PUSH 0)
84    (CONST&PUSH 23)                     ; 0
85    (CALL2&JMPIF 24 L113)               ; LIKE
88    (LOAD&PUSH 4)
89    (LOAD&PUSH 3)
90    (CONST&PUSH 25)                     ; ($Y '$Y)
91    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
93    (CALL2&PUSH 13)                     ; MUL*
95    (LOAD&PUSH 3)
96    (CONST&PUSH 26)                     ; ($Y '$Y)
97    (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
99    (LOAD&PUSH 4)
100   (CALL2&PUSH 27)                     ; POWER
102   (CALL2&PUSH 13)                     ; MUL*
104   (CALL2&PUSH 15)                     ; ADD*
106   (CALL1&PUSH 4)                      ; $EXPAND
108   (CALL1&PUSH 5)                      ; SIMPLIFY
110   (CALL2&JMPIF 24 L116)               ; LIKE
113   L113
113   (NIL)
114   (SKIP&RET 5)
116   L116
116   (LOAD&PUSH 2)
117   (CONST&PUSH 28)                     ; ($X '$X)
118   (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
120   (CALL2&PUSH 29)                     ; $INTEGRATE
122   (CALL1 5)                           ; SIMPLIFY
124   (STORE 2)
125   (CONST 30)                          ; $BERNOULLI
127   (SETVALUE 31)                       ; $METHOD
129   (LOAD 0)
130   (SETVALUE 32)                       ; $ODEINDEX
132   (CONST&PUSH 33)                     ; (MEQUAL)
134   (CONST&PUSH 34)                     ; ($Y '$Y)
136   (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
138   (LOAD&PUSH 4)
139   (CALL1&PUSH 35)                     ; $EXP
141   (CALL1&PUSH 5)                      ; SIMPLIFY
143   (CONST&PUSH 8)                      ; 1
144   (LOAD&PUSH 4)
145   (CALL1&PUSH 14)                     ; *MMINUS
147   (CALL2&PUSH 15)                     ; ADD*
149   (LOAD&PUSH 5)
150   (LOAD&PUSH 5)
151   (CONST&PUSH 36)                     ; -1
153   (CALL2&PUSH 15)                     ; ADD*
155   (LOAD&PUSH 8)
156   (CALL2&PUSH 13)                     ; MUL*
158   (CALL1&PUSH 35)                     ; $EXP
160   (CALL1&PUSH 5)                      ; SIMPLIFY
162   (CALL2&PUSH 13)                     ; MUL*
164   (CONST&PUSH 37)                     ; ($X '$X)
166   (CALL1&PUSH 7)                      ; |TRD-MSYMEVAL-aux|
168   (CALL2&PUSH 29)                     ; $INTEGRATE
170   (CALL1&PUSH 5)                      ; SIMPLIFY
172   (CALL2&PUSH 13)                     ; MUL*
174   (CONST&PUSH 38)                     ; $%C
176   (CALL2&PUSH 15)                     ; ADD*
178   (CONST&PUSH 8)                      ; 1
179   (CONST&PUSH 8)                      ; 1
180   (LOAD&PUSH 6)
181   (CALL1&PUSH 14)                     ; *MMINUS
183   (CALL2&PUSH 15)                     ; ADD*
185   (CALL2&PUSH 39)                     ; DIV
187   (CALL2&PUSH 27)                     ; POWER
189   (CALL2&PUSH 13)                     ; MUL*
191   (LIST&PUSH 3)
193   (CALL1 5)                           ; SIMPLIFY
195   (SKIP&RET 5)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $GENHOM T ...) ...)-18-1|
(CONST 0) = $GENHOM
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GENHOM
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $GENHOM T ...) ...)-18-2|
(CONST 0) = $GENHOM
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GENHOM
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $GENHOM T ...) ...)-18-3-1|
(CONST 0) = $GENHOM
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GENHOM
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $GENHOM T ...) ...)-18-3-2|
(CONST 0) = $GENHOM
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GENHOM
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $GENHOM T ...) ...)-18-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $GENHOM
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $GENHOM
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $GENHOM T ...) ...)-18-3-5|
(CONST 0) = $GENHOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GENHOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GENHOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GENHOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GENHOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GENHOM
8     (SKIP&RET 1)


Disassembly of function $GENHOM
(CONST 0) = $%G%
(CONST 1) = $U
(CONST 2) = $N
(CONST 3) = $A1
(CONST 4) = $A2
(CONST 5) = $A3
(CONST 6) = $RHS
(CONST 7) = ($X '$X)
(CONST 8) = |TRD-MSYMEVAL-aux|
(CONST 9) = MUL*
(CONST 10) = ($Y '$Y)
(CONST 11) = DIV
(CONST 12) = ($X '$X)
(CONST 13) = ($%G% '$%G%)
(CONST 14) = ($X '$X)
(CONST 15) = $DIFF
(CONST 16) = SIMPLIFY
(CONST 17) = ($Y '$Y)
(CONST 18) = ($%G% '$%G%)
(CONST 19) = ($Y '$Y)
(CONST 20) = $RATSIMP
(CONST 21) = ($X '$X)
(CONST 22) = ($Y '$Y)
(CONST 23) = $FREEOF
(CONST 24) = ($X '$X)
(CONST 25) = POWER
(CONST 26) = ($Y '$Y)
(CONST 27) = ($%G% '$%G%)
(CONST 28) = $SUBSTITUTE
(CONST 29) = 1
(CONST 30) = ADD*
(CONST 31) = $INTEGRATE
(CONST 32) = $NOUNIFY
(CONST 33) = ($Y '$Y)
(CONST 34) = ($X '$X)
(CONST 35) = $GENHOM
(CONST 36) = $METHOD
(CONST 37) = $ODEINDEX
(CONST 38) = (MEQUAL)
(CONST 39) = ($X '$X)
(CONST 40) = $%C
(CONST 41) = $EXP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($U)
writes special variables : ($ODEINDEX $METHOD $%G%)
115 byte-code instructions:
0     (CONST 0)                           ; $%G%
1     (BIND 0)                            ; $%G%
3     (CONST 1)                           ; $U
4     (BIND 1)                            ; $U
6     (CONST&PUSH 2)                      ; $N
7     (CONST&PUSH 3)                      ; $A1
8     (CONST&PUSH 4)                      ; $A2
9     (CONST&PUSH 5)                      ; $A3
10    (LOAD&PUSH 11)
11    (CALL1&PUSH 6)                      ; $RHS
13    (CONST&PUSH 7)                      ; ($X '$X)
14    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
16    (CALL2&PUSH 9)                      ; MUL*
18    (CONST&PUSH 10)                     ; ($Y '$Y)
19    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
21    (CALL2 11)                          ; DIV
23    (SETVALUE 0)                        ; $%G%
25    (CONST&PUSH 12)                     ; ($X '$X)
26    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
28    (CONST&PUSH 13)                     ; ($%G% '$%G%)
29    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
31    (CONST&PUSH 14)                     ; ($X '$X)
32    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
34    (CALL2&PUSH 15)                     ; $DIFF
36    (CALL1&PUSH 16)                     ; SIMPLIFY
38    (CALL2&PUSH 9)                      ; MUL*
40    (CONST&PUSH 17)                     ; ($Y '$Y)
41    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
43    (CONST&PUSH 18)                     ; ($%G% '$%G%)
44    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
46    (CONST&PUSH 19)                     ; ($Y '$Y)
47    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
49    (CALL2&PUSH 15)                     ; $DIFF
51    (CALL1&PUSH 16)                     ; SIMPLIFY
53    (CALL2&PUSH 9)                      ; MUL*
55    (CALL2&PUSH 11)                     ; DIV
57    (CALL1&PUSH 20)                     ; $RATSIMP
59    (CALL1 16)                          ; SIMPLIFY
61    (STORE 3)
62    (CONST&PUSH 21)                     ; ($X '$X)
63    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
65    (CONST&PUSH 22)                     ; ($Y '$Y)
66    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
68    (LOAD&PUSH 5)
69    (CALL 3 23)                         ; $FREEOF
72    (JMPIFNOT L187)
75    (GETVALUE&PUSH 1)                   ; $U
77    (CONST&PUSH 24)                     ; ($X '$X)
78    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
80    (LOAD&PUSH 5)
81    (CALL2&PUSH 25)                     ; POWER
83    (CALL2&PUSH 11)                     ; DIV
85    (CONST&PUSH 26)                     ; ($Y '$Y)
86    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
88    (CONST&PUSH 27)                     ; ($%G% '$%G%)
89    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
91    (CALL&PUSH 3 28)                    ; $SUBSTITUTE
94    (CALL1&PUSH 16)                     ; SIMPLIFY
96    (CALL1&PUSH 20)                     ; $RATSIMP
98    (CALL1 16)                          ; SIMPLIFY
100   (STORE 2)
101   (CONST&PUSH 29)                     ; 1
102   (GETVALUE&PUSH 1)                   ; $U
104   (LOAD&PUSH 5)
105   (LOAD&PUSH 5)
106   (CALL2&PUSH 30)                     ; ADD*
108   (CALL2&PUSH 9)                      ; MUL*
110   (CALL2&PUSH 11)                     ; DIV
112   (GETVALUE&PUSH 1)                   ; $U
114   (CALL2&PUSH 31)                     ; $INTEGRATE
116   (CALL1 16)                          ; SIMPLIFY
118   (STORE 1)
119   (CONST&PUSH 31)                     ; $INTEGRATE
121   (CALL1&PUSH 32)                     ; $NOUNIFY
123   (CALL1&PUSH 16)                     ; SIMPLIFY
125   (LOAD&PUSH 2)
126   (CALL2&JMPIFNOT 23 L190)            ; $FREEOF
129   (CONST&PUSH 33)                     ; ($Y '$Y)
131   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
133   (CONST&PUSH 34)                     ; ($X '$X)
135   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
137   (LOAD&PUSH 5)
138   (CALL2&PUSH 25)                     ; POWER
140   (CALL2&PUSH 9)                      ; MUL*
142   (GETVALUE&PUSH 1)                   ; $U
144   (LOAD&PUSH 3)
145   (CALL&PUSH 3 28)                    ; $SUBSTITUTE
148   (CALL1&PUSH 16)                     ; SIMPLIFY
150   (CALL1&PUSH 20)                     ; $RATSIMP
152   (CALL1 16)                          ; SIMPLIFY
154   (STORE 0)
155   (CONST 35)                          ; $GENHOM
157   (SETVALUE 36)                       ; $METHOD
159   (LOAD 3)
160   (SETVALUE 37)                       ; $ODEINDEX
162   (CONST&PUSH 38)                     ; (MEQUAL)
164   (CONST&PUSH 39)                     ; ($X '$X)
166   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
168   (CONST&PUSH 40)                     ; $%C
170   (LOAD&PUSH 3)
171   (CALL1&PUSH 41)                     ; $EXP
173   (CALL1&PUSH 16)                     ; SIMPLIFY
175   (CALL2&PUSH 9)                      ; MUL*
177   (LIST&PUSH 3)
179   (CALL1 16)                          ; SIMPLIFY
181   L181
181   (SKIP 4)
183   (UNBIND 2)
185   (SKIP&RET 2)
187   L187
187   (NIL)
188   (JMP L181)
190   L190
190   (NIL)
191   (JMP L181)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $HOM2 T ...) ...)-19-1|
(CONST 0) = $HOM2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HOM2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $HOM2 T ...) ...)-19-2|
(CONST 0) = $HOM2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HOM2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $HOM2 T ...) ...)-19-3-1|
(CONST 0) = $HOM2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HOM2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $HOM2 T ...) ...)-19-3-2|
(CONST 0) = $HOM2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HOM2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $HOM2 T ...) ...)-19-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $HOM2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $HOM2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $HOM2 T ...) ...)-19-3-5|
(CONST 0) = $HOM2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $HOM2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HOM2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $HOM2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $HOM2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $HOM2
8     (SKIP&RET 1)


Disassembly of function $HOM2
(CONST 0) = $AP
(CONST 1) = $AQ
(CONST 2) = $PT
(CONST 3) = DIV
(CONST 4) = ($Y '$Y)
(CONST 5) = |TRD-MSYMEVAL-aux|
(CONST 6) = ($X '$X)
(CONST 7) = $CC2
(CONST 8) = SIMPLIFY
(CONST 9) = $FTEST
(CONST 10) = ($%Q% '$%Q%)
(CONST 11) = $EXACT2
(CONST 12) = ($%Q% '$%Q%)
(CONST 13) = $PTTEST
(CONST 14) = LIKE
(CONST 15) = $EULER2
(CONST 16) = ($%Q% '$%Q%)
(CONST 17) = $BESSEL2
(CONST 18) = ($%Q% '$%Q%)
(CONST 19) = $XCC2
(CONST 20) = ($%Q% '$%Q%)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($PT)
72 byte-code instructions:
0     (CONST&PUSH 0)                      ; $AP
1     (CONST&PUSH 1)                      ; $AQ
2     (CONST 2)                           ; $PT
3     (BIND 2)                            ; $PT
5     (LOAD&PUSH 7)
6     (LOAD&PUSH 9)
7     (CALL2 3)                           ; DIV
9     (STORE 4)
10    (LOAD&PUSH 6)
11    (LOAD&PUSH 9)
12    (CALL2 3)                           ; DIV
14    (STORE 3)
15    (LOAD&PUSH 4)
16    (LOAD&PUSH 4)
17    (CONST&PUSH 4)                      ; ($Y '$Y)
18    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
20    (CONST&PUSH 6)                      ; ($X '$X)
21    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
23    (CALL&PUSH 4 7)                     ; $CC2
26    (CALL1&PUSH 8)                      ; SIMPLIFY
28    (CALL1&JMPIF 9 L87)                 ; $FTEST
31    (LOAD&PUSH 8)
32    (LOAD&PUSH 8)
33    (LOAD&PUSH 8)
34    (CALL&PUSH 3 11)                    ; $EXACT2
37    (CALL1&PUSH 8)                      ; SIMPLIFY
39    (CALL1&JMPIF 9 L90)                 ; $FTEST
42    (LOAD&PUSH 4)
43    (CALL1&PUSH 13)                     ; $PTTEST
45    (CALL1 8)                           ; SIMPLIFY
47    (SETVALUE 2)                        ; $PT
49    (PUSH)
50    (NIL&PUSH)
51    (CALL2&JMPIF 14 L72)                ; LIKE
54    (LOAD&PUSH 4)
55    (LOAD&PUSH 4)
56    (CALL2&PUSH 15)                     ; $EULER2
58    (CALL1&PUSH 8)                      ; SIMPLIFY
60    (CALL1&JMPIF 9 L93)                 ; $FTEST
63    (LOAD&PUSH 4)
64    (LOAD&PUSH 4)
65    (CALL2&PUSH 17)                     ; $BESSEL2
67    (CALL1&PUSH 8)                      ; SIMPLIFY
69    (CALL1&JMPIF 9 L96)                 ; $FTEST
72    L72
72    (LOAD&PUSH 4)
73    (LOAD&PUSH 4)
74    (CALL2&PUSH 19)                     ; $XCC2
76    (CALL1&PUSH 8)                      ; SIMPLIFY
78    (CALL1&JMPIFNOT 9 L99)              ; $FTEST
81    (CONST 20)                          ; ($%Q% '$%Q%)
82    L82
82    (PUSH)
83    (CALL1 5)                           ; |TRD-MSYMEVAL-aux|
85    (JMP L100)
87    L87
87    (CONST 10)                          ; ($%Q% '$%Q%)
88    (JMP L82)
90    L90
90    (CONST 12)                          ; ($%Q% '$%Q%)
91    (JMP L82)
93    L93
93    (CONST 16)                          ; ($%Q% '$%Q%)
94    (JMP L82)
96    L96
96    (CONST 18)                          ; ($%Q% '$%Q%)
97    (JMP L82)
99    L99
99    (NIL)
100   L100
100   (UNBIND1)
101   (SKIP&RET 6)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $CC2 T ...) ...)-20-1|
(CONST 0) = $CC2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CC2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $CC2 T ...) ...)-20-2|
(CONST 0) = $CC2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CC2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $CC2 T ...) ...)-20-3-1|
(CONST 0) = $CC2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CC2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $CC2 T ...) ...)-20-3-2|
(CONST 0) = $CC2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CC2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $CC2 T ...) ...)-20-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $CC2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $CC2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $CC2 T ...) ...)-20-3-5|
(CONST 0) = $CC2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CC2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CC2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CC2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CC2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CC2
8     (SKIP&RET 1)


Disassembly of function $CC2
(CONST 0) = $%F%
(CONST 1) = $%G%
(CONST 2) = $Y
(CONST 3) = $X
(CONST 4) = $A
(CONST 5) = $SIGN
(CONST 6) = $ALL
(CONST 7) = $RADEXPAND
(CONST 8) = $ALPHA
(CONST 9) = $YNEW
(CONST 10) = ($X '$X)
(CONST 11) = |TRD-MSYMEVAL-aux|
(CONST 12) = ($Y '$Y)
(CONST 13) = ($%F% '$%F%)
(CONST 14) = $FREEOF
(CONST 15) = ($X '$X)
(CONST 16) = ($Y '$Y)
(CONST 17) = ($%G% '$%G%)
(CONST 18) = $CONSTCOEFF
(CONST 19) = $METHOD
(CONST 20) = ($%F% '$%F%)
(CONST 21) = 2
(CONST 22) = POWER
(CONST 23) = 4
(CONST 24) = ($%G% '$%G%)
(CONST 25) = MUL*
(CONST 26) = *MMINUS
(CONST 27) = ADD*
(CONST 28) = $%I
(CONST 29) = $ASKSIGN
(CONST 30) = SIMPLIFY
(CONST 31) = $PNZ
(CONST 32) = $ZERO
(CONST 33) = LIKE
(CONST 34) = (MEQUAL)
(CONST 35) = ($Y '$Y)
(CONST 36) = ($%F% '$%F%)
(CONST 37) = ($X '$X)
(CONST 38) = DIV
(CONST 39) = $EXP
(CONST 40) = $%K1
(CONST 41) = $%K2
(CONST 42) = ($X '$X)
(CONST 43) = $POS
(CONST 44) = (MEQUAL)
(CONST 45) = ($Y '$Y)
(CONST 46) = ($%F% '$%F%)
(CONST 47) = (%SQRT)
(CONST 48) = ($X '$X)
(CONST 49) = ($%F% '$%F%)
(CONST 50) = (%SQRT)
(CONST 51) = ($X '$X)
(CONST 52) = ($X '$X)
(CONST 53) = (%SQRT)
(CONST 54) = ($EXPONENTIALIZE NIL)
(CONST 55) = (MEQUAL)
(CONST 56) = ($Y '$Y)
(CONST 57) = ($%F% '$%F%)
(CONST 58) = ($X '$X)
(CONST 59) = (%SIN)
(CONST 60) = (%COS)
(CONST 61) = (MEQUAL)
(CONST 62) = ($Y '$Y)
(CONST 63) = ($%F% '$%F%)
(CONST 64) = ($X '$X)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($RADEXPAND $METHOD)
214 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; $%F%
3     (LOAD 6)
4     (BIND 1)                            ; $%G%
6     (LOAD 8)
7     (BIND 2)                            ; $Y
9     (LOAD 10)
10    (BIND 3)                            ; $X
12    (CONST&PUSH 4)                      ; $A
13    (CONST&PUSH 5)                      ; $SIGN
14    (CONST 6)                           ; $ALL
15    (BIND 7)                            ; $RADEXPAND
17    (CONST&PUSH 8)                      ; $ALPHA
18    (CONST 9)                           ; $YNEW
19    (BIND 9)                            ; $YNEW
21    (CONST&PUSH 10)                     ; ($X '$X)
22    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
24    (CONST&PUSH 12)                     ; ($Y '$Y)
25    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
27    (CONST&PUSH 13)                     ; ($%F% '$%F%)
28    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
30    (CALL 3 14)                         ; $FREEOF
33    (JMPIFNOT L201)
36    (CONST&PUSH 15)                     ; ($X '$X)
37    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
39    (CONST&PUSH 16)                     ; ($Y '$Y)
40    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
42    (CONST&PUSH 17)                     ; ($%G% '$%G%)
43    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
45    (CALL 3 14)                         ; $FREEOF
48    (JMPIFNOT L201)
51    (CONST 18)                          ; $CONSTCOEFF
52    (SETVALUE 19)                       ; $METHOD
54    (CONST&PUSH 20)                     ; ($%F% '$%F%)
55    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
57    (CONST&PUSH 21)                     ; 2
58    (CALL2&PUSH 22)                     ; POWER
60    (CONST&PUSH 23)                     ; 4
61    (CONST&PUSH 24)                     ; ($%G% '$%G%)
62    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
64    (CALL2&PUSH 25)                     ; MUL*
66    (CALL1&PUSH 26)                     ; *MMINUS
68    (CALL2 27)                          ; ADD*
70    (STORE 8)
72    (CONST&PUSH 28)                     ; $%I
73    (LOAD&PUSH 9)
74    (CALL2&JMPIF 14 L204)               ; $FREEOF
78    (T)
79    (SETVALUE 7)                        ; $RADEXPAND
81    (CONST 31)                          ; $PNZ
83    (STORE 7)
84    L84
84    (LOAD&PUSH 7)
85    (CONST&PUSH 32)                     ; $ZERO
87    (CALL2&JMPIF 33 L213)               ; LIKE
91    (LOAD&PUSH 7)
92    (CONST&PUSH 43)                     ; $POS
94    (CALL2&JMPIF 33 L249)               ; LIKE
98    (LOAD&PUSH 8)
99    (CALL1 26)                          ; *MMINUS
101   (STORE 8)
103   (CONST&PUSH 52)                     ; ($X '$X)
105   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
107   (CONST&PUSH 53)                     ; (%SQRT)
109   (LOAD&PUSH 10)
110   (LIST&PUSH 2)
112   (CALL1&PUSH 30)                     ; SIMPLIFY
114   (CALL2&PUSH 25)                     ; MUL*
116   (CONST&PUSH 21)                     ; 2
117   (CALL2 38)                          ; DIV
119   (STORE 3)
120   (CONST&PUSH 54)                     ; ($EXPONENTIALIZE NIL)
122   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
124   (NIL&PUSH)
125   (CALL2&JMPIF 33 L326)               ; LIKE
129   (CONST&PUSH 61)                     ; (MEQUAL)
131   (CONST&PUSH 62)                     ; ($Y '$Y)
133   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
135   (CONST&PUSH 63)                     ; ($%F% '$%F%)
137   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
139   (CALL1&PUSH 26)                     ; *MMINUS
141   (CONST&PUSH 64)                     ; ($X '$X)
143   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
145   (CALL2&PUSH 25)                     ; MUL*
147   (CONST&PUSH 21)                     ; 2
148   (CALL2&PUSH 38)                     ; DIV
150   (CALL1&PUSH 39)                     ; $EXP
152   (CALL1&PUSH 30)                     ; SIMPLIFY
154   (CONST&PUSH 40)                     ; $%K1
156   (CONST&PUSH 28)                     ; $%I
157   (LOAD&PUSH 8)
158   (CALL2&PUSH 25)                     ; MUL*
160   (CALL1&PUSH 39)                     ; $EXP
162   (CALL1&PUSH 30)                     ; SIMPLIFY
164   (CALL2&PUSH 25)                     ; MUL*
166   (CONST&PUSH 41)                     ; $%K2
168   (CONST&PUSH 28)                     ; $%I
169   (CALL1&PUSH 26)                     ; *MMINUS
171   (LOAD&PUSH 9)
172   (CALL2&PUSH 25)                     ; MUL*
174   (CALL1 39)                          ; $EXP
176   L176
176   (PUSH)
177   (CALL1 30)                          ; SIMPLIFY
179   L179
179   (PUSH)
180   (CALL2&PUSH 25)                     ; MUL*
182   (CALL2&PUSH 27)                     ; ADD*
184   (CALL2 25)                          ; MUL*
186   L186
186   (PUSH)
187   (LIST&PUSH 3)
189   (CALL1 30)                          ; SIMPLIFY
191   L191
191   (UNBIND1)
192   (SKIP 1)
194   (UNBIND1)
195   (SKIP 2)
197   (UNBIND 4)
199   (SKIP&RET 5)
201   L201
201   (NIL)
202   (JMP L191)
204   L204
204   (LOAD&PUSH 8)
205   (CALL1&PUSH 29)                     ; $ASKSIGN
207   (CALL1 30)                          ; SIMPLIFY
209   (STORE 7)
210   (JMP L84)
213   L213
213   (CONST&PUSH 34)                     ; (MEQUAL)
215   (CONST&PUSH 35)                     ; ($Y '$Y)
217   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
219   (CONST&PUSH 36)                     ; ($%F% '$%F%)
221   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
223   (CALL1&PUSH 26)                     ; *MMINUS
225   (CONST&PUSH 37)                     ; ($X '$X)
227   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
229   (CALL2&PUSH 25)                     ; MUL*
231   (CONST&PUSH 21)                     ; 2
232   (CALL2&PUSH 38)                     ; DIV
234   (CALL1&PUSH 39)                     ; $EXP
236   (CALL1&PUSH 30)                     ; SIMPLIFY
238   (CONST&PUSH 40)                     ; $%K1
240   (CONST&PUSH 41)                     ; $%K2
242   (CONST&PUSH 42)                     ; ($X '$X)
244   (CALL1 11)                          ; |TRD-MSYMEVAL-aux|
246   (JMP L179)
249   L249
249   (CONST&PUSH 44)                     ; (MEQUAL)
251   (CONST&PUSH 45)                     ; ($Y '$Y)
253   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
255   (CONST&PUSH 40)                     ; $%K1
257   (CONST&PUSH 46)                     ; ($%F% '$%F%)
259   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
261   (CALL1&PUSH 26)                     ; *MMINUS
263   (CONST&PUSH 47)                     ; (%SQRT)
265   (LOAD&PUSH 13)
266   (LIST&PUSH 2)
268   (CALL1&PUSH 30)                     ; SIMPLIFY
270   (CALL2&PUSH 27)                     ; ADD*
272   (CONST&PUSH 48)                     ; ($X '$X)
274   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
276   (CALL2&PUSH 25)                     ; MUL*
278   (CONST&PUSH 21)                     ; 2
279   (CALL2&PUSH 38)                     ; DIV
281   (CALL1&PUSH 39)                     ; $EXP
283   (CALL1&PUSH 30)                     ; SIMPLIFY
285   (CALL2&PUSH 25)                     ; MUL*
287   (CONST&PUSH 41)                     ; $%K2
289   (CONST&PUSH 49)                     ; ($%F% '$%F%)
291   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
293   (CALL1&PUSH 26)                     ; *MMINUS
295   (CONST&PUSH 50)                     ; (%SQRT)
297   (LOAD&PUSH 14)
298   (LIST&PUSH 2)
300   (CALL1&PUSH 30)                     ; SIMPLIFY
302   (CALL1&PUSH 26)                     ; *MMINUS
304   (CALL2&PUSH 27)                     ; ADD*
306   (CONST&PUSH 51)                     ; ($X '$X)
308   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
310   (CALL2&PUSH 25)                     ; MUL*
312   (CONST&PUSH 21)                     ; 2
313   (CALL2&PUSH 38)                     ; DIV
315   (CALL1&PUSH 39)                     ; $EXP
317   (CALL1&PUSH 30)                     ; SIMPLIFY
319   (CALL2&PUSH 25)                     ; MUL*
321   (CALL2 27)                          ; ADD*
323   (JMP L186)
326   L326
326   (CONST&PUSH 55)                     ; (MEQUAL)
328   (CONST&PUSH 56)                     ; ($Y '$Y)
330   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
332   (CONST&PUSH 57)                     ; ($%F% '$%F%)
334   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
336   (CALL1&PUSH 26)                     ; *MMINUS
338   (CONST&PUSH 58)                     ; ($X '$X)
340   (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
342   (CALL2&PUSH 25)                     ; MUL*
344   (CONST&PUSH 21)                     ; 2
345   (CALL2&PUSH 38)                     ; DIV
347   (CALL1&PUSH 39)                     ; $EXP
349   (CALL1&PUSH 30)                     ; SIMPLIFY
351   (CONST&PUSH 40)                     ; $%K1
353   (CONST&PUSH 59)                     ; (%SIN)
355   (LOAD&PUSH 8)
356   (LIST&PUSH 2)
358   (CALL1&PUSH 30)                     ; SIMPLIFY
360   (CALL2&PUSH 25)                     ; MUL*
362   (CONST&PUSH 41)                     ; $%K2
364   (CONST&PUSH 60)                     ; (%COS)
366   (LOAD&PUSH 9)
367   (LIST 2)
369   (JMP L176)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT2 T ...) ...)-21-1|
(CONST 0) = $EXACT2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT2 T ...) ...)-21-2|
(CONST 0) = $EXACT2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT2 T ...) ...)-21-3-1|
(CONST 0) = $EXACT2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT2 T ...) ...)-21-3-2|
(CONST 0) = $EXACT2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT2 T ...) ...)-21-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $EXACT2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $EXACT2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EXACT2 T ...) ...)-21-3-5|
(CONST 0) = $EXACT2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EXACT2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXACT2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EXACT2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EXACT2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EXACT2
8     (SKIP&RET 1)


Disassembly of function $EXACT2
(CONST 0) = $B1
(CONST 1) = ($X '$X)
(CONST 2) = |TRD-MSYMEVAL-aux|
(CONST 3) = 2
(CONST 4) = $DIFF
(CONST 5) = SIMPLIFY
(CONST 6) = ($X '$X)
(CONST 7) = *MMINUS
(CONST 8) = ADD*
(CONST 9) = $RATSIMP
(CONST 10) = 0
(CONST 11) = LIKE
(CONST 12) = ($X '$X)
(CONST 13) = DIV
(CONST 14) = ($X '$X)
(CONST 15) = $INTEGRATE
(CONST 16) = $EXP
(CONST 17) = $EXACT
(CONST 18) = $METHOD
(CONST 19) = (MEQUAL)
(CONST 20) = ($Y '$Y)
(CONST 21) = $%K1
(CONST 22) = 1
(CONST 23) = MUL*
(CONST 24) = ($X '$X)
(CONST 25) = $%K2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($METHOD)
66 byte-code instructions:
0     (CONST&PUSH 0)                      ; $B1
1     (LOAD&PUSH 4)
2     (CONST&PUSH 1)                      ; ($X '$X)
3     (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
5     (CONST&PUSH 3)                      ; 2
6     (CALL&PUSH 3 4)                     ; $DIFF
9     (CALL1&PUSH 5)                      ; SIMPLIFY
11    (LOAD&PUSH 4)
12    (CONST&PUSH 6)                      ; ($X '$X)
13    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
15    (CALL2&PUSH 4)                      ; $DIFF
17    (CALL1&PUSH 5)                      ; SIMPLIFY
19    (CALL1&PUSH 7)                      ; *MMINUS
21    (LOAD&PUSH 4)
22    (CALL&PUSH 3 8)                     ; ADD*
25    (CALL1&PUSH 9)                      ; $RATSIMP
27    (CALL1&PUSH 5)                      ; SIMPLIFY
29    (CONST&PUSH 10)                     ; 0
30    (CALL2&JMPIFNOT 11 L106)            ; LIKE
34    (LOAD&PUSH 3)
35    (LOAD&PUSH 5)
36    (CONST&PUSH 12)                     ; ($X '$X)
37    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
39    (CALL2&PUSH 4)                      ; $DIFF
41    (CALL1&PUSH 5)                      ; SIMPLIFY
43    (CALL1&PUSH 7)                      ; *MMINUS
45    (CALL2&PUSH 8)                      ; ADD*
47    (LOAD&PUSH 5)
48    (CALL2&PUSH 13)                     ; DIV
50    (CALL1&PUSH 9)                      ; $RATSIMP
52    (CALL1&PUSH 5)                      ; SIMPLIFY
54    (CONST&PUSH 14)                     ; ($X '$X)
55    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
57    (CALL2&PUSH 15)                     ; $INTEGRATE
59    (CALL1&PUSH 5)                      ; SIMPLIFY
61    (CALL1&PUSH 7)                      ; *MMINUS
63    (CALL1&PUSH 16)                     ; $EXP
65    (CALL1 5)                           ; SIMPLIFY
67    (STORE 0)
68    (CONST 17)                          ; $EXACT
69    (SETVALUE 18)                       ; $METHOD
71    (CONST&PUSH 19)                     ; (MEQUAL)
72    (CONST&PUSH 20)                     ; ($Y '$Y)
73    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
75    (CONST&PUSH 21)                     ; $%K1
76    (LOAD&PUSH 3)
77    (CONST&PUSH 22)                     ; 1
78    (LOAD&PUSH 9)
79    (LOAD&PUSH 6)
80    (CALL2&PUSH 23)                     ; MUL*
82    (CALL2&PUSH 13)                     ; DIV
84    (CONST&PUSH 24)                     ; ($X '$X)
85    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
87    (CALL2&PUSH 15)                     ; $INTEGRATE
89    (CALL1&PUSH 5)                      ; SIMPLIFY
91    (CALL&PUSH 3 23)                    ; MUL*
94    (CONST&PUSH 25)                     ; $%K2
95    (LOAD&PUSH 4)
96    (CALL2&PUSH 23)                     ; MUL*
98    (CALL2&PUSH 8)                      ; ADD*
100   (LIST&PUSH 3)
102   (CALL1 5)                           ; SIMPLIFY
104   (SKIP&RET 5)
106   L106
106   (NIL)
107   (SKIP&RET 5)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $XCC2 T ...) ...)-22-1|
(CONST 0) = $XCC2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $XCC2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $XCC2 T ...) ...)-22-2|
(CONST 0) = $XCC2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $XCC2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $XCC2 T ...) ...)-22-3-1|
(CONST 0) = $XCC2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $XCC2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $XCC2 T ...) ...)-22-3-2|
(CONST 0) = $XCC2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $XCC2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $XCC2 T ...) ...)-22-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $XCC2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $XCC2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $XCC2 T ...) ...)-22-3-5|
(CONST 0) = $XCC2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $XCC2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $XCC2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $XCC2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $XCC2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $XCC2
8     (SKIP&RET 1)


Disassembly of function $XCC2
(CONST 0) = $D
(CONST 1) = $B1
(CONST 2) = $Z
(CONST 3) = $ALL
(CONST 4) = $RADEXPAND
(CONST 5) = 0
(CONST 6) = LIKE
(CONST 7) = ($X '$X)
(CONST 8) = |TRD-MSYMEVAL-aux|
(CONST 9) = $DIFF
(CONST 10) = SIMPLIFY
(CONST 11) = 2
(CONST 12) = MUL*
(CONST 13) = ADD*
(CONST 14) = 3
(CONST 15) = RREMAINDER
(CONST 16) = POWER
(CONST 17) = DIV
(CONST 18) = $RATSIMP
(CONST 19) = ($X '$X)
(CONST 20) = ($Y '$Y)
(CONST 21) = $FREEOF
(CONST 22) = 1
(CONST 23) = ($Y '$Y)
(CONST 24) = $CC2
(CONST 25) = $XFORMTOCONSTCOEFF
(CONST 26) = $METHOD
(CONST 27) = (%SQRT)
(CONST 28) = ($X '$X)
(CONST 29) = $INTEGRATE
(CONST 30) = $SUBSTITUTE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($Z)
writes special variable : ($METHOD)
68 byte-code instructions:
0     (CONST&PUSH 0)                      ; $D
1     (CONST&PUSH 1)                      ; $B1
2     (CONST 2)                           ; $Z
3     (BIND 2)                            ; $Z
5     (CONST 3)                           ; $ALL
6     (BIND 4)                            ; $RADEXPAND
8     (LOAD&PUSH 9)
9     (CONST&PUSH 5)                      ; 0
10    (CALL2&JMPIF 6 L101)                ; LIKE
14    (LOAD&PUSH 9)
15    (CONST&PUSH 7)                      ; ($X '$X)
16    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
18    (CALL2&PUSH 9)                      ; $DIFF
20    (CALL1&PUSH 10)                     ; SIMPLIFY
22    (CONST&PUSH 11)                     ; 2
23    (LOAD&PUSH 12)
24    (LOAD&PUSH 12)
25    (CALL&PUSH 3 12)                    ; MUL*
28    (CALL2&PUSH 13)                     ; ADD*
30    (CONST&PUSH 11)                     ; 2
31    (LOAD&PUSH 11)
32    (CONST&PUSH 14)                     ; 3
33    (CONST&PUSH 11)                     ; 2
34    (CALL2&PUSH 15)                     ; RREMAINDER
36    (CALL2&PUSH 16)                     ; POWER
38    (CALL2&PUSH 12)                     ; MUL*
40    (CALL2&PUSH 17)                     ; DIV
42    (CALL1&PUSH 18)                     ; $RATSIMP
44    (CALL1 10)                          ; SIMPLIFY
46    (STORE 7)
47    (CONST&PUSH 19)                     ; ($X '$X)
48    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
50    (CONST&PUSH 20)                     ; ($Y '$Y)
51    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
53    (LOAD&PUSH 9)
54    (CALL 3 21)                         ; $FREEOF
57    (JMPIFNOT L104)
59    (LOAD&PUSH 7)
60    (CONST&PUSH 22)                     ; 1
61    (CONST&PUSH 23)                     ; ($Y '$Y)
62    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
64    (GETVALUE&PUSH 2)                   ; $Z
66    (CALL&PUSH 4 24)                    ; $CC2
69    (CALL1 10)                          ; SIMPLIFY
71    (STORE 6)
72    (CONST 25)                          ; $XFORMTOCONSTCOEFF
74    (SETVALUE 26)                       ; $METHOD
76    (CONST&PUSH 27)                     ; (%SQRT)
77    (LOAD&PUSH 10)
78    (LIST&PUSH 2)
80    (CALL1&PUSH 10)                     ; SIMPLIFY
82    (CONST&PUSH 28)                     ; ($X '$X)
83    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
85    (CALL2&PUSH 29)                     ; $INTEGRATE
87    (CALL1&PUSH 10)                     ; SIMPLIFY
89    (GETVALUE&PUSH 2)                   ; $Z
91    (LOAD&PUSH 8)
92    (CALL&PUSH 3 30)                    ; $SUBSTITUTE
95    (CALL1 10)                          ; SIMPLIFY
97    L97
97    (UNBIND 2)
99    (SKIP&RET 5)
101   L101
101   (NIL)
102   (JMP L97)
104   L104
104   (NIL)
105   (JMP L97)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $VARP T ...) ...)-23-1|
(CONST 0) = $VARP
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VARP
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $VARP T ...) ...)-23-2|
(CONST 0) = $VARP
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VARP
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $VARP T ...) ...)-23-3-1|
(CONST 0) = $VARP
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VARP
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $VARP T ...) ...)-23-3-2|
(CONST 0) = $VARP
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VARP
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $VARP T ...) ...)-23-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $VARP
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $VARP
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $VARP T ...) ...)-23-3-5|
(CONST 0) = $VARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $VARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $VARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $VARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $VARP
8     (SKIP&RET 1)


Disassembly of function $VARP
(CONST 0) = $%G%
(CONST 1) = $Y1
(CONST 2) = $Y2
(CONST 3) = $Y3
(CONST 4) = $Y4
(CONST 5) = $WR
(CONST 6) = (MLIST)
(CONST 7) = (MEQUAL)
(CONST 8) = $%K1
(CONST 9) = 1
(CONST 10) = SIMPLIFY
(CONST 11) = (MEQUAL)
(CONST 12) = $%K2
(CONST 13) = 0
(CONST 14) = $RHS
(CONST 15) = $SUBSTITUTE
(CONST 16) = $RATSIMP
(CONST 17) = (MLIST)
(CONST 18) = (MEQUAL)
(CONST 19) = (MEQUAL)
(CONST 20) = ($X '$X)
(CONST 21) = |TRD-MSYMEVAL-aux|
(CONST 22) = $DIFF
(CONST 23) = MUL*
(CONST 24) = ($X '$X)
(CONST 25) = *MMINUS
(CONST 26) = ADD*
(CONST 27) = LIKE
(CONST 28) = ($METHOD '$METHOD)
(CONST 29) = $CONSTCOEFF
(CONST 30) = %SIN
(CONST 31) = $FREEOF
(CONST 32) = %COS
(CONST 33) = $TRIGREDUCE
(CONST 34) = ($%G% '$%G%)
(CONST 35) = DIV
(CONST 36) = ($%G% '$%G%)
(CONST 37) = ($X '$X)
(CONST 38) = $INTEGRATE
(CONST 39) = ($X '$X)
(CONST 40) = $YP
(CONST 41) = ($YP '$YP)
(CONST 42) = $VARIATIONOFPARAMETERS
(CONST 43) = $METHOD
(CONST 44) = (MEQUAL)
(CONST 45) = ($Y '$Y)
(CONST 46) = ($YP '$YP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($METHOD $YP)
152 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; $%G%
3     (CONST&PUSH 1)                      ; $Y1
4     (CONST&PUSH 2)                      ; $Y2
5     (CONST&PUSH 3)                      ; $Y3
6     (CONST&PUSH 4)                      ; $Y4
7     (CONST&PUSH 5)                      ; $WR
8     (NIL&PUSH)
9     (CONST&PUSH 6)                      ; (MLIST)
10    (CONST&PUSH 7)                      ; (MEQUAL)
11    (CONST&PUSH 8)                      ; $%K1
12    (CONST&PUSH 9)                      ; 1
13    (LIST&PUSH 3)
15    (CALL1&PUSH 10)                     ; SIMPLIFY
17    (CONST&PUSH 11)                     ; (MEQUAL)
18    (CONST&PUSH 12)                     ; $%K2
19    (CONST&PUSH 13)                     ; 0
20    (LIST&PUSH 3)
22    (CALL1&PUSH 10)                     ; SIMPLIFY
24    (LIST&PUSH 3)
26    (LOAD&PUSH 12)
27    (CALL1&PUSH 14)                     ; $RHS
29    (CALL2&PUSH 15)                     ; $SUBSTITUTE
31    (CALL1&PUSH 10)                     ; SIMPLIFY
33    (CALL1&PUSH 16)                     ; $RATSIMP
35    (CALL1 10)                          ; SIMPLIFY
37    (STORE 5)
38    (CONST&PUSH 17)                     ; (MLIST)
39    (CONST&PUSH 18)                     ; (MEQUAL)
40    (CONST&PUSH 8)                      ; $%K1
41    (CONST&PUSH 13)                     ; 0
42    (LIST&PUSH 3)
44    (CALL1&PUSH 10)                     ; SIMPLIFY
46    (CONST&PUSH 19)                     ; (MEQUAL)
47    (CONST&PUSH 12)                     ; $%K2
48    (CONST&PUSH 9)                      ; 1
49    (LIST&PUSH 3)
51    (CALL1&PUSH 10)                     ; SIMPLIFY
53    (LIST&PUSH 3)
55    (LOAD&PUSH 12)
56    (CALL1&PUSH 14)                     ; $RHS
58    (CALL2&PUSH 15)                     ; $SUBSTITUTE
60    (CALL1&PUSH 10)                     ; SIMPLIFY
62    (CALL1&PUSH 16)                     ; $RATSIMP
64    (CALL1 10)                          ; SIMPLIFY
66    (STORE 4)
67    (LOAD&PUSH 5)
68    (LOAD&PUSH 5)
69    (CONST&PUSH 20)                     ; ($X '$X)
70    (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
72    (CALL2&PUSH 22)                     ; $DIFF
74    (CALL1&PUSH 10)                     ; SIMPLIFY
76    (CALL2&PUSH 23)                     ; MUL*
78    (LOAD&PUSH 5)
79    (LOAD&PUSH 7)
80    (CONST&PUSH 24)                     ; ($X '$X)
81    (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
83    (CALL2&PUSH 22)                     ; $DIFF
85    (CALL1&PUSH 10)                     ; SIMPLIFY
87    (CALL2&PUSH 23)                     ; MUL*
89    (CALL1&PUSH 25)                     ; *MMINUS
91    (CALL2 26)                          ; ADD*
93    (STORE 1)
94    (PUSH)
95    (CONST&PUSH 13)                     ; 0
96    (CALL2&JMPIF 27 L242)               ; LIKE
100   (CONST&PUSH 28)                     ; ($METHOD '$METHOD)
101   (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
103   (CONST&PUSH 29)                     ; $CONSTCOEFF
104   (CALL2&JMPIFNOT 27 L131)            ; LIKE
107   (CONST&PUSH 30)                     ; %SIN
109   (LOAD&PUSH 2)
110   (CALL2&JMPIF 31 L131)               ; $FREEOF
113   (CONST&PUSH 32)                     ; %COS
115   (LOAD&PUSH 2)
116   (CALL2&JMPIF 31 L131)               ; $FREEOF
119   (T&STORE 0)
121   (LOAD&PUSH 1)
122   (CALL1&PUSH 33)                     ; $TRIGREDUCE
124   (CALL1&PUSH 10)                     ; SIMPLIFY
126   (CALL1&PUSH 16)                     ; $RATSIMP
128   (CALL1 10)                          ; SIMPLIFY
130   (STORE 1)
131   L131
131   (LOAD&PUSH 5)
132   (CONST&PUSH 34)                     ; ($%G% '$%G%)
134   (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
136   (CALL2&PUSH 23)                     ; MUL*
138   (LOAD&PUSH 2)
139   (CALL2&PUSH 35)                     ; DIV
141   (CALL1&PUSH 16)                     ; $RATSIMP
143   (CALL1 10)                          ; SIMPLIFY
145   (STORE 3)
146   (LOAD&PUSH 4)
147   (CONST&PUSH 36)                     ; ($%G% '$%G%)
149   (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
151   (CALL2&PUSH 23)                     ; MUL*
153   (LOAD&PUSH 2)
154   (CALL2&PUSH 35)                     ; DIV
156   (CALL1&PUSH 16)                     ; $RATSIMP
158   (CALL1 10)                          ; SIMPLIFY
160   (STORE 2)
161   (LOAD&PUSH 4)
162   (LOAD&PUSH 4)
163   (CONST&PUSH 37)                     ; ($X '$X)
165   (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
167   (CALL2&PUSH 38)                     ; $INTEGRATE
169   (CALL1&PUSH 10)                     ; SIMPLIFY
171   (CALL2&PUSH 23)                     ; MUL*
173   (LOAD&PUSH 6)
174   (LOAD&PUSH 4)
175   (CONST&PUSH 39)                     ; ($X '$X)
177   (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
179   (CALL2&PUSH 38)                     ; $INTEGRATE
181   (CALL1&PUSH 10)                     ; SIMPLIFY
183   (CALL2&PUSH 23)                     ; MUL*
185   (CALL1&PUSH 25)                     ; *MMINUS
187   (CALL2&PUSH 26)                     ; ADD*
189   (CALL1&PUSH 16)                     ; $RATSIMP
191   (CALL1 10)                          ; SIMPLIFY
193   (SETVALUE 40)                       ; $YP
195   (LOAD&PUSH 0)
196   (T&PUSH)
197   (CALL2&JMPIFNOT 27 L214)            ; LIKE
200   (CONST&PUSH 41)                     ; ($YP '$YP)
202   (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
204   (CALL1&PUSH 33)                     ; $TRIGREDUCE
206   (CALL1&PUSH 10)                     ; SIMPLIFY
208   (CALL1&PUSH 16)                     ; $RATSIMP
210   (CALL1 10)                          ; SIMPLIFY
212   (SETVALUE 40)                       ; $YP
214   L214
214   (CONST 42)                          ; $VARIATIONOFPARAMETERS
216   (SETVALUE 43)                       ; $METHOD
218   (CONST&PUSH 44)                     ; (MEQUAL)
220   (CONST&PUSH 45)                     ; ($Y '$Y)
222   (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
224   (LOAD&PUSH 13)
225   (CALL1&PUSH 14)                     ; $RHS
227   (CONST&PUSH 46)                     ; ($YP '$YP)
229   (CALL1&PUSH 21)                     ; |TRD-MSYMEVAL-aux|
231   (CALL2&PUSH 26)                     ; ADD*
233   (LIST&PUSH 3)
235   (CALL1 10)                          ; SIMPLIFY
237   (SKIP 6)
239   L239
239   (UNBIND1)
240   (SKIP&RET 3)
242   L242
242   (NIL)
243   (SKIP 6)
245   (JMP L239)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $REDUCE T ...) ...)-24-1|
(CONST 0) = $REDUCE
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REDUCE
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $REDUCE T ...) ...)-24-2|
(CONST 0) = $REDUCE
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REDUCE
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $REDUCE T ...) ...)-24-3-1|
(CONST 0) = $REDUCE
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REDUCE
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $REDUCE T ...) ...)-24-3-2|
(CONST 0) = $REDUCE
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REDUCE
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $REDUCE T ...) ...)-24-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $REDUCE
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $REDUCE
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $REDUCE T ...) ...)-24-3-5|
(CONST 0) = $REDUCE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $REDUCE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REDUCE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $REDUCE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $REDUCE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $REDUCE
8     (SKIP&RET 1)


Disassembly of function $REDUCE
(CONST 0) = $B1
(CONST 1) = (MLIST)
(CONST 2) = (MEQUAL)
(CONST 3) = (%DERIVATIVE)
(CONST 4) = ($Y '$Y)
(CONST 5) = |TRD-MSYMEVAL-aux|
(CONST 6) = ($X '$X)
(CONST 7) = (2)
(CONST 8) = SIMPLIFY
(CONST 9) = $QQ
(CONST 10) = (MEQUAL)
(CONST 11) = (%DERIVATIVE)
(CONST 12) = ($Y '$Y)
(CONST 13) = ($X '$X)
(CONST 14) = $SUBSTITUTE
(CONST 15) = ($Y '$Y)
(CONST 16) = $FREEOF
(CONST 17) = $NLX
(CONST 18) = ($X '$X)
(CONST 19) = $NLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
51 byte-code instructions:
0     (CONST&PUSH 0)                      ; $B1
1     (CONST&PUSH 1)                      ; (MLIST)
2     (CONST&PUSH 2)                      ; (MEQUAL)
3     (CONST&PUSH 3)                      ; (%DERIVATIVE)
4     (CONST&PUSH 4)                      ; ($Y '$Y)
5     (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
7     (CONST&PUSH 6)                      ; ($X '$X)
8     (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
10    (CONST 7)                           ; (2)
11    (LIST*&PUSH 3)
13    (CALL1&PUSH 8)                      ; SIMPLIFY
15    (CONST&PUSH 9)                      ; $QQ
16    (LIST&PUSH 3)
18    (CALL1&PUSH 8)                      ; SIMPLIFY
20    (CONST&PUSH 10)                     ; (MEQUAL)
21    (CONST&PUSH 11)                     ; (%DERIVATIVE)
22    (CONST&PUSH 12)                     ; ($Y '$Y)
23    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
25    (CONST&PUSH 13)                     ; ($X '$X)
26    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
28    (LIST&PUSH 3)
30    (CALL1&PUSH 8)                      ; SIMPLIFY
32    (CONST&PUSH 9)                      ; $QQ
33    (LIST&PUSH 3)
35    (CALL1&PUSH 8)                      ; SIMPLIFY
37    (LIST&PUSH 3)
39    (LOAD&PUSH 3)
40    (CALL2&PUSH 14)                     ; $SUBSTITUTE
42    (CALL1 8)                           ; SIMPLIFY
44    (STORE 0)
45    (CONST&PUSH 15)                     ; ($Y '$Y)
46    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
48    (LOAD&PUSH 1)
49    (CALL2&JMPIF 16 L67)                ; $FREEOF
52    (CONST&PUSH 18)                     ; ($X '$X)
53    (CALL1&PUSH 5)                      ; |TRD-MSYMEVAL-aux|
55    (LOAD&PUSH 1)
56    (CALL2&JMPIFNOT 16 L72)             ; $FREEOF
59    (LOAD&PUSH 2)
60    (CALL1 19)                          ; $NLY
62    L62
62    (PUSH)
63    (CALL1 8)                           ; SIMPLIFY
65    (SKIP&RET 3)
67    L67
67    (LOAD&PUSH 2)
68    (CALL1 17)                          ; $NLX
70    (JMP L62)
72    L72
72    (NIL)
73    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLX T ...) ...)-25-1|
(CONST 0) = $NLX
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLX
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLX T ...) ...)-25-2|
(CONST 0) = $NLX
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLX
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLX T ...) ...)-25-3-1|
(CONST 0) = $NLX
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLX
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLX T ...) ...)-25-3-2|
(CONST 0) = $NLX
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLX
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLX T ...) ...)-25-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $NLX
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $NLX
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLX T ...) ...)-25-3-5|
(CONST 0) = $NLX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NLX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NLX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NLX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NLX
8     (SKIP&RET 1)


Disassembly of function $NLX
(CONST 0) = $DE
(CONST 1) = $B
(CONST 2) = $A1
(CONST 3) = $V
(CONST 4) = (MLIST)
(CONST 5) = (MEQUAL)
(CONST 6) = (%DERIVATIVE)
(CONST 7) = ($Y '$Y)
(CONST 8) = |TRD-MSYMEVAL-aux|
(CONST 9) = ($X '$X)
(CONST 10) = (2)
(CONST 11) = SIMPLIFY
(CONST 12) = (%DERIVATIVE)
(CONST 13) = ($X '$X)
(CONST 14) = (MEQUAL)
(CONST 15) = (%DERIVATIVE)
(CONST 16) = ($Y '$Y)
(CONST 17) = ($X '$X)
(CONST 18) = $SUBSTITUTE
(CONST 19) = ($X '$X)
(CONST 20) = $ODE1A
(CONST 21) = LIKE
(CONST 22) = (MLIST)
(CONST 23) = (MEQUAL)
(CONST 24) = (%DERIVATIVE)
(CONST 25) = ($Y '$Y)
(CONST 26) = ($X '$X)
(CONST 27) = (MEQUAL)
(CONST 28) = $%C
(CONST 29) = $%K1
(CONST 30) = (%DERIVATIVE)
(CONST 31) = ($Y '$Y)
(CONST 32) = ($X '$X)
(CONST 33) = $NLXY
(CONST 34) = $FTEST
(CONST 35) = $FREEOFY
(CONST 36) = $METHOD
(CONST 37) = ($%Q% '$%Q%)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($V)
writes special variable : ($METHOD)
95 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DE
1     (CONST&PUSH 1)                      ; $B
2     (CONST&PUSH 2)                      ; $A1
3     (CONST 3)                           ; $V
4     (BIND 3)                            ; $V
6     (CONST&PUSH 4)                      ; (MLIST)
7     (CONST&PUSH 5)                      ; (MEQUAL)
8     (CONST&PUSH 6)                      ; (%DERIVATIVE)
9     (CONST&PUSH 7)                      ; ($Y '$Y)
10    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
12    (CONST&PUSH 9)                      ; ($X '$X)
13    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
15    (CONST 10)                          ; (2)
16    (LIST*&PUSH 3)
18    (CALL1&PUSH 11)                     ; SIMPLIFY
20    (CONST&PUSH 12)                     ; (%DERIVATIVE)
21    (GETVALUE&PUSH 3)                   ; $V
23    (CONST&PUSH 13)                     ; ($X '$X)
24    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
26    (LIST&PUSH 3)
28    (CALL1&PUSH 11)                     ; SIMPLIFY
30    (LIST&PUSH 3)
32    (CALL1&PUSH 11)                     ; SIMPLIFY
34    (CONST&PUSH 14)                     ; (MEQUAL)
35    (CONST&PUSH 15)                     ; (%DERIVATIVE)
36    (CONST&PUSH 16)                     ; ($Y '$Y)
37    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
39    (CONST&PUSH 17)                     ; ($X '$X)
40    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
42    (LIST&PUSH 3)
44    (CALL1&PUSH 11)                     ; SIMPLIFY
46    (GETVALUE&PUSH 3)                   ; $V
48    (LIST&PUSH 3)
50    (CALL1&PUSH 11)                     ; SIMPLIFY
52    (LIST&PUSH 3)
54    (LOAD&PUSH 8)
55    (CALL2&PUSH 18)                     ; $SUBSTITUTE
57    (CALL1 11)                          ; SIMPLIFY
59    (STORE 5)
60    (PUSH)
61    (GETVALUE&PUSH 3)                   ; $V
63    (CONST&PUSH 19)                     ; ($X '$X)
64    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
66    (CALL&PUSH 3 20)                    ; $ODE1A
69    (CALL1 11)                          ; SIMPLIFY
71    (STORE 4)
72    (PUSH)
73    (NIL&PUSH)
74    (CALL2&JMPIF 21 L137)               ; LIKE
77    (CONST&PUSH 22)                     ; (MLIST)
78    (CONST&PUSH 23)                     ; (MEQUAL)
79    (GETVALUE&PUSH 3)                   ; $V
81    (CONST&PUSH 24)                     ; (%DERIVATIVE)
82    (CONST&PUSH 25)                     ; ($Y '$Y)
83    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
85    (CONST&PUSH 26)                     ; ($X '$X)
86    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
88    (LIST&PUSH 3)
90    (CALL1&PUSH 11)                     ; SIMPLIFY
92    (LIST&PUSH 3)
94    (CALL1&PUSH 11)                     ; SIMPLIFY
96    (CONST&PUSH 27)                     ; (MEQUAL)
97    (CONST&PUSH 28)                     ; $%C
98    (CONST&PUSH 29)                     ; $%K1
99    (LIST&PUSH 3)
101   (CALL1&PUSH 11)                     ; SIMPLIFY
103   (LIST&PUSH 3)
105   (LOAD&PUSH 5)
106   (CALL2&PUSH 18)                     ; $SUBSTITUTE
108   (CALL1 11)                          ; SIMPLIFY
110   (STORE 3)
111   (PUSH)
112   (CONST&PUSH 30)                     ; (%DERIVATIVE)
114   (CONST&PUSH 31)                     ; ($Y '$Y)
116   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
118   (CONST&PUSH 32)                     ; ($X '$X)
120   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
122   (LIST&PUSH 3)
124   (CALL1&PUSH 11)                     ; SIMPLIFY
126   (CALL2&PUSH 33)                     ; $NLXY
128   (CALL1&PUSH 11)                     ; SIMPLIFY
130   (CALL1&JMPIF 34 L140)               ; $FTEST
133   (NIL)
134   L134
134   (UNBIND1)
135   (SKIP&RET 5)
137   L137
137   (NIL)
138   (JMP L134)
140   L140
140   (CONST 35)                          ; $FREEOFY
142   (SETVALUE 36)                       ; $METHOD
144   (CONST&PUSH 37)                     ; ($%Q% '$%Q%)
146   (CALL1 8)                           ; |TRD-MSYMEVAL-aux|
148   (JMP L134)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLY T ...) ...)-26-1|
(CONST 0) = $NLY
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLY
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLY T ...) ...)-26-2|
(CONST 0) = $NLY
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLY
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLY T ...) ...)-26-3-1|
(CONST 0) = $NLY
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLY
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLY T ...) ...)-26-3-2|
(CONST 0) = $NLY
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLY
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLY T ...) ...)-26-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $NLY
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $NLY
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLY T ...) ...)-26-3-5|
(CONST 0) = $NLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NLY
8     (SKIP&RET 1)


Disassembly of function $NLY
(CONST 0) = $DE
(CONST 1) = $B
(CONST 2) = $A1
(CONST 3) = $V
(CONST 4) = (MLIST)
(CONST 5) = (MEQUAL)
(CONST 6) = (%DERIVATIVE)
(CONST 7) = ($Y '$Y)
(CONST 8) = |TRD-MSYMEVAL-aux|
(CONST 9) = ($X '$X)
(CONST 10) = (2)
(CONST 11) = SIMPLIFY
(CONST 12) = (%DERIVATIVE)
(CONST 13) = $YZ
(CONST 14) = MUL*
(CONST 15) = (MEQUAL)
(CONST 16) = (%DERIVATIVE)
(CONST 17) = ($Y '$Y)
(CONST 18) = ($X '$X)
(CONST 19) = (MEQUAL)
(CONST 20) = ($Y '$Y)
(CONST 21) = $SUBSTITUTE
(CONST 22) = $ODE1A
(CONST 23) = LIKE
(CONST 24) = (MLIST)
(CONST 25) = (MEQUAL)
(CONST 26) = (%DERIVATIVE)
(CONST 27) = ($Y '$Y)
(CONST 28) = ($X '$X)
(CONST 29) = (MEQUAL)
(CONST 30) = ($Y '$Y)
(CONST 31) = (MEQUAL)
(CONST 32) = $%C
(CONST 33) = $%K1
(CONST 34) = (%DERIVATIVE)
(CONST 35) = ($Y '$Y)
(CONST 36) = ($X '$X)
(CONST 37) = $NLXY
(CONST 38) = $FTEST
(CONST 39) = $FREEOFX
(CONST 40) = $METHOD
(CONST 41) = ($%Q% '$%Q%)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($V)
writes special variable : ($METHOD)
107 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DE
1     (CONST&PUSH 1)                      ; $B
2     (CONST&PUSH 2)                      ; $A1
3     (CONST 3)                           ; $V
4     (BIND 3)                            ; $V
6     (CONST&PUSH 4)                      ; (MLIST)
7     (CONST&PUSH 5)                      ; (MEQUAL)
8     (CONST&PUSH 6)                      ; (%DERIVATIVE)
9     (CONST&PUSH 7)                      ; ($Y '$Y)
10    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
12    (CONST&PUSH 9)                      ; ($X '$X)
13    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
15    (CONST 10)                          ; (2)
16    (LIST*&PUSH 3)
18    (CALL1&PUSH 11)                     ; SIMPLIFY
20    (GETVALUE&PUSH 3)                   ; $V
22    (CONST&PUSH 12)                     ; (%DERIVATIVE)
23    (GETVALUE&PUSH 3)                   ; $V
25    (CONST&PUSH 13)                     ; $YZ
26    (LIST&PUSH 3)
28    (CALL1&PUSH 11)                     ; SIMPLIFY
30    (CALL2&PUSH 14)                     ; MUL*
32    (LIST&PUSH 3)
34    (CALL1&PUSH 11)                     ; SIMPLIFY
36    (CONST&PUSH 15)                     ; (MEQUAL)
37    (CONST&PUSH 16)                     ; (%DERIVATIVE)
38    (CONST&PUSH 17)                     ; ($Y '$Y)
39    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
41    (CONST&PUSH 18)                     ; ($X '$X)
42    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
44    (LIST&PUSH 3)
46    (CALL1&PUSH 11)                     ; SIMPLIFY
48    (GETVALUE&PUSH 3)                   ; $V
50    (LIST&PUSH 3)
52    (CALL1&PUSH 11)                     ; SIMPLIFY
54    (CONST&PUSH 19)                     ; (MEQUAL)
55    (CONST&PUSH 20)                     ; ($Y '$Y)
56    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
58    (CONST&PUSH 13)                     ; $YZ
59    (LIST&PUSH 3)
61    (CALL1&PUSH 11)                     ; SIMPLIFY
63    (LIST&PUSH 4)
65    (LOAD&PUSH 8)
66    (CALL2&PUSH 21)                     ; $SUBSTITUTE
68    (CALL1 11)                          ; SIMPLIFY
70    (STORE 5)
71    (PUSH)
72    (GETVALUE&PUSH 3)                   ; $V
74    (CONST&PUSH 13)                     ; $YZ
75    (CALL&PUSH 3 22)                    ; $ODE1A
78    (CALL1 11)                          ; SIMPLIFY
80    (STORE 4)
81    (PUSH)
82    (NIL&PUSH)
83    (CALL2&JMPIF 23 L160)               ; LIKE
87    (CONST&PUSH 24)                     ; (MLIST)
88    (CONST&PUSH 25)                     ; (MEQUAL)
89    (GETVALUE&PUSH 3)                   ; $V
91    (CONST&PUSH 26)                     ; (%DERIVATIVE)
92    (CONST&PUSH 27)                     ; ($Y '$Y)
93    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
95    (CONST&PUSH 28)                     ; ($X '$X)
96    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
98    (LIST&PUSH 3)
100   (CALL1&PUSH 11)                     ; SIMPLIFY
102   (LIST&PUSH 3)
104   (CALL1&PUSH 11)                     ; SIMPLIFY
106   (CONST&PUSH 29)                     ; (MEQUAL)
107   (CONST&PUSH 13)                     ; $YZ
108   (CONST&PUSH 30)                     ; ($Y '$Y)
110   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
112   (LIST&PUSH 3)
114   (CALL1&PUSH 11)                     ; SIMPLIFY
116   (CONST&PUSH 31)                     ; (MEQUAL)
118   (CONST&PUSH 32)                     ; $%C
120   (CONST&PUSH 33)                     ; $%K1
122   (LIST&PUSH 3)
124   (CALL1&PUSH 11)                     ; SIMPLIFY
126   (LIST&PUSH 4)
128   (LOAD&PUSH 5)
129   (CALL2&PUSH 21)                     ; $SUBSTITUTE
131   (CALL1 11)                          ; SIMPLIFY
133   (STORE 3)
134   (PUSH)
135   (CONST&PUSH 34)                     ; (%DERIVATIVE)
137   (CONST&PUSH 35)                     ; ($Y '$Y)
139   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
141   (CONST&PUSH 36)                     ; ($X '$X)
143   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
145   (LIST&PUSH 3)
147   (CALL1&PUSH 11)                     ; SIMPLIFY
149   (CALL2&PUSH 37)                     ; $NLXY
151   (CALL1&PUSH 11)                     ; SIMPLIFY
153   (CALL1&JMPIF 38 L163)               ; $FTEST
156   (NIL)
157   L157
157   (UNBIND1)
158   (SKIP&RET 5)
160   L160
160   (NIL)
161   (JMP L157)
163   L163
163   (CONST 39)                          ; $FREEOFX
165   (SETVALUE 40)                       ; $METHOD
167   (CONST&PUSH 41)                     ; ($%Q% '$%Q%)
169   (CALL1 8)                           ; |TRD-MSYMEVAL-aux|
171   (JMP L157)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLXY T ...) ...)-27-1|
(CONST 0) = $NLXY
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLXY
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLXY T ...) ...)-27-2|
(CONST 0) = $NLXY
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLXY
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLXY T ...) ...)-27-3-1|
(CONST 0) = $NLXY
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLXY
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLXY T ...) ...)-27-3-2|
(CONST 0) = $NLXY
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLXY
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLXY T ...) ...)-27-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $NLXY
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $NLXY
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NLXY T ...) ...)-27-3-5|
(CONST 0) = $NLXY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NLXY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NLXY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NLXY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NLXY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NLXY
8     (SKIP&RET 1)


Disassembly of function $NLXY
(CONST 0) = $PROGRAMMODE
(CONST 1) = $EQ1
(CONST 2) = $SOLVE
(CONST 3) = SIMPLIFY
(CONST 4) = #<COMPILED-CLOSURE $NLXY-1>
(CONST 5) = MAPLIST_TR
(CONST 6) = $LENGTH
(CONST 7) = 1
(CONST 8) = $FIRST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
26 byte-code instructions:
0     (T)
1     (BIND 0)                            ; $PROGRAMMODE
3     (CONST&PUSH 1)                      ; $EQ1
4     (LOAD&PUSH 6)
5     (LOAD&PUSH 6)
6     (CALL2&PUSH 2)                      ; $SOLVE
8     (CALL1 3)                           ; SIMPLIFY
10    (STORE 0)
11    (NIL&PUSH)
12    (COPY-CLOSURE&PUSH 4 1)             ; #<COMPILED-CLOSURE $NLXY-1>
15    (LOAD&PUSH 1)
16    (CALL2 5)                           ; MAPLIST_TR
18    (STORE 0)
19    (PUSH)
20    (CALL1&PUSH 6)                      ; $LENGTH
22    (JMPIFEQTO 7 L31)                   ; 1
25    (LOAD 0)
26    L26
26    (SKIP 1)
28    (UNBIND1)
29    (SKIP&RET 3)
31    L31
31    (LOAD&PUSH 0)
32    (CALL1&PUSH 8)                      ; $FIRST
34    (CALL1 3)                           ; SIMPLIFY
36    (JMP L26)


Disassembly of function $NLXY-1
(CONST 0) = NIL
(CONST 1) = ($Y '$Y)
(CONST 2) = |TRD-MSYMEVAL-aux|
(CONST 3) = ($X '$X)
(CONST 4) = $ODE1A
(CONST 5) = SIMPLIFY
(CONST 6) = $FTEST
(CONST 7) = $%K2
(CONST 8) = $%C
(CONST 9) = ($%Q% '$%Q%)
(CONST 10) = $SUBSTITUTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 1)                      ; ($Y '$Y)
2     (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
4     (CONST&PUSH 3)                      ; ($X '$X)
5     (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
7     (CALL&PUSH 3 4)                     ; $ODE1A
10    (CALL1&PUSH 5)                      ; SIMPLIFY
12    (CALL1&JMPIF 6 L18)                 ; $FTEST
15    (NIL)
16    (SKIP&RET 2)
18    L18
18    (CONST&PUSH 7)                      ; $%K2
19    (CONST&PUSH 8)                      ; $%C
20    (CONST&PUSH 9)                      ; ($%Q% '$%Q%)
21    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
23    (CALL&PUSH 3 10)                    ; $SUBSTITUTE
26    (CALL1 5)                           ; SIMPLIFY
28    (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PTTEST T ...) ...)-28-1|
(CONST 0) = $PTTEST
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PTTEST
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PTTEST T ...) ...)-28-2|
(CONST 0) = $PTTEST
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PTTEST
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PTTEST T ...) ...)-28-3-1|
(CONST 0) = $PTTEST
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PTTEST
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PTTEST T ...) ...)-28-3-2|
(CONST 0) = $PTTEST
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PTTEST
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PTTEST T ...) ...)-28-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $PTTEST
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $PTTEST
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $PTTEST T ...) ...)-28-3-5|
(CONST 0) = $PTTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PTTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PTTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PTTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PTTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PTTEST
8     (SKIP&RET 1)


Disassembly of function $PTTEST
(CONST 0) = $A1
(CONST 1) = $A2
(CONST 2) = $A3
(CONST 3) = $RATSIMP
(CONST 4) = SIMPLIFY
(CONST 5) = 0
(CONST 6) = LIKE
(CONST 7) = 1
(CONST 8) = DIV
(CONST 9) = $EXPAND
(CONST 10) = ($X '$X)
(CONST 11) = |TRD-MSYMEVAL-aux|
(CONST 12) = $COEFF
(CONST 13) = ($X '$X)
(CONST 14) = $FREEOF
(CONST 15) = ($X '$X)
(CONST 16) = ($X '$X)
(CONST 17) = MUL*
(CONST 18) = ADD*
(CONST 19) = *MMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
54 byte-code instructions:
0     (CONST&PUSH 0)                      ; $A1
1     (CONST&PUSH 1)                      ; $A2
2     (CONST&PUSH 2)                      ; $A3
3     (LOAD&PUSH 4)
4     (CALL1&PUSH 3)                      ; $RATSIMP
6     (CALL1 4)                           ; SIMPLIFY
8     (STORE 2)
9     (PUSH)
10    (CONST&PUSH 5)                      ; 0
11    (CALL2&JMPIF 6 L70)                 ; LIKE
14    (CONST&PUSH 7)                      ; 1
15    (LOAD&PUSH 3)
16    (CALL2&PUSH 8)                      ; DIV
18    (CALL1&PUSH 9)                      ; $EXPAND
20    (CALL1 4)                           ; SIMPLIFY
22    (STORE 2)
23    (PUSH)
24    (CONST&PUSH 10)                     ; ($X '$X)
25    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
27    (CONST&PUSH 7)                      ; 1
28    (CALL&PUSH 3 12)                    ; $COEFF
31    (CALL1 4)                           ; SIMPLIFY
33    (STORE 1)
34    (PUSH)
35    (CONST&PUSH 5)                      ; 0
36    (CALL2&JMPIF 6 L70)                 ; LIKE
39    (CONST&PUSH 13)                     ; ($X '$X)
40    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
42    (LOAD&PUSH 2)
43    (CALL2&JMPIFNOT 14 L70)             ; $FREEOF
46    (LOAD&PUSH 2)
47    (CONST&PUSH 15)                     ; ($X '$X)
48    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
50    (CONST&PUSH 5)                      ; 0
51    (CALL&PUSH 3 12)                    ; $COEFF
54    (CALL1 4)                           ; SIMPLIFY
56    (STORE 0)
57    (LOAD&PUSH 2)
58    (LOAD&PUSH 2)
59    (CONST&PUSH 16)                     ; ($X '$X)
60    (CALL1&PUSH 11)                     ; |TRD-MSYMEVAL-aux|
62    (CALL2&PUSH 17)                     ; MUL*
64    (LOAD&PUSH 2)
65    (CALL2&PUSH 18)                     ; ADD*
67    (CALL2&JMPIF 6 L73)                 ; LIKE
70    L70
70    (NIL)
71    (SKIP&RET 5)
73    L73
73    (LOAD&PUSH 0)
74    (CALL1&PUSH 19)                     ; *MMINUS
76    (LOAD&PUSH 2)
77    (CALL2 8)                           ; DIV
79    (SKIP&RET 5)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EULER2 T ...) ...)-29-1|
(CONST 0) = $EULER2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EULER2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EULER2 T ...) ...)-29-2|
(CONST 0) = $EULER2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EULER2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EULER2 T ...) ...)-29-3-1|
(CONST 0) = $EULER2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EULER2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EULER2 T ...) ...)-29-3-2|
(CONST 0) = $EULER2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EULER2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EULER2 T ...) ...)-29-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $EULER2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $EULER2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $EULER2 T ...) ...)-29-3-5|
(CONST 0) = $EULER2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EULER2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EULER2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EULER2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EULER2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EULER2
8     (SKIP&RET 1)


Disassembly of function $EULER2
(CONST 0) = $DC
(CONST 1) = $RP
(CONST 2) = $IP
(CONST 3) = $ALPHA
(CONST 4) = $BETA
(CONST 5) = $SIGN
(CONST 6) = $RADEXPAND
(CONST 7) = ($X '$X)
(CONST 8) = |TRD-MSYMEVAL-aux|
(CONST 9) = ($Y '$Y)
(CONST 10) = ($X '$X)
(CONST 11) = ($PT '$PT)
(CONST 12) = *MMINUS
(CONST 13) = ADD*
(CONST 14) = 2
(CONST 15) = POWER
(CONST 16) = MUL*
(CONST 17) = $RATSIMP
(CONST 18) = SIMPLIFY
(CONST 19) = $FREEOF
(CONST 20) = $EULER
(CONST 21) = $METHOD
(CONST 22) = ($X '$X)
(CONST 23) = ($PT '$PT)
(CONST 24) = -1
(CONST 25) = 4
(CONST 26) = DIV
(CONST 27) = $ASKSIGN
(CONST 28) = $ZERO
(CONST 29) = LIKE
(CONST 30) = (MEQUAL)
(CONST 31) = ($Y '$Y)
(CONST 32) = ($X '$X)
(CONST 33) = ($PT '$PT)
(CONST 34) = $%K1
(CONST 35) = $%K2
(CONST 36) = (%LOG)
(CONST 37) = ($X '$X)
(CONST 38) = ($PT '$PT)
(CONST 39) = $POS
(CONST 40) = (%SQRT)
(CONST 41) = (MEQUAL)
(CONST 42) = ($Y '$Y)
(CONST 43) = ($X '$X)
(CONST 44) = ($PT '$PT)
(CONST 45) = ($X '$X)
(CONST 46) = ($PT '$PT)
(CONST 47) = (%SQRT)
(CONST 48) = (MEQUAL)
(CONST 49) = ($Y '$Y)
(CONST 50) = ($X '$X)
(CONST 51) = ($PT '$PT)
(CONST 52) = (%SIN)
(CONST 53) = (%LOG)
(CONST 54) = ($X '$X)
(CONST 55) = ($PT '$PT)
(CONST 56) = (%COS)
(CONST 57) = (%LOG)
(CONST 58) = ($X '$X)
(CONST 59) = ($PT '$PT)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($METHOD)
198 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DC
1     (CONST&PUSH 1)                      ; $RP
2     (CONST&PUSH 2)                      ; $IP
3     (CONST&PUSH 3)                      ; $ALPHA
4     (CONST&PUSH 4)                      ; $BETA
5     (CONST&PUSH 5)                      ; $SIGN
6     (NIL)
7     (BIND 6)                            ; $RADEXPAND
9     (CONST&PUSH 7)                      ; ($X '$X)
10    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
12    (CONST&PUSH 9)                      ; ($Y '$Y)
13    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
15    (LOAD&PUSH 12)
16    (CONST&PUSH 10)                     ; ($X '$X)
17    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
19    (CONST&PUSH 11)                     ; ($PT '$PT)
20    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
22    (CALL1&PUSH 12)                     ; *MMINUS
24    (CALL2&PUSH 13)                     ; ADD*
26    (CONST&PUSH 14)                     ; 2
27    (CALL2&PUSH 15)                     ; POWER
29    (CALL2&PUSH 16)                     ; MUL*
31    (CALL1&PUSH 17)                     ; $RATSIMP
33    (CALL1 18)                          ; SIMPLIFY
35    (STORE 6)
36    (PUSH)
37    (CALL 3 19)                         ; $FREEOF
40    (JMPIFNOT L226)
43    (CONST 20)                          ; $EULER
44    (SETVALUE 21)                       ; $METHOD
46    (LOAD&PUSH 11)
47    (CONST&PUSH 22)                     ; ($X '$X)
48    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
50    (CONST&PUSH 23)                     ; ($PT '$PT)
51    (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
53    (CALL1&PUSH 12)                     ; *MMINUS
55    (CALL2&PUSH 13)                     ; ADD*
57    (CALL2 16)                          ; MUL*
59    (STORE 5)
60    (PUSH)
61    (CONST&PUSH 24)                     ; -1
62    (CALL2&PUSH 13)                     ; ADD*
64    (CONST&PUSH 14)                     ; 2
65    (CALL2&PUSH 15)                     ; POWER
67    (CONST&PUSH 25)                     ; 4
68    (LOAD&PUSH 6)
69    (CALL2&PUSH 16)                     ; MUL*
71    (CALL1&PUSH 12)                     ; *MMINUS
73    (CALL2&PUSH 13)                     ; ADD*
75    (CALL1&PUSH 17)                     ; $RATSIMP
77    (CALL1 18)                          ; SIMPLIFY
79    (STORE 8)
81    (LOAD&PUSH 5)
82    (CONST&PUSH 24)                     ; -1
83    (CALL2&PUSH 13)                     ; ADD*
85    (CALL1&PUSH 12)                     ; *MMINUS
87    (CONST&PUSH 14)                     ; 2
88    (CALL2&PUSH 26)                     ; DIV
90    (CALL1&PUSH 17)                     ; $RATSIMP
92    (CALL1 18)                          ; SIMPLIFY
94    (STORE 7)
95    (LOAD&PUSH 8)
96    (CALL1&PUSH 27)                     ; $ASKSIGN
98    (CALL1 18)                          ; SIMPLIFY
100   (STORE 3)
101   (PUSH)
102   (CONST&PUSH 28)                     ; $ZERO
103   (CALL2&JMPIF 29 L229)               ; LIKE
107   (LOAD&PUSH 3)
108   (CONST&PUSH 39)                     ; $POS
110   (CALL2&JMPIF 29 L270)               ; LIKE
114   (LOAD&PUSH 8)
115   (CALL1 12)                          ; *MMINUS
117   (STORE 8)
119   (CONST&PUSH 47)                     ; (%SQRT)
121   (LOAD&PUSH 9)
122   (LIST&PUSH 2)
124   (CALL1&PUSH 18)                     ; SIMPLIFY
126   (CONST&PUSH 14)                     ; 2
127   (CALL2 26)                          ; DIV
129   (STORE 6)
130   (CONST&PUSH 48)                     ; (MEQUAL)
132   (CONST&PUSH 49)                     ; ($Y '$Y)
134   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
136   (CONST&PUSH 50)                     ; ($X '$X)
138   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
140   (CONST&PUSH 51)                     ; ($PT '$PT)
142   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
144   (CALL1&PUSH 12)                     ; *MMINUS
146   (CALL2&PUSH 13)                     ; ADD*
148   (LOAD&PUSH 10)
149   (CALL2&PUSH 15)                     ; POWER
151   (CONST&PUSH 34)                     ; $%K1
153   (CONST&PUSH 52)                     ; (%SIN)
155   (LOAD&PUSH 11)
156   (CONST&PUSH 53)                     ; (%LOG)
158   (CONST&PUSH 54)                     ; ($X '$X)
160   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
162   (CONST&PUSH 55)                     ; ($PT '$PT)
164   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
166   (CALL1&PUSH 12)                     ; *MMINUS
168   (CALL2&PUSH 13)                     ; ADD*
170   (LIST&PUSH 2)
172   (CALL1&PUSH 18)                     ; SIMPLIFY
174   (CALL2&PUSH 16)                     ; MUL*
176   (LIST&PUSH 2)
178   (CALL1&PUSH 18)                     ; SIMPLIFY
180   (CALL2&PUSH 16)                     ; MUL*
182   (CONST&PUSH 35)                     ; $%K2
184   (CONST&PUSH 56)                     ; (%COS)
186   (LOAD&PUSH 12)
187   (CONST&PUSH 57)                     ; (%LOG)
189   (CONST&PUSH 58)                     ; ($X '$X)
191   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
193   (CONST&PUSH 59)                     ; ($PT '$PT)
195   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
197   (CALL1&PUSH 12)                     ; *MMINUS
199   (CALL2&PUSH 13)                     ; ADD*
201   (LIST&PUSH 2)
203   (CALL1&PUSH 18)                     ; SIMPLIFY
205   (CALL2 16)                          ; MUL*
207   L207
207   (PUSH)
208   (LIST&PUSH 2)
210   (CALL1&PUSH 18)                     ; SIMPLIFY
212   (CALL2&PUSH 16)                     ; MUL*
214   (CALL2&PUSH 13)                     ; ADD*
216   (CALL2 16)                          ; MUL*
218   L218
218   (PUSH)
219   (LIST&PUSH 3)
221   (CALL1 18)                          ; SIMPLIFY
223   L223
223   (UNBIND1)
224   (SKIP&RET 9)
226   L226
226   (NIL)
227   (JMP L223)
229   L229
229   (CONST&PUSH 30)                     ; (MEQUAL)
231   (CONST&PUSH 31)                     ; ($Y '$Y)
233   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
235   (CONST&PUSH 32)                     ; ($X '$X)
237   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
239   (CONST&PUSH 33)                     ; ($PT '$PT)
241   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
243   (CALL1&PUSH 12)                     ; *MMINUS
245   (CALL2&PUSH 13)                     ; ADD*
247   (LOAD&PUSH 10)
248   (CALL2&PUSH 15)                     ; POWER
250   (CONST&PUSH 34)                     ; $%K1
252   (CONST&PUSH 35)                     ; $%K2
254   (CONST&PUSH 36)                     ; (%LOG)
256   (CONST&PUSH 37)                     ; ($X '$X)
258   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
260   (CONST&PUSH 38)                     ; ($PT '$PT)
262   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
264   (CALL1&PUSH 12)                     ; *MMINUS
266   (CALL2 13)                          ; ADD*
268   (JMP L207)
270   L270
270   (CONST&PUSH 40)                     ; (%SQRT)
272   (LOAD&PUSH 9)
273   (LIST&PUSH 2)
275   (CALL1&PUSH 18)                     ; SIMPLIFY
277   (CONST&PUSH 14)                     ; 2
278   (CALL2 26)                          ; DIV
280   (STORE 6)
281   (CONST&PUSH 41)                     ; (MEQUAL)
283   (CONST&PUSH 42)                     ; ($Y '$Y)
285   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
287   (CONST&PUSH 34)                     ; $%K1
289   (CONST&PUSH 43)                     ; ($X '$X)
291   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
293   (CONST&PUSH 44)                     ; ($PT '$PT)
295   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
297   (CALL1&PUSH 12)                     ; *MMINUS
299   (CALL2&PUSH 13)                     ; ADD*
301   (LOAD&PUSH 11)
302   (LOAD&PUSH 11)
303   (CALL2&PUSH 13)                     ; ADD*
305   (CALL2&PUSH 15)                     ; POWER
307   (CALL2&PUSH 16)                     ; MUL*
309   (CONST&PUSH 35)                     ; $%K2
311   (CONST&PUSH 45)                     ; ($X '$X)
313   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
315   (CONST&PUSH 46)                     ; ($PT '$PT)
317   (CALL1&PUSH 8)                      ; |TRD-MSYMEVAL-aux|
319   (CALL1&PUSH 12)                     ; *MMINUS
321   (CALL2&PUSH 13)                     ; ADD*
323   (LOAD&PUSH 12)
324   (LOAD&PUSH 12)
325   (CALL1&PUSH 12)                     ; *MMINUS
327   (CALL2&PUSH 13)                     ; ADD*
329   (CALL2&PUSH 15)                     ; POWER
331   (CALL2&PUSH 16)                     ; MUL*
333   (CALL2 13)                          ; ADD*
335   (JMP L218)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BESSEL2 T ...) ...)-30-1|
(CONST 0) = $BESSEL2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BESSEL2 T ...) ...)-30-2|
(CONST 0) = $BESSEL2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BESSEL2 T ...) ...)-30-3-1|
(CONST 0) = $BESSEL2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BESSEL2 T ...) ...)-30-3-2|
(CONST 0) = $BESSEL2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BESSEL2 T ...) ...)-30-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $BESSEL2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $BESSEL2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BESSEL2 T ...) ...)-30-3-5|
(CONST 0) = $BESSEL2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BESSEL2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BESSEL2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BESSEL2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BESSEL2
8     (SKIP&RET 1)


Disassembly of function $BESSEL2
(CONST 0) = $NU
(CONST 1) = $B1
(CONST 2) = $INTP
(CONST 3) = $ALL
(CONST 4) = $RADEXPAND
(CONST 5) = ($X '$X)
(CONST 6) = |TRD-MSYMEVAL-aux|
(CONST 7) = ($Y '$Y)
(CONST 8) = 1
(CONST 9) = *MMINUS
(CONST 10) = ADD*
(CONST 11) = ($X '$X)
(CONST 12) = ($PT '$PT)
(CONST 13) = 2
(CONST 14) = POWER
(CONST 15) = MUL*
(CONST 16) = $RATSIMP
(CONST 17) = SIMPLIFY
(CONST 18) = $FREEOF
(CONST 19) = ($X '$X)
(CONST 20) = ($PT '$PT)
(CONST 21) = LIKE
(CONST 22) = (%SQRT)
(CONST 23) = $BESSEL
(CONST 24) = $METHOD
(CONST 25) = RREMAINDER
(CONST 26) = (MEQUAL)
(CONST 27) = ($Y '$Y)
(CONST 28) = $%K1
(CONST 29) = (%SIN)
(CONST 30) = ($X '$X)
(CONST 31) = ($PT '$PT)
(CONST 32) = $%K2
(CONST 33) = (%COS)
(CONST 34) = ($X '$X)
(CONST 35) = ($PT '$PT)
(CONST 36) = (%SQRT)
(CONST 37) = ($X '$X)
(CONST 38) = ($PT '$PT)
(CONST 39) = DIV
(CONST 40) = $INTEGER
(CONST 41) = $FEATUREP
(CONST 42) = IS-BOOLE-CHECK
(CONST 43) = $Y
(CONST 44) = $NUMBERP
(CONST 45) = $N
(CONST 46) = |&Is|
(CONST 47) = |&an integer?  Type Y or N.|
(CONST 48) = $READONLY
(CONST 49) = (MEQUAL)
(CONST 50) = ($Y '$Y)
(CONST 51) = $%J
(CONST 52) = MAREF1
(CONST 53) = ($X '$X)
(CONST 54) = ($PT '$PT)
(CONST 55) = (($%J ARRAY) $NU)
(CONST 56) = MAPPLY
(CONST 57) = $%Y
(CONST 58) = ($X '$X)
(CONST 59) = ($PT '$PT)
(CONST 60) = (($%Y ARRAY) $NU)
(CONST 61) = (MEQUAL)
(CONST 62) = ($Y '$Y)
(CONST 63) = ($X '$X)
(CONST 64) = ($PT '$PT)
(CONST 65) = (($%J ARRAY) $NU)
(CONST 66) = ($X '$X)
(CONST 67) = ($PT '$PT)
(CONST 68) = (($%J ARRAY) ((MMINUS) $NU))
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($METHOD)
204 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NU
1     (CONST&PUSH 1)                      ; $B1
2     (CONST&PUSH 2)                      ; $INTP
3     (CONST 3)                           ; $ALL
4     (BIND 4)                            ; $RADEXPAND
6     (CONST&PUSH 5)                      ; ($X '$X)
7     (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
9     (CONST&PUSH 7)                      ; ($Y '$Y)
10    (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
12    (CONST&PUSH 8)                      ; 1
13    (LOAD&PUSH 10)
14    (CALL1&PUSH 9)                      ; *MMINUS
16    (CALL2&PUSH 10)                     ; ADD*
18    (CONST&PUSH 11)                     ; ($X '$X)
19    (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
21    (CONST&PUSH 12)                     ; ($PT '$PT)
22    (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
24    (CALL1&PUSH 9)                      ; *MMINUS
26    (CALL2&PUSH 10)                     ; ADD*
28    (CONST&PUSH 13)                     ; 2
29    (CALL2&PUSH 14)                     ; POWER
31    (CALL2&PUSH 15)                     ; MUL*
33    (CALL1&PUSH 16)                     ; $RATSIMP
35    (CALL1 17)                          ; SIMPLIFY
37    (STORE 6)
38    (PUSH)
39    (CALL 3 18)                         ; $FREEOF
42    (JMPIFNOT L106)
44    (LOAD&PUSH 8)
45    (CONST&PUSH 19)                     ; ($X '$X)
46    (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
48    (CONST&PUSH 20)                     ; ($PT '$PT)
49    (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
51    (CALL1&PUSH 9)                      ; *MMINUS
53    (CALL2&PUSH 10)                     ; ADD*
55    (CALL2&PUSH 15)                     ; MUL*
57    (CALL1&PUSH 16)                     ; $RATSIMP
59    (CALL1&PUSH 17)                     ; SIMPLIFY
61    (CONST&PUSH 8)                      ; 1
62    (CALL2&JMPIFNOT 21 L110)            ; LIKE
65    (CONST&PUSH 22)                     ; (%SQRT)
66    (LOAD&PUSH 5)
67    (LIST&PUSH 2)
69    (CALL1 17)                          ; SIMPLIFY
71    (STORE 5)
72    (CONST 23)                          ; $BESSEL
74    (SETVALUE 24)                       ; $METHOD
76    (LOAD&PUSH 5)
77    (CONST&PUSH 8)                      ; 1
78    (CONST&PUSH 13)                     ; 2
79    (CALL2&PUSH 25)                     ; RREMAINDER
81    (CALL2&JMPIF 21 L114)               ; LIKE
84    (LOAD&PUSH 5)
85    (CONST&PUSH 40)                     ; $INTEGER
87    (CALL2&PUSH 41)                     ; $FEATUREP
89    (CALL1&PUSH 17)                     ; SIMPLIFY
91    (CALL1&JMPIF 42 L185)               ; IS-BOOLE-CHECK
95    (LOAD&PUSH 5)
96    (CALL1&JMPIFNOT 44 L263)            ; $NUMBERP
100   (CONST 45)                          ; $N
102   (STORE 3)
103   (JMP L263)
106   L106
106   (NIL)
107   (JMP L357)
110   L110
110   (NIL)
111   (JMP L357)
114   L114
114   (CONST&PUSH 26)                     ; (MEQUAL)
115   (CONST&PUSH 27)                     ; ($Y '$Y)
116   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
118   (CONST&PUSH 28)                     ; $%K1
119   (CONST&PUSH 29)                     ; (%SIN)
120   (CONST&PUSH 30)                     ; ($X '$X)
122   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
124   (CONST&PUSH 31)                     ; ($PT '$PT)
126   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
128   (CALL1&PUSH 9)                      ; *MMINUS
130   (CALL2&PUSH 10)                     ; ADD*
132   (LIST&PUSH 2)
134   (CALL1&PUSH 17)                     ; SIMPLIFY
136   (CALL2&PUSH 15)                     ; MUL*
138   (CONST&PUSH 32)                     ; $%K2
140   (CONST&PUSH 33)                     ; (%COS)
142   (CONST&PUSH 34)                     ; ($X '$X)
144   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
146   (CONST&PUSH 35)                     ; ($PT '$PT)
148   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
150   (CALL1&PUSH 9)                      ; *MMINUS
152   (CALL2&PUSH 10)                     ; ADD*
154   (LIST&PUSH 2)
156   (CALL1&PUSH 17)                     ; SIMPLIFY
158   (CALL2&PUSH 15)                     ; MUL*
160   (CALL2&PUSH 10)                     ; ADD*
162   (CONST&PUSH 36)                     ; (%SQRT)
164   (CONST&PUSH 37)                     ; ($X '$X)
166   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
168   (CONST&PUSH 38)                     ; ($PT '$PT)
170   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
172   (CALL1&PUSH 9)                      ; *MMINUS
174   (CALL2&PUSH 10)                     ; ADD*
176   (LIST&PUSH 2)
178   (CALL1&PUSH 17)                     ; SIMPLIFY
180   (CALL2 39)                          ; DIV
182   (JMP L352)
185   L185
185   (CONST 43)                          ; $Y
187   (STORE 3)
188   (JMP L263)
191   L191
191   (CONST&PUSH 49)                     ; (MEQUAL)
193   (CONST&PUSH 50)                     ; ($Y '$Y)
195   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
197   (CONST&PUSH 28)                     ; $%K1
198   (CONST&PUSH 51)                     ; $%J
200   (LOAD&PUSH 9)
201   (CALL2&PUSH 52)                     ; MAREF1
203   (CONST&PUSH 53)                     ; ($X '$X)
205   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
207   (CONST&PUSH 54)                     ; ($PT '$PT)
209   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
211   (CALL1&PUSH 9)                      ; *MMINUS
213   (CALL2&PUSH 10)                     ; ADD*
215   (LIST&PUSH 1)
217   (CONST&PUSH 55)                     ; (($%J ARRAY) $NU)
219   (CALL&PUSH 3 56)                    ; MAPPLY
222   (CALL1&PUSH 17)                     ; SIMPLIFY
224   (CALL2&PUSH 15)                     ; MUL*
226   (CONST&PUSH 32)                     ; $%K2
228   (CONST&PUSH 57)                     ; $%Y
230   (LOAD&PUSH 10)
231   (CALL2&PUSH 52)                     ; MAREF1
233   (CONST&PUSH 58)                     ; ($X '$X)
235   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
237   (CONST&PUSH 59)                     ; ($PT '$PT)
239   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
241   (CALL1&PUSH 9)                      ; *MMINUS
243   (CALL2&PUSH 10)                     ; ADD*
245   (LIST&PUSH 1)
247   (CONST 60)                          ; (($%Y ARRAY) $NU)
249   (JMP L342)
252   L252
252   (CONST&PUSH 46)                     ; |&Is|
254   (LOAD&PUSH 6)
255   (CONST&PUSH 47)                     ; |&an integer?  Type Y or N.|
257   (CALL&PUSH 3 48)                    ; $READONLY
260   (CALL1 17)                          ; SIMPLIFY
262   (STORE 3)
263   L263
263   (LOAD&PUSH 3)
264   (CONST&PUSH 43)                     ; $Y
266   (CALL2&JMPIF 21 L275)               ; LIKE
269   (LOAD&PUSH 3)
270   (CONST&PUSH 45)                     ; $N
272   (CALL2&JMPIFNOT 21 L252)            ; LIKE
275   L275
275   (LOAD&PUSH 3)
276   (CONST&PUSH 43)                     ; $Y
278   (CALL2&JMPIF 21 L191)               ; LIKE
282   (CONST&PUSH 61)                     ; (MEQUAL)
284   (CONST&PUSH 62)                     ; ($Y '$Y)
286   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
288   (CONST&PUSH 28)                     ; $%K1
289   (CONST&PUSH 51)                     ; $%J
291   (LOAD&PUSH 9)
292   (CALL2&PUSH 52)                     ; MAREF1
294   (CONST&PUSH 63)                     ; ($X '$X)
296   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
298   (CONST&PUSH 64)                     ; ($PT '$PT)
300   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
302   (CALL1&PUSH 9)                      ; *MMINUS
304   (CALL2&PUSH 10)                     ; ADD*
306   (LIST&PUSH 1)
308   (CONST&PUSH 65)                     ; (($%J ARRAY) $NU)
310   (CALL&PUSH 3 56)                    ; MAPPLY
313   (CALL1&PUSH 17)                     ; SIMPLIFY
315   (CALL2&PUSH 15)                     ; MUL*
317   (CONST&PUSH 32)                     ; $%K2
319   (CONST&PUSH 51)                     ; $%J
321   (LOAD&PUSH 10)
322   (CALL1&PUSH 9)                      ; *MMINUS
324   (CALL2&PUSH 52)                     ; MAREF1
326   (CONST&PUSH 66)                     ; ($X '$X)
328   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
330   (CONST&PUSH 67)                     ; ($PT '$PT)
332   (CALL1&PUSH 6)                      ; |TRD-MSYMEVAL-aux|
334   (CALL1&PUSH 9)                      ; *MMINUS
336   (CALL2&PUSH 10)                     ; ADD*
338   (LIST&PUSH 1)
340   (CONST 68)                          ; (($%J ARRAY) ((MMINUS) $NU))
342   L342
342   (PUSH)
343   (CALL&PUSH 3 56)                    ; MAPPLY
346   (CALL1&PUSH 17)                     ; SIMPLIFY
348   (CALL2&PUSH 15)                     ; MUL*
350   (CALL2 10)                          ; ADD*
352   L352
352   (PUSH)
353   (LIST&PUSH 3)
355   (CALL1 17)                          ; SIMPLIFY
357   L357
357   (UNBIND1)
358   (SKIP&RET 6)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC1 T ...) ...)-31-1|
(CONST 0) = $IC1
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC1
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC1 T ...) ...)-31-2|
(CONST 0) = $IC1
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC1
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC1 T ...) ...)-31-3-1|
(CONST 0) = $IC1
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC1
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC1 T ...) ...)-31-3-2|
(CONST 0) = $IC1
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC1
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC1 T ...) ...)-31-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $IC1
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $IC1
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC1 T ...) ...)-31-3-5|
(CONST 0) = $IC1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $IC1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $IC1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $IC1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $IC1
8     (SKIP&RET 1)


Disassembly of function $IC1
(CONST 0) = $NOTEQN
(CONST 1) = SIMPLIFY
(CONST 2) = $%C
(CONST 3) = $BOUNDTEST
(CONST 4) = (MLIST)
(CONST 5) = (MEQUAL)
(CONST 6) = (MLIST)
(CONST 7) = $SUBSTITUTE
(CONST 8) = $SOLVE1
(CONST 9) = $RHS
(CONST 10) = $RATSIMP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
33 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&PUSH 0)                      ; $NOTEQN
3     (CALL1 1)                           ; SIMPLIFY
5     (LOAD&PUSH 1)
6     (CALL1&PUSH 0)                      ; $NOTEQN
8     (CALL1 1)                           ; SIMPLIFY
10    (CONST&PUSH 2)                      ; $%C
11    (CONST&PUSH 2)                      ; $%C
12    (CALL2&PUSH 3)                      ; $BOUNDTEST
14    (CALL1 1)                           ; SIMPLIFY
16    (CONST&PUSH 4)                      ; (MLIST)
17    (CONST&PUSH 5)                      ; (MEQUAL)
18    (CONST&PUSH 2)                      ; $%C
19    (CONST&PUSH 6)                      ; (MLIST)
20    (LOAD&PUSH 6)
21    (LOAD&PUSH 6)
22    (LIST&PUSH 3)
24    (LOAD&PUSH 7)
25    (CALL2&PUSH 7)                      ; $SUBSTITUTE
27    (CALL1&PUSH 1)                      ; SIMPLIFY
29    (CONST&PUSH 2)                      ; $%C
30    (CALL2&PUSH 8)                      ; $SOLVE1
32    (CALL1&PUSH 1)                      ; SIMPLIFY
34    (CALL1&PUSH 9)                      ; $RHS
36    (LIST&PUSH 3)
38    (CALL1&PUSH 1)                      ; SIMPLIFY
40    (LIST&PUSH 2)
42    (LOAD&PUSH 4)
43    (CALL2&PUSH 7)                      ; $SUBSTITUTE
45    (CALL1&PUSH 1)                      ; SIMPLIFY
47    (CALL1&PUSH 10)                     ; $RATSIMP
49    (CALL1 1)                           ; SIMPLIFY
51    (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BC2 T ...) ...)-32-1|
(CONST 0) = $BC2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BC2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BC2 T ...) ...)-32-2|
(CONST 0) = $BC2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BC2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BC2 T ...) ...)-32-3-1|
(CONST 0) = $BC2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BC2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BC2 T ...) ...)-32-3-2|
(CONST 0) = $BC2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BC2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BC2 T ...) ...)-32-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $BC2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $BC2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BC2 T ...) ...)-32-3-5|
(CONST 0) = $BC2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BC2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BC2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BC2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BC2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BC2
8     (SKIP&RET 1)


Disassembly of function $BC2
(CONST 0) = $PROGRAMMODE
(CONST 1) = $BACKSUBST
(CONST 2) = $SINGSOLVE
(CONST 3) = $TEMP
(CONST 4) = $NOTEQN
(CONST 5) = SIMPLIFY
(CONST 6) = $%K1
(CONST 7) = $BOUNDTEST
(CONST 8) = $%K2
(CONST 9) = #<COMPILED-CLOSURE $BC2-1>
(CONST 10) = (MLIST)
(CONST 11) = (MLIST)
(CONST 12) = $SUBSTITUTE
(CONST 13) = (MLIST)
(CONST 14) = (MLIST)
(CONST 15) = $SOLVE
(CONST 16) = MAPLIST_TR
(CONST 17) = $LENGTH
(CONST 18) = 1
(CONST 19) = $FIRST
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
69 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 1)
3     (LOAD&STOREC 6 0 0)
7     (T)
8     (BIND 0)                            ; $PROGRAMMODE
10    (T)
11    (BIND 1)                            ; $BACKSUBST
13    (T)
14    (BIND 2)                            ; $SINGSOLVE
16    (CONST&PUSH 3)                      ; $TEMP
17    (LOAD&PUSH 15)
18    (CALL1&PUSH 4)                      ; $NOTEQN
20    (CALL1 5)                           ; SIMPLIFY
22    (LOAD&PUSH 14)
23    (CALL1&PUSH 4)                      ; $NOTEQN
25    (CALL1 5)                           ; SIMPLIFY
27    (LOAD&PUSH 13)
28    (CALL1&PUSH 4)                      ; $NOTEQN
30    (CALL1 5)                           ; SIMPLIFY
32    (LOAD&PUSH 12)
33    (CALL1&PUSH 4)                      ; $NOTEQN
35    (CALL1 5)                           ; SIMPLIFY
37    (CONST&PUSH 6)                      ; $%K1
38    (CONST&PUSH 6)                      ; $%K1
39    (CALL2&PUSH 7)                      ; $BOUNDTEST
41    (CALL1 5)                           ; SIMPLIFY
43    (CONST&PUSH 8)                      ; $%K2
44    (CONST&PUSH 8)                      ; $%K2
45    (CALL2&PUSH 7)                      ; $BOUNDTEST
47    (CALL1 5)                           ; SIMPLIFY
49    (LOAD&PUSH 10)
50    (COPY-CLOSURE&PUSH 9 1)             ; #<COMPILED-CLOSURE $BC2-1>
53    (CONST&PUSH 10)                     ; (MLIST)
54    (CONST&PUSH 11)                     ; (MLIST)
55    (LOAD&PUSH 18)
56    (LOAD&PUSH 18)
57    (LIST&PUSH 3)
59    (LOADC&PUSH 13 0)
62    (CALL2&PUSH 12)                     ; $SUBSTITUTE
64    (CALL1&PUSH 5)                      ; SIMPLIFY
66    (CONST&PUSH 13)                     ; (MLIST)
67    (LOAD&PUSH 17)
68    (LOAD&PUSH 17)
69    (LIST&PUSH 3)
71    (LOADC&PUSH 14 0)
74    (CALL2&PUSH 12)                     ; $SUBSTITUTE
76    (CALL1&PUSH 5)                      ; SIMPLIFY
78    (LIST&PUSH 3)
80    (CONST&PUSH 14)                     ; (MLIST)
81    (CONST&PUSH 6)                      ; $%K1
82    (CONST&PUSH 8)                      ; $%K2
83    (LIST&PUSH 3)
85    (CALL2&PUSH 15)                     ; $SOLVE
87    (CALL1&PUSH 5)                      ; SIMPLIFY
89    (CALL2 16)                          ; MAPLIST_TR
91    (STORE 0)
92    (PUSH)
93    (CALL1&PUSH 17)                     ; $LENGTH
95    (JMPIFEQTO 18 L105)                 ; 1
98    (LOAD 0)
99    L99
99    (SKIP 1)
101   (UNBIND 3)
103   (SKIP&RET 7)
105   L105
105   (LOAD&PUSH 0)
106   (CALL1&PUSH 19)                     ; $FIRST
108   (CALL1 5)                           ; SIMPLIFY
110   (JMP L99)


Disassembly of function $BC2-1
(CONST 0) = NIL
(CONST 1) = $SUBSTITUTE
(CONST 2) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOADV&PUSH 0 1)
4     (CALL2&PUSH 1)                      ; $SUBSTITUTE
6     (CALL1 2)                           ; SIMPLIFY
8     (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC2 T ...) ...)-33-1|
(CONST 0) = $IC2
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC2
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC2 T ...) ...)-33-2|
(CONST 0) = $IC2
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC2
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC2 T ...) ...)-33-3-1|
(CONST 0) = $IC2
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC2
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC2 T ...) ...)-33-3-2|
(CONST 0) = $IC2
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC2
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC2 T ...) ...)-33-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $IC2
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $IC2
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $IC2 T ...) ...)-33-3-5|
(CONST 0) = $IC2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $IC2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IC2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $IC2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $IC2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $IC2
8     (SKIP&RET 1)


Disassembly of function $IC2
(CONST 0) = $PROGRAMMODE
(CONST 1) = $BACKSUBST
(CONST 2) = $SINGSOLVE
(CONST 3) = $TEMP
(CONST 4) = $NOTEQN
(CONST 5) = SIMPLIFY
(CONST 6) = $%K1
(CONST 7) = $BOUNDTEST
(CONST 8) = $%K2
(CONST 9) = $LHS
(CONST 10) = $RHS
(CONST 11) = *MMINUS
(CONST 12) = ADD*
(CONST 13) = #<COMPILED-CLOSURE $IC2-1>
(CONST 14) = (MLIST)
(CONST 15) = (MLIST)
(CONST 16) = $SUBSTITUTE
(CONST 17) = (MLIST)
(CONST 18) = (MEQUAL)
(CONST 19) = 0
(CONST 20) = $DIFF
(CONST 21) = DIV
(CONST 22) = (MLIST)
(CONST 23) = $SOLVE
(CONST 24) = MAPLIST_TR
(CONST 25) = $LENGTH
(CONST 26) = 1
(CONST 27) = $FIRST
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
94 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 1)
3     (LOAD&STOREC 5 0 0)
7     (T)
8     (BIND 0)                            ; $PROGRAMMODE
10    (T)
11    (BIND 1)                            ; $BACKSUBST
13    (T)
14    (BIND 2)                            ; $SINGSOLVE
16    (CONST&PUSH 3)                      ; $TEMP
17    (LOAD&PUSH 14)
18    (CALL1&PUSH 4)                      ; $NOTEQN
20    (CALL1 5)                           ; SIMPLIFY
22    (LOAD&PUSH 13)
23    (CALL1&PUSH 4)                      ; $NOTEQN
25    (CALL1 5)                           ; SIMPLIFY
27    (LOAD&PUSH 12)
28    (CALL1&PUSH 4)                      ; $NOTEQN
30    (CALL1 5)                           ; SIMPLIFY
32    (CONST&PUSH 6)                      ; $%K1
33    (CONST&PUSH 6)                      ; $%K1
34    (CALL2&PUSH 7)                      ; $BOUNDTEST
36    (CALL1 5)                           ; SIMPLIFY
38    (CONST&PUSH 8)                      ; $%K2
39    (CONST&PUSH 8)                      ; $%K2
40    (CALL2&PUSH 7)                      ; $BOUNDTEST
42    (CALL1 5)                           ; SIMPLIFY
44    (LOADC&PUSH 10 0)
47    (CALL1&PUSH 9)                      ; $LHS
49    (LOADC&PUSH 11 0)
52    (CALL1&PUSH 10)                     ; $RHS
54    (CALL1&PUSH 11)                     ; *MMINUS
56    (CALL2 12)                          ; ADD*
58    (STORE 0)
59    (LOAD&PUSH 10)
60    (COPY-CLOSURE&PUSH 13 1)            ; #<COMPILED-CLOSURE $IC2-1>
63    (CONST&PUSH 14)                     ; (MLIST)
64    (CONST&PUSH 15)                     ; (MLIST)
65    (LOAD&PUSH 17)
66    (LOAD&PUSH 17)
67    (LIST&PUSH 3)
69    (LOADC&PUSH 13 0)
72    (CALL2&PUSH 16)                     ; $SUBSTITUTE
74    (CALL1&PUSH 5)                      ; SIMPLIFY
76    (CONST&PUSH 17)                     ; (MLIST)
77    (LOAD&PUSH 16)
78    (LOAD&PUSH 19)
79    (LIST&PUSH 3)
81    (CONST&PUSH 18)                     ; (MEQUAL)
82    (LOAD&PUSH 17)
83    (CALL1&PUSH 9)                      ; $LHS
85    (CONST&PUSH 19)                     ; 0
86    (LOAD&PUSH 19)
87    (CALL1&PUSH 9)                      ; $LHS
89    (LOAD&PUSH 8)
90    (LOAD&PUSH 23)
91    (CALL1&PUSH 9)                      ; $LHS
93    (CALL2&PUSH 20)                     ; $DIFF
95    (CALL1&PUSH 5)                      ; SIMPLIFY
97    (CALL&PUSH 3 16)                    ; $SUBSTITUTE
100   (CALL1&PUSH 5)                      ; SIMPLIFY
102   (CALL1&PUSH 11)                     ; *MMINUS
104   (LOAD&PUSH 7)
105   (LOAD&PUSH 21)
106   (CALL1&PUSH 9)                      ; $LHS
108   (CALL2&PUSH 20)                     ; $DIFF
110   (CALL1&PUSH 5)                      ; SIMPLIFY
112   (CALL2&PUSH 21)                     ; DIV
114   (LIST&PUSH 3)
116   (CALL1&PUSH 5)                      ; SIMPLIFY
118   (CALL2&PUSH 16)                     ; $SUBSTITUTE
120   (CALL1&PUSH 5)                      ; SIMPLIFY
122   (LIST&PUSH 3)
124   (CONST&PUSH 22)                     ; (MLIST)
125   (CONST&PUSH 6)                      ; $%K1
126   (CONST&PUSH 8)                      ; $%K2
127   (LIST&PUSH 3)
129   (CALL2&PUSH 23)                     ; $SOLVE
131   (CALL1&PUSH 5)                      ; SIMPLIFY
133   (CALL2 24)                          ; MAPLIST_TR
135   (STORE 0)
136   (PUSH)
137   (CALL1&PUSH 25)                     ; $LENGTH
139   (JMPIFEQTO 26 L149)                 ; 1
142   (LOAD 0)
143   L143
143   (SKIP 1)
145   (UNBIND 3)
147   (SKIP&RET 6)
149   L149
149   (LOAD&PUSH 0)
150   (CALL1&PUSH 27)                     ; $FIRST
152   (CALL1 5)                           ; SIMPLIFY
154   (JMP L143)


Disassembly of function $IC2-1
(CONST 0) = NIL
(CONST 1) = $SUBSTITUTE
(CONST 2) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOADV&PUSH 0 1)
4     (CALL2&PUSH 1)                      ; $SUBSTITUTE
6     (CALL1 2)                           ; SIMPLIFY
8     (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NOTEQN T ...) ...)-34-1|
(CONST 0) = $NOTEQN
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOTEQN
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NOTEQN T ...) ...)-34-2|
(CONST 0) = $NOTEQN
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOTEQN
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NOTEQN T ...) ...)-34-3-1|
(CONST 0) = $NOTEQN
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOTEQN
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NOTEQN T ...) ...)-34-3-2|
(CONST 0) = $NOTEQN
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOTEQN
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NOTEQN T ...) ...)-34-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $NOTEQN
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $NOTEQN
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $NOTEQN T ...) ...)-34-3-5|
(CONST 0) = $NOTEQN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NOTEQN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOTEQN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NOTEQN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NOTEQN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NOTEQN
8     (SKIP&RET 1)


Disassembly of function $NOTEQN
(CONST 0) = $X
(CONST 1) = ($X '$X)
(CONST 2) = |TRD-MSYMEVAL-aux|
(CONST 3) = $ATOM
(CONST 4) = ($X '$X)
(CONST 5) = 0
(CONST 6) = $INPART
(CONST 7) = SIMPLIFY
(CONST 8) = &=
(CONST 9) = LIKE
(CONST 10) = ($X '$X)
(CONST 11) = DISPLAY-FOR-TR
(CONST 12) = |&Not an equation|
(CONST 13) = $ERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; $X
3     (CONST&PUSH 1)                      ; ($X '$X)
4     (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
6     (CALL1&JMPIF 3 L25)                 ; $ATOM
9     (CONST&PUSH 4)                      ; ($X '$X)
10    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
12    (CONST&PUSH 5)                      ; 0
13    (CALL2&PUSH 6)                      ; $INPART
15    (CALL1&PUSH 7)                      ; SIMPLIFY
17    (CONST&PUSH 8)                      ; &=
18    (CALL2&JMPIFNOT 9 L25)              ; LIKE
21    (NIL)
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)
25    L25
25    (PUSH-NIL 2)
27    (CONST&PUSH 10)                     ; ($X '$X)
28    (CALL1&PUSH 2)                      ; |TRD-MSYMEVAL-aux|
30    (CALL 3 11)                         ; DISPLAY-FOR-TR
33    (PUSH-NIL 2)
35    (CONST&PUSH 12)                     ; |&Not an equation|
36    (CALL 3 11)                         ; DISPLAY-FOR-TR
39    (CALL0 13)                          ; $ERROR
41    (PUSH)
42    (CALL1 7)                           ; SIMPLIFY
44    (JMP L22)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BOUNDTEST T ...) ...)-35-1|
(CONST 0) = $BOUNDTEST
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BOUNDTEST
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BOUNDTEST T ...) ...)-35-2|
(CONST 0) = $BOUNDTEST
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BOUNDTEST
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BOUNDTEST T ...) ...)-35-3-1|
(CONST 0) = $BOUNDTEST
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BOUNDTEST
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BOUNDTEST T ...) ...)-35-3-2|
(CONST 0) = $BOUNDTEST
(CONST 1) = FUNCTION-MODE
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BOUNDTEST
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BOUNDTEST T ...) ...)-35-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $BOUNDTEST
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $BOUNDTEST
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $BOUNDTEST T ...) ...)-35-3-5|
(CONST 0) = $BOUNDTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BOUNDTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BOUNDTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BOUNDTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BOUNDTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BOUNDTEST
8     (SKIP&RET 1)


Disassembly of function $BOUNDTEST
(CONST 0) = $X
(CONST 1) = $Y
(CONST 2) = ($X '$X)
(CONST 3) = |TRD-MSYMEVAL-aux|
(CONST 4) = ($Y '$Y)
(CONST 5) = LIKE
(CONST 6) = ($X '$X)
(CONST 7) = DISPLAY-FOR-TR
(CONST 8) = |&Must not be bound|
(CONST 9) = $ERROR
(CONST 10) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
25 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; $X
3     (LOAD 4)
4     (BIND 1)                            ; $Y
6     (CONST&PUSH 2)                      ; ($X '$X)
7     (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
9     (CONST&PUSH 4)                      ; ($Y '$Y)
10    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
12    (CALL2&JMPIFNOT 5 L20)              ; LIKE
15    (NIL)
16    L16
16    (UNBIND 2)
18    (SKIP&RET 3)
20    L20
20    (PUSH-NIL 2)
22    (CONST&PUSH 6)                      ; ($X '$X)
23    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
25    (CALL 3 7)                          ; DISPLAY-FOR-TR
28    (PUSH-NIL 2)
30    (CONST&PUSH 8)                      ; |&Must not be bound|
31    (CALL 3 7)                          ; DISPLAY-FOR-TR
34    (CALL0 9)                           ; $ERROR
36    (PUSH)
37    (CALL1 10)                          ; SIMPLIFY
39    (JMP L16)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FAILURE T ...) ...)-36-1|
(CONST 0) = $FAILURE
(CONST 1) = TRANSLATED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FAILURE
1     (CONST&PUSH 1)                      ; TRANSLATED
2     (T&PUSH)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FAILURE T ...) ...)-36-2|
(CONST 0) = $FAILURE
(CONST 1) = $PROPS
(CONST 2) = ADD2LNC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FAILURE
1     (GETVALUE&PUSH 1)                   ; $PROPS
3     (CALL2 2)                           ; ADD2LNC
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FAILURE T ...) ...)-36-3-1|
(CONST 0) = $FAILURE
(CONST 1) = TRANSLATE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FAILURE
1     (CONST&PUSH 1)                      ; TRANSLATE
2     (CALLS2 137)                        ; REMPROP
4     (VALUES0)
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FAILURE T ...) ...)-36-3-2|
(CONST 0) = $FAILURE
(CONST 1) = FUNCTION-MODE
(CONST 2) = $BOOLEAN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FAILURE
1     (CONST&PUSH 1)                      ; FUNCTION-MODE
2     (CONST&PUSH 2)                      ; $BOOLEAN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FAILURE T ...) ...)-36-3-3|
(CONST 0) = :MACSYMA
(CONST 1) = *FEATURES*
(CONST 2) = $FAILURE
(CONST 3) = $FIXED_NUM_ARGS_FUNCTION
(CONST 4) = MPUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; :MACSYMA
1     (GETVALUE&PUSH 1)                   ; *FEATURES*
3     (PUSH-UNBOUND 3)
5     (CALLS1&JMPIFNOT 180 L14)           ; MEMBER
8     (CONST&PUSH 2)                      ; $FAILURE
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; $FIXED_NUM_ARGS_FUNCTION
11    (CALL 3 4)                          ; MPUTPROP
14    L14
14    (VALUES0)
15    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFPROP $FAILURE T ...) ...)-36-3-5|
(CONST 0) = $FAILURE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FAILURE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FAILURE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FAILURE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FAILURE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FAILURE
8     (SKIP&RET 1)


Disassembly of function $FAILURE
(CONST 0) = $YNEW
(CONST 1) = IS-BOOLE-CHECK
(CONST 2) = ($YOLD '$YOLD)
(CONST 3) = |TRD-MSYMEVAL-aux|
(CONST 4) = $SUBSTITUTE
(CONST 5) = SIMPLIFY
(CONST 6) = DISPLAY-FOR-TR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($YNEW)
20 byte-code instructions:
0     (CONST 0)                           ; $YNEW
1     (BIND 0)                            ; $YNEW
3     (NIL&PUSH)
4     (CALL1&JMPIF 1 L29)                 ; IS-BOOLE-CHECK
7     (T&PUSH)
8     (NIL&PUSH)
9     (CONST&PUSH 2)                      ; ($YOLD '$YOLD)
10    (CALL1&PUSH 3)                      ; |TRD-MSYMEVAL-aux|
12    (GETVALUE&PUSH 0)                   ; $YNEW
14    (LOAD&PUSH 8)
15    (CALL&PUSH 3 4)                     ; $SUBSTITUTE
18    (CALL1&PUSH 5)                      ; SIMPLIFY
20    (CALL 3 6)                          ; DISPLAY-FOR-TR
23    (PUSH-NIL 2)
25    (LOAD&PUSH 7)
26    (CALL 3 6)                          ; DISPLAY-FOR-TR
29    L29
29    (NIL)
30    (UNBIND1)
31    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (LOAD COMPILE) (MEVAL '#))-37|
(CONST 0) = (($REMOVE) $X $SPECIAL $Y $SPECIAL)
(CONST 1) = MEVAL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; (($REMOVE) $X $SPECIAL $Y $SPECIAL)
1     (CALL1 1)                           ; MEVAL
3     (SKIP&RET 1)


Disassembly of function #:|(SETQ $MSG1 '\|&Not a proper differential equation\|)-38|
(CONST 0) = |&Not a proper differential equation|
(CONST 1) = $MSG1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($MSG1)
3 byte-code instructions:
0     (CONST 0)                           ; |&Not a proper differential equation|
1     (SETVALUE 1)                        ; $MSG1
3     (SKIP&RET 1)


Disassembly of function #:|(SETQ $MSG2 '\|&First order equation not linear in y'\|)-39|
(CONST 0) = |&First order equation not linear in y'|
(CONST 1) = $MSG2
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : ($MSG2)
3 byte-code instructions:
0     (CONST 0)                           ; |&First order equation not linear in y'|
1     (SETVALUE 1)                        ; $MSG2
3     (SKIP&RET 1)


Wrote file binary-clisp/ode2.fas
Wrote file /cygdrive/e/temp/maxima/src/ode2.lis