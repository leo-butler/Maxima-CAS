Listing of compilation of file /cygdrive/e/temp/maxima/src/rat3d.lisp
on 2002-12-17 13:33:36 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/rat3d.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE RAT3D)-2|
(CONST 0) = RAT3D
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT3D
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (GENPREFIX A_4))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RATMAC)-4|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *MIN* *MX* ...))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL $FACTORFLAG $INTFACLIM ...) (SPECIAL ERRRJFFLAG))-6|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL ALPHA *ALPHA) (SPECIAL GAUSS GENVAR ...))-7|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *IRREDS NIL)-8-1|
(CONST 0) = *IRREDS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *IRREDS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *IRREDS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *IRREDS NIL)-8-2|
(CONST 0) = (SPECIAL *IRREDS)
(CONST 1) = *IRREDS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *IRREDS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *IRREDS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *IRREDS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *IRREDS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ALGFAC* NIL)-9-1|
(CONST 0) = ALGFAC*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGFAC*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ALGFAC*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ALGFAC* NIL)-9-2|
(CONST 0) = (SPECIAL ALGFAC*)
(CONST 1) = ALGFAC*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ALGFAC*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ALGFAC*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ALGFAC*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; ALGFAC*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LOW* NIL)-10-1|
(CONST 0) = LOW*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOW*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; LOW*
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LOW* NIL)-10-2|
(CONST 0) = (SPECIAL LOW*)
(CONST 1) = LOW*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL LOW*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; LOW*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; LOW*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; LOW*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $INTFACLIM 1000)-11-1|
(CONST 0) = $INTFACLIM
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 1000
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTFACLIM
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $INTFACLIM
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 1000
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $INTFACLIM 1000)-11-2|
(CONST 0) = (SPECIAL $INTFACLIM)
(CONST 1) = $INTFACLIM
(CONST 2) = 1000
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $INTFACLIM)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $INTFACLIM
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $INTFACLIM
8     (CONST&PUSH 2)                      ; 1000
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $INTFACLIM
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BERLEFACT T)-12-1|
(CONST 0) = $BERLEFACT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BERLEFACT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $BERLEFACT
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BERLEFACT T)-12-2|
(CONST 0) = (SPECIAL $BERLEFACT)
(CONST 1) = $BERLEFACT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $BERLEFACT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $BERLEFACT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $BERLEFACT
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $BERLEFACT
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN CFACTOR (X) ...)-13|
(CONST 0) = CFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CFACTOR
8     (SKIP&RET 1)


Disassembly of function CFACTOR
(CONST 0) = X
(CONST 1) = K
(CONST 2) = $FACTORFLAG
(CONST 3) = 1
(CONST 4) = "FACTOR given floating arg"
(CONST 5) = ERRRJF
(CONST 6) = FIXNUMP
(CONST 7) = 0
(CONST 8) = -1
(CONST 9) = 2
(CONST 10) = FIXNUM-CFACTOR
(CONST 11) = QUOT
(CONST 12) = 3
(CONST 13) = 5
(CONST 14) = 4
(CONST 15) = $INTFACLIM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K $INTFACLIM X $FACTORFLAG)
writes special variables : (X K)
160 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 3)
5     (NIL)
6     (BIND 1)                            ; K
8     (GETVALUE 2)                        ; $FACTORFLAG
10    (JMPIFNOT L62)
12    (GETVALUE&PUSH 0)                   ; X
14    (CALLS2&JMPIF 15 L113)              ; FLOATP
18    (GETVALUE 0)                        ; X
20    (BIND 0)                            ; X
22    (GETVALUE&PUSH 0)                   ; X
24    (CALL1&JMPIF 6 L72)                 ; FIXNUMP
27    (GETVALUE 0)                        ; X
29    (JMPIFATOM L67)
31    (UNBIND1)
32    L32
32    (GETVALUE&PUSH 0)                   ; X
34    (JMPIFEQTO 8 L88)                   ; -1
37    (GETVALUE&PUSH 0)                   ; X
39    (CALLS2&JMPIF 147 L92)              ; MINUSP
42    (GETVALUE&PUSH 0)                   ; X
44    (CONST&PUSH 9)                      ; 2
45    (CALLSR&JMPIFNOT 1 47 L116)         ; <
50    (GETVALUE&PUSH 0)                   ; X
52    (CONST 3)                           ; 1
53    L53
53    (PUSH)
54    (LIST 2)
56    L56
56    (UNBIND1)
57    (SKIP 3)
59    (JMP L241)
62    L62
62    (GETVALUE&PUSH 0)                   ; X
64    (CONST 3)                           ; 1
65    (JMP L53)
67    L67
67    (GETVALUE&PUSH 0)                   ; X
69    (CALLS2&JMPIFNOT 15 L81)            ; FLOATP
72    L72
72    (GETVALUE&PUSH 0)                   ; X
74    (CALLS2 145)                        ; ZEROP
76    (UNBIND1)
77    (JMPIFNOT L32)
79    (JMP L84)
81    L81
81    (UNBIND1)
82    (JMPIFNOT L32)
84    L84
84    (CONST&PUSH 7)                      ; 0
85    (CONST 3)                           ; 1
86    (JMP L53)
88    L88
88    (CONST&PUSH 8)                      ; -1
89    (CONST 3)                           ; 1
90    (JMP L53)
92    L92
92    (CONST&PUSH 8)                      ; -1
93    (CONST&PUSH 3)                      ; 1
94    (GETVALUE&PUSH 0)                   ; X
96    (CALLSR&PUSH 0 54)                  ; -
99    (JSR L0)
102   (CONS)
103   (CONS)
104   (JMP L56)
106   L106
106   (GETVALUE&PUSH 0)                   ; X
108   (CALL1 10)                          ; FIXNUM-CFACTOR
110   (JMP L238)
113   L113
113   (CONST&PUSH 4)                      ; "FACTOR given floating arg"
114   (CALL1 5)                           ; ERRRJF
116   L116
116   (GETVALUE&PUSH 0)                   ; X
118   (CALL1&JMPIF 6 L106)                ; FIXNUMP
121   (CONST 9)                           ; 2
122   (SETVALUE 1)                        ; K
124   (STORE 5)
125   L125
125   (CONST 7)                           ; 0
126   (STORE 4)
127   (JMP L163)
129   L129
129   (CONST 12)                          ; 3
130   (JMP L133)
132   L132
132   (CONST 13)                          ; 5
133   L133
133   (STORE 5)
134   (GETVALUE 15)                       ; $INTFACLIM
136   (JMPIFNOT L217)
139   (JMP L210)
142   L142
142   (CONST 14)                          ; 4
143   (JMP L204)
145   L145
145   (GETVALUE&PUSH 0)                   ; X
147   (CONST&PUSH 3)                      ; 1
148   (LOAD 5)
149   (CONS)
150   (CONS)
151   (JMP L238)
154   L154
154   (LOAD&INC&STORE 4)
156   (GETVALUE&PUSH 0)                   ; X
158   (LOAD&PUSH 6)
159   (CALL2 11)                          ; QUOT
161   (SETVALUE 0)                        ; X
163   L163
163   (GETVALUE&PUSH 0)                   ; X
165   (LOAD&PUSH 6)
166   (CALLS2&PUSH 184)                   ; REM
168   (CALLS2&JMPIF 145 L154)             ; ZEROP
171   (LOAD&PUSH 4)
172   (CONST&PUSH 7)                      ; 0
173   (CALLSR&JMPIFNOT 1 48 L183)         ; >
177   (LOAD&PUSH 5)
178   (LOAD&PUSH 5)
179   (LOAD 5)
180   (CONS)
181   (CONS)
182   (STORE 3)
183   L183
183   (LOAD&PUSH 5)
184   (JMPIFEQTO 9 L129)                  ; 2
187   (LOAD&PUSH 5)
188   (JMPIFEQTO 12 L132)                 ; 3
191   (LOAD&PUSH 5)
192   (GETVALUE&PUSH 1)                   ; K
194   (CALLSR&STORE 2 53 5)               ; +
198   (GETVALUE&PUSH 1)                   ; K
200   (JMPIFEQTO 9 L142)                  ; 2
203   (CONST 9)                           ; 2
204   L204
204   (SETVALUE 1)                        ; K
206   (GETVALUE 15)                       ; $INTFACLIM
208   (JMPIFNOT L217)
210   L210
210   (LOAD&PUSH 5)
211   (GETVALUE&PUSH 15)                  ; $INTFACLIM
213   (CALLSR&JMPIF 1 48 L229)            ; >
217   L217
217   (LOAD&PUSH 5)
218   (LOAD&PUSH 6)
219   (CALLSR&PUSH 2 55)                  ; *
222   (GETVALUE&PUSH 0)                   ; X
224   (CALLSR&JMPIFNOT 1 48 L125)         ; >
229   L229
229   (GETVALUE&PUSH 0)                   ; X
231   (CONST&PUSH 3)                      ; 1
232   (CALLSR&JMPIF 1 48 L145)            ; >
237   (LOAD 3)
238   L238
238   (UNBIND1)
239   (SKIP 3)
241   L241
241   (UNBIND1)
242   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN FIXNUM-CFACTOR (X) ...)-14|
(CONST 0) = FIXNUM-CFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXNUM-CFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXNUM-CFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXNUM-CFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXNUM-CFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXNUM-CFACTOR
8     (SKIP&RET 1)


Disassembly of function FIXNUM-CFACTOR
(CONST 0) = X
(CONST 1) = 2
(CONST 2) = 0
(CONST 3) = K
(CONST 4) = 1
(CONST 5) = QUOT
(CONST 6) = 3
(CONST 7) = 5
(CONST 8) = 4
(CONST 9) = $INTFACLIM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K $INTFACLIM X)
writes special variables : (K X)
93 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 2
4     (CONST&PUSH 2)                      ; 0
5     (CONST 1)                           ; 2
6     (BIND 3)                            ; K
8     (NIL&PUSH)
9     L9
9     (CONST 2)                           ; 0
10    (STORE 4)
11    (JMP L29)
13    L13
13    (CONST 6)                           ; 3
14    (JMP L64)
16    L16
16    (CONST&PUSH 4)                      ; 1
17    (LOAD&PUSH 5)
18    (CALLSR&STORE 2 53 4)               ; +
22    (GETVALUE&PUSH 0)                   ; X
24    (LOAD&PUSH 6)
25    (CALL2 5)                           ; QUOT
27    (SETVALUE 0)                        ; X
29    L29
29    (CONST&PUSH 2)                      ; 0
30    (GETVALUE&PUSH 0)                   ; X
32    (LOAD&PUSH 7)
33    (CALLS2&PUSH 184)                   ; REM
35    (CALLSR&JMPIF 1 45 L16)             ; =
39    (LOAD&PUSH 4)
40    (CONST&PUSH 2)                      ; 0
41    (CALLSR&JMPIFNOT 1 48 L51)          ; >
45    (LOAD&PUSH 5)
46    (LOAD&PUSH 5)
47    (LOAD 2)
48    (CONS)
49    (CONS)
50    (STORE 0)
51    L51
51    (LOAD&PUSH 5)
52    (CONST&PUSH 1)                      ; 2
53    (CALLSR&JMPIF 1 45 L13)             ; =
57    (LOAD&PUSH 5)
58    (CONST&PUSH 6)                      ; 3
59    (CALLSR&JMPIFNOT 1 45 L82)          ; =
63    (CONST 7)                           ; 5
64    L64
64    (STORE 5)
65    (GETVALUE 9)                        ; $INTFACLIM
67    (JMPIFNOT L110)
69    (JMP L103)
71    L71
71    (CONST 8)                           ; 4
72    (JMP L97)
74    L74
74    (GETVALUE&PUSH 0)                   ; X
76    (CONST&PUSH 4)                      ; 1
77    (LOAD 2)
78    (CONS)
79    (CONS)
80    (JMP L130)
82    L82
82    (LOAD&PUSH 5)
83    (GETVALUE&PUSH 3)                   ; K
85    (CALLSR&STORE 2 53 5)               ; +
89    (GETVALUE&PUSH 3)                   ; K
91    (CONST&PUSH 1)                      ; 2
92    (CALLSR&JMPIF 1 45 L71)             ; =
96    (CONST 1)                           ; 2
97    L97
97    (SETVALUE 3)                        ; K
99    (GETVALUE 9)                        ; $INTFACLIM
101   (JMPIFNOT L110)
103   L103
103   (LOAD&PUSH 5)
104   (GETVALUE&PUSH 9)                   ; $INTFACLIM
106   (CALLSR&JMPIF 1 48 L122)            ; >
110   L110
110   (LOAD&PUSH 5)
111   (LOAD&PUSH 6)
112   (CALLSR&PUSH 2 55)                  ; *
115   (GETVALUE&PUSH 0)                   ; X
117   (CALLSR&JMPIFNOT 1 48 L9)           ; >
122   L122
122   (GETVALUE&PUSH 0)                   ; X
124   (CONST&PUSH 4)                      ; 1
125   (CALLSR&JMPIF 1 48 L74)             ; >
129   (LOAD 0)
130   L130
130   (SKIP 1)
132   (UNBIND1)
133   (SKIP 2)
135   (UNBIND1)
136   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN LISTOVARS (Q) ...)-15|
(CONST 0) = LISTOVARS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISTOVARS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISTOVARS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISTOVARS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISTOVARS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LISTOVARS
8     (SKIP&RET 1)


Disassembly of function LISTOVARS
(CONST 0) = ANS
(CONST 1) = LISTOVARS0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L12)
3     (NIL)
4     (BIND 0)                            ; ANS
6     (LOAD&PUSH 4)
7     (CALL1 1)                           ; LISTOVARS0
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (NIL)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LISTOVARS0 (Q) ...)-16|
(CONST 0) = LISTOVARS0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISTOVARS0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISTOVARS0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISTOVARS0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISTOVARS0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LISTOVARS0
8     (SKIP&RET 1)


Disassembly of function LISTOVARS0
(CONST 0) = ANS
(CONST 1) = MEMQ
(CONST 2) = LISTOVARS1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ANS)
writes special variable : (ANS)
16 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L23)
3     (LOAD&CAR&PUSH 1)
5     (GETVALUE&PUSH 0)                   ; ANS
7     (CALL2&JMPIF 1 L17)                 ; MEMQ
10    (LOAD&CAR&PUSH 1)
12    (GETVALUE 0)                        ; ANS
14    (CONS)
15    (SETVALUE 0)                        ; ANS
17    L17
17    (LOAD&CDR&PUSH 1)
19    (CALL1 2)                           ; LISTOVARS1
21    (SKIP&RET 2)
23    L23
23    (GETVALUE 0)                        ; ANS
25    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LISTOVARS1 (QL) ...)-17|
(CONST 0) = LISTOVARS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LISTOVARS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LISTOVARS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LISTOVARS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LISTOVARS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LISTOVARS1
8     (SKIP&RET 1)


Disassembly of function LISTOVARS1
(CONST 0) = ANS
(CONST 1) = LISTOVARS0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ANS)
15 byte-code instructions:
0     (LOAD&JMPIF 1 L10)
3     L3
3     (GETVALUE 0)                        ; ANS
5     (SKIP&RET 2)
7     L7
7     (LOAD&JMPIFNOT 1 L3)
10    L10
10    (LOAD 1)
11    (CDR)
12    (CAR&PUSH)
13    (CALL1 1)                           ; LISTOVARS0
15    (LOAD 1)
16    (CDR)
17    (CDR&PUSH)
18    (JMPTAIL 1 3 L7)


Disassembly of function #:|(DEFUN DONTFACTOR (Y) ...)-18|
(CONST 0) = DONTFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DONTFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DONTFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DONTFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DONTFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DONTFACTOR
8     (SKIP&RET 1)


Disassembly of function DONTFACTOR
(CONST 0) = Y
(CONST 1) = $DONTFACTOR
(CONST 2) = ((MLIST))
(CONST 3) = (1 1)
(CONST 4) = PDIS
(CONST 5) = MEMALIKE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y $DONTFACTOR)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Y
3     (GETVALUE 1)                        ; $DONTFACTOR
5     (JMPIFNOT L28)
7     (GETVALUE&PUSH 1)                   ; $DONTFACTOR
9     (CONST&PUSH 2)                      ; ((MLIST))
10    (CALLS2&JMPIF 2 L28)                ; EQUAL
13    (GETVALUE&PUSH 0)                   ; Y
15    (CONST 3)                           ; (1 1)
16    (CONS&PUSH)
17    (CALL1&PUSH 4)                      ; PDIS
19    (GETVALUE&PUSH 1)                   ; $DONTFACTOR
21    (CALL2&JMPIF 5 L31)                 ; MEMALIKE
24    (NIL)
25    L25
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (NIL)
29    (JMP L25)
31    L31
31    (T)
32    (JMP L25)


Disassembly of function #:|(DEFUN REMOVEALG (L) ...)-19|
(CONST 0) = REMOVEALG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMOVEALG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMOVEALG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMOVEALG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMOVEALG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMOVEALG
8     (SKIP&RET 1)


Disassembly of function REMOVEALG
(CONST 0) = L
(CONST 1) = VAR
(CONST 2) = $ALGEBRAIC
(CONST 3) = TELLRAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR $ALGEBRAIC L)
writes special variable : (VAR)
42 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; L
8     (PUSH-NIL 2)
10    (LOAD&JMPIFNOT 2 L46)
13    L13
13    (LOAD&CAR&PUSH 2)
15    (LOAD 0)
16    (SETVALUE 1)                        ; VAR
18    (SKIP 1)
20    (GETVALUE 2)                        ; $ALGEBRAIC
22    (JMPIFNOT L32)
24    (GETVALUE&PUSH 1)                   ; VAR
26    (CONST&PUSH 3)                      ; TELLRAT
27    (PUSH-UNBOUND 1)
29    (CALLS2&JMPIF 132 L41)              ; GET
32    L32
32    (LOAD&JMPIF 0 L53)
35    (GETVALUE&PUSH 1)                   ; VAR
37    (NIL)
38    (CONS)
39    (STORE 0)
40    (STORE 1)
41    L41
41    (LOAD&CDR&STORE 2)
43    (LOAD&JMPIF 2 L13)
46    L46
46    (LOAD 1)
47    (SKIP 3)
49    (UNBIND 2)
51    (SKIP&RET 2)
53    L53
53    (PUSH)
54    (GETVALUE&PUSH 1)                   ; VAR
56    (NIL)
57    (CONS)
58    (STORE 1)
59    (PUSH)
60    (CALLS1 171)                        ; SYSTEM::%RPLACD
62    (JMP L41)


Disassembly of function #:|(DEFUN DEGVECDISREP (DEGL) ...)-20|
(CONST 0) = DEGVECDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEGVECDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEGVECDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEGVECDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEGVECDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEGVECDISREP
8     (SKIP&RET 1)


Disassembly of function DEGVECDISREP
(CONST 0) = L
(CONST 1) = GENVAR
(CONST 2) = 1
(CONST 3) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L GENVAR)
writes special variable : (L)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 1)                   ; GENVAR
5     (CONST&PUSH 2)                      ; 1
6     (GETVALUE 0)                        ; L
8     (JMPIFNOT L39)
10    L10
10    (GETVALUE 0)                        ; L
12    (CAR&PUSH)
13    (CONST&PUSH 3)                      ; 0
14    (CALLSR&JMPIFNOT 1 48 L27)          ; >
18    (LOAD&CAR&PUSH 1)
20    (GETVALUE 0)                        ; L
22    (CAR&PUSH)
23    (LOAD&PUSH 2)
24    (LIST 3)
26    (STORE 0)
27    L27
27    (GETVALUE 0)                        ; L
29    (CDR&PUSH)
30    (LOAD&CDR&STORE 2)
32    (POP)
33    (SETVALUE 0)                        ; L
35    (GETVALUE 0)                        ; L
37    (JMPIF L10)
39    L39
39    (POP)
40    (SKIP 1)
42    (UNBIND1)
43    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PTERMCONT (P) ...)-21|
(CONST 0) = PTERMCONT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PTERMCONT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PTERMCONT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PTERMCONT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PTERMCONT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PTERMCONT
8     (SKIP&RET 1)


Disassembly of function PTERMCONT
(CONST 0) = P
(CONST 1) = PMINDEGVEC
(CONST 2) = DEGVECDISREP
(CONST 3) = $ALGEBRAIC
(CONST 4) = PQUOTIENT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALL1&PUSH 1)                      ; PMINDEGVEC
7     (CALL1&PUSH 2)                      ; DEGVECDISREP
9     (NIL)
10    (BIND 3)                            ; $ALGEBRAIC
12    (LOAD&PUSH 3)
13    (GETVALUE&PUSH 0)                   ; P
15    (LOAD&PUSH 5)
16    (CALL2&PUSH 4)                      ; PQUOTIENT
18    (LIST 2)
20    (UNBIND1)
21    (SKIP 1)
23    (UNBIND1)
24    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PMINDEGVEC (P) ...)-22|
(CONST 0) = PMINDEGVEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PMINDEGVEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PMINDEGVEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PMINDEGVEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PMINDEGVEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PMINDEGVEC
8     (SKIP&RET 1)


Disassembly of function PMINDEGVEC
(CONST 0) = P
(CONST 1) = GENVAR
(CONST 2) = PUTODR
(CONST 3) = NN*
(CONST 4) = *MIN*
(CONST 5) = *ODR*
(CONST 6) = 1
(CONST 7) = DEGVECTOR
(CONST 8) = MINLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P GENVAR)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 1)                   ; GENVAR
5     (CALLS2&PUSH 72)                    ; REVERSE
7     (CALL1&PUSH 2)                      ; PUTODR
9     (GETVALUE&PUSH 1)                   ; GENVAR
11    (CALLS2&PUSH 71)                    ; LENGTH
13    (CALLS2 150)                        ; 1+
15    (BIND 3)                            ; NN*
17    (T)
18    (BIND 4)                            ; *MIN*
20    (LOAD 6)
21    (BIND 5)                            ; *ODR*
23    (NIL&PUSH)
24    (CONST&PUSH 6)                      ; 1
25    (GETVALUE&PUSH 0)                   ; P
27    (CALL 3 7)                          ; DEGVECTOR
30    (UNBIND 3)
32    (STORE 0)
33    (CALL1 8)                           ; MINLIST
35    (UNBIND1)
36    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PDEGREEVECTOR (P) ...)-23|
(CONST 0) = PDEGREEVECTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDEGREEVECTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDEGREEVECTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDEGREEVECTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDEGREEVECTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDEGREEVECTOR
8     (SKIP&RET 1)


Disassembly of function PDEGREEVECTOR
(CONST 0) = P
(CONST 1) = GENVAR
(CONST 2) = PUTODR
(CONST 3) = NN*
(CONST 4) = *MX*
(CONST 5) = *ODR*
(CONST 6) = 1
(CONST 7) = DEGVECTOR
(CONST 8) = MAXLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P GENVAR)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 1)                   ; GENVAR
5     (CALLS2&PUSH 72)                    ; REVERSE
7     (CALL1&PUSH 2)                      ; PUTODR
9     (GETVALUE&PUSH 1)                   ; GENVAR
11    (CALLS2&PUSH 71)                    ; LENGTH
13    (CALLS2 150)                        ; 1+
15    (BIND 3)                            ; NN*
17    (T)
18    (BIND 4)                            ; *MX*
20    (LOAD 6)
21    (BIND 5)                            ; *ODR*
23    (NIL&PUSH)
24    (CONST&PUSH 6)                      ; 1
25    (GETVALUE&PUSH 0)                   ; P
27    (CALL 3 7)                          ; DEGVECTOR
30    (UNBIND 3)
32    (STORE 0)
33    (CALL1 8)                           ; MAXLIST
35    (UNBIND1)
36    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MAXLIST (L) ...)-24|
(CONST 0) = MAXLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXLIST
8     (SKIP&RET 1)


Disassembly of function MAXLIST
(CONST 0) = L
(CONST 1) = MAXMINL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (T&PUSH)
6     (CALL2 1)                           ; MAXMINL
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN MINLIST (L) ...)-25|
(CONST 0) = MINLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MINLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MINLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MINLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MINLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MINLIST
8     (SKIP&RET 1)


Disassembly of function MINLIST
(CONST 0) = L
(CONST 1) = MAXMINL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (NIL&PUSH)
6     (CALL2 1)                           ; MAXMINL
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN MAXMINL (L SWITCH) ...)-26|
(CONST 0) = MAXMINL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXMINL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXMINL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXMINL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXMINL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXMINL
8     (SKIP&RET 1)


Disassembly of function MAXMINL
(CONST 0) = L
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
40 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (CAR&PUSH)
6     (CALLS1&PUSH 158)                   ; COPY-LIST
8     (GETVALUE 0)                        ; L
10    (CDR&PUSH)
11    (LOAD&JMPIFNOT 0 L52)
14    L14
14    (LOAD&PUSH 1)
15    (LOAD&CAR&PUSH 1)
17    (LOAD&JMPIFNOT 1 L45)
20    L20
20    (LOAD&JMPIF 8 L58)
23    (LOAD&CAR&PUSH 0)
25    (LOAD&CAR&PUSH 2)
27    (CALLSR&JMPIFNOT 1 47 L36)          ; <
31    L31
31    (LOAD&PUSH 1)
32    (LOAD&CAR&PUSH 1)
34    (CALLS1 168)                        ; RPLACA
36    L36
36    (LOAD&CDR&PUSH 1)
38    (LOAD&CDR&STORE 1)
40    (POP&STORE 1)
42    (LOAD&JMPIF 1 L20)
45    L45
45    (SKIP 2)
47    (LOAD&CDR&STORE 0)
49    (LOAD&JMPIF 0 L14)
52    L52
52    (LOAD 1)
53    (SKIP 2)
55    (UNBIND1)
56    (SKIP&RET 3)
58    L58
58    (LOAD&CAR&PUSH 0)
60    (LOAD&CAR&PUSH 2)
62    (CALLSR&JMPIFNOT 1 48 L36)          ; >
66    (JMP L31)


Disassembly of function #:|(DEFUN NZEROS (N L) ...)-27|
(CONST 0) = NZEROS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NZEROS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NZEROS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NZEROS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NZEROS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NZEROS
8     (SKIP&RET 1)


Disassembly of function NZEROS
(CONST 0) = L
(CONST 1) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (LOAD&PUSH 5)
4     (GETVALUE 0)                        ; L
6     (BIND 0)                            ; L
8     (JMP L18)
10    L10
10    (LOAD&DEC&STORE 3)
12    (CONST&PUSH 1)                      ; 0
13    (GETVALUE 0)                        ; L
15    (CONS)
16    (SETVALUE 0)                        ; L
18    L18
18    (CONST&PUSH 1)                      ; 0
19    (LOAD&PUSH 4)
20    (CALLSR&JMPIFNOT 1 45 L10)          ; =
24    (GETVALUE 0)                        ; L
26    (UNBIND1)
27    (SKIP 1)
29    (UNBIND1)
30    (SKIP&RET 3)


Disassembly of function #:|(DEFUN QUICK-SQFR-CHECK (P VAR) ...)-28|
(CONST 0) = QUICK-SQFR-CHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE QUICK-SQFR-CHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; QUICK-SQFR-CHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; QUICK-SQFR-CHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE QUICK-SQFR-CHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; QUICK-SQFR-CHECK
8     (SKIP&RET 1)


Disassembly of function QUICK-SQFR-CHECK
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = LISTOVARS
(CONST 3) = ZL-DELETE
(CONST 4) = MODULUS
(CONST 5) = *ALPHA
(CONST 6) = L
(CONST 7) = $ALGEBRAIC
(CONST 8) = REMOVEALG
(CONST 9) = RAND
(CONST 10) = PMOD
(CONST 11) = PCSUBSTY
(CONST 12) = X
(CONST 13) = FIXNUMP
(CONST 14) = PDERIVATIVE
(CONST 15) = PGCD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L X $ALGEBRAIC *ALPHA MODULUS P VAR)
writes special variable : (L)
84 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 1)                   ; VAR
8     (GETVALUE&PUSH 0)                   ; P
10    (CALL1&PUSH 2)                      ; LISTOVARS
12    (CALL2&PUSH 3)                      ; ZL-DELETE
14    (GETVALUE 4)                        ; MODULUS
16    (JMPIF L20)
18    (GETVALUE 5)                        ; *ALPHA
20    L20
20    (BIND 4)                            ; MODULUS
22    (NIL)
23    (BIND 6)                            ; L
25    (NIL&PUSH)
26    (GETVALUE 7)                        ; $ALGEBRAIC
28    (JMPIF L125)
31    (LOAD 7)
32    (JMPIFNOT1 L115)
35    L35
35    (PUSH)
36    (CALLS2&PUSH 71)                    ; LENGTH
38    (GETVALUE&PUSH 4)                   ; MODULUS
40    (CALL2 9)                           ; RAND
42    (SETVALUE 6)                        ; L
44    (PUSH)
45    (LOAD&PUSH 8)
46    (GETVALUE 0)                        ; P
48    (CDR)
49    (CDR)
50    (CAR&PUSH)
51    (CALL1&PUSH 10)                     ; PMOD
53    (CALL 3 11)                         ; PCSUBSTY
56    (BIND 12)                           ; X
58    (GETVALUE&PUSH 12)                  ; X
60    (CALL1&JMPIF 13 L73)                ; FIXNUMP
63    (GETVALUE 12)                       ; X
65    (JMPIFCONSP L135)
68    (GETVALUE&PUSH 12)                  ; X
70    (CALLS2&JMPIFNOT 15 L77)            ; FLOATP
73    L73
73    (GETVALUE&PUSH 12)                  ; X
75    (CALLS2 145)                        ; ZEROP
77    L77
77    (UNBIND1)
78    (NOT)
79    (JMPIFNOT1 L115)
81    (GETVALUE&PUSH 6)                   ; L
83    (LOAD&PUSH 8)
84    (GETVALUE&PUSH 0)                   ; P
86    (CALL1&PUSH 10)                     ; PMOD
88    (CALL 3 11)                         ; PCSUBSTY
91    (STORE 0)
92    (PUSH)
93    (CALLS2 4)                          ; CONSP
95    (JMPIFNOT1 L115)
97    (LOAD&PUSH 0)
98    (LOAD&PUSH 1)
99    (LOAD&CAR&PUSH 2)
101   (CALL2&PUSH 14)                     ; PDERIVATIVE
103   (CALL2&PUSH 15)                     ; PGCD
105   (CALLS2 5)                          ; ATOM
107   (JMPIFNOT1 L115)
109   (GETVALUE&PUSH 6)                   ; L
111   (LOAD&PUSH 8)
112   (LOAD&PUSH 2)
113   (LIST 3)
115   L115
115   (SKIP 1)
117   (UNBIND 2)
119   (SKIP 1)
121   (UNBIND 2)
123   (SKIP&RET 3)
125   L125
125   (LOAD&PUSH 7)
126   (CALL1 8)                           ; REMOVEALG
128   (STORE 7)
129   (LOAD 7)
130   (JMPIFNOT1 L115)
132   (JMP L35)
135   L135
135   (NIL)
136   (JMP L77)


Disassembly of function #:|(DEFUN MONOM->FACL (P) ...)-29|
(CONST 0) = MONOM->FACL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MONOM->FACL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MONOM->FACL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MONOM->FACL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MONOM->FACL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MONOM->FACL
8     (SKIP&RET 1)


Disassembly of function MONOM->FACL
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = PGET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
30 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L31)
7     (GETVALUE 0)                        ; P
9     (CAR&PUSH)
10    (CALL1&PUSH 2)                      ; PGET
12    (GETVALUE 0)                        ; P
14    (CDR)
15    (CAR&PUSH)
16    (GETVALUE 0)                        ; P
18    (CDR)
19    (CDR)
20    (CAR&PUSH)
21    (JSR L0)
23    (LIST* 2)
25    L25
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (NIL)
29    (JMP L25)
31    L31
31    (GETVALUE&PUSH 0)                   ; P
33    (JMPIFEQTO 1 L28)                   ; 1
36    (GETVALUE&PUSH 0)                   ; P
38    (CONST&PUSH 1)                      ; 1
39    (LIST 2)
41    (JMP L25)


Disassembly of function #:|(DEFUN PSQFR (P) ...)-30|
(CONST 0) = PSQFR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSQFR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSQFR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSQFR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSQFR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSQFR
8     (SKIP&RET 1)


Disassembly of function PSQFR
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = CFACTOR
(CONST 3) = PMINUSP
(CONST 4) = -1
(CONST 5) = 1
(CONST 6) = PMINUS
(CONST 7) = PTERMCONT
(CONST 8) = MONOM->FACL
(CONST 9) = LISTOVARS
(CONST 10) = POINTERGP
(CONST 11) = 0
(CONST 12) = B
(CONST 13) = DONTFACTOR
(CONST 14) = QUICK-SQFR-CHECK
(CONST 15) = OLDCONTENT
(CONST 16) = PDERIVATIVE
(CONST 17) = X
(CONST 18) = FIXNUMP
(CONST 19) = MODULUS
(CONST 20) = PMONICIZE
(CONST 21) = PGCDCOFACTS
(CONST 22) = ALGFAC*
(CONST 23) = ADN*
(CONST 24) = PTIMES
(CONST 25) = PMODROOT
(CONST 26) = FIXMULT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ADN* ALGFAC* X MODULUS B VAR P)
writes special variables : (ADN* VAR P)
234 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (PUSH-NIL 2)
5     (NIL)
6     (BIND 1)                            ; VAR
8     (PUSH-NIL 2)
10    (GETVALUE 0)                        ; P
12    (JMPIFATOM L170)
15    (GETVALUE&PUSH 0)                   ; P
17    (CALL1&JMPIF 3 L176)                ; PMINUSP
21    (GETVALUE&PUSH 0)                   ; P
23    (CALL1 7)                           ; PTERMCONT
25    (SETVALUE 0)                        ; P
27    (CAR)
28    (STORE 0)
29    (GETVALUE 0)                        ; P
31    (CDR)
32    (CAR)
33    (SETVALUE 0)                        ; P
35    (LOAD&PUSH 0)
36    (CALL1 8)                           ; MONOM->FACL
38    (STORE 0)
39    (GETVALUE 0)                        ; P
41    (JMPIFATOM L145)
44    (GETVALUE&PUSH 0)                   ; P
46    (CALL1&PUSH 9)                      ; LISTOVARS
48    (CONST&PUSH 10)                     ; POINTERGP
49    (PUSH-UNBOUND 3)
51    (CALLS2&STORE 103 5)                ; SORT
54    L54
54    (LOAD 5)
55    (CAR)
56    (SETVALUE 1)                        ; VAR
58    (LOAD&CDR&STORE 5)
60    (CONST 11)                          ; 0
61    (STORE 1)
62    (GETVALUE&PUSH 1)                   ; VAR
64    (GETVALUE 0)                        ; P
66    (CAR)
67    (BIND 12)                           ; B
69    (LOAD&PUSH 3)
70    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
72    (GETVALUE&PUSH 12)                  ; B
74    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
76    (CALLSR 1 48)                       ; >
79    (UNBIND1)
80    (SKIP 1)
82    (JMPIF L114)
84    (GETVALUE&PUSH 1)                   ; VAR
86    (CALL1&JMPIF 13 L194)               ; DONTFACTOR
90    (GETVALUE&PUSH 0)                   ; P
92    (GETVALUE&PUSH 1)                   ; VAR
94    (CALL2&JMPIFNOT 14 L213)            ; QUICK-SQFR-CHECK
98    (GETVALUE&PUSH 0)                   ; P
100   (CALL1 15)                          ; OLDCONTENT
102   (STORE 6)
103   (CAR)
104   (SETVALUE 0)                        ; P
106   (LOAD 6)
107   (CDR)
108   (CAR&PUSH)
109   (CONST&PUSH 5)                      ; 1
110   (LOAD 2)
111   (CONS)
112   (CONS)
113   (STORE 0)
114   L114
114   (GETVALUE 0)                        ; P
116   (JMPIFATOM L145)
118   (LOAD&JMPIF 5 L54)
122   (GETVALUE 19)                       ; MODULUS
124   (JMPIFNOT L145)
126   (GETVALUE&PUSH 0)                   ; P
128   (CALL1&PUSH 25)                     ; PMODROOT
130   (JSR&PUSH L0)
133   (GETVALUE&PUSH 19)                  ; MODULUS
135   (CALL2&PUSH 26)                     ; FIXMULT
137   (LOAD&PUSH 1)
138   (CALLSR&STORE 2 34 0)               ; APPEND
142   (CONST 5)                           ; 1
143   (SETVALUE 0)                        ; P
145   L145
145   (GETVALUE&PUSH 0)                   ; P
147   (JMPIFEQTO 5 L358)                  ; 1
151   (GETVALUE&PUSH 0)                   ; P
153   (CALL1 2)                           ; CFACTOR
155   L155
155   (SETVALUE 0)                        ; P
157   (PUSH)
158   (LOAD&PUSH 1)
159   (CALLSR 2 34)                       ; APPEND
162   L162
162   (SKIP 2)
164   (UNBIND1)
165   (SKIP 2)
167   L167
167   (UNBIND1)
168   (SKIP&RET 2)
170   L170
170   (GETVALUE&PUSH 0)                   ; P
172   (CALL1 2)                           ; CFACTOR
174   (JMP L162)
176   L176
176   (CONST&PUSH 4)                      ; -1
177   (CONST&PUSH 5)                      ; 1
178   (GETVALUE&PUSH 0)                   ; P
180   (CALL1&PUSH 6)                      ; PMINUS
182   (JSR L0)
185   (CONS)
186   (CONS)
187   (SKIP 2)
189   (UNBIND1)
190   (SKIP 2)
192   (JMP L167)
194   L194
194   (GETVALUE&PUSH 0)                   ; P
196   (CONST&PUSH 5)                      ; 1
197   (LOAD 2)
198   (CONS)
199   (CONS)
200   (STORE 0)
201   (CONST 5)                           ; 1
202   (SETVALUE 0)                        ; P
204   (JMP L145)
206   L206
206   (UNBIND1)
207   (GETVALUE 19)                       ; MODULUS
209   (JMPIFNOT L261)
211   (JMP L254)
213   L213
213   (GETVALUE&PUSH 0)                   ; P
215   (GETVALUE&PUSH 1)                   ; VAR
217   (CALL2 16)                          ; PDERIVATIVE
219   (STORE 6)
220   (BIND 17)                           ; X
222   (GETVALUE&PUSH 17)                  ; X
224   (CALL1&JMPIF 18 L236)               ; FIXNUMP
227   (GETVALUE 17)                       ; X
229   (JMPIFCONSP L206)
231   (GETVALUE&PUSH 17)                  ; X
233   (CALLS2&JMPIFNOT 15 L246)           ; FLOATP
236   L236
236   (GETVALUE&PUSH 17)                  ; X
238   (CALLS2 145)                        ; ZEROP
240   (UNBIND1)
241   (JMPIFNOT L250)
243   (JMP L114)
246   L246
246   (UNBIND1)
247   (JMPIF L114)
250   L250
250   (GETVALUE 19)                       ; MODULUS
252   (JMPIFNOT L261)
254   L254
254   (LOAD 6)
255   (JMPIFATOM L261)
257   (LOAD&CDR&PUSH 6)
259   (CALL1 20)                          ; PMONICIZE
261   L261
261   (GETVALUE&PUSH 0)                   ; P
263   (LOAD&PUSH 7)
264   (CALL2 21)                          ; PGCDCOFACTS
266   (SETVALUE 0)                        ; P
268   (GETVALUE 22)                       ; ALGFAC*
270   (JMPIFNOT L292)
272   (GETVALUE 0)                        ; P
274   (CDR)
275   (CDR)
276   (CDR)
277   (CAR)
278   (JMPIFNOT L292)
280   (GETVALUE&PUSH 23)                  ; ADN*
282   (GETVALUE 0)                        ; P
284   (CDR)
285   (CDR)
286   (CDR)
287   (CAR&PUSH)
288   (CALL2 24)                          ; PTIMES
290   (SETVALUE 23)                       ; ADN*
292   L292
292   (GETVALUE 0)                        ; P
294   (CDR)
295   (CAR)
296   (STORE 6)
297   (GETVALUE 0)                        ; P
299   (CAR)
300   (SETVALUE 0)                        ; P
302   L302
302   (LOAD&PUSH 6)
303   (GETVALUE&PUSH 0)                   ; P
305   (CALL2 21)                          ; PGCDCOFACTS
307   (STORE 6)
308   (CDR)
309   (CDR)
310   (CAR)
311   (SETVALUE 0)                        ; P
313   (LOAD&INC&STORE 1)
315   (GETVALUE 22)                       ; ALGFAC*
317   (JMPIFNOT L337)
319   (LOAD 6)
320   (CDR)
321   (CDR)
322   (CDR)
323   (CAR)
324   (JMPIFNOT L337)
326   (GETVALUE&PUSH 23)                  ; ADN*
328   (LOAD 7)
329   (CDR)
330   (CDR)
331   (CDR)
332   (CAR&PUSH)
333   (CALL2 24)                          ; PTIMES
335   (SETVALUE 23)                       ; ADN*
337   L337
337   (LOAD 6)
338   (CDR)
339   (CAR)
340   (JMPIFATOM L350)
342   (LOAD 6)
343   (CDR)
344   (CAR&PUSH)
345   (LOAD&PUSH 2)
346   (LOAD 2)
347   (CONS)
348   (CONS)
349   (STORE 0)
350   L350
350   (LOAD&CAR&STORE 6 6)
353   (JMPIFATOM L114)
356   (JMP L302)
358   L358
358   (NIL)
359   (JMP L155)


Disassembly of function #:|(DEFUN FIXMULT (L N) ...)-31|
(CONST 0) = FIXMULT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXMULT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXMULT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXMULT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXMULT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXMULT
8     (SKIP&RET 1)


Disassembly of function FIXMULT
(CONST 0) = L
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
26 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (BIND 0)                            ; L
7     (GETVALUE 0)                        ; L
9     (JMPIFNOT L34)
11    L11
11    (GETVALUE 0)                        ; L
13    (CDR&PUSH)
14    (LOAD&PUSH 8)
15    (GETVALUE 0)                        ; L
17    (CDR)
18    (CAR&PUSH)
19    (CALLSR&PUSH 2 55)                  ; *
22    (CALLS1 168)                        ; RPLACA
24    (GETVALUE 0)                        ; L
26    (CDR)
27    (CDR)
28    (SETVALUE 0)                        ; L
30    (GETVALUE 0)                        ; L
32    (JMPIF L11)
34    L34
34    (UNBIND1)
35    (GETVALUE 0)                        ; L
37    (UNBIND1)
38    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PMODROOT (P) ...)-32|
(CONST 0) = PMODROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PMODROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PMODROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PMODROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PMODROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PMODROOT
8     (SKIP&RET 1)


Disassembly of function PMODROOT
(CONST 0) = P
(CONST 1) = ALG
(CONST 2) = MODULUS
(CONST 3) = PEXPT
(CONST 4) = PMODROOT1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODULUS P)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L24)
7     (GETVALUE&PUSH 0)                   ; P
9     (CALL1&JMPIF 1 L28)                 ; ALG
12    (GETVALUE 0)                        ; P
14    (CAR&PUSH)
15    (GETVALUE 0)                        ; P
17    (CDR&PUSH)
18    (CALL1 4)                           ; PMODROOT1
20    (CONS)
21    L21
21    (UNBIND1)
22    (SKIP&RET 2)
24    L24
24    (GETVALUE 0)                        ; P
26    (JMP L21)
28    L28
28    (GETVALUE&PUSH 0)                   ; P
30    (GETVALUE&PUSH 2)                   ; MODULUS
32    (GETVALUE&PUSH 0)                   ; P
34    (CALL1 1)                           ; ALG
36    (CAR&PUSH)
37    (CALLS2&PUSH 151)                   ; 1-
39    (CALLS2&PUSH 154)                   ; EXPT
41    (CALL2 3)                           ; PEXPT
43    (JMP L21)


Disassembly of function #:|(DEFUN PMODROOT1 (X) ...)-33|
(CONST 0) = PMODROOT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PMODROOT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PMODROOT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PMODROOT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PMODROOT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PMODROOT1
8     (SKIP&RET 1)


Disassembly of function PMODROOT1
(CONST 0) = X
(CONST 1) = MODULUS
(CONST 2) = QUOT
(CONST 3) = PMODROOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODULUS X)
25 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFNOT L31)
7     (GETVALUE 0)                        ; X
9     (CAR&PUSH)
10    (GETVALUE&PUSH 1)                   ; MODULUS
12    (CALL2&PUSH 2)                      ; QUOT
14    (GETVALUE 0)                        ; X
16    (CDR)
17    (CAR&PUSH)
18    (CALL1&PUSH 3)                      ; PMODROOT
20    (GETVALUE 0)                        ; X
22    (CDR)
23    (CDR&PUSH)
24    (JSR L0)
26    (CONS)
27    (CONS)
28    L28
28    (UNBIND1)
29    (SKIP&RET 2)
31    L31
31    (GETVALUE 0)                        ; X
33    (JMP L28)


Disassembly of function #:|(DEFMVAR $SAVEFACTORS NIL ...)-34-1|
(CONST 0) = $SAVEFACTORS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SAVEFACTORS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SAVEFACTORS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SAVEFACTORS NIL ...)-34-2|
(CONST 0) = (SPECIAL $SAVEFACTORS)
(CONST 1) = $SAVEFACTORS
(CONST 2) = VARIABLE
(CONST 3) = "If t factors of ratreped forms will be saved"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SAVEFACTORS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SAVEFACTORS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SAVEFACTORS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $SAVEFACTORS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If t factors of ratreped forms will be saved"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $SAVEFACTORS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR CHECKFACTORS NIL ...)-35|
(CONST 0) = (SPECIAL CHECKFACTORS)
(CONST 1) = CHECKFACTORS
(CONST 2) = VARIABLE
(CONST 3) = "List of saved factors"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL CHECKFACTORS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; CHECKFACTORS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; CHECKFACTORS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; CHECKFACTORS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "List of saved factors"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; CHECKFACTORS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SAVEFACTORS (L) ...)-36|
(CONST 0) = SAVEFACTORS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SAVEFACTORS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SAVEFACTORS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SAVEFACTORS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SAVEFACTORS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SAVEFACTORS
8     (SKIP&RET 1)


Disassembly of function SAVEFACTORS
(CONST 0) = L
(CONST 1) = $SAVEFACTORS
(CONST 2) = SAVEFACTOR1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L $SAVEFACTORS)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 1)                        ; $SAVEFACTORS
5     (JMPIF L12)
7     (GETVALUE 0)                        ; L
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (GETVALUE 0)                        ; L
14    (CAR&PUSH)
15    (CALL1 2)                           ; SAVEFACTOR1
17    (GETVALUE 0)                        ; L
19    (CDR&PUSH)
20    (CALL1 2)                           ; SAVEFACTOR1
22    (GETVALUE 0)                        ; L
24    (JMP L9)


Disassembly of function #:|(DEFUN SAVEFACTOR1 (P) ...)-37|
(CONST 0) = SAVEFACTOR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SAVEFACTOR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SAVEFACTOR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SAVEFACTOR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SAVEFACTOR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SAVEFACTOR1
8     (SKIP&RET 1)


Disassembly of function SAVEFACTOR1
(CONST 0) = P
(CONST 1) = CHECKFACTORS
(CONST 2) = ZL-MEMBER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (CHECKFACTORS P)
writes special variable : (CHECKFACTORS)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L31)
7     (GETVALUE 0)                        ; P
9     (CDR)
10    (CDR)
11    (CDR)
12    (JMPIFNOT L31)
14    (GETVALUE&PUSH 0)                   ; P
16    (GETVALUE&PUSH 1)                   ; CHECKFACTORS
18    (CALL2&JMPIF 2 L31)                 ; ZL-MEMBER
21    (GETVALUE&PUSH 0)                   ; P
23    (GETVALUE 1)                        ; CHECKFACTORS
25    (CONS)
26    (SETVALUE 1)                        ; CHECKFACTORS
28    L28
28    (UNBIND1)
29    (SKIP&RET 2)
31    L31
31    (NIL)
32    (JMP L28)


Disassembly of function #:|(DEFUN HEURTRIAL1 (POLY FACS) ...)-38|
(CONST 0) = HEURTRIAL1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HEURTRIAL1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HEURTRIAL1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HEURTRIAL1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HEURTRIAL1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HEURTRIAL1
8     (SKIP&RET 1)


Disassembly of function HEURTRIAL1
(CONST 0) = PDEGREEVECTOR
(CONST 1) = 1
(CONST 2) = ZL-MEMBER
(CONST 3) = 2
(CONST 4) = PGCD
(CONST 5) = PQUOTIENT
(CONST 6) = HEURTRIAL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
38 byte-code instructions:
0     L0
0     (PUSH-NIL 2)
2     (LOAD&PUSH 4)
3     (CALL1 0)                           ; PDEGREEVECTOR
5     (STORE 1)
6     (CONST&PUSH 1)                      ; 1
7     (LOAD&PUSH 2)
8     (CALL2&JMPIF 2 L19)                 ; ZL-MEMBER
11    (CONST&PUSH 3)                      ; 2
12    (LOAD&PUSH 2)
13    (CALL2&JMPIF 2 L19)                 ; ZL-MEMBER
16    (LOAD&JMPIF 3 L24)
19    L19
19    (LOAD&PUSH 4)
20    (LIST 1)
22    (SKIP&RET 5)
24    L24
24    (LOAD&PUSH 4)
25    (LOAD&CAR&PUSH 4)
27    (CALL2 4)                           ; PGCD
29    (STORE 1)
30    (JMPIFATOM L39)
32    (LOAD&PUSH 4)
33    (LOAD&PUSH 2)
34    (CALL2 5)                           ; PQUOTIENT
36    (STORE 0)
37    (JMPIFCONSP L46)
39    L39
39    (LOAD&PUSH 4)
40    (LOAD&CDR&PUSH 4)
42    (JMPTAIL 2 7 L0)
46    L46
46    (LOAD&PUSH 1)
47    (LOAD&PUSH 1)
48    (LIST&PUSH 2)
50    (LOAD&CDR&PUSH 4)
52    (CALL2 6)                           ; HEURTRIAL
54    (SKIP&RET 5)


Disassembly of function #:|(DEFUN HEURTRIAL (X FACS) ...)-39|
(CONST 0) = HEURTRIAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HEURTRIAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HEURTRIAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HEURTRIAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HEURTRIAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HEURTRIAL
8     (SKIP&RET 1)


Disassembly of function HEURTRIAL
(CONST 0) = X
(CONST 1) = HEURTRIAL1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFNOT L25)
7     (GETVALUE 0)                        ; X
9     (CAR&PUSH)
10    (LOAD&PUSH 5)
11    (CALL2&PUSH 1)                      ; HEURTRIAL1
13    (GETVALUE 0)                        ; X
15    (CDR&PUSH)
16    (LOAD&PUSH 6)
17    (JSR&PUSH L0)
19    (CALLSR 2 35)                       ; NCONC
22    L22
22    (UNBIND1)
23    (SKIP&RET 3)
25    L25
25    (NIL)
26    (JMP L22)


Disassembly of function #:|(DEFUN PFACTORQUAD (P) ...)-40|
(CONST 0) = PFACTORQUAD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PFACTORQUAD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PFACTORQUAD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PFACTORQUAD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PFACTORQUAD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PFACTORQUAD
8     (SKIP&RET 1)


Disassembly of function PFACTORQUAD
(CONST 0) = P
(CONST 1) = B
(CONST 2) = $DONTFACTOR
(CONST 3) = L
(CONST 4) = ONEVARP
(CONST 5) = MODULUS
(CONST 6) = 2
(CONST 7) = PDEGREEVECTOR
(CONST 8) = ZL-MEMBER
(CONST 9) = GENVAR
(CONST 10) = 1
(CONST 11) = BOTHPRODCOEF
(CONST 12) = PGCD
(CONST 13) = *IRREDS
(CONST 14) = PFACTOR1
(CONST 15) = PQUOTIENT
(CONST 16) = PEXPT
(CONST 17) = -4
(CONST 18) = PTIMES
(CONST 19) = PPLUS
(CONST 20) = PNTHROOTP
(CONST 21) = RATREDUCE
(CONST 22) = (1 1)
(CONST 23) = PABS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B *IRREDS GENVAR L MODULUS P)
writes special variables : (B *IRREDS L)
149 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; B
7     (PUSH-NIL 2)
9     (NIL)
10    (BIND 2)                            ; $DONTFACTOR
12    (NIL)
13    (BIND 3)                            ; L
15    (NIL&PUSH)
16    (GETVALUE&PUSH 0)                   ; P
18    (CALL1&JMPIF 4 L38)                 ; ONEVARP
21    (GETVALUE&PUSH 5)                   ; MODULUS
23    (JMPIFEQTO 6 L38)                   ; 2
26    (GETVALUE&PUSH 0)                   ; P
28    (CALL1 7)                           ; PDEGREEVECTOR
30    (SETVALUE 3)                        ; L
32    (CONST&PUSH 6)                      ; 2
33    (GETVALUE&PUSH 3)                   ; L
35    (CALL2&JMPIF 8 L54)                 ; ZL-MEMBER
38    L38
38    (GETVALUE&PUSH 0)                   ; P
40    (LIST 1)
42    (SKIP 1)
44    (UNBIND 2)
46    (SKIP 2)
48    (UNBIND1)
49    (SKIP 1)
51    (JMP L246)
54    L54
54    (GETVALUE&PUSH 3)                   ; L
56    (CALLS2 73)                         ; NREVERSE
58    (SETVALUE 3)                        ; L
60    (GETVALUE&PUSH 9)                   ; GENVAR
62    (CALLS2&STORE 72 0)                 ; REVERSE
65    (JMP L143)
68    L68
68    (GETVALUE&PUSH 13)                  ; *IRREDS
70    (LOAD&PUSH 8)
71    (CALL1&PUSH 14)                     ; PFACTOR1
73    (CALLSR 2 35)                       ; NCONC
76    (SETVALUE 13)                       ; *IRREDS
78    (GETVALUE&PUSH 0)                   ; P
80    (LOAD&PUSH 8)
81    (CALL2&PUSH 15)                     ; PQUOTIENT
83    (JSR L0)
86    (JMP L237)
89    L89
89    (GETVALUE&PUSH 1)                   ; B
91    (LOAD&PUSH 9)
92    (CALL2&PUSH 19)                     ; PPLUS
94    (CONST&PUSH 6)                      ; 2
95    (LOAD&PUSH 14)
96    (CALL2&PUSH 18)                     ; PTIMES
98    (CALL2 21)                          ; RATREDUCE
100   (STORE 7)
101   (LOAD&PUSH 0)
102   (CONST 22)                          ; (1 1)
104   (CONS&PUSH)
105   (LOAD&CDR&PUSH 8)
107   (CALL2&PUSH 18)                     ; PTIMES
109   (LOAD&CAR&PUSH 8)
111   (CALL2&PUSH 19)                     ; PPLUS
113   (CALL1 23)                          ; PABS
115   (STORE 7)
116   (GETVALUE&PUSH 13)                  ; *IRREDS
118   (LOAD&PUSH 8)
119   (GETVALUE&PUSH 0)                   ; P
121   (LOAD&PUSH 10)
122   (CALL2&PUSH 15)                     ; PQUOTIENT
124   (LIST 2)
126   (JMP L230)
129   L129
129   (GETVALUE&PUSH 0)                   ; P
131   (LIST 1)
133   (JMP L237)
136   L136
136   (GETVALUE 3)                        ; L
138   (CDR)
139   (SETVALUE 3)                        ; L
141   (LOAD&CDR&STORE 0)
143   L143
143   (GETVALUE 3)                        ; L
145   (CAR&PUSH)
146   (JMPIFNOTEQTO 6 L136)               ; 2
149   (LOAD&CAR&STORE 0 0)
152   (LOAD&PUSH 0)
153   (CONST&PUSH 6)                      ; 2
154   (CONST&PUSH 10)                     ; 1
155   (LIST&PUSH 3)
157   (GETVALUE&PUSH 0)                   ; P
159   (CALL2 11)                          ; BOTHPRODCOEF
161   (STORE 8)
163   (CAR)
164   (STORE 12)
166   (LOAD&CDR&STORE 8)
168   (LOAD&PUSH 0)
169   (CONST&PUSH 10)                     ; 1
170   (CONST&PUSH 10)                     ; 1
171   (LIST&PUSH 3)
173   (LOAD&PUSH 9)
174   (CALL2 11)                          ; BOTHPRODCOEF
176   (STORE 8)
178   (CAR)
179   (SETVALUE 1)                        ; B
181   (LOAD&CDR&STORE 8)
183   (LOAD&PUSH 12)
184   (GETVALUE&PUSH 1)                   ; B
186   (CALL2&PUSH 12)                     ; PGCD
188   (LOAD&PUSH 9)
189   (CALL2 12)                          ; PGCD
191   (STORE 7)
192   (JMPIFCONSP L68)
195   (GETVALUE&PUSH 1)                   ; B
197   (CONST&PUSH 6)                      ; 2
198   (CALL2&PUSH 16)                     ; PEXPT
200   (CONST&PUSH 17)                     ; -4
201   (LOAD&PUSH 14)
202   (LOAD&PUSH 11)
203   (CALL2&PUSH 18)                     ; PTIMES
205   (CALL2&PUSH 18)                     ; PTIMES
207   (CALL2 19)                          ; PPLUS
209   (STORE 7)
210   (PUSH)
211   (CONST&PUSH 6)                      ; 2
212   (CALL2 20)                          ; PNTHROOTP
214   (STORE 8)
216   (JMPIF L89)
219   (GETVALUE 5)                        ; MODULUS
221   (JMPIF L129)
224   (GETVALUE&PUSH 13)                  ; *IRREDS
226   (GETVALUE&PUSH 0)                   ; P
228   (LIST 1)
230   L230
230   (PUSH)
231   (CALLSR 2 35)                       ; NCONC
234   (SETVALUE 13)                       ; *IRREDS
236   (NIL)
237   L237
237   (SKIP 1)
239   (UNBIND 2)
241   (SKIP 2)
243   (UNBIND1)
244   (SKIP 1)
246   L246
246   (UNBIND1)
247   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ISQRT (X) ...)-41|
(CONST 0) = $ISQRT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ISQRT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ISQRT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ISQRT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ISQRT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ISQRT
8     (SKIP&RET 1)


Disassembly of function $ISQRT
(CONST 0) = X
(CONST 1) = 2
(CONST 2) = $INRT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 2
6     (CALL2 2)                           ; $INRT
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $INRT (X N) ...)-42|
(CONST 0) = $INRT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INRT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INRT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INRT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INRT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INRT
8     (SKIP&RET 1)


Disassembly of function $INRT
(CONST 0) = X
(CONST 1) = MRATCHECK
(CONST 2) = 2
(CONST 3) = ($ISQRT)
(CONST 4) = ($INRT)
(CONST 5) = ($INRT)
(CONST 6) = IROOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
43 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; MRATCHECK
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (CALLS2&JMPIFNOT 12 L42)            ; INTEGERP
13    (GETVALUE&PUSH 0)                   ; X
15    (CALLS2&JMPIF 145 L49)              ; ZEROP
18    (LOAD&PUSH 4)
19    (CALL1 1)                           ; MRATCHECK
21    (STORE 4)
22    (PUSH)
23    (CALLS2&JMPIF 12 L53)               ; INTEGERP
26    (CONST 5)                           ; ($INRT)
27    L27
27    (PUSH)
28    (GETVALUE&PUSH 0)                   ; X
30    (LOAD&PUSH 6)
31    (LIST 3)
33    (JMP L61)
35    L35
35    (CONST&PUSH 3)                      ; ($ISQRT)
36    (GETVALUE&PUSH 0)                   ; X
38    (LIST 2)
40    (JMP L61)
42    L42
42    (LOAD&PUSH 4)
43    (JMPIFEQTO 2 L35)                   ; 2
46    (CONST 4)                           ; ($INRT)
47    (JMP L27)
49    L49
49    (GETVALUE 0)                        ; X
51    (JMP L61)
53    L53
53    (GETVALUE&PUSH 0)                   ; X
55    (CALLS2&PUSH 158)                   ; ABS
57    (LOAD&PUSH 5)
58    (CALL2 6)                           ; IROOT
60    (CAR)
61    L61
61    (UNBIND1)
62    (SKIP&RET 3)


Disassembly of function #:|(DEFUN IROOT (A N) ...)-43|
(CONST 0) = IROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IROOT
8     (SKIP&RET 1)


Disassembly of function IROOT
(CONST 0) = HAULONG
(CONST 1) = 1
(CONST 2) = 2
(CONST 3) = QUOT
(CONST 4) = X
(CONST 5) = Y
(CONST 6) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variable : (X)
85 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&PUSH 0)                      ; HAULONG
3     (LOAD&PUSH 2)
4     (CALLSR&JMPIF 1 47 L105)            ; <
9     (CONST&PUSH 2)                      ; 2
10    (LOAD&PUSH 3)
11    (CALL1&PUSH 0)                      ; HAULONG
13    (LOAD&PUSH 3)
14    (CALL2&PUSH 3)                      ; QUOT
16    (CALLS2&PUSH 150)                   ; 1+
18    (CALLS2 154)                        ; EXPT
20    (BIND 4)                            ; X
22    (LOAD&DEC&PUSH 4)
24    (PUSH-NIL 2)
26    L26
26    (GETVALUE&PUSH 4)                   ; X
28    (LOAD&PUSH 9)
29    (GETVALUE&PUSH 4)                   ; X
31    (LOAD&PUSH 5)
32    (CALLS2&STORE 154 3)                ; EXPT
35    (BIND 5)                            ; Y
37    (LOAD 3)
38    (BIND 4)                            ; X
40    (GETVALUE&PUSH 4)                   ; X
42    (CALLS2&JMPIFNOT 12 L50)            ; INTEGERP
45    (GETVALUE&PUSH 5)                   ; Y
47    (CALLS2&JMPIF 12 L112)              ; INTEGERP
50    L50
50    (GETVALUE&PUSH 4)                   ; X
52    (GETVALUE&PUSH 5)                   ; Y
54    (CALLSR 1 56)                       ; /
57    L57
57    (UNBIND 2)
59    (SKIP 1)
61    (BIND 5)                            ; Y
63    (LOAD 3)
64    (BIND 4)                            ; X
66    (GETVALUE&PUSH 4)                   ; X
68    (GETVALUE&PUSH 5)                   ; Y
70    (CALLSR 1 54)                       ; -
73    (UNBIND 2)
75    (SKIP 1)
77    (STORE 0)
78    (PUSH)
79    (LOAD&PUSH 0)
80    (CALLS2&JMPIF 8 L120)               ; NUMBERP
83    (SKIP 1)
85    (JMPIF L129)
87    L87
87    (GETVALUE&PUSH 4)                   ; X
89    (LOAD&PUSH 3)
90    (LOAD&PUSH 2)
91    (CALLSR&PUSH 2 53)                  ; +
94    (LOAD&PUSH 9)
95    (CALL2&PUSH 3)                      ; QUOT
97    (CALLSR 1 54)                       ; -
100   (SETVALUE 4)                        ; X
102   (JMP L26)
105   L105
105   (CONST&PUSH 1)                      ; 1
106   (LOAD&DEC&PUSH 3)
108   (LIST 2)
110   (SKIP&RET 3)
112   L112
112   (GETVALUE&PUSH 4)                   ; X
114   (GETVALUE&PUSH 5)                   ; Y
116   (CALLS2 181)                        ; TRUNCATE
118   (JMP L57)
120   L120
120   (LOAD&PUSH 0)
121   (CONST&PUSH 6)                      ; 0
122   (CALLSR 1 49)                       ; <=
125   (SKIP 1)
127   (JMPIFNOT L87)
129   L129
129   (GETVALUE&PUSH 4)                   ; X
131   (LOAD&PUSH 9)
132   (GETVALUE&PUSH 4)                   ; X
134   (LOAD&PUSH 4)
135   (CALLSR&PUSH 2 55)                  ; *
138   (CALLSR&PUSH 1 54)                  ; -
141   (LIST 2)
143   (SKIP 3)
145   (UNBIND1)
146   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $NTHROOT (P N) ...)-44|
(CONST 0) = $NTHROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NTHROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NTHROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NTHROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NTHROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NTHROOT
8     (SKIP&RET 1)


Disassembly of function $NTHROOT
(CONST 0) = P
(CONST 1) = $RAT
(CONST 2) = PNTHROOTP
(CONST 3) = PDIS
(CONST 4) = "Not an nth power"
(CONST 5) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
19 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALL1 1)                           ; $RAT
7     (CDR)
8     (CAR&PUSH)
9     (LOAD&PUSH 5)
10    (CALL2 2)                           ; PNTHROOTP
12    (STORE 4)
13    (JMPIF L21)
15    (CONST&PUSH 4)                      ; "Not an nth power"
16    (CALL1 5)                           ; MERROR
18    L18
18    (UNBIND1)
19    (SKIP&RET 3)
21    L21
21    (PUSH)
22    (CALL1 3)                           ; PDIS
24    (JMP L18)


Disassembly of function #:|(DEFUN PNTHROOTP (P N) ...)-45|
(CONST 0) = PNTHROOTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PNTHROOTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PNTHROOTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PNTHROOTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PNTHROOTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PNTHROOTP
8     (SKIP&RET 1)


Disassembly of function PNTHROOTP
(CONST 0) = P
(CONST 1) = ERRRJFFLAG
(CONST 2) = RATERR
(CONST 3) = PNTHROOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
17 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (T)
4     (BIND 1)                            ; ERRRJFFLAG
6     (CONST 2)                           ; RATERR
7     (CATCH-OPEN L18)
9     (GETVALUE&PUSH 0)                   ; P
11    (LOAD&PUSH 11)
12    (CALL2 3)                           ; PNTHROOT
14    (CATCH-CLOSE)
15    (UNBIND1)
16    (JMP L19)
18    L18
18    (UNBIND1)
19    L19
19    (UNBIND1)
20    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PNTHROOT (POLY N) ...)-46|
(CONST 0) = PNTHROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PNTHROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PNTHROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PNTHROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PNTHROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PNTHROOT
8     (SKIP&RET 1)


Disassembly of function PNTHROOT
(CONST 0) = 1
(CONST 1) = CNTHROOT
(CONST 2) = VAR
(CONST 3) = CQUOTIENT
(CONST 4) = LEADTERM
(CONST 5) = PCTIMES
(CONST 6) = PQUOTIENT
(CONST 7) = PSIMP
(CONST 8) = P
(CONST 9) = X
(CONST 10) = FIXNUMP
(CONST 11) = RATERR
(CONST 12) = PQUOTIENT1
(CONST 13) = PEXPT
(CONST 14) = PDIFFERENCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P VAR)
writes special variable : (P)
99 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L78)                   ; 1
5     (LOAD 2)
6     (JMPIFATOM L81)
9     (LOAD 2)
10    (CAR)
11    (BIND 2)                            ; VAR
13    (GETVALUE&PUSH 2)                   ; VAR
15    (LOAD 6)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD&PUSH 6)
19    (CALL2&PUSH 3)                      ; CQUOTIENT
21    (LOAD 7)
22    (CDR)
23    (CDR)
24    (CAR&PUSH)
25    (LOAD&PUSH 7)
26    (JSR&PUSH L0)
28    (LIST&PUSH 3)
30    (LOAD&PUSH 5)
31    (LOAD&PUSH 7)
32    (CALL1&PUSH 4)                      ; LEADTERM
34    (CALL2&PUSH 5)                      ; PCTIMES
36    (LOAD&PUSH 1)
37    (CALL2 6)                           ; PQUOTIENT
39    (CDR&PUSH)
40    (GETVALUE&PUSH 2)                   ; VAR
42    (LOAD 8)
43    (CDR)
44    (CDR)
45    (CDR&PUSH)
46    (CALL2 7)                           ; PSIMP
48    (BIND 8)                            ; P
50    L50
50    (GETVALUE 8)                        ; P
52    (BIND 9)                            ; X
54    (GETVALUE&PUSH 9)                   ; X
56    (CALL1&JMPIF 10 L69)                ; FIXNUMP
59    (GETVALUE 9)                        ; X
61    (JMPIFCONSP L90)
63    (GETVALUE&PUSH 9)                   ; X
65    (CALLS2&JMPIFNOT 15 L137)           ; FLOATP
69    L69
69    (GETVALUE&PUSH 9)                   ; X
71    (CALLS2 145)                        ; ZEROP
73    (UNBIND1)
74    (JMPIFNOT L91)
76    (JMP L140)
78    L78
78    (LOAD 2)
79    (SKIP&RET 3)
81    L81
81    (LOAD&PUSH 2)
82    (LOAD&PUSH 2)
83    (CALL2 1)                           ; CNTHROOT
85    (SKIP&RET 3)
87    L87
87    (CONST&PUSH 11)                     ; RATERR
88    (NIL)
89    (THROW)
90    L90
90    (UNBIND1)
91    L91
91    (GETVALUE 8)                        ; P
93    (JMPIFATOM L87)
95    (GETVALUE 8)                        ; P
97    (CAR&PUSH)
98    (GETVALUE 2)                        ; VAR
100   (JMPIFNOTEQ L87)
102   (LOAD&CAR&PUSH 3)
104   (GETVALUE 8)                        ; P
106   (CDR)
107   (CAR&PUSH)
108   (CALLSR&JMPIF 1 48 L87)             ; >
112   (LOAD&PUSH 4)
113   (GETVALUE&PUSH 8)                   ; P
115   (CALL1 4)                           ; LEADTERM
117   (CDR&PUSH)
118   (LOAD&PUSH 5)
119   (CALL2&PUSH 12)                     ; PQUOTIENT1
121   (CALLSR&STORE 2 35 4)               ; NCONC
125   (LOAD&PUSH 10)
126   (LOAD&PUSH 5)
127   (LOAD&PUSH 11)
128   (CALL2&PUSH 13)                     ; PEXPT
130   (CALL2 14)                          ; PDIFFERENCE
132   (SETVALUE 8)                        ; P
134   (JMP L50)
137   L137
137   (UNBIND1)
138   (JMPIFNOT L91)
140   L140
140   (LOAD 4)
141   (UNBIND1)
142   (SKIP 2)
144   (UNBIND1)
145   (SKIP&RET 3)


Disassembly of function #:|(DEFUN CNTHROOT (C N) ...)-47|
(CONST 0) = CNTHROOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CNTHROOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CNTHROOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CNTHROOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CNTHROOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CNTHROOT
8     (SKIP&RET 1)


Disassembly of function CNTHROOT
(CONST 0) = RATERR
(CONST 1) = IROOT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
36 byte-code instructions:
0     L0
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIF 147 L25)              ; MINUSP
4     (LOAD&PUSH 2)
5     (CALLS2&JMPIF 145 L41)              ; ZEROP
8     (LOAD&PUSH 2)
9     (LOAD&PUSH 2)
10    (CALL2 1)                           ; IROOT
12    (STORE 2)
13    (CDR)
14    (CAR&PUSH)
15    (CALLS2&JMPIF 145 L44)              ; ZEROP
18    (CONST 0)                           ; RATERR
19    L19
19    (PUSH)
20    (NIL)
21    (THROW)
22    L22
22    (CONST 0)                           ; RATERR
23    (JMP L19)
25    L25
25    (LOAD&PUSH 1)
26    (CALLS2&JMPIFNOT 148 L22)           ; ODDP
29    (LOAD&PUSH 2)
30    (CALLSR&PUSH 0 54)                  ; -
33    (LOAD&PUSH 2)
34    (JSR&PUSH L0)
36    (CALLSR 0 54)                       ; -
39    (SKIP&RET 3)
41    L41
41    (LOAD 2)
42    (SKIP&RET 3)
44    L44
44    (LOAD 2)
45    (CAR)
46    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN PABS (X) ...)-48|
(CONST 0) = PABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PABS
8     (SKIP&RET 1)


Disassembly of function PABS
(CONST 0) = X
(CONST 1) = PMINUSP
(CONST 2) = PMINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L13)                 ; PMINUSP
8     (GETVALUE 0)                        ; X
10    L10
10    (UNBIND1)
11    (SKIP&RET 2)
13    L13
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL1 2)                           ; PMINUS
17    (JMP L10)


Disassembly of function #:|(DEFUN PFACTORLIN (P L) ...)-49|
(CONST 0) = PFACTORLIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PFACTORLIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PFACTORLIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PFACTORLIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PFACTORLIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PFACTORLIN
8     (SKIP&RET 1)


Disassembly of function PFACTORLIN
(CONST 0) = P
(CONST 1) = L
(CONST 2) = GENVAR
(CONST 3) = B
(CONST 4) = 1
(CONST 5) = $ALGEBRAIC
(CONST 6) = TELLRAT
(CONST 7) = (1 1)
(CONST 8) = BOTHPRODCOEF
(CONST 9) = PGCD
(CONST 10) = PQUOTIENTCHK
(CONST 11) = PFACTOR1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B P $ALGEBRAIC GENVAR L)
writes special variable : (B)
63 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (GETVALUE&PUSH 1)                   ; L
8     (GETVALUE&PUSH 2)                   ; GENVAR
10    (NIL&PUSH)
11    (NIL)
12    (BIND 3)                            ; B
14    (LOAD&JMPIFNOT 5 L45)
17    L17
17    (LOAD&CAR&PUSH 5)
19    (CONST&PUSH 4)                      ; 1
20    (CALLSR&JMPIFNOT 1 45 L36)          ; =
24    (GETVALUE 5)                        ; $ALGEBRAIC
26    (JMPIFNOT L56)
28    (LOAD&CAR&PUSH 4)
30    (CONST&PUSH 6)                      ; TELLRAT
31    (PUSH-UNBOUND 1)
33    (CALLS2&JMPIFNOT 132 L56)           ; GET
36    L36
36    (LOAD&CDR&PUSH 5)
38    (LOAD&CDR&STORE 5)
40    (POP&STORE 5)
42    (LOAD&JMPIF 5 L17)
45    L45
45    (NIL)
46    (UNBIND1)
47    (SKIP 3)
49    L49
49    (UNBIND 2)
51    (SKIP&RET 3)
53    L53
53    (NIL)
54    (JMP L91)
56    L56
56    (LOAD&CAR&PUSH 4)
58    (CONST 7)                           ; (1 1)
59    (CONS&PUSH)
60    (GETVALUE&PUSH 0)                   ; P
62    (CALL2 8)                           ; BOTHPRODCOEF
64    (SETVALUE 3)                        ; B
66    (CAR)
67    (STORE 3)
68    (GETVALUE 3)                        ; B
70    (CDR)
71    (SETVALUE 3)                        ; B
73    (LOAD&PUSH 3)
74    (GETVALUE&PUSH 3)                   ; B
76    (CALL2 9)                           ; PGCD
78    (STORE 3)
79    (GETVALUE&PUSH 0)                   ; P
81    (LOAD&PUSH 4)
82    (CALL2&PUSH 10)                     ; PQUOTIENTCHK
84    (LOAD&PUSH 4)
85    (JMPIFEQTO 4 L53)                   ; 1
88    (LOAD&PUSH 4)
89    (CALL1 11)                          ; PFACTOR1
91    L91
91    (CONS)
92    (UNBIND1)
93    (SKIP 3)
95    (JMP L49)


Disassembly of function #:|(DEFUN FFACTOR (L FN &AUX ...) ...)-50|
(CONST 0) = FFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FFACTOR
8     (SKIP&RET 1)


Disassembly of function FFACTOR
(CONST 0) = L
(CONST 1) = ALPHA
(CONST 2) = $FACTORFLAG
(CONST 3) = MNUMP
(CONST 4) = ALGFAC*
(CONST 5) = MODULUS
(CONST 6) = GAUSS
(CONST 7) = IRREDUCIBLE
(CONST 8) = MEMQ
(CONST 9) = IRREDUCIBLEG
(CONST 10) = FACTORED
(CONST 11) = GFACTORED
(CONST 12) = NEWVAR
(CONST 13) = VARLIST
(CONST 14) = ZL-REMOVE
(CONST 15) = RATREP*
(CONST 16) = GENVAR
(CONST 17) = MINPOLY*
(CONST 18) = Y
(CONST 19) = DISREP
(CONST 20) = PUTPROP
(CONST 21) = RETFACTOR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y MINPOLY* GENVAR VARLIST GAUSS MODULUS ALGFAC* L $FACTORFLAG ALPHA)
writes special variables : (MINPOLY* ALPHA VARLIST)
120 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE 1)                        ; ALPHA
5     (BIND 1)                            ; ALPHA
7     (NIL&PUSH)
8     (GETVALUE 2)                        ; $FACTORFLAG
10    (JMPIF L17)
12    (GETVALUE&PUSH 0)                   ; L
14    (CALL1&JMPIF 3 L77)                 ; MNUMP
17    L17
17    (GETVALUE 0)                        ; L
19    (JMPIFATOM L84)
21    (GETVALUE 4)                        ; ALGFAC*
23    (JMPIF L84)
25    (GETVALUE 5)                        ; MODULUS
27    (JMPIF L84)
29    (GETVALUE 6)                        ; GAUSS
31    (JMPIF L41)
33    (CONST&PUSH 7)                      ; IRREDUCIBLE
34    (GETVALUE 0)                        ; L
36    (CAR)
37    (CDR&PUSH)
38    (CALL2&JMPIF 8 L77)                 ; MEMQ
41    L41
41    (GETVALUE 6)                        ; GAUSS
43    (JMPIFNOT L53)
45    (CONST&PUSH 9)                      ; IRREDUCIBLEG
46    (GETVALUE 0)                        ; L
48    (CAR)
49    (CDR&PUSH)
50    (CALL2&JMPIF 8 L77)                 ; MEMQ
53    L53
53    (GETVALUE 6)                        ; GAUSS
55    (JMPIF L65)
57    (CONST&PUSH 10)                     ; FACTORED
58    (GETVALUE 0)                        ; L
60    (CAR)
61    (CDR&PUSH)
62    (CALL2&JMPIF 8 L77)                 ; MEMQ
65    L65
65    (GETVALUE 6)                        ; GAUSS
67    (JMPIFNOT L84)
69    (CONST&PUSH 11)                     ; GFACTORED
70    (GETVALUE 0)                        ; L
72    (CAR)
73    (CDR&PUSH)
74    (CALL2&JMPIFNOT 8 L84)              ; MEMQ
77    L77
77    (GETVALUE 0)                        ; L
79    (SKIP 1)
81    (JMP L192)
84    L84
84    (GETVALUE&PUSH 0)                   ; L
86    (CALL1 12)                          ; NEWVAR
88    (GETVALUE 4)                        ; ALGFAC*
90    (JMPIFNOT L103)
92    (GETVALUE&PUSH 1)                   ; ALPHA
94    (GETVALUE&PUSH 1)                   ; ALPHA
96    (GETVALUE&PUSH 13)                  ; VARLIST
98    (CALL2 14)                          ; ZL-REMOVE
100   (CONS)
101   (SETVALUE 13)                       ; VARLIST
103   L103
103   (GETVALUE&PUSH 0)                   ; L
105   (CALL1 15)                          ; RATREP*
107   (STORE 0)
108   (GETVALUE 4)                        ; ALGFAC*
110   (JMPIFNOT L138)
112   (GETVALUE&PUSH 1)                   ; ALPHA
114   (CALL1 15)                          ; RATREP*
116   (CDR)
117   (CAR)
118   (SETVALUE 1)                        ; ALPHA
120   (GETVALUE&PUSH 16)                  ; GENVAR
122   (PUSH-UNBOUND 1)
124   (CALLS1 156)                        ; LAST
126   (CAR&PUSH)
127   (GETVALUE 17)                       ; MINPOLY*
129   (CAR&PUSH)
130   (GETVALUE&PUSH 17)                  ; MINPOLY*
132   (PUSH-UNBOUND 3)
134   (CALLS1 172)                        ; SUBST
136   (SETVALUE 17)                       ; MINPOLY*
138   L138
138   (GETVALUE&PUSH 16)                  ; GENVAR
140   (LOAD&PUSH 0)
141   (GETVALUE&PUSH 13)                  ; VARLIST
143   (JMP L168)
145   L145
145   (SKIP 2)
147   (JMP L180)
149   L149
149   (LOAD&CAR&PUSH 1)
151   (LOAD 1)
152   (BIND 18)                           ; Y
154   (GETVALUE&PUSH 18)                  ; Y
156   (LOAD&PUSH 4)
157   (CONST&PUSH 19)                     ; DISREP
158   (CALL 3 20)                         ; PUTPROP
161   (UNBIND1)
162   (SKIP 2)
164   (LOAD&CDR&STORE 1)
166   (LOAD&CDR&STORE 0)
168   L168
168   (LOAD&PUSH 1)
169   (CALLS1&JMPIF 146 L145)             ; ENDP
172   (LOAD&CAR&PUSH 1)
174   (LOAD&PUSH 1)
175   (CALLS1&JMPIFNOT 146 L149)          ; ENDP
178   (SKIP 3)
180   L180
180   (SKIP 1)
182   (LOAD&CDR&PUSH 0)
184   (LOAD&PUSH 9)
185   (GETVALUE&PUSH 0)                   ; L
187   (CALL 3 21)                         ; RETFACTOR
190   (SKIP 1)
192   L192
192   (UNBIND 2)
194   (SKIP&RET 3)


Disassembly of function #:|(DEFUN FACTOROUT1 (L P) ...)-51|
(CONST 0) = FACTOROUT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTOROUT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTOROUT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTOROUT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTOROUT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTOROUT1
8     (SKIP&RET 1)


Disassembly of function FACTOROUT1
(CONST 0) = L
(CONST 1) = P
(CONST 2) = GENVAR
(CONST 3) = PGET
(CONST 4) = 1
(CONST 5) = PQUOTIENT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P L GENVAR)
writes special variable : (P)
37 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; P
6     (GETVALUE&PUSH 2)                   ; GENVAR
8     (GETVALUE&PUSH 0)                   ; L
10    (NIL&PUSH)
11    (LOAD&JMPIFNOT 1 L51)
14    L14
14    (LOAD&CAR&PUSH 1)
16    (CALLS2&JMPIF 145 L42)              ; ZEROP
19    (LOAD&CAR&PUSH 2)
21    (CALL1&PUSH 3)                      ; PGET
23    (LOAD&CAR&PUSH 2)
25    (LOAD 2)
26    (CONS)
27    (CONS)
28    (STORE 0)
29    (GETVALUE&PUSH 1)                   ; P
31    (LOAD&CAR&PUSH 3)
33    (LOAD&CAR&PUSH 3)
35    (CONST&PUSH 4)                      ; 1
36    (LIST&PUSH 3)
38    (CALL2 5)                           ; PQUOTIENT
40    (SETVALUE 1)                        ; P
42    L42
42    (LOAD&CDR&PUSH 2)
44    (LOAD&CDR&STORE 2)
46    (POP&STORE 2)
48    (LOAD&JMPIF 1 L14)
51    L51
51    (LOAD&PUSH 0)
52    (GETVALUE&PUSH 1)                   ; P
54    (LIST 2)
56    (SKIP 3)
58    (UNBIND 2)
60    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FACTOROUT (P) ...)-52|
(CONST 0) = FACTOROUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTOROUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTOROUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTOROUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTOROUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTOROUT
8     (SKIP&RET 1)


Disassembly of function FACTOROUT
(CONST 0) = P
(CONST 1) = 0
(CONST 2) = PTERM
(CONST 3) = PMINDEGVEC
(CONST 4) = FACTOROUT1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
25 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CDR&PUSH)
6     (CONST&PUSH 1)                      ; 0
7     (CALL2 2)                           ; PTERM
9     (JMPIFCONSP L20)
11    (GETVALUE 0)                        ; P
13    (CDR&PUSH)
14    (CONST&PUSH 1)                      ; 0
15    (CALL2&PUSH 2)                      ; PTERM
17    (CALLS2&JMPIFNOT 145 L31)           ; ZEROP
20    L20
20    (GETVALUE&PUSH 0)                   ; P
22    (CALL1&PUSH 3)                      ; PMINDEGVEC
24    (GETVALUE&PUSH 0)                   ; P
26    (CALL2 4)                           ; FACTOROUT1
28    L28
28    (UNBIND1)
29    (SKIP&RET 2)
31    L31
31    (NIL&PUSH)
32    (GETVALUE&PUSH 0)                   ; P
34    (LIST 2)
36    (JMP L28)


Disassembly of function #:|(DEFMFUN PFACTOR (P &AUX #) ...)-53|
(CONST 0) = PFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PFACTOR
8     (SKIP&RET 1)


Disassembly of function PFACTOR
(CONST 0) = P
(CONST 1) = ALGFAC*
(CONST 2) = $ALGEBRAIC
(CONST 3) = CFACTOR
(CONST 4) = $RATFAC
(CONST 5) = PFACPROD
(CONST 6) = FACTOROUT
(CONST 7) = 1
(CONST 8) = MODULUS
(CONST 9) = LEADALGCOEF
(CONST 10) = MONIZE
(CONST 11) = ALGCONTENT
(CONST 12) = PCONTENT
(CONST 13) = (1 . 1)
(CONST 14) = -1
(CONST 15) = PSQFR
(CONST 16) = PFACTOR11
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODULUS $RATFAC P ALGFAC*)
writes special variable : (P)
125 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 1)                        ; ALGFAC*
5     (BIND 2)                            ; $ALGEBRAIC
7     (GETVALUE 0)                        ; P
9     (JMPIFATOM L94)
12    (GETVALUE 4)                        ; $RATFAC
14    (JMPIF L101)
17    (GETVALUE&PUSH 0)                   ; P
19    (CALL1 6)                           ; FACTOROUT
21    (SETVALUE 0)                        ; P
23    (CDR)
24    (CAR&PUSH)
25    (JMPIFEQTO 7 L108)                  ; 1
29    (GETVALUE 0)                        ; P
31    (CDR)
32    (CAR&PUSH)
33    (CALLS2&JMPIF 8 L114)               ; NUMBERP
37    (GETVALUE 8)                        ; MODULUS
39    (JMPIF L129)
42    (GETVALUE 1)                        ; ALGFAC*
44    (JMPIF L146)
47    (GETVALUE 0)                        ; P
49    (CDR)
50    (CAR&PUSH)
51    (CALL1 12)                          ; PCONTENT
53    L53
53    (PUSH)
54    (LOAD&CAR&PUSH 0)
56    (JMPIFEQTO 7 L155)                  ; 1
60    (GETVALUE 1)                        ; ALGFAC*
62    (JMPIFNOT L179)
65    (GETVALUE 8)                        ; MODULUS
67    (JMPIF L158)
70    (LOAD&CAR&PUSH 0)
72    (CONST&PUSH 13)                     ; (1 . 1)
73    (CALLS2&JMPIF 2 L164)               ; EQUAL
77    (LOAD 0)
78    (CAR)
79    (CDR&PUSH)
80    (JMPIFNOTEQTO 7 L167)               ; 1
84    (LOAD 0)
85    (CAR)
86    (CAR&PUSH)
87    (CONST 7)                           ; 1
88    L88
88    (PUSH)
89    (LIST 2)
91    (JMP L183)
94    L94
94    (GETVALUE&PUSH 0)                   ; P
96    (CALL1 3)                           ; CFACTOR
98    (JMP L199)
101   L101
101   (GETVALUE&PUSH 0)                   ; P
103   (CALL1 5)                           ; PFACPROD
105   (JMP L199)
108   L108
108   (GETVALUE 0)                        ; P
110   (CAR)
111   (JMP L199)
114   L114
114   (GETVALUE 0)                        ; P
116   (CDR)
117   (CAR&PUSH)
118   (CALL1&PUSH 3)                      ; CFACTOR
120   (GETVALUE 0)                        ; P
122   (CAR&PUSH)
123   (CALLSR 2 34)                       ; APPEND
126   (JMP L199)
129   L129
129   (GETVALUE 0)                        ; P
131   (CDR)
132   (CAR&PUSH)
133   (CALL1&PUSH 9)                      ; LEADALGCOEF
135   (GETVALUE 0)                        ; P
137   (CDR)
138   (CAR&PUSH)
139   (CALL1&PUSH 10)                     ; MONIZE
141   (LIST 2)
143   (JMP L53)
146   L146
146   (GETVALUE 0)                        ; P
148   (CDR)
149   (CAR&PUSH)
150   (CALL1 11)                          ; ALGCONTENT
152   (JMP L53)
155   L155
155   (NIL)
156   (JMP L183)
158   L158
158   (LOAD&CAR&PUSH 0)
160   (CONST 7)                           ; 1
161   (JMP L88)
164   L164
164   (NIL)
165   (JMP L183)
167   L167
167   (LOAD 0)
168   (CAR)
169   (CAR&PUSH)
170   (CONST&PUSH 7)                      ; 1
171   (LOAD 2)
172   (CAR)
173   (CDR&PUSH)
174   (CONST&PUSH 14)                     ; -1
175   (LIST 4)
177   (JMP L183)
179   L179
179   (LOAD&CAR&PUSH 0)
181   (CALL1 3)                           ; CFACTOR
183   L183
183   (PUSH)
184   (LOAD 1)
185   (CDR)
186   (CAR&PUSH)
187   (CALL1&PUSH 15)                     ; PSQFR
189   (CALL1&PUSH 16)                     ; PFACTOR11
191   (GETVALUE 0)                        ; P
193   (CAR&PUSH)
194   (CALLSR 3 35)                       ; NCONC
197   (SKIP 1)
199   L199
199   (UNBIND 2)
201   (SKIP&RET 2)


Disassembly of function #:|(DEFUN PFACTOR11 (P) ...)-54|
(CONST 0) = PFACTOR11
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PFACTOR11>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PFACTOR11
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PFACTOR11
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PFACTOR11>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PFACTOR11
8     (SKIP&RET 1)


Disassembly of function PFACTOR11
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = ADN*
(CONST 3) = PFACTOR1
(CONST 4) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L ADN* P)
writes special variable : (L)
77 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFNOT L89)
8     (GETVALUE 0)                        ; P
10    (CAR&PUSH)
11    (CALLS2&JMPIF 8 L92)                ; NUMBERP
15    (CONST 1)                           ; 1
16    (BIND 2)                            ; ADN*
18    (GETVALUE 0)                        ; P
20    (CAR&PUSH)
21    (CALL1&PUSH 3)                      ; PFACTOR1
23    (GETVALUE&PUSH 2)                   ; ADN*
25    (JMPIFEQTO 1 L110)                  ; 1
29    (GETVALUE&PUSH 2)                   ; ADN*
31    (GETVALUE 0)                        ; P
33    (CDR)
34    (CAR&PUSH)
35    (CALLSR&PUSH 0 54)                  ; -
38    (LIST 2)
40    L40
40    (PUSH)
41    (LOAD 1)
42    (BIND 4)                            ; L
44    (NIL&PUSH)
45    (GETVALUE 4)                        ; L
47    (JMPIFNOT L70)
49    L49
49    (GETVALUE 4)                        ; L
51    (CDR&PUSH)
52    (GETVALUE 4)                        ; L
54    (CAR&PUSH)
55    (GETVALUE 0)                        ; P
57    (CDR)
58    (CAR&PUSH)
59    (LOAD 3)
60    (CONS)
61    (CONS)
62    (STORE 1)
63    (POP)
64    (SETVALUE 4)                        ; L
66    (GETVALUE 4)                        ; L
68    (JMPIF L49)
70    L70
70    (POP)
71    (UNBIND1)
72    (PUSH)
73    (GETVALUE 0)                        ; P
75    (CDR)
76    (CDR&PUSH)
77    (JSR&PUSH L0)
80    (CALLSR 3 35)                       ; NCONC
83    (SKIP 1)
85    (UNBIND1)
86    L86
86    (UNBIND1)
87    (SKIP&RET 2)
89    L89
89    (NIL)
90    (JMP L86)
92    L92
92    (GETVALUE 0)                        ; P
94    (CAR&PUSH)
95    (GETVALUE 0)                        ; P
97    (CDR)
98    (CAR&PUSH)
99    (GETVALUE 0)                        ; P
101   (CDR)
102   (CDR&PUSH)
103   (JSR L0)
106   (CONS)
107   (CONS)
108   (JMP L86)
110   L110
110   (NIL)
111   (JMP L40)


Disassembly of function #:|(DEFUN PFACTOR1 (P) ...)-55|
(CONST 0) = PFACTOR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PFACTOR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PFACTOR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PFACTOR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PFACTOR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PFACTOR1
8     (SKIP&RET 1)


Disassembly of function PFACTOR1
(CONST 0) = P
(CONST 1) = *IRREDS
(CONST 2) = *CHECKAGAIN
(CONST 3) = DONTFACTOR
(CONST 4) = ONEVARP
(CONST 5) = FACTXN+-1
(CONST 6) = MODULUS
(CONST 7) = GAUSS
(CONST 8) = ALGFAC*
(CONST 9) = 2
(CONST 10) = ESTCHECK
(CONST 11) = PDEGREEVECTOR
(CONST 12) = PFACTORLIN
(CONST 13) = PFACTORQUAD
(CONST 14) = CHECKFACTORS
(CONST 15) = HEURTRIAL
(CONST 16) = PFACTORANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*IRREDS CHECKFACTORS GAUSS MODULUS ALGFAC* P)
writes special variables : (*CHECKAGAIN *IRREDS)
88 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; *IRREDS
7     (NIL)
8     (BIND 2)                            ; *CHECKAGAIN
10    (GETVALUE 0)                        ; P
12    (CAR&PUSH)
13    (CALL1&JMPIF 3 L50)                 ; DONTFACTOR
16    (GETVALUE&PUSH 0)                   ; P
18    (CALL1&JMPIFNOT 4 L92)              ; ONEVARP
22    (GETVALUE&PUSH 0)                   ; P
24    (CALL1 5)                           ; FACTXN+-1
26    (STORE 6)
27    (JMPIF L61)
29    (GETVALUE 8)                        ; ALGFAC*
31    (JMPIF L92)
33    (GETVALUE 6)                        ; MODULUS
35    (JMPIF L92)
37    (GETVALUE 0)                        ; P
39    (CDR)
40    (CAR&PUSH)
41    (JMPIFEQTO 9 L92)                   ; 2
44    (GETVALUE 0)                        ; P
46    (CDR&PUSH)
47    (CALL1&JMPIFNOT 10 L92)             ; ESTCHECK
50    L50
50    (GETVALUE&PUSH 0)                   ; P
52    (LIST 1)
54    (UNBIND 2)
56    (SKIP 1)
58    (JMP L146)
61    L61
61    (GETVALUE 6)                        ; MODULUS
63    (JMPIF L131)
66    (GETVALUE 7)                        ; GAUSS
68    (JMPIF L74)
70    (GETVALUE 8)                        ; ALGFAC*
72    (JMPIF L131)
74    L74
74    (LOAD 6)
75    (SETVALUE 1)                        ; *IRREDS
77    (NIL&STORE 6)
79    (JMP L131)
81    L81
81    (GETVALUE&PUSH 0)                   ; P
83    (LIST 1)
85    (STORE 6)
86    (GETVALUE 14)                       ; CHECKFACTORS
88    (JMPIFNOT L131)
90    (JMP L122)
92    L92
92    (GETVALUE&PUSH 0)                   ; P
94    (GETVALUE&PUSH 0)                   ; P
96    (CALL1&PUSH 11)                     ; PDEGREEVECTOR
98    (CALL2 12)                          ; PFACTORLIN
100   (STORE 6)
101   (JMPIF L142)
103   (GETVALUE 8)                        ; ALGFAC*
105   (JMPIF L81)
107   (GETVALUE 6)                        ; MODULUS
109   (JMPIF L81)
111   (GETVALUE&PUSH 0)                   ; P
113   (CALL1 13)                          ; PFACTORQUAD
115   (STORE 6)
116   (JMPIFNOT L131)
118   (GETVALUE 14)                       ; CHECKFACTORS
120   (JMPIFNOT L131)
122   L122
122   (LOAD&PUSH 6)
123   (GETVALUE&PUSH 14)                  ; CHECKFACTORS
125   (CALL2 15)                          ; HEURTRIAL
127   (STORE 6)
128   (CDR)
129   (SETVALUE 2)                        ; *CHECKAGAIN
131   L131
131   (GETVALUE&PUSH 1)                   ; *IRREDS
133   (CONST&SYMBOL-FUNCTION&PUSH 16)     ; PFACTORANY
135   (LOAD&PUSH 8)
136   (CALLSR&PUSH 0 26)                  ; MAPCAN
139   (CALLSR 2 35)                       ; NCONC
142   L142
142   (UNBIND 2)
144   (SKIP 1)
146   L146
146   (UNBIND1)
147   (SKIP&RET 2)


Disassembly of function #:|(DEFMVAR $HOMOG_HACK NIL)-56-1|
(CONST 0) = $HOMOG_HACK
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HOMOG_HACK
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $HOMOG_HACK
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $HOMOG_HACK NIL)-56-2|
(CONST 0) = (SPECIAL $HOMOG_HACK)
(CONST 1) = $HOMOG_HACK
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $HOMOG_HACK)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $HOMOG_HACK
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $HOMOG_HACK
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $HOMOG_HACK
12    (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *HVAR *HMAT) (*LEXPR HREDUCE HEXPAND))-57|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PFACTORANY (P) ...)-58|
(CONST 0) = PFACTORANY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PFACTORANY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PFACTORANY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PFACTORANY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PFACTORANY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PFACTORANY
8     (SKIP&RET 1)


Disassembly of function PFACTORANY
(CONST 0) = P
(CONST 1) = *CHECKAGAIN
(CONST 2) = CHECKFACTORS
(CONST 3) = PFACTOR1
(CONST 4) = $HOMOG_HACK
(CONST 5) = ALGFAC*
(CONST 6) = ONEVARP
(CONST 7) = *HVAR
(CONST 8) = *HMAT
(CONST 9) = HEXPAND
(CONST 10) = HREDUCE
(CONST 11) = PFACTOR
(CONST 12) = $BERLEFACT
(CONST 13) = FACTOR1972
(CONST 14) = PKRONECK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($BERLEFACT P ALGFAC* $HOMOG_HACK *CHECKAGAIN)
43 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 1)                        ; *CHECKAGAIN
5     (JMPIF L31)
7     (GETVALUE 4)                        ; $HOMOG_HACK
9     (JMPIFNOT L20)
11    (GETVALUE 5)                        ; ALGFAC*
13    (JMPIF L20)
15    (GETVALUE&PUSH 0)                   ; P
17    (CALL1&JMPIFNOT 6 L41)              ; ONEVARP
20    L20
20    (GETVALUE 12)                       ; $BERLEFACT
22    (JMPIF L65)
24    (GETVALUE&PUSH 0)                   ; P
26    (CALL1 14)                          ; PKRONECK
28    L28
28    (UNBIND1)
29    (SKIP&RET 2)
31    L31
31    (NIL)
32    (BIND 2)                            ; CHECKFACTORS
34    (GETVALUE&PUSH 0)                   ; P
36    (CALL1 3)                           ; PFACTOR1
38    (UNBIND1)
39    (JMP L28)
41    L41
41    (NIL)
42    (BIND 4)                            ; $HOMOG_HACK
44    (NIL)
45    (BIND 7)                            ; *HVAR
47    (NIL)
48    (BIND 8)                            ; *HMAT
50    (CONST&SYMBOL-FUNCTION&PUSH 9)      ; HEXPAND
52    (GETVALUE&PUSH 0)                   ; P
54    (CALL1&PUSH 10)                     ; HREDUCE
56    (CALL1&PUSH 11)                     ; PFACTOR
58    (CALLSR 0 22)                       ; MAPCAR
61    (UNBIND 3)
63    (JMP L28)
65    L65
65    (GETVALUE&PUSH 0)                   ; P
67    (CALL1 13)                          ; FACTOR1972
69    (JMP L28)


Disassembly of function #:|(DEFUN RETFACTOR (X FN L ...) ...)-59|
(CONST 0) = RETFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RETFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RETFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RETFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RETFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RETFACTOR
8     (SKIP&RET 1)


Disassembly of function RETFACTOR
(CONST 0) = X
(CONST 1) = L
(CONST 2) = RATFACT
(CONST 3) = RETFACTOR1
(CONST 4) = SCANMAPP
(CONST 5) = TAGIRR
(CONST 6) = 1
(CONST 7) = MAP2C
(CONST 8) = 0
(CONST 9) = MEMQ
(CONST 10) = $EXPOP
(CONST 11) = $EXPON
(CONST 12) = $NEGDISTRIB
(CONST 13) = SORTGREAT
(CONST 14) = MULN
(CONST 15) = MTIMESP
(CONST 16) = (MTIMES SIMP FACTORED)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SCANMAPP L X)
82 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (GETVALUE&PUSH 0)                   ; X
8     (LOAD&PUSH 9)
9     (CALL2&PUSH 2)                      ; RATFACT
11    (JMP L61)
13    L13
13    (GETVALUE&PUSH 1)                   ; L
15    (CALL1 5)                           ; TAGIRR
17    (JMP L108)
20    L20
20    (LOAD&CAR&PUSH 0)
22    (LOAD 1)
23    (CDR)
24    (CAR&PUSH)
25    (CALL2 3)                           ; RETFACTOR1
27    (STORE 0)
28    (GETVALUE 4)                        ; SCANMAPP
30    (JMPIFNOT L48)
32    (LOAD 0)
33    (JMPIFATOM L48)
35    (GETVALUE 1)                        ; L
37    (JMPIFATOM L48)
39    (LOAD 0)
40    (CAR)
41    (CAR&PUSH)
42    (GETVALUE 1)                        ; L
44    (CAR)
45    (CAR)
46    (JMPIFEQ L13)
48    L48
48    (LOAD 0)
49    (JMP L108)
51    L51
51    (CONST 8)                           ; 0
52    (JMP L108)
54    L54
54    (LOAD 0)
55    (JMP L108)
57    L57
57    (LOAD 0)
58    (CDR)
59    (CDR)
60    (STORE 0)
61    L61
61    (LOAD 0)
62    (CDR)
63    (CDR)
64    (JMPIFNOT L20)
66    (LOAD&CAR&PUSH 0)
68    (JMPIFEQTO 6 L57)                   ; 1
71    (CONST&SYMBOL-FUNCTION&PUSH 3)      ; RETFACTOR1
73    (LOAD&PUSH 1)
74    (CALL2 7)                           ; MAP2C
76    (STORE 0)
77    (CONST&PUSH 8)                      ; 0
78    (LOAD&PUSH 1)
79    (CALL2&JMPIF 9 L51)                 ; MEMQ
82    (CONST 8)                           ; 0
83    (BIND 10)                           ; $EXPOP
85    (CONST 8)                           ; 0
86    (BIND 11)                           ; $EXPON
88    (NIL)
89    (BIND 12)                           ; $NEGDISTRIB
91    (LOAD&PUSH 9)
92    (CALL1&PUSH 13)                     ; SORTGREAT
94    (T&PUSH)
95    (CALL2 14)                          ; MULN
97    (UNBIND 3)
99    (STORE 0)
100   (PUSH)
101   (CALL1&JMPIFNOT 15 L54)             ; MTIMESP
104   (CONST&PUSH 16)                     ; (MTIMES SIMP FACTORED)
105   (LOAD 1)
106   (CDR)
107   (CONS)
108   L108
108   (SKIP 1)
110   (UNBIND 2)
112   (SKIP&RET 4)


Disassembly of function #:|(DEFUN RETFACTOR1 (P E) ...)-60|
(CONST 0) = RETFACTOR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RETFACTOR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RETFACTOR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RETFACTOR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RETFACTOR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RETFACTOR1
8     (SKIP&RET 1)


Disassembly of function RETFACTOR1
(CONST 0) = P
(CONST 1) = PDISREP
(CONST 2) = SIMPLIFY
(CONST 3) = TAGIRR
(CONST 4) = POWER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALL1&PUSH 1)                      ; PDISREP
7     (CALL1&PUSH 2)                      ; SIMPLIFY
9     (CALL1&PUSH 3)                      ; TAGIRR
11    (LOAD&PUSH 5)
12    (CALL2 4)                           ; POWER
14    (UNBIND1)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TAGIRR (X) ...)-61|
(CONST 0) = TAGIRR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAGIRR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAGIRR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAGIRR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAGIRR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAGIRR
8     (SKIP&RET 1)


Disassembly of function TAGIRR
(CONST 0) = X
(CONST 1) = IRREDUCIBLE
(CONST 2) = MEMQ
(CONST 3) = (IRREDUCIBLE)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L29)
7     (CONST&PUSH 1)                      ; IRREDUCIBLE
8     (GETVALUE 0)                        ; X
10    (CAR)
11    (CDR&PUSH)
12    (CALL2&JMPIF 2 L29)                 ; MEMQ
15    (GETVALUE 0)                        ; X
17    (CAR&PUSH)
18    (CONST&PUSH 3)                      ; (IRREDUCIBLE)
19    (CALLSR&PUSH 2 34)                  ; APPEND
22    (GETVALUE 0)                        ; X
24    (CDR)
25    (CONS)
26    L26
26    (UNBIND1)
27    (SKIP&RET 2)
29    L29
29    (GETVALUE 0)                        ; X
31    (JMP L26)


Disassembly of function #:|(DEFUN REVSIGN (X) ...)-62|
(CONST 0) = REVSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REVSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REVSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REVSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REVSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REVSIGN
8     (SKIP&RET 1)


Disassembly of function REVSIGN
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
23 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFNOT L28)
7     (GETVALUE 0)                        ; X
9     (CAR&PUSH)
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (CALLSR&PUSH 0 54)                  ; -
17    (GETVALUE 0)                        ; X
19    (CDR)
20    (CDR&PUSH)
21    (JSR L0)
23    (CONS)
24    (CONS)
25    L25
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (NIL)
29    (JMP L25)


Wrote file binary-clisp/rat3d.fas
Wrote file /cygdrive/e/temp/maxima/src/rat3d.lis