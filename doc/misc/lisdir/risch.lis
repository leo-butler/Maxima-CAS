Listing of compilation of file /cygdrive/e/temp/maxima/src/risch.lisp
on 2002-12-17 13:34:43 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/risch.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE RISCH)-2|
(CONST 0) = RISCH
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCH
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC RATMAC)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL PROB ROOTFAC ...) (*EXPR $EXPONENTIALIZE SUBFUNSUBS ...) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LIFLAG T ...)-5-1|
(CONST 0) = $LIFLAG
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LIFLAG
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LIFLAG
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LIFLAG T ...)-5-2|
(CONST 0) = (SPECIAL $LIFLAG)
(CONST 1) = $LIFLAG
(CONST 2) = VARIABLE
(CONST 3) = "Controls whether RISCH generates polylogs"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LIFLAG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LIFLAG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LIFLAG
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $LIFLAG
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Controls whether RISCH generates polylogs"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $LIFLAG
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ERFFLAG T ...)-6-1|
(CONST 0) = $ERFFLAG
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ERFFLAG
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $ERFFLAG
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ERFFLAG T ...)-6-2|
(CONST 0) = (SPECIAL $ERFFLAG)
(CONST 1) = $ERFFLAG
(CONST 2) = VARIABLE
(CONST 3) = "Controls whether RISCH generates ERFS"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $ERFFLAG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $ERFFLAG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $ERFFLAG
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $ERFFLAG
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Controls whether RISCH generates ERFS"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $ERFFLAG
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR CHANGEVP T ...)-7|
(CONST 0) = (SPECIAL CHANGEVP)
(CONST 1) = CHANGEVP
(CONST 2) = VARIABLE
(CONST 3) = "When nil prevents changevar hack"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL CHANGEVP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; CHANGEVP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; CHANGEVP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; CHANGEVP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "When nil prevents changevar hack"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; CHANGEVP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO PAIR (AL BL) ...)-8|
(CONST 0) = PAIR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PAIR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; PAIR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PAIR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PAIR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; PAIR
10    (SKIP&RET 1)


Disassembly of function PAIR
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = MAPCAR
(CONST 3) = #'CONS
1 required argument
1 optional argument
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L23)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; MAPCAR
16    (CONST&PUSH 3)                      ; #'CONS
17    (LOAD&PUSH 3)
18    (LOAD&PUSH 3)
19    (LIST 4)
21    (SKIP&RET 5)
23    L23
23    (LOAD&PUSH 2)
24    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO RISCHZERO NIL ...)-9|
(CONST 0) = RISCHZERO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHZERO>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHZERO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHZERO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHZERO>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; RISCHZERO
10    (SKIP&RET 1)


Disassembly of function RISCHZERO
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = '((0 . 1) 0)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; '((0 . 1) 0)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RISCHNOUN (EXP1 &OPTIONAL #) ...)-10|
(CONST 0) = RISCHNOUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHNOUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHNOUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHNOUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHNOUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHNOUN
8     (SKIP&RET 1)


Disassembly of function RISCHNOUN
(CONST 0) = (0 . 1)
(CONST 1) = (%INTEGRATE)
(CONST 2) = DISREP
(CONST 3) = INTVAR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (INTVAR)
21 byte-code instructions:
0     (BOUNDP 1)
2     (PUSH)
3     (JMPIFBOUNDP 2 L13)
6     (LOAD 3)
7     (STORE 2)
8     (LOAD&JMPIFNOT 0 L16)
11    (JMP L18)
13    L13
13    (LOAD&JMPIF 0 L18)
16    L16
16    (CONST 0)                           ; (0 . 1)
17    (STORE 3)
18    L18
18    (LOAD&PUSH 3)
19    (CONST&PUSH 1)                      ; (%INTEGRATE)
20    (LOAD&PUSH 4)
21    (CALL1&PUSH 2)                      ; DISREP
23    (GETVALUE&PUSH 3)                   ; INTVAR
25    (LIST&PUSH 3)
27    (LIST 2)
29    (SKIP&RET 4)


Disassembly of function #:|(DEFUN GETRISCHVAR NIL ...)-11|
(CONST 0) = GETRISCHVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETRISCHVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETRISCHVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETRISCHVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETRISCHVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETRISCHVAR
8     (SKIP&RET 1)


Disassembly of function GETRISCHVAR
(CONST 0) = VARLIST
(CONST 1) = GENVAR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR VARLIST)
14 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; VARLIST
2     (GETVALUE&PUSH 1)                   ; GENVAR
4     (JMP L12)
6     L6
6     (LOAD&CDR&PUSH 1)
8     (LOAD&CDR&STORE 1)
10    (POP&STORE 1)
12    L12
12    (LOAD 1)
13    (CDR)
14    (JMPIF L6)
16    (LOAD 0)
17    (CAR)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RISCH-PCONSTP (P) ...)-12|
(CONST 0) = RISCH-PCONSTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCH-PCONSTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCH-PCONSTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCH-PCONSTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCH-PCONSTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCH-PCONSTP
8     (SKIP&RET 1)


Disassembly of function RISCH-PCONSTP
(CONST 0) = P
(CONST 1) = MAINVAR
(CONST 2) = B
(CONST 3) = A
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A MAINVAR P)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALLS2 5)                          ; ATOM
7     (JMPIF1 L34)
9     (GETVALUE&PUSH 1)                   ; MAINVAR
11    (GETVALUE 0)                        ; P
13    (CAR)
14    (BIND 2)                            ; B
16    (LOAD 3)
17    (BIND 3)                            ; A
19    (GETVALUE&PUSH 3)                   ; A
21    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
23    (GETVALUE&PUSH 2)                   ; B
25    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
27    (CALLSR 1 48)                       ; >
30    (UNBIND 2)
32    (SKIP 1)
34    L34
34    (UNBIND1)
35    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RISCH-CONSTP (R) ...)-13|
(CONST 0) = RISCH-CONSTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCH-CONSTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCH-CONSTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCH-CONSTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCH-CONSTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCH-CONSTP
8     (SKIP&RET 1)


Disassembly of function RISCH-CONSTP
(CONST 0) = R
(CONST 1) = RATFIX
(CONST 2) = RISCH-PCONSTP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (R)
writes special variable : (R)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; R
3     (GETVALUE&PUSH 0)                   ; R
5     (CALL1 1)                           ; RATFIX
7     (SETVALUE 0)                        ; R
9     (CAR&PUSH)
10    (CALL1 2)                           ; RISCH-PCONSTP
12    (JMPIFNOT1 L19)
14    (GETVALUE 0)                        ; R
16    (CDR&PUSH)
17    (CALL1 2)                           ; RISCH-PCONSTP
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RISCHADD (X Y) ...)-14|
(CONST 0) = RISCHADD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHADD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHADD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHADD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHADD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHADD
8     (SKIP&RET 1)


Disassembly of function RISCHADD
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = A
(CONST 3) = B
(CONST 4) = C
(CONST 5) = D
(CONST 6) = RATPL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C A B D Y X)
writes special variables : (B A D C)
33 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL)
7     (BIND 2)                            ; A
9     (GETVALUE 0)                        ; X
11    (BIND 3)                            ; B
13    (NIL)
14    (BIND 4)                            ; C
16    (GETVALUE 1)                        ; Y
18    (BIND 5)                            ; D
20    (GETVALUE 5)                        ; D
22    (CAR)
23    (SETVALUE 4)                        ; C
25    (GETVALUE 5)                        ; D
27    (CDR)
28    (SETVALUE 5)                        ; D
30    (GETVALUE 3)                        ; B
32    (CAR)
33    (SETVALUE 2)                        ; A
35    (GETVALUE 3)                        ; B
37    (CDR)
38    (SETVALUE 3)                        ; B
40    (GETVALUE&PUSH 2)                   ; A
42    (GETVALUE&PUSH 4)                   ; C
44    (CALL2&PUSH 6)                      ; RATPL
46    (GETVALUE&PUSH 3)                   ; B
48    (GETVALUE&PUSH 5)                   ; D
50    (CALLSR 2 34)                       ; APPEND
53    (CONS)
54    (UNBIND 6)
56    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $RISCH (EXP VAR) ...)-15|
(CONST 0) = $RISCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RISCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RISCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RISCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RISCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RISCH
8     (SKIP&RET 1)


Disassembly of function $RISCH
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = CONTEXT
(CONST 3) = RISCHINT
(CONST 4) = CONTEXT-UNWINDER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP CONTEXT)
14 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 2)                   ; CONTEXT
8     (CALL1 2)                           ; CONTEXT
10    (BIND 2)                            ; CONTEXT
12    (GETVALUE&PUSH 0)                   ; EXP
14    (GETVALUE&PUSH 1)                   ; VAR
16    (CALL2&PUSH 3)                      ; RISCHINT
18    (CALL0 4)                           ; CONTEXT-UNWINDER
20    (POP)
21    (UNBIND 3)
23    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SPDERIVATIVE (P VAR) ...)-16|
(CONST 0) = SPDERIVATIVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPDERIVATIVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPDERIVATIVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPDERIVATIVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPDERIVATIVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPDERIVATIVE
8     (SKIP&RET 1)


Disassembly of function SPDERIVATIVE
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = (0 . 1)
(CONST 3) = (0 . 1)
(CONST 4) = X
(CONST 5) = FIXNUMP
(CONST 6) = RATQU
(CONST 7) = RATTI
(CONST 8) = RATFIX
(CONST 9) = RATDIF
(CONST 10) = SPDERIVATIVE1
(CONST 11) = RATPL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X VAR P)
107 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE 0)                        ; P
8     (JMPIFATOM L61)
10    (GETVALUE 0)                        ; P
12    (CDR)
13    (JMPIFNOT L65)
15    (GETVALUE 0)                        ; P
17    (CAR)
18    (JMPIFCONSP L27)
20    (GETVALUE 0)                        ; P
22    (CAR&PUSH)
23    (CALLS2&JMPIFNOT 8 L130)            ; NUMBERP
27    L27
27    (GETVALUE 0)                        ; P
29    (CDR&PUSH)
30    (GETVALUE&PUSH 1)                   ; VAR
32    (JSR&PUSH L0)
34    (LOAD 0)
35    (CAR)
36    (BIND 4)                            ; X
38    (GETVALUE&PUSH 4)                   ; X
40    (CALL1&JMPIF 5 L52)                 ; FIXNUMP
43    (GETVALUE 4)                        ; X
45    (JMPIFCONSP L85)
47    (GETVALUE&PUSH 4)                   ; X
49    (CALLS2&JMPIFNOT 15 L69)            ; FLOATP
52    L52
52    (GETVALUE&PUSH 4)                   ; X
54    (CALLS2 145)                        ; ZEROP
56    (UNBIND1)
57    (JMPIFNOT L86)
59    (JMP L72)
61    L61
61    (CONST 2)                           ; (0 . 1)
62    (JMP L163)
65    L65
65    (CONST 3)                           ; (0 . 1)
66    (JMP L163)
69    L69
69    (UNBIND1)
70    (JMPIFNOT L86)
72    L72
72    (GETVALUE 0)                        ; P
74    (CAR&PUSH)
75    (GETVALUE&PUSH 1)                   ; VAR
77    (JSR&PUSH L0)
80    (GETVALUE 0)                        ; P
82    (CDR)
83    (JMP L123)
85    L85
85    (UNBIND1)
86    L86
86    (GETVALUE 0)                        ; P
88    (CAR&PUSH)
89    (GETVALUE&PUSH 1)                   ; VAR
91    (JSR&PUSH L0)
94    (GETVALUE 0)                        ; P
96    (CDR&PUSH)
97    (T&PUSH)
98    (CALL&PUSH 3 7)                     ; RATTI
101   (CALL1&PUSH 8)                      ; RATFIX
103   (GETVALUE 0)                        ; P
105   (CAR&PUSH)
106   (LOAD&PUSH 2)
107   (T&PUSH)
108   (CALL&PUSH 3 7)                     ; RATTI
111   (CALL2&PUSH 9)                      ; RATDIF
113   (GETVALUE 0)                        ; P
115   (CDR&PUSH)
116   (GETVALUE 0)                        ; P
118   (CDR&PUSH)
119   (T&PUSH)
120   (CALL 3 7)                          ; RATTI
123   L123
123   (PUSH)
124   (CALL2 6)                           ; RATQU
126   (SKIP 1)
128   (JMP L163)
130   L130
130   (GETVALUE 0)                        ; P
132   (CAR&PUSH)
133   (GETVALUE 0)                        ; P
135   (CDR)
136   (CAR&PUSH)
137   (GETVALUE 0)                        ; P
139   (CDR)
140   (CDR)
141   (CAR&PUSH)
142   (GETVALUE&PUSH 1)                   ; VAR
144   (CALL&PUSH 4 10)                    ; SPDERIVATIVE1
147   (GETVALUE 0)                        ; P
149   (CAR&PUSH)
150   (GETVALUE 0)                        ; P
152   (CDR)
153   (CDR)
154   (CDR)
155   (CONS&PUSH)
156   (GETVALUE&PUSH 1)                   ; VAR
158   (JSR&PUSH L0)
161   (CALL2 11)                          ; RATPL
163   L163
163   (UNBIND 2)
165   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SPDERIVATIVE1 (VAR1 DEG COEFF ...) ...)-17|
(CONST 0) = SPDERIVATIVE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPDERIVATIVE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPDERIVATIVE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPDERIVATIVE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPDERIVATIVE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPDERIVATIVE1
8     (SKIP&RET 1)


Disassembly of function SPDERIVATIVE1
(CONST 0) = VAR
(CONST 1) = 1
(CONST 2) = RATEXPT
(CONST 3) = PCTIMES
(CONST 4) = RATTI
(CONST 5) = A
(CONST 6) = B
(CONST 7) = (0 . 1)
(CONST 8) = 0
(CONST 9) = SPDERIVATIVE
(CONST 10) = RISCHDIFF
(CONST 11) = RATPL
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A VAR)
85 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 7)
4     (GETVALUE 0)                        ; VAR
6     (JMPIFEQ L98)
9     (GETVALUE 0)                        ; VAR
11    (BIND 5)                            ; A
13    (LOAD 10)
14    (BIND 6)                            ; B
16    (GETVALUE&PUSH 5)                   ; A
18    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
20    (GETVALUE&PUSH 6)                   ; B
22    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
24    (CALLSR 1 48)                       ; >
27    (UNBIND 2)
29    (JMPIF L120)
32    (LOAD&PUSH 6)
33    (JMPIFEQTO 8 L123)                  ; 0
37    (LOAD&PUSH 7)
38    (CONST&PUSH 1)                      ; 1
39    (CONST&PUSH 1)                      ; 1
40    (LIST&PUSH 3)
42    (CONST 1)                           ; 1
43    (CONS&PUSH)
44    (LOAD&PUSH 7)
45    (CALL2&PUSH 2)                      ; RATEXPT
47    (LOAD&PUSH 6)
48    (GETVALUE&PUSH 0)                   ; VAR
50    (CALL2&PUSH 9)                      ; SPDERIVATIVE
52    (T&PUSH)
53    (CALL&PUSH 3 4)                     ; RATTI
56    (LOAD&PUSH 7)
57    (JMPIFEQTO 1 L130)                  ; 1
61    (LOAD&PUSH 7)
62    (LOAD&PUSH 7)
63    (LOAD&PUSH 10)
64    (CONST&PUSH 1)                      ; 1
65    (CONST&PUSH 1)                      ; 1
66    (LIST&PUSH 3)
68    (CONST 1)                           ; 1
69    (CONS&PUSH)
70    (LOAD&DEC&PUSH 10)
72    (CALL2&PUSH 2)                      ; RATEXPT
74    (T&PUSH)
75    (CALL&PUSH 3 4)                     ; RATTI
78    (T&PUSH)
79    (CALL 3 4)                          ; RATTI
82    L82
82    (PUSH)
83    (LOAD&PUSH 9)
84    (CONST&PUSH 10)                     ; RISCHDIFF
85    (PUSH-UNBOUND 1)
87    (CALLS2&PUSH 132)                   ; GET
89    (T&PUSH)
90    (CALL&PUSH 3 4)                     ; RATTI
93    (CALL2 11)                          ; RATPL
95    L95
95    (UNBIND1)
96    (SKIP&RET 5)
98    L98
98    (GETVALUE&PUSH 0)                   ; VAR
100   (CONST&PUSH 1)                      ; 1
101   (CONST&PUSH 1)                      ; 1
102   (LIST&PUSH 3)
104   (CONST 1)                           ; 1
105   (CONS&PUSH)
106   (LOAD&DEC&PUSH 7)
108   (CALL2&PUSH 2)                      ; RATEXPT
110   (LOAD&PUSH 7)
111   (LOAD&PUSH 7)
112   (CALL2&PUSH 3)                      ; PCTIMES
114   (T&PUSH)
115   (CALL 3 4)                          ; RATTI
118   (JMP L95)
120   L120
120   (CONST 7)                           ; (0 . 1)
121   (JMP L95)
123   L123
123   (LOAD&PUSH 5)
124   (GETVALUE&PUSH 0)                   ; VAR
126   (CALL2 9)                           ; SPDERIVATIVE
128   (JMP L95)
130   L130
130   (LOAD 6)
131   (JMP L82)


Disassembly of function #:|(DEFUN POLYLOGP (EXP &OPTIONAL SUB) ...)-18|
(CONST 0) = POLYLOGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLYLOGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLYLOGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLYLOGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLYLOGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLYLOGP
8     (SKIP&RET 1)


Disassembly of function POLYLOGP
(CONST 0) = EXP
(CONST 1) = MQAPPLYP
(CONST 2) = SUBFUNNAME
(CONST 3) = $LI
(CONST 4) = SUBFUNSUBS
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (EXP)
22 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (UNBOUND->NIL 4)
5     (GETVALUE&PUSH 0)                   ; EXP
7     (CALL1 1)                           ; MQAPPLYP
9     (JMPIFNOT1 L31)
11    (GETVALUE&PUSH 0)                   ; EXP
13    (CALL1&PUSH 2)                      ; SUBFUNNAME
15    (CONST 3)                           ; $LI
16    (EQ)
17    (JMPIFNOT1 L31)
19    (LOAD 4)
20    (NOT)
21    (JMPIF1 L31)
23    (LOAD&PUSH 4)
24    (GETVALUE&PUSH 0)                   ; EXP
26    (CALL1 4)                           ; SUBFUNSUBS
28    (CAR&PUSH)
29    (CALLS2 2)                          ; EQUAL
31    L31
31    (UNBIND1)
32    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RISCHINT (EXP INTVAR &AUX ...) ...)-19|
(CONST 0) = RISCHINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHINT
8     (SKIP&RET 1)


Disassembly of function RISCHINT
(CONST 0) = EXP
(CONST 1) = INTVAR
(CONST 2) = $LOGARC
(CONST 3) = $EXPONENTIALIZE
(CONST 4) = $ALGEBRAIC
(CONST 5) = $GCD
(CONST 6) = IMPLICIT-REAL
(CONST 7) = $%E/_TO/_NUMLOG
(CONST 8) = $LOGSIMP
(CONST 9) = TRIGINT
(CONST 10) = OPERATOR
(CONST 11) = Y
(CONST 12) = VAR
(CONST 13) = RATFORM
(CONST 14) = LIFLAG
(CONST 15) = MAINVAR
(CONST 16) = VARLIST
(CONST 17) = GENVAR
(CONST 18) = HYPERTRIGINT
(CONST 19) = $RATFAC
(CONST 20) = $RATALGDENOM
(CONST 21) = SPECREPP
(CONST 22) = SPECDISREP
(CONST 23) = MNUMP
(CONST 24) = "Attempt to integrate wrt a number: ~:M"
(CONST 25) = MERROR
(CONST 26) = ISINOP
(CONST 27) = RISCHFORM
(CONST 28) = TRIGIN1
(CONST 29) = HYPERTRIGINT1
(CONST 30) = INTSETUP
(CONST 31) = RATF
(CONST 32) = ALGPGET
(CONST 33) = ORMAPC
(CONST 34) = *GCDL*
(CONST 35) = GETRISCHVAR
(CONST 36) = TRYRISCH
(CONST 37) = DISREP
(CONST 38) = (MPLUS)
(CONST 39) = SIMPLIFY
(CONST 40) = (%INTEGRATE)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(GENVAR MAINVAR *GCDL* VARLIST RATFORM Y OPERATOR HYPERTRIGINT TRIGINT INTVAR
 EXP)
writes special variables : (VAR $GCD $ALGEBRAIC GENVAR MAINVAR VARLIST RATFORM Y INTVAR EXP)
179 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; INTVAR
6     (NIL)
7     (BIND 2)                            ; $LOGARC
9     (NIL)
10    (BIND 3)                            ; $EXPONENTIALIZE
12    (CONST 4)                           ; $ALGEBRAIC
13    (BIND 5)                            ; $GCD
15    (T)
16    (BIND 4)                            ; $ALGEBRAIC
18    (T)
19    (BIND 6)                            ; IMPLICIT-REAL
21    (NIL)
22    (BIND 7)                            ; $%E/_TO/_NUMLOG
24    (NIL)
25    (BIND 8)                            ; $LOGSIMP
27    (NIL)
28    (BIND 9)                            ; TRIGINT
30    (NIL)
31    (BIND 10)                           ; OPERATOR
33    (NIL)
34    (BIND 11)                           ; Y
36    (NIL&PUSH)
37    (NIL)
38    (BIND 12)                           ; VAR
40    (NIL)
41    (BIND 13)                           ; RATFORM
43    (NIL)
44    (BIND 14)                           ; LIFLAG
46    (NIL)
47    (BIND 15)                           ; MAINVAR
49    (NIL)
50    (BIND 16)                           ; VARLIST
52    (NIL)
53    (BIND 17)                           ; GENVAR
55    (NIL)
56    (BIND 18)                           ; HYPERTRIGINT
58    (NIL)
59    (BIND 19)                           ; $RATFAC
61    (NIL)
62    (BIND 20)                           ; $RATALGDENOM
64    (GETVALUE&PUSH 0)                   ; EXP
66    (CALL1&JMPIFNOT 21 L75)             ; SPECREPP
69    (GETVALUE&PUSH 0)                   ; EXP
71    (CALL1 22)                          ; SPECDISREP
73    (SETVALUE 0)                        ; EXP
75    L75
75    (GETVALUE&PUSH 1)                   ; INTVAR
77    (CALL1&JMPIFNOT 21 L86)             ; SPECREPP
80    (GETVALUE&PUSH 1)                   ; INTVAR
82    (CALL1 22)                          ; SPECDISREP
84    (SETVALUE 1)                        ; INTVAR
86    L86
86    (GETVALUE&PUSH 1)                   ; INTVAR
88    (CALL1&JMPIFNOT 23 L96)             ; MNUMP
91    (CONST&PUSH 24)                     ; "Attempt to integrate wrt a number: ~:M"
92    (GETVALUE&PUSH 1)                   ; INTVAR
94    (CALL2 25)                          ; MERROR
96    L96
96    (GETVALUE 1)                        ; INTVAR
98    (JMPIFCONSP L108)
100   (GETVALUE&PUSH 0)                   ; EXP
102   (GETVALUE&PUSH 1)                   ; INTVAR
104   (CALL2&JMPIF 26 L278)               ; ISINOP
108   L108
108   (GETVALUE&PUSH 0)                   ; EXP
110   (CALL1 27)                          ; RISCHFORM
112   (GETVALUE 9)                        ; TRIGINT
114   (JMPIF L254)
117   (GETVALUE 18)                       ; HYPERTRIGINT
119   (JMPIF L262)
122   (GETVALUE 10)                       ; OPERATOR
124   (JMPIF L278)
127   (GETVALUE&PUSH 0)                   ; EXP
129   (GETVALUE&PUSH 1)                   ; INTVAR
131   (CALL2 30)                          ; INTSETUP
133   (SETVALUE 11)                       ; Y
135   (GETVALUE 10)                       ; OPERATOR
137   (JMPIF L278)
140   (GETVALUE 11)                       ; Y
142   (CAR)
143   (SETVALUE 13)                       ; RATFORM
145   (CDR)
146   (CDR)
147   (CAR)
148   (SETVALUE 16)                       ; VARLIST
150   (GETVALUE&PUSH 1)                   ; INTVAR
152   (CALL1 31)                          ; RATF
154   (CDR)
155   (CAR)
156   (CAR)
157   (SETVALUE 15)                       ; MAINVAR
159   (GETVALUE 13)                       ; RATFORM
161   (CDR)
162   (CDR)
163   (CDR)
164   (CAR)
165   (SETVALUE 17)                       ; GENVAR
167   (CONST&SYMBOL-FUNCTION&PUSH 32)     ; ALGPGET
169   (GETVALUE&PUSH 16)                  ; VARLIST
171   (CALL2&JMPIF 33 L182)               ; ORMAPC
174   (NIL)
175   (SETVALUE 4)                        ; $ALGEBRAIC
177   (GETVALUE 34)                       ; *GCDL*
179   (CAR)
180   (SETVALUE 5)                        ; $GCD
182   L182
182   (CALL0 35)                          ; GETRISCHVAR
184   (SETVALUE 12)                       ; VAR
186   (GETVALUE 11)                       ; Y
188   (CDR&PUSH)
189   (GETVALUE&PUSH 15)                  ; MAINVAR
191   (CALL2 36)                          ; TRYRISCH
193   (STORE 27)
195   (GETVALUE&PUSH 13)                  ; RATFORM
197   (GETVALUE&PUSH 16)                  ; VARLIST
199   (LOAD 1)
200   (CDR)
201   (CDR&PUSH)
202   (LOAD&PUSH 1)
203   (CALLS1 169)                        ; SYSTEM::%RPLACA
205   (SKIP 2)
207   (GETVALUE&PUSH 13)                  ; RATFORM
209   (GETVALUE&PUSH 17)                  ; GENVAR
211   (LOAD 1)
212   (CDR)
213   (CDR)
214   (CDR&PUSH)
215   (LOAD&PUSH 1)
216   (CALLS1 169)                        ; SYSTEM::%RPLACA
218   (SKIP 2)
220   (LOAD 27)
222   (CDR)
223   (JMPIFATOM L272)
225   (T)
226   (BIND 8)                            ; $LOGSIMP
228   (T)
229   (BIND 7)                            ; $%E/_TO/_NUMLOG
231   (CONST&PUSH 38)                     ; (MPLUS)
233   (LOAD&CAR&PUSH 34)
235   (CALL1&PUSH 37)                     ; DISREP
237   (LOAD 35)
239   (CDR)
240   (LIST*&PUSH 2)
242   (CALL1 39)                          ; SIMPLIFY
244   (UNBIND 2)
246   L246
246   (UNBIND 9)
248   (SKIP 1)
250   (UNBIND 5)
252   (JMP L292)
254   L254
254   (GETVALUE&PUSH 0)                   ; EXP
256   (GETVALUE&PUSH 1)                   ; INTVAR
258   (CALL2 28)                          ; TRIGIN1
260   (JMP L246)
262   L262
262   (GETVALUE&PUSH 0)                   ; EXP
264   (GETVALUE&PUSH 1)                   ; INTVAR
266   (T&PUSH)
267   (CALL 3 29)                         ; HYPERTRIGINT1
270   (JMP L246)
272   L272
272   (LOAD&CAR&PUSH 27)
274   (CALL1 37)                          ; DISREP
276   (JMP L246)
278   L278
278   (CONST&PUSH 40)                     ; (%INTEGRATE)
280   (GETVALUE&PUSH 0)                   ; EXP
282   (GETVALUE&PUSH 1)                   ; INTVAR
284   (LIST 3)
286   (UNBIND 9)
288   (SKIP 1)
290   (UNBIND 5)
292   L292
292   (UNBIND 7)
294   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RISCHFORM (L) ...)-20|
(CONST 0) = RISCHFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHFORM
8     (SKIP&RET 1)


Disassembly of function RISCHFORM
(CONST 0) = L
(CONST 1) = INTVAR
(CONST 2) = ALIKE1
(CONST 3) = FREEOF
(CONST 4) = POLYLOGP
(CONST 5) = SUBFUNSUBS
(CONST 6) = 0
(CONST 7) = SUBFUNARGS
(CONST 8) = OPERATOR
(CONST 9) = 
#S(HASH-TABLE EQ (%LOG . 37) (%ERF . 37) (RAT . 37) (MEXPT . 37) (MPLUS . 37)
   (MTIMES . 37) (%ACSCH . 22) (%ASECH . 22) (%ACOTH . 22) (%ATANH . 22)
   (%ACOSH . 22) (%ASINH . 22) (%CSCH . 15) (%SECH . 15) (%COTH . 15)
   (%TANH . 15) (%COSH . 15) (%SINH . 15) (%ACSC . 8) (%ASEC . 8) (%ACOT . 8)
   (%ATAN . 8) (%ACOS . 8) (%ASIN . 8) (%CSC . 1) (%SEC . 1) (%COT . 1)
   (%TAN . 1) (%COS . 1) (%SIN . 1))
(CONST 10) = TRIGINT
(CONST 11) = $EXPONENTIALIZE
(CONST 12) = $LOGARC
(CONST 13) = HYPERTRIGINT
(CONST 14) = RISCHFORM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (INTVAR L)
writes special variables : (HYPERTRIGINT $LOGARC $EXPONENTIALIZE TRIGINT OPERATOR)
91 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFATOM L41)
7     (GETVALUE&PUSH 1)                   ; INTVAR
9     (GETVALUE&PUSH 0)                   ; L
11    (CALL2&JMPIF 2 L41)                 ; ALIKE1
14    (GETVALUE&PUSH 1)                   ; INTVAR
16    (GETVALUE&PUSH 0)                   ; L
18    (CALL2&JMPIF 3 L41)                 ; FREEOF
21    (GETVALUE&PUSH 0)                   ; L
23    (CALL1&JMPIF 4 L59)                 ; POLYLOGP
26    (GETVALUE 0)                        ; L
28    (CAR)
29    (CAR)
30    (JMPIFATOM L85)
32    L32
32    (GETVALUE 0)                        ; L
34    (CAR)
35    (CAR)
36    (SETVALUE 8)                        ; OPERATOR
38    L38
38    (UNBIND1)
39    (SKIP&RET 2)
41    L41
41    (NIL)
42    (JMP L38)
44    L44
44    (LOAD&PUSH 0)
45    (CONST&PUSH 6)                      ; 0
46    (CALLSR 1 48)                       ; >
49    (SKIP 1)
51    (JMPIFNOT L80)
53    L53
53    (GETVALUE&PUSH 0)                   ; L
55    (CALL1 7)                           ; SUBFUNARGS
57    (JMP L121)
59    L59
59    (GETVALUE&PUSH 0)                   ; L
61    (CALL1 5)                           ; SUBFUNSUBS
63    (CAR&PUSH)
64    (CALLS2&JMPIFNOT 12 L80)            ; INTEGERP
67    (GETVALUE&PUSH 0)                   ; L
69    (CALL1 5)                           ; SUBFUNSUBS
71    (CAR&PUSH)
72    (LOAD&PUSH 0)
73    (CALLS2&JMPIF 8 L44)                ; NUMBERP
76    (SKIP 1)
78    (JMPIF L53)
80    L80
80    (T)
81    (SETVALUE 8)                        ; OPERATOR
83    (JMP L38)
85    L85
85    (GETVALUE 0)                        ; L
87    (CAR)
88    (CAR)
89    
(JMPHASH 9 L32 L92 L92 L92 L92 L92 L92 L99 L99 L99 L99 L99 L99 L106 L106 L106
 L106 L106 L106 L113 L113 L113 L113 L113 L113 L128 L128 L128 L128 L128 L128)
92    L92
92    (T)
93    (SETVALUE 10)                       ; TRIGINT
95    (SETVALUE 11)                       ; $EXPONENTIALIZE
97    (JMP L118)
99    L99
99    (T)
100   (SETVALUE 10)                       ; TRIGINT
102   (SETVALUE 12)                       ; $LOGARC
104   (JMP L118)
106   L106
106   (T)
107   (SETVALUE 13)                       ; HYPERTRIGINT
109   (SETVALUE 11)                       ; $EXPONENTIALIZE
111   (JMP L118)
113   L113
113   (T)
114   (SETVALUE 13)                       ; HYPERTRIGINT
116   (SETVALUE 12)                       ; $LOGARC
118   L118
118   (GETVALUE 0)                        ; L
120   (CDR)
121   L121
121   (CAR&PUSH)
122   (JSR L0)
125   (JMP L38)
128   L128
128   (CONST&SYMBOL-FUNCTION&PUSH 14)     ; RISCHFORM
130   (GETVALUE 0)                        ; L
132   (CDR&PUSH)
133   (CALLSR 0 24)                       ; MAPC
136   (JMP L38)


Disassembly of function #:|(DEFUN HYPERTRIGINT1 (EXP VAR HYPERFUNC) ...)-21|
(CONST 0) = HYPERTRIGINT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYPERTRIGINT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYPERTRIGINT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYPERTRIGINT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYPERTRIGINT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYPERTRIGINT1
8     (SKIP&RET 1)


Disassembly of function HYPERTRIGINT1
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = RESIMPLIFY
(CONST 3) = INTEGRATOR
(CONST 4) = RISCHINT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP)
18 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (LOAD&JMPIF 7 L21)
9     (GETVALUE&PUSH 0)                   ; EXP
11    (CALL1&PUSH 2)                      ; RESIMPLIFY
13    (GETVALUE&PUSH 1)                   ; VAR
15    (CALL2 4)                           ; RISCHINT
17    L17
17    (UNBIND 2)
19    (SKIP&RET 4)
21    L21
21    (GETVALUE&PUSH 0)                   ; EXP
23    (CALL1&PUSH 2)                      ; RESIMPLIFY
25    (GETVALUE&PUSH 1)                   ; VAR
27    (CALL2 3)                           ; INTEGRATOR
29    (JMP L17)


Disassembly of function #:|(DEFUN TRIGIN1 (*EXP VAR) ...)-22|
(CONST 0) = TRIGIN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIGIN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGIN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIGIN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIGIN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIGIN1
8     (SKIP&RET 1)


Disassembly of function TRIGIN1
(CONST 0) = *EXP
(CONST 1) = VAR
(CONST 2) = HYPERTRIGINT1
(CONST 3) = YYY
(CONST 4) = $NUM
(CONST 5) = $EXPAND
(CONST 6) = $DENOM
(CONST 7) = DIV
(CONST 8) = RISCHP
(CONST 9) = RP-POLYLOGP
(CONST 10) = $LOGARC
(CONST 11) = $EXPONENTIALIZE
(CONST 12) = $%I
(CONST 13) = FREEOF
(CONST 14) = $LI
(CONST 15) = $REALPART
(CONST 16) = $RECTFORM
(CONST 17) = SRATSIMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (YYY VAR *EXP)
writes special variable : (YYY)
43 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; *EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; *EXP
8     (GETVALUE&PUSH 1)                   ; VAR
10    (NIL&PUSH)
11    (CALL 3 2)                          ; HYPERTRIGINT1
14    (BIND 3)                            ; YYY
16    (GETVALUE&PUSH 3)                   ; YYY
18    (CALL1&PUSH 4)                      ; $NUM
20    (CALL1&PUSH 5)                      ; $EXPAND
22    (GETVALUE&PUSH 3)                   ; YYY
24    (CALL1&PUSH 6)                      ; $DENOM
26    (CALL1&PUSH 5)                      ; $EXPAND
28    (CALL2 7)                           ; DIV
30    (SETVALUE 3)                        ; YYY
32    (GETVALUE 1)                        ; VAR
34    (BIND 8)                            ; RISCHP
36    (T)
37    (BIND 9)                            ; RP-POLYLOGP
39    (NIL)
40    (BIND 10)                           ; $LOGARC
42    (NIL)
43    (BIND 11)                           ; $EXPONENTIALIZE
45    (CONST&PUSH 12)                     ; $%I
46    (GETVALUE&PUSH 0)                   ; *EXP
48    (CALL2&JMPIFNOT 13 L57)             ; FREEOF
51    (CONST&PUSH 14)                     ; $LI
52    (GETVALUE&PUSH 3)                   ; YYY
54    (CALL2&JMPIF 13 L68)                ; FREEOF
57    L57
57    (GETVALUE&PUSH 3)                   ; YYY
59    (CALL1 16)                          ; $RECTFORM
61    L61
61    (PUSH)
62    (CALL1 17)                          ; SRATSIMP
64    (UNBIND 7)
66    (SKIP&RET 3)
68    L68
68    (GETVALUE&PUSH 3)                   ; YYY
70    (CALL1 15)                          ; $REALPART
72    (JMP L61)


Disassembly of function #:|(DEFUN TRYRISCH (EXP MAINVAR) ...)-23|
(CONST 0) = TRYRISCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRYRISCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRYRISCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRYRISCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRYRISCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRYRISCH
8     (SKIP&RET 1)


Disassembly of function TRYRISCH
(CONST 0) = EXP
(CONST 1) = MAINVAR
(CONST 2) = WHOLEPART
(CONST 3) = ROOTFACTOR
(CONST 4) = PARNUMER
(CONST 5) = PARDENOM
(CONST 6) = SWITCH1
(CONST 7) = LOGPTDX
(CONST 8) = EXPFLAG
(CONST 9) = EXPSTUFF
(CONST 10) = EXPINT
(CONST 11) = Y
(CONST 12) = (0 . 1)
(CONST 13) = VAR
(CONST 14) = RISCHFPROG
(CONST 15) = LEADOP
(CONST 16) = MEXPT
(CONST 17) = RISCHLOGDPROG
(CONST 18) = RISCHLOGEPROG
(CONST 19) = RISCHADD
(CONST 20) = TRYRISCH1
(CONST 21) = RISCHEXPPOLY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXPINT EXPSTUFF Y LOGPTDX EXP VAR MAINVAR)
writes special variables : (Y EXPFLAG EXPSTUFF)
78 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; MAINVAR
6     (NIL)
7     (BIND 2)                            ; WHOLEPART
9     (NIL)
10    (BIND 3)                            ; ROOTFACTOR
12    (NIL)
13    (BIND 4)                            ; PARNUMER
15    (NIL)
16    (BIND 5)                            ; PARDENOM
18    (NIL)
19    (BIND 6)                            ; SWITCH1
21    (NIL)
22    (BIND 7)                            ; LOGPTDX
24    (NIL)
25    (BIND 8)                            ; EXPFLAG
27    (NIL)
28    (BIND 9)                            ; EXPSTUFF
30    (NIL)
31    (BIND 10)                           ; EXPINT
33    (NIL)
34    (BIND 11)                           ; Y
36    (CONST 12)                          ; (0 . 1)
37    (SETVALUE 9)                        ; EXPSTUFF
39    (GETVALUE&PUSH 1)                   ; MAINVAR
41    (GETVALUE 13)                       ; VAR
43    (JMPIFEQ L69)
45    (GETVALUE&PUSH 13)                  ; VAR
47    (CONST&PUSH 15)                     ; LEADOP
48    (PUSH-UNBOUND 1)
50    (CALLS2&PUSH 132)                   ; GET
52    (JMPIFNOTEQTO 16 L58)               ; MEXPT
55    (T)
56    (SETVALUE 8)                        ; EXPFLAG
58    L58
58    (GETVALUE&PUSH 0)                   ; EXP
60    (CALL1 17)                          ; RISCHLOGDPROG
62    (SETVALUE 11)                       ; Y
64    (GETVALUE&PUSH 7)                   ; LOGPTDX
66    (NIL&PUSH)
67    (JMP L100)
69    L69
69    (GETVALUE&PUSH 0)                   ; EXP
71    (CALL1 14)                          ; RISCHFPROG
73    (JMP L124)
75    L75
75    (PUSH)
76    (GETVALUE&PUSH 13)                  ; VAR
78    (CALL2&PUSH 21)                     ; RISCHEXPPOLY
80    (GETVALUE&PUSH 11)                  ; Y
82    (CALL2 19)                          ; RISCHADD
84    (JMP L124)
86    L86
86    (LOAD&CAR&STORE 1 0)
89    (PUSH)
90    (CALL1&PUSH 18)                     ; RISCHLOGEPROG
92    (GETVALUE&PUSH 11)                  ; Y
94    (CALL2 19)                          ; RISCHADD
96    (SETVALUE 11)                       ; Y
98    (LOAD&CDR&STORE 1)
100   L100
100   (LOAD&PUSH 1)
101   (CALLS1&JMPIFNOT 146 L86)           ; ENDP
104   (SKIP 2)
106   (GETVALUE&PUSH 9)                   ; EXPSTUFF
108   (GETVALUE&PUSH 1)                   ; MAINVAR
110   (CALL2&PUSH 20)                     ; TRYRISCH1
112   (GETVALUE&PUSH 11)                  ; Y
114   (CALL2 19)                          ; RISCHADD
116   (SETVALUE 11)                       ; Y
118   (GETVALUE 10)                       ; EXPINT
120   (JMPIF L75)
122   (GETVALUE 11)                       ; Y
124   L124
124   (UNBIND 12)
126   (SKIP&RET 3)


Disassembly of function #:|(DEFUN TRYRISCH1 (EXP MAINVAR) ...)-24|
(CONST 0) = TRYRISCH1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRYRISCH1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRYRISCH1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRYRISCH1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRYRISCH1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRYRISCH1
8     (SKIP&RET 1)


Disassembly of function TRYRISCH1
(CONST 0) = EXP
(CONST 1) = MAINVAR
(CONST 2) = VARLIST
(CONST 3) = GETRISCHVAR
(CONST 4) = VAR
(CONST 5) = TRYRISCH
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MAINVAR EXP VARLIST)
16 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; MAINVAR
6     (GETVALUE&PUSH 2)                   ; VARLIST
8     (CALLS2 72)                         ; REVERSE
10    (CDR&PUSH)
11    (CALLS2 72)                         ; REVERSE
13    (BIND 2)                            ; VARLIST
15    (CALL0 3)                           ; GETRISCHVAR
17    (BIND 4)                            ; VAR
19    (GETVALUE&PUSH 0)                   ; EXP
21    (GETVALUE&PUSH 1)                   ; MAINVAR
23    (CALL2 5)                           ; TRYRISCH
25    (UNBIND 4)
27    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RISCHFPROG (RAT) ...)-25|
(CONST 0) = RISCHFPROG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHFPROG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHFPROG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHFPROG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHFPROG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHFPROG
8     (SKIP&RET 1)


Disassembly of function RISCHFPROG
(CONST 0) = ROOTFACTOR
(CONST 1) = PARDENOM
(CONST 2) = PARNUMER
(CONST 3) = LOGPTDX
(CONST 4) = WHOLEPART
(CONST 5) = SWITCH1
(CONST 6) = DPROG
(CONST 7) = RATREP*
(CONST 8) = VARLIST
(CONST 9) = GENVAR
(CONST 10) = FIRSTN
(CONST 11) = EPROG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOGPTDX GENVAR VARLIST)
32 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; ROOTFACTOR
3     (NIL)
4     (BIND 1)                            ; PARDENOM
6     (NIL)
7     (BIND 2)                            ; PARNUMER
9     (NIL)
10    (BIND 3)                            ; LOGPTDX
12    (NIL)
13    (BIND 4)                            ; WHOLEPART
15    (NIL)
16    (BIND 5)                            ; SWITCH1
18    (LOAD&PUSH 19)
19    (CALL1&PUSH 6)                      ; DPROG
21    (CALL1 7)                           ; RATREP*
23    (CDR&PUSH)
24    (GETVALUE&PUSH 8)                   ; VARLIST
26    (GETVALUE&PUSH 8)                   ; VARLIST
28    (CALLS2&PUSH 71)                    ; LENGTH
30    (GETVALUE&PUSH 9)                   ; GENVAR
32    (CALL2 10)                          ; FIRSTN
34    (BIND 9)                            ; GENVAR
36    (LOAD 3)
37    (BIND 8)                            ; VARLIST
39    (CONST&PUSH 11)                     ; EPROG
40    (GETVALUE&PUSH 3)                   ; LOGPTDX
42    (CALLSR 0 22)                       ; MAPCAR
45    (UNBIND 2)
47    (SKIP 1)
49    (CONS)
50    (UNBIND 6)
52    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RISCHLOGDPROG (RATARG) ...)-26|
(CONST 0) = RISCHLOGDPROG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHLOGDPROG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHLOGDPROG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHLOGDPROG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHLOGDPROG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHLOGDPROG
8     (SKIP&RET 1)


Disassembly of function RISCHLOGDPROG
(CONST 0) = KLTH
(CONST 1) = ANS
(CONST 2) = (0 . 1)
(CONST 3) = VAR
(CONST 4) = B
(CONST 5) = A
(CONST 6) = RISCHLOGPOLY
(CONST 7) = RATDENOMINATOR
(CONST 8) = APROG
(CONST 9) = RATNUMERATOR
(CONST 10) = CPROG
(CONST 11) = ROOTFACTOR
(CONST 12) = PARNUMER
(CONST 13) = 1
(CONST 14) = LEADOP
(CONST 15) = MEXPT
(CONST 16) = GENNEGS
(CONST 17) = NEG
(CONST 18) = EXPINT
(CONST 19) = PDEGREE
(CONST 20) = MAINVAR
(CONST 21) = SPDERIVATIVE
(CONST 22) = BPROG
(CONST 23) = 0
(CONST 24) = RATTI
(CONST 25) = PEXPT
(CONST 26) = RATFIX
(CONST 27) = RATMINUS
(CONST 28) = RATQU
(CONST 29) = RATPL
(CONST 30) = RATDIVIDE
(CONST 31) = LOGPTDX
(CONST 32) = X
(CONST 33) = FIXNUMP
(CONST 34) = WHOLEPART
(CONST 35) = PDIVIDE
(CONST 36) = RISCHADD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (WHOLEPART LOGPTDX ANS X MAINVAR EXPINT KLTH PARNUMER ROOTFACTOR B A VAR)
writes special variables : (ROOTFACTOR KLTH PARNUMER LOGPTDX EXPINT ANS)
275 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; KLTH
3     (PUSH-NIL 7)
5     (NIL)
6     (BIND 1)                            ; ANS
8     (CONST 2)                           ; (0 . 1)
9     (SETVALUE 1)                        ; ANS
11    (LOAD 14)
12    (CDR)
13    (JMPIFATOM L80)
16    (GETVALUE&PUSH 3)                   ; VAR
18    (LOAD 15)
20    (CDR)
21    (CAR)
22    (BIND 4)                            ; B
24    (LOAD 3)
25    (BIND 5)                            ; A
27    (GETVALUE&PUSH 5)                   ; A
29    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
31    (GETVALUE&PUSH 4)                   ; B
33    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
35    (CALLSR 1 48)                       ; >
38    (UNBIND 2)
40    (SKIP 1)
42    (JMPIF L80)
44    (LOAD&PUSH 14)
45    (CALL1&PUSH 7)                      ; RATDENOMINATOR
47    (CALL1 8)                           ; APROG
49    (LOAD&PUSH 14)
50    (CALL1&PUSH 9)                      ; RATNUMERATOR
52    (LOAD&PUSH 15)
53    (CALL1&PUSH 7)                      ; RATDENOMINATOR
55    (CALL2 10)                          ; CPROG
57    (GETVALUE&PUSH 11)                  ; ROOTFACTOR
59    (CALLS2&PUSH 72)                    ; REVERSE
61    (GETVALUE&PUSH 12)                  ; PARNUMER
63    (CALLS2&PUSH 72)                    ; REVERSE
65    (GETVALUE&PUSH 11)                  ; ROOTFACTOR
67    (CALLS2 71)                         ; LENGTH
69    (BIND 0)                            ; KLTH
71    (LOAD 4)
72    (BIND 11)                           ; ROOTFACTOR
74    (LOAD 6)
75    (BIND 12)                           ; PARNUMER
77    (JMP L350)
80    L80
80    (LOAD 14)
81    (JMP L417)
84    L84
84    (LOAD&PUSH 20)
85    (GETVALUE 12)                       ; PARNUMER
87    (CAR)
88    (CAR)
89    (CDR&PUSH)
90    (GETVALUE 12)                       ; PARNUMER
92    (CAR)
93    (CDR&PUSH)
94    (CALL 3 16)                         ; GENNEGS
97    (JMP L136)
99    L99
99    (GETVALUE 12)                       ; PARNUMER
101   (CAR)
102   (JMPIFATOM L120)
104   (GETVALUE 12)                       ; PARNUMER
106   (CAR)
107   (CAR)
108   (JMPIFATOM L120)
110   (GETVALUE 12)                       ; PARNUMER
112   (CAR)
113   (CAR)
114   (CAR&PUSH)
115   (LOAD 21)
117   (CAR)
118   (JMPIFEQ L84)
120   L120
120   (CONST&PUSH 17)                     ; NEG
121   (GETVALUE 12)                       ; PARNUMER
123   (CAR&PUSH)
124   (LOAD&CAR&PUSH 22)
126   (GETVALUE&PUSH 0)                   ; KLTH
128   (LOAD 24)
130   (CDR)
131   (CAR&PUSH)
132   (LIST&PUSH 5)
134   (LIST 1)
136   L136
136   (PUSH)
137   (GETVALUE&PUSH 18)                  ; EXPINT
139   (CALLSR 2 34)                       ; APPEND
142   (SETVALUE 18)                       ; EXPINT
144   (JMP L333)
147   L147
147   (GETVALUE 11)                       ; ROOTFACTOR
149   (CAR)
150   (STORE 20)
152   (JMPIFATOM L333)
155   (LOAD&CAR&PUSH 20)
157   (CONST&PUSH 14)                     ; LEADOP
158   (PUSH-UNBOUND 1)
160   (CALLS2&PUSH 132)                   ; GET
162   (JMPIFNOTEQTO 15 L173)              ; MEXPT
165   (LOAD 20)
167   (CDR)
168   (CDR)
169   (CDR)
170   (JMPIFNOT L99)
173   L173
173   (LOAD&PUSH 20)
174   (GETVALUE&PUSH 3)                   ; VAR
176   (CALL2&PUSH 19)                     ; PDEGREE
178   (CALLS2&JMPIF 145 L333)             ; ZEROP
182   (LOAD&PUSH 20)
183   (GETVALUE&PUSH 20)                  ; MAINVAR
185   (CALL2 21)                          ; SPDERIVATIVE
187   (STORE 19)
189   (LOAD&PUSH 20)
190   (LOAD&PUSH 20)
191   (CALL1&PUSH 9)                      ; RATNUMERATOR
193   (CALL2 22)                          ; BPROG
195   (STORE 18)
197   (GETVALUE 12)                       ; PARNUMER
199   (CAR)
200   (STORE 17)
202   (GETVALUE&PUSH 0)                   ; KLTH
204   (CALLS2&PUSH 151)                   ; 1-
206   (JMP L315)
209   L209
209   (GETVALUE&PUSH 32)                  ; X
211   (CALLS2&JMPIFNOT 15 L225)           ; FLOATP
214   L214
214   (GETVALUE&PUSH 32)                  ; X
216   (CALLS2 145)                        ; ZEROP
218   (UNBIND1)
219   (JMPIFNOT L391)
222   (JMP L415)
225   L225
225   (UNBIND1)
226   (JMPIFNOT L391)
229   (JMP L415)
232   L232
232   (GETVALUE&PUSH 32)                  ; X
234   (CALLS2 145)                        ; ZEROP
236   (UNBIND1)
237   (JMPIFNOT L423)
240   (JMP L415)
243   L243
243   (LOAD&PUSH 18)
244   (LOAD&CAR&PUSH 20)
246   (T&PUSH)
247   (CALL 3 24)                         ; RATTI
250   (STORE 16)
252   (LOAD&PUSH 18)
253   (LOAD&CDR&PUSH 20)
255   (LOAD&PUSH 22)
256   (CALL1&PUSH 7)                      ; RATDENOMINATOR
258   (T&PUSH)
259   (CALL&PUSH 3 24)                    ; RATTI
262   (T&PUSH)
263   (CALL 3 24)                         ; RATTI
266   (STORE 15)
268   (LOAD&PUSH 21)
269   (LOAD&PUSH 1)
270   (CALL2 25)                          ; PEXPT
272   (STORE 17)
274   (GETVALUE&PUSH 1)                   ; ANS
276   (LOAD&PUSH 16)
277   (CALL1&PUSH 26)                     ; RATFIX
279   (CALL1&PUSH 27)                     ; RATMINUS
281   (LOAD&PUSH 2)
282   (LOAD&PUSH 20)
283   (T&PUSH)
284   (CALL&PUSH 3 24)                    ; RATTI
287   (CALL2&PUSH 28)                     ; RATQU
289   (CALL2 29)                          ; RATPL
291   (SETVALUE 1)                        ; ANS
293   (LOAD&PUSH 16)
294   (LOAD&PUSH 16)
295   (GETVALUE&PUSH 20)                  ; MAINVAR
297   (CALL2&PUSH 21)                     ; SPDERIVATIVE
299   (LOAD&PUSH 2)
300   (CALL2&PUSH 28)                     ; RATQU
302   (CALL2 29)                          ; RATPL
304   (STORE 18)
306   (PUSH)
307   (LOAD&PUSH 18)
308   (CALL2 30)                          ; RATDIVIDE
310   (CDR)
311   (STORE 18)
313   (LOAD&DEC&STORE 0)
315   L315
315   (LOAD&PUSH 0)
316   (CONST&PUSH 23)                     ; 0
317   (CALLSR&JMPIFNOT 1 45 L243)         ; =
322   (SKIP 1)
324   (LOAD&PUSH 17)
325   (LOAD&PUSH 21)
326   (CALL2&PUSH 28)                     ; RATQU
328   (GETVALUE 31)                       ; LOGPTDX
330   (CONS)
331   (SETVALUE 31)                       ; LOGPTDX
333   L333
333   (GETVALUE 11)                       ; ROOTFACTOR
335   (CDR&PUSH)
336   (GETVALUE 12)                       ; PARNUMER
338   (CDR)
339   (SETVALUE 12)                       ; PARNUMER
341   (GETVALUE&PUSH 0)                   ; KLTH
343   (CALLS2 151)                        ; 1-
345   (SETVALUE 0)                        ; KLTH
347   (POP)
348   (SETVALUE 11)                       ; ROOTFACTOR
350   L350
350   (GETVALUE&PUSH 0)                   ; KLTH
352   (CONST&PUSH 13)                     ; 1
353   (CALLSR&JMPIFNOT 1 45 L147)         ; =
358   (UNBIND 3)
360   (SKIP 2)
362   (GETVALUE 12)                       ; PARNUMER
364   (CAR&PUSH)
365   (GETVALUE 11)                       ; ROOTFACTOR
367   (CAR&PUSH)
368   (CALL2&PUSH 28)                     ; RATQU
370   (GETVALUE 31)                       ; LOGPTDX
372   (CONS)
373   (SETVALUE 31)                       ; LOGPTDX
375   (GETVALUE 1)                        ; ANS
377   (BIND 32)                           ; X
379   (GETVALUE&PUSH 32)                  ; X
381   (CALL1&JMPIF 33 L214)               ; FIXNUMP
385   (GETVALUE 32)                       ; X
387   (JMPIFATOM L209)
390   (UNBIND1)
391   L391
391   (GETVALUE 1)                        ; ANS
393   (CAR)
394   (BIND 32)                           ; X
396   (GETVALUE&PUSH 32)                  ; X
398   (CALL1&JMPIF 33 L232)               ; FIXNUMP
402   (GETVALUE 32)                       ; X
404   (JMPIFCONSP L422)
406   (GETVALUE&PUSH 32)                  ; X
408   (CALLS2&JMPIF 15 L232)              ; FLOATP
412   (UNBIND1)
413   (JMPIFNOT L423)
415   L415
415   (GETVALUE 34)                       ; WHOLEPART
417   L417
417   (PUSH)
418   (CALL1 6)                           ; RISCHLOGPOLY
420   (JMP L451)
422   L422
422   (UNBIND1)
423   L423
423   (GETVALUE&PUSH 1)                   ; ANS
425   (CALL1&PUSH 9)                      ; RATNUMERATOR
427   (GETVALUE&PUSH 1)                   ; ANS
429   (CALL1&PUSH 7)                      ; RATDENOMINATOR
431   (CALL2 35)                          ; PDIVIDE
433   (CDR)
434   (CAR)
435   (STORE 6)
436   (PUSH)
437   (GETVALUE&PUSH 1)                   ; ANS
439   (CALL1&PUSH 7)                      ; RATDENOMINATOR
441   (CALL2&PUSH 28)                     ; RATQU
443   (NIL)
444   (CONS&PUSH)
445   (GETVALUE&PUSH 34)                  ; WHOLEPART
447   (CALL1&PUSH 6)                      ; RISCHLOGPOLY
449   (CALL2 36)                          ; RISCHADD
451   L451
451   (UNBIND1)
452   (SKIP 7)
454   (UNBIND1)
455   (SKIP&RET 2)


Disassembly of function #:|(DEFUN GENNEGS (DENOM NUM NUMDENOM) ...)-27|
(CONST 0) = GENNEGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GENNEGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GENNEGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GENNEGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GENNEGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GENNEGS
8     (SKIP&RET 1)


Disassembly of function GENNEGS
(CONST 0) = NUM
(CONST 1) = NEG
(CONST 2) = KLTH
(CONST 3) = RATTI
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (KLTH NUM)
35 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; NUM
3     (GETVALUE 0)                        ; NUM
5     (JMPIFNOT L45)
7     (CONST&PUSH 1)                      ; NEG
8     (GETVALUE 0)                        ; NUM
10    (CDR)
11    (CAR&PUSH)
12    (LOAD&CAR&PUSH 8)
14    (GETVALUE&PUSH 2)                   ; KLTH
16    (GETVALUE 0)                        ; NUM
18    (CAR&PUSH)
19    (CALLSR&PUSH 1 54)                  ; -
22    (LOAD&PUSH 8)
23    (LOAD 11)
24    (CDR)
25    (CDR)
26    (CAR&PUSH)
27    (T&PUSH)
28    (CALL&PUSH 3 3)                     ; RATTI
31    (LIST&PUSH 5)
33    (LOAD&PUSH 7)
34    (GETVALUE 0)                        ; NUM
36    (CDR)
37    (CDR&PUSH)
38    (LOAD&PUSH 7)
39    (JSR L0)
41    (CONS)
42    L42
42    (UNBIND1)
43    (SKIP&RET 4)
45    L45
45    (NIL)
46    (JMP L42)


Disassembly of function #:|(DEFUN RISCHLOGEPROG (P) ...)-28|
(CONST 0) = RISCHLOGEPROG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHLOGEPROG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHLOGEPROG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHLOGEPROG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHLOGEPROG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHLOGEPROG
8     (SKIP&RET 1)


Disassembly of function RISCHLOGEPROG
(CONST 0) = P
(CONST 1) = X
(CONST 2) = FIXNUMP
(CONST 3) = ((0 . 1) 0)
(CONST 4) = RATNUMERATOR
(CONST 5) = RATDENOMINATOR
(CONST 6) = OLDCONTENT
(CONST 7) = SWITCH1
(CONST 8) = INTFACTOR
(CONST 9) = PARDENOM
(CONST 10) = PARNUMER
(CONST 11) = CPROG
(CONST 12) = RATQU
(CONST 13) = ANS
(CONST 14) = RATTI
(CONST 15) = RISCHADD
(CONST 16) = EXPFLAG
(CONST 17) = NEG
(CONST 18) = EXPINT
(CONST 19) = VAR
(CONST 20) = RISCHDIFF
(CONST 21) = (1 1)
(CONST 22) = PTIMES
(CONST 23) = MAINVAR
(CONST 24) = SPDERIVATIVE
(CONST 25) = RATFIX
(CONST 26) = RATDIF
(CONST 27) = RISCH-CONSTP
(CONST 28) = EXPSTUFF
(CONST 29) = (0 . 1)
(CONST 30) = (MTIMES)
(CONST 31) = DISREP
(CONST 32) = LOGMABS
(CONST 33) = $LIFLAG
(CONST 34) = CHANGEVP
(CONST 35) = (%INTEGRATE)
(CONST 36) = SIMPLIFY
(CONST 37) = INTVAR
(CONST 38) = RISCHEXPR
(CONST 39) = SUB
(CONST 40) = $CHANGEVAR
(CONST 41) = FREEOF
(CONST 42) = %INTEGRATE
(CONST 43) = SDIFF
(CONST 44) = RISCHINT
(CONST 45) = (0 . 1)
(CONST 46) = MAXIMA-SUBSTITUTE
(CONST 47) = RISCHNOUN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(INTVAR CHANGEVP $LIFLAG MAINVAR SWITCH1 VAR EXPSTUFF EXPFLAG EXPINT ANS
 PARDENOM PARNUMER X P)
writes special variables : (PARDENOM EXPSTUFF EXPINT ANS SWITCH1 PARNUMER)
277 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (PUSH-NIL 8)
5     (GETVALUE 0)                        ; P
7     (BIND 1)                            ; X
9     (GETVALUE&PUSH 1)                   ; X
11    (CALL1&JMPIF 2 L23)                 ; FIXNUMP
14    (GETVALUE 1)                        ; X
16    (JMPIFCONSP L37)
18    (GETVALUE&PUSH 1)                   ; X
20    (CALLS2&JMPIFNOT 15 L32)            ; FLOATP
23    L23
23    (GETVALUE&PUSH 1)                   ; X
25    (CALLS2 145)                        ; ZEROP
27    (UNBIND1)
28    (JMPIFNOT L38)
30    (JMP L72)
32    L32
32    (UNBIND1)
33    (JMPIFNOT L38)
35    (JMP L72)
37    L37
37    (UNBIND1)
38    L38
38    (GETVALUE 0)                        ; P
40    (CAR)
41    (BIND 1)                            ; X
43    (GETVALUE&PUSH 1)                   ; X
45    (CALL1&JMPIF 2 L58)                 ; FIXNUMP
48    (GETVALUE 1)                        ; X
50    (JMPIFCONSP L246)
53    (GETVALUE&PUSH 1)                   ; X
55    (CALLS2&JMPIFNOT 15 L68)            ; FLOATP
58    L58
58    (GETVALUE&PUSH 1)                   ; X
60    (CALLS2 145)                        ; ZEROP
62    (UNBIND1)
63    (JMPIFNOT L247)
66    (JMP L72)
68    L68
68    (UNBIND1)
69    (JMPIFNOT L247)
72    L72
72    (CONST 3)                           ; ((0 . 1) 0)
73    (SKIP 8)
75    (JMP L436)
78    L78
78    (NIL)
79    (SETVALUE 10)                       ; PARNUMER
81    (T)
82    (SETVALUE 7)                        ; SWITCH1
84    (LOAD&PUSH 7)
85    (CALL1 6)                           ; OLDCONTENT
87    (STORE 7)
88    (CAR)
89    (STORE 3)
90    (LOAD 7)
91    (CDR)
92    (CAR)
93    (STORE 7)
94    (PUSH)
95    (LOAD&PUSH 7)
96    (CALL2 11)                          ; CPROG
98    (LOAD&PUSH 3)
99    (LOAD&PUSH 3)
100   (CALL2 12)                          ; RATQU
102   (STORE 1)
103   (GETVALUE&PUSH 10)                  ; PARNUMER
105   (GETVALUE&PUSH 9)                   ; PARDENOM
107   (CONST 3)                           ; ((0 . 1) 0)
108   (BIND 13)                           ; ANS
110   (LOAD&JMPIFNOT 4 L145)
113   L113
113   (LOAD&JMPIFNOT 3 L145)
116   (LOAD&PUSH 6)
117   (LOAD&CAR&PUSH 5)
119   (LOAD&CAR&PUSH 5)
121   (CALL2&PUSH 12)                     ; RATQU
123   (T&PUSH)
124   (CALL&PUSH 3 14)                    ; RATTI
127   (JSR&PUSH L0)
130   (GETVALUE&PUSH 13)                  ; ANS
132   (CALL2 15)                          ; RISCHADD
134   (SETVALUE 13)                       ; ANS
136   (LOAD&CDR&PUSH 4)
138   (LOAD&CDR&STORE 4)
140   (POP&STORE 4)
142   (LOAD&JMPIF 4 L113)
145   L145
145   (NIL)
146   (SETVALUE 7)                        ; SWITCH1
148   (GETVALUE 13)                       ; ANS
150   (UNBIND1)
151   (SKIP 10)
153   (JMP L436)
156   L156
156   (CONST&PUSH 17)                     ; NEG
157   (GETVALUE 0)                        ; P
159   (CONS&PUSH)
160   (GETVALUE 18)                       ; EXPINT
162   (CONS)
163   (SETVALUE 18)                       ; EXPINT
165   (CONST 3)                           ; ((0 . 1) 0)
166   (SKIP 8)
168   (JMP L436)
171   L171
171   (LOAD&PUSH 6)
172   (CALL1&PUSH 25)                     ; RATFIX
174   (LOAD&PUSH 8)
175   (LOAD&PUSH 3)
176   (T&PUSH)
177   (CALL&PUSH 3 14)                    ; RATTI
180   (CALL2 26)                          ; RATDIF
182   (JMP L347)
185   L185
185   (GETVALUE 16)                       ; EXPFLAG
187   (JMPIFNOT L203)
189   (GETVALUE&PUSH 28)                  ; EXPSTUFF
191   (CALL1&PUSH 25)                     ; RATFIX
193   (LOAD&PUSH 1)
194   (LOAD&PUSH 6)
195   (T&PUSH)
196   (CALL&PUSH 3 14)                    ; RATTI
199   (CALL2 26)                          ; RATDIF
201   (SETVALUE 28)                       ; EXPSTUFF
203   L203
203   (CONST&PUSH 29)                     ; (0 . 1)
204   (CONST&PUSH 30)                     ; (MTIMES)
206   (LOAD&PUSH 6)
207   (CALL1&PUSH 31)                     ; DISREP
209   (LOAD&PUSH 9)
210   (CALL1&PUSH 31)                     ; DISREP
212   (CALL1&PUSH 32)                     ; LOGMABS
214   (LIST&PUSH 3)
216   (LIST 2)
218   (SKIP 8)
220   (JMP L436)
223   L223
223   (CONST&PUSH 45)                     ; (0 . 1)
225   (GETVALUE&PUSH 19)                  ; VAR
227   (CONST&PUSH 38)                     ; RISCHEXPR
229   (PUSH-UNBOUND 1)
231   (CALLS2&PUSH 132)                   ; GET
233   (LOAD&PUSH 6)
234   (LOAD&PUSH 6)
235   (CALL&PUSH 3 46)                    ; MAXIMA-SUBSTITUTE
238   (LIST 2)
240   (UNBIND1)
241   (SKIP 10)
243   (JMP L436)
246   L246
246   (UNBIND1)
247   L247
247   (GETVALUE&PUSH 0)                   ; P
249   (CALL1 4)                           ; RATNUMERATOR
251   (STORE 7)
252   (GETVALUE&PUSH 0)                   ; P
254   (CALL1&PUSH 5)                      ; RATDENOMINATOR
256   (CALL1 6)                           ; OLDCONTENT
258   (STORE 6)
259   (CAR)
260   (STORE 2)
261   (LOAD 6)
262   (CDR)
263   (CAR)
264   (STORE 6)
265   (GETVALUE 7)                        ; SWITCH1
267   (JMPIF L278)
269   (LOAD&PUSH 6)
270   (CALL1 8)                           ; INTFACTOR
272   (SETVALUE 9)                        ; PARDENOM
274   (CDR)
275   (JMPIF L78)
278   L278
278   (GETVALUE 16)                       ; EXPFLAG
280   (JMPIFNOT L289)
282   (LOAD 6)
283   (CDR)
284   (CDR)
285   (CDR)
286   (JMPIFNOT L156)
289   L289
289   (GETVALUE 16)                       ; EXPFLAG
291   (JMPIFNOT L315)
293   (LOAD 6)
294   (CDR)
295   (CAR&PUSH)
296   (GETVALUE&PUSH 19)                  ; VAR
298   (CONST&PUSH 20)                     ; RISCHDIFF
299   (PUSH-UNBOUND 1)
301   (CALLS2&PUSH 132)                   ; GET
303   (GETVALUE&PUSH 19)                  ; VAR
305   (CONST 21)                          ; (1 1)
307   (CONS&PUSH)
308   (CALL2&PUSH 12)                     ; RATQU
310   (T&PUSH)
311   (CALL 3 14)                         ; RATTI
314   (STORE 0)
315   L315
315   (LOAD&PUSH 7)
316   (LOAD&PUSH 3)
317   (LOAD 8)
318   (CDR)
319   (CDR)
320   (CAR&PUSH)
321   (CALL2&PUSH 22)                     ; PTIMES
323   (CALL2 12)                          ; RATQU
325   (STORE 7)
326   (LOAD&PUSH 6)
327   (LOAD 7)
328   (CDR)
329   (CDR)
330   (CAR&PUSH)
331   (CALL2 12)                          ; RATQU
333   (STORE 6)
334   (PUSH)
335   (GETVALUE&PUSH 23)                  ; MAINVAR
337   (CALL2 24)                          ; SPDERIVATIVE
339   (STORE 5)
340   (LOAD&PUSH 7)
341   (GETVALUE 16)                       ; EXPFLAG
343   (JMPIF L171)
346   (LOAD 6)
347   L347
347   (PUSH)
348   (CALL2 12)                          ; RATQU
350   (STORE 4)
351   (PUSH)
352   (CALL1&JMPIF 27 L185)               ; RISCH-CONSTP
356   (GETVALUE 16)                       ; EXPFLAG
358   (JMPIFNOT L430)
361   (GETVALUE 33)                       ; $LIFLAG
363   (JMPIFNOT L430)
366   (GETVALUE 34)                       ; CHANGEVP
368   (JMPIFNOT L430)
370   (PUSH-UNBOUND 1)
372   (CALLS2&PUSH 143)                   ; GENSYM
374   (CONST&PUSH 35)                     ; (%INTEGRATE)
376   (GETVALUE&PUSH 0)                   ; P
378   (CALL1&PUSH 31)                     ; DISREP
380   (CALL1&PUSH 36)                     ; SIMPLIFY
382   (GETVALUE&PUSH 37)                  ; INTVAR
384   (LIST&PUSH 3)
386   (LOAD&PUSH 1)
387   (GETVALUE&PUSH 19)                  ; VAR
389   (CONST&PUSH 38)                     ; RISCHEXPR
391   (PUSH-UNBOUND 1)
393   (CALLS2&PUSH 132)                   ; GET
395   (CALL2&PUSH 39)                     ; SUB
397   (LOAD&PUSH 2)
398   (GETVALUE&PUSH 37)                  ; INTVAR
400   (CALL&PUSH 4 40)                    ; $CHANGEVAR
403   (NIL)
404   (BIND 34)                           ; CHANGEVP
406   (GETVALUE&PUSH 37)                  ; INTVAR
408   (LOAD&PUSH 4)
409   (CALL2&JMPIFNOT 41 L427)            ; FREEOF
412   (CONST&PUSH 42)                     ; %INTEGRATE
414   (LOAD&PUSH 4)
415   (LOAD&PUSH 6)
416   (CALL2&PUSH 43)                     ; SDIFF
418   (LOAD&PUSH 6)
419   (CALL2 44)                          ; RISCHINT
421   (STORE 4)
422   (PUSH)
423   (CALL2&JMPIF 41 L223)               ; FREEOF
427   L427
427   (UNBIND1)
428   (SKIP 2)
430   L430
430   (GETVALUE&PUSH 0)                   ; P
432   (CALL1 47)                          ; RISCHNOUN
434   (SKIP 8)
436   L436
436   (UNBIND1)
437   (SKIP&RET 2)


Disassembly of function #:|(DEFUN FINDINT (EXP) ...)-29|
(CONST 0) = FINDINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDINT
8     (SKIP&RET 1)


Disassembly of function FINDINT
(CONST 0) = EXP
(CONST 1) = %INTEGRATE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
26 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (JMPIFATOM L28)
7     (GETVALUE 0)                        ; EXP
9     (CAR)
10    (JMPIFATOM L20)
12    (GETVALUE 0)                        ; EXP
14    (CAR)
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 1 L31)                   ; %INTEGRATE
20    L20
20    (GETVALUE 0)                        ; EXP
22    (CDR&PUSH)
23    (JSR L0)
25    L25
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (NIL)
29    (JMP L25)
31    L31
31    (T)
32    (JMP L25)


Disassembly of function #:|(DEFUN LOGEQUIV (FN1 FN2) ...)-30|
(CONST 0) = LOGEQUIV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOGEQUIV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOGEQUIV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOGEQUIV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOGEQUIV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOGEQUIV
8     (SKIP&RET 1)


Disassembly of function LOGEQUIV
(CONST 0) = INTVAR
(CONST 1) = LEADARG
(CONST 2) = REMABS
(CONST 3) = DIV*
(CONST 4) = $RATSIMP
(CONST 5) = FREEOF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (INTVAR)
11 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; INTVAR
2     (LOAD&PUSH 3)
3     (CALL1&PUSH 1)                      ; LEADARG
5     (CALL1&PUSH 2)                      ; REMABS
7     (LOAD&PUSH 3)
8     (CALL1&PUSH 1)                      ; LEADARG
10    (CALL1&PUSH 2)                      ; REMABS
12    (CALL2&PUSH 3)                      ; DIV*
14    (CALL1&PUSH 4)                      ; $RATSIMP
16    (CALL2 5)                           ; FREEOF
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN REMABS (EXP) ...)-31|
(CONST 0) = REMABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REMABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REMABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REMABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REMABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REMABS
8     (SKIP&RET 1)


Disassembly of function REMABS
(CONST 0) = EXP
(CONST 1) = MABS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (JMPIFATOM L19)
7     (GETVALUE 0)                        ; EXP
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFEQTO 1 L23)                   ; MABS
14    (GETVALUE 0)                        ; EXP
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)
19    L19
19    (GETVALUE 0)                        ; EXP
21    (JMP L16)
23    L23
23    (GETVALUE 0)                        ; EXP
25    (CDR)
26    (CAR)
27    (JMP L16)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VLIST LIANS ...))-32|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN GETFNSPLIT (L &AUX COEF ...) ...)-33|
(CONST 0) = GETFNSPLIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETFNSPLIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETFNSPLIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETFNSPLIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETFNSPLIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETFNSPLIT
8     (SKIP&RET 1)


Disassembly of function GETFNSPLIT
(CONST 0) = L
(CONST 1) = COEF
(CONST 2) = FN
(CONST 3) = X
(CONST 4) = INTVAR
(CONST 5) = FREE
(CONST 6) = MULN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FN INTVAR COEF X L)
writes special variables : (FN COEF)
43 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; COEF
6     (NIL)
7     (BIND 2)                            ; FN
9     (GETVALUE&PUSH 0)                   ; L
11    (LOAD&PUSH 0)
12    (JMP L47)
14    L14
14    (GETVALUE&PUSH 3)                   ; X
16    (GETVALUE 1)                        ; COEF
18    (CONS)
19    (SETVALUE 1)                        ; COEF
21    (JMP L42)
23    L23
23    (LOAD&CAR&PUSH 0)
25    (LOAD 0)
26    (BIND 3)                            ; X
28    (GETVALUE&PUSH 3)                   ; X
30    (GETVALUE&PUSH 4)                   ; INTVAR
32    (CALL2&JMPIF 5 L14)                 ; FREE
35    (GETVALUE&PUSH 3)                   ; X
37    (GETVALUE 2)                        ; FN
39    (CONS)
40    (SETVALUE 2)                        ; FN
42    L42
42    (UNBIND1)
43    (SKIP 1)
45    (LOAD&CDR&STORE 0)
47    L47
47    (LOAD&PUSH 0)
48    (CALLS1&JMPIFNOT 146 L23)           ; ENDP
51    (SKIP 2)
53    (GETVALUE&PUSH 1)                   ; COEF
55    (NIL&PUSH)
56    (CALL2&PUSH 6)                      ; MULN
58    (GETVALUE&PUSH 2)                   ; FN
60    (NIL&PUSH)
61    (CALL2 6)                           ; MULN
63    (CONS)
64    (UNBIND 3)
66    (SKIP&RET 2)


Disassembly of function #:|(DEFUN GETFNCOEFF (A FORM) ...)-34|
(CONST 0) = GETFNCOEFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETFNCOEFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETFNCOEFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETFNCOEFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETFNCOEFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETFNCOEFF
8     (SKIP&RET 1)


Disassembly of function GETFNCOEFF
(CONST 0) = A
(CONST 1) = FORM
(CONST 2) = 0
(CONST 3) = MPLUS
(CONST 4) = RATPL
(CONST 5) = MTIMES
(CONST 6) = GETFNSPLIT
(CONST 7) = COEF
(CONST 8) = ZEROP1
(CONST 9) = %ATAN
(CONST 10) = $%I
(CONST 11) = VARLIST
(CONST 12) = MEMQ
(CONST 13) = $LOGARC
(CONST 14) = $ALL
(CONST 15) = $LOGEXPAND
(CONST 16) = RESIMPLIFY
(CONST 17) = $EXPAND
(CONST 18) = LEADOP
(CONST 19) = ALIKE1
(CONST 20) = LEADARG
(CONST 21) = MLOGP
(CONST 22) = LOGEQUIV
(CONST 23) = RFORM
(CONST 24) = VLIST
(CONST 25) = NEWVAR1
(CONST 26) = RATREP*
(CONST 27) = CARY
(CONST 28) = LIFLAG
(CONST 29) = DILOG
(CONST 30) = LIANS
(CONST 31) = POLYLOGP
(CONST 32) = SUBFUNSUBS
(CONST 33) = MAKE-LI
(CONST 34) = MUL*
(CONST 35) = NOGOOD
(CONST 36) = (MTIMES)
(CONST 37) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LIFLAG VLIST VARLIST LIANS CARY COEF FORM A)
writes special variables : (NOGOOD COEF LIANS CARY)
248 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; FORM
6     (GETVALUE 0)                        ; A
8     (JMPIFNOT L57)
10    (GETVALUE 0)                        ; A
12    (CAR&PUSH)
13    (JMPIFEQTO 2 L60)                   ; 0
16    (GETVALUE 0)                        ; A
18    (CAR)
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFEQTO 3 L65)                   ; MPLUS
24    (GETVALUE 0)                        ; A
26    (CAR)
27    (CAR)
28    (CAR&PUSH)
29    (JMPIFEQTO 5 L184)                  ; MTIMES
33    (GETVALUE&PUSH 0)                   ; A
35    (CONST&PUSH 36)                     ; (MTIMES)
37    (CONST&PUSH 37)                     ; 1
39    (GETVALUE 0)                        ; A
41    (CAR&PUSH)
42    (LIST&PUSH 3)
44    (CALLS1 168)                        ; RPLACA
46    (GETVALUE 0)                        ; A
48    L48
48    (PUSH)
49    (GETVALUE&PUSH 1)                   ; FORM
51    (JSR L0)
53    L53
53    (UNBIND 2)
55    (SKIP&RET 3)
57    L57
57    (CONST 2)                           ; 0
58    (JMP L53)
60    L60
60    (GETVALUE 0)                        ; A
62    (CDR)
63    (JMP L48)
65    L65
65    (GETVALUE 0)                        ; A
67    (CAR)
68    (CDR&PUSH)
69    (GETVALUE&PUSH 1)                   ; FORM
71    (JSR&PUSH L0)
74    (GETVALUE 0)                        ; A
76    (CDR&PUSH)
77    (GETVALUE&PUSH 1)                   ; FORM
79    (JSR&PUSH L0)
82    (CALL2 4)                           ; RATPL
84    (JMP L53)
86    L86
86    (T)
87    (BIND 13)                           ; $LOGARC
89    (CONST 14)                          ; $ALL
90    (BIND 15)                           ; $LOGEXPAND
92    (GETVALUE&PUSH 0)                   ; A
94    (GETVALUE 0)                        ; A
96    (CAR&PUSH)
97    (CALL1&PUSH 16)                     ; RESIMPLIFY
99    (CALL1&PUSH 17)                     ; $EXPAND
101   (CALLS1 168)                        ; RPLACA
103   (UNBIND 2)
105   (GETVALUE 0)                        ; A
107   (JMP L397)
110   L110
110   (GETVALUE&PUSH 7)                   ; COEF
112   (CALL1&PUSH 23)                     ; RFORM
114   (GETVALUE&PUSH 0)                   ; A
116   (CONST&PUSH 2)                      ; 0
117   (CALLS1 168)                        ; RPLACA
119   (GETVALUE 0)                        ; A
121   (CDR&PUSH)
122   (GETVALUE&PUSH 1)                   ; FORM
124   (JSR&PUSH L0)
127   (CALL2 4)                           ; RATPL
129   (JMP L409)
132   L132
132   (LOAD&CAR&PUSH 0)
134   (LOAD&PUSH 5)
135   (CALL2&JMPIFNOT 22 L309)            ; LOGEQUIV
139   (JMP L298)
142   L142
142   (SKIP 1)
144   (JMP L316)
147   L147
147   (GETVALUE 0)                        ; A
149   (CAR&PUSH)
150   (CALL1 26)                          ; RATREP*
152   (CDR&PUSH)
153   (GETVALUE&PUSH 27)                  ; CARY
155   (CALL2 4)                           ; RATPL
157   (SETVALUE 27)                       ; CARY
159   (GETVALUE&PUSH 0)                   ; A
161   (CONST 2)                           ; 0
162   (JMP L391)
165   L165
165   (GETVALUE 0)                        ; A
167   (CAR&PUSH)
168   (GETVALUE 1)                        ; FORM
170   (CONS&PUSH)
171   (CALL1&PUSH 29)                     ; DILOG
173   (GETVALUE 30)                       ; LIANS
175   (CONS)
176   (SETVALUE 30)                       ; LIANS
178   (GETVALUE&PUSH 0)                   ; A
180   (CONST 2)                           ; 0
181   (JMP L391)
184   L184
184   (NIL&PUSH)
185   (GETVALUE 0)                        ; A
187   (CAR)
188   (CDR&PUSH)
189   (CALL1&PUSH 6)                      ; GETFNSPLIT
191   (LOAD 1)
192   (BIND 7)                            ; COEF
194   (LOAD 3)
195   (CAR)
196   (SETVALUE 7)                        ; COEF
198   (LOAD&CDR&STORE 3)
200   (GETVALUE&PUSH 0)                   ; A
202   (GETVALUE&PUSH 7)                   ; COEF
204   (LOAD&PUSH 5)
205   (LIST&PUSH 2)
207   (LOAD&CAR&PUSH 1)
209   (LOAD&PUSH 1)
210   (CALLS1 171)                        ; SYSTEM::%RPLACD
212   (SKIP 2)
214   (GETVALUE&PUSH 7)                   ; COEF
216   (CALL1&JMPIF 8 L394)                ; ZEROP1
220   (LOAD 3)
221   (JMPIFATOM L236)
223   (LOAD 3)
224   (CAR)
225   (CAR&PUSH)
226   (JMPIFNOTEQTO 9 L236)               ; %ATAN
229   (CONST&PUSH 10)                     ; $%I
230   (GETVALUE&PUSH 11)                  ; VARLIST
232   (CALL2&JMPIF 12 L86)                ; MEMQ
236   L236
236   (LOAD&PUSH 3)
237   (CALL1&PUSH 18)                     ; LEADOP
239   (GETVALUE&PUSH 1)                   ; FORM
241   (CALL1&PUSH 18)                     ; LEADOP
243   (CALL2&JMPIFNOT 19 L268)            ; ALIKE1
246   (LOAD&PUSH 3)
247   (CALL1&PUSH 20)                     ; LEADARG
249   (GETVALUE&PUSH 1)                   ; FORM
251   (CALL1&PUSH 20)                     ; LEADARG
253   (CALL2&JMPIF 19 L110)               ; ALIKE1
257   (LOAD&PUSH 3)
258   (CALL1&JMPIFNOT 21 L268)            ; MLOGP
261   (GETVALUE&PUSH 1)                   ; FORM
263   (LOAD&PUSH 4)
264   (CALL2&JMPIF 22 L110)               ; LOGEQUIV
268   L268
268   (GETVALUE&PUSH 11)                  ; VARLIST
270   (LOAD&JMPIFNOT 0 L314)
273   L273
273   (LOAD 0)
274   (CAR)
275   (JMPIFATOM L309)
277   (LOAD&CAR&PUSH 0)
279   (CALL1&PUSH 18)                     ; LEADOP
281   (LOAD&PUSH 5)
282   (CALL1&PUSH 18)                     ; LEADOP
284   (CALL2&JMPIFNOT 19 L309)            ; ALIKE1
287   (LOAD&PUSH 4)
288   (CALL1&JMPIF 21 L132)               ; MLOGP
292   (LOAD&CAR&PUSH 0)
294   (LOAD&PUSH 5)
295   (CALL2&JMPIFNOT 19 L309)            ; ALIKE1
298   L298
298   (GETVALUE 0)                        ; A
300   (CAR)
301   (CDR)
302   (CDR&PUSH)
303   (LOAD&CAR&PUSH 1)
305   (CALLS1&JMPIF 168 L142)             ; RPLACA
309   L309
309   (LOAD&CDR&STORE 0)
311   (LOAD&JMPIF 0 L273)
314   L314
314   (SKIP 1)
316   L316
316   (NIL)
317   (BIND 24)                           ; VLIST
319   (GETVALUE 0)                        ; A
321   (CAR&PUSH)
322   (CALL1 25)                          ; NEWVAR1
324   (GETVALUE 24)                       ; VLIST
326   (UNBIND1)
327   (JMPIFNOT L147)
330   (GETVALUE 28)                       ; LIFLAG
332   (JMPIFNOT L344)
334   (GETVALUE&PUSH 1)                   ; FORM
336   (CALL1&JMPIFNOT 21 L344)            ; MLOGP
339   (LOAD&PUSH 3)
340   (CALL1&JMPIF 21 L165)               ; MLOGP
344   L344
344   (GETVALUE 28)                       ; LIFLAG
346   (JMPIFNOT L405)
348   (GETVALUE&PUSH 1)                   ; FORM
350   (CALL1&JMPIFNOT 31 L405)            ; POLYLOGP
353   (LOAD&PUSH 3)
354   (CALL1&JMPIFNOT 21 L405)            ; MLOGP
357   (GETVALUE&PUSH 1)                   ; FORM
359   (LOAD&PUSH 4)
360   (CALL2&JMPIFNOT 22 L405)            ; LOGEQUIV
363   (GETVALUE 0)                        ; A
365   (CAR)
366   (CDR)
367   (CAR&PUSH)
368   (GETVALUE&PUSH 1)                   ; FORM
370   (CALL1 32)                          ; SUBFUNSUBS
372   (CAR&PUSH)
373   (CALLS2&PUSH 150)                   ; 1+
375   (GETVALUE&PUSH 1)                   ; FORM
377   (CALL1&PUSH 20)                     ; LEADARG
379   (CALL2&PUSH 33)                     ; MAKE-LI
381   (CALL2&PUSH 34)                     ; MUL*
383   (GETVALUE 30)                       ; LIANS
385   (CONS)
386   (SETVALUE 30)                       ; LIANS
388   (GETVALUE&PUSH 0)                   ; A
390   (CONST 2)                           ; 0
391   L391
391   (PUSH)
392   (CALLS1 168)                        ; RPLACA
394   L394
394   (GETVALUE 0)                        ; A
396   (CDR)
397   L397
397   (PUSH)
398   (GETVALUE&PUSH 1)                   ; FORM
400   (JSR L0)
403   (JMP L409)
405   L405
405   (T)
406   (SETVALUE 35)                       ; NOGOOD
408   (CONST 2)                           ; 0
409   L409
409   (UNBIND1)
410   (SKIP 2)
412   (JMP L53)


Disassembly of function #:|(DEFUN RISCHLOGPOLY (EXP) ...)-35|
(CONST 0) = RISCHLOGPOLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHLOGPOLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHLOGPOLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHLOGPOLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHLOGPOLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHLOGPOLY
8     (SKIP&RET 1)


Disassembly of function RISCHLOGPOLY
(CONST 0) = EXP
(CONST 1) = (0 . 1)
(CONST 2) = ((0 . 1) 0)
(CONST 3) = EXPFLAG
(CONST 4) = POLY
(CONST 5) = EXPINT
(CONST 6) = VAR
(CONST 7) = AMONG
(CONST 8) = MAINVAR
(CONST 9) = TRYRISCH1
(CONST 10) = PDEGREE
(CONST 11) = LIANS
(CONST 12) = (0 . 1)
(CONST 13) = CARY
(CONST 14) = Y
(CONST 15) = NOGOOD
(CONST 16) = DEGREE
(CONST 17) = P
(CONST 18) = POLCOEF
(CONST 19) = RATQU
(CONST 20) = RATFIX
(CONST 21) = 1
(CONST 22) = RISCHDIFF
(CONST 23) = RATTI
(CONST 24) = RATDIF
(CONST 25) = X
(CONST 26) = FIXNUMP
(CONST 27) = 0
(CONST 28) = PSIMP
(CONST 29) = $LIFLAG
(CONST 30) = LIFLAG
(CONST 31) = RISCHEXPR
(CONST 32) = GETFNCOEFF
(CONST 33) = FINDINT
(CONST 34) = RATPL
(CONST 35) = RISCHNOUN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LIANS NOGOOD Y $LIFLAG MAINVAR EXPINT X CARY P DEGREE VAR EXPFLAG EXP)
writes special variables : (DEGREE LIFLAG CARY Y P EXPINT)
220 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; (0 . 1)
6     (CALLS2&JMPIF 2 L139)               ; EQUAL
10    (GETVALUE 3)                        ; EXPFLAG
12    (JMPIF L143)
15    (GETVALUE&PUSH 6)                   ; VAR
17    (GETVALUE&PUSH 0)                   ; EXP
19    (CALL2&JMPIFNOT 7 L156)             ; AMONG
23    (GETVALUE 0)                        ; EXP
25    (CAR&PUSH)
26    (GETVALUE&PUSH 6)                   ; VAR
28    (CALL2&PUSH 10)                     ; PDEGREE
30    (GETVALUE 0)                        ; EXP
32    (CAR&PUSH)
33    (GETVALUE 0)                        ; EXP
35    (CDR&PUSH)
36    (NIL)
37    (BIND 11)                           ; LIANS
39    (CONST&PUSH 12)                     ; (0 . 1)
40    (CONST 12)                          ; (0 . 1)
41    (BIND 13)                           ; CARY
43    (NIL)
44    (BIND 14)                           ; Y
46    (PUSH-NIL 2)
48    (NIL)
49    (BIND 15)                           ; NOGOOD
51    (NIL&PUSH)
52    (LOAD 18)
54    (BIND 16)                           ; DEGREE
56    (LOAD 20)
58    (BIND 17)                           ; P
60    L60
60    (GETVALUE&PUSH 16)                  ; DEGREE
62    (CALLS2&JMPIF 147 L357)             ; MINUSP
66    (GETVALUE&PUSH 17)                  ; P
68    (GETVALUE&PUSH 16)                  ; DEGREE
70    (CALL2&PUSH 18)                     ; POLCOEF
72    (LOAD&PUSH 23)
73    (CALL2&PUSH 19)                     ; RATQU
75    (CALL1&PUSH 20)                     ; RATFIX
77    (GETVALUE&PUSH 16)                  ; DEGREE
79    (CALLS2&PUSH 150)                   ; 1+
81    (CONST 21)                          ; 1
83    (CONS&PUSH)
84    (GETVALUE&PUSH 13)                  ; CARY
86    (GETVALUE&PUSH 6)                   ; VAR
88    (CONST&PUSH 22)                     ; RISCHDIFF
89    (PUSH-UNBOUND 1)
91    (CALLS2&PUSH 132)                   ; GET
93    (T&PUSH)
94    (CALL&PUSH 3 23)                    ; RATTI
97    (T&PUSH)
98    (CALL&PUSH 3 23)                    ; RATTI
101   (CALL2 24)                          ; RATDIF
103   (STORE 10)
105   (GETVALUE&PUSH 17)                  ; P
107   (GETVALUE&PUSH 16)                  ; DEGREE
109   (CALL2 18)                          ; POLCOEF
111   (BIND 25)                           ; X
113   (GETVALUE&PUSH 25)                  ; X
115   (CALL1&JMPIF 26 L128)               ; FIXNUMP
118   (GETVALUE 25)                       ; X
120   (JMPIFCONSP L222)
123   (GETVALUE&PUSH 25)                  ; X
125   (CALLS2&JMPIFNOT 15 L165)           ; FLOATP
128   L128
128   (GETVALUE&PUSH 25)                  ; X
130   (CALLS2 145)                        ; ZEROP
132   (UNBIND1)
133   (JMPIFNOT L223)
136   (JMP L238)
139   L139
139   (CONST 2)                           ; ((0 . 1) 0)
140   (JMP L381)
143   L143
143   (CONST&PUSH 4)                      ; POLY
144   (GETVALUE 0)                        ; EXP
146   (CONS&PUSH)
147   (GETVALUE 5)                        ; EXPINT
149   (CONS)
150   (SETVALUE 5)                        ; EXPINT
152   (CONST 2)                           ; ((0 . 1) 0)
153   (JMP L381)
156   L156
156   (GETVALUE&PUSH 0)                   ; EXP
158   (GETVALUE&PUSH 8)                   ; MAINVAR
160   (CALL2 9)                           ; TRYRISCH1
162   (JMP L381)
165   L165
165   (UNBIND1)
166   (JMPIFNOT L223)
168   (JMP L238)
171   L171
171   (CONST 27)                          ; 0
173   (SETVALUE 17)                       ; P
175   (JMP L238)
177   L177
177   (LOAD&PUSH 18)
178   (LOAD&PUSH 11)
179   (GETVALUE&PUSH 6)                   ; VAR
181   (GETVALUE&PUSH 16)                  ; DEGREE
183   (CONST&PUSH 21)                     ; 1
184   (LIST&PUSH 3)
186   (T&PUSH)
187   (CALL&PUSH 3 23)                    ; RATTI
190   (GETVALUE&PUSH 17)                  ; P
192   (LOAD&PUSH 25)
194   (CALL2&PUSH 19)                     ; RATQU
196   (CALL2&PUSH 34)                     ; RATPL
198   (CALL2 35)                          ; RISCHNOUN
200   (UNBIND 2)
202   (SKIP 1)
204   (UNBIND1)
205   (SKIP 2)
207   (UNBIND 2)
209   (SKIP 1)
211   (UNBIND1)
212   (SKIP 3)
214   (JMP L381)
217   L217
217   (CONST 21)                          ; 1
219   (JMP L336)
222   L222
222   (UNBIND1)
223   L223
223   (GETVALUE 17)                       ; P
225   (JMPIFATOM L171)
227   (GETVALUE&PUSH 6)                   ; VAR
229   (GETVALUE 17)                       ; P
231   (CDR)
232   (CDR)
233   (CDR&PUSH)
234   (CALL2 28)                          ; PSIMP
236   (SETVALUE 17)                       ; P
238   L238
238   (LOAD&PUSH 10)
239   (GETVALUE&PUSH 8)                   ; MAINVAR
241   (CALL2 9)                           ; TRYRISCH1
243   (SETVALUE 14)                       ; Y
245   (CAR)
246   (SETVALUE 13)                       ; CARY
248   (GETVALUE&PUSH 16)                  ; DEGREE
250   (CONST&PUSH 27)                     ; 0
251   (CALLSR&JMPIFNOT 1 48 L259)         ; >
255   (GETVALUE 29)                       ; $LIFLAG
257   (SETVALUE 30)                       ; LIFLAG
259   L259
259   (GETVALUE 14)                       ; Y
261   (CDR&PUSH)
262   (GETVALUE&PUSH 6)                   ; VAR
264   (CONST&PUSH 31)                     ; RISCHEXPR
266   (PUSH-UNBOUND 1)
268   (CALLS2&PUSH 132)                   ; GET
270   (CALL2 32)                          ; GETFNCOEFF
272   (STORE 11)
274   (NIL)
275   (SETVALUE 30)                       ; LIFLAG
277   (GETVALUE&PUSH 16)                  ; DEGREE
279   (CONST&PUSH 27)                     ; 0
280   (CALLSR&JMPIFNOT 1 48 L296)         ; >
284   (GETVALUE 15)                       ; NOGOOD
286   (JMPIF L177)
289   (GETVALUE 14)                       ; Y
291   (CDR&PUSH)
292   (CALL1&JMPIF 33 L177)               ; FINDINT
296   L296
296   (LOAD&PUSH 11)
297   (GETVALUE&PUSH 16)                  ; DEGREE
299   (CALLS2&PUSH 150)                   ; 1+
301   (CONST 21)                          ; 1
303   (CONS&PUSH)
304   (CALL2 19)                          ; RATQU
306   (STORE 6)
307   (PUSH)
308   (GETVALUE&PUSH 6)                   ; VAR
310   (GETVALUE&PUSH 16)                  ; DEGREE
312   (CALLS2&PUSH 150)                   ; 1+
314   (CONST&PUSH 21)                     ; 1
315   (LIST&PUSH 3)
317   (T&PUSH)
318   (CALL&PUSH 3 23)                    ; RATTI
321   (GETVALUE&PUSH 13)                  ; CARY
323   (GETVALUE&PUSH 16)                  ; DEGREE
325   (CALLS2&JMPIF 145 L217)             ; ZEROP
329   (GETVALUE&PUSH 6)                   ; VAR
331   (GETVALUE&PUSH 16)                  ; DEGREE
333   (CONST&PUSH 21)                     ; 1
334   (LIST 3)
336   L336
336   (PUSH)
337   (T&PUSH)
338   (CALL&PUSH 3 23)                    ; RATTI
341   (LOAD&PUSH 20)
342   (CALL2&PUSH 34)                     ; RATPL
344   (CALL2 34)                          ; RATPL
346   (STORE 18)
348   (GETVALUE&PUSH 16)                  ; DEGREE
350   (CALLS2 151)                        ; 1-
352   (SETVALUE 16)                       ; DEGREE
354   (JMP L60)
357   L357
357   (LOAD&PUSH 18)
358   (GETVALUE&PUSH 11)                  ; LIANS
360   (GETVALUE 14)                       ; Y
362   (CDR&PUSH)
363   (CALLSR 2 34)                       ; APPEND
366   (CONS)
367   (UNBIND 2)
369   (SKIP 1)
371   (UNBIND1)
372   (SKIP 2)
374   (UNBIND 2)
376   (SKIP 1)
378   (UNBIND1)
379   (SKIP 3)
381   L381
381   (UNBIND1)
382   (SKIP&RET 2)


Disassembly of function #:|(DEFUN MAKE-LI (SUB ARG) ...)-36|
(CONST 0) = MAKE-LI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-LI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-LI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-LI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-LI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-LI
8     (SKIP&RET 1)


Disassembly of function MAKE-LI
(CONST 0) = ARG
(CONST 1) = $LI
(CONST 2) = SUBFUNMAKE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; $LI
4     (LOAD&PUSH 6)
5     (NIL)
6     (CONS&PUSH)
7     (GETVALUE&PUSH 0)                   ; ARG
9     (NIL)
10    (CONS&PUSH)
11    (CALL 3 2)                          ; SUBFUNMAKE
14    (UNBIND1)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DILOG (L) ...)-37|
(CONST 0) = DILOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DILOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DILOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DILOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DILOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DILOG
8     (SKIP&RET 1)


Disassembly of function DILOG
(CONST 0) = L
(CONST 1) = COEF
(CONST 2) = REMABS
(CONST 3) = VARLIST
(CONST 4) = GENVAR
(CONST 5) = RFORM
(CONST 6) = VAR
(CONST 7) = PDEGREE
(CONST 8) = RATREDUCE
(CONST 9) = K
(CONST 10) = 1
(CONST 11) = RATEXPT
(CONST 12) = DIV
(CONST 13) = RDIS
(CONST 14) = DEGREE
(CONST 15) = MUL
(CONST 16) = RATDIVIDE
(CONST 17) = RISCH-CONSTP
(CONST 18) = SUB
(CONST 19) = $RATSIMP
(CONST 20) = -1
(CONST 21) = POWER
(CONST 22) = (MFACTORIAL)
(CONST 23) = (MFACTORIAL)
(CONST 24) = DIV*
(CONST 25) = NEG
(CONST 26) = ADD
(CONST 27) = MAKE-LI
(CONST 28) = MUL*
(CONST 29) = 0
(CONST 30) = DOSUM
(CONST 31) = NOGOOD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DEGREE COEF K VAR GENVAR VARLIST L)
writes special variables : (NOGOOD K COEF)
161 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; COEF
6     (NIL&PUSH)
7     (GETVALUE&PUSH 0)                   ; L
9     (LOAD 0)
10    (CAR)
11    (CDR)
12    (STORE 1)
13    (CAR)
14    (SETVALUE 1)                        ; COEF
16    (LOAD 1)
17    (CDR)
18    (CAR)
19    (STORE 1)
20    (LOAD&CDR&STORE 0)
22    (LOAD 1)
23    (CDR)
24    (CAR&PUSH)
25    (CALL1&PUSH 2)                      ; REMABS
27    (GETVALUE 3)                        ; VARLIST
29    (BIND 3)                            ; VARLIST
31    (GETVALUE 4)                        ; GENVAR
33    (BIND 4)                            ; GENVAR
35    (LOAD&PUSH 6)
36    (CALL1&PUSH 5)                      ; RFORM
38    (LOAD 8)
39    (CDR)
40    (CAR&PUSH)
41    (CALL1&PUSH 5)                      ; RFORM
43    (LOAD 0)
44    (CAR)
45    (CAR)
46    (BIND 6)                            ; VAR
48    (NIL&PUSH)
49    (LOAD&CAR&PUSH 5)
51    (GETVALUE&PUSH 6)                   ; VAR
53    (CALL2&PUSH 7)                      ; PDEGREE
55    (LOAD&CAR&PUSH 5)
57    (GETVALUE&PUSH 6)                   ; VAR
59    (CALL2&PUSH 7)                      ; PDEGREE
61    (CALL2 8)                           ; RATREDUCE
63    (BIND 9)                            ; K
65    (GETVALUE 9)                        ; K
67    (CAR)
68    (STORE 3)
69    (GETVALUE 9)                        ; K
71    (CDR)
72    (SETVALUE 9)                        ; K
74    (PUSH-UNBOUND 1)
76    (CALLS2&PUSH 143)                   ; GENSYM
78    (PUSH-NIL 2)
80    (LOAD&PUSH 6)
81    (CONST&PUSH 10)                     ; 1
82    (CALLSR&JMPIFNOT 1 45 L94)          ; =
86    (GETVALUE&PUSH 9)                   ; K
88    (CONST&PUSH 10)                     ; 1
89    (CALLSR&JMPIF 1 48 L169)            ; >
94    L94
94    (GETVALUE&PUSH 9)                   ; K
96    (CONST&PUSH 10)                     ; 1
97    (CALLSR&JMPIFNOT 1 45 L131)         ; =
101   (LOAD&PUSH 6)
102   (CONST&PUSH 10)                     ; 1
103   (CALLSR&JMPIFNOT 1 48 L131)         ; >
107   (LOAD&PUSH 10)
108   (LOAD&PUSH 7)
109   (CALL2 11)                          ; RATEXPT
111   (STORE 10)
113   (GETVALUE&PUSH 1)                   ; COEF
115   (LOAD&PUSH 7)
116   (GETVALUE&PUSH 14)                  ; DEGREE
118   (CALLSR&PUSH 2 55)                  ; *
121   (CALL2 12)                          ; DIV
123   (SETVALUE 1)                        ; COEF
125   (LOAD&PUSH 6)
126   (LOAD&PUSH 20)
127   (CALL2 15)                          ; MUL
129   (STORE 19)
131   L131
131   (LOAD&PUSH 11)
132   (LOAD&PUSH 11)
133   (CALL2 16)                          ; RATDIVIDE
135   (STORE 0)
136   (CAR)
137   (STORE 1)
138   (LOAD&CDR&STORE 0)
140   (LOAD&PUSH 1)
141   (CALL1&JMPIFNOT 17 L148)            ; RISCH-CONSTP
144   (LOAD&PUSH 0)
145   (CALL1&JMPIF 17 L191)               ; RISCH-CONSTP
148   L148
148   (T)
149   (SETVALUE 31)                       ; NOGOOD
151   (CONST 29)                          ; 0
153   L153
153   (SKIP 3)
155   (UNBIND1)
156   (SKIP 1)
158   (UNBIND1)
159   (SKIP 2)
161   (UNBIND 2)
163   (SKIP 3)
165   (UNBIND 2)
167   (SKIP&RET 2)
169   L169
169   (LOAD&PUSH 11)
170   (GETVALUE&PUSH 9)                   ; K
172   (CALL2 11)                          ; RATEXPT
174   (STORE 11)
176   (GETVALUE&PUSH 1)                   ; COEF
178   (GETVALUE&PUSH 9)                   ; K
180   (CALL2 12)                          ; DIV
182   (SETVALUE 1)                        ; COEF
184   (LOAD&PUSH 11)
185   (CALL1 13)                          ; RDIS
187   (STORE 18)
189   (JMP L131)
191   L191
191   (CONST&PUSH 10)                     ; 1
192   (LOAD&PUSH 19)
193   (LOAD&PUSH 2)
194   (CALL1&PUSH 13)                     ; RDIS
196   (CALL2&PUSH 12)                     ; DIV
198   (CALL2&PUSH 18)                     ; SUB
200   (CALL1 19)                          ; $RATSIMP
202   (STORE 18)
204   (GETVALUE&PUSH 1)                   ; COEF
206   (CONST&PUSH 20)                     ; -1
207   (GETVALUE&PUSH 14)                  ; DEGREE
209   (CALLS2&PUSH 150)                   ; 1+
211   (CALL2&PUSH 21)                     ; POWER
213   (CONST&PUSH 22)                     ; (MFACTORIAL)
214   (GETVALUE&PUSH 14)                  ; DEGREE
216   (LIST&PUSH 2)
218   (CONST&PUSH 20)                     ; -1
219   (LOAD&PUSH 6)
220   (CALL2&PUSH 21)                     ; POWER
222   (LOAD&PUSH 23)
223   (LOAD&PUSH 7)
224   (CALL2&PUSH 21)                     ; POWER
226   (CONST&PUSH 23)                     ; (MFACTORIAL)
227   (LOAD&PUSH 8)
228   (LIST&PUSH 2)
230   (CALL2&PUSH 24)                     ; DIV*
232   (GETVALUE&PUSH 14)                  ; DEGREE
234   (LOAD&PUSH 8)
235   (CALL1&PUSH 25)                     ; NEG
237   (CONST&PUSH 10)                     ; 1
238   (CALL&PUSH 3 26)                    ; ADD
241   (LOAD&PUSH 24)
242   (CALL2&PUSH 27)                     ; MAKE-LI
244   (CALL&PUSH 3 28)                    ; MUL*
247   (LOAD&PUSH 6)
248   (CONST&PUSH 29)                     ; 0
249   (GETVALUE&PUSH 14)                  ; DEGREE
251   (T&PUSH)
252   (CALL&PUSH 5 30)                    ; DOSUM
255   (CALL 4 28)                         ; MUL*
258   (JMP L153)


Disassembly of function #:|(DEFUN EXPPOLYCONTROL (FLAG F A ...) ...)-38|
(CONST 0) = EXPPOLYCONTROL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPPOLYCONTROL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPPOLYCONTROL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPPOLYCONTROL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPPOLYCONTROL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPPOLYCONTROL
8     (SKIP&RET 1)


Disassembly of function EXPPOLYCONTROL
(CONST 0) = FLAG
(CONST 1) = F
(CONST 2) = A
(CONST 3) = N
(CONST 4) = Y
(CONST 5) = L
(CONST 6) = VAR
(CONST 7) = VARLIST
(CONST 8) = GENVAR
(CONST 9) = GETRISCHVAR
(CONST 10) = LEADOP
(CONST 11) = RATNUMERATOR
(CONST 12) = X
(CONST 13) = FIXNUMP
(CONST 14) = RATQU
(CONST 15) = RISCH-CONSTP
(CONST 16) = 1
(CONST 17) = RATTI
(CONST 18) = 0
(CONST 19) = INTVAR
(CONST 20) = RISCHEXPVAR
(CONST 21) = MEXPT
(CONST 22) = RISCHARG
(CONST 23) = RISCHDIFF
(CONST 24) = RISCHEXPLOG
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR INTVAR Y A FLAG N L X F GENVAR VARLIST)
writes special variables : (L Y VAR VARLIST)
113 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; FLAG
3     (LOAD 7)
4     (BIND 1)                            ; F
6     (LOAD 9)
7     (BIND 2)                            ; A
9     (LOAD 10)
10    (BIND 3)                            ; N
12    (NIL)
13    (BIND 4)                            ; Y
15    (NIL)
16    (BIND 5)                            ; L
18    (NIL)
19    (BIND 6)                            ; VAR
21    (GETVALUE 7)                        ; VARLIST
23    (BIND 7)                            ; VARLIST
25    (GETVALUE 8)                        ; GENVAR
27    (BIND 8)                            ; GENVAR
29    (GETVALUE&PUSH 7)                   ; VARLIST
31    (CALLS2 72)                         ; REVERSE
33    (CDR&PUSH)
34    (CALLS2 72)                         ; REVERSE
36    (SETVALUE 7)                        ; VARLIST
38    (CALL0 9)                           ; GETRISCHVAR
40    (SETVALUE 6)                        ; VAR
42    (PUSH)
43    (CONST&PUSH 10)                     ; LEADOP
44    (PUSH-UNBOUND 1)
46    (CALLS2 132)                        ; GET
48    (SETVALUE 4)                        ; Y
50    (GETVALUE&PUSH 1)                   ; F
52    (CALL1 11)                          ; RATNUMERATOR
54    (BIND 12)                           ; X
56    (GETVALUE&PUSH 12)                  ; X
58    (CALL1&JMPIF 13 L71)                ; FIXNUMP
61    (GETVALUE 12)                       ; X
63    (JMPIFCONSP L134)
66    (GETVALUE&PUSH 12)                  ; X
68    (CALLS2&JMPIFNOT 15 L81)            ; FLOATP
71    L71
71    (GETVALUE&PUSH 12)                  ; X
73    (CALLS2 145)                        ; ZEROP
75    (UNBIND1)
76    (JMPIFNOT L135)
78    (JMP L147)
81    L81
81    (UNBIND1)
82    (JMPIFNOT L135)
84    (JMP L147)
86    L86
86    (GETVALUE&PUSH 5)                   ; L
88    (LOAD&PUSH 30)
90    (GETVALUE&PUSH 3)                   ; N
92    (CONST&PUSH 16)                     ; 1
93    (LIST&PUSH 3)
95    (CONST 16)                          ; 1
96    (CONS&PUSH)
97    (T&PUSH)
98    (CALL&PUSH 3 17)                    ; RATTI
101   (CONST&PUSH 18)                     ; 0
102   (LIST 2)
104   (JMP L190)
107   L107
107   (GETVALUE 0)                        ; FLAG
109   (JMPIF L86)
111   (GETVALUE 5)                        ; L
113   (JMP L190)
116   L116
116   (NIL&PUSH)
117   (GETVALUE&PUSH 0)                   ; FLAG
119   (GETVALUE&PUSH 1)                   ; F
121   (GETVALUE&PUSH 2)                   ; A
123   (LOAD&PUSH 33)
125   (GETVALUE&PUSH 3)                   ; N
127   (LIST&PUSH 4)
129   (CALL 3 20)                         ; RISCHEXPVAR
132   (JMP L190)
134   L134
134   (UNBIND1)
135   L135
135   (GETVALUE&PUSH 2)                   ; A
137   (GETVALUE&PUSH 1)                   ; F
139   (CALL2 14)                          ; RATQU
141   (SETVALUE 5)                        ; L
143   (PUSH)
144   (CALL1&JMPIF 15 L107)               ; RISCH-CONSTP
147   L147
147   (GETVALUE&PUSH 4)                   ; Y
149   (GETVALUE 19)                       ; INTVAR
151   (JMPIFEQ L116)
153   (GETVALUE&PUSH 4)                   ; Y
155   (CONST 21)                          ; MEXPT
157   (EQ)
158   (PUSH)
159   (GETVALUE&PUSH 0)                   ; FLAG
161   (GETVALUE&PUSH 1)                   ; F
163   (GETVALUE&PUSH 2)                   ; A
165   (LOAD&PUSH 33)
167   (GETVALUE&PUSH 3)                   ; N
169   (GETVALUE&PUSH 6)                   ; VAR
171   (CONST&PUSH 22)                     ; RISCHARG
172   (PUSH-UNBOUND 1)
174   (CALLS2&PUSH 132)                   ; GET
176   (GETVALUE&PUSH 6)                   ; VAR
178   (GETVALUE&PUSH 6)                   ; VAR
180   (CONST&PUSH 23)                     ; RISCHDIFF
181   (PUSH-UNBOUND 1)
183   (CALLS2&PUSH 132)                   ; GET
185   (LIST&PUSH 5)
187   (CALL 5 24)                         ; RISCHEXPLOG
190   L190
190   (UNBIND 9)
192   (SKIP&RET 6)


Disassembly of function #:|(DEFUN RISCHEXPPOLY (EXPINT VAR) ...)-39|
(CONST 0) = RISCHEXPPOLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHEXPPOLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHEXPPOLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHEXPPOLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHEXPPOLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHEXPPOLY
8     (SKIP&RET 1)


Disassembly of function RISCHEXPPOLY
(CONST 0) = EXPINT
(CONST 1) = VAR
(CONST 2) = ((0 . 1) 0)
(CONST 3) = RISCHDIFF
(CONST 4) = 1
(CONST 5) = RATQU
(CONST 6) = Y
(CONST 7) = W
(CONST 8) = NUM
(CONST 9) = ANS
(CONST 10) = RATFIX
(CONST 11) = NEG
(CONST 12) = RATTI
(CONST 13) = EXPPOLYCONTROL
(CONST 14) = MAINVAR
(CONST 15) = TRYRISCH1
(CONST 16) = 0
(CONST 17) = RISCHADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MAINVAR ANS W NUM Y EXPINT VAR)
writes special variables : (EXPINT ANS W NUM Y)
143 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXPINT
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (PUSH-NIL 5)
8     (CONST&PUSH 2)                      ; ((0 . 1) 0)
9     (GETVALUE&PUSH 1)                   ; VAR
11    (CONST&PUSH 3)                      ; RISCHDIFF
12    (PUSH-UNBOUND 1)
14    (CALLS2&PUSH 132)                   ; GET
16    (GETVALUE&PUSH 1)                   ; VAR
18    (CONST&PUSH 4)                      ; 1
19    (CONST&PUSH 4)                      ; 1
20    (LIST&PUSH 3)
22    (CALL2&PUSH 5)                      ; RATQU
24    (LOAD 6)
25    (BIND 6)                            ; Y
27    (LOAD 8)
28    (BIND 7)                            ; W
30    (LOAD 10)
31    (BIND 8)                            ; NUM
33    (LOAD 10)
34    (BIND 9)                            ; ANS
36    (GETVALUE 0)                        ; EXPINT
38    (BIND 0)                            ; EXPINT
40    (GETVALUE 0)                        ; EXPINT
42    (JMPIFNOT L166)
45    L45
45    (GETVALUE 0)                        ; EXPINT
47    (CAR)
48    (SETVALUE 6)                        ; Y
50    (CAR)
51    (STORE 17)
53    (GETVALUE 6)                        ; Y
55    (CDR)
56    (SETVALUE 6)                        ; Y
58    (PUSH)
59    (CALL1 10)                          ; RATFIX
61    (STORE 18)
63    (CAR)
64    (SETVALUE 8)                        ; NUM
66    (LOAD&CDR&STORE 18)
68    (LOAD&PUSH 17)
69    (JMPIFEQTO 11 L176)                 ; NEG
73    (GETVALUE&PUSH 8)                   ; NUM
75    (CALLS2&JMPIF 8 L215)               ; NUMBERP
79    (GETVALUE 8)                        ; NUM
81    (CAR&PUSH)
82    (GETVALUE 1)                        ; VAR
84    (JMPIFNOTEQ L215)
87    (CONST 2)                           ; ((0 . 1) 0)
88    (SETVALUE 7)                        ; W
90    (GETVALUE 8)                        ; NUM
92    (CDR)
93    (BIND 8)                            ; NUM
95    (GETVALUE 8)                        ; NUM
97    (JMPIFNOT L147)
99    L99
99    (GETVALUE 8)                        ; NUM
101   (CAR&PUSH)
102   (JMPIFEQTO 16 L226)                 ; 0
106   (T&PUSH)
107   (GETVALUE 8)                        ; NUM
109   (CAR&PUSH)
110   (LOAD&PUSH 20)
111   (T&PUSH)
112   (CALL&PUSH 3 12)                    ; RATTI
115   (GETVALUE 8)                        ; NUM
117   (CDR)
118   (CAR&PUSH)
119   (LOAD&PUSH 24)
120   (CALL2&PUSH 5)                      ; RATQU
122   (GETVALUE&PUSH 1)                   ; VAR
124   (GETVALUE 8)                        ; NUM
126   (CAR&PUSH)
127   (CALL 5 13)                         ; EXPPOLYCONTROL
130   L130
130   (PUSH)
131   (GETVALUE&PUSH 7)                   ; W
133   (CALL2 17)                          ; RISCHADD
135   (SETVALUE 7)                        ; W
137   (GETVALUE 8)                        ; NUM
139   (CDR)
140   (CDR)
141   (SETVALUE 8)                        ; NUM
143   (GETVALUE 8)                        ; NUM
145   (JMPIF L99)
147   L147
147   (UNBIND1)
148   L148
148   (GETVALUE&PUSH 7)                   ; W
150   (GETVALUE&PUSH 9)                   ; ANS
152   (CALL2 17)                          ; RISCHADD
154   (SETVALUE 9)                        ; ANS
156   (GETVALUE 0)                        ; EXPINT
158   (CDR)
159   (SETVALUE 0)                        ; EXPINT
161   (GETVALUE 0)                        ; EXPINT
163   (JMPIF L45)
166   L166
166   (GETVALUE 9)                        ; ANS
168   (UNBIND 5)
170   (SKIP 7)
172   (UNBIND 2)
174   (SKIP&RET 3)
176   L176
176   (T&PUSH)
177   (LOAD 19)
179   (CDR)
180   (CAR&PUSH)
181   (CALLSR&PUSH 0 54)                  ; -
184   (LOAD&PUSH 17)
185   (T&PUSH)
186   (CALL&PUSH 3 12)                    ; RATTI
189   (GETVALUE&PUSH 8)                   ; NUM
191   (LOAD 21)
193   (CDR)
194   (CDR)
195   (CAR&PUSH)
196   (CALL2&PUSH 5)                      ; RATQU
198   (GETVALUE&PUSH 1)                   ; VAR
200   (LOAD 22)
202   (CDR)
203   (CAR&PUSH)
204   (CALLSR&PUSH 0 54)                  ; -
207   (CALL 5 13)                         ; EXPPOLYCONTROL
210   (SETVALUE 7)                        ; W
212   (JMP L148)
215   L215
215   (GETVALUE&PUSH 6)                   ; Y
217   (GETVALUE&PUSH 14)                  ; MAINVAR
219   (CALL2 15)                          ; TRYRISCH1
221   (SETVALUE 7)                        ; W
223   (JMP L148)
226   L226
226   (GETVALUE 8)                        ; NUM
228   (CDR)
229   (CAR&PUSH)
230   (LOAD&PUSH 22)
231   (CALL2&PUSH 5)                      ; RATQU
233   (GETVALUE&PUSH 14)                  ; MAINVAR
235   (CALL2 15)                          ; TRYRISCH1
237   (JMP L130)


Disassembly of function #:|(DEFUN RISCHEXPVAR (EXPEXPFLAG FLAG L) ...)-40|
(CONST 0) = RISCHEXPVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHEXPVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHEXPVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHEXPVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHEXPVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHEXPVAR
8     (SKIP&RET 1)


Disassembly of function RISCHEXPVAR
(CONST 0) = EXPEXPFLAG
(CONST 1) = FLAG
(CONST 2) = L
(CONST 3) = Y
(CONST 4) = M
(CONST 5) = P
(CONST 6) = ALPHAR
(CONST 7) = BETA
(CONST 8) = GAMMA
(CONST 9) = R
(CONST 10) = S
(CONST 11) = K
(CONST 12) = F
(CONST 13) = A
(CONST 14) = N
(CONST 15) = X
(CONST 16) = FIXNUMP
(CONST 17) = (0 . 1)
(CONST 18) = ((0 . 1) 0)
(CONST 19) = RATDENOMINATOR
(CONST 20) = MAINVAR
(CONST 21) = PARTFRAC
(CONST 22) = FINDPR
(CONST 23) = PLCM
(CONST 24) = 1
(CONST 25) = SPDERIVATIVE
(CONST 26) = RATQU
(CONST 27) = RATPL
(CONST 28) = RATTI
(CONST 29) = PDEGREE
(CONST 30) = 0
(CONST 31) = -1
(CONST 32) = POLCOEF
(CONST 33) = CXERFARG
(CONST 34) = -2
(CONST 35) = LSA
(CONST 36) = SINGULAR
(CONST 37) = INCONSISTENT
(CONST 38) = PEXPT
(CONST 39) = (RATTI ALPHAR (POLCOEF R BETA) T)
(CONST 40) = (POLCOEF S GAMMA)
(CONST 41) = (RATPL (RATTI ALPHAR (POLCOEF R BETA) T) (POLCOEF S GAMMA))
(CONST 42) = RATNUMERATOR
(CONST 43) = RATFIX
(CONST 44) = RATDIF
(CONST 45) = RISCH-CONSTP
(CONST 46) = $ERFFLAG
(CONST 47) = RISCHARG
(CONST 48) = 2
(CONST 49) = ERFARG2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ERFFLAG M F GAMMA P MAINVAR Y S R K BETA ALPHAR FLAG X A N L)
writes special variables : (M ALPHAR GAMMA BETA S R P Y K A F N)
658 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXPEXPFLAG
3     (LOAD 5)
4     (BIND 1)                            ; FLAG
6     (LOAD 7)
7     (BIND 2)                            ; L
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; Y
13    (NIL)
14    (BIND 4)                            ; M
16    (NIL)
17    (BIND 5)                            ; P
19    (NIL)
20    (BIND 6)                            ; ALPHAR
22    (NIL)
23    (BIND 7)                            ; BETA
25    (NIL)
26    (BIND 8)                            ; GAMMA
28    (NIL&PUSH)
29    (NIL)
30    (BIND 9)                            ; R
32    (NIL)
33    (BIND 10)                           ; S
35    (PUSH-NIL 2)
37    (NIL)
38    (BIND 11)                           ; K
40    (PUSH-NIL 6)
42    (NIL)
43    (BIND 12)                           ; F
45    (NIL)
46    (BIND 13)                           ; A
48    (NIL&PUSH)
49    (NIL)
50    (BIND 14)                           ; N
52    (PUSH-NIL 2)
54    (GETVALUE 2)                        ; L
56    (SETVALUE 14)                       ; N
58    (CAR)
59    (SETVALUE 12)                       ; F
61    (GETVALUE 14)                       ; N
63    (CDR)
64    (SETVALUE 14)                       ; N
66    (CAR)
67    (SETVALUE 13)                       ; A
69    (GETVALUE 14)                       ; N
71    (CDR)
72    (SETVALUE 14)                       ; N
74    (CAR)
75    (STORE 5)
76    (GETVALUE 14)                       ; N
78    (CDR)
79    (CAR)
80    (SETVALUE 14)                       ; N
82    (GETVALUE 13)                       ; A
84    (BIND 15)                           ; X
86    (GETVALUE&PUSH 15)                  ; X
88    (CALL1&JMPIF 16 L100)               ; FIXNUMP
91    (GETVALUE 15)                       ; X
93    (JMPIFCONSP L114)
95    (GETVALUE&PUSH 15)                  ; X
97    (CALLS2&JMPIFNOT 15 L109)           ; FLOATP
100   L100
100   (GETVALUE&PUSH 15)                  ; X
102   (CALLS2 145)                        ; ZEROP
104   (UNBIND1)
105   (JMPIFNOT L115)
107   (JMP L153)
109   L109
109   (UNBIND1)
110   (JMPIFNOT L115)
112   (JMP L153)
114   L114
114   (UNBIND1)
115   L115
115   (GETVALUE 13)                       ; A
117   (CAR)
118   (BIND 15)                           ; X
120   (GETVALUE&PUSH 15)                  ; X
122   (CALL1&JMPIF 16 L135)               ; FIXNUMP
125   (GETVALUE 15)                       ; X
127   (JMPIFCONSP L409)
130   (GETVALUE&PUSH 15)                  ; X
132   (CALLS2&JMPIFNOT 15 L149)           ; FLOATP
135   L135
135   (GETVALUE&PUSH 15)                  ; X
137   (CALLS2 145)                        ; ZEROP
139   (UNBIND1)
140   (JMPIFNOT L410)
143   (JMP L153)
145   L145
145   (CONST 17)                          ; (0 . 1)
146   (JMP L1148)
149   L149
149   (UNBIND1)
150   (JMPIFNOT L410)
153   L153
153   (GETVALUE 1)                        ; FLAG
155   (JMPIFNOT L145)
157   (CONST 18)                          ; ((0 . 1) 0)
158   (JMP L1148)
161   L161
161   (GETVALUE 1)                        ; FLAG
163   (JMPIFNOT1 L1148)
166   (CONST 17)                          ; (0 . 1)
167   (JMP L789)
170   L170
170   (GETVALUE 1)                        ; FLAG
172   (JMPIFNOT L848)
175   (CONST 17)                          ; (0 . 1)
176   (JMP L789)
179   L179
179   (LOAD 48)
181   (JMP L811)
184   L184
184   (CONST&PUSH 34)                     ; -2
186   (GETVALUE&PUSH 6)                   ; ALPHAR
188   (GETVALUE&PUSH 7)                   ; BETA
190   (CALLSR 3 53)                       ; +
193   (SETVALUE 11)                       ; K
195   (NIL&STORE 17)
197   L197
197   (LOAD&PUSH 22)
198   (GETVALUE&PUSH 11)                  ; K
200   (CALL2&PUSH 32)                     ; POLCOEF
202   (CONST 24)                          ; 1
204   (CONS&PUSH)
205   (LIST 1)
207   (STORE 16)
209   (GETVALUE 6)                        ; ALPHAR
211   (STORE 15)
213   L213
213   (LOAD&PUSH 15)
214   (CONST 24)                          ; 1
216   (CONS&PUSH)
217   (GETVALUE&PUSH 9)                   ; R
219   (CONST&PUSH 24)                     ; 1
220   (GETVALUE&PUSH 11)                  ; K
222   (LOAD&PUSH 19)
223   (CALLSR&PUSH 0 54)                  ; -
226   (CALLSR&PUSH 3 53)                  ; +
229   (CALL2&PUSH 32)                     ; POLCOEF
231   (T&PUSH)
232   (CALL&PUSH 3 28)                    ; RATTI
235   (GETVALUE&PUSH 10)                  ; S
237   (GETVALUE&PUSH 11)                  ; K
239   (LOAD&PUSH 18)
240   (CALLSR&PUSH 0 54)                  ; -
243   (CALLSR&PUSH 2 53)                  ; +
246   (CALL2&PUSH 32)                     ; POLCOEF
248   (CONST 24)                          ; 1
250   (CONS&PUSH)
251   (CALL2&PUSH 27)                     ; RATPL
253   (LOAD&CONS&STORE 16)
255   (LOAD&DEC&STORE 15)
257   (PUSH)
258   (CONST&PUSH 31)                     ; -1
260   (CALLSR&JMPIF 1 48 L213)            ; >
264   (LOAD&PUSH 16)
265   (LOAD&CONS&STORE 17)
267   (GETVALUE&PUSH 11)                  ; K
269   (CALLS2 151)                        ; 1-
271   (SETVALUE 11)                       ; K
273   (PUSH)
274   (CONST&PUSH 31)                     ; -1
276   (CALLSR&JMPIF 1 48 L197)            ; >
281   (LOAD&PUSH 17)
282   (CALL1 35)                          ; LSA
284   (SETVALUE 3)                        ; Y
286   (PUSH)
287   (JMPIFEQTO 36 L170)                 ; SINGULAR
291   (GETVALUE&PUSH 3)                   ; Y
293   (JMPIFEQTO 37 L170)                 ; INCONSISTENT
297   (CONST 30)                          ; 0
299   (SETVALUE 11)                       ; K
301   (STORE 48)
303   (GETVALUE 3)                        ; Y
305   (CDR)
306   (SETVALUE 3)                        ; Y
308   L308
308   (GETVALUE 3)                        ; Y
310   (CAR&PUSH)
311   (GETVALUE&PUSH 20)                  ; MAINVAR
313   (CONST&PUSH 24)                     ; 1
314   (CONST&PUSH 24)                     ; 1
315   (LIST&PUSH 3)
317   (GETVALUE&PUSH 11)                  ; K
319   (CALL2&PUSH 38)                     ; PEXPT
321   (T&PUSH)
322   (CALL&PUSH 3 28)                    ; RATTI
325   (LOAD&PUSH 49)
327   (CALL2 27)                          ; RATPL
329   (STORE 48)
331   (GETVALUE&PUSH 11)                  ; K
333   (CALLS2 150)                        ; 1+
335   (SETVALUE 11)                       ; K
337   (GETVALUE 3)                        ; Y
339   (CDR)
340   (SETVALUE 3)                        ; Y
342   (JMPIF L308)
344   (GETVALUE 1)                        ; FLAG
346   (JMPIFNOT L179)
349   (LOAD&PUSH 48)
351   (GETVALUE&PUSH 5)                   ; P
353   (CALL2&PUSH 26)                     ; RATQU
355   (LOAD&PUSH 6)
356   (GETVALUE&PUSH 14)                  ; N
358   (CONST&PUSH 24)                     ; 1
359   (LIST&PUSH 3)
361   (CONST 24)                          ; 1
363   (CONS&PUSH)
364   (T&PUSH)
365   (CALL&PUSH 3 28)                    ; RATTI
368   (CONST&PUSH 30)                     ; 0
370   (LIST 2)
372   (JMP L1148)
375   L375
375   (GETVALUE&PUSH 6)                   ; ALPHAR
377   (GETVALUE&PUSH 7)                   ; BETA
379   (CALLS2&PUSH 151)                   ; 1-
381   (CALLSR 2 53)                       ; +
384   (SETVALUE 11)                       ; K
386   (CONST 39)                          ; (RATTI ALPHAR (POLCOEF R BETA) T)
388   (STORE 21)
390   (JMP L657)
393   L393
393   (GETVALUE&PUSH 6)                   ; ALPHAR
395   (GETVALUE&PUSH 8)                   ; GAMMA
397   (CALLSR 2 53)                       ; +
400   (SETVALUE 11)                       ; K
402   (CONST 40)                          ; (POLCOEF S GAMMA)
404   (STORE 21)
406   (JMP L657)
409   L409
409   (UNBIND1)
410   L410
410   (GETVALUE&PUSH 12)                  ; F
412   (CALL1 19)                          ; RATDENOMINATOR
414   (STORE 21)
416   (GETVALUE&PUSH 13)                  ; A
418   (GETVALUE&PUSH 20)                  ; MAINVAR
420   (CALL2 21)                          ; PARTFRAC
422   (CDR&PUSH)
423   (GETVALUE&PUSH 12)                  ; F
425   (GETVALUE&PUSH 20)                  ; MAINVAR
427   (CALL2 21)                          ; PARTFRAC
429   (CDR&PUSH)
430   (CALL2 22)                          ; FINDPR
432   (SETVALUE 5)                        ; P
434   (GETVALUE&PUSH 13)                  ; A
436   (CALL1&PUSH 19)                     ; RATDENOMINATOR
438   (GETVALUE&PUSH 5)                   ; P
440   (CALL2 23)                          ; PLCM
442   (STORE 48)
444   (CONST&PUSH 24)                     ; 1
445   (GETVALUE 5)                        ; P
447   (CONS&PUSH)
448   (GETVALUE&PUSH 20)                  ; MAINVAR
450   (CALL2&PUSH 25)                     ; SPDERIVATIVE
452   (GETVALUE&PUSH 12)                  ; F
454   (GETVALUE&PUSH 5)                   ; P
456   (CALL2&PUSH 26)                     ; RATQU
458   (CALL2 27)                          ; RATPL
460   (SETVALUE 3)                        ; Y
462   (LOAD&PUSH 48)
464   (GETVALUE&PUSH 3)                   ; Y
466   (CALL1&PUSH 19)                     ; RATDENOMINATOR
468   (CALL2 23)                          ; PLCM
470   (STORE 48)
472   (PUSH)
473   (GETVALUE&PUSH 5)                   ; P
475   (CALL2 26)                          ; RATQU
477   (CAR)
478   (SETVALUE 9)                        ; R
480   (LOAD&PUSH 48)
482   (GETVALUE&PUSH 3)                   ; Y
484   (T&PUSH)
485   (CALL 3 28)                         ; RATTI
488   (CAR)
489   (SETVALUE 10)                       ; S
491   (GETVALUE&PUSH 13)                  ; A
493   (LOAD&PUSH 49)
495   (T&PUSH)
496   (CALL 3 28)                         ; RATTI
499   (CAR)
500   (STORE 22)
502   (GETVALUE&PUSH 9)                   ; R
504   (GETVALUE&PUSH 20)                  ; MAINVAR
506   (CALL2 29)                          ; PDEGREE
508   (SETVALUE 7)                        ; BETA
510   (GETVALUE&PUSH 10)                  ; S
512   (GETVALUE&PUSH 20)                  ; MAINVAR
514   (CALL2 29)                          ; PDEGREE
516   (SETVALUE 8)                        ; GAMMA
518   (LOAD&PUSH 22)
519   (GETVALUE&PUSH 20)                  ; MAINVAR
521   (CALL2 29)                          ; PDEGREE
523   (STORE 29)
525   (PUSH)
526   (CALLS2&PUSH 150)                   ; 1+
528   (GETVALUE&PUSH 7)                   ; BETA
530   (CALLSR&PUSH 1 54)                  ; -
533   (LOAD&PUSH 30)
535   (GETVALUE&PUSH 8)                   ; GAMMA
537   (CALLSR&PUSH 1 54)                  ; -
540   (CALLSR 1 51)                       ; MAX
543   (SETVALUE 6)                        ; ALPHAR
545   (CONST 30)                          ; 0
547   (SETVALUE 4)                        ; M
549   (GETVALUE&PUSH 7)                   ; BETA
551   (CALLS2&PUSH 151)                   ; 1-
553   (GETVALUE&PUSH 8)                   ; GAMMA
555   (CALLS2&JMPIFNOT 2 L595)            ; EQUAL
558   (CONST&PUSH 31)                     ; -1
560   (GETVALUE&PUSH 10)                  ; S
562   (GETVALUE&PUSH 8)                   ; GAMMA
564   (CALL2&PUSH 32)                     ; POLCOEF
566   (GETVALUE&PUSH 9)                   ; R
568   (GETVALUE&PUSH 7)                   ; BETA
570   (CALL2&PUSH 32)                     ; POLCOEF
572   (CALL2&PUSH 26)                     ; RATQU
574   (T&PUSH)
575   (CALL 3 28)                         ; RATTI
578   (SETVALUE 3)                        ; Y
580   (CDR&PUSH)
581   (JMPIFNOTEQTO 24 L595)              ; 1
584   (GETVALUE 3)                        ; Y
586   (CAR&PUSH)
587   (CALLS2&JMPIFNOT 8 L595)            ; NUMBERP
590   (GETVALUE 3)                        ; Y
592   (CAR)
593   (SETVALUE 4)                        ; M
595   L595
595   (GETVALUE&PUSH 6)                   ; ALPHAR
597   (GETVALUE&PUSH 4)                   ; M
599   (CALLSR 1 51)                       ; MAX
602   (SETVALUE 6)                        ; ALPHAR
604   (PUSH)
605   (CALLS2&JMPIF 147 L161)             ; MINUSP
609   (GETVALUE&PUSH 6)                   ; ALPHAR
611   (GETVALUE&PUSH 4)                   ; M
613   (CALLS2&JMPIFNOT 2 L622)            ; EQUAL
616   (GETVALUE&PUSH 4)                   ; M
618   (CALLS2&JMPIFNOT 145 L184)          ; ZEROP
622   L622
622   (GETVALUE&PUSH 7)                   ; BETA
624   (CALLS2&PUSH 151)                   ; 1-
626   (GETVALUE&PUSH 8)                   ; GAMMA
628   (CALLSR&JMPIF 1 48 L375)            ; >
633   (GETVALUE&PUSH 7)                   ; BETA
635   (CALLS2&PUSH 151)                   ; 1-
637   (GETVALUE&PUSH 8)                   ; GAMMA
639   (CALLSR&JMPIF 1 47 L393)            ; <
644   (GETVALUE&PUSH 6)                   ; ALPHAR
646   (GETVALUE&PUSH 8)                   ; GAMMA
648   (CALLSR 2 53)                       ; +
651   (SETVALUE 11)                       ; K
653   (CONST 41)                          ; (RATPL (RATTI ALPHAR ...) ...)
655   (STORE 21)
657   L657
657   (CONST 30)                          ; 0
659   (SETVALUE 3)                        ; Y
661   (JMP L711)
663   L663
663   (GETVALUE&PUSH 10)                  ; S
665   (GETVALUE&PUSH 8)                   ; GAMMA
667   (CALL2 32)                          ; POLCOEF
669   (JMP L730)
671   L671
671   (GETVALUE&PUSH 15)                  ; X
673   (CALLS2 145)                        ; ZEROP
675   (UNBIND1)
676   (JMPIFNOT L942)
679   (JMP L760)
682   L682
682   (UNBIND1)
683   (GETVALUE 1)                        ; FLAG
685   (JMPIFNOT L848)
688   (JMP L788)
691   L691
691   (GETVALUE&PUSH 15)                  ; X
693   (CALLS2 145)                        ; ZEROP
695   (UNBIND1)
696   (JMPIFNOT L784)
699   L699
699   (GETVALUE&PUSH 11)                  ; K
701   (CALLS2 151)                        ; 1-
703   (SETVALUE 11)                       ; K
705   (GETVALUE&PUSH 6)                   ; ALPHAR
707   (CALLS2 151)                        ; 1-
709   (SETVALUE 6)                        ; ALPHAR
711   L711
711   (LOAD&PUSH 22)
712   (CALL1&PUSH 42)                     ; RATNUMERATOR
714   (GETVALUE&PUSH 11)                  ; K
716   (CALL2 32)                          ; POLCOEF
718   (STORE 1)
719   (LOAD&PUSH 22)
720   (CALL1&PUSH 19)                     ; RATDENOMINATOR
722   (GETVALUE&PUSH 6)                   ; ALPHAR
724   (CALLS2&JMPIF 145 L663)             ; ZEROP
727   (LOAD&PUSH 22)
728   (CALLS1 91)                         ; EVAL
730   L730
730   (PUSH)
731   (T&PUSH)
732   (CALL 3 28)                         ; RATTI
735   (STORE 0)
736   (CAR)
737   (BIND 15)                           ; X
739   (GETVALUE&PUSH 15)                  ; X
741   (CALL1&JMPIF 16 L671)               ; FIXNUMP
745   (GETVALUE 15)                       ; X
747   (JMPIFCONSP L941)
750   (GETVALUE&PUSH 15)                  ; X
752   (CALLS2&JMPIF 15 L671)              ; FLOATP
756   (UNBIND1)
757   (JMPIFNOT L942)
760   L760
760   (LOAD 1)
761   (BIND 15)                           ; X
763   (GETVALUE&PUSH 15)                  ; X
765   (CALL1&JMPIF 16 L691)               ; FIXNUMP
769   (GETVALUE 15)                       ; X
771   (JMPIFCONSP L682)
774   (GETVALUE&PUSH 15)                  ; X
776   (CALLS2&JMPIF 15 L691)              ; FLOATP
780   (UNBIND1)
781   (JMPIF L699)
784   L784
784   (GETVALUE 1)                        ; FLAG
786   (JMPIFNOT L848)
788   L788
788   (CONST 17)                          ; (0 . 1)
789   L789
789   (PUSH)
790   (LOAD&PUSH 6)
791   (GETVALUE&PUSH 14)                  ; N
793   (GETVALUE 13)                       ; A
795   (JMP L1144)
798   L798
798   (GETVALUE&PUSH 15)                  ; X
800   (CALLS2 145)                        ; ZEROP
802   (UNBIND1)
803   (JMPIFNOT L1065)
806   L806
806   (GETVALUE 1)                        ; FLAG
808   (JMPIF L819)
810   (LOAD 14)
811   L811
811   (PUSH)
812   (GETVALUE&PUSH 5)                   ; P
814   (CALL2 26)                          ; RATQU
816   (JMP L1148)
819   L819
819   (LOAD&PUSH 14)
820   (LOAD&PUSH 6)
821   (GETVALUE&PUSH 14)                  ; N
823   (CONST&PUSH 24)                     ; 1
824   (LIST&PUSH 3)
826   (CONST 24)                          ; 1
828   (CONS&PUSH)
829   (T&PUSH)
830   (CALL&PUSH 3 28)                    ; RATTI
833   (GETVALUE&PUSH 5)                   ; P
835   (CALL2&PUSH 26)                     ; RATQU
837   (CONST 30)                          ; 0
839   (JMP L906)
842   L842
842   (UNBIND1)
843   (GETVALUE 1)                        ; FLAG
845   (JMPIF L1070)
848   L848
848   (NIL)
849   (SKIP 2)
851   (UNBIND1)
852   (SKIP 1)
854   (UNBIND 2)
856   (SKIP 6)
858   (UNBIND1)
859   (SKIP 2)
861   (UNBIND 2)
863   (SKIP 1)
865   (UNBIND 6)
867   (SKIP 1)
869   (JMP L1168)
872   L872
872   (LOAD&PUSH 14)
873   (LOAD&PUSH 6)
874   (GETVALUE&PUSH 14)                  ; N
876   (CONST&PUSH 24)                     ; 1
877   (LIST&PUSH 3)
879   (CONST 24)                          ; 1
881   (CONS&PUSH)
882   (T&PUSH)
883   (CALL&PUSH 3 28)                    ; RATTI
886   (GETVALUE&PUSH 5)                   ; P
888   (CALL2&PUSH 26)                     ; RATQU
890   (GETVALUE&PUSH 14)                  ; N
892   (LOAD&PUSH 7)
893   (CONST&PUSH 47)                     ; RISCHARG
895   (PUSH-UNBOUND 1)
897   (CALLS2&PUSH 132)                   ; GET
899   (T&PUSH)
900   (CALL&PUSH 3 28)                    ; RATTI
903   (LOAD&PUSH 15)
904   (CALL2 49)                          ; ERFARG2
906   L906
906   (PUSH)
907   (LIST 2)
909   (SKIP 2)
911   (UNBIND1)
912   (SKIP 1)
914   (UNBIND 2)
916   (SKIP 6)
918   (UNBIND1)
919   (SKIP 2)
921   (UNBIND 2)
923   (SKIP 1)
925   (UNBIND 6)
927   (SKIP 1)
929   (JMP L1168)
932   L932
932   (LOAD 14)
933   (SETVALUE 3)                        ; Y
935   (LOAD 13)
936   (STORE 22)
938   (JMP L711)
941   L941
941   (UNBIND1)
942   L942
942   (LOAD&PUSH 1)
943   (LOAD&PUSH 1)
944   (CALL2 26)                          ; RATQU
946   (STORE 12)
948   (GETVALUE&PUSH 3)                   ; Y
950   (LOAD&PUSH 13)
951   (GETVALUE&PUSH 20)                  ; MAINVAR
953   (GETVALUE&PUSH 6)                   ; ALPHAR
955   (CONST&PUSH 24)                     ; 1
956   (LIST&PUSH 3)
958   (CONST 24)                          ; 1
960   (CONS&PUSH)
961   (T&PUSH)
962   (CALL&PUSH 3 28)                    ; RATTI
965   (CALL2 27)                          ; RATPL
967   (STORE 14)
969   (LOAD&PUSH 22)
970   (CALL1&PUSH 43)                     ; RATFIX
972   (LOAD&PUSH 13)
973   (GETVALUE&PUSH 10)                  ; S
975   (GETVALUE&PUSH 20)                  ; MAINVAR
977   (GETVALUE&PUSH 6)                   ; ALPHAR
979   (CONST&PUSH 24)                     ; 1
980   (LIST&PUSH 3)
982   (CONST 24)                          ; 1
984   (CONS&PUSH)
985   (T&PUSH)
986   (CALL&PUSH 3 28)                    ; RATTI
989   (GETVALUE&PUSH 9)                   ; R
991   (GETVALUE&PUSH 6)                   ; ALPHAR
993   (GETVALUE&PUSH 20)                  ; MAINVAR
995   (GETVALUE&PUSH 6)                   ; ALPHAR
997   (CALLS2&PUSH 151)                   ; 1-
999   (CONST&PUSH 24)                     ; 1
1000  (LIST&PUSH 3)
1002  (T&PUSH)
1003  (CALL&PUSH 3 28)                    ; RATTI
1006  (T&PUSH)
1007  (CALL&PUSH 3 28)                    ; RATTI
1010  (CALL2&PUSH 27)                     ; RATPL
1012  (T&PUSH)
1013  (CALL&PUSH 3 28)                    ; RATTI
1016  (CALL2 44)                          ; RATDIF
1018  (STORE 13)
1020  (GETVALUE&PUSH 11)                  ; K
1022  (CALLS2 151)                        ; 1-
1024  (SETVALUE 11)                       ; K
1026  (GETVALUE&PUSH 6)                   ; ALPHAR
1028  (CALLS2 151)                        ; 1-
1030  (SETVALUE 6)                        ; ALPHAR
1032  (PUSH)
1033  (CONST&PUSH 30)                     ; 0
1035  (CALLSR&JMPIFNOT 1 47 L932)         ; <
1040  (LOAD 13)
1041  (CAR)
1042  (BIND 15)                           ; X
1044  (GETVALUE&PUSH 15)                  ; X
1046  (CALL1&JMPIF 16 L798)               ; FIXNUMP
1050  (GETVALUE 15)                       ; X
1052  (JMPIFCONSP L842)
1055  (GETVALUE&PUSH 15)                  ; X
1057  (CALLS2&JMPIF 15 L798)              ; FLOATP
1061  (UNBIND1)
1062  (JMPIF L806)
1065  L1065
1065  (GETVALUE 1)                        ; FLAG
1067  (JMPIFNOT L848)
1070  L1070
1070  (LOAD&PUSH 13)
1071  (LOAD&PUSH 49)
1073  (CALL2 26)                          ; RATQU
1075  (STORE 13)
1077  (PUSH)
1078  (CALL1&JMPIFNOT 45 L1116)           ; RISCH-CONSTP
1081  (GETVALUE 46)                       ; $ERFFLAG
1083  (JMPIFNOT L1116)
1085  (LOAD&PUSH 5)
1086  (CONST&PUSH 47)                     ; RISCHARG
1088  (PUSH-UNBOUND 1)
1090  (CALLS2 132)                        ; GET
1092  (CAR&PUSH)
1093  (GETVALUE&PUSH 20)                  ; MAINVAR
1095  (CALL2&PUSH 29)                     ; PDEGREE
1097  (JMPIFNOTEQTO 48 L1116)             ; 2
1100  (LOAD&PUSH 5)
1101  (CONST&PUSH 47)                     ; RISCHARG
1103  (PUSH-UNBOUND 1)
1105  (CALLS2 132)                        ; GET
1107  (CDR&PUSH)
1108  (GETVALUE&PUSH 20)                  ; MAINVAR
1110  (CALL2&PUSH 29)                     ; PDEGREE
1112  (JMPIFEQTO 30 L872)                 ; 0
1116  L1116
1116  (GETVALUE&PUSH 3)                   ; Y
1118  (LOAD&PUSH 6)
1119  (GETVALUE&PUSH 14)                  ; N
1121  (CONST&PUSH 24)                     ; 1
1122  (LIST&PUSH 3)
1124  (CONST 24)                          ; 1
1126  (CONS&PUSH)
1127  (T&PUSH)
1128  (CALL&PUSH 3 28)                    ; RATTI
1131  (GETVALUE&PUSH 5)                   ; P
1133  (CALL2&PUSH 26)                     ; RATQU
1135  (LOAD&PUSH 6)
1136  (GETVALUE&PUSH 14)                  ; N
1138  (LOAD&PUSH 25)
1140  (LOAD&PUSH 52)
1142  (CALL2 26)                          ; RATQU
1144  L1144
1144  (PUSH)
1145  (CALL 4 33)                         ; CXERFARG
1148  L1148
1148  (SKIP 2)
1150  (UNBIND1)
1151  (SKIP 1)
1153  (UNBIND 2)
1155  (SKIP 6)
1157  (UNBIND1)
1158  (SKIP 2)
1160  (UNBIND 2)
1162  (SKIP 1)
1164  (UNBIND 6)
1166  (SKIP 1)
1168  L1168
1168  (UNBIND 3)
1170  (SKIP&RET 4)


Disassembly of function #:|(DEFUN LSA (MM) ...)-41|
(CONST 0) = LSA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LSA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LSA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LSA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LSA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LSA
8     (SKIP&RET 1)


Disassembly of function LSA
(CONST 0) = D
(CONST 1) = *MOSESFLAG
(CONST 2) = M
(CONST 3) = *JM*
(CONST 4) = MTOA
(CONST 5) = TFGELI
(CONST 6) = SINGULAR
(CONST 7) = INCONSISTENT
(CONST 8) = PTORAT
(CONST 9) = XRUTOUT
(CONST 10) = LSAFIX
(CONST 11) = *REARRAY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M D)
writes special variables : (*MOSESFLAG M D)
81 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; D
3     (NIL)
4     (BIND 1)                            ; *MOSESFLAG
6     (NIL)
7     (BIND 2)                            ; M
9     (NIL&PUSH)
10    (LOAD&CAR&PUSH 11)
12    (CALLS2 71)                         ; LENGTH
14    (SETVALUE 0)                        ; D
16    (CONST&PUSH 3)                      ; *JM*
17    (LOAD&PUSH 12)
18    (CALLS2&PUSH 71)                    ; LENGTH
20    (GETVALUE&PUSH 0)                   ; D
22    (LOAD&PUSH 14)
23    (CALL 4 4)                          ; MTOA
26    (CONST&PUSH 3)                      ; *JM*
27    (LOAD&PUSH 12)
28    (CALLS2&PUSH 71)                    ; LENGTH
30    (GETVALUE&PUSH 0)                   ; D
32    (CALL 3 5)                          ; TFGELI
35    (SETVALUE 2)                        ; M
37    (CAR)
38    (JMPIF L47)
40    (GETVALUE 2)                        ; M
42    (CDR)
43    (CAR)
44    (JMPIFNOT L120)
47    L47
47    (GETVALUE 2)                        ; M
49    (CAR)
50    (JMPIFNOT L71)
52    (GETVALUE 2)                        ; M
54    (CAR&PUSH)
55    (CALLS2&PUSH 71)                    ; LENGTH
57    (LOAD&PUSH 12)
58    (CALLS2&PUSH 71)                    ; LENGTH
60    (GETVALUE&PUSH 0)                   ; D
62    (CALLS2&PUSH 151)                   ; 1-
64    (CALLSR&PUSH 1 54)                  ; -
67    (CALLSR&JMPIF 1 48 L120)            ; >
71    L71
71    (GETVALUE 2)                        ; M
73    (CDR)
74    (CAR)
75    (JMPIF L125)
77    (T)
78    (SETVALUE 1)                        ; *MOSESFLAG
80    (CONST&PUSH 3)                      ; *JM*
81    (GETVALUE&PUSH 0)                   ; D
83    (CALLS2&PUSH 151)                   ; 1-
85    (GETVALUE&PUSH 0)                   ; D
87    (CALL 3 8)                          ; PTORAT
90    (CONST&PUSH 3)                      ; *JM*
91    (GETVALUE&PUSH 0)                   ; D
93    (CALLS2&PUSH 151)                   ; 1-
95    (GETVALUE&PUSH 0)                   ; D
97    (PUSH-NIL 2)
99    (CALL 5 9)                          ; XRUTOUT
102   (STORE 0)
103   (CDR&PUSH)
104   (GETVALUE 2)                        ; M
106   (CDR)
107   (CDR)
108   (CAR&PUSH)
109   (CALL2 10)                          ; LSAFIX
111   (STORE 0)
112   (CONST&PUSH 3)                      ; *JM*
113   (CALL1 11)                          ; *REARRAY
115   (POP)
116   L116
116   (UNBIND 3)
118   (SKIP&RET 2)
120   L120
120   (CONST 6)                           ; SINGULAR
121   (SKIP 1)
123   (JMP L116)
125   L125
125   (CONST 7)                           ; INCONSISTENT
126   (SKIP 1)
128   (JMP L116)


Disassembly of function #:|(DEFUN LSAFIX (L N) ...)-42|
(CONST 0) = LSAFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LSAFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LSAFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LSAFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LSAFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LSAFIX
8     (SKIP&RET 1)


Disassembly of function LSAFIX
(CONST 0) = L
(CONST 1) = N
(CONST 2) = *JM*
(CONST 3) = 1
(CONST 4) = S
(CONST 5) = ANS
(CONST 6) = 0
(CONST 7) = (LIST)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS S *JM* L N)
writes special variables : (S ANS N L)
59 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE 1)                        ; N
8     (BIND 1)                            ; N
10    (GETVALUE 0)                        ; L
12    (BIND 0)                            ; L
14    (GETVALUE 0)                        ; L
16    (JMPIFNOT L50)
18    L18
18    (GETVALUE&PUSH 2)                   ; *JM*
20    (GETVALUE 1)                        ; N
22    (CAR&PUSH)
23    (GETVALUE 0)                        ; L
25    (CAR&PUSH)
26    (LOAD&PUSH 2)
27    (CONST&PUSH 3)                      ; 1
28    (LOAD&PUSH 3)
29    (LOAD&PUSH 3)
30    (CALLSR 2 2)                        ; SYSTEM::STORE
33    (SKIP 3)
35    (GETVALUE 1)                        ; N
37    (CDR&PUSH)
38    (GETVALUE 0)                        ; L
40    (CDR)
41    (SETVALUE 0)                        ; L
43    (POP)
44    (SETVALUE 1)                        ; N
46    (GETVALUE 0)                        ; L
48    (JMPIF L18)
50    L50
50    (UNBIND 2)
52    (GETVALUE&PUSH 0)                   ; L
54    (CALLS2 71)                         ; LENGTH
56    (BIND 4)                            ; S
58    (NIL)
59    (BIND 5)                            ; ANS
61    (JMP L82)
63    L63
63    (GETVALUE&PUSH 2)                   ; *JM*
65    (CONST&PUSH 3)                      ; 1
66    (GETVALUE&PUSH 4)                   ; S
68    (CALLSR&PUSH 2 1)                   ; AREF
71    (GETVALUE 5)                        ; ANS
73    (CONS)
74    (SETVALUE 5)                        ; ANS
76    (GETVALUE&PUSH 4)                   ; S
78    (CALLS2 151)                        ; 1-
80    (SETVALUE 4)                        ; S
82    L82
82    (GETVALUE&PUSH 4)                   ; S
84    (CONST&PUSH 6)                      ; 0
85    (CALLSR&JMPIFNOT 1 45 L63)          ; =
89    (CONST&PUSH 7)                      ; (LIST)
90    (GETVALUE 5)                        ; ANS
92    (CONS)
93    (UNBIND 4)
95    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FINDPR (ALIST FLIST &AUX ...) ...)-43|
(CONST 0) = FINDPR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDPR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDPR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDPR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDPR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDPR
8     (SKIP&RET 1)


Disassembly of function FINDPR
(CONST 0) = 1
(CONST 1) = P
(CONST 2) = ALPHAR
(CONST 3) = FINDFLIST
(CONST 4) = Y
(CONST 5) = EQ
(CONST 6) = FPR-DIF
(CONST 7) = 0
(CONST 8) = PEXPT
(CONST 9) = PTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y ALPHAR P)
writes special variables : (P ALPHAR)
109 byte-code instructions:
0     (CONST 0)                           ; 1
1     (BIND 1)                            ; P
3     (NIL)
4     (BIND 2)                            ; ALPHAR
6     (NIL&PUSH)
7     (LOAD&PUSH 9)
8     (LOAD&JMPIFNOT 0 L76)
12    L12
12    (LOAD 0)
13    (CAR)
14    (CDR)
15    (CAR&PUSH)
16    (LOAD&PUSH 10)
17    (CALL2 3)                           ; FINDFLIST
19    (STORE 1)
20    (JMPIF L126)
23    (LOAD&JMPIFNOT 1 L141)
27    L27
27    (LOAD 1)
28    (CDR)
29    (CDR)
30    (CAR&PUSH)
31    (JMPIFEQTO 0 L149)                  ; 1
35    (LOAD 0)
36    (CAR)
37    (CDR)
38    (CDR)
39    (CAR&PUSH)
40    (LOAD 2)
41    (CDR)
42    (CDR)
43    (CAR&PUSH)
44    (CALLSR&PUSH 1 54)                  ; -
47    (CONST&PUSH 7)                      ; 0
48    (CALLSR 1 51)                       ; MAX
51    L51
51    (SETVALUE 2)                        ; ALPHAR
53    (PUSH)
54    (CALLS2&JMPIF 145 L71)              ; ZEROP
57    (GETVALUE&PUSH 1)                   ; P
59    (LOAD 1)
60    (CAR)
61    (CDR)
62    (CAR&PUSH)
63    (GETVALUE&PUSH 2)                   ; ALPHAR
65    (CALL2&PUSH 8)                      ; PEXPT
67    (CALL2 9)                           ; PTIMES
69    (SETVALUE 1)                        ; P
71    L71
71    (LOAD&CDR&STORE 0)
73    (LOAD&JMPIF 0 L12)
76    L76
76    (SKIP 1)
78    (LOAD&PUSH 8)
79    (LOAD&JMPIFNOT 0 L116)
82    L82
82    (LOAD 0)
83    (CAR)
84    (CDR)
85    (CDR)
86    (CAR&PUSH)
87    (JMPIFNOTEQTO 0 L111)               ; 1
90    (LOAD&CAR&PUSH 0)
92    (CONST&PUSH 7)                      ; 0
93    (CALL2 6)                           ; FPR-DIF
95    (SETVALUE 2)                        ; ALPHAR
97    (GETVALUE&PUSH 1)                   ; P
99    (LOAD 1)
100   (CAR)
101   (CDR)
102   (CAR&PUSH)
103   (GETVALUE&PUSH 2)                   ; ALPHAR
105   (CALL2&PUSH 8)                      ; PEXPT
107   (CALL2 9)                           ; PTIMES
109   (SETVALUE 1)                        ; P
111   L111
111   (LOAD&CDR&STORE 0)
113   (LOAD&JMPIF 0 L82)
116   L116
116   (SKIP 1)
118   (GETVALUE 1)                        ; P
120   (SKIP 1)
122   (UNBIND 2)
124   (SKIP&RET 3)
126   L126
126   (GETVALUE&PUSH 4)                   ; Y
128   (LOAD&PUSH 10)
129   (PUSH-UNBOUND 6)
131   (CONST 5)                           ; EQ
132   (STORE 1)
133   (CONST&PUSH 0)                      ; 1
134   (CALLS2&STORE 78 9)                 ; REMOVE
137   (LOAD&JMPIF 1 L27)
141   L141
141   (LOAD 0)
142   (CAR)
143   (CDR)
144   (CDR)
145   (CAR)
146   (JMP L51)
149   L149
149   (LOAD&CAR&PUSH 9)
151   (LOAD 1)
152   (CAR)
153   (CDR)
154   (CDR)
155   (CAR&PUSH)
156   (CALL2 6)                           ; FPR-DIF
158   (JMP L51)


Disassembly of function #:|(DEFUN FPR-DIF (FTERM ALPHA) ...)-44|
(CONST 0) = FPR-DIF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FPR-DIF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FPR-DIF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FPR-DIF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FPR-DIF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FPR-DIF
8     (SKIP&RET 1)


Disassembly of function FPR-DIF
(CONST 0) = ALPHA
(CONST 1) = NUM
(CONST 2) = MAINVAR
(CONST 3) = SPDERIVATIVE
(CONST 4) = M
(CONST 5) = N
(CONST 6) = X
(CONST 7) = FIXNUMP
(CONST 8) = RATDIVIDE
(CONST 9) = RATQU
(CONST 10) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NUM N ALPHA X M MAINVAR)
writes special variables : (N NUM)
71 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ALPHA
3     (NIL)
4     (BIND 1)                            ; NUM
6     (NIL&PUSH)
7     (LOAD&PUSH 9)
8     (LOAD 0)
9     (CAR)
10    (SETVALUE 1)                        ; NUM
12    (LOAD&CDR&STORE 0)
14    (CAR)
15    (STORE 1)
16    (LOAD 0)
17    (CDR)
18    (CAR)
19    (STORE 0)
20    (LOAD&PUSH 1)
21    (GETVALUE&PUSH 2)                   ; MAINVAR
23    (CALL2 3)                           ; SPDERIVATIVE
25    (BIND 4)                            ; M
27    (NIL)
28    (BIND 5)                            ; N
30    (GETVALUE 4)                        ; M
32    (CAR)
33    (BIND 6)                            ; X
35    (GETVALUE&PUSH 6)                   ; X
37    (CALL1&JMPIF 7 L49)                 ; FIXNUMP
40    (GETVALUE 6)                        ; X
42    (JMPIFCONSP L75)
44    (GETVALUE&PUSH 6)                   ; X
46    (CALLS2&JMPIFNOT 15 L58)            ; FLOATP
49    L49
49    (GETVALUE&PUSH 6)                   ; X
51    (CALLS2 145)                        ; ZEROP
53    (UNBIND1)
54    (JMPIFNOT L76)
56    (JMP L61)
58    L58
58    (UNBIND1)
59    (JMPIFNOT L76)
61    L61
61    (GETVALUE 0)                        ; ALPHA
63    (JMP L100)
65    L65
65    (GETVALUE 5)                        ; N
67    (CAR&PUSH)
68    (GETVALUE&PUSH 0)                   ; ALPHA
70    (CALLSR 1 51)                       ; MAX
73    (JMP L100)
75    L75
75    (UNBIND1)
76    L76
76    (GETVALUE&PUSH 1)                   ; NUM
78    (LOAD&PUSH 8)
79    (CALL2 8)                           ; RATDIVIDE
81    (CDR&PUSH)
82    (GETVALUE&PUSH 4)                   ; M
84    (CALL2 9)                           ; RATQU
86    (SETVALUE 5)                        ; N
88    (CDR&PUSH)
89    (JMPIFNOTEQTO 10 L98)               ; 1
92    (GETVALUE 5)                        ; N
94    (CAR&PUSH)
95    (CALLS2&JMPIF 8 L65)                ; NUMBERP
98    L98
98    (GETVALUE 0)                        ; ALPHA
100   L100
100   (UNBIND 2)
102   (SKIP 2)
104   (UNBIND 2)
106   (SKIP&RET 3)


Disassembly of function #:|(DEFUN FINDFLIST (A LLIST) ...)-45|
(CONST 0) = FINDFLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FINDFLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FINDFLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FINDFLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FINDFLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FINDFLIST
8     (SKIP&RET 1)


Disassembly of function FINDFLIST
(CONST 0) = A
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
23 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD&JMPIFNOT 4 L24)
6     (LOAD 4)
7     (CAR)
8     (CDR)
9     (CAR&PUSH)
10    (GETVALUE&PUSH 0)                   ; A
12    (CALLS2&JMPIF 2 L27)                ; EQUAL
15    (GETVALUE&PUSH 0)                   ; A
17    (LOAD&CDR&PUSH 5)
19    (JSR L0)
21    L21
21    (UNBIND1)
22    (SKIP&RET 3)
24    L24
24    (NIL)
25    (JMP L21)
27    L27
27    (LOAD 4)
28    (CAR)
29    (JMP L21)


Disassembly of function #:|(DEFUN RISCHEXPLOG (EXPEXPFLAG FLAG F ...) ...)-46|
(CONST 0) = RISCHEXPLOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISCHEXPLOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISCHEXPLOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISCHEXPLOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISCHEXPLOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISCHEXPLOG
8     (SKIP&RET 1)


Disassembly of function RISCHEXPLOG
(CONST 0) = EXPEXPFLAG
(CONST 1) = FLAG
(CONST 2) = F
(CONST 3) = A
(CONST 4) = L
(CONST 5) = Y
(CONST 6) = YY
(CONST 7) = M
(CONST 8) = P
(CONST 9) = ALPHAR
(CONST 10) = BETA
(CONST 11) = GAMMA
(CONST 12) = R
(CONST 13) = S
(CONST 14) = N
(CONST 15) = TEMP
(CONST 16) = CARY
(CONST 17) = NOGOOD
(CONST 18) = X
(CONST 19) = FIXNUMP
(CONST 20) = (0 . 1)
(CONST 21) = ((0 . 1) 0)
(CONST 22) = VAR
(CONST 23) = PARTFRAC
(CONST 24) = FINDPR
(CONST 25) = RATDENOMINATOR
(CONST 26) = PLCM
(CONST 27) = 1
(CONST 28) = MAINVAR
(CONST 29) = SPDERIVATIVE
(CONST 30) = RATQU
(CONST 31) = RATPL
(CONST 32) = RATTI
(CONST 33) = PDEGREE
(CONST 34) = POLCOEF
(CONST 35) = RATFIX
(CONST 36) = RATDIF
(CONST 37) = TRYRISCH1
(CONST 38) = RISCHEXPR
(CONST 39) = GETFNCOEFF
(CONST 40) = FINDINT
(CONST 41) = -1
(CONST 42) = CXERFARG
(CONST 43) = (0 . 1)
(CONST 44) = RATNUMERATOR
(CONST 45) = PEXPT
(CONST 46) = 0
(CONST 47) = (0)
(CONST 48) = (0 . 1)
(CONST 49) = EXPPOLYCONTROL
(CONST 50) = (0)
(CONST 51) = RATEXPT
(CONST 52) = -2
(CONST 53) = CAR
(CONST 54) = CDR
(CONST 55) = (0 . 1)
(CONST 56) = LSA
(CONST 57) = SINGULAR
(CONST 58) = INCONSISTENT
(CONST 59) = (0)
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEMP N NOGOOD FLAG YY GAMMA BETA EXPEXPFLAG S R Y MAINVAR P F VAR X A L)
writes special variables : (TEMP F CARY YY GAMMA BETA S R Y P N)
835 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; EXPEXPFLAG
3     (LOAD 7)
4     (BIND 1)                            ; FLAG
6     (LOAD 9)
7     (BIND 2)                            ; F
9     (LOAD 11)
10    (BIND 3)                            ; A
12    (LOAD 13)
13    (BIND 4)                            ; L
15    (NIL&PUSH)
16    (NIL)
17    (BIND 5)                            ; Y
19    (NIL)
20    (BIND 6)                            ; YY
22    (NIL)
23    (BIND 7)                            ; M
25    (NIL)
26    (BIND 8)                            ; P
28    (NIL)
29    (BIND 9)                            ; ALPHAR
31    (NIL)
32    (BIND 10)                           ; BETA
34    (NIL)
35    (BIND 11)                           ; GAMMA
37    (PUSH-NIL 2)
39    (NIL)
40    (BIND 12)                           ; R
42    (NIL)
43    (BIND 13)                           ; S
45    (PUSH-NIL 5)
47    (NIL)
48    (BIND 14)                           ; N
50    (PUSH-NIL 3)
52    (NIL)
53    (BIND 15)                           ; TEMP
55    (NIL)
56    (BIND 16)                           ; CARY
58    (NIL)
59    (BIND 17)                           ; NOGOOD
61    (PUSH-NIL 5)
63    (GETVALUE 4)                        ; L
65    (STORE 14)
67    (CAR)
68    (STORE 20)
70    (LOAD&CDR&STORE 14)
72    (CAR)
73    (SETVALUE 14)                       ; N
75    (LOAD&CDR&STORE 14)
77    (CAR)
78    (STORE 16)
80    (LOAD&CDR&STORE 14)
82    (CAR)
83    (STORE 15)
85    (LOAD 14)
86    (CDR)
87    (CAR)
88    (STORE 14)
90    (GETVALUE 3)                        ; A
92    (BIND 18)                           ; X
94    (GETVALUE&PUSH 18)                  ; X
96    (CALL1&JMPIF 19 L337)               ; FIXNUMP
100   (GETVALUE 18)                       ; X
102   (JMPIFATOM L332)
105   (UNBIND1)
106   L106
106   (GETVALUE 3)                        ; A
108   (CAR)
109   (BIND 18)                           ; X
111   (GETVALUE&PUSH 18)                  ; X
113   (CALL1&JMPIF 19 L358)               ; FIXNUMP
117   (GETVALUE 18)                       ; X
119   (JMPIFATOM L353)
122   (UNBIND1)
123   L123
123   (GETVALUE&PUSH 3)                   ; A
125   (GETVALUE&PUSH 22)                  ; VAR
127   (CALL2 23)                          ; PARTFRAC
129   (CDR&PUSH)
130   (GETVALUE&PUSH 2)                   ; F
132   (GETVALUE&PUSH 22)                  ; VAR
134   (CALL2 23)                          ; PARTFRAC
136   (CDR&PUSH)
137   (CALL2 24)                          ; FINDPR
139   (SETVALUE 8)                        ; P
141   (GETVALUE&PUSH 3)                   ; A
143   (CALL1&PUSH 25)                     ; RATDENOMINATOR
145   (GETVALUE&PUSH 8)                   ; P
147   (CALL2 26)                          ; PLCM
149   (STORE 54)
151   (CONST&PUSH 27)                     ; 1
152   (GETVALUE 8)                        ; P
154   (CONS&PUSH)
155   (GETVALUE&PUSH 28)                  ; MAINVAR
157   (CALL2&PUSH 29)                     ; SPDERIVATIVE
159   (GETVALUE&PUSH 2)                   ; F
161   (GETVALUE&PUSH 8)                   ; P
163   (CALL2&PUSH 30)                     ; RATQU
165   (CALL2 31)                          ; RATPL
167   (SETVALUE 5)                        ; Y
169   (LOAD&PUSH 54)
171   (GETVALUE&PUSH 5)                   ; Y
173   (CALL1&PUSH 25)                     ; RATDENOMINATOR
175   (CALL2 26)                          ; PLCM
177   (STORE 54)
179   (PUSH)
180   (GETVALUE&PUSH 8)                   ; P
182   (CALL2 30)                          ; RATQU
184   (CAR)
185   (SETVALUE 12)                       ; R
187   (LOAD&PUSH 54)
189   (GETVALUE&PUSH 5)                   ; Y
191   (T&PUSH)
192   (CALL 3 32)                         ; RATTI
195   (CAR)
196   (SETVALUE 13)                       ; S
198   (GETVALUE&PUSH 3)                   ; A
200   (LOAD&PUSH 55)
202   (T&PUSH)
203   (CALL 3 32)                         ; RATTI
206   (CAR)
207   (STORE 24)
209   (GETVALUE&PUSH 12)                  ; R
211   (GETVALUE&PUSH 22)                  ; VAR
213   (CALL2 33)                          ; PDEGREE
215   (SETVALUE 10)                       ; BETA
217   (GETVALUE&PUSH 13)                  ; S
219   (GETVALUE&PUSH 22)                  ; VAR
221   (CALL2 33)                          ; PDEGREE
223   (SETVALUE 11)                       ; GAMMA
225   (LOAD&PUSH 24)
226   (GETVALUE&PUSH 22)                  ; VAR
228   (CALL2 33)                          ; PDEGREE
230   (STORE 32)
232   (GETVALUE 0)                        ; EXPEXPFLAG
234   (JMPIFNOT L765)
237   (LOAD&PUSH 32)
239   (GETVALUE&PUSH 10)                  ; BETA
241   (CALLSR&PUSH 1 54)                  ; -
244   (LOAD&PUSH 33)
246   (GETVALUE&PUSH 11)                  ; GAMMA
248   (CALLSR&PUSH 1 54)                  ; -
251   (CALLSR&STORE 1 51 31)              ; MAX
255   (GETVALUE&PUSH 10)                  ; BETA
257   (GETVALUE&PUSH 11)                  ; GAMMA
259   (CALLS2&JMPIFNOT 2 L882)            ; EQUAL
263   (GETVALUE&PUSH 13)                  ; S
265   (GETVALUE&PUSH 11)                  ; GAMMA
267   (CALL2&PUSH 34)                     ; POLCOEF
269   (GETVALUE&PUSH 12)                  ; R
271   (GETVALUE&PUSH 10)                  ; BETA
273   (CALL2&PUSH 34)                     ; POLCOEF
275   (CALL2&PUSH 30)                     ; RATQU
277   (GETVALUE&PUSH 28)                  ; MAINVAR
279   (CALL2 37)                          ; TRYRISCH1
281   (SETVALUE 5)                        ; Y
283   (CDR&PUSH)
284   (CALL1&JMPIF 40 L882)               ; FINDINT
288   (CONST&PUSH 41)                     ; -1
290   (GETVALUE 5)                        ; Y
292   (CAR&PUSH)
293   (T&PUSH)
294   (CALL&PUSH 3 32)                    ; RATTI
297   (LOAD&PUSH 17)
298   (CALL2 30)                          ; RATQU
300   (SETVALUE 6)                        ; YY
302   (CDR&PUSH)
303   (JMPIFNOTEQTO 27 L882)              ; 1
307   L307
307   (GETVALUE 6)                        ; YY
309   (CAR&PUSH)
310   (CALLS2&JMPIFNOT 8 L882)            ; NUMBERP
314   (GETVALUE 6)                        ; YY
316   (CAR&PUSH)
317   (LOAD&PUSH 32)
319   (CALLSR&JMPIFNOT 1 48 L882)         ; >
324   (GETVALUE 6)                        ; YY
326   (CAR)
327   (STORE 31)
329   (JMP L882)
332   L332
332   (GETVALUE&PUSH 18)                  ; X
334   (CALLS2&JMPIFNOT 15 L347)           ; FLOATP
337   L337
337   (GETVALUE&PUSH 18)                  ; X
339   (CALLS2 145)                        ; ZEROP
341   (UNBIND1)
342   (JMPIFNOT L106)
345   (JMP L376)
347   L347
347   (UNBIND1)
348   (JMPIFNOT L106)
351   (JMP L376)
353   L353
353   (GETVALUE&PUSH 18)                  ; X
355   (CALLS2&JMPIFNOT 15 L372)           ; FLOATP
358   L358
358   (GETVALUE&PUSH 18)                  ; X
360   (CALLS2 145)                        ; ZEROP
362   (UNBIND1)
363   (JMPIFNOT L123)
366   (JMP L376)
368   L368
368   (CONST 20)                          ; (0 . 1)
369   (JMP L1492)
372   L372
372   (UNBIND1)
373   (JMPIFNOT L123)
376   L376
376   (GETVALUE 1)                        ; FLAG
378   (JMPIFNOT L368)
380   (CONST 21)                          ; ((0 . 1) 0)
382   (JMP L1492)
385   L385
385   (GETVALUE&PUSH 12)                  ; R
387   (GETVALUE&PUSH 10)                  ; BETA
389   (CALLS2&PUSH 151)                   ; 1-
391   (CALL2&PUSH 34)                     ; POLCOEF
393   (GETVALUE&PUSH 13)                  ; S
395   (GETVALUE&PUSH 11)                  ; GAMMA
397   (CALL2&PUSH 34)                     ; POLCOEF
399   (T&PUSH)
400   (CALL&PUSH 3 32)                    ; RATTI
403   (CALL1&PUSH 35)                     ; RATFIX
405   (GETVALUE&PUSH 12)                  ; R
407   (GETVALUE&PUSH 10)                  ; BETA
409   (CALL2&PUSH 34)                     ; POLCOEF
411   (GETVALUE&PUSH 13)                  ; S
413   (GETVALUE&PUSH 11)                  ; GAMMA
415   (CALLS2&PUSH 151)                   ; 1-
417   (CALL2&PUSH 34)                     ; POLCOEF
419   (T&PUSH)
420   (CALL&PUSH 3 32)                    ; RATTI
423   (CALL2&PUSH 36)                     ; RATDIF
425   (GETVALUE&PUSH 12)                  ; R
427   (GETVALUE&PUSH 10)                  ; BETA
429   (CALL2&PUSH 34)                     ; POLCOEF
431   (GETVALUE&PUSH 12)                  ; R
433   (GETVALUE&PUSH 10)                  ; BETA
435   (CALL2&PUSH 34)                     ; POLCOEF
437   (T&PUSH)
438   (CALL&PUSH 3 32)                    ; RATTI
441   (CALL2&PUSH 30)                     ; RATQU
443   (GETVALUE&PUSH 28)                  ; MAINVAR
445   (CALL2 37)                          ; TRYRISCH1
447   (SETVALUE 5)                        ; Y
449   (CAR)
450   (SETVALUE 16)                       ; CARY
452   (GETVALUE 5)                        ; Y
454   (CDR&PUSH)
455   (GETVALUE&PUSH 22)                  ; VAR
457   (CONST&PUSH 38)                     ; RISCHEXPR
459   (PUSH-UNBOUND 1)
461   (CALLS2&PUSH 132)                   ; GET
463   (CALL2 39)                          ; GETFNCOEFF
465   (SETVALUE 6)                        ; YY
467   (GETVALUE 5)                        ; Y
469   (CDR&PUSH)
470   (CALL1&JMPIF 40 L882)               ; FINDINT
474   (GETVALUE 17)                       ; NOGOOD
476   (JMPIF L882)
479   (GETVALUE 6)                        ; YY
481   (JMPIFATOM L882)
484   (GETVALUE 6)                        ; YY
486   (CDR&PUSH)
487   (JMPIFNOTEQTO 27 L882)              ; 1
491   (JMP L307)
494   L494
494   (GETVALUE 1)                        ; FLAG
496   (JMPIFNOT1 L1492)
499   (CONST 20)                          ; (0 . 1)
500   (JMP L1402)
503   L503
503   (GETVALUE&PUSH 13)                  ; S
505   (GETVALUE&PUSH 11)                  ; GAMMA
507   (CALL2 34)                          ; POLCOEF
509   (STORE 23)
511   (CONST 43)                          ; (0 . 1)
513   (SETVALUE 5)                        ; Y
515   L515
515   (LOAD&PUSH 24)
516   (CALL1&PUSH 44)                     ; RATNUMERATOR
518   (LOAD&PUSH 32)
520   (GETVALUE&PUSH 11)                  ; GAMMA
522   (CALLSR&PUSH 2 53)                  ; +
525   (CALL2&PUSH 34)                     ; POLCOEF
527   (LOAD&PUSH 25)
529   (CALL1&PUSH 25)                     ; RATDENOMINATOR
531   (LOAD&PUSH 25)
533   (T&PUSH)
534   (CALL&PUSH 3 32)                    ; RATTI
537   (CALL2 30)                          ; RATQU
539   (STORE 22)
541   (GETVALUE&PUSH 5)                   ; Y
543   (LOAD&PUSH 23)
544   (LOAD&PUSH 17)
545   (CONST&PUSH 27)                     ; 1
546   (CONST&PUSH 27)                     ; 1
547   (LIST&PUSH 3)
549   (LOAD&PUSH 34)
551   (CALL2&PUSH 45)                     ; PEXPT
553   (T&PUSH)
554   (CALL 3 32)                         ; RATTI
557   (STORE 23)
559   (PUSH)
560   (CALL2 31)                          ; RATPL
562   (SETVALUE 5)                        ; Y
564   (LOAD&PUSH 24)
565   (CALL1&PUSH 35)                     ; RATFIX
567   (GETVALUE&PUSH 13)                  ; S
569   (LOAD&PUSH 24)
570   (T&PUSH)
571   (CALL&PUSH 3 32)                    ; RATTI
574   (GETVALUE&PUSH 12)                  ; R
576   (LOAD&PUSH 25)
578   (GETVALUE&PUSH 28)                  ; MAINVAR
580   (CALL2&PUSH 29)                     ; SPDERIVATIVE
582   (T&PUSH)
583   (CALL&PUSH 3 32)                    ; RATTI
586   (CALL2&PUSH 31)                     ; RATPL
588   (CALL2 36)                          ; RATDIF
590   (STORE 24)
592   (LOAD&DEC&STORE 31)
594   (PUSH)
595   (CONST&PUSH 46)                     ; 0
597   (CALLSR&JMPIFNOT 1 47 L515)         ; <
602   (GETVALUE 1)                        ; FLAG
604   (JMPIF L644)
606   (LOAD 24)
608   (CAR)
609   (BIND 18)                           ; X
611   (GETVALUE&PUSH 18)                  ; X
613   (CALL1&JMPIF 19 L626)               ; FIXNUMP
616   (GETVALUE 18)                       ; X
618   (JMPIFCONSP L1058)
621   (GETVALUE&PUSH 18)                  ; X
623   (CALLS2&JMPIFNOT 15 L636)           ; FLOATP
626   L626
626   (GETVALUE&PUSH 18)                  ; X
628   (CALLS2 145)                        ; ZEROP
630   (UNBIND1)
631   (JMPIFNOT L640)
633   (JMP L1465)
636   L636
636   (UNBIND1)
637   (JMPIF L1465)
640   L640
640   (NIL)
641   (JMP L1492)
644   L644
644   (LOAD 24)
646   (CAR)
647   (BIND 18)                           ; X
649   (GETVALUE&PUSH 18)                  ; X
651   (CALL1&JMPIF 19 L663)               ; FIXNUMP
654   (GETVALUE 18)                       ; X
656   (JMPIFCONSP L699)
658   (GETVALUE&PUSH 18)                  ; X
660   (CALLS2&JMPIFNOT 15 L672)           ; FLOATP
663   L663
663   (GETVALUE&PUSH 18)                  ; X
665   (CALLS2 145)                        ; ZEROP
667   (UNBIND1)
668   (JMPIFNOT L700)
670   (JMP L675)
672   L672
672   (UNBIND1)
673   (JMPIFNOT L700)
675   L675
675   (GETVALUE&PUSH 5)                   ; Y
677   (LOAD&PUSH 21)
678   (GETVALUE&PUSH 14)                  ; N
680   (CONST&PUSH 27)                     ; 1
681   (LIST&PUSH 3)
683   (CONST 27)                          ; 1
685   (CONS&PUSH)
686   (T&PUSH)
687   (CALL&PUSH 3 32)                    ; RATTI
690   (GETVALUE&PUSH 8)                   ; P
692   (CALL2&PUSH 30)                     ; RATQU
694   (CONST 47)                          ; (0)
696   (JMP L1125)
699   L699
699   (UNBIND1)
700   L700
700   (GETVALUE&PUSH 5)                   ; Y
702   (LOAD&PUSH 21)
703   (GETVALUE&PUSH 14)                  ; N
705   (CONST&PUSH 27)                     ; 1
706   (LIST&PUSH 3)
708   (CONST 27)                          ; 1
710   (JMP L1173)
713   L713
713   (LOAD&PUSH 32)
715   (LOAD&PUSH 18)
716   (GETVALUE&PUSH 28)                  ; MAINVAR
718   (CALL2&PUSH 29)                     ; SPDERIVATIVE
720   (T&PUSH)
721   (CALL 3 32)                         ; RATTI
724   (JMP L934)
727   L727
727   (GETVALUE&PUSH 5)                   ; Y
729   (LOAD&PUSH 21)
730   (GETVALUE&PUSH 14)                  ; N
732   (CONST&PUSH 27)                     ; 1
733   (LIST&PUSH 3)
735   (CONST 27)                          ; 1
737   (JMP L1173)
740   L740
740   (GETVALUE 1)                        ; FLAG
742   (JMPIF L727)
744   (NIL)
745   (SKIP 5)
747   (UNBIND 3)
749   (SKIP 3)
751   (UNBIND1)
752   (SKIP 5)
754   (UNBIND 2)
756   (SKIP 2)
758   (UNBIND 7)
760   (SKIP 1)
762   (JMP L1509)
765   L765
765   (LOAD&INC&PUSH 32)
767   (GETVALUE&PUSH 10)                  ; BETA
769   (CALLSR&PUSH 1 54)                  ; -
772   (LOAD&INC&PUSH 33)
774   (GETVALUE&PUSH 11)                  ; GAMMA
776   (CALLSR&PUSH 1 54)                  ; -
779   (CALLSR&STORE 1 51 31)              ; MAX
783   (GETVALUE&PUSH 10)                  ; BETA
785   (GETVALUE&PUSH 11)                  ; GAMMA
787   (CALLSR&JMPIF 1 47 L882)            ; <
792   (GETVALUE&PUSH 10)                  ; BETA
794   (CALLS2&PUSH 151)                   ; 1-
796   (GETVALUE&PUSH 11)                  ; GAMMA
798   (CALLSR&JMPIFNOT 1 45 L385)         ; =
803   (GETVALUE&PUSH 13)                  ; S
805   (GETVALUE&PUSH 11)                  ; GAMMA
807   (CALL2&PUSH 34)                     ; POLCOEF
809   (GETVALUE&PUSH 12)                  ; R
811   (GETVALUE&PUSH 10)                  ; BETA
813   (CALL2&PUSH 34)                     ; POLCOEF
815   (CALL2&PUSH 30)                     ; RATQU
817   (GETVALUE&PUSH 28)                  ; MAINVAR
819   (CALL2 37)                          ; TRYRISCH1
821   (SETVALUE 5)                        ; Y
823   (CAR)
824   (SETVALUE 16)                       ; CARY
826   (GETVALUE 5)                        ; Y
828   (CDR&PUSH)
829   (GETVALUE&PUSH 22)                  ; VAR
831   (CONST&PUSH 38)                     ; RISCHEXPR
833   (PUSH-UNBOUND 1)
835   (CALLS2&PUSH 132)                   ; GET
837   (CALL2 39)                          ; GETFNCOEFF
839   (SETVALUE 6)                        ; YY
841   (GETVALUE 5)                        ; Y
843   (CDR&PUSH)
844   (CALL1&JMPIF 40 L882)               ; FINDINT
847   (GETVALUE 17)                       ; NOGOOD
849   (JMPIF L882)
851   (GETVALUE 6)                        ; YY
853   (CDR&PUSH)
854   (JMPIFNOTEQTO 27 L882)              ; 1
857   (GETVALUE 6)                        ; YY
859   (CAR&PUSH)
860   (CALLS2&JMPIFNOT 8 L882)            ; NUMBERP
863   (GETVALUE 6)                        ; YY
865   (CAR&PUSH)
866   (CALLSR&PUSH 0 54)                  ; -
869   (LOAD&PUSH 32)
871   (CALLSR&JMPIFNOT 1 48 L882)         ; >
875   (GETVALUE 6)                        ; YY
877   (CAR&PUSH)
878   (CALLSR&STORE 0 54 31)              ; -
882   L882
882   (LOAD&PUSH 31)
884   (CALLS2&JMPIF 147 L494)             ; MINUSP
888   (GETVALUE&PUSH 10)                  ; BETA
890   (GETVALUE&PUSH 11)                  ; GAMMA
892   (CALLSR&JMPIF 1 48 L1194)           ; >
897   (GETVALUE&PUSH 10)                  ; BETA
899   (GETVALUE&PUSH 11)                  ; GAMMA
901   (CALLSR&JMPIFNOT 1 45 L503)         ; =
906   (GETVALUE&PUSH 12)                  ; R
908   (GETVALUE&PUSH 10)                  ; BETA
910   (CALL2 34)                          ; POLCOEF
912   (STORE 21)
914   (CONST 48)                          ; (0 . 1)
916   (SETVALUE 5)                        ; Y
918   L918
918   (GETVALUE&PUSH 13)                  ; S
920   (GETVALUE&PUSH 11)                  ; GAMMA
922   (CALL2&PUSH 34)                     ; POLCOEF
924   (LOAD&PUSH 22)
925   (CALL2&PUSH 30)                     ; RATQU
927   (GETVALUE 0)                        ; EXPEXPFLAG
929   (JMPIF L713)
932   (CONST 46)                          ; 0
934   L934
934   (PUSH)
935   (CALL2 31)                          ; RATPL
937   (SETVALUE 2)                        ; F
939   (NIL&PUSH)
940   (GETVALUE&PUSH 2)                   ; F
942   (LOAD&PUSH 26)
944   (CALL1&PUSH 44)                     ; RATNUMERATOR
946   (GETVALUE&PUSH 10)                  ; BETA
948   (LOAD&PUSH 35)
950   (CALLSR&PUSH 2 53)                  ; +
953   (CALL2&PUSH 34)                     ; POLCOEF
955   (LOAD&PUSH 27)
957   (CALL1&PUSH 25)                     ; RATDENOMINATOR
959   (LOAD&PUSH 25)
961   (T&PUSH)
962   (CALL&PUSH 3 32)                    ; RATTI
965   (CALL2&PUSH 30)                     ; RATQU
967   (LOAD&PUSH 23)
968   (GETVALUE&PUSH 14)                  ; N
970   (CALL 5 49)                         ; EXPPOLYCONTROL
973   (STORE 22)
975   (JMPIFNOT L740)
978   (GETVALUE&PUSH 5)                   ; Y
980   (LOAD&PUSH 23)
981   (LOAD&PUSH 17)
982   (CONST&PUSH 27)                     ; 1
983   (CONST&PUSH 27)                     ; 1
984   (LIST&PUSH 3)
986   (LOAD&PUSH 34)
988   (CALL2&PUSH 45)                     ; PEXPT
990   (T&PUSH)
991   (CALL 3 32)                         ; RATTI
994   (STORE 23)
996   (PUSH)
997   (CALL2 31)                          ; RATPL
999   (SETVALUE 5)                        ; Y
1001  (LOAD&PUSH 24)
1002  (CALL1&PUSH 35)                     ; RATFIX
1004  (GETVALUE&PUSH 13)                  ; S
1006  (LOAD&PUSH 24)
1007  (T&PUSH)
1008  (CALL&PUSH 3 32)                    ; RATTI
1011  (GETVALUE&PUSH 12)                  ; R
1013  (LOAD&PUSH 25)
1015  (GETVALUE&PUSH 28)                  ; MAINVAR
1017  (CALL2&PUSH 29)                     ; SPDERIVATIVE
1019  (T&PUSH)
1020  (CALL&PUSH 3 32)                    ; RATTI
1023  (CALL2&PUSH 31)                     ; RATPL
1025  (CALL2 36)                          ; RATDIF
1027  (STORE 24)
1029  (LOAD&DEC&STORE 31)
1031  (PUSH)
1032  (CONST&PUSH 46)                     ; 0
1034  (CALLSR&JMPIFNOT 1 47 L918)         ; <
1039  (GETVALUE 1)                        ; FLAG
1041  (JMPIF L1146)
1044  (LOAD 24)
1046  (CAR)
1047  (BIND 18)                           ; X
1049  (GETVALUE&PUSH 18)                  ; X
1051  (CALL1&JMPIF 19 L1068)              ; FIXNUMP
1054  (GETVALUE 18)                       ; X
1056  (JMPIFATOM L1063)
1058  L1058
1058  (UNBIND1)
1059  (NIL)
1060  (JMP L1492)
1063  L1063
1063  (GETVALUE&PUSH 18)                  ; X
1065  (CALLS2&JMPIFNOT 15 L1078)          ; FLOATP
1068  L1068
1068  (GETVALUE&PUSH 18)                  ; X
1070  (CALLS2 145)                        ; ZEROP
1072  (UNBIND1)
1073  (JMPIFNOT L1082)
1075  (JMP L1465)
1078  L1078
1078  (UNBIND1)
1079  (JMPIF L1465)
1082  L1082
1082  (NIL)
1083  (JMP L1492)
1086  L1086
1086  (GETVALUE&PUSH 18)                  ; X
1088  (CALLS2 145)                        ; ZEROP
1090  (UNBIND1)
1091  (JMPIFNOT L1163)
1094  (JMP L1104)
1096  L1096
1096  (GETVALUE&PUSH 18)                  ; X
1098  (CALLS2&JMPIF 15 L1086)             ; FLOATP
1101  (UNBIND1)
1102  (JMPIFNOT L1163)
1104  L1104
1104  (GETVALUE&PUSH 5)                   ; Y
1106  (LOAD&PUSH 21)
1107  (GETVALUE&PUSH 14)                  ; N
1109  (CONST&PUSH 27)                     ; 1
1110  (LIST&PUSH 3)
1112  (CONST 27)                          ; 1
1114  (CONS&PUSH)
1115  (T&PUSH)
1116  (CALL&PUSH 3 32)                    ; RATTI
1119  (GETVALUE&PUSH 8)                   ; P
1121  (CALL2&PUSH 30)                     ; RATQU
1123  (CONST 50)                          ; (0)
1125  L1125
1125  (CONS)
1126  (SKIP 5)
1128  (UNBIND 3)
1130  (SKIP 3)
1132  (UNBIND1)
1133  (SKIP 5)
1135  (UNBIND 2)
1137  (SKIP 2)
1139  (UNBIND 7)
1141  (SKIP 1)
1143  (JMP L1509)
1146  L1146
1146  (LOAD 24)
1148  (CAR)
1149  (BIND 18)                           ; X
1151  (GETVALUE&PUSH 18)                  ; X
1153  (CALL1&JMPIF 19 L1086)              ; FIXNUMP
1157  (GETVALUE 18)                       ; X
1159  (JMPIFATOM L1096)
1162  (UNBIND1)
1163  L1163
1163  (GETVALUE&PUSH 5)                   ; Y
1165  (LOAD&PUSH 21)
1166  (GETVALUE&PUSH 14)                  ; N
1168  (CONST&PUSH 27)                     ; 1
1169  (LIST&PUSH 3)
1171  (CONST 27)                          ; 1
1173  L1173
1173  (CONS&PUSH)
1174  (T&PUSH)
1175  (CALL&PUSH 3 32)                    ; RATTI
1178  (GETVALUE&PUSH 8)                   ; P
1180  (CALL2&PUSH 30)                     ; RATQU
1182  (LOAD&PUSH 21)
1183  (GETVALUE&PUSH 14)                  ; N
1185  (LOAD&PUSH 27)
1187  (LOAD&PUSH 58)
1189  (CALL2 30)                          ; RATQU
1191  (JMP L1408)
1194  L1194
1194  (LOAD 31)
1196  (STORE 1)
1197  L1197
1197  (LOAD&PUSH 15)
1198  (CONST&PUSH 27)                     ; 1
1199  (CONST&PUSH 27)                     ; 1
1200  (LIST&PUSH 3)
1202  (CONST 27)                          ; 1
1204  (CONS&PUSH)
1205  (LOAD&DEC&PUSH 32)
1207  (CALL2&PUSH 51)                     ; RATEXPT
1209  (GETVALUE&PUSH 13)                  ; S
1211  (LOAD&PUSH 17)
1212  (CONST&PUSH 27)                     ; 1
1213  (CONST&PUSH 27)                     ; 1
1214  (LIST&PUSH 3)
1216  (CONST 27)                          ; 1
1218  (CONS&PUSH)
1219  (T&PUSH)
1220  (CALL&PUSH 3 32)                    ; RATTI
1223  (LOAD&PUSH 33)
1225  (GETVALUE&PUSH 12)                  ; R
1227  (LOAD&PUSH 18)
1228  (T&PUSH)
1229  (CALL&PUSH 3 32)                    ; RATTI
1232  (T&PUSH)
1233  (CALL&PUSH 3 32)                    ; RATTI
1236  (CALL2&PUSH 31)                     ; RATPL
1238  (T&PUSH)
1239  (CALL 3 32)                         ; RATTI
1242  (SETVALUE 15)                       ; TEMP
1244  (JMP L1254)
1246  L1246
1246  (NIL)
1247  (JMP L1492)
1250  L1250
1250  (LOAD 24)
1252  (SETVALUE 15)                       ; TEMP
1254  L1254
1254  (NIL&STORE 4)
1256  (LOAD&PUSH 1)
1257  (GETVALUE&PUSH 10)                  ; BETA
1259  (CALLSR&STORE 2 53 2)               ; +
1263  L1263
1263  (GETVALUE&PUSH 15)                  ; TEMP
1265  (CALL1&PUSH 44)                     ; RATNUMERATOR
1267  (LOAD&PUSH 3)
1268  (CALL2&PUSH 34)                     ; POLCOEF
1270  (GETVALUE&PUSH 15)                  ; TEMP
1272  (CALL1&PUSH 25)                     ; RATDENOMINATOR
1274  (CALL2&PUSH 30)                     ; RATQU
1276  (LOAD&CONS&STORE 4)
1278  (LOAD&DEC&STORE 2)
1280  (PUSH)
1281  (CONST&PUSH 46)                     ; 0
1283  (CALLSR&JMPIFNOT 1 47 L1263)        ; <
1287  (LOAD&DEC&STORE 31)
1289  (LOAD&PUSH 3)
1290  (LOAD&PUSH 5)
1291  (CALLS2&PUSH 72)                    ; REVERSE
1293  (LIST&PUSH 1)
1295  (CALLSR&STORE 2 34 3)               ; APPEND
1299  (LOAD&PUSH 31)
1301  (CONST&PUSH 46)                     ; 0
1303  (CALLSR&JMPIFNOT 1 47 L1197)        ; <
1308  (LOAD&PUSH 31)
1310  (JMPIFNOTEQTO 52 L1250)             ; -2
1313  (NIL&STORE 0)
1315  L1315
1315  (NIL&STORE 4)
1317  (CONST&PUSH 53)                     ; CAR
1319  (LOAD&PUSH 4)
1320  (CALLSR&STORE 0 22 4)               ; MAPCAR
1324  (CONST&PUSH 54)                     ; CDR
1326  (LOAD&PUSH 4)
1327  (CALLSR&STORE 0 22 3)               ; MAPCAR
1331  (LOAD&PUSH 0)
1332  (LOAD&PUSH 5)
1333  (LIST&PUSH 1)
1335  (CALLSR&STORE 2 34 0)               ; APPEND
1339  (LOAD 3)
1340  (CAR)
1341  (JMPIF L1315)
1343  (LOAD&PUSH 1)
1344  (CALLS2&STORE 150 2)                ; 1+
1347  (NIL&STORE 4)
1349  L1349
1349  (CONST&PUSH 55)                     ; (0 . 1)
1351  (LOAD&CONS&STORE 4)
1353  (LOAD&DEC&STORE 2)
1355  (PUSH)
1356  (CONST&PUSH 46)                     ; 0
1358  (CALLSR&JMPIFNOT 1 47 L1349)        ; <
1362  (NIL&STORE 3)
1364  L1364
1364  (LOAD&CAR&PUSH 0)
1366  (LOAD&PUSH 5)
1367  (CALLS2&JMPIF 2 L1374)              ; EQUAL
1370  (LOAD&CAR&PUSH 0)
1372  (LOAD&CONS&STORE 3)
1374  L1374
1374  (LOAD&CDR&STORE 0)
1376  (JMPIF L1364)
1378  (LOAD&PUSH 3)
1379  (CALLS2&STORE 72 0)                 ; REVERSE
1382  (PUSH)
1383  (CALL1 56)                          ; LSA
1385  (SETVALUE 15)                       ; TEMP
1387  (PUSH)
1388  (JMPIFEQTO 57 L1396)                ; SINGULAR
1391  (GETVALUE&PUSH 15)                  ; TEMP
1393  (JMPIFNOTEQTO 58 L1415)             ; INCONSISTENT
1396  L1396
1396  (GETVALUE 1)                        ; FLAG
1398  (JMPIFNOT L1246)
1401  (CONST 20)                          ; (0 . 1)
1402  L1402
1402  (PUSH)
1403  (LOAD&PUSH 21)
1404  (GETVALUE&PUSH 14)                  ; N
1406  (GETVALUE 3)                        ; A
1408  L1408
1408  (PUSH)
1409  (CALL 4 42)                         ; CXERFARG
1412  (JMP L1492)
1415  L1415
1415  (GETVALUE 15)                       ; TEMP
1417  (CDR&PUSH)
1418  (CALLS2 72)                         ; REVERSE
1420  (SETVALUE 15)                       ; TEMP
1422  (CONST 46)                          ; 0
1424  (STORE 2)
1425  (SETVALUE 5)                        ; Y
1427  L1427
1427  (GETVALUE&PUSH 5)                   ; Y
1429  (GETVALUE 15)                       ; TEMP
1431  (CAR&PUSH)
1432  (LOAD&PUSH 17)
1433  (CONST&PUSH 27)                     ; 1
1434  (CONST&PUSH 27)                     ; 1
1435  (LIST&PUSH 3)
1437  (LOAD&PUSH 5)
1438  (CALL2&PUSH 45)                     ; PEXPT
1440  (T&PUSH)
1441  (CALL&PUSH 3 32)                    ; RATTI
1444  (CALL2 31)                          ; RATPL
1446  (SETVALUE 5)                        ; Y
1448  (GETVALUE 15)                       ; TEMP
1450  (CDR)
1451  (SETVALUE 15)                       ; TEMP
1453  (LOAD&INC&STORE 2)
1455  (PUSH)
1456  (LOAD&PUSH 2)
1457  (CALLSR&JMPIFNOT 1 48 L1427)        ; >
1461  (GETVALUE 1)                        ; FLAG
1463  (JMPIF L1473)
1465  L1465
1465  (GETVALUE&PUSH 5)                   ; Y
1467  (GETVALUE&PUSH 8)                   ; P
1469  (CALL2 30)                          ; RATQU
1471  (JMP L1492)
1473  L1473
1473  (LOAD&PUSH 20)
1474  (GETVALUE&PUSH 14)                  ; N
1476  (CONST&PUSH 27)                     ; 1
1477  (LIST&PUSH 3)
1479  (GETVALUE&PUSH 5)                   ; Y
1481  (GETVALUE&PUSH 8)                   ; P
1483  (CALL2&PUSH 30)                     ; RATQU
1485  (T&PUSH)
1486  (CALL&PUSH 3 32)                    ; RATTI
1489  (CONST 59)                          ; (0)
1491  (CONS)
1492  L1492
1492  (SKIP 5)
1494  (UNBIND 3)
1496  (SKIP 3)
1498  (UNBIND1)
1499  (SKIP 5)
1501  (UNBIND 2)
1503  (SKIP 2)
1505  (UNBIND 7)
1507  (SKIP 1)
1509  L1509
1509  (UNBIND 5)
1511  (SKIP&RET 6)


Disassembly of function #:|(DEFUN ERFARG (EXPARG COEF) ...)-47|
(CONST 0) = ERFARG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERFARG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERFARG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERFARG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERFARG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERFARG
8     (SKIP&RET 1)


Disassembly of function ERFARG
(CONST 0) = COEF
(CONST 1) = NUM
(CONST 2) = RATFIX
(CONST 3) = RATMINUS
(CONST 4) = RATNUMERATOR
(CONST 5) = 2
(CONST 6) = PNTHROOTP
(CONST 7) = RATDENOMINATOR
(CONST 8) = MAINVAR
(CONST 9) = SPDERIVATIVE
(CONST 10) = RATQU
(CONST 11) = RISCH-CONSTP
(CONST 12) = (MTIMES)
(CONST 13) = ((RAT) 1 2)
(CONST 14) = ((MEXPT) $%PI ((RAT) 1 2))
(CONST 15) = DISREP
(CONST 16) = (%ERF)
(CONST 17) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MAINVAR COEF NUM)
writes special variables : (COEF NUM)
55 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; COEF
3     (NIL)
4     (BIND 1)                            ; NUM
6     (PUSH-NIL 2)
8     (LOAD&PUSH 10)
9     (CALL1&PUSH 2)                      ; RATFIX
11    (CALL1 3)                           ; RATMINUS
13    (STORE 10)
15    (PUSH)
16    (CALL1&PUSH 4)                      ; RATNUMERATOR
18    (CONST&PUSH 5)                      ; 2
19    (CALL2 6)                           ; PNTHROOTP
21    (SETVALUE 1)                        ; NUM
23    (JMPIFNOT L54)
25    (LOAD&PUSH 10)
26    (CALL1&PUSH 7)                      ; RATDENOMINATOR
28    (CONST&PUSH 5)                      ; 2
29    (CALL2 6)                           ; PNTHROOTP
31    (STORE 1)
32    (JMPIFNOT L54)
34    (GETVALUE&PUSH 1)                   ; NUM
36    (LOAD 2)
37    (CONS)
38    (STORE 0)
39    (GETVALUE&PUSH 0)                   ; COEF
41    (LOAD&PUSH 1)
42    (GETVALUE&PUSH 8)                   ; MAINVAR
44    (CALL2&PUSH 9)                      ; SPDERIVATIVE
46    (CALL2 10)                          ; RATQU
48    (SETVALUE 0)                        ; COEF
50    (PUSH)
51    (CALL1&JMPIF 11 L61)                ; RISCH-CONSTP
54    L54
54    (NIL)
55    (SKIP 2)
57    (UNBIND1)
58    L58
58    (UNBIND1)
59    (SKIP&RET 3)
61    L61
61    (CONST&PUSH 12)                     ; (MTIMES)
62    (CONST&PUSH 13)                     ; ((RAT) 1 2)
63    (CONST&PUSH 14)                     ; ((MEXPT) $%PI ((RAT) 1 2))
64    (GETVALUE&PUSH 0)                   ; COEF
66    (CALL1&PUSH 15)                     ; DISREP
68    (CONST&PUSH 16)                     ; (%ERF)
69    (LOAD&PUSH 5)
70    (CALL1&PUSH 15)                     ; DISREP
72    (LIST&PUSH 2)
74    (LIST&PUSH 5)
76    (CALL1 17)                          ; SIMPLIFY
78    (SKIP 2)
80    (UNBIND1)
81    (JMP L58)


Disassembly of function #:|(DEFUN ERFARG2 (EXPARG COEFF &AUX ...) ...)-48|
(CONST 0) = ERFARG2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERFARG2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERFARG2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERFARG2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERFARG2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERFARG2
8     (SKIP&RET 1)


Disassembly of function ERFARG2
(CONST 0) = MAINVAR
(CONST 1) = VAR
(CONST 2) = A
(CONST 3) = B
(CONST 4) = C
(CONST 5) = D
(CONST 6) = PDEGREE
(CONST 7) = 2
(CONST 8) = RISCH-PCONSTP
(CONST 9) = RISCH-CONSTP
(CONST 10) = -1
(CONST 11) = RATTI
(CONST 12) = RATQU
(CONST 13) = 1
(CONST 14) = POLCOEF
(CONST 15) = DISREP
(CONST 16) = 0
(CONST 17) = RATSQRT
(CONST 18) = (MTIMES)
(CONST 19) = (MTIMES)
(CONST 20) = (MEXPT)
(CONST 21) = $%E
(CONST 22) = (MPLUS)
(CONST 23) = (MQUOTIENT)
(CONST 24) = (MEXPT)
(CONST 25) = (2)
(CONST 26) = (MTIMES)
(CONST 27) = 4
(CONST 28) = ((RAT) 1 2)
(CONST 29) = (MEXPT)
(CONST 30) = (-1)
(CONST 31) = (((MEXPT) $%PI ((RAT) 1 2)))
(CONST 32) = (%ERF)
(CONST 33) = (MPLUS)
(CONST 34) = (MTIMES)
(CONST 35) = INTVAR
(CONST 36) = (MTIMES)
(CONST 37) = ((RAT) 1 2)
(CONST 38) = (MEXPT)
(CONST 39) = (-1)
(CONST 40) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (INTVAR D B C A VAR MAINVAR)
writes special variables : (D C B A)
110 byte-code instructions:
0     (GETVALUE 0)                        ; MAINVAR
2     (BIND 1)                            ; VAR
4     (NIL)
5     (BIND 2)                            ; A
7     (NIL)
8     (BIND 3)                            ; B
10    (NIL)
11    (BIND 4)                            ; C
13    (NIL)
14    (BIND 5)                            ; D
16    (LOAD&CAR&PUSH 17)
18    (GETVALUE&PUSH 1)                   ; VAR
20    (CALL2&PUSH 6)                      ; PDEGREE
22    (CONST&PUSH 7)                      ; 2
23    (CALLSR 1 45)                       ; =
26    (JMPIFNOT1 L190)
29    (LOAD 17)
31    (CAR)
32    (CAR&PUSH)
33    (GETVALUE 1)                        ; VAR
35    (EQ)
36    (JMPIFNOT1 L190)
39    (LOAD&CDR&PUSH 17)
41    (CALL1 8)                           ; RISCH-PCONSTP
43    (JMPIFNOT1 L190)
46    (LOAD&PUSH 16)
47    (CALL1 9)                           ; RISCH-CONSTP
49    (JMPIFNOT1 L190)
52    (CONST&PUSH 10)                     ; -1
53    (LOAD 18)
55    (CAR)
56    (CDR)
57    (CDR)
58    (CAR&PUSH)
59    (T&PUSH)
60    (CALL&PUSH 3 11)                    ; RATTI
63    (LOAD&CDR&PUSH 18)
65    (CALL2 12)                          ; RATQU
67    (SETVALUE 2)                        ; A
69    (CONST&PUSH 10)                     ; -1
70    (LOAD&CAR&PUSH 18)
72    (CONST&PUSH 13)                     ; 1
73    (CALL2&PUSH 14)                     ; POLCOEF
75    (T&PUSH)
76    (CALL&PUSH 3 11)                    ; RATTI
79    (LOAD&CDR&PUSH 18)
81    (CALL2&PUSH 12)                     ; RATQU
83    (CALL1 15)                          ; DISREP
85    (SETVALUE 3)                        ; B
87    (LOAD&CAR&PUSH 17)
89    (CONST&PUSH 16)                     ; 0
90    (CALL2&PUSH 14)                     ; POLCOEF
92    (LOAD&CDR&PUSH 18)
94    (CALL2&PUSH 12)                     ; RATQU
96    (CALL1 15)                          ; DISREP
98    (SETVALUE 4)                        ; C
100   (GETVALUE&PUSH 2)                   ; A
102   (CALL1 17)                          ; RATSQRT
104   (SETVALUE 5)                        ; D
106   (GETVALUE&PUSH 2)                   ; A
108   (CALL1 15)                          ; DISREP
110   (SETVALUE 2)                        ; A
112   (CONST&PUSH 18)                     ; (MTIMES)
113   (CONST&PUSH 19)                     ; (MTIMES)
114   (CONST&PUSH 20)                     ; (MEXPT)
115   (CONST&PUSH 21)                     ; $%E
116   (CONST&PUSH 22)                     ; (MPLUS)
117   (GETVALUE&PUSH 4)                   ; C
119   (CONST&PUSH 23)                     ; (MQUOTIENT)
120   (CONST&PUSH 24)                     ; (MEXPT)
121   (GETVALUE&PUSH 3)                   ; B
123   (CONST 25)                          ; (2)
125   (LIST*&PUSH 2)
127   (CONST&PUSH 26)                     ; (MTIMES)
128   (CONST&PUSH 27)                     ; 4
129   (GETVALUE&PUSH 2)                   ; A
131   (LIST&PUSH 3)
133   (LIST&PUSH 3)
135   (LIST&PUSH 3)
137   (LIST&PUSH 3)
139   (CONST&PUSH 28)                     ; ((RAT) 1 2)
140   (LOAD&PUSH 20)
141   (CALL1&PUSH 15)                     ; DISREP
143   (CONST&PUSH 29)                     ; (MEXPT)
144   (GETVALUE&PUSH 5)                   ; D
146   (CONST 30)                          ; (-1)
148   (LIST*&PUSH 2)
150   (CONST 31)                          ; (((MEXPT) $%PI ((RAT) 1 2)))
152   (LIST*&PUSH 5)
154   (CONST&PUSH 32)                     ; (%ERF)
156   (CONST&PUSH 33)                     ; (MPLUS)
158   (CONST&PUSH 34)                     ; (MTIMES)
160   (GETVALUE&PUSH 5)                   ; D
162   (GETVALUE&PUSH 35)                  ; INTVAR
164   (LIST&PUSH 3)
166   (CONST&PUSH 36)                     ; (MTIMES)
168   (GETVALUE&PUSH 3)                   ; B
170   (CONST&PUSH 37)                     ; ((RAT) 1 2)
172   (CONST&PUSH 38)                     ; (MEXPT)
174   (GETVALUE&PUSH 5)                   ; D
176   (CONST 39)                          ; (-1)
178   (LIST*&PUSH 2)
180   (LIST&PUSH 4)
182   (LIST&PUSH 3)
184   (LIST&PUSH 2)
186   (LIST&PUSH 3)
188   (CALL1 40)                          ; SIMPLIFY
190   L190
190   (UNBIND 5)
192   (SKIP&RET 3)


Disassembly of function #:|(DEFUN CXERFARG (ANS EXPG N ...) ...)-49|
(CONST 0) = CXERFARG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CXERFARG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CXERFARG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CXERFARG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CXERFARG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CXERFARG
8     (SKIP&RET 1)


Disassembly of function CXERFARG
(CONST 0) = ANS
(CONST 1) = N
(CONST 2) = RISCHARG
(CONST 3) = RATTI
(CONST 4) = ARG
(CONST 5) = 0
(CONST 6) = NUM
(CONST 7) = $ERFFLAG
(CONST 8) = ERFARG
(CONST 9) = LEADOP
(CONST 10) = MEXPT
(CONST 11) = RATPL
(CONST 12) = 1
(CONST 13) = EXPLIST
(CONST 14) = COEF
(CONST 15) = RATQU
(CONST 16) = ERFARG2
(CONST 17) = PPLUS
(CONST 18) = X
(CONST 19) = FIXNUMP
(CONST 20) = (1 1)
(CONST 21) = RATEXPT
(CONST 22) = RISCHNOUN
(CONST 23) = RISCHADD
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X COEF NUM ANS ARG $ERFFLAG N)
writes special variables : (COEF ARG NUM)
177 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; ANS
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 1)                   ; N
8     (LOAD&PUSH 10)
9     (CONST&PUSH 2)                      ; RISCHARG
10    (PUSH-UNBOUND 1)
12    (CALLS2&PUSH 132)                   ; GET
14    (T&PUSH)
15    (CALL 3 3)                          ; RATTI
18    (BIND 4)                            ; ARG
20    (CONST&PUSH 5)                      ; 0
21    (PUSH-NIL 2)
23    (NIL)
24    (BIND 6)                            ; NUM
26    (NIL&PUSH)
27    (LOAD 17)
29    (STORE 5)
30    (CAR)
31    (SETVALUE 6)                        ; NUM
33    (LOAD&CDR&STORE 5)
35    (GETVALUE 7)                        ; $ERFFLAG
37    (JMPIFNOT L60)
39    (GETVALUE&PUSH 4)                   ; ARG
41    (LOAD&PUSH 18)
42    (CALL2 8)                           ; ERFARG
44    (STORE 4)
45    (JMPIFNOT L109)
47    (GETVALUE&PUSH 0)                   ; ANS
49    (LOAD&PUSH 5)
50    (LIST 2)
52    (SKIP 1)
54    (UNBIND1)
55    (SKIP 2)
57    (JMP L260)
60    L60
60    (GETVALUE 6)                        ; NUM
62    (STORE 6)
63    (JMP L193)
66    L66
66    (LOAD&PUSH 5)
67    (GETVALUE&PUSH 14)                  ; COEF
69    (CALL2 8)                           ; ERFARG
71    (STORE 7)
72    (JMPIFNOT L179)
75    L75
75    (PUSH)
76    (LOAD&CONS&STORE 11)
78    (JMP L185)
81    L81
81    (GETVALUE&PUSH 4)                   ; ARG
83    (LOAD 6)
84    (CDR)
85    (CAR&PUSH)
86    (CALLSR&PUSH 0 54)                  ; -
89    (LOAD&CAR&PUSH 7)
91    (CONST&PUSH 2)                      ; RISCHARG
92    (PUSH-UNBOUND 1)
94    (CALLS2&PUSH 132)                   ; GET
96    (T&PUSH)
97    (CALL&PUSH 3 3)                     ; RATTI
100   (CALL2 11)                          ; RATPL
102   (SETVALUE 4)                        ; ARG
104   (LOAD 5)
105   (CDR)
106   (CDR)
107   (CAR)
108   (STORE 5)
109   L109
109   (LOAD 5)
110   (JMPIFATOM L128)
112   (LOAD 5)
113   (CDR)
114   (CDR)
115   (CDR)
116   (JMPIF L128)
118   (LOAD&CAR&PUSH 5)
120   (CONST&PUSH 9)                      ; LEADOP
121   (PUSH-UNBOUND 1)
123   (CALLS2&PUSH 132)                   ; GET
125   (JMPIFEQTO 10 L81)                  ; MEXPT
128   L128
128   (PUSH-NIL 3)
130   (GETVALUE&PUSH 6)                   ; NUM
132   (GETVALUE&PUSH 4)                   ; ARG
134   (CONST&PUSH 12)                     ; 1
135   (CALL&PUSH 3 13)                    ; EXPLIST
138   (LOAD 3)
139   (BIND 14)                           ; COEF
141   (LOAD&JMPIFNOT 3 L190)
144   L144
144   (LOAD&CAR&PUSH 3)
146   (LOAD 0)
147   (CAR)
148   (SETVALUE 14)                       ; COEF
150   (LOAD 0)
151   (CDR)
152   (CAR)
153   (STORE 6)
154   (LOAD 0)
155   (CDR)
156   (CDR)
157   (CAR)
158   (STORE 5)
159   (SKIP 1)
161   (GETVALUE&PUSH 14)                  ; COEF
163   (LOAD&PUSH 13)
164   (CALL2 15)                          ; RATQU
166   (SETVALUE 14)                       ; COEF
168   (LOAD&PUSH 5)
169   (GETVALUE&PUSH 14)                  ; COEF
171   (CALL2&JMPIFNOT 16 L66)             ; ERFARG2
175   (STORE 7)
176   (JMPIF L75)
179   L179
179   (LOAD&PUSH 13)
180   (LOAD&PUSH 5)
181   (CALL2 17)                          ; PPLUS
183   (STORE 13)
185   L185
185   (LOAD&CDR&STORE 3)
187   (LOAD&JMPIF 3 L144)
190   L190
190   (UNBIND1)
191   (SKIP 4)
193   L193
193   (LOAD 6)
194   (BIND 18)                           ; X
196   (GETVALUE&PUSH 18)                  ; X
198   (CALL1&JMPIF 19 L210)               ; FIXNUMP
201   (GETVALUE 18)                       ; X
203   (JMPIFCONSP L228)
205   (GETVALUE&PUSH 18)                  ; X
207   (CALLS2&JMPIFNOT 15 L219)           ; FLOATP
210   L210
210   (GETVALUE&PUSH 18)                  ; X
212   (CALLS2 145)                        ; ZEROP
214   (UNBIND1)
215   (JMPIFNOT L229)
217   (JMP L222)
219   L219
219   (UNBIND1)
220   (JMPIFNOT L229)
222   L222
222   (GETVALUE&PUSH 0)                   ; ANS
224   (LOAD 5)
225   (CONS)
226   (JMP L255)
228   L228
228   (UNBIND1)
229   L229
229   (GETVALUE&PUSH 0)                   ; ANS
231   (LOAD 5)
232   (CONS&PUSH)
233   (LOAD&PUSH 20)
234   (CONST 20)                          ; (1 1)
235   (CONS&PUSH)
236   (CONST 12)                          ; 1
237   (CONS&PUSH)
238   (GETVALUE&PUSH 1)                   ; N
240   (CALL2&PUSH 21)                     ; RATEXPT
242   (LOAD&PUSH 8)
243   (LOAD&CDR&PUSH 20)
245   (CALL2&PUSH 15)                     ; RATQU
247   (T&PUSH)
248   (CALL&PUSH 3 3)                     ; RATTI
251   (CALL1&PUSH 22)                     ; RISCHNOUN
253   (CALL2 23)                          ; RISCHADD
255   L255
255   (SKIP 1)
257   (UNBIND1)
258   (SKIP 2)
260   L260
260   (SKIP 1)
262   (UNBIND 3)
264   (SKIP&RET 5)


Disassembly of function #:|(DEFUN EXPLIST (P OARG EXPS) ...)-50|
(CONST 0) = EXPLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPLIST
8     (SKIP&RET 1)


Disassembly of function EXPLIST
(CONST 0) = P
(CONST 1) = LEADOP
(CONST 2) = MEXPT
(CONST 3) = PTIMES
(CONST 4) = RISCHARG
(CONST 5) = EXP
(CONST 6) = COEF
(CONST 7) = RATTI
(CONST 8) = RATPL
(CONST 9) = 1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP P)
writes special variables : (COEF EXP)
86 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L108)
8     (GETVALUE 0)                        ; P
10    (CAR&PUSH)
11    (CONST&PUSH 1)                      ; LEADOP
12    (PUSH-UNBOUND 1)
14    (CALLS2&PUSH 132)                   ; GET
16    (JMPIFNOTEQTO 2 L108)               ; MEXPT
20    (GETVALUE 0)                        ; P
22    (CAR&PUSH)
23    (CONST&PUSH 4)                      ; RISCHARG
24    (PUSH-UNBOUND 1)
26    (CALLS2&PUSH 132)                   ; GET
28    (PUSH-NIL 2)
30    (GETVALUE 0)                        ; P
32    (CDR&PUSH)
33    (LOAD 2)
34    (BIND 5)                            ; EXP
36    (LOAD 4)
37    (BIND 6)                            ; COEF
39    (PUSH-NIL 3)
41    (LOAD&JMPIFNOT 9 L98)
44    L44
44    (LOAD 9)
45    (CAR)
46    (SETVALUE 5)                        ; EXP
48    (LOAD 9)
49    (CDR)
50    (CAR)
51    (SETVALUE 6)                        ; COEF
53    (PUSH)
54    (LOAD&PUSH 19)
55    (GETVALUE&PUSH 5)                   ; EXP
57    (LOAD&PUSH 15)
58    (T&PUSH)
59    (CALL&PUSH 3 7)                     ; RATTI
62    (CALL2&PUSH 8)                      ; RATPL
64    (LOAD&PUSH 19)
65    (GETVALUE 0)                        ; P
67    (CAR&PUSH)
68    (GETVALUE&PUSH 5)                   ; EXP
70    (CONST&PUSH 9)                      ; 1
71    (LIST&PUSH 3)
73    (CALL2&PUSH 3)                      ; PTIMES
75    (JSR L0)
78    (STORE 0)
79    (LOAD&JMPIF 1 L122)
82    (LOAD 0)
83    (STORE 2)
84    L84
84    (PUSH)
85    (PUSH-UNBOUND 1)
87    (CALLS1&STORE 156 1)                ; LAST
90    L90
90    (LOAD 9)
91    (CDR)
92    (CDR)
93    (STORE 9)
95    (LOAD&JMPIF 9 L44)
98    L98
98    (LOAD 2)
99    (SKIP 3)
101   (UNBIND 2)
103   (SKIP 4)
105   L105
105   (UNBIND1)
106   (SKIP&RET 4)
108   L108
108   (GETVALUE&PUSH 0)                   ; P
110   (LOAD&PUSH 6)
111   (GETVALUE&PUSH 0)                   ; P
113   (LOAD&PUSH 7)
114   (CALL2&PUSH 3)                      ; PTIMES
116   (LIST&PUSH 3)
118   (LIST 1)
120   (JMP L105)
122   L122
122   (PUSH)
123   (LOAD&PUSH 1)
124   (CALLS1&JMPIFNOT 171 L90)           ; SYSTEM::%RPLACD
127   (LOAD 1)
128   (CDR)
129   (JMP L84)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *FNEWVARSW))-51|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN INTSETUP (EXP *VAR) ...)-52|
(CONST 0) = INTSETUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTSETUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTSETUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTSETUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTSETUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTSETUP
8     (SKIP&RET 1)


Disassembly of function INTSETUP
(CONST 0) = EXP
(CONST 1) = *VAR
(CONST 2) = VARLIST
(CONST 3) = $FACTORFLAG
(CONST 4) = GENPAIRS
(CONST 5) = Y
(CONST 6) = $RATFAC
(CONST 7) = $KEEPFLOAT
(CONST 8) = *FNEWVARSW
(CONST 9) = RADCAN1
(CONST 10) = FNEWVAR
(CONST 11) = FREEOF
(CONST 12) = MEXPTP
(CONST 13) = $%E
(CONST 14) = (MEXPT SIMP)
(CONST 15) = (%LOG)
(CONST 16) = MUL2*
(CONST 17) = MAXIMA-SUBSTITUTE
(CONST 18) = OPERATOR
(CONST 19) = $%I
(CONST 20) = MEMQ
(CONST 21) = ZL-DELETE
(CONST 22) = INTGREAT
(CONST 23) = ORDERPOINTER
(CONST 24) = INTSET1
(CONST 25) = ALIKE
(CONST 26) = RATREP*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*VAR VARLIST EXP Y)
writes special variables : (Y *FNEWVARSW VARLIST EXP OPERATOR)
166 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; *VAR
6     (NIL)
7     (BIND 2)                            ; VARLIST
9     (NIL&PUSH)
10    (NIL)
11    (BIND 3)                            ; $FACTORFLAG
13    (NIL&PUSH)
14    (NIL)
15    (BIND 4)                            ; GENPAIRS
17    (NIL&PUSH)
18    (NIL)
19    (BIND 5)                            ; Y
21    (NIL&PUSH)
22    (NIL)
23    (BIND 6)                            ; $RATFAC
25    (NIL)
26    (BIND 7)                            ; $KEEPFLOAT
28    (NIL)
29    (BIND 8)                            ; *FNEWVARSW
31    (JMP L99)
34    L34
34    (GETVALUE&PUSH 5)                   ; Y
36    (LOAD&CONS&STORE 21)
38    (LOAD&JMPIFNOT 9 L193)
42    (JMP L119)
45    L45
45    (T)
46    (SETVALUE 18)                       ; OPERATOR
48    (NIL)
49    (UNBIND 3)
51    (SKIP 1)
53    (UNBIND1)
54    (SKIP 1)
56    (UNBIND1)
57    (SKIP 1)
59    (UNBIND1)
60    (SKIP 1)
62    (UNBIND1)
63    (JMP L269)
66    L66
66    (CONST&PUSH 14)                     ; (MEXPT SIMP)
67    (CONST&PUSH 13)                     ; $%E
68    (GETVALUE 5)                        ; Y
70    (CDR)
71    (CDR)
72    (CAR&PUSH)
73    (CONST&PUSH 15)                     ; (%LOG)
74    (GETVALUE 5)                        ; Y
76    (CDR)
77    (CAR&PUSH)
78    (LIST&PUSH 2)
80    (CALL2&PUSH 16)                     ; MUL2*
82    (LIST 3)
84    (STORE 17)
86    (PUSH)
87    (GETVALUE&PUSH 5)                   ; Y
89    (GETVALUE&PUSH 0)                   ; EXP
91    (CALL 3 17)                         ; MAXIMA-SUBSTITUTE
94    (SETVALUE 0)                        ; EXP
96    (NIL)
97    (SETVALUE 2)                        ; VARLIST
99    L99
99    (GETVALUE&PUSH 0)                   ; EXP
101   (CALL1 9)                           ; RADCAN1
103   (SETVALUE 0)                        ; EXP
105   (PUSH)
106   (CALL1 10)                          ; FNEWVAR
108   (T)
109   (SETVALUE 8)                        ; *FNEWVARSW
111   L111
111   (NIL&STORE 21)
113   (STORE 17)
115   (GETVALUE 2)                        ; VARLIST
117   (STORE 9)
119   L119
119   (LOAD&CAR&PUSH 9)
121   (LOAD&CDR&STORE 10)
123   (POP)
124   (SETVALUE 5)                        ; Y
126   (GETVALUE&PUSH 1)                   ; *VAR
128   (GETVALUE&PUSH 5)                   ; Y
130   (CALL2&JMPIF 11 L34)                ; FREEOF
134   (GETVALUE&PUSH 5)                   ; Y
136   (GETVALUE 1)                        ; *VAR
138   (JMPIFEQ L189)
140   (GETVALUE&PUSH 5)                   ; Y
142   (CALL1&JMPIFNOT 12 L179)            ; MEXPTP
145   (GETVALUE 5)                        ; Y
147   (CDR)
148   (CAR&PUSH)
149   (JMPIFEQTO 13 L179)                 ; $%E
152   (GETVALUE&PUSH 1)                   ; *VAR
154   (GETVALUE 5)                        ; Y
156   (CDR)
157   (CDR)
158   (CAR&PUSH)
159   (CALL2&JMPIFNOT 11 L66)             ; FREEOF
163   (GETVALUE 5)                        ; Y
165   (CDR)
166   (CDR)
167   (CAR)
168   (JMPIFCONSP L179)
170   (GETVALUE 5)                        ; Y
172   (CDR)
173   (CDR)
174   (CAR&PUSH)
175   (CALLS2&JMPIFNOT 8 L45)             ; NUMBERP
179   L179
179   (GETVALUE&PUSH 5)                   ; Y
181   (LOAD&CONS&STORE 17)
183   (LOAD&JMPIFNOT 9 L193)
186   (JMP L119)
189   L189
189   (LOAD&JMPIF 9 L119)
193   L193
193   (CONST&PUSH 19)                     ; $%I
194   (LOAD&PUSH 22)
195   (CALL2&JMPIFNOT 20 L206)            ; MEMQ
198   (CONST&PUSH 19)                     ; $%I
199   (CONST&PUSH 19)                     ; $%I
200   (LOAD&PUSH 23)
201   (CALL2 21)                          ; ZL-DELETE
203   (CONS)
204   (STORE 21)
206   L206
206   (LOAD&PUSH 21)
207   (GETVALUE&PUSH 1)                   ; *VAR
209   (LOAD&PUSH 19)
210   (NIL&PUSH)
211   (CALLSR&PUSH 2 34)                  ; APPEND
214   (CONST&PUSH 22)                     ; INTGREAT
215   (PUSH-UNBOUND 3)
217   (CALLS2&PUSH 103)                   ; SORT
219   (CALLS2 73)                         ; NREVERSE
221   (CONS&PUSH)
222   (CALLSR 2 34)                       ; APPEND
225   (SETVALUE 2)                        ; VARLIST
227   (PUSH)
228   (CALL1 23)                          ; ORDERPOINTER
230   (GETVALUE 2)                        ; VARLIST
232   (STORE 13)
234   (CONST&SYMBOL-FUNCTION&PUSH 24)     ; INTSET1
236   (GETVALUE&PUSH 1)                   ; *VAR
238   (LOAD 19)
240   (CONS&PUSH)
241   (CALLSR 0 24)                       ; MAPC
244   (LOAD&PUSH 13)
245   (GETVALUE&PUSH 2)                   ; VARLIST
247   (CALL2&JMPIFNOT 25 L111)            ; ALIKE
251   (GETVALUE&PUSH 0)                   ; EXP
253   (CALL1 26)                          ; RATREP*
255   (UNBIND 3)
257   (SKIP 1)
259   (UNBIND1)
260   (SKIP 1)
262   (UNBIND1)
263   (SKIP 1)
265   (UNBIND1)
266   (SKIP 1)
268   (UNBIND1)
269   L269
269   (UNBIND 2)
271   (SKIP&RET 3)


Disassembly of function #:|(DEFUN LEADOP (EXP) ...)-53|
(CONST 0) = LEADOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEADOP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEADOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEADOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEADOP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEADOP
8     (SKIP&RET 1)


Disassembly of function LEADOP
(CONST 0) = EXP
(CONST 1) = MQAPPLYP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
20 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (JMPIFATOM L19)
7     (GETVALUE&PUSH 0)                   ; EXP
9     (CALL1&JMPIF 1 L23)                 ; MQAPPLYP
12    (GETVALUE 0)                        ; EXP
14    (CAR)
15    (CAR)
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)
19    L19
19    (GETVALUE 0)                        ; EXP
21    (JMP L16)
23    L23
23    (GETVALUE 0)                        ; EXP
25    (CDR)
26    (CAR)
27    (JMP L16)


Disassembly of function #:|(DEFUN LEADARG (EXP) ...)-54|
(CONST 0) = LEADARG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEADARG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEADARG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEADARG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEADARG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEADARG
8     (SKIP&RET 1)


Disassembly of function LEADARG
(CONST 0) = EXP
(CONST 1) = 0
(CONST 2) = MEXPTP
(CONST 3) = $%E
(CONST 4) = MQAPPLYP
(CONST 5) = SUBFUNARGS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (JMPIFATOM L31)
7     (GETVALUE&PUSH 0)                   ; EXP
9     (CALL1&JMPIFNOT 2 L19)              ; MEXPTP
12    (GETVALUE 0)                        ; EXP
14    (CDR)
15    (CAR&PUSH)
16    (JMPIFEQTO 3 L34)                   ; $%E
19    L19
19    (GETVALUE&PUSH 0)                   ; EXP
21    (CALL1&JMPIF 4 L39)                 ; MQAPPLYP
24    (GETVALUE 0)                        ; EXP
26    L26
26    (CDR)
27    (CAR)
28    L28
28    (UNBIND1)
29    (SKIP&RET 2)
31    L31
31    (CONST 1)                           ; 0
32    (JMP L28)
34    L34
34    (GETVALUE 0)                        ; EXP
36    (CDR)
37    (JMP L26)
39    L39
39    (GETVALUE&PUSH 0)                   ; EXP
41    (CALL1 5)                           ; SUBFUNARGS
43    (CAR)
44    (JMP L28)


Disassembly of function #:|(DEFUN INTSET1 (B) ...)-55|
(CONST 0) = INTSET1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTSET1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTSET1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTSET1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTSET1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTSET1
8     (SKIP&RET 1)


Disassembly of function INTSET1
(CONST 0) = B
(CONST 1) = E
(CONST 2) = C
(CONST 3) = D
(CONST 4) = MEXPTP
(CONST 5) = (MTIMES SIMP)
(CONST 6) = SIMPLIFY
(CONST 7) = *VAR
(CONST 8) = SDIFF
(CONST 9) = RADCAN1
(CONST 10) = FNEWVAR
(CONST 11) = RATREP*
(CONST 12) = LEADARG
(CONST 13) = #.#'CONS
(CONST 14) = VARLIST
(CONST 15) = GENVAR
(CONST 16) = ZL-ASSOC
(CONST 17) = LEADOP
(CONST 18) = PUTPROP
(CONST 19) = RISCHEXPR
(CONST 20) = RISCHDIFF
(CONST 21) = RISCHARG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C E GENVAR VARLIST D *VAR B)
writes special variables : (E C D)
68 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (NIL)
4     (BIND 1)                            ; E
6     (NIL)
7     (BIND 2)                            ; C
9     (NIL)
10    (BIND 3)                            ; D
12    (GETVALUE&PUSH 0)                   ; B
14    (CALL1&JMPIF 4 L101)                ; MEXPTP
18    (GETVALUE&PUSH 0)                   ; B
20    (CALL1&PUSH 6)                      ; SIMPLIFY
22    (GETVALUE&PUSH 7)                   ; *VAR
24    (CALL2&PUSH 8)                      ; SDIFF
26    (CALL1 9)                           ; RADCAN1
28    L28
28    (SETVALUE 3)                        ; D
30    (PUSH)
31    (CALL1 10)                          ; FNEWVAR
33    (GETVALUE&PUSH 3)                   ; D
35    (CALL1 11)                          ; RATREP*
37    (SETVALUE 3)                        ; D
39    (GETVALUE&PUSH 0)                   ; B
41    (CALL1&PUSH 12)                     ; LEADARG
43    (CALL1 11)                          ; RATREP*
45    (SETVALUE 2)                        ; C
47    (GETVALUE&PUSH 0)                   ; B
49    (CONST&PUSH 13)                     ; #.#'CONS
50    (GETVALUE&PUSH 14)                  ; VARLIST
52    (GETVALUE&PUSH 15)                  ; GENVAR
54    (CALLSR&PUSH 1 22)                  ; MAPCAR
57    (CALL2 16)                          ; ZL-ASSOC
59    (CDR)
60    (SETVALUE 1)                        ; E
62    (PUSH)
63    (GETVALUE&PUSH 0)                   ; B
65    (CALL1&PUSH 17)                     ; LEADOP
67    (CONST&PUSH 17)                     ; LEADOP
68    (CALL 3 18)                         ; PUTPROP
71    (GETVALUE&PUSH 1)                   ; E
73    (GETVALUE&PUSH 0)                   ; B
75    (CONST&PUSH 19)                     ; RISCHEXPR
76    (CALL 3 18)                         ; PUTPROP
79    (GETVALUE&PUSH 1)                   ; E
81    (GETVALUE 3)                        ; D
83    (CDR&PUSH)
84    (CONST&PUSH 20)                     ; RISCHDIFF
85    (CALL 3 18)                         ; PUTPROP
88    (GETVALUE&PUSH 1)                   ; E
90    (GETVALUE 2)                        ; C
92    (CDR&PUSH)
93    (CONST&PUSH 21)                     ; RISCHARG
94    (CALL 3 18)                         ; PUTPROP
97    (UNBIND 4)
99    (SKIP&RET 2)
101   L101
101   (CONST&PUSH 5)                      ; (MTIMES SIMP)
102   (GETVALUE&PUSH 0)                   ; B
104   (GETVALUE 0)                        ; B
106   (CDR)
107   (CDR)
108   (CAR&PUSH)
109   (CALL1&PUSH 6)                      ; SIMPLIFY
111   (GETVALUE&PUSH 7)                   ; *VAR
113   (CALL2&PUSH 8)                      ; SDIFF
115   (CALL1&PUSH 9)                      ; RADCAN1
117   (LIST 3)
119   (JMP L28)


Disassembly of function #:|(DEFUN INTGREAT (A B) ...)-56|
(CONST 0) = INTGREAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTGREAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTGREAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTGREAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTGREAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTGREAT
8     (SKIP&RET 1)


Disassembly of function INTGREAT
(CONST 0) = A
(CONST 1) = B
(CONST 2) = %ERF
(CONST 3) = FREEOF
(CONST 4) = $LI
(CONST 5) = FREE
(CONST 6) = FIXINTGREAT
(CONST 7) = RESIMPLIFY
(CONST 8) = GREAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
71 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (GETVALUE 0)                        ; A
8     (JMPIFATOM L78)
11    (GETVALUE 1)                        ; B
13    (JMPIFATOM L78)
15    (CONST&PUSH 2)                      ; %ERF
16    (GETVALUE&PUSH 0)                   ; A
18    (CALL2&JMPIF 3 L28)                 ; FREEOF
21    (CONST&PUSH 2)                      ; %ERF
22    (GETVALUE&PUSH 1)                   ; B
24    (CALL2&JMPIF 3 L96)                 ; FREEOF
28    L28
28    (CONST&PUSH 4)                      ; $LI
29    (GETVALUE&PUSH 0)                   ; A
31    (CALL2&JMPIF 3 L40)                 ; FREEOF
34    (CONST&PUSH 4)                      ; $LI
35    (GETVALUE&PUSH 1)                   ; B
37    (CALL2&JMPIF 3 L99)                 ; FREEOF
40    L40
40    (CONST&PUSH 4)                      ; $LI
41    (GETVALUE&PUSH 0)                   ; A
43    (CALL2&JMPIFNOT 3 L52)              ; FREEOF
46    (CONST&PUSH 4)                      ; $LI
47    (GETVALUE&PUSH 1)                   ; B
49    (CALL2&JMPIFNOT 3 L102)             ; FREEOF
52    L52
52    (CONST&PUSH 2)                      ; %ERF
53    (GETVALUE&PUSH 0)                   ; A
55    (CALL2&JMPIFNOT 3 L64)              ; FREEOF
58    (CONST&PUSH 2)                      ; %ERF
59    (GETVALUE&PUSH 1)                   ; B
61    (CALL2&JMPIFNOT 3 L105)             ; FREEOF
64    L64
64    (GETVALUE&PUSH 1)                   ; B
66    (GETVALUE&PUSH 0)                   ; A
68    (CALL2&JMPIFNOT 5 L108)             ; FREE
71    (GETVALUE&PUSH 0)                   ; A
73    (GETVALUE&PUSH 1)                   ; B
75    (CALL2&JMPIFNOT 5 L111)             ; FREE
78    L78
78    (GETVALUE&PUSH 0)                   ; A
80    (CALL1&PUSH 6)                      ; FIXINTGREAT
82    (CALL1&PUSH 7)                      ; RESIMPLIFY
84    (GETVALUE&PUSH 1)                   ; B
86    (CALL1&PUSH 6)                      ; FIXINTGREAT
88    (CALL1&PUSH 7)                      ; RESIMPLIFY
90    (CALL2 8)                           ; GREAT
92    L92
92    (UNBIND 2)
94    (SKIP&RET 3)
96    L96
96    (T)
97    (JMP L92)
99    L99
99    (T)
100   (JMP L92)
102   L102
102   (NIL)
103   (JMP L92)
105   L105
105   (NIL)
106   (JMP L92)
108   L108
108   (NIL)
109   (JMP L92)
111   L111
111   (T)
112   (JMP L92)


Disassembly of function #:|(DEFUN FIXINTGREAT (A) ...)-57|
(CONST 0) = FIXINTGREAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXINTGREAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXINTGREAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXINTGREAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXINTGREAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXINTGREAT
8     (SKIP&RET 1)


Disassembly of function FIXINTGREAT
(CONST 0) = A
(CONST 1) = /_101X
(CONST 2) = *VAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A *VAR)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; /_101X
4     (GETVALUE&PUSH 2)                   ; *VAR
6     (GETVALUE&PUSH 0)                   ; A
8     (PUSH-UNBOUND 3)
10    (CALLS1 172)                        ; SUBST
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL B BETA ...))-58|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/risch.fas
Wrote file /cygdrive/e/temp/maxima/src/risch.lis