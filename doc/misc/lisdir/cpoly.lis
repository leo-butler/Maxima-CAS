Listing of compilation of file /cygdrive/e/temp/maxima/src/cpoly.lisp
on 2002-12-17 13:35:34 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/cpoly.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE CPOLY)-2|
(CONST 0) = CPOLY
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPOLY
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (*EXPR DISPLA $LISTOFVARS ...) (SPECIAL LOGBAS INFIN ...) ...)-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (NOTYPE # # ...) (FLONUM # # ...) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *PR-SL* *PI-SL* ...))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE LOAD) (DEFMACRO *F # ...) ...)-6-1|
(CONST 0) = *F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *F>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; *F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *F>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function *F
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = A
(CONST 3) = B
(CONST 4) = *$
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (B A)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L30)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; A
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR)
17    (BIND 3)                            ; B
19    (CONST&PUSH 4)                      ; *$
20    (GETVALUE&PUSH 2)                   ; A
22    (GETVALUE&PUSH 3)                   ; B
24    (LIST 3)
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (LOAD&PUSH 2)
31    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
33    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (COMPILE LOAD) (DEFMACRO *F # ...) ...)-6-2|
(CONST 0) = //F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE //F>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; //F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; //F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE //F>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function //F
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = A
(CONST 3) = B
(CONST 4) = //$
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (B A)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L30)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; A
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR)
17    (BIND 3)                            ; B
19    (CONST&PUSH 4)                      ; //$
20    (GETVALUE&PUSH 2)                   ; A
22    (GETVALUE&PUSH 3)                   ; B
24    (LIST 3)
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (LOAD&PUSH 2)
31    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
33    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (COMPILE LOAD) (DEFMACRO *F # ...) ...)-6-3|
(CONST 0) = +F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE +F>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; +F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; +F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE +F>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function +F
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = A
(CONST 3) = B
(CONST 4) = +$
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (B A)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L30)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; A
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR)
17    (BIND 3)                            ; B
19    (CONST&PUSH 4)                      ; +$
20    (GETVALUE&PUSH 2)                   ; A
22    (GETVALUE&PUSH 3)                   ; B
24    (LIST 3)
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (LOAD&PUSH 2)
31    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
33    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (COMPILE LOAD) (DEFMACRO *F # ...) ...)-6-4|
(CONST 0) = -F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE -F>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; -F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; -F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE -F>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; -F
10    (SKIP&RET 1)


Disassembly of function -F
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = A
(CONST 3) = B
(CONST 4) = -$
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (B A)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L30)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; A
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR)
17    (BIND 3)                            ; B
19    (CONST&PUSH 4)                      ; -$
20    (GETVALUE&PUSH 2)                   ; A
22    (GETVALUE&PUSH 3)                   ; B
24    (LIST 3)
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (LOAD&PUSH 2)
31    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
33    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO CPOLY-LARGE-FLONUM NIL ...)-7|
(CONST 0) = CPOLY-LARGE-FLONUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPOLY-LARGE-FLONUM>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPOLY-LARGE-FLONUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPOLY-LARGE-FLONUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPOLY-LARGE-FLONUM>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; CPOLY-LARGE-FLONUM
10    (SKIP&RET 1)


Disassembly of function CPOLY-LARGE-FLONUM
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = MOST-POSITIVE-LONG-FLOAT
(CONST 3) = 1.0
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (MOST-POSITIVE-LONG-FLOAT)
12 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L15)             ; >
8     (GETVALUE&PUSH 2)                   ; MOST-POSITIVE-LONG-FLOAT
10    (CONST&PUSH 3)                      ; 1.0
11    (CALLS2 174)                        ; COMMON-LISP:FLOAT
13    (SKIP&RET 3)
15    L15
15    (LOAD&PUSH 2)
16    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
18    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO CPOLY-SMALL-FLONUM NIL ...)-8|
(CONST 0) = CPOLY-SMALL-FLONUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPOLY-SMALL-FLONUM>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPOLY-SMALL-FLONUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPOLY-SMALL-FLONUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPOLY-SMALL-FLONUM>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; CPOLY-SMALL-FLONUM
10    (SKIP&RET 1)


Disassembly of function CPOLY-SMALL-FLONUM
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = LEAST-POSITIVE-LONG-FLOAT
(CONST 3) = 1.0
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (LEAST-POSITIVE-LONG-FLOAT)
12 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L15)             ; >
8     (GETVALUE&PUSH 2)                   ; LEAST-POSITIVE-LONG-FLOAT
10    (CONST&PUSH 3)                      ; 1.0
11    (CALLS2 174)                        ; COMMON-LISP:FLOAT
13    (SKIP&RET 3)
15    L15
15    (LOAD&PUSH 2)
16    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
18    (SKIP&RET 3)

WARNING in (EVAL-WHEN (COMPILE LOAD EVAL) (SETQ SYSTEM::*INHIBIT-FLOATING-POINT-UNDERFLOW* T))-9 in lines 131..133 :
SETQ: assignment to the internal special symbol SYSTEM::*INHIBIT-FLOATING-POINT-UNDERFLOW*

Disassembly of function #:|(EVAL-WHEN (COMPILE LOAD EVAL) (SETQ SYSTEM::*INHIBIT-FLOATING-POINT-UNDERFLOW* T))-9|
(CONST 0) = SYSTEM::*INHIBIT-FLOATING-POINT-UNDERFLOW*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (SYSTEM::*INHIBIT-FLOATING-POINT-UNDERFLOW*)
3 byte-code instructions:
0     (T)
1     (SETVALUE 0)                        ; SYSTEM::*INHIBIT-FLOATING-POINT-UNDERFLOW*
3     (SKIP&RET 1)


Disassembly of function #:NIL-10
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN MAXIMA-FLOAT-PRECISION (PRES) ...)-11|
(CONST 0) = MAXIMA-FLOAT-PRECISION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMA-FLOAT-PRECISION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-FLOAT-PRECISION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-FLOAT-PRECISION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMA-FLOAT-PRECISION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMA-FLOAT-PRECISION
8     (SKIP&RET 1)


Disassembly of function MAXIMA-FLOAT-PRECISION
(CONST 0) = #.DOUBLE-FLOAT-EPSILON
(CONST 1) = #.SHORT-FLOAT-EPSILON
(CONST 2) = "unknown type ~a"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 39)                    ; TYPE-OF
3     (CONST&PUSH 0)                      ; #.DOUBLE-FLOAT-EPSILON
4     (CALLS2 39)                         ; TYPE-OF
6     (JMPIFEQ L21)
8     (LOAD&PUSH 1)
9     (CALLS2&PUSH 39)                    ; TYPE-OF
11    (CONST&PUSH 1)                      ; #.SHORT-FLOAT-EPSILON
12    (CALLS2 39)                         ; TYPE-OF
14    (JMPIFEQ L24)
16    (CONST&PUSH 2)                      ; "unknown type ~a"
17    (LOAD&PUSH 2)
18    (CALLSR 1 29)                       ; ERROR
21    L21
21    (CONST 0)                           ; #.DOUBLE-FLOAT-EPSILON
22    (SKIP&RET 2)
24    L24
24    (CONST 1)                           ; #.SHORT-FLOAT-EPSILON
25    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DFLOAT (X) ...)-12|
(CONST 0) = DFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DFLOAT
8     (SKIP&RET 1)


Disassembly of function DFLOAT
(CONST 0) = X
(CONST 1) = DOUBLE-FLOAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; DOUBLE-FLOAT
6     (CALLS2 42)                         ; COERCE
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN _F (NUMBER SCALE) ...)-13|
(CONST 0) = _F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE _F>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; _F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; _F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE _F>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; _F
8     (SKIP&RET 1)


Disassembly of function _F
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALLS2 190)                        ; SCALE-FLOAT
4     (SKIP&RET 3)


Disassembly of function #:|(SETQ ACP-SL 0.2)-14|
(CONST 0) = 0.2
(CONST 1) = ACP-SL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (ACP-SL)
3 byte-code instructions:
0     (CONST 0)                           ; 0.2
1     (SETVALUE 1)                        ; ACP-SL
3     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $ALLROOTS (EXPR) ...)-15|
(CONST 0) = $ALLROOTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ALLROOTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ALLROOTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ALLROOTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ALLROOTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ALLROOTS
8     (SKIP&RET 1)


Disassembly of function $ALLROOTS
(CONST 0) = DEGREE
(CONST 1) = NN
(CONST 2) = VAR
(CONST 3) = RES
(CONST 4) = $PARTSWITCH
(CONST 5) = $KEEPFLOAT
(CONST 6) = $DEMOIVRE
(CONST 7) = $LISTCONSTVARS
(CONST 8) = $ALGEBRAIC
(CONST 9) = $RATFAC
(CONST 10) = MEQHK
(CONST 11) = $%I
(CONST 12) = $LISTOFVARS
(CONST 13) = DELQ
(CONST 14) = 1
(CONST 15) = "ALLROOTS: polynomial not univariate: ~M"
(CONST 16) = MERROR
(CONST 17) = $RAT
(CONST 18) = 0
(CONST 19) = CPOLY-ERR
(CONST 20) = $POLYFACTOR
(CONST 21) = 0.0
(CONST 22) = CR
(CONST 23) = CI
(CONST 24) = 1.0
(CONST 25) = CDIVID-SL
(CONST 26) = (MPLUS)
(CONST 27) = (MTIMES)
(CONST 28) = SIMPLIFY
(CONST 29) = (MLIST SIMP)
(CONST 30) = FLONUM
(CONST 31) = *ARRAY
(CONST 32) = *PR-SL*
(CONST 33) = *PI-SL*
(CONST 34) = NOTPOLY
(CONST 35) = #(NIL)
(CONST 36) = (#(ERROR 580) 3 . 2)
(CONST 37) = L
(CONST 38) = E
(CONST 39) = ERRSET
(CONST 40) = *REARRAY
(CONST 41) = *SHR-SL*
(CONST 42) = *SHI-SL*
(CONST 43) = *QPR-SL*
(CONST 44) = *HR-SL*
(CONST 45) = *QHR-SL*
(CONST 46) = *QPI-SL*
(CONST 47) = *HI-SL*
(CONST 48) = *QHI-SL*
(CONST 49) = #(NIL)
(CONST 50) = (#(ERROR 580) 1 . 1)
(CONST 51) = CPOLY-SL
(CONST 52) = #(NIL)
(CONST 53) = (#(ERROR 580) 1 . 1)
(CONST 54) = RPOLY-SL
(CONST 55) = "~%Unexpected error. Treat results with caution."
(CONST 56) = MTELL
(CONST 57) = "~%No roots found"
(CONST 58) = "~%Only ~S out of ~S roots found "
(CONST 59) = (MPLUS)
(CONST 60) = (MTIMES)
(CONST 61) = (MPLUS)
(CONST 62) = (MTIMES)
(CONST 63) = (MEXPT)
(CONST 64) = (MPLUS)
(CONST 65) = (MTIMES)
(CONST 66) = (MPLUS)
(CONST 67) = (MTIMES)
(CONST 68) = (MPLUS)
(CONST 69) = (MMINUS)
(CONST 70) = (MPLUS)
(CONST 71) = (MEXPT)
(CONST 72) = 2
(CONST 73) = (MTIMES)
(CONST 74) = (MEQUAL)
(CONST 75) = $PROGRAMMODE
(CONST 76) = DISPLINE
(CONST 77) = (MTIMES)
(CONST 78) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PROGRAMMODE E ERRSET *PI-SL* DEGREE NN L *PR-SL* $POLYFACTOR CR CI RES VAR)
writes special variables : 
(*QHI-SL* *HI-SL* *QPI-SL* *QHR-SL* *HR-SL* *QPR-SL* *SHI-SL* *SHR-SL* L
 *PI-SL* *PR-SL* DEGREE NN RES VAR $ALGEBRAIC $LISTCONSTVARS $KEEPFLOAT)
686 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; DEGREE
3     (NIL)
4     (BIND 1)                            ; NN
6     (NIL)
7     (BIND 2)                            ; VAR
9     (NIL)
10    (BIND 3)                            ; RES
12    (NIL)
13    (BIND 4)                            ; $PARTSWITCH
15    (NIL)
16    (BIND 5)                            ; $KEEPFLOAT
18    (NIL)
19    (BIND 6)                            ; $DEMOIVRE
21    (NIL)
22    (BIND 7)                            ; $LISTCONSTVARS
24    (NIL)
25    (BIND 8)                            ; $ALGEBRAIC
27    (NIL&PUSH)
28    (NIL)
29    (BIND 9)                            ; $RATFAC
31    (PUSH-NIL 2)
33    (T)
34    (SETVALUE 5)                        ; $KEEPFLOAT
36    (SETVALUE 7)                        ; $LISTCONSTVARS
38    (SETVALUE 8)                        ; $ALGEBRAIC
40    (LOAD&PUSH 34)
42    (CALL1 10)                          ; MEQHK
44    (STORE 34)
46    (STORE 0)
47    (CONST&PUSH 11)                     ; $%I
48    (LOAD&PUSH 35)
50    (CALL1 12)                          ; $LISTOFVARS
52    (CDR&PUSH)
53    (CALL2 13)                          ; DELQ
55    (SETVALUE 2)                        ; VAR
57    (JMPIF L67)
59    (PUSH-UNBOUND 1)
61    (CALLS2&PUSH 143)                   ; GENSYM
63    (LIST 1)
65    (SETVALUE 2)                        ; VAR
67    L67
67    (GETVALUE&PUSH 2)                   ; VAR
69    (CALLS2&PUSH 71)                    ; LENGTH
71    (CONST&PUSH 14)                     ; 1
72    (CALLSR&JMPIFNOT 1 45 L116)         ; =
76    (GETVALUE 2)                        ; VAR
78    (CAR)
79    (SETVALUE 2)                        ; VAR
81    L81
81    (LOAD&PUSH 34)
83    (CONST&PUSH 11)                     ; $%I
84    (GETVALUE&PUSH 2)                   ; VAR
86    (CALL 3 17)                         ; $RAT
89    (STORE 34)
91    (CAR)
92    (CDR)
93    (CDR)
94    (CDR)
95    (CAR&PUSH)
96    (CALLS2 72)                         ; REVERSE
98    (SETVALUE 3)                        ; RES
100   (PUSH)
101   (CALLS2&PUSH 71)                    ; LENGTH
103   (LOAD 35)
105   (CAR)
106   (CDR)
107   (CDR)
108   (CAR&PUSH)
109   (CALLS2&PUSH 71)                    ; LENGTH
111   (CALLSR&PUSH 1 54)                  ; -
114   (JMP L138)
116   L116
116   (CONST&PUSH 15)                     ; "ALLROOTS: polynomial not univariate: ~M"
117   (GETVALUE&PUSH 2)                   ; VAR
119   (CALL2 16)                          ; MERROR
121   (JMP L81)
123   L123
123   (LOAD&PUSH 1)
124   (CONST 18)                          ; 0
125   (JMP L196)
128   L128
128   (CONST 18)                          ; 0
129   (JMP L193)
131   L131
131   (GETVALUE 3)                        ; RES
133   (CDR)
134   (SETVALUE 3)                        ; RES
136   (LOAD&DEC&STORE 0)
138   L138
138   (LOAD&PUSH 0)
139   (CONST&PUSH 18)                     ; 0
140   (CALLSR&JMPIFNOT 1 45 L131)         ; =
144   (SKIP 1)
146   (LOAD 34)
148   (CDR)
149   (CDR)
150   (STORE 1)
151   (LOAD 34)
153   (CDR)
154   (CAR)
155   (STORE 34)
157   (LOAD&PUSH 1)
158   (CALLS2&JMPIF 8 L123)               ; NUMBERP
161   (LOAD&CAR&PUSH 1)
163   (GETVALUE 3)                        ; RES
165   (CDR)
166   (CAR)
167   (JMPIFNOTEQ L217)
169   (LOAD 1)
170   (CDR)
171   (CDR)
172   (STORE 1)
173   (CAR&PUSH)
174   (CALLS2&JMPIFNOT 8 L217)            ; NUMBERP
177   (LOAD 1)
178   (CDR)
179   (CDR)
180   (JMPIFNOT L128)
182   (LOAD 1)
183   (CDR)
184   (CDR)
185   (CAR&PUSH)
186   (CALLS2&JMPIFNOT 8 L217)            ; NUMBERP
189   (LOAD 1)
190   (CDR)
191   (CDR)
192   (CAR)
193   L193
193   (PUSH)
194   (LOAD 2)
195   (CAR)
196   L196
196   (PUSH)
197   (LIST 2)
199   (STORE 1)
200   (JMP L220)
202   L202
202   (LOAD&PUSH 34)
204   (CONST 18)                          ; 0
205   (JMP L279)
208   L208
208   (CONST 14)                          ; 1
209   (SETVALUE 1)                        ; NN
211   (JMP L378)
214   L214
214   (CONST 18)                          ; 0
215   (JMP L275)
217   L217
217   (LOAD&PUSH 0)
218   (CALL1 19)                          ; CPOLY-ERR
220   L220
220   (CONST 18)                          ; 0
221   (SETVALUE 1)                        ; NN
223   (LOAD&PUSH 34)
225   (CALLS2&JMPIF 8 L202)               ; NUMBERP
228   (LOAD&CAR&PUSH 34)
230   (GETVALUE 3)                        ; RES
232   (CAR)
233   (JMPIFEQ L208)
235   (LOAD&CAR&PUSH 34)
237   (GETVALUE 3)                        ; RES
239   (CDR)
240   (CAR)
241   (JMPIFNOTEQ L375)
244   (LOAD 34)
246   (CDR)
247   (CDR)
248   (STORE 34)
250   (CAR&PUSH)
251   (CALLS2&JMPIFNOT 8 L375)            ; NUMBERP
255   (LOAD 34)
257   (CDR)
258   (CDR)
259   (JMPIFNOT L214)
261   (LOAD 34)
263   (CDR)
264   (CDR)
265   (CAR&PUSH)
266   (CALLS2&JMPIFNOT 8 L375)            ; NUMBERP
270   (LOAD 34)
272   (CDR)
273   (CDR)
274   (CAR)
275   L275
275   (PUSH)
276   (LOAD 35)
278   (CAR)
279   L279
279   (PUSH)
280   (LIST 2)
282   (STORE 34)
284   (JMP L378)
287   L287
287   (CONST 21)                          ; 0.0
289   (BIND 22)                           ; CR
291   (CONST 21)                          ; 0.0
293   (BIND 23)                           ; CI
295   (LOAD&CAR&PUSH 40)
297   (CONST&PUSH 24)                     ; 1.0
298   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
300   (LOAD 41)
302   (CDR)
303   (CAR&PUSH)
304   (CONST&PUSH 24)                     ; 1.0
305   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
307   (LOAD&CAR&PUSH 9)
309   (CONST&PUSH 24)                     ; 1.0
310   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
312   (LOAD 10)
313   (CDR)
314   (CAR&PUSH)
315   (CONST&PUSH 24)                     ; 1.0
316   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
318   (CALL 4 25)                         ; CDIVID-SL
321   (CONST&PUSH 26)                     ; (MPLUS)
322   (CONST&PUSH 27)                     ; (MTIMES)
323   (CONST&PUSH 11)                     ; $%I
324   (GETVALUE&PUSH 23)                  ; CI
326   (LIST&PUSH 3)
328   (CALL1&PUSH 28)                     ; SIMPLIFY
330   (GETVALUE&PUSH 22)                  ; CR
332   (LIST&PUSH 3)
334   (CALL1 28)                          ; SIMPLIFY
336   (UNBIND 2)
338   (JMP L1146)
341   L341
341   (GETVALUE 20)                       ; $POLYFACTOR
343   (JMPIF L287)
345   (CONST&PUSH 29)                     ; (MLIST SIMP)
346   (LIST 1)
348   (JMP L1146)
351   L351
351   (GETVALUE&PUSH 32)                  ; *PR-SL*
353   (GETVALUE&PUSH 37)                  ; L
355   (GETVALUE&PUSH 3)                   ; RES
357   (CONST&PUSH 24)                     ; 1.0
358   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
360   (LOAD&PUSH 2)
361   (LOAD&PUSH 2)
362   (LOAD&PUSH 2)
363   (CALLSR 1 2)                        ; SYSTEM::STORE
366   (SKIP 3)
368   (JMP L520)
371   L371
371   (CONST&PUSH 34)                     ; NOTPOLY
373   (NIL)
374   (THROW)
375   L375
375   (LOAD&PUSH 0)
376   (CALL1 19)                          ; CPOLY-ERR
378   L378
378   (GETVALUE&PUSH 1)                   ; NN
380   (CONST&PUSH 18)                     ; 0
381   (CALLSR&JMPIF 1 45 L341)            ; =
385   (LOAD 34)
387   (CDR)
388   (CAR)
389   (SETVALUE 0)                        ; DEGREE
391   (PUSH)
392   (CALLS2 150)                        ; 1+
394   (SETVALUE 1)                        ; NN
396   (NIL&PUSH)
397   (CONST&PUSH 30)                     ; FLONUM
399   (GETVALUE&PUSH 1)                   ; NN
401   (CALL 3 31)                         ; *ARRAY
404   (SETVALUE 32)                       ; *PR-SL*
406   (NIL&PUSH)
407   (CONST&PUSH 30)                     ; FLONUM
409   (GETVALUE&PUSH 1)                   ; NN
411   (CALL 3 31)                         ; *ARRAY
414   (SETVALUE 33)                       ; *PI-SL*
416   (CONST 34)                          ; NOTPOLY
418   (CATCH-OPEN L591)
421   (NIL&PUSH)
422   (TAGBODY-OPEN 35 L538)              ; #(NIL)
426   (HANDLER-OPEN 36 L580)              ; (#(ERROR 580) 3 . 2)
428   (LOAD&CDR&PUSH 46)
430   (NIL&PUSH)
431   (GETVALUE 3)                        ; RES
433   (CDR)
434   (CAR&PUSH)
435   (LOAD 1)
436   (BIND 37)                           ; L
438   (LOAD&JMPIFNOT 5 L528)
442   L442
442   (GETVALUE&PUSH 0)                   ; DEGREE
444   (LOAD&CAR&PUSH 6)
446   (CALLSR 1 54)                       ; -
449   (SETVALUE 37)                       ; L
451   (LOAD 5)
452   (CDR)
453   (CAR)
454   (SETVALUE 3)                        ; RES
456   (PUSH)
457   (CALLS2&JMPIF 8 L351)               ; NUMBERP
461   (GETVALUE 3)                        ; RES
463   (CAR&PUSH)
464   (LOAD 4)
465   (JMPIFNOTEQ L371)
468   (GETVALUE 3)                        ; RES
470   (CDR)
471   (CDR)
472   (SETVALUE 3)                        ; RES
474   (GETVALUE&PUSH 33)                  ; *PI-SL*
476   (GETVALUE&PUSH 37)                  ; L
478   (GETVALUE 3)                        ; RES
480   (CAR&PUSH)
481   (CONST&PUSH 24)                     ; 1.0
482   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
484   (LOAD&PUSH 2)
485   (LOAD&PUSH 2)
486   (LOAD&PUSH 2)
487   (CALLSR 1 2)                        ; SYSTEM::STORE
490   (SKIP 3)
492   (GETVALUE 3)                        ; RES
494   (CDR)
495   (CDR)
496   (CAR)
497   (SETVALUE 3)                        ; RES
499   (JMPIFNOT L518)
501   (GETVALUE&PUSH 32)                  ; *PR-SL*
503   (GETVALUE&PUSH 37)                  ; L
505   (GETVALUE&PUSH 3)                   ; RES
507   (CONST&PUSH 24)                     ; 1.0
508   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
510   (LOAD&PUSH 2)
511   (LOAD&PUSH 2)
512   (LOAD&PUSH 2)
513   (CALLSR 1 2)                        ; SYSTEM::STORE
516   (SKIP 3)
518   L518
518   (T&STORE 23)
520   L520
520   (LOAD 5)
521   (CDR)
522   (CDR)
523   (STORE 5)
524   (LOAD&JMPIF 5 L442)
528   L528
528   (UNBIND1)
529   (SKIP 7)
531   (TAGBODY-CLOSE)
532   (SKIP 1)
534   (CATCH-CLOSE)
535   (JMP L604)
538   L538
538   (LOAD 4)
539   (BIND 38)                           ; E
541   (GETVALUE 39)                       ; ERRSET
543   (JMPIF L721)
546   (UNBIND1)
547   (TAGBODY-CLOSE)
548   (SKIP 1)
550   (CATCH-CLOSE)
551   (JMPIFNOT L593)
553   (JMP L604)
555   L555
555   (NIL&PUSH)
556   (TAGBODY-OPEN 49 L568)              ; #(NIL)
559   (HANDLER-OPEN 50 L580)              ; (#(ERROR 580) 1 . 1)
561   (GETVALUE&PUSH 0)                   ; DEGREE
563   (CALL1 51)                          ; CPOLY-SL
565   (JMP L705)
568   L568
568   (LOAD 4)
569   (BIND 38)                           ; E
571   (GETVALUE 39)                       ; ERRSET
573   (JMPIF L721)
576   (UNBIND1)
577   (JMP L839)
580   L580
580   (HANDLER-BEGIN&PUSH)
581   (LOAD 0)
582   (STOREI 0 0 4)
586   (GO-I 0 0 2 0)
591   L591
591   (JMPIF L604)
593   L593
593   (CONST&PUSH 32)                     ; *PR-SL*
595   (CALL1 40)                          ; *REARRAY
597   (CONST&PUSH 33)                     ; *PI-SL*
599   (CALL1 40)                          ; *REARRAY
601   (LOAD&PUSH 0)
602   (CALL1 19)                          ; CPOLY-ERR
604   L604
604   (NIL&PUSH)
605   (CONST&PUSH 30)                     ; FLONUM
607   (GETVALUE&PUSH 1)                   ; NN
609   (CALL 3 31)                         ; *ARRAY
612   (SETVALUE 41)                       ; *SHR-SL*
614   (NIL&PUSH)
615   (CONST&PUSH 30)                     ; FLONUM
617   (GETVALUE&PUSH 1)                   ; NN
619   (CALL 3 31)                         ; *ARRAY
622   (SETVALUE 42)                       ; *SHI-SL*
624   (NIL&PUSH)
625   (CONST&PUSH 30)                     ; FLONUM
627   (GETVALUE&PUSH 1)                   ; NN
629   (CALL 3 31)                         ; *ARRAY
632   (SETVALUE 43)                       ; *QPR-SL*
634   (NIL&PUSH)
635   (CONST&PUSH 30)                     ; FLONUM
637   (GETVALUE&PUSH 0)                   ; DEGREE
639   (CALL 3 31)                         ; *ARRAY
642   (SETVALUE 44)                       ; *HR-SL*
644   (NIL&PUSH)
645   (CONST&PUSH 30)                     ; FLONUM
647   (GETVALUE&PUSH 0)                   ; DEGREE
649   (CALL 3 31)                         ; *ARRAY
652   (SETVALUE 45)                       ; *QHR-SL*
654   (LOAD&JMPIFNOT 5 L687)
657   (NIL&PUSH)
658   (CONST&PUSH 30)                     ; FLONUM
660   (GETVALUE&PUSH 1)                   ; NN
662   (CALL 3 31)                         ; *ARRAY
665   (SETVALUE 46)                       ; *QPI-SL*
667   (NIL&PUSH)
668   (CONST&PUSH 30)                     ; FLONUM
670   (GETVALUE&PUSH 0)                   ; DEGREE
672   (CALL 3 31)                         ; *ARRAY
675   (SETVALUE 47)                       ; *HI-SL*
677   (NIL&PUSH)
678   (CONST&PUSH 30)                     ; FLONUM
680   (GETVALUE&PUSH 0)                   ; DEGREE
682   (CALL 3 31)                         ; *ARRAY
685   (SETVALUE 48)                       ; *QHI-SL*
687   L687
687   (GETVALUE 0)                        ; DEGREE
689   (SETVALUE 1)                        ; NN
691   (LOAD&JMPIF 5 L555)
695   (NIL&PUSH)
696   (TAGBODY-OPEN 52 L713)              ; #(NIL)
699   (HANDLER-OPEN 53 L580)              ; (#(ERROR 580) 1 . 1)
701   (GETVALUE&PUSH 0)                   ; DEGREE
703   (CALL1 54)                          ; RPOLY-SL
705   L705
705   (PUSH)
706   (LIST 1)
708   (SKIP 4)
710   (JMP L839)
713   L713
713   (LOAD 4)
714   (BIND 38)                           ; E
716   (GETVALUE 39)                       ; ERRSET
718   (JMPIFNOT L838)
721   L721
721   (GETVALUE&PUSH 38)                  ; E
723   (CALLSR 0 29)                       ; ERROR
726   L726
726   (CONST&PUSH 46)                     ; *QPI-SL*
728   (CALL1 40)                          ; *REARRAY
730   (CONST&PUSH 47)                     ; *HI-SL*
732   (CALL1 40)                          ; *REARRAY
734   (CONST&PUSH 48)                     ; *QHI-SL*
736   (CALL1 40)                          ; *REARRAY
738   (GETVALUE 3)                        ; RES
740   (JMPIFNOT L872)
743   (JMP L876)
746   L746
746   (CONST&PUSH 58)                     ; "~%Only ~S out of ~S roots found "
748   (GETVALUE&PUSH 0)                   ; DEGREE
750   (GETVALUE&PUSH 1)                   ; NN
752   (CALLSR&PUSH 1 54)                  ; -
755   (GETVALUE&PUSH 0)                   ; DEGREE
757   (CALL 3 56)                         ; MTELL
760   (CONST 21)                          ; 0.0
762   (STORE 34)
764   (CONST&PUSH 18)                     ; 0
765   (JMP L824)
767   L767
767   (CONST&PUSH 59)                     ; (MPLUS)
769   (LOAD&PUSH 36)
771   (CONST&PUSH 60)                     ; (MTIMES)
773   (CONST&PUSH 61)                     ; (MPLUS)
775   (CONST&PUSH 62)                     ; (MTIMES)
777   (CONST&PUSH 11)                     ; $%I
778   (GETVALUE&PUSH 33)                  ; *PI-SL*
780   (LOAD&PUSH 7)
781   (CALLSR&PUSH 1 1)                   ; AREF
784   (LIST&PUSH 3)
786   (CALL1&PUSH 28)                     ; SIMPLIFY
788   (GETVALUE&PUSH 32)                  ; *PR-SL*
790   (LOAD&PUSH 6)
791   (CALLSR&PUSH 1 1)                   ; AREF
794   (LIST&PUSH 3)
796   (CALL1&PUSH 28)                     ; SIMPLIFY
798   (CONST&PUSH 63)                     ; (MEXPT)
800   (GETVALUE&PUSH 2)                   ; VAR
802   (GETVALUE&PUSH 1)                   ; NN
804   (LOAD&PUSH 7)
805   (CALLSR&PUSH 1 54)                  ; -
808   (LIST&PUSH 3)
810   (CALL1&PUSH 28)                     ; SIMPLIFY
812   (LIST&PUSH 3)
814   (CALL1&PUSH 28)                     ; SIMPLIFY
816   (LIST&PUSH 3)
818   (CALL1 28)                          ; SIMPLIFY
820   (STORE 35)
822   (LOAD&INC&STORE 0)
824   L824
824   (LOAD&PUSH 0)
825   (GETVALUE&PUSH 1)                   ; NN
827   (CALLSR&JMPIFNOT 1 48 L767)         ; >
831   (SKIP 1)
833   (LOAD 34)
835   (JMP L964)
838   L838
838   (UNBIND1)
839   L839
839   (TAGBODY-CLOSE)
840   (SKIP 1)
842   (SETVALUE 3)                        ; RES
844   (CONST&PUSH 41)                     ; *SHR-SL*
846   (CALL1 40)                          ; *REARRAY
848   (CONST&PUSH 42)                     ; *SHI-SL*
850   (CALL1 40)                          ; *REARRAY
852   (CONST&PUSH 43)                     ; *QPR-SL*
854   (CALL1 40)                          ; *REARRAY
856   (CONST&PUSH 44)                     ; *HR-SL*
858   (CALL1 40)                          ; *REARRAY
860   (CONST&PUSH 45)                     ; *QHR-SL*
862   (CALL1 40)                          ; *REARRAY
864   (LOAD&JMPIF 5 L726)
868   (GETVALUE 3)                        ; RES
870   (JMPIF L876)
872   L872
872   (CONST&PUSH 55)                     ; "~%Unexpected error. Treat results with caution."
874   (CALL1 56)                          ; MTELL
876   L876
876   (GETVALUE&PUSH 1)                   ; NN
878   (GETVALUE&PUSH 0)                   ; DEGREE
880   (CALLSR&JMPIFNOT 1 45 L896)         ; =
884   (CONST&PUSH 32)                     ; *PR-SL*
886   (CALL1 40)                          ; *REARRAY
888   (CONST&PUSH 33)                     ; *PI-SL*
890   (CALL1 40)                          ; *REARRAY
892   (CONST&PUSH 57)                     ; "~%No roots found"
894   (CALL1 16)                          ; MERROR
896   L896
896   (NIL)
897   (SETVALUE 3)                        ; RES
899   (GETVALUE&PUSH 1)                   ; NN
901   (CALLS2&JMPIFNOT 145 L746)          ; ZEROP
905   (GETVALUE 20)                       ; $POLYFACTOR
907   (JMPIFNOT L970)
909   (CONST 21)                          ; 0.0
911   (BIND 22)                           ; CR
913   (CONST 21)                          ; 0.0
915   (BIND 23)                           ; CI
917   (GETVALUE&PUSH 32)                  ; *PR-SL*
919   (CONST&PUSH 18)                     ; 0
920   (CALLSR&PUSH 1 1)                   ; AREF
923   (GETVALUE&PUSH 33)                  ; *PI-SL*
925   (CONST&PUSH 18)                     ; 0
926   (CALLSR&PUSH 1 1)                   ; AREF
929   (LOAD&CAR&PUSH 9)
931   (CONST&PUSH 24)                     ; 1.0
932   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
934   (LOAD 10)
935   (CDR)
936   (CAR&PUSH)
937   (CONST&PUSH 24)                     ; 1.0
938   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
940   (CALL 4 25)                         ; CDIVID-SL
943   (CONST&PUSH 64)                     ; (MPLUS)
945   (CONST&PUSH 65)                     ; (MTIMES)
947   (CONST&PUSH 11)                     ; $%I
948   (GETVALUE&PUSH 23)                  ; CI
950   (LIST&PUSH 3)
952   (CALL1&PUSH 28)                     ; SIMPLIFY
954   (GETVALUE&PUSH 22)                  ; CR
956   (LIST&PUSH 3)
958   (CALL1 28)                          ; SIMPLIFY
960   (UNBIND 2)
962   (STORE 34)
964   L964
964   (PUSH)
965   (GETVALUE 3)                        ; RES
967   (CONS)
968   (SETVALUE 3)                        ; RES
970   L970
970   (GETVALUE&PUSH 0)                   ; DEGREE
972   (JMP L1114)
975   L975
975   (CONST&PUSH 68)                     ; (MPLUS)
977   (GETVALUE&PUSH 2)                   ; VAR
979   (CONST&PUSH 69)                     ; (MMINUS)
981   (LOAD&PUSH 38)
983   (LIST&PUSH 2)
985   (CALL1&PUSH 28)                     ; SIMPLIFY
987   (LIST 3)
989   (JMP L1040)
991   L991
991   (LOAD&JMPIF 6 L975)
994   (GETVALUE&PUSH 33)                  ; *PI-SL*
996   (LOAD&PUSH 1)
997   (CALLSR&PUSH 1 1)                   ; AREF
1000  (CALLS2&JMPIF 145 L975)             ; ZEROP
1003  (LOAD&DEC&STORE 0)
1005  (CONST&PUSH 70)                     ; (MPLUS)
1007  (CONST&PUSH 71)                     ; (MEXPT)
1009  (GETVALUE&PUSH 2)                   ; VAR
1011  (CONST&PUSH 72)                     ; 2
1013  (LIST&PUSH 3)
1015  (CALL1&PUSH 28)                     ; SIMPLIFY
1017  (CONST&PUSH 73)                     ; (MTIMES)
1019  (GETVALUE&PUSH 2)                   ; VAR
1021  (GETVALUE&PUSH 32)                  ; *PR-SL*
1023  (LOAD&PUSH 5)
1024  (CALLSR&PUSH 1 1)                   ; AREF
1027  (LIST&PUSH 3)
1029  (CALL1&PUSH 28)                     ; SIMPLIFY
1031  (GETVALUE&PUSH 32)                  ; *PR-SL*
1033  (LOAD&INC&PUSH 4)
1035  (CALLSR&PUSH 1 1)                   ; AREF
1038  (LIST 4)
1040  L1040
1040  (PUSH)
1041  (CALL1&PUSH 28)                     ; SIMPLIFY
1043  (JMP L1107)
1045  L1045
1045  (LOAD 0)
1046  (STORE 0)
1047  (JMP L1107)
1049  L1049
1049  (CONST&PUSH 77)                     ; (MTIMES)
1051  (GETVALUE 3)                        ; RES
1053  (CONS)
1054  (JMP L1143)
1057  L1057
1057  (CONST&PUSH 66)                     ; (MPLUS)
1059  (CONST&PUSH 67)                     ; (MTIMES)
1061  (CONST&PUSH 11)                     ; $%I
1062  (GETVALUE&PUSH 33)                  ; *PI-SL*
1064  (LOAD&PUSH 4)
1065  (CALLSR&PUSH 1 1)                   ; AREF
1068  (LIST&PUSH 3)
1070  (CALL1&PUSH 28)                     ; SIMPLIFY
1072  (GETVALUE&PUSH 32)                  ; *PR-SL*
1074  (LOAD&PUSH 3)
1075  (CALLSR&PUSH 1 1)                   ; AREF
1078  (LIST&PUSH 3)
1080  (CALL1 28)                          ; SIMPLIFY
1082  (STORE 35)
1084  (GETVALUE 20)                       ; $POLYFACTOR
1086  (JMPIF L991)
1089  (CONST&PUSH 74)                     ; (MEQUAL)
1091  (GETVALUE&PUSH 2)                   ; VAR
1093  (LOAD&PUSH 37)
1095  (LIST&PUSH 3)
1097  (CALL1&PUSH 28)                     ; SIMPLIFY
1099  (GETVALUE 75)                       ; $PROGRAMMODE
1101  (JMPIF L1045)
1103  (LOAD&PUSH 0)
1104  (CALL1 76)                          ; DISPLINE
1106  (STORE 0)
1107  L1107
1107  (GETVALUE 3)                        ; RES
1109  (CONS)
1110  (SETVALUE 3)                        ; RES
1112  (LOAD&DEC&STORE 0)
1114  L1114
1114  (LOAD&PUSH 0)
1115  (GETVALUE&PUSH 1)                   ; NN
1117  (CALLSR&JMPIFNOT 1 45 L1057)        ; =
1121  (SKIP 1)
1123  (CONST&PUSH 32)                     ; *PR-SL*
1125  (CALL1 40)                          ; *REARRAY
1127  (CONST&PUSH 33)                     ; *PI-SL*
1129  (CALL1 40)                          ; *REARRAY
1131  (GETVALUE 20)                       ; $POLYFACTOR
1133  (JMPIF L1049)
1136  (CONST&PUSH 78)                     ; (MLIST)
1138  (GETVALUE&PUSH 3)                   ; RES
1140  (CALLS2 73)                         ; NREVERSE
1142  (CONS)
1143  L1143
1143  (PUSH)
1144  (CALL1 28)                          ; SIMPLIFY
1146  L1146
1146  (SKIP 2)
1148  (UNBIND1)
1149  (SKIP 1)
1151  (UNBIND 9)
1153  (SKIP&RET 2)


Disassembly of function #:|(DEFUN CPOLY-ERR (EXPR) ...)-16|
(CONST 0) = CPOLY-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPOLY-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPOLY-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPOLY-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPOLY-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPOLY-ERR
8     (SKIP&RET 1)


Disassembly of function CPOLY-ERR
(CONST 0) = "ALLROOTS: not a polynomial:~%~M"
(CONST 1) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "ALLROOTS: not a polynomial:~%~M"
1     (LOAD&PUSH 2)
2     (CALL2 1)                           ; MERROR
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN CPOLY-SL (DEGREE) ...)-17|
(CONST 0) = CPOLY-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CPOLY-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CPOLY-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CPOLY-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CPOLY-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CPOLY-SL
8     (SKIP&RET 1)


Disassembly of function CPOLY-SL
(CONST 0) = DEGREE
(CONST 1) = 2.0
(CONST 2) = 0.0
(CONST 3) = ACP-SL
(CONST 4) = MAXIMA-FLOAT-PRECISION
(CONST 5) = ARE
(CONST 6) = MRE
(CONST 7) = 0.70710677
(CONST 8) = YY
(CONST 9) = CR
(CONST 10) = CI
(CONST 11) = SR
(CONST 12) = SI
(CONST 13) = TR
(CONST 14) = TI
(CONST 15) = ZR
(CONST 16) = ZI
(CONST 17) = 0
(CONST 18) = N
(CONST 19) = POLYSC
(CONST 20) = POLYSC1
(CONST 21) = CONV
(CONST 22) = LOGBAS
(CONST 23) = INFIN
(CONST 24) = SMALNO
(CONST 25) = *PR-SL*
(CONST 26) = *PI-SL*
(CONST 27) = NN
(CONST 28) = *SHR-SL*
(CONST 29) = CMOD-SL
(CONST 30) = SCALE-SL
(CONST 31) = 2
(CONST 32) = CAUCHY-SL
(CONST 33) = NEWROOT
(CONST 34) = 1
(CONST 35) = 5
(CONST 36) = NOSHFT-SL
(CONST 37) = 9
(CONST 38) = -0.069756474
(CONST 39) = 0.99756405
(CONST 40) = 10
(CONST 41) = FXSHFT-SL
(CONST 42) = *QPR-SL*
(CONST 43) = *QPI-SL*
(CONST 44) = CDIVID-SL
(CONST 45) = _F
(CONST 46) = J
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(J POLYSC POLYSC1 CI CR CONV YY *QPI-SL* *QPR-SL* N ZI ZR *SHR-SL* NN *PI-SL*
 *PR-SL* DEGREE ARE ACP-SL)
writes special variables : (J SI SR DEGREE N NN YY MRE)
356 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; DEGREE
3     (CONST&PUSH 1)                      ; 2.0
4     (PUSH-UNBOUND 1)
6     (CALLS2&PUSH 155)                   ; LOG
8     (CONST&PUSH 2)                      ; 0.0
9     (CONST&PUSH 2)                      ; 0.0
10    (GETVALUE&PUSH 3)                   ; ACP-SL
12    (CALL1 4)                           ; MAXIMA-FLOAT-PRECISION
14    (BIND 5)                            ; ARE
16    (CONST 2)                           ; 0.0
17    (BIND 6)                            ; MRE
19    (CONST&PUSH 7)                      ; 0.70710677
20    (CONST 2)                           ; 0.0
21    (BIND 8)                            ; YY
23    (CONST 2)                           ; 0.0
24    (BIND 9)                            ; CR
26    (CONST 2)                           ; 0.0
27    (BIND 10)                           ; CI
29    (CONST 2)                           ; 0.0
30    (BIND 11)                           ; SR
32    (CONST 2)                           ; 0.0
33    (BIND 12)                           ; SI
35    (CONST 2)                           ; 0.0
36    (BIND 13)                           ; TR
38    (CONST 2)                           ; 0.0
39    (BIND 14)                           ; TI
41    (CONST 2)                           ; 0.0
42    (BIND 15)                           ; ZR
44    (CONST 2)                           ; 0.0
45    (BIND 16)                           ; ZI
47    (CONST&PUSH 2)                      ; 0.0
48    (CONST 17)                          ; 0
49    (BIND 18)                           ; N
51    (CONST 17)                          ; 0
52    (BIND 19)                           ; POLYSC
54    (CONST 17)                          ; 0
55    (BIND 20)                           ; POLYSC1
57    (NIL)
58    (BIND 21)                           ; CONV
60    (LOAD 49)
62    (BIND 22)                           ; LOGBAS
64    (LOAD 51)
66    (BIND 23)                           ; INFIN
68    (LOAD 53)
70    (BIND 24)                           ; SMALNO
72    (CONST&PUSH 1)                      ; 2.0
73    (CONST&PUSH 1)                      ; 2.0
74    (CALLS2&PUSH 156)                   ; SQRT
76    (GETVALUE&PUSH 5)                   ; ARE
78    (CALLSR 3 55)                       ; *
81    (SETVALUE 6)                        ; MRE
83    (LOAD&PUSH 49)
85    (CALLSR 0 54)                       ; -
88    (SETVALUE 8)                        ; YY
90    (GETVALUE&PUSH 0)                   ; DEGREE
92    (JMP L96)
94    L94
94    (LOAD&DEC&STORE 0)
96    L96
96    (GETVALUE&PUSH 25)                  ; *PR-SL*
98    (LOAD&PUSH 1)
99    (CALLSR&PUSH 1 1)                   ; AREF
102   (CALLS2&JMPIFNOT 145 L114)          ; ZEROP
105   (GETVALUE&PUSH 26)                  ; *PI-SL*
107   (LOAD&PUSH 1)
108   (CALLSR&PUSH 1 1)                   ; AREF
111   (CALLS2&JMPIF 145 L94)              ; ZEROP
114   L114
114   (LOAD 0)
115   (SETVALUE 27)                       ; NN
117   (PUSH)
118   (CALLS2 151)                        ; 1-
120   (SETVALUE 18)                       ; N
122   (SKIP 1)
124   (GETVALUE 27)                       ; NN
126   (SETVALUE 0)                        ; DEGREE
128   (CONST&PUSH 17)                     ; 0
129   (JMP L414)
132   L132
132   (CONST&PUSH 17)                     ; 0
133   (JMP L161)
135   L135
135   (GETVALUE&PUSH 28)                  ; *SHR-SL*
137   (GETVALUE&PUSH 25)                  ; *PR-SL*
139   (LOAD&PUSH 2)
140   (CALLSR&PUSH 1 1)                   ; AREF
143   (GETVALUE&PUSH 26)                  ; *PI-SL*
145   (LOAD&PUSH 3)
146   (CALLSR&PUSH 1 1)                   ; AREF
149   (CALL2&PUSH 29)                     ; CMOD-SL
151   (LOAD&PUSH 1)
152   (LOAD&PUSH 3)
153   (LOAD&PUSH 2)
154   (CALLSR 1 2)                        ; SYSTEM::STORE
157   (SKIP 2)
159   (LOAD&INC&STORE 0)
161   L161
161   (LOAD&PUSH 0)
162   (GETVALUE&PUSH 27)                  ; NN
164   (CALLSR&JMPIFNOT 1 48 L135)         ; >
168   (SKIP 1)
170   (CALL0 32)                          ; CAUCHY-SL
172   (STORE 21)
174   (CONST 33)                          ; NEWROOT
176   (CATCH-OPEN L381)
179   (CONST&PUSH 34)                     ; 1
181   (JMP L363)
184   L184
184   (CONST&PUSH 35)                     ; 5
186   (CALL1 36)                          ; NOSHFT-SL
188   (CONST&PUSH 34)                     ; 1
190   (JMP L351)
193   L193
193   (GETVALUE&PUSH 25)                  ; *PR-SL*
195   (GETVALUE&PUSH 27)                  ; NN
197   (GETVALUE&PUSH 15)                  ; ZR
199   (LOAD&PUSH 2)
200   (LOAD&PUSH 2)
201   (LOAD&PUSH 2)
202   (CALLSR 1 2)                        ; SYSTEM::STORE
205   (SKIP 3)
207   (GETVALUE&PUSH 26)                  ; *PI-SL*
209   (GETVALUE&PUSH 27)                  ; NN
211   (GETVALUE&PUSH 16)                  ; ZI
213   (LOAD&PUSH 2)
214   (LOAD&PUSH 2)
215   (LOAD&PUSH 2)
216   (CALLSR 1 2)                        ; SYSTEM::STORE
219   (SKIP 3)
221   (GETVALUE 18)                       ; N
223   (SETVALUE 27)                       ; NN
225   (PUSH)
226   (CALLS2 151)                        ; 1-
228   (SETVALUE 18)                       ; N
230   (CONST&PUSH 17)                     ; 0
231   (JMP L267)
233   L233
233   (GETVALUE&PUSH 25)                  ; *PR-SL*
235   (GETVALUE&PUSH 42)                  ; *QPR-SL*
237   (LOAD&PUSH 2)
238   (CALLSR&PUSH 1 1)                   ; AREF
241   (LOAD&PUSH 1)
242   (LOAD&PUSH 3)
243   (LOAD&PUSH 2)
244   (CALLSR 1 2)                        ; SYSTEM::STORE
247   (SKIP 2)
249   (GETVALUE&PUSH 26)                  ; *PI-SL*
251   (GETVALUE&PUSH 43)                  ; *QPI-SL*
253   (LOAD&PUSH 2)
254   (CALLSR&PUSH 1 1)                   ; AREF
257   (LOAD&PUSH 1)
258   (LOAD&PUSH 3)
259   (LOAD&PUSH 2)
260   (CALLSR 1 2)                        ; SYSTEM::STORE
263   (SKIP 2)
265   (LOAD&INC&STORE 0)
267   L267
267   (LOAD&PUSH 0)
268   (GETVALUE&PUSH 27)                  ; NN
270   (CALLSR&JMPIFNOT 1 48 L233)         ; >
274   (SKIP 1)
276   (CONST&PUSH 33)                     ; NEWROOT
278   (T)
279   (THROW)
280   L280
280   (CONST&PUSH 38)                     ; -0.069756474
282   (LOAD&PUSH 55)
284   (CALLSR&PUSH 2 55)                  ; *
287   (CONST&PUSH 39)                     ; 0.99756405
289   (GETVALUE&PUSH 8)                   ; YY
291   (CALLSR&PUSH 2 55)                  ; *
294   (CALLSR&PUSH 1 54)                  ; -
297   (CONST&PUSH 39)                     ; 0.99756405
299   (LOAD&PUSH 56)
301   (CALLSR&PUSH 2 55)                  ; *
304   (CONST&PUSH 38)                     ; -0.069756474
306   (GETVALUE&PUSH 8)                   ; YY
308   (CALLSR&PUSH 2 55)                  ; *
311   (CALLSR 2 53)                       ; +
314   (SETVALUE 8)                        ; YY
316   (POP&STORE 54)
318   (LOAD&PUSH 26)
320   (LOAD&PUSH 55)
322   (CALLSR 2 55)                       ; *
325   (SETVALUE 11)                       ; SR
327   (LOAD&PUSH 26)
329   (GETVALUE&PUSH 8)                   ; YY
331   (CALLSR 2 55)                       ; *
334   (SETVALUE 12)                       ; SI
336   (CONST&PUSH 40)                     ; 10
338   (LOAD&PUSH 1)
339   (CALLSR&PUSH 2 55)                  ; *
342   (CALL1 41)                          ; FXSHFT-SL
344   (GETVALUE 21)                       ; CONV
346   (JMPIF L193)
349   (LOAD&INC&STORE 0)
351   L351
351   (LOAD&PUSH 0)
352   (CONST&PUSH 37)                     ; 9
354   (CALLSR&JMPIFNOT 1 48 L280)         ; >
359   (SKIP 1)
361   (LOAD&INC&STORE 0)
363   L363
363   (LOAD&PUSH 0)
364   (CONST&PUSH 31)                     ; 2
366   (CALLSR&JMPIFNOT 1 48 L184)         ; >
371   (SKIP 1)
373   (CATCH-CLOSE)
374   (GETVALUE 21)                       ; CONV
376   (JMPIFNOT L498)
379   (JMP L425)
381   L381
381   (GETVALUE 21)                       ; CONV
383   (JMPIFNOT L498)
386   (JMP L425)
388   L388
388   (GETVALUE&PUSH 28)                  ; *SHR-SL*
390   (GETVALUE&PUSH 25)                  ; *PR-SL*
392   (LOAD&PUSH 2)
393   (CALLSR&PUSH 1 1)                   ; AREF
396   (GETVALUE&PUSH 26)                  ; *PI-SL*
398   (LOAD&PUSH 3)
399   (CALLSR&PUSH 1 1)                   ; AREF
402   (CALL2&PUSH 29)                     ; CMOD-SL
404   (LOAD&PUSH 1)
405   (LOAD&PUSH 3)
406   (LOAD&PUSH 2)
407   (CALLSR 1 2)                        ; SYSTEM::STORE
410   (SKIP 2)
412   (LOAD&INC&STORE 0)
414   L414
414   (LOAD&PUSH 0)
415   (GETVALUE&PUSH 27)                  ; NN
417   (CALLSR&JMPIFNOT 1 48 L388)         ; >
421   (SKIP 1)
423   (CALL0 30)                          ; SCALE-SL
425   L425
425   (CONST&PUSH 31)                     ; 2
427   (GETVALUE&PUSH 27)                  ; NN
429   (CALLSR&JMPIFNOT 1 48 L132)         ; >
434   (GETVALUE&PUSH 25)                  ; *PR-SL*
436   (CONST&PUSH 34)                     ; 1
438   (CALLSR&PUSH 1 1)                   ; AREF
441   (CALLSR&PUSH 0 54)                  ; -
444   (GETVALUE&PUSH 26)                  ; *PI-SL*
446   (CONST&PUSH 34)                     ; 1
448   (CALLSR&PUSH 1 1)                   ; AREF
451   (CALLSR&PUSH 0 54)                  ; -
454   (GETVALUE&PUSH 25)                  ; *PR-SL*
456   (CONST&PUSH 17)                     ; 0
457   (CALLSR&PUSH 1 1)                   ; AREF
460   (GETVALUE&PUSH 26)                  ; *PI-SL*
462   (CONST&PUSH 17)                     ; 0
463   (CALLSR&PUSH 1 1)                   ; AREF
466   (CALL 4 44)                         ; CDIVID-SL
469   (GETVALUE&PUSH 25)                  ; *PR-SL*
471   (GETVALUE&PUSH 9)                   ; CR
473   (LOAD&PUSH 1)
474   (CONST&PUSH 34)                     ; 1
476   (LOAD&PUSH 2)
477   (CALLSR 1 2)                        ; SYSTEM::STORE
480   (SKIP 2)
482   (GETVALUE&PUSH 26)                  ; *PI-SL*
484   (GETVALUE&PUSH 10)                  ; CI
486   (LOAD&PUSH 1)
487   (CONST&PUSH 34)                     ; 1
489   (LOAD&PUSH 2)
490   (CALLSR 1 2)                        ; SYSTEM::STORE
493   (SKIP 2)
495   (CONST 17)                          ; 0
496   (SETVALUE 27)                       ; NN
498   L498
498   (GETVALUE&PUSH 27)                  ; NN
500   (CALLS2&PUSH 150)                   ; 1+
502   (JMP L546)
504   L504
504   (GETVALUE&PUSH 25)                  ; *PR-SL*
506   (GETVALUE&PUSH 25)                  ; *PR-SL*
508   (LOAD&PUSH 2)
509   (CALLSR&PUSH 1 1)                   ; AREF
512   (GETVALUE&PUSH 20)                  ; POLYSC1
514   (CALL2&PUSH 45)                     ; _F
516   (LOAD&PUSH 1)
517   (LOAD&PUSH 3)
518   (LOAD&PUSH 2)
519   (CALLSR 1 2)                        ; SYSTEM::STORE
522   (SKIP 2)
524   (GETVALUE&PUSH 26)                  ; *PI-SL*
526   (GETVALUE&PUSH 26)                  ; *PI-SL*
528   (LOAD&PUSH 2)
529   (CALLSR&PUSH 1 1)                   ; AREF
532   (GETVALUE&PUSH 20)                  ; POLYSC1
534   (CALL2&PUSH 45)                     ; _F
536   (LOAD&PUSH 1)
537   (LOAD&PUSH 3)
538   (LOAD&PUSH 2)
539   (CALLSR 1 2)                        ; SYSTEM::STORE
542   (SKIP 2)
544   (LOAD&INC&STORE 0)
546   L546
546   (LOAD&PUSH 0)
547   (GETVALUE&PUSH 0)                   ; DEGREE
549   (CALLSR&JMPIFNOT 1 48 L504)         ; >
553   (SKIP 1)
555   (CONST&PUSH 17)                     ; 0
556   (GETVALUE&PUSH 19)                  ; POLYSC
558   (GETVALUE&PUSH 20)                  ; POLYSC1
560   (GETVALUE&PUSH 0)                   ; DEGREE
562   (CALLSR&PUSH 2 55)                  ; *
565   (CALLSR 1 54)                       ; -
568   (BIND 46)                           ; J
570   (JMP L623)
572   L572
572   (GETVALUE&PUSH 25)                  ; *PR-SL*
574   (GETVALUE&PUSH 25)                  ; *PR-SL*
576   (LOAD&PUSH 5)
577   (CALLSR&PUSH 1 1)                   ; AREF
580   (GETVALUE&PUSH 46)                  ; J
582   (CALL2&PUSH 45)                     ; _F
584   (LOAD&PUSH 1)
585   (LOAD&PUSH 6)
586   (LOAD&PUSH 2)
587   (CALLSR 1 2)                        ; SYSTEM::STORE
590   (SKIP 2)
592   (GETVALUE&PUSH 26)                  ; *PI-SL*
594   (GETVALUE&PUSH 26)                  ; *PI-SL*
596   (LOAD&PUSH 5)
597   (CALLSR&PUSH 1 1)                   ; AREF
600   (GETVALUE&PUSH 46)                  ; J
602   (CALL2&PUSH 45)                     ; _F
604   (LOAD&PUSH 1)
605   (LOAD&PUSH 6)
606   (LOAD&PUSH 2)
607   (CALLSR 1 2)                        ; SYSTEM::STORE
610   (SKIP 2)
612   (LOAD&INC&STORE 3)
614   (GETVALUE&PUSH 46)                  ; J
616   (GETVALUE&PUSH 20)                  ; POLYSC1
618   (CALLSR 2 53)                       ; +
621   (SETVALUE 46)                       ; J
623   L623
623   (LOAD&PUSH 3)
624   (GETVALUE&PUSH 27)                  ; NN
626   (CALLSR&JMPIFNOT 1 48 L572)         ; >
630   (UNBIND1)
631   (SKIP 1)
633   (GETVALUE 27)                       ; NN
635   (UNBIND 7)
637   (SKIP 1)
639   (UNBIND 9)
641   (SKIP 1)
643   (UNBIND 2)
645   (SKIP 3)
647   (UNBIND1)
648   (SKIP&RET 2)


Disassembly of function #:|(DEFUN NOSHFT-SL (L1) ...)-18|
(CONST 0) = NOSHFT-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NOSHFT-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NOSHFT-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NOSHFT-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NOSHFT-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NOSHFT-SL
8     (SKIP&RET 1)


Disassembly of function NOSHFT-SL
(CONST 0) = 0
(CONST 1) = NN
(CONST 2) = 1.0
(CONST 3) = QUOT
(CONST 4) = N
(CONST 5) = *HR-SL*
(CONST 6) = *PR-SL*
(CONST 7) = *HI-SL*
(CONST 8) = *PI-SL*
(CONST 9) = 1
(CONST 10) = CMOD-SL
(CONST 11) = 10.0
(CONST 12) = ARE
(CONST 13) = CDIVID-SL
(CONST 14) = CR
(CONST 15) = TR
(CONST 16) = CI
(CONST 17) = TI
(CONST 18) = J
(CONST 19) = 0.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARE TI TR J CI CR N *PI-SL* *HI-SL* *PR-SL* *HR-SL* NN)
writes special variables : (J TI TR)
212 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0
1     (GETVALUE&PUSH 1)                   ; NN
3     (CONST&PUSH 2)                      ; 1.0
4     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
6     (GETVALUE&PUSH 1)                   ; NN
8     (CONST&PUSH 2)                      ; 1.0
9     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
11    (CALL1&PUSH 3)                      ; QUOT
13    (JMP L61)
15    L15
15    (GETVALUE&PUSH 5)                   ; *HR-SL*
17    (GETVALUE&PUSH 6)                   ; *PR-SL*
19    (LOAD&PUSH 4)
20    (CALLSR&PUSH 1 1)                   ; AREF
23    (LOAD&PUSH 3)
24    (LOAD&PUSH 3)
25    (CALLSR&PUSH 3 55)                  ; *
28    (LOAD&PUSH 1)
29    (LOAD&PUSH 5)
30    (LOAD&PUSH 2)
31    (CALLSR 1 2)                        ; SYSTEM::STORE
34    (SKIP 2)
36    (GETVALUE&PUSH 7)                   ; *HI-SL*
38    (GETVALUE&PUSH 8)                   ; *PI-SL*
40    (LOAD&PUSH 4)
41    (CALLSR&PUSH 1 1)                   ; AREF
44    (LOAD&PUSH 3)
45    (LOAD&PUSH 3)
46    (CALLSR&PUSH 3 55)                  ; *
49    (LOAD&PUSH 1)
50    (LOAD&PUSH 5)
51    (LOAD&PUSH 2)
52    (CALLSR 1 2)                        ; SYSTEM::STORE
55    (SKIP 2)
57    (LOAD&INC&STORE 2)
59    (LOAD&DEC&STORE 1)
61    L61
61    (LOAD&PUSH 2)
62    (GETVALUE&PUSH 4)                   ; N
64    (CALLSR&JMPIFNOT 1 48 L15)          ; >
68    (SKIP 3)
70    (CONST&PUSH 9)                      ; 1
71    (JMP L398)
74    L74
74    (GETVALUE&PUSH 6)                   ; *PR-SL*
76    (GETVALUE&PUSH 1)                   ; NN
78    (CALLSR&PUSH 1 1)                   ; AREF
81    (CALLSR&PUSH 0 54)                  ; -
84    (GETVALUE&PUSH 8)                   ; *PI-SL*
86    (GETVALUE&PUSH 1)                   ; NN
88    (CALLSR&PUSH 1 1)                   ; AREF
91    (CALLSR&PUSH 0 54)                  ; -
94    (GETVALUE&PUSH 5)                   ; *HR-SL*
96    (GETVALUE&PUSH 4)                   ; N
98    (CALLSR&PUSH 1 1)                   ; AREF
101   (GETVALUE&PUSH 7)                   ; *HI-SL*
103   (GETVALUE&PUSH 4)                   ; N
105   (CALLSR&PUSH 1 1)                   ; AREF
108   (CALL 4 13)                         ; CDIVID-SL
111   (GETVALUE 14)                       ; CR
113   (SETVALUE 15)                       ; TR
115   (GETVALUE 16)                       ; CI
117   (SETVALUE 17)                       ; TI
119   (GETVALUE 4)                        ; N
121   (BIND 18)                           ; J
123   (PUSH-NIL 2)
125   (JMP L225)
128   L128
128   (GETVALUE&PUSH 5)                   ; *HR-SL*
130   (GETVALUE&PUSH 18)                  ; J
132   (CALLS2&PUSH 151)                   ; 1-
134   (CALLSR&STORE 1 1 1)                ; AREF
138   (GETVALUE&PUSH 7)                   ; *HI-SL*
140   (GETVALUE&PUSH 18)                  ; J
142   (CALLS2&PUSH 151)                   ; 1-
144   (CALLSR&STORE 1 1 0)                ; AREF
148   (GETVALUE&PUSH 5)                   ; *HR-SL*
150   (GETVALUE&PUSH 18)                  ; J
152   (GETVALUE&PUSH 6)                   ; *PR-SL*
154   (GETVALUE&PUSH 18)                  ; J
156   (CALLSR&PUSH 1 1)                   ; AREF
159   (LOAD&PUSH 4)
160   (GETVALUE&PUSH 15)                  ; TR
162   (CALLSR&PUSH 2 55)                  ; *
165   (CALLSR&PUSH 2 53)                  ; +
168   (LOAD&PUSH 3)
169   (GETVALUE&PUSH 17)                  ; TI
171   (CALLSR&PUSH 2 55)                  ; *
174   (CALLSR&PUSH 1 54)                  ; -
177   (LOAD&PUSH 2)
178   (LOAD&PUSH 2)
179   (LOAD&PUSH 2)
180   (CALLSR 1 2)                        ; SYSTEM::STORE
183   (SKIP 3)
185   (GETVALUE&PUSH 7)                   ; *HI-SL*
187   (GETVALUE&PUSH 18)                  ; J
189   (GETVALUE&PUSH 8)                   ; *PI-SL*
191   (GETVALUE&PUSH 18)                  ; J
193   (CALLSR&PUSH 1 1)                   ; AREF
196   (LOAD&PUSH 4)
197   (GETVALUE&PUSH 17)                  ; TI
199   (CALLSR&PUSH 2 55)                  ; *
202   (LOAD&PUSH 4)
203   (GETVALUE&PUSH 15)                  ; TR
205   (CALLSR&PUSH 2 55)                  ; *
208   (CALLSR&PUSH 3 53)                  ; +
211   (LOAD&PUSH 2)
212   (LOAD&PUSH 2)
213   (LOAD&PUSH 2)
214   (CALLSR 1 2)                        ; SYSTEM::STORE
217   (SKIP 3)
219   (GETVALUE&PUSH 18)                  ; J
221   (CALLS2 151)                        ; 1-
223   (SETVALUE 18)                       ; J
225   L225
225   (CONST&PUSH 9)                      ; 1
226   (GETVALUE&PUSH 18)                  ; J
228   (CALLSR&JMPIFNOT 1 48 L128)         ; >
233   (SKIP 2)
235   (UNBIND1)
236   (GETVALUE&PUSH 5)                   ; *HR-SL*
238   (GETVALUE&PUSH 6)                   ; *PR-SL*
240   (CONST&PUSH 0)                      ; 0
241   (CALLSR&PUSH 1 1)                   ; AREF
244   (LOAD&PUSH 1)
245   (CONST&PUSH 0)                      ; 0
246   (LOAD&PUSH 2)
247   (CALLSR 1 2)                        ; SYSTEM::STORE
250   (SKIP 2)
252   (GETVALUE&PUSH 7)                   ; *HI-SL*
254   (GETVALUE&PUSH 8)                   ; *PI-SL*
256   (CONST&PUSH 0)                      ; 0
257   (CALLSR&PUSH 1 1)                   ; AREF
260   (LOAD&PUSH 1)
261   (CONST&PUSH 0)                      ; 0
262   (LOAD&PUSH 2)
263   (CALLSR 1 2)                        ; SYSTEM::STORE
266   (SKIP 2)
268   (JMP L396)
271   L271
271   (GETVALUE&PUSH 5)                   ; *HR-SL*
273   (GETVALUE&PUSH 4)                   ; N
275   (CALLSR&PUSH 1 1)                   ; AREF
278   (GETVALUE&PUSH 7)                   ; *HI-SL*
280   (GETVALUE&PUSH 4)                   ; N
282   (CALLSR&PUSH 1 1)                   ; AREF
285   (CALL2&PUSH 10)                     ; CMOD-SL
287   (CONST&PUSH 11)                     ; 10.0
288   (GETVALUE&PUSH 12)                  ; ARE
290   (GETVALUE&PUSH 6)                   ; *PR-SL*
292   (GETVALUE&PUSH 4)                   ; N
294   (CALLSR&PUSH 1 1)                   ; AREF
297   (GETVALUE&PUSH 8)                   ; *PI-SL*
299   (GETVALUE&PUSH 4)                   ; N
301   (CALLSR&PUSH 1 1)                   ; AREF
304   (CALL2&PUSH 10)                     ; CMOD-SL
306   (CALLSR&PUSH 3 55)                  ; *
309   (CALLSR&JMPIF 1 48 L74)             ; >
314   (GETVALUE 4)                        ; N
316   (BIND 18)                           ; J
318   (JMP L368)
320   L320
320   (GETVALUE&PUSH 5)                   ; *HR-SL*
322   (GETVALUE&PUSH 18)                  ; J
324   (GETVALUE&PUSH 5)                   ; *HR-SL*
326   (GETVALUE&PUSH 18)                  ; J
328   (CALLS2&PUSH 151)                   ; 1-
330   (CALLSR&PUSH 1 1)                   ; AREF
333   (LOAD&PUSH 2)
334   (LOAD&PUSH 2)
335   (LOAD&PUSH 2)
336   (CALLSR 1 2)                        ; SYSTEM::STORE
339   (SKIP 3)
341   (GETVALUE&PUSH 7)                   ; *HI-SL*
343   (GETVALUE&PUSH 18)                  ; J
345   (GETVALUE&PUSH 7)                   ; *HI-SL*
347   (GETVALUE&PUSH 18)                  ; J
349   (CALLS2&PUSH 151)                   ; 1-
351   (CALLSR&PUSH 1 1)                   ; AREF
354   (LOAD&PUSH 2)
355   (LOAD&PUSH 2)
356   (LOAD&PUSH 2)
357   (CALLSR 1 2)                        ; SYSTEM::STORE
360   (SKIP 3)
362   (GETVALUE&PUSH 18)                  ; J
364   (CALLS2 151)                        ; 1-
366   (SETVALUE 18)                       ; J
368   L368
368   (CONST&PUSH 9)                      ; 1
369   (GETVALUE&PUSH 18)                  ; J
371   (CALLSR&JMPIFNOT 1 48 L320)         ; >
375   (UNBIND1)
376   (GETVALUE&PUSH 5)                   ; *HR-SL*
378   (LOAD&PUSH 0)
379   (CONST&PUSH 0)                      ; 0
380   (CONST&PUSH 19)                     ; 0.0
381   (CALLSR 1 2)                        ; SYSTEM::STORE
384   (SKIP 1)
386   (GETVALUE&PUSH 7)                   ; *HI-SL*
388   (LOAD&PUSH 0)
389   (CONST&PUSH 0)                      ; 0
390   (CONST&PUSH 19)                     ; 0.0
391   (CALLSR 1 2)                        ; SYSTEM::STORE
394   (SKIP 1)
396   L396
396   (LOAD&INC&STORE 0)
398   L398
398   (LOAD&PUSH 0)
399   (LOAD&PUSH 3)
400   (CALLSR&JMPIFNOT 1 48 L271)         ; >
405   (NIL)
406   (SKIP&RET 3)


Disassembly of function #:|(DEFUN FXSHFT-SL (L2) ...)-19|
(CONST 0) = FXSHFT-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FXSHFT-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FXSHFT-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FXSHFT-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FXSHFT-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FXSHFT-SL
8     (SKIP&RET 1)


Disassembly of function FXSHFT-SL
(CONST 0) = 0.0
(CONST 1) = BOOL
(CONST 2) = PVR
(CONST 3) = PVI
(CONST 4) = POLYEV-SL
(CONST 5) = CONV
(CONST 6) = CALCT-SL
(CONST 7) = 1
(CONST 8) = J
(CONST 9) = TR
(CONST 10) = TI
(CONST 11) = NEXTH-SL
(CONST 12) = SR
(CONST 13) = ZR
(CONST 14) = SI
(CONST 15) = ZI
(CONST 16) = 0.5
(CONST 17) = CMOD-SL
(CONST 18) = 0
(CONST 19) = N
(CONST 20) = *SHR-SL*
(CONST 21) = *HR-SL*
(CONST 22) = *SHI-SL*
(CONST 23) = *HI-SL*
(CONST 24) = 10
(CONST 25) = VRSHFT-SL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (CONV N *SHI-SL* *HI-SL* *SHR-SL* *HR-SL* ZI ZR BOOL SI SR TI TR J)
writes special variables : (SI SR J ZI ZR CONV)
147 byte-code instructions:
0     (T&PUSH)
1     (NIL&PUSH)
2     (CONST&PUSH 0)                      ; 0.0
3     (CONST&PUSH 0)                      ; 0.0
4     (CONST&PUSH 0)                      ; 0.0
5     (CONST&PUSH 0)                      ; 0.0
6     (NIL)
7     (BIND 1)                            ; BOOL
9     (CONST 0)                           ; 0.0
10    (BIND 2)                            ; PVR
12    (CONST 0)                           ; 0.0
13    (BIND 3)                            ; PVI
15    (CALL0 4)                           ; POLYEV-SL
17    (NIL)
18    (SETVALUE 5)                        ; CONV
20    (CALL0 6)                           ; CALCT-SL
22    (CONST 7)                           ; 1
23    (BIND 8)                            ; J
25    L25
25    (GETVALUE&PUSH 8)                   ; J
27    (LOAD&PUSH 20)
28    (CALLSR&JMPIF 1 48 L250)            ; >
33    (GETVALUE 9)                        ; TR
35    (STORE 15)
37    (GETVALUE 10)                       ; TI
39    (STORE 14)
41    (CALL0 11)                          ; NEXTH-SL
43    (CALL0 6)                           ; CALCT-SL
45    (GETVALUE&PUSH 12)                  ; SR
47    (GETVALUE&PUSH 9)                   ; TR
49    (CALLSR 2 53)                       ; +
52    (SETVALUE 13)                       ; ZR
54    (GETVALUE&PUSH 14)                  ; SI
56    (GETVALUE&PUSH 10)                  ; TI
58    (CALLSR 2 53)                       ; +
61    (SETVALUE 15)                       ; ZI
63    (GETVALUE 1)                        ; BOOL
65    (JMPIF L108)
67    (LOAD&JMPIFNOT 17 L108)
70    (GETVALUE&PUSH 8)                   ; J
72    (LOAD&PUSH 20)
73    (CALLSR&JMPIF 1 45 L108)            ; =
77    (CONST&PUSH 16)                     ; 0.5
78    (GETVALUE&PUSH 13)                  ; ZR
80    (GETVALUE&PUSH 15)                  ; ZI
82    (CALL2&PUSH 17)                     ; CMOD-SL
84    (CALLSR&PUSH 2 55)                  ; *
87    (GETVALUE&PUSH 9)                   ; TR
89    (LOAD&PUSH 17)
90    (CALLSR&PUSH 1 54)                  ; -
93    (GETVALUE&PUSH 10)                  ; TI
95    (LOAD&PUSH 17)
96    (CALLSR&PUSH 1 54)                  ; -
99    (CALL2&PUSH 17)                     ; CMOD-SL
101   (CALLSR&JMPIF 1 48 L182)            ; >
106   (NIL&STORE 16)
108   L108
108   (GETVALUE&PUSH 8)                   ; J
110   (CALLS2 150)                        ; 1+
112   (SETVALUE 8)                        ; J
114   (JMP L25)
117   L117
117   (CONST&PUSH 18)                     ; 0
118   (JMP L225)
121   L121
121   (NIL&STORE 17)
123   (CONST&PUSH 18)                     ; 0
124   (JMP L160)
126   L126
126   (GETVALUE&PUSH 21)                  ; *HR-SL*
128   (GETVALUE&PUSH 20)                  ; *SHR-SL*
130   (LOAD&PUSH 2)
131   (CALLSR&PUSH 1 1)                   ; AREF
134   (LOAD&PUSH 1)
135   (LOAD&PUSH 3)
136   (LOAD&PUSH 2)
137   (CALLSR 1 2)                        ; SYSTEM::STORE
140   (SKIP 2)
142   (GETVALUE&PUSH 23)                  ; *HI-SL*
144   (GETVALUE&PUSH 22)                  ; *SHI-SL*
146   (LOAD&PUSH 2)
147   (CALLSR&PUSH 1 1)                   ; AREF
150   (LOAD&PUSH 1)
151   (LOAD&PUSH 3)
152   (LOAD&PUSH 2)
153   (CALLSR 1 2)                        ; SYSTEM::STORE
156   (SKIP 2)
158   (LOAD&INC&STORE 0)
160   L160
160   (LOAD&PUSH 0)
161   (GETVALUE&PUSH 19)                  ; N
163   (CALLSR&JMPIFNOT 1 48 L126)         ; >
167   (SKIP 1)
169   (LOAD 13)
170   (SETVALUE 12)                       ; SR
172   (LOAD 12)
173   (SETVALUE 14)                       ; SI
175   (CALL0 4)                           ; POLYEV-SL
177   (CALL0 6)                           ; CALCT-SL
179   (JMP L108)
182   L182
182   (LOAD&JMPIF 16 L117)
186   (T&STORE 16)
188   (JMP L108)
191   L191
191   (GETVALUE&PUSH 20)                  ; *SHR-SL*
193   (GETVALUE&PUSH 21)                  ; *HR-SL*
195   (LOAD&PUSH 2)
196   (CALLSR&PUSH 1 1)                   ; AREF
199   (LOAD&PUSH 1)
200   (LOAD&PUSH 3)
201   (LOAD&PUSH 2)
202   (CALLSR 1 2)                        ; SYSTEM::STORE
205   (SKIP 2)
207   (GETVALUE&PUSH 22)                  ; *SHI-SL*
209   (GETVALUE&PUSH 23)                  ; *HI-SL*
211   (LOAD&PUSH 2)
212   (CALLSR&PUSH 1 1)                   ; AREF
215   (LOAD&PUSH 1)
216   (LOAD&PUSH 3)
217   (LOAD&PUSH 2)
218   (CALLSR 1 2)                        ; SYSTEM::STORE
221   (SKIP 2)
223   (LOAD&INC&STORE 0)
225   L225
225   (LOAD&PUSH 0)
226   (GETVALUE&PUSH 19)                  ; N
228   (CALLSR&JMPIFNOT 1 48 L191)         ; >
232   (SKIP 1)
234   (GETVALUE 12)                       ; SR
236   (STORE 13)
238   (GETVALUE 14)                       ; SI
240   (STORE 12)
242   (CONST&PUSH 24)                     ; 10
243   (CALL1 25)                          ; VRSHFT-SL
245   (GETVALUE 5)                        ; CONV
247   (JMPIFNOT L121)
250   L250
250   (UNBIND1)
251   (GETVALUE 5)                        ; CONV
253   (JMPIF L258)
255   (CONST&PUSH 24)                     ; 10
256   (CALL1 25)                          ; VRSHFT-SL
258   L258
258   (NIL)
259   (UNBIND 3)
261   (SKIP&RET 8)


Disassembly of function #:|(DEFUN VRSHFT-SL (L3) ...)-20|
(CONST 0) = VRSHFT-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE VRSHFT-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; VRSHFT-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; VRSHFT-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE VRSHFT-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; VRSHFT-SL
8     (SKIP&RET 1)


Disassembly of function VRSHFT-SL
(CONST 0) = CONV
(CONST 1) = ZR
(CONST 2) = SR
(CONST 3) = ZI
(CONST 4) = SI
(CONST 5) = 1
(CONST 6) = POLYEV-SL
(CONST 7) = PVR
(CONST 8) = PVI
(CONST 9) = CMOD-SL
(CONST 10) = 20.0
(CONST 11) = ERREV-SL
(CONST 12) = 0.05
(CONST 13) = 0.1
(CONST 14) = ARE
(CONST 15) = J
(CONST 16) = 5
(CONST 17) = CALCT-SL
(CONST 18) = NEXTH-SL
(CONST 19) = INFIN
(CONST 20) = BOOL
(CONST 21) = TR
(CONST 22) = TI
(CONST 23) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TI TR BOOL INFIN J ARE SI SR PVI PVR ZI ZR)
writes special variables : (J ZI ZR SI SR CONV)
133 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; CONV
3     (GETVALUE 1)                        ; ZR
5     (SETVALUE 2)                        ; SR
7     (GETVALUE 3)                        ; ZI
9     (SETVALUE 4)                        ; SI
11    (CONST&PUSH 5)                      ; 1
12    (PUSH-NIL 7)
14    L14
14    (LOAD&PUSH 7)
15    (LOAD&PUSH 10)
16    (CALLSR&JMPIF 1 48 L232)            ; >
21    (CALL0 6)                           ; POLYEV-SL
23    (GETVALUE&PUSH 7)                   ; PVR
25    (GETVALUE&PUSH 8)                   ; PVI
27    (CALL2 9)                           ; CMOD-SL
29    (STORE 5)
30    (GETVALUE&PUSH 2)                   ; SR
32    (GETVALUE&PUSH 4)                   ; SI
34    (CALL2 9)                           ; CMOD-SL
36    (STORE 4)
37    (CONST&PUSH 10)                     ; 20.0
38    (LOAD&PUSH 5)
39    (LOAD&PUSH 7)
40    (CALL2&PUSH 11)                     ; ERREV-SL
42    (CALLSR&PUSH 2 55)                  ; *
45    (LOAD&PUSH 6)
46    (CALLSR&JMPIFNOT 1 48 L64)          ; >
50    (T)
51    (SETVALUE 0)                        ; CONV
53    (GETVALUE 2)                        ; SR
55    (SETVALUE 1)                        ; ZR
57    (GETVALUE 4)                        ; SI
59    (SETVALUE 3)                        ; ZI
61    L61
61    (T)
62    (SKIP&RET 10)
64    L64
64    (LOAD&PUSH 7)
65    (CONST&PUSH 5)                      ; 1
66    (CALLSR&JMPIF 1 45 L95)             ; =
70    (LOAD&JMPIF 6 L85)
73    (LOAD&PUSH 3)
74    (LOAD&PUSH 6)
75    (CALLSR&JMPIF 1 48 L85)             ; >
79    (LOAD&PUSH 2)
80    (CONST&PUSH 12)                     ; 0.05
81    (CALLSR&JMPIF 1 47 L100)            ; <
85    L85
85    (CONST&PUSH 13)                     ; 0.1
86    (LOAD&PUSH 6)
87    (CALLSR&PUSH 2 55)                  ; *
90    (LOAD&PUSH 4)
91    (CALLSR&JMPIF 1 48 L61)             ; >
95    L95
95    (LOAD 5)
96    (STORE 3)
97    (JMP L184)
100   L100
100   (LOAD 2)
101   (STORE 1)
102   (T&STORE 6)
104   (GETVALUE&PUSH 14)                  ; ARE
106   (LOAD&PUSH 3)
107   (CALLSR&JMPIFNOT 1 48 L114)         ; >
111   (GETVALUE 14)                       ; ARE
113   (STORE 1)
114   L114
114   (LOAD&PUSH 1)
115   (CALLS2&STORE 156 0)                ; SQRT
118   (PUSH)
119   (CALLS2&PUSH 150)                   ; 1+
121   (GETVALUE&PUSH 2)                   ; SR
123   (CALLSR&PUSH 2 55)                  ; *
126   (LOAD&PUSH 1)
127   (GETVALUE&PUSH 4)                   ; SI
129   (CALLSR&PUSH 2 55)                  ; *
132   (CALLSR&PUSH 1 54)                  ; -
135   (LOAD&INC&PUSH 1)
137   (GETVALUE&PUSH 4)                   ; SI
139   (CALLSR&PUSH 2 55)                  ; *
142   (LOAD&PUSH 2)
143   (GETVALUE&PUSH 2)                   ; SR
145   (CALLSR&PUSH 2 55)                  ; *
148   (CALLSR 2 53)                       ; +
151   (SETVALUE 4)                        ; SI
153   (POP)
154   (SETVALUE 2)                        ; SR
156   (CALL0 6)                           ; POLYEV-SL
158   (CONST 5)                           ; 1
159   (BIND 15)                           ; J
161   (JMP L173)
163   L163
163   (CALL0 17)                          ; CALCT-SL
165   (CALL0 18)                          ; NEXTH-SL
167   (GETVALUE&PUSH 15)                  ; J
169   (CALLS2 150)                        ; 1+
171   (SETVALUE 15)                       ; J
173   L173
173   (GETVALUE&PUSH 15)                  ; J
175   (CONST&PUSH 16)                     ; 5
176   (CALLSR&JMPIFNOT 1 48 L163)         ; >
180   (UNBIND1)
181   (GETVALUE 19)                       ; INFIN
183   (STORE 3)
184   L184
184   (CALL0 17)                          ; CALCT-SL
186   (CALL0 18)                          ; NEXTH-SL
188   (CALL0 17)                          ; CALCT-SL
190   (GETVALUE 20)                       ; BOOL
192   (JMPIF L227)
194   (GETVALUE&PUSH 21)                  ; TR
196   (GETVALUE&PUSH 22)                  ; TI
198   (CALL2&PUSH 9)                      ; CMOD-SL
200   (GETVALUE&PUSH 2)                   ; SR
202   (GETVALUE&PUSH 4)                   ; SI
204   (CALL2&PUSH 9)                      ; CMOD-SL
206   (CALL2 23)                          ; QUOT
208   (STORE 2)
209   (GETVALUE&PUSH 2)                   ; SR
211   (GETVALUE&PUSH 21)                  ; TR
213   (CALLSR 2 53)                       ; +
216   (SETVALUE 2)                        ; SR
218   (GETVALUE&PUSH 4)                   ; SI
220   (GETVALUE&PUSH 22)                  ; TI
222   (CALLSR 2 53)                       ; +
225   (SETVALUE 4)                        ; SI
227   L227
227   (LOAD&INC&STORE 7)
229   (JMP L14)
232   L232
232   (NIL)
233   (SKIP&RET 10)


Disassembly of function #:|(DEFUN CALCT-SL NIL ...)-21|
(CONST 0) = CALCT-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CALCT-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CALCT-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CALCT-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CALCT-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CALCT-SL
8     (SKIP&RET 1)


Disassembly of function CALCT-SL
(CONST 0) = 1
(CONST 1) = *QHR-SL*
(CONST 2) = *HR-SL*
(CONST 3) = 0
(CONST 4) = *QHI-SL*
(CONST 5) = *HI-SL*
(CONST 6) = N
(CONST 7) = SR
(CONST 8) = SI
(CONST 9) = CMOD-SL
(CONST 10) = 10.0
(CONST 11) = ARE
(CONST 12) = BOOL
(CONST 13) = PVR
(CONST 14) = PVI
(CONST 15) = CDIVID-SL
(CONST 16) = CR
(CONST 17) = TR
(CONST 18) = CI
(CONST 19) = TI
(CONST 20) = 0.0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARE N SI SR CI CR PVI PVR *HI-SL* *QHI-SL* *HR-SL* *QHR-SL*)
writes special variables : (BOOL TI TR)
102 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1
1     (NIL&PUSH)
2     (GETVALUE&PUSH 1)                   ; *QHR-SL*
4     (GETVALUE&PUSH 2)                   ; *HR-SL*
6     (CONST&PUSH 3)                      ; 0
7     (CALLSR&PUSH 1 1)                   ; AREF
10    (LOAD&PUSH 1)
11    (CONST&PUSH 3)                      ; 0
12    (LOAD&PUSH 2)
13    (CALLSR 1 2)                        ; SYSTEM::STORE
16    (SKIP 1)
18    (STORE 0)
19    (GETVALUE&PUSH 4)                   ; *QHI-SL*
21    (GETVALUE&PUSH 5)                   ; *HI-SL*
23    (CONST&PUSH 3)                      ; 0
24    (CALLSR&PUSH 1 1)                   ; AREF
27    (LOAD&PUSH 1)
28    (CONST&PUSH 3)                      ; 0
29    (LOAD&PUSH 2)
30    (CALLSR 1 2)                        ; SYSTEM::STORE
33    (SKIP 1)
35    (STORE 0)
36    (JMP L138)
39    L39
39    (GETVALUE&PUSH 13)                  ; PVR
41    (CALLSR&PUSH 0 54)                  ; -
44    (GETVALUE&PUSH 14)                  ; PVI
46    (CALLSR&PUSH 0 54)                  ; -
49    (LOAD&PUSH 3)
50    (LOAD&PUSH 3)
51    (CALL 4 15)                         ; CDIVID-SL
54    (GETVALUE 16)                       ; CR
56    (SETVALUE 17)                       ; TR
58    (GETVALUE 18)                       ; CI
60    (SETVALUE 19)                       ; TI
62    (JMP L186)
65    L65
65    (GETVALUE&PUSH 2)                   ; *HR-SL*
67    (LOAD&PUSH 4)
68    (CALLSR&PUSH 1 1)                   ; AREF
71    (LOAD&PUSH 2)
72    (GETVALUE&PUSH 7)                   ; SR
74    (CALLSR&PUSH 2 55)                  ; *
77    (CALLSR&PUSH 2 53)                  ; +
80    (LOAD&PUSH 1)
81    (GETVALUE&PUSH 8)                   ; SI
83    (CALLSR&PUSH 2 55)                  ; *
86    (CALLSR&STORE 1 54 2)               ; -
90    (GETVALUE&PUSH 4)                   ; *QHI-SL*
92    (GETVALUE&PUSH 5)                   ; *HI-SL*
94    (LOAD&PUSH 5)
95    (CALLSR&PUSH 1 1)                   ; AREF
98    (LOAD&PUSH 3)
99    (GETVALUE&PUSH 8)                   ; SI
101   (CALLSR&PUSH 2 55)                  ; *
104   (LOAD&PUSH 3)
105   (GETVALUE&PUSH 7)                   ; SR
107   (CALLSR&PUSH 2 55)                  ; *
110   (CALLSR&STORE 3 53 1)               ; +
114   (PUSH)
115   (LOAD&PUSH 1)
116   (LOAD&PUSH 6)
117   (LOAD&PUSH 2)
118   (CALLSR 1 2)                        ; SYSTEM::STORE
121   (SKIP 2)
123   (GETVALUE&PUSH 1)                   ; *QHR-SL*
125   (LOAD 3)
126   (STORE 2)
127   (PUSH)
128   (LOAD&PUSH 1)
129   (LOAD&PUSH 6)
130   (LOAD&PUSH 2)
131   (CALLSR 1 2)                        ; SYSTEM::STORE
134   (SKIP 2)
136   (LOAD&INC&STORE 3)
138   L138
138   (LOAD&PUSH 3)
139   (GETVALUE&PUSH 6)                   ; N
141   (CALLSR&JMPIFNOT 1 48 L65)          ; >
146   (LOAD&PUSH 1)
147   (LOAD&PUSH 1)
148   (CALL2&PUSH 9)                      ; CMOD-SL
150   (CONST&PUSH 10)                     ; 10.0
151   (GETVALUE&PUSH 11)                  ; ARE
153   (GETVALUE&PUSH 2)                   ; *HR-SL*
155   (GETVALUE&PUSH 6)                   ; N
157   (CALLSR&PUSH 1 1)                   ; AREF
160   (GETVALUE&PUSH 5)                   ; *HI-SL*
162   (GETVALUE&PUSH 6)                   ; N
164   (CALLSR&PUSH 1 1)                   ; AREF
167   (CALL2&PUSH 9)                      ; CMOD-SL
169   (CALLSR&PUSH 3 55)                  ; *
172   (CALLSR 1 48)                       ; >
175   (NOT)
176   (SETVALUE 12)                       ; BOOL
178   (JMPIFNOT L39)
181   (CONST 20)                          ; 0.0
182   (SETVALUE 17)                       ; TR
184   (SETVALUE 19)                       ; TI
186   L186
186   (NIL)
187   (SKIP&RET 5)


Disassembly of function #:|(DEFUN NEXTH-SL NIL ...)-22|
(CONST 0) = NEXTH-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEXTH-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEXTH-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEXTH-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEXTH-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEXTH-SL
8     (SKIP&RET 1)


Disassembly of function NEXTH-SL
(CONST 0) = BOOL
(CONST 1) = 1
(CONST 2) = J
(CONST 3) = N
(CONST 4) = *HR-SL*
(CONST 5) = *QHR-SL*
(CONST 6) = *HI-SL*
(CONST 7) = *QHI-SL*
(CONST 8) = 0
(CONST 9) = 0.0
(CONST 10) = *QPR-SL*
(CONST 11) = TR
(CONST 12) = TI
(CONST 13) = *QPI-SL*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*QPI-SL* TI TR *QPR-SL* N *QHI-SL* *HI-SL* *QHR-SL* J *HR-SL* BOOL)
writes special variable : (J)
128 byte-code instructions:
0     (GETVALUE 0)                        ; BOOL
2     (JMPIF L12)
4     (CONST 1)                           ; 1
5     (BIND 2)                            ; J
7     (PUSH-NIL 2)
9     (JMP L194)
12    L12
12    (CONST 1)                           ; 1
13    (BIND 2)                            ; J
15    (JMP L65)
17    L17
17    (GETVALUE&PUSH 4)                   ; *HR-SL*
19    (GETVALUE&PUSH 2)                   ; J
21    (GETVALUE&PUSH 5)                   ; *QHR-SL*
23    (GETVALUE&PUSH 2)                   ; J
25    (CALLS2&PUSH 151)                   ; 1-
27    (CALLSR&PUSH 1 1)                   ; AREF
30    (LOAD&PUSH 2)
31    (LOAD&PUSH 2)
32    (LOAD&PUSH 2)
33    (CALLSR 1 2)                        ; SYSTEM::STORE
36    (SKIP 3)
38    (GETVALUE&PUSH 6)                   ; *HI-SL*
40    (GETVALUE&PUSH 2)                   ; J
42    (GETVALUE&PUSH 7)                   ; *QHI-SL*
44    (GETVALUE&PUSH 2)                   ; J
46    (CALLS2&PUSH 151)                   ; 1-
48    (CALLSR&PUSH 1 1)                   ; AREF
51    (LOAD&PUSH 2)
52    (LOAD&PUSH 2)
53    (LOAD&PUSH 2)
54    (CALLSR 1 2)                        ; SYSTEM::STORE
57    (SKIP 3)
59    (GETVALUE&PUSH 2)                   ; J
61    (CALLS2 150)                        ; 1+
63    (SETVALUE 2)                        ; J
65    L65
65    (GETVALUE&PUSH 2)                   ; J
67    (GETVALUE&PUSH 3)                   ; N
69    (CALLSR&JMPIFNOT 1 48 L17)          ; >
73    (UNBIND1)
74    (GETVALUE&PUSH 4)                   ; *HR-SL*
76    (LOAD&PUSH 0)
77    (CONST&PUSH 8)                      ; 0
78    (CONST&PUSH 9)                      ; 0.0
79    (CALLSR 1 2)                        ; SYSTEM::STORE
82    (SKIP 1)
84    (GETVALUE&PUSH 6)                   ; *HI-SL*
86    (LOAD&PUSH 0)
87    (CONST&PUSH 8)                      ; 0
88    (CONST&PUSH 9)                      ; 0.0
89    (CALLSR 1 2)                        ; SYSTEM::STORE
92    (SKIP 1)
94    (JMP L238)
97    L97
97    (GETVALUE&PUSH 5)                   ; *QHR-SL*
99    (GETVALUE&PUSH 2)                   ; J
101   (CALLS2&PUSH 151)                   ; 1-
103   (CALLSR&STORE 1 1 1)                ; AREF
107   (GETVALUE&PUSH 7)                   ; *QHI-SL*
109   (GETVALUE&PUSH 2)                   ; J
111   (CALLS2&PUSH 151)                   ; 1-
113   (CALLSR&STORE 1 1 0)                ; AREF
117   (GETVALUE&PUSH 4)                   ; *HR-SL*
119   (GETVALUE&PUSH 2)                   ; J
121   (GETVALUE&PUSH 10)                  ; *QPR-SL*
123   (GETVALUE&PUSH 2)                   ; J
125   (CALLSR&PUSH 1 1)                   ; AREF
128   (LOAD&PUSH 4)
129   (GETVALUE&PUSH 11)                  ; TR
131   (CALLSR&PUSH 2 55)                  ; *
134   (CALLSR&PUSH 2 53)                  ; +
137   (LOAD&PUSH 3)
138   (GETVALUE&PUSH 12)                  ; TI
140   (CALLSR&PUSH 2 55)                  ; *
143   (CALLSR&PUSH 1 54)                  ; -
146   (LOAD&PUSH 2)
147   (LOAD&PUSH 2)
148   (LOAD&PUSH 2)
149   (CALLSR 1 2)                        ; SYSTEM::STORE
152   (SKIP 3)
154   (GETVALUE&PUSH 6)                   ; *HI-SL*
156   (GETVALUE&PUSH 2)                   ; J
158   (GETVALUE&PUSH 13)                  ; *QPI-SL*
160   (GETVALUE&PUSH 2)                   ; J
162   (CALLSR&PUSH 1 1)                   ; AREF
165   (LOAD&PUSH 4)
166   (GETVALUE&PUSH 12)                  ; TI
168   (CALLSR&PUSH 2 55)                  ; *
171   (LOAD&PUSH 4)
172   (GETVALUE&PUSH 11)                  ; TR
174   (CALLSR&PUSH 2 55)                  ; *
177   (CALLSR&PUSH 3 53)                  ; +
180   (LOAD&PUSH 2)
181   (LOAD&PUSH 2)
182   (LOAD&PUSH 2)
183   (CALLSR 1 2)                        ; SYSTEM::STORE
186   (SKIP 3)
188   (GETVALUE&PUSH 2)                   ; J
190   (CALLS2 150)                        ; 1+
192   (SETVALUE 2)                        ; J
194   L194
194   (GETVALUE&PUSH 2)                   ; J
196   (GETVALUE&PUSH 3)                   ; N
198   (CALLSR&JMPIFNOT 1 48 L97)          ; >
203   (SKIP 2)
205   (UNBIND1)
206   (GETVALUE&PUSH 4)                   ; *HR-SL*
208   (GETVALUE&PUSH 10)                  ; *QPR-SL*
210   (CONST&PUSH 8)                      ; 0
211   (CALLSR&PUSH 1 1)                   ; AREF
214   (LOAD&PUSH 1)
215   (CONST&PUSH 8)                      ; 0
216   (LOAD&PUSH 2)
217   (CALLSR 1 2)                        ; SYSTEM::STORE
220   (SKIP 2)
222   (GETVALUE&PUSH 6)                   ; *HI-SL*
224   (GETVALUE&PUSH 13)                  ; *QPI-SL*
226   (CONST&PUSH 8)                      ; 0
227   (CALLSR&PUSH 1 1)                   ; AREF
230   (LOAD&PUSH 1)
231   (CONST&PUSH 8)                      ; 0
232   (LOAD&PUSH 2)
233   (CALLSR 1 2)                        ; SYSTEM::STORE
236   (SKIP 2)
238   L238
238   (NIL)
239   (SKIP&RET 1)


Disassembly of function #:|(DEFUN POLYEV-SL NIL ...)-23|
(CONST 0) = POLYEV-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POLYEV-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLYEV-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POLYEV-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POLYEV-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POLYEV-SL
8     (SKIP&RET 1)


Disassembly of function POLYEV-SL
(CONST 0) = *QPR-SL*
(CONST 1) = *PR-SL*
(CONST 2) = 0
(CONST 3) = PVR
(CONST 4) = *QPI-SL*
(CONST 5) = *PI-SL*
(CONST 6) = PVI
(CONST 7) = 1
(CONST 8) = NN
(CONST 9) = SR
(CONST 10) = SI
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NN SI PVI SR PVR *PI-SL* *QPI-SL* *PR-SL* *QPR-SL*)
writes special variables : (PVI PVR)
69 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *QPR-SL*
2     (GETVALUE&PUSH 1)                   ; *PR-SL*
4     (CONST&PUSH 2)                      ; 0
5     (CALLSR&PUSH 1 1)                   ; AREF
8     (LOAD&PUSH 1)
9     (CONST&PUSH 2)                      ; 0
10    (LOAD&PUSH 2)
11    (CALLSR 1 2)                        ; SYSTEM::STORE
14    (SKIP 2)
16    (SETVALUE 3)                        ; PVR
18    (GETVALUE&PUSH 4)                   ; *QPI-SL*
20    (GETVALUE&PUSH 5)                   ; *PI-SL*
22    (CONST&PUSH 2)                      ; 0
23    (CALLSR&PUSH 1 1)                   ; AREF
26    (LOAD&PUSH 1)
27    (CONST&PUSH 2)                      ; 0
28    (LOAD&PUSH 2)
29    (CALLSR 1 2)                        ; SYSTEM::STORE
32    (SKIP 2)
34    (SETVALUE 6)                        ; PVI
36    (CONST&PUSH 7)                      ; 1
37    (NIL&PUSH)
38    (JMP L120)
41    L41
41    (GETVALUE&PUSH 1)                   ; *PR-SL*
43    (LOAD&PUSH 2)
44    (CALLSR&PUSH 1 1)                   ; AREF
47    (GETVALUE&PUSH 3)                   ; PVR
49    (GETVALUE&PUSH 9)                   ; SR
51    (CALLSR&PUSH 2 55)                  ; *
54    (CALLSR&PUSH 2 53)                  ; +
57    (GETVALUE&PUSH 6)                   ; PVI
59    (GETVALUE&PUSH 10)                  ; SI
61    (CALLSR&PUSH 2 55)                  ; *
64    (CALLSR&STORE 1 54 0)               ; -
68    (GETVALUE&PUSH 4)                   ; *QPI-SL*
70    (GETVALUE&PUSH 5)                   ; *PI-SL*
72    (LOAD&PUSH 3)
73    (CALLSR&PUSH 1 1)                   ; AREF
76    (GETVALUE&PUSH 3)                   ; PVR
78    (GETVALUE&PUSH 10)                  ; SI
80    (CALLSR&PUSH 2 55)                  ; *
83    (GETVALUE&PUSH 6)                   ; PVI
85    (GETVALUE&PUSH 9)                   ; SR
87    (CALLSR&PUSH 2 55)                  ; *
90    (CALLSR 3 53)                       ; +
93    (SETVALUE 6)                        ; PVI
95    (PUSH)
96    (LOAD&PUSH 1)
97    (LOAD&PUSH 4)
98    (LOAD&PUSH 2)
99    (CALLSR 1 2)                        ; SYSTEM::STORE
102   (SKIP 2)
104   (GETVALUE&PUSH 0)                   ; *QPR-SL*
106   (LOAD 1)
107   (SETVALUE 3)                        ; PVR
109   (PUSH)
110   (LOAD&PUSH 1)
111   (LOAD&PUSH 4)
112   (LOAD&PUSH 2)
113   (CALLSR 1 2)                        ; SYSTEM::STORE
116   (SKIP 2)
118   (LOAD&INC&STORE 1)
120   L120
120   (LOAD&PUSH 1)
121   (GETVALUE&PUSH 8)                   ; NN
123   (CALLSR&JMPIFNOT 1 48 L41)          ; >
128   (NIL)
129   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ERREV-SL (MS MP) ...)-24|
(CONST 0) = ERREV-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERREV-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERREV-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERREV-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERREV-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERREV-SL
8     (SKIP&RET 1)


Disassembly of function ERREV-SL
(CONST 0) = 0
(CONST 1) = *QPR-SL*
(CONST 2) = *QPI-SL*
(CONST 3) = CMOD-SL
(CONST 4) = MRE
(CONST 5) = ARE
(CONST 6) = QUOT
(CONST 7) = E
(CONST 8) = J
(CONST 9) = NN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NN E J ARE MRE *QPI-SL* *QPR-SL*)
writes special variables : (J E)
50 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0
1     (GETVALUE&PUSH 1)                   ; *QPR-SL*
3     (CONST&PUSH 0)                      ; 0
4     (CALLSR&PUSH 1 1)                   ; AREF
7     (GETVALUE&PUSH 2)                   ; *QPI-SL*
9     (CONST&PUSH 0)                      ; 0
10    (CALLSR&PUSH 1 1)                   ; AREF
13    (CALL2&PUSH 3)                      ; CMOD-SL
15    (GETVALUE&PUSH 4)                   ; MRE
17    (CALLSR&PUSH 2 55)                  ; *
20    (GETVALUE&PUSH 5)                   ; ARE
22    (GETVALUE&PUSH 4)                   ; MRE
24    (CALLSR&PUSH 2 53)                  ; +
27    (CALL2 6)                           ; QUOT
29    (BIND 7)                            ; E
31    (LOAD 3)
32    (BIND 8)                            ; J
34    (JMP L69)
36    L36
36    (GETVALUE&PUSH 1)                   ; *QPR-SL*
38    (GETVALUE&PUSH 8)                   ; J
40    (CALLSR&PUSH 1 1)                   ; AREF
43    (GETVALUE&PUSH 2)                   ; *QPI-SL*
45    (GETVALUE&PUSH 8)                   ; J
47    (CALLSR&PUSH 1 1)                   ; AREF
50    (CALL2&PUSH 3)                      ; CMOD-SL
52    (GETVALUE&PUSH 7)                   ; E
54    (LOAD&PUSH 11)
55    (CALLSR&PUSH 2 55)                  ; *
58    (CALLSR 2 53)                       ; +
61    (SETVALUE 7)                        ; E
63    (GETVALUE&PUSH 8)                   ; J
65    (CALLS2 150)                        ; 1+
67    (SETVALUE 8)                        ; J
69    L69
69    (GETVALUE&PUSH 8)                   ; J
71    (GETVALUE&PUSH 9)                   ; NN
73    (CALLSR&JMPIFNOT 1 48 L36)          ; >
77    (GETVALUE 7)                        ; E
79    (UNBIND 2)
81    (STORE 0)
82    (GETVALUE&PUSH 5)                   ; ARE
84    (GETVALUE&PUSH 4)                   ; MRE
86    (CALLSR&PUSH 2 53)                  ; +
89    (CALLSR&PUSH 2 55)                  ; *
92    (LOAD&PUSH 2)
93    (GETVALUE&PUSH 4)                   ; MRE
95    (CALLSR&PUSH 2 55)                  ; *
98    (CALLSR 1 54)                       ; -
101   (SKIP&RET 3)


Disassembly of function #:|(DEFUN CAUCHY-SL NIL ...)-25|
(CONST 0) = CAUCHY-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CAUCHY-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CAUCHY-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CAUCHY-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CAUCHY-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CAUCHY-SL
8     (SKIP&RET 1)


Disassembly of function CAUCHY-SL
(CONST 0) = *SHR-SL*
(CONST 1) = NN
(CONST 2) = 0
(CONST 3) = 1.0
(CONST 4) = QUOT
(CONST 5) = EXP
(CONST 6) = X
(CONST 7) = 0.0
(CONST 8) = N
(CONST 9) = F
(CONST 10) = 0.1
(CONST 11) = 1
(CONST 12) = 0.005
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (F X N NN *SHR-SL*)
writes special variables : (F X)
143 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *SHR-SL*
2     (GETVALUE&PUSH 1)                   ; NN
4     (CALLSR&PUSH 1 1)                   ; AREF
7     (PUSH-UNBOUND 1)
9     (CALLS2&PUSH 155)                   ; LOG
11    (GETVALUE&PUSH 0)                   ; *SHR-SL*
13    (CONST&PUSH 2)                      ; 0
14    (CALLSR&PUSH 1 1)                   ; AREF
17    (PUSH-UNBOUND 1)
19    (CALLS2&PUSH 155)                   ; LOG
21    (CALLSR&PUSH 1 54)                  ; -
24    (GETVALUE&PUSH 1)                   ; NN
26    (CONST&PUSH 3)                      ; 1.0
27    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
29    (CALL2&PUSH 4)                      ; QUOT
31    (CALL1 5)                           ; EXP
33    (BIND 6)                            ; X
35    (CONST&PUSH 7)                      ; 0.0
36    (GETVALUE&PUSH 0)                   ; *SHR-SL*
38    (GETVALUE&PUSH 1)                   ; NN
40    (GETVALUE&PUSH 0)                   ; *SHR-SL*
42    (GETVALUE&PUSH 1)                   ; NN
44    (CALLSR&PUSH 1 1)                   ; AREF
47    (CALLSR&PUSH 0 54)                  ; -
50    (LOAD&PUSH 2)
51    (LOAD&PUSH 2)
52    (LOAD&PUSH 2)
53    (CALLSR 1 2)                        ; SYSTEM::STORE
56    (SKIP 3)
58    (GETVALUE&PUSH 0)                   ; *SHR-SL*
60    (GETVALUE&PUSH 8)                   ; N
62    (CALLSR&PUSH 1 1)                   ; AREF
65    (CALLS2&JMPIF 145 L98)              ; ZEROP
68    (GETVALUE&PUSH 0)                   ; *SHR-SL*
70    (GETVALUE&PUSH 1)                   ; NN
72    (CALLSR&PUSH 1 1)                   ; AREF
75    (GETVALUE&PUSH 0)                   ; *SHR-SL*
77    (GETVALUE&PUSH 8)                   ; N
79    (CALLSR&PUSH 1 1)                   ; AREF
82    (CALL2&PUSH 4)                      ; QUOT
84    (CALLSR&STORE 0 54 0)               ; -
88    (GETVALUE&PUSH 6)                   ; X
90    (LOAD&PUSH 1)
91    (CALLSR&JMPIFNOT 1 48 L98)          ; >
95    (LOAD 0)
96    (SETVALUE 6)                        ; X
98    L98
98    (NIL)
99    (BIND 9)                            ; F
101   L101
101   (CONST&PUSH 10)                     ; 0.1
102   (GETVALUE&PUSH 6)                   ; X
104   (CALLSR&STORE 2 55 3)               ; *
108   (GETVALUE&PUSH 0)                   ; *SHR-SL*
110   (CONST&PUSH 2)                      ; 0
111   (CALLSR 1 1)                        ; AREF
114   (SETVALUE 9)                        ; F
116   (CONST&PUSH 11)                     ; 1
117   (JMP L143)
119   L119
119   (LOAD 3)
120   (SETVALUE 6)                        ; X
122   (JMP L101)
124   L124
124   (GETVALUE&PUSH 0)                   ; *SHR-SL*
126   (LOAD&PUSH 1)
127   (CALLSR&PUSH 1 1)                   ; AREF
130   (GETVALUE&PUSH 9)                   ; F
132   (LOAD&PUSH 6)
133   (CALLSR&PUSH 2 55)                  ; *
136   (CALLSR 2 53)                       ; +
139   (SETVALUE 9)                        ; F
141   (LOAD&INC&STORE 0)
143   L143
143   (LOAD&PUSH 0)
144   (GETVALUE&PUSH 1)                   ; NN
146   (CALLSR&JMPIFNOT 1 48 L124)         ; >
150   (SKIP 1)
152   (CONST&PUSH 7)                      ; 0.0
153   (GETVALUE&PUSH 9)                   ; F
155   (CALLSR&JMPIF 1 47 L119)            ; <
159   (UNBIND1)
160   (GETVALUE&PUSH 6)                   ; X
162   (NIL&PUSH)
163   (NIL)
164   (BIND 9)                            ; F
166   (JMP L254)
169   L169
169   (GETVALUE&PUSH 0)                   ; *SHR-SL*
171   (CONST&PUSH 2)                      ; 0
172   (CALLSR 1 1)                        ; AREF
175   (SETVALUE 9)                        ; F
177   (STORE 3)
178   (CONST&PUSH 11)                     ; 1
179   (JMP L213)
181   L181
181   (GETVALUE&PUSH 9)                   ; F
183   (GETVALUE&PUSH 6)                   ; X
185   (CALLSR&PUSH 2 55)                  ; *
188   (GETVALUE&PUSH 0)                   ; *SHR-SL*
190   (LOAD&PUSH 2)
191   (CALLSR&PUSH 1 1)                   ; AREF
194   (CALLSR 2 53)                       ; +
197   (SETVALUE 9)                        ; F
199   (LOAD&PUSH 4)
200   (GETVALUE&PUSH 6)                   ; X
202   (CALLSR&PUSH 2 55)                  ; *
205   (GETVALUE&PUSH 9)                   ; F
207   (CALLSR&STORE 2 53 4)               ; +
211   (LOAD&INC&STORE 0)
213   L213
213   (LOAD&PUSH 0)
214   (GETVALUE&PUSH 8)                   ; N
216   (CALLSR&JMPIFNOT 1 48 L181)         ; >
220   (SKIP 1)
222   (GETVALUE&PUSH 9)                   ; F
224   (GETVALUE&PUSH 6)                   ; X
226   (CALLSR&PUSH 2 55)                  ; *
229   (GETVALUE&PUSH 0)                   ; *SHR-SL*
231   (GETVALUE&PUSH 1)                   ; NN
233   (CALLSR&PUSH 1 1)                   ; AREF
236   (CALLSR 2 53)                       ; +
239   (SETVALUE 9)                        ; F
241   (PUSH)
242   (LOAD&PUSH 4)
243   (CALL2 4)                           ; QUOT
245   (STORE 4)
246   (GETVALUE&PUSH 6)                   ; X
248   (LOAD&PUSH 5)
249   (CALLSR 1 54)                       ; -
252   (SETVALUE 6)                        ; X
254   L254
254   (CONST&PUSH 12)                     ; 0.005
255   (LOAD&PUSH 5)
256   (GETVALUE&PUSH 6)                   ; X
258   (CALL2&PUSH 4)                      ; QUOT
260   (CALLS2&PUSH 158)                   ; ABS
262   (CALLSR&JMPIFNOT 1 48 L169)         ; >
267   (GETVALUE 6)                        ; X
269   (UNBIND1)
270   (SKIP 3)
272   (UNBIND1)
273   (SKIP&RET 1)


Disassembly of function #:|(DEFUN SCALE-SL NIL ...)-26|
(CONST 0) = SCALE-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCALE-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCALE-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCALE-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCALE-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCALE-SL
8     (SKIP&RET 1)


Disassembly of function SCALE-SL
(CONST 0) = 0
(CONST 1) = J
(CONST 2) = 0.0
(CONST 3) = X
(CONST 4) = NN
(CONST 5) = *SHR-SL*
(CONST 6) = 1.0
(CONST 7) = QUOT
(CONST 8) = 0.5
(CONST 9) = LOGBAS
(CONST 10) = FIX
(CONST 11) = POLYSC1
(CONST 12) = POLYSC
(CONST 13) = *PR-SL*
(CONST 14) = _F
(CONST 15) = *PI-SL*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*PI-SL* *PR-SL* POLYSC POLYSC1 LOGBAS NN X *SHR-SL* J)
writes special variables : (POLYSC POLYSC1 X J)
124 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0
1     (CONST 0)                           ; 0
2     (BIND 1)                            ; J
4     (CONST 2)                           ; 0.0
5     (BIND 3)                            ; X
7     (CONST&PUSH 2)                      ; 0.0
8     (JMP L46)
10    L10
10    (GETVALUE&PUSH 1)                   ; J
12    (CALLS2 150)                        ; 1+
14    (SETVALUE 1)                        ; J
16    (JMP L44)
18    L18
18    (GETVALUE&PUSH 5)                   ; *SHR-SL*
20    (LOAD&PUSH 8)
21    (CALLSR&PUSH 1 1)                   ; AREF
24    (CALLS2&JMPIF 145 L10)              ; ZEROP
27    (GETVALUE&PUSH 3)                   ; X
29    (GETVALUE&PUSH 5)                   ; *SHR-SL*
31    (LOAD&PUSH 9)
32    (CALLSR&PUSH 1 1)                   ; AREF
35    (PUSH-UNBOUND 1)
37    (CALLS2&PUSH 155)                   ; LOG
39    (CALLSR 2 53)                       ; +
42    (SETVALUE 3)                        ; X
44    L44
44    (LOAD&INC&STORE 7)
46    L46
46    (LOAD&PUSH 7)
47    (GETVALUE&PUSH 4)                   ; NN
49    (CALLSR&JMPIFNOT 1 48 L18)          ; >
53    (GETVALUE&PUSH 3)                   ; X
55    (GETVALUE&PUSH 4)                   ; NN
57    (CALLS2&PUSH 150)                   ; 1+
59    (GETVALUE&PUSH 1)                   ; J
61    (CALLSR&PUSH 1 54)                  ; -
64    (CONST&PUSH 6)                      ; 1.0
65    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
67    (CALL2 7)                           ; QUOT
69    (SETVALUE 3)                        ; X
71    (GETVALUE&PUSH 5)                   ; *SHR-SL*
73    (GETVALUE&PUSH 4)                   ; NN
75    (CALLSR&PUSH 1 1)                   ; AREF
78    (PUSH-UNBOUND 1)
80    (CALLS2&PUSH 155)                   ; LOG
82    (GETVALUE&PUSH 5)                   ; *SHR-SL*
84    (CONST&PUSH 0)                      ; 0
85    (CALLSR&PUSH 1 1)                   ; AREF
88    (PUSH-UNBOUND 1)
90    (CALLS2&PUSH 155)                   ; LOG
92    (CALLSR&PUSH 1 54)                  ; -
95    (GETVALUE&PUSH 4)                   ; NN
97    (CONST&PUSH 6)                      ; 1.0
98    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
100   (CALL2 7)                           ; QUOT
102   (STORE 0)
103   (CONST&PUSH 8)                      ; 0.5
104   (LOAD&PUSH 1)
105   (GETVALUE&PUSH 9)                   ; LOGBAS
107   (CALL2&PUSH 7)                      ; QUOT
109   (CALLSR&PUSH 2 53)                  ; +
112   (CALL1 10)                          ; FIX
114   (SETVALUE 11)                       ; POLYSC1
116   (GETVALUE&PUSH 3)                   ; X
118   (GETVALUE&PUSH 11)                  ; POLYSC1
120   (GETVALUE&PUSH 4)                   ; NN
122   (CALLSR&PUSH 2 55)                  ; *
125   (CONST&PUSH 6)                      ; 1.0
126   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
128   (GETVALUE&PUSH 9)                   ; LOGBAS
130   (CONST&PUSH 8)                      ; 0.5
131   (CALLSR&PUSH 3 55)                  ; *
134   (CALLSR 2 53)                       ; +
137   (SETVALUE 3)                        ; X
139   (CONST&PUSH 8)                      ; 0.5
140   (GETVALUE&PUSH 3)                   ; X
142   (GETVALUE&PUSH 9)                   ; LOGBAS
144   (CALL2&PUSH 7)                      ; QUOT
146   (CALLSR&PUSH 2 53)                  ; +
149   (CALL1 10)                          ; FIX
151   (SETVALUE 12)                       ; POLYSC
153   (SKIP 1)
155   (UNBIND 2)
157   (SKIP 1)
159   (GETVALUE&PUSH 4)                   ; NN
161   (GETVALUE&PUSH 12)                  ; POLYSC
163   (CALLSR 0 54)                       ; -
166   (BIND 1)                            ; J
168   (JMP L221)
170   L170
170   (GETVALUE&PUSH 13)                  ; *PR-SL*
172   (GETVALUE&PUSH 13)                  ; *PR-SL*
174   (LOAD&PUSH 5)
175   (CALLSR&PUSH 1 1)                   ; AREF
178   (GETVALUE&PUSH 1)                   ; J
180   (CALL2&PUSH 14)                     ; _F
182   (LOAD&PUSH 1)
183   (LOAD&PUSH 6)
184   (LOAD&PUSH 2)
185   (CALLSR 1 2)                        ; SYSTEM::STORE
188   (SKIP 2)
190   (GETVALUE&PUSH 15)                  ; *PI-SL*
192   (GETVALUE&PUSH 15)                  ; *PI-SL*
194   (LOAD&PUSH 5)
195   (CALLSR&PUSH 1 1)                   ; AREF
198   (GETVALUE&PUSH 1)                   ; J
200   (CALL2&PUSH 14)                     ; _F
202   (LOAD&PUSH 1)
203   (LOAD&PUSH 6)
204   (LOAD&PUSH 2)
205   (CALLSR 1 2)                        ; SYSTEM::STORE
208   (SKIP 2)
210   (LOAD&DEC&STORE 3)
212   (GETVALUE&PUSH 1)                   ; J
214   (GETVALUE&PUSH 11)                  ; POLYSC1
216   (CALLSR 2 53)                       ; +
219   (SETVALUE 1)                        ; J
221   L221
221   (LOAD&PUSH 3)
222   (CONST&PUSH 0)                      ; 0
223   (CALLSR&JMPIFNOT 1 47 L170)         ; <
227   (NIL)
228   (UNBIND1)
229   (SKIP&RET 2)


Disassembly of function #:|(DEFUN CDIVID-SL (AR AI BR ...) ...)-27|
(CONST 0) = CDIVID-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CDIVID-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CDIVID-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CDIVID-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CDIVID-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CDIVID-SL
8     (SKIP&RET 1)


Disassembly of function CDIVID-SL
(CONST 0) = 0.0
(CONST 1) = INFIN
(CONST 2) = CI
(CONST 3) = CR
(CONST 4) = QUOT
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (INFIN)
writes special variables : (CI CR)
73 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0.0
1     (LOAD&PUSH 3)
2     (CALLS2&JMPIFNOT 145 L9)            ; ZEROP
5     (LOAD&PUSH 2)
6     (CALLS2&JMPIF 145 L72)              ; ZEROP
9     L9
9     (LOAD&PUSH 2)
10    (CALLS2&PUSH 158)                   ; ABS
12    (LOAD&PUSH 4)
13    (CALLS2&PUSH 158)                   ; ABS
15    (CALLSR&JMPIF 1 48 L80)             ; >
19    (LOAD&PUSH 2)
20    (LOAD&PUSH 4)
21    (CALL2 4)                           ; QUOT
23    (STORE 0)
24    (LOAD&PUSH 3)
25    (LOAD&PUSH 3)
26    (LOAD&PUSH 2)
27    (CALLSR&PUSH 2 55)                  ; *
30    (CALLSR&STORE 2 53 2)               ; +
34    (LOAD&PUSH 5)
35    (LOAD&PUSH 5)
36    (LOAD&PUSH 2)
37    (CALLSR&PUSH 2 55)                  ; *
40    (CALLSR&STORE 2 53 3)               ; +
44    (PUSH)
45    (LOAD&PUSH 3)
46    (CALL2 4)                           ; QUOT
48    (SETVALUE 3)                        ; CR
50    (LOAD&PUSH 4)
51    (LOAD&PUSH 6)
52    (LOAD&PUSH 2)
53    (CALLSR 2 55)                       ; *
56    L56
56    (PUSH)
57    (CALLSR&STORE 1 54 3)               ; -
61    (PUSH)
62    (LOAD&PUSH 3)
63    (CALL2 4)                           ; QUOT
65    (SETVALUE 2)                        ; CI
67    L67
67    (SKIP 1)
69    (NIL)
70    (SKIP&RET 5)
72    L72
72    (GETVALUE 1)                        ; INFIN
74    (SETVALUE 2)                        ; CI
76    (SETVALUE 3)                        ; CR
78    (JMP L67)
80    L80
80    (LOAD&PUSH 3)
81    (LOAD&PUSH 3)
82    (CALL2 4)                           ; QUOT
84    (STORE 0)
85    (LOAD&PUSH 2)
86    (LOAD&PUSH 4)
87    (LOAD&PUSH 2)
88    (CALLSR&PUSH 2 55)                  ; *
91    (CALLSR&STORE 2 53 2)               ; +
95    (LOAD&PUSH 4)
96    (LOAD&PUSH 6)
97    (LOAD&PUSH 2)
98    (CALLSR&PUSH 2 55)                  ; *
101   (CALLSR&STORE 2 53 3)               ; +
105   (PUSH)
106   (LOAD&PUSH 3)
107   (CALL2 4)                           ; QUOT
109   (SETVALUE 3)                        ; CR
111   (LOAD&PUSH 4)
112   (LOAD&PUSH 1)
113   (CALLSR&PUSH 2 55)                  ; *
116   (LOAD 6)
117   (JMP L56)


Disassembly of function #:|(DEFUN CMOD-SL (AR AI) ...)-28|
(CONST 0) = CMOD-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CMOD-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CMOD-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CMOD-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CMOD-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CMOD-SL
8     (SKIP&RET 1)


Disassembly of function CMOD-SL
(CONST 0) = QUOT
(CONST 1) = 1.41421357
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
42 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&STORE 158 2)                ; ABS
4     (LOAD&PUSH 1)
5     (CALLS2&STORE 158 1)                ; ABS
8     (PUSH)
9     (LOAD&PUSH 3)
10    (CALLSR&JMPIF 1 48 L41)             ; >
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 2)
16    (CALLSR&JMPIFNOT 1 48 L51)          ; >
20    (LOAD&PUSH 1)
21    (LOAD&PUSH 3)
22    (CALL2 0)                           ; QUOT
24    (STORE 1)
25    (LOAD&PUSH 2)
26    (LOAD&PUSH 2)
27    (LOAD 3)
28    L28
28    (PUSH)
29    (CALLSR&PUSH 2 55)                  ; *
32    (CALLS2&PUSH 150)                   ; 1+
34    (CALLS2&PUSH 156)                   ; SQRT
36    (CALLSR 2 55)                       ; *
39    (SKIP&RET 3)
41    L41
41    (LOAD&PUSH 2)
42    (LOAD&PUSH 2)
43    (CALL2 0)                           ; QUOT
45    (STORE 2)
46    (LOAD&PUSH 1)
47    (LOAD&PUSH 3)
48    (LOAD 4)
49    (JMP L28)
51    L51
51    (CONST&PUSH 1)                      ; 1.41421357
52    (LOAD&PUSH 3)
53    (CALLSR 2 55)                       ; *
56    (JMPIF1 L61)
58    (NIL)
59    (SKIP&RET 3)
61    L61
61    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (SPECIAL SR U ...) (FLONUM A A0 ...) ...)-29|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (FIXNUM #) (NOTYPE # # ...))-30|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ ARP-SL 1.0)-31|
(CONST 0) = 1.0
(CONST 1) = ARP-SL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (ARP-SL)
3 byte-code instructions:
0     (CONST 0)                           ; 1.0
1     (SETVALUE 1)                        ; ARP-SL
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN RPOLY-SL (DEGREE) ...)-32|
(CONST 0) = RPOLY-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RPOLY-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RPOLY-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RPOLY-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RPOLY-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RPOLY-SL
8     (SKIP&RET 1)


Disassembly of function RPOLY-SL
(CONST 0) = DEGREE
(CONST 1) = 2.0
(CONST 2) = 0.0
(CONST 3) = ARP-SL
(CONST 4) = MAXIMA-FLOAT-PRECISION
(CONST 5) = ARE
(CONST 6) = MRE
(CONST 7) = 0.70710677
(CONST 8) = YY
(CONST 9) = AA
(CONST 10) = SR
(CONST 11) = U
(CONST 12) = V
(CONST 13) = SZR
(CONST 14) = SZI
(CONST 15) = LZR
(CONST 16) = LZI
(CONST 17) = 0
(CONST 18) = NZ
(CONST 19) = N
(CONST 20) = POLYSC
(CONST 21) = POLYSC1
(CONST 22) = LOGBAS
(CONST 23) = INFIN
(CONST 24) = SMALNO
(CONST 25) = *PR-SL*
(CONST 26) = NN
(CONST 27) = *SHR-SL*
(CONST 28) = SCALE-SL
(CONST 29) = 3
(CONST 30) = CAUCHY-SL
(CONST 31) = 1
(CONST 32) = *HR-SL*
(CONST 33) = 1.0
(CONST 34) = QUOT
(CONST 35) = 5
(CONST 36) = J
(CONST 37) = 10.0
(CONST 38) = *SHI-SL*
(CONST 39) = CNT
(CONST 40) = 20
(CONST 41) = -0.069756474
(CONST 42) = 0.99756405
(CONST 43) = -2.0
(CONST 44) = FXSHFR-SL
(CONST 45) = *PI-SL*
(CONST 46) = 2
(CONST 47) = $POLYFACTOR
(CONST 48) = *QPR-SL*
(CONST 49) = QUAD-SL
(CONST 50) = _F
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(POLYSC POLYSC1 CNT SR YY *QPR-SL* U V $POLYFACTOR LZI LZR NZ SZI *PI-SL* SZR
 *SHI-SL* AA J N *HR-SL* *SHR-SL* NN *PR-SL* DEGREE ARE ARP-SL)
writes special variables : (CNT V U SR J AA DEGREE N NN YY MRE)
665 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; DEGREE
3     (CONST&PUSH 1)                      ; 2.0
4     (PUSH-UNBOUND 1)
6     (CALLS2&PUSH 155)                   ; LOG
8     (CONST&PUSH 2)                      ; 0.0
9     (CONST&PUSH 2)                      ; 0.0
10    (GETVALUE&PUSH 3)                   ; ARP-SL
12    (CALL1 4)                           ; MAXIMA-FLOAT-PRECISION
14    (BIND 5)                            ; ARE
16    (CONST 2)                           ; 0.0
17    (BIND 6)                            ; MRE
19    (CONST&PUSH 7)                      ; 0.70710677
20    (CONST 2)                           ; 0.0
21    (BIND 8)                            ; YY
23    (CONST 2)                           ; 0.0
24    (BIND 9)                            ; AA
26    (CONST&PUSH 2)                      ; 0.0
27    (CONST&PUSH 2)                      ; 0.0
28    (CONST&PUSH 2)                      ; 0.0
29    (CONST 2)                           ; 0.0
30    (BIND 10)                           ; SR
32    (CONST 2)                           ; 0.0
33    (BIND 11)                           ; U
35    (CONST 2)                           ; 0.0
36    (BIND 12)                           ; V
38    (CONST&PUSH 2)                      ; 0.0
39    (CONST 2)                           ; 0.0
40    (BIND 13)                           ; SZR
42    (CONST 2)                           ; 0.0
43    (BIND 14)                           ; SZI
45    (CONST 2)                           ; 0.0
46    (BIND 15)                           ; LZR
48    (CONST 2)                           ; 0.0
49    (BIND 16)                           ; LZI
51    (CONST 17)                          ; 0
52    (BIND 18)                           ; NZ
54    (CONST 17)                          ; 0
55    (BIND 19)                           ; N
57    (CONST 17)                          ; 0
58    (BIND 20)                           ; POLYSC
60    (CONST 17)                          ; 0
61    (BIND 21)                           ; POLYSC1
63    (CONST&PUSH 17)                     ; 0
64    (T&PUSH)
65    (LOAD 54)
67    (BIND 22)                           ; LOGBAS
69    (LOAD 56)
71    (BIND 23)                           ; INFIN
73    (LOAD 58)
75    (BIND 24)                           ; SMALNO
77    (GETVALUE 5)                        ; ARE
79    (SETVALUE 6)                        ; MRE
81    (LOAD&PUSH 54)
83    (CALLSR 0 54)                       ; -
86    (SETVALUE 8)                        ; YY
88    (GETVALUE&PUSH 0)                   ; DEGREE
90    (JMP L94)
92    L92
92    (LOAD&DEC&STORE 0)
94    L94
94    (GETVALUE&PUSH 25)                  ; *PR-SL*
96    (LOAD&PUSH 1)
97    (CALLSR&PUSH 1 1)                   ; AREF
100   (CALLS2&JMPIF 145 L92)              ; ZEROP
103   (LOAD 0)
104   (SETVALUE 26)                       ; NN
106   (PUSH)
107   (CALLS2 151)                        ; 1-
109   (SETVALUE 19)                       ; N
111   (SKIP 1)
113   (GETVALUE 26)                       ; NN
115   (SETVALUE 0)                        ; DEGREE
117   (CONST&PUSH 17)                     ; 0
118   (JMP L904)
121   L121
121   (CONST&PUSH 17)                     ; 0
122   (JMP L144)
124   L124
124   (GETVALUE&PUSH 27)                  ; *SHR-SL*
126   (GETVALUE&PUSH 25)                  ; *PR-SL*
128   (LOAD&PUSH 2)
129   (CALLSR&PUSH 1 1)                   ; AREF
132   (CALLS2&PUSH 158)                   ; ABS
134   (LOAD&PUSH 1)
135   (LOAD&PUSH 3)
136   (LOAD&PUSH 2)
137   (CALLSR 1 2)                        ; SYSTEM::STORE
140   (SKIP 2)
142   (LOAD&INC&STORE 0)
144   L144
144   (LOAD&PUSH 0)
145   (GETVALUE&PUSH 26)                  ; NN
147   (CALLSR&JMPIFNOT 1 48 L124)         ; >
151   (SKIP 1)
153   (CALL0 30)                          ; CAUCHY-SL
155   (STORE 45)
157   (CONST&PUSH 31)                     ; 1
159   (JMP L200)
161   L161
161   (GETVALUE&PUSH 32)                  ; *HR-SL*
163   (GETVALUE&PUSH 19)                  ; N
165   (LOAD&PUSH 2)
166   (CALLSR&PUSH 1 54)                  ; -
169   (CONST&PUSH 33)                     ; 1.0
171   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
173   (GETVALUE&PUSH 25)                  ; *PR-SL*
175   (LOAD&PUSH 3)
176   (CALLSR&PUSH 1 1)                   ; AREF
179   (CALLSR&PUSH 2 55)                  ; *
182   (GETVALUE&PUSH 19)                  ; N
184   (CONST&PUSH 33)                     ; 1.0
186   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
188   (CALL2&PUSH 34)                     ; QUOT
190   (LOAD&PUSH 1)
191   (LOAD&PUSH 3)
192   (LOAD&PUSH 2)
193   (CALLSR 1 2)                        ; SYSTEM::STORE
196   (SKIP 2)
198   (LOAD&INC&STORE 0)
200   L200
200   (LOAD&PUSH 0)
201   (GETVALUE&PUSH 19)                  ; N
203   (CALLSR&JMPIFNOT 1 48 L161)         ; >
207   (SKIP 1)
209   (GETVALUE&PUSH 32)                  ; *HR-SL*
211   (GETVALUE&PUSH 25)                  ; *PR-SL*
213   (CONST&PUSH 17)                     ; 0
214   (CALLSR&PUSH 1 1)                   ; AREF
217   (LOAD&PUSH 1)
218   (CONST&PUSH 17)                     ; 0
219   (LOAD&PUSH 2)
220   (CALLSR 1 2)                        ; SYSTEM::STORE
223   (SKIP 2)
225   (GETVALUE&PUSH 25)                  ; *PR-SL*
227   (GETVALUE&PUSH 26)                  ; NN
229   (CALLSR 1 1)                        ; AREF
232   (SETVALUE 9)                        ; AA
234   (GETVALUE&PUSH 25)                  ; *PR-SL*
236   (GETVALUE&PUSH 19)                  ; N
238   (CALLSR&STORE 1 1 46)               ; AREF
242   (GETVALUE&PUSH 32)                  ; *HR-SL*
244   (GETVALUE&PUSH 19)                  ; N
246   (CALLSR&PUSH 1 1)                   ; AREF
249   (CALLS2&STORE 145 10)               ; ZEROP
252   (CONST&PUSH 31)                     ; 1
254   (JMP L445)
257   L257
257   (GETVALUE 19)                       ; N
259   (BIND 36)                           ; J
261   (JMP L290)
263   L263
263   (GETVALUE&PUSH 32)                  ; *HR-SL*
265   (GETVALUE&PUSH 36)                  ; J
267   (GETVALUE&PUSH 32)                  ; *HR-SL*
269   (GETVALUE&PUSH 36)                  ; J
271   (CALLS2&PUSH 151)                   ; 1-
273   (CALLSR&PUSH 1 1)                   ; AREF
276   (LOAD&PUSH 2)
277   (LOAD&PUSH 2)
278   (LOAD&PUSH 2)
279   (CALLSR 1 2)                        ; SYSTEM::STORE
282   (SKIP 3)
284   (GETVALUE&PUSH 36)                  ; J
286   (CALLS2 151)                        ; 1-
288   (SETVALUE 36)                       ; J
290   L290
290   (GETVALUE&PUSH 36)                  ; J
292   (CONST&PUSH 31)                     ; 1
294   (CALLSR&JMPIFNOT 1 47 L263)         ; <
298   (UNBIND1)
299   (GETVALUE&PUSH 32)                  ; *HR-SL*
301   (LOAD&PUSH 0)
302   (CONST&PUSH 17)                     ; 0
303   (CONST&PUSH 2)                      ; 0.0
304   (CALLSR 1 2)                        ; SYSTEM::STORE
307   (SKIP 1)
309   (GETVALUE&PUSH 32)                  ; *HR-SL*
311   (GETVALUE&PUSH 19)                  ; N
313   (CALLSR&PUSH 1 1)                   ; AREF
316   (CALLS2&STORE 145 11)               ; ZEROP
319   (JMP L443)
322   L322
322   (GETVALUE&PUSH 32)                  ; *HR-SL*
324   (GETVALUE&PUSH 19)                  ; N
326   (CALLSR&STORE 1 1 48)               ; AREF
330   (LOAD&JMPIF 11 L257)
334   (GETVALUE&PUSH 9)                   ; AA
336   (LOAD&PUSH 49)
338   (CALL2&PUSH 34)                     ; QUOT
340   (CALLSR&STORE 0 54 36)              ; -
344   (GETVALUE 19)                       ; N
346   (BIND 36)                           ; J
348   (JMP L392)
350   L350
350   (GETVALUE&PUSH 32)                  ; *HR-SL*
352   (GETVALUE&PUSH 36)                  ; J
354   (LOAD&PUSH 41)
356   (GETVALUE&PUSH 32)                  ; *HR-SL*
358   (GETVALUE&PUSH 36)                  ; J
360   (CALLS2&PUSH 151)                   ; 1-
362   (CALLSR&PUSH 1 1)                   ; AREF
365   (CALLSR&PUSH 2 55)                  ; *
368   (GETVALUE&PUSH 25)                  ; *PR-SL*
370   (GETVALUE&PUSH 36)                  ; J
372   (CALLSR&PUSH 1 1)                   ; AREF
375   (CALLSR&PUSH 2 53)                  ; +
378   (LOAD&PUSH 2)
379   (LOAD&PUSH 2)
380   (LOAD&PUSH 2)
381   (CALLSR 1 2)                        ; SYSTEM::STORE
384   (SKIP 3)
386   (GETVALUE&PUSH 36)                  ; J
388   (CALLS2 151)                        ; 1-
390   (SETVALUE 36)                       ; J
392   L392
392   (GETVALUE&PUSH 36)                  ; J
394   (CONST&PUSH 31)                     ; 1
396   (CALLSR&JMPIFNOT 1 47 L350)         ; <
400   (UNBIND1)
401   (GETVALUE&PUSH 32)                  ; *HR-SL*
403   (GETVALUE&PUSH 25)                  ; *PR-SL*
405   (CONST&PUSH 17)                     ; 0
406   (CALLSR&PUSH 1 1)                   ; AREF
409   (LOAD&PUSH 1)
410   (CONST&PUSH 17)                     ; 0
411   (LOAD&PUSH 2)
412   (CALLSR 1 2)                        ; SYSTEM::STORE
415   (SKIP 2)
417   (GETVALUE&PUSH 32)                  ; *HR-SL*
419   (GETVALUE&PUSH 19)                  ; N
421   (CALLSR&PUSH 1 1)                   ; AREF
424   (CALLS2&PUSH 158)                   ; ABS
426   (LOAD&PUSH 48)
428   (CALLS2&PUSH 158)                   ; ABS
430   (GETVALUE&PUSH 5)                   ; ARE
432   (CONST&PUSH 37)                     ; 10.0
434   (CALLSR&PUSH 3 55)                  ; *
437   (CALLSR 1 48)                       ; >
440   (NOT)
441   (STORE 11)
443   L443
443   (LOAD&INC&STORE 0)
445   L445
445   (LOAD&PUSH 0)
446   (CONST&PUSH 35)                     ; 5
448   (CALLSR&JMPIFNOT 1 48 L322)         ; >
453   (SKIP 1)
455   (CONST&PUSH 17)                     ; 0
456   (JMP L476)
458   L458
458   (GETVALUE&PUSH 38)                  ; *SHI-SL*
460   (GETVALUE&PUSH 32)                  ; *HR-SL*
462   (LOAD&PUSH 2)
463   (CALLSR&PUSH 1 1)                   ; AREF
466   (LOAD&PUSH 1)
467   (LOAD&PUSH 3)
468   (LOAD&PUSH 2)
469   (CALLSR 1 2)                        ; SYSTEM::STORE
472   (SKIP 2)
474   (LOAD&INC&STORE 0)
476   L476
476   (LOAD&PUSH 0)
477   (GETVALUE&PUSH 19)                  ; N
479   (CALLSR&JMPIFNOT 1 48 L458)         ; >
483   (SKIP 1)
485   (CONST 31)                          ; 1
487   (BIND 39)                           ; CNT
489   (JMP L1078)
492   L492
492   (GETVALUE&PUSH 25)                  ; *PR-SL*
494   (GETVALUE&PUSH 26)                  ; NN
496   (GETVALUE&PUSH 13)                  ; SZR
498   (LOAD&PUSH 2)
499   (LOAD&PUSH 2)
500   (LOAD&PUSH 2)
501   (CALLSR 1 2)                        ; SYSTEM::STORE
504   (SKIP 3)
506   (GETVALUE&PUSH 45)                  ; *PI-SL*
508   (GETVALUE&PUSH 26)                  ; NN
510   (GETVALUE&PUSH 14)                  ; SZI
512   (LOAD&PUSH 2)
513   (LOAD&PUSH 2)
514   (LOAD&PUSH 2)
515   (CALLSR 1 2)                        ; SYSTEM::STORE
518   (SKIP 3)
520   (GETVALUE&PUSH 18)                  ; NZ
522   (CONST&PUSH 46)                     ; 2
524   (CALLSR&JMPIFNOT 1 45 L607)         ; =
529   (GETVALUE&PUSH 25)                  ; *PR-SL*
531   (GETVALUE&PUSH 19)                  ; N
533   (GETVALUE&PUSH 15)                  ; LZR
535   (LOAD&PUSH 2)
536   (LOAD&PUSH 2)
537   (LOAD&PUSH 2)
538   (CALLSR 1 2)                        ; SYSTEM::STORE
541   (SKIP 3)
543   (GETVALUE&PUSH 45)                  ; *PI-SL*
545   (GETVALUE&PUSH 19)                  ; N
547   (GETVALUE&PUSH 16)                  ; LZI
549   (LOAD&PUSH 2)
550   (LOAD&PUSH 2)
551   (LOAD&PUSH 2)
552   (CALLSR 1 2)                        ; SYSTEM::STORE
555   (SKIP 3)
557   (GETVALUE 47)                       ; $POLYFACTOR
559   (JMPIFNOT L607)
561   (GETVALUE&PUSH 14)                  ; SZI
563   (CALLS2&JMPIF 145 L607)             ; ZEROP
566   (GETVALUE&PUSH 25)                  ; *PR-SL*
568   (GETVALUE&PUSH 26)                  ; NN
570   (GETVALUE&PUSH 12)                  ; V
572   (LOAD&PUSH 2)
573   (LOAD&PUSH 2)
574   (LOAD&PUSH 2)
575   (CALLSR 1 2)                        ; SYSTEM::STORE
578   (SKIP 3)
580   (GETVALUE&PUSH 25)                  ; *PR-SL*
582   (GETVALUE&PUSH 19)                  ; N
584   (GETVALUE&PUSH 11)                  ; U
586   (LOAD&PUSH 2)
587   (LOAD&PUSH 2)
588   (LOAD&PUSH 2)
589   (CALLSR 1 2)                        ; SYSTEM::STORE
592   (SKIP 3)
594   (GETVALUE&PUSH 45)                  ; *PI-SL*
596   (GETVALUE&PUSH 26)                  ; NN
598   (LOAD&PUSH 1)
599   (LOAD&PUSH 1)
600   (CONST&PUSH 33)                     ; 1.0
602   (CALLSR 1 2)                        ; SYSTEM::STORE
605   (SKIP 2)
607   L607
607   (GETVALUE&PUSH 26)                  ; NN
609   (GETVALUE&PUSH 18)                  ; NZ
611   (CALLSR 1 54)                       ; -
614   (SETVALUE 26)                       ; NN
616   (PUSH)
617   (CALLS2 151)                        ; 1-
619   (SETVALUE 19)                       ; N
621   (CONST&PUSH 17)                     ; 0
622   (JMP L642)
624   L624
624   (GETVALUE&PUSH 25)                  ; *PR-SL*
626   (GETVALUE&PUSH 48)                  ; *QPR-SL*
628   (LOAD&PUSH 2)
629   (CALLSR&PUSH 1 1)                   ; AREF
632   (LOAD&PUSH 1)
633   (LOAD&PUSH 3)
634   (LOAD&PUSH 2)
635   (CALLSR 1 2)                        ; SYSTEM::STORE
638   (SKIP 2)
640   (LOAD&INC&STORE 0)
642   L642
642   (LOAD&PUSH 0)
643   (GETVALUE&PUSH 26)                  ; NN
645   (CALLSR&JMPIFNOT 1 48 L624)         ; >
649   (SKIP 1)
651   (JMP L1089)
654   L654
654   (CONST&PUSH 41)                     ; -0.069756474
656   (LOAD&PUSH 58)
658   (CALLSR&PUSH 2 55)                  ; *
661   (CONST&PUSH 42)                     ; 0.99756405
663   (GETVALUE&PUSH 8)                   ; YY
665   (CALLSR&PUSH 2 55)                  ; *
668   (CALLSR&PUSH 1 54)                  ; -
671   (CONST&PUSH 42)                     ; 0.99756405
673   (LOAD&PUSH 59)
675   (CALLSR&PUSH 2 55)                  ; *
678   (CONST&PUSH 41)                     ; -0.069756474
680   (GETVALUE&PUSH 8)                   ; YY
682   (CALLSR&PUSH 2 55)                  ; *
685   (CALLSR 2 53)                       ; +
688   (SETVALUE 8)                        ; YY
690   (POP&STORE 57)
692   (LOAD&PUSH 48)
694   (LOAD&PUSH 58)
696   (CALLSR 2 55)                       ; *
699   (SETVALUE 10)                       ; SR
701   (CONST&PUSH 43)                     ; -2.0
703   (GETVALUE&PUSH 10)                  ; SR
705   (CALLSR 2 55)                       ; *
708   (SETVALUE 11)                       ; U
710   (LOAD 48)
712   (SETVALUE 12)                       ; V
714   (CONST&PUSH 40)                     ; 20
716   (GETVALUE&PUSH 39)                  ; CNT
718   (CALLSR&PUSH 2 55)                  ; *
721   (CALL1 44)                          ; FXSHFR-SL
723   (GETVALUE&PUSH 18)                  ; NZ
725   (CONST&PUSH 17)                     ; 0
726   (CALLSR&JMPIF 1 48 L492)            ; >
731   (CONST&PUSH 17)                     ; 0
732   (JMP L1063)
735   L735
735   (GETVALUE&PUSH 25)                  ; *PR-SL*
737   (GETVALUE&PUSH 25)                  ; *PR-SL*
739   (CONST&PUSH 46)                     ; 2
741   (CALLSR&PUSH 1 1)                   ; AREF
744   (GETVALUE&PUSH 25)                  ; *PR-SL*
746   (CONST&PUSH 17)                     ; 0
747   (CALLSR&PUSH 1 1)                   ; AREF
750   (CALL2&PUSH 34)                     ; QUOT
752   (LOAD&PUSH 1)
753   (CONST&PUSH 46)                     ; 2
755   (LOAD&PUSH 2)
756   (CALLSR 1 2)                        ; SYSTEM::STORE
759   (SKIP 2)
761   (GETVALUE&PUSH 25)                  ; *PR-SL*
763   (GETVALUE&PUSH 25)                  ; *PR-SL*
765   (CONST&PUSH 31)                     ; 1
767   (CALLSR&PUSH 1 1)                   ; AREF
770   (GETVALUE&PUSH 25)                  ; *PR-SL*
772   (CONST&PUSH 17)                     ; 0
773   (CALLSR&PUSH 1 1)                   ; AREF
776   (CALL2&PUSH 34)                     ; QUOT
778   (LOAD&PUSH 1)
779   (CONST&PUSH 31)                     ; 1
781   (LOAD&PUSH 2)
782   (CALLSR 1 2)                        ; SYSTEM::STORE
785   (SKIP 2)
787   (GETVALUE&PUSH 45)                  ; *PI-SL*
789   (LOAD&PUSH 0)
790   (CONST&PUSH 46)                     ; 2
792   (CONST&PUSH 33)                     ; 1.0
794   (CALLSR 1 2)                        ; SYSTEM::STORE
797   (SKIP 1)
799   (JMP L962)
802   L802
802   (GETVALUE&PUSH 25)                  ; *PR-SL*
804   (CONST&PUSH 17)                     ; 0
805   (CALLSR&PUSH 1 1)                   ; AREF
808   (GETVALUE&PUSH 25)                  ; *PR-SL*
810   (CONST&PUSH 31)                     ; 1
812   (CALLSR&PUSH 1 1)                   ; AREF
815   (GETVALUE&PUSH 25)                  ; *PR-SL*
817   (CONST&PUSH 46)                     ; 2
819   (CALLSR&PUSH 1 1)                   ; AREF
822   (CALL 3 49)                         ; QUAD-SL
825   (GETVALUE 47)                       ; $POLYFACTOR
827   (JMPIFNOT L835)
829   (GETVALUE&PUSH 14)                  ; SZI
831   (CALLS2&JMPIFNOT 145 L735)          ; ZEROP
835   L835
835   (GETVALUE&PUSH 25)                  ; *PR-SL*
837   (GETVALUE&PUSH 13)                  ; SZR
839   (LOAD&PUSH 1)
840   (CONST&PUSH 46)                     ; 2
842   (LOAD&PUSH 2)
843   (CALLSR 1 2)                        ; SYSTEM::STORE
846   (SKIP 2)
848   (GETVALUE&PUSH 45)                  ; *PI-SL*
850   (GETVALUE&PUSH 14)                  ; SZI
852   (LOAD&PUSH 1)
853   (CONST&PUSH 46)                     ; 2
855   (LOAD&PUSH 2)
856   (CALLSR 1 2)                        ; SYSTEM::STORE
859   (SKIP 2)
861   (GETVALUE&PUSH 25)                  ; *PR-SL*
863   (GETVALUE&PUSH 15)                  ; LZR
865   (LOAD&PUSH 1)
866   (CONST&PUSH 31)                     ; 1
868   (LOAD&PUSH 2)
869   (CALLSR 1 2)                        ; SYSTEM::STORE
872   (SKIP 2)
874   (GETVALUE&PUSH 45)                  ; *PI-SL*
876   (GETVALUE&PUSH 16)                  ; LZI
878   (LOAD&PUSH 1)
879   (CONST 31)                          ; 1
881   (JMP L955)
884   L884
884   (GETVALUE&PUSH 27)                  ; *SHR-SL*
886   (GETVALUE&PUSH 25)                  ; *PR-SL*
888   (LOAD&PUSH 2)
889   (CALLSR&PUSH 1 1)                   ; AREF
892   (CALLS2&PUSH 158)                   ; ABS
894   (LOAD&PUSH 1)
895   (LOAD&PUSH 3)
896   (LOAD&PUSH 2)
897   (CALLSR 1 2)                        ; SYSTEM::STORE
900   (SKIP 2)
902   (LOAD&INC&STORE 0)
904   L904
904   (LOAD&PUSH 0)
905   (GETVALUE&PUSH 26)                  ; NN
907   (CALLSR&JMPIFNOT 1 48 L884)         ; >
911   (SKIP 1)
913   (CALL0 28)                          ; SCALE-SL
915   L915
915   (GETVALUE&PUSH 26)                  ; NN
917   (CONST&PUSH 29)                     ; 3
918   (CALLSR&JMPIFNOT 1 47 L121)         ; <
923   (GETVALUE&PUSH 26)                  ; NN
925   (CONST&PUSH 46)                     ; 2
927   (CALLSR&JMPIF 1 45 L802)            ; =
932   (GETVALUE&PUSH 25)                  ; *PR-SL*
934   (GETVALUE&PUSH 25)                  ; *PR-SL*
936   (CONST&PUSH 31)                     ; 1
938   (CALLSR&PUSH 1 1)                   ; AREF
941   (GETVALUE&PUSH 25)                  ; *PR-SL*
943   (CONST&PUSH 17)                     ; 0
944   (CALLSR&PUSH 1 1)                   ; AREF
947   (CALL2&PUSH 34)                     ; QUOT
949   (CALLSR&PUSH 0 54)                  ; -
952   (LOAD&PUSH 1)
953   (CONST 31)                          ; 1
955   L955
955   (PUSH)
956   (LOAD&PUSH 2)
957   (CALLSR 1 2)                        ; SYSTEM::STORE
960   (SKIP 2)
962   L962
962   (CONST 17)                          ; 0
963   (SETVALUE 26)                       ; NN
965   (GETVALUE 47)                       ; $POLYFACTOR
967   (JMPIFNOT L1099)
970   L970
970   (GETVALUE&PUSH 0)                   ; DEGREE
972   (JMP L1032)
974   L974
974   (GETVALUE&PUSH 45)                  ; *PI-SL*
976   (LOAD&PUSH 1)
977   (CALLSR&PUSH 1 1)                   ; AREF
980   (CALLS2&JMPIF 145 L1010)            ; ZEROP
983   (GETVALUE&PUSH 25)                  ; *PR-SL*
985   (GETVALUE&PUSH 25)                  ; *PR-SL*
987   (LOAD&PUSH 2)
988   (CALLSR&PUSH 1 1)                   ; AREF
991   (CONST&PUSH 46)                     ; 2
993   (GETVALUE&PUSH 21)                  ; POLYSC1
995   (CALLSR&PUSH 2 55)                  ; *
998   (CALL2&PUSH 50)                     ; _F
1000  (LOAD&PUSH 1)
1001  (LOAD&PUSH 3)
1002  (LOAD&PUSH 2)
1003  (CALLSR 1 2)                        ; SYSTEM::STORE
1006  (SKIP 2)
1008  (LOAD&DEC&STORE 0)
1010  L1010
1010  (GETVALUE&PUSH 25)                  ; *PR-SL*
1012  (GETVALUE&PUSH 25)                  ; *PR-SL*
1014  (LOAD&PUSH 2)
1015  (CALLSR&PUSH 1 1)                   ; AREF
1018  (GETVALUE&PUSH 21)                  ; POLYSC1
1020  (CALL2&PUSH 50)                     ; _F
1022  (LOAD&PUSH 1)
1023  (LOAD&PUSH 3)
1024  (LOAD&PUSH 2)
1025  (CALLSR 1 2)                        ; SYSTEM::STORE
1028  (SKIP 2)
1030  (LOAD&DEC&STORE 0)
1032  L1032
1032  (LOAD&PUSH 0)
1033  (GETVALUE&PUSH 26)                  ; NN
1035  (CALLSR&JMPIFNOT 1 45 L974)         ; =
1040  (SKIP 1)
1042  (JMP L1156)
1045  L1045
1045  (GETVALUE&PUSH 32)                  ; *HR-SL*
1047  (GETVALUE&PUSH 38)                  ; *SHI-SL*
1049  (LOAD&PUSH 2)
1050  (CALLSR&PUSH 1 1)                   ; AREF
1053  (LOAD&PUSH 1)
1054  (LOAD&PUSH 3)
1055  (LOAD&PUSH 2)
1056  (CALLSR 1 2)                        ; SYSTEM::STORE
1059  (SKIP 2)
1061  (LOAD&INC&STORE 0)
1063  L1063
1063  (LOAD&PUSH 0)
1064  (GETVALUE&PUSH 19)                  ; N
1066  (CALLSR&JMPIFNOT 1 48 L1045)        ; >
1070  (SKIP 1)
1072  (GETVALUE&PUSH 39)                  ; CNT
1074  (CALLS2 150)                        ; 1+
1076  (SETVALUE 39)                       ; CNT
1078  L1078
1078  (GETVALUE&PUSH 39)                  ; CNT
1080  (CONST&PUSH 40)                     ; 20
1082  (CALLSR&JMPIFNOT 1 48 L654)         ; >
1087  (NIL&STORE 12)
1089  L1089
1089  (UNBIND1)
1090  (LOAD&JMPIF 9 L915)
1094  (GETVALUE 47)                       ; $POLYFACTOR
1096  (JMPIF L970)
1099  L1099
1099  (GETVALUE&PUSH 26)                  ; NN
1101  (CALLS2&PUSH 150)                   ; 1+
1103  (JMP L1147)
1105  L1105
1105  (GETVALUE&PUSH 25)                  ; *PR-SL*
1107  (GETVALUE&PUSH 25)                  ; *PR-SL*
1109  (LOAD&PUSH 2)
1110  (CALLSR&PUSH 1 1)                   ; AREF
1113  (GETVALUE&PUSH 21)                  ; POLYSC1
1115  (CALL2&PUSH 50)                     ; _F
1117  (LOAD&PUSH 1)
1118  (LOAD&PUSH 3)
1119  (LOAD&PUSH 2)
1120  (CALLSR 1 2)                        ; SYSTEM::STORE
1123  (SKIP 2)
1125  (GETVALUE&PUSH 45)                  ; *PI-SL*
1127  (GETVALUE&PUSH 45)                  ; *PI-SL*
1129  (LOAD&PUSH 2)
1130  (CALLSR&PUSH 1 1)                   ; AREF
1133  (GETVALUE&PUSH 21)                  ; POLYSC1
1135  (CALL2&PUSH 50)                     ; _F
1137  (LOAD&PUSH 1)
1138  (LOAD&PUSH 3)
1139  (LOAD&PUSH 2)
1140  (CALLSR 1 2)                        ; SYSTEM::STORE
1143  (SKIP 2)
1145  (LOAD&INC&STORE 0)
1147  L1147
1147  (LOAD&PUSH 0)
1148  (GETVALUE&PUSH 0)                   ; DEGREE
1150  (CALLSR&JMPIFNOT 1 48 L1105)        ; >
1154  (SKIP 1)
1156  L1156
1156  (CONST&PUSH 17)                     ; 0
1157  (GETVALUE&PUSH 20)                  ; POLYSC
1159  (GETVALUE&PUSH 21)                  ; POLYSC1
1161  (GETVALUE&PUSH 0)                   ; DEGREE
1163  (CALLSR&PUSH 2 55)                  ; *
1166  (CALLSR 1 54)                       ; -
1169  (BIND 36)                           ; J
1171  (JMP L1204)
1173  L1173
1173  (GETVALUE&PUSH 25)                  ; *PR-SL*
1175  (GETVALUE&PUSH 25)                  ; *PR-SL*
1177  (LOAD&PUSH 5)
1178  (CALLSR&PUSH 1 1)                   ; AREF
1181  (GETVALUE&PUSH 36)                  ; J
1183  (CALL2&PUSH 50)                     ; _F
1185  (LOAD&PUSH 1)
1186  (LOAD&PUSH 6)
1187  (LOAD&PUSH 2)
1188  (CALLSR 1 2)                        ; SYSTEM::STORE
1191  (SKIP 2)
1193  (LOAD&INC&STORE 3)
1195  (GETVALUE&PUSH 36)                  ; J
1197  (GETVALUE&PUSH 21)                  ; POLYSC1
1199  (CALLSR 2 53)                       ; +
1202  (SETVALUE 36)                       ; J
1204  L1204
1204  (LOAD&PUSH 3)
1205  (GETVALUE&PUSH 26)                  ; NN
1207  (CALLSR&JMPIFNOT 1 48 L1173)        ; >
1211  (NIL)
1212  (UNBIND1)
1213  (SKIP 1)
1215  (UNBIND 3)
1217  (SKIP 2)
1219  (UNBIND 8)
1221  (SKIP 1)
1223  (UNBIND 3)
1225  (SKIP 3)
1227  (UNBIND 2)
1229  (SKIP 1)
1231  (UNBIND 2)
1233  (SKIP 3)
1235  (UNBIND1)
1236  (SKIP&RET 2)


Disassembly of function #:|(DEFUN FXSHFR-SL (L2) ...)-33|
(CONST 0) = FXSHFR-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FXSHFR-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FXSHFR-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FXSHFR-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FXSHFR-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FXSHFR-SL
8     (SKIP&RET 1)


Disassembly of function FXSHFR-SL
(CONST 0) = 0.0
(CONST 1) = A
(CONST 2) = B
(CONST 3) = C
(CONST 4) = D
(CONST 5) = E
(CONST 6) = F
(CONST 7) = G
(CONST 8) = H
(CONST 9) = A1
(CONST 10) = A3
(CONST 11) = A7
(CONST 12) = 0
(CONST 13) = NZ
(CONST 14) = QUADSD-SL
(CONST 15) = CALCSC-SL
(CONST 16) = 1
(CONST 17) = J
(CONST 18) = 0.25
(CONST 19) = SR
(CONST 20) = V
(CONST 21) = SS
(CONST 22) = UI
(CONST 23) = VI
(CONST 24) = S
(CONST 25) = NEXTK-SL
(CONST 26) = NEWEST-SL
(CONST 27) = *HR-SL*
(CONST 28) = N
(CONST 29) = *PR-SL*
(CONST 30) = NN
(CONST 31) = QUOT
(CONST 32) = 1.0
(CONST 33) = 3
(CONST 34) = U
(CONST 35) = *SHR-SL*
(CONST 36) = BOOL
(CONST 37) = QUADIT-SL
(CONST 38) = REALIT-SL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (S NZ BOOL *SHR-SL* U SS NN *PR-SL* N *HR-SL* VI J V SR)
writes special variables : (BOOL J V U VI UI S SS NZ)
289 byte-code instructions:
0     (CONST 0)                           ; 0.0
1     (BIND 1)                            ; A
3     (CONST 0)                           ; 0.0
4     (BIND 2)                            ; B
6     (CONST 0)                           ; 0.0
7     (BIND 3)                            ; C
9     (CONST 0)                           ; 0.0
10    (BIND 4)                            ; D
12    (CONST 0)                           ; 0.0
13    (BIND 5)                            ; E
15    (CONST 0)                           ; 0.0
16    (BIND 6)                            ; F
18    (CONST 0)                           ; 0.0
19    (BIND 7)                            ; G
21    (CONST 0)                           ; 0.0
22    (BIND 8)                            ; H
24    (CONST 0)                           ; 0.0
25    (BIND 9)                            ; A1
27    (CONST 0)                           ; 0.0
28    (BIND 10)                           ; A3
30    (CONST 0)                           ; 0.0
31    (BIND 11)                           ; A7
33    (CONST 12)                          ; 0
34    (SETVALUE 13)                       ; NZ
36    (CALL0 14)                          ; QUADSD-SL
38    (CALL0 15)                          ; CALCSC-SL
40    (CONST 16)                          ; 1
41    (BIND 17)                           ; J
43    (CONST&PUSH 18)                     ; 0.25
44    (CONST&PUSH 18)                     ; 0.25
45    (GETVALUE&PUSH 19)                  ; SR
47    (GETVALUE&PUSH 20)                  ; V
49    (PUSH-NIL 2)
51    (NIL)
52    (BIND 21)                           ; SS
54    (PUSH-NIL 5)
56    (NIL)
57    (BIND 22)                           ; UI
59    (NIL)
60    (BIND 23)                           ; VI
62    (NIL)
63    (BIND 24)                           ; S
65    (PUSH-NIL 7)
67    L67
67    (GETVALUE&PUSH 17)                  ; J
69    (LOAD&PUSH 68)
71    (CALLSR&JMPIF 1 48 L525)            ; >
76    (CALL0 25)                          ; NEXTK-SL
78    (CALL0 15)                          ; CALCSC-SL
80    (CALL0 26)                          ; NEWEST-SL
82    (GETVALUE 23)                       ; VI
84    (STORE 20)
86    (CONST 0)                           ; 0.0
87    (SETVALUE 21)                       ; SS
89    (GETVALUE&PUSH 27)                  ; *HR-SL*
91    (GETVALUE&PUSH 28)                  ; N
93    (CALLSR&PUSH 1 1)                   ; AREF
96    (CALLS2&JMPIF 145 L120)             ; ZEROP
99    (GETVALUE&PUSH 29)                  ; *PR-SL*
101   (GETVALUE&PUSH 30)                  ; NN
103   (CALLSR&PUSH 1 1)                   ; AREF
106   (GETVALUE&PUSH 27)                  ; *HR-SL*
108   (GETVALUE&PUSH 28)                  ; N
110   (CALLSR&PUSH 1 1)                   ; AREF
113   (CALL2&PUSH 31)                     ; QUOT
115   (CALLSR 0 54)                       ; -
118   (SETVALUE 21)                       ; SS
120   L120
120   (CONST 32)                          ; 1.0
122   (STORE 19)
124   (CONST 32)                          ; 1.0
126   (STORE 18)
128   (GETVALUE&PUSH 17)                  ; J
130   (CONST&PUSH 16)                     ; 1
131   (CALLSR&JMPIF 1 45 L437)            ; =
136   (CONST&PUSH 12)                     ; 0
137   (CONST&PUSH 33)                     ; 3
139   (CALLSR&JMPIF 1 45 L437)            ; =
144   (LOAD&PUSH 20)
145   (CALLS2&JMPIF 145 L160)             ; ZEROP
148   (LOAD&PUSH 20)
149   (LOAD&PUSH 27)
151   (CALLSR&PUSH 1 54)                  ; -
154   (LOAD&PUSH 21)
155   (CALL2&PUSH 31)                     ; QUOT
157   (CALLS2&STORE 158 19)               ; ABS
160   L160
160   (GETVALUE&PUSH 21)                  ; SS
162   (CALLS2&JMPIF 145 L179)             ; ZEROP
165   (GETVALUE&PUSH 21)                  ; SS
167   (LOAD&PUSH 28)
169   (CALLSR&PUSH 1 54)                  ; -
172   (GETVALUE&PUSH 21)                  ; SS
174   (CALL2&PUSH 31)                     ; QUOT
176   (CALLS2&STORE 158 18)               ; ABS
179   L179
179   (CONST 32)                          ; 1.0
181   (STORE 25)
183   (LOAD&PUSH 19)
184   (LOAD&PUSH 17)
185   (CALLSR&JMPIFNOT 1 47 L195)         ; <
189   (LOAD&PUSH 19)
190   (LOAD&PUSH 17)
191   (CALLSR&STORE 2 55 25)              ; *
195   L195
195   (CONST 32)                          ; 1.0
197   (STORE 24)
199   (LOAD&PUSH 18)
200   (LOAD&PUSH 18)
201   (CALLSR&JMPIFNOT 1 47 L211)         ; <
205   (LOAD&PUSH 18)
206   (LOAD&PUSH 18)
207   (CALLSR&STORE 2 55 24)              ; *
211   L211
211   (LOAD&PUSH 25)
213   (LOAD&PUSH 30)
215   (CALLSR&STORE 1 47 3)               ; <
219   (LOAD&PUSH 24)
220   (LOAD&PUSH 29)
222   (CALLSR&STORE 1 47 2)               ; <
226   (JMPIF L232)
228   (LOAD&JMPIFNOT 3 L437)
232   L232
232   (GETVALUE 34)                       ; U
234   (STORE 5)
235   (GETVALUE 20)                       ; V
237   (STORE 6)
238   (CONST&PUSH 12)                     ; 0
239   (JMP L268)
241   L241
241   (T&STORE 0)
243   (LOAD&JMPIFNOT 0 L510)
247   (JMP L417)
250   L250
250   (GETVALUE&PUSH 35)                  ; *SHR-SL*
252   (GETVALUE&PUSH 27)                  ; *HR-SL*
254   (LOAD&PUSH 2)
255   (CALLSR&PUSH 1 1)                   ; AREF
258   (LOAD&PUSH 1)
259   (LOAD&PUSH 3)
260   (LOAD&PUSH 2)
261   (CALLSR 1 2)                        ; SYSTEM::STORE
264   (SKIP 2)
266   (LOAD&INC&STORE 0)
268   L268
268   (LOAD&PUSH 0)
269   (GETVALUE&PUSH 28)                  ; N
271   (CALLSR&JMPIFNOT 1 48 L250)         ; >
275   (SKIP 1)
277   (GETVALUE 21)                       ; SS
279   (SETVALUE 24)                       ; S
281   (NIL&STORE 1)
283   (STORE 0)
284   (LOAD&JMPIFNOT 2 L297)
287   (LOAD 3)
288   (NOT)
289   (JMPIF L297)
291   (LOAD&PUSH 24)
292   (LOAD&PUSH 26)
294   (CALLSR 1 47)                       ; <
297   L297
297   (NOT)
298   (BIND 36)                           ; BOOL
300   (NIL&PUSH)
301   (GETVALUE 36)                       ; BOOL
303   (JMPIFNOT L506)
306   L306
306   (CALL0 37)                          ; QUADIT-SL
308   (GETVALUE&PUSH 13)                  ; NZ
310   (CONST&PUSH 12)                     ; 0
311   (CALLSR&JMPIF 1 48 L522)            ; >
316   (T&STORE 5)
318   (CONST&PUSH 18)                     ; 0.25
319   (LOAD&PUSH 34)
321   (CALLSR&STORE 2 55 33)              ; *
325   (LOAD&JMPIF 4 L241)
329   (LOAD&JMPIFNOT 6 L241)
333   (CONST&PUSH 12)                     ; 0
334   (JMP L404)
337   L337
337   (T&STORE 0)
339   (LOAD&JMPIFNOT 0 L496)
343   (JMP L421)
346   L346
346   (T&STORE 4)
348   (CONST&PUSH 18)                     ; 0.25
349   (LOAD&PUSH 33)
351   (CALLSR&STORE 2 55 32)              ; *
355   (LOAD&PUSH 8)
356   (CALLS2&JMPIF 145 L337)             ; ZEROP
359   (GETVALUE&PUSH 24)                  ; S
361   (GETVALUE&PUSH 24)                  ; S
363   (CALLSR&PUSH 2 53)                  ; +
366   (CALLSR 0 54)                       ; -
369   (SETVALUE 22)                       ; UI
371   (GETVALUE&PUSH 24)                  ; S
373   (GETVALUE&PUSH 24)                  ; S
375   (CALLSR 2 55)                       ; *
378   (SETVALUE 23)                       ; VI
380   (LOAD&JMPIFNOT 0 L496)
384   (JMP L421)
386   L386
386   (GETVALUE&PUSH 27)                  ; *HR-SL*
388   (GETVALUE&PUSH 35)                  ; *SHR-SL*
390   (LOAD&PUSH 2)
391   (CALLSR&PUSH 1 1)                   ; AREF
394   (LOAD&PUSH 1)
395   (LOAD&PUSH 3)
396   (LOAD&PUSH 2)
397   (CALLSR 1 2)                        ; SYSTEM::STORE
400   (SKIP 2)
402   (LOAD&INC&STORE 0)
404   L404
404   (LOAD&PUSH 0)
405   (GETVALUE&PUSH 28)                  ; N
407   (CALLSR&JMPIFNOT 1 48 L386)         ; >
411   (SKIP 1)
413   (LOAD&JMPIFNOT 0 L510)
417   L417
417   (LOAD&JMPIFNOT 0 L496)
421   L421
421   (LOAD 9)
422   (SETVALUE 34)                       ; U
424   (LOAD 10)
425   (SETVALUE 20)                       ; V
427   (CONST&PUSH 12)                     ; 0
428   (JMP L480)
430   L430
430   (SKIP 1)
432   (UNBIND1)
433   (CALL0 14)                          ; QUADSD-SL
435   (CALL0 15)                          ; CALCSC-SL
437   L437
437   (LOAD 20)
439   (STORE 26)
441   (GETVALUE 21)                       ; SS
443   (STORE 27)
445   (LOAD 19)
447   (STORE 16)
449   (LOAD 18)
451   (STORE 17)
453   (GETVALUE&PUSH 17)                  ; J
455   (CALLS2 150)                        ; 1+
457   (SETVALUE 17)                       ; J
459   (JMP L67)
462   L462
462   (GETVALUE&PUSH 27)                  ; *HR-SL*
464   (GETVALUE&PUSH 35)                  ; *SHR-SL*
466   (LOAD&PUSH 2)
467   (CALLSR&PUSH 1 1)                   ; AREF
470   (LOAD&PUSH 1)
471   (LOAD&PUSH 3)
472   (LOAD&PUSH 2)
473   (CALLSR 1 2)                        ; SYSTEM::STORE
476   (SKIP 2)
478   (LOAD&INC&STORE 0)
480   L480
480   (LOAD&PUSH 0)
481   (GETVALUE&PUSH 28)                  ; N
483   (CALLSR&JMPIFNOT 1 48 L462)         ; >
487   (SKIP 1)
489   (LOAD&JMPIFNOT 7 L430)
492   (LOAD&JMPIF 5 L430)
496   L496
496   (T)
497   (SETVALUE 36)                       ; BOOL
499   (NIL&STORE 0)
501   (GETVALUE 36)                       ; BOOL
503   (JMPIF L306)
506   L506
506   (LOAD&JMPIF 0 L417)
510   L510
510   (CALL0 38)                          ; REALIT-SL
512   (STORE 8)
514   (GETVALUE&PUSH 13)                  ; NZ
516   (CONST&PUSH 12)                     ; 0
517   (CALLSR&JMPIFNOT 1 48 L346)         ; >
522   L522
522   (SKIP 1)
524   (UNBIND1)
525   L525
525   (NIL)
526   (SKIP 7)
528   (UNBIND 3)
530   (SKIP 5)
532   (UNBIND1)
533   (SKIP 6)
535   (UNBIND 12)
537   (SKIP&RET 2)


Disassembly of function #:|(DEFUN QUADIT-SL NIL ...)-34|
(CONST 0) = QUADIT-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE QUADIT-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; QUADIT-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; QUADIT-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE QUADIT-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; QUADIT-SL
8     (SKIP&RET 1)


Disassembly of function QUADIT-SL
(CONST 0) = 0
(CONST 1) = NZ
(CONST 2) = UI
(CONST 3) = U
(CONST 4) = VI
(CONST 5) = V
(CONST 6) = J
(CONST 7) = 1.0
(CONST 8) = QUAD-SL
(CONST 9) = SZR
(CONST 10) = LZR
(CONST 11) = 0.01
(CONST 12) = QUADSD-SL
(CONST 13) = A
(CONST 14) = B
(CONST 15) = SZI
(CONST 16) = 2.0
(CONST 17) = *QPR-SL*
(CONST 18) = 1
(CONST 19) = N
(CONST 20) = 5.0
(CONST 21) = MRE
(CONST 22) = 4.0
(CONST 23) = ARE
(CONST 24) = -2.0
(CONST 25) = 20.0
(CONST 26) = 2
(CONST 27) = 20
(CONST 28) = 5
(CONST 29) = CALCSC-SL
(CONST 30) = NEXTK-SL
(CONST 31) = NEWEST-SL
(CONST 32) = QUOT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MRE N ARE J *QPR-SL* SZI B A LZR SZR V U VI UI)
writes special variables : (J V U NZ)
193 byte-code instructions:
0     (CONST 0)                           ; 0
1     (SETVALUE 1)                        ; NZ
3     (GETVALUE 2)                        ; UI
5     (SETVALUE 3)                        ; U
7     (GETVALUE 4)                        ; VI
9     (SETVALUE 5)                        ; V
11    (NIL&PUSH)
12    (CONST 0)                           ; 0
13    (BIND 6)                            ; J
15    (PUSH-NIL 6)
17    L17
17    (CONST&PUSH 7)                      ; 1.0
18    (GETVALUE&PUSH 3)                   ; U
20    (GETVALUE&PUSH 5)                   ; V
22    (CALL 3 8)                          ; QUAD-SL
25    (GETVALUE&PUSH 9)                   ; SZR
27    (CALLS2&PUSH 158)                   ; ABS
29    (GETVALUE&PUSH 10)                  ; LZR
31    (CALLS2&PUSH 158)                   ; ABS
33    (CALLSR&PUSH 1 54)                  ; -
36    (CALLS2&PUSH 158)                   ; ABS
38    (CONST&PUSH 11)                     ; 0.01
39    (GETVALUE&PUSH 10)                  ; LZR
41    (CALLS2&PUSH 158)                   ; ABS
43    (CALLSR&PUSH 2 55)                  ; *
46    (CALLSR&JMPIF 1 48 L332)            ; >
51    (CALL0 12)                          ; QUADSD-SL
53    (GETVALUE&PUSH 13)                  ; A
55    (GETVALUE&PUSH 9)                   ; SZR
57    (GETVALUE&PUSH 14)                  ; B
59    (CALLSR&PUSH 2 55)                  ; *
62    (CALLSR&PUSH 1 54)                  ; -
65    (CALLS2&PUSH 158)                   ; ABS
67    (GETVALUE&PUSH 15)                  ; SZI
69    (GETVALUE&PUSH 14)                  ; B
71    (CALLSR&PUSH 2 55)                  ; *
74    (CALLS2&PUSH 158)                   ; ABS
76    (CALLSR&STORE 2 53 2)               ; +
80    (GETVALUE&PUSH 5)                   ; V
82    (CALLS2&PUSH 158)                   ; ABS
84    (CALLS2&STORE 156 4)                ; SQRT
87    (CONST&PUSH 16)                     ; 2.0
88    (GETVALUE&PUSH 17)                  ; *QPR-SL*
90    (CONST&PUSH 0)                      ; 0
91    (CALLSR&PUSH 1 1)                   ; AREF
94    (CALLS2&PUSH 158)                   ; ABS
96    (CALLSR&STORE 2 55 5)               ; *
100   (GETVALUE&PUSH 9)                   ; SZR
102   (GETVALUE&PUSH 14)                  ; B
104   (CALLSR&PUSH 2 55)                  ; *
107   (CALLSR&STORE 0 54 3)               ; -
111   (CONST&PUSH 18)                     ; 1
112   (JMP L222)
115   L115
115   (GETVALUE&PUSH 6)                   ; J
117   (CALLS2 150)                        ; 1+
119   (SETVALUE 6)                        ; J
121   (PUSH)
122   (CONST&PUSH 27)                     ; 20
123   (CALLSR&JMPIF 1 48 L332)            ; >
128   (GETVALUE&PUSH 6)                   ; J
130   (CONST&PUSH 26)                     ; 2
131   (CALLSR&JMPIF 1 47 L357)            ; <
136   (LOAD&PUSH 1)
137   (CONST&PUSH 11)                     ; 0.01
138   (CALLSR&JMPIF 1 48 L357)            ; >
143   (LOAD&PUSH 2)
144   (LOAD&PUSH 1)
145   (CALLSR&JMPIF 1 47 L357)            ; <
150   (LOAD&JMPIF 9 L357)
154   (LOAD&PUSH 1)
155   (GETVALUE&PUSH 23)                  ; ARE
157   (CALLSR&JMPIFNOT 1 47 L164)         ; <
161   (GETVALUE 23)                       ; ARE
163   (STORE 1)
164   L164
164   (LOAD&PUSH 1)
165   (CALLS2&STORE 156 1)                ; SQRT
168   (GETVALUE&PUSH 3)                   ; U
170   (GETVALUE&PUSH 3)                   ; U
172   (LOAD&PUSH 3)
173   (CALLSR&PUSH 2 55)                  ; *
176   (CALLSR 1 54)                       ; -
179   (SETVALUE 3)                        ; U
181   (GETVALUE&PUSH 5)                   ; V
183   (GETVALUE&PUSH 5)                   ; V
185   (LOAD&PUSH 3)
186   (CALLSR&PUSH 2 55)                  ; *
189   (CALLSR 2 53)                       ; +
192   (SETVALUE 5)                        ; V
194   (CALL0 12)                          ; QUADSD-SL
196   (CONST&PUSH 18)                     ; 1
197   (JMP L344)
200   L200
200   (LOAD&PUSH 6)
201   (LOAD&PUSH 6)
202   (CALLSR&PUSH 2 55)                  ; *
205   (GETVALUE&PUSH 17)                  ; *QPR-SL*
207   (LOAD&PUSH 2)
208   (CALLSR&PUSH 1 1)                   ; AREF
211   (CALLS2&PUSH 158)                   ; ABS
213   (CALLSR&STORE 2 53 6)               ; +
217   (GETVALUE&PUSH 19)                  ; N
219   (CALLS2&STORE 150 0)                ; 1+
222   L222
222   (LOAD&PUSH 0)
223   (GETVALUE&PUSH 19)                  ; N
225   (CALLSR&JMPIFNOT 1 48 L200)         ; >
229   (SKIP 1)
231   (LOAD&PUSH 5)
232   (LOAD&PUSH 5)
233   (CALLSR&PUSH 2 55)                  ; *
236   (GETVALUE&PUSH 13)                  ; A
238   (LOAD&PUSH 5)
239   (CALLSR&PUSH 2 53)                  ; +
242   (CALLS2&PUSH 158)                   ; ABS
244   (CALLSR&STORE 2 53 5)               ; +
248   (CONST&PUSH 20)                     ; 5.0
249   (GETVALUE&PUSH 21)                  ; MRE
251   (CALLSR&PUSH 2 55)                  ; *
254   (CONST&PUSH 22)                     ; 4.0
255   (GETVALUE&PUSH 23)                  ; ARE
257   (CALLSR&PUSH 2 55)                  ; *
260   (CALLSR&PUSH 2 53)                  ; +
263   (LOAD&PUSH 6)
264   (CALLSR&PUSH 2 55)                  ; *
267   (CONST&PUSH 20)                     ; 5.0
268   (GETVALUE&PUSH 21)                  ; MRE
270   (CALLSR&PUSH 2 55)                  ; *
273   (CONST&PUSH 16)                     ; 2.0
274   (GETVALUE&PUSH 23)                  ; ARE
276   (CALLSR&PUSH 2 55)                  ; *
279   (CALLSR&PUSH 2 53)                  ; +
282   (GETVALUE&PUSH 13)                  ; A
284   (LOAD&PUSH 6)
285   (CALLSR&PUSH 2 53)                  ; +
288   (CALLS2&PUSH 158)                   ; ABS
290   (GETVALUE&PUSH 14)                  ; B
292   (CALLS2&PUSH 158)                   ; ABS
294   (LOAD&PUSH 8)
295   (CALLSR&PUSH 2 55)                  ; *
298   (CALLSR&PUSH 2 53)                  ; +
301   (CALLSR&PUSH 2 55)                  ; *
304   (CONST&PUSH 24)                     ; -2.0
305   (GETVALUE&PUSH 23)                  ; ARE
307   (LOAD&PUSH 7)
308   (CALLS2&PUSH 158)                   ; ABS
310   (CALLSR&PUSH 3 55)                  ; *
313   (CALLSR&STORE 2 54 5)               ; -
317   (LOAD&PUSH 2)
318   (CONST&PUSH 25)                     ; 20.0
319   (LOAD&PUSH 7)
320   (CALLSR&PUSH 2 55)                  ; *
323   (CALLSR&JMPIF 1 48 L115)            ; >
328   (CONST 26)                          ; 2
330   (SETVALUE 1)                        ; NZ
332   L332
332   (NIL)
333   (SKIP 6)
335   (UNBIND1)
336   (SKIP&RET 2)
338   L338
338   (CALL0 29)                          ; CALCSC-SL
340   (CALL0 30)                          ; NEXTK-SL
342   (LOAD&INC&STORE 0)
344   L344
344   (LOAD&PUSH 0)
345   (CONST&PUSH 28)                     ; 5
346   (CALLSR&JMPIFNOT 1 48 L338)         ; >
350   (SKIP 1)
352   (T&STORE 9)
354   (CONST 0)                           ; 0
355   (SETVALUE 6)                        ; J
357   L357
357   (LOAD 2)
358   (STORE 0)
359   (CALL0 29)                          ; CALCSC-SL
361   (CALL0 30)                          ; NEXTK-SL
363   (CALL0 29)                          ; CALCSC-SL
365   (CALL0 31)                          ; NEWEST-SL
367   (GETVALUE&PUSH 4)                   ; VI
369   (CALLS2&JMPIF 145 L332)             ; ZEROP
372   (GETVALUE&PUSH 4)                   ; VI
374   (GETVALUE&PUSH 5)                   ; V
376   (CALLSR&PUSH 1 54)                  ; -
379   (GETVALUE&PUSH 4)                   ; VI
381   (CALL2&PUSH 32)                     ; QUOT
383   (CALLS2&STORE 158 1)                ; ABS
386   (GETVALUE 2)                        ; UI
388   (SETVALUE 3)                        ; U
390   (GETVALUE 4)                        ; VI
392   (SETVALUE 5)                        ; V
394   (JMP L17)


Disassembly of function #:|(DEFUN REALIT-SL NIL ...)-35|
(CONST 0) = REALIT-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REALIT-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REALIT-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REALIT-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REALIT-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REALIT-SL
8     (SKIP&RET 1)


Disassembly of function REALIT-SL
(CONST 0) = 0
(CONST 1) = NZ
(CONST 2) = J
(CONST 3) = *PR-SL*
(CONST 4) = *QPR-SL*
(CONST 5) = 1
(CONST 6) = NN
(CONST 7) = S
(CONST 8) = MRE
(CONST 9) = ARE
(CONST 10) = QUOT
(CONST 11) = 20.0
(CONST 12) = SZR
(CONST 13) = 0.0
(CONST 14) = SZI
(CONST 15) = 10
(CONST 16) = 2
(CONST 17) = 0.001
(CONST 18) = *HR-SL*
(CONST 19) = *QHR-SL*
(CONST 20) = N
(CONST 21) = 10.0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N *QHR-SL* *HR-SL* J ARE MRE NN S *QPR-SL* *PR-SL*)
writes special variables : (S J SZI SZR NZ)
267 byte-code instructions:
0     (CONST 0)                           ; 0
1     (SETVALUE 1)                        ; NZ
3     (BIND 2)                            ; J
5     (PUSH-NIL 7)
7     L7
7     (GETVALUE&PUSH 3)                   ; *PR-SL*
9     (CONST&PUSH 0)                      ; 0
10    (CALLSR&STORE 1 1 6)                ; AREF
14    (GETVALUE&PUSH 4)                   ; *QPR-SL*
16    (LOAD&PUSH 0)
17    (CONST&PUSH 0)                      ; 0
18    (LOAD&PUSH 9)
19    (CALLSR 1 2)                        ; SYSTEM::STORE
22    (SKIP 1)
24    (CONST&PUSH 5)                      ; 1
25    (JMP L55)
27    L27
27    (LOAD&PUSH 7)
28    (GETVALUE&PUSH 7)                   ; S
30    (CALLSR&PUSH 2 55)                  ; *
33    (GETVALUE&PUSH 3)                   ; *PR-SL*
35    (LOAD&PUSH 2)
36    (CALLSR&PUSH 1 1)                   ; AREF
39    (CALLSR&STORE 2 53 7)               ; +
43    (GETVALUE&PUSH 4)                   ; *QPR-SL*
45    (LOAD&PUSH 0)
46    (LOAD&PUSH 2)
47    (LOAD&PUSH 10)
48    (CALLSR 1 2)                        ; SYSTEM::STORE
51    (SKIP 1)
53    (LOAD&INC&STORE 0)
55    L55
55    (LOAD&PUSH 0)
56    (GETVALUE&PUSH 6)                   ; NN
58    (CALLSR&JMPIFNOT 1 48 L27)          ; >
62    (SKIP 1)
64    (LOAD&PUSH 6)
65    (CALLS2&STORE 158 3)                ; ABS
68    (GETVALUE&PUSH 7)                   ; S
70    (CALLS2&STORE 158 4)                ; ABS
73    (GETVALUE&PUSH 8)                   ; MRE
75    (GETVALUE&PUSH 9)                   ; ARE
77    (GETVALUE&PUSH 8)                   ; MRE
79    (CALLSR&PUSH 2 53)                  ; +
82    (CALL2&PUSH 10)                     ; QUOT
84    (GETVALUE&PUSH 4)                   ; *QPR-SL*
86    (CONST&PUSH 0)                      ; 0
87    (CALLSR&PUSH 1 1)                   ; AREF
90    (CALLS2&PUSH 158)                   ; ABS
92    (CALLSR&STORE 2 55 5)               ; *
96    (CONST&PUSH 5)                      ; 1
97    (JMP L136)
99    L99
99    (CONST 5)                           ; 1
100   (SETVALUE 1)                        ; NZ
102   (GETVALUE 7)                        ; S
104   (SETVALUE 12)                       ; SZR
106   (CONST 13)                          ; 0.0
107   (SETVALUE 14)                       ; SZI
109   (CONST 0)                           ; 0
110   (JMP L221)
113   L113
113   (CONST 0)                           ; 0
114   (JMP L221)
117   L117
117   (LOAD&PUSH 6)
118   (LOAD&PUSH 6)
119   (CALLSR&PUSH 2 55)                  ; *
122   (GETVALUE&PUSH 4)                   ; *QPR-SL*
124   (LOAD&PUSH 2)
125   (CALLSR&PUSH 1 1)                   ; AREF
128   (CALLS2&PUSH 158)                   ; ABS
130   (CALLSR&STORE 2 53 6)               ; +
134   (LOAD&INC&STORE 0)
136   L136
136   (LOAD&PUSH 0)
137   (GETVALUE&PUSH 6)                   ; NN
139   (CALLSR&JMPIFNOT 1 48 L117)         ; >
143   (SKIP 1)
145   (LOAD&PUSH 3)
146   (CONST&PUSH 11)                     ; 20.0
147   (GETVALUE&PUSH 9)                   ; ARE
149   (GETVALUE&PUSH 8)                   ; MRE
151   (CALLSR&PUSH 2 53)                  ; +
154   (LOAD&PUSH 8)
155   (CALLSR&PUSH 2 55)                  ; *
158   (GETVALUE&PUSH 8)                   ; MRE
160   (LOAD&PUSH 7)
161   (CALLSR&PUSH 2 55)                  ; *
164   (CALLSR&PUSH 1 54)                  ; -
167   (CALLSR&PUSH 2 55)                  ; *
170   (CALLSR&JMPIFNOT 1 48 L99)          ; >
175   (GETVALUE&PUSH 2)                   ; J
177   (CALLS2 150)                        ; 1+
179   (SETVALUE 2)                        ; J
181   (PUSH)
182   (CONST&PUSH 15)                     ; 10
183   (CALLSR&JMPIF 1 48 L113)            ; >
188   (GETVALUE&PUSH 2)                   ; J
190   (CONST&PUSH 16)                     ; 2
191   (CALLSR&JMPIF 1 47 L226)            ; <
195   (LOAD&PUSH 1)
196   (CALLS2&PUSH 158)                   ; ABS
198   (CONST&PUSH 17)                     ; 0.001
199   (GETVALUE&PUSH 7)                   ; S
201   (LOAD&PUSH 4)
202   (CALLSR&PUSH 1 54)                  ; -
205   (CALLS2&PUSH 158)                   ; ABS
207   (CALLSR&PUSH 2 55)                  ; *
210   (CALLSR&JMPIF 1 48 L226)            ; >
214   (LOAD&PUSH 3)
215   (LOAD&PUSH 1)
216   (CALLSR&JMPIFNOT 1 48 L226)         ; >
220   (CONST 5)                           ; 1
221   L221
221   (SKIP 7)
223   (UNBIND1)
224   (SKIP&RET 1)
226   L226
226   (LOAD 3)
227   (STORE 0)
228   (GETVALUE&PUSH 18)                  ; *HR-SL*
230   (CONST&PUSH 0)                      ; 0
231   (CALLSR&STORE 1 1 2)                ; AREF
235   (GETVALUE&PUSH 19)                  ; *QHR-SL*
237   (LOAD&PUSH 0)
238   (CONST&PUSH 0)                      ; 0
239   (LOAD&PUSH 5)
240   (CALLSR 1 2)                        ; SYSTEM::STORE
243   (SKIP 1)
245   (CONST&PUSH 5)                      ; 1
246   (JMP L348)
249   L249
249   (LOAD&PUSH 6)
250   (LOAD&PUSH 3)
251   (CALL2&PUSH 10)                     ; QUOT
253   (CALLSR&STORE 0 54 1)               ; -
257   (GETVALUE&PUSH 18)                  ; *HR-SL*
259   (GETVALUE&PUSH 4)                   ; *QPR-SL*
261   (CONST&PUSH 0)                      ; 0
262   (CALLSR&PUSH 1 1)                   ; AREF
265   (LOAD&PUSH 1)
266   (CONST&PUSH 0)                      ; 0
267   (LOAD&PUSH 2)
268   (CALLSR 1 2)                        ; SYSTEM::STORE
271   (SKIP 2)
273   (CONST&PUSH 5)                      ; 1
274   (JMP L308)
276   L276
276   (GETVALUE&PUSH 18)                  ; *HR-SL*
278   (LOAD&PUSH 3)
279   (GETVALUE&PUSH 19)                  ; *QHR-SL*
281   (LOAD&DEC&PUSH 3)
283   (CALLSR&PUSH 1 1)                   ; AREF
286   (CALLSR&PUSH 2 55)                  ; *
289   (GETVALUE&PUSH 4)                   ; *QPR-SL*
291   (LOAD&PUSH 3)
292   (CALLSR&PUSH 1 1)                   ; AREF
295   (CALLSR&PUSH 2 53)                  ; +
298   (LOAD&PUSH 1)
299   (LOAD&PUSH 3)
300   (LOAD&PUSH 2)
301   (CALLSR 1 2)                        ; SYSTEM::STORE
304   (SKIP 2)
306   (LOAD&INC&STORE 0)
308   L308
308   (LOAD&PUSH 0)
309   (GETVALUE&PUSH 20)                  ; N
311   (CALLSR&JMPIFNOT 1 48 L276)         ; >
315   (SKIP 1)
317   (JMP L421)
320   L320
320   (LOAD&PUSH 3)
321   (GETVALUE&PUSH 7)                   ; S
323   (CALLSR&PUSH 2 55)                  ; *
326   (GETVALUE&PUSH 18)                  ; *HR-SL*
328   (LOAD&PUSH 2)
329   (CALLSR&PUSH 1 1)                   ; AREF
332   (CALLSR&STORE 2 53 3)               ; +
336   (GETVALUE&PUSH 19)                  ; *QHR-SL*
338   (LOAD&PUSH 0)
339   (LOAD&PUSH 2)
340   (LOAD&PUSH 6)
341   (CALLSR 1 2)                        ; SYSTEM::STORE
344   (SKIP 1)
346   (LOAD&INC&STORE 0)
348   L348
348   (LOAD&PUSH 0)
349   (GETVALUE&PUSH 20)                  ; N
351   (CALLSR&JMPIFNOT 1 48 L320)         ; >
355   (SKIP 1)
357   (LOAD&PUSH 2)
358   (CALLS2&PUSH 158)                   ; ABS
360   (GETVALUE&PUSH 18)                  ; *HR-SL*
362   (GETVALUE&PUSH 20)                  ; N
364   (CALLSR&PUSH 1 1)                   ; AREF
367   (CALLS2&PUSH 158)                   ; ABS
369   (CONST&PUSH 21)                     ; 10.0
370   (GETVALUE&PUSH 9)                   ; ARE
372   (CALLSR&PUSH 3 55)                  ; *
375   (CALLSR&JMPIF 1 48 L249)            ; >
380   (GETVALUE&PUSH 18)                  ; *HR-SL*
382   (LOAD&PUSH 0)
383   (CONST&PUSH 0)                      ; 0
384   (CONST&PUSH 13)                     ; 0.0
385   (CALLSR 1 2)                        ; SYSTEM::STORE
388   (SKIP 1)
390   (CONST&PUSH 5)                      ; 1
391   (JMP L412)
393   L393
393   (GETVALUE&PUSH 18)                  ; *HR-SL*
395   (GETVALUE&PUSH 19)                  ; *QHR-SL*
397   (LOAD&DEC&PUSH 2)
399   (CALLSR&PUSH 1 1)                   ; AREF
402   (LOAD&PUSH 1)
403   (LOAD&PUSH 3)
404   (LOAD&PUSH 2)
405   (CALLSR 1 2)                        ; SYSTEM::STORE
408   (SKIP 2)
410   (LOAD&INC&STORE 0)
412   L412
412   (LOAD&PUSH 0)
413   (GETVALUE&PUSH 20)                  ; N
415   (CALLSR&JMPIFNOT 1 48 L393)         ; >
419   (SKIP 1)
421   L421
421   (GETVALUE&PUSH 18)                  ; *HR-SL*
423   (CONST&PUSH 0)                      ; 0
424   (CALLSR&STORE 1 1 2)                ; AREF
428   (CONST&PUSH 5)                      ; 1
429   (JMP L449)
431   L431
431   (LOAD&PUSH 3)
432   (GETVALUE&PUSH 7)                   ; S
434   (CALLSR&PUSH 2 55)                  ; *
437   (GETVALUE&PUSH 18)                  ; *HR-SL*
439   (LOAD&PUSH 2)
440   (CALLSR&PUSH 1 1)                   ; AREF
443   (CALLSR&STORE 2 53 3)               ; +
447   (LOAD&INC&STORE 0)
449   L449
449   (LOAD&PUSH 0)
450   (GETVALUE&PUSH 20)                  ; N
452   (CALLSR&JMPIFNOT 1 48 L431)         ; >
456   (SKIP 1)
458   (CONST 13)                          ; 0.0
459   (STORE 1)
460   (LOAD&PUSH 2)
461   (CALLS2&PUSH 158)                   ; ABS
463   (GETVALUE&PUSH 18)                  ; *HR-SL*
465   (GETVALUE&PUSH 20)                  ; N
467   (CALLSR&PUSH 1 1)                   ; AREF
470   (CALLS2&PUSH 158)                   ; ABS
472   (CONST&PUSH 21)                     ; 10.0
473   (GETVALUE&PUSH 9)                   ; ARE
475   (CALLSR&PUSH 3 55)                  ; *
478   (CALLSR&JMPIFNOT 1 48 L490)         ; >
482   (LOAD&PUSH 6)
483   (LOAD&PUSH 3)
484   (CALL2&PUSH 10)                     ; QUOT
486   (CALLSR&STORE 0 54 1)               ; -
490   L490
490   (GETVALUE&PUSH 7)                   ; S
492   (LOAD&PUSH 2)
493   (CALLSR 2 53)                       ; +
496   (SETVALUE 7)                        ; S
498   (JMP L7)

WARNING in CALCSC-SL in lines 918..948 :
TYPE is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
WARNING in CALCSC-SL in lines 918..948 :
TYPE is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
WARNING in CALCSC-SL in lines 918..948 :
TYPE is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(DEFUN CALCSC-SL NIL ...)-36|
(CONST 0) = CALCSC-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CALCSC-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CALCSC-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CALCSC-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CALCSC-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CALCSC-SL
8     (SKIP&RET 1)


Disassembly of function CALCSC-SL
(CONST 0) = *HR-SL*
(CONST 1) = 0
(CONST 2) = D
(CONST 3) = *QHR-SL*
(CONST 4) = 1
(CONST 5) = U
(CONST 6) = C
(CONST 7) = 2
(CONST 8) = N
(CONST 9) = V
(CONST 10) = 100.0
(CONST 11) = ARE
(CONST 12) = 3
(CONST 13) = TYPE
(CONST 14) = A
(CONST 15) = QUOT
(CONST 16) = E
(CONST 17) = F
(CONST 18) = B
(CONST 19) = G
(CONST 20) = H
(CONST 21) = A3
(CONST 22) = A1
(CONST 23) = A7
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARE N F H E G V B A C U D *QHR-SL* *HR-SL*)
writes special variables : (A7 A1 A3 H G F E TYPE C D)
183 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *HR-SL*
2     (CONST&PUSH 1)                      ; 0
3     (CALLSR 1 1)                        ; AREF
6     (SETVALUE 2)                        ; D
8     (GETVALUE&PUSH 3)                   ; *QHR-SL*
10    (GETVALUE&PUSH 2)                   ; D
12    (LOAD&PUSH 1)
13    (CONST&PUSH 1)                      ; 0
14    (LOAD&PUSH 2)
15    (CALLSR 1 2)                        ; SYSTEM::STORE
18    (SKIP 2)
20    (GETVALUE&PUSH 0)                   ; *HR-SL*
22    (CONST&PUSH 4)                      ; 1
23    (CALLSR&PUSH 1 1)                   ; AREF
26    (GETVALUE&PUSH 5)                   ; U
28    (GETVALUE&PUSH 2)                   ; D
30    (CALLSR&PUSH 2 55)                  ; *
33    (CALLSR 1 54)                       ; -
36    (SETVALUE 6)                        ; C
38    (GETVALUE&PUSH 3)                   ; *QHR-SL*
40    (GETVALUE&PUSH 6)                   ; C
42    (LOAD&PUSH 1)
43    (CONST&PUSH 4)                      ; 1
44    (LOAD&PUSH 2)
45    (CALLSR 1 2)                        ; SYSTEM::STORE
48    (SKIP 2)
50    (CONST&PUSH 7)                      ; 2
51    (NIL&PUSH)
52    (JMP L205)
55    L55
55    (CONST 12)                          ; 3
56    (SETVALUE 13)                       ; TYPE
58    (JMP L380)
61    L61
61    (CONST 7)                           ; 2
62    (SETVALUE 13)                       ; TYPE
64    (GETVALUE&PUSH 14)                  ; A
66    (GETVALUE&PUSH 2)                   ; D
68    (CALL2 15)                          ; QUOT
70    (SETVALUE 16)                       ; E
72    (GETVALUE&PUSH 6)                   ; C
74    (GETVALUE&PUSH 2)                   ; D
76    (CALL2 15)                          ; QUOT
78    (SETVALUE 17)                       ; F
80    (GETVALUE&PUSH 5)                   ; U
82    (GETVALUE&PUSH 18)                  ; B
84    (CALLSR 2 55)                       ; *
87    (SETVALUE 19)                       ; G
89    (GETVALUE&PUSH 9)                   ; V
91    (GETVALUE&PUSH 18)                  ; B
93    (CALLSR 2 55)                       ; *
96    (SETVALUE 20)                       ; H
98    (GETVALUE&PUSH 14)                  ; A
100   (GETVALUE&PUSH 19)                  ; G
102   (CALLSR&PUSH 2 53)                  ; +
105   (GETVALUE&PUSH 16)                  ; E
107   (CALLSR&PUSH 2 55)                  ; *
110   (GETVALUE&PUSH 20)                  ; H
112   (GETVALUE&PUSH 18)                  ; B
114   (GETVALUE&PUSH 2)                   ; D
116   (CALL2&PUSH 15)                     ; QUOT
118   (CALLSR&PUSH 2 55)                  ; *
121   (CALLSR 2 53)                       ; +
124   (SETVALUE 21)                       ; A3
126   (GETVALUE&PUSH 18)                  ; B
128   (GETVALUE&PUSH 17)                  ; F
130   (CALLSR&PUSH 2 55)                  ; *
133   (GETVALUE&PUSH 14)                  ; A
135   (CALLSR 1 54)                       ; -
138   (SETVALUE 22)                       ; A1
140   (GETVALUE&PUSH 17)                  ; F
142   (GETVALUE&PUSH 5)                   ; U
144   (CALLSR&PUSH 2 53)                  ; +
147   (GETVALUE&PUSH 14)                  ; A
149   (CALLSR&PUSH 2 55)                  ; *
152   (GETVALUE&PUSH 20)                  ; H
154   (CALLSR 2 53)                       ; +
157   (SETVALUE 23)                       ; A7
159   (JMP L380)
162   L162
162   (GETVALUE&PUSH 0)                   ; *HR-SL*
164   (LOAD&PUSH 2)
165   (CALLSR&PUSH 1 1)                   ; AREF
168   (GETVALUE&PUSH 5)                   ; U
170   (GETVALUE&PUSH 6)                   ; C
172   (CALLSR&PUSH 2 55)                  ; *
175   (GETVALUE&PUSH 9)                   ; V
177   (GETVALUE&PUSH 2)                   ; D
179   (CALLSR&PUSH 2 55)                  ; *
182   (CALLSR&STORE 2 54 0)               ; -
186   (GETVALUE&PUSH 3)                   ; *QHR-SL*
188   (LOAD&PUSH 0)
189   (LOAD&PUSH 3)
190   (LOAD&PUSH 3)
191   (CALLSR 1 2)                        ; SYSTEM::STORE
194   (SKIP 1)
196   (GETVALUE 6)                        ; C
198   (SETVALUE 2)                        ; D
200   (LOAD 0)
201   (SETVALUE 6)                        ; C
203   (LOAD&INC&STORE 1)
205   L205
205   (LOAD&PUSH 1)
206   (GETVALUE&PUSH 8)                   ; N
208   (CALLSR&JMPIFNOT 1 48 L162)         ; >
212   (SKIP 2)
214   (GETVALUE&PUSH 6)                   ; C
216   (CALLS2&PUSH 158)                   ; ABS
218   (GETVALUE&PUSH 0)                   ; *HR-SL*
220   (GETVALUE&PUSH 8)                   ; N
222   (CALLSR&PUSH 1 1)                   ; AREF
225   (CALLS2&PUSH 158)                   ; ABS
227   (CONST&PUSH 10)                     ; 100.0
228   (GETVALUE&PUSH 11)                  ; ARE
230   (CALLSR&PUSH 3 55)                  ; *
233   (CALLSR&JMPIF 1 48 L263)            ; >
237   (GETVALUE&PUSH 2)                   ; D
239   (CALLS2&PUSH 158)                   ; ABS
241   (GETVALUE&PUSH 0)                   ; *HR-SL*
243   (GETVALUE&PUSH 8)                   ; N
245   (CALLS2&PUSH 151)                   ; 1-
247   (CALLSR&PUSH 1 1)                   ; AREF
250   (CALLS2&PUSH 158)                   ; ABS
252   (CONST&PUSH 10)                     ; 100.0
253   (GETVALUE&PUSH 11)                  ; ARE
255   (CALLSR&PUSH 3 55)                  ; *
258   (CALLSR&JMPIFNOT 1 48 L55)          ; >
263   L263
263   (GETVALUE&PUSH 2)                   ; D
265   (CALLS2&PUSH 158)                   ; ABS
267   (GETVALUE&PUSH 6)                   ; C
269   (CALLS2&PUSH 158)                   ; ABS
271   (CALLSR&JMPIFNOT 1 47 L61)          ; <
276   (CONST 4)                           ; 1
277   (SETVALUE 13)                       ; TYPE
279   (GETVALUE&PUSH 14)                  ; A
281   (GETVALUE&PUSH 6)                   ; C
283   (CALL2 15)                          ; QUOT
285   (SETVALUE 16)                       ; E
287   (GETVALUE&PUSH 2)                   ; D
289   (GETVALUE&PUSH 6)                   ; C
291   (CALL2 15)                          ; QUOT
293   (SETVALUE 17)                       ; F
295   (GETVALUE&PUSH 5)                   ; U
297   (GETVALUE&PUSH 16)                  ; E
299   (CALLSR 2 55)                       ; *
302   (SETVALUE 19)                       ; G
304   (GETVALUE&PUSH 9)                   ; V
306   (GETVALUE&PUSH 18)                  ; B
308   (CALLSR 2 55)                       ; *
311   (SETVALUE 20)                       ; H
313   (GETVALUE&PUSH 14)                  ; A
315   (GETVALUE&PUSH 16)                  ; E
317   (CALLSR&PUSH 2 55)                  ; *
320   (GETVALUE&PUSH 20)                  ; H
322   (GETVALUE&PUSH 6)                   ; C
324   (CALL2&PUSH 15)                     ; QUOT
326   (GETVALUE&PUSH 19)                  ; G
328   (CALLSR&PUSH 2 53)                  ; +
331   (GETVALUE&PUSH 18)                  ; B
333   (CALLSR&PUSH 2 55)                  ; *
336   (CALLSR 2 53)                       ; +
339   (SETVALUE 21)                       ; A3
341   (GETVALUE&PUSH 18)                  ; B
343   (GETVALUE&PUSH 14)                  ; A
345   (GETVALUE&PUSH 2)                   ; D
347   (GETVALUE&PUSH 6)                   ; C
349   (CALL2&PUSH 15)                     ; QUOT
351   (CALLSR&PUSH 2 55)                  ; *
354   (CALLSR 1 54)                       ; -
357   (SETVALUE 22)                       ; A1
359   (GETVALUE&PUSH 14)                  ; A
361   (GETVALUE&PUSH 19)                  ; G
363   (GETVALUE&PUSH 2)                   ; D
365   (CALLSR&PUSH 2 55)                  ; *
368   (GETVALUE&PUSH 20)                  ; H
370   (GETVALUE&PUSH 17)                  ; F
372   (CALLSR&PUSH 2 55)                  ; *
375   (CALLSR 3 53)                       ; +
378   (SETVALUE 23)                       ; A7
380   L380
380   (NIL)
381   (SKIP&RET 1)

WARNING in NEXTK-SL in lines 950..971 :
TYPE is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
WARNING in NEXTK-SL in lines 950..971 :
TYPE is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(DEFUN NEXTK-SL NIL ...)-37|
(CONST 0) = NEXTK-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEXTK-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEXTK-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEXTK-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEXTK-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEXTK-SL
8     (SKIP&RET 1)


Disassembly of function NEXTK-SL
(CONST 0) = TYPE
(CONST 1) = 3
(CONST 2) = *HR-SL*
(CONST 3) = 0
(CONST 4) = 0.0
(CONST 5) = 1
(CONST 6) = 2
(CONST 7) = N
(CONST 8) = *QHR-SL*
(CONST 9) = A1
(CONST 10) = B
(CONST 11) = A
(CONST 12) = 10.0
(CONST 13) = ARE
(CONST 14) = A7
(CONST 15) = QUOT
(CONST 16) = A3
(CONST 17) = *QPR-SL*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A3 B *QHR-SL* N *QPR-SL* A7 *HR-SL* ARE A A1 TYPE)
writes special variables : (A3 A7)
164 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; TYPE
2     (CONST&PUSH 1)                      ; 3
3     (CALLSR&JMPIF 1 45 L77)             ; =
8     (GETVALUE&PUSH 9)                   ; A1
10    (CALLS2&PUSH 158)                   ; ABS
12    (GETVALUE&PUSH 0)                   ; TYPE
14    (CONST&PUSH 5)                      ; 1
15    (CALLSR&JMPIF 1 45 L130)            ; =
20    (GETVALUE 11)                       ; A
22    (JMPIF L25)
24    (NIL)
25    L25
25    (PUSH)
26    (CALLS2&PUSH 158)                   ; ABS
28    (CONST&PUSH 12)                     ; 10.0
29    (GETVALUE&PUSH 13)                  ; ARE
31    (CALLSR&PUSH 3 55)                  ; *
34    (CALLSR&JMPIF 1 48 L135)            ; >
39    (GETVALUE&PUSH 2)                   ; *HR-SL*
41    (LOAD&PUSH 0)
42    (CONST&PUSH 3)                      ; 0
43    (CONST&PUSH 4)                      ; 0.0
44    (CALLSR 1 2)                        ; SYSTEM::STORE
47    (SKIP 1)
49    (GETVALUE&PUSH 2)                   ; *HR-SL*
51    (GETVALUE&PUSH 14)                  ; A7
53    (GETVALUE&PUSH 17)                  ; *QPR-SL*
55    (CONST&PUSH 3)                      ; 0
56    (CALLSR&PUSH 1 1)                   ; AREF
59    (CALLSR&PUSH 2 55)                  ; *
62    (CALLSR&PUSH 0 54)                  ; -
65    (LOAD&PUSH 1)
66    (CONST&PUSH 5)                      ; 1
67    (LOAD&PUSH 2)
68    (CALLSR 1 2)                        ; SYSTEM::STORE
71    (SKIP 2)
73    (CONST&PUSH 6)                      ; 2
74    (JMP L301)
77    L77
77    (GETVALUE&PUSH 2)                   ; *HR-SL*
79    (LOAD&PUSH 0)
80    (CONST&PUSH 3)                      ; 0
81    (CONST&PUSH 4)                      ; 0.0
82    (CALLSR 1 2)                        ; SYSTEM::STORE
85    (SKIP 1)
87    (GETVALUE&PUSH 2)                   ; *HR-SL*
89    (LOAD&PUSH 0)
90    (CONST&PUSH 5)                      ; 1
91    (CONST&PUSH 4)                      ; 0.0
92    (CALLSR 1 2)                        ; SYSTEM::STORE
95    (SKIP 1)
97    (CONST&PUSH 6)                      ; 2
98    L98
98    (LOAD&PUSH 0)
99    (GETVALUE&PUSH 7)                   ; N
101   (CALLSR&JMPIF 1 48 L308)            ; >
106   (GETVALUE&PUSH 2)                   ; *HR-SL*
108   (GETVALUE&PUSH 8)                   ; *QHR-SL*
110   (LOAD&PUSH 2)
111   (CONST&PUSH 6)                      ; 2
112   (CALLSR&PUSH 1 54)                  ; -
115   (CALLSR&PUSH 1 1)                   ; AREF
118   (LOAD&PUSH 1)
119   (LOAD&PUSH 3)
120   (LOAD&PUSH 2)
121   (CALLSR 1 2)                        ; SYSTEM::STORE
124   (SKIP 2)
126   (LOAD&INC&STORE 0)
128   (JMP L98)
130   L130
130   (GETVALUE 10)                       ; B
132   (JMP L25)
135   L135
135   (GETVALUE&PUSH 14)                  ; A7
137   (GETVALUE&PUSH 9)                   ; A1
139   (CALL2 15)                          ; QUOT
141   (SETVALUE 14)                       ; A7
143   (GETVALUE&PUSH 16)                  ; A3
145   (GETVALUE&PUSH 9)                   ; A1
147   (CALL2 15)                          ; QUOT
149   (SETVALUE 16)                       ; A3
151   (GETVALUE&PUSH 2)                   ; *HR-SL*
153   (GETVALUE&PUSH 17)                  ; *QPR-SL*
155   (CONST&PUSH 3)                      ; 0
156   (CALLSR&PUSH 1 1)                   ; AREF
159   (LOAD&PUSH 1)
160   (CONST&PUSH 3)                      ; 0
161   (LOAD&PUSH 2)
162   (CALLSR 1 2)                        ; SYSTEM::STORE
165   (SKIP 2)
167   (GETVALUE&PUSH 2)                   ; *HR-SL*
169   (GETVALUE&PUSH 17)                  ; *QPR-SL*
171   (CONST&PUSH 5)                      ; 1
172   (CALLSR&PUSH 1 1)                   ; AREF
175   (GETVALUE&PUSH 14)                  ; A7
177   (GETVALUE&PUSH 17)                  ; *QPR-SL*
179   (CONST&PUSH 3)                      ; 0
180   (CALLSR&PUSH 1 1)                   ; AREF
183   (CALLSR&PUSH 2 55)                  ; *
186   (CALLSR&PUSH 1 54)                  ; -
189   (LOAD&PUSH 1)
190   (CONST&PUSH 5)                      ; 1
191   (LOAD&PUSH 2)
192   (CALLSR 1 2)                        ; SYSTEM::STORE
195   (SKIP 2)
197   (CONST&PUSH 6)                      ; 2
198   L198
198   (LOAD&PUSH 0)
199   (GETVALUE&PUSH 7)                   ; N
201   (CALLSR&JMPIF 1 48 L308)            ; >
206   (GETVALUE&PUSH 2)                   ; *HR-SL*
208   (GETVALUE&PUSH 16)                  ; A3
210   (GETVALUE&PUSH 8)                   ; *QHR-SL*
212   (LOAD&PUSH 3)
213   (CONST&PUSH 6)                      ; 2
214   (CALLSR&PUSH 1 54)                  ; -
217   (CALLSR&PUSH 1 1)                   ; AREF
220   (CALLSR&PUSH 2 55)                  ; *
223   (GETVALUE&PUSH 14)                  ; A7
225   (GETVALUE&PUSH 17)                  ; *QPR-SL*
227   (LOAD&DEC&PUSH 4)
229   (CALLSR&PUSH 1 1)                   ; AREF
232   (CALLSR&PUSH 2 55)                  ; *
235   (CALLSR&PUSH 0 54)                  ; -
238   (GETVALUE&PUSH 17)                  ; *QPR-SL*
240   (LOAD&PUSH 4)
241   (CALLSR&PUSH 1 1)                   ; AREF
244   (CALLSR&PUSH 3 53)                  ; +
247   (LOAD&PUSH 1)
248   (LOAD&PUSH 3)
249   (LOAD&PUSH 2)
250   (CALLSR 1 2)                        ; SYSTEM::STORE
253   (SKIP 2)
255   (LOAD&INC&STORE 0)
257   (JMP L198)
259   L259
259   (GETVALUE&PUSH 2)                   ; *HR-SL*
261   (GETVALUE&PUSH 16)                  ; A3
263   (GETVALUE&PUSH 8)                   ; *QHR-SL*
265   (LOAD&PUSH 3)
266   (CONST&PUSH 6)                      ; 2
267   (CALLSR&PUSH 1 54)                  ; -
270   (CALLSR&PUSH 1 1)                   ; AREF
273   (CALLSR&PUSH 2 55)                  ; *
276   (GETVALUE&PUSH 14)                  ; A7
278   (GETVALUE&PUSH 17)                  ; *QPR-SL*
280   (LOAD&DEC&PUSH 4)
282   (CALLSR&PUSH 1 1)                   ; AREF
285   (CALLSR&PUSH 2 55)                  ; *
288   (CALLSR&PUSH 1 54)                  ; -
291   (LOAD&PUSH 1)
292   (LOAD&PUSH 3)
293   (LOAD&PUSH 2)
294   (CALLSR 1 2)                        ; SYSTEM::STORE
297   (SKIP 2)
299   (LOAD&INC&STORE 0)
301   L301
301   (LOAD&PUSH 0)
302   (GETVALUE&PUSH 7)                   ; N
304   (CALLSR&JMPIFNOT 1 48 L259)         ; >
308   L308
308   (SKIP 1)
310   (NIL)
311   (SKIP&RET 1)

WARNING in NEWEST-SL in lines 973..997 :
TYPE is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
WARNING in NEWEST-SL in lines 973..997 :
TYPE is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(DEFUN NEWEST-SL NIL ...)-38|
(CONST 0) = NEWEST-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWEST-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWEST-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWEST-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWEST-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWEST-SL
8     (SKIP&RET 1)


Disassembly of function NEWEST-SL
(CONST 0) = 0.0
(CONST 1) = B1
(CONST 2) = B2
(CONST 3) = TYPE
(CONST 4) = 3
(CONST 5) = UI
(CONST 6) = VI
(CONST 7) = 2
(CONST 8) = A
(CONST 9) = G
(CONST 10) = F
(CONST 11) = H
(CONST 12) = U
(CONST 13) = C
(CONST 14) = V
(CONST 15) = D
(CONST 16) = B
(CONST 17) = *HR-SL*
(CONST 18) = N
(CONST 19) = *PR-SL*
(CONST 20) = NN
(CONST 21) = QUOT
(CONST 22) = A1
(CONST 23) = A7
(CONST 24) = A3
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (G A3 A7 A1 B2 B1 NN *PR-SL* N *HR-SL* D V C F H B U A TYPE)
writes special variables : (VI UI B2 B1)
140 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0.0
1     (CONST&PUSH 0)                      ; 0.0
2     (CONST 0)                           ; 0.0
3     (BIND 1)                            ; B1
5     (CONST 0)                           ; 0.0
6     (BIND 2)                            ; B2
8     (CONST&PUSH 0)                      ; 0.0
9     (CONST&PUSH 0)                      ; 0.0
10    (CONST&PUSH 0)                      ; 0.0
11    (CONST&PUSH 0)                      ; 0.0
12    (GETVALUE&PUSH 3)                   ; TYPE
14    (CONST&PUSH 4)                      ; 3
15    (CALLSR&JMPIF 1 45 L193)            ; =
20    (GETVALUE&PUSH 3)                   ; TYPE
22    (CONST&PUSH 7)                      ; 2
23    (CALLSR&JMPIF 1 45 L196)            ; =
28    (GETVALUE&PUSH 8)                   ; A
30    (GETVALUE&PUSH 12)                  ; U
32    (GETVALUE&PUSH 16)                  ; B
34    (CALLSR&PUSH 2 55)                  ; *
37    (GETVALUE&PUSH 11)                  ; H
39    (GETVALUE&PUSH 10)                  ; F
41    (CALLSR&PUSH 2 55)                  ; *
44    (CALLSR&STORE 3 53 11)              ; +
48    (GETVALUE&PUSH 13)                  ; C
50    (GETVALUE&PUSH 12)                  ; U
52    (GETVALUE&PUSH 14)                  ; V
54    (GETVALUE&PUSH 10)                  ; F
56    (CALLSR&PUSH 2 55)                  ; *
59    (CALLSR 2 53)                       ; +
62    L62
62    (PUSH)
63    (GETVALUE&PUSH 15)                  ; D
65    (CALLSR&PUSH 2 55)                  ; *
68    (CALLSR&STORE 2 53 10)              ; +
72    (GETVALUE&PUSH 17)                  ; *HR-SL*
74    (GETVALUE&PUSH 18)                  ; N
76    (CALLSR&PUSH 1 1)                   ; AREF
79    (GETVALUE&PUSH 19)                  ; *PR-SL*
81    (GETVALUE&PUSH 20)                  ; NN
83    (CALLSR&PUSH 1 1)                   ; AREF
86    (CALL2&PUSH 21)                     ; QUOT
88    (CALLSR 0 54)                       ; -
91    (SETVALUE 1)                        ; B1
93    (GETVALUE&PUSH 17)                  ; *HR-SL*
95    (GETVALUE&PUSH 18)                  ; N
97    (CALLS2&PUSH 151)                   ; 1-
99    (CALLSR&PUSH 1 1)                   ; AREF
102   (GETVALUE&PUSH 1)                   ; B1
104   (GETVALUE&PUSH 19)                  ; *PR-SL*
106   (GETVALUE&PUSH 18)                  ; N
108   (CALLSR&PUSH 1 1)                   ; AREF
111   (CALLSR&PUSH 2 55)                  ; *
114   (CALLSR&PUSH 2 53)                  ; +
117   (GETVALUE&PUSH 19)                  ; *PR-SL*
119   (GETVALUE&PUSH 20)                  ; NN
121   (CALLSR&PUSH 1 1)                   ; AREF
124   (CALL2&PUSH 21)                     ; QUOT
126   (CALLSR 0 54)                       ; -
129   (SETVALUE 2)                        ; B2
131   (GETVALUE&PUSH 14)                  ; V
133   (GETVALUE&PUSH 2)                   ; B2
135   (GETVALUE&PUSH 22)                  ; A1
137   (CALLSR&STORE 3 55 3)               ; *
141   (GETVALUE&PUSH 1)                   ; B1
143   (GETVALUE&PUSH 23)                  ; A7
145   (CALLSR&STORE 2 55 2)               ; *
149   (GETVALUE&PUSH 1)                   ; B1
151   (GETVALUE&PUSH 1)                   ; B1
153   (GETVALUE&PUSH 24)                  ; A3
155   (CALLSR&STORE 3 55 1)               ; *
159   (LOAD&PUSH 3)
160   (LOAD&PUSH 3)
161   (LOAD&PUSH 3)
162   (CALLSR&STORE 2 54 0)               ; -
166   (LOAD&PUSH 10)
167   (GETVALUE&PUSH 1)                   ; B1
169   (LOAD&PUSH 13)
170   (CALLSR&PUSH 2 55)                  ; *
173   (LOAD&PUSH 2)
174   (CALLSR&PUSH 0 54)                  ; -
177   (CALLSR&STORE 3 53 3)               ; +
181   (PUSH)
182   (CALLS2&JMPIFNOT 145 L231)          ; ZEROP
185   (CONST 0)                           ; 0.0
186   L186
186   (SETVALUE 5)                        ; UI
188   (SETVALUE 6)                        ; VI
190   (JMP L289)
193   L193
193   (CONST 0)                           ; 0.0
194   (JMP L186)
196   L196
196   (GETVALUE&PUSH 8)                   ; A
198   (GETVALUE&PUSH 9)                   ; G
200   (CALLSR&PUSH 2 53)                  ; +
203   (GETVALUE&PUSH 10)                  ; F
205   (CALLSR&PUSH 2 55)                  ; *
208   (GETVALUE&PUSH 11)                  ; H
210   (CALLSR&STORE 2 53 11)              ; +
214   (GETVALUE&PUSH 10)                  ; F
216   (GETVALUE&PUSH 12)                  ; U
218   (CALLSR&PUSH 2 53)                  ; +
221   (GETVALUE&PUSH 13)                  ; C
223   (CALLSR&PUSH 2 55)                  ; *
226   (GETVALUE 14)                       ; V
228   (JMP L62)
231   L231
231   (GETVALUE&PUSH 12)                  ; U
233   (GETVALUE&PUSH 12)                  ; U
235   (LOAD&PUSH 3)
236   (LOAD&PUSH 5)
237   (CALLSR&PUSH 2 53)                  ; +
240   (CALLSR&PUSH 2 55)                  ; *
243   (GETVALUE&PUSH 14)                  ; V
245   (GETVALUE&PUSH 1)                   ; B1
247   (GETVALUE&PUSH 22)                  ; A1
249   (CALLSR&PUSH 2 55)                  ; *
252   (GETVALUE&PUSH 2)                   ; B2
254   (GETVALUE&PUSH 23)                  ; A7
256   (CALLSR&PUSH 2 55)                  ; *
259   (CALLSR&PUSH 2 53)                  ; +
262   (CALLSR&PUSH 2 55)                  ; *
265   (CALLSR&PUSH 2 53)                  ; +
268   (LOAD&PUSH 5)
269   (CALL2&PUSH 21)                     ; QUOT
271   (CALLSR 1 54)                       ; -
274   (SETVALUE 5)                        ; UI
276   (GETVALUE&PUSH 14)                  ; V
278   (LOAD&PUSH 1)
279   (LOAD&PUSH 5)
280   (CALL2&PUSH 21)                     ; QUOT
282   (CALLS2&PUSH 150)                   ; 1+
284   (CALLSR 2 55)                       ; *
287   (SETVALUE 6)                        ; VI
289   L289
289   (NIL)
290   (SKIP 4)
292   (UNBIND 2)
294   (SKIP&RET 3)


Disassembly of function #:|(DEFUN QUADSD-SL NIL ...)-39|
(CONST 0) = QUADSD-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE QUADSD-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; QUADSD-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; QUADSD-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE QUADSD-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; QUADSD-SL
8     (SKIP&RET 1)


Disassembly of function QUADSD-SL
(CONST 0) = *PR-SL*
(CONST 1) = 0
(CONST 2) = B
(CONST 3) = *QPR-SL*
(CONST 4) = 1
(CONST 5) = U
(CONST 6) = A
(CONST 7) = 2
(CONST 8) = NN
(CONST 9) = V
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NN V A U B *QPR-SL* *PR-SL*)
writes special variables : (A B)
57 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *PR-SL*
2     (CONST&PUSH 1)                      ; 0
3     (CALLSR 1 1)                        ; AREF
6     (SETVALUE 2)                        ; B
8     (GETVALUE&PUSH 3)                   ; *QPR-SL*
10    (GETVALUE&PUSH 2)                   ; B
12    (LOAD&PUSH 1)
13    (CONST&PUSH 1)                      ; 0
14    (LOAD&PUSH 2)
15    (CALLSR 1 2)                        ; SYSTEM::STORE
18    (SKIP 2)
20    (GETVALUE&PUSH 0)                   ; *PR-SL*
22    (CONST&PUSH 4)                      ; 1
23    (CALLSR&PUSH 1 1)                   ; AREF
26    (GETVALUE&PUSH 5)                   ; U
28    (GETVALUE&PUSH 2)                   ; B
30    (CALLSR&PUSH 2 55)                  ; *
33    (CALLSR 1 54)                       ; -
36    (SETVALUE 6)                        ; A
38    (GETVALUE&PUSH 3)                   ; *QPR-SL*
40    (GETVALUE&PUSH 6)                   ; A
42    (LOAD&PUSH 1)
43    (CONST&PUSH 4)                      ; 1
44    (LOAD&PUSH 2)
45    (CALLSR 1 2)                        ; SYSTEM::STORE
48    (SKIP 2)
50    (CONST&PUSH 7)                      ; 2
51    (NIL&PUSH)
52    (JMP L97)
54    L54
54    (GETVALUE&PUSH 0)                   ; *PR-SL*
56    (LOAD&PUSH 2)
57    (CALLSR&PUSH 1 1)                   ; AREF
60    (GETVALUE&PUSH 5)                   ; U
62    (GETVALUE&PUSH 6)                   ; A
64    (CALLSR&PUSH 2 55)                  ; *
67    (GETVALUE&PUSH 9)                   ; V
69    (GETVALUE&PUSH 2)                   ; B
71    (CALLSR&PUSH 2 55)                  ; *
74    (CALLSR&STORE 2 54 0)               ; -
78    (GETVALUE&PUSH 3)                   ; *QPR-SL*
80    (LOAD&PUSH 0)
81    (LOAD&PUSH 3)
82    (LOAD&PUSH 3)
83    (CALLSR 1 2)                        ; SYSTEM::STORE
86    (SKIP 1)
88    (GETVALUE 6)                        ; A
90    (SETVALUE 2)                        ; B
92    (LOAD 0)
93    (SETVALUE 6)                        ; A
95    (LOAD&INC&STORE 1)
97    L97
97    (LOAD&PUSH 1)
98    (GETVALUE&PUSH 8)                   ; NN
100   (CALLSR&JMPIFNOT 1 48 L54)          ; >
104   (NIL)
105   (SKIP&RET 3)


Disassembly of function #:|(DEFUN QUAD-SL (A0 B1 C0) ...)-40|
(CONST 0) = QUAD-SL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE QUAD-SL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; QUAD-SL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; QUAD-SL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE QUAD-SL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; QUAD-SL
8     (SKIP&RET 1)


Disassembly of function QUAD-SL
(CONST 0) = B1
(CONST 1) = 0.0
(CONST 2) = SZR
(CONST 3) = SZI
(CONST 4) = LZR
(CONST 5) = LZI
(CONST 6) = D0
(CONST 7) = E
(CONST 8) = QUOT
(CONST 9) = 2.0
(CONST 10) = 1.0
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LZR D0 E B1)
writes special variables : (D0 E LZI LZR SZI SZR)
132 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B1
3     (CONST 1)                           ; 0.0
4     (SETVALUE 2)                        ; SZR
6     (SETVALUE 3)                        ; SZI
8     (SETVALUE 4)                        ; LZR
10    (SETVALUE 5)                        ; LZI
12    (PUSH)
13    (CONST 1)                           ; 0.0
14    (BIND 6)                            ; D0
16    (CONST 1)                           ; 0.0
17    (BIND 7)                            ; E
19    (LOAD&PUSH 13)
20    (CALLS2&JMPIF 145 L131)             ; ZEROP
24    (LOAD&PUSH 11)
25    (CALLS2&JMPIF 145 L148)             ; ZEROP
29    (GETVALUE&PUSH 0)                   ; B1
31    (CONST&PUSH 9)                      ; 2.0
32    (CALL2 8)                           ; QUOT
34    (STORE 6)
35    (PUSH)
36    (CALLS2&PUSH 158)                   ; ABS
38    (LOAD&PUSH 12)
39    (CALLS2&PUSH 158)                   ; ABS
41    (CALLSR&JMPIF 1 47 L160)            ; <
46    (CONST&PUSH 10)                     ; 1.0
47    (LOAD&PUSH 14)
48    (LOAD&PUSH 8)
49    (CALL2&PUSH 8)                      ; QUOT
51    (LOAD&PUSH 13)
52    (LOAD&PUSH 9)
53    (CALL2&PUSH 8)                      ; QUOT
55    (CALLSR&PUSH 2 55)                  ; *
58    (CALLSR 1 54)                       ; -
61    (SETVALUE 7)                        ; E
63    (PUSH)
64    (CALLS2&PUSH 158)                   ; ABS
66    (CALLS2&PUSH 156)                   ; SQRT
68    (LOAD&PUSH 7)
69    (CALLS2 158)                        ; ABS
71    L71
71    (PUSH)
72    (CALLSR 2 55)                       ; *
75    (SETVALUE 6)                        ; D0
77    (GETVALUE&PUSH 7)                   ; E
79    (CONST&PUSH 1)                      ; 0.0
80    (CALLSR&JMPIF 1 47 L205)            ; <
85    (LOAD&PUSH 6)
86    (CONST&PUSH 1)                      ; 0.0
87    (CALLSR&JMPIF 1 47 L98)             ; <
91    (GETVALUE&PUSH 6)                   ; D0
93    (CALLSR 0 54)                       ; -
96    (SETVALUE 6)                        ; D0
98    L98
98    (GETVALUE&PUSH 6)                   ; D0
100   (LOAD&PUSH 7)
101   (CALLSR&PUSH 1 54)                  ; -
104   (LOAD&PUSH 14)
105   (CALL2 8)                           ; QUOT
107   (SETVALUE 4)                        ; LZR
109   (PUSH)
110   (CALLS2&JMPIF 145 L123)             ; ZEROP
113   (LOAD&PUSH 11)
114   (GETVALUE&PUSH 4)                   ; LZR
116   (CALL2&PUSH 8)                      ; QUOT
118   (LOAD&PUSH 14)
119   (CALL2 8)                           ; QUOT
121   (SETVALUE 2)                        ; SZR
123   L123
123   (NIL)
124   (UNBIND 2)
126   (SKIP 1)
128   (UNBIND1)
129   (SKIP&RET 4)
131   L131
131   (GETVALUE&PUSH 0)                   ; B1
133   (CALLS2&JMPIF 145 L123)             ; ZEROP
136   (LOAD&PUSH 11)
137   (GETVALUE&PUSH 0)                   ; B1
139   (CALL2&PUSH 8)                      ; QUOT
141   (CALLSR 0 54)                       ; -
144   (SETVALUE 2)                        ; SZR
146   (JMP L123)
148   L148
148   (GETVALUE&PUSH 0)                   ; B1
150   (LOAD&PUSH 14)
151   (CALL2&PUSH 8)                      ; QUOT
153   (CALLSR 0 54)                       ; -
156   (SETVALUE 4)                        ; LZR
158   (JMP L123)
160   L160
160   (LOAD 13)
161   (SETVALUE 7)                        ; E
163   (LOAD&PUSH 11)
164   (CONST&PUSH 1)                      ; 0.0
165   (CALLSR&JMPIFNOT 1 47 L175)         ; <
169   (LOAD&PUSH 13)
170   (CALLSR 0 54)                       ; -
173   (SETVALUE 7)                        ; E
175   L175
175   (LOAD&PUSH 6)
176   (LOAD&PUSH 7)
177   (LOAD&PUSH 13)
178   (CALLS2&PUSH 158)                   ; ABS
180   (CALL2&PUSH 8)                      ; QUOT
182   (CALLSR&PUSH 2 55)                  ; *
185   (GETVALUE&PUSH 7)                   ; E
187   (CALLSR 1 54)                       ; -
190   (SETVALUE 7)                        ; E
192   (PUSH)
193   (CALLS2&PUSH 158)                   ; ABS
195   (CALLS2&PUSH 156)                   ; SQRT
197   (LOAD&PUSH 12)
198   (CALLS2&PUSH 158)                   ; ABS
200   (CALLS2 156)                        ; SQRT
202   (JMP L71)
205   L205
205   (LOAD&PUSH 6)
206   (LOAD&PUSH 14)
207   (CALL2&PUSH 8)                      ; QUOT
209   (CALLSR 0 54)                       ; -
212   (SETVALUE 2)                        ; SZR
214   (SETVALUE 4)                        ; LZR
216   (GETVALUE&PUSH 6)                   ; D0
218   (LOAD&PUSH 14)
219   (CALL2&PUSH 8)                      ; QUOT
221   (CALLS2 158)                        ; ABS
223   (SETVALUE 3)                        ; SZI
225   (PUSH)
226   (CALLSR 0 54)                       ; -
229   (SETVALUE 5)                        ; LZI
231   (JMP L123)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL LOGBAS INFIN ...))-41|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL LOGBAS INFIN ...))-42|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/cpoly.fas
Wrote file /cygdrive/e/temp/maxima/src/cpoly.lis