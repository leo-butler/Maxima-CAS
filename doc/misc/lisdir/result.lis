Listing of compilation of file /cygdrive/e/temp/maxima/src/result.lisp
on 2002-12-17 13:33:33 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/result.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE RESULT)-2|
(CONST 0) = RESULT
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESULT
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VARLIST GENVAR ...))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RATMAC)-4|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE MRESUL))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $POLY_DISCRIMINANT (POLY VAR) ...)-6|
(CONST 0) = $POLY_DISCRIMINANT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $POLY_DISCRIMINANT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $POLY_DISCRIMINANT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $POLY_DISCRIMINANT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $POLY_DISCRIMINANT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $POLY_DISCRIMINANT
8     (SKIP&RET 1)


Disassembly of function $POLY_DISCRIMINANT
(CONST 0) = VAR
(CONST 1) = VARLIST
(CONST 2) = GENVAR
(CONST 3) = RFORM
(CONST 4) = PDEGREE
(CONST 5) = 1
(CONST 6) = 0
(CONST 7) = "ARG. MUST BE A POLYNOMIAL IN VAR"
(CONST 8) = MERROR
(CONST 9) = 2
(CONST 10) = QUOT
(CONST 11) = PDERIVATIVE
(CONST 12) = RESULTANT
(CONST 13) = PQUOTIENT
(CONST 14) = PRESIGN
(CONST 15) = PDIS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR VAR)
54 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE&PUSH 0)                   ; VAR
5     (LIST 1)
7     (BIND 1)                            ; VARLIST
9     (NIL)
10    (BIND 2)                            ; GENVAR
12    (LOAD&PUSH 11)
13    (CALL1&PUSH 3)                      ; RFORM
15    (GETVALUE&PUSH 2)                   ; GENVAR
17    (PUSH-UNBOUND 1)
19    (CALLS1 156)                        ; LAST
21    (CAR&PUSH)
22    (LOAD&CAR&STORE 1 13)
25    (PUSH)
26    (LOAD&PUSH 1)
27    (CALL2&PUSH 4)                      ; PDEGREE
29    (LOAD&PUSH 0)
30    (CONST&PUSH 5)                      ; 1
31    (CALLSR&JMPIF 1 45 L78)             ; =
35    (LOAD&PUSH 0)
36    (CONST&PUSH 6)                      ; 0
37    (CALLSR&JMPIF 1 45 L81)             ; =
41    (LOAD 2)
42    (CDR)
43    (JMPIFCONSP L81)
45    (LOAD&PUSH 0)
46    (LOAD&DEC&PUSH 1)
48    (CALLSR&PUSH 2 55)                  ; *
51    (CONST&PUSH 9)                      ; 2
52    (CALL2&PUSH 10)                     ; QUOT
54    (LOAD&PUSH 15)
55    (LOAD&PUSH 16)
56    (LOAD&PUSH 4)
57    (CALL2&PUSH 11)                     ; PDERIVATIVE
59    (CALL2&PUSH 12)                     ; RESULTANT
61    (LOAD 16)
63    (CDR)
64    (CDR)
65    (CAR&PUSH)
66    (CALL2&PUSH 13)                     ; PQUOTIENT
68    (CALL2&PUSH 14)                     ; PRESIGN
70    (CALL1 15)                          ; PDIS
72    L72
72    (SKIP 3)
74    (UNBIND 3)
76    (SKIP&RET 3)
78    L78
78    (CONST 5)                           ; 1
79    (JMP L72)
81    L81
81    (CONST&PUSH 7)                      ; "ARG. MUST BE A POLYNOMIAL IN VAR"
82    (CALL1 8)                           ; MERROR
84    (JMP L72)


Disassembly of function #:|(DEFMFUN $RESULTANT (A B MAINVAR) ...)-7|
(CONST 0) = $RESULTANT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RESULTANT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RESULTANT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RESULTANT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RESULTANT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RESULTANT
8     (SKIP&RET 1)


Disassembly of function $RESULTANT
(CONST 0) = B
(CONST 1) = VARLIST
(CONST 2) = $RATFAC
(CONST 3) = RES
(CONST 4) = GENVAR
(CONST 5) = $KEEPFLOAT
(CONST 6) = 1
(CONST 7) = $RATP
(CONST 8) = $RATDISREP
(CONST 9) = NEWVAR
(CONST 10) = RATREP*
(CONST 11) = LMAKE2
(CONST 12) = RESULT1
(CONST 13) = MAKPROD
(CONST 14) = PEXPT
(CONST 15) = PTIMESCHK
(CONST 16) = PTIMES
(CONST 17) = PDIS*
(CONST 18) = PDIS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RES B)
writes special variables : (RES B $RATFAC VARLIST)
131 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (NIL)
4     (BIND 1)                            ; VARLIST
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; $RATFAC
10    (NIL)
11    (BIND 3)                            ; RES
13    (NIL&PUSH)
14    (NIL)
15    (BIND 4)                            ; GENVAR
17    (NIL)
18    (BIND 5)                            ; $KEEPFLOAT
20    (LOAD&PUSH 21)
21    (LIST 1)
23    (SETVALUE 1)                        ; VARLIST
25    (T)
26    (SETVALUE 2)                        ; $RATFAC
28    (CONST 6)                           ; 1
29    (STORE 6)
30    (LOAD&PUSH 23)
31    (CALL1&JMPIFNOT 7 L41)              ; $RATP
34    (T&STORE 13)
36    (LOAD&PUSH 23)
37    (CALL1 8)                           ; $RATDISREP
39    (STORE 23)
41    L41
41    (GETVALUE&PUSH 0)                   ; B
43    (CALL1&JMPIFNOT 7 L54)              ; $RATP
46    (T&STORE 13)
48    (GETVALUE&PUSH 0)                   ; B
50    (CALL1 8)                           ; $RATDISREP
52    (SETVALUE 0)                        ; B
54    L54
54    (LOAD&PUSH 23)
55    (CALL1 9)                           ; NEWVAR
57    (GETVALUE&PUSH 0)                   ; B
59    (CALL1 9)                           ; NEWVAR
61    (LOAD&PUSH 23)
62    (CALL1 10)                          ; RATREP*
64    (CDR)
65    (CAR&PUSH)
66    (NIL&PUSH)
67    (CALL2 11)                          ; LMAKE2
69    (STORE 23)
71    (GETVALUE&PUSH 0)                   ; B
73    (CALL1 10)                          ; RATREP*
75    (CDR)
76    (CAR&PUSH)
77    (NIL&PUSH)
78    (CALL2 11)                          ; LMAKE2
80    (SETVALUE 0)                        ; B
82    (LOAD&PUSH 21)
83    (CALL1 10)                          ; RATREP*
85    (CDR)
86    (CAR)
87    (CAR)
88    (STORE 21)
90    (LOAD&PUSH 23)
91    (LOAD&JMPIFNOT 0 L171)
95    L95
95    (GETVALUE&PUSH 0)                   ; B
97    (LOAD&JMPIFNOT 0 L163)
100   L100
100   (LOAD 1)
101   (CAR)
102   (CAR&PUSH)
103   (LOAD 1)
104   (CAR)
105   (CAR&PUSH)
106   (LOAD&PUSH 25)
108   (CALL 3 12)                         ; RESULT1
111   (SETVALUE 3)                        ; RES
113   (LOAD&PUSH 8)
114   (GETVALUE 3)                        ; RES
116   (CDR)
117   (CDR)
118   (CAR&PUSH)
119   (CALLS2&JMPIF 145 L191)             ; ZEROP
123   (GETVALUE 3)                        ; RES
125   (CAR&PUSH)
126   (GETVALUE 3)                        ; RES
128   (CDR)
129   (CAR&PUSH)
130   (NIL&PUSH)
131   (CALL2&PUSH 13)                     ; MAKPROD
133   (GETVALUE 3)                        ; RES
135   (CDR)
136   (CDR)
137   (CAR&PUSH)
138   (CALL2&PUSH 14)                     ; PEXPT
140   (CALL2 15)                          ; PTIMESCHK
142   L142
142   (PUSH)
143   (LOAD 3)
144   (CAR)
145   (CDR&PUSH)
146   (LOAD 3)
147   (CAR)
148   (CDR&PUSH)
149   (CALLSR&PUSH 2 55)                  ; *
152   (CALL2&PUSH 14)                     ; PEXPT
154   (CALL2 16)                          ; PTIMES
156   (STORE 8)
158   (LOAD&CDR&STORE 0)
160   (LOAD&JMPIF 0 L100)
163   L163
163   (SKIP 1)
165   (LOAD&CDR&STORE 0)
167   (LOAD&JMPIF 0 L95)
171   L171
171   (SKIP 1)
173   (LOAD&JMPIF 13 L196)
176   (LOAD&PUSH 6)
177   (CALL1 18)                          ; PDIS
179   L179
179   (UNBIND 2)
181   (SKIP 1)
183   (UNBIND 2)
185   (SKIP 1)
187   (UNBIND 2)
189   (SKIP&RET 4)
191   L191
191   (GETVALUE 3)                        ; RES
193   (CAR)
194   (JMP L142)
196   L196
196   (LOAD&PUSH 6)
197   (CALL1 17)                          ; PDIS*
199   (JMP L179)


Disassembly of function #:|(DEFUN RESULT1 (P1 P2 VAR) ...)-8|
(CONST 0) = RESULT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESULT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESULT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESULT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESULT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESULT1
8     (SKIP&RET 1)


Disassembly of function RESULT1
(CONST 0) = VAR
(CONST 1) = B
(CONST 2) = 1
(CONST 3) = PDEGREE
(CONST 4) = 0
(CONST 5) = PEXPT
(CONST 6) = PCSUBSTY
(CONST 7) = PGCDEXPON
(CONST 8) = PEXPON*//
(CONST 9) = RESULTANT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B VAR)
writes special variable : (VAR)
129 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD 6)
4     (JMPIFATOM L87)
7     (GETVALUE&PUSH 0)                   ; VAR
9     (LOAD 7)
10    (CAR)
11    (BIND 1)                            ; B
13    (LOAD&PUSH 3)
14    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
16    (GETVALUE&PUSH 1)                   ; B
18    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
20    (CALLSR 1 48)                       ; >
23    (UNBIND1)
24    (SKIP 1)
26    (JMPIF L87)
28    (LOAD 5)
29    (JMPIFATOM L92)
31    (GETVALUE&PUSH 0)                   ; VAR
33    (LOAD 6)
34    (CAR)
35    (BIND 1)                            ; B
37    (LOAD&PUSH 3)
38    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
40    (GETVALUE&PUSH 1)                   ; B
42    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
44    (CALLSR 1 48)                       ; >
47    (UNBIND1)
48    (SKIP 1)
50    (JMPIF L92)
52    (LOAD 6)
53    (CDR)
54    (CDR)
55    (CDR)
56    (JMPIFNOT L109)
58    (LOAD 5)
59    (CDR)
60    (CDR)
61    (CDR)
62    (JMPIF L155)
65    (LOAD 5)
66    (CDR)
67    (CDR)
68    (CAR&PUSH)
69    (LOAD 7)
70    (CDR)
71    (CAR&PUSH)
72    (CALL2&PUSH 5)                      ; PEXPT
74    (CONST&PUSH 4)                      ; 0
75    (GETVALUE&PUSH 0)                   ; VAR
77    (LOAD&PUSH 9)
78    (CALL&PUSH 3 6)                     ; PCSUBSTY
81    (LOAD 7)
82    L82
82    (CDR)
83    (CAR)
84    (JMP L178)
87    L87
87    (CONST&PUSH 2)                      ; 1
88    (LOAD&PUSH 7)
89    (LOAD 7)
90    (JMP L95)
92    L92
92    (CONST&PUSH 2)                      ; 1
93    (LOAD&PUSH 6)
94    (LOAD 8)
95    L95
95    (PUSH)
96    (GETVALUE&PUSH 0)                   ; VAR
98    (CALL2 3)                           ; PDEGREE
100   (JMP L178)
103   L103
103   (CONST&PUSH 4)                      ; 0
104   (CONST&PUSH 4)                      ; 0
105   (CONST 2)                           ; 1
106   (JMP L178)
109   L109
109   (LOAD 5)
110   (CDR)
111   (CDR)
112   (CDR)
113   (JMPIFNOT L103)
115   (LOAD 6)
116   (CDR)
117   (CDR)
118   (CAR&PUSH)
119   (LOAD 6)
120   (CDR)
121   (CAR&PUSH)
122   (CALL2&PUSH 5)                      ; PEXPT
124   (CONST&PUSH 4)                      ; 0
125   (GETVALUE&PUSH 0)                   ; VAR
127   (LOAD&PUSH 8)
128   (CALL&PUSH 3 6)                     ; PCSUBSTY
131   (LOAD 8)
132   (JMP L82)
134   L134
134   (CONST&PUSH 2)                      ; 1
135   (LOAD&PUSH 7)
136   (GETVALUE&PUSH 0)                   ; VAR
138   (NIL&PUSH)
139   (CALL&PUSH 3 8)                     ; PEXPON*//
142   (LOAD&PUSH 7)
143   (GETVALUE&PUSH 0)                   ; VAR
145   (NIL&PUSH)
146   (CALL&PUSH 3 8)                     ; PEXPON*//
149   (CALL2&PUSH 9)                      ; RESULTANT
151   (GETVALUE 0)                        ; VAR
153   (JMP L178)
155   L155
155   (LOAD&PUSH 6)
156   (CALL1&PUSH 7)                      ; PGCDEXPON
158   (LOAD&PUSH 6)
159   (CALL1&PUSH 7)                      ; PGCDEXPON
161   (CALLSR 2 57)                       ; GCD
164   (SETVALUE 0)                        ; VAR
166   (PUSH)
167   (CONST&PUSH 2)                      ; 1
168   (CALLSR&JMPIF 1 48 L134)            ; >
172   (CONST&PUSH 2)                      ; 1
173   (LOAD&PUSH 7)
174   (LOAD&PUSH 7)
175   (CALL2&PUSH 9)                      ; RESULTANT
177   (CONST 2)                           ; 1
178   L178
178   (PUSH)
179   (LIST 3)
181   (UNBIND1)
182   (SKIP&RET 4)


Disassembly of function #:|(DEFMVAR $RESULTANT '$SUBRES ...)-9-1|
(CONST 0) = $RESULTANT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $SUBRES
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RESULTANT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RESULTANT
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $SUBRES
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RESULTANT '$SUBRES ...)-9-2|
(CONST 0) = (SPECIAL $RESULTANT)
(CONST 1) = $RESULTANT
(CONST 2) = $SUBRES
(CONST 3) = VARIABLE
(CONST 4) = "Designates which resultant algorithm"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RESULTANT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RESULTANT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RESULTANT
8     (CONST&PUSH 2)                      ; $SUBRES
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $RESULTANT
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Designates which resultant algorithm"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $RESULTANT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *RESULTLIST '($SUBRES $MOD $RED))-10|
(CONST 0) = (SPECIAL *RESULTLIST)
(CONST 1) = *RESULTLIST
(CONST 2) = ($SUBRES $MOD $RED)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *RESULTLIST)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *RESULTLIST
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *RESULTLIST
8     (CONST&PUSH 2)                      ; ($SUBRES $MOD $RED)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *RESULTLIST
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN RESULTANT (P1 P2) ...)-11|
(CONST 0) = RESULTANT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESULTANT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESULTANT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESULTANT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESULTANT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESULTANT
8     (SKIP&RET 1)


Disassembly of function RESULTANT
(CONST 0) = PRESIGN
(CONST 1) = $RESULTANT
(CONST 2) = $SUBRES
(CONST 3) = SUBRESULT
(CONST 4) = $RED
(CONST 5) = REDRESULT
(CONST 6) = "No such resultant algorithm"
(CONST 7) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($RESULTANT)
39 byte-code instructions:
0     L0
0     (LOAD 1)
1     (CDR)
2     (CAR&PUSH)
3     (LOAD 3)
4     (CDR)
5     (CAR&PUSH)
6     (CALLSR&JMPIF 1 48 L25)             ; >
10    (GETVALUE&PUSH 1)                   ; $RESULTANT
12    (LOAD&PUSH 0)
13    (JMPIFEQTO 2 L42)                   ; $SUBRES
16    (LOAD&PUSH 0)
17    (JMPIFEQTO 4 L48)                   ; $RED
20    (CONST&PUSH 6)                      ; "No such resultant algorithm"
21    (CALL1 7)                           ; MERROR
23    (SKIP&RET 4)
25    L25
25    (LOAD 2)
26    (CDR)
27    (CAR&PUSH)
28    (LOAD 2)
29    (CDR)
30    (CAR&PUSH)
31    (CALLSR&PUSH 2 55)                  ; *
34    (LOAD&PUSH 2)
35    (LOAD&PUSH 4)
36    (JSR&PUSH L0)
38    (CALL2 0)                           ; PRESIGN
40    (SKIP&RET 3)
42    L42
42    (LOAD&PUSH 3)
43    (LOAD&PUSH 3)
44    (CALL2 3)                           ; SUBRESULT
46    (SKIP&RET 4)
48    L48
48    (LOAD&PUSH 3)
49    (LOAD&PUSH 3)
50    (CALL2 5)                           ; REDRESULT
52    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PRESIGN (N P) ...)-12|
(CONST 0) = PRESIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRESIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRESIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRESIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRESIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRESIGN
8     (SKIP&RET 1)


Disassembly of function PRESIGN
(CONST 0) = P
(CONST 1) = PMINUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (LOAD&PUSH 5)
4     (CALLS2&JMPIF 148 L12)              ; ODDP
7     (GETVALUE 0)                        ; P
9     L9
9     (UNBIND1)
10    (SKIP&RET 3)
12    L12
12    (GETVALUE&PUSH 0)                   ; P
14    (CALL1 1)                           ; PMINUS
16    (JMP L9)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE SUBRES))-13|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN SUBRESULT (P Q) ...)-14|
(CONST 0) = SUBRESULT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBRESULT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBRESULT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBRESULT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBRESULT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBRESULT
8     (SKIP&RET 1)


Disassembly of function SUBRESULT
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = PDEGREE
(CONST 3) = PEXPT
(CONST 4) = X
(CONST 5) = FIXNUMP
(CONST 6) = PQUOTIENT
(CONST 7) = PREM
(CONST 8) = PTIMES
(CONST 9) = PRESIGN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P)
writes special variable : (P)
101 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (PUSH-NIL 5)
5     (CONST 1)                           ; 1
6     (STORE 4)
7     (STORE 3)
8     L8
8     (LOAD&PUSH 9)
9     (GETVALUE 0)                        ; P
11    (CAR&PUSH)
12    (CALL2&PUSH 2)                      ; PDEGREE
14    (LOAD 0)
15    (STORE 3)
16    (SKIP 1)
18    (GETVALUE 0)                        ; P
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 3)
23    (CALLSR&PUSH 1 54)                  ; -
26    (LOAD 0)
27    (STORE 2)
28    (SKIP 1)
30    (LOAD&PUSH 3)
31    (JMPIFEQTO 1 L75)                   ; 1
34    (LOAD&PUSH 3)
35    (LOAD&DEC&PUSH 2)
37    (CALL2 3)                           ; PEXPT
39    L39
39    (PUSH)
40    (LOAD 0)
41    (STORE 1)
42    (SKIP 1)
44    (LOAD&PUSH 2)
45    (CALLS2&JMPIFNOT 145 L86)           ; ZEROP
48    (LOAD 9)
49    (BIND 4)                            ; X
51    (GETVALUE&PUSH 4)                   ; X
53    (CALL1&JMPIF 5 L66)                 ; FIXNUMP
56    (GETVALUE 4)                        ; X
58    (JMPIFCONSP L129)
61    (GETVALUE&PUSH 4)                   ; X
63    (CALLS2&JMPIFNOT 15 L78)            ; FLOATP
66    L66
66    (GETVALUE&PUSH 4)                   ; X
68    (CALLS2 145)                        ; ZEROP
70    (UNBIND1)
71    (JMPIFNOT L130)
73    (JMP L81)
75    L75
75    (CONST 1)                           ; 1
76    (JMP L39)
78    L78
78    (UNBIND1)
79    (JMPIFNOT L130)
81    L81
81    (LOAD 9)
82    (SKIP 5)
84    (JMP L140)
86    L86
86    (LOAD&PUSH 9)
87    (LOAD&INC&PUSH 2)
89    (GETVALUE&PUSH 0)                   ; P
91    (LOAD&PUSH 12)
92    (CALL2&PUSH 7)                      ; PREM
94    (LOAD&PUSH 7)
95    (LOAD&PUSH 7)
96    (LOAD&PUSH 5)
97    (CALL2&PUSH 8)                      ; PTIMES
99    (CALL2&PUSH 8)                      ; PTIMES
101   (CALL2&PUSH 6)                      ; PQUOTIENT
103   (CALL2 9)                           ; PRESIGN
105   (STORE 10)
107   (POP)
108   (SETVALUE 0)                        ; P
110   (CDR)
111   (CDR)
112   (CAR&PUSH)
113   (LOAD 0)
114   (STORE 5)
115   (STORE 0)
116   (LOAD&PUSH 2)
117   (CALL2&PUSH 3)                      ; PEXPT
119   (LOAD&PUSH 1)
120   (CALL2&PUSH 6)                      ; PQUOTIENT
122   (LOAD 0)
123   (STORE 4)
124   (SKIP 1)
126   (JMP L8)
129   L129
129   (UNBIND1)
130   L130
130   (LOAD&PUSH 9)
131   (LOAD&PUSH 2)
132   (CALL2&PUSH 3)                      ; PEXPT
134   (LOAD&PUSH 1)
135   (CALL2 6)                           ; PQUOTIENT
137   (VALUES1)
138   (SKIP 5)
140   L140
140   (UNBIND1)
141   (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE REDRES))-15|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN REDRESULT (U V) ...)-16|
(CONST 0) = REDRESULT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REDRESULT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REDRESULT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REDRESULT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REDRESULT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REDRESULT
8     (SKIP&RET 1)


Disassembly of function REDRESULT
(CONST 0) = 1
(CONST 1) = 0
(CONST 2) = PREM
(CONST 3) = X
(CONST 4) = FIXNUMP
(CONST 5) = PDEGREE
(CONST 6) = PEXPT
(CONST 7) = PTIMESCHK
(CONST 8) = PQUOTIENTCHK
(CONST 9) = PQUOTIENT
(CONST 10) = PRESIGN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
106 byte-code instructions:
0     (PUSH-NIL 4)
2     (CONST 0)                           ; 1
3     (STORE 3)
4     (CONST 1)                           ; 0
5     (STORE 1)
6     (CONST 0)                           ; 1
7     (STORE 0)
8     L8
8     (LOAD&PUSH 6)
9     (LOAD&PUSH 6)
10    (CALL2 2)                           ; PREM
12    (STORE 2)
13    (BIND 3)                            ; X
15    (GETVALUE&PUSH 3)                   ; X
17    (CALL1&JMPIF 4 L29)                 ; FIXNUMP
20    (GETVALUE 3)                        ; X
22    (JMPIFCONSP L61)
24    (GETVALUE&PUSH 3)                   ; X
26    (CALLS2&JMPIFNOT 15 L38)            ; FLOATP
29    L29
29    (GETVALUE&PUSH 3)                   ; X
31    (CALLS2 145)                        ; ZEROP
33    (UNBIND1)
34    (JMPIFNOT L62)
36    (JMP L41)
38    L38
38    (UNBIND1)
39    (JMPIFNOT L62)
41    L41
41    (CONST 1)                           ; 0
42    (SKIP&RET 7)
44    L44
44    (LOAD&PUSH 1)
45    (LOAD&PUSH 3)
46    (LOAD&PUSH 5)
47    (CALL2&PUSH 8)                      ; PQUOTIENTCHK
49    (LOAD 7)
50    (CDR)
51    (CAR&PUSH)
52    (CALL2&PUSH 6)                      ; PEXPT
54    (LOAD&PUSH 2)
55    (CALL2&PUSH 9)                      ; PQUOTIENT
57    (CALL2 10)                          ; PRESIGN
59    (SKIP&RET 7)
61    L61
61    (UNBIND1)
62    L62
62    (LOAD&PUSH 0)
63    (LOAD 6)
64    (CDR)
65    (CDR)
66    (CAR&PUSH)
67    (LOAD 8)
68    (CDR)
69    (CAR&PUSH)
70    (LOAD 8)
71    (CDR)
72    (CAR&PUSH)
73    (CALLSR&PUSH 1 54)                  ; -
76    (LOAD 8)
77    (CDR)
78    (CAR&PUSH)
79    (LOAD&PUSH 6)
80    (LOAD&CAR&PUSH 11)
82    (CALL2&PUSH 5)                      ; PDEGREE
84    (CONST&PUSH 0)                      ; 1
85    (CALLSR&PUSH 2 54)                  ; -
88    (CALLSR&PUSH 2 55)                  ; *
91    (CALL2&PUSH 6)                      ; PEXPT
93    (CALL2 7)                           ; PTIMESCHK
95    (STORE 0)
96    (LOAD&PUSH 1)
97    (LOAD 7)
98    (CDR)
99    (CAR&PUSH)
100   (LOAD 7)
101   (CDR)
102   (CAR&PUSH)
103   (CALLSR&PUSH 2 55)                  ; *
106   (CALLSR&STORE 2 53 1)               ; +
110   (LOAD&PUSH 2)
111   (LOAD&CAR&PUSH 7)
113   (CALL2&PUSH 5)                      ; PDEGREE
115   (CALLS2&JMPIF 145 L44)              ; ZEROP
119   (LOAD&PUSH 5)
120   (LOAD&PUSH 3)
121   (LOAD&PUSH 5)
122   (CALL2&PUSH 8)                      ; PQUOTIENTCHK
124   (LOAD 7)
125   (CDR)
126   (CDR)
127   (CAR&PUSH)
128   (LOAD 9)
129   (CDR)
130   (CAR&PUSH)
131   (CONST&PUSH 0)                      ; 1
132   (LOAD 10)
133   (CDR)
134   (CAR&PUSH)
135   (CALLSR&PUSH 0 54)                  ; -
138   (CALLSR&PUSH 3 53)                  ; +
141   (CALL2 6)                           ; PEXPT
143   (STORE 5)
144   (POP&STORE 6)
146   (POP&STORE 6)
148   (JMP L8)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE MODRES))-17|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE BEZOUT))-18|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $BEZOUT (P Q VAR) ...)-19|
(CONST 0) = $BEZOUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BEZOUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BEZOUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BEZOUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BEZOUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BEZOUT
8     (SKIP&RET 1)


Disassembly of function $BEZOUT
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = VARLIST
(CONST 3) = GENVAR
(CONST 4) = NEWVAR
(CONST 5) = RATREP*
(CONST 6) = BEZOUT
(CONST 7) = ($MATRIX)
(CONST 8) = L
(CONST 9) = (MLIST)
(CONST 10) = PDIS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L P VAR)
writes special variable : (P)
67 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 1)                   ; VAR
8     (LIST 1)
10    (BIND 2)                            ; VARLIST
12    (NIL)
13    (BIND 3)                            ; GENVAR
15    (GETVALUE&PUSH 0)                   ; P
17    (CALL1 4)                           ; NEWVAR
19    (LOAD&PUSH 14)
20    (CALL1 4)                           ; NEWVAR
22    (GETVALUE&PUSH 0)                   ; P
24    (CALL1 5)                           ; RATREP*
26    (CDR)
27    (CAR)
28    (SETVALUE 0)                        ; P
30    (LOAD&PUSH 14)
31    (CALL1 5)                           ; RATREP*
33    (CDR)
34    (CAR)
35    (STORE 14)
37    (CDR)
38    (CAR&PUSH)
39    (GETVALUE 0)                        ; P
41    (CDR)
42    (CAR&PUSH)
43    (CALLSR&JMPIF 1 48 L62)             ; >
47    (GETVALUE&PUSH 0)                   ; P
49    (LOAD 15)
51    L51
51    (PUSH)
52    (CALL2 6)                           ; BEZOUT
54    (SETVALUE 0)                        ; P
56    (CONST&PUSH 7)                      ; ($MATRIX)
57    (NIL&PUSH)
58    (GETVALUE&PUSH 0)                   ; P
60    (JMP L88)
62    L62
62    (LOAD&PUSH 14)
63    (GETVALUE 0)                        ; P
65    (JMP L51)
67    L67
67    (LOAD&CAR&PUSH 0)
69    (LOAD 0)
70    (BIND 8)                            ; L
72    (CONST&PUSH 9)                      ; (MLIST)
73    (CONST&PUSH 10)                     ; PDIS
74    (GETVALUE&PUSH 8)                   ; L
76    (CALLSR 0 22)                       ; MAPCAR
79    (CONS)
80    (UNBIND1)
81    (PUSH)
82    (LOAD&CONS&STORE 2)
84    (SKIP 1)
86    (LOAD&CDR&STORE 0)
88    L88
88    (LOAD&PUSH 0)
89    (CALLS1&JMPIFNOT 146 L67)           ; ENDP
92    (SKIP 1)
94    (LOAD&PUSH 0)
95    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
97    (SKIP 1)
99    (CONS)
100   (UNBIND 4)
102   (SKIP&RET 4)


Disassembly of function #:|(DEFUN VMAKE (POLY N *L) ...)-20|
(CONST 0) = VMAKE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE VMAKE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; VMAKE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; VMAKE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE VMAKE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; VMAKE
8     (SKIP&RET 1)


Disassembly of function VMAKE
(CONST 0) = 0
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD&DEC&PUSH 2)
2     (JMP L30)
4     L4
4     (CONST&PUSH 0)                      ; 0
5     (LOAD&CONS&STORE 2)
7     (JMP L28)
9     L9
9     (LOAD&JMPIFNOT 4 L4)
12    (LOAD&CAR&PUSH 4)
14    (LOAD&PUSH 1)
15    (CALLSR&JMPIF 1 47 L4)              ; <
19    (LOAD 4)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&CONS&STORE 2)
24    (LOAD 4)
25    (CDR)
26    (CDR)
27    (STORE 4)
28    L28
28    (LOAD&DEC&STORE 0)
30    L30
30    (LOAD&PUSH 0)
31    (CALLS2&JMPIFNOT 147 L9)            ; MINUSP
34    (SKIP 1)
36    (LOAD&PUSH 1)
37    (CALLS2 73)                         ; NREVERSE
39    (SKIP&RET 4)


Disassembly of function #:|(DEFUN BEZOUT (P Q) ...)-21|
(CONST 0) = BEZOUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BEZOUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BEZOUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BEZOUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BEZOUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BEZOUT
8     (SKIP&RET 1)


Disassembly of function BEZOUT
(CONST 0) = P
(CONST 1) = VMAKE
(CONST 2) = B
(CONST 3) = NZEROS
(CONST 4) = L
(CONST 5) = 0
(CONST 6) = PTIMES
(CONST 7) = PDIFFERENCE
(CONST 8) = PPLUSCHK
(CONST 9) = X
(CONST 10) = FIXNUMP
(CONST 11) = ROT*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X L B P)
writes special variables : (B L)
198 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CDR)
6     (CAR&PUSH)
7     (CALLS2&PUSH 150)                   ; 1+
9     (LOAD&PUSH 0)
10    (LOAD 6)
11    (CDR)
12    (CAR&PUSH)
13    (CALLSR&PUSH 1 54)                  ; -
16    (GETVALUE 0)                        ; P
18    (CDR&PUSH)
19    (LOAD&PUSH 2)
20    (NIL&PUSH)
21    (CALL&PUSH 3 1)                     ; VMAKE
24    (LOAD&CDR&PUSH 7)
26    (LOAD&PUSH 3)
27    (NIL&PUSH)
28    (CALL 3 1)                          ; VMAKE
31    (BIND 2)                            ; B
33    (LOAD&PUSH 4)
34    (LOAD&PUSH 4)
35    (CALLS1&PUSH 155)                   ; NTHCDR
37    (CALLS2&PUSH 72)                    ; REVERSE
39    (LOAD&PUSH 5)
40    (GETVALUE&PUSH 2)                   ; B
42    (CALLS1&PUSH 155)                   ; NTHCDR
44    (CALLS2&PUSH 72)                    ; REVERSE
46    (LOAD&PUSH 7)
47    (NIL&PUSH)
48    (CALL2 3)                           ; NZEROS
50    (BIND 4)                            ; L
52    (GETVALUE 0)                        ; P
54    (CDR)
55    (CAR&PUSH)
56    (CALLS2&PUSH 151)                   ; 1-
58    (LOAD&PUSH 9)
59    (CALLS1&PUSH 155)                   ; NTHCDR
61    (NIL&PUSH)
62    (CALLS1 170)                        ; RPLACD
64    (GETVALUE 0)                        ; P
66    (CDR)
67    (CAR&PUSH)
68    (CALLS2&PUSH 151)                   ; 1-
70    (GETVALUE&PUSH 2)                   ; B
72    (CALLS1&PUSH 155)                   ; NTHCDR
74    (NIL&PUSH)
75    (CALLS1 170)                        ; RPLACD
77    (NIL&PUSH)
78    (LOAD&PUSH 5)
79    (LOAD&PUSH 5)
80    (JMP L183)
83    L83
83    (SKIP 2)
85    (JMP L197)
88    L88
88    (LOAD&CAR&PUSH 1)
90    (NIL&PUSH)
91    (LOAD&PUSH 14)
92    (GETVALUE&PUSH 2)                   ; B
94    (CONST&PUSH 5)                      ; 0
95    (GETVALUE 4)                        ; L
97    (CONS&PUSH)
98    (JMP L149)
100   L100
100   (SKIP 3)
102   (JMP L167)
104   L104
104   (SKIP 4)
106   (JMP L167)
108   L108
108   (NIL)
109   (UNBIND1)
110   (JMP L300)
113   L113
113   (LOAD&CAR&PUSH 2)
115   (LOAD 1)
116   (BIND 2)                            ; B
118   (LOAD 3)
119   (BIND 4)                            ; L
121   (GETVALUE&PUSH 4)                   ; L
123   (LOAD&PUSH 14)
124   (LOAD&PUSH 10)
125   (CALL2&PUSH 6)                      ; PTIMES
127   (LOAD&PUSH 16)
128   (GETVALUE&PUSH 2)                   ; B
130   (CALL2&PUSH 6)                      ; PTIMES
132   (CALL2&PUSH 7)                      ; PDIFFERENCE
134   (CALL2 8)                           ; PPLUSCHK
136   (UNBIND 2)
138   (PUSH)
139   (LOAD&CONS&STORE 6)
141   (SKIP 3)
143   (LOAD&CDR&STORE 2)
145   (LOAD&CDR&STORE 1)
147   (LOAD&CDR&STORE 0)
149   L149
149   (LOAD&PUSH 2)
150   (CALLS1&JMPIF 146 L100)             ; ENDP
153   (LOAD&CAR&PUSH 2)
155   (LOAD&PUSH 2)
156   (CALLS1&JMPIF 146 L104)             ; ENDP
159   (LOAD&CAR&PUSH 2)
161   (LOAD&PUSH 2)
162   (CALLS1&JMPIFNOT 146 L113)          ; ENDP
165   (SKIP 5)
167   L167
167   (LOAD&PUSH 0)
168   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
170   (SKIP 1)
172   (SETVALUE 4)                        ; L
174   (PUSH)
175   (LOAD&CONS&STORE 4)
177   (SKIP 2)
179   (LOAD&CDR&STORE 1)
181   (LOAD&CDR&STORE 0)
183   L183
183   (LOAD&PUSH 1)
184   (CALLS1&JMPIF 146 L83)              ; ENDP
188   (LOAD&CAR&PUSH 1)
190   (LOAD&PUSH 1)
191   (CALLS1&JMPIFNOT 146 L88)           ; ENDP
195   (SKIP 3)
197   L197
197   (LOAD&PUSH 0)
198   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
201   (GETVALUE 2)                        ; B
203   (CAR)
204   (BIND 9)                            ; X
206   (GETVALUE&PUSH 9)                   ; X
208   (CALL1&JMPIF 10 L221)               ; FIXNUMP
211   (GETVALUE 9)                        ; X
213   (JMPIFCONSP L108)
216   (GETVALUE&PUSH 9)                   ; X
218   (CALLS2&JMPIFNOT 15 L231)           ; FLOATP
221   L221
221   (GETVALUE&PUSH 9)                   ; X
223   (CALLS2 145)                        ; ZEROP
225   (UNBIND1)
226   (JMPIFNOT L300)
229   (JMP L235)
231   L231
231   (UNBIND1)
232   (JMPIFNOT L300)
235   L235
235   (LOAD&CDR&PUSH 16)
237   (GETVALUE 0)                        ; P
239   (CDR)
240   (CAR&PUSH)
241   (NIL&PUSH)
242   (CALL 3 1)                          ; VMAKE
245   (BIND 2)                            ; B
247   (NIL&PUSH)
248   L248
248   (GETVALUE 2)                        ; B
250   (CAR)
251   (BIND 9)                            ; X
253   (GETVALUE&PUSH 9)                   ; X
255   (CALL1&JMPIF 10 L267)               ; FIXNUMP
258   (GETVALUE 9)                        ; X
260   (JMPIFCONSP L292)
262   (GETVALUE&PUSH 9)                   ; X
264   (CALLS2&JMPIFNOT 15 L276)           ; FLOATP
267   L267
267   (GETVALUE&PUSH 9)                   ; X
269   (CALLS2 145)                        ; ZEROP
271   (UNBIND1)
272   (JMPIFNOT L293)
274   (JMP L279)
276   L276
276   (UNBIND1)
277   (JMPIFNOT L293)
279   L279
279   (GETVALUE&PUSH 2)                   ; B
281   (CALL1&PUSH 11)                     ; ROT*
283   (GETVALUE&PUSH 2)                   ; B
285   (LOAD&CONS&STORE 1)
287   (POP)
288   (SETVALUE 2)                        ; B
290   (JMP L248)
292   L292
292   (UNBIND1)
293   L293
293   (GETVALUE&PUSH 2)                   ; B
295   (LOAD 1)
296   (CONS)
297   (SKIP 1)
299   (UNBIND1)
300   L300
300   (PUSH)
301   (CALLSR 2 35)                       ; NCONC
304   (UNBIND1)
305   (SKIP 2)
307   (UNBIND1)
308   (SKIP 3)
310   (UNBIND1)
311   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ROT* (B) ...)-22|
(CONST 0) = ROT*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ROT*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ROT*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ROT*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ROT*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ROT*
8     (SKIP&RET 1)


Disassembly of function ROT*
(CONST 0) = B
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
writes special variable : (B)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (GETVALUE&PUSH 0)                   ; B
5     (CALLS1 158)                        ; COPY-LIST
7     (SETVALUE 0)                        ; B
9     (PUSH)
10    (GETVALUE&PUSH 0)                   ; B
12    (CALLSR 2 35)                       ; NCONC
15    (GETVALUE 0)                        ; B
17    (CDR&PUSH)
18    (GETVALUE&PUSH 0)                   ; B
20    (NIL&PUSH)
21    (CALLS1 170)                        ; RPLACD
23    (POP)
24    (UNBIND1)
25    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PPLUSCHK (P Q) ...)-23|
(CONST 0) = PPLUSCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PPLUSCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PPLUSCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PPLUSCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PPLUSCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PPLUSCHK
8     (SKIP&RET 1)


Disassembly of function PPLUSCHK
(CONST 0) = P
(CONST 1) = X
(CONST 2) = FIXNUMP
(CONST 3) = PPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X P)
31 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (BIND 1)                            ; X
7     (GETVALUE&PUSH 1)                   ; X
9     (CALL1&JMPIF 2 L21)                 ; FIXNUMP
12    (GETVALUE 1)                        ; X
14    (JMPIFCONSP L36)
16    (GETVALUE&PUSH 1)                   ; X
18    (CALLS2&JMPIFNOT 15 L30)            ; FLOATP
21    L21
21    (GETVALUE&PUSH 1)                   ; X
23    (CALLS2 145)                        ; ZEROP
25    (UNBIND1)
26    (JMPIFNOT L37)
28    (JMP L33)
30    L30
30    (UNBIND1)
31    (JMPIFNOT L37)
33    L33
33    (LOAD 4)
34    (JMP L42)
36    L36
36    (UNBIND1)
37    L37
37    (GETVALUE&PUSH 0)                   ; P
39    (LOAD&PUSH 5)
40    (CALL2 3)                           ; PPLUS
42    L42
42    (UNBIND1)
43    (SKIP&RET 3)


Wrote file binary-clisp/result.fas
Wrote file /cygdrive/e/temp/maxima/src/result.lis