Listing of compilation of file /cygdrive/e/temp/maxima/src/nalgfa.lisp
on 2002-12-17 13:33:31 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/nalgfa.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE NALGFA)-2|
(CONST 0) = NALGFA
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; NALGFA
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL ALG-NUM VLIST ...) (GENPREFIX NALG))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC RATMAC)-4|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ ALG-NUM 0)-5|
(CONST 0) = 0
(CONST 1) = ALG-NUM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (ALG-NUM)
3 byte-code instructions:
0     (CONST 0)                           ; 0
1     (SETVALUE 1)                        ; ALG-NUM
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN NEW-ALG NIL ...)-6|
(CONST 0) = NEW-ALG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEW-ALG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEW-ALG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEW-ALG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEW-ALG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEW-ALG
8     (SKIP&RET 1)


Disassembly of function NEW-ALG
(CONST 0) = $ALG
(CONST 1) = ALG-NUM
(CONST 2) = CONCAT
(CONST 3) = NEWSYM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ALG-NUM)
writes special variable : (ALG-NUM)
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ALG
1     (GETVALUE&PUSH 1)                   ; ALG-NUM
3     (CALLS2 150)                        ; 1+
5     (SETVALUE 1)                        ; ALG-NUM
7     (PUSH)
8     (CALL2&PUSH 2)                      ; CONCAT
10    (CALL1 3)                           ; NEWSYM
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN PSQFRP (P VAR) ...)-7|
(CONST 0) = PSQFRP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSQFRP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSQFRP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSQFRP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSQFRP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSQFRP
8     (SKIP&RET 1)


Disassembly of function PSQFRP
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = PDERIVATIVE
(CONST 3) = PGCD
(CONST 4) = PDEGREE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR P)
14 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; P
8     (GETVALUE&PUSH 0)                   ; P
10    (GETVALUE&PUSH 1)                   ; VAR
12    (CALL2&PUSH 2)                      ; PDERIVATIVE
14    (CALL2&PUSH 3)                      ; PGCD
16    (GETVALUE&PUSH 1)                   ; VAR
18    (CALL2&PUSH 4)                      ; PDEGREE
20    (CALLS2 145)                        ; ZEROP
22    (UNBIND 2)
24    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PGSUBST (VAL VAR P) ...)-8|
(CONST 0) = PGSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PGSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PGSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PGSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PGSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PGSUBST
8     (SKIP&RET 1)


Disassembly of function PGSUBST
(CONST 0) = VAR
(CONST 1) = P
(CONST 2) = X
(CONST 3) = FIXNUMP
(CONST 4) = 0
(CONST 5) = PTERM
(CONST 6) = PEXPT
(CONST 7) = PTIMES
(CONST 8) = PPLUS
(CONST 9) = B
(CONST 10) = 1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B X VAR P)
147 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (LOAD 4)
4     (BIND 1)                            ; P
6     (GETVALUE 1)                        ; P
8     (JMPIFATOM L44)
10    (GETVALUE&PUSH 0)                   ; VAR
12    (GETVALUE 1)                        ; P
14    (CAR)
15    (JMPIFNOTEQ L130)
18    (LOAD 9)
19    (BIND 2)                            ; X
21    (GETVALUE&PUSH 2)                   ; X
23    (CALL1&JMPIF 3 L35)                 ; FIXNUMP
26    (GETVALUE 2)                        ; X
28    (JMPIFCONSP L61)
30    (GETVALUE&PUSH 2)                   ; X
32    (CALLS2&JMPIFNOT 15 L49)            ; FLOATP
35    L35
35    (GETVALUE&PUSH 2)                   ; X
37    (CALLS2 145)                        ; ZEROP
39    (UNBIND1)
40    (JMPIFNOT L62)
42    (JMP L52)
44    L44
44    (GETVALUE 1)                        ; P
46    (JMP L220)
49    L49
49    (UNBIND1)
50    (JMPIFNOT L62)
52    L52
52    (GETVALUE 1)                        ; P
54    (CDR&PUSH)
55    (CONST&PUSH 4)                      ; 0
56    (CALL2 5)                           ; PTERM
58    (JMP L220)
61    L61
61    (UNBIND1)
62    L62
62    (GETVALUE 1)                        ; P
64    (CDR)
65    (CAR&PUSH)
66    (GETVALUE 1)                        ; P
68    (CDR)
69    (CDR)
70    (CDR&PUSH)
71    (GETVALUE 1)                        ; P
73    (CDR)
74    (CDR)
75    (CAR&PUSH)
76    (LOAD&JMPIFNOT 1 L109)
79    L79
79    (LOAD&CAR&PUSH 1)
81    (LOAD 2)
82    (CDR)
83    (CDR&PUSH)
84    (LOAD&PUSH 2)
85    (LOAD&PUSH 15)
86    (LOAD&PUSH 6)
87    (LOAD&CAR&PUSH 6)
89    (CALLSR&PUSH 1 54)                  ; -
92    (CALL2&PUSH 6)                      ; PEXPT
94    (CALL2&PUSH 7)                      ; PTIMES
96    (LOAD 4)
97    (CDR)
98    (CAR&PUSH)
99    (CALL2 8)                           ; PPLUS
101   (STORE 2)
102   (POP&STORE 2)
104   (POP&STORE 2)
106   (LOAD&JMPIF 1 L79)
109   L109
109   (LOAD&PUSH 0)
110   (LOAD&PUSH 13)
111   (LOAD&PUSH 4)
112   (CALL2&PUSH 6)                      ; PEXPT
114   (CALL2 7)                           ; PTIMES
116   (SKIP 3)
118   (JMPIF1 L220)
121   (NIL)
122   (JMP L220)
125   L125
125   (GETVALUE 1)                        ; P
127   (JMP L220)
130   L130
130   (GETVALUE&PUSH 0)                   ; VAR
132   (GETVALUE 1)                        ; P
134   (CAR)
135   (BIND 9)                            ; B
137   (LOAD&PUSH 3)
138   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
140   (GETVALUE&PUSH 9)                   ; B
142   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
144   (CALLSR 1 48)                       ; >
147   (UNBIND1)
148   (SKIP 1)
150   (JMPIF L125)
152   (GETVALUE 1)                        ; P
154   (CDR)
155   (CDR)
156   (CDR&PUSH)
157   (GETVALUE 1)                        ; P
159   (CAR&PUSH)
160   (GETVALUE 1)                        ; P
162   (CDR)
163   (CAR&PUSH)
164   (CONST&PUSH 10)                     ; 1
165   (LIST&PUSH 3)
167   (LOAD&PUSH 11)
168   (GETVALUE&PUSH 0)                   ; VAR
170   (GETVALUE 1)                        ; P
172   (CDR)
173   (CDR)
174   (CAR&PUSH)
175   (JSR&PUSH L0)
178   (CALL2&PUSH 7)                      ; PTIMES
180   (LOAD&JMPIFNOT 1 L214)
183   L183
183   (LOAD 1)
184   (CDR)
185   (CDR&PUSH)
186   (LOAD&PUSH 1)
187   (GETVALUE 1)                        ; P
189   (CAR&PUSH)
190   (LOAD&CAR&PUSH 4)
192   (CONST&PUSH 10)                     ; 1
193   (LIST&PUSH 3)
195   (LOAD&PUSH 14)
196   (GETVALUE&PUSH 0)                   ; VAR
198   (LOAD 6)
199   (CDR)
200   (CAR&PUSH)
201   (JSR&PUSH L0)
204   (CALL2&PUSH 7)                      ; PTIMES
206   (CALL2 8)                           ; PPLUS
208   (STORE 1)
209   (POP&STORE 1)
211   (LOAD&JMPIF 1 L183)
214   L214
214   (POP)
215   (SKIP 1)
217   (JMPIF1 L220)
219   (NIL)
220   L220
220   (UNBIND 2)
222   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PVSUBST (NVAR OVAR P) ...)-9|
(CONST 0) = PVSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PVSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PVSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PVSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PVSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PVSUBST
8     (SKIP&RET 1)


Disassembly of function PVSUBST
(CONST 0) = NVAR
(CONST 1) = OVAR
(CONST 2) = P
(CONST 3) = B
(CONST 4) = (1 1)
(CONST 5) = PGSUBST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NVAR B OVAR P)
42 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; NVAR
3     (LOAD 5)
4     (BIND 1)                            ; OVAR
6     (LOAD 7)
7     (BIND 2)                            ; P
9     (GETVALUE 2)                        ; P
11    (JMPIFATOM L57)
13    (GETVALUE&PUSH 1)                   ; OVAR
15    (GETVALUE 2)                        ; P
17    (CAR)
18    (BIND 3)                            ; B
20    (LOAD&PUSH 3)
21    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
23    (GETVALUE&PUSH 3)                   ; B
25    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
27    (CALLSR 1 48)                       ; >
30    (UNBIND1)
31    (SKIP 1)
33    (JMPIF L57)
35    (GETVALUE&PUSH 1)                   ; OVAR
37    (GETVALUE 2)                        ; P
39    (CAR)
40    (JMPIFEQ L61)
42    (GETVALUE&PUSH 0)                   ; NVAR
44    (CONST 4)                           ; (1 1)
45    (CONS&PUSH)
46    (GETVALUE&PUSH 1)                   ; OVAR
48    (GETVALUE&PUSH 2)                   ; P
50    (CALL 3 5)                          ; PGSUBST
53    L53
53    (UNBIND 3)
55    (SKIP&RET 4)
57    L57
57    (GETVALUE 2)                        ; P
59    (JMP L53)
61    L61
61    (GETVALUE&PUSH 0)                   ; NVAR
63    (GETVALUE 2)                        ; P
65    (CDR)
66    (CONS)
67    (JMP L53)


Disassembly of function #:|(DEFUN ORDERVAR (VAR L) ...)-10|
(CONST 0) = ORDERVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDERVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDERVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDERVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDERVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDERVAR
8     (SKIP&RET 1)


Disassembly of function ORDERVAR
(CONST 0) = VAR
(CONST 1) = L
(CONST 2) = LMAINVAR
(CONST 3) = B
(CONST 4) = GENVAR
(CONST 5) = SETPLIST
(CONST 6) = SET
(CONST 7) = P
(CONST 8) = PVSUBST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P GENVAR B VAR L)
writes special variable : (GENVAR)
73 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (GETVALUE&PUSH 1)                   ; L
8     (CALL1&PUSH 2)                      ; LMAINVAR
10    (LOAD&JMPIFNOT 0 L65)
13    (GETVALUE 0)                        ; VAR
15    (BIND 3)                            ; B
17    (LOAD&PUSH 3)
18    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
20    (GETVALUE&PUSH 3)                   ; B
22    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
24    (CALLSR 1 48)                       ; >
27    (UNBIND1)
28    (JMPIFNOT L71)
30    (PUSH-UNBOUND 1)
32    (CALLS2&PUSH 143)                   ; GENSYM
34    (GETVALUE&PUSH 4)                   ; GENVAR
36    (LOAD&PUSH 1)
37    (LIST&PUSH 1)
39    (CALLSR 2 34)                       ; APPEND
42    (SETVALUE 4)                        ; GENVAR
44    (LOAD&PUSH 0)
45    (GETVALUE&PUSH 0)                   ; VAR
47    (CALLS2&PUSH 139)                   ; SYMBOL-PLIST
49    (CALL2 5)                           ; SETPLIST
51    (LOAD&PUSH 0)
52    (LOAD&PUSH 2)
53    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
55    (CALLS2&PUSH 150)                   ; 1+
57    (CALL2 6)                           ; SET
59    (LOAD&PUSH 0)
60    (NIL&PUSH)
61    (GETVALUE&PUSH 1)                   ; L
63    (JMP L101)
65    L65
65    (GETVALUE 1)                        ; L
67    (SKIP 1)
69    (JMP L118)
71    L71
71    (GETVALUE&PUSH 0)                   ; VAR
73    (GETVALUE 1)                        ; L
75    (CONS)
76    (SKIP 1)
78    (JMP L118)
80    L80
80    (LOAD&CAR&PUSH 0)
82    (LOAD 0)
83    (BIND 7)                            ; P
85    (LOAD&PUSH 7)
86    (GETVALUE&PUSH 0)                   ; VAR
88    (GETVALUE&PUSH 7)                   ; P
90    (CALL 3 8)                          ; PVSUBST
93    (UNBIND1)
94    (PUSH)
95    (LOAD&CONS&STORE 2)
97    (SKIP 1)
99    (LOAD&CDR&STORE 0)
101   L101
101   (LOAD&PUSH 0)
102   (CALLS1&JMPIFNOT 146 L80)           ; ENDP
105   (SKIP 1)
107   (LOAD&PUSH 0)
108   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
110   (SKIP 1)
112   (CONS)
113   (SKIP 1)
115   (VALUES1)
116   (SKIP 1)
118   L118
118   (UNBIND 2)
120   (SKIP&RET 3)


Disassembly of function #:|(DEFUN LMAINVAR (L) ...)-11|
(CONST 0) = LMAINVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LMAINVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LMAINVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LMAINVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LMAINVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LMAINVAR
8     (SKIP&RET 1)


Disassembly of function LMAINVAR
(CONST 0) = L
(CONST 1) = B
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B L)
writes special variable : (L)
40 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (BIND 0)                            ; L
7     (NIL&PUSH)
8     (GETVALUE 0)                        ; L
10    (JMPIFNOT L56)
12    L12
12    (GETVALUE 0)                        ; L
14    (CAR)
15    (JMPIFATOM L47)
17    (LOAD&JMPIFNOT 0 L42)
20    (GETVALUE 0)                        ; L
22    (CAR)
23    (CAR&PUSH)
24    (LOAD 1)
25    (BIND 1)                            ; B
27    (LOAD&PUSH 3)
28    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
30    (GETVALUE&PUSH 1)                   ; B
32    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
34    (CALLSR 1 48)                       ; >
37    (UNBIND1)
38    (SKIP 1)
40    (JMPIFNOT L47)
42    L42
42    (GETVALUE 0)                        ; L
44    (CAR)
45    (CAR)
46    (STORE 0)
47    L47
47    (GETVALUE 0)                        ; L
49    (CDR)
50    (SETVALUE 0)                        ; L
52    (GETVALUE 0)                        ; L
54    (JMPIF L12)
56    L56
56    (POP)
57    (UNBIND 2)
59    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PRESULT (P1 P2 VAR) ...)-12|
(CONST 0) = PRESULT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRESULT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRESULT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRESULT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRESULT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRESULT
8     (SKIP&RET 1)


Disassembly of function PRESULT
(CONST 0) = VAR
(CONST 1) = GENVAR
(CONST 2) = ORDERVAR
(CONST 3) = PDEGREE
(CONST 4) = 1
(CONST 5) = PEXPT
(CONST 6) = RESULTANT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR GENVAR)
writes special variable : (VAR)
66 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (GETVALUE 1)                        ; GENVAR
5     (BIND 1)                            ; GENVAR
7     (GETVALUE&PUSH 0)                   ; VAR
9     (LOAD&PUSH 10)
10    (LOAD&PUSH 10)
11    (LIST&PUSH 2)
13    (CALL2 2)                           ; ORDERVAR
15    (SETVALUE 0)                        ; VAR
17    (CDR)
18    (CAR)
19    (STORE 9)
21    (GETVALUE 0)                        ; VAR
23    (CDR)
24    (CDR)
25    (CAR)
26    (STORE 8)
28    (GETVALUE 0)                        ; VAR
30    (CAR)
31    (SETVALUE 0)                        ; VAR
33    (LOAD&PUSH 9)
34    (GETVALUE&PUSH 0)                   ; VAR
36    (CALL2&PUSH 3)                      ; PDEGREE
38    (CALLS2&JMPIF 145 L63)              ; ZEROP
41    (LOAD&PUSH 8)
42    (GETVALUE&PUSH 0)                   ; VAR
44    (CALL2&PUSH 3)                      ; PDEGREE
46    (CALLS2&JMPIF 145 L81)              ; ZEROP
49    (LOAD&PUSH 9)
50    (LOAD&PUSH 9)
51    (CALL2 6)                           ; RESULTANT
53    (JMPIF1 L90)
55    L55
55    (NIL)
56    (UNBIND1)
57    (JMP L91)
59    L59
59    (CONST 4)                           ; 1
60    (UNBIND1)
61    (JMP L91)
63    L63
63    (LOAD&PUSH 8)
64    (GETVALUE&PUSH 0)                   ; VAR
66    (CALL2&PUSH 3)                      ; PDEGREE
68    (CALLS2&JMPIF 145 L59)              ; ZEROP
71    (LOAD&PUSH 9)
72    (LOAD 9)
73    (CDR)
74    (CAR&PUSH)
75    (CALL2 5)                           ; PEXPT
77    (JMPIF1 L90)
79    (JMP L55)
81    L81
81    (LOAD&PUSH 8)
82    (LOAD 10)
83    (CDR)
84    (CAR&PUSH)
85    (CALL2 5)                           ; PEXPT
87    (UNBIND1)
88    (JMP L91)
90    L90
90    (UNBIND1)
91    L91
91    (UNBIND1)
92    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PCOEFVEC (P) ...)-13|
(CONST 0) = PCOEFVEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PCOEFVEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PCOEFVEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PCOEFVEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PCOEFVEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PCOEFVEC
8     (SKIP&RET 1)


Disassembly of function PCOEFVEC
(CONST 0) = P
(CONST 1) = L
(CONST 2) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L P)
writes special variables : (L P)
57 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L22)
7     (NIL&PUSH)
8     (GETVALUE 0)                        ; P
10    (CDR)
11    (CAR&PUSH)
12    (GETVALUE 0)                        ; P
14    (CDR)
15    (BIND 0)                            ; P
17    (LOAD 4)
18    (BIND 1)                            ; L
20    (JMP L60)
22    L22
22    (GETVALUE&PUSH 0)                   ; P
24    (LIST 1)
26    (JMP L81)
28    L28
28    (GETVALUE 0)                        ; P
30    (CDR)
31    (CAR&PUSH)
32    (GETVALUE 0)                        ; P
34    (CDR)
35    (CDR)
36    (SETVALUE 0)                        ; P
38    (POP)
39    (JMP L52)
41    L41
41    (GETVALUE 0)                        ; P
43    (JMPIFNOT L51)
45    (CAR&PUSH)
46    (LOAD&PUSH 7)
47    (CALLSR&JMPIF 1 45 L28)             ; =
51    L51
51    (CONST 2)                           ; 0
52    L52
52    (PUSH)
53    (GETVALUE 1)                        ; L
55    (CONS)
56    (SETVALUE 1)                        ; L
58    (LOAD&DEC&STORE 6)
60    L60
60    (LOAD&PUSH 6)
61    (CALLS2&JMPIFNOT 8 L41)             ; NUMBERP
64    (LOAD&PUSH 6)
65    (CONST&PUSH 2)                      ; 0
66    (CALLSR&JMPIFNOT 1 47 L41)          ; <
70    (GETVALUE&PUSH 1)                   ; L
72    (CALLS2 73)                         ; NREVERSE
74    (UNBIND 2)
76    (SKIP 2)
78    (JMPIF1 L81)
80    (NIL)
81    L81
81    (UNBIND1)
82    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ALGTRACE1 (BVEC TVEC) ...)-14|
(CONST 0) = ALGTRACE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGTRACE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGTRACE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGTRACE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGTRACE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGTRACE1
8     (SKIP&RET 1)


Disassembly of function ALGTRACE1
(CONST 0) = 0
(CONST 1) = ALGTRACE*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 3)
4     (CALLS2&PUSH 71)                    ; LENGTH
6     (CALLSR&PUSH 1 54)                  ; -
9     (JMP L16)
11    L11
11    (CONST&PUSH 0)                      ; 0
12    (LOAD&CONS&STORE 3)
14    (LOAD&DEC&STORE 0)
16    L16
16    (LOAD&PUSH 0)
17    (CONST&PUSH 0)                      ; 0
18    (CALLSR&JMPIFNOT 1 45 L11)          ; =
22    (LOAD&PUSH 3)
23    (LOAD&PUSH 3)
24    (CALL2 1)                           ; ALGTRACE*
26    (SKIP&RET 4)


Disassembly of function #:|(DEFUN ALGTRACE* (BVEC TVEC) ...)-15|
(CONST 0) = ALGTRACE*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGTRACE*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGTRACE*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGTRACE*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGTRACE*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGTRACE*
8     (SKIP&RET 1)


Disassembly of function ALGTRACE*
(CONST 0) = B
(CONST 1) = X
(CONST 2) = FIXNUMP
(CONST 3) = L
(CONST 4) = PTIMES
(CONST 5) = PDIFFERENCE
(CONST 6) = PPLUS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L X B)
writes special variables : (B L)
76 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 1)
4     (CALLS1 156)                        ; LAST
6     (CAR&PUSH)
7     (LOAD 1)
8     (BIND 0)                            ; B
10    L10
10    (GETVALUE 0)                        ; B
12    (CDR)
13    (JMPIFNOT L111)
16    (GETVALUE 0)                        ; B
18    (CAR)
19    (BIND 1)                            ; X
21    (GETVALUE&PUSH 1)                   ; X
23    (CALL1&JMPIF 2 L35)                 ; FIXNUMP
26    (GETVALUE 1)                        ; X
28    (JMPIFCONSP L49)
30    (GETVALUE&PUSH 1)                   ; X
32    (CALLS2&JMPIFNOT 15 L44)            ; FLOATP
35    L35
35    (GETVALUE&PUSH 1)                   ; X
37    (CALLS2 145)                        ; ZEROP
39    (UNBIND1)
40    (JMPIFNOT L50)
42    (JMP L91)
44    L44
44    (UNBIND1)
45    (JMPIFNOT L50)
47    (JMP L91)
49    L49
49    (UNBIND1)
50    L50
50    (GETVALUE 0)                        ; B
52    (CDR)
53    (BIND 3)                            ; L
55    (LOAD&PUSH 9)
56    (GETVALUE 3)                        ; L
58    (JMPIFNOT L88)
60    L60
60    (GETVALUE&PUSH 3)                   ; L
62    (GETVALUE 3)                        ; L
64    (CAR&PUSH)
65    (GETVALUE 0)                        ; B
67    (CAR&PUSH)
68    (LOAD&CAR&PUSH 3)
70    (CALL2&PUSH 4)                      ; PTIMES
72    (CALL2&PUSH 5)                      ; PDIFFERENCE
74    (CALLS1 168)                        ; RPLACA
76    (GETVALUE 3)                        ; L
78    (CDR&PUSH)
79    (LOAD&CDR&STORE 1)
81    (POP)
82    (SETVALUE 3)                        ; L
84    (GETVALUE 3)                        ; L
86    (JMPIF L60)
88    L88
88    (SKIP 1)
90    (UNBIND1)
91    L91
91    (GETVALUE 0)                        ; B
93    (CDR&PUSH)
94    (LOAD&PUSH 4)
95    (GETVALUE&PUSH 0)                   ; B
97    (PUSH-UNBOUND 1)
99    (CALLS1 156)                        ; LAST
101   (CAR&PUSH)
102   (CALL2 6)                           ; PPLUS
104   (STORE 4)
105   (POP)
106   (SETVALUE 0)                        ; B
108   (JMP L10)
111   L111
111   (LOAD 3)
112   (UNBIND1)
113   (SKIP&RET 5)


Disassembly of function #:|(DEFUN ALGTRACE (R P) ...)-16|
(CONST 0) = ALGTRACE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGTRACE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGTRACE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGTRACE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGTRACE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGTRACE
8     (SKIP&RET 1)


Disassembly of function ALGTRACE
(CONST 0) = P
(CONST 1) = PCOEFVEC
(CONST 2) = ALGTRACE1
(CONST 3) = RATREDUCE
(CONST 4) = PCTIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (LOAD 5)
4     (CAR)
5     (CAR&PUSH)
6     (GETVALUE 0)                        ; P
8     (CAR)
9     (JMPIFEQ L29)
11    (GETVALUE 0)                        ; P
13    (CDR)
14    (CAR&PUSH)
15    (LOAD&CAR&PUSH 6)
17    (CALL2&PUSH 4)                      ; PCTIMES
19    (LOAD&CDR&PUSH 6)
21    (CALL2 3)                           ; RATREDUCE
23    (JMPIF1 L26)
25    (NIL)
26    L26
26    (UNBIND1)
27    (SKIP&RET 3)
29    L29
29    (LOAD&CAR&PUSH 5)
31    (CALL1&PUSH 1)                      ; PCOEFVEC
33    (GETVALUE&PUSH 0)                   ; P
35    (CALL1 1)                           ; PCOEFVEC
37    (CDR&PUSH)
38    (CALL2&PUSH 2)                      ; ALGTRACE1
40    (LOAD&CDR&PUSH 6)
42    (CALL2 3)                           ; RATREDUCE
44    (JMP L26)


Disassembly of function #:|(DEFMFUN $ALGTRACE (R P VAR) ...)-17|
(CONST 0) = $ALGTRACE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ALGTRACE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ALGTRACE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ALGTRACE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ALGTRACE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ALGTRACE
8     (SKIP&RET 1)


Disassembly of function $ALGTRACE
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = VARLIST
(CONST 3) = GENVAR
(CONST 4) = RFORM
(CONST 5) = ALGTRACE
(CONST 6) = RDIS*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P VAR)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 1)                   ; VAR
8     (LIST 1)
10    (BIND 2)                            ; VARLIST
12    (NIL)
13    (BIND 3)                            ; GENVAR
15    (LOAD&PUSH 15)
16    (CALL1&PUSH 4)                      ; RFORM
18    (GETVALUE&PUSH 0)                   ; P
20    (CALL1 4)                           ; RFORM
22    (CAR&PUSH)
23    (CALL2&PUSH 5)                      ; ALGTRACE
25    (CALL1 6)                           ; RDIS*
27    (UNBIND 4)
29    (SKIP&RET 4)


Disassembly of function #:|(DEFUN GOOD-FORM (L) ...)-18|
(CONST 0) = GOOD-FORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GOOD-FORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GOOD-FORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GOOD-FORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GOOD-FORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GOOD-FORM
8     (SKIP&RET 1)


Disassembly of function GOOD-FORM
(CONST 0) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (BIND 0)                            ; L
7     (NIL&PUSH)
8     (GETVALUE 0)                        ; L
10    (JMPIFNOT L32)
12    L12
12    (GETVALUE 0)                        ; L
14    (CDR)
15    (CAR&PUSH)
16    (GETVALUE 0)                        ; L
18    (CAR)
19    (CONS&PUSH)
20    (LOAD&CONS&STORE 0)
22    (GETVALUE 0)                        ; L
24    (CDR)
25    (CDR)
26    (SETVALUE 0)                        ; L
28    (GETVALUE 0)                        ; L
30    (JMPIF L12)
32    L32
32    (LOAD&PUSH 0)
33    (CALLS2 73)                         ; NREVERSE
35    (SKIP 1)
37    (UNBIND 2)
39    (SKIP&RET 2)


Disassembly of function #:|(DEFUN BAD-FORM (L) ...)-19|
(CONST 0) = BAD-FORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BAD-FORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BAD-FORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BAD-FORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BAD-FORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BAD-FORM
8     (SKIP&RET 1)


Disassembly of function BAD-FORM
(CONST 0) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; L
6     (JMP L22)
8     L8
8     (LOAD&CAR&PUSH 0)
10    (LOAD&CDR&PUSH 0)
12    (LOAD&CAR&PUSH 1)
14    (LIST&PUSH 2)
16    (LOAD&CONS&STORE 2)
18    (SKIP 1)
20    (LOAD&CDR&STORE 0)
22    L22
22    (LOAD&PUSH 0)
23    (CALLS1&JMPIFNOT 146 L8)            ; ENDP
26    (SKIP 1)
28    (LOAD&PUSH 0)
29    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
31    (SKIP 1)
33    (UNBIND1)
34    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ALGFAC N ...)-20|
(CONST 0) = $ALGFAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ALGFAC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ALGFAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ALGFAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ALGFAC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ALGFAC
8     (SKIP&RET 1)


Disassembly of function $ALGFAC
(CONST 0) = 3
(CONST 1) = $PFACTORALG
(CONST 2) = LISTIFY1
(CONST 3) = VARLIST
(CONST 4) = 2
(CONST 5) = NARG1
(CONST 6) = NEWVAR
(CONST 7) = ALIKE1
(CONST 8) = 1
(CONST 9) = ALGPGET
(CONST 10) = "too many algebraics"
(CONST 11) = MERROR
(CONST 12) = "no algebraics"
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (VARLIST)
writes special variable : (VARLIST)
106 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 3
5     (CALLSR&JMPIF 1 45 L30)             ; =
9     (NIL)
10    (BIND 3)                            ; VARLIST
12    (LOAD&PUSH 3)
13    (CONST&PUSH 4)                      ; 2
14    (CALLSR&JMPIF 1 45 L49)             ; =
18    (CONST&PUSH 8)                      ; 1
19    (LOAD&PUSH 6)
20    (CALL2&PUSH 5)                      ; NARG1
22    (CALL1 6)                           ; NEWVAR
24    (NIL&PUSH)
25    (GETVALUE&PUSH 3)                   ; VARLIST
27    (JMP L120)
30    L30
30    (CONST&PUSH 1)                      ; $PFACTORALG
31    (LOAD&PUSH 1)
32    (LOAD&PUSH 4)
33    (CALL2 2)                           ; LISTIFY1
35    (APPLY&SKIP&RET 0 3)
38    L38
38    (CONST&PUSH 8)                      ; 1
39    (LOAD&PUSH 6)
40    (CALL2&PUSH 5)                      ; NARG1
42    (NIL&PUSH)
43    (CONST&PUSH 4)                      ; 2
44    (LOAD&PUSH 8)
45    (CALL2 5)                           ; NARG1
47    (JMP L95)
49    L49
49    (CONST&PUSH 4)                      ; 2
50    (LOAD&PUSH 6)
51    (CALL2&PUSH 5)                      ; NARG1
53    (CALL1 6)                           ; NEWVAR
55    (CONST&PUSH 4)                      ; 2
56    (LOAD&PUSH 6)
57    (CALL2&PUSH 5)                      ; NARG1
59    (GETVALUE 3)                        ; VARLIST
61    (CAR&PUSH)
62    (CALL2&JMPIF 7 L38)                 ; ALIKE1
65    (CONST&PUSH 8)                      ; 1
66    (LOAD&PUSH 6)
67    (CALL2&PUSH 5)                      ; NARG1
69    (CONST&PUSH 4)                      ; 2
70    (LOAD&PUSH 7)
71    (CALL2&PUSH 5)                      ; NARG1
73    (GETVALUE&PUSH 3)                   ; VARLIST
75    (PUSH-UNBOUND 1)
77    (CALLS1 156)                        ; LAST
79    (CAR)
80    (JMP L95)
82    L82
82    (LOAD&PUSH 0)
83    (LIST 1)
85    (JMP L111)
87    L87
87    (CONST&PUSH 8)                      ; 1
88    (LOAD&PUSH 6)
89    (CALL2&PUSH 5)                      ; NARG1
91    (NIL&PUSH)
92    (GETVALUE 3)                        ; VARLIST
94    (CAR)
95    L95
95    (PUSH)
96    (CALL 3 1)                          ; $PFACTORALG
99    (JMP L154)
101   L101
101   (CONST 10)                          ; "too many algebraics"
102   (JMP L151)
104   L104
104   (LOAD&CAR&PUSH 0)
106   (LOAD&PUSH 0)
107   (CALL1&JMPIF 9 L82)                 ; ALGPGET
110   (NIL)
111   L111
111   (PUSH)
112   (LOAD&PUSH 3)
113   (CALLS1&STORE 163 2)                ; NRECONC
116   (SKIP 1)
118   (LOAD&CDR&STORE 0)
120   L120
120   (LOAD&PUSH 0)
121   (CALLS1&JMPIFNOT 146 L104)          ; ENDP
124   (SKIP 1)
126   (LOAD&PUSH 0)
127   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
129   (SKIP 1)
131   (SETVALUE 3)                        ; VARLIST
133   (PUSH)
134   (CALLS2&PUSH 71)                    ; LENGTH
136   (CONST&PUSH 8)                      ; 1
137   (CALLSR&JMPIF 1 45 L87)             ; =
141   (GETVALUE&PUSH 3)                   ; VARLIST
143   (CALLS2&PUSH 71)                    ; LENGTH
145   (CONST&PUSH 8)                      ; 1
146   (CALLSR&JMPIF 1 48 L101)            ; >
150   (CONST 12)                          ; "no algebraics"
151   L151
151   (PUSH)
152   (CALL1 11)                          ; MERROR
154   L154
154   (UNBIND1)
155   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $PFACTORALG (F P ALG) ...)-21|
(CONST 0) = $PFACTORALG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PFACTORALG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PFACTORALG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PFACTORALG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PFACTORALG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PFACTORALG
8     (SKIP&RET 1)


Disassembly of function $PFACTORALG
(CONST 0) = P
(CONST 1) = VARLIST
(CONST 2) = GENVAR
(CONST 3) = VLIST
(CONST 4) = TELLRATLIST
(CONST 5) = $RATFAC
(CONST 6) = $ALGEBRAIC
(CONST 7) = $GCD
(CONST 8) = $RATALGDENOM
(CONST 9) = 1
(CONST 10) = *DENOM
(CONST 11) = *NUM
(CONST 12) = *ANS
(CONST 13) = RADFUNP
(CONST 14) = NEWVAR
(CONST 15) = NEWVAR1
(CONST 16) = "attempt to factor a constant"
(CONST 17) = MERROR
(CONST 18) = SORTGREAT
(CONST 19) = RATREP*
(CONST 20) = PDIS
(CONST 21) = ALGPGET
(CONST 22) = PEXPT
(CONST 23) = PDIFFERENCE
(CONST 24) = 0
(CONST 25) = PFACTORALG1
(CONST 26) = (MTIMES)
(CONST 27) = RATREDUCE
(CONST 28) = RDIS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TELLRATLIST *DENOM *NUM VARLIST VLIST P)
writes special variables : (TELLRATLIST $ALGEBRAIC P VARLIST)
110 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD&PUSH 4)
4     (LIST 1)
6     (BIND 1)                            ; VARLIST
8     (NIL)
9     (BIND 2)                            ; GENVAR
11    (NIL)
12    (BIND 3)                            ; VLIST
14    (NIL)
15    (BIND 4)                            ; TELLRATLIST
17    (NIL)
18    (BIND 5)                            ; $RATFAC
20    (CONST 6)                           ; $ALGEBRAIC
21    (BIND 7)                            ; $GCD
23    (NIL)
24    (BIND 6)                            ; $ALGEBRAIC
26    (T)
27    (BIND 8)                            ; $RATALGDENOM
29    (CONST 9)                           ; 1
30    (BIND 10)                           ; *DENOM
32    (CONST 9)                           ; 1
33    (BIND 11)                           ; *NUM
35    (NIL)
36    (BIND 12)                           ; *ANS
38    (GETVALUE 0)                        ; P
40    (JMPIF L49)
42    (LOAD&PUSH 37)
44    (T&PUSH)
45    (CALL2&JMPIF 13 L147)               ; RADFUNP
49    L49
49    (GETVALUE 0)                        ; P
51    L51
51    (PUSH)
52    (CALL1 14)                          ; NEWVAR
54    (LOAD&PUSH 39)
56    (CALL1 15)                          ; NEWVAR1
58    (GETVALUE 3)                        ; VLIST
60    (JMPIF L65)
62    (CONST&PUSH 16)                     ; "attempt to factor a constant"
63    (CALL1 17)                          ; MERROR
65    L65
65    (GETVALUE&PUSH 1)                   ; VARLIST
67    (GETVALUE&PUSH 3)                   ; VLIST
69    (CALL1&PUSH 18)                     ; SORTGREAT
71    (CALLSR 2 35)                       ; NCONC
74    (SETVALUE 1)                        ; VARLIST
76    (GETVALUE 0)                        ; P
78    (JMPIF L154)
81    (LOAD&PUSH 37)
83    (CALL1 21)                          ; ALGPGET
85    (SETVALUE 0)                        ; P
87    (LOAD&PUSH 37)
89    (CALL1 19)                          ; RATREP*
91    (CDR)
92    (CAR&PUSH)
93    (GETVALUE 0)                        ; P
95    (CAR&PUSH)
96    (CALL2&PUSH 22)                     ; PEXPT
98    (GETVALUE 0)                        ; P
100   (CDR)
101   (CAR&PUSH)
102   (CALL2 23)                          ; PDIFFERENCE
104   (SETVALUE 0)                        ; P
106   L106
106   (T)
107   (SETVALUE 6)                        ; $ALGEBRAIC
109   (LOAD&PUSH 39)
111   (CALL1 19)                          ; RATREP*
113   (CDR)
114   (CAR)
115   (STORE 39)
117   (PUSH)
118   (GETVALUE&PUSH 0)                   ; P
120   (CONST&PUSH 24)                     ; 0
121   (CALL 3 25)                         ; PFACTORALG1
124   (STORE 39)
126   (CONST&PUSH 26)                     ; (MTIMES)
127   (GETVALUE&PUSH 11)                  ; *NUM
129   (GETVALUE&PUSH 10)                  ; *DENOM
131   (CALL2&PUSH 27)                     ; RATREDUCE
133   (CALL1&PUSH 28)                     ; RDIS
135   (CONST&PUSH 20)                     ; PDIS
136   (LOAD&PUSH 42)
138   (CALLSR 0 22)                       ; MAPCAR
141   (CONS)
142   (CONS)
143   (UNBIND 12)
145   (SKIP&RET 4)
147   L147
147   (LOAD 37)
149   (CDR)
150   (CAR)
151   (JMP L51)
154   L154
154   (PUSH)
155   (CALL1 19)                          ; RATREP*
157   (CDR)
158   (CAR)
159   (SETVALUE 0)                        ; P
161   (LOAD&PUSH 37)
163   (CONST&SYMBOL-FUNCTION&PUSH 20)     ; PDIS
165   (GETVALUE 0)                        ; P
167   (CDR&PUSH)
168   (CALLSR 0 22)                       ; MAPCAR
171   (CONS&PUSH)
172   (GETVALUE 4)                        ; TELLRATLIST
174   (CONS)
175   (SETVALUE 4)                        ; TELLRATLIST
177   (JMP L106)


Disassembly of function #:|(DECLARE-TOP (SPECIAL ADN*))-22|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN NALGFAC (P MP) ...)-23|
(CONST 0) = NALGFAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NALGFAC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NALGFAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NALGFAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NALGFAC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NALGFAC
8     (SKIP&RET 1)


Disassembly of function NALGFAC
(CONST 0) = P
(CONST 1) = 1
(CONST 2) = *NUM
(CONST 3) = *DENOM
(CONST 4) = *ANS
(CONST 5) = ALGFAC*
(CONST 6) = $NALGFAC
(CONST 7) = $ALGEBRAIC
(CONST 8) = $GCD
(CONST 9) = 0
(CONST 10) = PFACTORALG1
(CONST 11) = ADN*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*NUM *DENOM ADN* P)
writes special variables : (ADN* P)
36 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (CONST 1)                           ; 1
4     (BIND 2)                            ; *NUM
6     (CONST 1)                           ; 1
7     (BIND 3)                            ; *DENOM
9     (NIL)
10    (BIND 4)                            ; *ANS
12    (NIL)
13    (BIND 5)                            ; ALGFAC*
15    (NIL)
16    (BIND 6)                            ; $NALGFAC
18    (T)
19    (BIND 7)                            ; $ALGEBRAIC
21    (CONST 7)                           ; $ALGEBRAIC
22    (BIND 8)                            ; $GCD
24    (GETVALUE&PUSH 0)                   ; P
26    (LOAD&PUSH 26)
28    (CONST&PUSH 9)                      ; 0
29    (CALL 3 10)                         ; PFACTORALG1
32    (SETVALUE 0)                        ; P
34    (GETVALUE&PUSH 11)                  ; ADN*
36    (GETVALUE&PUSH 3)                   ; *DENOM
38    (CALLSR 2 55)                       ; *
41    (SETVALUE 11)                       ; ADN*
43    (GETVALUE&PUSH 2)                   ; *NUM
45    (JMPIFEQTO 1 L57)                   ; 1
48    (GETVALUE&PUSH 2)                   ; *NUM
50    (GETVALUE 0)                        ; P
52    (CONS)
53    L53
53    (UNBIND 8)
55    (SKIP&RET 3)
57    L57
57    (GETVALUE 0)                        ; P
59    (JMP L53)


Disassembly of function #:|(SETQ *NOSPLITF T)-24|
(CONST 0) = *NOSPLITF
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*NOSPLITF)
3 byte-code instructions:
0     (T)
1     (SETVALUE 0)                        ; *NOSPLITF
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PFACTORALG1 (F P IND) ...)-25|
(CONST 0) = PFACTORALG1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PFACTORALG1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PFACTORALG1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PFACTORALG1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PFACTORALG1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PFACTORALG1
8     (SKIP&RET 1)


Disassembly of function PFACTORALG1
(CONST 0) = P
(CONST 1) = IND
(CONST 2) = *NUM
(CONST 3) = PTIMESCHK
(CONST 4) = *ANS
(CONST 5) = 1
(CONST 6) = PSHIFT
(CONST 7) = ALGNORMAL
(CONST 8) = RQUOTIENT
(CONST 9) = *DENOM
(CONST 10) = (1 1)
(CONST 11) = PDIFFERENCE
(CONST 12) = PDEGREE
(CONST 13) = *GCDL*
(CONST 14) = $GCD
(CONST 15) = $ALGEBRAIC
(CONST 16) = PFACTOR1
(CONST 17) = -1
(CONST 18) = ALGNORM
(CONST 19) = PFACTOR
(CONST 20) = L
(CONST 21) = PGCD
(CONST 22) = *NOSPLITF
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L *NOSPLITF *GCDL* *NUM *DENOM *ANS IND P)
writes special variables : (L *NOSPLITF *NUM *DENOM *ANS)
237 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; IND
6     (LOAD 9)
7     (JMPIFATOM L66)
9     (LOAD 9)
10    (CDR)
11    (CAR&PUSH)
12    (CONST&PUSH 5)                      ; 1
13    (CALLSR&JMPIFNOT 1 45 L222)         ; =
18    (LOAD&PUSH 9)
19    (GETVALUE 0)                        ; P
21    (CAR&PUSH)
22    (GETVALUE&PUSH 1)                   ; IND
24    (CALL 3 6)                          ; PSHIFT
27    (STORE 9)
29    (PUSH)
30    (CALL1&PUSH 7)                      ; ALGNORMAL
32    (GETVALUE 4)                        ; *ANS
34    (CONS)
35    (SETVALUE 4)                        ; *ANS
37    (LOAD&PUSH 9)
38    (GETVALUE 4)                        ; *ANS
40    (CAR&PUSH)
41    (CALL2 8)                           ; RQUOTIENT
43    (STORE 9)
45    (CDR&PUSH)
46    (GETVALUE&PUSH 9)                   ; *DENOM
48    (CALL2 3)                           ; PTIMESCHK
50    (SETVALUE 9)                        ; *DENOM
52    (LOAD 9)
53    (CAR)
54    L54
54    (PUSH)
55    (GETVALUE&PUSH 2)                   ; *NUM
57    (CALL2 3)                           ; PTIMESCHK
59    (SETVALUE 2)                        ; *NUM
61    (GETVALUE 4)                        ; *ANS
63    (JMP L382)
66    L66
66    (LOAD 9)
67    (JMP L54)
69    L69
69    (LOAD&CAR&PUSH 9)
71    (CONST 10)                          ; (1 1)
72    (CONS&PUSH)
73    (GETVALUE 0)                        ; P
75    (CAR&PUSH)
76    (CONST 10)                          ; (1 1)
77    (CONS&PUSH)
78    (CALL2&PUSH 11)                     ; PDIFFERENCE
80    (GETVALUE 4)                        ; *ANS
82    (CONS)
83    (SETVALUE 4)                        ; *ANS
85    (LOAD&PUSH 9)
86    (GETVALUE 4)                        ; *ANS
88    (CAR&PUSH)
89    (CALL2 8)                           ; RQUOTIENT
91    (STORE 9)
93    (CDR&PUSH)
94    (GETVALUE&PUSH 9)                   ; *DENOM
96    (CALL2 3)                           ; PTIMESCHK
98    (SETVALUE 9)                        ; *DENOM
100   (LOAD&CAR&PUSH 9)
102   (GETVALUE&PUSH 0)                   ; P
104   (GETVALUE&PUSH 1)                   ; IND
106   (JSR L0)
109   (JMP L382)
112   L112
112   (NIL&PUSH)
113   (GETVALUE 13)                       ; *GCDL*
115   (CAR)
116   (BIND 14)                           ; $GCD
118   (LOAD 3)
119   (BIND 15)                           ; $ALGEBRAIC
121   (LOAD&PUSH 16)
122   (CALL1 16)                          ; PFACTOR1
124   (UNBIND 2)
126   (STORE 0)
127   (LOAD&PUSH 0)
128   (JMP L153)
130   L130
130   (LOAD&CAR&PUSH 0)
132   (LOAD&PUSH 0)
133   (GETVALUE 0)                        ; P
135   (CAR&PUSH)
136   (CONST&PUSH 17)                     ; -1
137   (CALL&PUSH 3 6)                     ; PSHIFT
140   (GETVALUE&PUSH 0)                   ; P
142   (GETVALUE&PUSH 1)                   ; IND
144   (CALLS2&PUSH 150)                   ; 1+
146   (JSR L0)
149   (SKIP 1)
151   (LOAD&CDR&STORE 0)
153   L153
153   (LOAD&PUSH 0)
154   (CALLS1&JMPIFNOT 146 L130)          ; ENDP
157   (SKIP 2)
159   (GETVALUE 4)                        ; *ANS
161   (JMP L382)
164   L164
164   (LOAD 16)
166   (JMP L291)
169   L169
169   (LOAD&PUSH 4)
170   (CALL1 7)                           ; ALGNORMAL
172   (STORE 4)
173   (PUSH)
174   (LOAD&PUSH 4)
175   (GETVALUE&PUSH 1)                   ; IND
177   (CALL&PUSH 3 6)                     ; PSHIFT
180   (GETVALUE 4)                        ; *ANS
182   (CONS)
183   (SETVALUE 4)                        ; *ANS
185   (JMP L313)
188   L188
188   (LOAD&PUSH 4)
189   (CALL1 7)                           ; ALGNORMAL
191   (STORE 4)
192   (PUSH)
193   (LOAD&PUSH 4)
194   (GETVALUE&PUSH 1)                   ; IND
196   (CALL&PUSH 3 6)                     ; PSHIFT
199   (GETVALUE 4)                        ; *ANS
201   (CONS)
202   (SETVALUE 4)                        ; *ANS
204   (GETVALUE 22)                       ; *NOSPLITF
206   (JMPIF L313)
209   (GETVALUE 20)                       ; L
211   (CAR&PUSH)
212   (LOAD&PUSH 5)
213   (GETVALUE&PUSH 1)                   ; IND
215   (LIST 3)
217   (SETVALUE 22)                       ; *NOSPLITF
219   (JMP L313)
222   L222
222   (LOAD&CDR&PUSH 9)
224   (GETVALUE 0)                        ; P
226   (CDR&PUSH)
227   (CALLS2&JMPIF 2 L69)                ; EQUAL
231   (LOAD&PUSH 9)
232   (GETVALUE 0)                        ; P
234   (CAR&PUSH)
235   (CALL2&PUSH 12)                     ; PDEGREE
237   (CALLS2&JMPIF 145 L112)             ; ZEROP
241   (NIL&PUSH)
242   (GETVALUE 13)                       ; *GCDL*
244   (CAR)
245   (BIND 14)                           ; $GCD
247   (LOAD 3)
248   (BIND 15)                           ; $ALGEBRAIC
250   (LOAD&PUSH 16)
251   (GETVALUE&PUSH 0)                   ; P
253   (CALL2&PUSH 18)                     ; ALGNORM
255   (CALL1 19)                          ; PFACTOR
257   (UNBIND 2)
259   (STORE 0)
260   (PUSH-NIL 2)
262   (GETVALUE 0)                        ; P
264   (CAR&PUSH)
265   (LOAD 3)
266   (BIND 20)                           ; L
268   (GETVALUE 20)                       ; L
270   (JMPIFNOT L340)
273   L273
273   (GETVALUE 20)                       ; L
275   (CAR)
276   (JMPIFATOM L329)
278   (GETVALUE 20)                       ; L
280   (CDR)
281   (CDR)
282   (JMPIFNOT L164)
285   (LOAD&PUSH 16)
286   (GETVALUE 20)                       ; L
288   (CAR&PUSH)
289   (CALL2 21)                          ; PGCD
291   L291
291   (STORE 4)
292   (CDR)
293   (CAR&PUSH)
294   (CONST&PUSH 5)                      ; 1
295   (CALLSR&JMPIF 1 45 L169)            ; =
300   (GETVALUE 20)                       ; L
302   (CDR)
303   (CAR&PUSH)
304   (CONST&PUSH 5)                      ; 1
305   (CALLSR&JMPIF 1 45 L188)            ; =
310   (LOAD&PUSH 4)
311   (LOAD&CONS&STORE 5)
313   L313
313   (LOAD&PUSH 16)
314   (LOAD&PUSH 5)
315   (CALL2 8)                           ; RQUOTIENT
317   (STORE 16)
319   (CDR&PUSH)
320   (GETVALUE&PUSH 9)                   ; *DENOM
322   (CALL2 3)                           ; PTIMESCHK
324   (SETVALUE 9)                        ; *DENOM
326   (LOAD&CAR&STORE 16 16)
329   L329
329   (GETVALUE 20)                       ; L
331   (CDR)
332   (CDR)
333   (SETVALUE 20)                       ; L
335   (GETVALUE 20)                       ; L
337   (JMPIF L273)
340   L340
340   (LOAD&PUSH 16)
341   (GETVALUE&PUSH 2)                   ; *NUM
343   (CALL2 3)                           ; PTIMESCHK
345   (SETVALUE 2)                        ; *NUM
347   (LOAD&PUSH 5)
348   (JMP L371)
350   L350
350   (LOAD&CAR&PUSH 0)
352   (LOAD&PUSH 0)
353   (LOAD&PUSH 6)
354   (CONST&PUSH 17)                     ; -1
355   (CALL&PUSH 3 6)                     ; PSHIFT
358   (GETVALUE&PUSH 0)                   ; P
360   (GETVALUE&PUSH 1)                   ; IND
362   (CALLS2&PUSH 150)                   ; 1+
364   (JSR L0)
367   (SKIP 1)
369   (LOAD&CDR&STORE 0)
371   L371
371   (LOAD&PUSH 0)
372   (CALLS1&JMPIFNOT 146 L350)          ; ENDP
375   (SKIP 1)
377   (GETVALUE 4)                        ; *ANS
379   (UNBIND1)
380   (SKIP 4)
382   L382
382   (UNBIND 2)
384   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PSHIFT (F ALG C) ...)-26|
(CONST 0) = PSHIFT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSHIFT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSHIFT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSHIFT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSHIFT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSHIFT
8     (SKIP&RET 1)


Disassembly of function PSHIFT
(CONST 0) = 0
(CONST 1) = (1 1)
(CONST 2) = PCTIMES
(CONST 3) = PPLUS
(CONST 4) = PGSUBST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 0
2     (CALLSR&JMPIF 1 45 L26)             ; =
6     (LOAD&CAR&PUSH 3)
8     (CONST 1)                           ; (1 1)
9     (CONS&PUSH)
10    (LOAD&PUSH 2)
11    (LOAD&PUSH 4)
12    (CONST 1)                           ; (1 1)
13    (CONS&PUSH)
14    (CALL2&PUSH 2)                      ; PCTIMES
16    (CALL2&PUSH 3)                      ; PPLUS
18    (LOAD&CAR&PUSH 4)
20    (LOAD&PUSH 5)
21    (CALL 3 4)                          ; PGSUBST
24    (SKIP&RET 4)
26    L26
26    (LOAD 3)
27    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $SPLITFIELD (P VAR) ...)-27|
(CONST 0) = $SPLITFIELD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SPLITFIELD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SPLITFIELD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SPLITFIELD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SPLITFIELD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SPLITFIELD
8     (SKIP&RET 1)


Disassembly of function $SPLITFIELD
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = VARLIST
(CONST 3) = GENVAR
(CONST 4) = GENPAIRS
(CONST 5) = *ALGVAR
(CONST 6) = $ALGEBRAIC
(CONST 7) = $GCD
(CONST 8) = NEWSYM
(CONST 9) = NEW-ALG
(CONST 10) = RATF
(CONST 11) = PSPLIT-FIELD
(CONST 12) = (MLIST)
(CONST 13) = PDIS*
(CONST 14) = RDIS*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P VAR)
writes special variables : (P *ALGVAR)
38 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (NIL)
7     (BIND 2)                            ; VARLIST
9     (NIL)
10    (BIND 3)                            ; GENVAR
12    (NIL)
13    (BIND 4)                            ; GENPAIRS
15    (NIL)
16    (BIND 5)                            ; *ALGVAR
18    (CONST 6)                           ; $ALGEBRAIC
19    (BIND 7)                            ; $GCD
21    (GETVALUE&PUSH 1)                   ; VAR
23    (CALL1 8)                           ; NEWSYM
25    (CALL0 9)                           ; NEW-ALG
27    (CAR)
28    (CAR)
29    (SETVALUE 5)                        ; *ALGVAR
31    (GETVALUE&PUSH 0)                   ; P
33    (CALL1 10)                          ; RATF
35    (CDR)
36    (CAR&PUSH)
37    (CALL1 11)                          ; PSPLIT-FIELD
39    (SETVALUE 0)                        ; P
41    (CONST&PUSH 12)                     ; (MLIST)
42    (GETVALUE 0)                        ; P
44    (CAR&PUSH)
45    (CALL1&PUSH 13)                     ; PDIS*
47    (CONST&PUSH 14)                     ; RDIS*
48    (GETVALUE 0)                        ; P
50    (CDR&PUSH)
51    (CALLSR 0 22)                       ; MAPCAR
54    (CONS)
55    (CONS)
56    (UNBIND 7)
58    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PSPLIT-FIELD (P) ...)-28|
(CONST 0) = PSPLIT-FIELD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSPLIT-FIELD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSPLIT-FIELD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSPLIT-FIELD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSPLIT-FIELD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSPLIT-FIELD
8     (SKIP&RET 1)


Disassembly of function PSPLIT-FIELD
(CONST 0) = P
(CONST 1) = PFACTOR
(CONST 2) = GOOD-FORM
(CONST 3) = PSPLIT-FIELD1
(CONST 4) = L
(CONST 5) = $ALGEBRAIC
(CONST 6) = LINEAR
(CONST 7) = *ALGVAR
(CONST 8) = PRIMELMT
(CONST 9) = RATGSUBST
(CONST 10) = |$splits in q|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*ALGVAR L P)
writes special variable : (L)
142 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; P
6     (CALL1&PUSH 1)                      ; PFACTOR
8     (CALL1&PUSH 2)                      ; GOOD-FORM
10    (JMP L56)
12    L12
12    (GETVALUE 4)                        ; L
14    (CAR)
15    (JMP L220)
18    L18
18    (GETVALUE 4)                        ; L
20    (CAR)
21    (CDR&PUSH)
22    (LOAD&CONS&STORE 1)
24    (JMP L200)
27    L27
27    (GETVALUE 4)                        ; L
29    (CAR)
30    (CAR)
31    (STORE 2)
32    (GETVALUE 4)                        ; L
34    (CAR)
35    (CDR&PUSH)
36    (LOAD&PUSH 2)
37    (CALLSR&STORE 2 35 1)               ; NCONC
41    (JMP L200)
44    L44
44    (LOAD&CAR&PUSH 0)
46    (LOAD&CDR&PUSH 0)
48    (CALL1&PUSH 3)                      ; PSPLIT-FIELD1
50    (LOAD&CONS&STORE 2)
52    (SKIP 1)
54    (LOAD&CDR&STORE 0)
56    L56
56    (LOAD&PUSH 0)
57    (CALLS1&JMPIFNOT 146 L44)           ; ENDP
60    (SKIP 1)
62    (LOAD&PUSH 0)
63    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
65    (SKIP 1)
67    (BIND 4)                            ; L
69    (T)
70    (BIND 5)                            ; $ALGEBRAIC
72    (GETVALUE 4)                        ; L
74    (CDR)
75    (JMPIFNOT L12)
78    (GETVALUE 4)                        ; L
80    (BIND 4)                            ; L
82    (PUSH-NIL 3)
84    (GETVALUE 4)                        ; L
86    (JMPIFNOT L210)
89    L89
89    (GETVALUE 4)                        ; L
91    (CAR)
92    (CAR&PUSH)
93    (JMPIFEQTO 6 L18)                   ; LINEAR
97    (LOAD&JMPIFNOT 2 L27)
101   (GETVALUE 0)                        ; P
103   (CAR&PUSH)
104   (LOAD 3)
105   (CDR)
106   (CONS&PUSH)
107   (GETVALUE 0)                        ; P
109   (CAR&PUSH)
110   (GETVALUE 4)                        ; L
112   (CAR)
113   (CAR)
114   (CDR)
115   (CONS&PUSH)
116   (GETVALUE&PUSH 7)                   ; *ALGVAR
118   (CALL 3 8)                          ; PRIMELMT
121   (STORE 0)
122   (NIL&PUSH)
123   (GETVALUE 4)                        ; L
125   (CAR)
126   (CDR&PUSH)
127   (JMP L151)
129   L129
129   (LOAD&CAR&PUSH 0)
131   (LOAD 3)
132   (CDR)
133   (CDR)
134   (CDR)
135   (CAR&PUSH)
136   (GETVALUE 4)                        ; L
138   (CAR)
139   (CAR)
140   (CAR&PUSH)
141   (LOAD&PUSH 2)
142   (CALL&PUSH 3 9)                     ; RATGSUBST
145   (LOAD&CONS&STORE 2)
147   (SKIP 1)
149   (LOAD&CDR&STORE 0)
151   L151
151   (LOAD&PUSH 0)
152   (CALLS1&JMPIFNOT 146 L129)          ; ENDP
155   (SKIP 1)
157   (LOAD&PUSH 0)
158   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
161   (NIL&PUSH)
162   (LOAD&PUSH 3)
163   (JMP L183)
165   L165
165   (LOAD&CAR&PUSH 0)
167   (LOAD 4)
168   (CDR)
169   (CDR)
170   (CAR&PUSH)
171   (LOAD&CAR&PUSH 7)
173   (LOAD&PUSH 2)
174   (CALL&PUSH 3 9)                     ; RATGSUBST
177   (LOAD&CONS&STORE 2)
179   (SKIP 1)
181   (LOAD&CDR&STORE 0)
183   L183
183   (LOAD&PUSH 0)
184   (CALLS1&JMPIFNOT 146 L165)          ; ENDP
187   (SKIP 1)
189   (LOAD&PUSH 0)
190   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
193   (CALLSR&STORE 2 35 1)               ; NCONC
197   (LOAD&CAR&STORE 0 2)
200   L200
200   (GETVALUE 4)                        ; L
202   (CDR)
203   (SETVALUE 4)                        ; L
205   (GETVALUE 4)                        ; L
207   (JMPIF L89)
210   L210
210   (LOAD&JMPIF 2 L214)
213   (CONST 10)                          ; |$splits in q|
214   L214
214   (PUSH)
215   (LOAD 2)
216   (CONS)
217   (SKIP 3)
219   (UNBIND1)
220   L220
220   (UNBIND 3)
222   (SKIP&RET 2)


Disassembly of function #:|(DEFUN PLSOLVE (P) ...)-29|
(CONST 0) = PLSOLVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PLSOLVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PLSOLVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PLSOLVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PLSOLVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PLSOLVE
8     (SKIP&RET 1)


Disassembly of function PLSOLVE
(CONST 0) = P
(CONST 1) = 0
(CONST 2) = PTERM
(CONST 3) = 1
(CONST 4) = PMINUS
(CONST 5) = RATREDUCE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CDR&PUSH)
6     (CONST&PUSH 1)                      ; 0
7     (CALL2&PUSH 2)                      ; PTERM
9     (GETVALUE 0)                        ; P
11    (CDR&PUSH)
12    (CONST&PUSH 3)                      ; 1
13    (CALL2&PUSH 2)                      ; PTERM
15    (CALL1&PUSH 4)                      ; PMINUS
17    (CALL2 5)                           ; RATREDUCE
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSPLIT-FIELD1 (P) ...)-30|
(CONST 0) = PSPLIT-FIELD1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSPLIT-FIELD1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSPLIT-FIELD1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSPLIT-FIELD1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSPLIT-FIELD1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSPLIT-FIELD1
8     (SKIP&RET 1)


Disassembly of function PSPLIT-FIELD1
(CONST 0) = P
(CONST 1) = *ALGVAR
(CONST 2) = $ALGEBRAIC
(CONST 3) = $RATALGDENOM
(CONST 4) = 1
(CONST 5) = LINEAR
(CONST 6) = PLSOLVE
(CONST 7) = (1 1)
(CONST 8) = ALPHA
(CONST 9) = *NOSPLITF
(CONST 10) = TELLRAT
(CONST 11) = PUTPROP
(CONST 12) = PCTIMES
(CONST 13) = PGET
(CONST 14) = PDIFFERENCE
(CONST 15) = RQUOTIENT
(CONST 16) = *ANS
(CONST 17) = *NUM
(CONST 18) = *DENOM
(CONST 19) = 0
(CONST 20) = PFACTORALG1
(CONST 21) = EXCHANGEVAR
(CONST 22) = PGCD
(CONST 23) = RATTIMES
(CONST 24) = RATPLUS
(CONST 25) = RATGSUBST
(CONST 26) = RGSUBST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*NOSPLITF ALPHA P *ALGVAR)
writes special variables : (ALPHA *NOSPLITF)
216 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 1)                   ; *ALGVAR
5     (GETVALUE 0)                        ; P
7     (CDR)
8     (CONS&PUSH)
9     (NIL&PUSH)
10    (T)
11    (BIND 2)                            ; $ALGEBRAIC
13    (T)
14    (BIND 3)                            ; $RATALGDENOM
16    (GETVALUE 0)                        ; P
18    (CDR)
19    (CAR&PUSH)
20    (JMPIFEQTO 4 L90)                   ; 1
24    (GETVALUE&PUSH 0)                   ; P
26    (LIST&PUSH 1)
28    (PUSH-NIL 2)
30    (LOAD&CAR&PUSH 10)
32    (CONST 7)                           ; (1 1)
33    (CONS&PUSH)
34    (CONST 4)                           ; 1
35    (CONS)
36    (BIND 8)                            ; ALPHA
38    (LOAD 3)
39    (BIND 9)                            ; *NOSPLITF
41    (LOAD&JMPIFNOT 8 L327)
45    L45
45    (GETVALUE&PUSH 8)                   ; ALPHA
47    (LOAD&CONS&STORE 15)
49    (LOAD&CAR&PUSH 16)
51    (LOAD&CDR&PUSH 17)
53    (CONST&PUSH 10)                     ; TELLRAT
54    (CALL 3 11)                         ; PUTPROP
57    (LOAD&PUSH 8)
58    (GETVALUE 8)                        ; ALPHA
60    (CDR&PUSH)
61    (LOAD&CAR&PUSH 10)
63    (CALL2&PUSH 12)                     ; PCTIMES
65    (GETVALUE 8)                        ; ALPHA
67    (CDR&PUSH)
68    (LOAD 11)
69    (CAR)
70    (CAR&PUSH)
71    (CALL1&PUSH 13)                     ; PGET
73    (CALL2&PUSH 12)                     ; PCTIMES
75    (GETVALUE 8)                        ; ALPHA
77    (CAR&PUSH)
78    (CALL2&PUSH 14)                     ; PDIFFERENCE
80    (CALL2 15)                          ; RQUOTIENT
82    (CAR&PUSH)
83    (CALLS1 168)                        ; RPLACA
85    (PUSH-NIL 2)
87    (LOAD&PUSH 10)
88    (JMP L130)
90    L90
90    (CONST&PUSH 5)                      ; LINEAR
91    (GETVALUE&PUSH 0)                   ; P
93    (CALL1 6)                           ; PLSOLVE
95    (CONS)
96    (JMP L335)
99    L99
99    (LOAD&CAR&PUSH 0)
101   (NIL)
102   (BIND 16)                           ; *ANS
104   (CONST 4)                           ; 1
105   (BIND 17)                           ; *NUM
107   (CONST 4)                           ; 1
108   (BIND 18)                           ; *DENOM
110   (LOAD&PUSH 9)
111   (LOAD&PUSH 30)
113   (CONST&PUSH 19)                     ; 0
114   (CALL&PUSH 3 20)                    ; PFACTORALG1
117   (CALLS2 73)                         ; NREVERSE
119   (UNBIND 3)
121   (PUSH)
122   (LOAD&PUSH 3)
123   (CALLS1&STORE 163 2)                ; NRECONC
126   (SKIP 1)
128   (LOAD&CDR&STORE 0)
130   L130
130   (LOAD&PUSH 0)
131   (CALLS1&JMPIFNOT 146 L99)           ; ENDP
134   (SKIP 1)
136   (LOAD&PUSH 0)
137   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
140   (JMP L170)
142   L142
142   (LOAD&PUSH 0)
143   (CALL1&PUSH 6)                      ; PLSOLVE
145   (LOAD&CONS&STORE 18)
147   (NIL)
148   (JMP L161)
150   L150
150   (LOAD&CAR&PUSH 0)
152   (LOAD 0)
153   (CDR)
154   (CAR&PUSH)
155   (JMPIFEQTO 4 L142)                  ; 1
158   (LOAD&PUSH 0)
159   (LIST 1)
161   L161
161   (PUSH)
162   (LOAD&PUSH 3)
163   (CALLS1&STORE 163 2)                ; NRECONC
166   (SKIP 1)
168   (LOAD&CDR&STORE 0)
170   L170
170   (LOAD&PUSH 0)
171   (CALLS1&JMPIFNOT 146 L150)          ; ENDP
174   (SKIP 1)
176   (LOAD&PUSH 0)
177   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
179   (SKIP 1)
181   (STORE 8)
183   (GETVALUE 9)                        ; *NOSPLITF
185   (JMPIFNOT L320)
188   (CAR)
189   (STORE 7)
190   (GETVALUE 9)                        ; *NOSPLITF
192   (CDR)
193   (SETVALUE 9)                        ; *NOSPLITF
195   (GETVALUE&PUSH 1)                   ; *ALGVAR
197   (LOAD&CDR&PUSH 8)
199   (CONST&PUSH 10)                     ; TELLRAT
200   (CALL 3 11)                         ; PUTPROP
203   (GETVALUE 9)                        ; *NOSPLITF
205   (CAR)
206   (CAR&PUSH)
207   (LOAD 17)
209   (CDR)
210   (CONS&PUSH)
211   (GETVALUE 9)                        ; *NOSPLITF
213   (CAR&PUSH)
214   (GETVALUE&PUSH 1)                   ; *ALGVAR
216   (CALL2&PUSH 21)                     ; EXCHANGEVAR
218   (CALL2&PUSH 22)                     ; PGCD
220   (CALL1&PUSH 6)                      ; PLSOLVE
222   (GETVALUE&PUSH 1)                   ; *ALGVAR
224   (CONST 7)                           ; (1 1)
225   (CONS&PUSH)
226   (CONST 4)                           ; 1
227   (CONS&PUSH)
228   (GETVALUE 9)                        ; *NOSPLITF
230   (CDR)
231   (CAR&PUSH)
232   (CALLSR&PUSH 0 54)                  ; -
235   (CONST 4)                           ; 1
236   (CONS&PUSH)
237   (LOAD&PUSH 2)
238   (T&PUSH)
239   (CALL&PUSH 3 23)                    ; RATTIMES
242   (CALL2 24)                          ; RATPLUS
244   (SETVALUE 8)                        ; ALPHA
246   (NIL&PUSH)
247   (LOAD&PUSH 17)
248   (JMP L265)
250   L250
250   (LOAD&CAR&PUSH 0)
252   (LOAD&PUSH 3)
253   (LOAD&CAR&PUSH 21)
255   (LOAD&PUSH 2)
256   (CALL&PUSH 3 25)                    ; RATGSUBST
259   (LOAD&CONS&STORE 2)
261   (SKIP 1)
263   (LOAD&CDR&STORE 0)
265   L265
265   (LOAD&PUSH 0)
266   (CALLS1&JMPIFNOT 146 L250)          ; ENDP
269   (SKIP 1)
271   (LOAD&PUSH 0)
272   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
274   (SKIP 1)
276   (STORE 16)
278   (NIL&PUSH)
279   (LOAD&PUSH 10)
280   (JMP L298)
282   L282
282   (LOAD&CAR&PUSH 0)
284   (LOAD&PUSH 3)
285   (LOAD&CAR&PUSH 21)
287   (LOAD&PUSH 2)
288   (CALL 3 26)                         ; RGSUBST
291   (CAR&PUSH)
292   (LOAD&CONS&STORE 2)
294   (SKIP 1)
296   (LOAD&CDR&STORE 0)
298   L298
298   (LOAD&PUSH 0)
299   (CALLS1&JMPIFNOT 146 L282)          ; ENDP
302   (SKIP 1)
304   (LOAD&PUSH 0)
305   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
307   (SKIP 1)
309   (STORE 9)
311   (GETVALUE&PUSH 1)                   ; *ALGVAR
313   (LOAD 9)
314   (CDR)
315   (CONS)
316   (STORE 17)
318   (SKIP 1)
320   L320
320   (NIL)
321   (SETVALUE 9)                        ; *NOSPLITF
323   (LOAD&JMPIF 8 L45)
327   L327
327   (LOAD&PUSH 16)
328   (LOAD 16)
330   (CONS)
331   (UNBIND 2)
333   (SKIP 3)
335   L335
335   (UNBIND 2)
337   (SKIP 2)
339   (UNBIND1)
340   (SKIP&RET 2)


Disassembly of function #:|(DEFUN EXCHANGEVAR (POLY VAR) ...)-31|
(CONST 0) = EXCHANGEVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXCHANGEVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXCHANGEVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXCHANGEVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXCHANGEVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXCHANGEVAR
8     (SKIP&RET 1)


Disassembly of function EXCHANGEVAR
(CONST 0) = VAR
(CONST 1) = OVAR
(CONST 2) = SET
(CONST 3) = PVSUBST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR OVAR)
26 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (PUSH-UNBOUND 1)
5     (CALLS2&PUSH 143)                   ; GENSYM
7     (LOAD 6)
8     (CAR)
9     (BIND 1)                            ; OVAR
11    (LOAD&PUSH 3)
12    (GETVALUE&PUSH 1)                   ; OVAR
14    (CALLS1&PUSH 91)                    ; EVAL
16    (CALLS2&PUSH 150)                   ; 1+
18    (CALL2 2)                           ; SET
20    (GETVALUE&PUSH 1)                   ; OVAR
22    (LOAD&PUSH 4)
23    (GETVALUE&PUSH 0)                   ; VAR
25    (GETVALUE&PUSH 1)                   ; OVAR
27    (LOAD&PUSH 7)
28    (GETVALUE&PUSH 0)                   ; VAR
30    (LOAD&PUSH 15)
31    (CALL&PUSH 3 3)                     ; PVSUBST
34    (CALL&PUSH 3 3)                     ; PVSUBST
37    (CALL 3 3)                          ; PVSUBST
40    (UNBIND1)
41    (SKIP 1)
43    (UNBIND1)
44    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RGSUBST (VAL VAR P) ...)-32|
(CONST 0) = RGSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RGSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RGSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RGSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RGSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RGSUBST
8     (SKIP&RET 1)


Disassembly of function RGSUBST
(CONST 0) = VAR
(CONST 1) = P
(CONST 2) = 1
(CONST 3) = X
(CONST 4) = FIXNUMP
(CONST 5) = 0
(CONST 6) = PTERM
(CONST 7) = RATEXPT
(CONST 8) = RATTIMES
(CONST 9) = RATPLUS
(CONST 10) = B
(CONST 11) = SET
(CONST 12) = PVSUBST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B X VAR P)
129 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (LOAD 4)
4     (BIND 1)                            ; P
6     (GETVALUE 1)                        ; P
8     (JMPIFATOM L44)
10    (GETVALUE&PUSH 0)                   ; VAR
12    (GETVALUE 1)                        ; P
14    (CAR)
15    (JMPIFNOTEQ L141)
18    (LOAD 9)
19    (BIND 3)                            ; X
21    (GETVALUE&PUSH 3)                   ; X
23    (CALL1&JMPIF 4 L35)                 ; FIXNUMP
26    (GETVALUE 3)                        ; X
28    (JMPIFCONSP L65)
30    (GETVALUE&PUSH 3)                   ; X
32    (CALLS2&JMPIFNOT 15 L51)            ; FLOATP
35    L35
35    (GETVALUE&PUSH 3)                   ; X
37    (CALLS2 145)                        ; ZEROP
39    (UNBIND1)
40    (JMPIFNOT L66)
42    (JMP L54)
44    L44
44    (GETVALUE&PUSH 1)                   ; P
46    (CONST 2)                           ; 1
47    (CONS)
48    (JMP L192)
51    L51
51    (UNBIND1)
52    (JMPIFNOT L66)
54    L54
54    (GETVALUE 1)                        ; P
56    (CDR&PUSH)
57    (CONST&PUSH 5)                      ; 0
58    (CALL2&PUSH 6)                      ; PTERM
60    (CONST 2)                           ; 1
61    (CONS)
62    (JMP L192)
65    L65
65    (UNBIND1)
66    L66
66    (GETVALUE 1)                        ; P
68    (CDR)
69    (CAR&PUSH)
70    (GETVALUE 1)                        ; P
72    (CDR)
73    (CDR)
74    (CDR&PUSH)
75    (GETVALUE 1)                        ; P
77    (CDR)
78    (CDR)
79    (CAR&PUSH)
80    (CONST 2)                           ; 1
81    (CONS&PUSH)
82    (LOAD&JMPIFNOT 1 L119)
85    L85
85    (LOAD&CAR&PUSH 1)
87    (LOAD 2)
88    (CDR)
89    (CDR&PUSH)
90    (LOAD&PUSH 2)
91    (LOAD&PUSH 15)
92    (LOAD&PUSH 6)
93    (LOAD&CAR&PUSH 6)
95    (CALLSR&PUSH 1 54)                  ; -
98    (CALL2&PUSH 7)                      ; RATEXPT
100   (T&PUSH)
101   (CALL&PUSH 3 8)                     ; RATTIMES
104   (LOAD 4)
105   (CDR)
106   (CAR&PUSH)
107   (CONST 2)                           ; 1
108   (CONS&PUSH)
109   (CALL2 9)                           ; RATPLUS
111   (STORE 2)
112   (POP&STORE 2)
114   (POP&STORE 2)
116   (LOAD&JMPIF 1 L85)
119   L119
119   (LOAD&PUSH 0)
120   (LOAD&PUSH 13)
121   (LOAD&PUSH 4)
122   (CALL2&PUSH 7)                      ; RATEXPT
124   (T&PUSH)
125   (CALL 3 8)                          ; RATTIMES
128   (SKIP 3)
130   (JMPIF1 L192)
132   (NIL)
133   (JMP L192)
135   L135
135   (GETVALUE&PUSH 1)                   ; P
137   (CONST 2)                           ; 1
138   (CONS)
139   (JMP L192)
141   L141
141   (GETVALUE&PUSH 0)                   ; VAR
143   (GETVALUE 1)                        ; P
145   (CAR)
146   (BIND 10)                           ; B
148   (LOAD&PUSH 3)
149   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
151   (GETVALUE&PUSH 10)                  ; B
153   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
155   (CALLSR 1 48)                       ; >
158   (UNBIND1)
159   (SKIP 1)
161   (JMPIF L135)
163   (PUSH-UNBOUND 1)
165   (CALLS2&PUSH 143)                   ; GENSYM
167   (LOAD&PUSH 0)
168   (GETVALUE 1)                        ; P
170   (CAR&PUSH)
171   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
173   (CALLS2&PUSH 150)                   ; 1+
175   (CALL2 11)                          ; SET
177   (LOAD&PUSH 10)
178   (LOAD&PUSH 1)
179   (LOAD&PUSH 2)
180   (GETVALUE&PUSH 0)                   ; VAR
182   (GETVALUE&PUSH 1)                   ; P
184   (CALL&PUSH 3 12)                    ; PVSUBST
187   (JSR L0)
190   (SKIP 1)
192   L192
192   (UNBIND 2)
194   (SKIP&RET 4)


Disassembly of function #:|(DEFUN RATGSUBST (VAL VAR RAT) ...)-33|
(CONST 0) = RATGSUBST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATGSUBST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATGSUBST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATGSUBST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATGSUBST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATGSUBST
8     (SKIP&RET 1)


Disassembly of function RATGSUBST
(CONST 0) = VAR
(CONST 1) = RGSUBST
(CONST 2) = RATQUOTIENT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
13 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 6)
4     (GETVALUE&PUSH 0)                   ; VAR
6     (LOAD&CAR&PUSH 6)
8     (CALL&PUSH 3 1)                     ; RGSUBST
11    (LOAD&PUSH 7)
12    (GETVALUE&PUSH 0)                   ; VAR
14    (LOAD&CDR&PUSH 7)
16    (CALL&PUSH 3 1)                     ; RGSUBST
19    (CALL2 2)                           ; RATQUOTIENT
21    (UNBIND1)
22    (SKIP&RET 4)


Disassembly of function #:|(DEFUN ALGNORM (F P) ...)-34|
(CONST 0) = ALGNORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGNORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGNORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGNORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGNORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGNORM
8     (SKIP&RET 1)


Disassembly of function ALGNORM
(CONST 0) = P
(CONST 1) = PRESULT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; P
6     (GETVALUE 0)                        ; P
8     (CAR&PUSH)
9     (CALL 3 1)                          ; PRESULT
12    (UNBIND1)
13    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $ALGNORM (R P VAR) ...)-35|
(CONST 0) = $ALGNORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ALGNORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ALGNORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ALGNORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ALGNORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ALGNORM
8     (SKIP&RET 1)


Disassembly of function $ALGNORM
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = VARLIST
(CONST 3) = GENVAR
(CONST 4) = RATF
(CONST 5) = ALGNORM
(CONST 6) = RDIS*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P VAR)
writes special variable : (P)
31 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 1)                   ; VAR
8     (LIST 1)
10    (BIND 2)                            ; VARLIST
12    (NIL)
13    (BIND 3)                            ; GENVAR
15    (LOAD&PUSH 15)
16    (CALL1 4)                           ; RATF
18    (STORE 15)
20    (GETVALUE&PUSH 0)                   ; P
22    (CALL1 4)                           ; RATF
24    (CDR)
25    (CAR)
26    (SETVALUE 0)                        ; P
28    (LOAD 15)
30    (CDR)
31    (CAR&PUSH)
32    (GETVALUE&PUSH 0)                   ; P
34    (CALL2&PUSH 5)                      ; ALGNORM
36    (LOAD 16)
38    (CDR)
39    (CDR&PUSH)
40    (GETVALUE&PUSH 0)                   ; P
42    (CALL2 5)                           ; ALGNORM
44    (CONS&PUSH)
45    (CALL1 6)                           ; RDIS*
47    (UNBIND 4)
49    (SKIP&RET 4)


Disassembly of function #:|(DEFUN SQFRNORM (F P FVAR) ...)-36|
(CONST 0) = SQFRNORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SQFRNORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQFRNORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SQFRNORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SQFRNORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SQFRNORM
8     (SKIP&RET 1)


Disassembly of function SQFRNORM
(CONST 0) = P
(CONST 1) = ORDERVAR
(CONST 2) = 0
(CONST 3) = (1 1)
(CONST 4) = PDIFFERENCE
(CONST 5) = RES
(CONST 6) = ALGNORM
(CONST 7) = OLDCONTENT
(CONST 8) = PSQFRP
(CONST 9) = PGSUBST
(CONST 10) = $ALGEBRAIC
(CONST 11) = TELLRAT
(CONST 12) = PUTPROP
(CONST 13) = PVSUBST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RES P)
writes special variables : (RES P)
76 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CAR&PUSH)
6     (LOAD&PUSH 0)
7     (LOAD&PUSH 8)
8     (GETVALUE&PUSH 0)                   ; P
10    (LIST&PUSH 2)
12    (CALL2 1)                           ; ORDERVAR
14    (CDR)
15    (STORE 7)
16    (CDR)
17    (CAR)
18    (SETVALUE 0)                        ; P
20    (LOAD&CAR&STORE 7 7)
23    (CONST&PUSH 2)                      ; 0
24    (LOAD&PUSH 6)
25    (CONST 3)                           ; (1 1)
26    (CONS&PUSH)
27    (GETVALUE 0)                        ; P
29    (CAR&PUSH)
30    (CONST 3)                           ; (1 1)
31    (CONS&PUSH)
32    (CALL2&PUSH 4)                      ; PDIFFERENCE
34    (LOAD&PUSH 9)
35    (NIL)
36    (BIND 5)                            ; RES
38    (JMP L51)
40    L40
40    (LOAD&INC&PUSH 5)
42    (LOAD&PUSH 5)
43    (LOAD&PUSH 13)
44    (LOAD&PUSH 6)
45    (CALL 3 9)                          ; PGSUBST
48    (STORE 4)
49    (POP&STORE 5)
51    L51
51    (LOAD&CAR&PUSH 3)
53    (GETVALUE 0)                        ; P
55    (CAR)
56    (JMPIFNOTEQ L40)
58    (LOAD&PUSH 3)
59    (GETVALUE&PUSH 0)                   ; P
61    (CALL2&PUSH 6)                      ; ALGNORM
63    (CALL1 7)                           ; OLDCONTENT
65    (CDR)
66    (CAR)
67    (SETVALUE 5)                        ; RES
69    (JMPIFNOT L40)
71    (PUSH)
72    (LOAD&PUSH 12)
73    (CALL2&JMPIFNOT 8 L40)              ; PSQFRP
76    (GETVALUE&PUSH 5)                   ; RES
78    (T)
79    (BIND 10)                           ; $ALGEBRAIC
81    (LOAD&PUSH 10)
82    (GETVALUE 0)                        ; P
84    (CDR&PUSH)
85    (CONST&PUSH 11)                     ; TELLRAT
86    (CALL 3 12)                         ; PUTPROP
89    (LOAD&PUSH 10)
90    (GETVALUE 0)                        ; P
92    (CAR&PUSH)
93    (LOAD&PUSH 9)
94    (CALL 3 13)                         ; PVSUBST
97    (UNBIND1)
98    (PUSH)
99    (GETVALUE 0)                        ; P
101   (CAR&PUSH)
102   (GETVALUE&PUSH 0)                   ; P
104   (LOAD&PUSH 9)
105   (LIST 5)
107   (UNBIND1)
108   (SKIP 4)
110   (UNBIND1)
111   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PRIMELMT (A B GVAR ...) ...)-37|
(CONST 0) = PRIMELMT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRIMELMT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRIMELMT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRIMELMT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRIMELMT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRIMELMT
8     (SKIP&RET 1)


Disassembly of function PRIMELMT
(CONST 0) = B
(CONST 1) = $ALGEBRAIC
(CONST 2) = SQFRNORM
(CONST 3) = ALPHA
(CONST 4) = $RATALGDENOM
(CONST 5) = OLDCONTENT
(CONST 6) = TELLRAT
(CONST 7) = PUTPROP
(CONST 8) = PVSUBST
(CONST 9) = PGCD
(CONST 10) = PLSOLVE
(CONST 11) = (1 1)
(CONST 12) = 1
(CONST 13) = RATTIMES
(CONST 14) = RATPLUS
(CONST 15) = PPLUS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALPHA B)
writes special variables : (ALPHA $ALGEBRAIC)
94 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; B
3     (NIL)
4     (BIND 1)                            ; $ALGEBRAIC
6     (LOAD&PUSH 7)
7     (LOAD 10)
8     (CDR)
9     (CONS&PUSH)
10    (GETVALUE&PUSH 0)                   ; B
12    (LOAD&PUSH 9)
13    (CALL&PUSH 3 2)                     ; SQFRNORM
16    (NIL)
17    (BIND 3)                            ; ALPHA
19    (NIL&PUSH)
20    (T)
21    (BIND 4)                            ; $RATALGDENOM
23    (LOAD&PUSH 7)
24    (LOAD&CAR&PUSH 8)
26    (CALL1 5)                           ; OLDCONTENT
28    (CDR)
29    (CAR&PUSH)
30    (CALLS1 168)                        ; RPLACA
32    (LOAD&PUSH 15)
33    (LOAD 8)
34    (CAR)
35    (CDR&PUSH)
36    (CONST&PUSH 6)                      ; TELLRAT
37    (CALL 3 7)                          ; PUTPROP
40    (T)
41    (SETVALUE 1)                        ; $ALGEBRAIC
43    (LOAD 7)
44    (CDR)
45    (CDR)
46    (CDR)
47    (CAR&PUSH)
48    (LOAD 8)
49    (CDR)
50    (CDR)
51    (CAR&PUSH)
52    (GETVALUE 0)                        ; B
54    (CAR&PUSH)
55    (LOAD 10)
56    (CDR)
57    (CAR&PUSH)
58    (CALL&PUSH 3 8)                     ; PVSUBST
61    (CALL2 9)                           ; PGCD
63    (STORE 3)
64    (PUSH)
65    (CALL1 10)                          ; PLSOLVE
67    (STORE 3)
68    (LOAD&PUSH 15)
69    (CONST 11)                          ; (1 1)
70    (CONS&PUSH)
71    (CONST 12)                          ; 1
72    (CONS&PUSH)
73    (LOAD 8)
74    (CDR)
75    (CDR)
76    (CDR)
77    (CDR)
78    (CAR&PUSH)
79    (CALLSR&PUSH 0 54)                  ; -
82    (CONST 12)                          ; 1
83    (CONS&PUSH)
84    (LOAD&PUSH 5)
85    (T&PUSH)
86    (CALL&PUSH 3 13)                    ; RATTIMES
89    (CALL2 14)                          ; RATPLUS
91    (SETVALUE 3)                        ; ALPHA
93    (LOAD&CAR&PUSH 7)
95    (LOAD&PUSH 18)
96    (CONST 11)                          ; (1 1)
97    (CONS&PUSH)
98    (GETVALUE 0)                        ; B
100   (CAR&PUSH)
101   (CONST&PUSH 12)                     ; 1
102   (LOAD 11)
103   (CDR)
104   (CDR)
105   (CDR)
106   (CDR)
107   (CAR&PUSH)
108   (CALLSR&PUSH 0 54)                  ; -
111   (LIST&PUSH 3)
113   (CALL2&PUSH 15)                     ; PPLUS
115   (GETVALUE&PUSH 3)                   ; ALPHA
117   (LOAD&PUSH 6)
118   (LIST 4)
120   (UNBIND1)
121   (SKIP 1)
123   (UNBIND1)
124   (SKIP 1)
126   (UNBIND 2)
128   (SKIP&RET 4)


Disassembly of function #:|(COMMENT DISCRIMINANT OF ...)-38|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $BDISCR N ...)-39|
(CONST 0) = $BDISCR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BDISCR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BDISCR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BDISCR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BDISCR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BDISCR
8     (SKIP&RET 1)


Disassembly of function $BDISCR
(CONST 0) = VARLIST
(CONST 1) = GENVAR
(CONST 2) = RFORM
(CONST 3) = LISTIFY1
(CONST 4) = NARG1
(CONST 5) = BDISCR
(CONST 6) = MRAT
(CONST 7) = SIMP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (GENVAR VARLIST)
27 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; VARLIST
6     (NIL)
7     (BIND 1)                            ; GENVAR
9     (CONST&SYMBOL-FUNCTION&PUSH 2)      ; RFORM
11    (LOAD&DEC&PUSH 7)
13    (LOAD&PUSH 10)
14    (CALL2&PUSH 3)                      ; LISTIFY1
16    (CALLSR&PUSH 0 22)                  ; MAPCAR
19    (LOAD&PUSH 7)
20    (LOAD&PUSH 10)
21    (CALL2&PUSH 4)                      ; NARG1
23    (CALL1 2)                           ; RFORM
25    (CAR&PUSH)
26    (CALL2&PUSH 5)                      ; BDISCR
28    (CONST&PUSH 6)                      ; MRAT
29    (CONST&PUSH 7)                      ; SIMP
30    (GETVALUE&PUSH 0)                   ; VARLIST
32    (GETVALUE&PUSH 1)                   ; GENVAR
34    (LIST&PUSH 4)
36    (LOAD 1)
37    (CONS)
38    (SKIP 1)
40    (UNBIND 2)
42    (SKIP&RET 3)


Disassembly of function #:|(DEFUN BDISCR (L MINP) ...)-40|
(CONST 0) = BDISCR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BDISCR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BDISCR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BDISCR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BDISCR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BDISCR
8     (SKIP&RET 1)


Disassembly of function BDISCR
(CONST 0) = L
(CONST 1) = PTIMES
(CONST 2) = ALGTRACE
(CONST 3) = DET
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
38 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; L
6     (JMP L46)
8     L8
8     (LOAD&CAR&PUSH 0)
10    (NIL&PUSH)
11    (GETVALUE&PUSH 0)                   ; L
13    (JMP L30)
15    L15
15    (LOAD&CAR&PUSH 0)
17    (LOAD&PUSH 3)
18    (LOAD&PUSH 1)
19    (CALL2&PUSH 1)                      ; PTIMES
21    (LOAD&PUSH 11)
22    (CALL2&PUSH 2)                      ; ALGTRACE
24    (LOAD&CONS&STORE 2)
26    (SKIP 1)
28    (LOAD&CDR&STORE 0)
30    L30
30    (LOAD&PUSH 0)
31    (CALLS1&JMPIFNOT 146 L15)           ; ENDP
34    (SKIP 1)
36    (LOAD&PUSH 0)
37    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
40    (LOAD&CONS&STORE 2)
42    (SKIP 1)
44    (LOAD&CDR&STORE 0)
46    L46
46    (LOAD&PUSH 0)
47    (CALLS1&JMPIFNOT 146 L8)            ; ENDP
50    (SKIP 1)
52    (LOAD&PUSH 0)
53    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
56    (CALL1 3)                           ; DET
58    (UNBIND1)
59    (SKIP&RET 3)


Wrote file binary-clisp/nalgfa.fas
Wrote file /cygdrive/e/temp/maxima/src/nalgfa.lis