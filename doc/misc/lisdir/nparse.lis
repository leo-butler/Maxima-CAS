Listing of compilation of file /cygdrive/e/temp/maxima/src/nparse.lisp
on 2002-12-17 13:34:12 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/nparse.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE NPARSE)-2|
(CONST 0) = NPARSE
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; NPARSE
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS DEFCAL MOPERS)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(PROCLAIM '(OPTIMIZE # # ...))-4|
(CONST 0) = (OPTIMIZE (SAFETY 2) (SPEED 2) (SPACE 2))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; (OPTIMIZE (SAFETY 2) (SPEED 2) ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ALPHABET '(#\\_ #\\%) ...)-5-1|
(CONST 0) = ALPHABET
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = (#\_ #\%)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALPHABET
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ALPHABET
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; (#\_ #\%)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ALPHABET '(#\\_ #\\%) ...)-5-2|
(CONST 0) = (SPECIAL ALPHABET)
(CONST 1) = ALPHABET
(CONST 2) = (#\_ #\%)
(CONST 3) = VARIABLE
(CONST 4) = "alphabetic exceptions list"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ALPHABET)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ALPHABET
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ALPHABET
8     (CONST&PUSH 2)                      ; (#\_ #\%)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; ALPHABET
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "alphabetic exceptions list"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; ALPHABET
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO IMEMBER (X L) ...)-6|
(CONST 0) = IMEMBER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IMEMBER>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; IMEMBER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IMEMBER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IMEMBER>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; IMEMBER
10    (SKIP&RET 1)


Disassembly of function IMEMBER
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = X
(CONST 3) = L
(CONST 4) = MEMBER
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (L X)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L30)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; X
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR)
17    (BIND 3)                            ; L
19    (CONST&PUSH 4)                      ; MEMBER
20    (GETVALUE&PUSH 2)                   ; X
22    (GETVALUE&PUSH 3)                   ; L
24    (LIST 3)
26    (UNBIND 2)
28    (SKIP&RET 3)
30    L30
30    (LOAD&PUSH 2)
31    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
33    (SKIP&RET 3)


Disassembly of function #:|(PROGN (DEFMVAR ALPHABET '#) (DEFMFUN ALPHABETP # ...) ...)-7-1-1|
(CONST 0) = ALPHABET
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = (#\_ #\%)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALPHABET
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ALPHABET
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; (#\_ #\%)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(PROGN (DEFMVAR ALPHABET '#) (DEFMFUN ALPHABETP # ...) ...)-7-1-2|
(CONST 0) = (SPECIAL ALPHABET)
(CONST 1) = ALPHABET
(CONST 2) = (#\_ #\%)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ALPHABET)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ALPHABET
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ALPHABET
8     (CONST&PUSH 2)                      ; (#\_ #\%)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (VALUES0)
12    (SKIP&RET 1)


Disassembly of function #:|(PROGN (DEFMVAR ALPHABET '#) (DEFMFUN ALPHABETP # ...) ...)-7-2|
(CONST 0) = ALPHABETP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALPHABETP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALPHABETP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALPHABETP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALPHABETP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function ALPHABETP
(CONST 0) = N
(CONST 1) = #\A
(CONST 2) = #\Z
(CONST 3) = #\a
(CONST 4) = #\z
(CONST 5) = (#\_ #\%)
(CONST 6) = ALPHABET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALPHABET N)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 0)                   ; N
5     (CALLS2 28)                         ; CHARACTERP
7     (JMPIFNOT1 L56)
9     (GETVALUE&PUSH 0)                   ; N
11    (CONST&PUSH 1)                      ; #\A
12    (CALLSR&JMPIFNOT 1 12 L24)          ; CHAR>=
16    (GETVALUE&PUSH 0)                   ; N
18    (CONST&PUSH 2)                      ; #\Z
19    (CALLSR 1 11)                       ; CHAR<=
22    (JMPIF1 L56)
24    L24
24    (GETVALUE&PUSH 0)                   ; N
26    (CONST&PUSH 3)                      ; #\a
27    (CALLSR&JMPIFNOT 1 12 L39)          ; CHAR>=
31    (GETVALUE&PUSH 0)                   ; N
33    (CONST&PUSH 4)                      ; #\z
34    (CALLSR 1 11)                       ; CHAR<=
37    (JMPIF1 L56)
39    L39
39    (GETVALUE&PUSH 0)                   ; N
41    (CONST&PUSH 5)                      ; (#\_ #\%)
42    (PUSH-UNBOUND 3)
44    (CALLS1 180)                        ; MEMBER
46    (JMPIF1 L56)
48    (GETVALUE&PUSH 0)                   ; N
50    (GETVALUE&PUSH 6)                   ; ALPHABET
52    (PUSH-UNBOUND 3)
54    (CALLS1 180)                        ; MEMBER
56    L56
56    (UNBIND1)
57    (SKIP&RET 2)


Disassembly of function #:|(PROGN (DEFMVAR ALPHABET '#) (DEFMFUN ALPHABETP # ...) ...)-7-3|
(CONST 0) = ASCII-NUMBERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASCII-NUMBERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASCII-NUMBERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASCII-NUMBERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASCII-NUMBERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function ASCII-NUMBERP
(CONST 0) = NUM
(CONST 1) = #\9
(CONST 2) = #\0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CALLS2 28)                         ; CHARACTERP
7     (JMPIFNOT1 L23)
9     (GETVALUE&PUSH 0)                   ; NUM
11    (CONST&PUSH 1)                      ; #\9
12    (CALLSR 1 11)                       ; CHAR<=
15    (JMPIFNOT1 L23)
17    (GETVALUE&PUSH 0)                   ; NUM
19    (CONST&PUSH 2)                      ; #\0
20    (CALLSR 1 12)                       ; CHAR>=
23    L23
23    (UNBIND1)
24    (SKIP&RET 2)

WARNING in (PROGN (DEFMVAR ALPHABET '#) (DEFMFUN ALPHABETP # ...) ...)-7-4 in lines 29..54 :
Function GETALIAS
 was already defined in file #P"/cygdrive/e/temp/maxima/src/suprv1.lisp" in line 707

Disassembly of function #:|(PROGN (DEFMVAR ALPHABET '#) (DEFMFUN ALPHABETP # ...) ...)-7-4|
(CONST 0) = GETALIAS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GETALIAS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GETALIAS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GETALIAS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GETALIAS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GETALIAS
8     (SKIP&RET 1)


Disassembly of function GETALIAS
(CONST 0) = X
(CONST 1) = ALIAS
(CONST 2) = $FALSE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; ALIAS
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L19)
12    (GETVALUE&PUSH 0)                   ; X
14    (JMPIFEQTO 2 L22)                   ; $FALSE
17    (GETVALUE 0)                        ; X
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (NIL)
23    (JMP L19)


Disassembly of function #:|(DEFVAR *PARSE-WINDOW* NIL)-8|
(CONST 0) = (SPECIAL *PARSE-WINDOW*)
(CONST 1) = *PARSE-WINDOW*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *PARSE-WINDOW*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *PARSE-WINDOW*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *PARSE-WINDOW*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *PARSE-WINDOW*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN MREAD-SYNERR (SSTRING &REST L) ...)-9|
(CONST 0) = MREAD-SYNERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MREAD-SYNERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MREAD-SYNERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MREAD-SYNERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MREAD-SYNERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MREAD-SYNERR
8     (SKIP&RET 1)


Disassembly of function MREAD-SYNERR
(CONST 0) = L
(CONST 1) = ERRSET
(CONST 2) = #(NIL)
(CONST 3) = (#(ERROR 72) 1 . 1)
(CONST 4) = *PARSE-STREAM*
(CONST 5) = #<COMPILED-CLOSURE MREAD-SYNERR-1>
(CONST 6) = *STANDARD-OUTPUT*
(CONST 7) = "stdin"
(CONST 8) = #<COMPILED-CLOSURE MREAD-SYNERR-2>
(CONST 9) = FORMAT
(CONST 10) = *STANDARD-INPUT*
(CONST 11) = *PARSE-WINDOW*
(CONST 12) = LENGTH
(CONST 13) = N
(CONST 14) = K
(CONST 15) = 0
(CONST 16) = 20
(CONST 17) = 1
(CONST 18) = #\Newline
(CONST 19) = #\n
(CONST 20) = #\\
(CONST 21) = #\Tab
(CONST 22) = #\t
(CONST 23) = V
(CONST 24) = 2
(CONST 25) = SLOOP::SLOOP-TYPE-ERROR
(CONST 26) = #\Space
(CONST 27) = "^"
(CONST 28) = THROW-MACSYMA-TOP
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (K *PARSE-WINDOW* N ERRSET *STANDARD-INPUT* L *STANDARD-OUTPUT* *PARSE-STREAM*)
writes special variables : (V K)
154 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; ERRSET
7     (NIL&PUSH)
8     (TAGBODY-OPEN 2 L83)                ; #(NIL)
12    (HANDLER-OPEN 3 L72)                ; (#(ERROR 72) 1 . 1)
14    (GETVALUE&PUSH 4)                   ; *PARSE-STREAM*
16    (PUSH-UNBOUND 1)
18    (CALLS2&STORE 128 12)               ; FILE-POSITION
21    (SKIP 4)
23    L23
23    (TAGBODY-CLOSE)
24    (SKIP 1)
26    (LOAD&JMPIFNOT 3 L37)
29    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE MREAD-SYNERR-1>
30    (GETVALUE&PUSH 6)                   ; *STANDARD-OUTPUT*
32    (CONST&PUSH 7)                      ; "stdin"
33    (LOAD&PUSH 6)
34    (CALLSR 3 21)                       ; FUNCALL
37    L37
37    (CONST&PUSH 8)                      ; #<COMPILED-CLOSURE MREAD-SYNERR-2>
38    (GETVALUE&PUSH 6)                   ; *STANDARD-OUTPUT*
40    (CALLSR 1 21)                       ; FUNCALL
43    (CONST&PUSH 9)                      ; FORMAT
44    (T&PUSH)
45    (LOAD&PUSH 11)
46    (GETVALUE 0)                        ; L
48    (APPLY 2)
50    (GETVALUE&PUSH 10)                  ; *STANDARD-INPUT*
52    (CALLS2&JMPIFNOT 122 L236)          ; OUTPUT-STREAM-P
56    (CONST&PUSH 11)                     ; *PARSE-WINDOW*
57    (CONST&PUSH 12)                     ; LENGTH
58    (PUSH-UNBOUND 1)
60    (CALLS2 132)                        ; GET
62    (BIND 13)                           ; N
64    (PUSH-NIL 2)
66    (NIL)
67    (BIND 14)                           ; K
69    (CONST&PUSH 15)                     ; 0
70    (JMP L122)
72    L72
72    (HANDLER-BEGIN&PUSH)
73    (LOAD 0)
74    (STOREI 0 0 4)
78    (GO-I 0 0 2 0)
83    L83
83    (GETVALUE 1)                        ; ERRSET
85    (JMPIFNOT L23)
87    (LOAD&PUSH 4)
88    (CALLSR 0 29)                       ; ERROR
91    L91
91    (CONST&PUSH 19)                     ; #\n
92    (LOAD&CONS&STORE 5)
94    (CONST 20)                          ; #\\
95    (JMP L117)
97    L97
97    (CONST&PUSH 22)                     ; #\t
98    (LOAD&CONS&STORE 5)
100   (CONST 20)                          ; #\\
101   (JMP L117)
103   L103
103   (NIL&STORE 2)
105   (LOAD 1)
106   (JMP L160)
108   L108
108   (LOAD&PUSH 4)
109   (JMPIFEQTO 18 L91)                  ; #\Newline
112   (LOAD&PUSH 4)
113   (JMPIFEQTO 21 L97)                  ; #\Tab
116   (LOAD 4)
117   L117
117   (PUSH)
118   (LOAD&CONS&STORE 5)
120   (LOAD&INC&STORE 0)
122   L122
122   (LOAD&PUSH 0)
123   (CONST&PUSH 16)                     ; 20
124   (CALLSR&JMPIF 1 50 L142)            ; >=
128   (GETVALUE&PUSH 13)                  ; N
130   (CONST&PUSH 17)                     ; 1
131   (LOAD&PUSH 2)
132   (CALLSR&PUSH 2 54)                  ; -
135   (GETVALUE&PUSH 11)                  ; *PARSE-WINDOW*
137   (CALLS1&STORE 148 4)                ; NTH
140   (JMPIF L108)
142   L142
142   (SKIP 1)
144   (LOAD&PUSH 4)
145   (CALLS2 71)                         ; LENGTH
147   (SETVALUE 14)                       ; K
149   (LOAD&PUSH 4)
150   (CONST&PUSH 15)                     ; 0
151   (PUSH-NIL 3)
153   (LOAD&PUSH 3)
154   (CONST&PUSH 16)                     ; 20
155   (CALLSR&JMPIFNOT 1 50 L103)         ; >=
159   (LOAD 1)
160   L160
160   (SKIP 3)
162   (STORE 0)
163   (CALLSR&STORE 2 34 4)               ; APPEND
167   (PUSH-UNBOUND 1)
169   (CALLS1 139)                        ; TERPRI
171   (NIL)
172   (BIND 23)                           ; V
174   (LOAD&PUSH 7)
175   (LOAD&JMPIFNOT 0 L193)
178   L178
178   (LOAD&CAR&PUSH 0)
180   (LOAD 0)
181   (SETVALUE 23)                       ; V
183   (STORE 0)
184   (PUSH-UNBOUND 1)
186   (CALLS1 132)                        ; PRINC
188   (LOAD&CDR&STORE 0)
190   (LOAD&JMPIF 0 L178)
193   L193
193   (SKIP 1)
195   (UNBIND1)
196   (PUSH-UNBOUND 1)
198   (CALLS1 139)                        ; TERPRI
200   (CONST&PUSH 24)                     ; 2
201   (GETVALUE&PUSH 14)                  ; K
203   (CALLS2&JMPIF 13 L208)              ; SYSTEM::FIXNUMP
206   (CALL0 25)                          ; SLOOP::SLOOP-TYPE-ERROR
208   L208
208   (GETVALUE&PUSH 14)                  ; K
210   (JMP L219)
212   L212
212   (CONST&PUSH 26)                     ; #\Space
213   (PUSH-UNBOUND 1)
215   (CALLS1 132)                        ; PRINC
217   (LOAD&INC&STORE 1)
219   L219
219   (LOAD&PUSH 1)
220   (LOAD&PUSH 1)
221   (CALLSR&JMPIFNOT 1 50 L212)         ; >=
225   (SKIP 2)
227   (CONST&PUSH 27)                     ; "^"
228   (PUSH-UNBOUND 1)
230   (CALLS1 132)                        ; PRINC
232   (UNBIND1)
233   (SKIP 2)
235   (UNBIND1)
236   L236
236   (PUSH-UNBOUND 1)
238   (CALLS1 139)                        ; TERPRI
240   (CALL0 28)                          ; THROW-MACSYMA-TOP
242   (UNBIND1)
243   (SKIP 1)
245   (UNBIND1)
246   (SKIP&RET 3)


Disassembly of function MREAD-SYNERR-1
(CONST 0) = #\:
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 4)
1     (CALLS1 139)                        ; TERPRI
3     (LOAD&PUSH 3)
4     (LOAD&PUSH 5)
5     (CALLS1 132)                        ; PRINC
7     (CONST&PUSH 0)                      ; #\:
8     (LOAD&PUSH 5)
9     (CALLS1 136)                        ; WRITE-CHAR
11    (LOAD&PUSH 2)
12    (LOAD&PUSH 5)
13    (CALLS1 132)                        ; PRINC
15    (CONST&PUSH 0)                      ; #\:
16    (LOAD&PUSH 5)
17    (CALLS1 136)                        ; WRITE-CHAR
19    (LOAD 1)
20    (SKIP&RET 5)


Disassembly of function MREAD-SYNERR-2
(CONST 0) = "Incorrect syntax: "
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Incorrect syntax: "
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFUN FIXNUM-CHAR-UPCASE (C) ...)-10|
(CONST 0) = FIXNUM-CHAR-UPCASE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIXNUM-CHAR-UPCASE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIXNUM-CHAR-UPCASE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIXNUM-CHAR-UPCASE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIXNUM-CHAR-UPCASE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIXNUM-CHAR-UPCASE
8     (SKIP&RET 1)


Disassembly of function FIXNUM-CHAR-UPCASE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS1 43)                         ; CHAR-UPCASE
3     (SKIP&RET 2)


Disassembly of function #:|(DEFUN FIRSTCHARN (X) ...)-11|
(CONST 0) = FIRSTCHARN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIRSTCHARN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIRSTCHARN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIRSTCHARN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIRSTCHARN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIRSTCHARN
8     (SKIP&RET 1)


Disassembly of function FIRSTCHARN
(CONST 0) = X
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS1&PUSH 75)                    ; STRING
7     (CONST&PUSH 1)                      ; 0
8     (CALLSR 1 1)                        ; AREF
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFVAR *PARSE-STREAM* NIL ...)-12|
(CONST 0) = (SPECIAL *PARSE-STREAM*)
(CONST 1) = *PARSE-STREAM*
(CONST 2) = VARIABLE
(CONST 3) = "input stream for Macsyma parser"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *PARSE-STREAM*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *PARSE-STREAM*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *PARSE-STREAM*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *PARSE-STREAM*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "input stream for Macsyma parser"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *PARSE-STREAM*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR MACSYMA-OPERATORS NIL ...)-13|
(CONST 0) = (SPECIAL MACSYMA-OPERATORS)
(CONST 1) = MACSYMA-OPERATORS
(CONST 2) = VARIABLE
(CONST 3) = "Macsyma operators structure"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MACSYMA-OPERATORS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MACSYMA-OPERATORS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MACSYMA-OPERATORS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; MACSYMA-OPERATORS
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Macsyma operators structure"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; MACSYMA-OPERATORS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *MREAD-PROMPT* NIL ...)-14|
(CONST 0) = (SPECIAL *MREAD-PROMPT*)
(CONST 1) = *MREAD-PROMPT*
(CONST 2) = VARIABLE
(CONST 3) = "prompt used by MREAD"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *MREAD-PROMPT*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *MREAD-PROMPT*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *MREAD-PROMPT*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *MREAD-PROMPT*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "prompt used by MREAD"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *MREAD-PROMPT*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *MREAD-EOF-OBJ* NIL ...)-15|
(CONST 0) = (SPECIAL *MREAD-EOF-OBJ*)
(CONST 1) = *MREAD-EOF-OBJ*
(CONST 2) = VARIABLE
(CONST 3) = "Bound by MREAD for use by MREAD-RAW"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *MREAD-EOF-OBJ*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *MREAD-EOF-OBJ*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *MREAD-EOF-OBJ*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; *MREAD-EOF-OBJ*
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Bound by MREAD for use by MREAD-RAW"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; *MREAD-EOF-OBJ*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TYI-PARSE-INT (STREAM EOF) ...)-16|
(CONST 0) = TYI-PARSE-INT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TYI-PARSE-INT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TYI-PARSE-INT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TYI-PARSE-INT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TYI-PARSE-INT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TYI-PARSE-INT
8     (SKIP&RET 1)


Disassembly of function TYI-PARSE-INT
(CONST 0) = *PARSE-WINDOW*
(CONST 1) = 25
(CONST 2) = LENGTH
(CONST 3) = TYI
(CONST 4) = #\Newline
(CONST 5) = NEWLINE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*PARSE-WINDOW*)
writes special variable : (*PARSE-WINDOW*)
34 byte-code instructions:
0     (GETVALUE 0)                        ; *PARSE-WINDOW*
2     (JMPIF L28)
4     (CONST&PUSH 1)                      ; 25
5     (PUSH-UNBOUND 1)
7     (CALLS1 157)                        ; MAKE-LIST
9     (SETVALUE 0)                        ; *PARSE-WINDOW*
11    (PUSH)
12    (CALLS2&PUSH 71)                    ; LENGTH
14    (CONST&PUSH 0)                      ; *PARSE-WINDOW*
15    (CONST&PUSH 2)                      ; LENGTH
16    (LOAD&PUSH 2)
17    (CALLS2 136)                        ; SYSTEM::%PUT
19    (SKIP 1)
21    (GETVALUE&PUSH 0)                   ; *PARSE-WINDOW*
23    (GETVALUE&PUSH 0)                   ; *PARSE-WINDOW*
25    (CALLSR 2 35)                       ; NCONC
28    L28
28    (LOAD&PUSH 2)
29    (LOAD&PUSH 2)
30    (CALL2&PUSH 3)                      ; TYI
32    (GETVALUE&PUSH 0)                   ; *PARSE-WINDOW*
34    (LOAD&PUSH 1)
35    (CALLS1 169)                        ; SYSTEM::%RPLACA
37    (GETVALUE 0)                        ; *PARSE-WINDOW*
39    (CDR)
40    (SETVALUE 0)                        ; *PARSE-WINDOW*
42    (LOAD&PUSH 0)
43    (JMPIFNOTEQTO 4 L50)                ; #\Newline
46    (LOAD&PUSH 3)
47    (CONST&PUSH 4)                      ; #\Newline
48    (CALL2 5)                           ; NEWLINE
50    L50
50    (POP)
51    (SKIP&RET 3)


Disassembly of function #:|(DEFUN *MREAD-PROMPT* (OUT-STREAM CHAR) ...)-17|
(CONST 0) = *MREAD-PROMPT*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE *MREAD-PROMPT*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; *MREAD-PROMPT*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; *MREAD-PROMPT*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE *MREAD-PROMPT*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; *MREAD-PROMPT*
8     (SKIP&RET 1)


Disassembly of function *MREAD-PROMPT*
(CONST 0) = #<COMPILED-CLOSURE *MREAD-PROMPT*-1>
(CONST 1) = *MREAD-PROMPT*
(CONST 2) = FORMAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*MREAD-PROMPT*)
5 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE *MREAD-PROMPT*-1>
2     (GETVALUE&PUSH 1)                   ; *MREAD-PROMPT*
4     (CALL 3 2)                          ; FORMAT
7     (SKIP&RET 3)


Disassembly of function *MREAD-PROMPT*-1
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CALLS1 140)                        ; FRESH-LINE
3     (LOAD&PUSH 2)
4     (LOAD&PUSH 4)
5     (CALLS1 132)                        ; PRINC
7     (LOAD 1)
8     (SKIP&RET 4)


Disassembly of function #:|(DEFUN ALIASLOOKUP (OP) ...)-18|
(CONST 0) = ALIASLOOKUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALIASLOOKUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALIASLOOKUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALIASLOOKUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALIASLOOKUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALIASLOOKUP
8     (SKIP&RET 1)


Disassembly of function ALIASLOOKUP
(CONST 0) = ALIAS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 6 L12)             ; SYMBOLP
4     (LOAD&PUSH 1)
5     (CONST&PUSH 0)                      ; ALIAS
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L15)
12    L12
12    (LOAD 1)
13    (SKIP&RET 2)
15    L15
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN GOBBLE-WHITESPACE (&AUX SAW-NEWLINE CH ...) ...)-19|
(CONST 0) = GOBBLE-WHITESPACE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GOBBLE-WHITESPACE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GOBBLE-WHITESPACE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GOBBLE-WHITESPACE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GOBBLE-WHITESPACE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GOBBLE-WHITESPACE
8     (SKIP&RET 1)


Disassembly of function GOBBLE-WHITESPACE
(CONST 0) = PARSE-TYIPEEK
(CONST 1) = #\Newline
(CONST 2) = (#\Tab #\Space #\Newline #\Return #\Page)
(CONST 3) = #\#
(CONST 4) = *PARSE-STREAM*
(CONST 5) = GRAB-LINE-NUMBER
(CONST 6) = PARSE-TYI
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*PARSE-STREAM*)
writes special variable : (PARSE-TYIPEEK)
42 byte-code instructions:
0     (PUSH-NIL 3)
2     (JMP L16)
4     L4
4     (NIL&STORE 0)
6     (T&STORE 2)
8     (CALL0 6)                           ; PARSE-TYI
10    (JMP L16)
12    L12
12    (T&STORE 0)
14    (CALL0 6)                           ; PARSE-TYI
16    L16
16    (CALL0 0)                           ; PARSE-TYIPEEK
18    (STORE 1)
19    (PUSH)
20    (JMPIFEQTO 1 L4)                    ; #\Newline
23    (LOAD&PUSH 1)
24    (CONST&PUSH 2)                      ; (#\Tab #\Space #\Newline ...)
25    (PUSH-UNBOUND 3)
27    (CALLS1&JMPIF 180 L12)              ; MEMBER
30    (LOAD&PUSH 1)
31    (JMPIFNOTEQTO 3 L66)                ; #\#
34    (LOAD&JMPIFNOT 2 L66)
37    (GETVALUE&PUSH 4)                   ; *PARSE-STREAM*
39    (NIL&PUSH)
40    (PUSH-UNBOUND 2)
42    (CALLS1&PUSH 119)                   ; READ-LINE
44    (CONST&PUSH 1)                      ; #\Newline
45    (GETVALUE&PUSH 4)                   ; *PARSE-STREAM*
47    (CALLS1 121)                        ; UNREAD-CHAR
49    (NIL)
50    (SETVALUE 0)                        ; PARSE-TYIPEEK
52    (LOAD&JMPIF 1 L60)
55    (LOAD&PUSH 0)
56    (GETVALUE&PUSH 4)                   ; *PARSE-STREAM*
58    (CALL2 5)                           ; GRAB-LINE-NUMBER
60    L60
60    (SKIP 1)
62    (CALL0 6)                           ; PARSE-TYI
64    (JMP L16)
66    L66
66    (T)
67    (SKIP&RET 4)


Disassembly of function #:|(DEFUN READ-COMMAND-TOKEN (OBJ) ...)-20|
(CONST 0) = READ-COMMAND-TOKEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE READ-COMMAND-TOKEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; READ-COMMAND-TOKEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; READ-COMMAND-TOKEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE READ-COMMAND-TOKEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; READ-COMMAND-TOKEN
8     (SKIP&RET 1)


Disassembly of function READ-COMMAND-TOKEN
(CONST 0) = GOBBLE-WHITESPACE
(CONST 1) = READ-COMMAND-TOKEN-AUX
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CALL0 0)                           ; GOBBLE-WHITESPACE
2     (LOAD&PUSH 1)
3     (CALL1 1)                           ; READ-COMMAND-TOKEN-AUX
5     (SKIP&RET 2)


Disassembly of function #:|(DEFUN CH-MINUSP (Z) ...)-21|
(CONST 0) = CH-MINUSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CH-MINUSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CH-MINUSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CH-MINUSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CH-MINUSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CH-MINUSP
8     (SKIP&RET 1)


Disassembly of function CH-MINUSP
(CONST 0) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 8)                          ; NUMBERP
3     (JMPIFNOT1 L12)
5     (LOAD&PUSH 1)
6     (CONST&PUSH 0)                      ; 0
7     (CALLSR 1 47)                       ; <
10    (SKIP&RET 2)
12    L12
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SAFE-ASSOC (ITEM LIS) ...)-22|
(CONST 0) = SAFE-ASSOC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = FUNCTION
(CONST 3) = "maclisp would not complain about (car 3) it gives nil"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
(CONST 5) = #<COMPILED-CLOSURE SAFE-ASSOC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; SAFE-ASSOC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SAFE-ASSOC
4     (CONST&PUSH 2)                      ; FUNCTION
5     (CONST&PUSH 3)                      ; "maclisp would not complain about (car 3) it gives nil"
6     (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
9     (CONST&PUSH 0)                      ; SAFE-ASSOC
10    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE SAFE-ASSOC>
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (CONST 0)                           ; SAFE-ASSOC
14    (SKIP&RET 1)


Disassembly of function SAFE-ASSOC
(CONST 0) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
writes special variable : (V)
26 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; V
3     (LOAD&PUSH 4)
4     (LOAD&JMPIFNOT 0 L28)
7     L7
7     (LOAD&CAR&PUSH 0)
9     (LOAD 0)
10    (SETVALUE 0)                        ; V
12    (SKIP 1)
14    (JMPIFATOM L23)
16    (GETVALUE 0)                        ; V
18    (CAR&PUSH)
19    (LOAD&PUSH 7)
20    (CALLS2&JMPIF 2 L34)                ; EQUAL
23    L23
23    (LOAD&CDR&STORE 0)
25    (LOAD&JMPIF 0 L7)
28    L28
28    (NIL)
29    L29
29    (SKIP 1)
31    (UNBIND1)
32    (SKIP&RET 3)
34    L34
34    (GETVALUE 0)                        ; V
36    (JMP L29)


Disassembly of function #:|(DEFUN PARSER-ASSOC (C LIS) ...)-23|
(CONST 0) = PARSER-ASSOC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSER-ASSOC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSER-ASSOC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSER-ASSOC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSER-ASSOC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSER-ASSOC
8     (SKIP&RET 1)


Disassembly of function PARSER-ASSOC
(CONST 0) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
writes special variable : (V)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; V
3     (GETVALUE 0)                        ; V
5     (JMPIFNOT L28)
7     L7
7     (GETVALUE 0)                        ; V
9     (CAR)
10    (JMPIFCONSP L32)
12    (GETVALUE 0)                        ; V
14    (CAR&PUSH)
15    (LOAD&PUSH 6)
16    (CALLS2&JMPIF 1 L44)                ; EQL
19    L19
19    (GETVALUE 0)                        ; V
21    (CDR)
22    (SETVALUE 0)                        ; V
24    (GETVALUE 0)                        ; V
26    (JMPIF L7)
28    L28
28    (NIL)
29    L29
29    (UNBIND1)
30    (SKIP&RET 3)
32    L32
32    (GETVALUE 0)                        ; V
34    (CAR)
35    (CAR&PUSH)
36    (LOAD 6)
37    (JMPIFNOTEQ L19)
39    (GETVALUE 0)                        ; V
41    (CAR)
42    (JMP L29)
44    L44
44    (GETVALUE 0)                        ; V
46    (JMP L29)


Disassembly of function #:|(DEFVAR *PARSE-TYI* NIL)-24|
(CONST 0) = (SPECIAL *PARSE-TYI*)
(CONST 1) = *PARSE-TYI*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *PARSE-TYI*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *PARSE-TYI*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *PARSE-TYI*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *PARSE-TYI*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN PARSE-TYI NIL ...)-25|
(CONST 0) = PARSE-TYI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-TYI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-TYI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-TYI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-TYI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-TYI
8     (SKIP&RET 1)


Disassembly of function PARSE-TYI
(CONST 0) = *PARSE-TYI*
(CONST 1) = *PARSE-STREAM*
(CONST 2) = -1
(CONST 3) = TYI-PARSE-INT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*PARSE-STREAM* *PARSE-TYI*)
writes special variable : (*PARSE-TYI*)
20 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *PARSE-TYI*
2     (LOAD&JMPIFNOT 0 L16)
5     (LOAD 0)
6     (JMPIFATOM L23)
8     (LOAD 0)
9     (CDR)
10    (SETVALUE 0)                        ; *PARSE-TYI*
12    (LOAD 0)
13    (CAR)
14    (SKIP&RET 2)
16    L16
16    (GETVALUE&PUSH 1)                   ; *PARSE-STREAM*
18    (CONST&PUSH 2)                      ; -1
19    (CALL2 3)                           ; TYI-PARSE-INT
21    (SKIP&RET 2)
23    L23
23    (NIL)
24    (SETVALUE 0)                        ; *PARSE-TYI*
26    (POP)
27    (SKIP&RET 1)


Disassembly of function #:|(DEFUN PARSE-TYIPEEK NIL ...)-26|
(CONST 0) = PARSE-TYIPEEK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-TYIPEEK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-TYIPEEK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-TYIPEEK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-TYIPEEK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-TYIPEEK
8     (SKIP&RET 1)


Disassembly of function PARSE-TYIPEEK
(CONST 0) = *PARSE-TYI*
(CONST 1) = *PARSE-STREAM*
(CONST 2) = -1
(CONST 3) = TYI-PARSE-INT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*PARSE-STREAM* *PARSE-TYI*)
writes special variable : (*PARSE-TYI*)
16 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *PARSE-TYI*
2     (LOAD&JMPIFNOT 0 L12)
5     (LOAD 0)
6     (JMPIFATOM L21)
8     (LOAD 0)
9     (CAR)
10    (SKIP&RET 2)
12    L12
12    (GETVALUE&PUSH 1)                   ; *PARSE-STREAM*
14    (CONST&PUSH 2)                      ; -1
15    (CALL2 3)                           ; TYI-PARSE-INT
17    (SETVALUE 0)                        ; *PARSE-TYI*
19    (SKIP&RET 2)
21    L21
21    (POP)
22    (SKIP&RET 1)


Disassembly of function #:|(DEFUN UNPARSE-TYI (C) ...)-27|
(CONST 0) = UNPARSE-TYI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UNPARSE-TYI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UNPARSE-TYI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UNPARSE-TYI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UNPARSE-TYI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UNPARSE-TYI
8     (SKIP&RET 1)


Disassembly of function UNPARSE-TYI
(CONST 0) = *PARSE-TYI*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*PARSE-TYI*)
writes special variable : (*PARSE-TYI*)
11 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *PARSE-TYI*
2     (LOAD&JMPIFNOT 0 L12)
5     (LOAD&PUSH 2)
6     (LOAD 1)
7     (CONS)
8     L8
8     (SETVALUE 0)                        ; *PARSE-TYI*
10    (SKIP&RET 3)
12    L12
12    (LOAD 2)
13    (JMP L8)


Disassembly of function #:|(DEFUN READ-COMMAND-TOKEN-AUX (OBJ) ...)-28|
(CONST 0) = READ-COMMAND-TOKEN-AUX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE READ-COMMAND-TOKEN-AUX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; READ-COMMAND-TOKEN-AUX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; READ-COMMAND-TOKEN-AUX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE READ-COMMAND-TOKEN-AUX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; READ-COMMAND-TOKEN-AUX
8     (SKIP&RET 1)


Disassembly of function READ-COMMAND-TOKEN-AUX
(CONST 0) = PARSE-TYIPEEK
(CONST 1) = -1
(CONST 2) = PARSER-ASSOC
(CONST 3) = PARSE-TYI
(CONST 4) = ANS
(CONST 5) = RES
(CONST 6) = UNPARSE-TYI
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RES)
89 byte-code instructions:
0     L0
0     (NIL&PUSH)
1     (CALL0 0)                           ; PARSE-TYIPEEK
3     (PUSH)
4     (LOAD&PUSH 0)
5     (JMPIFEQTO 1 L49)                   ; -1
8     (LOAD&PUSH 0)
9     (CALLS1&PUSH 43)                    ; CHAR-UPCASE
11    (LOAD&PUSH 4)
12    (CALL2 2)                           ; PARSER-ASSOC
14    L14
14    (PUSH)
15    (LOAD&JMPIFNOT 0 L52)
18    (CALL0 3)                           ; PARSE-TYI
20    (LOAD 0)
21    (CDR)
22    (CAR)
23    (JMPIFATOM L55)
25    (LOAD 0)
26    (CDR)
27    (CDR)
28    (JMPIF L63)
30    (LOAD 0)
31    (CDR)
32    (CAR)
33    (CAR&PUSH)
34    (CONST 4)                           ; ANS
35    (EQ)
36    (JMPIFNOT L43)
38    (LOAD 0)
39    (CDR)
40    (CAR)
41    (CDR)
42    (CAR)
43    L43
43    (STORE 2)
44    (LOAD&JMPIFNOT 2 L108)
47    (JMP L111)
49    L49
49    (NIL)
50    (JMP L14)
52    L52
52    (NIL)
53    (SKIP&RET 5)
55    L55
55    (LOAD&CDR&PUSH 0)
57    (LIST&PUSH 1)
59    (JSR L0)
61    (JMP L43)
63    L63
63    (LOAD 0)
64    (CDR)
65    (CAR)
66    (CAR&PUSH)
67    (CONST 4)                           ; ANS
68    (EQ)
69    (JMPIFNOT L76)
71    (LOAD 0)
72    (CDR)
73    (CAR)
74    (CDR)
75    (CAR)
76    L76
76    (PUSH)
77    (LOAD 1)
78    (CDR)
79    (CDR&PUSH)
80    (JSR&PUSH L0)
83    (LOAD 1)
84    (BIND 5)                            ; RES
86    (LOAD&JMPIF 3 L101)
89    (GETVALUE 5)                        ; RES
91    (JMPIF L101)
93    (LOAD 5)
94    (CDR)
95    (CAR&PUSH)
96    (LIST&PUSH 1)
98    (JSR L0)
101   L101
101   (STORE 7)
102   (UNBIND1)
103   (SKIP 2)
105   (LOAD&JMPIF 2 L111)
108   L108
108   (LOAD&PUSH 1)
109   (CALL1 6)                           ; UNPARSE-TYI
111   L111
111   (LOAD 2)
112   (SKIP&RET 5)


Disassembly of function #:|(DEFUN SCAN-MACSYMA-TOKEN NIL ...)-29|
(CONST 0) = SCAN-MACSYMA-TOKEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-MACSYMA-TOKEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-MACSYMA-TOKEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-MACSYMA-TOKEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-MACSYMA-TOKEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-MACSYMA-TOKEN
8     (SKIP&RET 1)


Disassembly of function SCAN-MACSYMA-TOKEN
(CONST 0) = #\$
(CONST 1) = SCAN-TOKEN
(CONST 2) = $BOTHCASES
(CONST 3) = BOTHCASE-IMPLODE
(CONST 4) = IMPLODE1
(CONST 5) = GETALIAS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($BOTHCASES)
18 byte-code instructions:
0     (CONST&PUSH 0)                      ; #\$
1     (T&PUSH)
2     (CALL1 1)                           ; SCAN-TOKEN
4     (CONS&PUSH)
5     (GETVALUE 2)                        ; $BOTHCASES
7     (JMPIF L19)
9     (LOAD&PUSH 0)
10    (NIL&PUSH)
11    (CALL2 4)                           ; IMPLODE1
13    L13
13    (STORE 0)
14    (PUSH)
15    (CALL1 5)                           ; GETALIAS
17    (SKIP&RET 2)
19    L19
19    (LOAD&PUSH 0)
20    (CALL1 3)                           ; BOTHCASE-IMPLODE
22    (JMP L13)


Disassembly of function #:|(DEFUN SCAN-LISP-TOKEN NIL ...)-30|
(CONST 0) = SCAN-LISP-TOKEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-LISP-TOKEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-LISP-TOKEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-LISP-TOKEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-LISP-TOKEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-LISP-TOKEN
8     (SKIP&RET 1)


Disassembly of function SCAN-LISP-TOKEN
(CONST 0) = SCAN-TOKEN
(CONST 1) = #\|
(CONST 2) = IMPLODE1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (NIL&PUSH)
1     (CALL1&PUSH 0)                      ; SCAN-TOKEN
3     (LOAD&PUSH 0)
4     (CONST&PUSH 1)                      ; #\|
5     (LOAD&PUSH 2)
6     (PUSH-UNBOUND 3)
8     (CALLS1 180)                        ; MEMBER
10    (NOT)
11    (PUSH)
12    (CALL2 2)                           ; IMPLODE1
14    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SCAN-KEYWORD-TOKEN NIL ...)-31|
(CONST 0) = SCAN-KEYWORD-TOKEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-KEYWORD-TOKEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-KEYWORD-TOKEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-KEYWORD-TOKEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-KEYWORD-TOKEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-KEYWORD-TOKEN
8     (SKIP&RET 1)


Disassembly of function SCAN-KEYWORD-TOKEN
(CONST 0) = KEYWORD
(CONST 1) = *PACKAGE*
(CONST 2) = SCAN-TOKEN
(CONST 3) = IMPLODE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST 0)                           ; KEYWORD
1     (BIND 1)                            ; *PACKAGE*
3     (NIL&PUSH)
4     (CALL1&PUSH 2)                      ; SCAN-TOKEN
6     (CALL1 3)                           ; IMPLODE
8     (UNBIND1)
9     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $BOTHCASES T)-32|
(CONST 0) = (SPECIAL $BOTHCASES)
(CONST 1) = $BOTHCASES
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $BOTHCASES)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $BOTHCASES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $BOTHCASES
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $BOTHCASES
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SCAN-TOKEN (FLAG) ...)-33|
(CONST 0) = SCAN-TOKEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-TOKEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-TOKEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-TOKEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-TOKEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-TOKEN
8     (SKIP&RET 1)


Disassembly of function SCAN-TOKEN
(CONST 0) = FLAG
(CONST 1) = PARSE-TYIPEEK
(CONST 2) = L
(CONST 3) = ASCII-NUMBERP
(CONST 4) = ALPHABETP
(CONST 5) = #\\
(CONST 6) = PARSE-TYI
(CONST 7) = $BOTHCASES
(CONST 8) = FIXNUM-CHAR-UPCASE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L $BOTHCASES FLAG)
writes special variables : (L FLAG)
55 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FLAG
3     (CALL0 1)                           ; PARSE-TYIPEEK
5     (PUSH)
6     (NIL)
7     (BIND 2)                            ; L
9     (GETVALUE 0)                        ; FLAG
11    (JMPIF L47)
13    L13
13    (CALL0 6)                           ; PARSE-TYI
15    (PUSH)
16    (CONST&PUSH 5)                      ; #\\
17    (CALLSR&JMPIF 1 7 L79)              ; CHAR=
21    (GETVALUE 7)                        ; $BOTHCASES
23    (JMPIF L29)
25    (LOAD&PUSH 3)
26    (CALL1 8)                           ; FIXNUM-CHAR-UPCASE
28    (STORE 3)
29    L29
29    (T)
30    (SETVALUE 0)                        ; FLAG
32    (CALL0 1)                           ; PARSE-TYIPEEK
34    (PUSH)
35    (LOAD&PUSH 4)
36    (GETVALUE 2)                        ; L
38    (CONS)
39    (SETVALUE 2)                        ; L
41    (POP&STORE 3)
43    (GETVALUE 0)                        ; FLAG
45    (JMPIFNOT L13)
47    L47
47    (LOAD&PUSH 3)
48    (CALL1&JMPIF 3 L13)                 ; ASCII-NUMBERP
51    (LOAD&PUSH 3)
52    (CALL1&JMPIF 4 L13)                 ; ALPHABETP
55    (LOAD&PUSH 3)
56    (CONST&PUSH 5)                      ; #\\
57    (CALLSR&JMPIF 1 7 L13)              ; CHAR=
61    (GETVALUE 2)                        ; L
63    (JMPIF L70)
65    (CALL0 6)                           ; PARSE-TYI
67    (PUSH)
68    (NIL)
69    (CONS)
70    L70
70    (PUSH)
71    (CALLS2 73)                         ; NREVERSE
73    (UNBIND1)
74    (SKIP 1)
76    (UNBIND1)
77    (SKIP&RET 2)
79    L79
79    (CALL0 6)                           ; PARSE-TYI
81    (STORE 3)
82    (JMP L29)


Disassembly of function #:|(DEFUN SCAN-LISP-STRING NIL ...)-34|
(CONST 0) = SCAN-LISP-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-LISP-STRING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-LISP-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-LISP-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-LISP-STRING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-LISP-STRING
8     (SKIP&RET 1)


Disassembly of function SCAN-LISP-STRING
(CONST 0) = SCAN-STRING
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CALL0 0)                           ; SCAN-STRING
2     (PUSH)
3     (PUSH-UNBOUND 1)
5     (CALLS1 212)                        ; INTERN
7     (SKIP&RET 1)


Disassembly of function #:|(DEFUN SCAN-MACSYMA-STRING NIL ...)-35|
(CONST 0) = SCAN-MACSYMA-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-MACSYMA-STRING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-MACSYMA-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-MACSYMA-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-MACSYMA-STRING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-MACSYMA-STRING
8     (SKIP&RET 1)


Disassembly of function SCAN-MACSYMA-STRING
(CONST 0) = #\&
(CONST 1) = SCAN-STRING
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; #\&
1     (CALL1&PUSH 1)                      ; SCAN-STRING
3     (PUSH-UNBOUND 1)
5     (CALLS1 212)                        ; INTERN
7     (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *SCAN-STRING-BUFFER* NIL)-36|
(CONST 0) = (SPECIAL *SCAN-STRING-BUFFER*)
(CONST 1) = *SCAN-STRING-BUFFER*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *SCAN-STRING-BUFFER*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *SCAN-STRING-BUFFER*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *SCAN-STRING-BUFFER*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *SCAN-STRING-BUFFER*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SCAN-STRING (&OPTIONAL INIT) ...)-37|
(CONST 0) = SCAN-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-STRING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-STRING>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-STRING
8     (SKIP&RET 1)


Disassembly of function SCAN-STRING
(CONST 0) = *SCAN-STRING-BUFFER*
(CONST 1) = 50
(CONST 2) = CHARACTER
(CONST 3) = 0
(CONST 4) = PARSE-TYIPEEK
(CONST 5) = -1
(CONST 6) = #\"
(CONST 7) = PARSE-TYI
(CONST 8) = #\\
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (*SCAN-STRING-BUFFER*)
writes special variable : (*SCAN-STRING-BUFFER*)
63 byte-code instructions:
0     (JMPIFBOUNDP 1 L11)
3     (NIL&STORE 1)
5     (GETVALUE 0)                        ; *SCAN-STRING-BUFFER*
7     (JMPIFNOT L15)
9     (JMP L27)
11    L11
11    (GETVALUE 0)                        ; *SCAN-STRING-BUFFER*
13    (JMPIF L27)
15    L15
15    (CONST&PUSH 1)                      ; 50
16    (T&PUSH)
17    (PUSH-UNBOUND 6)
19    (CONST 2)                           ; CHARACTER
20    (STORE 5)
21    (CONST 3)                           ; 0
22    (STORE 2)
23    (CALLS1 29)                         ; MAKE-ARRAY
25    (SETVALUE 0)                        ; *SCAN-STRING-BUFFER*
27    L27
27    (PUSH)
28    (NIL)
29    (BIND 0)                            ; *SCAN-STRING-BUFFER*
31    (LOAD&PUSH 3)
32    (CONST&PUSH 3)                      ; 0
33    (CALLS1 25)                         ; SYSTEM::SET-FILL-POINTER
35    (LOAD&JMPIFNOT 5 L47)
38    (PUSH)
39    (CONST&PUSH 2)                      ; CHARACTER
40    (CALLS2&PUSH 42)                    ; COERCE
42    (LOAD&PUSH 4)
43    (PUSH-UNBOUND 1)
45    (CALLS1 28)                         ; VECTOR-PUSH-EXTEND
47    L47
47    (CALL0 4)                           ; PARSE-TYIPEEK
49    (PUSH)
50    (JMP L72)
52    L52
52    (CALL0 7)                           ; PARSE-TYI
54    (PUSH)
55    (CONST&PUSH 8)                      ; #\\
56    (CALLSR&JMPIFNOT 1 7 L63)           ; CHAR=
60    (CALL0 7)                           ; PARSE-TYI
62    (STORE 0)
63    L63
63    (LOAD&PUSH 0)
64    (LOAD&PUSH 5)
65    (PUSH-UNBOUND 1)
67    (CALLS1 28)                         ; VECTOR-PUSH-EXTEND
69    (CALL0 4)                           ; PARSE-TYIPEEK
71    (STORE 0)
72    L72
72    (LOAD&PUSH 0)
73    (JMPIFEQTO 5 L84)                   ; -1
76    (LOAD&PUSH 0)
77    (CONST&PUSH 6)                      ; #\"
78    (CALLSR&JMPIFNOT 1 7 L52)           ; CHAR=
82    (CALL0 7)                           ; PARSE-TYI
84    L84
84    (LOAD&PUSH 4)
85    (CALLS2 70)                         ; COPY-SEQ
87    (SKIP 1)
89    (UNBIND1)
90    (SKIP&RET 3)


Disassembly of function #:|(DEFVAR *STRING-REGISTER* (MAKE-ARRAY 100 :FILL-POINTER ...))-38|
(CONST 0) = (SPECIAL *STRING-REGISTER*)
(CONST 1) = *STRING-REGISTER*
(CONST 2) = 100
(CONST 3) = CHARACTER
(CONST 4) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *STRING-REGISTER*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *STRING-REGISTER*
4     (CALLS1&JMPIF 79 L19)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *STRING-REGISTER*
8     (CONST&PUSH 2)                      ; 100
9     (T&PUSH)
10    (CONST&PUSH 3)                      ; CHARACTER
11    (PUSH-UNBOUND 5)
13    (CONST 4)                           ; 0
14    (STORE 2)
15    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
17    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
19    L19
19    (CONST 1)                           ; *STRING-REGISTER*
20    (SKIP&RET 1)


Disassembly of function #:|(DEFUN READLIST (LIS) ...)-39|
(CONST 0) = READLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE READLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; READLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; READLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE READLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; READLIST
8     (SKIP&RET 1)


Disassembly of function READLIST
(CONST 0) = *STRING-REGISTER*
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*STRING-REGISTER*)
22 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *STRING-REGISTER*
2     (CONST&PUSH 1)                      ; 0
3     (CALLS1 25)                         ; SYSTEM::SET-FILL-POINTER
5     (NIL&PUSH)
6     (LOAD&PUSH 2)
7     (LOAD&JMPIFNOT 0 L26)
10    L10
10    (LOAD&CAR&PUSH 0)
12    (LOAD 0)
13    (STORE 2)
14    (STORE 0)
15    (GETVALUE&PUSH 0)                   ; *STRING-REGISTER*
17    (PUSH-UNBOUND 1)
19    (CALLS1 28)                         ; VECTOR-PUSH-EXTEND
21    (LOAD&CDR&STORE 0)
23    (LOAD&JMPIF 0 L10)
26    L26
26    (SKIP 2)
28    (GETVALUE&PUSH 0)                   ; *STRING-REGISTER*
30    (PUSH-UNBOUND 5)
32    (CALLS1 126)                        ; READ-FROM-STRING
34    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MAKE-NUMBER (DATA) ...)-40|
(CONST 0) = MAKE-NUMBER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-NUMBER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-NUMBER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-NUMBER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-NUMBER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-NUMBER
8     (SKIP&RET 1)


Disassembly of function MAKE-NUMBER
(CONST 0) = 3
(CONST 1) = (#\B)
(CONST 2) = #.#'APPEND
(CONST 3) = READLIST
(CONST 4) = (MTIMES)
(CONST 5) = (MPLUS)
(CONST 6) = (#\0)
(CONST 7) = (MTIMES)
(CONST 8) = (#\0)
(CONST 9) = (MEXPT)
(CONST 10) = 10
(CONST 11) = (MEXPT)
(CONST 12) = #\-
(CONST 13) = #.#'-
(CONST 14) = #.#'+
(CONST 15) = $BFLOAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
64 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&STORE 73 1)                 ; NREVERSE
4     (CONST&PUSH 0)                      ; 3
5     (LOAD&PUSH 2)
6     (CALLS1&PUSH 148)                   ; NTH
8     (CONST&PUSH 1)                      ; (#\B)
9     (CALLS2&JMPIFNOT 2 L79)             ; EQUAL
13    (CONST&PUSH 4)                      ; (MTIMES)
14    (CONST&PUSH 5)                      ; (MPLUS)
15    (LOAD 3)
16    (CAR)
17    (JMPIF L20)
19    (CONST 6)                           ; (#\0)
20    L20
20    (PUSH)
21    (CALL1&PUSH 3)                      ; READLIST
23    (CONST&PUSH 7)                      ; (MTIMES)
24    (LOAD 5)
25    (CDR)
26    (CDR)
27    (CAR)
28    (JMPIF L31)
30    (CONST 8)                           ; (#\0)
31    L31
31    (PUSH)
32    (CALL1&PUSH 3)                      ; READLIST
34    (CONST&PUSH 9)                      ; (MEXPT)
35    (CONST&PUSH 10)                     ; 10
36    (LOAD 8)
37    (CDR)
38    (CDR)
39    (CAR&PUSH)
40    (CALLS2&PUSH 71)                    ; LENGTH
42    (CALLSR&PUSH 0 54)                  ; -
45    (LIST&PUSH 3)
47    (LIST&PUSH 3)
49    (LIST&PUSH 3)
51    (CONST&PUSH 11)                     ; (MEXPT)
52    (CONST&PUSH 10)                     ; 10
53    (LOAD&PUSH 5)
54    (CALLS1 149)                        ; FIFTH
56    (CAR&PUSH)
57    (CONST&PUSH 12)                     ; #\-
58    (CALLSR&JMPIF 1 7 L87)              ; CHAR=
62    (CONST 14)                          ; #.#'+
63    L63
63    (PUSH)
64    (LOAD&PUSH 6)
65    (CALLS1&PUSH 150)                   ; SIXTH
67    (CALL1&PUSH 3)                      ; READLIST
69    (FUNCALL&PUSH 1)
71    (LIST&PUSH 3)
73    (LIST&PUSH 3)
75    (CALL1 15)                          ; $BFLOAT
77    (SKIP&RET 2)
79    L79
79    (CONST&PUSH 2)                      ; #.#'APPEND
80    (LOAD 2)
81    (APPLY&PUSH 0)
83    (CALL1 3)                           ; READLIST
85    (SKIP&RET 2)
87    L87
87    (CONST 13)                          ; #.#'-
88    (JMP L63)


Disassembly of function #:|(DEFUN SCAN-DIGITS (DATA CONTINUATION? CONTINUATION) ...)-41|
(CONST 0) = SCAN-DIGITS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-DIGITS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-DIGITS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-DIGITS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-DIGITS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-DIGITS
8     (SKIP&RET 1)


Disassembly of function SCAN-DIGITS
(CONST 0) = PARSE-TYIPEEK
(CONST 1) = L
(CONST 2) = ASCII-NUMBERP
(CONST 3) = PARSE-TYI
(CONST 4) = FIXNUM-CHAR-UPCASE
(CONST 5) = MAKE-NUMBER
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
42 byte-code instructions:
0     (CALL0 0)                           ; PARSE-TYIPEEK
2     (PUSH)
3     (NIL)
4     (BIND 1)                            ; L
6     (JMP L40)
8     L8
8     (LOAD&PUSH 5)
9     (CALL0 3)                           ; PARSE-TYI
11    (PUSH)
12    (CALL1&PUSH 4)                      ; FIXNUM-CHAR-UPCASE
14    (NIL)
15    (CONS&PUSH)
16    (GETVALUE&PUSH 1)                   ; L
18    (CALLS2&PUSH 73)                    ; NREVERSE
20    (LOAD 10)
21    (LIST*&PUSH 2)
23    (FUNCALL 1)
25    (JMP L59)
27    L27
27    (CALL0 3)                           ; PARSE-TYI
29    (CALL0 0)                           ; PARSE-TYIPEEK
31    (PUSH)
32    (LOAD&PUSH 4)
33    (GETVALUE 1)                        ; L
35    (CONS)
36    (SETVALUE 1)                        ; L
38    (POP&STORE 3)
40    L40
40    (LOAD&PUSH 3)
41    (CALL1&JMPIF 2 L27)                 ; ASCII-NUMBERP
44    (LOAD&PUSH 3)
45    (LOAD&PUSH 7)
46    (PUSH-UNBOUND 3)
48    (CALLS1&JMPIF 180 L8)               ; MEMBER
51    (GETVALUE&PUSH 1)                   ; L
53    (CALLS2&PUSH 73)                    ; NREVERSE
55    (LOAD 8)
56    (CONS&PUSH)
57    (CALL1 5)                           ; MAKE-NUMBER
59    L59
59    (UNBIND1)
60    (SKIP&RET 5)


Disassembly of function #:|(DEFUN SCAN-NUMBER-AFTER-DOT (DATA) ...)-42|
(CONST 0) = SCAN-NUMBER-AFTER-DOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-NUMBER-AFTER-DOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-NUMBER-AFTER-DOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-NUMBER-AFTER-DOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-NUMBER-AFTER-DOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-NUMBER-AFTER-DOT
8     (SKIP&RET 1)


Disassembly of function SCAN-NUMBER-AFTER-DOT
(CONST 0) = (#\E #\e #\B #\b #\D #\d #\S #\s)
(CONST 1) = SCAN-NUMBER-EXPONENT
(CONST 2) = SCAN-DIGITS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (#\E #\e #\B #\b #\D #\d #\S #\s)
2     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; SCAN-NUMBER-EXPONENT
4     (CALL 3 2)                          ; SCAN-DIGITS
7     (SKIP&RET 2)


Disassembly of function #:|(DEFUN SCAN-NUMBER-EXPONENT (DATA) ...)-43|
(CONST 0) = SCAN-NUMBER-EXPONENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-NUMBER-EXPONENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-NUMBER-EXPONENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-NUMBER-EXPONENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-NUMBER-EXPONENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-NUMBER-EXPONENT
8     (SKIP&RET 1)


Disassembly of function SCAN-NUMBER-EXPONENT
(CONST 0) = PARSE-TYIPEEK
(CONST 1) = #\+
(CONST 2) = #\-
(CONST 3) = PARSE-TYI
(CONST 4) = SCAN-DIGITS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (CALL0 0)                           ; PARSE-TYIPEEK
2     (PUSH)
3     (CONST&PUSH 1)                      ; #\+
4     (CALLSR&JMPIF 1 7 L30)              ; CHAR=
8     (CALL0 0)                           ; PARSE-TYIPEEK
10    (PUSH)
11    (CONST&PUSH 2)                      ; #\-
12    (CALLSR&JMPIF 1 7 L30)              ; CHAR=
16    (CONST 1)                           ; #\+
17    L17
17    (PUSH)
18    (NIL)
19    (CONS&PUSH)
20    (LOAD&CONS&STORE 1)
22    (PUSH)
23    (PUSH-NIL 2)
25    (CALL 3 4)                          ; SCAN-DIGITS
28    (SKIP&RET 2)
30    L30
30    (CALL0 3)                           ; PARSE-TYI
32    (JMP L17)


Disassembly of function #:|(DEFVAR SCAN-BUFFERED-TOKEN (LIST NIL) ...)-44|
(CONST 0) = (SPECIAL SCAN-BUFFERED-TOKEN)
(CONST 1) = SCAN-BUFFERED-TOKEN
(CONST 2) = VARIABLE
(CONST 3) = "put-back buffer for scanner, a state-variable of the reader"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL SCAN-BUFFERED-TOKEN)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; SCAN-BUFFERED-TOKEN
4     (CALLS1&JMPIF 79 L13)               ; BOUNDP
7     (CONST&PUSH 1)                      ; SCAN-BUFFERED-TOKEN
8     (NIL&PUSH)
9     (LIST&PUSH 1)
11    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
13    L13
13    (CONST&PUSH 1)                      ; SCAN-BUFFERED-TOKEN
14    (CONST&PUSH 2)                      ; VARIABLE
15    (CONST&PUSH 3)                      ; "put-back buffer for scanner, a state-variable of the reader"
16    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
19    (CONST 1)                           ; SCAN-BUFFERED-TOKEN
20    (SKIP&RET 1)


Disassembly of function #:|(DEFUN PEEK-ONE-TOKEN NIL ...)-45|
(CONST 0) = PEEK-ONE-TOKEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PEEK-ONE-TOKEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PEEK-ONE-TOKEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PEEK-ONE-TOKEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PEEK-ONE-TOKEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PEEK-ONE-TOKEN
8     (SKIP&RET 1)


Disassembly of function PEEK-ONE-TOKEN
(CONST 0) = PEEK-ONE-TOKEN-G
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (PUSH-NIL 2)
2     (CALL2 0)                           ; PEEK-ONE-TOKEN-G
4     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PEEK-ONE-TOKEN-G (EOF-OK? EOF-OBJ) ...)-46|
(CONST 0) = PEEK-ONE-TOKEN-G
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PEEK-ONE-TOKEN-G>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PEEK-ONE-TOKEN-G
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PEEK-ONE-TOKEN-G
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PEEK-ONE-TOKEN-G>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PEEK-ONE-TOKEN-G
8     (SKIP&RET 1)


Disassembly of function PEEK-ONE-TOKEN-G
(CONST 0) = SCAN-BUFFERED-TOKEN
(CONST 1) = SCAN-ONE-TOKEN-G
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (SCAN-BUFFERED-TOKEN)
17 byte-code instructions:
0     (GETVALUE 0)                        ; SCAN-BUFFERED-TOKEN
2     (CAR)
3     (JMPIF L21)
5     (GETVALUE&PUSH 0)                   ; SCAN-BUFFERED-TOKEN
7     (LOAD&PUSH 3)
8     (LOAD&PUSH 3)
9     (CALL2&PUSH 1)                      ; SCAN-ONE-TOKEN-G
11    (CALLS1 170)                        ; RPLACD
13    (GETVALUE&PUSH 0)                   ; SCAN-BUFFERED-TOKEN
15    (T&PUSH)
16    (CALLS1 168)                        ; RPLACA
18    L18
18    (CDR)
19    (SKIP&RET 3)
21    L21
21    (GETVALUE 0)                        ; SCAN-BUFFERED-TOKEN
23    (JMP L18)


Disassembly of function #:|(DEFUN SCAN-ONE-TOKEN NIL ...)-47|
(CONST 0) = SCAN-ONE-TOKEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-ONE-TOKEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-ONE-TOKEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-ONE-TOKEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-ONE-TOKEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-ONE-TOKEN
8     (SKIP&RET 1)


Disassembly of function SCAN-ONE-TOKEN
(CONST 0) = SCAN-ONE-TOKEN-G
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (PUSH-NIL 2)
2     (CALL2 0)                           ; SCAN-ONE-TOKEN-G
4     (SKIP&RET 1)


Disassembly of function #:|(DEFUN SCAN-ONE-TOKEN-G (EOF-OK? EOF-OBJ) ...)-48|
(CONST 0) = SCAN-ONE-TOKEN-G
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-ONE-TOKEN-G>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-ONE-TOKEN-G
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-ONE-TOKEN-G
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-ONE-TOKEN-G>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-ONE-TOKEN-G
8     (SKIP&RET 1)


Disassembly of function SCAN-ONE-TOKEN-G
(CONST 0) = SCAN-BUFFERED-TOKEN
(CONST 1) = MACSYMA-OPERATORS
(CONST 2) = READ-COMMAND-TOKEN
(CONST 3) = PARSE-TYIPEEK
(CONST 4) = -1
(CONST 5) = PARSE-TYI
(CONST 6) = "without any special action"
(CONST 7) = "End of file while scanning expression"
(CONST 8) = CERROR
(CONST 9) = FORWARD-SLASH-CHAR
(CONST 10) = #\*
(CONST 11) = GOBBLE-COMMENT
(CONST 12) = $/
(CONST 13) = #\.
(CONST 14) = ASCII-NUMBERP
(CONST 15) = SCAN-NUMBER-AFTER-DOT
(CONST 16) = $.
(CONST 17) = DOUBLE-QUOTE-CHAR
(CONST 18) = SCAN-MACSYMA-STRING
(CONST 19) = #\?
(CONST 20) = SCAN-LISP-STRING
(CONST 21) = #\:
(CONST 22) = SCAN-KEYWORD-TOKEN
(CONST 23) = SCAN-LISP-TOKEN
(CONST 24) = SCAN-NUMBER-BEFORE-DOT
(CONST 25) = SCAN-MACSYMA-TOKEN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (DOUBLE-QUOTE-CHAR FORWARD-SLASH-CHAR MACSYMA-OPERATORS SCAN-BUFFERED-TOKEN)
99 byte-code instructions:
0     L0
0     (GETVALUE 0)                        ; SCAN-BUFFERED-TOKEN
2     (CAR)
3     (JMPIF L51)
5     (GETVALUE&PUSH 1)                   ; MACSYMA-OPERATORS
7     (CALL1 2)                           ; READ-COMMAND-TOKEN
9     (JMPIF1 L162)
12    (CALL0 3)                           ; PARSE-TYIPEEK
14    (PUSH)
15    (LOAD&PUSH 0)
16    (JMPIFEQTO 4 L64)                   ; -1
19    (LOAD&PUSH 0)
20    (GETVALUE&PUSH 9)                   ; FORWARD-SLASH-CHAR
22    (CALLS2&JMPIF 1 L84)                ; EQL
25    (LOAD&PUSH 0)
26    (JMPIFEQTO 13 L107)                 ; #\.
30    (LOAD&PUSH 0)
31    (GETVALUE&PUSH 17)                  ; DOUBLE-QUOTE-CHAR
33    (CALLS2&JMPIF 1 L118)               ; EQL
37    (LOAD&PUSH 0)
38    (JMPIFEQTO 19 L134)                 ; #\?
42    (LOAD&PUSH 0)
43    (CALL1&JMPIF 14 L157)               ; ASCII-NUMBERP
47    (CALL0 25)                          ; SCAN-MACSYMA-TOKEN
49    (SKIP&RET 4)
51    L51
51    (GETVALUE&PUSH 0)                   ; SCAN-BUFFERED-TOKEN
53    (NIL&PUSH)
54    (CALLS1 168)                        ; RPLACA
56    (GETVALUE 0)                        ; SCAN-BUFFERED-TOKEN
58    (CDR)
59    (SKIP&RET 3)
61    L61
61    (LOAD 2)
62    (SKIP&RET 4)
64    L64
64    (CALL0 5)                           ; PARSE-TYI
66    (LOAD&JMPIF 3 L61)
69    (CONST&PUSH 6)                      ; "without any special action"
70    (CONST&PUSH 7)                      ; "End of file while scanning expression"
71    (CALL2 8)                           ; CERROR
73    (SKIP&RET 4)
75    L75
75    (CALL0 11)                          ; GOBBLE-COMMENT
77    (LOAD&PUSH 3)
78    (LOAD&PUSH 3)
79    (JMPTAIL 2 6 L0)
84    L84
84    (CALL0 5)                           ; PARSE-TYI
86    (CALL0 3)                           ; PARSE-TYIPEEK
88    (PUSH)
89    (CONST&PUSH 10)                     ; #\*
90    (CALLSR&JMPIF 1 7 L75)              ; CHAR=
94    (CONST 12)                          ; $/
95    (SKIP&RET 4)
97    L97
97    (CONST&PUSH 13)                     ; #\.
98    (NIL)
99    (CONS&PUSH)
100   (NIL&PUSH)
101   (LIST&PUSH 2)
103   (CALL1 15)                          ; SCAN-NUMBER-AFTER-DOT
105   (SKIP&RET 4)
107   L107
107   (CALL0 5)                           ; PARSE-TYI
109   (CALL0 3)                           ; PARSE-TYIPEEK
111   (PUSH)
112   (CALL1&JMPIF 14 L97)                ; ASCII-NUMBERP
115   (CONST 16)                          ; $.
116   (SKIP&RET 4)
118   L118
118   (CALL0 5)                           ; PARSE-TYI
120   (CALL0 18)                          ; SCAN-MACSYMA-STRING
122   (SKIP&RET 4)
124   L124
124   (CALL0 5)                           ; PARSE-TYI
126   (CALL0 20)                          ; SCAN-LISP-STRING
128   (SKIP&RET 4)
130   L130
130   (CALL0 22)                          ; SCAN-KEYWORD-TOKEN
132   (SKIP&RET 4)
134   L134
134   (CALL0 5)                           ; PARSE-TYI
136   (CALL0 3)                           ; PARSE-TYIPEEK
138   (PUSH)
139   (GETVALUE&PUSH 17)                  ; DOUBLE-QUOTE-CHAR
141   (CALLSR&JMPIF 1 7 L124)             ; CHAR=
145   (CALL0 3)                           ; PARSE-TYIPEEK
147   (PUSH)
148   (CONST&PUSH 21)                     ; #\:
149   (CALLSR&JMPIF 1 7 L130)             ; CHAR=
153   (CALL0 23)                          ; SCAN-LISP-TOKEN
155   (SKIP&RET 4)
157   L157
157   (NIL&PUSH)
158   (CALL1 24)                          ; SCAN-NUMBER-BEFORE-DOT
160   (SKIP&RET 4)
162   L162
162   (SKIP&RET 3)


Disassembly of function #:|(DEFUN GOBBLE-COMMENT NIL ...)-49|
(CONST 0) = GOBBLE-COMMENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GOBBLE-COMMENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GOBBLE-COMMENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GOBBLE-COMMENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GOBBLE-COMMENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GOBBLE-COMMENT
8     (SKIP&RET 1)


Disassembly of function GOBBLE-COMMENT
(CONST 0) = DEPTH
(CONST 1) = 1
(CONST 2) = PARSE-TYIPEEK
(CONST 3) = PARSE-TYI
(CONST 4) = 0
(CONST 5) = "end of file in comment"
(CONST 6) = #\*
(CONST 7) = #\/
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (DEPTH)
writes special variable : (DEPTH)
52 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; DEPTH
4     (CONST 1)                           ; 1
5     (SETVALUE 0)                        ; DEPTH
7     L7
7     (CALL0 2)                           ; PARSE-TYIPEEK
9     (STORE 3)
10    (CALL0 3)                           ; PARSE-TYI
12    (GETVALUE&PUSH 0)                   ; DEPTH
14    (CONST&PUSH 4)                      ; 0
15    (CALLSR&JMPIF 1 45 L58)             ; =
19    (LOAD&PUSH 3)
20    (CALLS2&JMPIFNOT 8 L29)             ; NUMBERP
23    (LOAD&PUSH 3)
24    (CONST&PUSH 4)                      ; 0
25    (CALLSR&JMPIF 1 47 L62)             ; <
29    L29
29    (LOAD&PUSH 3)
30    (CONST&PUSH 6)                      ; #\*
31    (CALLSR&JMPIFNOT 1 7 L66)           ; CHAR=
35    (CALL0 2)                           ; PARSE-TYIPEEK
37    (PUSH)
38    (CONST&PUSH 7)                      ; #\/
39    (CALLSR&JMPIFNOT 1 7 L7)            ; CHAR=
43    (GETVALUE&PUSH 0)                   ; DEPTH
45    (CALLS2 151)                        ; 1-
47    (SETVALUE 0)                        ; DEPTH
49    (CALL0 3)                           ; PARSE-TYI
51    (GETVALUE&PUSH 0)                   ; DEPTH
53    (CONST&PUSH 4)                      ; 0
54    (CALLSR&JMPIFNOT 1 45 L7)           ; =
58    L58
58    (T)
59    (UNBIND1)
60    (SKIP&RET 2)
62    L62
62    (CONST&PUSH 5)                      ; "end of file in comment"
63    (CALLSR 0 29)                       ; ERROR
66    L66
66    (LOAD&PUSH 3)
67    (CONST&PUSH 7)                      ; #\/
68    (CALLSR&JMPIFNOT 1 7 L7)            ; CHAR=
73    (CALL0 2)                           ; PARSE-TYIPEEK
75    (PUSH)
76    (CONST&PUSH 6)                      ; #\*
77    (CALLSR&JMPIFNOT 1 7 L7)            ; CHAR=
82    (GETVALUE&PUSH 0)                   ; DEPTH
84    (CALLS2 150)                        ; 1+
86    (SETVALUE 0)                        ; DEPTH
88    (CALL0 3)                           ; PARSE-TYI
90    (JMP L7)


Disassembly of function #:|(DEFUN SCAN-NUMBER-REST (DATA) ...)-50|
(CONST 0) = SCAN-NUMBER-REST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-NUMBER-REST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-NUMBER-REST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-NUMBER-REST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-NUMBER-REST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-NUMBER-REST
8     (SKIP&RET 1)


Disassembly of function SCAN-NUMBER-REST
(CONST 0) = (#\.)
(CONST 1) = SCAN-NUMBER-AFTER-DOT
(CONST 2) = (#\E #\e #\B #\b #\D #\d #\S #\s)
(CONST 3) = #\.
(CONST 4) = #\0
(CONST 5) = SCAN-NUMBER-EXPONENT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
40 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; (#\.)
5     (PUSH-UNBOUND 3)
7     (CALLS1&JMPIF 180 L20)              ; MEMBER
10    (LOAD&PUSH 0)
11    (CONST&PUSH 2)                      ; (#\E #\e #\B #\b #\D #\d #\S #\s)
12    (PUSH-UNBOUND 3)
14    (CALLS1&JMPIF 180 L25)              ; MEMBER
17    (NIL)
18    (SKIP&RET 3)
20    L20
20    (LOAD&PUSH 2)
21    (CALL1 1)                           ; SCAN-NUMBER-AFTER-DOT
23    (SKIP&RET 3)
25    L25
25    (CONST&PUSH 3)                      ; #\.
26    (NIL)
27    (CONS&PUSH)
28    (LOAD&CDR&PUSH 3)
30    (LOAD&PUSH 4)
31    (LOAD&PUSH 2)
32    (LOAD 2)
33    (CONS&PUSH)
34    (CALLS1 171)                        ; SYSTEM::%RPLACD
36    (SKIP 2)
38    (STORE 2)
39    (CONST&PUSH 4)                      ; #\0
40    (NIL)
41    (CONS&PUSH)
42    (LOAD&CONS&STORE 2)
44    (LOAD&PUSH 0)
45    (NIL)
46    (CONS&PUSH)
47    (LOAD&CONS&STORE 2)
49    (PUSH)
50    (CALL1 5)                           ; SCAN-NUMBER-EXPONENT
52    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SCAN-NUMBER-BEFORE-DOT (DATA) ...)-51|
(CONST 0) = SCAN-NUMBER-BEFORE-DOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SCAN-NUMBER-BEFORE-DOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SCAN-NUMBER-BEFORE-DOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SCAN-NUMBER-BEFORE-DOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SCAN-NUMBER-BEFORE-DOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SCAN-NUMBER-BEFORE-DOT
8     (SKIP&RET 1)


Disassembly of function SCAN-NUMBER-BEFORE-DOT
(CONST 0) = (#\. #\E #\e #\B #\b #\D #\d #\S #\s)
(CONST 1) = SCAN-NUMBER-REST
(CONST 2) = SCAN-DIGITS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (#\. #\E #\e #\B #\b #\D #\d ...)
2     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; SCAN-NUMBER-REST
4     (CALL 3 2)                          ; SCAN-DIGITS
7     (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO FIRST-C NIL ...)-52|
(CONST 0) = FIRST-C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIRST-C>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIRST-C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIRST-C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIRST-C>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; FIRST-C
10    (SKIP&RET 1)


Disassembly of function FIRST-C
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = (PEEK-ONE-TOKEN)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (PEEK-ONE-TOKEN)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO POP-C NIL ...)-53|
(CONST 0) = POP-C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POP-C>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; POP-C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POP-C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POP-C>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; POP-C
10    (SKIP&RET 1)


Disassembly of function POP-C
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = (SCAN-ONE-TOKEN)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (SCAN-ONE-TOKEN)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MSTRINGP (X) ...)-54|
(CONST 0) = MSTRINGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MSTRINGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSTRINGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MSTRINGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MSTRINGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MSTRINGP
8     (SKIP&RET 1)


Disassembly of function MSTRINGP
(CONST 0) = X
(CONST 1) = FIRSTCHARN
(CONST 2) = #\&
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2 6)                          ; SYMBOLP
7     (JMPIFNOT1 L17)
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1&PUSH 1)                      ; FIRSTCHARN
13    (CONST&PUSH 2)                      ; #\&
14    (CALLSR 1 7)                        ; CHAR=
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INHERIT-PROPL (OP-TO OP-FROM GETL) ...)-55|
(CONST 0) = INHERIT-PROPL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INHERIT-PROPL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INHERIT-PROPL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INHERIT-PROPL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INHERIT-PROPL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INHERIT-PROPL
8     (SKIP&RET 1)


Disassembly of function INHERIT-PROPL
(CONST 0) = GETL
(CONST 1) = PUTPROP
(CONST 2) = "without any special action"
(CONST 3) = "has no"
(CONST 4) = "properties."
(CONST 5) = WRNG-TYPE-ARG
(CONST 6) = CERROR
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     L0
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALL2&PUSH 0)                      ; GETL
4     (LOAD&JMPIF 0 L24)
7     (LOAD&PUSH 4)
8     (CONST&PUSH 2)                      ; "without any special action"
9     (CONST&PUSH 3)                      ; "has no"
10    (LOAD&PUSH 5)
11    (CONST&PUSH 4)                      ; "properties."
12    (LIST&PUSH 3)
14    (LOAD&PUSH 6)
15    (CONST&PUSH 5)                      ; WRNG-TYPE-ARG
16    (CALL&PUSH 4 6)                     ; CERROR
19    (LOAD&PUSH 4)
20    (JMPTAIL 3 8 L0)
24    L24
24    (LOAD&PUSH 4)
25    (LOAD&CAR&PUSH 1)
27    (CALLS2 137)                        ; REMPROP
29    (LOAD&PUSH 4)
30    (LOAD 1)
31    (CDR)
32    (CAR&PUSH)
33    (LOAD&CAR&PUSH 2)
35    (CALL 3 1)                          ; PUTPROP
38    (SKIP&RET 5)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE LOAD) (DEFMACRO DEF-NUD-EQUIV # ...) ...)-56-1|
(CONST 0) = DEF-NUD-EQUIV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-NUD-EQUIV>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-NUD-EQUIV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-NUD-EQUIV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-NUD-EQUIV>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function DEF-NUD-EQUIV
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = PUTPROP
(CONST 3) = QUOTE
(CONST 4) = FUNCTION
(CONST 5) = NUD
1 required argument
1 optional argument
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L32)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; PUTPROP
16    (CONST&PUSH 3)                      ; QUOTE
17    (LOAD&PUSH 3)
18    (LIST&PUSH 2)
20    (CONST&PUSH 4)                      ; FUNCTION
21    (LOAD&PUSH 3)
22    (LIST&PUSH 2)
24    (CONST&PUSH 3)                      ; QUOTE
25    (CONST&PUSH 5)                      ; NUD
26    (LIST&PUSH 2)
28    (LIST 4)
30    (SKIP&RET 5)
32    L32
32    (LOAD&PUSH 2)
33    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
35    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE LOAD) (DEFMACRO DEF-NUD-EQUIV # ...) ...)-56-2|
(CONST 0) = NUD-PROPL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUD-PROPL>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUD-PROPL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUD-PROPL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUD-PROPL>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function NUD-PROPL
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = '(NUD)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; '(NUD)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE LOAD) (DEFMACRO DEF-NUD-EQUIV # ...) ...)-56-3|
(CONST 0) = DEF-NUD-FUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-NUD-FUN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-NUD-FUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-NUD-FUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-NUD-FUN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function DEF-NUD-FUN
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DEFUN-PROP
(CONST 3) = NUD
1 required argument
1 optional argument
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L31)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (CONST&PUSH 2)                      ; DEFUN-PROP
20    (LOAD&PUSH 3)
21    (CONST&PUSH 3)                      ; NUD
22    (NIL)
23    (LIST*&PUSH 2)
25    (LOAD&PUSH 3)
26    (LOAD 3)
27    (LIST* 3)
29    (SKIP&RET 6)
31    L31
31    (LOAD&PUSH 2)
32    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
34    (SKIP&RET 3)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE LOAD) (DEFMACRO DEF-NUD-EQUIV # ...) ...)-56-4|
(CONST 0) = NUD-CALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUD-CALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUD-CALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUD-CALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUD-CALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUD-CALL
8     (SKIP&RET 1)


Disassembly of function NUD-CALL
(CONST 0) = (NUD)
(CONST 1) = GETL
(CONST 2) = RES
(CONST 3) = OPERATORP
(CONST 4) = "~A is not a prefix operator"
(CONST 5) = MOPSTRIP
(CONST 6) = MREAD-SYNERR
(CONST 7) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (RES)
32 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 6 L8)              ; SYMBOLP
4     (LOAD&PUSH 1)
5     (CONST&PUSH 0)                      ; (NUD)
6     (CALL2 1)                           ; GETL
8     L8
8     (PUSH)
9     (NIL)
10    (BIND 2)                            ; RES
12    (LOAD&JMPIFNOT 3 L34)
15    (LOAD 3)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD&PUSH 6)
19    (FUNCALL 1)
21    L21
21    (SETVALUE 2)                        ; RES
23    (UNBIND1)
24    (SKIP&RET 3)
26    L26
26    (CONST&PUSH 4)                      ; "~A is not a prefix operator"
27    (LOAD&PUSH 6)
28    (CALL1&PUSH 5)                      ; MOPSTRIP
30    (CALL2 6)                           ; MREAD-SYNERR
32    (JMP L21)
34    L34
34    (LOAD&PUSH 5)
35    (CALL1&JMPIF 3 L26)                 ; OPERATORP
38    (CONST&PUSH 7)                      ; $ANY
39    (LOAD 6)
40    (CONS)
41    (JMP L21)


Disassembly of function #:|(DEFMACRO DEF-LED-EQUIV (OP EQUIV) ...)-57|
(CONST 0) = DEF-LED-EQUIV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-LED-EQUIV>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-LED-EQUIV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-LED-EQUIV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-LED-EQUIV>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-LED-EQUIV
10    (SKIP&RET 1)


Disassembly of function DEF-LED-EQUIV
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = PUTPROP
(CONST 3) = QUOTE
(CONST 4) = FUNCTION
(CONST 5) = LED
1 required argument
1 optional argument
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L32)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; PUTPROP
16    (CONST&PUSH 3)                      ; QUOTE
17    (LOAD&PUSH 3)
18    (LIST&PUSH 2)
20    (CONST&PUSH 4)                      ; FUNCTION
21    (LOAD&PUSH 3)
22    (LIST&PUSH 2)
24    (CONST&PUSH 3)                      ; QUOTE
25    (CONST&PUSH 5)                      ; LED
26    (LIST&PUSH 2)
28    (LIST 4)
30    (SKIP&RET 5)
32    L32
32    (LOAD&PUSH 2)
33    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
35    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO LED-PROPL NIL ...)-58|
(CONST 0) = LED-PROPL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LED-PROPL>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; LED-PROPL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LED-PROPL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LED-PROPL>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; LED-PROPL
10    (SKIP&RET 1)


Disassembly of function LED-PROPL
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = '(LED)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; '(LED)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DEF-LED-FUN (OP-NAME OP-L . BODY) ...)-59|
(CONST 0) = DEF-LED-FUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-LED-FUN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-LED-FUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-LED-FUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-LED-FUN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-LED-FUN
10    (SKIP&RET 1)


Disassembly of function DEF-LED-FUN
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DEFUN-PROP
(CONST 3) = LED
1 required argument
1 optional argument
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L31)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (CONST&PUSH 2)                      ; DEFUN-PROP
20    (LOAD&PUSH 3)
21    (CONST&PUSH 3)                      ; LED
22    (NIL)
23    (LIST*&PUSH 2)
25    (LOAD&PUSH 3)
26    (LOAD 3)
27    (LIST* 3)
29    (SKIP&RET 6)
31    L31
31    (LOAD&PUSH 2)
32    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
34    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LED-CALL (OP L) ...)-60|
(CONST 0) = LED-CALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LED-CALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LED-CALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LED-CALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LED-CALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LED-CALL
8     (SKIP&RET 1)


Disassembly of function LED-CALL
(CONST 0) = L
(CONST 1) = (LED)
(CONST 2) = GETL
(CONST 3) = RES
(CONST 4) = "~A is not an infix operator"
(CONST 5) = MOPSTRIP
(CONST 6) = MREAD-SYNERR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (RES)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (LOAD&PUSH 5)
4     (CALLS2&JMPIFNOT 6 L11)             ; SYMBOLP
7     (LOAD&PUSH 5)
8     (CONST&PUSH 1)                      ; (LED)
9     (CALL2 2)                           ; GETL
11    L11
11    (PUSH)
12    (NIL)
13    (BIND 3)                            ; RES
15    (LOAD&JMPIFNOT 3 L34)
18    (LOAD 3)
19    (CDR)
20    (CAR&PUSH)
21    (LOAD&PUSH 10)
22    (GETVALUE&PUSH 0)                   ; L
24    (FUNCALL 2)
26    L26
26    (SETVALUE 3)                        ; RES
28    (UNBIND1)
29    (SKIP 1)
31    (UNBIND1)
32    (SKIP&RET 3)
34    L34
34    (CONST&PUSH 4)                      ; "~A is not an infix operator"
35    (LOAD&PUSH 10)
36    (CALL1&PUSH 5)                      ; MOPSTRIP
38    (CALL2 6)                           ; MREAD-SYNERR
40    (JMP L26)


Disassembly of function #:|(DEFMACRO DEF-NUD (# BVL . BODY) ...)-61|
(CONST 0) = DEF-NUD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-NUD>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-NUD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-NUD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-NUD>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-NUD
10    (SKIP&RET 1)


Disassembly of function DEF-NUD
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = 0
(CONST 3) = 1
(CONST 4) = RBP
(CONST 5) = LBP
(CONST 6) = PROGN
(CONST 7) = 'COMPILE
(CONST 8) = NUD
(CONST 9) = MAKE-PARSER-FUN-DEF
(CONST 10) = SET-LBP-AND-RBP
(CONST 11) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (RBP LBP)
54 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L69)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (CAR&PUSH)
12    (LOAD 3)
13    (CDR)
14    (CAR)
15    (CDR&PUSH)
16    (LOAD 4)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (LOAD 5)
21    (CDR)
22    (CDR)
23    (CDR&PUSH)
24    (CONST&PUSH 2)                      ; 0
25    (LOAD&PUSH 3)
26    (CALLS1&PUSH 148)                   ; NTH
28    (CONST&PUSH 3)                      ; 1
29    (LOAD&PUSH 4)
30    (CALLS1 148)                        ; NTH
32    (BIND 4)                            ; RBP
34    (LOAD 3)
35    (BIND 5)                            ; LBP
37    (CONST&PUSH 6)                      ; PROGN
38    (CONST&PUSH 7)                      ; 'COMPILE
39    (LOAD&PUSH 12)
40    (CONST&PUSH 8)                      ; NUD
41    (LOAD&PUSH 12)
42    (LOAD&PUSH 12)
43    (CALL&PUSH 4 9)                     ; MAKE-PARSER-FUN-DEF
46    (CONST&PUSH 10)                     ; SET-LBP-AND-RBP
47    (CONST&PUSH 11)                     ; QUOTE
48    (LOAD&PUSH 15)
49    (LIST&PUSH 2)
51    (CONST&PUSH 11)                     ; QUOTE
52    (GETVALUE&PUSH 5)                   ; LBP
54    (LIST&PUSH 2)
56    (CONST&PUSH 11)                     ; QUOTE
57    (GETVALUE&PUSH 4)                   ; RBP
59    (LIST&PUSH 2)
61    (LIST&PUSH 4)
63    (LIST 4)
65    (UNBIND 2)
67    (SKIP&RET 8)
69    L69
69    (LOAD&PUSH 2)
70    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
72    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SET-LBP-AND-RBP (OP LBP RBP) ...)-62|
(CONST 0) = SET-LBP-AND-RBP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SET-LBP-AND-RBP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SET-LBP-AND-RBP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SET-LBP-AND-RBP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SET-LBP-AND-RBP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SET-LBP-AND-RBP
8     (SKIP&RET 1)


Disassembly of function SET-LBP-AND-RBP
(CONST 0) = LBP
(CONST 1) = RBP
(CONST 2) = PUTPROP
(CONST 3) = "without any special action"
(CONST 4) = "Incompatible LBP's defined for this operator"
(CONST 5) = CERROR
(CONST 6) = COMMENT
(CONST 7) = "Incompatible RBP's defined for this operator"
(CONST 8) = X
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X RBP LBP)
92 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; LBP
3     (LOAD 4)
4     (BIND 1)                            ; RBP
6     (LOAD 9)
7     (JMPIFATOM L67)
9     (NIL&PUSH)
10    (LOAD&PUSH 10)
11    (JMP L134)
14    L14
14    (LOAD&PUSH 11)
15    (GETVALUE&PUSH 0)                   ; LBP
17    (CONST&PUSH 0)                      ; LBP
18    (CALL 3 2)                          ; PUTPROP
21    (GETVALUE 1)                        ; RBP
23    (JMPIFNOT L38)
25    (JMP L98)
28    L28
28    (CONST&PUSH 3)                      ; "without any special action"
29    (CONST&PUSH 4)                      ; "Incompatible LBP's defined for this operator"
30    (LOAD&PUSH 13)
31    (CALL 3 5)                          ; CERROR
34    (GETVALUE 1)                        ; RBP
36    (JMPIF L98)
38    L38
38    (CONST 6)                           ; COMMENT
39    (SKIP 2)
41    (JMP L145)
44    L44
44    (LOAD&PUSH 11)
45    (GETVALUE&PUSH 1)                   ; RBP
47    (CONST&PUSH 1)                      ; RBP
48    (CALL 3 2)                          ; PUTPROP
51    (SKIP 2)
53    (JMP L145)
56    L56
56    (CONST&PUSH 3)                      ; "without any special action"
57    (CONST&PUSH 7)                      ; "Incompatible RBP's defined for this operator"
58    (LOAD&PUSH 13)
59    (CALL 3 5)                          ; CERROR
62    (SKIP 2)
64    (JMP L145)
67    L67
67    (LOAD&PUSH 9)
68    (CONST&PUSH 0)                      ; LBP
69    (PUSH-UNBOUND 1)
71    (CALLS2&PUSH 132)                   ; GET
73    (LOAD&PUSH 10)
74    (CONST&PUSH 1)                      ; RBP
75    (PUSH-UNBOUND 1)
77    (CALLS2&PUSH 132)                   ; GET
79    (GETVALUE 0)                        ; LBP
81    (JMPIFNOT L94)
83    (LOAD&JMPIFNOT 1 L14)
87    (LOAD&PUSH 1)
88    (GETVALUE&PUSH 0)                   ; LBP
90    (CALLS2&JMPIFNOT 2 L28)             ; EQUAL
94    L94
94    (GETVALUE 1)                        ; RBP
96    (JMPIFNOT L38)
98    L98
98    (LOAD&JMPIFNOT 0 L44)
101   (LOAD&PUSH 0)
102   (GETVALUE&PUSH 1)                   ; RBP
104   (CALLS2&JMPIFNOT 2 L56)             ; EQUAL
107   (NIL)
108   (SKIP 2)
110   (JMP L145)
112   L112
112   (LOAD&CAR&PUSH 0)
114   (LOAD 0)
115   (BIND 8)                            ; X
117   (GETVALUE&PUSH 8)                   ; X
119   (GETVALUE&PUSH 0)                   ; LBP
121   (GETVALUE&PUSH 1)                   ; RBP
123   (JSR L0)
126   (UNBIND1)
127   (PUSH)
128   (LOAD&CONS&STORE 2)
130   (SKIP 1)
132   (LOAD&CDR&STORE 0)
134   L134
134   (LOAD&PUSH 0)
135   (CALLS1&JMPIFNOT 146 L112)          ; ENDP
138   (SKIP 1)
140   (LOAD&PUSH 0)
141   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
143   (SKIP 1)
145   L145
145   (UNBIND 2)
147   (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO DEF-LED (# BVL . BODY) ...)-63|
(CONST 0) = DEF-LED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-LED>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-LED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-LED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-LED>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-LED
10    (SKIP&RET 1)


Disassembly of function DEF-LED
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = 0
(CONST 3) = 1
(CONST 4) = RBP
(CONST 5) = LBP
(CONST 6) = PROGN
(CONST 7) = 'COMPILE
(CONST 8) = LED
(CONST 9) = MAKE-PARSER-FUN-DEF
(CONST 10) = SET-LBP-AND-RBP
(CONST 11) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (RBP LBP)
54 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L69)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (CAR&PUSH)
12    (LOAD 3)
13    (CDR)
14    (CAR)
15    (CDR&PUSH)
16    (LOAD 4)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (LOAD 5)
21    (CDR)
22    (CDR)
23    (CDR&PUSH)
24    (CONST&PUSH 2)                      ; 0
25    (LOAD&PUSH 3)
26    (CALLS1&PUSH 148)                   ; NTH
28    (CONST&PUSH 3)                      ; 1
29    (LOAD&PUSH 4)
30    (CALLS1 148)                        ; NTH
32    (BIND 4)                            ; RBP
34    (LOAD 3)
35    (BIND 5)                            ; LBP
37    (CONST&PUSH 6)                      ; PROGN
38    (CONST&PUSH 7)                      ; 'COMPILE
39    (LOAD&PUSH 12)
40    (CONST&PUSH 8)                      ; LED
41    (LOAD&PUSH 12)
42    (LOAD&PUSH 12)
43    (CALL&PUSH 4 9)                     ; MAKE-PARSER-FUN-DEF
46    (CONST&PUSH 10)                     ; SET-LBP-AND-RBP
47    (CONST&PUSH 11)                     ; QUOTE
48    (LOAD&PUSH 15)
49    (LIST&PUSH 2)
51    (CONST&PUSH 11)                     ; QUOTE
52    (GETVALUE&PUSH 5)                   ; LBP
54    (LIST&PUSH 2)
56    (CONST&PUSH 11)                     ; QUOTE
57    (GETVALUE&PUSH 4)                   ; RBP
59    (LIST&PUSH 2)
61    (LIST&PUSH 4)
63    (LIST 4)
65    (UNBIND 2)
67    (SKIP&RET 8)
69    L69
69    (LOAD&PUSH 2)
70    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
72    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DEF-COLLISIONS (OP &REST ALIST) ...)-64|
(CONST 0) = DEF-COLLISIONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-COLLISIONS>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-COLLISIONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-COLLISIONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-COLLISIONS>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-COLLISIONS
10    (SKIP&RET 1)


Disassembly of function DEF-COLLISIONS
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = 1
(CONST 3) = PROGN
(CONST 4) = 'COMPILE
(CONST 5) = DEFPROP
(CONST 6) = (KEYS)
(CONST 7) = 0
(CONST 8) = ASSQ
1 required argument
1 optional argument
No rest parameter
No keyword parameters
81 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L57)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; 1
15    (LOAD&PUSH 1)
16    (NIL&PUSH)
17    (LOAD&JMPIFNOT 1 L39)
20    L20
20    (LOAD&CDR&PUSH 1)
22    (LOAD 2)
23    (CAR)
24    (CAR&PUSH)
25    (LOAD 4)
26    (CONS&PUSH)
27    (LOAD&CONS&STORE 1)
29    (POP&STORE 1)
31    (LOAD&PUSH 2)
32    (CONST&PUSH 2)                      ; 1
33    (CALLS2&STORE 209 2)                ; ASH
36    (LOAD&JMPIF 1 L20)
39    L39
39    (POP)
40    (SKIP 1)
42    (STORE 0)
43    (CONST&PUSH 3)                      ; PROGN
44    (CONST&PUSH 4)                      ; 'COMPILE
45    (CONST&PUSH 5)                      ; DEFPROP
46    (LOAD&PUSH 5)
47    (LOAD&PUSH 4)
48    (CALLS1&PUSH 161)                   ; COPY-TREE
50    (CONST 6)                           ; (KEYS)
51    (LIST*&PUSH 3)
53    (NIL&PUSH)
54    (LOAD&PUSH 5)
55    (JMP L103)
57    L57
57    (LOAD&PUSH 2)
58    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
60    (SKIP&RET 3)
62    L62
62    (LOAD&CAR&PUSH 0)
64    (CONST&PUSH 5)                      ; DEFPROP
65    (LOAD&CAR&PUSH 1)
67    (CONST&PUSH 7)                      ; 0
68    (LOAD&CDR&PUSH 3)
70    (LOAD&JMPIFNOT 0 L90)
73    L73
73    (LOAD&PUSH 1)
74    (LOAD&CAR&PUSH 1)
76    (LOAD&PUSH 12)
77    (CALL2 8)                           ; ASSQ
79    (CDR&PUSH)
80    (CALLSR&PUSH 2 59)                  ; LOGIOR
83    (LOAD&CDR&STORE 1)
85    (POP&STORE 1)
87    (LOAD&JMPIF 0 L73)
90    L90
90    (LOAD 1)
91    (SKIP 1)
93    (STORE 0)
94    (LOAD&PUSH 11)
95    (LIST&PUSH 4)
97    (LOAD&CONS&STORE 2)
99    (SKIP 1)
101   (LOAD&CDR&STORE 0)
103   L103
103   (LOAD&PUSH 0)
104   (CALLS1&JMPIFNOT 146 L62)           ; ENDP
107   (SKIP 1)
109   (LOAD&PUSH 0)
110   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
112   (SKIP 1)
114   (LIST* 3)
116   (SKIP&RET 6)


Disassembly of function #:|(DEFUN COLLISION-LOOKUP (OP ACTIVE-BITMASK KEY-BITMASK) ...)-65|
(CONST 0) = COLLISION-LOOKUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COLLISION-LOOKUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COLLISION-LOOKUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COLLISION-LOOKUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COLLISION-LOOKUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COLLISION-LOOKUP
8     (SKIP&RET 1)


Disassembly of function COLLISION-LOOKUP
(CONST 0) = KEYS
(CONST 1) = L
(CONST 2) = COLLISION-CHECK
(CONST 3) = PARSE-BUG-ERR
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
39 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALLSR&PUSH 2 61)                  ; LOGAND
5     (LOAD&PUSH 0)
6     (CALLS2 145)                        ; ZEROP
8     (NOT)
9     (JMPIFNOT1 L55)
11    (LOAD&PUSH 4)
12    (CONST&PUSH 0)                      ; KEYS
13    (PUSH-UNBOUND 1)
15    (CALLS2 132)                        ; GET
17    (BIND 1)                            ; L
19    (GETVALUE 1)                        ; L
21    (JMPIFNOT L43)
23    L23
23    (LOAD&PUSH 3)
24    (GETVALUE 1)                        ; L
26    (CAR)
27    (CDR&PUSH)
28    (CALLSR&PUSH 2 61)                  ; LOGAND
31    (CALLS2&JMPIFNOT 145 L49)           ; ZEROP
34    (GETVALUE 1)                        ; L
36    (CDR)
37    (SETVALUE 1)                        ; L
39    (GETVALUE 1)                        ; L
41    (JMPIF L23)
43    L43
43    (CONST&PUSH 2)                      ; COLLISION-CHECK
44    (CALL1 3)                           ; PARSE-BUG-ERR
46    L46
46    (UNBIND1)
47    (SKIP&RET 5)
49    L49
49    (GETVALUE 1)                        ; L
51    (CAR)
52    (CAR)
53    (JMP L46)
55    L55
55    (SKIP&RET 5)


Disassembly of function #:|(DEFUN COLLISION-CHECK (OP ACTIVE-BITMASK KEY) ...)-66|
(CONST 0) = COLLISION-CHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COLLISION-CHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COLLISION-CHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COLLISION-CHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COLLISION-CHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COLLISION-CHECK
8     (SKIP&RET 1)


Disassembly of function COLLISION-CHECK
(CONST 0) = "~A is an unknown keyword in a ~A statement."
(CONST 1) = MOPSTRIP
(CONST 2) = MREAD-SYNERR
(CONST 3) = COLLISION-LOOKUP
(CONST 4) = "This ~A's ~A slot is already filled."
(CONST 5) = "A ~A cannot have a ~A with a ~A field."
(CONST 6) = KEYS
(CONST 7) = ASSQ
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
47 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 1)
4     (CALLS2&PUSH 132)                   ; GET
6     (LOAD&JMPIF 0 L19)
9     (CONST&PUSH 0)                      ; "~A is an unknown keyword in a ~A statement."
10    (LOAD&PUSH 3)
11    (CALL1&PUSH 1)                      ; MOPSTRIP
13    (LOAD&PUSH 6)
14    (CALL1&PUSH 1)                      ; MOPSTRIP
16    (CALL 3 2)                          ; MREAD-SYNERR
19    L19
19    (LOAD&PUSH 4)
20    (LOAD&PUSH 4)
21    (LOAD&PUSH 2)
22    (CALL&PUSH 3 3)                     ; COLLISION-LOOKUP
25    (LOAD&JMPIFNOT 0 L45)
28    (PUSH)
29    (LOAD 4)
30    (JMPIFEQ L61)
32    (CONST&PUSH 5)                      ; "A ~A cannot have a ~A with a ~A field."
33    (LOAD&PUSH 6)
34    (CALL1&PUSH 1)                      ; MOPSTRIP
36    (LOAD&PUSH 5)
37    (CALL1&PUSH 1)                      ; MOPSTRIP
39    (LOAD&PUSH 3)
40    (CALL1&PUSH 1)                      ; MOPSTRIP
42    (CALL 4 2)                          ; MREAD-SYNERR
45    L45
45    (LOAD&PUSH 3)
46    (LOAD&PUSH 6)
47    (CONST&PUSH 6)                      ; KEYS
48    (PUSH-UNBOUND 1)
50    (CALLS2&PUSH 132)                   ; GET
52    (CALL2 7)                           ; ASSQ
54    (CDR&PUSH)
55    (LOAD&PUSH 5)
56    (CALLSR 2 59)                       ; LOGIOR
59    (SKIP&RET 6)
61    L61
61    (CONST&PUSH 4)                      ; "This ~A's ~A slot is already filled."
62    (LOAD&PUSH 6)
63    (CALL1&PUSH 1)                      ; MOPSTRIP
65    (LOAD&PUSH 5)
66    (CALL1&PUSH 1)                      ; MOPSTRIP
68    (CALL 3 2)                          ; MREAD-SYNERR
71    (JMP L45)


Disassembly of function #:|(DEFMFUN LBP (LEX) ...)-67|
(CONST 0) = LBP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LBP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LBP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LBP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LBP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LBP
8     (SKIP&RET 1)


Disassembly of function LBP
(CONST 0) = LBP
(CONST 1) = SAFE-GET
(CONST 2) = 200
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; LBP
2     (CALL2 1)                           ; SAFE-GET
4     (JMPIF1 L9)
6     (CONST 2)                           ; 200
7     (SKIP&RET 2)
9     L9
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO DEF-LBP (SYM VAL) ...)-68|
(CONST 0) = DEF-LBP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-LBP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-LBP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-LBP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-LBP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-LBP
10    (SKIP&RET 1)


Disassembly of function DEF-LBP
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DEFPROP
(CONST 3) = (LBP)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L23)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; DEFPROP
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 2)
18    (CONST 3)                           ; (LBP)
19    (LIST* 3)
21    (SKIP&RET 5)
23    L23
23    (LOAD&PUSH 2)
24    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RBP (LEX) ...)-69|
(CONST 0) = RBP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RBP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RBP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RBP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RBP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RBP
8     (SKIP&RET 1)


Disassembly of function RBP
(CONST 0) = RBP
(CONST 1) = SAFE-GET
(CONST 2) = 200
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; RBP
2     (CALL2 1)                           ; SAFE-GET
4     (JMPIF1 L9)
6     (CONST 2)                           ; 200
7     (SKIP&RET 2)
9     L9
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO DEF-RBP (SYM VAL) ...)-70|
(CONST 0) = DEF-RBP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-RBP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-RBP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-RBP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-RBP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-RBP
10    (SKIP&RET 1)


Disassembly of function DEF-RBP
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DEFPROP
(CONST 3) = (RBP)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L23)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; DEFPROP
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 2)
18    (CONST 3)                           ; (RBP)
19    (LIST* 3)
21    (SKIP&RET 5)
23    L23
23    (LOAD&PUSH 2)
24    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DEF-MATCH (X M) ...)-71|
(CONST 0) = DEF-MATCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-MATCH>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-MATCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-MATCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-MATCH>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-MATCH
10    (SKIP&RET 1)


Disassembly of function DEF-MATCH
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = X
(CONST 3) = M
(CONST 4) = DEFPROP
(CONST 5) = (MATCH)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (M X)
24 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L31)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; X
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR)
17    (BIND 3)                            ; M
19    (CONST&PUSH 4)                      ; DEFPROP
20    (GETVALUE&PUSH 2)                   ; X
22    (GETVALUE&PUSH 3)                   ; M
24    (CONST 5)                           ; (MATCH)
25    (LIST* 3)
27    (UNBIND 2)
29    (SKIP&RET 3)
31    L31
31    (LOAD&PUSH 2)
32    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
34    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LPOS (OP) ...)-72|
(CONST 0) = LPOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LPOS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LPOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LPOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LPOS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LPOS
8     (SKIP&RET 1)


Disassembly of function LPOS
(CONST 0) = LPOS
(CONST 1) = SAFE-GET
(CONST 2) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; LPOS
2     (CALL2 1)                           ; SAFE-GET
4     (JMPIF1 L9)
6     (CONST 2)                           ; $ANY
7     (SKIP&RET 2)
9     L9
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN RPOS (OP) ...)-73|
(CONST 0) = RPOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RPOS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RPOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RPOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RPOS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RPOS
8     (SKIP&RET 1)


Disassembly of function RPOS
(CONST 0) = RPOS
(CONST 1) = SAFE-GET
(CONST 2) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; RPOS
2     (CALL2 1)                           ; SAFE-GET
4     (JMPIF1 L9)
6     (CONST 2)                           ; $ANY
7     (SKIP&RET 2)
9     L9
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN POS (OP) ...)-74|
(CONST 0) = POS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POS
8     (SKIP&RET 1)


Disassembly of function POS
(CONST 0) = POS
(CONST 1) = SAFE-GET
(CONST 2) = $ANY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; POS
2     (CALL2 1)                           ; SAFE-GET
4     (JMPIF1 L9)
6     (CONST 2)                           ; $ANY
7     (SKIP&RET 2)
9     L9
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO DEF-POS (OP POS) ...)-75|
(CONST 0) = DEF-POS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-POS>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-POS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-POS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-POS>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-POS
10    (SKIP&RET 1)


Disassembly of function DEF-POS
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = POS
(CONST 3) = DEFPROP
(CONST 4) = (POS)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (POS)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L27)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR)
15    (BIND 2)                            ; POS
17    (CONST&PUSH 3)                      ; DEFPROP
18    (LOAD&PUSH 4)
19    (GETVALUE&PUSH 2)                   ; POS
21    (CONST 4)                           ; (POS)
22    (LIST* 3)
24    (UNBIND1)
25    (SKIP&RET 4)
27    L27
27    (LOAD&PUSH 2)
28    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
30    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DEF-RPOS (OP POS) ...)-76|
(CONST 0) = DEF-RPOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-RPOS>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-RPOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-RPOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-RPOS>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-RPOS
10    (SKIP&RET 1)


Disassembly of function DEF-RPOS
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = POS
(CONST 3) = DEFPROP
(CONST 4) = (RPOS)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (POS)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L27)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR)
15    (BIND 2)                            ; POS
17    (CONST&PUSH 3)                      ; DEFPROP
18    (LOAD&PUSH 4)
19    (GETVALUE&PUSH 2)                   ; POS
21    (CONST 4)                           ; (RPOS)
22    (LIST* 3)
24    (UNBIND1)
25    (SKIP&RET 4)
27    L27
27    (LOAD&PUSH 2)
28    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
30    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DEF-LPOS (OP POS) ...)-77|
(CONST 0) = DEF-LPOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-LPOS>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-LPOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-LPOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-LPOS>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-LPOS
10    (SKIP&RET 1)


Disassembly of function DEF-LPOS
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = POS
(CONST 3) = DEFPROP
(CONST 4) = (LPOS)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (POS)
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L27)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR)
15    (BIND 2)                            ; POS
17    (CONST&PUSH 3)                      ; DEFPROP
18    (LOAD&PUSH 4)
19    (GETVALUE&PUSH 2)                   ; POS
21    (CONST 4)                           ; (LPOS)
22    (LIST* 3)
24    (UNBIND1)
25    (SKIP&RET 4)
27    L27
27    (LOAD&PUSH 2)
28    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
30    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MHEADER (OP) ...)-78|
(CONST 0) = MHEADER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MHEADER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MHEADER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MHEADER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MHEADER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MHEADER
8     (SKIP&RET 1)


Disassembly of function MHEADER
(CONST 0) = MHEADER
(CONST 1) = SAFE-GET
(CONST 2) = ADD-LINEINFO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; MHEADER
2     (CALL2&JMPIF 1 L8)                  ; SAFE-GET
5     (LOAD&PUSH 1)
6     (NIL)
7     (CONS)
8     L8
8     (PUSH)
9     (CALL1 2)                           ; ADD-LINEINFO
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO DEF-MHEADER (OP HEADER) ...)-79|
(CONST 0) = DEF-MHEADER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-MHEADER>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-MHEADER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-MHEADER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-MHEADER>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-MHEADER
10    (SKIP&RET 1)


Disassembly of function DEF-MHEADER
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DEFPROP
(CONST 3) = (MHEADER)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L23)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 2)                      ; DEFPROP
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 2)
18    (CONST 3)                           ; (MHEADER)
19    (LIST* 3)
21    (SKIP&RET 5)
23    L23
23    (LOAD&PUSH 2)
24    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
26    (SKIP&RET 3)


Disassembly of function #:|(DEFMVAR $PARSEWINDOW 10 ...)-80-1|
(CONST 0) = $PARSEWINDOW
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 10
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PARSEWINDOW
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $PARSEWINDOW
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 10
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $PARSEWINDOW 10 ...)-80-2|
(CONST 0) = (SPECIAL $PARSEWINDOW)
(CONST 1) = $PARSEWINDOW
(CONST 2) = 10
(CONST 3) = VARIABLE
(CONST 4) = 
"The maximum number of 'lexical tokens' that are printed out on
each side of the error-point when a syntax (parsing) MAXIMA-ERROR occurs.  This
option is especially useful on slow terminals.  Setting it to -1 causes the
entire input string to be printed out when an MAXIMA-ERROR occurs."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PARSEWINDOW)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PARSEWINDOW
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PARSEWINDOW
8     (CONST&PUSH 2)                      ; 10
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $PARSEWINDOW
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "The maximum number of 'lexical tokens' that are printed out on
each side of the error-point when a syntax (parsing) MAXIMA-ERROR occurs.  This
option is especially useful on slow terminals.  Setting it to -1 causes the
entire input string to be printed out when an MAXIMA-ERROR occurs."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $PARSEWINDOW
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO DEF-OPERATORP NIL ...)-81|
(CONST 0) = DEF-OPERATORP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-OPERATORP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-OPERATORP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-OPERATORP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-OPERATORP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-OPERATORP
10    (SKIP&RET 1)


Disassembly of function DEF-OPERATORP
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DEFMFUN
(CONST 3) = OPERATORP
(CONST 4) = (LEX)
(CONST 5) = AND
(CONST 6) = (SYMBOLP LEX)
(CONST 7) = GETL
(CONST 8) = LEX
(CONST 9) = QUOTE
(CONST 10) = (NUD)
(CONST 11) = (LED)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L31)             ; >
8     (CONST&PUSH 2)                      ; DEFMFUN
9     (CONST&PUSH 3)                      ; OPERATORP
10    (CONST&PUSH 4)                      ; (LEX)
11    (CONST&PUSH 5)                      ; AND
12    (CONST&PUSH 6)                      ; (SYMBOLP LEX)
13    (CONST&PUSH 7)                      ; GETL
14    (CONST&PUSH 8)                      ; LEX
15    (CONST&PUSH 9)                      ; QUOTE
16    (CONST&PUSH 10)                     ; (NUD)
17    (CONST&PUSH 11)                     ; (LED)
18    (CALLSR&PUSH 2 34)                  ; APPEND
21    (LIST&PUSH 2)
23    (LIST&PUSH 3)
25    (LIST&PUSH 3)
27    (LIST 4)
29    (SKIP&RET 3)
31    L31
31    (LOAD&PUSH 2)
32    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
34    (SKIP&RET 3)


Disassembly of function #:|(DEF-OPERATORP)-82|
(CONST 0) = OPERATORP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OPERATORP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OPERATORP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OPERATORP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OPERATORP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OPERATORP
8     (SKIP&RET 1)


Disassembly of function OPERATORP
(CONST 0) = (NUD LED)
(CONST 1) = GETL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 6)                          ; SYMBOLP
3     (JMPIFNOT1 L11)
5     (LOAD&PUSH 1)
6     (CONST&PUSH 0)                      ; (NUD LED)
7     (CALL2 1)                           ; GETL
9     (SKIP&RET 2)
11    L11
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMACRO DEF-OPERATORP1 NIL ...)-83|
(CONST 0) = DEF-OPERATORP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-OPERATORP1>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-OPERATORP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-OPERATORP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-OPERATORP1>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-OPERATORP1
10    (SKIP&RET 1)


Disassembly of function DEF-OPERATORP1
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = DEFMFUN
(CONST 3) = OPERATORP1
(CONST 4) = (LEX)
(CONST 5) = AND
(CONST 6) = (SYMBOLP LEX)
(CONST 7) = GETL
(CONST 8) = LEX
(CONST 9) = QUOTE
(CONST 10) = LBP
(CONST 11) = RBP
(CONST 12) = (NUD)
(CONST 13) = (LED)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L35)             ; >
8     (CONST&PUSH 2)                      ; DEFMFUN
9     (CONST&PUSH 3)                      ; OPERATORP1
10    (CONST&PUSH 4)                      ; (LEX)
11    (CONST&PUSH 5)                      ; AND
12    (CONST&PUSH 6)                      ; (SYMBOLP LEX)
13    (CONST&PUSH 7)                      ; GETL
14    (CONST&PUSH 8)                      ; LEX
15    (CONST&PUSH 9)                      ; QUOTE
16    (CONST&PUSH 10)                     ; LBP
17    (CONST&PUSH 11)                     ; RBP
18    (CONST&PUSH 12)                     ; (NUD)
19    (CONST&PUSH 13)                     ; (LED)
20    (CALLSR 2 34)                       ; APPEND
23    (LIST*&PUSH 2)
25    (LIST&PUSH 2)
27    (LIST&PUSH 3)
29    (LIST&PUSH 3)
31    (LIST 4)
33    (SKIP&RET 3)
35    L35
35    (LOAD&PUSH 2)
36    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
38    (SKIP&RET 3)


Disassembly of function #:|(DEF-OPERATORP1)-84|
(CONST 0) = OPERATORP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OPERATORP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OPERATORP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OPERATORP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OPERATORP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OPERATORP1
8     (SKIP&RET 1)


Disassembly of function OPERATORP1
(CONST 0) = (LBP RBP NUD LED)
(CONST 1) = GETL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 6)                          ; SYMBOLP
3     (JMPIFNOT1 L11)
5     (LOAD&PUSH 1)
6     (CONST&PUSH 0)                      ; (LBP RBP NUD LED)
7     (CALL2 1)                           ; GETL
9     (SKIP&RET 2)
11    L11
11    (SKIP&RET 2)


Disassembly of function #:|(DEFVAR *CURRENT-LINE-INFO* NIL)-85|
(CONST 0) = (SPECIAL *CURRENT-LINE-INFO*)
(CONST 1) = *CURRENT-LINE-INFO*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *CURRENT-LINE-INFO*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *CURRENT-LINE-INFO*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *CURRENT-LINE-INFO*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *CURRENT-LINE-INFO*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN MREAD (&REST READ-ARGS) ...)-86|
(CONST 0) = MREAD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MREAD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MREAD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MREAD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MREAD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MREAD
8     (SKIP&RET 1)


Disassembly of function MREAD
(CONST 0) = *MREAD-PROMPT*
(CONST 1) = *PARSE-WINDOW*
(CONST 2) = MREAD-RAW
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (*PARSE-WINDOW* *MREAD-PROMPT*)
writes special variable : (*PARSE-WINDOW*)
18 byte-code instructions:
0     (GETVALUE 0)                        ; *MREAD-PROMPT*
2     (JMPIFNOT L23)
4     (GETVALUE 1)                        ; *PARSE-WINDOW*
6     (JMPIFNOT L17)
8     (PUSH)
9     (NIL&PUSH)
10    (CALLS1 169)                        ; SYSTEM::%RPLACA
12    (GETVALUE 1)                        ; *PARSE-WINDOW*
14    (CDR)
15    (SETVALUE 1)                        ; *PARSE-WINDOW*
17    L17
17    (GETVALUE&PUSH 0)                   ; *MREAD-PROMPT*
19    (PUSH-UNBOUND 1)
21    (CALLS1 132)                        ; PRINC
23    L23
23    (CONST&PUSH 2)                      ; MREAD-RAW
24    (LOAD 2)
25    (APPLY&SKIP&RET 0 2)


Disassembly of function #:|(DEFUN MREAD-PROMPTER (STREAM CHAR) ...)-87|
(CONST 0) = MREAD-PROMPTER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MREAD-PROMPTER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MREAD-PROMPTER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MREAD-PROMPTER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MREAD-PROMPTER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MREAD-PROMPTER
8     (SKIP&RET 1)


Disassembly of function MREAD-PROMPTER
(CONST 0) = *MREAD-PROMPT-INTERNAL*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*MREAD-PROMPT-INTERNAL*)
6 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS1 140)                        ; FRESH-LINE
3     (GETVALUE&PUSH 0)                   ; *MREAD-PROMPT-INTERNAL*
5     (LOAD&PUSH 3)
6     (CALLS1 132)                        ; PRINC
8     (SKIP&RET 3)


Disassembly of function #:|(DEFUN MREAD-RAW (*PARSE-STREAM* &OPTIONAL *MREAD-EOF-OBJ*) ...)-88|
(CONST 0) = MREAD-RAW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MREAD-RAW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MREAD-RAW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MREAD-RAW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MREAD-RAW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MREAD-RAW
8     (SKIP&RET 1)


Disassembly of function MREAD-RAW
(CONST 0) = *PARSE-STREAM*
(CONST 1) = *MREAD-EOF-OBJ*
(CONST 2) = SCAN-BUFFERED-TOKEN
(CONST 3) = *PARSE-TYI*
(CONST 4) = PEEK-ONE-TOKEN-G
(CONST 5) = $ANY
(CONST 6) = 0
(CONST 7) = PARSE
(CONST 8) = PEEK-ONE-TOKEN
(CONST 9) = #S(HASH-TABLE EQ ($&& . 10) ($$ . 31) (|$;| . 31))
(CONST 10) = *CURRENT-LINE-INFO*
(CONST 11) = SCAN-ONE-TOKEN
(CONST 12) = MHEADER
(CONST 13) = $[
(CONST 14) = "Invalid && tag. Tag must be a symbol"
(CONST 15) = MREAD-SYNERR
(CONST 16) = MREAD-RAW
(CONST 17) = PARSE-BUG-ERR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (*MREAD-EOF-OBJ* SCAN-BUFFERED-TOKEN)
writes special variable : (*CURRENT-LINE-INFO*)
66 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; *PARSE-STREAM*
3     (JMPIFBOUNDP 4 L7)
6     (NIL)
7     L7
7     (BIND 1)                            ; *MREAD-EOF-OBJ*
9     (NIL&PUSH)
10    (LIST 1)
12    (BIND 2)                            ; SCAN-BUFFERED-TOKEN
14    (NIL)
15    (BIND 3)                            ; *PARSE-TYI*
17    (GETVALUE&PUSH 2)                   ; SCAN-BUFFERED-TOKEN
19    (T&PUSH)
20    (GETVALUE&PUSH 2)                   ; SCAN-BUFFERED-TOKEN
22    (CALL2 4)                           ; PEEK-ONE-TOKEN-G
24    (JMPIFEQ L36)
26    (NIL&PUSH)
27    (CONST&PUSH 5)                      ; $ANY
28    (CONST&PUSH 6)                      ; 0
29    (CALL2&PUSH 7)                      ; PARSE
31    L31
31    (CALL0 8)                           ; PEEK-ONE-TOKEN
33    (JMPHASH 9 L56 L66 L66 L45)
36    L36
36    (GETVALUE 1)                        ; *MREAD-EOF-OBJ*
38    (JMP L90)
40    L40
40    (LOAD&PUSH 0)
41    (LOAD&CONS&STORE 1)
43    (JMP L59)
45    L45
45    (CALL0 11)                          ; SCAN-ONE-TOKEN
47    (LOAD&PUSH 0)
48    (CALLS2&JMPIF 6 L40)                ; SYMBOLP
51    (CONST&PUSH 14)                     ; "Invalid && tag. Tag must be a symbol"
52    (CALL1 15)                          ; MREAD-SYNERR
54    (JMP L59)
56    L56
56    (CONST&PUSH 16)                     ; MREAD-RAW
57    (CALL1 17)                          ; PARSE-BUG-ERR
59    L59
59    (CONST&PUSH 5)                      ; $ANY
60    (CONST&PUSH 6)                      ; 0
61    (CALL2 7)                           ; PARSE
63    (STORE 0)
64    (JMP L31)
66    L66
66    (NIL)
67    (SETVALUE 10)                       ; *CURRENT-LINE-INFO*
69    (CALL0 11)                          ; SCAN-ONE-TOKEN
71    (PUSH)
72    (CALL1&PUSH 12)                     ; MHEADER
74    (LOAD&JMPIFNOT 2 L84)
77    (CONST&PUSH 13)                     ; $[
78    (CALL1&PUSH 12)                     ; MHEADER
80    (LOAD&PUSH 3)
81    (CALLS2 73)                         ; NREVERSE
83    (CONS)
84    L84
84    (PUSH)
85    (LOAD&PUSH 2)
86    (LIST 3)
88    (SKIP 2)
90    L90
90    (UNBIND 4)
92    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PARSE (MODE RBP) ...)-89|
(CONST 0) = PARSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE
8     (SKIP&RET 1)


Disassembly of function PARSE
(CONST 0) = MODE
(CONST 1) = RBP
(CONST 2) = SCAN-ONE-TOKEN
(CONST 3) = NUD-CALL
(CONST 4) = PEEK-ONE-TOKEN
(CONST 5) = LBP
(CONST 6) = LED-CALL
(CONST 7) = CONVERT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MODE RBP)
26 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; MODE
3     (LOAD 4)
4     (BIND 1)                            ; RBP
6     (CALL0 2)                           ; SCAN-ONE-TOKEN
8     (PUSH)
9     (CALL1&PUSH 3)                      ; NUD-CALL
11    (JMP L20)
13    L13
13    (CALL0 2)                           ; SCAN-ONE-TOKEN
15    (PUSH)
16    (LOAD&PUSH 1)
17    (CALL2 6)                           ; LED-CALL
19    (STORE 0)
20    L20
20    (GETVALUE&PUSH 1)                   ; RBP
22    (CALL0 4)                           ; PEEK-ONE-TOKEN
24    (PUSH)
25    (CALL1&PUSH 5)                      ; LBP
27    (CALLSR&JMPIFNOT 1 50 L13)          ; >=
31    (LOAD&PUSH 0)
32    (GETVALUE&PUSH 0)                   ; MODE
34    (CALL2 7)                           ; CONVERT
36    (SKIP 1)
38    (UNBIND 2)
40    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PARSE-PREFIX (OP) ...)-90|
(CONST 0) = PARSE-PREFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-PREFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-PREFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-PREFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-PREFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-PREFIX
8     (SKIP&RET 1)


Disassembly of function PARSE-PREFIX
(CONST 0) = POS
(CONST 1) = MHEADER
(CONST 2) = RPOS
(CONST 3) = RBP
(CONST 4) = PARSE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; POS
3     (LOAD&PUSH 2)
4     (CALL1&PUSH 1)                      ; MHEADER
6     (LOAD&PUSH 3)
7     (CALL1&PUSH 2)                      ; RPOS
9     (LOAD&PUSH 4)
10    (CALL1&PUSH 3)                      ; RBP
12    (CALL2&PUSH 4)                      ; PARSE
14    (LIST 3)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PARSE-POSTFIX (OP L) ...)-91|
(CONST 0) = PARSE-POSTFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-POSTFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-POSTFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-POSTFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-POSTFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-POSTFIX
8     (SKIP&RET 1)


Disassembly of function PARSE-POSTFIX
(CONST 0) = L
(CONST 1) = POS
(CONST 2) = MHEADER
(CONST 3) = LPOS
(CONST 4) = CONVERT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (LOAD&PUSH 5)
4     (CALL1&PUSH 1)                      ; POS
6     (LOAD&PUSH 6)
7     (CALL1&PUSH 2)                      ; MHEADER
9     (GETVALUE&PUSH 0)                   ; L
11    (LOAD&PUSH 8)
12    (CALL1&PUSH 3)                      ; LPOS
14    (CALL2&PUSH 4)                      ; CONVERT
16    (LIST 3)
18    (UNBIND1)
19    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PARSE-INFIX (OP L) ...)-92|
(CONST 0) = PARSE-INFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-INFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-INFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-INFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-INFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-INFIX
8     (SKIP&RET 1)


Disassembly of function PARSE-INFIX
(CONST 0) = L
(CONST 1) = POS
(CONST 2) = MHEADER
(CONST 3) = LPOS
(CONST 4) = CONVERT
(CONST 5) = RPOS
(CONST 6) = RBP
(CONST 7) = PARSE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (LOAD&PUSH 5)
4     (CALL1&PUSH 1)                      ; POS
6     (LOAD&PUSH 6)
7     (CALL1&PUSH 2)                      ; MHEADER
9     (GETVALUE&PUSH 0)                   ; L
11    (LOAD&PUSH 8)
12    (CALL1&PUSH 3)                      ; LPOS
14    (CALL2&PUSH 4)                      ; CONVERT
16    (LOAD&PUSH 8)
17    (CALL1&PUSH 5)                      ; RPOS
19    (LOAD&PUSH 9)
20    (CALL1&PUSH 6)                      ; RBP
22    (CALL2&PUSH 7)                      ; PARSE
24    (LIST 4)
26    (UNBIND1)
27    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PARSE-NARY (OP L) ...)-93|
(CONST 0) = PARSE-NARY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-NARY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-NARY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-NARY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-NARY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-NARY
8     (SKIP&RET 1)


Disassembly of function PARSE-NARY
(CONST 0) = L
(CONST 1) = POS
(CONST 2) = MHEADER
(CONST 3) = LPOS
(CONST 4) = CONVERT
(CONST 5) = LBP
(CONST 6) = PRSNARY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (LOAD&PUSH 5)
4     (CALL1&PUSH 1)                      ; POS
6     (LOAD&PUSH 6)
7     (CALL1&PUSH 2)                      ; MHEADER
9     (GETVALUE&PUSH 0)                   ; L
11    (LOAD&PUSH 8)
12    (CALL1&PUSH 3)                      ; LPOS
14    (CALL2&PUSH 4)                      ; CONVERT
16    (LOAD&PUSH 8)
17    (LOAD&PUSH 9)
18    (CALL1&PUSH 3)                      ; LPOS
20    (LOAD&PUSH 10)
21    (CALL1&PUSH 5)                      ; LBP
23    (CALL 3 6)                          ; PRSNARY
26    (LIST* 3)
28    (UNBIND1)
29    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PARSE-MATCHFIX (OP) ...)-94|
(CONST 0) = PARSE-MATCHFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-MATCHFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-MATCHFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-MATCHFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-MATCHFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-MATCHFIX
8     (SKIP&RET 1)


Disassembly of function PARSE-MATCHFIX
(CONST 0) = POS
(CONST 1) = MHEADER
(CONST 2) = MATCH
(CONST 3) = SAFE-GET
(CONST 4) = LPOS
(CONST 5) = PRSMATCH
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; POS
3     (LOAD&PUSH 2)
4     (CALL1&PUSH 1)                      ; MHEADER
6     (LOAD&PUSH 3)
7     (CONST&PUSH 2)                      ; MATCH
8     (CALL2&PUSH 3)                      ; SAFE-GET
10    (LOAD&PUSH 4)
11    (CALL1&PUSH 4)                      ; LPOS
13    (CALL2 5)                           ; PRSMATCH
15    (LIST* 2)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PARSE-NOFIX (OP) ...)-95|
(CONST 0) = PARSE-NOFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-NOFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-NOFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-NOFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-NOFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-NOFIX
8     (SKIP&RET 1)


Disassembly of function PARSE-NOFIX
(CONST 0) = POS
(CONST 1) = MHEADER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; POS
3     (LOAD&PUSH 2)
4     (CALL1&PUSH 1)                      ; MHEADER
6     (LIST 2)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFUN PRSNARY (OP MODE RBP) ...)-96|
(CONST 0) = PRSNARY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRSNARY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRSNARY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRSNARY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRSNARY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRSNARY
8     (SKIP&RET 1)


Disassembly of function PRSNARY
(CONST 0) = MODE
(CONST 1) = RBP
(CONST 2) = PARSE
(CONST 3) = PEEK-ONE-TOKEN
(CONST 4) = SCAN-ONE-TOKEN
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RBP MODE)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; MODE
3     (LOAD 4)
4     (BIND 1)                            ; RBP
6     (GETVALUE&PUSH 0)                   ; MODE
8     (GETVALUE&PUSH 1)                   ; RBP
10    (CALL2&PUSH 2)                      ; PARSE
12    (LIST&PUSH 1)
14    (JMP L26)
16    L16
16    (CALL0 4)                           ; SCAN-ONE-TOKEN
18    (GETVALUE&PUSH 0)                   ; MODE
20    (GETVALUE&PUSH 1)                   ; RBP
22    (CALL2&PUSH 2)                      ; PARSE
24    (LOAD&CONS&STORE 0)
26    L26
26    (LOAD&PUSH 10)
27    (CALL0 3)                           ; PEEK-ONE-TOKEN
29    (JMPIFEQ L16)
31    (LOAD&PUSH 0)
32    (CALLS2 73)                         ; NREVERSE
34    (SKIP 1)
36    (UNBIND 2)
38    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PRSMATCH (MATCH MODE) ...)-97|
(CONST 0) = PRSMATCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRSMATCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRSMATCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRSMATCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRSMATCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRSMATCH
8     (SKIP&RET 1)


Disassembly of function PRSMATCH
(CONST 0) = MODE
(CONST 1) = PEEK-ONE-TOKEN
(CONST 2) = SCAN-ONE-TOKEN
(CONST 3) = 10
(CONST 4) = PARSE
(CONST 5) = |$,|
(CONST 6) = "Missing ~A"
(CONST 7) = MOPSTRIP
(CONST 8) = MREAD-SYNERR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (MODE)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; MODE
3     (LOAD&PUSH 5)
4     (CALL0 1)                           ; PEEK-ONE-TOKEN
6     (JMPIFEQ L17)
8     (GETVALUE&PUSH 0)                   ; MODE
10    (CONST&PUSH 3)                      ; 10
11    (CALL2&PUSH 4)                      ; PARSE
13    (LIST&PUSH 1)
15    (JMP L45)
17    L17
17    (CALL0 2)                           ; SCAN-ONE-TOKEN
19    (NIL)
20    (JMP L57)
22    L22
22    (CALL0 2)                           ; SCAN-ONE-TOKEN
24    (JMP L38)
26    L26
26    (CALL0 1)                           ; PEEK-ONE-TOKEN
28    (PUSH)
29    (JMPIFEQTO 5 L22)                   ; |$,|
32    (CONST&PUSH 6)                      ; "Missing ~A"
33    (LOAD&PUSH 7)
34    (CALL1&PUSH 7)                      ; MOPSTRIP
36    (CALL2 8)                           ; MREAD-SYNERR
38    L38
38    (GETVALUE&PUSH 0)                   ; MODE
40    (CONST&PUSH 3)                      ; 10
41    (CALL2&PUSH 4)                      ; PARSE
43    (LOAD&CONS&STORE 0)
45    L45
45    (LOAD&PUSH 6)
46    (CALL0 1)                           ; PEEK-ONE-TOKEN
48    (JMPIFNOTEQ L26)
50    (CALL0 2)                           ; SCAN-ONE-TOKEN
52    (LOAD&PUSH 0)
53    (CALLS2 73)                         ; NREVERSE
55    (SKIP 1)
57    L57
57    (UNBIND1)
58    (SKIP&RET 3)


Disassembly of function #:|(DEFUN CONVERT (ITEM MODE) ...)-98|
(CONST 0) = CONVERT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONVERT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONVERT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONVERT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONVERT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONVERT
8     (SKIP&RET 1)


Disassembly of function CONVERT
(CONST 0) = MODE
(CONST 1) = $ANY
(CONST 2) = "Found ~A expression where ~A expression expected"
(CONST 3) = ENGLISH
(CONST 4) = MREAD-SYNERR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (MODE)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; MODE
3     (GETVALUE&PUSH 0)                   ; MODE
5     (LOAD 6)
6     (CAR)
7     (JMPIFEQ L40)
9     (GETVALUE&PUSH 0)                   ; MODE
11    (JMPIFEQTO 1 L40)                   ; $ANY
14    (LOAD&CAR&PUSH 5)
16    (JMPIFEQTO 1 L40)                   ; $ANY
19    (CONST&PUSH 2)                      ; "Found ~A expression where ~A expression expected"
20    (LOAD&CAR&PUSH 6)
22    (CONST&PUSH 3)                      ; ENGLISH
23    (PUSH-UNBOUND 1)
25    (CALLS2&PUSH 132)                   ; GET
27    (GETVALUE&PUSH 0)                   ; MODE
29    (CONST&PUSH 3)                      ; ENGLISH
30    (PUSH-UNBOUND 1)
32    (CALLS2&PUSH 132)                   ; GET
34    (CALL 3 4)                          ; MREAD-SYNERR
37    L37
37    (UNBIND1)
38    (SKIP&RET 3)
40    L40
40    (LOAD 5)
41    (CDR)
42    (JMP L37)


Disassembly of function #:|(DEFPROP $ANY "untyped" ...)-99|
(CONST 0) = $ANY
(CONST 1) = ENGLISH
(CONST 2) = "untyped"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ANY
1     (CONST&PUSH 1)                      ; ENGLISH
2     (CONST&PUSH 2)                      ; "untyped"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $CLAUSE "logical" ...)-100|
(CONST 0) = $CLAUSE
(CONST 1) = ENGLISH
(CONST 2) = "logical"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CLAUSE
1     (CONST&PUSH 1)                      ; ENGLISH
2     (CONST&PUSH 2)                      ; "logical"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $EXPR "algebraic" ...)-101|
(CONST 0) = $EXPR
(CONST 1) = ENGLISH
(CONST 2) = "algebraic"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPR
1     (CONST&PUSH 1)                      ; ENGLISH
2     (CONST&PUSH 2)                      ; "algebraic"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PARSE-ERR NIL ...)-102|
(CONST 0) = PARSE-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-ERR
8     (SKIP&RET 1)


Disassembly of function PARSE-ERR
(CONST 0) = "Syntax error"
(CONST 1) = MREAD-SYNERR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Syntax error"
1     (CALL1 1)                           ; MREAD-SYNERR
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PARSE-BUG-ERR (OP) ...)-103|
(CONST 0) = PARSE-BUG-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-BUG-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-BUG-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-BUG-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-BUG-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-BUG-ERR
8     (SKIP&RET 1)


Disassembly of function PARSE-BUG-ERR
(CONST 0) = 
"Parser bug in ~A. Please report this to the Macsyma maintainers,~
   ~%including the characters you just typed which caused the error. Thanks."
(CONST 1) = MOPSTRIP
(CONST 2) = MREAD-SYNERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Parser bug in ~A. Please report this to the Macsyma maintainers,~
   ~%including the characters you just typed which caused the error. Thanks."
1     (LOAD&PUSH 2)
2     (CALL1&PUSH 1)                      ; MOPSTRIP
4     (CALL2 2)                           ; MREAD-SYNERR
6     (SKIP&RET 2)


Disassembly of function #:|(DEFUN DELIM-ERR (OP) ...)-104|
(CONST 0) = DELIM-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DELIM-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DELIM-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DELIM-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DELIM-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DELIM-ERR
8     (SKIP&RET 1)


Disassembly of function DELIM-ERR
(CONST 0) = "Illegal use of delimiter ~A"
(CONST 1) = MOPSTRIP
(CONST 2) = MREAD-SYNERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Illegal use of delimiter ~A"
1     (LOAD&PUSH 2)
2     (CALL1&PUSH 1)                      ; MOPSTRIP
4     (CALL2 2)                           ; MREAD-SYNERR
6     (SKIP&RET 2)


Disassembly of function #:|(DEFUN ERB-ERR (OP L) ...)-105|
(CONST 0) = ERB-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERB-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERB-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERB-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERB-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERB-ERR
8     (SKIP&RET 1)


Disassembly of function ERB-ERR
(CONST 0) = L
(CONST 1) = "Too many ~A's"
(CONST 2) = MOPSTRIP
(CONST 3) = MREAD-SYNERR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&PUSH 1)                      ; "Too many ~A's"
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; MOPSTRIP
7     (CALL2 3)                           ; MREAD-SYNERR
9     (UNBIND1)
10    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PREMTERM-ERR (OP) ...)-106|
(CONST 0) = PREMTERM-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PREMTERM-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PREMTERM-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PREMTERM-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PREMTERM-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PREMTERM-ERR
8     (SKIP&RET 1)


Disassembly of function PREMTERM-ERR
(CONST 0) = "Premature termination of input at ~A."
(CONST 1) = MOPSTRIP
(CONST 2) = MREAD-SYNERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Premature termination of input at ~A."
1     (LOAD&PUSH 2)
2     (CALL1&PUSH 1)                      ; MOPSTRIP
4     (CALL2 2)                           ; MREAD-SYNERR
6     (SKIP&RET 2)


Disassembly of function #:|(DEF-NUD-EQUIV $] DELIM-ERR)-107|
(CONST 0) = $]
(CONST 1) = DELIM-ERR
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $]
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; DELIM-ERR
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $] ERB-ERR)-108|
(CONST 0) = $]
(CONST 1) = ERB-ERR
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $]
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; ERB-ERR
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $] 5)-109|
(CONST 0) = $]
(CONST 1) = LBP
(CONST 2) = 5
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $]
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 5
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $[ PARSE-MATCHFIX)-110|
(CONST 0) = $[
(CONST 1) = PARSE-MATCHFIX
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $[
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-MATCHFIX
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-MATCH $[ $])-111|
(CONST 0) = $[
(CONST 1) = MATCH
(CONST 2) = $]
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $[
1     (CONST&PUSH 1)                      ; MATCH
2     (CONST&PUSH 2)                      ; $]
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $[ 200)-112|
(CONST 0) = $[
(CONST 1) = LBP
(CONST 2) = 200
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $[
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 200
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $[ (MLIST))-113|
(CONST 0) = $[
(CONST 1) = MHEADER
(CONST 2) = (MLIST)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $[
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MLIST)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $[ $ANY)-114|
(CONST 0) = $[
(CONST 1) = POS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $[
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $[ $ANY)-115|
(CONST 0) = $[
(CONST 1) = LPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $[
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED ($[ 200) (OP LEFT) ...)-116-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-LED ($[ 200) (OP LEFT) ...)-116-2-2-1|>
(CONST 1) = $[
(CONST 2) = LED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-LED ($[ 200) (OP LEFT) ...)-116-2-2-1|>
1     (CONST&PUSH 1)                      ; $[
2     (CONST&PUSH 2)                      ; LED
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED ($[ 200) (OP LEFT) ...)-116-2-2-1|
(CONST 0) = $ANY
(CONST 1) = CONVERT
(CONST 2) = PARSE-ERR
(CONST 3) = AMPERCHK
(CONST 4) = ARRAY
(CONST 5) = ADD-LINEINFO
(CONST 6) = (MQAPPLY ARRAY)
(CONST 7) = $]
(CONST 8) = PRSMATCH
(CONST 9) = RIGHT
(CONST 10) = "No subscripts given"
(CONST 11) = MREAD-SYNERR
(CONST 12) = ALIASLOOKUP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RIGHT)
writes special variable : (RIGHT)
52 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; $ANY
2     (CALL2 1)                           ; CONVERT
4     (STORE 1)
5     (PUSH)
6     (CALLS2&JMPIFNOT 8 L11)             ; NUMBERP
9     (CALL0 2)                           ; PARSE-ERR
11    L11
11    (LOAD 1)
12    (JMPIFATOM L42)
14    (CONST 6)                           ; (MQAPPLY ARRAY)
15    L15
15    (PUSH)
16    (CALL1&PUSH 5)                      ; ADD-LINEINFO
18    (CONST&PUSH 7)                      ; $]
19    (CONST&PUSH 0)                      ; $ANY
20    (CALL2 8)                           ; PRSMATCH
22    (BIND 9)                            ; RIGHT
24    (GETVALUE 9)                        ; RIGHT
26    (JMPIFNOT L50)
28    (LOAD 5)
29    (JMPIFATOM L55)
31    (CONST&PUSH 0)                      ; $ANY
32    (LOAD&PUSH 4)
33    (LOAD&PUSH 7)
34    (GETVALUE 9)                        ; RIGHT
36    (CONS)
37    (CONS)
38    (CONS)
39    L39
39    (UNBIND1)
40    (SKIP&RET 4)
42    L42
42    (LOAD&PUSH 1)
43    (CALL1&PUSH 3)                      ; AMPERCHK
45    (CONST&PUSH 4)                      ; ARRAY
46    (LIST 2)
48    (JMP L15)
50    L50
50    (CONST&PUSH 10)                     ; "No subscripts given"
51    (CALL1 11)                          ; MREAD-SYNERR
53    (JMP L39)
55    L55
55    (LOAD&PUSH 3)
56    (GETVALUE 9)                        ; RIGHT
58    (CONS)
59    (SETVALUE 9)                        ; RIGHT
61    (CONST&PUSH 0)                      ; $ANY
62    (GETVALUE&PUSH 9)                   ; RIGHT
64    (CALL1 12)                          ; ALIASLOOKUP
66    (CONS)
67    (JMP L39)


Disassembly of function #:|(DEF-LED ($[ 200) (OP LEFT) ...)-116-3|
(CONST 0) = $[
(CONST 1) = 200
(CONST 2) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $[
1     (CONST&PUSH 1)                      ; 200
2     (NIL&PUSH)
3     (CALL 3 2)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV \|$)\| DELIM-ERR)-117|
(CONST 0) = |$)|
(CONST 1) = DELIM-ERR
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$)|
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; DELIM-ERR
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV \|$)\| ERB-ERR)-118|
(CONST 0) = |$)|
(CONST 1) = ERB-ERR
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$)|
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; ERB-ERR
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP \|$)\| 5)-119|
(CONST 0) = |$)|
(CONST 1) = LBP
(CONST 2) = 5
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$)|
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 5
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER \|$(\| (MPROGN))-120|
(CONST 0) = |$(|
(CONST 1) = MHEADER
(CONST 2) = (MPROGN)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$(|
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MPROGN)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD (\|$(\| 200) (OP) ...)-121-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-NUD (\|$(\| 200) (OP) ...)-121-2-2-1|>
(CONST 1) = |$(|
(CONST 2) = NUD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-NUD (\|$(\| 200) (OP) ...)-121-2-2-1|>
1     (CONST&PUSH 1)                      ; |$(|
2     (CONST&PUSH 2)                      ; NUD
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD (\|$(\| 200) (OP) ...)-121-2-2-1|
(CONST 0) = |$(|
(CONST 1) = MHEADER
(CONST 2) = RIGHT
(CONST 3) = PEEK-ONE-TOKEN
(CONST 4) = |$)|
(CONST 5) = PARSE-ERR
(CONST 6) = $ANY
(CONST 7) = PRSMATCH
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RIGHT)
writes special variable : (RIGHT)
33 byte-code instructions:
0     (NIL&PUSH)
1     (CONST&PUSH 0)                      ; |$(|
2     (CALL1&PUSH 1)                      ; MHEADER
4     (LOAD 1)
5     (BIND 2)                            ; RIGHT
7     (CALL0 3)                           ; PEEK-ONE-TOKEN
9     (PUSH)
10    (JMPIFEQTO 4 L34)                   ; |$)|
13    (CONST&PUSH 4)                      ; |$)|
14    (CONST&PUSH 6)                      ; $ANY
15    (CALL2 7)                           ; PRSMATCH
17    (SETVALUE 2)                        ; RIGHT
19    (JMPIFNOT L38)
21    (GETVALUE 2)                        ; RIGHT
23    (CDR)
24    (JMPIF L38)
26    (CONST&PUSH 6)                      ; $ANY
27    (GETVALUE 2)                        ; RIGHT
29    (CAR)
30    (CONS)
31    L31
31    (UNBIND1)
32    (SKIP&RET 4)
34    L34
34    (CALL0 5)                           ; PARSE-ERR
36    (JMP L31)
38    L38
38    (CONST&PUSH 6)                      ; $ANY
39    (LOAD&PUSH 4)
40    (GETVALUE 2)                        ; RIGHT
42    (CONS)
43    (CONS)
44    (JMP L31)


Disassembly of function #:|(DEF-NUD (\|$(\| 200) (OP) ...)-121-3|
(CONST 0) = |$(|
(CONST 1) = 200
(CONST 2) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$(|
1     (CONST&PUSH 1)                      ; 200
2     (NIL&PUSH)
3     (CALL 3 2)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED (\|$(\| 200) (OP LEFT) ...)-122-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-LED (\|$(\| 200) (OP LEFT) ...)-122-2-2-1|>
(CONST 1) = |$(|
(CONST 2) = LED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-LED (\|$(\| 200) (OP LEFT) ...)-122-2-2-1|>
1     (CONST&PUSH 1)                      ; |$(|
2     (CONST&PUSH 2)                      ; LED
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED (\|$(\| 200) (OP LEFT) ...)-122-2-2-1|
(CONST 0) = $ANY
(CONST 1) = CONVERT
(CONST 2) = PARSE-ERR
(CONST 3) = AMPERCHK
(CONST 4) = MHEADER
(CONST 5) = |$)|
(CONST 6) = PRSMATCH
(CONST 7) = (MQAPPLY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
34 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; $ANY
2     (CALL2 1)                           ; CONVERT
4     (STORE 1)
5     (PUSH)
6     (CALLS2&JMPIFNOT 8 L11)             ; NUMBERP
9     (CALL0 2)                           ; PARSE-ERR
11    L11
11    (LOAD&PUSH 1)
12    (CALLS2&JMPIFNOT 5 L20)             ; ATOM
15    (LOAD&PUSH 1)
16    (CALL1&PUSH 3)                      ; AMPERCHK
18    (CALL1 4)                           ; MHEADER
20    L20
20    (PUSH)
21    (CONST&PUSH 5)                      ; |$)|
22    (CONST&PUSH 0)                      ; $ANY
23    (CALL2&PUSH 6)                      ; PRSMATCH
25    (CONST&PUSH 0)                      ; $ANY
26    (LOAD 4)
27    (JMPIFATOM L37)
29    (CONST&PUSH 7)                      ; (MQAPPLY)
30    (LOAD&PUSH 5)
31    (LOAD 3)
32    (CONS)
33    (CONS)
34    L34
34    (CONS)
35    (SKIP&RET 5)
37    L37
37    (LOAD&PUSH 2)
38    (LOAD 2)
39    (CONS)
40    (JMP L34)


Disassembly of function #:|(DEF-LED (\|$(\| 200) (OP LEFT) ...)-122-3|
(CONST 0) = |$(|
(CONST 1) = 200
(CONST 2) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$(|
1     (CONST&PUSH 1)                      ; 200
2     (NIL&PUSH)
3     (CALL 3 2)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER \|$'\| (MQUOTE))-123|
(CONST 0) = |$'|
(CONST 1) = MHEADER
(CONST 2) = (MQUOTE)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$'|
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MQUOTE)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD (\|$'\|) (OP) ...)-124-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-NUD (\|$'\|) (OP) ...)-124-2-2-1|>
(CONST 1) = |$'|
(CONST 2) = NUD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-NUD (\|$'\|) (OP) ...)-124-2-2-1|>
1     (CONST&PUSH 1)                      ; |$'|
2     (CONST&PUSH 2)                      ; NUD
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD (\|$'\|) (OP) ...)-124-2-2-1|
(CONST 0) = RIGHT
(CONST 1) = PEEK-ONE-TOKEN
(CONST 2) = |$(|
(CONST 3) = $ANY
(CONST 4) = |$'|
(CONST 5) = MHEADER
(CONST 6) = 190
(CONST 7) = PARSE
(CONST 8) = (MQUOTE MLIST MPROG MPROGN LAMBDA)
(CONST 9) = MEMQ
(CONST 10) = MQAPPLY
(CONST 11) = LAMBDA
(CONST 12) = $NOUNIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RIGHT)
writes special variable : (RIGHT)
89 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; RIGHT
3     (CALL0 1)                           ; PEEK-ONE-TOKEN
5     (PUSH)
6     (JMPIFEQTO 2 L54)                   ; |$(|
9     (CONST&PUSH 3)                      ; $ANY
10    (CONST&PUSH 6)                      ; 190
11    (CALL2 7)                           ; PARSE
13    (SETVALUE 0)                        ; RIGHT
15    (JMPIFATOM L64)
17    (GETVALUE 0)                        ; RIGHT
19    (CAR)
20    (CAR&PUSH)
21    (CONST&PUSH 8)                      ; (MQUOTE MLIST MPROG MPROGN LAMBDA)
22    (CALL2&JMPIF 9 L64)                 ; MEMQ
25    (GETVALUE 0)                        ; RIGHT
27    (CAR)
28    (CAR&PUSH)
29    (JMPIFNOTEQTO 10 L100)              ; MQAPPLY
33    (GETVALUE 0)                        ; RIGHT
35    (CDR)
36    (CAR)
37    (CAR)
38    (CAR&PUSH)
39    (JMPIFNOTEQTO 11 L68)               ; LAMBDA
42    (CONST&PUSH 3)                      ; $ANY
43    (CONST 4)                           ; |$'|
44    L44
44    (PUSH)
45    (CALL1&PUSH 5)                      ; MHEADER
47    (GETVALUE 0)                        ; RIGHT
49    L49
49    (PUSH)
50    (LIST 3)
52    (JMP L117)
54    L54
54    (CONST&PUSH 3)                      ; $ANY
55    (CONST&PUSH 4)                      ; |$'|
56    (CALL1&PUSH 5)                      ; MHEADER
58    (CONST&PUSH 3)                      ; $ANY
59    (CONST&PUSH 6)                      ; 190
60    (CALL2 7)                           ; PARSE
62    (JMP L49)
64    L64
64    (CONST&PUSH 3)                      ; $ANY
65    (CONST 4)                           ; |$'|
66    (JMP L44)
68    L68
68    (GETVALUE 0)                        ; RIGHT
70    (CDR&PUSH)
71    (GETVALUE 0)                        ; RIGHT
73    (CDR)
74    (CAR)
75    (CAR)
76    (CAR&PUSH)
77    (CALL1&PUSH 12)                     ; $NOUNIFY
79    (GETVALUE 0)                        ; RIGHT
81    (CDR)
82    (CAR)
83    (CAR)
84    (CDR)
85    (CONS&PUSH)
86    (GETVALUE 0)                        ; RIGHT
88    (CDR)
89    (CAR)
90    (CDR)
91    (CONS&PUSH)
92    (CALLS1 168)                        ; RPLACA
94    (CONST&PUSH 3)                      ; $ANY
95    (GETVALUE 0)                        ; RIGHT
97    (CONS)
98    (JMP L117)
100   L100
100   (CONST&PUSH 3)                      ; $ANY
101   (GETVALUE 0)                        ; RIGHT
103   (CAR)
104   (CAR&PUSH)
105   (CALL1&PUSH 12)                     ; $NOUNIFY
107   (GETVALUE 0)                        ; RIGHT
109   (CAR)
110   (CDR)
111   (CONS&PUSH)
112   (GETVALUE 0)                        ; RIGHT
114   (CDR)
115   (CONS)
116   (CONS)
117   L117
117   (UNBIND1)
118   (SKIP&RET 2)


Disassembly of function #:|(DEF-NUD (\|$'\|) (OP) ...)-124-3|
(CONST 0) = |$'|
(CONST 1) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$'|
1     (PUSH-NIL 2)
3     (CALL 3 1)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD (\|$''\|) (OP) ...)-125-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-NUD (\|$''\|) (OP) ...)-125-2-2-1|>
(CONST 1) = |$''|
(CONST 2) = NUD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-NUD (\|$''\|) (OP) ...)-125-2-2-1|>
1     (CONST&PUSH 1)                      ; |$''|
2     (CONST&PUSH 2)                      ; NUD
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD (\|$''\|) (OP) ...)-125-2-2-1|
(CONST 0) = RIGHT
(CONST 1) = $ANY
(CONST 2) = PEEK-ONE-TOKEN
(CONST 3) = |$(|
(CONST 4) = 190
(CONST 5) = PARSE
(CONST 6) = MEVAL
(CONST 7) = MEVAL1
(CONST 8) = MQAPPLY
(CONST 9) = $VERBIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RIGHT)
writes special variable : (RIGHT)
63 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; RIGHT
3     (CONST&PUSH 1)                      ; $ANY
4     (CALL0 2)                           ; PEEK-ONE-TOKEN
6     (PUSH)
7     (JMPIFEQTO 3 L44)                   ; |$(|
10    (CONST&PUSH 1)                      ; $ANY
11    (CONST&PUSH 4)                      ; 190
12    (CALL2 5)                           ; PARSE
14    (SETVALUE 0)                        ; RIGHT
16    (JMPIFATOM L52)
18    (GETVALUE 0)                        ; RIGHT
20    (CAR)
21    (CAR&PUSH)
22    (JMPIFEQTO 8 L58)                   ; MQAPPLY
25    (GETVALUE 0)                        ; RIGHT
27    (CAR)
28    (CAR&PUSH)
29    (CALL1&PUSH 9)                      ; $VERBIFY
31    (GETVALUE 0)                        ; RIGHT
33    (CAR)
34    (CDR)
35    (CONS&PUSH)
36    (GETVALUE 0)                        ; RIGHT
38    (CDR)
39    (CONS)
40    L40
40    (CONS)
41    (UNBIND1)
42    (SKIP&RET 2)
44    L44
44    (CONST&PUSH 1)                      ; $ANY
45    (CONST&PUSH 4)                      ; 190
46    (CALL2&PUSH 5)                      ; PARSE
48    (CALL1 6)                           ; MEVAL
50    (JMP L40)
52    L52
52    (GETVALUE&PUSH 0)                   ; RIGHT
54    (CALL1 7)                           ; MEVAL1
56    (JMP L40)
58    L58
58    (GETVALUE 0)                        ; RIGHT
60    (CDR&PUSH)
61    (GETVALUE 0)                        ; RIGHT
63    (CDR)
64    (CAR)
65    (CAR)
66    (CAR&PUSH)
67    (CALL1&PUSH 9)                      ; $VERBIFY
69    (GETVALUE 0)                        ; RIGHT
71    (CDR)
72    (CAR)
73    (CAR)
74    (CDR)
75    (CONS&PUSH)
76    (GETVALUE 0)                        ; RIGHT
78    (CDR)
79    (CAR)
80    (CDR)
81    (CONS&PUSH)
82    (CALLS1 168)                        ; RPLACA
84    (GETVALUE 0)                        ; RIGHT
86    (JMP L40)


Disassembly of function #:|(DEF-NUD (\|$''\|) (OP) ...)-125-3|
(CONST 0) = |$''|
(CONST 1) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$''|
1     (PUSH-NIL 2)
3     (CALL 3 1)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV \|$:\| PARSE-INFIX)-126|
(CONST 0) = |$:|
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:|
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP \|$:\| 180)-127|
(CONST 0) = |$:|
(CONST 1) = LBP
(CONST 2) = 180
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:|
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 180
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP \|$:\| 20)-128|
(CONST 0) = |$:|
(CONST 1) = RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:|
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS \|$:\| $ANY)-129|
(CONST 0) = |$:|
(CONST 1) = POS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:|
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS \|$:\| $ANY)-130|
(CONST 0) = |$:|
(CONST 1) = RPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:|
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS \|$:\| $ANY)-131|
(CONST 0) = |$:|
(CONST 1) = LPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:|
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER \|$:\| (MSETQ))-132|
(CONST 0) = |$:|
(CONST 1) = MHEADER
(CONST 2) = (MSETQ)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:|
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MSETQ)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV \|$::\| PARSE-INFIX)-133|
(CONST 0) = |$::|
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::|
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP \|$::\| 180)-134|
(CONST 0) = |$::|
(CONST 1) = LBP
(CONST 2) = 180
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::|
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 180
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP \|$::\| 20)-135|
(CONST 0) = |$::|
(CONST 1) = RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::|
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS \|$::\| $ANY)-136|
(CONST 0) = |$::|
(CONST 1) = POS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::|
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS \|$::\| $ANY)-137|
(CONST 0) = |$::|
(CONST 1) = RPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::|
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS \|$::\| $ANY)-138|
(CONST 0) = |$::|
(CONST 1) = LPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::|
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER \|$::\| (MSET))-139|
(CONST 0) = |$::|
(CONST 1) = MHEADER
(CONST 2) = (MSET)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::|
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MSET)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV \|$:=\| PARSE-INFIX)-140|
(CONST 0) = |$:=|
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:=|
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP \|$:=\| 180)-141|
(CONST 0) = |$:=|
(CONST 1) = LBP
(CONST 2) = 180
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:=|
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 180
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP \|$:=\| 20)-142|
(CONST 0) = |$:=|
(CONST 1) = RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:=|
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS \|$:=\| $ANY)-143|
(CONST 0) = |$:=|
(CONST 1) = POS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:=|
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS \|$:=\| $ANY)-144|
(CONST 0) = |$:=|
(CONST 1) = RPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:=|
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS \|$:=\| $ANY)-145|
(CONST 0) = |$:=|
(CONST 1) = LPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:=|
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER \|$:=\| (MDEFINE))-146|
(CONST 0) = |$:=|
(CONST 1) = MHEADER
(CONST 2) = (MDEFINE)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$:=|
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MDEFINE)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV \|$::=\| PARSE-INFIX)-147|
(CONST 0) = |$::=|
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::=|
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP \|$::=\| 180)-148|
(CONST 0) = |$::=|
(CONST 1) = LBP
(CONST 2) = 180
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::=|
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 180
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP \|$::=\| 20)-149|
(CONST 0) = |$::=|
(CONST 1) = RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::=|
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS \|$::=\| $ANY)-150|
(CONST 0) = |$::=|
(CONST 1) = POS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::=|
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS \|$::=\| $ANY)-151|
(CONST 0) = |$::=|
(CONST 1) = RPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::=|
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS \|$::=\| $ANY)-152|
(CONST 0) = |$::=|
(CONST 1) = LPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::=|
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER \|$::=\| (MDEFMACRO))-153|
(CONST 0) = |$::=|
(CONST 1) = MHEADER
(CONST 2) = (MDEFMACRO)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$::=|
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MDEFMACRO)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $! PARSE-POSTFIX)-154|
(CONST 0) = $!
(CONST 1) = PARSE-POSTFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $!
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-POSTFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $! 160)-155|
(CONST 0) = $!
(CONST 1) = LBP
(CONST 2) = 160
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $!
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 160
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $! $EXPR)-156|
(CONST 0) = $!
(CONST 1) = POS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $!
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $! $EXPR)-157|
(CONST 0) = $!
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $!
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $! (MFACTORIAL))-158|
(CONST 0) = $!
(CONST 1) = MHEADER
(CONST 2) = (MFACTORIAL)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $!
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MFACTORIAL)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $!! ($GENFACT))-159|
(CONST 0) = $!!
(CONST 1) = MHEADER
(CONST 2) = ($GENFACT)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $!!
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; ($GENFACT)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED ($!! 160) (OP LEFT) ...)-160-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-LED ($!! 160) (OP LEFT) ...)-160-2-2-1|>
(CONST 1) = $!!
(CONST 2) = LED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-LED ($!! 160) (OP LEFT) ...)-160-2-2-1|>
1     (CONST&PUSH 1)                      ; $!!
2     (CONST&PUSH 2)                      ; LED
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED ($!! 160) (OP LEFT) ...)-160-2-2-1|
(CONST 0) = $EXPR
(CONST 1) = $!!
(CONST 2) = MHEADER
(CONST 3) = CONVERT
(CONST 4) = $/
(CONST 5) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPR
1     (CONST&PUSH 1)                      ; $!!
2     (CALL1&PUSH 2)                      ; MHEADER
4     (LOAD&PUSH 3)
5     (CONST&PUSH 0)                      ; $EXPR
6     (CALL2&PUSH 3)                      ; CONVERT
8     (CONST&PUSH 4)                      ; $/
9     (CALL1&PUSH 2)                      ; MHEADER
11    (LOAD&PUSH 5)
12    (CONST&PUSH 0)                      ; $EXPR
13    (CALL2&PUSH 3)                      ; CONVERT
15    (CONST&PUSH 5)                      ; 2
16    (LIST&PUSH 3)
18    (CONST&PUSH 5)                      ; 2
19    (LIST 5)
21    (SKIP&RET 3)


Disassembly of function #:|(DEF-LED ($!! 160) (OP LEFT) ...)-160-3|
(CONST 0) = $!!
(CONST 1) = 160
(CONST 2) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $!!
1     (CONST&PUSH 1)                      ; 160
2     (NIL&PUSH)
3     (CALL 3 2)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $^ 140)-161|
(CONST 0) = $^
(CONST 1) = LBP
(CONST 2) = 140
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 140
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $^ 139)-162|
(CONST 0) = $^
(CONST 1) = RBP
(CONST 2) = 139
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 139
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $^ $EXPR)-163|
(CONST 0) = $^
(CONST 1) = POS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $^ $EXPR)-164|
(CONST 0) = $^
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $^ $EXPR)-165|
(CONST 0) = $^
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $^ (MEXPT))-166|
(CONST 0) = $^
(CONST 1) = MHEADER
(CONST 2) = (MEXPT)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MEXPT)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED (#) (OP LEFT) ...)-167-2-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-LED (#) (OP LEFT) ...)-167-2-2-2-1|>
(CONST 1) = $^
(CONST 2) = LED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-LED (#) (OP LEFT) ...)-167-2-2-2-1|>
1     (CONST&PUSH 1)                      ; $^
2     (CONST&PUSH 2)                      ; LED
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED (#) (OP LEFT) ...)-167-2-2-2-1|
(CONST 0) = $EXPR
(CONST 1) = MHEADER
(CONST 2) = LPOS
(CONST 3) = CONVERT
(CONST 4) = RPOS
(CONST 5) = RBP
(CONST 6) = PARSE
(CONST 7) = ALIASLOOKUP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPR
1     (LOAD&PUSH 3)
2     (CALL1&PUSH 1)                      ; MHEADER
4     (LOAD&PUSH 3)
5     (LOAD&PUSH 5)
6     (CALL1&PUSH 2)                      ; LPOS
8     (CALL2&PUSH 3)                      ; CONVERT
10    (LOAD&PUSH 5)
11    (CALL1&PUSH 4)                      ; RPOS
13    (LOAD&PUSH 6)
14    (CALL1&PUSH 5)                      ; RBP
16    (CALL2&PUSH 6)                      ; PARSE
18    (LIST&PUSH 3)
20    (CALL1 7)                           ; ALIASLOOKUP
22    (CONS)
23    (SKIP&RET 3)


Disassembly of function #:|(DEF-LED (#) (OP LEFT) ...)-167-2-3|
(CONST 0) = $^^
(CONST 1) = $^
(CONST 2) = (LED)
(CONST 3) = INHERIT-PROPL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^^
1     (CONST&PUSH 1)                      ; $^
2     (CONST&PUSH 2)                      ; (LED)
3     (CALL 3 3)                          ; INHERIT-PROPL
6     (VALUES0)
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED (#) (OP LEFT) ...)-167-3|
(CONST 0) = ($^ $^^)
(CONST 1) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($^ $^^)
1     (PUSH-NIL 2)
3     (CALL 3 1)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(MAPC #'(LAMBDA # #) '(LBP RBP POS ...))-168|
(CONST 0) = (LBP RBP POS RPOS LPOS MHEADER)
(CONST 1) = $^
(CONST 2) = $**
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
25 byte-code instructions:
0     (CONST&PUSH 0)                      ; (LBP RBP POS RPOS LPOS MHEADER)
1     (JMP L28)
3     L3
3     (CONST&PUSH 2)                      ; $**
4     (LOAD&PUSH 1)
5     (LOAD&PUSH 3)
6     (CALL 3 3)                          ; PUTPROP
9     (SKIP 2)
11    (JMP L26)
13    L13
13    (LOAD&CAR&PUSH 0)
15    (CONST&PUSH 1)                      ; $^
16    (LOAD&PUSH 1)
17    (PUSH-UNBOUND 1)
19    (CALLS2&PUSH 132)                   ; GET
21    (LOAD&JMPIF 0 L3)
24    (SKIP 2)
26    L26
26    (LOAD&CDR&STORE 0)
28    L28
28    (LOAD&PUSH 0)
29    (CALLS1&JMPIFNOT 146 L13)           ; ENDP
32    (SKIP 1)
34    (CONST 0)                           ; (LBP RBP POS RPOS LPOS MHEADER)
35    (SKIP&RET 1)


Disassembly of function #:|(INHERIT-PROPL '$** '$^ ...)-169|
(CONST 0) = $**
(CONST 1) = $^
(CONST 2) = (LED)
(CONST 3) = INHERIT-PROPL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $**
1     (CONST&PUSH 1)                      ; $^
2     (CONST&PUSH 2)                      ; (LED)
3     (CALL 3 3)                          ; INHERIT-PROPL
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $^^ 140)-170|
(CONST 0) = $^^
(CONST 1) = LBP
(CONST 2) = 140
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^^
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 140
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $^^ 139)-171|
(CONST 0) = $^^
(CONST 1) = RBP
(CONST 2) = 139
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^^
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 139
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $^^ $EXPR)-172|
(CONST 0) = $^^
(CONST 1) = POS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^^
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $^^ $EXPR)-173|
(CONST 0) = $^^
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^^
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $^^ $EXPR)-174|
(CONST 0) = $^^
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^^
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $^^ (MNCEXPT))-175|
(CONST 0) = $^^
(CONST 1) = MHEADER
(CONST 2) = (MNCEXPT)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $^^
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MNCEXPT)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $. PARSE-INFIX)-176|
(CONST 0) = $.
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $.
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $. 130)-177|
(CONST 0) = $.
(CONST 1) = LBP
(CONST 2) = 130
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $.
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 130
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $. 129)-178|
(CONST 0) = $.
(CONST 1) = RBP
(CONST 2) = 129
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $.
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 129
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $. $EXPR)-179|
(CONST 0) = $.
(CONST 1) = POS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $.
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $. $EXPR)-180|
(CONST 0) = $.
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $.
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $. $EXPR)-181|
(CONST 0) = $.
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $.
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $. (MNCTIMES))-182|
(CONST 0) = $.
(CONST 1) = MHEADER
(CONST 2) = (MNCTIMES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $.
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MNCTIMES)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $* PARSE-NARY)-183|
(CONST 0) = $*
(CONST 1) = PARSE-NARY
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $*
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-NARY
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $* 120)-184|
(CONST 0) = $*
(CONST 1) = LBP
(CONST 2) = 120
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $*
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 120
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $* $EXPR)-185|
(CONST 0) = $*
(CONST 1) = POS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $*
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $* $EXPR)-186|
(CONST 0) = $*
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $*
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $* (MTIMES))-187|
(CONST 0) = $*
(CONST 1) = MHEADER
(CONST 2) = (MTIMES)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $*
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MTIMES)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $/ PARSE-INFIX)-188|
(CONST 0) = $/
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $/
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $/ 120)-189|
(CONST 0) = $/
(CONST 1) = LBP
(CONST 2) = 120
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $/
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 120
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $/ 120)-190|
(CONST 0) = $/
(CONST 1) = RBP
(CONST 2) = 120
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $/
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 120
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $/ $EXPR)-191|
(CONST 0) = $/
(CONST 1) = POS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $/
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $/ $EXPR)-192|
(CONST 0) = $/
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $/
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $/ $EXPR)-193|
(CONST 0) = $/
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $/
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $/ (MQUOTIENT))-194|
(CONST 0) = $/
(CONST 1) = MHEADER
(CONST 2) = (MQUOTIENT)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $/
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MQUOTIENT)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $+ PARSE-PREFIX)-195|
(CONST 0) = $+
(CONST 1) = PARSE-PREFIX
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $+
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-PREFIX
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $+ 100)-196|
(CONST 0) = $+
(CONST 1) = LBP
(CONST 2) = 100
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $+
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 100
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $+ 100)-197|
(CONST 0) = $+
(CONST 1) = RBP
(CONST 2) = 100
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $+
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 100
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $+ $EXPR)-198|
(CONST 0) = $+
(CONST 1) = POS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $+
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $+ $EXPR)-199|
(CONST 0) = $+
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $+
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $+ (MPLUS))-200|
(CONST 0) = $+
(CONST 1) = MHEADER
(CONST 2) = (MPLUS)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $+
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MPLUS)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED (# 100) (OP LEFT) ...)-201-2-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-LED (# 100) (OP LEFT) ...)-201-2-2-2-1|>
(CONST 1) = $+
(CONST 2) = LED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-LED (# 100) (OP LEFT) ...)-201-2-2-2-1|>
1     (CONST&PUSH 1)                      ; $+
2     (CONST&PUSH 2)                      ; LED
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED (# 100) (OP LEFT) ...)-201-2-2-2-1|
(CONST 0) = $EXPR
(CONST 1) = CONVERT
(CONST 2) = $-
(CONST 3) = MHEADER
(CONST 4) = 100
(CONST 5) = PARSE
(CONST 6) = PEEK-ONE-TOKEN
(CONST 7) = ($+ $-)
(CONST 8) = MEMQ
(CONST 9) = $+
(CONST 10) = SCAN-ONE-TOKEN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
44 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; $EXPR
2     (CALL2 1)                           ; CONVERT
4     (STORE 1)
5     (LOAD&PUSH 2)
6     (JMPIFEQTO 2 L19)                   ; $-
9     (CONST&PUSH 0)                      ; $EXPR
10    (CONST&PUSH 4)                      ; 100
11    (CALL2 5)                           ; PARSE
13    L13
13    (PUSH)
14    (LOAD&PUSH 2)
15    (LIST&PUSH 2)
17    (JMP L44)
19    L19
19    (CONST&PUSH 2)                      ; $-
20    (CALL1&PUSH 3)                      ; MHEADER
22    (CONST&PUSH 0)                      ; $EXPR
23    (CONST&PUSH 4)                      ; 100
24    (CALL2&PUSH 5)                      ; PARSE
26    (LIST 2)
28    (JMP L13)
30    L30
30    (CALL0 6)                           ; PEEK-ONE-TOKEN
32    (PUSH)
33    (JMPIFNOTEQTO 9 L38)                ; $+
36    (CALL0 10)                          ; SCAN-ONE-TOKEN
38    L38
38    (CONST&PUSH 0)                      ; $EXPR
39    (CONST&PUSH 4)                      ; 100
40    (CALL2&PUSH 5)                      ; PARSE
42    (LOAD&CONS&STORE 0)
44    L44
44    (CALL0 6)                           ; PEEK-ONE-TOKEN
46    (PUSH)
47    (CONST&PUSH 7)                      ; ($+ $-)
48    (CALL2&JMPIF 8 L30)                 ; MEMQ
51    (CONST&PUSH 0)                      ; $EXPR
52    (CONST&PUSH 9)                      ; $+
53    (CALL1&PUSH 3)                      ; MHEADER
55    (LOAD&PUSH 2)
56    (CALLS2 73)                         ; NREVERSE
58    (LIST* 2)
60    (SKIP&RET 4)


Disassembly of function #:|(DEF-LED (# 100) (OP LEFT) ...)-201-2-3|
(CONST 0) = $-
(CONST 1) = $+
(CONST 2) = (LED)
(CONST 3) = INHERIT-PROPL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $-
1     (CONST&PUSH 1)                      ; $+
2     (CONST&PUSH 2)                      ; (LED)
3     (CALL 3 3)                          ; INHERIT-PROPL
6     (VALUES0)
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED (# 100) (OP LEFT) ...)-201-3|
(CONST 0) = ($+ $-)
(CONST 1) = 100
(CONST 2) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($+ $-)
1     (CONST&PUSH 1)                      ; 100
2     (NIL&PUSH)
3     (CALL 3 2)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $- PARSE-PREFIX)-202|
(CONST 0) = $-
(CONST 1) = PARSE-PREFIX
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $-
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-PREFIX
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $- 100)-203|
(CONST 0) = $-
(CONST 1) = LBP
(CONST 2) = 100
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $-
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 100
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $- 134)-204|
(CONST 0) = $-
(CONST 1) = RBP
(CONST 2) = 134
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $-
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 134
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $- $EXPR)-205|
(CONST 0) = $-
(CONST 1) = POS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $-
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $- $EXPR)-206|
(CONST 0) = $-
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $-
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $- (MMINUS))-207|
(CONST 0) = $-
(CONST 1) = MHEADER
(CONST 2) = (MMINUS)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $-
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MMINUS)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $= PARSE-INFIX)-208|
(CONST 0) = $=
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $=
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $= 80)-209|
(CONST 0) = $=
(CONST 1) = LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $=
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $= 80)-210|
(CONST 0) = $=
(CONST 1) = RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $=
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $= $CLAUSE)-211|
(CONST 0) = $=
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $=
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $= $EXPR)-212|
(CONST 0) = $=
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $=
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $= $EXPR)-213|
(CONST 0) = $=
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $=
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $= (MEQUAL))-214|
(CONST 0) = $=
(CONST 1) = MHEADER
(CONST 2) = (MEQUAL)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $=
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MEQUAL)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $# PARSE-INFIX)-215|
(CONST 0) = $#
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $#
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $# 80)-216|
(CONST 0) = $#
(CONST 1) = LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $#
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $# 80)-217|
(CONST 0) = $#
(CONST 1) = RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $#
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $# $CLAUSE)-218|
(CONST 0) = $#
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $#
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $# $EXPR)-219|
(CONST 0) = $#
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $#
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $# $EXPR)-220|
(CONST 0) = $#
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $#
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $# (MNOTEQUAL))-221|
(CONST 0) = $#
(CONST 1) = MHEADER
(CONST 2) = (MNOTEQUAL)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $#
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MNOTEQUAL)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $> PARSE-INFIX)-222|
(CONST 0) = $>
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $> 80)-223|
(CONST 0) = $>
(CONST 1) = LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $> 80)-224|
(CONST 0) = $>
(CONST 1) = RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $> $CLAUSE)-225|
(CONST 0) = $>
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $> $EXPR)-226|
(CONST 0) = $>
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $> $EXPR)-227|
(CONST 0) = $>
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $> (MGREATERP))-228|
(CONST 0) = $>
(CONST 1) = MHEADER
(CONST 2) = (MGREATERP)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MGREATERP)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $>= PARSE-INFIX)-229|
(CONST 0) = $>=
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>=
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $>= 80)-230|
(CONST 0) = $>=
(CONST 1) = LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>=
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $>= 80)-231|
(CONST 0) = $>=
(CONST 1) = RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>=
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $>= $CLAUSE)-232|
(CONST 0) = $>=
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>=
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $>= $EXPR)-233|
(CONST 0) = $>=
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>=
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $>= $EXPR)-234|
(CONST 0) = $>=
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>=
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $>= (MGEQP))-235|
(CONST 0) = $>=
(CONST 1) = MHEADER
(CONST 2) = (MGEQP)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>=
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MGEQP)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD ($> 80) (OP) ...)-236-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-NUD ($> 80) (OP) ...)-236-2-2-1|>
(CONST 1) = $>
(CONST 2) = NUD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-NUD ($> 80) (OP) ...)-236-2-2-1|>
1     (CONST&PUSH 1)                      ; $>
2     (CONST&PUSH 2)                      ; NUD
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD ($> 80) (OP) ...)-236-2-2-1|
(CONST 0) = ($ANY . $>)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; ($ANY . $>)
1     (SKIP&RET 2)


Disassembly of function #:|(DEF-NUD ($> 80) (OP) ...)-236-3|
(CONST 0) = $>
(CONST 1) = 80
(CONST 2) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $>
1     (CONST&PUSH 1)                      ; 80
2     (NIL&PUSH)
3     (CALL 3 2)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $< PARSE-INFIX)-237|
(CONST 0) = $<
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $< 80)-238|
(CONST 0) = $<
(CONST 1) = LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $< 80)-239|
(CONST 0) = $<
(CONST 1) = RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $< $CLAUSE)-240|
(CONST 0) = $<
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $< $EXPR)-241|
(CONST 0) = $<
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $< $EXPR)-242|
(CONST 0) = $<
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $< (MLESSP))-243|
(CONST 0) = $<
(CONST 1) = MHEADER
(CONST 2) = (MLESSP)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MLESSP)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $<= PARSE-INFIX)-244|
(CONST 0) = $<=
(CONST 1) = PARSE-INFIX
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<=
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-INFIX
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $<= 80)-245|
(CONST 0) = $<=
(CONST 1) = LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<=
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $<= 80)-246|
(CONST 0) = $<=
(CONST 1) = RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<=
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $<= $CLAUSE)-247|
(CONST 0) = $<=
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<=
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $<= $EXPR)-248|
(CONST 0) = $<=
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<=
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $<= $EXPR)-249|
(CONST 0) = $<=
(CONST 1) = LPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<=
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $<= (MLEQP))-250|
(CONST 0) = $<=
(CONST 1) = MHEADER
(CONST 2) = (MLEQP)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $<=
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MLEQP)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $NOT PARSE-PREFIX)-251|
(CONST 0) = $NOT
(CONST 1) = PARSE-PREFIX
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOT
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-PREFIX
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $NOT 70)-252|
(CONST 0) = $NOT
(CONST 1) = RBP
(CONST 2) = 70
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOT
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 70
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $NOT $CLAUSE)-253|
(CONST 0) = $NOT
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOT
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $NOT $CLAUSE)-254|
(CONST 0) = $NOT
(CONST 1) = RPOS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOT
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $NOT $CLAUSE)-255|
(CONST 0) = $NOT
(CONST 1) = LPOS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOT
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $NOT (MNOT))-256|
(CONST 0) = $NOT
(CONST 1) = MHEADER
(CONST 2) = (MNOT)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOT
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MNOT)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $AND PARSE-NARY)-257|
(CONST 0) = $AND
(CONST 1) = PARSE-NARY
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $AND
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-NARY
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $AND 65)-258|
(CONST 0) = $AND
(CONST 1) = LBP
(CONST 2) = 65
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $AND
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 65
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $AND $CLAUSE)-259|
(CONST 0) = $AND
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $AND
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $AND $CLAUSE)-260|
(CONST 0) = $AND
(CONST 1) = LPOS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $AND
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $AND (MAND))-261|
(CONST 0) = $AND
(CONST 1) = MHEADER
(CONST 2) = (MAND)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $AND
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MAND)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV $OR PARSE-NARY)-262|
(CONST 0) = $OR
(CONST 1) = PARSE-NARY
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OR
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-NARY
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $OR 60)-263|
(CONST 0) = $OR
(CONST 1) = LBP
(CONST 2) = 60
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OR
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 60
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $OR $CLAUSE)-264|
(CONST 0) = $OR
(CONST 1) = POS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OR
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS $OR $CLAUSE)-265|
(CONST 0) = $OR
(CONST 1) = LPOS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OR
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $OR (MOR))-266|
(CONST 0) = $OR
(CONST 1) = MHEADER
(CONST 2) = (MOR)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OR
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MOR)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LED-EQUIV \|$,\| PARSE-NARY)-267|
(CONST 0) = |$,|
(CONST 1) = PARSE-NARY
(CONST 2) = LED
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$,|
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-NARY
3     (CONST&PUSH 2)                      ; LED
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP \|$,\| 10)-268|
(CONST 0) = |$,|
(CONST 1) = LBP
(CONST 2) = 10
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$,|
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 10
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS \|$,\| $ANY)-269|
(CONST 0) = |$,|
(CONST 1) = POS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$,|
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LPOS \|$,\| $ANY)-270|
(CONST 0) = |$,|
(CONST 1) = LPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$,|
1     (CONST&PUSH 1)                      ; LPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER \|$,\| ($EV))-271|
(CONST 0) = |$,|
(CONST 1) = MHEADER
(CONST 2) = ($EV)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$,|
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; ($EV)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $THEN DELIM-ERR)-272|
(CONST 0) = $THEN
(CONST 1) = DELIM-ERR
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THEN
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; DELIM-ERR
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $THEN 5)-273|
(CONST 0) = $THEN
(CONST 1) = LBP
(CONST 2) = 5
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THEN
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 5
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $THEN 25)-274|
(CONST 0) = $THEN
(CONST 1) = RBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THEN
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $ELSE DELIM-ERR)-275|
(CONST 0) = $ELSE
(CONST 1) = DELIM-ERR
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELSE
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; DELIM-ERR
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $ELSE 5)-276|
(CONST 0) = $ELSE
(CONST 1) = LBP
(CONST 2) = 5
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELSE
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 5
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $ELSE 25)-277|
(CONST 0) = $ELSE
(CONST 1) = RBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELSE
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $ELSEIF DELIM-ERR)-278|
(CONST 0) = $ELSEIF
(CONST 1) = DELIM-ERR
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELSEIF
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; DELIM-ERR
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $ELSEIF 5)-279|
(CONST 0) = $ELSEIF
(CONST 1) = LBP
(CONST 2) = 5
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELSEIF
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 5
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $ELSEIF 45)-280|
(CONST 0) = $ELSEIF
(CONST 1) = RBP
(CONST 2) = 45
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELSEIF
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 45
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $ELSEIF $ANY)-281|
(CONST 0) = $ELSEIF
(CONST 1) = POS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELSEIF
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $ELSEIF $CLAUSE)-282|
(CONST 0) = $ELSEIF
(CONST 1) = RPOS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELSEIF
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $IF 45)-283|
(CONST 0) = $IF
(CONST 1) = RBP
(CONST 2) = 45
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IF
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 45
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-POS $IF $ANY)-284|
(CONST 0) = $IF
(CONST 1) = POS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IF
1     (CONST&PUSH 1)                      ; POS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $IF $CLAUSE)-285|
(CONST 0) = $IF
(CONST 1) = RPOS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IF
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $IF (MCOND))-286|
(CONST 0) = $IF
(CONST 1) = MHEADER
(CONST 2) = (MCOND)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IF
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MCOND)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD ($IF) (OP) ...)-287-2-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEF-NUD ($IF) (OP) ...)-287-2-2-1|>
(CONST 1) = $IF
(CONST 2) = NUD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEF-NUD ($IF) (OP) ...)-287-2-2-1|>
1     (CONST&PUSH 1)                      ; $IF
2     (CONST&PUSH 2)                      ; NUD
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP 1)
8     (VALUES0)
9     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD ($IF) (OP) ...)-287-2-2-1|
(CONST 0) = POS
(CONST 1) = MHEADER
(CONST 2) = PARSE-CONDITION
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; POS
3     (LOAD&PUSH 2)
4     (CALL1&PUSH 1)                      ; MHEADER
6     (LOAD&PUSH 3)
7     (CALL1 2)                           ; PARSE-CONDITION
9     (LIST* 2)
11    (SKIP&RET 2)


Disassembly of function #:|(DEF-NUD ($IF) (OP) ...)-287-3|
(CONST 0) = $IF
(CONST 1) = SET-LBP-AND-RBP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IF
1     (PUSH-NIL 2)
3     (CALL 3 1)                          ; SET-LBP-AND-RBP
6     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PARSE-CONDITION (OP) ...)-288|
(CONST 0) = PARSE-CONDITION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-CONDITION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-CONDITION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-CONDITION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-CONDITION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-CONDITION
8     (SKIP&RET 1)


Disassembly of function PARSE-CONDITION
(CONST 0) = RPOS
(CONST 1) = RBP
(CONST 2) = PARSE
(CONST 3) = PEEK-ONE-TOKEN
(CONST 4) = $THEN
(CONST 5) = $ANY
(CONST 6) = SCAN-ONE-TOKEN
(CONST 7) = "Missing THEN"
(CONST 8) = MREAD-SYNERR
(CONST 9) = $ELSE
(CONST 10) = $ELSEIF
(CONST 11) = $FALSE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
48 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; RPOS
3     (LOAD&PUSH 2)
4     (CALL1&PUSH 1)                      ; RBP
6     (CALL2&PUSH 2)                      ; PARSE
8     (CALL0 3)                           ; PEEK-ONE-TOKEN
10    (PUSH)
11    (JMPIFEQTO 4 L40)                   ; $THEN
14    (CONST&PUSH 7)                      ; "Missing THEN"
15    (CALL1 8)                           ; MREAD-SYNERR
17    L17
17    (PUSH)
18    (CALL0 3)                           ; PEEK-ONE-TOKEN
20    (PUSH)
21    (LOAD&PUSH 0)
22    (JMPIFEQTO 9 L50)                   ; $ELSE
25    (LOAD&PUSH 0)
26    (JMPIFEQTO 10 L61)                  ; $ELSEIF
29    (T&PUSH)
30    (CONST 11)                          ; $FALSE
31    L31
31    (PUSH)
32    (LIST 2)
34    L34
34    (SKIP 1)
36    (LIST* 2)
38    (SKIP&RET 2)
40    L40
40    (CONST&PUSH 5)                      ; $ANY
41    (CALL0 6)                           ; SCAN-ONE-TOKEN
43    (PUSH)
44    (CALL1&PUSH 1)                      ; RBP
46    (CALL2 2)                           ; PARSE
48    (JMP L17)
50    L50
50    (T&PUSH)
51    (CONST&PUSH 5)                      ; $ANY
52    (CALL0 6)                           ; SCAN-ONE-TOKEN
54    (PUSH)
55    (CALL1&PUSH 1)                      ; RBP
57    (CALL2 2)                           ; PARSE
59    (JMP L31)
61    L61
61    (CALL0 6)                           ; SCAN-ONE-TOKEN
63    (PUSH)
64    (JSR L0)
67    (JMP L34)


Disassembly of function #:|(DEF-MHEADER $DO (MDO))-289|
(CONST 0) = $DO
(CONST 1) = MHEADER
(CONST 2) = (MDO)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DO
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (MDO)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN PARSE-$DO (LEX &AUX #) ...)-290|
(CONST 0) = PARSE-$DO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARSE-$DO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARSE-$DO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARSE-$DO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARSE-$DO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARSE-$DO
8     (SKIP&RET 1)


Disassembly of function PARSE-$DO
(CONST 0) = MDO
(CONST 1) = MHEADER
(CONST 2) = 0
(CONST 3) = |$:|
(CONST 4) = $FROM
(CONST 5) = $DO
(CONST 6) = COLLISION-CHECK
(CONST 7) = RPOS
(CONST 8) = RBP
(CONST 9) = PARSE
(CONST 10) = 
#S(HASH-TABLE EQ ($WHILE . 33) ($UNLESS . 33) ($THRU . 21) ($NEXT . 17)
   ($STEP . 14) ($IN . 5) ($FROM . 10) ($FOR . 2) ($DO . 91))
(CONST 11) = $ANY
(CONST 12) = MDOIN
(CONST 13) = $WHILE
(CONST 14) = $NOT
(CONST 15) = $OR
(CONST 16) = PARSE-BUG-ERR
(CONST 17) = SCAN-ONE-TOKEN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
124 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDO
1     (LIST&PUSH 1)
3     (PUSH-NIL 7)
5     (LIST&PUSH 8)
7     (LOAD&PUSH 0)
8     (CONST&PUSH 0)                      ; MDO
9     (CALL1&PUSH 1)                      ; MHEADER
11    (CALLS1 169)                        ; SYSTEM::%RPLACA
13    (LOAD&PUSH 2)
14    (CONST&PUSH 2)                      ; 0
15    L15
15    (LOAD&PUSH 1)
16    (JMPIFNOTEQTO 3 L21)                ; |$:|
19    (CONST 4)                           ; $FROM
20    (STORE 1)
21    L21
21    (CONST&PUSH 5)                      ; $DO
22    (LOAD&PUSH 1)
23    (LOAD&PUSH 3)
24    (CALL 3 6)                          ; COLLISION-CHECK
27    (STORE 0)
28    (LOAD&PUSH 1)
29    (CALL1&PUSH 7)                      ; RPOS
31    (LOAD&PUSH 2)
32    (CALL1&PUSH 8)                      ; RBP
34    (CALL2&PUSH 9)                      ; PARSE
36    (LOAD 2)
37    (JMPHASH 10 L119 L130 L41 L49 L44 L53 L56 L60 L72 L72)
41    L41
41    (LOAD 3)
42    (JMP L65)
44    L44
44    (LOAD&CAR&PUSH 3)
46    (CONST&PUSH 12)                     ; MDOIN
47    (CALLS1 169)                        ; SYSTEM::%RPLACA
49    L49
49    (LOAD 3)
50    (CDR)
51    (JMP L65)
53    L53
53    (LOAD 3)
54    (JMP L63)
56    L56
56    (LOAD 3)
57    (CDR)
58    (JMP L63)
60    L60
60    (LOAD 3)
61    (CDR)
62    (CDR)
63    L63
63    (CDR)
64    (CDR)
65    L65
65    (CDR&PUSH)
66    (LOAD 1)
67    (JMP L114)
69    L69
69    (LOAD 1)
70    (JMP L114)
72    L72
72    (LOAD&PUSH 2)
73    (JMPIFNOTEQTO 13 L83)               ; $WHILE
76    (CONST&PUSH 14)                     ; $NOT
77    (CALL1&PUSH 1)                      ; MHEADER
79    (LOAD&PUSH 1)
80    (LIST 2)
82    (STORE 0)
83    L83
83    (LOAD 3)
84    (CDR)
85    (CDR)
86    (CDR)
87    (CDR)
88    (CDR)
89    (CDR&PUSH)
90    (LOAD 4)
91    (CDR)
92    (CDR)
93    (CDR)
94    (CDR)
95    (CDR)
96    (CDR)
97    (CAR)
98    (JMPIFNOT L69)
100   (CONST&PUSH 15)                     ; $OR
101   (CALL1&PUSH 1)                      ; MHEADER
103   (LOAD&PUSH 2)
104   (LOAD 6)
105   (CDR)
106   (CDR)
107   (CDR)
108   (CDR)
109   (CDR)
110   (CDR)
111   (CAR&PUSH)
112   (LIST 3)
114   L114
114   (PUSH)
115   (CALLS1 169)                        ; SYSTEM::%RPLACA
117   (JMP L122)
119   L119
119   (CONST&PUSH 5)                      ; $DO
120   (CALL1 16)                          ; PARSE-BUG-ERR
122   L122
122   (SKIP 1)
124   (CALL0 17)                          ; SCAN-ONE-TOKEN
126   (STORE 1)
127   (JMP L15)
130   L130
130   (LOAD 3)
131   (CDR)
132   (CDR)
133   (CDR)
134   (CDR)
135   (CDR)
136   (CDR)
137   (CDR&PUSH)
138   (LOAD&PUSH 1)
139   (CALLS1 169)                        ; SYSTEM::%RPLACA
141   (CONST&PUSH 11)                     ; $ANY
142   (LOAD 4)
143   (CONS)
144   (SKIP&RET 6)


Disassembly of function #:|(DEF-LBP $FOR 25)-291|
(CONST 0) = $FOR
(CONST 1) = LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FOR
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $FROM 25)-292|
(CONST 0) = $FROM
(CONST 1) = LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FROM
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $STEP 25)-293|
(CONST 0) = $STEP
(CONST 1) = LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $STEP
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $NEXT 25)-294|
(CONST 0) = $NEXT
(CONST 1) = LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEXT
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $THRU 25)-295|
(CONST 0) = $THRU
(CONST 1) = LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THRU
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $UNLESS 25)-296|
(CONST 0) = $UNLESS
(CONST 1) = LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $UNLESS
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $WHILE 25)-297|
(CONST 0) = $WHILE
(CONST 1) = LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $WHILE
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $DO 25)-298|
(CONST 0) = $DO
(CONST 1) = LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DO
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $FOR PARSE-$DO)-299|
(CONST 0) = $FOR
(CONST 1) = PARSE-$DO
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FOR
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-$DO
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $FROM PARSE-$DO)-300|
(CONST 0) = $FROM
(CONST 1) = PARSE-$DO
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FROM
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-$DO
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $STEP PARSE-$DO)-301|
(CONST 0) = $STEP
(CONST 1) = PARSE-$DO
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $STEP
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-$DO
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $NEXT PARSE-$DO)-302|
(CONST 0) = $NEXT
(CONST 1) = PARSE-$DO
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEXT
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-$DO
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $THRU PARSE-$DO)-303|
(CONST 0) = $THRU
(CONST 1) = PARSE-$DO
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THRU
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-$DO
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $UNLESS PARSE-$DO)-304|
(CONST 0) = $UNLESS
(CONST 1) = PARSE-$DO
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $UNLESS
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-$DO
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $WHILE PARSE-$DO)-305|
(CONST 0) = $WHILE
(CONST 1) = PARSE-$DO
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $WHILE
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-$DO
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $DO PARSE-$DO)-306|
(CONST 0) = $DO
(CONST 1) = PARSE-$DO
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DO
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PARSE-$DO
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $DO 25)-307|
(CONST 0) = $DO
(CONST 1) = RBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DO
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $FOR 200)-308|
(CONST 0) = $FOR
(CONST 1) = RBP
(CONST 2) = 200
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FOR
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 200
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $FROM 95)-309|
(CONST 0) = $FROM
(CONST 1) = RBP
(CONST 2) = 95
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FROM
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 95
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $IN 95)-310|
(CONST 0) = $IN
(CONST 1) = RBP
(CONST 2) = 95
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IN
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 95
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $STEP 95)-311|
(CONST 0) = $STEP
(CONST 1) = RBP
(CONST 2) = 95
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $STEP
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 95
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $NEXT 45)-312|
(CONST 0) = $NEXT
(CONST 1) = RBP
(CONST 2) = 45
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEXT
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 45
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $THRU 95)-313|
(CONST 0) = $THRU
(CONST 1) = RBP
(CONST 2) = 95
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THRU
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 95
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $UNLESS 45)-314|
(CONST 0) = $UNLESS
(CONST 1) = RBP
(CONST 2) = 45
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $UNLESS
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 45
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RBP $WHILE 45)-315|
(CONST 0) = $WHILE
(CONST 1) = RBP
(CONST 2) = 45
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $WHILE
1     (CONST&PUSH 1)                      ; RBP
2     (CONST&PUSH 2)                      ; 45
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $DO $ANY)-316|
(CONST 0) = $DO
(CONST 1) = RPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DO
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $FOR $ANY)-317|
(CONST 0) = $FOR
(CONST 1) = RPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FOR
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $FROM $ANY)-318|
(CONST 0) = $FROM
(CONST 1) = RPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FROM
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $STEP $EXPR)-319|
(CONST 0) = $STEP
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $STEP
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $NEXT $ANY)-320|
(CONST 0) = $NEXT
(CONST 1) = RPOS
(CONST 2) = $ANY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEXT
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $ANY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $THRU $EXPR)-321|
(CONST 0) = $THRU
(CONST 1) = RPOS
(CONST 2) = $EXPR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THRU
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $EXPR
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $UNLESS $CLAUSE)-322|
(CONST 0) = $UNLESS
(CONST 1) = RPOS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $UNLESS
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-RPOS $WHILE $CLAUSE)-323|
(CONST 0) = $WHILE
(CONST 1) = RPOS
(CONST 2) = $CLAUSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $WHILE
1     (CONST&PUSH 1)                      ; RPOS
2     (CONST&PUSH 2)                      ; $CLAUSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-2|
(CONST 0) = $DO
(CONST 1) = KEYS
(CONST 2) = 
(($WHILE . 256) ($UNLESS . 128) ($THRU . 64) ($NEXT . 32) ($STEP . 16)
 ($IN . 8) ($FROM . 4) ($FOR . 2) ($DO . 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DO
1     (CONST&PUSH 1)                      ; KEYS
2     (CONST&PUSH 2)                      ; (# # # ...)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-3|
(CONST 0) = $DO
(CONST 1) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DO
1     (CONST&PUSH 0)                      ; $DO
2     (CONST&PUSH 1)                      ; 0
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-4|
(CONST 0) = $FOR
(CONST 1) = $DO
(CONST 2) = 2
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FOR
1     (CONST&PUSH 1)                      ; $DO
2     (CONST&PUSH 2)                      ; 2
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-5|
(CONST 0) = $FROM
(CONST 1) = $DO
(CONST 2) = 12
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FROM
1     (CONST&PUSH 1)                      ; $DO
2     (CONST&PUSH 2)                      ; 12
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-6|
(CONST 0) = $IN
(CONST 1) = $DO
(CONST 2) = 60
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IN
1     (CONST&PUSH 1)                      ; $DO
2     (CONST&PUSH 2)                      ; 60
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-7|
(CONST 0) = $STEP
(CONST 1) = $DO
(CONST 2) = 56
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $STEP
1     (CONST&PUSH 1)                      ; $DO
2     (CONST&PUSH 2)                      ; 56
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-8|
(CONST 0) = $NEXT
(CONST 1) = $DO
(CONST 2) = 56
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEXT
1     (CONST&PUSH 1)                      ; $DO
2     (CONST&PUSH 2)                      ; 56
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-9|
(CONST 0) = $THRU
(CONST 1) = $DO
(CONST 2) = 72
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THRU
1     (CONST&PUSH 1)                      ; $DO
2     (CONST&PUSH 2)                      ; 72
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-10|
(CONST 0) = $UNLESS
(CONST 1) = $DO
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; $UNLESS
1     (CONST&PUSH 1)                      ; $DO
2     (CONST&PUSH 2)                      ; 0
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEF-COLLISIONS $DO ($DO) ...)-324-11|
(CONST 0) = $WHILE
(CONST 1) = $DO
(CONST 2) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $WHILE
1     (CONST&PUSH 1)                      ; $DO
2     (CONST&PUSH 2)                      ; 0
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER $$ (NODISPLAYINPUT))-325|
(CONST 0) = $$
(CONST 1) = MHEADER
(CONST 2) = (NODISPLAYINPUT)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $$
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (NODISPLAYINPUT)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $$ PREMTERM-ERR)-326|
(CONST 0) = $$
(CONST 1) = PREMTERM-ERR
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $$
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PREMTERM-ERR
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $$ -1)-327|
(CONST 0) = $$
(CONST 1) = LBP
(CONST 2) = -1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $$
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; -1
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-MHEADER \|$;\| (DISPLAYINPUT))-328|
(CONST 0) = |$;|
(CONST 1) = MHEADER
(CONST 2) = (DISPLAYINPUT)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$;|
1     (CONST&PUSH 1)                      ; MHEADER
2     (CONST&PUSH 2)                      ; (DISPLAYINPUT)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV \|$;\| PREMTERM-ERR)-329|
(CONST 0) = |$;|
(CONST 1) = PREMTERM-ERR
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$;|
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; PREMTERM-ERR
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP \|$;\| -1)-330|
(CONST 0) = |$;|
(CONST 1) = LBP
(CONST 2) = -1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; |$;|
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; -1
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEF-NUD-EQUIV $&& DELIM-ERR)-331|
(CONST 0) = $&&
(CONST 1) = DELIM-ERR
(CONST 2) = NUD
(CONST 3) = PUTPROP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $&&
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; DELIM-ERR
3     (CONST&PUSH 2)                      ; NUD
4     (CALL 3 3)                          ; PUTPROP
7     (SKIP&RET 1)


Disassembly of function #:|(DEF-LBP $&& -1)-332|
(CONST 0) = $&&
(CONST 1) = LBP
(CONST 2) = -1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $&&
1     (CONST&PUSH 1)                      ; LBP
2     (CONST&PUSH 2)                      ; -1
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN MOPSTRIP (X) ...)-333|
(CONST 0) = MOPSTRIP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MOPSTRIP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOPSTRIP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MOPSTRIP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MOPSTRIP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MOPSTRIP
8     (SKIP&RET 1)


Disassembly of function MOPSTRIP
(CONST 0) = X
(CONST 1) = FALSE
(CONST 2) = TRUE
(CONST 3) = REVERSEALIAS
(CONST 4) = FIRSTCHARN
(CONST 5) = (#\$ #\% #\&)
(CONST 6) = EXPLODEN
(CONST 7) = IMPLODE
(CONST 8) = MSTRING
(CONST 9) = MAKNAM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
48 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFNOT L36)
7     (GETVALUE&PUSH 0)                   ; X
9     (T)
10    (JMPIFEQ L39)
12    (GETVALUE&PUSH 0)                   ; X
14    (T)
15    (JMPIFEQ L39)
17    (GETVALUE&PUSH 0)                   ; X
19    (CALLS2&JMPIF 8 L42)                ; NUMBERP
22    (GETVALUE&PUSH 0)                   ; X
24    (CALLS2&JMPIF 6 L55)                ; SYMBOLP
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL1&PUSH 8)                      ; MSTRING
31    (CALL1 9)                           ; MAKNAM
33    L33
33    (UNBIND1)
34    (SKIP&RET 2)
36    L36
36    (CONST 1)                           ; FALSE
37    (JMP L33)
39    L39
39    (CONST 2)                           ; TRUE
40    (JMP L33)
42    L42
42    (GETVALUE 0)                        ; X
44    (JMP L33)
46    L46
46    (GETVALUE&PUSH 0)                   ; X
48    (CALL1 6)                           ; EXPLODEN
50    (CDR&PUSH)
51    (CALL1 7)                           ; IMPLODE
53    (JMP L33)
55    L55
55    (GETVALUE&PUSH 0)                   ; X
57    (CONST&PUSH 3)                      ; REVERSEALIAS
58    (PUSH-UNBOUND 1)
60    (CALLS2 132)                        ; GET
62    (JMPIF1 L33)
64    (GETVALUE&PUSH 0)                   ; X
66    (CALL1&PUSH 4)                      ; FIRSTCHARN
68    (CONST&PUSH 5)                      ; (#\$ #\% #\&)
69    (PUSH-UNBOUND 3)
71    (CALLS1&JMPIF 180 L46)              ; MEMBER
74    (GETVALUE 0)                        ; X
76    (JMP L33)


Disassembly of function #:|(DEFINE-INITIAL-SYMBOLS + - ...)-334-3|
(CONST 0) = 
(+ - * ^ < = > |(| |)| [ ] |,| |:| ! |#| |'| |;| $ & ** ^^ |:=| |::| !! <= >=
 |''| && |::=|)
(CONST 1) = SYMBOLS-DEFINED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (SYMBOLS-DEFINED)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; (+ - * ^ < = > |(| |)| [ ] |,| ...)
1     (CALLS1 158)                        ; COPY-LIST
3     (SETVALUE 1)                        ; SYMBOLS-DEFINED
5     (VALUES0)
6     (SKIP&RET 1)


Disassembly of function #:|(DEFINE-INITIAL-SYMBOLS + - ...)-334-4|
(CONST 0) = 
(NIL (ANS NIL) (#\+ (ANS $+)) (#\- (ANS $-)) (#\* (ANS $*) (#\* (ANS $**)))
 (#\^ (ANS $^) (#\^ (ANS $^^))) (#\< (ANS $<) (#\= (ANS $<=))) (#\= (ANS $=))
 (#\> (ANS $>) (#\= (ANS $>=))) (#\( (ANS |$(|)) (#\) (ANS |$)|))
 (#\[ (ANS $[)) (#\] (ANS $])) (#\, (ANS |$,|))
 (#\: (ANS |$:|) (#\= (ANS |$:=|)) (#\: (ANS |$::|) (#\= (ANS |$::=|))))
 (#\! (ANS $!) (#\! (ANS $!!))) (#\# (ANS $#))
 (#\' (ANS |$'|) (#\' (ANS |$''|))) (#\; (ANS |$;|)) (#\$ (ANS $$))
 (#\& (ANS $&) (#\& (ANS $&&))))
(CONST 1) = MACSYMA-OPERATORS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (MACSYMA-OPERATORS)
6 byte-code instructions:
0     (PUSH-NIL 2)
2     (CONST&PUSH 0)                      ; (NIL (ANS NIL) (#\+ (ANS $+)) ...)
3     (PUSH-UNBOUND 3)
5     (CALLS1 172)                        ; SUBST
7     (SETVALUE 1)                        ; MACSYMA-OPERATORS
9     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO UPCASE (OPERATOR) ...)-335|
(CONST 0) = UPCASE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UPCASE>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; UPCASE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UPCASE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UPCASE>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; UPCASE
10    (SKIP&RET 1)


Disassembly of function UPCASE
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = SETQ
(CONST 3) = OPERATOR
(CONST 4) = INTERN
(CONST 5) = STRING-UPCASE
(CONST 6) = STRING
1 required argument
1 optional argument
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L27)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; SETQ
12    (CONST&PUSH 3)                      ; OPERATOR
13    (CONST&PUSH 4)                      ; INTERN
14    (CONST&PUSH 5)                      ; STRING-UPCASE
15    (CONST&PUSH 6)                      ; STRING
16    (LOAD&PUSH 5)
17    (LIST&PUSH 2)
19    (LIST&PUSH 2)
21    (LIST&PUSH 2)
23    (LIST 3)
25    (SKIP&RET 4)
27    L27
27    (LOAD&PUSH 2)
28    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
30    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $PREFIX (OPERATOR &OPTIONAL # ...) ...)-336|
(CONST 0) = $PREFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PREFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PREFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PREFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PREFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PREFIX
8     (SKIP&RET 1)


Disassembly of function $PREFIX
(CONST 0) = 180
(CONST 1) = RBP
(CONST 2) = $ANY
(CONST 3) = POS
(CONST 4) = (NUD . PARSE-PREFIX)
(CONST 5) = MSIZE-PREFIX
(CONST 6) = DIMENSION-PREFIX
(CONST 7) = DEF-OPERATOR
1 required argument
3 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RBP POS)
32 byte-code instructions:
0     (JMPIFBOUNDP 3 L4)
3     (CONST 0)                           ; 180
4     L4
4     (BIND 1)                            ; RBP
6     (JMPIFBOUNDP 5 L11)
9     (CONST 2)                           ; $ANY
10    (STORE 5)
11    L11
11    (JMPIFBOUNDP 4 L15)
14    (CONST 2)                           ; $ANY
15    L15
15    (BIND 3)                            ; POS
17    (LOAD&PUSH 10)
18    (CALLS1&PUSH 75)                    ; STRING
20    (PUSH-UNBOUND 2)
22    (CALLS1&PUSH 70)                    ; STRING-UPCASE
24    (PUSH-UNBOUND 1)
26    (CALLS1&STORE 212 10)               ; INTERN
29    (PUSH)
30    (GETVALUE&PUSH 3)                   ; POS
32    (PUSH-NIL 2)
34    (GETVALUE&PUSH 1)                   ; RBP
36    (LOAD&PUSH 13)
37    (NIL&PUSH)
38    (T&PUSH)
39    (CONST&PUSH 4)                      ; (NUD . PARSE-PREFIX)
40    (CONST&PUSH 5)                      ; MSIZE-PREFIX
41    (CONST&PUSH 6)                      ; DIMENSION-PREFIX
42    (NIL&PUSH)
43    (CALL 12 7)                         ; DEF-OPERATOR
46    (UNBIND 2)
48    (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN $POSTFIX (OPERATOR &OPTIONAL # ...) ...)-337|
(CONST 0) = $POSTFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $POSTFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $POSTFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $POSTFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $POSTFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $POSTFIX
8     (SKIP&RET 1)


Disassembly of function $POSTFIX
(CONST 0) = 180
(CONST 1) = LBP
(CONST 2) = $ANY
(CONST 3) = POS
(CONST 4) = (LED . PARSE-POSTFIX)
(CONST 5) = MSIZE-POSTFIX
(CONST 6) = DIMENSION-POSTFIX
(CONST 7) = DEF-OPERATOR
1 required argument
3 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LBP POS)
32 byte-code instructions:
0     (JMPIFBOUNDP 3 L4)
3     (CONST 0)                           ; 180
4     L4
4     (BIND 1)                            ; LBP
6     (JMPIFBOUNDP 5 L11)
9     (CONST 2)                           ; $ANY
10    (STORE 5)
11    L11
11    (JMPIFBOUNDP 4 L15)
14    (CONST 2)                           ; $ANY
15    L15
15    (BIND 3)                            ; POS
17    (LOAD&PUSH 10)
18    (CALLS1&PUSH 75)                    ; STRING
20    (PUSH-UNBOUND 2)
22    (CALLS1&PUSH 70)                    ; STRING-UPCASE
24    (PUSH-UNBOUND 1)
26    (CALLS1&STORE 212 10)               ; INTERN
29    (PUSH)
30    (GETVALUE&PUSH 3)                   ; POS
32    (GETVALUE&PUSH 1)                   ; LBP
34    (LOAD&PUSH 11)
35    (PUSH-NIL 2)
37    (T&PUSH)
38    (NIL&PUSH)
39    (CONST&PUSH 4)                      ; (LED . PARSE-POSTFIX)
40    (CONST&PUSH 5)                      ; MSIZE-POSTFIX
41    (CONST&PUSH 6)                      ; DIMENSION-POSTFIX
42    (NIL&PUSH)
43    (CALL 12 7)                         ; DEF-OPERATOR
46    (UNBIND 2)
48    (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN $INFIX (OPERATOR &OPTIONAL # ...) ...)-338|
(CONST 0) = $INFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INFIX
8     (SKIP&RET 1)


Disassembly of function $INFIX
(CONST 0) = 180
(CONST 1) = LBP
(CONST 2) = RBP
(CONST 3) = $ANY
(CONST 4) = POS
(CONST 5) = (LED . PARSE-INFIX)
(CONST 6) = MSIZE-INFIX
(CONST 7) = DIMENSION-INFIX
(CONST 8) = DEF-OPERATOR
1 required argument
5 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RBP LBP POS)
41 byte-code instructions:
0     (JMPIFBOUNDP 5 L4)
3     (CONST 0)                           ; 180
4     L4
4     (BIND 1)                            ; LBP
6     (JMPIFBOUNDP 7 L10)
9     (CONST 0)                           ; 180
10    L10
10    (BIND 2)                            ; RBP
12    (JMPIFBOUNDP 9 L18)
15    (CONST 3)                           ; $ANY
16    (STORE 9)
18    L18
18    (JMPIFBOUNDP 8 L24)
21    (CONST 3)                           ; $ANY
22    (STORE 8)
24    L24
24    (JMPIFBOUNDP 7 L28)
27    (CONST 3)                           ; $ANY
28    L28
28    (BIND 4)                            ; POS
30    (LOAD&PUSH 15)
31    (CALLS1&PUSH 75)                    ; STRING
33    (PUSH-UNBOUND 2)
35    (CALLS1&PUSH 70)                    ; STRING-UPCASE
37    (PUSH-UNBOUND 1)
39    (CALLS1&STORE 212 15)               ; INTERN
42    (PUSH)
43    (GETVALUE&PUSH 4)                   ; POS
45    (GETVALUE&PUSH 1)                   ; LBP
47    (LOAD&PUSH 15)
48    (GETVALUE&PUSH 2)                   ; RBP
50    (LOAD&PUSH 16)
51    (T&PUSH)
52    (T&PUSH)
53    (CONST&PUSH 5)                      ; (LED . PARSE-INFIX)
54    (CONST&PUSH 6)                      ; MSIZE-INFIX
55    (CONST&PUSH 7)                      ; DIMENSION-INFIX
56    (NIL&PUSH)
57    (CALL 12 8)                         ; DEF-OPERATOR
60    (UNBIND 3)
62    (SKIP&RET 7)


Disassembly of function #:|(DEFMFUN $NARY (OPERATOR &OPTIONAL # ...) ...)-339|
(CONST 0) = $NARY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NARY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NARY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NARY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NARY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NARY
8     (SKIP&RET 1)


Disassembly of function $NARY
(CONST 0) = 180
(CONST 1) = $ANY
(CONST 2) = POS
(CONST 3) = (LED . PARSE-NARY)
(CONST 4) = MSIZE-NARY
(CONST 5) = DIMENSION-NARY
(CONST 6) = DEF-OPERATOR
1 required argument
3 optional arguments
No rest parameter
No keyword parameters
reads special variable: (POS)
33 byte-code instructions:
0     (JMPIFBOUNDP 3 L5)
3     (CONST 0)                           ; 180
4     (STORE 3)
5     L5
5     (JMPIFBOUNDP 2 L10)
8     (CONST 1)                           ; $ANY
9     (STORE 2)
10    L10
10    (JMPIFBOUNDP 1 L14)
13    (CONST 1)                           ; $ANY
14    L14
14    (BIND 2)                            ; POS
16    (LOAD&PUSH 7)
17    (CALLS1&PUSH 75)                    ; STRING
19    (PUSH-UNBOUND 2)
21    (CALLS1&PUSH 70)                    ; STRING-UPCASE
23    (PUSH-UNBOUND 1)
25    (CALLS1&STORE 212 7)                ; INTERN
28    (PUSH)
29    (GETVALUE&PUSH 2)                   ; POS
31    (LOAD&PUSH 8)
32    (LOAD&PUSH 8)
33    (LOAD&PUSH 10)
34    (NIL&PUSH)
35    (T&PUSH)
36    (T&PUSH)
37    (CONST&PUSH 3)                      ; (LED . PARSE-NARY)
38    (CONST&PUSH 4)                      ; MSIZE-NARY
39    (CONST&PUSH 5)                      ; DIMENSION-NARY
40    (NIL&PUSH)
41    (CALL 12 6)                         ; DEF-OPERATOR
44    (UNBIND1)
45    (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN $MATCHFIX (OPERATOR MATCH &OPTIONAL ...) ...)-340|
(CONST 0) = $MATCHFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MATCHFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MATCHFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MATCHFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MATCHFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MATCHFIX
8     (SKIP&RET 1)


Disassembly of function $MATCHFIX
(CONST 0) = $ANY
(CONST 1) = POS
(CONST 2) = (NUD . PARSE-MATCHFIX)
(CONST 3) = MSIZE-MATCHFIX
(CONST 4) = DIMENSION-MATCH
(CONST 5) = DEF-OPERATOR
2 required arguments
2 optional arguments
No rest parameter
No keyword parameters
reads special variable: (POS)
26 byte-code instructions:
0     (JMPIFBOUNDP 2 L5)
3     (CONST 0)                           ; $ANY
4     (STORE 2)
5     L5
5     (JMPIFBOUNDP 1 L9)
8     (CONST 0)                           ; $ANY
9     L9
9     (BIND 1)                            ; POS
11    (LOAD&PUSH 7)
12    (CALLS1&PUSH 75)                    ; STRING
14    (PUSH-UNBOUND 2)
16    (CALLS1&PUSH 70)                    ; STRING-UPCASE
18    (PUSH-UNBOUND 1)
20    (CALLS1&STORE 212 7)                ; INTERN
23    (PUSH)
24    (GETVALUE&PUSH 1)                   ; POS
26    (NIL&PUSH)
27    (LOAD&PUSH 8)
28    (PUSH-NIL 4)
30    (CONST&PUSH 2)                      ; (NUD . PARSE-MATCHFIX)
31    (CONST&PUSH 3)                      ; MSIZE-MATCHFIX
32    (CONST&PUSH 4)                      ; DIMENSION-MATCH
33    (LOAD&PUSH 17)
34    (CALL 12 5)                         ; DEF-OPERATOR
37    (UNBIND1)
38    (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN $NOFIX (OPERATOR &OPTIONAL #) ...)-341|
(CONST 0) = $NOFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NOFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NOFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NOFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NOFIX
8     (SKIP&RET 1)


Disassembly of function $NOFIX
(CONST 0) = $ANY
(CONST 1) = POS
(CONST 2) = (NUD . PARSE-NOFIX)
(CONST 3) = MSIZE-NOFIX
(CONST 4) = DIMENSION-NOFIX
(CONST 5) = DEF-OPERATOR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (POS)
20 byte-code instructions:
0     (JMPIFBOUNDP 1 L4)
3     (CONST 0)                           ; $ANY
4     L4
4     (BIND 1)                            ; POS
6     (LOAD&PUSH 5)
7     (CALLS1&PUSH 75)                    ; STRING
9     (PUSH-UNBOUND 2)
11    (CALLS1&PUSH 70)                    ; STRING-UPCASE
13    (PUSH-UNBOUND 1)
15    (CALLS1&STORE 212 5)                ; INTERN
18    (PUSH)
19    (GETVALUE&PUSH 1)                   ; POS
21    (PUSH-NIL 6)
23    (CONST&PUSH 2)                      ; (NUD . PARSE-NOFIX)
24    (CONST&PUSH 3)                      ; MSIZE-NOFIX
25    (CONST&PUSH 4)                      ; DIMENSION-NOFIX
26    (NIL&PUSH)
27    (CALL 12 5)                         ; DEF-OPERATOR
30    (UNBIND1)
31    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DEF-OPERATOR (OP POS LBP ...) ...)-342|
(CONST 0) = DEF-OPERATOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-OPERATOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-OPERATOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-OPERATOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-OPERATOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEF-OPERATOR
8     (SKIP&RET 1)


Disassembly of function DEF-OPERATOR
(CONST 0) = POS
(CONST 1) = LBP
(CONST 2) = RBP
(CONST 3) = X
(CONST 4) = "Binding powers must be integers.~%~M is not an integer."
(CONST 5) = MERROR
(CONST 6) = MSTRINGP
(CONST 7) = DEFINE-SYMBOL
(CONST 8) = OP-SETUP
(CONST 9) = $NOUNIFY
(CONST 10) = EXPLODEN
(CONST 11) = (#\Space)
(CONST 12) = (#\Space)
(CONST 13) = MATCH
(CONST 14) = PUTPROP
(CONST 15) = 5
(CONST 16) = GRIND
(CONST 17) = DIMENSION
(CONST 18) = DISSYM
(CONST 19) = LPOS
(CONST 20) = RPOS
(CONST 21) = GETOPR
12 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (POS X LBP RBP)
writes special variable : (X)
148 byte-code instructions:
0     (LOAD 11)
1     (BIND 0)                            ; POS
3     (LOAD 13)
4     (BIND 1)                            ; LBP
6     (LOAD 14)
7     (BIND 2)                            ; RBP
9     (NIL)
10    (BIND 3)                            ; X
12    (GETVALUE 2)                        ; RBP
14    (JMPIFNOT L22)
16    (SETVALUE 3)                        ; X
18    (PUSH)
19    (CALLS2&JMPIFNOT 12 L32)            ; INTEGERP
22    L22
22    (GETVALUE 1)                        ; LBP
24    (JMPIFNOT L37)
26    (SETVALUE 3)                        ; X
28    (PUSH)
29    (CALLS2&JMPIF 12 L37)               ; INTEGERP
32    L32
32    (CONST&PUSH 4)                      ; "Binding powers must be integers.~%~M is not an integer."
33    (GETVALUE&PUSH 3)                   ; X
35    (CALL2 5)                           ; MERROR
37    L37
37    (LOAD&PUSH 24)
38    (CALL1&JMPIFNOT 6 L46)              ; MSTRINGP
41    (LOAD&PUSH 24)
42    (CALL1 7)                           ; DEFINE-SYMBOL
44    (STORE 24)
46    L46
46    (LOAD&PUSH 24)
47    (CALL1 8)                           ; OP-SETUP
49    (LOAD&PUSH 24)
50    (CALL1&PUSH 9)                      ; $NOUNIFY
52    (LOAD&PUSH 25)
54    (CALL1 10)                          ; EXPLODEN
56    (CDR&PUSH)
57    (LOAD&JMPIFNOT 15 L175)
61    (LOAD&PUSH 15)
62    (CALL1&JMPIFNOT 6 L70)              ; MSTRINGP
65    (LOAD&PUSH 15)
66    (CALL1 7)                           ; DEFINE-SYMBOL
68    (STORE 15)
70    L70
70    (LOAD&PUSH 15)
71    (CALL1 8)                           ; OP-SETUP
73    (LOAD&PUSH 26)
75    (LOAD&PUSH 16)
76    (CONST&PUSH 13)                     ; MATCH
77    (CALL 3 14)                         ; PUTPROP
80    (LOAD&PUSH 15)
81    (CONST&PUSH 15)                     ; 5
82    (CONST&PUSH 1)                      ; LBP
83    (CALL 3 14)                         ; PUTPROP
86    (LOAD&PUSH 0)
87    (LOAD&PUSH 16)
88    (CALL1 10)                          ; EXPLODEN
90    (CDR)
91    (CONS)
92    (STORE 0)
93    L93
93    (LOAD&PUSH 26)
95    (GETVALUE&PUSH 0)                   ; POS
97    (CONST&PUSH 0)                      ; POS
98    (CALL 3 14)                         ; PUTPROP
101   (LOAD&PUSH 26)
103   (LOAD&CDR&PUSH 19)
105   (LOAD&CAR&PUSH 20)
107   (CALL 3 14)                         ; PUTPROP
110   (LOAD&PUSH 26)
112   (LOAD&PUSH 18)
113   (CONST&PUSH 16)                     ; GRIND
114   (CALL 3 14)                         ; PUTPROP
117   (LOAD&PUSH 26)
119   (LOAD&PUSH 17)
120   (CONST&PUSH 17)                     ; DIMENSION
121   (CALL 3 14)                         ; PUTPROP
124   (LOAD&PUSH 1)
125   (LOAD&PUSH 17)
126   (CONST&PUSH 17)                     ; DIMENSION
127   (CALL 3 14)                         ; PUTPROP
130   (LOAD&PUSH 26)
132   (LOAD&PUSH 1)
133   (CONST&PUSH 18)                     ; DISSYM
134   (CALL 3 14)                         ; PUTPROP
137   (LOAD&PUSH 1)
138   (LOAD&PUSH 1)
139   (CONST&PUSH 18)                     ; DISSYM
140   (CALL 3 14)                         ; PUTPROP
143   (GETVALUE 2)                        ; RBP
145   (JMPIF L193)
147   (GETVALUE 1)                        ; LBP
149   (JMPIF L212)
151   L151
151   (LOAD&JMPIF 23 L231)
155   L155
155   (LOAD&JMPIFNOT 21 L165)
158   L158
158   (LOAD&PUSH 26)
160   (LOAD&PUSH 22)
161   (CONST&PUSH 20)                     ; RPOS
162   (CALL 3 14)                         ; PUTPROP
165   L165
165   (LOAD&PUSH 26)
167   (CALL1 21)                          ; GETOPR
169   (SKIP 2)
171   (UNBIND 4)
173   (SKIP&RET 13)
175   L175
175   (LOAD&JMPIFNOT 20 L179)
178   (CONST 11)                          ; (#\Space)
179   L179
179   (PUSH)
180   (LOAD&PUSH 1)
181   (LOAD&JMPIFNOT 21 L185)
184   (CONST 12)                          ; (#\Space)
185   L185
185   (PUSH)
186   (CALLSR&STORE 3 34 0)               ; APPEND
190   (JMP L93)
193   L193
193   (LOAD&PUSH 26)
195   (GETVALUE&PUSH 2)                   ; RBP
197   (CONST&PUSH 2)                      ; RBP
198   (CALL 3 14)                         ; PUTPROP
201   (LOAD&PUSH 1)
202   (GETVALUE&PUSH 2)                   ; RBP
204   (CONST&PUSH 2)                      ; RBP
205   (CALL 3 14)                         ; PUTPROP
208   (GETVALUE 1)                        ; LBP
210   (JMPIFNOT L151)
212   L212
212   (LOAD&PUSH 26)
214   (GETVALUE&PUSH 1)                   ; LBP
216   (CONST&PUSH 1)                      ; LBP
217   (CALL 3 14)                         ; PUTPROP
220   (LOAD&PUSH 1)
221   (GETVALUE&PUSH 1)                   ; LBP
223   (CONST&PUSH 1)                      ; LBP
224   (CALL 3 14)                         ; PUTPROP
227   (LOAD&JMPIFNOT 23 L155)
231   L231
231   (LOAD&PUSH 26)
233   (LOAD&PUSH 24)
234   (CONST&PUSH 19)                     ; LPOS
235   (CALL 3 14)                         ; PUTPROP
238   (LOAD&JMPIFNOT 21 L165)
242   (JMP L158)


Disassembly of function #:|(DEFUN OP-SETUP (OP) ...)-343|
(CONST 0) = OP-SETUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OP-SETUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OP-SETUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OP-SETUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OP-SETUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OP-SETUP
8     (SKIP&RET 1)


Disassembly of function OP-SETUP
(CONST 0) = OP
(CONST 1) = &
(CONST 2) = STRING*
(CONST 3) = IMPLODE
(CONST 4) = PUTPROP
(CONST 5) = OPR
(CONST 6) = OPERATORP1
(CONST 7) = $PROPS
(CONST 8) = MEMQ
(CONST 9) = MOPL
(CONST 10) = ADD2LNC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MOPL $PROPS)
writes special variable : (MOPL)
34 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; OP
2     (PUSH-UNBOUND 1)
4     (CALLS2&JMPIF 132 L14)              ; GET
7     (CONST&PUSH 1)                      ; &
8     (LOAD&PUSH 2)
9     (CALL1 2)                           ; STRING*
11    (CONS&PUSH)
12    (CALL1 3)                           ; IMPLODE
14    L14
14    (PUSH)
15    (LOAD&PUSH 2)
16    (LOAD&PUSH 1)
17    (CONST&PUSH 0)                      ; OP
18    (CALL 3 4)                          ; PUTPROP
21    (LOAD&PUSH 0)
22    (LOAD&PUSH 3)
23    (CONST&PUSH 5)                      ; OPR
24    (CALL 3 4)                          ; PUTPROP
27    (LOAD&PUSH 2)
28    (CALL1&JMPIFNOT 6 L44)              ; OPERATORP1
31    (LOAD&PUSH 0)
32    (GETVALUE 7)                        ; $PROPS
34    (CDR&PUSH)
35    (CALL2&JMPIF 8 L44)                 ; MEMQ
38    (LOAD&PUSH 0)
39    (GETVALUE 9)                        ; MOPL
41    (CONS)
42    (SETVALUE 9)                        ; MOPL
44    L44
44    (LOAD&PUSH 0)
45    (GETVALUE&PUSH 7)                   ; $PROPS
47    (CALL2 10)                          ; ADD2LNC
49    (SKIP&RET 3)


Disassembly of function #:|(DEFUN KILL-OPERATOR (OP) ...)-344|
(CONST 0) = KILL-OPERATOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KILL-OPERATOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KILL-OPERATOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KILL-OPERATOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KILL-OPERATOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KILL-OPERATOR
8     (SKIP&RET 1)


Disassembly of function KILL-OPERATOR
(CONST 0) = STRIPDOLLAR
(CONST 1) = UNDEFINE-SYMBOL
(CONST 2) = OP
(CONST 3) = $NOUNIFY
(CONST 4) = OPR
(CONST 5) = REMPROPCHK
(CONST 6) = 
(NUD-EXPR NUD-SUBR LED LED-EXPR LED-SUBR LBP RBP LPOS RPOS POS GRIND DIMENSION
 DISSYM OP)
(CONST 7) = X
(CONST 8) = (DIMENSION DISSYM LBP RBP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
48 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; STRIPDOLLAR
3     (CALL1 1)                           ; UNDEFINE-SYMBOL
5     (LOAD&PUSH 1)
6     (CONST&PUSH 2)                      ; OP
7     (PUSH-UNBOUND 1)
9     (CALLS2&PUSH 132)                   ; GET
11    (LOAD&PUSH 2)
12    (CALL1&PUSH 3)                      ; $NOUNIFY
14    (LOAD&PUSH 1)
15    (CONST&PUSH 4)                      ; OPR
16    (CALLS2 137)                        ; REMPROP
18    (LOAD&PUSH 1)
19    (CALL1 5)                           ; REMPROPCHK
21    (CONST&PUSH 6)                      ; (NUD-EXPR NUD-SUBR LED ...)
22    (JMP L39)
24    L24
24    (LOAD&CAR&PUSH 0)
26    (LOAD 0)
27    (BIND 7)                            ; X
29    (LOAD&PUSH 8)
30    (GETVALUE&PUSH 7)                   ; X
32    (CALLS2 137)                        ; REMPROP
34    (UNBIND1)
35    (SKIP 1)
37    (LOAD&CDR&STORE 0)
39    L39
39    (LOAD&PUSH 0)
40    (CALLS1&JMPIFNOT 146 L24)           ; ENDP
43    (SKIP 1)
45    (CONST&PUSH 8)                      ; (DIMENSION DISSYM LBP RBP)
46    (JMP L63)
48    L48
48    (LOAD&CAR&PUSH 0)
50    (LOAD 0)
51    (BIND 7)                            ; X
53    (LOAD&PUSH 5)
54    (GETVALUE&PUSH 7)                   ; X
56    (CALLS2 137)                        ; REMPROP
58    (UNBIND1)
59    (SKIP 1)
61    (LOAD&CDR&STORE 0)
63    L63
63    (LOAD&PUSH 0)
64    (CALLS1&JMPIFNOT 146 L48)           ; ENDP
67    (SKIP 1)
69    (CONST 8)                           ; (DIMENSION DISSYM LBP RBP)
70    (SKIP&RET 4)

WARNING in FIND-STREAM in lines 1830..1834 :
*STREAM-ALIST* is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(DEFUN FIND-STREAM (STREAM) ...)-345|
(CONST 0) = FIND-STREAM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FIND-STREAM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FIND-STREAM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FIND-STREAM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FIND-STREAM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FIND-STREAM
8     (SKIP&RET 1)


Disassembly of function FIND-STREAM
(CONST 0) = *STREAM-ALIST*
(CONST 1) = V
(CONST 2) = INSTREAM-STREAM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V *STREAM-ALIST*)
writes special variable : (V)
23 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *STREAM-ALIST*
2     (NIL)
3     (BIND 1)                            ; V
5     (JMP L24)
7     L7
7     (GETVALUE 1)                        ; V
9     (JMP L29)
11    L11
11    (LOAD 3)
12    (CAR)
13    (SETVALUE 1)                        ; V
15    (LOAD&PUSH 5)
16    (GETVALUE&PUSH 1)                   ; V
18    (CALL1 2)                           ; INSTREAM-STREAM
20    (JMPIFEQ L7)
22    (LOAD&CDR&STORE 3)
24    L24
24    (LOAD&PUSH 3)
25    (CALLS1&JMPIFNOT 146 L11)           ; ENDP
28    (NIL)
29    L29
29    (UNBIND1)
30    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ADD-LINEINFO (LIS) ...)-346|
(CONST 0) = ADD-LINEINFO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADD-LINEINFO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADD-LINEINFO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADD-LINEINFO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADD-LINEINFO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADD-LINEINFO
8     (SKIP&RET 1)


Disassembly of function ADD-LINEINFO
(CONST 0) = *PARSE-WINDOW*
(CONST 1) = *STANDARD-INPUT*
(CONST 2) = *PARSE-STREAM*
(CONST 3) = FIND-STREAM
(CONST 4) = GET-INSTREAM
(CONST 5) = ST
(CONST 6) = INSTREAM-LINE
(CONST 7) = N
(CONST 8) = INSTREAM-NAME
(CONST 9) = *CURRENT-LINE-INFO*
(CONST 10) = SRC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N *CURRENT-LINE-INFO* ST *PARSE-STREAM* *STANDARD-INPUT* *PARSE-WINDOW*)
writes special variable : (*CURRENT-LINE-INFO*)
63 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L66)
3     (GETVALUE&PUSH 0)                   ; *PARSE-WINDOW*
5     (GETVALUE 1)                        ; *STANDARD-INPUT*
7     (JMPIFNOTEQ L14)
9     (GETVALUE&PUSH 2)                   ; *PARSE-STREAM*
11    (CALL1&JMPIFNOT 3 L66)              ; FIND-STREAM
14    L14
14    (GETVALUE&PUSH 2)                   ; *PARSE-STREAM*
16    (CALL1 4)                           ; GET-INSTREAM
18    (BIND 5)                            ; ST
20    (GETVALUE&PUSH 5)                   ; ST
22    (CALL1 6)                           ; INSTREAM-LINE
24    (BIND 7)                            ; N
26    (GETVALUE&PUSH 5)                   ; ST
28    (CALL1&PUSH 8)                      ; INSTREAM-NAME
30    (LOAD&JMPIFNOT 0 L69)
33    (GETVALUE 9)                        ; *CURRENT-LINE-INFO*
35    (CDR)
36    (CAR&PUSH)
37    (LOAD 1)
38    (JMPIFEQ L76)
40    (GETVALUE&PUSH 7)                   ; N
42    (LOAD&PUSH 1)
43    (CONST&PUSH 10)                     ; SRC
44    (LIST 3)
46    L46
46    (SETVALUE 9)                        ; *CURRENT-LINE-INFO*
48    (LOAD 8)
49    (CDR)
50    (JMPIFNOT L92)
52    (LOAD&PUSH 8)
53    (GETVALUE&PUSH 9)                   ; *CURRENT-LINE-INFO*
55    (LIST&PUSH 1)
57    (CALLSR 2 34)                       ; APPEND
60    L60
60    (SKIP 1)
62    (UNBIND 2)
64    (SKIP&RET 2)
66    L66
66    (LOAD 1)
67    (SKIP&RET 2)
69    L69
69    (LOAD 8)
70    (JMP L60)
72    L72
72    (GETVALUE 9)                        ; *CURRENT-LINE-INFO*
74    (JMP L46)
76    L76
76    (GETVALUE 9)                        ; *CURRENT-LINE-INFO*
78    (CAR&PUSH)
79    (GETVALUE&PUSH 7)                   ; N
81    (CALLS2&JMPIF 1 L72)                ; EQL
84    (GETVALUE&PUSH 7)                   ; N
86    (GETVALUE 9)                        ; *CURRENT-LINE-INFO*
88    (CDR)
89    (CONS)
90    (JMP L46)
92    L92
92    (LOAD&CAR&PUSH 8)
94    (GETVALUE&PUSH 9)                   ; *CURRENT-LINE-INFO*
96    (LIST 2)
98    (JMP L60)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *STREAM-ALIST* NIL) ...)-347-1|
(CONST 0) = (SPECIAL *STREAM-ALIST*)
(CONST 1) = *STREAM-ALIST*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *STREAM-ALIST*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *STREAM-ALIST*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *STREAM-ALIST*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (VALUES0)
12    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *STREAM-ALIST* NIL) ...)-347-2|
(CONST 0) = INSTREAM-NAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INSTREAM-NAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM-NAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INSTREAM-NAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INSTREAM-NAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function INSTREAM-NAME
(CONST 0) = INSTREAM-STREAM-NAME
(CONST 1) = INSTREAM-STREAM
(CONST 2) = STREAM-NAME
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; INSTREAM-STREAM-NAME
3     (JMPIF1 L12)
5     (LOAD&PUSH 1)
6     (CALL1&PUSH 1)                      ; INSTREAM-STREAM
8     (CALL1 2)                           ; STREAM-NAME
10    (SKIP&RET 2)
12    L12
12    (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *STREAM-ALIST* NIL) ...)-347-3|
(CONST 0) = STREAM-NAME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STREAM-NAME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STREAM-NAME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STREAM-NAME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STREAM-NAME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function STREAM-NAME
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS1&PUSH 231)                   ; PATHNAME
3     (PUSH-UNBOUND 1)
5     (CALLS1 244)                        ; NAMESTRING
7     (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *STREAM-ALIST* NIL) ...)-347-4|
(CONST 0) = INSTREAM
(CONST 1) = STRUCTURE-OBJECT
(CONST 2) = SYSTEM::DEFSTRUCT-DESCRIPTION
(CONST 3) = 0
(CONST 4) = MAKE-INSTREAM
(CONST 5) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 6) = #<COMPILED-CLOSURE MAKE-INSTREAM>
(CONST 7) = 
(#(STREAM (:STREAM) 1 (NIL) NIL T NIL) #(LINE (:LINE) 2 (NIL . 0) 0 FIXNUM NIL)
 #(STREAM-NAME (:STREAM-NAME) 3 (NIL) NIL T NIL))
(CONST 8) = CLOS::DEFINE-STRUCTURE-CLASS
(CONST 9) = (INLINE INSTREAM-P)
(CONST 10) = INSTREAM-P
(CONST 11) = SYSTEM::INLINE-EXPANSION
(CONST 12) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN INSTREAM-P))
 (BLOCK INSTREAM-P (SYSTEM::%STRUCTURE-TYPE-P 'INSTREAM SYSTEM::OBJECT)))
(CONST 13) = #<COMPILED-CLOSURE INSTREAM-P>
(CONST 14) = (INLINE COPY-INSTREAM)
(CONST 15) = COPY-INSTREAM
(CONST 16) = 
((STRUCTURE) (DECLARE (SYSTEM::IN-DEFUN COPY-INSTREAM))
 (BLOCK COPY-INSTREAM (COPY-STRUCTURE STRUCTURE)))
(CONST 17) = #<COMPILED-CLOSURE COPY-INSTREAM>
(CONST 18) = (FUNCTION INSTREAM-STREAM (INSTREAM) T)
(CONST 19) = (INLINE INSTREAM-STREAM)
(CONST 20) = INSTREAM-STREAM
(CONST 21) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN INSTREAM-STREAM))
 (BLOCK INSTREAM-STREAM
  (THE T (SYSTEM::%STRUCTURE-REF 'INSTREAM SYSTEM::OBJECT 1))))
(CONST 22) = #<COMPILED-CLOSURE INSTREAM-STREAM>
(CONST 23) = SYSTEM::DEFSTRUCT-READER
(CONST 24) = (FUNCTION INSTREAM-LINE (INSTREAM) FIXNUM)
(CONST 25) = (INLINE INSTREAM-LINE)
(CONST 26) = INSTREAM-LINE
(CONST 27) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN INSTREAM-LINE))
 (BLOCK INSTREAM-LINE
  (THE FIXNUM (SYSTEM::%STRUCTURE-REF 'INSTREAM SYSTEM::OBJECT 2))))
(CONST 28) = #<COMPILED-CLOSURE INSTREAM-LINE>
(CONST 29) = (FUNCTION INSTREAM-STREAM-NAME (INSTREAM) T)
(CONST 30) = (INLINE INSTREAM-STREAM-NAME)
(CONST 31) = INSTREAM-STREAM-NAME
(CONST 32) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN INSTREAM-STREAM-NAME))
 (BLOCK INSTREAM-STREAM-NAME
  (THE T (SYSTEM::%STRUCTURE-REF 'INSTREAM SYSTEM::OBJECT 3))))
(CONST 33) = #<COMPILED-CLOSURE INSTREAM-STREAM-NAME>
(CONST 34) = SYSTEM::DEFSTRUCT-WRITER
(CONST 35) = SYSTEM::SETF-EXPANDER
(CONST 36) = -1
(CONST 37) = 1
(CONST 38) = #<COMPILED-CLOSURE SETF-INSTREAM-STREAM>
(CONST 39) = SETF
(CONST 40) = SYSTEM::%SET-DOCUMENTATION
(CONST 41) = #<COMPILED-CLOSURE SETF-INSTREAM-LINE>
(CONST 42) = #<COMPILED-CLOSURE SETF-INSTREAM-STREAM-NAME>
(CONST 43) = STRUCTURE
(CONST 44) = CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
163 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 1)
3     (CONST&PUSH 0)                      ; INSTREAM
4     (CONST&PUSH 1)                      ; STRUCTURE-OBJECT
5     (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 132)                   ; GET
10    (CONST 3)                           ; 0
11    (SVREF)
12    (CONS)
13    (STOREC 0 0)
16    (CONST&PUSH 4)                      ; MAKE-INSTREAM
17    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
19    (CONST&PUSH 4)                      ; MAKE-INSTREAM
20    (LOAD&PUSH 1)
21    (COPY-CLOSURE&PUSH 6 1)             ; #<COMPILED-CLOSURE MAKE-INSTREAM>
24    (CALLS2 130)                        ; SYSTEM::%PUTD
26    (CONST&PUSH 0)                      ; INSTREAM
27    (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
28    (LOADC&PUSH 2 0)
31    (T&PUSH)
32    (CONST&PUSH 4)                      ; MAKE-INSTREAM
33    (CONST&PUSH 7)                      ; (#(STREAM # ...) #(LINE # ...) ...)
34    (CALLSR&PUSH 4 0)                   ; VECTOR
37    (CALLS2 136)                        ; SYSTEM::%PUT
39    (SKIP 1)
41    (CONST&PUSH 0)                      ; INSTREAM
42    (CALL1 8)                           ; CLOS::DEFINE-STRUCTURE-CLASS
44    (CONST&PUSH 9)                      ; (INLINE INSTREAM-P)
45    (CALLS1 90)                         ; PROCLAIM
47    (CONST&PUSH 10)                     ; INSTREAM-P
48    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
50    (CONST&PUSH 10)                     ; INSTREAM-P
51    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
52    (CONST&PUSH 12)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
53    (CALLS2 136)                        ; SYSTEM::%PUT
55    (CONST&PUSH 10)                     ; INSTREAM-P
56    (CONST&PUSH 13)                     ; #<COMPILED-CLOSURE INSTREAM-P>
57    (CALLS2 130)                        ; SYSTEM::%PUTD
59    (CONST&PUSH 14)                     ; (INLINE COPY-INSTREAM)
60    (CALLS1 90)                         ; PROCLAIM
62    (CONST&PUSH 15)                     ; COPY-INSTREAM
63    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
65    (CONST&PUSH 15)                     ; COPY-INSTREAM
66    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
67    (CONST&PUSH 16)                     ; ((STRUCTURE) (DECLARE #) ...)
68    (CALLS2 136)                        ; SYSTEM::%PUT
70    (CONST&PUSH 15)                     ; COPY-INSTREAM
71    (CONST&PUSH 17)                     ; #<COMPILED-CLOSURE COPY-INSTREAM>
72    (CALLS2 130)                        ; SYSTEM::%PUTD
74    (CONST&PUSH 18)                     ; (FUNCTION INSTREAM-STREAM ...)
75    (CALLS1 90)                         ; PROCLAIM
77    (CONST&PUSH 19)                     ; (INLINE INSTREAM-STREAM)
78    (CALLS1 90)                         ; PROCLAIM
80    (CONST&PUSH 20)                     ; INSTREAM-STREAM
81    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
83    (CONST&PUSH 20)                     ; INSTREAM-STREAM
84    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
85    (CONST&PUSH 21)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
86    (CALLS2 136)                        ; SYSTEM::%PUT
88    (CONST&PUSH 20)                     ; INSTREAM-STREAM
89    (CONST&PUSH 22)                     ; #<COMPILED-CLOSURE INSTREAM-STREAM>
90    (CALLS2 130)                        ; SYSTEM::%PUTD
92    (CONST&PUSH 20)                     ; INSTREAM-STREAM
93    (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
94    (CONST&PUSH 0)                      ; INSTREAM
95    (CALLS2 136)                        ; SYSTEM::%PUT
97    (CONST&PUSH 24)                     ; (FUNCTION INSTREAM-LINE ...)
98    (CALLS1 90)                         ; PROCLAIM
100   (CONST&PUSH 25)                     ; (INLINE INSTREAM-LINE)
101   (CALLS1 90)                         ; PROCLAIM
103   (CONST&PUSH 26)                     ; INSTREAM-LINE
104   (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
106   (CONST&PUSH 26)                     ; INSTREAM-LINE
107   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
108   (CONST&PUSH 27)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
109   (CALLS2 136)                        ; SYSTEM::%PUT
111   (CONST&PUSH 26)                     ; INSTREAM-LINE
112   (CONST&PUSH 28)                     ; #<COMPILED-CLOSURE INSTREAM-LINE>
113   (CALLS2 130)                        ; SYSTEM::%PUTD
115   (CONST&PUSH 26)                     ; INSTREAM-LINE
116   (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
117   (CONST&PUSH 0)                      ; INSTREAM
118   (CALLS2 136)                        ; SYSTEM::%PUT
120   (CONST&PUSH 29)                     ; (FUNCTION INSTREAM-STREAM-NAME ...)
121   (CALLS1 90)                         ; PROCLAIM
123   (CONST&PUSH 30)                     ; (INLINE INSTREAM-STREAM-NAME)
125   (CALLS1 90)                         ; PROCLAIM
127   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
129   (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
131   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
133   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
134   (CONST&PUSH 32)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
136   (CALLS2 136)                        ; SYSTEM::%PUT
138   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
140   (CONST&PUSH 33)                     ; #<COMPILED-CLOSURE INSTREAM-STREAM-NAME>
142   (CALLS2 130)                        ; SYSTEM::%PUTD
144   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
146   (CONST&PUSH 23)                     ; SYSTEM::DEFSTRUCT-READER
147   (CONST&PUSH 0)                      ; INSTREAM
148   (CALLS2 136)                        ; SYSTEM::%PUT
150   (CONST&PUSH 20)                     ; INSTREAM-STREAM
151   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
153   (CALLS2 137)                        ; REMPROP
155   (CONST&PUSH 20)                     ; INSTREAM-STREAM
156   (CONST&PUSH 35)                     ; SYSTEM::SETF-EXPANDER
158   (CONST&PUSH 36)                     ; -1
160   (CONST&PUSH 37)                     ; 1
162   (CONST 38)                          ; #<COMPILED-CLOSURE SETF-INSTREAM-STREAM>
164   (LIST*&PUSH 2)
166   (CALLS2 136)                        ; SYSTEM::%PUT
168   (CONST&PUSH 20)                     ; INSTREAM-STREAM
169   (CONST&PUSH 39)                     ; SETF
171   (NIL&PUSH)
172   (CALL 3 40)                         ; SYSTEM::%SET-DOCUMENTATION
175   (CONST&PUSH 20)                     ; INSTREAM-STREAM
176   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
178   (CONST&PUSH 0)                      ; INSTREAM
179   (CALLS2 136)                        ; SYSTEM::%PUT
181   (CONST&PUSH 26)                     ; INSTREAM-LINE
182   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
184   (CALLS2 137)                        ; REMPROP
186   (CONST&PUSH 26)                     ; INSTREAM-LINE
187   (CONST&PUSH 35)                     ; SYSTEM::SETF-EXPANDER
189   (CONST&PUSH 36)                     ; -1
191   (CONST&PUSH 37)                     ; 1
193   (CONST 41)                          ; #<COMPILED-CLOSURE SETF-INSTREAM-LINE>
195   (LIST*&PUSH 2)
197   (CALLS2 136)                        ; SYSTEM::%PUT
199   (CONST&PUSH 26)                     ; INSTREAM-LINE
200   (CONST&PUSH 39)                     ; SETF
202   (NIL&PUSH)
203   (CALL 3 40)                         ; SYSTEM::%SET-DOCUMENTATION
206   (CONST&PUSH 26)                     ; INSTREAM-LINE
207   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
209   (CONST&PUSH 0)                      ; INSTREAM
210   (CALLS2 136)                        ; SYSTEM::%PUT
212   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
214   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
216   (CALLS2 137)                        ; REMPROP
218   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
220   (CONST&PUSH 35)                     ; SYSTEM::SETF-EXPANDER
222   (CONST&PUSH 36)                     ; -1
224   (CONST&PUSH 37)                     ; 1
226   (CONST 42)                          ; #<COMPILED-CLOSURE SETF-INSTREAM-STREAM-NAME>
228   (LIST*&PUSH 2)
230   (CALLS2 136)                        ; SYSTEM::%PUT
232   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
234   (CONST&PUSH 39)                     ; SETF
236   (NIL&PUSH)
237   (CALL 3 40)                         ; SYSTEM::%SET-DOCUMENTATION
240   (CONST&PUSH 31)                     ; INSTREAM-STREAM-NAME
242   (CONST&PUSH 34)                     ; SYSTEM::DEFSTRUCT-WRITER
244   (CONST&PUSH 0)                      ; INSTREAM
245   (CALLS2 136)                        ; SYSTEM::%PUT
247   (CONST&PUSH 0)                      ; INSTREAM
248   (CONST&PUSH 43)                     ; STRUCTURE
250   (NIL&PUSH)
251   (CALL 3 40)                         ; SYSTEM::%SET-DOCUMENTATION
254   (CONST&PUSH 0)                      ; INSTREAM
255   (CALL1 44)                          ; CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD
257   (VALUES0)
258   (SKIP&RET 1)


Disassembly of function MAKE-INSTREAM
(CONST 0) = NIL
(CONST 1) = :STREAM
(CONST 2) = :LINE
(CONST 3) = :STREAM-NAME
(CONST 4) = 0
(CONST 5) = 4
(CONST 6) = INSTREAM
(CONST 7) = 1
(CONST 8) = 2
(CONST 9) = 3
0 required arguments
0 optional arguments
No rest parameter
3 keyword parameters: :STREAM, :LINE, :STREAM-NAME.
26 byte-code instructions:
0     (UNBOUND->NIL 3)
2     (JMPIFBOUNDP 2 L7)
5     (CONST 4)                           ; 0
6     (STORE 2)
7     L7
7     (UNBOUND->NIL 1)
9     (LOADV&PUSH 0 1)
12    (CONST&PUSH 5)                      ; 4
13    (CALLS2&PUSH 48)                    ; SYSTEM::%MAKE-STRUCTURE
15    (CONST&PUSH 6)                      ; INSTREAM
16    (LOAD&PUSH 1)
17    (CONST&PUSH 7)                      ; 1
18    (LOAD&PUSH 7)
19    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
21    (CONST&PUSH 6)                      ; INSTREAM
22    (LOAD&PUSH 1)
23    (CONST&PUSH 8)                      ; 2
24    (LOAD&PUSH 6)
25    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
27    (CONST&PUSH 6)                      ; INSTREAM
28    (LOAD&PUSH 1)
29    (CONST&PUSH 9)                      ; 3
30    (LOAD&PUSH 5)
31    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
33    (POP)
34    (SKIP&RET 4)


Disassembly of function INSTREAM-P
(CONST 0) = INSTREAM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM
1     (LOAD&PUSH 2)
2     (CALLS2 50)                         ; SYSTEM::%STRUCTURE-TYPE-P
4     (SKIP&RET 2)


Disassembly of function COPY-INSTREAM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 49)                         ; COPY-STRUCTURE
3     (SKIP&RET 2)


Disassembly of function INSTREAM-STREAM
(CONST 0) = INSTREAM
(CONST 1) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 1
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function INSTREAM-LINE
(CONST 0) = INSTREAM
(CONST 1) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 2
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function INSTREAM-STREAM-NAME
(CONST 0) = INSTREAM
(CONST 1) = 3
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; INSTREAM
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; 3
3     (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
5     (SKIP&RET 2)


Disassembly of function SETF-INSTREAM-STREAM
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'INSTREAM
(CONST 2) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'INSTREAM
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 1
7     (LOAD&PUSH 6)
8     (LIST 5)
10    (SKIP&RET 4)


Disassembly of function SETF-INSTREAM-LINE
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'INSTREAM
(CONST 2) = 2
(CONST 3) = THE
(CONST 4) = FIXNUM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'INSTREAM
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 2
7     (CONST&PUSH 3)                      ; THE
8     (CONST&PUSH 4)                      ; FIXNUM
9     (LOAD&PUSH 8)
10    (LIST&PUSH 3)
12    (LIST 5)
14    (SKIP&RET 4)


Disassembly of function SETF-INSTREAM-STREAM-NAME
(CONST 0) = SYSTEM::%STRUCTURE-STORE
(CONST 1) = 'INSTREAM
(CONST 2) = 3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SYSTEM::%STRUCTURE-STORE
4     (CONST&PUSH 1)                      ; 'INSTREAM
5     (LOAD&PUSH 2)
6     (CONST&PUSH 2)                      ; 3
7     (LOAD&PUSH 6)
8     (LIST 5)
10    (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *STREAM-ALIST* NIL) ...)-347-5|
(CONST 0) = CLEANUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CLEANUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CLEANUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CLEANUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CLEANUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function CLEANUP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *STREAM-ALIST* NIL) ...)-347-6|
(CONST 0) = GET-INSTREAM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GET-INSTREAM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GET-INSTREAM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GET-INSTREAM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GET-INSTREAM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function GET-INSTREAM
(CONST 0) = *STREAM-ALIST*
(CONST 1) = V
(CONST 2) = INSTREAM
(CONST 3) = 1
(CONST 4) = NAME
(CONST 5) = ERRSET
(CONST 6) = #(NIL)
(CONST 7) = (#(ERROR 17) 1 . 1)
(CONST 8) = :STREAM
(CONST 9) = :STREAM-NAME
(CONST 10) = MAKE-INSTREAM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NAME ERRSET V *STREAM-ALIST*)
writes special variables : (*STREAM-ALIST* NAME V)
67 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; *STREAM-ALIST*
2     (NIL)
3     (BIND 1)                            ; V
5     (JMP L54)
7     L7
7     (GETVALUE 1)                        ; V
9     (UNBIND1)
10    (SKIP 1)
12    (JMPIF1 L103)
15    (JMP L61)
17    L17
17    (HANDLER-BEGIN&PUSH)
18    (LOAD 0)
19    (STOREI 0 0 4)
23    (GO-I 0 0 2 0)
28    L28
28    (GETVALUE 5)                        ; ERRSET
30    (JMPIFNOT L82)
32    (LOAD&PUSH 4)
33    (CALLSR 0 29)                       ; ERROR
36    L36
36    (LOAD 3)
37    (CAR)
38    (SETVALUE 1)                        ; V
40    (LOAD&PUSH 5)
41    (GETVALUE&PUSH 1)                   ; V
43    (CONST&PUSH 2)                      ; INSTREAM
44    (LOAD&PUSH 1)
45    (CONST&PUSH 3)                      ; 1
46    (CALLS2 46)                         ; SYSTEM::%STRUCTURE-REF
48    (SKIP 1)
50    (JMPIFEQ L7)
52    (LOAD&CDR&STORE 3)
54    L54
54    (LOAD&PUSH 3)
55    (CALLS1&JMPIFNOT 146 L36)           ; ENDP
58    (UNBIND1)
59    (SKIP 1)
61    L61
61    (NIL)
62    (BIND 4)                            ; NAME
64    (NIL)
65    (BIND 5)                            ; ERRSET
67    (NIL&PUSH)
68    (TAGBODY-OPEN 6 L28)                ; #(NIL)
71    (HANDLER-OPEN 7 L17)                ; (#(ERROR 17) 1 . 1)
73    (LOAD&PUSH 16)
74    (PUSH-UNBOUND 1)
76    (CALLS1 244)                        ; NAMESTRING
78    (SETVALUE 4)                        ; NAME
80    (SKIP 4)
82    L82
82    (TAGBODY-CLOSE)
83    (SKIP 1)
85    (CONST&PUSH 8)                      ; :STREAM
86    (LOAD&PUSH 8)
87    (CONST&PUSH 9)                      ; :STREAM-NAME
88    (GETVALUE&PUSH 4)                   ; NAME
90    (CALL&PUSH 4 10)                    ; MAKE-INSTREAM
93    (GETVALUE 0)                        ; *STREAM-ALIST*
95    (CONS)
96    (SETVALUE 0)                        ; *STREAM-ALIST*
98    (CAR)
99    (UNBIND 2)
101   (SKIP&RET 2)
103   L103
103   (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFVAR *STREAM-ALIST* NIL) ...)-347-7|
(CONST 0) = NEWLINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWLINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWLINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWLINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWLINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWLINE
8     (SKIP&RET 1)


Disassembly of function NEWLINE
(CONST 0) = GET-INSTREAM
(CONST 1) = INSTREAM
(CONST 2) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALL1&PUSH 0)                      ; GET-INSTREAM
3     (CONST&PUSH 1)                      ; INSTREAM
4     (LOAD&PUSH 1)
5     (CONST&PUSH 2)                      ; 2
6     (CALLS2&PUSH 46)                    ; SYSTEM::%STRUCTURE-REF
8     (CALLS2&PUSH 150)                   ; 1+
10    (CONST&PUSH 1)                      ; INSTREAM
11    (LOAD&PUSH 2)
12    (CONST&PUSH 2)                      ; 2
13    (LOAD&PUSH 3)
14    (CALLS2 47)                         ; SYSTEM::%STRUCTURE-STORE
16    (SKIP 2)
18    (VALUES0)
19    (SKIP&RET 3)


Wrote file binary-clisp/nparse.fas
Wrote file /cygdrive/e/temp/maxima/src/nparse.lis