Listing of compilation of file /cygdrive/e/temp/maxima/src/hypgeo.lisp
on 2002-12-17 13:36:13 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/hypgeo.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE HYPGEO)-2|
(CONST 0) = HYPGEO
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYPGEO
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VAR PAR ...))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC)-4|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN BESS (V Z FLG) ...)-5|
(CONST 0) = BESS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESS
8     (SKIP&RET 1)


Disassembly of function BESS
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = (MQAPPLY)
(CONST 3) = J
(CONST 4) = ($%J ARRAY)
(CONST 5) = ($%I ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
19 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; V
3     (LOAD 5)
4     (BIND 1)                            ; Z
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (LOAD&PUSH 8)
8     (JMPIFEQTO 3 L25)                   ; J
11    (CONST 5)                           ; ($%I ARRAY)
12    L12
12    (PUSH)
13    (GETVALUE&PUSH 0)                   ; V
15    (LIST&PUSH 2)
17    (GETVALUE&PUSH 1)                   ; Z
19    (LIST 3)
21    (UNBIND 2)
23    (SKIP&RET 4)
25    L25
25    (CONST 4)                           ; ($%J ARRAY)
26    (JMP L12)

WARNING in (DEFUN CDRAS (A L) ...)-6 in line 29 :
Function CDRAS
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in lines 150..151

Disassembly of function #:|(DEFUN CDRAS (A L) ...)-6|
(CONST 0) = CDRAS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CDRAS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CDRAS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CDRAS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CDRAS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CDRAS
8     (SKIP&RET 1)


Disassembly of function CDRAS
(CONST 0) = A
(CONST 1) = L
(CONST 2) = ZL-ASSOC
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L A)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (GETVALUE&PUSH 0)                   ; A
8     (GETVALUE&PUSH 1)                   ; L
10    (CALL2 2)                           ; ZL-ASSOC
12    (CDR)
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN GM (EXPR) ...)-7|
(CONST 0) = GM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GM
8     (SKIP&RET 1)


Disassembly of function GM
(CONST 0) = (%GAMMA)
(CONST 1) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; (%GAMMA)
1     (LOAD&PUSH 2)
2     (LIST&PUSH 2)
4     (NIL&PUSH)
5     (CALL2 1)                           ; SIMPLIFYA
7     (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIN% (ARG) ...)-8|
(CONST 0) = SIN%
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIN%>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIN%
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIN%
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIN%>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIN%
8     (SKIP&RET 1)


Disassembly of function SIN%
(CONST 0) = ARG
(CONST 1) = (%SIN)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; (%SIN)
4     (GETVALUE&PUSH 0)                   ; ARG
6     (LIST 2)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN NUMP (X) ...)-9|
(CONST 0) = NUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUMP
8     (SKIP&RET 1)


Disassembly of function NUMP
(CONST 0) = X
(CONST 1) = SIMPLIFYA
(CONST 2) = RAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L15)
7     (GETVALUE 0)                        ; X
9     (JMPIFCONSP L21)
11    (NIL)
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (GETVALUE&PUSH 0)                   ; X
17    (CALLS2 8)                          ; NUMBERP
19    (JMP L12)
21    L21
21    (GETVALUE&PUSH 0)                   ; X
23    (NIL&PUSH)
24    (CALL2 1)                           ; SIMPLIFYA
26    (CAR)
27    (CAR&PUSH)
28    (CONST 2)                           ; RAT
29    (EQ)
30    (JMP L12)


Disassembly of function #:|(DEFUN COS% (ARG) ...)-10|
(CONST 0) = COS%
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COS%>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COS%
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COS%
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COS%>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COS%
8     (SKIP&RET 1)


Disassembly of function COS%
(CONST 0) = ARG
(CONST 1) = (%COS)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; (%COS)
4     (GETVALUE&PUSH 0)                   ; ARG
6     (LIST 2)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN NEGINP (A) ...)-11|
(CONST 0) = NEGINP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEGINP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEGINP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEGINP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEGINP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEGINP
8     (SKIP&RET 1)


Disassembly of function NEGINP
(CONST 0) = A
(CONST 1) = MAXIMA-INTEGERP
(CONST 2) = ZERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1&JMPIF 1 L12)                 ; MAXIMA-INTEGERP
8     (NIL)
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (GETVALUE&PUSH 0)                   ; A
14    (CALL1 2)                           ; ZERP
16    (JMPIF1 L9)
18    (GETVALUE&PUSH 0)                   ; A
20    (CALLS2 147)                        ; MINUSP
22    (JMP L9)


Disassembly of function #:|(DEFUN NOTNUMP (X) ...)-12|
(CONST 0) = NOTNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NOTNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NOTNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NOTNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NOTNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NOTNUMP
8     (SKIP&RET 1)


Disassembly of function NOTNUMP
(CONST 0) = X
(CONST 1) = NUMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; NUMP
7     (NOT)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN NEGNUMP (X) ...)-13|
(CONST 0) = NEGNUMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEGNUMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEGNUMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEGNUMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEGNUMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEGNUMP
8     (SKIP&RET 1)


Disassembly of function NEGNUMP
(CONST 0) = X
(CONST 1) = MAXIMA-INTEGERP
(CONST 2) = SIMPLIFYA
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIFNOT 1 L16)              ; MAXIMA-INTEGERP
8     (GETVALUE 0)                        ; X
10    L10
10    (PUSH)
11    (CALLS2 147)                        ; MINUSP
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (NIL&PUSH)
19    (CALL2 2)                           ; SIMPLIFYA
21    (CDR)
22    (CAR)
23    (JMP L10)


Disassembly of function #:|(DEFUN EXPOR1P (EXP) ...)-14|
(CONST 0) = EXPOR1P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPOR1P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPOR1P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPOR1P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPOR1P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPOR1P
8     (SKIP&RET 1)


Disassembly of function EXPOR1P
(CONST 0) = EXP
(CONST 1) = 1
(CONST 2) = $%E
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST 1)                           ; 1
6     (EQ)
7     (JMPIF1 L13)
9     (GETVALUE&PUSH 0)                   ; EXP
11    (CONST 2)                           ; $%E
12    (EQ)
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PARP (A) ...)-15|
(CONST 0) = PARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARP
8     (SKIP&RET 1)


Disassembly of function PARP
(CONST 0) = A
(CONST 1) = PAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PAR A)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (GETVALUE 1)                        ; PAR
7     (EQ)
8     (UNBIND1)
9     (SKIP&RET 2)

WARNING in (DEFUN HASVAR (EXP) ...)-16 in line 60 :
Function HASVAR
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in line 18

Disassembly of function #:|(DEFUN HASVAR (EXP) ...)-16|
(CONST 0) = HASVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HASVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HASVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HASVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HASVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HASVAR
8     (SKIP&RET 1)


Disassembly of function HASVAR
(CONST 0) = EXP
(CONST 1) = FREEVAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1&JMPIF 1 L12)                 ; FREEVAR
8     (T)
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (NIL)
13    (JMP L9)


Disassembly of function #:|(DEFUN ARBPOW1 (EXP) ...)-17|
(CONST 0) = ARBPOW1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARBPOW1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARBPOW1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARBPOW1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARBPOW1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARBPOW1
8     (SKIP&RET 1)


Disassembly of function ARBPOW1
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (C NONZERP) ((MEXPT) (U HASVAR) (V FREEVAR)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN U*ASINX (EXP) ...)-18|
(CONST 0) = U*ASINX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE U*ASINX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; U*ASINX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; U*ASINX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE U*ASINX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; U*ASINX
8     (SKIP&RET 1)


Disassembly of function U*ASINX
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (U NONZERP) ((%ASIN) (X HASVAR))) ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN U*ATANX (EXP) ...)-19|
(CONST 0) = U*ATANX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE U*ATANX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; U*ATANX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; U*ATANX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE U*ATANX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; U*ATANX
8     (SKIP&RET 1)


Disassembly of function U*ATANX
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (U NONZERP) ((%ATAN) (X HASVAR))) ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN GMINC (A B) ...)-20|
(CONST 0) = GMINC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GMINC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GMINC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GMINC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GMINC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GMINC
8     (SKIP&RET 1)


Disassembly of function GMINC
(CONST 0) = A
(CONST 1) = B
(CONST 2) = ($GAMMAINCOMPLETE)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
10 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; B
6     (CONST&PUSH 2)                      ; ($GAMMAINCOMPLETE)
7     (GETVALUE&PUSH 0)                   ; A
9     (GETVALUE&PUSH 1)                   ; B
11    (LIST 3)
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LITTLESLOMMEL (M N Z) ...)-21|
(CONST 0) = LITTLESLOMMEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LITTLESLOMMEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LITTLESLOMMEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LITTLESLOMMEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LITTLESLOMMEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LITTLESLOMMEL
8     (SKIP&RET 1)


Disassembly of function LITTLESLOMMEL
(CONST 0) = M
(CONST 1) = N
(CONST 2) = Z
(CONST 3) = (MQAPPLY)
(CONST 4) = ($%S ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z N M)
15 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; M
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (CONST&PUSH 3)                      ; (MQAPPLY)
10    (CONST&PUSH 4)                      ; ($%S ARRAY)
11    (GETVALUE&PUSH 0)                   ; M
13    (GETVALUE&PUSH 1)                   ; N
15    (LIST&PUSH 3)
17    (GETVALUE&PUSH 2)                   ; Z
19    (LIST 3)
21    (UNBIND 3)
23    (SKIP&RET 4)


Disassembly of function #:|(DEFUN MWHIT (A I1 I2) ...)-22|
(CONST 0) = MWHIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MWHIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MWHIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MWHIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MWHIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MWHIT
8     (SKIP&RET 1)


Disassembly of function MWHIT
(CONST 0) = A
(CONST 1) = (MQAPPLY)
(CONST 2) = ($%M ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
11 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; (MQAPPLY)
4     (CONST&PUSH 2)                      ; ($%M ARRAY)
5     (LOAD&PUSH 7)
6     (LOAD&PUSH 7)
7     (LIST&PUSH 3)
9     (GETVALUE&PUSH 0)                   ; A
11    (LIST 3)
13    (UNBIND1)
14    (SKIP&RET 4)


Disassembly of function #:|(DEFUN WWHIT (A I1 I2) ...)-23|
(CONST 0) = WWHIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WWHIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WWHIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WWHIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WWHIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WWHIT
8     (SKIP&RET 1)


Disassembly of function WWHIT
(CONST 0) = A
(CONST 1) = (MQAPPLY)
(CONST 2) = ($%W ARRAY)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
11 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; (MQAPPLY)
4     (CONST&PUSH 2)                      ; ($%W ARRAY)
5     (LOAD&PUSH 7)
6     (LOAD&PUSH 7)
7     (LIST&PUSH 3)
9     (GETVALUE&PUSH 0)                   ; A
11    (LIST 3)
13    (UNBIND1)
14    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PJAC (X N A ...) ...)-24|
(CONST 0) = PJAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PJAC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PJAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PJAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PJAC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PJAC
8     (SKIP&RET 1)


Disassembly of function PJAC
(CONST 0) = X
(CONST 1) = N
(CONST 2) = A
(CONST 3) = B
(CONST 4) = (MQAPPLY)
(CONST 5) = ($%P ARRAY)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X B A N)
18 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; X
3     (LOAD 6)
4     (BIND 1)                            ; N
6     (LOAD 8)
7     (BIND 2)                            ; A
9     (LOAD 10)
10    (BIND 3)                            ; B
12    (CONST&PUSH 4)                      ; (MQAPPLY)
13    (CONST&PUSH 5)                      ; ($%P ARRAY)
14    (GETVALUE&PUSH 1)                   ; N
16    (GETVALUE&PUSH 2)                   ; A
18    (GETVALUE&PUSH 3)                   ; B
20    (LIST&PUSH 4)
22    (GETVALUE&PUSH 0)                   ; X
24    (LIST 3)
26    (UNBIND 4)
28    (SKIP&RET 5)


Disassembly of function #:|(DEFUN PARCYL (X N) ...)-25|
(CONST 0) = PARCYL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PARCYL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PARCYL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PARCYL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PARCYL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PARCYL
8     (SKIP&RET 1)


Disassembly of function PARCYL
(CONST 0) = X
(CONST 1) = N
(CONST 2) = (MQAPPLY)
(CONST 3) = ($%D ARRAY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (CONST&PUSH 3)                      ; ($%D ARRAY)
8     (GETVALUE&PUSH 1)                   ; N
10    (LIST&PUSH 2)
12    (GETVALUE&PUSH 0)                   ; X
14    (LIST 3)
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ONEJ (EXP) ...)-26|
(CONST 0) = ONEJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEJ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEJ
8     (SKIP&RET 1)


Disassembly of function ONEJ
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%J ARRAY) (V TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TWOJ (EXP) ...)-27|
(CONST 0) = TWOJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TWOJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TWOJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TWOJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TWOJ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TWOJ
8     (SKIP&RET 1)


Disassembly of function TWOJ
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%J ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%J ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TWOY (EXP) ...)-28|
(CONST 0) = TWOY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TWOY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TWOY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TWOY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TWOY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TWOY
8     (SKIP&RET 1)


Disassembly of function TWOY
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%Y ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%Y ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TWOK (EXP) ...)-29|
(CONST 0) = TWOK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TWOK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TWOK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TWOK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TWOK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TWOK
8     (SKIP&RET 1)


Disassembly of function TWOK
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%K ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%K ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEKONEY (EXP) ...)-30|
(CONST 0) = ONEKONEY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEKONEY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEKONEY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEKONEY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEKONEY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEKONEY
8     (SKIP&RET 1)


Disassembly of function ONEKONEY
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%K ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%Y ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEJ^2 (EXP) ...)-31|
(CONST 0) = ONEJ^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEJ^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEJ^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEJ^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEJ^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEJ^2
8     (SKIP&RET 1)


Disassembly of function ONEJ^2
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MEXPT) ((MQAPPLY) (($%J ARRAY) (V TRUE)) (W TRUE)) 2))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEY^2 (EXP) ...)-32|
(CONST 0) = ONEY^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEY^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEY^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEY^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEY^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEY^2
8     (SKIP&RET 1)


Disassembly of function ONEY^2
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MEXPT) ((MQAPPLY) (($%Y ARRAY) (V TRUE)) (W TRUE)) 2))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEK^2 (EXP) ...)-33|
(CONST 0) = ONEK^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEK^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEK^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEK^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEK^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEK^2
8     (SKIP&RET 1)


Disassembly of function ONEK^2
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MEXPT) ((MQAPPLY) (($%K ARRAY) (V TRUE)) (W TRUE)) 2))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEI (EXP) ...)-34|
(CONST 0) = ONEI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEI
8     (SKIP&RET 1)


Disassembly of function ONEI
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%I ARRAY) (V TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TWOI (EXP) ...)-35|
(CONST 0) = TWOI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TWOI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TWOI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TWOI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TWOI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TWOI
8     (SKIP&RET 1)


Disassembly of function TWOI
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%I ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%I ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TWOH (EXP) ...)-36|
(CONST 0) = TWOH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TWOH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TWOH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TWOH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TWOH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TWOH
8     (SKIP&RET 1)


Disassembly of function TWOH
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MQAPPLY) (($%H ARRAY) (V1 TRUE) (V11 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%H ARRAY) (V2 TRUE) (V21 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEYONEJ (EXP) ...)-37|
(CONST 0) = ONEYONEJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEYONEJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEYONEJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEYONEJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEYONEJ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEYONEJ
8     (SKIP&RET 1)


Disassembly of function ONEYONEJ
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%Y ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%J ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEKONEJ (EXP) ...)-38|
(CONST 0) = ONEKONEJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEKONEJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEKONEJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEKONEJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEKONEJ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEKONEJ
8     (SKIP&RET 1)


Disassembly of function ONEKONEJ
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%K ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%J ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEYONEH (EXP) ...)-39|
(CONST 0) = ONEYONEH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEYONEH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEYONEH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEYONEH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEYONEH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEYONEH
8     (SKIP&RET 1)


Disassembly of function ONEYONEH
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%Y ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%H ARRAY) (V2 TRUE) (V21 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEKONEH (EXP) ...)-40|
(CONST 0) = ONEKONEH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEKONEH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEKONEH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEKONEH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEKONEH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEKONEH
8     (SKIP&RET 1)


Disassembly of function ONEKONEH
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%K ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%H ARRAY) (V2 TRUE) (V21 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEIONEJ (EXP) ...)-41|
(CONST 0) = ONEIONEJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEIONEJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEIONEJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEIONEJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEIONEJ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEIONEJ
8     (SKIP&RET 1)


Disassembly of function ONEIONEJ
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%I ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%J ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEIONEH (EXP) ...)-42|
(CONST 0) = ONEIONEH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEIONEH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEIONEH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEIONEH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEIONEH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEIONEH
8     (SKIP&RET 1)


Disassembly of function ONEIONEH
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%I ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%H ARRAY) (V2 TRUE) (V21 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEHONEJ (EXP) ...)-43|
(CONST 0) = ONEHONEJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEHONEJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEHONEJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEHONEJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEHONEJ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEHONEJ
8     (SKIP&RET 1)


Disassembly of function ONEHONEJ
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MQAPPLY) (($%H ARRAY) (V1 TRUE) (V11 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%J ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEIONEY (EXP) ...)-44|
(CONST 0) = ONEIONEY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEIONEY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEIONEY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEIONEY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEIONEY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEIONEY
8     (SKIP&RET 1)


Disassembly of function ONEIONEY
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%I ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%Y ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEIONEK (EXP) ...)-45|
(CONST 0) = ONEIONEK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEIONEK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEIONEK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEIONEK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEIONEK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEIONEK
8     (SKIP&RET 1)


Disassembly of function ONEIONEK
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%I ARRAY) (V1 TRUE)) (W1 TRUE))
  ((MQAPPLY) (($%K ARRAY) (V2 TRUE)) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEI^2 (EXP) ...)-46|
(CONST 0) = ONEI^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEI^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEI^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEI^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEI^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEI^2
8     (SKIP&RET 1)


Disassembly of function ONEI^2
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MEXPT) ((MQAPPLY) (($%I ARRAY) (V TRUE)) (W TRUE)) 2))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEH^2 (EXP) ...)-47|
(CONST 0) = ONEH^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEH^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEH^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEH^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEH^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEH^2
8     (SKIP&RET 1)


Disassembly of function ONEH^2
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MEXPT) ((MQAPPLY) (($%H ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)) 2))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONERF (EXP) ...)-48|
(CONST 0) = ONERF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONERF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONERF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONERF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONERF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONERF
8     (SKIP&RET 1)


Disassembly of function ONERF
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (U NONZERP) ((%ERF) (W TRUE))) ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONELOG (EXP) ...)-49|
(CONST 0) = ONELOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONELOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONELOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONELOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONELOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONELOG
8     (SKIP&RET 1)


Disassembly of function ONELOG
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (U NONZERP) ((%LOG) (W HASVAR))) ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONERFC (EXP) ...)-50|
(CONST 0) = ONERFC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONERFC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONERFC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONERFC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONERFC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONERFC
8     (SKIP&RET 1)


Disassembly of function ONERFC
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (U NONZERP) (($ERFC) (W TRUE))) ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEEI (EXP) ...)-51|
(CONST 0) = ONEEI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEEI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEEI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEEI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEEI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEEI
8     (SKIP&RET 1)


Disassembly of function ONEEI
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (U NONZERP) (($%EI) (W TRUE))) ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEKELLIPTIC (EXP) ...)-52|
(CONST 0) = ONEKELLIPTIC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEKELLIPTIC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEKELLIPTIC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEKELLIPTIC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEKELLIPTIC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEKELLIPTIC
8     (SKIP&RET 1)


Disassembly of function ONEKELLIPTIC
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (U NONZERP) (($KELLIPTIC) (W TRUE))) ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEE (EXP) ...)-53|
(CONST 0) = ONEE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEE
8     (SKIP&RET 1)


Disassembly of function ONEE
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (U NONZERP) (($%E) (W TRUE))) ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEGAMMAINCOMPLETE (EXP) ...)-54|
(CONST 0) = ONEGAMMAINCOMPLETE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEGAMMAINCOMPLETE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEGAMMAINCOMPLETE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEGAMMAINCOMPLETE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEGAMMAINCOMPLETE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEGAMMAINCOMPLETE
8     (SKIP&RET 1)


Disassembly of function ONEGAMMAINCOMPLETE
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) (($GAMMAINCOMPLETE) (W1 FREEVARPAR) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEGAMMAGREEK (EXP) ...)-55|
(CONST 0) = ONEGAMMAGREEK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEGAMMAGREEK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEGAMMAGREEK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEGAMMAGREEK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEGAMMAGREEK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEGAMMAGREEK
8     (SKIP&RET 1)


Disassembly of function ONEGAMMAGREEK
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) (($GAMMAGREEK) (W1 FREEVARPAR) (W2 TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEHSTRUVE (EXP) ...)-56|
(CONST 0) = ONEHSTRUVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEHSTRUVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEHSTRUVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEHSTRUVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEHSTRUVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEHSTRUVE
8     (SKIP&RET 1)


Disassembly of function ONEHSTRUVE
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($HSTRUVE ARRAY) (V TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONELSTRUVE (EXP) ...)-57|
(CONST 0) = ONELSTRUVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONELSTRUVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONELSTRUVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONELSTRUVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONELSTRUVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONELSTRUVE
8     (SKIP&RET 1)


Disassembly of function ONELSTRUVE
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($LSTRUVE ARRAY) (V TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONES (EXP) ...)-58|
(CONST 0) = ONES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONES
8     (SKIP&RET 1)


Disassembly of function ONES
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%S ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONESLOMMEL (EXP) ...)-59|
(CONST 0) = ONESLOMMEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONESLOMMEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONESLOMMEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONESLOMMEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONESLOMMEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONESLOMMEL
8     (SKIP&RET 1)


Disassembly of function ONESLOMMEL
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MQAPPLY) (($SLOMMEL ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEY (EXP) ...)-60|
(CONST 0) = ONEY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEY
8     (SKIP&RET 1)


Disassembly of function ONEY
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%Y ARRAY) (V TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEK (EXP) ...)-61|
(CONST 0) = ONEK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEK
8     (SKIP&RET 1)


Disassembly of function ONEK
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%K ARRAY) (V TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONED (EXP) ...)-62|
(CONST 0) = ONED
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONED>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONED
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONED
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONED>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONED
8     (SKIP&RET 1)


Disassembly of function ONED
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%D ARRAY) (V TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEKBATEMAN (EXP) ...)-63|
(CONST 0) = ONEKBATEMAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEKBATEMAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEKBATEMAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEKBATEMAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEKBATEMAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEKBATEMAN
8     (SKIP&RET 1)


Disassembly of function ONEKBATEMAN
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($KBATEMAN ARRAY) (V TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEH (EXP) ...)-64|
(CONST 0) = ONEH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEH
8     (SKIP&RET 1)


Disassembly of function ONEH
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%H ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEM (EXP) ...)-65|
(CONST 0) = ONEM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEM
8     (SKIP&RET 1)


Disassembly of function ONEM
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%M ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEL (EXP) ...)-66|
(CONST 0) = ONEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEL
8     (SKIP&RET 1)


Disassembly of function ONEL
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%L ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEC (EXP) ...)-67|
(CONST 0) = ONEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEC
8     (SKIP&RET 1)


Disassembly of function ONEC
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%C ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONET (EXP) ...)-68|
(CONST 0) = ONET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONET
8     (SKIP&RET 1)


Disassembly of function ONET
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%T ARRAY) (V1 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEU (EXP) ...)-69|
(CONST 0) = ONEU
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEU>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEU
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEU
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEU>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEU
8     (SKIP&RET 1)


Disassembly of function ONEU
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%U ARRAY) (V1 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEPJAC (EXP) ...)-70|
(CONST 0) = ONEPJAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEPJAC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEPJAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEPJAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEPJAC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEPJAC
8     (SKIP&RET 1)


Disassembly of function ONEPJAC
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MQAPPLY) (($%P ARRAY) (V1 TRUE) (V2 TRUE) (V3 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEHE (EXP) ...)-71|
(CONST 0) = ONEHE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEHE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEHE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEHE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEHE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEHE
8     (SKIP&RET 1)


Disassembly of function ONEHE
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%HE ARRAY) (V1 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEQ (EXP) ...)-72|
(CONST 0) = ONEQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEQ
8     (SKIP&RET 1)


Disassembly of function ONEQ
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%Q ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEP0 (EXP) ...)-73|
(CONST 0) = ONEP0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEP0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEP0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEP0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEP0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEP0
8     (SKIP&RET 1)


Disassembly of function ONEP0
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%P ARRAY) (V1 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN HYP-ONEP (EXP) ...)-74|
(CONST 0) = HYP-ONEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYP-ONEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYP-ONEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYP-ONEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYP-ONEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYP-ONEP
8     (SKIP&RET 1)


Disassembly of function HYP-ONEP
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%P ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ONEW (EXP) ...)-75|
(CONST 0) = ONEW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ONEW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ONEW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ONEW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ONEW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ONEW
8     (SKIP&RET 1)


Disassembly of function ONEW
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP) ((MQAPPLY) (($%W ARRAY) (V1 TRUE) (V2 TRUE)) (W TRUE)))
 ((COEFFPP) (A ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LTEP (EXP) ...)-76|
(CONST 0) = LTEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LTEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LTEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LTEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LTEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LTEP
8     (SKIP&RET 1)


Disassembly of function LTEP
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MEXPT) $%E
   ((MPLUS) ((COEFFPT) (A FREEVARPAR) (X VARP))
    ((COEFFPT) (E FREEVARPAR) (F HASVAR)) ((MTIMES) -1 (P PARP) (X VARP))
    ((COEFFPP) (C FREEVARPAR)))))
 ((COEFFPP) (D ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)

WARNING in (DEFUN ZERP (A) ...)-77 in line 685 :
Function ZERP
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in line 20

Disassembly of function #:|(DEFUN ZERP (A) ...)-77|
(CONST 0) = ZERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZERP
8     (SKIP&RET 1)


Disassembly of function ZERP
(CONST 0) = A
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CONST 1)                           ; 0
6     (EQ)
7     (UNBIND1)
8     (SKIP&RET 2)

WARNING in (DEFUN NONZERP (A) ...)-78 in line 687 :
Function NONZERP
 was already defined in file #P"/cygdrive/e/temp/maxima/src/irinte.lisp" in line 24

Disassembly of function #:|(DEFUN NONZERP (A) ...)-78|
(CONST 0) = NONZERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NONZERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NONZERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NONZERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NONZERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NONZERP
8     (SKIP&RET 1)


Disassembly of function NONZERP
(CONST 0) = A
(CONST 1) = ZERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1 1)                           ; ZERP
7     (NOT)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $SPECINT (EXP VAR) ...)-79|
(CONST 0) = $SPECINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SPECINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SPECINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SPECINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SPECINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SPECINT
8     (SKIP&RET 1)


Disassembly of function $SPECINT
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = $RADEXPAND
(CONST 3) = CHECKCOEFSIGNLIST
(CONST 4) = $ALL
(CONST 5) = GRASP-SOME-TRIGS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
writes special variable : ($RADEXPAND)
14 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (NIL)
7     (BIND 2)                            ; $RADEXPAND
9     (NIL)
10    (BIND 3)                            ; CHECKCOEFSIGNLIST
12    (CONST 4)                           ; $ALL
13    (SETVALUE 2)                        ; $RADEXPAND
15    (GETVALUE&PUSH 0)                   ; EXP
17    (CALL1 5)                           ; GRASP-SOME-TRIGS
19    (UNBIND 4)
21    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (SPECIAL ASINX ATANX))-80|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(SETQ ASINX NIL ...)-81|
(CONST 0) = ASINX
(CONST 1) = ATANX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (ATANX ASINX)
4 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; ASINX
3     (SETVALUE 1)                        ; ATANX
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN GRASP-SOME-TRIGS (EXP) ...)-82|
(CONST 0) = GRASP-SOME-TRIGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GRASP-SOME-TRIGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GRASP-SOME-TRIGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GRASP-SOME-TRIGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GRASP-SOME-TRIGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GRASP-SOME-TRIGS
8     (SKIP&RET 1)


Disassembly of function GRASP-SOME-TRIGS
(CONST 0) = EXP
(CONST 1) = U
(CONST 2) = X
(CONST 3) = L
(CONST 4) = U*ASINX
(CONST 5) = CDRAS
(CONST 6) = ASINX
(CONST 7) = DEFINTEGRATE
(CONST 8) = U*ATANX
(CONST 9) = ATANX
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (U L EXP)
writes special variables : (ATANX ASINX X U L)
48 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (NIL)
4     (BIND 1)                            ; U
6     (NIL)
7     (BIND 2)                            ; X
9     (NIL)
10    (BIND 3)                            ; L
12    (GETVALUE&PUSH 0)                   ; EXP
14    (CALL1 4)                           ; U*ASINX
16    (SETVALUE 3)                        ; L
18    (JMPIF L37)
20    (GETVALUE&PUSH 0)                   ; EXP
22    (CALL1 8)                           ; U*ATANX
24    (SETVALUE 3)                        ; L
26    (JMPIF L58)
28    (GETVALUE 0)                        ; EXP
30    L30
30    (PUSH)
31    (CALL1 7)                           ; DEFINTEGRATE
33    (UNBIND 4)
35    (SKIP&RET 2)
37    L37
37    (CONST&PUSH 1)                      ; U
38    (GETVALUE&PUSH 3)                   ; L
40    (CALL2 5)                           ; CDRAS
42    (SETVALUE 1)                        ; U
44    (CONST&PUSH 2)                      ; X
45    (GETVALUE&PUSH 3)                   ; L
47    (CALL2 5)                           ; CDRAS
49    (SETVALUE 2)                        ; X
51    (T)
52    (SETVALUE 6)                        ; ASINX
54    (GETVALUE 1)                        ; U
56    (JMP L30)
58    L58
58    (CONST&PUSH 1)                      ; U
59    (GETVALUE&PUSH 3)                   ; L
61    (CALL2 5)                           ; CDRAS
63    (SETVALUE 1)                        ; U
65    (CONST&PUSH 2)                      ; X
66    (GETVALUE&PUSH 3)                   ; L
68    (CALL2 5)                           ; CDRAS
70    (SETVALUE 2)                        ; X
72    (T)
73    (SETVALUE 9)                        ; ATANX
75    (GETVALUE 1)                        ; U
77    (JMP L30)


Disassembly of function #:|(DEFUN DEFINTEGRATE (EXP) ...)-83|
(CONST 0) = DEFINTEGRATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFINTEGRATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFINTEGRATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFINTEGRATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFINTEGRATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFINTEGRATE
8     (SKIP&RET 1)


Disassembly of function DEFINTEGRATE
(CONST 0) = EXP
(CONST 1) = $EXPONENTIALIZE
(CONST 2) = SSIMPLIFYA
(CONST 3) = $EXPAND
(CONST 4) = DISTRDEFEXECINIT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
writes special variable : ($EXPONENTIALIZE)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (NIL)
4     (BIND 1)                            ; $EXPONENTIALIZE
6     (T)
7     (SETVALUE 1)                        ; $EXPONENTIALIZE
9     (GETVALUE&PUSH 0)                   ; EXP
11    (CALL1&PUSH 2)                      ; SSIMPLIFYA
13    (CALL1&PUSH 3)                      ; $EXPAND
15    (CALL1 4)                           ; DISTRDEFEXECINIT
17    (UNBIND 2)
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DEFEXEC (EXP VAR) ...)-84|
(CONST 0) = DEFEXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFEXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFEXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFEXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFEXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFEXEC
8     (SKIP&RET 1)


Disassembly of function DEFEXEC
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = L
(CONST 3) = A
(CONST 4) = SIMPLIFYA
(CONST 5) = DEFLTEP
(CONST 6) = CDRAS
(CONST 7) = NEGTEST
(CONST 8) = OTHER-DEFINT-TO-FOLLOW-DEFEXEC
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A L EXP)
writes special variables : (A L EXP)
31 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (NIL)
7     (BIND 2)                            ; L
9     (NIL)
10    (BIND 3)                            ; A
12    (GETVALUE&PUSH 0)                   ; EXP
14    (NIL&PUSH)
15    (CALL2 4)                           ; SIMPLIFYA
17    (SETVALUE 0)                        ; EXP
19    (PUSH)
20    (CALL1 5)                           ; DEFLTEP
22    (SETVALUE 2)                        ; L
24    (JMPIF L33)
26    (CONST 8)                           ; OTHER-DEFINT-TO-FOLLOW-DEFEXEC
27    (UNBIND 2)
29    L29
29    (UNBIND 2)
31    (SKIP&RET 3)
33    L33
33    (CONST&PUSH 3)                      ; A
34    (GETVALUE&PUSH 2)                   ; L
36    (CALL2 6)                           ; CDRAS
38    (SETVALUE 3)                        ; A
40    (GETVALUE&PUSH 2)                   ; L
42    (GETVALUE&PUSH 3)                   ; A
44    (CALL2 7)                           ; NEGTEST
46    (UNBIND 2)
48    (JMP L29)


Disassembly of function #:|(DEFUN NEGTEST (L A) ...)-85|
(CONST 0) = NEGTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEGTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEGTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEGTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEGTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEGTEST
8     (SKIP&RET 1)


Disassembly of function NEGTEST
(CONST 0) = L
(CONST 1) = A
(CONST 2) = U
(CONST 3) = E
(CONST 4) = F
(CONST 5) = C
(CONST 6) = $REALPART
(CONST 7) = CHECKSIGNTM
(CONST 8) = $NEGATIVE
(CONST 9) = CDRAS
(CONST 10) = ZERP
(CONST 11) = 1
(CONST 12) = -1
(CONST 13) = MUL
(CONST 14) = PSEY
(CONST 15) = VAR
(CONST 16) = 0
(CONST 17) = LTSCALE
(CONST 18) = MAXIMA-SUBSTITUTE
(CONST 19) = OTHER-DEFINT-TO-FOLLOW-NEGTEST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (F C VAR U E L A)
writes special variables : (C F E U)
58 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; A
6     (NIL)
7     (BIND 2)                            ; U
9     (NIL)
10    (BIND 3)                            ; E
12    (NIL)
13    (BIND 4)                            ; F
15    (NIL)
16    (BIND 5)                            ; C
18    (GETVALUE&PUSH 1)                   ; A
20    (CALL1&PUSH 6)                      ; $REALPART
22    (CALL1&PUSH 7)                      ; CHECKSIGNTM
24    (JMPIFEQTO 8 L34)                   ; $NEGATIVE
27    (CONST 19)                          ; OTHER-DEFINT-TO-FOLLOW-NEGTEST
28    (UNBIND 4)
30    L30
30    (UNBIND 2)
32    (SKIP&RET 3)
34    L34
34    (CONST&PUSH 2)                      ; U
35    (GETVALUE&PUSH 0)                   ; L
37    (CALL2 9)                           ; CDRAS
39    (SETVALUE 2)                        ; U
41    (CONST&PUSH 3)                      ; E
42    (GETVALUE&PUSH 0)                   ; L
44    (CALL2 9)                           ; CDRAS
46    (SETVALUE 3)                        ; E
48    (CONST&PUSH 4)                      ; F
49    (GETVALUE&PUSH 0)                   ; L
51    (CALL2 9)                           ; CDRAS
53    (SETVALUE 4)                        ; F
55    (CONST&PUSH 5)                      ; C
56    (GETVALUE&PUSH 0)                   ; L
58    (CALL2 9)                           ; CDRAS
60    (SETVALUE 5)                        ; C
62    (GETVALUE&PUSH 3)                   ; E
64    (CALL1&JMPIFNOT 10 L70)             ; ZERP
67    (CONST 11)                          ; 1
68    (SETVALUE 4)                        ; F
70    L70
70    (CONST&PUSH 12)                     ; -1
71    (GETVALUE&PUSH 1)                   ; A
73    (CALL2&PUSH 13)                     ; MUL
75    (CONST&PUSH 14)                     ; PSEY
76    (GETVALUE&PUSH 2)                   ; U
78    (GETVALUE&PUSH 15)                  ; VAR
80    (CONST&PUSH 14)                     ; PSEY
81    (GETVALUE&PUSH 5)                   ; C
83    (CONST&PUSH 16)                     ; 0
84    (GETVALUE&PUSH 3)                   ; E
86    (GETVALUE&PUSH 4)                   ; F
88    (CALL&PUSH 7 17)                    ; LTSCALE
91    (CALL 3 18)                         ; MAXIMA-SUBSTITUTE
94    (UNBIND 4)
96    (JMP L30)


Disassembly of function #:|(DEFUN LTSCALE (EXP VAR PAR ...) ...)-86|
(CONST 0) = LTSCALE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LTSCALE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LTSCALE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LTSCALE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LTSCALE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LTSCALE
8     (SKIP&RET 1)


Disassembly of function LTSCALE
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = PAR
(CONST 3) = C
(CONST 4) = E
(CONST 5) = F
(CONST 6) = $%E
(CONST 7) = POWER
(CONST 8) = SUB
(CONST 9) = LT-EXEC
(CONST 10) = SUBSTL
(CONST 11) = MUL*
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (F E EXP PAR C)
27 byte-code instructions:
0     (LOAD 7)
1     (BIND 0)                            ; EXP
3     (LOAD 9)
4     (BIND 1)                            ; VAR
6     (LOAD 11)
7     (BIND 2)                            ; PAR
9     (LOAD 13)
10    (BIND 3)                            ; C
12    (LOAD 14)
13    (BIND 4)                            ; E
15    (LOAD 16)
17    (BIND 5)                            ; F
19    (CONST&PUSH 6)                      ; $%E
20    (GETVALUE&PUSH 3)                   ; C
22    (CALL2&PUSH 7)                      ; POWER
24    (GETVALUE&PUSH 2)                   ; PAR
26    (LOAD&PUSH 23)
27    (CALL2&PUSH 8)                      ; SUB
29    (GETVALUE&PUSH 2)                   ; PAR
31    (GETVALUE&PUSH 0)                   ; EXP
33    (GETVALUE&PUSH 4)                   ; E
35    (GETVALUE&PUSH 5)                   ; F
37    (CALL&PUSH 3 9)                     ; LT-EXEC
40    (CALL&PUSH 3 10)                    ; SUBSTL
43    (CALL2 11)                          ; MUL*
45    (UNBIND 6)
47    (SKIP&RET 8)


Disassembly of function #:|(DEFUN DEFLTEP (EXP) ...)-87|
(CONST 0) = DEFLTEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFLTEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFLTEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFLTEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFLTEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEFLTEP
8     (SKIP&RET 1)


Disassembly of function DEFLTEP
(CONST 0) = EXP
(CONST 1) = 
((MPLUS)
 ((COEFFPT) (U NONZERP)
  ((MEXPT) $%E
   ((MPLUS) ((COEFFPT) (A FREEVAR) (X VARP))
    ((COEFFPT) (E FREEVAR) (F HASVARNOVARP)) ((COEFFPP) (C FREEVAR)))))
 ((COEFFPP) (D ZERP)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN HASVARNOVARP (A) ...)-88|
(CONST 0) = HASVARNOVARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HASVARNOVARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HASVARNOVARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HASVARNOVARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HASVARNOVARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HASVARNOVARP
8     (SKIP&RET 1)


Disassembly of function HASVARNOVARP
(CONST 0) = A
(CONST 1) = HASVAR
(CONST 2) = VARP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1 1)                           ; HASVAR
7     (JMPIFNOT1 L14)
9     (GETVALUE&PUSH 0)                   ; A
11    (CALL1 2)                           ; VARP
13    (NOT)
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN HYPGEO-EXEC (EXP VAR PAR) ...)-89|
(CONST 0) = HYPGEO-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HYPGEO-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HYPGEO-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HYPGEO-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HYPGEO-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HYPGEO-EXEC
8     (SKIP&RET 1)


Disassembly of function HYPGEO-EXEC
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = PAR
(CONST 3) = L
(CONST 4) = U
(CONST 5) = A
(CONST 6) = C
(CONST 7) = E
(CONST 8) = F
(CONST 9) = SIMPLIFYA
(CONST 10) = LTEP
(CONST 11) = CDRAS
(CONST 12) = LTSCALE
(CONST 13) = OTHER-TRANS-TO-FOLLOW
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (F E A C PAR VAR U L EXP)
writes special variables : (F E C A U L EXP)
62 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (LOAD 7)
7     (BIND 2)                            ; PAR
9     (NIL)
10    (BIND 3)                            ; L
12    (NIL)
13    (BIND 4)                            ; U
15    (NIL)
16    (BIND 5)                            ; A
18    (NIL)
19    (BIND 6)                            ; C
21    (NIL)
22    (BIND 7)                            ; E
24    (NIL)
25    (BIND 8)                            ; F
27    (GETVALUE&PUSH 0)                   ; EXP
29    (NIL&PUSH)
30    (CALL2 9)                           ; SIMPLIFYA
32    (SETVALUE 0)                        ; EXP
34    (PUSH)
35    (CALL1 10)                          ; LTEP
37    (SETVALUE 3)                        ; L
39    (JMPIF L48)
41    (CONST 13)                          ; OTHER-TRANS-TO-FOLLOW
42    (UNBIND 6)
44    L44
44    (UNBIND 3)
46    (SKIP&RET 4)
48    L48
48    (CONST&PUSH 4)                      ; U
49    (GETVALUE&PUSH 3)                   ; L
51    (CALL2 11)                          ; CDRAS
53    (SETVALUE 4)                        ; U
55    (CONST&PUSH 5)                      ; A
56    (GETVALUE&PUSH 3)                   ; L
58    (CALL2 11)                          ; CDRAS
60    (SETVALUE 5)                        ; A
62    (CONST&PUSH 6)                      ; C
63    (GETVALUE&PUSH 3)                   ; L
65    (CALL2 11)                          ; CDRAS
67    (SETVALUE 6)                        ; C
69    (CONST&PUSH 7)                      ; E
70    (GETVALUE&PUSH 3)                   ; L
72    (CALL2 11)                          ; CDRAS
74    (SETVALUE 7)                        ; E
76    (CONST&PUSH 8)                      ; F
77    (GETVALUE&PUSH 3)                   ; L
79    (CALL2 11)                          ; CDRAS
81    (SETVALUE 8)                        ; F
83    (GETVALUE&PUSH 4)                   ; U
85    (GETVALUE&PUSH 1)                   ; VAR
87    (GETVALUE&PUSH 2)                   ; PAR
89    (GETVALUE&PUSH 6)                   ; C
91    (GETVALUE&PUSH 5)                   ; A
93    (GETVALUE&PUSH 7)                   ; E
95    (GETVALUE&PUSH 8)                   ; F
97    (CALL 7 12)                         ; LTSCALE
100   (UNBIND 6)
102   (JMP L44)


Disassembly of function #:|(DEFUN SUBSTL (P1 P2 P3) ...)-90|
(CONST 0) = SUBSTL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUBSTL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUBSTL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUBSTL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUBSTL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUBSTL
8     (SKIP&RET 1)


Disassembly of function SUBSTL
(CONST 0) = MAXIMA-SUBSTITUTE
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 3)
1     (LOAD 3)
2     (JMPIFEQ L12)
4     (LOAD&PUSH 3)
5     (LOAD&PUSH 3)
6     (LOAD&PUSH 3)
7     (CALL 3 0)                          ; MAXIMA-SUBSTITUTE
10    (SKIP&RET 4)
12    L12
12    (LOAD 1)
13    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT-EXEC (U E F) ...)-91|
(CONST 0) = LT-EXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT-EXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT-EXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT-EXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT-EXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT-EXEC
8     (SKIP&RET 1)


Disassembly of function LT-EXEC
(CONST 0) = U
(CONST 1) = E
(CONST 2) = F
(CONST 3) = L
(CONST 4) = ASINX
(CONST 5) = ATANX
(CONST 6) = LT-ASINATAN
(CONST 7) = ZERP
(CONST 8) = LT-SF-LOG
(CONST 9) = C*T^V
(CONST 10) = LT-EXP
(CONST 11) = $%E
(CONST 12) = MUL
(CONST 13) = POWER
(CONST 14) = MUL*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L F U E ATANX ASINX)
writes special variable : (L)
52 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; U
3     (LOAD 5)
4     (BIND 1)                            ; E
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (NIL)
10    (BIND 3)                            ; L
12    (GETVALUE 4)                        ; ASINX
14    (JMPIF L59)
16    (GETVALUE 5)                        ; ATANX
18    (JMPIF L59)
20    (GETVALUE&PUSH 1)                   ; E
22    (CALL1&JMPIF 7 L71)                 ; ZERP
25    (GETVALUE&PUSH 1)                   ; E
27    (CALL1&JMPIF 7 L38)                 ; ZERP
30    (GETVALUE&PUSH 0)                   ; U
32    (CALL1 9)                           ; C*T^V
34    (SETVALUE 3)                        ; L
36    (JMPIF L75)
38    L38
38    (GETVALUE&PUSH 0)                   ; U
40    (CONST&PUSH 11)                     ; $%E
41    (GETVALUE&PUSH 1)                   ; E
43    (GETVALUE&PUSH 2)                   ; F
45    (CALL2&PUSH 12)                     ; MUL
47    (CALL2&PUSH 13)                     ; POWER
49    (CALL2 14)                          ; MUL*
51    L51
51    (PUSH)
52    (CALL1 8)                           ; LT-SF-LOG
54    (UNBIND1)
55    L55
55    (UNBIND 3)
57    (SKIP&RET 4)
59    L59
59    (GETVALUE&PUSH 0)                   ; U
61    (GETVALUE&PUSH 1)                   ; E
63    (GETVALUE&PUSH 2)                   ; F
65    (CALL 3 6)                          ; LT-ASINATAN
68    (UNBIND1)
69    (JMP L55)
71    L71
71    (GETVALUE 0)                        ; U
73    (JMP L51)
75    L75
75    (GETVALUE&PUSH 3)                   ; L
77    (GETVALUE&PUSH 1)                   ; E
79    (GETVALUE&PUSH 2)                   ; F
81    (CALL 3 10)                         ; LT-EXP
84    (UNBIND1)
85    (JMP L55)


Disassembly of function #:|(DEFUN C*T^V (EXP) ...)-92|
(CONST 0) = C*T^V
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE C*T^V>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; C*T^V
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; C*T^V
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE C*T^V>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; C*T^V
8     (SKIP&RET 1)


Disassembly of function C*T^V
(CONST 0) = EXP
(CONST 1) = ((MTIMES) ((COEFFTT) (C FREEVAR)) ((MEXPT) (T VARP) (V FREEVAR)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MTIMES) (# #) (# # #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LT-ASINATAN (U E F) ...)-93|
(CONST 0) = LT-ASINATAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT-ASINATAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT-ASINATAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT-ASINATAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT-ASINATAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT-ASINATAN
8     (SKIP&RET 1)


Disassembly of function LT-ASINATAN
(CONST 0) = U
(CONST 1) = E
(CONST 2) = F
(CONST 3) = ZERP
(CONST 4) = ASINX
(CONST 5) = ASIN
(CONST 6) = VAR
(CONST 7) = LT-LTP
(CONST 8) = ATANX
(CONST 9) = ATAN
(CONST 10) = LT-ASINATAN-FAILED-1
(CONST 11) = LT-ASINATAN-FAILED-2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR U ATANX ASINX E)
31 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; U
3     (LOAD 5)
4     (BIND 1)                            ; E
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (GETVALUE&PUSH 1)                   ; E
11    (CALL1&JMPIFNOT 3 L40)              ; ZERP
14    (GETVALUE 4)                        ; ASINX
16    (JMPIF L34)
18    (GETVALUE 8)                        ; ATANX
20    (JMPIFNOT L37)
22    (CONST 9)                           ; ATAN
23    L23
23    (PUSH)
24    (GETVALUE&PUSH 0)                   ; U
26    (GETVALUE&PUSH 6)                   ; VAR
28    (NIL&PUSH)
29    (CALL 4 7)                          ; LT-LTP
32    (JMP L41)
34    L34
34    (CONST 5)                           ; ASIN
35    (JMP L23)
37    L37
37    (CONST 10)                          ; LT-ASINATAN-FAILED-1
38    (JMP L41)
40    L40
40    (CONST 11)                          ; LT-ASINATAN-FAILED-2
41    L41
41    (UNBIND 3)
43    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT-EXP (L E F) ...)-94|
(CONST 0) = LT-EXP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT-EXP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT-EXP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT-EXP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT-EXP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT-EXP
8     (SKIP&RET 1)


Disassembly of function LT-EXP
(CONST 0) = L
(CONST 1) = E
(CONST 2) = F
(CONST 3) = C
(CONST 4) = V
(CONST 5) = CDRAS
(CONST 6) = T^2
(CONST 7) = -8
(CONST 8) = MUL
(CONST 9) = -1
(CONST 10) = POWER
(CONST 11) = 1
(CONST 12) = ADD
(CONST 13) = F24P146TEST
(CONST 14) = SQROOTT
(CONST 15) = 4
(CONST 16) = MUL*
(CONST 17) = F35P147TEST
(CONST 18) = T^-1
(CONST 19) = -4
(CONST 20) = F29P146TEST
(CONST 21) = OTHER-LT-EXPONENTIAL-TO-FOLLOW
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C V E F L)
writes special variables : (E V C)
78 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; E
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (NIL)
10    (BIND 3)                            ; C
12    (NIL)
13    (BIND 4)                            ; V
15    (CONST&PUSH 3)                      ; C
16    (GETVALUE&PUSH 0)                   ; L
18    (CALL2 5)                           ; CDRAS
20    (SETVALUE 3)                        ; C
22    (CONST&PUSH 4)                      ; V
23    (GETVALUE&PUSH 0)                   ; L
25    (CALL2 5)                           ; CDRAS
27    (SETVALUE 4)                        ; V
29    (GETVALUE&PUSH 2)                   ; F
31    (CALL1&JMPIF 6 L72)                 ; T^2
34    (GETVALUE&PUSH 2)                   ; F
36    (CALL1&JMPIF 14 L100)               ; SQROOTT
39    (GETVALUE&PUSH 2)                   ; F
41    (CALL1&JMPIFNOT 18 L131)            ; T^-1
45    (CONST&PUSH 19)                     ; -4
46    (GETVALUE&PUSH 1)                   ; E
48    (CALL2 8)                           ; MUL
50    (SETVALUE 1)                        ; E
52    (GETVALUE&PUSH 4)                   ; V
54    (CONST&PUSH 11)                     ; 1
55    (CALL2 12)                          ; ADD
57    (SETVALUE 4)                        ; V
59    (GETVALUE&PUSH 3)                   ; C
61    (GETVALUE&PUSH 4)                   ; V
63    (GETVALUE&PUSH 1)                   ; E
65    (CALL 3 20)                         ; F29P146TEST
68    L68
68    (UNBIND 2)
70    (JMP L135)
72    L72
72    (CONST&PUSH 7)                      ; -8
73    (GETVALUE&PUSH 1)                   ; E
75    (CALL2&PUSH 8)                      ; MUL
77    (CONST&PUSH 9)                      ; -1
78    (CALL2 10)                          ; POWER
80    (SETVALUE 1)                        ; E
82    (GETVALUE&PUSH 4)                   ; V
84    (CONST&PUSH 11)                     ; 1
85    (CALL2 12)                          ; ADD
87    (SETVALUE 4)                        ; V
89    (GETVALUE&PUSH 3)                   ; C
91    (GETVALUE&PUSH 4)                   ; V
93    (GETVALUE&PUSH 1)                   ; E
95    (CALL 3 13)                         ; F24P146TEST
98    (JMP L68)
100   L100
100   (GETVALUE&PUSH 1)                   ; E
102   (GETVALUE&PUSH 1)                   ; E
104   (CONST&PUSH 15)                     ; 4
105   (CONST&PUSH 9)                      ; -1
106   (CALL2&PUSH 10)                     ; POWER
108   (CALL 3 16)                         ; MUL*
111   (SETVALUE 1)                        ; E
113   (GETVALUE&PUSH 4)                   ; V
115   (CONST&PUSH 11)                     ; 1
116   (CALL2 12)                          ; ADD
118   (SETVALUE 4)                        ; V
120   (GETVALUE&PUSH 3)                   ; C
122   (GETVALUE&PUSH 4)                   ; V
124   (GETVALUE&PUSH 1)                   ; E
126   (CALL 3 17)                         ; F35P147TEST
129   (JMP L68)
131   L131
131   (CONST 21)                          ; OTHER-LT-EXPONENTIAL-TO-FOLLOW
133   (UNBIND 2)
135   L135
135   (UNBIND 3)
137   (SKIP&RET 4)


Disassembly of function #:|(DEFUN T^2 (EXP) ...)-95|
(CONST 0) = T^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE T^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; T^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; T^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE T^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; T^2
8     (SKIP&RET 1)


Disassembly of function T^2
(CONST 0) = EXP
(CONST 1) = ((MEXPT) (T VARP) 2)
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MEXPT) (T VARP) 2)
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SQROOTT (EXP) ...)-96|
(CONST 0) = SQROOTT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SQROOTT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQROOTT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SQROOTT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SQROOTT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SQROOTT
8     (SKIP&RET 1)


Disassembly of function SQROOTT
(CONST 0) = EXP
(CONST 1) = ((MEXPT) (T VARP) ((RAT) 1 2))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MEXPT) (T VARP) ((RAT) 1 2))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN T^-1 (EXP) ...)-97|
(CONST 0) = T^-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE T^-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; T^-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; T^-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE T^-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; T^-1
8     (SKIP&RET 1)


Disassembly of function T^-1
(CONST 0) = EXP
(CONST 1) = ((MEXPT) (T VARP) -1)
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MEXPT) (T VARP) -1)
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN F24P146TEST (C V A) ...)-98|
(CONST 0) = F24P146TEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F24P146TEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F24P146TEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F24P146TEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F24P146TEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F24P146TEST
8     (SKIP&RET 1)


Disassembly of function F24P146TEST
(CONST 0) = C
(CONST 1) = V
(CONST 2) = A
(CONST 3) = NEGINP
(CONST 4) = F24P146
(CONST 5) = FAIL-ON-F24P146TEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C V A)
21 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 2)                   ; A
11    (CALL1&JMPIF 3 L19)                 ; NEGINP
14    (GETVALUE&PUSH 1)                   ; V
16    (CALL1&JMPIFNOT 3 L24)              ; NEGINP
19    L19
19    (CONST 5)                           ; FAIL-ON-F24P146TEST
20    L20
20    (UNBIND 3)
22    (SKIP&RET 4)
24    L24
24    (GETVALUE&PUSH 0)                   ; C
26    (GETVALUE&PUSH 1)                   ; V
28    (GETVALUE&PUSH 2)                   ; A
30    (CALL 3 4)                          ; F24P146
33    (JMP L20)


Disassembly of function #:|(DEFUN F35P147TEST (C V A) ...)-99|
(CONST 0) = F35P147TEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F35P147TEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F35P147TEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F35P147TEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F35P147TEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F35P147TEST
8     (SKIP&RET 1)


Disassembly of function F35P147TEST
(CONST 0) = C
(CONST 1) = V
(CONST 2) = A
(CONST 3) = NEGINP
(CONST 4) = F35P147
(CONST 5) = FAIL-ON-F35P147TEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A C V)
18 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 1)                   ; V
11    (CALL1&JMPIFNOT 3 L19)              ; NEGINP
14    (CONST 5)                           ; FAIL-ON-F35P147TEST
15    L15
15    (UNBIND 3)
17    (SKIP&RET 4)
19    L19
19    (GETVALUE&PUSH 0)                   ; C
21    (GETVALUE&PUSH 1)                   ; V
23    (GETVALUE&PUSH 2)                   ; A
25    (CALL 3 4)                          ; F35P147
28    (JMP L15)


Disassembly of function #:|(DEFUN F29P146TEST (C V A) ...)-100|
(CONST 0) = F29P146TEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F29P146TEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F29P146TEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F29P146TEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F29P146TEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F29P146TEST
8     (SKIP&RET 1)


Disassembly of function F29P146TEST
(CONST 0) = C
(CONST 1) = V
(CONST 2) = A
(CONST 3) = NEGINP
(CONST 4) = F29P146
(CONST 5) = FAIL-ON-F29P146TEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V C A)
18 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 2)                   ; A
11    (CALL1&JMPIFNOT 3 L19)              ; NEGINP
14    (CONST 5)                           ; FAIL-ON-F29P146TEST
15    L15
15    (UNBIND 3)
17    (SKIP&RET 4)
19    L19
19    (GETVALUE&PUSH 0)                   ; C
21    (GETVALUE&PUSH 1)                   ; V
23    (GETVALUE&PUSH 2)                   ; A
25    (CALL 3 4)                          ; F29P146
28    (JMP L15)


Disassembly of function #:|(DEFUN F1P137TEST (POW) ...)-101|
(CONST 0) = F1P137TEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F1P137TEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F1P137TEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F1P137TEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F1P137TEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F1P137TEST
8     (SKIP&RET 1)


Disassembly of function F1P137TEST
(CONST 0) = 1
(CONST 1) = ADD
(CONST 2) = NEGINP
(CONST 3) = F1P137
(CONST 4) = FAIL-IN-ARBPOW
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 1
2     (CALL2&PUSH 1)                      ; ADD
4     (CALL1&JMPIFNOT 2 L10)              ; NEGINP
7     (CONST 4)                           ; FAIL-IN-ARBPOW
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CALL1 3)                           ; F1P137
13    (SKIP&RET 2)


Disassembly of function #:|(DEFUN F1P137 (POW) ...)-102|
(CONST 0) = F1P137
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F1P137>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F1P137
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F1P137
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F1P137>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F1P137
8     (SKIP&RET 1)


Disassembly of function F1P137
(CONST 0) = 1
(CONST 1) = ADD
(CONST 2) = GM
(CONST 3) = PAR
(CONST 4) = -1
(CONST 5) = MUL
(CONST 6) = SUB
(CONST 7) = POWER
(CONST 8) = MUL*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (PAR)
13 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 1
2     (CALL2&PUSH 1)                      ; ADD
4     (CALL1&PUSH 2)                      ; GM
6     (GETVALUE&PUSH 3)                   ; PAR
8     (CONST&PUSH 4)                      ; -1
9     (LOAD&PUSH 4)
10    (CALL2&PUSH 5)                      ; MUL
12    (CONST&PUSH 0)                      ; 1
13    (CALL2&PUSH 6)                      ; SUB
15    (CALL2&PUSH 7)                      ; POWER
17    (CALL2 8)                           ; MUL*
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN F24P146 (C V A) ...)-103|
(CONST 0) = F24P146
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F24P146>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F24P146
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F24P146
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F24P146>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F24P146
8     (SKIP&RET 1)


Disassembly of function F24P146
(CONST 0) = C
(CONST 1) = V
(CONST 2) = A
(CONST 3) = GM
(CONST 4) = 2
(CONST 5) = POWER
(CONST 6) = DIV
(CONST 7) = $%E
(CONST 8) = PAR
(CONST 9) = MUL*
(CONST 10) = ((RAT SIMP) 1 2)
(CONST 11) = -1
(CONST 12) = MUL
(CONST 13) = DTFORD
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PAR A V C)
36 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 0)                   ; C
11    (GETVALUE&PUSH 1)                   ; V
13    (CALL1&PUSH 3)                      ; GM
15    (CONST&PUSH 4)                      ; 2
16    (GETVALUE&PUSH 1)                   ; V
18    (CALL2&PUSH 5)                      ; POWER
20    (GETVALUE&PUSH 2)                   ; A
22    (GETVALUE&PUSH 1)                   ; V
24    (CONST&PUSH 4)                      ; 2
25    (CALL2&PUSH 6)                      ; DIV
27    (CALL2&PUSH 5)                      ; POWER
29    (CONST&PUSH 7)                      ; $%E
30    (GETVALUE&PUSH 2)                   ; A
32    (GETVALUE&PUSH 8)                   ; PAR
34    (GETVALUE&PUSH 8)                   ; PAR
36    (CALL&PUSH 3 9)                     ; MUL*
39    (CALL2&PUSH 5)                      ; POWER
41    (CONST&PUSH 4)                      ; 2
42    (GETVALUE&PUSH 8)                   ; PAR
44    (GETVALUE&PUSH 2)                   ; A
46    (CONST&PUSH 10)                     ; ((RAT SIMP) 1 2)
47    (CALL2&PUSH 5)                      ; POWER
49    (CALL&PUSH 3 9)                     ; MUL*
52    (CONST&PUSH 11)                     ; -1
53    (GETVALUE&PUSH 1)                   ; V
55    (CALL2&PUSH 12)                     ; MUL
57    (CALL2&PUSH 13)                     ; DTFORD
59    (CALL 6 9)                          ; MUL*
62    (UNBIND 3)
64    (SKIP&RET 4)


Disassembly of function #:|(DEFUN F35P147 (C V A) ...)-104|
(CONST 0) = F35P147
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F35P147>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F35P147
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F35P147
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F35P147>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F35P147
8     (SKIP&RET 1)


Disassembly of function F35P147
(CONST 0) = C
(CONST 1) = V
(CONST 2) = A
(CONST 3) = ADD
(CONST 4) = GM
(CONST 5) = 2
(CONST 6) = 1
(CONST 7) = SUB
(CONST 8) = POWER
(CONST 9) = PAR
(CONST 10) = -1
(CONST 11) = MUL
(CONST 12) = $%E
(CONST 13) = ((RAT SIMP) 1 2)
(CONST 14) = MUL*
(CONST 15) = -2
(CONST 16) = DTFORD
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A PAR V C)
44 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 0)                   ; C
11    (GETVALUE&PUSH 1)                   ; V
13    (GETVALUE&PUSH 1)                   ; V
15    (CALL2&PUSH 3)                      ; ADD
17    (CALL1&PUSH 4)                      ; GM
19    (CONST&PUSH 5)                      ; 2
20    (CONST&PUSH 6)                      ; 1
21    (GETVALUE&PUSH 1)                   ; V
23    (CALL2&PUSH 7)                      ; SUB
25    (CALL2&PUSH 8)                      ; POWER
27    (GETVALUE&PUSH 9)                   ; PAR
29    (CONST&PUSH 10)                     ; -1
30    (GETVALUE&PUSH 1)                   ; V
32    (CALL2&PUSH 11)                     ; MUL
34    (CALL2&PUSH 8)                      ; POWER
36    (CONST&PUSH 12)                     ; $%E
37    (GETVALUE&PUSH 2)                   ; A
39    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
40    (GETVALUE&PUSH 9)                   ; PAR
42    (CONST&PUSH 10)                     ; -1
43    (CALL2&PUSH 8)                      ; POWER
45    (CALL&PUSH 3 14)                    ; MUL*
48    (CALL2&PUSH 8)                      ; POWER
50    (CONST&PUSH 5)                      ; 2
51    (GETVALUE&PUSH 2)                   ; A
53    (GETVALUE&PUSH 9)                   ; PAR
55    (CONST&PUSH 10)                     ; -1
56    (CALL2&PUSH 8)                      ; POWER
58    (CALL&PUSH 3 14)                    ; MUL*
61    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
62    (CALL2&PUSH 8)                      ; POWER
64    (CONST&PUSH 15)                     ; -2
65    (GETVALUE&PUSH 1)                   ; V
67    (CALL2&PUSH 11)                     ; MUL
69    (CALL2&PUSH 16)                     ; DTFORD
71    (CALL 6 14)                         ; MUL*
74    (UNBIND 3)
76    (SKIP&RET 4)


Disassembly of function #:|(DEFUN F29P146 (C V A) ...)-105|
(CONST 0) = F29P146
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F29P146>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F29P146
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F29P146
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F29P146>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F29P146
8     (SKIP&RET 1)


Disassembly of function F29P146
(CONST 0) = C
(CONST 1) = V
(CONST 2) = A
(CONST 3) = 2
(CONST 4) = 4
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = PAR
(CONST 8) = MUL*
(CONST 9) = DIV
(CONST 10) = KTFORK
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V PAR A)
25 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; C
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (CONST&PUSH 3)                      ; 2
10    (GETVALUE&PUSH 2)                   ; A
12    (CONST&PUSH 4)                      ; 4
13    (CONST&PUSH 5)                      ; -1
14    (CALL2&PUSH 6)                      ; POWER
16    (GETVALUE&PUSH 7)                   ; PAR
18    (CONST&PUSH 5)                      ; -1
19    (CALL2&PUSH 6)                      ; POWER
21    (CALL&PUSH 3 8)                     ; MUL*
24    (GETVALUE&PUSH 1)                   ; V
26    (CONST&PUSH 3)                      ; 2
27    (CALL2&PUSH 9)                      ; DIV
29    (CALL2&PUSH 6)                      ; POWER
31    (GETVALUE&PUSH 2)                   ; A
33    (GETVALUE&PUSH 1)                   ; V
35    (CALL2&PUSH 10)                     ; KTFORK
37    (CALL 3 8)                          ; MUL*
40    (UNBIND 3)
42    (SKIP&RET 4)


Disassembly of function #:|(DEFUN KTFORK (A V) ...)-106|
(CONST 0) = KTFORK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KTFORK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KTFORK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KTFORK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KTFORK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KTFORK
8     (SKIP&RET 1)


Disassembly of function KTFORK
(CONST 0) = A
(CONST 1) = V
(CONST 2) = PAR
(CONST 3) = MUL*
(CONST 4) = ((RAT SIMP) 1 2)
(CONST 5) = POWER
(CONST 6) = Z
(CONST 7) = MAXIMA-INTEGERP
(CONST 8) = KMODBES
(CONST 9) = SIMPKTF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V PAR A)
25 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; V
6     (GETVALUE&PUSH 0)                   ; A
8     (GETVALUE&PUSH 2)                   ; PAR
10    (CALL2&PUSH 3)                      ; MUL*
12    (CONST&PUSH 4)                      ; ((RAT SIMP) 1 2)
13    (CALL2 5)                           ; POWER
15    (BIND 6)                            ; Z
17    (GETVALUE&PUSH 1)                   ; V
19    (CALL1&JMPIF 7 L33)                 ; MAXIMA-INTEGERP
22    (GETVALUE&PUSH 6)                   ; Z
24    (GETVALUE&PUSH 1)                   ; V
26    (CALL2 9)                           ; SIMPKTF
28    (UNBIND1)
29    L29
29    (UNBIND 2)
31    (SKIP&RET 3)
33    L33
33    (GETVALUE&PUSH 6)                   ; Z
35    (GETVALUE&PUSH 1)                   ; V
37    (CALL2 8)                           ; KMODBES
39    (UNBIND1)
40    (JMP L29)


Disassembly of function #:|(DEFUN DTFORD (Z V) ...)-107|
(CONST 0) = DTFORD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DTFORD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DTFORD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DTFORD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DTFORD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DTFORD
8     (SKIP&RET 1)


Disassembly of function DTFORD
(CONST 0) = Z
(CONST 1) = V
(CONST 2) = 4
(CONST 3) = -1
(CONST 4) = POWER
(CONST 5) = 2
(CONST 6) = DIV
(CONST 7) = ADD
(CONST 8) = WHITTINDTEST
(CONST 9) = PARCYL
(CONST 10) = SIMPDTF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
27 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; Z
3     (LOAD 4)
4     (BIND 1)                            ; V
6     (CONST&PUSH 2)                      ; 4
7     (CONST&PUSH 3)                      ; -1
8     (CALL2&PUSH 4)                      ; POWER
10    (GETVALUE&PUSH 1)                   ; V
12    (CONST&PUSH 5)                      ; 2
13    (CALL2&PUSH 6)                      ; DIV
15    (LOAD&PUSH 1)
16    (CALL2&PUSH 7)                      ; ADD
18    (LOAD&PUSH 1)
19    (CALL2 8)                           ; WHITTINDTEST
21    (SKIP 1)
23    (JMPIF L35)
25    (GETVALUE&PUSH 0)                   ; Z
27    (GETVALUE&PUSH 1)                   ; V
29    (CALL2 10)                          ; SIMPDTF
31    L31
31    (UNBIND 2)
33    (SKIP&RET 3)
35    L35
35    (GETVALUE&PUSH 0)                   ; Z
37    (GETVALUE&PUSH 1)                   ; V
39    (CALL2 9)                           ; PARCYL
41    (JMP L31)


Disassembly of function #:|(DEFUN SIMPDTF (Z V) ...)-108|
(CONST 0) = SIMPDTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPDTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPDTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPDTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPDTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPDTF
8     (SKIP&RET 1)


Disassembly of function SIMPDTF
(CONST 0) = Z
(CONST 1) = V
(CONST 2) = $%E
(CONST 3) = -4
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = MUL*
(CONST 7) = 2
(CONST 8) = 1
(CONST 9) = SUB
(CONST 10) = DIV
(CONST 11) = -2
(CONST 12) = GM
(CONST 13) = ((RAT SIMP) 1 2)
(CONST 14) = 3
(CONST 15) = HGFSIMP-EXEC
(CONST 16) = MUL
(CONST 17) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V Z)
81 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; Z
3     (LOAD 4)
4     (BIND 1)                            ; V
6     (CONST&PUSH 2)                      ; $%E
7     (GETVALUE&PUSH 0)                   ; Z
9     (GETVALUE&PUSH 0)                   ; Z
11    (CONST&PUSH 3)                      ; -4
12    (CONST&PUSH 4)                      ; -1
13    (CALL2&PUSH 5)                      ; POWER
15    (CALL&PUSH 3 6)                     ; MUL*
18    (CALL2&PUSH 5)                      ; POWER
20    (CONST&PUSH 7)                      ; 2
21    (GETVALUE&PUSH 1)                   ; V
23    (CONST&PUSH 8)                      ; 1
24    (CALL2&PUSH 9)                      ; SUB
26    (CONST&PUSH 7)                      ; 2
27    (CALL2&PUSH 10)                     ; DIV
29    (CALL2&PUSH 5)                      ; POWER
31    (GETVALUE&PUSH 0)                   ; Z
33    (CONST&PUSH 11)                     ; -2
34    (CONST&PUSH 4)                      ; -1
35    (CALL2&PUSH 5)                      ; POWER
37    (CALL1&PUSH 12)                     ; GM
39    (GETVALUE&PUSH 1)                   ; V
41    (CONST&PUSH 4)                      ; -1
42    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
43    (CALL&PUSH 3 6)                     ; MUL*
46    (CALL1&PUSH 12)                     ; GM
48    (CONST&PUSH 4)                      ; -1
49    (CALL2&PUSH 5)                      ; POWER
51    (LOAD&PUSH 4)
52    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
53    (GETVALUE&PUSH 1)                   ; V
55    (CONST&PUSH 7)                      ; 2
56    (CALL2&PUSH 10)                     ; DIV
58    (CALL2&PUSH 9)                      ; SUB
60    (LIST&PUSH 1)
62    (CONST&PUSH 14)                     ; 3
63    (CONST&PUSH 7)                      ; 2
64    (CALL2&PUSH 10)                     ; DIV
66    (LIST&PUSH 1)
68    (GETVALUE&PUSH 0)                   ; Z
70    (GETVALUE&PUSH 0)                   ; Z
72    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
73    (CALL&PUSH 3 6)                     ; MUL*
76    (CALL&PUSH 3 15)                    ; HGFSIMP-EXEC
79    (CALL&PUSH 6 6)                     ; MUL*
82    (CONST&PUSH 7)                      ; 2
83    (GETVALUE&PUSH 1)                   ; V
85    (CONST&PUSH 7)                      ; 2
86    (CALL2&PUSH 10)                     ; DIV
88    (CALL2&PUSH 5)                      ; POWER
90    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
91    (CALL1&PUSH 12)                     ; GM
93    (LOAD&PUSH 3)
94    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
95    (GETVALUE&PUSH 1)                   ; V
97    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
98    (CALL2&PUSH 16)                     ; MUL
100   (CALL2&PUSH 9)                      ; SUB
102   (CALL1&PUSH 12)                     ; GM
104   (CONST&PUSH 4)                      ; -1
105   (CALL2&PUSH 5)                      ; POWER
107   (GETVALUE&PUSH 1)                   ; V
109   (CONST&PUSH 4)                      ; -1
110   (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
111   (CALL&PUSH 3 6)                     ; MUL*
114   (LIST&PUSH 1)
116   (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
117   (LIST&PUSH 1)
119   (GETVALUE&PUSH 0)                   ; Z
121   (GETVALUE&PUSH 0)                   ; Z
123   (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
124   (CALL&PUSH 3 6)                     ; MUL*
127   (CALL&PUSH 3 15)                    ; HGFSIMP-EXEC
130   (CALL&PUSH 5 6)                     ; MUL*
133   (CALL2 17)                          ; ADD
135   (SKIP 1)
137   (UNBIND 2)
139   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SIMPKTF (Z V) ...)-109|
(CONST 0) = SIMPKTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMPKTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMPKTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMPKTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMPKTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMPKTF
8     (SKIP&RET 1)


Disassembly of function SIMPKTF
(CONST 0) = Z
(CONST 1) = V
(CONST 2) = 2
(CONST 3) = DIV
(CONST 4) = $%PI
(CONST 5) = ((RAT SIMP) 1 2)
(CONST 6) = MUL
(CONST 7) = SIN%
(CONST 8) = -1
(CONST 9) = POWER
(CONST 10) = 1
(CONST 11) = SUB
(CONST 12) = GM
(CONST 13) = 4
(CONST 14) = MUL*
(CONST 15) = HGFSIMP-EXEC
(CONST 16) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V Z)
66 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; Z
3     (LOAD 4)
4     (BIND 1)                            ; V
6     (GETVALUE&PUSH 0)                   ; Z
8     (CONST&PUSH 2)                      ; 2
9     (CALL2&PUSH 3)                      ; DIV
11    (CONST&PUSH 4)                      ; $%PI
12    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
13    (GETVALUE&PUSH 1)                   ; V
15    (CONST&PUSH 4)                      ; $%PI
16    (CALL2&PUSH 6)                      ; MUL
18    (CALL1&PUSH 7)                      ; SIN%
20    (CONST&PUSH 8)                      ; -1
21    (CALL2&PUSH 9)                      ; POWER
23    (LOAD&PUSH 3)
24    (CONST&PUSH 8)                      ; -1
25    (GETVALUE&PUSH 1)                   ; V
27    (CALL2&PUSH 6)                      ; MUL
29    (CALL2&PUSH 9)                      ; POWER
31    (CONST&PUSH 10)                     ; 1
32    (GETVALUE&PUSH 1)                   ; V
34    (CALL2&PUSH 11)                     ; SUB
36    (CALL1&PUSH 12)                     ; GM
38    (CONST&PUSH 8)                      ; -1
39    (CALL2&PUSH 9)                      ; POWER
41    (NIL&PUSH)
42    (CONST&PUSH 10)                     ; 1
43    (GETVALUE&PUSH 1)                   ; V
45    (CALL2&PUSH 11)                     ; SUB
47    (LIST&PUSH 1)
49    (GETVALUE&PUSH 0)                   ; Z
51    (GETVALUE&PUSH 0)                   ; Z
53    (CONST&PUSH 13)                     ; 4
54    (CONST&PUSH 8)                      ; -1
55    (CALL2&PUSH 9)                      ; POWER
57    (CALL&PUSH 3 14)                    ; MUL*
60    (CALL&PUSH 3 15)                    ; HGFSIMP-EXEC
63    (CALL&PUSH 3 14)                    ; MUL*
66    (LOAD&PUSH 4)
67    (GETVALUE&PUSH 1)                   ; V
69    (CALL2&PUSH 9)                      ; POWER
71    (GETVALUE&PUSH 1)                   ; V
73    (CONST&PUSH 10)                     ; 1
74    (CALL2&PUSH 16)                     ; ADD
76    (CALL1&PUSH 12)                     ; GM
78    (CONST&PUSH 8)                      ; -1
79    (CALL2&PUSH 9)                      ; POWER
81    (NIL&PUSH)
82    (GETVALUE&PUSH 1)                   ; V
84    (CONST&PUSH 10)                     ; 1
85    (CALL2&PUSH 16)                     ; ADD
87    (LIST&PUSH 1)
89    (GETVALUE&PUSH 0)                   ; Z
91    (GETVALUE&PUSH 0)                   ; Z
93    (CONST&PUSH 13)                     ; 4
94    (CONST&PUSH 8)                      ; -1
95    (CALL2&PUSH 9)                      ; POWER
97    (CALL&PUSH 3 14)                    ; MUL*
100   (CALL&PUSH 3 15)                    ; HGFSIMP-EXEC
103   (CALL&PUSH 3 14)                    ; MUL*
106   (CALL2&PUSH 11)                     ; SUB
108   (CALL 4 14)                         ; MUL*
111   (SKIP 1)
113   (UNBIND 2)
115   (SKIP&RET 3)


Disassembly of function #:|(DEFUN LT-SF-LOG (U) ...)-110|
(CONST 0) = LT-SF-LOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT-SF-LOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT-SF-LOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT-SF-LOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT-SF-LOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT-SF-LOG
8     (SKIP&RET 1)


Disassembly of function LT-SF-LOG
(CONST 0) = U
(CONST 1) = L
(CONST 2) = TWOJ
(CONST 3) = V1
(CONST 4) = CDRAS
(CONST 5) = V2
(CONST 6) = W1
(CONST 7) = W2
(CONST 8) = LT2J
(CONST 9) = TWOH
(CONST 10) = V11
(CONST 11) = V21
(CONST 12) = 2HTJORY
(CONST 13) = FRACTEST
(CONST 14) = TWOY
(CONST 15) = 2YTJ
(CONST 16) = TWOK
(CONST 17) = 2KTI
(CONST 18) = ONEKONEY
(CONST 19) = KTIYTJ
(CONST 20) = ONEIONEJ
(CONST 21) = 1FACT
(CONST 22) = MUL*
(CONST 23) = ONEIONEH
(CONST 24) = BESSHTJORY
(CONST 25) = FRACTEST1
(CONST 26) = ONEYONEJ
(CONST 27) = BESSYTJ
(CONST 28) = ONEKONEJ
(CONST 29) = BESSKTI
(CONST 30) = ONEHONEJ
(CONST 31) = ONEYONEH
(CONST 32) = HTJORYYTJ
(CONST 33) = ONEKONEH
(CONST 34) = HTJORYKTI
(CONST 35) = ONEIONEY
(CONST 36) = ONEIONEK
(CONST 37) = ONEHSTRUVE
(CONST 38) = V
(CONST 39) = W
(CONST 40) = LT1HSTRUVE
(CONST 41) = ONELSTRUVE
(CONST 42) = LT1LSTRUVE
(CONST 43) = ONES
(CONST 44) = LT1S
(CONST 45) = ONESLOMMEL
(CONST 46) = SLOMMEL
(CONST 47) = FRACTEST2
(CONST 48) = ONEY
(CONST 49) = LT1YREF
(CONST 50) = ONEK
(CONST 51) = KTI
(CONST 52) = ONED
(CONST 53) = D
(CONST 54) = ONEGAMMAINCOMPLETE
(CONST 55) = GAMMAINCOMPLETE
(CONST 56) = ONEKBATEMAN
(CONST 57) = KBATEMAN
(CONST 58) = ONEJ
(CONST 59) = LT1J
(CONST 60) = ONEGAMMAGREEK
(CONST 61) = LT1GAMMAGREEK
(CONST 62) = ONEH
(CONST 63) = HTJORY
(CONST 64) = ONEM
(CONST 65) = LT1M
(CONST 66) = ONEL
(CONST 67) = INTEGERTEST
(CONST 68) = ONEC
(CONST 69) = C
(CONST 70) = ONET
(CONST 71) = ONEU
(CONST 72) = ONEHE
(CONST 73) = HE
(CONST 74) = HYP-ONEP
(CONST 75) = LT1P
(CONST 76) = ONEPJAC
(CONST 77) = V3
(CONST 78) = PJACTEST
(CONST 79) = ONEQ
(CONST 80) = LT1Q
(CONST 81) = ONEP0
(CONST 82) = 0
(CONST 83) = ONEW
(CONST 84) = WHITTEST
(CONST 85) = ONEJ^2
(CONST 86) = LT1J^2
(CONST 87) = ONEH^2
(CONST 88) = ONEY^2
(CONST 89) = ONEK^2
(CONST 90) = TWOI
(CONST 91) = ONEI
(CONST 92) = ONEI^2
(CONST 93) = ONERF
(CONST 94) = LT1ERF
(CONST 95) = ONELOG
(CONST 96) = LT1LOG
(CONST 97) = ONERFC
(CONST 98) = ERFC
(CONST 99) = ONEEI
(CONST 100) = EI
(CONST 101) = ONEKELLIPTIC
(CONST 102) = LT1KELLIPTIC
(CONST 103) = ONEE
(CONST 104) = LT1E
(CONST 105) = ARBPOW1
(CONST 106) = LT-ARBPOW
(CONST 107) = MUL
(CONST 108) = OTHER-J-CASES-NEXT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L U)
writes special variable : (L)
1432 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; U
3     (NIL)
4     (BIND 1)                            ; L
6     (PUSH-NIL 7)
8     (GETVALUE&PUSH 0)                   ; U
10    (CALL1 2)                           ; TWOJ
12    (SETVALUE 1)                        ; L
14    (JMPIF L466)
17    (GETVALUE&PUSH 0)                   ; U
19    (CALL1 9)                           ; TWOH
21    (SETVALUE 1)                        ; L
23    (JMPIF L498)
26    (GETVALUE&PUSH 0)                   ; U
28    (CALL1 14)                          ; TWOY
30    (SETVALUE 1)                        ; L
32    (JMPIF L551)
35    (GETVALUE&PUSH 0)                   ; U
37    (CALL1 16)                          ; TWOK
39    (SETVALUE 1)                        ; L
41    (JMPIF L592)
44    (GETVALUE&PUSH 0)                   ; U
46    (CALL1 18)                          ; ONEKONEY
48    (SETVALUE 1)                        ; L
50    (JMPIF L633)
53    (GETVALUE&PUSH 0)                   ; U
55    (CALL1 20)                          ; ONEIONEJ
57    (SETVALUE 1)                        ; L
59    (JMPIF L674)
62    (GETVALUE&PUSH 0)                   ; U
64    (CALL1 23)                          ; ONEIONEH
66    (SETVALUE 1)                        ; L
68    (JMPIF L724)
71    (GETVALUE&PUSH 0)                   ; U
73    (CALL1 26)                          ; ONEYONEJ
75    (SETVALUE 1)                        ; L
77    (JMPIF L783)
80    (GETVALUE&PUSH 0)                   ; U
82    (CALL1 28)                          ; ONEKONEJ
84    (SETVALUE 1)                        ; L
86    (JMPIF L824)
89    (GETVALUE&PUSH 0)                   ; U
91    (CALL1 30)                          ; ONEHONEJ
93    (SETVALUE 1)                        ; L
95    (JMPIF L865)
98    (GETVALUE&PUSH 0)                   ; U
100   (CALL1 31)                          ; ONEYONEH
102   (SETVALUE 1)                        ; L
104   (JMPIF L912)
107   (GETVALUE&PUSH 0)                   ; U
109   (CALL1 33)                          ; ONEKONEH
111   (SETVALUE 1)                        ; L
113   (JMPIF L959)
116   (GETVALUE&PUSH 0)                   ; U
118   (CALL1 35)                          ; ONEIONEY
120   (SETVALUE 1)                        ; L
122   (JMPIF L1006)
125   (GETVALUE&PUSH 0)                   ; U
127   (CALL1 36)                          ; ONEIONEK
129   (SETVALUE 1)                        ; L
131   (JMPIF L1058)
134   (GETVALUE&PUSH 0)                   ; U
136   (CALL1 37)                          ; ONEHSTRUVE
138   (SETVALUE 1)                        ; L
140   (JMPIF L1115)
143   (GETVALUE&PUSH 0)                   ; U
145   (CALL1 41)                          ; ONELSTRUVE
147   (SETVALUE 1)                        ; L
149   (JMPIF L1144)
152   (GETVALUE&PUSH 0)                   ; U
154   (CALL1 43)                          ; ONES
156   (SETVALUE 1)                        ; L
158   (JMPIF L1173)
161   (GETVALUE&PUSH 0)                   ; U
163   (CALL1 45)                          ; ONESLOMMEL
165   (SETVALUE 1)                        ; L
167   (JMPIF L1208)
170   (GETVALUE&PUSH 0)                   ; U
172   (CALL1 48)                          ; ONEY
174   (SETVALUE 1)                        ; L
176   (JMPIF L1242)
179   (GETVALUE&PUSH 0)                   ; U
181   (CALL1 50)                          ; ONEK
183   (SETVALUE 1)                        ; L
185   (JMPIF L1271)
188   (GETVALUE&PUSH 0)                   ; U
190   (CALL1 52)                          ; ONED
192   (SETVALUE 1)                        ; L
194   (JMPIF L1300)
197   (GETVALUE&PUSH 0)                   ; U
199   (CALL1 54)                          ; ONEGAMMAINCOMPLETE
201   (SETVALUE 1)                        ; L
203   (JMPIF L1329)
206   (GETVALUE&PUSH 0)                   ; U
208   (CALL1 56)                          ; ONEKBATEMAN
210   (SETVALUE 1)                        ; L
212   (JMPIF L1356)
215   (GETVALUE&PUSH 0)                   ; U
217   (CALL1 58)                          ; ONEJ
219   (SETVALUE 1)                        ; L
221   (JMPIF L1385)
224   (GETVALUE&PUSH 0)                   ; U
226   (CALL1 60)                          ; ONEGAMMAGREEK
228   (SETVALUE 1)                        ; L
230   (JMPIF L1407)
233   (GETVALUE&PUSH 0)                   ; U
235   (CALL1 62)                          ; ONEH
237   (SETVALUE 1)                        ; L
239   (JMPIF L1434)
242   (GETVALUE&PUSH 0)                   ; U
244   (CALL1 64)                          ; ONEM
246   (SETVALUE 1)                        ; L
248   (JMPIF L1468)
251   (GETVALUE&PUSH 0)                   ; U
253   (CALL1 66)                          ; ONEL
255   (SETVALUE 1)                        ; L
257   (JMPIF L1503)
260   (GETVALUE&PUSH 0)                   ; U
262   (CALL1 68)                          ; ONEC
264   (SETVALUE 1)                        ; L
266   (JMPIF L1536)
269   (GETVALUE&PUSH 0)                   ; U
271   (CALL1 70)                          ; ONET
273   (SETVALUE 1)                        ; L
275   (JMPIF L1570)
278   (GETVALUE&PUSH 0)                   ; U
280   (CALL1 71)                          ; ONEU
282   (SETVALUE 1)                        ; L
284   (JMPIF L1596)
287   (GETVALUE&PUSH 0)                   ; U
289   (CALL1 72)                          ; ONEHE
291   (SETVALUE 1)                        ; L
293   (JMPIF L1622)
296   (GETVALUE&PUSH 0)                   ; U
298   (CALL1 74)                          ; HYP-ONEP
300   (SETVALUE 1)                        ; L
302   (JMPIF L1654)
305   (GETVALUE&PUSH 0)                   ; U
307   (CALL1 76)                          ; ONEPJAC
309   (SETVALUE 1)                        ; L
311   (JMPIF L1677)
314   (GETVALUE&PUSH 0)                   ; U
316   (CALL1 79)                          ; ONEQ
318   (SETVALUE 1)                        ; L
320   (JMPIF L1720)
323   (GETVALUE&PUSH 0)                   ; U
325   (CALL1 81)                          ; ONEP0
327   (SETVALUE 1)                        ; L
329   (JMPIF L1755)
332   (GETVALUE&PUSH 0)                   ; U
334   (CALL1 83)                          ; ONEW
336   (SETVALUE 1)                        ; L
338   (JMPIF L1788)
341   (GETVALUE&PUSH 0)                   ; U
343   (CALL1 85)                          ; ONEJ^2
345   (SETVALUE 1)                        ; L
347   (JMPIF L1823)
350   (GETVALUE&PUSH 0)                   ; U
352   (CALL1 87)                          ; ONEH^2
354   (SETVALUE 1)                        ; L
356   (JMPIF L1845)
359   (GETVALUE&PUSH 0)                   ; U
361   (CALL1 88)                          ; ONEY^2
363   (SETVALUE 1)                        ; L
365   (JMPIF L1880)
368   (GETVALUE&PUSH 0)                   ; U
370   (CALL1 89)                          ; ONEK^2
372   (SETVALUE 1)                        ; L
374   (JMPIF L1910)
377   (GETVALUE&PUSH 0)                   ; U
379   (CALL1 90)                          ; TWOI
381   (SETVALUE 1)                        ; L
383   (JMPIF L1945)
386   (GETVALUE&PUSH 0)                   ; U
388   (CALL1 91)                          ; ONEI
390   (SETVALUE 1)                        ; L
392   (JMPIF L2009)
395   (GETVALUE&PUSH 0)                   ; U
397   (CALL1 92)                          ; ONEI^2
399   (SETVALUE 1)                        ; L
401   (JMPIF L2050)
404   (GETVALUE&PUSH 0)                   ; U
406   (CALL1 93)                          ; ONERF
408   (SETVALUE 1)                        ; L
410   (JMPIF L2091)
413   (GETVALUE&PUSH 0)                   ; U
415   (CALL1 95)                          ; ONELOG
417   (SETVALUE 1)                        ; L
419   (JMPIF L2111)
422   (GETVALUE&PUSH 0)                   ; U
424   (CALL1 97)                          ; ONERFC
426   (SETVALUE 1)                        ; L
428   (JMPIF L2131)
431   (GETVALUE&PUSH 0)                   ; U
433   (CALL1 99)                          ; ONEEI
435   (SETVALUE 1)                        ; L
437   (JMPIFNOT L2192)
440   (CONST&PUSH 39)                     ; W
442   (GETVALUE&PUSH 1)                   ; L
444   (CALL2 4)                           ; CDRAS
446   (STORE 2)
447   (CONST&PUSH 0)                      ; U
448   (GETVALUE&PUSH 1)                   ; L
450   (CALL2 4)                           ; CDRAS
452   (STORE 0)
453   (PUSH)
454   (LOAD&PUSH 3)
455   (PUSH-NIL 2)
457   (CONST 100)                         ; EI
459   L459
459   (PUSH)
460   (CALL 5 47)                         ; FRACTEST2
463   (JMP L2243)
466   L466
466   (CONST&PUSH 3)                      ; V1
467   (GETVALUE&PUSH 1)                   ; L
469   (CALL2 4)                           ; CDRAS
471   (STORE 6)
472   (CONST&PUSH 5)                      ; V2
473   (GETVALUE&PUSH 1)                   ; L
475   (CALL2 4)                           ; CDRAS
477   (STORE 4)
478   (CONST&PUSH 6)                      ; W1
479   (GETVALUE&PUSH 1)                   ; L
481   (CALL2 4)                           ; CDRAS
483   (STORE 2)
484   (CONST&PUSH 7)                      ; W2
485   (GETVALUE&PUSH 1)                   ; L
487   (CALL2 4)                           ; CDRAS
489   (STORE 1)
490   (CONST&PUSH 0)                      ; U
491   (GETVALUE&PUSH 1)                   ; L
493   (CALL2 4)                           ; CDRAS
495   (JMP L1997)
498   L498
498   (CONST&PUSH 3)                      ; V1
499   (GETVALUE&PUSH 1)                   ; L
501   (CALL2 4)                           ; CDRAS
503   (STORE 6)
504   (CONST&PUSH 10)                     ; V11
505   (GETVALUE&PUSH 1)                   ; L
507   (CALL2 4)                           ; CDRAS
509   (STORE 5)
510   (CONST&PUSH 5)                      ; V2
511   (GETVALUE&PUSH 1)                   ; L
513   (CALL2 4)                           ; CDRAS
515   (STORE 4)
516   (CONST&PUSH 11)                     ; V21
517   (GETVALUE&PUSH 1)                   ; L
519   (CALL2 4)                           ; CDRAS
521   (STORE 3)
522   (CONST&PUSH 6)                      ; W1
523   (GETVALUE&PUSH 1)                   ; L
525   (CALL2 4)                           ; CDRAS
527   (STORE 2)
528   (CONST&PUSH 7)                      ; W2
529   (GETVALUE&PUSH 1)                   ; L
531   (CALL2 4)                           ; CDRAS
533   (STORE 1)
534   (CONST&PUSH 0)                      ; U
535   (GETVALUE&PUSH 1)                   ; L
537   (CALL2 4)                           ; CDRAS
539   (STORE 0)
540   (PUSH)
541   (LOAD&PUSH 3)
542   (LOAD&PUSH 3)
543   (LOAD&PUSH 9)
544   (LOAD&PUSH 9)
545   (LOAD&PUSH 9)
546   (LOAD&PUSH 9)
547   (CONST 12)                          ; 2HTJORY
548   (JMP L1938)
551   L551
551   (CONST&PUSH 3)                      ; V1
552   (GETVALUE&PUSH 1)                   ; L
554   (CALL2 4)                           ; CDRAS
556   (STORE 6)
557   (CONST&PUSH 5)                      ; V2
558   (GETVALUE&PUSH 1)                   ; L
560   (CALL2 4)                           ; CDRAS
562   (STORE 4)
563   (CONST&PUSH 6)                      ; W1
564   (GETVALUE&PUSH 1)                   ; L
566   (CALL2 4)                           ; CDRAS
568   (STORE 2)
569   (CONST&PUSH 7)                      ; W2
570   (GETVALUE&PUSH 1)                   ; L
572   (CALL2 4)                           ; CDRAS
574   (STORE 1)
575   (CONST&PUSH 0)                      ; U
576   (GETVALUE&PUSH 1)                   ; L
578   (CALL2 4)                           ; CDRAS
580   (STORE 0)
581   (PUSH)
582   (LOAD&PUSH 3)
583   (LOAD&PUSH 3)
584   (LOAD&PUSH 9)
585   (NIL&PUSH)
586   (LOAD&PUSH 9)
587   (NIL&PUSH)
588   (CONST 15)                          ; 2YTJ
589   (JMP L1938)
592   L592
592   (CONST&PUSH 3)                      ; V1
593   (GETVALUE&PUSH 1)                   ; L
595   (CALL2 4)                           ; CDRAS
597   (STORE 6)
598   (CONST&PUSH 5)                      ; V2
599   (GETVALUE&PUSH 1)                   ; L
601   (CALL2 4)                           ; CDRAS
603   (STORE 4)
604   (CONST&PUSH 6)                      ; W1
605   (GETVALUE&PUSH 1)                   ; L
607   (CALL2 4)                           ; CDRAS
609   (STORE 2)
610   (CONST&PUSH 7)                      ; W2
611   (GETVALUE&PUSH 1)                   ; L
613   (CALL2 4)                           ; CDRAS
615   (STORE 1)
616   (CONST&PUSH 0)                      ; U
617   (GETVALUE&PUSH 1)                   ; L
619   (CALL2 4)                           ; CDRAS
621   (STORE 0)
622   (PUSH)
623   (LOAD&PUSH 3)
624   (LOAD&PUSH 3)
625   (LOAD&PUSH 9)
626   (NIL&PUSH)
627   (LOAD&PUSH 9)
628   (NIL&PUSH)
629   (CONST 17)                          ; 2KTI
630   (JMP L1938)
633   L633
633   (CONST&PUSH 3)                      ; V1
634   (GETVALUE&PUSH 1)                   ; L
636   (CALL2 4)                           ; CDRAS
638   (STORE 6)
639   (CONST&PUSH 5)                      ; V2
640   (GETVALUE&PUSH 1)                   ; L
642   (CALL2 4)                           ; CDRAS
644   (STORE 4)
645   (CONST&PUSH 6)                      ; W1
646   (GETVALUE&PUSH 1)                   ; L
648   (CALL2 4)                           ; CDRAS
650   (STORE 2)
651   (CONST&PUSH 7)                      ; W2
652   (GETVALUE&PUSH 1)                   ; L
654   (CALL2 4)                           ; CDRAS
656   (STORE 1)
657   (CONST&PUSH 0)                      ; U
658   (GETVALUE&PUSH 1)                   ; L
660   (CALL2 4)                           ; CDRAS
662   (STORE 0)
663   (PUSH)
664   (LOAD&PUSH 3)
665   (LOAD&PUSH 3)
666   (LOAD&PUSH 9)
667   (NIL&PUSH)
668   (LOAD&PUSH 9)
669   (NIL&PUSH)
670   (CONST 19)                          ; KTIYTJ
671   (JMP L1938)
674   L674
674   (CONST&PUSH 3)                      ; V1
675   (GETVALUE&PUSH 1)                   ; L
677   (CALL2 4)                           ; CDRAS
679   (STORE 6)
680   (CONST&PUSH 5)                      ; V2
681   (GETVALUE&PUSH 1)                   ; L
683   (CALL2 4)                           ; CDRAS
685   (STORE 4)
686   (CONST&PUSH 11)                     ; V21
687   (GETVALUE&PUSH 1)                   ; L
689   (CALL2 4)                           ; CDRAS
691   (STORE 3)
692   (T&PUSH)
693   (T&PUSH)
694   (CALL2&PUSH 21)                     ; 1FACT
696   (CONST&PUSH 6)                      ; W1
697   (GETVALUE&PUSH 1)                   ; L
699   (CALL2&PUSH 4)                      ; CDRAS
701   (CALL2 22)                          ; MUL*
703   (STORE 2)
704   (CONST&PUSH 7)                      ; W2
705   (GETVALUE&PUSH 1)                   ; L
707   (CALL2 4)                           ; CDRAS
709   (STORE 1)
710   (NIL&PUSH)
711   (LOAD&PUSH 7)
712   (CALL2&PUSH 21)                     ; 1FACT
714   (CONST&PUSH 0)                      ; U
715   (GETVALUE&PUSH 1)                   ; L
717   (CALL2&PUSH 4)                      ; CDRAS
719   (CALL2 22)                          ; MUL*
721   (JMP L1997)
724   L724
724   (CONST&PUSH 3)                      ; V1
725   (GETVALUE&PUSH 1)                   ; L
727   (CALL2 4)                           ; CDRAS
729   (STORE 6)
730   (CONST&PUSH 5)                      ; V2
731   (GETVALUE&PUSH 1)                   ; L
733   (CALL2 4)                           ; CDRAS
735   (STORE 4)
736   (CONST&PUSH 11)                     ; V21
737   (GETVALUE&PUSH 1)                   ; L
739   (CALL2 4)                           ; CDRAS
741   (STORE 3)
742   (T&PUSH)
743   (T&PUSH)
744   (CALL2&PUSH 21)                     ; 1FACT
746   (CONST&PUSH 6)                      ; W1
747   (GETVALUE&PUSH 1)                   ; L
749   (CALL2&PUSH 4)                      ; CDRAS
751   (CALL2 22)                          ; MUL*
753   (STORE 2)
754   (CONST&PUSH 7)                      ; W2
755   (GETVALUE&PUSH 1)                   ; L
757   (CALL2 4)                           ; CDRAS
759   (STORE 1)
760   (NIL&PUSH)
761   (LOAD&PUSH 7)
762   (CALL2&PUSH 21)                     ; 1FACT
764   (CONST&PUSH 0)                      ; U
765   (GETVALUE&PUSH 1)                   ; L
767   (CALL2&PUSH 4)                      ; CDRAS
769   (CALL2 22)                          ; MUL*
771   (STORE 0)
772   (PUSH)
773   (LOAD&PUSH 3)
774   (LOAD&PUSH 3)
775   (LOAD&PUSH 9)
776   (LOAD&PUSH 8)
777   (LOAD&PUSH 8)
778   (CONST 24)                          ; BESSHTJORY
780   (JMP L1108)
783   L783
783   (CONST&PUSH 3)                      ; V1
784   (GETVALUE&PUSH 1)                   ; L
786   (CALL2 4)                           ; CDRAS
788   (STORE 6)
789   (CONST&PUSH 5)                      ; V2
790   (GETVALUE&PUSH 1)                   ; L
792   (CALL2 4)                           ; CDRAS
794   (STORE 4)
795   (CONST&PUSH 6)                      ; W1
796   (GETVALUE&PUSH 1)                   ; L
798   (CALL2 4)                           ; CDRAS
800   (STORE 2)
801   (CONST&PUSH 7)                      ; W2
802   (GETVALUE&PUSH 1)                   ; L
804   (CALL2 4)                           ; CDRAS
806   (STORE 1)
807   (CONST&PUSH 0)                      ; U
808   (GETVALUE&PUSH 1)                   ; L
810   (CALL2 4)                           ; CDRAS
812   (STORE 0)
813   (PUSH)
814   (LOAD&PUSH 2)
815   (LOAD&PUSH 4)
816   (LOAD&PUSH 7)
817   (LOAD&PUSH 10)
818   (NIL&PUSH)
819   (CONST 27)                          ; BESSYTJ
821   (JMP L1108)
824   L824
824   (CONST&PUSH 3)                      ; V1
825   (GETVALUE&PUSH 1)                   ; L
827   (CALL2 4)                           ; CDRAS
829   (STORE 6)
830   (CONST&PUSH 5)                      ; V2
831   (GETVALUE&PUSH 1)                   ; L
833   (CALL2 4)                           ; CDRAS
835   (STORE 4)
836   (CONST&PUSH 6)                      ; W1
837   (GETVALUE&PUSH 1)                   ; L
839   (CALL2 4)                           ; CDRAS
841   (STORE 2)
842   (CONST&PUSH 7)                      ; W2
843   (GETVALUE&PUSH 1)                   ; L
845   (CALL2 4)                           ; CDRAS
847   (STORE 1)
848   (CONST&PUSH 0)                      ; U
849   (GETVALUE&PUSH 1)                   ; L
851   (CALL2 4)                           ; CDRAS
853   (STORE 0)
854   (PUSH)
855   (LOAD&PUSH 2)
856   (LOAD&PUSH 4)
857   (LOAD&PUSH 7)
858   (LOAD&PUSH 10)
859   (NIL&PUSH)
860   (CONST 29)                          ; BESSKTI
862   (JMP L1108)
865   L865
865   (CONST&PUSH 3)                      ; V1
866   (GETVALUE&PUSH 1)                   ; L
868   (CALL2 4)                           ; CDRAS
870   (STORE 6)
871   (CONST&PUSH 10)                     ; V11
872   (GETVALUE&PUSH 1)                   ; L
874   (CALL2 4)                           ; CDRAS
876   (STORE 5)
877   (CONST&PUSH 5)                      ; V2
878   (GETVALUE&PUSH 1)                   ; L
880   (CALL2 4)                           ; CDRAS
882   (STORE 4)
883   (CONST&PUSH 6)                      ; W1
884   (GETVALUE&PUSH 1)                   ; L
886   (CALL2 4)                           ; CDRAS
888   (STORE 2)
889   (CONST&PUSH 7)                      ; W2
890   (GETVALUE&PUSH 1)                   ; L
892   (CALL2 4)                           ; CDRAS
894   (STORE 1)
895   (CONST&PUSH 0)                      ; U
896   (GETVALUE&PUSH 1)                   ; L
898   (CALL2 4)                           ; CDRAS
900   (STORE 0)
901   (PUSH)
902   (LOAD&PUSH 2)
903   (LOAD&PUSH 4)
904   (LOAD&PUSH 7)
905   (LOAD&PUSH 10)
906   (LOAD&PUSH 10)
907   (CONST 24)                          ; BESSHTJORY
909   (JMP L1108)
912   L912
912   (CONST&PUSH 3)                      ; V1
913   (GETVALUE&PUSH 1)                   ; L
915   (CALL2 4)                           ; CDRAS
917   (STORE 6)
918   (CONST&PUSH 5)                      ; V2
919   (GETVALUE&PUSH 1)                   ; L
921   (CALL2 4)                           ; CDRAS
923   (STORE 4)
924   (CONST&PUSH 11)                     ; V21
925   (GETVALUE&PUSH 1)                   ; L
927   (CALL2 4)                           ; CDRAS
929   (STORE 5)
930   (CONST&PUSH 6)                      ; W1
931   (GETVALUE&PUSH 1)                   ; L
933   (CALL2 4)                           ; CDRAS
935   (STORE 2)
936   (CONST&PUSH 7)                      ; W2
937   (GETVALUE&PUSH 1)                   ; L
939   (CALL2 4)                           ; CDRAS
941   (STORE 1)
942   (CONST&PUSH 0)                      ; U
943   (GETVALUE&PUSH 1)                   ; L
945   (CALL2 4)                           ; CDRAS
947   (STORE 0)
948   (PUSH)
949   (LOAD&PUSH 2)
950   (LOAD&PUSH 4)
951   (LOAD&PUSH 7)
952   (LOAD&PUSH 10)
953   (LOAD&PUSH 10)
954   (CONST 32)                          ; HTJORYYTJ
956   (JMP L1108)
959   L959
959   (CONST&PUSH 3)                      ; V1
960   (GETVALUE&PUSH 1)                   ; L
962   (CALL2 4)                           ; CDRAS
964   (STORE 6)
965   (CONST&PUSH 5)                      ; V2
966   (GETVALUE&PUSH 1)                   ; L
968   (CALL2 4)                           ; CDRAS
970   (STORE 4)
971   (CONST&PUSH 11)                     ; V21
972   (GETVALUE&PUSH 1)                   ; L
974   (CALL2 4)                           ; CDRAS
976   (STORE 5)
977   (CONST&PUSH 6)                      ; W1
978   (GETVALUE&PUSH 1)                   ; L
980   (CALL2 4)                           ; CDRAS
982   (STORE 2)
983   (CONST&PUSH 7)                      ; W2
984   (GETVALUE&PUSH 1)                   ; L
986   (CALL2 4)                           ; CDRAS
988   (STORE 1)
989   (CONST&PUSH 0)                      ; U
990   (GETVALUE&PUSH 1)                   ; L
992   (CALL2 4)                           ; CDRAS
994   (STORE 0)
995   (PUSH)
996   (LOAD&PUSH 2)
997   (LOAD&PUSH 4)
998   (LOAD&PUSH 7)
999   (LOAD&PUSH 10)
1000  (LOAD&PUSH 10)
1001  (CONST 34)                          ; HTJORYKTI
1003  (JMP L1108)
1006  L1006
1006  (CONST&PUSH 3)                      ; V1
1007  (GETVALUE&PUSH 1)                   ; L
1009  (CALL2 4)                           ; CDRAS
1011  (STORE 6)
1012  (CONST&PUSH 5)                      ; V2
1013  (GETVALUE&PUSH 1)                   ; L
1015  (CALL2 4)                           ; CDRAS
1017  (STORE 4)
1018  (T&PUSH)
1019  (T&PUSH)
1020  (CALL2&PUSH 21)                     ; 1FACT
1022  (CONST&PUSH 6)                      ; W1
1023  (GETVALUE&PUSH 1)                   ; L
1025  (CALL2&PUSH 4)                      ; CDRAS
1027  (CALL2 22)                          ; MUL*
1029  (STORE 2)
1030  (CONST&PUSH 7)                      ; W2
1031  (GETVALUE&PUSH 1)                   ; L
1033  (CALL2 4)                           ; CDRAS
1035  (STORE 1)
1036  (NIL&PUSH)
1037  (LOAD&PUSH 7)
1038  (CALL2&PUSH 21)                     ; 1FACT
1040  (CONST&PUSH 0)                      ; U
1041  (GETVALUE&PUSH 1)                   ; L
1043  (CALL2&PUSH 4)                      ; CDRAS
1045  (CALL2 22)                          ; MUL*
1047  (STORE 0)
1048  (PUSH)
1049  (LOAD&PUSH 3)
1050  (LOAD&PUSH 3)
1051  (LOAD&PUSH 9)
1052  (LOAD&PUSH 8)
1053  (NIL&PUSH)
1054  (CONST 27)                          ; BESSYTJ
1056  (JMP L1108)
1058  L1058
1058  (CONST&PUSH 3)                      ; V1
1059  (GETVALUE&PUSH 1)                   ; L
1061  (CALL2 4)                           ; CDRAS
1063  (STORE 6)
1064  (CONST&PUSH 5)                      ; V2
1065  (GETVALUE&PUSH 1)                   ; L
1067  (CALL2 4)                           ; CDRAS
1069  (STORE 4)
1070  (T&PUSH)
1071  (T&PUSH)
1072  (CALL2&PUSH 21)                     ; 1FACT
1074  (CONST&PUSH 6)                      ; W1
1075  (GETVALUE&PUSH 1)                   ; L
1077  (CALL2&PUSH 4)                      ; CDRAS
1079  (CALL2 22)                          ; MUL*
1081  (STORE 2)
1082  (CONST&PUSH 7)                      ; W2
1083  (GETVALUE&PUSH 1)                   ; L
1085  (CALL2 4)                           ; CDRAS
1087  (STORE 1)
1088  (NIL&PUSH)
1089  (LOAD&PUSH 7)
1090  (CALL2&PUSH 21)                     ; 1FACT
1092  (CONST&PUSH 0)                      ; U
1093  (GETVALUE&PUSH 1)                   ; L
1095  (CALL2&PUSH 4)                      ; CDRAS
1097  (CALL2 22)                          ; MUL*
1099  (STORE 0)
1100  (PUSH)
1101  (LOAD&PUSH 3)
1102  (LOAD&PUSH 3)
1103  (LOAD&PUSH 9)
1104  (LOAD&PUSH 8)
1105  (NIL&PUSH)
1106  (CONST 29)                          ; BESSKTI
1108  L1108
1108  (PUSH)
1109  (CALL 7 25)                         ; FRACTEST1
1112  (JMP L2243)
1115  L1115
1115  (CONST&PUSH 38)                     ; V
1117  (GETVALUE&PUSH 1)                   ; L
1119  (CALL2 4)                           ; CDRAS
1121  (STORE 6)
1122  (CONST&PUSH 39)                     ; W
1124  (GETVALUE&PUSH 1)                   ; L
1126  (CALL2 4)                           ; CDRAS
1128  (STORE 2)
1129  (CONST&PUSH 0)                      ; U
1130  (GETVALUE&PUSH 1)                   ; L
1132  (CALL2 4)                           ; CDRAS
1134  (STORE 0)
1135  (PUSH)
1136  (LOAD&PUSH 3)
1137  (LOAD&PUSH 8)
1138  (CALL 3 40)                         ; LT1HSTRUVE
1141  (JMP L2243)
1144  L1144
1144  (CONST&PUSH 38)                     ; V
1146  (GETVALUE&PUSH 1)                   ; L
1148  (CALL2 4)                           ; CDRAS
1150  (STORE 6)
1151  (CONST&PUSH 39)                     ; W
1153  (GETVALUE&PUSH 1)                   ; L
1155  (CALL2 4)                           ; CDRAS
1157  (STORE 2)
1158  (CONST&PUSH 0)                      ; U
1159  (GETVALUE&PUSH 1)                   ; L
1161  (CALL2 4)                           ; CDRAS
1163  (STORE 0)
1164  (PUSH)
1165  (LOAD&PUSH 3)
1166  (LOAD&PUSH 8)
1167  (CALL 3 42)                         ; LT1LSTRUVE
1170  (JMP L2243)
1173  L1173
1173  (CONST&PUSH 3)                      ; V1
1174  (GETVALUE&PUSH 1)                   ; L
1176  (CALL2 4)                           ; CDRAS
1178  (STORE 6)
1179  (CONST&PUSH 5)                      ; V2
1180  (GETVALUE&PUSH 1)                   ; L
1182  (CALL2 4)                           ; CDRAS
1184  (STORE 4)
1185  (CONST&PUSH 39)                     ; W
1187  (GETVALUE&PUSH 1)                   ; L
1189  (CALL2 4)                           ; CDRAS
1191  (STORE 2)
1192  (CONST&PUSH 0)                      ; U
1193  (GETVALUE&PUSH 1)                   ; L
1195  (CALL2 4)                           ; CDRAS
1197  (STORE 0)
1198  (PUSH)
1199  (LOAD&PUSH 3)
1200  (LOAD&PUSH 8)
1201  (LOAD&PUSH 7)
1202  (CALL 4 44)                         ; LT1S
1205  (JMP L2243)
1208  L1208
1208  (CONST&PUSH 3)                      ; V1
1209  (GETVALUE&PUSH 1)                   ; L
1211  (CALL2 4)                           ; CDRAS
1213  (STORE 6)
1214  (CONST&PUSH 5)                      ; V2
1215  (GETVALUE&PUSH 1)                   ; L
1217  (CALL2 4)                           ; CDRAS
1219  (STORE 4)
1220  (CONST&PUSH 39)                     ; W
1222  (GETVALUE&PUSH 1)                   ; L
1224  (CALL2 4)                           ; CDRAS
1226  (STORE 2)
1227  (CONST&PUSH 0)                      ; U
1228  (GETVALUE&PUSH 1)                   ; L
1230  (CALL2 4)                           ; CDRAS
1232  (STORE 0)
1233  (PUSH)
1234  (LOAD&PUSH 3)
1235  (LOAD&PUSH 8)
1236  (LOAD&PUSH 7)
1237  (CONST 46)                          ; SLOMMEL
1239  (JMP L459)
1242  L1242
1242  (CONST&PUSH 38)                     ; V
1244  (GETVALUE&PUSH 1)                   ; L
1246  (CALL2 4)                           ; CDRAS
1248  (STORE 6)
1249  (CONST&PUSH 39)                     ; W
1251  (GETVALUE&PUSH 1)                   ; L
1253  (CALL2 4)                           ; CDRAS
1255  (STORE 2)
1256  (CONST&PUSH 0)                      ; U
1257  (GETVALUE&PUSH 1)                   ; L
1259  (CALL2 4)                           ; CDRAS
1261  (STORE 0)
1262  (PUSH)
1263  (LOAD&PUSH 3)
1264  (LOAD&PUSH 8)
1265  (CALL 3 49)                         ; LT1YREF
1268  (JMP L2243)
1271  L1271
1271  (CONST&PUSH 38)                     ; V
1273  (GETVALUE&PUSH 1)                   ; L
1275  (CALL2 4)                           ; CDRAS
1277  (STORE 6)
1278  (CONST&PUSH 39)                     ; W
1280  (GETVALUE&PUSH 1)                   ; L
1282  (CALL2 4)                           ; CDRAS
1284  (STORE 2)
1285  (CONST&PUSH 0)                      ; U
1286  (GETVALUE&PUSH 1)                   ; L
1288  (CALL2 4)                           ; CDRAS
1290  (STORE 0)
1291  (PUSH)
1292  (LOAD&PUSH 3)
1293  (LOAD&PUSH 8)
1294  (NIL&PUSH)
1295  (CONST 51)                          ; KTI
1297  (JMP L459)
1300  L1300
1300  (CONST&PUSH 38)                     ; V
1302  (GETVALUE&PUSH 1)                   ; L
1304  (CALL2 4)                           ; CDRAS
1306  (STORE 6)
1307  (CONST&PUSH 39)                     ; W
1309  (GETVALUE&PUSH 1)                   ; L
1311  (CALL2 4)                           ; CDRAS
1313  (STORE 2)
1314  (CONST&PUSH 0)                      ; U
1315  (GETVALUE&PUSH 1)                   ; L
1317  (CALL2 4)                           ; CDRAS
1319  (STORE 0)
1320  (PUSH)
1321  (LOAD&PUSH 3)
1322  (LOAD&PUSH 8)
1323  (NIL&PUSH)
1324  (CONST 53)                          ; D
1326  (JMP L459)
1329  L1329
1329  (CONST&PUSH 6)                      ; W1
1330  (GETVALUE&PUSH 1)                   ; L
1332  (CALL2 4)                           ; CDRAS
1334  (STORE 2)
1335  (CONST&PUSH 7)                      ; W2
1336  (GETVALUE&PUSH 1)                   ; L
1338  (CALL2 4)                           ; CDRAS
1340  (STORE 1)
1341  (CONST&PUSH 0)                      ; U
1342  (GETVALUE&PUSH 1)                   ; L
1344  (CALL2 4)                           ; CDRAS
1346  (STORE 0)
1347  (PUSH)
1348  (LOAD&PUSH 3)
1349  (LOAD&PUSH 3)
1350  (NIL&PUSH)
1351  (CONST 55)                          ; GAMMAINCOMPLETE
1353  (JMP L459)
1356  L1356
1356  (CONST&PUSH 38)                     ; V
1358  (GETVALUE&PUSH 1)                   ; L
1360  (CALL2 4)                           ; CDRAS
1362  (STORE 6)
1363  (CONST&PUSH 39)                     ; W
1365  (GETVALUE&PUSH 1)                   ; L
1367  (CALL2 4)                           ; CDRAS
1369  (STORE 2)
1370  (CONST&PUSH 0)                      ; U
1371  (GETVALUE&PUSH 1)                   ; L
1373  (CALL2 4)                           ; CDRAS
1375  (STORE 0)
1376  (PUSH)
1377  (LOAD&PUSH 3)
1378  (LOAD&PUSH 8)
1379  (NIL&PUSH)
1380  (CONST 57)                          ; KBATEMAN
1382  (JMP L459)
1385  L1385
1385  (CONST&PUSH 38)                     ; V
1387  (GETVALUE&PUSH 1)                   ; L
1389  (CALL2 4)                           ; CDRAS
1391  (STORE 6)
1392  (CONST&PUSH 39)                     ; W
1394  (GETVALUE&PUSH 1)                   ; L
1396  (CALL2 4)                           ; CDRAS
1398  (STORE 2)
1399  (CONST&PUSH 0)                      ; U
1400  (GETVALUE&PUSH 1)                   ; L
1402  (CALL2 4)                           ; CDRAS
1404  (JMP L2040)
1407  L1407
1407  (CONST&PUSH 6)                      ; W1
1408  (GETVALUE&PUSH 1)                   ; L
1410  (CALL2 4)                           ; CDRAS
1412  (STORE 2)
1413  (CONST&PUSH 7)                      ; W2
1414  (GETVALUE&PUSH 1)                   ; L
1416  (CALL2 4)                           ; CDRAS
1418  (STORE 1)
1419  (CONST&PUSH 0)                      ; U
1420  (GETVALUE&PUSH 1)                   ; L
1422  (CALL2 4)                           ; CDRAS
1424  (STORE 0)
1425  (PUSH)
1426  (LOAD&PUSH 3)
1427  (LOAD&PUSH 3)
1428  (CALL 3 61)                         ; LT1GAMMAGREEK
1431  (JMP L2243)
1434  L1434
1434  (CONST&PUSH 3)                      ; V1
1435  (GETVALUE&PUSH 1)                   ; L
1437  (CALL2 4)                           ; CDRAS
1439  (STORE 6)
1440  (CONST&PUSH 5)                      ; V2
1441  (GETVALUE&PUSH 1)                   ; L
1443  (CALL2 4)                           ; CDRAS
1445  (STORE 5)
1446  (CONST&PUSH 39)                     ; W
1448  (GETVALUE&PUSH 1)                   ; L
1450  (CALL2 4)                           ; CDRAS
1452  (STORE 2)
1453  (CONST&PUSH 0)                      ; U
1454  (GETVALUE&PUSH 1)                   ; L
1456  (CALL2 4)                           ; CDRAS
1458  (STORE 0)
1459  (PUSH)
1460  (LOAD&PUSH 3)
1461  (LOAD&PUSH 8)
1462  (LOAD&PUSH 8)
1463  (CONST 63)                          ; HTJORY
1465  (JMP L459)
1468  L1468
1468  (CONST&PUSH 3)                      ; V1
1469  (GETVALUE&PUSH 1)                   ; L
1471  (CALL2 4)                           ; CDRAS
1473  (STORE 6)
1474  (CONST&PUSH 5)                      ; V2
1475  (GETVALUE&PUSH 1)                   ; L
1477  (CALL2 4)                           ; CDRAS
1479  (STORE 5)
1480  (CONST&PUSH 39)                     ; W
1482  (GETVALUE&PUSH 1)                   ; L
1484  (CALL2 4)                           ; CDRAS
1486  (STORE 2)
1487  (CONST&PUSH 0)                      ; U
1488  (GETVALUE&PUSH 1)                   ; L
1490  (CALL2 4)                           ; CDRAS
1492  (STORE 0)
1493  (PUSH)
1494  (LOAD&PUSH 3)
1495  (LOAD&PUSH 8)
1496  (LOAD&PUSH 8)
1497  (CALL 4 65)                         ; LT1M
1500  (JMP L2243)
1503  L1503
1503  (CONST&PUSH 3)                      ; V1
1504  (GETVALUE&PUSH 1)                   ; L
1506  (CALL2 4)                           ; CDRAS
1508  (STORE 6)
1509  (CONST&PUSH 5)                      ; V2
1510  (GETVALUE&PUSH 1)                   ; L
1512  (CALL2 4)                           ; CDRAS
1514  (STORE 5)
1515  (CONST&PUSH 39)                     ; W
1517  (GETVALUE&PUSH 1)                   ; L
1519  (CALL2 4)                           ; CDRAS
1521  (STORE 2)
1522  (CONST&PUSH 0)                      ; U
1523  (GETVALUE&PUSH 1)                   ; L
1525  (CALL2 4)                           ; CDRAS
1527  (STORE 0)
1528  (PUSH)
1529  (LOAD&PUSH 3)
1530  (LOAD&PUSH 8)
1531  (LOAD&PUSH 8)
1532  (CONST 1)                           ; L
1533  (JMP L1647)
1536  L1536
1536  (CONST&PUSH 3)                      ; V1
1537  (GETVALUE&PUSH 1)                   ; L
1539  (CALL2 4)                           ; CDRAS
1541  (STORE 6)
1542  (CONST&PUSH 5)                      ; V2
1543  (GETVALUE&PUSH 1)                   ; L
1545  (CALL2 4)                           ; CDRAS
1547  (STORE 5)
1548  (CONST&PUSH 39)                     ; W
1550  (GETVALUE&PUSH 1)                   ; L
1552  (CALL2 4)                           ; CDRAS
1554  (STORE 2)
1555  (CONST&PUSH 0)                      ; U
1556  (GETVALUE&PUSH 1)                   ; L
1558  (CALL2 4)                           ; CDRAS
1560  (STORE 0)
1561  (PUSH)
1562  (LOAD&PUSH 3)
1563  (LOAD&PUSH 8)
1564  (LOAD&PUSH 8)
1565  (CONST 69)                          ; C
1567  (JMP L1647)
1570  L1570
1570  (CONST&PUSH 3)                      ; V1
1571  (GETVALUE&PUSH 1)                   ; L
1573  (CALL2 4)                           ; CDRAS
1575  (STORE 6)
1576  (CONST&PUSH 39)                     ; W
1578  (GETVALUE&PUSH 1)                   ; L
1580  (CALL2 4)                           ; CDRAS
1582  (STORE 2)
1583  (CONST&PUSH 0)                      ; U
1584  (GETVALUE&PUSH 1)                   ; L
1586  (CALL2 4)                           ; CDRAS
1588  (STORE 0)
1589  (PUSH)
1590  (LOAD&PUSH 3)
1591  (LOAD&PUSH 8)
1592  (NIL&PUSH)
1593  (T)
1594  (JMP L1647)
1596  L1596
1596  (CONST&PUSH 3)                      ; V1
1597  (GETVALUE&PUSH 1)                   ; L
1599  (CALL2 4)                           ; CDRAS
1601  (STORE 6)
1602  (CONST&PUSH 39)                     ; W
1604  (GETVALUE&PUSH 1)                   ; L
1606  (CALL2 4)                           ; CDRAS
1608  (STORE 2)
1609  (CONST&PUSH 0)                      ; U
1610  (GETVALUE&PUSH 1)                   ; L
1612  (CALL2 4)                           ; CDRAS
1614  (STORE 0)
1615  (PUSH)
1616  (LOAD&PUSH 3)
1617  (LOAD&PUSH 8)
1618  (NIL&PUSH)
1619  (CONST 0)                           ; U
1620  (JMP L1647)
1622  L1622
1622  (CONST&PUSH 3)                      ; V1
1623  (GETVALUE&PUSH 1)                   ; L
1625  (CALL2 4)                           ; CDRAS
1627  (STORE 6)
1628  (CONST&PUSH 39)                     ; W
1630  (GETVALUE&PUSH 1)                   ; L
1632  (CALL2 4)                           ; CDRAS
1634  (STORE 2)
1635  (CONST&PUSH 0)                      ; U
1636  (GETVALUE&PUSH 1)                   ; L
1638  (CALL2 4)                           ; CDRAS
1640  (STORE 0)
1641  (PUSH)
1642  (LOAD&PUSH 3)
1643  (LOAD&PUSH 8)
1644  (NIL&PUSH)
1645  (CONST 73)                          ; HE
1647  L1647
1647  (PUSH)
1648  (CALL 5 67)                         ; INTEGERTEST
1651  (JMP L2243)
1654  L1654
1654  (CONST&PUSH 3)                      ; V1
1655  (GETVALUE&PUSH 1)                   ; L
1657  (CALL2 4)                           ; CDRAS
1659  (STORE 6)
1660  (CONST&PUSH 5)                      ; V2
1661  (GETVALUE&PUSH 1)                   ; L
1663  (CALL2 4)                           ; CDRAS
1665  (STORE 5)
1666  (CONST&PUSH 39)                     ; W
1668  (GETVALUE&PUSH 1)                   ; L
1670  (CALL2 4)                           ; CDRAS
1672  (STORE 2)
1673  (CONST 0)                           ; U
1674  (JMP L1772)
1677  L1677
1677  (CONST&PUSH 3)                      ; V1
1678  (GETVALUE&PUSH 1)                   ; L
1680  (CALL2 4)                           ; CDRAS
1682  (STORE 6)
1683  (CONST&PUSH 5)                      ; V2
1684  (GETVALUE&PUSH 1)                   ; L
1686  (CALL2 4)                           ; CDRAS
1688  (STORE 4)
1689  (CONST&PUSH 77)                     ; V3
1691  (GETVALUE&PUSH 1)                   ; L
1693  (CALL2 4)                           ; CDRAS
1695  (STORE 3)
1696  (CONST&PUSH 39)                     ; W
1698  (GETVALUE&PUSH 1)                   ; L
1700  (CALL2 4)                           ; CDRAS
1702  (STORE 2)
1703  (CONST&PUSH 0)                      ; U
1704  (GETVALUE&PUSH 1)                   ; L
1706  (CALL2 4)                           ; CDRAS
1708  (STORE 0)
1709  (PUSH)
1710  (LOAD&PUSH 3)
1711  (LOAD&PUSH 8)
1712  (LOAD&PUSH 7)
1713  (LOAD&PUSH 7)
1714  (CALL 5 78)                         ; PJACTEST
1717  (JMP L2243)
1720  L1720
1720  (CONST&PUSH 3)                      ; V1
1721  (GETVALUE&PUSH 1)                   ; L
1723  (CALL2 4)                           ; CDRAS
1725  (STORE 6)
1726  (CONST&PUSH 5)                      ; V2
1727  (GETVALUE&PUSH 1)                   ; L
1729  (CALL2 4)                           ; CDRAS
1731  (STORE 5)
1732  (CONST&PUSH 39)                     ; W
1734  (GETVALUE&PUSH 1)                   ; L
1736  (CALL2 4)                           ; CDRAS
1738  (STORE 2)
1739  (CONST&PUSH 0)                      ; U
1740  (GETVALUE&PUSH 1)                   ; L
1742  (CALL2 4)                           ; CDRAS
1744  (STORE 0)
1745  (PUSH)
1746  (LOAD&PUSH 3)
1747  (LOAD&PUSH 8)
1748  (LOAD&PUSH 8)
1749  (CALL 4 80)                         ; LT1Q
1752  (JMP L2243)
1755  L1755
1755  (CONST&PUSH 3)                      ; V1
1756  (GETVALUE&PUSH 1)                   ; L
1758  (CALL2 4)                           ; CDRAS
1760  (STORE 6)
1761  (CONST 82)                          ; 0
1763  (STORE 5)
1764  (CONST&PUSH 39)                     ; W
1766  (GETVALUE&PUSH 1)                   ; L
1768  (CALL2 4)                           ; CDRAS
1770  (STORE 2)
1771  (CONST 0)                           ; U
1772  L1772
1772  (PUSH)
1773  (GETVALUE&PUSH 1)                   ; L
1775  (CALL2 4)                           ; CDRAS
1777  (STORE 0)
1778  (PUSH)
1779  (LOAD&PUSH 3)
1780  (LOAD&PUSH 8)
1781  (LOAD&PUSH 8)
1782  (CALL 4 75)                         ; LT1P
1785  (JMP L2243)
1788  L1788
1788  (CONST&PUSH 3)                      ; V1
1789  (GETVALUE&PUSH 1)                   ; L
1791  (CALL2 4)                           ; CDRAS
1793  (STORE 6)
1794  (CONST&PUSH 5)                      ; V2
1795  (GETVALUE&PUSH 1)                   ; L
1797  (CALL2 4)                           ; CDRAS
1799  (STORE 5)
1800  (CONST&PUSH 39)                     ; W
1802  (GETVALUE&PUSH 1)                   ; L
1804  (CALL2 4)                           ; CDRAS
1806  (STORE 2)
1807  (CONST&PUSH 0)                      ; U
1808  (GETVALUE&PUSH 1)                   ; L
1810  (CALL2 4)                           ; CDRAS
1812  (STORE 0)
1813  (PUSH)
1814  (LOAD&PUSH 3)
1815  (LOAD&PUSH 8)
1816  (LOAD&PUSH 8)
1817  (CALL 4 84)                         ; WHITTEST
1820  (JMP L2243)
1823  L1823
1823  (CONST&PUSH 38)                     ; V
1825  (GETVALUE&PUSH 1)                   ; L
1827  (CALL2 4)                           ; CDRAS
1829  (STORE 6)
1830  (CONST&PUSH 39)                     ; W
1832  (GETVALUE&PUSH 1)                   ; L
1834  (CALL2 4)                           ; CDRAS
1836  (STORE 2)
1837  (CONST&PUSH 0)                      ; U
1838  (GETVALUE&PUSH 1)                   ; L
1840  (CALL2 4)                           ; CDRAS
1842  (JMP L2081)
1845  L1845
1845  (CONST&PUSH 3)                      ; V1
1846  (GETVALUE&PUSH 1)                   ; L
1848  (CALL2 4)                           ; CDRAS
1850  (STORE 6)
1851  (CONST&PUSH 5)                      ; V2
1852  (GETVALUE&PUSH 1)                   ; L
1854  (CALL2 4)                           ; CDRAS
1856  (STORE 5)
1857  (CONST&PUSH 39)                     ; W
1859  (GETVALUE&PUSH 1)                   ; L
1861  (CALL2 4)                           ; CDRAS
1863  (STORE 2)
1864  (CONST&PUSH 0)                      ; U
1865  (GETVALUE&PUSH 1)                   ; L
1867  (CALL2 4)                           ; CDRAS
1869  (STORE 0)
1870  (PUSH)
1871  (LOAD&PUSH 3)
1872  (LOAD&PUSH 4)
1873  (LOAD&PUSH 9)
1874  (LOAD&PUSH 9)
1875  (LOAD&PUSH 11)
1876  (LOAD&PUSH 11)
1877  (CONST 12)                          ; 2HTJORY
1878  (JMP L1938)
1880  L1880
1880  (CONST&PUSH 38)                     ; V
1882  (GETVALUE&PUSH 1)                   ; L
1884  (CALL2 4)                           ; CDRAS
1886  (STORE 6)
1887  (CONST&PUSH 39)                     ; W
1889  (GETVALUE&PUSH 1)                   ; L
1891  (CALL2 4)                           ; CDRAS
1893  (STORE 2)
1894  (CONST&PUSH 0)                      ; U
1895  (GETVALUE&PUSH 1)                   ; L
1897  (CALL2 4)                           ; CDRAS
1899  (STORE 0)
1900  (PUSH)
1901  (LOAD&PUSH 3)
1902  (LOAD&PUSH 4)
1903  (LOAD&PUSH 9)
1904  (NIL&PUSH)
1905  (LOAD&PUSH 11)
1906  (NIL&PUSH)
1907  (CONST 15)                          ; 2YTJ
1908  (JMP L1938)
1910  L1910
1910  (CONST&PUSH 38)                     ; V
1912  (GETVALUE&PUSH 1)                   ; L
1914  (CALL2 4)                           ; CDRAS
1916  (STORE 6)
1917  (CONST&PUSH 39)                     ; W
1919  (GETVALUE&PUSH 1)                   ; L
1921  (CALL2 4)                           ; CDRAS
1923  (STORE 2)
1924  (CONST&PUSH 0)                      ; U
1925  (GETVALUE&PUSH 1)                   ; L
1927  (CALL2 4)                           ; CDRAS
1929  (STORE 0)
1930  (PUSH)
1931  (LOAD&PUSH 3)
1932  (LOAD&PUSH 4)
1933  (LOAD&PUSH 9)
1934  (NIL&PUSH)
1935  (LOAD&PUSH 11)
1936  (NIL&PUSH)
1937  (CONST 17)                          ; 2KTI
1938  L1938
1938  (PUSH)
1939  (CALL 8 13)                         ; FRACTEST
1942  (JMP L2243)
1945  L1945
1945  (CONST&PUSH 3)                      ; V1
1946  (GETVALUE&PUSH 1)                   ; L
1948  (CALL2 4)                           ; CDRAS
1950  (STORE 6)
1951  (CONST&PUSH 5)                      ; V2
1952  (GETVALUE&PUSH 1)                   ; L
1954  (CALL2 4)                           ; CDRAS
1956  (STORE 4)
1957  (T&PUSH)
1958  (T&PUSH)
1959  (CALL2&PUSH 21)                     ; 1FACT
1961  (CONST&PUSH 6)                      ; W1
1962  (GETVALUE&PUSH 1)                   ; L
1964  (CALL2&PUSH 4)                      ; CDRAS
1966  (CALL2 22)                          ; MUL*
1968  (STORE 2)
1969  (T&PUSH)
1970  (T&PUSH)
1971  (CALL2&PUSH 21)                     ; 1FACT
1973  (CONST&PUSH 7)                      ; W2
1974  (GETVALUE&PUSH 1)                   ; L
1976  (CALL2&PUSH 4)                      ; CDRAS
1978  (CALL2 22)                          ; MUL*
1980  (STORE 1)
1981  (NIL&PUSH)
1982  (LOAD&PUSH 7)
1983  (CALL2&PUSH 21)                     ; 1FACT
1985  (NIL&PUSH)
1986  (LOAD&PUSH 6)
1987  (CALL2&PUSH 21)                     ; 1FACT
1989  (CONST&PUSH 0)                      ; U
1990  (GETVALUE&PUSH 1)                   ; L
1992  (CALL2&PUSH 4)                      ; CDRAS
1994  (CALL 3 22)                         ; MUL*
1997  L1997
1997  (STORE 0)
1998  (PUSH)
1999  (LOAD&PUSH 3)
2000  (LOAD&PUSH 3)
2001  (LOAD&PUSH 9)
2002  (LOAD&PUSH 8)
2003  (CALL 5 8)                          ; LT2J
2006  (JMP L2243)
2009  L2009
2009  (CONST&PUSH 38)                     ; V
2011  (GETVALUE&PUSH 1)                   ; L
2013  (CALL2 4)                           ; CDRAS
2015  (STORE 6)
2016  (T&PUSH)
2017  (T&PUSH)
2018  (CALL2&PUSH 21)                     ; 1FACT
2020  (CONST&PUSH 39)                     ; W
2022  (GETVALUE&PUSH 1)                   ; L
2024  (CALL2&PUSH 4)                      ; CDRAS
2026  (CALL2 22)                          ; MUL*
2028  (STORE 2)
2029  (NIL&PUSH)
2030  (LOAD&PUSH 7)
2031  (CALL2&PUSH 21)                     ; 1FACT
2033  (CONST&PUSH 0)                      ; U
2034  (GETVALUE&PUSH 1)                   ; L
2036  (CALL2&PUSH 4)                      ; CDRAS
2038  (CALL2 22)                          ; MUL*
2040  L2040
2040  (STORE 0)
2041  (PUSH)
2042  (LOAD&PUSH 3)
2043  (LOAD&PUSH 8)
2044  (CALL 3 59)                         ; LT1J
2047  (JMP L2243)
2050  L2050
2050  (CONST&PUSH 38)                     ; V
2052  (GETVALUE&PUSH 1)                   ; L
2054  (CALL2 4)                           ; CDRAS
2056  (STORE 6)
2057  (T&PUSH)
2058  (T&PUSH)
2059  (CALL2&PUSH 21)                     ; 1FACT
2061  (CONST&PUSH 39)                     ; W
2063  (GETVALUE&PUSH 1)                   ; L
2065  (CALL2&PUSH 4)                      ; CDRAS
2067  (CALL2 22)                          ; MUL*
2069  (STORE 2)
2070  (NIL&PUSH)
2071  (LOAD&PUSH 7)
2072  (CALL2&PUSH 21)                     ; 1FACT
2074  (CONST&PUSH 0)                      ; U
2075  (GETVALUE&PUSH 1)                   ; L
2077  (CALL2&PUSH 4)                      ; CDRAS
2079  (CALL2 22)                          ; MUL*
2081  L2081
2081  (STORE 0)
2082  (PUSH)
2083  (LOAD&PUSH 3)
2084  (LOAD&PUSH 8)
2085  (CALL 3 86)                         ; LT1J^2
2088  (JMP L2243)
2091  L2091
2091  (CONST&PUSH 39)                     ; W
2093  (GETVALUE&PUSH 1)                   ; L
2095  (CALL2 4)                           ; CDRAS
2097  (STORE 2)
2098  (CONST&PUSH 0)                      ; U
2099  (GETVALUE&PUSH 1)                   ; L
2101  (CALL2 4)                           ; CDRAS
2103  (STORE 0)
2104  (PUSH)
2105  (LOAD&PUSH 3)
2106  (CALL2 94)                          ; LT1ERF
2108  (JMP L2243)
2111  L2111
2111  (CONST&PUSH 39)                     ; W
2113  (GETVALUE&PUSH 1)                   ; L
2115  (CALL2 4)                           ; CDRAS
2117  (STORE 2)
2118  (CONST&PUSH 0)                      ; U
2119  (GETVALUE&PUSH 1)                   ; L
2121  (CALL2 4)                           ; CDRAS
2123  (STORE 0)
2124  (PUSH)
2125  (LOAD&PUSH 3)
2126  (CALL2 96)                          ; LT1LOG
2128  (JMP L2243)
2131  L2131
2131  (CONST&PUSH 39)                     ; W
2133  (GETVALUE&PUSH 1)                   ; L
2135  (CALL2 4)                           ; CDRAS
2137  (STORE 2)
2138  (CONST&PUSH 0)                      ; U
2139  (GETVALUE&PUSH 1)                   ; L
2141  (CALL2 4)                           ; CDRAS
2143  (STORE 0)
2144  (PUSH)
2145  (LOAD&PUSH 3)
2146  (PUSH-NIL 2)
2148  (CONST 98)                          ; ERFC
2150  (JMP L459)
2153  L2153
2153  (CONST&PUSH 39)                     ; W
2155  (GETVALUE&PUSH 1)                   ; L
2157  (CALL2 4)                           ; CDRAS
2159  (STORE 2)
2160  (CONST&PUSH 0)                      ; U
2161  (GETVALUE&PUSH 1)                   ; L
2163  (CALL2 4)                           ; CDRAS
2165  (STORE 0)
2166  (PUSH)
2167  (LOAD&PUSH 3)
2168  (CALL2 102)                         ; LT1KELLIPTIC
2170  (JMP L2243)
2173  L2173
2173  (CONST&PUSH 39)                     ; W
2175  (GETVALUE&PUSH 1)                   ; L
2177  (CALL2 4)                           ; CDRAS
2179  (STORE 2)
2180  (CONST&PUSH 0)                      ; U
2181  (GETVALUE&PUSH 1)                   ; L
2183  (CALL2 4)                           ; CDRAS
2185  (STORE 0)
2186  (PUSH)
2187  (LOAD&PUSH 3)
2188  (CALL2 104)                         ; LT1E
2190  (JMP L2243)
2192  L2192
2192  (GETVALUE&PUSH 0)                   ; U
2194  (CALL1 101)                         ; ONEKELLIPTIC
2196  (SETVALUE 1)                        ; L
2198  (JMPIF L2153)
2200  (GETVALUE&PUSH 0)                   ; U
2202  (CALL1 103)                         ; ONEE
2204  (SETVALUE 1)                        ; L
2206  (JMPIF L2173)
2208  (GETVALUE&PUSH 0)                   ; U
2210  (CALL1 105)                         ; ARBPOW1
2212  (SETVALUE 1)                        ; L
2214  (JMPIFNOT L2249)
2216  (CONST&PUSH 0)                      ; U
2217  (GETVALUE&PUSH 1)                   ; L
2219  (CALL2 4)                           ; CDRAS
2221  (STORE 2)
2222  (CONST&PUSH 69)                     ; C
2224  (GETVALUE&PUSH 1)                   ; L
2226  (CALL2 4)                           ; CDRAS
2228  (STORE 1)
2229  (CONST&PUSH 38)                     ; V
2231  (GETVALUE&PUSH 1)                   ; L
2233  (CALL2 4)                           ; CDRAS
2235  (STORE 6)
2236  (LOAD&PUSH 1)
2237  (LOAD&PUSH 3)
2238  (LOAD&PUSH 8)
2239  (CALL2&PUSH 106)                    ; LT-ARBPOW
2241  (CALL2 107)                         ; MUL
2243  L2243
2243  (SKIP 7)
2245  (UNBIND1)
2246  (JMP L2254)
2249  L2249
2249  (CONST 108)                         ; OTHER-J-CASES-NEXT
2251  (SKIP 7)
2253  (UNBIND1)
2254  L2254
2254  (UNBIND1)
2255  (SKIP&RET 2)


Disassembly of function #:|(DEFUN LT-ARBPOW (EXP POW) ...)-111|
(CONST 0) = LT-ARBPOW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT-ARBPOW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT-ARBPOW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT-ARBPOW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT-ARBPOW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT-ARBPOW
8     (SKIP&RET 1)


Disassembly of function LT-ARBPOW
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = ZERP
(CONST 3) = F1P137TEST
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP)
15 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (GETVALUE 1)                        ; VAR
7     (JMPIFEQ L17)
9     (LOAD&PUSH 4)
10    (CALL1&JMPIF 2 L17)                 ; ZERP
13    (NIL)
14    L14
14    (UNBIND1)
15    (SKIP&RET 3)
17    L17
17    (LOAD&PUSH 4)
18    (CALL1 3)                           ; F1P137TEST
20    (JMP L14)


Disassembly of function #:|(DEFUN FRACTEST (R A1 A2 ...) ...)-112|
(CONST 0) = FRACTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FRACTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FRACTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FRACTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FRACTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FRACTEST
8     (SKIP&RET 1)


Disassembly of function FRACTEST
(CONST 0) = R
(CONST 1) = A1
(CONST 2) = RAT
(CONST 3) = 2HTJORY
(CONST 4) = 2YTJ
(CONST 5) = YTJ
(CONST 6) = MUL
(CONST 7) = HTJORY
(CONST 8) = KTIYTJ
(CONST 9) = KTI
(CONST 10) = 2KTI
(CONST 11) = SENDEXEC
(CONST 12) = PRODUCT-OF-Y-WITH-NOFRACT-INDICES
8 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A1 R)
71 byte-code instructions:
0     (LOAD 8)
1     (BIND 0)                            ; R
3     (LOAD 10)
4     (BIND 1)                            ; A1
6     (LOAD 11)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFNOTEQTO 2 L18)                ; RAT
12    (LOAD 9)
13    (CAR)
14    (CAR&PUSH)
15    (JMPIFEQTO 2 L23)                   ; RAT
18    L18
18    (LOAD&PUSH 7)
19    (JMPIFNOTEQTO 3 L95)                ; 2HTJORY
23    L23
23    (GETVALUE&PUSH 0)                   ; R
25    (LOAD&PUSH 8)
26    (JMPIFEQTO 4 L49)                   ; 2YTJ
29    (LOAD&PUSH 8)
30    (JMPIFEQTO 3 L56)                   ; 2HTJORY
33    (LOAD&PUSH 8)
34    (JMPIFNOTEQTO 8 L71)                ; KTIYTJ
37    (LOAD&PUSH 12)
38    (GETVALUE&PUSH 1)                   ; A1
40    (CALL2 9)                           ; KTI
42    L42
42    (PUSH)
43    (LOAD&PUSH 11)
44    (LOAD&PUSH 15)
45    (CALL2 5)                           ; YTJ
47    (JMP L84)
49    L49
49    (LOAD&PUSH 12)
50    (GETVALUE&PUSH 1)                   ; A1
52    (CALL2 5)                           ; YTJ
54    (JMP L42)
56    L56
56    (LOAD&PUSH 12)
57    (LOAD&PUSH 12)
58    (GETVALUE&PUSH 1)                   ; A1
60    (CALL&PUSH 3 7)                     ; HTJORY
63    (LOAD&PUSH 11)
64    (LOAD&PUSH 11)
65    (LOAD&PUSH 16)
66    (CALL 3 7)                          ; HTJORY
69    (JMP L84)
71    L71
71    (LOAD&PUSH 8)
72    (JMPIFNOTEQTO 10 L89)               ; 2KTI
75    (LOAD&PUSH 12)
76    (GETVALUE&PUSH 1)                   ; A1
78    (CALL2&PUSH 9)                      ; KTI
80    (LOAD&PUSH 11)
81    (LOAD&PUSH 15)
82    (CALL2 9)                           ; KTI
84    L84
84    (PUSH)
85    (CALL2 6)                           ; MUL
87    (JMP L90)
89    L89
89    (NIL)
90    L90
90    (PUSH)
91    (CALL2 11)                          ; SENDEXEC
93    (JMP L96)
95    L95
95    (CONST 12)                          ; PRODUCT-OF-Y-WITH-NOFRACT-INDICES
96    L96
96    (UNBIND 2)
98    (SKIP&RET 9)


Disassembly of function #:|(DEFUN FRACTEST1 (R A1 A2 ...) ...)-113|
(CONST 0) = FRACTEST1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FRACTEST1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FRACTEST1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FRACTEST1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FRACTEST1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FRACTEST1
8     (SKIP&RET 1)


Disassembly of function FRACTEST1
(CONST 0) = R
(CONST 1) = A1
(CONST 2) = RAT
(CONST 3) = BESSHTJORY
(CONST 4) = BESSYTJ
(CONST 5) = J
(CONST 6) = BESS
(CONST 7) = YTJ
(CONST 8) = MUL
(CONST 9) = HTJORY
(CONST 10) = HTJORYYTJ
(CONST 11) = BESSKTI
(CONST 12) = KTI
(CONST 13) = HTJORYKTI
(CONST 14) = SENDEXEC
(CONST 15) = PRODUCT-OF-I-Y-OF-NOFRACT-INDEX
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A1 R)
79 byte-code instructions:
0     (LOAD 7)
1     (BIND 0)                            ; R
3     (LOAD 9)
4     (BIND 1)                            ; A1
6     (LOAD 9)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFEQTO 2 L17)                   ; RAT
12    (LOAD&PUSH 7)
13    (JMPIFNOTEQTO 3 L110)               ; BESSHTJORY
17    L17
17    (GETVALUE&PUSH 0)                   ; R
19    (LOAD&PUSH 8)
20    (JMPIFEQTO 4 L57)                   ; BESSYTJ
23    (LOAD&PUSH 8)
24    (JMPIFEQTO 3 L66)                   ; BESSHTJORY
27    (LOAD&PUSH 8)
28    (JMPIFEQTO 10 L81)                  ; HTJORYYTJ
31    (LOAD&PUSH 8)
32    (JMPIFEQTO 11 L95)                  ; BESSKTI
35    (LOAD&PUSH 8)
36    (JMPIFNOTEQTO 13 L104)              ; HTJORYKTI
40    (LOAD&PUSH 11)
41    (LOAD&PUSH 10)
42    (GETVALUE&PUSH 1)                   ; A1
44    (CALL 3 9)                          ; HTJORY
47    L47
47    (PUSH)
48    (LOAD&PUSH 11)
49    (LOAD&PUSH 14)
50    (CALL2 12)                          ; KTI
52    L52
52    (PUSH)
53    (CALL2 8)                           ; MUL
55    (JMP L105)
57    L57
57    (LOAD&PUSH 11)
58    (GETVALUE&PUSH 1)                   ; A1
60    (CONST&PUSH 5)                      ; J
61    (CALL 3 6)                          ; BESS
64    (JMP L88)
66    L66
66    (LOAD&PUSH 11)
67    (GETVALUE&PUSH 1)                   ; A1
69    (CONST&PUSH 5)                      ; J
70    (CALL&PUSH 3 6)                     ; BESS
73    (LOAD&PUSH 11)
74    (LOAD&PUSH 11)
75    (LOAD&PUSH 15)
76    (CALL 3 9)                          ; HTJORY
79    (JMP L52)
81    L81
81    (LOAD&PUSH 11)
82    (LOAD&PUSH 10)
83    (GETVALUE&PUSH 1)                   ; A1
85    (CALL 3 9)                          ; HTJORY
88    L88
88    (PUSH)
89    (LOAD&PUSH 11)
90    (LOAD&PUSH 14)
91    (CALL2 7)                           ; YTJ
93    (JMP L52)
95    L95
95    (LOAD&PUSH 11)
96    (GETVALUE&PUSH 1)                   ; A1
98    (CONST&PUSH 5)                      ; J
99    (CALL 3 6)                          ; BESS
102   (JMP L47)
104   L104
104   (NIL)
105   L105
105   (PUSH)
106   (CALL2 14)                          ; SENDEXEC
108   (JMP L111)
110   L110
110   (CONST 15)                          ; PRODUCT-OF-I-Y-OF-NOFRACT-INDEX
111   L111
111   (UNBIND 2)
113   (SKIP&RET 8)


Disassembly of function #:|(DEFUN FRACTEST2 (R A1 I1 ...) ...)-114|
(CONST 0) = FRACTEST2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FRACTEST2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FRACTEST2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FRACTEST2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FRACTEST2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FRACTEST2
8     (SKIP&RET 1)


Disassembly of function FRACTEST2
(CONST 0) = R
(CONST 1) = A1
(CONST 2) = RAT
(CONST 3) = D
(CONST 4) = KBATEMAN
(CONST 5) = GAMMAINCOMPLETE
(CONST 6) = HTJORY
(CONST 7) = ERFC
(CONST 8) = EI
(CONST 9) = SLOMMEL
(CONST 10) = YTJ
(CONST 11) = DTW
(CONST 12) = KBATEMANTW
(CONST 13) = GAMMAINCOMPLETETW
(CONST 14) = KTI
(CONST 15) = ERFCTD
(CONST 16) = EITGAMMAINCOMPLETE
(CONST 17) = SLOMMELTJANDY
(CONST 18) = SENDEXEC
(CONST 19) = Y-OF-NOFRACT-INDEX
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R A1)
96 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; R
3     (LOAD 7)
4     (BIND 1)                            ; A1
6     (LOAD 9)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFEQTO 2 L124)                  ; RAT
13    (LOAD&PUSH 7)
14    (JMPIFEQTO 3 L124)                  ; D
18    (LOAD&PUSH 7)
19    (JMPIFEQTO 4 L124)                  ; KBATEMAN
23    (LOAD&PUSH 7)
24    (JMPIFEQTO 5 L124)                  ; GAMMAINCOMPLETE
28    (LOAD&PUSH 7)
29    (JMPIFEQTO 6 L124)                  ; HTJORY
33    (LOAD&PUSH 7)
34    (JMPIFEQTO 7 L124)                  ; ERFC
38    (LOAD&PUSH 7)
39    (JMPIFEQTO 8 L124)                  ; EI
43    (LOAD&PUSH 7)
44    (JMPIFEQTO 9 L124)                  ; SLOMMEL
48    (CONST 19)                          ; Y-OF-NOFRACT-INDEX
49    L49
49    (UNBIND 2)
51    (SKIP&RET 6)
53    L53
53    (LOAD&PUSH 10)
54    (GETVALUE&PUSH 1)                   ; A1
56    (CALL2 10)                          ; YTJ
58    (JMP L167)
61    L61
61    (LOAD&PUSH 10)
62    (LOAD&PUSH 10)
63    (GETVALUE&PUSH 1)                   ; A1
65    (CALL 3 6)                          ; HTJORY
68    (JMP L167)
71    L71
71    (LOAD&PUSH 10)
72    (GETVALUE&PUSH 1)                   ; A1
74    (CALL2 11)                          ; DTW
76    (JMP L167)
79    L79
79    (LOAD&PUSH 10)
80    (GETVALUE&PUSH 1)                   ; A1
82    (CALL2 12)                          ; KBATEMANTW
84    (JMP L167)
87    L87
87    (GETVALUE&PUSH 1)                   ; A1
89    (LOAD&PUSH 11)
90    (CALL2 13)                          ; GAMMAINCOMPLETETW
92    (JMP L167)
95    L95
95    (LOAD&PUSH 10)
96    (GETVALUE&PUSH 1)                   ; A1
98    (CALL2 14)                          ; KTI
100   (JMP L167)
103   L103
103   (GETVALUE&PUSH 1)                   ; A1
105   (CALL1 15)                          ; ERFCTD
107   (JMP L167)
109   L109
109   (GETVALUE&PUSH 1)                   ; A1
111   (CALL1 16)                          ; EITGAMMAINCOMPLETE
113   (JMP L167)
115   L115
115   (LOAD&PUSH 10)
116   (LOAD&PUSH 10)
117   (GETVALUE&PUSH 1)                   ; A1
119   (CALL 3 17)                         ; SLOMMELTJANDY
122   (JMP L167)
124   L124
124   (GETVALUE&PUSH 0)                   ; R
126   (LOAD&PUSH 8)
127   (JMPIFEQTO 10 L53)                  ; YTJ
131   (LOAD&PUSH 8)
132   (JMPIFEQTO 6 L61)                   ; HTJORY
136   (LOAD&PUSH 8)
137   (JMPIFEQTO 3 L71)                   ; D
141   (LOAD&PUSH 8)
142   (JMPIFEQTO 4 L79)                   ; KBATEMAN
146   (LOAD&PUSH 8)
147   (JMPIFEQTO 5 L87)                   ; GAMMAINCOMPLETE
150   (LOAD&PUSH 8)
151   (JMPIFEQTO 14 L95)                  ; KTI
154   (LOAD&PUSH 8)
155   (JMPIFEQTO 7 L103)                  ; ERFC
158   (LOAD&PUSH 8)
159   (JMPIFEQTO 8 L109)                  ; EI
162   (LOAD&PUSH 8)
163   (JMPIFEQTO 9 L115)                  ; SLOMMEL
166   (NIL)
167   L167
167   (PUSH)
168   (CALL2 18)                          ; SENDEXEC
170   (JMP L49)


Disassembly of function #:|(DEFUN LT1YREF (REST ARG1 INDEX1) ...)-115|
(CONST 0) = LT1YREF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1YREF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1YREF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1YREF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1YREF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1YREF
8     (SKIP&RET 1)


Disassembly of function LT1YREF
(CONST 0) = MAXIMA-INTEGERP
(CONST 1) = LT1Y
(CONST 2) = YTJ
(CONST 3) = FRACTEST2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L14)                 ; MAXIMA-INTEGERP
4     (LOAD&PUSH 3)
5     (LOAD&PUSH 3)
6     (LOAD&PUSH 3)
7     (NIL&PUSH)
8     (CONST&PUSH 2)                      ; YTJ
9     (CALL 5 3)                          ; FRACTEST2
12    (SKIP&RET 4)
14    L14
14    (LOAD&PUSH 3)
15    (LOAD&PUSH 3)
16    (LOAD&PUSH 3)
17    (CALL 3 1)                          ; LT1Y
20    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PJACTEST (REST ARG INDEX1 ...) ...)-116|
(CONST 0) = PJACTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PJACTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PJACTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PJACTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PJACTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PJACTEST
8     (SKIP&RET 1)


Disassembly of function PJACTEST
(CONST 0) = ARG
(CONST 1) = MAXIMA-INTEGERP
(CONST 2) = ONEPJAC
(CONST 3) = LT-LTP
(CONST 4) = IND-SHOULD-BE-AN-INTEGER-IN-POLYS
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
18 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; ARG
3     (LOAD&PUSH 6)
4     (CALL1&JMPIF 1 L11)                 ; MAXIMA-INTEGERP
7     (CONST 4)                           ; IND-SHOULD-BE-AN-INTEGER-IN-POLYS
8     L8
8     (UNBIND1)
9     (SKIP&RET 6)
11    L11
11    (CONST&PUSH 2)                      ; ONEPJAC
12    (LOAD&PUSH 9)
13    (GETVALUE&PUSH 0)                   ; ARG
15    (LOAD&PUSH 9)
16    (LOAD&PUSH 9)
17    (LOAD&PUSH 9)
18    (LIST&PUSH 3)
20    (CALL 4 3)                          ; LT-LTP
23    (JMP L8)


Disassembly of function #:|(DEFUN EQRAT (A) ...)-117|
(CONST 0) = EQRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EQRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EQRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EQRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EQRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EQRAT
8     (SKIP&RET 1)


Disassembly of function EQRAT
(CONST 0) = A
(CONST 1) = RAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALLS2&JMPIF 8 L17)                ; NUMBERP
8     (GETVALUE 0)                        ; A
10    (CAR)
11    (CAR&PUSH)
12    (CONST 1)                           ; RAT
13    (EQ)
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)
17    L17
17    (NIL)
18    (JMP L14)


Disassembly of function #:|(DEFUN INTEGERTEST (R ARG I1 ...) ...)-118|
(CONST 0) = INTEGERTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEGERTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEGERTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEGERTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEGERTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEGERTEST
8     (SKIP&RET 1)


Disassembly of function INTEGERTEST
(CONST 0) = R
(CONST 1) = ARG
(CONST 2) = MAXIMA-INTEGERP
(CONST 3) = DISPATCHPOLTRANS
(CONST 4) = INDEX-SHOULD-BE-AN-INTEGER-IN-POLYS
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARG R)
18 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; R
3     (LOAD 7)
4     (BIND 1)                            ; ARG
6     (LOAD&PUSH 9)
7     (CALL1&JMPIF 2 L15)                 ; MAXIMA-INTEGERP
10    (CONST 4)                           ; INDEX-SHOULD-BE-AN-INTEGER-IN-POLYS
11    L11
11    (UNBIND 2)
13    (SKIP&RET 6)
15    L15
15    (GETVALUE&PUSH 0)                   ; R
17    (GETVALUE&PUSH 1)                   ; ARG
19    (LOAD&PUSH 11)
20    (LOAD&PUSH 11)
21    (LOAD&PUSH 11)
22    (CALL 5 3)                          ; DISPATCHPOLTRANS
25    (JMP L11)


Disassembly of function #:|(DEFUN DISPATCHPOLTRANS (R X I1 ...) ...)-119|
(CONST 0) = DISPATCHPOLTRANS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISPATCHPOLTRANS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISPATCHPOLTRANS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISPATCHPOLTRANS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISPATCHPOLTRANS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISPATCHPOLTRANS
8     (SKIP&RET 1)


Disassembly of function DISPATCHPOLTRANS
(CONST 0) = R
(CONST 1) = X
(CONST 2) = L
(CONST 3) = LTW
(CONST 4) = HE
(CONST 5) = HETD
(CONST 6) = C
(CONST 7) = CTPJAC
(CONST 8) = TTPJAC
(CONST 9) = U
(CONST 10) = UTPJAC
(CONST 11) = SENDEXEC
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X R)
49 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; R
3     (LOAD 7)
4     (BIND 1)                            ; X
6     (GETVALUE&PUSH 0)                   ; R
8     (LOAD&PUSH 8)
9     (JMPIFEQTO 2 L36)                   ; L
12    (LOAD&PUSH 8)
13    (JMPIFEQTO 4 L45)                   ; HE
16    (LOAD&PUSH 8)
17    (JMPIFEQTO 6 L52)                   ; C
20    (LOAD&PUSH 8)
21    (T)
22    (JMPIFEQ L61)
24    (LOAD&PUSH 8)
25    (JMPIFEQTO 9 L68)                   ; U
28    (NIL)
29    L29
29    (PUSH)
30    (CALL2 11)                          ; SENDEXEC
32    (UNBIND 2)
34    (SKIP&RET 6)
36    L36
36    (GETVALUE&PUSH 1)                   ; X
38    (LOAD&PUSH 11)
39    (LOAD&PUSH 11)
40    (CALL 3 3)                          ; LTW
43    (JMP L29)
45    L45
45    (GETVALUE&PUSH 1)                   ; X
47    (LOAD&PUSH 11)
48    (CALL2 5)                           ; HETD
50    (JMP L29)
52    L52
52    (GETVALUE&PUSH 1)                   ; X
54    (LOAD&PUSH 11)
55    (LOAD&PUSH 11)
56    (CALL 3 7)                          ; CTPJAC
59    (JMP L29)
61    L61
61    (GETVALUE&PUSH 1)                   ; X
63    (LOAD&PUSH 11)
64    (CALL2 8)                           ; TTPJAC
66    (JMP L29)
68    L68
68    (GETVALUE&PUSH 1)                   ; X
70    (LOAD&PUSH 11)
71    (CALL2 10)                          ; UTPJAC
73    (JMP L29)


Disassembly of function #:|(DEFUN SENDEXEC (R A) ...)-120|
(CONST 0) = SENDEXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SENDEXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SENDEXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SENDEXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SENDEXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SENDEXEC
8     (SKIP&RET 1)


Disassembly of function SENDEXEC
(CONST 0) = R
(CONST 1) = A
(CONST 2) = INIT
(CONST 3) = MUL
(CONST 4) = $EXPAND
(CONST 5) = DISTREXECINIT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A R)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; R
3     (LOAD 4)
4     (BIND 1)                            ; A
6     (GETVALUE&PUSH 0)                   ; R
8     (CALL1&PUSH 2)                      ; INIT
10    (GETVALUE&PUSH 1)                   ; A
12    (CALL2&PUSH 3)                      ; MUL
14    (CALL1&PUSH 4)                      ; $EXPAND
16    (CALL1 5)                           ; DISTREXECINIT
18    (UNBIND 2)
20    (SKIP&RET 3)


Disassembly of function #:|(DEFUN WHITTEST (R A I1 ...) ...)-121|
(CONST 0) = WHITTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WHITTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WHITTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WHITTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WHITTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WHITTEST
8     (SKIP&RET 1)


Disassembly of function WHITTEST
(CONST 0) = R
(CONST 1) = A
(CONST 2) = WHITTINDTEST
(CONST 3) = FORMULA-FOR-CONFL-NEEDED
(CONST 4) = INIT
(CONST 5) = WTM
(CONST 6) = MUL
(CONST 7) = $EXPAND
(CONST 8) = DISTREXECINIT
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A R)
22 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; R
3     (LOAD 6)
4     (BIND 1)                            ; A
6     (LOAD&PUSH 8)
7     (LOAD&PUSH 8)
8     (CALL2&JMPIF 2 L32)                 ; WHITTINDTEST
11    (GETVALUE&PUSH 0)                   ; R
13    (CALL1&PUSH 4)                      ; INIT
15    (GETVALUE&PUSH 1)                   ; A
17    (LOAD&PUSH 10)
18    (LOAD&PUSH 10)
19    (CALL&PUSH 3 5)                     ; WTM
22    (CALL2&PUSH 6)                      ; MUL
24    (CALL1&PUSH 7)                      ; $EXPAND
26    (CALL1 8)                           ; DISTREXECINIT
28    L28
28    (UNBIND 2)
30    (SKIP&RET 5)
32    L32
32    (CONST 3)                           ; FORMULA-FOR-CONFL-NEEDED
33    (JMP L28)


Disassembly of function #:|(DEFUN WHITTINDTEST (I1 I2) ...)-122|
(CONST 0) = WHITTINDTEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WHITTINDTEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WHITTINDTEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WHITTINDTEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WHITTINDTEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WHITTINDTEST
8     (SKIP&RET 1)


Disassembly of function WHITTINDTEST
(CONST 0) = ADD
(CONST 1) = MAXIMA-INTEGERP
(CONST 2) = ((RAT SIMP) 1 2)
(CONST 3) = SUB
(CONST 4) = NEGINP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (LOAD&PUSH 2)
2     (CALL2&PUSH 0)                      ; ADD
4     (CALL1 1)                           ; MAXIMA-INTEGERP
6     (JMPIF1 L30)
8     (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
9     (LOAD&PUSH 2)
10    (CALL2&PUSH 3)                      ; SUB
12    (LOAD&PUSH 3)
13    (CALL2&PUSH 3)                      ; SUB
15    (CALL1 4)                           ; NEGINP
17    (JMPIF1 L30)
19    (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
20    (LOAD&PUSH 2)
21    (CALL2&PUSH 0)                      ; ADD
23    (LOAD&PUSH 3)
24    (CALL2&PUSH 3)                      ; SUB
26    (CALL1 4)                           ; NEGINP
28    (SKIP&RET 3)
30    L30
30    (SKIP&RET 3)


Disassembly of function #:|(DEFUN INIT (R) ...)-123|
(CONST 0) = INIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INIT
8     (SKIP&RET 1)


Disassembly of function INIT
(CONST 0) = R
(CONST 1) = $%E
(CONST 2) = -1
(CONST 3) = VAR
(CONST 4) = PAR
(CONST 5) = MUL*
(CONST 6) = POWER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PAR VAR R)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; R
3     (GETVALUE&PUSH 0)                   ; R
5     (CONST&PUSH 1)                      ; $%E
6     (CONST&PUSH 2)                      ; -1
7     (GETVALUE&PUSH 3)                   ; VAR
9     (GETVALUE&PUSH 4)                   ; PAR
11    (CALL&PUSH 3 5)                     ; MUL*
14    (CALL2&PUSH 6)                      ; POWER
16    (CALL2 5)                           ; MUL*
18    (UNBIND1)
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LTW (X N A) ...)-124|
(CONST 0) = LTW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LTW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LTW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LTW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LTW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LTW
8     (SKIP&RET 1)


Disassembly of function LTW
(CONST 0) = X
(CONST 1) = N
(CONST 2) = A
(CONST 3) = 2
(CONST 4) = DIV
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = FACTORIAL
(CONST 8) = -2
(CONST 9) = SUB
(CONST 10) = $%E
(CONST 11) = ((RAT SIMP) 1 2)
(CONST 12) = ADD
(CONST 13) = WWHIT
(CONST 14) = MUL*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N A)
39 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; A
9     (GETVALUE&PUSH 2)                   ; A
11    (CONST&PUSH 3)                      ; 2
12    (CALL2&PUSH 4)                      ; DIV
14    (CONST&PUSH 5)                      ; -1
15    (GETVALUE&PUSH 1)                   ; N
17    (CALL2&PUSH 6)                      ; POWER
19    (GETVALUE&PUSH 1)                   ; N
21    (CALL1&PUSH 7)                      ; FACTORIAL
23    (CONST&PUSH 5)                      ; -1
24    (CALL2&PUSH 6)                      ; POWER
26    (GETVALUE&PUSH 0)                   ; X
28    (CONST&PUSH 8)                      ; -2
29    (CONST&PUSH 5)                      ; -1
30    (CALL2&PUSH 6)                      ; POWER
32    (LOAD&PUSH 4)
33    (CALL2&PUSH 9)                      ; SUB
35    (CALL2&PUSH 6)                      ; POWER
37    (CONST&PUSH 10)                     ; $%E
38    (GETVALUE&PUSH 0)                   ; X
40    (CONST&PUSH 3)                      ; 2
41    (CALL2&PUSH 4)                      ; DIV
43    (CALL2&PUSH 6)                      ; POWER
45    (GETVALUE&PUSH 0)                   ; X
47    (CONST&PUSH 11)                     ; ((RAT SIMP) 1 2)
48    (LOAD&PUSH 6)
49    (GETVALUE&PUSH 1)                   ; N
51    (CALL&PUSH 3 12)                    ; ADD
54    (LOAD&PUSH 6)
55    (CALL&PUSH 3 13)                    ; WWHIT
58    (CALL 5 14)                         ; MUL*
61    (SKIP 1)
63    (UNBIND 3)
65    (SKIP&RET 4)


Disassembly of function #:|(DEFUN CTPJAC (X N V) ...)-125|
(CONST 0) = CTPJAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CTPJAC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CTPJAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CTPJAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CTPJAC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CTPJAC
8     (SKIP&RET 1)


Disassembly of function CTPJAC
(CONST 0) = X
(CONST 1) = N
(CONST 2) = V
(CONST 3) = ADD
(CONST 4) = GM
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = ((RAT SIMP) 1 2)
(CONST 8) = SUB
(CONST 9) = PJAC
(CONST 10) = MUL*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N V)
40 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; V
9     (GETVALUE&PUSH 2)                   ; V
11    (GETVALUE&PUSH 2)                   ; V
13    (GETVALUE&PUSH 1)                   ; N
15    (CALL&PUSH 3 3)                     ; ADD
18    (CALL1&PUSH 4)                      ; GM
20    (GETVALUE&PUSH 2)                   ; V
22    (GETVALUE&PUSH 2)                   ; V
24    (CALL2&PUSH 3)                      ; ADD
26    (CALL1&PUSH 4)                      ; GM
28    (CONST&PUSH 5)                      ; -1
29    (CALL2&PUSH 6)                      ; POWER
31    (CONST&PUSH 7)                      ; ((RAT SIMP) 1 2)
32    (GETVALUE&PUSH 2)                   ; V
34    (CALL2&PUSH 3)                      ; ADD
36    (CALL1&PUSH 4)                      ; GM
38    (GETVALUE&PUSH 2)                   ; V
40    (CONST&PUSH 7)                      ; ((RAT SIMP) 1 2)
41    (GETVALUE&PUSH 1)                   ; N
43    (CALL&PUSH 3 3)                     ; ADD
46    (CALL1&PUSH 4)                      ; GM
48    (CONST&PUSH 5)                      ; -1
49    (CALL2&PUSH 6)                      ; POWER
51    (GETVALUE&PUSH 0)                   ; X
53    (GETVALUE&PUSH 1)                   ; N
55    (GETVALUE&PUSH 2)                   ; V
57    (CONST&PUSH 7)                      ; ((RAT SIMP) 1 2)
58    (CALL2&PUSH 8)                      ; SUB
60    (GETVALUE&PUSH 2)                   ; V
62    (CONST&PUSH 7)                      ; ((RAT SIMP) 1 2)
63    (CALL2&PUSH 8)                      ; SUB
65    (CALL&PUSH 4 9)                     ; PJAC
68    (CALL 5 10)                         ; MUL*
71    (UNBIND 3)
73    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TTPJAC (X N) ...)-126|
(CONST 0) = TTPJAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TTPJAC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TTPJAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TTPJAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TTPJAC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TTPJAC
8     (SKIP&RET 1)


Disassembly of function TTPJAC
(CONST 0) = X
(CONST 1) = N
(CONST 2) = FACTORIAL
(CONST 3) = ((RAT SIMP) 1 2)
(CONST 4) = GM
(CONST 5) = ADD
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = MUL
(CONST 9) = PJAC
(CONST 10) = MUL*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N)
26 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 1)                   ; N
8     (CALL1&PUSH 2)                      ; FACTORIAL
10    (CONST&PUSH 3)                      ; ((RAT SIMP) 1 2)
11    (CALL1&PUSH 4)                      ; GM
13    (CONST&PUSH 3)                      ; ((RAT SIMP) 1 2)
14    (GETVALUE&PUSH 1)                   ; N
16    (CALL2&PUSH 5)                      ; ADD
18    (CALL1&PUSH 4)                      ; GM
20    (CONST&PUSH 6)                      ; -1
21    (CALL2&PUSH 7)                      ; POWER
23    (GETVALUE&PUSH 0)                   ; X
25    (GETVALUE&PUSH 1)                   ; N
27    (CONST&PUSH 6)                      ; -1
28    (CONST&PUSH 3)                      ; ((RAT SIMP) 1 2)
29    (CALL2&PUSH 8)                      ; MUL
31    (CONST&PUSH 6)                      ; -1
32    (CONST&PUSH 3)                      ; ((RAT SIMP) 1 2)
33    (CALL2&PUSH 8)                      ; MUL
35    (CALL&PUSH 4 9)                     ; PJAC
38    (CALL 4 10)                         ; MUL*
41    (UNBIND 2)
43    (SKIP&RET 3)


Disassembly of function #:|(DEFUN UTPJAC (X N) ...)-127|
(CONST 0) = UTPJAC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE UTPJAC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; UTPJAC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; UTPJAC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE UTPJAC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; UTPJAC
8     (SKIP&RET 1)


Disassembly of function UTPJAC
(CONST 0) = X
(CONST 1) = N
(CONST 2) = 1
(CONST 3) = ADD
(CONST 4) = FACTORIAL
(CONST 5) = ((RAT SIMP) 1 2)
(CONST 6) = GM
(CONST 7) = -1
(CONST 8) = POWER
(CONST 9) = PJAC
(CONST 10) = MUL*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X N)
26 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 1)                   ; N
8     (CONST&PUSH 2)                      ; 1
9     (CALL2&PUSH 3)                      ; ADD
11    (CALL1&PUSH 4)                      ; FACTORIAL
13    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
14    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
15    (CALL1&PUSH 6)                      ; GM
17    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
18    (GETVALUE&PUSH 1)                   ; N
20    (CONST&PUSH 2)                      ; 1
21    (CALL&PUSH 3 3)                     ; ADD
24    (CALL1&PUSH 6)                      ; GM
26    (CONST&PUSH 7)                      ; -1
27    (CALL2&PUSH 8)                      ; POWER
29    (GETVALUE&PUSH 0)                   ; X
31    (GETVALUE&PUSH 1)                   ; N
33    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
34    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
35    (CALL&PUSH 4 9)                     ; PJAC
38    (CALL 5 10)                         ; MUL*
41    (UNBIND 2)
43    (SKIP&RET 3)


Disassembly of function #:|(DEFUN HETD (X N) ...)-128|
(CONST 0) = HETD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HETD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HETD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HETD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HETD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HETD
8     (SKIP&RET 1)


Disassembly of function HETD
(CONST 0) = X
(CONST 1) = N
(CONST 2) = $%E
(CONST 3) = 4
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = MUL*
(CONST 7) = PARCYL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N X)
18 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (CONST&PUSH 2)                      ; $%E
7     (GETVALUE&PUSH 0)                   ; X
9     (GETVALUE&PUSH 0)                   ; X
11    (CONST&PUSH 3)                      ; 4
12    (CONST&PUSH 4)                      ; -1
13    (CALL2&PUSH 5)                      ; POWER
15    (CALL&PUSH 3 6)                     ; MUL*
18    (CALL2&PUSH 5)                      ; POWER
20    (GETVALUE&PUSH 0)                   ; X
22    (GETVALUE&PUSH 1)                   ; N
24    (CALL2&PUSH 7)                      ; PARCYL
26    (CALL2 6)                           ; MUL*
28    (UNBIND 2)
30    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ERFCTD (X) ...)-129|
(CONST 0) = ERFCTD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERFCTD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERFCTD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERFCTD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERFCTD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERFCTD
8     (SKIP&RET 1)


Disassembly of function ERFCTD
(CONST 0) = X
(CONST 1) = 2
(CONST 2) = ((RAT SIMP) 1 2)
(CONST 3) = POWER
(CONST 4) = $%PI
(CONST 5) = -1
(CONST 6) = MUL*
(CONST 7) = $%E
(CONST 8) = PARCYL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 2
4     (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
5     (CALL2&PUSH 3)                      ; POWER
7     (CONST&PUSH 4)                      ; $%PI
8     (CONST&PUSH 5)                      ; -1
9     (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
10    (CALL2&PUSH 6)                      ; MUL*
12    (CALL2&PUSH 3)                      ; POWER
14    (CONST&PUSH 7)                      ; $%E
15    (CONST&PUSH 5)                      ; -1
16    (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
17    (GETVALUE&PUSH 0)                   ; X
19    (GETVALUE&PUSH 0)                   ; X
21    (CALL&PUSH 4 6)                     ; MUL*
24    (CALL2&PUSH 3)                      ; POWER
26    (CONST&PUSH 1)                      ; 2
27    (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
28    (CALL2&PUSH 3)                      ; POWER
30    (GETVALUE&PUSH 0)                   ; X
32    (CALL2&PUSH 6)                      ; MUL*
34    (CONST&PUSH 5)                      ; -1
35    (CALL2&PUSH 8)                      ; PARCYL
37    (CALL 4 6)                          ; MUL*
40    (UNBIND1)
41    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EITGAMMAINCOMPLETE (X) ...)-130|
(CONST 0) = EITGAMMAINCOMPLETE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EITGAMMAINCOMPLETE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EITGAMMAINCOMPLETE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EITGAMMAINCOMPLETE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EITGAMMAINCOMPLETE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EITGAMMAINCOMPLETE
8     (SKIP&RET 1)


Disassembly of function EITGAMMAINCOMPLETE
(CONST 0) = X
(CONST 1) = -1
(CONST 2) = 0
(CONST 3) = MUL
(CONST 4) = GMINC
(CONST 5) = MUL*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; -1
4     (CONST&PUSH 2)                      ; 0
5     (CONST&PUSH 1)                      ; -1
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL2&PUSH 3)                      ; MUL
10    (CALL2&PUSH 4)                      ; GMINC
12    (CALL2 5)                           ; MUL*
14    (UNBIND1)
15    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SLOMMELTJANDY (M N Z) ...)-131|
(CONST 0) = SLOMMELTJANDY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SLOMMELTJANDY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SLOMMELTJANDY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SLOMMELTJANDY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SLOMMELTJANDY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SLOMMELTJANDY
8     (SKIP&RET 1)


Disassembly of function SLOMMELTJANDY
(CONST 0) = M
(CONST 1) = N
(CONST 2) = Z
(CONST 3) = ((RAT SIMP) 1 2)
(CONST 4) = $%PI
(CONST 5) = SUB
(CONST 6) = MUL*
(CONST 7) = ARG
(CONST 8) = LITTLESLOMMEL
(CONST 9) = 2
(CONST 10) = 1
(CONST 11) = POWER
(CONST 12) = ADD
(CONST 13) = DIV
(CONST 14) = GM
(CONST 15) = SIN%
(CONST 16) = J
(CONST 17) = BESS
(CONST 18) = COS%
(CONST 19) = Y
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARG Z N M)
56 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; M
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (CONST&PUSH 3)                      ; ((RAT SIMP) 1 2)
10    (CONST&PUSH 4)                      ; $%PI
11    (GETVALUE&PUSH 0)                   ; M
13    (GETVALUE&PUSH 1)                   ; N
15    (CALL2&PUSH 5)                      ; SUB
17    (CALL 3 6)                          ; MUL*
20    (BIND 7)                            ; ARG
22    (GETVALUE&PUSH 0)                   ; M
24    (GETVALUE&PUSH 1)                   ; N
26    (GETVALUE&PUSH 2)                   ; Z
28    (CALL&PUSH 3 8)                     ; LITTLESLOMMEL
31    (CONST&PUSH 9)                      ; 2
32    (GETVALUE&PUSH 0)                   ; M
34    (CONST&PUSH 10)                     ; 1
35    (CALL2&PUSH 5)                      ; SUB
37    (CALL2&PUSH 11)                     ; POWER
39    (GETVALUE&PUSH 0)                   ; M
41    (CONST&PUSH 10)                     ; 1
42    (CALL2&PUSH 12)                     ; ADD
44    (GETVALUE&PUSH 1)                   ; N
46    (CALL2&PUSH 5)                      ; SUB
48    (CONST&PUSH 9)                      ; 2
49    (CALL2&PUSH 13)                     ; DIV
51    (CALL1&PUSH 14)                     ; GM
53    (GETVALUE&PUSH 0)                   ; M
55    (GETVALUE&PUSH 1)                   ; N
57    (CONST&PUSH 10)                     ; 1
58    (CALL&PUSH 3 12)                    ; ADD
61    (CONST&PUSH 9)                      ; 2
62    (CALL2&PUSH 13)                     ; DIV
64    (CALL1&PUSH 14)                     ; GM
66    (GETVALUE&PUSH 7)                   ; ARG
68    (CALL1&PUSH 15)                     ; SIN%
70    (GETVALUE&PUSH 1)                   ; N
72    (GETVALUE&PUSH 2)                   ; Z
74    (CONST&PUSH 16)                     ; J
75    (CALL&PUSH 3 17)                    ; BESS
78    (CALL2&PUSH 6)                      ; MUL*
80    (GETVALUE&PUSH 7)                   ; ARG
82    (CALL1&PUSH 18)                     ; COS%
84    (GETVALUE&PUSH 1)                   ; N
86    (GETVALUE&PUSH 2)                   ; Z
88    (CONST&PUSH 19)                     ; Y
89    (CALL&PUSH 3 17)                    ; BESS
92    (CALL2&PUSH 6)                      ; MUL*
94    (CALL2&PUSH 5)                      ; SUB
96    (CALL&PUSH 4 6)                     ; MUL*
99    (CALL2 12)                          ; ADD
101   (UNBIND 4)
103   (SKIP&RET 4)


Disassembly of function #:|(DEFUN WTM (A I1 I2) ...)-132|
(CONST 0) = WTM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WTM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WTM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WTM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WTM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WTM
8     (SKIP&RET 1)


Disassembly of function WTM
(CONST 0) = A
(CONST 1) = -2
(CONST 2) = MUL
(CONST 3) = GM
(CONST 4) = MWHIT
(CONST 5) = ((RAT SIMP) 1 2)
(CONST 6) = SUB
(CONST 7) = -1
(CONST 8) = POWER
(CONST 9) = MUL*
(CONST 10) = ADD
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
41 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; -2
4     (LOAD&PUSH 5)
5     (CALL2&PUSH 2)                      ; MUL
7     (CALL1&PUSH 3)                      ; GM
9     (GETVALUE&PUSH 0)                   ; A
11    (LOAD&PUSH 7)
12    (LOAD&PUSH 7)
13    (CALL&PUSH 3 4)                     ; MWHIT
16    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
17    (LOAD&PUSH 7)
18    (CALL2&PUSH 6)                      ; SUB
20    (LOAD&PUSH 8)
21    (CALL2&PUSH 6)                      ; SUB
23    (CALL1&PUSH 3)                      ; GM
25    (CONST&PUSH 7)                      ; -1
26    (CALL2&PUSH 8)                      ; POWER
28    (CALL&PUSH 3 9)                     ; MUL*
31    (LOAD&PUSH 5)
32    (LOAD&PUSH 6)
33    (CALL2&PUSH 10)                     ; ADD
35    (CALL1&PUSH 3)                      ; GM
37    (GETVALUE&PUSH 0)                   ; A
39    (LOAD&PUSH 8)
40    (CONST&PUSH 7)                      ; -1
41    (LOAD&PUSH 9)
42    (CALL2&PUSH 2)                      ; MUL
44    (CALL&PUSH 3 4)                     ; MWHIT
47    (CONST&PUSH 5)                      ; ((RAT SIMP) 1 2)
48    (LOAD&PUSH 8)
49    (CALL2&PUSH 10)                     ; ADD
51    (LOAD&PUSH 9)
52    (CALL2&PUSH 6)                      ; SUB
54    (CALL1&PUSH 3)                      ; GM
56    (CONST&PUSH 7)                      ; -1
57    (CALL2&PUSH 8)                      ; POWER
59    (CALL&PUSH 3 9)                     ; MUL*
62    (CALL2 10)                          ; ADD
64    (UNBIND1)
65    (SKIP&RET 4)


Disassembly of function #:|(DEFUN GAMMAINCOMPLETETW (A X) ...)-133|
(CONST 0) = GAMMAINCOMPLETETW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GAMMAINCOMPLETETW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GAMMAINCOMPLETETW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GAMMAINCOMPLETETW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GAMMAINCOMPLETETW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GAMMAINCOMPLETETW
8     (SKIP&RET 1)


Disassembly of function GAMMAINCOMPLETETW
(CONST 0) = A
(CONST 1) = X
(CONST 2) = 1
(CONST 3) = SUB
(CONST 4) = 2
(CONST 5) = DIV
(CONST 6) = POWER
(CONST 7) = $%E
(CONST 8) = -2
(CONST 9) = WWHIT
(CONST 10) = MUL*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A X)
29 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (GETVALUE&PUSH 1)                   ; X
8     (GETVALUE&PUSH 0)                   ; A
10    (CONST&PUSH 2)                      ; 1
11    (CALL2&PUSH 3)                      ; SUB
13    (CONST&PUSH 4)                      ; 2
14    (CALL2&PUSH 5)                      ; DIV
16    (CALL2&PUSH 6)                      ; POWER
18    (CONST&PUSH 7)                      ; $%E
19    (GETVALUE&PUSH 1)                   ; X
21    (CONST&PUSH 8)                      ; -2
22    (CALL2&PUSH 5)                      ; DIV
24    (CALL2&PUSH 6)                      ; POWER
26    (GETVALUE&PUSH 1)                   ; X
28    (GETVALUE&PUSH 0)                   ; A
30    (CONST&PUSH 2)                      ; 1
31    (CALL2&PUSH 3)                      ; SUB
33    (CONST&PUSH 4)                      ; 2
34    (CALL2&PUSH 5)                      ; DIV
36    (GETVALUE&PUSH 0)                   ; A
38    (CONST&PUSH 4)                      ; 2
39    (CALL2&PUSH 5)                      ; DIV
41    (CALL&PUSH 3 9)                     ; WWHIT
44    (CALL 3 10)                         ; MUL*
47    (UNBIND 2)
49    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DISTREXECINIT (FUN) ...)-134|
(CONST 0) = DISTREXECINIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTREXECINIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTREXECINIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTREXECINIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTREXECINIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTREXECINIT
8     (SKIP&RET 1)


Disassembly of function DISTREXECINIT
(CONST 0) = MPLUS
(CONST 1) = DISTREXEC
(CONST 2) = VAR
(CONST 3) = PAR
(CONST 4) = HYPGEO-EXEC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PAR VAR)
13 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (JMPIFEQTO 0 L16)                   ; MPLUS
6     (LOAD&PUSH 1)
7     (GETVALUE&PUSH 2)                   ; VAR
9     (GETVALUE&PUSH 3)                   ; PAR
11    (CALL 3 4)                          ; HYPGEO-EXEC
14    (SKIP&RET 2)
16    L16
16    (LOAD&CDR&PUSH 1)
18    (CALL1 1)                           ; DISTREXEC
20    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DISTRDEFEXECINIT (FUN) ...)-135|
(CONST 0) = DISTRDEFEXECINIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTRDEFEXECINIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTRDEFEXECINIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTRDEFEXECINIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTRDEFEXECINIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTRDEFEXECINIT
8     (SKIP&RET 1)


Disassembly of function DISTRDEFEXECINIT
(CONST 0) = MPLUS
(CONST 1) = DISTRDEFEXEC
(CONST 2) = VAR
(CONST 3) = DEFEXEC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
12 byte-code instructions:
0     (LOAD 1)
1     (CAR)
2     (CAR&PUSH)
3     (JMPIFEQTO 0 L13)                   ; MPLUS
6     (LOAD&PUSH 1)
7     (GETVALUE&PUSH 2)                   ; VAR
9     (CALL2 3)                           ; DEFEXEC
11    (SKIP&RET 2)
13    L13
13    (LOAD&CDR&PUSH 1)
15    (CALL1 1)                           ; DISTRDEFEXEC
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DISTREXEC (FUN) ...)-136|
(CONST 0) = DISTREXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTREXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTREXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTREXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTREXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTREXEC
8     (SKIP&RET 1)


Disassembly of function DISTREXEC
(CONST 0) = 0
(CONST 1) = VAR
(CONST 2) = PAR
(CONST 3) = HYPGEO-EXEC
(CONST 4) = ADD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PAR VAR)
15 byte-code instructions:
0     (LOAD&JMPIF 1 L9)
3     L3
3     (CONST 0)                           ; 0
4     (SKIP&RET 2)
6     L6
6     (LOAD&JMPIFNOT 1 L3)
9     L9
9     (LOAD&CAR&PUSH 1)
11    (GETVALUE&PUSH 1)                   ; VAR
13    (GETVALUE&PUSH 2)                   ; PAR
15    (CALL&PUSH 3 3)                     ; HYPGEO-EXEC
18    (LOAD&CDR&PUSH 2)
20    (JSR&PUSH L6)
22    (CALL2 4)                           ; ADD
24    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DISTRDEFEXEC (FUN) ...)-137|
(CONST 0) = DISTRDEFEXEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DISTRDEFEXEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DISTRDEFEXEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DISTRDEFEXEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DISTRDEFEXEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DISTRDEFEXEC
8     (SKIP&RET 1)


Disassembly of function DISTRDEFEXEC
(CONST 0) = 0
(CONST 1) = VAR
(CONST 2) = DEFEXEC
(CONST 3) = ADD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
14 byte-code instructions:
0     (LOAD&JMPIF 1 L9)
3     L3
3     (CONST 0)                           ; 0
4     (SKIP&RET 2)
6     L6
6     (LOAD&JMPIFNOT 1 L3)
9     L9
9     (LOAD&CAR&PUSH 1)
11    (GETVALUE&PUSH 1)                   ; VAR
13    (CALL2&PUSH 2)                      ; DEFEXEC
15    (LOAD&CDR&PUSH 2)
17    (JSR&PUSH L6)
19    (CALL2 3)                           ; ADD
21    (SKIP&RET 2)


Disassembly of function #:|(DEFUN YTJ (I A) ...)-138|
(CONST 0) = YTJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE YTJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; YTJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; YTJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE YTJ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; YTJ
8     (SKIP&RET 1)


Disassembly of function YTJ
(CONST 0) = A
(CONST 1) = J
(CONST 2) = BESS
(CONST 3) = (%COT)
(CONST 4) = $%PI
(CONST 5) = MUL
(CONST 6) = MUL*
(CONST 7) = -1
(CONST 8) = SIN%
(CONST 9) = POWER
(CONST 10) = SUB
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 0)                   ; A
6     (CONST&PUSH 1)                      ; J
7     (CALL&PUSH 3 2)                     ; BESS
10    (CONST&PUSH 3)                      ; (%COT)
11    (LOAD&PUSH 7)
12    (CONST&PUSH 4)                      ; $%PI
13    (CALL2&PUSH 5)                      ; MUL
15    (LIST&PUSH 2)
17    (CALL2&PUSH 6)                      ; MUL*
19    (CONST&PUSH 7)                      ; -1
20    (LOAD&PUSH 7)
21    (CALL2&PUSH 5)                      ; MUL
23    (GETVALUE&PUSH 0)                   ; A
25    (CONST&PUSH 1)                      ; J
26    (CALL&PUSH 3 2)                     ; BESS
29    (LOAD&PUSH 7)
30    (CONST&PUSH 4)                      ; $%PI
31    (CALL2&PUSH 5)                      ; MUL
33    (CALL1&PUSH 8)                      ; SIN%
35    (CONST&PUSH 7)                      ; -1
36    (CALL2&PUSH 9)                      ; POWER
38    (CALL2&PUSH 6)                      ; MUL*
40    (CALL2 10)                          ; SUB
42    (UNBIND1)
43    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DTW (I A) ...)-139|
(CONST 0) = DTW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DTW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DTW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DTW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DTW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DTW
8     (SKIP&RET 1)


Disassembly of function DTW
(CONST 0) = A
(CONST 1) = 2
(CONST 2) = DIV
(CONST 3) = 4
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = ADD
(CONST 7) = -2
(CONST 8) = ((RAT SIMP) 1 2)
(CONST 9) = MUL*
(CONST 10) = WWHIT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; 2
4     (LOAD&PUSH 6)
5     (CONST&PUSH 1)                      ; 2
6     (CALL2&PUSH 2)                      ; DIV
8     (CONST&PUSH 3)                      ; 4
9     (CONST&PUSH 4)                      ; -1
10    (CALL2&PUSH 5)                      ; POWER
12    (CALL2&PUSH 6)                      ; ADD
14    (CALL2&PUSH 5)                      ; POWER
16    (GETVALUE&PUSH 0)                   ; A
18    (CONST&PUSH 7)                      ; -2
19    (CONST&PUSH 4)                      ; -1
20    (CALL2&PUSH 5)                      ; POWER
22    (CALL2&PUSH 5)                      ; POWER
24    (GETVALUE&PUSH 0)                   ; A
26    (GETVALUE&PUSH 0)                   ; A
28    (CONST&PUSH 8)                      ; ((RAT SIMP) 1 2)
29    (CALL&PUSH 3 9)                     ; MUL*
32    (LOAD&PUSH 8)
33    (CONST&PUSH 1)                      ; 2
34    (CALL2&PUSH 2)                      ; DIV
36    (CONST&PUSH 3)                      ; 4
37    (CONST&PUSH 4)                      ; -1
38    (CALL2&PUSH 5)                      ; POWER
40    (CALL2&PUSH 6)                      ; ADD
42    (CONST&PUSH 3)                      ; 4
43    (CONST&PUSH 4)                      ; -1
44    (CALL2&PUSH 5)                      ; POWER
46    (CALL&PUSH 3 10)                    ; WWHIT
49    (CALL 3 9)                          ; MUL*
52    (UNBIND1)
53    (SKIP&RET 3)

WARNING in KBATEMANTW in lines 1808..1812 :
variable I is not used.
Misspelled or missing IGNORE declaration?

Disassembly of function #:|(DEFUN KBATEMANTW (I A) ...)-140|
(CONST 0) = KBATEMANTW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KBATEMANTW>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KBATEMANTW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KBATEMANTW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KBATEMANTW>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KBATEMANTW
8     (SKIP&RET 1)


Disassembly of function KBATEMANTW
(CONST 0) = A
(CONST 1) = 1
(CONST 2) = 2
(CONST 3) = DIV
(CONST 4) = IND
(CONST 5) = ADD
(CONST 6) = ((RAT SIMP) 1 2)
(CONST 7) = WWHIT
(CONST 8) = GM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (IND A)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; 1
4     (CONST&PUSH 2)                      ; 2
5     (CALL2 3)                           ; DIV
7     (BIND 4)                            ; IND
9     (GETVALUE&PUSH 0)                   ; A
11    (GETVALUE&PUSH 0)                   ; A
13    (CALL2&PUSH 5)                      ; ADD
15    (GETVALUE&PUSH 4)                   ; IND
17    (CONST&PUSH 6)                      ; ((RAT SIMP) 1 2)
18    (CALL&PUSH 3 7)                     ; WWHIT
21    (GETVALUE&PUSH 4)                   ; IND
23    (CONST&PUSH 1)                      ; 1
24    (CALL2&PUSH 5)                      ; ADD
26    (CALL1&PUSH 8)                      ; GM
28    (CALL2 3)                           ; DIV
30    (UNBIND 2)
32    (SKIP&RET 3)


Disassembly of function #:|(DEFUN KTI (I A) ...)-141|
(CONST 0) = KTI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KTI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KTI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KTI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KTI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KTI
8     (SKIP&RET 1)


Disassembly of function KTI
(CONST 0) = A
(CONST 1) = $%PI
(CONST 2) = ((RAT SIMP) 1 2)
(CONST 3) = MUL
(CONST 4) = SIN%
(CONST 5) = -1
(CONST 6) = POWER
(CONST 7) = I
(CONST 8) = BESS
(CONST 9) = SUB
(CONST 10) = MUL*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (CONST&PUSH 1)                      ; $%PI
4     (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
5     (LOAD&PUSH 7)
6     (CONST&PUSH 1)                      ; $%PI
7     (CALL2&PUSH 3)                      ; MUL
9     (CALL1&PUSH 4)                      ; SIN%
11    (CONST&PUSH 5)                      ; -1
12    (CALL2&PUSH 6)                      ; POWER
14    (CONST&PUSH 5)                      ; -1
15    (LOAD&PUSH 9)
16    (CALL2&PUSH 3)                      ; MUL
18    (GETVALUE&PUSH 0)                   ; A
20    (CONST&PUSH 7)                      ; I
21    (CALL&PUSH 3 8)                     ; BESS
24    (LOAD&PUSH 9)
25    (GETVALUE&PUSH 0)                   ; A
27    (CONST&PUSH 7)                      ; I
28    (CALL&PUSH 3 8)                     ; BESS
31    (CALL2&PUSH 9)                      ; SUB
33    (CALL 4 10)                         ; MUL*
36    (UNBIND1)
37    (SKIP&RET 3)


Disassembly of function #:|(DEFUN 1FACT (FLG V) ...)-142|
(CONST 0) = 1FACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 1FACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1FACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 1FACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 1FACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 1FACT
8     (SKIP&RET 1)


Disassembly of function 1FACT
(CONST 0) = V
(CONST 1) = $%E
(CONST 2) = $%PI
(CONST 3) = $%I
(CONST 4) = ((RAT SIMP) 1 2)
(CONST 5) = 1
(CONST 6) = -1
(CONST 7) = MUL
(CONST 8) = MUL*
(CONST 9) = POWER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (V)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; V
3     (CONST&PUSH 1)                      ; $%E
4     (CONST&PUSH 2)                      ; $%PI
5     (CONST&PUSH 3)                      ; $%I
6     (CONST&PUSH 4)                      ; ((RAT SIMP) 1 2)
7     (LOAD&JMPIF 9 L24)
10    (CONST&PUSH 6)                      ; -1
11    (GETVALUE&PUSH 0)                   ; V
13    (CALL2 7)                           ; MUL
15    L15
15    (PUSH)
16    (CALL&PUSH 4 8)                     ; MUL*
19    (CALL2 9)                           ; POWER
21    (UNBIND1)
22    (SKIP&RET 3)
24    L24
24    (CONST 5)                           ; 1
25    (JMP L15)


Disassembly of function #:|(DEFUN BESSY (V Z) ...)-143|
(CONST 0) = BESSY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSY
8     (SKIP&RET 1)


Disassembly of function BESSY
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = (MQAPPLY)
(CONST 3) = ($%Y ARRAY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; V
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (CONST&PUSH 3)                      ; ($%Y ARRAY)
8     (GETVALUE&PUSH 0)                   ; V
10    (LIST&PUSH 2)
12    (GETVALUE&PUSH 1)                   ; Z
14    (LIST 3)
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN KMODBES (Z V) ...)-144|
(CONST 0) = KMODBES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KMODBES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KMODBES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KMODBES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KMODBES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KMODBES
8     (SKIP&RET 1)


Disassembly of function KMODBES
(CONST 0) = Z
(CONST 1) = V
(CONST 2) = (MQAPPLY)
(CONST 3) = ($%K ARRAY)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; Z
3     (LOAD 4)
4     (BIND 1)                            ; V
6     (CONST&PUSH 2)                      ; (MQAPPLY)
7     (CONST&PUSH 3)                      ; ($%K ARRAY)
8     (GETVALUE&PUSH 1)                   ; V
10    (LIST&PUSH 2)
12    (GETVALUE&PUSH 0)                   ; Z
14    (LIST 3)
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN TAN% (ARG) ...)-145|
(CONST 0) = TAN%
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAN%>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAN%
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAN%
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAN%>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAN%
8     (SKIP&RET 1)


Disassembly of function TAN%
(CONST 0) = ARG
(CONST 1) = (%TAN)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; (%TAN)
4     (GETVALUE&PUSH 0)                   ; ARG
6     (LIST 2)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN DESJY (V Z FLG) ...)-146|
(CONST 0) = DESJY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DESJY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DESJY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DESJY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DESJY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DESJY
8     (SKIP&RET 1)


Disassembly of function DESJY
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = J
(CONST 3) = BESS
(CONST 4) = BESSY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
18 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; V
3     (LOAD 5)
4     (BIND 1)                            ; Z
6     (LOAD&PUSH 7)
7     (JMPIFEQTO 2 L20)                   ; J
10    (GETVALUE&PUSH 0)                   ; V
12    (GETVALUE&PUSH 1)                   ; Z
14    (CALL2 4)                           ; BESSY
16    L16
16    (UNBIND 2)
18    (SKIP&RET 4)
20    L20
20    (GETVALUE&PUSH 0)                   ; V
22    (GETVALUE&PUSH 1)                   ; Z
24    (CONST&PUSH 2)                      ; J
25    (CALL 3 3)                          ; BESS
28    (JMP L16)


Disassembly of function #:|(DEFUN NUMJORY (V SORT Z ...) ...)-147|
(CONST 0) = NUMJORY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUMJORY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUMJORY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUMJORY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUMJORY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUMJORY
8     (SKIP&RET 1)


Disassembly of function NUMJORY
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = 1
(CONST 3) = -1
(CONST 4) = MUL
(CONST 5) = DESJY
(CONST 6) = $%E
(CONST 7) = $%PI
(CONST 8) = $%I
(CONST 9) = MUL*
(CONST 10) = POWER
(CONST 11) = SUB
(CONST 12) = DESMJY
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
48 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; V
3     (LOAD 5)
4     (BIND 1)                            ; Z
6     (LOAD&PUSH 9)
7     (JMPIFEQTO 2 L48)                   ; 1
10    (CONST&PUSH 6)                      ; $%E
11    (GETVALUE&PUSH 0)                   ; V
13    (CONST&PUSH 7)                      ; $%PI
14    (CONST&PUSH 8)                      ; $%I
15    (CALL&PUSH 3 9)                     ; MUL*
18    (CALL2&PUSH 10)                     ; POWER
20    (GETVALUE&PUSH 0)                   ; V
22    (GETVALUE&PUSH 1)                   ; Z
24    (LOAD&PUSH 10)
25    (CALL&PUSH 3 12)                    ; DESMJY
28    (CALL2&PUSH 9)                      ; MUL*
30    (CONST&PUSH 3)                      ; -1
31    (GETVALUE&PUSH 0)                   ; V
33    (CALL2&PUSH 4)                      ; MUL
35    (GETVALUE&PUSH 1)                   ; Z
37    (LOAD&PUSH 10)
38    (CALL 3 12)                         ; DESMJY
41    L41
41    (PUSH)
42    (CALL2 11)                          ; SUB
44    (UNBIND 2)
46    (SKIP&RET 5)
48    L48
48    (CONST&PUSH 3)                      ; -1
49    (GETVALUE&PUSH 0)                   ; V
51    (CALL2&PUSH 4)                      ; MUL
53    (GETVALUE&PUSH 1)                   ; Z
55    (LOAD&PUSH 9)
56    (CALL&PUSH 3 5)                     ; DESJY
59    (CONST&PUSH 6)                      ; $%E
60    (CONST&PUSH 3)                      ; -1
61    (GETVALUE&PUSH 0)                   ; V
63    (CONST&PUSH 7)                      ; $%PI
64    (CONST&PUSH 8)                      ; $%I
65    (CALL&PUSH 4 9)                     ; MUL*
68    (CALL2&PUSH 10)                     ; POWER
70    (GETVALUE&PUSH 0)                   ; V
72    (GETVALUE&PUSH 1)                   ; Z
74    (LOAD&PUSH 11)
75    (CALL&PUSH 3 5)                     ; DESJY
78    (CALL2 9)                           ; MUL*
80    (JMP L41)


Disassembly of function #:|(DEFUN DESMJY (V Z FLG) ...)-148|
(CONST 0) = DESMJY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DESMJY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DESMJY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DESMJY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DESMJY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DESMJY
8     (SKIP&RET 1)


Disassembly of function DESMJY
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = J
(CONST 3) = BESS
(CONST 4) = -1
(CONST 5) = BESSY
(CONST 6) = MUL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
20 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; V
3     (LOAD 5)
4     (BIND 1)                            ; Z
6     (LOAD&PUSH 7)
7     (JMPIFEQTO 2 L23)                   ; J
10    (CONST&PUSH 4)                      ; -1
11    (GETVALUE&PUSH 0)                   ; V
13    (GETVALUE&PUSH 1)                   ; Z
15    (CALL2&PUSH 5)                      ; BESSY
17    (CALL2 6)                           ; MUL
19    L19
19    (UNBIND 2)
21    (SKIP&RET 4)
23    L23
23    (GETVALUE&PUSH 0)                   ; V
25    (GETVALUE&PUSH 1)                   ; Z
27    (CONST&PUSH 2)                      ; J
28    (CALL 3 3)                          ; BESS
31    (JMP L19)


Disassembly of function #:|(DEFUN HTJORY (V SORT Z) ...)-149|
(CONST 0) = HTJORY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HTJORY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HTJORY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HTJORY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HTJORY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HTJORY
8     (SKIP&RET 1)


Disassembly of function HTJORY
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = RAT
(CONST 3) = J
(CONST 4) = NUMJORY
(CONST 5) = $%I
(CONST 6) = $%PI
(CONST 7) = MUL
(CONST 8) = SIN%
(CONST 9) = MUL*
(CONST 10) = DIV
(CONST 11) = Y
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
35 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; V
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (GETVALUE 0)                        ; V
8     (CAR)
9     (CAR&PUSH)
10    (JMPIFEQTO 2 L36)                   ; RAT
13    (GETVALUE&PUSH 0)                   ; V
15    (LOAD&PUSH 9)
16    (GETVALUE&PUSH 1)                   ; Z
18    (CONST&PUSH 11)                     ; Y
19    (CALL&PUSH 4 4)                     ; NUMJORY
22    (GETVALUE&PUSH 0)                   ; V
24    (CONST&PUSH 6)                      ; $%PI
25    (CALL2&PUSH 7)                      ; MUL
27    (CALL1 8)                           ; SIN%
29    L29
29    (PUSH)
30    (CALL2 10)                          ; DIV
32    (UNBIND 2)
34    (SKIP&RET 4)
36    L36
36    (GETVALUE&PUSH 0)                   ; V
38    (LOAD&PUSH 9)
39    (GETVALUE&PUSH 1)                   ; Z
41    (CONST&PUSH 3)                      ; J
42    (CALL&PUSH 4 4)                     ; NUMJORY
45    (CONST&PUSH 5)                      ; $%I
46    (GETVALUE&PUSH 0)                   ; V
48    (CONST&PUSH 6)                      ; $%PI
49    (CALL2&PUSH 7)                      ; MUL
51    (CALL1&PUSH 8)                      ; SIN%
53    (CALL2 9)                           ; MUL*
55    (JMP L29)


Disassembly of function #:|(DEFUN LT1J (REST ARG INDEX) ...)-150|
(CONST 0) = LT1J
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1J>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1J
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1J
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1J>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1J
8     (SKIP&RET 1)


Disassembly of function LT1J
(CONST 0) = ARG
(CONST 1) = ONEJ
(CONST 2) = LT-LTP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; ONEJ
4     (LOAD&PUSH 7)
5     (GETVALUE&PUSH 0)                   ; ARG
7     (LOAD&PUSH 7)
8     (CALL 4 2)                          ; LT-LTP
11    (UNBIND1)
12    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT1Y (REST ARG INDEX) ...)-151|
(CONST 0) = LT1Y
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1Y>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1Y
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1Y
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1Y>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1Y
8     (SKIP&RET 1)


Disassembly of function LT1Y
(CONST 0) = ARG
(CONST 1) = ONEY
(CONST 2) = LT-LTP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; ONEY
4     (LOAD&PUSH 7)
5     (GETVALUE&PUSH 0)                   ; ARG
7     (LOAD&PUSH 7)
8     (CALL 4 2)                          ; LT-LTP
11    (UNBIND1)
12    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT2J (REST ARG1 ARG2 ...) ...)-152|
(CONST 0) = LT2J
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT2J>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT2J
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT2J
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT2J>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT2J
8     (SKIP&RET 1)


Disassembly of function LT2J
(CONST 0) = PRODUCT-OF-BESSEL-WITH-DIFFERENT-ARGS
(CONST 1) = TWOJ
(CONST 2) = LIST
(CONST 3) = LT-LTP
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&PUSH 4)
1     (LOAD&PUSH 4)
2     (CALLS2&JMPIFNOT 2 L18)             ; EQUAL
5     (CONST&PUSH 1)                      ; TWOJ
6     (LOAD&PUSH 6)
7     (LOAD&PUSH 6)
8     (CONST&PUSH 2)                      ; LIST
9     (LOAD&PUSH 6)
10    (LOAD&PUSH 6)
11    (LIST&PUSH 3)
13    (CALL 4 3)                          ; LT-LTP
16    (SKIP&RET 6)
18    L18
18    (CONST 0)                           ; PRODUCT-OF-BESSEL-WITH-DIFFERENT-ARGS
19    (SKIP&RET 6)


Disassembly of function #:|(DEFUN LT1J^2 (REST ARG INDEX) ...)-153|
(CONST 0) = LT1J^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1J^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1J^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1J^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1J^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1J^2
8     (SKIP&RET 1)


Disassembly of function LT1J^2
(CONST 0) = ARG
(CONST 1) = TWOJ
(CONST 2) = LIST
(CONST 3) = LT-LTP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; TWOJ
4     (LOAD&PUSH 7)
5     (GETVALUE&PUSH 0)                   ; ARG
7     (CONST&PUSH 2)                      ; LIST
8     (LOAD&PUSH 8)
9     (LOAD&PUSH 9)
10    (LIST&PUSH 3)
12    (CALL 4 3)                          ; LT-LTP
15    (UNBIND1)
16    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT1GAMMAGREEK (REST ARG1 ARG2) ...)-154|
(CONST 0) = LT1GAMMAGREEK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1GAMMAGREEK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1GAMMAGREEK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1GAMMAGREEK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1GAMMAGREEK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1GAMMAGREEK
8     (SKIP&RET 1)


Disassembly of function LT1GAMMAGREEK
(CONST 0) = GAMMAGREEK
(CONST 1) = LT-LTP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; GAMMAGREEK
1     (LOAD&PUSH 4)
2     (LOAD&PUSH 3)
3     (LOAD&PUSH 5)
4     (CALL 4 1)                          ; LT-LTP
7     (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT1M (R A I1 ...) ...)-155|
(CONST 0) = LT1M
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1M>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1M
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1M
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1M>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1M
8     (SKIP&RET 1)


Disassembly of function LT1M
(CONST 0) = R
(CONST 1) = A
(CONST 2) = ONEM
(CONST 3) = LT-LTP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A R)
13 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; R
3     (LOAD 6)
4     (BIND 1)                            ; A
6     (CONST&PUSH 2)                      ; ONEM
7     (GETVALUE&PUSH 0)                   ; R
9     (GETVALUE&PUSH 1)                   ; A
11    (LOAD&PUSH 11)
12    (LOAD&PUSH 11)
13    (LIST&PUSH 2)
15    (CALL 4 3)                          ; LT-LTP
18    (UNBIND 2)
20    (SKIP&RET 5)


Disassembly of function #:|(DEFUN LT1P (R A I1 ...) ...)-156|
(CONST 0) = LT1P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1P
8     (SKIP&RET 1)


Disassembly of function LT1P
(CONST 0) = R
(CONST 1) = A
(CONST 2) = HYP-ONEP
(CONST 3) = LT-LTP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A R)
13 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; R
3     (LOAD 6)
4     (BIND 1)                            ; A
6     (CONST&PUSH 2)                      ; HYP-ONEP
7     (GETVALUE&PUSH 0)                   ; R
9     (GETVALUE&PUSH 1)                   ; A
11    (LOAD&PUSH 11)
12    (LOAD&PUSH 11)
13    (LIST&PUSH 2)
15    (CALL 4 3)                          ; LT-LTP
18    (UNBIND 2)
20    (SKIP&RET 5)


Disassembly of function #:|(DEFUN LT1Q (R A I1 ...) ...)-157|
(CONST 0) = LT1Q
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1Q>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1Q
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1Q
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1Q>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1Q
8     (SKIP&RET 1)


Disassembly of function LT1Q
(CONST 0) = R
(CONST 1) = A
(CONST 2) = ONEQ
(CONST 3) = LT-LTP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A R)
13 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; R
3     (LOAD 6)
4     (BIND 1)                            ; A
6     (CONST&PUSH 2)                      ; ONEQ
7     (GETVALUE&PUSH 0)                   ; R
9     (GETVALUE&PUSH 1)                   ; A
11    (LOAD&PUSH 11)
12    (LOAD&PUSH 11)
13    (LIST&PUSH 2)
15    (CALL 4 3)                          ; LT-LTP
18    (UNBIND 2)
20    (SKIP&RET 5)


Disassembly of function #:|(DEFUN LT1ERF (REST ARG) ...)-158|
(CONST 0) = LT1ERF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1ERF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1ERF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1ERF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1ERF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1ERF
8     (SKIP&RET 1)


Disassembly of function LT1ERF
(CONST 0) = ARG
(CONST 1) = ONERF
(CONST 2) = LT-LTP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; ONERF
4     (LOAD&PUSH 6)
5     (GETVALUE&PUSH 0)                   ; ARG
7     (NIL&PUSH)
8     (CALL 4 2)                          ; LT-LTP
11    (UNBIND1)
12    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LT1LOG (REST ARG) ...)-159|
(CONST 0) = LT1LOG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1LOG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1LOG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1LOG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1LOG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1LOG
8     (SKIP&RET 1)


Disassembly of function LT1LOG
(CONST 0) = ARG
(CONST 1) = ONELOG
(CONST 2) = LT-LTP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; ONELOG
4     (LOAD&PUSH 6)
5     (GETVALUE&PUSH 0)                   ; ARG
7     (NIL&PUSH)
8     (CALL 4 2)                          ; LT-LTP
11    (UNBIND1)
12    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LT1KELLIPTIC (REST ARG) ...)-160|
(CONST 0) = LT1KELLIPTIC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1KELLIPTIC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1KELLIPTIC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1KELLIPTIC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1KELLIPTIC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1KELLIPTIC
8     (SKIP&RET 1)


Disassembly of function LT1KELLIPTIC
(CONST 0) = ARG
(CONST 1) = ONEKELLIPTIC
(CONST 2) = LT-LTP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; ONEKELLIPTIC
4     (LOAD&PUSH 6)
5     (GETVALUE&PUSH 0)                   ; ARG
7     (NIL&PUSH)
8     (CALL 4 2)                          ; LT-LTP
11    (UNBIND1)
12    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LT1E (REST ARG) ...)-161|
(CONST 0) = LT1E
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1E>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1E
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1E
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1E>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1E
8     (SKIP&RET 1)


Disassembly of function LT1E
(CONST 0) = ARG
(CONST 1) = ONEE
(CONST 2) = LT-LTP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; ONEE
4     (LOAD&PUSH 6)
5     (GETVALUE&PUSH 0)                   ; ARG
7     (NIL&PUSH)
8     (CALL 4 2)                          ; LT-LTP
11    (UNBIND1)
12    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LT1HSTRUVE (REST ARG1 INDEX1) ...)-162|
(CONST 0) = LT1HSTRUVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1HSTRUVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1HSTRUVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1HSTRUVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1HSTRUVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1HSTRUVE
8     (SKIP&RET 1)


Disassembly of function LT1HSTRUVE
(CONST 0) = HS
(CONST 1) = LT-LTP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; HS
1     (LOAD&PUSH 4)
2     (LOAD&PUSH 4)
3     (LOAD&PUSH 4)
4     (CALL 4 1)                          ; LT-LTP
7     (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT1LSTRUVE (REST ARG1 INDEX1) ...)-163|
(CONST 0) = LT1LSTRUVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1LSTRUVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1LSTRUVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1LSTRUVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1LSTRUVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1LSTRUVE
8     (SKIP&RET 1)


Disassembly of function LT1LSTRUVE
(CONST 0) = HL
(CONST 1) = LT-LTP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; HL
1     (LOAD&PUSH 4)
2     (LOAD&PUSH 4)
3     (LOAD&PUSH 4)
4     (CALL 4 1)                          ; LT-LTP
7     (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT1S (REST ARG1 INDEX1 ...) ...)-164|
(CONST 0) = LT1S
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT1S>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT1S
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT1S
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT1S>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT1S
8     (SKIP&RET 1)


Disassembly of function LT1S
(CONST 0) = S
(CONST 1) = LT-LTP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; S
1     (LOAD&PUSH 5)
2     (LOAD&PUSH 5)
3     (LOAD&PUSH 5)
4     (LOAD&PUSH 5)
5     (LIST&PUSH 2)
7     (CALL 4 1)                          ; LT-LTP
10    (SKIP&RET 5)


Disassembly of function #:|(DEFUN HSTF (V Z) ...)-165|
(CONST 0) = HSTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HSTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HSTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HSTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HSTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HSTF
8     (SKIP&RET 1)


Disassembly of function HSTF
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = 3
(CONST 3) = 2
(CONST 4) = DIV
(CONST 5) = 1
(CONST 6) = ADD
(CONST 7) = POWER
(CONST 8) = GM
(CONST 9) = -1
(CONST 10) = MUL*
(CONST 11) = FPQ
(CONST 12) = -4
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V Z)
55 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; V
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (NIL&PUSH)
7     (CONST&PUSH 2)                      ; 3
8     (CONST&PUSH 3)                      ; 2
9     (CALL2 4)                           ; DIV
11    (STORE 0)
12    (GETVALUE&PUSH 1)                   ; Z
14    (CONST&PUSH 3)                      ; 2
15    (CALL2&PUSH 4)                      ; DIV
17    (GETVALUE&PUSH 0)                   ; V
19    (CONST&PUSH 5)                      ; 1
20    (CALL2&PUSH 6)                      ; ADD
22    (CALL2&PUSH 7)                      ; POWER
24    (LOAD&PUSH 1)
25    (CALL1&PUSH 8)                      ; GM
27    (CONST&PUSH 9)                      ; -1
28    (CALL2&PUSH 7)                      ; POWER
30    (GETVALUE&PUSH 0)                   ; V
32    (LOAD&PUSH 3)
33    (CALL2&PUSH 6)                      ; ADD
35    (CALL1&PUSH 8)                      ; GM
37    (CONST&PUSH 9)                      ; -1
38    (CALL2&PUSH 7)                      ; POWER
40    (GETVALUE&PUSH 0)                   ; V
42    (LOAD&PUSH 4)
43    (CALL2&PUSH 6)                      ; ADD
45    (CALL1&PUSH 8)                      ; GM
47    (CONST&PUSH 9)                      ; -1
48    (CALL2&PUSH 7)                      ; POWER
50    (CALL&PUSH 4 10)                    ; MUL*
53    (CONST&PUSH 11)                     ; FPQ
54    (CONST&PUSH 5)                      ; 1
55    (CONST&PUSH 3)                      ; 2
56    (LIST&PUSH 2)
58    (CONST&PUSH 5)                      ; 1
59    (LIST&PUSH 1)
61    (LOAD&PUSH 4)
62    (GETVALUE&PUSH 0)                   ; V
64    (LOAD&PUSH 6)
65    (CALL2&PUSH 6)                      ; ADD
67    (LIST&PUSH 2)
69    (CONST&PUSH 12)                     ; -4
70    (CONST&PUSH 9)                      ; -1
71    (CALL2&PUSH 7)                      ; POWER
73    (GETVALUE&PUSH 1)                   ; Z
75    (GETVALUE&PUSH 1)                   ; Z
77    (CALL&PUSH 3 10)                    ; MUL*
80    (LIST&PUSH 5)
82    (LIST 2)
84    (SKIP 1)
86    (UNBIND 2)
88    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LSTF (V Z) ...)-166|
(CONST 0) = LSTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LSTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LSTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LSTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LSTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LSTF
8     (SKIP&RET 1)


Disassembly of function LSTF
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = $%E
(CONST 3) = 1
(CONST 4) = ADD
(CONST 5) = -2
(CONST 6) = DIV
(CONST 7) = $%PI
(CONST 8) = $%I
(CONST 9) = MUL*
(CONST 10) = POWER
(CONST 11) = ((RAT SIMP) 1 2)
(CONST 12) = HSTF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
35 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; V
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (NIL&PUSH)
7     (CONST&PUSH 2)                      ; $%E
8     (GETVALUE&PUSH 0)                   ; V
10    (CONST&PUSH 3)                      ; 1
11    (CALL2&PUSH 4)                      ; ADD
13    (CONST&PUSH 5)                      ; -2
14    (CALL2&PUSH 6)                      ; DIV
16    (CONST&PUSH 7)                      ; $%PI
17    (CONST&PUSH 8)                      ; $%I
18    (CALL&PUSH 3 9)                     ; MUL*
21    (CALL2&PUSH 10)                     ; POWER
23    (GETVALUE&PUSH 0)                   ; V
25    (GETVALUE&PUSH 1)                   ; Z
27    (CONST&PUSH 2)                      ; $%E
28    (CONST&PUSH 11)                     ; ((RAT SIMP) 1 2)
29    (CONST&PUSH 8)                      ; $%I
30    (CONST&PUSH 7)                      ; $%PI
31    (CALL&PUSH 3 9)                     ; MUL*
34    (CALL2&PUSH 10)                     ; POWER
36    (CALL2&PUSH 9)                      ; MUL*
38    (CALL2 12)                          ; HSTF
40    (STORE 1)
41    (CAR&PUSH)
42    (CALL2&PUSH 9)                      ; MUL*
44    (LOAD 1)
45    (CDR)
46    (CAR&PUSH)
47    (LIST 2)
49    (SKIP 1)
51    (UNBIND 2)
53    (SKIP&RET 3)


Disassembly of function #:|(DEFUN STF (M N Z) ...)-167|
(CONST 0) = STF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STF
8     (SKIP&RET 1)


Disassembly of function STF
(CONST 0) = M
(CONST 1) = N
(CONST 2) = Z
(CONST 3) = 1
(CONST 4) = ADD
(CONST 5) = POWER
(CONST 6) = SUB
(CONST 7) = -1
(CONST 8) = MUL*
(CONST 9) = FPQ
(CONST 10) = 2
(CONST 11) = 3
(CONST 12) = DIV
(CONST 13) = ADD*
(CONST 14) = -4
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M Z)
55 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; M
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (GETVALUE&PUSH 2)                   ; Z
11    (GETVALUE&PUSH 0)                   ; M
13    (CONST&PUSH 3)                      ; 1
14    (CALL2&PUSH 4)                      ; ADD
16    (CALL2&PUSH 5)                      ; POWER
18    (GETVALUE&PUSH 0)                   ; M
20    (CONST&PUSH 3)                      ; 1
21    (CALL2&PUSH 4)                      ; ADD
23    (GETVALUE&PUSH 1)                   ; N
25    (CALL2&PUSH 6)                      ; SUB
27    (CONST&PUSH 7)                      ; -1
28    (CALL2&PUSH 5)                      ; POWER
30    (GETVALUE&PUSH 0)                   ; M
32    (GETVALUE&PUSH 1)                   ; N
34    (CONST&PUSH 3)                      ; 1
35    (CALL&PUSH 3 4)                     ; ADD
38    (CONST&PUSH 7)                      ; -1
39    (CALL2&PUSH 5)                      ; POWER
41    (CALL&PUSH 3 8)                     ; MUL*
44    (CONST&PUSH 9)                      ; FPQ
45    (CONST&PUSH 3)                      ; 1
46    (CONST&PUSH 10)                     ; 2
47    (LIST&PUSH 2)
49    (CONST&PUSH 3)                      ; 1
50    (LIST&PUSH 1)
52    (GETVALUE&PUSH 0)                   ; M
54    (CONST&PUSH 11)                     ; 3
55    (CALL2&PUSH 4)                      ; ADD
57    (GETVALUE&PUSH 1)                   ; N
59    (CALL2&PUSH 6)                      ; SUB
61    (CONST&PUSH 10)                     ; 2
62    (CALL2&PUSH 12)                     ; DIV
64    (GETVALUE&PUSH 0)                   ; M
66    (GETVALUE&PUSH 1)                   ; N
68    (CONST&PUSH 11)                     ; 3
69    (CALL&PUSH 3 13)                    ; ADD*
72    (CONST&PUSH 10)                     ; 2
73    (CALL2&PUSH 12)                     ; DIV
75    (LIST&PUSH 2)
77    (CONST&PUSH 14)                     ; -4
78    (CONST&PUSH 7)                      ; -1
79    (CALL2&PUSH 5)                      ; POWER
81    (GETVALUE&PUSH 2)                   ; Z
83    (GETVALUE&PUSH 2)                   ; Z
85    (CALL&PUSH 3 8)                     ; MUL*
88    (LIST&PUSH 5)
90    (LIST 2)
92    (UNBIND 3)
94    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LT-LTP (FLG REST ARG ...) ...)-168|
(CONST 0) = LT-LTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LT-LTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LT-LTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LT-LTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LT-LTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LT-LTP
8     (SKIP&RET 1)


Disassembly of function LT-LTP
(CONST 0) = ARG
(CONST 1) = L
(CONST 2) = ZERP
(CONST 3) = ONERF
(CONST 4) = ONEKELLIPTIC
(CONST 5) = ONEE
(CONST 6) = ONEPJAC
(CONST 7) = D
(CONST 8) = S
(CONST 9) = HS
(CONST 10) = LS
(CONST 11) = ONEM
(CONST 12) = ONEQ
(CONST 13) = GAMMAGREEK
(CONST 14) = ASIN
(CONST 15) = ATAN
(CONST 16) = HYP-ONEP
(CONST 17) = ONELOG
(CONST 18) = LIST
(CONST 19) = -1
(CONST 20) = POWER
(CONST 21) = SIMPLIFYA
(CONST 22) = CHECKSIGNTM
(CONST 23) = $NEGATIVE
(CONST 24) = MUL
(CONST 25) = MUL*
(CONST 26) = MAXIMA-INTEGERP
(CONST 27) = F+C
(CONST 28) = C
(CONST 29) = CDRAS
(CONST 30) = F
(CONST 31) = 2
(CONST 32) = $ZERO
(CONST 33) = PROP4-TO-BE-APPLIED
(CONST 34) = ONEY
(CONST 35) = LTY
(CONST 36) = REF
(CONST 37) = $FACTOR
(CONST 38) = D*X^M*%E^A*X
(CONST 39) = %$ETEST
(CONST 40) = OTHER-CA-LATER
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
writes special variables : (L ARG)
187 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (PUSH-NIL 4)
5     (NIL)
6     (BIND 1)                            ; L
8     (NIL&PUSH)
9     (LOAD&PUSH 12)
10    (CALL1&JMPIF 2 L125)                ; ZERP
14    (LOAD&PUSH 15)
15    (JMPIFEQTO 3 L125)                  ; ONERF
19    (LOAD&PUSH 15)
20    (JMPIFEQTO 4 L125)                  ; ONEKELLIPTIC
24    (LOAD&PUSH 15)
25    (JMPIFEQTO 5 L125)                  ; ONEE
29    (LOAD&PUSH 15)
30    (JMPIFEQTO 6 L125)                  ; ONEPJAC
34    (LOAD&PUSH 15)
35    (JMPIFEQTO 7 L125)                  ; D
39    (LOAD&PUSH 15)
40    (JMPIFEQTO 8 L125)                  ; S
44    (LOAD&PUSH 15)
45    (JMPIFEQTO 9 L125)                  ; HS
49    (LOAD&PUSH 15)
50    (JMPIFEQTO 10 L125)                 ; LS
54    (LOAD&PUSH 15)
55    (JMPIFEQTO 11 L125)                 ; ONEM
59    (LOAD&PUSH 15)
60    (JMPIFEQTO 12 L125)                 ; ONEQ
63    (LOAD&PUSH 15)
64    (JMPIFEQTO 13 L125)                 ; GAMMAGREEK
67    (LOAD&PUSH 15)
68    (JMPIFEQTO 14 L125)                 ; ASIN
71    (LOAD&PUSH 15)
72    (JMPIFEQTO 15 L125)                 ; ATAN
75    (LOAD&PUSH 15)
76    (JMPIFEQTO 16 L159)                 ; HYP-ONEP
80    (LOAD&PUSH 15)
81    (JMPIFEQTO 17 L159)                 ; ONELOG
85    (LOAD 12)
86    (JMPIFATOM L94)
88    (LOAD&CAR&PUSH 12)
90    (JMPIFEQTO 18 L195)                 ; LIST
94    L94
94    (LOAD&PUSH 12)
95    (CONST&PUSH 19)                     ; -1
96    (CALL2&PUSH 20)                     ; POWER
98    (NIL&PUSH)
99    (CALL2&PUSH 21)                     ; SIMPLIFYA
101   (CALL1&PUSH 22)                     ; CHECKSIGNTM
103   (JMPIFNOTEQTO 23 L125)              ; $NEGATIVE
106   (LOAD&PUSH 12)
107   (CALL1&JMPIFNOT 26 L125)            ; MAXIMA-INTEGERP
110   (CONST&PUSH 19)                     ; -1
111   (LOAD&PUSH 13)
112   (CALL2 24)                          ; MUL
114   (STORE 12)
116   (CONST&PUSH 19)                     ; -1
117   (LOAD&PUSH 13)
118   (CALL2&PUSH 20)                     ; POWER
120   (LOAD&PUSH 15)
121   (CALL2 24)                          ; MUL
123   (STORE 14)
125   L125
125   (GETVALUE&PUSH 0)                   ; ARG
127   (CALL1 27)                          ; F+C
129   (STORE 5)
130   (CONST&PUSH 28)                     ; C
131   (LOAD&PUSH 6)
132   (CALL2 29)                          ; CDRAS
134   (STORE 4)
135   (CONST&PUSH 30)                     ; F
137   (LOAD&PUSH 6)
138   (CALL2 29)                          ; CDRAS
140   (SETVALUE 0)                        ; ARG
142   (LOAD&JMPIFNOT 4 L159)
145   (LOAD&PUSH 4)
146   (CONST&PUSH 31)                     ; 2
148   (CALL2&PUSH 20)                     ; POWER
150   (NIL&PUSH)
151   (CALL2&PUSH 21)                     ; SIMPLIFYA
153   (CALL1&PUSH 22)                     ; CHECKSIGNTM
155   (JMPIFNOTEQTO 32 L282)              ; $ZERO
159   L159
159   (LOAD&PUSH 15)
160   (JMPIFEQTO 34 L287)                 ; ONEY
164   (LOAD&PUSH 14)
165   (LOAD&PUSH 16)
166   (LOAD&PUSH 14)
167   (GETVALUE&PUSH 0)                   ; ARG
169   (CALL 3 36)                         ; REF
172   (STORE 1)
173   (CAR&PUSH)
174   (CALL2&PUSH 25)                     ; MUL*
176   (CALL1&PUSH 37)                     ; $FACTOR
178   (CALL1 38)                          ; D*X^M*%E^A*X
180   (SETVALUE 1)                        ; L
182   (JMPIF L296)
185   (CONST 40)                          ; OTHER-CA-LATER
187   L187
187   (SKIP 1)
189   (UNBIND1)
190   (SKIP 4)
192   L192
192   (UNBIND1)
193   (SKIP&RET 5)
195   L195
195   (LOAD 12)
196   (CDR)
197   (CAR)
198   (STORE 7)
199   (PUSH)
200   (CALL1&JMPIF 2 L233)                ; ZERP
203   (LOAD 12)
204   (CDR)
205   (CAR)
206   (STORE 7)
207   (PUSH)
208   (CONST&PUSH 19)                     ; -1
209   (CALL2&PUSH 20)                     ; POWER
211   (NIL&PUSH)
212   (CALL2&PUSH 21)                     ; SIMPLIFYA
214   (CALL1&PUSH 22)                     ; CHECKSIGNTM
216   (JMPIFNOTEQTO 23 L233)              ; $NEGATIVE
219   (CONST&PUSH 19)                     ; -1
220   (LOAD&PUSH 8)
221   (CALL2 24)                          ; MUL
223   (STORE 7)
224   (CONST&PUSH 19)                     ; -1
225   (LOAD&PUSH 8)
226   (CALL2&PUSH 20)                     ; POWER
228   (LOAD&PUSH 15)
229   (CALL2 25)                          ; MUL*
231   (STORE 14)
233   L233
233   (LOAD 12)
234   (CDR)
235   (CDR)
236   (CAR)
237   (STORE 6)
238   (PUSH)
239   (CALL1&JMPIF 2 L273)                ; ZERP
242   (LOAD 12)
243   (CDR)
244   (CDR)
245   (CAR)
246   (STORE 6)
247   (PUSH)
248   (CONST&PUSH 19)                     ; -1
249   (CALL2&PUSH 20)                     ; POWER
251   (NIL&PUSH)
252   (CALL2&PUSH 21)                     ; SIMPLIFYA
254   (CALL1&PUSH 22)                     ; CHECKSIGNTM
256   (JMPIFNOTEQTO 23 L273)              ; $NEGATIVE
259   (CONST&PUSH 19)                     ; -1
260   (LOAD&PUSH 7)
261   (CALL2 24)                          ; MUL
263   (STORE 6)
264   (CONST&PUSH 19)                     ; -1
265   (LOAD&PUSH 7)
266   (CALL2&PUSH 20)                     ; POWER
268   (LOAD&PUSH 15)
269   (CALL2 25)                          ; MUL*
271   (STORE 14)
273   L273
273   (LOAD&PUSH 7)
274   (LOAD&PUSH 7)
275   (LIST 2)
277   (STORE 12)
279   (JMP L125)
282   L282
282   (CONST 33)                          ; PROP4-TO-BE-APPLIED
284   (JMP L187)
287   L287
287   (LOAD&PUSH 14)
288   (GETVALUE&PUSH 0)                   ; ARG
290   (LOAD&PUSH 14)
291   (CALL 3 35)                         ; LTY
294   (JMP L300)
296   L296
296   (PUSH)
297   (LOAD&PUSH 1)
298   (CALL2 39)                          ; %$ETEST
300   L300
300   (SKIP 1)
302   (UNBIND1)
303   (SKIP 4)
305   (JMP L192)


Disassembly of function #:|(DEFUN LTY (REST ARG INDEX) ...)-169|
(CONST 0) = LTY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LTY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LTY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LTY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LTY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LTY
8     (SKIP&RET 1)


Disassembly of function LTY
(CONST 0) = ARG
(CONST 1) = L
(CONST 2) = D*X^M*%E^A*X
(CONST 3) = EXECFY
(CONST 4) = FAIL-IN-LTY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
writes special variable : (L)
20 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; ARG
3     (NIL)
4     (BIND 1)                            ; L
6     (LOAD&PUSH 9)
7     (CALL1 2)                           ; D*X^M*%E^A*X
9     (SETVALUE 1)                        ; L
11    (JMPIF L18)
13    (CONST 4)                           ; FAIL-IN-LTY
14    (UNBIND1)
15    L15
15    (UNBIND1)
16    (SKIP&RET 4)
18    L18
18    (PUSH)
19    (GETVALUE&PUSH 0)                   ; ARG
21    (LOAD&PUSH 9)
22    (CALL 3 3)                          ; EXECFY
25    (UNBIND1)
26    (JMP L15)


Disassembly of function #:|(DEFUN %$ETEST (L L1) ...)-170|
(CONST 0) = %$ETEST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE %$ETEST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; %$ETEST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; %$ETEST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE %$ETEST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; %$ETEST
8     (SKIP&RET 1)


Disassembly of function %$ETEST
(CONST 0) = L
(CONST 1) = A
(CONST 2) = Q
(CONST 3) = CDRAS
(CONST 4) = 1
(CONST 5) = 0
(CONST 6) = PAR
(CONST 7) = SUB
(CONST 8) = EXECF19
(CONST 9) = SUBSTL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A PAR L)
writes special variables : (A Q)
33 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; A
6     (NIL)
7     (BIND 2)                            ; Q
9     (CONST&PUSH 2)                      ; Q
10    (GETVALUE&PUSH 0)                   ; L
12    (CALL2 3)                           ; CDRAS
14    (SETVALUE 2)                        ; Q
16    (PUSH)
17    (JMPIFEQTO 4 L49)                   ; 1
20    (CONST&PUSH 1)                      ; A
21    (GETVALUE&PUSH 0)                   ; L
23    (CALL2 3)                           ; CDRAS
25    (SETVALUE 1)                        ; A
27    L27
27    (GETVALUE&PUSH 6)                   ; PAR
29    (GETVALUE&PUSH 1)                   ; A
31    (CALL2&PUSH 7)                      ; SUB
33    (GETVALUE&PUSH 6)                   ; PAR
35    (GETVALUE&PUSH 0)                   ; L
37    (LOAD 13)
38    (CDR)
39    (CAR&PUSH)
40    (CALL2&PUSH 8)                      ; EXECF19
42    (CALL 3 9)                          ; SUBSTL
45    (UNBIND 3)
47    (SKIP&RET 3)
49    L49
49    (CONST 5)                           ; 0
50    (SETVALUE 1)                        ; A
52    (JMP L27)


Disassembly of function #:|(DEFUN REF (FLG INDEX ARG) ...)-171|
(CONST 0) = REF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE REF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; REF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; REF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE REF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; REF
8     (SKIP&RET 1)


Disassembly of function REF
(CONST 0) = ARG
(CONST 1) = ONEJ
(CONST 2) = J1TF
(CONST 3) = TWOJ
(CONST 4) = J2TF
(CONST 5) = HS
(CONST 6) = HSTF
(CONST 7) = HL
(CONST 8) = LSTF
(CONST 9) = S
(CONST 10) = STF
(CONST 11) = ONERF
(CONST 12) = ERFTF
(CONST 13) = ONELOG
(CONST 14) = LOGTF
(CONST 15) = ONEKELLIPTIC
(CONST 16) = KELLIPTICTF
(CONST 17) = ONEE
(CONST 18) = ETF
(CONST 19) = ONEM
(CONST 20) = MTF
(CONST 21) = HYP-ONEP
(CONST 22) = PTF
(CONST 23) = ONEQ
(CONST 24) = QTF
(CONST 25) = GAMMAGREEK
(CONST 26) = GAMMAGREEKTF
(CONST 27) = ONEPJAC
(CONST 28) = PJACTF
(CONST 29) = ASIN
(CONST 30) = ASINTF
(CONST 31) = ATAN
(CONST 32) = ATANTF
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
134 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (LOAD&PUSH 6)
4     (JMPIFEQTO 1 L87)                   ; ONEJ
8     (LOAD&PUSH 6)
9     (JMPIFEQTO 3 L94)                   ; TWOJ
13    (LOAD&PUSH 6)
14    (JMPIFEQTO 5 L106)                  ; HS
18    (LOAD&PUSH 6)
19    (JMPIFEQTO 7 L113)                  ; HL
23    (LOAD&PUSH 6)
24    (JMPIFEQTO 9 L120)                  ; S
28    (LOAD&PUSH 6)
29    (JMPIFEQTO 11 L132)                 ; ONERF
33    (LOAD&PUSH 6)
34    (JMPIFEQTO 13 L138)                 ; ONELOG
38    (LOAD&PUSH 6)
39    (JMPIFEQTO 15 L144)                 ; ONEKELLIPTIC
43    (LOAD&PUSH 6)
44    (JMPIFEQTO 17 L151)                 ; ONEE
48    (LOAD&PUSH 6)
49    (JMPIFEQTO 19 L158)                 ; ONEM
53    (LOAD&PUSH 6)
54    (JMPIFEQTO 21 L171)                 ; HYP-ONEP
58    (LOAD&PUSH 6)
59    (JMPIFEQTO 23 L184)                 ; ONEQ
63    (LOAD&PUSH 6)
64    (JMPIFEQTO 25 L197)                 ; GAMMAGREEK
68    (LOAD&PUSH 6)
69    (JMPIFEQTO 27 L205)                 ; ONEPJAC
73    (LOAD&PUSH 6)
74    (JMPIFEQTO 29 L222)                 ; ASIN
78    (LOAD&PUSH 6)
79    (JMPIFEQTO 31 L229)                 ; ATAN
83    (NIL)
84    L84
84    (UNBIND1)
85    (SKIP&RET 4)
87    L87
87    (LOAD&PUSH 5)
88    (GETVALUE&PUSH 0)                   ; ARG
90    (CALL2 2)                           ; J1TF
92    (JMP L84)
94    L94
94    (LOAD&CAR&PUSH 5)
96    (LOAD 6)
97    (CDR)
98    (CAR&PUSH)
99    (GETVALUE&PUSH 0)                   ; ARG
101   (CALL 3 4)                          ; J2TF
104   (JMP L84)
106   L106
106   (LOAD&PUSH 5)
107   (GETVALUE&PUSH 0)                   ; ARG
109   (CALL2 6)                           ; HSTF
111   (JMP L84)
113   L113
113   (LOAD&PUSH 5)
114   (GETVALUE&PUSH 0)                   ; ARG
116   (CALL2 8)                           ; LSTF
118   (JMP L84)
120   L120
120   (LOAD&CAR&PUSH 5)
122   (LOAD 6)
123   (CDR)
124   (CAR&PUSH)
125   (GETVALUE&PUSH 0)                   ; ARG
127   (CALL 3 10)                         ; STF
130   (JMP L84)
132   L132
132   (GETVALUE&PUSH 0)                   ; ARG
134   (CALL1 12)                          ; ERFTF
136   (JMP L84)
138   L138
138   (GETVALUE&PUSH 0)                   ; ARG
140   (CALL1 14)                          ; LOGTF
142   (JMP L84)
144   L144
144   (GETVALUE&PUSH 0)                   ; ARG
146   (CALL1 16)                          ; KELLIPTICTF
148   (JMP L84)
151   L151
151   (GETVALUE&PUSH 0)                   ; ARG
153   (CALL1 18)                          ; ETF
155   (JMP L84)
158   L158
158   (LOAD&CAR&PUSH 5)
160   (LOAD 6)
161   (CDR)
162   (CAR&PUSH)
163   (GETVALUE&PUSH 0)                   ; ARG
165   (CALL 3 20)                         ; MTF
168   (JMP L84)
171   L171
171   (LOAD&CAR&PUSH 5)
173   (LOAD 6)
174   (CDR)
175   (CAR&PUSH)
176   (GETVALUE&PUSH 0)                   ; ARG
178   (CALL 3 22)                         ; PTF
181   (JMP L84)
184   L184
184   (LOAD&CAR&PUSH 5)
186   (LOAD 6)
187   (CDR)
188   (CAR&PUSH)
189   (GETVALUE&PUSH 0)                   ; ARG
191   (CALL 3 24)                         ; QTF
194   (JMP L84)
197   L197
197   (LOAD&PUSH 5)
198   (GETVALUE&PUSH 0)                   ; ARG
200   (CALL2 26)                          ; GAMMAGREEKTF
202   (JMP L84)
205   L205
205   (LOAD&CAR&PUSH 5)
207   (LOAD 6)
208   (CDR)
209   (CAR&PUSH)
210   (LOAD 7)
211   (CDR)
212   (CDR)
213   (CAR&PUSH)
214   (GETVALUE&PUSH 0)                   ; ARG
216   (CALL 4 28)                         ; PJACTF
219   (JMP L84)
222   L222
222   (GETVALUE&PUSH 0)                   ; ARG
224   (CALL1 30)                          ; ASINTF
226   (JMP L84)
229   L229
229   (GETVALUE&PUSH 0)                   ; ARG
231   (CALL1 32)                          ; ATANTF
233   (JMP L84)


Disassembly of function #:|(DEFUN MTF (I1 I2 ARG) ...)-172|
(CONST 0) = MTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MTF
8     (SKIP&RET 1)


Disassembly of function MTF
(CONST 0) = ARG
(CONST 1) = ((RAT SIMP) 1 2)
(CONST 2) = ADD
(CONST 3) = POWER
(CONST 4) = $%E
(CONST 5) = -2
(CONST 6) = DIV
(CONST 7) = MUL
(CONST 8) = FPQ
(CONST 9) = 1
(CONST 10) = -1
(CONST 11) = ADD*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (GETVALUE&PUSH 0)                   ; ARG
5     (LOAD&PUSH 6)
6     (CONST&PUSH 1)                      ; ((RAT SIMP) 1 2)
7     (CALL2&PUSH 2)                      ; ADD
9     (CALL2&PUSH 3)                      ; POWER
11    (CONST&PUSH 4)                      ; $%E
12    (GETVALUE&PUSH 0)                   ; ARG
14    (CONST&PUSH 5)                      ; -2
15    (CALL2&PUSH 6)                      ; DIV
17    (CALL2&PUSH 3)                      ; POWER
19    (CALL2&PUSH 7)                      ; MUL
21    (CONST&PUSH 8)                      ; FPQ
22    (CONST&PUSH 9)                      ; 1
23    (CONST&PUSH 9)                      ; 1
24    (LIST&PUSH 2)
26    (CONST&PUSH 1)                      ; ((RAT SIMP) 1 2)
27    (LOAD&PUSH 9)
28    (CONST&PUSH 10)                     ; -1
29    (LOAD&PUSH 12)
30    (CALL2&PUSH 7)                      ; MUL
32    (CALL&PUSH 3 11)                    ; ADD*
35    (LIST&PUSH 1)
37    (LOAD&PUSH 9)
38    (LOAD&PUSH 10)
39    (CONST&PUSH 9)                      ; 1
40    (CALL&PUSH 3 11)                    ; ADD*
43    (LIST&PUSH 1)
45    (GETVALUE&PUSH 0)                   ; ARG
47    (LIST&PUSH 5)
49    (LIST 2)
51    (UNBIND1)
52    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PJACTF (N A B ...) ...)-173|
(CONST 0) = PJACTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PJACTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PJACTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PJACTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PJACTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PJACTF
8     (SKIP&RET 1)


Disassembly of function PJACTF
(CONST 0) = N
(CONST 1) = A
(CONST 2) = B
(CONST 3) = X
(CONST 4) = 1
(CONST 5) = ADD
(CONST 6) = GM
(CONST 7) = -1
(CONST 8) = POWER
(CONST 9) = FACTORIAL
(CONST 10) = MUL*
(CONST 11) = FPQ
(CONST 12) = 2
(CONST 13) = MUL
(CONST 14) = ADD*
(CONST 15) = ((RAT SIMP) 1 2)
(CONST 16) = DIV
(CONST 17) = SUB
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X B A N)
50 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; N
3     (LOAD 6)
4     (BIND 1)                            ; A
6     (LOAD 8)
7     (BIND 2)                            ; B
9     (LOAD 10)
10    (BIND 3)                            ; X
12    (GETVALUE&PUSH 0)                   ; N
14    (GETVALUE&PUSH 1)                   ; A
16    (CONST&PUSH 4)                      ; 1
17    (CALL&PUSH 3 5)                     ; ADD
20    (CALL1&PUSH 6)                      ; GM
22    (GETVALUE&PUSH 1)                   ; A
24    (CONST&PUSH 4)                      ; 1
25    (CALL2&PUSH 5)                      ; ADD
27    (CALL1&PUSH 6)                      ; GM
29    (CONST&PUSH 7)                      ; -1
30    (CALL2&PUSH 8)                      ; POWER
32    (GETVALUE&PUSH 0)                   ; N
34    (CALL1&PUSH 9)                      ; FACTORIAL
36    (CONST&PUSH 7)                      ; -1
37    (CALL2&PUSH 8)                      ; POWER
39    (CALL&PUSH 3 10)                    ; MUL*
42    (CONST&PUSH 11)                     ; FPQ
43    (CONST&PUSH 12)                     ; 2
44    (CONST&PUSH 4)                      ; 1
45    (LIST&PUSH 2)
47    (CONST&PUSH 7)                      ; -1
48    (GETVALUE&PUSH 0)                   ; N
50    (CALL2&PUSH 13)                     ; MUL
52    (GETVALUE&PUSH 0)                   ; N
54    (GETVALUE&PUSH 1)                   ; A
56    (GETVALUE&PUSH 2)                   ; B
58    (CONST&PUSH 4)                      ; 1
59    (CALL&PUSH 4 14)                    ; ADD*
62    (LIST&PUSH 2)
64    (GETVALUE&PUSH 1)                   ; A
66    (CONST&PUSH 4)                      ; 1
67    (CALL2&PUSH 5)                      ; ADD
69    (LIST&PUSH 1)
71    (CONST&PUSH 15)                     ; ((RAT SIMP) 1 2)
72    (GETVALUE&PUSH 3)                   ; X
74    (CONST&PUSH 12)                     ; 2
75    (CALL2&PUSH 16)                     ; DIV
77    (CALL2&PUSH 17)                     ; SUB
79    (LIST&PUSH 5)
81    (LIST 2)
83    (UNBIND 4)
85    (SKIP&RET 5)


Disassembly of function #:|(DEFUN ASINTF (ARG) ...)-174|
(CONST 0) = ASINTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASINTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASINTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASINTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASINTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASINTF
8     (SKIP&RET 1)


Disassembly of function ASINTF
(CONST 0) = ARG
(CONST 1) = FPQ
(CONST 2) = 2
(CONST 3) = 1
(CONST 4) = ((RAT SIMP) 1 2)
(CONST 5) = 3
(CONST 6) = DIV
(CONST 7) = MUL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (GETVALUE&PUSH 0)                   ; ARG
5     (CONST&PUSH 1)                      ; FPQ
6     (CONST&PUSH 2)                      ; 2
7     (CONST&PUSH 3)                      ; 1
8     (LIST&PUSH 2)
10    (CONST&PUSH 4)                      ; ((RAT SIMP) 1 2)
11    (CONST&PUSH 4)                      ; ((RAT SIMP) 1 2)
12    (LIST&PUSH 2)
14    (CONST&PUSH 5)                      ; 3
15    (CONST&PUSH 2)                      ; 2
16    (CALL2&PUSH 6)                      ; DIV
18    (LIST&PUSH 1)
20    (GETVALUE&PUSH 0)                   ; ARG
22    (GETVALUE&PUSH 0)                   ; ARG
24    (CALL2&PUSH 7)                      ; MUL
26    (LIST&PUSH 5)
28    (LIST 2)
30    (UNBIND1)
31    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ATANTF (ARG) ...)-175|
(CONST 0) = ATANTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATANTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATANTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATANTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATANTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATANTF
8     (SKIP&RET 1)


Disassembly of function ATANTF
(CONST 0) = ARG
(CONST 1) = FPQ
(CONST 2) = 2
(CONST 3) = 1
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = 3
(CONST 7) = DIV
(CONST 8) = MUL*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (GETVALUE&PUSH 0)                   ; ARG
5     (CONST&PUSH 1)                      ; FPQ
6     (CONST&PUSH 2)                      ; 2
7     (CONST&PUSH 3)                      ; 1
8     (LIST&PUSH 2)
10    (CONST&PUSH 2)                      ; 2
11    (CONST&PUSH 4)                      ; -1
12    (CALL2&PUSH 5)                      ; POWER
14    (CONST&PUSH 3)                      ; 1
15    (LIST&PUSH 2)
17    (CONST&PUSH 6)                      ; 3
18    (CONST&PUSH 2)                      ; 2
19    (CALL2&PUSH 7)                      ; DIV
21    (LIST&PUSH 1)
23    (CONST&PUSH 4)                      ; -1
24    (GETVALUE&PUSH 0)                   ; ARG
26    (GETVALUE&PUSH 0)                   ; ARG
28    (CALL&PUSH 3 8)                     ; MUL*
31    (LIST&PUSH 5)
33    (LIST 2)
35    (UNBIND1)
36    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PTF (N M Z) ...)-176|
(CONST 0) = PTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PTF
8     (SKIP&RET 1)


Disassembly of function PTF
(CONST 0) = N
(CONST 1) = M
(CONST 2) = Z
(CONST 3) = 1
(CONST 4) = SUB
(CONST 5) = GM
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = ADD
(CONST 9) = DIV
(CONST 10) = 2
(CONST 11) = MUL
(CONST 12) = FPQ
(CONST 13) = ((RAT SIMP) 1 2)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N Z M)
48 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (CONST&PUSH 3)                      ; 1
10    (GETVALUE&PUSH 1)                   ; M
12    (CALL2&PUSH 4)                      ; SUB
14    (CALL1&PUSH 5)                      ; GM
16    (CONST&PUSH 6)                      ; -1
17    (CALL2&PUSH 7)                      ; POWER
19    (GETVALUE&PUSH 2)                   ; Z
21    (CONST&PUSH 3)                      ; 1
22    (CALL2&PUSH 8)                      ; ADD
24    (GETVALUE&PUSH 2)                   ; Z
26    (CONST&PUSH 3)                      ; 1
27    (CALL2&PUSH 4)                      ; SUB
29    (CALL2&PUSH 9)                      ; DIV
31    (GETVALUE&PUSH 1)                   ; M
33    (CONST&PUSH 10)                     ; 2
34    (CALL2&PUSH 9)                      ; DIV
36    (CALL2&PUSH 7)                      ; POWER
38    (CALL2&PUSH 11)                     ; MUL
40    (CONST&PUSH 12)                     ; FPQ
41    (CONST&PUSH 10)                     ; 2
42    (CONST&PUSH 3)                      ; 1
43    (LIST&PUSH 2)
45    (CONST&PUSH 6)                      ; -1
46    (GETVALUE&PUSH 0)                   ; N
48    (CALL2&PUSH 11)                     ; MUL
50    (GETVALUE&PUSH 0)                   ; N
52    (CONST&PUSH 3)                      ; 1
53    (CALL2&PUSH 8)                      ; ADD
55    (LIST&PUSH 2)
57    (CONST&PUSH 3)                      ; 1
58    (GETVALUE&PUSH 1)                   ; M
60    (CALL2&PUSH 4)                      ; SUB
62    (LIST&PUSH 1)
64    (CONST&PUSH 13)                     ; ((RAT SIMP) 1 2)
65    (GETVALUE&PUSH 2)                   ; Z
67    (CONST&PUSH 10)                     ; 2
68    (CALL2&PUSH 9)                      ; DIV
70    (CALL2&PUSH 4)                      ; SUB
72    (LIST&PUSH 5)
74    (LIST 2)
76    (UNBIND 3)
78    (SKIP&RET 4)


Disassembly of function #:|(DEFUN QTF (N M Z) ...)-177|
(CONST 0) = QTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE QTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; QTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; QTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE QTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; QTF
8     (SKIP&RET 1)


Disassembly of function QTF
(CONST 0) = N
(CONST 1) = M
(CONST 2) = Z
(CONST 3) = $%E
(CONST 4) = $%PI
(CONST 5) = $%I
(CONST 6) = MUL*
(CONST 7) = POWER
(CONST 8) = ((RAT SIMP) 1 2)
(CONST 9) = 1
(CONST 10) = ADD*
(CONST 11) = GM
(CONST 12) = 2
(CONST 13) = -1
(CONST 14) = SUB
(CONST 15) = 3
(CONST 16) = DIV
(CONST 17) = ADD
(CONST 18) = MUL
(CONST 19) = FPQ
(CONST 20) = -2
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z N M)
81 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (CONST&PUSH 3)                      ; $%E
10    (GETVALUE&PUSH 1)                   ; M
12    (CONST&PUSH 4)                      ; $%PI
13    (CONST&PUSH 5)                      ; $%I
14    (CALL&PUSH 3 6)                     ; MUL*
17    (CALL2&PUSH 7)                      ; POWER
19    (CONST&PUSH 4)                      ; $%PI
20    (CONST&PUSH 8)                      ; ((RAT SIMP) 1 2)
21    (CALL2&PUSH 7)                      ; POWER
23    (GETVALUE&PUSH 1)                   ; M
25    (GETVALUE&PUSH 0)                   ; N
27    (CONST&PUSH 9)                      ; 1
28    (CALL&PUSH 3 10)                    ; ADD*
31    (CALL1&PUSH 11)                     ; GM
33    (CONST&PUSH 12)                     ; 2
34    (CONST&PUSH 13)                     ; -1
35    (GETVALUE&PUSH 0)                   ; N
37    (CALL2&PUSH 14)                     ; SUB
39    (CALL2&PUSH 7)                      ; POWER
41    (GETVALUE&PUSH 0)                   ; N
43    (CONST&PUSH 15)                     ; 3
44    (CONST&PUSH 12)                     ; 2
45    (CALL2&PUSH 16)                     ; DIV
47    (CALL2&PUSH 17)                     ; ADD
49    (CALL1&PUSH 11)                     ; GM
51    (CONST&PUSH 13)                     ; -1
52    (CALL2&PUSH 7)                      ; POWER
54    (GETVALUE&PUSH 2)                   ; Z
56    (CONST&PUSH 13)                     ; -1
57    (GETVALUE&PUSH 1)                   ; M
59    (GETVALUE&PUSH 0)                   ; N
61    (CONST&PUSH 9)                      ; 1
62    (CALL&PUSH 3 10)                    ; ADD*
65    (CALL2&PUSH 18)                     ; MUL
67    (CALL2&PUSH 7)                      ; POWER
69    (GETVALUE&PUSH 2)                   ; Z
71    (GETVALUE&PUSH 2)                   ; Z
73    (CALL2&PUSH 18)                     ; MUL
75    (CONST&PUSH 9)                      ; 1
76    (CALL2&PUSH 14)                     ; SUB
78    (GETVALUE&PUSH 1)                   ; M
80    (CONST&PUSH 12)                     ; 2
81    (CALL2&PUSH 16)                     ; DIV
83    (CALL2&PUSH 7)                      ; POWER
85    (CALL&PUSH 7 6)                     ; MUL*
88    (CONST&PUSH 19)                     ; FPQ
89    (CONST&PUSH 12)                     ; 2
90    (CONST&PUSH 9)                      ; 1
91    (LIST&PUSH 2)
93    (GETVALUE&PUSH 1)                   ; M
95    (GETVALUE&PUSH 0)                   ; N
97    (CONST&PUSH 9)                      ; 1
98    (CALL&PUSH 3 10)                    ; ADD*
101   (CONST&PUSH 12)                     ; 2
102   (CALL2&PUSH 16)                     ; DIV
104   (GETVALUE&PUSH 1)                   ; M
106   (GETVALUE&PUSH 0)                   ; N
108   (CONST&PUSH 12)                     ; 2
109   (CALL&PUSH 3 10)                    ; ADD*
112   (CONST&PUSH 12)                     ; 2
113   (CALL2&PUSH 16)                     ; DIV
115   (LIST&PUSH 2)
117   (GETVALUE&PUSH 0)                   ; N
119   (CONST&PUSH 15)                     ; 3
120   (CONST&PUSH 12)                     ; 2
121   (CALL2&PUSH 16)                     ; DIV
123   (CALL2&PUSH 17)                     ; ADD
125   (LIST&PUSH 1)
127   (GETVALUE&PUSH 2)                   ; Z
129   (CONST&PUSH 20)                     ; -2
130   (CALL2&PUSH 7)                      ; POWER
132   (LIST&PUSH 5)
134   (LIST 2)
136   (UNBIND 3)
138   (SKIP&RET 4)


Disassembly of function #:|(DEFUN GAMMAGREEKTF (A X) ...)-178|
(CONST 0) = GAMMAGREEKTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GAMMAGREEKTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GAMMAGREEKTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GAMMAGREEKTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GAMMAGREEKTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GAMMAGREEKTF
8     (SKIP&RET 1)


Disassembly of function GAMMAGREEKTF
(CONST 0) = A
(CONST 1) = X
(CONST 2) = -1
(CONST 3) = POWER
(CONST 4) = MUL
(CONST 5) = FPQ
(CONST 6) = 1
(CONST 7) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X A)
28 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; A
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (GETVALUE&PUSH 0)                   ; A
8     (CONST&PUSH 2)                      ; -1
9     (CALL2&PUSH 3)                      ; POWER
11    (GETVALUE&PUSH 1)                   ; X
13    (GETVALUE&PUSH 0)                   ; A
15    (CALL2&PUSH 3)                      ; POWER
17    (CALL2&PUSH 4)                      ; MUL
19    (CONST&PUSH 5)                      ; FPQ
20    (CONST&PUSH 6)                      ; 1
21    (CONST&PUSH 6)                      ; 1
22    (LIST&PUSH 2)
24    (GETVALUE&PUSH 0)                   ; A
26    (LIST&PUSH 1)
28    (GETVALUE&PUSH 0)                   ; A
30    (CONST&PUSH 6)                      ; 1
31    (CALL2&PUSH 7)                      ; ADD
33    (LIST&PUSH 1)
35    (CONST&PUSH 2)                      ; -1
36    (GETVALUE&PUSH 1)                   ; X
38    (CALL2&PUSH 4)                      ; MUL
40    (LIST&PUSH 5)
42    (LIST 2)
44    (UNBIND 2)
46    (SKIP&RET 3)


Disassembly of function #:|(DEFUN KELLIPTICTF (K) ...)-179|
(CONST 0) = KELLIPTICTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KELLIPTICTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KELLIPTICTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KELLIPTICTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KELLIPTICTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KELLIPTICTF
8     (SKIP&RET 1)


Disassembly of function KELLIPTICTF
(CONST 0) = K
(CONST 1) = ((RAT SIMP) 1 2)
(CONST 2) = $%PI
(CONST 3) = MUL
(CONST 4) = FPQ
(CONST 5) = 2
(CONST 6) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (K)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; K
3     (CONST&PUSH 1)                      ; ((RAT SIMP) 1 2)
4     (CONST&PUSH 2)                      ; $%PI
5     (CALL2&PUSH 3)                      ; MUL
7     (CONST&PUSH 4)                      ; FPQ
8     (CONST&PUSH 5)                      ; 2
9     (CONST&PUSH 6)                      ; 1
10    (LIST&PUSH 2)
12    (CONST&PUSH 1)                      ; ((RAT SIMP) 1 2)
13    (CONST&PUSH 1)                      ; ((RAT SIMP) 1 2)
14    (LIST&PUSH 2)
16    (CONST&PUSH 6)                      ; 1
17    (LIST&PUSH 1)
19    (GETVALUE&PUSH 0)                   ; K
21    (GETVALUE&PUSH 0)                   ; K
23    (CALL2&PUSH 3)                      ; MUL
25    (LIST&PUSH 5)
27    (LIST 2)
29    (UNBIND1)
30    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ETF (K) ...)-180|
(CONST 0) = ETF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ETF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ETF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ETF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ETF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ETF
8     (SKIP&RET 1)


Disassembly of function ETF
(CONST 0) = K
(CONST 1) = ((RAT SIMP) 1 2)
(CONST 2) = $%PI
(CONST 3) = MUL
(CONST 4) = FPQ
(CONST 5) = 2
(CONST 6) = 1
(CONST 7) = -1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (K)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; K
3     (CONST&PUSH 1)                      ; ((RAT SIMP) 1 2)
4     (CONST&PUSH 2)                      ; $%PI
5     (CALL2&PUSH 3)                      ; MUL
7     (CONST&PUSH 4)                      ; FPQ
8     (CONST&PUSH 5)                      ; 2
9     (CONST&PUSH 6)                      ; 1
10    (LIST&PUSH 2)
12    (CONST&PUSH 7)                      ; -1
13    (CONST&PUSH 1)                      ; ((RAT SIMP) 1 2)
14    (CALL2&PUSH 3)                      ; MUL
16    (CONST&PUSH 1)                      ; ((RAT SIMP) 1 2)
17    (LIST&PUSH 2)
19    (CONST&PUSH 6)                      ; 1
20    (LIST&PUSH 1)
22    (GETVALUE&PUSH 0)                   ; K
24    (GETVALUE&PUSH 0)                   ; K
26    (CALL2&PUSH 3)                      ; MUL
28    (LIST&PUSH 5)
30    (LIST 2)
32    (UNBIND1)
33    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ERFTF (ARG) ...)-181|
(CONST 0) = ERFTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERFTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERFTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERFTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERFTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERFTF
8     (SKIP&RET 1)


Disassembly of function ERFTF
(CONST 0) = ARG
(CONST 1) = 2
(CONST 2) = $%PI
(CONST 3) = -2
(CONST 4) = -1
(CONST 5) = POWER
(CONST 6) = MUL*
(CONST 7) = FPQ
(CONST 8) = 1
(CONST 9) = ((RAT SIMP) 1 2)
(CONST 10) = 3
(CONST 11) = DIV
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; 2
4     (GETVALUE&PUSH 0)                   ; ARG
6     (CONST&PUSH 2)                      ; $%PI
7     (CONST&PUSH 3)                      ; -2
8     (CONST&PUSH 4)                      ; -1
9     (CALL2&PUSH 5)                      ; POWER
11    (CALL2&PUSH 5)                      ; POWER
13    (CALL&PUSH 3 6)                     ; MUL*
16    (CONST&PUSH 7)                      ; FPQ
17    (CONST&PUSH 8)                      ; 1
18    (CONST&PUSH 8)                      ; 1
19    (LIST&PUSH 2)
21    (CONST&PUSH 9)                      ; ((RAT SIMP) 1 2)
22    (LIST&PUSH 1)
24    (CONST&PUSH 10)                     ; 3
25    (CONST&PUSH 1)                      ; 2
26    (CALL2&PUSH 11)                     ; DIV
28    (LIST&PUSH 1)
30    (CONST&PUSH 4)                      ; -1
31    (GETVALUE&PUSH 0)                   ; ARG
33    (GETVALUE&PUSH 0)                   ; ARG
35    (CALL&PUSH 3 6)                     ; MUL*
38    (LIST&PUSH 5)
40    (LIST 2)
42    (UNBIND1)
43    (SKIP&RET 2)


Disassembly of function #:|(DEFUN LOGTF (ARG) ...)-182|
(CONST 0) = LOGTF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOGTF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOGTF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOGTF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOGTF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOGTF
8     (SKIP&RET 1)


Disassembly of function LOGTF
(CONST 0) = ARG
(CONST 1) = 1
(CONST 2) = FPQ
(CONST 3) = 2
(CONST 4) = SUB
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (CONST&PUSH 1)                      ; 1
4     (CONST&PUSH 2)                      ; FPQ
5     (CONST&PUSH 3)                      ; 2
6     (CONST&PUSH 1)                      ; 1
7     (LIST&PUSH 2)
9     (CONST&PUSH 1)                      ; 1
10    (CONST&PUSH 1)                      ; 1
11    (LIST&PUSH 2)
13    (CONST&PUSH 3)                      ; 2
14    (LIST&PUSH 1)
16    (CONST&PUSH 1)                      ; 1
17    (GETVALUE&PUSH 0)                   ; ARG
19    (CALL2&PUSH 4)                      ; SUB
21    (LIST&PUSH 5)
23    (LIST 2)
25    (UNBIND1)
26    (SKIP&RET 2)


Disassembly of function #:|(DEFUN J2TF (N M ARG) ...)-183|
(CONST 0) = J2TF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE J2TF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; J2TF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; J2TF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE J2TF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; J2TF
8     (SKIP&RET 1)


Disassembly of function J2TF
(CONST 0) = N
(CONST 1) = M
(CONST 2) = ARG
(CONST 3) = 1
(CONST 4) = ADD
(CONST 5) = GM
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = 2
(CONST 9) = MUL*
(CONST 10) = FPQ
(CONST 11) = 3
(CONST 12) = ((RAT SIMP) 1 2)
(CONST 13) = DIV
(CONST 14) = ADD*
(CONST 15) = MUL
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARG M N)
72 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 5)
4     (BIND 1)                            ; M
6     (LOAD 7)
7     (BIND 2)                            ; ARG
9     (GETVALUE&PUSH 0)                   ; N
11    (CONST&PUSH 3)                      ; 1
12    (CALL2&PUSH 4)                      ; ADD
14    (CALL1&PUSH 5)                      ; GM
16    (CONST&PUSH 6)                      ; -1
17    (CALL2&PUSH 7)                      ; POWER
19    (GETVALUE&PUSH 1)                   ; M
21    (CONST&PUSH 3)                      ; 1
22    (CALL2&PUSH 4)                      ; ADD
24    (CALL1&PUSH 5)                      ; GM
26    (CONST&PUSH 6)                      ; -1
27    (CALL2&PUSH 7)                      ; POWER
29    (CONST&PUSH 8)                      ; 2
30    (GETVALUE&PUSH 0)                   ; N
32    (GETVALUE&PUSH 1)                   ; M
34    (CALL2&PUSH 4)                      ; ADD
36    (CALL2&PUSH 7)                      ; POWER
38    (CONST&PUSH 6)                      ; -1
39    (CALL2&PUSH 7)                      ; POWER
41    (GETVALUE&PUSH 2)                   ; ARG
43    (GETVALUE&PUSH 0)                   ; N
45    (GETVALUE&PUSH 1)                   ; M
47    (CALL2&PUSH 4)                      ; ADD
49    (CALL2&PUSH 7)                      ; POWER
51    (CALL&PUSH 4 9)                     ; MUL*
54    (CONST&PUSH 10)                     ; FPQ
55    (CONST&PUSH 8)                      ; 2
56    (CONST&PUSH 11)                     ; 3
57    (LIST&PUSH 2)
59    (CONST&PUSH 12)                     ; ((RAT SIMP) 1 2)
60    (GETVALUE&PUSH 0)                   ; N
62    (CONST&PUSH 8)                      ; 2
63    (CALL2&PUSH 13)                     ; DIV
65    (GETVALUE&PUSH 1)                   ; M
67    (CONST&PUSH 8)                      ; 2
68    (CALL2&PUSH 13)                     ; DIV
70    (CALL&PUSH 3 14)                    ; ADD*
73    (CONST&PUSH 3)                      ; 1
74    (GETVALUE&PUSH 0)                   ; N
76    (CONST&PUSH 8)                      ; 2
77    (CALL2&PUSH 13)                     ; DIV
79    (GETVALUE&PUSH 1)                   ; M
81    (CONST&PUSH 8)                      ; 2
82    (CALL2&PUSH 13)                     ; DIV
84    (CALL&PUSH 3 14)                    ; ADD*
87    (LIST&PUSH 2)
89    (CONST&PUSH 3)                      ; 1
90    (GETVALUE&PUSH 0)                   ; N
92    (CALL2&PUSH 4)                      ; ADD
94    (CONST&PUSH 3)                      ; 1
95    (GETVALUE&PUSH 1)                   ; M
97    (CALL2&PUSH 4)                      ; ADD
99    (CONST&PUSH 3)                      ; 1
100   (GETVALUE&PUSH 0)                   ; N
102   (GETVALUE&PUSH 1)                   ; M
104   (CALL&PUSH 3 14)                    ; ADD*
107   (LIST&PUSH 3)
109   (CONST&PUSH 6)                      ; -1
110   (GETVALUE&PUSH 2)                   ; ARG
112   (CONST&PUSH 8)                      ; 2
113   (CALL2&PUSH 7)                      ; POWER
115   (CALL2&PUSH 15)                     ; MUL
117   (LIST&PUSH 5)
119   (LIST 2)
121   (UNBIND 3)
123   (SKIP&RET 4)


Disassembly of function #:|(DEFUN D*X^M*%E^A*X (EXP) ...)-184|
(CONST 0) = D*X^M*%E^A*X
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE D*X^M*%E^A*X>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; D*X^M*%E^A*X
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; D*X^M*%E^A*X
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE D*X^M*%E^A*X>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; D*X^M*%E^A*X
8     (SKIP&RET 1)


Disassembly of function D*X^M*%E^A*X
(CONST 0) = EXP
(CONST 1) = 
((MTIMES) ((COEFFTT) (D FREEVARPAR)) ((MEXPT) (X VARP) (M FREEVARPAR))
 ((MEXPT) (Q EXPOR1P) ((MTIMES) ((COEFFTT) (A FREEVARPAR)) (X VARP))))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MTIMES) (# #) (# # #) (# # #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EXECF19 (L1 L2) ...)-185|
(CONST 0) = EXECF19
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXECF19>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXECF19
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXECF19
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXECF19>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXECF19
8     (SKIP&RET 1)


Disassembly of function EXECF19
(CONST 0) = ANS
(CONST 1) = EXECARGMATCH
(CONST 2) = DIONIMO
(CONST 3) = DIONARGHYP
(CONST 4) = NEXT-FOR-OTHER-ARGS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ANS)
writes special variable : (ANS)
24 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; ANS
3     (LOAD 4)
4     (CDR)
5     (CDR)
6     (CDR)
7     (CDR)
8     (CAR&PUSH)
9     (CALL1 1)                           ; EXECARGMATCH
11    (SETVALUE 0)                        ; ANS
13    (CAR&PUSH)
14    (JMPIFEQTO 2 L21)                   ; DIONIMO
17    (CONST 4)                           ; NEXT-FOR-OTHER-ARGS
18    L18
18    (UNBIND1)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 5)
22    (LOAD&PUSH 5)
23    (GETVALUE 0)                        ; ANS
25    (CDR)
26    (CAR&PUSH)
27    (CALL 3 3)                          ; DIONARGHYP
30    (JMP L18)


Disassembly of function #:|(DEFUN EXECFY (L ARG INDEX) ...)-186|
(CONST 0) = EXECFY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXECFY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXECFY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXECFY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXECFY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXECFY
8     (SKIP&RET 1)


Disassembly of function EXECFY
(CONST 0) = L
(CONST 1) = ARG
(CONST 2) = ANS
(CONST 3) = EXECARGMATCH
(CONST 4) = DIONIMO
(CONST 5) = DIONARGHYP-Y
(CONST 6) = FAIL-IN-EXECFY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ANS L ARG)
writes special variable : (ANS)
25 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; ARG
6     (NIL)
7     (BIND 2)                            ; ANS
9     (GETVALUE&PUSH 1)                   ; ARG
11    (CALL1 3)                           ; EXECARGMATCH
13    (SETVALUE 2)                        ; ANS
15    (CAR&PUSH)
16    (JMPIFEQTO 4 L25)                   ; DIONIMO
19    (CONST 6)                           ; FAIL-IN-EXECFY
20    (UNBIND1)
21    L21
21    (UNBIND 2)
23    (SKIP&RET 4)
25    L25
25    (GETVALUE&PUSH 0)                   ; L
27    (LOAD&PUSH 11)
28    (GETVALUE 2)                        ; ANS
30    (CDR)
31    (CAR&PUSH)
32    (CALL 3 5)                          ; DIONARGHYP-Y
35    (UNBIND1)
36    (JMP L21)


Disassembly of function #:|(DEFUN EXECARGMATCH (ARG) ...)-187|
(CONST 0) = EXECARGMATCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXECARGMATCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXECARGMATCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXECARGMATCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXECARGMATCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXECARGMATCH
8     (SKIP&RET 1)


Disassembly of function EXECARGMATCH
(CONST 0) = ARG
(CONST 1) = $FACTOR
(CONST 2) = A*X^M+C
(CONST 3) = DIONIMO
(CONST 4) = $EXPAND
(CONST 5) = OTHER-CASE-ARGS-TO-FOLLOW
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
29 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; ARG
6     (CALL1&PUSH 1)                      ; $FACTOR
8     (CALL1 2)                           ; A*X^M+C
10    (STORE 0)
11    (JMPIF L31)
13    (GETVALUE&PUSH 0)                   ; ARG
15    (CALL1&PUSH 4)                      ; $EXPAND
17    (CALL1 2)                           ; A*X^M+C
19    (STORE 0)
20    (JMPIFNOT L34)
22    (CONST 3)                           ; DIONIMO
23    L23
23    (PUSH)
24    (LOAD&PUSH 1)
25    (LIST 2)
27    (SKIP 1)
29    (JMP L37)
31    L31
31    (CONST 3)                           ; DIONIMO
32    (JMP L23)
34    L34
34    (CONST 5)                           ; OTHER-CASE-ARGS-TO-FOLLOW
35    (SKIP 1)
37    L37
37    (UNBIND1)
38    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DIONARGHYP (L1 L2 ARG) ...)-188|
(CONST 0) = DIONARGHYP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIONARGHYP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIONARGHYP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIONARGHYP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIONARGHYP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIONARGHYP
8     (SKIP&RET 1)


Disassembly of function DIONARGHYP
(CONST 0) = ARG
(CONST 1) = A
(CONST 2) = M
(CONST 3) = C
(CONST 4) = CDRAS
(CONST 5) = MAXIMA-INTEGERP
(CONST 6) = ZERP
(CONST 7) = F19COND
(CONST 8) = PROP4-AND-AOTHER-CASES-TO-FOLOW
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A C M ARG)
writes special variables : (C M A)
38 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (NIL)
4     (BIND 1)                            ; A
6     (NIL)
7     (BIND 2)                            ; M
9     (NIL)
10    (BIND 3)                            ; C
12    (CONST&PUSH 1)                      ; A
13    (GETVALUE&PUSH 0)                   ; ARG
15    (CALL2 4)                           ; CDRAS
17    (SETVALUE 1)                        ; A
19    (CONST&PUSH 2)                      ; M
20    (GETVALUE&PUSH 0)                   ; ARG
22    (CALL2 4)                           ; CDRAS
24    (SETVALUE 2)                        ; M
26    (CONST&PUSH 3)                      ; C
27    (GETVALUE&PUSH 0)                   ; ARG
29    (CALL2 4)                           ; CDRAS
31    (SETVALUE 3)                        ; C
33    (GETVALUE&PUSH 2)                   ; M
35    (CALL1&JMPIFNOT 5 L43)              ; MAXIMA-INTEGERP
38    (GETVALUE&PUSH 3)                   ; C
40    (CALL1&JMPIF 6 L49)                 ; ZERP
43    L43
43    (CONST 8)                           ; PROP4-AND-AOTHER-CASES-TO-FOLOW
44    (UNBIND 3)
46    L46
46    (UNBIND1)
47    (SKIP&RET 4)
49    L49
49    (GETVALUE&PUSH 1)                   ; A
51    (GETVALUE&PUSH 2)                   ; M
53    (LOAD&PUSH 17)
54    (LOAD&PUSH 17)
55    (CALL 4 7)                          ; F19COND
58    (UNBIND 3)
60    (JMP L46)


Disassembly of function #:|(DEFUN F+C (EXP) ...)-189|
(CONST 0) = F+C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F+C>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F+C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F+C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F+C>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F+C
8     (SKIP&RET 1)


Disassembly of function F+C
(CONST 0) = EXP
(CONST 1) = ((MPLUS) ((COEFFPT) (F HASVAR)) ((COEFFPP) (C FREEVAR)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN A*X^M+C (EXP) ...)-190|
(CONST 0) = A*X^M+C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE A*X^M+C>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; A*X^M+C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; A*X^M+C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE A*X^M+C>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; A*X^M+C
8     (SKIP&RET 1)


Disassembly of function A*X^M+C
(CONST 0) = EXP
(CONST 1) = 
((MPLUS) ((COEFFPT) (A FREEVAR) ((MEXPT) (X VARP) (M FREEVAR0)))
 ((COEFFPP) (C FREEVAR)))
(CONST 2) = M2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CONST&PUSH 1)                      ; ((MPLUS) (# # #) (# #))
6     (NIL&PUSH)
7     (CALL 3 2)                          ; M2
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FREEVAR0 (M) ...)-191|
(CONST 0) = FREEVAR0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FREEVAR0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FREEVAR0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FREEVAR0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FREEVAR0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FREEVAR0
8     (SKIP&RET 1)


Disassembly of function FREEVAR0
(CONST 0) = M
(CONST 1) = 0
(CONST 2) = FREEVAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (GETVALUE&PUSH 0)                   ; M
5     (JMPIFEQTO 1 L15)                   ; 0
8     (GETVALUE&PUSH 0)                   ; M
10    (CALL1 2)                           ; FREEVAR
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (NIL)
16    (JMP L12)


Disassembly of function #:|(DEFUN ADDARGLIST (S K) ...)-192|
(CONST 0) = ADDARGLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADDARGLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADDARGLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADDARGLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADDARGLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADDARGLIST
8     (SKIP&RET 1)


Disassembly of function ADDARGLIST
(CONST 0) = S
(CONST 1) = K
(CONST 2) = L
(CONST 3) = 1
(CONST 4) = SUB
(CONST 5) = ZERP
(CONST 6) = DIV
(CONST 7) = ADD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L S K)
writes special variable : (L)
38 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; S
3     (LOAD 4)
4     (BIND 1)                            ; K
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; L
10    (GETVALUE&PUSH 1)                   ; K
12    (CONST 3)                           ; 1
13    (JMP L35)
15    L15
15    (GETVALUE&PUSH 0)                   ; S
17    (LOAD&PUSH 4)
18    (CALL2&PUSH 7)                      ; ADD
20    (GETVALUE&PUSH 1)                   ; K
22    (CALL2&PUSH 6)                      ; DIV
24    (LIST&PUSH 1)
26    (GETVALUE&PUSH 2)                   ; L
28    (CALLSR 2 34)                       ; APPEND
31    (SETVALUE 2)                        ; L
33    (LOAD&PUSH 3)
34    (CONST 3)                           ; 1
35    L35
35    (PUSH)
36    (CALL2 4)                           ; SUB
38    (STORE 3)
39    (LOAD&PUSH 3)
40    (CALL1&JMPIFNOT 5 L15)              ; ZERP
43    (GETVALUE&PUSH 0)                   ; S
45    (GETVALUE&PUSH 1)                   ; K
47    (CALL2&PUSH 6)                      ; DIV
49    (LIST&PUSH 1)
51    (GETVALUE&PUSH 2)                   ; L
53    (CALLSR 2 34)                       ; APPEND
56    (UNBIND1)
57    (SKIP 1)
59    (UNBIND 2)
61    (SKIP&RET 3)


Disassembly of function #:|(DEFUN F19COND (A M L1 ...) ...)-193|
(CONST 0) = F19COND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F19COND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F19COND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F19COND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F19COND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F19COND
8     (SKIP&RET 1)


Disassembly of function F19COND
(CONST 0) = A
(CONST 1) = M
(CONST 2) = P
(CONST 3) = Q
(CONST 4) = S
(CONST 5) = D
(CONST 6) = CDRAS
(CONST 7) = -1
(CONST 8) = ADD*
(CONST 9) = SUB
(CONST 10) = CHECKSIGNTM
(CONST 11) = $POSITIVE
(CONST 12) = 1
(CONST 13) = ADD
(CONST 14) = F19P220-SIMP
(CONST 15) = MUL
(CONST 16) = FAILED-ON-F19COND-MULTIPLY-THE-OTHER-CASES-WITH-D
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A D S Q M P)
writes special variables : (D S Q P)
74 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; A
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (NIL)
7     (BIND 2)                            ; P
9     (NIL)
10    (BIND 3)                            ; Q
12    (NIL)
13    (BIND 4)                            ; S
15    (NIL)
16    (BIND 5)                            ; D
18    (LOAD 19)
20    (CDR)
21    (CAR)
22    (CAR)
23    (SETVALUE 2)                        ; P
25    (LOAD 19)
27    (CDR)
28    (CAR)
29    (CDR)
30    (CAR)
31    (SETVALUE 3)                        ; Q
33    (CONST&PUSH 1)                      ; M
34    (LOAD&PUSH 21)
35    (CALL2 6)                           ; CDRAS
37    (SETVALUE 4)                        ; S
39    (CONST&PUSH 5)                      ; D
40    (LOAD&PUSH 21)
41    (CALL2 6)                           ; CDRAS
43    (SETVALUE 5)                        ; D
45    (LOAD 19)
47    (CDR)
48    (CDR)
49    (CAR)
50    (STORE 20)
52    (LOAD 19)
54    (CDR)
55    (CDR)
56    (CDR)
57    (CAR)
58    (STORE 19)
60    (GETVALUE&PUSH 2)                   ; P
62    (GETVALUE&PUSH 1)                   ; M
64    (CONST&PUSH 7)                      ; -1
65    (CALL&PUSH 3 8)                     ; ADD*
68    (GETVALUE&PUSH 3)                   ; Q
70    (CALL2&PUSH 9)                      ; SUB
72    (CALL1&PUSH 10)                     ; CHECKSIGNTM
74    (JMPIFEQTO 11 L87)                  ; $POSITIVE
77    (GETVALUE&PUSH 4)                   ; S
79    (CONST&PUSH 12)                     ; 1
80    (CALL2&PUSH 13)                     ; ADD
82    (CALL1&PUSH 10)                     ; CHECKSIGNTM
84    (JMPIFEQTO 11 L94)                  ; $POSITIVE
87    L87
87    (CONST 16)                          ; FAILED-ON-F19COND-MULTIPLY-THE-OTHER-CASES-WITH-D
88    (UNBIND 4)
90    L90
90    (UNBIND 2)
92    (SKIP&RET 5)
94    L94
94    (GETVALUE&PUSH 5)                   ; D
96    (GETVALUE&PUSH 4)                   ; S
98    (CONST&PUSH 12)                     ; 1
99    (CALL2&PUSH 13)                     ; ADD
101   (LOAD&PUSH 22)
102   (LOAD&PUSH 22)
103   (GETVALUE&PUSH 0)                   ; A
105   (GETVALUE&PUSH 1)                   ; M
107   (CALL&PUSH 5 14)                    ; F19P220-SIMP
110   (CALL2 15)                          ; MUL
112   (UNBIND 4)
114   (JMP L90)


Disassembly of function #:|(DEFUN F19P220-SIMP (S L1 L2 ...) ...)-194|
(CONST 0) = F19P220-SIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F19P220-SIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F19P220-SIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F19P220-SIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F19P220-SIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F19P220-SIMP
8     (SKIP&RET 1)


Disassembly of function F19P220-SIMP
(CONST 0) = S
(CONST 1) = K
(CONST 2) = GM
(CONST 3) = PAR
(CONST 4) = POWER
(CONST 5) = -1
(CONST 6) = ADDARGLIST
(CONST 7) = MUL*
(CONST 8) = HGFSIMP-EXEC
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K PAR S)
31 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; S
3     (LOAD 4)
4     (BIND 1)                            ; K
6     (GETVALUE&PUSH 0)                   ; S
8     (CALL1&PUSH 2)                      ; GM
10    (GETVALUE&PUSH 3)                   ; PAR
12    (GETVALUE&PUSH 0)                   ; S
14    (CALL2&PUSH 4)                      ; POWER
16    (CONST&PUSH 5)                      ; -1
17    (CALL2&PUSH 4)                      ; POWER
19    (LOAD&PUSH 12)
20    (GETVALUE&PUSH 0)                   ; S
22    (GETVALUE&PUSH 1)                   ; K
24    (CALL2&PUSH 6)                      ; ADDARGLIST
26    (CALLSR&PUSH 2 34)                  ; APPEND
29    (LOAD&PUSH 12)
30    (LOAD&PUSH 12)
31    (GETVALUE&PUSH 1)                   ; K
33    (GETVALUE&PUSH 1)                   ; K
35    (CALL2&PUSH 4)                      ; POWER
37    (GETVALUE&PUSH 3)                   ; PAR
39    (CONST&PUSH 5)                      ; -1
40    (CALL2&PUSH 4)                      ; POWER
42    (GETVALUE&PUSH 1)                   ; K
44    (CALL2&PUSH 4)                      ; POWER
46    (CALL&PUSH 3 7)                     ; MUL*
49    (CALL&PUSH 3 8)                     ; HGFSIMP-EXEC
52    (CALL 3 7)                          ; MUL*
55    (UNBIND 2)
57    (SKIP&RET 6)


Disassembly of function #:|(DEFUN J1TF (V Z) ...)-195|
(CONST 0) = J1TF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE J1TF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; J1TF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; J1TF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE J1TF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; J1TF
8     (SKIP&RET 1)


Disassembly of function J1TF
(CONST 0) = V
(CONST 1) = Z
(CONST 2) = 2
(CONST 3) = POWER
(CONST 4) = -1
(CONST 5) = 1
(CONST 6) = ADD
(CONST 7) = GM
(CONST 8) = MUL*
(CONST 9) = FPQ
(CONST 10) = 0
(CONST 11) = -4
(CONST 12) = MUL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V)
39 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; V
3     (LOAD 4)
4     (BIND 1)                            ; Z
6     (CONST&PUSH 2)                      ; 2
7     (GETVALUE&PUSH 0)                   ; V
9     (CALL2&PUSH 3)                      ; POWER
11    (CONST&PUSH 4)                      ; -1
12    (CALL2&PUSH 3)                      ; POWER
14    (GETVALUE&PUSH 1)                   ; Z
16    (GETVALUE&PUSH 0)                   ; V
18    (CALL2&PUSH 3)                      ; POWER
20    (GETVALUE&PUSH 0)                   ; V
22    (CONST&PUSH 5)                      ; 1
23    (CALL2&PUSH 6)                      ; ADD
25    (CALL1&PUSH 7)                      ; GM
27    (CONST&PUSH 4)                      ; -1
28    (CALL2&PUSH 3)                      ; POWER
30    (CALL&PUSH 3 8)                     ; MUL*
33    (CONST&PUSH 9)                      ; FPQ
34    (CONST&PUSH 10)                     ; 0
35    (CONST&PUSH 5)                      ; 1
36    (LIST&PUSH 2)
38    (NIL&PUSH)
39    (GETVALUE&PUSH 0)                   ; V
41    (CONST&PUSH 5)                      ; 1
42    (CALL2&PUSH 6)                      ; ADD
44    (LIST&PUSH 1)
46    (CONST&PUSH 11)                     ; -4
47    (CONST&PUSH 4)                      ; -1
48    (CALL2&PUSH 3)                      ; POWER
50    (GETVALUE&PUSH 1)                   ; Z
52    (CONST&PUSH 2)                      ; 2
53    (CALL2&PUSH 3)                      ; POWER
55    (CALL2&PUSH 12)                     ; MUL
57    (LIST&PUSH 5)
59    (LIST 2)
61    (UNBIND 2)
63    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIONARGHYP-Y (L INDEX ARG) ...)-196|
(CONST 0) = DIONARGHYP-Y
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIONARGHYP-Y>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIONARGHYP-Y
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIONARGHYP-Y
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIONARGHYP-Y>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIONARGHYP-Y
8     (SKIP&RET 1)


Disassembly of function DIONARGHYP-Y
(CONST 0) = L
(CONST 1) = ARG
(CONST 2) = A
(CONST 3) = M
(CONST 4) = C
(CONST 5) = CDRAS
(CONST 6) = ZERP
(CONST 7) = 1
(CONST 8) = F2P105V2COND
(CONST 9) = 2
(CONST 10) = -1
(CONST 11) = POWER
(CONST 12) = F50COND
(CONST 13) = FAIL-IN-DIONARGHYP-Y
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L A C M ARG)
writes special variables : (C M A)
53 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; ARG
6     (NIL)
7     (BIND 2)                            ; A
9     (NIL)
10    (BIND 3)                            ; M
12    (NIL)
13    (BIND 4)                            ; C
15    (CONST&PUSH 2)                      ; A
16    (GETVALUE&PUSH 1)                   ; ARG
18    (CALL2 5)                           ; CDRAS
20    (SETVALUE 2)                        ; A
22    (CONST&PUSH 3)                      ; M
23    (GETVALUE&PUSH 1)                   ; ARG
25    (CALL2 5)                           ; CDRAS
27    (SETVALUE 3)                        ; M
29    (CONST&PUSH 4)                      ; C
30    (GETVALUE&PUSH 1)                   ; ARG
32    (CALL2 5)                           ; CDRAS
34    (SETVALUE 4)                        ; C
36    (PUSH)
37    (CALL1&JMPIFNOT 6 L45)              ; ZERP
40    (GETVALUE&PUSH 3)                   ; M
42    (JMPIFEQTO 7 L71)                   ; 1
45    L45
45    (GETVALUE&PUSH 4)                   ; C
47    (CALL1&JMPIFNOT 6 L81)              ; ZERP
50    (GETVALUE&PUSH 3)                   ; M
52    (CONST&PUSH 9)                      ; 2
53    (CONST&PUSH 10)                     ; -1
54    (CALL2&PUSH 11)                     ; POWER
56    (CALLS2&JMPIFNOT 2 L81)             ; EQUAL
59    (GETVALUE&PUSH 2)                   ; A
61    (GETVALUE&PUSH 0)                   ; L
63    (LOAD&PUSH 19)
64    (CALL 3 12)                         ; F50COND
67    L67
67    (UNBIND 3)
69    (JMP L84)
71    L71
71    (GETVALUE&PUSH 2)                   ; A
73    (GETVALUE&PUSH 0)                   ; L
75    (LOAD&PUSH 19)
76    (CALL 3 8)                          ; F2P105V2COND
79    (JMP L67)
81    L81
81    (CONST 13)                          ; FAIL-IN-DIONARGHYP-Y
82    (UNBIND 3)
84    L84
84    (UNBIND 2)
86    (SKIP&RET 4)


Disassembly of function #:|(DEFUN F2P105V2COND (A L INDEX) ...)-197|
(CONST 0) = F2P105V2COND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F2P105V2COND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F2P105V2COND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F2P105V2COND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F2P105V2COND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F2P105V2COND
8     (SKIP&RET 1)


Disassembly of function F2P105V2COND
(CONST 0) = A
(CONST 1) = L
(CONST 2) = D
(CONST 3) = M
(CONST 4) = CDRAS
(CONST 5) = 1
(CONST 6) = ADD
(CONST 7) = SUB
(CONST 8) = $REALPART
(CONST 9) = CHECKSIGNTM
(CONST 10) = $POSITIVE
(CONST 11) = F2P105V2COND-SIMP
(CONST 12) = FAIL-IN-F2P105V2COND
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A M D L)
writes special variables : (M D)
39 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (NIL)
7     (BIND 2)                            ; D
9     (NIL)
10    (BIND 3)                            ; M
12    (CONST&PUSH 2)                      ; D
13    (GETVALUE&PUSH 1)                   ; L
15    (CALL2 4)                           ; CDRAS
17    (SETVALUE 2)                        ; D
19    (CONST&PUSH 3)                      ; M
20    (GETVALUE&PUSH 1)                   ; L
22    (CALL2 4)                           ; CDRAS
24    (SETVALUE 3)                        ; M
26    (PUSH)
27    (CONST&PUSH 5)                      ; 1
28    (CALL2 6)                           ; ADD
30    (SETVALUE 3)                        ; M
32    (PUSH)
33    (LOAD&PUSH 14)
34    (CALL2&PUSH 7)                      ; SUB
36    (CALL1&PUSH 8)                      ; $REALPART
38    (CALL1&PUSH 9)                      ; CHECKSIGNTM
40    (JMPIFEQTO 10 L50)                  ; $POSITIVE
43    (CONST 12)                          ; FAIL-IN-F2P105V2COND
44    (UNBIND 2)
46    L46
46    (UNBIND 2)
48    (SKIP&RET 4)
50    L50
50    (GETVALUE&PUSH 2)                   ; D
52    (GETVALUE&PUSH 3)                   ; M
54    (LOAD&PUSH 15)
55    (GETVALUE&PUSH 0)                   ; A
57    (CALL 4 11)                         ; F2P105V2COND-SIMP
60    (UNBIND 2)
62    (JMP L46)


Disassembly of function #:|(DEFUN F50COND (A L V) ...)-198|
(CONST 0) = F50COND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F50COND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F50COND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F50COND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F50COND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F50COND
8     (SKIP&RET 1)


Disassembly of function F50COND
(CONST 0) = A
(CONST 1) = L
(CONST 2) = V
(CONST 3) = D
(CONST 4) = M
(CONST 5) = CDRAS
(CONST 6) = 2
(CONST 7) = -1
(CONST 8) = POWER
(CONST 9) = ADD
(CONST 10) = DIV
(CONST 11) = $REALPART
(CONST 12) = CHECKSIGNTM
(CONST 13) = $POSITIVE
(CONST 14) = SUB
(CONST 15) = 1
(CONST 16) = MUL
(CONST 17) = MAXIMA-INTEGERP
(CONST 18) = 4
(CONST 19) = F50P188-SIMP
(CONST 20) = FAIL-IN-F50COND
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D A M V L)
writes special variables : (A V M D)
81 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; V
9     (NIL)
10    (BIND 3)                            ; D
12    (NIL)
13    (BIND 4)                            ; M
15    (CONST&PUSH 3)                      ; D
16    (GETVALUE&PUSH 1)                   ; L
18    (CALL2 5)                           ; CDRAS
20    (SETVALUE 3)                        ; D
22    (CONST&PUSH 4)                      ; M
23    (GETVALUE&PUSH 1)                   ; L
25    (CALL2 5)                           ; CDRAS
27    (SETVALUE 4)                        ; M
29    (PUSH)
30    (CONST&PUSH 6)                      ; 2
31    (CONST&PUSH 7)                      ; -1
32    (CALL2&PUSH 8)                      ; POWER
34    (CALL2 9)                           ; ADD
36    (SETVALUE 4)                        ; M
38    (GETVALUE&PUSH 2)                   ; V
40    (CONST&PUSH 6)                      ; 2
41    (CALL2 10)                          ; DIV
43    (SETVALUE 2)                        ; V
45    (GETVALUE&PUSH 4)                   ; M
47    (GETVALUE&PUSH 2)                   ; V
49    (CONST&PUSH 6)                      ; 2
50    (CONST&PUSH 7)                      ; -1
51    (CALL2&PUSH 8)                      ; POWER
53    (CALL&PUSH 3 9)                     ; ADD
56    (CALL1&PUSH 11)                     ; $REALPART
58    (CALL1&PUSH 12)                     ; CHECKSIGNTM
60    (JMPIFNOTEQTO 13 L107)              ; $POSITIVE
63    (GETVALUE&PUSH 4)                   ; M
65    (CONST&PUSH 6)                      ; 2
66    (CONST&PUSH 7)                      ; -1
67    (CALL2&PUSH 8)                      ; POWER
69    (CALL2&PUSH 9)                      ; ADD
71    (GETVALUE&PUSH 2)                   ; V
73    (CALL2&PUSH 14)                     ; SUB
75    (CALL1&PUSH 11)                     ; $REALPART
77    (CALL1&PUSH 12)                     ; CHECKSIGNTM
79    (JMPIFNOTEQTO 13 L107)              ; $POSITIVE
82    (GETVALUE&PUSH 4)                   ; M
84    (GETVALUE&PUSH 4)                   ; M
86    (CALL2&PUSH 9)                      ; ADD
88    (GETVALUE&PUSH 2)                   ; V
90    (GETVALUE&PUSH 2)                   ; V
92    (CONST&PUSH 15)                     ; 1
93    (CALL&PUSH 3 9)                     ; ADD
96    (CALL2&PUSH 14)                     ; SUB
98    (CONST&PUSH 6)                      ; 2
99    (CONST&PUSH 7)                      ; -1
100   (CALL2&PUSH 8)                      ; POWER
102   (CALL2&PUSH 16)                     ; MUL
104   (CALL1&JMPIFNOT 17 L114)            ; MAXIMA-INTEGERP
107   L107
107   (CONST 20)                          ; FAIL-IN-F50COND
108   (UNBIND 2)
110   L110
110   (UNBIND 3)
112   (SKIP&RET 4)
114   L114
114   (GETVALUE&PUSH 0)                   ; A
116   (GETVALUE&PUSH 0)                   ; A
118   (CONST&PUSH 18)                     ; 4
119   (CONST&PUSH 7)                      ; -1
120   (CALL2&PUSH 8)                      ; POWER
122   (CALL 3 16)                         ; MUL
125   (SETVALUE 0)                        ; A
127   (GETVALUE&PUSH 3)                   ; D
129   (GETVALUE&PUSH 4)                   ; M
131   (GETVALUE&PUSH 2)                   ; V
133   (GETVALUE&PUSH 0)                   ; A
135   (CALL 4 19)                         ; F50P188-SIMP
138   (UNBIND 2)
140   (JMP L110)


Disassembly of function #:|(DEFUN F2P105V2COND-SIMP (D M V ...) ...)-199|
(CONST 0) = F2P105V2COND-SIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F2P105V2COND-SIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F2P105V2COND-SIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F2P105V2COND-SIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F2P105V2COND-SIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; F2P105V2COND-SIMP
8     (SKIP&RET 1)


Disassembly of function F2P105V2COND-SIMP
(CONST 0) = D
(CONST 1) = M
(CONST 2) = V
(CONST 3) = A
(CONST 4) = -2
(CONST 5) = $%PI
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = ADD
(CONST 9) = GM
(CONST 10) = MUL
(CONST 11) = PAR
(CONST 12) = 2
(CONST 13) = 1
(CONST 14) = SUB
(CONST 15) = LEG2FSIMP
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PAR A V M)
53 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; D
3     (LOAD 6)
4     (BIND 1)                            ; M
6     (LOAD 8)
7     (BIND 2)                            ; V
9     (LOAD 10)
10    (BIND 3)                            ; A
12    (CONST&PUSH 4)                      ; -2
13    (CONST&PUSH 5)                      ; $%PI
14    (CONST&PUSH 6)                      ; -1
15    (CALL2&PUSH 7)                      ; POWER
17    (GETVALUE&PUSH 1)                   ; M
19    (GETVALUE&PUSH 2)                   ; V
21    (CALL2&PUSH 8)                      ; ADD
23    (CALL1&PUSH 9)                      ; GM
25    (GETVALUE&PUSH 3)                   ; A
27    (GETVALUE&PUSH 3)                   ; A
29    (CALL2&PUSH 10)                     ; MUL
31    (GETVALUE&PUSH 11)                  ; PAR
33    (GETVALUE&PUSH 11)                  ; PAR
35    (CALL2&PUSH 10)                     ; MUL
37    (CALL2&PUSH 8)                      ; ADD
39    (CONST&PUSH 6)                      ; -1
40    (CONST&PUSH 12)                     ; 2
41    (CONST&PUSH 6)                      ; -1
42    (CALL2&PUSH 7)                      ; POWER
44    (GETVALUE&PUSH 1)                   ; M
46    (CALL&PUSH 3 10)                    ; MUL
49    (CALL2&PUSH 7)                      ; POWER
51    (GETVALUE&PUSH 1)                   ; M
53    (CONST&PUSH 13)                     ; 1
54    (CALL2&PUSH 14)                     ; SUB
56    (CONST&PUSH 6)                      ; -1
57    (GETVALUE&PUSH 2)                   ; V
59    (CALL2&PUSH 10)                     ; MUL
61    (GETVALUE&PUSH 11)                  ; PAR
63    (GETVALUE&PUSH 3)                   ; A
65    (GETVALUE&PUSH 3)                   ; A
67    (CALL2&PUSH 10)                     ; MUL
69    (GETVALUE&PUSH 11)                  ; PAR
71    (GETVALUE&PUSH 11)                  ; PAR
73    (CALL2&PUSH 10)                     ; MUL
75    (CALL2&PUSH 8)                      ; ADD
77    (CONST&PUSH 4)                      ; -2
78    (CONST&PUSH 6)                      ; -1
79    (CALL2&PUSH 7)                      ; POWER
81    (CALL2&PUSH 7)                      ; POWER
83    (CALL2&PUSH 10)                     ; MUL
85    (CALL&PUSH 3 15)                    ; LEG2FSIMP
88    (CALL 5 10)                         ; MUL
91    (UNBIND 4)
93    (SKIP&RET 5)


Disassembly of function #:|(DEFUN LEG1FSIMP (M V Z) ...)-200|
(CONST 0) = LEG1FSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEG1FSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEG1FSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEG1FSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEG1FSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEG1FSIMP
8     (SKIP&RET 1)


Disassembly of function LEG1FSIMP
(CONST 0) = M
(CONST 1) = V
(CONST 2) = Z
(CONST 3) = 1
(CONST 4) = SUB
(CONST 5) = GM
(CONST 6) = -1
(CONST 7) = POWER
(CONST 8) = ADD
(CONST 9) = DIV
(CONST 10) = 2
(CONST 11) = MUL
(CONST 12) = HGFSIMP-EXEC
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V Z M)
45 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; M
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (CONST&PUSH 3)                      ; 1
10    (GETVALUE&PUSH 0)                   ; M
12    (CALL2&PUSH 4)                      ; SUB
14    (CALL1&PUSH 5)                      ; GM
16    (CONST&PUSH 6)                      ; -1
17    (CALL2&PUSH 7)                      ; POWER
19    (GETVALUE&PUSH 2)                   ; Z
21    (CONST&PUSH 3)                      ; 1
22    (CALL2&PUSH 8)                      ; ADD
24    (GETVALUE&PUSH 2)                   ; Z
26    (CONST&PUSH 3)                      ; 1
27    (CALL2&PUSH 4)                      ; SUB
29    (CALL2&PUSH 9)                      ; DIV
31    (GETVALUE&PUSH 0)                   ; M
33    (CONST&PUSH 10)                     ; 2
34    (CALL2&PUSH 9)                      ; DIV
36    (CALL2&PUSH 7)                      ; POWER
38    (CONST&PUSH 6)                      ; -1
39    (GETVALUE&PUSH 1)                   ; V
41    (CALL2&PUSH 11)                     ; MUL
43    (GETVALUE&PUSH 1)                   ; V
45    (CONST&PUSH 3)                      ; 1
46    (CALL2&PUSH 8)                      ; ADD
48    (LIST&PUSH 2)
50    (CONST&PUSH 3)                      ; 1
51    (GETVALUE&PUSH 0)                   ; M
53    (CALL2&PUSH 4)                      ; SUB
55    (LIST&PUSH 1)
57    (CONST&PUSH 10)                     ; 2
58    (CONST&PUSH 6)                      ; -1
59    (CALL2&PUSH 7)                      ; POWER
61    (GETVALUE&PUSH 2)                   ; Z
63    (CONST&PUSH 10)                     ; 2
64    (CALL2&PUSH 9)                      ; DIV
66    (CALL2&PUSH 4)                      ; SUB
68    (CALL&PUSH 3 12)                    ; HGFSIMP-EXEC
71    (CALL 3 11)                         ; MUL
74    (UNBIND 3)
76    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LEG2FSIMP (M V Z) ...)-201|
(CONST 0) = LEG2FSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEG2FSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEG2FSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEG2FSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEG2FSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEG2FSIMP
8     (SKIP&RET 1)


Disassembly of function LEG2FSIMP
(CONST 0) = M
(CONST 1) = V
(CONST 2) = Z
(CONST 3) = $%E
(CONST 4) = $%PI
(CONST 5) = $%I
(CONST 6) = MUL
(CONST 7) = POWER
(CONST 8) = 2
(CONST 9) = -1
(CONST 10) = 1
(CONST 11) = ADD
(CONST 12) = GM
(CONST 13) = 3
(CONST 14) = DIV
(CONST 15) = SUB
(CONST 16) = HGFSIMP-EXEC
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z V M)
85 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; M
3     (LOAD 5)
4     (BIND 1)                            ; V
6     (LOAD 7)
7     (BIND 2)                            ; Z
9     (CONST&PUSH 3)                      ; $%E
10    (GETVALUE&PUSH 0)                   ; M
12    (CONST&PUSH 4)                      ; $%PI
13    (CONST&PUSH 5)                      ; $%I
14    (CALL&PUSH 3 6)                     ; MUL
17    (CALL2&PUSH 7)                      ; POWER
19    (CONST&PUSH 4)                      ; $%PI
20    (CONST&PUSH 8)                      ; 2
21    (CONST&PUSH 9)                      ; -1
22    (CALL2&PUSH 7)                      ; POWER
24    (CALL2&PUSH 7)                      ; POWER
26    (GETVALUE&PUSH 0)                   ; M
28    (GETVALUE&PUSH 1)                   ; V
30    (CONST&PUSH 10)                     ; 1
31    (CALL&PUSH 3 11)                    ; ADD
34    (CALL1&PUSH 12)                     ; GM
36    (CONST&PUSH 8)                      ; 2
37    (GETVALUE&PUSH 1)                   ; V
39    (CONST&PUSH 10)                     ; 1
40    (CALL2&PUSH 11)                     ; ADD
42    (CALL2&PUSH 7)                      ; POWER
44    (CONST&PUSH 9)                      ; -1
45    (CALL2&PUSH 7)                      ; POWER
47    (GETVALUE&PUSH 1)                   ; V
49    (CONST&PUSH 13)                     ; 3
50    (CONST&PUSH 8)                      ; 2
51    (CALL2&PUSH 14)                     ; DIV
53    (CALL2&PUSH 11)                     ; ADD
55    (CALL1&PUSH 12)                     ; GM
57    (CONST&PUSH 9)                      ; -1
58    (CALL2&PUSH 7)                      ; POWER
60    (GETVALUE&PUSH 2)                   ; Z
62    (CONST&PUSH 9)                      ; -1
63    (GETVALUE&PUSH 0)                   ; M
65    (GETVALUE&PUSH 1)                   ; V
67    (CALL2&PUSH 11)                     ; ADD
69    (CALL2&PUSH 15)                     ; SUB
71    (CALL2&PUSH 7)                      ; POWER
73    (GETVALUE&PUSH 2)                   ; Z
75    (GETVALUE&PUSH 2)                   ; Z
77    (CALL2&PUSH 6)                      ; MUL
79    (CONST&PUSH 10)                     ; 1
80    (CALL2&PUSH 15)                     ; SUB
82    (CONST&PUSH 8)                      ; 2
83    (CONST&PUSH 9)                      ; -1
84    (CALL2&PUSH 7)                      ; POWER
86    (GETVALUE&PUSH 0)                   ; M
88    (CALL2&PUSH 6)                      ; MUL
90    (CALL2&PUSH 7)                      ; POWER
92    (GETVALUE&PUSH 0)                   ; M
94    (GETVALUE&PUSH 1)                   ; V
96    (CONST&PUSH 10)                     ; 1
97    (CALL&PUSH 3 11)                    ; ADD
100   (CONST&PUSH 8)                      ; 2
101   (CALL2&PUSH 14)                     ; DIV
103   (GETVALUE&PUSH 0)                   ; M
105   (GETVALUE&PUSH 1)                   ; V
107   (CONST&PUSH 8)                      ; 2
108   (CALL&PUSH 3 11)                    ; ADD
111   (CONST&PUSH 8)                      ; 2
112   (CALL2&PUSH 14)                     ; DIV
114   (LIST&PUSH 2)
116   (GETVALUE&PUSH 1)                   ; V
118   (CONST&PUSH 13)                     ; 3
119   (CONST&PUSH 8)                      ; 2
120   (CONST&PUSH 9)                      ; -1
121   (CALL2&PUSH 7)                      ; POWER
123   (CALL2&PUSH 6)                      ; MUL
125   (CALL2&PUSH 11)                     ; ADD
127   (LIST&PUSH 1)
129   (GETVALUE&PUSH 2)                   ; Z
131   (GETVALUE&PUSH 2)                   ; Z
133   (CALL2&PUSH 6)                      ; MUL
135   (CONST&PUSH 9)                      ; -1
136   (CALL2&PUSH 7)                      ; POWER
138   (CALL&PUSH 3 16)                    ; HGFSIMP-EXEC
141   (CALL 8 6)                          ; MUL
144   (UNBIND 3)
146   (SKIP&RET 4)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL ASINX ATANX))-202|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Wrote file binary-clisp/hypgeo.fas
Wrote file /cygdrive/e/temp/maxima/src/hypgeo.lis