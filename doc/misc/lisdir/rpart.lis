Listing of compilation of file /cygdrive/e/temp/maxima/src/rpart.lisp
on 2002-12-17 13:33:18 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/rpart.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE RPART)-2|
(CONST 0) = RPART
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RPART
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL NEGP* $%EMODE ...) (*LEXPR $EXPAND) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR IMPLICIT-REAL NIL ...)-5-1|
(CONST 0) = IMPLICIT-REAL
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; IMPLICIT-REAL
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; IMPLICIT-REAL
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR IMPLICIT-REAL NIL ...)-5-2|
(CONST 0) = (SPECIAL IMPLICIT-REAL)
(CONST 1) = IMPLICIT-REAL
(CONST 2) = VARIABLE
(CONST 3) = 
"If t RPART assumes radicals and logs
         of real quantities are real and doesn't ask sign questions"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL IMPLICIT-REAL)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; IMPLICIT-REAL
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; IMPLICIT-REAL
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; IMPLICIT-REAL
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If t RPART assumes radicals and logs
         of real quantities are real and doesn't ask sign questions"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; IMPLICIT-REAL
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR GENERATE-ATAN2 T ...)-6-1|
(CONST 0) = GENERATE-ATAN2
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; GENERATE-ATAN2
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; GENERATE-ATAN2
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR GENERATE-ATAN2 T ...)-6-2|
(CONST 0) = (SPECIAL GENERATE-ATAN2)
(CONST 1) = GENERATE-ATAN2
(CONST 2) = VARIABLE
(CONST 3) = 
"Controls whether RPART will generate ATAN's
	                or ATAN2's, default is to make ATAN2's"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL GENERATE-ATAN2)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; GENERATE-ATAN2
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; GENERATE-ATAN2
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; GENERATE-ATAN2
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "Controls whether RPART will generate ATAN's
	                or ATAN2's, default is to make ATAN2's"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; GENERATE-ATAN2
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $REALPART (XX) ...)-7|
(CONST 0) = $REALPART
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $REALPART>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REALPART
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $REALPART
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $REALPART>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $REALPART
8     (SKIP&RET 1)


Disassembly of function $REALPART
(CONST 0) = TRISPLIT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; TRISPLIT
3     (CAR)
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $IMAGPART (XX) ...)-8|
(CONST 0) = $IMAGPART
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $IMAGPART>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IMAGPART
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $IMAGPART
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $IMAGPART>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $IMAGPART
8     (SKIP&RET 1)


Disassembly of function $IMAGPART
(CONST 0) = TRISPLIT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; TRISPLIT
3     (CDR)
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $RECTFORM (XX) ...)-9|
(CONST 0) = $RECTFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RECTFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RECTFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RECTFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RECTFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RECTFORM
8     (SKIP&RET 1)


Disassembly of function $RECTFORM
(CONST 0) = TRISPLIT
(CONST 1) = $%I
(CONST 2) = MUL
(CONST 3) = ADD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; TRISPLIT
3     (LOAD&CAR&PUSH 0)
5     (LOAD&CDR&PUSH 1)
7     (CONST&PUSH 1)                      ; $%I
8     (CALL2&PUSH 2)                      ; MUL
10    (CALL2 3)                           ; ADD
12    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $POLARFORM (XX) ...)-10|
(CONST 0) = $POLARFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $POLARFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $POLARFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $POLARFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $POLARFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $POLARFORM
8     (SKIP&RET 1)


Disassembly of function $POLARFORM
(CONST 0) = (MEQUAL MLIST $MATRIX)
(CONST 1) = MEMQ
(CONST 2) = $POLARFORM
(CONST 3) = ABSARG
(CONST 4) = $%EMODE
(CONST 5) = $%E
(CONST 6) = $%I
(CONST 7) = MUL
(CONST 8) = POWERS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L10)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (CONST&PUSH 0)                      ; (MEQUAL MLIST $MATRIX)
7     (CALL2&JMPIF 1 L31)                 ; MEMQ
10    L10
10    (LOAD&PUSH 1)
11    (CALL1&PUSH 3)                      ; ABSARG
13    (NIL)
14    (BIND 4)                            ; $%EMODE
16    (LOAD&CAR&PUSH 3)
18    (CONST&PUSH 5)                      ; $%E
19    (CONST&PUSH 6)                      ; $%I
20    (LOAD&CDR&PUSH 6)
22    (CALL2&PUSH 7)                      ; MUL
24    (CALL2&PUSH 8)                      ; POWERS
26    (CALL2 7)                           ; MUL
28    (UNBIND1)
29    (SKIP&RET 3)
31    L31
31    (LOAD&CAR&PUSH 1)
33    (CONST&SYMBOL-FUNCTION&PUSH 2)      ; $POLARFORM
35    (LOAD&CDR&PUSH 3)
37    (CALLSR 0 22)                       ; MAPCAR
40    (CONS)
41    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $CABS (XX) ...)-11|
(CONST 0) = $CABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CABS
8     (SKIP&RET 1)


Disassembly of function $CABS
(CONST 0) = $RECTFORM
(CONST 1) = CABS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; $RECTFORM
3     (CALL1 1)                           ; CABS
5     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $CARG (XX) ...)-12|
(CONST 0) = $CARG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CARG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CARG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CARG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CARG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CARG
8     (SKIP&RET 1)


Disassembly of function $CARG
(CONST 0) = ABSARG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; ABSARG
3     (CDR)
4     (SKIP&RET 2)


Disassembly of function #:|(DEFVAR ABSFLAG NIL)-13|
(CONST 0) = (SPECIAL ABSFLAG)
(CONST 1) = ABSFLAG
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ABSFLAG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ABSFLAG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ABSFLAG
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; ABSFLAG
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN CABS (XX) ...)-14|
(CONST 0) = CABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CABS
8     (SKIP&RET 1)


Disassembly of function CABS
(CONST 0) = ABSFLAG
(CONST 1) = ABSARG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (T)
1     (BIND 0)                            ; ABSFLAG
3     (LOAD&PUSH 4)
4     (CALL1 1)                           ; ABSARG
6     (CAR)
7     (UNBIND1)
8     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN TRISPLIT (EL) ...)-15|
(CONST 0) = TRISPLIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRISPLIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRISPLIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRISPLIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRISPLIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRISPLIT
8     (SKIP&RET 1)


Disassembly of function TRISPLIT
(CONST 0) = RISPLIT
(CONST 1) = SPECREPP
(CONST 2) = SPECDISREP
(CONST 3) = MEQUAL
(CONST 4) = (MEQUAL SIMP)
(CONST 5) = DOT-SP-RI
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
22 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L13)
3     (LOAD&PUSH 1)
4     (CALL1&JMPIF 1 L18)                 ; SPECREPP
7     (LOAD 1)
8     (CAR)
9     (CAR&PUSH)
10    (JMPIFEQTO 3 L25)                   ; MEQUAL
13    L13
13    (LOAD&PUSH 1)
14    (CALL1 0)                           ; RISPLIT
16    (SKIP&RET 2)
18    L18
18    (LOAD&PUSH 1)
19    (CALL1&PUSH 2)                      ; SPECDISREP
21    (JMPTAIL 1 3 L0)
25    L25
25    (LOAD&CDR&PUSH 1)
27    (CONST&PUSH 4)                      ; (MEQUAL SIMP)
28    (CALL2 5)                           ; DOT-SP-RI
30    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DSRL (EL) ...)-16|
(CONST 0) = DSRL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DSRL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DSRL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DSRL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DSRL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DSRL
8     (SKIP&RET 1)


Disassembly of function DSRL
(CONST 0) = (MLIST SIMP)
(CONST 1) = DOT-SP-RI
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (CONST&PUSH 0)                      ; (MLIST SIMP)
3     (CALL2 1)                           ; DOT-SP-RI
5     (SKIP&RET 2)


Disassembly of function #:|(DEFUN DOT-SP-RI (EL IND) ...)-17|
(CONST 0) = DOT-SP-RI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DOT-SP-RI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DOT-SP-RI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DOT-SP-RI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DOT-SP-RI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DOT-SP-RI
8     (SKIP&RET 1)


Disassembly of function DOT-SP-RI
(CONST 0) = TRISPLIT
(CONST 1) = DOT--RI
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; TRISPLIT
2     (LOAD&PUSH 3)
3     (CALLSR&PUSH 0 22)                  ; MAPCAR
6     (LOAD&PUSH 2)
7     (CALL2 1)                           ; DOT--RI
9     (SKIP&RET 3)


Disassembly of function #:|(DEFUN DOT--RI (EL IND) ...)-18|
(CONST 0) = DOT--RI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DOT--RI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DOT--RI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DOT--RI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DOT--RI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DOT--RI
8     (SKIP&RET 1)


Disassembly of function DOT--RI
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
26 byte-code instructions:
0     (LOAD&PUSH 2)
1     (NIL&PUSH)
2     (LOAD&JMPIFNOT 1 L25)
5     L5
5     (LOAD 1)
6     (CAR)
7     (CDR&PUSH)
8     (LOAD&CAR&PUSH 2)
10    (LOAD&PUSH 2)
11    (CALLS1&STORE 170 1)                ; RPLACD
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 1)
16    (CALLS1 168)                        ; RPLACA
18    (SKIP 1)
20    (LOAD&CDR&STORE 1)
22    (LOAD&JMPIF 1 L5)
25    L25
25    (LOAD&PUSH 3)
26    (LOAD&PUSH 1)
27    (CALLS2 73)                         ; NREVERSE
29    (CONS&PUSH)
30    (LOAD&PUSH 4)
31    (LOAD 6)
32    (CONS)
33    (CONS)
34    (SKIP&RET 5)


Disassembly of function #:|(DEFUN RISPLIT-MPLUS (L) ...)-19|
(CONST 0) = RISPLIT-MPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISPLIT-MPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISPLIT-MPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISPLIT-MPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISPLIT-MPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISPLIT-MPLUS
8     (SKIP&RET 1)


Disassembly of function RISPLIT-MPLUS
(CONST 0) = RISPLIT
(CONST 1) = 0
(CONST 2) = ADDN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD&CDR&PUSH 3)
4     (LOAD&JMPIFNOT 0 L36)
7     L7
7     (LOAD&CAR&PUSH 0)
9     (CALL1&PUSH 0)                      ; RISPLIT
11    (LOAD&CAR&PUSH 0)
13    (JMPIFEQTO 1 L20)                   ; 0
16    (LOAD&CAR&PUSH 0)
18    (LOAD&CONS&STORE 3)
20    L20
20    (LOAD&CDR&PUSH 0)
22    (JMPIFEQTO 1 L29)                   ; 0
25    (LOAD&CDR&PUSH 0)
27    (LOAD&CONS&STORE 2)
29    L29
29    (SKIP 1)
31    (LOAD&CDR&STORE 0)
33    (LOAD&JMPIF 0 L7)
36    L36
36    (LOAD&PUSH 2)
37    (T&PUSH)
38    (CALL2&PUSH 2)                      ; ADDN
40    (LOAD&PUSH 2)
41    (T&PUSH)
42    (CALL2 2)                           ; ADDN
44    (CONS)
45    (SKIP&RET 5)


Disassembly of function #:|(DEFUN RISPLIT-TIMES (L) ...)-20|
(CONST 0) = RISPLIT-TIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISPLIT-TIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISPLIT-TIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISPLIT-TIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISPLIT-TIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISPLIT-TIMES
8     (SKIP&RET 1)


Disassembly of function RISPLIT-TIMES
(CONST 0) = RISPLIT
(CONST 1) = 0
(CONST 2) = MTIMES
(CONST 3) = MULN
(CONST 4) = 1
(CONST 5) = MUL
(CONST 6) = SUB
(CONST 7) = ADD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
129 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD&CDR&PUSH 3)
4     (LOAD&JMPIFNOT 0 L77)
8     L8
8     (LOAD&CAR&PUSH 0)
10    (CALL1&PUSH 0)                      ; RISPLIT
12    (LOAD&CDR&PUSH 0)
14    (JMPIFEQTO 1 L148)                  ; 0
18    (LOAD 0)
19    (CAR)
20    (JMPIFATOM L66)
22    (LOAD 0)
23    (CDR)
24    (JMPIFATOM L66)
26    (LOAD 0)
27    (CAR)
28    (CAR)
29    (CAR&PUSH)
30    (JMPIFNOTEQTO 2 L66)                ; MTIMES
33    (LOAD 0)
34    (CDR)
35    (CAR)
36    (CAR&PUSH)
37    (JMPIFNOTEQTO 2 L66)                ; MTIMES
40    (LOAD 0)
41    (CAR)
42    (CDR&PUSH)
43    (CALLS2&PUSH 73)                    ; NREVERSE
45    (LOAD 1)
46    (CDR)
47    (CDR&PUSH)
48    (CALLS2&PUSH 73)                    ; NREVERSE
50    (LOAD&CAR&PUSH 1)
52    (LOAD&CAR&PUSH 1)
54    (CALLS2&JMPIF 2 L156)               ; EQUAL
58    (LOAD&PUSH 1)
59    (CALLS2 73)                         ; NREVERSE
61    (LOAD&PUSH 0)
62    (CALLS2 73)                         ; NREVERSE
64    (SKIP 2)
66    L66
66    (LOAD&PUSH 0)
67    (LOAD&CONS&STORE 2)
69    L69
69    (SKIP 1)
71    (LOAD&CDR&STORE 0)
73    (LOAD&JMPIF 0 L8)
77    L77
77    (LOAD&PUSH 2)
78    (LOAD 2)
79    (CONS)
80    (SKIP 2)
82    (STORE 0)
83    (LOAD 0)
84    (CDR)
85    (JMPIFNOT L182)
88    (CONST&PUSH 4)                      ; 1
89    (CONST&PUSH 1)                      ; 0
90    (LOAD&CDR&PUSH 2)
92    (LOAD&JMPIFNOT 0 L131)
95    L95
95    (LOAD&PUSH 2)
96    (LOAD 1)
97    (CAR)
98    (CAR&PUSH)
99    (CALL2&PUSH 5)                      ; MUL
101   (LOAD&PUSH 2)
102   (LOAD 2)
103   (CAR)
104   (CDR&PUSH)
105   (CALL2&PUSH 5)                      ; MUL
107   (CALL2&PUSH 6)                      ; SUB
109   (LOAD&PUSH 2)
110   (LOAD 2)
111   (CAR)
112   (CAR&PUSH)
113   (CALL2&PUSH 5)                      ; MUL
115   (LOAD&PUSH 4)
116   (LOAD 3)
117   (CAR)
118   (CDR&PUSH)
119   (CALL2&PUSH 5)                      ; MUL
121   (CALL2 7)                           ; ADD
123   (STORE 2)
124   (POP&STORE 2)
126   (LOAD&CDR&STORE 0)
128   (LOAD&JMPIF 0 L95)
131   L131
131   (LOAD&PUSH 2)
132   (LOAD 4)
133   (CAR)
134   (CONS&PUSH)
135   (T&PUSH)
136   (CALL2&PUSH 3)                      ; MULN
138   (LOAD&PUSH 2)
139   (LOAD 5)
140   (CAR)
141   (CONS&PUSH)
142   (T&PUSH)
143   (CALL2 3)                           ; MULN
145   (CONS)
146   (SKIP&RET 6)
148   L148
148   (LOAD&PUSH 0)
149   (LOAD&PUSH 4)
150   (CALLS1&STORE 170 3)                ; RPLACD
153   (JMP L69)
156   L156
156   (LOAD&CAR&PUSH 1)
158   (LOAD&CONS&STORE 5)
160   (LOAD&CDR&PUSH 1)
162   (CALLS2&PUSH 73)                    ; NREVERSE
164   (T&PUSH)
165   (CALL2&PUSH 3)                      ; MULN
167   (LOAD&CDR&PUSH 1)
169   (CALLS2&PUSH 73)                    ; NREVERSE
171   (T&PUSH)
172   (CALL2 3)                           ; MULN
174   (CONS&PUSH)
175   (LOAD&CONS&STORE 4)
177   (SKIP 2)
179   (JMP L69)
182   L182
182   (LOAD&CAR&PUSH 0)
184   (T&PUSH)
185   (CALL2&PUSH 3)                      ; MULN
187   (CONST 1)                           ; 0
188   (CONS)
189   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RISPLIT-EXPT (L) ...)-21|
(CONST 0) = RISPLIT-EXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISPLIT-EXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISPLIT-EXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISPLIT-EXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISPLIT-EXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISPLIT-EXPT
8     (SKIP&RET 1)


Disassembly of function RISPLIT-EXPT
(CONST 0) = $RADEXPAND
(CONST 1) = FIXNUMP
(CONST 2) = RISPLIT
(CONST 3) = -1
(CONST 4) = SPABS
(CONST 5) = DIV
(CONST 6) = MUL
(CONST 7) = $MAXPOSEX
(CONST 8) = 0
(CONST 9) = POWERS
(CONST 10) = 2
(CONST 11) = ADD
(CONST 12) = *RED
(CONST 13) = GENATAN
(CONST 14) = (%COS)
(CONST 15) = 1
(CONST 16) = SIMP-%COS
(CONST 17) = (%SIN)
(CONST 18) = SIMP-%SIN
(CONST 19) = EXPANINTEXPT
(CONST 20) = NEG
(CONST 21) = RATNUMP
(CONST 22) = $MAXNEGEX
(CONST 23) = MNEGP
(CONST 24) = $NEGATIVE
(CONST 25) = IMPLICIT-REAL
(CONST 26) = $POSITIVE
(CONST 27) = ASKSIGN
(CONST 28) = POWER
(CONST 29) = MUL2
(CONST 30) = $ZERO
(CONST 31) = ((RAT SIMP) 1 2)
(CONST 32) = SUB
(CONST 33) = PORM
(CONST 34) = DIVCARCDR
(CONST 35) = $NUMER
(CONST 36) = EXPTRL
(CONST 37) = ABSARG1
(CONST 38) = $%E
(CONST 39) = (%LOG)
(CONST 40) = SIMPLN
(CONST 41) = (%COS)
(CONST 42) = (%SIN)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (IMPLICIT-REAL $MAXPOSEX $MAXNEGEX)
330 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CDR)
3     (CAR&PUSH)
4     (NIL)
5     (BIND 0)                            ; $RADEXPAND
7     (NIL&PUSH)
8     (LOAD&PUSH 4)
9     (CALL1&JMPIF 1 L205)                ; FIXNUMP
13    (LOAD&PUSH 4)
14    (CALL1&JMPIFNOT 21 L66)             ; RATNUMP
17    (LOAD 4)
18    (CDR)
19    (CAR&PUSH)
20    (CALL1&JMPIFNOT 1 L66)              ; FIXNUMP
23    (LOAD 4)
24    (CDR)
25    (CAR&PUSH)
26    (GETVALUE&PUSH 22)                  ; $MAXNEGEX
28    (CALLSR&PUSH 0 54)                  ; -
31    (CALLSR&JMPIF 1 47 L66)             ; <
35    (LOAD 4)
36    (CDR)
37    (CAR&PUSH)
38    (GETVALUE&PUSH 7)                   ; $MAXPOSEX
40    (CALLSR&JMPIF 1 48 L66)             ; >
44    (LOAD 6)
45    (CDR)
46    (CAR&PUSH)
47    (CALL1 2)                           ; RISPLIT
49    (STORE 0)
50    (LOAD 4)
51    (CDR)
52    (CDR)
53    (CAR&PUSH)
54    (CONST&PUSH 10)                     ; 2
55    (CALLSR&JMPIF 1 45 L302)            ; =
60    (LOAD&CDR&PUSH 0)
62    (JMPIFEQTO 8 L302)                  ; 0
66    L66
66    (LOAD 6)
67    (CDR)
68    (CAR)
69    (STORE 0)
70    (PUSH)
71    (CALLS2&JMPIFNOT 15 L79)            ; FLOATP
74    (LOAD&PUSH 4)
75    (CALLS2&JMPIF 15 L436)              ; FLOATP
79    L79
79    (LOAD 6)
80    (CDR)
81    (CDR)
82    (CAR&PUSH)
83    (CALL1&PUSH 2)                      ; RISPLIT
85    (LOAD 7)
86    (CDR)
87    (CAR&PUSH)
88    (CALL1&PUSH 37)                     ; ABSARG1
90    (LOAD&CDR&PUSH 1)
92    (JMPIFNOTEQTO 8 L450)               ; 0
96    (LOAD&CDR&PUSH 0)
98    (JMPIFNOTEQTO 8 L450)               ; 0
102   (LOAD&PUSH 8)
103   (CONST 8)                           ; 0
104   L104
104   (CONS)
105   (SKIP 2)
107   (JMP L523)
110   L110
110   (LOAD&PUSH 0)
111   (CALL1&PUSH 4)                      ; SPABS
113   (LOAD&CAR&PUSH 1)
115   (LOAD&PUSH 1)
116   (CALL2&PUSH 5)                      ; DIV
118   (CONST&PUSH 3)                      ; -1
119   (LOAD&CDR&PUSH 3)
121   (LOAD&PUSH 3)
122   (CALL2&PUSH 5)                      ; DIV
124   (CALL2 6)                           ; MUL
126   (JMP L104)
128   L128
128   (LOAD&CAR&PUSH 0)
130   (LOAD&PUSH 6)
131   (CALL2&PUSH 9)                      ; POWERS
133   (CONST 8)                           ; 0
134   (JMP L335)
137   L137
137   (LOAD&CDR&PUSH 0)
139   (JMPIFEQTO 8 L128)                  ; 0
142   (LOAD&CAR&PUSH 0)
144   (CONST&PUSH 10)                     ; 2
145   (CALL2&PUSH 9)                      ; POWERS
147   (LOAD&CDR&PUSH 1)
149   (CONST&PUSH 10)                     ; 2
150   (CALL2&PUSH 9)                      ; POWERS
152   (CALL2&PUSH 11)                     ; ADD
154   (LOAD&PUSH 6)
155   (CONST&PUSH 10)                     ; 2
156   (CALL2&PUSH 12)                     ; *RED
158   (CALL2&PUSH 9)                      ; POWERS
160   (LOAD&PUSH 6)
161   (LOAD&CDR&PUSH 2)
163   (LOAD&CAR&PUSH 3)
165   (CALL2&PUSH 13)                     ; GENATAN
167   (CALL2&PUSH 6)                      ; MUL
169   (LOAD&PUSH 1)
170   (CONST&PUSH 14)                     ; (%COS)
171   (LOAD&PUSH 2)
172   (LIST&PUSH 2)
174   (CONST&PUSH 15)                     ; 1
175   (T&PUSH)
176   (CALL&PUSH 3 16)                    ; SIMP-%COS
179   (CALL2&PUSH 6)                      ; MUL
181   (LOAD&PUSH 2)
182   (CONST&PUSH 17)                     ; (%SIN)
183   (LOAD&PUSH 3)
184   (LIST&PUSH 2)
186   (CONST&PUSH 15)                     ; 1
187   (T&PUSH)
188   (CALL&PUSH 3 18)                    ; SIMP-%SIN
191   (CALL2 6)                           ; MUL
193   (JMP L261)
196   L196
196   (LOAD&PUSH 0)
197   (LOAD&PUSH 6)
198   (CALL2 19)                          ; EXPANINTEXPT
200   (SKIP 1)
202   (JMP L523)
205   L205
205   (LOAD 6)
206   (CDR)
207   (CAR&PUSH)
208   (CALL1&PUSH 2)                      ; RISPLIT
210   (LOAD&PUSH 5)
211   (CONST&PUSH 3)                      ; -1
212   (CALLSR&JMPIF 1 45 L110)            ; =
217   (LOAD&PUSH 5)
218   (CALLS2&PUSH 158)                   ; ABS
220   (GETVALUE&PUSH 7)                   ; $MAXPOSEX
222   (CALLSR&JMPIF 1 48 L137)            ; >
227   (LOAD&PUSH 5)
228   (CONST&PUSH 8)                      ; 0
229   (CALLSR&JMPIF 1 48 L196)            ; >
233   (LOAD&PUSH 0)
234   (CALL1&PUSH 4)                      ; SPABS
236   (LOAD&PUSH 6)
237   (CALLSR&PUSH 0 54)                  ; -
240   (CALL2&PUSH 9)                      ; POWERS
242   (LOAD&PUSH 1)
243   (LOAD&PUSH 7)
244   (CALLSR&PUSH 0 54)                  ; -
247   (CALL2&PUSH 19)                     ; EXPANINTEXPT
249   (LOAD&CAR&PUSH 0)
251   (LOAD&PUSH 2)
252   (CALL2&PUSH 5)                      ; DIV
254   (LOAD&CDR&PUSH 1)
256   (LOAD&PUSH 3)
257   (CALL2&PUSH 5)                      ; DIV
259   (CALL1 20)                          ; NEG
261   L261
261   (CONS)
262   (SKIP 3)
264   (JMP L523)
267   L267
267   (CONST 24)                          ; $NEGATIVE
269   (JMP L320)
271   L271
271   (CONST 26)                          ; $POSITIVE
273   (JMP L320)
275   L275
275   (CONST&PUSH 3)                      ; -1
276   (LOAD&PUSH 6)
277   (CALL2&PUSH 28)                     ; POWER
279   (LOAD&CAR&PUSH 2)
281   (CALL1&PUSH 20)                     ; NEG
283   (LOAD&PUSH 7)
284   (CALL2&PUSH 28)                     ; POWER
286   (CALL2&PUSH 29)                     ; MUL2
288   (CALL1 2)                           ; RISPLIT
290   (SKIP 1)
292   (JMP L523)
295   L295
295   (CONST&PUSH 8)                      ; 0
296   (LOAD&PUSH 6)
297   (CALL2&PUSH 28)                     ; POWER
299   (CONST 8)                           ; 0
300   (JMP L335)
302   L302
302   (LOAD&CDR&PUSH 0)
304   (JMPIFNOTEQTO 8 L354)               ; 0
307   (LOAD&CAR&PUSH 0)
309   (CALL1&JMPIF 23 L267)               ; MNEGP
312   (GETVALUE 25)                       ; IMPLICIT-REAL
314   (JMPIF L271)
316   (LOAD&CAR&PUSH 0)
318   (CALL1 27)                          ; ASKSIGN
320   L320
320   (PUSH)
321   (LOAD&PUSH 0)
322   (JMPIFEQTO 24 L275)                 ; $NEGATIVE
325   (LOAD&PUSH 0)
326   (JMPIFEQTO 30 L295)                 ; $ZERO
329   (LOAD&CAR&PUSH 1)
331   (LOAD&PUSH 6)
332   (CALL2&PUSH 28)                     ; POWER
334   (CONST 8)                           ; 0
335   L335
335   (CONS)
336   (SKIP 1)
338   (JMP L523)
341   L341
341   (LOAD 0)
342   (NOT)
343   (JMP L398)
345   L345
345   (T)
346   (JMP L398)
348   L348
348   (CONST&PUSH 10)                     ; 2
349   (LOAD&PUSH 4)
350   (CONST 10)                          ; 2
351   (JMP L424)
354   L354
354   (LOAD&PUSH 0)
355   (CALL1&PUSH 4)                      ; SPABS
357   (LOAD 5)
358   (CDR)
359   (CAR&PUSH)
360   (CALLS2&PUSH 158)                   ; ABS
362   (LOAD 6)
363   (CDR)
364   (CAR&PUSH)
365   (CONST&PUSH 3)                      ; -1
366   (CALLSR&PUSH 1 48)                  ; >
369   (LOAD&PUSH 2)
370   (CONST&PUSH 31)                     ; ((RAT SIMP) 1 2)
372   (CALL2&PUSH 28)                     ; POWER
374   (LOAD&PUSH 0)
375   (LOAD&CAR&PUSH 5)
377   (CALL2&PUSH 11)                     ; ADD
379   (CONST&PUSH 31)                     ; ((RAT SIMP) 1 2)
381   (CALL2&PUSH 28)                     ; POWER
383   (LOAD&CDR&PUSH 5)
385   (CALL1&PUSH 27)                     ; ASKSIGN
387   (CONST 24)                          ; $NEGATIVE
389   (EQ)
390   (PUSH)
391   (LOAD&JMPIF 3 L341)
394   (LOAD&JMPIF 0 L345)
397   (NIL)
398   L398
398   (STORE 0)
399   (LOAD&PUSH 2)
400   (LOAD&CAR&PUSH 7)
402   (CALL2&PUSH 32)                     ; SUB
404   (CONST&PUSH 31)                     ; ((RAT SIMP) 1 2)
406   (CALL2&PUSH 28)                     ; POWER
408   (CALL2 33)                          ; PORM
410   (CONS&PUSH)
411   (LOAD&PUSH 3)
412   (CALL2&PUSH 19)                     ; EXPANINTEXPT
414   (LOAD&JMPIF 2 L348)
418   (CONST&PUSH 10)                     ; 2
419   (LOAD&PUSH 5)
420   (CALL2&PUSH 6)                      ; MUL
422   (LOAD&PUSH 4)
423   (CONST 10)                          ; 2
424   L424
424   (PUSH)
425   (CALL2&PUSH 5)                      ; DIV
427   (CALL2&PUSH 28)                     ; POWER
429   (CALL2 34)                          ; DIVCARCDR
431   (SKIP 4)
433   (JMP L523)
436   L436
436   (T)
437   (BIND 35)                           ; $NUMER
439   (LOAD&PUSH 3)
440   (LOAD&PUSH 8)
441   (CALL2 36)                          ; EXPTRL
443   (UNBIND1)
444   (PUSH)
445   (CALL1 2)                           ; RISPLIT
447   (JMP L523)
450   L450
450   (CONST&PUSH 38)                     ; $%E
452   (LOAD&CDR&PUSH 1)
454   (LOAD&CDR&PUSH 3)
456   (CONST&PUSH 3)                      ; -1
457   (CALL2&PUSH 6)                      ; MUL
459   (CALL2&PUSH 6)                      ; MUL
461   (CALL2&PUSH 9)                      ; POWERS
463   (LOAD&CAR&PUSH 1)
465   (LOAD&CAR&PUSH 3)
467   (CALL2&PUSH 9)                      ; POWERS
469   (CALL2&PUSH 6)                      ; MUL
471   (LOAD&CDR&PUSH 2)
473   (CONST&PUSH 39)                     ; (%LOG)
475   (LOAD&CAR&PUSH 3)
477   (LIST&PUSH 2)
479   (CONST&PUSH 15)                     ; 1
480   (T&PUSH)
481   (CALL&PUSH 3 40)                    ; SIMPLN
484   (CALL2&PUSH 6)                      ; MUL
486   (LOAD&CAR&PUSH 3)
488   (LOAD&CDR&PUSH 3)
490   (CALL2&PUSH 6)                      ; MUL
492   (CALL2&PUSH 11)                     ; ADD
494   (LOAD&PUSH 1)
495   (CONST&PUSH 41)                     ; (%COS)
497   (LOAD&PUSH 2)
498   (LIST&PUSH 2)
500   (CONST&PUSH 15)                     ; 1
501   (T&PUSH)
502   (CALL&PUSH 3 16)                    ; SIMP-%COS
505   (CALL2&PUSH 6)                      ; MUL
507   (LOAD&PUSH 2)
508   (CONST&PUSH 42)                     ; (%SIN)
510   (LOAD&PUSH 3)
511   (LIST&PUSH 2)
513   (CONST&PUSH 15)                     ; 1
514   (T&PUSH)
515   (CALL&PUSH 3 18)                    ; SIMP-%SIN
518   (CALL2 6)                           ; MUL
520   (CONS)
521   (SKIP 4)
523   L523
523   (SKIP 1)
525   (UNBIND1)
526   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RISPLIT-NOUN (L) ...)-22|
(CONST 0) = RISPLIT-NOUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISPLIT-NOUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISPLIT-NOUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISPLIT-NOUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISPLIT-NOUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISPLIT-NOUN
8     (SKIP&RET 1)


Disassembly of function RISPLIT-NOUN
(CONST 0) = (%REALPART)
(CONST 1) = SIMPLIFY
(CONST 2) = (%IMAGPART)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (%REALPART)
1     (LOAD&PUSH 2)
2     (LIST&PUSH 2)
4     (CALL1&PUSH 1)                      ; SIMPLIFY
6     (CONST&PUSH 2)                      ; (%IMAGPART)
7     (LOAD&PUSH 3)
8     (LIST&PUSH 2)
10    (CALL1 1)                           ; SIMPLIFY
12    (CONS)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ABSARG1 (ARG) ...)-23|
(CONST 0) = ABSARG1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ABSARG1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ABSARG1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ABSARG1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ABSARG1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ABSARG1
8     (SKIP&RET 1)


Disassembly of function ABSARG1
(CONST 0) = $KEEPFLOAT
(CONST 1) = $%I
(CONST 2) = FREE
(CONST 3) = SRATSIMP
(CONST 4) = CSIGN
(CONST 5) = IMPLICIT-REAL
(CONST 6) = 0
(CONST 7) = ($NOTEQUAL)
(CONST 8) = (0)
(CONST 9) = ASSUME
(CONST 10) = ABSARG
(CONST 11) = ($NOTEQUAL)
(CONST 12) = (0)
(CONST 13) = FORGET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (IMPLICIT-REAL)
51 byte-code instructions:
0     (LOAD&PUSH 1)
1     (T)
2     (BIND 0)                            ; $KEEPFLOAT
4     (LOAD&PUSH 5)
5     (CONST&PUSH 1)                      ; $%I
6     (CALL2&JMPIF 2 L18)                 ; FREE
9     (LOAD&PUSH 5)
10    (CALL1 3)                           ; SRATSIMP
12    (STORE 3)
13    (PUSH)
14    (CONST&PUSH 1)                      ; $%I
15    (CALL2&JMPIFNOT 2 L24)              ; FREE
18    L18
18    (LOAD&PUSH 3)
19    (CALL1&PUSH 4)                      ; CSIGN
21    (T)
22    (JMPIFNOTEQ L35)
24    L24
24    (LOAD&PUSH 5)
25    (CALL1 10)                          ; ABSARG
27    L27
27    (UNBIND1)
28    (SKIP&RET 3)
30    L30
30    (LOAD&PUSH 5)
31    (CONST 6)                           ; 0
32    (CONS)
33    (JMP L27)
35    L35
35    (LOAD 3)
36    (STORE 5)
37    (GETVALUE 5)                        ; IMPLICIT-REAL
39    (JMPIF L30)
41    (UNWIND-PROTECT-OPEN L55)
43    (CONST&PUSH 7)                      ; ($NOTEQUAL)
44    (LOAD&PUSH 8)
45    (CONST 8)                           ; (0)
46    (LIST*&PUSH 2)
48    (CALL1 9)                           ; ASSUME
50    (LOAD&PUSH 7)
51    (CALL1 10)                          ; ABSARG
53    (VALUES1)
54    (UNWIND-PROTECT-NORMAL-EXIT)
55    L55
55    (CONST&PUSH 11)                     ; ($NOTEQUAL)
56    (LOADI&PUSH 0 0 5)
60    (CONST 12)                          ; (0)
61    (LIST*&PUSH 2)
63    (CALL1 13)                          ; FORGET
65    (UNWIND-PROTECT-CLOSE)
66    (JMP L27)


Disassembly of function #:|(DEFUN RISPLIT (L) ...)-24|
(CONST 0) = RISPLIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RISPLIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RISPLIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RISPLIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RISPLIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RISPLIT
8     (SKIP&RET 1)


Disassembly of function RISPLIT
(CONST 0) = $COMPLEX
(CONST 1) = $DOMAIN
(CONST 2) = $M1PBRANCH
(CONST 3) = $LOGARC
(CONST 4) = $%I
(CONST 5) = 0
(CONST 6) = 1
(CONST 7) = DECL-COMPLEXP
(CONST 8) = RISPLIT-NOUN
(CONST 9) = RAT
(CONST 10) = MPLUS
(CONST 11) = RISPLIT-MPLUS
(CONST 12) = MTIMES
(CONST 13) = RISPLIT-TIMES
(CONST 14) = MEXPT
(CONST 15) = RISPLIT-EXPT
(CONST 16) = %LOG
(CONST 17) = ABSARG1
(CONST 18) = (%LOG)
(CONST 19) = SIMPLN
(CONST 20) = BIGFLOAT
(CONST 21) = (%INTEGRATE %DERIVATIVE %LAPLACE %SUM)
(CONST 22) = MEMQ
(CONST 23) = FREEL
(CONST 24) = SIMPLIFY
(CONST 25) = 
((%SIN %COSH %COS . %SINH) (%COS %COSH %SIN . %SINH) (%SINH %COS %COSH . %SIN)
 (%COSH %COS %SINH . %SIN))
(CONST 26) = ASSQ
(CONST 27) = SIMPLIFYA
(CONST 28) = MUL
(CONST 29) = %COS
(CONST 30) = NEG
(CONST 31) = (%TAN %TANH)
(CONST 32) = 2
(CONST 33) = %TAN
(CONST 34) = (%COSH)
(CONST 35) = (%COS)
(CONST 36) = SIMP-%COS
(CONST 37) = ADD
(CONST 38) = (%COS)
(CONST 39) = (%COSH)
(CONST 40) = -1
(CONST 41) = POWER
(CONST 42) = (%SIN)
(CONST 43) = SIMP-%SIN
(CONST 44) = (%SINH)
(CONST 45) = (%SINH)
(CONST 46) = (%SIN)
(CONST 47) = (%ATAN %CSC %SEC %COT %CSCH %SECH %COTH)
(CONST 48) = $ATAN2
(CONST 49) = DIV
(CONST 50) = ARCP
(CONST 51) = SSIMPLIFYA
(CONST 52) = SRATSIMP
(CONST 53) = FREE
(CONST 54) = %PLOG
(CONST 55) = (%LOG)
(CONST 56) = (%REALPART %IMAGPART MABS)
(CONST 57) = %ERF
(CONST 58) = (%ERF)
(CONST 59) = (%ERF)
(CONST 60) = SUB
(CONST 61) = MLIST
(CONST 62) = DSRL
(CONST 63) = $MATRIX
(CONST 64) = ($MATRIX SIMP)
(CONST 65) = DOT--RI
(CONST 66) = (MLESSP MLEQP MGREATERP MGEQP)
(CONST 67) = COVERSINEMYFOOT
(CONST 68) = RP-POLYLOGP
(CONST 69) = MQAPPLYP
(CONST 70) = SUBFUNNAME
(CONST 71) = $LI
(CONST 72) = MQAPPLY
(CONST 73) = %PRODUCT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (RP-POLYLOGP)
573 byte-code instructions:
0     L0
0     (CONST 0)                           ; $COMPLEX
1     (BIND 1)                            ; $DOMAIN
3     (T)
4     (BIND 2)                            ; $M1PBRANCH
6     (NIL)
7     (BIND 3)                            ; $LOGARC
9     (NIL&PUSH)
10    (LOAD 11)
11    (JMPIFATOM L203)
14    (LOAD 11)
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 9 L218)                  ; RAT
21    (LOAD 11)
22    (CAR)
23    (CAR&PUSH)
24    (JMPIFEQTO 10 L224)                 ; MPLUS
28    (LOAD 11)
29    (CAR)
30    (CAR&PUSH)
31    (JMPIFEQTO 12 L230)                 ; MTIMES
35    (LOAD 11)
36    (CAR)
37    (CAR&PUSH)
38    (JMPIFEQTO 14 L236)                 ; MEXPT
42    (LOAD 11)
43    (CAR)
44    (CAR&PUSH)
45    (JMPIFEQTO 16 L242)                 ; %LOG
49    (LOAD 11)
50    (CAR)
51    (CAR&PUSH)
52    (JMPIFEQTO 20 L265)                 ; BIGFLOAT
56    (LOAD 11)
57    (CAR)
58    (CAR&PUSH)
59    (CONST&PUSH 21)                     ; (%INTEGRATE %DERIVATIVE ...)
60    (CALL2&JMPIFNOT 22 L71)             ; MEMQ
63    (LOAD 11)
64    (CDR)
65    (CDR&PUSH)
66    (CONST&PUSH 4)                      ; $%I
67    (CALL2&JMPIF 23 L271)               ; FREEL
71    L71
71    (LOAD 11)
72    (CAR)
73    (CAR&PUSH)
74    (CONST&PUSH 25)                     ; (# # # ...)
75    (CALL2&PUSH 26)                     ; ASSQ
77    (LOAD&JMPIF 0 L359)
81    (SKIP 1)
83    (JMPIF1 L882)
86    (LOAD 11)
87    (CAR)
88    (CAR&PUSH)
89    (CONST&PUSH 31)                     ; (%TAN %TANH)
91    (CALL2&JMPIF 22 L493)               ; MEMQ
95    (LOAD 11)
96    (CAR)
97    (CAR&PUSH)
98    (CONST&PUSH 47)                     ; (%ATAN %CSC %SEC %COT %CSCH ...)
100   (CALL2&JMPIFNOT 22 L114)            ; MEMQ
103   (LOAD 11)
104   (CDR)
105   (CAR&PUSH)
106   (JSR L0)
109   (CDR&PUSH)
110   (JMPIFEQTO 5 L587)                  ; 0
114   L114
114   (LOAD 11)
115   (CAR)
116   (CAR&PUSH)
117   (JMPIFNOTEQTO 48 L137)              ; $ATAN2
120   (LOAD 11)
121   (CDR)
122   (CAR&PUSH)
123   (LOAD 12)
124   (CDR)
125   (CDR)
126   (CAR&PUSH)
127   (CALL2&PUSH 49)                     ; DIV
129   (JSR L0)
132   (CDR&PUSH)
133   (JMPIFEQTO 5 L593)                  ; 0
137   L137
137   (LOAD 11)
138   (CAR)
139   (CAR&PUSH)
140   (CALL1&JMPIF 50 L150)               ; ARCP
143   (LOAD 11)
144   (CAR)
145   (CAR&PUSH)
146   (JMPIFNOTEQTO 48 L774)              ; $ATAN2
150   L150
150   (T)
151   (BIND 3)                            ; $LOGARC
153   (LOAD&PUSH 14)
154   (CALL1 51)                          ; SSIMPLIFYA
156   (UNBIND1)
157   (PUSH)
158   (JSR&PUSH L0)
161   (LOAD 12)
162   (CAR)
163   (CAR&PUSH)
164   (JMPIFNOTEQTO 48 L177)              ; $ATAN2
167   (LOAD&CAR&PUSH 0)
169   (CALL1&PUSH 52)                     ; SRATSIMP
171   (LOAD&CDR&PUSH 1)
173   (CALL1 52)                          ; SRATSIMP
175   (CONS)
176   (STORE 0)
177   L177
177   (LOAD&PUSH 12)
178   (CONST&PUSH 4)                      ; $%I
179   (CALL2&JMPIFNOT 53 L599)            ; FREE
183   (LOAD&CDR&PUSH 0)
185   (JMPIFNOTEQTO 5 L599)               ; 0
189   (LOAD&PUSH 12)
190   (CONST 5)                           ; 0
191   L191
191   (CONS)
192   (SKIP 1)
194   (JMP L882)
197   L197
197   (CONST&PUSH 5)                      ; 0
198   (CONST 6)                           ; 1
199   (CONS)
200   (JMP L882)
203   L203
203   (LOAD&PUSH 11)
204   (JMPIFEQTO 4 L197)                  ; $%I
207   (LOAD&PUSH 11)
208   (CALL1&JMPIF 7 L874)                ; DECL-COMPLEXP
212   (LOAD&PUSH 11)
213   (CONST 5)                           ; 0
214   (CONS)
215   (JMP L882)
218   L218
218   (LOAD&PUSH 11)
219   (CONST 5)                           ; 0
220   (CONS)
221   (JMP L882)
224   L224
224   (LOAD&PUSH 11)
225   (CALL1 11)                          ; RISPLIT-MPLUS
227   (JMP L882)
230   L230
230   (LOAD&PUSH 11)
231   (CALL1 13)                          ; RISPLIT-TIMES
233   (JMP L882)
236   L236
236   (LOAD&PUSH 11)
237   (CALL1 15)                          ; RISPLIT-EXPT
239   (JMP L882)
242   L242
242   (LOAD 11)
243   (CDR)
244   (CAR&PUSH)
245   (CALL1&PUSH 17)                     ; ABSARG1
247   (LOAD&PUSH 0)
248   (CONST&PUSH 18)                     ; (%LOG)
249   (LOAD&CAR&PUSH 2)
251   (LIST&PUSH 2)
253   (CONST&PUSH 6)                      ; 1
254   (T&PUSH)
255   (CALL&PUSH 3 19)                    ; SIMPLN
258   (CALLS1 168)                        ; RPLACA
260   (SKIP 1)
262   (JMP L882)
265   L265
265   (LOAD&PUSH 11)
266   (CONST 5)                           ; 0
267   (CONS)
268   (JMP L882)
271   L271
271   (LOAD 11)
272   (CDR)
273   (CAR&PUSH)
274   (JSR&PUSH L0)
277   (LOAD 12)
278   (CAR)
279   (CAR&PUSH)
280   (NIL)
281   (CONS&PUSH)
282   (LOAD&CAR&PUSH 1)
284   (LOAD 14)
285   (CDR)
286   (CDR)
287   (LIST*&PUSH 2)
289   (CALL1&PUSH 24)                     ; SIMPLIFY
291   (LOAD 13)
292   (CAR)
293   (CAR&PUSH)
294   (NIL)
295   (CONS&PUSH)
296   (LOAD&CDR&PUSH 2)
298   (LOAD 15)
300   (CDR)
301   (CDR)
302   (LIST*&PUSH 2)
304   (CALL1 24)                          ; SIMPLIFY
306   (JMP L191)
309   L309
309   (LOAD&CAR&PUSH 1)
311   (LIST&PUSH 1)
313   (LOAD&CAR&PUSH 1)
315   (LIST&PUSH 2)
317   (T&PUSH)
318   (CALL2&PUSH 27)                     ; SIMPLIFYA
320   (CONST 5)                           ; 0
321   (JMP L436)
324   L324
324   (LOAD 3)
325   (CDR)
326   (CDR)
327   (CAR&PUSH)
328   (LIST&PUSH 1)
330   (LOAD&CAR&PUSH 3)
332   (LIST&PUSH 2)
334   (T&PUSH)
335   (CALL2&PUSH 27)                     ; SIMPLIFYA
337   (LOAD 4)
338   (CDR)
339   (CDR)
340   (CDR&PUSH)
341   (LIST&PUSH 1)
343   (LOAD&CDR&PUSH 4)
345   (LIST&PUSH 2)
347   (T&PUSH)
348   (CALL2&PUSH 27)                     ; SIMPLIFYA
350   (CALL2&PUSH 28)                     ; MUL
352   (CALL1 30)                          ; NEG
354   (SKIP 1)
356   (JMP L436)
359   L359
359   (LOAD 12)
360   (CDR)
361   (CAR&PUSH)
362   (JSR&PUSH L0)
365   (LOAD&CDR&PUSH 0)
367   (JMPIFEQTO 5 L309)                  ; 0
370   (LOAD&CAR&PUSH 1)
372   (LIST&PUSH 1)
374   (LOAD&CAR&PUSH 1)
376   (LIST&PUSH 2)
378   (T&PUSH)
379   (CALL2&PUSH 27)                     ; SIMPLIFYA
381   (LOAD 2)
382   (CDR)
383   (CAR&PUSH)
384   (LIST&PUSH 1)
386   (LOAD&CDR&PUSH 2)
388   (LIST&PUSH 2)
390   (T&PUSH)
391   (CALL2&PUSH 27)                     ; SIMPLIFYA
393   (CALL2&PUSH 28)                     ; MUL
395   (LOAD 14)
396   (CAR)
397   (CAR&PUSH)
398   (CONST 29)                          ; %COS
400   (EQ)
401   (PUSH)
402   (LOAD&JMPIF 0 L324)
406   (LOAD 3)
407   (CDR)
408   (CDR)
409   (CAR&PUSH)
410   (LIST&PUSH 1)
412   (LOAD&CAR&PUSH 3)
414   (LIST&PUSH 2)
416   (T&PUSH)
417   (CALL2&PUSH 27)                     ; SIMPLIFYA
419   (LOAD 4)
420   (CDR)
421   (CDR)
422   (CDR&PUSH)
423   (LIST&PUSH 1)
425   (LOAD&CDR&PUSH 4)
427   (LIST&PUSH 2)
429   (T&PUSH)
430   (CALL2&PUSH 27)                     ; SIMPLIFYA
432   (CALL2 28)                          ; MUL
434   (SKIP 1)
436   L436
436   (CONS)
437   (SKIP 2)
439   (VALUES1)
440   (JMP L882)
443   L443
443   (LOAD&PUSH 12)
444   (CONST 5)                           ; 0
445   (JMP L191)
448   L448
448   (CONST&PUSH 34)                     ; (%COSH)
450   (LOAD&PUSH 1)
451   (LIST&PUSH 2)
453   (T&PUSH)
454   (CALL2&PUSH 27)                     ; SIMPLIFYA
456   (CONST&PUSH 35)                     ; (%COS)
458   (LOAD&PUSH 3)
459   (LIST&PUSH 2)
461   (CONST&PUSH 6)                      ; 1
462   (T&PUSH)
463   (CALL 3 36)                         ; SIMP-%COS
466   (JMP L541)
469   L469
469   (CONST&PUSH 42)                     ; (%SIN)
471   (LOAD&PUSH 3)
472   (LIST&PUSH 2)
474   (CONST&PUSH 6)                      ; 1
475   (T&PUSH)
476   (CALL&PUSH 3 43)                    ; SIMP-%SIN
479   (LOAD&PUSH 1)
480   (CALL2&PUSH 28)                     ; MUL
482   (CONST&PUSH 44)                     ; (%SINH)
484   (LOAD&PUSH 3)
485   (LIST&PUSH 2)
487   (T&PUSH)
488   (CALL2 27)                          ; SIMPLIFYA
490   (JMP L577)
493   L493
493   (LOAD 11)
494   (CDR)
495   (CAR&PUSH)
496   (JSR&PUSH L0)
499   (LOAD&CDR&PUSH 0)
501   (JMPIFEQTO 5 L443)                  ; 0
504   (LOAD&CAR&PUSH 0)
506   (CONST&PUSH 32)                     ; 2
508   (CALL2&PUSH 28)                     ; MUL
510   (LOAD&CDR&PUSH 1)
512   (CONST&PUSH 32)                     ; 2
514   (CALL2&PUSH 28)                     ; MUL
516   (LOAD 14)
517   (CAR)
518   (CAR&PUSH)
519   (JMPIFEQTO 33 L448)                 ; %TAN
523   (CONST&PUSH 38)                     ; (%COS)
525   (LOAD&PUSH 1)
526   (LIST&PUSH 2)
528   (CONST&PUSH 6)                      ; 1
529   (T&PUSH)
530   (CALL&PUSH 3 36)                    ; SIMP-%COS
533   (CONST&PUSH 39)                     ; (%COSH)
535   (LOAD&PUSH 3)
536   (LIST&PUSH 2)
538   (T&PUSH)
539   (CALL2 27)                          ; SIMPLIFYA
541   L541
541   (PUSH)
542   (CALL2&PUSH 37)                     ; ADD
544   (CONST&PUSH 40)                     ; -1
546   (CALL2&PUSH 41)                     ; POWER
548   (LOAD 15)
550   (CAR)
551   (CAR&PUSH)
552   (JMPIFEQTO 33 L469)                 ; %TAN
556   (CONST&PUSH 45)                     ; (%SINH)
558   (LOAD&PUSH 3)
559   (LIST&PUSH 2)
561   (T&PUSH)
562   (CALL2&PUSH 27)                     ; SIMPLIFYA
564   (LOAD&PUSH 1)
565   (CALL2&PUSH 28)                     ; MUL
567   (CONST&PUSH 46)                     ; (%SIN)
569   (LOAD&PUSH 3)
570   (LIST&PUSH 2)
572   (CONST&PUSH 6)                      ; 1
573   (T&PUSH)
574   (CALL 3 43)                         ; SIMP-%SIN
577   L577
577   (PUSH)
578   (LOAD&PUSH 2)
579   (CALL2 28)                          ; MUL
581   (CONS)
582   (SKIP 4)
584   (JMP L882)
587   L587
587   (LOAD&PUSH 11)
588   (CONST 5)                           ; 0
589   (CONS)
590   (JMP L882)
593   L593
593   (LOAD&PUSH 11)
594   (CONST 5)                           ; 0
595   (CONS)
596   (JMP L882)
599   L599
599   (POP)
600   (JMP L882)
603   L603
603   (CONST&PUSH 55)                     ; (%LOG)
605   (LOAD 12)
606   (CDR)
607   (CONS&PUSH)
608   (JSR L0)
611   (JMP L882)
614   L614
614   (LOAD&PUSH 11)
615   (CONST 5)                           ; 0
616   (CONS)
617   (JMP L882)
620   L620
620   (LOAD 11)
621   (CDR)
622   (CAR&PUSH)
623   (JSR&PUSH L0)
626   (PUSH-NIL 2)
628   (CONST&PUSH 58)                     ; (%ERF)
630   (LOAD&CAR&PUSH 3)
632   (CONST&PUSH 4)                      ; $%I
633   (LOAD&CDR&PUSH 5)
635   (CALL2&PUSH 28)                     ; MUL
637   (CALL2&PUSH 37)                     ; ADD
639   (LIST&PUSH 2)
641   (CALL1 24)                          ; SIMPLIFY
643   (STORE 1)
644   (CONST&PUSH 59)                     ; (%ERF)
646   (LOAD&CAR&PUSH 3)
648   (CONST&PUSH 4)                      ; $%I
649   (LOAD&CDR&PUSH 5)
651   (CALL2&PUSH 28)                     ; MUL
653   (CALL2&PUSH 60)                     ; SUB
655   (LIST&PUSH 2)
657   (CALL1 24)                          ; SIMPLIFY
659   (STORE 0)
660   (LOAD&PUSH 1)
661   (LOAD&PUSH 1)
662   (CALL2&PUSH 37)                     ; ADD
664   (CONST&PUSH 32)                     ; 2
666   (CALL2&PUSH 49)                     ; DIV
668   (LOAD&PUSH 2)
669   (LOAD&PUSH 2)
670   (CALL2&PUSH 60)                     ; SUB
672   (CONST&PUSH 32)                     ; 2
674   (CONST&PUSH 4)                      ; $%I
675   (CALL2&PUSH 28)                     ; MUL
677   (CALL2 49)                          ; DIV
679   (CONS)
680   (SKIP 3)
682   (JMP L882)
685   L685
685   (LOAD&PUSH 11)
686   (CALL1 62)                          ; DSRL
688   (JMP L882)
691   L691
691   (CONST&SYMBOL-FUNCTION&PUSH 62)     ; DSRL
693   (LOAD&CDR&PUSH 12)
695   (CALLSR&PUSH 0 22)                  ; MAPCAR
698   (CONST&PUSH 64)                     ; ($MATRIX SIMP)
700   (CALL2 65)                          ; DOT--RI
702   (JMP L882)
705   L705
705   (LOAD 11)
706   (CDR)
707   (CAR&PUSH)
708   (JSR&PUSH L0)
711   (LOAD 12)
712   (CDR)
713   (CDR)
714   (CAR&PUSH)
715   (JSR&PUSH L0)
718   (LOAD 13)
719   (CAR)
720   (CAR&PUSH)
721   (NIL)
722   (CONS&PUSH)
723   (LOAD&CAR&PUSH 2)
725   (LOAD&CAR&PUSH 2)
727   (LIST&PUSH 3)
729   (CALL1&PUSH 24)                     ; SIMPLIFY
731   (LOAD 14)
732   (CAR)
733   (CAR&PUSH)
734   (NIL)
735   (CONS&PUSH)
736   (LOAD&CDR&PUSH 3)
738   (LOAD&CDR&PUSH 3)
740   (LIST&PUSH 3)
742   (CALL1 24)                          ; SIMPLIFY
744   (CONS)
745   (SKIP 2)
747   (JMP L882)
750   L750
750   (PUSH)
751   (JSR L0)
754   (SKIP 1)
756   (JMPIF1 L882)
759   (JMP L831)
762   L762
762   (LOAD&PUSH 11)
763   (CONST 5)                           ; 0
764   (CONS)
765   (JMP L882)
768   L768
768   (LOAD 11)
769   (CDR)
770   (CAR)
771   (JMP L854)
774   L774
774   (LOAD 11)
775   (CAR)
776   (CAR&PUSH)
777   (JMPIFEQTO 54 L603)                 ; %PLOG
781   (LOAD 11)
782   (CAR)
783   (CAR&PUSH)
784   (CONST&PUSH 56)                     ; (%REALPART %IMAGPART MABS)
786   (CALL2&JMPIF 22 L614)               ; MEMQ
790   (LOAD 11)
791   (CAR)
792   (CAR&PUSH)
793   (JMPIFEQTO 57 L620)                 ; %ERF
797   (LOAD 11)
798   (CAR)
799   (CAR&PUSH)
800   (JMPIFEQTO 61 L685)                 ; MLIST
804   (LOAD 11)
805   (CAR)
806   (CAR&PUSH)
807   (JMPIFEQTO 63 L691)                 ; $MATRIX
811   (LOAD 11)
812   (CAR)
813   (CAR&PUSH)
814   (CONST&PUSH 66)                     ; (MLESSP MLEQP MGREATERP MGEQP)
816   (CALL2&JMPIF 22 L705)               ; MEMQ
820   (LOAD&PUSH 11)
821   (CALL1&PUSH 67)                     ; COVERSINEMYFOOT
823   (LOAD&JMPIF 0 L750)
827   (SKIP 1)
829   (JMPIF1 L882)
831   L831
831   (GETVALUE 68)                       ; RP-POLYLOGP
833   (JMPIFNOT L846)
835   (LOAD&PUSH 11)
836   (CALL1&JMPIFNOT 69 L846)            ; MQAPPLYP
839   (LOAD&PUSH 11)
840   (CALL1&PUSH 70)                     ; SUBFUNNAME
842   (JMPIFEQTO 71 L762)                 ; $LI
846   L846
846   (LOAD 11)
847   (CAR)
848   (CAR&PUSH)
849   (JMPIFEQTO 72 L768)                 ; MQAPPLY
853   (LOAD 11)
854   L854
854   (CAR)
855   (CAR)
856   (STORE 0)
857   (PUSH)
858   (CALL1&JMPIF 7 L874)                ; DECL-COMPLEXP
861   (LOAD 11)
862   (CAR)
863   (CAR&PUSH)
864   (JMPIFNOTEQTO 73 L879)              ; %PRODUCT
867   (LOAD 11)
868   (CDR)
869   (CAR&PUSH)
870   (CONST&PUSH 4)                      ; $%I
871   (CALL2&JMPIF 53 L879)               ; FREE
874   L874
874   (LOAD&PUSH 11)
875   (CALL1 8)                           ; RISPLIT-NOUN
877   (JMP L882)
879   L879
879   (LOAD&PUSH 11)
880   (CONST 5)                           ; 0
881   (CONS)
882   L882
882   (SKIP 1)
884   (UNBIND 3)
886   (SKIP&RET 2)


Disassembly of function #:|(DEFUN COVERSINEMYFOOT (L) ...)-25|
(CONST 0) = COVERSINEMYFOOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COVERSINEMYFOOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COVERSINEMYFOOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COVERSINEMYFOOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COVERSINEMYFOOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COVERSINEMYFOOT
8     (SKIP&RET 1)


Disassembly of function COVERSINEMYFOOT
(CONST 0) = (%CSC %SEC %COT %CSCH %SECH %COTH)
(CONST 1) = MEMQ
(CONST 2) = RECIP
(CONST 3) = 1
(CONST 4) = DIV
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
25 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD 2)
2     (CAR)
3     (CAR&PUSH)
4     (CONST&PUSH 0)                      ; (%CSC %SEC %COT %CSCH %SECH %COTH)
5     (CALL2&JMPIFNOT 1 L19)              ; MEMQ
8     (LOAD 2)
9     (CAR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; RECIP
12    (PUSH-UNBOUND 1)
14    (CALLS2&STORE 132 0)                ; GET
17    (JMPIF L22)
19    L19
19    (NIL)
20    (SKIP&RET 3)
22    L22
22    (CONST&PUSH 3)                      ; 1
23    (LOAD&PUSH 1)
24    (LIST&PUSH 1)
26    (LOAD 4)
27    (CDR)
28    (CONS&PUSH)
29    (CALL2 4)                           ; DIV
31    (SKIP&RET 3)


Disassembly of function #:|(DEFUN POWERS (C D) ...)-26|
(CONST 0) = POWERS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POWERS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; POWERS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POWERS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POWERS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; POWERS
8     (SKIP&RET 1)


Disassembly of function POWERS
(CONST 0) = 1
(CONST 1) = 0
(CONST 2) = POWER
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L22)                   ; 1
4     (LOAD&PUSH 1)
5     (JMPIFEQTO 1 L25)                   ; 0
8     (LOAD&PUSH 2)
9     (JMPIFEQTO 1 L28)                   ; 0
12    (LOAD&PUSH 2)
13    (JMPIFEQTO 0 L31)                   ; 1
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 2)
18    (CALL2 2)                           ; POWER
20    (SKIP&RET 3)
22    L22
22    (LOAD 2)
23    (SKIP&RET 3)
25    L25
25    (CONST 0)                           ; 1
26    (SKIP&RET 3)
28    L28
28    (CONST 1)                           ; 0
29    (SKIP&RET 3)
31    L31
31    (CONST 0)                           ; 1
32    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SPABS (SP) ...)-27|
(CONST 0) = SPABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPABS
8     (SKIP&RET 1)


Disassembly of function SPABS
(CONST 0) = 2
(CONST 1) = POWERS
(CONST 2) = ADD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&CAR&PUSH 1)
2     (CONST&PUSH 0)                      ; 2
3     (CALL2&PUSH 1)                      ; POWERS
5     (LOAD&CDR&PUSH 2)
7     (CONST&PUSH 0)                      ; 2
8     (CALL2&PUSH 1)                      ; POWERS
10    (CALL2 2)                           ; ADD
12    (SKIP&RET 2)


Disassembly of function #:|(PROGN (SETQ NEGP* '#) (NCONC NEGP* NEGP*) ...)-28-1|
(CONST 0) = (NIL NIL T T)
(CONST 1) = NEGP*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (NEGP*)
4 byte-code instructions:
0     (CONST 0)                           ; (NIL NIL T T)
1     (SETVALUE 1)                        ; NEGP*
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(PROGN (SETQ NEGP* '#) (NCONC NEGP* NEGP*) ...)-28-2|
(CONST 0) = NEGP*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NEGP*)
5 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; NEGP*
2     (GETVALUE&PUSH 0)                   ; NEGP*
4     (CALLSR 2 35)                       ; NCONC
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function #:|(PROGN (SETQ NEGP* '#) (NCONC NEGP* NEGP*) ...)-28-3|
(CONST 0) = 0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; 0
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DIVCARCDR (A B) ...)-29|
(CONST 0) = DIVCARCDR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIVCARCDR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIVCARCDR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIVCARCDR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIVCARCDR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIVCARCDR
8     (SKIP&RET 1)


Disassembly of function DIVCARCDR
(CONST 0) = DIV
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&CAR&PUSH 2)
2     (LOAD&PUSH 2)
3     (CALL2&PUSH 0)                      ; DIV
5     (LOAD&CDR&PUSH 3)
7     (LOAD&PUSH 3)
8     (CALL2 0)                           ; DIV
10    (CONS)
11    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (NOTYPE #))-30|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN EXPANINTEXPT (BAS N) ...)-31|
(CONST 0) = EXPANINTEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPANINTEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPANINTEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPANINTEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPANINTEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPANINTEXPT
8     (SKIP&RET 1)


Disassembly of function EXPANINTEXPT
(CONST 0) = BAS
(CONST 1) = 1
(CONST 2) = NEGP*
(CONST 3) = 0
(CONST 4) = POWERS
(CONST 5) = MUL
(CONST 6) = NEG
(CONST 7) = QUOT
(CONST 8) = ADDN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NEGP* BAS)
86 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; BAS
3     (LOAD&PUSH 4)
4     (CONST&PUSH 1)                      ; 1
5     (CALLSR&JMPIF 1 45 L26)             ; =
9     (GETVALUE 0)                        ; BAS
11    (CAR&PUSH)
12    (GETVALUE 0)                        ; BAS
14    (CDR&PUSH)
15    (CONST&PUSH 1)                      ; 1
16    (LOAD&PUSH 7)
17    (CONST&PUSH 1)                      ; 1
18    (T&PUSH)
19    (GETVALUE&PUSH 2)                   ; NEGP*
21    (PUSH-NIL 2)
23    (JMP L105)
26    L26
26    (GETVALUE 0)                        ; BAS
28    (JMP L122)
31    L31
31    (LOAD&PUSH 7)
32    (LOAD&PUSH 10)
33    (LOAD&PUSH 8)
34    (CALL2&PUSH 4)                      ; POWERS
36    (LOAD&PUSH 10)
37    (LOAD&DEC&PUSH 8)
39    (CALL2&PUSH 4)                      ; POWERS
41    (CALL&PUSH 3 5)                     ; MUL
44    (CALL1 6)                           ; NEG
46    (JMP L73)
48    L48
48    (LOAD 2)
49    (JMP L78)
51    L51
51    (LOAD 0)
52    (STORE 2)
53    (JMP L84)
55    L55
55    (LOAD&CAR&PUSH 2)
57    (LOAD&JMPIF 0 L31)
60    (LOAD&PUSH 7)
61    (LOAD&PUSH 10)
62    (LOAD&PUSH 8)
63    (CALL2&PUSH 4)                      ; POWERS
65    (LOAD&PUSH 10)
66    (LOAD&DEC&PUSH 8)
68    (CALL2&PUSH 4)                      ; POWERS
70    (CALL 3 5)                          ; MUL
73    L73
73    (STORE 0)
74    (LOAD&JMPIF 4 L48)
77    (LOAD 1)
78    L78
78    (CONS&PUSH)
79    (LOAD&JMPIF 4 L51)
82    (LOAD 0)
83    (STORE 1)
84    L84
84    (SKIP 1)
86    (LOAD&PUSH 6)
87    (LOAD&PUSH 6)
88    (CALLSR&PUSH 2 55)                  ; *
91    (LOAD&PUSH 5)
92    (CALL2&PUSH 7)                      ; QUOT
94    (LOAD&CDR&STORE 3)
96    (LOAD 4)
97    (NOT)
98    (STORE 4)
99    (LOAD&INC&STORE 5)
101   (LOAD&DEC&STORE 6)
103   (POP&STORE 6)
105   L105
105   (LOAD&PUSH 5)
106   (CONST&PUSH 3)                      ; 0
107   (CALLSR&JMPIFNOT 1 47 L55)          ; <
111   (LOAD&PUSH 1)
112   (T&PUSH)
113   (CALL2&PUSH 8)                      ; ADDN
115   (LOAD&PUSH 1)
116   (T&PUSH)
117   (CALL2 8)                           ; ADDN
119   (CONS)
120   (SKIP 9)
122   L122
122   (UNBIND1)
123   (SKIP&RET 3)


Disassembly of function #:|(DEFUN 2PISTRIP (EXP) ...)-32|
(CONST 0) = 2PISTRIP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 2PISTRIP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2PISTRIP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 2PISTRIP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 2PISTRIP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 2PISTRIP
8     (SKIP&RET 1)


Disassembly of function 2PISTRIP
(CONST 0) = MTIMES
(CONST 1) = MNUMP
(CONST 2) = $%PI
(CONST 3) = 2
(CONST 4) = MUL
(CONST 5) = RAT
(CONST 6) = (RAT SIMP)
(CONST 7) = MPLUS
(CONST 8) = 2PIREC
(CONST 9) = ADDN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
89 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L16)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 0 L30)                   ; MTIMES
9     (LOAD 1)
10    (CAR)
11    (CAR&PUSH)
12    (JMPIFEQTO 7 L101)                  ; MPLUS
16    L16
16    (LOAD 1)
17    (SKIP&RET 2)
19    L19
19    (LOAD 1)
20    (CDR)
21    (CAR&PUSH)
22    (CONST&PUSH 3)                      ; 2
23    (CALLS2&PUSH 184)                   ; REM
25    (CALLS2&PUSH 158)                   ; ABS
27    (CONST 2)                           ; $%PI
28    (JMP L93)
30    L30
30    (LOAD 1)
31    (CDR)
32    (CAR&PUSH)
33    (CALL1&JMPIFNOT 1 L16)              ; MNUMP
36    (LOAD 1)
37    (CDR)
38    (CDR)
39    (CAR&PUSH)
40    (JMPIFNOTEQTO 2 L16)                ; $%PI
43    (LOAD 1)
44    (CDR)
45    (CDR)
46    (CDR)
47    (JMPIF L16)
49    (LOAD 1)
50    (CDR)
51    (CAR&PUSH)
52    (CALLS2&JMPIF 12 L19)               ; INTEGERP
55    (LOAD 1)
56    (CDR)
57    (CAR)
58    (CAR)
59    (CAR&PUSH)
60    (JMPIFNOTEQTO 5 L16)                ; RAT
63    (CONST&PUSH 6)                      ; (RAT SIMP)
64    (LOAD 2)
65    (CDR)
66    (CAR)
67    (CDR)
68    (CAR&PUSH)
69    (CALLS2&PUSH 150)                   ; 1+
71    (CONST&PUSH 3)                      ; 2
72    (LOAD 4)
73    (CDR)
74    (CAR)
75    (CDR)
76    (CDR)
77    (CAR&PUSH)
78    (CALLSR&PUSH 2 55)                  ; *
81    (CALLS2&PUSH 184)                   ; REM
83    (CALLS2&PUSH 151)                   ; 1-
85    (LOAD 3)
86    (CDR)
87    (CAR)
88    (CDR)
89    (CDR)
90    (LIST*&PUSH 2)
92    (CONST 2)                           ; $%PI
93    L93
93    (PUSH)
94    (CALL2 4)                           ; MUL
96    (SKIP&RET 2)
98    L98
98    (LOAD 2)
99    (SKIP&RET 3)
101   L101
101   (LOAD&CDR&PUSH 1)
103   (CALL1&PUSH 8)                      ; 2PIREC
105   (LOAD&PUSH 0)
106   (LOAD 3)
107   (CDR)
108   (JMPIFEQ L98)
110   (LOAD&PUSH 0)
111   (T&PUSH)
112   (CALL2 9)                           ; ADDN
114   (SKIP&RET 3)


Disassembly of function #:|(DEFUN 2PIREC (FM) ...)-33|
(CONST 0) = 2PIREC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE 2PIREC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2PIREC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; 2PIREC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE 2PIREC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; 2PIREC
8     (SKIP&RET 1)


Disassembly of function 2PIREC
(CONST 0) = 2PISTRIP
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
48 byte-code instructions:
0     L0
0     (LOAD 1)
1     (CDR)
2     (JMPIFNOT L40)
4     (LOAD&CAR&PUSH 1)
6     (CALL1&PUSH 0)                      ; 2PISTRIP
8     (LOAD&CDR&PUSH 2)
10    (JSR&PUSH L0)
12    (LOAD&JMPIFNOT 0 L58)
15    (LOAD&PUSH 0)
16    (JMPIFEQTO 1 L58)                   ; 0
19    (LOAD&PUSH 0)
20    (LOAD 4)
21    (CDR)
22    (JMPIFNOTEQ L29)
24    (LOAD&PUSH 1)
25    (LOAD 4)
26    (CAR)
27    (JMPIFEQ L61)
29    L29
29    (LOAD&PUSH 1)
30    (LOAD 1)
31    (CONS)
32    (SKIP&RET 4)
34    L34
34    (LOAD 2)
35    (SKIP&RET 3)
37    L37
37    (NIL)
38    (SKIP&RET 3)
40    L40
40    (LOAD&CAR&PUSH 1)
42    (CALL1&PUSH 0)                      ; 2PISTRIP
44    (LOAD&PUSH 0)
45    (LOAD 3)
46    (CAR)
47    (JMPIFEQ L34)
49    (LOAD&PUSH 0)
50    (JMPIFEQTO 1 L37)                   ; 0
53    (LOAD&PUSH 0)
54    (LIST 1)
56    (SKIP&RET 3)
58    L58
58    (LOAD 1)
59    (SKIP&RET 4)
61    L61
61    (LOAD 3)
62    (SKIP&RET 4)


Disassembly of function #:|(DEFUN ARGNUM (N) ...)-34|
(CONST 0) = ARGNUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARGNUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARGNUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARGNUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARGNUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARGNUM
8     (SKIP&RET 1)


Disassembly of function ARGNUM
(CONST 0) = $%PI
(CONST 1) = SIMPLIFY
(CONST 2) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 147 L7)               ; MINUSP
4     (CONST 2)                           ; 0
5     (SKIP&RET 2)
7     L7
7     (CONST&PUSH 0)                      ; $%PI
8     (CALL1 1)                           ; SIMPLIFY
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ABSARG (L) ...)-35|
(CONST 0) = ABSARG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ABSARG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ABSARG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ABSARG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ABSARG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ABSARG
8     (SKIP&RET 1)


Disassembly of function ABSARG
(CONST 0) = $EXPAND
(CONST 1) = $%I
(CONST 2) = 1
(CONST 3) = ((MTIMES) ((RAT SIMP) 1 2) $%PI)
(CONST 4) = SIMPLIFY
(CONST 5) = ARGNUM
(CONST 6) = ($%E $%PI)
(CONST 7) = MEMQ
(CONST 8) = 0
(CONST 9) = ABSFLAG
(CONST 10) = (MABS)
(CONST 11) = SIMPABS
(CONST 12) = RISCHP
(CONST 13) = $POSITIVE
(CONST 14) = ASKSIGN
(CONST 15) = $ZERO
(CONST 16) = $NEGATIVE
(CONST 17) = NEG
(CONST 18) = $%PI
(CONST 19) = (MABS)
(CONST 20) = (RAT BIGFLOAT)
(CONST 21) = MTIMES
(CONST 22) = MULN
(CONST 23) = ADDN
(CONST 24) = 2PISTRIP
(CONST 25) = MEXPT
(CONST 26) = RISPLIT
(CONST 27) = $RADEXPAND
(CONST 28) = POWERS
(CONST 29) = $%E
(CONST 30) = MUL
(CONST 31) = (%LOG)
(CONST 32) = SIMPLN
(CONST 33) = ADD
(CONST 34) = (%TAN %TANH)
(CONST 35) = 2
(CONST 36) = %TANH
(CONST 37) = (%COSH)
(CONST 38) = SIMPLIFYA
(CONST 39) = (%COS)
(CONST 40) = SIMP-%COS
(CONST 41) = DIV
(CONST 42) = ROOT
(CONST 43) = (%ATAN)
(CONST 44) = %TAN
(CONST 45) = (%SINH)
(CONST 46) = (%SIN)
(CONST 47) = SIMP-%SIN
(CONST 48) = (%SIN)
(CONST 49) = (%SINH)
(CONST 50) = SIMP-%ATAN
(CONST 51) = SPECREPP
(CONST 52) = SPECDISREP
(CONST 53) = COVERSINEMYFOOT
(CONST 54) = TRISPLIT
(CONST 55) = GENATAN
(CONST 56) = ABSARG-MABS
(CONST 57) = ((RAT SIMP) 1 2)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RISCHP ABSFLAG)
343 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; $EXPAND
3     (STORE 1)
4     (JMPIFATOM L84)
7     (LOAD 1)
8     (CAR)
9     (CAR&PUSH)
10    (CONST&PUSH 20)                     ; (RAT BIGFLOAT)
11    (CALL2&JMPIFNOT 7 L395)             ; MEMQ
15    (LOAD&CAR&PUSH 1)
17    (LOAD 2)
18    (CDR)
19    (CAR&PUSH)
20    (CALLS2&PUSH 158)                   ; ABS
22    (LOAD 3)
23    (CDR)
24    (CDR)
25    (CAR&PUSH)
26    (LIST&PUSH 3)
28    (LOAD 2)
29    (CDR)
30    (CAR)
31    L31
31    (PUSH)
32    (CALL1 5)                           ; ARGNUM
34    L34
34    (CONS)
35    (SKIP&RET 2)
37    L37
37    (CONST&PUSH 2)                      ; 1
38    (CONST&PUSH 3)                      ; ((MTIMES) ((RAT SIMP) 1 2) $%PI)
39    (CALL1 4)                           ; SIMPLIFY
41    (JMP L34)
43    L43
43    (LOAD&PUSH 1)
44    (CALLS2&PUSH 158)                   ; ABS
46    (LOAD 2)
47    (JMP L31)
49    L49
49    (LOAD&PUSH 1)
50    (CONST 8)                           ; 0
51    (JMP L34)
53    L53
53    (CONST&PUSH 10)                     ; (MABS)
54    (LOAD&PUSH 2)
55    (LIST&PUSH 2)
57    (CONST&PUSH 2)                      ; 1
58    (T&PUSH)
59    (CALL&PUSH 3 11)                    ; SIMPABS
62    (CONST 8)                           ; 0
63    (JMP L34)
65    L65
65    (CONST 13)                          ; $POSITIVE
66    (JMP L109)
68    L68
68    (LOAD&PUSH 2)
69    (CONST 8)                           ; 0
70    (JMP L132)
72    L72
72    (CONST&PUSH 8)                      ; 0
73    (CONST 8)                           ; 0
74    (JMP L132)
76    L76
76    (LOAD&PUSH 2)
77    (CALL1&PUSH 17)                     ; NEG
79    (CONST&PUSH 18)                     ; $%PI
80    (CALL1 4)                           ; SIMPLIFY
82    (JMP L132)
84    L84
84    (LOAD&PUSH 1)
85    (JMPIFEQTO 1 L37)                   ; $%I
88    (LOAD&PUSH 1)
89    (CALLS2&JMPIF 8 L43)                ; NUMBERP
92    (LOAD&PUSH 1)
93    (CONST&PUSH 6)                      ; ($%E $%PI)
94    (CALL2&JMPIF 7 L49)                 ; MEMQ
97    (GETVALUE 9)                        ; ABSFLAG
99    (JMPIF L53)
101   (GETVALUE&PUSH 12)                  ; RISCHP
103   (LOAD 2)
104   (JMPIFEQ L65)
106   (LOAD&PUSH 1)
107   (CALL1 14)                          ; ASKSIGN
109   L109
109   (PUSH)
110   (LOAD&PUSH 0)
111   (JMPIFEQTO 13 L68)                  ; $POSITIVE
114   (LOAD&PUSH 0)
115   (JMPIFEQTO 15 L72)                  ; $ZERO
118   (LOAD&PUSH 0)
119   (JMPIFEQTO 16 L76)                  ; $NEGATIVE
122   (CONST&PUSH 19)                     ; (MABS)
123   (LOAD&PUSH 3)
124   (LIST&PUSH 2)
126   (CONST&PUSH 2)                      ; 1
127   (T&PUSH)
128   (CALL&PUSH 3 11)                    ; SIMPABS
131   (CONST 8)                           ; 0
132   L132
132   (CONS)
133   (SKIP&RET 3)
135   L135
135   (LOAD&CDR&PUSH 1)
137   (PUSH-NIL 3)
139   (LOAD&JMPIFNOT 3 L166)
142   L142
142   (LOAD&CAR&PUSH 3)
144   (JSR L0)
147   (STORE 2)
148   (LOAD&CDR&PUSH 3)
150   (LOAD&CDR&PUSH 3)
152   (LOAD 3)
153   (CONS&PUSH)
154   (LOAD&PUSH 4)
155   (LOAD&PUSH 3)
156   (CALLS1&STORE 170 2)                ; RPLACD
159   (POP&STORE 2)
161   (POP&STORE 3)
163   (LOAD&JMPIF 3 L142)
166   L166
166   (LOAD&PUSH 0)
167   (T&PUSH)
168   (CALL2&PUSH 22)                     ; MULN
170   (LOAD&PUSH 2)
171   (T&PUSH)
172   (CALL2&PUSH 23)                     ; ADDN
174   (CALL1 24)                          ; 2PISTRIP
176   (CONS)
177   (SKIP&RET 6)
179   L179
179   (LOAD 1)
180   (CDR)
181   (CAR&PUSH)
182   (JSR&PUSH L0)
185   (LOAD 2)
186   (CDR)
187   (CDR)
188   (CAR&PUSH)
189   (CALL1&PUSH 26)                     ; RISPLIT
191   (NIL)
192   (BIND 27)                           ; $RADEXPAND
194   (LOAD&CAR&PUSH 4)
196   (LOAD&CAR&PUSH 4)
198   (CALL2&PUSH 28)                     ; POWERS
200   (CONST&PUSH 29)                     ; $%E
201   (LOAD&CDR&PUSH 6)
203   (LOAD&CDR&PUSH 6)
205   (CALL2&PUSH 30)                     ; MUL
207   (CALL1&PUSH 17)                     ; NEG
209   (CALL2&PUSH 28)                     ; POWERS
211   (CALL2&PUSH 30)                     ; MUL
213   (LOAD&CDR&PUSH 5)
215   (LOAD&CAR&PUSH 5)
217   (CALL2&PUSH 30)                     ; MUL
219   (LOAD&CDR&PUSH 5)
221   (CONST&PUSH 31)                     ; (%LOG)
223   (LOAD&CAR&PUSH 8)
225   (LIST&PUSH 2)
227   (CONST&PUSH 2)                      ; 1
228   (T&PUSH)
229   (CALL&PUSH 3 32)                    ; SIMPLN
232   (CALL2&PUSH 30)                     ; MUL
234   (CALL2 33)                          ; ADD
236   (CONS)
237   (UNBIND1)
238   (SKIP&RET 4)
240   L240
240   (CONST&PUSH 45)                     ; (%SINH)
242   (LOAD&PUSH 4)
243   (LIST&PUSH 2)
245   (T&PUSH)
246   (CALL2&PUSH 38)                     ; SIMPLIFYA
248   (CONST&PUSH 46)                     ; (%SIN)
250   (LOAD&PUSH 4)
251   (LIST&PUSH 2)
253   (CONST&PUSH 2)                      ; 1
254   (T&PUSH)
255   (CALL 3 47)                         ; SIMP-%SIN
258   (JMP L353)
261   L261
261   (LOAD 1)
262   (CDR)
263   (CAR&PUSH)
264   (CALL1&PUSH 26)                     ; RISPLIT
266   (LOAD&CDR&PUSH 0)
268   (CONST&PUSH 35)                     ; 2
270   (CALL2&PUSH 30)                     ; MUL
272   (LOAD&CAR&PUSH 1)
274   (CONST&PUSH 35)                     ; 2
276   (CALL2&PUSH 30)                     ; MUL
278   (LOAD 4)
279   (CAR)
280   (CAR&PUSH)
281   (JMPIFNOTEQTO 36 L289)              ; %TANH
284   (LOAD&PUSH 0)
285   (LOAD 2)
286   (STORE 1)
287   (POP&STORE 1)
289   L289
289   (CONST&PUSH 37)                     ; (%COSH)
291   (LOAD&PUSH 2)
292   (LIST&PUSH 2)
294   (T&PUSH)
295   (CALL2&PUSH 38)                     ; SIMPLIFYA
297   (CONST&PUSH 39)                     ; (%COS)
299   (LOAD&PUSH 2)
300   (LIST&PUSH 2)
302   (CONST&PUSH 2)                      ; 1
303   (T&PUSH)
304   (CALL&PUSH 3 40)                    ; SIMP-%COS
307   (LOAD&PUSH 1)
308   (LOAD&PUSH 1)
309   (CALL1&PUSH 17)                     ; NEG
311   (CALL2&PUSH 33)                     ; ADD
313   (LOAD&PUSH 2)
314   (LOAD&PUSH 2)
315   (CALL2&PUSH 33)                     ; ADD
317   (CALL2&PUSH 41)                     ; DIV
319   (CONST&PUSH 35)                     ; 2
321   (CALL2 42)                          ; ROOT
323   (SKIP 1)
325   (STORE 0)
326   (CONST&PUSH 43)                     ; (%ATAN)
328   (LOAD 6)
329   (CAR)
330   (CAR&PUSH)
331   (JMPIFEQTO 44 L240)                 ; %TAN
335   (CONST&PUSH 48)                     ; (%SIN)
337   (LOAD&PUSH 4)
338   (LIST&PUSH 2)
340   (CONST&PUSH 2)                      ; 1
341   (T&PUSH)
342   (CALL&PUSH 3 47)                    ; SIMP-%SIN
345   (CONST&PUSH 49)                     ; (%SINH)
347   (LOAD&PUSH 4)
348   (LIST&PUSH 2)
350   (T&PUSH)
351   (CALL2 38)                          ; SIMPLIFYA
353   L353
353   (PUSH)
354   (CALL2&PUSH 41)                     ; DIV
356   (LIST&PUSH 2)
358   (CONST&PUSH 2)                      ; 1
359   (T&PUSH)
360   (CALL 3 50)                         ; SIMP-%ATAN
363   (CONS)
364   (SKIP&RET 5)
366   L366
366   (LOAD&PUSH 1)
367   (CALL1&PUSH 52)                     ; SPECDISREP
369   (JMPTAIL 1 3 L0)
374   L374
374   (LOAD&PUSH 0)
375   (JSR L0)
378   (SKIP 1)
380   (JMPIF1 L515)
383   (JMP L454)
386   L386
386   (CONST 8)                           ; 0
387   (JMP L468)
390   L390
390   (LOAD 1)
391   (CDR)
392   (JMP L482)
395   L395
395   (LOAD 1)
396   (CAR)
397   (CAR&PUSH)
398   (JMPIFEQTO 21 L135)                 ; MTIMES
402   (LOAD 1)
403   (CAR)
404   (CAR&PUSH)
405   (JMPIFEQTO 25 L179)                 ; MEXPT
409   (LOAD 1)
410   (CAR)
411   (CAR&PUSH)
412   (CONST&PUSH 34)                     ; (%TAN %TANH)
414   (CALL2&JMPIFNOT 7 L427)             ; MEMQ
417   (LOAD 1)
418   (CDR)
419   (CAR&PUSH)
420   (CALL1 26)                          ; RISPLIT
422   (CDR&PUSH)
423   (JMPIFNOTEQTO 8 L261)               ; 0
427   L427
427   (LOAD&PUSH 1)
428   (CALL1&JMPIF 51 L366)               ; SPECREPP
432   (LOAD&PUSH 1)
433   (CALL1&PUSH 53)                     ; COVERSINEMYFOOT
435   (LOAD&JMPIFNOT 0 L450)
438   (LOAD 2)
439   (CDR)
440   (CAR&PUSH)
441   (CALL1 26)                          ; RISPLIT
443   (CDR&PUSH)
444   (CONST 8)                           ; 0
445   (EQ)
446   (NOT)
447   (JMPIF L374)
450   L450
450   (SKIP 1)
452   (JMPIF1 L515)
454   L454
454   (LOAD&PUSH 1)
455   (CALL1&PUSH 54)                     ; TRISPLIT
457   (GETVALUE 9)                        ; ABSFLAG
459   (JMPIF L386)
462   (LOAD&CDR&PUSH 0)
464   (LOAD&CAR&PUSH 1)
466   (CALL2 55)                          ; GENATAN
468   L468
468   (PUSH)
469   (LOAD&CAR&PUSH 1)
471   (JMPIFEQTO 8 L390)                  ; 0
475   (LOAD&CDR&PUSH 1)
477   (JMPIFNOTEQTO 8 L487)               ; 0
480   (LOAD 1)
481   (CAR)
482   L482
482   (PUSH)
483   (CALL1 56)                          ; ABSARG-MABS
485   (JMP L510)
487   L487
487   (LOAD&CAR&PUSH 1)
489   (CONST&PUSH 35)                     ; 2
491   (CALL2&PUSH 28)                     ; POWERS
493   (LOAD&CDR&PUSH 2)
495   (CONST&PUSH 35)                     ; 2
497   (CALL2&PUSH 28)                     ; POWERS
499   (CALL2&PUSH 33)                     ; ADD
501   (CONST&PUSH 2)                      ; 1
502   (CONST&PUSH 8)                      ; 0
503   (CALL&PUSH 3 0)                     ; $EXPAND
506   (CONST&PUSH 57)                     ; ((RAT SIMP) 1 2)
508   (CALL2 28)                          ; POWERS
510   L510
510   (PUSH)
511   (LOAD 1)
512   (CONS)
513   (SKIP&RET 4)
515   L515
515   (SKIP&RET 2)


Disassembly of function #:|(DEFUN GENATAN (NUM DEN) ...)-36|
(CONST 0) = GENATAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GENATAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GENATAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GENATAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GENATAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GENATAN
8     (SKIP&RET 1)


Disassembly of function GENATAN
(CONST 0) = NUM
(CONST 1) = ($ATAN2)
(CONST 2) = 1
(CONST 3) = SIMPATAN2
(CONST 4) = GENERATE-ATAN2
(CONST 5) = $ATAN2
(CONST 6) = FREE
(CONST 7) = (%ATAN)
(CONST 8) = DIV*
(CONST 9) = SIMP-%ATAN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENERATE-ATAN2 NUM)
29 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; NUM
3     (CONST&PUSH 1)                      ; ($ATAN2)
4     (GETVALUE&PUSH 0)                   ; NUM
6     (LOAD&PUSH 6)
7     (LIST&PUSH 3)
9     (CONST&PUSH 2)                      ; 1
10    (T&PUSH)
11    (CALL&PUSH 3 3)                     ; SIMPATAN2
14    (GETVALUE 4)                        ; GENERATE-ATAN2
16    (JMPIF L41)
18    (LOAD&PUSH 0)
19    (CONST&PUSH 5)                      ; $ATAN2
20    (CALL2&JMPIF 6 L41)                 ; FREE
23    (CONST&PUSH 7)                      ; (%ATAN)
24    (GETVALUE&PUSH 0)                   ; NUM
26    (LOAD&PUSH 7)
27    (CALL2&PUSH 8)                      ; DIV*
29    (LIST&PUSH 2)
31    (CONST&PUSH 2)                      ; 1
32    (T&PUSH)
33    (CALL 3 9)                          ; SIMP-%ATAN
36    (SKIP 1)
38    L38
38    (UNBIND1)
39    (SKIP&RET 3)
41    L41
41    (POP)
42    (JMP L38)


Disassembly of function #:|(DEFUN ABSARG-MABS (L) ...)-37|
(CONST 0) = ABSARG-MABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ABSARG-MABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ABSARG-MABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ABSARG-MABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ABSARG-MABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ABSARG-MABS
8     (SKIP&RET 1)


Disassembly of function ABSARG-MABS
(CONST 0) = CSIGN
(CONST 1) = (MABS %CABS)
(CONST 2) = MEMQ
(CONST 3) = (%CABS SIMP)
(CONST 4) = (MABS)
(CONST 5) = 1
(CONST 6) = SIMPABS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; CSIGN
3     (T)
4     (JMPIFEQ L20)
6     (CONST&PUSH 4)                      ; (MABS)
7     (LOAD&PUSH 2)
8     (LIST&PUSH 2)
10    (CONST&PUSH 5)                      ; 1
11    (T&PUSH)
12    (CALL 3 6)                          ; SIMPABS
15    (SKIP&RET 2)
17    L17
17    (LOAD 1)
18    (SKIP&RET 2)
20    L20
20    (LOAD 1)
21    (CAR)
22    (CAR&PUSH)
23    (CONST&PUSH 1)                      ; (MABS %CABS)
24    (CALL2&JMPIF 2 L17)                 ; MEMQ
27    (CONST&PUSH 3)                      ; (%CABS SIMP)
28    (LOAD&PUSH 2)
29    (LIST 2)
31    (SKIP&RET 2)


Wrote file binary-clisp/rpart.fas
Wrote file /cygdrive/e/temp/maxima/src/rpart.lis