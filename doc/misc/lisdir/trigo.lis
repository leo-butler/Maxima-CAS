Listing of compilation of file /cygdrive/e/temp/maxima/src/trigo.lisp
on 2002-12-17 13:35:04 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/trigo.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE TRIGO)-2|
(CONST 0) = TRIGO
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGO
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS MRGMAC)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (GENPREFIX TRI) (SPECIAL VARLIST ERRORSW) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE HYPER))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN SIMP-%SINH (FORM Y Z) ...)-6|
(CONST 0) = SIMP-%SINH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%SINH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%SINH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%SINH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%SINH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%SINH
8     (SKIP&RET 1)


Disassembly of function SIMP-%SINH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = SINH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = 0
(CONST 11) = $%IARGS
(CONST 12) = $%I
(CONST 13) = MULTIPLEP
(CONST 14) = %SIN
(CONST 15) = 1
(CONST 16) = COEFF
(CONST 17) = SIMPLIFY
(CONST 18) = MUL
(CONST 19) = $TRIGINVERSES
(CONST 20) = %ASINH
(CONST 21) = $TRIGEXPAND
(CONST 22) = %SINH
(CONST 23) = TRIGEXPAND
(CONST 24) = $EXPONENTIALIZE
(CONST 25) = EXPONENTIALIZE
(CONST 26) = $HALFANGLES
(CONST 27) = HALFANGLE
(CONST 28) = $TRIGSIGN
(CONST 29) = MMINUSP*
(CONST 30) = NEG
(CONST 31) = (%SINH)
(CONST 32) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
111 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L132)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L132)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L138)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L50)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 9 L144)                ; ZEROP1
50    L50
50    (GETVALUE 11)                       ; $%IARGS
52    (JMPIFNOT L61)
54    (GETVALUE&PUSH 1)                   ; Y
56    (CONST&PUSH 12)                     ; $%I
57    (CALL2&JMPIF 13 L147)               ; MULTIPLEP
61    L61
61    (GETVALUE 19)                       ; $TRIGINVERSES
63    (JMPIFNOT L82)
65    (GETVALUE 1)                        ; Y
67    (JMPIFATOM L82)
69    (GETVALUE 1)                        ; Y
71    (CAR)
72    (CAR&PUSH)
73    (JMPIFNOTEQTO 20 L82)               ; %ASINH
76    (GETVALUE 1)                        ; Y
78    (CDR)
79    (CAR)
80    (JMPIF1 L128)
82    L82
82    (GETVALUE 21)                       ; $TRIGEXPAND
84    (JMPIFNOT L93)
86    (CONST&PUSH 22)                     ; %SINH
87    (GETVALUE&PUSH 1)                   ; Y
89    (CALL2 23)                          ; TRIGEXPAND
91    (JMPIF1 L128)
93    L93
93    (GETVALUE 24)                       ; $EXPONENTIALIZE
95    (JMPIF L166)
98    (GETVALUE 26)                       ; $HALFANGLES
100   (JMPIFNOT L109)
102   (CONST&PUSH 22)                     ; %SINH
103   (GETVALUE&PUSH 1)                   ; Y
105   (CALL2 27)                          ; HALFANGLE
107   (JMPIF1 L128)
109   L109
109   (GETVALUE 28)                       ; $TRIGSIGN
111   (JMPIFNOT L118)
113   (GETVALUE&PUSH 1)                   ; Y
115   (CALL1&JMPIF 29 L173)               ; MMINUSP*
118   L118
118   (CONST&PUSH 31)                     ; (%SINH)
120   (GETVALUE&PUSH 1)                   ; Y
122   (LIST&PUSH 2)
124   (GETVALUE&PUSH 0)                   ; FORM
126   (CALL2 32)                          ; EQTEST
128   L128
128   (UNBIND 2)
130   (SKIP&RET 4)
132   L132
132   (GETVALUE&PUSH 1)                   ; Y
134   (CALL1 5)                           ; SINH
136   (JMP L128)
138   L138
138   (GETVALUE&PUSH 0)                   ; FORM
140   (CALL1 7)                           ; $BFLOAT
142   (JMP L128)
144   L144
144   (CONST 10)                          ; 0
145   (JMP L128)
147   L147
147   (CONST&PUSH 12)                     ; $%I
148   (CONST&PUSH 14)                     ; %SIN
149   (LIST&PUSH 1)
151   (GETVALUE&PUSH 1)                   ; Y
153   (CONST&PUSH 12)                     ; $%I
154   (CONST&PUSH 15)                     ; 1
155   (CALL&PUSH 3 16)                    ; COEFF
158   (LIST&PUSH 2)
160   (CALL1&PUSH 17)                     ; SIMPLIFY
162   (CALL2 18)                          ; MUL
164   (JMP L128)
166   L166
166   (CONST&PUSH 22)                     ; %SINH
167   (GETVALUE&PUSH 1)                   ; Y
169   (CALL2 25)                          ; EXPONENTIALIZE
171   (JMP L128)
173   L173
173   (CONST&PUSH 22)                     ; %SINH
174   (LIST&PUSH 1)
176   (GETVALUE&PUSH 1)                   ; Y
178   (CALL1&PUSH 30)                     ; NEG
180   (LIST&PUSH 2)
182   (CALL1&PUSH 17)                     ; SIMPLIFY
184   (CALL1 30)                          ; NEG
186   (JMP L128)


Disassembly of function #:|(DEFMFUN SIMP-%COSH (FORM Y Z) ...)-7|
(CONST 0) = SIMP-%COSH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%COSH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%COSH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%COSH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%COSH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%COSH
8     (SKIP&RET 1)


Disassembly of function SIMP-%COSH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = COSH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = 1
(CONST 11) = $%IARGS
(CONST 12) = $%I
(CONST 13) = MULTIPLEP
(CONST 14) = %COS
(CONST 15) = COEFF
(CONST 16) = SIMPLIFY
(CONST 17) = $TRIGINVERSES
(CONST 18) = %ACOSH
(CONST 19) = $TRIGEXPAND
(CONST 20) = %COSH
(CONST 21) = TRIGEXPAND
(CONST 22) = $EXPONENTIALIZE
(CONST 23) = EXPONENTIALIZE
(CONST 24) = $HALFANGLES
(CONST 25) = HALFANGLE
(CONST 26) = $TRIGSIGN
(CONST 27) = MMINUSP*
(CONST 28) = NEG
(CONST 29) = (%COSH)
(CONST 30) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
107 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L134)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L134)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L140)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L50)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 9 L146)                ; ZEROP1
50    L50
50    (GETVALUE 11)                       ; $%IARGS
52    (JMPIFNOT L61)
54    (GETVALUE&PUSH 1)                   ; Y
56    (CONST&PUSH 12)                     ; $%I
57    (CALL2&JMPIF 13 L149)               ; MULTIPLEP
61    L61
61    (GETVALUE 17)                       ; $TRIGINVERSES
63    (JMPIFNOT L83)
65    (GETVALUE 1)                        ; Y
67    (JMPIFATOM L83)
69    (GETVALUE 1)                        ; Y
71    (CAR)
72    (CAR&PUSH)
73    (JMPIFNOTEQTO 18 L83)               ; %ACOSH
76    (GETVALUE 1)                        ; Y
78    (CDR)
79    (CAR)
80    (JMPIF1 L177)
83    L83
83    (GETVALUE 19)                       ; $TRIGEXPAND
85    (JMPIFNOT L95)
87    (CONST&PUSH 20)                     ; %COSH
88    (GETVALUE&PUSH 1)                   ; Y
90    (CALL2 21)                          ; TRIGEXPAND
92    (JMPIF1 L177)
95    L95
95    (GETVALUE 22)                       ; $EXPONENTIALIZE
97    (JMPIF L161)
99    (GETVALUE 24)                       ; $HALFANGLES
101   (JMPIFNOT L111)
103   (CONST&PUSH 20)                     ; %COSH
104   (GETVALUE&PUSH 1)                   ; Y
106   (CALL2 25)                          ; HALFANGLE
108   (JMPIF1 L177)
111   L111
111   (GETVALUE 26)                       ; $TRIGSIGN
113   (JMPIFNOT L168)
115   (GETVALUE&PUSH 1)                   ; Y
117   (CALL1&JMPIFNOT 27 L168)            ; MMINUSP*
120   (CONST&PUSH 20)                     ; %COSH
121   (LIST&PUSH 1)
123   (GETVALUE&PUSH 1)                   ; Y
125   (CALL1 28)                          ; NEG
127   L127
127   (PUSH)
128   (LIST&PUSH 2)
130   (CALL1 16)                          ; SIMPLIFY
132   (JMP L177)
134   L134
134   (GETVALUE&PUSH 1)                   ; Y
136   (CALL1 5)                           ; COSH
138   (JMP L177)
140   L140
140   (GETVALUE&PUSH 0)                   ; FORM
142   (CALL1 7)                           ; $BFLOAT
144   (JMP L177)
146   L146
146   (CONST 10)                          ; 1
147   (JMP L177)
149   L149
149   (CONST&PUSH 14)                     ; %COS
150   (LIST&PUSH 1)
152   (GETVALUE&PUSH 1)                   ; Y
154   (CONST&PUSH 12)                     ; $%I
155   (CONST&PUSH 10)                     ; 1
156   (CALL 3 15)                         ; COEFF
159   (JMP L127)
161   L161
161   (CONST&PUSH 20)                     ; %COSH
162   (GETVALUE&PUSH 1)                   ; Y
164   (CALL2 23)                          ; EXPONENTIALIZE
166   (JMP L177)
168   L168
168   (CONST&PUSH 29)                     ; (%COSH)
169   (GETVALUE&PUSH 1)                   ; Y
171   (LIST&PUSH 2)
173   (GETVALUE&PUSH 0)                   ; FORM
175   (CALL2 30)                          ; EQTEST
177   L177
177   (UNBIND 2)
179   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMP-%TANH (FORM Y Z) ...)-8|
(CONST 0) = SIMP-%TANH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%TANH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%TANH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%TANH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%TANH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%TANH
8     (SKIP&RET 1)


Disassembly of function SIMP-%TANH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = TANH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = 0
(CONST 11) = $%IARGS
(CONST 12) = $%I
(CONST 13) = MULTIPLEP
(CONST 14) = %TAN
(CONST 15) = 1
(CONST 16) = COEFF
(CONST 17) = SIMPLIFY
(CONST 18) = MUL
(CONST 19) = $TRIGINVERSES
(CONST 20) = %ATANH
(CONST 21) = $TRIGEXPAND
(CONST 22) = %TANH
(CONST 23) = TRIGEXPAND
(CONST 24) = $EXPONENTIALIZE
(CONST 25) = EXPONENTIALIZE
(CONST 26) = $HALFANGLES
(CONST 27) = HALFANGLE
(CONST 28) = $TRIGSIGN
(CONST 29) = MMINUSP*
(CONST 30) = NEG
(CONST 31) = (%TANH)
(CONST 32) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
113 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L134)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L134)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L140)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L50)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 9 L146)                ; ZEROP1
50    L50
50    (GETVALUE 11)                       ; $%IARGS
52    (JMPIFNOT L61)
54    (GETVALUE&PUSH 1)                   ; Y
56    (CONST&PUSH 12)                     ; $%I
57    (CALL2&JMPIF 13 L149)               ; MULTIPLEP
61    L61
61    (GETVALUE 19)                       ; $TRIGINVERSES
63    (JMPIFNOT L84)
65    (GETVALUE 1)                        ; Y
67    (JMPIFATOM L84)
69    (GETVALUE 1)                        ; Y
71    (CAR)
72    (CAR)
73    (STORE 7)
74    (PUSH)
75    (JMPIFNOTEQTO 20 L84)               ; %ATANH
78    (GETVALUE 1)                        ; Y
80    (CDR)
81    (CAR)
82    (JMPIF1 L130)
84    L84
84    (GETVALUE 21)                       ; $TRIGEXPAND
86    (JMPIFNOT L95)
88    (CONST&PUSH 22)                     ; %TANH
89    (GETVALUE&PUSH 1)                   ; Y
91    (CALL2 23)                          ; TRIGEXPAND
93    (JMPIF1 L130)
95    L95
95    (GETVALUE 24)                       ; $EXPONENTIALIZE
97    (JMPIF L168)
100   (GETVALUE 26)                       ; $HALFANGLES
102   (JMPIFNOT L111)
104   (CONST&PUSH 22)                     ; %TANH
105   (GETVALUE&PUSH 1)                   ; Y
107   (CALL2 27)                          ; HALFANGLE
109   (JMPIF1 L130)
111   L111
111   (GETVALUE 28)                       ; $TRIGSIGN
113   (JMPIFNOT L120)
115   (GETVALUE&PUSH 1)                   ; Y
117   (CALL1&JMPIF 29 L175)               ; MMINUSP*
120   L120
120   (CONST&PUSH 31)                     ; (%TANH)
122   (GETVALUE&PUSH 1)                   ; Y
124   (LIST&PUSH 2)
126   (GETVALUE&PUSH 0)                   ; FORM
128   (CALL2 32)                          ; EQTEST
130   L130
130   (UNBIND 2)
132   (SKIP&RET 4)
134   L134
134   (GETVALUE&PUSH 1)                   ; Y
136   (CALL1 5)                           ; TANH
138   (JMP L130)
140   L140
140   (GETVALUE&PUSH 0)                   ; FORM
142   (CALL1 7)                           ; $BFLOAT
144   (JMP L130)
146   L146
146   (CONST 10)                          ; 0
147   (JMP L130)
149   L149
149   (CONST&PUSH 12)                     ; $%I
150   (CONST&PUSH 14)                     ; %TAN
151   (LIST&PUSH 1)
153   (GETVALUE&PUSH 1)                   ; Y
155   (CONST&PUSH 12)                     ; $%I
156   (CONST&PUSH 15)                     ; 1
157   (CALL&PUSH 3 16)                    ; COEFF
160   (LIST&PUSH 2)
162   (CALL1&PUSH 17)                     ; SIMPLIFY
164   (CALL2 18)                          ; MUL
166   (JMP L130)
168   L168
168   (CONST&PUSH 22)                     ; %TANH
169   (GETVALUE&PUSH 1)                   ; Y
171   (CALL2 25)                          ; EXPONENTIALIZE
173   (JMP L130)
175   L175
175   (CONST&PUSH 22)                     ; %TANH
176   (LIST&PUSH 1)
178   (GETVALUE&PUSH 1)                   ; Y
180   (CALL1&PUSH 30)                     ; NEG
182   (LIST&PUSH 2)
184   (CALL1&PUSH 17)                     ; SIMPLIFY
186   (CALL1 30)                          ; NEG
188   (JMP L130)


Disassembly of function #:|(DEFMFUN SIMP-%COTH (FORM Y Z) ...)-9|
(CONST 0) = SIMP-%COTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%COTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%COTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%COTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%COTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%COTH
8     (SKIP&RET 1)


Disassembly of function SIMP-%COTH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = COTH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = DBZ-ERR1
(CONST 11) = $%IARGS
(CONST 12) = $%I
(CONST 13) = MULTIPLEP
(CONST 14) = -1
(CONST 15) = %COT
(CONST 16) = 1
(CONST 17) = COEFF
(CONST 18) = SIMPLIFY
(CONST 19) = MUL
(CONST 20) = $TRIGINVERSES
(CONST 21) = %ACOTH
(CONST 22) = $TRIGEXPAND
(CONST 23) = %COTH
(CONST 24) = TRIGEXPAND
(CONST 25) = $EXPONENTIALIZE
(CONST 26) = EXPONENTIALIZE
(CONST 27) = $HALFANGLES
(CONST 28) = HALFANGLE
(CONST 29) = $TRIGSIGN
(CONST 30) = MMINUSP*
(CONST 31) = NEG
(CONST 32) = (%COTH)
(CONST 33) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
112 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L137)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L137)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L143)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L55)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIFNOT 9 L55)              ; ZEROP1
49    (CONST&PUSH 5)                      ; COTH
50    (CALL1 10)                          ; DBZ-ERR1
52    (JMPIF1 L133)
55    L55
55    (GETVALUE 11)                       ; $%IARGS
57    (JMPIFNOT L66)
59    (GETVALUE&PUSH 1)                   ; Y
61    (CONST&PUSH 12)                     ; $%I
62    (CALL2&JMPIF 13 L149)               ; MULTIPLEP
66    L66
66    (GETVALUE 20)                       ; $TRIGINVERSES
68    (JMPIFNOT L87)
70    (GETVALUE 1)                        ; Y
72    (JMPIFATOM L87)
74    (GETVALUE 1)                        ; Y
76    (CAR)
77    (CAR&PUSH)
78    (JMPIFNOTEQTO 21 L87)               ; %ACOTH
81    (GETVALUE 1)                        ; Y
83    (CDR)
84    (CAR)
85    (JMPIF1 L133)
87    L87
87    (GETVALUE 22)                       ; $TRIGEXPAND
89    (JMPIFNOT L98)
91    (CONST&PUSH 23)                     ; %COTH
92    (GETVALUE&PUSH 1)                   ; Y
94    (CALL2 24)                          ; TRIGEXPAND
96    (JMPIF1 L133)
98    L98
98    (GETVALUE 25)                       ; $EXPONENTIALIZE
100   (JMPIF L170)
103   (GETVALUE 27)                       ; $HALFANGLES
105   (JMPIFNOT L114)
107   (CONST&PUSH 23)                     ; %COTH
108   (GETVALUE&PUSH 1)                   ; Y
110   (CALL2 28)                          ; HALFANGLE
112   (JMPIF1 L133)
114   L114
114   (GETVALUE 29)                       ; $TRIGSIGN
116   (JMPIFNOT L123)
118   (GETVALUE&PUSH 1)                   ; Y
120   (CALL1&JMPIF 30 L177)               ; MMINUSP*
123   L123
123   (CONST&PUSH 32)                     ; (%COTH)
125   (GETVALUE&PUSH 1)                   ; Y
127   (LIST&PUSH 2)
129   (GETVALUE&PUSH 0)                   ; FORM
131   (CALL2 33)                          ; EQTEST
133   L133
133   (UNBIND 2)
135   (SKIP&RET 4)
137   L137
137   (GETVALUE&PUSH 1)                   ; Y
139   (CALL1 5)                           ; COTH
141   (JMP L133)
143   L143
143   (GETVALUE&PUSH 0)                   ; FORM
145   (CALL1 7)                           ; $BFLOAT
147   (JMP L133)
149   L149
149   (CONST&PUSH 14)                     ; -1
150   (CONST&PUSH 12)                     ; $%I
151   (CONST&PUSH 15)                     ; %COT
152   (LIST&PUSH 1)
154   (GETVALUE&PUSH 1)                   ; Y
156   (CONST&PUSH 12)                     ; $%I
157   (CONST&PUSH 16)                     ; 1
158   (CALL&PUSH 3 17)                    ; COEFF
161   (LIST&PUSH 2)
163   (CALL1&PUSH 18)                     ; SIMPLIFY
165   (CALL 3 19)                         ; MUL
168   (JMP L133)
170   L170
170   (CONST&PUSH 23)                     ; %COTH
171   (GETVALUE&PUSH 1)                   ; Y
173   (CALL2 26)                          ; EXPONENTIALIZE
175   (JMP L133)
177   L177
177   (CONST&PUSH 23)                     ; %COTH
178   (LIST&PUSH 1)
180   (GETVALUE&PUSH 1)                   ; Y
182   (CALL1&PUSH 31)                     ; NEG
184   (LIST&PUSH 2)
186   (CALL1&PUSH 18)                     ; SIMPLIFY
188   (CALL1 31)                          ; NEG
190   (JMP L133)


Disassembly of function #:|(DEFMFUN SIMP-%CSCH (FORM Y Z) ...)-10|
(CONST 0) = SIMP-%CSCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%CSCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%CSCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%CSCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%CSCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%CSCH
8     (SKIP&RET 1)


Disassembly of function SIMP-%CSCH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = CSCH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = DBZ-ERR1
(CONST 11) = $%IARGS
(CONST 12) = $%I
(CONST 13) = MULTIPLEP
(CONST 14) = -1
(CONST 15) = %CSC
(CONST 16) = 1
(CONST 17) = COEFF
(CONST 18) = SIMPLIFY
(CONST 19) = MUL
(CONST 20) = $TRIGINVERSES
(CONST 21) = %ACSCH
(CONST 22) = $TRIGEXPAND
(CONST 23) = %CSCH
(CONST 24) = TRIGEXPAND
(CONST 25) = $EXPONENTIALIZE
(CONST 26) = EXPONENTIALIZE
(CONST 27) = $HALFANGLES
(CONST 28) = HALFANGLE
(CONST 29) = $TRIGSIGN
(CONST 30) = MMINUSP*
(CONST 31) = NEG
(CONST 32) = (%CSCH)
(CONST 33) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
112 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L137)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L137)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L143)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L55)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIFNOT 9 L55)              ; ZEROP1
49    (CONST&PUSH 5)                      ; CSCH
50    (CALL1 10)                          ; DBZ-ERR1
52    (JMPIF1 L133)
55    L55
55    (GETVALUE 11)                       ; $%IARGS
57    (JMPIFNOT L66)
59    (GETVALUE&PUSH 1)                   ; Y
61    (CONST&PUSH 12)                     ; $%I
62    (CALL2&JMPIF 13 L149)               ; MULTIPLEP
66    L66
66    (GETVALUE 20)                       ; $TRIGINVERSES
68    (JMPIFNOT L87)
70    (GETVALUE 1)                        ; Y
72    (JMPIFATOM L87)
74    (GETVALUE 1)                        ; Y
76    (CAR)
77    (CAR&PUSH)
78    (JMPIFNOTEQTO 21 L87)               ; %ACSCH
81    (GETVALUE 1)                        ; Y
83    (CDR)
84    (CAR)
85    (JMPIF1 L133)
87    L87
87    (GETVALUE 22)                       ; $TRIGEXPAND
89    (JMPIFNOT L98)
91    (CONST&PUSH 23)                     ; %CSCH
92    (GETVALUE&PUSH 1)                   ; Y
94    (CALL2 24)                          ; TRIGEXPAND
96    (JMPIF1 L133)
98    L98
98    (GETVALUE 25)                       ; $EXPONENTIALIZE
100   (JMPIF L170)
103   (GETVALUE 27)                       ; $HALFANGLES
105   (JMPIFNOT L114)
107   (CONST&PUSH 23)                     ; %CSCH
108   (GETVALUE&PUSH 1)                   ; Y
110   (CALL2 28)                          ; HALFANGLE
112   (JMPIF1 L133)
114   L114
114   (GETVALUE 29)                       ; $TRIGSIGN
116   (JMPIFNOT L123)
118   (GETVALUE&PUSH 1)                   ; Y
120   (CALL1&JMPIF 30 L177)               ; MMINUSP*
123   L123
123   (CONST&PUSH 32)                     ; (%CSCH)
125   (GETVALUE&PUSH 1)                   ; Y
127   (LIST&PUSH 2)
129   (GETVALUE&PUSH 0)                   ; FORM
131   (CALL2 33)                          ; EQTEST
133   L133
133   (UNBIND 2)
135   (SKIP&RET 4)
137   L137
137   (GETVALUE&PUSH 1)                   ; Y
139   (CALL1 5)                           ; CSCH
141   (JMP L133)
143   L143
143   (GETVALUE&PUSH 0)                   ; FORM
145   (CALL1 7)                           ; $BFLOAT
147   (JMP L133)
149   L149
149   (CONST&PUSH 14)                     ; -1
150   (CONST&PUSH 12)                     ; $%I
151   (CONST&PUSH 15)                     ; %CSC
152   (LIST&PUSH 1)
154   (GETVALUE&PUSH 1)                   ; Y
156   (CONST&PUSH 12)                     ; $%I
157   (CONST&PUSH 16)                     ; 1
158   (CALL&PUSH 3 17)                    ; COEFF
161   (LIST&PUSH 2)
163   (CALL1&PUSH 18)                     ; SIMPLIFY
165   (CALL 3 19)                         ; MUL
168   (JMP L133)
170   L170
170   (CONST&PUSH 23)                     ; %CSCH
171   (GETVALUE&PUSH 1)                   ; Y
173   (CALL2 26)                          ; EXPONENTIALIZE
175   (JMP L133)
177   L177
177   (CONST&PUSH 23)                     ; %CSCH
178   (LIST&PUSH 1)
180   (GETVALUE&PUSH 1)                   ; Y
182   (CALL1&PUSH 31)                     ; NEG
184   (LIST&PUSH 2)
186   (CALL1&PUSH 18)                     ; SIMPLIFY
188   (CALL1 31)                          ; NEG
190   (JMP L133)


Disassembly of function #:|(DEFMFUN SIMP-%SECH (FORM Y Z) ...)-11|
(CONST 0) = SIMP-%SECH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%SECH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%SECH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%SECH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%SECH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%SECH
8     (SKIP&RET 1)


Disassembly of function SIMP-%SECH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = SECH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = 1
(CONST 11) = $%IARGS
(CONST 12) = $%I
(CONST 13) = MULTIPLEP
(CONST 14) = %SEC
(CONST 15) = COEFF
(CONST 16) = SIMPLIFY
(CONST 17) = $TRIGINVERSES
(CONST 18) = %ASECH
(CONST 19) = $TRIGEXPAND
(CONST 20) = %SECH
(CONST 21) = TRIGEXPAND
(CONST 22) = $EXPONENTIALIZE
(CONST 23) = EXPONENTIALIZE
(CONST 24) = $HALFANGLES
(CONST 25) = HALFANGLE
(CONST 26) = $TRIGSIGN
(CONST 27) = MMINUSP*
(CONST 28) = NEG
(CONST 29) = (%SECH)
(CONST 30) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
107 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L134)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L134)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L140)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L50)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 9 L146)                ; ZEROP1
50    L50
50    (GETVALUE 11)                       ; $%IARGS
52    (JMPIFNOT L61)
54    (GETVALUE&PUSH 1)                   ; Y
56    (CONST&PUSH 12)                     ; $%I
57    (CALL2&JMPIF 13 L149)               ; MULTIPLEP
61    L61
61    (GETVALUE 17)                       ; $TRIGINVERSES
63    (JMPIFNOT L83)
65    (GETVALUE 1)                        ; Y
67    (JMPIFATOM L83)
69    (GETVALUE 1)                        ; Y
71    (CAR)
72    (CAR&PUSH)
73    (JMPIFNOTEQTO 18 L83)               ; %ASECH
76    (GETVALUE 1)                        ; Y
78    (CDR)
79    (CAR)
80    (JMPIF1 L177)
83    L83
83    (GETVALUE 19)                       ; $TRIGEXPAND
85    (JMPIFNOT L95)
87    (CONST&PUSH 20)                     ; %SECH
88    (GETVALUE&PUSH 1)                   ; Y
90    (CALL2 21)                          ; TRIGEXPAND
92    (JMPIF1 L177)
95    L95
95    (GETVALUE 22)                       ; $EXPONENTIALIZE
97    (JMPIF L161)
99    (GETVALUE 24)                       ; $HALFANGLES
101   (JMPIFNOT L111)
103   (CONST&PUSH 20)                     ; %SECH
104   (GETVALUE&PUSH 1)                   ; Y
106   (CALL2 25)                          ; HALFANGLE
108   (JMPIF1 L177)
111   L111
111   (GETVALUE 26)                       ; $TRIGSIGN
113   (JMPIFNOT L168)
115   (GETVALUE&PUSH 1)                   ; Y
117   (CALL1&JMPIFNOT 27 L168)            ; MMINUSP*
120   (CONST&PUSH 20)                     ; %SECH
121   (LIST&PUSH 1)
123   (GETVALUE&PUSH 1)                   ; Y
125   (CALL1 28)                          ; NEG
127   L127
127   (PUSH)
128   (LIST&PUSH 2)
130   (CALL1 16)                          ; SIMPLIFY
132   (JMP L177)
134   L134
134   (GETVALUE&PUSH 1)                   ; Y
136   (CALL1 5)                           ; SECH
138   (JMP L177)
140   L140
140   (GETVALUE&PUSH 0)                   ; FORM
142   (CALL1 7)                           ; $BFLOAT
144   (JMP L177)
146   L146
146   (CONST 10)                          ; 1
147   (JMP L177)
149   L149
149   (CONST&PUSH 14)                     ; %SEC
150   (LIST&PUSH 1)
152   (GETVALUE&PUSH 1)                   ; Y
154   (CONST&PUSH 12)                     ; $%I
155   (CONST&PUSH 10)                     ; 1
156   (CALL 3 15)                         ; COEFF
159   (JMP L127)
161   L161
161   (CONST&PUSH 20)                     ; %SECH
162   (GETVALUE&PUSH 1)                   ; Y
164   (CALL2 23)                          ; EXPONENTIALIZE
166   (JMP L177)
168   L168
168   (CONST&PUSH 29)                     ; (%SECH)
169   (GETVALUE&PUSH 1)                   ; Y
171   (LIST&PUSH 2)
173   (GETVALUE&PUSH 0)                   ; FORM
175   (CALL2 30)                          ; EQTEST
177   L177
177   (UNBIND 2)
179   (SKIP&RET 4)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE ATRIG))-12|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN SIMP-%ASIN (FORM Y Z) ...)-13|
(CONST 0) = SIMP-%ASIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ASIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ASIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ASIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ASIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ASIN
8     (SKIP&RET 1)


Disassembly of function SIMP-%ASIN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ASIN
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = 0
(CONST 11) = 1
(CONST 12) = %PI//2
(CONST 13) = -1
(CONST 14) = NEG
(CONST 15) = |1//2|
(CONST 16) = ALIKE1
(CONST 17) = ((RAT SIMP) 1 6)
(CONST 18) = $%PI
(CONST 19) = MUL
(CONST 20) = $%IARGS
(CONST 21) = $%I
(CONST 22) = MULTIPLEP
(CONST 23) = %ASINH
(CONST 24) = COEFF
(CONST 25) = SIMPLIFY
(CONST 26) = $TRIGINVERSES
(CONST 27) = $ALL
(CONST 28) = %SIN
(CONST 29) = $LOGARC
(CONST 30) = %ASIN
(CONST 31) = LOGARC
(CONST 32) = $TRIGSIGN
(CONST 33) = MMINUSP*
(CONST 34) = (%ASIN)
(CONST 35) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (%PI//2 $TRIGSIGN $LOGARC $TRIGINVERSES $%IARGS |1//2| $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
117 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L137)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L137)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L143)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L75)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 9 L149)                ; ZEROP1
50    (GETVALUE&PUSH 1)                   ; Y
52    (JMPIFEQTO 11 L152)                 ; 1
56    (GETVALUE&PUSH 1)                   ; Y
58    (JMPIFEQTO 13 L159)                 ; -1
62    (GETVALUE&PUSH 1)                   ; Y
64    (GETVALUE&PUSH 15)                  ; |1//2|
66    (CALL2&JMPIFNOT 16 L75)             ; ALIKE1
69    (CONST&PUSH 17)                     ; ((RAT SIMP) 1 6)
70    (CONST&PUSH 18)                     ; $%PI
71    (CALL2 19)                          ; MUL
73    (JMPIF1 L133)
75    L75
75    (GETVALUE 20)                       ; $%IARGS
77    (JMPIFNOT L86)
79    (GETVALUE&PUSH 1)                   ; Y
81    (CONST&PUSH 21)                     ; $%I
82    (CALL2&JMPIF 22 L168)               ; MULTIPLEP
86    L86
86    (GETVALUE&PUSH 26)                  ; $TRIGINVERSES
88    (JMPIFNOTEQTO 27 L108)              ; $ALL
91    (GETVALUE 1)                        ; Y
93    (JMPIFATOM L108)
95    (GETVALUE 1)                        ; Y
97    (CAR)
98    (CAR&PUSH)
99    (JMPIFNOTEQTO 28 L108)              ; %SIN
102   (GETVALUE 1)                        ; Y
104   (CDR)
105   (CAR)
106   (JMPIF1 L133)
108   L108
108   (GETVALUE 29)                       ; $LOGARC
110   (JMPIF L187)
113   (GETVALUE 32)                       ; $TRIGSIGN
115   (JMPIFNOT L123)
117   (GETVALUE&PUSH 1)                   ; Y
119   (CALL1&JMPIF 33 L195)               ; MMINUSP*
123   L123
123   (CONST&PUSH 34)                     ; (%ASIN)
125   (GETVALUE&PUSH 1)                   ; Y
127   (LIST&PUSH 2)
129   (GETVALUE&PUSH 0)                   ; FORM
131   (CALL2 35)                          ; EQTEST
133   L133
133   (UNBIND 2)
135   (SKIP&RET 4)
137   L137
137   (GETVALUE&PUSH 1)                   ; Y
139   (CALL1 5)                           ; ASIN
141   (JMP L133)
143   L143
143   (GETVALUE&PUSH 0)                   ; FORM
145   (CALL1 7)                           ; $BFLOAT
147   (JMP L133)
149   L149
149   (CONST 10)                          ; 0
150   (JMP L133)
152   L152
152   (GETVALUE 12)                       ; %PI//2
154   (JMPIF1 L133)
156   (JMP L75)
159   L159
159   (GETVALUE&PUSH 12)                  ; %PI//2
161   (CALL1 14)                          ; NEG
163   (JMPIF1 L133)
165   (JMP L75)
168   L168
168   (CONST&PUSH 21)                     ; $%I
169   (CONST&PUSH 23)                     ; %ASINH
170   (LIST&PUSH 1)
172   (GETVALUE&PUSH 1)                   ; Y
174   (CONST&PUSH 21)                     ; $%I
175   (CONST&PUSH 11)                     ; 1
176   (CALL&PUSH 3 24)                    ; COEFF
179   (LIST&PUSH 2)
181   (CALL1&PUSH 25)                     ; SIMPLIFY
183   (CALL2 19)                          ; MUL
185   (JMP L133)
187   L187
187   (CONST&PUSH 30)                     ; %ASIN
189   (GETVALUE&PUSH 1)                   ; Y
191   (CALL2 31)                          ; LOGARC
193   (JMP L133)
195   L195
195   (CONST&PUSH 30)                     ; %ASIN
197   (LIST&PUSH 1)
199   (GETVALUE&PUSH 1)                   ; Y
201   (CALL1&PUSH 14)                     ; NEG
203   (LIST&PUSH 2)
205   (CALL1&PUSH 25)                     ; SIMPLIFY
207   (CALL1 14)                          ; NEG
209   (JMP L133)


Disassembly of function #:|(DEFMFUN SIMP-%ACOS (FORM Y Z) ...)-14|
(CONST 0) = SIMP-%ACOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ACOS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ACOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ACOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ACOS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ACOS
8     (SKIP&RET 1)


Disassembly of function SIMP-%ACOS
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ACOS
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = %PI//2
(CONST 11) = 1
(CONST 12) = 0
(CONST 13) = -1
(CONST 14) = $%PI
(CONST 15) = |1//2|
(CONST 16) = ALIKE1
(CONST 17) = ((RAT SIMP) 1 3)
(CONST 18) = MUL
(CONST 19) = $TRIGINVERSES
(CONST 20) = $ALL
(CONST 21) = %COS
(CONST 22) = $LOGARC
(CONST 23) = %ACOS
(CONST 24) = LOGARC
(CONST 25) = $TRIGSIGN
(CONST 26) = MMINUSP*
(CONST 27) = NEG
(CONST 28) = SIMPLIFY
(CONST 29) = SUB
(CONST 30) = (%ACOS)
(CONST 31) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (%PI//2 $TRIGSIGN $LOGARC $TRIGINVERSES |1//2| $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
98 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L124)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L124)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L130)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L75)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 9 L136)                ; ZEROP1
50    (GETVALUE&PUSH 1)                   ; Y
52    (JMPIFEQTO 11 L143)                 ; 1
56    (GETVALUE&PUSH 1)                   ; Y
58    (JMPIFEQTO 13 L146)                 ; -1
62    (GETVALUE&PUSH 1)                   ; Y
64    (GETVALUE&PUSH 15)                  ; |1//2|
66    (CALL2&JMPIFNOT 16 L75)             ; ALIKE1
69    (CONST&PUSH 17)                     ; ((RAT SIMP) 1 3)
70    (CONST&PUSH 14)                     ; $%PI
71    (CALL2 18)                          ; MUL
73    (JMPIF1 L120)
75    L75
75    (GETVALUE&PUSH 19)                  ; $TRIGINVERSES
77    (JMPIFNOTEQTO 20 L97)               ; $ALL
80    (GETVALUE 1)                        ; Y
82    (JMPIFATOM L97)
84    (GETVALUE 1)                        ; Y
86    (CAR)
87    (CAR&PUSH)
88    (JMPIFNOTEQTO 21 L97)               ; %COS
91    (GETVALUE 1)                        ; Y
93    (CDR)
94    (CAR)
95    (JMPIF1 L120)
97    L97
97    (GETVALUE 22)                       ; $LOGARC
99    (JMPIF L149)
101   (GETVALUE 25)                       ; $TRIGSIGN
103   (JMPIFNOT L110)
105   (GETVALUE&PUSH 1)                   ; Y
107   (CALL1&JMPIF 26 L156)               ; MMINUSP*
110   L110
110   (CONST&PUSH 30)                     ; (%ACOS)
112   (GETVALUE&PUSH 1)                   ; Y
114   (LIST&PUSH 2)
116   (GETVALUE&PUSH 0)                   ; FORM
118   (CALL2 31)                          ; EQTEST
120   L120
120   (UNBIND 2)
122   (SKIP&RET 4)
124   L124
124   (GETVALUE&PUSH 1)                   ; Y
126   (CALL1 5)                           ; ACOS
128   (JMP L120)
130   L130
130   (GETVALUE&PUSH 0)                   ; FORM
132   (CALL1 7)                           ; $BFLOAT
134   (JMP L120)
136   L136
136   (GETVALUE 10)                       ; %PI//2
138   (JMPIF1 L120)
140   (JMP L75)
143   L143
143   (CONST 12)                          ; 0
144   (JMP L120)
146   L146
146   (CONST 14)                          ; $%PI
147   (JMP L120)
149   L149
149   (CONST&PUSH 23)                     ; %ACOS
150   (GETVALUE&PUSH 1)                   ; Y
152   (CALL2 24)                          ; LOGARC
154   (JMP L120)
156   L156
156   (CONST&PUSH 14)                     ; $%PI
157   (CONST&PUSH 23)                     ; %ACOS
158   (LIST&PUSH 1)
160   (GETVALUE&PUSH 1)                   ; Y
162   (CALL1&PUSH 27)                     ; NEG
164   (LIST&PUSH 2)
166   (CALL1&PUSH 28)                     ; SIMPLIFY
168   (CALL2 29)                          ; SUB
170   (JMP L120)


Disassembly of function #:|(DEFMFUN SIMP-%ACOT (FORM Y Z) ...)-15|
(CONST 0) = SIMP-%ACOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ACOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ACOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ACOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ACOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ACOT
8     (SKIP&RET 1)


Disassembly of function SIMP-%ACOT
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ACOT
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = %PI//2
(CONST 11) = 1
(CONST 12) = %PI//4
(CONST 13) = -1
(CONST 14) = NEG
(CONST 15) = $%IARGS
(CONST 16) = $%I
(CONST 17) = MULTIPLEP
(CONST 18) = %ACOTH
(CONST 19) = COEFF
(CONST 20) = SIMPLIFY
(CONST 21) = MUL
(CONST 22) = $TRIGINVERSES
(CONST 23) = $ALL
(CONST 24) = %COT
(CONST 25) = $LOGARC
(CONST 26) = %ACOT
(CONST 27) = LOGARC
(CONST 28) = $TRIGSIGN
(CONST 29) = MMINUSP*
(CONST 30) = (%ACOT)
(CONST 31) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (%PI//2 $TRIGSIGN $LOGARC $TRIGINVERSES $%IARGS %PI//4 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
110 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L129)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L129)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L135)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L67)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 9 L141)                ; ZEROP1
50    (GETVALUE&PUSH 1)                   ; Y
52    (JMPIFEQTO 11 L148)                 ; 1
56    (GETVALUE&PUSH 1)                   ; Y
58    (JMPIFNOTEQTO 13 L67)               ; -1
61    (GETVALUE&PUSH 12)                  ; %PI//4
63    (CALL1 14)                          ; NEG
65    (JMPIF1 L125)
67    L67
67    (GETVALUE 15)                       ; $%IARGS
69    (JMPIFNOT L78)
71    (GETVALUE&PUSH 1)                   ; Y
73    (CONST&PUSH 16)                     ; $%I
74    (CALL2&JMPIF 17 L155)               ; MULTIPLEP
78    L78
78    (GETVALUE&PUSH 22)                  ; $TRIGINVERSES
80    (JMPIFNOTEQTO 23 L100)              ; $ALL
83    (GETVALUE 1)                        ; Y
85    (JMPIFATOM L100)
87    (GETVALUE 1)                        ; Y
89    (CAR)
90    (CAR&PUSH)
91    (JMPIFNOTEQTO 24 L100)              ; %COT
94    (GETVALUE 1)                        ; Y
96    (CDR)
97    (CAR)
98    (JMPIF1 L125)
100   L100
100   (GETVALUE 25)                       ; $LOGARC
102   (JMPIF L176)
105   (GETVALUE 28)                       ; $TRIGSIGN
107   (JMPIFNOT L115)
109   (GETVALUE&PUSH 1)                   ; Y
111   (CALL1&JMPIF 29 L183)               ; MMINUSP*
115   L115
115   (CONST&PUSH 30)                     ; (%ACOT)
117   (GETVALUE&PUSH 1)                   ; Y
119   (LIST&PUSH 2)
121   (GETVALUE&PUSH 0)                   ; FORM
123   (CALL2 31)                          ; EQTEST
125   L125
125   (UNBIND 2)
127   (SKIP&RET 4)
129   L129
129   (GETVALUE&PUSH 1)                   ; Y
131   (CALL1 5)                           ; ACOT
133   (JMP L125)
135   L135
135   (GETVALUE&PUSH 0)                   ; FORM
137   (CALL1 7)                           ; $BFLOAT
139   (JMP L125)
141   L141
141   (GETVALUE 10)                       ; %PI//2
143   (JMPIF1 L125)
145   (JMP L67)
148   L148
148   (GETVALUE 12)                       ; %PI//4
150   (JMPIF1 L125)
152   (JMP L67)
155   L155
155   (CONST&PUSH 13)                     ; -1
156   (CONST&PUSH 16)                     ; $%I
157   (CONST&PUSH 18)                     ; %ACOTH
158   (LIST&PUSH 1)
160   (GETVALUE&PUSH 1)                   ; Y
162   (CONST&PUSH 16)                     ; $%I
163   (CONST&PUSH 11)                     ; 1
164   (CALL&PUSH 3 19)                    ; COEFF
167   (LIST&PUSH 2)
169   (CALL1&PUSH 20)                     ; SIMPLIFY
171   (CALL 3 21)                         ; MUL
174   (JMP L125)
176   L176
176   (CONST&PUSH 26)                     ; %ACOT
177   (GETVALUE&PUSH 1)                   ; Y
179   (CALL2 27)                          ; LOGARC
181   (JMP L125)
183   L183
183   (CONST&PUSH 26)                     ; %ACOT
184   (LIST&PUSH 1)
186   (GETVALUE&PUSH 1)                   ; Y
188   (CALL1&PUSH 14)                     ; NEG
190   (LIST&PUSH 2)
192   (CALL1&PUSH 20)                     ; SIMPLIFY
194   (CALL1 14)                          ; NEG
196   (JMP L125)


Disassembly of function #:|(DEFMFUN SIMP-%ACSC (FORM Y Z) ...)-16|
(CONST 0) = SIMP-%ACSC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ACSC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ACSC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ACSC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ACSC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ACSC
8     (SKIP&RET 1)


Disassembly of function SIMP-%ACSC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ACSC
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = 1
(CONST 10) = %PI//2
(CONST 11) = -1
(CONST 12) = NEG
(CONST 13) = $%IARGS
(CONST 14) = $%I
(CONST 15) = MULTIPLEP
(CONST 16) = %ACSCH
(CONST 17) = COEFF
(CONST 18) = SIMPLIFY
(CONST 19) = MUL
(CONST 20) = $TRIGINVERSES
(CONST 21) = $ALL
(CONST 22) = %CSC
(CONST 23) = $LOGARC
(CONST 24) = %ACSC
(CONST 25) = LOGARC
(CONST 26) = $TRIGSIGN
(CONST 27) = MMINUSP*
(CONST 28) = (%ACSC)
(CONST 29) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $LOGARC $TRIGINVERSES $%IARGS %PI//2 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
104 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L120)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L120)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L126)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L61)
44    (GETVALUE&PUSH 1)                   ; Y
46    (JMPIFEQTO 9 L132)                  ; 1
50    (GETVALUE&PUSH 1)                   ; Y
52    (JMPIFNOTEQTO 11 L61)               ; -1
55    (GETVALUE&PUSH 10)                  ; %PI//2
57    (CALL1 12)                          ; NEG
59    (JMPIF1 L116)
61    L61
61    (GETVALUE 13)                       ; $%IARGS
63    (JMPIFNOT L72)
65    (GETVALUE&PUSH 1)                   ; Y
67    (CONST&PUSH 14)                     ; $%I
68    (CALL2&JMPIF 15 L139)               ; MULTIPLEP
72    L72
72    (GETVALUE&PUSH 20)                  ; $TRIGINVERSES
74    (JMPIFNOTEQTO 21 L94)               ; $ALL
77    (GETVALUE 1)                        ; Y
79    (JMPIFATOM L94)
81    (GETVALUE 1)                        ; Y
83    (CAR)
84    (CAR&PUSH)
85    (JMPIFNOTEQTO 22 L94)               ; %CSC
88    (GETVALUE 1)                        ; Y
90    (CDR)
91    (CAR)
92    (JMPIF1 L116)
94    L94
94    (GETVALUE 23)                       ; $LOGARC
96    (JMPIF L160)
98    (GETVALUE 26)                       ; $TRIGSIGN
100   (JMPIFNOT L107)
102   (GETVALUE&PUSH 1)                   ; Y
104   (CALL1&JMPIF 27 L167)               ; MMINUSP*
107   L107
107   (CONST&PUSH 28)                     ; (%ACSC)
108   (GETVALUE&PUSH 1)                   ; Y
110   (LIST&PUSH 2)
112   (GETVALUE&PUSH 0)                   ; FORM
114   (CALL2 29)                          ; EQTEST
116   L116
116   (UNBIND 2)
118   (SKIP&RET 4)
120   L120
120   (GETVALUE&PUSH 1)                   ; Y
122   (CALL1 5)                           ; ACSC
124   (JMP L116)
126   L126
126   (GETVALUE&PUSH 0)                   ; FORM
128   (CALL1 7)                           ; $BFLOAT
130   (JMP L116)
132   L132
132   (GETVALUE 10)                       ; %PI//2
134   (JMPIF1 L116)
136   (JMP L61)
139   L139
139   (CONST&PUSH 11)                     ; -1
140   (CONST&PUSH 14)                     ; $%I
141   (CONST&PUSH 16)                     ; %ACSCH
142   (LIST&PUSH 1)
144   (GETVALUE&PUSH 1)                   ; Y
146   (CONST&PUSH 14)                     ; $%I
147   (CONST&PUSH 9)                      ; 1
148   (CALL&PUSH 3 17)                    ; COEFF
151   (LIST&PUSH 2)
153   (CALL1&PUSH 18)                     ; SIMPLIFY
155   (CALL 3 19)                         ; MUL
158   (JMP L116)
160   L160
160   (CONST&PUSH 24)                     ; %ACSC
161   (GETVALUE&PUSH 1)                   ; Y
163   (CALL2 25)                          ; LOGARC
165   (JMP L116)
167   L167
167   (CONST&PUSH 24)                     ; %ACSC
168   (LIST&PUSH 1)
170   (GETVALUE&PUSH 1)                   ; Y
172   (CALL1&PUSH 12)                     ; NEG
174   (LIST&PUSH 2)
176   (CALL1&PUSH 18)                     ; SIMPLIFY
178   (CALL1 12)                          ; NEG
180   (JMP L116)


Disassembly of function #:|(DEFMFUN SIMP-%ASEC (FORM Y Z) ...)-17|
(CONST 0) = SIMP-%ASEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ASEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ASEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ASEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ASEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ASEC
8     (SKIP&RET 1)


Disassembly of function SIMP-%ASEC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ASEC
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = 1
(CONST 10) = 0
(CONST 11) = -1
(CONST 12) = $%PI
(CONST 13) = $TRIGINVERSES
(CONST 14) = $ALL
(CONST 15) = %SEC
(CONST 16) = $LOGARC
(CONST 17) = %ASEC
(CONST 18) = LOGARC
(CONST 19) = $TRIGSIGN
(CONST 20) = MMINUSP*
(CONST 21) = NEG
(CONST 22) = SIMPLIFY
(CONST 23) = SUB
(CONST 24) = (%ASEC)
(CONST 25) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $LOGARC $TRIGINVERSES $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
85 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L103)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L103)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L109)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L55)
44    (GETVALUE&PUSH 1)                   ; Y
46    (JMPIFEQTO 9 L115)                  ; 1
50    (GETVALUE&PUSH 1)                   ; Y
52    (JMPIFEQTO 11 L118)                 ; -1
55    L55
55    (GETVALUE&PUSH 13)                  ; $TRIGINVERSES
57    (JMPIFNOTEQTO 14 L77)               ; $ALL
60    (GETVALUE 1)                        ; Y
62    (JMPIFATOM L77)
64    (GETVALUE 1)                        ; Y
66    (CAR)
67    (CAR&PUSH)
68    (JMPIFNOTEQTO 15 L77)               ; %SEC
71    (GETVALUE 1)                        ; Y
73    (CDR)
74    (CAR)
75    (JMPIF1 L99)
77    L77
77    (GETVALUE 16)                       ; $LOGARC
79    (JMPIF L121)
81    (GETVALUE 19)                       ; $TRIGSIGN
83    (JMPIFNOT L90)
85    (GETVALUE&PUSH 1)                   ; Y
87    (CALL1&JMPIF 20 L128)               ; MMINUSP*
90    L90
90    (CONST&PUSH 24)                     ; (%ASEC)
91    (GETVALUE&PUSH 1)                   ; Y
93    (LIST&PUSH 2)
95    (GETVALUE&PUSH 0)                   ; FORM
97    (CALL2 25)                          ; EQTEST
99    L99
99    (UNBIND 2)
101   (SKIP&RET 4)
103   L103
103   (GETVALUE&PUSH 1)                   ; Y
105   (CALL1 5)                           ; ASEC
107   (JMP L99)
109   L109
109   (GETVALUE&PUSH 0)                   ; FORM
111   (CALL1 7)                           ; $BFLOAT
113   (JMP L99)
115   L115
115   (CONST 10)                          ; 0
116   (JMP L99)
118   L118
118   (CONST 12)                          ; $%PI
119   (JMP L99)
121   L121
121   (CONST&PUSH 17)                     ; %ASEC
122   (GETVALUE&PUSH 1)                   ; Y
124   (CALL2 18)                          ; LOGARC
126   (JMP L99)
128   L128
128   (CONST&PUSH 12)                     ; $%PI
129   (CONST&PUSH 17)                     ; %ASEC
130   (LIST&PUSH 1)
132   (GETVALUE&PUSH 1)                   ; Y
134   (CALL1&PUSH 21)                     ; NEG
136   (LIST&PUSH 2)
138   (CALL1&PUSH 22)                     ; SIMPLIFY
140   (CALL2 23)                          ; SUB
142   (JMP L99)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE AHYPER))-18|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN SIMP-%ASINH (FORM Y Z) ...)-19|
(CONST 0) = SIMP-%ASINH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ASINH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ASINH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ASINH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ASINH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ASINH
8     (SKIP&RET 1)


Disassembly of function SIMP-%ASINH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ASINH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = $%IARGS
(CONST 11) = $%I
(CONST 12) = MULTIPLEP
(CONST 13) = %ASIN
(CONST 14) = 1
(CONST 15) = COEFF
(CONST 16) = SIMPLIFY
(CONST 17) = MUL
(CONST 18) = $TRIGINVERSES
(CONST 19) = $ALL
(CONST 20) = %SINH
(CONST 21) = $LOGARC
(CONST 22) = %ASINH
(CONST 23) = LOGARC
(CONST 24) = $TRIGSIGN
(CONST 25) = MMINUSP*
(CONST 26) = NEG
(CONST 27) = (%ASINH)
(CONST 28) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $LOGARC $TRIGINVERSES $%IARGS $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
96 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L111)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L111)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L117)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L53)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIFNOT 9 L53)              ; ZEROP1
49    (GETVALUE 1)                        ; Y
51    (JMPIF1 L107)
53    L53
53    (GETVALUE 10)                       ; $%IARGS
55    (JMPIFNOT L63)
57    (GETVALUE&PUSH 1)                   ; Y
59    (CONST&PUSH 11)                     ; $%I
60    (CALL2&JMPIF 12 L123)               ; MULTIPLEP
63    L63
63    (GETVALUE&PUSH 18)                  ; $TRIGINVERSES
65    (JMPIFNOTEQTO 19 L85)               ; $ALL
68    (GETVALUE 1)                        ; Y
70    (JMPIFATOM L85)
72    (GETVALUE 1)                        ; Y
74    (CAR)
75    (CAR&PUSH)
76    (JMPIFNOTEQTO 20 L85)               ; %SINH
79    (GETVALUE 1)                        ; Y
81    (CDR)
82    (CAR)
83    (JMPIF1 L107)
85    L85
85    (GETVALUE 21)                       ; $LOGARC
87    (JMPIF L142)
89    (GETVALUE 24)                       ; $TRIGSIGN
91    (JMPIFNOT L98)
93    (GETVALUE&PUSH 1)                   ; Y
95    (CALL1&JMPIF 25 L149)               ; MMINUSP*
98    L98
98    (CONST&PUSH 27)                     ; (%ASINH)
99    (GETVALUE&PUSH 1)                   ; Y
101   (LIST&PUSH 2)
103   (GETVALUE&PUSH 0)                   ; FORM
105   (CALL2 28)                          ; EQTEST
107   L107
107   (UNBIND 2)
109   (SKIP&RET 4)
111   L111
111   (GETVALUE&PUSH 1)                   ; Y
113   (CALL1 5)                           ; ASINH
115   (JMP L107)
117   L117
117   (GETVALUE&PUSH 0)                   ; FORM
119   (CALL1 7)                           ; $BFLOAT
121   (JMP L107)
123   L123
123   (CONST&PUSH 11)                     ; $%I
124   (CONST&PUSH 13)                     ; %ASIN
125   (LIST&PUSH 1)
127   (GETVALUE&PUSH 1)                   ; Y
129   (CONST&PUSH 11)                     ; $%I
130   (CONST&PUSH 14)                     ; 1
131   (CALL&PUSH 3 15)                    ; COEFF
134   (LIST&PUSH 2)
136   (CALL1&PUSH 16)                     ; SIMPLIFY
138   (CALL2 17)                          ; MUL
140   (JMP L107)
142   L142
142   (CONST&PUSH 22)                     ; %ASINH
143   (GETVALUE&PUSH 1)                   ; Y
145   (CALL2 23)                          ; LOGARC
147   (JMP L107)
149   L149
149   (CONST&PUSH 22)                     ; %ASINH
150   (LIST&PUSH 1)
152   (GETVALUE&PUSH 1)                   ; Y
154   (CALL1&PUSH 26)                     ; NEG
156   (LIST&PUSH 2)
158   (CALL1&PUSH 16)                     ; SIMPLIFY
160   (CALL1 26)                          ; NEG
162   (JMP L107)


Disassembly of function #:|(DEFMFUN SIMP-%ACOSH (FORM Y Z) ...)-20|
(CONST 0) = SIMP-%ACOSH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ACOSH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ACOSH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ACOSH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ACOSH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ACOSH
8     (SKIP&RET 1)


Disassembly of function SIMP-%ACOSH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ACOSH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = 1
(CONST 10) = 0
(CONST 11) = $TRIGINVERSES
(CONST 12) = $ALL
(CONST 13) = %COSH
(CONST 14) = $LOGARC
(CONST 15) = %ACOSH
(CONST 16) = LOGARC
(CONST 17) = (%ACOSH)
(CONST 18) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($LOGARC $TRIGINVERSES $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
65 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L85)               ; FLOATP
23    (GETVALUE 4)                        ; $NUMER
25    (JMPIFNOT L32)
27    (GETVALUE&PUSH 1)                   ; Y
29    (CALLS2&JMPIF 12 L85)               ; INTEGERP
32    L32
32    (GETVALUE&PUSH 1)                   ; Y
34    (CALL1&JMPIF 6 L91)                 ; $BFLOATP
37    (GETVALUE 8)                        ; $%PIARGS
39    (JMPIFNOT L46)
41    (GETVALUE&PUSH 1)                   ; Y
43    (JMPIFEQTO 9 L97)                   ; 1
46    L46
46    (GETVALUE&PUSH 11)                  ; $TRIGINVERSES
48    (JMPIFNOTEQTO 12 L68)               ; $ALL
51    (GETVALUE 1)                        ; Y
53    (JMPIFATOM L68)
55    (GETVALUE 1)                        ; Y
57    (CAR)
58    (CAR&PUSH)
59    (JMPIFNOTEQTO 13 L68)               ; %COSH
62    (GETVALUE 1)                        ; Y
64    (CDR)
65    (CAR)
66    (JMPIF1 L81)
68    L68
68    (GETVALUE 14)                       ; $LOGARC
70    (JMPIF L100)
72    (CONST&PUSH 17)                     ; (%ACOSH)
73    (GETVALUE&PUSH 1)                   ; Y
75    (LIST&PUSH 2)
77    (GETVALUE&PUSH 0)                   ; FORM
79    (CALL2 18)                          ; EQTEST
81    L81
81    (UNBIND 2)
83    (SKIP&RET 4)
85    L85
85    (GETVALUE&PUSH 1)                   ; Y
87    (CALL1 5)                           ; ACOSH
89    (JMP L81)
91    L91
91    (GETVALUE&PUSH 0)                   ; FORM
93    (CALL1 7)                           ; $BFLOAT
95    (JMP L81)
97    L97
97    (CONST 10)                          ; 0
98    (JMP L81)
100   L100
100   (CONST&PUSH 15)                     ; %ACOSH
101   (GETVALUE&PUSH 1)                   ; Y
103   (CALL2 16)                          ; LOGARC
105   (JMP L81)


Disassembly of function #:|(DEFMFUN SIMP-%ATANH (FORM Y Z) ...)-21|
(CONST 0) = SIMP-%ATANH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ATANH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ATANH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ATANH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ATANH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ATANH
8     (SKIP&RET 1)


Disassembly of function SIMP-%ATANH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ATANH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = 0
(CONST 11) = 1
(CONST 12) = -1
(CONST 13) = DBZ-ERR1
(CONST 14) = $%IARGS
(CONST 15) = $%I
(CONST 16) = MULTIPLEP
(CONST 17) = %ATAN
(CONST 18) = COEFF
(CONST 19) = SIMPLIFY
(CONST 20) = MUL
(CONST 21) = $TRIGINVERSES
(CONST 22) = $ALL
(CONST 23) = %TANH
(CONST 24) = $LOGARC
(CONST 25) = %ATANH
(CONST 26) = LOGARC
(CONST 27) = $TRIGSIGN
(CONST 28) = MMINUSP*
(CONST 29) = NEG
(CONST 30) = (%ATANH)
(CONST 31) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $LOGARC $TRIGINVERSES $%IARGS $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
105 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L125)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L125)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L131)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L65)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIF 9 L137)                ; ZEROP1
50    (GETVALUE&PUSH 1)                   ; Y
52    (JMPIFEQTO 11 L60)                  ; 1
55    (GETVALUE&PUSH 1)                   ; Y
57    (JMPIFNOTEQTO 12 L65)               ; -1
60    L60
60    (CONST&PUSH 5)                      ; ATANH
61    (CALL1 13)                          ; DBZ-ERR1
63    (JMPIF1 L121)
65    L65
65    (GETVALUE 14)                       ; $%IARGS
67    (JMPIFNOT L76)
69    (GETVALUE&PUSH 1)                   ; Y
71    (CONST&PUSH 15)                     ; $%I
72    (CALL2&JMPIF 16 L140)               ; MULTIPLEP
76    L76
76    (GETVALUE&PUSH 21)                  ; $TRIGINVERSES
78    (JMPIFNOTEQTO 22 L98)               ; $ALL
81    (GETVALUE 1)                        ; Y
83    (JMPIFATOM L98)
85    (GETVALUE 1)                        ; Y
87    (CAR)
88    (CAR&PUSH)
89    (JMPIFNOTEQTO 23 L98)               ; %TANH
92    (GETVALUE 1)                        ; Y
94    (CDR)
95    (CAR)
96    (JMPIF1 L121)
98    L98
98    (GETVALUE 24)                       ; $LOGARC
100   (JMPIF L159)
102   (GETVALUE 27)                       ; $TRIGSIGN
104   (JMPIFNOT L111)
106   (GETVALUE&PUSH 1)                   ; Y
108   (CALL1&JMPIF 28 L166)               ; MMINUSP*
111   L111
111   (CONST&PUSH 30)                     ; (%ATANH)
113   (GETVALUE&PUSH 1)                   ; Y
115   (LIST&PUSH 2)
117   (GETVALUE&PUSH 0)                   ; FORM
119   (CALL2 31)                          ; EQTEST
121   L121
121   (UNBIND 2)
123   (SKIP&RET 4)
125   L125
125   (GETVALUE&PUSH 1)                   ; Y
127   (CALL1 5)                           ; ATANH
129   (JMP L121)
131   L131
131   (GETVALUE&PUSH 0)                   ; FORM
133   (CALL1 7)                           ; $BFLOAT
135   (JMP L121)
137   L137
137   (CONST 10)                          ; 0
138   (JMP L121)
140   L140
140   (CONST&PUSH 15)                     ; $%I
141   (CONST&PUSH 17)                     ; %ATAN
142   (LIST&PUSH 1)
144   (GETVALUE&PUSH 1)                   ; Y
146   (CONST&PUSH 15)                     ; $%I
147   (CONST&PUSH 11)                     ; 1
148   (CALL&PUSH 3 18)                    ; COEFF
151   (LIST&PUSH 2)
153   (CALL1&PUSH 19)                     ; SIMPLIFY
155   (CALL2 20)                          ; MUL
157   (JMP L121)
159   L159
159   (CONST&PUSH 25)                     ; %ATANH
160   (GETVALUE&PUSH 1)                   ; Y
162   (CALL2 26)                          ; LOGARC
164   (JMP L121)
166   L166
166   (CONST&PUSH 25)                     ; %ATANH
167   (LIST&PUSH 1)
169   (GETVALUE&PUSH 1)                   ; Y
171   (CALL1&PUSH 29)                     ; NEG
173   (LIST&PUSH 2)
175   (CALL1&PUSH 19)                     ; SIMPLIFY
177   (CALL1 29)                          ; NEG
179   (JMP L121)


Disassembly of function #:|(DEFMFUN SIMP-%ACOTH (FORM Y Z) ...)-22|
(CONST 0) = SIMP-%ACOTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ACOTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ACOTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ACOTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ACOTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ACOTH
8     (SKIP&RET 1)


Disassembly of function SIMP-%ACOTH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ACOTH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = 1
(CONST 10) = -1
(CONST 11) = DBZ-ERR1
(CONST 12) = $%IARGS
(CONST 13) = $%I
(CONST 14) = MULTIPLEP
(CONST 15) = %ACOT
(CONST 16) = COEFF
(CONST 17) = SIMPLIFY
(CONST 18) = MUL
(CONST 19) = $TRIGINVERSES
(CONST 20) = $ALL
(CONST 21) = %COTH
(CONST 22) = $LOGARC
(CONST 23) = %ACOTH
(CONST 24) = LOGARC
(CONST 25) = $TRIGSIGN
(CONST 26) = MMINUSP*
(CONST 27) = NEG
(CONST 28) = (%ACOTH)
(CONST 29) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $LOGARC $TRIGINVERSES $%IARGS $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
101 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L117)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L117)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L123)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L59)
44    (GETVALUE&PUSH 1)                   ; Y
46    (JMPIFEQTO 9 L54)                   ; 1
49    (GETVALUE&PUSH 1)                   ; Y
51    (JMPIFNOTEQTO 10 L59)               ; -1
54    L54
54    (CONST&PUSH 5)                      ; ACOTH
55    (CALL1 11)                          ; DBZ-ERR1
57    (JMPIF1 L113)
59    L59
59    (GETVALUE 12)                       ; $%IARGS
61    (JMPIFNOT L69)
63    (GETVALUE&PUSH 1)                   ; Y
65    (CONST&PUSH 13)                     ; $%I
66    (CALL2&JMPIF 14 L129)               ; MULTIPLEP
69    L69
69    (GETVALUE&PUSH 19)                  ; $TRIGINVERSES
71    (JMPIFNOTEQTO 20 L91)               ; $ALL
74    (GETVALUE 1)                        ; Y
76    (JMPIFATOM L91)
78    (GETVALUE 1)                        ; Y
80    (CAR)
81    (CAR&PUSH)
82    (JMPIFNOTEQTO 21 L91)               ; %COTH
85    (GETVALUE 1)                        ; Y
87    (CDR)
88    (CAR)
89    (JMPIF1 L113)
91    L91
91    (GETVALUE 22)                       ; $LOGARC
93    (JMPIF L150)
95    (GETVALUE 25)                       ; $TRIGSIGN
97    (JMPIFNOT L104)
99    (GETVALUE&PUSH 1)                   ; Y
101   (CALL1&JMPIF 26 L157)               ; MMINUSP*
104   L104
104   (CONST&PUSH 28)                     ; (%ACOTH)
105   (GETVALUE&PUSH 1)                   ; Y
107   (LIST&PUSH 2)
109   (GETVALUE&PUSH 0)                   ; FORM
111   (CALL2 29)                          ; EQTEST
113   L113
113   (UNBIND 2)
115   (SKIP&RET 4)
117   L117
117   (GETVALUE&PUSH 1)                   ; Y
119   (CALL1 5)                           ; ACOTH
121   (JMP L113)
123   L123
123   (GETVALUE&PUSH 0)                   ; FORM
125   (CALL1 7)                           ; $BFLOAT
127   (JMP L113)
129   L129
129   (CONST&PUSH 10)                     ; -1
130   (CONST&PUSH 13)                     ; $%I
131   (CONST&PUSH 15)                     ; %ACOT
132   (LIST&PUSH 1)
134   (GETVALUE&PUSH 1)                   ; Y
136   (CONST&PUSH 13)                     ; $%I
137   (CONST&PUSH 9)                      ; 1
138   (CALL&PUSH 3 16)                    ; COEFF
141   (LIST&PUSH 2)
143   (CALL1&PUSH 17)                     ; SIMPLIFY
145   (CALL 3 18)                         ; MUL
148   (JMP L113)
150   L150
150   (CONST&PUSH 23)                     ; %ACOTH
151   (GETVALUE&PUSH 1)                   ; Y
153   (CALL2 24)                          ; LOGARC
155   (JMP L113)
157   L157
157   (CONST&PUSH 23)                     ; %ACOTH
158   (LIST&PUSH 1)
160   (GETVALUE&PUSH 1)                   ; Y
162   (CALL1&PUSH 27)                     ; NEG
164   (LIST&PUSH 2)
166   (CALL1&PUSH 17)                     ; SIMPLIFY
168   (CALL1 27)                          ; NEG
170   (JMP L113)


Disassembly of function #:|(DEFMFUN SIMP-%ACSCH (FORM Y Z) ...)-23|
(CONST 0) = SIMP-%ACSCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ACSCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ACSCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ACSCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ACSCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ACSCH
8     (SKIP&RET 1)


Disassembly of function SIMP-%ACSCH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ACSCH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = DBZ-ERR1
(CONST 11) = $%IARGS
(CONST 12) = $%I
(CONST 13) = MULTIPLEP
(CONST 14) = -1
(CONST 15) = %ACSC
(CONST 16) = 1
(CONST 17) = COEFF
(CONST 18) = SIMPLIFY
(CONST 19) = MUL
(CONST 20) = $TRIGINVERSES
(CONST 21) = $ALL
(CONST 22) = %CSCH
(CONST 23) = $LOGARC
(CONST 24) = %ACSCH
(CONST 25) = LOGARC
(CONST 26) = $TRIGSIGN
(CONST 27) = MMINUSP*
(CONST 28) = NEG
(CONST 29) = (%ACSCH)
(CONST 30) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $LOGARC $TRIGINVERSES $%IARGS $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
98 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L112)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L112)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L118)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L54)
44    (GETVALUE&PUSH 1)                   ; Y
46    (CALL1&JMPIFNOT 9 L54)              ; ZEROP1
49    (CONST&PUSH 5)                      ; ACSCH
50    (CALL1 10)                          ; DBZ-ERR1
52    (JMPIF1 L108)
54    L54
54    (GETVALUE 11)                       ; $%IARGS
56    (JMPIFNOT L64)
58    (GETVALUE&PUSH 1)                   ; Y
60    (CONST&PUSH 12)                     ; $%I
61    (CALL2&JMPIF 13 L124)               ; MULTIPLEP
64    L64
64    (GETVALUE&PUSH 20)                  ; $TRIGINVERSES
66    (JMPIFNOTEQTO 21 L86)               ; $ALL
69    (GETVALUE 1)                        ; Y
71    (JMPIFATOM L86)
73    (GETVALUE 1)                        ; Y
75    (CAR)
76    (CAR&PUSH)
77    (JMPIFNOTEQTO 22 L86)               ; %CSCH
80    (GETVALUE 1)                        ; Y
82    (CDR)
83    (CAR)
84    (JMPIF1 L108)
86    L86
86    (GETVALUE 23)                       ; $LOGARC
88    (JMPIF L145)
90    (GETVALUE 26)                       ; $TRIGSIGN
92    (JMPIFNOT L99)
94    (GETVALUE&PUSH 1)                   ; Y
96    (CALL1&JMPIF 27 L152)               ; MMINUSP*
99    L99
99    (CONST&PUSH 29)                     ; (%ACSCH)
100   (GETVALUE&PUSH 1)                   ; Y
102   (LIST&PUSH 2)
104   (GETVALUE&PUSH 0)                   ; FORM
106   (CALL2 30)                          ; EQTEST
108   L108
108   (UNBIND 2)
110   (SKIP&RET 4)
112   L112
112   (GETVALUE&PUSH 1)                   ; Y
114   (CALL1 5)                           ; ACSCH
116   (JMP L108)
118   L118
118   (GETVALUE&PUSH 0)                   ; FORM
120   (CALL1 7)                           ; $BFLOAT
122   (JMP L108)
124   L124
124   (CONST&PUSH 14)                     ; -1
125   (CONST&PUSH 12)                     ; $%I
126   (CONST&PUSH 15)                     ; %ACSC
127   (LIST&PUSH 1)
129   (GETVALUE&PUSH 1)                   ; Y
131   (CONST&PUSH 12)                     ; $%I
132   (CONST&PUSH 16)                     ; 1
133   (CALL&PUSH 3 17)                    ; COEFF
136   (LIST&PUSH 2)
138   (CALL1&PUSH 18)                     ; SIMPLIFY
140   (CALL 3 19)                         ; MUL
143   (JMP L108)
145   L145
145   (CONST&PUSH 24)                     ; %ACSCH
146   (GETVALUE&PUSH 1)                   ; Y
148   (CALL2 25)                          ; LOGARC
150   (JMP L108)
152   L152
152   (CONST&PUSH 24)                     ; %ACSCH
153   (LIST&PUSH 1)
155   (GETVALUE&PUSH 1)                   ; Y
157   (CALL1&PUSH 28)                     ; NEG
159   (LIST&PUSH 2)
161   (CALL1&PUSH 18)                     ; SIMPLIFY
163   (CALL1 28)                          ; NEG
165   (JMP L108)


Disassembly of function #:|(DEFMFUN SIMP-%ASECH (FORM Y Z) ...)-24|
(CONST 0) = SIMP-%ASECH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ASECH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ASECH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ASECH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ASECH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ASECH
8     (SKIP&RET 1)


Disassembly of function SIMP-%ASECH
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = ASECH
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = 1
(CONST 10) = 0
(CONST 11) = ZEROP1
(CONST 12) = DBZ-ERR1
(CONST 13) = $TRIGINVERSES
(CONST 14) = $ALL
(CONST 15) = %SECH
(CONST 16) = $LOGARC
(CONST 17) = %ASECH
(CONST 18) = LOGARC
(CONST 19) = $TRIGSIGN
(CONST 20) = MMINUSP*
(CONST 21) = NEG
(CONST 22) = SIMPLIFY
(CONST 23) = (%ASECH)
(CONST 24) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $LOGARC $TRIGINVERSES $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
83 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L108)              ; FLOATP
24    (GETVALUE 4)                        ; $NUMER
26    (JMPIFNOT L34)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIF 12 L108)              ; INTEGERP
34    L34
34    (GETVALUE&PUSH 1)                   ; Y
36    (CALL1&JMPIF 6 L114)                ; $BFLOATP
40    (GETVALUE 8)                        ; $%PIARGS
42    (JMPIFNOT L60)
44    (GETVALUE&PUSH 1)                   ; Y
46    (JMPIFEQTO 9 L120)                  ; 1
50    (GETVALUE&PUSH 1)                   ; Y
52    (CALL1&JMPIFNOT 11 L60)             ; ZEROP1
55    (CONST&PUSH 5)                      ; ASECH
56    (CALL1 12)                          ; DBZ-ERR1
58    (JMPIF1 L104)
60    L60
60    (GETVALUE&PUSH 13)                  ; $TRIGINVERSES
62    (JMPIFNOTEQTO 14 L82)               ; $ALL
65    (GETVALUE 1)                        ; Y
67    (JMPIFATOM L82)
69    (GETVALUE 1)                        ; Y
71    (CAR)
72    (CAR&PUSH)
73    (JMPIFNOTEQTO 15 L82)               ; %SECH
76    (GETVALUE 1)                        ; Y
78    (CDR)
79    (CAR)
80    (JMPIF1 L104)
82    L82
82    (GETVALUE 16)                       ; $LOGARC
84    (JMPIF L123)
86    (GETVALUE 19)                       ; $TRIGSIGN
88    (JMPIFNOT L95)
90    (GETVALUE&PUSH 1)                   ; Y
92    (CALL1&JMPIF 20 L130)               ; MMINUSP*
95    L95
95    (CONST&PUSH 23)                     ; (%ASECH)
96    (GETVALUE&PUSH 1)                   ; Y
98    (LIST&PUSH 2)
100   (GETVALUE&PUSH 0)                   ; FORM
102   (CALL2 24)                          ; EQTEST
104   L104
104   (UNBIND 2)
106   (SKIP&RET 4)
108   L108
108   (GETVALUE&PUSH 1)                   ; Y
110   (CALL1 5)                           ; ASECH
112   (JMP L104)
114   L114
114   (GETVALUE&PUSH 0)                   ; FORM
116   (CALL1 7)                           ; $BFLOAT
118   (JMP L104)
120   L120
120   (CONST 10)                          ; 0
121   (JMP L104)
123   L123
123   (CONST&PUSH 17)                     ; %ASECH
124   (GETVALUE&PUSH 1)                   ; Y
126   (CALL2 18)                          ; LOGARC
128   (JMP L104)
130   L130
130   (CONST&PUSH 17)                     ; %ASECH
131   (LIST&PUSH 1)
133   (GETVALUE&PUSH 1)                   ; Y
135   (CALL1&PUSH 21)                     ; NEG
137   (LIST&PUSH 2)
139   (CALL1 22)                          ; SIMPLIFY
141   (JMP L104)


Disassembly of function #:|(DECLARE-TOP (SPLITFILE TRIGEX) (SPECIAL $TRIGEXPANDPLUS $TRIGEXPANDTIMES))-25|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $TRIGEXPAND (E) ...)-26|
(CONST 0) = $TRIGEXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TRIGEXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRIGEXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TRIGEXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TRIGEXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TRIGEXPAND
8     (SKIP&RET 1)


Disassembly of function $TRIGEXPAND
(CONST 0) = E
(CONST 1) = SPECREPP
(CONST 2) = SPECDISREP
(CONST 3) = TRIGEXPAND
(CONST 4) = $TRIGEXPAND
(CONST 5) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (E)
29 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; E
3     (GETVALUE 0)                        ; E
5     (JMPIFATOM L33)
7     (GETVALUE&PUSH 0)                   ; E
9     (CALL1&JMPIF 1 L37)                 ; SPECREPP
12    (GETVALUE 0)                        ; E
14    (CAR)
15    (CAR&PUSH)
16    (GETVALUE 0)                        ; E
18    (CDR)
19    (CAR&PUSH)
20    (CALL2 3)                           ; TRIGEXPAND
22    (JMPIF1 L30)
24    (CONST&SYMBOL-FUNCTION&PUSH 4)      ; $TRIGEXPAND
26    (GETVALUE&PUSH 0)                   ; E
28    (CALL2 5)                           ; RECUR-APPLY
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (GETVALUE 0)                        ; E
35    (JMP L30)
37    L37
37    (GETVALUE&PUSH 0)                   ; E
39    (CALL1&PUSH 2)                      ; SPECDISREP
41    (JSR L0)
43    (JMP L30)


Disassembly of function #:|(DEFMFUN TRIGEXPAND (OP ARG) ...)-27|
(CONST 0) = TRIGEXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIGEXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGEXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIGEXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIGEXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIGEXPAND
8     (SKIP&RET 1)


Disassembly of function TRIGEXPAND
(CONST 0) = ARG
(CONST 1) = $TRIGEXPANDPLUS
(CONST 2) = MPLUS
(CONST 3) = %SIN
(CONST 4) = 1
(CONST 5) = %COS
(CONST 6) = -1
(CONST 7) = SINCOS-PLUS
(CONST 8) = 0
(CONST 9) = %TAN
(CONST 10) = TAN-PLUS
(CONST 11) = %COT
(CONST 12) = COT-PLUS
(CONST 13) = %CSC
(CONST 14) = %SEC
(CONST 15) = CSCSEC-PLUS
(CONST 16) = %SINH
(CONST 17) = %COSH
(CONST 18) = %TANH
(CONST 19) = %COTH
(CONST 20) = %CSCH
(CONST 21) = %SECH
(CONST 22) = $TRIGEXPANDTIMES
(CONST 23) = MTIMES
(CONST 24) = ML-TYPEP
(CONST 25) = FIXNUM
(CONST 26) = SINCOS-TIMES
(CONST 27) = TAN-TIMES
(CONST 28) = COT-TIMES
(CONST 29) = CSCSEC-TIMES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGEXPANDTIMES $TRIGEXPANDPLUS ARG)
330 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (GETVALUE 0)                        ; ARG
5     (JMPIFATOM L70)
7     (GETVALUE 1)                        ; $TRIGEXPANDPLUS
9     (JMPIFNOT L304)
12    (GETVALUE 0)                        ; ARG
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFNOTEQTO 2 L304)               ; MPLUS
20    (LOAD&PUSH 5)
21    (JMPIFEQTO 3 L74)                   ; %SIN
24    (LOAD&PUSH 5)
25    (JMPIFEQTO 5 L83)                   ; %COS
28    (LOAD&PUSH 5)
29    (JMPIFEQTO 9 L92)                   ; %TAN
32    (LOAD&PUSH 5)
33    (JMPIFEQTO 11 L99)                  ; %COT
36    (LOAD&PUSH 5)
37    (JMPIFEQTO 13 L106)                 ; %CSC
41    (LOAD&PUSH 5)
42    (JMPIFEQTO 14 L116)                 ; %SEC
46    (LOAD&PUSH 5)
47    (JMPIFEQTO 16 L126)                 ; %SINH
51    (LOAD&PUSH 5)
52    (JMPIFNOTEQTO 17 L136)              ; %COSH
56    (GETVALUE 0)                        ; ARG
58    (CDR&PUSH)
59    (CONST&PUSH 8)                      ; 0
60    (CONST&PUSH 16)                     ; %SINH
61    (CONST&PUSH 17)                     ; %COSH
62    (CONST 4)                           ; 1
63    L63
63    (PUSH)
64    (CALL 5 7)                          ; SINCOS-PLUS
67    (JMP L470)
70    L70
70    (NIL)
71    (JMP L470)
74    L74
74    (GETVALUE 0)                        ; ARG
76    (CDR&PUSH)
77    (CONST&PUSH 4)                      ; 1
78    (CONST&PUSH 3)                      ; %SIN
79    (CONST&PUSH 5)                      ; %COS
80    (CONST 6)                           ; -1
81    (JMP L63)
83    L83
83    (GETVALUE 0)                        ; ARG
85    (CDR&PUSH)
86    (CONST&PUSH 8)                      ; 0
87    (CONST&PUSH 3)                      ; %SIN
88    (CONST&PUSH 5)                      ; %COS
89    (CONST 6)                           ; -1
90    (JMP L63)
92    L92
92    (GETVALUE 0)                        ; ARG
94    (CDR&PUSH)
95    (CONST&PUSH 9)                      ; %TAN
96    (CONST 6)                           ; -1
97    (JMP L145)
99    L99
99    (GETVALUE 0)                        ; ARG
101   (CDR&PUSH)
102   (CONST&PUSH 11)                     ; %COT
103   (CONST 6)                           ; -1
104   (JMP L161)
106   L106
106   (GETVALUE 0)                        ; ARG
108   (CDR&PUSH)
109   (CONST&PUSH 4)                      ; 1
110   (CONST&PUSH 13)                     ; %CSC
111   (CONST&PUSH 14)                     ; %SEC
112   (CONST 6)                           ; -1
113   (JMP L192)
116   L116
116   (GETVALUE 0)                        ; ARG
118   (CDR&PUSH)
119   (CONST&PUSH 8)                      ; 0
120   (CONST&PUSH 13)                     ; %CSC
121   (CONST&PUSH 14)                     ; %SEC
122   (CONST 6)                           ; -1
123   (JMP L192)
126   L126
126   (GETVALUE 0)                        ; ARG
128   (CDR&PUSH)
129   (CONST&PUSH 4)                      ; 1
130   (CONST&PUSH 16)                     ; %SINH
131   (CONST&PUSH 17)                     ; %COSH
132   (CONST 4)                           ; 1
133   (JMP L63)
136   L136
136   (LOAD&PUSH 5)
137   (JMPIFNOTEQTO 18 L152)              ; %TANH
140   (GETVALUE 0)                        ; ARG
142   (CDR&PUSH)
143   (CONST&PUSH 18)                     ; %TANH
144   (CONST 4)                           ; 1
145   L145
145   (PUSH)
146   (CALL 3 10)                         ; TAN-PLUS
149   (JMP L470)
152   L152
152   (LOAD&PUSH 5)
153   (JMPIFNOTEQTO 19 L177)              ; %COTH
156   (GETVALUE 0)                        ; ARG
158   (CDR&PUSH)
159   (CONST&PUSH 19)                     ; %COTH
160   (CONST 4)                           ; 1
161   L161
161   (PUSH)
162   (CALL 3 12)                         ; COT-PLUS
165   (JMP L470)
168   L168
168   (GETVALUE 0)                        ; ARG
170   (CDR&PUSH)
171   (CONST&PUSH 4)                      ; 1
172   (CONST&PUSH 20)                     ; %CSCH
173   (CONST&PUSH 21)                     ; %SECH
174   (CONST 4)                           ; 1
175   (JMP L192)
177   L177
177   (LOAD&PUSH 5)
178   (JMPIFEQTO 20 L168)                 ; %CSCH
181   (LOAD&PUSH 5)
182   (JMPIFNOTEQTO 21 L199)              ; %SECH
185   (GETVALUE 0)                        ; ARG
187   (CDR&PUSH)
188   (CONST&PUSH 8)                      ; 0
189   (CONST&PUSH 20)                     ; %CSCH
190   (CONST&PUSH 21)                     ; %SECH
191   (CONST 4)                           ; 1
192   L192
192   (PUSH)
193   (CALL 5 15)                         ; CSCSEC-PLUS
196   (JMP L470)
199   L199
199   (NIL)
200   (JMP L470)
203   L203
203   (GETVALUE 0)                        ; ARG
205   (CDR)
206   (CDR&PUSH)
207   (CONST&PUSH 4)                      ; 1
208   (GETVALUE 0)                        ; ARG
210   (CDR)
211   (CAR&PUSH)
212   (CONST&PUSH 3)                      ; %SIN
213   (CONST&PUSH 5)                      ; %COS
214   (CONST 6)                           ; -1
215   (JMP L378)
218   L218
218   (GETVALUE 0)                        ; ARG
220   (CDR)
221   (CDR&PUSH)
222   (CONST&PUSH 8)                      ; 0
223   (GETVALUE 0)                        ; ARG
225   (CDR)
226   (CAR&PUSH)
227   (CONST&PUSH 3)                      ; %SIN
228   (CONST&PUSH 5)                      ; %COS
229   (CONST 6)                           ; -1
230   (JMP L378)
233   L233
233   (GETVALUE 0)                        ; ARG
235   (CDR)
236   (CDR&PUSH)
237   (GETVALUE 0)                        ; ARG
239   (CDR)
240   (CAR&PUSH)
241   (CONST&PUSH 9)                      ; %TAN
242   (CONST 6)                           ; -1
243   (JMP L399)
246   L246
246   (GETVALUE 0)                        ; ARG
248   (CDR)
249   (CDR&PUSH)
250   (GETVALUE 0)                        ; ARG
252   (CDR)
253   (CAR&PUSH)
254   (CONST&PUSH 11)                     ; %COT
255   (CONST 6)                           ; -1
256   (JMP L420)
259   L259
259   (GETVALUE 0)                        ; ARG
261   (CDR)
262   (CDR&PUSH)
263   (CONST&PUSH 4)                      ; 1
264   (GETVALUE 0)                        ; ARG
266   (CDR)
267   (CAR&PUSH)
268   (CONST&PUSH 13)                     ; %CSC
269   (CONST&PUSH 14)                     ; %SEC
270   (CONST 6)                           ; -1
271   (JMP L460)
274   L274
274   (GETVALUE 0)                        ; ARG
276   (CDR)
277   (CDR&PUSH)
278   (CONST&PUSH 8)                      ; 0
279   (GETVALUE 0)                        ; ARG
281   (CDR)
282   (CAR&PUSH)
283   (CONST&PUSH 13)                     ; %CSC
284   (CONST&PUSH 14)                     ; %SEC
285   (CONST 6)                           ; -1
286   (JMP L460)
289   L289
289   (GETVALUE 0)                        ; ARG
291   (CDR)
292   (CDR&PUSH)
293   (CONST&PUSH 4)                      ; 1
294   (GETVALUE 0)                        ; ARG
296   (CDR)
297   (CAR&PUSH)
298   (CONST&PUSH 16)                     ; %SINH
299   (CONST&PUSH 17)                     ; %COSH
300   (CONST 4)                           ; 1
301   (JMP L378)
304   L304
304   (GETVALUE 22)                       ; $TRIGEXPANDTIMES
306   (JMPIFNOT L469)
309   (GETVALUE 0)                        ; ARG
311   (CAR)
312   (CAR&PUSH)
313   (JMPIFNOTEQTO 23 L469)              ; MTIMES
317   (GETVALUE 0)                        ; ARG
319   (CDR)
320   (CAR&PUSH)
321   (CALL1&PUSH 24)                     ; ML-TYPEP
323   (JMPIFNOTEQTO 25 L469)              ; FIXNUM
327   (LOAD&PUSH 5)
328   (JMPIFEQTO 3 L203)                  ; %SIN
332   (LOAD&PUSH 5)
333   (JMPIFEQTO 5 L218)                  ; %COS
337   (LOAD&PUSH 5)
338   (JMPIFEQTO 9 L233)                  ; %TAN
342   (LOAD&PUSH 5)
343   (JMPIFEQTO 11 L246)                 ; %COT
347   (LOAD&PUSH 5)
348   (JMPIFEQTO 13 L259)                 ; %CSC
352   (LOAD&PUSH 5)
353   (JMPIFEQTO 14 L274)                 ; %SEC
357   (LOAD&PUSH 5)
358   (JMPIFEQTO 16 L289)                 ; %SINH
362   (LOAD&PUSH 5)
363   (JMPIFNOTEQTO 17 L385)              ; %COSH
366   (GETVALUE 0)                        ; ARG
368   (CDR)
369   (CDR&PUSH)
370   (CONST&PUSH 8)                      ; 0
371   (GETVALUE 0)                        ; ARG
373   (CDR)
374   (CAR&PUSH)
375   (CONST&PUSH 16)                     ; %SINH
376   (CONST&PUSH 17)                     ; %COSH
377   (CONST 4)                           ; 1
378   L378
378   (PUSH)
379   (CALL 6 26)                         ; SINCOS-TIMES
382   (JMP L470)
385   L385
385   (LOAD&PUSH 5)
386   (JMPIFNOTEQTO 18 L406)              ; %TANH
389   (GETVALUE 0)                        ; ARG
391   (CDR)
392   (CDR&PUSH)
393   (GETVALUE 0)                        ; ARG
395   (CDR)
396   (CAR&PUSH)
397   (CONST&PUSH 18)                     ; %TANH
398   (CONST 4)                           ; 1
399   L399
399   (PUSH)
400   (CALL 4 27)                         ; TAN-TIMES
403   (JMP L470)
406   L406
406   (LOAD&PUSH 5)
407   (JMPIFNOTEQTO 19 L440)              ; %COTH
410   (GETVALUE 0)                        ; ARG
412   (CDR)
413   (CDR&PUSH)
414   (GETVALUE 0)                        ; ARG
416   (CDR)
417   (CAR&PUSH)
418   (CONST&PUSH 19)                     ; %COTH
419   (CONST 4)                           ; 1
420   L420
420   (PUSH)
421   (CALL 4 28)                         ; COT-TIMES
424   (JMP L470)
426   L426
426   (GETVALUE 0)                        ; ARG
428   (CDR)
429   (CDR&PUSH)
430   (CONST&PUSH 4)                      ; 1
431   (GETVALUE 0)                        ; ARG
433   (CDR)
434   (CAR&PUSH)
435   (CONST&PUSH 20)                     ; %CSCH
436   (CONST&PUSH 21)                     ; %SECH
437   (CONST 4)                           ; 1
438   (JMP L460)
440   L440
440   (LOAD&PUSH 5)
441   (JMPIFEQTO 20 L426)                 ; %CSCH
444   (LOAD&PUSH 5)
445   (JMPIFNOTEQTO 21 L466)              ; %SECH
448   (GETVALUE 0)                        ; ARG
450   (CDR)
451   (CDR&PUSH)
452   (CONST&PUSH 8)                      ; 0
453   (GETVALUE 0)                        ; ARG
455   (CDR)
456   (CAR&PUSH)
457   (CONST&PUSH 20)                     ; %CSCH
458   (CONST&PUSH 21)                     ; %SECH
459   (CONST 4)                           ; 1
460   L460
460   (PUSH)
461   (CALL 6 29)                         ; CSCSEC-TIMES
464   (JMP L470)
466   L466
466   (NIL)
467   (JMP L470)
469   L469
469   (NIL)
470   L470
470   (UNBIND1)
471   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SINCOS-PLUS (L N F1 ...) ...)-28|
(CONST 0) = SINCOS-PLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SINCOS-PLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SINCOS-PLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SINCOS-PLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SINCOS-PLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SINCOS-PLUS
8     (SKIP&RET 1)


Disassembly of function SINCOS-PLUS
(CONST 0) = L
(CONST 1) = N
(CONST 2) = FLAG
(CONST 3) = 1
(CONST 4) = SIGN
(CONST 5) = (-1 (MTIMES))
(CONST 6) = ((MTIMES))
(CONST 7) = MPC
(CONST 8) = 2
(CONST 9) = (MPLUS)
(CONST 10) = SIMPLIFY
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG SIGN L N)
writes special variable : (SIGN)
50 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; L
3     (LOAD 7)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; FLAG
9     (GETVALUE&PUSH 1)                   ; N
11    (GETVALUE&PUSH 0)                   ; L
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CONST 3)                           ; 1
16    (BIND 4)                            ; SIGN
18    (NIL&PUSH)
19    (JMP L57)
21    L21
21    (CONST 5)                           ; (-1 (MTIMES))
22    (JMP L30)
24    L24
24    (GETVALUE&PUSH 4)                   ; SIGN
26    (CALLS2&JMPIF 147 L21)              ; MINUSP
29    (CONST 6)                           ; ((MTIMES))
30    L30
30    (PUSH)
31    (GETVALUE&PUSH 0)                   ; L
33    (LOAD&PUSH 2)
34    (LOAD&PUSH 21)
35    (LOAD&PUSH 21)
36    (LOAD&PUSH 9)
37    (LOAD&PUSH 11)
38    (CALL 7 7)                          ; MPC
41    (STORE 0)
42    (CONST&PUSH 8)                      ; 2
43    (LOAD&PUSH 6)
44    (CALLSR&STORE 2 53 5)               ; +
48    (GETVALUE&PUSH 2)                   ; FLAG
50    (GETVALUE&PUSH 4)                   ; SIGN
52    (CALLSR 2 55)                       ; *
55    (SETVALUE 4)                        ; SIGN
57    L57
57    (LOAD&PUSH 5)
58    (LOAD&PUSH 5)
59    (CALLSR&JMPIFNOT 1 48 L24)          ; >
63    (CONST&PUSH 9)                      ; (MPLUS)
64    (LOAD 1)
65    (CONS&PUSH)
66    (CALL1 10)                          ; SIMPLIFY
68    (SKIP 1)
70    (UNBIND1)
71    (SKIP 2)
73    (UNBIND 3)
75    (SKIP&RET 6)


Disassembly of function #:|(DEFUN TAN-PLUS (L F FLAG) ...)-29|
(CONST 0) = TAN-PLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAN-PLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAN-PLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAN-PLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAN-PLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAN-PLUS
8     (SKIP&RET 1)


Disassembly of function TAN-PLUS
(CONST 0) = L
(CONST 1) = F
(CONST 2) = FLAG
(CONST 3) = 1
(CONST 4) = NUM
(CONST 5) = SIGN
(CONST 6) = (MTIMES)
(CONST 7) = MPC1
(CONST 8) = (MTIMES)
(CONST 9) = 2
(CONST 10) = (MPLUS)
(CONST 11) = (MPLUS)
(CONST 12) = DIV*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG F NUM SIGN L)
writes special variables : (SIGN NUM)
71 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; F
6     (LOAD 7)
7     (BIND 2)                            ; FLAG
9     (CONST&PUSH 3)                      ; 1
10    (CONST&PUSH 3)                      ; 1
11    (GETVALUE&PUSH 0)                   ; L
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (NIL)
16    (BIND 4)                            ; NUM
18    (CONST&PUSH 3)                      ; 1
19    (LIST&PUSH 1)
21    (LOAD 5)
22    (BIND 5)                            ; SIGN
24    (JMP L91)
27    L27
27    (LOAD 3)
28    (JMP L75)
30    L30
30    (GETVALUE&PUSH 5)                   ; SIGN
32    (CONST&PUSH 6)                      ; (MTIMES)
33    (LIST&PUSH 2)
35    (GETVALUE&PUSH 0)                   ; L
37    (GETVALUE&PUSH 4)                   ; NUM
39    (GETVALUE&PUSH 1)                   ; F
41    (LOAD&PUSH 11)
42    (LOAD&PUSH 14)
43    (CALL 6 7)                          ; MPC1
46    (SETVALUE 4)                        ; NUM
48    (LOAD&PUSH 7)
49    (LOAD&PUSH 10)
50    (CALLSR&JMPIF 1 45 L27)             ; =
54    (GETVALUE&PUSH 2)                   ; FLAG
56    (GETVALUE&PUSH 5)                   ; SIGN
58    (CALLSR&PUSH 2 55)                  ; *
61    (CONST&PUSH 8)                      ; (MTIMES)
62    (LIST&PUSH 2)
64    (GETVALUE&PUSH 0)                   ; L
66    (LOAD&PUSH 5)
67    (GETVALUE&PUSH 1)                   ; F
69    (LOAD&PUSH 11)
70    (LOAD&INC&PUSH 14)
72    (CALL 6 7)                          ; MPC1
75    L75
75    (STORE 3)
76    (CONST&PUSH 9)                      ; 2
77    (LOAD&PUSH 10)
78    (CALLSR&STORE 2 53 9)               ; +
82    (GETVALUE&PUSH 2)                   ; FLAG
84    (GETVALUE&PUSH 5)                   ; SIGN
86    (CALLSR 2 55)                       ; *
89    (SETVALUE 5)                        ; SIGN
91    L91
91    (LOAD&PUSH 9)
92    (LOAD&PUSH 8)
93    (CALLSR&JMPIFNOT 1 48 L30)          ; >
98    (CONST&PUSH 10)                     ; (MPLUS)
99    (GETVALUE 4)                        ; NUM
101   (CONS&PUSH)
102   (CONST&PUSH 11)                     ; (MPLUS)
103   (LOAD 5)
104   (CONS&PUSH)
105   (CALL2 12)                          ; DIV*
107   (UNBIND1)
108   (SKIP 1)
110   (UNBIND1)
111   (SKIP 3)
113   (UNBIND 3)
115   (SKIP&RET 4)


Disassembly of function #:|(DEFUN COT-PLUS (L F FLAG) ...)-30|
(CONST 0) = COT-PLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COT-PLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COT-PLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COT-PLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COT-PLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COT-PLUS
8     (SKIP&RET 1)


Disassembly of function COT-PLUS
(CONST 0) = L
(CONST 1) = F
(CONST 2) = FLAG
(CONST 3) = 1
(CONST 4) = SIGN
(CONST 5) = NUM
(CONST 6) = 0
(CONST 7) = (MTIMES)
(CONST 8) = MPC1
(CONST 9) = (MTIMES)
(CONST 10) = 2
(CONST 11) = (MPLUS)
(CONST 12) = (MPLUS)
(CONST 13) = DIV*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG F NUM SIGN L)
writes special variables : (SIGN NUM)
67 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; L
3     (LOAD 5)
4     (BIND 1)                            ; F
6     (LOAD 7)
7     (BIND 2)                            ; FLAG
9     (GETVALUE&PUSH 0)                   ; L
11    (CALLS2&PUSH 71)                    ; LENGTH
13    (GETVALUE&PUSH 0)                   ; L
15    (CALLS2&PUSH 71)                    ; LENGTH
17    (CONST 3)                           ; 1
18    (BIND 4)                            ; SIGN
20    (NIL)
21    (BIND 5)                            ; NUM
23    (NIL&PUSH)
24    (JMP L85)
26    L26
26    (LOAD 0)
27    (JMP L69)
29    L29
29    (GETVALUE&PUSH 4)                   ; SIGN
31    (CONST&PUSH 7)                      ; (MTIMES)
32    (LIST&PUSH 2)
34    (GETVALUE&PUSH 0)                   ; L
36    (GETVALUE&PUSH 5)                   ; NUM
38    (GETVALUE&PUSH 1)                   ; F
40    (LOAD&PUSH 11)
41    (LOAD&PUSH 13)
42    (CALL 6 8)                          ; MPC1
45    (SETVALUE 5)                        ; NUM
47    (CONST&PUSH 6)                      ; 0
48    (LOAD&PUSH 9)
49    (CALLSR&JMPIF 1 45 L26)             ; =
53    (GETVALUE&PUSH 4)                   ; SIGN
55    (CONST&PUSH 9)                      ; (MTIMES)
56    (LIST&PUSH 2)
58    (GETVALUE&PUSH 0)                   ; L
60    (LOAD&PUSH 2)
61    (GETVALUE&PUSH 1)                   ; F
63    (LOAD&PUSH 11)
64    (LOAD&DEC&PUSH 13)
66    (CALL 6 8)                          ; MPC1
69    L69
69    (STORE 0)
70    (LOAD&PUSH 8)
71    (CONST&PUSH 10)                     ; 2
72    (CALLSR&STORE 1 54 8)               ; -
76    (GETVALUE&PUSH 2)                   ; FLAG
78    (GETVALUE&PUSH 4)                   ; SIGN
80    (CALLSR 2 55)                       ; *
83    (SETVALUE 4)                        ; SIGN
85    L85
85    (LOAD&PUSH 8)
86    (CONST&PUSH 6)                      ; 0
87    (CALLSR&JMPIFNOT 1 47 L29)          ; <
91    (CONST&PUSH 11)                     ; (MPLUS)
92    (GETVALUE 5)                        ; NUM
94    (CONS&PUSH)
95    (CONST&PUSH 12)                     ; (MPLUS)
96    (LOAD 2)
97    (CONS&PUSH)
98    (CALL2 13)                          ; DIV*
100   (SKIP 1)
102   (UNBIND 2)
104   (SKIP 2)
106   (UNBIND 3)
108   (SKIP&RET 4)


Disassembly of function #:|(DEFUN CSCSEC-PLUS (L N F1 ...) ...)-31|
(CONST 0) = CSCSEC-PLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CSCSEC-PLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CSCSEC-PLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CSCSEC-PLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CSCSEC-PLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CSCSEC-PLUS
8     (SKIP&RET 1)


Disassembly of function CSCSEC-PLUS
(CONST 0) = L
(CONST 1) = N
(CONST 2) = FLAG
(CONST 3) = SIMPLIFY
(CONST 4) = (MTIMES)
(CONST 5) = SINCOS-PLUS
(CONST 6) = DIV*
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG N L)
writes special variable : (L)
49 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; L
3     (LOAD 7)
4     (BIND 1)                            ; N
6     (LOAD 7)
7     (BIND 2)                            ; FLAG
9     (GETVALUE 0)                        ; L
11    (BIND 0)                            ; L
13    (NIL&PUSH)
14    (GETVALUE 0)                        ; L
16    (JMPIFNOT L51)
18    L18
18    (LOAD&PUSH 16)
19    (LIST&PUSH 1)
21    (GETVALUE 0)                        ; L
23    (CAR&PUSH)
24    (LIST&PUSH 2)
26    (CALL1&PUSH 3)                      ; SIMPLIFY
28    (LOAD&PUSH 16)
29    (LIST&PUSH 1)
31    (GETVALUE 0)                        ; L
33    (CAR&PUSH)
34    (LIST&PUSH 2)
36    (CALL1&PUSH 3)                      ; SIMPLIFY
38    (LOAD 2)
39    (CONS)
40    (CONS)
41    (STORE 0)
42    (GETVALUE 0)                        ; L
44    (CDR)
45    (SETVALUE 0)                        ; L
47    (GETVALUE 0)                        ; L
49    (JMPIF L18)
51    L51
51    (CONST&PUSH 4)                      ; (MTIMES)
52    (LOAD 1)
53    (CONS)
54    (SKIP 1)
56    (UNBIND1)
57    (PUSH)
58    (GETVALUE&PUSH 0)                   ; L
60    (GETVALUE&PUSH 1)                   ; N
62    (LOAD&PUSH 15)
63    (LOAD&PUSH 15)
64    (GETVALUE&PUSH 2)                   ; FLAG
66    (CALL&PUSH 5 5)                     ; SINCOS-PLUS
69    (CALL2 6)                           ; DIV*
71    (UNBIND 3)
73    (SKIP&RET 6)


Disassembly of function #:|(DEFUN SINCOS-TIMES (L M N ...) ...)-32|
(CONST 0) = SINCOS-TIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SINCOS-TIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SINCOS-TIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SINCOS-TIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SINCOS-TIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SINCOS-TIMES
8     (SKIP&RET 1)


Disassembly of function SINCOS-TIMES
(CONST 0) = L
(CONST 1) = M
(CONST 2) = N
(CONST 3) = FLAG
(CONST 4) = (MTIMES)
(CONST 5) = SIMPLIFY
(CONST 6) = (MTIMES)
(CONST 7) = 0
(CONST 8) = 1
(CONST 9) = POWER
(CONST 10) = MUL
(CONST 11) = 2
(CONST 12) = QUOT
(CONST 13) = (MPLUS)
(CONST 14) = NEG
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG N M L)
96 byte-code instructions:
0     (LOAD 6)
1     (BIND 0)                            ; L
3     (LOAD 8)
4     (BIND 1)                            ; M
6     (LOAD 10)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; FLAG
12    (LOAD&PUSH 15)
13    (LIST&PUSH 1)
15    (CONST&PUSH 4)                      ; (MTIMES)
16    (GETVALUE 0)                        ; L
18    (CONS&PUSH)
19    (LIST&PUSH 2)
21    (CALL1 5)                           ; SIMPLIFY
23    (STORE 15)
25    (LOAD&PUSH 14)
26    (LIST&PUSH 1)
28    (CONST&PUSH 6)                      ; (MTIMES)
29    (GETVALUE 0)                        ; L
31    (CONS&PUSH)
32    (LIST&PUSH 2)
34    (CALL1 5)                           ; SIMPLIFY
36    (STORE 14)
38    (GETVALUE&PUSH 1)                   ; M
40    (GETVALUE&PUSH 2)                   ; N
42    (CALLS2&PUSH 158)                   ; ABS
44    (NIL&PUSH)
45    (CONST&PUSH 7)                      ; 0
46    (GETVALUE&PUSH 1)                   ; M
48    (CALLSR&JMPIF 1 45 L59)             ; =
52    (GETVALUE&PUSH 2)                   ; N
54    (CALLS2&PUSH 158)                   ; ABS
56    (JMP L129)
59    L59
59    (CONST&PUSH 8)                      ; 1
60    (JMP L129)
63    L63
63    (LOAD&PUSH 1)
64    (CALL1 14)                          ; NEG
66    (SKIP 4)
68    (JMP L157)
71    L71
71    (LOAD&PUSH 0)
72    (LOAD&PUSH 20)
73    (LOAD&PUSH 5)
74    (CALL2&PUSH 9)                      ; POWER
76    (LOAD&PUSH 20)
77    (LOAD&PUSH 5)
78    (LOAD&PUSH 7)
79    (CALLSR&PUSH 1 54)                  ; -
82    (CALL2&PUSH 9)                      ; POWER
84    (CALL&PUSH 3 10)                    ; MUL
87    (LOAD&CONS&STORE 1)
89    (CONST&PUSH 11)                     ; 2
90    (LOAD&PUSH 4)
91    (CALLSR&PUSH 2 53)                  ; +
94    (GETVALUE&PUSH 3)                   ; FLAG
96    (LOAD&PUSH 4)
97    (LOAD&PUSH 6)
98    (CONST&PUSH 8)                      ; 1
99    (CALLSR&PUSH 2 54)                  ; -
102   (LOAD&PUSH 5)
103   (LOAD&PUSH 7)
104   (CALLSR&PUSH 1 54)                  ; -
107   (CALLSR&PUSH 3 55)                  ; *
110   (LOAD&PUSH 2)
111   (CALLSR&PUSH 2 55)                  ; *
114   (CONST&PUSH 11)                     ; 2
115   (LOAD&PUSH 6)
116   (CALLSR&PUSH 2 53)                  ; +
119   (LOAD&INC&PUSH 6)
121   (CALLSR&PUSH 2 55)                  ; *
124   (CALL2 12)                          ; QUOT
126   (STORE 1)
127   (POP&STORE 3)
129   L129
129   (LOAD&PUSH 3)
130   (LOAD&PUSH 3)
131   (CALLSR&JMPIFNOT 1 48 L71)          ; >
135   (CONST&PUSH 13)                     ; (MPLUS)
136   (LOAD 2)
137   (CONS&PUSH)
138   (CALL1 5)                           ; SIMPLIFY
140   (STORE 1)
141   (CONST&PUSH 8)                      ; 1
142   (GETVALUE&PUSH 1)                   ; M
144   (CALLSR&JMPIFNOT 1 45 L154)         ; =
148   (GETVALUE&PUSH 2)                   ; N
150   (CALLS2&JMPIF 147 L63)              ; MINUSP
154   L154
154   (LOAD 1)
155   (SKIP 4)
157   L157
157   (UNBIND 4)
159   (SKIP&RET 7)


Disassembly of function #:|(DEFUN TAN-TIMES (L N F ...) ...)-33|
(CONST 0) = TAN-TIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAN-TIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAN-TIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAN-TIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAN-TIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAN-TIMES
8     (SKIP&RET 1)


Disassembly of function TAN-TIMES
(CONST 0) = L
(CONST 1) = N
(CONST 2) = F
(CONST 3) = FLAG
(CONST 4) = (MTIMES)
(CONST 5) = SIMPLIFY
(CONST 6) = 1
(CONST 7) = NUM
(CONST 8) = POWER
(CONST 9) = MUL
(CONST 10) = QUOT
(CONST 11) = 2
(CONST 12) = (MPLUS)
(CONST 13) = (MPLUS)
(CONST 14) = DIV*
(CONST 15) = NEG
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG NUM N L F)
writes special variables : (NUM F)
99 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; L
3     (LOAD 6)
4     (BIND 1)                            ; N
6     (LOAD 8)
7     (BIND 2)                            ; F
9     (LOAD 10)
10    (BIND 3)                            ; FLAG
12    (GETVALUE&PUSH 2)                   ; F
14    (LIST&PUSH 1)
16    (CONST&PUSH 4)                      ; (MTIMES)
17    (GETVALUE 0)                        ; L
19    (CONS&PUSH)
20    (LIST&PUSH 2)
22    (CALL1 5)                           ; SIMPLIFY
24    (SETVALUE 2)                        ; F
26    (CONST&PUSH 6)                      ; 1
27    (GETVALUE&PUSH 1)                   ; N
29    (CALLS2&PUSH 158)                   ; ABS
31    (NIL&PUSH)
32    (CONST&PUSH 6)                      ; 1
33    (LIST&PUSH 1)
35    (GETVALUE&PUSH 1)                   ; N
37    (CALLS2&PUSH 158)                   ; ABS
39    (LOAD 2)
40    (BIND 7)                            ; NUM
42    (JMP L127)
45    L45
45    (LOAD 4)
46    (JMP L101)
48    L48
48    (GETVALUE&PUSH 7)                   ; NUM
50    (CALL1 15)                          ; NEG
52    (JMP L153)
55    L55
55    (LOAD&PUSH 3)
56    (GETVALUE&PUSH 2)                   ; F
58    (LOAD&PUSH 9)
59    (CALL2&PUSH 8)                      ; POWER
61    (CALL2&PUSH 9)                      ; MUL
63    (GETVALUE 7)                        ; NUM
65    (CONS)
66    (SETVALUE 7)                        ; NUM
68    (LOAD&PUSH 6)
69    (LOAD&PUSH 8)
70    (CALLSR&JMPIF 1 45 L45)             ; =
74    (GETVALUE&PUSH 3)                   ; FLAG
76    (LOAD&PUSH 7)
77    (LOAD&PUSH 9)
78    (CALLSR&PUSH 1 54)                  ; -
81    (LOAD&PUSH 5)
82    (CALLSR&PUSH 3 55)                  ; *
85    (LOAD&INC&PUSH 8)
87    (CALL2 10)                          ; QUOT
89    (STORE 3)
90    (PUSH)
91    (GETVALUE&PUSH 2)                   ; F
93    (LOAD&INC&PUSH 9)
95    (CALL2&PUSH 8)                      ; POWER
97    (CALL2&PUSH 9)                      ; MUL
99    (LOAD 5)
100   (CONS)
101   L101
101   (STORE 4)
102   (CONST&PUSH 11)                     ; 2
103   (LOAD&PUSH 8)
104   (CALLSR&PUSH 2 53)                  ; +
107   (LOAD&PUSH 7)
108   (LOAD&PUSH 9)
109   (CONST&PUSH 6)                      ; 1
110   (CALLSR&PUSH 2 54)                  ; -
113   (LOAD&PUSH 5)
114   (CALLSR&PUSH 2 55)                  ; *
117   (CONST&PUSH 11)                     ; 2
118   (LOAD&PUSH 10)
119   (CALLSR&PUSH 2 53)                  ; +
122   (CALL2 10)                          ; QUOT
124   (STORE 4)
125   (POP&STORE 7)
127   L127
127   (LOAD&PUSH 7)
128   (LOAD&PUSH 7)
129   (CALLSR&JMPIFNOT 1 48 L55)          ; >
134   (CONST&PUSH 12)                     ; (MPLUS)
135   (GETVALUE 7)                        ; NUM
137   (CONS&PUSH)
138   (CONST&PUSH 13)                     ; (MPLUS)
139   (LOAD 6)
140   (CONS&PUSH)
141   (CALL2 14)                          ; DIV*
143   (SETVALUE 7)                        ; NUM
145   (GETVALUE&PUSH 1)                   ; N
147   (CALLS2&JMPIF 147 L48)              ; MINUSP
151   (GETVALUE 7)                        ; NUM
153   L153
153   (UNBIND1)
154   (SKIP 5)
156   (UNBIND 4)
158   (SKIP&RET 5)


Disassembly of function #:|(DEFUN COT-TIMES (L N F ...) ...)-34|
(CONST 0) = COT-TIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COT-TIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COT-TIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COT-TIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COT-TIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COT-TIMES
8     (SKIP&RET 1)


Disassembly of function COT-TIMES
(CONST 0) = L
(CONST 1) = N
(CONST 2) = F
(CONST 3) = FLAG
(CONST 4) = (MTIMES)
(CONST 5) = SIMPLIFY
(CONST 6) = NUM
(CONST 7) = 1
(CONST 8) = 0
(CONST 9) = POWER
(CONST 10) = MUL
(CONST 11) = -1
(CONST 12) = QUOT
(CONST 13) = 2
(CONST 14) = -2
(CONST 15) = (MPLUS)
(CONST 16) = (MPLUS)
(CONST 17) = DIV*
(CONST 18) = NEG
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG NUM N L F)
writes special variables : (NUM F)
97 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; L
3     (LOAD 6)
4     (BIND 1)                            ; N
6     (LOAD 8)
7     (BIND 2)                            ; F
9     (LOAD 10)
10    (BIND 3)                            ; FLAG
12    (GETVALUE&PUSH 2)                   ; F
14    (LIST&PUSH 1)
16    (CONST&PUSH 4)                      ; (MTIMES)
17    (GETVALUE 0)                        ; L
19    (CONS&PUSH)
20    (LIST&PUSH 2)
22    (CALL1 5)                           ; SIMPLIFY
24    (SETVALUE 2)                        ; F
26    (GETVALUE&PUSH 1)                   ; N
28    (CALLS2&PUSH 158)                   ; ABS
30    (GETVALUE&PUSH 1)                   ; N
32    (CALLS2&PUSH 158)                   ; ABS
34    (NIL)
35    (BIND 6)                            ; NUM
37    (NIL&PUSH)
38    (CONST&PUSH 7)                      ; 1
39    (JMP L121)
42    L42
42    (LOAD 1)
43    (JMP L96)
45    L45
45    (GETVALUE&PUSH 6)                   ; NUM
47    (CALL1 18)                          ; NEG
49    (JMP L147)
52    L52
52    (LOAD&PUSH 0)
53    (GETVALUE&PUSH 2)                   ; F
55    (LOAD&PUSH 8)
56    (CALL2&PUSH 9)                      ; POWER
58    (CALL2&PUSH 10)                     ; MUL
60    (GETVALUE 6)                        ; NUM
62    (CONS)
63    (SETVALUE 6)                        ; NUM
65    (CONST&PUSH 8)                      ; 0
66    (LOAD&PUSH 7)
67    (CALLSR&JMPIF 1 45 L42)             ; =
71    (LOAD&PUSH 6)
72    (LOAD&PUSH 1)
73    (CALLSR&PUSH 2 55)                  ; *
76    (LOAD&PUSH 6)
77    (LOAD&PUSH 8)
78    (CONST&PUSH 11)                     ; -1
79    (CALLSR&PUSH 2 54)                  ; -
82    (CALL2 12)                          ; QUOT
84    (STORE 0)
85    (PUSH)
86    (GETVALUE&PUSH 2)                   ; F
88    (LOAD&DEC&PUSH 8)
90    (CALL2&PUSH 9)                      ; POWER
92    (CALL2&PUSH 10)                     ; MUL
94    (LOAD 2)
95    (CONS)
96    L96
96    (STORE 1)
97    (LOAD&PUSH 6)
98    (CONST&PUSH 13)                     ; 2
99    (CALLSR&PUSH 1 54)                  ; -
102   (GETVALUE&PUSH 3)                   ; FLAG
104   (LOAD&DEC&PUSH 8)
106   (LOAD&PUSH 3)
107   (CALLSR&PUSH 3 55)                  ; *
110   (LOAD&PUSH 7)
111   (LOAD&PUSH 9)
112   (CONST&PUSH 14)                     ; -2
113   (CALLSR&PUSH 2 54)                  ; -
116   (CALL2 12)                          ; QUOT
118   (STORE 1)
119   (POP&STORE 6)
121   L121
121   (LOAD&PUSH 6)
122   (CONST&PUSH 8)                      ; 0
123   (CALLSR&JMPIFNOT 1 47 L52)          ; <
128   (CONST&PUSH 15)                     ; (MPLUS)
129   (GETVALUE 6)                        ; NUM
131   (CONS&PUSH)
132   (CONST&PUSH 16)                     ; (MPLUS)
133   (LOAD 3)
134   (CONS&PUSH)
135   (CALL2 17)                          ; DIV*
137   (SETVALUE 6)                        ; NUM
139   (GETVALUE&PUSH 1)                   ; N
141   (CALLS2&JMPIF 147 L45)              ; MINUSP
145   (GETVALUE 6)                        ; NUM
147   L147
147   (SKIP 2)
149   (UNBIND1)
150   (SKIP 2)
152   (UNBIND 4)
154   (SKIP&RET 5)


Disassembly of function #:|(DEFUN CSCSEC-TIMES (L M N ...) ...)-35|
(CONST 0) = CSCSEC-TIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CSCSEC-TIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CSCSEC-TIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CSCSEC-TIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CSCSEC-TIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CSCSEC-TIMES
8     (SKIP&RET 1)


Disassembly of function CSCSEC-TIMES
(CONST 0) = L
(CONST 1) = M
(CONST 2) = N
(CONST 3) = FLAG
(CONST 4) = (MTIMES)
(CONST 5) = SIMPLIFY
(CONST 6) = POWER
(CONST 7) = (MTIMES)
(CONST 8) = MUL
(CONST 9) = SINCOS-TIMES
(CONST 10) = DIV*
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG M N L)
39 byte-code instructions:
0     (LOAD 6)
1     (BIND 0)                            ; L
3     (LOAD 8)
4     (BIND 1)                            ; M
6     (LOAD 10)
7     (BIND 2)                            ; N
9     (LOAD 10)
10    (BIND 3)                            ; FLAG
12    (LOAD&PUSH 15)
13    (LIST&PUSH 1)
15    (CONST&PUSH 4)                      ; (MTIMES)
16    (GETVALUE 0)                        ; L
18    (CONS&PUSH)
19    (LIST&PUSH 2)
21    (CALL1&PUSH 5)                      ; SIMPLIFY
23    (GETVALUE&PUSH 2)                   ; N
25    (CALLS2&PUSH 158)                   ; ABS
27    (CALL2&PUSH 6)                      ; POWER
29    (LOAD&PUSH 15)
30    (LIST&PUSH 1)
32    (CONST&PUSH 7)                      ; (MTIMES)
33    (GETVALUE 0)                        ; L
35    (CONS&PUSH)
36    (LIST&PUSH 2)
38    (CALL1&PUSH 5)                      ; SIMPLIFY
40    (GETVALUE&PUSH 2)                   ; N
42    (CALLS2&PUSH 158)                   ; ABS
44    (CALL2&PUSH 6)                      ; POWER
46    (CALL2&PUSH 8)                      ; MUL
48    (GETVALUE&PUSH 0)                   ; L
50    (GETVALUE&PUSH 1)                   ; M
52    (GETVALUE&PUSH 2)                   ; N
54    (LOAD&PUSH 19)
55    (LOAD&PUSH 19)
56    (GETVALUE&PUSH 3)                   ; FLAG
58    (CALL&PUSH 6 9)                     ; SINCOS-TIMES
61    (CALL2 10)                          ; DIV*
63    (UNBIND 4)
65    (SKIP&RET 7)


Disassembly of function #:|(DEFUN MPC (DL UL RESULT ...) ...)-36|
(CONST 0) = MPC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MPC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MPC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MPC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MPC
8     (SKIP&RET 1)


Disassembly of function MPC
(CONST 0) = UL
(CONST 1) = 0
(CONST 2) = L
(CONST 3) = SIMPLIFY
(CONST 4) = RECONC
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L UL)
94 byte-code instructions:
0     L0
0     (LOAD 6)
1     (BIND 0)                            ; UL
3     (CONST&PUSH 1)                      ; 0
4     (LOAD&PUSH 5)
5     (CALLSR&JMPIF 1 45 L65)             ; =
9     (LOAD&PUSH 5)
10    (LOAD&PUSH 5)
11    (CALLSR&JMPIF 1 45 L97)             ; =
16    (LOAD&PUSH 7)
17    (LIST&PUSH 1)
19    (GETVALUE 0)                        ; UL
21    (CAR&PUSH)
22    (LIST&PUSH 2)
24    (CALL1&PUSH 3)                      ; SIMPLIFY
26    (LOAD 11)
27    (CONS&PUSH)
28    (GETVALUE 0)                        ; UL
30    (CDR&PUSH)
31    (LOAD&PUSH 8)
32    (LIST&PUSH 1)
34    (GETVALUE 0)                        ; UL
36    (CAR&PUSH)
37    (LIST&PUSH 2)
39    (CALL1&PUSH 3)                      ; SIMPLIFY
41    (LOAD 13)
42    (CONS&PUSH)
43    (GETVALUE 0)                        ; UL
45    (CDR&PUSH)
46    (LOAD&PUSH 12)
47    (LOAD&PUSH 12)
48    (LOAD&PUSH 12)
49    (LOAD&DEC&PUSH 12)
51    (LOAD&PUSH 12)
52    (JSR&PUSH L0)
54    (LOAD&PUSH 10)
55    (LOAD&PUSH 10)
56    (LOAD&DEC&PUSH 10)
58    (LOAD&DEC&PUSH 10)
60    (JSR L0)
62    L62
62    (UNBIND1)
63    (SKIP&RET 8)
65    L65
65    (LOAD&PUSH 10)
66    (NIL&PUSH)
67    (GETVALUE&PUSH 0)                   ; UL
69    L69
69    (LOAD&PUSH 0)
70    (CALLS1&JMPIF 146 L129)             ; ENDP
73    (LOAD&CAR&PUSH 0)
75    (LOAD 0)
76    (BIND 2)                            ; L
78    (LOAD&PUSH 13)
79    (LIST&PUSH 1)
81    (GETVALUE&PUSH 2)                   ; L
83    (LIST&PUSH 2)
85    (CALL1 3)                           ; SIMPLIFY
87    (UNBIND1)
88    (PUSH)
89    (LOAD&CONS&STORE 2)
91    (SKIP 1)
93    (LOAD&CDR&STORE 0)
95    (JMP L69)
97    L97
97    (LOAD&PUSH 10)
98    (NIL&PUSH)
99    (GETVALUE&PUSH 0)                   ; UL
101   (JMP L125)
103   L103
103   (LOAD&CAR&PUSH 0)
105   (LOAD 0)
106   (BIND 2)                            ; L
108   (LOAD&PUSH 14)
109   (LIST&PUSH 1)
111   (GETVALUE&PUSH 2)                   ; L
113   (LIST&PUSH 2)
115   (CALL1 3)                           ; SIMPLIFY
117   (UNBIND1)
118   (PUSH)
119   (LOAD&CONS&STORE 2)
121   (SKIP 1)
123   (LOAD&CDR&STORE 0)
125   L125
125   (LOAD&PUSH 0)
126   (CALLS1&JMPIFNOT 146 L103)          ; ENDP
129   L129
129   (SKIP 1)
131   (LOAD&PUSH 0)
132   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
135   (CALL2&PUSH 4)                      ; RECONC
137   (LOAD 9)
138   (CONS)
139   (JMP L62)


Disassembly of function #:|(DEFUN MPC1 (DL UL RESULT ...) ...)-37|
(CONST 0) = MPC1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MPC1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPC1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MPC1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MPC1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MPC1
8     (SKIP&RET 1)


Disassembly of function MPC1
(CONST 0) = UL
(CONST 1) = F
(CONST 2) = 0
(CONST 3) = L
(CONST 4) = SIMPLIFY
(CONST 5) = RECONC
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L UL F)
71 byte-code instructions:
0     L0
0     (LOAD 5)
1     (BIND 0)                            ; UL
3     (LOAD 6)
4     (BIND 1)                            ; F
6     (CONST&PUSH 2)                      ; 0
7     (LOAD&PUSH 8)
8     (CALLSR&JMPIF 1 45 L58)             ; =
12    (LOAD&PUSH 8)
13    (LOAD&PUSH 8)
14    (CALLSR&JMPIF 1 45 L63)             ; =
18    (GETVALUE&PUSH 1)                   ; F
20    (LIST&PUSH 1)
22    (GETVALUE 0)                        ; UL
24    (CAR&PUSH)
25    (LIST&PUSH 2)
27    (CALL1&PUSH 4)                      ; SIMPLIFY
29    (LOAD 13)
30    (CONS&PUSH)
31    (GETVALUE 0)                        ; UL
33    (CDR&PUSH)
34    (LOAD&PUSH 14)
35    (GETVALUE 0)                        ; UL
37    (CDR&PUSH)
38    (LOAD&PUSH 14)
39    (GETVALUE&PUSH 1)                   ; F
41    (LOAD&DEC&PUSH 14)
43    (LOAD&PUSH 14)
44    (JSR&PUSH L0)
46    (GETVALUE&PUSH 1)                   ; F
48    (LOAD&DEC&PUSH 12)
50    (LOAD&DEC&PUSH 12)
52    (JSR L0)
54    L54
54    (UNBIND 2)
56    (SKIP&RET 7)
58    L58
58    (LOAD&PUSH 12)
59    (CALLS2 72)                         ; REVERSE
61    (JMP L104)
63    L63
63    (LOAD&PUSH 12)
64    (NIL&PUSH)
65    (GETVALUE&PUSH 0)                   ; UL
67    (JMP L92)
69    L69
69    (LOAD&CAR&PUSH 0)
71    (LOAD 0)
72    (BIND 3)                            ; L
74    (GETVALUE&PUSH 1)                   ; F
76    (LIST&PUSH 1)
78    (GETVALUE&PUSH 3)                   ; L
80    (LIST&PUSH 2)
82    (CALL1 4)                           ; SIMPLIFY
84    (UNBIND1)
85    (PUSH)
86    (LOAD&CONS&STORE 2)
88    (SKIP 1)
90    (LOAD&CDR&STORE 0)
92    L92
92    (LOAD&PUSH 0)
93    (CALLS1&JMPIFNOT 146 L69)           ; ENDP
96    (SKIP 1)
98    (LOAD&PUSH 0)
99    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
102   (CALL2 5)                           ; RECONC
104   L104
104   (PUSH)
105   (LOAD 11)
106   (CONS)
107   (JMP L54)


Wrote file binary-clisp/trigo.fas
Wrote file /cygdrive/e/temp/maxima/src/trigo.lis