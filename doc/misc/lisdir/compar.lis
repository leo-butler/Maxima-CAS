Listing of compilation of file /cygdrive/e/temp/maxima/src/compar.lisp
on 2002-12-17 13:34:33 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/compar.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE COMPAR)-2|
(CONST 0) = COMPAR
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPAR
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS MRGMAC)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL $FLOAT2BF $RADEXPAND ...) (SPECIAL CONTEXT CURRENT ...) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $CONTEXT '$INITIAL ...)-5-1|
(CONST 0) = $CONTEXT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $INITIAL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONTEXT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $CONTEXT
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $INITIAL
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $CONTEXT '$INITIAL ...)-5-2|
(CONST 0) = (SPECIAL $CONTEXT)
(CONST 1) = $CONTEXT
(CONST 2) = $INITIAL
(CONST 3) = VARIABLE
(CONST 4) = 
"Whenever a user assumes a new fact, it is placed in the context
named as the current value of the variable CONTEXT.  Similarly, FORGET
references the current value of CONTEXT.  To add or zl-DELETE a fact from a
different context, one must bind CONTEXT to the intended context and then
perform the desired additions or deletions.  The context specified by the
value of CONTEXT is automatically activated.  All of MACSYMA's built-in
relational knowledge is contained in the default context GLOBAL."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $CONTEXT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $CONTEXT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $CONTEXT
8     (CONST&PUSH 2)                      ; $INITIAL
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $CONTEXT
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "Whenever a user assumes a new fact, it is placed in the context
named as the current value of the variable CONTEXT.  Similarly, FORGET
references the current value of CONTEXT.  To add or zl-DELETE a fact from a
different context, one must bind CONTEXT to the intended context and then
perform the desired additions or deletions.  The context specified by the
value of CONTEXT is automatically activated.  All of MACSYMA's built-in
relational knowledge is contained in the default context GLOBAL."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $CONTEXT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $CONTEXTS '(# $INITIAL $GLOBAL) ...)-6-1|
(CONST 0) = $CONTEXTS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MLIST) $INITIAL $GLOBAL)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONTEXTS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $CONTEXTS
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MLIST) $INITIAL $GLOBAL)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $CONTEXTS '(# $INITIAL $GLOBAL) ...)-6-2|
(CONST 0) = (SPECIAL $CONTEXTS)
(CONST 1) = $CONTEXTS
(CONST 2) = ((MLIST) $INITIAL $GLOBAL)
(CONST 3) = VARIABLE
(CONST 4) = "A list of the currently active contexts."
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $CONTEXTS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $CONTEXTS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $CONTEXTS
8     (CONST&PUSH 2)                      ; ((MLIST) $INITIAL $GLOBAL)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $CONTEXTS
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "A list of the currently active contexts."
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $CONTEXTS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ACTIVECONTEXTS '(#) ...)-7-1|
(CONST 0) = $ACTIVECONTEXTS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MLIST))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ACTIVECONTEXTS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $ACTIVECONTEXTS
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MLIST))
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ACTIVECONTEXTS '(#) ...)-7-2|
(CONST 0) = (SPECIAL $ACTIVECONTEXTS)
(CONST 1) = $ACTIVECONTEXTS
(CONST 2) = ((MLIST))
(CONST 3) = VARIABLE
(CONST 4) = "A list of the currently activated contexts"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $ACTIVECONTEXTS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $ACTIVECONTEXTS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $ACTIVECONTEXTS
8     (CONST&PUSH 2)                      ; ((MLIST))
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $ACTIVECONTEXTS
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "A list of the currently activated contexts"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $ACTIVECONTEXTS
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SIGN-IMAG-ERRP T ...)-8-1|
(CONST 0) = SIGN-IMAG-ERRP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-IMAG-ERRP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; SIGN-IMAG-ERRP
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SIGN-IMAG-ERRP T ...)-8-2|
(CONST 0) = (SPECIAL SIGN-IMAG-ERRP)
(CONST 1) = SIGN-IMAG-ERRP
(CONST 2) = VARIABLE
(CONST 3) = 
"If T errors out in case COMPAR meets up with an imaginary quantity.
	  If NIL THROWs in that case."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL SIGN-IMAG-ERRP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; SIGN-IMAG-ERRP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; SIGN-IMAG-ERRP
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; SIGN-IMAG-ERRP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If T errors out in case COMPAR meets up with an imaginary quantity.
	  If NIL THROWs in that case."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; SIGN-IMAG-ERRP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR COMPLEXSIGN NIL ...)-9-1|
(CONST 0) = COMPLEXSIGN
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLEXSIGN
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; COMPLEXSIGN
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR COMPLEXSIGN NIL ...)-9-2|
(CONST 0) = (SPECIAL COMPLEXSIGN)
(CONST 1) = COMPLEXSIGN
(CONST 2) = VARIABLE
(CONST 3) = 
"If T, COMPAR attempts to work in a complex mode.
	  This scheme is only very partially developed at this time."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL COMPLEXSIGN)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; COMPLEXSIGN
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; COMPLEXSIGN
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; COMPLEXSIGN
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If T, COMPAR attempts to work in a complex mode.
	  This scheme is only very partially developed at this time."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; COMPLEXSIGN
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $PREDERROR T)-10-1|
(CONST 0) = $PREDERROR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PREDERROR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $PREDERROR
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $PREDERROR T)-10-2|
(CONST 0) = (SPECIAL $PREDERROR)
(CONST 1) = $PREDERROR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PREDERROR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PREDERROR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PREDERROR
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $PREDERROR
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SIGNBFLOAT T)-11-1|
(CONST 0) = $SIGNBFLOAT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SIGNBFLOAT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $SIGNBFLOAT
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $SIGNBFLOAT T)-11-2|
(CONST 0) = (SPECIAL $SIGNBFLOAT)
(CONST 1) = $SIGNBFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SIGNBFLOAT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SIGNBFLOAT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SIGNBFLOAT
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $SIGNBFLOAT
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ASKEXP)-12-1|
(CONST 0) = $ASKEXP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ASKEXP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $ASKEXP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ASKEXP)-12-2|
(CONST 0) = (SPECIAL $ASKEXP)
(CONST 1) = $ASKEXP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $ASKEXP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST 1)                           ; $ASKEXP
4     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LIMITP)-13-1|
(CONST 0) = LIMITP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIMITP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; LIMITP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LIMITP)-13-2|
(CONST 0) = (SPECIAL LIMITP)
(CONST 1) = LIMITP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL LIMITP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST 1)                           ; LIMITP
4     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ASSUME_POS NIL)-14-1|
(CONST 0) = $ASSUME_POS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ASSUME_POS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $ASSUME_POS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ASSUME_POS NIL)-14-2|
(CONST 0) = (SPECIAL $ASSUME_POS)
(CONST 1) = $ASSUME_POS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $ASSUME_POS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $ASSUME_POS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $ASSUME_POS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $ASSUME_POS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ASSUME_POS_PRED NIL)-15-1|
(CONST 0) = $ASSUME_POS_PRED
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ASSUME_POS_PRED
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $ASSUME_POS_PRED
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ASSUME_POS_PRED NIL)-15-2|
(CONST 0) = (SPECIAL $ASSUME_POS_PRED)
(CONST 1) = $ASSUME_POS_PRED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $ASSUME_POS_PRED)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $ASSUME_POS_PRED
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $ASSUME_POS_PRED
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $ASSUME_POS_PRED
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR FACTORED NIL)-16-1|
(CONST 0) = FACTORED
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTORED
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; FACTORED
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR FACTORED NIL)-16-2|
(CONST 0) = (SPECIAL FACTORED)
(CONST 1) = FACTORED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL FACTORED)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; FACTORED
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; FACTORED
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; FACTORED
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LOCALS NIL)-17-1|
(CONST 0) = LOCALS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOCALS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; LOCALS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LOCALS NIL)-17-2|
(CONST 0) = (SPECIAL LOCALS)
(CONST 1) = LOCALS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL LOCALS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; LOCALS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; LOCALS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; LOCALS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR PATEVALLED NIL)-18-1|
(CONST 0) = PATEVALLED
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; PATEVALLED
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; PATEVALLED
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR PATEVALLED NIL)-18-2|
(CONST 0) = (SPECIAL PATEVALLED)
(CONST 1) = PATEVALLED
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL PATEVALLED)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; PATEVALLED
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; PATEVALLED
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; PATEVALLED
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SIGN NIL)-19-1|
(CONST 0) = SIGN
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; SIGN
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SIGN NIL)-19-2|
(CONST 0) = (SPECIAL SIGN)
(CONST 1) = SIGN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL SIGN)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; SIGN
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; SIGN
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; SIGN
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MINUS NIL)-20-1|
(CONST 0) = MINUS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; MINUS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; MINUS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR MINUS NIL)-20-2|
(CONST 0) = (SPECIAL MINUS)
(CONST 1) = MINUS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL MINUS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; MINUS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; MINUS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; MINUS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ODDS NIL)-21-1|
(CONST 0) = ODDS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ODDS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ODDS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ODDS NIL)-21-2|
(CONST 0) = (SPECIAL ODDS)
(CONST 1) = ODDS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ODDS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ODDS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ODDS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; ODDS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR EVENS NIL)-22-1|
(CONST 0) = EVENS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVENS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; EVENS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR EVENS NIL)-22-2|
(CONST 0) = (SPECIAL EVENS)
(CONST 1) = EVENS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL EVENS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; EVENS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; EVENS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; EVENS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LHS NIL)-23-1|
(CONST 0) = LHS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; LHS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; LHS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR LHS NIL)-23-2|
(CONST 0) = (SPECIAL LHS)
(CONST 1) = LHS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL LHS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; LHS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; LHS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; LHS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR RHS NIL)-24-1|
(CONST 0) = RHS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; RHS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; RHS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR RHS NIL)-24-2|
(CONST 0) = (SPECIAL RHS)
(CONST 1) = RHS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL RHS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; RHS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; RHS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; RHS
12    (SKIP&RET 1)


Disassembly of function #:|(SETQ CONTEXT '$GLOBAL)-25|
(CONST 0) = $GLOBAL
(CONST 1) = CONTEXT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (CONTEXT)
3 byte-code instructions:
0     (CONST 0)                           ; $GLOBAL
1     (SETVALUE 1)                        ; CONTEXT
3     (SKIP&RET 1)


Disassembly of function #:|(SETQ $CONTEXT '$GLOBAL ...)-26|
(CONST 0) = $GLOBAL
(CONST 1) = $CONTEXT
(CONST 2) = ((MLIST) $GLOBAL)
(CONST 3) = $CONTEXTS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : ($CONTEXTS $CONTEXT)
5 byte-code instructions:
0     (CONST 0)                           ; $GLOBAL
1     (SETVALUE 1)                        ; $CONTEXT
3     (CONST 2)                           ; ((MLIST) $GLOBAL)
4     (SETVALUE 3)                        ; $CONTEXTS
6     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO ASK (&REST X) ...)-27|
(CONST 0) = ASK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASK>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASK>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; ASK
10    (SKIP&RET 1)


Disassembly of function ASK
(CONST 0) = X
(CONST 1) = RETRIEVE
(CONST 2) = LIST
(CONST 3) = '(MTEXT)
(CONST 4) = (NIL)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (BIND 0)                            ; X
4     (CONST&PUSH 1)                      ; RETRIEVE
5     (CONST&PUSH 2)                      ; LIST
6     (CONST&PUSH 3)                      ; '(MTEXT)
7     (GETVALUE 0)                        ; X
9     (LIST*&PUSH 2)
11    (CONST 4)                           ; (NIL)
12    (LIST* 2)
14    (UNBIND1)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO POW (&REST X) ...)-28|
(CONST 0) = POW
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POW>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; POW
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POW
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POW>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; POW
10    (SKIP&RET 1)


Disassembly of function POW
(CONST 0) = X
(CONST 1) = POWER
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (BIND 0)                            ; X
4     (CONST&PUSH 1)                      ; POWER
5     (GETVALUE 0)                        ; X
7     (CONS)
8     (UNBIND1)
9     (SKIP&RET 3)


Disassembly of function #:|(DEFUN LMUL (L) ...)-29|
(CONST 0) = LMUL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LMUL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LMUL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LMUL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LMUL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LMUL
8     (SKIP&RET 1)


Disassembly of function LMUL
(CONST 0) = L
(CONST 1) = (MTIMES)
(CONST 2) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&PUSH 1)                      ; (MTIMES)
4     (GETVALUE 0)                        ; L
6     (CONS&PUSH)
7     (CALL1 2)                           ; SIMPLIFY
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CONSSIZE (X) ...)-30|
(CONST 0) = CONSSIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSSIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSSIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSSIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSSIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSSIZE
8     (SKIP&RET 1)


Disassembly of function CONSSIZE
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
31 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L41)
7     (GETVALUE 0)                        ; X
9     (CDR)
10    (SETVALUE 0)                        ; X
12    (CONST&PUSH 2)                      ; 1
13    (GETVALUE 0)                        ; X
15    (JMPIFNOT L37)
17    L17
17    (CONST&PUSH 2)                      ; 1
18    (GETVALUE 0)                        ; X
20    (CAR&PUSH)
21    (JSR&PUSH L0)
23    (LOAD&PUSH 2)
24    (CALLSR&STORE 3 53 0)               ; +
28    (GETVALUE 0)                        ; X
30    (CDR)
31    (SETVALUE 0)                        ; X
33    (GETVALUE 0)                        ; X
35    (JMPIF L17)
37    L37
37    (POP)
38    L38
38    (UNBIND1)
39    (SKIP&RET 2)
41    L41
41    (CONST 1)                           ; 0
42    (JMP L38)


Disassembly of function #:|(DEFMFUN $CONTEXT FLUSH ...)-31|
(CONST 0) = $CONTEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CONTEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONTEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CONTEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CONTEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CONTEXT
8     (SKIP&RET 1)


Disassembly of function $CONTEXT
(CONST 0) = "The CONTEXT function no longer exists."
(CONST 1) = MERROR
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; "The CONTEXT function no longer exists."
1     (CALL1 1)                           ; MERROR
3     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ACTIVATE N ...)-32|
(CONST 0) = $ACTIVATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ACTIVATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ACTIVATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ACTIVATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ACTIVATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ACTIVATE
8     (SKIP&RET 1)


Disassembly of function $ACTIVATE
(CONST 0) = N
(CONST 1) = 1
(CONST 2) = NARG1
(CONST 3) = NC-ERR
(CONST 4) = $ACTIVECONTEXTS
(CONST 5) = MEMQ
(CONST 6) = $CONTEXTS
(CONST 7) = MCONS
(CONST 8) = ACTIVATE
(CONST 9) = "There is no context with the name ~:M"
(CONST 10) = MERROR
(CONST 11) = $DONE
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (N $CONTEXTS $ACTIVECONTEXTS)
writes special variable : ($ACTIVECONTEXTS)
52 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (CONST&PUSH 1)                      ; 1
6     (JMP L66)
8     L8
8     (CALL0 3)                           ; NC-ERR
10    (JMP L64)
12    L12
12    (LOAD&PUSH 0)
13    (LOAD&PUSH 6)
14    (CALL2&PUSH 2)                      ; NARG1
16    (GETVALUE&PUSH 4)                   ; $ACTIVECONTEXTS
18    (CALL2 7)                           ; MCONS
20    (SETVALUE 4)                        ; $ACTIVECONTEXTS
22    (LOAD&PUSH 0)
23    (LOAD&PUSH 6)
24    (CALL2&PUSH 2)                      ; NARG1
26    (CALL1 8)                           ; ACTIVATE
28    (JMP L64)
30    L30
30    (LOAD&PUSH 0)
31    (LOAD&PUSH 6)
32    (CALL2&PUSH 2)                      ; NARG1
34    (CALLS2&JMPIFNOT 6 L8)              ; SYMBOLP
37    (LOAD&PUSH 0)
38    (LOAD&PUSH 6)
39    (CALL2&PUSH 2)                      ; NARG1
41    (GETVALUE 4)                        ; $ACTIVECONTEXTS
43    (CDR&PUSH)
44    (CALL2&JMPIF 5 L64)                 ; MEMQ
47    (LOAD&PUSH 0)
48    (LOAD&PUSH 6)
49    (CALL2&PUSH 2)                      ; NARG1
51    (GETVALUE 6)                        ; $CONTEXTS
53    (CDR&PUSH)
54    (CALL2&JMPIF 5 L12)                 ; MEMQ
57    (CONST&PUSH 9)                      ; "There is no context with the name ~:M"
58    (LOAD&PUSH 1)
59    (LOAD&PUSH 7)
60    (CALL2&PUSH 2)                      ; NARG1
62    (CALL2 10)                          ; MERROR
64    L64
64    (LOAD&INC&STORE 0)
66    L66
66    (LOAD&PUSH 0)
67    (GETVALUE&PUSH 0)                   ; N
69    (CALLSR&JMPIFNOT 1 48 L30)          ; >
73    (SKIP 1)
75    (CONST 11)                          ; $DONE
76    (UNBIND1)
77    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $DEACTIVATE N ...)-33|
(CONST 0) = $DEACTIVATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DEACTIVATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DEACTIVATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DEACTIVATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DEACTIVATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DEACTIVATE
8     (SKIP&RET 1)


Disassembly of function $DEACTIVATE
(CONST 0) = N
(CONST 1) = 1
(CONST 2) = NARG1
(CONST 3) = NC-ERR
(CONST 4) = $CONTEXTS
(CONST 5) = MEMQ
(CONST 6) = $ACTIVECONTEXTS
(CONST 7) = $DELETE
(CONST 8) = DEACTIVATE
(CONST 9) = "There is no context with the name ~:M"
(CONST 10) = MERROR
(CONST 11) = $DONE
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (N $CONTEXTS $ACTIVECONTEXTS)
writes special variable : ($ACTIVECONTEXTS)
46 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (CONST&PUSH 1)                      ; 1
6     (JMP L56)
8     L8
8     (CALL0 3)                           ; NC-ERR
10    (JMP L54)
12    L12
12    (LOAD&PUSH 0)
13    (LOAD&PUSH 6)
14    (CALL2&PUSH 2)                      ; NARG1
16    (GETVALUE&PUSH 6)                   ; $ACTIVECONTEXTS
18    (CALL2 7)                           ; $DELETE
20    (SETVALUE 6)                        ; $ACTIVECONTEXTS
22    (LOAD&PUSH 0)
23    (LOAD&PUSH 6)
24    (CALL2&PUSH 2)                      ; NARG1
26    (CALL1 8)                           ; DEACTIVATE
28    (JMP L54)
30    L30
30    (LOAD&PUSH 0)
31    (LOAD&PUSH 6)
32    (CALL2&PUSH 2)                      ; NARG1
34    (CALLS2&JMPIFNOT 6 L8)              ; SYMBOLP
37    (LOAD&PUSH 0)
38    (LOAD&PUSH 6)
39    (CALL2&PUSH 2)                      ; NARG1
41    (GETVALUE 4)                        ; $CONTEXTS
43    (CDR&PUSH)
44    (CALL2&JMPIF 5 L12)                 ; MEMQ
47    (CONST&PUSH 9)                      ; "There is no context with the name ~:M"
48    (LOAD&PUSH 1)
49    (LOAD&PUSH 7)
50    (CALL2&PUSH 2)                      ; NARG1
52    (CALL2 10)                          ; MERROR
54    L54
54    (LOAD&INC&STORE 0)
56    L56
56    (LOAD&PUSH 0)
57    (GETVALUE&PUSH 0)                   ; N
59    (CALLSR&JMPIFNOT 1 48 L30)          ; >
63    (SKIP 1)
65    (CONST 11)                          ; $DONE
66    (UNBIND1)
67    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $FACTS N ...)-34|
(CONST 0) = $FACTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FACTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FACTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FACTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FACTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FACTS
8     (SKIP&RET 1)


Disassembly of function $FACTS
(CONST 0) = N
(CONST 1) = 0
(CONST 2) = $CONTEXT
(CONST 3) = FACTS1
(CONST 4) = 1
(CONST 5) = NARG1
(CONST 6) = "FACTS takes zero or one argument only."
(CONST 7) = MERROR
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: ($CONTEXT N)
23 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (GETVALUE&PUSH 0)                   ; N
7     (JMPIFEQTO 1 L25)                   ; 0
10    (GETVALUE&PUSH 0)                   ; N
12    (JMPIFNOTEQTO 4 L29)                ; 1
15    (GETVALUE&PUSH 0)                   ; N
17    (LOAD&PUSH 5)
18    (CALL2 5)                           ; NARG1
20    L20
20    (PUSH)
21    (CALL1 3)                           ; FACTS1
23    (JMP L32)
25    L25
25    (GETVALUE 2)                        ; $CONTEXT
27    (JMP L20)
29    L29
29    (CONST&PUSH 6)                      ; "FACTS takes zero or one argument only."
30    (CALL1 7)                           ; MERROR
32    L32
32    (UNBIND1)
33    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FACTS1 (CON) ...)-35|
(CONST 0) = FACTS1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTS1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTS1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTS1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTS1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTS1
8     (SKIP&RET 1)


Disassembly of function FACTS1
(CONST 0) = CONTEXTMARK
(CONST 1) = DATA
(CONST 2) = ZL-GET
(CONST 3) = L
(CONST 4) = VISIBLEP
(CONST 5) = INTEXT
(CONST 6) = MEMALIKE
(CONST 7) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
40 byte-code instructions:
0     (CALL0 0)                           ; CONTEXTMARK
2     (LOAD&PUSH 1)
3     (CONST&PUSH 1)                      ; DATA
4     (CALL2 2)                           ; ZL-GET
6     (BIND 3)                            ; L
8     (PUSH-NIL 2)
10    (GETVALUE 3)                        ; L
12    (JMPIFNOT L50)
14    L14
14    (GETVALUE 3)                        ; L
16    (CAR&PUSH)
17    (CALL1&JMPIFNOT 4 L41)              ; VISIBLEP
20    (GETVALUE 3)                        ; L
22    (CAR)
23    (CAR)
24    (CAR&PUSH)
25    (GETVALUE 3)                        ; L
27    (CAR)
28    (CAR)
29    (CDR&PUSH)
30    (CALL2 5)                           ; INTEXT
32    (STORE 0)
33    (PUSH)
34    (LOAD&PUSH 2)
35    (CALL2&JMPIF 6 L41)                 ; MEMALIKE
38    (LOAD&PUSH 0)
39    (LOAD&CONS&STORE 1)
41    L41
41    (GETVALUE 3)                        ; L
43    (CDR)
44    (SETVALUE 3)                        ; L
46    (GETVALUE 3)                        ; L
48    (JMPIF L14)
50    L50
50    (CONST&PUSH 7)                      ; (MLIST)
51    (LOAD 2)
52    (CONS)
53    (SKIP 2)
55    (UNBIND1)
56    (SKIP&RET 2)


Disassembly of function #:|(DEFUN INTEXT (REL BODY) ...)-36|
(CONST 0) = INTEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTEXT
8     (SKIP&RET 1)


Disassembly of function INTEXT
(CONST 0) = DOUTERN
(CONST 1) = KIND
(CONST 2) = ($KIND)
(CONST 3) = PAR
(CONST 4) = ($PAR)
(CONST 5) = MGRP
(CONST 6) = (MGREATERP)
(CONST 7) = MGQP
(CONST 8) = (MGEQP)
(CONST 9) = MEQP
(CONST 10) = ($EQUAL)
(CONST 11) = MNQP
(CONST 12) = (MNOT)
(CONST 13) = ($EQUAL)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
43 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; DOUTERN
2     (LOAD&PUSH 2)
3     (CALLSR&STORE 0 22 1)               ; MAPCAR
7     (LOAD&PUSH 2)
8     (JMPIFEQTO 1 L33)                   ; KIND
11    (LOAD&PUSH 2)
12    (JMPIFEQTO 3 L36)                   ; PAR
15    (LOAD&PUSH 2)
16    (JMPIFEQTO 5 L39)                   ; MGRP
19    (LOAD&PUSH 2)
20    (JMPIFEQTO 7 L42)                   ; MGQP
23    (LOAD&PUSH 2)
24    (JMPIFNOTEQTO 9 L53)                ; MEQP
27    (CONST 10)                          ; ($EQUAL)
28    L28
28    (PUSH)
29    (LOAD 2)
30    (CONS)
31    (SKIP&RET 3)
33    L33
33    (CONST 2)                           ; ($KIND)
34    (JMP L28)
36    L36
36    (CONST 4)                           ; ($PAR)
37    (JMP L28)
39    L39
39    (CONST 6)                           ; (MGREATERP)
40    (JMP L28)
42    L42
42    (CONST 8)                           ; (MGEQP)
43    (JMP L28)
45    L45
45    (CONST&PUSH 12)                     ; (MNOT)
46    (CONST&PUSH 13)                     ; ($EQUAL)
47    (LOAD 3)
48    (CONS&PUSH)
49    (LIST 2)
51    (SKIP&RET 3)
53    L53
53    (LOAD&PUSH 2)
54    (JMPIFEQTO 11 L45)                  ; MNQP
57    (NIL)
58    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP $CONTEXT ASSCONTEXT ...)-37|
(CONST 0) = $CONTEXT
(CONST 1) = ASSIGN
(CONST 2) = ASSCONTEXT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONTEXT
1     (CONST&PUSH 1)                      ; ASSIGN
2     (CONST&PUSH 2)                      ; ASSCONTEXT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN ASSCONTEXT (X Y) ...)-38|
(CONST 0) = ASSCONTEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASSCONTEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASSCONTEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASSCONTEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASSCONTEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASSCONTEXT
8     (SKIP&RET 1)


Disassembly of function ASSCONTEXT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = NC-ERR
(CONST 3) = $CONTEXTS
(CONST 4) = MEMQ
(CONST 5) = CONTEXT
(CONST 6) = $CONTEXT
(CONST 7) = $NEWCONTEXT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($CONTEXTS Y)
writes special variables : ($CONTEXT CONTEXT)
22 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 1)                   ; Y
8     (CALLS2&JMPIFNOT 6 L26)             ; SYMBOLP
11    (GETVALUE&PUSH 1)                   ; Y
13    (GETVALUE&PUSH 3)                   ; $CONTEXTS
15    (CALL2&JMPIF 4 L30)                 ; MEMQ
18    (GETVALUE&PUSH 1)                   ; Y
20    (CALL1 7)                           ; $NEWCONTEXT
22    L22
22    (UNBIND 2)
24    (SKIP&RET 3)
26    L26
26    (CALL0 2)                           ; NC-ERR
28    (JMP L22)
30    L30
30    (GETVALUE 1)                        ; Y
32    (SETVALUE 5)                        ; CONTEXT
34    (SETVALUE 6)                        ; $CONTEXT
36    (JMP L22)


Disassembly of function #:|(DEFMFUN $NEWCONTEXT (X) ...)-39|
(CONST 0) = $NEWCONTEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NEWCONTEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEWCONTEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NEWCONTEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NEWCONTEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NEWCONTEXT
8     (SKIP&RET 1)


Disassembly of function $NEWCONTEXT
(CONST 0) = X
(CONST 1) = NC-ERR
(CONST 2) = $CONTEXTS
(CONST 3) = MEMQ
(CONST 4) = "Context ~M already exists."
(CONST 5) = MTELL
(CONST 6) = MCONS
(CONST 7) = ($GLOBAL)
(CONST 8) = SUBC
(CONST 9) = PUTPROP
(CONST 10) = CONTEXT
(CONST 11) = $CONTEXT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($CONTEXTS X)
writes special variables : ($CONTEXT CONTEXT $CONTEXTS)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIFNOT 6 L39)             ; SYMBOLP
8     (GETVALUE&PUSH 0)                   ; X
10    (GETVALUE&PUSH 2)                   ; $CONTEXTS
12    (CALL2&JMPIF 3 L43)                 ; MEMQ
15    (GETVALUE&PUSH 0)                   ; X
17    (GETVALUE&PUSH 2)                   ; $CONTEXTS
19    (CALL2 6)                           ; MCONS
21    (SETVALUE 2)                        ; $CONTEXTS
23    (GETVALUE&PUSH 0)                   ; X
25    (CONST&PUSH 7)                      ; ($GLOBAL)
26    (CONST&PUSH 8)                      ; SUBC
27    (CALL 3 9)                          ; PUTPROP
30    (GETVALUE 0)                        ; X
32    (SETVALUE 10)                       ; CONTEXT
34    (SETVALUE 11)                       ; $CONTEXT
36    L36
36    (UNBIND1)
37    (SKIP&RET 2)
39    L39
39    (CALL0 1)                           ; NC-ERR
41    (JMP L36)
43    L43
43    (CONST&PUSH 4)                      ; "Context ~M already exists."
44    (GETVALUE&PUSH 0)                   ; X
46    (CALL2 5)                           ; MTELL
48    (NIL)
49    (JMP L36)


Disassembly of function #:|(DEFMSPEC $SUPCONTEXT (X) ...)-40-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $SUPCONTEXT (X) ...)-40-2-1|>
(CONST 1) = $SUPCONTEXT
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $SUPCONTEXT (X) ...)-40-2-1|>
1     (CONST&PUSH 1)                      ; $SUPCONTEXT
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $SUPCONTEXT (X) ...)-40-2-1|
(CONST 0) = X
(CONST 1) = "You must supply a name for the context."
(CONST 2) = MERROR
(CONST 3) = "SUPCONTEXT takes either one or two arguments."
(CONST 4) = NC-ERR
(CONST 5) = $CONTEXTS
(CONST 6) = MEMQ
(CONST 7) = "Context ~M already exists."
(CONST 8) = "Nonexistent context ~M."
(CONST 9) = MCONS
(CONST 10) = $CONTEXT
(CONST 11) = SUBC
(CONST 12) = PUTPROP
(CONST 13) = CONTEXT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($CONTEXT $CONTEXTS X)
writes special variables : ($CONTEXT CONTEXT $CONTEXTS X)
78 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (SETVALUE 0)                        ; X
8     (JMPIFNOT L24)
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CDR)
14    (CAR)
15    (JMPIFNOT L37)
17    (CONST 3)                           ; "SUPCONTEXT takes either one or two arguments."
18    L18
18    (PUSH)
19    (CALL1 2)                           ; MERROR
21    (JMP L112)
24    L24
24    (CONST 1)                           ; "You must supply a name for the context."
25    (JMP L18)
27    L27
27    (CALL0 4)                           ; NC-ERR
29    (JMP L112)
32    L32
32    (CONST&PUSH 7)                      ; "Context ~M already exists."
33    (GETVALUE 0)                        ; X
35    (JMP L70)
37    L37
37    (GETVALUE 0)                        ; X
39    (CAR&PUSH)
40    (CALLS2&JMPIFNOT 6 L27)             ; SYMBOLP
43    (GETVALUE 0)                        ; X
45    (CAR&PUSH)
46    (GETVALUE&PUSH 5)                   ; $CONTEXTS
48    (CALL2&JMPIF 6 L32)                 ; MEMQ
51    (GETVALUE 0)                        ; X
53    (CDR)
54    (CAR)
55    (JMPIFNOT L75)
57    (GETVALUE 0)                        ; X
59    (CDR)
60    (CAR&PUSH)
61    (GETVALUE&PUSH 5)                   ; $CONTEXTS
63    (CALL2&JMPIF 6 L75)                 ; MEMQ
66    (CONST&PUSH 8)                      ; "Nonexistent context ~M."
67    (GETVALUE 0)                        ; X
69    (CDR)
70    L70
70    (CAR&PUSH)
71    (CALL2 2)                           ; MERROR
73    (JMP L112)
75    L75
75    (GETVALUE 0)                        ; X
77    (CAR&PUSH)
78    (GETVALUE&PUSH 5)                   ; $CONTEXTS
80    (CALL2 9)                           ; MCONS
82    (SETVALUE 5)                        ; $CONTEXTS
84    (GETVALUE 0)                        ; X
86    (CAR&PUSH)
87    (GETVALUE 0)                        ; X
89    (CDR)
90    (CAR)
91    (JMPIF L95)
93    (GETVALUE 10)                       ; $CONTEXT
95    L95
95    (PUSH)
96    (NIL)
97    (CONS&PUSH)
98    (CONST&PUSH 11)                     ; SUBC
99    (CALL 3 12)                         ; PUTPROP
102   (GETVALUE 0)                        ; X
104   (CAR)
105   (SETVALUE 13)                       ; CONTEXT
107   (GETVALUE 0)                        ; X
109   (CAR)
110   (SETVALUE 10)                       ; $CONTEXT
112   L112
112   (UNBIND1)
113   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $KILLCONTEXT N ...)-41|
(CONST 0) = $KILLCONTEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $KILLCONTEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $KILLCONTEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $KILLCONTEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $KILLCONTEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $KILLCONTEXT
8     (SKIP&RET 1)


Disassembly of function $KILLCONTEXT
(CONST 0) = N
(CONST 1) = 1
(CONST 2) = NARG1
(CONST 3) = KILLCONTEXT
(CONST 4) = NC-ERR
(CONST 5) = $GLOBAL
(CONST 6) = $NOT_DONE
(CONST 7) = $DONE
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (N)
39 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (CONST&PUSH 1)                      ; 1
6     (JMP L30)
8     L8
8     (LOAD&PUSH 0)
9     (LOAD&PUSH 6)
10    (CALL2&PUSH 2)                      ; NARG1
12    (CALL1 3)                           ; KILLCONTEXT
14    (JMP L28)
16    L16
16    (CONST 6)                           ; $NOT_DONE
17    (JMP L54)
19    L19
19    (LOAD&PUSH 0)
20    (LOAD&PUSH 6)
21    (CALL2&PUSH 2)                      ; NARG1
23    (CALLS2&JMPIF 6 L8)                 ; SYMBOLP
26    (CALL0 4)                           ; NC-ERR
28    L28
28    (LOAD&INC&STORE 0)
30    L30
30    (LOAD&PUSH 0)
31    (GETVALUE&PUSH 0)                   ; N
33    (CALLSR&JMPIFNOT 1 48 L19)          ; >
37    (SKIP 1)
39    (GETVALUE&PUSH 0)                   ; N
41    (CONST&PUSH 1)                      ; 1
42    (CALLSR&JMPIFNOT 1 45 L53)          ; =
46    (CONST&PUSH 1)                      ; 1
47    (LOAD&PUSH 5)
48    (CALL2&PUSH 2)                      ; NARG1
50    (JMPIFEQTO 5 L16)                   ; $GLOBAL
53    L53
53    (CONST 7)                           ; $DONE
54    L54
54    (UNBIND1)
55    (SKIP&RET 2)


Disassembly of function #:|(DEFUN KILLALLCONTEXTS NIL ...)-42|
(CONST 0) = KILLALLCONTEXTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KILLALLCONTEXTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KILLALLCONTEXTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KILLALLCONTEXTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KILLALLCONTEXTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KILLALLCONTEXTS
8     (SKIP&RET 1)


Disassembly of function KILLALLCONTEXTS
(CONST 0) = KILLCONTEXT
(CONST 1) = $CONTEXTS
(CONST 2) = $INITIAL
(CONST 3) = $CONTEXT
(CONST 4) = CONTEXT
(CONST 5) = CURRENT
(CONST 6) = ((MLIST) $INITIAL $GLOBAL)
(CONST 7) = DOBJECTS
(CONST 8) = $GLOBAL
(CONST 9) = CMARK
(CONST 10) = 1
(CONST 11) = SUBC
(CONST 12) = ($GLOBAL)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($CONTEXTS)
writes special variables : (DOBJECTS $CONTEXTS CURRENT CONTEXT $CONTEXT)
25 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; KILLCONTEXT
2     (GETVALUE 1)                        ; $CONTEXTS
4     (CDR&PUSH)
5     (CALLSR 0 24)                       ; MAPC
8     (CONST 2)                           ; $INITIAL
9     (SETVALUE 3)                        ; $CONTEXT
11    (SETVALUE 4)                        ; CONTEXT
13    (SETVALUE 5)                        ; CURRENT
15    (CONST 6)                           ; ((MLIST) $INITIAL $GLOBAL)
16    (SETVALUE 1)                        ; $CONTEXTS
18    (NIL)
19    (SETVALUE 7)                        ; DOBJECTS
21    (CONST&PUSH 8)                      ; $GLOBAL
22    (CONST&PUSH 9)                      ; CMARK
23    (CONST&PUSH 10)                     ; 1
24    (CALLS2 136)                        ; SYSTEM::%PUT
26    (CONST&PUSH 2)                      ; $INITIAL
27    (CONST&PUSH 9)                      ; CMARK
28    (CONST&PUSH 10)                     ; 1
29    (CALLS2 136)                        ; SYSTEM::%PUT
31    (CONST&PUSH 2)                      ; $INITIAL
32    (CONST&PUSH 11)                     ; SUBC
33    (CONST&PUSH 12)                     ; ($GLOBAL)
34    (CALLS2 136)                        ; SYSTEM::%PUT
36    (SKIP&RET 1)


Disassembly of function #:|(DEFUN KILLCONTEXT (X) ...)-43|
(CONST 0) = KILLCONTEXT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KILLCONTEXT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KILLCONTEXT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KILLCONTEXT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KILLCONTEXT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KILLCONTEXT
8     (SKIP&RET 1)


Disassembly of function KILLCONTEXT
(CONST 0) = X
(CONST 1) = $CONTEXTS
(CONST 2) = MEMQ
(CONST 3) = "The context ~M doesn't exist."
(CONST 4) = MTELL
(CONST 5) = $GLOBAL
(CONST 6) = $INITIAL
(CONST 7) = REMOV
(CONST 8) = DATA
(CONST 9) = ZL-GET
(CONST 10) = $CONTEXT
(CONST 11) = CONTEXTMARK
(CONST 12) = 0
(CONST 13) = CMARK
(CONST 14) = "The context ~M is currently active."
(CONST 15) = $DELETE
(CONST 16) = SUBC
(CONST 17) = ($GLOBAL)
(CONST 18) = CONTEXT
(CONST 19) = KILLC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($CONTEXT $CONTEXTS X)
writes special variables : ($CONTEXTS CONTEXT $CONTEXT)
81 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (GETVALUE&PUSH 1)                   ; $CONTEXTS
7     (CALL2&JMPIFNOT 2 L49)              ; MEMQ
10    (GETVALUE&PUSH 0)                   ; X
12    (JMPIFEQTO 5 L52)                   ; $GLOBAL
15    (GETVALUE&PUSH 0)                   ; X
17    (JMPIFEQTO 6 L56)                   ; $INITIAL
20    (GETVALUE&PUSH 10)                  ; $CONTEXT
22    (GETVALUE 0)                        ; X
24    (JMPIFEQ L79)
26    (CALL0 11)                          ; CONTEXTMARK
28    (JMPIFNOT L79)
30    (CONST&PUSH 12)                     ; 0
31    (GETVALUE&PUSH 0)                   ; X
33    (CONST&PUSH 13)                     ; CMARK
34    (CALL2&PUSH 9)                      ; ZL-GET
36    (CALLSR&JMPIFNOT 1 47 L79)          ; <
40    (CONST 14)                          ; "The context ~M is currently active."
41    L41
41    (PUSH)
42    (GETVALUE&PUSH 0)                   ; X
44    (CALL2 4)                           ; MTELL
46    (JMP L130)
49    L49
49    (CONST 3)                           ; "The context ~M doesn't exist."
50    (JMP L41)
52    L52
52    (CONST 5)                           ; $GLOBAL
53    (JMP L130)
56    L56
56    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; REMOV
58    (CONST&PUSH 6)                      ; $INITIAL
59    (CONST&PUSH 8)                      ; DATA
60    (CALL2&PUSH 9)                      ; ZL-GET
62    (CALLSR 0 24)                       ; MAPC
65    (CONST&PUSH 6)                      ; $INITIAL
66    (CONST&PUSH 8)                      ; DATA
67    (CALLS2 137)                        ; REMPROP
69    (CONST 6)                           ; $INITIAL
70    (JMP L130)
72    L72
72    (CONST 6)                           ; $INITIAL
73    (SETVALUE 10)                       ; $CONTEXT
75    (SETVALUE 18)                       ; CONTEXT
77    (JMP L124)
79    L79
79    (GETVALUE&PUSH 0)                   ; X
81    (GETVALUE&PUSH 1)                   ; $CONTEXTS
83    (CALL2 15)                          ; $DELETE
85    (SETVALUE 1)                        ; $CONTEXTS
87    (GETVALUE&PUSH 0)                   ; X
89    (GETVALUE 10)                       ; $CONTEXT
91    (JMPIFNOTEQ L102)
93    (GETVALUE&PUSH 0)                   ; X
95    (CONST&PUSH 16)                     ; SUBC
96    (CALL2&PUSH 9)                      ; ZL-GET
98    (CONST&PUSH 17)                     ; ($GLOBAL)
99    (CALLS2&JMPIF 2 L72)                ; EQUAL
102   L102
102   (GETVALUE&PUSH 0)                   ; X
104   (GETVALUE 10)                       ; $CONTEXT
106   (JMPIFNOTEQ L124)
108   (GETVALUE&PUSH 0)                   ; X
110   (CONST&PUSH 16)                     ; SUBC
111   (CALL2 9)                           ; ZL-GET
113   (CAR)
114   (SETVALUE 10)                       ; $CONTEXT
116   (GETVALUE&PUSH 0)                   ; X
118   (CONST&PUSH 16)                     ; SUBC
119   (CALL2 9)                           ; ZL-GET
121   (CAR)
122   (SETVALUE 18)                       ; CONTEXT
124   L124
124   (GETVALUE&PUSH 0)                   ; X
126   (CALL1 19)                          ; KILLC
128   (GETVALUE 0)                        ; X
130   L130
130   (UNBIND1)
131   (SKIP&RET 2)


Disassembly of function #:|(DEFUN NC-ERR NIL ...)-44|
(CONST 0) = NC-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NC-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NC-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NC-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NC-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NC-ERR
8     (SKIP&RET 1)


Disassembly of function NC-ERR
(CONST 0) = "Contexts must be symbolic atoms."
(CONST 1) = MERROR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; "Contexts must be symbolic atoms."
1     (CALL1 1)                           ; MERROR
3     (SKIP&RET 1)


Disassembly of function #:|(DEFMSPEC $IS (FORM) ...)-45-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $IS (FORM) ...)-45-2-1|>
(CONST 1) = $IS
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $IS (FORM) ...)-45-2-1|>
1     (CONST&PUSH 1)                      ; $IS
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $IS (FORM) ...)-45-2-1|
(CONST 0) = FORM
(CONST 1) = FEXPRCHECK
(CONST 2) = MEVALP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 0)                   ; FORM
5     (CALL1&PUSH 1)                      ; FEXPRCHECK
7     (CALL1 2)                           ; MEVALP
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN IS (PRED) ...)-46|
(CONST 0) = IS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IS
8     (SKIP&RET 1)


Disassembly of function IS
(CONST 0) = $PREDERROR
(CONST 1) = MEVALP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (T)
1     (BIND 0)                            ; $PREDERROR
3     (LOAD&PUSH 4)
4     (CALL1 1)                           ; MEVALP
6     (UNBIND1)
7     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MEVALP (PAT) ...)-47|
(CONST 0) = MEVALP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVALP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVALP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVALP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVALP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVALP
8     (SKIP&RET 1)


Disassembly of function MEVALP
(CONST 0) = PATEVALLED
(CONST 1) = MEVALP1
(CONST 2) = (T NIL)
(CONST 3) = MEMQ
(CONST 4) = $PREDERROR
(CONST 5) = PRE-ERR
(CONST 6) = $UNKNOWN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PATEVALLED $PREDERROR)
23 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; PATEVALLED
3     (NIL&PUSH)
4     (LOAD&PUSH 5)
5     (CALL1 1)                           ; MEVALP1
7     (STORE 0)
8     (PUSH)
9     (CONST&PUSH 2)                      ; (T NIL)
10    (CALL2&JMPIF 3 L23)                 ; MEMQ
13    (GETVALUE 4)                        ; $PREDERROR
15    (JMPIF L26)
17    (CONST 6)                           ; $UNKNOWN
18    L18
18    (SKIP 1)
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (LOAD 0)
24    (JMP L18)
26    L26
26    (GETVALUE&PUSH 0)                   ; PATEVALLED
28    (CALL1 5)                           ; PRE-ERR
30    (JMP L18)


Disassembly of function #:|(DEFUN MEVALP1 (PAT) ...)-48|
(CONST 0) = MEVALP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVALP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVALP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVALP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVALP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVALP1
8     (SKIP&RET 1)


Disassembly of function MEVALP1
(CONST 0) = (MNOT MAND MOR)
(CONST 1) = MEMQ
(CONST 2) = MNOT
(CONST 3) = IS-MNOT
(CONST 4) = MAND
(CONST 5) = IS-MAND
(CONST 6) = IS-MOR
(CONST 7) = MEVAL
(CONST 8) = PATEVALLED
(CONST 9) = (MNOT MAND MOR)
(CONST 10) = MEVALP2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (PATEVALLED)
writes special variable : (PATEVALLED)
58 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L10)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (CONST&PUSH 0)                      ; (MNOT MAND MOR)
7     (CALL2&JMPIF 1 L56)                 ; MEMQ
10    L10
10    (LOAD&PUSH 1)
11    (CALL1 7)                           ; MEVAL
13    (SETVALUE 8)                        ; PATEVALLED
15    (JMPIFATOM L74)
17    (GETVALUE 8)                        ; PATEVALLED
19    (CAR)
20    (CAR&PUSH)
21    (CONST&PUSH 9)                      ; (MNOT MAND MOR)
22    (CALL2&JMPIF 1 L78)                 ; MEMQ
25    (GETVALUE 8)                        ; PATEVALLED
27    (CAR)
28    (CAR&PUSH)
29    (GETVALUE 8)                        ; PATEVALLED
31    (CDR)
32    (CAR&PUSH)
33    (GETVALUE 8)                        ; PATEVALLED
35    (CDR)
36    (CDR)
37    (CAR&PUSH)
38    (CALL 3 10)                         ; MEVALP2
41    (SKIP&RET 2)
43    L43
43    (LOAD 1)
44    (CDR)
45    (CAR&PUSH)
46    (CALL1 3)                           ; IS-MNOT
48    (SKIP&RET 2)
50    L50
50    (LOAD&CDR&PUSH 1)
52    (CALL1 5)                           ; IS-MAND
54    (SKIP&RET 2)
56    L56
56    (LOAD 1)
57    (CAR)
58    (CAR&PUSH)
59    (JMPIFEQTO 2 L43)                   ; MNOT
62    (LOAD 1)
63    (CAR)
64    (CAR&PUSH)
65    (JMPIFEQTO 4 L50)                   ; MAND
68    (LOAD&CDR&PUSH 1)
70    (CALL1 6)                           ; IS-MOR
72    (SKIP&RET 2)
74    L74
74    (GETVALUE 8)                        ; PATEVALLED
76    (SKIP&RET 2)
78    L78
78    (GETVALUE&PUSH 8)                   ; PATEVALLED
80    (JMPTAIL 1 3 L0)


Disassembly of function #:|(DEFMFUN MEVALP2 (PRED ARG1 ARG2) ...)-49|
(CONST 0) = MEVALP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVALP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVALP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVALP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVALP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVALP2
8     (SKIP&RET 1)


Disassembly of function MEVALP2
(CONST 0) = MEQUAL
(CONST 1) = LIKE
(CONST 2) = $EQUAL
(CONST 3) = MEQP
(CONST 4) = MNOTEQUAL
(CONST 5) = $NOTEQUAL
(CONST 6) = MNQP
(CONST 7) = MGREATERP
(CONST 8) = MGRP
(CONST 9) = MLESSP
(CONST 10) = MGEQP
(CONST 11) = MGQP
(CONST 12) = MLEQP
(CONST 13) = PATEVALLED
(CONST 14) = MUNFORMAT
(CONST 15) = ISP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (PATEVALLED)
63 byte-code instructions:
0     (LOAD&PUSH 3)
1     (JMPIFEQTO 0 L31)                   ; MEQUAL
4     (LOAD&PUSH 3)
5     (JMPIFEQTO 2 L37)                   ; $EQUAL
8     (LOAD&PUSH 3)
9     (JMPIFEQTO 4 L43)                   ; MNOTEQUAL
12    (LOAD&PUSH 3)
13    (JMPIFEQTO 5 L50)                   ; $NOTEQUAL
16    (LOAD&PUSH 3)
17    (JMPIFEQTO 7 L56)                   ; MGREATERP
20    (LOAD&PUSH 3)
21    (JMPIFNOTEQTO 9 L64)                ; MLESSP
24    (LOAD&PUSH 1)
25    (LOAD 3)
26    L26
26    (PUSH)
27    (CALL2 8)                           ; MGRP
29    (SKIP&RET 4)
31    L31
31    (LOAD&PUSH 2)
32    (LOAD&PUSH 2)
33    (CALL2 1)                           ; LIKE
35    (SKIP&RET 4)
37    L37
37    (LOAD&PUSH 2)
38    (LOAD&PUSH 2)
39    (CALL2 3)                           ; MEQP
41    (SKIP&RET 4)
43    L43
43    (LOAD&PUSH 2)
44    (LOAD&PUSH 2)
45    (CALL2 1)                           ; LIKE
47    (NOT)
48    (SKIP&RET 4)
50    L50
50    (LOAD&PUSH 2)
51    (LOAD&PUSH 2)
52    (CALL2 6)                           ; MNQP
54    (SKIP&RET 4)
56    L56
56    (LOAD&PUSH 2)
57    (LOAD 2)
58    (JMP L26)
60    L60
60    (LOAD&PUSH 2)
61    (LOAD 2)
62    (JMP L74)
64    L64
64    (LOAD&PUSH 3)
65    (JMPIFEQTO 10 L60)                  ; MGEQP
68    (LOAD&PUSH 3)
69    (JMPIFNOTEQTO 12 L79)               ; MLEQP
72    (LOAD&PUSH 1)
73    (LOAD 3)
74    L74
74    (PUSH)
75    (CALL2 11)                          ; MGQP
77    (SKIP&RET 4)
79    L79
79    (GETVALUE&PUSH 13)                  ; PATEVALLED
81    (CALL1&PUSH 14)                     ; MUNFORMAT
83    (CALL1 15)                          ; ISP
85    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN PRE-ERR (PAT) ...)-50|
(CONST 0) = PRE-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRE-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRE-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRE-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRE-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRE-ERR
8     (SKIP&RET 1)


Disassembly of function PRE-ERR
(CONST 0) = "MACSYMA was unable to evaluate the predicate:~%~M"
(CONST 1) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MACSYMA was unable to evaluate the predicate:~%~M"
1     (LOAD&PUSH 2)
2     (CALL2 1)                           ; MERROR
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN IS-MNOT (PRED) ...)-51|
(CONST 0) = IS-MNOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IS-MNOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IS-MNOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IS-MNOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IS-MNOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IS-MNOT
8     (SKIP&RET 1)


Disassembly of function IS-MNOT
(CONST 0) = MEVALP
(CONST 1) = PRED-REVERSE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; MEVALP
3     (STORE 1)
4     (PUSH)
5     (T)
6     (JMPIFEQ L17)
8     (LOAD 1)
9     (NOT)
10    (JMPIF1 L20)
12    (LOAD&PUSH 1)
13    (CALL1 1)                           ; PRED-REVERSE
15    (SKIP&RET 2)
17    L17
17    (NIL)
18    (SKIP&RET 2)
20    L20
20    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN PRED-REVERSE (PRED) ...)-52|
(CONST 0) = PRED-REVERSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRED-REVERSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRED-REVERSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRED-REVERSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRED-REVERSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRED-REVERSE
8     (SKIP&RET 1)


Disassembly of function PRED-REVERSE
(CONST 0) = (MNOT)
(CONST 1) = MNOT
(CONST 2) = MGREATERP
(CONST 3) = (MLEQP)
(CONST 4) = MGEQP
(CONST 5) = (MLESSP)
(CONST 6) = MEQUAL
(CONST 7) = (MNOTEQUAL)
(CONST 8) = $EQUAL
(CONST 9) = ($NOTEQUAL)
(CONST 10) = $NOTEQUAL
(CONST 11) = ($EQUAL)
(CONST 12) = MNOTEQUAL
(CONST 13) = (MEQUAL)
(CONST 14) = MLEQP
(CONST 15) = (MGREATERP)
(CONST 16) = MLESSP
(CONST 17) = (MGEQP)
(CONST 18) = (MNOT)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
81 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L64)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 1 L67)                   ; MNOT
9     (LOAD 1)
10    (CAR)
11    (CAR&PUSH)
12    (JMPIFEQTO 2 L72)                   ; MGREATERP
15    (LOAD 1)
16    (CAR)
17    (CAR&PUSH)
18    (JMPIFEQTO 4 L75)                   ; MGEQP
21    (LOAD 1)
22    (CAR)
23    (CAR&PUSH)
24    (JMPIFEQTO 6 L78)                   ; MEQUAL
27    (LOAD 1)
28    (CAR)
29    (CAR&PUSH)
30    (JMPIFEQTO 8 L81)                   ; $EQUAL
33    (LOAD 1)
34    (CAR)
35    (CAR&PUSH)
36    (JMPIFEQTO 10 L84)                  ; $NOTEQUAL
39    (LOAD 1)
40    (CAR)
41    (CAR&PUSH)
42    (JMPIFEQTO 12 L87)                  ; MNOTEQUAL
45    (LOAD 1)
46    (CAR)
47    (CAR&PUSH)
48    (JMPIFEQTO 14 L90)                  ; MLEQP
51    (LOAD 1)
52    (CAR)
53    (CAR&PUSH)
54    (JMPIFEQTO 16 L93)                  ; MLESSP
57    (CONST 18)                          ; (MNOT)
58    L58
58    (PUSH)
59    (LOAD&PUSH 2)
60    (LIST 2)
62    (SKIP&RET 2)
64    L64
64    (CONST 0)                           ; (MNOT)
65    (JMP L58)
67    L67
67    (LOAD 1)
68    (CDR)
69    (CAR)
70    (SKIP&RET 2)
72    L72
72    (CONST 3)                           ; (MLEQP)
73    (JMP L94)
75    L75
75    (CONST 5)                           ; (MLESSP)
76    (JMP L94)
78    L78
78    (CONST 7)                           ; (MNOTEQUAL)
79    (JMP L94)
81    L81
81    (CONST 9)                           ; ($NOTEQUAL)
82    (JMP L94)
84    L84
84    (CONST 11)                          ; ($EQUAL)
85    (JMP L94)
87    L87
87    (CONST 13)                          ; (MEQUAL)
88    (JMP L94)
90    L90
90    (CONST 15)                          ; (MGREATERP)
91    (JMP L94)
93    L93
93    (CONST 17)                          ; (MGEQP)
94    L94
94    (PUSH)
95    (LOAD 2)
96    (CDR)
97    (CONS)
98    (SKIP&RET 2)


Disassembly of function #:|(DEFUN IS-MAND (PL) ...)-53|
(CONST 0) = IS-MAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IS-MAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IS-MAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IS-MAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IS-MAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IS-MAND
8     (SKIP&RET 1)


Disassembly of function IS-MAND
(CONST 0) = MEVALP
(CONST 1) = (MAND)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
38 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD&JMPIFNOT 3 L37)
5     (JMP L23)
7     L7
7     (NIL)
8     (SKIP&RET 4)
10    L10
10    (LOAD 0)
11    (CAR)
12    (SKIP&RET 4)
14    L14
14    (LOAD&JMPIFNOT 1 L7)
17    (LOAD&PUSH 1)
18    (LOAD&CONS&STORE 0)
20    (LOAD&JMPIFNOT 3 L37)
23    L23
23    (LOAD&CAR&PUSH 3)
25    (CALL1 0)                           ; MEVALP
27    (STORE 1)
28    (LOAD&CDR&STORE 3)
30    (LOAD&PUSH 1)
31    (T)
32    (JMPIFNOTEQ L14)
34    (LOAD&JMPIF 3 L23)
37    L37
37    (LOAD 0)
38    (NOT)
39    (JMPIF1 L52)
41    (LOAD 0)
42    (CDR)
43    (JMPIFNOT L10)
45    (CONST&PUSH 1)                      ; (MAND)
46    (LOAD&PUSH 1)
47    (CALLS2 73)                         ; NREVERSE
49    (CONS)
50    (SKIP&RET 4)
52    L52
52    (SKIP&RET 4)


Disassembly of function #:|(DEFUN IS-MOR (PL) ...)-54|
(CONST 0) = IS-MOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IS-MOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IS-MOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IS-MOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IS-MOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IS-MOR
8     (SKIP&RET 1)


Disassembly of function IS-MOR
(CONST 0) = MEVALP
(CONST 1) = (MOR)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
37 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD&JMPIFNOT 3 L40)
5     (JMP L23)
7     L7
7     (T)
8     (SKIP&RET 4)
10    L10
10    (NIL)
11    (SKIP&RET 4)
13    L13
13    (LOAD 0)
14    (CAR)
15    (SKIP&RET 4)
17    L17
17    (LOAD&PUSH 1)
18    (LOAD&CONS&STORE 0)
20    (LOAD&JMPIFNOT 3 L40)
23    L23
23    (LOAD&CAR&PUSH 3)
25    (CALL1 0)                           ; MEVALP
27    (STORE 1)
28    (LOAD&CDR&STORE 3)
30    (LOAD&PUSH 1)
31    (T)
32    (JMPIFEQ L7)
34    (LOAD&JMPIF 1 L17)
37    (LOAD&JMPIF 3 L23)
40    L40
40    (LOAD&JMPIFNOT 0 L10)
43    (LOAD 0)
44    (CDR)
45    (JMPIFNOT L13)
47    (CONST&PUSH 1)                      ; (MOR)
48    (LOAD&PUSH 1)
49    (CALLS2 73)                         ; NREVERSE
51    (CONS)
52    (SKIP&RET 4)


Disassembly of function #:|(DEFMSPEC $ASSUME (X) ...)-55-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $ASSUME (X) ...)-55-2-1|>
(CONST 1) = $ASSUME
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $ASSUME (X) ...)-55-2-1|>
1     (CONST&PUSH 1)                      ; $ASSUME
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $ASSUME (X) ...)-55-2-1|
(CONST 0) = X
(CONST 1) = MEVAL
(CONST 2) = ASSUME
(CONST 3) = MAND
(CONST 4) = L
(CONST 5) = MNOT
(CONST 6) = PRED-REVERSE
(CONST 7) = MOR
(CONST 8) = "ASSUME: Macsyma is unable to handle assertions involving 'OR'."
(CONST 9) = MERROR
(CONST 10) = MEQUAL
(CONST 11) = 
"ASSUME: = means syntactic equality in Macsyma.
Maybe you want to use EQUAL."
(CONST 12) = MNOTEQUAL
(CONST 13) = 
"ASSUME: # means syntactic unequality in Macsyma.
Maybe you want to use NOT EQUAL."
(CONST 14) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L X)
writes special variable : (X)
100 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (SETVALUE 0)                        ; X
8     (NIL&PUSH)
9     (GETVALUE 0)                        ; X
11    (JMPIFNOT L84)
14    L14
14    (GETVALUE 0)                        ; X
16    (CAR)
17    (JMPIFATOM L64)
19    (GETVALUE 0)                        ; X
21    (CAR)
22    (CAR)
23    (CAR&PUSH)
24    (JMPIFEQTO 3 L94)                   ; MAND
28    (GETVALUE 0)                        ; X
30    (CAR)
31    (CAR)
32    (CAR&PUSH)
33    (JMPIFEQTO 5 L127)                  ; MNOT
37    (GETVALUE 0)                        ; X
39    (CAR)
40    (CAR)
41    (CAR&PUSH)
42    (JMPIFEQTO 7 L137)                  ; MOR
46    (GETVALUE 0)                        ; X
48    (CAR)
49    (CAR)
50    (CAR&PUSH)
51    (JMPIFEQTO 10 L140)                 ; MEQUAL
55    (GETVALUE 0)                        ; X
57    (CAR)
58    (CAR)
59    (CAR&PUSH)
60    (JMPIFEQTO 12 L143)                 ; MNOTEQUAL
64    L64
64    (GETVALUE 0)                        ; X
66    (CAR)
67    L67
67    (PUSH)
68    (CALL1&PUSH 1)                      ; MEVAL
70    (CALL1&PUSH 2)                      ; ASSUME
72    (LOAD&CONS&STORE 0)
74    L74
74    (GETVALUE 0)                        ; X
76    (CDR)
77    (SETVALUE 0)                        ; X
79    (GETVALUE 0)                        ; X
81    (JMPIF L14)
84    L84
84    (CONST&PUSH 14)                     ; (MLIST)
85    (LOAD&PUSH 1)
86    (CALLS2 73)                         ; NREVERSE
88    (CONS)
89    (SKIP 1)
91    (UNBIND1)
92    (SKIP&RET 2)
94    L94
94    (GETVALUE 0)                        ; X
96    (CAR)
97    (CDR&PUSH)
98    (LOAD&PUSH 0)
99    (JMP L119)
101   L101
101   (LOAD&CAR&PUSH 0)
103   (LOAD 0)
104   (BIND 4)                            ; L
106   (GETVALUE&PUSH 4)                   ; L
108   (CALL1&PUSH 1)                      ; MEVAL
110   (CALL1&PUSH 2)                      ; ASSUME
112   (LOAD&CONS&STORE 6)
114   (UNBIND1)
115   (SKIP 1)
117   (LOAD&CDR&STORE 0)
119   L119
119   (LOAD&PUSH 0)
120   (CALLS1&JMPIFNOT 146 L101)          ; ENDP
123   (SKIP 2)
125   (JMP L74)
127   L127
127   (GETVALUE 0)                        ; X
129   (CAR)
130   (CDR)
131   (CAR&PUSH)
132   (CALL1 6)                           ; PRED-REVERSE
134   (JMP L67)
137   L137
137   (CONST 8)                           ; "ASSUME: Macsyma is unable to handle assertions involving 'OR'."
138   (JMP L144)
140   L140
140   (CONST 11)                          ; "ASSUME: = means syntactic equality in Macsyma.
Maybe you want to use EQUAL."
141   (JMP L144)
143   L143
143   (CONST 13)                          ; "ASSUME: # means syntactic unequality in Macsyma.
Maybe you want to use NOT EQUAL."
144   L144
144   (PUSH)
145   (CALL1 9)                           ; MERROR
147   (JMP L74)


Disassembly of function #:|(DEFMFUN ASSUME (PAT) ...)-56|
(CONST 0) = ASSUME
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASSUME>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASSUME
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASSUME
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASSUME>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASSUME
8     (SKIP&RET 1)


Disassembly of function ASSUME
(CONST 0) = MNOT
(CONST 1) = $EQUAL
(CONST 2) = ($NOTEQUAL)
(CONST 3) = PATEVALLED
(CONST 4) = $ASSUME_POS
(CONST 5) = MEVALP1
(CONST 6) = $REDUNDANT
(CONST 7) = $INCONSISTENT
(CONST 8) = $MEANINGLESS
(CONST 9) = LEARN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
47 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L24)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 0 L24)                ; MNOT
9     (LOAD 1)
10    (CDR)
11    (CAR)
12    (CAR)
13    (CAR&PUSH)
14    (JMPIFNOTEQTO 1 L24)                ; $EQUAL
17    (CONST&PUSH 2)                      ; ($NOTEQUAL)
18    (LOAD 2)
19    (CDR)
20    (CAR)
21    (CDR)
22    (CONS)
23    (STORE 1)
24    L24
24    (NIL)
25    (BIND 3)                            ; PATEVALLED
27    (NIL)
28    (BIND 4)                            ; $ASSUME_POS
30    (LOAD&PUSH 7)
31    (CALL1 5)                           ; MEVALP1
33    (UNBIND 2)
35    (PUSH)
36    (LOAD&PUSH 0)
37    (T)
38    (JMPIFEQ L52)
40    (LOAD&JMPIFNOT 0 L55)
43    (LOAD 0)
44    (JMPIFATOM L58)
46    (LOAD&PUSH 2)
47    (T&PUSH)
48    (CALL2 9)                           ; LEARN
50    (SKIP&RET 3)
52    L52
52    (CONST 6)                           ; $REDUNDANT
53    (SKIP&RET 3)
55    L55
55    (CONST 7)                           ; $INCONSISTENT
56    (SKIP&RET 3)
58    L58
58    (CONST 8)                           ; $MEANINGLESS
59    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN LEARN (PAT FLAG) ...)-57|
(CONST 0) = LEARN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEARN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEARN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEARN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEARN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LEARN
8     (SKIP&RET 1)


Disassembly of function LEARN
(CONST 0) = FLAG
(CONST 1) = LEARN
(CONST 2) = UNLEARN
(CONST 3) = ZL-GET
(CONST 4) = MGREATERP
(CONST 5) = SUB
(CONST 6) = DADDGR
(CONST 7) = MGEQP
(CONST 8) = DADDGQ
(CONST 9) = (MEQUAL $EQUAL)
(CONST 10) = MEMQ
(CONST 11) = DADDEQ
(CONST 12) = (MNOTEQUAL $NOTEQUAL)
(CONST 13) = DADDNQ
(CONST 14) = MLEQP
(CONST 15) = MLESSP
(CONST 16) = MUNFORMAT
(CONST 17) = TRUE*
(CONST 18) = UNTRUE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FLAG)
138 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FLAG
3     (LOAD&PUSH 5)
4     (CALLS2 5)                          ; ATOM
6     (JMPIF1 L186)
9     (LOAD 5)
10    (CAR)
11    (CAR&PUSH)
12    (GETVALUE 0)                        ; FLAG
14    (JMPIF L83)
17    (CONST 2)                           ; UNLEARN
18    L18
18    (PUSH)
19    (CALL2&JMPIF 3 L90)                 ; ZL-GET
23    (LOAD 5)
24    (CAR)
25    (CAR&PUSH)
26    (JMPIFEQTO 4 L107)                  ; MGREATERP
30    (LOAD 5)
31    (CAR)
32    (CAR&PUSH)
33    (JMPIFEQTO 7 L116)                  ; MGEQP
37    (LOAD 5)
38    (CAR)
39    (CAR&PUSH)
40    (CONST&PUSH 9)                      ; (MEQUAL $EQUAL)
41    (CALL2&JMPIF 10 L125)               ; MEMQ
45    (LOAD 5)
46    (CAR)
47    (CAR&PUSH)
48    (CONST&PUSH 12)                     ; (MNOTEQUAL $NOTEQUAL)
49    (CALL2&JMPIF 10 L140)               ; MEMQ
53    (LOAD 5)
54    (CAR)
55    (CAR&PUSH)
56    (JMPIFEQTO 14 L155)                 ; MLEQP
60    (LOAD 5)
61    (CAR)
62    (CAR&PUSH)
63    (JMPIFNOTEQTO 15 L177)              ; MLESSP
67    (GETVALUE&PUSH 0)                   ; FLAG
69    (LOAD 6)
70    (CDR)
71    (CDR)
72    (CAR&PUSH)
73    (LOAD 7)
74    L74
74    (CDR)
75    (CAR&PUSH)
76    (CALL2&PUSH 5)                      ; SUB
78    (CALL2 6)                           ; DADDGR
80    (JMP L186)
83    L83
83    (CONST 1)                           ; LEARN
84    (JMP L18)
87    L87
87    (CONST 1)                           ; LEARN
88    (JMP L98)
90    L90
90    (LOAD 5)
91    (CAR)
92    (CAR&PUSH)
93    (GETVALUE 0)                        ; FLAG
95    (JMPIF L87)
97    (CONST 2)                           ; UNLEARN
98    L98
98    (PUSH)
99    (CALL2&PUSH 3)                      ; ZL-GET
101   (LOAD&PUSH 6)
102   (FUNCALL 1)
104   (JMP L186)
107   L107
107   (GETVALUE&PUSH 0)                   ; FLAG
109   (LOAD 6)
110   (CDR)
111   (CAR&PUSH)
112   (LOAD 7)
113   (CDR)
114   (JMP L74)
116   L116
116   (GETVALUE&PUSH 0)                   ; FLAG
118   (LOAD 6)
119   (CDR)
120   (CAR&PUSH)
121   (LOAD 7)
122   (CDR)
123   (JMP L162)
125   L125
125   (GETVALUE&PUSH 0)                   ; FLAG
127   (LOAD 6)
128   (CDR)
129   (CAR&PUSH)
130   (LOAD 7)
131   (CDR)
132   (CDR)
133   (CAR&PUSH)
134   (CALL2&PUSH 5)                      ; SUB
136   (CALL2 11)                          ; DADDEQ
138   (JMP L186)
140   L140
140   (GETVALUE&PUSH 0)                   ; FLAG
142   (LOAD 6)
143   (CDR)
144   (CAR&PUSH)
145   (LOAD 7)
146   (CDR)
147   (CDR)
148   (CAR&PUSH)
149   (CALL2&PUSH 5)                      ; SUB
151   (CALL2 13)                          ; DADDNQ
153   (JMP L186)
155   L155
155   (GETVALUE&PUSH 0)                   ; FLAG
157   (LOAD 6)
158   (CDR)
159   (CDR)
160   (CAR&PUSH)
161   (LOAD 7)
162   L162
162   (CDR)
163   (CAR&PUSH)
164   (CALL2&PUSH 5)                      ; SUB
166   (CALL2 8)                           ; DADDGQ
168   (JMP L186)
170   L170
170   (LOAD&PUSH 5)
171   (CALL1&PUSH 16)                     ; MUNFORMAT
173   (CALL1 17)                          ; TRUE*
175   (JMP L186)
177   L177
177   (GETVALUE 0)                        ; FLAG
179   (JMPIF L170)
181   (LOAD&PUSH 5)
182   (CALL1&PUSH 16)                     ; MUNFORMAT
184   (CALL1 18)                          ; UNTRUE
186   L186
186   (UNBIND1)
187   (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO DEF-LEARN (NAME PAT FLAG) ...)-58|
(CONST 0) = DEF-LEARN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-LEARN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-LEARN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-LEARN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-LEARN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-LEARN
10    (SKIP&RET 1)


Disassembly of function DEF-LEARN
(CONST 0) = 4
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = NAME
(CONST 3) = FLAG
(CONST 4) = PROGN
(CONST 5) = LEARN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (FLAG)
32 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 4
4     (CALLSR&JMPIF 1 46 L39)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; NAME
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR&PUSH)
17    (LOAD 6)
18    (CDR)
19    (CDR)
20    (CDR)
21    (CAR)
22    (BIND 3)                            ; FLAG
24    (CONST&PUSH 4)                      ; PROGN
25    (CONST&PUSH 5)                      ; LEARN
26    (LOAD&PUSH 5)
27    (GETVALUE&PUSH 3)                   ; FLAG
29    (LIST&PUSH 3)
31    (LIST 2)
33    (UNBIND1)
34    (SKIP 1)
36    (UNBIND1)
37    (SKIP&RET 3)
39    L39
39    (LOAD&PUSH 2)
40    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
42    (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC $FORGET (X) ...)-59-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $FORGET (X) ...)-59-2-1|>
(CONST 1) = $FORGET
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $FORGET (X) ...)-59-2-1|>
1     (CONST&PUSH 1)                      ; $FORGET
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $FORGET (X) ...)-59-2-1|
(CONST 0) = X
(CONST 1) = MEVAL
(CONST 2) = FORGET
(CONST 3) = MAND
(CONST 4) = L
(CONST 5) = MNOT
(CONST 6) = PRED-REVERSE
(CONST 7) = MOR
(CONST 8) = "MACSYMA is unable to handle assertions involving 'OR'."
(CONST 9) = MERROR
(CONST 10) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L X)
writes special variable : (X)
82 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (SETVALUE 0)                        ; X
8     (NIL&PUSH)
9     (GETVALUE 0)                        ; X
11    (JMPIFNOT L63)
13    L13
13    (GETVALUE 0)                        ; X
15    (CAR)
16    (JMPIFATOM L44)
18    (GETVALUE 0)                        ; X
20    (CAR)
21    (CAR)
22    (CAR&PUSH)
23    (JMPIFEQTO 3 L73)                   ; MAND
26    (GETVALUE 0)                        ; X
28    (CAR)
29    (CAR)
30    (CAR&PUSH)
31    (JMPIFEQTO 5 L106)                  ; MNOT
35    (GETVALUE 0)                        ; X
37    (CAR)
38    (CAR)
39    (CAR&PUSH)
40    (JMPIFEQTO 7 L116)                  ; MOR
44    L44
44    (GETVALUE 0)                        ; X
46    (CAR)
47    L47
47    (PUSH)
48    (CALL1&PUSH 1)                      ; MEVAL
50    (CALL1&PUSH 2)                      ; FORGET
52    (LOAD&CONS&STORE 0)
54    L54
54    (GETVALUE 0)                        ; X
56    (CDR)
57    (SETVALUE 0)                        ; X
59    (GETVALUE 0)                        ; X
61    (JMPIF L13)
63    L63
63    (CONST&PUSH 10)                     ; (MLIST)
64    (LOAD&PUSH 1)
65    (CALLS2 73)                         ; NREVERSE
67    (CONS)
68    (SKIP 1)
70    (UNBIND1)
71    (SKIP&RET 2)
73    L73
73    (GETVALUE 0)                        ; X
75    (CAR)
76    (CDR&PUSH)
77    (LOAD&PUSH 0)
78    (JMP L98)
80    L80
80    (LOAD&CAR&PUSH 0)
82    (LOAD 0)
83    (BIND 4)                            ; L
85    (GETVALUE&PUSH 4)                   ; L
87    (CALL1&PUSH 1)                      ; MEVAL
89    (CALL1&PUSH 2)                      ; FORGET
91    (LOAD&CONS&STORE 6)
93    (UNBIND1)
94    (SKIP 1)
96    (LOAD&CDR&STORE 0)
98    L98
98    (LOAD&PUSH 0)
99    (CALLS1&JMPIFNOT 146 L80)           ; ENDP
102   (SKIP 2)
104   (JMP L54)
106   L106
106   (GETVALUE 0)                        ; X
108   (CAR)
109   (CDR)
110   (CAR&PUSH)
111   (CALL1 6)                           ; PRED-REVERSE
113   (JMP L47)
116   L116
116   (CONST&PUSH 8)                      ; "MACSYMA is unable to handle assertions involving 'OR'."
117   (CALL1 9)                           ; MERROR
119   (JMP L54)


Disassembly of function #:|(DEFMFUN FORGET (PAT) ...)-60|
(CONST 0) = FORGET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FORGET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FORGET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FORGET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FORGET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FORGET
8     (SKIP&RET 1)


Disassembly of function FORGET
(CONST 0) = $LISTP
(CONST 1) = (MLIST SIMP)
(CONST 2) = FORGET1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L9)                  ; $LISTP
4     (LOAD&PUSH 1)
5     (CALL1 2)                           ; FORGET1
7     (SKIP&RET 2)
9     L9
9     (CONST&PUSH 1)                      ; (MLIST SIMP)
10    (CONST&SYMBOL-FUNCTION&PUSH 2)      ; FORGET1
12    (LOAD&CDR&PUSH 3)
14    (CALLSR 0 22)                       ; MAPCAR
17    (CONS)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FORGET1 (PAT) ...)-61|
(CONST 0) = FORGET1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FORGET1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FORGET1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FORGET1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FORGET1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FORGET1
8     (SKIP&RET 1)


Disassembly of function FORGET1
(CONST 0) = MNOT
(CONST 1) = $EQUAL
(CONST 2) = ($NOTEQUAL)
(CONST 3) = LEARN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
24 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L24)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 0 L24)                ; MNOT
9     (LOAD 1)
10    (CDR)
11    (CAR)
12    (CAR)
13    (CAR&PUSH)
14    (JMPIFNOTEQTO 1 L24)                ; $EQUAL
17    (CONST&PUSH 2)                      ; ($NOTEQUAL)
18    (LOAD 2)
19    (CDR)
20    (CAR)
21    (CDR)
22    (CONS)
23    (STORE 1)
24    L24
24    (LOAD&PUSH 1)
25    (NIL&PUSH)
26    (CALL2 3)                           ; LEARN
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN RESTORE-FACTS (FACTL) ...)-62|
(CONST 0) = RESTORE-FACTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RESTORE-FACTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RESTORE-FACTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RESTORE-FACTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RESTORE-FACTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RESTORE-FACTS
8     (SKIP&RET 1)


Disassembly of function RESTORE-FACTS
(CONST 0) = $KIND
(CONST 1) = DECLAREKIND
(CONST 2) = GETOP
(CONST 3) = $PROPS
(CONST 4) = ADD2LNC
(CONST 5) = $PAR
(CONST 6) = ASSUME
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PROPS)
37 byte-code instructions:
0     (LOAD&PUSH 1)
1     (NIL&PUSH)
2     (JMP L43)
4     L4
4     (LOAD 0)
5     (CDR)
6     (CAR&PUSH)
7     (LOAD 1)
8     (CDR)
9     (CDR)
10    (CAR&PUSH)
11    (CALL2 1)                           ; DECLAREKIND
13    (LOAD 0)
14    (CDR)
15    (CAR&PUSH)
16    (CALL1&PUSH 2)                      ; GETOP
18    (GETVALUE&PUSH 3)                   ; $PROPS
20    (CALL2 4)                           ; ADD2LNC
22    (JMP L41)
24    L24
24    (LOAD&CAR&STORE 1 0)
27    (CAR)
28    (CAR&PUSH)
29    (JMPIFEQTO 0 L4)                    ; $KIND
32    (LOAD 0)
33    (CAR)
34    (CAR&PUSH)
35    (JMPIFEQTO 5 L41)                   ; $PAR
38    (LOAD&PUSH 0)
39    (CALL1 6)                           ; ASSUME
41    L41
41    (LOAD&CDR&STORE 1)
43    L43
43    (LOAD&PUSH 1)
44    (CALLS1&JMPIFNOT 146 L24)           ; ENDP
47    (NIL)
48    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO COMPARE (A B) ...)-63|
(CONST 0) = COMPARE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPARE>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPARE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPARE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPARE>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; COMPARE
10    (SKIP&RET 1)


Disassembly of function COMPARE
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = B
(CONST 3) = SIGN1
(CONST 4) = SUB*
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (B)
24 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 46 L29)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR)
15    (BIND 2)                            ; B
17    (CONST&PUSH 3)                      ; SIGN1
18    (CONST&PUSH 4)                      ; SUB*
19    (LOAD&PUSH 5)
20    (GETVALUE&PUSH 2)                   ; B
22    (LIST&PUSH 3)
24    (LIST 2)
26    (UNBIND1)
27    (SKIP&RET 4)
29    L29
29    (LOAD&PUSH 2)
30    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
32    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $COMPARE (X Y) ...)-64|
(CONST 0) = $COMPARE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $COMPARE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $COMPARE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $COMPARE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $COMPARE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $COMPARE
8     (SKIP&RET 1)


Disassembly of function $COMPARE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = SUB*
(CONST 3) = SIGN1
(CONST 4) = SIGN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN Y X)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2&PUSH 2)                      ; SUB*
12    (CALL1 3)                           ; SIGN1
14    (GETVALUE 4)                        ; SIGN
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $MAX N ...)-65|
(CONST 0) = $MAX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MAX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MAX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MAX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MAX
8     (SKIP&RET 1)


Disassembly of function $MAX
(CONST 0) = N
(CONST 1) = 0
(CONST 2) = $MAX
(CONST 3) = WNA-ERR
(CONST 4) = LISTIFY1
(CONST 5) = MAXIMIN
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (N)
18 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (GETVALUE&PUSH 0)                   ; N
7     (CONST&PUSH 1)                      ; 0
8     (CALLSR&JMPIF 1 45 L23)             ; =
12    (GETVALUE&PUSH 0)                   ; N
14    (LOAD&PUSH 5)
15    (CALL2&PUSH 4)                      ; LISTIFY1
17    (CONST&PUSH 2)                      ; $MAX
18    (CALL2 5)                           ; MAXIMIN
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (CONST&PUSH 2)                      ; $MAX
24    (CALL1 3)                           ; WNA-ERR
26    (JMP L20)


Disassembly of function #:|(DEFMFUN $MIN N ...)-66|
(CONST 0) = $MIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MIN
8     (SKIP&RET 1)


Disassembly of function $MIN
(CONST 0) = N
(CONST 1) = 0
(CONST 2) = $MIN
(CONST 3) = WNA-ERR
(CONST 4) = LISTIFY1
(CONST 5) = MAXIMIN
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (N)
18 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (GETVALUE&PUSH 0)                   ; N
7     (CONST&PUSH 1)                      ; 0
8     (CALLSR&JMPIF 1 45 L23)             ; =
12    (GETVALUE&PUSH 0)                   ; N
14    (LOAD&PUSH 5)
15    (CALL2&PUSH 4)                      ; LISTIFY1
17    (CONST&PUSH 2)                      ; $MIN
18    (CALL2 5)                           ; MAXIMIN
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (CONST&PUSH 2)                      ; $MIN
24    (CALL1 3)                           ; WNA-ERR
26    (JMP L20)


Disassembly of function #:|(DEFMFUN MAXIMUM (L) ...)-67|
(CONST 0) = MAXIMUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMUM
8     (SKIP&RET 1)


Disassembly of function MAXIMUM
(CONST 0) = L
(CONST 1) = $MAX
(CONST 2) = MAXIMIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (CONST&PUSH 1)                      ; $MAX
6     (CALL2 2)                           ; MAXIMIN
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MINIMUM (L) ...)-68|
(CONST 0) = MINIMUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MINIMUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MINIMUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MINIMUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MINIMUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MINIMUM
8     (SKIP&RET 1)


Disassembly of function MINIMUM
(CONST 0) = L
(CONST 1) = $MIN
(CONST 2) = MAXIMIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (CONST&PUSH 1)                      ; $MIN
6     (CALL2 2)                           ; MAXIMIN
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MAXIMIN (L SW) ...)-69|
(CONST 0) = MAXIMIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMIN
8     (SKIP&RET 1)


Disassembly of function MAXIMIN
(CONST 0) = L
(CONST 1) = X
(CONST 2) = TOTAL-NARY
(CONST 3) = SUB*
(CONST 4) = SIGN1
(CONST 5) = SIGN
(CONST 6) = $ZERO
(CONST 7) = SPECREPCHECK
(CONST 8) = ALIKE1
(CONST 9) = GREAT
(CONST 10) = ($POS $PZ)
(CONST 11) = MEMQ
(CONST 12) = $MIN
(CONST 13) = ($NEG $NZ)
(CONST 14) = $MAX
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN X L)
writes special variables : (L X)
121 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (NIL)
6     (BIND 1)                            ; X
8     (JMP L51)
10    L10
10    (UNBIND1)
11    (SKIP 1)
13    (JMP L74)
15    L15
15    (GETVALUE 0)                        ; L
17    (CAR&PUSH)
18    (CALL1 7)                           ; SPECREPCHECK
20    (STORE 5)
21    (GETVALUE&PUSH 1)                   ; X
23    (CALL1 7)                           ; SPECREPCHECK
25    (STORE 4)
26    (LOAD&PUSH 5)
27    (LOAD&PUSH 5)
28    (CALL2&JMPIF 8 L133)                ; ALIKE1
32    (LOAD&PUSH 4)
33    (LOAD&PUSH 6)
34    (CALL2&JMPIFNOT 9 L133)             ; GREAT
38    (JMP L127)
41    L41
41    (LOAD&PUSH 13)
42    (JMPIFNOTEQTO 12 L133)              ; $MIN
46    (JMP L127)
49    L49
49    (LOAD&CDR&STORE 3)
51    L51
51    (LOAD&PUSH 3)
52    (CALLS1&JMPIF 146 L10)              ; ENDP
55    (LOAD 3)
56    (CAR)
57    (SETVALUE 1)                        ; X
59    (JMPIFATOM L49)
61    (UNBIND1)
62    (SKIP 1)
64    (LOAD&PUSH 4)
65    (NIL)
66    (CONS&PUSH)
67    (GETVALUE 0)                        ; L
69    (CONS&PUSH)
70    (CALL1 2)                           ; TOTAL-NARY
72    (SETVALUE 0)                        ; L
74    L74
74    (PUSH-NIL 5)
76    (GETVALUE 0)                        ; L
78    (JMPIFNOT L167)
81    L81
81    (GETVALUE 0)                        ; L
83    (CDR&PUSH)
84    (NIL)
85    (BIND 1)                            ; X
87    L87
87    (LOAD&PUSH 3)
88    (CALLS1&JMPIF 146 L143)             ; ENDP
91    (LOAD 3)
92    (CAR)
93    (SETVALUE 1)                        ; X
95    (GETVALUE 0)                        ; L
97    (CAR&PUSH)
98    (GETVALUE&PUSH 1)                   ; X
100   (CALL2&PUSH 3)                      ; SUB*
102   (CALL1 4)                           ; SIGN1
104   (GETVALUE&PUSH 5)                   ; SIGN
106   (JMPIFEQTO 6 L15)                   ; $ZERO
110   (GETVALUE&PUSH 5)                   ; SIGN
112   (CONST&PUSH 10)                     ; ($POS $PZ)
113   (CALL2&JMPIF 11 L41)                ; MEMQ
117   (GETVALUE&PUSH 5)                   ; SIGN
119   (CONST&PUSH 13)                     ; ($NEG $NZ)
120   (CALL2&JMPIFNOT 11 L129)            ; MEMQ
123   (LOAD&PUSH 13)
124   (JMPIFNOTEQTO 14 L133)              ; $MAX
127   L127
127   (T&STORE 7)
129   L129
129   (GETVALUE&PUSH 1)                   ; X
131   (LOAD&CONS&STORE 8)
133   L133
133   (LOAD&CDR&STORE 3)
135   (JMP L87)
137   L137
137   (LOAD 2)
138   (CAR)
139   (SKIP 5)
141   (JMP L183)
143   L143
143   (UNBIND1)
144   (SKIP 1)
146   (LOAD&JMPIF 3 L154)
149   (GETVALUE 0)                        ; L
151   (CAR&PUSH)
152   (LOAD&CONS&STORE 2)
154   L154
154   (LOAD&PUSH 4)
155   (CALLS2 73)                         ; NREVERSE
157   (SETVALUE 0)                        ; L
159   (NIL&STORE 4)
161   (STORE 3)
162   (GETVALUE 0)                        ; L
164   (JMPIF L81)
167   L167
167   (LOAD 2)
168   (CDR)
169   (JMPIFNOT L137)
171   (LOAD&PUSH 9)
172   (NIL)
173   (CONS&PUSH)
174   (LOAD&PUSH 3)
175   (CONST&PUSH 9)                      ; GREAT
176   (PUSH-UNBOUND 3)
178   (CALLS2 103)                        ; SORT
180   (CONS)
181   (SKIP 5)
183   L183
183   (UNBIND1)
184   (SKIP&RET 3)


Disassembly of function #:|(DEFMSPEC MNOT (FORM) ...)-70-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MNOT (FORM) ...)-70-2-1|>
(CONST 1) = MNOT
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MNOT (FORM) ...)-70-2-1|>
1     (CONST&PUSH 1)                      ; MNOT
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MNOT (FORM) ...)-70-2-1|
(CONST 0) = FORM
(CONST 1) = MEVALP
(CONST 2) = X
(CONST 3) = $UNKNOWN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X FORM)
writes special variable : (FORM)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (SETVALUE 0)                        ; FORM
8     (CAR&PUSH)
9     (CALL1 1)                           ; MEVALP
11    (BIND 2)                            ; X
13    (GETVALUE&PUSH 2)                   ; X
15    (JMPIFEQTO 3 L25)                   ; $UNKNOWN
18    (GETVALUE 2)                        ; X
20    (NOT)
21    L21
21    (UNBIND 2)
23    (SKIP&RET 2)
25    L25
25    (GETVALUE 2)                        ; X
27    (JMP L21)


Disassembly of function #:|(DEFMSPEC MAND (FORM) ...)-71-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MAND (FORM) ...)-71-2-1|>
(CONST 1) = MAND
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MAND (FORM) ...)-71-2-1|>
1     (CONST&PUSH 1)                      ; MAND
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MAND (FORM) ...)-71-2-1|
(CONST 0) = FORM
(CONST 1) = L
(CONST 2) = X
(CONST 3) = MEVALP
(CONST 4) = $UNKNOWN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X L FORM)
writes special variables : (L X FORM)
37 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (SETVALUE 0)                        ; FORM
8     (BIND 1)                            ; L
10    (NIL)
11    (BIND 2)                            ; X
13    (GETVALUE 1)                        ; L
15    (JMPIFNOT L40)
17    L17
17    (GETVALUE 1)                        ; L
19    (CAR&PUSH)
20    (CALL1 3)                           ; MEVALP
22    (SETVALUE 2)                        ; X
24    (JMPIFNOT L46)
26    (GETVALUE&PUSH 2)                   ; X
28    (JMPIFEQTO 4 L51)                   ; $UNKNOWN
31    (GETVALUE 1)                        ; L
33    (CDR)
34    (SETVALUE 1)                        ; L
36    (GETVALUE 1)                        ; L
38    (JMPIF L17)
40    L40
40    (T)
41    (UNBIND 2)
43    L43
43    (UNBIND1)
44    (SKIP&RET 2)
46    L46
46    (NIL)
47    (UNBIND 2)
49    (JMP L43)
51    L51
51    (GETVALUE 2)                        ; X
53    (UNBIND 2)
55    (JMP L43)


Disassembly of function #:|(DEFMSPEC MOR (FORM) ...)-72-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC MOR (FORM) ...)-72-2-1|>
(CONST 1) = MOR
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC MOR (FORM) ...)-72-2-1|>
1     (CONST&PUSH 1)                      ; MOR
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC MOR (FORM) ...)-72-2-1|
(CONST 0) = FORM
(CONST 1) = L
(CONST 2) = X
(CONST 3) = MEVALP
(CONST 4) = $UNKNOWN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X L FORM)
writes special variables : (L X FORM)
38 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR)
6     (SETVALUE 0)                        ; FORM
8     (BIND 1)                            ; L
10    (NIL)
11    (BIND 2)                            ; X
13    (GETVALUE 1)                        ; L
15    (JMPIFNOT L41)
17    L17
17    (GETVALUE 1)                        ; L
19    (CAR&PUSH)
20    (CALL1 3)                           ; MEVALP
22    (SETVALUE 2)                        ; X
24    (PUSH)
25    (JMPIFEQTO 4 L47)                   ; $UNKNOWN
28    (GETVALUE 2)                        ; X
30    (JMPIF L53)
32    (GETVALUE 1)                        ; L
34    (CDR)
35    (SETVALUE 1)                        ; L
37    (GETVALUE 1)                        ; L
39    (JMPIF L17)
41    L41
41    (NIL)
42    (UNBIND 2)
44    L44
44    (UNBIND1)
45    (SKIP&RET 2)
47    L47
47    (GETVALUE 2)                        ; X
49    (UNBIND 2)
51    (JMP L44)
53    L53
53    (T)
54    (UNBIND 2)
56    (JMP L44)


Disassembly of function #:|(SETQ LIMITP NIL)-73|
(CONST 0) = LIMITP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (LIMITP)
3 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; LIMITP
3     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $ASKSIGN (EXP) ...)-74|
(CONST 0) = $ASKSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ASKSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ASKSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ASKSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ASKSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ASKSIGN
8     (SKIP&RET 1)


Disassembly of function $ASKSIGN
(CONST 0) = EXP
(CONST 1) = SIGN
(CONST 2) = MINUS
(CONST 3) = ODDS
(CONST 4) = EVENS
(CONST 5) = FACTORED
(CONST 6) = LIMITP
(CONST 7) = RESTORELIM
(CONST 8) = $%I
(CONST 9) = AMONG
(CONST 10) = $RECTFORM
(CONST 11) = ASKSIGN01
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP LIMITP)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (NIL)
4     (BIND 1)                            ; SIGN
6     (NIL)
7     (BIND 2)                            ; MINUS
9     (NIL)
10    (BIND 3)                            ; ODDS
12    (NIL)
13    (BIND 4)                            ; EVENS
15    (NIL)
16    (BIND 5)                            ; FACTORED
18    (GETVALUE 6)                        ; LIMITP
20    (JMPIF L37)
22    (CONST&PUSH 8)                      ; $%I
23    (GETVALUE&PUSH 0)                   ; EXP
25    (CALL2&JMPIF 9 L43)                 ; AMONG
28    (GETVALUE 0)                        ; EXP
30    L30
30    (PUSH)
31    (CALL1 11)                          ; ASKSIGN01
33    (UNBIND 6)
35    (SKIP&RET 2)
37    L37
37    (GETVALUE&PUSH 0)                   ; EXP
39    (CALL1 7)                           ; RESTORELIM
41    (JMP L30)
43    L43
43    (GETVALUE&PUSH 0)                   ; EXP
45    (CALL1 10)                          ; $RECTFORM
47    (JMP L30)


Disassembly of function #:|(DEFMFUN ASKSIGN-P-OR-N (E) ...)-75|
(CONST 0) = ASKSIGN-P-OR-N
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASKSIGN-P-OR-N>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASKSIGN-P-OR-N
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASKSIGN-P-OR-N
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASKSIGN-P-OR-N>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASKSIGN-P-OR-N
8     (SKIP&RET 1)


Disassembly of function ASKSIGN-P-OR-N
(CONST 0) = ($NOTEQUAL)
(CONST 1) = (0)
(CONST 2) = ASSUME
(CONST 3) = $ASKSIGN
(CONST 4) = ($NOTEQUAL)
(CONST 5) = (0)
(CONST 6) = FORGET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
18 byte-code instructions:
0     (UNWIND-PROTECT-OPEN L14)
2     (CONST&PUSH 0)                      ; ($NOTEQUAL)
3     (LOAD&PUSH 4)
4     (CONST 1)                           ; (0)
5     (LIST*&PUSH 2)
7     (CALL1 2)                           ; ASSUME
9     (LOAD&PUSH 3)
10    (CALL1 3)                           ; $ASKSIGN
12    (VALUES1)
13    (UNWIND-PROTECT-NORMAL-EXIT)
14    L14
14    (CONST&PUSH 4)                      ; ($NOTEQUAL)
15    (LOADI&PUSH 0 0 1)
19    (CONST 5)                           ; (0)
20    (LIST*&PUSH 2)
22    (CALL1 6)                           ; FORGET
24    (UNWIND-PROTECT-CLOSE)
25    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ASKSIGN01 (A) ...)-76|
(CONST 0) = ASKSIGN01
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASKSIGN01>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASKSIGN01
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASKSIGN01
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASKSIGN01>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASKSIGN01
8     (SKIP&RET 1)


Disassembly of function ASKSIGN01
(CONST 0) = SIGN-PREP
(CONST 1) = $PNZ
(CONST 2) = ASKSIGN1
(CONST 3) = ($POS $NEG)
(CONST 4) = MEMQ
(CONST 5) = LIMITP
(CONST 6) = EPS-SIGN
(CONST 7) = $ZERO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LIMITP)
24 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; SIGN-PREP
3     (LOAD&PUSH 0)
4     (JMPIFEQTO 1 L23)                   ; $PNZ
7     (LOAD&PUSH 0)
8     (CALL1 2)                           ; ASKSIGN1
10    (STORE 0)
11    (PUSH)
12    (CONST&PUSH 3)                      ; ($POS $NEG)
13    (CALL2&JMPIF 4 L26)                 ; MEMQ
16    (GETVALUE 5)                        ; LIMITP
18    (JMPIF L29)
20    (CONST 7)                           ; $ZERO
21    (SKIP&RET 3)
23    L23
23    (CONST 1)                           ; $PNZ
24    (SKIP&RET 3)
26    L26
26    (POP)
27    (SKIP&RET 2)
29    L29
29    (LOAD&PUSH 2)
30    (CALL1 6)                           ; EPS-SIGN
32    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN CSIGN (X) ...)-77|
(CONST 0) = CSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CSIGN
8     (SKIP&RET 1)


Disassembly of function CSIGN
(CONST 0) = X
(CONST 1) = $%I
(CONST 2) = FREE
(CONST 3) = SIGN-IMAG-ERRP
(CONST 4) = LIMITP
(CONST 5) = SIGN-IMAG-ERR
(CONST 6) = $SIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; $%I
6     (CALL2 2)                           ; FREE
8     (NOT)
9     (JMPIF1 L27)
11    (NIL)
12    (BIND 3)                            ; SIGN-IMAG-ERRP
14    (NIL)
15    (BIND 4)                            ; LIMITP
17    (CONST 5)                           ; SIGN-IMAG-ERR
18    (CATCH-OPEN L25)
20    (GETVALUE&PUSH 0)                   ; X
22    (CALL1 6)                           ; $SIGN
24    (CATCH-CLOSE)
25    L25
25    (UNBIND 2)
27    L27
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $SIGN (X) ...)-78|
(CONST 0) = $SIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SIGN
8     (SKIP&RET 1)


Disassembly of function $SIGN
(CONST 0) = X
(CONST 1) = SIGN
(CONST 2) = MINUS
(CONST 3) = ODDS
(CONST 4) = EVENS
(CONST 5) = FACTORED
(CONST 6) = LIMITP
(CONST 7) = RESTORELIM
(CONST 8) = $%I
(CONST 9) = FREE
(CONST 10) = $RECTFORM
(CONST 11) = SIGN01
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X LIMITP)
31 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; SIGN
6     (NIL)
7     (BIND 2)                            ; MINUS
9     (NIL)
10    (BIND 3)                            ; ODDS
12    (NIL)
13    (BIND 4)                            ; EVENS
15    (NIL)
16    (BIND 5)                            ; FACTORED
18    (GETVALUE 6)                        ; LIMITP
20    (JMPIF L37)
22    (GETVALUE&PUSH 0)                   ; X
24    (CONST&PUSH 8)                      ; $%I
25    (CALL2&JMPIFNOT 9 L43)              ; FREE
28    (GETVALUE 0)                        ; X
30    L30
30    (PUSH)
31    (CALL1 11)                          ; SIGN01
33    (UNBIND 6)
35    (SKIP&RET 2)
37    L37
37    (GETVALUE&PUSH 0)                   ; X
39    (CALL1 7)                           ; RESTORELIM
41    (JMP L30)
43    L43
43    (GETVALUE&PUSH 0)                   ; X
45    (CALL1 10)                          ; $RECTFORM
47    (JMP L30)


Disassembly of function #:|(DEFUN SIGN01 (A) ...)-79|
(CONST 0) = SIGN01
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN01>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN01
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN01
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN01>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN01
8     (SKIP&RET 1)


Disassembly of function SIGN01
(CONST 0) = SIGN-PREP
(CONST 1) = $PNZ
(CONST 2) = SIGN1
(CONST 3) = LIMITP
(CONST 4) = $ZERO
(CONST 5) = EPS-SIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LIMITP)
21 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; SIGN-PREP
3     (LOAD&PUSH 0)
4     (JMPIFEQTO 1 L22)                   ; $PNZ
7     (LOAD&PUSH 0)
8     (CALL1 2)                           ; SIGN1
10    (STORE 0)
11    (GETVALUE 3)                        ; LIMITP
13    (JMPIFNOT L19)
15    (LOAD&PUSH 0)
16    (JMPIFEQTO 4 L25)                   ; $ZERO
19    L19
19    (POP)
20    (SKIP&RET 2)
22    L22
22    (CONST 1)                           ; $PNZ
23    (SKIP&RET 3)
25    L25
25    (LOAD&PUSH 2)
26    (CALL1 5)                           ; EPS-SIGN
28    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SIGN-PREP (X) ...)-80|
(CONST 0) = SIGN-PREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN-PREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-PREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN-PREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN-PREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN-PREP
8     (SKIP&RET 1)


Disassembly of function SIGN-PREP
(CONST 0) = X
(CONST 1) = LIMITP
(CONST 2) = TRISPLIT
(CONST 3) = SRATSIMP
(CONST 4) = 0
(CONST 5) = $INFINITY
(CONST 6) = FREE
(CONST 7) = NMR
(CONST 8) = PRIN-INF
(CONST 9) = $INF
(CONST 10) = $MINUS
(CONST 11) = $LIMIT
(CONST 12) = $PNZ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X LIMITP)
writes special variable : (X)
43 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; LIMITP
5     (JMPIF L42)
7     (GETVALUE 0)                        ; X
9     L9
9     (UNBIND1)
10    (SKIP&RET 2)
12    L12
12    (GETVALUE 0)                        ; X
14    (SKIP 2)
16    (JMP L9)
18    L18
18    (LOAD&PUSH 1)
19    (CALL1&PUSH 3)                      ; SRATSIMP
21    (CALL1 7)                           ; NMR
23    (SETVALUE 0)                        ; X
25    (PUSH)
26    (CONST&PUSH 8)                      ; PRIN-INF
27    (CALL2&JMPIF 6 L12)                 ; FREE
30    (GETVALUE&PUSH 0)                   ; X
32    (CONST&PUSH 8)                      ; PRIN-INF
33    (CONST&PUSH 9)                      ; $INF
34    (CONST&PUSH 10)                     ; $MINUS
35    (CALL 4 11)                         ; $LIMIT
38    (SKIP 2)
40    (JMP L9)
42    L42
42    (NIL&PUSH)
43    (GETVALUE&PUSH 0)                   ; X
45    (CALL1&PUSH 2)                      ; TRISPLIT
47    (LOAD&CAR&STORE 0 1)
50    (LOAD&CDR&STORE 0)
52    (PUSH)
53    (CALL1&PUSH 3)                      ; SRATSIMP
55    (JMPIFNOTEQTO 4 L63)                ; 0
58    (LOAD&PUSH 1)
59    (CONST&PUSH 5)                      ; $INFINITY
60    (CALL2&JMPIF 6 L18)                 ; FREE
63    L63
63    (CONST 12)                          ; $PNZ
64    (SKIP 2)
66    (JMP L9)


Disassembly of function #:|(DEFMFUN NMR (A) ...)-81|
(CONST 0) = NMR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NMR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NMR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NMR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NMR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NMR
8     (SKIP&RET 1)


Disassembly of function NMR
(CONST 0) = $ZEROA
(CONST 1) = FREE
(CONST 2) = 0
(CONST 3) = $PLUS
(CONST 4) = $LIMIT
(CONST 5) = $ZEROB
(CONST 6) = $MINUS
(CONST 7) = Z**
(CONST 8) = *Z*
(CONST 9) = EPSILON
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
52 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; $ZEROA
2     (CALL2&JMPIF 1 L13)                 ; FREE
5     (LOAD&PUSH 1)
6     (CONST&PUSH 0)                      ; $ZEROA
7     (CONST&PUSH 2)                      ; 0
8     (CONST&PUSH 3)                      ; $PLUS
9     (CALL 4 4)                          ; $LIMIT
12    (STORE 1)
13    L13
13    (LOAD&PUSH 1)
14    (CONST&PUSH 5)                      ; $ZEROB
15    (CALL2&JMPIF 1 L26)                 ; FREE
18    (LOAD&PUSH 1)
19    (CONST&PUSH 5)                      ; $ZEROB
20    (CONST&PUSH 2)                      ; 0
21    (CONST&PUSH 6)                      ; $MINUS
22    (CALL 4 4)                          ; $LIMIT
25    (STORE 1)
26    L26
26    (LOAD&PUSH 1)
27    (CONST&PUSH 7)                      ; Z**
28    (CALL2&JMPIF 1 L39)                 ; FREE
31    (LOAD&PUSH 1)
32    (CONST&PUSH 7)                      ; Z**
33    (CONST&PUSH 2)                      ; 0
34    (CONST&PUSH 3)                      ; $PLUS
35    (CALL 4 4)                          ; $LIMIT
38    (STORE 1)
39    L39
39    (LOAD&PUSH 1)
40    (CONST&PUSH 8)                      ; *Z*
41    (CALL2&JMPIF 1 L52)                 ; FREE
44    (LOAD&PUSH 1)
45    (CONST&PUSH 8)                      ; *Z*
46    (CONST&PUSH 2)                      ; 0
47    (CONST&PUSH 3)                      ; $PLUS
48    (CALL 4 4)                          ; $LIMIT
51    (STORE 1)
52    L52
52    (LOAD&PUSH 1)
53    (CONST&PUSH 9)                      ; EPSILON
54    (CALL2&JMPIF 1 L65)                 ; FREE
57    (LOAD&PUSH 1)
58    (CONST&PUSH 9)                      ; EPSILON
59    (CONST&PUSH 2)                      ; 0
60    (CONST&PUSH 3)                      ; $PLUS
61    (CALL 4 4)                          ; $LIMIT
64    (STORE 1)
65    L65
65    (LOAD 1)
66    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EPS-SIGN (B) ...)-82|
(CONST 0) = EPS-SIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EPS-SIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EPS-SIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EPS-SIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EPS-SIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EPS-SIGN
8     (SKIP&RET 1)


Disassembly of function EPS-SIGN
(CONST 0) = B
(CONST 1) = $ZEROA
(CONST 2) = FREE
(CONST 3) = EPS-COEF-SIGN
(CONST 4) = $ZEROB
(CONST 5) = EPSILON
(CONST 6) = $ZERO
(CONST 7) = "~%ASKSIGN: Internal error. See Maintainers."
(CONST 8) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
79 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (PUSH-NIL 6)
5     (GETVALUE&PUSH 0)                   ; B
7     (CONST&PUSH 1)                      ; $ZEROA
8     (CALL2&JMPIFNOT 2 L53)              ; FREE
11    (T&STORE 2)
13    L13
13    (GETVALUE&PUSH 0)                   ; B
15    (CONST&PUSH 4)                      ; $ZEROB
16    (CALL2&JMPIFNOT 2 L61)              ; FREE
19    (T&STORE 1)
21    L21
21    (GETVALUE&PUSH 0)                   ; B
23    (CONST&PUSH 5)                      ; EPSILON
24    (CALL2&JMPIFNOT 2 L69)              ; FREE
27    (T&STORE 0)
29    (LOAD&JMPIFNOT 2 L38)
32    L32
32    (LOAD&JMPIFNOT 1 L38)
35    (LOAD&JMPIF 0 L80)
38    L38
38    (LOAD&JMPIF 5 L100)
41    (LOAD&JMPIF 4 L100)
44    (LOAD&JMPIF 3 L100)
47    (NIL)
48    (SKIP 6)
50    L50
50    (UNBIND1)
51    (SKIP&RET 2)
53    L53
53    (GETVALUE&PUSH 0)                   ; B
55    (CONST&PUSH 1)                      ; $ZEROA
56    (CALL2 3)                           ; EPS-COEF-SIGN
58    (STORE 5)
59    (JMP L13)
61    L61
61    (GETVALUE&PUSH 0)                   ; B
63    (CONST&PUSH 4)                      ; $ZEROB
64    (CALL2 3)                           ; EPS-COEF-SIGN
66    (STORE 4)
67    (JMP L21)
69    L69
69    (GETVALUE&PUSH 0)                   ; B
71    (CONST&PUSH 5)                      ; EPSILON
72    (CALL2 3)                           ; EPS-COEF-SIGN
74    (STORE 3)
75    (LOAD&JMPIFNOT 2 L38)
78    (JMP L32)
80    L80
80    (CONST 6)                           ; $ZERO
81    (SKIP 6)
83    (JMP L50)
85    L85
85    (LOAD 3)
86    (SKIP 6)
88    (JMP L50)
90    L90
90    (LOAD 5)
91    (SKIP 6)
93    (JMP L50)
95    L95
95    (LOAD 4)
96    (SKIP 6)
98    (JMP L50)
100   L100
100   (LOAD&JMPIF 5 L106)
103   (LOAD&JMPIFNOT 4 L85)
106   L106
106   (LOAD&JMPIF 4 L112)
109   (LOAD&JMPIFNOT 3 L90)
112   L112
112   (LOAD&JMPIF 5 L118)
115   (LOAD&JMPIFNOT 3 L95)
118   L118
118   (CONST&PUSH 7)                      ; "~%ASKSIGN: Internal error. See Maintainers."
119   (CALL1 8)                           ; MERROR
121   (SKIP 6)
123   (JMP L50)


Disassembly of function #:|(DEFUN EPS-COEF-SIGN (EXP EPSKIND) ...)-83|
(CONST 0) = EPS-COEF-SIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EPS-COEF-SIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EPS-COEF-SIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EPS-COEF-SIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EPS-COEF-SIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EPS-COEF-SIGN
8     (SKIP&RET 1)


Disassembly of function EPS-COEF-SIGN
(CONST 0) = EXP
(CONST 1) = $LOPOW
(CONST 2) = 0
(CONST 3) = RATCOEFF
(CONST 4) = $INTEGER
(CONST 5) = ASK-INTEGER
(CONST 6) = $YES
(CONST 7) = $EVEN
(CONST 8) = $ASKSIGN
(CONST 9) = $ODD
(CONST 10) = $POS
(CONST 11) = EPSILON
(CONST 12) = $ZEROA
(CONST 13) = $NEG
(CONST 14) = -1
(CONST 15) = MUL2*
(CONST 16) = ALIKE
(CONST 17) = $ZEROB
(CONST 18) = "~%ASKSIGN or SIGN: Insufficient information.~%"
(CONST 19) = MERROR
(CONST 20) = SDIFF
(CONST 21) = $ZERO
(CONST 22) = TOTAL-SIGN
(CONST 23) = "~%ASKSIGN or SIGN: Insufficient data.~%"
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
99 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (LOAD&PUSH 5)
6     (CALL2&PUSH 1)                      ; $LOPOW
8     (NIL&PUSH)
9     (LOAD&PUSH 1)
10    (JMPIFEQTO 2 L33)                   ; 0
13    (GETVALUE&PUSH 0)                   ; EXP
15    (LOAD&PUSH 7)
16    (LOAD&PUSH 3)
17    (CALL 3 3)                          ; RATCOEFF
20    (STORE 0)
21    (PUSH)
22    (JMPIFEQTO 2 L33)                   ; 0
25    (LOAD&PUSH 1)
26    (CONST&PUSH 4)                      ; $INTEGER
27    (CALL2&PUSH 5)                      ; ASK-INTEGER
29    (JMPIFEQTO 6 L118)                  ; $YES
33    L33
33    (GETVALUE&PUSH 0)                   ; EXP
35    (LOAD&PUSH 7)
36    (CALL2&PUSH 20)                     ; SDIFF
38    (NIL&PUSH)
39    (LOAD&PUSH 1)
40    (CALL1 8)                           ; $ASKSIGN
42    (STORE 0)
43    (PUSH)
44    (JMPIFNOTEQTO 21 L140)              ; $ZERO
48    (LOAD&PUSH 1)
49    (LOAD&PUSH 9)
50    (CALL2&PUSH 20)                     ; SDIFF
52    (LOAD&PUSH 0)
53    (CALL1 8)                           ; $ASKSIGN
55    (STORE 1)
56    (STORE 0)
57    (JMPIFNOTEQTO 21 L149)              ; $ZERO
61    (CONST&PUSH 23)                     ; "~%ASKSIGN or SIGN: Insufficient data.~%"
62    (CALL1 19)                          ; MERROR
64    (SKIP 4)
66    L66
66    (UNBIND1)
67    (SKIP&RET 3)
69    L69
69    (LOAD&PUSH 0)
70    (CALL1 8)                           ; $ASKSIGN
72    (SKIP 2)
74    (JMP L66)
76    L76
76    (CONST 10)                          ; $POS
77    (SKIP 2)
79    (JMP L66)
81    L81
81    (LOAD&PUSH 0)
82    (CALL1 8)                           ; $ASKSIGN
84    (STORE 0)
85    (PUSH)
86    (JMPIFNOTEQTO 10 L97)               ; $POS
89    (LOAD&PUSH 6)
90    (JMPIFEQTO 11 L76)                  ; EPSILON
93    (LOAD&PUSH 6)
94    (JMPIFEQTO 12 L76)                  ; $ZEROA
97    L97
97    (LOAD&PUSH 0)
98    (JMPIFNOTEQTO 13 L113)              ; $NEG
101   (LOAD&PUSH 6)
102   (CONST&PUSH 14)                     ; -1
103   (CONST&PUSH 11)                     ; EPSILON
104   (CALL2&PUSH 15)                     ; MUL2*
106   (CALL2&JMPIF 16 L76)                ; ALIKE
109   (LOAD&PUSH 6)
110   (JMPIFEQTO 17 L76)                  ; $ZEROB
113   L113
113   (CONST 13)                          ; $NEG
114   (SKIP 2)
116   (JMP L66)
118   L118
118   (LOAD&PUSH 1)
119   (CONST&PUSH 7)                      ; $EVEN
120   (CALL2&PUSH 5)                      ; ASK-INTEGER
122   (JMPIFEQTO 6 L69)                   ; $YES
125   (LOAD&PUSH 1)
126   (CONST&PUSH 9)                      ; $ODD
127   (CALL2&PUSH 5)                      ; ASK-INTEGER
129   (JMPIFEQTO 6 L81)                   ; $YES
132   (CONST&PUSH 18)                     ; "~%ASKSIGN or SIGN: Insufficient information.~%"
133   (CALL1 19)                          ; MERROR
135   (SKIP 2)
137   (JMP L66)
140   L140
140   (LOAD&PUSH 8)
141   (LOAD&PUSH 1)
142   (CALL2 22)                          ; TOTAL-SIGN
144   (SKIP 4)
146   (JMP L66)
149   L149
149   (POP)
150   (SKIP 3)
152   (JMP L66)


Disassembly of function #:|(DEFUN TOTAL-SIGN (EPSKIND FACTOR-SIGN) ...)-84|
(CONST 0) = TOTAL-SIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TOTAL-SIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TOTAL-SIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TOTAL-SIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TOTAL-SIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TOTAL-SIGN
8     (SKIP&RET 1)


Disassembly of function TOTAL-SIGN
(CONST 0) = $ZEROA
(CONST 1) = EPSILON
(CONST 2) = $POS
(CONST 3) = $NEG
(CONST 4) = $ZERO
(CONST 5) = $ZEROB
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
39 byte-code instructions:
0     (LOAD&PUSH 2)
1     (JMPIFEQTO 0 L33)                   ; $ZEROA
4     (LOAD&PUSH 2)
5     (JMPIFEQTO 1 L33)                   ; EPSILON
8     (LOAD&PUSH 2)
9     (JMPIFNOTEQTO 5 L24)                ; $ZEROB
12    (LOAD&PUSH 1)
13    (JMPIFEQTO 2 L48)                   ; $POS
16    (LOAD&PUSH 1)
17    (JMPIFEQTO 3 L51)                   ; $NEG
20    (LOAD&PUSH 1)
21    (JMPIFEQTO 4 L54)                   ; $ZERO
24    L24
24    (NIL)
25    (SKIP&RET 3)
27    L27
27    (CONST 2)                           ; $POS
28    (SKIP&RET 3)
30    L30
30    (CONST 3)                           ; $NEG
31    (SKIP&RET 3)
33    L33
33    (LOAD&PUSH 1)
34    (JMPIFEQTO 2 L27)                   ; $POS
37    (LOAD&PUSH 1)
38    (JMPIFEQTO 3 L30)                   ; $NEG
41    (LOAD&PUSH 1)
42    (JMPIFNOTEQTO 4 L24)                ; $ZERO
45    (CONST 4)                           ; $ZERO
46    (SKIP&RET 3)
48    L48
48    (CONST 3)                           ; $NEG
49    (SKIP&RET 3)
51    L51
51    (CONST 2)                           ; $POS
52    (SKIP&RET 3)
54    L54
54    (CONST 4)                           ; $ZERO
55    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ASKSIGN (X) ...)-85|
(CONST 0) = ASKSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASKSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASKSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASKSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASKSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASKSIGN
8     (SKIP&RET 1)


Disassembly of function ASKSIGN
(CONST 0) = X
(CONST 1) = $ASKSIGN
(CONST 2) = $POS
(CONST 3) = $POSITIVE
(CONST 4) = $NEG
(CONST 5) = $NEGATIVE
(CONST 6) = $PNZ
(CONST 7) = $ZERO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; $ASKSIGN
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (JMPIFEQTO 2 L27)                   ; $POS
13    (GETVALUE&PUSH 0)                   ; X
15    (JMPIFEQTO 4 L30)                   ; $NEG
18    (GETVALUE&PUSH 0)                   ; X
20    (JMPIFEQTO 6 L33)                   ; $PNZ
23    (CONST 7)                           ; $ZERO
24    L24
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (CONST 3)                           ; $POSITIVE
28    (JMP L24)
30    L30
30    (CONST 5)                           ; $NEGATIVE
31    (JMP L24)
33    L33
33    (CONST 6)                           ; $PNZ
34    (JMP L24)


Disassembly of function #:|(DEFUN ASKSIGN1 ($ASKEXP) ...)-86|
(CONST 0) = ASKSIGN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASKSIGN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASKSIGN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASKSIGN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASKSIGN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASKSIGN1
8     (SKIP&RET 1)


Disassembly of function ASKSIGN1
(CONST 0) = $ASKEXP
(CONST 1) = $RADEXPAND
(CONST 2) = SIGN1
(CONST 3) = SIGN
(CONST 4) = ($POS $NEG $ZERO)
(CONST 5) = MEMQ
(CONST 6) = ODDS
(CONST 7) = EVENS
(CONST 8) = LMUL
(CONST 9) = LOCALS
(CONST 10) = ASSOL
(CONST 11) = ($ZERO $Z |$z| 0 0.0)
(CONST 12) = ZL-MEMBER
(CONST 13) = TDZERO
(CONST 14) = $ZERO
(CONST 15) = ($PN $NONZERO $N |$n| $NZ $NONZ $NON0)
(CONST 16) = TDPN
(CONST 17) = $POS
(CONST 18) = ($POS $P |$p| $POSITIVE)
(CONST 19) = TDPOS
(CONST 20) = ($NEG $N |$n| $NEGATIVE)
(CONST 21) = TDNEG
(CONST 22) = (MTEXT)
(CONST 23) = "Is  "
(CONST 24) = "  zero or nonzero?"
(CONST 25) = RETRIEVE
(CONST 26) = MINUS
(CONST 27) = FLIP
(CONST 28) = L
(CONST 29) = 2
(CONST 30) = POWER
(CONST 31) = $PZ
(CONST 32) = "  positive or zero?"
(CONST 33) = $NZ
(CONST 34) = "  negative or zero?"
(CONST 35) = $PN
(CONST 36) = "  positive or negative?"
(CONST 37) = "  positive, negative, or zero?"
(CONST 38) = ($POS $P |$p| $POSITIVE)
(CONST 39) = ($PZ $PN $PNZ)
(CONST 40) = ($NEG $N |$n| $NEGATIVE)
(CONST 41) = ($NZ $PN $PNZ)
(CONST 42) = $NEG
(CONST 43) = ($ZERO $Z |$z| 0 0.0)
(CONST 44) = ($PZ $NZ $PNZ)
(CONST 45) = "Is  "
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L MINUS LOCALS EVENS ODDS SIGN $ASKEXP)
writes special variables : (SIGN $ASKEXP)
182 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; $ASKEXP
3     (NIL)
4     (BIND 1)                            ; $RADEXPAND
6     (GETVALUE&PUSH 0)                   ; $ASKEXP
8     (CALL1 2)                           ; SIGN1
10    (UNBIND1)
11    (GETVALUE&PUSH 3)                   ; SIGN
13    (CONST&PUSH 4)                      ; ($POS $NEG $ZERO)
14    (CALL2&JMPIF 5 L77)                 ; MEMQ
17    (GETVALUE 6)                        ; ODDS
19    (JMPIF L118)
22    (GETVALUE&PUSH 7)                   ; EVENS
24    (CALL1 8)                           ; LMUL
26    (SETVALUE 0)                        ; $ASKEXP
28    (PUSH)
29    (GETVALUE&PUSH 9)                   ; LOCALS
31    (CALL2 10)                          ; ASSOL
33    (CDR)
34    (SETVALUE 3)                        ; SIGN
36    L36
36    (GETVALUE&PUSH 3)                   ; SIGN
38    (CONST&PUSH 11)                     ; ($ZERO $Z |$z| 0 0.0)
39    (CALL2&JMPIF 12 L82)                ; ZL-MEMBER
42    (GETVALUE&PUSH 3)                   ; SIGN
44    (CONST&PUSH 15)                     ; ($PN $NONZERO $N |$n| $NZ ...)
45    (CALL2&JMPIF 5 L89)                 ; MEMQ
48    (GETVALUE&PUSH 3)                   ; SIGN
50    (CONST&PUSH 18)                     ; ($POS $P |$p| $POSITIVE)
51    (CALL2&JMPIF 5 L96)                 ; MEMQ
54    (GETVALUE&PUSH 3)                   ; SIGN
56    (CONST&PUSH 20)                     ; ($NEG $N |$n| $NEGATIVE)
57    (CALL2&JMPIFNOT 5 L103)             ; MEMQ
60    (GETVALUE&PUSH 0)                   ; $ASKEXP
62    (CALL1 21)                          ; TDNEG
64    (CONST 17)                          ; $POS
65    L65
65    (SETVALUE 3)                        ; SIGN
67    (GETVALUE 26)                       ; MINUS
69    (JMPIF L289)
72    (GETVALUE 3)                        ; SIGN
74    (JMP L297)
77    L77
77    (GETVALUE 3)                        ; SIGN
79    (JMP L297)
82    L82
82    (GETVALUE&PUSH 0)                   ; $ASKEXP
84    (CALL1 13)                          ; TDZERO
86    (CONST 14)                          ; $ZERO
87    (JMP L65)
89    L89
89    (GETVALUE&PUSH 0)                   ; $ASKEXP
91    (CALL1 16)                          ; TDPN
93    (CONST 17)                          ; $POS
94    (JMP L65)
96    L96
96    (GETVALUE&PUSH 0)                   ; $ASKEXP
98    (CALL1 19)                          ; TDPOS
100   (CONST 17)                          ; $POS
101   (JMP L65)
103   L103
103   (CONST&PUSH 22)                     ; (MTEXT)
104   (CONST&PUSH 23)                     ; "Is  "
105   (GETVALUE&PUSH 0)                   ; $ASKEXP
107   (CONST&PUSH 24)                     ; "  zero or nonzero?"
108   (LIST&PUSH 4)
110   (NIL&PUSH)
111   (CALL2 25)                          ; RETRIEVE
113   (SETVALUE 3)                        ; SIGN
115   (JMP L36)
118   L118
118   (GETVALUE 26)                       ; MINUS
120   (JMPIFNOT L128)
122   (GETVALUE&PUSH 3)                   ; SIGN
124   (CALL1 27)                          ; FLIP
126   (SETVALUE 3)                        ; SIGN
128   L128
128   (GETVALUE&PUSH 6)                   ; ODDS
130   (NIL&PUSH)
131   (GETVALUE&PUSH 7)                   ; EVENS
133   (JMP L165)
135   L135
135   (CONST 32)                          ; "  positive or zero?"
137   (JMP L199)
139   L139
139   (CONST 34)                          ; "  negative or zero?"
141   (JMP L199)
143   L143
143   (CONST 36)                          ; "  positive or negative?"
145   (JMP L199)
147   L147
147   (LOAD&CAR&PUSH 0)
149   (LOAD 0)
150   (BIND 28)                           ; L
152   (GETVALUE&PUSH 28)                  ; L
154   (CONST&PUSH 29)                     ; 2
155   (CALL2 30)                          ; POWER
157   (UNBIND1)
158   (PUSH)
159   (LOAD&CONS&STORE 2)
161   (SKIP 1)
163   (LOAD&CDR&STORE 0)
165   L165
165   (LOAD&PUSH 0)
166   (CALLS1&JMPIFNOT 146 L147)          ; ENDP
169   (SKIP 1)
171   (LOAD&PUSH 0)
172   (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
175   (CALLSR&PUSH 2 35)                  ; NCONC
178   (CALL1 8)                           ; LMUL
180   (SETVALUE 0)                        ; $ASKEXP
182   (GETVALUE&PUSH 3)                   ; SIGN
184   (JMPIFEQTO 31 L135)                 ; $PZ
187   (GETVALUE&PUSH 3)                   ; SIGN
189   (JMPIFEQTO 33 L139)                 ; $NZ
192   (GETVALUE&PUSH 3)                   ; SIGN
194   (JMPIFEQTO 35 L143)                 ; $PN
197   (CONST 37)                          ; "  positive, negative, or zero?"
199   L199
199   (PUSH)
200   (GETVALUE&PUSH 0)                   ; $ASKEXP
202   (GETVALUE&PUSH 9)                   ; LOCALS
204   (CALL2 10)                          ; ASSOL
206   (CDR&PUSH)
207   (JMP L237)
209   L209
209   (GETVALUE&PUSH 0)                   ; $ASKEXP
211   (CALL1 19)                          ; TDPOS
213   (CONST 17)                          ; $POS
214   (JMP L281)
217   L217
217   (GETVALUE&PUSH 0)                   ; $ASKEXP
219   (CALL1 21)                          ; TDNEG
221   (CONST 42)                          ; $NEG
223   (JMP L281)
225   L225
225   (CONST&PUSH 22)                     ; (MTEXT)
226   (CONST&PUSH 45)                     ; "Is  "
228   (GETVALUE&PUSH 0)                   ; $ASKEXP
230   (LOAD&PUSH 4)
231   (LIST&PUSH 4)
233   (NIL&PUSH)
234   (CALL2 25)                          ; RETRIEVE
236   (STORE 0)
237   L237
237   (LOAD&PUSH 0)
238   (CONST&PUSH 38)                     ; ($POS $P |$p| $POSITIVE)
240   (CALL2&JMPIFNOT 5 L250)             ; MEMQ
243   (GETVALUE&PUSH 3)                   ; SIGN
245   (CONST&PUSH 39)                     ; ($PZ $PN $PNZ)
247   (CALL2&JMPIF 5 L209)                ; MEMQ
250   L250
250   (LOAD&PUSH 0)
251   (CONST&PUSH 40)                     ; ($NEG $N |$n| $NEGATIVE)
253   (CALL2&JMPIFNOT 5 L263)             ; MEMQ
256   (GETVALUE&PUSH 3)                   ; SIGN
258   (CONST&PUSH 41)                     ; ($NZ $PN $PNZ)
260   (CALL2&JMPIF 5 L217)                ; MEMQ
263   L263
263   (LOAD&PUSH 0)
264   (CONST&PUSH 43)                     ; ($ZERO $Z |$z| 0 0.0)
266   (CALL2&JMPIFNOT 12 L225)            ; ZL-MEMBER
269   (GETVALUE&PUSH 3)                   ; SIGN
271   (CONST&PUSH 44)                     ; ($PZ $NZ $PNZ)
273   (CALL2&JMPIFNOT 5 L225)             ; MEMQ
276   (GETVALUE&PUSH 0)                   ; $ASKEXP
278   (CALL1 13)                          ; TDZERO
280   (CONST 14)                          ; $ZERO
281   L281
281   (SETVALUE 3)                        ; SIGN
283   (SKIP 2)
285   (GETVALUE 26)                       ; MINUS
287   (JMPIFNOT L295)
289   L289
289   (GETVALUE&PUSH 3)                   ; SIGN
291   (CALL1 27)                          ; FLIP
293   (JMP L297)
295   L295
295   (GETVALUE 3)                        ; SIGN
297   L297
297   (UNBIND1)
298   (SKIP&RET 2)


Disassembly of function #:|(DEFUN CLEARSIGN NIL ...)-87|
(CONST 0) = CLEARSIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CLEARSIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CLEARSIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CLEARSIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CLEARSIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CLEARSIGN
8     (SKIP&RET 1)


Disassembly of function CLEARSIGN
(CONST 0) = LOCALS
(CONST 1) = $POS
(CONST 2) = DADDGR
(CONST 3) = $NEG
(CONST 4) = NEG
(CONST 5) = $ZERO
(CONST 6) = DADDEQ
(CONST 7) = $PN
(CONST 8) = DADDNQ
(CONST 9) = $PZ
(CONST 10) = DADDGQ
(CONST 11) = $NZ
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (LOCALS)
writes special variable : (LOCALS)
80 byte-code instructions:
0     (GETVALUE 0)                        ; LOCALS
2     (JMPIFNOT L112)
5     L5
5     (GETVALUE 0)                        ; LOCALS
7     (CAR)
8     (CDR&PUSH)
9     (JMPIFEQTO 1 L32)                   ; $POS
12    (GETVALUE 0)                        ; LOCALS
14    (CAR)
15    (CDR&PUSH)
16    (JMPIFNOTEQTO 3 L64)                ; $NEG
19    (NIL&PUSH)
20    (GETVALUE 0)                        ; LOCALS
22    (CAR)
23    (CAR&PUSH)
24    (CALL1 4)                           ; NEG
26    L26
26    (PUSH)
27    (CALL2 2)                           ; DADDGR
29    (JMP L102)
32    L32
32    (NIL&PUSH)
33    (GETVALUE 0)                        ; LOCALS
35    (CAR)
36    (CAR)
37    (JMP L26)
39    L39
39    (NIL&PUSH)
40    (GETVALUE 0)                        ; LOCALS
42    (CAR)
43    (CAR&PUSH)
44    (CALL2 6)                           ; DADDEQ
46    (JMP L102)
48    L48
48    (NIL&PUSH)
49    (GETVALUE 0)                        ; LOCALS
51    (CAR)
52    (CAR&PUSH)
53    (CALL2 8)                           ; DADDNQ
55    (JMP L102)
57    L57
57    (NIL&PUSH)
58    (GETVALUE 0)                        ; LOCALS
60    (CAR)
61    (CAR)
62    (JMP L99)
64    L64
64    (GETVALUE 0)                        ; LOCALS
66    (CAR)
67    (CDR&PUSH)
68    (JMPIFEQTO 5 L39)                   ; $ZERO
71    (GETVALUE 0)                        ; LOCALS
73    (CAR)
74    (CDR&PUSH)
75    (JMPIFEQTO 7 L48)                   ; $PN
78    (GETVALUE 0)                        ; LOCALS
80    (CAR)
81    (CDR&PUSH)
82    (JMPIFEQTO 9 L57)                   ; $PZ
85    (GETVALUE 0)                        ; LOCALS
87    (CAR)
88    (CDR&PUSH)
89    (JMPIFNOTEQTO 11 L102)              ; $NZ
92    (NIL&PUSH)
93    (GETVALUE 0)                        ; LOCALS
95    (CAR)
96    (CAR&PUSH)
97    (CALL1 4)                           ; NEG
99    L99
99    (PUSH)
100   (CALL2 10)                          ; DADDGQ
102   L102
102   (GETVALUE 0)                        ; LOCALS
104   (CDR)
105   (SETVALUE 0)                        ; LOCALS
107   (GETVALUE 0)                        ; LOCALS
109   (JMPIF L5)
112   L112
112   (NIL)
113   (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN LIKE (X Y) ...)-88|
(CONST 0) = LIKE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIKE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIKE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIKE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIKE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIKE
8     (SKIP&RET 1)


Disassembly of function LIKE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = SPECREPCHECK
(CONST 3) = ALIKE1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1&PUSH 2)                      ; SPECREPCHECK
10    (GETVALUE&PUSH 1)                   ; Y
12    (CALL1&PUSH 2)                      ; SPECREPCHECK
14    (CALL2 3)                           ; ALIKE1
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN MEQP (X Y) ...)-89|
(CONST 0) = MEQP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEQP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEQP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEQP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEQP
8     (SKIP&RET 1)


Disassembly of function MEQP
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = LIKE
(CONST 3) = SUB*
(CONST 4) = SIGN1
(CONST 5) = SIGN
(CONST 6) = $ZERO
(CONST 7) = ($POS $NEG $PN)
(CONST 8) = MEMQ
(CONST 9) = ODDS
(CONST 10) = EVENS
(CONST 11) = C-$ZERO
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EVENS ODDS SIGN Y X)
28 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2 2)                           ; LIKE
12    (JMPIF1 L40)
14    (GETVALUE&PUSH 0)                   ; X
16    (GETVALUE&PUSH 1)                   ; Y
18    (CALL2&PUSH 3)                      ; SUB*
20    (CALL1 4)                           ; SIGN1
22    (GETVALUE&PUSH 5)                   ; SIGN
24    (CONST 6)                           ; $ZERO
25    (EQ)
26    (JMPIF1 L40)
28    (GETVALUE&PUSH 5)                   ; SIGN
30    (CONST&PUSH 7)                      ; ($POS $NEG $PN)
31    (CALL2&JMPIF 8 L44)                 ; MEMQ
34    (GETVALUE&PUSH 9)                   ; ODDS
36    (GETVALUE&PUSH 10)                  ; EVENS
38    (CALL2 11)                          ; C-$ZERO
40    L40
40    (UNBIND 2)
42    (SKIP&RET 3)
44    L44
44    (NIL)
45    (JMP L40)


Disassembly of function #:|(DEFMFUN MGRP (X Y) ...)-90|
(CONST 0) = MGRP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MGRP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGRP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MGRP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MGRP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MGRP
8     (SKIP&RET 1)


Disassembly of function MGRP
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = SUB*
(CONST 3) = SIGN1
(CONST 4) = SIGN
(CONST 5) = $POS
(CONST 6) = ($NEG $ZERO $NZ)
(CONST 7) = MEMQ
(CONST 8) = ODDS
(CONST 9) = EVENS
(CONST 10) = C-$POS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EVENS ODDS SIGN Y X)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2&PUSH 2)                      ; SUB*
12    (CALL1 3)                           ; SIGN1
14    (GETVALUE&PUSH 4)                   ; SIGN
16    (CONST 5)                           ; $POS
17    (EQ)
18    (JMPIF1 L32)
20    (GETVALUE&PUSH 4)                   ; SIGN
22    (CONST&PUSH 6)                      ; ($NEG $ZERO $NZ)
23    (CALL2&JMPIF 7 L36)                 ; MEMQ
26    (GETVALUE&PUSH 8)                   ; ODDS
28    (GETVALUE&PUSH 9)                   ; EVENS
30    (CALL2 10)                          ; C-$POS
32    L32
32    (UNBIND 2)
34    (SKIP&RET 3)
36    L36
36    (NIL)
37    (JMP L32)


Disassembly of function #:|(DEFUN MLSP (X Y) ...)-91|
(CONST 0) = MLSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MLSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MLSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MLSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MLSP
8     (SKIP&RET 1)


Disassembly of function MLSP
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = MGRP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 1)                   ; Y
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL2 2)                           ; MGRP
12    (UNBIND 2)
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN MGQP (X Y) ...)-92|
(CONST 0) = MGQP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MGQP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGQP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MGQP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MGQP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MGQP
8     (SKIP&RET 1)


Disassembly of function MGQP
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = SUB*
(CONST 3) = SIGN1
(CONST 4) = SIGN
(CONST 5) = ($POS $ZERO $PZ)
(CONST 6) = MEMQ
(CONST 7) = $NEG
(CONST 8) = $NZ
(CONST 9) = ODDS
(CONST 10) = EVENS
(CONST 11) = C-$ZERO
(CONST 12) = $PN
(CONST 13) = C-$POS
(CONST 14) = C-$PZ
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EVENS ODDS SIGN Y X)
39 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2&PUSH 2)                      ; SUB*
12    (CALL1 3)                           ; SIGN1
14    (GETVALUE&PUSH 4)                   ; SIGN
16    (CONST&PUSH 5)                      ; ($POS $ZERO $PZ)
17    (CALL2&JMPIF 6 L45)                 ; MEMQ
20    (GETVALUE&PUSH 4)                   ; SIGN
22    (JMPIFEQTO 7 L48)                   ; $NEG
25    (GETVALUE&PUSH 4)                   ; SIGN
27    (JMPIFEQTO 8 L51)                   ; $NZ
30    (GETVALUE&PUSH 4)                   ; SIGN
32    (JMPIFEQTO 12 L59)                  ; $PN
35    (GETVALUE&PUSH 9)                   ; ODDS
37    (GETVALUE&PUSH 10)                  ; EVENS
39    (CALL2 14)                          ; C-$PZ
41    L41
41    (UNBIND 2)
43    (SKIP&RET 3)
45    L45
45    (T)
46    (JMP L41)
48    L48
48    (NIL)
49    (JMP L41)
51    L51
51    (GETVALUE&PUSH 9)                   ; ODDS
53    (GETVALUE&PUSH 10)                  ; EVENS
55    (CALL2 11)                          ; C-$ZERO
57    (JMP L41)
59    L59
59    (GETVALUE&PUSH 9)                   ; ODDS
61    (GETVALUE&PUSH 10)                  ; EVENS
63    (CALL2 13)                          ; C-$POS
65    (JMP L41)


Disassembly of function #:|(DEFMFUN MNQP (X Y) ...)-93|
(CONST 0) = MNQP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MNQP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNQP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MNQP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MNQP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MNQP
8     (SKIP&RET 1)


Disassembly of function MNQP
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = LIKE
(CONST 3) = SUB*
(CONST 4) = SIGN1
(CONST 5) = SIGN
(CONST 6) = ($POS $NEG $PN)
(CONST 7) = MEMQ
(CONST 8) = $ZERO
(CONST 9) = $PZ
(CONST 10) = ODDS
(CONST 11) = EVENS
(CONST 12) = C-$POS
(CONST 13) = $NZ
(CONST 14) = NEG
(CONST 15) = C-$PN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EVENS ODDS SIGN Y X)
50 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2&JMPIF 2 L61)                 ; LIKE
13    (GETVALUE&PUSH 0)                   ; X
15    (GETVALUE&PUSH 1)                   ; Y
17    (CALL2&PUSH 3)                      ; SUB*
19    (CALL1 4)                           ; SIGN1
21    (GETVALUE&PUSH 5)                   ; SIGN
23    (CONST&PUSH 6)                      ; ($POS $NEG $PN)
24    (CALL2&JMPIF 7 L64)                 ; MEMQ
27    (GETVALUE&PUSH 5)                   ; SIGN
29    (JMPIFEQTO 8 L67)                   ; $ZERO
32    (GETVALUE&PUSH 5)                   ; SIGN
34    (JMPIFEQTO 9 L70)                   ; $PZ
37    (GETVALUE&PUSH 5)                   ; SIGN
39    (JMPIFNOTEQTO 13 L76)               ; $NZ
42    (CONST&SYMBOL-FUNCTION&PUSH 14)     ; NEG
44    (GETVALUE&PUSH 10)                  ; ODDS
46    (CALLSR&PUSH 0 22)                  ; MAPCAR
49    (CONST&SYMBOL-FUNCTION&PUSH 14)     ; NEG
51    (GETVALUE&PUSH 11)                  ; EVENS
53    (CALLSR 0 22)                       ; MAPCAR
56    L56
56    (PUSH)
57    (CALL2 12)                          ; C-$POS
59    (JMP L82)
61    L61
61    (NIL)
62    (JMP L82)
64    L64
64    (T)
65    (JMP L82)
67    L67
67    (NIL)
68    (JMP L82)
70    L70
70    (GETVALUE&PUSH 10)                  ; ODDS
72    (GETVALUE 11)                       ; EVENS
74    (JMP L56)
76    L76
76    (GETVALUE&PUSH 10)                  ; ODDS
78    (GETVALUE&PUSH 11)                  ; EVENS
80    (CALL2 15)                          ; C-$PN
82    L82
82    (UNBIND 2)
84    (SKIP&RET 3)


Disassembly of function #:|(DEFUN C-$PN (O E) ...)-94|
(CONST 0) = C-$PN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE C-$PN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; C-$PN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; C-$PN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE C-$PN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; C-$PN
8     (SKIP&RET 1)


Disassembly of function C-$PN
(CONST 0) = (MNOT)
(CONST 1) = C-$ZERO
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MNOT)
1     (LOAD&PUSH 3)
2     (LOAD&PUSH 3)
3     (CALL2&PUSH 1)                      ; C-$ZERO
5     (LIST 2)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFUN C-$ZERO (O E) ...)-95|
(CONST 0) = C-$ZERO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE C-$ZERO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; C-$ZERO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; C-$ZERO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE C-$ZERO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; C-$ZERO
8     (SKIP&RET 1)


Disassembly of function C-$ZERO
(CONST 0) = ($EQUAL)
(CONST 1) = LMUL
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; ($EQUAL)
1     (LOAD&PUSH 3)
2     (LOAD&PUSH 3)
3     (CALLSR&PUSH 2 35)                  ; NCONC
6     (CALL1&PUSH 1)                      ; LMUL
8     (CONST&PUSH 2)                      ; 0
9     (LIST 3)
11    (SKIP&RET 3)


Disassembly of function #:|(DEFUN C-$POS (O E) ...)-96|
(CONST 0) = C-$POS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE C-$POS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; C-$POS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; C-$POS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE C-$POS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; C-$POS
8     (SKIP&RET 1)


Disassembly of function C-$POS
(CONST 0) = (MNOT)
(CONST 1) = ($EQUAL)
(CONST 2) = LMUL
(CONST 3) = 0
(CONST 4) = (MGREATERP)
(CONST 5) = L
(CONST 6) = 2
(CONST 7) = POWER
(CONST 8) = (MGREATERP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
50 byte-code instructions:
0     (LOAD&JMPIFNOT 2 L10)
3     (LOAD&JMPIFNOT 1 L22)
6     (NIL&PUSH)
7     (LOAD&PUSH 2)
8     (JMP L47)
10    L10
10    (CONST&PUSH 0)                      ; (MNOT)
11    (CONST&PUSH 1)                      ; ($EQUAL)
12    (LOAD&PUSH 3)
13    (CALL1&PUSH 2)                      ; LMUL
15    (CONST&PUSH 3)                      ; 0
16    (LIST&PUSH 3)
18    (LIST 2)
20    (SKIP&RET 3)
22    L22
22    (CONST&PUSH 4)                      ; (MGREATERP)
23    (LOAD&PUSH 3)
24    (CALL1&PUSH 2)                      ; LMUL
26    (CONST 3)                           ; 0
27    (JMP L68)
29    L29
29    (LOAD&CAR&PUSH 0)
31    (LOAD 0)
32    (BIND 5)                            ; L
34    (GETVALUE&PUSH 5)                   ; L
36    (CONST&PUSH 6)                      ; 2
37    (CALL2 7)                           ; POWER
39    (UNBIND1)
40    (PUSH)
41    (LOAD&CONS&STORE 2)
43    (SKIP 1)
45    (LOAD&CDR&STORE 0)
47    L47
47    (LOAD&PUSH 0)
48    (CALLS1&JMPIFNOT 146 L29)           ; ENDP
51    (SKIP 1)
53    (LOAD&PUSH 0)
54    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
56    (SKIP 1)
58    (STORE 1)
59    (CONST&PUSH 8)                      ; (MGREATERP)
60    (LOAD&PUSH 3)
61    (LOAD&PUSH 3)
62    (CALLSR&PUSH 2 35)                  ; NCONC
65    (CALL1&PUSH 2)                      ; LMUL
67    (CONST 3)                           ; 0
68    L68
68    (PUSH)
69    (LIST 3)
71    (SKIP&RET 3)


Disassembly of function #:|(DEFUN C-$PZ (O E) ...)-97|
(CONST 0) = C-$PZ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE C-$PZ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; C-$PZ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; C-$PZ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE C-$PZ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; C-$PZ
8     (SKIP&RET 1)


Disassembly of function C-$PZ
(CONST 0) = (MNOT)
(CONST 1) = ($EQUAL)
(CONST 2) = LMUL
(CONST 3) = 0
(CONST 4) = (MGEQP)
(CONST 5) = L
(CONST 6) = 2
(CONST 7) = POWER
(CONST 8) = (MGEQP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
50 byte-code instructions:
0     (LOAD&JMPIFNOT 2 L10)
3     (LOAD&JMPIFNOT 1 L22)
6     (NIL&PUSH)
7     (LOAD&PUSH 2)
8     (JMP L47)
10    L10
10    (CONST&PUSH 0)                      ; (MNOT)
11    (CONST&PUSH 1)                      ; ($EQUAL)
12    (LOAD&PUSH 3)
13    (CALL1&PUSH 2)                      ; LMUL
15    (CONST&PUSH 3)                      ; 0
16    (LIST&PUSH 3)
18    (LIST 2)
20    (SKIP&RET 3)
22    L22
22    (CONST&PUSH 4)                      ; (MGEQP)
23    (LOAD&PUSH 3)
24    (CALL1&PUSH 2)                      ; LMUL
26    (CONST 3)                           ; 0
27    (JMP L68)
29    L29
29    (LOAD&CAR&PUSH 0)
31    (LOAD 0)
32    (BIND 5)                            ; L
34    (GETVALUE&PUSH 5)                   ; L
36    (CONST&PUSH 6)                      ; 2
37    (CALL2 7)                           ; POWER
39    (UNBIND1)
40    (PUSH)
41    (LOAD&CONS&STORE 2)
43    (SKIP 1)
45    (LOAD&CDR&STORE 0)
47    L47
47    (LOAD&PUSH 0)
48    (CALLS1&JMPIFNOT 146 L29)           ; ENDP
51    (SKIP 1)
53    (LOAD&PUSH 0)
54    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
56    (SKIP 1)
58    (STORE 1)
59    (CONST&PUSH 8)                      ; (MGEQP)
60    (LOAD&PUSH 3)
61    (LOAD&PUSH 3)
62    (CALLSR&PUSH 2 35)                  ; NCONC
65    (CALL1&PUSH 2)                      ; LMUL
67    (CONST 3)                           ; 0
68    L68
68    (PUSH)
69    (LIST 3)
71    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SIGN* (X) ...)-98|
(CONST 0) = SIGN*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN*
8     (SKIP&RET 1)


Disassembly of function SIGN*
(CONST 0) = X
(CONST 1) = SIGN
(CONST 2) = MINUS
(CONST 3) = ODDS
(CONST 4) = EVENS
(CONST 5) = SIGN1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; SIGN
6     (NIL)
7     (BIND 2)                            ; MINUS
9     (NIL)
10    (BIND 3)                            ; ODDS
12    (NIL)
13    (BIND 4)                            ; EVENS
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1 5)                           ; SIGN1
19    (UNBIND 5)
21    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN INFSIMP* (E) ...)-99|
(CONST 0) = INFSIMP*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INFSIMP*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INFSIMP*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INFSIMP*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INFSIMP*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INFSIMP*
8     (SKIP&RET 1)


Disassembly of function INFSIMP*
(CONST 0) = $INF
(CONST 1) = FREE
(CONST 2) = $MINF
(CONST 3) = INFSIMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L18)
3     (LOAD&PUSH 1)
4     (CONST&PUSH 0)                      ; $INF
5     (CALL2&JMPIFNOT 1 L13)              ; FREE
8     (LOAD&PUSH 1)
9     (CONST&PUSH 2)                      ; $MINF
10    (CALL2&JMPIF 1 L18)                 ; FREE
13    L13
13    (LOAD&PUSH 1)
14    (CALL1 3)                           ; INFSIMP
16    (SKIP&RET 2)
18    L18
18    (LOAD 1)
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIGN1 (X) ...)-100|
(CONST 0) = SIGN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN1
8     (SKIP&RET 1)


Disassembly of function SIGN1
(CONST 0) = X
(CONST 1) = INFSIMP*
(CONST 2) = $UND
(CONST 3) = LIMITP
(CONST 4) = "SIGN called on UND."
(CONST 5) = MERROR
(CONST 6) = EXP
(CONST 7) = CONSTP
(CONST 8) = RATNUMP
(CONST 9) = BIGFLOAT
(CONST 10) = $BFLOAT
(CONST 11) = $BFLOATP
(CONST 12) = FLOAT
(CONST 13) = NUMER
(CONST 14) = (NUMER SYMBOL)
(CONST 15) = MEMQ
(CONST 16) = 1.0E-6
(CONST 17) = $SIGNBFLOAT
(CONST 18) = $PNZ
(CONST 19) = SIGN
(CONST 20) = EVENS
(CONST 21) = ODDS
(CONST 22) = MINUS
(CONST 23) = MNUMP
(CONST 24) = M
(CONST 25) = LHS
(CONST 26) = RHS
(CONST 27) = COMPSPLT
(CONST 28) = DCOMPARE
(CONST 29) = ($POS $NEG $ZERO)
(CONST 30) = STRONGP
(CONST 31) = $PN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M $SIGNBFLOAT MINUS EVENS ODDS SIGN RHS LHS EXP LIMITP X)
writes special variables : (MINUS ODDS EVENS SIGN M EXP X)
157 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; INFSIMP*
7     (SETVALUE 0)                        ; X
9     (PUSH)
10    (JMPIFNOTEQTO 2 L20)                ; $UND
13    (GETVALUE 3)                        ; LIMITP
15    (JMPIF L20)
17    (CONST&PUSH 4)                      ; "SIGN called on UND."
18    (CALL1 5)                           ; MERROR
20    L20
20    (NIL&PUSH)
21    (NIL)
22    (BIND 6)                            ; EXP
24    (GETVALUE&PUSH 0)                   ; X
26    (CALL1 7)                           ; CONSTP
28    (STORE 3)
29    (GETVALUE 0)                        ; X
31    (SETVALUE 6)                        ; EXP
33    (PUSH)
34    (CALLS2&JMPIF 8 L59)                ; NUMBERP
37    (GETVALUE&PUSH 0)                   ; X
39    (CALL1&JMPIF 8 L59)                 ; RATNUMP
42    (LOAD&PUSH 3)
43    (JMPIFNOTEQTO 9 L184)               ; BIGFLOAT
47    (GETVALUE&PUSH 0)                   ; X
49    (CALL1 10)                          ; $BFLOAT
51    (STORE 3)
52    L52
52    (PUSH)
53    (CALL1&JMPIFNOT 11 L59)             ; $BFLOATP
56    L56
56    (LOAD 3)
57    (SETVALUE 6)                        ; EXP
59    L59
59    (GETVALUE 0)                        ; X
61    (JMPIFATOM L145)
64    (GETVALUE&PUSH 0)                   ; X
66    (CALL1&JMPIF 23 L145)               ; MNUMP
70    (GETVALUE&PUSH 0)                   ; X
72    (GETVALUE&PUSH 6)                   ; EXP
74    (CALLS2&JMPIFNOT 2 L145)            ; EQUAL
78    (PUSH-NIL 3)
80    (NIL)
81    (BIND 24)                           ; M
83    (NIL)
84    (BIND 25)                           ; LHS
86    (NIL)
87    (BIND 26)                           ; RHS
89    (GETVALUE&PUSH 0)                   ; X
91    (CALL1 27)                          ; COMPSPLT
93    (GETVALUE&PUSH 25)                  ; LHS
95    (GETVALUE&PUSH 26)                  ; RHS
97    (CALL2 28)                          ; DCOMPARE
99    (GETVALUE&PUSH 19)                  ; SIGN
101   (CONST&PUSH 29)                     ; ($POS $NEG $ZERO)
102   (CALL2&JMPIF 15 L139)               ; MEMQ
105   (GETVALUE&PUSH 19)                  ; SIGN
107   (JMPIFEQTO 18 L240)                 ; $PNZ
111   (GETVALUE 19)                       ; SIGN
113   (STORE 11)
115   (GETVALUE 21)                       ; ODDS
117   (STORE 10)
119   (GETVALUE 20)                       ; EVENS
121   (STORE 9)
123   (GETVALUE 22)                       ; MINUS
125   (SETVALUE 24)                       ; M
127   (GETVALUE&PUSH 0)                   ; X
129   (CALL1 19)                          ; SIGN
131   (GETVALUE&PUSH 19)                  ; SIGN
133   (LOAD&PUSH 12)
134   (CALL2&JMPIFNOT 30 L251)            ; STRONGP
138   (T)
139   L139
139   (UNBIND 3)
141   (SKIP 3)
143   (JMPIF L149)
145   L145
145   (GETVALUE&PUSH 6)                   ; EXP
147   (CALL1 19)                          ; SIGN
149   L149
149   (GETVALUE 19)                       ; SIGN
151   (UNBIND1)
152   (SKIP 1)
154   (UNBIND1)
155   (SKIP&RET 2)
157   L157
157   (GETVALUE&PUSH 0)                   ; X
159   (CALL1 13)                          ; NUMER
161   (STORE 3)
162   (JMPIFNOT L59)
165   (PUSH)
166   (CALLS2&JMPIFNOT 8 L59)             ; NUMBERP
170   (JMP L56)
173   L173
173   (GETVALUE&PUSH 0)                   ; X
175   (CALL1 10)                          ; $BFLOAT
177   (STORE 3)
178   (JMPIFNOT L59)
181   (JMP L52)
184   L184
184   (LOAD&PUSH 3)
185   (JMPIFEQTO 12 L157)                 ; FLOAT
188   (LOAD&PUSH 3)
189   (CONST&PUSH 14)                     ; (NUMER SYMBOL)
190   (CALL2&JMPIFNOT 15 L59)             ; MEMQ
194   (GETVALUE&PUSH 0)                   ; X
196   (CALL1 13)                          ; NUMER
198   (STORE 3)
199   (JMPIFNOT L218)
201   (LOAD&PUSH 3)
202   (CALLS2&JMPIFNOT 8 L59)             ; NUMBERP
206   (LOAD 3)
207   (SETVALUE 6)                        ; EXP
209   (PUSH)
210   (CALLS2&PUSH 158)                   ; ABS
212   (CONST&PUSH 16)                     ; 1.0E-6
213   (CALLSR&JMPIFNOT 1 47 L59)          ; <
218   L218
218   (GETVALUE 17)                       ; $SIGNBFLOAT
220   (JMPIF L173)
222   (CONST 18)                          ; $PNZ
223   (SETVALUE 19)                       ; SIGN
225   (NIL)
226   (SETVALUE 20)                       ; EVENS
228   (GETVALUE&PUSH 0)                   ; X
230   (NIL)
231   (CONS)
232   (SETVALUE 21)                       ; ODDS
234   (NIL)
235   (SETVALUE 22)                       ; MINUS
237   (JMP L149)
240   L240
240   (NIL)
241   (JMP L139)
244   L244
244   (LOAD 11)
245   (SETVALUE 19)                       ; SIGN
247   (T)
248   (JMP L139)
251   L251
251   (GETVALUE&PUSH 19)                  ; SIGN
253   (JMPIFNOTEQTO 18 L260)              ; $PNZ
256   (LOAD&PUSH 11)
257   (JMPIFEQTO 31 L244)                 ; $PN
260   L260
260   (LOAD 11)
261   (SETVALUE 19)                       ; SIGN
263   (LOAD 10)
264   (SETVALUE 21)                       ; ODDS
266   (LOAD 9)
267   (SETVALUE 20)                       ; EVENS
269   (GETVALUE 24)                       ; M
271   (SETVALUE 22)                       ; MINUS
273   (T)
274   (JMP L139)


Disassembly of function #:|(DEFUN NUMER (X) ...)-101|
(CONST 0) = NUMER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NUMER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NUMER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NUMER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NUMER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NUMER
8     (SKIP&RET 1)


Disassembly of function NUMER
(CONST 0) = X
(CONST 1) = $RATSIMPEXPONS
(CONST 2) = #(NIL)
(CONST 3) = (#(ERROR 29) 1 . 1)
(CONST 4) = ($EV)
(CONST 5) = ($NUMER $%ENUMER)
(CONST 6) = MEVAL
(CONST 7) = ERRSET
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ERRSET X)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; $RATSIMPEXPONS
6     (NIL&PUSH)
7     (TAGBODY-OPEN 2 L44)                ; #(NIL)
10    (HANDLER-OPEN 3 L29)                ; (#(ERROR 29) 1 . 1)
12    (CONST&PUSH 4)                      ; ($EV)
13    (GETVALUE&PUSH 0)                   ; X
15    (CONST 5)                           ; ($NUMER $%ENUMER)
16    (LIST*&PUSH 2)
18    (CALL1&PUSH 6)                      ; MEVAL
20    (LIST 1)
22    (SKIP 4)
24    (TAGBODY-CLOSE)
25    (SKIP 1)
27    (JMP L51)
29    L29
29    (HANDLER-BEGIN&PUSH)
30    (LOAD 0)
31    (STOREI 0 0 4)
35    (GO-I 0 0 2 0)
40    L40
40    (LOAD&PUSH 4)
41    (CALLSR 0 29)                       ; ERROR
44    L44
44    (GETVALUE 7)                        ; ERRSET
46    (JMPIF L40)
48    (TAGBODY-CLOSE)
49    (SKIP 1)
51    L51
51    (CAR)
52    (UNBIND 2)
54    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CONSTP (X) ...)-102|
(CONST 0) = CONSTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CONSTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CONSTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CONSTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CONSTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CONSTP
8     (SKIP&RET 1)


Disassembly of function CONSTP
(CONST 0) = X
(CONST 1) = FLOAT
(CONST 2) = NUMER
(CONST 3) = ($%PI $%E $%PHI $%GAMMA)
(CONST 4) = MEMQ
(CONST 5) = SYMBOL
(CONST 6) = RAT
(CONST 7) = BIGFLOAT
(CONST 8) = SPECREPP
(CONST 9) = SPECDISREP
(CONST 10) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L X)
writes special variable : (L)
94 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 15 L99)               ; FLOATP
9     (GETVALUE&PUSH 0)                   ; X
11    (CALLS2&JMPIF 8 L102)               ; NUMBERP
15    (GETVALUE&PUSH 0)                   ; X
17    (CALLS2&JMPIF 6 L105)               ; SYMBOLP
21    (GETVALUE 0)                        ; X
23    (CAR)
24    (CAR&PUSH)
25    (JMPIFEQTO 6 L115)                  ; RAT
29    (GETVALUE 0)                        ; X
31    (CAR)
32    (CAR&PUSH)
33    (JMPIFEQTO 7 L118)                  ; BIGFLOAT
37    (GETVALUE&PUSH 0)                   ; X
39    (CALL1&JMPIF 8 L121)                ; SPECREPP
43    (GETVALUE 0)                        ; X
45    (CDR)
46    (BIND 10)                           ; L
48    (NIL&PUSH)
49    (CONST&PUSH 2)                      ; NUMER
50    (GETVALUE 10)                       ; L
52    (JMPIFNOT L92)
54    L54
54    (GETVALUE 10)                       ; L
56    (CAR&PUSH)
57    (JSR L0)
59    (STORE 1)
60    (PUSH)
61    (JMPIFEQTO 1 L130)                  ; FLOAT
65    (LOAD&PUSH 1)
66    (JMPIFEQTO 2 L83)                   ; NUMER
69    (LOAD&PUSH 1)
70    (JMPIFEQTO 7 L136)                  ; BIGFLOAT
73    (LOAD&PUSH 1)
74    (JMPIFNOTEQTO 5 L140)               ; SYMBOL
77    (LOAD&PUSH 0)
78    (JMPIFNOTEQTO 2 L83)                ; NUMER
81    (CONST 5)                           ; SYMBOL
82    (STORE 0)
83    L83
83    (GETVALUE 10)                       ; L
85    (CDR)
86    (SETVALUE 10)                       ; L
88    (GETVALUE 10)                       ; L
90    (JMPIF L54)
92    L92
92    (POP)
93    (SKIP 1)
95    (UNBIND1)
96    L96
96    (UNBIND1)
97    (SKIP&RET 2)
99    L99
99    (CONST 1)                           ; FLOAT
100   (JMP L96)
102   L102
102   (CONST 2)                           ; NUMER
103   (JMP L96)
105   L105
105   (GETVALUE&PUSH 0)                   ; X
107   (CONST&PUSH 3)                      ; ($%PI $%E $%PHI $%GAMMA)
108   (CALL2 4)                           ; MEMQ
110   (JMPIFNOT1 L96)
112   (CONST 5)                           ; SYMBOL
113   (JMP L96)
115   L115
115   (CONST 2)                           ; NUMER
116   (JMP L96)
118   L118
118   (CONST 7)                           ; BIGFLOAT
119   (JMP L96)
121   L121
121   (GETVALUE&PUSH 0)                   ; X
123   (CALL1&PUSH 9)                      ; SPECDISREP
125   (JSR L0)
128   (JMP L96)
130   L130
130   (CONST 1)                           ; FLOAT
131   (SKIP 2)
133   (UNBIND1)
134   (JMP L96)
136   L136
136   (CONST 7)                           ; BIGFLOAT
137   (STORE 0)
138   (JMP L83)
140   L140
140   (NIL)
141   (SKIP 2)
143   (UNBIND1)
144   (JMP L96)


Disassembly of function #:|(DEFMFUN SIGN (X) ...)-103|
(CONST 0) = SIGN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN
8     (SKIP&RET 1)


Disassembly of function SIGN
(CONST 0) = X
(CONST 1) = MNUMP
(CONST 2) = 0
(CONST 3) = RGRP
(CONST 4) = SIGN
(CONST 5) = MINUS
(CONST 6) = ODDS
(CONST 7) = EVENS
(CONST 8) = $%I
(CONST 9) = IMAG-ERR
(CONST 10) = SIGN-ANY
(CONST 11) = MTIMES
(CONST 12) = SIGN-MTIMES
(CONST 13) = MPLUS
(CONST 14) = SIGN-MPLUS
(CONST 15) = MEXPT
(CONST 16) = SIGN-MEXPT
(CONST 17) = %LOG
(CONST 18) = 1
(CONST 19) = SUB*
(CONST 20) = SIGN1
(CONST 21) = MABS
(CONST 22) = SIGN-MABS
(CONST 23) = (%CSC %CSCH)
(CONST 24) = MEMQ
(CONST 25) = RECIP
(CONST 26) = ZL-GET
(CONST 27) = -1
(CONST 28) = POWER*
(CONST 29) = SPECREPP
(CONST 30) = SPECDISREP
(CONST 31) = $POSFUN
(CONST 32) = KINDP
(CONST 33) = SIGN-POSFUN
(CONST 34) = (%SIGNUM %ERF)
(CONST 35) = $ODDFUN
(CONST 36) = $INCREASING
(CONST 37) = SIGN-ODDINC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variables : (EVENS ODDS MINUS SIGN)
128 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L29)                 ; MNUMP
8     (GETVALUE 0)                        ; X
10    (JMPIFCONSP L98)
13    (GETVALUE&PUSH 0)                   ; X
15    (JMPIFNOTEQTO 8 L22)                ; $%I
18    (GETVALUE&PUSH 0)                   ; X
20    (CALL1 9)                           ; IMAG-ERR
22    L22
22    (GETVALUE&PUSH 0)                   ; X
24    (CALL1 10)                          ; SIGN-ANY
26    L26
26    (UNBIND1)
27    (SKIP&RET 2)
29    L29
29    (GETVALUE&PUSH 0)                   ; X
31    (CONST&PUSH 2)                      ; 0
32    (CALL2 3)                           ; RGRP
34    (SETVALUE 4)                        ; SIGN
36    (NIL)
37    (SETVALUE 5)                        ; MINUS
39    (SETVALUE 6)                        ; ODDS
41    (SETVALUE 7)                        ; EVENS
43    (JMP L26)
45    L45
45    (GETVALUE&PUSH 0)                   ; X
47    (CALL1 12)                          ; SIGN-MTIMES
49    (JMP L26)
51    L51
51    (GETVALUE&PUSH 0)                   ; X
53    (CALL1 14)                          ; SIGN-MPLUS
55    (JMP L26)
57    L57
57    (GETVALUE&PUSH 0)                   ; X
59    (CALL1 16)                          ; SIGN-MEXPT
61    (JMP L26)
63    L63
63    (GETVALUE 0)                        ; X
65    (CDR)
66    (CAR&PUSH)
67    (CONST&PUSH 18)                     ; 1
68    (CALL2&PUSH 19)                     ; SUB*
70    (CALL1 20)                          ; SIGN1
72    (JMP L26)
74    L74
74    (GETVALUE&PUSH 0)                   ; X
76    (CALL1 22)                          ; SIGN-MABS
78    (JMP L26)
80    L80
80    (GETVALUE 0)                        ; X
82    (CAR)
83    (CAR&PUSH)
84    (CONST&PUSH 25)                     ; RECIP
85    (CALL2&PUSH 26)                     ; ZL-GET
87    (NIL)
88    (CONS&PUSH)
89    (GETVALUE 0)                        ; X
91    (CDR)
92    (CONS&PUSH)
93    (CONST&PUSH 27)                     ; -1
94    (CALL2 28)                          ; POWER*
96    (JMP L150)
98    L98
98    (GETVALUE 0)                        ; X
100   (CAR)
101   (CAR&PUSH)
102   (JMPIFEQTO 11 L45)                  ; MTIMES
105   (GETVALUE 0)                        ; X
107   (CAR)
108   (CAR&PUSH)
109   (JMPIFEQTO 13 L51)                  ; MPLUS
112   (GETVALUE 0)                        ; X
114   (CAR)
115   (CAR&PUSH)
116   (JMPIFEQTO 15 L57)                  ; MEXPT
119   (GETVALUE 0)                        ; X
121   (CAR)
122   (CAR&PUSH)
123   (JMPIFEQTO 17 L63)                  ; %LOG
126   (GETVALUE 0)                        ; X
128   (CAR)
129   (CAR&PUSH)
130   (JMPIFEQTO 21 L74)                  ; MABS
133   (GETVALUE 0)                        ; X
135   (CAR)
136   (CAR&PUSH)
137   (CONST&PUSH 23)                     ; (%CSC %CSCH)
138   (CALL2&JMPIF 24 L80)                ; MEMQ
141   (GETVALUE&PUSH 0)                   ; X
143   (CALL1&JMPIFNOT 29 L164)            ; SPECREPP
146   (GETVALUE&PUSH 0)                   ; X
148   (CALL1 30)                          ; SPECDISREP
150   L150
150   (PUSH)
151   (JSR L0)
154   (JMP L26)
157   L157
157   (GETVALUE&PUSH 0)                   ; X
159   (CALL1 33)                          ; SIGN-POSFUN
161   (JMP L26)
164   L164
164   (GETVALUE 0)                        ; X
166   (CAR)
167   (CAR&PUSH)
168   (CONST&PUSH 31)                     ; $POSFUN
170   (CALL2&JMPIF 32 L157)               ; KINDP
173   (GETVALUE 0)                        ; X
175   (CAR)
176   (CAR&PUSH)
177   (CONST&PUSH 34)                     ; (%SIGNUM %ERF)
179   (CALL2&JMPIF 24 L202)               ; MEMQ
182   (GETVALUE 0)                        ; X
184   (CAR)
185   (CAR&PUSH)
186   (CONST&PUSH 35)                     ; $ODDFUN
188   (CALL2&JMPIFNOT 32 L22)             ; KINDP
192   (GETVALUE 0)                        ; X
194   (CAR)
195   (CAR&PUSH)
196   (CONST&PUSH 36)                     ; $INCREASING
198   (CALL2&JMPIFNOT 32 L22)             ; KINDP
202   L202
202   (GETVALUE&PUSH 0)                   ; X
204   (CALL1 37)                          ; SIGN-ODDINC
206   (JMP L26)


Disassembly of function #:|(DEFUN SIGN-ANY (X) ...)-104|
(CONST 0) = SIGN-ANY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN-ANY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-ANY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN-ANY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN-ANY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN-ANY
8     (SKIP&RET 1)


Disassembly of function SIGN-ANY
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = DCOMPARE
(CONST 3) = $ASSUME_POS
(CONST 4) = SIGN
(CONST 5) = ($PNZ $PZ $PN)
(CONST 6) = MEMQ
(CONST 7) = $ASSUME_POS_PRED
(CONST 8) = *X*
(CONST 9) = (($ASSUME_POS_PRED) *X*)
(CONST 10) = IS
(CONST 11) = MAPATOM
(CONST 12) = $POS
(CONST 13) = MINUS
(CONST 14) = EVENS
(CONST 15) = ($POS $NEG $ZERO)
(CONST 16) = ODDS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ASSUME_POS_PRED SIGN $ASSUME_POS X)
writes special variables : (ODDS EVENS MINUS SIGN)
44 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 0
6     (CALL2 2)                           ; DCOMPARE
8     (GETVALUE 3)                        ; $ASSUME_POS
10    (JMPIFNOT L30)
12    (GETVALUE&PUSH 4)                   ; SIGN
14    (CONST&PUSH 5)                      ; ($PNZ $PZ $PN)
15    (CALL2&JMPIFNOT 6 L30)              ; MEMQ
18    (GETVALUE 7)                        ; $ASSUME_POS_PRED
20    (JMPIF L48)
22    (GETVALUE&PUSH 0)                   ; X
24    (CALL1&JMPIFNOT 11 L30)             ; MAPATOM
27    L27
27    (CONST 12)                          ; $POS
28    (SETVALUE 4)                        ; SIGN
30    L30
30    (NIL)
31    (SETVALUE 13)                       ; MINUS
33    (SETVALUE 14)                       ; EVENS
35    (GETVALUE&PUSH 4)                   ; SIGN
37    (CONST&PUSH 15)                     ; ($POS $NEG $ZERO)
38    (CALL2 6)                           ; MEMQ
40    (NOT)
41    (JMPIF L60)
43    (SETVALUE 16)                       ; ODDS
45    L45
45    (UNBIND1)
46    (SKIP&RET 2)
48    L48
48    (GETVALUE 0)                        ; X
50    (BIND 8)                            ; *X*
52    (CONST&PUSH 9)                      ; (($ASSUME_POS_PRED) *X*)
53    (CALL1 10)                          ; IS
55    (UNBIND1)
56    (JMPIFNOT L30)
58    (JMP L27)
60    L60
60    (GETVALUE&PUSH 0)                   ; X
62    (NIL)
63    (CONS)
64    (SETVALUE 16)                       ; ODDS
66    (JMP L45)


Disassembly of function #:|(DEFUN SIGN-MTIMES (X) ...)-105|
(CONST 0) = SIGN-MTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN-MTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-MTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN-MTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN-MTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN-MTIMES
8     (SKIP&RET 1)


Disassembly of function SIGN-MTIMES
(CONST 0) = X
(CONST 1) = $POS
(CONST 2) = M
(CONST 3) = SIGN1
(CONST 4) = SIGN
(CONST 5) = $ZERO
(CONST 6) = $NEG
(CONST 7) = FLIP
(CONST 8) = MINUS
(CONST 9) = ODDS
(CONST 10) = EVENS
(CONST 11) = $PZ
(CONST 12) = $NZ
(CONST 13) = $PNZ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EVENS ODDS MINUS M SIGN X)
writes special variables : (EVENS ODDS MINUS SIGN M X)
99 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (SETVALUE 0)                        ; X
8     (CONST&PUSH 1)                      ; $POS
9     (NIL)
10    (BIND 2)                            ; M
12    (PUSH-NIL 2)
14    (GETVALUE 0)                        ; X
16    (JMPIFNOT L111)
19    L19
19    (GETVALUE 0)                        ; X
21    (CAR&PUSH)
22    (CALL1 3)                           ; SIGN1
24    (GETVALUE&PUSH 4)                   ; SIGN
26    (JMPIFEQTO 5 L132)                  ; $ZERO
30    (GETVALUE&PUSH 4)                   ; SIGN
32    (JMPIFEQTO 1 L101)                  ; $POS
36    (GETVALUE&PUSH 4)                   ; SIGN
38    (JMPIFEQTO 6 L140)                  ; $NEG
42    (GETVALUE&PUSH 2)                   ; M
44    (GETVALUE 8)                        ; MINUS
46    (EQ)
47    (NOT)
48    (SETVALUE 2)                        ; M
50    (GETVALUE&PUSH 9)                   ; ODDS
52    (LOAD&PUSH 2)
53    (CALLSR&STORE 2 35 1)               ; NCONC
57    (GETVALUE&PUSH 10)                  ; EVENS
59    (LOAD&PUSH 1)
60    (CALLSR&STORE 2 35 0)               ; NCONC
64    (LOAD&PUSH 5)
65    (GETVALUE 4)                        ; SIGN
67    (JMPIFEQ L101)
69    (LOAD&PUSH 5)
70    (JMPIFEQTO 1 L151)                  ; $POS
74    (LOAD&PUSH 5)
75    (JMPIFEQTO 6 L156)                  ; $NEG
79    (LOAD&PUSH 5)
80    (JMPIFNOTEQTO 11 L89)               ; $PZ
83    (GETVALUE&PUSH 4)                   ; SIGN
85    (JMPIFEQTO 12 L163)                 ; $NZ
89    L89
89    (LOAD&PUSH 5)
90    (JMPIFNOTEQTO 12 L99)               ; $NZ
93    (GETVALUE&PUSH 4)                   ; SIGN
95    (JMPIFEQTO 11 L163)                 ; $PZ
99    L99
99    (CONST 13)                          ; $PNZ
100   (STORE 5)
101   L101
101   (GETVALUE 0)                        ; X
103   (CDR)
104   (SETVALUE 0)                        ; X
106   (GETVALUE 0)                        ; X
108   (JMPIF L19)
111   L111
111   (LOAD 5)
112   (SETVALUE 4)                        ; SIGN
114   (GETVALUE 2)                        ; M
116   (SETVALUE 8)                        ; MINUS
118   (LOAD 1)
119   (SETVALUE 9)                        ; ODDS
121   (LOAD 0)
122   (SETVALUE 10)                       ; EVENS
124   (SKIP 2)
126   (UNBIND1)
127   (SKIP 1)
129   L129
129   (UNBIND1)
130   (SKIP&RET 2)
132   L132
132   (T)
133   (SKIP 2)
135   (UNBIND1)
136   (SKIP 1)
138   (JMP L129)
140   L140
140   (LOAD&PUSH 5)
141   (CALL1 7)                           ; FLIP
143   (STORE 5)
144   (GETVALUE 2)                        ; M
146   (NOT)
147   (SETVALUE 2)                        ; M
149   (JMP L101)
151   L151
151   (GETVALUE 4)                        ; SIGN
153   (STORE 5)
154   (JMP L101)
156   L156
156   (GETVALUE&PUSH 4)                   ; SIGN
158   (CALL1 7)                           ; FLIP
160   (STORE 5)
161   (JMP L101)
163   L163
163   (CONST 12)                          ; $NZ
164   (STORE 5)
165   (JMP L101)


Disassembly of function #:|(DEFUN SIGN-MPLUS (X &AUX S ...) ...)-106|
(CONST 0) = SIGN-MPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN-MPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-MPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN-MPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN-MPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN-MPLUS
8     (SKIP&RET 1)


Disassembly of function SIGN-MPLUS
(CONST 0) = X
(CONST 1) = M
(CONST 2) = SIGNDIFF
(CONST 3) = SIGN
(CONST 4) = EVENS
(CONST 5) = ODDS
(CONST 6) = MINUS
(CONST 7) = SIGNSUM
(CONST 8) = STRONGP
(CONST 9) = FACTORED
(CONST 10) = SIGNFACTOR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M FACTORED MINUS ODDS EVENS SIGN X)
writes special variables : (MINUS ODDS EVENS SIGN M)
58 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 3)
5     (NIL)
6     (BIND 1)                            ; M
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1 2)                           ; SIGNDIFF
12    (JMPIF1 L69)
14    (GETVALUE 3)                        ; SIGN
16    (STORE 5)
17    (GETVALUE 4)                        ; EVENS
19    (STORE 3)
20    (GETVALUE 5)                        ; ODDS
22    (STORE 4)
23    (GETVALUE 6)                        ; MINUS
25    (SETVALUE 1)                        ; M
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL1 7)                           ; SIGNSUM
31    (JMPIF1 L69)
33    (LOAD&PUSH 5)
34    (GETVALUE&PUSH 3)                   ; SIGN
36    (CALL2&JMPIFNOT 8 L75)              ; STRONGP
39    (GETVALUE 9)                        ; FACTORED
41    (JMPIF L49)
43    L43
43    (GETVALUE&PUSH 0)                   ; X
45    (CALL1 10)                          ; SIGNFACTOR
47    (JMPIF1 L69)
49    L49
49    (GETVALUE&PUSH 3)                   ; SIGN
51    (LOAD&PUSH 6)
52    (CALL2 8)                           ; STRONGP
54    (JMPIF1 L69)
56    (LOAD 5)
57    (SETVALUE 3)                        ; SIGN
59    (LOAD 3)
60    (SETVALUE 4)                        ; EVENS
62    (LOAD 4)
63    (SETVALUE 5)                        ; ODDS
65    (GETVALUE 1)                        ; M
67    (SETVALUE 6)                        ; MINUS
69    L69
69    (UNBIND1)
70    (SKIP 3)
72    (UNBIND1)
73    (SKIP&RET 2)
75    L75
75    (GETVALUE 3)                        ; SIGN
77    (STORE 5)
78    (GETVALUE 4)                        ; EVENS
80    (STORE 3)
81    (GETVALUE 5)                        ; ODDS
83    (STORE 4)
84    (GETVALUE 6)                        ; MINUS
86    (SETVALUE 1)                        ; M
88    (GETVALUE 9)                        ; FACTORED
90    (JMPIFNOT L43)
92    (JMP L49)


Disassembly of function #:|(DEFUN SIGNDIFF (X) ...)-107|
(CONST 0) = SIGNDIFF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNDIFF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNDIFF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNDIFF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNDIFF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNDIFF
8     (SKIP&RET 1)


Disassembly of function SIGNDIFF
(CONST 0) = X
(CONST 1) = $PNZ
(CONST 2) = SIGN
(CONST 3) = COMPSPLT
(CONST 4) = LHS
(CONST 5) = MPLUSP
(CONST 6) = RHS
(CONST 7) = 0
(CONST 8) = NEGP
(CONST 9) = NEG
(CONST 10) = CONSTP
(CONST 11) = (NUMER SYMBOL)
(CONST 12) = MEMQ
(CONST 13) = NUMER
(CONST 14) = DCOMPARE
(CONST 15) = ($POS $NEG $ZERO)
(CONST 16) = $INCREASING
(CONST 17) = KINDP
(CONST 18) = SUB
(CONST 19) = MABS
(CONST 20) = ALIKE1
(CONST 21) = $PZ
(CONST 22) = MINUS
(CONST 23) = ODDS
(CONST 24) = EVENS
(CONST 25) = SIGNDIFF-SPECIAL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN RHS LHS X)
writes special variables : (EVENS ODDS MINUS LHS RHS SIGN)
125 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST 1)                           ; $PNZ
4     (SETVALUE 2)                        ; SIGN
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 3)                           ; COMPSPLT
10    (GETVALUE&PUSH 4)                   ; LHS
12    (CALL1&JMPIFNOT 5 L57)              ; MPLUSP
15    (GETVALUE&PUSH 6)                   ; RHS
17    (JMPIFNOTEQTO 7 L57)                ; 0
20    (GETVALUE 4)                        ; LHS
22    (CDR)
23    (CDR)
24    (CDR)
25    (JMPIF L57)
27    (GETVALUE 4)                        ; LHS
29    (CDR)
30    (CAR&PUSH)
31    (CALL1&JMPIFNOT 8 L57)              ; NEGP
34    (GETVALUE 4)                        ; LHS
36    (CDR)
37    (CDR)
38    (CAR&PUSH)
39    (CALL1&JMPIF 8 L57)                 ; NEGP
42    (GETVALUE 4)                        ; LHS
44    (CDR)
45    (CAR&PUSH)
46    (CALL1 9)                           ; NEG
48    (SETVALUE 6)                        ; RHS
50    (GETVALUE 4)                        ; LHS
52    (CDR)
53    (CDR)
54    (CAR)
55    (SETVALUE 4)                        ; LHS
57    L57
57    (NIL&PUSH)
58    (GETVALUE&PUSH 6)                   ; RHS
60    (JMPIFEQTO 7 L165)                  ; 0
64    (GETVALUE&PUSH 4)                   ; LHS
66    (CALL1&JMPIF 5 L165)                ; MPLUSP
70    (GETVALUE&PUSH 6)                   ; RHS
72    (CALL1&PUSH 10)                     ; CONSTP
74    (CONST&PUSH 11)                     ; (NUMER SYMBOL)
75    (CALL2&JMPIFNOT 12 L90)             ; MEMQ
78    (GETVALUE&PUSH 6)                   ; RHS
80    (CALL1 13)                          ; NUMER
82    (STORE 0)
83    (PUSH)
84    (CALLS2&JMPIFNOT 8 L90)             ; NUMBERP
87    (LOAD 0)
88    (SETVALUE 6)                        ; RHS
90    L90
90    (GETVALUE&PUSH 6)                   ; RHS
92    (CALL1&JMPIF 5 L165)                ; MPLUSP
96    (GETVALUE&PUSH 4)                   ; LHS
98    (GETVALUE&PUSH 6)                   ; RHS
100   (CALL2&JMPIFNOT 14 L111)            ; DCOMPARE
103   (GETVALUE&PUSH 2)                   ; SIGN
105   (CONST&PUSH 15)                     ; ($POS $NEG $ZERO)
106   (CALL2 12)                          ; MEMQ
108   (JMPIF1 L200)
111   L111
111   (GETVALUE 4)                        ; LHS
113   (JMPIFATOM L137)
115   (GETVALUE 6)                        ; RHS
117   (JMPIFATOM L137)
119   (GETVALUE 4)                        ; LHS
121   (CAR)
122   (CAR&PUSH)
123   (GETVALUE 6)                        ; RHS
125   (CAR)
126   (CAR)
127   (JMPIFNOTEQ L137)
129   (GETVALUE 4)                        ; LHS
131   (CAR)
132   (CAR&PUSH)
133   (CONST&PUSH 16)                     ; $INCREASING
134   (CALL2&JMPIF 17 L170)               ; KINDP
137   L137
137   (GETVALUE 4)                        ; LHS
139   (JMPIFATOM L157)
141   (GETVALUE 4)                        ; LHS
143   (CAR)
144   (CAR&PUSH)
145   (JMPIFNOTEQTO 19 L157)              ; MABS
148   (GETVALUE 4)                        ; LHS
150   (CDR)
151   (CAR&PUSH)
152   (GETVALUE&PUSH 6)                   ; RHS
154   (CALL2&JMPIF 20 L184)               ; ALIKE1
157   L157
157   (GETVALUE&PUSH 4)                   ; LHS
159   (GETVALUE&PUSH 6)                   ; RHS
161   (CALL2 25)                          ; SIGNDIFF-SPECIAL
163   (JMPIF1 L200)
165   L165
165   (NIL)
166   (SKIP 1)
168   (JMP L202)
170   L170
170   (GETVALUE 4)                        ; LHS
172   (CDR)
173   (CAR&PUSH)
174   (GETVALUE 6)                        ; RHS
176   (CDR)
177   (CAR&PUSH)
178   (CALL2&PUSH 18)                     ; SUB
180   (CALL1 2)                           ; SIGN
182   (JMP L195)
184   L184
184   (CONST 21)                          ; $PZ
186   (SETVALUE 2)                        ; SIGN
188   (NIL)
189   (SETVALUE 22)                       ; MINUS
191   (SETVALUE 23)                       ; ODDS
193   (SETVALUE 24)                       ; EVENS
195   L195
195   (T)
196   (SKIP 1)
198   (JMP L202)
200   L200
200   (SKIP 1)
202   L202
202   (UNBIND1)
203   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIGNDIFF-SPECIAL (XLHS XRHS) ...)-108|
(CONST 0) = SIGNDIFF-SPECIAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNDIFF-SPECIAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNDIFF-SPECIAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNDIFF-SPECIAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNDIFF-SPECIAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNDIFF-SPECIAL
8     (SKIP&RET 1)


Disassembly of function SIGNDIFF-SPECIAL
(CONST 0) = SIGN*
(CONST 1) = $POS
(CONST 2) = MEXPTP
(CONST 3) = 1
(CONST 4) = SUB
(CONST 5) = ($POS $ZERO $PZ)
(CONST 6) = MEMQ
(CONST 7) = ALIKE1
(CONST 8) = SIGN
(CONST 9) = MINUS
(CONST 10) = ODDS
(CONST 11) = EVENS
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (EVENS ODDS MINUS SIGN)
79 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 8 L18)             ; NUMBERP
4     (LOAD&PUSH 1)
5     (CALLS2&JMPIFNOT 147 L18)           ; MINUSP
8     (LOAD 2)
9     (JMPIFATOM L18)
11    (LOAD&PUSH 2)
12    (CALL1&PUSH 0)                      ; SIGN*
14    (JMPIFEQTO 1 L100)                  ; $POS
18    L18
18    (LOAD&PUSH 2)
19    (CALL1&JMPIFNOT 2 L52)              ; MEXPTP
22    (CONST&PUSH 3)                      ; 1
23    (LOAD&PUSH 2)
24    (CALL2&PUSH 4)                      ; SUB
26    (CALL1&PUSH 0)                      ; SIGN*
28    (CONST&PUSH 5)                      ; ($POS $ZERO $PZ)
29    (CALL2&JMPIFNOT 6 L52)              ; MEMQ
32    (LOAD 2)
33    (CDR)
34    (CDR)
35    (CAR&PUSH)
36    (CALL1&PUSH 0)                      ; SIGN*
38    (JMPIFNOTEQTO 1 L52)                ; $POS
41    (LOAD 2)
42    (CDR)
43    (CAR&PUSH)
44    (CONST&PUSH 3)                      ; 1
45    (CALL2&PUSH 4)                      ; SUB
47    (CALL1&PUSH 0)                      ; SIGN*
49    (JMPIFEQTO 1 L100)                  ; $POS
52    L52
52    (LOAD&PUSH 2)
53    (CALL1 2)                           ; MEXPTP
55    (JMPIFNOT1 L113)
57    (LOAD&PUSH 1)
58    (CALL1 2)                           ; MEXPTP
60    (JMPIFNOT1 L113)
62    (LOAD 2)
63    (CDR)
64    (CAR&PUSH)
65    (LOAD 2)
66    (CDR)
67    (CAR&PUSH)
68    (CALL2 7)                           ; ALIKE1
70    (JMPIFNOT1 L113)
72    (LOAD 2)
73    (CDR)
74    (CAR&PUSH)
75    (CONST&PUSH 3)                      ; 1
76    (CALL2&PUSH 4)                      ; SUB
78    (CALL1&PUSH 0)                      ; SIGN*
80    (CONST 1)                           ; $POS
81    (EQ)
82    (JMPIFNOT1 L113)
84    (LOAD 2)
85    (CDR)
86    (CDR)
87    (CAR&PUSH)
88    (LOAD 2)
89    (CDR)
90    (CDR)
91    (CAR&PUSH)
92    (CALL2&PUSH 4)                      ; SUB
94    (CALL1&PUSH 0)                      ; SIGN*
96    (CONST 1)                           ; $POS
97    (EQ)
98    (JMPIFNOT1 L113)
100   L100
100   (CONST 1)                           ; $POS
101   (SETVALUE 8)                        ; SIGN
103   (NIL)
104   (SETVALUE 9)                        ; MINUS
106   (SETVALUE 10)                       ; ODDS
108   (SETVALUE 11)                       ; EVENS
110   (T)
111   (SKIP&RET 3)
113   L113
113   (SKIP&RET 3)


Disassembly of function #:|(DEFUN SIGNSUM (X) ...)-109|
(CONST 0) = SIGNSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNSUM
8     (SKIP&RET 1)


Disassembly of function SIGNSUM
(CONST 0) = X
(CONST 1) = L
(CONST 2) = $ZERO
(CONST 3) = SIGN
(CONST 4) = SUB
(CONST 5) = $PN
(CONST 6) = $POS
(CONST 7) = $PZ
(CONST 8) = $NEG
(CONST 9) = $NZ
(CONST 10) = ($PZ $POS)
(CONST 11) = MEMQ
(CONST 12) = ($ZERO $PZ)
(CONST 13) = ($NZ $NEG)
(CONST 14) = ($ZERO $NZ)
(CONST 15) = $PNZ
(CONST 16) = ODDS
(CONST 17) = EVENS
(CONST 18) = MINUS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN L X)
writes special variables : (EVENS ODDS MINUS SIGN L X)
92 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (BIND 1)                            ; L
8     (CONST&PUSH 2)                      ; $ZERO
9     (GETVALUE 1)                        ; L
11    (JMPIFNOT L106)
14    L14
14    (GETVALUE 1)                        ; L
16    (CAR&PUSH)
17    (CALL1 3)                           ; SIGN
19    (GETVALUE&PUSH 3)                   ; SIGN
21    (JMPIFNOTEQTO 2 L35)                ; $ZERO
24    (GETVALUE&PUSH 0)                   ; X
26    (GETVALUE 1)                        ; L
28    (CAR&PUSH)
29    (CALL2 4)                           ; SUB
31    (SETVALUE 0)                        ; X
33    (JMPIF L96)
35    L35
35    (LOAD&PUSH 0)
36    (GETVALUE 3)                        ; SIGN
38    (JMPIFNOTEQ L44)
40    (LOAD&PUSH 0)
41    (JMPIFNOTEQTO 5 L96)                ; $PN
44    L44
44    (LOAD&PUSH 0)
45    (JMPIFNOTEQTO 6 L53)                ; $POS
48    (GETVALUE&PUSH 3)                   ; SIGN
50    (JMPIFEQTO 7 L96)                   ; $PZ
53    L53
53    (LOAD&PUSH 0)
54    (JMPIFNOTEQTO 8 L62)                ; $NEG
57    (GETVALUE&PUSH 3)                   ; SIGN
59    (JMPIFEQTO 9 L96)                   ; $NZ
62    L62
62    (GETVALUE&PUSH 3)                   ; SIGN
64    (CONST&PUSH 10)                     ; ($PZ $POS)
65    (CALL2&JMPIFNOT 11 L73)             ; MEMQ
68    (LOAD&PUSH 0)
69    (CONST&PUSH 12)                     ; ($ZERO $PZ)
70    (CALL2&JMPIF 11 L93)                ; MEMQ
73    L73
73    (GETVALUE&PUSH 3)                   ; SIGN
75    (CONST&PUSH 13)                     ; ($NZ $NEG)
76    (CALL2&JMPIFNOT 11 L84)             ; MEMQ
79    (LOAD&PUSH 0)
80    (CONST&PUSH 14)                     ; ($ZERO $NZ)
81    (CALL2&JMPIF 11 L93)                ; MEMQ
84    L84
84    (GETVALUE&PUSH 3)                   ; SIGN
86    (JMPIFNOTEQTO 5 L128)               ; $PN
89    (LOAD&PUSH 0)
90    (JMPIFNOTEQTO 2 L128)               ; $ZERO
93    L93
93    (GETVALUE 3)                        ; SIGN
95    (STORE 0)
96    L96
96    (GETVALUE 1)                        ; L
98    (CDR)
99    (SETVALUE 1)                        ; L
101   (GETVALUE 1)                        ; L
103   (JMPIF L14)
106   L106
106   (LOAD 0)
107   (SETVALUE 3)                        ; SIGN
109   (NIL)
110   (SETVALUE 18)                       ; MINUS
112   (GETVALUE&PUSH 0)                   ; X
114   (LIST 1)
116   (SETVALUE 16)                       ; ODDS
118   (NIL)
119   (SETVALUE 17)                       ; EVENS
121   (T)
122   (SKIP 1)
124   (UNBIND1)
125   L125
125   (UNBIND1)
126   (SKIP&RET 2)
128   L128
128   (CONST 15)                          ; $PNZ
129   (SETVALUE 3)                        ; SIGN
131   (GETVALUE&PUSH 0)                   ; X
133   (LIST 1)
135   (SETVALUE 16)                       ; ODDS
137   (NIL)
138   (SETVALUE 17)                       ; EVENS
140   (SETVALUE 18)                       ; MINUS
142   (SKIP 1)
144   (UNBIND1)
145   (JMP L125)


Disassembly of function #:|(DEFUN SIGNFACTOR (X) ...)-110|
(CONST 0) = SIGNFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGNFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGNFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGNFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGNFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGNFACTOR
8     (SKIP&RET 1)


Disassembly of function SIGNFACTOR
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = FACTORED
(CONST 3) = FACTOR-IF-SMALL
(CONST 4) = MPLUSP
(CONST 5) = CONSSIZE
(CONST 6) = 50
(CONST 7) = $PNZ
(CONST 8) = SIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variables : (SIGN Y)
25 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; Y
6     (T)
7     (BIND 2)                            ; FACTORED
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 3)                           ; FACTOR-IF-SMALL
13    (SETVALUE 1)                        ; Y
15    (PUSH)
16    (CALL1&JMPIF 4 L36)                 ; MPLUSP
19    (GETVALUE&PUSH 1)                   ; Y
21    (CALL1&PUSH 5)                      ; CONSSIZE
23    (CONST&PUSH 6)                      ; 50
24    (CALLSR&JMPIF 1 48 L36)             ; >
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALL1 8)                           ; SIGN
32    L32
32    (UNBIND 3)
34    (SKIP&RET 2)
36    L36
36    (CONST 7)                           ; $PNZ
37    (SETVALUE 8)                        ; SIGN
39    (NIL)
40    (JMP L32)


Disassembly of function #:|(DEFUN FACTOR-IF-SMALL (X) ...)-111|
(CONST 0) = FACTOR-IF-SMALL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTOR-IF-SMALL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTOR-IF-SMALL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTOR-IF-SMALL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTOR-IF-SMALL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTOR-IF-SMALL
8     (SKIP&RET 1)


Disassembly of function FACTOR-IF-SMALL
(CONST 0) = X
(CONST 1) = CONSSIZE
(CONST 2) = 51
(CONST 3) = $RATPRINT
(CONST 4) = FACTOR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&PUSH 1)                      ; CONSSIZE
7     (CONST&PUSH 2)                      ; 51
8     (CALLSR&JMPIF 1 47 L17)             ; <
12    (GETVALUE 0)                        ; X
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)
17    L17
17    (NIL)
18    (BIND 3)                            ; $RATPRINT
20    (GETVALUE&PUSH 0)                   ; X
22    (CALL1 4)                           ; FACTOR
24    (UNBIND1)
25    (JMP L14)


Disassembly of function #:|(DEFMVAR COMPLEXSIGN NIL)-112-1|
(CONST 0) = COMPLEXSIGN
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLEXSIGN
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; COMPLEXSIGN
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR COMPLEXSIGN NIL)-112-2|
(CONST 0) = (SPECIAL COMPLEXSIGN)
(CONST 1) = COMPLEXSIGN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL COMPLEXSIGN)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; COMPLEXSIGN
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; COMPLEXSIGN
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; COMPLEXSIGN
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN SIGN-MEXPT (X) ...)-113|
(CONST 0) = SIGN-MEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN-MEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-MEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN-MEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN-MEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN-MEXPT
8     (SKIP&RET 1)


Disassembly of function SIGN-MEXPT
(CONST 0) = X
(CONST 1) = SIGN1
(CONST 2) = EVOD
(CONST 3) = $ZERO
(CONST 4) = ($ZERO $NEG)
(CONST 5) = MEMQ
(CONST 6) = DBZS-ERR
(CONST 7) = $POS
(CONST 8) = SIGN
(CONST 9) = 1
(CONST 10) = SUB
(CONST 11) = TDZERO
(CONST 12) = TDPOS
(CONST 13) = $EVEN
(CONST 14) = $NEG
(CONST 15) = MINUS
(CONST 16) = EVENS
(CONST 17) = ODDS
(CONST 18) = TDPN
(CONST 19) = ($PN $NEG)
(CONST 20) = $PZ
(CONST 21) = ($NEG $NZ)
(CONST 22) = ($NZ $PZ $PNZ)
(CONST 23) = $PNZ
(CONST 24) = $PN
(CONST 25) = ($PZ $NZ $PNZ)
(CONST 26) = RATNUMP
(CONST 27) = MEVENP
(CONST 28) = ($PN $NEG)
(CONST 29) = ($PNZ $NZ)
(CONST 30) = COMPLEXSIGN
(CONST 31) = IMAG-ERR
(CONST 32) = $NZ
(CONST 33) = TDPZ
(CONST 34) = TDNEG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (COMPLEXSIGN EVENS ODDS X)
writes special variables : (ODDS EVENS MINUS SIGN)
248 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CDR)
7     (CAR&PUSH)
8     (GETVALUE 0)                        ; X
10    (CDR)
11    (CAR&PUSH)
12    (LOAD&PUSH 1)
13    (CALL1&PUSH 1)                      ; SIGN1
15    (LOAD&PUSH 1)
16    (CALL1&PUSH 1)                      ; SIGN1
18    (LOAD&PUSH 3)
19    (CALL1&PUSH 2)                      ; EVOD
21    (LOAD&PUSH 1)
22    (JMPIFNOTEQTO 3 L30)                ; $ZERO
25    (LOAD&PUSH 2)
26    (CONST&PUSH 4)                      ; ($ZERO $NEG)
27    (CALL2&JMPIF 5 L82)                 ; MEMQ
30    L30
30    (LOAD&PUSH 2)
31    (JMPIFEQTO 3 L91)                   ; $ZERO
34    (LOAD&PUSH 1)
35    (CONST 7)                           ; $POS
36    (EQ)
37    (JMPIF1 L391)
40    (LOAD&PUSH 1)
41    (JMPIFEQTO 3 L106)                  ; $ZERO
44    (LOAD&PUSH 0)
45    (JMPIFNOTEQTO 13 L293)              ; $EVEN
49    (LOAD&PUSH 2)
50    (JMPIFEQTO 14 L114)                 ; $NEG
53    (LOAD&PUSH 1)
54    (CONST&PUSH 19)                     ; ($PN $NEG)
55    (CALL2&JMPIF 5 L136)                ; MEMQ
59    (CONST 20)                          ; $PZ
60    L60
60    (SETVALUE 8)                        ; SIGN
62    (NIL)
63    (SETVALUE 15)                       ; MINUS
65    (GETVALUE&PUSH 17)                  ; ODDS
67    (GETVALUE&PUSH 16)                  ; EVENS
69    (CALLSR 2 35)                       ; NCONC
72    (SETVALUE 16)                       ; EVENS
74    (NIL)
75    (SETVALUE 17)                       ; ODDS
77    (SKIP 5)
79    (JMP L393)
82    L82
82    (GETVALUE&PUSH 0)                   ; X
84    (CALL1 6)                           ; DBZS-ERR
86    (SKIP 5)
88    (JMP L393)
91    L91
91    (CONST 7)                           ; $POS
92    (SETVALUE 8)                        ; SIGN
94    (GETVALUE&PUSH 0)                   ; X
96    (CONST&PUSH 9)                      ; 1
97    (CALL2&PUSH 10)                     ; SUB
99    (CALL1 11)                          ; TDZERO
101   (SKIP 5)
103   (JMP L393)
106   L106
106   (LOAD&PUSH 4)
107   (CALL1 12)                          ; TDPOS
109   (SKIP 5)
111   (JMP L393)
114   L114
114   (CONST 7)                           ; $POS
115   (SETVALUE 8)                        ; SIGN
117   (NIL)
118   (SETVALUE 15)                       ; MINUS
120   (LOAD&PUSH 3)
121   (NIL)
122   (CONS)
123   (SETVALUE 16)                       ; EVENS
125   (NIL)
126   (SETVALUE 17)                       ; ODDS
128   (LOAD&PUSH 3)
129   (CALL1 18)                          ; TDPN
131   (SKIP 5)
133   (JMP L393)
136   L136
136   (CONST 7)                           ; $POS
137   (JMP L60)
140   L140
140   (CONST 24)                          ; $PN
142   (JMP L385)
145   L145
145   (CONST 7)                           ; $POS
146   (JMP L385)
149   L149
149   (CONST 14)                          ; $NEG
150   (JMP L385)
153   L153
153   (LOAD&PUSH 3)
154   (CALL1 18)                          ; TDPN
156   (LOAD&PUSH 1)
157   (JMPIFEQTO 23 L140)                 ; $PNZ
160   (LOAD&PUSH 1)
161   (JMPIFEQTO 20 L145)                 ; $PZ
164   (LOAD&PUSH 2)
165   (JMPIFEQTO 14 L149)                 ; $NEG
168   (CONST 24)                          ; $PN
170   (JMP L385)
173   L173
173   (GETVALUE&PUSH 0)                   ; X
175   (NIL)
176   (CONS)
177   (SETVALUE 17)                       ; ODDS
179   (CONST 24)                          ; $PN
181   (JMP L385)
184   L184
184   (LOAD&PUSH 1)
185   (JMPIFEQTO 14 L173)                 ; $NEG
188   (NIL)
189   (SKIP 5)
191   (JMP L393)
194   L194
194   (CONST 7)                           ; $POS
195   (STORE 1)
196   (JMP L210)
198   L198
198   (LOAD&PUSH 1)
199   (CONST&PUSH 28)                     ; ($PN $NEG)
200   (CALL2&JMPIF 5 L194)                ; MEMQ
203   (LOAD&PUSH 1)
204   (CONST&PUSH 29)                     ; ($PNZ $NZ)
205   (CALL2&JMPIFNOT 5 L210)             ; MEMQ
208   (CONST 20)                          ; $PZ
209   (STORE 1)
210   L210
210   (GETVALUE&PUSH 17)                  ; ODDS
212   (GETVALUE&PUSH 16)                  ; EVENS
214   (CALLSR 2 35)                       ; NCONC
217   (SETVALUE 16)                       ; EVENS
219   (NIL)
220   (SETVALUE 17)                       ; ODDS
222   (SETVALUE 15)                       ; MINUS
224   (JMP L360)
227   L227
227   (CONST 23)                          ; $PNZ
229   (STORE 2)
230   (STORE 1)
231   (JMP L360)
234   L234
234   (GETVALUE&PUSH 0)                   ; X
236   (CALL1 31)                          ; IMAG-ERR
238   (JMP L360)
241   L241
241   (CONST 7)                           ; $POS
242   (STORE 1)
243   (LOAD&PUSH 3)
244   (CALL1 12)                          ; TDPOS
246   (JMP L360)
249   L249
249   (CONST 3)                           ; $ZERO
250   (STORE 1)
251   (LOAD&PUSH 3)
252   (CALL1 11)                          ; TDZERO
254   (JMP L360)
257   L257
257   (GETVALUE&PUSH 0)                   ; X
259   (CALL1 6)                           ; DBZS-ERR
261   (LOAD 1)
262   (JMP L385)
265   L265
265   (CONST 7)                           ; $POS
266   (STORE 1)
267   (LOAD&PUSH 3)
268   (CALL1 12)                          ; TDPOS
270   (LOAD 1)
271   (JMP L385)
274   L274
274   (CONST 14)                          ; $NEG
275   (STORE 1)
276   (LOAD&PUSH 3)
277   (CALL1 34)                          ; TDNEG
279   (LOAD 1)
280   (JMP L385)
283   L283
283   (CONST 24)                          ; $PN
285   (STORE 1)
286   (LOAD&PUSH 3)
287   (CALL1 18)                          ; TDPN
289   (LOAD 1)
290   (JMP L385)
293   L293
293   (LOAD&PUSH 2)
294   (CONST&PUSH 21)                     ; ($NEG $NZ)
295   (CALL2&JMPIFNOT 5 L304)             ; MEMQ
298   (LOAD&PUSH 1)
299   (CONST&PUSH 22)                     ; ($NZ $PZ $PNZ)
300   (CALL2&JMPIF 5 L153)                ; MEMQ
304   L304
304   (LOAD&PUSH 2)
305   (CONST&PUSH 25)                     ; ($PZ $NZ $PNZ)
306   (CALL2&JMPIF 5 L184)                ; MEMQ
310   (LOAD&PUSH 2)
311   (CONST 24)                          ; $PN
313   (EQ)
314   (JMPIF1 L391)
317   (LOAD&PUSH 4)
318   (CALL1&JMPIFNOT 26 L360)            ; RATNUMP
321   (LOAD 4)
322   (CDR)
323   (CAR&PUSH)
324   (CALL1&JMPIF 27 L198)               ; MEVENP
328   (LOAD 4)
329   (CDR)
330   (CDR)
331   (CAR&PUSH)
332   (CALL1&JMPIFNOT 27 L360)            ; MEVENP
335   (GETVALUE 30)                       ; COMPLEXSIGN
337   (JMPIF L227)
340   (LOAD&PUSH 1)
341   (JMPIFEQTO 14 L234)                 ; $NEG
345   (LOAD&PUSH 1)
346   (JMPIFEQTO 24 L241)                 ; $PN
350   (LOAD&PUSH 1)
351   (JMPIFEQTO 32 L249)                 ; $NZ
355   (CONST 20)                          ; $PZ
356   (STORE 1)
357   (LOAD&PUSH 3)
358   (CALL1 33)                          ; TDPZ
360   L360
360   (LOAD&PUSH 2)
361   (JMPIFNOTEQTO 14 L384)              ; $NEG
364   (LOAD&PUSH 1)
365   (JMPIFEQTO 3 L257)                  ; $ZERO
369   (LOAD&PUSH 1)
370   (JMPIFEQTO 20 L265)                 ; $PZ
374   (LOAD&PUSH 1)
375   (JMPIFEQTO 32 L274)                 ; $NZ
379   (LOAD&PUSH 1)
380   (JMPIFEQTO 23 L283)                 ; $PNZ
384   L384
384   (LOAD 1)
385   L385
385   (SETVALUE 8)                        ; SIGN
387   (SKIP 5)
389   (JMP L393)
391   L391
391   (SKIP 5)
393   L393
393   (UNBIND1)
394   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIGN-MABS (X) ...)-114|
(CONST 0) = SIGN-MABS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN-MABS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-MABS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN-MABS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN-MABS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN-MABS
8     (SKIP&RET 1)


Disassembly of function SIGN-MABS
(CONST 0) = X
(CONST 1) = SIGN
(CONST 2) = ($POS $ZERO)
(CONST 3) = MEMQ
(CONST 4) = ($NEG $PN)
(CONST 5) = $POS
(CONST 6) = $PZ
(CONST 7) = MINUS
(CONST 8) = ODDS
(CONST 9) = EVENS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EVENS ODDS SIGN X)
writes special variables : (ODDS EVENS MINUS SIGN)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CAR&PUSH)
7     (CALL1 1)                           ; SIGN
9     (GETVALUE&PUSH 1)                   ; SIGN
11    (CONST&PUSH 2)                      ; ($POS $ZERO)
12    (CALL2 3)                           ; MEMQ
14    (JMPIF1 L40)
16    (GETVALUE&PUSH 1)                   ; SIGN
18    (CONST&PUSH 4)                      ; ($NEG $PN)
19    (CALL2&JMPIF 3 L43)                 ; MEMQ
22    (CONST 6)                           ; $PZ
23    (SETVALUE 1)                        ; SIGN
25    (NIL)
26    (SETVALUE 7)                        ; MINUS
28    (GETVALUE&PUSH 8)                   ; ODDS
30    (GETVALUE&PUSH 9)                   ; EVENS
32    (CALLSR 2 35)                       ; NCONC
35    (SETVALUE 9)                        ; EVENS
37    (NIL)
38    (SETVALUE 8)                        ; ODDS
40    L40
40    (UNBIND1)
41    (SKIP&RET 2)
43    L43
43    (CONST 5)                           ; $POS
44    (SETVALUE 1)                        ; SIGN
46    (JMP L40)


Disassembly of function #:|(DEFUN SIGN-POSFUN (X) ...)-115|
(CONST 0) = SIGN-POSFUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN-POSFUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-POSFUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN-POSFUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN-POSFUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN-POSFUN
8     (SKIP&RET 1)


Disassembly of function SIGN-POSFUN
(CONST 0) = X
(CONST 1) = $POS
(CONST 2) = SIGN
(CONST 3) = MINUS
(CONST 4) = ODDS
(CONST 5) = EVENS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variables : (EVENS ODDS MINUS SIGN)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST 1)                           ; $POS
4     (SETVALUE 2)                        ; SIGN
6     (NIL)
7     (SETVALUE 3)                        ; MINUS
9     (SETVALUE 4)                        ; ODDS
11    (SETVALUE 5)                        ; EVENS
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SIGN-ODDINC (X) ...)-116|
(CONST 0) = SIGN-ODDINC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIGN-ODDINC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIGN-ODDINC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIGN-ODDINC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIGN-ODDINC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIGN-ODDINC
8     (SKIP&RET 1)


Disassembly of function SIGN-ODDINC
(CONST 0) = X
(CONST 1) = SIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CAR&PUSH)
7     (CALL1 1)                           ; SIGN
9     (UNBIND1)
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN IMAG-ERR (X) ...)-117|
(CONST 0) = IMAG-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE IMAG-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; IMAG-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; IMAG-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE IMAG-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; IMAG-ERR
8     (SKIP&RET 1)


Disassembly of function IMAG-ERR
(CONST 0) = X
(CONST 1) = SIGN-IMAG-ERRP
(CONST 2) = "SIGN called on an imaginary argument:~%~M"
(CONST 3) = MERROR
(CONST 4) = SIGN-IMAG-ERR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X SIGN-IMAG-ERRP)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; SIGN-IMAG-ERRP
5     (JMPIFNOT L15)
7     (CONST&PUSH 2)                      ; "SIGN called on an imaginary argument:~%~M"
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL2 3)                           ; MERROR
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (CONST&PUSH 4)                      ; SIGN-IMAG-ERR
16    (T)
17    (THROW)


Disassembly of function #:|(DEFUN DBZS-ERR (X) ...)-118|
(CONST 0) = DBZS-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DBZS-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DBZS-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DBZS-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DBZS-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DBZS-ERR
8     (SKIP&RET 1)


Disassembly of function DBZS-ERR
(CONST 0) = X
(CONST 1) = "Division by zero detected in SIGN:~%~M"
(CONST 2) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; "Division by zero detected in SIGN:~%~M"
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 2)                           ; MERROR
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $FEATUREP (E IND) ...)-119|
(CONST 0) = $FEATUREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FEATUREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FEATUREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FEATUREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FEATUREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FEATUREP
8     (SKIP&RET 1)


Disassembly of function $FEATUREP
(CONST 0) = IND
(CONST 1) = "~M is not a symbolic atom - FEATUREP."
(CONST 2) = MERROR
(CONST 3) = $INTEGER
(CONST 4) = MAXIMA-INTEGERP
(CONST 5) = $NONINTEGER
(CONST 6) = NONINTEGERP
(CONST 7) = $EVEN
(CONST 8) = MEVENP
(CONST 9) = $ODD
(CONST 10) = MODDP
(CONST 11) = $REAL
(CONST 12) = KINDP
(CONST 13) = NUMER
(CONST 14) = $RECTFORM
(CONST 15) = $%I
(CONST 16) = FREE
(CONST 17) = $COMPLEX
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (IND)
71 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; IND
3     (GETVALUE&PUSH 0)                   ; IND
5     (CALLS2&JMPIFNOT 6 L47)             ; SYMBOLP
8     (GETVALUE&PUSH 0)                   ; IND
10    (JMPIFEQTO 3 L54)                   ; $INTEGER
13    (GETVALUE&PUSH 0)                   ; IND
15    (JMPIFEQTO 5 L59)                   ; $NONINTEGER
18    (GETVALUE&PUSH 0)                   ; IND
20    (JMPIFEQTO 7 L64)                   ; $EVEN
23    (GETVALUE&PUSH 0)                   ; IND
25    (JMPIFEQTO 9 L69)                   ; $ODD
28    (GETVALUE&PUSH 0)                   ; IND
30    (JMPIFEQTO 11 L92)                  ; $REAL
33    (GETVALUE&PUSH 0)                   ; IND
35    (JMPIFEQTO 17 L103)                 ; $COMPLEX
39    (LOAD&PUSH 5)
40    (CALLS2&JMPIF 6 L106)               ; SYMBOLP
43    (NIL)
44    L44
44    (UNBIND1)
45    (SKIP&RET 3)
47    L47
47    (CONST&PUSH 1)                      ; "~M is not a symbolic atom - FEATUREP."
48    (GETVALUE&PUSH 0)                   ; IND
50    (CALL2 2)                           ; MERROR
52    (JMP L44)
54    L54
54    (LOAD&PUSH 5)
55    (CALL1 4)                           ; MAXIMA-INTEGERP
57    (JMP L44)
59    L59
59    (LOAD&PUSH 5)
60    (CALL1 6)                           ; NONINTEGERP
62    (JMP L44)
64    L64
64    (LOAD&PUSH 5)
65    (CALL1 8)                           ; MEVENP
67    (JMP L44)
69    L69
69    (LOAD&PUSH 5)
70    (CALL1 10)                          ; MODDP
72    (JMP L44)
74    L74
74    (LOAD&PUSH 5)
75    (CALLS2 8)                          ; NUMBERP
77    (JMPIF1 L44)
79    (LOAD&PUSH 5)
80    (CONST&PUSH 11)                     ; $REAL
81    (CALL2 12)                          ; KINDP
83    (JMPIF1 L44)
85    (LOAD&PUSH 5)
86    (CALL1&PUSH 13)                     ; NUMER
88    (CALLS2 8)                          ; NUMBERP
90    (JMP L44)
92    L92
92    (LOAD 5)
93    (JMPIFATOM L74)
95    (LOAD&PUSH 5)
96    (CALL1&PUSH 14)                     ; $RECTFORM
98    (CONST&PUSH 15)                     ; $%I
99    (CALL2 16)                          ; FREE
101   (JMP L44)
103   L103
103   (T)
104   (JMP L44)
106   L106
106   (LOAD&PUSH 5)
107   (GETVALUE&PUSH 0)                   ; IND
109   (CALL2 12)                          ; KINDP
111   (JMP L44)


Disassembly of function #:|(DEFMFUN MAXIMA-INTEGERP (E) ...)-120|
(CONST 0) = MAXIMA-INTEGERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMA-INTEGERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-INTEGERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-INTEGERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMA-INTEGERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMA-INTEGERP
8     (SKIP&RET 1)


Disassembly of function MAXIMA-INTEGERP
(CONST 0) = MNUMP
(CONST 1) = $INTEGER
(CONST 2) = KINDP
(CONST 3) = MRAT
(CONST 4) = 1
(CONST 5) = (MTIMES MPLUS)
(CONST 6) = MEMQ
(CONST 7) = INTP
(CONST 8) = MEXPT
(CONST 9) = INTP-MEXPT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
50 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 12)                         ; INTEGERP
3     (JMPIF1 L64)
5     (LOAD&PUSH 1)
6     (CALL1&JMPIF 0 L31)                 ; MNUMP
9     (LOAD 1)
10    (JMPIFATOM L34)
12    (LOAD 1)
13    (CAR)
14    (CAR&PUSH)
15    (JMPIFEQTO 3 L40)                   ; MRAT
18    (LOAD 1)
19    (CAR)
20    (CAR&PUSH)
21    (CONST&PUSH 5)                      ; (MTIMES MPLUS)
22    (CALL2&JMPIF 6 L54)                 ; MEMQ
25    (LOAD 1)
26    (CAR)
27    (CAR&PUSH)
28    (JMPIFEQTO 8 L59)                   ; MEXPT
31    L31
31    (NIL)
32    (SKIP&RET 2)
34    L34
34    (LOAD&PUSH 1)
35    (CONST&PUSH 1)                      ; $INTEGER
36    (CALL2 2)                           ; KINDP
38    (SKIP&RET 2)
40    L40
40    (LOAD 1)
41    (CDR)
42    (CAR&PUSH)
43    (CALLS2 12)                         ; INTEGERP
45    (JMPIFNOT1 L64)
47    (LOAD 1)
48    (CDR)
49    (CDR&PUSH)
50    (CONST 4)                           ; 1
51    (EQ)
52    (SKIP&RET 2)
54    L54
54    (LOAD&PUSH 1)
55    (CALL1 7)                           ; INTP
57    (SKIP&RET 2)
59    L59
59    (LOAD&PUSH 1)
60    (CALL1 9)                           ; INTP-MEXPT
62    (SKIP&RET 2)
64    L64
64    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN NONINTEGERP (E) ...)-121|
(CONST 0) = NONINTEGERP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NONINTEGERP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NONINTEGERP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NONINTEGERP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NONINTEGERP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NONINTEGERP
8     (SKIP&RET 1)


Disassembly of function NONINTEGERP
(CONST 0) = NUM
(CONST 1) = MNUMP
(CONST 2) = $NONINTEGER
(CONST 3) = KINDP
(CONST 4) = SPECREPP
(CONST 5) = SPECDISREP
(CONST 6) = MPLUS
(CONST 7) = RATNUMP
(CONST 8) = INTP
(CONST 9) = $NUM
(CONST 10) = $DENOM
(CONST 11) = SUB
(CONST 12) = CSIGN
(CONST 13) = $POS
(CONST 14) = ADD2
(CONST 15) = $NEG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
writes special variable : (NUM)
67 byte-code instructions:
0     L0
0     (NIL)
1     (BIND 0)                            ; NUM
3     (LOAD&PUSH 4)
4     (CALLS2&JMPIF 12 L76)               ; INTEGERP
8     (LOAD&PUSH 4)
9     (CALL1&JMPIF 1 L79)                 ; MNUMP
13    (LOAD 4)
14    (JMPIFATOM L82)
17    (LOAD&PUSH 4)
18    (CALL1&JMPIF 4 L88)                 ; SPECREPP
22    (LOAD 4)
23    (CAR)
24    (CAR&PUSH)
25    (JMPIFNOTEQTO 6 L39)                ; MPLUS
28    (LOAD 4)
29    (CDR)
30    (CAR&PUSH)
31    (CALL1&JMPIFNOT 7 L39)              ; RATNUMP
34    (LOAD&CDR&PUSH 4)
36    (CALL1&JMPIF 8 L96)                 ; INTP
39    L39
39    (LOAD&PUSH 4)
40    (CALL1 9)                           ; $NUM
42    (SETVALUE 0)                        ; NUM
44    (PUSH)
45    (CALLS2&JMPIFNOT 12 L72)            ; INTEGERP
48    (LOAD&PUSH 4)
49    (CALL1 10)                          ; $DENOM
51    (STORE 4)
52    (PUSH)
53    (GETVALUE&PUSH 0)                   ; NUM
55    (CALL2&PUSH 11)                     ; SUB
57    (CALL1&PUSH 12)                     ; CSIGN
59    (JMPIFEQTO 13 L99)                  ; $POS
62    (LOAD&PUSH 4)
63    (GETVALUE&PUSH 0)                   ; NUM
65    (CALL2&PUSH 14)                     ; ADD2
67    (CALL1&PUSH 12)                     ; CSIGN
69    (JMPIFEQTO 15 L99)                  ; $NEG
72    L72
72    (NIL)
73    L73
73    (UNBIND1)
74    (SKIP&RET 2)
76    L76
76    (NIL)
77    (JMP L73)
79    L79
79    (T)
80    (JMP L73)
82    L82
82    (LOAD&PUSH 4)
83    (CONST&PUSH 2)                      ; $NONINTEGER
84    (CALL2 3)                           ; KINDP
86    (JMP L73)
88    L88
88    (LOAD&PUSH 4)
89    (CALL1&PUSH 5)                      ; SPECDISREP
91    (JSR L0)
94    (JMP L73)
96    L96
96    (T)
97    (JMP L73)
99    L99
99    (T)
100   (JMP L73)


Disassembly of function #:|(DEFUN INTP (L) ...)-122|
(CONST 0) = INTP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTP
8     (SKIP&RET 1)


Disassembly of function INTP
(CONST 0) = L
(CONST 1) = MAXIMA-INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     L3
3     (GETVALUE 0)                        ; L
5     (CDR)
6     (SETVALUE 0)                        ; L
8     (GETVALUE 0)                        ; L
10    (JMPIF L16)
12    (T)
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (GETVALUE 0)                        ; L
18    (CAR&PUSH)
19    (CALL1&JMPIF 1 L3)                  ; MAXIMA-INTEGERP
22    (NIL)
23    (JMP L13)


Disassembly of function #:|(DEFUN INTP-MEXPT (E) ...)-123|
(CONST 0) = INTP-MEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE INTP-MEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; INTP-MEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; INTP-MEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE INTP-MEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; INTP-MEXPT
8     (SKIP&RET 1)


Disassembly of function INTP-MEXPT
(CONST 0) = MAXIMA-INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
20 byte-code instructions:
0     (LOAD 1)
1     (CDR)
2     (CDR)
3     (CAR&PUSH)
4     (CALLS2 12)                         ; INTEGERP
6     (JMPIFNOT1 L24)
8     (LOAD 1)
9     (CDR)
10    (CDR)
11    (CAR&PUSH)
12    (CALLS2 147)                        ; MINUSP
14    (NOT)
15    (JMPIFNOT1 L24)
17    (LOAD 1)
18    (CDR)
19    (CAR&PUSH)
20    (CALL1 0)                           ; MAXIMA-INTEGERP
22    (SKIP&RET 2)
24    L24
24    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MEVENP (E) ...)-124|
(CONST 0) = MEVENP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MEVENP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEVENP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MEVENP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MEVENP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MEVENP
8     (SKIP&RET 1)


Disassembly of function MEVENP
(CONST 0) = MNUMP
(CONST 1) = EVOD
(CONST 2) = $EVEN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 12 L15)               ; INTEGERP
4     (LOAD&PUSH 1)
5     (CALL1&JMPIF 0 L21)                 ; MNUMP
8     (LOAD&PUSH 1)
9     (CALL1&PUSH 1)                      ; EVOD
11    (CONST 2)                           ; $EVEN
12    (EQ)
13    (SKIP&RET 2)
15    L15
15    (LOAD&PUSH 1)
16    (CALLS2 148)                        ; ODDP
18    (NOT)
19    (SKIP&RET 2)
21    L21
21    (NIL)
22    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MODDP (E) ...)-125|
(CONST 0) = MODDP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MODDP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MODDP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MODDP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MODDP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MODDP
8     (SKIP&RET 1)


Disassembly of function MODDP
(CONST 0) = MNUMP
(CONST 1) = EVOD
(CONST 2) = $ODD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 12 L15)               ; INTEGERP
4     (LOAD&PUSH 1)
5     (CALL1&JMPIF 0 L20)                 ; MNUMP
8     (LOAD&PUSH 1)
9     (CALL1&PUSH 1)                      ; EVOD
11    (CONST 2)                           ; $ODD
12    (EQ)
13    (SKIP&RET 2)
15    L15
15    (LOAD&PUSH 1)
16    (CALLS2 148)                        ; ODDP
18    (SKIP&RET 2)
20    L20
20    (NIL)
21    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN EVOD (E) ...)-126|
(CONST 0) = EVOD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVOD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVOD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVOD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVOD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVOD
8     (SKIP&RET 1)


Disassembly of function EVOD
(CONST 0) = $ODD
(CONST 1) = $EVEN
(CONST 2) = MNUMP
(CONST 3) = KINDP
(CONST 4) = MTIMES
(CONST 5) = EVOD-MTIMES
(CONST 6) = MPLUS
(CONST 7) = EVOD-MPLUS
(CONST 8) = MEXPT
(CONST 9) = EVOD-MEXPT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
53 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 12 L35)               ; INTEGERP
4     (LOAD&PUSH 1)
5     (CALL1&JMPIF 2 L29)                 ; MNUMP
8     (LOAD 1)
9     (JMPIFATOM L45)
11    (LOAD 1)
12    (CAR)
13    (CAR&PUSH)
14    (JMPIFEQTO 4 L58)                   ; MTIMES
17    (LOAD 1)
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFEQTO 6 L63)                   ; MPLUS
23    (LOAD 1)
24    (CAR)
25    (CAR&PUSH)
26    (JMPIFEQTO 8 L68)                   ; MEXPT
29    L29
29    (NIL)
30    (SKIP&RET 2)
32    L32
32    (CONST 0)                           ; $ODD
33    (SKIP&RET 2)
35    L35
35    (LOAD&PUSH 1)
36    (CALLS2&JMPIF 148 L32)              ; ODDP
39    (CONST 1)                           ; $EVEN
40    (SKIP&RET 2)
42    L42
42    (CONST 0)                           ; $ODD
43    (SKIP&RET 2)
45    L45
45    (LOAD&PUSH 1)
46    (CONST&PUSH 0)                      ; $ODD
47    (CALL2&JMPIF 3 L42)                 ; KINDP
50    (LOAD&PUSH 1)
51    (CONST&PUSH 1)                      ; $EVEN
52    (CALL2&JMPIFNOT 3 L29)              ; KINDP
55    (CONST 1)                           ; $EVEN
56    (SKIP&RET 2)
58    L58
58    (LOAD&PUSH 1)
59    (CALL1 5)                           ; EVOD-MTIMES
61    (SKIP&RET 2)
63    L63
63    (LOAD&PUSH 1)
64    (CALL1 7)                           ; EVOD-MPLUS
66    (SKIP&RET 2)
68    L68
68    (LOAD&PUSH 1)
69    (CALL1 9)                           ; EVOD-MEXPT
71    (SKIP&RET 2)


Disassembly of function #:|(DEFUN EVOD-MTIMES (X) ...)-127|
(CONST 0) = EVOD-MTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVOD-MTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVOD-MTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVOD-MTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVOD-MTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVOD-MTIMES
8     (SKIP&RET 1)


Disassembly of function EVOD-MTIMES
(CONST 0) = X
(CONST 1) = L
(CONST 2) = $ODD
(CONST 3) = FLAG
(CONST 4) = EVOD
(CONST 5) = $EVEN
(CONST 6) = MAXIMA-INTEGERP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG L X)
writes special variables : (L FLAG X)
45 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (BIND 1)                            ; L
8     (CONST 2)                           ; $ODD
9     (BIND 3)                            ; FLAG
11    (GETVALUE 1)                        ; L
13    (JMPIFNOT L54)
15    L15
15    (GETVALUE 1)                        ; L
17    (CAR&PUSH)
18    (CALL1 4)                           ; EVOD
20    (SETVALUE 0)                        ; X
22    (PUSH)
23    (JMPIFEQTO 2 L45)                   ; $ODD
26    (GETVALUE&PUSH 0)                   ; X
28    (JMPIFEQTO 5 L61)                   ; $EVEN
31    (GETVALUE 1)                        ; L
33    (CAR&PUSH)
34    (CALL1&JMPIFNOT 6 L66)              ; MAXIMA-INTEGERP
37    (GETVALUE&PUSH 3)                   ; FLAG
39    (JMPIFNOTEQTO 2 L45)                ; $ODD
42    (NIL)
43    (SETVALUE 3)                        ; FLAG
45    L45
45    (GETVALUE 1)                        ; L
47    (CDR)
48    (SETVALUE 1)                        ; L
50    (GETVALUE 1)                        ; L
52    (JMPIF L15)
54    L54
54    (GETVALUE 3)                        ; FLAG
56    (UNBIND 2)
58    L58
58    (UNBIND1)
59    (SKIP&RET 2)
61    L61
61    (CONST 5)                           ; $EVEN
62    (SETVALUE 3)                        ; FLAG
64    (JMP L45)
66    L66
66    (NIL)
67    (UNBIND 2)
69    (JMP L58)


Disassembly of function #:|(DEFUN EVOD-MPLUS (X) ...)-128|
(CONST 0) = EVOD-MPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVOD-MPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVOD-MPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVOD-MPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVOD-MPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVOD-MPLUS
8     (SKIP&RET 1)


Disassembly of function EVOD-MPLUS
(CONST 0) = X
(CONST 1) = L
(CONST 2) = FLAG
(CONST 3) = EVOD
(CONST 4) = $ODD
(CONST 5) = $EVEN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG L X)
writes special variables : (L FLAG X)
43 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (BIND 1)                            ; L
8     (NIL)
9     (BIND 2)                            ; FLAG
11    (GETVALUE 1)                        ; L
13    (JMPIFNOT L40)
15    L15
15    (GETVALUE 1)                        ; L
17    (CAR&PUSH)
18    (CALL1 3)                           ; EVOD
20    (SETVALUE 0)                        ; X
22    (PUSH)
23    (JMPIFNOTEQTO 4 L50)                ; $ODD
26    (GETVALUE 2)                        ; FLAG
28    (NOT)
29    (SETVALUE 2)                        ; FLAG
31    L31
31    (GETVALUE 1)                        ; L
33    (CDR)
34    (SETVALUE 1)                        ; L
36    (GETVALUE 1)                        ; L
38    (JMPIF L15)
40    L40
40    (GETVALUE 2)                        ; FLAG
42    (JMPIF L60)
44    (CONST 5)                           ; $EVEN
45    L45
45    (UNBIND 2)
47    L47
47    (UNBIND1)
48    (SKIP&RET 2)
50    L50
50    (GETVALUE&PUSH 0)                   ; X
52    (JMPIFEQTO 5 L31)                   ; $EVEN
55    (NIL)
56    (UNBIND 2)
58    (JMP L47)
60    L60
60    (CONST 4)                           ; $ODD
61    (JMP L45)


Disassembly of function #:|(DEFUN EVOD-MEXPT (X) ...)-129|
(CONST 0) = EVOD-MEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EVOD-MEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EVOD-MEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EVOD-MEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EVOD-MEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EVOD-MEXPT
8     (SKIP&RET 1)


Disassembly of function EVOD-MEXPT
(CONST 0) = X
(CONST 1) = EVOD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
23 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CDR)
7     (CAR&PUSH)
8     (CALLS2&JMPIFNOT 12 L19)            ; INTEGERP
11    (GETVALUE 0)                        ; X
13    (CDR)
14    (CDR)
15    (CAR&PUSH)
16    (CALLS2&JMPIFNOT 147 L23)           ; MINUSP
19    L19
19    (NIL)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE 0)                        ; X
25    (CDR)
26    (CAR&PUSH)
27    (CALL1 1)                           ; EVOD
29    (JMP L20)


Disassembly of function #:|(DECLARE-TOP (SPECIAL MGQP MLQP))-130|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMODE CL NIL ...)-131|
(CONST 0) = CL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; CL
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO C-DOBJ (&REST X) ...)-132|
(CONST 0) = C-DOBJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE C-DOBJ>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; C-DOBJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; C-DOBJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE C-DOBJ>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; C-DOBJ
10    (SKIP&RET 1)


Disassembly of function C-DOBJ
(CONST 0) = X
(CONST 1) = LIST
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (BIND 0)                            ; X
4     (CONST&PUSH 1)                      ; LIST
5     (GETVALUE 0)                        ; X
7     (CONS)
8     (UNBIND1)
9     (SKIP&RET 3)


Disassembly of function #:|(DEFUN DCOMPARE (X Y) ...)-133|
(CONST 0) = DCOMPARE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DCOMPARE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DCOMPARE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DCOMPARE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DCOMPARE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DCOMPARE
8     (SKIP&RET 1)


Disassembly of function DCOMPARE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = SUB
(CONST 3) = ODDS
(CONST 4) = EVENS
(CONST 5) = MINUS
(CONST 6) = $ZERO
(CONST 7) = $INF
(CONST 8) = $MINF
(CONST 9) = $POS
(CONST 10) = $NEG
(CONST 11) = DCOMP
(CONST 12) = SIGN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variables : (SIGN MINUS EVENS ODDS)
42 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2&PUSH 2)                      ; SUB
12    (LIST 1)
14    (SETVALUE 3)                        ; ODDS
16    (NIL)
17    (SETVALUE 4)                        ; EVENS
19    (SETVALUE 5)                        ; MINUS
21    (GETVALUE&PUSH 0)                   ; X
23    (GETVALUE 1)                        ; Y
25    (JMPIFEQ L59)
27    (GETVALUE&PUSH 0)                   ; X
29    (JMPIFEQTO 7 L64)                   ; $INF
32    (GETVALUE&PUSH 1)                   ; Y
34    (JMPIFEQTO 8 L64)                   ; $MINF
37    (GETVALUE&PUSH 0)                   ; X
39    (JMPIFEQTO 8 L69)                   ; $MINF
42    (GETVALUE&PUSH 1)                   ; Y
44    (JMPIFEQTO 7 L69)                   ; $INF
47    (GETVALUE&PUSH 0)                   ; X
49    (GETVALUE&PUSH 1)                   ; Y
51    (CALL2 11)                          ; DCOMP
53    (SETVALUE 12)                       ; SIGN
55    L55
55    (UNBIND 2)
57    (SKIP&RET 3)
59    L59
59    (CONST 6)                           ; $ZERO
60    (SETVALUE 12)                       ; SIGN
62    (JMP L55)
64    L64
64    (CONST 9)                           ; $POS
65    (SETVALUE 12)                       ; SIGN
67    (JMP L55)
69    L69
69    (CONST 10)                          ; $NEG
70    (SETVALUE 12)                       ; SIGN
72    (JMP L55)


Disassembly of function #:|(DEFUN DCOMP (X Y) ...)-134|
(CONST 0) = DCOMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DCOMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DCOMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DCOMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DCOMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DCOMP
8     (SKIP&RET 1)


Disassembly of function DCOMP
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = MGQP
(CONST 3) = MLQP
(CONST 4) = DINTERNP
(CONST 5) = $PNZ
(CONST 6) = CLEAR
(CONST 7) = DEQ
(CONST 8) = +LABS
(CONST 9) = ZL-GET
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variables : (Y X)
33 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL)
7     (BIND 2)                            ; MGQP
9     (NIL)
10    (BIND 3)                            ; MLQP
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1 4)                           ; DINTERNP
16    (SETVALUE 0)                        ; X
18    (GETVALUE&PUSH 1)                   ; Y
20    (CALL1 4)                           ; DINTERNP
22    (SETVALUE 1)                        ; Y
24    (GETVALUE 0)                        ; X
26    (JMPIFNOT L52)
28    (GETVALUE 1)                        ; Y
30    (JMPIFNOT L52)
32    (CALL0 6)                           ; CLEAR
34    (GETVALUE&PUSH 0)                   ; X
36    (GETVALUE&PUSH 1)                   ; Y
38    (CALL2 7)                           ; DEQ
40    (GETVALUE&PUSH 1)                   ; Y
42    (CONST&PUSH 8)                      ; +LABS
43    (CALL2 9)                           ; ZL-GET
45    (JMPIF1 L48)
47    (CONST 5)                           ; $PNZ
48    L48
48    (UNBIND 4)
50    (SKIP&RET 3)
52    L52
52    (CONST 5)                           ; $PNZ
53    (JMP L48)


Disassembly of function #:|(DEFUN DEQ (X Y) ...)-135|
(CONST 0) = DEQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEQ
8     (SKIP&RET 1)


Disassembly of function DEQ
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $ZERO
(CONST 3) = DMARK
(CONST 4) = DATA
(CONST 5) = ZL-GET
(CONST 6) = L
(CONST 7) = VISIBLEP
(CONST 8) = DEQF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L Y X)
writes special variable : (L)
46 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; $ZERO
9     (CALL2&JMPIF 3 L63)                 ; DMARK
12    (GETVALUE&PUSH 0)                   ; X
14    (GETVALUE 1)                        ; Y
16    (EQ)
17    (JMPIF1 L59)
19    (GETVALUE&PUSH 0)                   ; X
21    (CONST&PUSH 4)                      ; DATA
22    (CALL2 5)                           ; ZL-GET
24    (BIND 6)                            ; L
26    (GETVALUE 6)                        ; L
28    (JMPIFNOT L57)
30    L30
30    (GETVALUE 6)                        ; L
32    (CAR&PUSH)
33    (CALL1&JMPIFNOT 7 L48)              ; VISIBLEP
36    (GETVALUE&PUSH 0)                   ; X
38    (GETVALUE&PUSH 1)                   ; Y
40    (GETVALUE 6)                        ; L
42    (CAR&PUSH)
43    (CALL 3 8)                          ; DEQF
46    (JMPIF L66)
48    L48
48    (GETVALUE 6)                        ; L
50    (CDR)
51    (SETVALUE 6)                        ; L
53    (GETVALUE 6)                        ; L
55    (JMPIF L30)
57    L57
57    (NIL)
58    (UNBIND1)
59    L59
59    (UNBIND 2)
61    (SKIP&RET 3)
63    L63
63    (NIL)
64    (JMP L59)
66    L66
66    (T)
67    (UNBIND1)
68    (JMP L59)


Disassembly of function #:|(DEFUN DEQF (X Y F) ...)-136|
(CONST 0) = DEQF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEQF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEQF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEQF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEQF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DEQF
8     (SKIP&RET 1)


Disassembly of function DEQF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = F
(CONST 3) = MEQP
(CONST 4) = DEQ
(CONST 5) = MGRP
(CONST 6) = DGR
(CONST 7) = DLS
(CONST 8) = MGQP
(CONST 9) = DGQ
(CONST 10) = DLQ
(CONST 11) = MNQP
(CONST 12) = DNQ
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X F)
112 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (GETVALUE 2)                        ; F
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFNOTEQTO 3 L117)               ; MEQP
17    (GETVALUE&PUSH 0)                   ; X
19    (GETVALUE 2)                        ; F
21    (CAR)
22    (CDR)
23    (CAR)
24    (JMPIFEQ L38)
26    (GETVALUE 2)                        ; F
28    (CAR)
29    L29
29    (CDR)
30    (CAR&PUSH)
31    (GETVALUE&PUSH 1)                   ; Y
33    (CALL2 4)                           ; DEQ
35    (JMP L160)
38    L38
38    (GETVALUE 2)                        ; F
40    (CAR)
41    (CDR)
42    (JMP L29)
44    L44
44    (GETVALUE 2)                        ; F
46    (CAR)
47    (CDR)
48    (CDR)
49    (CAR&PUSH)
50    (GETVALUE&PUSH 1)                   ; Y
52    (CALL2 6)                           ; DGR
54    (JMP L160)
57    L57
57    (GETVALUE&PUSH 0)                   ; X
59    (GETVALUE 2)                        ; F
61    (CAR)
62    (CDR)
63    (CAR)
64    (JMPIFEQ L44)
66    (GETVALUE 2)                        ; F
68    (CAR)
69    (CDR)
70    (CAR&PUSH)
71    (GETVALUE&PUSH 1)                   ; Y
73    (CALL2 7)                           ; DLS
75    (JMP L160)
78    L78
78    (GETVALUE 2)                        ; F
80    (CAR)
81    (CDR)
82    (CDR)
83    (CAR&PUSH)
84    (GETVALUE&PUSH 1)                   ; Y
86    (CALL2 9)                           ; DGQ
88    (JMP L160)
91    L91
91    (GETVALUE&PUSH 0)                   ; X
93    (GETVALUE 2)                        ; F
95    (CAR)
96    (CDR)
97    (CAR)
98    (JMPIFEQ L78)
100   (GETVALUE 2)                        ; F
102   (CAR)
103   (CDR)
104   (CAR&PUSH)
105   (GETVALUE&PUSH 1)                   ; Y
107   (CALL2 10)                          ; DLQ
109   (JMP L160)
111   L111
111   (GETVALUE 2)                        ; F
113   (CAR)
114   (CDR)
115   (JMP L151)
117   L117
117   (GETVALUE 2)                        ; F
119   (CAR)
120   (CAR&PUSH)
121   (JMPIFEQTO 5 L57)                   ; MGRP
125   (GETVALUE 2)                        ; F
127   (CAR)
128   (CAR&PUSH)
129   (JMPIFEQTO 8 L91)                   ; MGQP
132   (GETVALUE 2)                        ; F
134   (CAR)
135   (CAR&PUSH)
136   (JMPIFNOTEQTO 11 L159)              ; MNQP
139   (GETVALUE&PUSH 0)                   ; X
141   (GETVALUE 2)                        ; F
143   (CAR)
144   (CDR)
145   (CAR)
146   (JMPIFEQ L111)
148   (GETVALUE 2)                        ; F
150   (CAR)
151   L151
151   (CDR)
152   (CAR&PUSH)
153   (GETVALUE&PUSH 1)                   ; Y
155   (CALL2 12)                          ; DNQ
157   (JMP L160)
159   L159
159   (NIL)
160   L160
160   (UNBIND 3)
162   (SKIP&RET 4)


Disassembly of function #:|(DEFUN DGR (X Y) ...)-137|
(CONST 0) = DGR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DGR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DGR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DGR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DGR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DGR
8     (SKIP&RET 1)


Disassembly of function DGR
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $POS
(CONST 3) = DMARK
(CONST 4) = DATA
(CONST 5) = ZL-GET
(CONST 6) = L
(CONST 7) = MLQP
(CONST 8) = VISIBLEP
(CONST 9) = DGRF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MLQP L Y X)
writes special variable : (L)
48 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; $POS
9     (CALL2&JMPIF 3 L67)                 ; DMARK
12    (GETVALUE&PUSH 0)                   ; X
14    (GETVALUE 1)                        ; Y
16    (EQ)
17    (JMPIF1 L63)
19    (GETVALUE&PUSH 0)                   ; X
21    (CONST&PUSH 4)                      ; DATA
22    (CALL2 5)                           ; ZL-GET
24    (BIND 6)                            ; L
26    (GETVALUE 6)                        ; L
28    (JMPIFNOT L61)
30    L30
30    (GETVALUE 7)                        ; MLQP
32    (JMPIF L70)
34    (GETVALUE 6)                        ; L
36    (CAR&PUSH)
37    (CALL1&JMPIFNOT 8 L52)              ; VISIBLEP
40    (GETVALUE&PUSH 0)                   ; X
42    (GETVALUE&PUSH 1)                   ; Y
44    (GETVALUE 6)                        ; L
46    (CAR&PUSH)
47    (CALL 3 9)                          ; DGRF
50    (JMPIF L70)
52    L52
52    (GETVALUE 6)                        ; L
54    (CDR)
55    (SETVALUE 6)                        ; L
57    (GETVALUE 6)                        ; L
59    (JMPIF L30)
61    L61
61    (NIL)
62    (UNBIND1)
63    L63
63    (UNBIND 2)
65    (SKIP&RET 3)
67    L67
67    (NIL)
68    (JMP L63)
70    L70
70    (T)
71    (UNBIND1)
72    (JMP L63)


Disassembly of function #:|(DEFUN DGRF (X Y F) ...)-138|
(CONST 0) = DGRF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DGRF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DGRF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DGRF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DGRF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DGRF
8     (SKIP&RET 1)


Disassembly of function DGRF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = F
(CONST 3) = MGRP
(CONST 4) = DGR
(CONST 5) = MGQP
(CONST 6) = MEQP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X F)
51 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (GETVALUE 2)                        ; F
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFEQTO 3 L23)                   ; MGRP
16    (GETVALUE 2)                        ; F
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFNOTEQTO 5 L39)                ; MGQP
23    L23
23    (GETVALUE&PUSH 0)                   ; X
25    (GETVALUE 2)                        ; F
27    (CAR)
28    (CDR)
29    (CAR)
30    (EQ)
31    (JMPIFNOT1 L67)
33    L33
33    (GETVALUE 2)                        ; F
35    (CAR)
36    (CDR)
37    (JMP L58)
39    L39
39    (GETVALUE 2)                        ; F
41    (CAR)
42    (CAR&PUSH)
43    (JMPIFNOTEQTO 6 L66)                ; MEQP
46    (GETVALUE&PUSH 0)                   ; X
48    (GETVALUE 2)                        ; F
50    (CAR)
51    (CDR)
52    (CAR)
53    (JMPIFEQ L33)
55    (GETVALUE 2)                        ; F
57    (CAR)
58    L58
58    (CDR)
59    (CAR&PUSH)
60    (GETVALUE&PUSH 1)                   ; Y
62    (CALL2 4)                           ; DGR
64    (JMP L67)
66    L66
66    (NIL)
67    L67
67    (UNBIND 3)
69    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DLS (X Y) ...)-139|
(CONST 0) = DLS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DLS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DLS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DLS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DLS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DLS
8     (SKIP&RET 1)


Disassembly of function DLS
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $NEG
(CONST 3) = DMARK
(CONST 4) = DATA
(CONST 5) = ZL-GET
(CONST 6) = L
(CONST 7) = MGQP
(CONST 8) = VISIBLEP
(CONST 9) = DLSF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (MGQP L Y X)
writes special variable : (L)
48 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; $NEG
9     (CALL2&JMPIF 3 L67)                 ; DMARK
12    (GETVALUE&PUSH 0)                   ; X
14    (GETVALUE 1)                        ; Y
16    (EQ)
17    (JMPIF1 L63)
19    (GETVALUE&PUSH 0)                   ; X
21    (CONST&PUSH 4)                      ; DATA
22    (CALL2 5)                           ; ZL-GET
24    (BIND 6)                            ; L
26    (GETVALUE 6)                        ; L
28    (JMPIFNOT L61)
30    L30
30    (GETVALUE 7)                        ; MGQP
32    (JMPIF L70)
34    (GETVALUE 6)                        ; L
36    (CAR&PUSH)
37    (CALL1&JMPIFNOT 8 L52)              ; VISIBLEP
40    (GETVALUE&PUSH 0)                   ; X
42    (GETVALUE&PUSH 1)                   ; Y
44    (GETVALUE 6)                        ; L
46    (CAR&PUSH)
47    (CALL 3 9)                          ; DLSF
50    (JMPIF L70)
52    L52
52    (GETVALUE 6)                        ; L
54    (CDR)
55    (SETVALUE 6)                        ; L
57    (GETVALUE 6)                        ; L
59    (JMPIF L30)
61    L61
61    (NIL)
62    (UNBIND1)
63    L63
63    (UNBIND 2)
65    (SKIP&RET 3)
67    L67
67    (NIL)
68    (JMP L63)
70    L70
70    (T)
71    (UNBIND1)
72    (JMP L63)


Disassembly of function #:|(DEFUN DLSF (X Y F) ...)-140|
(CONST 0) = DLSF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DLSF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DLSF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DLSF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DLSF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DLSF
8     (SKIP&RET 1)


Disassembly of function DLSF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = F
(CONST 3) = MGRP
(CONST 4) = DLS
(CONST 5) = MGQP
(CONST 6) = MEQP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X F)
52 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (GETVALUE 2)                        ; F
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFEQTO 3 L23)                   ; MGRP
16    (GETVALUE 2)                        ; F
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFNOTEQTO 5 L60)                ; MGQP
23    L23
23    (GETVALUE&PUSH 0)                   ; X
25    (GETVALUE 2)                        ; F
27    (CAR)
28    (CDR)
29    (CDR)
30    (CAR)
31    (EQ)
32    (JMPIFNOT1 L68)
34    L34
34    (GETVALUE 2)                        ; F
36    (CAR)
37    L37
37    (CDR)
38    (CAR&PUSH)
39    (GETVALUE&PUSH 1)                   ; Y
41    (CALL2 4)                           ; DLS
43    (JMP L68)
45    L45
45    (GETVALUE&PUSH 0)                   ; X
47    (GETVALUE 2)                        ; F
49    (CAR)
50    (CDR)
51    (CAR)
52    (JMPIFNOTEQ L34)
54    (GETVALUE 2)                        ; F
56    (CAR)
57    (CDR)
58    (JMP L37)
60    L60
60    (GETVALUE 2)                        ; F
62    (CAR)
63    (CAR&PUSH)
64    (JMPIFEQTO 6 L45)                   ; MEQP
67    (NIL)
68    L68
68    (UNBIND 3)
70    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DGQ (X Y) ...)-141|
(CONST 0) = DGQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DGQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DGQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DGQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DGQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DGQ
8     (SKIP&RET 1)


Disassembly of function DGQ
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = +LABS
(CONST 3) = ZL-GET
(CONST 4) = ($POS $ZERO)
(CONST 5) = MEMQ
(CONST 6) = $NZ
(CONST 7) = DEQ
(CONST 8) = $PN
(CONST 9) = DGR
(CONST 10) = $PZ
(CONST 11) = DMARK
(CONST 12) = MGQP
(CONST 13) = DATA
(CONST 14) = L
(CONST 15) = VISIBLEP
(CONST 16) = DGQF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L Y X)
writes special variables : (MGQP L)
76 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; +LABS
9     (CALL2&PUSH 3)                      ; ZL-GET
11    (CONST&PUSH 4)                      ; ($POS $ZERO)
12    (CALL2&JMPIF 5 L92)                 ; MEMQ
16    (GETVALUE&PUSH 0)                   ; X
18    (CONST&PUSH 2)                      ; +LABS
19    (CALL2&PUSH 3)                      ; ZL-GET
21    (JMPIFEQTO 6 L95)                   ; $NZ
25    (GETVALUE&PUSH 0)                   ; X
27    (CONST&PUSH 2)                      ; +LABS
28    (CALL2&PUSH 3)                      ; ZL-GET
30    (JMPIFEQTO 8 L103)                  ; $PN
34    (GETVALUE&PUSH 0)                   ; X
36    (CONST&PUSH 10)                     ; $PZ
37    (CALL2&JMPIF 11 L111)               ; DMARK
41    (GETVALUE&PUSH 0)                   ; X
43    (GETVALUE 1)                        ; Y
45    (JMPIFEQ L114)
48    (GETVALUE&PUSH 0)                   ; X
50    (CONST&PUSH 13)                     ; DATA
51    (CALL2 3)                           ; ZL-GET
53    (BIND 14)                           ; L
55    (GETVALUE 14)                       ; L
57    (JMPIFNOT L86)
59    L59
59    (GETVALUE 14)                       ; L
61    (CAR&PUSH)
62    (CALL1&JMPIFNOT 15 L77)             ; VISIBLEP
65    (GETVALUE&PUSH 0)                   ; X
67    (GETVALUE&PUSH 1)                   ; Y
69    (GETVALUE 14)                       ; L
71    (CAR&PUSH)
72    (CALL 3 16)                         ; DGQF
75    (JMPIF L120)
77    L77
77    (GETVALUE 14)                       ; L
79    (CDR)
80    (SETVALUE 14)                       ; L
82    (GETVALUE 14)                       ; L
84    (JMPIF L59)
86    L86
86    (NIL)
87    (UNBIND1)
88    L88
88    (UNBIND 2)
90    (SKIP&RET 3)
92    L92
92    (NIL)
93    (JMP L88)
95    L95
95    (GETVALUE&PUSH 0)                   ; X
97    (GETVALUE&PUSH 1)                   ; Y
99    (CALL2 7)                           ; DEQ
101   (JMP L88)
103   L103
103   (GETVALUE&PUSH 0)                   ; X
105   (GETVALUE&PUSH 1)                   ; Y
107   (CALL2 9)                           ; DGR
109   (JMP L88)
111   L111
111   (NIL)
112   (JMP L88)
114   L114
114   (T)
115   (SETVALUE 12)                       ; MGQP
117   (NIL)
118   (JMP L88)
120   L120
120   (T)
121   (UNBIND1)
122   (JMP L88)


Disassembly of function #:|(DEFUN DGQF (X Y F) ...)-142|
(CONST 0) = DGQF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DGQF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DGQF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DGQF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DGQF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DGQF
8     (SKIP&RET 1)


Disassembly of function DGQF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = F
(CONST 3) = MGRP
(CONST 4) = DGR
(CONST 5) = MGQP
(CONST 6) = DGQ
(CONST 7) = MEQP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X F)
66 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (GETVALUE 2)                        ; F
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFEQTO 3 L39)                   ; MGRP
16    (GETVALUE 2)                        ; F
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFNOTEQTO 5 L61)                ; MGQP
23    (GETVALUE&PUSH 0)                   ; X
25    (GETVALUE 2)                        ; F
27    (CAR)
28    (CDR)
29    (CAR)
30    (EQ)
31    (JMPIFNOT1 L89)
33    L33
33    (GETVALUE 2)                        ; F
35    (CAR)
36    (CDR)
37    (JMP L80)
39    L39
39    (GETVALUE&PUSH 0)                   ; X
41    (GETVALUE 2)                        ; F
43    (CAR)
44    (CDR)
45    (CAR)
46    (EQ)
47    (JMPIFNOT1 L89)
49    (GETVALUE 2)                        ; F
51    (CAR)
52    (CDR)
53    (CDR)
54    (CAR&PUSH)
55    (GETVALUE&PUSH 1)                   ; Y
57    (CALL2 4)                           ; DGR
59    (JMP L89)
61    L61
61    (GETVALUE 2)                        ; F
63    (CAR)
64    (CAR&PUSH)
65    (JMPIFNOTEQTO 7 L88)                ; MEQP
68    (GETVALUE&PUSH 0)                   ; X
70    (GETVALUE 2)                        ; F
72    (CAR)
73    (CDR)
74    (CAR)
75    (JMPIFEQ L33)
77    (GETVALUE 2)                        ; F
79    (CAR)
80    L80
80    (CDR)
81    (CAR&PUSH)
82    (GETVALUE&PUSH 1)                   ; Y
84    (CALL2 6)                           ; DGQ
86    (JMP L89)
88    L88
88    (NIL)
89    L89
89    (UNBIND 3)
91    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DLQ (X Y) ...)-143|
(CONST 0) = DLQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DLQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DLQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DLQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DLQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DLQ
8     (SKIP&RET 1)


Disassembly of function DLQ
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = +LABS
(CONST 3) = ZL-GET
(CONST 4) = ($NEG $ZERO)
(CONST 5) = MEMQ
(CONST 6) = $PZ
(CONST 7) = DEQ
(CONST 8) = $PN
(CONST 9) = DGR
(CONST 10) = $NZ
(CONST 11) = DMARK
(CONST 12) = MLQP
(CONST 13) = DATA
(CONST 14) = L
(CONST 15) = VISIBLEP
(CONST 16) = DLQF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L Y X)
writes special variables : (MLQP L)
76 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; +LABS
9     (CALL2&PUSH 3)                      ; ZL-GET
11    (CONST&PUSH 4)                      ; ($NEG $ZERO)
12    (CALL2&JMPIF 5 L92)                 ; MEMQ
16    (GETVALUE&PUSH 0)                   ; X
18    (CONST&PUSH 2)                      ; +LABS
19    (CALL2&PUSH 3)                      ; ZL-GET
21    (JMPIFEQTO 6 L95)                   ; $PZ
25    (GETVALUE&PUSH 0)                   ; X
27    (CONST&PUSH 2)                      ; +LABS
28    (CALL2&PUSH 3)                      ; ZL-GET
30    (JMPIFEQTO 8 L103)                  ; $PN
34    (GETVALUE&PUSH 0)                   ; X
36    (CONST&PUSH 10)                     ; $NZ
37    (CALL2&JMPIF 11 L111)               ; DMARK
41    (GETVALUE&PUSH 0)                   ; X
43    (GETVALUE 1)                        ; Y
45    (JMPIFEQ L114)
48    (GETVALUE&PUSH 0)                   ; X
50    (CONST&PUSH 13)                     ; DATA
51    (CALL2 3)                           ; ZL-GET
53    (BIND 14)                           ; L
55    (GETVALUE 14)                       ; L
57    (JMPIFNOT L86)
59    L59
59    (GETVALUE 14)                       ; L
61    (CAR&PUSH)
62    (CALL1&JMPIFNOT 15 L77)             ; VISIBLEP
65    (GETVALUE&PUSH 0)                   ; X
67    (GETVALUE&PUSH 1)                   ; Y
69    (GETVALUE 14)                       ; L
71    (CAR&PUSH)
72    (CALL 3 16)                         ; DLQF
75    (JMPIF L120)
77    L77
77    (GETVALUE 14)                       ; L
79    (CDR)
80    (SETVALUE 14)                       ; L
82    (GETVALUE 14)                       ; L
84    (JMPIF L59)
86    L86
86    (NIL)
87    (UNBIND1)
88    L88
88    (UNBIND 2)
90    (SKIP&RET 3)
92    L92
92    (NIL)
93    (JMP L88)
95    L95
95    (GETVALUE&PUSH 0)                   ; X
97    (GETVALUE&PUSH 1)                   ; Y
99    (CALL2 7)                           ; DEQ
101   (JMP L88)
103   L103
103   (GETVALUE&PUSH 0)                   ; X
105   (GETVALUE&PUSH 1)                   ; Y
107   (CALL2 9)                           ; DGR
109   (JMP L88)
111   L111
111   (NIL)
112   (JMP L88)
114   L114
114   (T)
115   (SETVALUE 12)                       ; MLQP
117   (NIL)
118   (JMP L88)
120   L120
120   (T)
121   (UNBIND1)
122   (JMP L88)


Disassembly of function #:|(DEFUN DLQF (X Y F) ...)-144|
(CONST 0) = DLQF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DLQF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DLQF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DLQF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DLQF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DLQF
8     (SKIP&RET 1)


Disassembly of function DLQF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = F
(CONST 3) = MGRP
(CONST 4) = DLS
(CONST 5) = MGQP
(CONST 6) = DLQ
(CONST 7) = MEQP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X F)
67 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (GETVALUE 2)                        ; F
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFEQTO 3 L45)                   ; MGRP
16    (GETVALUE 2)                        ; F
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFNOTEQTO 5 L82)                ; MGQP
23    (GETVALUE&PUSH 0)                   ; X
25    (GETVALUE 2)                        ; F
27    (CAR)
28    (CDR)
29    (CDR)
30    (CAR)
31    (EQ)
32    (JMPIFNOT1 L90)
34    L34
34    (GETVALUE 2)                        ; F
36    (CAR)
37    L37
37    (CDR)
38    (CAR&PUSH)
39    (GETVALUE&PUSH 1)                   ; Y
41    (CALL2 6)                           ; DLQ
43    (JMP L90)
45    L45
45    (GETVALUE&PUSH 0)                   ; X
47    (GETVALUE 2)                        ; F
49    (CAR)
50    (CDR)
51    (CDR)
52    (CAR)
53    (EQ)
54    (JMPIFNOT1 L90)
56    (GETVALUE 2)                        ; F
58    (CAR)
59    (CDR)
60    (CAR&PUSH)
61    (GETVALUE&PUSH 1)                   ; Y
63    (CALL2 4)                           ; DLS
65    (JMP L90)
67    L67
67    (GETVALUE&PUSH 0)                   ; X
69    (GETVALUE 2)                        ; F
71    (CAR)
72    (CDR)
73    (CAR)
74    (JMPIFNOTEQ L34)
76    (GETVALUE 2)                        ; F
78    (CAR)
79    (CDR)
80    (JMP L37)
82    L82
82    (GETVALUE 2)                        ; F
84    (CAR)
85    (CAR&PUSH)
86    (JMPIFEQTO 7 L67)                   ; MEQP
89    (NIL)
90    L90
90    (UNBIND 3)
92    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DNQ (X Y) ...)-145|
(CONST 0) = DNQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DNQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DNQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DNQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DNQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DNQ
8     (SKIP&RET 1)


Disassembly of function DNQ
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = +LABS
(CONST 3) = ZL-GET
(CONST 4) = ($POS $NEG)
(CONST 5) = MEMQ
(CONST 6) = $PZ
(CONST 7) = DGR
(CONST 8) = $NZ
(CONST 9) = DLS
(CONST 10) = $PN
(CONST 11) = DMARK
(CONST 12) = DATA
(CONST 13) = L
(CONST 14) = VISIBLEP
(CONST 15) = DNQF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L Y X)
writes special variable : (L)
74 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; +LABS
9     (CALL2&PUSH 3)                      ; ZL-GET
11    (CONST&PUSH 4)                      ; ($POS $NEG)
12    (CALL2&JMPIF 5 L92)                 ; MEMQ
16    (GETVALUE&PUSH 0)                   ; X
18    (CONST&PUSH 2)                      ; +LABS
19    (CALL2&PUSH 3)                      ; ZL-GET
21    (JMPIFEQTO 6 L95)                   ; $PZ
25    (GETVALUE&PUSH 0)                   ; X
27    (CONST&PUSH 2)                      ; +LABS
28    (CALL2&PUSH 3)                      ; ZL-GET
30    (JMPIFEQTO 8 L103)                  ; $NZ
34    (GETVALUE&PUSH 0)                   ; X
36    (CONST&PUSH 10)                     ; $PN
37    (CALL2&JMPIF 11 L111)               ; DMARK
41    (GETVALUE&PUSH 0)                   ; X
43    (GETVALUE 1)                        ; Y
45    (JMPIFEQ L114)
48    (GETVALUE&PUSH 0)                   ; X
50    (CONST&PUSH 12)                     ; DATA
51    (CALL2 3)                           ; ZL-GET
53    (BIND 13)                           ; L
55    (GETVALUE 13)                       ; L
57    (JMPIFNOT L86)
59    L59
59    (GETVALUE 13)                       ; L
61    (CAR&PUSH)
62    (CALL1&JMPIFNOT 14 L77)             ; VISIBLEP
65    (GETVALUE&PUSH 0)                   ; X
67    (GETVALUE&PUSH 1)                   ; Y
69    (GETVALUE 13)                       ; L
71    (CAR&PUSH)
72    (CALL 3 15)                         ; DNQF
75    (JMPIF L117)
77    L77
77    (GETVALUE 13)                       ; L
79    (CDR)
80    (SETVALUE 13)                       ; L
82    (GETVALUE 13)                       ; L
84    (JMPIF L59)
86    L86
86    (NIL)
87    (UNBIND1)
88    L88
88    (UNBIND 2)
90    (SKIP&RET 3)
92    L92
92    (NIL)
93    (JMP L88)
95    L95
95    (GETVALUE&PUSH 0)                   ; X
97    (GETVALUE&PUSH 1)                   ; Y
99    (CALL2 7)                           ; DGR
101   (JMP L88)
103   L103
103   (GETVALUE&PUSH 0)                   ; X
105   (GETVALUE&PUSH 1)                   ; Y
107   (CALL2 9)                           ; DLS
109   (JMP L88)
111   L111
111   (NIL)
112   (JMP L88)
114   L114
114   (NIL)
115   (JMP L88)
117   L117
117   (T)
118   (UNBIND1)
119   (JMP L88)


Disassembly of function #:|(DEFUN DNQF (X Y F) ...)-146|
(CONST 0) = DNQF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DNQF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DNQF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DNQF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DNQF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DNQF
8     (SKIP&RET 1)


Disassembly of function DNQF
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = F
(CONST 3) = MEQP
(CONST 4) = DNQ
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X F)
34 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; F
9     (GETVALUE 2)                        ; F
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFNOTEQTO 3 L42)                ; MEQP
16    (GETVALUE&PUSH 0)                   ; X
18    (GETVALUE 2)                        ; F
20    (CAR)
21    (CDR)
22    (CAR)
23    (JMPIFEQ L36)
25    (GETVALUE 2)                        ; F
27    (CAR)
28    L28
28    (CDR)
29    (CAR&PUSH)
30    (GETVALUE&PUSH 1)                   ; Y
32    (CALL2 4)                           ; DNQ
34    (JMP L43)
36    L36
36    (GETVALUE 2)                        ; F
38    (CAR)
39    (CDR)
40    (JMP L28)
42    L42
42    (NIL)
43    L43
43    (UNBIND 3)
45    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DMARK (X M &AUX) ...)-147|
(CONST 0) = DMARK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DMARK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DMARK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DMARK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DMARK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DMARK
8     (SKIP&RET 1)


Disassembly of function DMARK
(CONST 0) = X
(CONST 1) = M
(CONST 2) = +LABS
(CONST 3) = ZL-GET
(CONST 4) = DBTRACE
(CONST 5) = "marking ~M ~M"
(CONST 6) = MTELL
(CONST 7) = A-ATOM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (+LABS DBTRACE X M)
writes special variable : (+LABS)
39 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (GETVALUE&PUSH 1)                   ; M
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST&PUSH 2)                      ; +LABS
11    (CALL2 3)                           ; ZL-GET
13    (EQ)
14    (JMPIF1 L53)
16    (GETVALUE 4)                        ; DBTRACE
18    (JMPIFNOT L37)
20    (T&PUSH)
21    (CONST&PUSH 5)                      ; "marking ~M ~M"
22    (GETVALUE 0)                        ; X
24    (JMPIFATOM L57)
26    (GETVALUE 0)                        ; X
28    (CAR)
29    L29
29    (PUSH)
30    (GETVALUE&PUSH 1)                   ; M
32    (CALL 3 6)                          ; MTELL
35    (SKIP 1)
37    L37
37    (GETVALUE&PUSH 0)                   ; X
39    (GETVALUE 2)                        ; +LABS
41    (CONS)
42    (SETVALUE 2)                        ; +LABS
44    (GETVALUE&PUSH 0)                   ; X
46    (CONST&PUSH 2)                      ; +LABS
47    (GETVALUE&PUSH 1)                   ; M
49    (CALL 3 7)                          ; A-ATOM
52    (NIL)
53    L53
53    (UNBIND 2)
55    (SKIP&RET 3)
57    L57
57    (GETVALUE 0)                        ; X
59    (JMP L29)


Disassembly of function #:|(DEFUN DADDGR (FLAG X) ...)-148|
(CONST 0) = DADDGR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DADDGR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DADDGR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DADDGR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DADDGR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DADDGR
8     (SKIP&RET 1)


Disassembly of function DADDGR
(CONST 0) = FLAG
(CONST 1) = X
(CONST 2) = LHS
(CONST 3) = RHS
(CONST 4) = COMPSPLT
(CONST 5) = MGRP
(CONST 6) = DINTERN
(CONST 7) = MDATA
(CONST 8) = MNUMP
(CONST 9) = CONSTANT
(CONST 10) = (MLESSP)
(CONST 11) = (MGREATERP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RHS LHS FLAG X)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FLAG
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (NIL)
7     (BIND 2)                            ; LHS
9     (NIL)
10    (BIND 3)                            ; RHS
12    (GETVALUE&PUSH 1)                   ; X
14    (CALL1 4)                           ; COMPSPLT
16    (GETVALUE&PUSH 0)                   ; FLAG
18    (CONST&PUSH 5)                      ; MGRP
19    (GETVALUE&PUSH 2)                   ; LHS
21    (CALL1&PUSH 6)                      ; DINTERN
23    (GETVALUE&PUSH 3)                   ; RHS
25    (CALL1&PUSH 6)                      ; DINTERN
27    (CALL 4 7)                          ; MDATA
30    (GETVALUE&PUSH 2)                   ; LHS
32    (CALL1&JMPIF 8 L52)                 ; MNUMP
35    (GETVALUE&PUSH 2)                   ; LHS
37    (CALL1&JMPIF 9 L52)                 ; CONSTANT
40    (CONST&PUSH 11)                     ; (MGREATERP)
41    (GETVALUE&PUSH 2)                   ; LHS
43    (GETVALUE 3)                        ; RHS
45    L45
45    (PUSH)
46    (LIST 3)
48    (UNBIND 4)
50    (SKIP&RET 3)
52    L52
52    (CONST&PUSH 10)                     ; (MLESSP)
53    (GETVALUE&PUSH 3)                   ; RHS
55    (GETVALUE 2)                        ; LHS
57    (JMP L45)


Disassembly of function #:|(DEFUN DADDGQ (FLAG X) ...)-149|
(CONST 0) = DADDGQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DADDGQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DADDGQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DADDGQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DADDGQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DADDGQ
8     (SKIP&RET 1)


Disassembly of function DADDGQ
(CONST 0) = FLAG
(CONST 1) = X
(CONST 2) = LHS
(CONST 3) = RHS
(CONST 4) = COMPSPLT
(CONST 5) = MGQP
(CONST 6) = DINTERN
(CONST 7) = MDATA
(CONST 8) = MNUMP
(CONST 9) = CONSTANT
(CONST 10) = (MLEQP)
(CONST 11) = (MGEQP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RHS LHS FLAG X)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FLAG
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (NIL)
7     (BIND 2)                            ; LHS
9     (NIL)
10    (BIND 3)                            ; RHS
12    (GETVALUE&PUSH 1)                   ; X
14    (CALL1 4)                           ; COMPSPLT
16    (GETVALUE&PUSH 0)                   ; FLAG
18    (CONST&PUSH 5)                      ; MGQP
19    (GETVALUE&PUSH 2)                   ; LHS
21    (CALL1&PUSH 6)                      ; DINTERN
23    (GETVALUE&PUSH 3)                   ; RHS
25    (CALL1&PUSH 6)                      ; DINTERN
27    (CALL 4 7)                          ; MDATA
30    (GETVALUE&PUSH 2)                   ; LHS
32    (CALL1&JMPIF 8 L52)                 ; MNUMP
35    (GETVALUE&PUSH 2)                   ; LHS
37    (CALL1&JMPIF 9 L52)                 ; CONSTANT
40    (CONST&PUSH 11)                     ; (MGEQP)
41    (GETVALUE&PUSH 2)                   ; LHS
43    (GETVALUE 3)                        ; RHS
45    L45
45    (PUSH)
46    (LIST 3)
48    (UNBIND 4)
50    (SKIP&RET 3)
52    L52
52    (CONST&PUSH 10)                     ; (MLEQP)
53    (GETVALUE&PUSH 3)                   ; RHS
55    (GETVALUE 2)                        ; LHS
57    (JMP L45)


Disassembly of function #:|(DEFUN DADDEQ (FLAG X) ...)-150|
(CONST 0) = DADDEQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DADDEQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DADDEQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DADDEQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DADDEQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DADDEQ
8     (SKIP&RET 1)


Disassembly of function DADDEQ
(CONST 0) = FLAG
(CONST 1) = X
(CONST 2) = LHS
(CONST 3) = RHS
(CONST 4) = COMPSPLT-EQ
(CONST 5) = MEQP
(CONST 6) = DINTERN
(CONST 7) = MDATA
(CONST 8) = ($EQUAL)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RHS LHS FLAG X)
23 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; FLAG
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (NIL)
7     (BIND 2)                            ; LHS
9     (NIL)
10    (BIND 3)                            ; RHS
12    (GETVALUE&PUSH 1)                   ; X
14    (CALL1 4)                           ; COMPSPLT-EQ
16    (GETVALUE&PUSH 0)                   ; FLAG
18    (CONST&PUSH 5)                      ; MEQP
19    (GETVALUE&PUSH 2)                   ; LHS
21    (CALL1&PUSH 6)                      ; DINTERN
23    (GETVALUE&PUSH 3)                   ; RHS
25    (CALL1&PUSH 6)                      ; DINTERN
27    (CALL 4 7)                          ; MDATA
30    (CONST&PUSH 8)                      ; ($EQUAL)
31    (GETVALUE&PUSH 2)                   ; LHS
33    (GETVALUE&PUSH 3)                   ; RHS
35    (LIST 3)
37    (UNBIND 4)
39    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DADDNQ (FLAG X) ...)-151|
(CONST 0) = DADDNQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DADDNQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DADDNQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DADDNQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DADDNQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DADDNQ
8     (SKIP&RET 1)


Disassembly of function DADDNQ
(CONST 0) = FLAG
(CONST 1) = X
(CONST 2) = LHS
(CONST 3) = RHS
(CONST 4) = COMPSPLT-EQ
(CONST 5) = MTIMESP
(CONST 6) = 0
(CONST 7) = MEXPTP
(CONST 8) = MNQP
(CONST 9) = DINTERN
(CONST 10) = MDATA
(CONST 11) = NEG
(CONST 12) = (MNOT)
(CONST 13) = ($EQUAL)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FLAG RHS LHS X)
102 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; FLAG
3     (LOAD 4)
4     (BIND 1)                            ; X
6     (NIL)
7     (BIND 2)                            ; LHS
9     (NIL)
10    (BIND 3)                            ; RHS
12    (GETVALUE&PUSH 1)                   ; X
14    (CALL1 4)                           ; COMPSPLT-EQ
16    (GETVALUE&PUSH 2)                   ; LHS
18    (CALL1&JMPIFNOT 5 L27)              ; MTIMESP
21    (GETVALUE&PUSH 3)                   ; RHS
23    (JMPIFEQTO 6 L95)                   ; 0
27    L27
27    (GETVALUE&PUSH 2)                   ; LHS
29    (CALL1&JMPIFNOT 7 L66)              ; MEXPTP
32    (GETVALUE&PUSH 3)                   ; RHS
34    (CALL1&JMPIFNOT 7 L66)              ; MEXPTP
37    (GETVALUE 2)                        ; LHS
39    (CDR)
40    (CDR)
41    (CAR&PUSH)
42    (CALLS2&JMPIFNOT 12 L66)            ; INTEGERP
45    (GETVALUE 3)                        ; RHS
47    (CDR)
48    (CDR)
49    (CAR&PUSH)
50    (CALLS2&JMPIFNOT 12 L66)            ; INTEGERP
53    (GETVALUE 2)                        ; LHS
55    (CDR)
56    (CDR)
57    (CAR&PUSH)
58    (GETVALUE 3)                        ; RHS
60    (CDR)
61    (CDR)
62    (CAR&PUSH)
63    (CALLS2&JMPIF 2 L120)               ; EQUAL
66    L66
66    (GETVALUE&PUSH 0)                   ; FLAG
68    (CONST&PUSH 8)                      ; MNQP
69    (GETVALUE&PUSH 2)                   ; LHS
71    (CALL1&PUSH 9)                      ; DINTERN
73    (GETVALUE 3)                        ; RHS
75    L75
75    (PUSH)
76    (CALL1&PUSH 9)                      ; DINTERN
78    (CALL 4 10)                         ; MDATA
81    L81
81    (CONST&PUSH 12)                     ; (MNOT)
82    (CONST&PUSH 13)                     ; ($EQUAL)
83    (GETVALUE&PUSH 2)                   ; LHS
85    (GETVALUE&PUSH 3)                   ; RHS
87    (LIST&PUSH 3)
89    (LIST 2)
91    (UNBIND 4)
93    (SKIP&RET 3)
95    L95
95    (GETVALUE 2)                        ; LHS
97    (CDR&PUSH)
98    (NIL&PUSH)
99    (JMP L112)
101   L101
101   (LOAD&CAR&STORE 1 0)
104   (GETVALUE&PUSH 0)                   ; FLAG
106   (LOAD&PUSH 1)
107   (JSR L0)
110   (LOAD&CDR&STORE 1)
112   L112
112   (LOAD&PUSH 1)
113   (CALLS1&JMPIFNOT 146 L101)          ; ENDP
116   (SKIP 2)
118   (JMP L81)
120   L120
120   (GETVALUE&PUSH 0)                   ; FLAG
122   (CONST&PUSH 8)                      ; MNQP
123   (GETVALUE 2)                        ; LHS
125   (CDR)
126   (CAR&PUSH)
127   (CALL1&PUSH 9)                      ; DINTERN
129   (GETVALUE 3)                        ; RHS
131   (CDR)
132   (CAR&PUSH)
133   (CALL1&PUSH 9)                      ; DINTERN
135   (CALL 4 10)                         ; MDATA
138   (GETVALUE 2)                        ; LHS
140   (CDR)
141   (CDR)
142   (CAR&PUSH)
143   (CALLS2&JMPIF 148 L81)              ; ODDP
147   (GETVALUE&PUSH 0)                   ; FLAG
149   (CONST&PUSH 8)                      ; MNQP
150   (GETVALUE 2)                        ; LHS
152   (CDR)
153   (CAR&PUSH)
154   (CALL1&PUSH 9)                      ; DINTERN
156   (GETVALUE 3)                        ; RHS
158   (CDR)
159   (CAR&PUSH)
160   (CALL1 11)                          ; NEG
162   (JMP L75)


Disassembly of function #:|(DEFUN TDPOS (X) ...)-152|
(CONST 0) = TDPOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TDPOS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TDPOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TDPOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TDPOS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TDPOS
8     (SKIP&RET 1)


Disassembly of function TDPOS
(CONST 0) = X
(CONST 1) = DADDGR
(CONST 2) = $POS
(CONST 3) = LOCALS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOCALS X)
writes special variable : (LOCALS)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 1)                           ; DADDGR
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST 2)                           ; $POS
11    (CONS&PUSH)
12    (GETVALUE 3)                        ; LOCALS
14    (CONS)
15    (SETVALUE 3)                        ; LOCALS
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TDNEG (X) ...)-153|
(CONST 0) = TDNEG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TDNEG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TDNEG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TDNEG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TDNEG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TDNEG
8     (SKIP&RET 1)


Disassembly of function TDNEG
(CONST 0) = X
(CONST 1) = NEG
(CONST 2) = DADDGR
(CONST 3) = $NEG
(CONST 4) = LOCALS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOCALS X)
writes special variable : (LOCALS)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL1&PUSH 1)                      ; NEG
8     (CALL2 2)                           ; DADDGR
10    (GETVALUE&PUSH 0)                   ; X
12    (CONST 3)                           ; $NEG
13    (CONS&PUSH)
14    (GETVALUE 4)                        ; LOCALS
16    (CONS)
17    (SETVALUE 4)                        ; LOCALS
19    (UNBIND1)
20    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TDZERO (X) ...)-154|
(CONST 0) = TDZERO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TDZERO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TDZERO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TDZERO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TDZERO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TDZERO
8     (SKIP&RET 1)


Disassembly of function TDZERO
(CONST 0) = X
(CONST 1) = DADDEQ
(CONST 2) = $ZERO
(CONST 3) = LOCALS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOCALS X)
writes special variable : (LOCALS)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 1)                           ; DADDEQ
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST 2)                           ; $ZERO
11    (CONS&PUSH)
12    (GETVALUE 3)                        ; LOCALS
14    (CONS)
15    (SETVALUE 3)                        ; LOCALS
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TDPN (X) ...)-155|
(CONST 0) = TDPN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TDPN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TDPN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TDPN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TDPN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TDPN
8     (SKIP&RET 1)


Disassembly of function TDPN
(CONST 0) = X
(CONST 1) = DADDNQ
(CONST 2) = $PN
(CONST 3) = LOCALS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOCALS X)
writes special variable : (LOCALS)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 1)                           ; DADDNQ
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST 2)                           ; $PN
11    (CONS&PUSH)
12    (GETVALUE 3)                        ; LOCALS
14    (CONS)
15    (SETVALUE 3)                        ; LOCALS
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TDPZ (X) ...)-156|
(CONST 0) = TDPZ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TDPZ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TDPZ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TDPZ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TDPZ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TDPZ
8     (SKIP&RET 1)


Disassembly of function TDPZ
(CONST 0) = X
(CONST 1) = DADDGQ
(CONST 2) = $PZ
(CONST 3) = LOCALS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOCALS X)
writes special variable : (LOCALS)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (T&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL2 1)                           ; DADDGQ
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST 2)                           ; $PZ
11    (CONS&PUSH)
12    (GETVALUE 3)                        ; LOCALS
14    (CONS)
15    (SETVALUE 3)                        ; LOCALS
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN COMPSPLT-EQ (X) ...)-157|
(CONST 0) = COMPSPLT-EQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPSPLT-EQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPSPLT-EQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPSPLT-EQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPSPLT-EQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPSPLT-EQ
8     (SKIP&RET 1)


Disassembly of function COMPSPLT-EQ
(CONST 0) = X
(CONST 1) = COMPSPLT
(CONST 2) = LHS
(CONST 3) = 0
(CONST 4) = RHS
(CONST 5) = MEXPTP
(CONST 6) = $ODDFUN
(CONST 7) = KINDP
(CONST 8) = $INCREASING
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RHS LHS X)
writes special variables : (RHS LHS)
40 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; COMPSPLT
7     (GETVALUE&PUSH 2)                   ; LHS
9     (JMPIFNOTEQTO 3 L19)                ; 0
12    (GETVALUE 4)                        ; RHS
14    (SETVALUE 2)                        ; LHS
16    (CONST 3)                           ; 0
17    (SETVALUE 4)                        ; RHS
19    L19
19    (GETVALUE&PUSH 4)                   ; RHS
21    (CONST 3)                           ; 0
22    (EQ)
23    (JMPIFNOT1 L60)
25    (GETVALUE&PUSH 2)                   ; LHS
27    (CALL1&JMPIF 5 L54)                 ; MEXPTP
30    (GETVALUE&PUSH 2)                   ; LHS
32    (CALLS2 4)                          ; CONSP
34    (JMPIFNOT1 L60)
36    (GETVALUE 2)                        ; LHS
38    (CAR)
39    (CAR&PUSH)
40    (CONST&PUSH 6)                      ; $ODDFUN
41    (CALL2 7)                           ; KINDP
43    (JMPIFNOT1 L60)
45    (GETVALUE 2)                        ; LHS
47    (CAR)
48    (CAR&PUSH)
49    (CONST&PUSH 8)                      ; $INCREASING
50    (CALL2 7)                           ; KINDP
52    (JMPIFNOT1 L60)
54    L54
54    (GETVALUE 2)                        ; LHS
56    (CDR)
57    (CAR)
58    (SETVALUE 2)                        ; LHS
60    L60
60    (UNBIND1)
61    (SKIP&RET 2)


Disassembly of function #:|(DEFUN MDATA (FLAG R X ...) ...)-158|
(CONST 0) = MDATA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MDATA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDATA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MDATA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MDATA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MDATA
8     (SKIP&RET 1)


Disassembly of function MDATA
(CONST 0) = FLAG
(CONST 1) = X
(CONST 2) = Y
(CONST 3) = MFACT
(CONST 4) = MKILL
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X FLAG)
21 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FLAG
3     (LOAD 5)
4     (BIND 1)                            ; X
6     (LOAD 7)
7     (BIND 2)                            ; Y
9     (GETVALUE 0)                        ; FLAG
11    (JMPIF L25)
13    (LOAD&PUSH 12)
14    (GETVALUE&PUSH 1)                   ; X
16    (GETVALUE&PUSH 2)                   ; Y
18    (CALL 3 4)                          ; MKILL
21    L21
21    (UNBIND 3)
23    (SKIP&RET 5)
25    L25
25    (LOAD&PUSH 12)
26    (GETVALUE&PUSH 1)                   ; X
28    (GETVALUE&PUSH 2)                   ; Y
30    (CALL 3 3)                          ; MFACT
33    (JMP L21)


Disassembly of function #:|(DEFUN MFACT (R X Y ...) ...)-159|
(CONST 0) = MFACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFACT
8     (SKIP&RET 1)


Disassembly of function MFACT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = DATUM
(CONST 3) = F
(CONST 4) = CONTEXT
(CONST 5) = CNTXT
(CONST 6) = ADDF
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (CONTEXT F Y X)
21 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (LOAD&PUSH 9)
7     (GETVALUE&PUSH 0)                   ; X
9     (GETVALUE&PUSH 1)                   ; Y
11    (LIST&PUSH 3)
13    (CALL1 2)                           ; DATUM
15    (BIND 3)                            ; F
17    (GETVALUE&PUSH 3)                   ; F
19    (GETVALUE&PUSH 4)                   ; CONTEXT
21    (CALL2 5)                           ; CNTXT
23    (GETVALUE&PUSH 3)                   ; F
25    (GETVALUE&PUSH 0)                   ; X
27    (CALL2 6)                           ; ADDF
29    (GETVALUE&PUSH 3)                   ; F
31    (GETVALUE&PUSH 1)                   ; Y
33    (CALL2 6)                           ; ADDF
35    (UNBIND 3)
37    (SKIP&RET 4)


Disassembly of function #:|(DEFUN MKILL (R X Y) ...)-160|
(CONST 0) = MKILL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MKILL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MKILL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MKILL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MKILL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MKILL
8     (SKIP&RET 1)


Disassembly of function MKILL
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = DATUM
(CONST 3) = F
(CONST 4) = CONTEXT
(CONST 5) = KCNTXT
(CONST 6) = MAXIMA-REMF
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (CONTEXT F Y X)
22 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (LOAD&PUSH 9)
7     (GETVALUE&PUSH 0)                   ; X
9     (GETVALUE&PUSH 1)                   ; Y
11    (LIST&PUSH 3)
13    (CALL1 2)                           ; DATUM
15    (CAR)
16    (BIND 3)                            ; F
18    (GETVALUE&PUSH 3)                   ; F
20    (GETVALUE&PUSH 4)                   ; CONTEXT
22    (CALL2 5)                           ; KCNTXT
24    (GETVALUE&PUSH 3)                   ; F
26    (GETVALUE&PUSH 0)                   ; X
28    (CALL2 6)                           ; MAXIMA-REMF
30    (GETVALUE&PUSH 3)                   ; F
32    (GETVALUE&PUSH 1)                   ; Y
34    (CALL2 6)                           ; MAXIMA-REMF
36    (UNBIND 3)
38    (SKIP&RET 4)


Disassembly of function #:|(DEFUN MKIND (X Y) ...)-161|
(CONST 0) = MKIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MKIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MKIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MKIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MKIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MKIND
8     (SKIP&RET 1)


Disassembly of function MKIND
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = DINTERN
(CONST 3) = KIND
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1&PUSH 2)                      ; DINTERN
10    (GETVALUE&PUSH 1)                   ; Y
12    (CALL1&PUSH 2)                      ; DINTERN
14    (CALL2 3)                           ; KIND
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RGRP (X Y) ...)-162|
(CONST 0) = RGRP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RGRP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RGRP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RGRP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RGRP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RGRP
8     (SKIP&RET 1)


Disassembly of function RGRP
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $BFLOATP
(CONST 3) = $FLOAT2BF
(CONST 4) = SUB
(CONST 5) = $BFLOAT
(CONST 6) = 0
(CONST 7) = $POS
(CONST 8) = $NEG
(CONST 9) = $ZERO
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variables : (Y X)
91 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1&JMPIF 2 L84)                 ; $BFLOATP
12    (GETVALUE&PUSH 1)                   ; Y
14    (CALL1&JMPIF 2 L84)                 ; $BFLOATP
18    (GETVALUE&PUSH 0)                   ; X
20    (CALLS2&JMPIF 8 L105)               ; NUMBERP
24    (GETVALUE&PUSH 1)                   ; Y
26    (CALLS2&JMPIF 8 L131)               ; NUMBERP
30    (GETVALUE&PUSH 0)                   ; X
32    (GETVALUE 0)                        ; X
34    (CDR)
35    (CAR&PUSH)
36    (GETVALUE 1)                        ; Y
38    (CDR)
39    (CDR)
40    (CAR&PUSH)
41    (CALLSR 2 55)                       ; *
44    (SETVALUE 0)                        ; X
46    (LOAD 0)
47    (CDR)
48    (CDR)
49    (CAR&PUSH)
50    (GETVALUE 1)                        ; Y
52    (CDR)
53    (CAR&PUSH)
54    (CALLSR 2 55)                       ; *
57    (SETVALUE 1)                        ; Y
59    (SKIP 1)
61    L61
61    (GETVALUE&PUSH 0)                   ; X
63    (GETVALUE&PUSH 1)                   ; Y
65    (CALLSR&JMPIF 1 48 L152)            ; >
70    (GETVALUE&PUSH 1)                   ; Y
72    (GETVALUE&PUSH 0)                   ; X
74    (CALLSR&JMPIF 1 48 L156)            ; >
79    (CONST 9)                           ; $ZERO
80    L80
80    (UNBIND 2)
82    (SKIP&RET 3)
84    L84
84    (T)
85    (BIND 3)                            ; $FLOAT2BF
87    (GETVALUE&PUSH 0)                   ; X
89    (GETVALUE&PUSH 1)                   ; Y
91    (CALL2&PUSH 4)                      ; SUB
93    (CALL1 5)                           ; $BFLOAT
95    (CDR)
96    (CAR)
97    (UNBIND1)
98    (SETVALUE 0)                        ; X
100   (CONST 6)                           ; 0
101   (SETVALUE 1)                        ; Y
103   (JMP L61)
105   L105
105   (GETVALUE&PUSH 1)                   ; Y
107   (CALLS2&JMPIF 8 L61)                ; NUMBERP
110   (GETVALUE&PUSH 0)                   ; X
112   (GETVALUE 1)                        ; Y
114   (CDR)
115   (CDR)
116   (CAR&PUSH)
117   (CALLSR 2 55)                       ; *
120   (SETVALUE 0)                        ; X
122   (GETVALUE 1)                        ; Y
124   (CDR)
125   (CAR)
126   (SETVALUE 1)                        ; Y
128   (JMP L61)
131   L131
131   (GETVALUE 0)                        ; X
133   (CDR)
134   (CDR)
135   (CAR&PUSH)
136   (GETVALUE&PUSH 1)                   ; Y
138   (CALLSR 2 55)                       ; *
141   (SETVALUE 1)                        ; Y
143   (GETVALUE 0)                        ; X
145   (CDR)
146   (CAR)
147   (SETVALUE 0)                        ; X
149   (JMP L61)
152   L152
152   (CONST 7)                           ; $POS
153   (JMP L80)
156   L156
156   (CONST 8)                           ; $NEG
157   (JMP L80)


Disassembly of function #:|(DEFUN MCONS (X L) ...)-163|
(CONST 0) = MCONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MCONS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MCONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MCONS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MCONS
8     (SKIP&RET 1)


Disassembly of function MCONS
(CONST 0) = X
(CONST 1) = L
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X L)
13 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; L
6     (GETVALUE 1)                        ; L
8     (CAR&PUSH)
9     (GETVALUE&PUSH 0)                   ; X
11    (GETVALUE 1)                        ; L
13    (CDR)
14    (CONS)
15    (CONS)
16    (UNBIND 2)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN FLIP (S) ...)-164|
(CONST 0) = FLIP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FLIP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FLIP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FLIP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FLIP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FLIP
8     (SKIP&RET 1)


Disassembly of function FLIP
(CONST 0) = $POS
(CONST 1) = $NEG
(CONST 2) = $PZ
(CONST 3) = $NZ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (LOAD&PUSH 1)
1     (JMPIFEQTO 0 L19)                   ; $POS
4     (LOAD&PUSH 1)
5     (JMPIFEQTO 1 L22)                   ; $NEG
8     (LOAD&PUSH 1)
9     (JMPIFEQTO 2 L25)                   ; $PZ
12    (LOAD&PUSH 1)
13    (JMPIFEQTO 3 L28)                   ; $NZ
16    (LOAD 1)
17    (SKIP&RET 2)
19    L19
19    (CONST 1)                           ; $NEG
20    (SKIP&RET 2)
22    L22
22    (CONST 0)                           ; $POS
23    (SKIP&RET 2)
25    L25
25    (CONST 3)                           ; $NZ
26    (SKIP&RET 2)
28    L28
28    (CONST 2)                           ; $PZ
29    (SKIP&RET 2)


Disassembly of function #:|(DEFUN STRONGP (X Y) ...)-165|
(CONST 0) = STRONGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRONGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRONGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRONGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRONGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRONGP
8     (SKIP&RET 1)


Disassembly of function STRONGP
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = $PNZ
(CONST 3) = ($PZ $NZ $PN)
(CONST 4) = MEMQ
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
21 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 1)                   ; Y
8     (CONST 2)                           ; $PNZ
9     (EQ)
10    (JMPIF1 L25)
12    (GETVALUE&PUSH 0)                   ; X
14    (JMPIFEQTO 2 L29)                   ; $PNZ
17    (GETVALUE&PUSH 1)                   ; Y
19    (CONST&PUSH 3)                      ; ($PZ $NZ $PN)
20    (CALL2 4)                           ; MEMQ
22    (JMPIF1 L25)
24    (NIL)
25    L25
25    (UNBIND 2)
27    (SKIP&RET 3)
29    L29
29    (NIL)
30    (JMP L25)


Disassembly of function #:|(DEFUN MUNFORMAT (FORM) ...)-166|
(CONST 0) = MUNFORMAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MUNFORMAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MUNFORMAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MUNFORMAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MUNFORMAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MUNFORMAT
8     (SKIP&RET 1)


Disassembly of function MUNFORMAT
(CONST 0) = FORM
(CONST 1) = MUNFORMAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (JMPIFATOM L23)
7     (GETVALUE 0)                        ; FORM
9     (CAR)
10    (CAR&PUSH)
11    (CONST&SYMBOL-FUNCTION&PUSH 1)      ; MUNFORMAT
13    (GETVALUE 0)                        ; FORM
15    (CDR&PUSH)
16    (CALLSR 0 22)                       ; MAPCAR
19    (CONS)
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE 0)                        ; FORM
25    (JMP L20)


Disassembly of function #:|(DEFMFUN DECLAREKIND (VAR PROP) ...)-167|
(CONST 0) = DECLAREKIND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DECLAREKIND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DECLAREKIND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DECLAREKIND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DECLAREKIND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DECLAREKIND
8     (SKIP&RET 1)


Disassembly of function DECLAREKIND
(CONST 0) = VAR
(CONST 1) = KIND
(CONST 2) = TRUEP
(CONST 3) = FALSEP
(CONST 4) = 
(($INTEGER . $NONINTEGER) ($NONINTEGER . $INTEGER) ($INCREASING . $DECREASING)
 ($DECREASING . $INCREASING) ($SYMMETRIC . $ANTISYMMETRIC)
 ($ANTISYMMETRIC . $SYMMETRIC) ($ODDFUN . $EVENFUN) ($EVENFUN . $ODDFUN))
(CONST 5) = ASSQ
(CONST 6) = "Inconsistent Declaration: ~:M"
(CONST 7) = ($DECLARE)
(CONST 8) = MERROR
(CONST 9) = MKIND
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
42 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; VAR
3     (NIL&PUSH)
4     (CONST&PUSH 1)                      ; KIND
5     (GETVALUE&PUSH 0)                   ; VAR
7     (LOAD&PUSH 7)
8     (LIST&PUSH 3)
10    (CALL1&JMPIF 2 L44)                 ; TRUEP
13    (CONST&PUSH 1)                      ; KIND
14    (GETVALUE&PUSH 0)                   ; VAR
16    (LOAD&PUSH 7)
17    (LIST&PUSH 3)
19    (CALL1&JMPIF 3 L50)                 ; FALSEP
22    (LOAD&PUSH 5)
23    (CONST&PUSH 4)                      ; (# # # ...)
24    (CALL2 5)                           ; ASSQ
26    (STORE 0)
27    (JMPIFNOT L39)
29    (CONST&PUSH 1)                      ; KIND
30    (GETVALUE&PUSH 0)                   ; VAR
32    (LOAD&CDR&PUSH 2)
34    (LIST&PUSH 3)
36    (CALL1&JMPIF 2 L50)                 ; TRUEP
39    L39
39    (GETVALUE&PUSH 0)                   ; VAR
41    (LOAD&PUSH 6)
42    (CALL2 9)                           ; MKIND
44    L44
44    (T)
45    (SKIP 1)
47    L47
47    (UNBIND1)
48    (SKIP&RET 3)
50    L50
50    (CONST&PUSH 6)                      ; "Inconsistent Declaration: ~:M"
51    (CONST&PUSH 7)                      ; ($DECLARE)
52    (GETVALUE&PUSH 0)                   ; VAR
54    (LOAD&PUSH 8)
55    (LIST&PUSH 3)
57    (CALL2 8)                           ; MERROR
59    (SKIP 1)
61    (JMP L47)


Disassembly of function #:|(DEFUN COMPSPLT (X) ...)-168|
(CONST 0) = COMPSPLT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPSPLT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPSPLT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPSPLT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPSPLT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPSPLT
8     (SKIP&RET 1)


Disassembly of function COMPSPLT
(CONST 0) = X
(CONST 1) = LHS
(CONST 2) = 0
(CONST 3) = RHS
(CONST 4) = SYMBOLS
(CONST 5) = COMPSPLT2
(CONST 6) = COMPSPLT1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variables : (RHS LHS)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L26)
7     (GETVALUE 0)                        ; X
9     (CAR)
10    (JMPIFATOM L35)
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1 4)                           ; SYMBOLS
16    (CDR)
17    (JMPIF L44)
19    (GETVALUE&PUSH 0)                   ; X
21    (CALL1 6)                           ; COMPSPLT1
23    L23
23    (UNBIND1)
24    (SKIP&RET 2)
26    L26
26    (GETVALUE 0)                        ; X
28    (SETVALUE 1)                        ; LHS
30    (CONST 2)                           ; 0
31    (SETVALUE 3)                        ; RHS
33    (JMP L23)
35    L35
35    (GETVALUE 0)                        ; X
37    (SETVALUE 1)                        ; LHS
39    (CONST 2)                           ; 0
40    (SETVALUE 3)                        ; RHS
42    (JMP L23)
44    L44
44    (GETVALUE&PUSH 0)                   ; X
46    (CALL1 5)                           ; COMPSPLT2
48    (JMP L23)


Disassembly of function #:|(DEFUN COMPSPLT1 (X) ...)-169|
(CONST 0) = COMPSPLT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPSPLT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPSPLT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPSPLT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPSPLT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPSPLT1
8     (SKIP&RET 1)


Disassembly of function COMPSPLT1
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = EXP
(CONST 3) = SUCCESS
(CONST 4) = SYMBOLS
(CONST 5) = MPLUS
(CONST 6) = SPLITSUM
(CONST 7) = MTIMES
(CONST 8) = SPLITPROD
(CONST 9) = LHS
(CONST 10) = RHS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP SUCCESS X)
writes special variables : (RHS LHS SUCCESS EXP)
55 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 0
6     (LIST 2)
8     (BIND 2)                            ; EXP
10    (NIL)
11    (BIND 3)                            ; SUCCESS
13    (GETVALUE 3)                        ; SUCCESS
15    (JMPIFNOT L35)
17    (JMP L70)
19    L19
19    (GETVALUE&PUSH 2)                   ; EXP
21    (CALL1 6)                           ; SPLITSUM
23    (JMP L29)
25    L25
25    (GETVALUE&PUSH 2)                   ; EXP
27    (CALL1 8)                           ; SPLITPROD
29    L29
29    (SETVALUE 2)                        ; EXP
31    (GETVALUE 3)                        ; SUCCESS
33    (JMPIF L70)
35    L35
35    (GETVALUE 2)                        ; EXP
37    (CDR)
38    (CAR&PUSH)
39    (CALL1&JMPIF 4 L70)                 ; SYMBOLS
42    (GETVALUE 2)                        ; EXP
44    (CAR)
45    (JMPIFATOM L63)
47    (GETVALUE 2)                        ; EXP
49    (CAR)
50    (CAR)
51    (CAR&PUSH)
52    (JMPIFEQTO 5 L19)                   ; MPLUS
55    (GETVALUE 2)                        ; EXP
57    (CAR)
58    (CAR)
59    (CAR&PUSH)
60    (JMPIFEQTO 7 L25)                   ; MTIMES
63    L63
63    (T)
64    (SETVALUE 3)                        ; SUCCESS
66    (GETVALUE 3)                        ; SUCCESS
68    (JMPIFNOT L35)
70    L70
70    (GETVALUE 2)                        ; EXP
72    (CAR)
73    (SETVALUE 9)                        ; LHS
75    (GETVALUE 2)                        ; EXP
77    (CDR)
78    (CAR)
79    (SETVALUE 10)                       ; RHS
81    (UNBIND 3)
83    (SKIP&RET 2)


Disassembly of function #:|(DEFUN COMPSPLT2 (X) ...)-170|
(CONST 0) = COMPSPLT2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPSPLT2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPSPLT2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPSPLT2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPSPLT2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPSPLT2
8     (SKIP&RET 1)


Disassembly of function COMPSPLT2
(CONST 0) = X
(CONST 1) = LHS
(CONST 2) = 0
(CONST 3) = RHS
(CONST 4) = NEGP
(CONST 5) = NEG
(CONST 6) = MPLUS
(CONST 7) = SYMBOLS
(CONST 8) = INTERSECT*
(CONST 9) = MNUMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variables : (RHS LHS)
118 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L128)
8     (GETVALUE 0)                        ; X
10    (CAR)
11    (JMPIFATOM L128)
14    (GETVALUE&PUSH 0)                   ; X
16    (CALL1&JMPIF 4 L137)                ; NEGP
20    (GETVALUE 0)                        ; X
22    (CDR)
23    (CDR)
24    (CDR)
25    (JMPIF L140)
28    (GETVALUE 0)                        ; X
30    (CAR)
31    (CAR&PUSH)
32    (JMPIFNOTEQTO 6 L140)               ; MPLUS
36    (GETVALUE 0)                        ; X
38    (CDR)
39    (CAR&PUSH)
40    (CALL1&PUSH 7)                      ; SYMBOLS
42    (GETVALUE 0)                        ; X
44    (CDR)
45    (CDR)
46    (CAR&PUSH)
47    (CALL1&PUSH 7)                      ; SYMBOLS
49    (CALL2&JMPIF 8 L140)                ; INTERSECT*
53    (GETVALUE 0)                        ; X
55    (CDR)
56    (CAR&PUSH)
57    (CALL1&JMPIF 4 L67)                 ; NEGP
60    (GETVALUE 0)                        ; X
62    (CDR)
63    (CAR&PUSH)
64    (CALL1&JMPIFNOT 9 L76)              ; MNUMP
67    L67
67    (GETVALUE 0)                        ; X
69    (CDR)
70    (CDR)
71    (CAR&PUSH)
72    (CALL1&JMPIFNOT 4 L149)             ; NEGP
76    L76
76    (GETVALUE 0)                        ; X
78    (CDR)
79    (CAR&PUSH)
80    (CALL1&JMPIF 4 L100)                ; NEGP
83    (GETVALUE 0)                        ; X
85    (CDR)
86    (CDR)
87    (CAR&PUSH)
88    (CALL1&JMPIF 4 L160)                ; NEGP
92    (GETVALUE 0)                        ; X
94    (CDR)
95    (CDR)
96    (CAR&PUSH)
97    (CALL1&JMPIF 9 L160)                ; MNUMP
100   L100
100   (GETVALUE 0)                        ; X
102   (CDR)
103   (CAR&PUSH)
104   (CALL1&JMPIFNOT 4 L173)             ; NEGP
108   (GETVALUE 0)                        ; X
110   (CDR)
111   (CDR)
112   (CAR&PUSH)
113   (CALL1&JMPIFNOT 4 L173)             ; NEGP
116   (CONST 2)                           ; 0
117   L117
117   (SETVALUE 1)                        ; LHS
119   (GETVALUE 0)                        ; X
121   L121
121   (PUSH)
122   (CALL1 5)                           ; NEG
124   (SETVALUE 3)                        ; RHS
126   (JMP L180)
128   L128
128   (GETVALUE 0)                        ; X
130   (SETVALUE 1)                        ; LHS
132   (CONST 2)                           ; 0
133   (SETVALUE 3)                        ; RHS
135   (JMP L180)
137   L137
137   (CONST 2)                           ; 0
138   (JMP L117)
140   L140
140   (GETVALUE 0)                        ; X
142   (SETVALUE 1)                        ; LHS
144   (CONST 2)                           ; 0
145   (SETVALUE 3)                        ; RHS
147   (JMP L180)
149   L149
149   (GETVALUE 0)                        ; X
151   (CDR)
152   (CDR)
153   (CAR)
154   (SETVALUE 1)                        ; LHS
156   (GETVALUE 0)                        ; X
158   (JMP L169)
160   L160
160   (GETVALUE 0)                        ; X
162   (CDR)
163   (CAR)
164   (SETVALUE 1)                        ; LHS
166   (GETVALUE 0)                        ; X
168   (CDR)
169   L169
169   (CDR)
170   (CAR)
171   (JMP L121)
173   L173
173   (GETVALUE 0)                        ; X
175   (SETVALUE 1)                        ; LHS
177   (CONST 2)                           ; 0
178   (SETVALUE 3)                        ; RHS
180   L180
180   (UNBIND1)
181   (SKIP&RET 2)


Disassembly of function #:|(DEFUN NEGP (X) ...)-171|
(CONST 0) = NEGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEGP
8     (SKIP&RET 1)


Disassembly of function NEGP
(CONST 0) = X
(CONST 1) = MTIMESP
(CONST 2) = MNEGP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; MTIMESP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (CALL1 2)                           ; MNEGP
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SPLITSUM (EXP) ...)-172|
(CONST 0) = SPLITSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPLITSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPLITSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPLITSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPLITSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPLITSUM
8     (SKIP&RET 1)


Disassembly of function SPLITSUM
(CONST 0) = EXP
(CONST 1) = RHS
(CONST 2) = LHS
(CONST 3) = $INF
(CONST 4) = MEMQ
(CONST 5) = ADDN
(CONST 6) = SUB*
(CONST 7) = ADD2
(CONST 8) = $MINF
(CONST 9) = SYMBOLS
(CONST 10) = SUB
(CONST 11) = MPLUSP
(CONST 12) = SUCCESS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LHS RHS EXP)
writes special variables : (SUCCESS LHS RHS)
79 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (GETVALUE 0)                        ; EXP
5     (CAR)
6     (CDR&PUSH)
7     (GETVALUE 0)                        ; EXP
9     (CAR&PUSH)
10    (GETVALUE 0)                        ; EXP
12    (CDR)
13    (CAR)
14    (BIND 1)                            ; RHS
16    (LOAD 3)
17    (BIND 2)                            ; LHS
19    (LOAD&JMPIFNOT 7 L107)
23    L23
23    (CONST&PUSH 3)                      ; $INF
24    (LOAD&PUSH 8)
25    (CALL2&JMPIF 4 L64)                 ; MEMQ
28    (CONST&PUSH 8)                      ; $MINF
29    (LOAD&PUSH 8)
30    (CALL2&JMPIFNOT 4 L80)              ; MEMQ
33    (CONST&PUSH 8)                      ; $MINF
34    (GETVALUE&PUSH 1)                   ; RHS
36    (LOAD&PUSH 9)
37    (T&PUSH)
38    (CALL2&PUSH 5)                      ; ADDN
40    (CALL2&PUSH 6)                      ; SUB*
42    (CALL2 7)                           ; ADD2
44    (SETVALUE 1)                        ; RHS
46    (CONST 8)                           ; $MINF
47    L47
47    (PUSH)
48    (GETVALUE&PUSH 2)                   ; LHS
50    (LOAD&PUSH 9)
51    (T&PUSH)
52    (CALL2&PUSH 5)                      ; ADDN
54    (CALL2&PUSH 6)                      ; SUB*
56    (CALL2 7)                           ; ADD2
58    (SETVALUE 2)                        ; LHS
60    (NIL&STORE 7)
62    (JMP L101)
64    L64
64    (CONST&PUSH 3)                      ; $INF
65    (GETVALUE&PUSH 1)                   ; RHS
67    (LOAD&PUSH 9)
68    (T&PUSH)
69    (CALL2&PUSH 5)                      ; ADDN
71    (CALL2&PUSH 6)                      ; SUB*
73    (CALL2 7)                           ; ADD2
75    (SETVALUE 1)                        ; RHS
77    (CONST 3)                           ; $INF
78    (JMP L47)
80    L80
80    (LOAD&CAR&PUSH 7)
82    (CALL1&JMPIF 9 L101)                ; SYMBOLS
85    (GETVALUE&PUSH 2)                   ; LHS
87    (LOAD&CAR&PUSH 8)
89    (CALL2 10)                          ; SUB
91    (SETVALUE 2)                        ; LHS
93    (GETVALUE&PUSH 1)                   ; RHS
95    (LOAD&CAR&PUSH 8)
97    (CALL2 10)                          ; SUB
99    (SETVALUE 1)                        ; RHS
101   L101
101   (LOAD&CDR&STORE 7)
103   (LOAD&JMPIF 7 L23)
107   L107
107   (GETVALUE&PUSH 2)                   ; LHS
109   (CALL1&JMPIFNOT 11 L115)            ; MPLUSP
112   (T)
113   (SETVALUE 12)                       ; SUCCESS
115   L115
115   (GETVALUE&PUSH 2)                   ; LHS
117   (GETVALUE&PUSH 1)                   ; RHS
119   (LIST 2)
121   (UNBIND 2)
123   (SKIP 2)
125   (UNBIND1)
126   (SKIP&RET 2)


Disassembly of function #:|(DEFUN SPLITPROD (EXP) ...)-173|
(CONST 0) = SPLITPROD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SPLITPROD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SPLITPROD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SPLITPROD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SPLITPROD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SPLITPROD
8     (SKIP&RET 1)


Disassembly of function SPLITPROD
(CONST 0) = EXP
(CONST 1) = SIGN
(CONST 2) = MINUS
(CONST 3) = EVENS
(CONST 4) = ODDS
(CONST 5) = LHS
(CONST 6) = RHS
(CONST 7) = SYMBOLS
(CONST 8) = $NEG
(CONST 9) = ($POS $NEG)
(CONST 10) = MEMQ
(CONST 11) = DIV
(CONST 12) = MTIMESP
(CONST 13) = SUCCESS
(CONST 14) = SUB
(CONST 15) = COMPSPLT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (RHS LHS SIGN EXP)
writes special variables : (SUCCESS RHS LHS)
77 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; EXP
6     (CAR&PUSH)
7     (GETVALUE 0)                        ; EXP
9     (CDR)
10    (CAR&PUSH)
11    (GETVALUE 0)                        ; EXP
13    (CAR)
14    (CDR&PUSH)
15    (NIL)
16    (BIND 1)                            ; SIGN
18    (NIL)
19    (BIND 2)                            ; MINUS
21    (NIL)
22    (BIND 3)                            ; EVENS
24    (NIL)
25    (BIND 4)                            ; ODDS
27    (LOAD 14)
28    (BIND 5)                            ; LHS
30    (LOAD 16)
32    (BIND 6)                            ; RHS
34    (LOAD&JMPIFNOT 18 L83)
37    L37
37    (LOAD&CAR&PUSH 18)
39    (CALL1&JMPIF 7 L78)                 ; SYMBOLS
42    (LOAD&CAR&PUSH 18)
44    (CALL1 1)                           ; SIGN
46    (GETVALUE&PUSH 1)                   ; SIGN
48    (JMPIFNOTEQTO 8 L56)                ; $NEG
51    (LOAD 21)
53    (NOT)
54    (STORE 21)
56    L56
56    (GETVALUE&PUSH 1)                   ; SIGN
58    (CONST&PUSH 9)                      ; ($POS $NEG)
59    (CALL2&JMPIFNOT 10 L78)             ; MEMQ
62    (GETVALUE&PUSH 5)                   ; LHS
64    (LOAD&CAR&PUSH 19)
66    (CALL2 11)                          ; DIV
68    (SETVALUE 5)                        ; LHS
70    (GETVALUE&PUSH 6)                   ; RHS
72    (LOAD&CAR&PUSH 19)
74    (CALL2 11)                          ; DIV
76    (SETVALUE 6)                        ; RHS
78    L78
78    (LOAD&CDR&STORE 18)
80    (LOAD&JMPIF 18 L37)
83    L83
83    (GETVALUE&PUSH 5)                   ; LHS
85    (CALL1&JMPIF 12 L105)               ; MTIMESP
88    (LOAD&JMPIF 21 L111)
91    L91
91    (GETVALUE&PUSH 5)                   ; LHS
93    (GETVALUE 6)                        ; RHS
95    L95
95    (PUSH)
96    (LIST 2)
98    (UNBIND 6)
100   (SKIP 4)
102   (UNBIND1)
103   (SKIP&RET 2)
105   L105
105   (T)
106   (SETVALUE 13)                       ; SUCCESS
108   (LOAD&JMPIFNOT 21 L91)
111   L111
111   (GETVALUE&PUSH 5)                   ; LHS
113   (GETVALUE&PUSH 6)                   ; RHS
115   (CALL2&PUSH 14)                     ; SUB
117   (CALL1 15)                          ; COMPSPLT
119   (T)
120   (SETVALUE 13)                       ; SUCCESS
122   (GETVALUE&PUSH 6)                   ; RHS
124   (GETVALUE 5)                        ; LHS
126   (JMP L95)


Disassembly of function #:|(DEFUN SYMBOLS (X) ...)-174|
(CONST 0) = SYMBOLS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SYMBOLS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SYMBOLS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SYMBOLS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SYMBOLS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SYMBOLS
8     (SKIP&RET 1)


Disassembly of function SYMBOLS
(CONST 0) = X
(CONST 1) = %INITIALLEARNFLAG
(CONST 2) = $LISTCONSTVARS
(CONST 3) = $LISTOFVARS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X %INITIALLEARNFLAG)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; %INITIALLEARNFLAG
5     (BIND 2)                            ; $LISTCONSTVARS
7     (GETVALUE&PUSH 0)                   ; X
9     (CALL1 3)                           ; $LISTOFVARS
11    (CDR)
12    (UNBIND 2)
14    (SKIP&RET 2)


Disassembly of function #:|(EVAL-WHEN (LOAD) (SETQ %INITIALLEARNFLAG T) ...)-175-1|
(CONST 0) = %INITIALLEARNFLAG
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (%INITIALLEARNFLAG)
4 byte-code instructions:
0     (T)
1     (SETVALUE 0)                        ; %INITIALLEARNFLAG
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (SETQ %INITIALLEARNFLAG T) ...)-175-2|
(CONST 0) = (MEQUAL)
(CONST 1) = $%E
(CONST 2) = $NUMER
(CONST 3) = MGET
(CONST 4) = LEARN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MEQUAL)
1     (CONST&PUSH 1)                      ; $%E
2     (CONST&PUSH 1)                      ; $%E
3     (CONST&PUSH 2)                      ; $NUMER
4     (CALL2&PUSH 3)                      ; MGET
6     (LIST&PUSH 3)
8     (T&PUSH)
9     (CALL2 4)                           ; LEARN
11    (VALUES0)
12    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (SETQ %INITIALLEARNFLAG T) ...)-175-3|
(CONST 0) = (MEQUAL)
(CONST 1) = $%PI
(CONST 2) = $NUMER
(CONST 3) = MGET
(CONST 4) = LEARN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MEQUAL)
1     (CONST&PUSH 1)                      ; $%PI
2     (CONST&PUSH 1)                      ; $%PI
3     (CONST&PUSH 2)                      ; $NUMER
4     (CALL2&PUSH 3)                      ; MGET
6     (LIST&PUSH 3)
8     (T&PUSH)
9     (CALL2 4)                           ; LEARN
11    (VALUES0)
12    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (SETQ %INITIALLEARNFLAG T) ...)-175-4|
(CONST 0) = (MEQUAL)
(CONST 1) = $%PHI
(CONST 2) = $NUMER
(CONST 3) = MGET
(CONST 4) = LEARN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MEQUAL)
1     (CONST&PUSH 1)                      ; $%PHI
2     (CONST&PUSH 1)                      ; $%PHI
3     (CONST&PUSH 2)                      ; $NUMER
4     (CALL2&PUSH 3)                      ; MGET
6     (LIST&PUSH 3)
8     (T&PUSH)
9     (CALL2 4)                           ; LEARN
11    (VALUES0)
12    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (SETQ %INITIALLEARNFLAG T) ...)-175-5|
(CONST 0) = (MEQUAL)
(CONST 1) = $%GAMMA
(CONST 2) = $NUMER
(CONST 3) = MGET
(CONST 4) = LEARN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MEQUAL)
1     (CONST&PUSH 1)                      ; $%GAMMA
2     (CONST&PUSH 1)                      ; $%GAMMA
3     (CONST&PUSH 2)                      ; $NUMER
4     (CALL2&PUSH 3)                      ; MGET
6     (LIST&PUSH 3)
8     (T&PUSH)
9     (CALL2 4)                           ; LEARN
11    (VALUES0)
12    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (SETQ %INITIALLEARNFLAG T) ...)-175-6|
(CONST 0) = %INITIALLEARNFLAG
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (%INITIALLEARNFLAG)
4 byte-code instructions:
0     (NIL)
1     (SETVALUE 0)                        ; %INITIALLEARNFLAG
3     (VALUES0)
4     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (SETQ %INITIALLEARNFLAG T) ...)-175-7|
(CONST 0) = TRUE*
(CONST 1) = 
((PAR ($EVEN $ODD) $INTEGER) (KIND $INTEGER $RATIONAL)
 (PAR ($RATIONAL $IRRATIONAL) $REAL) (PAR ($REAL $IMAGINARY) $COMPLEX)
 (KIND %LOG $INCREASING) (KIND %ATAN $INCREASING) (KIND %ATAN $ODDFUN)
 (KIND $DELTA $EVENFUN) (KIND %SINH $INCREASING) (KIND %SINH $ODDFUN)
 (KIND %COSH $POSFUN) (KIND %TANH $INCREASING) (KIND %TANH $ODDFUN)
 (KIND %COTH $ODDFUN) (KIND %CSCH $ODDFUN) (KIND %SECH $POSFUN)
 (KIND $LI $COMPLEX) (KIND %CABS $COMPLEX) (KIND $ZETA $POSFUN))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; TRUE*
2     (CONST&PUSH 1)                      ; (# # # ...)
3     (CALLSR 0 24)                       ; MAPC
6     (VALUES0)
7     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD) (SETQ %INITIALLEARNFLAG T) ...)-175-8|
(CONST 0) = $INITIAL
(CONST 1) = $NEWCONTEXT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INITIAL
1     (CALL1 1)                           ; $NEWCONTEXT
3     (SKIP&RET 1)


Wrote file binary-clisp/compar.fas
Wrote file /cygdrive/e/temp/maxima/src/compar.lis