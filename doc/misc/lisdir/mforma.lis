Listing of compilation of file /cygdrive/e/temp/maxima/src/mforma.lisp
on 2002-12-17 13:31:58 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/mforma.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE MFORMA MACRO)-2|
(CONST 0) = MFORMA
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (MACRO)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFORMA
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (MACRO)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO DEF-MFORMAT (&OPTIONAL #) ...)-3|
(CONST 0) = DEF-MFORMAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-MFORMAT>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-MFORMAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-MFORMAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-MFORMAT>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEF-MFORMAT
10    (SKIP&RET 1)


Disassembly of function DEF-MFORMAT
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = ""
(CONST 3) = MFORMAT-OPS
(CONST 4) = PUTPROP
(CONST 5) = MFORMAT-STATE-VARS
(CONST 6) = EVAL-WHEN
(CONST 7) = (COMPILE LOAD EVAL)
(CONST 8) = DEFMACRO
(CONST 9) = DEF-MFORMAT-OP
(CONST 10) = SYMBOLCONC
(CONST 11) = (CHAR &REST BODY)
(CONST 12) = SYSTEM::BACKQUOTE
(CONST 13) = +DEF-MFORMAT-OP
(CONST 14) = ((SYSTEM::UNQUOTE CHAR) (SYSTEM::SPLICE (SYSTEM::UNQUOTE BODY)))
(CONST 15) = LIST*
(CONST 16) = '+DEF-MFORMAT-OP
(CONST 17) = QUOTE
(CONST 18) = (CHAR BODY)
(CONST 19) = DEF-MFORMAT-VAR
(CONST 20) = (VAR VAL INIT)
(CONST 21) = +DEF-MFORMAT-VAR
(CONST 22) = ((SYSTEM::UNQUOTE VAR) (SYSTEM::UNQUOTE VAL) (SYSTEM::UNQUOTE INIT))
(CONST 23) = LIST
(CONST 24) = '+DEF-MFORMAT-VAR
(CONST 25) = (VAR VAL INIT)
(CONST 26) = MFORMAT-LOOP
(CONST 27) = (&REST ENDCODE)
(CONST 28) = +MFORMAT-LOOP
(CONST 29) = ((SYSTEM::SPLICE (SYSTEM::UNQUOTE ENDCODE)))
(CONST 30) = '+MFORMAT-LOOP
(CONST 31) = (ENDCODE)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
90 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 48 L118)            ; >
9     (LOAD 2)
10    (CDR)
11    (JMPIF L123)
14    (CONST&PUSH 2)                      ; ""
15    (PUSH-UNBOUND 1)
17    (CALLS1 212)                        ; INTERN
19    L19
19    (PUSH)
20    (LOAD&PUSH 0)
21    (NIL&PUSH)
22    (CONST&PUSH 3)                      ; MFORMAT-OPS
23    (CALL 3 4)                          ; PUTPROP
26    (LOAD&PUSH 0)
27    (NIL&PUSH)
28    (CONST&PUSH 5)                      ; MFORMAT-STATE-VARS
29    (CALL 3 4)                          ; PUTPROP
32    (CONST&PUSH 6)                      ; EVAL-WHEN
33    (CONST&PUSH 7)                      ; (COMPILE LOAD EVAL)
34    (CONST&PUSH 8)                      ; DEFMACRO
35    (CONST&PUSH 9)                      ; DEF-MFORMAT-OP
36    (LOAD&PUSH 4)
37    (CALL2&PUSH 10)                     ; SYMBOLCONC
39    (CONST&PUSH 11)                     ; (CHAR &REST BODY)
40    (CONST&PUSH 12)                     ; SYSTEM::BACKQUOTE
41    (CONST&PUSH 13)                     ; +DEF-MFORMAT-OP
42    (LOAD&PUSH 7)
43    (CONST 14)                          ; (# #)
44    (LIST*&PUSH 2)
46    (CONST&PUSH 15)                     ; LIST*
47    (CONST&PUSH 16)                     ; '+DEF-MFORMAT-OP
48    (CONST&PUSH 17)                     ; QUOTE
49    (LOAD&PUSH 10)
50    (LIST&PUSH 2)
52    (CONST 18)                          ; (CHAR BODY)
53    (LIST*&PUSH 3)
55    (LIST&PUSH 3)
57    (LIST&PUSH 4)
59    (CONST&PUSH 8)                      ; DEFMACRO
60    (CONST&PUSH 19)                     ; DEF-MFORMAT-VAR
61    (LOAD&PUSH 5)
62    (CALL2&PUSH 10)                     ; SYMBOLCONC
64    (CONST&PUSH 20)                     ; (VAR VAL INIT)
65    (CONST&PUSH 12)                     ; SYSTEM::BACKQUOTE
66    (CONST&PUSH 21)                     ; +DEF-MFORMAT-VAR
67    (LOAD&PUSH 8)
68    (CONST 22)                          ; (# # #)
70    (LIST*&PUSH 2)
72    (CONST&PUSH 23)                     ; LIST
73    (CONST&PUSH 24)                     ; '+DEF-MFORMAT-VAR
74    (CONST&PUSH 17)                     ; QUOTE
75    (LOAD&PUSH 11)
76    (LIST&PUSH 2)
78    (CONST 25)                          ; (VAR VAL INIT)
80    (LIST*&PUSH 3)
82    (LIST&PUSH 3)
84    (LIST&PUSH 4)
86    (CONST&PUSH 8)                      ; DEFMACRO
87    (CONST&PUSH 26)                     ; MFORMAT-LOOP
88    (LOAD&PUSH 6)
89    (CALL2&PUSH 10)                     ; SYMBOLCONC
91    (CONST&PUSH 27)                     ; (&REST ENDCODE)
92    (CONST&PUSH 12)                     ; SYSTEM::BACKQUOTE
93    (CONST&PUSH 28)                     ; +MFORMAT-LOOP
94    (LOAD&PUSH 9)
95    (CONST 29)                          ; ((SYSTEM::SPLICE #))
97    (LIST*&PUSH 2)
99    (CONST&PUSH 15)                     ; LIST*
100   (CONST&PUSH 30)                     ; '+MFORMAT-LOOP
102   (CONST&PUSH 17)                     ; QUOTE
103   (LOAD&PUSH 12)
104   (LIST&PUSH 2)
106   (CONST 31)                          ; (ENDCODE)
108   (LIST*&PUSH 3)
110   (LIST&PUSH 3)
112   (LIST&PUSH 4)
114   (LIST 5)
116   (SKIP&RET 4)
118   L118
118   (LOAD&PUSH 2)
119   (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
121   (SKIP&RET 3)
123   L123
123   (LOAD 2)
124   (CDR)
125   (CAR)
126   (JMP L19)


Disassembly of function #:|(DEFMACRO +DEF-MFORMAT-VAR (TYPE VAR VAL ...) ...)-4|
(CONST 0) = +DEF-MFORMAT-VAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE +DEF-MFORMAT-VAR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; +DEF-MFORMAT-VAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; +DEF-MFORMAT-VAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE +DEF-MFORMAT-VAR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; +DEF-MFORMAT-VAR
10    (SKIP&RET 1)


Disassembly of function +DEF-MFORMAT-VAR
(CONST 0) = 5
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = MFORMAT-STATE-VARS
(CONST 3) = ZL-ASSOC
(CONST 4) = QUOTE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
59 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 5
4     (CALLSR&JMPIF 1 46 L74)             ; /=
9     (LOAD 2)
10    (CDR)
11    (CAR&PUSH)
12    (LOAD 3)
13    (CDR)
14    (CDR)
15    (CAR&PUSH)
16    (LOAD 4)
17    (CDR)
18    (CDR)
19    (CDR)
20    (CAR&PUSH)
21    (LOAD&PUSH 5)
22    (CALLS1&PUSH 149)                   ; FIFTH
24    (LOAD&PUSH 2)
25    (LOAD&PUSH 2)
26    (LIST&PUSH 2)
28    (LOAD&PUSH 1)
29    (LOAD&PUSH 5)
30    (CONST&PUSH 2)                      ; MFORMAT-STATE-VARS
31    (PUSH-UNBOUND 1)
33    (CALLS2&PUSH 132)                   ; GET
35    (CALL2&JMPIF 3 L57)                 ; ZL-ASSOC
38    (LOAD&PUSH 1)
39    (NIL)
40    (CONS&PUSH)
41    (LOAD&PUSH 5)
42    (CONST&PUSH 2)                      ; MFORMAT-STATE-VARS
43    (PUSH-UNBOUND 1)
45    (CALLS2&PUSH 132)                   ; GET
47    (LOAD&PUSH 6)
48    (CONST&PUSH 2)                      ; MFORMAT-STATE-VARS
49    (LOAD&PUSH 3)
50    (LOAD 3)
51    (CONS&PUSH)
52    (CALLS2 136)                        ; SYSTEM::%PUT
54    (SKIP 2)
56    (CAR)
57    L57
57    (PUSH)
58    (LOAD&CDR&PUSH 0)
60    (LOAD&PUSH 1)
61    (LOAD&PUSH 3)
62    (LOAD 2)
63    (CONS&PUSH)
64    (CALLS1 171)                        ; SYSTEM::%RPLACD
66    (SKIP 3)
68    (CONST&PUSH 4)                      ; QUOTE
69    (LOAD&PUSH 3)
70    (LIST 2)
72    (SKIP&RET 7)
74    L74
74    (LOAD&PUSH 2)
75    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
77    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO +DEF-MFORMAT-OP (TYPE CHAR &REST ...) ...)-5|
(CONST 0) = +DEF-MFORMAT-OP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE +DEF-MFORMAT-OP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; +DEF-MFORMAT-OP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; +DEF-MFORMAT-OP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE +DEF-MFORMAT-OP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; +DEF-MFORMAT-OP
10    (SKIP&RET 1)


Disassembly of function +DEF-MFORMAT-OP
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = MFORMAT-OPS
(CONST 3) = QUOTE
(CONST 4) = "MFORMAT-"
(CONST 5) = EXPLODEN
(CONST 6) = ASCII
(CONST 7) = MAKNAM
1 required argument
1 optional argument
No rest parameter
No keyword parameters
49 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L63)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (LOAD 1)
20    (JMPIFCONSP L26)
22    (LOAD&PUSH 1)
23    (LIST 1)
25    (STORE 1)
26    L26
26    (LOAD&PUSH 1)
27    (LOAD 1)
28    (CONS&PUSH)
29    (LOAD&PUSH 3)
30    (CONST&PUSH 2)                      ; MFORMAT-OPS
31    (PUSH-UNBOUND 1)
33    (CALLS2&PUSH 132)                   ; GET
35    (LOAD&PUSH 4)
36    (CONST&PUSH 2)                      ; MFORMAT-OPS
37    (LOAD&PUSH 3)
38    (LOAD 3)
39    (CONS&PUSH)
40    (CALLS2 136)                        ; SYSTEM::%PUT
42    (SKIP 2)
44    (CONST&PUSH 3)                      ; QUOTE
45    (CONST&PUSH 4)                      ; "MFORMAT-"
46    (CALL1&PUSH 5)                      ; EXPLODEN
48    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; ASCII
50    (LOAD&PUSH 4)
51    (CALLSR&PUSH 0 22)                  ; MAPCAR
54    (CALLSR&PUSH 2 35)                  ; NCONC
57    (CALL1&PUSH 7)                      ; MAKNAM
59    (LIST 2)
61    (SKIP&RET 6)
63    L63
63    (LOAD&PUSH 2)
64    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
66    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO POP-MFORMAT-ARG NIL ...)-6|
(CONST 0) = POP-MFORMAT-ARG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POP-MFORMAT-ARG>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; POP-MFORMAT-ARG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POP-MFORMAT-ARG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POP-MFORMAT-ARG>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; POP-MFORMAT-ARG
10    (SKIP&RET 1)


Disassembly of function POP-MFORMAT-ARG
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = 
(COND
 ((= ARG-INDEX N)
  (MAXIMA-ERROR "Ran out of mformat args" (LISTIFY N) 'FAIL-ACT))
 (T (PROGN (SETQ ARG-INDEX (F1+ ARG-INDEX)) (ARG ARG-INDEX))))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (COND (# #) (T #))
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO LEFTOVER-MFORMAT-ARGS? NIL ...)-7|
(CONST 0) = LEFTOVER-MFORMAT-ARGS?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LEFTOVER-MFORMAT-ARGS?>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; LEFTOVER-MFORMAT-ARGS?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LEFTOVER-MFORMAT-ARGS?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LEFTOVER-MFORMAT-ARGS?>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; LEFTOVER-MFORMAT-ARGS?
10    (SKIP&RET 1)


Disassembly of function LEFTOVER-MFORMAT-ARGS?
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = (OR (= ARG-INDEX N) (MAXIMA-ERROR "Extra mformat args" (LISTIFY N) 'FAIL-ACT))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (OR (= ARG-INDEX ...) ...)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO BIND-MFORMAT-STATE-VARS (TYPE &REST BODY) ...)-8|
(CONST 0) = BIND-MFORMAT-STATE-VARS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BIND-MFORMAT-STATE-VARS>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIND-MFORMAT-STATE-VARS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BIND-MFORMAT-STATE-VARS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BIND-MFORMAT-STATE-VARS>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; BIND-MFORMAT-STATE-VARS
10    (SKIP&RET 1)


Disassembly of function BIND-MFORMAT-STATE-VARS
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = LET
(CONST 3) = MFORMAT-STATE-VARS
1 required argument
1 optional argument
No rest parameter
No keyword parameters
42 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L56)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; LET
15    (NIL&PUSH)
16    (LOAD&PUSH 3)
17    (CONST&PUSH 3)                      ; MFORMAT-STATE-VARS
18    (PUSH-UNBOUND 1)
20    (CALLS2&PUSH 132)                   ; GET
22    (LOAD&JMPIFNOT 0 L47)
25    L25
25    (LOAD 0)
26    (CAR)
27    (CDR&PUSH)
28    (LOAD&JMPIFNOT 0 L40)
31    L31
31    (LOAD&CAR&PUSH 0)
33    (LOAD&CONS&STORE 2)
35    (LOAD&CDR&STORE 0)
37    (LOAD&JMPIF 0 L31)
40    L40
40    (SKIP 1)
42    (LOAD&CDR&STORE 0)
44    (LOAD&JMPIF 0 L25)
47    L47
47    (LOAD 1)
48    (SKIP 1)
50    (STORE 0)
51    (LOAD 2)
52    (LIST* 2)
54    (SKIP&RET 5)
56    L56
56    (LOAD&PUSH 2)
57    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
59    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO POP-MFORMAT-STRING NIL ...)-9|
(CONST 0) = POP-MFORMAT-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE POP-MFORMAT-STRING>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; POP-MFORMAT-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; POP-MFORMAT-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE POP-MFORMAT-STRING>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; POP-MFORMAT-STRING
10    (SKIP&RET 1)


Disassembly of function POP-MFORMAT-STRING
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = 
(IF (NULL SSTRING) (MAXIMA-ERROR "Runout of MFORMAT string" NIL 'FAIL-ACT)
 (POP SSTRING))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (IF (NULL SSTRING) ...)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO NULL-MFORMAT-STRING NIL ...)-10|
(CONST 0) = NULL-MFORMAT-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NULL-MFORMAT-STRING>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; NULL-MFORMAT-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NULL-MFORMAT-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NULL-MFORMAT-STRING>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; NULL-MFORMAT-STRING
10    (SKIP&RET 1)


Disassembly of function NULL-MFORMAT-STRING
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = (NULL SSTRING)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (NULL SSTRING)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO TOP-MFORMAT-STRING NIL ...)-11|
(CONST 0) = TOP-MFORMAT-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TOP-MFORMAT-STRING>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; TOP-MFORMAT-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TOP-MFORMAT-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TOP-MFORMAT-STRING>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; TOP-MFORMAT-STRING
10    (SKIP&RET 1)


Disassembly of function TOP-MFORMAT-STRING
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = 
(IF (NULL SSTRING) (MAXIMA-ERROR "Runout of MFORMAT string" NIL 'FAIL-ACT)
 (CAR SSTRING))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (IF (NULL SSTRING) ...)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO CDR-MFORMAT-STRING NIL ...)-12|
(CONST 0) = CDR-MFORMAT-STRING
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CDR-MFORMAT-STRING>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; CDR-MFORMAT-STRING
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CDR-MFORMAT-STRING
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CDR-MFORMAT-STRING>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; CDR-MFORMAT-STRING
10    (SKIP&RET 1)


Disassembly of function CDR-MFORMAT-STRING
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = (SETQ SSTRING (CDR SSTRING))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (SETQ SSTRING (CDR SSTRING))
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO MFORMAT-DISPATCH-ON-CHAR (TYPE) ...)-13|
(CONST 0) = MFORMAT-DISPATCH-ON-CHAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFORMAT-DISPATCH-ON-CHAR>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFORMAT-DISPATCH-ON-CHAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFORMAT-DISPATCH-ON-CHAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFORMAT-DISPATCH-ON-CHAR>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MFORMAT-DISPATCH-ON-CHAR
10    (SKIP&RET 1)


Disassembly of function MFORMAT-DISPATCH-ON-CHAR
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = PROGN
(CONST 3) = COND
(CONST 4) = MFORMAT-OPS
(CONST 5) = CHAR=
(CONST 6) = CHAR
(CONST 7) = OR-1
(CONST 8) = ((T (MAXIMA-ERROR "Unknown format op." (ASCII CHAR) 'FAIL-ACT)))
(CONST 9) = MFORMAT-STATE-VARS
(CONST 10) = IF
(CONST 11) = SETQ
(CONST 12) = #.#'APPEND
1 required argument
1 optional argument
No rest parameter
No keyword parameters
97 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L22)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; PROGN
12    (CONST&PUSH 3)                      ; COND
13    (NIL&PUSH)
14    (LOAD&PUSH 3)
15    (CONST&PUSH 4)                      ; MFORMAT-OPS
16    (PUSH-UNBOUND 1)
18    (CALLS2&PUSH 132)                   ; GET
20    (JMP L82)
22    L22
22    (LOAD&PUSH 2)
23    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
25    (SKIP&RET 3)
27    L27
27    (CONST&PUSH 5)                      ; CHAR=
28    (CONST&PUSH 6)                      ; CHAR
29    (LOAD&CAR&PUSH 2)
31    (LIST 3)
33    (JMP L72)
35    L35
35    (LOAD&CAR&PUSH 0)
37    (LOAD 0)
38    (CAR)
39    (JMPIFATOM L27)
41    (CONST&PUSH 7)                      ; OR-1
42    (NIL&PUSH)
43    (LOAD&CAR&PUSH 2)
45    (JMP L60)
47    L47
47    (LOAD&CAR&PUSH 0)
49    (CONST&PUSH 5)                      ; CHAR=
50    (CONST&PUSH 6)                      ; CHAR
51    (LOAD&PUSH 2)
52    (LIST&PUSH 3)
54    (LOAD&CONS&STORE 2)
56    (SKIP 1)
58    (LOAD&CDR&STORE 0)
60    L60
60    (LOAD&PUSH 0)
61    (CALLS1&JMPIFNOT 146 L47)           ; ENDP
64    (SKIP 1)
66    (LOAD&PUSH 0)
67    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
69    (SKIP 1)
71    (CONS)
72    L72
72    (PUSH)
73    (LOAD 1)
74    (CDR)
75    (CONS&PUSH)
76    (LOAD&CONS&STORE 2)
78    (SKIP 1)
80    (LOAD&CDR&STORE 0)
82    L82
82    (LOAD&PUSH 0)
83    (CALLS1&JMPIFNOT 146 L35)           ; ENDP
86    (SKIP 1)
88    (LOAD&PUSH 0)
89    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
92    (CONST&PUSH 8)                      ; ((T #))
93    (CALLSR 2 34)                       ; APPEND
96    (CONS&PUSH)
97    (NIL&PUSH)
98    (LOAD&PUSH 3)
99    (CONST&PUSH 9)                      ; MFORMAT-STATE-VARS
100   (PUSH-UNBOUND 1)
102   (CALLS2&PUSH 132)                   ; GET
104   (JMP L126)
106   L106
106   (LOAD&CAR&PUSH 0)
108   (CONST&PUSH 10)                     ; IF
109   (LOAD&CAR&PUSH 1)
111   (CONST&PUSH 11)                     ; SETQ
112   (CONST&PUSH 12)                     ; #.#'APPEND
113   (LOAD 4)
114   (CDR)
115   (APPLY 0)
117   (CONS&PUSH)
118   (LIST&PUSH 3)
120   (LOAD&CONS&STORE 2)
122   (SKIP 1)
124   (LOAD&CDR&STORE 0)
126   L126
126   (LOAD&PUSH 0)
127   (CALLS1&JMPIFNOT 146 L106)          ; ENDP
130   (SKIP 1)
132   (LOAD&PUSH 0)
133   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
135   (SKIP 1)
137   (LIST* 2)
139   (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO OR-1 (FIRST &REST REST) ...)-14|
(CONST 0) = OR-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OR-1>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; OR-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OR-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OR-1>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; OR-1
10    (SKIP&RET 1)


Disassembly of function OR-1
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = OR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
23 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L24)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (LOAD&JMPIFNOT 0 L29)
17    (CONST&PUSH 2)                      ; OR
18    (LOAD&PUSH 2)
19    (LOAD 2)
20    (LIST* 2)
22    (SKIP&RET 5)
24    L24
24    (LOAD&PUSH 2)
25    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
27    (SKIP&RET 3)
29    L29
29    (LOAD 1)
30    (SKIP&RET 5)


Disassembly of function #:|(DEFMACRO WHITE-SPACE-P (X) ...)-15|
(CONST 0) = WHITE-SPACE-P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WHITE-SPACE-P>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; WHITE-SPACE-P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WHITE-SPACE-P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WHITE-SPACE-P>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; WHITE-SPACE-P
10    (SKIP&RET 1)


Disassembly of function WHITE-SPACE-P
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = ZL-MEMBER
(CONST 3) = ('(#\Newline #\Return #\Space #\Tab #\Page))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L18)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; ZL-MEMBER
12    (LOAD&PUSH 1)
13    (CONST 3)                           ; ('(#\Newline #\Return #\Space ...))
14    (LIST* 2)
16    (SKIP&RET 4)
18    L18
18    (LOAD&PUSH 2)
19    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
21    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO +MFORMAT-LOOP (TYPE &REST END-CODE) ...)-16|
(CONST 0) = +MFORMAT-LOOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE +MFORMAT-LOOP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; +MFORMAT-LOOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; +MFORMAT-LOOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE +MFORMAT-LOOP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; +MFORMAT-LOOP
10    (SKIP&RET 1)


Disassembly of function +MFORMAT-LOOP
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = BIND-MFORMAT-STATE-VARS
(CONST 3) = DO
(CONST 4) = ((CHAR))
(CONST 5) = (NULL-MFORMAT-STRING)
(CONST 6) = (LEFTOVER-MFORMAT-ARGS?)
(CONST 7) = (SETQ CHAR (POP SSTRING))
(CONST 8) = COND
(CONST 9) = (CHAR= CHAR #\~)
(CONST 10) = (NIL)
(CONST 11) = (SETQ CHAR (POP-MFORMAT-STRING))
(CONST 12) = ((CHAR= CHAR #\@) (SETQ @-FLAG T))
(CONST 13) = ((CHAR= CHAR #\:) (SETQ |:-FLAG| T))
(CONST 14) = ((CHAR= CHAR #\~) (PUSH CHAR TEXT-TEMP) (RETURN NIL))
(CONST 15) = 
((WHITE-SPACE-P CHAR)
 (DO NIL ((NOT (WHITE-SPACE-P (TOP-MFORMAT-STRING)))) (CDR-MFORMAT-STRING))
 (RETURN NIL))
(CONST 16) = (OR (CHAR< CHAR #\0) (CHAR> CHAR #\9))
(CONST 17) = MFORMAT-DISPATCH-ON-CHAR
(CONST 18) = ((RETURN NIL))
(CONST 19) = 
((T
  (SETQ PARAMETER (F+ (F- (CHAR-CODE CHAR) (CHAR-CODE #\0)) (F* 10 PARAMETER))
   PARAMETER-P T)))
(CONST 20) = ((T (PUSH CHAR TEXT-TEMP)))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
49 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L59)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; BIND-MFORMAT-STATE-VARS
15    (LOAD&PUSH 2)
16    (CONST&PUSH 3)                      ; DO
17    (CONST&PUSH 4)                      ; ((CHAR))
18    (CONST&PUSH 5)                      ; (NULL-MFORMAT-STRING)
19    (CONST&PUSH 6)                      ; (LEFTOVER-MFORMAT-ARGS?)
20    (LOAD 6)
21    (LIST*&PUSH 2)
23    (CONST&PUSH 7)                      ; (SETQ CHAR (POP SSTRING))
24    (CONST&PUSH 8)                      ; COND
25    (CONST&PUSH 9)                      ; (CHAR= CHAR #\~)
26    (CONST&PUSH 3)                      ; DO
27    (NIL&PUSH)
28    (CONST&PUSH 10)                     ; (NIL)
29    (CONST&PUSH 11)                     ; (SETQ CHAR (POP-MFORMAT-STRING))
30    (CONST&PUSH 8)                      ; COND
31    (CONST&PUSH 12)                     ; ((CHAR= CHAR #\@) (SETQ @-FLAG T))
32    (CONST&PUSH 13)                     ; (# #)
33    (CONST&PUSH 14)                     ; (# # #)
34    (CONST&PUSH 15)                     ; (# # #)
35    (CONST&PUSH 16)                     ; (OR (CHAR< CHAR ...) ...)
36    (CONST&PUSH 17)                     ; MFORMAT-DISPATCH-ON-CHAR
37    (LOAD&PUSH 20)
38    (LIST&PUSH 2)
40    (CONST 18)                          ; ((RETURN NIL))
41    (LIST*&PUSH 2)
43    (CONST 19)                          ; ((T (SETQ PARAMETER # ...)))
44    (LIST*&PUSH 6)
46    (LIST&PUSH 5)
48    (LIST&PUSH 2)
50    (CONST 20)                          ; ((T (PUSH CHAR TEXT-TEMP)))
51    (LIST*&PUSH 2)
53    (LIST&PUSH 5)
55    (LIST 3)
57    (SKIP&RET 5)
59    L59
59    (LOAD&PUSH 2)
60    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
62    (SKIP&RET 3)


Disassembly of function #:|(DEFVAR WANT-OPEN-COMPILED-MFORMAT NIL)-17|
(CONST 0) = (SPECIAL WANT-OPEN-COMPILED-MFORMAT)
(CONST 1) = WANT-OPEN-COMPILED-MFORMAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; WANT-OPEN-COMPILED-MFORMAT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; WANT-OPEN-COMPILED-MFORMAT
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; WANT-OPEN-COMPILED-MFORMAT
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR CANT-OPEN-COMPILE-MFORMAT NIL)-18|
(CONST 0) = (SPECIAL CANT-OPEN-COMPILE-MFORMAT)
(CONST 1) = CANT-OPEN-COMPILE-MFORMAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL CANT-OPEN-COMPILE-MFORMAT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; CANT-OPEN-COMPILE-MFORMAT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; CANT-OPEN-COMPILE-MFORMAT
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; CANT-OPEN-COMPILE-MFORMAT
12    (SKIP&RET 1)


Disassembly of function #:|(DEF-MFORMAT -C)-19-1|
(CONST 0) = DEF-MFORMAT-OP-C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-MFORMAT-OP-C>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-MFORMAT-OP-C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-MFORMAT-OP-C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-MFORMAT-OP-C>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function DEF-MFORMAT-OP-C
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = +DEF-MFORMAT-OP
(CONST 3) = -C
1 required argument
1 optional argument
No rest parameter
No keyword parameters
20 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L22)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; +DEF-MFORMAT-OP
15    (CONST&PUSH 3)                      ; -C
16    (LOAD&PUSH 3)
17    (LOAD 3)
18    (LIST* 3)
20    (SKIP&RET 5)
22    L22
22    (LOAD&PUSH 2)
23    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
25    (SKIP&RET 3)


Disassembly of function #:|(DEF-MFORMAT -C)-19-2|
(CONST 0) = DEF-MFORMAT-VAR-C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEF-MFORMAT-VAR-C>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEF-MFORMAT-VAR-C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEF-MFORMAT-VAR-C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEF-MFORMAT-VAR-C>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (VALUES0)
10    (SKIP&RET 1)


Disassembly of function DEF-MFORMAT-VAR-C
(CONST 0) = 4
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = +DEF-MFORMAT-VAR
(CONST 3) = -C
1 required argument
1 optional argument
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 4
4     (CALLSR&JMPIF 1 46 L29)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CONST&PUSH 2)                      ; +DEF-MFORMAT-VAR
21    (CONST&PUSH 3)                      ; -C
22    (LOAD&PUSH 4)
23    (LOAD&PUSH 4)
24    (LOAD&PUSH 4)
25    (LIST 5)
27    (SKIP&RET 6)
29    L29
29    (LOAD&PUSH 2)
30    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
32    (SKIP&RET 3)


Disassembly of function #:|(DEF-MFORMAT -C)-19-3|
(CONST 0) = MFORMAT-LOOP-C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFORMAT-LOOP-C>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFORMAT-LOOP-C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFORMAT-LOOP-C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFORMAT-LOOP-C>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MFORMAT-LOOP-C
10    (SKIP&RET 1)


Disassembly of function MFORMAT-LOOP-C
(CONST 0) = +MFORMAT-LOOP
(CONST 1) = -C
1 required argument
1 optional argument
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; +MFORMAT-LOOP
3     (CONST&PUSH 1)                      ; -C
4     (LOAD 2)
5     (LIST* 2)
7     (SKIP&RET 4)


Disassembly of function #:|(DEF-MFORMAT-VAR-C \|:-FLAG\| NIL ...)-20|
(CONST 0) = |:-FLAG|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; |:-FLAG|
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-MFORMAT-VAR-C @-FLAG NIL ...)-21|
(CONST 0) = @-FLAG
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; @-FLAG
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-MFORMAT-VAR-C PARAMETER 0 ...)-22|
(CONST 0) = PARAMETER
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; PARAMETER
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-MFORMAT-VAR-C PARAMETER-P NIL ...)-23|
(CONST 0) = PARAMETER-P
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; PARAMETER-P
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-MFORMAT-VAR-C TEXT-TEMP NIL ...)-24|
(CONST 0) = TEXT-TEMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; TEXT-TEMP
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-MFORMAT-VAR-C CODE NIL ...)-25|
(CONST 0) = CODE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; CODE
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO EMITC (X) ...)-26|
(CONST 0) = EMITC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EMITC>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; EMITC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EMITC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EMITC>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; EMITC
10    (SKIP&RET 1)


Disassembly of function EMITC
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = PUSH
(CONST 3) = (CODE)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
16 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L18)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; PUSH
12    (LOAD&PUSH 1)
13    (CONST 3)                           ; (CODE)
14    (LIST* 2)
16    (SKIP&RET 4)
18    L18
18    (LOAD&PUSH 2)
19    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
21    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO PUSH-TEXT-TEMP-C NIL ...)-27|
(CONST 0) = PUSH-TEXT-TEMP-C
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PUSH-TEXT-TEMP-C>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; PUSH-TEXT-TEMP-C
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PUSH-TEXT-TEMP-C
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PUSH-TEXT-TEMP-C>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; PUSH-TEXT-TEMP-C
10    (SKIP&RET 1)


Disassembly of function PUSH-TEXT-TEMP-C
(CONST 0) = 1
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = 
(AND TEXT-TEMP
 (PROGN (EMITC `(PRINC ',(MAKNAM (NREVERSE TEXT-TEMP)) ,STREAM))
  (SETQ TEXT-TEMP NIL)))
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (CALLSR&JMPIF 1 48 L11)             ; >
8     (CONST 2)                           ; (AND TEXT-TEMP (PROGN # #))
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEF-MFORMAT-OP-C (#\\% #\\&) (COND #))-28|
(CONST 0) = #:MFORMAT-%&
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; #:MFORMAT-%&
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-MFORMAT-OP-C #\\M (COND # #))-29|
(CONST 0) = #:MFORMAT-M
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; #:MFORMAT-M
1     (SKIP&RET 1)


Disassembly of function #:|(DEF-MFORMAT-OP-C (#\\A #\\S) (COND # #))-30|
(CONST 0) = #:MFORMAT-AS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; #:MFORMAT-AS
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN OPTIMIZE-PRINT-INST (L) ...)-31|
(CONST 0) = OPTIMIZE-PRINT-INST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE OPTIMIZE-PRINT-INST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; OPTIMIZE-PRINT-INST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OPTIMIZE-PRINT-INST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE OPTIMIZE-PRINT-INST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; OPTIMIZE-PRINT-INST
8     (SKIP&RET 1)


Disassembly of function OPTIMIZE-PRINT-INST
(CONST 0) = TERPRI
(CONST 1) = (TERPRI)
(CONST 2) = MGRIND
(CONST 3) = DISPLAF
(CONST 4) = DISPLA
(CONST 5) = PROGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
50 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&JMPIFNOT 2 L62)
4     L4
4     (LOAD&CAR&PUSH 2)
6     (LOAD&CDR&STORE 3)
8     (LOAD&CAR&PUSH 0)
10    (JMPIFEQTO 0 L42)                   ; TERPRI
13    (LOAD 0)
14    (CDR)
15    (CDR)
16    (CAR)
17    (JMPIF L53)
19    (LOAD&CAR&PUSH 0)
21    (JMPIFEQTO 2 L53)                   ; MGRIND
24    (LOAD&CAR&PUSH 0)
26    (JMPIFEQTO 3 L50)                   ; DISPLAF
29    (LOAD 0)
30    (CAR)
31    L31
31    (PUSH)
32    (LOAD 1)
33    (CDR)
34    (CAR&PUSH)
35    (LIST 2)
37    (JMP L54)
39    L39
39    (CONST 1)                           ; (TERPRI)
40    (JMP L54)
42    L42
42    (LOAD 0)
43    (CDR)
44    (CAR)
45    (JMPIFNOT L39)
47    (LOAD 0)
48    (JMP L54)
50    L50
50    (CONST 4)                           ; DISPLA
51    (JMP L31)
53    L53
53    (LOAD 0)
54    L54
54    (PUSH)
55    (LOAD&CONS&STORE 1)
57    (SKIP 1)
59    (LOAD&JMPIF 2 L4)
62    L62
62    (CONST&PUSH 5)                      ; PROGN
63    (LOAD 1)
64    (CONS)
65    (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO NORMALIZE-STREAM (STREAM) ...)-32|
(CONST 0) = NORMALIZE-STREAM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NORMALIZE-STREAM>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; NORMALIZE-STREAM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NORMALIZE-STREAM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NORMALIZE-STREAM>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; NORMALIZE-STREAM
10    (SKIP&RET 1)


Disassembly of function NORMALIZE-STREAM
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
1 required argument
1 optional argument
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L11)             ; /=
8     (NIL)
9     (SKIP&RET 3)
11    L11
11    (LOAD&PUSH 2)
12    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN MFORMAT-TRANSLATE-OPEN N ...)-33|
(CONST 0) = MFORMAT-TRANSLATE-OPEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFORMAT-TRANSLATE-OPEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFORMAT-TRANSLATE-OPEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFORMAT-TRANSLATE-OPEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFORMAT-TRANSLATE-OPEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFORMAT-TRANSLATE-OPEN
8     (SKIP&RET 1)


Disassembly of function MFORMAT-TRANSLATE-OPEN
(CONST 0) = 1
(CONST 1) = NARG1
(CONST 2) = 2
(CONST 3) = EXPLODEN
(CONST 4) = WANT-OPEN-COMPILED-MFORMAT
(CONST 5) = CANT-OPEN-COMPILE-MFORMAT
(CONST 6) = 0
(CONST 7) = #\~
(CONST 8) = "without any special action"
(CONST 9) = "Runout of MFORMAT string"
(CONST 10) = FAIL-ACT
(CONST 11) = CERROR
(CONST 12) = #\@
(CONST 13) = #\:
(CONST 14) = (#\Newline #\Return #\Space #\Tab #\Page)
(CONST 15) = ZL-MEMBER
(CONST 16) = "Runout of MFORMAT string"
(CONST 17) = #\0
(CONST 18) = #\9
(CONST 19) = #\A
(CONST 20) = #\S
(CONST 21) = PRINC
(CONST 22) = QUOTE
(CONST 23) = MAKNAM
(CONST 24) = PRIN1
(CONST 25) = "Ran out of mformat args"
(CONST 26) = LISTIFY1
(CONST 27) = #\M
(CONST 28) = MGRIND
(CONST 29) = DISPLAF
(CONST 30) = GETOP
(CONST 31) = PROGN
(CONST 32) = #\%
(CONST 33) = #\&
(CONST 34) = CURSORPOS
(CONST 35) = 'A
(CONST 36) = TERPRI
(CONST 37) = "Unknown format op."
(CONST 38) = ASCII
(CONST 39) = 48
(CONST 40) = 10
(CONST 41) = "Extra mformat args"
(CONST 42) = "CAN'T OPEN COMPILE MFORMAT ON THIS CASE."
(CONST 43) = OPTIMIZE-PRINT-INST
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (CANT-OPEN-COMPILE-MFORMAT WANT-OPEN-COMPILED-MFORMAT)
331 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 1
4     (LOAD&PUSH 3)
5     (CALL2&PUSH 1)                      ; NARG1
7     (CONST&PUSH 2)                      ; 2
8     (LOAD&PUSH 4)
9     (CALL2&PUSH 1)                      ; NARG1
11    (CALL1&PUSH 3)                      ; EXPLODEN
13    (T)
14    (BIND 4)                            ; WANT-OPEN-COMPILED-MFORMAT
16    (NIL)
17    (BIND 5)                            ; CANT-OPEN-COMPILE-MFORMAT
19    (CONST&PUSH 2)                      ; 2
20    (PUSH-NIL 2)
22    (CONST&PUSH 6)                      ; 0
23    (PUSH-NIL 3)
25    (LOAD&JMPIFNOT 13 L506)
29    L29
29    (LOAD&CAR&PUSH 13)
31    (LOAD&CDR&STORE 14)
33    (POP&STORE 0)
35    (PUSH)
36    (CONST&PUSH 7)                      ; #\~
37    (CALLSR&JMPIFNOT 1 7 L444)          ; CHAR=
42    (LOAD&JMPIF 13 L417)
46    L46
46    (CONST&PUSH 8)                      ; "without any special action"
47    (CONST&PUSH 9)                      ; "Runout of MFORMAT string"
48    (NIL&PUSH)
49    (CONST&PUSH 10)                     ; FAIL-ACT
50    (CALL 4 11)                         ; CERROR
53    (JMP L422)
56    L56
56    (T&STORE 4)
58    (LOAD&JMPIFNOT 13 L46)
61    (JMP L417)
64    L64
64    (T&STORE 5)
66    (LOAD&JMPIFNOT 13 L46)
69    (JMP L417)
72    L72
72    (LOAD&JMPIF 13 L495)
76    L76
76    (CONST&PUSH 8)                      ; "without any special action"
77    (CONST&PUSH 16)                     ; "Runout of MFORMAT string"
78    (NIL&PUSH)
79    (CONST&PUSH 10)                     ; FAIL-ACT
80    (CALL 4 11)                         ; CERROR
83    (JMP L497)
86    L86
86    (CONST 21)                          ; PRINC
88    (JMP L130)
90    L90
90    (CONST&PUSH 8)                      ; "without any special action"
91    (CONST&PUSH 25)                     ; "Ran out of mformat args"
92    (LOAD&PUSH 18)
93    (LOAD&PUSH 21)
94    (CALL2&PUSH 26)                     ; LISTIFY1
96    (CONST&PUSH 10)                     ; FAIL-ACT
97    (CALL 4 11)                         ; CERROR
100   (JMP L336)
103   L103
103   (LOAD&JMPIFNOT 2 L122)
106   (CONST&PUSH 21)                     ; PRINC
107   (CONST&PUSH 22)                     ; QUOTE
108   (LOAD&PUSH 4)
109   (CALLS2&PUSH 73)                    ; NREVERSE
111   (CALL1&PUSH 23)                     ; MAKNAM
113   (LIST&PUSH 2)
115   (LOAD&PUSH 16)
116   (LIST&PUSH 3)
118   (LOAD&CONS&STORE 1)
120   (NIL&STORE 2)
122   L122
122   (LOAD&PUSH 0)
123   (CONST&PUSH 19)                     ; #\A
124   (CALLSR&JMPIF 1 7 L86)              ; CHAR=
128   (CONST 24)                          ; PRIN1
130   L130
130   (PUSH)
131   (LOAD&PUSH 7)
132   (LOAD&PUSH 17)
133   (CALLSR&JMPIF 1 45 L90)             ; =
137   (LOAD&INC&STORE 7)
139   (PUSH)
140   (LOAD&PUSH 19)
141   (CALL2 1)                           ; NARG1
143   (JMP L336)
146   L146
146   (GETVALUE 4)                        ; WANT-OPEN-COMPILED-MFORMAT
148   (JMPIF L103)
150   (LOAD&PUSH 6)
151   (LOAD&PUSH 16)
152   (CALLSR&JMPIFNOT 1 45 L259)         ; =
157   (CONST&PUSH 8)                      ; "without any special action"
158   (CONST&PUSH 25)                     ; "Ran out of mformat args"
159   (LOAD&PUSH 17)
160   (LOAD&PUSH 20)
161   (CALL2&PUSH 26)                     ; LISTIFY1
163   (CONST 10)                          ; FAIL-ACT
164   (JMP L359)
167   L167
167   (CONST&PUSH 21)                     ; PRINC
168   (CONST&PUSH 22)                     ; QUOTE
169   (LOAD&PUSH 4)
170   (CALLS2&PUSH 73)                    ; NREVERSE
172   (CALL1&PUSH 23)                     ; MAKNAM
174   (LIST&PUSH 2)
176   (LOAD&PUSH 16)
177   (LIST&PUSH 3)
179   (LOAD&CONS&STORE 1)
181   (NIL&STORE 2)
183   (LOAD&JMPIFNOT 5 L212)
186   L186
186   (CONST 28)                          ; MGRIND
188   (JMP L214)
190   L190
190   (CONST 30)                          ; GETOP
192   (JMP L220)
194   L194
194   (CONST&PUSH 8)                      ; "without any special action"
195   (CONST&PUSH 25)                     ; "Ran out of mformat args"
196   (LOAD&PUSH 19)
197   (LOAD&PUSH 22)
198   (CALL2&PUSH 26)                     ; LISTIFY1
200   (CONST&PUSH 10)                     ; FAIL-ACT
201   (CALL 4 11)                         ; CERROR
204   (JMP L233)
206   L206
206   (LOAD&JMPIF 2 L167)
209   (LOAD&JMPIF 5 L186)
212   L212
212   (CONST 29)                          ; DISPLAF
214   L214
214   (PUSH)
215   (LOAD&JMPIF 5 L190)
218   (CONST 31)                          ; PROGN
220   L220
220   (PUSH)
221   (LOAD&PUSH 8)
222   (LOAD&PUSH 18)
223   (CALLSR&JMPIF 1 45 L194)            ; =
227   (LOAD&INC&STORE 8)
229   (PUSH)
230   (LOAD&PUSH 20)
231   (CALL2 1)                           ; NARG1
233   L233
233   (PUSH)
234   (LIST 2)
236   (JMP L336)
239   L239
239   (CONST&PUSH 8)                      ; "without any special action"
240   (CONST&PUSH 25)                     ; "Ran out of mformat args"
241   (LOAD&PUSH 17)
242   (LOAD&PUSH 20)
243   (CALL2&PUSH 26)                     ; LISTIFY1
245   (CONST 10)                          ; FAIL-ACT
246   (JMP L359)
249   L249
249   (GETVALUE 4)                        ; WANT-OPEN-COMPILED-MFORMAT
251   (JMPIF L206)
253   (LOAD&PUSH 6)
254   (LOAD&PUSH 16)
255   (CALLSR&JMPIF 1 45 L239)            ; =
259   L259
259   (LOAD&INC&STORE 6)
261   (PUSH)
262   (LOAD&PUSH 18)
263   (CALL2 1)                           ; NARG1
265   (JMP L363)
268   L268
268   (LOAD&PUSH 0)
269   (CONST&PUSH 19)                     ; #\A
270   (CALLSR&JMPIF 1 7 L146)             ; CHAR=
275   (LOAD&PUSH 0)
276   (CONST&PUSH 20)                     ; #\S
277   (CALLSR&JMPIF 1 7 L146)             ; CHAR=
282   (LOAD&PUSH 0)
283   (CONST&PUSH 27)                     ; #\M
284   (CALLSR&JMPIF 1 7 L249)             ; CHAR=
288   (LOAD&PUSH 0)
289   (CONST&PUSH 32)                     ; #\%
291   (CALLSR&JMPIF 1 7 L302)             ; CHAR=
295   (LOAD&PUSH 0)
296   (CONST&PUSH 33)                     ; #\&
298   (CALLSR&JMPIFNOT 1 7 L352)          ; CHAR=
302   L302
302   (GETVALUE 4)                        ; WANT-OPEN-COMPILED-MFORMAT
304   (JMPIFNOT L363)
306   (LOAD&JMPIFNOT 2 L325)
309   (CONST&PUSH 21)                     ; PRINC
310   (CONST&PUSH 22)                     ; QUOTE
311   (LOAD&PUSH 4)
312   (CALLS2&PUSH 73)                    ; NREVERSE
314   (CALL1&PUSH 23)                     ; MAKNAM
316   (LIST&PUSH 2)
318   (LOAD&PUSH 16)
319   (LIST&PUSH 3)
321   (LOAD&CONS&STORE 1)
323   (NIL&STORE 2)
325   L325
325   (LOAD&PUSH 0)
326   (CONST&PUSH 33)                     ; #\&
328   (CALLSR&JMPIFNOT 1 7 L342)          ; CHAR=
332   (CONST&PUSH 34)                     ; CURSORPOS
334   (CONST 35)                          ; 'A
336   L336
336   (PUSH)
337   (LOAD&PUSH 16)
338   (LIST 3)
340   (JMP L347)
342   L342
342   (CONST&PUSH 36)                     ; TERPRI
344   (LOAD&PUSH 15)
345   (LIST 2)
347   L347
347   (PUSH)
348   (LOAD&CONS&STORE 1)
350   (JMP L363)
352   L352
352   (CONST&PUSH 8)                      ; "without any special action"
353   (CONST&PUSH 37)                     ; "Unknown format op."
355   (LOAD&PUSH 2)
356   (CALL1&PUSH 38)                     ; ASCII
358   (CONST 10)                          ; FAIL-ACT
359   L359
359   (PUSH)
360   (CALL 4 11)                         ; CERROR
363   L363
363   (CONST 6)                           ; 0
364   (STORE 3)
365   (NIL&STORE 4)
367   (STORE 5)
368   (LOAD&JMPIFNOT 13 L506)
372   (JMP L29)
375   L375
375   (LOAD&PUSH 0)
376   (CONST&PUSH 14)                     ; (#\Newline #\Return #\Space ...)
377   (CALL2&JMPIF 15 L72)                ; ZL-MEMBER
381   (LOAD&PUSH 0)
382   (CONST&PUSH 17)                     ; #\0
383   (CALLSR&JMPIF 1 9 L268)             ; CHAR<
388   (LOAD&PUSH 0)
389   (CONST&PUSH 18)                     ; #\9
390   (CALLSR&JMPIF 1 10 L268)            ; CHAR>
395   (LOAD&PUSH 0)
396   (CALLS1&PUSH 40)                    ; CHAR-CODE
398   (CONST&PUSH 39)                     ; 48
400   (CALLSR&PUSH 1 54)                  ; -
403   (CONST&PUSH 40)                     ; 10
405   (LOAD&PUSH 5)
406   (CALLSR&PUSH 2 55)                  ; *
409   (CALLSR&STORE 2 53 3)               ; +
413   (LOAD&JMPIFNOT 13 L46)
417   L417
417   (LOAD&CAR&PUSH 13)
419   (LOAD&CDR&STORE 14)
421   (POP)
422   L422
422   (STORE 0)
423   (PUSH)
424   (CONST&PUSH 12)                     ; #\@
425   (CALLSR&JMPIF 1 7 L56)              ; CHAR=
430   (LOAD&PUSH 0)
431   (CONST&PUSH 13)                     ; #\:
432   (CALLSR&JMPIF 1 7 L64)              ; CHAR=
437   (LOAD&PUSH 0)
438   (CONST&PUSH 7)                      ; #\~
439   (CALLSR&JMPIFNOT 1 7 L375)          ; CHAR=
444   L444
444   (LOAD&PUSH 0)
445   (LOAD&CONS&STORE 2)
447   (LOAD&JMPIFNOT 13 L506)
450   (JMP L29)
453   L453
453   (CONST&PUSH 8)                      ; "without any special action"
454   (CONST&PUSH 41)                     ; "Extra mformat args"
456   (LOAD&PUSH 17)
457   (LOAD&PUSH 20)
458   (CALL2&PUSH 26)                     ; LISTIFY1
460   (CONST&PUSH 10)                     ; FAIL-ACT
461   (CALL 4 11)                         ; CERROR
464   (LOAD&JMPIFNOT 2 L515)
467   L467
467   (CONST&PUSH 21)                     ; PRINC
468   (CONST&PUSH 22)                     ; QUOTE
469   (LOAD&PUSH 4)
470   (CALLS2&PUSH 73)                    ; NREVERSE
472   (CALL1&PUSH 23)                     ; MAKNAM
474   (LIST&PUSH 2)
476   (LOAD&PUSH 16)
477   (LIST&PUSH 3)
479   (LOAD&CONS&STORE 1)
481   (NIL&STORE 2)
483   (GETVALUE 5)                        ; CANT-OPEN-COMPILE-MFORMAT
485   (JMPIFNOT L530)
487   (JMP L519)
489   L489
489   (LOAD&CDR&STORE 13)
491   (LOAD&JMPIFNOT 13 L76)
495   L495
495   (LOAD 13)
496   (CAR)
497   L497
497   (PUSH)
498   (CONST&PUSH 14)                     ; (#\Newline #\Return #\Space ...)
499   (CALL2&JMPIF 15 L489)               ; ZL-MEMBER
502   (LOAD&JMPIF 13 L29)
506   L506
506   (LOAD&PUSH 6)
507   (LOAD&PUSH 16)
508   (CALLSR&JMPIFNOT 1 45 L453)         ; =
512   (LOAD&JMPIF 2 L467)
515   L515
515   (GETVALUE 5)                        ; CANT-OPEN-COMPILE-MFORMAT
517   (JMPIFNOT L530)
519   L519
519   (CONST&PUSH 8)                      ; "without any special action"
520   (CONST&PUSH 42)                     ; "CAN'T OPEN COMPILE MFORMAT ON THIS CASE."
522   (LOAD&PUSH 17)
523   (LOAD&PUSH 20)
524   (CALL2&PUSH 26)                     ; LISTIFY1
526   (CONST&PUSH 10)                     ; FAIL-ACT
527   (CALL 4 11)                         ; CERROR
530   L530
530   (LOAD&PUSH 1)
531   (CALL1 43)                          ; OPTIMIZE-PRINT-INST
533   (SKIP 7)
535   (UNBIND 2)
537   (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN MFORMAT-SYNTAX-CHECK N ...)-34|
(CONST 0) = MFORMAT-SYNTAX-CHECK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFORMAT-SYNTAX-CHECK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFORMAT-SYNTAX-CHECK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFORMAT-SYNTAX-CHECK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFORMAT-SYNTAX-CHECK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFORMAT-SYNTAX-CHECK
8     (SKIP&RET 1)


Disassembly of function MFORMAT-SYNTAX-CHECK
(CONST 0) = 2
(CONST 1) = NARG1
(CONST 2) = EXPLODEN
(CONST 3) = WANT-OPEN-COMPILED-MFORMAT
(CONST 4) = 0
(CONST 5) = #\~
(CONST 6) = "without any special action"
(CONST 7) = "Runout of MFORMAT string"
(CONST 8) = FAIL-ACT
(CONST 9) = CERROR
(CONST 10) = #\@
(CONST 11) = #\:
(CONST 12) = (#\Newline #\Return #\Space #\Tab #\Page)
(CONST 13) = ZL-MEMBER
(CONST 14) = "Runout of MFORMAT string"
(CONST 15) = #\0
(CONST 16) = #\9
(CONST 17) = #\A
(CONST 18) = #\S
(CONST 19) = PRINC
(CONST 20) = QUOTE
(CONST 21) = MAKNAM
(CONST 22) = PRIN1
(CONST 23) = "Ran out of mformat args"
(CONST 24) = LISTIFY1
(CONST 25) = #\M
(CONST 26) = MGRIND
(CONST 27) = DISPLAF
(CONST 28) = GETOP
(CONST 29) = PROGN
(CONST 30) = #\%
(CONST 31) = #\&
(CONST 32) = CURSORPOS
(CONST 33) = 'A
(CONST 34) = TERPRI
(CONST 35) = "Unknown format op."
(CONST 36) = ASCII
(CONST 37) = 48
(CONST 38) = 10
(CONST 39) = "Extra mformat args"
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (WANT-OPEN-COMPILED-MFORMAT)
297 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CONST&PUSH 0)                      ; 2
5     (LOAD&PUSH 4)
6     (CALL2&PUSH 1)                      ; NARG1
8     (CALL1&PUSH 2)                      ; EXPLODEN
10    (NIL)
11    (BIND 3)                            ; WANT-OPEN-COMPILED-MFORMAT
13    (PUSH-NIL 2)
15    (CONST&PUSH 4)                      ; 0
16    (PUSH-NIL 3)
18    (LOAD&JMPIFNOT 9 L462)
22    L22
22    (LOAD&CAR&PUSH 9)
24    (LOAD&CDR&STORE 10)
26    (POP&STORE 0)
28    (PUSH)
29    (CONST&PUSH 5)                      ; #\~
30    (CALLSR&JMPIFNOT 1 7 L436)          ; CHAR=
35    (LOAD&JMPIF 9 L409)
39    L39
39    (CONST&PUSH 6)                      ; "without any special action"
40    (CONST&PUSH 7)                      ; "Runout of MFORMAT string"
41    (NIL&PUSH)
42    (CONST&PUSH 8)                      ; FAIL-ACT
43    (CALL 4 9)                          ; CERROR
46    (JMP L414)
49    L49
49    (T&STORE 4)
51    (LOAD&JMPIFNOT 9 L39)
54    (JMP L409)
57    L57
57    (T&STORE 5)
59    (LOAD&JMPIFNOT 9 L39)
62    (JMP L409)
65    L65
65    (LOAD&JMPIF 9 L451)
69    L69
69    (CONST&PUSH 6)                      ; "without any special action"
70    (CONST&PUSH 14)                     ; "Runout of MFORMAT string"
71    (NIL&PUSH)
72    (CONST&PUSH 8)                      ; FAIL-ACT
73    (CALL 4 9)                          ; CERROR
76    (JMP L453)
79    L79
79    (CONST 19)                          ; PRINC
80    (JMP L122)
82    L82
82    (CONST&PUSH 6)                      ; "without any special action"
83    (CONST&PUSH 23)                     ; "Ran out of mformat args"
84    (LOAD&PUSH 14)
85    (LOAD&PUSH 17)
86    (CALL2&PUSH 24)                     ; LISTIFY1
88    (CONST&PUSH 8)                      ; FAIL-ACT
89    (CALL 4 9)                          ; CERROR
92    (JMP L328)
95    L95
95    (LOAD&JMPIFNOT 2 L114)
98    (CONST&PUSH 19)                     ; PRINC
99    (CONST&PUSH 20)                     ; QUOTE
100   (LOAD&PUSH 4)
101   (CALLS2&PUSH 73)                    ; NREVERSE
103   (CALL1&PUSH 21)                     ; MAKNAM
105   (LIST&PUSH 2)
107   (NIL&PUSH)
108   (LIST&PUSH 3)
110   (LOAD&CONS&STORE 1)
112   (NIL&STORE 2)
114   L114
114   (LOAD&PUSH 0)
115   (CONST&PUSH 17)                     ; #\A
116   (CALLSR&JMPIF 1 7 L79)              ; CHAR=
120   (CONST 22)                          ; PRIN1
122   L122
122   (PUSH)
123   (LOAD&PUSH 11)
124   (LOAD&PUSH 13)
125   (CALLSR&JMPIF 1 45 L82)             ; =
129   (LOAD&INC&STORE 11)
131   (PUSH)
132   (LOAD&PUSH 15)
133   (CALL2 1)                           ; NARG1
135   (JMP L328)
138   L138
138   (GETVALUE 3)                        ; WANT-OPEN-COMPILED-MFORMAT
140   (JMPIF L95)
142   (LOAD&PUSH 10)
143   (LOAD&PUSH 12)
144   (CALLSR&JMPIFNOT 1 45 L251)         ; =
149   (CONST&PUSH 6)                      ; "without any special action"
150   (CONST&PUSH 23)                     ; "Ran out of mformat args"
151   (LOAD&PUSH 13)
152   (LOAD&PUSH 16)
153   (CALL2&PUSH 24)                     ; LISTIFY1
155   (CONST 8)                           ; FAIL-ACT
156   (JMP L351)
159   L159
159   (CONST&PUSH 19)                     ; PRINC
160   (CONST&PUSH 20)                     ; QUOTE
161   (LOAD&PUSH 4)
162   (CALLS2&PUSH 73)                    ; NREVERSE
164   (CALL1&PUSH 21)                     ; MAKNAM
166   (LIST&PUSH 2)
168   (NIL&PUSH)
169   (LIST&PUSH 3)
171   (LOAD&CONS&STORE 1)
173   (NIL&STORE 2)
175   (LOAD&JMPIFNOT 5 L204)
178   L178
178   (CONST 26)                          ; MGRIND
180   (JMP L206)
182   L182
182   (CONST 28)                          ; GETOP
184   (JMP L212)
186   L186
186   (CONST&PUSH 6)                      ; "without any special action"
187   (CONST&PUSH 23)                     ; "Ran out of mformat args"
188   (LOAD&PUSH 15)
189   (LOAD&PUSH 18)
190   (CALL2&PUSH 24)                     ; LISTIFY1
192   (CONST&PUSH 8)                      ; FAIL-ACT
193   (CALL 4 9)                          ; CERROR
196   (JMP L225)
198   L198
198   (LOAD&JMPIF 2 L159)
201   (LOAD&JMPIF 5 L178)
204   L204
204   (CONST 27)                          ; DISPLAF
206   L206
206   (PUSH)
207   (LOAD&JMPIF 5 L182)
210   (CONST 29)                          ; PROGN
212   L212
212   (PUSH)
213   (LOAD&PUSH 12)
214   (LOAD&PUSH 14)
215   (CALLSR&JMPIF 1 45 L186)            ; =
219   (LOAD&INC&STORE 12)
221   (PUSH)
222   (LOAD&PUSH 16)
223   (CALL2 1)                           ; NARG1
225   L225
225   (PUSH)
226   (LIST 2)
228   (JMP L328)
231   L231
231   (CONST&PUSH 6)                      ; "without any special action"
232   (CONST&PUSH 23)                     ; "Ran out of mformat args"
233   (LOAD&PUSH 13)
234   (LOAD&PUSH 16)
235   (CALL2&PUSH 24)                     ; LISTIFY1
237   (CONST 8)                           ; FAIL-ACT
238   (JMP L351)
241   L241
241   (GETVALUE 3)                        ; WANT-OPEN-COMPILED-MFORMAT
243   (JMPIF L198)
245   (LOAD&PUSH 10)
246   (LOAD&PUSH 12)
247   (CALLSR&JMPIF 1 45 L231)            ; =
251   L251
251   (LOAD&INC&STORE 10)
253   (PUSH)
254   (LOAD&PUSH 14)
255   (CALL2 1)                           ; NARG1
257   (JMP L355)
260   L260
260   (LOAD&PUSH 0)
261   (CONST&PUSH 17)                     ; #\A
262   (CALLSR&JMPIF 1 7 L138)             ; CHAR=
267   (LOAD&PUSH 0)
268   (CONST&PUSH 18)                     ; #\S
269   (CALLSR&JMPIF 1 7 L138)             ; CHAR=
274   (LOAD&PUSH 0)
275   (CONST&PUSH 25)                     ; #\M
276   (CALLSR&JMPIF 1 7 L241)             ; CHAR=
280   (LOAD&PUSH 0)
281   (CONST&PUSH 30)                     ; #\%
283   (CALLSR&JMPIF 1 7 L294)             ; CHAR=
287   (LOAD&PUSH 0)
288   (CONST&PUSH 31)                     ; #\&
290   (CALLSR&JMPIFNOT 1 7 L344)          ; CHAR=
294   L294
294   (GETVALUE 3)                        ; WANT-OPEN-COMPILED-MFORMAT
296   (JMPIFNOT L355)
298   (LOAD&JMPIFNOT 2 L317)
301   (CONST&PUSH 19)                     ; PRINC
302   (CONST&PUSH 20)                     ; QUOTE
303   (LOAD&PUSH 4)
304   (CALLS2&PUSH 73)                    ; NREVERSE
306   (CALL1&PUSH 21)                     ; MAKNAM
308   (LIST&PUSH 2)
310   (NIL&PUSH)
311   (LIST&PUSH 3)
313   (LOAD&CONS&STORE 1)
315   (NIL&STORE 2)
317   L317
317   (LOAD&PUSH 0)
318   (CONST&PUSH 31)                     ; #\&
320   (CALLSR&JMPIFNOT 1 7 L334)          ; CHAR=
324   (CONST&PUSH 32)                     ; CURSORPOS
326   (CONST 33)                          ; 'A
328   L328
328   (PUSH)
329   (NIL&PUSH)
330   (LIST 3)
332   (JMP L339)
334   L334
334   (CONST&PUSH 34)                     ; TERPRI
336   (NIL&PUSH)
337   (LIST 2)
339   L339
339   (PUSH)
340   (LOAD&CONS&STORE 1)
342   (JMP L355)
344   L344
344   (CONST&PUSH 6)                      ; "without any special action"
345   (CONST&PUSH 35)                     ; "Unknown format op."
347   (LOAD&PUSH 2)
348   (CALL1&PUSH 36)                     ; ASCII
350   (CONST 8)                           ; FAIL-ACT
351   L351
351   (PUSH)
352   (CALL 4 9)                          ; CERROR
355   L355
355   (CONST 4)                           ; 0
356   (STORE 3)
357   (NIL&STORE 4)
359   (STORE 5)
360   (LOAD&JMPIFNOT 9 L462)
364   (JMP L22)
367   L367
367   (LOAD&PUSH 0)
368   (CONST&PUSH 12)                     ; (#\Newline #\Return #\Space ...)
369   (CALL2&JMPIF 13 L65)                ; ZL-MEMBER
373   (LOAD&PUSH 0)
374   (CONST&PUSH 15)                     ; #\0
375   (CALLSR&JMPIF 1 9 L260)             ; CHAR<
380   (LOAD&PUSH 0)
381   (CONST&PUSH 16)                     ; #\9
382   (CALLSR&JMPIF 1 10 L260)            ; CHAR>
387   (LOAD&PUSH 0)
388   (CALLS1&PUSH 40)                    ; CHAR-CODE
390   (CONST&PUSH 37)                     ; 48
392   (CALLSR&PUSH 1 54)                  ; -
395   (CONST&PUSH 38)                     ; 10
397   (LOAD&PUSH 5)
398   (CALLSR&PUSH 2 55)                  ; *
401   (CALLSR&STORE 2 53 3)               ; +
405   (LOAD&JMPIFNOT 9 L39)
409   L409
409   (LOAD&CAR&PUSH 9)
411   (LOAD&CDR&STORE 10)
413   (POP)
414   L414
414   (STORE 0)
415   (PUSH)
416   (CONST&PUSH 10)                     ; #\@
417   (CALLSR&JMPIF 1 7 L49)              ; CHAR=
422   (LOAD&PUSH 0)
423   (CONST&PUSH 11)                     ; #\:
424   (CALLSR&JMPIF 1 7 L57)              ; CHAR=
429   (LOAD&PUSH 0)
430   (CONST&PUSH 5)                      ; #\~
431   (CALLSR&JMPIFNOT 1 7 L367)          ; CHAR=
436   L436
436   (LOAD&PUSH 0)
437   (LOAD&CONS&STORE 2)
439   (LOAD&JMPIFNOT 9 L462)
442   (JMP L22)
445   L445
445   (LOAD&CDR&STORE 9)
447   (LOAD&JMPIFNOT 9 L69)
451   L451
451   (LOAD 9)
452   (CAR)
453   L453
453   (PUSH)
454   (CONST&PUSH 12)                     ; (#\Newline #\Return #\Space ...)
455   (CALL2&JMPIF 13 L445)               ; ZL-MEMBER
458   (LOAD&JMPIF 9 L22)
462   L462
462   (LOAD&PUSH 10)
463   (LOAD&PUSH 12)
464   (CALLSR&JMPIF 1 45 L479)            ; =
468   (CONST&PUSH 6)                      ; "without any special action"
469   (CONST&PUSH 39)                     ; "Extra mformat args"
471   (LOAD&PUSH 13)
472   (LOAD&PUSH 16)
473   (CALL2&PUSH 24)                     ; LISTIFY1
475   (CONST&PUSH 8)                      ; FAIL-ACT
476   (CALL 4 9)                          ; CERROR
479   L479
479   (NIL)
480   (SKIP 6)
482   (UNBIND1)
483   (SKIP&RET 5)


Disassembly of function #:|(DEFMACRO PROGN-PIG (&REST L) ...)-35|
(CONST 0) = PROGN-PIG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PROGN-PIG>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; PROGN-PIG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PROGN-PIG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PROGN-PIG>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; PROGN-PIG
10    (SKIP&RET 1)


Disassembly of function PROGN-PIG
(CONST 0) = PROGN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (LOAD&CDR&PUSH 2)
2     (CONST&PUSH 0)                      ; PROGN
3     (LOAD 1)
4     (CONS)
5     (SKIP&RET 4)


Disassembly of function #:|(DEFUN PROCESS-MESSAGE-ARGUMENT (X) ...)-36|
(CONST 0) = PROCESS-MESSAGE-ARGUMENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PROCESS-MESSAGE-ARGUMENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PROCESS-MESSAGE-ARGUMENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PROCESS-MESSAGE-ARGUMENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PROCESS-MESSAGE-ARGUMENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PROCESS-MESSAGE-ARGUMENT
8     (SKIP&RET 1)


Disassembly of function PROCESS-MESSAGE-ARGUMENT
(CONST 0) = (OUT-OF-CORE-STRING PROGN-PIG)
(CONST 1) = MEMQ
(CONST 2) = :ITS
(CONST 3) = *FEATURES*
(CONST 4) = OUT-OF-CORE-STRING
(CONST 5) = PROGN-PIG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*FEATURES*)
27 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L9)
3     (LOAD&CAR&PUSH 1)
5     (CONST&PUSH 0)                      ; (OUT-OF-CORE-STRING PROGN-PIG)
6     (CALL2&JMPIF 1 L30)                 ; MEMQ
9     L9
9     (LOAD&PUSH 1)
10    (CALLS2&JMPIFNOT 7 L21)             ; STRINGP
13    (CONST&PUSH 2)                      ; :ITS
14    (GETVALUE&PUSH 3)                   ; *FEATURES*
16    (PUSH-UNBOUND 3)
18    (CALLS1&JMPIF 180 L33)              ; MEMBER
21    L21
21    (CONST 5)                           ; PROGN-PIG
22    L22
22    (PUSH)
23    (LOAD&PUSH 2)
24    (LIST&PUSH 2)
26    (NIL)
27    (CONS)
28    (SKIP&RET 2)
30    L30
30    (NIL)
31    (SKIP&RET 2)
33    L33
33    (CONST 4)                           ; OUT-OF-CORE-STRING
34    (JMP L22)


Disassembly of function #:|(DEFUN MFORMAT-TRANSLATE (ARGUMENTS COMPILING?) ...)-37|
(CONST 0) = MFORMAT-TRANSLATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFORMAT-TRANSLATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFORMAT-TRANSLATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFORMAT-TRANSLATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFORMAT-TRANSLATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MFORMAT-TRANSLATE
8     (SKIP&RET 1)


Disassembly of function MFORMAT-TRANSLATE
(CONST 0) = PROCESS-MESSAGE-ARGUMENT
(CONST 1) = MFORMAT-SYNTAX-CHECK
(CONST 2) = 2
(CONST 3) = ((2 . *MFORMAT-2) (3 . *MFORMAT-3) (4 . *MFORMAT-4) (5 . *MFORMAT-5))
(CONST 4) = ZL-ASSOC
(CONST 5) = MFORMAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
39 byte-code instructions:
0     (PUSH-NIL 2)
2     (LOAD&PUSH 4)
3     (LOAD&CAR&STORE 0 2)
6     (LOAD&CDR&STORE 0)
8     (CAR)
9     (STORE 1)
10    (LOAD&CDR&STORE 0)
12    (LOAD&PUSH 1)
13    (CALL1&PUSH 0)                      ; PROCESS-MESSAGE-ARGUMENT
15    (LOAD&JMPIFNOT 0 L57)
18    (LOAD&CAR&STORE 0 0)
21    (LOAD&PUSH 2)
22    (CALLS2&JMPIFNOT 7 L35)             ; STRINGP
25    (LOAD&JMPIFNOT 5 L35)
28    (CONST&SYMBOL-FUNCTION&PUSH 1)      ; MFORMAT-SYNTAX-CHECK
30    (LOAD&PUSH 4)
31    (LOAD&PUSH 4)
32    (LOAD 4)
33    (APPLY 2)
35    L35
35    (CONST&PUSH 2)                      ; 2
36    (LOAD&PUSH 2)
37    (CALLS2&PUSH 71)                    ; LENGTH
39    (CALLSR&PUSH 2 53)                  ; +
42    (CONST&PUSH 3)                      ; (# # # ...)
43    (CALL2 4)                           ; ZL-ASSOC
45    (CDR)
46    (JMPIF L49)
48    (CONST 5)                           ; MFORMAT
49    L49
49    (PUSH)
50    (LOAD&PUSH 4)
51    (LOAD&PUSH 2)
52    (LOAD 4)
53    (LIST* 3)
55    (SKIP&RET 7)
57    L57
57    (NIL)
58    (SKIP&RET 7)


Disassembly of function #:|(DEFUN MTELL-TRANSLATE (ARGUMENTS COMPILING?) ...)-38|
(CONST 0) = MTELL-TRANSLATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MTELL-TRANSLATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTELL-TRANSLATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MTELL-TRANSLATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MTELL-TRANSLATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MTELL-TRANSLATE
8     (SKIP&RET 1)


Disassembly of function MTELL-TRANSLATE
(CONST 0) = PROCESS-MESSAGE-ARGUMENT
(CONST 1) = MFORMAT-SYNTAX-CHECK
(CONST 2) = 1
(CONST 3) = ((1 . MTELL1) (2 . MTELL2) (3 . MTELL3) (4 . MTELL4) (5 . MTELL5))
(CONST 4) = ZL-ASSOC
(CONST 5) = MTELL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
35 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (LOAD&CAR&STORE 0 1)
5     (LOAD&CDR&STORE 0)
7     (LOAD&PUSH 1)
8     (CALL1&PUSH 0)                      ; PROCESS-MESSAGE-ARGUMENT
10    (LOAD&JMPIFNOT 0 L51)
13    (LOAD&CAR&STORE 0 0)
16    (LOAD&PUSH 2)
17    (CALLS2&JMPIFNOT 7 L30)             ; STRINGP
20    (LOAD&JMPIFNOT 4 L30)
23    (CONST&SYMBOL-FUNCTION&PUSH 1)      ; MFORMAT-SYNTAX-CHECK
25    (NIL&PUSH)
26    (LOAD&PUSH 4)
27    (LOAD 4)
28    (APPLY 2)
30    L30
30    (CONST&PUSH 2)                      ; 1
31    (LOAD&PUSH 2)
32    (CALLS2&PUSH 71)                    ; LENGTH
34    (CALLSR&PUSH 2 53)                  ; +
37    (CONST&PUSH 3)                      ; ((1 . MTELL1) (2 . MTELL2) ...)
38    (CALL2 4)                           ; ZL-ASSOC
40    (CDR)
41    (JMPIF L44)
43    (CONST 5)                           ; MTELL
44    L44
44    (PUSH)
45    (LOAD&PUSH 1)
46    (LOAD 3)
47    (LIST* 2)
49    (SKIP&RET 6)
51    L51
51    (NIL)
52    (SKIP&RET 6)


Disassembly of function #:|(DEFMACRO MFORMAT-OPEN (STREAM SSTRING &REST ...) ...)-39|
(CONST 0) = MFORMAT-OPEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MFORMAT-OPEN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFORMAT-OPEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MFORMAT-OPEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MFORMAT-OPEN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MFORMAT-OPEN
10    (SKIP&RET 1)


Disassembly of function MFORMAT-OPEN
(CONST 0) = 3
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = "without any special action"
(CONST 3) = "Not a string, can't open-compile the MFORMAT call"
(CONST 4) = FAIL-ACT
(CONST 5) = CERROR
(CONST 6) = MFORMAT-TRANSLATE-OPEN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
33 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 3
4     (CALLSR&JMPIF 1 47 L31)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR&PUSH)
19    (LOAD&PUSH 1)
20    (CALLS2&JMPIFNOT 7 L36)             ; STRINGP
23    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; MFORMAT-TRANSLATE-OPEN
25    (LOAD&PUSH 3)
26    (LOAD&PUSH 3)
27    (LOAD 3)
28    (APPLY&SKIP&RET 2 6)
31    L31
31    (LOAD&PUSH 2)
32    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
34    (SKIP&RET 3)
36    L36
36    (CONST&PUSH 2)                      ; "without any special action"
37    (CONST&PUSH 3)                      ; "Not a string, can't open-compile the MFORMAT call"
38    (LOAD&PUSH 3)
39    (CONST&PUSH 4)                      ; FAIL-ACT
40    (CALL 4 5)                          ; CERROR
43    (SKIP&RET 6)


Disassembly of function #:|(DEFMACRO MTELL-OPEN (MESSAGE &REST OTHER-SHIT) ...)-40|
(CONST 0) = MTELL-OPEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MTELL-OPEN>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTELL-OPEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MTELL-OPEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MTELL-OPEN>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; MTELL-OPEN
10    (SKIP&RET 1)


Disassembly of function MTELL-OPEN
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = MFORMAT-OPEN
1 required argument
1 optional argument
No rest parameter
No keyword parameters
20 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 47 L22)             ; <
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR&PUSH)
14    (CONST&PUSH 2)                      ; MFORMAT-OPEN
15    (NIL&PUSH)
16    (LOAD&PUSH 3)
17    (LOAD 3)
18    (LIST* 3)
20    (SKIP&RET 5)
22    L22
22    (LOAD&PUSH 2)
23    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
25    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MERROR-TRANSLATE (ARGUMENTS COMPILING?) ...)-41|
(CONST 0) = MERROR-TRANSLATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MERROR-TRANSLATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MERROR-TRANSLATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MERROR-TRANSLATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MERROR-TRANSLATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MERROR-TRANSLATE
8     (SKIP&RET 1)


Disassembly of function MERROR-TRANSLATE
(CONST 0) = PROCESS-MESSAGE-ARGUMENT
(CONST 1) = MFORMAT-SYNTAX-CHECK
(CONST 2) = 1
(CONST 3) = 
((1 . *MERROR-1) (2 . *MERROR-2) (3 . *MERROR-3) (4 . *MERROR-4)
 (5 . *MERROR-5))
(CONST 4) = ZL-ASSOC
(CONST 5) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
35 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (LOAD&CAR&STORE 0 1)
5     (LOAD&CDR&STORE 0)
7     (LOAD&PUSH 1)
8     (CALL1&PUSH 0)                      ; PROCESS-MESSAGE-ARGUMENT
10    (LOAD&JMPIFNOT 0 L51)
13    (LOAD&PUSH 2)
14    (CALLS2&JMPIFNOT 7 L27)             ; STRINGP
17    (LOAD&JMPIFNOT 4 L27)
20    (CONST&SYMBOL-FUNCTION&PUSH 1)      ; MFORMAT-SYNTAX-CHECK
22    (NIL&PUSH)
23    (LOAD&PUSH 4)
24    (LOAD 4)
25    (APPLY 2)
27    L27
27    (LOAD&CAR&STORE 0 0)
30    (CONST&PUSH 2)                      ; 1
31    (LOAD&PUSH 2)
32    (CALLS2&PUSH 71)                    ; LENGTH
34    (CALLSR&PUSH 2 53)                  ; +
37    (CONST&PUSH 3)                      ; (# # # ...)
38    (CALL2 4)                           ; ZL-ASSOC
40    (CDR)
41    (JMPIF L44)
43    (CONST 5)                           ; MERROR
44    L44
44    (PUSH)
45    (LOAD&PUSH 1)
46    (LOAD 3)
47    (LIST* 2)
49    (SKIP&RET 6)
51    L51
51    (NIL)
52    (SKIP&RET 6)


Disassembly of function #:|(DEFUN ERRRJF-TRANSLATE (ARGUMENTS COMPILING?) ...)-42|
(CONST 0) = ERRRJF-TRANSLATE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ERRRJF-TRANSLATE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ERRRJF-TRANSLATE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ERRRJF-TRANSLATE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ERRRJF-TRANSLATE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ERRRJF-TRANSLATE
8     (SKIP&RET 1)


Disassembly of function ERRRJF-TRANSLATE
(CONST 0) = PROCESS-MESSAGE-ARGUMENT
(CONST 1) = MFORMAT-SYNTAX-CHECK
(CONST 2) = 1
(CONST 3) = ((1 . *ERRRJF-1))
(CONST 4) = ZL-ASSOC
(CONST 5) = ERRRJF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
35 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (LOAD&CAR&STORE 0 1)
5     (LOAD&CDR&STORE 0)
7     (LOAD&PUSH 1)
8     (CALL1&PUSH 0)                      ; PROCESS-MESSAGE-ARGUMENT
10    (LOAD&JMPIFNOT 0 L51)
13    (LOAD&PUSH 2)
14    (CALLS2&JMPIFNOT 7 L27)             ; STRINGP
17    (LOAD&JMPIFNOT 4 L27)
20    (CONST&SYMBOL-FUNCTION&PUSH 1)      ; MFORMAT-SYNTAX-CHECK
22    (NIL&PUSH)
23    (LOAD&PUSH 4)
24    (LOAD 4)
25    (APPLY 2)
27    L27
27    (LOAD&CAR&STORE 0 0)
30    (CONST&PUSH 2)                      ; 1
31    (LOAD&PUSH 2)
32    (CALLS2&PUSH 71)                    ; LENGTH
34    (CALLSR&PUSH 2 53)                  ; +
37    (CONST&PUSH 3)                      ; ((1 . *ERRRJF-1))
38    (CALL2 4)                           ; ZL-ASSOC
40    (CDR)
41    (JMPIF L44)
43    (CONST 5)                           ; ERRRJF
44    L44
44    (PUSH)
45    (LOAD&PUSH 1)
46    (LOAD 3)
47    (LIST* 2)
49    (SKIP&RET 6)
51    L51
51    (NIL)
52    (SKIP&RET 6)


Wrote file binary-clisp/mforma.fas
Wrote file /cygdrive/e/temp/maxima/src/mforma.lis