Listing of compilation of file /cygdrive/e/temp/maxima/src/rat3e.lisp
on 2002-12-17 13:33:39 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/rat3e.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE RAT3E)-2|
(CONST 0) = RAT3E
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT3E
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (*LEXPR OUTERMAP1 $DIVIDE ...) (*EXPR $FLOAT) ...)-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS RZMAC RATMAC)-4|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (GENPREFIX A_5))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR GENVAR NIL ...)-6-1|
(CONST 0) = GENVAR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; GENVAR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; GENVAR
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR GENVAR NIL ...)-6-2|
(CONST 0) = (SPECIAL GENVAR)
(CONST 1) = GENVAR
(CONST 2) = VARIABLE
(CONST 3) = 
"List of gensyms used to point to kernels from within polynomials.
	 The values cell and property lists of these symbols are used to
	 store various information."
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL GENVAR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; GENVAR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; GENVAR
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; GENVAR
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "List of gensyms used to point to kernels from within polynomials.
	 The values cell and property lists of these symbols are used to
	 store various information."
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; GENVAR
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR GENPAIRS NIL)-7-1|
(CONST 0) = GENPAIRS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; GENPAIRS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; GENPAIRS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR GENPAIRS NIL)-7-2|
(CONST 0) = (SPECIAL GENPAIRS)
(CONST 1) = GENPAIRS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL GENPAIRS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; GENPAIRS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; GENPAIRS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; GENPAIRS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR VARLIST NIL ...)-8-1|
(CONST 0) = VARLIST
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; VARLIST
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; VARLIST
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR VARLIST NIL ...)-8-2|
(CONST 0) = (SPECIAL VARLIST)
(CONST 1) = VARLIST
(CONST 2) = VARIABLE
(CONST 3) = "List of kernels"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL VARLIST)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; VARLIST
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; VARLIST
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; VARLIST
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "List of kernels"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; VARLIST
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *FNEWVARSW NIL)-9-1|
(CONST 0) = *FNEWVARSW
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *FNEWVARSW
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *FNEWVARSW
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *FNEWVARSW NIL)-9-2|
(CONST 0) = (SPECIAL *FNEWVARSW)
(CONST 1) = *FNEWVARSW
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *FNEWVARSW)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *FNEWVARSW
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *FNEWVARSW
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *FNEWVARSW
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *RATWEIGHTS NIL)-10-1|
(CONST 0) = *RATWEIGHTS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; *RATWEIGHTS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; *RATWEIGHTS
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR *RATWEIGHTS NIL)-10-2|
(CONST 0) = (SPECIAL *RATWEIGHTS)
(CONST 1) = *RATWEIGHTS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *RATWEIGHTS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *RATWEIGHTS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *RATWEIGHTS
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *RATWEIGHTS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *RATSIMP* NIL)-11|
(CONST 0) = (SPECIAL *RATSIMP*)
(CONST 1) = *RATSIMP*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *RATSIMP*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *RATSIMP*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *RATSIMP*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *RATSIMP*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR FACTORRESIMP NIL ...)-12-1|
(CONST 0) = FACTORRESIMP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTORRESIMP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; FACTORRESIMP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR FACTORRESIMP NIL ...)-12-2|
(CONST 0) = (SPECIAL FACTORRESIMP)
(CONST 1) = FACTORRESIMP
(CONST 2) = VARIABLE
(CONST 3) = "If T resimplifies FACTOR(X-Y) to X-Y"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL FACTORRESIMP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; FACTORRESIMP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; FACTORRESIMP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; FACTORRESIMP
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If T resimplifies FACTOR(X-Y) to X-Y"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; FACTORRESIMP
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $KEEPFLOAT NIL ...)-13-1|
(CONST 0) = $KEEPFLOAT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $KEEPFLOAT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $KEEPFLOAT
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $KEEPFLOAT NIL ...)-13-2|
(CONST 0) = (SPECIAL $KEEPFLOAT)
(CONST 1) = $KEEPFLOAT
(CONST 2) = VARIABLE
(CONST 3) = "If t floating point coeffs are not converted to rationals"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $KEEPFLOAT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $KEEPFLOAT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $KEEPFLOAT
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $KEEPFLOAT
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If t floating point coeffs are not converted to rationals"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $KEEPFLOAT
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FACTORFLAG NIL ...)-14-1|
(CONST 0) = $FACTORFLAG
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FACTORFLAG
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $FACTORFLAG
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FACTORFLAG NIL ...)-14-2|
(CONST 0) = (SPECIAL $FACTORFLAG)
(CONST 1) = $FACTORFLAG
(CONST 2) = VARIABLE
(CONST 3) = "If t constant factor of polynomial is also factored"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $FACTORFLAG)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $FACTORFLAG
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $FACTORFLAG
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $FACTORFLAG
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If t constant factor of polynomial is also factored"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $FACTORFLAG
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DONTFACTOR '(#))-15-1|
(CONST 0) = $DONTFACTOR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MLIST))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DONTFACTOR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $DONTFACTOR
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MLIST))
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $DONTFACTOR '(#))-15-2|
(CONST 0) = (SPECIAL $DONTFACTOR)
(CONST 1) = $DONTFACTOR
(CONST 2) = ((MLIST))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $DONTFACTOR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $DONTFACTOR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $DONTFACTOR
8     (CONST&PUSH 2)                      ; ((MLIST))
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $DONTFACTOR
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NOREPEAT T)-16-1|
(CONST 0) = $NOREPEAT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NOREPEAT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $NOREPEAT
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NOREPEAT T)-16-2|
(CONST 0) = (SPECIAL $NOREPEAT)
(CONST 1) = $NOREPEAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $NOREPEAT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $NOREPEAT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $NOREPEAT
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $NOREPEAT
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATWEIGHTS '(#))-17-1|
(CONST 0) = $RATWEIGHTS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MLIST SIMP))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATWEIGHTS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RATWEIGHTS
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MLIST SIMP))
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATWEIGHTS '(#))-17-2|
(CONST 0) = (SPECIAL $RATWEIGHTS)
(CONST 1) = $RATWEIGHTS
(CONST 2) = ((MLIST SIMP))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RATWEIGHTS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RATWEIGHTS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RATWEIGHTS
8     (CONST&PUSH 2)                      ; ((MLIST SIMP))
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $RATWEIGHTS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATFAC NIL ...)-18-1|
(CONST 0) = $RATFAC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATFAC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RATFAC
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATFAC NIL ...)-18-2|
(CONST 0) = (SPECIAL $RATFAC)
(CONST 1) = $RATFAC
(CONST 2) = VARIABLE
(CONST 3) = "If t cre-forms are kept factored"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RATFAC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RATFAC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RATFAC
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; $RATFAC
12    (CONST&PUSH 2)                      ; VARIABLE
13    (CONST&PUSH 3)                      ; "If t cre-forms are kept factored"
14    (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; $RATFAC
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ALGEBRAIC NIL)-19-1|
(CONST 0) = $ALGEBRAIC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ALGEBRAIC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $ALGEBRAIC
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $ALGEBRAIC NIL)-19-2|
(CONST 0) = (SPECIAL $ALGEBRAIC)
(CONST 1) = $ALGEBRAIC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $ALGEBRAIC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $ALGEBRAIC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $ALGEBRAIC
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $ALGEBRAIC
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATVARS '(#))-20-1|
(CONST 0) = $RATVARS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MLIST SIMP))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATVARS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RATVARS
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MLIST SIMP))
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATVARS '(#))-20-2|
(CONST 0) = (SPECIAL $RATVARS)
(CONST 1) = $RATVARS
(CONST 2) = ((MLIST SIMP))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RATVARS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RATVARS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RATVARS
8     (CONST&PUSH 2)                      ; ((MLIST SIMP))
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $RATVARS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FACEXPAND T)-21-1|
(CONST 0) = $FACEXPAND
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FACEXPAND
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $FACEXPAND
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $FACEXPAND T)-21-2|
(CONST 0) = (SPECIAL $FACEXPAND)
(CONST 1) = $FACEXPAND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $FACEXPAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $FACEXPAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $FACEXPAND
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $FACEXPAND
12    (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL EVP $INFEVAL))-22|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MRATEVAL (X) ...)-23|
(CONST 0) = MRATEVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MRATEVAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MRATEVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MRATEVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MRATEVAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MRATEVAL
8     (SKIP&RET 1)


Disassembly of function MRATEVAL
(CONST 0) = X
(CONST 1) = VARLIST
(CONST 2) = EVP
(CONST 3) = $INFEVAL
(CONST 4) = $RATDISREP
(CONST 5) = MEVAL
(CONST 6) = $FLOAT
(CONST 7) = $KEEPFLOAT
(CONST 8) = ALIKE
(CONST 9) = RATF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST $KEEPFLOAT $FLOAT $INFEVAL EVP X)
43 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR)
6     (CDR)
7     (CDR)
8     (CAR)
9     (BIND 1)                            ; VARLIST
11    (GETVALUE 2)                        ; EVP
13    (JMPIFNOT L19)
15    (GETVALUE 3)                        ; $INFEVAL
17    (JMPIF L49)
19    L19
19    (GETVALUE 2)                        ; EVP
21    (JMPIF L58)
23    (GETVALUE 6)                        ; $FLOAT
25    (JMPIFNOT L31)
27    (GETVALUE 7)                        ; $KEEPFLOAT
29    (JMPIF L58)
31    L31
31    (GETVALUE&PUSH 1)                   ; VARLIST
33    (CONST&SYMBOL-FUNCTION&PUSH 5)      ; MEVAL
35    (GETVALUE&PUSH 1)                   ; VARLIST
37    (CALLSR&PUSH 0 22)                  ; MAPCAR
40    (CALL2&JMPIFNOT 8 L58)              ; ALIKE
43    (GETVALUE 0)                        ; X
45    (UNBIND1)
46    L46
46    (UNBIND1)
47    (SKIP&RET 2)
49    L49
49    (GETVALUE&PUSH 0)                   ; X
51    (CALL1&PUSH 4)                      ; $RATDISREP
53    (CALL1 5)                           ; MEVAL
55    (UNBIND1)
56    (JMP L46)
58    L58
58    (GETVALUE&PUSH 0)                   ; X
60    (CALL1&PUSH 4)                      ; $RATDISREP
62    (CALL1&PUSH 5)                      ; MEVAL
64    (CALL1 9)                           ; RATF
66    (UNBIND1)
67    (JMP L46)


Disassembly of function #:|(DEFPROP MRAT MRATEVAL ...)-24|
(CONST 0) = MRAT
(CONST 1) = MFEXPR*
(CONST 2) = MRATEVAL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MRAT
1     (CONST&PUSH 1)                      ; MFEXPR*
2     (CONST&PUSH 2)                      ; MRATEVAL
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $RATNUMER (X) ...)-25|
(CONST 0) = $RATNUMER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATNUMER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATNUMER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATNUMER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATNUMER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATNUMER
8     (SKIP&RET 1)


Disassembly of function $RATNUMER
(CONST 0) = X
(CONST 1) = TAYCHK2RAT
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; TAYCHK2RAT
7     (SETVALUE 0)                        ; X
9     (CAR&PUSH)
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CAR&PUSH)
14    (CONST 2)                           ; 1
15    (CONS)
16    (CONS)
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $RATDENOM (X) ...)-26|
(CONST 0) = $RATDENOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATDENOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATDENOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATDENOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATDENOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATDENOM
8     (SKIP&RET 1)


Disassembly of function $RATDENOM
(CONST 0) = X
(CONST 1) = TAYCHK2RAT
(CONST 2) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; TAYCHK2RAT
7     (SETVALUE 0)                        ; X
9     (CAR&PUSH)
10    (GETVALUE 0)                        ; X
12    (CDR)
13    (CDR&PUSH)
14    (CONST 2)                           ; 1
15    (CONS)
16    (CONS)
17    (UNBIND1)
18    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TAYCHK2RAT (X) ...)-27|
(CONST 0) = TAYCHK2RAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAYCHK2RAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAYCHK2RAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAYCHK2RAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAYCHK2RAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAYCHK2RAT
8     (SKIP&RET 1)


Disassembly of function TAYCHK2RAT
(CONST 0) = X
(CONST 1) = $RATP
(CONST 2) = TRUNC
(CONST 3) = MEMQ
(CONST 4) = $TAYTORAT
(CONST 5) = RATF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIFNOT 1 L16)              ; $RATP
8     (CONST&PUSH 2)                      ; TRUNC
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CDR&PUSH)
13    (CALL2&JMPIF 3 L23)                 ; MEMQ
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1 5)                           ; RATF
20    L20
20    (UNBIND1)
21    (SKIP&RET 2)
23    L23
23    (GETVALUE&PUSH 0)                   ; X
25    (CALL1 4)                           ; $TAYTORAT
27    (JMP L20)


Disassembly of function #:|(DEFMVAR TELLRATLIST NIL)-28-1|
(CONST 0) = TELLRATLIST
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; TELLRATLIST
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; TELLRATLIST
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR TELLRATLIST NIL)-28-2|
(CONST 0) = (SPECIAL TELLRATLIST)
(CONST 1) = TELLRATLIST
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL TELLRATLIST)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; TELLRATLIST
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; TELLRATLIST
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; TELLRATLIST
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TELLRATDISP (X) ...)-29|
(CONST 0) = TELLRATDISP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TELLRATDISP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TELLRATDISP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TELLRATDISP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TELLRATDISP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TELLRATDISP
8     (SKIP&RET 1)


Disassembly of function TELLRATDISP
(CONST 0) = X
(CONST 1) = TRDISP1
(CONST 2) = PDISREP+
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR&PUSH)
6     (GETVALUE 0)                        ; X
8     (CAR&PUSH)
9     (CALL2&PUSH 1)                      ; TRDISP1
11    (CALL1 2)                           ; PDISREP+
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TRDISP1 (P VAR) ...)-30|
(CONST 0) = TRDISP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRDISP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRDISP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRDISP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRDISP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRDISP1
8     (SKIP&RET 1)


Disassembly of function TRDISP1
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = MTIMESP
(CONST 3) = PDISREP!
(CONST 4) = PDISREP*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR P)
39 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE 0)                        ; P
8     (JMPIFNOT L44)
10    (GETVALUE 0)                        ; P
12    (CDR)
13    (CAR&PUSH)
14    (CALL1&JMPIF 2 L47)                 ; MTIMESP
17    (GETVALUE 0)                        ; P
19    (CDR)
20    (CAR)
21    L21
21    (PUSH)
22    (GETVALUE 0)                        ; P
24    (CAR&PUSH)
25    (GETVALUE&PUSH 1)                   ; VAR
27    (CALL2&PUSH 3)                      ; PDISREP!
29    (CALL2&PUSH 4)                      ; PDISREP*
31    (GETVALUE 0)                        ; P
33    (CDR)
34    (CDR&PUSH)
35    (GETVALUE&PUSH 1)                   ; VAR
37    (JSR L0)
39    (CONS)
40    L40
40    (UNBIND 2)
42    (SKIP&RET 3)
44    L44
44    (NIL)
45    (JMP L40)
47    L47
47    (GETVALUE 0)                        ; P
49    (CDR)
50    (CAR&PUSH)
51    (CALLS1 158)                        ; COPY-LIST
53    (JMP L21)


Disassembly of function #:|(DEFMFUN $UNTELLRAT N ...)-31|
(CONST 0) = $UNTELLRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $UNTELLRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $UNTELLRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $UNTELLRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $UNTELLRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $UNTELLRAT
8     (SKIP&RET 1)


Disassembly of function $UNTELLRAT
(CONST 0) = LISTIFY1
(CONST 1) = X
(CONST 2) = TELLRATLIST
(CONST 3) = ASSOL
(CONST 4) = ZL-REMOVE
(CONST 5) = (MLIST)
(CONST 6) = TELLRATDISP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (TELLRATLIST)
writes special variables : (TELLRATLIST X)
34 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (LOAD&PUSH 3)
5     (CALL2&PUSH 0)                      ; LISTIFY1
7     (NIL)
8     (BIND 1)                            ; X
10    (JMP L34)
12    L12
12    (LOAD 3)
13    (CAR)
14    (SETVALUE 1)                        ; X
16    (PUSH)
17    (GETVALUE&PUSH 2)                   ; TELLRATLIST
19    (CALL2 3)                           ; ASSOL
21    (SETVALUE 1)                        ; X
23    (JMPIFNOT L32)
25    (PUSH)
26    (GETVALUE&PUSH 2)                   ; TELLRATLIST
28    (CALL2 4)                           ; ZL-REMOVE
30    (SETVALUE 2)                        ; TELLRATLIST
32    L32
32    (LOAD&CDR&STORE 3)
34    L34
34    (LOAD&PUSH 3)
35    (CALLS1&JMPIFNOT 146 L12)           ; ENDP
38    (UNBIND1)
39    (SKIP 1)
41    (CONST&PUSH 5)                      ; (MLIST)
42    (CONST&PUSH 6)                      ; TELLRATDISP
43    (GETVALUE&PUSH 2)                   ; TELLRATLIST
45    (CALLSR 0 22)                       ; MAPCAR
48    (CONS)
49    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $TELLRAT (&REST NARG-REST-ARGUMENT &AUX ...) ...)-32|
(CONST 0) = $TELLRAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TELLRAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TELLRAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TELLRAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TELLRAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TELLRAT
8     (SKIP&RET 1)


Disassembly of function $TELLRAT
(CONST 0) = 1
(CONST 1) = TELLRAT1
(CONST 2) = 0
(CONST 3) = TELLRATLIST
(CONST 4) = $MYOPTIONS
(CONST 5) = ADD2LNC
(CONST 6) = (MLIST)
(CONST 7) = TELLRATDISP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (TELLRATLIST $MYOPTIONS)
31 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL&PUSH)
4     (LOAD 1)
5     (STORE 0)
6     (CONST&PUSH 0)                      ; 1
7     (JMP L18)
9     L9
9     (LOAD&DEC&PUSH 0)
11    (LOAD&PUSH 5)
12    (CALLS1&PUSH 148)                   ; NTH
14    (CALL1 1)                           ; TELLRAT1
16    (LOAD&INC&STORE 0)
18    L18
18    (LOAD&PUSH 0)
19    (LOAD&PUSH 2)
20    (CALLSR&JMPIFNOT 1 48 L9)           ; >
24    (SKIP 1)
26    (LOAD&PUSH 0)
27    (CONST&PUSH 2)                      ; 0
28    (CALLSR&JMPIF 1 45 L37)             ; =
32    (CONST&PUSH 3)                      ; TELLRATLIST
33    (GETVALUE&PUSH 4)                   ; $MYOPTIONS
35    (CALL2 5)                           ; ADD2LNC
37    L37
37    (CONST&PUSH 6)                      ; (MLIST)
38    (CONST&PUSH 7)                      ; TELLRATDISP
39    (GETVALUE&PUSH 3)                   ; TELLRATLIST
41    (CALLSR 0 22)                       ; MAPCAR
44    (CONS)
45    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TELLRAT1 (X &AUX VARLIST ...) ...)-33|
(CONST 0) = TELLRAT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TELLRAT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TELLRAT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TELLRAT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TELLRAT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TELLRAT1
8     (SKIP&RET 1)


Disassembly of function TELLRAT1
(CONST 0) = X
(CONST 1) = VARLIST
(CONST 2) = GENVAR
(CONST 3) = $ALGEBRAIC
(CONST 4) = $RATFAC
(CONST 5) = $TOTALDISREP
(CONST 6) = MEQUAL
(CONST 7) = NEWVAR
(CONST 8) = MEQHK
(CONST 9) = "Improper polynomial"
(CONST 10) = MERROR
(CONST 11) = RATREP*
(CONST 12) = OLDCONTENT
(CONST 13) = 1
(CONST 14) = "Minimal polynomial must be monic"
(CONST 15) = P
(CONST 16) = PDIS
(CONST 17) = TELLRATLIST
(CONST 18) = ASSOL
(CONST 19) = ZL-REMOVE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TELLRATLIST P VARLIST X)
writes special variables : (TELLRATLIST P X)
99 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; VARLIST
6     (NIL)
7     (BIND 2)                            ; GENVAR
9     (NIL)
10    (BIND 3)                            ; $ALGEBRAIC
12    (NIL)
13    (BIND 4)                            ; $RATFAC
15    (NIL&PUSH)
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1 5)                           ; $TOTALDISREP
20    (SETVALUE 0)                        ; X
22    (JMPIFATOM L37)
24    (GETVALUE 0)                        ; X
26    (CAR)
27    (CAR&PUSH)
28    (JMPIFNOTEQTO 6 L37)                ; MEQUAL
31    (GETVALUE 0)                        ; X
33    (CDR)
34    (CAR&PUSH)
35    (CALL1 7)                           ; NEWVAR
37    L37
37    (GETVALUE&PUSH 0)                   ; X
39    (CALL1 8)                           ; MEQHK
41    (SETVALUE 0)                        ; X
43    (PUSH)
44    (CALL1 7)                           ; NEWVAR
46    (GETVALUE 1)                        ; VARLIST
48    (JMPIF L53)
50    (CONST&PUSH 9)                      ; "Improper polynomial"
51    (CALL1 10)                          ; MERROR
53    L53
53    (GETVALUE&PUSH 1)                   ; VARLIST
55    (PUSH-UNBOUND 1)
57    (CALLS1 156)                        ; LAST
59    (CAR)
60    (STORE 0)
61    (GETVALUE&PUSH 0)                   ; X
63    (CALL1 11)                          ; RATREP*
65    (CDR)
66    (CAR&PUSH)
67    (CALL1 12)                          ; OLDCONTENT
69    (CDR)
70    (CAR)
71    (CDR)
72    (SETVALUE 0)                        ; X
74    (CDR)
75    (CAR&PUSH)
76    (JMPIFEQTO 13 L82)                  ; 1
79    (CONST&PUSH 14)                     ; "Minimal polynomial must be monic"
80    (CALL1 10)                          ; MERROR
82    L82
82    (GETVALUE 0)                        ; X
84    (CDR)
85    (CDR)
86    (BIND 15)                           ; P
88    (GETVALUE 15)                       ; P
90    (JMPIFNOT L117)
92    L92
92    (GETVALUE&PUSH 15)                  ; P
94    (GETVALUE 15)                       ; P
96    (CDR)
97    (CAR&PUSH)
98    (CALL1&PUSH 16)                     ; PDIS
100   (LOAD&CDR&PUSH 1)
102   (LOAD&PUSH 1)
103   (CALLS1 169)                        ; SYSTEM::%RPLACA
105   (SKIP 2)
107   (GETVALUE 15)                       ; P
109   (CDR)
110   (CDR)
111   (SETVALUE 15)                       ; P
113   (GETVALUE 15)                       ; P
115   (JMPIF L92)
117   L117
117   (UNBIND1)
118   (LOAD&PUSH 0)
119   (GETVALUE 0)                        ; X
121   (CONS)
122   (STORE 0)
123   (CAR&PUSH)
124   (GETVALUE&PUSH 17)                  ; TELLRATLIST
126   (CALL2 18)                          ; ASSOL
128   (SETVALUE 0)                        ; X
130   (JMPIFNOT L139)
132   (PUSH)
133   (GETVALUE&PUSH 17)                  ; TELLRATLIST
135   (CALL2 19)                          ; ZL-REMOVE
137   (SETVALUE 17)                       ; TELLRATLIST
139   L139
139   (LOAD&PUSH 0)
140   (GETVALUE 17)                       ; TELLRATLIST
142   (CONS)
143   (SETVALUE 17)                       ; TELLRATLIST
145   (SKIP 1)
147   (UNBIND 5)
149   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $PRINTVARLIST NIL ...)-34|
(CONST 0) = $PRINTVARLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PRINTVARLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PRINTVARLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PRINTVARLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PRINTVARLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PRINTVARLIST
8     (SKIP&RET 1)


Disassembly of function $PRINTVARLIST
(CONST 0) = (MLIST)
(CONST 1) = VARLIST
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VARLIST)
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MLIST)
1     (GETVALUE&PUSH 1)                   ; VARLIST
3     (CALLS1 161)                        ; COPY-TREE
5     (CONS)
6     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $SHOWRATVARS (E) ...)-35|
(CONST 0) = $SHOWRATVARS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SHOWRATVARS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SHOWRATVARS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SHOWRATVARS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SHOWRATVARS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SHOWRATVARS
8     (SKIP&RET 1)


Disassembly of function $SHOWRATVARS
(CONST 0) = (MLIST SIMP)
(CONST 1) = $RATP
(CONST 2) = TRUNC
(CONST 3) = MEMQ
(CONST 4) = $TAYTORAT
(CONST 5) = MINIMIZE-VARLIST
(CONST 6) = VARLIST
(CONST 7) = LNEWVAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VARLIST)
29 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MLIST SIMP)
1     (LOAD&PUSH 2)
2     (CALL1&JMPIF 1 L17)                 ; $RATP
5     (NIL)
6     (BIND 6)                            ; VARLIST
8     (LOAD&PUSH 5)
9     (CALL1 7)                           ; LNEWVAR
11    (GETVALUE 6)                        ; VARLIST
13    (UNBIND1)
14    L14
14    (CONS)
15    (SKIP&RET 2)
17    L17
17    (CONST&PUSH 2)                      ; TRUNC
18    (LOAD 3)
19    (CAR)
20    (CDR&PUSH)
21    (CALL2&JMPIFNOT 3 L28)              ; MEMQ
24    (LOAD&PUSH 2)
25    (CALL1 4)                           ; $TAYTORAT
27    (STORE 2)
28    L28
28    (LOAD&PUSH 2)
29    (CALL1 5)                           ; MINIMIZE-VARLIST
31    (CAR)
32    (CDR)
33    (CDR)
34    (CAR)
35    (JMP L14)


Disassembly of function #:|(DEFMFUN $RATVARS N ...)-36|
(CONST 0) = $RATVARS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATVARS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATVARS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATVARS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATVARS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATVARS
8     (SKIP&RET 1)


Disassembly of function $RATVARS
(CONST 0) = $RATVARS
(CONST 1) = $MYOPTIONS
(CONST 2) = ADD2LNC
(CONST 3) = (MLIST SIMP)
(CONST 4) = LISTIFY1
(CONST 5) = VARLIST
(CONST 6) = MAPFR1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (VARLIST $MYOPTIONS)
writes special variables : ($RATVARS VARLIST)
15 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; $RATVARS
4     (GETVALUE&PUSH 1)                   ; $MYOPTIONS
6     (CALL2 2)                           ; ADD2LNC
8     (CONST&PUSH 3)                      ; (MLIST SIMP)
9     (LOAD&PUSH 1)
10    (LOAD&PUSH 4)
11    (CALL2&PUSH 4)                      ; LISTIFY1
13    (GETVALUE&PUSH 5)                   ; VARLIST
15    (CALL2 6)                           ; MAPFR1
17    (SETVALUE 5)                        ; VARLIST
19    (CONS)
20    (SETVALUE 0)                        ; $RATVARS
22    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MAPFR1 (L VARLIST) ...)-37|
(CONST 0) = MAPFR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAPFR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAPFR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAPFR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAPFR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAPFR1
8     (SKIP&RET 1)


Disassembly of function MAPFR1
(CONST 0) = L
(CONST 1) = VARLIST
(CONST 2) = FR1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST L)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; L
3     (LOAD 4)
4     (BIND 1)                            ; VARLIST
6     (NIL&PUSH)
7     (GETVALUE&PUSH 0)                   ; L
9     (JMP L24)
11    L11
11    (LOAD&CAR&PUSH 0)
13    (LOAD&PUSH 0)
14    (GETVALUE&PUSH 1)                   ; VARLIST
16    (CALL2&PUSH 2)                      ; FR1
18    (LOAD&CONS&STORE 2)
20    (SKIP 1)
22    (LOAD&CDR&STORE 0)
24    L24
24    (LOAD&PUSH 0)
25    (CALLS1&JMPIFNOT 146 L11)           ; ENDP
28    (SKIP 1)
30    (LOAD&PUSH 0)
31    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
33    (SKIP 1)
35    (UNBIND 2)
37    (SKIP&RET 3)


Disassembly of function #:|(DEFMVAR INRATSIMP NIL)-38-1|
(CONST 0) = INRATSIMP
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; INRATSIMP
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; INRATSIMP
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR INRATSIMP NIL)-38-2|
(CONST 0) = (SPECIAL INRATSIMP)
(CONST 1) = INRATSIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL INRATSIMP)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; INRATSIMP
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; INRATSIMP
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; INRATSIMP
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $FULLRATSIMP N ...)-39|
(CONST 0) = $FULLRATSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FULLRATSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FULLRATSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FULLRATSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FULLRATSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FULLRATSIMP
8     (SKIP&RET 1)


Disassembly of function $FULLRATSIMP
(CONST 0) = 0
(CONST 1) = $FULLRATSIMP
(CONST 2) = WNA-ERR
(CONST 3) = 1
(CONST 4) = NARG1
(CONST 5) = LISTIFY1
(CONST 6) = $RATSIMP
(CONST 7) = SIMPLIFY
(CONST 8) = ALIKE1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
35 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 0
5     (CALLSR&JMPIFNOT 1 45 L12)          ; =
9     (CONST&PUSH 1)                      ; $FULLRATSIMP
10    (CALL1 2)                           ; WNA-ERR
12    L12
12    (PUSH-NIL 3)
14    (CONST&PUSH 3)                      ; 1
15    (LOAD&PUSH 6)
16    (CALL2 4)                           ; NARG1
18    (STORE 2)
19    (LOAD&PUSH 3)
20    (LOAD&PUSH 6)
21    (CALL2 5)                           ; LISTIFY1
23    (CDR)
24    (STORE 0)
25    (JMP L29)
27    L27
27    (LOAD 1)
28    (STORE 2)
29    L29
29    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; $RATSIMP
31    (LOAD&PUSH 3)
32    (LOAD 2)
33    (CONS)
34    (APPLY&PUSH 0)
36    (CALL1 7)                           ; SIMPLIFY
38    (STORE 1)
39    (LOAD&PUSH 2)
40    (LOAD&PUSH 2)
41    (CALL2&JMPIFNOT 8 L27)              ; ALIKE1
44    (LOAD 2)
45    (SKIP&RET 6)


Disassembly of function #:|(DEFUN FULLRATSIMP (L) ...)-40|
(CONST 0) = FULLRATSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FULLRATSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FULLRATSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FULLRATSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FULLRATSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FULLRATSIMP
8     (SKIP&RET 1)


Disassembly of function FULLRATSIMP
(CONST 0) = L
(CONST 1) = 0
(CONST 2) = $EXPOP
(CONST 3) = $EXPON
(CONST 4) = INRATSIMP
(CONST 5) = $RATSIMPEXPONS
(CONST 6) = $TOTALDISREP
(CONST 7) = VARLIST
(CONST 8) = FR1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST L)
writes special variable : (L)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST 1)                           ; 0
4     (BIND 2)                            ; $EXPOP
6     (CONST 1)                           ; 0
7     (BIND 3)                            ; $EXPON
9     (T)
10    (BIND 4)                            ; INRATSIMP
12    (NIL)
13    (BIND 5)                            ; $RATSIMPEXPONS
15    (GETVALUE&PUSH 0)                   ; L
17    (CALL1 6)                           ; $TOTALDISREP
19    (SETVALUE 0)                        ; L
21    (PUSH)
22    (GETVALUE&PUSH 7)                   ; VARLIST
24    (CALL2 8)                           ; FR1
26    (UNBIND 5)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $TOTALDISREP (L) ...)-41|
(CONST 0) = $TOTALDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TOTALDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TOTALDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TOTALDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TOTALDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TOTALDISREP
8     (SKIP&RET 1)


Disassembly of function $TOTALDISREP
(CONST 0) = L
(CONST 1) = MRAT
(CONST 2) = AMONG
(CONST 3) = RATDISREP
(CONST 4) = RATSIMP
(CONST 5) = DELQ
(CONST 6) = $TOTALDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFATOM L37)
7     (CONST&PUSH 1)                      ; MRAT
8     (GETVALUE&PUSH 0)                   ; L
10    (CALL2&JMPIFNOT 2 L41)              ; AMONG
13    (GETVALUE 0)                        ; L
15    (CAR)
16    (CAR&PUSH)
17    (JMPIFEQTO 1 L45)                   ; MRAT
20    (CONST&PUSH 4)                      ; RATSIMP
21    (GETVALUE 0)                        ; L
23    (CAR&PUSH)
24    (CALL2&PUSH 5)                      ; DELQ
26    (CONST&PUSH 6)                      ; $TOTALDISREP
27    (GETVALUE 0)                        ; L
29    (CDR&PUSH)
30    (CALLSR 0 22)                       ; MAPCAR
33    (CONS)
34    L34
34    (UNBIND1)
35    (SKIP&RET 2)
37    L37
37    (GETVALUE 0)                        ; L
39    (JMP L34)
41    L41
41    (GETVALUE 0)                        ; L
43    (JMP L34)
45    L45
45    (GETVALUE&PUSH 0)                   ; L
47    (CALL1 3)                           ; RATDISREP
49    (JMP L34)


Disassembly of function #:|(DEFUN JOINVARLIST (CDRL) ...)-42|
(CONST 0) = JOINVARLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE JOINVARLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; JOINVARLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; JOINVARLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE JOINVARLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; JOINVARLIST
8     (SKIP&RET 1)


Disassembly of function JOINVARLIST
(CONST 0) = MAPFR1
(CONST 1) = VARLIST
(CONST 2) = MEMALIKE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VARLIST)
writes special variable : (VARLIST)
27 byte-code instructions:
0     (LOAD&PUSH 1)
1     (NIL&PUSH)
2     (CALL2&PUSH 0)                      ; MAPFR1
4     (CALLS2&PUSH 72)                    ; REVERSE
6     (LOAD&PUSH 0)
7     (JMP L31)
9     L9
9     (LOAD&PUSH 0)
10    (GETVALUE 1)                        ; VARLIST
12    (CONS)
13    (SETVALUE 1)                        ; VARLIST
15    (SKIP 1)
17    (JMP L29)
19    L19
19    (LOAD&CAR&PUSH 0)
21    (LOAD&PUSH 0)
22    (GETVALUE&PUSH 1)                   ; VARLIST
24    (CALL2&JMPIFNOT 2 L9)               ; MEMALIKE
27    (SKIP 1)
29    L29
29    (LOAD&CDR&STORE 0)
31    L31
31    (LOAD&PUSH 0)
32    (CALLS1&JMPIFNOT 146 L19)           ; ENDP
35    (SKIP 1)
37    (POP)
38    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $RAT N ...)-43|
(CONST 0) = $RAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RAT
8     (SKIP&RET 1)


Disassembly of function $RAT
(CONST 0) = 0
(CONST 1) = $RAT
(CONST 2) = WNA-ERR
(CONST 3) = 1
(CONST 4) = VARLIST
(CONST 5) = LISTIFY1
(CONST 6) = JOINVARLIST
(CONST 7) = NARG1
(CONST 8) = LNEWVAR
(CONST 9) = RAT0
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
38 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 0
5     (CALLSR&JMPIFNOT 1 45 L12)          ; =
9     (CONST&PUSH 1)                      ; $RAT
10    (CALL1 2)                           ; WNA-ERR
12    L12
12    (LOAD&PUSH 0)
13    (CONST&PUSH 3)                      ; 1
14    (CALLSR&JMPIF 1 48 L32)             ; >
18    (CONST&PUSH 3)                      ; 1
19    (LOAD&PUSH 3)
20    (CALL2&PUSH 7)                      ; NARG1
22    (CALL1 8)                           ; LNEWVAR
24    (CONST&PUSH 3)                      ; 1
25    (LOAD&PUSH 3)
26    (CALL2&PUSH 7)                      ; NARG1
28    (CALL1 9)                           ; RAT0
30    (SKIP&RET 3)
32    L32
32    (NIL)
33    (BIND 4)                            ; VARLIST
35    (LOAD&PUSH 3)
36    (LOAD&PUSH 6)
37    (CALL2 5)                           ; LISTIFY1
39    (CDR&PUSH)
40    (CALL1 6)                           ; JOINVARLIST
42    (CONST&PUSH 3)                      ; 1
43    (LOAD&PUSH 6)
44    (CALL2&PUSH 7)                      ; NARG1
46    (CALL1 8)                           ; LNEWVAR
48    (CONST&PUSH 3)                      ; 1
49    (LOAD&PUSH 6)
50    (CALL2&PUSH 7)                      ; NARG1
52    (CALL1 9)                           ; RAT0
54    (UNBIND1)
55    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RAT0 (EXP) ...)-44|
(CONST 0) = RAT0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RAT0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RAT0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RAT0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RAT0
8     (SKIP&RET 1)


Disassembly of function RAT0
(CONST 0) = MBAGP
(CONST 1) = RAT0
(CONST 2) = RATF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L9)                  ; MBAGP
4     (LOAD&PUSH 1)
5     (CALL1 2)                           ; RATF
7     (SKIP&RET 2)
9     L9
9     (LOAD&CAR&PUSH 1)
11    (CONST&SYMBOL-FUNCTION&PUSH 1)      ; RAT0
13    (LOAD&CDR&PUSH 3)
15    (CALLSR 0 22)                       ; MAPCAR
18    (CONS)
19    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $RATSIMP N ...)-45|
(CONST 0) = $RATSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATSIMP
8     (SKIP&RET 1)


Disassembly of function $RATSIMP
(CONST 0) = 0
(CONST 1) = $RATSIMP
(CONST 2) = WNA-ERR
(CONST 3) = 1
(CONST 4) = VARLIST
(CONST 5) = LISTIFY1
(CONST 6) = JOINVARLIST
(CONST 7) = NARG1
(CONST 8) = FULLRATSIMP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
30 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 0
5     (CALLSR&JMPIFNOT 1 45 L12)          ; =
9     (CONST&PUSH 1)                      ; $RATSIMP
10    (CALL1 2)                           ; WNA-ERR
12    L12
12    (LOAD&PUSH 0)
13    (CONST&PUSH 3)                      ; 1
14    (CALLSR&JMPIF 1 48 L26)             ; >
18    (CONST&PUSH 3)                      ; 1
19    (LOAD&PUSH 3)
20    (CALL2&PUSH 7)                      ; NARG1
22    (CALL1 8)                           ; FULLRATSIMP
24    (SKIP&RET 3)
26    L26
26    (NIL)
27    (BIND 4)                            ; VARLIST
29    (LOAD&PUSH 3)
30    (LOAD&PUSH 6)
31    (CALL2 5)                           ; LISTIFY1
33    (CDR&PUSH)
34    (CALL1 6)                           ; JOINVARLIST
36    (CONST&PUSH 3)                      ; 1
37    (LOAD&PUSH 6)
38    (CALL2&PUSH 7)                      ; NARG1
40    (CALL1 8)                           ; FULLRATSIMP
42    (UNBIND1)
43    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $SQFR (X) ...)-46|
(CONST 0) = $SQFR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SQFR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SQFR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SQFR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SQFR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SQFR
8     (SKIP&RET 1)


Disassembly of function $SQFR
(CONST 0) = X
(CONST 1) = $RATVARS
(CONST 2) = VARLIST
(CONST 3) = GENVAR
(CONST 4) = $KEEPFLOAT
(CONST 5) = $RATFAC
(CONST 6) = ((FACTORED . SQFRED) (IRREDUCIBLE . SQFR))
(CONST 7) = PSQFR
(CONST 8) = FFACTOR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X $RATVARS)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 1)                        ; $RATVARS
5     (CDR)
6     (BIND 2)                            ; VARLIST
8     (NIL)
9     (BIND 3)                            ; GENVAR
11    (NIL)
12    (BIND 4)                            ; $KEEPFLOAT
14    (NIL)
15    (BIND 5)                            ; $RATFAC
17    (CONST&PUSH 6)                      ; (# #)
18    (GETVALUE&PUSH 0)                   ; X
20    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; PSQFR
22    (CALL2&PUSH 8)                      ; FFACTOR
24    (PUSH-UNBOUND 3)
26    (CALLS1 178)                        ; SUBLIS
28    (UNBIND 5)
30    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (SPECIAL FN CARGS))-47|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN WHICHFN (P) ...)-48|
(CONST 0) = WHICHFN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE WHICHFN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; WHICHFN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; WHICHFN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE WHICHFN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; WHICHFN
8     (SKIP&RET 1)


Disassembly of function WHICHFN
(CONST 0) = P
(CONST 1) = MEXPTP
(CONST 2) = (MEXPT)
(CONST 3) = MTIMESP
(CONST 4) = (MTIMES)
(CONST 5) = WHICHFN
(CONST 6) = FN
(CONST 7) = PFACTOR
(CONST 8) = FFACTOR
(CONST 9) = FACTORALG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FN P)
45 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 0)                   ; P
5     (CALL1&JMPIFNOT 1 L16)              ; MEXPTP
8     (GETVALUE 0)                        ; P
10    (CDR)
11    (CDR)
12    (CAR&PUSH)
13    (CALLS2&JMPIF 12 L32)               ; INTEGERP
16    L16
16    (GETVALUE&PUSH 0)                   ; P
18    (CALL1&JMPIF 3 L48)                 ; MTIMESP
21    (GETVALUE 6)                        ; FN
23    (JMPIF L60)
25    (GETVALUE&PUSH 0)                   ; P
27    (CALL1 9)                           ; FACTORALG
29    L29
29    (UNBIND1)
30    (SKIP&RET 2)
32    L32
32    (CONST&PUSH 2)                      ; (MEXPT)
33    (GETVALUE 0)                        ; P
35    (CDR)
36    (CAR&PUSH)
37    (JSR&PUSH L0)
39    (GETVALUE 0)                        ; P
41    (CDR)
42    (CDR)
43    (CAR&PUSH)
44    (LIST 3)
46    (JMP L29)
48    L48
48    (CONST&PUSH 4)                      ; (MTIMES)
49    (CONST&SYMBOL-FUNCTION&PUSH 5)      ; WHICHFN
51    (GETVALUE 0)                        ; P
53    (CDR&PUSH)
54    (CALLSR 0 22)                       ; MAPCAR
57    (CONS)
58    (JMP L29)
60    L60
60    (GETVALUE&PUSH 0)                   ; P
62    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; PFACTOR
64    (CALL2 8)                           ; FFACTOR
66    (JMP L29)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VAR))-49|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ADN* 1 ...)-50-1|
(CONST 0) = ADN*
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 1
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADN*
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; ADN*
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 1
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR ADN* 1 ...)-50-2|
(CONST 0) = (SPECIAL ADN*)
(CONST 1) = ADN*
(CONST 2) = 1
(CONST 3) = VARIABLE
(CONST 4) = "common denom for algebraic coefficients"
(CONST 5) = SYSTEM::%SET-DOCUMENTATION
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ADN*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ADN*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ADN*
8     (CONST&PUSH 2)                      ; 1
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST&PUSH 1)                      ; ADN*
12    (CONST&PUSH 3)                      ; VARIABLE
13    (CONST&PUSH 4)                      ; "common denom for algebraic coefficients"
14    (CALL 3 5)                          ; SYSTEM::%SET-DOCUMENTATION
17    (CONST 1)                           ; ADN*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFUN FACTORALG (P) ...)-51|
(CONST 0) = FACTORALG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTORALG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTORALG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTORALG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTORALG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTORALG
8     (SKIP&RET 1)


Disassembly of function FACTORALG
(CONST 0) = P
(CONST 1) = ALC
(CONST 2) = ADN*
(CONST 3) = $GCD
(CONST 4) = $ALGEBRAIC
(CONST 5) = 1
(CONST 6) = $NALGFAC
(CONST 7) = INTBS*
(CONST 8) = MINPOLY*
(CONST 9) = FINDIBASE
(CONST 10) = ALGFAC*
(CONST 11) = PFACTOR
(CONST 12) = FFACTOR
(CONST 13) = MPLUS
(CONST 14) = MPLC*
(CONST 15) = ALBK
(CONST 16) = VARLIST
(CONST 17) = PARTITION
(CONST 18) = DOSIMP
(CONST 19) = (RAT)
(CONST 20) = PDIS
(CONST 21) = MUL
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST ADN* ALC MPLC* MINPOLY* INTBS* $NALGFAC P)
writes special variables : (ALGFAC* INTBS* ADN* $GCD)
92 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (NIL)
4     (BIND 1)                            ; ALC
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; ADN*
10    (NIL)
11    (BIND 3)                            ; $GCD
13    (CONST 4)                           ; $ALGEBRAIC
14    (SETVALUE 3)                        ; $GCD
16    (GETVALUE 0)                        ; P
18    (JMPIFATOM L122)
21    (GETVALUE&PUSH 0)                   ; P
23    (CALLS2&JMPIF 8 L122)               ; NUMBERP
27    (CONST 5)                           ; 1
28    (SETVALUE 2)                        ; ADN*
30    (GETVALUE 6)                        ; $NALGFAC
32    (JMPIF L44)
34    (GETVALUE 7)                        ; INTBS*
36    (JMPIF L44)
38    (GETVALUE&PUSH 8)                   ; MINPOLY*
40    (CALL1 9)                           ; FINDIBASE
42    (SETVALUE 7)                        ; INTBS*
44    L44
44    (T)
45    (SETVALUE 10)                       ; ALGFAC*
47    (GETVALUE&PUSH 0)                   ; P
49    (CONST&SYMBOL-FUNCTION&PUSH 11)     ; PFACTOR
51    (CALL2 12)                          ; FFACTOR
53    (STORE 6)
54    (CAR)
55    (CAR&PUSH)
56    (JMPIFEQTO 13 L126)                 ; MPLUS
60    (GETVALUE 14)                       ; MPLC*
62    (JMPIF L130)
65    (GETVALUE 1)                        ; ALC
67    (JMPIF L75)
69    L69
69    (GETVALUE&PUSH 2)                   ; ADN*
71    (JMPIFEQTO 5 L142)                  ; 1
75    L75
75    (LOAD&PUSH 6)
76    (GETVALUE&PUSH 16)                  ; VARLIST
78    (PUSH-UNBOUND 1)
80    (CALLS1 156)                        ; LAST
82    (CAR&PUSH)
83    (CONST&PUSH 5)                      ; 1
84    (CALL 3 17)                         ; PARTITION
87    (STORE 6)
88    (T)
89    (BIND 18)                           ; DOSIMP
91    (CONST&PUSH 19)                     ; (RAT)
92    (CONST&PUSH 5)                      ; 1
93    (GETVALUE&PUSH 2)                   ; ADN*
95    (LIST&PUSH 3)
97    (LOAD&CAR&PUSH 10)
99    (GETVALUE 1)                        ; ALC
101   (JMPIF L145)
103   (CONST 5)                           ; 1
104   L104
104   (PUSH)
105   (CALL 3 21)                         ; MUL
108   (UNBIND1)
109   (PUSH)
110   (LOAD&CDR&PUSH 7)
112   (CALL2 21)                          ; MUL
114   L114
114   (UNBIND 2)
116   (SKIP 1)
118   (UNBIND 2)
120   (SKIP&RET 2)
122   L122
122   (GETVALUE 0)                        ; P
124   (JMP L114)
126   L126
126   (GETVALUE 0)                        ; P
128   (JMP L114)
130   L130
130   (LOAD&PUSH 6)
131   (CALL1 15)                          ; ALBK
133   (STORE 6)
134   (GETVALUE 1)                        ; ALC
136   (JMPIFNOT L69)
139   (JMP L75)
142   L142
142   (LOAD 6)
143   (JMP L114)
145   L145
145   (PUSH)
146   (CALL1 20)                          ; PDIS
148   (JMP L104)


Disassembly of function #:|(DEFUN ALBK (P) ...)-52|
(CONST 0) = ALBK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALBK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALBK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALBK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALBK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALBK
8     (SKIP&RET 1)


Disassembly of function ALBK
(CONST 0) = P
(CONST 1) = ALPHA
(CONST 2) = PDIS
(CONST 3) = $RATFAC
(CONST 4) = (MTIMES SIMP)
(CONST 5) = MPLC*
(CONST 6) = MAXIMA-SUBSTITUTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P MPLC* ALPHA)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE&PUSH 1)                   ; ALPHA
5     (CALL1 2)                           ; PDIS
7     (BIND 1)                            ; ALPHA
9     (T)
10    (BIND 3)                            ; $RATFAC
12    (CONST&PUSH 4)                      ; (MTIMES SIMP)
13    (GETVALUE&PUSH 5)                   ; MPLC*
15    (GETVALUE&PUSH 1)                   ; ALPHA
17    (LIST&PUSH 3)
19    (GETVALUE&PUSH 1)                   ; ALPHA
21    (GETVALUE&PUSH 0)                   ; P
23    (CALL 3 6)                          ; MAXIMA-SUBSTITUTE
26    (UNBIND 3)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $GFACTOR (P &AUX #) ...)-53|
(CONST 0) = $GFACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GFACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GFACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GFACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GFACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GFACTOR
8     (SKIP&RET 1)


Disassembly of function $GFACTOR
(CONST 0) = P
(CONST 1) = GAUSS
(CONST 2) = $RATP
(CONST 3) = $RATDISREP
(CONST 4) = %I
(CONST 5) = $%I
(CONST 6) = ((MPLUS) 1 ((MEXPT) %I 2))
(CONST 7) = $FACTOR
(CONST 8) = ((FACTORED . GFACTORED) (IRREDUCIBLE . IRREDUCIBLEG))
(CONST 9) = 0
(CONST 10) = $EXPOP
(CONST 11) = $EXPON
(CONST 12) = $NEGDISTRIB
(CONST 13) = MAXIMA-SUBSTITUTE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
writes special variable : (P)
35 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (T)
4     (BIND 1)                            ; GAUSS
6     (GETVALUE&PUSH 0)                   ; P
8     (CALL1&JMPIFNOT 2 L17)              ; $RATP
11    (GETVALUE&PUSH 0)                   ; P
13    (CALL1 3)                           ; $RATDISREP
15    (SETVALUE 0)                        ; P
17    L17
17    (CONST&PUSH 4)                      ; %I
18    (CONST&PUSH 5)                      ; $%I
19    (GETVALUE&PUSH 0)                   ; P
21    (PUSH-UNBOUND 3)
23    (CALLS1&PUSH 172)                   ; SUBST
25    (CONST&PUSH 6)                      ; ((MPLUS) 1 ((MEXPT) %I 2))
26    (CALL2 7)                           ; $FACTOR
28    (SETVALUE 0)                        ; P
30    (CONST&PUSH 8)                      ; (# #)
31    (GETVALUE&PUSH 0)                   ; P
33    (PUSH-UNBOUND 3)
35    (CALLS1 178)                        ; SUBLIS
37    (SETVALUE 0)                        ; P
39    (CONST 9)                           ; 0
40    (BIND 10)                           ; $EXPOP
42    (CONST 9)                           ; 0
43    (BIND 11)                           ; $EXPON
45    (NIL)
46    (BIND 12)                           ; $NEGDISTRIB
48    (CONST&PUSH 5)                      ; $%I
49    (CONST&PUSH 4)                      ; %I
50    (GETVALUE&PUSH 0)                   ; P
52    (CALL 3 13)                         ; MAXIMA-SUBSTITUTE
55    (UNBIND 5)
57    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $FACTOR NARGS ...)-54|
(CONST 0) = $FACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $FACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $FACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $FACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $FACTOR
8     (SKIP&RET 1)


Disassembly of function $FACTOR
(CONST 0) = 1
(CONST 1) = 2
(CONST 2) = $FACTOR
(CONST 3) = WNA-ERR
(CONST 4) = $RATVARS
(CONST 5) = VARLIST
(CONST 6) = GENVAR
(CONST 7) = $INTFACLIM
(CONST 8) = FACTOR
(CONST 9) = LISTIFY1
(CONST 10) = FACTORRESIMP
(CONST 11) = $NEGDISTRIB
(CONST 12) = MTIMESP
(CONST 13) = -1
(CONST 14) = MPLUSP
(CONST 15) = 0
(CONST 16) = $EXPOP
(CONST 17) = $EXPON
(CONST 18) = $MULTTHRU
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: ($NEGDISTRIB FACTORRESIMP $RATVARS)
62 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 1
5     (CALLSR&JMPIF 1 45 L18)             ; =
9     (LOAD&PUSH 0)
10    (CONST&PUSH 1)                      ; 2
11    (CALLSR&JMPIF 1 45 L18)             ; =
15    (CONST&PUSH 2)                      ; $FACTOR
16    (CALL1 3)                           ; WNA-ERR
18    L18
18    (NIL&PUSH)
19    (GETVALUE 4)                        ; $RATVARS
21    (CDR)
22    (BIND 5)                            ; VARLIST
24    (NIL)
25    (BIND 6)                            ; GENVAR
27    (NIL&PUSH)
28    (LOAD 7)
29    (BIND 7)                            ; $INTFACLIM
31    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; FACTOR
33    (LOAD&PUSH 12)
34    (LOAD&PUSH 15)
35    (CALL2 9)                           ; LISTIFY1
37    (APPLY 0)
39    (STORE 3)
40    (GETVALUE 10)                       ; FACTORRESIMP
42    (JMPIFNOT L71)
44    (GETVALUE 11)                       ; $NEGDISTRIB
46    (JMPIFNOT L71)
48    (LOAD&PUSH 3)
49    (CALL1&JMPIFNOT 12 L71)             ; MTIMESP
52    (LOAD 3)
53    (CDR)
54    (CDR)
55    (CDR)
56    (JMPIF L71)
58    (LOAD 3)
59    (CDR)
60    (CAR&PUSH)
61    (JMPIFNOTEQTO 13 L71)               ; -1
64    (LOAD 3)
65    (CDR)
66    (CDR)
67    (CAR&PUSH)
68    (CALL1&JMPIF 14 L79)                ; MPLUSP
71    L71
71    (LOAD 3)
72    L72
72    (UNBIND1)
73    (SKIP 1)
75    (UNBIND 2)
77    (SKIP&RET 4)
79    L79
79    (CONST 15)                          ; 0
80    (BIND 16)                           ; $EXPOP
82    (CONST 15)                          ; 0
83    (BIND 17)                           ; $EXPON
85    (LOAD&PUSH 9)
86    (CALL1 18)                          ; $MULTTHRU
88    (UNBIND 2)
90    (JMP L72)


Disassembly of function #:|(DEFVAR ALPHA NIL)-55|
(CONST 0) = (SPECIAL ALPHA)
(CONST 1) = ALPHA
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL ALPHA)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ALPHA
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; ALPHA
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; ALPHA
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN FACTOR NARGS ...)-56|
(CONST 0) = FACTOR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTOR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTOR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTOR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTOR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTOR
8     (SKIP&RET 1)


Disassembly of function FACTOR
(CONST 0) = TELLRATLIST
(CONST 1) = VARLIST
(CONST 2) = GENVAR
(CONST 3) = $GCD
(CONST 4) = $NEGDISTRIB
(CONST 5) = FN
(CONST 6) = VAR
(CONST 7) = MM*
(CONST 8) = MPLC*
(CONST 9) = INTBS*
(CONST 10) = ALFLAG
(CONST 11) = MINPOLY*
(CONST 12) = ALPHA
(CONST 13) = P
(CONST 14) = ALGFAC*
(CONST 15) = $KEEPFLOAT
(CONST 16) = $ALGEBRAIC
(CONST 17) = CARGS
(CONST 18) = *GCDL*
(CONST 19) = MEMQ
(CONST 20) = $RATFAC
(CONST 21) = 1
(CONST 22) = NARG1
(CONST 23) = LISTIFY1
(CONST 24) = ML-TYPEP
(CONST 25) = SYMBOL
(CONST 26) = $NUMBERP
(CONST 27) = MBAGP
(CONST 28) = X
(CONST 29) = FACTOR
(CONST 30) = 2
(CONST 31) = MEQHK
(CONST 32) = NEWVAR
(CONST 33) = RATREP*
(CONST 34) = UNIVAR
(CONST 35) = "The second argument to FACTOR must be a non-linear, univariate polynomial:~%~M"
(CONST 36) = MERROR
(CONST 37) = PDIS
(CONST 38) = PMONZ
(CONST 39) = DIV
(CONST 40) = MAXIMA-SUBSTITUTE
(CONST 41) = $TELLRAT
(CONST 42) = SCANMAPP
(CONST 43) = SRATSIMP
(CONST 44) = $FACTORFLAG
(CONST 45) = $FACEXPAND
(CONST 46) = $RATEXPAND
(CONST 47) = WHICHFN
(CONST 48) = 0
(CONST 49) = $EXPOP
(CONST 50) = $EXPON
(CONST 51) = SIMPLIFY
(CONST 52) = MNUMP
(CONST 53) = FACTORNUMBER
(CONST 54) = $RATP
(CONST 55) = $RAT
(CONST 56) = MTIMESP
(CONST 57) = ALIKE1
(CONST 58) = FACTORED
(CONST 59) = (FACTORED)
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: 
($FACTORFLAG $RATFAC $FACEXPAND MPLC* MINPOLY* ALPHA CARGS X SCANMAPP P *GCDL*
 $NEGDISTRIB $GCD VARLIST)
writes special variables : ($NEGDISTRIB ALGFAC* $ALGEBRAIC MPLC* MINPOLY* ALPHA FN CARGS MM* P $GCD)
308 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; TELLRATLIST
6     (GETVALUE 1)                        ; VARLIST
8     (BIND 1)                            ; VARLIST
10    (NIL)
11    (BIND 2)                            ; GENVAR
13    (GETVALUE 3)                        ; $GCD
15    (BIND 3)                            ; $GCD
17    (GETVALUE 4)                        ; $NEGDISTRIB
19    (BIND 4)                            ; $NEGDISTRIB
21    (NIL)
22    (BIND 5)                            ; FN
24    (NIL)
25    (BIND 6)                            ; VAR
27    (NIL)
28    (BIND 7)                            ; MM*
30    (NIL)
31    (BIND 8)                            ; MPLC*
33    (NIL)
34    (BIND 9)                            ; INTBS*
36    (NIL)
37    (BIND 10)                           ; ALFLAG
39    (NIL)
40    (BIND 11)                           ; MINPOLY*
42    (NIL)
43    (BIND 12)                           ; ALPHA
45    (NIL)
46    (BIND 13)                           ; P
48    (NIL)
49    (BIND 14)                           ; ALGFAC*
51    (NIL)
52    (BIND 15)                           ; $KEEPFLOAT
54    (NIL)
55    (BIND 16)                           ; $ALGEBRAIC
57    (NIL)
58    (BIND 17)                           ; CARGS
60    (GETVALUE&PUSH 3)                   ; $GCD
62    (GETVALUE&PUSH 18)                  ; *GCDL*
64    (CALL2&JMPIF 19 L72)                ; MEMQ
67    (GETVALUE 18)                       ; *GCDL*
69    (CAR)
70    (SETVALUE 3)                        ; $GCD
72    L72
72    (NIL)
73    (BIND 20)                           ; $RATFAC
75    (CONST&PUSH 21)                     ; 1
76    (LOAD&PUSH 60)
78    (CALL2 22)                          ; NARG1
80    (SETVALUE 13)                       ; P
82    (CONST 21)                          ; 1
84    (SETVALUE 7)                        ; MM*
86    (LOAD&PUSH 57)
88    (LOAD&PUSH 60)
90    (CALL2 23)                          ; LISTIFY1
92    (CDR)
93    (SETVALUE 17)                       ; CARGS
95    (GETVALUE&PUSH 13)                  ; P
97    (CALL1&PUSH 24)                     ; ML-TYPEP
99    (JMPIFEQTO 25 L150)                 ; SYMBOL
102   (GETVALUE&PUSH 13)                  ; P
104   (CALL1&JMPIF 26 L156)               ; $NUMBERP
107   (GETVALUE&PUSH 13)                  ; P
109   (CALL1&JMPIF 27 L160)               ; MBAGP
112   (LOAD&PUSH 57)
114   (CONST&PUSH 30)                     ; 2
116   (CALLSR&JMPIF 1 45 L207)            ; =
121   (T)
122   (SETVALUE 5)                        ; FN
124   (GETVALUE 42)                       ; SCANMAPP
126   (JMPIF L138)
128   L128
128   (T)
129   (BIND 20)                           ; $RATFAC
131   (GETVALUE&PUSH 13)                  ; P
133   (CALL1 43)                          ; SRATSIMP
135   (UNBIND1)
136   (SETVALUE 13)                       ; P
138   L138
138   (GETVALUE&PUSH 13)                  ; P
140   (CALL1 32)                          ; NEWVAR
142   (GETVALUE&PUSH 13)                  ; P
144   (CALL1&PUSH 24)                     ; ML-TYPEP
146   (JMPIFNOTEQTO 25 L501)              ; SYMBOL
150   L150
150   (UNBIND1)
151   (GETVALUE 13)                       ; P
153   (JMP L518)
156   L156
156   (UNBIND1)
157   (JMP L508)
160   L160
160   (GETVALUE 13)                       ; P
162   (CAR&PUSH)
163   (NIL&PUSH)
164   (GETVALUE 13)                       ; P
166   (CDR&PUSH)
167   (JMP L190)
169   L169
169   (LOAD&CAR&PUSH 0)
171   (LOAD 0)
172   (BIND 28)                           ; X
174   (CONST&PUSH 29)                     ; FACTOR
175   (GETVALUE&PUSH 28)                  ; X
177   (GETVALUE 17)                       ; CARGS
179   (CONS)
180   (APPLY 0)
182   (UNBIND1)
183   (PUSH)
184   (LOAD&CONS&STORE 2)
186   (SKIP 1)
188   (LOAD&CDR&STORE 0)
190   L190
190   (LOAD&PUSH 0)
191   (CALLS1&JMPIFNOT 146 L169)          ; ENDP
194   (SKIP 1)
196   (LOAD&PUSH 0)
197   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
199   (SKIP 1)
201   (CONS)
202   (UNBIND 14)
204   (JMP L520)
207   L207
207   (CONST&PUSH 30)                     ; 2
209   (LOAD&PUSH 60)
211   (CALL2&PUSH 22)                     ; NARG1
213   (CALL1 31)                          ; MEQHK
215   (SETVALUE 12)                       ; ALPHA
217   (PUSH)
218   (CALL1 32)                          ; NEWVAR
220   (GETVALUE&PUSH 12)                  ; ALPHA
222   (CALL1 33)                          ; RATREP*
224   (CDR)
225   (CAR)
226   (SETVALUE 11)                       ; MINPOLY*
228   (CDR&PUSH)
229   (CALL1&JMPIFNOT 34 L246)            ; UNIVAR
232   (GETVALUE 11)                       ; MINPOLY*
234   (JMPIFATOM L246)
236   (GETVALUE 11)                       ; MINPOLY*
238   (CDR)
239   (CAR&PUSH)
240   (CONST&PUSH 30)                     ; 2
242   (CALLSR&JMPIFNOT 1 47 L252)         ; <
246   L246
246   (CONST&PUSH 35)                     ; "The second argument to FACTOR must be a non-linear, univariate polynomial:~%~M"
248   (GETVALUE&PUSH 12)                  ; ALPHA
250   (CALL2 36)                          ; MERROR
252   L252
252   (GETVALUE 11)                       ; MINPOLY*
254   (CAR&PUSH)
255   (CONST&PUSH 21)                     ; 1
256   (CONST&PUSH 21)                     ; 1
257   (LIST&PUSH 3)
259   (CALL1 37)                          ; PDIS
261   (SETVALUE 12)                       ; ALPHA
263   (GETVALUE 11)                       ; MINPOLY*
265   (CDR)
266   (CAR)
267   (SETVALUE 7)                        ; MM*
269   (GETVALUE 11)                       ; MINPOLY*
271   (CDR)
272   (CDR)
273   (CAR&PUSH)
274   (JMPIFEQTO 21 L305)                 ; 1
277   (GETVALUE 11)                       ; MINPOLY*
279   (CDR)
280   (CDR)
281   (CAR)
282   (SETVALUE 8)                        ; MPLC*
284   (GETVALUE&PUSH 11)                  ; MINPOLY*
286   (CALL1 38)                          ; PMONZ
288   (SETVALUE 11)                       ; MINPOLY*
290   (GETVALUE&PUSH 12)                  ; ALPHA
292   (GETVALUE&PUSH 8)                   ; MPLC*
294   (CALL2&PUSH 39)                     ; DIV
296   (GETVALUE&PUSH 12)                  ; ALPHA
298   (GETVALUE&PUSH 13)                  ; P
300   (CALL 3 40)                         ; MAXIMA-SUBSTITUTE
303   (SETVALUE 13)                       ; P
305   L305
305   (T)
306   (SETVALUE 16)                       ; $ALGEBRAIC
308   (GETVALUE&PUSH 11)                  ; MINPOLY*
310   (CALL1&PUSH 37)                     ; PDIS
312   (CALL1 41)                          ; $TELLRAT
314   (T)
315   (SETVALUE 14)                       ; ALGFAC*
317   (GETVALUE 42)                       ; SCANMAPP
319   (JMPIFNOT L128)
322   (JMP L138)
325   L325
325   (GETVALUE&PUSH 13)                  ; P
327   (CALL1 53)                          ; FACTORNUMBER
329   (JMP L518)
332   L332
332   (GETVALUE&PUSH 13)                  ; P
334   (CALL1 55)                          ; $RAT
336   (JMP L518)
339   L339
339   (GETVALUE 13)                       ; P
341   (CAR&PUSH)
342   (GETVALUE 12)                       ; ALPHA
344   (CDR&PUSH)
345   (GETVALUE 13)                       ; P
347   (CDR)
348   (CDR&PUSH)
349   (CALLSR 2 34)                       ; APPEND
352   (JMP L485)
355   L355
355   (GETVALUE 13)                       ; P
357   (CAR&PUSH)
358   (CONST&PUSH 59)                     ; (FACTORED)
360   (CALLSR&PUSH 2 34)                  ; APPEND
363   (GETVALUE 13)                       ; P
365   (CDR)
366   (CONS)
367   (SETVALUE 13)                       ; P
369   (GETVALUE 13)                       ; P
371   (JMP L518)
374   L374
374   (NIL)
375   (SETVALUE 4)                        ; $NEGDISTRIB
377   (BIND 44)                           ; $FACTORFLAG
379   (GETVALUE 45)                       ; $FACEXPAND
381   (BIND 46)                           ; $RATEXPAND
383   (GETVALUE&PUSH 13)                  ; P
385   (CALL1 47)                          ; WHICHFN
387   (UNBIND 2)
389   (SETVALUE 13)                       ; P
391   (UNBIND1)
392   (CONST 48)                          ; 0
394   (BIND 49)                           ; $EXPOP
396   (CONST 48)                          ; 0
398   (BIND 50)                           ; $EXPON
400   (GETVALUE&PUSH 13)                  ; P
402   (CALL1 51)                          ; SIMPLIFY
404   (UNBIND 2)
406   (SETVALUE 13)                       ; P
408   (PUSH)
409   (CALL1&JMPIF 52 L325)               ; MNUMP
413   (GETVALUE 13)                       ; P
415   (JMPIFATOM L497)
418   (GETVALUE 20)                       ; $RATFAC
420   (JMPIFNOT L435)
422   (GETVALUE 44)                       ; $FACTORFLAG
424   (JMPIF L435)
426   (CONST&PUSH 21)                     ; 1
427   (LOAD&PUSH 57)
429   (CALL2&PUSH 22)                     ; NARG1
431   (CALL1&JMPIF 54 L332)               ; $RATP
435   L435
435   (GETVALUE 44)                       ; $FACTORFLAG
437   (JMPIFNOT L488)
439   (GETVALUE&PUSH 13)                  ; P
441   (CALL1&JMPIFNOT 56 L488)            ; MTIMESP
444   (GETVALUE 13)                       ; P
446   (CDR)
447   (CAR&PUSH)
448   (CALL1&JMPIFNOT 52 L488)            ; MNUMP
451   (GETVALUE 13)                       ; P
453   (CDR)
454   (CAR&PUSH)
455   (CALL1 53)                          ; FACTORNUMBER
457   (SETVALUE 12)                       ; ALPHA
459   (JMPIFNOT L488)
461   (PUSH)
462   (GETVALUE 13)                       ; P
464   (CDR)
465   (CAR&PUSH)
466   (CALL2&JMPIF 57 L488)               ; ALIKE1
469   (GETVALUE&PUSH 12)                  ; ALPHA
471   (CALL1&JMPIF 56 L339)               ; MTIMESP
475   (GETVALUE 13)                       ; P
477   (CAR&PUSH)
478   (GETVALUE&PUSH 12)                  ; ALPHA
480   (GETVALUE 13)                       ; P
482   (CDR)
483   (CDR)
484   (CONS)
485   L485
485   (CONS)
486   (SETVALUE 13)                       ; P
488   L488
488   (CONST&PUSH 58)                     ; FACTORED
490   (GETVALUE 13)                       ; P
492   (CAR&PUSH)
493   (CALL2&JMPIFNOT 19 L355)            ; MEMQ
497   L497
497   (GETVALUE 13)                       ; P
499   (JMP L518)
501   L501
501   (GETVALUE&PUSH 13)                  ; P
503   (CALLS2&JMPIFNOT 8 L374)            ; NUMBERP
507   (UNBIND1)
508   L508
508   (GETVALUE 42)                       ; SCANMAPP
510   (NOT)
511   (BIND 44)                           ; $FACTORFLAG
513   (GETVALUE&PUSH 13)                  ; P
515   (CALL1 53)                          ; FACTORNUMBER
517   (UNBIND1)
518   L518
518   (UNBIND 13)
520   L520
520   (UNBIND 5)
522   (SKIP&RET 3)


Disassembly of function #:|(DEFUN FACTORNUMBER (N) ...)-57|
(CONST 0) = FACTORNUMBER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FACTORNUMBER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FACTORNUMBER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FACTORNUMBER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FACTORNUMBER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FACTORNUMBER
8     (SKIP&RET 1)


Disassembly of function FACTORNUMBER
(CONST 0) = $RAT
(CONST 1) = NRATFACT
(CONST 2) = NRETFACTOR1
(CONST 3) = (MTIMES SIMP FACTORED)
(CONST 4) = -1
(CONST 5) = (SIMP FACTORED)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
40 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; $RAT
3     (CDR&PUSH)
4     (CALL1&PUSH 1)                      ; NRATFACT
6     (CALL1 2)                           ; NRETFACTOR1
8     (STORE 1)
9     (CDR)
10    (JMPIF L37)
12    (LOAD 1)
13    (CAR)
14    (JMPIFATOM L48)
16    (LOAD 1)
17    (CAR)
18    (CAR)
19    (CAR&PUSH)
20    (CONST 5)                           ; (SIMP FACTORED)
21    (CONS&PUSH)
22    (LOAD 2)
23    (CAR)
24    (CDR)
25    L25
25    (CONS)
26    (SKIP&RET 2)
28    L28
28    (LOAD&CAR&PUSH 2)
30    (LOAD&CDR&PUSH 3)
32    (CALLS2 73)                         ; NREVERSE
34    (CONS)
35    (JMP L25)
37    L37
37    (CONST&PUSH 3)                      ; (MTIMES SIMP FACTORED)
38    (LOAD&CAR&PUSH 2)
40    (JMPIFEQTO 4 L28)                   ; -1
43    (LOAD&PUSH 2)
44    (CALLS2 73)                         ; NREVERSE
46    (JMP L25)
48    L48
48    (LOAD 1)
49    (CAR)
50    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NRATFACT (X) ...)-58|
(CONST 0) = NRATFACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NRATFACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NRATFACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NRATFACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NRATFACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NRATFACT
8     (SKIP&RET 1)


Disassembly of function NRATFACT
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = CFACTOR
(CONST 3) = REVSIGN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR&PUSH)
6     (JMPIFEQTO 1 L33)                   ; 1
9     (GETVALUE 0)                        ; X
11    (CAR&PUSH)
12    (JMPIFEQTO 1 L40)                   ; 1
15    (GETVALUE 0)                        ; X
17    (CAR&PUSH)
18    (CALL1&PUSH 2)                      ; CFACTOR
20    (GETVALUE 0)                        ; X
22    (CDR&PUSH)
23    (CALL1&PUSH 2)                      ; CFACTOR
25    (CALL1&PUSH 3)                      ; REVSIGN
27    (CALLSR 2 35)                       ; NCONC
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (GETVALUE 0)                        ; X
35    (CAR&PUSH)
36    (CALL1 2)                           ; CFACTOR
38    (JMP L30)
40    L40
40    (GETVALUE 0)                        ; X
42    (CDR&PUSH)
43    (CALL1&PUSH 2)                      ; CFACTOR
45    (CALL1 3)                           ; REVSIGN
47    (JMP L30)


Disassembly of function #:|(DEFUN NRETFACTOR1 (L) ...)-59|
(CONST 0) = NRETFACTOR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NRETFACTOR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NRETFACTOR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NRETFACTOR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NRETFACTOR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NRETFACTOR1
8     (SKIP&RET 1)


Disassembly of function NRETFACTOR1
(CONST 0) = L
(CONST 1) = 1
(CONST 2) = -1
(CONST 3) = (RAT SIMP)
(CONST 4) = (MEXPT SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
43 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT L42)
7     (GETVALUE 0)                        ; L
9     (CDR)
10    (CAR&PUSH)
11    (JMPIFEQTO 1 L45)                   ; 1
14    (GETVALUE 0)                        ; L
16    (CDR)
17    (CAR&PUSH)
18    (JMPIFEQTO 2 L50)                   ; -1
21    (CONST&PUSH 4)                      ; (MEXPT SIMP)
22    (GETVALUE 0)                        ; L
24    (CAR&PUSH)
25    (GETVALUE 0)                        ; L
27    (CDR)
28    L28
28    (CAR&PUSH)
29    (LIST 3)
31    L31
31    (PUSH)
32    (GETVALUE 0)                        ; L
34    (CDR)
35    (CDR&PUSH)
36    (JSR L0)
38    (CONS)
39    L39
39    (UNBIND1)
40    (SKIP&RET 2)
42    L42
42    (NIL)
43    (JMP L39)
45    L45
45    (GETVALUE 0)                        ; L
47    (CAR)
48    (JMP L31)
50    L50
50    (CONST&PUSH 3)                      ; (RAT SIMP)
51    (CONST&PUSH 1)                      ; 1
52    (GETVALUE 0)                        ; L
54    (JMP L28)


Disassembly of function #:|(DECLARE-TOP (UNSPECIAL VAR))-60|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $MOD NARGS ...)-61|
(CONST 0) = $MOD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MOD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MOD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MOD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MOD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MOD
8     (SKIP&RET 1)


Disassembly of function $MOD
(CONST 0) = 1
(CONST 1) = 2
(CONST 2) = $MOD
(CONST 3) = WNA-ERR
(CONST 4) = MODULUS
(CONST 5) = NARG1
(CONST 6) = "Improper value for MODULUS:~%~M"
(CONST 7) = MERROR
(CONST 8) = MOD1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (MODULUS)
writes special variable : (MODULUS)
41 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (LOAD&PUSH 0)
4     (CONST&PUSH 0)                      ; 1
5     (CALLSR&JMPIF 1 45 L18)             ; =
9     (LOAD&PUSH 0)
10    (CONST&PUSH 1)                      ; 2
11    (CALLSR&JMPIF 1 45 L18)             ; =
15    (CONST&PUSH 2)                      ; $MOD
16    (CALL1 3)                           ; WNA-ERR
18    L18
18    (GETVALUE 4)                        ; MODULUS
20    (BIND 4)                            ; MODULUS
22    (LOAD&PUSH 3)
23    (CONST&PUSH 1)                      ; 2
24    (CALLSR&JMPIFNOT 1 45 L48)          ; =
28    (CONST&PUSH 1)                      ; 2
29    (LOAD&PUSH 6)
30    (CALL2 5)                           ; NARG1
32    (SETVALUE 4)                        ; MODULUS
34    (PUSH)
35    (CALLS2&JMPIFNOT 12 L43)            ; INTEGERP
38    (GETVALUE&PUSH 4)                   ; MODULUS
40    (CALLS2&JMPIFNOT 145 L48)           ; ZEROP
43    L43
43    (CONST&PUSH 6)                      ; "Improper value for MODULUS:~%~M"
44    (GETVALUE&PUSH 4)                   ; MODULUS
46    (CALL2 7)                           ; MERROR
48    L48
48    (GETVALUE&PUSH 4)                   ; MODULUS
50    (CALLS2&JMPIFNOT 147 L59)           ; MINUSP
53    (GETVALUE&PUSH 4)                   ; MODULUS
55    (CALLS2 158)                        ; ABS
57    (SETVALUE 4)                        ; MODULUS
59    L59
59    (CONST&PUSH 0)                      ; 1
60    (LOAD&PUSH 6)
61    (CALL2&PUSH 5)                      ; NARG1
63    (CALL1 8)                           ; MOD1
65    (UNBIND1)
66    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MOD1 (E) ...)-62|
(CONST 0) = MOD1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MOD1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOD1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MOD1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MOD1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MOD1
8     (SKIP&RET 1)


Disassembly of function MOD1
(CONST 0) = MBAGP
(CONST 1) = MOD1
(CONST 2) = NEWVAR
(CONST 3) = $RATP
(CONST 4) = RATREP*
(CONST 5) = PMOD
(CONST 6) = RATREDUCE
(CONST 7) = RATDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
37 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L39)                 ; MBAGP
4     (NIL&PUSH)
5     (LOAD&PUSH 2)
6     (CALL1 2)                           ; NEWVAR
8     (LOAD&PUSH 2)
9     (CALL1 3)                           ; $RATP
11    (STORE 0)
12    (LOAD&PUSH 2)
13    (CALL1 4)                           ; RATREP*
15    (STORE 2)
16    (CAR&PUSH)
17    (LOAD 3)
18    (CDR)
19    (CAR&PUSH)
20    (CALL1&PUSH 5)                      ; PMOD
22    (LOAD 4)
23    (CDR)
24    (CDR&PUSH)
25    (CALL1&PUSH 5)                      ; PMOD
27    (CALL2 6)                           ; RATREDUCE
29    (CONS)
30    (STORE 2)
31    (LOAD&JMPIF 0 L50)
34    (LOAD&PUSH 2)
35    (CALL1 7)                           ; RATDISREP
37    (SKIP&RET 3)
39    L39
39    (LOAD&CAR&PUSH 1)
41    (CONST&PUSH 1)                      ; MOD1
42    (LOAD&CDR&PUSH 3)
44    (CALLSR 0 22)                       ; MAPCAR
47    (CONS)
48    (SKIP&RET 2)
50    L50
50    (LOAD 2)
51    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $DIVIDE NARGS ...)-63|
(CONST 0) = $DIVIDE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DIVIDE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DIVIDE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DIVIDE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DIVIDE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DIVIDE
8     (SKIP&RET 1)


Disassembly of function $DIVIDE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = VARLIST
(CONST 3) = $RATFAC
(CONST 4) = 2
(CONST 5) = "DIVIDE needs at least two arguments."
(CONST 6) = MERROR
(CONST 7) = 1
(CONST 8) = NARG1
(CONST 9) = $RATP
(CONST 10) = (MLIST)
(CONST 11) = LISTIFY1
(CONST 12) = NEWVAR
(CONST 13) = $RATVARS
(CONST 14) = RATREP*
(CONST 15) = PDIVIDE
(CONST 16) = PTIMES
(CONST 17) = RATQU
(CONST 18) = (MLIST)
(CONST 19) = $TOTALDISREP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: ($RATVARS Y X)
writes special variables : (VARLIST Y X)
186 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; X
6     (NIL)
7     (BIND 1)                            ; Y
9     (NIL&PUSH)
10    (NIL)
11    (BIND 2)                            ; VARLIST
13    (PUSH-NIL 3)
15    (NIL)
16    (BIND 3)                            ; $RATFAC
18    (LOAD&PUSH 16)
19    (CONST&PUSH 4)                      ; 2
20    (CALLSR&JMPIFNOT 1 47 L27)          ; <
24    (CONST&PUSH 5)                      ; "DIVIDE needs at least two arguments."
25    (CALL1 6)                           ; MERROR
27    L27
27    (CONST&PUSH 7)                      ; 1
28    (LOAD&PUSH 19)
29    (CALL2 8)                           ; NARG1
31    (SETVALUE 0)                        ; X
33    (PUSH)
34    (CALL1&JMPIFNOT 9 L59)              ; $RATP
37    (T&STORE 3)
39    (GETVALUE 0)                        ; X
41    (CDR)
42    (CAR&PUSH)
43    (CALLS2&JMPIFNOT 12 L59)            ; INTEGERP
46    (GETVALUE 0)                        ; X
48    (CDR)
49    (CDR&PUSH)
50    (JMPIFNOTEQTO 7 L59)                ; 1
53    (GETVALUE 0)                        ; X
55    (CDR)
56    (CAR)
57    (SETVALUE 0)                        ; X
59    L59
59    (CONST&PUSH 4)                      ; 2
60    (LOAD&PUSH 19)
61    (CALL2 8)                           ; NARG1
63    (SETVALUE 1)                        ; Y
65    (PUSH)
66    (CALL1&JMPIFNOT 9 L91)              ; $RATP
69    (T&STORE 3)
71    (GETVALUE 1)                        ; Y
73    (CDR)
74    (CAR&PUSH)
75    (CALLS2&JMPIFNOT 12 L91)            ; INTEGERP
78    (GETVALUE 1)                        ; Y
80    (CDR)
81    (CDR&PUSH)
82    (JMPIFNOTEQTO 7 L91)                ; 1
85    (GETVALUE 1)                        ; Y
87    (CDR)
88    (CAR)
89    (SETVALUE 1)                        ; Y
91    L91
91    (GETVALUE&PUSH 0)                   ; X
93    (CALLS2&JMPIFNOT 12 L102)           ; INTEGERP
96    (GETVALUE&PUSH 1)                   ; Y
98    (CALLS2&JMPIF 12 L245)              ; INTEGERP
102   L102
102   (LOAD&PUSH 16)
103   (LOAD&PUSH 19)
104   (CALL2 11)                          ; LISTIFY1
106   (CDR)
107   (CDR)
108   (SETVALUE 2)                        ; VARLIST
110   (CONST&SYMBOL-FUNCTION&PUSH 12)     ; NEWVAR
112   (GETVALUE 13)                       ; $RATVARS
114   (CDR&PUSH)
115   (CALLS2&PUSH 72)                    ; REVERSE
117   (CALLSR 0 24)                       ; MAPC
120   (GETVALUE&PUSH 1)                   ; Y
122   (CALL1 12)                          ; NEWVAR
124   (GETVALUE&PUSH 0)                   ; X
126   (CALL1 12)                          ; NEWVAR
128   (GETVALUE&PUSH 0)                   ; X
130   (CALL1 14)                          ; RATREP*
132   (SETVALUE 0)                        ; X
134   (CAR)
135   (STORE 9)
137   (GETVALUE 0)                        ; X
139   (CDR)
140   (SETVALUE 0)                        ; X
142   (GETVALUE&PUSH 1)                   ; Y
144   (CALL1 14)                          ; RATREP*
146   (CDR)
147   (SETVALUE 1)                        ; Y
149   (GETVALUE 0)                        ; X
151   (CDR)
152   (STORE 5)
153   (PUSH)
154   (JMPIFNOTEQTO 7 L164)               ; 1
157   (GETVALUE 1)                        ; Y
159   (CDR&PUSH)
160   (JMPIFEQTO 7 L284)                  ; 1
164   L164
164   (GETVALUE 1)                        ; Y
166   (CDR)
167   (STORE 4)
168   (GETVALUE 0)                        ; X
170   (CAR&PUSH)
171   (GETVALUE 1)                        ; Y
173   (CDR&PUSH)
174   (CALL2 16)                          ; PTIMES
176   (SETVALUE 0)                        ; X
178   (PUSH)
179   (GETVALUE 1)                        ; Y
181   (CAR&PUSH)
182   (CALL2 15)                          ; PDIVIDE
184   (SETVALUE 0)                        ; X
186   (CAR&PUSH)
187   (LOAD&PUSH 6)
188   (CALL2&PUSH 17)                     ; RATQU
190   (GETVALUE 0)                        ; X
192   (CDR)
193   (CAR&PUSH)
194   (LOAD&PUSH 7)
195   (LOAD&PUSH 7)
196   (CALL2&PUSH 16)                     ; PTIMES
198   (CALL2&PUSH 17)                     ; RATQU
200   (LIST 2)
202   (SETVALUE 0)                        ; X
204   L204
204   (CONST&PUSH 18)                     ; (MLIST)
205   (LOAD&PUSH 10)
206   (GETVALUE 0)                        ; X
208   (CAR)
209   (CONS&PUSH)
210   (LOAD&PUSH 11)
211   (GETVALUE 0)                        ; X
213   (CDR)
214   (CAR)
215   (CONS&PUSH)
216   (LIST 3)
218   (STORE 9)
220   (LOAD&JMPIF 3 L297)
224   (LOAD&PUSH 9)
225   (CALL1 19)                          ; $TOTALDISREP
227   L227
227   (UNBIND1)
228   (SKIP 3)
230   (UNBIND1)
231   (SKIP 1)
233   (UNBIND 2)
235   (SKIP&RET 3)
237   L237
237   (GETVALUE&PUSH 0)                   ; X
239   (GETVALUE&PUSH 1)                   ; Y
241   (CALLS2 181)                        ; TRUNCATE
243   (JMP L271)
245   L245
245   (CONST&PUSH 10)                     ; (MLIST)
246   (GETVALUE 0)                        ; X
248   (BIND 0)                            ; X
250   (GETVALUE 1)                        ; Y
252   (BIND 1)                            ; Y
254   (GETVALUE&PUSH 0)                   ; X
256   (CALLS2&JMPIFNOT 12 L264)           ; INTEGERP
259   (GETVALUE&PUSH 1)                   ; Y
261   (CALLS2&JMPIF 12 L237)              ; INTEGERP
264   L264
264   (GETVALUE&PUSH 0)                   ; X
266   (GETVALUE&PUSH 1)                   ; Y
268   (CALLSR 1 56)                       ; /
271   L271
271   (UNBIND 2)
273   (PUSH)
274   (GETVALUE&PUSH 0)                   ; X
276   (GETVALUE&PUSH 1)                   ; Y
278   (CALLS2&PUSH 184)                   ; REM
280   (LIST 3)
282   (JMP L227)
284   L284
284   (GETVALUE 0)                        ; X
286   (CAR&PUSH)
287   (GETVALUE 1)                        ; Y
289   (CAR&PUSH)
290   (CALL2 15)                          ; PDIVIDE
292   (SETVALUE 0)                        ; X
294   (JMP L204)
297   L297
297   (LOAD 9)
298   (JMP L227)


Disassembly of function #:|(DEFMFUN $QUOTIENT NARGS ...)-64|
(CONST 0) = $QUOTIENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $QUOTIENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $QUOTIENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $QUOTIENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $QUOTIENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $QUOTIENT
8     (SKIP&RET 1)


Disassembly of function $QUOTIENT
(CONST 0) = $DIVIDE
(CONST 1) = LISTIFY1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; $DIVIDE
4     (LOAD&PUSH 1)
5     (LOAD&PUSH 4)
6     (CALL2 1)                           ; LISTIFY1
8     (APPLY 0)
10    (CDR)
11    (CAR)
12    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $REMAINDER NARGS ...)-65|
(CONST 0) = $REMAINDER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $REMAINDER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $REMAINDER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $REMAINDER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $REMAINDER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $REMAINDER
8     (SKIP&RET 1)


Disassembly of function $REMAINDER
(CONST 0) = $DIVIDE
(CONST 1) = LISTIFY1
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; $DIVIDE
4     (LOAD&PUSH 1)
5     (LOAD&PUSH 4)
6     (CALL2 1)                           ; LISTIFY1
8     (APPLY 0)
10    (CDR)
11    (CDR)
12    (CAR)
13    (SKIP&RET 3)


Disassembly of function #:|(DEFUN $PREM ($G $F $X) ...)-66|
(CONST 0) = $PREM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PREM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PREM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PREM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PREM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PREM
8     (SKIP&RET 1)


Disassembly of function $PREM
(CONST 0) = #<COMPILED-CLOSURE $PREM-PREM1>
(CONST 1) = #<COMPILED-CLOSURE $PREM-PREM>
(CONST 2) = B
(CONST 3) = (MLIST)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
23 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 2)
3     (LOAD&PUSH 0)
4     (COPY-CLOSURE 0 1)                  ; #<COMPILED-CLOSURE $PREM-PREM1>
7     (STOREC 0 0)
10    (LOAD&PUSH 0)
11    (COPY-CLOSURE 1 1)                  ; #<COMPILED-CLOSURE $PREM-PREM>
14    (STOREC 0 1)
17    (LOAD&PUSH 4)
18    (LOAD&PUSH 4)
19    (LOAD&PUSH 4)
20    (LOADC 3 1)
23    (CALLC)
24    (NV-TO-STACK 3)
26    (LOAD 1)
27    (BIND 2)                            ; B
29    (CONST&PUSH 3)                      ; (MLIST)
30    (LOAD&PUSH 6)
31    (GETVALUE&PUSH 2)                   ; B
33    (LOAD&PUSH 6)
34    (LIST 4)
36    (UNBIND1)
37    (SKIP&RET 8)


Disassembly of function $PREM-PREM1
(CONST 0) = NIL
(CONST 1) = X
(CONST 2) = $EXPAND
(CONST 3) = SIMPLIFY
(CONST 4) = $HIPOW
(CONST 5) = $COEFF
(CONST 6) = 0
(CONST 7) = MUL*
(CONST 8) = *MMINUS
(CONST 9) = ADD*
(CONST 10) = POWER
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
87 byte-code instructions:
0     (LOAD 1)
1     (BIND 1)                            ; X
3     (LOAD&PUSH 6)
4     (CALL1&PUSH 2)                      ; $EXPAND
6     (CALL1&PUSH 3)                      ; SIMPLIFY
8     (LOAD&PUSH 6)
9     (CALL1&PUSH 2)                      ; $EXPAND
11    (CALL1&PUSH 3)                      ; SIMPLIFY
13    (LOAD&PUSH 0)
14    (GETVALUE&PUSH 1)                   ; X
16    (CALL2&PUSH 4)                      ; $HIPOW
18    (CALL1&PUSH 3)                      ; SIMPLIFY
20    (LOAD&PUSH 1)
21    (GETVALUE&PUSH 1)                   ; X
23    (LOAD&PUSH 2)
24    (CALL&PUSH 3 5)                     ; $COEFF
27    (CALL1&PUSH 3)                      ; SIMPLIFY
29    (LOAD&PUSH 3)
30    (GETVALUE&PUSH 1)                   ; X
32    (CALL2&PUSH 4)                      ; $HIPOW
34    (CALL1&PUSH 3)                      ; SIMPLIFY
36    (LOAD&PUSH 4)
37    (GETVALUE&PUSH 1)                   ; X
39    (LOAD&PUSH 2)
40    (CALL&PUSH 3 5)                     ; $COEFF
43    (CALL1&PUSH 3)                      ; SIMPLIFY
45    (LOAD&PUSH 1)
46    (LOAD&PUSH 4)
47    (CALLSR&JMPIF 1 47 L139)            ; <
52    (LOAD&PUSH 1)
53    (CONST&PUSH 6)                      ; 0
54    (CALLSR&JMPIF 1 45 L139)            ; =
59    (LOAD&PUSH 2)
60    (LOAD&PUSH 6)
61    (CALL2&PUSH 7)                      ; MUL*
63    (LOAD&PUSH 1)
64    (GETVALUE&PUSH 1)                   ; X
66    (LOAD&PUSH 4)
67    (LOAD&PUSH 7)
68    (CALL1&PUSH 8)                      ; *MMINUS
70    (CALL2&PUSH 9)                      ; ADD*
72    (CALL2&PUSH 10)                     ; POWER
74    (LOAD&PUSH 7)
75    (CALL&PUSH 3 7)                     ; MUL*
78    (CALL1&PUSH 8)                      ; *MMINUS
80    (CALL2&PUSH 9)                      ; ADD*
82    (CALL1&PUSH 2)                      ; $EXPAND
84    (CALL1&PUSH 3)                      ; SIMPLIFY
86    (LOAD&PUSH 0)
87    (LOAD&PUSH 6)
88    (GETVALUE&PUSH 1)                   ; X
90    (LOADV 0 2)
93    (CALLC)
94    (NV-TO-STACK 2)
96    (LOAD&PUSH 1)
97    (CALL1&PUSH 3)                      ; SIMPLIFY
99    (LOAD&PUSH 4)
100   (LOAD&PUSH 7)
101   (LOAD&PUSH 7)
102   (LOAD&PUSH 10)
103   (CALL1&PUSH 8)                      ; *MMINUS
105   (CALL2&PUSH 9)                      ; ADD*
107   (CALL2&PUSH 10)                     ; POWER
109   (GETVALUE&PUSH 1)                   ; X
111   (LOAD&PUSH 8)
112   (LOAD&PUSH 11)
113   (CALL1&PUSH 8)                      ; *MMINUS
115   (CALL2&PUSH 9)                      ; ADD*
117   (CALL2&PUSH 10)                     ; POWER
119   (CALL&PUSH 3 7)                     ; MUL*
122   (CALL1&PUSH 2)                      ; $EXPAND
124   (CALL1&PUSH 3)                      ; SIMPLIFY
126   (LOAD&PUSH 1)
127   (CALL2&PUSH 9)                      ; ADD*
129   (LOAD&PUSH 2)
130   (CALL1&PUSH 3)                      ; SIMPLIFY
132   (STACK-TO-MV 2)
134   (SKIP 10)
136   L136
136   (UNBIND1)
137   (SKIP&RET 4)
139   L139
139   (CONST&PUSH 6)                      ; 0
140   (LOAD&PUSH 6)
141   (STACK-TO-MV 2)
143   (SKIP 6)
145   (JMP L136)


Disassembly of function $PREM-PREM
(CONST 0) = NIL
(CONST 1) = X
(CONST 2) = $EXPAND
(CONST 3) = SIMPLIFY
(CONST 4) = $HIPOW
(CONST 5) = $COEFF
(CONST 6) = *MMINUS
(CONST 7) = 1
(CONST 8) = ADD*
(CONST 9) = 0
(CONST 10) = MAXIMUM
(CONST 11) = POWER
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
43 byte-code instructions:
0     (LOAD 1)
1     (BIND 1)                            ; X
3     (LOAD&PUSH 6)
4     (LOAD&PUSH 6)
5     (GETVALUE&PUSH 1)                   ; X
7     (LOADV 0 1)
10    (CALLC)
11    (NV-TO-STACK 2)
13    (LOAD&PUSH 8)
14    (CALL1&PUSH 2)                      ; $EXPAND
16    (CALL1&PUSH 3)                      ; SIMPLIFY
18    (LOAD&PUSH 8)
19    (CALL1&PUSH 2)                      ; $EXPAND
21    (CALL1&PUSH 3)                      ; SIMPLIFY
23    (LOAD&PUSH 0)
24    (GETVALUE&PUSH 1)                   ; X
26    (CALL2&PUSH 4)                      ; $HIPOW
28    (CALL1&PUSH 3)                      ; SIMPLIFY
30    (LOAD&PUSH 1)
31    (GETVALUE&PUSH 1)                   ; X
33    (LOAD&PUSH 2)
34    (CALL&PUSH 3 5)                     ; $COEFF
37    (CALL1&PUSH 3)                      ; SIMPLIFY
39    (LOAD&PUSH 3)
40    (GETVALUE&PUSH 1)                   ; X
42    (CALL2&PUSH 4)                      ; $HIPOW
44    (CALL1&PUSH 3)                      ; SIMPLIFY
46    (LOAD&PUSH 6)
47    (LOAD&PUSH 6)
48    (LOAD&PUSH 3)
49    (LOAD&PUSH 3)
50    (LOAD&PUSH 6)
51    (CALL1&PUSH 6)                      ; *MMINUS
53    (CONST&PUSH 7)                      ; 1
54    (CALL&PUSH 3 8)                     ; ADD*
57    (CONST&PUSH 9)                      ; 0
58    (LIST&PUSH 2)
60    (CALL1&PUSH 10)                     ; MAXIMUM
62    (CALL2&PUSH 11)                     ; POWER
64    (STACK-TO-MV 3)
66    (SKIP 7)
68    (UNBIND1)
69    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $GCD NARGS ...)-67|
(CONST 0) = $GCD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GCD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GCD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GCD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GCD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GCD
8     (SKIP&RET 1)


Disassembly of function $GCD
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = VARLIST
(CONST 3) = GENVAR
(CONST 4) = $KEEPFLOAT
(CONST 5) = 2
(CONST 6) = "GCD needs 2 arguments"
(CONST 7) = MERROR
(CONST 8) = 1
(CONST 9) = NARG1
(CONST 10) = $RATP
(CONST 11) = LISTIFY1
(CONST 12) = $GCD
(CONST 13) = IMPROPER-ARG-ERR
(CONST 14) = NEWVAR
(CONST 15) = RATREP*
(CONST 16) = PGCD
(CONST 17) = PLCM
(CONST 18) = RATDISREP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (Y X)
writes special variables : (GENVAR VARLIST Y X)
127 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; X
6     (NIL)
7     (BIND 1)                            ; Y
9     (NIL&PUSH)
10    (NIL)
11    (BIND 2)                            ; VARLIST
13    (NIL)
14    (BIND 3)                            ; GENVAR
16    (NIL)
17    (BIND 4)                            ; $KEEPFLOAT
19    (NIL&PUSH)
20    (LOAD&PUSH 17)
21    (CONST&PUSH 5)                      ; 2
22    (CALLSR&JMPIFNOT 1 47 L29)          ; <
26    (CONST&PUSH 6)                      ; "GCD needs 2 arguments"
27    (CALL1 7)                           ; MERROR
29    L29
29    (CONST&PUSH 8)                      ; 1
30    (LOAD&PUSH 20)
31    (CALL2 9)                           ; NARG1
33    (SETVALUE 0)                        ; X
35    (PUSH)
36    (CALL1 10)                          ; $RATP
38    (STORE 0)
39    (CONST&PUSH 5)                      ; 2
40    (LOAD&PUSH 20)
41    (CALL2 9)                           ; NARG1
43    (SETVALUE 1)                        ; Y
45    (PUSH)
46    (CALL1&JMPIFNOT 10 L51)             ; $RATP
49    (T&STORE 0)
51    L51
51    (LOAD&PUSH 17)
52    (LOAD&PUSH 20)
53    (CALL2 11)                          ; LISTIFY1
55    (CDR)
56    (CDR)
57    (SETVALUE 2)                        ; VARLIST
59    (PUSH)
60    (NIL&PUSH)
61    (JMP L105)
63    L63
63    (GETVALUE 0)                        ; X
65    (CAR&PUSH)
66    (PUSH-UNBOUND 1)
68    (CALLS1 156)                        ; LAST
70    (CAR)
71    (SETVALUE 3)                        ; GENVAR
73    (GETVALUE 0)                        ; X
75    (CAR)
76    (STORE 10)
78    (GETVALUE 0)                        ; X
80    (CDR)
81    (SETVALUE 0)                        ; X
83    (GETVALUE 1)                        ; Y
85    (JMP L157)
88    L88
88    (LOAD 10)
89    (JMP L192)
92    L92
92    (LOAD&CAR&STORE 1 0)
95    (PUSH)
96    (CALLS2&JMPIFNOT 8 L103)            ; NUMBERP
99    (LOAD&PUSH 0)
100   (CONST&PUSH 12)                     ; $GCD
101   (CALL2 13)                          ; IMPROPER-ARG-ERR
103   L103
103   (LOAD&CDR&STORE 1)
105   L105
105   (LOAD&PUSH 1)
106   (CALLS1&JMPIFNOT 146 L92)           ; ENDP
109   (SKIP 2)
111   (GETVALUE&PUSH 0)                   ; X
113   (CALL1 14)                          ; NEWVAR
115   (GETVALUE&PUSH 1)                   ; Y
117   (CALL1 14)                          ; NEWVAR
119   (GETVALUE&PUSH 0)                   ; X
121   (CALL1&JMPIFNOT 10 L139)            ; $RATP
124   (GETVALUE&PUSH 1)                   ; Y
126   (CALL1&JMPIFNOT 10 L139)            ; $RATP
129   (GETVALUE 0)                        ; X
131   (CAR&PUSH)
132   (GETVALUE 1)                        ; Y
134   (CAR&PUSH)
135   (CALLS2&JMPIF 2 L63)                ; EQUAL
139   L139
139   (GETVALUE&PUSH 0)                   ; X
141   (CALL1 15)                          ; RATREP*
143   (SETVALUE 0)                        ; X
145   (CAR)
146   (STORE 10)
148   (GETVALUE 0)                        ; X
150   (CDR)
151   (SETVALUE 0)                        ; X
153   (GETVALUE&PUSH 1)                   ; Y
155   (CALL1 15)                          ; RATREP*
157   L157
157   (CDR)
158   (SETVALUE 1)                        ; Y
160   (GETVALUE 0)                        ; X
162   (CAR&PUSH)
163   (GETVALUE 1)                        ; Y
165   (CAR&PUSH)
166   (CALL2&PUSH 16)                     ; PGCD
168   (GETVALUE 0)                        ; X
170   (CDR&PUSH)
171   (GETVALUE 1)                        ; Y
173   (CDR&PUSH)
174   (CALL2 17)                          ; PLCM
176   (CONS)
177   (SETVALUE 0)                        ; X
179   (LOAD&PUSH 10)
180   (GETVALUE 0)                        ; X
182   (CONS)
183   (STORE 10)
185   (LOAD&JMPIF 0 L88)
189   (LOAD&PUSH 10)
190   (CALL1 18)                          ; RATDISREP
192   L192
192   (SKIP 1)
194   (UNBIND 3)
196   (SKIP 1)
198   (UNBIND 2)
200   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $CONTENT NARGS ...)-68|
(CONST 0) = $CONTENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CONTENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONTENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CONTENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CONTENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CONTENT
8     (SKIP&RET 1)


Disassembly of function $CONTENT
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = VARLIST
(CONST 3) = 1
(CONST 4) = NARG1
(CONST 5) = $RATP
(CONST 6) = LISTIFY1
(CONST 7) = NEWVAR
(CONST 8) = RATREP*
(CONST 9) = GENVAR
(CONST 10) = 0
(CONST 11) = RCONTENT
(CONST 12) = (MLIST)
(CONST 13) = RATTIMES
(CONST 14) = $TOTALDISREP
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (GENVAR VARLIST Y X)
writes special variables : (Y VARLIST X)
92 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (NIL)
4     (BIND 0)                            ; X
6     (NIL)
7     (BIND 1)                            ; Y
9     (NIL&PUSH)
10    (NIL)
11    (BIND 2)                            ; VARLIST
13    (NIL&PUSH)
14    (CONST&PUSH 3)                      ; 1
15    (LOAD&PUSH 14)
16    (CALL2 4)                           ; NARG1
18    (SETVALUE 0)                        ; X
20    (PUSH)
21    (CALL1 5)                           ; $RATP
23    (STORE 0)
24    (LOAD&PUSH 11)
25    (LOAD&PUSH 14)
26    (CALL2 6)                           ; LISTIFY1
28    (CDR)
29    (SETVALUE 2)                        ; VARLIST
31    (GETVALUE&PUSH 0)                   ; X
33    (CALL1 7)                           ; NEWVAR
35    (GETVALUE&PUSH 0)                   ; X
37    (CALL1 8)                           ; RATREP*
39    (SETVALUE 1)                        ; Y
41    (CAR)
42    (STORE 4)
43    (GETVALUE 1)                        ; Y
45    (CDR)
46    (SETVALUE 1)                        ; Y
48    (CAR)
49    (SETVALUE 0)                        ; X
51    (GETVALUE 1)                        ; Y
53    (CDR)
54    (SETVALUE 1)                        ; Y
56    (GETVALUE 0)                        ; X
58    (JMPIFATOM L78)
60    (GETVALUE&PUSH 2)                   ; VARLIST
62    (CALLS2&PUSH 71)                    ; LENGTH
64    (CALLS2&PUSH 151)                   ; 1-
66    (GETVALUE&PUSH 9)                   ; GENVAR
68    (CALLS1&PUSH 148)                   ; NTH
70    (GETVALUE 0)                        ; X
72    (CAR&PUSH)
73    (LOAD 1)
74    (JMPIFNOTEQ L126)
76    (SKIP 1)
78    L78
78    (GETVALUE&PUSH 0)                   ; X
80    (CALL1 11)                          ; RCONTENT
82    (SETVALUE 0)                        ; X
84    (CONST&PUSH 3)                      ; 1
85    (GETVALUE 1)                        ; Y
87    (CONS)
88    (SETVALUE 1)                        ; Y
90    (CONST&PUSH 12)                     ; (MLIST)
91    (LOAD&PUSH 5)
92    (GETVALUE 0)                        ; X
94    (CAR&PUSH)
95    (GETVALUE&PUSH 1)                   ; Y
97    (NIL&PUSH)
98    (CALL 3 13)                         ; RATTIMES
101   (CONS&PUSH)
102   (LOAD&PUSH 6)
103   (GETVALUE 0)                        ; X
105   (CDR)
106   (CAR)
107   (CONS&PUSH)
108   (LIST 3)
110   (STORE 4)
111   (LOAD&JMPIF 0 L138)
114   (LOAD&PUSH 4)
115   (CALL1 14)                          ; $TOTALDISREP
117   L117
117   (SKIP 1)
119   (UNBIND1)
120   (SKIP 1)
122   (UNBIND 2)
124   (SKIP&RET 3)
126   L126
126   (LOAD&PUSH 0)
127   (CONST&PUSH 10)                     ; 0
128   (GETVALUE&PUSH 0)                   ; X
130   (LIST 3)
132   (SETVALUE 0)                        ; X
134   (SKIP 1)
136   (JMP L78)
138   L138
138   (LOAD 4)
139   (JMP L117)


Disassembly of function #:|(DEFMFUN PGET (GEN) ...)-69|
(CONST 0) = PGET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PGET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PGET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PGET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PGET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PGET
8     (SKIP&RET 1)


Disassembly of function PGET
(CONST 0) = (1 1)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST 0)                           ; (1 1)
2     (CONS)
3     (SKIP&RET 2)


Disassembly of function #:|(DEFUN M$EXP? (X) ...)-70|
(CONST 0) = M$EXP?
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE M$EXP?>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; M$EXP?
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; M$EXP?
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE M$EXP?>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; M$EXP?
8     (SKIP&RET 1)


Disassembly of function M$EXP?
(CONST 0) = X
(CONST 1) = MEXPTP
(CONST 2) = $%E
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1 1)                           ; MEXPTP
7     (JMPIFNOT1 L15)
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (CONST 2)                           ; $%E
14    (EQ)
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ALGP ($X) ...)-71|
(CONST 0) = ALGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGP
8     (SKIP&RET 1)


Disassembly of function ALGP
(CONST 0) = ALGPCHK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (NIL&PUSH)
2     (CALL2 0)                           ; ALGPCHK
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN ALGPGET ($X) ...)-72|
(CONST 0) = ALGPGET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGPGET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGPGET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGPGET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGPGET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGPGET
8     (SKIP&RET 1)


Disassembly of function ALGPGET
(CONST 0) = ALGPCHK
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (T&PUSH)
2     (CALL2 0)                           ; ALGPCHK
4     (SKIP&RET 2)


Disassembly of function #:|(DEFUN ALGPCHK ($X MPFLAG &AUX ...) ...)-73|
(CONST 0) = ALGPCHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGPCHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGPCHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGPCHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGPCHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGPCHK
8     (SKIP&RET 1)


Disassembly of function ALGPCHK
(CONST 0) = $%I
(CONST 1) = (2 -1)
(CONST 2) = $%PHI
(CONST 3) = (2 1 1 -1 0 -1)
(CONST 4) = RADFUNP
(CONST 5) = PREP1
(CONST 6) = ONEP1
(CONST 7) = *RATSIMP*
(CONST 8) = RADLIST
(CONST 9) = $ALGEBRAIC
(CONST 10) = M$EXP?
(CONST 11) = MTIMESP
(CONST 12) = ($%I $%PI)
(CONST 13) = RATNUMP
(CONST 14) = 2
(CONST 15) = PRIMCYCLO
(CONST 16) = TELLRATLIST
(CONST 17) = ASSOLIKE
(CONST 18) = P
(CONST 19) = 0
(CONST 20) = PMINUS
(CONST 21) = 1
(CONST 22) = GENPAIRS
(CONST 23) = ASSOL
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENPAIRS P TELLRATLIST RADLIST *RATSIMP* $ALGEBRAIC)
writes special variables : (P RADLIST)
159 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&PUSH 3)
2     (JMPIFEQTO 0 L57)                   ; $%I
5     (LOAD&PUSH 3)
6     (JMPIFEQTO 2 L60)                   ; $%PHI
9     (LOAD&PUSH 3)
10    (NIL&PUSH)
11    (CALL2&JMPIF 4 L76)                 ; RADFUNP
14    (GETVALUE 9)                        ; $ALGEBRAIC
16    (JMPIFNOT L224)
19    (LOAD&PUSH 3)
20    (CALL1&JMPIFNOT 10 L209)            ; M$EXP?
24    (LOAD 3)
25    (CDR)
26    (CDR)
27    (CAR)
28    (STORE 0)
29    (PUSH)
30    (CALL1&JMPIFNOT 11 L209)            ; MTIMESP
34    (LOAD 0)
35    (CDR)
36    (CDR&PUSH)
37    (CONST&PUSH 12)                     ; ($%I $%PI)
38    (CALLS2&JMPIFNOT 2 L209)            ; EQUAL
42    (LOAD 0)
43    (CDR)
44    (CAR)
45    (STORE 0)
46    (PUSH)
47    (CALL1&JMPIFNOT 13 L209)            ; RATNUMP
51    (LOAD&JMPIF 2 L102)
54    L54
54    (T)
55    (SKIP&RET 4)
57    L57
57    (CONST 1)                           ; (2 -1)
58    (SKIP&RET 4)
60    L60
60    (CONST 3)                           ; (2 1 1 -1 0 -1)
61    (SKIP&RET 4)
63    L63
63    (LOAD 4)
64    (CDR)
65    (CDR)
66    (CAR)
67    (CDR)
68    (CDR)
69    (CAR&PUSH)
70    (LOAD&CAR&PUSH 1)
72    (LIST 2)
74    (SKIP&RET 5)
76    L76
76    (LOAD&JMPIFNOT 2 L54)
79    (LOAD 3)
80    (CDR)
81    (CAR&PUSH)
82    (CALL1&PUSH 5)                      ; PREP1
84    (LOAD&CDR&PUSH 0)
86    (CALL1&JMPIF 6 L63)                 ; ONEP1
89    (GETVALUE 7)                        ; *RATSIMP*
91    (JMPIFNOT L99)
93    (LOAD&PUSH 4)
94    (GETVALUE 8)                        ; RADLIST
96    (CONS)
97    (SETVALUE 8)                        ; RADLIST
99    L99
99    (NIL)
100   (SKIP&RET 5)
102   L102
102   (CONST&PUSH 14)                     ; 2
103   (LOAD 1)
104   (CDR)
105   (CDR)
106   (CAR&PUSH)
107   (CALLSR&PUSH 2 55)                  ; *
110   (CALL1 15)                          ; PRIMCYCLO
112   (SKIP&RET 4)
114   L114
114   (LOAD&PUSH 3)
115   (GETVALUE&PUSH 16)                  ; TELLRATLIST
117   (CALL2 17)                          ; ASSOLIKE
119   (SKIP&RET 4)
121   L121
121   (LOAD&CAR&PUSH 0)
123   (CONST 19)                          ; 0
124   (JMP L176)
126   L126
126   (BIND 18)                           ; P
128   (GETVALUE 18)                       ; P
130   (JMPIFNOT L154)
132   L132
132   (GETVALUE 18)                       ; P
134   (CDR&PUSH)
135   (GETVALUE 18)                       ; P
137   (CDR)
138   (CAR&PUSH)
139   (CALL1 5)                           ; PREP1
141   (CAR&PUSH)
142   (CALLS1 168)                        ; RPLACA
144   (GETVALUE 18)                       ; P
146   (CDR)
147   (CDR)
148   (SETVALUE 18)                       ; P
150   (GETVALUE 18)                       ; P
152   (JMPIF L132)
154   L154
154   (UNBIND1)
155   (LOAD 0)
156   (CDR)
157   (CDR)
158   (JMPIFNOT L121)
160   (LOAD 0)
161   (CDR)
162   (CDR)
163   (CAR&PUSH)
164   (CALLS2&JMPIFNOT 145 L181)          ; ZEROP
167   (LOAD&CAR&PUSH 0)
169   (LOAD 1)
170   (CDR)
171   (CDR)
172   (CDR)
173   (CAR&PUSH)
174   (CALL1 20)                          ; PMINUS
176   L176
176   (PUSH)
177   (LIST 2)
179   (JMP L182)
181   L181
181   (LOAD 0)
182   L182
182   (STORE 0)
183   (CAR&PUSH)
184   (CONST&PUSH 21)                     ; 1
185   (CALLSR&JMPIFNOT 1 45 L206)         ; =
189   (LOAD&PUSH 3)
190   (GETVALUE&PUSH 22)                  ; GENPAIRS
192   (CALL2 23)                          ; ASSOL
194   (STORE 3)
195   (JMPIFNOT L206)
197   (LOAD&PUSH 3)
198   (LOAD 1)
199   (CDR)
200   (CAR&PUSH)
201   (CONST 21)                          ; 1
203   (CONS&PUSH)
204   (CALLS1 170)                        ; RPLACD
206   L206
206   (POP)
207   (SKIP&RET 3)
209   L209
209   (LOAD&JMPIFNOT 2 L114)
213   (LOAD&PUSH 3)
214   (GETVALUE&PUSH 16)                  ; TELLRATLIST
216   (CALL2&PUSH 17)                     ; ASSOLIKE
218   (CALLS1&STORE 158 0)                ; COPY-LIST
221   (JMPIF L126)
224   L224
224   (NIL)
225   (SKIP&RET 4)


Disassembly of function #:|(DEFUN RADFUNP (X FUNCFLAG) ...)-74|
(CONST 0) = RADFUNP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RADFUNP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RADFUNP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RADFUNP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RADFUNP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RADFUNP
8     (SKIP&RET 1)


Disassembly of function RADFUNP
(CONST 0) = X
(CONST 1) = MEXPT
(CONST 2) = RATNUMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
34 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L29)
7     (GETVALUE 0)                        ; X
9     (CAR)
10    (CAR&PUSH)
11    (JMPIFNOTEQTO 1 L32)                ; MEXPT
14    (GETVALUE 0)                        ; X
16    (CDR)
17    (CDR)
18    (CAR&PUSH)
19    (CALL1&JMPIFNOT 2 L35)              ; RATNUMP
22    (LOAD&JMPIF 4 L38)
25    (T)
26    L26
26    (UNBIND1)
27    (SKIP&RET 3)
29    L29
29    (NIL)
30    (JMP L26)
32    L32
32    (NIL)
33    (JMP L26)
35    L35
35    (NIL)
36    (JMP L26)
38    L38
38    (GETVALUE 0)                        ; X
40    (CDR)
41    (CAR&PUSH)
42    (CALLS2 8)                          ; NUMBERP
44    (NOT)
45    (JMP L26)


Disassembly of function #:|(DEFMFUN RATSETUP (VL GL) ...)-75|
(CONST 0) = RATSETUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATSETUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATSETUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATSETUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATSETUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATSETUP
8     (SKIP&RET 1)


Disassembly of function RATSETUP
(CONST 0) = RATSETUP1
(CONST 1) = RATSETUP2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (CALL2 0)                           ; RATSETUP1
4     (LOAD&PUSH 2)
5     (LOAD&PUSH 2)
6     (CALL2 1)                           ; RATSETUP2
8     (SKIP&RET 3)


Disassembly of function #:|(DEFUN RATSETUP1 (VL GL) ...)-76|
(CONST 0) = RATSETUP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATSETUP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATSETUP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATSETUP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATSETUP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATSETUP1
8     (SKIP&RET 1)


Disassembly of function RATSETUP1
(CONST 0) = $RATWTLVL
(CONST 1) = *RATWEIGHTS
(CONST 2) = ASSOLIKE
(CONST 3) = $RATWEIGHT
(CONST 4) = PUTPROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*RATWEIGHTS $RATWTLVL)
42 byte-code instructions:
0     (GETVALUE 0)                        ; $RATWTLVL
2     (JMPIFNOT1 L58)
4     (LOAD&PUSH 2)
5     (LOAD&PUSH 2)
6     L6
6     (LOAD&PUSH 1)
7     (CALLS1&JMPIF 146 L21)              ; ENDP
10    (LOAD&CAR&PUSH 1)
12    (LOAD&PUSH 1)
13    (CALLS1&JMPIFNOT 146 L35)           ; ENDP
16    (SKIP 3)
18    L18
18    (LOAD 2)
19    (SKIP&RET 3)
21    L21
21    (SKIP 2)
23    (JMP L18)
25    L25
25    (LOAD&PUSH 1)
26    (LOAD&PUSH 1)
27    (CONST&PUSH 3)                      ; $RATWEIGHT
28    (CALL 3 4)                          ; PUTPROP
31    (SKIP 3)
33    (JMP L52)
35    L35
35    (LOAD&CAR&PUSH 1)
37    (LOAD&PUSH 1)
38    (LOAD&PUSH 0)
39    (GETVALUE&PUSH 1)                   ; *RATWEIGHTS
41    (CALL2 2)                           ; ASSOLIKE
43    (STORE 0)
44    (JMPIF L25)
46    (LOAD&PUSH 1)
47    (CONST&PUSH 3)                      ; $RATWEIGHT
48    (CALLS2 137)                        ; REMPROP
50    (SKIP 3)
52    L52
52    (LOAD&CDR&STORE 1)
54    (LOAD&CDR&STORE 0)
56    (JMP L6)
58    L58
58    (SKIP&RET 3)


Disassembly of function #:|(DEFUN RATSETUP2 (VL GL) ...)-77|
(CONST 0) = RATSETUP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATSETUP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATSETUP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATSETUP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATSETUP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATSETUP2
8     (SKIP&RET 1)


Disassembly of function RATSETUP2
(CONST 0) = $ALGEBRAIC
(CONST 1) = ALGORD
(CONST 2) = ALGPGET
(CONST 3) = ALGORDSET
(CONST 4) = TELLRAT
(CONST 5) = PUTPROP
(CONST 6) = $RATFAC
(CONST 7) = MPLUSP
(CONST 8) = PREP1
(CONST 9) = UNHACKED
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($RATFAC $ALGEBRAIC)
94 byte-code instructions:
0     (GETVALUE 0)                        ; $ALGEBRAIC
2     (JMPIF L17)
4     (GETVALUE 6)                        ; $RATFAC
6     (JMPIFNOT1 L138)
9     L9
9     (NIL)
10    (BIND 6)                            ; $RATFAC
12    (LOAD&PUSH 5)
13    (LOAD&PUSH 5)
14    (JMP L122)
17    L17
17    (LOAD&PUSH 1)
18    (JMP L52)
20    L20
20    (SKIP 2)
22    (GETVALUE 6)                        ; $RATFAC
24    (JMPIFNOT1 L138)
27    (JMP L9)
29    L29
29    (PUSH)
30    (LOAD&PUSH 2)
31    (CALL2 3)                           ; ALGORDSET
33    (LOAD&CAR&PUSH 1)
35    (LOAD&PUSH 1)
36    (CONST&PUSH 4)                      ; TELLRAT
37    (CALL 3 5)                          ; PUTPROP
40    (JMP L81)
42    L42
42    (LOAD&CAR&PUSH 0)
44    (LOAD&PUSH 0)
45    (CONST&PUSH 1)                      ; ALGORD
46    (CALLS2 137)                        ; REMPROP
48    (SKIP 1)
50    (LOAD&CDR&STORE 0)
52    L52
52    (LOAD&PUSH 0)
53    (CALLS1&JMPIFNOT 146 L42)           ; ENDP
56    (SKIP 1)
58    (LOAD&PUSH 2)
59    (LOAD&PUSH 2)
60    L60
60    (LOAD&PUSH 1)
61    (CALLS1&JMPIF 146 L20)              ; ENDP
64    (LOAD&PUSH 0)
65    (CALLS1&JMPIF 146 L20)              ; ENDP
68    (LOAD&PUSH 1)
69    (LOAD&CAR&PUSH 0)
71    (CALL1 2)                           ; ALGPGET
73    (STORE 0)
74    (JMPIF L29)
76    (LOAD&CAR&PUSH 1)
78    (CONST&PUSH 4)                      ; TELLRAT
79    (CALLS2 137)                        ; REMPROP
81    L81
81    (SKIP 1)
83    (LOAD&CDR&STORE 1)
85    (LOAD&CDR&STORE 0)
87    (JMP L60)
89    L89
89    (SKIP 2)
91    (JMP L134)
93    L93
93    (LOAD&PUSH 0)
94    (LOAD&PUSH 2)
95    (CALL1 8)                           ; PREP1
97    (CAR&PUSH)
98    (CONST&PUSH 9)                      ; UNHACKED
99    (CALL 3 5)                          ; PUTPROP
102   (SKIP 2)
104   (JMP L118)
106   L106
106   (LOAD&CAR&PUSH 1)
108   (LOAD&PUSH 1)
109   (CALL1&JMPIF 7 L93)                 ; MPLUSP
112   (LOAD&PUSH 0)
113   (CONST&PUSH 9)                      ; UNHACKED
114   (CALLS2 137)                        ; REMPROP
116   (SKIP 2)
118   L118
118   (LOAD&CDR&STORE 1)
120   (LOAD&CDR&STORE 0)
122   L122
122   (LOAD&PUSH 1)
123   (CALLS1&JMPIF 146 L89)              ; ENDP
126   (LOAD&CAR&PUSH 1)
128   (LOAD&PUSH 1)
129   (CALLS1&JMPIFNOT 146 L106)          ; ENDP
132   (SKIP 3)
134   L134
134   (LOAD 5)
135   (UNBIND1)
136   (SKIP&RET 3)
138   L138
138   (SKIP&RET 3)


Disassembly of function #:|(DEFUN PORDER (P) ...)-78|
(CONST 0) = PORDER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PORDER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PORDER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PORDER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PORDER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PORDER
8     (SKIP&RET 1)


Disassembly of function PORDER
(CONST 0) = P
(CONST 1) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L15)
7     (GETVALUE 0)                        ; P
9     (CAR&PUSH)
10    (CALLS1 78)                         ; SYMBOL-VALUE
12    L12
12    (UNBIND1)
13    (SKIP&RET 2)
15    L15
15    (CONST 1)                           ; 0
16    (JMP L12)


Disassembly of function #:|(DEFUN ALGORDSET (X GL) ...)-79|
(CONST 0) = ALGORDSET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ALGORDSET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ALGORDSET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ALGORDSET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ALGORDSET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ALGORDSET
8     (SKIP&RET 1)


Disassembly of function ALGORDSET
(CONST 0) = X
(CONST 1) = P
(CONST 2) = 0
(CONST 3) = PORDER
(CONST 4) = L
(CONST 5) = ALGORD
(CONST 6) = PUTPROP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L P X)
writes special variables : (L P)
47 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (BIND 1)                            ; P
7     (CONST&PUSH 2)                      ; 0
8     (GETVALUE 1)                        ; P
10    (JMPIFNOT L33)
12    L12
12    (LOAD&PUSH 0)
13    (GETVALUE 1)                        ; P
15    (CDR)
16    (CAR&PUSH)
17    (CALL1&PUSH 3)                      ; PORDER
19    (CALLSR&STORE 1 51 0)               ; MAX
23    (GETVALUE 1)                        ; P
25    (CDR)
26    (CDR)
27    (SETVALUE 1)                        ; P
29    (GETVALUE 1)                        ; P
31    (JMPIF L12)
33    L33
33    (LOAD 8)
34    (BIND 4)                            ; L
36    (GETVALUE 4)                        ; L
38    (JMPIFNOT L67)
40    L40
40    (GETVALUE 4)                        ; L
42    (CAR&PUSH)
43    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
45    (LOAD&PUSH 4)
46    (CALLSR&JMPIF 1 48 L67)             ; >
50    (GETVALUE 4)                        ; L
52    (CAR&PUSH)
53    (T&PUSH)
54    (CONST&PUSH 5)                      ; ALGORD
55    (CALL 3 6)                          ; PUTPROP
58    (GETVALUE 4)                        ; L
60    (CDR)
61    (SETVALUE 4)                        ; L
63    (GETVALUE 4)                        ; L
65    (JMPIF L40)
67    L67
67    (NIL)
68    (UNBIND1)
69    (SKIP 1)
71    (UNBIND 2)
73    (SKIP&RET 3)


Disassembly of function #:|(DEFUN GENSYM-READABLE (NAME &AUX) ...)-80|
(CONST 0) = GENSYM-READABLE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GENSYM-READABLE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GENSYM-READABLE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GENSYM-READABLE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GENSYM-READABLE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GENSYM-READABLE
8     (SKIP&RET 1)


Disassembly of function GENSYM-READABLE
(CONST 0) = NAME
(CONST 1) = "$"
(CONST 2) = STRING-TRIM
(CONST 3) = "~:M"
(CONST 4) = AFORMAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NAME)
writes special variable : (NAME)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NAME
3     (GETVALUE&PUSH 0)                   ; NAME
5     (CALLS2&JMPIFNOT 6 L20)             ; SYMBOLP
8     (CONST&PUSH 1)                      ; "$"
9     (GETVALUE&PUSH 0)                   ; NAME
11    (CALLS1&PUSH 75)                    ; STRING
13    (CALL2 2)                           ; STRING-TRIM
15    L15
15    (PUSH)
16    (CALLS2 143)                        ; GENSYM
18    (JMP L35)
20    L20
20    (NIL&PUSH)
21    (CONST&PUSH 3)                      ; "~:M"
22    (GETVALUE&PUSH 0)                   ; NAME
24    (CALL 3 4)                          ; AFORMAT
27    (SETVALUE 0)                        ; NAME
29    (JMPIF L15)
31    (PUSH-UNBOUND 1)
33    (CALLS2 143)                        ; GENSYM
35    L35
35    (UNBIND1)
36    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ORDERPOINTER (L) ...)-81|
(CONST 0) = ORDERPOINTER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ORDERPOINTER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ORDERPOINTER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ORDERPOINTER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ORDERPOINTER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ORDERPOINTER
8     (SKIP&RET 1)


Disassembly of function ORDERPOINTER
(CONST 0) = L
(CONST 1) = 0
(CONST 2) = GENVAR
(CONST 3) = SLOOP::SLOOP-TYPE-ERROR
(CONST 4) = GENSYM-READABLE
(CONST 5) = 1
(CONST 6) = PRENUMBER
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR L)
writes special variable : (GENVAR)
57 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; L
6     (CONST&PUSH 1)                      ; 0
7     (GETVALUE&PUSH 0)                   ; L
9     (CALLS2&PUSH 71)                    ; LENGTH
11    (GETVALUE&PUSH 2)                   ; GENVAR
13    (CALLS2&PUSH 71)                    ; LENGTH
15    (CALLSR&PUSH 1 54)                  ; -
18    (LOAD&PUSH 0)
19    (CALLS2&JMPIF 13 L24)               ; SYSTEM::FIXNUMP
22    (CALL0 3)                           ; SLOOP::SLOOP-TYPE-ERROR
24    L24
24    (PUSH-NIL 3)
26    (JMP L58)
28    L28
28    (PUSH)
29    (LOAD&PUSH 1)
30    (NIL)
31    (CONS)
32    (STORE 2)
33    (PUSH)
34    (CALLS1 171)                        ; SYSTEM::%RPLACD
36    (JMP L54)
38    L38
38    (LOAD&CAR&PUSH 5)
40    (LOAD 0)
41    (STORE 7)
42    (STORE 0)
43    (CALL1 4)                           ; GENSYM-READABLE
45    (STORE 0)
46    (LOAD&JMPIF 1 L28)
49    (LOAD&PUSH 0)
50    (NIL)
51    (CONS)
52    (STORE 1)
53    (STORE 2)
54    L54
54    (LOAD&CDR&STORE 5)
56    (LOAD&INC&STORE 4)
58    L58
58    (LOAD&PUSH 4)
59    (LOAD&PUSH 4)
60    (CALLSR&JMPIF 1 50 L67)             ; >=
64    (LOAD&JMPIF 5 L38)
67    L67
67    (LOAD&PUSH 2)
68    (GETVALUE&PUSH 2)                   ; GENVAR
70    (CALLSR 2 35)                       ; NCONC
73    (SETVALUE 2)                        ; GENVAR
75    (PUSH)
76    (CONST&PUSH 5)                      ; 1
77    (CALL2 6)                           ; PRENUMBER
79    (SKIP 7)
81    (UNBIND1)
82    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CREATSYM (N) ...)-82|
(CONST 0) = CREATSYM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CREATSYM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CREATSYM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CREATSYM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CREATSYM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CREATSYM
8     (SKIP&RET 1)


Disassembly of function CREATSYM
(CONST 0) = 0
(CONST 1) = GENVAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (GENVAR)
writes special variable : (GENVAR)
14 byte-code instructions:
0     L0
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 0
2     (CALLSR&JMPIF 1 48 L9)              ; >
6     (NIL)
7     (SKIP&RET 2)
9     L9
9     (PUSH-UNBOUND 1)
11    (CALLS2&PUSH 143)                   ; GENSYM
13    (GETVALUE 1)                        ; GENVAR
15    (CONS)
16    (SETVALUE 1)                        ; GENVAR
18    (LOAD&DEC&PUSH 1)
20    (JMPTAIL 1 3 L0)


Disassembly of function #:|(DEFUN PRENUMBER (V N) ...)-83|
(CONST 0) = PRENUMBER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRENUMBER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRENUMBER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRENUMBER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRENUMBER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRENUMBER
8     (SKIP&RET 1)


Disassembly of function PRENUMBER
(CONST 0) = SET
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
13 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 2)
2     (LOAD&JMPIFNOT 1 L17)
5     L5
5     (LOAD&CAR&PUSH 1)
7     (LOAD&PUSH 1)
8     (CALL2 0)                           ; SET
10    (LOAD&CDR&STORE 1)
12    (LOAD&INC&STORE 0)
14    (LOAD&JMPIF 1 L5)
17    L17
17    (NIL)
18    (SKIP&RET 5)


Disassembly of function #:|(DEFUN RGET (GENV) ...)-84|
(CONST 0) = RGET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RGET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RGET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RGET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RGET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RGET
8     (SKIP&RET 1)


Disassembly of function RGET
(CONST 0) = $RATWTLVL
(CONST 1) = FIXNUMP
(CONST 2) = "Illegal value for RATWTLVL:~%~M"
(CONST 3) = MERROR
(CONST 4) = $RATWEIGHT
(CONST 5) = -1
(CONST 6) = 0
(CONST 7) = PGET
(CONST 8) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($RATWTLVL)
28 byte-code instructions:
0     (GETVALUE 0)                        ; $RATWTLVL
2     (JMPIFNOT L29)
4     (PUSH)
5     (CALL1&JMPIF 1 L14)                 ; FIXNUMP
8     (CONST&PUSH 2)                      ; "Illegal value for RATWTLVL:~%~M"
9     (GETVALUE&PUSH 0)                   ; $RATWTLVL
11    (CALL2&JMPIFNOT 3 L29)              ; MERROR
14    L14
14    (LOAD&PUSH 1)
15    (CONST&PUSH 4)                      ; $RATWEIGHT
16    (PUSH-UNBOUND 1)
18    (CALLS2&JMPIF 132 L22)              ; GET
21    (CONST 5)                           ; -1
22    L22
22    (PUSH)
23    (GETVALUE&PUSH 0)                   ; $RATWTLVL
25    (CALLSR&JMPIF 1 48 L37)             ; >
29    L29
29    (LOAD&PUSH 1)
30    (CALL1 7)                           ; PGET
32    L32
32    (PUSH)
33    (CONST 8)                           ; 1
34    (CONS)
35    (SKIP&RET 2)
37    L37
37    (CONST 6)                           ; 0
38    (JMP L32)


Disassembly of function #:|(DEFMFUN RATREP (X VARL) ...)-85|
(CONST 0) = RATREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATREP
8     (SKIP&RET 1)


Disassembly of function RATREP
(CONST 0) = X
(CONST 1) = VARLIST
(CONST 2) = RATREP*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (VARLIST)
8 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (SETVALUE 1)                        ; VARLIST
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; RATREP*
10    (UNBIND1)
11    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RATREP* (X) ...)-86|
(CONST 0) = RATREP*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATREP*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATREP*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATREP*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATREP*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATREP*
8     (SKIP&RET 1)


Disassembly of function RATREP*
(CONST 0) = X
(CONST 1) = GENPAIRS
(CONST 2) = VARLIST
(CONST 3) = ORDERPOINTER
(CONST 4) = GENVAR
(CONST 5) = RATSETUP1
(CONST 6) = Y
(CONST 7) = RGET
(CONST 8) = RATSETUP2
(CONST 9) = PREP1
(CONST 10) = MRAT
(CONST 11) = SIMP
(CONST 12) = IRREDUCIBLE
(CONST 13) = MEMQ
(CONST 14) = (IRREDUCIBLE)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X GENPAIRS Y GENVAR VARLIST)
writes special variable : (GENPAIRS)
64 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; GENPAIRS
6     (GETVALUE&PUSH 2)                   ; VARLIST
8     (CALL1 3)                           ; ORDERPOINTER
10    (GETVALUE&PUSH 2)                   ; VARLIST
12    (GETVALUE&PUSH 4)                   ; GENVAR
14    (CALL2 5)                           ; RATSETUP1
16    (GETVALUE&PUSH 2)                   ; VARLIST
18    (LOAD&PUSH 0)
19    (GETVALUE&PUSH 4)                   ; GENVAR
21    (JMP L50)
23    L23
23    (SKIP 2)
25    (JMP L62)
27    L27
27    (LOAD&CAR&PUSH 1)
29    (LOAD 1)
30    (BIND 6)                            ; Y
32    (GETVALUE&PUSH 6)                   ; Y
34    (LOAD&PUSH 4)
35    (CALL1 7)                           ; RGET
37    (CONS&PUSH)
38    (GETVALUE 1)                        ; GENPAIRS
40    (CONS)
41    (SETVALUE 1)                        ; GENPAIRS
43    (UNBIND1)
44    (SKIP 2)
46    (LOAD&CDR&STORE 1)
48    (LOAD&CDR&STORE 0)
50    L50
50    (LOAD&PUSH 1)
51    (CALLS1&JMPIF 146 L23)              ; ENDP
54    (LOAD&CAR&PUSH 1)
56    (LOAD&PUSH 1)
57    (CALLS1&JMPIFNOT 146 L27)           ; ENDP
60    (SKIP 3)
62    L62
62    (SKIP 1)
64    (GETVALUE&PUSH 2)                   ; VARLIST
66    (GETVALUE&PUSH 4)                   ; GENVAR
68    (CALL2 8)                           ; RATSETUP2
70    (GETVALUE&PUSH 0)                   ; X
72    (CALL1&PUSH 9)                      ; PREP1
74    (CONST&PUSH 10)                     ; MRAT
75    (CONST&PUSH 11)                     ; SIMP
76    (GETVALUE&PUSH 2)                   ; VARLIST
78    (GETVALUE&PUSH 4)                   ; GENVAR
80    (GETVALUE&PUSH 0)                   ; X
82    (CALLS2&JMPIFNOT 4 L94)             ; CONSP
85    (CONST&PUSH 12)                     ; IRREDUCIBLE
86    (GETVALUE 0)                        ; X
88    (CAR)
89    (CDR&PUSH)
90    (CALL2&JMPIFNOT 13 L94)             ; MEMQ
93    (CONST 14)                          ; (IRREDUCIBLE)
94    L94
94    (LIST*&PUSH 4)
96    (LOAD 1)
97    (CONS)
98    (SKIP 1)
100   (UNBIND 2)
102   (SKIP&RET 2)


Disassembly of function #:|(DEFVAR *WITHINRATF* NIL)-87|
(CONST 0) = (SPECIAL *WITHINRATF*)
(CONST 1) = *WITHINRATF*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *WITHINRATF*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *WITHINRATF*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *WITHINRATF*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *WITHINRATF*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN RATF (L) ...)-88|
(CONST 0) = RATF
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATF
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATF
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATF>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATF
8     (SKIP&RET 1)


Disassembly of function RATF
(CONST 0) = L
(CONST 1) = *WITHINRATF*
(CONST 2) = RATF
(CONST 3) = NEWVAR
(CONST 4) = %%
(CONST 5) = SRF
(CONST 6) = RATREP*
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (*WITHINRATF*)
43 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; *WITHINRATF*
7     (T)
8     (SETVALUE 1)                        ; *WITHINRATF*
10    (CONST 2)                           ; RATF
11    (CATCH-OPEN L18)
13    (GETVALUE&PUSH 0)                   ; L
15    (CALL1 3)                           ; NEWVAR
17    (CATCH-CLOSE)
18    L18
18    (PUSH)
19    (JMPIFEQTO 4 L35)                   ; %%
22    (CONST 2)                           ; RATF
23    (CATCH-OPEN L44)
25    (GETVALUE&PUSH 0)                   ; L
27    (CALL1 6)                           ; RATREP*
29    (CATCH-CLOSE)
30    (STORE 3)
31    (JMPIF1 L55)
33    (JMP L47)
35    L35
35    (NIL)
36    (SETVALUE 1)                        ; *WITHINRATF*
38    (GETVALUE&PUSH 0)                   ; L
40    (CALL1 5)                           ; SRF
42    (JMP L55)
44    L44
44    (STORE 3)
45    (JMPIF1 L55)
47    L47
47    (NIL)
48    (SETVALUE 1)                        ; *WITHINRATF*
50    (GETVALUE&PUSH 0)                   ; L
52    (CALL1 5)                           ; SRF
54    (VALUES1)
55    L55
55    (UNBIND1)
56    (SKIP 1)
58    (UNBIND1)
59    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PREP1 (X &AUX TEMP) ...)-89|
(CONST 0) = PREP1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PREP1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PREP1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PREP1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PREP1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PREP1
8     (SKIP&RET 1)


Disassembly of function PREP1
(CONST 0) = X
(CONST 1) = $KEEPFLOAT
(CONST 2) = 1.0
(CONST 3) = PREPFLOAT
(CONST 4) = CMOD
(CONST 5) = 1
(CONST 6) = MODULUS
(CONST 7) = CQUOTIENT
(CONST 8) = GENPAIRS
(CONST 9) = ASSOLIKE
(CONST 10) = NEWSYM
(CONST 11) = $RATFAC
(CONST 12) = MPLUS
(CONST 13) = PREP1
(CONST 14) = FRPOLY?
(CONST 15) = ANDMAPC
(CONST 16) = MFACPPLUS
(CONST 17) = L
(CONST 18) = FACRPLUS
(CONST 19) = RATPLUS
(CONST 20) = MTIMES
(CONST 21) = SAVEFACTORS
(CONST 22) = $NOREPEAT
(CONST 23) = RATSIMP
(CONST 24) = MEMQ
(CONST 25) = RATTIMES
(CONST 26) = MEXPT
(CONST 27) = NEWVARMEXPT
(CONST 28) = MQUOTIENT
(CONST 29) = RATQUOTIENT
(CONST 30) = MMINUS
(CONST 31) = RATMINUS
(CONST 32) = RAT
(CONST 33) = BIGFLOAT
(CONST 34) = BIGFLOAT2RAT
(CONST 35) = MRAT
(CONST 36) = *WITHINRATF*
(CONST 37) = TRUNC
(CONST 38) = RATF
(CONST 39) = COMPATVL
(CONST 40) = VARLIST
(CONST 41) = GENVAR
(CONST 42) = COMPATVARL
(CONST 43) = $TAYTORAT
(CONST 44) = PFLOATP
(CONST 45) = $RATDISREP
(CONST 46) = RATREP*
(CONST 47) = LITTLEFR1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GENVAR VARLIST *WITHINRATF* $NOREPEAT L MODULUS $KEEPFLOAT GENPAIRS $RATFAC X)
writes special variables : (L X)
357 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; X
6     (CALLS2&JMPIF 15 L140)              ; FLOATP
10    (GETVALUE&PUSH 0)                   ; X
12    (CALLS2&JMPIF 12 L153)              ; INTEGERP
16    (GETVALUE&PUSH 0)                   ; X
18    (CALLS2&JMPIF 14 L172)              ; RATIONALP
22    (GETVALUE 0)                        ; X
24    (JMPIFATOM L188)
27    (GETVALUE 11)                       ; $RATFAC
29    (JMPIFNOT L40)
31    (GETVALUE&PUSH 0)                   ; X
33    (GETVALUE&PUSH 8)                   ; GENPAIRS
35    (CALL2 9)                           ; ASSOLIKE
37    (JMPIF1 L129)
40    L40
40    (GETVALUE 0)                        ; X
42    (CAR)
43    (CAR&PUSH)
44    (JMPIFEQTO 12 L271)                 ; MPLUS
48    (GETVALUE 0)                        ; X
50    (CAR)
51    (CAR&PUSH)
52    (JMPIFEQTO 20 L319)                 ; MTIMES
56    (GETVALUE 0)                        ; X
58    (CAR)
59    (CAR&PUSH)
60    (JMPIFEQTO 26 L383)                 ; MEXPT
64    (GETVALUE 0)                        ; X
66    (CAR)
67    (CAR&PUSH)
68    (JMPIFEQTO 28 L397)                 ; MQUOTIENT
72    (GETVALUE 0)                        ; X
74    (CAR)
75    (CAR&PUSH)
76    (JMPIFEQTO 30 L421)                 ; MMINUS
80    (GETVALUE 0)                        ; X
82    (CAR)
83    (CAR&PUSH)
84    (JMPIFEQTO 32 L453)                 ; RAT
88    (GETVALUE 0)                        ; X
90    (CAR)
91    (CAR&PUSH)
92    (JMPIFEQTO 33 L470)                 ; BIGFLOAT
96    (GETVALUE 0)                        ; X
98    (CAR)
99    (CAR&PUSH)
100   (JMPIFEQTO 35 L509)                 ; MRAT
104   (GETVALUE&PUSH 0)                   ; X
106   (GETVALUE&PUSH 8)                   ; GENPAIRS
108   (CALL2 9)                           ; ASSOLIKE
110   (JMPIF1 L129)
112   (GETVALUE&PUSH 0)                   ; X
114   (CALL1 47)                          ; LITTLEFR1
116   (SETVALUE 0)                        ; X
118   L118
118   (PUSH)
119   (GETVALUE&PUSH 8)                   ; GENPAIRS
121   (CALL2 9)                           ; ASSOLIKE
123   (JMPIF1 L129)
125   (GETVALUE&PUSH 0)                   ; X
127   (CALL1 10)                          ; NEWSYM
129   L129
129   (SKIP 1)
131   (UNBIND1)
132   (SKIP&RET 2)
134   L134
134   (GETVALUE&PUSH 0)                   ; X
136   (CONST 2)                           ; 1.0
137   (CONS)
138   (JMP L129)
140   L140
140   (GETVALUE 1)                        ; $KEEPFLOAT
142   (JMPIF L134)
144   (GETVALUE&PUSH 0)                   ; X
146   (CALL1 3)                           ; PREPFLOAT
148   (JMPIF1 L129)
150   (NIL)
151   (JMP L129)
153   L153
153   (GETVALUE&PUSH 0)                   ; X
155   (CALL1&PUSH 4)                      ; CMOD
157   (CONST 5)                           ; 1
158   (CONS)
159   (JMP L129)
161   L161
161   (GETVALUE&PUSH 0)                   ; X
163   (CALLS2&PUSH 177)                   ; NUMERATOR
165   (GETVALUE&PUSH 0)                   ; X
167   (CALLS2 178)                        ; DENOMINATOR
169   (CONS)
170   (JMP L129)
172   L172
172   (GETVALUE 6)                        ; MODULUS
174   (JMPIFNOT L161)
176   (GETVALUE&PUSH 0)                   ; X
178   (CALLS2&PUSH 177)                   ; NUMERATOR
180   (GETVALUE&PUSH 0)                   ; X
182   (CALLS2&PUSH 178)                   ; DENOMINATOR
184   (CALL2 7)                           ; CQUOTIENT
186   (JMP L129)
188   L188
188   (GETVALUE 0)                        ; X
190   (JMP L118)
193   L193
193   (GETVALUE&PUSH 0)                   ; X
195   (LOAD&PUSH 0)
196   (JMP L212)
198   L198
198   (LOAD 0)
199   (BIND 0)                            ; X
201   (GETVALUE&PUSH 0)                   ; X
203   (GETVALUE 0)                        ; X
205   (CAR)
206   (CAR&PUSH)
207   (CALLS1 168)                        ; RPLACA
209   (UNBIND1)
210   (LOAD&CDR&STORE 0)
212   L212
212   (LOAD&PUSH 0)
213   (CALLS1&JMPIFNOT 146 L198)          ; ENDP
216   (SKIP 1)
218   (CALL1&PUSH 16)                     ; MFACPPLUS
220   (CONST 5)                           ; 1
221   (CONS)
222   (JMP L129)
225   L225
225   (CONST&PUSH 13)                     ; PREP1
226   (GETVALUE 0)                        ; X
228   (CDR&PUSH)
229   (CALLSR 0 22)                       ; MAPCAR
232   (SETVALUE 0)                        ; X
234   (CONST&PUSH 14)                     ; FRPOLY?
235   (GETVALUE&PUSH 0)                   ; X
237   (CALL2&JMPIF 15 L193)               ; ANDMAPC
240   (GETVALUE 0)                        ; X
242   (CAR&PUSH)
243   (GETVALUE 0)                        ; X
245   (CDR)
246   (BIND 17)                           ; L
248   (GETVALUE 17)                       ; L
250   (JMPIFNOT L312)
252   L252
252   (LOAD&PUSH 3)
253   (GETVALUE 17)                       ; L
255   (CAR&PUSH)
256   (CALL2&PUSH 18)                     ; FACRPLUS
258   (GETVALUE 17)                       ; L
260   (CDR)
261   (SETVALUE 17)                       ; L
263   (POP&STORE 3)
265   (GETVALUE 17)                       ; L
267   (JMPIFNOT L312)
269   (JMP L252)
271   L271
271   (GETVALUE 11)                       ; $RATFAC
273   (JMPIF L225)
275   (GETVALUE 0)                        ; X
277   (CDR)
278   (CAR&PUSH)
279   (JSR&PUSH L0)
282   (GETVALUE 0)                        ; X
284   (CDR)
285   (CDR)
286   (BIND 17)                           ; L
288   (GETVALUE 17)                       ; L
290   (JMPIFNOT L312)
292   L292
292   (LOAD&PUSH 3)
293   (GETVALUE 17)                       ; L
295   (CAR&PUSH)
296   (JSR&PUSH L0)
299   (CALL2&PUSH 19)                     ; RATPLUS
301   (GETVALUE 17)                       ; L
303   (CDR)
304   (SETVALUE 17)                       ; L
306   (POP&STORE 3)
308   (GETVALUE 17)                       ; L
310   (JMPIF L292)
312   L312
312   (LOAD 3)
313   (UNBIND1)
314   (SKIP 1)
316   (JMP L129)
319   L319
319   (GETVALUE 0)                        ; X
321   (CDR)
322   (CAR&PUSH)
323   (JSR&PUSH L0)
326   (CALL1&PUSH 21)                     ; SAVEFACTORS
328   (GETVALUE 0)                        ; X
330   (CDR)
331   (CDR&PUSH)
332   (GETVALUE 22)                       ; $NOREPEAT
334   (JMPIFNOT L343)
336   (CONST&PUSH 23)                     ; RATSIMP
337   (GETVALUE 0)                        ; X
339   (CAR)
340   (CDR&PUSH)
341   (CALL2 24)                          ; MEMQ
343   L343
343   (NOT)
344   (PUSH)
345   (LOAD 1)
346   (BIND 17)                           ; L
348   (GETVALUE 17)                       ; L
350   (JMPIFNOT L376)
352   L352
352   (LOAD&PUSH 5)
353   (GETVALUE 17)                       ; L
355   (CAR&PUSH)
356   (JSR&PUSH L0)
359   (CALL1&PUSH 21)                     ; SAVEFACTORS
361   (LOAD&PUSH 5)
362   (CALL&PUSH 3 25)                    ; RATTIMES
365   (GETVALUE 17)                       ; L
367   (CDR)
368   (SETVALUE 17)                       ; L
370   (POP&STORE 5)
372   (GETVALUE 17)                       ; L
374   (JMPIF L352)
376   L376
376   (LOAD 5)
377   (UNBIND1)
378   (SKIP 3)
380   (JMP L129)
383   L383
383   (GETVALUE&PUSH 0)                   ; X
385   (GETVALUE 0)                        ; X
387   (CDR)
388   (CDR)
389   (CAR&PUSH)
390   (T&PUSH)
391   (CALL 3 27)                         ; NEWVARMEXPT
394   (JMP L129)
397   L397
397   (GETVALUE 0)                        ; X
399   (CDR)
400   (CAR&PUSH)
401   (JSR&PUSH L0)
404   (CALL1&PUSH 21)                     ; SAVEFACTORS
406   (GETVALUE 0)                        ; X
408   (CDR)
409   (CDR)
410   (CAR&PUSH)
411   (JSR&PUSH L0)
414   (CALL1&PUSH 21)                     ; SAVEFACTORS
416   (CALL2 29)                          ; RATQUOTIENT
418   (JMP L129)
421   L421
421   (GETVALUE 0)                        ; X
423   (CDR)
424   (CAR&PUSH)
425   (JSR&PUSH L0)
428   (CALL1 31)                          ; RATMINUS
430   (JMP L129)
433   L433
433   (GETVALUE 0)                        ; X
435   (CDR)
436   (CAR&PUSH)
437   (CALL1&PUSH 4)                      ; CMOD
439   (GETVALUE 0)                        ; X
441   (CDR)
442   (CDR)
443   (CAR&PUSH)
444   (CALL1&PUSH 4)                      ; CMOD
446   (CALL2&PUSH 7)                      ; CQUOTIENT
448   (CONST 5)                           ; 1
449   (CONS)
450   (JMP L129)
453   L453
453   (GETVALUE 6)                        ; MODULUS
455   (JMPIF L433)
457   (GETVALUE 0)                        ; X
459   (CDR)
460   (CAR&PUSH)
461   (GETVALUE 0)                        ; X
463   (CDR)
464   (CDR)
465   (CAR)
466   (CONS)
467   (JMP L129)
470   L470
470   (GETVALUE&PUSH 0)                   ; X
472   (CALL1 34)                          ; BIGFLOAT2RAT
474   (JMP L129)
477   L477
477   (CONST&PUSH 38)                     ; RATF
479   (NIL)
480   (THROW)
481   L481
481   (JMPIFNOT L576)
484   (JMP L547)
486   L486
486   (GETVALUE&PUSH 0)                   ; X
488   (CALL1 43)                          ; $TAYTORAT
490   (CDR)
491   (JMP L129)
494   L494
494   (LOAD&PUSH 0)
495   (GETVALUE 0)                        ; X
497   (CDR&PUSH)
498   (PUSH-UNBOUND 3)
500   (CALLS1 178)                        ; SUBLIS
502   (JMPIF1 L129)
505   (NIL)
506   (JMP L129)
509   L509
509   (GETVALUE 36)                       ; *WITHINRATF*
511   (JMPIFNOT L521)
513   (CONST&PUSH 37)                     ; TRUNC
515   (GETVALUE 0)                        ; X
517   (CAR&PUSH)
518   (CALL2&JMPIF 24 L477)               ; MEMQ
521   L521
521   (CONST 39)                          ; COMPATVL
523   (CATCH-OPEN L481)
525   (GETVALUE 0)                        ; X
527   (CAR)
528   (CDR)
529   (CDR)
530   (CAR&PUSH)
531   (GETVALUE&PUSH 40)                  ; VARLIST
533   (GETVALUE 0)                        ; X
535   (CAR)
536   (CDR)
537   (CDR)
538   (CDR)
539   (CAR&PUSH)
540   (GETVALUE&PUSH 41)                  ; GENVAR
542   (CALL 4 42)                         ; COMPATVARL
545   (STORE 3)
546   (CATCH-CLOSE)
547   L547
547   (CONST&PUSH 37)                     ; TRUNC
549   (GETVALUE 0)                        ; X
551   (CAR&PUSH)
552   (CALL2&JMPIF 24 L486)               ; MEMQ
556   (GETVALUE 1)                        ; $KEEPFLOAT
558   (JMPIF L494)
561   (GETVALUE 0)                        ; X
563   (CDR)
564   (CAR&PUSH)
565   (CALL1&JMPIF 44 L576)               ; PFLOATP
568   (GETVALUE 0)                        ; X
570   (CDR)
571   (CDR&PUSH)
572   (CALL1&JMPIFNOT 44 L494)            ; PFLOATP
576   L576
576   (GETVALUE&PUSH 0)                   ; X
578   (CALL1&PUSH 45)                     ; $RATDISREP
580   (CALL1 46)                          ; RATREP*
582   (CDR)
583   (JMP L129)


Disassembly of function #:|(DEFUN PUTONVLIST (X) ...)-90|
(CONST 0) = PUTONVLIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PUTONVLIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PUTONVLIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PUTONVLIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PUTONVLIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PUTONVLIST
8     (SKIP&RET 1)


Disassembly of function PUTONVLIST
(CONST 0) = X
(CONST 1) = VLIST
(CONST 2) = $ALGEBRAIC
(CONST 3) = TELLRATLIST
(CONST 4) = ASSOLIKE
(CONST 5) = NEWVAR1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TELLRATLIST $ALGEBRAIC VLIST X)
writes special variables : (X VLIST)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (GETVALUE 1)                        ; VLIST
7     (CONS)
8     (SETVALUE 1)                        ; VLIST
10    (GETVALUE 2)                        ; $ALGEBRAIC
12    (JMPIFNOT1 L30)
14    (GETVALUE&PUSH 0)                   ; X
16    (GETVALUE&PUSH 3)                   ; TELLRATLIST
18    (CALL2 4)                           ; ASSOLIKE
20    (SETVALUE 0)                        ; X
22    (JMPIFNOT1 L30)
24    (CONST&PUSH 5)                      ; NEWVAR1
25    (GETVALUE&PUSH 0)                   ; X
27    (CALLSR 0 24)                       ; MAPC
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)


Disassembly of function #:|(SETQ EXPSUMSPLIT T)-91|
(CONST 0) = EXPSUMSPLIT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (EXPSUMSPLIT)
3 byte-code instructions:
0     (T)
1     (SETVALUE 0)                        ; EXPSUMSPLIT
3     (SKIP&RET 1)


Disassembly of function #:|(DEFUN NEWVARMEXPT (X E FLAG) ...)-92|
(CONST 0) = NEWVARMEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWVARMEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWVARMEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWVARMEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWVARMEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWVARMEXPT
8     (SKIP&RET 1)


Disassembly of function NEWVARMEXPT
(CONST 0) = X
(CONST 1) = FLAG
(CONST 2) = NEWVAR1
(CONST 3) = 1
(CONST 4) = RAT
(CONST 5) = (MEXPT)
(CONST 6) = (RAT)
(CONST 7) = *RATSIMP*
(CONST 8) = RADLIST
(CONST 9) = MEMALIKE
(CONST 10) = $ALGEBRAIC
(CONST 11) = MTIMES
(CONST 12) = (RAT)
(CONST 13) = (MEXPT)
(CONST 14) = (MTIMES)
(CONST 15) = SIMPLIFY
(CONST 16) = MPLUS
(CONST 17) = EXPSUMSPLIT
(CONST 18) = (MTIMES)
(CONST 19) = (MEXPT)
(CONST 20) = (MTIMES)
(CONST 21) = PREP1
(CONST 22) = MEXPT
(CONST 23) = VARLIST
(CONST 24) = VLIST
(CONST 25) = *FNEWVARSW
(CONST 26) = PUTONVLIST
(CONST 27) = LITTLEFR1
(CONST 28) = GENPAIRS
(CONST 29) = ASSOLIKE
(CONST 30) = NEWSYM
(CONST 31) = RATEXPT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
(GENPAIRS *FNEWVARSW VLIST VARLIST EXPSUMSPLIT $ALGEBRAIC RADLIST *RATSIMP* X
 FLAG)
writes special variables : (RADLIST X)
310 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; FLAG
6     (NIL&PUSH)
7     (LOAD&PUSH 9)
8     (CALLS2&JMPIFNOT 12 L16)            ; INTEGERP
11    (GETVALUE 1)                        ; FLAG
13    (JMPIFNOT L119)
16    L16
16    (CONST 3)                           ; 1
17    (STORE 0)
18    (JMP L312)
21    L21
21    (LOAD&PUSH 0)
22    (LOAD&PUSH 10)
23    (CALLSR&STORE 2 55 0)               ; *
27    (GETVALUE 0)                        ; X
29    (CDR)
30    (CAR)
31    (SETVALUE 0)                        ; X
33    (GETVALUE 1)                        ; FLAG
35    (JMPIFNOT L350)
38    (JMP L421)
41    L41
41    (LOAD&PUSH 0)
42    (LOAD 10)
43    (CDR)
44    (CAR&PUSH)
45    (CALLSR&STORE 2 55 0)               ; *
49    (CONST&PUSH 5)                      ; (MEXPT)
50    (GETVALUE 0)                        ; X
52    (CDR)
53    (CAR&PUSH)
54    (CONST&PUSH 6)                      ; (RAT)
55    (CONST&PUSH 3)                      ; 1
56    (LOAD 13)
57    (CDR)
58    (CDR)
59    (CAR&PUSH)
60    (LIST&PUSH 3)
62    (LIST 3)
64    (SETVALUE 0)                        ; X
66    (GETVALUE 1)                        ; FLAG
68    (JMPIFNOT L92)
70    (JMP L345)
73    L73
73    (LOAD 9)
74    (CDR)
75    (CAR&PUSH)
76    (CALLS2&JMPIF 147 L41)              ; MINUSP
79    (LOAD 9)
80    (CDR)
81    (CAR&PUSH)
82    (CONST&PUSH 3)                      ; 1
83    (CALLSR&JMPIF 1 48 L41)             ; >
87    (GETVALUE 1)                        ; FLAG
89    (JMPIF L345)
92    L92
92    (GETVALUE 0)                        ; X
94    (CDR)
95    (CAR&PUSH)
96    (CALLS2&JMPIF 8 L345)               ; NUMBERP
100   (GETVALUE 7)                        ; *RATSIMP*
102   (JMPIFNOT L126)
104   (GETVALUE&PUSH 0)                   ; X
106   (GETVALUE&PUSH 8)                   ; RADLIST
108   (CALL2&JMPIF 9 L425)                ; MEMALIKE
112   (GETVALUE&PUSH 0)                   ; X
114   (GETVALUE 8)                        ; RADLIST
116   (CONS)
117   (SETVALUE 8)                        ; RADLIST
119   L119
119   (GETVALUE 0)                        ; X
121   (CDR)
122   (CAR)
123   (JMP L194)
126   L126
126   (GETVALUE 10)                       ; $ALGEBRAIC
128   (JMPIFNOT L345)
131   (GETVALUE 0)                        ; X
133   (CDR)
134   (CAR&PUSH)
135   (CALL1 2)                           ; NEWVAR1
137   (GETVALUE 1)                        ; FLAG
139   (JMPIFNOT L350)
142   (JMP L421)
145   L145
145   (CONST&PUSH 18)                     ; (MTIMES)
146   (NIL&PUSH)
147   (LOAD&CDR&PUSH 11)
149   (JMP L173)
151   L151
151   (LOAD&CAR&PUSH 0)
153   (CONST&PUSH 19)                     ; (MEXPT)
154   (GETVALUE 0)                        ; X
156   (CDR)
157   (CAR&PUSH)
158   (CONST&PUSH 20)                     ; (MTIMES)
159   (LOAD&PUSH 7)
160   (LOAD&PUSH 4)
161   (LIST&PUSH 3)
163   (CALL1&PUSH 15)                     ; SIMPLIFY
165   (LIST&PUSH 3)
167   (LOAD&CONS&STORE 2)
169   (SKIP 1)
171   (LOAD&CDR&STORE 0)
173   L173
173   (LOAD&PUSH 0)
174   (CALLS1&JMPIFNOT 146 L151)          ; ENDP
177   (SKIP 1)
179   (LOAD&PUSH 0)
180   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
182   (SKIP 1)
184   (CONS)
185   (SETVALUE 0)                        ; X
187   (GETVALUE 1)                        ; FLAG
189   (JMPIF L483)
192   (GETVALUE 0)                        ; X
194   L194
194   (PUSH)
195   (CALL1 2)                           ; NEWVAR1
197   (SKIP 1)
199   (JMP L504)
202   L202
202   (GETVALUE&PUSH 0)                   ; X
204   (CALL1 26)                          ; PUTONVLIST
206   (GETVALUE 1)                        ; FLAG
208   (JMPIFNOT L425)
211   (JMP L468)
214   L214
214   (LOAD 9)
215   (CDR)
216   (CAR)
217   (JMPIFCONSP L242)
219   (LOAD 9)
220   (CDR)
221   (CAR&PUSH)
222   (CALLS2&JMPIFNOT 12 L242)           ; INTEGERP
225   (LOAD&PUSH 0)
226   (LOAD 10)
227   (CDR)
228   (CAR&PUSH)
229   (CALLSR&STORE 2 55 0)               ; *
233   (JMPIFNOT L242)
235   (LOAD 9)
236   (CDR)
237   (CDR)
238   (STORE 9)
240   (JMPIF L295)
242   L242
242   (LOAD 9)
243   (CDR)
244   (CAR)
245   (JMPIFATOM L345)
248   (LOAD 9)
249   (CDR)
250   (CAR)
251   (CAR)
252   (CAR&PUSH)
253   (JMPIFNOTEQTO 4 L345)               ; RAT
257   (LOAD 9)
258   (CDR)
259   (CAR)
260   (CDR)
261   (CAR&PUSH)
262   (JMPIFEQTO 3 L345)                  ; 1
266   (LOAD&PUSH 0)
267   (LOAD 10)
268   (CDR)
269   (CAR)
270   (CDR)
271   (CAR&PUSH)
272   (CALLSR&STORE 2 55 0)               ; *
276   (JMPIFNOT L345)
279   (CONST&PUSH 12)                     ; (RAT)
280   (CONST&PUSH 3)                      ; 1
281   (LOAD 11)
282   (CDR)
283   (CAR)
284   (CDR)
285   (CDR)
286   (CAR&PUSH)
287   (LIST&PUSH 3)
289   (LOAD 10)
290   (CDR)
291   (CDR)
292   (CONS)
293   (STORE 9)
295   L295
295   (CONST&PUSH 13)                     ; (MEXPT)
296   (GETVALUE 0)                        ; X
298   (CDR)
299   (CAR&PUSH)
300   (CONST&PUSH 14)                     ; (MTIMES)
301   (LOAD 12)
302   (CONS&PUSH)
303   (CALL1 15)                          ; SIMPLIFY
305   (STORE 11)
307   (PUSH)
308   (LIST 3)
310   (SETVALUE 0)                        ; X
312   L312
312   (LOAD&PUSH 9)
313   (CALLS2&JMPIF 12 L21)               ; INTEGERP
317   (LOAD 9)
318   (JMPIFATOM L345)
320   (LOAD 9)
321   (CAR)
322   (CAR&PUSH)
323   (JMPIFEQTO 4 L73)                   ; RAT
327   (LOAD 9)
328   (CAR)
329   (CAR&PUSH)
330   (JMPIFEQTO 11 L214)                 ; MTIMES
334   (LOAD 9)
335   (CAR)
336   (CAR&PUSH)
337   (JMPIFNOTEQTO 16 L345)              ; MPLUS
340   (GETVALUE 17)                       ; EXPSUMSPLIT
342   (JMPIF L145)
345   L345
345   (GETVALUE 1)                        ; FLAG
347   (JMPIF L421)
350   L350
350   (LOAD&PUSH 0)
351   (JMPIFNOTEQTO 3 L460)               ; 1
355   (GETVALUE 0)                        ; X
357   (JMPIFATOM L460)
360   (GETVALUE 0)                        ; X
362   (CAR)
363   (CAR&PUSH)
364   (JMPIFNOTEQTO 22 L460)              ; MEXPT
368   (GETVALUE&PUSH 0)                   ; X
370   (GETVALUE&PUSH 23)                  ; VARLIST
372   (CALL2&JMPIF 9 L421)                ; MEMALIKE
375   (GETVALUE&PUSH 0)                   ; X
377   (GETVALUE&PUSH 24)                  ; VLIST
379   (CALL2&JMPIF 9 L421)                ; MEMALIKE
382   (GETVALUE 0)                        ; X
384   (JMPIFATOM L202)
387   (GETVALUE 25)                       ; *FNEWVARSW
389   (JMPIFNOT L202)
392   (GETVALUE&PUSH 0)                   ; X
394   (CALL1 27)                          ; LITTLEFR1
396   (SETVALUE 0)                        ; X
398   (CONST&SYMBOL-FUNCTION&PUSH 2)      ; NEWVAR1
400   (GETVALUE 0)                        ; X
402   (CDR&PUSH)
403   (CALLSR 0 24)                       ; MAPC
406   (GETVALUE&PUSH 0)                   ; X
408   (GETVALUE&PUSH 24)                  ; VLIST
410   (CALL2&JMPIF 9 L421)                ; MEMALIKE
413   (GETVALUE&PUSH 0)                   ; X
415   (GETVALUE&PUSH 23)                  ; VARLIST
417   (CALL2&JMPIFNOT 9 L202)             ; MEMALIKE
421   L421
421   (GETVALUE 1)                        ; FLAG
423   (JMPIF L468)
425   L425
425   (NIL)
426   (SKIP 1)
428   (JMP L504)
431   L431
431   (GETVALUE&PUSH 0)                   ; X
433   (GETVALUE&PUSH 28)                  ; GENPAIRS
435   (CALL2 29)                          ; ASSOLIKE
437   (JMPIF1 L502)
439   (GETVALUE&PUSH 0)                   ; X
441   (CALL1 27)                          ; LITTLEFR1
443   (SETVALUE 0)                        ; X
445   (PUSH)
446   (GETVALUE&PUSH 28)                  ; GENPAIRS
448   (CALL2 29)                          ; ASSOLIKE
450   (JMPIF1 L502)
452   (GETVALUE&PUSH 0)                   ; X
454   (CALL1 30)                          ; NEWSYM
456   (SKIP 1)
458   (JMP L504)
460   L460
460   (GETVALUE&PUSH 0)                   ; X
462   (CALL1 2)                           ; NEWVAR1
464   (GETVALUE 1)                        ; FLAG
466   (JMPIFNOT L425)
468   L468
468   (LOAD&PUSH 0)
469   (JMPIFNOTEQTO 3 L491)               ; 1
472   (GETVALUE 0)                        ; X
474   (JMPIFATOM L483)
476   (GETVALUE 0)                        ; X
478   (CAR)
479   (CAR&PUSH)
480   (JMPIFEQTO 22 L431)                 ; MEXPT
483   L483
483   (GETVALUE&PUSH 0)                   ; X
485   (CALL1 21)                          ; PREP1
487   (SKIP 1)
489   (JMP L504)
491   L491
491   (GETVALUE&PUSH 0)                   ; X
493   (CALL1&PUSH 21)                     ; PREP1
495   (LOAD&PUSH 1)
496   (CALL2 31)                          ; RATEXPT
498   (SKIP 1)
500   (JMP L504)
502   L502
502   (SKIP 1)
504   L504
504   (UNBIND 2)
506   (SKIP&RET 4)


Disassembly of function #:|(DEFUN NEWVAR1 (X) ...)-93|
(CONST 0) = NEWVAR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWVAR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWVAR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWVAR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWVAR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWVAR1
8     (SKIP&RET 1)


Disassembly of function NEWVAR1
(CONST 0) = X
(CONST 1) = VARLIST
(CONST 2) = MEMALIKE
(CONST 3) = VLIST
(CONST 4) = PUTONVLIST
(CONST 5) = (MPLUS MTIMES RAT MDIFFERENCE MQUOTIENT MMINUS BIGFLOAT)
(CONST 6) = MEMQ
(CONST 7) = NEWVAR1
(CONST 8) = MEXPT
(CONST 9) = NEWVARMEXPT
(CONST 10) = MRAT
(CONST 11) = *WITHINRATF*
(CONST 12) = TRUNC
(CONST 13) = RATF
(CONST 14) = %%
(CONST 15) = $RATFAC
(CONST 16) = NEWVAR3
(CONST 17) = *FNEWVARSW
(CONST 18) = LITTLEFR1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($RATFAC *WITHINRATF* *FNEWVARSW VLIST VARLIST X)
writes special variable : (X)
107 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 8 L95)                ; NUMBERP
9     (GETVALUE&PUSH 0)                   ; X
11    (GETVALUE&PUSH 1)                   ; VARLIST
13    (CALL2&JMPIF 2 L98)                 ; MEMALIKE
17    (GETVALUE&PUSH 0)                   ; X
19    (GETVALUE&PUSH 3)                   ; VLIST
21    (CALL2&JMPIF 2 L101)                ; MEMALIKE
25    (GETVALUE 0)                        ; X
27    (JMPIFATOM L88)
29    (GETVALUE 0)                        ; X
31    (CAR)
32    (CAR&PUSH)
33    (CONST&PUSH 5)                      ; (MPLUS MTIMES RAT MDIFFERENCE ...)
34    (CALL2&JMPIF 6 L104)                ; MEMQ
38    (GETVALUE 0)                        ; X
40    (CAR)
41    (CAR&PUSH)
42    (JMPIFEQTO 8 L111)                  ; MEXPT
46    (GETVALUE 0)                        ; X
48    (CAR)
49    (CAR&PUSH)
50    (JMPIFEQTO 10 L136)                 ; MRAT
54    (GETVALUE 17)                       ; *FNEWVARSW
56    (JMPIFNOT L88)
58    (GETVALUE&PUSH 0)                   ; X
60    (CALL1 18)                          ; LITTLEFR1
62    (SETVALUE 0)                        ; X
64    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; NEWVAR1
66    (GETVALUE 0)                        ; X
68    (CDR&PUSH)
69    (CALLSR 0 24)                       ; MAPC
72    (GETVALUE&PUSH 0)                   ; X
74    (GETVALUE&PUSH 3)                   ; VLIST
76    (CALL2 2)                           ; MEMALIKE
78    (JMPIF1 L92)
80    (GETVALUE&PUSH 0)                   ; X
82    (GETVALUE&PUSH 1)                   ; VARLIST
84    (CALL2 2)                           ; MEMALIKE
86    (JMPIF1 L92)
88    L88
88    (GETVALUE&PUSH 0)                   ; X
90    (CALL1 4)                           ; PUTONVLIST
92    L92
92    (UNBIND1)
93    (SKIP&RET 2)
95    L95
95    (NIL)
96    (JMP L92)
98    L98
98    (NIL)
99    (JMP L92)
101   L101
101   (NIL)
102   (JMP L92)
104   L104
104   (CONST&SYMBOL-FUNCTION&PUSH 7)      ; NEWVAR1
106   (GETVALUE 0)                        ; X
108   (CDR)
109   (JMP L164)
111   L111
111   (GETVALUE&PUSH 0)                   ; X
113   (GETVALUE 0)                        ; X
115   (CDR)
116   (CDR)
117   (CAR&PUSH)
118   (NIL&PUSH)
119   (CALL 3 9)                          ; NEWVARMEXPT
122   (JMP L92)
124   L124
124   (CONST&PUSH 13)                     ; RATF
125   (CONST 14)                          ; %%
126   (THROW)
127   L127
127   (CONST&PUSH 16)                     ; NEWVAR3
128   (GETVALUE 0)                        ; X
130   (CAR)
131   (CDR)
132   (CDR)
133   (CAR)
134   (JMP L164)
136   L136
136   (GETVALUE 11)                       ; *WITHINRATF*
138   (JMPIFNOT L150)
140   (CONST&PUSH 12)                     ; TRUNC
141   (GETVALUE 0)                        ; X
143   (CAR)
144   (CDR)
145   (CDR)
146   (CDR&PUSH)
147   (CALL2&JMPIF 6 L124)                ; MEMQ
150   L150
150   (GETVALUE 15)                       ; $RATFAC
152   (JMPIF L127)
154   (CONST&SYMBOL-FUNCTION&PUSH 7)      ; NEWVAR1
156   (GETVALUE 0)                        ; X
158   (CAR)
159   (CDR)
160   (CDR)
161   (CAR&PUSH)
162   (CALLS2 72)                         ; REVERSE
164   L164
164   (PUSH)
165   (CALLSR 0 24)                       ; MAPC
168   (JMP L92)


Disassembly of function #:|(DEFUN NEWVAR3 (X) ...)-94|
(CONST 0) = NEWVAR3
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWVAR3>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWVAR3
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWVAR3
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWVAR3>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWVAR3
8     (SKIP&RET 1)


Disassembly of function NEWVAR3
(CONST 0) = X
(CONST 1) = VLIST
(CONST 2) = MEMALIKE
(CONST 3) = VARLIST
(CONST 4) = PUTONVLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST VLIST X)
15 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (GETVALUE&PUSH 1)                   ; VLIST
7     (CALL2 2)                           ; MEMALIKE
9     (JMPIF1 L23)
11    (GETVALUE&PUSH 0)                   ; X
13    (GETVALUE&PUSH 3)                   ; VARLIST
15    (CALL2 2)                           ; MEMALIKE
17    (JMPIF1 L23)
19    (GETVALUE&PUSH 0)                   ; X
21    (CALL1 4)                           ; PUTONVLIST
23    L23
23    (UNBIND1)
24    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FR1 (X VARLIST) ...)-95|
(CONST 0) = FR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FR1
8     (SKIP&RET 1)


Disassembly of function FR1
(CONST 0) = X
(CONST 1) = VARLIST
(CONST 2) = GENVAR
(CONST 3) = $NOREPEAT
(CONST 4) = *RATSIMP*
(CONST 5) = RADLIST
(CONST 6) = VLIST
(CONST 7) = OVARLIST
(CONST 8) = GENPAIRS
(CONST 9) = NEWVAR1
(CONST 10) = FR-ARGS
(CONST 11) = SORTGREAT
(CONST 12) = RATREP*
(CONST 13) = RDIS
(CONST 14) = RADSORT
(CONST 15) = ORDERPOINTER
(CONST 16) = Y
(CONST 17) = RGET
(CONST 18) = $ALGEBRAIC
(CONST 19) = $RATALGDENOM
(CONST 20) = ALGPGET
(CONST 21) = ORMAPC
(CONST 22) = RATSETUP
(CONST 23) = PREP1
(CONST 24) = SIMPLIFY
(CONST 25) = RATSIMP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (OVARLIST $RATALGDENOM $ALGEBRAIC Y GENVAR RADLIST VARLIST *RATSIMP* VLIST X)
writes special variables : (*RATSIMP* X $RATALGDENOM $ALGEBRAIC GENPAIRS VARLIST VLIST OVARLIST)
168 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; VARLIST
6     (NIL)
7     (BIND 2)                            ; GENVAR
9     (NIL)
10    (BIND 3)                            ; $NOREPEAT
12    (NIL)
13    (BIND 4)                            ; *RATSIMP*
15    (NIL)
16    (BIND 5)                            ; RADLIST
18    (NIL)
19    (BIND 6)                            ; VLIST
21    (NIL&PUSH)
22    (NIL)
23    (BIND 7)                            ; OVARLIST
25    (NIL)
26    (BIND 8)                            ; GENPAIRS
28    (GETVALUE&PUSH 0)                   ; X
30    (CALL1 9)                           ; NEWVAR1
32    (CONST&SYMBOL-FUNCTION&PUSH 10)     ; FR-ARGS
34    (GETVALUE&PUSH 6)                   ; VLIST
36    (CALLSR&STORE 0 22 6)               ; MAPCAR
40    (GETVALUE 4)                        ; *RATSIMP*
42    (JMPIFNOT L94)
44    (GETVALUE&PUSH 6)                   ; VLIST
46    (GETVALUE&PUSH 1)                   ; VARLIST
48    (CALLSR 2 35)                       ; NCONC
51    (SETVALUE 7)                        ; OVARLIST
53    (NIL)
54    (SETVALUE 6)                        ; VLIST
56    (CONST&SYMBOL-FUNCTION&PUSH 9)      ; NEWVAR1
58    (LOAD&PUSH 7)
59    (CALLSR 0 24)                       ; MAPC
62    (LOAD&PUSH 6)
63    (GETVALUE&PUSH 1)                   ; VARLIST
65    (CALLSR&STORE 2 35 6)               ; NCONC
69    (GETVALUE&PUSH 6)                   ; VLIST
71    (CALL1&PUSH 11)                     ; SORTGREAT
73    (GETVALUE&PUSH 5)                   ; RADLIST
75    (CALL1&PUSH 14)                     ; RADSORT
77    (GETVALUE&PUSH 1)                   ; VARLIST
79    (CALLSR 3 35)                       ; NCONC
82    (SETVALUE 1)                        ; VARLIST
84    (PUSH)
85    (CALL1 15)                          ; ORDERPOINTER
87    (NIL&PUSH)
88    (GETVALUE&PUSH 1)                   ; VARLIST
90    (GETVALUE&PUSH 2)                   ; GENVAR
92    (JMP L145)
94    L94
94    (GETVALUE&PUSH 6)                   ; VLIST
96    (CALL1&PUSH 11)                     ; SORTGREAT
98    (GETVALUE&PUSH 1)                   ; VARLIST
100   (CALLSR 2 35)                       ; NCONC
103   (SETVALUE 1)                        ; VARLIST
105   (GETVALUE&PUSH 0)                   ; X
107   (CALL1 12)                          ; RATREP*
109   (CDR&PUSH)
110   (CALL1 13)                          ; RDIS
112   (JMP L283)
115   L115
115   (SKIP 2)
117   (JMP L157)
119   L119
119   (LOAD&CAR&PUSH 1)
121   (LOAD 1)
122   (BIND 0)                            ; X
124   (LOAD 3)
125   (BIND 16)                           ; Y
127   (GETVALUE&PUSH 0)                   ; X
129   (GETVALUE&PUSH 16)                  ; Y
131   (CALL1 17)                          ; RGET
133   (CONS)
134   (UNBIND 2)
136   (PUSH)
137   (LOAD&CONS&STORE 4)
139   (SKIP 2)
141   (LOAD&CDR&STORE 1)
143   (LOAD&CDR&STORE 0)
145   L145
145   (LOAD&PUSH 1)
146   (CALLS1&JMPIF 146 L115)             ; ENDP
149   (LOAD&CAR&PUSH 1)
151   (LOAD&PUSH 1)
152   (CALLS1&JMPIFNOT 146 L119)          ; ENDP
155   (SKIP 3)
157   L157
157   (LOAD&PUSH 0)
158   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
160   (SKIP 1)
162   (SETVALUE 8)                        ; GENPAIRS
164   (GETVALUE 18)                       ; $ALGEBRAIC
166   (BIND 18)                           ; $ALGEBRAIC
168   (GETVALUE 19)                       ; $RATALGDENOM
170   (BIND 19)                           ; $RATALGDENOM
172   (NIL)
173   (BIND 5)                            ; RADLIST
175   (GETVALUE 18)                       ; $ALGEBRAIC
177   (JMPIF L192)
179   (CONST&SYMBOL-FUNCTION&PUSH 20)     ; ALGPGET
181   (GETVALUE&PUSH 1)                   ; VARLIST
183   (CALL2&JMPIFNOT 21 L192)            ; ORMAPC
186   (T)
187   (SETVALUE 18)                       ; $ALGEBRAIC
189   (NIL)
190   (SETVALUE 19)                       ; $RATALGDENOM
192   L192
192   (GETVALUE&PUSH 1)                   ; VARLIST
194   (GETVALUE&PUSH 2)                   ; GENVAR
196   (CALL2 22)                          ; RATSETUP
198   (NIL&PUSH)
199   (GETVALUE&PUSH 7)                   ; OVARLIST
201   (LOAD&PUSH 17)
202   (JMP L234)
204   L204
204   (SKIP 2)
206   (JMP L246)
208   L208
208   (LOAD&CAR&PUSH 1)
210   (LOAD 1)
211   (BIND 0)                            ; X
213   (LOAD 3)
214   (BIND 16)                           ; Y
216   (GETVALUE&PUSH 0)                   ; X
218   (GETVALUE&PUSH 16)                  ; Y
220   (CALL1 23)                          ; PREP1
222   (CONS)
223   (UNBIND 2)
225   (PUSH)
226   (LOAD&CONS&STORE 4)
228   (SKIP 2)
230   (LOAD&CDR&STORE 1)
232   (LOAD&CDR&STORE 0)
234   L234
234   (LOAD&PUSH 1)
235   (CALLS1&JMPIF 146 L204)             ; ENDP
238   (LOAD&CAR&PUSH 1)
240   (LOAD&PUSH 1)
241   (CALLS1&JMPIFNOT 146 L208)          ; ENDP
244   (SKIP 3)
246   L246
246   (LOAD&PUSH 0)
247   (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
249   (SKIP 1)
251   (SETVALUE 8)                        ; GENPAIRS
253   (GETVALUE&PUSH 0)                   ; X
255   (CALL1&PUSH 23)                     ; PREP1
257   (CALL1 13)                          ; RDIS
259   (SETVALUE 0)                        ; X
261   (GETVALUE 5)                        ; RADLIST
263   (JMPIFNOT L279)
265   (NIL)
266   (SETVALUE 4)                        ; *RATSIMP*
268   (GETVALUE&PUSH 0)                   ; X
270   (CALL1&PUSH 24)                     ; SIMPLIFY
272   (PUSH-NIL 2)
274   (CALL 3 25)                         ; RATSIMP
277   (SETVALUE 0)                        ; X
279   L279
279   (UNBIND 3)
281   (GETVALUE 0)                        ; X
283   L283
283   (UNBIND 2)
285   (SKIP 1)
287   (UNBIND 7)
289   (SKIP&RET 3)


Disassembly of function #:|(DEFUN RATSIMP (X VARLIST GENVAR) ...)-96|
(CONST 0) = RATSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATSIMP
8     (SKIP&RET 1)


Disassembly of function RATSIMP
(CONST 0) = X
(CONST 1) = VARLIST
(CONST 2) = GENVAR
(CONST 3) = RATF
(CONST 4) = $RATDISREP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
11 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; VARLIST
6     (LOAD 7)
7     (BIND 2)                            ; GENVAR
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1&PUSH 3)                      ; RATF
13    (CALL1 4)                           ; $RATDISREP
15    (UNBIND 3)
17    (SKIP&RET 4)


Disassembly of function #:|(DEFUN LITTLEFR1 (X) ...)-97|
(CONST 0) = LITTLEFR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LITTLEFR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LITTLEFR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LITTLEFR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LITTLEFR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LITTLEFR1
8     (SKIP&RET 1)


Disassembly of function LITTLEFR1
(CONST 0) = X
(CONST 1) = SIMP
(CONST 2) = EQ
(CONST 3) = MAPFR1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
16 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; SIMP
4     (GETVALUE 0)                        ; X
6     (CAR&PUSH)
7     (PUSH-UNBOUND 7)
9     (CONST 2)                           ; EQ
10    (STORE 2)
11    (CALLS2&PUSH 78)                    ; REMOVE
13    (GETVALUE 0)                        ; X
15    (CDR&PUSH)
16    (NIL&PUSH)
17    (CALL2 3)                           ; MAPFR1
19    (CONS)
20    (UNBIND1)
21    (SKIP&RET 2)


Disassembly of function #:|(DEFMVAR FR-FACTOR NIL)-98-1|
(CONST 0) = FR-FACTOR
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; FR-FACTOR
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; FR-FACTOR
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR FR-FACTOR NIL)-98-2|
(CONST 0) = (SPECIAL FR-FACTOR)
(CONST 1) = FR-FACTOR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL FR-FACTOR)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; FR-FACTOR
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; FR-FACTOR
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; FR-FACTOR
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN FR-ARGS (X) ...)-99|
(CONST 0) = FR-ARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FR-ARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FR-ARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FR-ARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FR-ARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FR-ARGS
8     (SKIP&RET 1)


Disassembly of function FR-ARGS
(CONST 0) = X
(CONST 1) = $%I
(CONST 2) = *RATSIMP*
(CONST 3) = SIMP
(CONST 4) = EQ
(CONST 5) = RADFUNP
(CONST 6) = %LOG
(CONST 7) = FR-FACTOR
(CONST 8) = FACTOR
(CONST 9) = VARLIST
(CONST 10) = FR1
(CONST 11) = MODULUS
(CONST 12) = MAPFR1
(CONST 13) = ZP
(CONST 14) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (FR-FACTOR VARLIST X)
writes special variable : (*RATSIMP*)
65 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (JMPIFATOM L59)
7     (T)
8     (SETVALUE 2)                        ; *RATSIMP*
10    (CONST&PUSH 3)                      ; SIMP
11    (GETVALUE 0)                        ; X
13    (CAR&PUSH)
14    (PUSH-UNBOUND 7)
16    (CONST 4)                           ; EQ
17    (STORE 2)
18    (CALLS2&PUSH 78)                    ; REMOVE
20    (GETVALUE&PUSH 0)                   ; X
22    (NIL&PUSH)
23    (CALL2&JMPIF 5 L76)                 ; RADFUNP
26    (GETVALUE 0)                        ; X
28    (CAR)
29    (CAR&PUSH)
30    (JMPIFEQTO 6 L76)                   ; %LOG
33    (NIL)
34    (BIND 11)                           ; MODULUS
36    (GETVALUE 0)                        ; X
38    (CDR&PUSH)
39    (GETVALUE&PUSH 9)                   ; VARLIST
41    (CALL2 12)                          ; MAPFR1
43    (UNBIND1)
44    L44
44    (CONS&PUSH)
45    (CALL1&PUSH 13)                     ; ZP
47    (CALL1 14)                          ; SIMPLIFY
49    L49
49    (UNBIND1)
50    (SKIP&RET 2)
52    L52
52    (T)
53    (SETVALUE 2)                        ; *RATSIMP*
55    (GETVALUE 0)                        ; X
57    (JMP L49)
59    L59
59    (GETVALUE&PUSH 0)                   ; X
61    (JMPIFEQTO 1 L52)                   ; $%I
64    (GETVALUE 0)                        ; X
66    (JMP L49)
68    L68
68    (GETVALUE 0)                        ; X
70    (CDR)
71    (CAR&PUSH)
72    (CALL1 8)                           ; FACTOR
74    (JMP L88)
76    L76
76    (GETVALUE 7)                        ; FR-FACTOR
78    (JMPIF L68)
80    (GETVALUE 0)                        ; X
82    (CDR)
83    (CAR&PUSH)
84    (GETVALUE&PUSH 9)                   ; VARLIST
86    (CALL2 10)                          ; FR1
88    L88
88    (PUSH)
89    (GETVALUE 0)                        ; X
91    (CDR)
92    (CDR)
93    (CONS)
94    (JMP L44)


Disassembly of function #:|(DEFUN ZP (X) ...)-100|
(CONST 0) = ZP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZP
8     (SKIP&RET 1)


Disassembly of function ZP
(CONST 0) = X
(CONST 1) = MEXPTP
(CONST 2) = VARLIST
(CONST 3) = *RATSIMP*
(CONST 4) = $RATEXPAND
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST X)
33 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIFNOT 1 L15)              ; MEXPTP
8     (GETVALUE 0)                        ; X
10    (CDR)
11    (CDR)
12    (CAR)
13    (JMPIFCONSP L20)
15    L15
15    (GETVALUE 0)                        ; X
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)
20    L20
20    (GETVALUE 0)                        ; X
22    (CAR&PUSH)
23    (GETVALUE 0)                        ; X
25    (CDR)
26    (CAR&PUSH)
27    (GETVALUE 2)                        ; VARLIST
29    (BIND 2)                            ; VARLIST
31    (NIL)
32    (BIND 3)                            ; *RATSIMP*
34    (GETVALUE 0)                        ; X
36    (CDR)
37    (CDR)
38    (CAR&PUSH)
39    (CALL1 4)                           ; $RATEXPAND
41    (UNBIND 2)
43    (PUSH)
44    (LIST 3)
46    (JMP L17)


Disassembly of function #:|(DEFUN NEWSYM (E) ...)-101|
(CONST 0) = NEWSYM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWSYM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWSYM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWSYM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWSYM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWSYM
8     (SKIP&RET 1)


Disassembly of function NEWSYM
(CONST 0) = P
(CONST 1) = GENPAIRS
(CONST 2) = ASSOLIKE
(CONST 3) = GENSYM-READABLE
(CONST 4) = DISREP
(CONST 5) = PUTPROP
(CONST 6) = VARLIST
(CONST 7) = RGET
(CONST 8) = GENVAR
(CONST 9) = 1
(CONST 10) = $ALGEBRAIC
(CONST 11) = ALGPGET
(CONST 12) = ALGORDSET
(CONST 13) = TELLRAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P $ALGEBRAIC GENVAR VARLIST GENPAIRS)
writes special variables : (P GENVAR GENPAIRS VARLIST)
66 byte-code instructions:
0     (NIL&PUSH)
1     (NIL)
2     (BIND 0)                            ; P
4     (LOAD&PUSH 5)
5     (GETVALUE&PUSH 1)                   ; GENPAIRS
7     (CALL2 2)                           ; ASSOLIKE
9     (STORE 3)
10    (JMPIF L77)
13    (LOAD&PUSH 5)
14    (CALL1 3)                           ; GENSYM-READABLE
16    (STORE 3)
17    (PUSH)
18    (LOAD&PUSH 6)
19    (CONST&PUSH 4)                      ; DISREP
20    (CALL 3 5)                          ; PUTPROP
23    (LOAD&PUSH 5)
24    (GETVALUE 6)                        ; VARLIST
26    (CONS)
27    (SETVALUE 6)                        ; VARLIST
29    (LOAD&PUSH 5)
30    (LOAD&PUSH 4)
31    (CALL1 7)                           ; RGET
33    (CONS&PUSH)
34    (GETVALUE 1)                        ; GENPAIRS
36    (CONS)
37    (SETVALUE 1)                        ; GENPAIRS
39    (LOAD&PUSH 3)
40    (GETVALUE 8)                        ; GENVAR
42    (JMPIF L80)
44    (CONST 9)                           ; 1
45    L45
45    (PUSH)
46    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
48    (LOAD&PUSH 3)
49    (GETVALUE 8)                        ; GENVAR
51    (CONS)
52    (SETVALUE 8)                        ; GENVAR
54    (GETVALUE 10)                       ; $ALGEBRAIC
56    (JMPIF L87)
58    (SETVALUE 0)                        ; P
60    (JMPIFNOT L74)
62    L62
62    (PUSH)
63    (GETVALUE&PUSH 8)                   ; GENVAR
65    (CALL2 12)                          ; ALGORDSET
67    (LOAD&PUSH 3)
68    (GETVALUE&PUSH 0)                   ; P
70    (CONST&PUSH 13)                     ; TELLRAT
71    (CALL 3 5)                          ; PUTPROP
74    L74
74    (LOAD&PUSH 3)
75    (CALL1 7)                           ; RGET
77    L77
77    (UNBIND1)
78    (SKIP&RET 3)
80    L80
80    (CAR&PUSH)
81    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
83    (CALLS2 151)                        ; 1-
85    (JMP L45)
87    L87
87    (LOAD&PUSH 5)
88    (CALL1 11)                          ; ALGPGET
90    (SETVALUE 0)                        ; P
92    (JMPIFNOT L74)
94    (JMP L62)


Disassembly of function #:|(DEFMVAR $RATPRINT T)-102-1|
(CONST 0) = $RATPRINT
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATPRINT
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RATPRINT
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATPRINT T)-102-2|
(CONST 0) = (SPECIAL $RATPRINT)
(CONST 1) = $RATPRINT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RATPRINT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RATPRINT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RATPRINT
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $RATPRINT
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATEPSILON 2.0E-8)-103-1|
(CONST 0) = $RATEPSILON
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = 2.0E-8
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATEPSILON
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RATEPSILON
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; 2.0E-8
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATEPSILON 2.0E-8)-103-2|
(CONST 0) = (SPECIAL $RATEPSILON)
(CONST 1) = $RATEPSILON
(CONST 2) = 2.0E-8
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RATEPSILON)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RATEPSILON
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RATEPSILON
8     (CONST&PUSH 2)                      ; 2.0E-8
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $RATEPSILON
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN MAXIMA-RATIONALIZE (X) ...)-104|
(CONST 0) = MAXIMA-RATIONALIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMA-RATIONALIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-RATIONALIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-RATIONALIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMA-RATIONALIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMA-RATIONALIZE
8     (SKIP&RET 1)


Disassembly of function MAXIMA-RATIONALIZE
(CONST 0) = X
(CONST 1) = 0.0
(CONST 2) = -1.0
(CONST 3) = RATION1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
27 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIFNOT 15 L22)            ; FLOATP
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST&PUSH 1)                      ; 0.0
11    (CALLSR&JMPIF 1 47 L26)             ; <
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1 3)                           ; RATION1
19    L19
19    (UNBIND1)
20    (SKIP&RET 2)
22    L22
22    (GETVALUE 0)                        ; X
24    (JMP L19)
26    L26
26    (CONST&PUSH 2)                      ; -1.0
27    (GETVALUE&PUSH 0)                   ; X
29    (CALLSR&PUSH 2 55)                  ; *
32    (CALL1 3)                           ; RATION1
34    (SETVALUE 0)                        ; X
36    (PUSH)
37    (GETVALUE 0)                        ; X
39    (CAR&PUSH)
40    (CALLSR&PUSH 0 54)                  ; -
43    (CALLS1 168)                        ; RPLACA
45    (JMP L19)


Disassembly of function #:|(DEFUN RATION1 (X) ...)-105|
(CONST 0) = RATION1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATION1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATION1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATION1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATION1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATION1
8     (SKIP&RET 1)


Disassembly of function RATION1
(CONST 0) = X
(CONST 1) = $RATEPSILON
(CONST 2) = $FLOAT
(CONST 3) = 0
(CONST 4) = 1
(CONST 5) = Y
(CONST 6) = FIX
(CONST 7) = NUM
(CONST 8) = 1.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (NUM Y X $RATEPSILON)
writes special variables : (NUM Y)
90 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 1)                   ; $RATEPSILON
5     (CALLS2&JMPIFNOT 15 L35)            ; FLOATP
8     (GETVALUE 1)                        ; $RATEPSILON
10    L10
10    (PUSH)
11    (GETVALUE&PUSH 0)                   ; X
13    (CALLS2&JMPIF 145 L41)              ; ZEROP
16    (NIL)
17    (BIND 5)                            ; Y
19    (NIL&PUSH)
20    (GETVALUE&PUSH 0)                   ; X
22    (GETVALUE&PUSH 0)                   ; X
24    (CALL1 6)                           ; FIX
26    (STORE 1)
27    (BIND 7)                            ; NUM
29    (CONST&PUSH 4)                      ; 1
30    (CONST&PUSH 4)                      ; 1
31    (CONST&PUSH 3)                      ; 0
32    (JMP L102)
35    L35
35    (GETVALUE&PUSH 1)                   ; $RATEPSILON
37    (CALL1 2)                           ; $FLOAT
39    (JMP L10)
41    L41
41    (CONST&PUSH 3)                      ; 0
42    (CONST 4)                           ; 1
43    (CONS)
44    (SKIP 1)
46    (JMP L150)
49    L49
49    (CONST&PUSH 8)                      ; 1.0
50    (LOAD&PUSH 7)
51    (LOAD&PUSH 9)
52    (GETVALUE&PUSH 0)                   ; X
54    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
56    (CALLSR&PUSH 1 54)                  ; -
59    (CALLSR 1 56)                       ; /
62    (SETVALUE 5)                        ; Y
64    (PUSH)
65    (GETVALUE&PUSH 5)                   ; Y
67    (CALL1 6)                           ; FIX
69    (STORE 8)
71    (PUSH)
72    (GETVALUE&PUSH 7)                   ; NUM
74    (CALLSR&PUSH 2 55)                  ; *
77    (LOAD&PUSH 3)
78    (CALLSR&PUSH 2 53)                  ; +
81    (LOAD&PUSH 9)
82    (LOAD&PUSH 5)
83    (CALLSR&PUSH 2 55)                  ; *
86    (LOAD&PUSH 3)
87    (CALLSR&PUSH 2 53)                  ; +
90    (GETVALUE 7)                        ; NUM
92    (STORE 4)
93    (LOAD 5)
94    (STORE 3)
95    (POP&STORE 4)
97    (POP)
98    (SETVALUE 7)                        ; NUM
100   (POP&STORE 6)
102   L102
102   (LOAD&PUSH 2)
103   (CALLS2&JMPIF 145 L49)              ; ZEROP
106   (GETVALUE&PUSH 0)                   ; X
108   (GETVALUE&PUSH 7)                   ; NUM
110   (GETVALUE&PUSH 0)                   ; X
112   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
114   (LOAD&PUSH 4)
115   (GETVALUE&PUSH 0)                   ; X
117   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
119   (CALLSR&PUSH 1 56)                  ; /
122   (CALLSR&PUSH 1 54)                  ; -
125   (GETVALUE&PUSH 0)                   ; X
127   (CALLSR&PUSH 1 56)                  ; /
130   (CALLS2&PUSH 158)                   ; ABS
132   (LOAD&PUSH 12)
133   (CALLSR&JMPIF 1 48 L49)             ; >
138   (GETVALUE&PUSH 7)                   ; NUM
140   (LOAD 3)
141   (CONS)
142   (SKIP 3)
144   (UNBIND1)
145   (SKIP 2)
147   (UNBIND1)
148   (SKIP 1)
150   L150
150   (UNBIND1)
151   (SKIP&RET 2)


Disassembly of function #:|(DEFUN PREPFLOAT (F) ...)-106|
(CONST 0) = PREPFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PREPFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PREPFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PREPFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PREPFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PREPFLOAT
8     (SKIP&RET 1)


Disassembly of function PREPFLOAT
(CONST 0) = 1.0E-37
(CONST 1) = 0.0
(CONST 2) = MODULUS
(CONST 3) = "Floating point meaningless unless MODULUS = FALSE"
(CONST 4) = MERROR
(CONST 5) = $RATPRINT
(CONST 6) = "~&RAT replaced ~A by"
(CONST 7) = MTELL
(CONST 8) = MAXIMA-RATIONALIZE
(CONST 9) = " ~A//~A = ~A~%"
(CONST 10) = FPCOFRAT1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($RATPRINT MODULUS)
37 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 158)                   ; ABS
3     (CONST&PUSH 0)                      ; 1.0E-37
4     (CALLSR&JMPIF 1 47 L45)             ; <
8     (GETVALUE 2)                        ; MODULUS
10    (JMPIF L51)
12    L12
12    (GETVALUE 5)                        ; $RATPRINT
14    (JMPIFNOT L20)
16    (CONST&PUSH 6)                      ; "~&RAT replaced ~A by"
17    (LOAD&PUSH 2)
18    (CALL2 7)                           ; MTELL
20    L20
20    (LOAD&PUSH 1)
21    (CALL1 8)                           ; MAXIMA-RATIONALIZE
23    (STORE 1)
24    (GETVALUE 5)                        ; $RATPRINT
26    (JMPIFNOT L42)
28    (CONST&PUSH 9)                      ; " ~A//~A = ~A~%"
29    (LOAD&CAR&PUSH 2)
31    (LOAD&CDR&PUSH 3)
33    (LOAD&CAR&PUSH 4)
35    (LOAD&CDR&PUSH 5)
37    (CALL2&PUSH 10)                     ; FPCOFRAT1
39    (CALL 4 7)                          ; MTELL
42    L42
42    (LOAD 1)
43    (SKIP&RET 2)
45    L45
45    (CONST 1)                           ; 0.0
46    (STORE 1)
47    (GETVALUE 2)                        ; MODULUS
49    (JMPIFNOT L12)
51    L51
51    (CONST&PUSH 3)                      ; "Floating point meaningless unless MODULUS = FALSE"
52    (CALL1 4)                           ; MERROR
54    (JMP L20)


Disassembly of function #:|(DEFUN PDISREP (P) ...)-107|
(CONST 0) = PDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDISREP
8     (SKIP&RET 1)


Disassembly of function PDISREP
(CONST 0) = P
(CONST 1) = DISREP
(CONST 2) = PDISREP2
(CONST 3) = PDISREP+
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (JMPIFATOM L25)
7     (GETVALUE 0)                        ; P
9     (CDR&PUSH)
10    (GETVALUE 0)                        ; P
12    (CAR&PUSH)
13    (CONST&PUSH 1)                      ; DISREP
14    (PUSH-UNBOUND 1)
16    (CALLS2&PUSH 132)                   ; GET
18    (CALL2&PUSH 2)                      ; PDISREP2
20    (CALL1 3)                           ; PDISREP+
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)
25    L25
25    (GETVALUE 0)                        ; P
27    (JMP L22)


Disassembly of function #:|(DEFUN PDISREP! (N VAR) ...)-108|
(CONST 0) = PDISREP!
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDISREP!>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDISREP!
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDISREP!
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDISREP!>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDISREP!
8     (SKIP&RET 1)


Disassembly of function PDISREP!
(CONST 0) = VAR
(CONST 1) = 1
(CONST 2) = MTIMES
(CONST 3) = MPLUS
(CONST 4) = (MEXPT RATSIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAR)
36 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; VAR
3     (LOAD&PUSH 5)
4     (CALLS2&JMPIF 145 L20)              ; ZEROP
7     (LOAD&PUSH 5)
8     (JMPIFEQTO 1 L33)                   ; 1
11    (CONST&PUSH 4)                      ; (MEXPT RATSIMP)
12    (GETVALUE&PUSH 0)                   ; VAR
14    (LOAD&PUSH 7)
15    (LIST 3)
17    L17
17    (UNBIND1)
18    (SKIP&RET 3)
20    L20
20    (CONST 1)                           ; 1
21    (JMP L17)
23    L23
23    (GETVALUE 0)                        ; VAR
25    (JMP L17)
27    L27
27    (GETVALUE&PUSH 0)                   ; VAR
29    (CALLS1 158)                        ; COPY-LIST
31    (JMP L17)
33    L33
33    (GETVALUE 0)                        ; VAR
35    (JMPIFATOM L23)
37    (GETVALUE 0)                        ; VAR
39    (CAR)
40    (CAR&PUSH)
41    (JMPIFEQTO 2 L27)                   ; MTIMES
44    (GETVALUE 0)                        ; VAR
46    (CAR)
47    (CAR&PUSH)
48    (JMPIFEQTO 3 L27)                   ; MPLUS
51    (GETVALUE 0)                        ; VAR
53    (JMP L17)


Disassembly of function #:|(DEFUN PDISREP+ (P) ...)-109|
(CONST 0) = PDISREP+
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDISREP+>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDISREP+
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDISREP+
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDISREP+>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDISREP+
8     (SKIP&RET 1)


Disassembly of function PDISREP+
(CONST 0) = P
(CONST 1) = MPLUSP
(CONST 2) = (MPLUS RATSIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (P)
34 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; P
3     (GETVALUE 0)                        ; P
5     (CDR)
6     (JMPIFNOT L42)
8     (GETVALUE&PUSH 0)                   ; P
10    (PUSH-UNBOUND 1)
12    (CALLS1&PUSH 156)                   ; LAST
14    (LOAD&CAR&PUSH 0)
16    (CALL1&JMPIFNOT 1 L33)              ; MPLUSP
19    (LOAD&PUSH 0)
20    (LOAD 1)
21    (CAR)
22    (CDR)
23    (CDR&PUSH)
24    (CALLS1 170)                        ; RPLACD
26    (LOAD&PUSH 0)
27    (LOAD 1)
28    (CAR)
29    (CDR)
30    (CAR&PUSH)
31    (CALLS1 168)                        ; RPLACA
33    L33
33    (CONST&PUSH 2)                      ; (MPLUS RATSIMP)
34    (GETVALUE 0)                        ; P
36    (CONS)
37    (SKIP 1)
39    L39
39    (UNBIND1)
40    (SKIP&RET 2)
42    L42
42    (GETVALUE 0)                        ; P
44    (CAR)
45    (JMP L39)


Disassembly of function #:|(DEFUN PDISREP* (A B) ...)-110|
(CONST 0) = PDISREP*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDISREP*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDISREP*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDISREP*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDISREP*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDISREP*
8     (SKIP&RET 1)


Disassembly of function PDISREP*
(CONST 0) = B
(CONST 1) = 1
(CONST 2) = (MTIMES RATSIMP)
(CONST 3) = PDISREP*CHK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (LOAD&PUSH 5)
4     (JMPIFEQTO 1 L27)                   ; 1
7     (GETVALUE&PUSH 0)                   ; B
9     (JMPIFEQTO 1 L31)                   ; 1
12    (CONST&PUSH 2)                      ; (MTIMES RATSIMP)
13    (LOAD&PUSH 6)
14    (CALL1&PUSH 3)                      ; PDISREP*CHK
16    (GETVALUE&PUSH 0)                   ; B
18    (CALL1&PUSH 3)                      ; PDISREP*CHK
20    (CALLSR 2 35)                       ; NCONC
23    (CONS)
24    L24
24    (UNBIND1)
25    (SKIP&RET 3)
27    L27
27    (GETVALUE 0)                        ; B
29    (JMP L24)
31    L31
31    (LOAD 5)
32    (JMP L24)


Disassembly of function #:|(DEFUN PDISREP*CHK (A) ...)-111|
(CONST 0) = PDISREP*CHK
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDISREP*CHK>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDISREP*CHK
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDISREP*CHK
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDISREP*CHK>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDISREP*CHK
8     (SKIP&RET 1)


Disassembly of function PDISREP*CHK
(CONST 0) = MTIMESP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIF 0 L9)                  ; MTIMESP
4     (LOAD&PUSH 1)
5     (NIL)
6     (CONS)
7     (SKIP&RET 2)
9     L9
9     (LOAD 1)
10    (CDR)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN PDISREP2 (P VAR) ...)-112|
(CONST 0) = PDISREP2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDISREP2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDISREP2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDISREP2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDISREP2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDISREP2
8     (SKIP&RET 1)


Disassembly of function PDISREP2
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = $RATEXPAND
(CONST 3) = PDISREP2EXPAND
(CONST 4) = L
(CONST 5) = PDISREP
(CONST 6) = PDISREP!
(CONST 7) = PDISREP*
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L VAR $RATEXPAND P)
writes special variables : (L P)
49 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE 0)                        ; P
8     (JMPIFNOT L66)
10    (GETVALUE 2)                        ; $RATEXPAND
12    (JMPIF L69)
14    (NIL)
15    (BIND 4)                            ; L
17    (GETVALUE 0)                        ; P
19    (BIND 0)                            ; P
21    (GETVALUE 0)                        ; P
23    (JMPIFNOT L56)
25    L25
25    (GETVALUE 0)                        ; P
27    (CDR)
28    (CAR&PUSH)
29    (CALL1&PUSH 5)                      ; PDISREP
31    (GETVALUE 0)                        ; P
33    (CAR&PUSH)
34    (GETVALUE&PUSH 1)                   ; VAR
36    (CALL2&PUSH 6)                      ; PDISREP!
38    (CALL2&PUSH 7)                      ; PDISREP*
40    (GETVALUE 4)                        ; L
42    (CONS&PUSH)
43    (GETVALUE 0)                        ; P
45    (CDR)
46    (CDR)
47    (SETVALUE 0)                        ; P
49    (POP)
50    (SETVALUE 4)                        ; L
52    (GETVALUE 0)                        ; P
54    (JMPIF L25)
56    L56
56    (GETVALUE&PUSH 4)                   ; L
58    (CALLS2 73)                         ; NREVERSE
60    (UNBIND 2)
62    L62
62    (UNBIND 2)
64    (SKIP&RET 3)
66    L66
66    (NIL)
67    (JMP L62)
69    L69
69    (GETVALUE&PUSH 0)                   ; P
71    (GETVALUE&PUSH 1)                   ; VAR
73    (CALL2 3)                           ; PDISREP2EXPAND
75    (JMP L62)


Disassembly of function #:|(DEFMVAR $RATEXPAND NIL)-113-1|
(CONST 0) = $RATEXPAND
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATEXPAND
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RATEXPAND
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATEXPAND NIL)-113-2|
(CONST 0) = (SPECIAL $RATEXPAND)
(CONST 1) = $RATEXPAND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RATEXPAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RATEXPAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RATEXPAND
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $RATEXPAND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $RATEXPAND (X) ...)-114|
(CONST 0) = $RATEXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATEXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATEXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATEXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATEXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATEXPAND
8     (SKIP&RET 1)


Disassembly of function $RATEXPAND
(CONST 0) = X
(CONST 1) = MBAGP
(CONST 2) = $RATEXPAND
(CONST 3) = $RATFAC
(CONST 4) = RATF
(CONST 5) = RATDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
24 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIF 1 L25)                 ; MBAGP
8     (T)
9     (BIND 2)                            ; $RATEXPAND
11    (NIL)
12    (BIND 3)                            ; $RATFAC
14    (GETVALUE&PUSH 0)                   ; X
16    (CALL1&PUSH 4)                      ; RATF
18    (CALL1 5)                           ; RATDISREP
20    (UNBIND 2)
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)
25    L25
25    (GETVALUE 0)                        ; X
27    (CAR&PUSH)
28    (CONST&PUSH 2)                      ; $RATEXPAND
29    (GETVALUE 0)                        ; X
31    (CDR&PUSH)
32    (CALLSR 0 22)                       ; MAPCAR
35    (CONS)
36    (JMP L22)


Disassembly of function #:|(DEFUN PDISREP*EXPAND (A B) ...)-115|
(CONST 0) = PDISREP*EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDISREP*EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDISREP*EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDISREP*EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDISREP*EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDISREP*EXPAND
8     (SKIP&RET 1)


Disassembly of function PDISREP*EXPAND
(CONST 0) = B
(CONST 1) = 1
(CONST 2) = MPLUS
(CONST 3) = (MTIMES RATSIMP)
(CONST 4) = PDISREP*CHK
(CONST 5) = (MTIMES RATSIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
63 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (LOAD&PUSH 5)
4     (JMPIFEQTO 1 L38)                   ; 1
7     (GETVALUE&PUSH 0)                   ; B
9     (JMPIFEQTO 1 L42)                   ; 1
12    (LOAD 5)
13    (JMPIFATOM L21)
15    (LOAD 5)
16    (CAR)
17    (CAR&PUSH)
18    (JMPIFEQTO 2 L45)                   ; MPLUS
21    L21
21    (CONST&PUSH 3)                      ; (MTIMES RATSIMP)
22    (LOAD&PUSH 6)
23    (CALL1&PUSH 4)                      ; PDISREP*CHK
25    (GETVALUE&PUSH 0)                   ; B
27    (CALL1&PUSH 4)                      ; PDISREP*CHK
29    (CALLSR 2 35)                       ; NCONC
32    (CONS)
33    L33
33    (PUSH)
34    (LIST 1)
36    (JMP L90)
38    L38
38    (GETVALUE 0)                        ; B
40    (JMP L33)
42    L42
42    (LOAD 5)
43    (JMP L33)
45    L45
45    (NIL&PUSH)
46    (LOAD&CDR&PUSH 6)
48    (JMP L79)
50    L50
50    (GETVALUE 0)                        ; B
52    (JMP L72)
54    L54
54    (LOAD&CAR&PUSH 0)
56    (LOAD&PUSH 0)
57    (JMPIFEQTO 1 L50)                   ; 1
60    (CONST&PUSH 5)                      ; (MTIMES RATSIMP)
61    (LOAD&PUSH 1)
62    (CALL1&PUSH 4)                      ; PDISREP*CHK
64    (GETVALUE&PUSH 0)                   ; B
66    (CALL1&PUSH 4)                      ; PDISREP*CHK
68    (CALLSR 2 35)                       ; NCONC
71    (CONS)
72    L72
72    (PUSH)
73    (LOAD&CONS&STORE 2)
75    (SKIP 1)
77    (LOAD&CDR&STORE 0)
79    L79
79    (LOAD&PUSH 0)
80    (CALLS1&JMPIFNOT 146 L54)           ; ENDP
83    (SKIP 1)
85    (LOAD&PUSH 0)
86    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
88    (SKIP 1)
90    L90
90    (UNBIND1)
91    (SKIP&RET 3)


Disassembly of function #:|(DEFUN PDISREP2EXPAND (P VAR) ...)-116|
(CONST 0) = PDISREP2EXPAND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PDISREP2EXPAND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PDISREP2EXPAND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PDISREP2EXPAND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PDISREP2EXPAND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PDISREP2EXPAND
8     (SKIP&RET 1)


Disassembly of function PDISREP2EXPAND
(CONST 0) = P
(CONST 1) = VAR
(CONST 2) = PDISREP
(CONST 3) = PDISREP!
(CONST 4) = PDISREP*EXPAND
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR P)
28 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; P
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE 0)                        ; P
8     (JMPIFNOT L40)
10    (GETVALUE 0)                        ; P
12    (CDR)
13    (CAR&PUSH)
14    (CALL1&PUSH 2)                      ; PDISREP
16    (GETVALUE 0)                        ; P
18    (CAR&PUSH)
19    (GETVALUE&PUSH 1)                   ; VAR
21    (CALL2&PUSH 3)                      ; PDISREP!
23    (CALL2&PUSH 4)                      ; PDISREP*EXPAND
25    (GETVALUE 0)                        ; P
27    (CDR)
28    (CDR&PUSH)
29    (GETVALUE&PUSH 1)                   ; VAR
31    (JSR&PUSH L0)
33    (CALLSR 2 35)                       ; NCONC
36    L36
36    (UNBIND 2)
38    (SKIP&RET 3)
40    L40
40    (NIL)
41    (JMP L36)


Disassembly of function #:|(DEFMVAR $RATDENOMDIVIDE T)-117-1|
(CONST 0) = $RATDENOMDIVIDE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATDENOMDIVIDE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $RATDENOMDIVIDE
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $RATDENOMDIVIDE T)-117-2|
(CONST 0) = (SPECIAL $RATDENOMDIVIDE)
(CONST 1) = $RATDENOMDIVIDE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $RATDENOMDIVIDE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $RATDENOMDIVIDE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $RATDENOMDIVIDE
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $RATDENOMDIVIDE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $RATDISREP (X) ...)-118|
(CONST 0) = $RATDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $RATDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RATDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $RATDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $RATDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $RATDISREP
8     (SKIP&RET 1)


Disassembly of function $RATDISREP
(CONST 0) = X
(CONST 1) = $RATP
(CONST 2) = RATDISREPD
(CONST 3) = TRUNC
(CONST 4) = MEMQ
(CONST 5) = 1
(CONST 6) = DELQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
32 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIFNOT 1 L29)              ; $RATP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALL1 2)                           ; RATDISREPD
12    (SETVALUE 0)                        ; X
14    (JMPIFATOM L24)
16    (CONST&PUSH 3)                      ; TRUNC
17    (GETVALUE 0)                        ; X
19    (CAR)
20    (CDR&PUSH)
21    (CALL2&JMPIF 4 L33)                 ; MEMQ
24    L24
24    (GETVALUE 0)                        ; X
26    L26
26    (UNBIND1)
27    (SKIP&RET 2)
29    L29
29    (GETVALUE 0)                        ; X
31    (JMP L26)
33    L33
33    (CONST&PUSH 3)                      ; TRUNC
34    (GETVALUE 0)                        ; X
36    (CAR&PUSH)
37    (CALLS1&PUSH 158)                   ; COPY-LIST
39    (CONST&PUSH 5)                      ; 1
40    (CALL&PUSH 3 6)                     ; DELQ
43    (GETVALUE 0)                        ; X
45    (CDR)
46    (CONS)
47    (JMP L26)


Disassembly of function #:|(DEFUN RATDISREPD (X) ...)-119|
(CONST 0) = RATDISREPD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RATDISREPD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RATDISREPD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RATDISREPD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RATDISREPD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RATDISREPD
8     (SKIP&RET 1)


Disassembly of function RATDISREPD
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = DISREP
(CONST 3) = PUTPROP
(CONST 4) = VARLIST
(CONST 5) = TRUNC
(CONST 6) = MEMQ
(CONST 7) = SRDISREP
(CONST 8) = CDISREP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
61 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR)
6     (CDR)
7     (CDR)
8     (CDR)
9     (CAR&PUSH)
10    (LOAD&PUSH 0)
11    (GETVALUE 0)                        ; X
13    (CAR)
14    (CDR)
15    (CDR)
16    (CAR&PUSH)
17    (JMP L49)
19    L19
19    (SKIP 2)
21    (JMP L61)
23    L23
23    (GETVALUE&PUSH 0)                   ; X
25    (CALL1 7)                           ; SRDISREP
27    (UNBIND1)
28    (JMP L84)
30    L30
30    (LOAD&CAR&PUSH 1)
32    (LOAD 1)
33    (BIND 1)                            ; Y
35    (GETVALUE&PUSH 1)                   ; Y
37    (LOAD&PUSH 4)
38    (CONST&PUSH 2)                      ; DISREP
39    (CALL 3 3)                          ; PUTPROP
42    (UNBIND1)
43    (SKIP 2)
45    (LOAD&CDR&STORE 1)
47    (LOAD&CDR&STORE 0)
49    L49
49    (LOAD&PUSH 1)
50    (CALLS1&JMPIF 146 L19)              ; ENDP
53    (LOAD&CAR&PUSH 1)
55    (LOAD&PUSH 1)
56    (CALLS1&JMPIFNOT 146 L30)           ; ENDP
59    (SKIP 3)
61    L61
61    (SKIP 1)
63    (GETVALUE 0)                        ; X
65    (CAR)
66    (CDR)
67    (CDR)
68    (CAR)
69    (BIND 4)                            ; VARLIST
71    (CONST&PUSH 5)                      ; TRUNC
72    (GETVALUE 0)                        ; X
74    (CAR&PUSH)
75    (CALL2&JMPIF 6 L23)                 ; MEMQ
78    (GETVALUE 0)                        ; X
80    (CDR&PUSH)
81    (CALL1 8)                           ; CDISREP
83    (UNBIND1)
84    L84
84    (UNBIND1)
85    (SKIP&RET 2)


Disassembly of function #:|(DEFUN CDISREP (X &AUX N ...) ...)-120|
(CONST 0) = CDISREP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CDISREP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CDISREP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CDISREP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CDISREP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CDISREP
8     (SKIP&RET 1)


Disassembly of function CDISREP
(CONST 0) = X
(CONST 1) = SIGN
(CONST 2) = FIXNUMP
(CONST 3) = 0
(CONST 4) = 1
(CONST 5) = PDISREP
(CONST 6) = $RATEXPAND
(CONST 7) = PMINUSP
(CONST 8) = PMINUS
(CONST 9) = -1
(CONST 10) = (RAT)
(CONST 11) = $RATDENOMDIVIDE
(CONST 12) = MPLUS
(CONST 13) = FANCYDIS
(CONST 14) = (MTIMES RATSIMP)
(CONST 15) = (RAT)
(CONST 16) = (MTIMES RATSIMP)
(CONST 17) = (MEXPT RATSIMP)
(CONST 18) = (MEXPT RATSIMP)
(CONST 19) = (MEXPT RATSIMP)
(CONST 20) = (MTIMES RATSIMP)
(CONST 21) = (MEXPT RATSIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($RATDENOMDIVIDE $RATEXPAND SIGN X)
writes special variable : (SIGN)
155 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-NIL 2)
5     (NIL)
6     (BIND 1)                            ; SIGN
8     (GETVALUE 0)                        ; X
10    (CAR)
11    (BIND 0)                            ; X
13    (GETVALUE&PUSH 0)                   ; X
15    (CALL1&JMPIF 2 L28)                 ; FIXNUMP
18    (GETVALUE 0)                        ; X
20    (JMPIFCONSP L145)
23    (GETVALUE&PUSH 0)                   ; X
25    (CALLS2&JMPIFNOT 15 L38)            ; FLOATP
28    L28
28    (GETVALUE&PUSH 0)                   ; X
30    (CALLS2 145)                        ; ZEROP
32    (UNBIND1)
33    (JMPIFNOT L146)
36    (JMP L42)
38    L38
38    (UNBIND1)
39    (JMPIFNOT L146)
42    L42
42    (CONST 3)                           ; 0
43    (JMP L240)
46    L46
46    (GETVALUE 0)                        ; X
48    (CAR&PUSH)
49    (CALL1 5)                           ; PDISREP
51    (JMP L240)
54    L54
54    (GETVALUE 0)                        ; X
56    (CAR&PUSH)
57    (CALL1 5)                           ; PDISREP
59    (STORE 4)
60    (CONST 4)                           ; 1
61    (JMP L179)
64    L64
64    (GETVALUE 0)                        ; X
66    (CAR&PUSH)
67    (CALL1&PUSH 8)                      ; PMINUS
69    (CALL1 5)                           ; PDISREP
71    (STORE 4)
72    (CONST 9)                           ; -1
73    (JMP L179)
76    L76
76    (CONST&PUSH 10)                     ; (RAT)
77    (GETVALUE&PUSH 1)                   ; SIGN
79    (LOAD&PUSH 6)
80    (CALLSR&PUSH 2 55)                  ; *
83    (LOAD 5)
84    (JMP L237)
87    L87
87    (LOAD&PUSH 4)
88    (LOAD&PUSH 4)
89    (CALL2 13)                          ; FANCYDIS
91    (JMP L240)
94    L94
94    (CONST&PUSH 14)                     ; (MTIMES RATSIMP)
95    (CONST&PUSH 15)                     ; (RAT)
96    (GETVALUE&PUSH 1)                   ; SIGN
98    (LOAD&PUSH 6)
99    (LIST&PUSH 3)
101   (LOAD 6)
102   (JMP L237)
105   L105
105   (LOAD&PUSH 5)
106   (CALLSR&PUSH 0 54)                  ; -
109   (CONST&PUSH 17)                     ; (MEXPT RATSIMP)
110   (LOAD&PUSH 6)
111   (CONST&PUSH 9)                      ; -1
112   (LIST&PUSH 3)
114   (LIST 2)
116   (CONS)
117   (JMP L240)
120   L120
120   (CONST&PUSH 16)                     ; (MTIMES RATSIMP)
121   (LOAD&PUSH 5)
122   (CALLS2&JMPIF 8 L105)               ; NUMBERP
125   (GETVALUE&PUSH 1)                   ; SIGN
127   (LOAD&PUSH 6)
128   (CONST&PUSH 18)                     ; (MEXPT RATSIMP)
129   (LOAD&PUSH 7)
130   (CONST&PUSH 9)                      ; -1
131   (LIST&PUSH 3)
133   (LIST 3)
135   (CONS)
136   (JMP L240)
139   L139
139   (CONST&PUSH 19)                     ; (MEXPT RATSIMP)
140   (LOAD&PUSH 4)
141   (CONST 9)                           ; -1
142   (JMP L237)
145   L145
145   (UNBIND1)
146   L146
146   (GETVALUE 0)                        ; X
148   (CDR&PUSH)
149   (JMPIFEQTO 4 L46)                   ; 1
153   (GETVALUE 0)                        ; X
155   (CDR&PUSH)
156   (CALLS2&JMPIF 15 L46)               ; FLOATP
160   (GETVALUE 6)                        ; $RATEXPAND
162   (JMPIF L54)
165   (GETVALUE 0)                        ; X
167   (CAR&PUSH)
168   (CALL1&JMPIF 7 L64)                 ; PMINUSP
172   (GETVALUE 0)                        ; X
174   (CAR&PUSH)
175   (CALL1 5)                           ; PDISREP
177   (STORE 4)
178   (CONST 4)                           ; 1
179   L179
179   (SETVALUE 1)                        ; SIGN
181   (GETVALUE 0)                        ; X
183   (CDR&PUSH)
184   (CALL1 5)                           ; PDISREP
186   (STORE 3)
187   (LOAD&PUSH 4)
188   (CALLS2&JMPIFNOT 8 L196)            ; NUMBERP
191   (LOAD&PUSH 3)
192   (CALLS2&JMPIF 8 L76)                ; NUMBERP
196   L196
196   (GETVALUE 11)                       ; $RATDENOMDIVIDE
198   (JMPIFNOT L214)
200   (GETVALUE 6)                        ; $RATEXPAND
202   (JMPIFNOT L214)
204   (LOAD 4)
205   (JMPIFATOM L214)
207   (LOAD 4)
208   (CAR)
209   (CAR&PUSH)
210   (JMPIFEQTO 12 L87)                  ; MPLUS
214   L214
214   (LOAD&PUSH 3)
215   (CALLS2&JMPIF 8 L94)                ; NUMBERP
219   (GETVALUE&PUSH 1)                   ; SIGN
221   (JMPIFEQTO 9 L120)                  ; -1
225   (LOAD&PUSH 4)
226   (JMPIFEQTO 4 L139)                  ; 1
230   (CONST&PUSH 20)                     ; (MTIMES RATSIMP)
231   (LOAD&PUSH 5)
232   (CONST&PUSH 21)                     ; (MEXPT RATSIMP)
233   (LOAD&PUSH 6)
234   (CONST&PUSH 9)                      ; -1
235   (LIST 3)
237   L237
237   (PUSH)
238   (LIST 3)
240   L240
240   (UNBIND1)
241   (SKIP 2)
243   (UNBIND1)
244   (SKIP&RET 2)


Disassembly of function #:|(DEFUN FANCYDIS (N D) ...)-121|
(CONST 0) = FANCYDIS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FANCYDIS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FANCYDIS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FANCYDIS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FANCYDIS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FANCYDIS
8     (SKIP&RET 1)


Disassembly of function FANCYDIS
(CONST 0) = (MEXPT)
(CONST 1) = -1
(CONST 2) = SIMPLIFY
(CONST 3) = (MPLUS)
(CONST 4) = (MTIMES)
(CONST 5) = RATF
(CONST 6) = $RATDISREP
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
31 byte-code instructions:
0     (CONST&PUSH 0)                      ; (MEXPT)
1     (LOAD&PUSH 2)
2     (CONST&PUSH 1)                      ; -1
3     (LIST&PUSH 3)
5     (CALL1 2)                           ; SIMPLIFY
7     (STORE 1)
8     (CONST&PUSH 3)                      ; (MPLUS)
9     (NIL&PUSH)
10    (LOAD&CDR&PUSH 4)
12    (JMP L31)
14    L14
14    (LOAD&CAR&PUSH 0)
16    (CONST&PUSH 4)                      ; (MTIMES)
17    (LOAD&PUSH 1)
18    (LOAD&PUSH 7)
19    (LIST&PUSH 3)
21    (CALL1&PUSH 5)                      ; RATF
23    (CALL1&PUSH 6)                      ; $RATDISREP
25    (LOAD&CONS&STORE 2)
27    (SKIP 1)
29    (LOAD&CDR&STORE 0)
31    L31
31    (LOAD&PUSH 0)
32    (CALLS1&JMPIFNOT 146 L14)           ; ENDP
35    (SKIP 1)
37    (LOAD&PUSH 0)
38    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
40    (SKIP 1)
42    (CONS&PUSH)
43    (CALL1 2)                           ; SIMPLIFY
45    (SKIP&RET 3)


Disassembly of function #:|(DEFUN COMPATVARL (A B C ...) ...)-122|
(CONST 0) = COMPATVARL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPATVARL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPATVARL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPATVARL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPATVARL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPATVARL
8     (SKIP&RET 1)


Disassembly of function COMPATVARL
(CONST 0) = B
(CONST 1) = COMPATVL
(CONST 2) = ALIKE1
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
50 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; B
3     (LOAD&JMPIFNOT 7 L36)
6     (GETVALUE 0)                        ; B
8     (JMPIFNOT L39)
10    (LOAD&JMPIFNOT 5 L39)
13    (LOAD&JMPIFNOT 4 L39)
16    (LOAD&CAR&PUSH 7)
18    (GETVALUE 0)                        ; B
20    (CAR&PUSH)
21    (CALL2&JMPIF 2 L45)                 ; ALIKE1
24    (LOAD&PUSH 7)
25    (GETVALUE 0)                        ; B
27    (CDR&PUSH)
28    (LOAD&PUSH 7)
29    (LOAD&CDR&PUSH 7)
31    (JSR L0)
33    L33
33    (UNBIND1)
34    (SKIP&RET 5)
36    L36
36    (NIL)
37    (JMP L33)
39    L39
39    (CONST&PUSH 1)                      ; COMPATVL
40    (NIL)
41    (THROW)
42    L42
42    (LOAD 7)
43    (JMP L33)
45    L45
45    (LOAD&CDR&PUSH 7)
47    (GETVALUE 0)                        ; B
49    (CDR&PUSH)
50    (LOAD&CDR&PUSH 7)
52    (LOAD&CDR&PUSH 7)
54    (JSR L0)
56    (STORE 7)
57    (LOAD&CAR&PUSH 5)
59    (LOAD 5)
60    (CAR)
61    (JMPIFEQ L42)
63    (LOAD&CAR&PUSH 5)
65    (LOAD 5)
66    (CAR)
67    (CONS&PUSH)
68    (LOAD 8)
69    (CONS)
70    (JMP L33)


Disassembly of function #:|(DEFUN NEWVAR (L &AUX VLIST) ...)-123|
(CONST 0) = NEWVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWVAR
8     (SKIP&RET 1)


Disassembly of function NEWVAR
(CONST 0) = L
(CONST 1) = VLIST
(CONST 2) = NEWVAR1
(CONST 3) = SORTGREAT
(CONST 4) = VARLIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VARLIST VLIST L)
writes special variable : (VARLIST)
13 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (NIL)
4     (BIND 1)                            ; VLIST
6     (GETVALUE&PUSH 0)                   ; L
8     (CALL1 2)                           ; NEWVAR1
10    (GETVALUE&PUSH 1)                   ; VLIST
12    (CALL1&PUSH 3)                      ; SORTGREAT
14    (GETVALUE&PUSH 4)                   ; VARLIST
16    (CALLSR 2 35)                       ; NCONC
19    (SETVALUE 4)                        ; VARLIST
21    (UNBIND 2)
23    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SORTGREAT (L) ...)-124|
(CONST 0) = SORTGREAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SORTGREAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SORTGREAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SORTGREAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SORTGREAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SORTGREAT
8     (SKIP&RET 1)


Disassembly of function SORTGREAT
(CONST 0) = L
(CONST 1) = GREAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (JMPIFNOT1 L15)
7     (PUSH)
8     (CONST&PUSH 1)                      ; GREAT
9     (PUSH-UNBOUND 3)
11    (CALLS2&PUSH 103)                   ; SORT
13    (CALLS2 73)                         ; NREVERSE
15    L15
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN FNEWVAR (L &AUX #) ...)-125|
(CONST 0) = FNEWVAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE FNEWVAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; FNEWVAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; FNEWVAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE FNEWVAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; FNEWVAR
8     (SKIP&RET 1)


Disassembly of function FNEWVAR
(CONST 0) = L
(CONST 1) = *FNEWVARSW
(CONST 2) = NEWVAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (T)
4     (BIND 1)                            ; *FNEWVARSW
6     (GETVALUE&PUSH 0)                   ; L
8     (CALL1 2)                           ; NEWVAR
10    (UNBIND 2)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN NESTLEV (EXP) ...)-126|
(CONST 0) = NESTLEV
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NESTLEV>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NESTLEV
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NESTLEV
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NESTLEV>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NESTLEV
8     (SKIP&RET 1)


Disassembly of function NESTLEV
(CONST 0) = 0
(CONST 1) = L
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
writes special variable : (L)
33 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L43)
3     (LOAD 1)
4     (CDR)
5     (CAR&PUSH)
6     (JSR&PUSH L0)
8     (LOAD 2)
9     (CDR)
10    (CDR)
11    (BIND 1)                            ; L
13    (GETVALUE 1)                        ; L
15    (JMPIFNOT L37)
17    L17
17    (LOAD&PUSH 3)
18    (GETVALUE 1)                        ; L
20    (CAR&PUSH)
21    (JSR&PUSH L0)
23    (CALLSR&PUSH 1 51)                  ; MAX
26    (GETVALUE 1)                        ; L
28    (CDR)
29    (SETVALUE 1)                        ; L
31    (POP&STORE 3)
33    (GETVALUE 1)                        ; L
35    (JMPIF L17)
37    L37
37    (LOAD&PUSH 3)
38    (CALLS2 150)                        ; 1+
40    (UNBIND1)
41    (SKIP&RET 3)
43    L43
43    (CONST 0)                           ; 0
44    (SKIP&RET 2)


Disassembly of function #:|(DEFUN RADSORT (L) ...)-127|
(CONST 0) = RADSORT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RADSORT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RADSORT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RADSORT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RADSORT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RADSORT
8     (SKIP&RET 1)


Disassembly of function RADSORT
(CONST 0) = L
(CONST 1) = #<COMPILED-CLOSURE RADSORT-1>
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (L)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE&PUSH 0)                   ; L
5     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE RADSORT-1>
6     (PUSH-UNBOUND 3)
8     (CALLS2 103)                        ; SORT
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function RADSORT-1
(CONST 0) = B
(CONST 1) = NESTLEV
(CONST 2) = GREAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (B)
25 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; B
3     (LOAD&PUSH 5)
4     (CALL1&PUSH 1)                      ; NESTLEV
6     (GETVALUE&PUSH 0)                   ; B
8     (CALL1&PUSH 1)                      ; NESTLEV
10    (LOAD&PUSH 1)
11    (LOAD&PUSH 1)
12    (CALLSR&JMPIF 1 47 L32)             ; <
16    (LOAD&PUSH 1)
17    (LOAD&PUSH 1)
18    (CALLSR&JMPIF 1 48 L35)             ; >
22    (GETVALUE&PUSH 0)                   ; B
24    (LOAD&PUSH 8)
25    (CALL2 2)                           ; GREAT
27    L27
27    (SKIP 2)
29    (UNBIND1)
30    (SKIP&RET 3)
32    L32
32    (T)
33    (JMP L27)
35    L35
35    (NIL)
36    (JMP L27)


Wrote file binary-clisp/rat3e.fas
Wrote file /cygdrive/e/temp/maxima/src/rat3e.lis