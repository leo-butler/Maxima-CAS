Listing of compilation of file /cygdrive/e/temp/maxima/src/mactex.lisp
on 2002-12-17 13:36:25 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/mactex.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL LOP ROP ...) (*EXPR TEX-LBP TEX-RBP))-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMSPEC $TEX (L) ...)-3-2|
(CONST 0) = #<COMPILED-CLOSURE #:|(DEFMSPEC $TEX (L) ...)-3-2-1|>
(CONST 1) = $TEX
(CONST 2) = MFEXPR*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; #<COMPILED-CLOSURE #:|(DEFMSPEC $TEX (L) ...)-3-2-1|>
1     (CONST&PUSH 1)                      ; $TEX
2     (CONST&PUSH 2)                      ; MFEXPR*
3     (LOAD&PUSH 2)
4     (CALLS2 136)                        ; SYSTEM::%PUT
6     (SKIP&RET 2)


Disassembly of function #:|(DEFMSPEC $TEX (L) ...)-3-2-1|
(CONST 0) = L
(CONST 1) = ARGS
(CONST 2) = *STANDARD-OUTPUT*
(CONST 3) = TEX1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*STANDARD-OUTPUT* ARGS L)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (GETVALUE 0)                        ; L
5     (CDR)
6     (BIND 1)                            ; ARGS
8     (GETVALUE 1)                        ; ARGS
10    (CDR)
11    (JMPIFNOT L19)
13    (GETVALUE 1)                        ; ARGS
15    (CDR)
16    (CAR)
17    (JMPIFNOT L28)
19    L19
19    (CONST&PUSH 3)                      ; TEX1
20    (GETVALUE 1)                        ; ARGS
22    (APPLY 0)
24    L24
24    (UNBIND 2)
26    (SKIP&RET 2)
28    L28
28    (PUSH-UNBOUND 2)
30    (CALLS2 117)                        ; MAKE-STRING-OUTPUT-STREAM
32    (BIND 2)                            ; *STANDARD-OUTPUT*
34    (CONST&PUSH 3)                      ; TEX1
35    (GETVALUE 1)                        ; ARGS
37    (APPLY 0)
39    (GETVALUE&PUSH 2)                   ; *STANDARD-OUTPUT*
41    (CALLS2 118)                        ; GET-OUTPUT-STREAM-STRING
43    (UNBIND1)
44    (JMP L24)


Disassembly of function #:|(DEFUN TEX1 (MEXPLABEL &OPTIONAL FILENAME) ...)-4|
(CONST 0) = TEX1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX1
8     (SKIP&RET 1)


Disassembly of function TEX1
(CONST 0) = TEXPORT
(CONST 1) = $GCPRINT
(CONST 2) = CCOL
(CONST 3) = X
(CONST 4) = Y
(CONST 5) = 1
(CONST 6) = " No eqn given to TeX"
(CONST 7) = DISPLA
(CONST 8) = *STANDARD-OUTPUT*
(CONST 9) = STRIPDOLLAR
(CONST 10) = :OUTPUT
(CONST 11) = :APPEND
(CONST 12) = :CREATE
(CONST 13) = MEVAL
(CONST 14) = $LABELS
(CONST 15) = MEMQ
(CONST 16) = "("
(CONST 17) = ")"
(CONST 18) = CONCAT
(CONST 19) = $VERBIFY
(CONST 20) = MEXPR
(CONST 21) = MGET
(CONST 22) = (MDEFINE)
(CONST 23) = MMACRO
(CONST 24) = (MDEFMACRO)
(CONST 25) = AEXPR
(CONST 26) = (MDEFINE)
(CONST 27) = ARRAY
(CONST 28) = (MDEFINE MDEFMACRO)
(CONST 29) = #<COMPILED-CLOSURE TEX1-1>
(CONST 30) = FORMAT
(CONST 31) = #<COMPILED-CLOSURE TEX1-2>
(CONST 32) = MGRIND
(CONST 33) = #<COMPILED-CLOSURE TEX1-3>
(CONST 34) = $INCHAR
(CONST 35) = 2
(CONST 36) = GETCHAR
(CONST 37) = #<COMPILED-CLOSURE TEX1-4>
(CONST 38) = #<COMPILED-CLOSURE TEX1-5>
(CONST 39) = "$$"
(CONST 40) = MYPRINC
(CONST 41) = MPAREN
(CONST 42) = TEX
(CONST 43) = #<COMPILED-CLOSURE TEX1-6>
(CONST 44) = #<COMPILED-CLOSURE TEX1-7>
(CONST 45) = CLOSE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (*STANDARD-OUTPUT* TEXPORT $INCHAR Y X $LABELS)
writes special variables : (Y X TEXPORT CCOL)
181 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (NIL&PUSH)
3     (NIL)
4     (BIND 0)                            ; TEXPORT
6     (NIL)
7     (BIND 1)                            ; $GCPRINT
9     (NIL)
10    (BIND 2)                            ; CCOL
12    (NIL)
13    (BIND 3)                            ; X
15    (NIL)
16    (BIND 4)                            ; Y
18    (NIL&PUSH)
19    (CONST 5)                           ; 1
20    (SETVALUE 2)                        ; CCOL
22    (LOAD&JMPIFNOT 19 L203)
26    (LOAD&JMPIFNOT 18 L209)
30    (LOAD&PUSH 18)
31    (CALL1&PUSH 9)                      ; STRIPDOLLAR
33    (CALLS1&PUSH 75)                    ; STRING
35    (CONST&PUSH 10)                     ; :OUTPUT
36    (PUSH-UNBOUND 5)
38    (CONST 11)                          ; :APPEND
39    (STORE 3)
40    (CONST 12)                          ; :CREATE
41    (STORE 2)
42    (CALLS1 249)                        ; OPEN
44    L44
44    (SETVALUE 0)                        ; TEXPORT
46    (LOAD&PUSH 19)
47    (CALL1 13)                          ; MEVAL
49    (STORE 16)
51    (LOAD&PUSH 19)
52    (GETVALUE&PUSH 14)                  ; $LABELS
54    (CALL2&JMPIF 15 L214)               ; MEMQ
58    (NIL&STORE 19)
60    L60
60    (LOAD 16)
62    (SETVALUE 3)                        ; X
64    (PUSH)
65    (CALLS2&JMPIFNOT 6 L124)            ; SYMBOLP
68    (GETVALUE&PUSH 3)                   ; X
70    (CALL1 19)                          ; $VERBIFY
72    (SETVALUE 3)                        ; X
74    (PUSH)
75    (CONST&PUSH 20)                     ; MEXPR
76    (CALL2 21)                          ; MGET
78    (SETVALUE 4)                        ; Y
80    (JMPIF L229)
83    (GETVALUE&PUSH 3)                   ; X
85    (CONST&PUSH 23)                     ; MMACRO
86    (CALL2 21)                          ; MGET
88    (SETVALUE 4)                        ; Y
90    (JMPIF L233)
93    (GETVALUE&PUSH 3)                   ; X
95    (CONST&PUSH 25)                     ; AEXPR
96    (CALL2 21)                          ; MGET
98    (SETVALUE 4)                        ; Y
100   (JMPIFNOT L124)
102   (CONST&PUSH 26)                     ; (MDEFINE)
103   (GETVALUE&PUSH 3)                   ; X
105   (CONST&PUSH 27)                     ; ARRAY
106   (LIST 2)
108   L108
108   (PUSH)
109   (GETVALUE 4)                        ; Y
111   (CDR)
112   (CAR)
113   (CDR)
114   (CONS&PUSH)
115   (GETVALUE 4)                        ; Y
117   (CDR)
118   (CDR)
119   (CAR&PUSH)
120   (LIST 3)
122   (STORE 16)
124   L124
124   (LOAD 16)
126   (JMPIFATOM L137)
128   (LOAD 16)
130   (CAR)
131   (CAR&PUSH)
132   (CONST&PUSH 28)                     ; (MDEFINE MDEFMACRO)
133   (CALL2&JMPIF 15 L243)               ; MEMQ
137   L137
137   (LOAD&JMPIFNOT 0 L154)
140   (GETVALUE&PUSH 34)                  ; $INCHAR
142   (CONST&PUSH 35)                     ; 2
144   (CALL2&PUSH 36)                     ; GETCHAR
146   (LOAD&PUSH 20)
147   (CONST&PUSH 35)                     ; 2
149   (CALL2 36)                          ; GETCHAR
151   (JMPIFEQ L271)
154   L154
154   (CONST&PUSH 39)                     ; "$$"
156   (CALL1 40)                          ; MYPRINC
158   (CONST&SYMBOL-FUNCTION&PUSH 40)     ; MYPRINC
160   (LOAD&PUSH 17)
161   (PUSH-NIL 2)
163   (CONST&PUSH 41)                     ; MPAREN
165   (CONST&PUSH 41)                     ; MPAREN
167   (CALL&PUSH 5 42)                    ; TEX
170   (CALLSR 0 24)                       ; MAPC
173   (LOAD&JMPIFNOT 19 L184)
176   (GETVALUE&PUSH 0)                   ; TEXPORT
178   (CONST&PUSH 43)                     ; #<COMPILED-CLOSURE TEX1-6>
180   (LOAD&PUSH 21)
181   (CALL 3 30)                         ; FORMAT
184   L184
184   (GETVALUE&PUSH 0)                   ; TEXPORT
186   (CONST 44)                          ; #<COMPILED-CLOSURE TEX1-7>
188   L188
188   (PUSH)
189   (CALL2 30)                          ; FORMAT
191   (LOAD&JMPIF 18 L291)
195   (LOAD 19)
197   L197
197   (SKIP 1)
199   (UNBIND 5)
201   (SKIP&RET 4)
203   L203
203   (CONST&PUSH 6)                      ; " No eqn given to TeX"
204   (CALL1 7)                           ; DISPLA
206   (NIL)
207   (JMP L197)
209   L209
209   (GETVALUE 8)                        ; *STANDARD-OUTPUT*
211   (JMP L44)
214   L214
214   (CONST&PUSH 16)                     ; "("
215   (LOAD&PUSH 20)
216   (CALL1&PUSH 9)                      ; STRIPDOLLAR
218   (CONST&PUSH 17)                     ; ")"
219   (CALL 3 18)                         ; CONCAT
222   (STORE 19)
224   (T&STORE 0)
226   (JMP L60)
229   L229
229   (CONST 22)                          ; (MDEFINE)
231   (JMP L235)
233   L233
233   (CONST 24)                          ; (MDEFMACRO)
235   L235
235   (PUSH)
236   (GETVALUE&PUSH 3)                   ; X
238   (LIST 1)
240   (JMP L108)
243   L243
243   (GETVALUE&PUSH 0)                   ; TEXPORT
245   (CONST&PUSH 29)                     ; #<COMPILED-CLOSURE TEX1-1>
246   (CALL2 30)                          ; FORMAT
248   (LOAD&JMPIFNOT 19 L259)
251   (GETVALUE&PUSH 0)                   ; TEXPORT
253   (CONST&PUSH 31)                     ; #<COMPILED-CLOSURE TEX1-2>
255   (LOAD&PUSH 21)
256   (CALL 3 30)                         ; FORMAT
259   L259
259   (LOAD&PUSH 16)
260   (GETVALUE&PUSH 0)                   ; TEXPORT
262   (CALL2 32)                          ; MGRIND
264   (GETVALUE&PUSH 0)                   ; TEXPORT
266   (CONST 33)                          ; #<COMPILED-CLOSURE TEX1-3>
268   (JMP L188)
271   L271
271   (GETVALUE&PUSH 0)                   ; TEXPORT
273   (CONST&PUSH 37)                     ; #<COMPILED-CLOSURE TEX1-4>
275   (LOAD&PUSH 21)
276   (CALL 3 30)                         ; FORMAT
279   (LOAD&PUSH 16)
280   (GETVALUE&PUSH 0)                   ; TEXPORT
282   (CALL2 32)                          ; MGRIND
284   (GETVALUE&PUSH 0)                   ; TEXPORT
286   (CONST 38)                          ; #<COMPILED-CLOSURE TEX1-5>
288   (JMP L188)
291   L291
291   (GETVALUE&PUSH 0)                   ; TEXPORT
293   (CALLS1 139)                        ; TERPRI
295   (GETVALUE&PUSH 0)                   ; TEXPORT
297   (CALL1 45)                          ; CLOSE
299   (LOAD 19)
301   (JMP L197)


Disassembly of function TEX1-1
(CONST 0) = 
"|
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "|
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function TEX1-2
(CONST 0) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 4)
2     (CALLS1 132)                        ; PRINC
4     (CONST&PUSH 0)                      ; #\Space
5     (LOAD&PUSH 4)
6     (CALLS1 136)                        ; WRITE-CHAR
8     (LOAD 1)
9     (SKIP&RET 4)


Disassembly of function TEX1-3
(CONST 0) = 
";|
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; ";|
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function TEX1-4
(CONST 0) = 
"
|"
(CONST 1) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
12 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
|"
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\Space
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)


Disassembly of function TEX1-5
(CONST 0) = 
";|
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; ";|
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function TEX1-6
(CONST 0) = "\\leqno{\\tt "
(CONST 1) = #\}
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
12 byte-code instructions:
0     (CONST&PUSH 0)                      ; "\\leqno{\\tt "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\}
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)


Disassembly of function TEX1-7
(CONST 0) = "$$"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "$$"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFUN MYPRINC (CHSTR) ...)-5|
(CONST 0) = MYPRINC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MYPRINC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MYPRINC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MYPRINC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MYPRINC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MYPRINC
8     (SKIP&RET 1)


Disassembly of function MYPRINC
(CONST 0) = EXPLODEN
(CONST 1) = CCOL
(CONST 2) = 70
(CONST 3) = TEXPORT
(CONST 4) = 1
(CONST 5) = " "
(CONST 6) = TYO
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (TEXPORT CCOL)
writes special variable : (CCOL)
34 byte-code instructions:
0     L0
0     (NIL&PUSH)
1     (LOAD&PUSH 2)
2     (CALL1 0)                           ; EXPLODEN
4     (STORE 0)
5     (PUSH)
6     (CALLS2&PUSH 71)                    ; LENGTH
8     (GETVALUE&PUSH 1)                   ; CCOL
10    (CALLSR&PUSH 2 53)                  ; +
13    (CONST&PUSH 2)                      ; 70
14    (CALLSR&JMPIFNOT 1 48 L28)          ; >
18    (GETVALUE&PUSH 3)                   ; TEXPORT
20    (CALLS1 139)                        ; TERPRI
22    (CONST 4)                           ; 1
23    (SETVALUE 1)                        ; CCOL
25    (CONST&PUSH 5)                      ; " "
26    (JSR L0)
28    L28
28    (LOAD&PUSH 0)
29    (GETVALUE&PUSH 1)                   ; CCOL
31    (LOAD&JMPIFNOT 1 L47)
34    L34
34    (LOAD&CAR&PUSH 1)
36    (GETVALUE&PUSH 3)                   ; TEXPORT
38    (CALL2 6)                           ; TYO
40    (LOAD&CDR&STORE 1)
42    (LOAD&INC&STORE 0)
44    (LOAD&JMPIF 1 L34)
47    L47
47    (LOAD 0)
48    (SETVALUE 1)                        ; CCOL
50    (SKIP 2)
52    (NIL)
53    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MYTERPRI NIL ...)-6|
(CONST 0) = MYTERPRI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MYTERPRI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MYTERPRI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MYTERPRI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MYTERPRI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MYTERPRI
8     (SKIP&RET 1)


Disassembly of function MYTERPRI
(CONST 0) = TEXPORT
(CONST 1) = MTERPRI
(CONST 2) = 1
(CONST 3) = CCOL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (TEXPORT)
writes special variable : (CCOL)
11 byte-code instructions:
0     (GETVALUE 0)                        ; TEXPORT
2     (JMPIF L11)
4     (CALL0 1)                           ; MTERPRI
6     L6
6     (CONST 2)                           ; 1
7     (SETVALUE 3)                        ; CCOL
9     (SKIP&RET 1)
11    L11
11    (PUSH)
12    (CALLS1 139)                        ; TERPRI
14    (JMP L6)


Disassembly of function #:|(DEFUN TEX (X L R ...) ...)-7|
(CONST 0) = TEX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX
8     (SKIP&RET 1)


Disassembly of function TEX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = LOP
(CONST 4) = ROP
(CONST 5) = NFORMAT
(CONST 6) = TEX-ATOM
(CONST 7) = TEX-LBP
(CONST 8) = TEX-RBP
(CONST 9) = TEX-PAREN
(CONST 10) = ARRAY
(CONST 11) = MEMQ
(CONST 12) = TEX-ARRAY
(CONST 13) = TEX
(CONST 14) = TEX-FUNCTION
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L ROP LOP X)
writes special variable : (X)
77 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; X
3     (LOAD 7)
4     (BIND 1)                            ; L
6     (LOAD 9)
7     (BIND 2)                            ; R
9     (LOAD 11)
10    (BIND 3)                            ; LOP
12    (LOAD 13)
13    (BIND 4)                            ; ROP
15    (GETVALUE&PUSH 0)                   ; X
17    (CALL1 5)                           ; NFORMAT
19    (SETVALUE 0)                        ; X
21    (JMPIFATOM L83)
23    (GETVALUE 0)                        ; X
25    (CAR)
26    (CAR&PUSH)
27    (CALL1&PUSH 7)                      ; TEX-LBP
29    (GETVALUE&PUSH 3)                   ; LOP
31    (CALL1&PUSH 8)                      ; TEX-RBP
33    (CALLSR&JMPIF 1 49 L94)             ; <=
37    (GETVALUE&PUSH 4)                   ; ROP
39    (CALL1&PUSH 7)                      ; TEX-LBP
41    (GETVALUE 0)                        ; X
43    (CAR)
44    (CAR&PUSH)
45    (CALL1&PUSH 8)                      ; TEX-RBP
47    (CALLSR&JMPIF 1 48 L94)             ; >
51    (CONST&PUSH 10)                     ; ARRAY
52    (GETVALUE 0)                        ; X
54    (CAR)
55    (CDR&PUSH)
56    (CALL2&JMPIF 11 L105)               ; MEMQ
59    (GETVALUE 0)                        ; X
61    (CAR)
62    (CAR&PUSH)
63    (CONST&PUSH 13)                     ; TEX
64    (PUSH-UNBOUND 1)
66    (CALLS2&JMPIF 132 L116)             ; GET
69    (GETVALUE&PUSH 0)                   ; X
71    (GETVALUE&PUSH 1)                   ; L
73    (GETVALUE&PUSH 2)                   ; R
75    (NIL&PUSH)
76    (CALL 4 14)                         ; TEX-FUNCTION
79    L79
79    (UNBIND 5)
81    (SKIP&RET 6)
83    L83
83    (GETVALUE&PUSH 0)                   ; X
85    (GETVALUE&PUSH 1)                   ; L
87    (GETVALUE&PUSH 2)                   ; R
89    (CALL 3 6)                          ; TEX-ATOM
92    (JMP L79)
94    L94
94    (GETVALUE&PUSH 0)                   ; X
96    (GETVALUE&PUSH 1)                   ; L
98    (GETVALUE&PUSH 2)                   ; R
100   (CALL 3 9)                          ; TEX-PAREN
103   (JMP L79)
105   L105
105   (GETVALUE&PUSH 0)                   ; X
107   (GETVALUE&PUSH 1)                   ; L
109   (GETVALUE&PUSH 2)                   ; R
111   (CALL 3 12)                         ; TEX-ARRAY
114   (JMP L79)
116   L116
116   (GETVALUE 0)                        ; X
118   (CAR)
119   (CAR&PUSH)
120   (CONST&PUSH 13)                     ; TEX
121   (PUSH-UNBOUND 1)
123   (CALLS2&PUSH 132)                   ; GET
125   (GETVALUE&PUSH 0)                   ; X
127   (GETVALUE&PUSH 1)                   ; L
129   (GETVALUE&PUSH 2)                   ; R
131   (FUNCALL 3)
133   (JMP L79)


Disassembly of function #:|(DEFUN TEX-ATOM (X L R) ...)-8|
(CONST 0) = TEX-ATOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-ATOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-ATOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-ATOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-ATOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-ATOM
8     (SKIP&RET 1)


Disassembly of function TEX-ATOM
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEXNUMFORMAT
(CONST 4) = TEXWORD
(CONST 5) = TEX-STRIPDOLLAR
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R X L)
29 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 1)                   ; L
11    (GETVALUE&PUSH 0)                   ; X
13    (CALLS2&JMPIF 8 L45)                ; NUMBERP
16    (GETVALUE&PUSH 0)                   ; X
18    (CALLS2&JMPIFNOT 6 L29)             ; SYMBOLP
21    (GETVALUE&PUSH 0)                   ; X
23    (CONST&PUSH 4)                      ; TEXWORD
24    (PUSH-UNBOUND 1)
26    (CALLS2&JMPIF 132 L33)              ; GET
29    L29
29    (GETVALUE&PUSH 0)                   ; X
31    (CALL1 5)                           ; TEX-STRIPDOLLAR
33    L33
33    (PUSH)
34    (LIST&PUSH 1)
36    (GETVALUE&PUSH 2)                   ; R
38    (CALLSR 3 34)                       ; APPEND
41    (UNBIND 3)
43    (SKIP&RET 4)
45    L45
45    (GETVALUE&PUSH 0)                   ; X
47    (CALL1 3)                           ; TEXNUMFORMAT
49    (JMP L33)


Disassembly of function #:|(DEFVAR *TEX-TRANSLATIONS* NIL)-9|
(CONST 0) = (SPECIAL *TEX-TRANSLATIONS*)
(CONST 1) = *TEX-TRANSLATIONS*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *TEX-TRANSLATIONS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *TEX-TRANSLATIONS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *TEX-TRANSLATIONS*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *TEX-TRANSLATIONS*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-FORMS (F1 F2 &AUX ...) ...)-10|
(CONST 0) = TEX-FORMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-FORMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-FORMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-FORMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-FORMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-FORMS
8     (SKIP&RET 1)


Disassembly of function TEX-FORMS
(CONST 0) = *MREAD-EOF-OBJ*
(CONST 1) = ST
(CONST 2) = #.#'VALUES
(CONST 3) = MREAD-RAW
(CONST 4) = TEX1
(CONST 5) = CLOSE
(CONST 6) = :ABORT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ST *MREAD-EOF-OBJ*)
48 byte-code instructions:
0     (NIL&PUSH)
1     (GETVALUE&PUSH 0)                   ; *MREAD-EOF-OBJ*
3     (LOAD&PUSH 4)
4     (PUSH-UNBOUND 6)
6     (CALLS1 249)                        ; OPEN
8     (BIND 1)                            ; ST
10    (UNWIND-PROTECT-OPEN L49)
12    (CONST 2)                           ; #.#'VALUES
13    (MVCALLP)
14    (JMP L23)
16    L16
16    (LOAD 7)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (LOAD&PUSH 10)
21    (CALL2 4)                           ; TEX1
23    L23
23    (GETVALUE&PUSH 1)                   ; ST
25    (LOAD&PUSH 7)
26    (CALL2 3)                           ; MREAD-RAW
28    (STORE 7)
29    (PUSH)
30    (LOAD 7)
31    (JMPIFNOTEQ L16)
33    (NIL&PUSH)
34    (GETVALUE 1)                        ; ST
36    (JMPIFNOT L41)
38    (PUSH)
39    (CALL1 5)                           ; CLOSE
41    L41
41    (MVCALL)
42    (UNWIND-PROTECT-NORMAL-EXIT)
43    (GETVALUE 1)                        ; ST
45    (JMPIFNOT L59)
47    (JMP L53)
49    L49
49    (GETVALUE 1)                        ; ST
51    (JMPIFNOT L59)
53    L53
53    (PUSH)
54    (CONST&PUSH 6)                      ; :ABORT
55    (T&PUSH)
56    (CALL 3 5)                          ; CLOSE
59    L59
59    (UNWIND-PROTECT-CLOSE)
60    (UNBIND1)
61    (SKIP&RET 5)


Disassembly of function #:|(DEFUN TEX-STRIPDOLLAR (SYM &AUX) ...)-11|
(CONST 0) = TEX-STRIPDOLLAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-STRIPDOLLAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-STRIPDOLLAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-STRIPDOLLAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-STRIPDOLLAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-STRIPDOLLAR
8     (SKIP&RET 1)


Disassembly of function TEX-STRIPDOLLAR
(CONST 0) = L
(CONST 1) = SLOOP::SLOOP-TYPE-ERROR
(CONST 2) = -16777215
(CONST 3) = 4
(CONST 4) = CHARACTER
(CONST 5) = 0
(CONST 6) = *TEX-TRANSLATIONS*
(CONST 7) = EQUAL
(CONST 8) = A
(CONST 9) = #\_
(CONST 10) = #\{
(CONST 11) = #\$
(CONST 12) = #\}
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (A *TEX-TRANSLATIONS* L)
writes special variable : (A)
128 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 6 L24)             ; SYMBOLP
4     (LOAD&PUSH 1)
5     (CALLS2&PUSH 140)                   ; SYMBOL-NAME
7     (LOAD&PUSH 0)
8     (CALLS2 71)                         ; LENGTH
10    (BIND 0)                            ; L
12    (GETVALUE&PUSH 0)                   ; L
14    (CALLS2&PUSH 151)                   ; 1-
16    (LOAD&PUSH 0)
17    (CALLS2&JMPIF 13 L37)               ; SYSTEM::FIXNUMP
20    (CALL0 1)                           ; SLOOP::SLOOP-TYPE-ERROR
22    (JMP L37)
24    L24
24    (LOAD 1)
25    (SKIP&RET 2)
27    L27
27    (LOAD&PUSH 0)
28    (CONST&PUSH 2)                      ; -16777215
29    (CALLSR&JMPIF 1 48 L35)             ; >
33    (CALL0 1)                           ; SLOOP::SLOOP-TYPE-ERROR
35    L35
35    (LOAD&DEC&STORE 0)
37    L37
37    (LOAD&PUSH 4)
38    (LOAD&PUSH 1)
39    (CALLSR&PUSH 1 1)                   ; AREF
42    (PUSH-UNBOUND 1)
44    (CALLS1&JMPIF 38 L27)               ; DIGIT-CHAR-P
47    (LOAD&INC&STORE 0)
49    (CONST&PUSH 3)                      ; 4
50    (GETVALUE&PUSH 0)                   ; L
52    (CALLSR&PUSH 2 53)                  ; +
55    (PUSH-UNBOUND 7)
57    (CONST 4)                           ; CHARACTER
58    (STORE 5)
59    (CONST 5)                           ; 0
60    (STORE 2)
61    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
63    (CONST&PUSH 5)                      ; 0
64    (GETVALUE&PUSH 0)                   ; L
66    (CALLS2&JMPIF 13 L71)               ; SYSTEM::FIXNUMP
69    (CALL0 1)                           ; SLOOP::SLOOP-TYPE-ERROR
71    L71
71    (GETVALUE&PUSH 0)                   ; L
73    (JMP L176)
76    L76
76    (LOAD&PUSH 1)
77    (LOAD&PUSH 4)
78    (CALLS2&JMPIFNOT 1 L154)            ; EQL
82    (LOAD&PUSH 2)
83    (GETVALUE&PUSH 6)                   ; *TEX-TRANSLATIONS*
85    (CONST&PUSH 7)                      ; EQUAL
86    (PUSH-UNBOUND 2)
88    (CALLS1 187)                        ; ASSOC
90    (BIND 8)                            ; A
92    (GETVALUE 8)                        ; A
94    (JMPIFNOT L135)
96    (CDR)
97    (SETVALUE 8)                        ; A
99    (LOAD&PUSH 5)
100   (CONST&PUSH 5)                      ; 0
101   (CALLS1 25)                         ; SYSTEM::SET-FILL-POINTER
103   (CONST&PUSH 5)                      ; 0
104   (GETVALUE&PUSH 8)                   ; A
106   (CALLS2&PUSH 71)                    ; LENGTH
108   (LOAD&PUSH 0)
109   (CALLS2&JMPIF 13 L127)              ; SYSTEM::FIXNUMP
112   (CALL0 1)                           ; SLOOP::SLOOP-TYPE-ERROR
114   (JMP L127)
116   L116
116   (GETVALUE&PUSH 8)                   ; A
118   (LOAD&PUSH 2)
119   (CALLSR&PUSH 1 1)                   ; AREF
122   (LOAD&PUSH 8)
123   (CALLS1 26)                         ; VECTOR-PUSH
125   (LOAD&INC&STORE 1)
127   L127
127   (LOAD&PUSH 1)
128   (LOAD&PUSH 1)
129   (CALLSR&JMPIFNOT 1 50 L116)         ; >=
133   (SKIP 2)
135   L135
135   (UNBIND1)
136   (CONST&PUSH 9)                      ; #\_
137   (LOAD&PUSH 3)
138   (CALLS1 26)                         ; VECTOR-PUSH
140   (LOAD&PUSH 1)
141   (GETVALUE&PUSH 0)                   ; L
143   (CALLS2&PUSH 151)                   ; 1-
145   (CALLS2&JMPIF 1 L154)               ; EQL
148   (CONST&PUSH 10)                     ; #\{
149   (LOAD&PUSH 3)
150   (CALLS1 26)                         ; VECTOR-PUSH
152   (T&STORE 3)
154   L154
154   (LOAD&PUSH 1)
155   (JMPIFNOTEQTO 5 L166)               ; 0
158   (LOAD&PUSH 7)
159   (LOAD&PUSH 2)
160   (CALLSR&PUSH 1 1)                   ; AREF
163   (JMPIFEQTO 11 L174)                 ; #\$
166   L166
166   (LOAD&PUSH 7)
167   (LOAD&PUSH 2)
168   (CALLSR&PUSH 1 1)                   ; AREF
171   (LOAD&PUSH 3)
172   (CALLS1 26)                         ; VECTOR-PUSH
174   L174
174   (LOAD&INC&STORE 1)
176   L176
176   (LOAD&PUSH 1)
177   (LOAD&PUSH 1)
178   (CALLSR&JMPIFNOT 1 50 L76)          ; >=
183   (LOAD&PUSH 3)
184   (T)
185   (JMPIFNOTEQ L191)
187   (CONST&PUSH 12)                     ; #\}
188   (LOAD&PUSH 3)
189   (CALLS1 26)                         ; VECTOR-PUSH
191   L191
191   (SKIP 2)
193   (LOAD&PUSH 0)
194   (PUSH-UNBOUND 1)
196   (CALLS1 212)                        ; INTERN
198   (SKIP 2)
200   (UNBIND1)
201   (SKIP&RET 3)


Disassembly of function #:|(DEFUN STRCAT (&REST ARGS) ...)-12|
(CONST 0) = STRCAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE STRCAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; STRCAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; STRCAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE STRCAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; STRCAT
8     (SKIP&RET 1)


Disassembly of function STRCAT
(CONST 0) = ARGS
(CONST 1) = #.#'CONCATENATE
(CONST 2) = STRING
(CONST 3) = #.#'STRING
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (ARGS)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARGS
3     (CONST&PUSH 1)                      ; #.#'CONCATENATE
4     (CONST&PUSH 2)                      ; STRING
5     (CONST&PUSH 3)                      ; #.#'STRING
6     (GETVALUE&PUSH 0)                   ; ARGS
8     (CALLSR 0 22)                       ; MAPCAR
11    (APPLY 1)
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TEXNUMFORMAT (ATOM) ...)-13|
(CONST 0) = TEXNUMFORMAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEXNUMFORMAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEXNUMFORMAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEXNUMFORMAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEXNUMFORMAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEXNUMFORMAT
8     (SKIP&RET 1)


Disassembly of function TEXNUMFORMAT
(CONST 0) = R
(CONST 1) = EXPLODE
(CONST 2) = E
(CONST 3) = #.#'STRING-EQUAL
(CONST 4) = STRCAT
(CONST 5) = " \\times 10^{"
(CONST 6) = "}"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (R)
writes special variable : (R)
42 byte-code instructions:
0     (NIL)
1     (BIND 0)                            ; R
3     (PUSH-NIL 2)
5     (LOAD&PUSH 6)
6     (CALLS2&JMPIF 12 L60)               ; INTEGERP
9     (LOAD&PUSH 6)
10    (CALL1 1)                           ; EXPLODE
12    (SETVALUE 0)                        ; R
14    (CONST&PUSH 2)                      ; E
15    (GETVALUE&PUSH 0)                   ; R
17    (CONST&PUSH 3)                      ; #.#'STRING-EQUAL
18    (PUSH-UNBOUND 2)
20    (CALLS1&STORE 180 0)                ; MEMBER
23    (JMPIFNOT L63)
25    (CONST&PUSH 2)                      ; E
26    (GETVALUE&PUSH 0)                   ; R
28    (CALLS2&PUSH 72)                    ; REVERSE
30    (CONST&PUSH 3)                      ; #.#'STRING-EQUAL
31    (PUSH-UNBOUND 2)
33    (CALLS1 180)                        ; MEMBER
35    (CDR&PUSH)
36    (CALLS2&STORE 73 1)                 ; NREVERSE
39    (CONST&SYMBOL-FUNCTION&PUSH 4)      ; STRCAT
41    (LOAD 2)
42    (APPLY&PUSH 0)
44    (CONST&PUSH 5)                      ; " \\times 10^{"
45    (CONST&SYMBOL-FUNCTION&PUSH 4)      ; STRCAT
47    (LOAD 3)
48    (CDR)
49    (APPLY&PUSH 0)
51    (CONST&PUSH 6)                      ; "}"
52    (CALL 4 4)                          ; STRCAT
55    L55
55    (SKIP 2)
57    (UNBIND1)
58    (SKIP&RET 2)
60    L60
60    (LOAD 6)
61    (JMP L55)
63    L63
63    (LOAD 6)
64    (JMP L55)


Disassembly of function #:|(DEFUN TEX-PAREN (X L R) ...)-14|
(CONST 0) = TEX-PAREN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-PAREN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-PAREN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-PAREN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-PAREN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-PAREN
8     (SKIP&RET 1)


Disassembly of function TEX-PAREN
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = ("\\left(")
(CONST 4) = "\\right)"
(CONST 5) = MPAREN
(CONST 6) = TEX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L X)
18 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 0)                   ; X
11    (GETVALUE&PUSH 1)                   ; L
13    (CONST&PUSH 3)                      ; ("\\left(")
14    (CALLSR&PUSH 2 34)                  ; APPEND
17    (CONST&PUSH 4)                      ; "\\right)"
18    (GETVALUE 2)                        ; R
20    (CONS&PUSH)
21    (CONST&PUSH 5)                      ; MPAREN
22    (CONST&PUSH 5)                      ; MPAREN
23    (CALL 5 6)                          ; TEX
26    (UNBIND 3)
28    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEX-ARRAY (X L R) ...)-15|
(CONST 0) = TEX-ARRAY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-ARRAY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-ARRAY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-ARRAY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-ARRAY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-ARRAY
8     (SKIP&RET 1)


Disassembly of function TEX-ARRAY
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = F
(CONST 4) = MQAPPLY
(CONST 5) = "\\left("
(CONST 6) = "\\right)"
(CONST 7) = MPAREN
(CONST 8) = TEX
(CONST 9) = TEXWORD
(CONST 10) = LOP
(CONST 11) = MFUNCTION
(CONST 12) = "}"
(CONST 13) = ","
(CONST 14) = TEX-LIST
(CONST 15) = "_{"
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (F R LOP L X)
writes special variables : (X R L F)
61 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (NIL)
10    (BIND 3)                            ; F
12    (GETVALUE 0)                        ; X
14    (CAR)
15    (CAR&PUSH)
16    (JMPIFEQTO 4 L72)                   ; MQAPPLY
19    (GETVALUE 0)                        ; X
21    (CAR)
22    (CAR)
23    (SETVALUE 3)                        ; F
25    (PUSH)
26    (CALL1&PUSH 9)                      ; TEXWORD
28    (GETVALUE&PUSH 1)                   ; L
30    (NIL&PUSH)
31    (GETVALUE&PUSH 10)                  ; LOP
33    (CONST 11)                          ; MFUNCTION
34    L34
34    (PUSH)
35    (CALL 5 8)                          ; TEX
38    (SETVALUE 1)                        ; L
40    (GETVALUE 0)                        ; X
42    (CDR&PUSH)
43    (NIL&PUSH)
44    (CONST&PUSH 12)                     ; "}"
45    (LIST&PUSH 1)
47    (CONST&PUSH 13)                     ; ","
48    (CALL&PUSH 4 14)                    ; TEX-LIST
51    (GETVALUE&PUSH 2)                   ; R
53    (CALLSR 2 35)                       ; NCONC
56    (SETVALUE 2)                        ; R
58    (GETVALUE&PUSH 1)                   ; L
60    (CONST&PUSH 15)                     ; "_{"
61    (LIST&PUSH 1)
63    (GETVALUE&PUSH 2)                   ; R
65    (CALLSR 3 35)                       ; NCONC
68    (UNBIND 4)
70    (SKIP&RET 4)
72    L72
72    (GETVALUE 0)                        ; X
74    (CDR)
75    (CAR)
76    (SETVALUE 3)                        ; F
78    (GETVALUE 0)                        ; X
80    (CDR)
81    (SETVALUE 0)                        ; X
83    (GETVALUE&PUSH 3)                   ; F
85    (GETVALUE&PUSH 1)                   ; L
87    (CONST&PUSH 5)                      ; "\\left("
88    (LIST&PUSH 1)
90    (CALLSR&PUSH 2 34)                  ; APPEND
93    (CONST&PUSH 6)                      ; "\\right)"
94    (LIST&PUSH 1)
96    (CONST&PUSH 7)                      ; MPAREN
97    (CONST 7)                           ; MPAREN
98    (JMP L34)


Disassembly of function #:|(DEFUN TEX-FUNCTION (X L R ...) ...)-16|
(CONST 0) = TEX-FUNCTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-FUNCTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-FUNCTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-FUNCTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-FUNCTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-FUNCTION
8     (SKIP&RET 1)


Disassembly of function TEX-FUNCTION
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEXWORD
(CONST 4) = MPAREN
(CONST 5) = TEX
(CONST 6) = (MPROGN)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L X)
writes special variables : (R L)
31 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; X
3     (LOAD 6)
4     (BIND 1)                            ; L
6     (LOAD 8)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CALL1&PUSH 3)                      ; TEXWORD
15    (GETVALUE&PUSH 1)                   ; L
17    (NIL&PUSH)
18    (CONST&PUSH 4)                      ; MPAREN
19    (CONST&PUSH 4)                      ; MPAREN
20    (CALL 5 5)                          ; TEX
23    (SETVALUE 1)                        ; L
25    (CONST&PUSH 6)                      ; (MPROGN)
26    (GETVALUE 0)                        ; X
28    (CDR)
29    (CONS&PUSH)
30    (NIL&PUSH)
31    (GETVALUE&PUSH 2)                   ; R
33    (CONST&PUSH 4)                      ; MPAREN
34    (CONST&PUSH 4)                      ; MPAREN
35    (CALL 5 5)                          ; TEX
38    (SETVALUE 2)                        ; R
40    (GETVALUE&PUSH 1)                   ; L
42    (GETVALUE&PUSH 2)                   ; R
44    (CALLSR 2 35)                       ; NCONC
47    (UNBIND 3)
49    (SKIP&RET 5)


Disassembly of function #:|(DEFUN TEX-LIST (X L R ...) ...)-17|
(CONST 0) = TEX-LIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-LIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-LIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-LIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-LIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-LIST
8     (SKIP&RET 1)


Disassembly of function TEX-LIST
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = MPAREN
(CONST 4) = TEX
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L R X)
writes special variables : (L X)
47 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; X
3     (LOAD 6)
4     (BIND 1)                            ; L
6     (LOAD 8)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (JMPIFNOT L16)
13    (NIL&PUSH)
14    (JMP L46)
16    L16
16    (GETVALUE 2)                        ; R
18    (JMP L70)
20    L20
20    (LOAD&PUSH 0)
21    (GETVALUE 0)                        ; X
23    (CAR&PUSH)
24    (GETVALUE&PUSH 1)                   ; L
26    (LOAD&PUSH 14)
27    (LIST&PUSH 1)
29    (CONST&PUSH 3)                      ; MPAREN
30    (CONST&PUSH 3)                      ; MPAREN
31    (CALL&PUSH 5 4)                     ; TEX
34    (CALLSR&STORE 2 35 0)               ; NCONC
38    (GETVALUE 0)                        ; X
40    (CDR)
41    (SETVALUE 0)                        ; X
43    (NIL)
44    (SETVALUE 1)                        ; L
46    L46
46    (GETVALUE 0)                        ; X
48    (CDR)
49    (JMPIF L20)
51    (LOAD&PUSH 0)
52    (GETVALUE 0)                        ; X
54    (CAR&PUSH)
55    (GETVALUE&PUSH 1)                   ; L
57    (GETVALUE&PUSH 2)                   ; R
59    (CONST&PUSH 3)                      ; MPAREN
60    (CONST&PUSH 3)                      ; MPAREN
61    (CALL&PUSH 5 4)                     ; TEX
64    (CALLSR 2 35)                       ; NCONC
67    (VALUES1)
68    (SKIP 1)
70    L70
70    (UNBIND 3)
72    (SKIP&RET 5)


Disassembly of function #:|(DEFUN TEX-PREFIX (X L R) ...)-18|
(CONST 0) = TEX-PREFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-PREFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-PREFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-PREFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-PREFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-PREFIX
8     (SKIP&RET 1)


Disassembly of function TEX-PREFIX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEXSYM
(CONST 4) = ROP
(CONST 5) = TEX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP R L X)
23 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (GETVALUE&PUSH 1)                   ; L
15    (GETVALUE 0)                        ; X
17    (CAR)
18    (CAR&PUSH)
19    (CALL1&PUSH 3)                      ; TEXSYM
21    (CALLSR&PUSH 2 34)                  ; APPEND
24    (GETVALUE&PUSH 2)                   ; R
26    (GETVALUE 0)                        ; X
28    (CAR)
29    (CAR&PUSH)
30    (GETVALUE&PUSH 4)                   ; ROP
32    (CALL 5 5)                          ; TEX
35    (UNBIND 3)
37    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEX-INFIX (X L R) ...)-19|
(CONST 0) = TEX-INFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-INFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-INFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-INFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-INFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-INFIX
8     (SKIP&RET 1)


Disassembly of function TEX-INFIX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = WNA-ERR
(CONST 4) = LOP
(CONST 5) = TEX
(CONST 6) = TEXSYM
(CONST 7) = ROP
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP R LOP L X)
writes special variable : (L)
50 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CDR)
13    (JMPIFNOT L22)
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CDR)
19    (CDR)
20    (JMPIFNOT L28)
22    L22
22    (GETVALUE 0)                        ; X
24    (CAR)
25    (CAR&PUSH)
26    (CALL1 3)                           ; WNA-ERR
28    L28
28    (GETVALUE 0)                        ; X
30    (CDR)
31    (CAR&PUSH)
32    (GETVALUE&PUSH 1)                   ; L
34    (NIL&PUSH)
35    (GETVALUE&PUSH 4)                   ; LOP
37    (GETVALUE 0)                        ; X
39    (CAR)
40    (CAR&PUSH)
41    (CALL 5 5)                          ; TEX
44    (SETVALUE 1)                        ; L
46    (GETVALUE 0)                        ; X
48    (CDR)
49    (CDR)
50    (CAR&PUSH)
51    (GETVALUE&PUSH 1)                   ; L
53    (GETVALUE 0)                        ; X
55    (CAR)
56    (CAR&PUSH)
57    (CALL1&PUSH 6)                      ; TEXSYM
59    (CALLSR&PUSH 2 34)                  ; APPEND
62    (GETVALUE&PUSH 2)                   ; R
64    (GETVALUE 0)                        ; X
66    (CAR)
67    (CAR&PUSH)
68    (GETVALUE&PUSH 7)                   ; ROP
70    (CALL 5 5)                          ; TEX
73    (UNBIND 3)
75    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEX-POSTFIX (X L R) ...)-20|
(CONST 0) = TEX-POSTFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-POSTFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-POSTFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-POSTFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-POSTFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-POSTFIX
8     (SKIP&RET 1)


Disassembly of function TEX-POSTFIX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEXSYM
(CONST 4) = LOP
(CONST 5) = TEX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOP R L X)
23 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (GETVALUE&PUSH 1)                   ; L
15    (GETVALUE 0)                        ; X
17    (CAR)
18    (CAR&PUSH)
19    (CALL1&PUSH 3)                      ; TEXSYM
21    (GETVALUE&PUSH 2)                   ; R
23    (CALLSR&PUSH 2 34)                  ; APPEND
26    (GETVALUE&PUSH 4)                   ; LOP
28    (GETVALUE 0)                        ; X
30    (CAR)
31    (CAR&PUSH)
32    (CALL 5 5)                          ; TEX
35    (UNBIND 3)
37    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEX-NARY (X L R) ...)-21|
(CONST 0) = TEX-NARY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-NARY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-NARY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-NARY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-NARY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-NARY
8     (SKIP&RET 1)


Disassembly of function TEX-NARY
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEXSYM
(CONST 4) = Y
(CONST 5) = LOP
(CONST 6) = ROP
(CONST 7) = TEX-FUNCTION
(CONST 8) = TEX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L Y ROP LOP X)
writes special variables : (LOP ROP L Y)
83 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (LOAD&PUSH 0)
14    (CALL1&PUSH 3)                      ; TEXSYM
16    (GETVALUE 0)                        ; X
18    (CDR)
19    (BIND 4)                            ; Y
21    (GETVALUE&PUSH 5)                   ; LOP
23    (GETVALUE&PUSH 6)                   ; ROP
25    (GETVALUE 4)                        ; Y
27    (JMPIFNOT L34)
29    (GETVALUE 4)                        ; Y
31    (CDR)
32    (JMPIF L47)
34    L34
34    (GETVALUE&PUSH 0)                   ; X
36    (GETVALUE&PUSH 1)                   ; L
38    (GETVALUE&PUSH 2)                   ; R
40    (T&PUSH)
41    (CALL 4 7)                          ; TEX-FUNCTION
44    (JMP L126)
47    L47
47    (NIL&PUSH)
48    (LOAD 2)
49    (BIND 5)                            ; LOP
51    (LOAD 10)
52    (BIND 6)                            ; ROP
54    (JMP L98)
56    L56
56    (LOAD 7)
57    (JMP L93)
59    L59
59    (LOAD&PUSH 6)
60    (GETVALUE 4)                        ; Y
62    (CAR&PUSH)
63    (GETVALUE&PUSH 1)                   ; L
65    (LOAD&PUSH 15)
66    (LIST&PUSH 1)
68    (GETVALUE&PUSH 5)                   ; LOP
70    (GETVALUE&PUSH 6)                   ; ROP
72    (CALL&PUSH 5 8)                     ; TEX
75    (CALLSR&STORE 2 35 6)               ; NCONC
79    (GETVALUE 4)                        ; Y
81    (CDR)
82    (SETVALUE 4)                        ; Y
84    (NIL)
85    (SETVALUE 1)                        ; L
87    (GETVALUE 4)                        ; Y
89    (CDR)
90    (JMPIFNOT L56)
92    (LOAD 13)
93    L93
93    (SETVALUE 6)                        ; ROP
95    (LOAD 13)
96    (SETVALUE 5)                        ; LOP
98    L98
98    (GETVALUE 4)                        ; Y
100   (CDR)
101   (JMPIF L59)
103   (LOAD&PUSH 6)
104   (GETVALUE 4)                        ; Y
106   (CAR&PUSH)
107   (GETVALUE&PUSH 1)                   ; L
109   (GETVALUE&PUSH 2)                   ; R
111   (GETVALUE&PUSH 5)                   ; LOP
113   (GETVALUE&PUSH 6)                   ; ROP
115   (CALL&PUSH 5 8)                     ; TEX
118   (CALLSR&STORE 2 35 6)               ; NCONC
122   (UNBIND 2)
124   (SKIP 1)
126   L126
126   (SKIP 2)
128   (UNBIND1)
129   (SKIP 2)
131   (UNBIND 3)
133   (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEX-NOFIX (X L R) ...)-22|
(CONST 0) = TEX-NOFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-NOFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-NOFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-NOFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-NOFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-NOFIX
8     (SKIP&RET 1)


Disassembly of function TEX-NOFIX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = ROP
(CONST 4) = TEX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP R L X)
18 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (GETVALUE&PUSH 1)                   ; L
15    (GETVALUE&PUSH 2)                   ; R
17    (GETVALUE 0)                        ; X
19    (CAR)
20    (CAR&PUSH)
21    (GETVALUE&PUSH 3)                   ; ROP
23    (CALL 5 4)                          ; TEX
26    (UNBIND 3)
28    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEX-MATCHFIX (X L R) ...)-23|
(CONST 0) = TEX-MATCHFIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MATCHFIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MATCHFIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MATCHFIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MATCHFIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MATCHFIX
8     (SKIP&RET 1)


Disassembly of function TEX-MATCHFIX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEXSYM
(CONST 4) = ","
(CONST 5) = TEX-LIST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R X L)
writes special variables : (X R L)
34 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 1)                   ; L
11    (GETVALUE 0)                        ; X
13    (CAR)
14    (CAR&PUSH)
15    (CALL1 3)                           ; TEXSYM
17    (CAR&PUSH)
18    (CALLSR 2 34)                       ; APPEND
21    (SETVALUE 1)                        ; L
23    (GETVALUE 0)                        ; X
25    (CAR)
26    (CAR&PUSH)
27    (CALL1 3)                           ; TEXSYM
29    (CDR&PUSH)
30    (GETVALUE&PUSH 2)                   ; R
32    (CALLSR 2 34)                       ; APPEND
35    (SETVALUE 2)                        ; R
37    (GETVALUE 0)                        ; X
39    (CDR&PUSH)
40    (NIL&PUSH)
41    (GETVALUE&PUSH 2)                   ; R
43    (CONST&PUSH 4)                      ; ","
44    (CALL 4 5)                          ; TEX-LIST
47    (SETVALUE 0)                        ; X
49    (GETVALUE&PUSH 1)                   ; L
51    (GETVALUE&PUSH 0)                   ; X
53    (CALLSR 2 34)                       ; APPEND
56    (UNBIND 3)
58    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEXSYM (X) ...)-24|
(CONST 0) = TEXSYM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEXSYM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEXSYM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEXSYM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEXSYM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEXSYM
8     (SKIP&RET 1)


Disassembly of function TEXSYM
(CONST 0) = X
(CONST 1) = TEXSYM
(CONST 2) = STRSYM
(CONST 3) = DISSYM
(CONST 4) = STRIPDOLLAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; TEXSYM
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L34)
12    (GETVALUE&PUSH 0)                   ; X
14    (CONST&PUSH 2)                      ; STRSYM
15    (PUSH-UNBOUND 1)
17    (CALLS2 132)                        ; GET
19    (JMPIF1 L34)
21    (GETVALUE&PUSH 0)                   ; X
23    (CONST&PUSH 3)                      ; DISSYM
24    (PUSH-UNBOUND 1)
26    (CALLS2 132)                        ; GET
28    (JMPIF1 L34)
30    (GETVALUE&PUSH 0)                   ; X
32    (CALL1 4)                           ; STRIPDOLLAR
34    L34
34    (UNBIND1)
35    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TEXWORD (X) ...)-25|
(CONST 0) = TEXWORD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEXWORD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEXWORD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEXWORD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEXWORD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEXWORD
8     (SKIP&RET 1)


Disassembly of function TEXWORD
(CONST 0) = X
(CONST 1) = TEXWORD
(CONST 2) = STRIPDOLLAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; TEXWORD
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L16)
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1 2)                           ; STRIPDOLLAR
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFPROP BIGFLOAT TEX-BIGFLOAT ...)-26|
(CONST 0) = BIGFLOAT
(CONST 1) = TEX
(CONST 2) = TEX-BIGFLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; BIGFLOAT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-BIGFLOAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-BIGFLOAT (X L R) ...)-27|
(CONST 0) = TEX-BIGFLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-BIGFLOAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-BIGFLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-BIGFLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-BIGFLOAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-BIGFLOAT
8     (SKIP&RET 1)


Disassembly of function TEX-BIGFLOAT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = FPFORMAT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
10 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1 3)                           ; FPFORMAT
13    (UNBIND 3)
15    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP MPROG "\\\\mathbf{block}\\\\>" ...)-28|
(CONST 0) = MPROG
(CONST 1) = TEXWORD
(CONST 2) = "\\mathbf{block}\\>"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPROG
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\mathbf{block}\\>"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ERF "\\\\mathrm{erf}" ...)-29|
(CONST 0) = %ERF
(CONST 1) = TEXWORD
(CONST 2) = "\\mathrm{erf}"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ERF
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\mathrm{erf}"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ERF "\\\\mathrm{erf}" ...)-30|
(CONST 0) = $ERF
(CONST 1) = TEXWORD
(CONST 2) = "\\mathrm{erf}"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ERF
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\mathrm{erf}"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $TRUE "\\\\mathbf{true}" ...)-31|
(CONST 0) = $TRUE
(CONST 1) = TEXWORD
(CONST 2) = "\\mathbf{true}"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRUE
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\mathbf{true}"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $FALSE "\\\\mathbf{false}" ...)-32|
(CONST 0) = $FALSE
(CONST 1) = TEXWORD
(CONST 2) = "\\mathbf{false}"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $FALSE
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\mathbf{false}"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MPROGN TEX-MATCHFIX ...)-33|
(CONST 0) = MPROGN
(CONST 1) = TEX
(CONST 2) = TEX-MATCHFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPROGN
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MATCHFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MPROGN (# "\\\\right)") ...)-34|
(CONST 0) = MPROGN
(CONST 1) = TEXSYM
(CONST 2) = (("\\left(") "\\right)")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPROGN
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; (("\\left(") "\\right)")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLIST TEX-MATCHFIX ...)-35|
(CONST 0) = MLIST
(CONST 1) = TEX
(CONST 2) = TEX-MATCHFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLIST
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MATCHFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLIST (# " \\\\right] ") ...)-36|
(CONST 0) = MLIST
(CONST 1) = TEXSYM
(CONST 2) = (("\\left[ ") " \\right] ")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLIST
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; (("\\left[ ") " \\right] ")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MABS TEX-MATCHFIX ...)-37|
(CONST 0) = MABS
(CONST 1) = TEX
(CONST 2) = TEX-MATCHFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MABS
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MATCHFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MABS (# "\\\\right\| ") ...)-38|
(CONST 0) = MABS
(CONST 1) = TEXSYM
(CONST 2) = (("\\left| ") "\\right| ")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MABS
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; (("\\left| ") "\\right| ")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MQAPPLY TEX-MQAPPLY ...)-39|
(CONST 0) = MQAPPLY
(CONST 1) = TEX
(CONST 2) = TEX-MQAPPLY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQAPPLY
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MQAPPLY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-MQAPPLY (X L R) ...)-40|
(CONST 0) = TEX-MQAPPLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MQAPPLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MQAPPLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MQAPPLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MQAPPLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MQAPPLY
8     (SKIP&RET 1)


Disassembly of function TEX-MQAPPLY
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = "("
(CONST 4) = LOP
(CONST 5) = MFUNCTION
(CONST 6) = TEX
(CONST 7) = ")"
(CONST 8) = ","
(CONST 9) = TEX-LIST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R LOP L X)
writes special variables : (R L)
31 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (GETVALUE&PUSH 1)                   ; L
15    (CONST&PUSH 3)                      ; "("
16    (LIST&PUSH 1)
18    (GETVALUE&PUSH 4)                   ; LOP
20    (CONST&PUSH 5)                      ; MFUNCTION
21    (CALL 5 6)                          ; TEX
24    (SETVALUE 1)                        ; L
26    (GETVALUE 0)                        ; X
28    (CDR)
29    (CDR&PUSH)
30    (NIL&PUSH)
31    (CONST&PUSH 7)                      ; ")"
32    (GETVALUE 2)                        ; R
34    (CONS&PUSH)
35    (CONST&PUSH 8)                      ; ","
36    (CALL 4 9)                          ; TEX-LIST
39    (SETVALUE 2)                        ; R
41    (GETVALUE&PUSH 1)                   ; L
43    (GETVALUE&PUSH 2)                   ; R
45    (CALLSR 2 34)                       ; APPEND
48    (UNBIND 3)
50    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP $%I "i" ...)-41|
(CONST 0) = $%I
(CONST 1) = TEXWORD
(CONST 2) = "i"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%I
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "i"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $%PI "\\\\pi" ...)-42|
(CONST 0) = $%PI
(CONST 1) = TEXWORD
(CONST 2) = "\\pi"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%PI
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\pi"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $%E "e" ...)-43|
(CONST 0) = $%E
(CONST 1) = TEXWORD
(CONST 2) = "e"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%E
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "e"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $INF "\\\\infty " ...)-44|
(CONST 0) = $INF
(CONST 1) = TEXWORD
(CONST 2) = "\\infty "
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INF
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\infty "
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $MINF " -\\\\infty " ...)-45|
(CONST 0) = $MINF
(CONST 1) = TEXWORD
(CONST 2) = " -\\infty "
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MINF
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; " -\\infty "
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %LAPLACE "{\\\\cal L}" ...)-46|
(CONST 0) = %LAPLACE
(CONST 1) = TEXWORD
(CONST 2) = "{\\cal L}"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LAPLACE
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "{\\cal L}"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ALPHA "\\\\alpha" ...)-47|
(CONST 0) = $ALPHA
(CONST 1) = TEXWORD
(CONST 2) = "\\alpha"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ALPHA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\alpha"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $BETA "\\\\beta" ...)-48|
(CONST 0) = $BETA
(CONST 1) = TEXWORD
(CONST 2) = "\\beta"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BETA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\beta"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $GAMMA "\\\\gamma" ...)-49|
(CONST 0) = $GAMMA
(CONST 1) = TEXWORD
(CONST 2) = "\\gamma"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GAMMA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\gamma"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %GAMMA "\\\\Gamma" ...)-50|
(CONST 0) = %GAMMA
(CONST 1) = TEXWORD
(CONST 2) = "\\Gamma"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %GAMMA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\Gamma"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $DELTA "\\\\delta" ...)-51|
(CONST 0) = $DELTA
(CONST 1) = TEXWORD
(CONST 2) = "\\delta"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DELTA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\delta"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $EPSILON "\\\\varepsilon" ...)-52|
(CONST 0) = $EPSILON
(CONST 1) = TEXWORD
(CONST 2) = "\\varepsilon"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EPSILON
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\varepsilon"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ZETA "\\\\zeta" ...)-53|
(CONST 0) = $ZETA
(CONST 1) = TEXWORD
(CONST 2) = "\\zeta"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ZETA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\zeta"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ETA "\\\\eta" ...)-54|
(CONST 0) = $ETA
(CONST 1) = TEXWORD
(CONST 2) = "\\eta"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ETA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\eta"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $THETA "\\\\vartheta" ...)-55|
(CONST 0) = $THETA
(CONST 1) = TEXWORD
(CONST 2) = "\\vartheta"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $THETA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\vartheta"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $IOTA "\\\\iota" ...)-56|
(CONST 0) = $IOTA
(CONST 1) = TEXWORD
(CONST 2) = "\\iota"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IOTA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\iota"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $KAPPA "\\\\varkappa" ...)-57|
(CONST 0) = $KAPPA
(CONST 1) = TEXWORD
(CONST 2) = "\\varkappa"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $KAPPA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\varkappa"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $MU "\\\\mu" ...)-58|
(CONST 0) = $MU
(CONST 1) = TEXWORD
(CONST 2) = "\\mu"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MU
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\mu"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $NU "\\\\nu" ...)-59|
(CONST 0) = $NU
(CONST 1) = TEXWORD
(CONST 2) = "\\nu"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NU
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\nu"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $XI "\\\\xi" ...)-60|
(CONST 0) = $XI
(CONST 1) = TEXWORD
(CONST 2) = "\\xi"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $XI
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\xi"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $PI "\\\\pi" ...)-61|
(CONST 0) = $PI
(CONST 1) = TEXWORD
(CONST 2) = "\\pi"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PI
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\pi"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $RHO "\\\\rho" ...)-62|
(CONST 0) = $RHO
(CONST 1) = TEXWORD
(CONST 2) = "\\rho"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $RHO
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\rho"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $SIGMA "\\\\sigma" ...)-63|
(CONST 0) = $SIGMA
(CONST 1) = TEXWORD
(CONST 2) = "\\sigma"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SIGMA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\sigma"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $TAU "\\\\tau" ...)-64|
(CONST 0) = $TAU
(CONST 1) = TEXWORD
(CONST 2) = "\\tau"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TAU
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\tau"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $UPSILON "\\\\upsilon" ...)-65|
(CONST 0) = $UPSILON
(CONST 1) = TEXWORD
(CONST 2) = "\\upsilon"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $UPSILON
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\upsilon"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $PHI "\\\\varphi" ...)-66|
(CONST 0) = $PHI
(CONST 1) = TEXWORD
(CONST 2) = "\\varphi"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PHI
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\varphi"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $CHI "\\\\chi" ...)-67|
(CONST 0) = $CHI
(CONST 1) = TEXWORD
(CONST 2) = "\\chi"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CHI
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\chi"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $PSI "\\\\psi" ...)-68|
(CONST 0) = $PSI
(CONST 1) = TEXWORD
(CONST 2) = "\\psi"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSI
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\psi"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $OMEGA "\\\\omega" ...)-69|
(CONST 0) = $OMEGA
(CONST 1) = TEXWORD
(CONST 2) = "\\omega"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OMEGA
1     (CONST&PUSH 1)                      ; TEXWORD
2     (CONST&PUSH 2)                      ; "\\omega"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MQUOTE TEX-PREFIX ...)-70|
(CONST 0) = MQUOTE
(CONST 1) = TEX
(CONST 2) = TEX-PREFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTE
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-PREFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MQUOTE ("'") ...)-71|
(CONST 0) = MQUOTE
(CONST 1) = TEXSYM
(CONST 2) = ("'")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTE
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("'")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MQUOTE 201 ...)-72|
(CONST 0) = MQUOTE
(CONST 1) = TEX-RBP
(CONST 2) = 201
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTE
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 201
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MSETQ TEX-INFIX ...)-73|
(CONST 0) = MSETQ
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETQ
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MSETQ (":") ...)-74|
(CONST 0) = MSETQ
(CONST 1) = TEXSYM
(CONST 2) = (":")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETQ
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; (":")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MSETQ 180 ...)-75|
(CONST 0) = MSETQ
(CONST 1) = TEX-RBP
(CONST 2) = 180
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETQ
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 180
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MSETQ 20 ...)-76|
(CONST 0) = MSETQ
(CONST 1) = TEX-RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSETQ
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MSET TEX-INFIX ...)-77|
(CONST 0) = MSET
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSET
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MSET ("::") ...)-78|
(CONST 0) = MSET
(CONST 1) = TEXSYM
(CONST 2) = ("::")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSET
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("::")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MSET 180 ...)-79|
(CONST 0) = MSET
(CONST 1) = TEX-LBP
(CONST 2) = 180
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSET
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 180
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MSET 20 ...)-80|
(CONST 0) = MSET
(CONST 1) = TEX-RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MSET
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDEFINE TEX-INFIX ...)-81|
(CONST 0) = MDEFINE
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFINE
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDEFINE (":=") ...)-82|
(CONST 0) = MDEFINE
(CONST 1) = TEXSYM
(CONST 2) = (":=")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFINE
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; (":=")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDEFINE 180 ...)-83|
(CONST 0) = MDEFINE
(CONST 1) = TEX-LBP
(CONST 2) = 180
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFINE
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 180
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDEFINE 20 ...)-84|
(CONST 0) = MDEFINE
(CONST 1) = TEX-RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFINE
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDEFMACRO TEX-INFIX ...)-85|
(CONST 0) = MDEFMACRO
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFMACRO
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDEFMACRO ("::=") ...)-86|
(CONST 0) = MDEFMACRO
(CONST 1) = TEXSYM
(CONST 2) = ("::=")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFMACRO
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("::=")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDEFMACRO 180 ...)-87|
(CONST 0) = MDEFMACRO
(CONST 1) = TEX-LBP
(CONST 2) = 180
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFMACRO
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 180
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDEFMACRO 20 ...)-88|
(CONST 0) = MDEFMACRO
(CONST 1) = TEX-RBP
(CONST 2) = 20
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDEFMACRO
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 20
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MARROW TEX-INFIX ...)-89|
(CONST 0) = MARROW
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARROW
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MARROW ("\\\\rightarrow ") ...)-90|
(CONST 0) = MARROW
(CONST 1) = TEXSYM
(CONST 2) = ("\\rightarrow ")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARROW
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("\\rightarrow ")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MARROW 25 ...)-91|
(CONST 0) = MARROW
(CONST 1) = TEX-LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARROW
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MARROW 25 ...)-92|
(CONST 0) = MARROW
(CONST 1) = TEX-RBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MARROW
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MFACTORIAL TEX-POSTFIX ...)-93|
(CONST 0) = MFACTORIAL
(CONST 1) = TEX
(CONST 2) = TEX-POSTFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFACTORIAL
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-POSTFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MFACTORIAL ("!") ...)-94|
(CONST 0) = MFACTORIAL
(CONST 1) = TEXSYM
(CONST 2) = ("!")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFACTORIAL
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("!")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MFACTORIAL 160 ...)-95|
(CONST 0) = MFACTORIAL
(CONST 1) = TEX-LBP
(CONST 2) = 160
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MFACTORIAL
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 160
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MEXPT TEX-MEXPT ...)-96|
(CONST 0) = MEXPT
(CONST 1) = TEX
(CONST 2) = TEX-MEXPT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEXPT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MEXPT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MEXPT 140 ...)-97|
(CONST 0) = MEXPT
(CONST 1) = TEX-LBP
(CONST 2) = 140
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEXPT
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 140
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MEXPT 139 ...)-98|
(CONST 0) = MEXPT
(CONST 1) = TEX-RBP
(CONST 2) = 139
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEXPT
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 139
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %SUM 110 ...)-99|
(CONST 0) = %SUM
(CONST 1) = TEX-RBP
(CONST 2) = 110
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SUM
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 110
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %PRODUCT 115 ...)-100|
(CONST 0) = %PRODUCT
(CONST 1) = TEX-RBP
(CONST 2) = 115
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PRODUCT
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 115
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-MEXPT (X L R) ...)-101|
(CONST 0) = TEX-MEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MEXPT
8     (SKIP&RET 1)


Disassembly of function TEX-MEXPT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = MNCEXPT
(CONST 4) = MEXPT
(CONST 5) = F
(CONST 6) = 1
(CONST 7) = GETCHAR
(CONST 8) = (% $)
(CONST 9) = MEMQ
(CONST 10) = (%SUM %PRODUCT %DERIVATIVE %INTEGRATE %AT %LSUM %LIMIT)
(CONST 11) = 0
(CONST 12) = (MEXPT)
(CONST 13) = MPAREN
(CONST 14) = TEX
(CONST 15) = TEX-PREFIX
(CONST 16) = (MPROGN)
(CONST 17) = LOP
(CONST 18) = NFORMAT
(CONST 19) = MMMINUSP
(CONST 20) = ("^ {-\\langle ")
(CONST 21) = "\\rangle }"
(CONST 22) = ("^ {- ")
(CONST 23) = " }"
(CONST 24) = "^{\\langle "
(CONST 25) = "\\rangle}"
(CONST 26) = 10
(CONST 27) = "^"
(CONST 28) = ""
(CONST 29) = "^{"
(CONST 30) = "}"
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (LOP R L F X)
writes special variables : (X R L)
203 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (CONST 3)                           ; MNCEXPT
14    (EQ)
15    (PUSH)
16    (GETVALUE 0)                        ; X
18    (CAR)
19    (CAR&PUSH)
20    (JMPIFNOTEQTO 4 L227)               ; MEXPT
24    (GETVALUE 0)                        ; X
26    (CDR)
27    (CAR&PUSH)
28    (LOAD&PUSH 0)
29    (CALLS2&JMPIFNOT 4 L41)             ; CONSP
32    (LOAD 0)
33    (CAR)
34    (CAR&PUSH)
35    (CALLS2&JMPIFNOT 5 L41)             ; ATOM
38    (LOAD 0)
39    (CAR)
40    (CAR)
41    L41
41    (BIND 5)                            ; F
43    (GETVALUE 5)                        ; F
45    (JMPIFNOT L49)
47    (LOAD 3)
48    (CDR)
49    L49
49    (PUSH)
50    (GETVALUE 0)                        ; X
52    (CDR)
53    (CDR)
54    (CAR&PUSH)
55    (GETVALUE 5)                        ; F
57    (JMPIFNOT L97)
59    (PUSH)
60    (CONST&PUSH 6)                      ; 1
61    (CALL2&PUSH 7)                      ; GETCHAR
63    (CONST&PUSH 8)                      ; (% $)
64    (CALL2&JMPIFNOT 9 L97)              ; MEMQ
67    (GETVALUE&PUSH 5)                   ; F
69    (CONST&PUSH 10)                     ; (%SUM %PRODUCT %DERIVATIVE ...)
70    (CALL2 9)                           ; MEMQ
72    (NOT)
73    (JMPIFNOT L97)
75    (LOAD 0)
76    (JMPIFCONSP L84)
78    (LOAD&PUSH 0)
79    (CALLS2 8)                          ; NUMBERP
81    (NOT)
82    (JMPIF L97)
84    L84
84    (LOAD&PUSH 0)
85    (CALLS2&JMPIFNOT 5 L97)             ; ATOM
88    (LOAD&PUSH 0)
89    (CALLS2&JMPIFNOT 8 L97)             ; NUMBERP
92    (LOAD&PUSH 0)
93    (CONST&PUSH 11)                     ; 0
94    (CALLSR 1 48)                       ; >
97    L97
97    (PUSH)
98    (LOAD&JMPIFNOT 0 L218)
102   (CONST&PUSH 12)                     ; (MEXPT)
103   (GETVALUE&PUSH 5)                   ; F
105   (LOAD&PUSH 3)
106   (LIST&PUSH 3)
108   (GETVALUE&PUSH 1)                   ; L
110   (NIL&PUSH)
111   (CONST&PUSH 13)                     ; MPAREN
112   (CONST&PUSH 13)                     ; MPAREN
113   (CALL 5 14)                         ; TEX
116   (SETVALUE 1)                        ; L
118   (LOAD 2)
119   (CDR)
120   (JMPIF L132)
122   (GETVALUE&PUSH 5)                   ; F
124   (CONST&PUSH 14)                     ; TEX
125   (PUSH-UNBOUND 1)
127   (CALLS2&PUSH 132)                   ; GET
129   (JMPIFEQTO 15 L149)                 ; TEX-PREFIX
132   L132
132   (CONST&PUSH 16)                     ; (MPROGN)
133   (LOAD 3)
134   (CONS&PUSH)
135   (NIL&PUSH)
136   (GETVALUE&PUSH 2)                   ; R
138   (CONST&PUSH 13)                     ; MPAREN
139   (CONST 13)                          ; MPAREN
140   L140
140   (PUSH)
141   (CALL 5 14)                         ; TEX
144   (SETVALUE 2)                        ; R
146   (JMP L219)
149   L149
149   (LOAD&CAR&PUSH 2)
151   (NIL&PUSH)
152   (GETVALUE&PUSH 2)                   ; R
154   (GETVALUE&PUSH 5)                   ; F
156   (CONST 13)                          ; MPAREN
157   (JMP L140)
159   L159
159   (GETVALUE 0)                        ; X
161   (CDR)
162   (CAR&PUSH)
163   (CONST&PUSH 20)                     ; ("^ {-\\langle ")
164   (CONST&PUSH 21)                     ; "\\rangle }"
165   (GETVALUE 2)                        ; R
167   (CONS&PUSH)
168   (CONST&PUSH 13)                     ; MPAREN
169   (CONST 13)                          ; MPAREN
170   (JMP L288)
173   L173
173   (LOAD&JMPIF 0 L159)
176   (GETVALUE 0)                        ; X
178   (CDR)
179   (CAR&PUSH)
180   (CONST&PUSH 22)                     ; ("^ {- ")
181   (CONST&PUSH 23)                     ; " }"
182   (GETVALUE 2)                        ; R
184   (CONS&PUSH)
185   (CONST&PUSH 13)                     ; MPAREN
186   (CONST 13)                          ; MPAREN
187   (JMP L288)
190   L190
190   (GETVALUE&PUSH 0)                   ; X
192   (CONST&PUSH 24)                     ; "^{\\langle "
193   (LIST&PUSH 1)
195   (CONST&PUSH 25)                     ; "\\rangle}"
196   (GETVALUE 2)                        ; R
198   (CONS&PUSH)
199   (CONST&PUSH 13)                     ; MPAREN
200   (CONST 13)                          ; MPAREN
201   (JMP L288)
204   L204
204   (GETVALUE&PUSH 0)                   ; X
206   (CONST&PUSH 27)                     ; "^"
207   (LIST&PUSH 1)
209   (CONST&PUSH 28)                     ; ""
210   (GETVALUE 2)                        ; R
212   (CONS&PUSH)
213   (CONST&PUSH 13)                     ; MPAREN
214   (CONST 13)                          ; MPAREN
215   (JMP L288)
218   L218
218   (NIL)
219   L219
219   (SKIP 3)
221   (UNBIND1)
222   (SKIP 1)
224   (JMPIF L294)
227   L227
227   (GETVALUE 0)                        ; X
229   (CDR)
230   (CAR&PUSH)
231   (GETVALUE&PUSH 1)                   ; L
233   (NIL&PUSH)
234   (GETVALUE&PUSH 17)                  ; LOP
236   (GETVALUE 0)                        ; X
238   (CAR)
239   (CAR&PUSH)
240   (CALL 5 14)                         ; TEX
243   (SETVALUE 1)                        ; L
245   (GETVALUE 0)                        ; X
247   (CDR)
248   (CDR)
249   (CAR&PUSH)
250   (CALL1 18)                          ; NFORMAT
252   (SETVALUE 0)                        ; X
254   (PUSH)
255   (CALL1&JMPIF 19 L173)               ; MMMINUSP
259   (LOAD&JMPIF 0 L190)
263   (GETVALUE&PUSH 0)                   ; X
265   (CALLS2&JMPIFNOT 8 L276)            ; NUMBERP
268   (GETVALUE&PUSH 0)                   ; X
270   (CONST&PUSH 26)                     ; 10
271   (CALLSR&JMPIF 1 47 L204)            ; <
276   L276
276   (GETVALUE&PUSH 0)                   ; X
278   (CONST&PUSH 29)                     ; "^{"
279   (LIST&PUSH 1)
281   (CONST&PUSH 30)                     ; "}"
283   (GETVALUE 2)                        ; R
285   (CONS&PUSH)
286   (CONST&PUSH 13)                     ; MPAREN
287   (CONST 13)                          ; MPAREN
288   L288
288   (PUSH)
289   (CALL 5 14)                         ; TEX
292   (SETVALUE 2)                        ; R
294   L294
294   (GETVALUE&PUSH 1)                   ; L
296   (GETVALUE&PUSH 2)                   ; R
298   (CALLSR 2 34)                       ; APPEND
301   (SKIP 1)
303   (UNBIND 3)
305   (SKIP&RET 4)


Disassembly of function #:|(DEFPROP MNCEXPT TEX-MEXPT ...)-102|
(CONST 0) = MNCEXPT
(CONST 1) = TEX
(CONST 2) = TEX-MEXPT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCEXPT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MEXPT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNCEXPT 135 ...)-103|
(CONST 0) = MNCEXPT
(CONST 1) = TEX-LBP
(CONST 2) = 135
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCEXPT
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 135
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNCEXPT 134 ...)-104|
(CONST 0) = MNCEXPT
(CONST 1) = TEX-RBP
(CONST 2) = 134
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCEXPT
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 134
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNCTIMES TEX-NARY ...)-105|
(CONST 0) = MNCTIMES
(CONST 1) = TEX
(CONST 2) = TEX-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCTIMES
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNCTIMES "\\\\cdot " ...)-106|
(CONST 0) = MNCTIMES
(CONST 1) = TEXSYM
(CONST 2) = "\\cdot "
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCTIMES
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; "\\cdot "
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNCTIMES 110 ...)-107|
(CONST 0) = MNCTIMES
(CONST 1) = TEX-LBP
(CONST 2) = 110
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCTIMES
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 110
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNCTIMES 109 ...)-108|
(CONST 0) = MNCTIMES
(CONST 1) = TEX-RBP
(CONST 2) = 109
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNCTIMES
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 109
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MTIMES TEX-NARY ...)-109|
(CONST 0) = MTIMES
(CONST 1) = TEX
(CONST 2) = TEX-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMES
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MTIMES "\\\\," ...)-110|
(CONST 0) = MTIMES
(CONST 1) = TEXSYM
(CONST 2) = "\\,"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMES
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; "\\,"
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MTIMES 120 ...)-111|
(CONST 0) = MTIMES
(CONST 1) = TEX-LBP
(CONST 2) = 120
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMES
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 120
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MTIMES 120 ...)-112|
(CONST 0) = MTIMES
(CONST 1) = TEX-RBP
(CONST 2) = 120
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MTIMES
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 120
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %SQRT TEX-SQRT ...)-113|
(CONST 0) = %SQRT
(CONST 1) = TEX
(CONST 2) = TEX-SQRT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SQRT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-SQRT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-SQRT (X L R) ...)-114|
(CONST 0) = TEX-SQRT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-SQRT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-SQRT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-SQRT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-SQRT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-SQRT
8     (SKIP&RET 1)


Disassembly of function TEX-SQRT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = ("\\sqrt{")
(CONST 4) = ("}")
(CONST 5) = MPAREN
(CONST 6) = TEX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L X)
20 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (GETVALUE&PUSH 1)                   ; L
15    (CONST&PUSH 3)                      ; ("\\sqrt{")
16    (CALLSR&PUSH 2 34)                  ; APPEND
19    (CONST&PUSH 4)                      ; ("}")
20    (GETVALUE&PUSH 2)                   ; R
22    (CALLSR&PUSH 2 34)                  ; APPEND
25    (CONST&PUSH 5)                      ; MPAREN
26    (CONST&PUSH 5)                      ; MPAREN
27    (CALL 5 6)                          ; TEX
30    (UNBIND 3)
32    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP $CUBRT TEX-CUBRT ...)-115|
(CONST 0) = $CUBRT
(CONST 1) = TEX
(CONST 2) = TEX-CUBRT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CUBRT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-CUBRT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-CUBRT (X L R) ...)-116|
(CONST 0) = TEX-CUBRT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-CUBRT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-CUBRT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-CUBRT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-CUBRT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-CUBRT
8     (SKIP&RET 1)


Disassembly of function TEX-CUBRT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = ("\\root 3 \\of{")
(CONST 4) = ("}")
(CONST 5) = MPAREN
(CONST 6) = TEX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L X)
20 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (GETVALUE&PUSH 1)                   ; L
15    (CONST&PUSH 3)                      ; ("\\root 3 \\of{")
16    (CALLSR&PUSH 2 34)                  ; APPEND
19    (CONST&PUSH 4)                      ; ("}")
20    (GETVALUE&PUSH 2)                   ; R
22    (CALLSR&PUSH 2 34)                  ; APPEND
25    (CONST&PUSH 5)                      ; MPAREN
26    (CONST&PUSH 5)                      ; MPAREN
27    (CALL 5 6)                          ; TEX
30    (UNBIND 3)
32    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP MQUOTIENT TEX-MQUOTIENT ...)-117|
(CONST 0) = MQUOTIENT
(CONST 1) = TEX
(CONST 2) = TEX-MQUOTIENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTIENT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MQUOTIENT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MQUOTIENT ("\\\\over") ...)-118|
(CONST 0) = MQUOTIENT
(CONST 1) = TEXSYM
(CONST 2) = ("\\over")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTIENT
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("\\over")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MQUOTIENT 122 ...)-119|
(CONST 0) = MQUOTIENT
(CONST 1) = TEX-LBP
(CONST 2) = 122
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTIENT
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 122
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MQUOTIENT 123 ...)-120|
(CONST 0) = MQUOTIENT
(CONST 1) = TEX-RBP
(CONST 2) = 123
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MQUOTIENT
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 123
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-MQUOTIENT (X L R) ...)-121|
(CONST 0) = TEX-MQUOTIENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MQUOTIENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MQUOTIENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MQUOTIENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MQUOTIENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MQUOTIENT
8     (SKIP&RET 1)


Disassembly of function TEX-MQUOTIENT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = WNA-ERR
(CONST 4) = ("{{")
(CONST 5) = MPAREN
(CONST 6) = TEX
(CONST 7) = "}\\over{"
(CONST 8) = ("}}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L X)
writes special variables : (R L)
50 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CDR)
13    (JMPIFNOT L22)
15    (GETVALUE 0)                        ; X
17    (CDR)
18    (CDR)
19    (CDR)
20    (JMPIFNOT L28)
22    L22
22    (GETVALUE 0)                        ; X
24    (CAR)
25    (CAR&PUSH)
26    (CALL1 3)                           ; WNA-ERR
28    L28
28    (GETVALUE 0)                        ; X
30    (CDR)
31    (CAR&PUSH)
32    (GETVALUE&PUSH 1)                   ; L
34    (CONST&PUSH 4)                      ; ("{{")
35    (CALLSR&PUSH 2 34)                  ; APPEND
38    (NIL&PUSH)
39    (CONST&PUSH 5)                      ; MPAREN
40    (CONST&PUSH 5)                      ; MPAREN
41    (CALL 5 6)                          ; TEX
44    (SETVALUE 1)                        ; L
46    (GETVALUE 0)                        ; X
48    (CDR)
49    (CDR)
50    (CAR&PUSH)
51    (CONST&PUSH 7)                      ; "}\\over{"
52    (LIST&PUSH 1)
54    (CONST&PUSH 8)                      ; ("}}")
55    (GETVALUE&PUSH 2)                   ; R
57    (CALLSR&PUSH 2 34)                  ; APPEND
60    (CONST&PUSH 5)                      ; MPAREN
61    (CONST&PUSH 5)                      ; MPAREN
62    (CALL 5 6)                          ; TEX
65    (SETVALUE 2)                        ; R
67    (GETVALUE&PUSH 1)                   ; L
69    (GETVALUE&PUSH 2)                   ; R
71    (CALLSR 2 34)                       ; APPEND
74    (UNBIND 3)
76    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP $MATRIX TEX-MATRIX ...)-122|
(CONST 0) = $MATRIX
(CONST 1) = TEX
(CONST 2) = TEX-MATRIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MATRIX
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MATRIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-MATRIX (X L R) ...)-123|
(CONST 0) = TEX-MATRIX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MATRIX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MATRIX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MATRIX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MATRIX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MATRIX
8     (SKIP&RET 1)


Disassembly of function TEX-MATRIX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = ("\\pmatrix{")
(CONST 4) = Y
(CONST 5) = "\\cr "
(CONST 6) = "&"
(CONST 7) = TEX-LIST
(CONST 8) = ("}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R Y X L)
40 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 1)                   ; L
11    (CONST&PUSH 3)                      ; ("\\pmatrix{")
12    (NIL&PUSH)
13    (GETVALUE 0)                        ; X
15    (CDR&PUSH)
16    (JMP L44)
18    L18
18    (LOAD&CAR&PUSH 0)
20    (LOAD 0)
21    (BIND 4)                            ; Y
23    (GETVALUE 4)                        ; Y
25    (CDR&PUSH)
26    (NIL&PUSH)
27    (CONST&PUSH 5)                      ; "\\cr "
28    (LIST&PUSH 1)
30    (CONST&PUSH 6)                      ; "&"
31    (CALL 4 7)                          ; TEX-LIST
34    (UNBIND1)
35    (PUSH)
36    (LOAD&PUSH 3)
37    (CALLS1&STORE 163 2)                ; NRECONC
40    (SKIP 1)
42    (LOAD&CDR&STORE 0)
44    L44
44    (LOAD&PUSH 0)
45    (CALLS1&JMPIFNOT 146 L18)           ; ENDP
48    (SKIP 1)
50    (LOAD&PUSH 0)
51    (CALLS1&STORE 164 0)                ; SYSTEM::LIST-NREVERSE
54    (CONST&PUSH 8)                      ; ("}")
55    (GETVALUE&PUSH 2)                   ; R
57    (CALLSR 5 34)                       ; APPEND
60    (UNBIND 3)
62    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP %SUM TEX-SUM ...)-124|
(CONST 0) = %SUM
(CONST 1) = TEX
(CONST 2) = TEX-SUM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SUM
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-SUM
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %LSUM TEX-LSUM ...)-125|
(CONST 0) = %LSUM
(CONST 1) = TEX
(CONST 2) = TEX-LSUM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LSUM
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-LSUM
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %PRODUCT TEX-SUM ...)-126|
(CONST 0) = %PRODUCT
(CONST 1) = TEX
(CONST 2) = TEX-SUM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PRODUCT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-SUM
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-LSUM (X L R) ...)-127|
(CONST 0) = TEX-LSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-LSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-LSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-LSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-LSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-LSUM
8     (SKIP&RET 1)


Disassembly of function TEX-LSUM
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = %LSUM
(CONST 4) = "\\sum_{"
(CONST 5) = MPAREN
(CONST 6) = ROP
(CONST 7) = TEX
(CONST 8) = (MIN SIMP)
(CONST 9) = "}}{"
(CONST 10) = ("}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L ROP X)
53 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFEQTO 3 L77)                   ; %LSUM
16    (NIL)
17    L17
17    (PUSH)
18    (GETVALUE 0)                        ; X
20    (CDR)
21    (CAR&PUSH)
22    (PUSH-NIL 2)
24    (CONST&PUSH 5)                      ; MPAREN
25    (GETVALUE&PUSH 6)                   ; ROP
27    (CALL&PUSH 5 7)                     ; TEX
30    (CONST&PUSH 8)                      ; (MIN SIMP)
31    (GETVALUE 0)                        ; X
33    (CDR)
34    (CDR)
35    (CAR&PUSH)
36    (GETVALUE 0)                        ; X
38    (CDR)
39    (CDR)
40    (CDR)
41    (CAR&PUSH)
42    (LIST&PUSH 3)
44    (PUSH-NIL 2)
46    (CONST&PUSH 5)                      ; MPAREN
47    (CONST&PUSH 5)                      ; MPAREN
48    (CALL&PUSH 5 7)                     ; TEX
51    (GETVALUE&PUSH 1)                   ; L
53    (LOAD&PUSH 3)
54    (LOAD&PUSH 2)
55    (CONST&PUSH 9)                      ; "}}{"
56    (LOAD&PUSH 5)
57    (CONST&PUSH 10)                     ; ("}")
58    (CALLSR 2 34)                       ; APPEND
61    (CONS&PUSH)
62    (CALLSR 2 34)                       ; APPEND
65    (CONS&PUSH)
66    (GETVALUE&PUSH 2)                   ; R
68    (CALLSR 3 34)                       ; APPEND
71    (SKIP 3)
73    (UNBIND 3)
75    (SKIP&RET 4)
77    L77
77    (CONST 4)                           ; "\\sum_{"
78    (JMP L17)


Disassembly of function #:|(DEFUN TEX-SUM (X L R) ...)-128|
(CONST 0) = TEX-SUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-SUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-SUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-SUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-SUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-SUM
8     (SKIP&RET 1)


Disassembly of function TEX-SUM
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = %SUM
(CONST 4) = "\\sum_{"
(CONST 5) = %PRODUCT
(CONST 6) = "\\prod_{"
(CONST 7) = MPAREN
(CONST 8) = ROP
(CONST 9) = TEX
(CONST 10) = (MEQUAL SIMP)
(CONST 11) = "}^{"
(CONST 12) = "}{"
(CONST 13) = ("}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L ROP X)
74 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CAR)
12    (CAR&PUSH)
13    (JMPIFEQTO 3 L106)                  ; %SUM
17    (GETVALUE 0)                        ; X
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFEQTO 5 L110)                  ; %PRODUCT
25    (NIL)
26    L26
26    (PUSH)
27    (GETVALUE 0)                        ; X
29    (CDR)
30    (CAR&PUSH)
31    (PUSH-NIL 2)
33    (CONST&PUSH 7)                      ; MPAREN
34    (GETVALUE&PUSH 8)                   ; ROP
36    (CALL&PUSH 5 9)                     ; TEX
39    (CONST&PUSH 10)                     ; (MEQUAL SIMP)
40    (GETVALUE 0)                        ; X
42    (CDR)
43    (CDR)
44    (CAR&PUSH)
45    (GETVALUE 0)                        ; X
47    (CDR)
48    (CDR)
49    (CDR)
50    (CAR&PUSH)
51    (LIST&PUSH 3)
53    (PUSH-NIL 2)
55    (CONST&PUSH 7)                      ; MPAREN
56    (CONST&PUSH 7)                      ; MPAREN
57    (CALL&PUSH 5 9)                     ; TEX
60    (GETVALUE 0)                        ; X
62    (CDR)
63    (CDR)
64    (CDR)
65    (CDR)
66    (CAR&PUSH)
67    (PUSH-NIL 2)
69    (CONST&PUSH 7)                      ; MPAREN
70    (CONST&PUSH 7)                      ; MPAREN
71    (CALL&PUSH 5 9)                     ; TEX
74    (GETVALUE&PUSH 1)                   ; L
76    (LOAD&PUSH 4)
77    (LOAD&PUSH 3)
78    (CONST&PUSH 11)                     ; "}^{"
79    (LOAD&PUSH 4)
80    (CONST&PUSH 12)                     ; "}{"
81    (LOAD&PUSH 8)
82    (CONST&PUSH 13)                     ; ("}")
83    (CALLSR 2 34)                       ; APPEND
86    (CONS&PUSH)
87    (CALLSR 2 34)                       ; APPEND
90    (CONS&PUSH)
91    (CALLSR 2 34)                       ; APPEND
94    (CONS&PUSH)
95    (GETVALUE&PUSH 2)                   ; R
97    (CALLSR 3 34)                       ; APPEND
100   (SKIP 4)
102   (UNBIND 3)
104   (SKIP&RET 4)
106   L106
106   (CONST 4)                           ; "\\sum_{"
107   (JMP L26)
110   L110
110   (CONST 6)                           ; "\\prod_{"
111   (JMP L26)


Disassembly of function #:|(DEFPROP %INTEGRATE TEX-INT ...)-129|
(CONST 0) = %INTEGRATE
(CONST 1) = TEX
(CONST 2) = TEX-INT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INTEGRATE
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-INT (X L R) ...)-130|
(CONST 0) = TEX-INT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-INT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-INT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-INT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-INT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-INT
8     (SKIP&RET 1)


Disassembly of function TEX-INT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = MPAREN
(CONST 4) = TEX
(CONST 5) = ROP
(CONST 6) = VAR
(CONST 7) = 3
(CONST 8) = "\\int {"
(CONST 9) = "}{\\>d"
(CONST 10) = ("}")
(CONST 11) = 4
(CONST 12) = HI
(CONST 13) = "\\int_{"
(CONST 14) = "}^{"
(CONST 15) = "}{"
(CONST 16) = "\\>d"
(CONST 17) = ("}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R VAR HI L ROP X)
82 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (PUSH-NIL 2)
15    (CONST&PUSH 3)                      ; MPAREN
16    (CONST&PUSH 3)                      ; MPAREN
17    (CALL&PUSH 5 4)                     ; TEX
20    (GETVALUE 0)                        ; X
22    (CDR)
23    (CDR)
24    (CAR&PUSH)
25    (PUSH-NIL 2)
27    (CONST&PUSH 3)                      ; MPAREN
28    (GETVALUE&PUSH 5)                   ; ROP
30    (CALL 5 4)                          ; TEX
33    (BIND 6)                            ; VAR
35    (GETVALUE&PUSH 0)                   ; X
37    (CALLS2&PUSH 71)                    ; LENGTH
39    (CONST&PUSH 7)                      ; 3
40    (CALLSR&JMPIF 1 45 L115)            ; =
45    (CONST&PUSH 7)                      ; 3
46    (GETVALUE&PUSH 0)                   ; X
48    (CALLS1&PUSH 148)                   ; NTH
50    (PUSH-NIL 2)
52    (CONST&PUSH 3)                      ; MPAREN
53    (CONST&PUSH 3)                      ; MPAREN
54    (CALL&PUSH 5 4)                     ; TEX
57    (CONST&PUSH 11)                     ; 4
58    (GETVALUE&PUSH 0)                   ; X
60    (CALLS1&PUSH 148)                   ; NTH
62    (PUSH-NIL 2)
64    (CONST&PUSH 3)                      ; MPAREN
65    (CONST&PUSH 3)                      ; MPAREN
66    (CALL 5 4)                          ; TEX
69    (BIND 12)                           ; HI
71    (GETVALUE&PUSH 1)                   ; L
73    (CONST&PUSH 13)                     ; "\\int_{"
74    (LOAD&PUSH 5)
75    (CONST&PUSH 14)                     ; "}^{"
76    (GETVALUE&PUSH 12)                  ; HI
78    (CONST&PUSH 15)                     ; "}{"
79    (LOAD&PUSH 13)
80    (CONST&PUSH 16)                     ; "\\>d"
81    (GETVALUE&PUSH 6)                   ; VAR
83    (CONST&PUSH 17)                     ; ("}")
84    (CALLSR 2 34)                       ; APPEND
87    (CONS&PUSH)
88    (CALLSR 2 34)                       ; APPEND
91    (CONS&PUSH)
92    (CALLSR 2 34)                       ; APPEND
95    (CONS&PUSH)
96    (CALLSR 2 34)                       ; APPEND
99    (CONS&PUSH)
100   (GETVALUE&PUSH 2)                   ; R
102   (CALLSR 3 34)                       ; APPEND
105   (UNBIND1)
106   (SKIP 1)
108   L108
108   (UNBIND1)
109   (SKIP 1)
111   (UNBIND 3)
113   (SKIP&RET 4)
115   L115
115   (GETVALUE&PUSH 1)                   ; L
117   (CONST&PUSH 8)                      ; "\\int {"
118   (LOAD&PUSH 5)
119   (CONST&PUSH 9)                      ; "}{\\>d"
120   (GETVALUE&PUSH 6)                   ; VAR
122   (CONST&PUSH 10)                     ; ("}")
123   (CALLSR 2 34)                       ; APPEND
126   (CONS&PUSH)
127   (CALLSR 2 34)                       ; APPEND
130   (CONS&PUSH)
131   (GETVALUE&PUSH 2)                   ; R
133   (CALLSR 3 34)                       ; APPEND
136   (JMP L108)


Disassembly of function #:|(DEFPROP %LIMIT TEX-LIMIT ...)-131|
(CONST 0) = %LIMIT
(CONST 1) = TEX
(CONST 2) = TEX-LIMIT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %LIMIT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-LIMIT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-LIMIT (X L R) ...)-132|
(CONST 0) = TEX-LIMIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-LIMIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-LIMIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-LIMIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-LIMIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-LIMIT
8     (SKIP&RET 1)


Disassembly of function TEX-LIMIT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = MPAREN
(CONST 4) = ROP
(CONST 5) = TEX
(CONST 6) = "\\rightarrow "
(CONST 7) = =
(CONST 8) = (MEQUAL SIMP)
(CONST 9) = "\\lim_{"
(CONST 10) = "}{"
(CONST 11) = ("}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L ROP X)
47 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (PUSH-NIL 2)
15    (CONST&PUSH 3)                      ; MPAREN
16    (GETVALUE&PUSH 4)                   ; ROP
18    (CALL&PUSH 5 5)                     ; TEX
21    (CONST&PUSH 6)                      ; "\\rightarrow "
22    (CONST&PUSH 7)                      ; =
23    (CONST&PUSH 8)                      ; (MEQUAL SIMP)
24    (GETVALUE 0)                        ; X
26    (CDR)
27    (CDR)
28    (CAR&PUSH)
29    (GETVALUE 0)                        ; X
31    (CDR)
32    (CDR)
33    (CDR)
34    (CAR&PUSH)
35    (LIST&PUSH 3)
37    (PUSH-NIL 2)
39    (CONST&PUSH 3)                      ; MPAREN
40    (CONST&PUSH 3)                      ; MPAREN
41    (CALL&PUSH 5 5)                     ; TEX
44    (PUSH-UNBOUND 3)
46    (CALLS1&PUSH 172)                   ; SUBST
48    (GETVALUE&PUSH 1)                   ; L
50    (CONST&PUSH 9)                      ; "\\lim_{"
51    (LOAD&PUSH 2)
52    (CONST&PUSH 10)                     ; "}{"
53    (LOAD&PUSH 5)
54    (CONST&PUSH 11)                     ; ("}")
55    (CALLSR 2 34)                       ; APPEND
58    (CONS&PUSH)
59    (CALLSR 2 34)                       ; APPEND
62    (CONS&PUSH)
63    (GETVALUE&PUSH 2)                   ; R
65    (CALLSR 3 34)                       ; APPEND
68    (SKIP 2)
70    (UNBIND 3)
72    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP %AT TEX-AT ...)-133|
(CONST 0) = %AT
(CONST 1) = TEX
(CONST 2) = TEX-AT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %AT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-AT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-AT (X L R) ...)-134|
(CONST 0) = TEX-AT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-AT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-AT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-AT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-AT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-AT
8     (SKIP&RET 1)


Disassembly of function TEX-AT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = LOP
(CONST 4) = ROP
(CONST 5) = TEX
(CONST 6) = MPAREN
(CONST 7) = ("\\left.")
(CONST 8) = ("\\right|_{")
(CONST 9) = ("}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L ROP LOP X)
32 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CAR&PUSH)
13    (PUSH-NIL 2)
15    (GETVALUE&PUSH 3)                   ; LOP
17    (GETVALUE&PUSH 4)                   ; ROP
19    (CALL&PUSH 5 5)                     ; TEX
22    (GETVALUE 0)                        ; X
24    (CDR)
25    (CDR)
26    (CAR&PUSH)
27    (PUSH-NIL 2)
29    (CONST&PUSH 6)                      ; MPAREN
30    (CONST&PUSH 6)                      ; MPAREN
31    (CALL&PUSH 5 5)                     ; TEX
34    (GETVALUE&PUSH 1)                   ; L
36    (CONST&PUSH 7)                      ; ("\\left.")
37    (LOAD&PUSH 3)
38    (CONST&PUSH 8)                      ; ("\\right|_{")
39    (LOAD&PUSH 4)
40    (CONST&PUSH 9)                      ; ("}")
41    (GETVALUE&PUSH 2)                   ; R
43    (CALLSR 7 34)                       ; APPEND
46    (SKIP 2)
48    (UNBIND 3)
50    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP MBOX TEX-MBOX ...)-135|
(CONST 0) = MBOX
(CONST 1) = TEX
(CONST 2) = TEX-MBOX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MBOX
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MBOX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-MBOX (X L R) ...)-136|
(CONST 0) = TEX-MBOX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MBOX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MBOX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MBOX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MBOX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MBOX
8     (SKIP&RET 1)


Disassembly of function TEX-MBOX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = ("\\boxed{")
(CONST 4) = MPAREN
(CONST 5) = TEX
(CONST 6) = ("}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R X L)
20 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 1)                   ; L
11    (CONST&PUSH 3)                      ; ("\\boxed{")
12    (GETVALUE 0)                        ; X
14    (CDR)
15    (CAR&PUSH)
16    (PUSH-NIL 2)
18    (CONST&PUSH 4)                      ; MPAREN
19    (CONST&PUSH 4)                      ; MPAREN
20    (CALL&PUSH 5 5)                     ; TEX
23    (CONST&PUSH 6)                      ; ("}")
24    (GETVALUE&PUSH 2)                   ; R
26    (CALLSR 5 34)                       ; APPEND
29    (UNBIND 3)
31    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP MLABOX TEX-MLABOX ...)-137|
(CONST 0) = MLABOX
(CONST 1) = TEX
(CONST 2) = TEX-MLABOX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLABOX
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MLABOX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-MLABOX (X L R) ...)-138|
(CONST 0) = TEX-MLABOX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MLABOX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MLABOX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MLABOX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MLABOX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MLABOX
8     (SKIP&RET 1)


Disassembly of function TEX-MLABOX
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = ("\\stackrel{")
(CONST 4) = MPAREN
(CONST 5) = TEX
(CONST 6) = ("}{\\boxed{")
(CONST 7) = ("}}")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R X L)
29 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 1)                   ; L
11    (CONST&PUSH 3)                      ; ("\\stackrel{")
12    (GETVALUE 0)                        ; X
14    (CDR)
15    (CDR)
16    (CAR&PUSH)
17    (PUSH-NIL 2)
19    (CONST&PUSH 4)                      ; MPAREN
20    (CONST&PUSH 4)                      ; MPAREN
21    (CALL&PUSH 5 5)                     ; TEX
24    (CONST&PUSH 6)                      ; ("}{\\boxed{")
25    (GETVALUE 0)                        ; X
27    (CDR)
28    (CAR&PUSH)
29    (PUSH-NIL 2)
31    (CONST&PUSH 4)                      ; MPAREN
32    (CONST&PUSH 4)                      ; MPAREN
33    (CALL&PUSH 5 5)                     ; TEX
36    (CONST&PUSH 7)                      ; ("}}")
37    (GETVALUE&PUSH 2)                   ; R
39    (CALLSR 7 34)                       ; APPEND
42    (UNBIND 3)
44    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP %BINOMIAL TEX-CHOOSE ...)-139|
(CONST 0) = %BINOMIAL
(CONST 1) = TEX
(CONST 2) = TEX-CHOOSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %BINOMIAL
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-CHOOSE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-CHOOSE (X L R) ...)-140|
(CONST 0) = TEX-CHOOSE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-CHOOSE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-CHOOSE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-CHOOSE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-CHOOSE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-CHOOSE
8     (SKIP&RET 1)


Disassembly of function TEX-CHOOSE
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = "{"
(CONST 4) = MPAREN
(CONST 5) = TEX
(CONST 6) = "\\choose "
(CONST 7) = "}"
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R X L)
34 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 1)                   ; L
11    (CONST&PUSH 3)                      ; "{"
12    (GETVALUE 0)                        ; X
14    (CDR)
15    (CAR&PUSH)
16    (PUSH-NIL 2)
18    (CONST&PUSH 4)                      ; MPAREN
19    (CONST&PUSH 4)                      ; MPAREN
20    (CALL&PUSH 5 5)                     ; TEX
23    (CONST&PUSH 6)                      ; "\\choose "
24    (GETVALUE 0)                        ; X
26    (CDR)
27    (CDR)
28    (CAR&PUSH)
29    (PUSH-NIL 2)
31    (CONST&PUSH 4)                      ; MPAREN
32    (CONST&PUSH 4)                      ; MPAREN
33    (CALL&PUSH 5 5)                     ; TEX
36    (CONST&PUSH 7)                      ; "}"
37    (GETVALUE 2)                        ; R
39    (CONS&PUSH)
40    (CALLSR 2 34)                       ; APPEND
43    (CONS&PUSH)
44    (CALLSR 2 34)                       ; APPEND
47    (CONS&PUSH)
48    (CALLSR 2 34)                       ; APPEND
51    (UNBIND 3)
53    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP RAT TEX-RAT ...)-141|
(CONST 0) = RAT
(CONST 1) = TEX
(CONST 2) = TEX-RAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-RAT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP RAT 120 ...)-142|
(CONST 0) = RAT
(CONST 1) = TEX-LBP
(CONST 2) = 120
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 120
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP RAT 121 ...)-143|
(CONST 0) = RAT
(CONST 1) = TEX-RBP
(CONST 2) = 121
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; RAT
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 121
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-RAT (X L R) ...)-144|
(CONST 0) = TEX-RAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-RAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-RAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-RAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-RAT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-RAT
8     (SKIP&RET 1)


Disassembly of function TEX-RAT
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEX-MQUOTIENT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L X)
12 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 0)                   ; X
11    (GETVALUE&PUSH 1)                   ; L
13    (GETVALUE&PUSH 2)                   ; R
15    (CALL 3 3)                          ; TEX-MQUOTIENT
18    (UNBIND 3)
20    (SKIP&RET 4)


Disassembly of function #:|(DEFPROP MPLUS TEX-MPLUS ...)-145|
(CONST 0) = MPLUS
(CONST 1) = TEX
(CONST 2) = TEX-MPLUS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPLUS
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MPLUS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MPLUS 100 ...)-146|
(CONST 0) = MPLUS
(CONST 1) = TEX-LBP
(CONST 2) = 100
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPLUS
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 100
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MPLUS 100 ...)-147|
(CONST 0) = MPLUS
(CONST 1) = TEX-RBP
(CONST 2) = 100
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MPLUS
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 100
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-MPLUS (X L R) ...)-148|
(CONST 0) = TEX-MPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MPLUS
8     (SKIP&RET 1)


Disassembly of function TEX-MPLUS
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TRUNC
(CONST 4) = MEMQ
(CONST 5) = "+\\cdots "
(CONST 6) = TEX-FUNCTION
(CONST 7) = "+"
(CONST 8) = MPLUS
(CONST 9) = ROP
(CONST 10) = TEX
(CONST 11) = LOP
(CONST 12) = MMMINUSP
(CONST 13) = "-"
(CONST 14) = "+"
(CONST 15) = "-"
(CONST 16) = "+"
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP LOP L R X)
writes special variables : (X L R)
125 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (CONST&PUSH 3)                      ; TRUNC
10    (GETVALUE 0)                        ; X
12    (CAR&PUSH)
13    (CALL2&JMPIFNOT 4 L22)              ; MEMQ
16    (CONST&PUSH 5)                      ; "+\\cdots "
17    (GETVALUE 2)                        ; R
19    (CONS)
20    (SETVALUE 2)                        ; R
22    L22
22    (GETVALUE 0)                        ; X
24    (CDR)
25    (CDR)
26    (JMPIFNOT L68)
28    (GETVALUE 0)                        ; X
30    (CDR)
31    (CAR&PUSH)
32    (GETVALUE&PUSH 1)                   ; L
34    (NIL&PUSH)
35    (GETVALUE&PUSH 11)                  ; LOP
37    (CONST&PUSH 8)                      ; MPLUS
38    (CALL 5 10)                         ; TEX
41    (SETVALUE 1)                        ; L
43    (GETVALUE 0)                        ; X
45    (CDR)
46    (CDR)
47    (SETVALUE 0)                        ; X
49    (GETVALUE&PUSH 1)                   ; L
51    (NIL&PUSH)
52    (JMP L147)
55    L55
55    (GETVALUE&PUSH 0)                   ; X
57    (GETVALUE&PUSH 1)                   ; L
59    (GETVALUE&PUSH 2)                   ; R
61    (T&PUSH)
62    (CALL 4 6)                          ; TEX-FUNCTION
65    (JMP L189)
68    L68
68    (GETVALUE 0)                        ; X
70    (CDR)
71    (JMPIFNOT L55)
73    (GETVALUE 0)                        ; X
75    (CDR)
76    (CAR&PUSH)
77    (CONST&PUSH 7)                      ; "+"
78    (GETVALUE 1)                        ; L
80    (CONS&PUSH)
81    (GETVALUE&PUSH 2)                   ; R
83    (CONST&PUSH 8)                      ; MPLUS
84    (GETVALUE&PUSH 9)                   ; ROP
86    (CALL 5 10)                         ; TEX
89    (JMP L189)
92    L92
92    (GETVALUE 0)                        ; X
94    (CAR)
95    (CDR)
96    (CAR)
97    (SETVALUE 1)                        ; L
99    (CONST 13)                          ; "-"
100   (JMP L124)
102   L102
102   (GETVALUE 0)                        ; X
104   (CAR)
105   (CDR)
106   (CAR)
107   (SETVALUE 1)                        ; L
109   (CONST 15)                          ; "-"
110   (JMP L164)
112   L112
112   (GETVALUE 0)                        ; X
114   (CAR&PUSH)
115   (CALL1&JMPIF 12 L92)                ; MMMINUSP
118   (GETVALUE 0)                        ; X
120   (CAR)
121   (SETVALUE 1)                        ; L
123   (CONST 14)                          ; "+"
124   L124
124   (PUSH)
125   (LIST 1)
127   (STORE 0)
128   (LOAD&PUSH 1)
129   (GETVALUE&PUSH 1)                   ; L
131   (LOAD&PUSH 2)
132   (NIL&PUSH)
133   (CONST&PUSH 8)                      ; MPLUS
134   (CONST&PUSH 8)                      ; MPLUS
135   (CALL&PUSH 5 10)                    ; TEX
138   (CALLSR&STORE 2 34 1)               ; APPEND
142   (GETVALUE 0)                        ; X
144   (CDR)
145   (SETVALUE 0)                        ; X
147   L147
147   (GETVALUE 0)                        ; X
149   (CDR)
150   (JMPIF L112)
152   (GETVALUE 0)                        ; X
154   (CAR&PUSH)
155   (CALL1&JMPIF 12 L102)               ; MMMINUSP
158   (GETVALUE 0)                        ; X
160   (CAR)
161   (SETVALUE 1)                        ; L
163   (CONST 16)                          ; "+"
164   L164
164   (PUSH)
165   (LIST 1)
167   (STORE 0)
168   (GETVALUE&PUSH 1)                   ; L
170   (LOAD&PUSH 1)
171   (GETVALUE&PUSH 2)                   ; R
173   (CONST&PUSH 8)                      ; MPLUS
174   (GETVALUE&PUSH 9)                   ; ROP
176   (CALL 5 10)                         ; TEX
179   (SETVALUE 2)                        ; R
181   (LOAD&PUSH 1)
182   (GETVALUE&PUSH 2)                   ; R
184   (CALLSR 2 34)                       ; APPEND
187   (SKIP 2)
189   L189
189   (UNBIND 3)
191   (SKIP&RET 4)


Disassembly of function #:|(DEFPROP MMINUS TEX-PREFIX ...)-149|
(CONST 0) = MMINUS
(CONST 1) = TEX
(CONST 2) = TEX-PREFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMINUS
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-PREFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MMINUS ("-") ...)-150|
(CONST 0) = MMINUS
(CONST 1) = TEXSYM
(CONST 2) = ("-")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMINUS
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("-")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MMINUS 100 ...)-151|
(CONST 0) = MMINUS
(CONST 1) = TEX-RBP
(CONST 2) = 100
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMINUS
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 100
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MMINUS 100 ...)-152|
(CONST 0) = MMINUS
(CONST 1) = TEX-LBP
(CONST 2) = 100
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMINUS
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 100
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MIN TEX-INFIX ...)-153|
(CONST 0) = MIN
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MIN
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MIN ("\\\\in{") ...)-154|
(CONST 0) = MIN
(CONST 1) = TEXSYM
(CONST 2) = ("\\in{")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MIN
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("\\in{")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MIN 80 ...)-155|
(CONST 0) = MIN
(CONST 1) = TEX-LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MIN
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MIN 80 ...)-156|
(CONST 0) = MIN
(CONST 1) = TEX-RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MIN
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MEQUAL TEX-INFIX ...)-157|
(CONST 0) = MEQUAL
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQUAL
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MEQUAL (=) ...)-158|
(CONST 0) = MEQUAL
(CONST 1) = TEXSYM
(CONST 2) = (=)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQUAL
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; (=)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MEQUAL 80 ...)-159|
(CONST 0) = MEQUAL
(CONST 1) = TEX-LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQUAL
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MEQUAL 80 ...)-160|
(CONST 0) = MEQUAL
(CONST 1) = TEX-RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MEQUAL
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNOTEQUAL TEX-INFIX ...)-161|
(CONST 0) = MNOTEQUAL
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOTEQUAL
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNOTEQUAL 80 ...)-162|
(CONST 0) = MNOTEQUAL
(CONST 1) = TEX-LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOTEQUAL
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNOTEQUAL 80 ...)-163|
(CONST 0) = MNOTEQUAL
(CONST 1) = TEX-RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOTEQUAL
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MGREATERP TEX-INFIX ...)-164|
(CONST 0) = MGREATERP
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGREATERP
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MGREATERP (>) ...)-165|
(CONST 0) = MGREATERP
(CONST 1) = TEXSYM
(CONST 2) = (>)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGREATERP
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; (>)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MGREATERP 80 ...)-166|
(CONST 0) = MGREATERP
(CONST 1) = TEX-LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGREATERP
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MGREATERP 80 ...)-167|
(CONST 0) = MGREATERP
(CONST 1) = TEX-RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGREATERP
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MGEQP TEX-INFIX ...)-168|
(CONST 0) = MGEQP
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGEQP
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MGEQP ("\\\\geq ") ...)-169|
(CONST 0) = MGEQP
(CONST 1) = TEXSYM
(CONST 2) = ("\\geq ")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGEQP
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("\\geq ")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MGEQP 80 ...)-170|
(CONST 0) = MGEQP
(CONST 1) = TEX-LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGEQP
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MGEQP 80 ...)-171|
(CONST 0) = MGEQP
(CONST 1) = TEX-RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MGEQP
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLESSP TEX-INFIX ...)-172|
(CONST 0) = MLESSP
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLESSP
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLESSP (<) ...)-173|
(CONST 0) = MLESSP
(CONST 1) = TEXSYM
(CONST 2) = (<)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLESSP
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; (<)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLESSP 80 ...)-174|
(CONST 0) = MLESSP
(CONST 1) = TEX-LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLESSP
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLESSP 80 ...)-175|
(CONST 0) = MLESSP
(CONST 1) = TEX-RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLESSP
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLEQP TEX-INFIX ...)-176|
(CONST 0) = MLEQP
(CONST 1) = TEX
(CONST 2) = TEX-INFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLEQP
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-INFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLEQP ("\\\\leq ") ...)-177|
(CONST 0) = MLEQP
(CONST 1) = TEXSYM
(CONST 2) = ("\\leq ")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLEQP
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("\\leq ")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLEQP 80 ...)-178|
(CONST 0) = MLEQP
(CONST 1) = TEX-LBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLEQP
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MLEQP 80 ...)-179|
(CONST 0) = MLEQP
(CONST 1) = TEX-RBP
(CONST 2) = 80
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MLEQP
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 80
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNOT TEX-PREFIX ...)-180|
(CONST 0) = MNOT
(CONST 1) = TEX
(CONST 2) = TEX-PREFIX
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOT
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-PREFIX
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNOT ("\\\\not ") ...)-181|
(CONST 0) = MNOT
(CONST 1) = TEXSYM
(CONST 2) = ("\\not ")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOT
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("\\not ")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MNOT 70 ...)-182|
(CONST 0) = MNOT
(CONST 1) = TEX-RBP
(CONST 2) = 70
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MNOT
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 70
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MAND TEX-NARY ...)-183|
(CONST 0) = MAND
(CONST 1) = TEX
(CONST 2) = TEX-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAND
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MAND ("\\\\and") ...)-184|
(CONST 0) = MAND
(CONST 1) = TEXSYM
(CONST 2) = ("\\and")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAND
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("\\and")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MAND 60 ...)-185|
(CONST 0) = MAND
(CONST 1) = TEX-LBP
(CONST 2) = 60
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAND
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 60
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MAND 60 ...)-186|
(CONST 0) = MAND
(CONST 1) = TEX-RBP
(CONST 2) = 60
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAND
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 60
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MOR TEX-NARY ...)-187|
(CONST 0) = MOR
(CONST 1) = TEX
(CONST 2) = TEX-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOR
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MOR ("\\\\or") ...)-188|
(CONST 0) = MOR
(CONST 1) = TEXSYM
(CONST 2) = ("\\or")
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOR
1     (CONST&PUSH 1)                      ; TEXSYM
2     (CONST&PUSH 2)                      ; ("\\or")
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-SETUP (X) ...)-189|
(CONST 0) = TEX-SETUP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-SETUP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-SETUP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-SETUP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-SETUP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-SETUP
8     (SKIP&RET 1)


Disassembly of function TEX-SETUP
(CONST 0) = X
(CONST 1) = B
(CONST 2) = A
(CONST 3) = TEX
(CONST 4) = TEX-PREFIX
(CONST 5) = TEXWORD
(CONST 6) = TEXSYM
(CONST 7) = TEX-RBP
(CONST 8) = 130
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A X)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (GETVALUE 0)                        ; X
8     (CDR)
9     (CAR)
10    (BIND 1)                            ; B
12    (LOAD 3)
13    (BIND 2)                            ; A
15    (GETVALUE&PUSH 2)                   ; A
17    (LOAD&PUSH 0)
18    (CONST&PUSH 3)                      ; TEX
19    (CONST&PUSH 4)                      ; TEX-PREFIX
20    (CALLS2 136)                        ; SYSTEM::%PUT
22    (SKIP 1)
24    (GETVALUE&PUSH 2)                   ; A
26    (GETVALUE&PUSH 1)                   ; B
28    (LOAD&PUSH 1)
29    (CONST&PUSH 5)                      ; TEXWORD
30    (LOAD&PUSH 2)
31    (CALLS2 136)                        ; SYSTEM::%PUT
33    (SKIP 2)
35    (GETVALUE&PUSH 2)                   ; A
37    (GETVALUE&PUSH 1)                   ; B
39    (LIST&PUSH 1)
41    (LOAD&PUSH 1)
42    (CONST&PUSH 6)                      ; TEXSYM
43    (LOAD&PUSH 2)
44    (CALLS2 136)                        ; SYSTEM::%PUT
46    (SKIP 2)
48    (GETVALUE&PUSH 2)                   ; A
50    (LOAD&PUSH 0)
51    (CONST&PUSH 7)                      ; TEX-RBP
52    (CONST&PUSH 8)                      ; 130
53    (CALLS2 136)                        ; SYSTEM::%PUT
55    (SKIP 1)
57    (UNBIND 2)
59    (SKIP 1)
61    (UNBIND1)
62    (SKIP&RET 2)


Disassembly of function #:|(MAPC #'TEX-SETUP '(# # # ...))-190|
(CONST 0) = TEX-SETUP
(CONST 1) = 
((%ACOS "\\arccos ") (%ASIN "\\arcsin ") (%ATAN "\\arctan ") (%COS "\\cos ")
 (%COSH "\\cosh ") (%COT "\\cot ") (%COTH "\\coth ") (%CSC "\\csc ")
 (%DETERMINANT "\\det ") (%DIM "\\dim ") (%EXP "\\exp ") (%GCD "\\gcd ")
 (%INF "\\inf ") (%LIMIT "\\lim ") (%LN "\\ln ") (%LOG "\\log ")
 (%MAX "\\max ") (%MIN "\\min ") (%SEC "\\sec ") (%SIN "\\sin ")
 (%SINH "\\sinh ") (%TAN "\\tan ") (%TANH "\\tanh "))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; TEX-SETUP
2     (CONST&PUSH 1)                      ; (# # # ...)
3     (CALLSR 0 24)                       ; MAPC
6     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MOR TEX-NARY ...)-191|
(CONST 0) = MOR
(CONST 1) = TEX
(CONST 2) = TEX-NARY
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOR
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-NARY
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MOR 50 ...)-192|
(CONST 0) = MOR
(CONST 1) = TEX-LBP
(CONST 2) = 50
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOR
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 50
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MOR 50 ...)-193|
(CONST 0) = MOR
(CONST 1) = TEX-RBP
(CONST 2) = 50
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MOR
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 50
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MCOND TEX-MCOND ...)-194|
(CONST 0) = MCOND
(CONST 1) = TEX
(CONST 2) = TEX-MCOND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCOND
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MCOND
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MCOND 25 ...)-195|
(CONST 0) = MCOND
(CONST 1) = TEX-LBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCOND
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MCOND 25 ...)-196|
(CONST 0) = MCOND
(CONST 1) = TEX-RBP
(CONST 2) = 25
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MCOND
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 25
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %DERIVATIVE TEX-DERIVATIVE ...)-197|
(CONST 0) = %DERIVATIVE
(CONST 1) = TEX
(CONST 2) = TEX-DERIVATIVE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %DERIVATIVE
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-DERIVATIVE
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-DERIVATIVE (X L R) ...)-198|
(CONST 0) = TEX-DERIVATIVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-DERIVATIVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-DERIVATIVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-DERIVATIVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-DERIVATIVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-DERIVATIVE
8     (SKIP&RET 1)


Disassembly of function TEX-DERIVATIVE
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = |$d|
(CONST 4) = TEX-D
(CONST 5) = LOP
(CONST 6) = ROP
(CONST 7) = TEX
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP LOP R L X)
16 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 0)                   ; X
11    (CONST&PUSH 3)                      ; |$d|
12    (CALL2&PUSH 4)                      ; TEX-D
14    (GETVALUE&PUSH 1)                   ; L
16    (GETVALUE&PUSH 2)                   ; R
18    (GETVALUE&PUSH 5)                   ; LOP
20    (GETVALUE&PUSH 6)                   ; ROP
22    (CALL 5 7)                          ; TEX
25    (UNBIND 3)
27    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEX-D (X DSYM) ...)-199|
(CONST 0) = TEX-D
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-D>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-D
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-D
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-D>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-D
8     (SKIP&RET 1)


Disassembly of function TEX-D
(CONST 0) = X
(CONST 1) = ARG
(CONST 2) = 0
(CONST 3) = ODDS
(CONST 4) = 1
(CONST 5) = VARS
(CONST 6) = (MEXPT)
(CONST 7) = (MPLUS)
(CONST 8) = NUMER
(CONST 9) = (MTIMES)
(CONST 10) = B
(CONST 11) = E
(CONST 12) = (MEXPT)
(CONST 13) = SIMPLIFYA
(CONST 14) = DENOM
(CONST 15) = (MTIMES)
(CONST 16) = (MQUOTIENT)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ARG DENOM NUMER E B VARS X)
78 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CAR)
7     (BIND 1)                            ; ARG
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CDR&PUSH)
13    (LOAD&PUSH 0)
14    (CONST&PUSH 2)                      ; 0
15    (CALL2&PUSH 3)                      ; ODDS
17    (LOAD&PUSH 1)
18    (CONST&PUSH 4)                      ; 1
19    (CALL2 3)                           ; ODDS
21    (BIND 5)                            ; VARS
23    (CONST&PUSH 6)                      ; (MEXPT)
24    (LOAD&PUSH 13)
25    (CONST&PUSH 7)                      ; (MPLUS)
26    (LOAD 6)
27    (CONS&PUSH)
28    (LIST 3)
30    (BIND 8)                            ; NUMER
32    (CONST&PUSH 9)                      ; (MTIMES)
33    (NIL&PUSH)
34    (GETVALUE&PUSH 5)                   ; VARS
36    (LOAD&PUSH 9)
37    (JMP L78)
39    L39
39    (SKIP 2)
41    (JMP L90)
43    L43
43    (LOAD&CAR&PUSH 1)
45    (LOAD 1)
46    (BIND 10)                           ; B
48    (LOAD 3)
49    (BIND 11)                           ; E
51    (LOAD&PUSH 27)
53    (CONST&PUSH 12)                     ; (MEXPT)
54    (GETVALUE&PUSH 10)                  ; B
56    (GETVALUE&PUSH 11)                  ; E
58    (LIST&PUSH 3)
60    (NIL&PUSH)
61    (CALL2&PUSH 13)                     ; SIMPLIFYA
63    (LIST 2)
65    (UNBIND 2)
67    (PUSH)
68    (LOAD&PUSH 5)
69    (CALLS1&STORE 163 4)                ; NRECONC
72    (SKIP 2)
74    (LOAD&CDR&STORE 1)
76    (LOAD&CDR&STORE 0)
78    L78
78    (LOAD&PUSH 1)
79    (CALLS1&JMPIF 146 L39)              ; ENDP
82    (LOAD&CAR&PUSH 1)
84    (LOAD&PUSH 1)
85    (CALLS1&JMPIFNOT 146 L43)           ; ENDP
88    (SKIP 3)
90    L90
90    (LOAD&PUSH 0)
91    (CALLS1 164)                        ; SYSTEM::LIST-NREVERSE
93    (SKIP 1)
95    (CONS)
96    (BIND 14)                           ; DENOM
98    (CONST&PUSH 15)                     ; (MTIMES)
99    (CONST&PUSH 16)                     ; (MQUOTIENT)
100   (GETVALUE&PUSH 8)                   ; NUMER
102   (NIL&PUSH)
103   (CALL2&PUSH 13)                     ; SIMPLIFYA
105   (GETVALUE&PUSH 14)                  ; DENOM
107   (LIST&PUSH 3)
109   (GETVALUE&PUSH 1)                   ; ARG
111   (LIST 3)
113   (UNBIND 3)
115   (SKIP 2)
117   (UNBIND 2)
119   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ODDS (N C) ...)-200|
(CONST 0) = ODDS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ODDS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ODDS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ODDS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ODDS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ODDS
8     (SKIP&RET 1)


Disassembly of function ODDS
(CONST 0) = N
(CONST 1) = C
(CONST 2) = 1
(CONST 3) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (C N)
35 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; C
6     (GETVALUE 0)                        ; N
8     (JMPIFNOT L29)
10    (GETVALUE&PUSH 1)                   ; C
12    (CONST&PUSH 2)                      ; 1
13    (CALLSR&JMPIF 1 45 L32)             ; =
17    (GETVALUE&PUSH 1)                   ; C
19    (CONST&PUSH 3)                      ; 0
20    (CALLSR&JMPIF 1 45 L44)             ; =
24    (NIL)
25    L25
25    (UNBIND 2)
27    (SKIP&RET 3)
29    L29
29    (NIL)
30    (JMP L25)
32    L32
32    (GETVALUE 0)                        ; N
34    (CAR&PUSH)
35    (GETVALUE 0)                        ; N
37    (CDR&PUSH)
38    (CONST&PUSH 3)                      ; 0
39    (JSR L0)
41    (CONS)
42    (JMP L25)
44    L44
44    (GETVALUE 0)                        ; N
46    (CDR&PUSH)
47    (CONST&PUSH 2)                      ; 1
48    (JSR L0)
50    (JMP L25)


Disassembly of function #:|(DEFUN TEX-MCOND (X L R) ...)-201|
(CONST 0) = TEX-MCOND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MCOND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MCOND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MCOND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MCOND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MCOND
8     (SKIP&RET 1)


Disassembly of function TEX-MCOND
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = ("\\mathbf{if}\\>")
(CONST 4) = ("\\>\\mathbf{then}\\>")
(CONST 5) = MPAREN
(CONST 6) = TEX
(CONST 7) = $FALSE
(CONST 8) = MCOND
(CONST 9) = ROP
(CONST 10) = ("\\>\\mathbf{else}\\>")
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ROP R X L)
50 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 1)                   ; L
11    (GETVALUE 0)                        ; X
13    (CDR)
14    (CAR&PUSH)
15    (CONST&PUSH 3)                      ; ("\\mathbf{if}\\>")
16    (CONST&PUSH 4)                      ; ("\\>\\mathbf{then}\\>")
17    (CONST&PUSH 5)                      ; MPAREN
18    (CONST&PUSH 5)                      ; MPAREN
19    (CALL&PUSH 5 6)                     ; TEX
22    (GETVALUE&PUSH 0)                   ; X
24    (CALLS1&PUSH 149)                   ; FIFTH
26    (JMPIFEQTO 7 L65)                   ; $FALSE
29    (GETVALUE 0)                        ; X
31    (CDR)
32    (CDR)
33    (CAR&PUSH)
34    (PUSH-NIL 2)
36    (CONST&PUSH 5)                      ; MPAREN
37    (CONST&PUSH 5)                      ; MPAREN
38    (CALL&PUSH 5 6)                     ; TEX
41    (GETVALUE&PUSH 0)                   ; X
43    (CALLS1&PUSH 149)                   ; FIFTH
45    (CONST&PUSH 10)                     ; ("\\>\\mathbf{else}\\>")
46    (GETVALUE&PUSH 2)                   ; R
48    (CONST&PUSH 8)                      ; MCOND
49    (GETVALUE&PUSH 9)                   ; ROP
51    (CALL&PUSH 5 6)                     ; TEX
54    (CALLSR 2 34)                       ; APPEND
57    L57
57    (PUSH)
58    (CALLSR 3 34)                       ; APPEND
61    (UNBIND 3)
63    (SKIP&RET 4)
65    L65
65    (GETVALUE 0)                        ; X
67    (CDR)
68    (CDR)
69    (CAR&PUSH)
70    (NIL&PUSH)
71    (GETVALUE&PUSH 2)                   ; R
73    (CONST&PUSH 8)                      ; MCOND
74    (GETVALUE&PUSH 9)                   ; ROP
76    (CALL 5 6)                          ; TEX
79    (JMP L57)


Disassembly of function #:|(DEFPROP MDO TEX-MDO ...)-202|
(CONST 0) = MDO
(CONST 1) = TEX
(CONST 2) = TEX-MDO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDO
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MDO
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDO 30 ...)-203|
(CONST 0) = MDO
(CONST 1) = TEX-LBP
(CONST 2) = 30
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDO
1     (CONST&PUSH 1)                      ; TEX-LBP
2     (CONST&PUSH 2)                      ; 30
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDO 30 ...)-204|
(CONST 0) = MDO
(CONST 1) = TEX-RBP
(CONST 2) = 30
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDO
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 30
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDOIN TEX-MDOIN ...)-205|
(CONST 0) = MDOIN
(CONST 1) = TEX
(CONST 2) = TEX-MDOIN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDOIN
1     (CONST&PUSH 1)                      ; TEX
2     (CONST&PUSH 2)                      ; TEX-MDOIN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP MDOIN 30 ...)-206|
(CONST 0) = MDOIN
(CONST 1) = TEX-RBP
(CONST 2) = 30
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; MDOIN
1     (CONST&PUSH 1)                      ; TEX-RBP
2     (CONST&PUSH 2)                      ; 30
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN TEX-LBP (X) ...)-207|
(CONST 0) = TEX-LBP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-LBP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-LBP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-LBP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-LBP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-LBP
8     (SKIP&RET 1)


Disassembly of function TEX-LBP
(CONST 0) = X
(CONST 1) = TEX-LBP
(CONST 2) = LBP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; TEX-LBP
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L16)
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1 2)                           ; LBP
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TEX-RBP (X) ...)-208|
(CONST 0) = TEX-RBP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-RBP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-RBP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-RBP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-RBP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-RBP
8     (SKIP&RET 1)


Disassembly of function TEX-RBP
(CONST 0) = X
(CONST 1) = TEX-RBP
(CONST 2) = LBP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
12 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; TEX-RBP
6     (PUSH-UNBOUND 1)
8     (CALLS2 132)                        ; GET
10    (JMPIF1 L16)
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1 2)                           ; LBP
16    L16
16    (UNBIND1)
17    (SKIP&RET 2)


Disassembly of function #:|(DEFUN TEX-MDO (X L R) ...)-209|
(CONST 0) = TEX-MDO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MDO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MDO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MDO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MDO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MDO
8     (SKIP&RET 1)


Disassembly of function TEX-MDO
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEXMDO
(CONST 4) = "\\>"
(CONST 5) = TEX-LIST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L X)
14 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1&PUSH 3)                      ; TEXMDO
13    (GETVALUE&PUSH 1)                   ; L
15    (GETVALUE&PUSH 2)                   ; R
17    (CONST&PUSH 4)                      ; "\\>"
18    (CALL 4 5)                          ; TEX-LIST
21    (UNBIND 3)
23    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEX-MDOIN (X L R) ...)-210|
(CONST 0) = TEX-MDOIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEX-MDOIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEX-MDOIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEX-MDOIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEX-MDOIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEX-MDOIN
8     (SKIP&RET 1)


Disassembly of function TEX-MDOIN
(CONST 0) = X
(CONST 1) = L
(CONST 2) = R
(CONST 3) = TEXMDOIN
(CONST 4) = "\\>"
(CONST 5) = TEX-LIST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R L X)
14 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; L
6     (LOAD 7)
7     (BIND 2)                            ; R
9     (GETVALUE&PUSH 0)                   ; X
11    (CALL1&PUSH 3)                      ; TEXMDOIN
13    (GETVALUE&PUSH 1)                   ; L
15    (GETVALUE&PUSH 2)                   ; R
17    (CONST&PUSH 4)                      ; "\\>"
18    (CALL 4 5)                          ; TEX-LIST
21    (UNBIND 3)
23    (SKIP&RET 4)


Disassembly of function #:|(DEFUN TEXMDO (X) ...)-211|
(CONST 0) = TEXMDO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEXMDO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEXMDO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEXMDO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEXMDO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEXMDO
8     (SKIP&RET 1)


Disassembly of function TEXMDO
(CONST 0) = X
(CONST 1) = "\\mathbf{for}"
(CONST 2) = 1
(CONST 3) = "\\mathbf{from}"
(CONST 4) = "\\mathbf{step}"
(CONST 5) = "\\mathbf{next}"
(CONST 6) = "\\mathbf{thru}"
(CONST 7) = MNOT
(CONST 8) = "\\mathbf{while}"
(CONST 9) = "\\mathbf{unless}"
(CONST 10) = "\\mathbf{do}"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
119 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CDR)
6     (CAR)
7     (JMPIF L61)
9     (NIL)
10    L10
10    (PUSH)
11    (GETVALUE 0)                        ; X
13    (CDR)
14    (CDR)
15    (CAR&PUSH)
16    (JMPIFEQTO 2 L70)                   ; 1
19    (GETVALUE 0)                        ; X
21    (CDR)
22    (CDR)
23    (CAR)
24    (JMPIF L73)
26    (NIL)
27    L27
27    (PUSH)
28    (GETVALUE 0)                        ; X
30    (CDR)
31    (CDR)
32    (CDR)
33    (CAR&PUSH)
34    (JMPIFEQTO 2 L83)                   ; 1
37    (GETVALUE 0)                        ; X
39    (CDR)
40    (CDR)
41    (CDR)
42    (CAR)
43    (JMPIF L86)
45    (GETVALUE&PUSH 0)                   ; X
47    (CALLS1&JMPIFNOT 149 L116)          ; FIFTH
51    (CONST&PUSH 5)                      ; "\\mathbf{next}"
52    (GETVALUE&PUSH 0)                   ; X
54    (CALLS1 149)                        ; FIFTH
56    L56
56    (PUSH)
57    (LIST 2)
59    (JMP L117)
61    L61
61    (CONST&PUSH 1)                      ; "\\mathbf{for}"
62    (GETVALUE 0)                        ; X
64    (CDR)
65    (CAR&PUSH)
66    (LIST 2)
68    (JMP L10)
70    L70
70    (NIL)
71    (JMP L27)
73    L73
73    (CONST&PUSH 3)                      ; "\\mathbf{from}"
74    (GETVALUE 0)                        ; X
76    (CDR)
77    (CDR)
78    (CAR&PUSH)
79    (LIST 2)
81    (JMP L27)
83    L83
83    (NIL)
84    (JMP L117)
86    L86
86    (CONST&PUSH 4)                      ; "\\mathbf{step}"
87    (GETVALUE 0)                        ; X
89    (CDR)
90    (CDR)
91    (CDR)
92    (CAR)
93    (JMP L56)
95    L95
95    (CONST&PUSH 6)                      ; "\\mathbf{thru}"
96    (GETVALUE&PUSH 0)                   ; X
98    (CALLS1&PUSH 150)                   ; SIXTH
100   (LIST 2)
102   (JMP L124)
104   L104
104   (NIL)
105   (JMP L147)
107   L107
107   (CONST&PUSH 8)                      ; "\\mathbf{while}"
108   (GETVALUE&PUSH 0)                   ; X
110   (CALLS1 151)                        ; SEVENTH
112   (CDR)
113   (CAR)
114   (JMP L144)
116   L116
116   (NIL)
117   L117
117   (PUSH)
118   (GETVALUE&PUSH 0)                   ; X
120   (CALLS1&JMPIF 150 L95)              ; SIXTH
123   (NIL)
124   L124
124   (PUSH)
125   (GETVALUE&PUSH 0)                   ; X
127   (CALLS1&JMPIFNOT 151 L104)          ; SEVENTH
130   (GETVALUE&PUSH 0)                   ; X
132   (CALLS1 151)                        ; SEVENTH
134   (CAR)
135   (CAR&PUSH)
136   (JMPIFEQTO 7 L107)                  ; MNOT
139   (CONST&PUSH 9)                      ; "\\mathbf{unless}"
140   (GETVALUE&PUSH 0)                   ; X
142   (CALLS1 151)                        ; SEVENTH
144   L144
144   (PUSH)
145   (LIST 2)
147   L147
147   (PUSH)
148   (CONST&PUSH 10)                     ; "\\mathbf{do}"
149   (GETVALUE&PUSH 0)                   ; X
151   (CALLS1&PUSH 152)                   ; EIGHTH
153   (LIST&PUSH 2)
155   (CALLSR 6 35)                       ; NCONC
158   (UNBIND1)
159   (SKIP&RET 2)


Disassembly of function #:|(DEFUN TEXMDOIN (X) ...)-212|
(CONST 0) = TEXMDOIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TEXMDOIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TEXMDOIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TEXMDOIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TEXMDOIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TEXMDOIN
8     (SKIP&RET 1)


Disassembly of function TEXMDOIN
(CONST 0) = X
(CONST 1) = "\\mathbf{for}"
(CONST 2) = "\\mathbf{in}"
(CONST 3) = "\\mathbf{thru}"
(CONST 4) = MNOT
(CONST 5) = "\\mathbf{while}"
(CONST 6) = "\\mathbf{unless}"
(CONST 7) = "\\mathbf{do}"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
55 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; "\\mathbf{for}"
4     (GETVALUE 0)                        ; X
6     (CDR)
7     (CAR&PUSH)
8     (CONST&PUSH 2)                      ; "\\mathbf{in}"
9     (GETVALUE 0)                        ; X
11    (CDR)
12    (CDR)
13    (CAR&PUSH)
14    (LIST&PUSH 4)
16    (GETVALUE&PUSH 0)                   ; X
18    (CALLS1&JMPIF 150 L59)              ; SIXTH
21    (NIL)
22    L22
22    (PUSH)
23    (GETVALUE&PUSH 0)                   ; X
25    (CALLS1&JMPIFNOT 151 L68)           ; SEVENTH
28    (GETVALUE&PUSH 0)                   ; X
30    (CALLS1 151)                        ; SEVENTH
32    (CAR)
33    (CAR&PUSH)
34    (JMPIFEQTO 4 L71)                   ; MNOT
37    (CONST&PUSH 6)                      ; "\\mathbf{unless}"
38    (GETVALUE&PUSH 0)                   ; X
40    (CALLS1 151)                        ; SEVENTH
42    L42
42    (PUSH)
43    (LIST 2)
45    L45
45    (PUSH)
46    (CONST&PUSH 7)                      ; "\\mathbf{do}"
47    (GETVALUE&PUSH 0)                   ; X
49    (CALLS1&PUSH 152)                   ; EIGHTH
51    (LIST&PUSH 2)
53    (CALLSR 4 35)                       ; NCONC
56    (UNBIND1)
57    (SKIP&RET 2)
59    L59
59    (CONST&PUSH 3)                      ; "\\mathbf{thru}"
60    (GETVALUE&PUSH 0)                   ; X
62    (CALLS1&PUSH 150)                   ; SIXTH
64    (LIST 2)
66    (JMP L22)
68    L68
68    (NIL)
69    (JMP L45)
71    L71
71    (CONST&PUSH 5)                      ; "\\mathbf{while}"
72    (GETVALUE&PUSH 0)                   ; X
74    (CALLS1 151)                        ; SEVENTH
76    (CDR)
77    (CAR)
78    (JMP L42)


Disassembly of function #:|(DEFUN $TEXINIT (FILE) ...)-213|
(CONST 0) = $TEXINIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TEXINIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TEXINIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TEXINIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TEXINIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TEXINIT
8     (SKIP&RET 1)


Disassembly of function $TEXINIT
(CONST 0) = EXEC
(CONST 1) = "cp "
(CONST 2) = VAXIMA-MAIN-DIR
(CONST 3) = "//ucb//verbwin "
(CONST 4) = STRIPDOLLAR
(CONST 5) = CONCAT
(CONST 6) = $DONE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (VAXIMA-MAIN-DIR)
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXEC
1     (CONST&PUSH 1)                      ; "cp "
2     (GETVALUE&PUSH 2)                   ; VAXIMA-MAIN-DIR
4     (CONST&PUSH 3)                      ; "//ucb//verbwin "
5     (LOAD&PUSH 5)
6     (CALL1&PUSH 4)                      ; STRIPDOLLAR
8     (CALL&PUSH 4 5)                     ; CONCAT
11    (LIST&PUSH 1)
13    (FUNCALL 1)
15    (CONST 6)                           ; $DONE
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $TEXEND (FILENAME) ...)-214|
(CONST 0) = $TEXEND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TEXEND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TEXEND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TEXEND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TEXEND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TEXEND
8     (SKIP&RET 1)


Disassembly of function $TEXEND
(CONST 0) = STRIPDOLLAR
(CONST 1) = :OUTPUT
(CONST 2) = :APPEND
(CONST 3) = :CREATE
(CONST 4) = ST
(CONST 5) = #.#'VALUES
(CONST 6) = #<COMPILED-CLOSURE $TEXEND-1>
(CONST 7) = FORMAT
(CONST 8) = $DONE
(CONST 9) = CLOSE
(CONST 10) = :ABORT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ST)
39 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; STRIPDOLLAR
3     (CONST&PUSH 1)                      ; :OUTPUT
4     (PUSH-UNBOUND 5)
6     (CONST 2)                           ; :APPEND
7     (STORE 3)
8     (CONST 3)                           ; :CREATE
9     (STORE 2)
10    (CALLS1 249)                        ; OPEN
12    (BIND 4)                            ; ST
14    (UNWIND-PROTECT-OPEN L39)
16    (CONST 5)                           ; #.#'VALUES
17    (MVCALLP)
18    (GETVALUE&PUSH 4)                   ; ST
20    (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE $TEXEND-1>
21    (CALL2 7)                           ; FORMAT
23    (CONST&PUSH 8)                      ; $DONE
24    (GETVALUE 4)                        ; ST
26    (JMPIFNOT L31)
28    (PUSH)
29    (CALL1 9)                           ; CLOSE
31    L31
31    (MVCALL)
32    (UNWIND-PROTECT-NORMAL-EXIT)
33    (GETVALUE 4)                        ; ST
35    (JMPIFNOT L49)
37    (JMP L43)
39    L39
39    (GETVALUE 4)                        ; ST
41    (JMPIFNOT L49)
43    L43
43    (PUSH)
44    (CONST&PUSH 10)                     ; :ABORT
45    (T&PUSH)
46    (CALL 3 9)                          ; CLOSE
49    L49
49    (UNWIND-PROTECT-CLOSE)
50    (UNBIND1)
51    (SKIP&RET 2)


Disassembly of function $TEXEND-1
(CONST 0) = 
"\\end
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "\\end
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFUN $TEXPUT (E S &OPTIONAL ...) ...)-215|
(CONST 0) = $TEXPUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TEXPUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TEXPUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TEXPUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TEXPUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TEXPUT
8     (SKIP&RET 1)


Disassembly of function $TEXPUT
(CONST 0) = E
(CONST 1) = S
(CONST 2) = MSTRINGP
(CONST 3) = (#\&)
(CONST 4) = STRING-LEFT-TRIM
(CONST 5) = DEFINE-SYMBOL
(CONST 6) = $LISTP
(CONST 7) = MARGS
(CONST 8) = STRIPDOLLAR
(CONST 9) = 0
(CONST 10) = TEXWORD
(CONST 11) = PUTPROP
(CONST 12) = $MATCHFIX
(CONST 13) = TEX-MATCHFIX
(CONST 14) = TEX
(CONST 15) = 2
(CONST 16) = "Improper 2nd argument to TEXPUT for matchfix operator."
(CONST 17) = MERROR
(CONST 18) = 1
(CONST 19) = TEXSYM
(CONST 20) = $PREFIX
(CONST 21) = TEX-PREFIX
(CONST 22) = 200
(CONST 23) = TEX-LBP
(CONST 24) = 180
(CONST 25) = TEX-RBP
(CONST 26) = $INFIX
(CONST 27) = TEX-INFIX
(CONST 28) = $POSTFIX
(CONST 29) = TEX-POSTFIX
(CONST 30) = 160
2 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (S E)
writes special variables : (S E)
140 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; E
3     (LOAD 5)
4     (BIND 1)                            ; S
6     (UNBOUND->NIL 7)
8     (GETVALUE&PUSH 0)                   ; E
10    (CALL1&JMPIFNOT 2 L22)              ; MSTRINGP
13    (CONST&PUSH 3)                      ; (#\&)
14    (GETVALUE&PUSH 0)                   ; E
16    (CALL2&PUSH 4)                      ; STRING-LEFT-TRIM
18    (CALL1 5)                           ; DEFINE-SYMBOL
20    (SETVALUE 0)                        ; E
22    L22
22    (GETVALUE&PUSH 1)                   ; S
24    (CALL1&JMPIF 6 L94)                 ; $LISTP
28    (GETVALUE&PUSH 1)                   ; S
30    (LIST 1)
32    (SETVALUE 1)                        ; S
34    L34
34    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; STRIPDOLLAR
36    (GETVALUE&PUSH 1)                   ; S
38    (CALLSR 0 22)                       ; MAPCAR
41    (SETVALUE 1)                        ; S
43    (LOAD&JMPIFNOT 7 L103)
46    (LOAD&PUSH 7)
47    (JMPIFEQTO 12 L138)                 ; $MATCHFIX
51    (LOAD&PUSH 7)
52    (JMPIFEQTO 20 L186)                 ; $PREFIX
56    (LOAD&PUSH 7)
57    (JMPIFEQTO 26 L216)                 ; $INFIX
61    (LOAD&PUSH 7)
62    (JMPIFNOTEQTO 28 L246)              ; $POSTFIX
66    (GETVALUE&PUSH 0)                   ; E
68    (CONST&PUSH 29)                     ; TEX-POSTFIX
69    (CONST&PUSH 14)                     ; TEX
70    (CALL 3 11)                         ; PUTPROP
73    (GETVALUE&PUSH 0)                   ; E
75    (GETVALUE&PUSH 1)                   ; S
77    (CONST&PUSH 19)                     ; TEXSYM
78    (CALL 3 11)                         ; PUTPROP
81    (GETVALUE&PUSH 0)                   ; E
83    (CONST&PUSH 30)                     ; 160
85    (CONST 23)                          ; TEX-LBP
87    L87
87    (PUSH)
88    (CALL 3 11)                         ; PUTPROP
91    (JMP L247)
94    L94
94    (GETVALUE&PUSH 1)                   ; S
96    (CALL1 7)                           ; MARGS
98    (SETVALUE 1)                        ; S
100   (JMP L34)
103   L103
103   (GETVALUE&PUSH 0)                   ; E
105   (CONST&PUSH 9)                      ; 0
106   (GETVALUE&PUSH 1)                   ; S
108   (CALLS1&PUSH 148)                   ; NTH
110   (CONST 10)                          ; TEXWORD
111   (JMP L87)
113   L113
113   (CONST&PUSH 16)                     ; "Improper 2nd argument to TEXPUT for matchfix operator."
114   (CALL1 17)                          ; MERROR
116   (JMP L247)
119   L119
119   (GETVALUE&PUSH 0)                   ; E
121   (CONST&PUSH 9)                      ; 0
122   (GETVALUE&PUSH 1)                   ; S
124   (CALLS1&PUSH 148)                   ; NTH
126   (LIST&PUSH 1)
128   (CONST&PUSH 18)                     ; 1
129   (GETVALUE&PUSH 1)                   ; S
131   (CALLS1&PUSH 148)                   ; NTH
133   (LIST&PUSH 2)
135   (CONST 19)                          ; TEXSYM
136   (JMP L87)
138   L138
138   (GETVALUE&PUSH 0)                   ; E
140   (CONST&PUSH 13)                     ; TEX-MATCHFIX
141   (CONST&PUSH 14)                     ; TEX
142   (CALL 3 11)                         ; PUTPROP
145   (GETVALUE&PUSH 1)                   ; S
147   (CALLS2&PUSH 71)                    ; LENGTH
149   (CONST&PUSH 15)                     ; 2
150   (CALLSR&JMPIF 1 47 L113)            ; <
154   (GETVALUE&PUSH 1)                   ; S
156   (CALLS2&PUSH 71)                    ; LENGTH
158   (JMPIFEQTO 15 L119)                 ; 2
161   (GETVALUE&PUSH 0)                   ; E
163   (CONST&PUSH 9)                      ; 0
164   (GETVALUE&PUSH 1)                   ; S
166   (CALLS1&PUSH 148)                   ; NTH
168   (LIST&PUSH 1)
170   (CONST&PUSH 18)                     ; 1
171   (GETVALUE&PUSH 1)                   ; S
173   (CALLS1&PUSH 148)                   ; NTH
175   (CONST&PUSH 15)                     ; 2
176   (GETVALUE&PUSH 1)                   ; S
178   (CALLS1&PUSH 148)                   ; NTH
180   (LIST&PUSH 3)
182   (CONST 19)                          ; TEXSYM
183   (JMP L87)
186   L186
186   (GETVALUE&PUSH 0)                   ; E
188   (CONST&PUSH 21)                     ; TEX-PREFIX
189   (CONST&PUSH 14)                     ; TEX
190   (CALL 3 11)                         ; PUTPROP
193   (GETVALUE&PUSH 0)                   ; E
195   (GETVALUE&PUSH 1)                   ; S
197   (CONST&PUSH 19)                     ; TEXSYM
198   (CALL 3 11)                         ; PUTPROP
201   (GETVALUE&PUSH 0)                   ; E
203   (CONST&PUSH 22)                     ; 200
204   (CONST&PUSH 23)                     ; TEX-LBP
205   (CALL 3 11)                         ; PUTPROP
208   (GETVALUE&PUSH 0)                   ; E
210   (CONST&PUSH 24)                     ; 180
211   (CONST 25)                          ; TEX-RBP
213   (JMP L87)
216   L216
216   (GETVALUE&PUSH 0)                   ; E
218   (CONST&PUSH 27)                     ; TEX-INFIX
219   (CONST&PUSH 14)                     ; TEX
220   (CALL 3 11)                         ; PUTPROP
223   (GETVALUE&PUSH 0)                   ; E
225   (GETVALUE&PUSH 1)                   ; S
227   (CONST&PUSH 19)                     ; TEXSYM
228   (CALL 3 11)                         ; PUTPROP
231   (GETVALUE&PUSH 0)                   ; E
233   (CONST&PUSH 22)                     ; 200
234   (CONST&PUSH 23)                     ; TEX-LBP
235   (CALL 3 11)                         ; PUTPROP
238   (GETVALUE&PUSH 0)                   ; E
240   (CONST&PUSH 24)                     ; 180
241   (CONST 25)                          ; TEX-RBP
243   (JMP L87)
246   L246
246   (NIL)
247   L247
247   (UNBIND 2)
249   (SKIP&RET 4)


Wrote file binary-clisp/mactex.fas
Wrote file /cygdrive/e/temp/maxima/src/mactex.lis