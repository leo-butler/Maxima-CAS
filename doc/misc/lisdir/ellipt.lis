Listing of compilation of file /cygdrive/e/temp/maxima/src/ellipt.lisp
on 2002-12-17 13:34:05 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/ellipt.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(FLET (# #) (DECLAIM #) ...)-2|
(CONST 0) = (INLINE DESCENDING-TRANSFORM ASCENDING-TRANSFORM)
(CONST 1) = ELLIPTIC-DN-ASCENDING
(CONST 2) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 3) = #<COMPILED-CLOSURE ELLIPTIC-DN-ASCENDING>
(CONST 4) = ELLIPTIC-CN-ASCENDING
(CONST 5) = #<COMPILED-CLOSURE ELLIPTIC-CN-ASCENDING>
(CONST 6) = ELLIPTIC-SN-DESCENDING
(CONST 7) = #<COMPILED-CLOSURE ELLIPTIC-SN-DESCENDING>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; (INLINE DESCENDING-TRANSFORM ...)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; ELLIPTIC-DN-ASCENDING
4     (CALL1 2)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
6     (CONST&PUSH 1)                      ; ELLIPTIC-DN-ASCENDING
7     (CONST&PUSH 3)                      ; #<COMPILED-CLOSURE ELLIPTIC-DN-ASCENDING>
8     (CALLS2 130)                        ; SYSTEM::%PUTD
10    (CONST&PUSH 4)                      ; ELLIPTIC-CN-ASCENDING
11    (CALL1 2)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
13    (CONST&PUSH 4)                      ; ELLIPTIC-CN-ASCENDING
14    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE ELLIPTIC-CN-ASCENDING>
15    (CALLS2 130)                        ; SYSTEM::%PUTD
17    (CONST&PUSH 6)                      ; ELLIPTIC-SN-DESCENDING
18    (CALL1 2)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
20    (CONST&PUSH 6)                      ; ELLIPTIC-SN-DESCENDING
21    (CONST&PUSH 7)                      ; #<COMPILED-CLOSURE ELLIPTIC-SN-DESCENDING>
22    (CALLS2 130)                        ; SYSTEM::%PUTD
24    (CONST 6)                           ; ELLIPTIC-SN-DESCENDING
25    (SKIP&RET 1)


Disassembly of function ELLIPTIC-DN-ASCENDING
(CONST 0) = M
(CONST 1) = 1
(CONST 2) = 4.440892098500627E-16
(CONST 3) = #<COMPILED-CLOSURE ASCENDING-TRANSFORM>
(CONST 4) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V M)
43 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; 1
4     (GETVALUE&PUSH 0)                   ; M
6     (CALLSR&PUSH 1 54)                  ; -
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 2)                      ; 4.440892098500627E-16
12    (CALLSR&JMPIF 1 47 L64)             ; <
16    (LOAD&PUSH 5)
17    (GETVALUE&PUSH 0)                   ; M
19    (CONST 3)                           ; #<COMPILED-CLOSURE ASCENDING-TRANSFORM>
20    (CALLC)
21    (NV-TO-STACK 3)
23    (LOAD 2)
24    (BIND 4)                            ; V
26    (GETVALUE&PUSH 4)                   ; V
28    (LOAD&PUSH 5)
29    (JSR&PUSH L0)
31    (CONST&PUSH 1)                      ; 1
32    (LOAD&PUSH 5)
33    (CALLSR&PUSH 1 54)                  ; -
36    (LOAD&PUSH 6)
37    (CALLSR&PUSH 1 56)                  ; /
40    (LOAD&PUSH 5)
41    (LOAD&PUSH 2)
42    (LOAD&PUSH 3)
43    (CALLSR&PUSH 2 55)                  ; *
46    (CALLSR&PUSH 2 53)                  ; +
49    (LOAD&PUSH 2)
50    (CALLSR&PUSH 1 56)                  ; /
53    (CALLSR 2 55)                       ; *
56    (SKIP 1)
58    (UNBIND1)
59    (SKIP 3)
61    L61
61    (UNBIND1)
62    (SKIP&RET 3)
64    L64
64    (LOAD&PUSH 5)
65    (CALLS2&PUSH 169)                   ; COMMON-LISP:COSH
67    (CALLSR 0 56)                       ; /
70    (JMP L61)


Disassembly of function ASCENDING-TRANSFORM
(CONST 0) = M
(CONST 1) = 4
(CONST 2) = 2
(CONST 3) = 1
(CONST 4) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V M)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (GETVALUE&PUSH 0)                   ; M
5     (CALLS2&PUSH 156)                   ; SQRT
7     (CONST&PUSH 1)                      ; 4
8     (LOAD&PUSH 1)
9     (CALLSR&PUSH 2 55)                  ; *
12    (LOAD&INC&PUSH 1)
14    (CONST&PUSH 2)                      ; 2
15    (CALLS2&PUSH 154)                   ; EXPT
17    (CALLSR&PUSH 1 56)                  ; /
20    (CONST&PUSH 3)                      ; 1
21    (LOAD&PUSH 2)
22    (CALLSR&PUSH 1 54)                  ; -
25    (LOAD&INC&PUSH 2)
27    (CALLSR&PUSH 1 56)                  ; /
30    (LOAD&PUSH 8)
31    (LOAD&INC&PUSH 1)
33    (CALLSR 1 56)                       ; /
36    (BIND 4)                            ; V
38    (GETVALUE&PUSH 4)                   ; V
40    (LOAD&PUSH 5)
41    (LOAD&PUSH 5)
42    (STACK-TO-MV 3)
44    (UNBIND1)
45    (SKIP 3)
47    (UNBIND1)
48    (SKIP&RET 3)


Disassembly of function ELLIPTIC-CN-ASCENDING
(CONST 0) = M
(CONST 1) = 1
(CONST 2) = 4.440892098500627E-16
(CONST 3) = #<COMPILED-CLOSURE ASCENDING-TRANSFORM>
(CONST 4) = V
(CONST 5) = ELLIPTIC-DN-ASCENDING
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V M)
40 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; 1
4     (GETVALUE&PUSH 0)                   ; M
6     (CALLSR&PUSH 1 54)                  ; -
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 2)                      ; 4.440892098500627E-16
12    (CALLSR&JMPIF 1 47 L61)             ; <
16    (LOAD&PUSH 5)
17    (GETVALUE&PUSH 0)                   ; M
19    (CONST 3)                           ; #<COMPILED-CLOSURE ASCENDING-TRANSFORM>
20    (CALLC)
21    (NV-TO-STACK 3)
23    (LOAD 2)
24    (BIND 4)                            ; V
26    (GETVALUE&PUSH 4)                   ; V
28    (LOAD&PUSH 5)
29    (CALL2&PUSH 5)                      ; ELLIPTIC-DN-ASCENDING
31    (LOAD&INC&PUSH 4)
33    (LOAD&PUSH 6)
34    (CALLSR&PUSH 1 56)                  ; /
37    (LOAD&PUSH 1)
38    (LOAD&PUSH 2)
39    (CALLSR&PUSH 2 55)                  ; *
42    (LOAD&PUSH 6)
43    (CALLSR&PUSH 1 54)                  ; -
46    (LOAD&PUSH 2)
47    (CALLSR&PUSH 1 56)                  ; /
50    (CALLSR 2 55)                       ; *
53    (SKIP 1)
55    (UNBIND1)
56    (SKIP 3)
58    L58
58    (UNBIND1)
59    (SKIP&RET 3)
61    L61
61    (LOAD&PUSH 5)
62    (CALLS2&PUSH 169)                   ; COMMON-LISP:COSH
64    (CALLSR 0 56)                       ; /
67    (JMP L58)


Disassembly of function ELLIPTIC-SN-DESCENDING
(CONST 0) = M
(CONST 1) = #.DOUBLE-FLOAT-EPSILON
(CONST 2) = #<COMPILED-CLOSURE DESCENDING-TRANSFORM>
(CONST 3) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V M)
36 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (GETVALUE&PUSH 0)                   ; M
5     (CALLS2&PUSH 158)                   ; ABS
7     (CONST&PUSH 1)                      ; #.DOUBLE-FLOAT-EPSILON
8     (CALLSR&JMPIF 1 47 L52)             ; <
12    (LOAD&PUSH 5)
13    (GETVALUE&PUSH 0)                   ; M
15    (CONST 2)                           ; #<COMPILED-CLOSURE DESCENDING-TRANSFORM>
16    (CALLC)
17    (NV-TO-STACK 3)
19    (LOAD 2)
20    (BIND 3)                            ; V
22    (GETVALUE&PUSH 3)                   ; V
24    (LOAD&PUSH 5)
25    (JSR&PUSH L0)
27    (LOAD&INC&PUSH 4)
29    (LOAD&PUSH 1)
30    (CALLSR&PUSH 2 55)                  ; *
33    (LOAD&PUSH 5)
34    (LOAD&PUSH 2)
35    (LOAD&PUSH 3)
36    (CALLSR&PUSH 3 55)                  ; *
39    (CALLS2&PUSH 150)                   ; 1+
41    (CALLSR 1 56)                       ; /
44    (SKIP 1)
46    (UNBIND1)
47    (SKIP 3)
49    L49
49    (UNBIND1)
50    (SKIP&RET 3)
52    L52
52    (LOAD&PUSH 5)
53    (CALLS2 161)                        ; SIN
55    (JMP L49)


Disassembly of function DESCENDING-TRANSFORM
(CONST 0) = M
(CONST 1) = 1
(CONST 2) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V M)
26 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; 1
4     (GETVALUE&PUSH 0)                   ; M
6     (CALLSR&PUSH 1 54)                  ; -
9     (CALLS2&PUSH 156)                   ; SQRT
11    (CONST&PUSH 1)                      ; 1
12    (LOAD&PUSH 1)
13    (CALLSR&PUSH 1 54)                  ; -
16    (LOAD&INC&PUSH 1)
18    (CALLSR&PUSH 1 56)                  ; /
21    (LOAD&PUSH 0)
22    (LOAD&PUSH 1)
23    (CALLSR&PUSH 2 55)                  ; *
26    (LOAD&PUSH 8)
27    (LOAD&INC&PUSH 2)
29    (CALLSR 1 56)                       ; /
32    (BIND 2)                            ; V
34    (GETVALUE&PUSH 2)                   ; V
36    (LOAD&PUSH 4)
37    (LOAD&PUSH 6)
38    (STACK-TO-MV 3)
40    (UNBIND1)
41    (SKIP 3)
43    (UNBIND1)
44    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SN (U M) ...)-3|
(CONST 0) = SN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SN
8     (SKIP&RET 1)


Disassembly of function SN
(CONST 0) = M
(CONST 1) = ELLIPTIC-SN-DESCENDING
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (LOAD&PUSH 5)
4     (CALLS2&JMPIFNOT 20 L12)            ; REALP
7     (GETVALUE&PUSH 0)                   ; M
9     (CALLS2&JMPIF 20 L20)               ; REALP
12    L12
12    (LOAD&PUSH 5)
13    (GETVALUE&PUSH 0)                   ; M
15    (CALL2 1)                           ; ELLIPTIC-SN-DESCENDING
17    L17
17    (UNBIND1)
18    (SKIP&RET 3)
20    L20
20    (LOAD&PUSH 5)
21    (GETVALUE&PUSH 0)                   ; M
23    (CALL2&PUSH 1)                      ; ELLIPTIC-SN-DESCENDING
25    (CALLS2 197)                        ; REALPART
27    (JMP L17)


Disassembly of function #:|(DEFUN CN (U M) ...)-4|
(CONST 0) = CN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CN
8     (SKIP&RET 1)


Disassembly of function CN
(CONST 0) = M
(CONST 1) = ELLIPTIC-CN-ASCENDING
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (LOAD&PUSH 5)
4     (CALLS2&JMPIFNOT 20 L12)            ; REALP
7     (GETVALUE&PUSH 0)                   ; M
9     (CALLS2&JMPIF 20 L20)               ; REALP
12    L12
12    (LOAD&PUSH 5)
13    (GETVALUE&PUSH 0)                   ; M
15    (CALL2 1)                           ; ELLIPTIC-CN-ASCENDING
17    L17
17    (UNBIND1)
18    (SKIP&RET 3)
20    L20
20    (LOAD&PUSH 5)
21    (GETVALUE&PUSH 0)                   ; M
23    (CALL2&PUSH 1)                      ; ELLIPTIC-CN-ASCENDING
25    (CALLS2 197)                        ; REALPART
27    (JMP L17)


Disassembly of function #:|(DEFUN DN (U M) ...)-5|
(CONST 0) = DN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DN
8     (SKIP&RET 1)


Disassembly of function DN
(CONST 0) = M
(CONST 1) = ELLIPTIC-DN-ASCENDING
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (LOAD&PUSH 5)
4     (CALLS2&JMPIFNOT 20 L12)            ; REALP
7     (GETVALUE&PUSH 0)                   ; M
9     (CALLS2&JMPIF 20 L20)               ; REALP
12    L12
12    (LOAD&PUSH 5)
13    (GETVALUE&PUSH 0)                   ; M
15    (CALL2 1)                           ; ELLIPTIC-DN-ASCENDING
17    L17
17    (UNBIND1)
18    (SKIP&RET 3)
20    L20
20    (LOAD&PUSH 5)
21    (GETVALUE&PUSH 0)                   ; M
23    (CALL2&PUSH 1)                      ; ELLIPTIC-DN-ASCENDING
25    (CALLS2 197)                        ; REALPART
27    (JMP L17)


Disassembly of function #:|(DEFPROP %JACOBI_SN SIMP-%JACOBI_SN ...)-6|
(CONST 0) = %JACOBI_SN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_SN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_SN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_SN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_CN SIMP-%JACOBI_CN ...)-7|
(CONST 0) = %JACOBI_CN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_CN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_CN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_CN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_DN SIMP-%JACOBI_DN ...)-8|
(CONST 0) = %JACOBI_DN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_DN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_DN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_DN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_SN SIMP-%INVERSE_JACOBI_SN ...)-9|
(CONST 0) = %INVERSE_JACOBI_SN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_SN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_SN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_SN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_CN SIMP-%INVERSE_JACOBI_CN ...)-10|
(CONST 0) = %INVERSE_JACOBI_CN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_CN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_CN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_CN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_DN SIMP-%INVERSE_JACOBI_DN ...)-11|
(CONST 0) = %INVERSE_JACOBI_DN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_DN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_DN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_DN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_SN (# # #) ...)-12|
(CONST 0) = %JACOBI_SN
(CONST 1) = GRAD
(CONST 2) = 
((U M) ((MTIMES) ((%JACOBI_CN) U M) ((%JACOBI_DN) U M))
 ((MPLUS SIMP)
  ((MTIMES SIMP) ((RAT SIMP) 1 2)
   ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
   ((MEXPT SIMP) ((%JACOBI_CN SIMP) U M) 2) ((%JACOBI_SN SIMP) U M))
  ((MTIMES SIMP) ((RAT SIMP) 1 2) ((MEXPT SIMP) M -1) ((%JACOBI_CN SIMP) U M)
   ((%JACOBI_DN SIMP) U M)
   ((MPLUS SIMP) U
    ((MTIMES SIMP) -1 ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
     (($ELLIPTIC_E SIMP) ((%ASIN SIMP) ((%JACOBI_SN SIMP) U M)) M))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_SN
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_CN (# # #) ...)-13|
(CONST 0) = %JACOBI_CN
(CONST 1) = GRAD
(CONST 2) = 
((U M) ((MTIMES SIMP) -1 ((%JACOBI_SN SIMP) U M) ((%JACOBI_DN SIMP) U M))
 ((MPLUS SIMP)
  ((MTIMES SIMP) ((RAT SIMP) -1 2)
   ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
   ((%JACOBI_CN SIMP) U M) ((MEXPT SIMP) ((%JACOBI_SN SIMP) U M) 2))
  ((MTIMES SIMP) ((RAT SIMP) -1 2) ((MEXPT SIMP) M -1) ((%JACOBI_DN SIMP) U M)
   ((%JACOBI_SN SIMP) U M)
   ((MPLUS SIMP) U
    ((MTIMES SIMP) -1 ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
     (($ELLIPTIC_E SIMP) ((%ASIN SIMP) ((%JACOBI_SN SIMP) U M)) M))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_CN
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# -1 # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_DN (# # #) ...)-14|
(CONST 0) = %JACOBI_DN
(CONST 1) = GRAD
(CONST 2) = 
((U M) ((MTIMES) -1 M ((%JACOBI_SN) U M) ((%JACOBI_CN) U M))
 ((MPLUS SIMP)
  ((MTIMES SIMP) ((RAT SIMP) -1 2)
   ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
   ((%JACOBI_DN SIMP) U M) ((MEXPT SIMP) ((%JACOBI_SN SIMP) U M) 2))
  ((MTIMES SIMP) ((RAT SIMP) -1 2) ((%JACOBI_CN SIMP) U M)
   ((%JACOBI_SN SIMP) U M)
   ((MPLUS SIMP) U
    ((MTIMES SIMP) -1 ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
     (($ELLIPTIC_E SIMP) ((%ASIN SIMP) ((%JACOBI_SN SIMP) U M)) M))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_DN
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# -1 M # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_SN (# # #) ...)-15|
(CONST 0) = %INVERSE_JACOBI_SN
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES SIMP)
  ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
   ((RAT SIMP) -1 2))
  ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M ((MEXPT SIMP) X 2)))
   ((RAT SIMP) -1 2)))
 ((MTIMES SIMP) ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
  ((MPLUS SIMP)
   ((MTIMES SIMP) -1 X
    ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
     ((RAT SIMP) 1 2))
    ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M ((MEXPT SIMP) X 2)))
     ((RAT SIMP) -1 2)))
   ((MTIMES SIMP) ((MEXPT SIMP) M -1)
    ((MPLUS SIMP) ((%ELLIPTIC_E SIMP) ((%ASIN SIMP) X) M)
     ((MTIMES SIMP) -1 ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M))
      ((%ELLIPTIC_F SIMP) ((%ASIN SIMP) X) M)))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_SN
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_CN (# # #) ...)-16|
(CONST 0) = %INVERSE_JACOBI_CN
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES SIMP) -1
  ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
   ((RAT SIMP) -1 2))
  ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M ((MEXPT SIMP) X 2)))
   ((RAT SIMP) -1 2)))
 ((MTIMES SIMP) ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
  ((MPLUS SIMP)
   ((MTIMES SIMP) -1
    ((MEXPT SIMP)
     ((MPLUS SIMP) 1
      ((MTIMES SIMP) -1 M
       ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))))
     ((RAT SIMP) -1 2))
    ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
     ((RAT SIMP) 1 2))
    ((MABS SIMP) X))
   ((MTIMES SIMP) ((MEXPT SIMP) M -1)
    ((MPLUS SIMP)
     ((%ELLIPTIC_E SIMP)
      ((%ASIN SIMP)
       ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
        ((RAT SIMP) 1 2)))
      M)
     ((MTIMES SIMP) -1 ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M))
      ((%ELLIPTIC_F SIMP)
       ((%ASIN SIMP)
        ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
         ((RAT SIMP) 1 2)))
       M)))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_CN
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# -1 # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_DN (# # #) ...)-17|
(CONST 0) = %INVERSE_JACOBI_DN
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES SIMP)
  ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
   ((RAT SIMP) -1 2))
  ((MEXPT SIMP) ((MPLUS SIMP) -1 M ((MEXPT SIMP) X 2)) ((RAT SIMP) -1 2)))
 ((MPLUS SIMP)
  ((MTIMES SIMP) ((RAT SIMP) -1 2) ((MEXPT SIMP) M ((RAT SIMP) -3 2))
   ((MEXPT SIMP)
    ((MPLUS SIMP) 1
     ((MTIMES SIMP) -1 ((MEXPT SIMP) M -1)
      ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))))
    ((RAT SIMP) -1 2))
   ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
    ((RAT SIMP) 1 2))
   ((MEXPT SIMP) ((MABS SIMP) X) -1))
  ((MTIMES SIMP) ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
   ((MPLUS SIMP)
    ((MTIMES SIMP) -1 ((MEXPT SIMP) M ((RAT SIMP) -1 2))
     ((MEXPT SIMP)
      ((MPLUS SIMP) 1
       ((MTIMES SIMP) -1 ((MEXPT SIMP) M -1)
        ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))))
      ((RAT SIMP) 1 2))
     ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
      ((RAT SIMP) 1 2))
     ((MEXPT SIMP) ((MABS SIMP) X) -1))
    ((MTIMES SIMP) ((MEXPT SIMP) M -1)
     ((MPLUS SIMP)
      ((%ELLIPTIC_E SIMP)
       ((%ASIN SIMP)
        ((MTIMES SIMP) ((MEXPT SIMP) M ((RAT SIMP) -1 2))
         ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
          ((RAT SIMP) 1 2))))
       M)
      ((MTIMES SIMP) -1 ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M))
       ((%ELLIPTIC_F SIMP)
        ((%ASIN SIMP)
         ((MTIMES SIMP) ((MEXPT SIMP) M ((RAT SIMP) -1 2))
          ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 ((MEXPT SIMP) X 2)))
           ((RAT SIMP) 1 2))))
        M))))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_DN
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $JACOBI_SN (U M) ...)-18|
(CONST 0) = $JACOBI_SN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_SN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_SN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_SN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_SN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_SN
8     (SKIP&RET 1)


Disassembly of function $JACOBI_SN
(CONST 0) = M
(CONST 1) = (%JACOBI_SN)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_SN)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $JACOBI_CN (U M) ...)-19|
(CONST 0) = $JACOBI_CN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_CN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_CN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_CN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_CN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_CN
8     (SKIP&RET 1)


Disassembly of function $JACOBI_CN
(CONST 0) = M
(CONST 1) = (%JACOBI_CN)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_CN)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $JACOBI_DN (U M) ...)-20|
(CONST 0) = $JACOBI_DN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_DN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_DN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_DN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_DN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_DN
8     (SKIP&RET 1)


Disassembly of function $JACOBI_DN
(CONST 0) = M
(CONST 1) = (%JACOBI_DN)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_DN)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_SN (U M) ...)-21|
(CONST 0) = $INVERSE_JACOBI_SN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_SN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_SN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_SN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_SN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_SN
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_SN
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_SN)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_SN)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_CN (U M) ...)-22|
(CONST 0) = $INVERSE_JACOBI_CN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_CN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_CN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_CN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_CN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_CN
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_CN
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_CN)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_CN)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_DN (U M) ...)-23|
(CONST 0) = $INVERSE_JACOBI_DN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_DN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_DN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_DN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_DN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_DN
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_DN
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_DN)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_DN)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFUN COMPLEX-NUMBER-P (U) ...)-24|
(CONST 0) = COMPLEX-NUMBER-P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPLEX-NUMBER-P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLEX-NUMBER-P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPLEX-NUMBER-P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPLEX-NUMBER-P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPLEX-NUMBER-P
8     (SKIP&RET 1)


Disassembly of function COMPLEX-NUMBER-P
(CONST 0) = $%I
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
43 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 8)                          ; NUMBERP
3     (JMPIF1 L51)
5     (LOAD&PUSH 1)
6     (CALLS2 4)                          ; CONSP
8     (JMPIFNOT1 L51)
10    (LOAD 1)
11    (CDR)
12    (CAR&PUSH)
13    (CALLS2 8)                          ; NUMBERP
15    (JMPIFNOT1 L51)
17    (LOAD 1)
18    (CDR)
19    (CDR)
20    (CAR)
21    (JMPIFATOM L43)
23    (LOAD 1)
24    (CDR)
25    (CDR)
26    (CAR)
27    (CDR)
28    (CAR&PUSH)
29    (CALLS2&JMPIFNOT 8 L43)             ; NUMBERP
32    (LOAD 1)
33    (CDR)
34    (CDR)
35    (CAR)
36    (CDR)
37    (CDR)
38    (CAR&PUSH)
39    (CONST 0)                           ; $%I
40    (EQ)
41    (JMPIF1 L51)
43    L43
43    (LOAD 1)
44    (CDR)
45    (CDR)
46    (CAR&PUSH)
47    (CONST 0)                           ; $%I
48    (EQ)
49    (SKIP&RET 2)
51    L51
51    (SKIP&RET 2)


Disassembly of function #:|(DEFUN COMPLEXIFY (X) ...)-25|
(CONST 0) = COMPLEXIFY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COMPLEXIFY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COMPLEXIFY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COMPLEXIFY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COMPLEXIFY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COMPLEXIFY
8     (SKIP&RET 1)


Disassembly of function COMPLEXIFY
(CONST 0) = X
(CONST 1) = (MTIMES)
(CONST 2) = ($%I)
(CONST 3) = (MPLUS SIMP)
(CONST 4) = (MTIMES SIMP)
(CONST 5) = ($%I)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
29 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 20 L33)               ; REALP
8     (GETVALUE&PUSH 0)                   ; X
10    (CALLS2&PUSH 197)                   ; REALPART
12    (CALLS2&JMPIF 145 L37)              ; ZEROP
15    (CONST&PUSH 3)                      ; (MPLUS SIMP)
16    (GETVALUE&PUSH 0)                   ; X
18    (CALLS2&PUSH 197)                   ; REALPART
20    (CONST&PUSH 4)                      ; (MTIMES SIMP)
21    (GETVALUE&PUSH 0)                   ; X
23    (CALLS2&PUSH 198)                   ; IMAGPART
25    (CONST 5)                           ; ($%I)
26    (LIST*&PUSH 2)
28    (LIST 3)
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (GETVALUE 0)                        ; X
35    (JMP L30)
37    L37
37    (CONST&PUSH 1)                      ; (MTIMES)
38    (GETVALUE&PUSH 0)                   ; X
40    (CALLS2&PUSH 198)                   ; IMAGPART
42    (CONST 2)                           ; ($%I)
43    (LIST* 2)
45    (JMP L30)


Disassembly of function #:|(DEFUN KC-ARG (EXP M) ...)-26|
(CONST 0) = KC-ARG
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KC-ARG>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KC-ARG
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KC-ARG
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KC-ARG>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KC-ARG
8     (SKIP&RET 1)


Disassembly of function KC-ARG
(CONST 0) = EXP
(CONST 1) = M
(CONST 2) = (%ELLIPTIC_KC)
(CONST 3) = MAXIMA-SUBSTITUTE
(CONST 4) = LINEARP
(CONST 5) = 0
(CONST 6) = COEFFICIENT
(CONST 7) = ZEROP1
(CONST 8) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP M)
38 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 143)                   ; GENSYM
10    (LOAD&PUSH 0)
11    (CONST&PUSH 2)                      ; (%ELLIPTIC_KC)
12    (GETVALUE&PUSH 1)                   ; M
14    (LIST&PUSH 2)
16    (GETVALUE&PUSH 0)                   ; EXP
18    (CALL&PUSH 3 3)                     ; MAXIMA-SUBSTITUTE
21    (LOAD&PUSH 0)
22    (GETVALUE&PUSH 0)                   ; EXP
24    (CALLS2 3)                          ; EQUALP
26    (NOT)
27    (JMPIFNOT1 L55)
29    (LOAD&PUSH 0)
30    (LOAD&PUSH 2)
31    (CALL2 4)                           ; LINEARP
33    (JMPIFNOT1 L55)
35    (LOAD&PUSH 0)
36    (LOAD&PUSH 2)
37    (CONST&PUSH 5)                      ; 0
38    (CALL&PUSH 3 6)                     ; COEFFICIENT
41    (CALL1 7)                           ; ZEROP1
43    (JMPIFNOT1 L55)
45    (LOAD&PUSH 0)
46    (LOAD&PUSH 2)
47    (CONST&PUSH 8)                      ; 1
48    (CALL 3 6)                          ; COEFFICIENT
51    (SKIP 2)
53    (JMP L57)
55    L55
55    (SKIP 2)
57    L57
57    (UNBIND 2)
59    (SKIP&RET 3)


Disassembly of function #:|(DEFUN KC-ARG2 (EXP M) ...)-27|
(CONST 0) = KC-ARG2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE KC-ARG2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; KC-ARG2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; KC-ARG2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE KC-ARG2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; KC-ARG2
8     (SKIP&RET 1)


Disassembly of function KC-ARG2
(CONST 0) = EXP
(CONST 1) = M
(CONST 2) = (%ELLIPTIC_KC)
(CONST 3) = MAXIMA-SUBSTITUTE
(CONST 4) = LINEARP
(CONST 5) = 1
(CONST 6) = COEFFICIENT
(CONST 7) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP M)
37 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 143)                   ; GENSYM
10    (LOAD&PUSH 0)
11    (CONST&PUSH 2)                      ; (%ELLIPTIC_KC)
12    (GETVALUE&PUSH 1)                   ; M
14    (LIST&PUSH 2)
16    (GETVALUE&PUSH 0)                   ; EXP
18    (CALL&PUSH 3 3)                     ; MAXIMA-SUBSTITUTE
21    (LOAD&PUSH 0)
22    (GETVALUE&PUSH 0)                   ; EXP
24    (CALLS2 3)                          ; EQUALP
26    (NOT)
27    (JMPIFNOT1 L53)
29    (LOAD&PUSH 0)
30    (LOAD&PUSH 2)
31    (CALL2 4)                           ; LINEARP
33    (JMPIFNOT1 L53)
35    (LOAD&PUSH 0)
36    (LOAD&PUSH 2)
37    (CONST&PUSH 5)                      ; 1
38    (CALL&PUSH 3 6)                     ; COEFFICIENT
41    (LOAD&PUSH 1)
42    (LOAD&PUSH 3)
43    (CONST&PUSH 7)                      ; 0
44    (CALL&PUSH 3 6)                     ; COEFFICIENT
47    (LIST 2)
49    (SKIP 2)
51    (JMP L55)
53    L53
53    (SKIP 2)
55    L55
55    (UNBIND 2)
57    (SKIP&RET 3)

WARNING in SIMP-%JACOBI_SN in lines 498..588 :
|3//2| is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
WARNING in SIMP-%JACOBI_SN in lines 498..588 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_SN (FORM Y Z) ...)-28|
(CONST 0) = SIMP-%JACOBI_SN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_SN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_SN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_SN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_SN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_SN
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_SN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = SN
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = COMPLEXIFY
(CONST 12) = ZEROP1
(CONST 13) = 0
(CONST 14) = (%SIN)
(CONST 15) = ONEP1
(CONST 16) = (%TANH)
(CONST 17) = $TRIGSIGN
(CONST 18) = MMINUSP*
(CONST 19) = %JACOBI_SN
(CONST 20) = NEG
(CONST 21) = SIMPLIFY
(CONST 22) = $%IARGS
(CONST 23) = $%I
(CONST 24) = MULTIPLEP
(CONST 25) = %JACOBI_SC
(CONST 26) = 1
(CONST 27) = COEFF
(CONST 28) = ADD
(CONST 29) = MUL
(CONST 30) = KC-ARG2
(CONST 31) = 2
(CONST 32) = (2 . 2)
(CONST 33) = SYSTEM::DESTRUCTURING-ERROR
(CONST 34) = 4
(CONST 35) = #S(HASH-TABLE EQ (3 . 61) (2 . 46) (1 . 23) (0 . 8))
(CONST 36) = (%JACOBI_SN SIMP)
(CONST 37) = (%JACOBI_CD SIMP)
(CONST 38) = (%JACOBI_SN SIMP)
(CONST 39) = -1
(CONST 40) = (%JACOBI_CD SIMP)
(CONST 41) = TYPE-ERROR
(CONST 42) = :DATUM
(CONST 43) = :EXPECTED-TYPE
(CONST 44) = (MEMBER 0 1 2 3)
(CONST 45) = SYSTEM::TYPE-ERROR-STRING
(CONST 46) = (MOD LIN 4)
(CONST 47) = (0 1 2 3)
(CONST 48) = SYSTEM::CASE-ERROR-STRING
(CONST 49) = |1//2|
(CONST 50) = ALIKE1
(CONST 51) = (MEXPT SIMP)
(CONST 52) = (MPLUS SIMP)
(CONST 53) = (MEXPT SIMP)
(CONST 54) = (MPLUS SIMP)
(CONST 55) = (MTIMES SIMP)
(CONST 56) = (((RAT SIMP) 1 2))
(CONST 57) = (((RAT) -1 2))
(CONST 58) = |3//2|
(CONST 59) = (%JACOBI_CD)
(CONST 60) = (MTIMES)
(CONST 61) = ((RAT) 1 2)
(CONST 62) = (%ELLIPTIC_KC)
(CONST 63) = SIMPLIFYA
(CONST 64) = (%JACOBI_SN)
(CONST 65) = EQTEST
(CONST 66) = (%JACOBI_SN)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($%IARGS $TRIGSIGN |3//2| |1//2| $NUMER M FORM)
273 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L37)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L86)               ; FLOATP
37    L37
37    (GETVALUE 5)                        ; $NUMER
39    (JMPIFNOT L50)
41    (LOAD&PUSH 4)
42    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
45    (GETVALUE&PUSH 4)                   ; M
47    (CALLS2&JMPIF 8 L86)                ; NUMBERP
50    L50
50    (GETVALUE 5)                        ; $NUMER
52    (JMPIFNOT L63)
54    (LOAD&PUSH 4)
55    (CALL1&JMPIFNOT 8 L63)              ; COMPLEX-NUMBER-P
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 8 L100)                ; COMPLEX-NUMBER-P
63    L63
63    (LOAD&PUSH 4)
64    (CALL1&JMPIF 12 L128)               ; ZEROP1
67    (GETVALUE&PUSH 4)                   ; M
69    (CALL1&JMPIF 12 L132)               ; ZEROP1
72    (GETVALUE&PUSH 4)                   ; M
74    (CALL1&JMPIFNOT 15 L414)            ; ONEP1
78    (CONST 16)                          ; (%TANH)
79    L79
79    (PUSH)
80    (LOAD&PUSH 5)
81    (LIST 2)
83    (JMP L453)
86    L86
86    (LOAD&PUSH 4)
87    (CONST&PUSH 6)                      ; 1.0
88    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
90    (GETVALUE&PUSH 4)                   ; M
92    (CONST&PUSH 6)                      ; 1.0
93    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
95    (CALL2 7)                           ; SN
97    (JMP L453)
100   L100
100   (LOAD&PUSH 4)
101   (CALL1&PUSH 9)                      ; $REALPART
103   (LOAD&PUSH 5)
104   (CALL1&PUSH 10)                     ; $IMAGPART
106   (CALLS2&PUSH 196)                   ; COMPLEX
108   (GETVALUE&PUSH 4)                   ; M
110   (CALL1&PUSH 9)                      ; $REALPART
112   (GETVALUE&PUSH 4)                   ; M
114   (CALL1&PUSH 10)                     ; $IMAGPART
116   (CALLS2&PUSH 196)                   ; COMPLEX
118   (CALL2&PUSH 7)                      ; SN
120   (LOAD&PUSH 0)
121   (CALL1 11)                          ; COMPLEXIFY
123   (SKIP 1)
125   (JMP L453)
128   L128
128   (CONST 13)                          ; 0
129   (JMP L453)
132   L132
132   (CONST 14)                          ; (%SIN)
133   (JMP L79)
135   L135
135   (CONST&PUSH 19)                     ; %JACOBI_SN
136   (LIST&PUSH 1)
138   (LOAD&PUSH 5)
139   (CALL1&PUSH 20)                     ; NEG
141   (GETVALUE&PUSH 4)                   ; M
143   (LIST&PUSH 3)
145   (CALL1&PUSH 21)                     ; SIMPLIFY
147   (CALL1 20)                          ; NEG
149   (JMP L453)
152   L152
152   (CONST&PUSH 23)                     ; $%I
153   (CONST&PUSH 25)                     ; %JACOBI_SC
154   (LIST&PUSH 1)
156   (LOAD&PUSH 6)
157   (CONST&PUSH 23)                     ; $%I
158   (CONST&PUSH 26)                     ; 1
159   (CALL&PUSH 3 27)                    ; COEFF
162   (CONST&PUSH 26)                     ; 1
163   (GETVALUE&PUSH 4)                   ; M
165   (CALL1&PUSH 20)                     ; NEG
167   (CALL2&PUSH 28)                     ; ADD
169   (LIST&PUSH 3)
171   (CALL1&PUSH 21)                     ; SIMPLIFY
173   (CALL2 29)                          ; MUL
175   (JMP L453)
178   L178
178   (LOAD&PUSH 0)
179   (CONST&PUSH 32)                     ; (2 . 2)
181   (CALL2 33)                          ; SYSTEM::DESTRUCTURING-ERROR
183   (JMP L453)
186   L186
186   (LOAD&PUSH 1)
187   (CONST&PUSH 34)                     ; 4
189   (CALLS2&PUSH 183)                   ; MOD
191   (LOAD 0)
192   (JMPHASH 35 L274 L202 L217 L240 L255)
196   L196
196   (CONST 13)                          ; 0
197   (SKIP 3)
199   (JMP L453)
202   L202
202   (LOAD&PUSH 1)
203   (CALL1&JMPIF 12 L196)               ; ZEROP1
206   (CONST 36)                          ; (%JACOBI_SN SIMP)
208   (JMP L223)
210   L210
210   (CONST 26)                          ; 1
212   (SKIP 3)
214   (JMP L453)
217   L217
217   (LOAD&PUSH 1)
218   (CALL1&JMPIF 12 L210)               ; ZEROP1
221   (CONST 37)                          ; (%JACOBI_CD SIMP)
223   L223
223   (PUSH)
224   (LOAD&PUSH 2)
225   (GETVALUE&PUSH 4)                   ; M
227   (LIST 3)
229   (SKIP 3)
231   (JMP L453)
234   L234
234   (CONST 13)                          ; 0
235   (SKIP 3)
237   (JMP L453)
240   L240
240   (LOAD&PUSH 1)
241   (CALL1&JMPIF 12 L234)               ; ZEROP1
244   (CONST 38)                          ; (%JACOBI_SN SIMP)
246   (JMP L261)
248   L248
248   (CONST 39)                          ; -1
250   (SKIP 3)
252   (JMP L453)
255   L255
255   (LOAD&PUSH 1)
256   (CALL1&JMPIF 12 L248)               ; ZEROP1
259   (CONST 40)                          ; (%JACOBI_CD SIMP)
261   L261
261   (PUSH)
262   (LOAD&PUSH 2)
263   (GETVALUE&PUSH 4)                   ; M
265   (LIST&PUSH 3)
267   (CALL1 20)                          ; NEG
269   (SKIP 3)
271   (JMP L453)
274   L274
274   (CONST&PUSH 41)                     ; TYPE-ERROR
276   (CONST&PUSH 42)                     ; :DATUM
278   (LOAD&PUSH 2)
279   (CONST&PUSH 43)                     ; :EXPECTED-TYPE
281   (CONST&PUSH 44)                     ; (MEMBER 0 1 2 3)
283   (CALL0 45)                          ; SYSTEM::TYPE-ERROR-STRING
285   (PUSH)
286   (CONST&PUSH 46)                     ; (MOD LIN 4)
288   (CONST&PUSH 47)                     ; (0 1 2 3)
290   (CALL2&PUSH 48)                     ; SYSTEM::CASE-ERROR-STRING
292   (LOAD&PUSH 7)
293   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
296   L296
296   (CONST&PUSH 51)                     ; (MEXPT SIMP)
298   (CONST&PUSH 52)                     ; (MPLUS SIMP)
300   (CONST&PUSH 26)                     ; 1
301   (CONST&PUSH 53)                     ; (MEXPT SIMP)
303   (CONST&PUSH 54)                     ; (MPLUS SIMP)
305   (CONST&PUSH 26)                     ; 1
306   (CONST&PUSH 55)                     ; (MTIMES SIMP)
308   (CONST&PUSH 39)                     ; -1
310   (GETVALUE&PUSH 4)                   ; M
312   (LIST&PUSH 3)
314   (LIST&PUSH 3)
316   (CONST 56)                          ; (((RAT SIMP) 1 2))
318   (LIST*&PUSH 2)
320   (LIST&PUSH 3)
322   (CONST 57)                          ; (((RAT) -1 2))
324   (LIST* 2)
326   (SKIP 2)
328   (JMP L453)
331   L331
331   (CONST&PUSH 59)                     ; (%JACOBI_CD)
333   (CONST&PUSH 60)                     ; (MTIMES)
335   (CONST&PUSH 61)                     ; ((RAT) 1 2)
337   (CONST&PUSH 62)                     ; (%ELLIPTIC_KC)
339   (GETVALUE&PUSH 4)                   ; M
341   (LIST&PUSH 2)
343   (LIST&PUSH 3)
345   (GETVALUE&PUSH 4)                   ; M
347   (LIST&PUSH 3)
349   (NIL&PUSH)
350   (CALL2 63)                          ; SIMPLIFYA
352   (SKIP 2)
354   (JMP L453)
357   L357
357   (PUSH)
358   (CALLS2&PUSH 71)                    ; LENGTH
360   (CONST&PUSH 31)                     ; 2
362   (CALLSR&JMPIF 1 46 L178)            ; /=
367   (LOAD&CAR&PUSH 0)
369   (LOAD 1)
370   (CDR)
371   (CAR&PUSH)
372   (LOAD&PUSH 1)
373   (CALLS2&JMPIF 12 L186)              ; INTEGERP
377   (LOAD&PUSH 1)
378   (GETVALUE&PUSH 49)                  ; |1//2|
380   (CALL2&JMPIFNOT 50 L388)            ; ALIKE1
383   (LOAD&PUSH 0)
384   (CALL1&JMPIF 12 L296)               ; ZEROP1
388   L388
388   (LOAD&PUSH 1)
389   (GETVALUE&PUSH 58)                  ; |3//2|
391   (CALL2&JMPIFNOT 50 L399)            ; ALIKE1
394   (LOAD&PUSH 0)
395   (CALL1&JMPIF 12 L331)               ; ZEROP1
399   L399
399   (CONST&PUSH 64)                     ; (%JACOBI_SN)
401   (LOAD&PUSH 7)
402   (GETVALUE&PUSH 4)                   ; M
404   (LIST&PUSH 3)
406   (GETVALUE&PUSH 0)                   ; FORM
408   (CALL2 65)                          ; EQTEST
410   (SKIP 2)
412   (JMP L453)
414   L414
414   (GETVALUE 17)                       ; $TRIGSIGN
416   (JMPIFNOT L423)
418   (LOAD&PUSH 4)
419   (CALL1&JMPIF 18 L135)               ; MMINUSP*
423   L423
423   (GETVALUE 22)                       ; $%IARGS
425   (JMPIFNOT L433)
427   (LOAD&PUSH 4)
428   (CONST&PUSH 23)                     ; $%I
429   (CALL2&JMPIF 24 L152)               ; MULTIPLEP
433   L433
433   (LOAD&PUSH 4)
434   (GETVALUE&PUSH 4)                   ; M
436   (CALL2 30)                          ; KC-ARG2
438   (STORE 0)
439   (JMPIF L357)
442   (CONST&PUSH 66)                     ; (%JACOBI_SN)
444   (LOAD&PUSH 5)
445   (GETVALUE&PUSH 4)                   ; M
447   (LIST&PUSH 3)
449   (GETVALUE&PUSH 0)                   ; FORM
451   (CALL2 65)                          ; EQTEST
453   L453
453   (SKIP 1)
455   (UNBIND1)
456   (SKIP 1)
458   (UNBIND 2)
460   (SKIP&RET 4)

WARNING in SIMP-%JACOBI_CN in lines 590..678 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_CN (FORM Y Z) ...)-29|
(CONST 0) = SIMP-%JACOBI_CN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_CN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_CN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_CN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_CN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_CN
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_CN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = CN
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = COMPLEXIFY
(CONST 12) = ZEROP1
(CONST 13) = 1
(CONST 14) = (%COS)
(CONST 15) = ONEP1
(CONST 16) = (%SECH)
(CONST 17) = $TRIGSIGN
(CONST 18) = MMINUSP*
(CONST 19) = %JACOBI_CN
(CONST 20) = NEG
(CONST 21) = SIMPLIFY
(CONST 22) = $%IARGS
(CONST 23) = $%I
(CONST 24) = MULTIPLEP
(CONST 25) = %JACOBI_NC
(CONST 26) = COEFF
(CONST 27) = ADD
(CONST 28) = KC-ARG2
(CONST 29) = 2
(CONST 30) = (2 . 2)
(CONST 31) = SYSTEM::DESTRUCTURING-ERROR
(CONST 32) = 4
(CONST 33) = #S(HASH-TABLE EQ (3 . 94) (2 . 68) (1 . 27) (0 . 8))
(CONST 34) = (%JACOBI_CN SIMP)
(CONST 35) = 0
(CONST 36) = (MTIMES SIMP)
(CONST 37) = (MEXPT SIMP)
(CONST 38) = (MPLUS SIMP)
(CONST 39) = (MTIMES SIMP)
(CONST 40) = -1
(CONST 41) = (((RAT SIMP) 1 2))
(CONST 42) = (%JACOBI_SD SIMP)
(CONST 43) = (%JACOBI_CN)
(CONST 44) = (MTIMES SIMP)
(CONST 45) = (MEXPT SIMP)
(CONST 46) = (MPLUS SIMP)
(CONST 47) = (MTIMES SIMP)
(CONST 48) = (((RAT SIMP) 1 2))
(CONST 49) = (%JACOBI_SD SIMP)
(CONST 50) = TYPE-ERROR
(CONST 51) = :DATUM
(CONST 52) = :EXPECTED-TYPE
(CONST 53) = (MEMBER 0 1 2 3)
(CONST 54) = SYSTEM::TYPE-ERROR-STRING
(CONST 55) = (MOD LIN 4)
(CONST 56) = (0 1 2 3)
(CONST 57) = SYSTEM::CASE-ERROR-STRING
(CONST 58) = |1//2|
(CONST 59) = ALIKE1
(CONST 60) = (MTIMES SIMP)
(CONST 61) = (MEXPT SIMP)
(CONST 62) = (MPLUS SIMP)
(CONST 63) = (MTIMES SIMP)
(CONST 64) = (((RAT SIMP) 1 4))
(CONST 65) = (MEXPT SIMP)
(CONST 66) = (MPLUS SIMP)
(CONST 67) = (MEXPT SIMP)
(CONST 68) = (MPLUS SIMP)
(CONST 69) = (MTIMES SIMP)
(CONST 70) = (((RAT SIMP) 1 2))
(CONST 71) = (((RAT SIMP) -1 2))
(CONST 72) = (%JACOBI_CN)
(CONST 73) = EQTEST
(CONST 74) = (%JACOBI_CN)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| $%IARGS $TRIGSIGN $NUMER M FORM)
289 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L37)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L86)               ; FLOATP
37    L37
37    (GETVALUE 5)                        ; $NUMER
39    (JMPIFNOT L50)
41    (LOAD&PUSH 4)
42    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
45    (GETVALUE&PUSH 4)                   ; M
47    (CALLS2&JMPIF 8 L86)                ; NUMBERP
50    L50
50    (GETVALUE 5)                        ; $NUMER
52    (JMPIFNOT L63)
54    (LOAD&PUSH 4)
55    (CALL1&JMPIFNOT 8 L63)              ; COMPLEX-NUMBER-P
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 8 L100)                ; COMPLEX-NUMBER-P
63    L63
63    (LOAD&PUSH 4)
64    (CALL1&JMPIF 12 L128)               ; ZEROP1
67    (GETVALUE&PUSH 4)                   ; M
69    (CALL1&JMPIF 12 L132)               ; ZEROP1
72    (GETVALUE&PUSH 4)                   ; M
74    (CALL1&JMPIFNOT 15 L145)            ; ONEP1
78    (CONST 16)                          ; (%SECH)
79    L79
79    (PUSH)
80    (LOAD&PUSH 5)
81    (LIST 2)
83    (JMP L482)
86    L86
86    (LOAD&PUSH 4)
87    (CONST&PUSH 6)                      ; 1.0
88    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
90    (GETVALUE&PUSH 4)                   ; M
92    (CONST&PUSH 6)                      ; 1.0
93    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
95    (CALL2 7)                           ; CN
97    (JMP L482)
100   L100
100   (LOAD&PUSH 4)
101   (CALL1&PUSH 9)                      ; $REALPART
103   (LOAD&PUSH 5)
104   (CALL1&PUSH 10)                     ; $IMAGPART
106   (CALLS2&PUSH 196)                   ; COMPLEX
108   (GETVALUE&PUSH 4)                   ; M
110   (CALL1&PUSH 9)                      ; $REALPART
112   (GETVALUE&PUSH 4)                   ; M
114   (CALL1&PUSH 10)                     ; $IMAGPART
116   (CALLS2&PUSH 196)                   ; COMPLEX
118   (CALL2&PUSH 7)                      ; CN
120   (LOAD&PUSH 0)
121   (CALL1 11)                          ; COMPLEXIFY
123   (SKIP 1)
125   (JMP L482)
128   L128
128   (CONST 13)                          ; 1
129   (JMP L482)
132   L132
132   (CONST 14)                          ; (%COS)
133   (JMP L79)
135   L135
135   (CONST&PUSH 19)                     ; %JACOBI_CN
136   (LIST&PUSH 1)
138   (LOAD&PUSH 5)
139   (CALL1&PUSH 20)                     ; NEG
141   (GETVALUE 4)                        ; M
143   (JMP L180)
145   L145
145   (GETVALUE 17)                       ; $TRIGSIGN
147   (JMPIFNOT L153)
149   (LOAD&PUSH 4)
150   (CALL1&JMPIF 18 L135)               ; MMINUSP*
153   L153
153   (GETVALUE 22)                       ; $%IARGS
155   (JMPIFNOT L463)
158   (LOAD&PUSH 4)
159   (CONST&PUSH 23)                     ; $%I
160   (CALL2&JMPIFNOT 24 L463)            ; MULTIPLEP
164   (CONST&PUSH 25)                     ; %JACOBI_NC
165   (LIST&PUSH 1)
167   (LOAD&PUSH 5)
168   (CONST&PUSH 23)                     ; $%I
169   (CONST&PUSH 13)                     ; 1
170   (CALL&PUSH 3 26)                    ; COEFF
173   (CONST&PUSH 13)                     ; 1
174   (GETVALUE&PUSH 4)                   ; M
176   (CALL1&PUSH 20)                     ; NEG
178   (CALL2 27)                          ; ADD
180   L180
180   (PUSH)
181   (LIST&PUSH 3)
183   (CALL1 21)                          ; SIMPLIFY
185   (JMP L482)
188   L188
188   (LOAD&PUSH 0)
189   (CONST&PUSH 30)                     ; (2 . 2)
191   (CALL2 31)                          ; SYSTEM::DESTRUCTURING-ERROR
193   (JMP L482)
196   L196
196   (LOAD&PUSH 1)
197   (CONST&PUSH 32)                     ; 4
199   (CALLS2&PUSH 183)                   ; MOD
201   (LOAD 0)
202   (JMPHASH 33 L338 L212 L231 L272 L298)
206   L206
206   (CONST 13)                          ; 1
207   (SKIP 3)
209   (JMP L482)
212   L212
212   (LOAD&PUSH 1)
213   (CALL1&JMPIF 12 L206)               ; ZEROP1
216   (CONST&PUSH 34)                     ; (%JACOBI_CN SIMP)
218   (LOAD&PUSH 2)
219   (GETVALUE 4)                        ; M
221   (JMP L330)
224   L224
224   (CONST 35)                          ; 0
226   (SKIP 3)
228   (JMP L482)
231   L231
231   (LOAD&PUSH 1)
232   (CALL1&JMPIF 12 L224)               ; ZEROP1
235   (CONST&PUSH 36)                     ; (MTIMES SIMP)
237   (CONST&PUSH 37)                     ; (MEXPT SIMP)
239   (CONST&PUSH 38)                     ; (MPLUS SIMP)
241   (CONST&PUSH 13)                     ; 1
242   (CONST&PUSH 39)                     ; (MTIMES SIMP)
244   (CONST&PUSH 40)                     ; -1
246   (GETVALUE&PUSH 4)                   ; M
248   (LIST&PUSH 3)
250   (LIST&PUSH 3)
252   (CONST 41)                          ; (((RAT SIMP) 1 2))
254   (LIST*&PUSH 2)
256   (CONST&PUSH 42)                     ; (%JACOBI_SD SIMP)
258   (LOAD&PUSH 4)
259   (GETVALUE&PUSH 4)                   ; M
261   (LIST 3)
263   (JMP L281)
265   L265
265   (CONST 40)                          ; -1
267   (SKIP 3)
269   (JMP L482)
272   L272
272   (LOAD&PUSH 1)
273   (CALL1&JMPIF 12 L265)               ; ZEROP1
276   (CONST&PUSH 43)                     ; (%JACOBI_CN)
278   (LOAD&PUSH 2)
279   (GETVALUE 4)                        ; M
281   L281
281   (PUSH)
282   (LIST&PUSH 3)
284   (CALL1 20)                          ; NEG
286   (SKIP 3)
288   (JMP L482)
291   L291
291   (CONST 35)                          ; 0
293   (SKIP 3)
295   (JMP L482)
298   L298
298   (LOAD&PUSH 1)
299   (CALL1&JMPIF 12 L291)               ; ZEROP1
302   (CONST&PUSH 44)                     ; (MTIMES SIMP)
304   (CONST&PUSH 45)                     ; (MEXPT SIMP)
306   (CONST&PUSH 46)                     ; (MPLUS SIMP)
308   (CONST&PUSH 13)                     ; 1
309   (CONST&PUSH 47)                     ; (MTIMES SIMP)
311   (CONST&PUSH 40)                     ; -1
313   (GETVALUE&PUSH 4)                   ; M
315   (LIST&PUSH 3)
317   (LIST&PUSH 3)
319   (CONST 48)                          ; (((RAT SIMP) 1 2))
321   (LIST*&PUSH 2)
323   (CONST&PUSH 49)                     ; (%JACOBI_SD SIMP)
325   (LOAD&PUSH 4)
326   (GETVALUE&PUSH 4)                   ; M
328   (LIST 3)
330   L330
330   (PUSH)
331   (LIST 3)
333   (SKIP 3)
335   (JMP L482)
338   L338
338   (CONST&PUSH 50)                     ; TYPE-ERROR
340   (CONST&PUSH 51)                     ; :DATUM
342   (LOAD&PUSH 2)
343   (CONST&PUSH 52)                     ; :EXPECTED-TYPE
345   (CONST&PUSH 53)                     ; (MEMBER 0 1 2 3)
347   (CALL0 54)                          ; SYSTEM::TYPE-ERROR-STRING
349   (PUSH)
350   (CONST&PUSH 55)                     ; (MOD LIN 4)
352   (CONST&PUSH 56)                     ; (0 1 2 3)
354   (CALL2&PUSH 57)                     ; SYSTEM::CASE-ERROR-STRING
356   (LOAD&PUSH 7)
357   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
360   L360
360   (CONST&PUSH 60)                     ; (MTIMES SIMP)
362   (CONST&PUSH 61)                     ; (MEXPT SIMP)
364   (CONST&PUSH 62)                     ; (MPLUS SIMP)
366   (CONST&PUSH 13)                     ; 1
367   (CONST&PUSH 63)                     ; (MTIMES SIMP)
369   (CONST&PUSH 40)                     ; -1
371   (GETVALUE&PUSH 4)                   ; M
373   (LIST&PUSH 3)
375   (LIST&PUSH 3)
377   (CONST 64)                          ; (((RAT SIMP) 1 4))
379   (LIST*&PUSH 2)
381   (CONST&PUSH 65)                     ; (MEXPT SIMP)
383   (CONST&PUSH 66)                     ; (MPLUS SIMP)
385   (CONST&PUSH 13)                     ; 1
386   (CONST&PUSH 67)                     ; (MEXPT SIMP)
388   (CONST&PUSH 68)                     ; (MPLUS SIMP)
390   (CONST&PUSH 13)                     ; 1
391   (CONST&PUSH 69)                     ; (MTIMES SIMP)
393   (CONST&PUSH 40)                     ; -1
395   (GETVALUE&PUSH 4)                   ; M
397   (LIST&PUSH 3)
399   (LIST&PUSH 3)
401   (CONST 70)                          ; (((RAT SIMP) 1 2))
403   (LIST*&PUSH 2)
405   (LIST&PUSH 3)
407   (CONST 71)                          ; (((RAT SIMP) -1 2))
409   (LIST*&PUSH 2)
411   (LIST 3)
413   (SKIP 2)
415   (JMP L482)
418   L418
418   (PUSH)
419   (CALLS2&PUSH 71)                    ; LENGTH
421   (CONST&PUSH 29)                     ; 2
422   (CALLSR&JMPIF 1 46 L188)            ; /=
427   (LOAD&CAR&PUSH 0)
429   (LOAD 1)
430   (CDR)
431   (CAR&PUSH)
432   (LOAD&PUSH 1)
433   (CALLS2&JMPIF 12 L196)              ; INTEGERP
437   (LOAD&PUSH 1)
438   (GETVALUE&PUSH 58)                  ; |1//2|
440   (CALL2&JMPIFNOT 59 L448)            ; ALIKE1
443   (LOAD&PUSH 0)
444   (CALL1&JMPIF 12 L360)               ; ZEROP1
448   L448
448   (CONST&PUSH 72)                     ; (%JACOBI_CN)
450   (LOAD&PUSH 7)
451   (GETVALUE&PUSH 4)                   ; M
453   (LIST&PUSH 3)
455   (GETVALUE&PUSH 0)                   ; FORM
457   (CALL2 73)                          ; EQTEST
459   (SKIP 2)
461   (JMP L482)
463   L463
463   (LOAD&PUSH 4)
464   (GETVALUE&PUSH 4)                   ; M
466   (CALL2 28)                          ; KC-ARG2
468   (STORE 0)
469   (JMPIF L418)
471   (CONST&PUSH 74)                     ; (%JACOBI_CN)
473   (LOAD&PUSH 5)
474   (GETVALUE&PUSH 4)                   ; M
476   (LIST&PUSH 3)
478   (GETVALUE&PUSH 0)                   ; FORM
480   (CALL2 73)                          ; EQTEST
482   L482
482   (SKIP 1)
484   (UNBIND1)
485   (SKIP 1)
487   (UNBIND 2)
489   (SKIP&RET 4)

WARNING in SIMP-%JACOBI_DN in lines 680..746 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_DN (FORM Y Z) ...)-30|
(CONST 0) = SIMP-%JACOBI_DN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_DN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_DN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_DN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_DN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_DN
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_DN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = DN
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = COMPLEXIFY
(CONST 12) = ZEROP1
(CONST 13) = 1
(CONST 14) = ONEP1
(CONST 15) = ($SECH)
(CONST 16) = $TRIGSIGN
(CONST 17) = MMINUSP*
(CONST 18) = %JACOBI_DN
(CONST 19) = NEG
(CONST 20) = SIMPLIFY
(CONST 21) = $%IARGS
(CONST 22) = $%I
(CONST 23) = MULTIPLEP
(CONST 24) = %JACOBI_DC
(CONST 25) = COEFF
(CONST 26) = ADD
(CONST 27) = KC-ARG2
(CONST 28) = 2
(CONST 29) = (2 . 2)
(CONST 30) = SYSTEM::DESTRUCTURING-ERROR
(CONST 31) = 0
(CONST 32) = (%JACOBI_DN)
(CONST 33) = (MEXPT SIMP)
(CONST 34) = (MPLUS SIMP)
(CONST 35) = (MTIMES SIMP)
(CONST 36) = -1
(CONST 37) = (((RAT SIMP) 1 2))
(CONST 38) = (MTIMES SIMP)
(CONST 39) = (MEXPT SIMP)
(CONST 40) = (MPLUS SIMP)
(CONST 41) = (MTIMES SIMP)
(CONST 42) = (((RAT SIMP) 1 2))
(CONST 43) = (%JACOBI_ND SIMP)
(CONST 44) = TYPE-ERROR
(CONST 45) = :DATUM
(CONST 46) = :EXPECTED-TYPE
(CONST 47) = (MEMBER 0 1)
(CONST 48) = SYSTEM::TYPE-ERROR-STRING
(CONST 49) = (MOD LIN 2)
(CONST 50) = (0 1)
(CONST 51) = SYSTEM::CASE-ERROR-STRING
(CONST 52) = |1//2|
(CONST 53) = ALIKE1
(CONST 54) = (MEXPT SIMP)
(CONST 55) = (MPLUS SIMP)
(CONST 56) = (MTIMES SIMP)
(CONST 57) = (((RAT SIMP) 1 4))
(CONST 58) = (%JACOBI_CN)
(CONST 59) = EQTEST
(CONST 60) = (%JACOBI_DN)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| $%IARGS $TRIGSIGN $NUMER M FORM)
240 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L38)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L127)              ; FLOATP
38    L38
38    (GETVALUE 5)                        ; $NUMER
40    (JMPIFNOT L52)
42    (LOAD&PUSH 4)
43    (CALLS2&JMPIFNOT 8 L52)             ; NUMBERP
46    (GETVALUE&PUSH 4)                   ; M
48    (CALLS2&JMPIF 8 L127)               ; NUMBERP
52    L52
52    (GETVALUE 5)                        ; $NUMER
54    (JMPIFNOT L66)
56    (LOAD&PUSH 4)
57    (CALL1&JMPIFNOT 8 L66)              ; COMPLEX-NUMBER-P
60    (GETVALUE&PUSH 4)                   ; M
62    (CALL1&JMPIF 8 L141)                ; COMPLEX-NUMBER-P
66    L66
66    (LOAD&PUSH 4)
67    (CALL1&JMPIF 12 L169)               ; ZEROP1
71    (GETVALUE&PUSH 4)                   ; M
73    (CALL1&JMPIF 12 L173)               ; ZEROP1
77    (GETVALUE&PUSH 4)                   ; M
79    (CALL1&JMPIF 14 L177)               ; ONEP1
83    (GETVALUE 16)                       ; $TRIGSIGN
85    (JMPIFNOT L92)
87    (LOAD&PUSH 4)
88    (CALL1&JMPIF 17 L184)               ; MMINUSP*
92    L92
92    (GETVALUE 21)                       ; $%IARGS
94    (JMPIFNOT L244)
97    (LOAD&PUSH 4)
98    (CONST&PUSH 22)                     ; $%I
99    (CALL2&JMPIFNOT 23 L244)            ; MULTIPLEP
103   (CONST&PUSH 24)                     ; %JACOBI_DC
104   (LIST&PUSH 1)
106   (LOAD&PUSH 5)
107   (CONST&PUSH 22)                     ; $%I
108   (CONST&PUSH 13)                     ; 1
109   (CALL&PUSH 3 25)                    ; COEFF
112   (CONST&PUSH 13)                     ; 1
113   (GETVALUE&PUSH 4)                   ; M
115   (CALL1&PUSH 19)                     ; NEG
117   (CALL2 26)                          ; ADD
119   L119
119   (PUSH)
120   (LIST&PUSH 3)
122   (CALL1 20)                          ; SIMPLIFY
124   (JMP L407)
127   L127
127   (LOAD&PUSH 4)
128   (CONST&PUSH 6)                      ; 1.0
129   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
131   (GETVALUE&PUSH 4)                   ; M
133   (CONST&PUSH 6)                      ; 1.0
134   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
136   (CALL2 7)                           ; DN
138   (JMP L407)
141   L141
141   (LOAD&PUSH 4)
142   (CALL1&PUSH 9)                      ; $REALPART
144   (LOAD&PUSH 5)
145   (CALL1&PUSH 10)                     ; $IMAGPART
147   (CALLS2&PUSH 196)                   ; COMPLEX
149   (GETVALUE&PUSH 4)                   ; M
151   (CALL1&PUSH 9)                      ; $REALPART
153   (GETVALUE&PUSH 4)                   ; M
155   (CALL1&PUSH 10)                     ; $IMAGPART
157   (CALLS2&PUSH 196)                   ; COMPLEX
159   (CALL2&PUSH 7)                      ; DN
161   (LOAD&PUSH 0)
162   (CALL1 11)                          ; COMPLEXIFY
164   (SKIP 1)
166   (JMP L407)
169   L169
169   (CONST 13)                          ; 1
170   (JMP L407)
173   L173
173   (CONST 13)                          ; 1
174   (JMP L407)
177   L177
177   (CONST&PUSH 15)                     ; ($SECH)
178   (LOAD&PUSH 5)
179   (LIST 2)
181   (JMP L407)
184   L184
184   (CONST&PUSH 18)                     ; %JACOBI_DN
185   (LIST&PUSH 1)
187   (LOAD&PUSH 5)
188   (CALL1&PUSH 19)                     ; NEG
190   (GETVALUE 4)                        ; M
192   (JMP L119)
195   L195
195   (LOAD&PUSH 0)
196   (CONST&PUSH 29)                     ; (2 . 2)
197   (CALL2 30)                          ; SYSTEM::DESTRUCTURING-ERROR
199   (JMP L407)
202   L202
202   (CONST 13)                          ; 1
203   (SKIP 3)
205   (JMP L407)
208   L208
208   (LOAD&PUSH 1)
209   (CALL1&JMPIF 12 L202)               ; ZEROP1
212   (CONST&PUSH 32)                     ; (%JACOBI_DN)
214   (LOAD&PUSH 2)
215   (GETVALUE 4)                        ; M
217   (JMP L318)
220   L220
220   (CONST&PUSH 33)                     ; (MEXPT SIMP)
222   (CONST&PUSH 34)                     ; (MPLUS SIMP)
224   (CONST&PUSH 13)                     ; 1
225   (CONST&PUSH 35)                     ; (MTIMES SIMP)
227   (CONST&PUSH 36)                     ; -1
229   (GETVALUE&PUSH 4)                   ; M
231   (LIST&PUSH 3)
233   (LIST&PUSH 3)
235   (CONST 37)                          ; (((RAT SIMP) 1 2))
237   (LIST* 2)
239   (SKIP 3)
241   (JMP L407)
244   L244
244   (LOAD&PUSH 4)
245   (GETVALUE&PUSH 4)                   ; M
247   (CALL2 27)                          ; KC-ARG2
249   (STORE 0)
250   (JMPIFNOT L396)
253   (PUSH)
254   (CALLS2&PUSH 71)                    ; LENGTH
256   (CONST&PUSH 28)                     ; 2
257   (CALLSR&JMPIF 1 46 L195)            ; /=
262   (LOAD&CAR&PUSH 0)
264   (LOAD 1)
265   (CDR)
266   (CAR&PUSH)
267   (LOAD&PUSH 1)
268   (CALLS2&JMPIFNOT 12 L371)           ; INTEGERP
272   (LOAD&PUSH 1)
273   (CONST&PUSH 28)                     ; 2
274   (CALLS2&PUSH 183)                   ; MOD
276   (LOAD&PUSH 0)
277   (JMPIFEQTO 31 L208)                 ; 0
281   (LOAD&PUSH 0)
282   (JMPIFNOTEQTO 13 L326)              ; 1
285   (LOAD&PUSH 1)
286   (CALL1&JMPIF 12 L220)               ; ZEROP1
290   (CONST&PUSH 38)                     ; (MTIMES SIMP)
292   (CONST&PUSH 39)                     ; (MEXPT SIMP)
294   (CONST&PUSH 40)                     ; (MPLUS SIMP)
296   (CONST&PUSH 13)                     ; 1
297   (CONST&PUSH 41)                     ; (MTIMES SIMP)
299   (CONST&PUSH 36)                     ; -1
301   (GETVALUE&PUSH 4)                   ; M
303   (LIST&PUSH 3)
305   (LIST&PUSH 3)
307   (CONST 42)                          ; (((RAT SIMP) 1 2))
309   (LIST*&PUSH 2)
311   (CONST&PUSH 43)                     ; (%JACOBI_ND SIMP)
313   (LOAD&PUSH 4)
314   (GETVALUE&PUSH 4)                   ; M
316   (LIST 3)
318   L318
318   (PUSH)
319   (LIST 3)
321   (SKIP 3)
323   (JMP L407)
326   L326
326   (CONST&PUSH 44)                     ; TYPE-ERROR
328   (CONST&PUSH 45)                     ; :DATUM
330   (LOAD&PUSH 2)
331   (CONST&PUSH 46)                     ; :EXPECTED-TYPE
333   (CONST&PUSH 47)                     ; (MEMBER 0 1)
335   (CALL0 48)                          ; SYSTEM::TYPE-ERROR-STRING
337   (PUSH)
338   (CONST&PUSH 49)                     ; (MOD LIN 2)
340   (CONST&PUSH 50)                     ; (0 1)
342   (CALL2&PUSH 51)                     ; SYSTEM::CASE-ERROR-STRING
344   (LOAD&PUSH 7)
345   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
348   L348
348   (CONST&PUSH 54)                     ; (MEXPT SIMP)
350   (CONST&PUSH 55)                     ; (MPLUS SIMP)
352   (CONST&PUSH 13)                     ; 1
353   (CONST&PUSH 56)                     ; (MTIMES SIMP)
355   (CONST&PUSH 36)                     ; -1
357   (GETVALUE&PUSH 4)                   ; M
359   (LIST&PUSH 3)
361   (LIST&PUSH 3)
363   (CONST 57)                          ; (((RAT SIMP) 1 4))
365   (LIST* 2)
367   (SKIP 2)
369   (JMP L407)
371   L371
371   (LOAD&PUSH 1)
372   (GETVALUE&PUSH 52)                  ; |1//2|
374   (CALL2&JMPIFNOT 53 L381)            ; ALIKE1
377   (LOAD&PUSH 0)
378   (CALL1&JMPIF 12 L348)               ; ZEROP1
381   L381
381   (CONST&PUSH 58)                     ; (%JACOBI_CN)
383   (LOAD&PUSH 7)
384   (GETVALUE&PUSH 4)                   ; M
386   (LIST&PUSH 3)
388   (GETVALUE&PUSH 0)                   ; FORM
390   (CALL2 59)                          ; EQTEST
392   (SKIP 2)
394   (JMP L407)
396   L396
396   (CONST&PUSH 60)                     ; (%JACOBI_DN)
398   (LOAD&PUSH 5)
399   (GETVALUE&PUSH 4)                   ; M
401   (LIST&PUSH 3)
403   (GETVALUE&PUSH 0)                   ; FORM
405   (CALL2 59)                          ; EQTEST
407   L407
407   (SKIP 1)
409   (UNBIND1)
410   (SKIP 1)
412   (UNBIND 2)
414   (SKIP&RET 4)

WARNING in SIMP-%INVERSE_JACOBI_SN in lines 748..781 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_SN (FORM Y Z) ...)-31|
(CONST 0) = SIMP-%INVERSE_JACOBI_SN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_SN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_SN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_SN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_SN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_SN
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_SN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = ELLIPTIC-F
(CONST 7) = ZEROP1
(CONST 8) = 0
(CONST 9) = ONEP1
(CONST 10) = ($ELLIPTIC_KC)
(CONST 11) = (MTIMES)
(CONST 12) = -1
(CONST 13) = (%ELLIPTIC_KC)
(CONST 14) = (%ELLIPTIC_F)
(CONST 15) = (%ASIN)
(CONST 16) = (0)
(CONST 17) = (%ELLIPTIC_F)
(CONST 18) = (%ASIN)
(CONST 19) = (1)
(CONST 20) = (%INVERSE_JACOBI_SN)
(CONST 21) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
93 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L95)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L95)                ; NUMBERP
49    L49
49    (LOAD&PUSH 3)
50    (CALL1&JMPIF 7 L104)                ; ZEROP1
53    (LOAD&PUSH 3)
54    (CALL1&JMPIF 9 L107)                ; ONEP1
57    (LOAD&PUSH 3)
58    (CALLS2&JMPIFNOT 8 L68)             ; NUMBERP
61    (LOAD&PUSH 3)
62    (CALLSR&PUSH 0 54)                  ; -
65    (CALL1&JMPIF 9 L114)                ; ONEP1
68    L68
68    (GETVALUE&PUSH 4)                   ; M
70    (CALL1&JMPIF 7 L125)                ; ZEROP1
73    (GETVALUE&PUSH 4)                   ; M
75    (CALL1&JMPIF 9 L135)                ; ONEP1
78    (CONST&PUSH 20)                     ; (%INVERSE_JACOBI_SN)
79    (LOAD&PUSH 4)
80    (GETVALUE&PUSH 4)                   ; M
82    (LIST&PUSH 3)
84    (GETVALUE&PUSH 0)                   ; FORM
86    (CALL2 21)                          ; EQTEST
88    L88
88    (UNBIND1)
89    (SKIP 1)
91    (UNBIND 2)
93    (SKIP&RET 4)
95    L95
95    (LOAD&PUSH 3)
96    (CALLS2&PUSH 165)                   ; COMMON-LISP:ASIN
98    (GETVALUE&PUSH 4)                   ; M
100   (CALL2 6)                           ; ELLIPTIC-F
102   (JMP L88)
104   L104
104   (CONST 8)                           ; 0
105   (JMP L88)
107   L107
107   (CONST&PUSH 10)                     ; ($ELLIPTIC_KC)
108   (GETVALUE&PUSH 4)                   ; M
110   (LIST 2)
112   (JMP L88)
114   L114
114   (CONST&PUSH 11)                     ; (MTIMES)
115   (CONST&PUSH 12)                     ; -1
116   (CONST&PUSH 13)                     ; (%ELLIPTIC_KC)
117   (GETVALUE&PUSH 4)                   ; M
119   (LIST&PUSH 2)
121   (LIST 3)
123   (JMP L88)
125   L125
125   (CONST&PUSH 14)                     ; (%ELLIPTIC_F)
126   (CONST&PUSH 15)                     ; (%ASIN)
127   (LOAD&PUSH 5)
128   (LIST&PUSH 2)
130   (CONST 16)                          ; (0)
131   (LIST* 2)
133   (JMP L88)
135   L135
135   (CONST&PUSH 17)                     ; (%ELLIPTIC_F)
136   (CONST&PUSH 18)                     ; (%ASIN)
137   (LOAD&PUSH 5)
138   (LIST&PUSH 2)
140   (CONST 19)                          ; (1)
141   (LIST* 2)
143   (JMP L88)

WARNING in SIMP-%INVERSE_JACOBI_CN in lines 783..806 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_CN (FORM Y Z) ...)-32|
(CONST 0) = SIMP-%INVERSE_JACOBI_CN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_CN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_CN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_CN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_CN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_CN
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_CN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = ACOS
(CONST 7) = ELLIPTIC-F
(CONST 8) = ZEROP1
(CONST 9) = (%ELLIPTIC_F)
(CONST 10) = (%ACOS)
(CONST 11) = (0)
(CONST 12) = ONEP1
(CONST 13) = (%ELLIPTIC_F)
(CONST 14) = (%ACOS)
(CONST 15) = (1)
(CONST 16) = (%ELLIPTIC_KC)
(CONST 17) = 0
(CONST 18) = (%INVERSE_JACOBI_CN)
(CONST 19) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
79 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L84)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L84)                ; NUMBERP
49    L49
49    (GETVALUE&PUSH 4)                   ; M
51    (CALL1&JMPIF 8 L93)                 ; ZEROP1
54    (GETVALUE&PUSH 4)                   ; M
56    (CALL1&JMPIF 12 L103)               ; ONEP1
59    (LOAD&PUSH 3)
60    (CALL1&JMPIF 8 L113)                ; ZEROP1
63    (LOAD&PUSH 3)
64    (CALL1&JMPIF 12 L120)               ; ONEP1
67    (CONST&PUSH 18)                     ; (%INVERSE_JACOBI_CN)
68    (LOAD&PUSH 4)
69    (GETVALUE&PUSH 4)                   ; M
71    (LIST&PUSH 3)
73    (GETVALUE&PUSH 0)                   ; FORM
75    (CALL2 19)                          ; EQTEST
77    L77
77    (UNBIND1)
78    (SKIP 1)
80    (UNBIND 2)
82    (SKIP&RET 4)
84    L84
84    (LOAD&PUSH 3)
85    (CALL1&PUSH 6)                      ; ACOS
87    (GETVALUE&PUSH 4)                   ; M
89    (CALL2 7)                           ; ELLIPTIC-F
91    (JMP L77)
93    L93
93    (CONST&PUSH 9)                      ; (%ELLIPTIC_F)
94    (CONST&PUSH 10)                     ; (%ACOS)
95    (LOAD&PUSH 5)
96    (LIST&PUSH 2)
98    (CONST 11)                          ; (0)
99    (LIST* 2)
101   (JMP L77)
103   L103
103   (CONST&PUSH 13)                     ; (%ELLIPTIC_F)
104   (CONST&PUSH 14)                     ; (%ACOS)
105   (LOAD&PUSH 5)
106   (LIST&PUSH 2)
108   (CONST 15)                          ; (1)
109   (LIST* 2)
111   (JMP L77)
113   L113
113   (CONST&PUSH 16)                     ; (%ELLIPTIC_KC)
114   (GETVALUE&PUSH 4)                   ; M
116   (LIST 2)
118   (JMP L77)
120   L120
120   (CONST 17)                          ; 0
121   (JMP L77)

WARNING in SIMP-%INVERSE_JACOBI_DN in lines 808..832 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_DN (FORM Y Z) ...)-33|
(CONST 0) = SIMP-%INVERSE_JACOBI_DN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_DN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_DN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_DN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_DN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_DN
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_DN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1
(CONST 7) = ASIN
(CONST 8) = ELLIPTIC-F
(CONST 9) = ONEP1
(CONST 10) = (%ASECH)
(CONST 11) = (%INVERSE_JACOBI_DN)
(CONST 12) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
65 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L71)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L71)                ; NUMBERP
49    L49
49    (GETVALUE&PUSH 4)                   ; M
51    (CALL1&JMPIF 9 L103)                ; ONEP1
54    (CONST&PUSH 11)                     ; (%INVERSE_JACOBI_DN)
55    (LOAD&PUSH 4)
56    (GETVALUE&PUSH 4)                   ; M
58    (LIST&PUSH 3)
60    (GETVALUE&PUSH 0)                   ; FORM
62    (CALL2 12)                          ; EQTEST
64    L64
64    (UNBIND1)
65    (SKIP 1)
67    (UNBIND 2)
69    (SKIP&RET 4)
71    L71
71    (CONST&PUSH 6)                      ; 1
72    (LOAD&PUSH 4)
73    (CALLSR&PUSH 1 54)                  ; -
76    (CALLS2&PUSH 156)                   ; SQRT
78    (LOAD&INC&PUSH 4)
80    (CALLS2&PUSH 156)                   ; SQRT
82    (CALLSR&PUSH 2 55)                  ; *
85    (GETVALUE&PUSH 4)                   ; M
87    (CALLS2&PUSH 156)                   ; SQRT
89    (CALLSR&PUSH 1 56)                  ; /
92    (LOAD&PUSH 0)
93    (CALL1&PUSH 7)                      ; ASIN
95    (GETVALUE&PUSH 4)                   ; M
97    (CALL2 8)                           ; ELLIPTIC-F
99    (SKIP 1)
101   (JMP L64)
103   L103
103   (CONST&PUSH 10)                     ; (%ASECH)
104   (LOAD&PUSH 4)
105   (LIST 2)
107   (JMP L64)


Disassembly of function #:|(LET (# # # ...) (DECLARE #) ...)-34|
(CONST 0) = 4.440892098500627E-16
(CONST 1) = 1/6
(CONST 2) = 1/24
(CONST 3) = 1.0
(CONST 4) = 3/44
(CONST 5) = 1/14
(CONST 6) = DRF
(CONST 7) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 8) = FUNCTION
(CONST 9) = 
"Compute Carlson's incomplete or complete elliptic integral of the
first kind:

                   INF
                  /
                  [                     1
  RF(x, y, z) =   I    ----------------------------------- dt
                  ]    SQRT(x + t) SQRT(y + t) SQRT(z + t)
                  /
                   0


where x >= 0, y >= 0, z >=0, and at most one of x, y, z is zero.
"
(CONST 10) = SYSTEM::%SET-DOCUMENTATION
(CONST 11) = #<COMPILED-CLOSURE DRF>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
30 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 4)
3     (CONST&PUSH 0)                      ; 4.440892098500627E-16
4     (CONST&PUSH 1)                      ; 1/6
5     (CALLS2 154)                        ; EXPT
7     (STOREC 0 0)
10    (CONST&PUSH 2)                      ; 1/24
11    (CONST&PUSH 3)                      ; 1.0
12    (CALLS2 174)                        ; COMMON-LISP:FLOAT
14    (STOREC 0 1)
17    (CONST&PUSH 4)                      ; 3/44
18    (CONST&PUSH 3)                      ; 1.0
19    (CALLS2 174)                        ; COMMON-LISP:FLOAT
21    (STOREC 0 2)
24    (CONST&PUSH 5)                      ; 1/14
25    (CONST&PUSH 3)                      ; 1.0
26    (CALLS2 174)                        ; COMMON-LISP:FLOAT
28    (STOREC 0 3)
31    (CONST&PUSH 6)                      ; DRF
32    (CALL1 7)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
34    (CONST&PUSH 6)                      ; DRF
35    (CONST&PUSH 8)                      ; FUNCTION
36    (CONST&PUSH 9)                      ; "Compute Carlson's incomplete or complete elliptic integral of the
first kind:

                   INF
                  /
                  [                     1
  RF(x, y, z) =   I    ----------------------------------- dt
                  ]    SQRT(x + t) SQRT(y + t) SQRT(z + t)
                  /
                   0


where x >= 0, y >= 0, z >=0, and at most one of x, y, z is zero.
"
37    (CALL 3 10)                         ; SYSTEM::%SET-DOCUMENTATION
40    (CONST&PUSH 6)                      ; DRF
41    (LOAD&PUSH 1)
42    (COPY-CLOSURE&PUSH 11 1)            ; #<COMPILED-CLOSURE DRF>
45    (CALLS2 130)                        ; SYSTEM::%PUTD
47    (CONST 6)                           ; DRF
48    (SKIP&RET 2)


Disassembly of function DRF
(CONST 0) = NIL
(CONST 1) = X
(CONST 2) = Y
(CONST 3) = 0
(CONST 4) = #(NIL)
(CONST 5) = :NAME
(CONST 6) = COMMON-LISP:CONTINUE
(CONST 7) = :INVOKE-FUNCTION
(CONST 8) = #<COMPILED-CLOSURE DRF-1>
(CONST 9) = :REPORT
(CONST 10) = SYSTEM::REPORT-NO-NEW-VALUE
(CONST 11) = :INTERACTIVE
(CONST 12) = SYSTEM::ASSERT-RESTART-NO-PROMPTS
(CONST 13) = SYSTEM::MAKE-RESTART
(CONST 14) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 15) = SYSTEM::*CONDITION-RESTARTS*
(CONST 16) = (#(CONDITION 187) 1 . 1)
(CONST 17) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 18) = SIGNAL
(CONST 19) = "~A"
(CONST 20) = 
(AND (>= X 0) (>= Y 0) (>= Z 0) (PLUSP (+ X Y)) (PLUSP (+ X Z))
 (PLUSP (+ Y Z)))
(CONST 21) = SYSTEM::ASSERT-ERROR-STRING
(CONST 22) = 3.5953862697246315E307
(CONST 23) = #(NIL)
(CONST 24) = #<COMPILED-CLOSURE DRF-2>
(CONST 25) = (#(CONDITION 187) 1 . 1)
(CONST 26) = (<= (MAX X Y Z) UPLIM)
(CONST 27) = 1.1125369292536007E-307
(CONST 28) = #(NIL)
(CONST 29) = #<COMPILED-CLOSURE DRF-3>
(CONST 30) = (#(CONDITION 187) 1 . 1)
(CONST 31) = (>= (MIN (+ X Y) (+ X Z) (+ Y Z)) LOLIM)
(CONST 32) = 1/3
(CONST 33) = 2
(CONST 34) = 1
(CONST 35) = 1/10
(CONST 36) = 1/4
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS* Y X)
writes special variables : (Y X)
259 byte-code instructions:
0     (LOAD 3)
1     (BIND 1)                            ; X
3     (LOAD 5)
4     (BIND 2)                            ; Y
6     L6
6     (GETVALUE&PUSH 1)                   ; X
8     (CONST&PUSH 3)                      ; 0
9     (CALLSR&JMPIFNOT 1 50 L55)          ; >=
13    (GETVALUE&PUSH 2)                   ; Y
15    (CONST&PUSH 3)                      ; 0
16    (CALLSR&JMPIFNOT 1 50 L55)          ; >=
20    (LOAD&PUSH 7)
21    (CONST&PUSH 3)                      ; 0
22    (CALLSR&JMPIFNOT 1 50 L55)          ; >=
26    (GETVALUE&PUSH 1)                   ; X
28    (GETVALUE&PUSH 2)                   ; Y
30    (CALLSR&PUSH 2 53)                  ; +
33    (CALLS2&JMPIFNOT 146 L55)           ; PLUSP
36    (GETVALUE&PUSH 1)                   ; X
38    (LOAD&PUSH 8)
39    (CALLSR&PUSH 2 53)                  ; +
42    (CALLS2&JMPIFNOT 146 L55)           ; PLUSP
45    (GETVALUE&PUSH 2)                   ; Y
47    (LOAD&PUSH 8)
48    (CALLSR&PUSH 2 53)                  ; +
51    (CALLS2&JMPIF 146 L124)             ; PLUSP
55    L55
55    (VENV)
56    (MAKE-VECTOR1&PUSH 1)
58    (NIL)
59    (STOREC 0 0)
62    (TAGBODY-OPEN 4 L103)               ; #(NIL)
65    (CONST&PUSH 5)                      ; :NAME
66    (CONST&PUSH 6)                      ; COMMON-LISP:CONTINUE
67    (CONST&PUSH 7)                      ; :INVOKE-FUNCTION
68    (LOAD&PUSH 7)
69    (LOAD&PUSH 6)
70    (COPY-CLOSURE&PUSH 8 2)             ; #<COMPILED-CLOSURE DRF-1>
73    (CONST&PUSH 9)                      ; :REPORT
74    (CONST&SYMBOL-FUNCTION&PUSH 10)     ; SYSTEM::REPORT-NO-NEW-VALUE
76    (CONST&PUSH 11)                     ; :INTERACTIVE
77    (CONST&SYMBOL-FUNCTION&PUSH 12)     ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
79    (CALL&PUSH 8 13)                    ; SYSTEM::MAKE-RESTART
82    (LIST&PUSH 1)
84    (LOAD&PUSH 0)
85    (GETVALUE&PUSH 14)                  ; SYSTEM::*ACTIVE-RESTARTS*
87    (CALLSR 2 34)                       ; APPEND
90    (BIND 14)                           ; SYSTEM::*ACTIVE-RESTARTS*
92    (GETVALUE 15)                       ; SYSTEM::*CONDITION-RESTARTS*
94    (BIND 15)                           ; SYSTEM::*CONDITION-RESTARTS*
96    (HANDLER-OPEN 16 L187)              ; (#(CONDITION 187) 1 . 1)
98    (CONST&PUSH 19)                     ; "~A"
99    (CONST 20)                          ; (AND (>= X 0) (>= Y 0) ...)
100   (JMP L286)
103   L103
103   (LOADC 4 0)
106   (UNLIST 0 0)
109   (TAGBODY-CLOSE)
110   (SKIP 1)
112   (JMP L6)
115   L115
115   (LOADC 4 0)
118   (UNLIST 0 0)
121   (TAGBODY-CLOSE)
122   (SKIP 1)
124   L124
124   (GETVALUE&PUSH 1)                   ; X
126   (GETVALUE&PUSH 2)                   ; Y
128   (LOAD&PUSH 9)
129   (CALLSR&PUSH 2 51)                  ; MAX
132   (CONST&PUSH 22)                     ; 3.5953862697246315E307
133   (CALLSR&JMPIF 1 49 L212)            ; <=
138   (VENV)
139   (MAKE-VECTOR1&PUSH 1)
141   (NIL)
142   (STOREC 0 0)
145   (TAGBODY-OPEN 23 L115)              ; #(NIL)
148   (CONST&PUSH 5)                      ; :NAME
149   (CONST&PUSH 6)                      ; COMMON-LISP:CONTINUE
150   (CONST&PUSH 7)                      ; :INVOKE-FUNCTION
151   (LOAD&PUSH 7)
152   (LOAD&PUSH 6)
153   (COPY-CLOSURE&PUSH 24 2)            ; #<COMPILED-CLOSURE DRF-2>
156   (CONST&PUSH 9)                      ; :REPORT
157   (CONST&SYMBOL-FUNCTION&PUSH 10)     ; SYSTEM::REPORT-NO-NEW-VALUE
159   (CONST&PUSH 11)                     ; :INTERACTIVE
160   (CONST&SYMBOL-FUNCTION&PUSH 12)     ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
162   (CALL&PUSH 8 13)                    ; SYSTEM::MAKE-RESTART
165   (LIST&PUSH 1)
167   (LOAD&PUSH 0)
168   (GETVALUE&PUSH 14)                  ; SYSTEM::*ACTIVE-RESTARTS*
170   (CALLSR 2 34)                       ; APPEND
173   (BIND 14)                           ; SYSTEM::*ACTIVE-RESTARTS*
175   (GETVALUE 15)                       ; SYSTEM::*CONDITION-RESTARTS*
177   (BIND 15)                           ; SYSTEM::*CONDITION-RESTARTS*
179   (HANDLER-OPEN 25 L187)              ; (#(CONDITION 187) 1 . 1)
181   (CONST&PUSH 19)                     ; "~A"
182   (CONST 26)                          ; (<= (MAX X Y Z) UPLIM)
184   (JMP L286)
187   L187
187   (HANDLER-BEGIN&PUSH)
188   (LOAD&PUSH 0)
189   (LOADI&PUSH 0 0 6)
193   (CALL2 17)                          ; SYSTEM::ADD-CONDITION-RESTARTS
195   (LOAD&PUSH 0)
196   (CALL1 18)                          ; SIGNAL
198   (SKIPSP 2 1)
201   (SKIP&RET 2)
203   L203
203   (LOADC 4 0)
206   (UNLIST 0 0)
209   (TAGBODY-CLOSE)
210   (SKIP 1)
212   L212
212   (GETVALUE&PUSH 1)                   ; X
214   (GETVALUE&PUSH 2)                   ; Y
216   (CALLSR&PUSH 2 53)                  ; +
219   (GETVALUE&PUSH 1)                   ; X
221   (LOAD&PUSH 9)
222   (CALLSR&PUSH 2 53)                  ; +
225   (GETVALUE&PUSH 2)                   ; Y
227   (LOAD&PUSH 10)
228   (CALLSR&PUSH 2 53)                  ; +
231   (CALLSR&PUSH 2 52)                  ; MIN
234   (CONST&PUSH 27)                     ; 1.1125369292536007E-307
235   (CALLSR&JMPIF 1 50 L359)            ; >=
240   (VENV)
241   (MAKE-VECTOR1&PUSH 1)
243   (NIL)
244   (STOREC 0 0)
247   (TAGBODY-OPEN 28 L203)              ; #(NIL)
250   (CONST&PUSH 5)                      ; :NAME
251   (CONST&PUSH 6)                      ; COMMON-LISP:CONTINUE
252   (CONST&PUSH 7)                      ; :INVOKE-FUNCTION
253   (LOAD&PUSH 7)
254   (LOAD&PUSH 6)
255   (COPY-CLOSURE&PUSH 29 2)            ; #<COMPILED-CLOSURE DRF-3>
258   (CONST&PUSH 9)                      ; :REPORT
259   (CONST&SYMBOL-FUNCTION&PUSH 10)     ; SYSTEM::REPORT-NO-NEW-VALUE
261   (CONST&PUSH 11)                     ; :INTERACTIVE
262   (CONST&SYMBOL-FUNCTION&PUSH 12)     ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
264   (CALL&PUSH 8 13)                    ; SYSTEM::MAKE-RESTART
267   (LIST&PUSH 1)
269   (LOAD&PUSH 0)
270   (GETVALUE&PUSH 14)                  ; SYSTEM::*ACTIVE-RESTARTS*
272   (CALLSR 2 34)                       ; APPEND
275   (BIND 14)                           ; SYSTEM::*ACTIVE-RESTARTS*
277   (GETVALUE 15)                       ; SYSTEM::*CONDITION-RESTARTS*
279   (BIND 15)                           ; SYSTEM::*CONDITION-RESTARTS*
281   (HANDLER-OPEN 30 L187)              ; (#(CONDITION 187) 1 . 1)
283   (CONST&PUSH 19)                     ; "~A"
284   (CONST 31)                          ; (>= (MIN # # #) LOLIM)
286   L286
286   (PUSH)
287   (CALL1&PUSH 21)                     ; SYSTEM::ASSERT-ERROR-STRING
289   (CALLSR 1 29)                       ; ERROR
292   L292
292   (GETVALUE&PUSH 1)                   ; X
294   (CALLS2&PUSH 156)                   ; SQRT
296   (GETVALUE&PUSH 2)                   ; Y
298   (CALLS2&PUSH 156)                   ; SQRT
300   (LOAD&PUSH 13)
301   (CALLS2&PUSH 156)                   ; SQRT
303   (LOAD&PUSH 2)
304   (LOAD&PUSH 2)
305   (LOAD&PUSH 2)
306   (CALLSR&PUSH 2 53)                  ; +
309   (CALLSR&PUSH 2 55)                  ; *
312   (LOAD&PUSH 2)
313   (LOAD&PUSH 2)
314   (CALLSR&PUSH 2 55)                  ; *
317   (CALLSR&PUSH 2 53)                  ; +
320   (CONST&PUSH 36)                     ; 1/4
322   (GETVALUE&PUSH 1)                   ; X
324   (LOAD&PUSH 2)
325   (CALLSR&PUSH 2 53)                  ; +
328   (CALLSR 2 55)                       ; *
331   (SETVALUE 1)                        ; X
333   (CONST&PUSH 36)                     ; 1/4
335   (GETVALUE&PUSH 2)                   ; Y
337   (LOAD&PUSH 2)
338   (CALLSR&PUSH 2 53)                  ; +
341   (CALLSR 2 55)                       ; *
344   (SETVALUE 2)                        ; Y
346   (CONST&PUSH 36)                     ; 1/4
348   (LOAD&PUSH 16)
349   (LOAD&PUSH 2)
350   (CALLSR&PUSH 2 53)                  ; +
353   (CALLSR&STORE 2 55 15)              ; *
357   (SKIP 8)
359   L359
359   (CONST&PUSH 32)                     ; 1/3
361   (GETVALUE&PUSH 1)                   ; X
363   (GETVALUE&PUSH 2)                   ; Y
365   (LOAD&PUSH 10)
366   (CALLSR&PUSH 3 53)                  ; +
369   (CALLSR&PUSH 2 55)                  ; *
372   (CONST&PUSH 33)                     ; 2
374   (LOAD&PUSH 1)
375   (GETVALUE&PUSH 1)                   ; X
377   (CALLSR&PUSH 2 53)                  ; +
380   (LOAD&PUSH 2)
381   (CALLSR&PUSH 1 56)                  ; /
384   (CALLSR&PUSH 1 54)                  ; -
387   (CONST&PUSH 33)                     ; 2
389   (LOAD&PUSH 2)
390   (GETVALUE&PUSH 2)                   ; Y
392   (CALLSR&PUSH 2 53)                  ; +
395   (LOAD&PUSH 3)
396   (CALLSR&PUSH 1 56)                  ; /
399   (CALLSR&PUSH 1 54)                  ; -
402   (CONST&PUSH 33)                     ; 2
404   (LOAD&PUSH 3)
405   (LOAD&PUSH 12)
406   (CALLSR&PUSH 2 53)                  ; +
409   (LOAD&PUSH 4)
410   (CALLSR&PUSH 1 56)                  ; /
413   (CALLSR&PUSH 1 54)                  ; -
416   (LOAD&PUSH 2)
417   (CALLS2&PUSH 158)                   ; ABS
419   (LOAD&PUSH 2)
420   (CALLS2&PUSH 158)                   ; ABS
422   (LOAD&PUSH 2)
423   (CALLS2&PUSH 158)                   ; ABS
425   (CALLSR&PUSH 2 51)                  ; MAX
428   (LOADV&PUSH 0 1)
431   (CALLSR&JMPIFNOT 1 47 L292)         ; <
436   (LOAD&PUSH 2)
437   (LOAD&PUSH 2)
438   (CALLSR&PUSH 2 55)                  ; *
441   (LOAD&PUSH 1)
442   (LOAD&PUSH 2)
443   (CALLSR&PUSH 2 55)                  ; *
446   (CALLSR&PUSH 1 54)                  ; -
449   (LOAD&PUSH 3)
450   (LOAD&PUSH 3)
451   (LOAD&PUSH 3)
452   (CALLSR&PUSH 3 55)                  ; *
455   (CONST&PUSH 34)                     ; 1
457   (LOAD&PUSH 2)
458   (LOADV&PUSH 0 2)
461   (LOAD&PUSH 4)
462   (CALLSR&PUSH 2 55)                  ; *
465   (CONST&PUSH 35)                     ; 1/10
467   (LOADV&PUSH 0 3)
470   (LOAD&PUSH 5)
471   (CALLSR&PUSH 2 55)                  ; *
474   (CALLSR&PUSH 2 54)                  ; -
477   (CALLSR&PUSH 2 55)                  ; *
480   (LOADV&PUSH 0 4)
483   (LOAD&PUSH 3)
484   (CALLSR&PUSH 2 55)                  ; *
487   (CALLSR&PUSH 3 53)                  ; +
490   (LOAD&PUSH 6)
491   (CALLS2&PUSH 156)                   ; SQRT
493   (CALLSR 1 56)                       ; /
496   (SKIP 6)
498   (UNBIND 2)
500   (SKIP&RET 4)


Disassembly of function DRF-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function DRF-2
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function DRF-3
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFUN ELLIPTIC-F (PHI-ARG M-ARG) ...)-35|
(CONST 0) = ELLIPTIC-F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELLIPTIC-F>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELLIPTIC-F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELLIPTIC-F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELLIPTIC-F>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELLIPTIC-F
8     (SKIP&RET 1)


Disassembly of function ELLIPTIC-F
(CONST 0) = 1.0
(CONST 1) = M
(CONST 2) = 1
(CONST 3) = ASIN
(CONST 4) = 0
(CONST 5) = 1/2
(CONST 6) = PI
(CONST 7) = 2
(CONST 8) = ELLIPTIC-K
(CONST 9) = K
(CONST 10) = DRF
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K PI M)
168 byte-code instructions:
0     L0
0     (LOAD&PUSH 2)
1     (CONST&PUSH 0)                      ; 1.0
2     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
4     (LOAD&PUSH 2)
5     (CONST&PUSH 0)                      ; 1.0
6     (CALLS2 174)                        ; COMMON-LISP:FLOAT
8     (BIND 1)                            ; M
10    (GETVALUE&PUSH 1)                   ; M
12    (CONST&PUSH 2)                      ; 1
13    (CALLSR&JMPIF 1 48 L78)             ; >
17    (GETVALUE&PUSH 1)                   ; M
19    (CONST&PUSH 4)                      ; 0
20    (CALLSR&JMPIF 1 47 L103)            ; <
25    (GETVALUE&PUSH 1)                   ; M
27    (CONST&PUSH 4)                      ; 0
28    (CALLSR&JMPIF 1 45 L170)            ; =
33    (GETVALUE&PUSH 1)                   ; M
35    (CONST&PUSH 2)                      ; 1
36    (CALLSR&JMPIF 1 45 L174)            ; =
41    (LOAD&PUSH 3)
42    (CALLS2&JMPIF 147 L200)             ; MINUSP
46    (LOAD&PUSH 3)
47    (GETVALUE&PUSH 6)                   ; PI
49    (CALLSR&JMPIF 1 48 L215)            ; >
54    (LOAD&PUSH 3)
55    (CONST&PUSH 5)                      ; 1/2
56    (GETVALUE&PUSH 6)                   ; PI
58    (CALLSR&PUSH 2 55)                  ; *
61    (CALLSR&JMPIF 1 49 L248)            ; <=
66    (LOAD&PUSH 3)
67    (GETVALUE&PUSH 6)                   ; PI
69    (CALLSR&JMPIF 1 47 L300)            ; <
74    (NIL)
75    L75
75    (UNBIND1)
76    (SKIP&RET 4)
78    L78
78    (GETVALUE&PUSH 1)                   ; M
80    (CALLS2&PUSH 156)                   ; SQRT
82    (LOAD&PUSH 4)
83    (CALLS2&PUSH 161)                   ; SIN
85    (CALLSR&PUSH 2 55)                  ; *
88    (CALL1&PUSH 3)                      ; ASIN
90    (GETVALUE&PUSH 1)                   ; M
92    (CALLSR&PUSH 0 56)                  ; /
95    (JSR&PUSH L0)
98    (CALLSR 0 56)                       ; /
101   (JMP L75)
103   L103
103   (GETVALUE&PUSH 1)                   ; M
105   (CALLSR 0 54)                       ; -
108   (BIND 1)                            ; M
110   (GETVALUE&PUSH 1)                   ; M
112   (CALLS2&PUSH 150)                   ; 1+
114   (LOAD&PUSH 0)
115   (CALLS2&PUSH 156)                   ; SQRT
117   (GETVALUE&PUSH 1)                   ; M
119   (LOAD&PUSH 2)
120   (CALLSR&PUSH 1 56)                  ; /
123   (CONST&PUSH 5)                      ; 1/2
124   (GETVALUE&PUSH 6)                   ; PI
126   (CALLSR&PUSH 2 55)                  ; *
129   (CONST&PUSH 0)                      ; 1.0
130   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
132   (LOAD&PUSH 1)
133   (JSR&PUSH L0)
136   (LOAD&PUSH 2)
137   (CALLSR&PUSH 1 56)                  ; /
140   (CONST&PUSH 5)                      ; 1/2
141   (GETVALUE&PUSH 6)                   ; PI
143   (CALLSR&PUSH 2 55)                  ; *
146   (CONST&PUSH 0)                      ; 1.0
147   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
149   (LOAD&PUSH 11)
150   (CALLSR&PUSH 1 54)                  ; -
153   (LOAD&PUSH 2)
154   (JSR&PUSH L0)
157   (LOAD&PUSH 3)
158   (CALLSR&PUSH 1 56)                  ; /
161   (CALLSR 1 54)                       ; -
164   (SKIP 3)
166   (UNBIND1)
167   (JMP L75)
170   L170
170   (LOAD 3)
171   (JMP L75)
174   L174
174   (CONST&PUSH 5)                      ; 1/2
175   (LOAD&PUSH 4)
176   (CALLSR&PUSH 2 55)                  ; *
179   (CONST&PUSH 5)                      ; 1/2
180   (GETVALUE&PUSH 6)                   ; PI
182   (CALLSR&PUSH 2 55)                  ; *
185   (CONST&PUSH 0)                      ; 1.0
186   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
188   (CALLSR&PUSH 2 53)                  ; +
191   (CALLS2&PUSH 163)                   ; COMMON-LISP:TAN
193   (PUSH-UNBOUND 1)
195   (CALLS2 155)                        ; LOG
197   (JMP L75)
200   L200
200   (LOAD&PUSH 3)
201   (CALLSR&PUSH 0 54)                  ; -
204   (GETVALUE&PUSH 1)                   ; M
206   (JSR&PUSH L0)
209   (CALLSR 0 54)                       ; -
212   (JMP L75)
215   L215
215   (LOAD&PUSH 3)
216   (GETVALUE&PUSH 6)                   ; PI
218   (CONST&PUSH 0)                      ; 1.0
219   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
221   (CALLS2 181)                        ; TRUNCATE
223   (NV-TO-STACK 2)
225   (CONST&PUSH 7)                      ; 2
226   (LOAD&PUSH 2)
227   (GETVALUE&PUSH 1)                   ; M
229   (CALL1&PUSH 8)                      ; ELLIPTIC-K
231   (CALLSR&PUSH 3 55)                  ; *
234   (LOAD&PUSH 1)
235   (GETVALUE&PUSH 1)                   ; M
237   (JSR&PUSH L0)
240   (CALLSR 2 53)                       ; +
243   (SKIP 2)
245   (JMP L75)
248   L248
248   (LOAD&PUSH 3)
249   (CALLS2&PUSH 161)                   ; SIN
251   (LOAD&PUSH 4)
252   (CALLS2&PUSH 162)                   ; COS
254   (GETVALUE&PUSH 1)                   ; M
256   (CALLS2 156)                        ; SQRT
258   (BIND 9)                            ; K
260   (LOAD&PUSH 4)
261   (LOAD&PUSH 4)
262   (LOAD&PUSH 5)
263   (CALLSR&PUSH 2 55)                  ; *
266   (CONST&PUSH 2)                      ; 1
267   (GETVALUE&PUSH 9)                   ; K
269   (LOAD&PUSH 8)
270   (CALLSR&PUSH 2 55)                  ; *
273   (CALLSR&PUSH 1 54)                  ; -
276   (GETVALUE&PUSH 9)                   ; K
278   (LOAD&PUSH 8)
279   (CALLSR&PUSH 2 55)                  ; *
282   (CALLS2&PUSH 150)                   ; 1+
284   (CALLSR&PUSH 2 55)                  ; *
287   (CONST&PUSH 0)                      ; 1.0
288   (CALL&PUSH 3 10)                    ; DRF
291   (CALLSR 2 55)                       ; *
294   (UNBIND1)
295   (SKIP 2)
297   (JMP L75)
300   L300
300   (CONST&PUSH 7)                      ; 2
301   (GETVALUE&PUSH 1)                   ; M
303   (CALL1&PUSH 8)                      ; ELLIPTIC-K
305   (CALLSR&PUSH 2 55)                  ; *
308   (LOAD&PUSH 4)
309   (GETVALUE&PUSH 6)                   ; PI
311   (CONST&PUSH 0)                      ; 1.0
312   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
314   (CALLSR&PUSH 1 54)                  ; -
317   (GETVALUE&PUSH 1)                   ; M
319   (JSR&PUSH L0)
322   (CALLSR 2 53)                       ; +
325   (JMP L75)


Disassembly of function #:|(DEFUN ELLIPTIC-K (M) ...)-36|
(CONST 0) = ELLIPTIC-K
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELLIPTIC-K>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELLIPTIC-K
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELLIPTIC-K
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELLIPTIC-K>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELLIPTIC-K
8     (SKIP&RET 1)


Disassembly of function ELLIPTIC-K
(CONST 0) = M
(CONST 1) = 1
(CONST 2) = ASIN
(CONST 3) = ELLIPTIC-F
(CONST 4) = 0
(CONST 5) = 0.0
(CONST 6) = 1/2
(CONST 7) = PI
(CONST 8) = 1.0
(CONST 9) = K
(CONST 10) = DRF
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PI K M)
68 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (GETVALUE&PUSH 0)                   ; M
5     (CONST&PUSH 1)                      ; 1
6     (CALLSR&JMPIF 1 48 L53)             ; >
10    (GETVALUE&PUSH 0)                   ; M
12    (CONST&PUSH 4)                      ; 0
13    (CALLSR&JMPIF 1 47 L71)             ; <
17    (GETVALUE&PUSH 0)                   ; M
19    (CONST&PUSH 4)                      ; 0
20    (CALLSR&JMPIF 1 45 L116)            ; =
25    (GETVALUE&PUSH 0)                   ; M
27    (CALLS2 156)                        ; SQRT
29    (BIND 9)                            ; K
31    (CONST&PUSH 5)                      ; 0.0
32    (CONST&PUSH 1)                      ; 1
33    (GETVALUE&PUSH 9)                   ; K
35    (CALLSR&PUSH 1 54)                  ; -
38    (GETVALUE&PUSH 9)                   ; K
40    (CALLS2&PUSH 150)                   ; 1+
42    (CALLSR&PUSH 2 55)                  ; *
45    (CONST&PUSH 8)                      ; 1.0
46    (CALL 3 10)                         ; DRF
49    (UNBIND1)
50    L50
50    (UNBIND1)
51    (SKIP&RET 2)
53    L53
53    (GETVALUE&PUSH 0)                   ; M
55    (CALLS2&PUSH 156)                   ; SQRT
57    (CALL1&PUSH 2)                      ; ASIN
59    (GETVALUE&PUSH 0)                   ; M
61    (CALLSR&PUSH 0 56)                  ; /
64    (CALL2&PUSH 3)                      ; ELLIPTIC-F
66    (CALLSR 0 56)                       ; /
69    (JMP L50)
71    L71
71    (GETVALUE&PUSH 0)                   ; M
73    (CALLSR 0 54)                       ; -
76    (BIND 0)                            ; M
78    (GETVALUE&PUSH 0)                   ; M
80    (CALLS2&PUSH 150)                   ; 1+
82    (LOAD&PUSH 0)
83    (CALLS2&PUSH 156)                   ; SQRT
85    (GETVALUE&PUSH 0)                   ; M
87    (LOAD&PUSH 2)
88    (CALLSR&PUSH 1 56)                  ; /
91    (LOAD&PUSH 0)
92    (JSR&PUSH L0)
95    (LOAD&PUSH 2)
96    (CALLSR&PUSH 1 56)                  ; /
99    (CONST&PUSH 5)                      ; 0.0
100   (LOAD&PUSH 2)
101   (CALL2&PUSH 3)                      ; ELLIPTIC-F
103   (LOAD&PUSH 3)
104   (CALLSR&PUSH 1 56)                  ; /
107   (CALLSR 1 54)                       ; -
110   (SKIP 3)
112   (UNBIND1)
113   (JMP L50)
116   L116
116   (CONST&PUSH 6)                      ; 1/2
117   (GETVALUE&PUSH 7)                   ; PI
119   (CALLSR&PUSH 2 55)                  ; *
122   (CONST&PUSH 8)                      ; 1.0
123   (CALLS2 174)                        ; COMMON-LISP:FLOAT
125   (JMP L50)


Disassembly of function #:|(LET (# # # ...) (DECLARE #) ...)-37|
(CONST 0) = 3.700743415417189E-17
(CONST 1) = 1/6
(CONST 2) = 3/14
(CONST 3) = 1.0
(CONST 4) = 9/22
(CONST 5) = 3/26
(CONST 6) = DRD
(CONST 7) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 8) = #<COMPILED-CLOSURE DRD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
30 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 5)
3     (CONST&PUSH 0)                      ; 3.700743415417189E-17
4     (CONST&PUSH 1)                      ; 1/6
5     (CALLS2 154)                        ; EXPT
7     (STOREC 0 0)
10    (CONST&PUSH 2)                      ; 3/14
11    (CONST&PUSH 3)                      ; 1.0
12    (CALLS2 174)                        ; COMMON-LISP:FLOAT
14    (STOREC 0 1)
17    (CONST&PUSH 1)                      ; 1/6
18    (CONST&PUSH 3)                      ; 1.0
19    (CALLS2 174)                        ; COMMON-LISP:FLOAT
21    (STOREC 0 2)
24    (CONST&PUSH 4)                      ; 9/22
25    (CONST&PUSH 3)                      ; 1.0
26    (CALLS2 174)                        ; COMMON-LISP:FLOAT
28    (STOREC 0 3)
31    (CONST&PUSH 5)                      ; 3/26
32    (CONST&PUSH 3)                      ; 1.0
33    (CALLS2 174)                        ; COMMON-LISP:FLOAT
35    (STOREC 0 4)
38    (CONST&PUSH 6)                      ; DRD
39    (CALL1 7)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
41    (CONST&PUSH 6)                      ; DRD
42    (LOAD&PUSH 1)
43    (COPY-CLOSURE&PUSH 8 1)             ; #<COMPILED-CLOSURE DRD>
46    (CALLS2 130)                        ; SYSTEM::%PUTD
48    (CONST 6)                           ; DRD
49    (SKIP&RET 2)


Disassembly of function DRD
(CONST 0) = NIL
(CONST 1) = X
(CONST 2) = Y
(CONST 3) = 0
(CONST 4) = #(NIL)
(CONST 5) = :NAME
(CONST 6) = COMMON-LISP:CONTINUE
(CONST 7) = :INVOKE-FUNCTION
(CONST 8) = #<COMPILED-CLOSURE DRD-1>
(CONST 9) = :REPORT
(CONST 10) = SYSTEM::REPORT-NEW-VALUES
(CONST 11) = :INTERACTIVE
(CONST 12) = SYSTEM::ASSERT-RESTART-PROMPT
(CONST 13) = SYSTEM::MAKE-RESTART
(CONST 14) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 15) = SYSTEM::*CONDITION-RESTARTS*
(CONST 16) = (#(CONDITION 9) 1 . 1)
(CONST 17) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 18) = SIGNAL
(CONST 19) = "~A"
(CONST 20) = (AND (>= X 0) (>= Y 0) (>= Z 0) (PLUSP (+ X Y)))
(CONST 21) = SYSTEM::ASSERT-ERROR-STRING
(CONST 22) = 1.0
(CONST 23) = 0.0
(CONST 24) = 1/5
(CONST 25) = 3
(CONST 26) = 6
(CONST 27) = 1/4
(CONST 28) = -3/2
(CONST 29) = 1
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS*)
writes special variables : (Y X)
232 byte-code instructions:
0     (LOAD 3)
1     (BIND 1)                            ; X
3     (LOAD 5)
4     (BIND 2)                            ; Y
6     (JMP L95)
9     L9
9     (HANDLER-BEGIN&PUSH)
10    (LOAD&PUSH 0)
11    (LOADI&PUSH 0 0 6)
15    (CALL2 17)                          ; SYSTEM::ADD-CONDITION-RESTARTS
17    (LOAD&PUSH 0)
18    (CALL1 18)                          ; SIGNAL
20    (SKIPSP 2 1)
23    (SKIP&RET 2)
25    L25
25    (VENV)
26    (MAKE-VECTOR1&PUSH 1)
28    (NIL)
29    (STOREC 0 0)
32    (TAGBODY-OPEN 4 L75)                ; #(NIL)
35    (CONST&PUSH 5)                      ; :NAME
36    (CONST&PUSH 6)                      ; COMMON-LISP:CONTINUE
37    (CONST&PUSH 7)                      ; :INVOKE-FUNCTION
38    (LOAD&PUSH 7)
39    (LOAD&PUSH 6)
40    (COPY-CLOSURE&PUSH 8 2)             ; #<COMPILED-CLOSURE DRD-1>
43    (CONST&PUSH 9)                      ; :REPORT
44    (CONST&SYMBOL-FUNCTION&PUSH 10)     ; SYSTEM::REPORT-NEW-VALUES
46    (CONST&PUSH 11)                     ; :INTERACTIVE
47    (CONST&SYMBOL-FUNCTION&PUSH 12)     ; SYSTEM::ASSERT-RESTART-PROMPT
49    (CALL&PUSH 8 13)                    ; SYSTEM::MAKE-RESTART
52    (LIST&PUSH 1)
54    (LOAD&PUSH 0)
55    (GETVALUE&PUSH 14)                  ; SYSTEM::*ACTIVE-RESTARTS*
57    (CALLSR 2 34)                       ; APPEND
60    (BIND 14)                           ; SYSTEM::*ACTIVE-RESTARTS*
62    (GETVALUE 15)                       ; SYSTEM::*CONDITION-RESTARTS*
64    (BIND 15)                           ; SYSTEM::*CONDITION-RESTARTS*
66    (HANDLER-OPEN 16 L9)                ; (#(CONDITION 9) 1 . 1)
68    (CONST&PUSH 19)                     ; "~A"
69    (CONST&PUSH 20)                     ; (AND (>= X 0) (>= Y 0) ...)
70    (CALL1&PUSH 21)                     ; SYSTEM::ASSERT-ERROR-STRING
72    (CALLSR 1 29)                       ; ERROR
75    L75
75    (LOADC 4 0)
78    (UNLIST 3 0)
81    (LOAD 2)
82    (SETVALUE 1)                        ; X
84    (LOAD 1)
85    (SETVALUE 2)                        ; Y
87    (LOAD 0)
88    (STORE 15)
90    (SKIP 3)
92    (TAGBODY-CLOSE)
93    (SKIP 1)
95    L95
95    (GETVALUE&PUSH 1)                   ; X
97    (CONST&PUSH 3)                      ; 0
98    (CALLSR&JMPIFNOT 1 50 L25)          ; >=
103   (GETVALUE&PUSH 2)                   ; Y
105   (CONST&PUSH 3)                      ; 0
106   (CALLSR&JMPIFNOT 1 50 L25)          ; >=
111   (LOAD&PUSH 7)
112   (CONST&PUSH 3)                      ; 0
113   (CALLSR&JMPIFNOT 1 50 L25)          ; >=
118   (GETVALUE&PUSH 1)                   ; X
120   (GETVALUE&PUSH 2)                   ; Y
122   (CALLSR&PUSH 2 53)                  ; +
125   (CALLS2&JMPIFNOT 146 L25)           ; PLUSP
129   (GETVALUE&PUSH 1)                   ; X
131   (CONST&PUSH 22)                     ; 1.0
132   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
134   (GETVALUE&PUSH 2)                   ; Y
136   (CONST&PUSH 22)                     ; 1.0
137   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
139   (LOAD&PUSH 9)
140   (CONST&PUSH 22)                     ; 1.0
141   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
143   (CONST&PUSH 23)                     ; 0.0
144   (CONST&PUSH 22)                     ; 1.0
145   (LOAD 4)
146   (BIND 1)                            ; X
148   (LOAD 6)
149   (BIND 2)                            ; Y
151   (JMP L239)
154   L154
154   (GETVALUE&PUSH 1)                   ; X
156   (CALLS2&PUSH 156)                   ; SQRT
158   (GETVALUE&PUSH 2)                   ; Y
160   (CALLS2&PUSH 156)                   ; SQRT
162   (LOAD&PUSH 14)
163   (CALLS2&PUSH 156)                   ; SQRT
165   (LOAD&PUSH 2)
166   (LOAD&PUSH 2)
167   (LOAD&PUSH 2)
168   (CALLSR&PUSH 2 53)                  ; +
171   (CALLSR&PUSH 2 55)                  ; *
174   (LOAD&PUSH 2)
175   (LOAD&PUSH 2)
176   (CALLSR&PUSH 2 55)                  ; *
179   (CALLSR&PUSH 2 53)                  ; +
182   (LOAD&PUSH 15)
183   (LOAD&PUSH 15)
184   (LOAD&PUSH 3)
185   (LOAD&PUSH 19)
186   (LOAD&PUSH 4)
187   (CALLSR&PUSH 2 53)                  ; +
190   (CALLSR&PUSH 2 56)                  ; /
193   (CALLSR&STORE 2 53 15)              ; +
197   (CONST&PUSH 27)                     ; 1/4
198   (LOAD&PUSH 15)
199   (CALLSR&STORE 2 55 14)              ; *
203   (CONST&PUSH 27)                     ; 1/4
204   (GETVALUE&PUSH 1)                   ; X
206   (LOAD&PUSH 2)
207   (CALLSR&PUSH 2 53)                  ; +
210   (CALLSR 2 55)                       ; *
213   (SETVALUE 1)                        ; X
215   (CONST&PUSH 27)                     ; 1/4
216   (GETVALUE&PUSH 2)                   ; Y
218   (LOAD&PUSH 2)
219   (CALLSR&PUSH 2 53)                  ; +
222   (CALLSR 2 55)                       ; *
225   (SETVALUE 2)                        ; Y
227   (CONST&PUSH 27)                     ; 1/4
228   (LOAD&PUSH 17)
229   (LOAD&PUSH 2)
230   (CALLSR&PUSH 2 53)                  ; +
233   (CALLSR&STORE 2 55 16)              ; *
237   (SKIP 8)
239   L239
239   (CONST&PUSH 24)                     ; 1/5
240   (GETVALUE&PUSH 1)                   ; X
242   (GETVALUE&PUSH 2)                   ; Y
244   (CONST&PUSH 25)                     ; 3
245   (LOAD&PUSH 12)
246   (CALLSR&PUSH 2 55)                  ; *
249   (CALLSR&PUSH 3 53)                  ; +
252   (CALLSR&PUSH 2 55)                  ; *
255   (LOAD&PUSH 0)
256   (GETVALUE&PUSH 1)                   ; X
258   (CALLSR&PUSH 1 54)                  ; -
261   (LOAD&PUSH 1)
262   (CALLSR&PUSH 1 56)                  ; /
265   (LOAD&PUSH 1)
266   (GETVALUE&PUSH 2)                   ; Y
268   (CALLSR&PUSH 1 54)                  ; -
271   (LOAD&PUSH 2)
272   (CALLSR&PUSH 1 56)                  ; /
275   (LOAD&PUSH 2)
276   (LOAD&PUSH 12)
277   (CALLSR&PUSH 1 54)                  ; -
280   (LOAD&PUSH 3)
281   (CALLSR&PUSH 1 56)                  ; /
284   (LOAD&PUSH 2)
285   (CALLS2&PUSH 158)                   ; ABS
287   (LOAD&PUSH 2)
288   (CALLS2&PUSH 158)                   ; ABS
290   (LOAD&PUSH 2)
291   (CALLS2&PUSH 158)                   ; ABS
293   (CALLSR&PUSH 2 51)                  ; MAX
296   (LOADV&PUSH 0 1)
299   (CALLSR&JMPIFNOT 1 47 L154)         ; <
304   (LOAD&PUSH 2)
305   (LOAD&PUSH 2)
306   (CALLSR&PUSH 2 55)                  ; *
309   (LOAD&PUSH 1)
310   (LOAD&PUSH 2)
311   (CALLSR&PUSH 2 55)                  ; *
314   (LOAD&PUSH 1)
315   (LOAD&PUSH 1)
316   (CALLSR&PUSH 1 54)                  ; -
319   (LOAD&PUSH 2)
320   (CONST&PUSH 26)                     ; 6
321   (LOAD&PUSH 3)
322   (CALLSR&PUSH 2 55)                  ; *
325   (CALLSR&PUSH 1 54)                  ; -
328   (LOAD&PUSH 0)
329   (LOAD&PUSH 2)
330   (LOAD&PUSH 3)
331   (CALLSR&PUSH 3 53)                  ; +
334   (LOAD&PUSH 1)
335   (LOADV&PUSH 0 2)
338   (CALLSR&PUSH 0 54)                  ; -
341   (CONST&PUSH 27)                     ; 1/4
342   (LOADV&PUSH 0 4)
345   (LOAD&PUSH 5)
346   (CALLSR&PUSH 3 55)                  ; *
349   (CONST&PUSH 28)                     ; -3/2
350   (LOADV&PUSH 0 5)
353   (LOAD&PUSH 10)
354   (LOAD&PUSH 6)
355   (CALLSR&PUSH 4 55)                  ; *
358   (CALLSR&PUSH 3 53)                  ; +
361   (CALLSR&PUSH 2 55)                  ; *
364   (LOAD&PUSH 6)
365   (LOADV&PUSH 0 3)
368   (LOAD&PUSH 3)
369   (CALLSR&PUSH 2 55)                  ; *
372   (LOAD&PUSH 8)
373   (LOADV&PUSH 0 4)
376   (CALLSR&PUSH 0 54)                  ; -
379   (LOAD&PUSH 7)
380   (CALLSR&PUSH 2 55)                  ; *
383   (LOAD&PUSH 10)
384   (LOADV&PUSH 0 5)
387   (LOAD&PUSH 11)
388   (CALLSR&PUSH 3 55)                  ; *
391   (CALLSR&PUSH 2 53)                  ; +
394   (CALLSR&PUSH 2 55)                  ; *
397   (CALLSR&PUSH 2 53)                  ; +
400   (CALLSR&PUSH 2 55)                  ; *
403   (CONST&PUSH 25)                     ; 3
404   (LOAD&PUSH 19)
405   (CALLSR&PUSH 2 55)                  ; *
408   (LOAD&PUSH 18)
409   (CONST&PUSH 29)                     ; 1
410   (LOAD&PUSH 4)
411   (LOAD&PUSH 4)
412   (CALLSR&PUSH 3 53)                  ; +
415   (CALLSR&PUSH 2 55)                  ; *
418   (LOAD&PUSH 12)
419   (LOAD&PUSH 13)
420   (CALLS2&PUSH 156)                   ; SQRT
422   (CALLSR&PUSH 2 55)                  ; *
425   (CALLSR&PUSH 1 56)                  ; /
428   (CALLSR 2 53)                       ; +
431   (SKIP 11)
433   (UNBIND 2)
435   (SKIP 5)
437   (UNBIND 2)
439   (SKIP&RET 4)


Disassembly of function DRD-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFUN ELLIPTIC-E (PHI M) ...)-38|
(CONST 0) = ELLIPTIC-E
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELLIPTIC-E>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELLIPTIC-E
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELLIPTIC-E
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELLIPTIC-E>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELLIPTIC-E
8     (SKIP&RET 1)


Disassembly of function ELLIPTIC-E
(CONST 0) = M
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = K
(CONST 4) = Y
(CONST 5) = 1.0
(CONST 6) = DRF
(CONST 7) = 1/3
(CONST 8) = 3
(CONST 9) = DRD
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y K M)
60 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (GETVALUE&PUSH 0)                   ; M
5     (CONST&PUSH 1)                      ; 0
6     (CALLSR&JMPIF 1 45 L103)            ; =
11    (GETVALUE&PUSH 0)                   ; M
13    (CONST&PUSH 2)                      ; 1
14    (CALLSR&JMPIF 1 45 L106)            ; =
19    (LOAD&PUSH 5)
20    (CALLS2&PUSH 161)                   ; SIN
22    (LOAD&PUSH 6)
23    (CALLS2&PUSH 162)                   ; COS
25    (GETVALUE&PUSH 0)                   ; M
27    (CALLS2 156)                        ; SQRT
29    (BIND 3)                            ; K
31    (CONST&PUSH 2)                      ; 1
32    (GETVALUE&PUSH 3)                   ; K
34    (LOAD&PUSH 6)
35    (CALLSR&PUSH 2 55)                  ; *
38    (CALLSR&PUSH 1 54)                  ; -
41    (GETVALUE&PUSH 3)                   ; K
43    (LOAD&PUSH 6)
44    (CALLSR&PUSH 2 55)                  ; *
47    (CALLS2&PUSH 150)                   ; 1+
49    (CALLSR 2 55)                       ; *
52    (BIND 4)                            ; Y
54    (LOAD&PUSH 7)
55    (LOAD&PUSH 7)
56    (LOAD&PUSH 8)
57    (CALLSR&PUSH 2 55)                  ; *
60    (GETVALUE&PUSH 4)                   ; Y
62    (CONST&PUSH 5)                      ; 1.0
63    (CALL&PUSH 3 6)                     ; DRF
66    (CALLSR&PUSH 2 55)                  ; *
69    (CONST&PUSH 7)                      ; 1/3
70    (GETVALUE&PUSH 0)                   ; M
72    (CALLSR&PUSH 2 55)                  ; *
75    (LOAD&PUSH 9)
76    (CONST&PUSH 8)                      ; 3
77    (CALLS2&PUSH 154)                   ; EXPT
79    (LOAD&PUSH 9)
80    (LOAD&PUSH 10)
81    (CALLSR&PUSH 2 55)                  ; *
84    (GETVALUE&PUSH 4)                   ; Y
86    (CONST&PUSH 5)                      ; 1.0
87    (CALL&PUSH 3 9)                     ; DRD
90    (CALLSR&PUSH 3 55)                  ; *
93    (CALLSR 1 54)                       ; -
96    (UNBIND 2)
98    (SKIP 2)
100   L100
100   (UNBIND1)
101   (SKIP&RET 3)
103   L103
103   (LOAD 5)
104   (JMP L100)
106   L106
106   (LOAD&PUSH 5)
107   (CALLS2 161)                        ; SIN
109   (JMP L100)


Disassembly of function #:|(DEFUN ELLIPTIC-EC (M) ...)-39|
(CONST 0) = ELLIPTIC-EC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELLIPTIC-EC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELLIPTIC-EC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELLIPTIC-EC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELLIPTIC-EC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELLIPTIC-EC
8     (SKIP&RET 1)


Disassembly of function ELLIPTIC-EC
(CONST 0) = M
(CONST 1) = 0
(CONST 2) = 1/2
(CONST 3) = PI
(CONST 4) = 1.0
(CONST 5) = 1
(CONST 6) = K
(CONST 7) = Y
(CONST 8) = 0.0
(CONST 9) = DRF
(CONST 10) = 1/3
(CONST 11) = DRD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (PI Y K M)
45 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (GETVALUE&PUSH 0)                   ; M
5     (CONST&PUSH 1)                      ; 0
6     (CALLSR&JMPIF 1 45 L69)             ; =
10    (GETVALUE&PUSH 0)                   ; M
12    (CONST&PUSH 5)                      ; 1
13    (CALLSR&JMPIF 1 45 L80)             ; =
17    (GETVALUE&PUSH 0)                   ; M
19    (CALLS2 156)                        ; SQRT
21    (BIND 6)                            ; K
23    (CONST&PUSH 5)                      ; 1
24    (GETVALUE&PUSH 6)                   ; K
26    (CALLSR&PUSH 1 54)                  ; -
29    (GETVALUE&PUSH 6)                   ; K
31    (CALLS2&PUSH 150)                   ; 1+
33    (CALLSR 2 55)                       ; *
36    (BIND 7)                            ; Y
38    (CONST&PUSH 8)                      ; 0.0
39    (GETVALUE&PUSH 7)                   ; Y
41    (CONST&PUSH 4)                      ; 1.0
42    (CALL&PUSH 3 9)                     ; DRF
45    (CONST&PUSH 10)                     ; 1/3
46    (GETVALUE&PUSH 0)                   ; M
48    (CALLSR&PUSH 2 55)                  ; *
51    (CONST&PUSH 8)                      ; 0.0
52    (GETVALUE&PUSH 7)                   ; Y
54    (CONST&PUSH 4)                      ; 1.0
55    (CALL&PUSH 3 11)                    ; DRD
58    (CALLSR&PUSH 2 55)                  ; *
61    (CALLSR 1 54)                       ; -
64    (UNBIND 2)
66    L66
66    (UNBIND1)
67    (SKIP&RET 2)
69    L69
69    (CONST&PUSH 2)                      ; 1/2
70    (GETVALUE&PUSH 3)                   ; PI
72    (CALLSR&PUSH 2 55)                  ; *
75    (CONST&PUSH 4)                      ; 1.0
76    (CALLS2 174)                        ; COMMON-LISP:FLOAT
78    (JMP L66)
80    L80
80    (CONST 4)                           ; 1.0
81    (JMP L66)


Disassembly of function #:|(DEFPROP $ELLIPTIC_F SIMP-$ELLIPTIC_F ...)-40|
(CONST 0) = $ELLIPTIC_F
(CONST 1) = OPERATORS
(CONST 2) = SIMP-$ELLIPTIC_F
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_F
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-$ELLIPTIC_F
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ELLIPTIC_E SIMP-$ELLIPTIC_E ...)-41|
(CONST 0) = $ELLIPTIC_E
(CONST 1) = OPERATORS
(CONST 2) = SIMP-$ELLIPTIC_E
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_E
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-$ELLIPTIC_E
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ELLIPTIC_F (# # #) ...)-42|
(CONST 0) = $ELLIPTIC_F
(CONST 1) = GRAD
(CONST 2) = 
((PHI M)
 ((MEXPT SIMP)
  ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M ((MEXPT SIMP) ((%SIN SIMP) PHI) 2)))
  ((RAT SIMP) -1 2))
 ((MTIMES SIMP) ((RAT SIMP) 1 2)
  ((MEXPT SIMP) ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M)) -1)
  ((MPLUS SIMP)
   ((MTIMES SIMP) ((MEXPT SIMP) M -1)
    ((MPLUS SIMP) (($ELLIPTIC_E SIMP) PHI M)
     ((MTIMES SIMP) -1 ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M))
      (($ELLIPTIC_F SIMP) PHI M))))
   ((MTIMES SIMP) -1 ((%COS SIMP) PHI) ((%SIN SIMP) PHI)
    ((MEXPT SIMP)
     ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M ((MEXPT SIMP) ((%SIN SIMP) PHI) 2)))
     ((RAT SIMP) -1 2))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_F
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((PHI M) (# # #) (# # # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ELLIPTIC_E (# # #) ...)-43|
(CONST 0) = $ELLIPTIC_E
(CONST 1) = GRAD
(CONST 2) = 
((PHI M)
 ((MPLUS SIMP) 1 ((MTIMES SIMP) -1 M ((MEXPT SIMP) ((%SIN SIMP) PHI) 2)))
 ((MTIMES SIMP) ((RAT SIMP) 1 2) ((MEXPT SIMP) M -1)
  ((MPLUS SIMP) (($ELLIPTIC_E SIMP) PHI M)
   ((MTIMES SIMP) -1 (($ELLIPTIC_F SIMP) PHI M)))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_E
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((PHI M) (# 1 #) (# # # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $ELLIPTIC_F (PHI M) ...)-44|
(CONST 0) = $ELLIPTIC_F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ELLIPTIC_F>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ELLIPTIC_F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ELLIPTIC_F>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ELLIPTIC_F
8     (SKIP&RET 1)


Disassembly of function $ELLIPTIC_F
(CONST 0) = M
(CONST 1) = ($ELLIPTIC_F)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; ($ELLIPTIC_F)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN $ELLIPTIC_E (PHI M) ...)-45|
(CONST 0) = $ELLIPTIC_E
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ELLIPTIC_E>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_E
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ELLIPTIC_E
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ELLIPTIC_E>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ELLIPTIC_E
8     (SKIP&RET 1)


Disassembly of function $ELLIPTIC_E
(CONST 0) = M
(CONST 1) = ($ELLIPTIC_E)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; ($ELLIPTIC_E)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)

WARNING in SIMP-$ELLIPTIC_F in lines 1437..1461 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-$ELLIPTIC_F (FORM Y Z) ...)-46|
(CONST 0) = SIMP-$ELLIPTIC_F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-$ELLIPTIC_F>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-$ELLIPTIC_F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-$ELLIPTIC_F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-$ELLIPTIC_F>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-$ELLIPTIC_F
8     (SKIP&RET 1)


Disassembly of function SIMP-$ELLIPTIC_F
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = ELLIPTIC-F
(CONST 8) = ZEROP1
(CONST 9) = 0
(CONST 10) = ONEP1
(CONST 11) = (%LOG)
(CONST 12) = (%TAN)
(CONST 13) = (MPLUS)
(CONST 14) = ((MTIMES) $%PI ((RAT) 1 4))
(CONST 15) = (MTIMES)
(CONST 16) = ((RAT) 1 2)
(CONST 17) = ((MTIMES) ((RAT) 1 2) $%PI)
(CONST 18) = ALIKE1
(CONST 19) = (%ELLIPTIC_KC)
(CONST 20) = ($ELLIPTIC_F)
(CONST 21) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
84 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L76)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L76)                ; NUMBERP
49    L49
49    (LOAD&PUSH 3)
50    (CALL1&JMPIF 8 L89)                 ; ZEROP1
53    (GETVALUE&PUSH 4)                   ; M
55    (CALL1&JMPIF 8 L92)                 ; ZEROP1
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 10 L95)                ; ONEP1
63    (LOAD&PUSH 3)
64    (CONST&PUSH 17)                     ; ((MTIMES) ((RAT) 1 2) $%PI)
65    (CALL2&JMPIFNOT 18 L110)            ; ALIKE1
68    (CONST&PUSH 19)                     ; (%ELLIPTIC_KC)
69    (GETVALUE 4)                        ; M
71    L71
71    (PUSH)
72    (LIST 2)
74    (JMP L120)
76    L76
76    (LOAD&PUSH 3)
77    (CONST&PUSH 6)                      ; 1.0
78    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
80    (GETVALUE&PUSH 4)                   ; M
82    (CONST&PUSH 6)                      ; 1.0
83    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
85    (CALL2 7)                           ; ELLIPTIC-F
87    (JMP L120)
89    L89
89    (CONST 9)                           ; 0
90    (JMP L120)
92    L92
92    (LOAD 3)
93    (JMP L120)
95    L95
95    (CONST&PUSH 11)                     ; (%LOG)
96    (CONST&PUSH 12)                     ; (%TAN)
97    (CONST&PUSH 13)                     ; (MPLUS)
98    (CONST&PUSH 14)                     ; ((MTIMES) $%PI ((RAT) 1 4))
99    (CONST&PUSH 15)                     ; (MTIMES)
100   (CONST&PUSH 16)                     ; ((RAT) 1 2)
101   (LOAD&PUSH 9)
102   (LIST&PUSH 3)
104   (LIST&PUSH 3)
106   (LIST 2)
108   (JMP L71)
110   L110
110   (CONST&PUSH 20)                     ; ($ELLIPTIC_F)
111   (LOAD&PUSH 4)
112   (GETVALUE&PUSH 4)                   ; M
114   (LIST&PUSH 3)
116   (GETVALUE&PUSH 0)                   ; FORM
118   (CALL2 21)                          ; EQTEST
120   L120
120   (UNBIND1)
121   (SKIP 1)
123   (UNBIND 2)
125   (SKIP&RET 4)

WARNING in SIMP-$ELLIPTIC_E in lines 1463..1485 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-$ELLIPTIC_E (FORM Y Z) ...)-47|
(CONST 0) = SIMP-$ELLIPTIC_E
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-$ELLIPTIC_E>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-$ELLIPTIC_E
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-$ELLIPTIC_E
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-$ELLIPTIC_E>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-$ELLIPTIC_E
8     (SKIP&RET 1)


Disassembly of function SIMP-$ELLIPTIC_E
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = ELLIPTIC-E
(CONST 8) = ZEROP1
(CONST 9) = 0
(CONST 10) = ONEP1
(CONST 11) = (%SIN)
(CONST 12) = ((MTIMES) ((RAT) 1 2) $%PI)
(CONST 13) = ALIKE1
(CONST 14) = (%ELLIPTIC_EC)
(CONST 15) = ($ELLIPTIC_E)
(CONST 16) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
76 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L76)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L76)                ; NUMBERP
49    L49
49    (LOAD&PUSH 3)
50    (CALL1&JMPIF 8 L89)                 ; ZEROP1
53    (GETVALUE&PUSH 4)                   ; M
55    (CALL1&JMPIF 8 L92)                 ; ZEROP1
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 10 L95)                ; ONEP1
63    (LOAD&PUSH 3)
64    (CONST&PUSH 12)                     ; ((MTIMES) ((RAT) 1 2) $%PI)
65    (CALL2&JMPIFNOT 13 L99)             ; ALIKE1
68    (CONST&PUSH 14)                     ; (%ELLIPTIC_EC)
69    (GETVALUE 4)                        ; M
71    L71
71    (PUSH)
72    (LIST 2)
74    (JMP L109)
76    L76
76    (LOAD&PUSH 3)
77    (CONST&PUSH 6)                      ; 1.0
78    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
80    (GETVALUE&PUSH 4)                   ; M
82    (CONST&PUSH 6)                      ; 1.0
83    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
85    (CALL2 7)                           ; ELLIPTIC-E
87    (JMP L109)
89    L89
89    (CONST 9)                           ; 0
90    (JMP L109)
92    L92
92    (LOAD 3)
93    (JMP L109)
95    L95
95    (CONST&PUSH 11)                     ; (%SIN)
96    (LOAD 4)
97    (JMP L71)
99    L99
99    (CONST&PUSH 15)                     ; ($ELLIPTIC_E)
100   (LOAD&PUSH 4)
101   (GETVALUE&PUSH 4)                   ; M
103   (LIST&PUSH 3)
105   (GETVALUE&PUSH 0)                   ; FORM
107   (CALL2 16)                          ; EQTEST
109   L109
109   (UNBIND1)
110   (SKIP 1)
112   (UNBIND 2)
114   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $ELLIPTIC_KC (M) ...)-48|
(CONST 0) = $ELLIPTIC_KC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ELLIPTIC_KC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_KC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ELLIPTIC_KC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ELLIPTIC_KC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ELLIPTIC_KC
8     (SKIP&RET 1)


Disassembly of function $ELLIPTIC_KC
(CONST 0) = M
(CONST 1) = (%ELLIPTIC_KC)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%ELLIPTIC_KC)
4     (GETVALUE&PUSH 0)                   ; M
6     (CALL1&PUSH 2)                      ; RESIMPLIFY
8     (LIST&PUSH 2)
10    (CALL1 3)                           ; SIMPLIFY
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $ELLIPTIC_EC (M) ...)-49|
(CONST 0) = $ELLIPTIC_EC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ELLIPTIC_EC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_EC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ELLIPTIC_EC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ELLIPTIC_EC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ELLIPTIC_EC
8     (SKIP&RET 1)


Disassembly of function $ELLIPTIC_EC
(CONST 0) = M
(CONST 1) = (%ELLIPTIC_EC)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%ELLIPTIC_EC)
4     (GETVALUE&PUSH 0)                   ; M
6     (CALL1&PUSH 2)                      ; RESIMPLIFY
8     (LIST&PUSH 2)
10    (CALL1 3)                           ; SIMPLIFY
12    (UNBIND1)
13    (SKIP&RET 2)


Disassembly of function #:|(DEFPROP %ELLIPTIC_KC SIMP-%ELLIPTIC_KC ...)-50|
(CONST 0) = %ELLIPTIC_KC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ELLIPTIC_KC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ELLIPTIC_KC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ELLIPTIC_KC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ELLIPTIC_EC SIMP-%ELLIPTIC_EC ...)-51|
(CONST 0) = %ELLIPTIC_EC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ELLIPTIC_EC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ELLIPTIC_EC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ELLIPTIC_EC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%ELLIPTIC_KC in lines 1503..1515 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%ELLIPTIC_KC (FORM Y Z) ...)-52|
(CONST 0) = SIMP-%ELLIPTIC_KC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ELLIPTIC_KC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ELLIPTIC_KC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ELLIPTIC_KC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ELLIPTIC_KC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ELLIPTIC_KC
8     (SKIP&RET 1)


Disassembly of function SIMP-%ELLIPTIC_KC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = ELLIPTIC-K
(CONST 8) = ZEROP1
(CONST 9) = ((MTIMES) ((RAT) 1 2) $%PI)
(CONST 10) = (%ELLIPTIC_KC)
(CONST 11) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
41 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (BIND 4)                            ; M
19    (GETVALUE&PUSH 4)                   ; M
21    (CALLS2&JMPIF 15 L52)               ; FLOATP
24    (GETVALUE 5)                        ; $NUMER
26    (JMPIFNOT L33)
28    (GETVALUE&PUSH 4)                   ; M
30    (CALLS2&JMPIF 8 L52)                ; NUMBERP
33    L33
33    (GETVALUE&PUSH 4)                   ; M
35    (CALL1&JMPIF 8 L62)                 ; ZEROP1
38    (CONST&PUSH 10)                     ; (%ELLIPTIC_KC)
39    (GETVALUE&PUSH 4)                   ; M
41    (LIST&PUSH 2)
43    (GETVALUE&PUSH 0)                   ; FORM
45    (CALL2 11)                          ; EQTEST
47    (UNBIND1)
48    L48
48    (UNBIND 2)
50    (SKIP&RET 4)
52    L52
52    (GETVALUE&PUSH 4)                   ; M
54    (CONST&PUSH 6)                      ; 1.0
55    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
57    (CALL1 7)                           ; ELLIPTIC-K
59    (UNBIND1)
60    (JMP L48)
62    L62
62    (CONST 9)                           ; ((MTIMES) ((RAT) 1 2) $%PI)
63    (UNBIND1)
64    (JMP L48)


Disassembly of function #:|(DEFPROP %ELLIPTIC_KC (# #) ...)-53|
(CONST 0) = %ELLIPTIC_KC
(CONST 1) = GRAD
(CONST 2) = 
((M)
 ((MTIMES)
  ((MPLUS) ((%ELLIPTIC_EC) M)
   ((MTIMES) -1 ((%ELLIPTIC_KC) M) ((MPLUS) 1 ((MTIMES) -1 M))))
  ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1) ((MEXPT) M -1)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ELLIPTIC_KC
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((M) (# # # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%ELLIPTIC_EC in lines 1529..1542 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%ELLIPTIC_EC (FORM Y Z) ...)-54|
(CONST 0) = SIMP-%ELLIPTIC_EC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ELLIPTIC_EC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ELLIPTIC_EC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ELLIPTIC_EC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ELLIPTIC_EC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ELLIPTIC_EC
8     (SKIP&RET 1)


Disassembly of function SIMP-%ELLIPTIC_EC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = ELLIPTIC-EC
(CONST 8) = ZEROP1
(CONST 9) = ((MTIMES) ((RAT) 1 2) $%PI)
(CONST 10) = (%ELLIPTIC_EC)
(CONST 11) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
41 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (BIND 4)                            ; M
19    (GETVALUE&PUSH 4)                   ; M
21    (CALLS2&JMPIF 15 L52)               ; FLOATP
24    (GETVALUE 5)                        ; $NUMER
26    (JMPIFNOT L33)
28    (GETVALUE&PUSH 4)                   ; M
30    (CALLS2&JMPIF 8 L52)                ; NUMBERP
33    L33
33    (GETVALUE&PUSH 4)                   ; M
35    (CALL1&JMPIF 8 L62)                 ; ZEROP1
38    (CONST&PUSH 10)                     ; (%ELLIPTIC_EC)
39    (GETVALUE&PUSH 4)                   ; M
41    (LIST&PUSH 2)
43    (GETVALUE&PUSH 0)                   ; FORM
45    (CALL2 11)                          ; EQTEST
47    (UNBIND1)
48    L48
48    (UNBIND 2)
50    (SKIP&RET 4)
52    L52
52    (GETVALUE&PUSH 4)                   ; M
54    (CONST&PUSH 6)                      ; 1.0
55    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
57    (CALL1 7)                           ; ELLIPTIC-EC
59    (UNBIND1)
60    (JMP L48)
62    L62
62    (CONST 9)                           ; ((MTIMES) ((RAT) 1 2) $%PI)
63    (UNBIND1)
64    (JMP L48)


Disassembly of function #:|(DEFPROP %ELLIPTIC_EC (# #) ...)-55|
(CONST 0) = %ELLIPTIC_EC
(CONST 1) = GRAD
(CONST 2) = 
((M)
 ((MTIMES) ((RAT) 1 2)
  ((MPLUS) ((%ELLIPTIC_EC) M) ((MTIMES) -1 ((%ELLIPTIC_KC) M)))
  ((MEXPT) M -1)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ELLIPTIC_EC
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((M) (# # # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ELLIPTIC_PI SIMP-$ELLIPTIC_PI ...)-56|
(CONST 0) = $ELLIPTIC_PI
(CONST 1) = OPERATORS
(CONST 2) = SIMP-$ELLIPTIC_PI
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_PI
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-$ELLIPTIC_PI
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $ELLIPTIC_PI (N PHI M) ...)-57|
(CONST 0) = $ELLIPTIC_PI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ELLIPTIC_PI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_PI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ELLIPTIC_PI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ELLIPTIC_PI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ELLIPTIC_PI
8     (SKIP&RET 1)


Disassembly of function $ELLIPTIC_PI
(CONST 0) = N
(CONST 1) = M
(CONST 2) = ($ELLIPTIC_PI)
(CONST 3) = RESIMPLIFY
(CONST 4) = SIMPLIFY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M N)
15 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (CONST&PUSH 2)                      ; ($ELLIPTIC_PI)
7     (GETVALUE&PUSH 0)                   ; N
9     (CALL1&PUSH 3)                      ; RESIMPLIFY
11    (LOAD&PUSH 10)
12    (CALL1&PUSH 3)                      ; RESIMPLIFY
14    (GETVALUE&PUSH 1)                   ; M
16    (CALL1&PUSH 3)                      ; RESIMPLIFY
18    (LIST&PUSH 4)
20    (CALL1 4)                           ; SIMPLIFY
22    (UNBIND 2)
24    (SKIP&RET 4)

WARNING in SIMP-$ELLIPTIC_PI in lines 1575..1609 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-$ELLIPTIC_PI (FORM Y Z) ...)-58|
(CONST 0) = SIMP-$ELLIPTIC_PI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-$ELLIPTIC_PI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-$ELLIPTIC_PI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-$ELLIPTIC_PI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-$ELLIPTIC_PI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-$ELLIPTIC_PI
8     (SKIP&RET 1)


Disassembly of function SIMP-$ELLIPTIC_PI
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = SIMPCHECK
(CONST 3) = M
(CONST 4) = N
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = ELLIPTIC-PI
(CONST 8) = ZEROP1
(CONST 9) = ($ELLIPTIC_F)
(CONST 10) = (MPLUS)
(CONST 11) = -1
(CONST 12) = ASKSIGN
(CONST 13) = #S(HASH-TABLE EQ ($ZERO . 85) ($NEGATIVE . 30) ($POSITIVE . 2))
(CONST 14) = (MTIMES)
(CONST 15) = (MEXPT)
(CONST 16) = (MPLUS)
(CONST 17) = (((RAT) -1 2))
(CONST 18) = (%ATANH)
(CONST 19) = (MTIMES)
(CONST 20) = (MEXPT)
(CONST 21) = (MPLUS)
(CONST 22) = (((RAT) 1 2))
(CONST 23) = (%TAN)
(CONST 24) = (MTIMES)
(CONST 25) = (MEXPT)
(CONST 26) = (MPLUS)
(CONST 27) = 1
(CONST 28) = (MTIMES)
(CONST 29) = (((RAT) -1 2))
(CONST 30) = (%ATAN)
(CONST 31) = (MTIMES)
(CONST 32) = (MEXPT)
(CONST 33) = (MPLUS)
(CONST 34) = (MTIMES)
(CONST 35) = (((RAT) 1 2))
(CONST 36) = (%TAN)
(CONST 37) = (%TAN)
(CONST 38) = ($ELLIPTIC_PI)
(CONST 39) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M N FORM)
147 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE 0)                        ; FORM
8     (CDR)
9     (CAR&PUSH)
10    (LOAD&PUSH 8)
11    (CALL2&PUSH 2)                      ; SIMPCHECK
13    (GETVALUE 0)                        ; FORM
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD&PUSH 9)
19    (CALL2&PUSH 2)                      ; SIMPCHECK
21    (GETVALUE 0)                        ; FORM
23    (CDR)
24    (CDR)
25    (CDR)
26    (CAR&PUSH)
27    (LOAD&PUSH 10)
28    (CALL2 2)                           ; SIMPCHECK
30    (BIND 3)                            ; M
32    (LOAD 4)
33    (BIND 4)                            ; N
35    (GETVALUE&PUSH 4)                   ; N
37    (CALLS2&JMPIFNOT 15 L49)            ; FLOATP
40    (LOAD&PUSH 6)
41    (CALLS2&JMPIFNOT 15 L49)            ; FLOATP
44    (GETVALUE&PUSH 3)                   ; M
46    (CALLS2&JMPIF 15 L98)               ; FLOATP
49    L49
49    (GETVALUE 5)                        ; $NUMER
51    (JMPIFNOT L67)
53    (GETVALUE&PUSH 4)                   ; N
55    (CALLS2&JMPIFNOT 8 L67)             ; NUMBERP
58    (LOAD&PUSH 6)
59    (CALLS2&JMPIFNOT 8 L67)             ; NUMBERP
62    (GETVALUE&PUSH 3)                   ; M
64    (CALLS2&JMPIF 8 L98)                ; NUMBERP
67    L67
67    (GETVALUE&PUSH 4)                   ; N
69    (CALL1&JMPIF 8 L117)                ; ZEROP1
72    (GETVALUE&PUSH 3)                   ; M
74    (CALL1&JMPIF 8 L125)                ; ZEROP1
77    (CONST&PUSH 38)                     ; ($ELLIPTIC_PI)
79    (GETVALUE&PUSH 4)                   ; N
81    (LOAD&PUSH 8)
82    (GETVALUE&PUSH 3)                   ; M
84    (LIST&PUSH 4)
86    (GETVALUE&PUSH 0)                   ; FORM
88    (CALL2 39)                          ; EQTEST
90    L90
90    (UNBIND 2)
92    (SKIP 2)
94    (UNBIND 2)
96    (SKIP&RET 4)
98    L98
98    (GETVALUE&PUSH 4)                   ; N
100   (CONST&PUSH 6)                      ; 1.0
101   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
103   (LOAD&PUSH 7)
104   (CONST&PUSH 6)                      ; 1.0
105   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
107   (GETVALUE&PUSH 3)                   ; M
109   (CONST&PUSH 6)                      ; 1.0
110   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
112   (CALL 3 7)                          ; ELLIPTIC-PI
115   (JMP L90)
117   L117
117   (CONST&PUSH 9)                      ; ($ELLIPTIC_F)
118   (LOAD&PUSH 7)
119   (GETVALUE&PUSH 3)                   ; M
121   (LIST 3)
123   (JMP L90)
125   L125
125   (CONST&PUSH 10)                     ; (MPLUS)
126   (CONST&PUSH 11)                     ; -1
127   (GETVALUE&PUSH 4)                   ; N
129   (LIST&PUSH 3)
131   (CALL1&PUSH 12)                     ; ASKSIGN
133   (LOAD 0)
134   (JMPHASH 13 L231 L138 L166 L221)
138   L138
138   (CONST&PUSH 14)                     ; (MTIMES)
139   (CONST&PUSH 15)                     ; (MEXPT)
140   (CONST&PUSH 16)                     ; (MPLUS)
141   (CONST&PUSH 11)                     ; -1
142   (GETVALUE&PUSH 4)                   ; N
144   (LIST&PUSH 3)
146   (CONST 17)                          ; (((RAT) -1 2))
147   (LIST*&PUSH 2)
149   (CONST&PUSH 18)                     ; (%ATANH)
150   (CONST&PUSH 19)                     ; (MTIMES)
151   (CONST&PUSH 20)                     ; (MEXPT)
152   (CONST&PUSH 21)                     ; (MPLUS)
153   (CONST&PUSH 11)                     ; -1
154   (GETVALUE&PUSH 4)                   ; N
156   (LIST&PUSH 3)
158   (CONST 22)                          ; (((RAT) 1 2))
160   (LIST*&PUSH 2)
162   (CONST 23)                          ; (%TAN)
164   (JMP L206)
166   L166
166   (CONST&PUSH 24)                     ; (MTIMES)
167   (CONST&PUSH 25)                     ; (MEXPT)
168   (CONST&PUSH 26)                     ; (MPLUS)
169   (CONST&PUSH 27)                     ; 1
170   (CONST&PUSH 28)                     ; (MTIMES)
171   (CONST&PUSH 11)                     ; -1
172   (GETVALUE&PUSH 4)                   ; N
174   (LIST&PUSH 3)
176   (LIST&PUSH 3)
178   (CONST 29)                          ; (((RAT) -1 2))
180   (LIST*&PUSH 2)
182   (CONST&PUSH 30)                     ; (%ATAN)
184   (CONST&PUSH 31)                     ; (MTIMES)
186   (CONST&PUSH 32)                     ; (MEXPT)
188   (CONST&PUSH 33)                     ; (MPLUS)
190   (CONST&PUSH 27)                     ; 1
191   (CONST&PUSH 34)                     ; (MTIMES)
193   (CONST&PUSH 11)                     ; -1
194   (GETVALUE&PUSH 4)                   ; N
196   (LIST&PUSH 3)
198   (LIST&PUSH 3)
200   (CONST 35)                          ; (((RAT) 1 2))
202   (LIST*&PUSH 2)
204   (CONST 36)                          ; (%TAN)
206   L206
206   (PUSH)
207   (LOAD&PUSH 13)
208   (LIST&PUSH 2)
210   (LIST&PUSH 3)
212   (LIST&PUSH 2)
214   (LIST 3)
216   (SKIP 1)
218   (JMP L90)
221   L221
221   (CONST&PUSH 37)                     ; (%TAN)
223   (LOAD&PUSH 8)
224   (LIST 2)
226   (SKIP 1)
228   (JMP L90)
231   L231
231   (NIL)
232   (SKIP 1)
234   (JMP L90)


Disassembly of function #:|(DEFUN ELLIPTIC-PI (N PHI M) ...)-59|
(CONST 0) = ELLIPTIC-PI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELLIPTIC-PI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELLIPTIC-PI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELLIPTIC-PI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELLIPTIC-PI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELLIPTIC-PI
8     (SKIP&RET 1)


Disassembly of function ELLIPTIC-PI
(CONST 0) = N
(CONST 1) = M
(CONST 2) = K
(CONST 3) = 1
(CONST 4) = 2
(CONST 5) = 1.0
(CONST 6) = DRF
(CONST 7) = 1/3
(CONST 8) = 3
(CONST 9) = DRJ
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K M N)
57 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; N
3     (LOAD 4)
4     (BIND 1)                            ; M
6     (GETVALUE&PUSH 0)                   ; N
8     (CALLSR&PUSH 0 54)                  ; -
11    (LOAD&PUSH 9)
12    (CALLS2&PUSH 161)                   ; SIN
14    (LOAD&PUSH 10)
15    (CALLS2&PUSH 162)                   ; COS
17    (GETVALUE&PUSH 1)                   ; M
19    (CALLS2 156)                        ; SQRT
21    (BIND 2)                            ; K
23    (CONST&PUSH 3)                      ; 1
24    (GETVALUE&PUSH 2)                   ; K
26    (LOAD&PUSH 6)
27    (CALLSR&PUSH 2 55)                  ; *
30    (CALLSR&PUSH 1 54)                  ; -
33    (GETVALUE&PUSH 2)                   ; K
35    (LOAD&PUSH 6)
36    (CALLSR&PUSH 2 55)                  ; *
39    (CALLS2&PUSH 150)                   ; 1+
41    (CALLSR&PUSH 2 55)                  ; *
44    (LOAD&PUSH 5)
45    (LOAD&PUSH 5)
46    (CONST&PUSH 4)                      ; 2
47    (CALLS2&PUSH 154)                   ; EXPT
49    (LOAD&PUSH 2)
50    (CONST&PUSH 5)                      ; 1.0
51    (CALL&PUSH 3 6)                     ; DRF
54    (CALLSR&PUSH 2 55)                  ; *
57    (CONST&PUSH 7)                      ; 1/3
58    (LOAD&PUSH 8)
59    (CALLSR&PUSH 2 55)                  ; *
62    (LOAD&PUSH 7)
63    (CONST&PUSH 8)                      ; 3
64    (CALLS2&PUSH 154)                   ; EXPT
66    (LOAD&PUSH 7)
67    (CONST&PUSH 4)                      ; 2
68    (CALLS2&PUSH 154)                   ; EXPT
70    (LOAD&PUSH 4)
71    (CONST&PUSH 5)                      ; 1.0
72    (CONST&PUSH 3)                      ; 1
73    (GETVALUE&PUSH 0)                   ; N
75    (LOAD&PUSH 13)
76    (CONST&PUSH 4)                      ; 2
77    (CALLS2&PUSH 154)                   ; EXPT
79    (CALLSR&PUSH 2 55)                  ; *
82    (CALLSR&PUSH 1 54)                  ; -
85    (CALL&PUSH 4 9)                     ; DRJ
88    (CALLSR&PUSH 3 55)                  ; *
91    (CALLSR 1 54)                       ; -
94    (SKIP 1)
96    (UNBIND1)
97    (SKIP 3)
99    (UNBIND 2)
101   (SKIP&RET 4)


Disassembly of function #:|(LET (# # #) (DECLARE #) ...)-60|
(CONST 0) = 3.700743415417189E-17
(CONST 1) = 1/6
(CONST 2) = 1/7
(CONST 3) = 1.0
(CONST 4) = 9/22
(CONST 5) = DRC
(CONST 6) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 7) = #<COMPILED-CLOSURE DRC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
22 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 3)
3     (CONST&PUSH 0)                      ; 3.700743415417189E-17
4     (CONST&PUSH 1)                      ; 1/6
5     (CALLS2 154)                        ; EXPT
7     (STOREC 0 0)
10    (CONST&PUSH 2)                      ; 1/7
11    (CONST&PUSH 3)                      ; 1.0
12    (CALLS2 174)                        ; COMMON-LISP:FLOAT
14    (STOREC 0 1)
17    (CONST&PUSH 4)                      ; 9/22
18    (CONST&PUSH 3)                      ; 1.0
19    (CALLS2 174)                        ; COMMON-LISP:FLOAT
21    (STOREC 0 2)
24    (CONST&PUSH 5)                      ; DRC
25    (CALL1 6)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
27    (CONST&PUSH 5)                      ; DRC
28    (LOAD&PUSH 1)
29    (COPY-CLOSURE&PUSH 7 1)             ; #<COMPILED-CLOSURE DRC>
32    (CALLS2 130)                        ; SYSTEM::%PUTD
34    (CONST 5)                           ; DRC
35    (SKIP&RET 2)


Disassembly of function DRC
(CONST 0) = NIL
(CONST 1) = X
(CONST 2) = Y
(CONST 3) = 1/3
(CONST 4) = -2
(CONST 5) = 0.3
(CONST 6) = 0.375
(CONST 7) = 2
(CONST 8) = 0.25
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
68 byte-code instructions:
0     (LOAD 2)
1     (BIND 1)                            ; X
3     (LOAD 4)
4     (BIND 2)                            ; Y
6     (GETVALUE&PUSH 1)                   ; X
8     (GETVALUE&PUSH 2)                   ; Y
10    (JMP L48)
12    L12
12    (CONST&PUSH 7)                      ; 2
13    (LOAD&PUSH 4)
14    (CALLS2&PUSH 156)                   ; SQRT
16    (LOAD&PUSH 4)
17    (CALLS2&PUSH 156)                   ; SQRT
19    (CALLSR&PUSH 3 55)                  ; *
22    (LOAD&PUSH 3)
23    (CALLSR&PUSH 2 53)                  ; +
26    (CONST&PUSH 8)                      ; 0.25
27    (LOAD&PUSH 5)
28    (LOAD&PUSH 2)
29    (CALLSR&PUSH 2 53)                  ; +
32    (CALLSR&STORE 2 55 4)               ; *
36    (CONST&PUSH 8)                      ; 0.25
37    (LOAD&PUSH 4)
38    (LOAD&PUSH 2)
39    (CALLSR&PUSH 2 53)                  ; +
42    (CALLSR&STORE 2 55 3)               ; *
46    (SKIP 3)
48    L48
48    (CONST&PUSH 3)                      ; 1/3
49    (LOAD&PUSH 2)
50    (LOAD&PUSH 2)
51    (LOAD&PUSH 3)
52    (CALLSR&PUSH 3 53)                  ; +
55    (CALLSR&PUSH 2 55)                  ; *
58    (CONST&PUSH 4)                      ; -2
59    (LOAD&PUSH 2)
60    (LOAD&PUSH 2)
61    (CALLSR&PUSH 2 53)                  ; +
64    (LOAD&PUSH 2)
65    (CALLSR&PUSH 1 56)                  ; /
68    (CALLSR&PUSH 2 53)                  ; +
71    (LOAD&PUSH 0)
72    (CALLS2&PUSH 158)                   ; ABS
74    (LOADV&PUSH 0 1)
77    (CALLSR&JMPIFNOT 1 47 L12)          ; <
82    (LOAD&PUSH 0)
83    (LOAD&PUSH 1)
84    (CONST&PUSH 5)                      ; 0.3
85    (LOAD&PUSH 3)
86    (LOADV&PUSH 0 2)
89    (LOAD&PUSH 5)
90    (CONST&PUSH 6)                      ; 0.375
91    (LOAD&PUSH 7)
92    (LOADV&PUSH 0 3)
95    (CALLSR&PUSH 2 55)                  ; *
98    (CALLSR&PUSH 2 53)                  ; +
101   (CALLSR&PUSH 2 55)                  ; *
104   (CALLSR&PUSH 2 53)                  ; +
107   (CALLSR&PUSH 2 55)                  ; *
110   (CALLSR&PUSH 2 53)                  ; +
113   (CALLSR&PUSH 3 55)                  ; *
116   (LOAD&INC&PUSH 0)
118   (LOAD&PUSH 3)
119   (CALLS2&PUSH 156)                   ; SQRT
121   (CALLSR 1 56)                       ; /
124   (SKIP 5)
126   (UNBIND 2)
128   (SKIP&RET 3)


Disassembly of function #:|(LET (# # # ...) (DEFUN DRJ # ...))-61|
(CONST 0) = 3.700743415417189E-17
(CONST 1) = 1/6
(CONST 2) = DRJ
(CONST 3) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 4) = #<COMPILED-CLOSURE DRJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 1)
3     (CONST&PUSH 0)                      ; 3.700743415417189E-17
4     (CONST&PUSH 1)                      ; 1/6
5     (CALLS2 154)                        ; EXPT
7     (STOREC 0 0)
10    (CONST&PUSH 2)                      ; DRJ
11    (CALL1 3)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
13    (CONST&PUSH 2)                      ; DRJ
14    (LOAD&PUSH 1)
15    (COPY-CLOSURE&PUSH 4 1)             ; #<COMPILED-CLOSURE DRJ>
18    (CALLS2 130)                        ; SYSTEM::%PUTD
20    (CONST 2)                           ; DRJ
21    (SKIP&RET 2)


Disassembly of function DRJ
(CONST 0) = NIL
(CONST 1) = X
(CONST 2) = Y
(CONST 3) = P
(CONST 4) = 0.0
(CONST 5) = 1.0
(CONST 6) = 0.2
(CONST 7) = 3
(CONST 8) = 2
(CONST 9) = 3/14
(CONST 10) = 3/4
(CONST 11) = 3/22
(CONST 12) = -3/2
(CONST 13) = 3/26
(CONST 14) = 1/2
(CONST 15) = 1/3
(CONST 16) = DRC
(CONST 17) = 0.25
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (P Y X)
211 byte-code instructions:
0     (LOAD 4)
1     (BIND 1)                            ; X
3     (LOAD 6)
4     (BIND 2)                            ; Y
6     (LOAD 7)
7     (BIND 3)                            ; P
9     (GETVALUE&PUSH 1)                   ; X
11    (GETVALUE&PUSH 2)                   ; Y
13    (LOAD&PUSH 13)
14    (GETVALUE&PUSH 3)                   ; P
16    (CONST&PUSH 4)                      ; 0.0
17    (CONST&PUSH 5)                      ; 1.0
18    (JMP L142)
21    L21
21    (LOAD&PUSH 11)
22    (CALLS2&PUSH 156)                   ; SQRT
24    (LOAD&PUSH 11)
25    (CALLS2&PUSH 156)                   ; SQRT
27    (LOAD&PUSH 11)
28    (CALLS2&PUSH 156)                   ; SQRT
30    (LOAD&PUSH 2)
31    (LOAD&PUSH 2)
32    (LOAD&PUSH 2)
33    (CALLSR&PUSH 2 53)                  ; +
36    (CALLSR&PUSH 2 55)                  ; *
39    (LOAD&PUSH 2)
40    (LOAD&PUSH 2)
41    (CALLSR&PUSH 2 55)                  ; *
44    (CALLSR&PUSH 2 53)                  ; +
47    (LOAD&PUSH 12)
48    (LOAD&PUSH 4)
49    (LOAD&PUSH 4)
50    (LOAD&PUSH 4)
51    (CALLSR&PUSH 3 53)                  ; +
54    (CALLSR&PUSH 2 55)                  ; *
57    (LOAD&PUSH 4)
58    (LOAD&PUSH 4)
59    (LOAD&PUSH 4)
60    (CALLSR&PUSH 3 55)                  ; *
63    (CALLSR&PUSH 2 53)                  ; +
66    (CONST&PUSH 8)                      ; 2
67    (CALLS2&PUSH 154)                   ; EXPT
69    (LOAD&PUSH 13)
70    (LOAD&PUSH 14)
71    (LOAD&PUSH 3)
72    (CALLSR&PUSH 2 53)                  ; +
75    (CONST&PUSH 8)                      ; 2
76    (CALLS2&PUSH 154)                   ; EXPT
78    (CALLSR&PUSH 2 55)                  ; *
81    (LOAD&PUSH 13)
82    (LOAD&PUSH 13)
83    (LOAD&PUSH 3)
84    (LOAD&PUSH 3)
85    (CALL2&PUSH 16)                     ; DRC
87    (CALLSR&PUSH 2 55)                  ; *
90    (CALLSR&STORE 2 53 13)              ; +
94    (CONST&PUSH 17)                     ; 0.25
95    (LOAD&PUSH 13)
96    (CALLSR&STORE 2 55 12)              ; *
100   (CONST&PUSH 17)                     ; 0.25
101   (LOAD&PUSH 18)
102   (LOAD&PUSH 4)
103   (CALLSR&PUSH 2 53)                  ; +
106   (CALLSR&STORE 2 55 17)              ; *
110   (CONST&PUSH 17)                     ; 0.25
111   (LOAD&PUSH 17)
112   (LOAD&PUSH 4)
113   (CALLSR&PUSH 2 53)                  ; +
116   (CALLSR&STORE 2 55 16)              ; *
120   (CONST&PUSH 17)                     ; 0.25
121   (LOAD&PUSH 16)
122   (LOAD&PUSH 4)
123   (CALLSR&PUSH 2 53)                  ; +
126   (CALLSR&STORE 2 55 15)              ; *
130   (CONST&PUSH 17)                     ; 0.25
131   (LOAD&PUSH 15)
132   (LOAD&PUSH 4)
133   (CALLSR&PUSH 2 53)                  ; +
136   (CALLSR&STORE 2 55 14)              ; *
140   (SKIP 12)
142   L142
142   (CONST&PUSH 6)                      ; 0.2
143   (LOAD&PUSH 6)
144   (LOAD&PUSH 6)
145   (LOAD&PUSH 6)
146   (LOAD&PUSH 6)
147   (LOAD&PUSH 7)
148   (CALLSR&PUSH 5 53)                  ; +
151   (CALLSR&PUSH 2 55)                  ; *
154   (LOAD&PUSH 0)
155   (LOAD&PUSH 7)
156   (CALLSR&PUSH 1 54)                  ; -
159   (LOAD&PUSH 1)
160   (CALLSR&PUSH 1 56)                  ; /
163   (LOAD&PUSH 1)
164   (LOAD&PUSH 7)
165   (CALLSR&PUSH 1 54)                  ; -
168   (LOAD&PUSH 2)
169   (CALLSR&PUSH 1 56)                  ; /
172   (LOAD&PUSH 2)
173   (LOAD&PUSH 7)
174   (CALLSR&PUSH 1 54)                  ; -
177   (LOAD&PUSH 3)
178   (CALLSR&PUSH 1 56)                  ; /
181   (LOAD&PUSH 3)
182   (LOAD&PUSH 7)
183   (CALLSR&PUSH 1 54)                  ; -
186   (LOAD&PUSH 4)
187   (CALLSR&PUSH 1 56)                  ; /
190   (LOAD&PUSH 3)
191   (CALLS2&PUSH 158)                   ; ABS
193   (LOAD&PUSH 3)
194   (CALLS2&PUSH 158)                   ; ABS
196   (LOAD&PUSH 3)
197   (CALLS2&PUSH 158)                   ; ABS
199   (LOAD&PUSH 3)
200   (CALLS2&PUSH 158)                   ; ABS
202   (CALLSR&PUSH 3 51)                  ; MAX
205   (LOAD&PUSH 0)
206   (LOADV&PUSH 0 1)
209   (CALLSR&JMPIFNOT 1 47 L21)          ; <
214   (LOAD&PUSH 4)
215   (LOAD&PUSH 4)
216   (LOAD&PUSH 4)
217   (CALLSR&PUSH 2 53)                  ; +
220   (CALLSR&PUSH 2 55)                  ; *
223   (LOAD&PUSH 4)
224   (LOAD&PUSH 4)
225   (CALLSR&PUSH 2 55)                  ; *
228   (CALLSR&PUSH 2 53)                  ; +
231   (LOAD&PUSH 5)
232   (LOAD&PUSH 5)
233   (LOAD&PUSH 5)
234   (CALLSR&PUSH 3 55)                  ; *
237   (LOAD&PUSH 3)
238   (LOAD&PUSH 4)
239   (CALLSR&PUSH 2 55)                  ; *
242   (LOAD&PUSH 2)
243   (CONST&PUSH 7)                      ; 3
244   (LOAD&PUSH 2)
245   (CALLSR&PUSH 2 55)                  ; *
248   (CALLSR&PUSH 1 54)                  ; -
251   (LOAD&PUSH 2)
252   (CONST&PUSH 8)                      ; 2
253   (LOAD&PUSH 7)
254   (LOAD&PUSH 6)
255   (LOAD&PUSH 5)
256   (CALLSR&PUSH 1 54)                  ; -
259   (CALLSR&PUSH 3 55)                  ; *
262   (CALLSR&PUSH 2 53)                  ; +
265   (LOAD&PUSH 1)
266   (CONST&PUSH 9)                      ; 3/14
267   (CALLSR&PUSH 0 54)                  ; -
270   (CONST&PUSH 10)                     ; 3/4
271   (CONST&PUSH 11)                     ; 3/22
272   (LOAD&PUSH 5)
273   (CALLSR&PUSH 3 55)                  ; *
276   (CONST&PUSH 12)                     ; -3/2
277   (CONST&PUSH 13)                     ; 3/26
278   (LOAD&PUSH 5)
279   (CALLSR&PUSH 3 55)                  ; *
282   (CALLSR&PUSH 3 53)                  ; +
285   (CALLSR&PUSH 2 55)                  ; *
288   (CALLS2&PUSH 150)                   ; 1+
290   (LOAD&PUSH 4)
291   (CONST&PUSH 14)                     ; 1/2
292   (CONST&PUSH 15)                     ; 1/3
293   (CALLSR&PUSH 2 55)                  ; *
296   (LOAD&PUSH 9)
297   (CONST&PUSH 11)                     ; 3/22
298   (CALLSR&PUSH 0 54)                  ; -
301   (CONST&PUSH 11)                     ; 3/22
302   (CALLSR&PUSH 0 54)                  ; -
305   (LOAD&PUSH 12)
306   (CONST&PUSH 13)                     ; 3/26
307   (CALLSR&PUSH 2 55)                  ; *
310   (CALLSR&PUSH 3 53)                  ; +
313   (CALLSR&PUSH 2 55)                  ; *
316   (CALLSR&PUSH 2 53)                  ; +
319   (CALLSR&PUSH 2 55)                  ; *
322   (LOAD&PUSH 8)
323   (LOAD&PUSH 7)
324   (CONST&PUSH 15)                     ; 1/3
325   (LOAD&PUSH 11)
326   (CONST&PUSH 11)                     ; 3/22
327   (CALLSR&PUSH 2 55)                  ; *
330   (CALLSR&PUSH 1 54)                  ; -
333   (CALLSR&PUSH 3 55)                  ; *
336   (CONST&PUSH 15)                     ; 1/3
337   (LOAD&PUSH 10)
338   (LOAD&PUSH 7)
339   (CALLSR&PUSH 3 55)                  ; *
342   (CALLSR&PUSH 1 54)                  ; -
345   (CONST&PUSH 7)                      ; 3
346   (LOAD&PUSH 16)
347   (CALLSR&PUSH 2 55)                  ; *
350   (LOAD&PUSH 15)
351   (LOAD&PUSH 4)
352   (LOAD&PUSH 4)
353   (LOAD&PUSH 4)
354   (CALLSR&PUSH 3 53)                  ; +
357   (CALLSR&PUSH 2 55)                  ; *
360   (LOAD&PUSH 15)
361   (LOAD&PUSH 16)
362   (CALLS2&PUSH 156)                   ; SQRT
364   (CALLSR&PUSH 2 55)                  ; *
367   (CALLSR&PUSH 1 56)                  ; /
370   (CALLSR 2 53)                       ; +
373   (SKIP 20)
375   (UNBIND 3)
377   (SKIP&RET 5)


Disassembly of function #:|(DEFUN CHECK-DRJ (X Y Z ...) ...)-62|
(CONST 0) = CHECK-DRJ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECK-DRJ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECK-DRJ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECK-DRJ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECK-DRJ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECK-DRJ
8     (SKIP&RET 1)


Disassembly of function CHECK-DRJ
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = P
(CONST 3) = W
(CONST 4) = B
(CONST 5) = DRJ
(CONST 6) = 0.0
(CONST 7) = 3
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B W P Y X)
80 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; X
3     (LOAD 6)
4     (BIND 1)                            ; Y
6     (LOAD 7)
7     (BIND 2)                            ; P
9     (GETVALUE&PUSH 0)                   ; X
11    (GETVALUE&PUSH 1)                   ; Y
13    (CALLSR&PUSH 2 55)                  ; *
16    (LOAD&PUSH 12)
17    (CALLSR 1 56)                       ; /
20    (BIND 3)                            ; W
22    (GETVALUE&PUSH 2)                   ; P
24    (GETVALUE&PUSH 2)                   ; P
26    (GETVALUE&PUSH 0)                   ; X
28    (GETVALUE&PUSH 1)                   ; Y
30    (LOAD&PUSH 18)
31    (GETVALUE&PUSH 3)                   ; W
33    (CALLSR&PUSH 4 53)                  ; +
36    (CALLSR&PUSH 3 55)                  ; *
39    (GETVALUE&PUSH 2)                   ; P
41    (GETVALUE&PUSH 2)                   ; P
43    (GETVALUE&PUSH 0)                   ; X
45    (CALLSR&PUSH 2 53)                  ; +
48    (GETVALUE&PUSH 2)                   ; P
50    (GETVALUE&PUSH 1)                   ; Y
52    (CALLSR&PUSH 2 53)                  ; +
55    (CALLSR 3 55)                       ; *
58    (BIND 4)                            ; B
60    (GETVALUE&PUSH 0)                   ; X
62    (GETVALUE&PUSH 0)                   ; X
64    (LOAD&PUSH 20)
65    (CALLSR&PUSH 2 53)                  ; +
68    (GETVALUE&PUSH 0)                   ; X
70    (GETVALUE&PUSH 3)                   ; W
72    (CALLSR&PUSH 2 53)                  ; +
75    (GETVALUE&PUSH 0)                   ; X
77    (GETVALUE&PUSH 2)                   ; P
79    (CALLSR&PUSH 2 53)                  ; +
82    (CALL&PUSH 4 5)                     ; DRJ
85    (GETVALUE&PUSH 1)                   ; Y
87    (GETVALUE&PUSH 1)                   ; Y
89    (LOAD&PUSH 21)
90    (CALLSR&PUSH 2 53)                  ; +
93    (GETVALUE&PUSH 1)                   ; Y
95    (GETVALUE&PUSH 3)                   ; W
97    (CALLSR&PUSH 2 53)                  ; +
100   (GETVALUE&PUSH 1)                   ; Y
102   (GETVALUE&PUSH 2)                   ; P
104   (CALLSR&PUSH 2 53)                  ; +
107   (CALL&PUSH 4 5)                     ; DRJ
110   (LOAD&PUSH 5)
111   (GETVALUE&PUSH 4)                   ; B
113   (GETVALUE&PUSH 4)                   ; B
115   (LOAD&PUSH 8)
116   (CALL&PUSH 4 5)                     ; DRJ
119   (CONST&PUSH 6)                      ; 0.0
120   (LOAD&PUSH 22)
121   (GETVALUE&PUSH 3)                   ; W
123   (GETVALUE&PUSH 2)                   ; P
125   (CALL&PUSH 4 5)                     ; DRJ
128   (LOAD&PUSH 3)
129   (LOAD&PUSH 3)
130   (LOAD&PUSH 9)
131   (GETVALUE&PUSH 4)                   ; B
133   (CALLSR&PUSH 1 54)                  ; -
136   (LOAD&PUSH 4)
137   (CALLSR&PUSH 2 55)                  ; *
140   (CONST&PUSH 7)                      ; 3
141   (LOAD&PUSH 11)
142   (CALLS2&PUSH 156)                   ; SQRT
144   (CALLSR&PUSH 1 56)                  ; /
147   (CALLSR&PUSH 4 53)                  ; +
150   (LOAD&PUSH 1)
151   (STACK-TO-MV 2)
153   (SKIP 4)
155   (UNBIND1)
156   (SKIP 1)
158   (UNBIND 4)
160   (SKIP&RET 5)


Disassembly of function #:|(DEFMFUN $JACOBI_NS (U M) ...)-63|
(CONST 0) = $JACOBI_NS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_NS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_NS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_NS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_NS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_NS
8     (SKIP&RET 1)


Disassembly of function $JACOBI_NS
(CONST 0) = M
(CONST 1) = (%JACOBI_NS)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_NS)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_NS SIMP-%JACOBI_NS ...)-64|
(CONST 0) = %JACOBI_NS
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_NS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_NS
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_NS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_NS (# # #) ...)-65|
(CONST 0) = %JACOBI_NS
(CONST 1) = GRAD
(CONST 2) = 
((U M)
 ((MTIMES) -1 ((%JACOBI_CN) U M) ((%JACOBI_DN) U M)
  ((MEXPT) ((%JACOBI_SN) U M) -2))
 ((MTIMES) -1 ((MEXPT) ((%JACOBI_SN) U M) -2)
  ((MPLUS)
   ((MTIMES) ((RAT) 1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
    ((MEXPT) ((%JACOBI_CN) U M) 2) ((%JACOBI_SN) U M))
   ((MTIMES) ((RAT) 1 2) ((MEXPT) M -1) ((%JACOBI_CN) U M) ((%JACOBI_DN) U M)
    ((MPLUS) U
     ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
      (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M)))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_NS
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# -1 # # #) (# -1 # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_NS in lines 1973..2046 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_NS (FORM Y Z) ...)-66|
(CONST 0) = SIMP-%JACOBI_NS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_NS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_NS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_NS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_NS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_NS
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_NS
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = SN
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = COMPLEXIFY
(CONST 12) = ZEROP1
(CONST 13) = ($CSC)
(CONST 14) = ONEP1
(CONST 15) = ($COTH)
(CONST 16) = JACOBI_NS
(CONST 17) = DBZ-ERR1
(CONST 18) = $TRIGSIGN
(CONST 19) = MMINUSP*
(CONST 20) = %JACOBI_NS
(CONST 21) = NEG
(CONST 22) = SIMPLIFY
(CONST 23) = $%IARGS
(CONST 24) = $%I
(CONST 25) = MULTIPLEP
(CONST 26) = %JACOBI_CS
(CONST 27) = 1
(CONST 28) = COEFF
(CONST 29) = ADD
(CONST 30) = MUL
(CONST 31) = KC-ARG2
(CONST 32) = 2
(CONST 33) = (2 . 2)
(CONST 34) = SYSTEM::DESTRUCTURING-ERROR
(CONST 35) = 4
(CONST 36) = #S(HASH-TABLE EQ (3 . 61) (2 . 37) (1 . 20) (0 . 5))
(CONST 37) = (%JACOBI_NS SIMP)
(CONST 38) = (%JACOBI_DC SIMP)
(CONST 39) = (%JACOBI_NS SIMP)
(CONST 40) = -1
(CONST 41) = (%JACOBI_DC SIMP)
(CONST 42) = TYPE-ERROR
(CONST 43) = :DATUM
(CONST 44) = :EXPECTED-TYPE
(CONST 45) = (MEMBER 0 1 2 3)
(CONST 46) = SYSTEM::TYPE-ERROR-STRING
(CONST 47) = (MOD LIN 4)
(CONST 48) = (0 1 2 3)
(CONST 49) = SYSTEM::CASE-ERROR-STRING
(CONST 50) = |1//2|
(CONST 51) = ALIKE1
(CONST 52) = (MEXPT)
(CONST 53) = (%JACOBI_SN)
(CONST 54) = (-1)
(CONST 55) = (%JACOBI_NS)
(CONST 56) = EQTEST
(CONST 57) = (%JACOBI_NS)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| $%IARGS $TRIGSIGN $NUMER M FORM)
253 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L37)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L83)               ; FLOATP
37    L37
37    (GETVALUE 5)                        ; $NUMER
39    (JMPIFNOT L50)
41    (LOAD&PUSH 4)
42    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
45    (GETVALUE&PUSH 4)                   ; M
47    (CALLS2&JMPIF 8 L83)                ; NUMBERP
50    L50
50    (GETVALUE 5)                        ; $NUMER
52    (JMPIFNOT L63)
54    (LOAD&PUSH 4)
55    (CALL1&JMPIFNOT 8 L63)              ; COMPLEX-NUMBER-P
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 8 L100)                ; COMPLEX-NUMBER-P
63    L63
63    (GETVALUE&PUSH 4)                   ; M
65    (CALL1&JMPIF 12 L134)               ; ZEROP1
69    (GETVALUE&PUSH 4)                   ; M
71    (CALL1&JMPIFNOT 14 L157)            ; ONEP1
75    (CONST 15)                          ; ($COTH)
76    L76
76    (PUSH)
77    (LOAD&PUSH 5)
78    (LIST 2)
80    (JMP L409)
83    L83
83    (LOAD&PUSH 4)
84    (CONST&PUSH 6)                      ; 1.0
85    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
87    (GETVALUE&PUSH 4)                   ; M
89    (CONST&PUSH 6)                      ; 1.0
90    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
92    (CALL2&PUSH 7)                      ; SN
94    (CALLSR 0 56)                       ; /
97    (JMP L409)
100   L100
100   (LOAD&PUSH 4)
101   (CALL1&PUSH 9)                      ; $REALPART
103   (LOAD&PUSH 5)
104   (CALL1&PUSH 10)                     ; $IMAGPART
106   (GETVALUE&PUSH 4)                   ; M
108   (CALL1&PUSH 9)                      ; $REALPART
110   (GETVALUE&PUSH 4)                   ; M
112   (CALL1&PUSH 10)                     ; $IMAGPART
114   (LOAD&PUSH 3)
115   (LOAD&PUSH 3)
116   (CALLS2&PUSH 196)                   ; COMPLEX
118   (LOAD&PUSH 2)
119   (LOAD&PUSH 2)
120   (CALLS2&PUSH 196)                   ; COMPLEX
122   (CALL2&PUSH 7)                      ; SN
124   (CALLSR&PUSH 0 56)                  ; /
127   (CALL1 11)                          ; COMPLEXIFY
129   (SKIP 4)
131   (JMP L409)
134   L134
134   (CONST 13)                          ; ($CSC)
135   (JMP L76)
137   L137
137   (CONST&PUSH 16)                     ; JACOBI_NS
138   (CALL1 17)                          ; DBZ-ERR1
140   (JMP L409)
143   L143
143   (CONST&PUSH 20)                     ; %JACOBI_NS
144   (LIST&PUSH 1)
146   (LOAD&PUSH 5)
147   (CALL1&PUSH 21)                     ; NEG
149   (GETVALUE&PUSH 4)                   ; M
151   (LIST&PUSH 3)
153   (CALL1 22)                          ; SIMPLIFY
155   (JMP L203)
157   L157
157   (LOAD&PUSH 4)
158   (CALL1&JMPIF 12 L137)               ; ZEROP1
161   (GETVALUE 18)                       ; $TRIGSIGN
163   (JMPIFNOT L169)
165   (LOAD&PUSH 4)
166   (CALL1&JMPIF 19 L143)               ; MMINUSP*
169   L169
169   (GETVALUE 23)                       ; $%IARGS
171   (JMPIFNOT L390)
174   (LOAD&PUSH 4)
175   (CONST&PUSH 24)                     ; $%I
176   (CALL2&JMPIFNOT 25 L390)            ; MULTIPLEP
180   (CONST&PUSH 24)                     ; $%I
181   (CONST&PUSH 26)                     ; %JACOBI_CS
182   (LIST&PUSH 1)
184   (LOAD&PUSH 6)
185   (CONST&PUSH 24)                     ; $%I
186   (CONST&PUSH 27)                     ; 1
187   (CALL&PUSH 3 28)                    ; COEFF
190   (CONST&PUSH 27)                     ; 1
191   (GETVALUE&PUSH 4)                   ; M
193   (CALL1&PUSH 21)                     ; NEG
195   (CALL2&PUSH 29)                     ; ADD
197   (LIST&PUSH 3)
199   (CALL1&PUSH 22)                     ; SIMPLIFY
201   (CALL2 30)                          ; MUL
203   L203
203   (PUSH)
204   (CALL1 21)                          ; NEG
206   (JMP L409)
209   L209
209   (LOAD&PUSH 0)
210   (CONST&PUSH 33)                     ; (2 . 2)
212   (CALL2 34)                          ; SYSTEM::DESTRUCTURING-ERROR
214   (JMP L409)
217   L217
217   (LOAD&PUSH 1)
218   (CONST&PUSH 35)                     ; 4
220   (CALLS2&PUSH 183)                   ; MOD
222   (LOAD 0)
223   (JMPHASH 36 L305 L230 L245 L262 L286)
227   L227
227   (CONST 16)                          ; JACOBI_NS
228   (JMP L267)
230   L230
230   (LOAD&PUSH 1)
231   (CALL1&JMPIF 12 L227)               ; ZEROP1
234   (CONST 37)                          ; (%JACOBI_NS SIMP)
236   (JMP L251)
238   L238
238   (CONST 27)                          ; 1
240   (SKIP 3)
242   (JMP L409)
245   L245
245   (LOAD&PUSH 1)
246   (CALL1&JMPIF 12 L238)               ; ZEROP1
249   (CONST 38)                          ; (%JACOBI_DC SIMP)
251   L251
251   (PUSH)
252   (LOAD&PUSH 2)
253   (GETVALUE&PUSH 4)                   ; M
255   (LIST 3)
257   (SKIP 3)
259   (JMP L409)
262   L262
262   (LOAD&PUSH 1)
263   (CALL1&JMPIFNOT 12 L275)            ; ZEROP1
266   (CONST 16)                          ; JACOBI_NS
267   L267
267   (PUSH)
268   (CALL1 17)                          ; DBZ-ERR1
270   (SKIP 3)
272   (JMP L409)
275   L275
275   (CONST 39)                          ; (%JACOBI_NS SIMP)
277   (JMP L292)
279   L279
279   (CONST 40)                          ; -1
281   (SKIP 3)
283   (JMP L409)
286   L286
286   (LOAD&PUSH 1)
287   (CALL1&JMPIF 12 L279)               ; ZEROP1
290   (CONST 41)                          ; (%JACOBI_DC SIMP)
292   L292
292   (PUSH)
293   (LOAD&PUSH 2)
294   (GETVALUE&PUSH 4)                   ; M
296   (LIST&PUSH 3)
298   (CALL1 21)                          ; NEG
300   (SKIP 3)
302   (JMP L409)
305   L305
305   (CONST&PUSH 42)                     ; TYPE-ERROR
307   (CONST&PUSH 43)                     ; :DATUM
309   (LOAD&PUSH 2)
310   (CONST&PUSH 44)                     ; :EXPECTED-TYPE
312   (CONST&PUSH 45)                     ; (MEMBER 0 1 2 3)
314   (CALL0 46)                          ; SYSTEM::TYPE-ERROR-STRING
316   (PUSH)
317   (CONST&PUSH 47)                     ; (MOD LIN 4)
319   (CONST&PUSH 48)                     ; (0 1 2 3)
321   (CALL2&PUSH 49)                     ; SYSTEM::CASE-ERROR-STRING
323   (LOAD&PUSH 7)
324   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
327   L327
327   (CONST&PUSH 52)                     ; (MEXPT)
329   (CONST&PUSH 53)                     ; (%JACOBI_SN)
331   (LOAD&PUSH 8)
332   (GETVALUE&PUSH 4)                   ; M
334   (LIST&PUSH 3)
336   (CONST 54)                          ; (-1)
338   (LIST* 2)
340   (SKIP 2)
342   (JMP L409)
345   L345
345   (PUSH)
346   (CALLS2&PUSH 71)                    ; LENGTH
348   (CONST&PUSH 32)                     ; 2
350   (CALLSR&JMPIF 1 46 L209)            ; /=
355   (LOAD&CAR&PUSH 0)
357   (LOAD 1)
358   (CDR)
359   (CAR&PUSH)
360   (LOAD&PUSH 1)
361   (CALLS2&JMPIF 12 L217)              ; INTEGERP
365   (LOAD&PUSH 1)
366   (GETVALUE&PUSH 50)                  ; |1//2|
368   (CALL2&JMPIFNOT 51 L375)            ; ALIKE1
371   (LOAD&PUSH 0)
372   (CALL1&JMPIF 12 L327)               ; ZEROP1
375   L375
375   (CONST&PUSH 55)                     ; (%JACOBI_NS)
377   (LOAD&PUSH 7)
378   (GETVALUE&PUSH 4)                   ; M
380   (LIST&PUSH 3)
382   (GETVALUE&PUSH 0)                   ; FORM
384   (CALL2 56)                          ; EQTEST
386   (SKIP 2)
388   (JMP L409)
390   L390
390   (LOAD&PUSH 4)
391   (GETVALUE&PUSH 4)                   ; M
393   (CALL2 31)                          ; KC-ARG2
395   (STORE 0)
396   (JMPIF L345)
398   (CONST&PUSH 57)                     ; (%JACOBI_NS)
400   (LOAD&PUSH 5)
401   (GETVALUE&PUSH 4)                   ; M
403   (LIST&PUSH 3)
405   (GETVALUE&PUSH 0)                   ; FORM
407   (CALL2 56)                          ; EQTEST
409   L409
409   (SKIP 1)
411   (UNBIND1)
412   (SKIP 1)
414   (UNBIND 2)
416   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $JACOBI_NC (U M) ...)-67|
(CONST 0) = $JACOBI_NC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_NC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_NC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_NC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_NC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_NC
8     (SKIP&RET 1)


Disassembly of function $JACOBI_NC
(CONST 0) = M
(CONST 1) = (%JACOBI_NC)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_NC)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_NC SIMP-%JACOBI_NC ...)-68|
(CONST 0) = %JACOBI_NC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_NC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_NC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_NC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_NC (# # #) ...)-69|
(CONST 0) = %JACOBI_NC
(CONST 1) = GRAD
(CONST 2) = 
((U M)
 ((MTIMES) ((MEXPT) ((%JACOBI_CN) U M) -2) ((%JACOBI_DN) U M)
  ((%JACOBI_SN) U M))
 ((MTIMES) -1 ((MEXPT) ((%JACOBI_CN) U M) -2)
  ((MPLUS)
   ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
    ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
   ((MTIMES) ((RAT) -1 2) ((MEXPT) M -1) ((%JACOBI_DN) U M) ((%JACOBI_SN) U M)
    ((MPLUS) U
     ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
      (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M)))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_NC
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# # # #) (# -1 # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_NC in lines 2073..2154 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_NC (FORM Y Z) ...)-70|
(CONST 0) = SIMP-%JACOBI_NC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_NC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_NC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_NC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_NC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_NC
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_NC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = CN
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = COMPLEXIFY
(CONST 12) = ZEROP1
(CONST 13) = 1
(CONST 14) = ($SEC)
(CONST 15) = ONEP1
(CONST 16) = (%COSH)
(CONST 17) = $TRIGSIGN
(CONST 18) = MMINUSP*
(CONST 19) = %JACOBI_NC
(CONST 20) = NEG
(CONST 21) = SIMPLIFY
(CONST 22) = $%IARGS
(CONST 23) = $%I
(CONST 24) = MULTIPLEP
(CONST 25) = %JACOBI_CN
(CONST 26) = COEFF
(CONST 27) = ADD
(CONST 28) = KC-ARG2
(CONST 29) = 2
(CONST 30) = (2 . 2)
(CONST 31) = SYSTEM::DESTRUCTURING-ERROR
(CONST 32) = 4
(CONST 33) = #S(HASH-TABLE EQ (3 . 94) (2 . 65) (1 . 24) (0 . 8))
(CONST 34) = (%JACOBI_NC SIMP)
(CONST 35) = JACOBI_NC
(CONST 36) = DBZ-ERR1
(CONST 37) = (MTIMES SIMP)
(CONST 38) = (MEXPT SIMP)
(CONST 39) = (MPLUS SIMP)
(CONST 40) = (MTIMES SIMP)
(CONST 41) = -1
(CONST 42) = (((RAT SIMP) -1 2))
(CONST 43) = (%JACOBI_DS SIMP)
(CONST 44) = (%JACOBI_NC)
(CONST 45) = (MTIMES SIMP)
(CONST 46) = (MEXPT SIMP)
(CONST 47) = (MPLUS SIMP)
(CONST 48) = (MTIMES SIMP)
(CONST 49) = (((RAT SIMP) -1 2))
(CONST 50) = (%JACOBI_DS SIMP)
(CONST 51) = TYPE-ERROR
(CONST 52) = :DATUM
(CONST 53) = :EXPECTED-TYPE
(CONST 54) = (MEMBER 0 1 2 3)
(CONST 55) = SYSTEM::TYPE-ERROR-STRING
(CONST 56) = (MOD LIN 4)
(CONST 57) = (0 1 2 3)
(CONST 58) = SYSTEM::CASE-ERROR-STRING
(CONST 59) = |1//2|
(CONST 60) = ALIKE1
(CONST 61) = (MEXPT)
(CONST 62) = (%JACOBI_CN)
(CONST 63) = (-1)
(CONST 64) = (%JACOBI_CN)
(CONST 65) = EQTEST
(CONST 66) = (%JACOBI_NC)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| $%IARGS $TRIGSIGN $NUMER M FORM)
275 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L37)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L88)               ; FLOATP
37    L37
37    (GETVALUE 5)                        ; $NUMER
39    (JMPIFNOT L50)
41    (LOAD&PUSH 4)
42    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
45    (GETVALUE&PUSH 4)                   ; M
47    (CALLS2&JMPIF 8 L88)                ; NUMBERP
50    L50
50    (GETVALUE 5)                        ; $NUMER
52    (JMPIFNOT L63)
54    (LOAD&PUSH 4)
55    (CALL1&JMPIFNOT 8 L63)              ; COMPLEX-NUMBER-P
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 8 L105)                ; COMPLEX-NUMBER-P
63    L63
63    (LOAD&PUSH 4)
64    (CALL1&JMPIF 12 L139)               ; ZEROP1
68    (GETVALUE&PUSH 4)                   ; M
70    (CALL1&JMPIF 12 L143)               ; ZEROP1
74    (GETVALUE&PUSH 4)                   ; M
76    (CALL1&JMPIFNOT 15 L157)            ; ONEP1
80    (CONST 16)                          ; (%COSH)
81    L81
81    (PUSH)
82    (LOAD&PUSH 5)
83    (LIST 2)
85    (JMP L452)
88    L88
88    (LOAD&PUSH 4)
89    (CONST&PUSH 6)                      ; 1.0
90    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
92    (GETVALUE&PUSH 4)                   ; M
94    (CONST&PUSH 6)                      ; 1.0
95    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
97    (CALL2&PUSH 7)                      ; CN
99    (CALLSR 0 56)                       ; /
102   (JMP L452)
105   L105
105   (LOAD&PUSH 4)
106   (CALL1&PUSH 9)                      ; $REALPART
108   (LOAD&PUSH 5)
109   (CALL1&PUSH 10)                     ; $IMAGPART
111   (GETVALUE&PUSH 4)                   ; M
113   (CALL1&PUSH 9)                      ; $REALPART
115   (GETVALUE&PUSH 4)                   ; M
117   (CALL1&PUSH 10)                     ; $IMAGPART
119   (LOAD&PUSH 3)
120   (LOAD&PUSH 3)
121   (CALLS2&PUSH 196)                   ; COMPLEX
123   (LOAD&PUSH 2)
124   (LOAD&PUSH 2)
125   (CALLS2&PUSH 196)                   ; COMPLEX
127   (CALL2&PUSH 7)                      ; CN
129   (CALLSR&PUSH 0 56)                  ; /
132   (CALL1 11)                          ; COMPLEXIFY
134   (SKIP 4)
136   (JMP L452)
139   L139
139   (CONST 13)                          ; 1
140   (JMP L452)
143   L143
143   (CONST 14)                          ; ($SEC)
144   (JMP L81)
147   L147
147   (CONST&PUSH 19)                     ; %JACOBI_NC
148   (LIST&PUSH 1)
150   (LOAD&PUSH 5)
151   (CALL1&PUSH 20)                     ; NEG
153   (GETVALUE 4)                        ; M
155   (JMP L192)
157   L157
157   (GETVALUE 17)                       ; $TRIGSIGN
159   (JMPIFNOT L165)
161   (LOAD&PUSH 4)
162   (CALL1&JMPIF 18 L147)               ; MMINUSP*
165   L165
165   (GETVALUE 22)                       ; $%IARGS
167   (JMPIFNOT L433)
170   (LOAD&PUSH 4)
171   (CONST&PUSH 23)                     ; $%I
172   (CALL2&JMPIFNOT 24 L433)            ; MULTIPLEP
176   (CONST&PUSH 25)                     ; %JACOBI_CN
177   (LIST&PUSH 1)
179   (LOAD&PUSH 5)
180   (CONST&PUSH 23)                     ; $%I
181   (CONST&PUSH 13)                     ; 1
182   (CALL&PUSH 3 26)                    ; COEFF
185   (CONST&PUSH 13)                     ; 1
186   (GETVALUE&PUSH 4)                   ; M
188   (CALL1&PUSH 20)                     ; NEG
190   (CALL2 27)                          ; ADD
192   L192
192   (PUSH)
193   (LIST&PUSH 3)
195   (CALL1 21)                          ; SIMPLIFY
197   (JMP L452)
200   L200
200   (LOAD&PUSH 0)
201   (CONST&PUSH 30)                     ; (2 . 2)
203   (CALL2 31)                          ; SYSTEM::DESTRUCTURING-ERROR
205   (JMP L452)
208   L208
208   (LOAD&PUSH 1)
209   (CONST&PUSH 32)                     ; 4
211   (CALLS2&PUSH 183)                   ; MOD
213   (LOAD 0)
214   (JMPHASH 33 L350 L224 L240 L281 L310)
218   L218
218   (CONST 13)                          ; 1
219   (SKIP 3)
221   (JMP L452)
224   L224
224   (LOAD&PUSH 1)
225   (CALL1&JMPIF 12 L218)               ; ZEROP1
228   (CONST&PUSH 34)                     ; (%JACOBI_NC SIMP)
230   (LOAD&PUSH 2)
231   (GETVALUE 4)                        ; M
233   (JMP L342)
236   L236
236   (CONST 35)                          ; JACOBI_NC
238   (JMP L302)
240   L240
240   (LOAD&PUSH 1)
241   (CALL1&JMPIF 12 L236)               ; ZEROP1
244   (CONST&PUSH 37)                     ; (MTIMES SIMP)
246   (CONST&PUSH 38)                     ; (MEXPT SIMP)
248   (CONST&PUSH 39)                     ; (MPLUS SIMP)
250   (CONST&PUSH 13)                     ; 1
251   (CONST&PUSH 40)                     ; (MTIMES SIMP)
253   (CONST&PUSH 41)                     ; -1
255   (GETVALUE&PUSH 4)                   ; M
257   (LIST&PUSH 3)
259   (LIST&PUSH 3)
261   (CONST 42)                          ; (((RAT SIMP) -1 2))
263   (LIST*&PUSH 2)
265   (CONST&PUSH 43)                     ; (%JACOBI_DS SIMP)
267   (LOAD&PUSH 4)
268   (GETVALUE&PUSH 4)                   ; M
270   (LIST 3)
272   (JMP L290)
274   L274
274   (CONST 41)                          ; -1
276   (SKIP 3)
278   (JMP L452)
281   L281
281   (LOAD&PUSH 1)
282   (CALL1&JMPIF 12 L274)               ; ZEROP1
285   (CONST&PUSH 44)                     ; (%JACOBI_NC)
287   (LOAD&PUSH 2)
288   (GETVALUE 4)                        ; M
290   L290
290   (PUSH)
291   (LIST&PUSH 3)
293   (CALL1 20)                          ; NEG
295   (SKIP 3)
297   (JMP L452)
300   L300
300   (CONST 35)                          ; JACOBI_NC
302   L302
302   (PUSH)
303   (CALL1 36)                          ; DBZ-ERR1
305   (SKIP 3)
307   (JMP L452)
310   L310
310   (LOAD&PUSH 1)
311   (CALL1&JMPIF 12 L300)               ; ZEROP1
314   (CONST&PUSH 45)                     ; (MTIMES SIMP)
316   (CONST&PUSH 46)                     ; (MEXPT SIMP)
318   (CONST&PUSH 47)                     ; (MPLUS SIMP)
320   (CONST&PUSH 13)                     ; 1
321   (CONST&PUSH 48)                     ; (MTIMES SIMP)
323   (CONST&PUSH 41)                     ; -1
325   (GETVALUE&PUSH 4)                   ; M
327   (LIST&PUSH 3)
329   (LIST&PUSH 3)
331   (CONST 49)                          ; (((RAT SIMP) -1 2))
333   (LIST*&PUSH 2)
335   (CONST&PUSH 50)                     ; (%JACOBI_DS SIMP)
337   (LOAD&PUSH 4)
338   (GETVALUE&PUSH 4)                   ; M
340   (LIST 3)
342   L342
342   (PUSH)
343   (LIST 3)
345   (SKIP 3)
347   (JMP L452)
350   L350
350   (CONST&PUSH 51)                     ; TYPE-ERROR
352   (CONST&PUSH 52)                     ; :DATUM
354   (LOAD&PUSH 2)
355   (CONST&PUSH 53)                     ; :EXPECTED-TYPE
357   (CONST&PUSH 54)                     ; (MEMBER 0 1 2 3)
359   (CALL0 55)                          ; SYSTEM::TYPE-ERROR-STRING
361   (PUSH)
362   (CONST&PUSH 56)                     ; (MOD LIN 4)
364   (CONST&PUSH 57)                     ; (0 1 2 3)
366   (CALL2&PUSH 58)                     ; SYSTEM::CASE-ERROR-STRING
368   (LOAD&PUSH 7)
369   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
372   L372
372   (CONST&PUSH 61)                     ; (MEXPT)
374   (CONST&PUSH 62)                     ; (%JACOBI_CN)
376   (LOAD&PUSH 8)
377   (GETVALUE&PUSH 4)                   ; M
379   (LIST&PUSH 3)
381   (CONST 63)                          ; (-1)
383   (LIST* 2)
385   (SKIP 2)
387   (JMP L452)
389   L389
389   (PUSH)
390   (CALLS2&PUSH 71)                    ; LENGTH
392   (CONST&PUSH 29)                     ; 2
393   (CALLSR&JMPIF 1 46 L200)            ; /=
398   (LOAD&CAR&PUSH 0)
400   (LOAD 1)
401   (CDR)
402   (CAR&PUSH)
403   (LOAD&PUSH 1)
404   (CALLS2&JMPIF 12 L208)              ; INTEGERP
408   (GETVALUE&PUSH 59)                  ; |1//2|
410   (LOAD&PUSH 2)
411   (CALL2&JMPIFNOT 60 L418)            ; ALIKE1
414   (LOAD&PUSH 0)
415   (CALL1&JMPIF 12 L372)               ; ZEROP1
418   L418
418   (CONST&PUSH 64)                     ; (%JACOBI_CN)
420   (LOAD&PUSH 7)
421   (GETVALUE&PUSH 4)                   ; M
423   (LIST&PUSH 3)
425   (GETVALUE&PUSH 0)                   ; FORM
427   (CALL2 65)                          ; EQTEST
429   (SKIP 2)
431   (JMP L452)
433   L433
433   (LOAD&PUSH 4)
434   (GETVALUE&PUSH 4)                   ; M
436   (CALL2 28)                          ; KC-ARG2
438   (STORE 0)
439   (JMPIF L389)
441   (CONST&PUSH 66)                     ; (%JACOBI_NC)
443   (LOAD&PUSH 5)
444   (GETVALUE&PUSH 4)                   ; M
446   (LIST&PUSH 3)
448   (GETVALUE&PUSH 0)                   ; FORM
450   (CALL2 65)                          ; EQTEST
452   L452
452   (SKIP 1)
454   (UNBIND1)
455   (SKIP 1)
457   (UNBIND 2)
459   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $JACOBI_ND (U M) ...)-71|
(CONST 0) = $JACOBI_ND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_ND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_ND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_ND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_ND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_ND
8     (SKIP&RET 1)


Disassembly of function $JACOBI_ND
(CONST 0) = M
(CONST 1) = (%JACOBI_ND)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_ND)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_ND SIMP-%JACOBI_ND ...)-72|
(CONST 0) = %JACOBI_ND
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_ND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_ND
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_ND
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_ND (# # #) ...)-73|
(CONST 0) = %JACOBI_ND
(CONST 1) = GRAD
(CONST 2) = 
((U M)
 ((MTIMES) M ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_DN) U M) -2)
  ((%JACOBI_SN) U M))
 ((MTIMES) -1 ((MEXPT) ((%JACOBI_DN) U M) -2)
  ((MPLUS)
   ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
    ((%JACOBI_DN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
   ((MTIMES) ((RAT) -1 2) ((%JACOBI_CN) U M) ((%JACOBI_SN) U M)
    ((MPLUS) U
     ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
      (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M)))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_ND
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# M # # #) (# -1 # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_ND in lines 2183..2244 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_ND (FORM Y Z) ...)-74|
(CONST 0) = SIMP-%JACOBI_ND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_ND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_ND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_ND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_ND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_ND
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_ND
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = DN
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = COMPLEXIFY
(CONST 12) = ZEROP1
(CONST 13) = 1
(CONST 14) = ONEP1
(CONST 15) = (%COSH)
(CONST 16) = $TRIGSIGN
(CONST 17) = MMINUSP*
(CONST 18) = %JACOBI_ND
(CONST 19) = NEG
(CONST 20) = SIMPLIFY
(CONST 21) = $%IARGS
(CONST 22) = $%I
(CONST 23) = MULTIPLEP
(CONST 24) = %JACOBI_CD
(CONST 25) = COEFF
(CONST 26) = ADD
(CONST 27) = KC-ARG2
(CONST 28) = 2
(CONST 29) = (2 . 2)
(CONST 30) = SYSTEM::DESTRUCTURING-ERROR
(CONST 31) = 0
(CONST 32) = (%JACOBI_ND)
(CONST 33) = (MEXPT SIMP)
(CONST 34) = (MPLUS SIMP)
(CONST 35) = (MTIMES SIMP)
(CONST 36) = -1
(CONST 37) = (((RAT SIMP) -1 2))
(CONST 38) = (MTIMES SIMP)
(CONST 39) = (%JACOBI_ND SIMP)
(CONST 40) = (MEXPT SIMP)
(CONST 41) = (MPLUS SIMP)
(CONST 42) = (MTIMES SIMP)
(CONST 43) = (((RAT SIMP) -1 2))
(CONST 44) = TYPE-ERROR
(CONST 45) = :DATUM
(CONST 46) = :EXPECTED-TYPE
(CONST 47) = (MEMBER 0 1)
(CONST 48) = SYSTEM::TYPE-ERROR-STRING
(CONST 49) = (MOD LIN 2)
(CONST 50) = (0 1)
(CONST 51) = SYSTEM::CASE-ERROR-STRING
(CONST 52) = (%JACOBI_ND)
(CONST 53) = EQTEST
(CONST 54) = (%JACOBI_ND)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($%IARGS $TRIGSIGN $NUMER M FORM)
226 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L38)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L127)              ; FLOATP
38    L38
38    (GETVALUE 5)                        ; $NUMER
40    (JMPIFNOT L52)
42    (LOAD&PUSH 4)
43    (CALLS2&JMPIFNOT 8 L52)             ; NUMBERP
46    (GETVALUE&PUSH 4)                   ; M
48    (CALLS2&JMPIF 8 L127)               ; NUMBERP
52    L52
52    (GETVALUE 5)                        ; $NUMER
54    (JMPIFNOT L66)
56    (LOAD&PUSH 4)
57    (CALL1&JMPIFNOT 8 L66)              ; COMPLEX-NUMBER-P
60    (GETVALUE&PUSH 4)                   ; M
62    (CALL1&JMPIF 8 L144)                ; COMPLEX-NUMBER-P
66    L66
66    (LOAD&PUSH 4)
67    (CALL1&JMPIF 12 L178)               ; ZEROP1
71    (GETVALUE&PUSH 4)                   ; M
73    (CALL1&JMPIF 12 L182)               ; ZEROP1
77    (GETVALUE&PUSH 4)                   ; M
79    (CALL1&JMPIF 14 L186)               ; ONEP1
83    (GETVALUE 16)                       ; $TRIGSIGN
85    (JMPIFNOT L92)
87    (LOAD&PUSH 4)
88    (CALL1&JMPIF 17 L193)               ; MMINUSP*
92    L92
92    (GETVALUE 21)                       ; $%IARGS
94    (JMPIFNOT L253)
97    (LOAD&PUSH 4)
98    (CONST&PUSH 22)                     ; $%I
99    (CALL2&JMPIFNOT 23 L253)            ; MULTIPLEP
103   (CONST&PUSH 24)                     ; %JACOBI_CD
104   (LIST&PUSH 1)
106   (LOAD&PUSH 5)
107   (CONST&PUSH 22)                     ; $%I
108   (CONST&PUSH 13)                     ; 1
109   (CALL&PUSH 3 25)                    ; COEFF
112   (CONST&PUSH 13)                     ; 1
113   (GETVALUE&PUSH 4)                   ; M
115   (CALL1&PUSH 19)                     ; NEG
117   (CALL2 26)                          ; ADD
119   L119
119   (PUSH)
120   (LIST&PUSH 3)
122   (CALL1 20)                          ; SIMPLIFY
124   (JMP L382)
127   L127
127   (LOAD&PUSH 4)
128   (CONST&PUSH 6)                      ; 1.0
129   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
131   (GETVALUE&PUSH 4)                   ; M
133   (CONST&PUSH 6)                      ; 1.0
134   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
136   (CALL2&PUSH 7)                      ; DN
138   (CALLSR 0 56)                       ; /
141   (JMP L382)
144   L144
144   (LOAD&PUSH 4)
145   (CALL1&PUSH 9)                      ; $REALPART
147   (LOAD&PUSH 5)
148   (CALL1&PUSH 10)                     ; $IMAGPART
150   (GETVALUE&PUSH 4)                   ; M
152   (CALL1&PUSH 9)                      ; $REALPART
154   (GETVALUE&PUSH 4)                   ; M
156   (CALL1&PUSH 10)                     ; $IMAGPART
158   (LOAD&PUSH 3)
159   (LOAD&PUSH 3)
160   (CALLS2&PUSH 196)                   ; COMPLEX
162   (LOAD&PUSH 2)
163   (LOAD&PUSH 2)
164   (CALLS2&PUSH 196)                   ; COMPLEX
166   (CALL2&PUSH 7)                      ; DN
168   (CALLSR&PUSH 0 56)                  ; /
171   (CALL1 11)                          ; COMPLEXIFY
173   (SKIP 4)
175   (JMP L382)
178   L178
178   (CONST 13)                          ; 1
179   (JMP L382)
182   L182
182   (CONST 13)                          ; 1
183   (JMP L382)
186   L186
186   (CONST&PUSH 15)                     ; (%COSH)
187   (LOAD&PUSH 5)
188   (LIST 2)
190   (JMP L382)
193   L193
193   (CONST&PUSH 18)                     ; %JACOBI_ND
194   (LIST&PUSH 1)
196   (LOAD&PUSH 5)
197   (CALL1&PUSH 19)                     ; NEG
199   (GETVALUE 4)                        ; M
201   (JMP L119)
204   L204
204   (LOAD&PUSH 0)
205   (CONST&PUSH 29)                     ; (2 . 2)
206   (CALL2 30)                          ; SYSTEM::DESTRUCTURING-ERROR
208   (JMP L382)
211   L211
211   (CONST 13)                          ; 1
212   (SKIP 3)
214   (JMP L382)
217   L217
217   (LOAD&PUSH 1)
218   (CALL1&JMPIF 12 L211)               ; ZEROP1
221   (CONST&PUSH 32)                     ; (%JACOBI_ND)
223   (LOAD&PUSH 2)
224   (GETVALUE 4)                        ; M
226   (JMP L327)
229   L229
229   (CONST&PUSH 33)                     ; (MEXPT SIMP)
231   (CONST&PUSH 34)                     ; (MPLUS SIMP)
233   (CONST&PUSH 13)                     ; 1
234   (CONST&PUSH 35)                     ; (MTIMES SIMP)
236   (CONST&PUSH 36)                     ; -1
238   (GETVALUE&PUSH 4)                   ; M
240   (LIST&PUSH 3)
242   (LIST&PUSH 3)
244   (CONST 37)                          ; (((RAT SIMP) -1 2))
246   (LIST* 2)
248   (SKIP 3)
250   (JMP L382)
253   L253
253   (LOAD&PUSH 4)
254   (GETVALUE&PUSH 4)                   ; M
256   (CALL2 27)                          ; KC-ARG2
258   (STORE 0)
259   (JMPIFNOT L371)
262   (PUSH)
263   (CALLS2&PUSH 71)                    ; LENGTH
265   (CONST&PUSH 28)                     ; 2
266   (CALLSR&JMPIF 1 46 L204)            ; /=
271   (LOAD&CAR&PUSH 0)
273   (LOAD 1)
274   (CDR)
275   (CAR&PUSH)
276   (LOAD&PUSH 1)
277   (CALLS2&JMPIFNOT 12 L356)           ; INTEGERP
281   (LOAD&PUSH 1)
282   (CONST&PUSH 28)                     ; 2
283   (CALLS2&PUSH 183)                   ; MOD
285   (LOAD&PUSH 0)
286   (JMPIFEQTO 31 L217)                 ; 0
290   (LOAD&PUSH 0)
291   (JMPIFNOTEQTO 13 L334)              ; 1
294   (LOAD&PUSH 1)
295   (CALL1&JMPIF 12 L229)               ; ZEROP1
299   (CONST&PUSH 38)                     ; (MTIMES SIMP)
301   (CONST&PUSH 39)                     ; (%JACOBI_ND SIMP)
303   (LOAD&PUSH 3)
304   (GETVALUE&PUSH 4)                   ; M
306   (LIST&PUSH 3)
308   (CONST&PUSH 40)                     ; (MEXPT SIMP)
310   (CONST&PUSH 41)                     ; (MPLUS SIMP)
312   (CONST&PUSH 13)                     ; 1
313   (CONST&PUSH 42)                     ; (MTIMES SIMP)
315   (CONST&PUSH 36)                     ; -1
317   (GETVALUE&PUSH 4)                   ; M
319   (LIST&PUSH 3)
321   (LIST&PUSH 3)
323   (CONST 43)                          ; (((RAT SIMP) -1 2))
325   (LIST* 2)
327   L327
327   (PUSH)
328   (LIST 3)
330   (SKIP 3)
332   (JMP L382)
334   L334
334   (CONST&PUSH 44)                     ; TYPE-ERROR
336   (CONST&PUSH 45)                     ; :DATUM
338   (LOAD&PUSH 2)
339   (CONST&PUSH 46)                     ; :EXPECTED-TYPE
341   (CONST&PUSH 47)                     ; (MEMBER 0 1)
343   (CALL0 48)                          ; SYSTEM::TYPE-ERROR-STRING
345   (PUSH)
346   (CONST&PUSH 49)                     ; (MOD LIN 2)
348   (CONST&PUSH 50)                     ; (0 1)
350   (CALL2&PUSH 51)                     ; SYSTEM::CASE-ERROR-STRING
352   (LOAD&PUSH 7)
353   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
356   L356
356   (CONST&PUSH 52)                     ; (%JACOBI_ND)
358   (LOAD&PUSH 7)
359   (GETVALUE&PUSH 4)                   ; M
361   (LIST&PUSH 3)
363   (GETVALUE&PUSH 0)                   ; FORM
365   (CALL2 53)                          ; EQTEST
367   (SKIP 2)
369   (JMP L382)
371   L371
371   (CONST&PUSH 54)                     ; (%JACOBI_ND)
373   (LOAD&PUSH 5)
374   (GETVALUE&PUSH 4)                   ; M
376   (LIST&PUSH 3)
378   (GETVALUE&PUSH 0)                   ; FORM
380   (CALL2 53)                          ; EQTEST
382   L382
382   (SKIP 1)
384   (UNBIND1)
385   (SKIP 1)
387   (UNBIND 2)
389   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $JACOBI_SC (U M) ...)-75|
(CONST 0) = $JACOBI_SC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_SC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_SC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_SC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_SC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_SC
8     (SKIP&RET 1)


Disassembly of function $JACOBI_SC
(CONST 0) = M
(CONST 1) = (%JACOBI_SC)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_SC)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_SC SIMP-%JACOBI_SC ...)-76|
(CONST 0) = %JACOBI_SC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_SC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_SC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_SC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_SC (# # #) ...)-77|
(CONST 0) = %JACOBI_SC
(CONST 1) = GRAD
(CONST 2) = 
((U M) ((MTIMES) ((MEXPT) ((%JACOBI_CN) U M) -2) ((%JACOBI_DN) U M))
 ((MPLUS)
  ((MTIMES) ((MEXPT) ((%JACOBI_CN) U M) -1)
   ((MPLUS)
    ((MTIMES) ((RAT) 1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((MEXPT) ((%JACOBI_CN) U M) 2) ((%JACOBI_SN) U M))
    ((MTIMES) ((RAT) 1 2) ((MEXPT) M -1) ((%JACOBI_CN) U M) ((%JACOBI_DN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))
  ((MTIMES) -1 ((MEXPT) ((%JACOBI_CN) U M) -2) ((%JACOBI_SN) U M)
   ((MPLUS)
    ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
    ((MTIMES) ((RAT) -1 2) ((MEXPT) M -1) ((%JACOBI_DN) U M) ((%JACOBI_SN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_SC
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_SC in lines 2288..2356 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_SC (FORM Y Z) ...)-78|
(CONST 0) = SIMP-%JACOBI_SC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_SC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_SC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_SC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_SC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_SC
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_SC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = SN
(CONST 8) = CN
(CONST 9) = COMPLEX-NUMBER-P
(CONST 10) = $REALPART
(CONST 11) = $IMAGPART
(CONST 12) = COMPLEXIFY
(CONST 13) = ZEROP1
(CONST 14) = 0
(CONST 15) = (%TAN)
(CONST 16) = ONEP1
(CONST 17) = (%SINH)
(CONST 18) = $TRIGSIGN
(CONST 19) = MMINUSP*
(CONST 20) = %JACOBI_SC
(CONST 21) = NEG
(CONST 22) = SIMPLIFY
(CONST 23) = $%IARGS
(CONST 24) = $%I
(CONST 25) = MULTIPLEP
(CONST 26) = %JACOBI_SN
(CONST 27) = 1
(CONST 28) = COEFF
(CONST 29) = ADD
(CONST 30) = MUL
(CONST 31) = KC-ARG2
(CONST 32) = 2
(CONST 33) = (2 . 2)
(CONST 34) = SYSTEM::DESTRUCTURING-ERROR
(CONST 35) = (%JACOBI_SC SIMP)
(CONST 36) = JACOBI_SC
(CONST 37) = DBZ-ERR1
(CONST 38) = (MTIMES SIMP)
(CONST 39) = -1
(CONST 40) = (MEXPT SIMP)
(CONST 41) = (MPLUS SIMP)
(CONST 42) = (MTIMES SIMP)
(CONST 43) = (((RAT SIMP) -1 2))
(CONST 44) = (%JACOBI_CS SIMP)
(CONST 45) = TYPE-ERROR
(CONST 46) = :DATUM
(CONST 47) = :EXPECTED-TYPE
(CONST 48) = (MEMBER 0 1)
(CONST 49) = SYSTEM::TYPE-ERROR-STRING
(CONST 50) = (MOD LIN 2)
(CONST 51) = (0 1)
(CONST 52) = SYSTEM::CASE-ERROR-STRING
(CONST 53) = |1//2|
(CONST 54) = ALIKE1
(CONST 55) = (MEXPT SIMP)
(CONST 56) = (MPLUS SIMP)
(CONST 57) = (MTIMES SIMP)
(CONST 58) = (((RAT SIMP) 1 4))
(CONST 59) = (%JACOBI_SC)
(CONST 60) = EQTEST
(CONST 61) = (%JACOBI_SC)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($%IARGS $TRIGSIGN |1//2| $NUMER M FORM)
257 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L37)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L88)               ; FLOATP
37    L37
37    (GETVALUE 5)                        ; $NUMER
39    (JMPIFNOT L50)
41    (LOAD&PUSH 4)
42    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
45    (GETVALUE&PUSH 4)                   ; M
47    (CALLS2&JMPIF 8 L88)                ; NUMBERP
50    L50
50    (GETVALUE 5)                        ; $NUMER
52    (JMPIFNOT L63)
54    (LOAD&PUSH 4)
55    (CALL1&JMPIFNOT 9 L63)              ; COMPLEX-NUMBER-P
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 9 L113)                ; COMPLEX-NUMBER-P
63    L63
63    (LOAD&PUSH 4)
64    (CALL1&JMPIF 13 L157)               ; ZEROP1
68    (GETVALUE&PUSH 4)                   ; M
70    (CALL1&JMPIF 13 L161)               ; ZEROP1
74    (GETVALUE&PUSH 4)                   ; M
76    (CALL1&JMPIFNOT 16 L394)            ; ONEP1
80    (CONST 17)                          ; (%SINH)
81    L81
81    (PUSH)
82    (LOAD&PUSH 5)
83    (LIST 2)
85    (JMP L433)
88    L88
88    (LOAD&PUSH 4)
89    (CONST&PUSH 6)                      ; 1.0
90    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
92    (GETVALUE&PUSH 4)                   ; M
94    (CONST&PUSH 6)                      ; 1.0
95    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
97    (LOAD&PUSH 1)
98    (LOAD&PUSH 1)
99    (CALL2&PUSH 7)                      ; SN
101   (LOAD&PUSH 2)
102   (LOAD&PUSH 2)
103   (CALL2&PUSH 8)                      ; CN
105   (CALLSR 1 56)                       ; /
108   (SKIP 2)
110   (JMP L433)
113   L113
113   (LOAD&PUSH 4)
114   (CALL1&PUSH 10)                     ; $REALPART
116   (LOAD&PUSH 5)
117   (CALL1&PUSH 11)                     ; $IMAGPART
119   (GETVALUE&PUSH 4)                   ; M
121   (CALL1&PUSH 10)                     ; $REALPART
123   (GETVALUE&PUSH 4)                   ; M
125   (CALL1&PUSH 11)                     ; $IMAGPART
127   (LOAD&PUSH 3)
128   (LOAD&PUSH 3)
129   (CALLS2&PUSH 196)                   ; COMPLEX
131   (LOAD&PUSH 2)
132   (LOAD&PUSH 2)
133   (CALLS2&PUSH 196)                   ; COMPLEX
135   (CALL2&PUSH 7)                      ; SN
137   (LOAD&PUSH 4)
138   (LOAD&PUSH 4)
139   (CALLS2&PUSH 196)                   ; COMPLEX
141   (LOAD&PUSH 3)
142   (LOAD&PUSH 3)
143   (CALLS2&PUSH 196)                   ; COMPLEX
145   (CALL2&PUSH 8)                      ; CN
147   (CALLSR&PUSH 1 56)                  ; /
150   (CALL1 12)                          ; COMPLEXIFY
152   (SKIP 4)
154   (JMP L433)
157   L157
157   (CONST 14)                          ; 0
158   (JMP L433)
161   L161
161   (CONST 15)                          ; (%TAN)
162   (JMP L81)
165   L165
165   (CONST&PUSH 20)                     ; %JACOBI_SC
166   (LIST&PUSH 1)
168   (LOAD&PUSH 5)
169   (CALL1&PUSH 21)                     ; NEG
171   (GETVALUE&PUSH 4)                   ; M
173   (LIST&PUSH 3)
175   (CALL1&PUSH 22)                     ; SIMPLIFY
177   (CALL1 21)                          ; NEG
179   (JMP L433)
182   L182
182   (CONST&PUSH 24)                     ; $%I
183   (CONST&PUSH 26)                     ; %JACOBI_SN
184   (LIST&PUSH 1)
186   (LOAD&PUSH 6)
187   (CONST&PUSH 24)                     ; $%I
188   (CONST&PUSH 27)                     ; 1
189   (CALL&PUSH 3 28)                    ; COEFF
192   (CONST&PUSH 27)                     ; 1
193   (GETVALUE&PUSH 4)                   ; M
195   (CALL1&PUSH 21)                     ; NEG
197   (CALL2&PUSH 29)                     ; ADD
199   (LIST&PUSH 3)
201   (CALL1&PUSH 22)                     ; SIMPLIFY
203   (CALL2 30)                          ; MUL
205   (JMP L433)
208   L208
208   (LOAD&PUSH 0)
209   (CONST&PUSH 33)                     ; (2 . 2)
211   (CALL2 34)                          ; SYSTEM::DESTRUCTURING-ERROR
213   (JMP L433)
216   L216
216   (CONST 27)                          ; 1
218   (SKIP 3)
220   (JMP L433)
223   L223
223   (LOAD&PUSH 1)
224   (CALL1&JMPIF 13 L216)               ; ZEROP1
227   (CONST&PUSH 35)                     ; (%JACOBI_SC SIMP)
229   (LOAD&PUSH 2)
230   (GETVALUE&PUSH 4)                   ; M
232   (LIST 3)
234   (SKIP 3)
236   (JMP L433)
239   L239
239   (CONST&PUSH 36)                     ; JACOBI_SC
241   (CALL1 37)                          ; DBZ-ERR1
243   (SKIP 3)
245   (JMP L433)
248   L248
248   (LOAD&PUSH 1)
249   (CALL1&JMPIF 13 L239)               ; ZEROP1
252   (CONST&PUSH 38)                     ; (MTIMES SIMP)
254   (CONST&PUSH 39)                     ; -1
256   (CONST&PUSH 40)                     ; (MEXPT SIMP)
258   (CONST&PUSH 41)                     ; (MPLUS SIMP)
260   (CONST&PUSH 27)                     ; 1
261   (CONST&PUSH 42)                     ; (MTIMES SIMP)
263   (CONST&PUSH 39)                     ; -1
265   (GETVALUE&PUSH 4)                   ; M
267   (LIST&PUSH 3)
269   (LIST&PUSH 3)
271   (CONST 43)                          ; (((RAT SIMP) -1 2))
273   (LIST*&PUSH 2)
275   (CONST&PUSH 44)                     ; (%JACOBI_CS SIMP)
277   (LOAD&PUSH 5)
278   (GETVALUE&PUSH 4)                   ; M
280   (LIST&PUSH 3)
282   (LIST 4)
284   (SKIP 3)
286   (JMP L433)
289   L289
289   (LOAD&PUSH 1)
290   (CONST&PUSH 32)                     ; 2
292   (CALLS2&PUSH 183)                   ; MOD
294   (LOAD&PUSH 0)
295   (JMPIFEQTO 14 L223)                 ; 0
299   (LOAD&PUSH 0)
300   (JMPIFEQTO 27 L248)                 ; 1
303   (CONST&PUSH 45)                     ; TYPE-ERROR
305   (CONST&PUSH 46)                     ; :DATUM
307   (LOAD&PUSH 2)
308   (CONST&PUSH 47)                     ; :EXPECTED-TYPE
310   (CONST&PUSH 48)                     ; (MEMBER 0 1)
312   (CALL0 49)                          ; SYSTEM::TYPE-ERROR-STRING
314   (PUSH)
315   (CONST&PUSH 50)                     ; (MOD LIN 2)
317   (CONST&PUSH 51)                     ; (0 1)
319   (CALL2&PUSH 52)                     ; SYSTEM::CASE-ERROR-STRING
321   (LOAD&PUSH 7)
322   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
325   L325
325   (CONST&PUSH 55)                     ; (MEXPT SIMP)
327   (CONST&PUSH 56)                     ; (MPLUS SIMP)
329   (CONST&PUSH 27)                     ; 1
330   (CONST&PUSH 57)                     ; (MTIMES SIMP)
332   (CONST&PUSH 39)                     ; -1
334   (GETVALUE&PUSH 4)                   ; M
336   (LIST&PUSH 3)
338   (LIST&PUSH 3)
340   (CONST 58)                          ; (((RAT SIMP) 1 4))
342   (LIST* 2)
344   (SKIP 2)
346   (JMP L433)
349   L349
349   (PUSH)
350   (CALLS2&PUSH 71)                    ; LENGTH
352   (CONST&PUSH 32)                     ; 2
354   (CALLSR&JMPIF 1 46 L208)            ; /=
359   (LOAD&CAR&PUSH 0)
361   (LOAD 1)
362   (CDR)
363   (CAR&PUSH)
364   (LOAD&PUSH 1)
365   (CALLS2&JMPIF 12 L289)              ; INTEGERP
369   (LOAD&PUSH 1)
370   (GETVALUE&PUSH 53)                  ; |1//2|
372   (CALL2&JMPIFNOT 54 L379)            ; ALIKE1
375   (LOAD&PUSH 0)
376   (CALL1&JMPIF 13 L325)               ; ZEROP1
379   L379
379   (CONST&PUSH 59)                     ; (%JACOBI_SC)
381   (LOAD&PUSH 7)
382   (GETVALUE&PUSH 4)                   ; M
384   (LIST&PUSH 3)
386   (GETVALUE&PUSH 0)                   ; FORM
388   (CALL2 60)                          ; EQTEST
390   (SKIP 2)
392   (JMP L433)
394   L394
394   (GETVALUE 18)                       ; $TRIGSIGN
396   (JMPIFNOT L403)
398   (LOAD&PUSH 4)
399   (CALL1&JMPIF 19 L165)               ; MMINUSP*
403   L403
403   (GETVALUE 23)                       ; $%IARGS
405   (JMPIFNOT L413)
407   (LOAD&PUSH 4)
408   (CONST&PUSH 24)                     ; $%I
409   (CALL2&JMPIF 25 L182)               ; MULTIPLEP
413   L413
413   (LOAD&PUSH 4)
414   (GETVALUE&PUSH 4)                   ; M
416   (CALL2 31)                          ; KC-ARG2
418   (STORE 0)
419   (JMPIF L349)
422   (CONST&PUSH 61)                     ; (%JACOBI_SC)
424   (LOAD&PUSH 5)
425   (GETVALUE&PUSH 4)                   ; M
427   (LIST&PUSH 3)
429   (GETVALUE&PUSH 0)                   ; FORM
431   (CALL2 60)                          ; EQTEST
433   L433
433   (SKIP 1)
435   (UNBIND1)
436   (SKIP 1)
438   (UNBIND 2)
440   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $JACOBI_SD (U M) ...)-79|
(CONST 0) = $JACOBI_SD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_SD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_SD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_SD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_SD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_SD
8     (SKIP&RET 1)


Disassembly of function $JACOBI_SD
(CONST 0) = M
(CONST 1) = (%JACOBI_SD)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_SD)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_SD SIMP-%JACOBI_SD ...)-80|
(CONST 0) = %JACOBI_SD
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_SD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_SD
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_SD
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_SD (# # #) ...)-81|
(CONST 0) = %JACOBI_SD
(CONST 1) = GRAD
(CONST 2) = 
((U M) ((MTIMES) ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_DN) U M) -2))
 ((MPLUS)
  ((MTIMES) ((MEXPT) ((%JACOBI_DN) U M) -1)
   ((MPLUS)
    ((MTIMES) ((RAT) 1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((MEXPT) ((%JACOBI_CN) U M) 2) ((%JACOBI_SN) U M))
    ((MTIMES) ((RAT) 1 2) ((MEXPT) M -1) ((%JACOBI_CN) U M) ((%JACOBI_DN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))
  ((MTIMES) -1 ((MEXPT) ((%JACOBI_DN) U M) -2) ((%JACOBI_SN) U M)
   ((MPLUS)
    ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((%JACOBI_DN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
    ((MTIMES) ((RAT) -1 2) ((%JACOBI_CN) U M) ((%JACOBI_SN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_SD
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_SD in lines 2400..2494 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_SD (FORM Y Z) ...)-82|
(CONST 0) = SIMP-%JACOBI_SD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_SD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_SD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_SD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_SD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_SD
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_SD
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = SN
(CONST 8) = DN
(CONST 9) = COMPLEX-NUMBER-P
(CONST 10) = $REALPART
(CONST 11) = $IMAGPART
(CONST 12) = COMPLEXIFY
(CONST 13) = ZEROP1
(CONST 14) = 0
(CONST 15) = (%SIN)
(CONST 16) = ONEP1
(CONST 17) = (%SINH)
(CONST 18) = $TRIGSIGN
(CONST 19) = MMINUSP*
(CONST 20) = %JACOBI_SD
(CONST 21) = NEG
(CONST 22) = SIMPLIFY
(CONST 23) = $%IARGS
(CONST 24) = $%I
(CONST 25) = MULTIPLEP
(CONST 26) = 1
(CONST 27) = COEFF
(CONST 28) = ADD
(CONST 29) = MUL
(CONST 30) = KC-ARG2
(CONST 31) = 2
(CONST 32) = (2 . 2)
(CONST 33) = SYSTEM::DESTRUCTURING-ERROR
(CONST 34) = 4
(CONST 35) = #S(HASH-TABLE EQ (3 . 121) (2 . 89) (1 . 43) (0 . 8))
(CONST 36) = (%JACOBI_SD SIMP)
(CONST 37) = (MEXPT)
(CONST 38) = (MPLUS)
(CONST 39) = (MTIMES)
(CONST 40) = -1
(CONST 41) = (((RAT) -1 2))
(CONST 42) = (MTIMES SIMP)
(CONST 43) = (MEXPT SIMP)
(CONST 44) = (MPLUS SIMP)
(CONST 45) = (MTIMES SIMP)
(CONST 46) = (((RAT SIMP) -1 2))
(CONST 47) = (%JACOBI_CN SIMP)
(CONST 48) = (%JACOBI_SD)
(CONST 49) = (MEXPT)
(CONST 50) = (MPLUS SIMP)
(CONST 51) = (MTIMES SIMP)
(CONST 52) = (((RAT) -1 2))
(CONST 53) = (MTIMES SIMP)
(CONST 54) = (MEXPT SIMP)
(CONST 55) = (MPLUS SIMP)
(CONST 56) = (MTIMES SIMP)
(CONST 57) = (((RAT SIMP) -1 2))
(CONST 58) = (%JACOBI_CN SIMP)
(CONST 59) = TYPE-ERROR
(CONST 60) = :DATUM
(CONST 61) = :EXPECTED-TYPE
(CONST 62) = (MEMBER 0 1 2 3)
(CONST 63) = SYSTEM::TYPE-ERROR-STRING
(CONST 64) = (MOD LIN 4)
(CONST 65) = (0 1 2 3)
(CONST 66) = SYSTEM::CASE-ERROR-STRING
(CONST 67) = |1//2|
(CONST 68) = ALIKE1
(CONST 69) = (MTIMES)
(CONST 70) = (%JACOBI_SN)
(CONST 71) = (MTIMES)
(CONST 72) = ((RAT) 1 2)
(CONST 73) = (%ELLIPTIC_KC)
(CONST 74) = (MEXPT)
(CONST 75) = (%JACOBI_DN)
(CONST 76) = (MTIMES)
(CONST 77) = ((RAT) 1 2)
(CONST 78) = (%ELLIPTIC_KC)
(CONST 79) = (-1)
(CONST 80) = (%JACOBI_SD)
(CONST 81) = EQTEST
(CONST 82) = (%JACOBI_SD)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($%IARGS $TRIGSIGN |1//2| $NUMER M FORM)
325 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L37)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L88)               ; FLOATP
37    L37
37    (GETVALUE 5)                        ; $NUMER
39    (JMPIFNOT L50)
41    (LOAD&PUSH 4)
42    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
45    (GETVALUE&PUSH 4)                   ; M
47    (CALLS2&JMPIF 8 L88)                ; NUMBERP
50    L50
50    (GETVALUE 5)                        ; $NUMER
52    (JMPIFNOT L63)
54    (LOAD&PUSH 4)
55    (CALL1&JMPIFNOT 9 L63)              ; COMPLEX-NUMBER-P
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 9 L113)                ; COMPLEX-NUMBER-P
63    L63
63    (LOAD&PUSH 4)
64    (CALL1&JMPIF 13 L157)               ; ZEROP1
68    (GETVALUE&PUSH 4)                   ; M
70    (CALL1&JMPIF 13 L161)               ; ZEROP1
74    (GETVALUE&PUSH 4)                   ; M
76    (CALL1&JMPIFNOT 16 L507)            ; ONEP1
80    (CONST 17)                          ; (%SINH)
81    L81
81    (PUSH)
82    (LOAD&PUSH 5)
83    (LIST 2)
85    (JMP L546)
88    L88
88    (LOAD&PUSH 4)
89    (CONST&PUSH 6)                      ; 1.0
90    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
92    (GETVALUE&PUSH 4)                   ; M
94    (CONST&PUSH 6)                      ; 1.0
95    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
97    (LOAD&PUSH 1)
98    (LOAD&PUSH 1)
99    (CALL2&PUSH 7)                      ; SN
101   (LOAD&PUSH 2)
102   (LOAD&PUSH 2)
103   (CALL2&PUSH 8)                      ; DN
105   (CALLSR 1 56)                       ; /
108   (SKIP 2)
110   (JMP L546)
113   L113
113   (LOAD&PUSH 4)
114   (CALL1&PUSH 10)                     ; $REALPART
116   (LOAD&PUSH 5)
117   (CALL1&PUSH 11)                     ; $IMAGPART
119   (GETVALUE&PUSH 4)                   ; M
121   (CALL1&PUSH 10)                     ; $REALPART
123   (GETVALUE&PUSH 4)                   ; M
125   (CALL1&PUSH 11)                     ; $IMAGPART
127   (LOAD&PUSH 3)
128   (LOAD&PUSH 3)
129   (CALLS2&PUSH 196)                   ; COMPLEX
131   (LOAD&PUSH 2)
132   (LOAD&PUSH 2)
133   (CALLS2&PUSH 196)                   ; COMPLEX
135   (CALL2&PUSH 7)                      ; SN
137   (LOAD&PUSH 4)
138   (LOAD&PUSH 4)
139   (CALLS2&PUSH 196)                   ; COMPLEX
141   (LOAD&PUSH 3)
142   (LOAD&PUSH 3)
143   (CALLS2&PUSH 196)                   ; COMPLEX
145   (CALL2&PUSH 8)                      ; DN
147   (CALLSR&PUSH 1 56)                  ; /
150   (CALL1 12)                          ; COMPLEXIFY
152   (SKIP 4)
154   (JMP L546)
157   L157
157   (CONST 14)                          ; 0
158   (JMP L546)
161   L161
161   (CONST 15)                          ; (%SIN)
162   (JMP L81)
165   L165
165   (CONST&PUSH 20)                     ; %JACOBI_SD
166   (LIST&PUSH 1)
168   (LOAD&PUSH 5)
169   (CALL1&PUSH 21)                     ; NEG
171   (GETVALUE&PUSH 4)                   ; M
173   (LIST&PUSH 3)
175   (CALL1&PUSH 22)                     ; SIMPLIFY
177   (CALL1 21)                          ; NEG
179   (JMP L546)
182   L182
182   (CONST&PUSH 24)                     ; $%I
183   (CONST&PUSH 20)                     ; %JACOBI_SD
184   (LIST&PUSH 1)
186   (LOAD&PUSH 6)
187   (CONST&PUSH 24)                     ; $%I
188   (CONST&PUSH 26)                     ; 1
189   (CALL&PUSH 3 27)                    ; COEFF
192   (CONST&PUSH 26)                     ; 1
193   (GETVALUE&PUSH 4)                   ; M
195   (CALL1&PUSH 21)                     ; NEG
197   (CALL2&PUSH 28)                     ; ADD
199   (LIST&PUSH 3)
201   (CALL1&PUSH 22)                     ; SIMPLIFY
203   (CALL2 29)                          ; MUL
205   (JMP L546)
208   L208
208   (LOAD&PUSH 0)
209   (CONST&PUSH 32)                     ; (2 . 2)
211   (CALL2 33)                          ; SYSTEM::DESTRUCTURING-ERROR
213   (JMP L546)
216   L216
216   (LOAD&PUSH 1)
217   (CONST&PUSH 34)                     ; 4
219   (CALLS2&PUSH 183)                   ; MOD
221   (LOAD 0)
222   (JMPHASH 35 L388 L232 L267 L313 L345)
226   L226
226   (CONST 14)                          ; 0
227   (SKIP 3)
229   (JMP L546)
232   L232
232   (LOAD&PUSH 1)
233   (CALL1&JMPIF 13 L226)               ; ZEROP1
236   (CONST&PUSH 36)                     ; (%JACOBI_SD SIMP)
238   (LOAD&PUSH 2)
239   (GETVALUE 4)                        ; M
241   (JMP L299)
243   L243
243   (CONST&PUSH 37)                     ; (MEXPT)
245   (CONST&PUSH 38)                     ; (MPLUS)
247   (CONST&PUSH 26)                     ; 1
248   (CONST&PUSH 39)                     ; (MTIMES)
250   (CONST&PUSH 40)                     ; -1
252   (GETVALUE&PUSH 4)                   ; M
254   (LIST&PUSH 3)
256   (LIST&PUSH 3)
258   (CONST 41)                          ; (((RAT) -1 2))
260   (LIST* 2)
262   (SKIP 3)
264   (JMP L546)
267   L267
267   (LOAD&PUSH 1)
268   (CALL1&JMPIF 13 L243)               ; ZEROP1
271   (CONST&PUSH 42)                     ; (MTIMES SIMP)
273   (CONST&PUSH 43)                     ; (MEXPT SIMP)
275   (CONST&PUSH 44)                     ; (MPLUS SIMP)
277   (CONST&PUSH 26)                     ; 1
278   (CONST&PUSH 45)                     ; (MTIMES SIMP)
280   (CONST&PUSH 40)                     ; -1
282   (GETVALUE&PUSH 4)                   ; M
284   (LIST&PUSH 3)
286   (LIST&PUSH 3)
288   (CONST 46)                          ; (((RAT SIMP) -1 2))
290   (LIST*&PUSH 2)
292   (CONST&PUSH 47)                     ; (%JACOBI_CN SIMP)
294   (LOAD&PUSH 4)
295   (GETVALUE&PUSH 4)                   ; M
297   (LIST 3)
299   L299
299   (PUSH)
300   (LIST 3)
302   (SKIP 3)
304   (JMP L546)
307   L307
307   (CONST 14)                          ; 0
308   (SKIP 3)
310   (JMP L546)
313   L313
313   (LOAD&PUSH 1)
314   (CALL1&JMPIF 13 L307)               ; ZEROP1
317   (CONST&PUSH 48)                     ; (%JACOBI_SD)
319   (LOAD&PUSH 2)
320   (GETVALUE 4)                        ; M
322   (JMP L377)
324   L324
324   (CONST&PUSH 49)                     ; (MEXPT)
326   (CONST&PUSH 50)                     ; (MPLUS SIMP)
328   (CONST&PUSH 26)                     ; 1
329   (CONST&PUSH 51)                     ; (MTIMES SIMP)
331   (CONST&PUSH 40)                     ; -1
333   (GETVALUE&PUSH 4)                   ; M
335   (LIST&PUSH 3)
337   (LIST&PUSH 3)
339   (CONST 52)                          ; (((RAT) -1 2))
341   (LIST* 2)
343   (JMP L380)
345   L345
345   (LOAD&PUSH 1)
346   (CALL1&JMPIF 13 L324)               ; ZEROP1
349   (CONST&PUSH 53)                     ; (MTIMES SIMP)
351   (CONST&PUSH 54)                     ; (MEXPT SIMP)
353   (CONST&PUSH 55)                     ; (MPLUS SIMP)
355   (CONST&PUSH 26)                     ; 1
356   (CONST&PUSH 56)                     ; (MTIMES SIMP)
358   (CONST&PUSH 40)                     ; -1
360   (GETVALUE&PUSH 4)                   ; M
362   (LIST&PUSH 3)
364   (LIST&PUSH 3)
366   (CONST 57)                          ; (((RAT SIMP) -1 2))
368   (LIST*&PUSH 2)
370   (CONST&PUSH 58)                     ; (%JACOBI_CN SIMP)
372   (LOAD&PUSH 4)
373   (GETVALUE&PUSH 4)                   ; M
375   (LIST 3)
377   L377
377   (PUSH)
378   (LIST 3)
380   L380
380   (PUSH)
381   (CALL1 21)                          ; NEG
383   (SKIP 3)
385   (JMP L546)
388   L388
388   (CONST&PUSH 59)                     ; TYPE-ERROR
390   (CONST&PUSH 60)                     ; :DATUM
392   (LOAD&PUSH 2)
393   (CONST&PUSH 61)                     ; :EXPECTED-TYPE
395   (CONST&PUSH 62)                     ; (MEMBER 0 1 2 3)
397   (CALL0 63)                          ; SYSTEM::TYPE-ERROR-STRING
399   (PUSH)
400   (CONST&PUSH 64)                     ; (MOD LIN 4)
402   (CONST&PUSH 65)                     ; (0 1 2 3)
404   (CALL2&PUSH 66)                     ; SYSTEM::CASE-ERROR-STRING
406   (LOAD&PUSH 7)
407   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
410   L410
410   (CONST&PUSH 69)                     ; (MTIMES)
412   (CONST&PUSH 70)                     ; (%JACOBI_SN)
414   (CONST&PUSH 71)                     ; (MTIMES)
416   (CONST&PUSH 72)                     ; ((RAT) 1 2)
418   (CONST&PUSH 73)                     ; (%ELLIPTIC_KC)
420   (GETVALUE&PUSH 4)                   ; M
422   (LIST&PUSH 2)
424   (LIST&PUSH 3)
426   (GETVALUE&PUSH 4)                   ; M
428   (LIST&PUSH 3)
430   (CONST&PUSH 74)                     ; (MEXPT)
432   (CONST&PUSH 75)                     ; (%JACOBI_DN)
434   (CONST&PUSH 76)                     ; (MTIMES)
436   (CONST&PUSH 77)                     ; ((RAT) 1 2)
438   (CONST&PUSH 78)                     ; (%ELLIPTIC_KC)
440   (GETVALUE&PUSH 4)                   ; M
442   (LIST&PUSH 2)
444   (LIST&PUSH 3)
446   (GETVALUE&PUSH 4)                   ; M
448   (LIST&PUSH 3)
450   (CONST 79)                          ; (-1)
452   (LIST*&PUSH 2)
454   (LIST 3)
456   (SKIP 2)
458   (JMP L546)
461   L461
461   (PUSH)
462   (CALLS2&PUSH 71)                    ; LENGTH
464   (CONST&PUSH 31)                     ; 2
466   (CALLSR&JMPIF 1 46 L208)            ; /=
471   (LOAD&CAR&PUSH 0)
473   (LOAD 1)
474   (CDR)
475   (CAR&PUSH)
476   (LOAD&PUSH 1)
477   (CALLS2&JMPIF 12 L216)              ; INTEGERP
481   (LOAD&PUSH 1)
482   (GETVALUE&PUSH 67)                  ; |1//2|
484   (CALL2&JMPIFNOT 68 L492)            ; ALIKE1
487   (LOAD&PUSH 0)
488   (CALL1&JMPIF 13 L410)               ; ZEROP1
492   L492
492   (CONST&PUSH 80)                     ; (%JACOBI_SD)
494   (LOAD&PUSH 7)
495   (GETVALUE&PUSH 4)                   ; M
497   (LIST&PUSH 3)
499   (GETVALUE&PUSH 0)                   ; FORM
501   (CALL2 81)                          ; EQTEST
503   (SKIP 2)
505   (JMP L546)
507   L507
507   (GETVALUE 18)                       ; $TRIGSIGN
509   (JMPIFNOT L516)
511   (LOAD&PUSH 4)
512   (CALL1&JMPIF 19 L165)               ; MMINUSP*
516   L516
516   (GETVALUE 23)                       ; $%IARGS
518   (JMPIFNOT L526)
520   (LOAD&PUSH 4)
521   (CONST&PUSH 24)                     ; $%I
522   (CALL2&JMPIF 25 L182)               ; MULTIPLEP
526   L526
526   (LOAD&PUSH 4)
527   (GETVALUE&PUSH 4)                   ; M
529   (CALL2 30)                          ; KC-ARG2
531   (STORE 0)
532   (JMPIF L461)
535   (CONST&PUSH 82)                     ; (%JACOBI_SD)
537   (LOAD&PUSH 5)
538   (GETVALUE&PUSH 4)                   ; M
540   (LIST&PUSH 3)
542   (GETVALUE&PUSH 0)                   ; FORM
544   (CALL2 81)                          ; EQTEST
546   L546
546   (SKIP 1)
548   (UNBIND1)
549   (SKIP 1)
551   (UNBIND 2)
553   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $JACOBI_CS (U M) ...)-83|
(CONST 0) = $JACOBI_CS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_CS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_CS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_CS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_CS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_CS
8     (SKIP&RET 1)


Disassembly of function $JACOBI_CS
(CONST 0) = M
(CONST 1) = (%JACOBI_CS)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_CS)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_CS SIMP-%JACOBI_CS ...)-84|
(CONST 0) = %JACOBI_CS
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_CS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_CS
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_CS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_CS (# # #) ...)-85|
(CONST 0) = %JACOBI_CS
(CONST 1) = GRAD
(CONST 2) = 
((U M) ((MTIMES) -1 ((%JACOBI_DN) U M) ((MEXPT) ((%JACOBI_SN) U M) -2))
 ((MPLUS)
  ((MTIMES) -1 ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_SN) U M) -2)
   ((MPLUS)
    ((MTIMES) ((RAT) 1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((MEXPT) ((%JACOBI_CN) U M) 2) ((%JACOBI_SN) U M))
    ((MTIMES) ((RAT) 1 2) ((MEXPT) M -1) ((%JACOBI_CN) U M) ((%JACOBI_DN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))
  ((MTIMES) ((MEXPT) ((%JACOBI_SN) U M) -1)
   ((MPLUS)
    ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
    ((MTIMES) ((RAT) -1 2) ((MEXPT) M -1) ((%JACOBI_DN) U M) ((%JACOBI_SN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_CS
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# -1 # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_CS in lines 2538..2608 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_CS (FORM Y Z) ...)-86|
(CONST 0) = SIMP-%JACOBI_CS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_CS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_CS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_CS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_CS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_CS
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_CS
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = CN
(CONST 8) = SN
(CONST 9) = COMPLEX-NUMBER-P
(CONST 10) = $REALPART
(CONST 11) = $IMAGPART
(CONST 12) = COMPLEXIFY
(CONST 13) = ZEROP1
(CONST 14) = ($COT)
(CONST 15) = ONEP1
(CONST 16) = ($CSCH)
(CONST 17) = JACOBI_CS
(CONST 18) = DBZ-ERR1
(CONST 19) = $TRIGSIGN
(CONST 20) = MMINUSP*
(CONST 21) = %JACOBI_CS
(CONST 22) = NEG
(CONST 23) = SIMPLIFY
(CONST 24) = $%IARGS
(CONST 25) = $%I
(CONST 26) = MULTIPLEP
(CONST 27) = %JACOBI_NS
(CONST 28) = 1
(CONST 29) = COEFF
(CONST 30) = ADD
(CONST 31) = MUL
(CONST 32) = KC-ARG2
(CONST 33) = 2
(CONST 34) = (2 . 2)
(CONST 35) = SYSTEM::DESTRUCTURING-ERROR
(CONST 36) = 0
(CONST 37) = (%JACOBI_CS SIMP)
(CONST 38) = (MTIMES SIMP)
(CONST 39) = -1
(CONST 40) = (MEXPT SIMP)
(CONST 41) = (MPLUS SIMP)
(CONST 42) = (MTIMES SIMP)
(CONST 43) = (((RAT SIMP) 1 2))
(CONST 44) = (%JACOBI_SC SIMP)
(CONST 45) = TYPE-ERROR
(CONST 46) = :DATUM
(CONST 47) = :EXPECTED-TYPE
(CONST 48) = (MEMBER 0 1)
(CONST 49) = SYSTEM::TYPE-ERROR-STRING
(CONST 50) = (MOD LIN 2)
(CONST 51) = (0 1)
(CONST 52) = SYSTEM::CASE-ERROR-STRING
(CONST 53) = |1//2|
(CONST 54) = ALIKE1
(CONST 55) = (MEXPT)
(CONST 56) = (%JACOBI_SC)
(CONST 57) = (MTIMES)
(CONST 58) = ((RAT) 1 2)
(CONST 59) = (%ELLIPTIC_KC)
(CONST 60) = (-1)
(CONST 61) = (%JACOBI_CS SIMP)
(CONST 62) = EQTEST
(CONST 63) = (%JACOBI_CS SIMP)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| $%IARGS $TRIGSIGN $NUMER M FORM)
261 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L37)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L83)               ; FLOATP
37    L37
37    (GETVALUE 5)                        ; $NUMER
39    (JMPIFNOT L50)
41    (LOAD&PUSH 4)
42    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
45    (GETVALUE&PUSH 4)                   ; M
47    (CALLS2&JMPIF 8 L83)                ; NUMBERP
50    L50
50    (GETVALUE 5)                        ; $NUMER
52    (JMPIFNOT L63)
54    (LOAD&PUSH 4)
55    (CALL1&JMPIFNOT 9 L63)              ; COMPLEX-NUMBER-P
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 9 L108)                ; COMPLEX-NUMBER-P
63    L63
63    (GETVALUE&PUSH 4)                   ; M
65    (CALL1&JMPIF 13 L152)               ; ZEROP1
69    (GETVALUE&PUSH 4)                   ; M
71    (CALL1&JMPIFNOT 15 L176)            ; ONEP1
75    (CONST 16)                          ; ($CSCH)
76    L76
76    (PUSH)
77    (LOAD&PUSH 5)
78    (LIST 2)
80    (JMP L437)
83    L83
83    (LOAD&PUSH 4)
84    (CONST&PUSH 6)                      ; 1.0
85    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
87    (GETVALUE&PUSH 4)                   ; M
89    (CONST&PUSH 6)                      ; 1.0
90    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
92    (LOAD&PUSH 1)
93    (LOAD&PUSH 1)
94    (CALL2&PUSH 7)                      ; CN
96    (LOAD&PUSH 2)
97    (LOAD&PUSH 2)
98    (CALL2&PUSH 8)                      ; SN
100   (CALLSR 1 56)                       ; /
103   (SKIP 2)
105   (JMP L437)
108   L108
108   (LOAD&PUSH 4)
109   (CALL1&PUSH 10)                     ; $REALPART
111   (LOAD&PUSH 5)
112   (CALL1&PUSH 11)                     ; $IMAGPART
114   (GETVALUE&PUSH 4)                   ; M
116   (CALL1&PUSH 10)                     ; $REALPART
118   (GETVALUE&PUSH 4)                   ; M
120   (CALL1&PUSH 11)                     ; $IMAGPART
122   (LOAD&PUSH 3)
123   (LOAD&PUSH 3)
124   (CALLS2&PUSH 196)                   ; COMPLEX
126   (LOAD&PUSH 2)
127   (LOAD&PUSH 2)
128   (CALLS2&PUSH 196)                   ; COMPLEX
130   (CALL2&PUSH 7)                      ; CN
132   (LOAD&PUSH 4)
133   (LOAD&PUSH 4)
134   (CALLS2&PUSH 196)                   ; COMPLEX
136   (LOAD&PUSH 3)
137   (LOAD&PUSH 3)
138   (CALLS2&PUSH 196)                   ; COMPLEX
140   (CALL2&PUSH 8)                      ; SN
142   (CALLSR&PUSH 1 56)                  ; /
145   (CALL1 12)                          ; COMPLEXIFY
147   (SKIP 4)
149   (JMP L437)
152   L152
152   (CONST 14)                          ; ($COT)
153   (JMP L76)
156   L156
156   (CONST&PUSH 17)                     ; JACOBI_CS
157   (CALL1 18)                          ; DBZ-ERR1
159   (JMP L437)
162   L162
162   (CONST&PUSH 21)                     ; %JACOBI_CS
163   (LIST&PUSH 1)
165   (LOAD&PUSH 5)
166   (CALL1&PUSH 22)                     ; NEG
168   (GETVALUE&PUSH 4)                   ; M
170   (LIST&PUSH 3)
172   (CALL1 23)                          ; SIMPLIFY
174   (JMP L222)
176   L176
176   (LOAD&PUSH 4)
177   (CALL1&JMPIF 13 L156)               ; ZEROP1
180   (GETVALUE 19)                       ; $TRIGSIGN
182   (JMPIFNOT L188)
184   (LOAD&PUSH 4)
185   (CALL1&JMPIF 20 L162)               ; MMINUSP*
188   L188
188   (GETVALUE 24)                       ; $%IARGS
190   (JMPIFNOT L418)
193   (LOAD&PUSH 4)
194   (CONST&PUSH 25)                     ; $%I
195   (CALL2&JMPIFNOT 26 L418)            ; MULTIPLEP
199   (CONST&PUSH 25)                     ; $%I
200   (CONST&PUSH 27)                     ; %JACOBI_NS
201   (LIST&PUSH 1)
203   (LOAD&PUSH 6)
204   (CONST&PUSH 25)                     ; $%I
205   (CONST&PUSH 28)                     ; 1
206   (CALL&PUSH 3 29)                    ; COEFF
209   (CONST&PUSH 28)                     ; 1
210   (GETVALUE&PUSH 4)                   ; M
212   (CALL1&PUSH 22)                     ; NEG
214   (CALL2&PUSH 30)                     ; ADD
216   (LIST&PUSH 3)
218   (CALL1&PUSH 23)                     ; SIMPLIFY
220   (CALL2 31)                          ; MUL
222   L222
222   (PUSH)
223   (CALL1 22)                          ; NEG
225   (JMP L437)
228   L228
228   (LOAD&PUSH 0)
229   (CONST&PUSH 34)                     ; (2 . 2)
231   (CALL2 35)                          ; SYSTEM::DESTRUCTURING-ERROR
233   (JMP L437)
236   L236
236   (CONST&PUSH 17)                     ; JACOBI_CS
237   (CALL1 18)                          ; DBZ-ERR1
239   (SKIP 3)
241   (JMP L437)
244   L244
244   (LOAD&PUSH 1)
245   (CALL1&JMPIF 13 L236)               ; ZEROP1
248   (CONST&PUSH 37)                     ; (%JACOBI_CS SIMP)
250   (LOAD&PUSH 2)
251   (GETVALUE&PUSH 4)                   ; M
253   (LIST 3)
255   (SKIP 3)
257   (JMP L437)
260   L260
260   (CONST 36)                          ; 0
262   (SKIP 3)
264   (JMP L437)
267   L267
267   (LOAD&PUSH 1)
268   (CALL1&JMPIF 13 L260)               ; ZEROP1
271   (CONST&PUSH 38)                     ; (MTIMES SIMP)
273   (CONST&PUSH 39)                     ; -1
275   (CONST&PUSH 40)                     ; (MEXPT SIMP)
277   (CONST&PUSH 41)                     ; (MPLUS SIMP)
279   (CONST&PUSH 28)                     ; 1
280   (CONST&PUSH 42)                     ; (MTIMES SIMP)
282   (CONST&PUSH 39)                     ; -1
284   (GETVALUE&PUSH 4)                   ; M
286   (LIST&PUSH 3)
288   (LIST&PUSH 3)
290   (CONST 43)                          ; (((RAT SIMP) 1 2))
292   (LIST*&PUSH 2)
294   (CONST&PUSH 44)                     ; (%JACOBI_SC SIMP)
296   (LOAD&PUSH 5)
297   (GETVALUE&PUSH 4)                   ; M
299   (LIST&PUSH 3)
301   (LIST 4)
303   (SKIP 3)
305   (JMP L437)
308   L308
308   (LOAD&PUSH 1)
309   (CONST&PUSH 33)                     ; 2
311   (CALLS2&PUSH 183)                   ; MOD
313   (LOAD&PUSH 0)
314   (JMPIFEQTO 36 L244)                 ; 0
318   (LOAD&PUSH 0)
319   (JMPIFEQTO 28 L267)                 ; 1
322   (CONST&PUSH 45)                     ; TYPE-ERROR
324   (CONST&PUSH 46)                     ; :DATUM
326   (LOAD&PUSH 2)
327   (CONST&PUSH 47)                     ; :EXPECTED-TYPE
329   (CONST&PUSH 48)                     ; (MEMBER 0 1)
331   (CALL0 49)                          ; SYSTEM::TYPE-ERROR-STRING
333   (PUSH)
334   (CONST&PUSH 50)                     ; (MOD LIN 2)
336   (CONST&PUSH 51)                     ; (0 1)
338   (CALL2&PUSH 52)                     ; SYSTEM::CASE-ERROR-STRING
340   (LOAD&PUSH 7)
341   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
344   L344
344   (CONST&PUSH 55)                     ; (MEXPT)
346   (CONST&PUSH 56)                     ; (%JACOBI_SC)
348   (CONST&PUSH 57)                     ; (MTIMES)
350   (CONST&PUSH 58)                     ; ((RAT) 1 2)
352   (CONST&PUSH 59)                     ; (%ELLIPTIC_KC)
354   (GETVALUE&PUSH 4)                   ; M
356   (LIST&PUSH 2)
358   (LIST&PUSH 3)
360   (GETVALUE&PUSH 4)                   ; M
362   (LIST&PUSH 3)
364   (CONST 60)                          ; (-1)
366   (LIST* 2)
368   (SKIP 2)
370   (JMP L437)
373   L373
373   (PUSH)
374   (CALLS2&PUSH 71)                    ; LENGTH
376   (CONST&PUSH 33)                     ; 2
378   (CALLSR&JMPIF 1 46 L228)            ; /=
383   (LOAD&CAR&PUSH 0)
385   (LOAD 1)
386   (CDR)
387   (CAR&PUSH)
388   (LOAD&PUSH 1)
389   (CALLS2&JMPIF 12 L308)              ; INTEGERP
393   (LOAD&PUSH 1)
394   (GETVALUE&PUSH 53)                  ; |1//2|
396   (CALL2&JMPIFNOT 54 L403)            ; ALIKE1
399   (LOAD&PUSH 0)
400   (CALL1&JMPIF 13 L344)               ; ZEROP1
403   L403
403   (CONST&PUSH 61)                     ; (%JACOBI_CS SIMP)
405   (LOAD&PUSH 7)
406   (GETVALUE&PUSH 4)                   ; M
408   (LIST&PUSH 3)
410   (GETVALUE&PUSH 0)                   ; FORM
412   (CALL2 62)                          ; EQTEST
414   (SKIP 2)
416   (JMP L437)
418   L418
418   (LOAD&PUSH 4)
419   (GETVALUE&PUSH 4)                   ; M
421   (CALL2 32)                          ; KC-ARG2
423   (STORE 0)
424   (JMPIF L373)
426   (CONST&PUSH 63)                     ; (%JACOBI_CS SIMP)
428   (LOAD&PUSH 5)
429   (GETVALUE&PUSH 4)                   ; M
431   (LIST&PUSH 3)
433   (GETVALUE&PUSH 0)                   ; FORM
435   (CALL2 62)                          ; EQTEST
437   L437
437   (SKIP 1)
439   (UNBIND1)
440   (SKIP 1)
442   (UNBIND 2)
444   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $JACOBI_CD (U M) ...)-87|
(CONST 0) = $JACOBI_CD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_CD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_CD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_CD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_CD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_CD
8     (SKIP&RET 1)


Disassembly of function $JACOBI_CD
(CONST 0) = M
(CONST 1) = (%JACOBI_CD)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_CD)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_CD SIMP-%JACOBI_CD ...)-88|
(CONST 0) = %JACOBI_CD
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_CD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_CD
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_CD
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_CD (# # #) ...)-89|
(CONST 0) = %JACOBI_CD
(CONST 1) = GRAD
(CONST 2) = 
((U M)
 ((MTIMES) ((MPLUS) -1 M) ((MEXPT) ((%JACOBI_DN) U M) -2) ((%JACOBI_SN) U M))
 ((MPLUS)
  ((MTIMES) -1 ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_DN) U M) -2)
   ((MPLUS)
    ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((%JACOBI_DN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
    ((MTIMES) ((RAT) -1 2) ((%JACOBI_CN) U M) ((%JACOBI_SN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))
  ((MTIMES) ((MEXPT) ((%JACOBI_DN) U M) -1)
   ((MPLUS)
    ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
    ((MTIMES) ((RAT) -1 2) ((MEXPT) M -1) ((%JACOBI_DN) U M) ((%JACOBI_SN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_CD
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# # # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_CD in lines 2653..2736 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_CD (FORM Y Z) ...)-90|
(CONST 0) = SIMP-%JACOBI_CD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_CD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_CD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_CD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_CD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_CD
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_CD
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = CN
(CONST 8) = DN
(CONST 9) = COMPLEX-NUMBER-P
(CONST 10) = $REALPART
(CONST 11) = $IMAGPART
(CONST 12) = COMPLEXIFY
(CONST 13) = ZEROP1
(CONST 14) = 1
(CONST 15) = (%COS)
(CONST 16) = ONEP1
(CONST 17) = $TRIGSIGN
(CONST 18) = MMINUSP*
(CONST 19) = %JACOBI_CD
(CONST 20) = NEG
(CONST 21) = SIMPLIFY
(CONST 22) = $%IARGS
(CONST 23) = $%I
(CONST 24) = MULTIPLEP
(CONST 25) = %JACOBI_ND
(CONST 26) = COEFF
(CONST 27) = ADD
(CONST 28) = KC-ARG2
(CONST 29) = 2
(CONST 30) = (2 . 2)
(CONST 31) = SYSTEM::DESTRUCTURING-ERROR
(CONST 32) = 4
(CONST 33) = #S(HASH-TABLE EQ (3 . 64) (2 . 38) (1 . 23) (0 . 8))
(CONST 34) = (%JACOBI_CD)
(CONST 35) = 0
(CONST 36) = (%JACOBI_SN)
(CONST 37) = -1
(CONST 38) = (%JACOBI_CD)
(CONST 39) = (%JACOBI_SN)
(CONST 40) = TYPE-ERROR
(CONST 41) = :DATUM
(CONST 42) = :EXPECTED-TYPE
(CONST 43) = (MEMBER 0 1 2 3)
(CONST 44) = SYSTEM::TYPE-ERROR-STRING
(CONST 45) = (MOD LIN 4)
(CONST 46) = (0 1 2 3)
(CONST 47) = SYSTEM::CASE-ERROR-STRING
(CONST 48) = |1//2|
(CONST 49) = ALIKE1
(CONST 50) = (MTIMES)
(CONST 51) = (%JACOBI_CN)
(CONST 52) = (MTIMES)
(CONST 53) = ((RAT) 1 2)
(CONST 54) = (%ELLIPTIC_KC)
(CONST 55) = (MEXPT)
(CONST 56) = (%JACOBI_DN)
(CONST 57) = (MTIMES)
(CONST 58) = ((RAT) 1 2)
(CONST 59) = (%ELLIPTIC_KC)
(CONST 60) = (-1)
(CONST 61) = (%JACOBI_CD)
(CONST 62) = EQTEST
(CONST 63) = (%JACOBI_CD)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| $%IARGS $TRIGSIGN $NUMER M FORM)
272 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L38)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L127)              ; FLOATP
38    L38
38    (GETVALUE 5)                        ; $NUMER
40    (JMPIFNOT L52)
42    (LOAD&PUSH 4)
43    (CALLS2&JMPIFNOT 8 L52)             ; NUMBERP
46    (GETVALUE&PUSH 4)                   ; M
48    (CALLS2&JMPIF 8 L127)               ; NUMBERP
52    L52
52    (GETVALUE 5)                        ; $NUMER
54    (JMPIFNOT L66)
56    (LOAD&PUSH 4)
57    (CALL1&JMPIFNOT 9 L66)              ; COMPLEX-NUMBER-P
60    (GETVALUE&PUSH 4)                   ; M
62    (CALL1&JMPIF 9 L152)                ; COMPLEX-NUMBER-P
66    L66
66    (LOAD&PUSH 4)
67    (CALL1&JMPIF 13 L196)               ; ZEROP1
71    (GETVALUE&PUSH 4)                   ; M
73    (CALL1&JMPIF 13 L200)               ; ZEROP1
77    (GETVALUE&PUSH 4)                   ; M
79    (CALL1&JMPIF 16 L207)               ; ONEP1
83    (GETVALUE 17)                       ; $TRIGSIGN
85    (JMPIFNOT L92)
87    (LOAD&PUSH 4)
88    (CALL1&JMPIF 18 L211)               ; MMINUSP*
92    L92
92    (GETVALUE 22)                       ; $%IARGS
94    (JMPIFNOT L437)
97    (LOAD&PUSH 4)
98    (CONST&PUSH 23)                     ; $%I
99    (CALL2&JMPIFNOT 24 L437)            ; MULTIPLEP
103   (CONST&PUSH 25)                     ; %JACOBI_ND
104   (LIST&PUSH 1)
106   (LOAD&PUSH 5)
107   (CONST&PUSH 23)                     ; $%I
108   (CONST&PUSH 14)                     ; 1
109   (CALL&PUSH 3 26)                    ; COEFF
112   (CONST&PUSH 14)                     ; 1
113   (GETVALUE&PUSH 4)                   ; M
115   (CALL1&PUSH 20)                     ; NEG
117   (CALL2 27)                          ; ADD
119   L119
119   (PUSH)
120   (LIST&PUSH 3)
122   (CALL1 21)                          ; SIMPLIFY
124   (JMP L456)
127   L127
127   (LOAD&PUSH 4)
128   (CONST&PUSH 6)                      ; 1.0
129   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
131   (GETVALUE&PUSH 4)                   ; M
133   (CONST&PUSH 6)                      ; 1.0
134   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
136   (LOAD&PUSH 1)
137   (LOAD&PUSH 1)
138   (CALL2&PUSH 7)                      ; CN
140   (LOAD&PUSH 2)
141   (LOAD&PUSH 2)
142   (CALL2&PUSH 8)                      ; DN
144   (CALLSR 1 56)                       ; /
147   (SKIP 2)
149   (JMP L456)
152   L152
152   (LOAD&PUSH 4)
153   (CALL1&PUSH 10)                     ; $REALPART
155   (LOAD&PUSH 5)
156   (CALL1&PUSH 11)                     ; $IMAGPART
158   (GETVALUE&PUSH 4)                   ; M
160   (CALL1&PUSH 10)                     ; $REALPART
162   (GETVALUE&PUSH 4)                   ; M
164   (CALL1&PUSH 11)                     ; $IMAGPART
166   (LOAD&PUSH 3)
167   (LOAD&PUSH 3)
168   (CALLS2&PUSH 196)                   ; COMPLEX
170   (LOAD&PUSH 2)
171   (LOAD&PUSH 2)
172   (CALLS2&PUSH 196)                   ; COMPLEX
174   (CALL2&PUSH 7)                      ; CN
176   (LOAD&PUSH 4)
177   (LOAD&PUSH 4)
178   (CALLS2&PUSH 196)                   ; COMPLEX
180   (LOAD&PUSH 3)
181   (LOAD&PUSH 3)
182   (CALLS2&PUSH 196)                   ; COMPLEX
184   (CALL2&PUSH 8)                      ; DN
186   (CALLSR&PUSH 1 56)                  ; /
189   (CALL1 12)                          ; COMPLEXIFY
191   (SKIP 4)
193   (JMP L456)
196   L196
196   (CONST 14)                          ; 1
197   (JMP L456)
200   L200
200   (CONST&PUSH 15)                     ; (%COS)
201   (LOAD&PUSH 5)
202   (LIST 2)
204   (JMP L456)
207   L207
207   (CONST 14)                          ; 1
208   (JMP L456)
211   L211
211   (CONST&PUSH 19)                     ; %JACOBI_CD
212   (LIST&PUSH 1)
214   (LOAD&PUSH 5)
215   (CALL1&PUSH 20)                     ; NEG
217   (GETVALUE 4)                        ; M
219   (JMP L119)
222   L222
222   (LOAD&PUSH 0)
223   (CONST&PUSH 30)                     ; (2 . 2)
225   (CALL2 31)                          ; SYSTEM::DESTRUCTURING-ERROR
227   (JMP L456)
230   L230
230   (LOAD&PUSH 1)
231   (CONST&PUSH 32)                     ; 4
233   (CALLS2&PUSH 183)                   ; MOD
235   (LOAD 0)
236   (JMPHASH 33 L319 L246 L261 L276 L302)
240   L240
240   (CONST 14)                          ; 1
241   (SKIP 3)
243   (JMP L456)
246   L246
246   (LOAD&PUSH 1)
247   (CALL1&JMPIF 13 L240)               ; ZEROP1
250   (CONST 34)                          ; (%JACOBI_CD)
252   (JMP L308)
254   L254
254   (CONST 35)                          ; 0
256   (SKIP 3)
258   (JMP L456)
261   L261
261   (LOAD&PUSH 1)
262   (CALL1&JMPIF 13 L254)               ; ZEROP1
265   (CONST 36)                          ; (%JACOBI_SN)
267   (JMP L282)
269   L269
269   (CONST 37)                          ; -1
271   (SKIP 3)
273   (JMP L456)
276   L276
276   (LOAD&PUSH 1)
277   (CALL1&JMPIF 13 L269)               ; ZEROP1
280   (CONST 38)                          ; (%JACOBI_CD)
282   L282
282   (PUSH)
283   (LOAD&PUSH 2)
284   (GETVALUE&PUSH 4)                   ; M
286   (LIST&PUSH 3)
288   (CALL1 20)                          ; NEG
290   (SKIP 3)
292   (JMP L456)
295   L295
295   (CONST 35)                          ; 0
297   (SKIP 3)
299   (JMP L456)
302   L302
302   (LOAD&PUSH 1)
303   (CALL1&JMPIF 13 L295)               ; ZEROP1
306   (CONST 39)                          ; (%JACOBI_SN)
308   L308
308   (PUSH)
309   (LOAD&PUSH 2)
310   (GETVALUE&PUSH 4)                   ; M
312   (LIST 3)
314   (SKIP 3)
316   (JMP L456)
319   L319
319   (CONST&PUSH 40)                     ; TYPE-ERROR
321   (CONST&PUSH 41)                     ; :DATUM
323   (LOAD&PUSH 2)
324   (CONST&PUSH 42)                     ; :EXPECTED-TYPE
326   (CONST&PUSH 43)                     ; (MEMBER 0 1 2 3)
328   (CALL0 44)                          ; SYSTEM::TYPE-ERROR-STRING
330   (PUSH)
331   (CONST&PUSH 45)                     ; (MOD LIN 4)
333   (CONST&PUSH 46)                     ; (0 1 2 3)
335   (CALL2&PUSH 47)                     ; SYSTEM::CASE-ERROR-STRING
337   (LOAD&PUSH 7)
338   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
341   L341
341   (CONST&PUSH 50)                     ; (MTIMES)
343   (CONST&PUSH 51)                     ; (%JACOBI_CN)
345   (CONST&PUSH 52)                     ; (MTIMES)
347   (CONST&PUSH 53)                     ; ((RAT) 1 2)
349   (CONST&PUSH 54)                     ; (%ELLIPTIC_KC)
351   (GETVALUE&PUSH 4)                   ; M
353   (LIST&PUSH 2)
355   (LIST&PUSH 3)
357   (GETVALUE&PUSH 4)                   ; M
359   (LIST&PUSH 3)
361   (CONST&PUSH 55)                     ; (MEXPT)
363   (CONST&PUSH 56)                     ; (%JACOBI_DN)
365   (CONST&PUSH 57)                     ; (MTIMES)
367   (CONST&PUSH 58)                     ; ((RAT) 1 2)
369   (CONST&PUSH 59)                     ; (%ELLIPTIC_KC)
371   (GETVALUE&PUSH 4)                   ; M
373   (LIST&PUSH 2)
375   (LIST&PUSH 3)
377   (GETVALUE&PUSH 4)                   ; M
379   (LIST&PUSH 3)
381   (CONST 60)                          ; (-1)
383   (LIST*&PUSH 2)
385   (LIST 3)
387   (SKIP 2)
389   (JMP L456)
392   L392
392   (PUSH)
393   (CALLS2&PUSH 71)                    ; LENGTH
395   (CONST&PUSH 29)                     ; 2
396   (CALLSR&JMPIF 1 46 L222)            ; /=
401   (LOAD&CAR&PUSH 0)
403   (LOAD 1)
404   (CDR)
405   (CAR&PUSH)
406   (LOAD&PUSH 1)
407   (CALLS2&JMPIF 12 L230)              ; INTEGERP
411   (LOAD&PUSH 1)
412   (GETVALUE&PUSH 48)                  ; |1//2|
414   (CALL2&JMPIFNOT 49 L422)            ; ALIKE1
417   (LOAD&PUSH 0)
418   (CALL1&JMPIF 13 L341)               ; ZEROP1
422   L422
422   (CONST&PUSH 61)                     ; (%JACOBI_CD)
424   (LOAD&PUSH 7)
425   (GETVALUE&PUSH 4)                   ; M
427   (LIST&PUSH 3)
429   (GETVALUE&PUSH 0)                   ; FORM
431   (CALL2 62)                          ; EQTEST
433   (SKIP 2)
435   (JMP L456)
437   L437
437   (LOAD&PUSH 4)
438   (GETVALUE&PUSH 4)                   ; M
440   (CALL2 28)                          ; KC-ARG2
442   (STORE 0)
443   (JMPIF L392)
445   (CONST&PUSH 63)                     ; (%JACOBI_CD)
447   (LOAD&PUSH 5)
448   (GETVALUE&PUSH 4)                   ; M
450   (LIST&PUSH 3)
452   (GETVALUE&PUSH 0)                   ; FORM
454   (CALL2 62)                          ; EQTEST
456   L456
456   (SKIP 1)
458   (UNBIND1)
459   (SKIP 1)
461   (UNBIND 2)
463   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $JACOBI_DS (U M) ...)-91|
(CONST 0) = $JACOBI_DS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_DS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_DS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_DS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_DS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_DS
8     (SKIP&RET 1)


Disassembly of function $JACOBI_DS
(CONST 0) = M
(CONST 1) = (%JACOBI_DS)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_DS)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_DS SIMP-%JACOBI_DS ...)-92|
(CONST 0) = %JACOBI_DS
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_DS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_DS
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_DS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_DS (# # #) ...)-93|
(CONST 0) = %JACOBI_DS
(CONST 1) = GRAD
(CONST 2) = 
((U M) ((MTIMES) -1 ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_SN) U M) -2))
 ((MPLUS)
  ((MTIMES) -1 ((%JACOBI_DN) U M) ((MEXPT) ((%JACOBI_SN) U M) -2)
   ((MPLUS)
    ((MTIMES) ((RAT) 1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((MEXPT) ((%JACOBI_CN) U M) 2) ((%JACOBI_SN) U M))
    ((MTIMES) ((RAT) 1 2) ((MEXPT) M -1) ((%JACOBI_CN) U M) ((%JACOBI_DN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))
  ((MTIMES) ((MEXPT) ((%JACOBI_SN) U M) -1)
   ((MPLUS)
    ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((%JACOBI_DN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
    ((MTIMES) ((RAT) -1 2) ((%JACOBI_CN) U M) ((%JACOBI_SN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_DS
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# -1 # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_DS in lines 2780..2874 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_DS (FORM Y Z) ...)-94|
(CONST 0) = SIMP-%JACOBI_DS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_DS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_DS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_DS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_DS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_DS
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_DS
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = DN
(CONST 8) = SN
(CONST 9) = COMPLEX-NUMBER-P
(CONST 10) = $REALPART
(CONST 11) = $IMAGPART
(CONST 12) = COMPLEXIFY
(CONST 13) = ZEROP1
(CONST 14) = ($CSC)
(CONST 15) = ONEP1
(CONST 16) = ($CSCH)
(CONST 17) = JACOBI_DS
(CONST 18) = DBZ-ERR1
(CONST 19) = $TRIGSIGN
(CONST 20) = MMINUSP*
(CONST 21) = %JACOBI_DS
(CONST 22) = NEG
(CONST 23) = SIMPLIFY
(CONST 24) = $%IARGS
(CONST 25) = $%I
(CONST 26) = MULTIPLEP
(CONST 27) = 1
(CONST 28) = COEFF
(CONST 29) = ADD
(CONST 30) = MUL
(CONST 31) = KC-ARG2
(CONST 32) = 2
(CONST 33) = (2 . 2)
(CONST 34) = SYSTEM::DESTRUCTURING-ERROR
(CONST 35) = 4
(CONST 36) = #S(HASH-TABLE EQ (3 . 122) (2 . 81) (1 . 41) (0 . 6))
(CONST 37) = (%JACOBI_DS)
(CONST 38) = (MEXPT SIMP)
(CONST 39) = (MPLUS SIMP)
(CONST 40) = (MTIMES SIMP)
(CONST 41) = -1
(CONST 42) = (((RAT SIMP) 1 2))
(CONST 43) = (MTIMES SIMP)
(CONST 44) = (MEXPT SIMP)
(CONST 45) = (MPLUS SIMP)
(CONST 46) = (MTIMES SIMP)
(CONST 47) = (((RAT SIMP) 1 2))
(CONST 48) = (%JACOBI_NC SIMP)
(CONST 49) = (%JACOBI_DS)
(CONST 50) = (MEXPT SIMP)
(CONST 51) = (MPLUS SIMP)
(CONST 52) = (MTIMES SIMP)
(CONST 53) = (((RAT SIMP) 1 2))
(CONST 54) = (MTIMES SIMP)
(CONST 55) = (MEXPT SIMP)
(CONST 56) = (MPLUS SIMP)
(CONST 57) = (MTIMES SIMP)
(CONST 58) = (((RAT SIMP) 1 2))
(CONST 59) = (%JACOBI_NC SIMP)
(CONST 60) = TYPE-ERROR
(CONST 61) = :DATUM
(CONST 62) = :EXPECTED-TYPE
(CONST 63) = (MEMBER 0 1 2 3)
(CONST 64) = SYSTEM::TYPE-ERROR-STRING
(CONST 65) = (MOD LIN 4)
(CONST 66) = (0 1 2 3)
(CONST 67) = SYSTEM::CASE-ERROR-STRING
(CONST 68) = |1//2|
(CONST 69) = ALIKE1
(CONST 70) = (MTIMES)
(CONST 71) = (%JACOBI_DN)
(CONST 72) = (MTIMES)
(CONST 73) = ((RAT) 1 2)
(CONST 74) = (%ELLIPTIC_KC)
(CONST 75) = (MEXPT)
(CONST 76) = (%JACOBI_SN)
(CONST 77) = (MTIMES)
(CONST 78) = ((RAT) 1 2)
(CONST 79) = (%ELLIPTIC_KC)
(CONST 80) = (-1)
(CONST 81) = (%JACOBI_DS)
(CONST 82) = EQTEST
(CONST 83) = (%JACOBI_DS)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| $%IARGS $TRIGSIGN $NUMER M FORM)
329 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L37)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L83)               ; FLOATP
37    L37
37    (GETVALUE 5)                        ; $NUMER
39    (JMPIFNOT L50)
41    (LOAD&PUSH 4)
42    (CALLS2&JMPIFNOT 8 L50)             ; NUMBERP
45    (GETVALUE&PUSH 4)                   ; M
47    (CALLS2&JMPIF 8 L83)                ; NUMBERP
50    L50
50    (GETVALUE 5)                        ; $NUMER
52    (JMPIFNOT L63)
54    (LOAD&PUSH 4)
55    (CALL1&JMPIFNOT 9 L63)              ; COMPLEX-NUMBER-P
58    (GETVALUE&PUSH 4)                   ; M
60    (CALL1&JMPIF 9 L108)                ; COMPLEX-NUMBER-P
63    L63
63    (GETVALUE&PUSH 4)                   ; M
65    (CALL1&JMPIF 13 L152)               ; ZEROP1
69    (GETVALUE&PUSH 4)                   ; M
71    (CALL1&JMPIFNOT 15 L176)            ; ONEP1
75    (CONST 16)                          ; ($CSCH)
76    L76
76    (PUSH)
77    (LOAD&PUSH 5)
78    (LIST 2)
80    (JMP L547)
83    L83
83    (LOAD&PUSH 4)
84    (CONST&PUSH 6)                      ; 1.0
85    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
87    (GETVALUE&PUSH 4)                   ; M
89    (CONST&PUSH 6)                      ; 1.0
90    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
92    (LOAD&PUSH 1)
93    (LOAD&PUSH 1)
94    (CALL2&PUSH 7)                      ; DN
96    (LOAD&PUSH 2)
97    (LOAD&PUSH 2)
98    (CALL2&PUSH 8)                      ; SN
100   (CALLSR 1 56)                       ; /
103   (SKIP 2)
105   (JMP L547)
108   L108
108   (LOAD&PUSH 4)
109   (CALL1&PUSH 10)                     ; $REALPART
111   (LOAD&PUSH 5)
112   (CALL1&PUSH 11)                     ; $IMAGPART
114   (GETVALUE&PUSH 4)                   ; M
116   (CALL1&PUSH 10)                     ; $REALPART
118   (GETVALUE&PUSH 4)                   ; M
120   (CALL1&PUSH 11)                     ; $IMAGPART
122   (LOAD&PUSH 3)
123   (LOAD&PUSH 3)
124   (CALLS2&PUSH 196)                   ; COMPLEX
126   (LOAD&PUSH 2)
127   (LOAD&PUSH 2)
128   (CALLS2&PUSH 196)                   ; COMPLEX
130   (CALL2&PUSH 7)                      ; DN
132   (LOAD&PUSH 4)
133   (LOAD&PUSH 4)
134   (CALLS2&PUSH 196)                   ; COMPLEX
136   (LOAD&PUSH 3)
137   (LOAD&PUSH 3)
138   (CALLS2&PUSH 196)                   ; COMPLEX
140   (CALL2&PUSH 8)                      ; SN
142   (CALLSR&PUSH 1 56)                  ; /
145   (CALL1 12)                          ; COMPLEXIFY
147   (SKIP 4)
149   (JMP L547)
152   L152
152   (CONST 14)                          ; ($CSC)
153   (JMP L76)
156   L156
156   (CONST&PUSH 17)                     ; JACOBI_DS
157   (CALL1 18)                          ; DBZ-ERR1
159   (JMP L547)
162   L162
162   (CONST&PUSH 21)                     ; %JACOBI_DS
163   (LIST&PUSH 1)
165   (LOAD&PUSH 5)
166   (CALL1&PUSH 22)                     ; NEG
168   (GETVALUE&PUSH 4)                   ; M
170   (LIST&PUSH 3)
172   (CALL1 23)                          ; SIMPLIFY
174   (JMP L222)
176   L176
176   (LOAD&PUSH 4)
177   (CALL1&JMPIF 13 L156)               ; ZEROP1
180   (GETVALUE 19)                       ; $TRIGSIGN
182   (JMPIFNOT L188)
184   (LOAD&PUSH 4)
185   (CALL1&JMPIF 20 L162)               ; MMINUSP*
188   L188
188   (GETVALUE 24)                       ; $%IARGS
190   (JMPIFNOT L528)
193   (LOAD&PUSH 4)
194   (CONST&PUSH 25)                     ; $%I
195   (CALL2&JMPIFNOT 26 L528)            ; MULTIPLEP
199   (CONST&PUSH 25)                     ; $%I
200   (CONST&PUSH 21)                     ; %JACOBI_DS
201   (LIST&PUSH 1)
203   (LOAD&PUSH 6)
204   (CONST&PUSH 25)                     ; $%I
205   (CONST&PUSH 27)                     ; 1
206   (CALL&PUSH 3 28)                    ; COEFF
209   (CONST&PUSH 27)                     ; 1
210   (GETVALUE&PUSH 4)                   ; M
212   (CALL1&PUSH 22)                     ; NEG
214   (CALL2&PUSH 29)                     ; ADD
216   (LIST&PUSH 3)
218   (CALL1&PUSH 23)                     ; SIMPLIFY
220   (CALL2 30)                          ; MUL
222   L222
222   (PUSH)
223   (CALL1 22)                          ; NEG
225   (JMP L547)
228   L228
228   (LOAD&PUSH 0)
229   (CONST&PUSH 33)                     ; (2 . 2)
231   (CALL2 34)                          ; SYSTEM::DESTRUCTURING-ERROR
233   (JMP L547)
236   L236
236   (LOAD&PUSH 1)
237   (CONST&PUSH 35)                     ; 4
239   (CALLS2&PUSH 183)                   ; MOD
241   (LOAD 0)
242   (JMPHASH 36 L409 L250 L285 L325 L366)
246   L246
246   (CONST 17)                          ; JACOBI_DS
247   (JMP L330)
250   L250
250   (LOAD&PUSH 1)
251   (CALL1&JMPIF 13 L246)               ; ZEROP1
254   (CONST&PUSH 37)                     ; (%JACOBI_DS)
256   (LOAD&PUSH 2)
257   (GETVALUE 4)                        ; M
259   (JMP L317)
261   L261
261   (CONST&PUSH 38)                     ; (MEXPT SIMP)
263   (CONST&PUSH 39)                     ; (MPLUS SIMP)
265   (CONST&PUSH 27)                     ; 1
266   (CONST&PUSH 40)                     ; (MTIMES SIMP)
268   (CONST&PUSH 41)                     ; -1
270   (GETVALUE&PUSH 4)                   ; M
272   (LIST&PUSH 3)
274   (LIST&PUSH 3)
276   (CONST 42)                          ; (((RAT SIMP) 1 2))
278   (LIST* 2)
280   (SKIP 3)
282   (JMP L547)
285   L285
285   (LOAD&PUSH 1)
286   (CALL1&JMPIF 13 L261)               ; ZEROP1
289   (CONST&PUSH 43)                     ; (MTIMES SIMP)
291   (CONST&PUSH 44)                     ; (MEXPT SIMP)
293   (CONST&PUSH 45)                     ; (MPLUS SIMP)
295   (CONST&PUSH 27)                     ; 1
296   (CONST&PUSH 46)                     ; (MTIMES SIMP)
298   (CONST&PUSH 41)                     ; -1
300   (GETVALUE&PUSH 4)                   ; M
302   (LIST&PUSH 3)
304   (LIST&PUSH 3)
306   (CONST 47)                          ; (((RAT SIMP) 1 2))
308   (LIST*&PUSH 2)
310   (CONST&PUSH 48)                     ; (%JACOBI_NC SIMP)
312   (LOAD&PUSH 4)
313   (GETVALUE&PUSH 4)                   ; M
315   (LIST 3)
317   L317
317   (PUSH)
318   (LIST 3)
320   (SKIP 3)
322   (JMP L547)
325   L325
325   (LOAD&PUSH 1)
326   (CALL1&JMPIFNOT 13 L338)            ; ZEROP1
329   (CONST 17)                          ; JACOBI_DS
330   L330
330   (PUSH)
331   (CALL1 18)                          ; DBZ-ERR1
333   (SKIP 3)
335   (JMP L547)
338   L338
338   (CONST&PUSH 49)                     ; (%JACOBI_DS)
340   (LOAD&PUSH 2)
341   (GETVALUE 4)                        ; M
343   (JMP L398)
345   L345
345   (CONST&PUSH 50)                     ; (MEXPT SIMP)
347   (CONST&PUSH 51)                     ; (MPLUS SIMP)
349   (CONST&PUSH 27)                     ; 1
350   (CONST&PUSH 52)                     ; (MTIMES SIMP)
352   (CONST&PUSH 41)                     ; -1
354   (GETVALUE&PUSH 4)                   ; M
356   (LIST&PUSH 3)
358   (LIST&PUSH 3)
360   (CONST 53)                          ; (((RAT SIMP) 1 2))
362   (LIST* 2)
364   (JMP L401)
366   L366
366   (LOAD&PUSH 1)
367   (CALL1&JMPIF 13 L345)               ; ZEROP1
370   (CONST&PUSH 54)                     ; (MTIMES SIMP)
372   (CONST&PUSH 55)                     ; (MEXPT SIMP)
374   (CONST&PUSH 56)                     ; (MPLUS SIMP)
376   (CONST&PUSH 27)                     ; 1
377   (CONST&PUSH 57)                     ; (MTIMES SIMP)
379   (CONST&PUSH 41)                     ; -1
381   (GETVALUE&PUSH 4)                   ; M
383   (LIST&PUSH 3)
385   (LIST&PUSH 3)
387   (CONST 58)                          ; (((RAT SIMP) 1 2))
389   (LIST*&PUSH 2)
391   (CONST&PUSH 59)                     ; (%JACOBI_NC SIMP)
393   (LOAD&PUSH 4)
394   (GETVALUE&PUSH 4)                   ; M
396   (LIST 3)
398   L398
398   (PUSH)
399   (LIST 3)
401   L401
401   (PUSH)
402   (CALL1 22)                          ; NEG
404   (SKIP 3)
406   (JMP L547)
409   L409
409   (CONST&PUSH 60)                     ; TYPE-ERROR
411   (CONST&PUSH 61)                     ; :DATUM
413   (LOAD&PUSH 2)
414   (CONST&PUSH 62)                     ; :EXPECTED-TYPE
416   (CONST&PUSH 63)                     ; (MEMBER 0 1 2 3)
418   (CALL0 64)                          ; SYSTEM::TYPE-ERROR-STRING
420   (PUSH)
421   (CONST&PUSH 65)                     ; (MOD LIN 4)
423   (CONST&PUSH 66)                     ; (0 1 2 3)
425   (CALL2&PUSH 67)                     ; SYSTEM::CASE-ERROR-STRING
427   (LOAD&PUSH 7)
428   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
431   L431
431   (CONST&PUSH 70)                     ; (MTIMES)
433   (CONST&PUSH 71)                     ; (%JACOBI_DN)
435   (CONST&PUSH 72)                     ; (MTIMES)
437   (CONST&PUSH 73)                     ; ((RAT) 1 2)
439   (CONST&PUSH 74)                     ; (%ELLIPTIC_KC)
441   (GETVALUE&PUSH 4)                   ; M
443   (LIST&PUSH 2)
445   (LIST&PUSH 3)
447   (GETVALUE&PUSH 4)                   ; M
449   (LIST&PUSH 3)
451   (CONST&PUSH 75)                     ; (MEXPT)
453   (CONST&PUSH 76)                     ; (%JACOBI_SN)
455   (CONST&PUSH 77)                     ; (MTIMES)
457   (CONST&PUSH 78)                     ; ((RAT) 1 2)
459   (CONST&PUSH 79)                     ; (%ELLIPTIC_KC)
461   (GETVALUE&PUSH 4)                   ; M
463   (LIST&PUSH 2)
465   (LIST&PUSH 3)
467   (GETVALUE&PUSH 4)                   ; M
469   (LIST&PUSH 3)
471   (CONST 80)                          ; (-1)
473   (LIST*&PUSH 2)
475   (LIST 3)
477   (SKIP 2)
479   (JMP L547)
482   L482
482   (PUSH)
483   (CALLS2&PUSH 71)                    ; LENGTH
485   (CONST&PUSH 32)                     ; 2
487   (CALLSR&JMPIF 1 46 L228)            ; /=
492   (LOAD&CAR&PUSH 0)
494   (LOAD 1)
495   (CDR)
496   (CAR&PUSH)
497   (LOAD&PUSH 1)
498   (CALLS2&JMPIF 12 L236)              ; INTEGERP
502   (LOAD&PUSH 1)
503   (GETVALUE&PUSH 68)                  ; |1//2|
505   (CALL2&JMPIFNOT 69 L513)            ; ALIKE1
508   (LOAD&PUSH 0)
509   (CALL1&JMPIF 13 L431)               ; ZEROP1
513   L513
513   (CONST&PUSH 81)                     ; (%JACOBI_DS)
515   (LOAD&PUSH 7)
516   (GETVALUE&PUSH 4)                   ; M
518   (LIST&PUSH 3)
520   (GETVALUE&PUSH 0)                   ; FORM
522   (CALL2 82)                          ; EQTEST
524   (SKIP 2)
526   (JMP L547)
528   L528
528   (LOAD&PUSH 4)
529   (GETVALUE&PUSH 4)                   ; M
531   (CALL2 31)                          ; KC-ARG2
533   (STORE 0)
534   (JMPIF L482)
536   (CONST&PUSH 83)                     ; (%JACOBI_DS)
538   (LOAD&PUSH 5)
539   (GETVALUE&PUSH 4)                   ; M
541   (LIST&PUSH 3)
543   (GETVALUE&PUSH 0)                   ; FORM
545   (CALL2 82)                          ; EQTEST
547   L547
547   (SKIP 1)
549   (UNBIND1)
550   (SKIP 1)
552   (UNBIND 2)
554   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $JACOBI_DC (U M) ...)-95|
(CONST 0) = $JACOBI_DC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_DC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_DC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_DC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_DC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_DC
8     (SKIP&RET 1)


Disassembly of function $JACOBI_DC
(CONST 0) = M
(CONST 1) = (%JACOBI_DC)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_DC)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %JACOBI_DC SIMP-%JACOBI_DC ...)-96|
(CONST 0) = %JACOBI_DC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_DC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_DC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_DC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %JACOBI_DC (# # #) ...)-97|
(CONST 0) = %JACOBI_DC
(CONST 1) = GRAD
(CONST 2) = 
((U M)
 ((MTIMES) ((MPLUS) 1 ((MTIMES) -1 M)) ((MEXPT) ((%JACOBI_CN) U M) -2)
  ((%JACOBI_SN) U M))
 ((MPLUS)
  ((MTIMES) ((MEXPT) ((%JACOBI_CN) U M) -1)
   ((MPLUS)
    ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((%JACOBI_DN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
    ((MTIMES) ((RAT) -1 2) ((%JACOBI_CN) U M) ((%JACOBI_SN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))
  ((MTIMES) -1 ((MEXPT) ((%JACOBI_CN) U M) -2) ((%JACOBI_DN) U M)
   ((MPLUS)
    ((MTIMES) ((RAT) -1 2) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
     ((%JACOBI_CN) U M) ((MEXPT) ((%JACOBI_SN) U M) 2))
    ((MTIMES) ((RAT) -1 2) ((MEXPT) M -1) ((%JACOBI_DN) U M) ((%JACOBI_SN) U M)
     ((MPLUS) U
      ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M)) -1)
       (($ELLIPTIC_E) ((%ASIN) ((%JACOBI_SN) U M)) M))))))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_DC
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) (# # # #) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%JACOBI_DC in lines 2919..2992 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_DC (FORM Y Z) ...)-98|
(CONST 0) = SIMP-%JACOBI_DC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_DC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_DC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_DC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_DC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_DC
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_DC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1.0
(CONST 7) = DN
(CONST 8) = CN
(CONST 9) = ZEROP1
(CONST 10) = 1
(CONST 11) = ($SEC)
(CONST 12) = ONEP1
(CONST 13) = $TRIGSIGN
(CONST 14) = MMINUSP*
(CONST 15) = %JACOBI_DC
(CONST 16) = NEG
(CONST 17) = SIMPLIFY
(CONST 18) = $%IARGS
(CONST 19) = $%I
(CONST 20) = MULTIPLEP
(CONST 21) = %JACOBI_DN
(CONST 22) = COEFF
(CONST 23) = ADD
(CONST 24) = KC-ARG2
(CONST 25) = 2
(CONST 26) = (2 . 2)
(CONST 27) = SYSTEM::DESTRUCTURING-ERROR
(CONST 28) = 4
(CONST 29) = #S(HASH-TABLE EQ (3 . 64) (2 . 35) (1 . 20) (0 . 8))
(CONST 30) = (%JACOBI_DC)
(CONST 31) = JACOBI_DC
(CONST 32) = DBZ-ERR1
(CONST 33) = (%JACOBI_NS SIMP)
(CONST 34) = -1
(CONST 35) = (%JACOBI_DC)
(CONST 36) = (%JACOBI_DC SIMP)
(CONST 37) = TYPE-ERROR
(CONST 38) = :DATUM
(CONST 39) = :EXPECTED-TYPE
(CONST 40) = (MEMBER 0 1 2 3)
(CONST 41) = SYSTEM::TYPE-ERROR-STRING
(CONST 42) = (MOD LIN 4)
(CONST 43) = (0 1 2 3)
(CONST 44) = SYSTEM::CASE-ERROR-STRING
(CONST 45) = |1//2|
(CONST 46) = ALIKE1
(CONST 47) = (MTIMES)
(CONST 48) = (%JACOBI_DN)
(CONST 49) = (MTIMES)
(CONST 50) = ((RAT) 1 2)
(CONST 51) = (%ELLIPTIC_KC)
(CONST 52) = (MEXPT)
(CONST 53) = (%JACOBI_CN)
(CONST 54) = (MTIMES)
(CONST 55) = ((RAT) 1 2)
(CONST 56) = (%ELLIPTIC_KC)
(CONST 57) = (-1)
(CONST 58) = (%JACOBI_DC)
(CONST 59) = EQTEST
(CONST 60) = (%JACOBI_DC)
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| $%IARGS $TRIGSIGN $NUMER M FORM)
240 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (NIL&PUSH)
28    (LOAD&PUSH 4)
29    (CALLS2&JMPIFNOT 15 L38)            ; FLOATP
32    (GETVALUE&PUSH 4)                   ; M
34    (CALLS2&JMPIF 15 L112)              ; FLOATP
38    L38
38    (GETVALUE 5)                        ; $NUMER
40    (JMPIFNOT L51)
42    (LOAD&PUSH 4)
43    (CALLS2&JMPIFNOT 8 L51)             ; NUMBERP
46    (GETVALUE&PUSH 4)                   ; M
48    (CALLS2&JMPIF 8 L112)               ; NUMBERP
51    L51
51    (LOAD&PUSH 4)
52    (CALL1&JMPIF 9 L137)                ; ZEROP1
56    (GETVALUE&PUSH 4)                   ; M
58    (CALL1&JMPIF 9 L141)                ; ZEROP1
62    (GETVALUE&PUSH 4)                   ; M
64    (CALL1&JMPIF 12 L148)               ; ONEP1
68    (GETVALUE 13)                       ; $TRIGSIGN
70    (JMPIFNOT L77)
72    (LOAD&PUSH 4)
73    (CALL1&JMPIF 14 L152)               ; MMINUSP*
77    L77
77    (GETVALUE 18)                       ; $%IARGS
79    (JMPIFNOT L375)
82    (LOAD&PUSH 4)
83    (CONST&PUSH 19)                     ; $%I
84    (CALL2&JMPIFNOT 20 L375)            ; MULTIPLEP
88    (CONST&PUSH 21)                     ; %JACOBI_DN
89    (LIST&PUSH 1)
91    (LOAD&PUSH 5)
92    (CONST&PUSH 19)                     ; $%I
93    (CONST&PUSH 10)                     ; 1
94    (CALL&PUSH 3 22)                    ; COEFF
97    (CONST&PUSH 10)                     ; 1
98    (GETVALUE&PUSH 4)                   ; M
100   (CALL1&PUSH 16)                     ; NEG
102   (CALL2 23)                          ; ADD
104   L104
104   (PUSH)
105   (LIST&PUSH 3)
107   (CALL1 17)                          ; SIMPLIFY
109   (JMP L394)
112   L112
112   (LOAD&PUSH 4)
113   (CONST&PUSH 6)                      ; 1.0
114   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
116   (GETVALUE&PUSH 4)                   ; M
118   (CONST&PUSH 6)                      ; 1.0
119   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
121   (LOAD&PUSH 1)
122   (LOAD&PUSH 1)
123   (CALL2&PUSH 7)                      ; DN
125   (LOAD&PUSH 2)
126   (LOAD&PUSH 2)
127   (CALL2&PUSH 8)                      ; CN
129   (CALLSR 1 56)                       ; /
132   (SKIP 2)
134   (JMP L394)
137   L137
137   (CONST 10)                          ; 1
138   (JMP L394)
141   L141
141   (CONST&PUSH 11)                     ; ($SEC)
142   (LOAD&PUSH 5)
143   (LIST 2)
145   (JMP L394)
148   L148
148   (CONST 10)                          ; 1
149   (JMP L394)
152   L152
152   (CONST&PUSH 15)                     ; %JACOBI_DC
153   (LIST&PUSH 1)
155   (LOAD&PUSH 5)
156   (CALL1&PUSH 16)                     ; NEG
158   (GETVALUE 4)                        ; M
160   (JMP L104)
162   L162
162   (LOAD&PUSH 0)
163   (CONST&PUSH 26)                     ; (2 . 2)
164   (CALL2 27)                          ; SYSTEM::DESTRUCTURING-ERROR
166   (JMP L394)
169   L169
169   (LOAD&PUSH 1)
170   (CONST&PUSH 28)                     ; 4
171   (CALLS2&PUSH 183)                   ; MOD
173   (LOAD 0)
174   (JMPHASH 29 L257 L184 L196 L211 L240)
178   L178
178   (CONST 10)                          ; 1
179   (SKIP 3)
181   (JMP L394)
184   L184
184   (LOAD&PUSH 1)
185   (CALL1&JMPIF 9 L178)                ; ZEROP1
188   (CONST 30)                          ; (%JACOBI_DC)
190   (JMP L246)
192   L192
192   (CONST 31)                          ; JACOBI_DC
194   (JMP L232)
196   L196
196   (LOAD&PUSH 1)
197   (CALL1&JMPIF 9 L192)                ; ZEROP1
200   (CONST 33)                          ; (%JACOBI_NS SIMP)
202   (JMP L217)
204   L204
204   (CONST 34)                          ; -1
206   (SKIP 3)
208   (JMP L394)
211   L211
211   (LOAD&PUSH 1)
212   (CALL1&JMPIF 9 L204)                ; ZEROP1
215   (CONST 35)                          ; (%JACOBI_DC)
217   L217
217   (PUSH)
218   (LOAD&PUSH 2)
219   (GETVALUE&PUSH 4)                   ; M
221   (LIST&PUSH 3)
223   (CALL1 16)                          ; NEG
225   (SKIP 3)
227   (JMP L394)
230   L230
230   (CONST 31)                          ; JACOBI_DC
232   L232
232   (PUSH)
233   (CALL1 32)                          ; DBZ-ERR1
235   (SKIP 3)
237   (JMP L394)
240   L240
240   (LOAD&PUSH 1)
241   (CALL1&JMPIF 9 L230)                ; ZEROP1
244   (CONST 36)                          ; (%JACOBI_DC SIMP)
246   L246
246   (PUSH)
247   (LOAD&PUSH 2)
248   (GETVALUE&PUSH 4)                   ; M
250   (LIST 3)
252   (SKIP 3)
254   (JMP L394)
257   L257
257   (CONST&PUSH 37)                     ; TYPE-ERROR
259   (CONST&PUSH 38)                     ; :DATUM
261   (LOAD&PUSH 2)
262   (CONST&PUSH 39)                     ; :EXPECTED-TYPE
264   (CONST&PUSH 40)                     ; (MEMBER 0 1 2 3)
266   (CALL0 41)                          ; SYSTEM::TYPE-ERROR-STRING
268   (PUSH)
269   (CONST&PUSH 42)                     ; (MOD LIN 4)
271   (CONST&PUSH 43)                     ; (0 1 2 3)
273   (CALL2&PUSH 44)                     ; SYSTEM::CASE-ERROR-STRING
275   (LOAD&PUSH 7)
276   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
279   L279
279   (CONST&PUSH 47)                     ; (MTIMES)
281   (CONST&PUSH 48)                     ; (%JACOBI_DN)
283   (CONST&PUSH 49)                     ; (MTIMES)
285   (CONST&PUSH 50)                     ; ((RAT) 1 2)
287   (CONST&PUSH 51)                     ; (%ELLIPTIC_KC)
289   (GETVALUE&PUSH 4)                   ; M
291   (LIST&PUSH 2)
293   (LIST&PUSH 3)
295   (GETVALUE&PUSH 4)                   ; M
297   (LIST&PUSH 3)
299   (CONST&PUSH 52)                     ; (MEXPT)
301   (CONST&PUSH 53)                     ; (%JACOBI_CN)
303   (CONST&PUSH 54)                     ; (MTIMES)
305   (CONST&PUSH 55)                     ; ((RAT) 1 2)
307   (CONST&PUSH 56)                     ; (%ELLIPTIC_KC)
309   (GETVALUE&PUSH 4)                   ; M
311   (LIST&PUSH 2)
313   (LIST&PUSH 3)
315   (GETVALUE&PUSH 4)                   ; M
317   (LIST&PUSH 3)
319   (CONST 57)                          ; (-1)
321   (LIST*&PUSH 2)
323   (LIST 3)
325   (SKIP 2)
327   (JMP L394)
330   L330
330   (PUSH)
331   (CALLS2&PUSH 71)                    ; LENGTH
333   (CONST&PUSH 25)                     ; 2
334   (CALLSR&JMPIF 1 46 L162)            ; /=
339   (LOAD&CAR&PUSH 0)
341   (LOAD 1)
342   (CDR)
343   (CAR&PUSH)
344   (LOAD&PUSH 1)
345   (CALLS2&JMPIF 12 L169)              ; INTEGERP
349   (LOAD&PUSH 1)
350   (GETVALUE&PUSH 45)                  ; |1//2|
352   (CALL2&JMPIFNOT 46 L360)            ; ALIKE1
355   (LOAD&PUSH 0)
356   (CALL1&JMPIF 9 L279)                ; ZEROP1
360   L360
360   (CONST&PUSH 58)                     ; (%JACOBI_DC)
362   (LOAD&PUSH 7)
363   (GETVALUE&PUSH 4)                   ; M
365   (LIST&PUSH 3)
367   (GETVALUE&PUSH 0)                   ; FORM
369   (CALL2 59)                          ; EQTEST
371   (SKIP 2)
373   (JMP L394)
375   L375
375   (LOAD&PUSH 4)
376   (GETVALUE&PUSH 4)                   ; M
378   (CALL2 24)                          ; KC-ARG2
380   (STORE 0)
381   (JMPIF L330)
383   (CONST&PUSH 60)                     ; (%JACOBI_DC)
385   (LOAD&PUSH 5)
386   (GETVALUE&PUSH 4)                   ; M
388   (LIST&PUSH 3)
390   (GETVALUE&PUSH 0)                   ; FORM
392   (CALL2 59)                          ; EQTEST
394   L394
394   (SKIP 1)
396   (UNBIND1)
397   (SKIP 1)
399   (UNBIND 2)
401   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_NS (U M) ...)-99|
(CONST 0) = $INVERSE_JACOBI_NS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_NS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_NS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_NS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_NS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_NS
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_NS
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_NS)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_NS)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_NS (# # #) ...)-100|
(CONST 0) = %INVERSE_JACOBI_NS
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES) -1 ((MEXPT) ((MPLUS) -1 ((MEXPT) X 2)) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) ((MTIMES SIMP RATSIMP) -1 M) ((MEXPT) X 2)) ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_NS) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_NS
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# -1 # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_NS SIMP-%INVERSE_JACOBI_NS ...)-101|
(CONST 0) = %INVERSE_JACOBI_NS
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_NS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_NS
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_NS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_NS in lines 3022..3045 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_NS (FORM Y Z) ...)-102|
(CONST 0) = SIMP-%INVERSE_JACOBI_NS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_NS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_NS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_NS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_NS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_NS
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_NS
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = ELLIPTIC-F
(CONST 7) = ZEROP1
(CONST 8) = (%ELLIPTIC_F)
(CONST 9) = (%ASIN)
(CONST 10) = (MEXPT)
(CONST 11) = (-1)
(CONST 12) = (0)
(CONST 13) = ONEP1
(CONST 14) = (%ELLIPTIC_F)
(CONST 15) = (%ASIN)
(CONST 16) = (MEXPT)
(CONST 17) = (-1)
(CONST 18) = (1)
(CONST 19) = (%ELLIPTIC_KC)
(CONST 20) = -1
(CONST 21) = ALIKE1
(CONST 22) = (%ELLIPTIC_KC)
(CONST 23) = NEG
(CONST 24) = (%INVERSE_JACOBI_NS)
(CONST 25) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
90 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L86)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L86)                ; NUMBERP
49    L49
49    (GETVALUE&PUSH 4)                   ; M
51    (CALL1&JMPIF 7 L98)                 ; ZEROP1
54    (GETVALUE&PUSH 4)                   ; M
56    (CALL1&JMPIF 13 L112)               ; ONEP1
59    (LOAD&PUSH 3)
60    (CALL1&JMPIF 13 L126)               ; ONEP1
63    (LOAD&PUSH 3)
64    (CONST&PUSH 20)                     ; -1
65    (CALL2&JMPIF 21 L133)               ; ALIKE1
69    (CONST&PUSH 24)                     ; (%INVERSE_JACOBI_NS)
70    (LOAD&PUSH 4)
71    (GETVALUE&PUSH 4)                   ; M
73    (LIST&PUSH 3)
75    (GETVALUE&PUSH 0)                   ; FORM
77    (CALL2 25)                          ; EQTEST
79    L79
79    (UNBIND1)
80    (SKIP 1)
82    (UNBIND 2)
84    (SKIP&RET 4)
86    L86
86    (LOAD&PUSH 3)
87    (CALLSR&PUSH 0 56)                  ; /
90    (CALLS2&PUSH 165)                   ; COMMON-LISP:ASIN
92    (GETVALUE&PUSH 4)                   ; M
94    (CALL2 6)                           ; ELLIPTIC-F
96    (JMP L79)
98    L98
98    (CONST&PUSH 8)                      ; (%ELLIPTIC_F)
99    (CONST&PUSH 9)                      ; (%ASIN)
100   (CONST&PUSH 10)                     ; (MEXPT)
101   (LOAD&PUSH 6)
102   (CONST 11)                          ; (-1)
103   (LIST*&PUSH 2)
105   (LIST&PUSH 2)
107   (CONST 12)                          ; (0)
108   (LIST* 2)
110   (JMP L79)
112   L112
112   (CONST&PUSH 14)                     ; (%ELLIPTIC_F)
113   (CONST&PUSH 15)                     ; (%ASIN)
114   (CONST&PUSH 16)                     ; (MEXPT)
115   (LOAD&PUSH 6)
116   (CONST 17)                          ; (-1)
117   (LIST*&PUSH 2)
119   (LIST&PUSH 2)
121   (CONST 18)                          ; (1)
122   (LIST* 2)
124   (JMP L79)
126   L126
126   (CONST&PUSH 19)                     ; (%ELLIPTIC_KC)
127   (GETVALUE&PUSH 4)                   ; M
129   (LIST 2)
131   (JMP L79)
133   L133
133   (CONST&PUSH 22)                     ; (%ELLIPTIC_KC)
134   (GETVALUE&PUSH 4)                   ; M
136   (LIST&PUSH 2)
138   (CALL1 23)                          ; NEG
140   (JMP L79)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_NC (U M) ...)-103|
(CONST 0) = $INVERSE_JACOBI_NC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_NC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_NC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_NC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_NC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_NC
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_NC
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_NC)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_NC)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_NC (# # #) ...)-104|
(CONST 0) = %INVERSE_JACOBI_NC
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES) ((MEXPT) ((MPLUS) -1 ((MEXPT) X 2)) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) ((MTIMES SIMP RATSIMP) -1 M) ((MEXPT) X 2)) ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_NC) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_NC
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_NC SIMP-%INVERSE_JACOBI_NC ...)-105|
(CONST 0) = %INVERSE_JACOBI_NC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_NC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_NC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_NC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_NC in lines 3073..3088 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_NC (FORM Y Z) ...)-106|
(CONST 0) = SIMP-%INVERSE_JACOBI_NC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_NC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_NC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_NC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_NC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_NC
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_NC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = $INVERSE_JACOBI_CN
(CONST 7) = ONEP1
(CONST 8) = 0
(CONST 9) = -1
(CONST 10) = ALIKE1
(CONST 11) = (MTIMES)
(CONST 12) = 2
(CONST 13) = (%ELLIPTIC_KC)
(CONST 14) = (%INVERSE_JACOBI_NC)
(CONST 15) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
63 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L75)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L75)                ; NUMBERP
49    L49
49    (LOAD&PUSH 3)
50    (CALL1&JMPIF 7 L85)                 ; ONEP1
53    (LOAD&PUSH 3)
54    (CONST&PUSH 9)                      ; -1
55    (CALL2&JMPIF 10 L88)                ; ALIKE1
58    (CONST&PUSH 14)                     ; (%INVERSE_JACOBI_NC)
59    (LOAD&PUSH 4)
60    (GETVALUE&PUSH 4)                   ; M
62    (LIST&PUSH 3)
64    (GETVALUE&PUSH 0)                   ; FORM
66    (CALL2 15)                          ; EQTEST
68    L68
68    (UNBIND1)
69    (SKIP 1)
71    (UNBIND 2)
73    (SKIP&RET 4)
75    L75
75    (LOAD&PUSH 3)
76    (CALLSR&PUSH 0 56)                  ; /
79    (GETVALUE&PUSH 4)                   ; M
81    (CALL2 6)                           ; $INVERSE_JACOBI_CN
83    (JMP L68)
85    L85
85    (CONST 8)                           ; 0
86    (JMP L68)
88    L88
88    (CONST&PUSH 11)                     ; (MTIMES)
89    (CONST&PUSH 12)                     ; 2
90    (CONST&PUSH 13)                     ; (%ELLIPTIC_KC)
91    (GETVALUE&PUSH 4)                   ; M
93    (LIST&PUSH 2)
95    (LIST 3)
97    (JMP L68)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_ND (U M) ...)-107|
(CONST 0) = $INVERSE_JACOBI_ND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_ND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_ND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_ND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_ND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_ND
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_ND
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_ND)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_ND)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_ND (# # #) ...)-108|
(CONST 0) = %INVERSE_JACOBI_ND
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES) -1 ((MEXPT) ((MPLUS) -1 ((MEXPT SIMP RATSIMP) X 2)) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) 1 ((MTIMES) ((MPLUS) -1 M) ((MEXPT SIMP RATSIMP) X 2)))
   ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_ND) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_ND
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# -1 # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_ND SIMP-%INVERSE_JACOBI_ND ...)-109|
(CONST 0) = %INVERSE_JACOBI_ND
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_ND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_ND
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_ND
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_ND in lines 3118..3130 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_ND (FORM Y Z) ...)-110|
(CONST 0) = SIMP-%INVERSE_JACOBI_ND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_ND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_ND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_ND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_ND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_ND
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_ND
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = $INVERSE_JACOBI_DN
(CONST 7) = ONEP1
(CONST 8) = (%ELLIPTIC_KC)
(CONST 9) = (%INVERSE_JACOBI_ND)
(CONST 10) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
54 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L70)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L70)                ; NUMBERP
49    L49
49    (LOAD&PUSH 3)
50    (CALL1&JMPIF 7 L80)                 ; ONEP1
53    (CONST&PUSH 9)                      ; (%INVERSE_JACOBI_ND)
54    (LOAD&PUSH 4)
55    (GETVALUE&PUSH 4)                   ; M
57    (LIST&PUSH 3)
59    (GETVALUE&PUSH 0)                   ; FORM
61    (CALL2 10)                          ; EQTEST
63    L63
63    (UNBIND1)
64    (SKIP 1)
66    (UNBIND 2)
68    (SKIP&RET 4)
70    L70
70    (LOAD&PUSH 3)
71    (CALLSR&PUSH 0 56)                  ; /
74    (GETVALUE&PUSH 4)                   ; M
76    (CALL2 6)                           ; $INVERSE_JACOBI_DN
78    (JMP L63)
80    L80
80    (CONST&PUSH 8)                      ; (%ELLIPTIC_KC)
81    (GETVALUE&PUSH 4)                   ; M
83    (LIST 2)
85    (JMP L63)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_SC (U M) ...)-111|
(CONST 0) = $INVERSE_JACOBI_SC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_SC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_SC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_SC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_SC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_SC
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_SC
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_SC)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_SC)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_SC (# # #) ...)-112|
(CONST 0) = %INVERSE_JACOBI_SC
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES) ((MEXPT) ((MPLUS) 1 ((MEXPT) X 2)) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 ((MPLUS) -1 M) ((MEXPT) X 2)))
   ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_SC) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_SC
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_SC SIMP-%INVERSE_JACOBI_SC ...)-113|
(CONST 0) = %INVERSE_JACOBI_SC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_SC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_SC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_SC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_SC in lines 3167..3177 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_SC (FORM Y Z) ...)-114|
(CONST 0) = SIMP-%INVERSE_JACOBI_SC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_SC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_SC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_SC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_SC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_SC
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_SC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = $INVERSE_JACOBI_SN
(CONST 7) = (%INVERSE_JACOBI_SC)
(CONST 8) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
52 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L66)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L66)                ; NUMBERP
49    L49
49    (CONST&PUSH 7)                      ; (%INVERSE_JACOBI_SC)
50    (LOAD&PUSH 4)
51    (GETVALUE&PUSH 4)                   ; M
53    (LIST&PUSH 3)
55    (GETVALUE&PUSH 0)                   ; FORM
57    (CALL2 8)                           ; EQTEST
59    L59
59    (UNBIND1)
60    (SKIP 1)
62    (UNBIND 2)
64    (SKIP&RET 4)
66    L66
66    (LOAD&PUSH 3)
67    (LOAD&PUSH 4)
68    (LOAD&PUSH 5)
69    (CALLSR&PUSH 2 55)                  ; *
72    (CALLS2&PUSH 150)                   ; 1+
74    (CALLS2&PUSH 156)                   ; SQRT
76    (CALLSR&PUSH 1 56)                  ; /
79    (GETVALUE&PUSH 4)                   ; M
81    (CALL2 6)                           ; $INVERSE_JACOBI_SN
83    (JMP L59)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_SD (U M) ...)-115|
(CONST 0) = $INVERSE_JACOBI_SD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_SD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_SD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_SD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_SD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_SD
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_SD
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_SD)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_SD)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_SD (# # #) ...)-116|
(CONST 0) = %INVERSE_JACOBI_SD
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES)
  ((MEXPT) ((MPLUS) 1 ((MTIMES) ((MPLUS) -1 M) ((MEXPT) X 2))) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) 1 ((MTIMES) M ((MEXPT) X 2))) ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_SD) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_SD
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_SD SIMP-%INVERSE_JACOBI_SD ...)-117|
(CONST 0) = %INVERSE_JACOBI_SD
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_SD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_SD
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_SD
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_SD in lines 3213..3225 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_SD (FORM Y Z) ...)-118|
(CONST 0) = SIMP-%INVERSE_JACOBI_SD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_SD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_SD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_SD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_SD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_SD
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_SD
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = $INVERSE_JACOBI_SN
(CONST 7) = ZEROP1
(CONST 8) = 0
(CONST 9) = (%INVERSE_JACOBI_SD)
(CONST 10) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
58 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L70)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L70)                ; NUMBERP
49    L49
49    (LOAD&PUSH 3)
50    (CALL1&JMPIF 7 L91)                 ; ZEROP1
53    (CONST&PUSH 9)                      ; (%INVERSE_JACOBI_SD)
54    (LOAD&PUSH 4)
55    (GETVALUE&PUSH 4)                   ; M
57    (LIST&PUSH 3)
59    (GETVALUE&PUSH 0)                   ; FORM
61    (CALL2 10)                          ; EQTEST
63    L63
63    (UNBIND1)
64    (SKIP 1)
66    (UNBIND 2)
68    (SKIP&RET 4)
70    L70
70    (LOAD&PUSH 3)
71    (GETVALUE&PUSH 4)                   ; M
73    (LOAD&PUSH 5)
74    (LOAD&PUSH 6)
75    (CALLSR&PUSH 3 55)                  ; *
78    (CALLS2&PUSH 150)                   ; 1+
80    (CALLS2&PUSH 156)                   ; SQRT
82    (CALLSR&PUSH 1 56)                  ; /
85    (GETVALUE&PUSH 4)                   ; M
87    (CALL2 6)                           ; $INVERSE_JACOBI_SN
89    (JMP L63)
91    L91
91    (CONST 8)                           ; 0
92    (JMP L63)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_CS (U M) ...)-119|
(CONST 0) = $INVERSE_JACOBI_CS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_CS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_CS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_CS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_CS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_CS
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_CS
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_CS)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_CS)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_CS (# # #) ...)-120|
(CONST 0) = %INVERSE_JACOBI_CS
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES) -1 ((MEXPT) ((MPLUS) 1 ((MEXPT SIMP RATSIMP) X 2)) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) 1 ((MTIMES SIMP RATSIMP) -1 M) ((MEXPT SIMP RATSIMP) X 2))
   ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_CS) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_CS
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# -1 # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_CS SIMP-%INVERSE_JACOBI_CS ...)-121|
(CONST 0) = %INVERSE_JACOBI_CS
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_CS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_CS
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_CS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_CS in lines 3253..3265 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_CS (FORM Y Z) ...)-122|
(CONST 0) = SIMP-%INVERSE_JACOBI_CS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_CS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_CS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_CS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_CS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_CS
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_CS
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = $INVERSE_JACOBI_SC
(CONST 7) = ZEROP1
(CONST 8) = (%ELLIPTIC_KC)
(CONST 9) = (%INVERSE_JACOBI_CS)
(CONST 10) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
54 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L70)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L70)                ; NUMBERP
49    L49
49    (LOAD&PUSH 3)
50    (CALL1&JMPIF 7 L80)                 ; ZEROP1
53    (CONST&PUSH 9)                      ; (%INVERSE_JACOBI_CS)
54    (LOAD&PUSH 4)
55    (GETVALUE&PUSH 4)                   ; M
57    (LIST&PUSH 3)
59    (GETVALUE&PUSH 0)                   ; FORM
61    (CALL2 10)                          ; EQTEST
63    L63
63    (UNBIND1)
64    (SKIP 1)
66    (UNBIND 2)
68    (SKIP&RET 4)
70    L70
70    (LOAD&PUSH 3)
71    (CALLSR&PUSH 0 56)                  ; /
74    (GETVALUE&PUSH 4)                   ; M
76    (CALL2 6)                           ; $INVERSE_JACOBI_SC
78    (JMP L63)
80    L80
80    (CONST&PUSH 8)                      ; (%ELLIPTIC_KC)
81    (GETVALUE&PUSH 4)                   ; M
83    (LIST 2)
85    (JMP L63)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_CD (U M) ...)-123|
(CONST 0) = $INVERSE_JACOBI_CD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_CD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_CD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_CD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_CD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_CD
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_CD
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_CD)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_CD)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_CD (# # #) ...)-124|
(CONST 0) = %INVERSE_JACOBI_CD
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES) ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 ((MEXPT) X 2))) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) 1 ((MTIMES) -1 M ((MEXPT) X 2))) ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_CD) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_CD
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_CD SIMP-%INVERSE_JACOBI_CD ...)-125|
(CONST 0) = %INVERSE_JACOBI_CD
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_CD
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_CD
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_CD
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_CD in lines 3302..3317 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_CD (FORM Y Z) ...)-126|
(CONST 0) = SIMP-%INVERSE_JACOBI_CD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_CD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_CD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_CD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_CD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_CD
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_CD
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = 1
(CONST 7) = $INVERSE_JACOBI_SN
(CONST 8) = ONEP1
(CONST 9) = 0
(CONST 10) = ZEROP1
(CONST 11) = (%ELLIPTIC_KC)
(CONST 12) = (%INVERSE_JACOBI_CD)
(CONST 13) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
71 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L74)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L74)                ; NUMBERP
49    L49
49    (LOAD&PUSH 3)
50    (CALL1&JMPIF 8 L108)                ; ONEP1
53    (LOAD&PUSH 3)
54    (CALL1&JMPIF 10 L111)               ; ZEROP1
57    (CONST&PUSH 12)                     ; (%INVERSE_JACOBI_CD)
58    (LOAD&PUSH 4)
59    (GETVALUE&PUSH 4)                   ; M
61    (LIST&PUSH 3)
63    (GETVALUE&PUSH 0)                   ; FORM
65    (CALL2 13)                          ; EQTEST
67    L67
67    (UNBIND1)
68    (SKIP 1)
70    (UNBIND 2)
72    (SKIP&RET 4)
74    L74
74    (CONST&PUSH 6)                      ; 1
75    (LOAD&PUSH 4)
76    (CALLSR&PUSH 1 54)                  ; -
79    (LOAD&INC&PUSH 4)
81    (CALLSR&PUSH 2 55)                  ; *
84    (CALLS2&PUSH 156)                   ; SQRT
86    (CONST&PUSH 6)                      ; 1
87    (GETVALUE&PUSH 4)                   ; M
89    (LOAD&PUSH 6)
90    (LOAD&PUSH 7)
91    (CALLSR&PUSH 3 55)                  ; *
94    (CALLSR&PUSH 1 54)                  ; -
97    (CALLS2&PUSH 156)                   ; SQRT
99    (CALLSR&PUSH 1 56)                  ; /
102   (GETVALUE&PUSH 4)                   ; M
104   (CALL2 7)                           ; $INVERSE_JACOBI_SN
106   (JMP L67)
108   L108
108   (CONST 9)                           ; 0
109   (JMP L67)
111   L111
111   (CONST&PUSH 11)                     ; (%ELLIPTIC_KC)
112   (GETVALUE&PUSH 4)                   ; M
114   (LIST 2)
116   (JMP L67)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_DS (U M) ...)-127|
(CONST 0) = $INVERSE_JACOBI_DS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_DS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_DS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_DS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_DS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_DS
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_DS
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_DS)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_DS)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_DS (# # #) ...)-128|
(CONST 0) = %INVERSE_JACOBI_DS
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES) -1 ((MEXPT) ((MPLUS) -1 M ((MEXPT SIMP RATSIMP) X 2)) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) M ((MEXPT SIMP RATSIMP) X 2)) ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_DS) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_DS
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# -1 # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_DS SIMP-%INVERSE_JACOBI_DS ...)-129|
(CONST 0) = %INVERSE_JACOBI_DS
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_DS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_DS
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_DS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_DS in lines 3345..3357 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_DS (FORM Y Z) ...)-130|
(CONST 0) = SIMP-%INVERSE_JACOBI_DS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_DS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_DS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_DS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_DS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_DS
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_DS
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = $INVERSE_JACOBI_SD
(CONST 7) = $TRIGSIGN
(CONST 8) = MMINUSP*
(CONST 9) = %INVERSE_JACOBI_DS
(CONST 10) = NEG
(CONST 11) = SIMPLIFY
(CONST 12) = (%INVERSE_JACOBI_DS)
(CONST 13) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $NUMER M FORM)
62 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L74)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L74)                ; NUMBERP
49    L49
49    (GETVALUE 7)                        ; $TRIGSIGN
51    (JMPIFNOT L57)
53    (LOAD&PUSH 3)
54    (CALL1&JMPIF 8 L84)                 ; MMINUSP*
57    L57
57    (CONST&PUSH 12)                     ; (%INVERSE_JACOBI_DS)
58    (LOAD&PUSH 4)
59    (GETVALUE&PUSH 4)                   ; M
61    (LIST&PUSH 3)
63    (GETVALUE&PUSH 0)                   ; FORM
65    (CALL2 13)                          ; EQTEST
67    L67
67    (UNBIND1)
68    (SKIP 1)
70    (UNBIND 2)
72    (SKIP&RET 4)
74    L74
74    (LOAD&PUSH 3)
75    (CALLSR&PUSH 0 56)                  ; /
78    (GETVALUE&PUSH 4)                   ; M
80    (CALL2 6)                           ; $INVERSE_JACOBI_SD
82    (JMP L67)
84    L84
84    (CONST&PUSH 9)                      ; %INVERSE_JACOBI_DS
85    (LIST&PUSH 1)
87    (LOAD&PUSH 4)
88    (CALL1&PUSH 10)                     ; NEG
90    (GETVALUE&PUSH 4)                   ; M
92    (LIST&PUSH 3)
94    (CALL1&PUSH 11)                     ; SIMPLIFY
96    (CALL1 10)                          ; NEG
98    (JMP L67)


Disassembly of function #:|(DEFMFUN $INVERSE_JACOBI_DC (U M) ...)-131|
(CONST 0) = $INVERSE_JACOBI_DC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INVERSE_JACOBI_DC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_DC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INVERSE_JACOBI_DC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INVERSE_JACOBI_DC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INVERSE_JACOBI_DC
8     (SKIP&RET 1)


Disassembly of function $INVERSE_JACOBI_DC
(CONST 0) = M
(CONST 1) = (%INVERSE_JACOBI_DC)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%INVERSE_JACOBI_DC)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_DC (# # #) ...)-132|
(CONST 0) = %INVERSE_JACOBI_DC
(CONST 1) = GRAD
(CONST 2) = 
((X M)
 ((MTIMES) -1 ((MEXPT) ((MPLUS) -1 ((MEXPT SIMP RATSIMP) X 2)) ((RAT) -1 2))
  ((MEXPT) ((MPLUS) ((MTIMES SIMP RATSIMP) -1 M) ((MEXPT SIMP RATSIMP) X 2))
   ((RAT) -1 2)))
 ((%DERIVATIVE) ((%INVERSE_JACOBI_DC) X M) M 1))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_DC
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((X M) (# -1 # #) (# # M 1))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %INVERSE_JACOBI_DC SIMP-%INVERSE_JACOBI_DC ...)-133|
(CONST 0) = %INVERSE_JACOBI_DC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%INVERSE_JACOBI_DC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %INVERSE_JACOBI_DC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%INVERSE_JACOBI_DC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-%INVERSE_JACOBI_DC in lines 3388..3398 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-%INVERSE_JACOBI_DC (FORM Y Z) ...)-134|
(CONST 0) = SIMP-%INVERSE_JACOBI_DC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_DC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_DC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%INVERSE_JACOBI_DC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%INVERSE_JACOBI_DC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%INVERSE_JACOBI_DC
8     (SKIP&RET 1)


Disassembly of function SIMP-%INVERSE_JACOBI_DC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = $INVERSE_JACOBI_CD
(CONST 7) = (%INVERSE_JACOBI_DC)
(CONST 8) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
47 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L66)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L66)                ; NUMBERP
49    L49
49    (CONST&PUSH 7)                      ; (%INVERSE_JACOBI_DC)
50    (LOAD&PUSH 4)
51    (GETVALUE&PUSH 4)                   ; M
53    (LIST&PUSH 3)
55    (GETVALUE&PUSH 0)                   ; FORM
57    (CALL2 8)                           ; EQTEST
59    L59
59    (UNBIND1)
60    (SKIP 1)
62    (UNBIND 2)
64    (SKIP&RET 4)
66    L66
66    (LOAD&PUSH 3)
67    (CALLSR&PUSH 0 56)                  ; /
70    (GETVALUE&PUSH 4)                   ; M
72    (CALL2 6)                           ; $INVERSE_JACOBI_CD
74    (JMP L59)


Disassembly of function #:|(DEFUN MAKE-ELLIPTIC-F (E) ...)-135|
(CONST 0) = MAKE-ELLIPTIC-F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-ELLIPTIC-F>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-ELLIPTIC-F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-ELLIPTIC-F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-ELLIPTIC-F>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-ELLIPTIC-F
8     (SKIP&RET 1)


Disassembly of function MAKE-ELLIPTIC-F
(CONST 0) = 
(%INVERSE_JACOBI_SC %INVERSE_JACOBI_CS %INVERSE_JACOBI_ND %INVERSE_JACOBI_DN
 %INVERSE_JACOBI_SN %INVERSE_JACOBI_CD %INVERSE_JACOBI_DC %INVERSE_JACOBI_NS
 %INVERSE_JACOBI_NC %INVERSE_JACOBI_DS %INVERSE_JACOBI_SD %INVERSE_JACOBI_CN)
(CONST 1) = 3
(CONST 2) = (3 . 3)
(CONST 3) = SYSTEM::DESTRUCTURING-ERROR
(CONST 4) = FN
(CONST 5) = M
(CONST 6) = 
#S(HASH-TABLE EQ (%INVERSE_JACOBI_CN . 317) (%INVERSE_JACOBI_SD . 260)
   (%INVERSE_JACOBI_DS . 235) (%INVERSE_JACOBI_NC . 221)
   (%INVERSE_JACOBI_NS . 207) (%INVERSE_JACOBI_DC . 154)
   (%INVERSE_JACOBI_CD . 93) (%INVERSE_JACOBI_SN . 86)
   (%INVERSE_JACOBI_DN . 51) (%INVERSE_JACOBI_ND . 17) (%INVERSE_JACOBI_CS . 7)
   (%INVERSE_JACOBI_SC . 2))
(CONST 7) = ($ELLIPTIC_F)
(CONST 8) = (%ATAN)
(CONST 9) = ($ELLIPTIC_F)
(CONST 10) = (%ATAN)
(CONST 11) = (MEXPT)
(CONST 12) = (-1)
(CONST 13) = ($ELLIPTIC_F)
(CONST 14) = (%ASIN)
(CONST 15) = (MTIMES)
(CONST 16) = (MEXPT)
(CONST 17) = (((RAT) -1 2))
(CONST 18) = (MEXPT)
(CONST 19) = (-1)
(CONST 20) = (MEXPT)
(CONST 21) = (MPLUS)
(CONST 22) = -1
(CONST 23) = (MEXPT)
(CONST 24) = (2)
(CONST 25) = (((RAT) 1 2))
(CONST 26) = ($ELLIPTIC_F)
(CONST 27) = (%ASIN)
(CONST 28) = (MTIMES)
(CONST 29) = (MEXPT)
(CONST 30) = (((RAT) -1 2))
(CONST 31) = (MEXPT)
(CONST 32) = (MPLUS)
(CONST 33) = 1
(CONST 34) = (MTIMES)
(CONST 35) = (MEXPT)
(CONST 36) = (2)
(CONST 37) = (((RAT) 1 2))
(CONST 38) = ($ELLIPTIC_F)
(CONST 39) = (%ASIN)
(CONST 40) = ($ELLIPTIC_F)
(CONST 41) = (%ASIN)
(CONST 42) = (MEXPT)
(CONST 43) = (MTIMES)
(CONST 44) = (MPLUS)
(CONST 45) = (MTIMES)
(CONST 46) = (MEXPT)
(CONST 47) = (2)
(CONST 48) = (MEXPT)
(CONST 49) = (MPLUS)
(CONST 50) = (MTIMES)
(CONST 51) = (MEXPT)
(CONST 52) = (2)
(CONST 53) = (-1)
(CONST 54) = (((RAT) 1 2))
(CONST 55) = ($ELLIPTIC_F)
(CONST 56) = (%ASIN)
(CONST 57) = (MEXPT)
(CONST 58) = (MTIMES)
(CONST 59) = (MPLUS)
(CONST 60) = (MEXPT)
(CONST 61) = (2)
(CONST 62) = (MEXPT)
(CONST 63) = (MPLUS)
(CONST 64) = (MTIMES)
(CONST 65) = (MEXPT)
(CONST 66) = (2)
(CONST 67) = (-1)
(CONST 68) = (((RAT) 1 2))
(CONST 69) = ($ELLIPTIC_F)
(CONST 70) = (ASIN)
(CONST 71) = (MEXPT)
(CONST 72) = (-1)
(CONST 73) = ($ELLIPTIC_F)
(CONST 74) = (ACOS)
(CONST 75) = (MEXPT)
(CONST 76) = (-1)
(CONST 77) = ($ELLIPTIC_F)
(CONST 78) = (%ASIN)
(CONST 79) = (MEXPT)
(CONST 80) = (MPLUS)
(CONST 81) = (MEXPT)
(CONST 82) = (2)
(CONST 83) = (((RAT) -1 2))
(CONST 84) = ($ELLIPTIC_F)
(CONST 85) = (%ASIN)
(CONST 86) = (MTIMES)
(CONST 87) = (MEXPT)
(CONST 88) = (MPLUS)
(CONST 89) = (MTIMES)
(CONST 90) = (MEXPT)
(CONST 91) = (2)
(CONST 92) = (((RAT) -1 2))
(CONST 93) = ($ELLIPTIC_F)
(CONST 94) = (%ACOS)
(CONST 95) = TYPE-ERROR
(CONST 96) = :DATUM
(CONST 97) = :EXPECTED-TYPE
(CONST 98) = 
(MEMBER %INVERSE_JACOBI_SC %INVERSE_JACOBI_CS %INVERSE_JACOBI_ND
 %INVERSE_JACOBI_DN %INVERSE_JACOBI_SN %INVERSE_JACOBI_CD %INVERSE_JACOBI_DC
 %INVERSE_JACOBI_NS %INVERSE_JACOBI_NC %INVERSE_JACOBI_DS %INVERSE_JACOBI_SD
 %INVERSE_JACOBI_CN)
(CONST 99) = SYSTEM::TYPE-ERROR-STRING
(CONST 100) = 
(%INVERSE_JACOBI_SC %INVERSE_JACOBI_CS %INVERSE_JACOBI_ND %INVERSE_JACOBI_DN
 %INVERSE_JACOBI_SN %INVERSE_JACOBI_CD %INVERSE_JACOBI_DC %INVERSE_JACOBI_NS
 %INVERSE_JACOBI_NC %INVERSE_JACOBI_DS %INVERSE_JACOBI_SD %INVERSE_JACOBI_CN)
(CONST 101) = SYSTEM::CASE-ERROR-STRING
(CONST 102) = MAKE-ELLIPTIC-F
(CONST 103) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M FN)
243 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L19)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (CONST&PUSH 0)                      ; (%INVERSE_JACOBI_SC ...)
7     (PUSH-UNBOUND 3)
9     (CALLS1&JMPIF 180 L28)              ; MEMBER
12    (CONST&SYMBOL-FUNCTION&PUSH 102)    ; MAKE-ELLIPTIC-F
14    (LOAD&PUSH 2)
15    (CALL2 103)                         ; RECUR-APPLY
17    (SKIP&RET 2)
19    L19
19    (LOAD 1)
20    (SKIP&RET 2)
22    L22
22    (LOAD&PUSH 1)
23    (CONST&PUSH 2)                      ; (3 . 3)
24    (CALL2 3)                           ; SYSTEM::DESTRUCTURING-ERROR
26    (SKIP&RET 2)
28    L28
28    (LOAD&PUSH 1)
29    (CALLS2&PUSH 71)                    ; LENGTH
31    (CONST&PUSH 1)                      ; 3
32    (CALLSR&JMPIF 1 46 L22)             ; /=
36    (LOAD 1)
37    (CAR)
38    (CAR)
39    (BIND 4)                            ; FN
41    (LOAD 4)
42    (CDR)
43    (CAR&PUSH)
44    (LOAD 5)
45    (CDR)
46    (CDR)
47    (CAR)
48    (BIND 5)                            ; M
50    (GETVALUE&PUSH 4)                   ; FN
52    (LOAD 0)
53    (JMPHASH 6 L351 L57 L62 L72 L106 L141 L148 L209 L262 L276 L290 L315 L372)
57    L57
57    (CONST&PUSH 7)                      ; ($ELLIPTIC_F)
58    (CONST 8)                           ; (%ATAN)
59    (JMP L376)
62    L62
62    (CONST&PUSH 9)                      ; ($ELLIPTIC_F)
63    (CONST&PUSH 10)                     ; (%ATAN)
64    (CONST&PUSH 11)                     ; (MEXPT)
65    (LOAD&PUSH 7)
66    (CONST 12)                          ; (-1)
67    (LIST* 2)
69    (JMP L378)
72    L72
72    (CONST&PUSH 13)                     ; ($ELLIPTIC_F)
73    (CONST&PUSH 14)                     ; (%ASIN)
74    (CONST&PUSH 15)                     ; (MTIMES)
75    (CONST&PUSH 16)                     ; (MEXPT)
76    (GETVALUE&PUSH 5)                   ; M
78    (CONST 17)                          ; (((RAT) -1 2))
79    (LIST*&PUSH 2)
81    (CONST&PUSH 18)                     ; (MEXPT)
82    (LOAD&PUSH 9)
83    (CONST 19)                          ; (-1)
84    (LIST*&PUSH 2)
86    (CONST&PUSH 20)                     ; (MEXPT)
87    (CONST&PUSH 21)                     ; (MPLUS)
88    (CONST&PUSH 22)                     ; -1
89    (CONST&PUSH 23)                     ; (MEXPT)
90    (LOAD&PUSH 13)
91    (CONST 24)                          ; (2)
93    (LIST*&PUSH 2)
95    (LIST&PUSH 3)
97    (CONST 25)                          ; (((RAT) 1 2))
99    (LIST*&PUSH 2)
101   (LIST 4)
103   (JMP L378)
106   L106
106   (CONST&PUSH 26)                     ; ($ELLIPTIC_F)
107   (CONST&PUSH 27)                     ; (%ASIN)
108   (CONST&PUSH 28)                     ; (MTIMES)
109   (CONST&PUSH 29)                     ; (MEXPT)
110   (GETVALUE&PUSH 5)                   ; M
112   (CONST 30)                          ; (((RAT) -1 2))
114   (LIST*&PUSH 2)
116   (CONST&PUSH 31)                     ; (MEXPT)
118   (CONST&PUSH 32)                     ; (MPLUS)
120   (CONST&PUSH 33)                     ; 1
122   (CONST&PUSH 34)                     ; (MTIMES)
124   (CONST&PUSH 22)                     ; -1
125   (CONST&PUSH 35)                     ; (MEXPT)
127   (LOAD&PUSH 14)
128   (CONST 36)                          ; (2)
130   (LIST*&PUSH 2)
132   (LIST&PUSH 3)
134   (LIST&PUSH 3)
136   (CONST 37)                          ; (((RAT) 1 2))
138   (JMP L345)
141   L141
141   (CONST&PUSH 38)                     ; ($ELLIPTIC_F)
143   (CONST 39)                          ; (%ASIN)
145   (JMP L376)
148   L148
148   (CONST&PUSH 40)                     ; ($ELLIPTIC_F)
150   (CONST&PUSH 41)                     ; (%ASIN)
152   (CONST&PUSH 42)                     ; (MEXPT)
154   (CONST&PUSH 43)                     ; (MTIMES)
156   (CONST&PUSH 44)                     ; (MPLUS)
158   (CONST&PUSH 33)                     ; 1
160   (CONST&PUSH 45)                     ; (MTIMES)
162   (CONST&PUSH 22)                     ; -1
163   (CONST&PUSH 46)                     ; (MEXPT)
165   (LOAD&PUSH 13)
166   (CONST 47)                          ; (2)
168   (LIST*&PUSH 2)
170   (LIST&PUSH 3)
172   (LIST&PUSH 3)
174   (CONST&PUSH 48)                     ; (MEXPT)
176   (CONST&PUSH 49)                     ; (MPLUS)
178   (CONST&PUSH 33)                     ; 1
180   (CONST&PUSH 50)                     ; (MTIMES)
182   (CONST&PUSH 22)                     ; -1
183   (GETVALUE&PUSH 5)                   ; M
185   (CONST&PUSH 51)                     ; (MEXPT)
187   (LOAD&PUSH 16)
188   (CONST 52)                          ; (2)
190   (LIST*&PUSH 2)
192   (LIST&PUSH 4)
194   (LIST&PUSH 3)
196   (CONST 53)                          ; (-1)
198   (LIST*&PUSH 2)
200   (LIST&PUSH 3)
202   (CONST 54)                          ; (((RAT) 1 2))
204   (LIST* 2)
206   (JMP L378)
209   L209
209   (CONST&PUSH 55)                     ; ($ELLIPTIC_F)
211   (CONST&PUSH 56)                     ; (%ASIN)
213   (CONST&PUSH 57)                     ; (MEXPT)
215   (CONST&PUSH 58)                     ; (MTIMES)
217   (CONST&PUSH 59)                     ; (MPLUS)
219   (CONST&PUSH 22)                     ; -1
220   (CONST&PUSH 60)                     ; (MEXPT)
222   (LOAD&PUSH 11)
223   (CONST 61)                          ; (2)
225   (LIST*&PUSH 2)
227   (LIST&PUSH 3)
229   (CONST&PUSH 62)                     ; (MEXPT)
231   (CONST&PUSH 63)                     ; (MPLUS)
233   (CONST&PUSH 64)                     ; (MTIMES)
235   (CONST&PUSH 22)                     ; -1
236   (GETVALUE&PUSH 5)                   ; M
238   (LIST&PUSH 3)
240   (CONST&PUSH 65)                     ; (MEXPT)
242   (LOAD&PUSH 13)
243   (CONST 66)                          ; (2)
245   (LIST*&PUSH 2)
247   (LIST&PUSH 3)
249   (CONST 67)                          ; (-1)
251   (LIST*&PUSH 2)
253   (LIST&PUSH 3)
255   (CONST 68)                          ; (((RAT) 1 2))
257   (LIST* 2)
259   (JMP L378)
262   L262
262   (CONST&PUSH 69)                     ; ($ELLIPTIC_F)
264   (CONST&PUSH 70)                     ; (ASIN)
266   (CONST&PUSH 71)                     ; (MEXPT)
268   (LOAD&PUSH 7)
269   (CONST 72)                          ; (-1)
271   (LIST* 2)
273   (JMP L378)
276   L276
276   (CONST&PUSH 73)                     ; ($ELLIPTIC_F)
278   (CONST&PUSH 74)                     ; (ACOS)
280   (CONST&PUSH 75)                     ; (MEXPT)
282   (LOAD&PUSH 7)
283   (CONST 76)                          ; (-1)
285   (LIST* 2)
287   (JMP L378)
290   L290
290   (CONST&PUSH 77)                     ; ($ELLIPTIC_F)
292   (CONST&PUSH 78)                     ; (%ASIN)
294   (CONST&PUSH 79)                     ; (MEXPT)
296   (CONST&PUSH 80)                     ; (MPLUS)
298   (GETVALUE&PUSH 5)                   ; M
300   (CONST&PUSH 81)                     ; (MEXPT)
302   (LOAD&PUSH 10)
303   (CONST 82)                          ; (2)
305   (LIST*&PUSH 2)
307   (LIST&PUSH 3)
309   (CONST 83)                          ; (((RAT) -1 2))
311   (LIST* 2)
313   (JMP L378)
315   L315
315   (CONST&PUSH 84)                     ; ($ELLIPTIC_F)
317   (CONST&PUSH 85)                     ; (%ASIN)
319   (CONST&PUSH 86)                     ; (MTIMES)
321   (LOAD&PUSH 7)
322   (CONST&PUSH 87)                     ; (MEXPT)
324   (CONST&PUSH 88)                     ; (MPLUS)
326   (CONST&PUSH 33)                     ; 1
328   (CONST&PUSH 89)                     ; (MTIMES)
330   (GETVALUE&PUSH 5)                   ; M
332   (CONST&PUSH 90)                     ; (MEXPT)
334   (LOAD&PUSH 14)
335   (CONST 91)                          ; (2)
337   (LIST*&PUSH 2)
339   (LIST&PUSH 3)
341   (LIST&PUSH 3)
343   (CONST 92)                          ; (((RAT) -1 2))
345   L345
345   (LIST*&PUSH 2)
347   (LIST 3)
349   (JMP L378)
351   L351
351   (CONST&PUSH 95)                     ; TYPE-ERROR
353   (CONST&PUSH 96)                     ; :DATUM
355   (LOAD&PUSH 2)
356   (CONST&PUSH 97)                     ; :EXPECTED-TYPE
358   (CONST&PUSH 98)                     ; (MEMBER %INVERSE_JACOBI_SC ...)
360   (CALL0 99)                          ; SYSTEM::TYPE-ERROR-STRING
362   (PUSH)
363   (CONST&PUSH 4)                      ; FN
364   (CONST&PUSH 100)                    ; (%INVERSE_JACOBI_SC ...)
366   (CALL2&PUSH 101)                    ; SYSTEM::CASE-ERROR-STRING
368   (LOAD&PUSH 7)
369   (CALLSR 6 30)                       ; SYSTEM::ERROR-OF-TYPE
372   L372
372   (CONST&PUSH 93)                     ; ($ELLIPTIC_F)
374   (CONST 94)                          ; (%ACOS)
376   L376
376   (PUSH)
377   (LOAD 6)
378   L378
378   (PUSH)
379   (LIST&PUSH 2)
381   (GETVALUE&PUSH 5)                   ; M
383   (LIST 3)
385   (SKIP 1)
387   (UNBIND1)
388   (SKIP 1)
390   (UNBIND1)
391   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $MAKE_ELLIPTIC_F (E) ...)-136|
(CONST 0) = $MAKE_ELLIPTIC_F
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MAKE_ELLIPTIC_F>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAKE_ELLIPTIC_F
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MAKE_ELLIPTIC_F
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MAKE_ELLIPTIC_F>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MAKE_ELLIPTIC_F
8     (SKIP&RET 1)


Disassembly of function $MAKE_ELLIPTIC_F
(CONST 0) = MAKE-ELLIPTIC-F
(CONST 1) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L10)
3     (LOAD&PUSH 1)
4     (CALL1&PUSH 0)                      ; MAKE-ELLIPTIC-F
6     (CALL1 1)                           ; SIMPLIFY
8     (SKIP&RET 2)
10    L10
10    (LOAD 1)
11    (SKIP&RET 2)

WARNING in MAKE-ELLIPTIC-E in lines 3495..3504 :
Binding variable FN can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFUN MAKE-ELLIPTIC-E (E) ...)-137|
(CONST 0) = MAKE-ELLIPTIC-E
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-ELLIPTIC-E>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-ELLIPTIC-E
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-ELLIPTIC-E
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-ELLIPTIC-E>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-ELLIPTIC-E
8     (SKIP&RET 1)


Disassembly of function MAKE-ELLIPTIC-E
(CONST 0) = $ELLIPTIC_EU
(CONST 1) = 3
(CONST 2) = (3 . 3)
(CONST 3) = SYSTEM::DESTRUCTURING-ERROR
(CONST 4) = FN
(CONST 5) = M
(CONST 6) = ($ELLIPTIC_E)
(CONST 7) = (%ASIN)
(CONST 8) = (%JACOBI_SN)
(CONST 9) = MAKE-ELLIPTIC-E
(CONST 10) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
48 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L16)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFEQTO 0 L25)                   ; $ELLIPTIC_EU
9     (CONST&SYMBOL-FUNCTION&PUSH 9)      ; MAKE-ELLIPTIC-E
11    (LOAD&PUSH 2)
12    (CALL2 10)                          ; RECUR-APPLY
14    (SKIP&RET 2)
16    L16
16    (LOAD 1)
17    (SKIP&RET 2)
19    L19
19    (LOAD&PUSH 1)
20    (CONST&PUSH 2)                      ; (3 . 3)
21    (CALL2 3)                           ; SYSTEM::DESTRUCTURING-ERROR
23    (SKIP&RET 2)
25    L25
25    (LOAD&PUSH 1)
26    (CALLS2&PUSH 71)                    ; LENGTH
28    (CONST&PUSH 1)                      ; 3
29    (CALLSR&JMPIF 1 46 L19)             ; /=
33    (LOAD 1)
34    (CAR)
35    (CAR)
36    (BIND 4)                            ; FN
38    (LOAD 4)
39    (CDR)
40    (CAR&PUSH)
41    (LOAD 5)
42    (CDR)
43    (CDR)
44    (CAR)
45    (BIND 5)                            ; M
47    (CONST&PUSH 6)                      ; ($ELLIPTIC_E)
48    (CONST&PUSH 7)                      ; (%ASIN)
49    (CONST&PUSH 8)                      ; (%JACOBI_SN)
50    (LOAD&PUSH 6)
51    (GETVALUE&PUSH 5)                   ; M
53    (LIST&PUSH 3)
55    (LIST&PUSH 2)
57    (GETVALUE&PUSH 5)                   ; M
59    (LIST 3)
61    (UNBIND1)
62    (SKIP 1)
64    (UNBIND1)
65    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $MAKE_ELLIPTIC_E (E) ...)-138|
(CONST 0) = $MAKE_ELLIPTIC_E
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MAKE_ELLIPTIC_E>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAKE_ELLIPTIC_E
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MAKE_ELLIPTIC_E
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MAKE_ELLIPTIC_E>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MAKE_ELLIPTIC_E
8     (SKIP&RET 1)


Disassembly of function $MAKE_ELLIPTIC_E
(CONST 0) = MAKE-ELLIPTIC-E
(CONST 1) = SIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L10)
3     (LOAD&PUSH 1)
4     (CALL1&PUSH 0)                      ; MAKE-ELLIPTIC-E
6     (CALL1 1)                           ; SIMPLIFY
8     (SKIP&RET 2)
10    L10
10    (LOAD 1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN ELLIPTIC-EU (U M) ...)-139|
(CONST 0) = ELLIPTIC-EU
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ELLIPTIC-EU>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ELLIPTIC-EU
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ELLIPTIC-EU
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ELLIPTIC-EU>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ELLIPTIC-EU
8     (SKIP&RET 1)


Disassembly of function ELLIPTIC-EU
(CONST 0) = M
(CONST 1) = ELLIPTIC-K
(CONST 2) = ELLIPTIC-EC
(CONST 3) = 2
(CONST 4) = N
(CONST 5) = SN
(CONST 6) = ASIN
(CONST 7) = ELLIPTIC-E
(CONST 8) = CN
(CONST 9) = DN
(CONST 10) = 1
(CONST 11) = #C(0 1)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N M)
119 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (LOAD&PUSH 5)
4     (CALLS2&JMPIF 20 L66)               ; REALP
7     (LOAD&PUSH 5)
8     (CALLS2&JMPIF 21 L122)              ; COMPLEXP
12    (NIL)
13    L13
13    (UNBIND1)
14    (SKIP&RET 3)
16    L16
16    (LOAD&PUSH 13)
17    (LOAD&PUSH 8)
18    (CALLSR&PUSH 1 54)                  ; -
21    (LOAD&PUSH 0)
22    (GETVALUE&PUSH 0)                   ; M
24    (CALL2&PUSH 5)                      ; SN
26    (CALL1&PUSH 6)                      ; ASIN
28    (GETVALUE&PUSH 0)                   ; M
30    (CALL2&PUSH 7)                      ; ELLIPTIC-E
32    (LOAD&PUSH 8)
33    (CALLSR&PUSH 2 53)                  ; +
36    (GETVALUE&PUSH 0)                   ; M
38    (LOAD&PUSH 2)
39    (GETVALUE&PUSH 0)                   ; M
41    (CALL2&PUSH 5)                      ; SN
43    (LOAD&PUSH 3)
44    (GETVALUE&PUSH 0)                   ; M
46    (CALL2&PUSH 8)                      ; CN
48    (CALLSR&PUSH 3 55)                  ; *
51    (LOAD&PUSH 2)
52    (GETVALUE&PUSH 0)                   ; M
54    (CALL2&PUSH 9)                      ; DN
56    (CALLSR&PUSH 1 56)                  ; /
59    (CALLSR 1 54)                       ; -
62    (SKIP 1)
64    (JMP L112)
66    L66
66    (GETVALUE&PUSH 0)                   ; M
68    (CALL1&PUSH 1)                      ; ELLIPTIC-K
70    (GETVALUE&PUSH 0)                   ; M
72    (CALL1&PUSH 2)                      ; ELLIPTIC-EC
74    (LOAD&PUSH 7)
75    (CONST&PUSH 3)                      ; 2
76    (LOAD&PUSH 3)
77    (CALLSR&PUSH 2 55)                  ; *
80    (CALLS2 179)                        ; FLOOR
82    (NV-TO-STACK 2)
84    (LOAD 1)
85    (BIND 4)                            ; N
87    (CONST&PUSH 3)                      ; 2
88    (GETVALUE&PUSH 4)                   ; N
90    (LOAD&PUSH 7)
91    (CALLSR&PUSH 3 55)                  ; *
94    (LOAD&PUSH 4)
95    (LOAD&PUSH 8)
96    (CALLSR&JMPIF 1 50 L16)             ; >=
101   (LOAD&PUSH 13)
102   (GETVALUE&PUSH 0)                   ; M
104   (CALL2&PUSH 5)                      ; SN
106   (CALL1&PUSH 6)                      ; ASIN
108   (GETVALUE&PUSH 0)                   ; M
110   (CALL2 7)                           ; ELLIPTIC-E
112   L112
112   (PUSH)
113   (CALLSR 2 53)                       ; +
116   (UNBIND1)
117   (SKIP 4)
119   (JMP L13)
122   L122
122   (LOAD&PUSH 5)
123   (CALLS2&PUSH 197)                   ; REALPART
125   (LOAD&PUSH 6)
126   (CALLS2&PUSH 198)                   ; IMAGPART
128   (CONST&PUSH 10)                     ; 1
129   (GETVALUE&PUSH 0)                   ; M
131   (CALLSR&PUSH 1 54)                  ; -
134   (LOAD&PUSH 2)
135   (GETVALUE&PUSH 0)                   ; M
137   (JSR&PUSH L0)
140   (CONST&PUSH 11)                     ; #C(0 1)
141   (LOAD&PUSH 3)
142   (LOAD&PUSH 4)
143   (LOAD&PUSH 4)
144   (CALL2&PUSH 5)                      ; SN
146   (LOAD&PUSH 5)
147   (LOAD&PUSH 5)
148   (CALL2&PUSH 9)                      ; DN
150   (CALLSR&PUSH 2 55)                  ; *
153   (LOAD&PUSH 5)
154   (LOAD&PUSH 5)
155   (CALL2&PUSH 8)                      ; CN
157   (CALLSR&PUSH 1 56)                  ; /
160   (CALLSR&PUSH 2 53)                  ; +
163   (LOAD&PUSH 4)
164   (LOAD&PUSH 4)
165   (JSR&PUSH L0)
168   (GETVALUE&PUSH 0)                   ; M
170   (LOAD&PUSH 7)
171   (GETVALUE&PUSH 0)                   ; M
173   (CALL2&PUSH 5)                      ; SN
175   (LOAD&PUSH 7)
176   (LOAD&PUSH 7)
177   (CALL2&PUSH 5)                      ; SN
179   (LOAD&PUSH 15)
180   (GETVALUE&PUSH 0)                   ; M
182   (CALL2&PUSH 5)                      ; SN
184   (CALLSR&PUSH 4 55)                  ; *
187   (LOAD&PUSH 6)
188   (LOAD&PUSH 6)
189   (CALL2&PUSH 8)                      ; CN
191   (CALLSR&PUSH 1 56)                  ; /
194   (CALLSR&PUSH 2 53)                  ; +
197   (CALLSR&PUSH 1 54)                  ; -
200   (CALLSR&PUSH 2 55)                  ; *
203   (CALLSR 2 53)                       ; +
206   (SKIP 3)
208   (JMP L13)


Disassembly of function #:|(DEFPROP $ELLIPTIC_EU SIMP-$ELLIPTIC_EU ...)-140|
(CONST 0) = $ELLIPTIC_EU
(CONST 1) = OPERATORS
(CONST 2) = SIMP-$ELLIPTIC_EU
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_EU
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-$ELLIPTIC_EU
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $ELLIPTIC_EU (# #) ...)-141|
(CONST 0) = $ELLIPTIC_EU
(CONST 1) = GRAD
(CONST 2) = ((U M) ((MEXPT) ((%JACOBI_DN) U M) 2))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_EU
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((U M) ((MEXPT) (# U M) 2))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)

WARNING in SIMP-$ELLIPTIC_EU in lines 3578..3590 :
Binding variable Y can cause side effects despite of IGNORE declaration
since it is declared SPECIAL.

Disassembly of function #:|(DEFMFUN SIMP-$ELLIPTIC_EU (FORM Y Z) ...)-142|
(CONST 0) = SIMP-$ELLIPTIC_EU
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-$ELLIPTIC_EU>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-$ELLIPTIC_EU
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-$ELLIPTIC_EU
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-$ELLIPTIC_EU>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-$ELLIPTIC_EU
8     (SKIP&RET 1)


Disassembly of function SIMP-$ELLIPTIC_EU
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = TWOARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = M
(CONST 5) = $NUMER
(CONST 6) = $REALPART
(CONST 7) = $IMAGPART
(CONST 8) = 1.0
(CONST 9) = ELLIPTIC-EU
(CONST 10) = COMPLEXIFY
(CONST 11) = ($ELLIPTIC_EU)
(CONST 12) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
59 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; TWOARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2&PUSH 3)                      ; SIMPCHECK
17    (GETVALUE 0)                        ; FORM
19    (CDR)
20    (CDR)
21    (CAR&PUSH)
22    (LOAD&PUSH 9)
23    (CALL2 3)                           ; SIMPCHECK
25    (BIND 4)                            ; M
27    (LOAD&PUSH 3)
28    (CALLS2&JMPIFNOT 15 L36)            ; FLOATP
31    (GETVALUE&PUSH 4)                   ; M
33    (CALLS2&JMPIF 15 L66)               ; FLOATP
36    L36
36    (GETVALUE 5)                        ; $NUMER
38    (JMPIFNOT L49)
40    (LOAD&PUSH 3)
41    (CALLS2&JMPIFNOT 8 L49)             ; NUMBERP
44    (GETVALUE&PUSH 4)                   ; M
46    (CALLS2&JMPIF 8 L66)                ; NUMBERP
49    L49
49    (CONST&PUSH 11)                     ; ($ELLIPTIC_EU)
50    (LOAD&PUSH 4)
51    (GETVALUE&PUSH 4)                   ; M
53    (LIST&PUSH 3)
55    (GETVALUE&PUSH 0)                   ; FORM
57    (CALL2 12)                          ; EQTEST
59    L59
59    (UNBIND1)
60    (SKIP 1)
62    (UNBIND 2)
64    (SKIP&RET 4)
66    L66
66    (LOAD&PUSH 3)
67    (CALL1&PUSH 6)                      ; $REALPART
69    (LOAD&PUSH 4)
70    (CALL1&PUSH 7)                      ; $IMAGPART
72    (GETVALUE&PUSH 4)                   ; M
74    (CONST&PUSH 8)                      ; 1.0
75    (CALLS2 174)                        ; COMMON-LISP:FLOAT
77    (BIND 4)                            ; M
79    (LOAD&PUSH 4)
80    (LOAD&PUSH 4)
81    (CALLS2&PUSH 196)                   ; COMPLEX
83    (GETVALUE&PUSH 4)                   ; M
85    (CALL2&PUSH 9)                      ; ELLIPTIC-EU
87    (CALL1 10)                          ; COMPLEXIFY
89    (UNBIND1)
90    (SKIP 2)
92    (JMP L59)


Disassembly of function #:|(DEFMFUN $ELLIPTIC_EU (U M) ...)-143|
(CONST 0) = $ELLIPTIC_EU
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ELLIPTIC_EU>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ELLIPTIC_EU
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ELLIPTIC_EU
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ELLIPTIC_EU>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ELLIPTIC_EU
8     (SKIP&RET 1)


Disassembly of function $ELLIPTIC_EU
(CONST 0) = M
(CONST 1) = ($ELLIPTIC_EU)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; ($ELLIPTIC_EU)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)


Disassembly of function #:|(DEFUN AGM (A0 B0 PHI) ...)-144|
(CONST 0) = AGM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE AGM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; AGM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AGM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE AGM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; AGM
8     (SKIP&RET 1)


Disassembly of function AGM
(CONST 0) = 0
(CONST 1) = K
(CONST 2) = 16
(CONST 3) = 1/2
(CONST 4) = #<COMPILED-CLOSURE AGM-1>
(CONST 5) = *STANDARD-OUTPUT*
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K *STANDARD-OUTPUT*)
writes special variable : (K)
47 byte-code instructions:
0     (NIL&PUSH)
1     (CONST 0)                           ; 0
2     (BIND 1)                            ; K
4     (JMP L72)
7     L7
7     (CONST&PUSH 3)                      ; 1/2
8     (LOAD&PUSH 8)
9     (LOAD&PUSH 8)
10    (CALLSR&PUSH 2 53)                  ; +
13    (CALLSR&PUSH 2 55)                  ; *
16    (LOAD&PUSH 8)
17    (LOAD&PUSH 8)
18    (CALLSR&PUSH 2 55)                  ; *
21    (CALLS2&STORE 156 7)                ; SQRT
24    (POP&STORE 7)
26    (CONST&PUSH 3)                      ; 1/2
27    (LOAD&PUSH 8)
28    (LOAD&PUSH 8)
29    (CALLSR&PUSH 1 54)                  ; -
32    (CALLSR&STORE 2 55 3)               ; *
36    (LOAD&PUSH 5)
37    (LOAD&PUSH 7)
38    (LOAD&PUSH 9)
39    (CALLSR&PUSH 1 56)                  ; /
42    (LOAD&PUSH 7)
43    (CALLS2&PUSH 163)                   ; COMMON-LISP:TAN
45    (CALLSR&PUSH 2 55)                  ; *
48    (PUSH-UNBOUND 1)
50    (CALLS2&PUSH 167)                   ; COMMON-LISP:ATAN
52    (CALLSR&STORE 2 53 5)               ; +
56    (CONST&PUSH 4)                      ; #<COMPILED-CLOSURE AGM-1>
57    (GETVALUE&PUSH 5)                   ; *STANDARD-OUTPUT*
59    (LOAD&PUSH 9)
60    (LOAD&PUSH 9)
61    (LOAD&PUSH 7)
62    (LOAD&PUSH 10)
63    (CALLSR 5 21)                       ; FUNCALL
66    (GETVALUE&PUSH 1)                   ; K
68    (CALLS2 150)                        ; 1+
70    (SETVALUE 1)                        ; K
72    L72
72    (GETVALUE&PUSH 1)                   ; K
74    (CONST&PUSH 2)                      ; 16
75    (CALLSR&JMPIFNOT 1 50 L7)           ; >=
80    (NIL)
81    (UNBIND1)
82    (SKIP&RET 5)


Disassembly of function AGM-1
(CONST 0) = #\Space
4 required arguments
0 optional arguments
Rest parameter
No keyword parameters
19 byte-code instructions:
0     (LOAD&PUSH 4)
1     (LOAD&PUSH 6)
2     (CALLS1 132)                        ; PRINC
4     (CONST&PUSH 0)                      ; #\Space
5     (LOAD&PUSH 6)
6     (CALLS1 136)                        ; WRITE-CHAR
8     (LOAD&PUSH 3)
9     (LOAD&PUSH 6)
10    (CALLS1 132)                        ; PRINC
12    (CONST&PUSH 0)                      ; #\Space
13    (LOAD&PUSH 6)
14    (CALLS1 136)                        ; WRITE-CHAR
16    (LOAD&PUSH 2)
17    (LOAD&PUSH 6)
18    (CALLS1 132)                        ; PRINC
20    (LOAD&PUSH 5)
21    (CALLS1 139)                        ; TERPRI
23    (LOAD 1)
24    (SKIP&RET 6)


Disassembly of function #:|(DEFPROP %JACOBI_AM SIMP-%JACOBI_AM ...)-145|
(CONST 0) = %JACOBI_AM
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%JACOBI_AM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %JACOBI_AM
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%JACOBI_AM
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $JACOBI_AM (U M) ...)-146|
(CONST 0) = $JACOBI_AM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JACOBI_AM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JACOBI_AM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JACOBI_AM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JACOBI_AM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JACOBI_AM
8     (SKIP&RET 1)


Disassembly of function $JACOBI_AM
(CONST 0) = M
(CONST 1) = (%JACOBI_AM)
(CONST 2) = RESIMPLIFY
(CONST 3) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (M)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; M
3     (CONST&PUSH 1)                      ; (%JACOBI_AM)
4     (LOAD&PUSH 6)
5     (CALL1&PUSH 2)                      ; RESIMPLIFY
7     (GETVALUE&PUSH 0)                   ; M
9     (CALL1&PUSH 2)                      ; RESIMPLIFY
11    (LIST&PUSH 3)
13    (CALL1 3)                           ; SIMPLIFY
15    (UNBIND1)
16    (SKIP&RET 3)

WARNING in SIMP-%JACOBI_AM in lines 3609..3620 :
variable YY is not used.
Misspelled or missing IGNORE declaration?

Disassembly of function #:|(DEFMFUN SIMP-%JACOBI_AM (FORM YY Z) ...)-147|
(CONST 0) = SIMP-%JACOBI_AM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%JACOBI_AM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%JACOBI_AM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%JACOBI_AM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%JACOBI_AM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%JACOBI_AM
8     (SKIP&RET 1)


Disassembly of function SIMP-%JACOBI_AM
(CONST 0) = FORM
(CONST 1) = TWOARGCHECK
(CONST 2) = SIMPCHECK
(CONST 3) = M
(CONST 4) = $NUMER
(CONST 5) = 1.0
(CONST 6) = SN
(CONST 7) = ASIN
(CONST 8) = (%JACOBI_AM)
(CONST 9) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($NUMER M FORM)
49 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 0)                   ; FORM
5     (CALL1 1)                           ; TWOARGCHECK
7     (GETVALUE 0)                        ; FORM
9     (CDR)
10    (CAR&PUSH)
11    (LOAD&PUSH 5)
12    (CALL2&PUSH 2)                      ; SIMPCHECK
14    (GETVALUE 0)                        ; FORM
16    (CDR)
17    (CDR)
18    (CAR&PUSH)
19    (LOAD&PUSH 6)
20    (CALL2 2)                           ; SIMPCHECK
22    (BIND 3)                            ; M
24    (LOAD&PUSH 3)
25    (CALLS2&JMPIFNOT 15 L33)            ; FLOATP
28    (GETVALUE&PUSH 3)                   ; M
30    (CALLS2&JMPIF 15 L62)               ; FLOATP
33    L33
33    (GETVALUE 4)                        ; $NUMER
35    (JMPIFNOT L46)
37    (LOAD&PUSH 3)
38    (CALLS2&JMPIFNOT 8 L46)             ; NUMBERP
41    (GETVALUE&PUSH 3)                   ; M
43    (CALLS2&JMPIF 8 L62)                ; NUMBERP
46    L46
46    (CONST&PUSH 8)                      ; (%JACOBI_AM)
47    (LOAD&PUSH 4)
48    (GETVALUE&PUSH 3)                   ; M
50    (LIST&PUSH 3)
52    (GETVALUE&PUSH 0)                   ; FORM
54    (CALL2 9)                           ; EQTEST
56    L56
56    (UNBIND1)
57    (SKIP 1)
59    (UNBIND1)
60    (SKIP&RET 4)
62    L62
62    (LOAD&PUSH 3)
63    (CONST&PUSH 5)                      ; 1.0
64    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
66    (GETVALUE&PUSH 3)                   ; M
68    (CONST&PUSH 5)                      ; 1.0
69    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
71    (CALL2&PUSH 6)                      ; SN
73    (CALL1 7)                           ; ASIN
75    (JMP L56)


Wrote file binary-clisp/ellipt.fas
Wrote file /cygdrive/e/temp/maxima/src/ellipt.lis