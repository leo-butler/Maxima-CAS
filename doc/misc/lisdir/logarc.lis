Listing of compilation of file /cygdrive/e/temp/maxima/src/logarc.lisp
on 2002-12-17 13:33:17 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/logarc.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE LOGARC)-2|
(CONST 0) = LOGARC
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOGARC
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $LOGARC (EXP) ...)-3|
(CONST 0) = $LOGARC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LOGARC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LOGARC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LOGARC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LOGARC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LOGARC
8     (SKIP&RET 1)


Disassembly of function $LOGARC
(CONST 0) = ARCP
(CONST 1) = LOGARC
(CONST 2) = $ATAN2
(CONST 3) = %ATAN
(CONST 4) = DIV
(CONST 5) = $LOGARC
(CONST 6) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
41 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L32)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (CALL1&JMPIF 0 L35)                 ; ARCP
9     (LOAD 1)
10    (CAR)
11    (CAR&PUSH)
12    (JMPIFNOTEQTO 2 L43)                ; $ATAN2
15    (CONST&PUSH 3)                      ; %ATAN
16    (LOAD 2)
17    (CDR)
18    (CAR&PUSH)
19    (LOAD 3)
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (CALL2 4)                           ; DIV
25    L25
25    (PUSH)
26    (JSR&PUSH L0)
28    (CALL2 1)                           ; LOGARC
30    (SKIP&RET 2)
32    L32
32    (LOAD 1)
33    (SKIP&RET 2)
35    L35
35    (LOAD 1)
36    (CAR)
37    (CAR&PUSH)
38    (LOAD 2)
39    (CDR)
40    (CAR)
41    (JMP L25)
43    L43
43    (CONST&SYMBOL-FUNCTION&PUSH 5)      ; $LOGARC
45    (LOAD&PUSH 2)
46    (CALL2 6)                           ; RECUR-APPLY
48    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN LOGARC (F X) ...)-4|
(CONST 0) = LOGARC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LOGARC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LOGARC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LOGARC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LOGARC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LOGARC
8     (SKIP&RET 1)


Disassembly of function LOGARC
(CONST 0) = X
(CONST 1) = (%ACOS %ATAN %ASINH %ATANH)
(CONST 2) = MEMQ
(CONST 3) = (%ACOS %ASIN)
(CONST 4) = ((MTIMES SIMP) -1 $%I)
(CONST 5) = (%LOG)
(CONST 6) = $%I
(CONST 7) = 1
(CONST 8) = 2
(CONST 9) = POWER
(CONST 10) = NEG
(CONST 11) = ADD
(CONST 12) = ROOT
(CONST 13) = MUL
(CONST 14) = SIMPLN
(CONST 15) = (%ATAN %ACOT)
(CONST 16) = ((MTIMES SIMP) ((RAT SIMP) 1 2) $%I)
(CONST 17) = (%LOG)
(CONST 18) = MORP
(CONST 19) = PORM
(CONST 20) = DIV
(CONST 21) = (%ASINH %ACOSH)
(CONST 22) = (%LOG)
(CONST 23) = (%ATANH %ACOTH)
(CONST 24) = ((RAT SIMP) 1 2)
(CONST 25) = (%LOG)
(CONST 26) = -1
(CONST 27) = (%ASEC %ACSC %ASECH %ACSCH)
(CONST 28) = $INVERSE
(CONST 29) = RECIP
(CONST 30) = OLDGET
(CONST 31) = "Bad argument to Logarc"
(CONST 32) = MERROR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
135 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (LOAD&PUSH 5)
4     (CONST&PUSH 1)                      ; (%ACOS %ATAN %ASINH %ATANH)
5     (CALL2&PUSH 2)                      ; MEMQ
7     (LOAD&PUSH 6)
8     (CONST&PUSH 3)                      ; (%ACOS %ASIN)
9     (CALL2&JMPIF 2 L68)                 ; MEMQ
12    (LOAD&PUSH 6)
13    (CONST&PUSH 15)                     ; (%ATAN %ACOT)
14    (CALL2&JMPIF 2 L106)                ; MEMQ
18    (LOAD&PUSH 6)
19    (CONST&PUSH 21)                     ; (%ASINH %ACOSH)
20    (CALL2&JMPIF 2 L138)                ; MEMQ
24    (LOAD&PUSH 6)
25    (CONST&PUSH 23)                     ; (%ATANH %ACOTH)
26    (CALL2&JMPIFNOT 2 L192)             ; MEMQ
30    (CONST&PUSH 24)                     ; ((RAT SIMP) 1 2)
31    (CONST&PUSH 25)                     ; (%LOG)
32    (CONST&PUSH 7)                      ; 1
33    (GETVALUE&PUSH 0)                   ; X
35    (CALL2&PUSH 11)                     ; ADD
37    (LOAD&PUSH 3)
38    (GETVALUE&PUSH 0)                   ; X
40    (CONST&PUSH 26)                     ; -1
41    (CALL2&PUSH 11)                     ; ADD
43    (CALL2&PUSH 18)                     ; MORP
45    (CALL2&PUSH 20)                     ; DIV
47    (LIST&PUSH 2)
49    (CONST 7)                           ; 1
50    L50
50    (PUSH)
51    (T&PUSH)
52    (CALL&PUSH 3 14)                    ; SIMPLN
55    (CALL2 13)                          ; MUL
57    (SKIP 1)
59    (JMP L203)
62    L62
62    (CONST 6)                           ; $%I
63    (JMP L74)
65    L65
65    (CONST 7)                           ; 1
66    (JMP L94)
68    L68
68    (CONST&PUSH 4)                      ; ((MTIMES SIMP) -1 $%I)
69    (CONST&PUSH 5)                      ; (%LOG)
70    (LOAD&JMPIF 2 L62)
73    (CONST 7)                           ; 1
74    L74
74    (PUSH)
75    (CONST&PUSH 7)                      ; 1
76    (GETVALUE&PUSH 0)                   ; X
78    (CONST&PUSH 8)                      ; 2
79    (CALL2&PUSH 9)                      ; POWER
81    (CALL1&PUSH 10)                     ; NEG
83    (CALL2&PUSH 11)                     ; ADD
85    (CONST&PUSH 8)                      ; 2
86    (CALL2&PUSH 12)                     ; ROOT
88    (CALL2&PUSH 13)                     ; MUL
90    (LOAD&JMPIF 3 L65)
93    (CONST 6)                           ; $%I
94    L94
94    (PUSH)
95    (GETVALUE&PUSH 0)                   ; X
97    (CALL2&PUSH 13)                     ; MUL
99    (CALL2&PUSH 11)                     ; ADD
101   (LIST&PUSH 2)
103   (CONST 7)                           ; 1
104   (JMP L50)
106   L106
106   (CONST&PUSH 16)                     ; ((MTIMES SIMP) (# 1 2) $%I)
107   (CONST&PUSH 17)                     ; (%LOG)
108   (CONST&PUSH 7)                      ; 1
109   (LOAD&PUSH 3)
110   (CONST&PUSH 6)                      ; $%I
111   (GETVALUE&PUSH 0)                   ; X
113   (CALL2&PUSH 13)                     ; MUL
115   (CALL2&PUSH 18)                     ; MORP
117   (CALL2&PUSH 11)                     ; ADD
119   (CONST&PUSH 6)                      ; $%I
120   (GETVALUE&PUSH 0)                   ; X
122   (CALL2&PUSH 13)                     ; MUL
124   (LOAD&PUSH 4)
125   (CONST&PUSH 7)                      ; 1
126   (CALL2&PUSH 19)                     ; PORM
128   (CALL2&PUSH 11)                     ; ADD
130   (CALL2&PUSH 20)                     ; DIV
132   (LIST&PUSH 2)
134   (CONST 7)                           ; 1
135   (JMP L50)
138   L138
138   (CONST&PUSH 22)                     ; (%LOG)
139   (GETVALUE&PUSH 0)                   ; X
141   (GETVALUE&PUSH 0)                   ; X
143   (CONST&PUSH 8)                      ; 2
144   (CALL2&PUSH 9)                      ; POWER
146   (LOAD&PUSH 3)
147   (CONST&PUSH 7)                      ; 1
148   (CALL2&PUSH 19)                     ; PORM
150   (CALL2&PUSH 11)                     ; ADD
152   (CONST&PUSH 8)                      ; 2
153   (CALL2&PUSH 12)                     ; ROOT
155   (CALL2&PUSH 11)                     ; ADD
157   (LIST&PUSH 2)
159   (CONST&PUSH 7)                      ; 1
160   (T&PUSH)
161   (CALL 3 14)                         ; SIMPLN
164   (SKIP 1)
166   (JMP L203)
168   L168
168   (LOAD&PUSH 6)
169   (CONST&PUSH 28)                     ; $INVERSE
170   (PUSH-UNBOUND 1)
172   (CALLS2&PUSH 132)                   ; GET
174   (CONST&PUSH 29)                     ; RECIP
175   (CALL2&PUSH 30)                     ; OLDGET
177   (CONST&PUSH 28)                     ; $INVERSE
178   (CALL2&PUSH 30)                     ; OLDGET
180   (GETVALUE&PUSH 0)                   ; X
182   (CONST&PUSH 26)                     ; -1
183   (CALL2&PUSH 9)                      ; POWER
185   (JSR L0)
188   (SKIP 1)
190   (JMP L203)
192   L192
192   (LOAD&PUSH 6)
193   (CONST&PUSH 27)                     ; (%ASEC %ACSC %ASECH %ACSCH)
194   (CALL2&JMPIF 2 L168)                ; MEMQ
197   (CONST&PUSH 31)                     ; "Bad argument to Logarc"
199   (CALL1 32)                          ; MERROR
201   (SKIP 1)
203   L203
203   (UNBIND1)
204   (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN HALFANGLE (F A) ...)-5|
(CONST 0) = HALFANGLE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HALFANGLE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HALFANGLE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HALFANGLE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HALFANGLE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HALFANGLE
8     (SKIP&RET 1)


Disassembly of function HALFANGLE
(CONST 0) = MTIMESP
(CONST 1) = RATNUMP
(CONST 2) = 2
(CONST 3) = MUL
(CONST 4) = HALFANGLEAUX
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
25 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1 0)                           ; MTIMESP
3     (JMPIFNOT1 L31)
5     (LOAD 1)
6     (CDR)
7     (CAR&PUSH)
8     (CALL1 1)                           ; RATNUMP
10    (JMPIFNOT1 L31)
12    (LOAD 1)
13    (CDR)
14    (CAR)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (CONST 2)                           ; 2
19    (EQ)
20    (JMPIFNOT1 L31)
22    (LOAD&PUSH 2)
23    (CONST&PUSH 2)                      ; 2
24    (LOAD&PUSH 3)
25    (CALL2&PUSH 3)                      ; MUL
27    (CALL2 4)                           ; HALFANGLEAUX
29    (SKIP&RET 3)
31    L31
31    (SKIP&RET 3)


Disassembly of function #:|(DEFUN HALFANGLEAUX (F A) ...)-6|
(CONST 0) = HALFANGLEAUX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE HALFANGLEAUX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; HALFANGLEAUX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; HALFANGLEAUX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE HALFANGLEAUX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; HALFANGLEAUX
8     (SKIP&RET 1)


Disassembly of function HALFANGLEAUX
(CONST 0) = (%COS %COT %COTH %COSH)
(CONST 1) = MEMQ
(CONST 2) = (%SIN %COS)
(CONST 3) = 1
(CONST 4) = (%COS)
(CONST 5) = SIMP-%COS
(CONST 6) = PORM
(CONST 7) = ADD
(CONST 8) = 2
(CONST 9) = DIV
(CONST 10) = ((RAT SIMP) 1 2)
(CONST 11) = POWER
(CONST 12) = (%TAN %COT)
(CONST 13) = (%COS)
(CONST 14) = (%SIN)
(CONST 15) = SIMP-%SIN
(CONST 16) = (%SINH %COSH)
(CONST 17) = (%COSH)
(CONST 18) = SIMPLIFYA
(CONST 19) = (%TANH %COTH)
(CONST 20) = (%COSH)
(CONST 21) = (%SINH)
(CONST 22) = (%SEC %CSC %SECH %CSCH)
(CONST 23) = RECIP
(CONST 24) = -1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
99 byte-code instructions:
0     L0
0     (LOAD&PUSH 2)
1     (CONST&PUSH 0)                      ; (%COS %COT %COTH %COSH)
2     (CALL2&PUSH 1)                      ; MEMQ
4     (LOAD&PUSH 3)
5     (CONST&PUSH 2)                      ; (%SIN %COS)
6     (CALL2&JMPIF 1 L48)                 ; MEMQ
9     (LOAD&PUSH 3)
10    (CONST&PUSH 12)                     ; (%TAN %COT)
11    (CALL2&JMPIF 1 L69)                 ; MEMQ
14    (LOAD&PUSH 3)
15    (CONST&PUSH 16)                     ; (%SINH %COSH)
16    (CALL2&JMPIF 1 L95)                 ; MEMQ
20    (LOAD&PUSH 3)
21    (CONST&PUSH 19)                     ; (%TANH %COTH)
22    (CALL2&JMPIF 1 L115)                ; MEMQ
26    (LOAD&PUSH 3)
27    (CONST&PUSH 22)                     ; (%SEC %CSC %SECH %CSCH)
28    (CALL2&JMPIFNOT 1 L140)             ; MEMQ
32    (LOAD&PUSH 3)
33    (CONST&PUSH 23)                     ; RECIP
34    (PUSH-UNBOUND 1)
36    (CALLS2&PUSH 132)                   ; GET
38    (LOAD&PUSH 3)
39    (JSR&PUSH L0)
41    (CONST 24)                          ; -1
43    L43
43    (PUSH)
44    (CALL2 11)                          ; POWER
46    (SKIP&RET 4)
48    L48
48    (CONST&PUSH 3)                      ; 1
49    (LOAD&PUSH 1)
50    (CONST&PUSH 4)                      ; (%COS)
51    (LOAD&PUSH 5)
52    (LIST&PUSH 2)
54    (CONST&PUSH 3)                      ; 1
55    (T&PUSH)
56    (CALL&PUSH 3 5)                     ; SIMP-%COS
59    (CALL2&PUSH 6)                      ; PORM
61    (CALL2&PUSH 7)                      ; ADD
63    (CONST&PUSH 8)                      ; 2
64    (CALL2&PUSH 9)                      ; DIV
66    (CONST 10)                          ; ((RAT SIMP) 1 2)
67    (JMP L43)
69    L69
69    (CONST&PUSH 3)                      ; 1
70    (LOAD&PUSH 1)
71    (CONST&PUSH 13)                     ; (%COS)
72    (LOAD&PUSH 5)
73    (LIST&PUSH 2)
75    (CONST&PUSH 3)                      ; 1
76    (T&PUSH)
77    (CALL&PUSH 3 5)                     ; SIMP-%COS
80    (CALL2&PUSH 6)                      ; PORM
82    (CALL2&PUSH 7)                      ; ADD
84    (CONST&PUSH 14)                     ; (%SIN)
85    (LOAD&PUSH 4)
86    (LIST&PUSH 2)
88    (CONST&PUSH 3)                      ; 1
89    (T&PUSH)
90    (CALL 3 15)                         ; SIMP-%SIN
93    (JMP L135)
95    L95
95    (CONST&PUSH 17)                     ; (%COSH)
96    (LOAD&PUSH 3)
97    (LIST&PUSH 2)
99    (T&PUSH)
100   (CALL2&PUSH 18)                     ; SIMPLIFYA
102   (LOAD&PUSH 1)
103   (CONST&PUSH 3)                      ; 1
104   (CALL2&PUSH 6)                      ; PORM
106   (CALL2&PUSH 7)                      ; ADD
108   (CONST&PUSH 8)                      ; 2
109   (CALL2&PUSH 9)                      ; DIV
111   (CONST 10)                          ; ((RAT SIMP) 1 2)
112   (JMP L43)
115   L115
115   (CONST&PUSH 20)                     ; (%COSH)
116   (LOAD&PUSH 3)
117   (LIST&PUSH 2)
119   (T&PUSH)
120   (CALL2&PUSH 18)                     ; SIMPLIFYA
122   (LOAD&PUSH 1)
123   (CONST&PUSH 3)                      ; 1
124   (CALL2&PUSH 6)                      ; PORM
126   (CALL2&PUSH 7)                      ; ADD
128   (CONST&PUSH 21)                     ; (%SINH)
129   (LOAD&PUSH 4)
130   (LIST&PUSH 2)
132   (T&PUSH)
133   (CALL2 18)                          ; SIMPLIFYA
135   L135
135   (PUSH)
136   (CALL2 9)                           ; DIV
138   (SKIP&RET 4)
140   L140
140   (NIL)
141   (SKIP&RET 4)


Wrote file binary-clisp/logarc.fas
Wrote file /cygdrive/e/temp/maxima/src/logarc.lis